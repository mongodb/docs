stepnum: 1
title: Connect a :binary:`~bin.mongos` to the cluster
level: 4
ref: deploy-cluster-connect-mongos
pre: |
  Start a :binary:`~bin.mongos` specifying
  the keyfile using either a configuration file or a command line parameter.
action:
  - pre: |
      **Configuration File**

      If using a :doc:`configuration file
      </reference/configuration-options>`, set the
      :setting:`security.keyFile` to the keyfile`s path and the
      :setting:`sharding.configDB` to the replica set name and at least
      one member of the replica set in ``<replSetName>/<host:port>``
      format.
    language: yaml
    code: |
      security:
        keyFile: <path-to-keyfile>
      sharding:
        configDB: <configReplSetName>/cfg1.example.net:27017,cfg2.example.net:27017,...
    post: |

       .. include:: /includes/extracts/default-bind-ip-security-additional-config-file.rst

  - pre: |
      Start the :binary:`~bin.mongos` specifying the ``--config`` option and the
      path to the configuration file.
    language: shell
    code: |
      mongos --config <path-to-config>

  - pre: |
      **Command Line**

      If using command line parameters start the :binary:`~bin.mongos` and specify
      the ``--keyFile`` and ``--configdb`` parameters.
    language: sh
    code: |
      mongos --keyFile <path-to-keyfile> --configdb <configReplSetName>/cfg1.example.net:27017,cfg2.example.net:27017,...
    post: |
       .. include:: /includes/extracts/default-bind-ip-security-additional-command-line.rst
---
stepnum: 2
title: Connect to a :binary:`~bin.mongos` over the localhost interface.
level: 4
ref: deploy-cluster-connect-mongo
source:
  file: steps-deploy-replica-set-with-auth.yaml
  ref: deploy-repset-connect-to-member
replacement:
  program: :binary:`~bin.mongos`
---
title: Create the user administrator.
stepnum: 3
level: 4
ref: add-user
pre: |
  .. important::
     After you create the first user, the :ref:`localhost exception
     <localhost-exception>` is no longer available.

     The first user must have privileges to create other users, such
     as a user with the :authrole:`userAdminAnyDatabase`. This ensures
     that you can create additional users after the :ref:`localhost-exception`
     closes.

     If at least one user does *not* have privileges to create users,
     once the localhost exception closes you cannot create
     or modify users, and therefore may be unable to
     perform necessary operations.

  Add a user using the :method:`db.createUser()` method. The user should
  have at minimum the :authrole:`userAdminAnyDatabase` role on the
  ``admin`` database.

  .. important::
     Passwords should be random, long, and complex to ensure system security
     and to prevent or delay malicious access.

action:
  pre: |
     The following example creates the user ``fred`` on the
     ``admin`` database:
  language: javascript
  code: |
    admin = db.getSiblingDB("admin")
    admin.createUser(
      {
        user: "fred",
        pwd: "changeme1",
        roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
      }
    )
post: |
  See :ref:`database-user-roles` for a full list of built-in roles and
  related to database administration operations.
---
title: Authenticate as the user administrator.
stepnum: 4
level: 4
ref: auth-as-admin
action:
  - pre: |
      Use :method:`db.auth()` to authenticate as the user administrator
      to create additional users:
    language: javascript
    code: |
      db.getSiblingDB("admin").auth("fred", "changeme1" )
  - pre: |
      Alternatively, connect a new :binary:`~bin.mongo` shell to the target
      replica set member using the ``-u <username>``, ``-p <password>``, and
      the ``--authenticationDatabase "admin"`` parameters. You must use
      the :ref:`localhost-exception` to connect to the :binary:`~bin.mongos`.
    language: sh
    code: |
      mongo -u "fred" -p "changeme1" --authenticationDatabase "admin"
---
title: Create Administrative User for Cluster Management
stepnum: 5
level: 4
ref: add-user-cluster
pre: |
  The cluster administrator user has the :authrole:`clusterAdmin` role,
  which grants access to replication and sharding operations.

  Create a :authrole:`clusterAdmin` user in the ``admin`` database.
action:
  - pre: |
      The following example creates the user ``ravi`` on the ``admin``
      database.

      .. important::
         Passwords should be random, long, and complex to ensure system
         security and to prevent or delay malicious access.

    language: sh
    code: |
      db.getSiblingDB("admin").createUser(
        {
          "user" : "ravi",
          "pwd" : "changeme2",
          roles: [ { "role" : "clusterAdmin", "db" : "admin" } ]
        }
      )
post: |
  See :ref:`cluster-admin-roles` for a full list of built-in roles related to
  replica set and sharded cluster operations.
---
stepnum: 7
title: Create additional users (Optional).
ref: deploy-cluster-create-users
level: 4
pre: |
  Create users to allow clients to connect and access the
  sharded cluster. See :ref:`database-user-roles` for available built-in
  roles, such as :authrole:`read` and :authrole:`readWrite`.
  You may also want additional administrative users.
  For more information on users, see :doc:`/core/security-users`.

  To create additional users, you must authenticate as a user with
  :authrole:`userAdminAnyDatabase` or :authrole:`userAdmin` roles.
...
