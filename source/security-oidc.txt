.. _oidc-authentication-authorization:

================================================
Set up {+wif+} with OIDC
================================================

.. default-domain:: mongodb

.. meta::
   :keywords: connect

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

In MongoDB 7.0 and later, you can manage your workforce access to
MongoDB by federating to your own |idp| supporting OpenID Connect (|oidc|). 

With {+wif+}, you can:

- Manage your workforce access to MongoDB deployments through your
  existing |idp|.
- Enforce security policies such as password complexity, credential
  rotation, and |mfa| within your |idp|.

Currently, you can only use {+wif+} with |oidc| for database access. 

You can enable one |oidc| |idp| for multiple organizations. When 
you enable |oidc| |idp| in an organization, you can use it in all
projects in that organization for database access.

Required Access
---------------

To manage |oidc| configuration, you must have
:authrole:`Organization Owner` access to |service|.

Prerequisites
-------------

To manage user authentication and authorization using |oidc| in
|service|, you must :ref:`map one or more domains to your Identity
Provider <atlas-manage-fed-domain-map>`.

Procedures
----------

.. important::

   You configure {+wif+} in two stages. To link your |idp| to |service|:

   - Configure your |idp| and save its metadata.
   - Set the metadata from your |idp| to |service|.

.. _configure-idp-oidc:

Configure An External Identity Provider Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To configure {+wif+} with |oidc|, you must first register your |oidc|
or OAuth application with an |idp| that supports |oidc| standard, such
as :abbr:`Azure AD (Azure Active Directory)`, Okta, or Ping Identity.

You configure your |oidc| application for the following grant types:

- Authorization Code Flow with {+pkce+} and/or 
- Device Authorization Flow. 

MongoDB recommends using Authorization Code Flow with {+pkce+} for better
security posture. Use Device Authorization Flow only if your users need
to access the database from machines with no browser.  

|oidc| application registration steps can vary based on your
|idp|. Ensure that you complete the following items during
your registration process:

.. procedure::
   :style: normal

   .. step:: Register a new application for |service|.

      Make sure to select :guilabel:`public client/native application` as the client type.

   .. step:: Set the :guilabel:`Redirect URL` value to ``http://localhost:27097/redirect``.

   .. step:: Add or enable :guilabel:`groups` claim.

      This assures that your access tokens contain the group membership
      information of the user authenticating. MongoDB uses the values
      sent in groups claim for authorization.

   .. step:: (Optional) Allow refresh tokens if you want MongoDB clients to
             refresh the tokens for a better user experience.

   .. step:: (Optional) Configure access token lifetime (``exp`` claim) to align with
             your database connection session time.

Once you register your application, save the ``issuer``, 
``clientId`` and ``audience`` values to use in the next stage of the
:ref:`Atlas OIDC IdP configuration <apply-oidc-idp>`.

.. _apply-oidc-idp:

Configure OIDC Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note:: Prerequisite

   This procedure requires you to have :authrole:`Organization Owner`
   access and assumes you already have an |oidc| or OAuth2 application
   created in your |idp|. To learn
   how to configure an |idp|, see :ref:`configure-idp-oidc`.

You can configure {+wif+} with |oidc| for database access in |service|
from the :guilabel:`Federation Management Console`.

Use the :guilabel:`Federation Management Console` to:

- Configure :guilabel:`Identity Providers` to authenticate users
  belonging to specified organizations.
- Connect |service| :guilabel:`Organizations` to your |idp|.

To configure an |oidc| |idp| in |service|:

.. procedure::
   :style: normal

   .. step:: Open the Management Console.

      .. include:: /includes/steps/open-fed-auth-console.rst
  
   .. step:: Click :guilabel:`Configure Identity Providers`.

   .. step:: If you do not have any Identity Providers configured yet, click
             :guilabel:`Setup Identity Provider`. Otherwise, on the
             :guilabel:`Identity Providers` screen, click
             :guilabel:`Configure Identity Provider(s)`.

   .. step:: Enter the following |oidc| Protocol Settings.

      .. list-table::
         :header-rows: 1
         :widths: 30 10 60
         :stub-columns: 1

         * - Setting
           - Necessity
           - Value

         * - :guilabel:`Configuration Name`
           - Required
           - Human-readable label that identifies this configuration.

         * - :guilabel:`Configuration Description`
           - Required
           - Human-readable label that describes this configuration.

         * - :guilabel:`Issuer URI`
           - Required
           - Issuer value provided by your registered |idp| application.
             Using this URI, MongoDB finds an OpenID Provider Configuration
             Document, which should be available in the
             ``/.wellknown/open-id-configuration`` endpoint. 

         * - :guilabel:`Client ID`
           - Required
           - Unique identifier for your registered application. Enter
             the ``clientId`` value from the app you registered
             with |oidc| |idp|.

         * - Audience
           - Required
           - Entity that your |oidc| provider intends the token for. Enter
             the ``audience`` value from the app you registered
             with |oidc| |idp|.
      
         * - :guilabel:`Requested Scopes`
           - Optional
           - Tokens that give users permission to request data
             from the authorization endpoint.

             For each additional scope you
             want to add, click :guilabel:`Add more scopes`.

         * - :guilabel:`User Claim`
           - Required
           - The identifier of the claim that includes the user principal
             identity. Accept the default value unless your |idp| uses a
             different claim.
          
             *Default*: ``sub``

         * - :guilabel:`Groups Claim`
           - Required
           - The identifier of the claim that includes the principal's |idp|
             user group membership information. Accept the default value
             unless your |idp| uses a different claim, or you need a custom 
             claim. 
         
             *Default*: ``groups``

   .. step:: Click :guilabel:`Finish`.
   .. step:: Associate at least one domain to your OIDC |idp|.

      .. procedure::
         :style: connected

         .. step:: In your |oidc| card, click :guilabel:`Associate Domains`.

         .. step:: In the :guilabel:`Associate Domains with Identity Provider` modal,
            select one or more domains.

         .. step:: Click :guilabel:`Submit`.

   .. step:: Enable your |oidc| |idp| in an organization.

      .. procedure::
         :style: connected

         .. step:: Click :guilabel:`Connect Organizations`.

         .. step:: For the organization you want to connect to |oidc|, click
            :guilabel:`Configure Access`.

         .. step:: Click :guilabel:`Connect Identity Provider`.
      
            .. note::

               If you have another |idp| configured, this button says
               :guilabel:`Connect Identity Provider(s)`.

   .. step:: In the :guilabel:`Connect Identity Provider(s)` modal, select a
      row where the :guilabel:`Type` is :guilabel:`OIDC for Data
      Access`.

   .. step:: Click :guilabel:`Connect`.

      When you connect your |oidc| |idp| to an organization, |service|
      enables |oidc| for all the projects within that organization.

Configure OIDC Authorization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

|service| clusters grant access to users authenticating with your |oidc|
|idp| by using the token issued by your |idp|. MongoDB expects that the
following claims exist in the access token:

.. list-table::
   :header-rows: 1
   :widths: 10 90
   :stub-columns: 1

   * - Claim
     - Description

   * - ``iss`` 
     - Identifies the token issuer, such as a registered OIDC or OAuth
       application.

   * - ``sub`` 
     - Identifier of the principal in your |idp|. This value appears in
       database access logs as the user identifier.
   
   * - ``aud`` 
     - Identifies the intended consumer of the token. This value should
       match the ``audience`` value set during the |oidc| |idp|
       configuration in |service|.
 
   * - ``iat`` 
     - Time at which your |idp| issued the token.
 
   * - ``exp`` 
     - Time at which the token expires. 
 
   * - ``groups`` 
     - Custom claim that includes user group membership information.
       |oidc| used this information for authorization.


After you :ref:`enable OIDC IdP for your Organization in Atlas
<apply-oidc-idp>`, give access to database users:

.. include:: /includes/steps/create-oidc-user.rst

Delete OIDC Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~

To delete your |oidc| configuration, you must:

.. procedure::
   :style: normal

   .. step:: Disconnect each organization you connected to your |oidc| |idp|.

      .. procedure::
         :style: connected

         .. step:: Open the Management Console.

            .. include:: /includes/steps/open-fed-auth-console.rst

         .. step:: Click :guilabel:`Organizations` in the left side navigation bar.

         .. step:: Click the organization that has |oidc| enabled.

         .. step:: Click :guilabel:`Disconnect` on the |oidc| card.

         .. step:: In the :guilabel:`Disconnect identity provider?` modal, click
            :guilabel:`Disconnect`.

            When you disconnect an |idp|, users who authenticate using the
            |idp| will lose access to |oidc| in the |service| projects
            listed in the :guilabel:`Project` table.

   .. step:: Click :guilabel:`Identity Providers` in the left side navigation
      bar.

   .. step:: In the |oidc| card, click :guilabel:`Delete`.

   .. step:: In the :guilabel:`Delete Identity Provider?` modal, click
      :guilabel:`Delete`.

Revoke JWKS
~~~~~~~~~~~

.. note::
   
   Don't use this feature to rotate your signing keys. When you rotate 
   your |oidc| |idp| signing keys, MongoDB fetches the JWKS automatically
   upon expiration of the existing access tokens.

If your private key is compromised, you can immediately revoke your JSON
Web Key Sets (JWKS) cached in MongoDB nodes:

.. procedure::
   :style: normal

   .. step:: Update your signing keys in your |oidc| identity provider.

   .. step:: Open the Management Console.

      .. include:: /includes/steps/open-fed-auth-console.rst

   .. step:: Click :guilabel:`Identity Providers` in the left side navigation bar.

   .. step:: Scroll to the |oidc| card.

   .. step:: Click the :guilabel:`Revoke` button.

      After you click :guilabel:`Revoke`, MongoDB fetches the new keys
      through your JWKS endpoint. You must restart your clients (such as
      MongoDB Shell or Compass) after revoking JWKS. 
