collection: "restaurants"
options:
  show_title: False
  show_collection: False
edition:
  - shell
  - python
  - node
  - cpp
ref: collection-example
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-top-level-fields
ref: update-top-level-fields
edition: shell
operation:
    language: javascript
    code: |
      db.restaurants.update(
          { "name" : "Juni" },
          {
            $set: { "cuisine": "American (New)" },
            $currentDate: { "lastModified": true }
          }
      )
post: |
  The update operation returns a :method:`WriteResult` object which
  contains the status of the operation.
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-embedded-field
ref: update-embedded-field
edition: shell
operation:
  language: javascript
  code: |
      db.restaurants.update(
        { "restaurant_id" : "41156888" },
        { $set: { "address.street": "East 31st Street" } }
      )
post: |
   The update operation returns a :method:`WriteResult` object which
   contains the status of the operation.
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-multiple-documents
ref: update-multiple-documents
edition: shell
operation:
    language: javascript
    code: |
      db.restaurants.update(
         { "address.zipcode": "10016" },
         {
           $set: { "borough": "Midtown" },
           $currentDate: { "lastModified": true }
         },
         { multi: true }
      )
post: |
  The update operation returns a :method:`WriteResult` object which
  contains the status of the operation.
replacement:
  updateMethod: :method:`~db.collection.update()`
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-top-level-fields
ref: update-top-level-fields
edition: python
operation:
    language: python
    code: |
      db.restaurants.update(
          { "name" : "Juni" },
          {
            "$set": {
              "cuisine": "American (New)"
            },
            "$currentDate": { "lastModified": True }
          }
      )

post: |
  The operation returns a ``dict`` object which contains the status of
  the operation. Successful operation should return ``u'ok': 1.0``. The
  ``u'n'`` field indicates the number of documents modified.
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-embedded-field
ref: update-embedded-field
edition: python
operation:
    language: javascript
    code: |
      db.restaurants.update(
        { "restaurant_id" : "41156888" },
        { "$set": { "address.street": "East 31st Street" } }
      )
post: |
  The operation returns a ``dict`` object which contains the status of
  the operation. Successful operation should return ``u'ok': 1.0``. The
  ``u'n'`` field indicates the number of documents modified.
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-multiple-documents
ref: update-multiple-documents
edition: python
operation:
  language: javascript
  code: |
      db.restaurants.update(
         { "address.zipcode": "10016" },
         {
           "$set": { "borough": "Midtown" },
           "$currentDate": { "lastModified": True }
         },
         multi=True
      )
post: |
  The {{updateMethod}}  returns a ``dict`` object which contains the status of
  the operation. Successful operation should return ``u'ok': 1.0``. The
  ``u'n'`` field indicates the number of documents modified.
replacement:
  updateMethod: :py:meth:`~pymongo.collection.Collection.update()`
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-top-level-fields
ref: update-top-level-fields
edition: node
operation:
  - pre: |
      Define an ``updateRestaurants`` function as follows:
    language: javascript
    code: |
      var updateRestaurants = function(db, callback) {
         db.collection('restaurants').updateOne(
            { "name" : "Juni" },
            {
              $set: { "cuisine": "American (New)" },
              $currentDate: { "lastModified": true }
            }, function(err, results) {
            console.log(results);
            callback();
         });
      };
  - pre: |
      Call the ``updateRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);

        updateRestaurants(db, function() {
            db.close();
        });
      });
post: |
   The {{updateMethod}} returns the number of documents updated. 
replacement:
  updateMethod: |
    `update() <http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#update>`_
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-embedded-field
ref: update-embedded-field
edition: node
operation:
  - pre: |
      Define an ``updateRestaurants`` function as follows:
    language: javascript
    code: |
      var updateRestaurants = function(db, callback) {
         db.collection('restaurants').updateOne(
            { "restaurant_id" : "41156888" },
            { $set: { "address.street": "East 31st Street" } },
            function(err, results) {
              console.log(results);
              callback();
         });
      };
  - pre: |
      Call the ``updateRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);

        updateRestaurants(db, function() {
            db.close();
        });
      });
post: |
   The {{updateMethod}} returns the number of documents updated. 
replacement:
  updateMethod: |
    `update() <http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#update>`_
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-multiple-documents
ref: update-multiple-documents
edition: node
operation:
  - pre: |
      Define an ``updateRestaurants`` function as follows:
    language: javascript
    code: |
      var updateRestaurants = function(db, callback) {
         db.collection('restaurants').updateMany(
            { "address.zipcode": "10016" },
            {
              $set: { "borough": "Midtown" },
              $currentDate: { "lastModified": true }
            },
            function(err, results) {
              console.log(results);
              callback();
         });
      };
  - pre: |
      Call the ``updateRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);

        updateRestaurants(db, function() {
            db.close();
        });
      });
post: |
   The {{updateMethod}} returns the number of documents updated. 
replacement:
  updateMethod: |
    `update() <http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#update>`_
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-top-level-fields
ref: update-top-level-fields
edition: cpp
operation:
  literalinclude: includes/example-cpp-update-top-level-fields.cpp
  language: cpp
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-embedded-field
ref: update-embedded-field
edition: cpp
operation:
  literalinclude: includes/example-cpp-update-embedded-field.cpp
  language: cpp
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-multiple-documents
ref: update-multiple-documents
edition: cpp
operation:
  literalinclude: includes/example-cpp-update-multiple-documents.cpp
  language: cpp
pre: |
  To update multiple documents, use the {{updateMethod}} method.

  The following operation updates *all* documents that have
  ``address.zipcode`` field equal to ``"10016"``, setting the ``borough``
  field to ``"Midtown"`` and the ``lastModified`` field to the current
  date.
replacement:
  updateMethod: "``update_many``"
...