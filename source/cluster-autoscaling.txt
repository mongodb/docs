.. _cluster-autoscaling:

======================
Configure Auto-Scaling
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/fact-auto-scaling-availability.rst

You can configure the {+cluster+} tier ranges that |service| uses to
automatically scale your {+cluster+} tier, storage capacity, or both in
response to {+cluster+} usage.

{+Cluster+} auto-scaling removes the need to write scripts or use
consulting services to make scaling decisions. To help control costs,
you can specify a range of maximum and minimum {+cluster+} sizes that
your {+cluster+} can automatically scale to.

Auto-scaling works on a rolling basis, meaning the process doesn't
incur any downtime.

.. _howitworks-scale-cluster-tier:

How |service| Scales {+Cluster+} Tier
-------------------------------------

|service| analyzes the following {+cluster+} metrics to determine when 
to scale a {+cluster+}, and whether to scale the {+cluster+} tier up or 
down:

- CPU utilization

- Memory utilization

|service| calculates memory utilization based on your available memory
and total memory as follows:

(``memoryTotal`` - (``memoryFree`` + ``memoryBuffers`` + ``memoryCached``)) / (``memoryTotal``) * 100

In the previous calculation, ``memoryFree``, ``memoryBuffers``, and ``memoryCached`` are
amounts of available memory that |service| can reclaim for other
purposes. To learn more, see :guilabel:`System Memory` in
:ref:`review-available-metrics`.

|service| won't scale your {+cluster+} tier if any of the following are true:

- New {+cluster+} tier would fall outside of your specified
  :guilabel:`Minimum` and :guilabel:`Maximum Cluster Size` range. 
- Memory utilization would exceed the available memory
  for the new {+cluster+} tier.

|service| scales your {+cluster+} to another tier in the same class.
For example, |service| scales :guilabel:`General` {+clusters+}
to other :guilabel:`General` {+cluster+} tiers, but doesn't scale 
:guilabel:`General` {+clusters+} to :guilabel:`Low-CPU` {+cluster+}
tiers.

The exact auto-scaling criteria are subject to change in order to ensure
appropriate cluster resource utilization.

.. include:: /includes/fact-auto-scaling-and-migration.rst

Scaling Up a {+Cluster+} Tier
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note:: Tier Availability

   Automatic scaling works on :guilabel:`General` and
   :guilabel:`Low-CPU` tier {+clusters+}, but *not* on
   :guilabel:`Local NVMe SSD` tier {+clusters+}.

If the next highest {+cluster+} tier is within your
:guilabel:`Maximum Cluster Size` range, |service| scales the {+cluster+}
up to the next tier if *one* of the following criteria is true for 
*any* node in the {+cluster+}:

- The :guilabel:`Average CPU Utilization` has exceeded 75% of available resources for the past hour. The 75% threshold is relative to the resources that the cluster tier has access to.

- The :guilabel:`Memory Utilization` has exceeded 75% of available resources for the past hour. The 75% threshold is relative to the resources that the cluster tier has access to.

|service| scales a {+cluster+} to the next tier when the {+cluster+} 
hasn't been scaled up in the past hour.

.. important:: Sudden Workload Spikes

   Scaling up to a greater {+cluster+} tier requires enough time to
   prepare backing resources. Automatic scaling may not occur when a
   {+cluster+} receives a burst of activity, such as a bulk insert.
   To reduce the risk of running out of resources, plan to scale up
   {+clusters+} before bulk inserts and other workload spikes.

Scaling Down a {+Cluster+} Tier
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the next lowest {+cluster+} tier is within your
:guilabel:`Minimum Cluster Size` range, |service| scales the {+cluster+}
down to the next lowest tier if *both* of the following criteria are 
true for *all* nodes in the {+cluster+}:

- The average :guilabel:`CPU Utilization` and
  :guilabel:`Memory Utilization` over the past 24 hours is below 50%. The 50% threshold is
  relative to the resources that the cluster tier has access to. 

- The {+cluster+} hasn't been scaled down (manually or automatically) in
  the past 24 hours.

.. note::

   ``M10`` and ``M20`` {+clusters+} use lower thresholds to account for
   caps on CPU usage that cloud providers set after burst periods. These
   thresholds vary depending on your cloud provider and cluster tier.

To learn more about downward auto-scaling behavior, see
:ref:`downward-scaling-considerations`.

.. _downward-scaling-considerations:

Considerations for Downward Auto-Scaling of Cluster Tier and Storage
````````````````````````````````````````````````````````````````````

- When |service| downscales the storage capacity of your {+cluster+}, 
  this can take longer than expanding storage capacity due to the 
  mechanics of the scaling process.
- When |service| downscales your {+cluster+} to a lower {+cluster+} 
  tier, it uses the value in the :guilabel:`Minimum Cluster Size`. 
  Estimate your deployment's range of workloads and then set the 
  :guilabel:`Minimum Cluster Size` value to the {+cluster+} tier that 
  has enough capacity to handle your deployment's workload. Account for 
  any possible spikes or dips in {+cluster+} activity.

- You can't scale to a {+cluster+} smaller than ``M10``.

- You can't select a minimum {+cluster+} tier that is below the current
  disk configuration of your {+cluster+}. If your storage increases
  beyond what is supported by your minimum {+cluster+} tier, |service|
  automatically adjusts your  minimum {+cluster+} tier to a tier that
  supports the current storage requirements of your {+cluster+}.

  .. example::

     You have set your auto-scaling bounds to ``M20``-``M60`` and your
     current {+cluster+} tier is ``M40``. |service| triggers a downward
     auto-scaling event because the average :guilabel:`CPU Utilization` 
     and :guilabel:`Memory Utilization` on your current {+cluster+} has 
     been under 50% for the past 24 hours.

     1. |service| attempts to auto-scale your {+cluster+} down to 
        ``M30``. ``M30`` supports your current disk configuration, so 
        the auto-scaling operation succeeds.

     #. |service| determines that ``M20`` is the lowest {+cluster+} tier
        that can support your current disk configuration, and sets
        your minimum {+cluster+} tier to ``M20``.

Scaling a Sharded {+Cluster+}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

|service| auto-scales the {+cluster+} tier for sharded {+clusters+} 
using the same criteria as replica sets. |service| applies the 
following rules:

- Auto-scaling applies to all shards in the sharded {+cluster+}. You 
  can't apply auto-scaling for some shards and not for others within 
  the same {+cluster+}.
- If *any* shard meets the criteria to auto-scale its {+cluster+} tier 
  up, all shards will scale their {+cluster+} tier up.
- *All* shards in the {+cluster+} must meet the criteria before
  |service| will auto-scale the {+cluster+} tier down.
- The Config server replica set doesn't auto-scale.

.. _howitworks-scale-cluster-storage:

How |service| Scales Cluster Storage
------------------------------------

|service| enables {+cluster+} storage auto-scaling by default. For
{+clusters+} with analytic nodes, if you select a different cluster
class, such as :guilabel:`General` or :guilabel:`Low-CPU`, for the 
:guilabel:`Base Tier` and the :guilabel:`Analytics Tier`, |service| disables 
disk auto-scaling with the following error message:

.. code-block::
   :copyable: false

   Disk auto-scaling is not yet available for clusters with mixed instance classes.

|service| automatically increases {+cluster+} storage when disk space used 
reaches 90% for *any* node in the {+cluster+}. 

.. important:: High-Speed Write Activity

   Scaling up to greater storage capacity requires sufficient time to
   prepare and copy data to new disks. Automatic scaling might not occur
   when a {+cluster+} receives a burst of high-speed write activity, 
   such as a bulk insert. To reduce the risk of running out of disk 
   storage, {+cluster+} managers should plan to scale up {+clusters+} 
   in advance of bulk inserts and other instances of high-speed write 
   activity.

The scaling behavior differs by cloud provider:

- On :ref:`AWS <amazon-aws>`, :ref:`Azure <microsoft-azure>`, and
  :ref:`GCP <google-gcp>` {+clusters+}, |service| increases {+cluster+}
  storage capacity to achieve 70% disk space used. To learn more, see 
  :ref:`change-storage-capacity-aws`, :ref:`change-storage-capacity-azure`,
  and :ref:`change-storage-capacity-gcp`.

.. important::

   |service| automatically scales {+cluster+} storage only up, and never
   automatically scales {+cluster+} storage down. You can manually 
   reduce your {+cluster+} storage from the :ref:`Edit Cluster 
   <scale-cluster>` page.

{+Cluster+} Tier and {+Cluster+} Storage Might Scale in Parallel
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When |service| attempts to automatically scale your {+cluster+} storage
capacity, it might need to scale your storage outside of the bounds
supported that your current {+cluster+} tier supports. To help ensure 
that your {+cluster+} doesn't experience any downtime, |service| will 
scale your {+cluster+} tier (in addition to {+cluster+} storage) to 
accommodate the new storage capacity.

On |azure|, if you enable autoscaling on a {+cluster+} deployed in one of
the :ref:`regions that support extended storage <microsoft-azure-supported-regions>`,
and the current |iops| is lower than the default |iops| for the autoscaled
disk size, |service| increases the alloted number of |iops| in the
:guilabel:`IOPS` slider and notifies you in the UI. To learn more, see
:ref:`change-storage-capacity-azure`.

.. example::

   The maximum storage capacity for an ``M30`` {+cluster+} is 480 GB. If
   you have an ``M30`` {+cluster+} with the maximum storage allocated 
   and your disk space used reaches 90%, a storage auto-scaling event 
   requires raising your storage capacity to 600 GB. In this case,
   |service| scales your {+cluster+} tier up to ``M40`` because this is
   the lowest {+cluster+} tier that can support the new required
   storage capacity. On |azure|, if you deployed the {+cluster+} in one of
   the :ref:`regions that support extended storage <microsoft-azure-supported-regions>`,
   |service| also automatically increases |iops| to match the |iops| level
   for that tier's {+cluster+}.

In the event that your specified maximum {+cluster+} tier can't support
the new storage capacity, |service|:

1. Raises your maximum {+cluster+} tier to the next lowest tier that can
   accommodate the new storage capacity.

#. Scales your {+cluster+} tier to that new maximum tier.

.. note::

   When |service| overrides your maximum {+cluster+} tier, it also
   disables your {+cluster+} from automatically scaling down. To re-enable
   downward auto-scaling, configure it in :ref:`Cluster Settings <scale-cluster>`.
   See also :ref:`downward-scaling-considerations`.

If |service| attempts to scale your {+cluster+} tier down and the target
tier can't support your current disk capacity, provisioned |iops|,
or both, |service| doesn't scale your {+cluster+} down. In this
scenario, |service| updates your auto-scaling settings based on the
relationship between your current {+cluster+} tier and the configured
maximum {+cluster+} tier:

- If the {+cluster+} is currently at the configured maximum {+cluster+}
  tier, |service| disables the {+cluster+} from automatically scaling
  down because all smaller tiers wouldn't be able to accommodate
  the necessary storage settings. If you want to re-enable downward
  auto-scaling, you must do so manually from your :ref:`Cluster
  Settings <scale-cluster>`.

- If the {+cluster+} isn't currently at the configured maximum
  {+cluster+} tier, |service| raises the minimum {+cluster+} tier to 
  the current {+cluster+} tier. In this case, |service| doesn't disable 
  downward auto-scaling.

This auto-scaling logic is designed to reduce the downtime incurred by
your storage settings not matching your workload.

When an auto-scaling event modifies your configured minimum or maximum
{+cluster+} tier, |service| sends an email to all project owners about
the new {+cluster+} tier and any modified minimum or maximum tier bounds.

Oplog Considerations
~~~~~~~~~~~~~~~~~~~~

Depending on whether you choose to use storage auto-scaling, |service| manages
the oplog entries based on either the minimum oplog retention window, or
the oplog size. To learn more, see :ref:`Oplog Size Behavior <oplog-size-behavior>`.
|service| enables storage auto-scaling by default.

Configure Auto-Scaling Options
------------------------------

You can configure auto-scaling options when you
:ref:`create <create-new-cluster>` or :ref:`modify <scale-cluster>` a
{+cluster+}. For new clusters, |service| automatically enables
{+cluster+} tier auto-scaling and storage auto-scaling. You can review 
and adjust the upper and lower {+cluster+} tiers that |service| should 
use when auto-scaling your {+cluster+}, or you can :ref:`opt out 
<opt-out-autoscaling>`.

|service| displays auto-scaling options in the :guilabel:`Auto-scale`
section of the {+cluster+} builder for :guilabel:`General` and
:guilabel:`Low-CPU` tier {+clusters+}.

.. _configure-cluster-autoscaling:

Auto-Scaling Enabled by Default
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you create a new {+cluster+}, |service| enables auto-scaling for
{+cluster+} tier and {+cluster+} storage. You don't need
to explicitly enable auto-scaling. If you prefer, you can
:ref:`opt out <opt-out-autoscaling>` for {+cluster+} tier and cluster
storage.

.. note::

   |service| enables cluster tier auto-scaling by default when you
   create {+clusters+} in the {+atlas-ui+}. If you
   :oas-atlas-op:`create clusters with the API </createOneCluster>`,
   |service| disables {+cluster+} tier auto-scaling by default.

With auto-scaling enabled, your {+cluster+} can automatically:

- Scale up to increase capability with a higher {+cluster+} tier.
- Decrease the current {+cluster+} tier to a lower {+cluster+} tier.

In the :guilabel:`Cluster tier` section of the :guilabel:`Auto-scale`
options, you can specify the :guilabel:`Maximum Cluster Size` and
:guilabel:`Minimum Cluster Size` values that your {+cluster+} can
automatically scale to. |service| sets these values as follows:

- The :guilabel:`Maximum Cluster Size` is set to one tier above your
  current {+cluster+} tier.

- The :guilabel:`Minimum Cluster Size` is set to the current {+cluster+}
  tier.

Review the {+Cluster+} Tier Auto-Scaling Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To review the enabled auto-scaling options for {+cluster+} tier and 
storage:

1. In the selected :guilabel:`Auto-Scale` checkbox, review
   the :guilabel:`Maximum Cluster Size` and
   :guilabel:`Minimum Cluster Size` values, and adjust them if needed.

#. Review the :guilabel:`Allow cluster to be scaled down` option 
   that is checked by default when you create a new {+cluster+}.

#. Review the options under the :guilabel:`Storage Scaling` checkbox
   that is checked by default.

.. _opt-out-autoscaling:

Opt Out of {+Cluster+} Tier and Storage Auto-Scaling
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To opt out of {+cluster+} auto-scaling (increasing the cluster tier), 
when :ref:`creating a new cluster <create-new-cluster>`, navigate to the
:guilabel:`Cluster Tier` menu, and un-check the
:guilabel:`Cluster Tier Scaling` checkbox in the :guilabel:`Auto-scale`
section.

To opt out of {+cluster+} auto-scaling (decreasing the cluster tier), 
when :ref:`creating a new cluster <create-new-cluster>`, navigate to
:guilabel:`Cluster Tier` menu, and un-check the
:guilabel:`Allow cluster to be scaled down` checkbox in the
:guilabel:`Auto-scale` section.

To opt out of cluster storage scaling, un-check the
:guilabel:`Storage Scaling` checkbox in the :guilabel:`Auto-scale`
section.

.. _ack-auto-scaling-events:

Acknowledge Auto-Scaling Events
-------------------------------

When an auto-scaling event occurs:

- |service| logs the event in the project :guilabel:`Activity Feed`. To
  learn more about the :guilabel:`Activity Feed`, see
  :ref:`project-activity-feed`.

- |service| sends an email to all project owners about the original
  {+cluster+} tier and the new {+cluster+} tier after auto-scaling has
  occurred.