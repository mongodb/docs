.. _built-in-roles:

==========================================
Built-In Roles in Self-Managed Deployments
==========================================

.. default-domain:: mongodb

.. meta:: 
   :description: Control access to local MongoDB and MongoDB Atlas deployments by using built-in roles and privileges.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

MongoDB grants access to data and commands through :ref:`role-based
authorization <roles>` and provides built-in roles that provide the different
levels of access commonly needed in a database system. You can additionally
create :ref:`user-defined roles <user-defined-roles>`.

A role grants privileges to perform sets of :ref:`actions
<security-user-actions>` on defined :ref:`resources <resource-document>`. A
given role applies to the database on which it is defined and can grant access
down to a collection level of granularity.

*System collections* include those in:

- ``<database>.system.*`` namespace
- ``local.replset.*`` replica set namespace

For details, see :ref:`metadata-system-collections`.

*Non-system collections* are those not in namespaces in the previous
list.

Each of MongoDB's built-in roles defines access at the database level for all
*non*-system collections in the role's database and at the collection level
for all system collections.

This section describes the privileges for each built-in role. You can also
view the privileges for a built-in role at any time by issuing the
:dbcommand:`rolesInfo` command with the ``showPrivileges`` and
``showBuiltinRoles`` fields both set to ``true``.

{+atlas+} deployments have different built-in roles than self-hosted
deployments. See the following resources to learn more:

- :ref:`atlas-built-in-roles`
- :ref:`self-hosted-built-in-roles`

.. _atlas-built-in-roles:

{+atlas+} Built-In Roles
-----------------------------

For the built-in database user roles for deployments hosted in
{+atlas+}, see :atlas:`Altas Built-In Roles and Privileges
</mongodb-users-roles-and-privileges/>`.

You can create database users and assign built-in roles in the {+atlas+}
user interface. To learn more, see :atlas:`Add Database Users
</security-add-mongodb-users/#add-database-users>`.

.. _self-hosted-built-in-roles:

Self-Hosted Deployment Built-In Roles
-------------------------------------

MongoDB provides the following built-in roles for self-hosted
deployments:

- :ref:`Database user <database-user-roles>` and 
  :ref:`database administration <database-administration-roles>` roles
  on *every* database
- All other roles only on the ``admin`` database

.. _database-user-roles:

Database User Roles
~~~~~~~~~~~~~~~~~~~

Every database includes the following client roles:

.. authrole:: read

   .. include:: /includes/extracts/built-in-roles-read.rst

   The role provides read access by granting the following :ref:`actions
   <security-user-actions>`:

   - :authaction:`changeStream`
   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`
   - :authaction:`listCollections`
   - :authaction:`listIndexes`
   - :authaction:`listSearchIndexes`
   
   .. include:: /includes/listDatabases-auth

.. authrole:: readWrite

   .. include:: /includes/extracts/built-in-roles-read-write.rst

   .. _manual-reference-role-read-write:

   The role provides the following actions on those collections:

   - :authaction:`changeStream`
   - :authaction:`collStats`
   - :authaction:`convertToCapped`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`createSearchIndexes`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`dropCollection`
   - :authaction:`dropIndex`
   - :authaction:`dropSearchIndex`
   - :authaction:`find`
   - :authaction:`insert`
   - :authaction:`killCursors`
   - :authaction:`listCollections`
   - :authaction:`listIndexes`
   - :authaction:`listSearchIndexes`
   - :authaction:`remove`
   - :authaction:`renameCollectionSameDB`
   - :authaction:`update`
   - :authaction:`updateSearchIndex`

.. _database-administration-roles:

Database Administration Roles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Every database includes the following database administration roles:

.. authrole:: dbAdmin

   .. include:: /includes/extracts/built-in-roles-dbAdmin.rst
   
   Specifically, the role provides the following privileges:

   .. list-table::
      :header-rows: 1
      :widths: 35 65
      
      * - Resource

        - Permitted Actions
      
      * - :data:`system.profile <<database>.system.profile>`
        - .. hlist::
             :columns: 2
             
             - :authaction:`changeStream`
             - :authaction:`collStats`
             - :authaction:`convertToCapped`
             - :authaction:`createCollection`
             - :authaction:`dbHash`
             - :authaction:`dbStats`
             - :authaction:`dropCollection`
             - :authaction:`find`
             - :authaction:`killCursors`
             - :authaction:`listCollections`
             - :authaction:`listIndexes`
             - :authaction:`listSearchIndexes`
             - :authaction:`planCacheRead`

      * - All *non*-system collections (i.e. :ref:`database resource <resource-specific-db>`)

        - .. hlist::
             :columns: 2

             - :authaction:`bypassDocumentValidation`
             - :authaction:`collMod`
             - :authaction:`collStats`
             - :authaction:`compact`
             - :authaction:`convertToCapped`
             - :authaction:`createCollection`
             - :authaction:`createIndex`
             - :authaction:`createSearchIndexes`
             - :authaction:`dbStats`
             - :authaction:`dropCollection`
             - :authaction:`dropDatabase`
             - :authaction:`dropIndex`
             - :authaction:`dropSearchIndex`
             - :authaction:`enableProfiler`
             - :authaction:`listCollections`
             - :authaction:`listIndexes`
             - :authaction:`listSearchIndexes`
             - :authaction:`planCacheIndexFilter`
             - :authaction:`planCacheRead`
             - :authaction:`planCacheWrite`
             - :authaction:`reIndex`
             - :authaction:`renameCollectionSameDB`
             - :authaction:`storageDetails`
             - :authaction:`updateSearchIndex`
             - :authaction:`validate`

          For these collections, :authrole:`dbAdmin` *does not* include
          full read access (i.e. :authaction:`find`).

.. authrole:: dbOwner

   .. include:: /includes/extracts/built-in-roles-dbOwner.rst

.. authrole:: userAdmin

   .. include:: /includes/extracts/built-in-roles-userAdmin.rst

   The :authrole:`userAdmin` role explicitly provides the following actions:

   - :authaction:`changeCustomData`
   - :authaction:`changePassword`
   - :authaction:`createRole`
   - :authaction:`createUser`
   - :authaction:`dropRole`
   - :authaction:`dropUser`
   - :authaction:`grantRole`
   - :authaction:`revokeRole`
   - :authaction:`setAuthenticationRestriction`
   - :authaction:`viewRole`
   - :authaction:`viewUser`

 Â  .. warning::

      It is important to understand the security implications of granting the
      :authrole:`userAdmin` role: a user with this role for a database can
      assign themselves any privilege on that database. Granting the
      :authrole:`userAdmin` role on the ``admin`` database has further
      security implications as this indirectly provides
      :ref:`superuser <superuser>` access to a cluster. With ``admin``
      scope a user with the :authrole:`userAdmin` role can grant cluster-wide
      roles or privileges including :authrole:`userAdminAnyDatabase`.

.. _cluster-admin-roles:
.. _admin-roles:

Cluster Administration Roles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/built-in-roles-cluster-admin-roles.rst

.. authrole:: clusterAdmin

   .. include:: /includes/extracts/built-in-roles-clusterAdmin.rst

.. authrole:: clusterManager

   .. include:: /includes/extracts/built-in-roles-clusterManager.rst

   .. list-table::
      :header-rows: 1
      :widths: 30 70

      * - Resource
        - Actions
   
      * - :ref:`cluster <resource-cluster>`
  
        - .. hlist::
             :columns: 2
             
             - :authaction:`addShard`
             - :authaction:`appendOplogNote`
             - :authaction:`applicationMessage`
             - :authaction:`checkMetadataConsistency` (New in version 7.0)
             - :authaction:`cleanupOrphaned`
             - :authaction:`flushRouterConfig`
             - :dbcommand:`getClusterParameter`
             - :authaction:`getDefaultRWConcern`
             - :authaction:`listSessions`
             - :authaction:`listShards`
             - :authaction:`removeShard`
             - :authaction:`replSetConfigure`
             - :authaction:`replSetGetConfig`
             - :authaction:`replSetGetStatus`
             - :authaction:`replSetStateChange`
             - :authaction:`resync`
             - :dbcommand:`setClusterParameter`
             - :authaction:`setDefaultRWConcern` 
             - :authaction:`setFeatureCompatibilityVersion`
             - :authaction:`transitionFromDedicatedConfigServer` 
             - :authaction:`transitionToDedicatedConfigServer`

      * - *All* :ref:`databases <resource-specific-db>`

        - .. hlist::
             :columns: 1
             
             - :dbcommand:`analyzeShardKey` (New in version 7.0)
             - :authaction:`clearJumboFlag`
             - :dbcommand:`configureQueryAnalyzer`
             - :authaction:`enableSharding`
             - :authaction:`moveChunk`
             - :authaction:`refineCollectionShardKey`
             - :authaction:`reshardCollection`
             
          :authrole:`clusterManager` provides additional privileges for the
          ``config`` and ``local`` databases.

   On the ``config`` database, permits the following actions:

   .. list-table::
      :header-rows: 1
      :widths: 40 60

      * - Resource
        - Actions

      * - All non-system collections in the ``config`` database

        - .. hlist::
             :columns: 2
      
             - :authaction:`collStats`
             - :authaction:`dbHash`
             - :authaction:`dbStats`
             - :authaction:`enableSharding`
             - :authaction:`find`
             - :authaction:`insert`
             - :authaction:`killCursors`
             - :authaction:`listCollections`
             - :authaction:`listIndexes`
             - :authaction:`listSearchIndexes`
             - :authaction:`moveChunk`
             - :authaction:`planCacheRead`
             - :authaction:`remove`
             - :authaction:`update`

      * - :data:`system.js <<database>.system.js>`

        - .. hlist::
             :columns: 2

             - :authaction:`collStats`
             - :authaction:`dbHash`
             - :authaction:`dbStats`
             - :authaction:`find`
             - :authaction:`killCursors`
             - :authaction:`listCollections`
             - :authaction:`listIndexes`
             - :authaction:`listSearchIndexes`
             - :authaction:`planCacheRead`

   On the ``local`` database, permits the following actions:

   .. list-table::
      :header-rows: 1
      :widths: 40 60

      * - Resource
        - Actions

      * - All non-system collections in the ``local`` database

        - .. hlist::
             :columns: 2
          
             - :authaction:`enableSharding`
             - :authaction:`insert`
             - :authaction:`moveChunk`
             - :authaction:`remove`
             - :authaction:`update`

      * - :data:`system.replset <local.system.replset>` collection
        - .. hlist::
             :columns: 2
   
             - :authaction:`collStats`
             - :authaction:`dbHash`
             - :authaction:`dbStats`
             - :authaction:`find`
             - :authaction:`killCursors`
             - :authaction:`listCollections`
             - :authaction:`listIndexes`
             - :authaction:`listSearchIndexes`
             - :authaction:`planCacheRead`
   

.. authrole:: clusterMonitor

   .. include:: /includes/extracts/built-in-roles-clusterMonitor.rst

   Permits the following actions on the cluster as a whole:

   .. hlist::
      :columns: 2

      - :authaction:`connPoolStats`
      - :authaction:`getCmdLineOpts`
      - :authaction:`getDefaultRWConcern`
      - :authaction:`getLog`
      - :authaction:`getParameter`
      - :authaction:`getShardMap`
      - :authaction:`hostInfo`
      - :authaction:`inprog`
      - :authaction:`listDatabases`
      - :authaction:`listSessions`
      - :authaction:`listShards`
      - :authaction:`replSetGetConfig`
      - :authaction:`replSetGetStatus`
      - :authaction:`serverStatus`
      - :authaction:`shardingState`
      - :authaction:`top`

   Permits the following actions on *all* databases in the cluster:

   - :authaction:`collStats`
   - :authaction:`dbStats`
   - :authaction:`indexStats`
   - :authaction:`useUUID`

   Permits the :authaction:`find` action on all :data:`system.profile
   <<database>.system.profile>` collections in the cluster.

   On the ``config`` database, permits the following actions:

   .. list-table::
      :header-rows: 1
      :widths: 40 60

      * - Resource
        - Actions

      * - All non-system collections in the ``config`` database
        - | :authaction:`collStats`
          | :authaction:`dbHash`
          | :authaction:`dbStats`
          | :authaction:`find`
          | :authaction:`indexStats`
          | :authaction:`killCursors`
          | :authaction:`listCollections`
          | :authaction:`listIndexes`
          | :authaction:`listSearchIndexes`
          | :authaction:`planCacheRead`

      * - :data:`system.js <<database>.system.js>` collection
          

        - | :authaction:`collStats`
          | :authaction:`dbHash`
          | :authaction:`dbStats`
          | :authaction:`find`
          | :authaction:`killCursors`
          | :authaction:`listCollections`
          | :authaction:`listIndexes`
          | :authaction:`planCacheRead`

   On the ``local`` database, permits the following actions:

   .. list-table::
      :header-rows: 1

      * - Resource
        - Actions

      * - All non-system collections in the ``local`` database
        - | :authaction:`collStats`
          | :authaction:`dbHash`
          | :authaction:`dbStats`
          | :authaction:`find`
          | :authaction:`indexStats`
          | :authaction:`killCursors`
          | :authaction:`listCollections`
          | :authaction:`listIndexes`
          | :authaction:`listSearchIndexes`
          | :authaction:`planCacheRead`

      * - | :data:`system.js <<database>.system.js>` collection

        - | :authaction:`collStats`
          | :authaction:`dbHash`
          | :authaction:`dbStats`
          | :authaction:`find`
          | :authaction:`killCursors`
          | :authaction:`listCollections`
          | :authaction:`listIndexes`
          | :authaction:`listSearchIndexes`
          | :authaction:`planCacheRead`

      * - | :data:`system.replset <local.system.replset>`,
          | :data:`system.profile <<database>.system.profile>`,

        - :authaction:`find`

.. authrole:: directShardOperations

   .. include:: /includes/dSO-role-intro.rst

   .. include:: /includes/dSO-warning.rst

.. authrole:: enableSharding

   Provides the ability to enable sharding for a collection and modify
   existing shard keys.

   Provides the following actions on all non-system collections:

   - :authaction:`enableSharding`
   - :authaction:`refineCollectionShardKey` 
   - :authaction:`reshardCollection`

.. authrole:: hostManager

   .. include:: /includes/extracts/built-in-roles-hostMonitor.rst

   On the cluster as a whole, provides the following actions:

   .. hlist::
      :columns: 3

      - :authaction:`applicationMessage`
      - :authaction:`closeAllDatabases`
      - :authaction:`compact` (New in version 7.3)
      - :authaction:`connPoolSync`
      - :authaction:`flushRouterConfig`
      - :authaction:`fsync`
      - :authaction:`invalidateUserCache`
      - :authaction:`killAnyCursor`
      - :authaction:`killAnySession`
      - :authaction:`killop`
      - :authaction:`logRotate`
      - :authaction:`oidReset`
      - :authaction:`resync`
      - :authaction:`rotateCertificates` (New in version 5.0)
      - :authaction:`setParameter`
      - :authaction:`shutdown`
      - :authaction:`touch`
      - :authaction:`unlock`

   On *all* databases in the cluster, provides the following actions:

   - :authaction:`killCursors`

.. _backup-and-restore-roles:

Backup and Restoration Roles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/built-in-roles-backup-roles.rst

.. authrole:: backup

   .. include:: /includes/extracts/built-in-roles-backup.rst

   .. todo: should we document the mms.backup collection in the
            system-collections document?

   Provides the :authaction:`insert` and :authaction:`update` actions
   on the :data:`settings <config.settings>` collection in the
   ``config`` database.

   On :ref:`anyResource`, provides the

   - :authaction:`listDatabases` action
   - :authaction:`listCollections` action
   - :authaction:`listIndexes` action
   - :authaction:`listSearchIndexes` action

   On the :ref:`cluster <resource-cluster>` as a whole, provides the

   - :authaction:`appendOplogNote`
   - :authaction:`getParameter`
   - :authaction:`listDatabases`
   - :authaction:`serverStatus` 
   - :authaction:`setUserWriteBlockMode` (Starting in MongoDB 6.0)

   Provides the :authaction:`find` action on the following:

   - all *non*-system collections in the cluster, including those in
     the ``config`` and ``local`` databases

   - The following system collections in the cluster:

     :data:`system.js <<database>.system.js>`, and
     :data:`system.profile <<database>.system.profile>`

   - The :data:`admin.system.users` and :data:`admin.system.roles` collections

   - The :data:`config.settings` collection

   - Legacy ``system.users`` collections from versions of MongoDB prior to 2.6

   .. todo: Also provides the :authaction:`find` action on:
             - system.new_users
             - system.backup_users
             - system.version
            Do we want to document these?

   Provides the :authaction:`insert` and :authaction:`update` actions
   on the :data:`config.settings` collection.

   .. include:: /includes/fact-required-access-for-backup-profiling.rst

.. authrole:: restore

   .. include:: /includes/extracts/built-in-roles-restore.rst

   .. include:: /includes/access-mongorestore-collections.rst

   Provides the following action on the cluster as a whole:

   - :authaction:`getParameter`

   Provides the following actions on all *non*-system collections:

   - :authaction:`bypassDocumentValidation`
   - :authaction:`changeCustomData`
   - :authaction:`changePassword`
   - :authaction:`collMod`
   - :authaction:`convertToCapped`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`createRole`
   - :authaction:`createSearchIndexes`
   - :authaction:`createUser`
   - :authaction:`dropCollection`
   - :authaction:`dropRole`
   - :authaction:`dropUser`
   - :authaction:`grantRole`
   - :authaction:`insert`
   - :authaction:`revokeRole`
   - :authaction:`updateSearchIndex`
   - :authaction:`viewRole`
   - :authaction:`viewUser`

   Provides the following actions on :data:`system.js <<database>.system.js>` collection:

   - :authaction:`bypassDocumentValidation`
   - :authaction:`collMod`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dropCollection`
   - :authaction:`insert`
   - :authaction:`updateSearchIndex`

   Provides the following action on :ref:`anyResource`:

   - :authaction:`listCollections`


   Provides the following actions on all non-system collections on the
   ``config`` and the ``local`` databases:

   - :authaction:`bypassDocumentValidation`
   - :authaction:`collMod`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dropCollection`
   - :authaction:`insert`
   - :authaction:`updateSearchIndex`

   Provides the following actions on :data:`admin.system.version`

   - :authaction:`bypassDocumentValidation`
   - :authaction:`collMod`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dropCollection`
   - :authaction:`find`
   - :authaction:`insert`
   - :authaction:`updateSearchIndex`

   Provides the following action on :data:`admin.system.roles`

   - :authaction:`createIndex`

   Provides the following actions on :data:`admin.system.users`
   and legacy ``system.users`` collections:

   - :authaction:`bypassDocumentValidation`
   - :authaction:`collMod`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dropCollection`
   - :authaction:`find`
   - :authaction:`insert`
   - :authaction:`remove`
   - :authaction:`update`
   - :authaction:`updateSearchIndex`

   Although, :authrole:`restore` includes the ability to modify the
   documents in the :data:`admin.system.users` collection using normal
   modification operations, *only* modify these data using the
   :ref:`user management methods <user-management-methods>`.

   Provides the following action on the :data:`<database>.system.views`
   collection:

   - :authaction:`dropCollection` (Starting in MongoDB 7.2)

   On the :ref:`cluster <resource-cluster>` as a whole, provides the
   following actions:

   * :authaction:`bypassWriteBlockingMode` (Staring in MongoDB 6.0)
   * :authaction:`setUserWriteBlockMode` (Starting in MongoDB 6.0)

.. include:: /includes/replacement-mms.rst

.. _auth-any-database-roles:

All-Database Roles
~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/built-in-roles-all-database-roles.rst

.. authrole:: readAnyDatabase

   .. include:: /includes/extracts/built-in-roles-readAnyDatabase.rst

   .. include:: /includes/seealso-cluster-manager.rst

.. authrole:: readWriteAnyDatabase

   .. include:: /includes/extracts/built-in-roles-readWriteAnyDatabase.rst

   .. include:: /includes/seealso-cluster-manager.rst

.. authrole:: userAdminAnyDatabase

   .. include:: /includes/extracts/built-in-roles-userAdminAnyDatabase.rst

   :authrole:`userAdminAnyDatabase` also provides the
   following privilege actions on the cluster:

   - :authaction:`authSchemaUpgrade`
   - :authaction:`invalidateUserCache`
   - :authaction:`listDatabases`

   The role provides the following privilege actions on the
   :data:`system.users <admin.system.users>` and
   :data:`system.roles <admin.system.roles>` collections on the
   ``admin`` database, and on legacy ``system.users`` collections from
   versions of MongoDB prior to 2.6:

   - :authaction:`collStats`
   - :authaction:`createIndex`
   - :authaction:`createSearchIndexes`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`dropIndex`
   - :authaction:`dropSearchIndex`
   - :authaction:`find`
   - :authaction:`killCursors`
   - :authaction:`planCacheRead`

   The :authrole:`userAdminAnyDatabase` role does not restrict the privileges
   that a user can grant. As a result, :authrole:`userAdminAnyDatabase` users
   can grant themselves privileges in excess of their current
   privileges and even can grant themselves *all privileges*, even though the
   role does not explicitly authorize privileges beyond user administration.
   This role is effectively a MongoDB system :ref:`superuser <superuser>`.

   .. include:: /includes/seealso-cluster-manager.rst

.. authrole:: dbAdminAnyDatabase

   .. include:: /includes/extracts/built-in-roles-dbAdminAnyDatabase.rst

   .. include:: /includes/seealso-cluster-manager.rst

   Starting in MongoDB 5.0, :authrole:`dbAdminAnyDatabase` includes the 
   :ref:`applyOps<internal-actions>` privilege action.

.. _superuser:

Superuser Roles
~~~~~~~~~~~~~~~

Several roles provide either indirect or direct system-wide superuser access.

The following roles provide the ability to assign any user any privilege on
any database, which means that users with one of these roles can assign
*themselves* any privilege on any database:

- :authrole:`dbOwner` role, when scoped to the ``admin`` database

- :authrole:`userAdmin` role, when scoped to the ``admin`` database

- :authrole:`userAdminAnyDatabase` role

The following role provides full privileges on all resources:

.. authrole:: root

   .. include:: /includes/extracts/built-in-roles-root.rst

   .. versionchanged:: 6.0

      The :authrole:`root` role includes :authaction:`find` and
      :authaction:`remove` privileges on the ``system.preimages``
      collection in the ``config`` database.

Internal Role
~~~~~~~~~~~~~

.. authrole:: __system

   MongoDB assigns this role to user objects that represent cluster members,
   such as replica set members and :binary:`~bin.mongos` instances. The role
   entitles its holder to take any action against any object in the database.

   **Do not** assign this role to user objects representing applications or
   human administrators, other than in exceptional circumstances.

   If you need access to all actions on all resources, for example to
   run :dbcommand:`applyOps` commands, do not assign this role.
   Instead, :ref:`create a user-defined role <create-user-defined-role>` that
   grants :authaction:`anyAction` on :ref:`resource-anyresource` and
   ensure that only the users who need access to these operations have
   this access.
