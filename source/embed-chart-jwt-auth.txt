.. _jwt-sdk-tutorial:

========================================================
Embed an Authenticated Chart using a Custom JWT Provider
========================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Many websites use authentication systems that generate |jwt|\s to 
represent a signed-in user. If your website produces |jwt|\s, you can 
configure |charts-short| to validate the existing tokens to authorize 
the rendering of embedded charts. Alternatively, if your site does not 
already use |jwt|\s as a part of the authentication process, you can 
write code to generate |jwt|\s explicitly for the purpose of authorizing
chart renders. 

This tutorial shows the latter approach. The example shows you how to 
generate a simple |jwt| for a logged in user and send it to 
|charts-short|.

|charts-short| uses the details you provided when you configure a 
provider to validate |jwt|\s it receives with requests to render 
embedded charts. If the token is invalid or does not conform to the 
details you provided, |charts-short| doesn't render the authenticated 
chart view.

Prerequisites
-------------

- You must be an |service|
  :atlas:`Project Owner </reference/user-roles/#project-roles>` to
  configure embedding authentication providers for your linked 
  |charts-short| instance.
- :ref:`add-data-source`
- :ref:`create-new-dashboard`
- :ref:`create-new-chart`

Procedures
----------

Enable Authenticated Embedding for a Chart
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/enable-embedding-intro.rst

.. include:: /includes/steps/embed-chart-authenticated.rst

Configure |charts-short| to use your Custom JWT Provider
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   When you configure authentication using a custom JWT provider, you can choose
   the signing algorithm. This tutorial uses the HS256 signing algorithm. If you select
   the RS256 signing algorithm, you can also choose one of the following signing keys:

   - JSON web key (`JWK <https://datatracker.ietf.org/doc/html/rfc7517>`__) or
     JSON web key set (JWKS) URL: |charts-short| retrieves the key from the JWK
     or JWKS file at the specified URL. |charts-short| then uses
     the key to validate the JSON web token. If there are multiple keys in the
     file, |charts-short| tries each key until it finds a match.
   - PEM public key: |charts-short| uses the specified public key to verify the
     JSON web token.

.. include:: /includes/steps/add-auth-jwt-tutorial.rst

Create a Web App to Display your Chart
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you already have an app in which to display your chart, youâ€™re all 
set. If not, proceed with the remaining steps.

MongoDB offers a pre-built sample that shows you how to use the 
Embedding SDK to authenticate an embedded chart using a |jwt|.

Clone the :github:`GitHub repository 
</mongodb-js/charts-embed-sdk/tree/master/examples/charts/authenticated-custom-jwt>`
and follow the instructions in the **Readme** file to begin using the 
app. You can customize it to use the chart you created earlier.

Customize the Node.js App
~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/steps/embed-chart-sdk-jwt.rst
