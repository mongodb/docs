===============================================
Migrate Config Servers with Different Hostnames
===============================================

.. default-domain:: mongodb

Overview
--------

Sharded clusters use a group of three config servers to store cluster
meta data, and all three config servers must be available to support
cluster metadata changes that include chunk splits and migrations. If
one of the config servers is unavailable or inoperable you must
replace it as soon as possible.

This procedure migrates a :ref:`config server <sharding-config-server>`
in a :doc:`sharded cluster </core/sharding>`
to a new server that uses a different hostname. Use this procedure only
if the config server *will not* be accessible via the same
hostname. If possible, avoid changing the hostname so that you can
instead use the procedure to :doc:`migrate a config server and use the
same hostname </tutorial/migrate-config-servers-with-same-hostname>`.

Considerations
--------------

Changing a :ref:`config server's <sharding-config-server>` hostname
**requires downtime** and requires restarting every process in the
sharded cluster.

While migrating config servers always make sure that
all :program:`mongos` instances have three config servers specified in
the :setting:`~sharding.configDB` setting at all times. Also ensure that
you specify the config servers in the same order for each
:program:`mongos` instance's :setting:`~sharding.configDB` setting.

Procedure
---------

1. Disable the cluster balancer process temporarily. See
   :ref:`sharding-balancing-disable-temporarily` for more information.

#. Shut down the config server.

   This renders all config data for the sharded cluster "read only."

#. Copy the contents of :setting:`~storage.dbPath` from the old config server to
   the new config server.

   .. example::

      To copy the contents of :setting:`~storage.dbPath` to a machine
      named ``mongodb.config2.example.net``,  use a command that
      resembles the following:

      .. code-block:: sh

         rsync -az /data/configdb mongodb.config2.example.net:/data/configdb

#. Start the config server instance on the new system. The default
   invocation is:

   .. code-block:: sh

      mongod --configsvr

#. Shut down all existing MongoDB processes. This includes:

   - the :program:`mongod` instances or :term:`replica sets <replica set>`
     that provide your shards.

   - the :program:`mongod` instances that provide your existing
     :ref:`config databases <config-database>`.

   - the :program:`mongos` instances.

#. Restart all :program:`mongod` processes that provide the shard
   servers.

#. Update the :setting:`~sharding.configDB` setting for each :program:`mongos`
   instances.

#. Restart the :program:`mongos` instances.

#. Re-enable the balancer to allow the cluster to resume normal
   balancing operations. See the
   :ref:`sharding-balancing-disable-temporarily` section for more
   information on managing the balancer process.
