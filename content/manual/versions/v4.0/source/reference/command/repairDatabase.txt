==============
repairDatabase
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: repairDatabase

   Rebuilds the database and indexes by discarding invalid or corrupt
   data that may be present due to an unexpected system restart or
   shutdown. :dbcommand:`repairDatabase` is analogous to a ``fsck``
   command for file systems.

   .. warning::

      - Before using :dbcommand:`repairDatabase`, make a backup copy of
        the files in the dbpath directory.

      - If you are running with :term:`journaling <journal>` enabled,
        there is almost never any need to run
        :dbcommand:`repairDatabase` after an unclean shutdown since the
        server can use the journal files to restore the data files to a
        clean state automatically. However, you may need to run
        :dbcommand:`repairDatabase` in cases where you need to recover
        from a disk-level data corruption.

      - Avoid running :dbcommand:`repairDatabase` against a replica set.
        If you are trying to repair a :term:`replica set` member, and you
        have access to an intact copy of your data (e.g. a recent backup
        or an intact member of the :term:`replica set`), you should
        restore from that intact copy (see
        :doc:`/tutorial/resync-replica-set-member`), and **not** use
        :dbcommand:`repairDatabase`.

      - You should only use the :dbcommand:`repairDatabase` command
        (and related :method:`db.repairDatabase()` method and the
        :option:`--repair <mongod --repair>` command-line option) if
        you have no other options. These operations remove and do not
        save any corrupt data during the repair process.

   :dbcommand:`repairDatabase` takes the following form:

   .. code-block:: javascript

      { repairDatabase: 1 }

   :dbcommand:`repairDatabase` has the following fields:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``preserveClonedFilesOnFailure``
   
        - boolean
   
        - When ``true``, ``repairDatabase`` will not delete temporary files
          in the backup directory on error, and all new files are created
          with the "backup" instead of "_tmp" directory prefix. By default
          ``repairDatabase`` does not delete temporary files, and uses the
          "_tmp" naming prefix for new files.
          
          .. versionchanged:: 3.0
             ``preserveClonedFilesOnFailure`` is only available with the
             ``mmapv1`` storage engine.
          
          
   
      * - ``backupOriginalFiles``
   
        - boolean
   
        - When ``true``, ``repairDatabase`` moves old database files to the
          backup directory instead of deleting them before moving new files
          into place. New files are created with the "backup" instead of "_tmp"
          directory prefix. By default, ``repairDatabase`` leaves temporary
          files unchanged, and uses the "_tmp" naming prefix for new files.
          
          .. versionchanged:: 3.0
             ``backupOriginalFiles`` is only available with the
             ``mmapv1`` storage engine.
          
          
   


   You can explicitly set the MMAPv1 options as follows:

   .. code-block:: javascript

      { repairDatabase: 1,
        preserveClonedFilesOnFailure: <boolean>,
        backupOriginalFiles: <boolean> }

.. _repairdb-helpers:

``repairDatabase`` Operations
------------------------------

In addition to the :dbcommand:`repairDatabase` command, the
:binary:`~bin.mongo` shell provides :method:`db.repairDatabase()` as a
wrapper around the :dbcommand:`repairDatabase` command. For more
information on the method, see :method:`db.repairDatabase()`.

MongoDB also provides the option to run :option:`mongod --repair`
directly from the command line to repair all databases for the
:binary:`~bin.mongod`. Starting in MongoDB 4.0.3, :option:`mongod
--repair` performs a more extensive repair operation than the
:dbcommand:`repairDatabase` command. For more information on running
:option:`mongod --repair`, see :option:`--repair <mongod --repair>`.

Behavior
--------

.. include:: /includes/warning-blocking-global.rst

The time requirement for :dbcommand:`repairDatabase` depends on the
size of the data set.

:dbcommand:`repairDatabase` recreates all indexes in the database.

MMAPv1
~~~~~~

:dbcommand:`repairDatabase` requires free disk space equal to the size of your
current data set plus 2 gigabytes.
If the volume that holds dbpath lacks sufficient space, you can mount a separate volume
and use that for the repair. When mounting a separate volume for
:dbcommand:`repairDatabase` you must run :dbcommand:`repairDatabase`
from the command line and use the
:option:`--repairpath <mongod --repairpath>`
switch to specify the folder in which to store
temporary repair files. For example:

.. code-block:: sh

   mongod --repair --repairpath /opt/vol2/data

See :option:`--repairpath <mongod --repairpath>` for more information.

WiredTiger
~~~~~~~~~~

:dbcommand:`repairDatabase` performs the operation in-place and does not require
additional disk space.


``repairDatabase`` and ``compact``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :dbcommand:`repairDatabase` command rebuilds the database, which
for MMAPv1, has a secondary effect of compacting all the collections.

For WiredTiger, the operation rebuilds the database but does **not**
result in the compaction of the collections in the database.

.. seealso::
   :dbcommand:`compact`

Example
-------

.. warning::

   If you are trying to repair a :term:`replica set` member, and you
   have access to an intact copy of your data (e.g. a recent backup or
   an intact member of the :term:`replica set`), see
   :doc:`/tutorial/resync-replica-set-member` instead.

   .. include:: /includes/note-repair.rst

   Use :dbcommand:`repairDatabase` if you have no other option.

   Before using :dbcommand:`repairDatabase`, make a backup copy of the
   data files in the dbpath.

.. code-block:: javascript

   db.runCommand( { repairDatabase: 1 } )
