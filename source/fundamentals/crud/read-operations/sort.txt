.. _rust-sort-guide:

============
Sort Results
============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, read operation, sort, sort results

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-long+} to perform **sort**
operations to specify the order of your read operation results.

Use the ``sort()`` method when building options to change the order in which
read operations return documents. The ``sort()`` method tells MongoDB to order
returned documents by the values of one or more fields in a certain direction.
To sort returned documents by a field in ascending (lowest first) order, use a
value of ``1``. To sort in descending (greatest first) order instead, use
``-1``. If you do not specify a sort, MongoDB does not guarantee the order of
query results.

Sample Data for Examples
------------------------

The examples in this guide use the following ``Book`` struct as a model for
documents in the ``books`` collection:

.. literalinclude:: /includes/fundamentals/code-snippets/crud/sort.rs
   :start-after: start-book-struct
   :end-before: end-book-struct
   :language: rust
   :dedent:

The following code shows how to insert sample data into the ``books``
collection:

.. literalinclude:: /includes/fundamentals/code-snippets/crud/sort.rs
   :start-after: start-sample-data
   :end-before: end-sample-data
   :language: rust
   :dedent:

Methods for Sorting
-------------------

You can sort results retrieved by a query, or you can sort results within an
aggregation pipeline.

Chain the ``sort()`` method to the ``find()`` method to sort results retrieved
by the query, as shown in the following example:

.. literalinclude:: /includes/fundamentals/code-snippets/crud/sort.rs
   :start-after: start-sort-query
   :end-before: end-sort-query
   :language: rust
   :dedent:

Options
~~~~~~~

Alternatively, you can use the ``sort()`` method of the ``FindOptions``
struct.

The following example performs a ``find()`` operation with the following behavior:

- Sorts the results in ascending order of the values of the ``author`` field
- Skips the first document
- Returns the remaining documents

.. literalinclude:: /includes/fundamentals/code-snippets/crud/sort.rs
   :start-after: start-sort-query-multiple-options
   :end-before: end-sort-query-multiple-options
   :language: rust
   :dedent:

Aggregation
~~~~~~~~~~~

To sort your results within an aggregation pipeline, create a ``$sort`` stage
and pass the list of stages to the ``aggregate()`` method.

The following example shows how to create a ``$sort`` stage that sorts documents
in ascending order by the values of the ``author`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/crud/sort.rs
   :start-after: start-sort-aggregation
   :end-before: end-sort-aggregation
   :language: rust
   :dedent:

Sorting Direction
-----------------

The direction of your sort can either be **ascending** or **descending**. An
ascending sort orders your results from smallest to largest. A descending sort
orders your results from largest to smallest.

The following list contains examples of data sorted in ascending order:

* Numbers: 1, 2, 3, 43, 43, 55, 120
* Dates: 1990-03-10, 1995-01-01, 2005-10-30, 2005-12-21 
* Words (ASCII): Banana, Dill, carrot, cucumber, hummus

The following list contains examples of data sorted in descending order:

* Numbers: 100, 30, 12, 12, 9, 3, 1
* Dates: 2020-01-01, 1998-12-11, 1998-12-10, 1975-07-22 
* Words (reverse ASCII): pear, grapes, apple, Cheese

The following subsections show how to specify these sort criteria.

Ascending
~~~~~~~~~

To specify an ascending sort, pass the field you want to sort by and ``1`` to
the ``sort()`` method.

Example
^^^^^^^

The following example specifies an ascending sort on the ``name`` field:

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-snippets/crud/sort.rs
      :start-after: start-ascending-sort
      :end-before: end-ascending-sort
      :language: rust
      :dedent:

   .. output::
      :language: console
      :visible: false

      Book { "_id": 4, "name": "A Dance with Dragons", "author": Martin, "length": 1104 }
      Book { "_id": 2, "name": "Atlas Shrugged", "author": Rand, "length": 1088 }
      Book { "_id": 3, "name": "Les Miserables", "author": Hugo, "length": 1462 }
      Book { "_id": 1, "name": "The Brothers Karamazov", "author": Dostoevsky, "length": 824 }
  
Descending
~~~~~~~~~~

To specify a descending sort, pass the field you want to sort by and ``-1`` to
the ``sort()`` method.

Example
^^^^^^^

The following example specifies a descending sort on the ``name`` field:

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-snippets/crud/sort.rs
      :start-after: start-descending-sort
      :end-before: end-descending-sort
      :language: rust
      :dedent:

   .. output::
      :language: console
      :visible: false

      Book { "_id": 1, "name": "The Brothers Karamazov", "author": Dostoevsky, "length": 824 }
      Book { "_id": 3, "name": "Les Miserables", "author": Hugo, "length": 1462 }
      Book { "_id": 2, "name": "Atlas Shrugged", "author": Rand, "length": 1088 }
      Book { "_id": 4, "name": "A Dance with Dragons", "author": Martin, "length": 1104 }

Additional Information
----------------------

To learn more about the operations metnioned in this guide, see the following:

- :ref:`rust-query-guide`
- :ref:`rust-retrieve-guide`
- :ref:`rust-compound-operations`
- :ref:`rust-aggregation`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this guide, see the
following API Documentation:

- `find() <{+api+}/struct.Collection.html#method.find>`__
- `FindOptions <{+api+}/options/struct.FindOptions.html>`__
- `FindOneOptions <{+api+}/options/struct.FindOneOptions.html>`__
- `Cursor <{+api+}/struct.Cursor.html>`__
- `aggregate() <{+api+}/struct.Collection.html#method.aggregate>`__
- `AggregateOptions <{+api+}/options/struct.AggregateOptions.html>`__