.. _schema-validation-query-expression:

=======================================
Specify Validation With Query Operators
=======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can specify validation using query operators such as :query:`$eq`
and :query:`$gt` to compare fields.

A common use case for schema validation with query operators is when you
want to create dynamic validation rules that compare multiple field
values at runtime. For example, if you have a field that depends on the
value of another field and need to ensure that those values are
correctly proportional to each other.

Restrictions
------------

- You can't specify the following :ref:`query operators
  <query-selectors>` in a ``validator`` object:

  - :query:`$expr` with :expression:`$function` expressions

  - :query:`$near`

  - :query:`$nearSphere`

  - :query:`$text`

  - :query:`$where`

- You can't specify schema validation for:

  - Collections in the ``admin``, ``local``, and ``config`` databases

  - :ref:`System collections <metadata-system-collections>`

Context
-------

Consider an application that tracks customer orders. The orders have a
base price and a :abbr:`VAT (Value Added Tax)`. The ``orders``
collection contains these fields to track total price:

- ``price``
- ``VAT``
- ``totalWithVAT``

Steps
-----

The following procedure creates a schema validation with query operators
to ensure that ``totalWithVAT`` matches the expected combination of
``price`` and ``VAT``.

.. procedure::

   .. step:: Create a collection with validation.

      Create an ``orders`` collection with schema validation:

      .. code-block:: javascript

         db.createCollection( "orders",
            {
               validator: { 
                  $expr:
                     { 
                        $eq: [
                           "$totalWithVAT",
                           { $multiply: [ "$total", { $sum:[ 1, "$VAT" ] } ] }
                        ]
                     }
               }
            }
         )

      With this validation, you can only insert documents if the
      ``totalWithVAT`` field equals ``total * (1 + VAT)``.

   .. step:: Confirm that the validation prevents invalid documents.

      The following operation fails because the ``totalWithVAT`` field
      does not equal the correct value:

      .. code-block:: javascript

          db.orders.insertOne( {
             total: NumberDecimal("141"),
             VAT: NumberDecimal("0.20"),
             totalWithVAT: NumberDecimal("169")
          } )

      141 * (1 + 0.20) equals 169.2, so the value of the
      ``totalWithVAT`` field must be 169.2.

      The operation returns this error:

      .. code-block:: javascript
         :copyable: false

         MongoServerError: Document failed validation
         Additional information: {
           failingDocumentId: ObjectId("62bcc9b073c105dde9231293"),
           details: {
             operatorName: '$expr',
             specifiedAs: {
               '$expr': {
                 '$eq': [
                   '$totalWithVAT',
                   {
                     '$multiply': [ '$total', { '$sum': [ 1, '$VAT' ] } ]
                   }
                 ]
               }
             },
             reason: 'expression did not match',
             expressionResult: false
           }
         }

   .. step:: Make the document valid and insert it.

      After updating the document to have the correct ``totalWithVAT``
      value, the operation succeeds:

      .. code-block:: javascript

         db.orders.insertOne( {
            total: NumberDecimal("141"),
            VAT: NumberDecimal("0.20"),
            totalWithVAT: NumberDecimal("169.2")
         } )

      MongoDB returns the following output, indicating that the insert
      was successful:

      .. code-block:: javascript
         :copyable: false

         {
           acknowledged: true,
           insertedId: ObjectId("6304f4651e52f124b84479ba")
         }

Additional Information
----------------------

You can combine query operator validation with :ref:`JSON Schema
validation <schema-validation-json>`.

.. include:: /includes/schema-validation-combine-validation-types.rst

Learn More
----------

- To see all query operators available in MongoDB, see
  :ref:`query-selectors`.

- To learn more about the ``$expr`` operator, which allows the use of
  aggregation expressions within the query language, see :query:`$expr`.
