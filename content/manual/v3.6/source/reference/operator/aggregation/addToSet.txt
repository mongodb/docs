=======================
$addToSet (aggregation)
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. group:: $addToSet

   Returns an array of all *unique* values that results from applying
   an expression to each document in a group of documents that share
   the same group by key. Order of the elements in the output array is
   unspecified.

   .. include:: /includes/extracts/fact-aggregation-accumulator-addToSet.rst

   :group:`$addToSet` has the following syntax:

   .. code-block:: javascript

      { $addToSet: <expression> }

   For more information on expressions, see
   :ref:`aggregation-expressions`.

Behavior
--------

Array Expression
~~~~~~~~~~~~~~~~

If the value of the expression is an array, :group:`$addToSet` appends
the whole array as a *single* element.

Document Expression
~~~~~~~~~~~~~~~~~~~

If the value of the expression is a document, MongoDB determines that
the document is a duplicate if another document in the array matches
the to-be-added document exactly; i.e. the existing document has the
exact same fields and values in the exact same order.

Memory Restrictions
~~~~~~~~~~~~~~~~~~~

Starting in 3.6.17, :group:`$addToSet` has
a memory limit of 100 MiB (100 * 1024 * 1024), even when
:method:`db.collection.aggregate()` is run with :ref:`allowDiskUse:
true <method-aggregate-allowDiskUse>`.

See :doc:`aggregration pipeline limitations
</core/aggregation-pipeline-limits>` for more information.

Example
-------

Consider a ``sales`` collection with the following documents:

.. code-block:: javascript

   { "_id" : 1, "item" : "abc", "price" : 10, "quantity" : 2, "date" : ISODate("2014-01-01T08:00:00Z") }
   { "_id" : 2, "item" : "jkl", "price" : 20, "quantity" : 1, "date" : ISODate("2014-02-03T09:00:00Z") }
   { "_id" : 3, "item" : "xyz", "price" : 5, "quantity" : 5, "date" : ISODate("2014-02-03T09:05:00Z") }
   { "_id" : 4, "item" : "abc", "price" : 10, "quantity" : 10, "date" : ISODate("2014-02-15T08:00:00Z") }
   { "_id" : 5, "item" : "xyz", "price" : 5, "quantity" : 10, "date" : ISODate("2014-02-15T09:12:00Z") }

Grouping the documents by the day and the year of the ``date`` field,
the following operation uses the :group:`$addToSet` accumulator to
compute the list of unique items sold for each group:

.. code-block:: javascript

   db.sales.aggregate(
      [
        {
          $group:
            {
              _id: { day: { $dayOfYear: "$date"}, year: { $year: "$date" } },
              itemsSold: { $addToSet: "$item" }
            }
        }
      ]
   )

The operation returns the following results:

.. code-block:: javascript

   { "_id" : { "day" : 46, "year" : 2014 }, "itemsSold" : [ "xyz", "abc" ] }
   { "_id" : { "day" : 34, "year" : 2014 }, "itemsSold" : [ "xyz", "jkl" ] }
   { "_id" : { "day" : 1, "year" : 2014 }, "itemsSold" : [ "abc" ] }
