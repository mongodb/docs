.. _semantic-kernel-csharp:

===================================================
Get Started with the Semantic Kernel C# Integration
===================================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. facet::
   :name: programming_language
   :values: csharp

.. meta::
   :description: Integrate Atlas Vector Search with Microsoft Semantic Kernel to build Gen AI applications and implement RAG in C#.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. note::

   This tutorial uses the Semantic Kernel :github:`C# library 
   </microsoft/semantic-kernel/tree/main/dotnet/src/Connectors/Connectors.Memory.MongoDB>`. 
   For a tutorial that uses the Python library see :ref:`semantic-kernel`.

.. include:: /includes/ai-integrations/semantic-kernel/sk-overview.rst

Background
----------

.. include:: /includes/ai-integrations/semantic-kernel/sk-background.rst

Prerequisites
-------------

To complete this tutorial, you must have the following:

- An |service| {+cluster+} running MongoDB version 6.0.11, 7.0.2, or later
  (including :abbr:`RCs (Release Candidates)`). Ensure that your 
  :abbr:`IP address (Internet Protocal address)` is included
  in your |service| project's :ref:`access list <access-list>`.

- An OpenAI API Key. You must have a paid OpenAI account with credits
  available for API requests.

- A terminal and code editor to run your .NET application.

- `C#/.NET <https://dotnet.microsoft.com/en-us/download>`__ installed.

Set Up the Environment
----------------------

You must first set up the environment for this tutorial. To set up your environment, complete the following steps.

.. include:: /includes/ai-integrations/semantic-kernel/sk-set-up-environment-csharp.rst

Store Custom Data in |service|
------------------------------

In this section, you initialize the `kernel 
<https://learn.microsoft.com/en-us/semantic-kernel/agents/kernel/>`__, 
which is the main interface used to manage your 
application's services and plugins. Through the kernel, you configure your 
AI services, instantiate |service| as a vector database (also called a memory 
store), and load custom data into your |service| {+cluster+}. 

Copy and paste the following code into your application's ``Program.cs`` file.

.. include:: /includes/ai-integrations/semantic-kernel/sk-memory-store-description.rst 

.. literalinclude:: /includes/ai-integrations/semantic-kernel/sk-create-memory-store.cs
      :language: csharp
      :copyable:

Save the file, then run the following command to load your data into |service|:

.. code-block::

   dotnet run

.. tip:: 

    After running the sample code, you can
    view your vector embeddings :ref:`in the {+atlas-ui+} <atlas-ui-view-collections>`
    by navigating to the ``semantic_kernel_db.test`` collection in your {+cluster+}.


Create the {+avs+} Index
------------------------------------

To enable vector search queries on your vector store,
create an {+avs+} index on the ``semantic_kernel_db.test`` collection.

Required Access
~~~~~~~~~~~~~~~

To create an {+avs+} index, you must have :authrole:`Project Data Access 
Admin` or higher access to the |service| project.

Procedure 
~~~~~~~~~

.. include:: /includes/ai-integrations/semantic-kernel/sk-create-index.rst

Run Vector Search Queries
-------------------------

Once |service| builds your index, you can run vector search 
queries on your data.

.. include:: /includes/ai-integrations/semantic-kernel/sk-query-examples-csharp.rst

.. _answer-questions:

Answer Questions on Your Data
-----------------------------

This section shows an example |rag| implementation 
with {+avs+} and Semantic Kernel. Now that you've used {+avs+} 
to retrieve semantically similar documents, paste the following code example
at the end of your ``Program.cs`` to prompt the |llm| 
to answer questions based on those documents.

.. include:: /includes/ai-integrations/semantic-kernel/sk-perform-qa-csharp.rst

Next Steps
----------

.. include:: /includes/ai-integrations/semantic-kernel/sk-next-steps.rst


