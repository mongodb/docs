.. _release-notes-8.2:

=============================
Release Notes for MongoDB 8.2
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. include:: /includes/in-dev.rst

.. include:: /includes/rapid-release.rst

General Changes 
---------------

Index Builds During Initial Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.2, index builds during :ref:`initial sync 
<replica-set-initial-sync>` use 10% of available RAM by default. You can specify
a different percentage of memory for MongoDB to use with the 
:parameter:`initialSyncIndexBuildMemoryPercentage` parameter.

By default, the amount of available memory must be between 200 MB and 16 GB, 
inclusive. You use the following parameters to specify different minimum and 
maximum thresholds for memory usage: 

- :parameter:`initialSyncIndexBuildMemoryMinMB`
- :parameter:`initialSyncIndexBuildMemoryMaxMB`

Query Statistics 
~~~~~~~~~~~~~~~~

Starting in MongoDB 8.2, the :pipeline:`$queryStats` output includes the
following metrics on delinquent :ref:`tickets <storage-wiredtiger-concurrency>`:

- ``metrics.delinquentAcquisitions``
- ``metrics.totalAcquisitionDelinquencyMillis``
- ``metrics.maxAcquisitionDelinquencyMillis``

MongoDB considers an execution ticket as delinquent when acquisition takes too 
long.

WiredTiger Cache Size Configuration as a Percentage
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.2, you can configure the
:ref:`WiredTiger <storage-wiredtiger>` internal cache
size using a new percentage-based option. In addition to the existing
:option:`--wiredTigerCacheSizeGB <mongod --wiredTigerCacheSizeGB>`
and :setting:`storage.wiredTiger.engineConfig.cacheSizeGB`
gigabyte-based settings, you can now specify the cache size as a
percentage of the available memory with the
:option:`--wiredTigerCacheSizePct <mongod --wiredTigerCacheSizePct>`
and :setting:`storage.wiredTiger.engineConfig.cacheSizePct` options.

New Inconsistency Type: Range Deletion Missing Shard Key Index
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MonogDB 8.2, a new inconsistency type
:data:`RangeDeletionMissingShardKeyIndex` is implemented. The
inconsistency type indicates that a sharded collection exists that
doesn't have an index compatible with the collection shard key and there
is at least one remaining range deletion task to complete.

.. toctree::
   :titlesonly:
   :hidden:
   
   Compatibility Changes </release-notes/8.2-compatibility>
   Changelog </release-notes/8.2-changelog>
