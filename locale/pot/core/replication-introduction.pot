# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replication-introduction.txt:5
# 62d167a8e2c94842a69e1c26a52189ec
msgid "Replication Introduction"
msgstr ""

#: ../source/core/replication-introduction.txt:11
# a4ad54626191435f9109b17a9d43c5cc
msgid "Replication is the process of synchronizing data across multiple servers."
msgstr ""

#: ../source/core/replication-introduction.txt:15
# b4ef13b0b79245a29a0ebf7beb895f0d
msgid "Purpose of Replication"
msgstr ""

#: ../source/core/replication-introduction.txt:17
# 40d296c135fe4a3c93cc2d17b7c9d0d7
msgid "Replication provides redundancy and increases data availability. With multiple copies of data on different database servers, replication protects a database from the loss of a single server. Replication also allows you to recover from hardware failure and service interruptions. With additional copies of the data, you can dedicate one to disaster recovery, reporting, or backup."
msgstr ""

#: ../source/core/replication-introduction.txt:24
# fa4d6d5e909c47e7bfe9ae2af5f59283
msgid "In some cases, you can use replication to increase read capacity. Clients have the ability to send read and write operations to different servers. You can also maintain copies in different data centers to increase the locality and availability of data for distributed applications."
msgstr ""

#: ../source/core/replication-introduction.txt:31
# ecf8b72e8f444c889210ee041dc4e360
msgid "Replication in MongoDB"
msgstr ""

#: ../source/core/replication-introduction.txt:33
# b7dcfd113a70413eb887cdd45d9f1e50
msgid "A replica set is a group of :program:`mongod` instances that host the same data set. One :program:`mongod`, the primary, receives all write operations. All other instances, secondaries, apply operations from the primary so that they have the same data set."
msgstr ""

#: ../source/core/replication-introduction.txt:38
# 2e0466b7b553482ebfe6869904233cdd
msgid "The **primary** accepts all write operations from clients. Replica set can have only one primary. Because only one member can accept write operations, replica sets provide **strict consistency** for all reads from the primary. To support replication, the primary logs all changes to its data sets in its :doc:`oplog </core/replica-set-oplog>`. See :doc:`primary </core/replica-set-primary>` for more information."
msgstr ""

#: ../source/core/replication-introduction.txt:47
# 9519855ae8604545be6e122b7ed5ddfa
msgid "The **secondaries** replicate the primary's oplog and apply the operations to their data sets. Secondaries' data sets reflect the primary's data set. If the primary is unavailable, the replica set will elect a secondary to be primary. By default, clients read from the primary, however, clients can specify a :doc:`read preferences </core/read-preference>` to send read operations to secondaries. Reads from secondaries may return data that does not reflect the state of the primary. See :doc:`secondaries </core/replica-set-secondary>` for more information."
msgstr ""

#: ../source/core/replication-introduction.txt:59
# ea5108979f794f47a962fade92f6405b
msgid "You may add an extra :program:`mongod` instance to a replica set as an **arbiter**. Arbiters do not maintain a data set. Arbiters only exist to vote in elections. If your replica set has an even number of members, add an arbiter to obtain a majority of votes in an election for primary. Arbiters do not require dedicated hardware. See :doc:`arbiter </core/replica-set-arbiter>` for more information."
msgstr ""

#: ../source/core/replication-introduction.txt:68
# ed759eaa931c4b32b457f9e45aaff37f
msgid "An **arbiter** will always be an arbiter. A **primary** may step down and become a **secondary**. A **secondary** may become the primary during an election."
msgstr ""

#: ../source/core/replication-introduction.txt:73
# 964b6e1d9ded4e148c13d93edc247922
msgid "Asynchronous Replication"
msgstr ""

#: ../source/core/replication-introduction.txt:75
# 886ec46c36a147f498d82eec4989da81
msgid "Secondaries apply operations from the primary asynchronously. By applying operations after the primary, sets can continue to function without some members. However, as a result secondaries may not return the most current data to clients."
msgstr ""

#: ../source/core/replication-introduction.txt:80
# 17c8e76a2a1a4005a4ec2868bfcb491d
msgid "See :ref:`replica-set-oplog` and :ref:`replica-set-sync` for more information. See :ref:`replica-set-read-preference` for more on read operations and secondaries."
msgstr ""

#: ../source/core/replication-introduction.txt:85
# d661c3c3ae474616a63dcfa20e088ef9
msgid "Automatic Failover"
msgstr ""

#: ../source/core/replication-introduction.txt:87
# 03322433d8854d619ac316e975a86ce0
msgid "When a primary does not communicate with the other members of the set for more than 10 seconds, the replica set will attempt to select another member to become the new primary. The first secondary that receives a majority of the votes becomes primary."
msgstr ""

#: ../source/core/replication-introduction.txt:94
# dc8224e3aaba4676a7233eed9deb0917
msgid "See :ref:`replica-set-elections` and :ref:`replica-set-rollbacks` for more information."
msgstr ""

#: ../source/core/replication-introduction.txt:100
# 0697d38ef8594f2e83d3bed86c9a4f88
msgid "Additional Features"
msgstr ""

#: ../source/core/replication-introduction.txt:102
# 1f37c92bd048485c985250171ed17b56
msgid "Replica sets provide a number of options to support application needs. For example, you may deploy a replica set with :doc:`members in multiple data centers </core/replica-set-architecture-geographically-distributed>`, or control the outcome of elections by adjusting the :data:`~replSetGetConfig.members[n].priority` of some members. Replica sets also support dedicated members for reporting, disaster recovery, or backup functions."
msgstr ""

#: ../source/core/replication-introduction.txt:111
# 9b0c0adf303e4355a56c9122277766d6
msgid "See :ref:`replica-set-secondary-only-members`, :ref:`replica-set-hidden-members` and :ref:`replica-set-delayed-members` for more information."
msgstr ""

