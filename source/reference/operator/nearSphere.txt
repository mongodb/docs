===========
$nearSphere
===========

.. default-domain:: mongodb

.. operator:: $nearSphere

   .. versionadded:: 1.8

   The :operator:`$nearSphere` operator specifies a point for which a
   :term:`geospatial` query returns the 100 closest documents, sorted
   from nearest to farthest. MongoDB calculates distances for
   :operator:`$nearSphere` using spherical geometry.

   The :operator:`$nearSphere` operator queries for points defined by
   either :term:`GeoJSON` objects or legacy coordinate pairs.

   The optional :operator:`$maxDistance` operator limits a
   :operator:`$nearSphere` query to return only those documents that
   fall within a maximum distance of a point. If you use
   :operator:`$maxDistance` on GeoJSON points, the distance is measured
   in meters. If you use :operator:`$maxDistance` on legacy coordinate
   pairs, the distance is measured in radians.

   The :operator:`$nearSphere` operator requires a geospatial index. The
   ``2dsphere`` and ``2d`` indexes both support :operator:`$nearSphere`.
   In a ``2dsphere`` index, a grid coordinate is interpreted as a
   GeoJSON point.

   For queries on GeoJSON data, use the following syntax:

   .. code-block:: javascript

      db.<collection>.find( { <location field> :
                               { $nearSphere :
                                 { $geometry :
                                    { type : "Point" ,
                                      coordinates : [ <longitude> , <latitude> ] } ,
                                   $maxDistance : <distance in meters>
                         } } } )

   .. important:: If you use longitude and latitude, specify **longitude first**.

   For queries on legacy coordinate pairs, use the following syntax:

   .. code-block:: javascript

      db.<collection>.find( { <location field> :
                               { $nearSphere: [ <x> , <y> ] ,
                                 $maxDistance: <distance in radians>
                            } } )

   .. important:: If you use longitude and latitude, specify **longitude first**.

   The following example selects the 100 documents with legacy
   coordinates pairs nearest to ``[ 40 , 5 ]``, as calculated by
   spherical geometry:

   .. code-block:: javascript

      db.places.find( { loc :
                         { $nearSphere : [ 40 , 5 ]
                           $maxDistance : 10
                      } } )

   .. include:: /includes/note-geospatial-index-must-exist.rst
