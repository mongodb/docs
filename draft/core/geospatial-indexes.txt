==================
Geospatial Indexes
==================

.. default-domain:: mongodb

Overview
--------

MongoDB supports location-based queries and geospatial data with a
special index. The geospatial index stores :ref:`geohashes
<geospatial-geohash>`, and makes it possible to query documents
based on proximity or within a bounded region. MongoDB can
calculate distances using flat or spherical geometry models.
Additionally, geospatial haystack indexes provide additional
support for specific data distribution.

This document introduces the core concepts that underpin geospatial
indexes in MongoDB. For more information,
:doc:`/applications/geospatial-indexes` provide complete documentation
of all location-based operations and queries.

.. include:: /includes/geospatial-coordinates.rst

.. _geospatial-indexes:

Geospatial Indexes
------------------

To create a geospatial index, use the :func:`ensureIndex
<db.collection.ensureIndex()>` method with the value ``2d`` for the
location field of your collection. Consider the following prototype
operation:

.. code-block:: javascript

   db.collection.ensureIndex( { <location field> : "2d" } )

Almost all geospatial operators will query this index for location
data.  The index comprises of :term:`geohashes <geohash>` calculated
from location values and the index's geospatial :ref:`range
<geospatial-indexes-range>`.  For more information on :term:`geohash`,
please refer to the :ref:`geohash <geospatial-geohash>` section.

To perform queries on your geospatial data, please see
:ref:`geospatial-querying`.

.. TODO fix this... weird duplicate reference? 

.. see:: :ref:`<geospatial-coordinates>` for an overview on modeling
   location data in MongoDB.

.. note::

   MongoDB only supports *one* geospatial index per
   collection. Creating more than one geospatial index with a
   collection will produce unexpected results.

.. _geospatial-indexes-range:

Range
~~~~~

All geospatial indexes are bounded to a range as this range is used to
compute :term:`geohash` values. MongoDB will return an error and
reject documents with coordinate data outside of the specified range.
The default range assumes latitude and longitude data, and are between
-180 inclusive and 180 non-inclusive (i.e. ``[-180, 180)``.)

To configure the range of a geospatial index, use the ``min`` and
``max`` options with the :func:`ensureIndex() <db.collection.ensureIndex()>`
operation, as in the following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { <location field>: "2d" } ,
                              { min: <lower bound> , max: <upper bound> } )

For more information see the :ref:`geospatial precision
<geospatial-indexes-precision>` and :ref:`geohash
<geospatial-geohash>` sections.

.. _geospatial-indexes-precision:

Precision
~~~~~~~~~

Geospatial indexes consist of :term:`geohash` values and the number of
bits determine the precision of the index. More bits create more
precise :term:`geohash` values, which allow MongoDB to return more
precise results. Fewer bits create a shorter :term:`geohash` value,
which allow for faster processing. For more information on the
relationship between bits and precision, see the :ref:`geohash
<geospatial-geohash>` section.

The precision of geospatial indexes can be configured upto 32 bits. By
default, geospatial indexes use 26 bits of precision, which is precise
to roughly 2 feet or about 60 centimeters using the default range of
-180 to 180.

The precision of a geospatial index can be configured during creation by
specifying the ``bits`` option to the :func:`ensureIndex()
<db.command.ensureIndex()>` method, as in the following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( {<location field>: "2d"} ,
                              { bits: <bit precision> } )

Only create an index with fewer than 26 bits *if* the data in your
collection is less precise and/or you're willing to sacrifice
precision for query speed.

Compound Indexes
~~~~~~~~~~~~~~~~

:ref:`Compound indexes <index-type-compound>` can be used with
geospatial data to improve performance that query all these fields.

To create compound index with geospatial data and another field, the
prototype form is:

.. code-block:: javascript

   db.collection.ensureIndex( { <location field>: "2d", <field>: 1 } );

This index will now support regular geospatial queries as well as
queries where you must filter both by location and by another field.

For example, to create a compound index on the ``loc`` field and the
``type`` field, the command is:

.. code-block:: javascript

   db.storeInfo.ensureIndex( { loc: "2d", type: 1 } );

This will support geospatial queries as well as any query on the
``type`` field. This index can return a list of restaurants near a
given point, which can optionally filter restaurants by the ``type``,
such as "take-out," or "bar".

.. see also: ":ref:`<index-type-compound>`" and ":ref:`<geospatial-haystack-index>`"

.. _geospatial-haystack-index:

Haystack Index
~~~~~~~~~~~~~~

Geospatial haystack indexes make it possible to tune for the
distribution of your data and build a special bucket index. Haystack
indexes improve query performance for queries limited to a specific
area.

.. note::

   Haystack indexes are tuned to the ``bucketSize`` and are not suited
   to returning the closest documents to a particular location,
   because the closest documents could be further away than to the
   ``bucketSize``.

The following command is the prototype to build a :term:`geoHaystack`
index:

.. code-block:: javascript

   db.collection.ensureIndex({ <location field>: "geoHaystack", type: 1 },
                             { bucketSize: <bucket value> })

The ``bucketSize`` parameter determines the granularity of the
index. A bucket value of ``5`` creates an index that stores keys
within 5 units of the coordinate in the same bucket.

Geohaystack indexes are only queried by the :dbcommand:`geoSearch`
command, please see the :ref:`Querying Haystack Indexes
<geospatial-haystack-queries>` section for command details.

:ref:`Spherical queries <geospatial-spherical-geometry>` are not
supported by geohaystack indexes.

By default, all queries that use a geospatial haystack index will return 50
documents.

.. _geospatial-spherical-geometry:

Distance Calculation Modes
--------------------------

MongoDB can calculate distances using two geometry systems: flat and
spherical. The default flat geometry, which model points on a flat
surface. To use spherical geometry to calculate distances, use
spherical query operators, which model points on a spherical surface
(i.e. coordinates on Earth.)

.. note::

   There is no difference between flat and spherical *data* as stored
   in MongoDB. Rather, the only difference is the distance
   formulas to calculate in flat and spherical geometry.

For more information on query operations for spherical geometry see the
:ref:`spherical queries <geospatial-query-spherical>` section.

.. _geospatial-geohash:

Geohash
-------

To create a geospatial index, MongoDB computes the :term:`geohash`
value for coordinate pairs within the specified :term:`range
<geospatial-indexes-range>`.

To calculate a geohash value, continuously divide a 2D map into
quadrants. Then, assign each quadrant a two bit value. For example, a
two bit representation of four quadrants would be:

.. code-block:: javascript

   01  11

   00  10

These two bit values, ``00``, ``01``, ``10``, and ``11``, represent
each of the quadrants, and all points within that quadrant. For a
:term:`geohash` with two bits of resolution, all points in the bottom
left quadrant would have a geohash of ``00``.  The top left quadrant
would have the geohash of ``01``. The bottom right and top right would
have a geohash of ``10`` and ``11``, respectively.

To provide additional precision, continue dividing each quadrant into
sub-quadrants. Each sub-quadrant would have the geohash value of the
containing quadrant concatenated with the value of the
sub-quadrant. The geohash for the upper-right quadrant is ``11``, and
the geohash for the sub-quadrants would be: (clockwise from the top
left) ``1101``, ``1111``, ``1110``, and ``1100``, respectfully.

To calculate a more precise :term:`geohash`, continue dividing the
sub-quadrant, concatenate the two-bit identifier for each division. The
more "bits" in the hash identifier for a given point, the smaller
possible area that the hash can describe, and the higher the
resolution of the geospatial index.

.. the following is a section about the limitations of geospatial
   indexes in sharding:

.. include:: /includes/geospatial-sharding.rst
