.. _mongosh-update:

================
Update Documents
================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :description: Use the MongoDB Shell to update a single document, update multiple documents, or replace a document. 
   :keywords: server, atlas, sample dataset

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The MongoDB shell provides the following methods to update documents in
a collection:

- To update a single document, use
  :method:`db.collection.updateOne()`.

- To update multiple documents, use
  :method:`db.collection.updateMany()`.

- To replace a document, use
  :method:`db.collection.replaceOne()`.

.. include:: /includes/fact-sample-data-examples.rst

Update Operator Syntax
----------------------

To update a document, MongoDB provides
:manual:`update operators </reference/operator/update>`, such
as :update:`$set`, to modify field values.

To use the update operators, pass to the update methods an
update document of the form:

.. code-block:: javascript

   {
     <update operator>: { <field1>: <value1>, ... },
     <update operator>: { <field2>: <value2>, ... },
     ...
   }

Some update operators, such as :update:`$set`, create the field if
the field does not exist. See the individual
:manual:`update operator </reference/operator/update>` reference for
details.

Update a Single Document
------------------------

Use the :method:`db.collection.updateOne()` method to update the *first*
document that matches a specified filter.

.. include:: /includes/admonitions/note-natural-sort-order.rst

.. example::

   To update the *first* document in the ``sample_mflix.movies``
   collection where ``title`` equals ``"Twilight"``:

   .. code-block:: javascript

      use sample_mflix

      db.movies.updateOne( { title: "Twilight" },
      {
        $set: {
          plot: "A teenage girl risks everything–including her life–when she falls in love with a vampire."
        },
        $currentDate: { lastUpdated: true } 
      })

   The update operation:

   - Uses the :update:`$set` operator to update the value of the
     ``plot`` field for the movie ``Twilight``.

   - Uses the :update:`$currentDate` operator to update the value
     of the ``lastUpdated`` field to the current date. If
     ``lastUpdated`` field does not exist,
     :update:`$currentDate` will create the field. See
     :update:`$currentDate` for details.

Update Multiple Documents
-------------------------

Use the :method:`db.collection.updateMany()` to update all documents
that match a specified filter.

.. example::

   To update all documents in the ``sample_airbnb.listingsAndReviews``
   collection to update where ``security_deposit`` is less than ``100``:

   .. code-block:: javascript

      use sample_airbnb

      db.listingsAndReviews.updateMany(
        { security_deposit: { $lt: 100 } },
        {
          $set: { security_deposit: 100, minimum_nights: 1 }
        }
      )

   The update operation uses the :update:`$set` operator to update the
   value of the ``security_deposit`` field to ``100`` and the value of
   the ``minimum_nights`` field to ``1``.

Replace a Document
------------------

To replace the entire content of a document except for the ``_id``
field, pass an entirely new document as the second argument to
:method:`db.collection.replaceOne()`.

When replacing a document, the replacement document must contain only
field/value pairs. Do not include :manual:`update operators
</reference/operator/update>` expressions.

The replacement document can have different fields from the original
document. In the replacement document, you can omit the ``_id`` field
since the ``_id`` field is immutable; however, if you do include the
``_id`` field, it must have the same value as the current value.

.. example::

   To replace the *first* document from the
   ``sample_analytics.accounts`` collection where
   ``account_id: 371138``:

   .. code-block:: javascript

      db.accounts.replaceOne(
        { account_id: 371138 },
        { account_id: 893421, limit: 5000, products: [ "Investment", "Brokerage" ] }
      )

   Run the following command to read your updated document:

   .. code-block:: javascript

      db.accounts.findOne( { account_id: 893421 } )

Update Behavior
---------------

To learn more about the specific behavior of updating documents,
see :manual:`Behavior </tutorial/update-documents/#behavior>`.

Learn More
----------

- To learn how to update documents using an aggregation pipeline, see
  :manual:`Updates with Aggregation Pipeline
  </tutorial/update-documents-with-aggregation-pipeline/>`.

- To see all available methods to update documents, see
  :manual:`Update Methods </reference/update-methods>`.
