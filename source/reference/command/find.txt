====
find
====

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: find

   .. versionadded:: 3.2

   Executes a query and returns the first batch of results and the
   cursor id, from which the client can construct a cursor.

   .. tip::

      Rather than run the :dbcommand:`find` command directly, you can
      use the :method:`db.collection.find()` helper provided in the
      :binary:`~bin.mongo` shell or the equivalent helper in the
      drivers.

Syntax
------

.. versionchanged:: 4.4

   MongoDB deprecates the ``oplogReplay`` option to the :dbcommand:`find` 
   command. The optimization enabled by this flag in previous versions now 
   happens automatically for eligible queries on the oplog. Therefore, 
   you don't need to specify this flag. If specified, the server accepts 
   the flag for backwards compatibility, but the flag has no effect.

The :dbcommand:`find` command has the following syntax:

.. code-block:: javascript

   db.runCommand(
      {
         "find": <string>,
         "filter": <document>,
         "sort": <document>,
         "projection": <document>,
         "hint": <document or string>,
         "skip": <int>,
         "limit": <int>,
         "batchSize": <int>,
         "singleBatch": <bool>,
         "comment": <any>,
         "maxTimeMS": <int>,
         "readConcern": <document>,
         "max": <document>,
         "min": <document>,
         "returnKey": <bool>,
         "showRecordId": <bool>,
         "tailable": <bool>,
         "oplogReplay": <bool>,
         "noCursorTimeout": <bool>,
         "awaitData": <bool>,
         "allowPartialResults": <bool>,
         "collation": <document>,
         "allowDiskUse" : <bool>
      }
   )

.. _find-cmd-fields:

Command Fields
~~~~~~~~~~~~~~

The command accepts the following fields:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Field

     - Type

     - Description

   * - ``find``

     - string

     - The name of the collection or :doc:`view </core/views>` to query.
       
       

   * - ``filter``

     - document

     - Optional. The query predicate. If unspecified, then all documents in
       the collection will match the predicate.
       
       

   * - .. _find-cmd-sort:
   
       :ref:`sort <find-cmd-sort>`

     - document

     - Optional. The sort specification for the ordering of the results.
       
       

   * - ``projection``

     - document

     - Optional. The :ref:`projection specification <projections>` to
       determine which fields to include in the returned documents. See
       :ref:`find-projection` and :doc:`/reference/operator/projection`.
       
       .. include:: /includes/extracts/views-unsupported-projection-operators.rst
       
   * - ``hint``

     - string or document

     - Optional. Index specification. Specify either the index name as a
       string or the index key pattern. If specified, then the query system
       will only consider plans using the hinted index.
       
       Starting in MongoDB 4.2, with the following exception, ``hint``
       is required if the command includes the ``min`` and/or ``max``
       fields; ``hint`` is not required with ``min`` and/or ``max`` if
       the ``filter`` is an equality condition on the ``_id`` field ``{
       _id: <value> }``.
       
       

   * - ``skip``

     - Positive integer

     - Optional. Number of documents to skip. Defaults to 0.
       
       

   * - ``limit``

     - Non-negative integer

     - Optional. The maximum number of documents to return. If unspecified,
       then defaults to no limit. A limit of 0 is equivalent to setting no
       limit.
       
       

   * - ``batchSize``

     - non-negative integer

     - Optional. The number of documents to return in the first batch.
       Defaults to 101. A batchSize of 0 means that the cursor will be
       established, but no documents will be returned in the first batch.
       
       Unlike the previous wire protocol version, a batchSize of 1 for
       the :dbcommand:`find` command does not close the cursor.
       
       

   * - ``singleBatch``

     - boolean

     - Optional. Determines whether to close the cursor after the first
       batch. Defaults to false.
       
       
   * - ``comment``

     - any

     - .. include:: /includes/extracts/comment-content.rst
       
       .. note::
  
          Any comment set on a :dbcommand:`find` command is inherited
          by any subsequent :dbcommand:`getMore` commands run on the
          ``find`` cursor.

       *Changed in version 4.4.* Prior to 4.4, comments could only be strings.

   * - ``maxTimeMS``

     - positive integer

     - Optional. The cumulative time limit in milliseconds for processing operations on
       the cursor. MongoDB aborts the operation at the earliest following
       :term:`interrupt point`.
       
       .. include:: /includes/extracts/maxTimeMS-readConcern.rst
       
       

   * - ``readConcern``

     - document

     - Optional. Specifies the :term:`read concern`.
       
       .. include:: /includes/fact-readConcern-syntax.rst
       
       .. include:: /includes/fact-readConcern-option-description.rst
       
       The :dbcommand:`getMore` command uses the ``readConcern`` level
       specified in the originating ``find`` command.
       
       

   * - ``max``

     - document

     - Optional. The *exclusive* upper bound for a specific index. See
       :method:`cursor.max()` for details.
       
       Starting in MongoDB 4.2, to use the ``max`` field, the command must
       also use ``hint`` unless the specified ``filter`` is an
       equality condition on the ``_id`` field ``{ _id: <value> }``.
       
       

   * - ``min``

     - document

     - Optional. The *inclusive* lower bound for a specific index. See
       :method:`cursor.min()` for details.
       
       Starting in MongoDB 4.2, to use the ``min`` field, the command must
       also use ``hint`` unless the specified ``filter`` is an
       equality condition on the ``_id`` field ``{ _id: <value> }``.
       
       

   * - ``returnKey``

     - boolean

     - Optional. If true, returns only the index keys in the resulting documents.
       Default value is false. If returnKey is true and the :dbcommand:`find`
       command does not use an index, the returned documents will be empty.
       
       

   * - ``showRecordId``

     - boolean

     - Optional. Determines whether to return the record identifier for each document.
       If true, adds a field $recordId to the returned documents.
       
       

   * - ``tailable``

     - boolean

     - Optional. Returns a :term:`tailable cursor` for a capped collections.
       
       

   * - ``awaitData``

     - boolean

     - Optional. Use in conjunction with the tailable option to block a
       :dbcommand:`getMore` command on the cursor temporarily if at the end
       of data rather than returning no data. After a timeout period,
       :dbcommand:`find` returns as normal.
       
       

   * - ``oplogReplay``

     - boolean

     - .. deprecated:: 4.4
     
       Optional. An internal command for replaying a :ref:`replica set's oplog
       <replica-set-oplog>`.
       
       To use ``oplogReplay``, the ``find`` field must provide a ``filter`` 
       option comparing the ``ts`` document field to a :data:`timestamp` using 
       one of the following comparison operators:
       
       * :expression:`$gte`
       * :expression:`$gt`
       * :expression:`$eq`
       
       For example, the following command replays documents from the ``data``
       :doc:`capped collection </core/capped-collections>` with a timestamp
       later than or equal to January 1st, 2018 UTC:
       
       .. code-block:: javascript
       
          { find: "data",
            oplogReplay: true,
            filter: { ts: { $gte: new Timestamp(1514764800, 0) } } }
       
       .. note:: Deprecated


          .. versionchanged:: 4.4

          Starting in MongoDB 4.4, the ``oplogReplay`` field is deprecated. 
          ``find`` fields that use the :expression:`$gte`, :expression:`$gt`, 
          or :expression:`$eq` ``filter`` predicated on the ``ts`` field 
          will automatically utilize the storage format of the :ref:`replica 
          set's oplog <replica-set-oplog>` to execute the command more 
          efficiently. If specified, the server accepts the ``oplogReplay`` 
          flag for backwards compatibility, but the flag has no effect. 

   * - ``noCursorTimeout``

     - boolean

     - Optional. Prevents the server from timing out idle cursors after an inactivity
       period (10 minutes).
       
       

   * - :ref:`allowPartialResults <cmd-find-allowPartialResults>`

     - boolean

     - .. _cmd-find-allowPartialResults:
     
       Optional. For queries against a sharded collection, allows the
       command (or subsequent :dbcommand:`getMore` commands) to return
       partial results, rather than an error, if one or more queried
       shards are unavailable.

       Starting in MongoDB 4.4, if :dbcommand:`find` (or subsequent
       :dbcommand:`getMore` commands) returns partial results due to
       the unavailability of the queried shard(s), the :ref:`output
       <cmd-find-output>` includes a ``partialResultsReturned``
       indicator field. 

       If the queried shards are initially available for the
       :dbcommand:`find` command but one or more shards become
       unavailable in subsequent :dbcommand:`getMore` commands, only
       the :dbcommand:`getMore` commands run when a queried shard or
       shards are unavailable include the ``partialResultsReturned``
       flag in the output.

   * - ``collation``

     - document

     - Optional. 
       
       .. include:: /includes/extracts/collation-option.rst



   * - .. _find-cmd-allowDiskUse: 
   
       :ref:`allowDiskUse <find-cmd-allowDiskUse>`
     
     - boolean

     - Optional. 

       Use ``allowDiskUse`` to allow MongoDB to use temporary files on
       disk to store data exceeding the 100 megabyte memory limit while
       processing a non-indexed ("blocking") sort operation. If MongoDB
       requires using more than 100 megabytes of memory for a blocking
       sort operation, MongoDB returns an error *unless* the query
       specifies ``allowDiskUse``. See :ref:`sort-index-use` for more
       information on blocking sort operations.

       ``allowDiskUse`` has no effect if MongoDB can satisfy the
       specified :ref:`sort <find-cmd-sort>` using an index, *or* if the
       blocking sort requires less than 100 megabytes of memory.

       For more complete documentation on ``allowDiskUse``, 
       see :method:`cursor.allowDiskUse()`.

       For more information on memory restrictions for large blocking
       sorts, see :ref:`sort-index-use`.

       .. versionadded:: 4.4

.. _cmd-find-output:

Output
~~~~~~

The command returns a document that contains the cursor information,
including the cursor id and the first batch of documents. For example,
the following document is returned when run against a sharded
collection:

.. code-block:: javascript

   {
      "cursor" : {
         "firstBatch" : [
            {
               "_id" : ObjectId("5e8e2ca217b5324fa9847435"),
               "zipcode" : "20001",
               "x" : 1
            },
            {
               "_id" : ObjectId("5e8e2ca517b5324fa9847436"),
               "zipcode" : "30001",
               "x" : 1
            }
         ],
         "partialResultsReturned" : true, // Starting in version 4.4
         "id" : NumberLong("668860441858272439"),
         "ns" : "test.contacts"
      },
      "ok" : 1,
      "operationTime" : Timestamp(1586380205, 1),
      "$clusterTime" : {
         "clusterTime" : Timestamp(1586380225, 2),
         "signature" : {
            "hash" : BinData(0,"aI/jWsUVUSkMw8id+A+AVVTQh9Y="),
            "keyId" : NumberLong("6813364731999420435")
         }
      }
   }

.. list-table::
   :widths: 20 80
   :header-rows: 1
   
   * - Field
     - Description

   * - ``cursor``
     
     - Contains the cursor information, including the
       cursor ``id`` and the ``firstBatch`` of documents.

       Starting in 4.4, if the operation against a sharded collection
       returns partial results due to the unavailability of the queried
       shard(s), the ``cursor`` document includes a
       ``partialResultsReturned`` field. To return partial results,
       rather than error, due to the unavailability of the queried
       shard(s), the :dbcommand:`find` command must run with
       :ref:`allowPartialResults <cmd-find-allowPartialResults>` set to
       ``true``. See :ref:`allowPartialResults
       <cmd-find-allowPartialResults>`.

       If the queried shards are initially available for the
       :dbcommand:`find` command but one or more shards become
       unavailable in subsequent :dbcommand:`getMore` commands, only
       the :dbcommand:`getMore` commands run when a queried shard or
       shards are unavailable include the ``partialResultsReturned``
       flag in the output.
       
   * - ``"ok"``
   
     - Indicates whether the command has succeeded (``1``) or failed
       (``0``).

In addition to the aforementioned :dbcommand:`find`-specific fields,
the :method:`db.runCommand()` includes the following information for
replica sets and sharded clusters:

- ``$clusterTime``
  
- ``operationTime``

See :ref:`db.runCommand() Results <command-response>` for details.

Behavior
--------

Sessions
~~~~~~~~

.. versionadded:: 4.0

For cursors created inside a session, you cannot call
:dbcommand:`getMore` outside the session.

Similarly, for cursors created outside of a session, you cannot call
:dbcommand:`getMore` inside a session.

Session Idle Timeout
````````````````````

.. include:: /includes/extracts/sessions-cursor-timeout.rst

For operations that return a cursor, if the cursor may be idle for
longer than 30 minutes, issue the operation within an explicit session
using :method:`Mongo.startSession()` and periodically refresh the
session using the :dbcommand:`refreshSessions` command. See
:limit:`Session Idle Timeout` for more information.

Transactions
~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-supported-operation.rst

.. include:: /includes/extracts/transactions-operations-getMore.rst

.. include:: /includes/extracts/transactions-usage.rst

.. |operation| replace:: :dbcommand:`find`

Client Disconnection
~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-disconnect.rst


Examples
--------

Specify a Sort and Limit
~~~~~~~~~~~~~~~~~~~~~~~~

The following command runs the :dbcommand:`find`
command filtering on the ``rating`` field and the ``cuisine`` field.
The command includes a ``projection`` to only return the
following fields in the matching documents: ``_id``, ``name``,
``rating``, and ``address`` fields.

The command sorts the documents in the result set by the ``name``
field and limits the result set to 5 documents.

.. code-block:: javascript

   db.runCommand(
      {
        find: "restaurants",
        filter: { rating: { $gte: 9 }, cuisine: "italian" },
        projection: { name: 1, rating: 1, address: 1 },
        sort: { name: 1 },
        limit: 5
      }
   )

Override Default Read Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To override the default read concern level of :readconcern:`"local"`,
use the ``readConcern`` option.

The following operation on a replica set specifies a :term:`read
concern` of :readconcern:`"majority"` to read the most recent copy of
the data confirmed as having been written to a majority of the nodes.

.. include:: /includes/fact-enable-majority-readConcern.rst

.. code-block:: javascript

   db.runCommand(
      {
        find: "restaurants",
        filter: { rating: { $lt: 5 } },
        readConcern: { level: "majority" }
      }
   )

.. include:: /includes/fact-readConcern-most-recent-data-in-node.rst

The :dbcommand:`getMore` command uses the ``readConcern`` level
specified in the originating :dbcommand:`find` command.

A ``readConcern`` can be specified for the :binary:`~bin.mongo` shell method
:method:`db.collection.find()` using the :method:`cursor.readConcern`
method:

.. code-block:: javascript

   db.restaurants.find( { rating: { $lt: 5 } } ).readConcern("majority")

For more information on available read concerns, see
:ref:`read-concern`.

Specify Collation
~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/collation-versionadded.rst

The following operation runs the :dbcommand:`find`
command with the collation specified:

.. code-block:: javascript

   db.runCommand(
      {
        find: "myColl",
        filter: { category: "cafe", status: "a" },
        sort: { category: 1 },
        collation: { locale: "fr", strength: 1 }
      }
   )

The :binary:`~bin.mongo` shell provides the :method:`cursor.collation()` to
specify :ref:`collation <collation>` for a
:method:`db.collection.find()` operation.

.. seealso:: :ref:`3.2-driver-compatibility`
