.. -*- rst -*-

==================================
Social Networking: Storing Updates
==================================

.. default-domain:: mongodb

Overview
--------

This document outlines the basic patterns and principless for using
MongoDB as a persistent storage engine for a social network. In particular, this
document focuses on the task of storing and displaying user updates.

Problem
~~~~~~~

You want to create an social network that will store profile information about
each user as well as allow the user to create various types of posts and updates
which will then be seen on their "friends'" walls.

Solution
~~~~~~~~

The solution described below assumes a *directed* social graph where a user can
choose whether or not to follow another user. Additionally, the user can
designate "circles" of users to follow, in order to facilitate fine-grained
control of privacy. The solution presented below is designed in such a
way as to minimize the number of documents that must be loaded in order to
display any given page, even at the expense of complicating updates.

The particulars of what type of data you want to host on your social network
obviously depends on the type of social network you are designing, and is largely
beyond the scope of this use case. In particular, the main variables that you
will have to consider in adapting this use case to your particular situation are:

What data should be in a user profile?
    This may include gender, age, interests, relationship status, etc. for a
    "casual" social network, or may include resume-type data for a more
    "business-oriented" social network.
What type of updates are allowed?
    Again, depending on what flavor of social network you are designing, you may
    wish to allow posts such as status updates, photos, links, checkins, and
    polls, or you may wish to restrict your users to links and status updates.

Schema Design
~~~~~~~~~~~~~

In the solution presented here, you will use two main "independent" collections
and three "dependent" collections to store user profile data and posts.

Independent Collections
```````````````````````

The first
collection, ``social.user``, stores the social graph information for a given user
along with the user's profile data:

.. code-block:: javascript

   {
     _id: 'T4Y...AC', // base64-encoded ObjectId
     name: 'Rick',
     profile: { ... age, location, interests, etc. ... },
     followers: {
       "T4Y...AD": { name: 'Jared', circles: [ 'python', 'authors'] },
       "T4Y...AF": { name: 'Bernie', circles: [ 'python' ] },
       "T4Y...AI": { name: 'Meghan', circles: [ 'python', 'speakers' ] },
       ...
     ],
     circles: {
       "10gen": {
         "T4Y...AD": { name: 'Jared' },
         "T4Y...AE": { name: 'Max' },
         "T4Y...AF": { name: 'Bernie' },
         "T4Y...AH": { name: 'Paul' },
         ...  },
       ...}
     },
     blocked: ['gh1...0d']
   }

There are a few things to note about this schema:

- Rather than using a "raw" ``ObjectId`` for your ``_id`` field, you'll use a
  base64-encoded version. This allows you to use ``_id`` values as keys in
  subdocuments, which both reduces the memory footprint of these subdocuments as
  well as speeding up some operations.
- The social graph is stored bidirectionally in the ``followers`` and ``circles``
  collections. While this is technically redundant, having the bidirectional
  connections is userful both for displaying the user's followers on the profile
  page, as well as propagating posts to other users, as shown below.
- In addition to the normal "positive" social graph, the schema above also stores
  a block list which contains an array of user ids for posters whose posts never
  appear on the user's wall or news feed.
- The particular profile data stored for the user is isolated into the
  ``profile`` subdocument, allowing you to evolve the schema as necessary without

Of course, to make the network interesting, it's necessary to add various types of
posts. These are stored in the ``social.post`` collection:

.. code-block:: javascript

   {
      _id: ObjectId(...),
      by: { id: "T4Y...AE", name: 'Max' },
      circles: [ '*public*' ],
      type: 'status',
      ts: ISODateTime(...),
      detail: {
         text: 'Loving MongoDB' },
      comments: [
         { by: { id:"T4Y...AG", name: 'Dwight' },
           ts: ISODateTime(...),
           text: 'Right on!' },
           ... all comments listed ... ]
   }

Here, the post stores minimal author information (``by``), the post ``type``, a
timestamp ``ts``, post details ``detail`` (which vary by post type), and a
``comments`` array. In this case, the schema embeds all comments on a post as a
time-sorted flat array. For a more in-depth exploration of the other approaches
to storing comments, please see the document
:doc:`CMS: Storing Comments <cms-storing-comments>`.

A couple of points are worthy of further discussion:

- Author information is truncated; just enough is stored in each ``by`` property
  to display the author name and a link to the author profile. If your user
  wants more detail on a particular author, you can fetch this information as
  they request it. Storing minimal information like this helps keep the document
  small (and therefore fast.)
- The visibility of the post is controlled via the ``circles`` property; any user
  that is part of one of the listed circles can view the post. The special values
  ``"\*public*"`` and ``"\*circles*"`` allow the user to share a post with the
  whole world or with any users in any of the posting user's circles, respectively.
- Different types of posts may contain different types of data in the ``detail``
  field. Isolating this polymorphic information into a subdocument is a good
  practice, helping you to clearly see which parts of the document are common to
  all posts and which can vary. In this case, you would store different data for
  a photo post versus a status update, while still keeping the metadata (``_id``,
  ``by``, ``circles``, ``type``, ``ts``, and ``comments``) the same.

Dependent Collections
`````````````````````

In addition to the independent collections above, for optimal performance you'll
need to create a few dependent collections that will be used to cache
information for display. The first of these collections is the ``social.wall``
collection, and is intended to display a "wall" containing posts created by or
directed to a particular user. The format of the ``social.wall`` collection
follows.

.. code-block:: javascript

   {
      _id: ObjectId(...),
      user_id: "T4Y...AE",
      month: '201204',
      posts: [
         { id: ObjectId(...),
           ts: ISODateTime(...),
           by: { id: "T4Y...AE", name: 'Max' },
           circles: [ '*public*' ],
           type: 'status',
           detail: { text: 'Loving MongoDB' },
           comments_shown: 3,
           comments: [
             { by: { id: "T4Y...AG", name: 'Dwight',
               ts: ISODateTime(...),
               text: 'Right on!' },
             ... only last 3 comments listed ...
               ]
         },
         { id: ObjectId(...),s
           ts: ISODateTime(...),
           by: { id: "T4Y...AE", name: 'Max' },
           circles: [ '*circles*' ],
           type: 'checkin',
           detail: {
             text: 'Great office!',
             geo: [ 40.724348,-73.997308 ],
             name: '10gen Office',
             photo: 'http://....' },
           comments_shown: 1,
           comments: [
             { by: { id: "T4Y...AD", name: 'Jared' },
               ts: ISODateTime(...),
               text: 'Wrong coast!' },
             ... only last 1 comment listed ...
               ]
         },
         { id: ObjectId(...),
           ts: ISODateTime(...),
           by: { id: "T4Y...g9", name: 'Rick' },
           circles: [ '10gen' ],
           type: 'status',
           detail: {
             text: 'So when do you crush Oracle?' },
           comments_shown: 2,
           comments: [
             { by: { id: "T4Y...AE", name: 'Max' },
               ts: ISODateTime(...),
               text: 'Soon... ;-)' },
             ... only last 2 comments listed ...
               ]
         },
         ...
      ]
   }

There are a few things to note about this schema:

- Each post is listed with an abbreviated number of comments (3 might be
  typical.) This is to keep the size of the document reasonable. If you need to
  display more comments on a post, you would then query the ``social.post``
  collection for full details.
- There are actually multiple ``social.wall`` documents for each ``social.user``
  document, one wall document per month. This allows the system to keep a "page" of
  recent posts in the initial page view, fetching older months if requested.
- Once again, the ``by`` properties store only the minimal author information for
  display, helping to keep this document small.
- The number of comments on each post is stored to allow later updates to find
  posts with more than a certain number of comments since the ``$size`` query
  operator does not allow inequality comparisons.

The other dependent collection you'll use is ``social.news``, posts from people
the user follows. This schema includes much of the same information as the
``social.wall`` information, so the document below has been abbreviated for
clarity:

.. code-block:: javascript

   {
      _id: ObjectId(...),
      user_id: "T4Y...AE",
      month: '201204',
      posts: [ ... ]
   }

Operations
----------

Since the schemas above optimize for read performance at the possible expense
of write performance, you should ideally provide a queueing system for
processing updates which may take longer than your desired web request latency.

The examples that follow use the Python programming language and the
:api:`PyMongo <python/current>` :term:`driver` for MongoDB, but you
can implement this system using any language you choose.

Viewing a News Feed or Wall Posts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The most common operation on a social network probably the display of a
particular user's news feed, followed by a user's wall posts. Since the
``social.news`` and ``social.wall`` collections are optimized for these
operations, the query is fairly straightforward. Since these two collections
share a schema, viewing the posts for a news feed or a wall are actually quite
similar operations, and can be supported by the same code:

.. code-block:: python

   def get_posts(collection, user_id, month=None):
       spec = { 'user_id': viewed_user_id }
       if month is not None:
           spec['month'] = {'$lte': month}
       cur = collection.find(spec)
       cur = cur.sort('month', -1)
       for page in cur:
           for post in reversed(page['posts']):
               yield page['month'], post

The function ``get_posts`` above will retrieve all the posts on a particular user's
wall or news feed  in reverse-chronological order. Some special handling is
required to efficieintly achieve the reverse-chronological ordering:

- The ``posts`` within a month are actually stored in chronological order, so the
  order of these posts must be reversed before displaying.
- As a user pages through her wall, it's preferable to avoid fetching the first
  few months from the server each time. To achieve this, the code above specifies
  the first month to fetch in the ``month`` argument, passing this in as an
  ``$lte`` expression in the query.
- Rather than only yielding the post itself, the post's month is also yielded from
  the generator. This provides the ``month`` argument to be used in any
  subsequent calls to ``get_posts``.

There is one other issue that needs to be considered in selecting posts for
display: privacy settings. In order to handle privacy issues effectively, you'll
need use some filter functions on the posts generated above by ``get_posts``. The
first of these filters is used to determine whether to show a post when the user
is viewing his or her own wall:

.. code-block:: python

   def visible_on_own_wall(user, post):
       '''if poster is followed by user, post is visible'''
       for circle, users in user['circles'].items():
           if post['by']['id'] in users: return True
       return False

In addition to the user's wall, your social network might provide an "incoming"
page that contains all posts directed towards a user regardless of whether that
poster is followed by the user. In this case, you would use a block list
to filter posts:

.. code-block:: python

   def visible_on_own_incoming(user, post):
       '''if poster is not blocked by user, post is visible'''
       return post['by']['id'] not in user['blocked']

When viewing a news feed or another user's wall, the permission check is a bit
different based on the post's ``circles`` property:

.. code-block:: python

   def visible_post(user, post):
       if post['circles'] == ['*public*']:
           # public posts always visible
           return True
       circles_user_is_in = set(
           user['followers'].get(post['by']['id'] []))
       if not circles_user_is_in:
           # user is not circled by poster; post is invisible
           return False
       if post['circles'] == ['*circles*']:
           # post is public to all followed users; post is visible
           return True
       for circle in post['circles']:
           if circle in circles_user_is_in:
               # User is in a circle receiving this post
               return True
       return False

Index Support
`````````````

In order to quickly retrieve the pages in the desired order, you'll need an index
on (``user_id``, ``month``) in both the ``social.news`` and ``social.wall``
collections.

.. code-block:: pycon

   >>> for collection in (db.social.news, db.social.wall):
   ...     collection.ensure_index([
   ...         ('user_id', 1),
   ...         ('month', -1)])

Commenting on a Post
~~~~~~~~~~~~~~~~~~~~

Other than viewing walls and news feeds, creating new posts is the next most
common action taken on social networks. To create a comment by ``user`` on a
given ``post`` containing the given ``text``, you'll need to execute code similar
to the following:

.. code-block:: python

   from datetime import datetime

   def comment(user, post_id, text):
       ts = datetime.utcnow()
       month = ts.strfime('%Y%m')
       comment = {
           'by': { 'id': user['id'], 'name': user['name'] }
           'ts': ts,
           'text': text }
       # Update the social.posts collection
       db.social.post.update(
           { '_id': post_id },
           { '$push': { 'comments': comment } } )
       # Update social.wall and social.news collections
       db.social.wall.update(
           { 'posts.id': post_id },
           { '$push': { 'comments': comment },
             '$inc': { 'comments_shown': 1 } },
           upsert=True,
           multi=True)
       db.social.news.update(
           { 'posts.id': _id },
           { '$push': { 'comments': comment },
             '$inc': { 'comments_shown': 1 } },
           upsert=True,
           multi=True)

.. note::

   One thing to note in this function is the presence of a couple of ``multi=True``
   update statements. Since these can potentially take quite a long time, this
   function is a good candidate for processing 'out of band' with the regular
   request-response flow of your application.

The code above can actually result in an unbounded number of comments being
inserted into the ``social.wall`` and ``social.news`` collections. To compensate
for this, you should periodically run the following update statement to truncate
the number of displayed comments and keep the size of the news and wall documents
manageable.:

.. code-block:: python

   COMMENTS_SHOWN = 3

   def truncate_extra_comments():
       db.social.news.update(
           { 'posts.comments_shown': { '$gt': COMMENTS_SHOWN } },
           { '$pop': { 'posts.$.comments': -1 },
             '$inc': { 'posts.$.comments_shown': -1 } },
           multi=True)
       db.social.wall.update(
           { 'posts.comments_shown': { '$gt': COMMENTS_SHOWN } },
           { '$pop': { 'posts.$.comments': -1 },
             '$inc': { 'posts.$.comments_shown': -1 } },
           multi=True)

Index Support
`````````````
In order to execute the updates to the ``social.news`` and ``social.wall``
collections show above efficiently, you'll need to be able to quickly locate both
of the following types of documents:

- Documents containing a given post
- Documents containing posts displaying too many comments

To quickly execute these updates, then, you'll need to create the following
indexes:

.. code-block:: pycon

   >>> for collection in (db.social.news, db.social.wall):
   ...     collection.ensure_index('posts.id')
   ...     collection.ensure_index('posts.comments_shown')

Creating a New Post
~~~~~~~~~~~~~~~~~~~

Creating a new post fills out the content-creation activities on a social
network:

.. code-block:: python

   from datetime import datetime

   def post(user, dest_user, type, detail, circles):
       ts = datetime.utcnow()
       month = ts.strfime('%Y%m')
       post = {
           'ts': ts,
           'by': { id: user['id'], name: user['name'] },
           'circles': circles,
           'type': type,
           'detail': detail,
           'comments': [] }
       # Update global post collection
       db.social.post.insert(post)
       # Copy to dest user's wall
       if user['id'] not in dest_user['blocked']:
           append_post(db.social.wall, [dest_user['id']], month, post)
       # Copy to followers' news feeds
       if circles == ['*public*']:
           dest_userids = set(user['followers'].keys())
       else:
           dest_userids = set()
           if circles == [ '*circles*' ]:
               circles = user['circles'].keys()
           for circle in circles:
               dest_userids.update(user['circles'][circle])
       append_post(db.social.news, dest_userids, month, post)

The basic sequence of operations in the code above is the following:

#. The post first saved into the "system of record," the ``social.post``
   collection.
#. The recipient's wall is updatd with the post.
#. The news feeds of everyone who is 'circled' in the post is updated with the
   post.

Updating a particular wall or group of news feeds is then accomplished using the
``append_post`` function:

.. code-block:: python

   def append_post(collection, dest_userids, month, post):
       collection.update(
           { 'user_id': { '$in': sorted(dest_userids) },
             'month': month },
           { '$push': { 'posts': post } },
           multi=True)

Index Support
`````````````

In order to quickly update the ``social.wall`` and ``social.news`` collections,
you'll once again need an index on both ``user_id`` and ``month``. This time,
however, the optimal order on the indexes is (``month``, ``user_id``). This is
due to the fact that updates to these collections will always be for the current
month; having month appear first in the index makes the index *right-aligned*,
requiring significantly less memory to store the active part of the index.

*However*, in this case, since you have already defined an index on (``user_id``,
 ``month``), which *must* be in that order so that you can do the sort on
 ``month``, adding a second index is unnecessary, and would end up actually using
 more RAM to maintain two indexes. So even though this particular operation would
 benefit from having an index on (``month``, ``user_id``), it's best to leave out
 any additional indexes here.

Maintaining the Social Graph
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In your social network, maintaining the social graph is an infrequent but
essential operation. The code to add a user ``other`` to the current user
``self``\'s circles, you'll need to run the following function:

.. code-block:: python

   def circle_user(self, other, circle):
       circles_path = 'circles.%s.%s' % (circle, other['_id'])
       db.social.user.update(
           { '_id': self['_id'] },
           { '$set': { circles_path: { 'name': other['name' ]} } })
       follower_circles = 'followers.%s.circles' % self['_id']
       follower_name = 'followers.%s.name' % self['_id']
       db.social.user.update(
           { '_id': other['_id'] },
           { '$push': { follower_circles: circle },
             '$set': { follower_name: self['name'] } })

Note that in this solution, previous posts of the ``other`` user are not added to
the ``self`` user's news feed or wall. To actually include these past posts would
be an expensive and complex operation, and goes beyond the scope of this use case.

Of course, you'll also need to support *removing* users from circles:

.. code-block:: python

   def uncircle_user(self, other, circle):
       circles_path = 'circles.%s.%s' % (circle, other['_id'])
       db.social.user.update(
           { '_id': self['_id'] },
           { '$unset': { circles_path: 1 } })
       follower_circles = 'followers.%s.circles' % self['_id']
       db.social.user.update(
           { '_id': other['_id'] },
           { '$pull': { follower_circles: circle } })
       # Special case -- 'other' is completely uncircled
       db.social.user.update(
           { '_id': other['_id'], follower_circles: {'$size': 0 } },
           { '$unset': { 'followers.' + self['_id' } }})

Index Support
`````````````

In both the circling and uncircling cases, the ``_id`` is included in the update
queries, so no additional indexes are required.

Sharding
--------

In order to scale beyond the capacity of a single replica set, you will need to
shard each of the collections mentioned above. Since the ``social.user``,
``social.wall``, and ``social.news`` collections contain documents which are
specific to a given user, the user's ``_id`` field is an appropriate shard key:

.. code-block:: pycon

   >>> db.command('shardcollection', 'social.user', {
   ...     'key': {'_id': 1 } } )
   { "collectionsharded": "social.user", "ok": 1 }
   >>> db.command('shardcollection', 'social.wall', {
   ...     'key': {'user_id': 1 } } )
   { "collectionsharded": "social.wall", "ok": 1 }
   >>> db.command('shardcollection', 'social.news', {
   ...     'key': {'user_id': 1 } } )
   { "collectionsharded": "social.news", "ok": 1 }

It turns out that using the posting user's ``_id`` is actually *not* the best
choice for a shard key for ``social.post``. This is due to the fact that queries
and updates to this table are done using the ``_id`` field, and sharding on
``by.id``, while tempting, would require these updates to be *broadcast* to all
shards. To shard the ``social.post`` collection on ``_id``, then, you'll need to
execute the following command:

   >>> db.command('shardcollection', 'social.post', {
   ...     'key': {'_id': 1 } } )
   { "collectionsharded": "social.post", "ok": 1 }

.. seealso:: ":doc:`/faq/sharding`" and the ":wiki:`Sharding` wiki
   page.
