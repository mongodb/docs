ref: x509-certificate-client
content: |

   Client certificate requirements:

   - A single Certificate Authority (CA) must issue the certificates
     for both the client and the server.
     
   - Each unique MongoDB user must have a unique certificate.

   - The x.509 certificate must *not* be expired.

     .. note:: 

        .. include:: /includes/extracts/4.4-changes-certificate-expiry-warning.rst

   - Client certificates must contain the following fields:

     .. code-block:: none

        keyUsage = digitalSignature
        extendedKeyUsage = clientAuth

   - At least one of the following client certificate attributes must be **different** 
     than the attributes in both the :setting:`net.tls.clusterFile` and 
     :setting:`net.tls.certificateKeyFile` server certificates:  
    
     - Organization (``O``)
     - Organizational Unit (``OU``)
     - Domain Component (``DC``)

     .. note:: 

        You can also disable the ``enforceUserClusterSeparation``
        parameter during startup to automatically disable the
        ``O/OU/DC`` check. This allows member certificates to
        authenticate as users stored in the ``$external`` database. 

   - The ``subject`` of a client x.509 certificate, which contains the 
     Distinguished Name (``DN``), must be **different** than the ``subject``\s 
     of :ref:`member x.509 certificates <x509-member-certificate>`. 
     If the MongoDB deployment has :parameter:`tlsX509ClusterAuthDNOverride` 
     set, the client x.509 certificate's subject must not match that value.

     .. important::  
    
        If a client x.509 certificate's subject matches the ``O``, ``OU``, and 
        ``DC`` attributes of the :ref:`x509-member-certificate` (or
        :parameter:`tlsX509ClusterAuthDNOverride`, if set) exactly, the client 
        connection is accepted, full permissions are granted, and a warning 
        message appears in the log. 
        
        Only :ref:`cluster member x509 certificates <x509-member-certificate>` 
        should use the same ``O``, ``OU``, and ``DC`` attribute combinations.



---
ref: x509-certificate-member
content: |

   Use member certificates to verify membership to a sharded 
   cluster or a replica set. Member certificate file paths are
   configured with the :setting:`net.tls.clusterFile` and
   :setting:`net.tls.certificateKeyFile` options. Members have the 
   following configuration requirements:

   .. include:: /includes/list-cluster-x509-requirements.rst

   .. note:: 

      If you disable the ``enforceUserClusterSeparation`` parameter, the
      following behaviors apply: 
   
      - The ``O/OU/DC`` check is disabled if ``clusterAuthMode`` is
        ``keyFile`` in your configuration file. This allows clients
        possessing member certificates to authenticate as users stored in
        the ``$external`` database. 
      - The server won't start if ``clusterAuthMode`` isn't ``keyFile`` in
        your configuration file. 

      .. include:: /includes/fact-enforce-user-cluster-separation-parameter.rst
   
      To set the ``enforceUserClusterSeparation`` parameter to
      ``false``, run the following command during startup: 

      .. code-block:: javascript

         mongod --setParameter enforceUserClusterSeparation=false

   The certificates have the following requirements:
   
   .. include:: /includes/list-tls-certificate-requirements.rst

---
ref: x509-member-auth-configuration
content: |

   You can use TLS for internal authentication between each member of
   your replica set (each :binary:`~bin.mongod` instance) or sharded
   cluster (each :binary:`~bin.mongod` and :binary:`~bin.mongos`
   instance).

   To use TLS for internal authentication, use the following settings:

   - :setting:`security.clusterAuthMode` or :option:`--clusterAuthMode
     <mongod --clusterAuthMode>` set to ``x509``

   - :setting:`net.tls.clusterFile` or :option:`--tlsClusterFile
     <mongod --clusterAuthMode>`

   :binary:`~bin.mongod` and :option:`mongos <mongos
   --tlsCertificateKeyFile>` instances use their certificate key files to
   prove their identity to clients, but certificate key files can also be used for
   membership authentication. If you do not specify a cluster file,
   members use their certificate key files for membership authentication.
   Specify the certificate key file with :setting:`net.tls.certificateKeyFile` or
   :option:`--tlsCertificateKeyFile <mongod --tlsCertificateKeyFile>`.

   To use the certificate key file for both client authentication and
   membership authentication, the certificate must either:

   - Omit ``extendedKeyUsage`` or
   - Specify ``extendedKeyUsage = serverAuth, clientAuth``

...
