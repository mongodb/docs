===================
Backup Preparations
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Before backing up your cluster or replica set, decide how to back up
the data and what data to back up. This page describes items you must
consider before starting a backup.

For an overview of how Backup works, see
:ref:`mms-backup-functional-overview`.

.. include:: /includes/extracts/backup-config-options.rst


.. _limits-of-backup:

Backup Sizing Recommendation
----------------------------

When sizing the backup of your data, MongoDB recommends keeping replica
set size to 2 TB or less of uncompressed data. If your data increases
beyond 2 TB, you should shard that database and keep each shard to 2 TB
or less of uncompressed data.

These size recommendations are a best practice, and are not due to a
limitation of the MongoDB database or |mms|.

Backup and restore can use great amounts of CPU, memory, storage and
network bandwidth.

.. example::

   Your stated network throughput is a theoretical maximum. That value
   doesn't account for sharing or throttling of network traffic.

   Consider the following scenario:

   - You want to back up a 2 TB database.
   - Your hosts support a 10 Gbps TCP connection from |mms| to its
     backup storage.
   - The network connection has very low packet loss and a low round
     trip delay time.

   A full backup of your data would take *more than 30 hours to
   complete*. [*]_

   This doesn't account for disk read and write speeds, which can be,
   at most, 3 Gbps reads and 1 Gbps writes for a single or mirrored
   NVMe storage device.

   If you
   :doc:`shard this database </tutorial/convert-replica-set-to-sharded-cluster>`
   into 4 shards, each shard runs its backup separately. This results
   in a backup that takes less than 8 hours to complete.

   .. [*] These throughput figures were calculated using the `Network Throughput Calculator <https://wintelguy.com/wanperf.pl>`__.

.. _snapshot-frequency-and-retention:

Snapshot Frequency and Retention Policy
---------------------------------------

.. only:: onprem

   By default, |mms| takes a base snapshot of your data every 24 hours.

.. only:: cloud

   By default, |mms| takes a base snapshot of your data every 6 hours.

If desired, administrators can change the frequency of base snapshots
to 6, 8, 12, or 24 hours. |mms| creates snapshots automatically on a
schedule; you cannot take snapshots on demand.

|mms| retains snapshots for the time periods listed in the following
table. If you terminate a backup, |mms| immediately deletes the
backup's snapshots.

.. only:: onprem

   .. list-table::
      :widths: 30 30 40
      :header-rows: 1

      * - Snapshot
        - Default Retention Policy
        - Maximum Retention Policy
      * - Base snapshot
        - 2 days
        - 5 days (30 days if frequency is 24 hours)
      * - Daily snapshot
        - 0 days
        - 1 year
      * - Weekly snapshot
        - 2 weeks
        - 1 year
      * - Monthly snapshot
        - 1 month
        - 7 years

.. only:: cloud

   .. list-table::
      :widths: 30 30 40
      :header-rows: 1

      * - Snapshot
        - Default Retention Policy
        - Maximum Retention Policy
      * - Base snapshot
        - 2 days
        - 5 days (30 days if frequency is 24 hours)
      * - Daily snapshot
        - 7 days
        - 1 year
      * - Weekly snapshot
        - 4 weeks
        - 1 year
      * - Monthly snapshot
        - 13 months
        - 7 years

.. include:: /includes/extracts/backup-preparations-pricing.rst

You can change a backed-up deployment's schedule through its
:guilabel:`Edit Snapshot Schedule` menu option, available through the
:guilabel:`Backup` page. Administrators can change snapshot frequency
and retention through the
:doc:`snapshotSchedule resource in the API </reference/api/snapshot-schedule>`.

.. _changing-reference-time:

Changing the reference time changes the time of the next scheduled
snapshot:

* If the new reference time is before the current reference time, the
  next snapshot occurs at the new reference time tomorrow. See
  the first two rows of the table below for examples.

* If the new reference time is after the current reference time, and
  you make the change before the current reference time, the next
  snapshot occurs at the new reference time today. See the third row
  of the table below for an example.

* If the new reference time is after the current reference time, but
  you make the change after the current reference time, the next
  snapshot occurs at the new reference time tomorrow. See the fourth
  row of the table below for an example.

.. list-table::
   :widths: 25 25 25 25
   :header-rows: 1

   * - Time of Change

     - Current Reference Time

     - New Reference Time

     - Time of Next Snapshot

   * - 08:00 UTC

     - 12:00 UTC

     - 10:00 UTC

     - 10:00 UTC tomorrow

   * - 13:00 UTC

     - 12:00 UTC

     - 10:00 UTC

     - 10:00 UTC tomorrow

   * - 08:00 UTC

     - 12:00 UTC

     - 14:00 UTC

     - 14:00 UTC today

   * - 13:00 UTC

     - 12:00 UTC

     - 14:00 UTC

     - 14:00 UTC tomorrow

If you change the schedule to save fewer snapshots, |mms| does **not**
delete existing snapshots to conform to the new schedule. To delete
unneeded snapshots, see :doc:`/tutorial/delete-backup-snapshots`.

Limits
~~~~~~

- |mms| does not backup deployments where the total number of
  collections on the deployment meets or exceeds ``100,000``.

- |mms| does not replicate index collection options.

Encryption
~~~~~~~~~~

.. include:: /includes/extracts/fact-encrypted-backups.rst

.. _4.2-backup-considerations:

Backup Considerations for Databases Running FCV 4.2
---------------------------------------------------

.. include:: /release-notes/release-advisories/advisories-v4.2-backup.rst

Backup Considerations for Databases not Running FCV 4.2
-------------------------------------------------------

.. important::

   .. include:: /includes/fact-backup-standalone-restriction.rst

The following considerations apply when your databases run any version
of MongoDB 4.0 or earlier or when they run MongoDB 4.2 with
``"featureCompatibilityVersion" : 4.0``

.. _namespaces-filter:

Namespaces Filter
~~~~~~~~~~~~~~~~~

The namespaces filter lets you specify which databases and collections
to back up. You create either a :guilabel:`Blacklist` of those to
exclude or a :guilabel:`Whitelist` of those to include. You make your
selections when starting a backup and can later edit them as needed. If
you change the filter in a way that adds data to your backup, a resync
is required.

Use the blacklist to prevent backup of collections that contain logging
data, caches, or other ephemeral data. Excluding these kinds of
databases and collections will allow you to reduce backup time and
costs. Using a blacklist is often preferable to using a whitelist as a
whitelist requires you to intentionally opt in to every namespace you
want backed up.

.. note::

   MongoDB deployments with ``"featureCompatibilityVersion" : 4.2``
   do not support namespaces filters.

.. _considerations-backup-storage-engine:

Storage Engine
~~~~~~~~~~~~~~

To backup MongoDB clusters, use the :ref:`WiredTiger storage engine <storage-wiredtiger>` storage engine.

If your current backing databases use MMAPv1, upgrade to WiredTiger:

* :manual:`Change Sharded Cluster to WiredTiger </tutorial/change-sharded-cluster-wiredtiger>`

* :manual:`Change Replica Set to Wired Tiger </tutorial/change-replica-set-wiredtiger>`

MongoDB 4.2 removes MMAPv1 storage. To learn more about storage
engines, see :manual:`Storage </core/storage>` in the MongoDB manual.

Resyncing Production Deployments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For production deployments, it is recommended that as a best practice
you periodically (annually) :doc:`resync </tutorial/resync-backup>` all
backed-up replica sets. When you resync, data is read from a secondary
in each replica set. During resync, no new snapshots are generated.

You may also want to resync your backup after:

- A reduction in data size, such that the size on disk of |mms|'s copy
  of the data is also reduced. This scenario also includes if you:

  - Have a :manual:`TTL index </core/index-ttl>` in place, which
    periodically deletes documents.

  - :manual:`Drop a collection </reference/method/db.collection.drop>`
    (MMAPv1 only).

  - Run a :term:`sharded cluster <sharded cluster>`, and there have
    been a lot of chunks moved off a particular shard.

- A switch in storage engines, if you want |mms| to provide snapshots
  in the new storage engine format.

- A manual build of an index on a replica set in a rolling fashion
  (as per :manual:`Build Indexes on Replica Sets
  </tutorial/build-indexes-on-replica-sets>` in the MongoDB manual).

.. _checkpoint:

Checkpoints
~~~~~~~~~~~

For :term:`sharded clusters <sharded cluster>`, checkpoints provide
additional restore points between snapshots. With
checkpoints enabled, |mms| creates restoration points at
configurable intervals of every 15, 30 or 60 minutes between
snapshots. To enable checkpoints, see :ref:`enable checkpoints
<enable-cluster-checkpoints>`.

To create a checkpoint, |mms| stops the :term:`balancer`
and inserts a token into the :term:`oplog` of each
:term:`shard` and :term:`config server` in the cluster. These
checkpoint tokens are lightweight and do not have a consequential
impact on performance or disk use.

Backup does not require checkpoints, and they are disabled by default.

Restoring from a checkpoint requires |mms| to apply the oplog of
each shard and config server to the last snapshot captured before the
checkpoint. Restoration from a checkpoint takes longer than
restoration from a snapshot.

.. _snapshot-while-balancer-enabled:

Snapshots when Agent Cannot Stop Balancer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For :term:`sharded clusters <sharded cluster>`, |mms| disables the
:term:`balancer` before taking a cluster snapshot. In certain
situations, such as a long migration or no running :program:`mongos`,
|mms| tries to disable the balancer but cannot. In such cases, |mms|
will continue to take cluster snapshots but will flag the snapshots
with a warning that data may be incomplete and/or inconsistent. Cluster
snapshots taken during an active balancing operation run the risk of
data loss or orphaned data.

Snapshots when Agent Cannot Contact a ``mongod``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For :term:`sharded clusters <sharded cluster>`, if the {+bagent+}
cannot reach a :program:`mongod` process, whether a shard or config
server, then the agent cannot insert a synchronization :term:`oplog`
token. If this happens, |mms| does not create the snapshot and
displays a warning message.
