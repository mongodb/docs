.. meta::
   :robots: noindex, nosnippet

.. _intro-backend-and-web:

=================================================================
Introduction to Atlas App Services for Backend and Web Developers
=================================================================

.. meta:: 
   :description: Discover how Atlas App Services can help you solve common server-client development challenges.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

As a backend developer, you can use Atlas App Services to rapidly develop cloud-based
applications. App Services Apps can react to changes in your `MongoDB Atlas
<https://www.mongodb.com/docs/atlas/getting-started/?tck=docs_realm>`_ data,
connect that data to other systems, and scale to meet demand. App Services
does this without the need to manage database and server infrastructure.

As a web developer, you have to deal with lots of overhead when sending 
data from a server to the browser. This includes things like authentication 
and data validation. And then the application has to be scalable and secure. 
Many libraries and frameworks exist to provide these services.
Selecting the best ones for your project requires deep understanding of the tradeoffs.

As a mobile app developer, syncing data across devices poses challenges. 
You might write a lot of custom conflict resolution code yourself,
or you might use a platform-specific backend like CloudKit that's not designed 
for developing cross-platform applications. Atlas Device Sync provides an 
offline-first, cross-platform solution for syncing data between a backend and
mobile devices. When you combine this with App Services's authentication and data 
validation, you solve a host of common mobile app development issues.

App Services is a serverless application backend that streamlines solving these 
common challenges. App Services provides configurable functions, integrated data access, and security rules.
With App Services, you can focus on building unique features instead of boilerplate backend code.

Watch our `Overview of App Services 
<https://learn.mongodb.com/learn/course/overview-of-atlas-app-services/learning-byte/learn>`__ 
Learning Byte to learn more. 

What Problem Does App Services Solve?
-------------------------------------

It takes time, resources, and expertise to build, administer, and maintain
backend infrastructure. However, a lot of these features are similar across applications.
App Services manages the backend infrastructure and user management for you.
This frees you to focus on the features that makes your app special, not boilerplate code.

App Services is:

Serverless:
  - Deploy server-side applications without having to set up and manage server infrastructure. 
    App Services includes provisioning, deployment, operating systems, web servers, logging, backups, and redundancy.
  - Run cloud-based Atlas Functions that can crunch data or interact with Node.js modules.
  - Skip writing an authentication API on top of your App Services instance.
    Authenticated clients can interact with parts of the database based on their permissions.

Dynamic and responsive:
  - React to data changes in MongoDB Atlas, process data from HTTPS endpoints,
    or run Atlas Functions on a schedule with 
    Atlas Triggers.
  - Get up and running quickly for free, then scale according to the demands of your application.
  - Pay for and receive only the exact amount of compute you need at any given time
    with usage-based pricing. Usage under a certain amount per day is always free.

Simply secure:
  - Let users log in with familiar authentication providers that are built into App Services.
  - Control which users may read and write data on a per-field basis with
    :ref:`role-based permissions <roles>` that you can define declaratively or
    with a function.
  - Enforce data integrity by defining :ref:`validation logic
    <schemas>`.

Synchronized:
  - Seamlessly sync data across devices with Atlas Device Sync .
  - Avoid writing complex synchronization logic with the :ref:`Atlas Device SDK <realm-sdks>`.

.. _intro-web-users:
.. _intro-user-authentication:

User Authentication and Management
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Secure user authentication is essential for most apps. Some apps authenticate
users with traditional email/password combinations. Others use API keys or third-party
authentication providers like Facebook and Google. These methods often require a lot of 
complex boilerplate code.

App Services provides built-in user management and authentication methods. These
features encapsulate complexity and make it easy to integrate third-party
authentication providers. You can enable authentication providers in your
server-side configuration then immediately log in from any client application
using a Realm SDK.

To learn more about authentication in App Services, see :ref:`users-and-authentication`.

.. _intro-web-schema:

Schema Validation and Data Access Rules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Modern applications require that data is available using consistent types and formats.
Data consistency guarantees that all the application's components can work together.
It's also important to make sure that any given piece of data is only accessible
to an authorized user.  For example, you might grant a user access
to only their own data.

App Services validates data with a schema you define in the 
`JSON schema <https://json-schema.org/>`__ standard. 
A schema serves as the source of truth for defining data types in your application.
App Services also uses the schema to map data between your application and a 
`MongoDB Atlas collection <https://www.mongodb.com/docs/atlas/atlas-ui/collections/?tck=docs_realm>`__. 

You can also configure App Services to secure data with role-based data access rules.
These rules determine each user's access to every document for every request.
A user can only insert, read, or modify data if both they and the document
meet pre-defined conditions.

To learn more about defining a schema and access rules for your data, see
:ref:`collection rules <mongodb-rules>`.

.. _intro-web-functions:

Event-Driven Serverless Functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Many applications require that some business logic runs on a server. Usually this
logic deals with sensitive user data or interacting with external services. Apps might
also need to respond in real time when something happens in the app or in an external service.

App Services lets you define serverless JavaScript functions called Atlas Functions.
You can use Atlas Functions for the following common backend use cases:

- Call from client applications with the Atlas Device SDK for Web.
- Execute Atlas Functions in response to trigger events, like an update to a document in MongoDB or at a scheduled time.
- HTTPS endpoints that execute a function in response to external applications.

To learn more about defining and using serverless functions, see
:ref:`functions` and :ref:`triggers`.

.. _intro-web-query:

Secure Client-Side Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~

Developers need efficient, secure data access.
If the data is on a server, you need an API to access the data and prevent unauthorized access.

The SDKs provide a secure MongoDB client to interact with data
in your :ref:`MongoDB data sources <data-sources>`.

App Services's server-side rules ensures that users only read and modify permitted documents.
Rules consist of one or more user roles for each collection. A role determines if
a given user has permission to access and edit a document. App Services determines a role
for each document in every request. It then enforces the role's permissions before responding.

.. _intro-web-mql:

Client-Side MongoDB Queries
```````````````````````````

Traditionally developers query the database on the server and access the server
from the client through a HTTP API. This requires more developer resources and lacks
the flexibility of directly querying a database.

App Services and the Atlas Device SDK includes MongoDB Data Access,
an API that lets you access MongoDB Atlas from the client using
the :manual:`Query API </tutorial/query-documents>`.
You can query Atlas like you're using a database driver and App Services enforces
:ref:`data access rules <intro-web-schema>` for all requests.

The following SDKs let you query Atlas with MongoDB Data Access from client apps:

- :ref:`Query MongoDB - Java SDK <java-mongodb-data-access>`
- :ref:`Query MongoDB - .NET SDK <dotnet-mongodb-data-access>`
- :ref:`Query MongoDB - Node.js SDK <node-mongodb-data-access>`
- :ref:`Query MongoDB - React Native SDK <react-native-mongodb-data-access>`
- :ref:`Query MongoDB - Swift SDK <ios-mongodb-data-access>`
- :ref:`Query MongoDB - Web SDK <web-mongodb-data-access>`

.. _intro-device-sync:

Synchronize Data Across Devices
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Synchronizing data is a hard problem for mobile app developers. Device Sync
provides offline-first sync capabilities for your mobile application. 
Client applications use an offline-first persistence layer to persist data to
the device. When the device has a network connection, Sync seamlessly sends the
data to the App. The App stores the data to a linked :ref:`MongoDB Atlas data
source <data-sources>`, and updates the data on other client devices.

Device Sync provides :ref:`conflict resolution <conflict-resolution>` to
handle multiple users updating the same data. When combined with :ref:`user 
authentication and management <intro-user-authentication>` and :ref:`schema 
validation and data access <intro-web-schema>`, Device Sync provides a secure
way for your mobile clients to sync data across devices and with the cloud.

Get Started with App Services
-----------------------------

Prebuilt Applications
~~~~~~~~~~~~~~~~~~~~~

To explore a prebuilt app that you can customize, create a :ref:`template 
app <template-apps>`. Template applications are working apps that use App Services 
services to do things like:

- Use Sync to synchronize data between mobile clients and the linked 
  MongoDB Atlas collection.
- Host a Todo web app using :ref:`Atlas Device SDK for Web <web-intro>`
- Manage event-driven :ref:`Database Triggers <database-trigger>` 
  to update views in a separate collection

Template apps are working apps you can run and change to experiment with 
App Services. These apps are a good choice for developers who prefer to learn by 
experimentation, versus the tutorials, which provide a deeper, step-by-step 
process for building apps.

Tutorials
~~~~~~~~~

Check out our :ref:`tutorials <app-services-get-started-tutorials>` to learn more about how to build 
App Services Applications. Tutorials start with our :ref:`Template Apps <template-apps>` 
and and then walk you through building additional features powered by App Services, 
including Device Sync and Role-based Permissions.

Summary
-------

- App Services is a serverless application platform that makes it easy to deploy
  and scale.
- You can build an app with custom logic via functions and triggers,
  custom permissions via rules, and authentication via third-party SSO.
- App Services's built-in :ref:`authentication system <users-and-authentication>`
  simplifies user data access.
  You can add users to your app and define :ref:`permissions
  <permissions>` that control who can read and write data.
- Backend use cases for App Services include:

  - Crunching data
  - Reacting to data changes in MongoDB Atlas
  - Interacting with third-party services
