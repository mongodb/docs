.. index:: write concern
.. _write-concern:
.. _write-operations-write-concern:

=============
Write Concern
=============

.. default-domain:: mongodb

.. include:: /includes/introduction-write-concern.rst

.. versionchanged:: 2.6
   A new protocol for :ref:`write operations
   <rel-notes-write-operations>` integrates write concern with the
   write operations.

For details on write concern configurations, see
:doc:`/reference/write-concern`.

Considerations
--------------

Default Write Concern
~~~~~~~~~~~~~~~~~~~~~

The :program:`mongo` shell and the MongoDB drivers use
:ref:`write-concern-acknowledged` as the default write concern.

See :ref:`write-concern-acknowledged` for more information, including
when this write concern became the default.

Read Isolation
~~~~~~~~~~~~~~

.. include:: /includes/fact-write-concern-read-uncommitted.rst

Timeouts
~~~~~~~~

Clients can set a :ref:`wtimeout <wc-wtimeout>` value as part of a
:ref:`replica acknowledged <replica-set-write-concern>` write
concern. If the write concern is not satisfied in the specified
interval, the operation returns an error, even if the write concern
will eventually succeed.

MongoDB does not "rollback" or undo modifications made before the
``wtimeout`` interval expired.

Write Concern Levels
--------------------

MongoDB has the following levels of conceptual write
concern, listed from weakest to strongest:

.. _write-concern-unacknowledged:

Unacknowledged
~~~~~~~~~~~~~~

With an *unacknowledged* write concern, MongoDB does not acknowledge
the receipt of write operations. *Unacknowledged* is similar to
*errors ignored*; however, drivers will attempt to receive and handle
network errors when possible. The driver's ability to detect network
errors depends on the system's networking configuration.

Before the releases outlined in :ref:`driver-write-concern-change`,
this was the default write concern.

.. include:: /images/crud-write-concern-unack.rst

.. _write-concern-acknowledged:

Acknowledged
~~~~~~~~~~~~

With a receipt *acknowledged* write concern, the :program:`mongod`
confirms the receipt of the write operation. *Acknowledged* write
concern allows clients to catch network, duplicate key, and other
errors.

MongoDB uses the *acknowledged* write concern by default starting in
the driver releases outlined in :ref:`write-concern-change-releases`.

.. versionchanged:: 2.6
   The :program:`mongo` shell write methods now incorporates the
   :doc:`write concern </core/write-concern>` in the write methods and
   provide the default write concern whether run interactively or in a
   script. See :ref:`write-methods-incompatibility` for details.

.. include:: /images/crud-write-concern-ack.rst

.. _write-concern-replica-journaled:

Journaled
~~~~~~~~~

With a *journaled* write concern, the MongoDB acknowledges the write
operation only after committing the data to the :term:`journal`. This
write concern ensures that MongoDB can recover the data following a
shutdown or power interruption.

You must have journaling enabled to use this write concern.

With a *journaled* write concern, write operations must wait for the next
journal commit. To reduce latency for these operations, MongoDB
also increases the frequency that it commits operations to the journal. See
:setting:`~storage.journal.commitIntervalMs` for more information.

.. include:: /images/crud-write-concern-journal.rst

.. include:: /includes/note-write-concern-journaled-replication.rst

.. _write-concern-replica-acknowledged:
.. _replica-set-write-concern:

Replica Acknowledged
~~~~~~~~~~~~~~~~~~~~

:term:`Replica sets <replica set>` present additional considerations
with regards to write concern.. The default write concern only requires
acknowledgement from the primary.

With *replica acknowledged* write concern, you can guarantee that the
write operation propagates to additional members of the replica set.
See :doc:`Write Concern for Replica Sets <replica-set-write-concern>`
for more information.

.. include:: /images/crud-write-concern-w2.rst

.. include:: /includes/note-write-concern-journaled-replication.rst

.. seealso:: :doc:`/reference/write-concern`
