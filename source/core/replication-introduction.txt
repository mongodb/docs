========================
Replication Introduction
========================

.. default-domain:: mongodb

Replication protects a database from data loss by copying its data to
multiple, different computer locations, which ensures that you can
access the database even if one location is unavailable, even if the
main database computer is unavailable. In MongoDB, production
deployments use replication.

Replication also guarantees that *changes* to information are never lost
by copying the list of changes to all computer locations that hold the
database. Should the main database location become unavailable it has
made all current changes, the list exists on other computers, allowing
the changes still to be made.

Finally, replication increases the speed of retrieving database
information. Requests for information can go to any one of the multiple
database instances, thus avoiding traffic slowdowns at a given instance.

MongoDB provides replication by storing the database in a main computer
location, called a ``primary``, and copying the database to multiple
additional computer locations, called ``secondaries``. This
configuration is called a ``replica set``. Each replica set has a
:term:`primary` and one or more :term:`secondaries <secondary>`.

When a user changes data in the database, MongoDB applies the changes on
the primary in the order the user made the changes. This keeps the data
on the primary consistent. MongoDB applies the changes on the
secondaries asynchronously.

Replica Set Architecture
------------------------

A replica set consists of at least three :program:`mongod` instances: a
:term:`primary` and either two :term:`secondaries <secondary>` or a
secondary and an :term:`arbiter`. The primary accepts all writes for the
set. All members accept reads. Secondaries replicate from the primary by
asynchronously reading and applying the writes.

Failover and Recovery
---------------------

Replica sets provide automatic failover in the event of an outage. If a
primary becomes unavailable, the replica set automatically promotes a
secondary. The data on the new primary is now the most current in the
set. All members resynchronize when connecting to the new primary. If
the original primary comes back up, it does so as a secondary and begins
syncing off the new primary.

For More Information
--------------------

For more information about replica sets, see :doc:`/replication`.
