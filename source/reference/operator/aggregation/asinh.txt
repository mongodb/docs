====================
$asinh (aggregation)
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. expression:: $asinh 

   .. versionadded:: 4.2

   Returns the inverse hyperbolic sine (hyperbolic arc sine) of
   a value.

   :expression:`$asinh` has the following syntax:

   .. code-block:: javascript

      { $asinh: <expression> }

   :expression:`$asinh` takes any valid :ref:`expression
   <aggregation-expressions>` that resolves to a number.

   :expression:`$asinh` returns values in radians. Use
   :expression:`$radiansToDegrees` operator to convert the output value
   from radians to degrees.

   By default :expression:`$asinh` returns values as a ``double``. 
   :expression:`$asinh` can also return values as a
   :ref:`128-bit decimal <shell-type-decimal>`
   as long as the ``<expression>`` resolves to a 128-bit decimal value. 

   For more information on expressions, see 
   :ref:`aggregation-expressions`.

Behavior
--------

``null``, ``NaN``, and ``+/- Infinity``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the argument resolves to a value of ``null`` or refers to a field
that is missing, :expression:`$asinh` returns ``null``. If the
argument resolves to ``NaN``, :expression:`$asinh` returns ``NaN``.
If the argument resolves to negative or positive infinity, 
:expression:`$asinh` returns negative or positive infinity respectively.

.. list-table::
   :header-rows: 1
   :widths: 85 15

   * - Example
     - Results

   * - ``{ $asinh: NaN }``
     - ``NaN``

   * - ``{ $asinh: null }``
     - ``null``

   * - ``{ $asinh : Infinity}``
     - ``Infinity`` 
   
   * - ``{ $asinh : -Infinity }``
     - ``-Infinity``

Example
-------

.. tabs::

   tabs:

     - id: degrees
       name: Inverse Hyperbolic Sine of Value in Degrees
       content: |

         The ``trigonometry`` collection contains a document that
         stores a value along the ``x`` axis of a 2-D graph:

         .. code-block:: shell

            {
              "_id" : ObjectId("5c50782193f833234ba90d85"),
              "x-coordinate" : NumberDecimal("1")
            }

         The following aggregation operation uses the
         :expression:`$asinh` expression to calculate inverse hyperbolic
         sine of ``x-coordinate`` and add it to the input document using 
         the :pipeline:`$addFields` pipeline stage. 

         .. code-block:: shell

            db.trigonometry.aggregate([
              { 
                $addFields : {
                  "y-coordinate" : {
                    $radiansToDegrees : { $asinh : "$x-coordinate" }
                  }
                }
              }
            ])

         The :expression:`$radiansToDegrees` expression converts the
         radian value returned by :expression:`$asinh` to the equivalent
         value in degrees.

         The command returns the following output:

         .. code-block:: shell
            :copyable: false
 
            {
              "_id" : ObjectId("5c50782193f833234ba90d85"),
              "x-coordinate" : NumberDecimal("1"),
              "y-coordinate" : NumberDecimal("50.49898671052621144221476300417157")
            }

         Since ``x-coordinate`` is stored as a
         :ref:`128-bit decimal <shell-type-decimal>`, the output of 
         :expression:`$asinh` is a 128-bit decimal. 

     - id: radians
       name: Inverse Hyperbolic Sine of Value in Radians
       content: |

         The ``trigonometry`` collection contains a document that
         stores a value along the ``x`` axis of a 2-D graph:

         .. code-block:: shell

            {
              "_id" : ObjectId("5c50782193f833234ba90d85"),
              "x-coordinate" : NumberDecimal("1")
            }

         The following aggregation operation uses the
         :expression:`$asinh` expression to calculate inverse hyperbolic
         sine of ``x-coordinate`` and add it to the input document using 
         the :pipeline:`$addFields` pipeline stage. 

         .. code-block:: shell

            db.trigonometry.aggregate([
              { 
                $addFields : {
                  "y-coordinate" : {
                    $asinh : "$x-coordinate"
                  }
                }
              }
            ])

         The command returns the following output:

         .. code-block:: shell
            :copyable: false

            {
              "_id" : ObjectId("5c50782193f833234ba90d85"),
              "x-coordinate" : NumberDecimal("1"),
              "y-coordinate" : NumberDecimal("1.818446459232066823483698963560709")
            }

         Since ``x-coordinate`` is stored as a
         :ref:`128-bit decimal <shell-type-decimal>`, the output of 
         :expression:`$asinh` is a 128-bit decimal. 
