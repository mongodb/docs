.. _mastra:

=============================
Integrate MongoDB with Mastra
=============================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. facet::
   :name: programming_language
   :values: javascript/typescript

.. meta::
   :description: Integrate MongoDB with Mastra, the TypeScript Agent Framework, to build AI agents and RAG applications.
   :keywords: RAG, retrieval, mastra, vector database, vector search, semantic search, AI agent, TypeScript, integration, community

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can integrate MongoDB with `Mastra <https://mastra.ai/>`__ to build AI agents. 
Mastra is an open-source TypeScript agent framework that 
provides primitives for building AI applications, including workflows,
RAG, and evals.

.. important::

   This integration is :ref:`community-maintained <community-maintained>`. To learn more, see
   `Mastra documentation <https://mastra.ai/en/docs>`__ or the 
   :github:`Mastra GitHub repository <mastra-ai/mastra>`.

.. _mastra-overview:

Overview
--------

You can use MongoDB with Mastra to build AI agents. By combining 
{+avs+} with Mastra's agent framework, you can implement
the following capabilities for your agents:

- Store and retrieve vector embeddings using MongoDB as your vector database
- Filter your vector search results using MongoDB query syntax
- Implement |rag| as a tool in your agents
- Store your agent's memory in MongoDB

Installation and Setup
----------------------

To use MongoDB with Mastra, install the ``@mastra/mongodb`` package:

.. literalinclude:: /includes/ai-integrations/mastra/install-mongodb-package.sh
   :language: bash

To get started with Mastra and learn how to create a project, 
see `Install Mastra <https://mastra.ai/en/docs/getting-started/installation>`__.

.. _mastra-vector-store:

Vector Store
------------

MongoDB is a `supported database <https://mastra.ai/en/docs/rag/vector-databases#supported-databases>`__ in Mastra.
The ``MongoDBVector`` class allows you to store and retrieve vector embeddings 
from MongoDB. You can use this component to implement |rag| by storing 
embeddings from your data and retrieving them using {+avs+}.

This component requires that you create an :ref:`{+avs+} Index <avs-types-vector-search>`.

Usage
~~~~~

To use the MongoDB vector store with Mastra, import the ``MongoDBVector`` class,
create an object with the class, and specify your MongoDB connection details.
For example:

.. literalinclude:: /includes/ai-integrations/mastra/instantiate-vector-store.ts
   :language: typescript

Methods
~~~~~~~

This section highlights 
the most relevant methods for working with MongoDB as a vector store.
For a full list of methods, see the `Mastra documentation 
<https://mastra.ai/en/reference/vectors/mongodb>`__. 

.. tabs::

   .. tab:: createIndex()
      :tabid: create-index

      Before you can search your embeddings, you must create a vector search index on your collection.
      The ``dimension`` parameter must match the number of dimensions required by your embedding model.

      .. literalinclude:: /includes/ai-integrations/mastra/create-index.ts
         :language: typescript

   .. tab:: upsert()
      :tabid: upsert

      After creating an index, you can store vector embeddings with associated metadata.
      For a complete example, see the `Mastra upsert embeddings example <https://mastra.ai/en/examples/rag/upsert/upsert-embeddings>`__.

      .. literalinclude:: /includes/ai-integrations/mastra/upsert-embeddings.ts
         :language: typescript

   .. tab:: query()
      :tabid: query

      To retrieve semantically similar documents, first convert your query to an embedding, then query the vector store.
      To learn more, see `Retrieval in Mastra <https://mastra.ai/en/docs/rag/retrieval>`__.

      .. literalinclude:: /includes/ai-integrations/mastra/query-vector-store.ts
         :language: typescript

.. _mastra-metadata-filtering:

Metadata Filtering
~~~~~~~~~~~~~~~~~~

The MongoDB vector store supports metadata filtering
on your vector search query results:

- Use the Mastra `query syntax <https://mastra.ai/en/reference/rag/metadata-filters>`__, 
  without limitations.
- Use standard comparison, array, logical, and element operators
- Use mested fields and arrays in metadata
- Filter on metadata and the contents of the original documents

The following usage example demonstrates the filtering syntax:

.. literalinclude:: /includes/ai-integrations/mastra/metadata-filtering-example.ts
   :language: typescript

.. tip::

   For optimal performance, create indexes on metadata fields that you 
   frequently filter on. To learn more, see :ref:`{+avs+} Indexes <avs-types-filter>`.

To learn more, see 
`Metadata Filters <https://mastra.ai/en/reference/rag/metadata-filters#mongodb>`__.

.. _mastra-rag-agents:

RAG with AI Agents
------------------

You can use MongoDB as a vector store within 
`Mastra AI agents <https://mastra.ai/en/docs/agents/overview>`__ to implement 
:ref:`agentic RAG <agentic-rag>`. This allows your agents to use MongoDB 
vector search as a tool to help complete tasks.

Mastra also provides a ``MONGODB_PROMPT`` constant that you can include in your 
agent instructions to optimize how the agent uses MongoDB for retrieval.
To learn more, see `Vector Store Prompts <https://mastra.ai/en/docs/rag/retrieval#vector-store-prompts>`__.

Usage
~~~~~

The following example shows how to create an AI agent with 
RAG capabilities using MongoDB as a vector store:

.. literalinclude:: /includes/ai-integrations/mastra/rag-agent.ts
   :language: typescript

Memory with AI Agents
---------------------

You can use Mastra's memory system with MongoDB as the storage backend.
This allows you your agent to remember past interactions and use that 
information to inform future decisions.

For a complete tutorial, see `Memory with MongoDB 
<https://mastra.ai/en/examples/memory/memory-with-mongodb>`__.

Usage
~~~~~

The following example demonstrates how to use memory with AI agents.
This example uses ``memoryOptions`` to scope recall for the request.
Set ``lastMessages: 5`` to limit recency-based recall. Use 
``semanticRecall`` to fetch the ``topK: 3`` most relevant messages,
including ``messageRange: 2`` neighboring messages for context around
each match.

.. literalinclude:: /includes/ai-integrations/mastra/memory-usage-example.ts
   :language: typescript

Additional Resources
--------------------

To learn more about using Mastra with MongoDB, see:

- `Mastra MongoDB Vector Store Reference <https://mastra.ai/en/reference/vectors/mongodb>`__
- `Mastra Vector Databases Documentation <https://mastra.ai/en/docs/rag/vector-databases>`__
- `Mastra Memory with MongoDB <https://mastra.ai/en/examples/memory/memory-with-mongodb>`__.
- `Mastra RAG Documentation <https://mastra.ai/en/docs/rag/overview>`__
- `Mastra GitHub Repository <https://github.com/mastra-ai/mastra>`__
