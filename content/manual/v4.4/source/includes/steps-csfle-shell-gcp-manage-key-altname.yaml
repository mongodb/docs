level: 4
ref: launch-mongo-shell
title: "Launch the ``mongo`` Shell."
stepnum: 1
source:
  file: steps-csfle-shell-gcp-create-key.yaml
  ref: launch-mongo-shell
---
level: 4
ref: create-encryption-configuration
title: "Create the Encryption Configuration."
stepnum: 2
source:
  file: steps-csfle-shell-gcp-create-key.yaml
  ref: create-encryption-configuration
---
level: 4
ref: connect-with-encryption
title: "Connect with Encryption Support."
stepnum: 3
source:
  file: steps-csfle-shell-gcp-create-key.yaml
  ref: connect-with-encryption
---
level: 4
ref: create-keyvault-object
title: "Create the Key Vault Object."
stepnum: 4
source:
  file: steps-csfle-shell-gcp-create-key.yaml
  ref: create-keyvault-object
---
level: 4
ref: modify-data-key
title: "Manage the Data Encryption Key's Alternate Name."
stepnum: 5
content: |

  Use the steps below to either add or remove an existing Key
  Alternate Name.

  Add Key Alternate Name
    .. important::

       Client-side field level encryption depends on server-enforced
       uniqueness of key alternate names. Validate that a unique
       index exists on ``keyAltNames`` **prior** to adding a new
       key alternate name. If the unique index was dropped, you *must* 
       :ref:`re-create <index-unique-create>` it prior to adding
       any key alternate names.

    Use the :method:`KeyVault.addKeyAlternateName()` to add a new
    alternate name to a data encryption key:

    .. code-block:: javascript  
  
       keyVault.addKeyAlternateName(  
         UUID("<Replace Me With The UUID Of The Key To Modify"),
         "NewKeyAltNameForMyFirstCSFLEDataKey"
       )

    Where:

    - The first parameter *must* be the :abbr:`UUID
      (Universally unique identifier)` of the data encryption key to
      modify.

    - The second parameter *must* be a unique string.
      :method:`getKeyVault()` creates a unique index on ``keyAltNames``
      to enforce uniqueness of key alternate names.

    :method:`KeyVault.addKeyAlternateName()` returns the data encryption
    key document *prior* to modification. Use
    :method:`KeyVault.getKey()` to retrieve the modified data encryption
    key.
  
  Remove Key Alternate Name
    Use the :method:`KeyVault.removeKeyAlternateName()` to remove 
    a key alternate name from a data encryption key:
    
    .. code-block:: javascript

        keyVault.removeKeyAlternateName(
          UUID("<Replace Me With The UUID Of The Key To Modify"),
          "NewKeyAltNameForMyFirstCSFLEDataKey"
        )

    Where:

    - The first parameter *must* be the :abbr:`UUID
      (Universally unique identifier)` of the data encryption key to
      modify.

    - The second parameter *must* be a string key alternate name.

    :method:`KeyVault.removeKeyAlternateName()` returns the data
    encryption key *prior* to modification. Use
    :method:`KeyVault.getKey()` to retrieve the modified data encryption
    key.
...
