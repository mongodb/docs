.. _c-logging:

==================
Structured Logging
==================

.. meta::
   :description: Learn how to configure structured logging with the MongoDB C Driver to observe application activities with different levels of detail.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to configure
structured **logging** for your application. Logging allows you to
view a discrete, event-based log of driver activities.

Loggers log messages at a severity, or verbosity, level that you
can specify. When you enable logging in your application,
you can receive information about your application's activities at
different levels of detail. The driver allows you to log information categorized
at the following severity levels:

- ``emergency``
- ``alert``
- ``critical``
- ``error``
- ``warn``
- ``notice``
- ``info``
- ``debug``
- ``trace``
- ``off``

The preceding list is ordered by decreasing severity level, with ``emergency`` as the
highest severity level. When you specify a severity level, the driver also logs all
messages with higher severity levels. For example, if you set the log level to
``critical``, the driver will also log messages with ``emergency`` and ``alert`` severity
levels.

The lower the severity level you specify, the more information the driver logs,
which might impact the performance of your application.

.. tip::

   To learn more about logging severity levels, see the Wikipedia entry on
   the :wikipedia:`Syslog standard for message logging <Syslog#Severity_level>`.

Logging Options
---------------

Structured log settings are tracked explicitly by a ``mongoc_structured_log_opts_t``
instance. The {+driver-short+} takes default settings from environment variables and
offers additional optional programmatic configuration. Use
``mongoc_structured_log_opts_new()`` to specify environment variables. To learn more about
``mongoc_structured_log_opts_t``, see
`mongoc_structured_log_opts_t <{+api-libmongoc+}/mongoc_structured_log_opts_t.html>`__ in the libmongoc API
documentation.

Normally, environment variables provide defaults that can be overridden programmatically.
To request the opposite behavior, where your programmatic defaults can be overridden by
the environment, use the ``mongoc_structured_log_opts_set_max_levels_from_env()``
function. Structured log messages might be filtered in arbitrary ways by the handler, but
as both a performance optimization and a convenience, a built-in filter limits the maximum
log level of reported messages with a per-component setting. To learn more about
``mongoc_structured_log_opts_set_max_levels_from_env()``, see
`mongoc_structured_log_opts_set_max_levels_from_env() <{+api-libmongoc+}/mongoc_structured_log_opts_set_max_levels_from_env.html>`__ in the
libmongoc API documentation.

Implement Logging
-----------------

The following code block implements logging by doing the following:

- Creates a ``mongoc_structured_log_opts_t`` type to configure logging
- Sets the desired log level to ``INFO``
- Provides a handler function to process log messages
- Applies the logging options to your client or client pool by using the ``mongoc_client_set_structured_log_opts()`` function

.. literalinclude:: /includes/logging.c
   :start-after: // begin-logger
   :end-before: // end-logger
   :language: c
   :dedent:

If you run your application and log against connections at the ``debug`` level, the driver
emits messages whenever you open, use, and close a connection. The following code shows
the command for this logging specification:

.. literalinclude:: /includes/logging.c
   :start-after: // begin-logger-debug
   :end-before: // end-logger-debug
   :language: c
   :dedent:

With ``debug`` level tracing specified, when you open and use a connection, the driver
generates ``debug`` log messages:

.. io-code-block::
   :copyable: false

   .. input:: /includes/logging.c
      :language: c
      :dedent:
      :start-after: // start-logger-debug-ex
      :end-before: // end-logger-debug-ex

   .. output::
      :language: console
      :visible: false

      [2023-07-21T18:13:00Z DEBUG mongodb::connection] Connection pool created topologyId="..." serverHost="..." serverPort=27017
      [2023-07-21T18:13:00Z DEBUG mongodb::connection] Connection pool created topologyId="..." serverHost="..." serverPort=27017
      [2023-07-21T18:13:00Z DEBUG mongodb::connection] Connection pool created topologyId="..." serverHost="..." serverPort=27017
      [2023-07-21T18:13:00Z DEBUG mongodb::connection] Connection pool ready topologyId="..." serverHost="..." serverPort=27017
      [2023-07-21T18:13:00Z DEBUG mongodb::connection] Connection checkout started topologyId="..." serverHost="..." serverPort=27017
      [2023-07-21T18:13:00Z DEBUG mongodb::connection] Connection created topologyId="..." serverHost="..." serverPort=27017 driverConnectionId=1
      ...

To learn more about how to specify other log levels in the {+driver-short+}, see
`Levels and Components <{+api-libmongoc+}/structured_log.html#levels-and-components>`__ in the libmongoc API
documentation.

Additional Information
----------------------

To learn more about setting client options, see the
guide on :ref:`c-connect`. To learn more about structured logging in the {+driver-short+},
see `Structured Logging <{+api-libmongoc+}/structured_log.html>`__ in the libmongoc API
documentation.

.. tip:: Monitoring

   In addition to logging, you can enable monitoring in your
   application. To learn more, see the :ref:`c-cluster-monitoring` guides.