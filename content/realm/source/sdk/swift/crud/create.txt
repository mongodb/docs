.. meta::
   :robots: noindex, nosnippet

.. _swift-crud-create:

=========================
CRUD - Create - Swift SDK
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Create a New Object
-------------------

About The Examples On This Page
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The examples on this page use the following models:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift
      
      .. literalinclude:: /examples/generated/code/start/CreateRealmObjects.snippet.models.swift
         :language: swift

   .. tab::
      :tabid: objective-c
      
      .. literalinclude:: /examples/generated/code/start/ReadWriteData.snippet.models.m
         :language: objectivec

.. _ios-create-a-new-object:

Create an Object
~~~~~~~~~~~~~~~~

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      To add an object to a realm, instantiate it as you would any other
      object and then pass it to :swift-sdk:`Realm.add(_:update:)
      <Structs/Realm.html#/s:10RealmSwift0A0V3add_6updateySo0aB6ObjectC_AC12UpdatePolicyOtF>`
      inside of a write transaction.

      .. literalinclude:: /examples/generated/code/start/CreateRealmObjects.snippet.create.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To add an object to a realm, instantiate it as you would any other
      object and then pass it to :objc-sdk:`-[RLMRealm addObject:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(im)addObject:>` inside
      of a write transaction.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.snippet.create.m
         :language: objectivec

.. _ios-initialize-an-object-with-a-value:

Initialize Objects with a Value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can initialize an object by passing an initializer value to
:swift-sdk:`Object.init(value:)
<Extensions/Object.html#/s:So16RealmSwiftObjectC0aB0E5valueAByp_tcfc>`.
The initializer value can be a :apple:`key-value coding
<library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/>`
compliant object, a dictionary, or an array containing one element for
each managed property.

.. note::

   When using an array as an initializer value, you must include all
   properties in the same order as they are defined in the model.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/CreateRealmObjects.snippet.initialize-objects-with-values.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.snippet.initialize-objects-with-values.m
         :language: objectivec

You can even initialize :ref:`related <ios-client-relationships>` or
:ref:`embedded objects <ios-embedded-objects>` by nesting initializer
values:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/CreateRealmObjects.snippet.nested-objects.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.snippet.nested-objects.m
         :language: objectivec


Some Property Types are Only Mutable in a Write Transaction
```````````````````````````````````````````````````````````

Some property types are only mutable in a write transaction. For example, 
you can instantiate an object with a :ref:`MutableSet <ios-mutableset-data-type>` 
property, but you can only set that property's value in a write transaction. 
You cannot initialize the object with a value for that property unless 
you do so inside a write transaction.

.. _ios-create-an-object-with-json:

Create an Object with JSON
~~~~~~~~~~~~~~~~~~~~~~~~~~

Realm does not directly support JSON, but you can use
:apple:`JSONSerialization.jsonObject(with:options:)
<documentation/foundation/jsonserialization/1415493-jsonobject>` to
convert JSON into a value that you can pass to
:swift-sdk:`Realm.create(_:value:update:)
<Structs/Realm.html#/s:10RealmSwift0A0V6create_5value6updatexxm_ypAC12UpdatePolicyOtSo0aB6ObjectCRbzlF>`.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/CreateRealmObjects.snippet.json.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.snippet.json.m
         :language: objectivec

Nested objects or arrays in the JSON map to :ref:`to-one
<ios-to-one-relationship>` or :ref:`to-many relationships
<ios-to-one-relationship>`. 

The JSON property names and types must match the destination
:ref:`object schema <ios-object-schemas>` exactly. For example:

- ``float`` properties must be initialized with float-backed ``NSNumbers``.
- ``Date`` and ``Data`` properties cannot be inferred from strings. Convert them to the appropriate type before passing to :swift-sdk:`Realm.create(_:value:update:) <Structs/Realm.html#/s:10RealmSwift0A0V6create_5value6updatexxm_ypAC12UpdatePolicyOtSo0aB6ObjectCRbzlF>`.
- Required properties cannot be ``null`` or missing in the JSON.

Realm ignores any properties in the JSON not defined in the
object schema.

.. tip::

   If your JSON schema doesn't exactly align with your Realm objects,
   consider using a third-party framework to transform your JSON. There
   are many model mapping frameworks that work with Realm.
   See a :github:`partial list in the realm-swift repository
   <realm/realm-swift/issues/694#issuecomment-144785299>`.

.. _swift-create-embedded-object:

Create an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~

To create an embedded object, assign an instance of the embedded object
to a parent object's property:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/CreateRealmObjects.snippet.create-an-embedded-object.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/EmbeddedObjects/CreateEmbeddedObject.m
         :language: objectivec

.. _swift-create-object-map-property:

Create an Object with a Map Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you create an object that has a :swift-sdk:`map property 
<Classes/Map.html>`, you can set the values for keys in a few ways: 

- Set keys and values on the object and then add the object to the realm
- Set the object's keys and values directly inside a write transaction
- Use key-value coding to set or update keys and values inside a write transaction

.. literalinclude:: /examples/generated/code/start/CreateRealmObjects.snippet.map.swift
   :language: swift

.. include:: /includes/map-key-string-limitations.rst

.. literalinclude:: /examples/generated/code/start/CreateRealmObjects.snippet.percent-encode-disallowed-map-keys.swift

.. _swift-create-object-mutableset-property:

Create an Object with a MutableSet Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can create objects that contain :swift-sdk:`MutableSet 
<Classes/MutableSet.html>` properties as you would any Realm object, but you
can only mutate a MutableSet within a write transaction. This means you can
only set the value(s) of a mutable set property within a write transaction.

.. literalinclude:: /examples/generated/code/start/CreateRealmObjects.snippet.set-collections.swift
   :language: swift

.. _swift-create-object-anyrealvalue-property:

Create an Object with an AnyRealmValue Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you create an object with an :ref:`AnyRealmValue property 
<ios-mixed-data-type>`, you must specify the type of the value you store in 
the property. The Realm Swift SDK provides an :swift-sdk:`AnyRealmValue enum 
<Enums/AnyRealmValue.html>` that iterates through all of the types the 
AnyRealmValue can store.

Later, when you :ref:`read an AnyRealmValue <swift-read-anyrealmvalue-property>`, 
you must check the type before you do anything with the value.

.. literalinclude:: /examples/generated/code/start/CreateRealmObjects.snippet.mixed-data-type.swift
   :language: swift

.. _swift-create-object-async:

Create an Object Asynchronously
-------------------------------

You can use Swift concurrency features to write asynchronously to an 
actor-isolated realm. 

This function from the example ``RealmActor`` :ref:`defined on the 
Use Realm with Actors page <swift-define-realm-actor>` shows how you might
write to an actor-isolated realm:

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.write-async.swift
   :language: swift

And you might perform this write using Swift's async syntax:

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.actor-isolated-realm-async.swift
   :language: swift

This operation does not block or perform I/O on the calling thread. For
more information about writing to realm using Swift concurrency features, 
refer to :ref:`swift-actor-isolated-realm`.

.. _swift-create-asymmetric-object:

Create an Asymmetric Object
---------------------------

.. versionadded:: 10.29.0

You can only create an AsymmetricObject using :swift-sdk:`create(_ type:, value:)
<Structs/Realm.html#/s:10RealmSwift0A0V6create_5valueyxm_yptSo0aB16AsymmetricObjectCRbzlF>`.
When you create an AsymmetricObject, it syncs unidirectionally via 
:ref:`Data Ingest <optimize-data-ingest>` to the Atlas 
database linked to your Atlas App Services App. You cannot access an
AsymmetricObject locally, add it to or remove it from a realm, or query for it.

.. literalinclude:: /examples/generated/code/start/AsymmetricSync.snippet.create-asymmetric-object.swift
   :language: swift

You can create AsymmetricObjects for a realm initialized with a :swift-sdk:`Flexible Sync configuration 
<Extensions/User.html#/s:So7RLMUserC10RealmSwiftE25flexibleSyncConfigurationAC0B0V0F0VyF>`.
For more information, see: :ref:`Open a Synced Realm for Flexible Sync 
<ios-flexible-sync-open-realm>`.

.. _ios-copy-an-object-to-another-realm:

Copy an Object to Another Realm
-------------------------------

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      To copy an object from one realm to another, pass the original
      object to :swift-sdk:`Realm.create(_:value:update:):
      <Structs/Realm.html#/s:10RealmSwift0A0V6create_5value6updatexxm_ypAC12UpdatePolicyOtSo0aB6ObjectCRbzlF>`:

      .. literalinclude:: /examples/generated/code/start/CreateRealmObjects.snippet.copy-to-another-realm.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To copy an object from one realm to another, pass the original
      object to :objc-sdk:`+[RLMObject createInRealm:withValue:]
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)createInRealm:withValue:>`:

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.snippet.copy-to-another-realm.m
         :language: objectivec

.. important::

   The ``create`` methods do not support handling cyclical object
   graphs. Do not pass in an object containing relationships involving
   objects that refer back to their parents, either directly or
   indirectly.
