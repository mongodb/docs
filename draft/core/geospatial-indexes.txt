==================
Geospatial Indexes
==================

.. default-domain:: mongodb

Overview
--------

Geospatial indexes makes it possible to query documents based on
geographic location. You can store two-dimensional location coordinates
in your documents and then, by creating geospatial indexes, query based
on that criteria. For example, you can query based on proximity to
another location or based on inclusion in a specified region.

You can query on both location and a second field. For example, you
might write a query to find restaurants a specific distance from a hotel
or to find museums found within a certain defined neighborhood.

This document describes how to include location data in your documents
and how to create geospatial indexes. For information on querying
geospatial indexes, see :doc:`/applications/geospatial-indexes`.

.. _geospatial-indexes-coordinates:

Store Location Data
-------------------

To use geospatial indexes, you must model location data on a
pre-determined two-dimensional coordinate system, such as longitude and
latitude. You store location data as two-dimensional coordinates in a
field that holds either a two-dimensional array or an embedded document.
Consider the following two examples:

.. code-block:: javascript

   loc : [ x, y ]

   loc : { x: 1, y: 2 }

All your documents must store their location values in the same order.
If you use latitude and longitude as your coordinate system, always
store longitude first. MongoDB's :ref:`geospatial-indexes-spherical` only
recognize ``[ longitude, latitude ]`` ordering.

.. _geospatial-indexes_create:

Create a Geospatial Index
-------------------------

To create a geospatial index, use the :method:`ensureIndex
<db.collection.ensureIndex()>` method with the value ``2d`` for the
location field of your collection. Consider the following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { <location field> : "2d" } )

MongoDB's special :ref:`geospatial operations
<geospatial-query-operators>` use this index when querying for location
data.

When you create the index, MongoDB converts location data to binary
:term:`geohash` values, which are calculated based on both the location
data and the index's location range, as described in
:ref:`geospatial-indexes-range`. By default, the location range is is
based on longitude and latitude and is bounded by -180 inclusive and 180
non-inclusive. You can manipulate the geohashes for increased query
precision, as described in :ref:`geospatial-indexes-precision`.

MongoDB only supports *one* geospatial index per collection.

When creating a geospatial index you can specify the options described
in this section.

.. _geospatial-indexes-range:

Location Range
~~~~~~~~~~~~~~

All geospatial indexes are bounded to a location range. By default,
location range is based on longitude and latitude and is bounded by -180
inclusive and 180 non-inclusive (i.e. ``[-180, 180)``). MongoDB returns
an error and rejects documents with coordinate data outside of the
specified range.

MongoDB uses the location range when computing :term:`geohash` values,
as described in :ref:`geospatial-indexes-geohash`.

To configure a location range other than the default, use the ``min``
and ``max`` options with the :method:`ensureIndex()
<db.collection.ensureIndex()>` operation, as in the following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { <location field>: "2d" } ,
                              { min: <lower bound> , max: <upper bound> } )

.. _geospatial-indexes-precision:

Location Precision
~~~~~~~~~~~~~~~~~~

The precision of location data is determined by the number of bits in
the :ref:`geospatial-indexes-geohash`. More bits create more precise location
data, which allows MongoDB to return more precise results. Fewer bits
create less precise location data but allows for faster processing.

By default, geospatial indexes use 26 bits of precision, which is
precise to roughly 2 feet or about 60 centimeters using the default
range of -180 to 180. You can configure geospatial indexes up to 32
bits.

To configure a location precision other than the default, use the
``bits`` option in the :method:`ensureIndex()
<db.command.ensureIndex()>` method, as in the following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( {<location field>: "2d"} ,
                              { bits: <bit precision> } )

Only create an index with fewer than 26 bits if you are willing to
sacrifice precision for query speed.

For more information on the relationship between bits and precision, see
:ref:`geospatial-indexes-geohash`.

Compound Geospatial Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~

A geospatial index can include a second field in addition to the
location field, making the index a :ref:`index-type-compound`. This
allows for queries on the second criterion based on location. For
example, queries on carpet wholesalers in a mapped region.

To create a geospatial index with two fields, specify the location field
first, then the second field. For example, to create a compound index on
the ``loc`` location field and on the ``product`` field (sorted in
ascending order), you would issue the following:

.. code-block:: javascript

   db.storeInfo.ensureIndex( { loc: "2d", product: 1 } );

This creates an index that supports queries on location alone, as well
as queries on location and ``product``.

.. _geospatial-indexes-haystack-index:

Haystack Indexes
~~~~~~~~~~~~~~~~

Haystack indexes create "buckets" of documents from the same geographic
area in order to improve performance for queries limited to that area.

Each bucket in a haystack index contains all the documents within a
specified proximity to a given longitude and latitude. You use the
``bucketSize`` parameter to determine proximity. A ``bucketSize`` of
``5`` creates an index that groups location values that are within 5
units of the specified longitude and latitude.

The ``bucketSize`` parameter also determines the granularity of the
index. You can tune the parameter to the distribution of your data so
that in general you search only very small regions of a two-dimensional
space.

The areas defined by buckets can overlap, meaning a document can exist
in multiple buckets.

Haystack indexes define location by longitude and latitude. To use
haystack indexes, your documents must also define location by longitude
and latitude.

To build a haystack index, use the ``bucketSize`` parameter in the
:method:`ensureIndex() <db.command.ensureIndex()>` method, as in the
following prototype:

.. code-block:: javascript

   db.collection.ensureIndex({ <location field>: "geoHaystack", type: 1 },
                             { bucketSize: <bucket value> })

.. example::

   Consider a collection with documents that contain fields similar to
   the following:

   .. code-block:: javascript

      { _id : 100, { long : 126.9, lat : 35.2 }, type : "restaurant"}
      { _id : 200, { long : 127.5, lat : 36.1 }, type : "restaurant"}
      { _id : 300, { long : 128.0, lat : 36.7 }, type : "national park"}

   The following command creates an index in which keys within 1 unit of
   longitude or latitude are stored in the same bucket.

   db.mydb.ensureIndex( { pos : "geoHaystack", type : 1 }, { bucketSize : 1 } )

   The index stores the document with ``_id: 200`` in two different
   buckets: in a bucket that includes ``_id: 100`` and in a separate
   bucket that includes the ``_id: 300`` bucket.

To query using a haystack index you use the
:dbcommand:`geoSearch` command. For command details, see
:ref:`geospatial-indexes-haystack-queries`.

Haystack indexes are tuned to the bucket size and are not necessarily
suited to returning the closest documents to a particular location.

:ref:`Spherical queries <geospatial-indexes-spherical>` are not
supported by geospatial haystack indexes.

By default, queries that use a haystack index return 50 documents.

.. _geospatial-indexes-distance-calculation:

Distance Calculation
--------------------

MongoDB performs distance calculations upon the issuing of queries. By
default, MongoDB uses flat geometry to calculate distances between
points. MongoDB also supports distance calculations using spherical
geometry, to provide accurate distances for geospatial information based
on a sphere or earth.

.. admonition:: Spherical Queries Use Radians for Distance

   For spherical operators to function properly, you must convert
   distances to radians, and convert from radians to distances units
   for your application.

   To convert:

   - *distance to radians*: divide the distance by the radius of the
     sphere (e.g. the Earth) in the same units as the distance
     measurement.

   - *radians to distance*: multiply the rad ian measure by the radius
     of the sphere (e.g. the Earth) in the units system that you want to
     convert the distance to.

   The radius of the Earth is approximately ``3963.192`` miles or
   ``6378.137`` kilometers.

The following query would return documents from the ``places``
collection, within the circle described by the center ``[ -74, 40.74 ]``
with a radius of ``100`` miles:

.. code-block:: javascript

   db.places.find( { loc: { $centerSphere: [ [ -74, 40.74 ] ,
                                           100 / 3963.192 ] } } )

You may also use the ``distanceMultiplier`` option to the
:dbcommand:`geoNear` to convert radians in the :program:`mongod`
process, rather than in your application code. Please see the
:ref:`distance multiplier <geospatial-indexes-distance-multiplier>` section.

The following spherical query, returns all documents in the collection
``places`` within ``100`` miles from the point ``[ -74, 40.74 ]``.

.. code-block:: javascript

   db.runCommand( { geoNear: "places",
                    near: [ -74, 40.74 ],
                    spherical: true
                  }  )

The output of the above command would be:

.. code-block:: javascript

   {
      // [ ... ]
      "results" : [
         {
            "dis" : 0.01853688938212826,
            "obj" : {
               "_id" : ObjectId( ... )
               "loc" : [
                  -73,
                  40
               ]
            }
         }
      ],
      "stats" : {
         // [ ... ]
         "avgDistance" : 0.01853688938212826,
         "maxDistance" : 0.01853714811400047
      },
      "ok" : 1
   }

.. warning::

   Spherical queries that wrap around the poles or at the transition
   from ``-180`` to ``180`` longitude raise an error.

.. note::

   While the default Earth-like bounds for geospatial indexes are
   between ``-180`` inclusive, and ``180``, valid values for latitude
   are between ``-90`` and ``90``.

.. _geospatial-indexes-geohash:

Geohash Values
--------------

To create a geospatial index, MongoDB computes the :term:`geohash` value
for coordinate pairs within the specified :ref:`range
<geospatial-indexes-range>`.

To calculate a geohash value, continuously divide a 2D map into
quadrants. Then, assign each quadrant a two-bit value. For example, a
two-bit representation of four quadrants would be:

.. code-block:: javascript

   01  11

   00  10

These two bit values, ``00``, ``01``, ``10``, and ``11``, represent each
of the quadrants and all points within each quadrant. For a geohash with
two bits of resolution, all points in the bottom left quadrant would
have a geohash of ``00``. The top left quadrant would have the geohash
of ``01``. The bottom right and top right would have a geohash of ``10``
and ``11``, respectively.

To provide additional precision, continue dividing each quadrant into
sub-quadrants. Each sub-quadrant would have the geohash value of the
containing quadrant concatenated with the value of the sub-quadrant. The
geohash for the upper-right quadrant is ``11``, and the geohash for the
sub-quadrants would be (clockwise from the top left): ``1101``,
``1111``, ``1110``, and ``1100``, respectively.

To calculate a more precise geohash, continue dividing the sub-quadrant
and concatenate the two-bit identifier for each division. The more
"bits" in the hash identifier for a given point, the smaller possible
area that the hash can describe and the higher the resolution of the
geospatial index.

Geospatial Indexes and Sharding
-------------------------------

You *cannot* use a geospatial index as a :term:`shard key` when sharding a
collection. However, you *can* create and maintain a geospatial index
on a sharded collection, as long as the shard key is another
field. Your application may query for geospatial data using
:dbcommand:`geoNear` and :operator:`$within`; however, queries using
:operator:`$near` are not supported.

.. _geospatial-indexes-multi-location:

Multi-location Documents
------------------------

.. versionadded:: 2.0

   Support for multiple locations in a document.

In general, MongoDB cannot support more than one set of coordinates in
a document; however, using :ref:`multi-key indexes <index-type-multi-key>`,
you *can* index multiple coordinates in a single document. In the
simplest example, you may have a field (e.g. ``locs``) that holds an
array of geospatial coordinates, as in the following prototype data
model:

.. code-block:: javascript

   {
    "_id": ObjectId(...),
    "locs": [
              [ 55.5, 42.3 ],
              [ -74, 44.74 ],
              { "lat": 55.3, "long": 40.2 }
            ]
   }

The values of the array may either be arrays holding coordinates, as
in ``[ 55.5, 42.3 ]`` or embedded documents as in ``{ "lat": 55.3,
"long": 40.2 }``.

You could then create a geospatial index on the ``locs`` field, as in
the following example:

.. code-block:: javascript

   db.places.ensureIndex( { "locs": "2d" } )

You may also model the location data as a field inside of a
sub-document. In this case, the document would contain field
(e.g. ``addresses``) that held an array of documents where each
document has a field (e.g. ``loc:``) that holds location
coordinates. Consider the following prototype data model:

.. code-block:: javascript

   {
    "_id": ObjectId(...),
    "name": "...",
    "addresses": [
                   {
                    "context": "home",
                    "loc": [ 55.5, 42.3 ]
                   },
                   {
                    "context": "home",
                    "loc": [ -74, 44.74 ]
                   }
                 ]
   }

Then, create the geospatial index on the ``addresses.loc`` field as
in the following example:

.. code-block:: javascript

   db.records.ensureIndex( { "addresses.loc": "2d" } )

For documents with multiple locations, results may have the same
document many times because of multiple matches. 

To include the location field with the distance field in
multi-location document queries, specify ``includeLocs: true``
in the :dbcommand:`geoNear` command.