======================
Create a Database User
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/fact-projects-groups-synonyms.rst

.. include:: /includes/api-base-url.rst

.. include:: /includes/extracts/fact-api-requirements-owner.rst

.. include:: /includes/fact-database-user-limits.rst

Syntax
------

.. code-block:: none

   POST /api/atlas/v1.0/groups/{GROUP-ID}/databaseUsers

Request Path Parameters
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1

   * - Parameter
     - Required/Optional
     - Description

   * - ``GROUP-ID``

     - Required.

     - The unique identifier for the :ref:`project <group-id>`.

Request Query Parameters
~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/no-query-parameters.rst

Request Body Parameters
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1

   * - Name
     - Description

   * - ``databaseName``
     - The user's :ref:`authentication database
       <authentication-database>`. A user must provide both a username
       and authentication database to log into MongoDB. In |service|
       deployments of MongoDB, the authentication database is always
       the ``admin`` database.

   * - ``deleteAfterDate``
     - *Optional* `ISO-8601
       <https://en.wikipedia.org/wiki/ISO_8601>`_-formatted UTC date
       after which |service| deletes the user. The specified date must
       be in the future and within one week of the time you make the
       API request.

       .. note::

          You may include an ISO-8601 time zone designator to ensure
          that the expiration date occurs with respect to the local
          time in the specified time zone.

   * - ``groupId``
     - ID of the |service| project the user belongs to.

   * - ``username``
     - Username for authenticating to MongoDB.

   * - ``roles``
     - .. include:: /includes/fact-database-user-role.rst

       .. note::

          |service| provides a curated list of
          :manual:`MongoDB privilege actions
          </reference/privilege-actions/>`. These privileges provide
          access to a subset of MongoDB commands. For more information,
          see :ref:`Unsupported Commands in M10+ Clusters
          <paid-tier-command-limitations>`.

       .. important::

          If a user is assigned a :ref:`custom MongoDB role
          <mongodb-roles>`, they cannot be assigned any other roles.

   * - ``roles.databaseName``
     - Database on which the user has the specified role. A role
       on the ``admin`` database can include privileges that apply to
       the other databases.

   * - ``roles.collectionName``

     - Collection for which the role applies.

       You can specify a collection for the :authrole:`read` and
       :authrole:`readWrite` roles. If you do not specify a collection
       for ``read`` and ``readWrite``, the role applies
       to all collections in the database (excluding some
       collections in the ``system.`` database).

   * - ``roles.roleName``
     - Name of the role. This value can either be a
       :manual:`built-in role </reference/built-in-roles/>` or a
       :ref:`custom role <mongodb-roles>`.

       The following accepted values of ``role`` are restricted to the
       ``admin`` database:

       - :atlasrole:`atlasAdmin <Atlas admin>`
       - :authrole:`readWriteAnyDatabase`
       - :authrole:`readAnyDatabase`
       - :authrole:`clusterMonitor`
       - :authrole:`backup`
       - :authrole:`dbAdminAnyDatabase`
       - ``enableSharding``

         This role is specific to MongoDB databases managed by
         |service|. The role allows the user to enable sharding on a
         database and to shard a collection.

       The following accepted values of ``role`` can be applied to a
       specific database:

       - :authrole:`dbAdmin`
       - :authrole:`read`
       - :authrole:`readWrite`

       The following accepted values of ``role`` can be applied to a
       specific collection:

       - :authrole:`read`
       - :authrole:`readWrite`

       If you do not specify a collection for the ``read`` and
       ``readWrite`` roles, the roles apply to all collections
       (excluding some ``system.`` collections) in the database.

       .. note::

          If you specify a :ref:`custom role <mongodb-roles>` name in
          this field, the ``roles.databaseName`` field must be
          ``admin``.

   * - ``password``
     - The user's password. This field is NOT included in the entity
       returned from the server.

Response Elements
~~~~~~~~~~~~~~~~~

If you set the query element ``envelope`` to ``true``, the response is wrapped
by the ``content`` object.

.. list-table::
   :header-rows: 1

   * - Name
     - Description

   * - ``links``
     - One or more :ref:`links <api-linking>` to sub-resources and/or
       related resources.

   * - ``databaseName``
     - The user's :ref:`authentication database <authentication-database>`. A
       user must provide both a username and authentication database to log
       into MongoDB. In |service| deployments of MongoDB, the authentication
       database is always the ``admin`` database.

   * - ``deleteAfterDate``
     - When this user will be deleted. This element is only present if
       it was specified in the request body.

   * - ``groupId``
     - ID of the |service| project the user belongs to.

   * - ``username``
     - The username for authenticating to MongoDB.

   * - ``roles``
     - An array of the user's roles and the database on which the user
       has each role. A role allows the user to perform particular
       actions on the specified database. A role on the ``admin``
       database can include privileges that apply to the other
       databases as well.

   * - ``roles.databaseName``
     - The database on which the user has the specified role. A role on the
       ``admin`` database can include privileges that apply to the other
       databases.

   * - ``roles.roleName``
     - The name of the role. The possible values are:

       - :atlasrole:`atlasAdmin <Atlas admin>`
       - :authrole:`readWriteAnyDatabase`
       - :authrole:`readAnyDatabase`
       - :authrole:`backup`
       - :authrole:`clusterMonitor`
       - :authrole:`dbAdmin`
       - :authrole:`dbAdminAnyDatabase`

       - ``enableSharding``

         This role is specific to MongoDB databases managed by |service|. The role
         allows the user to enable sharding on a database and to shard a collection.

       - :authrole:`read`
       - :authrole:`readWrite`
       - A name of a :ref:`custom MongoDB role <mongodb-roles>`.

   * - ``roles.collectionName``

     - The collection for which the role applies.

Example Request
---------------

Request
~~~~~~~

.. include:: /includes/extracts/fact-api-requirements-modify.rst

.. class:: copyable-code

.. code-block:: none

   curl -i -u "username:apiKey" --digest -H "Content-Type: application/json" -X POST "https://cloud.mongodb.com/api/atlas/v1.0/groups/5356823b3794dee37132bb7b/databaseUsers" --data '
   {
     "databaseName" : "admin",
     "roles" : [ {
       "databaseName" : "sales",
       "roleName" : "readWrite"
     }, {
       "databaseName" : "marketing",
       "roleName" : "read"
     } ],
     "username" : "david",
     "password" : "changeme123"
   }'

Response
~~~~~~~~

.. code-block:: none

   HTTP/1.1 201 Created

   {
     "databaseName" : "admin",
     "groupId" : "5356823b3794dee37132bb7b",
     "links" : [ ... ],
     "roles" : [ {
       "databaseName" : "sales",
       "roleName" : "readWrite"
     }, {
       "databaseName" : "marketing",
       "roleName" : "read"
     } ],
     "username" : "david"
   }
