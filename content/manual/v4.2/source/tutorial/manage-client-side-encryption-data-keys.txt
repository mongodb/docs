===========================
Manage Data Encryption Keys
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. versionadded:: 4.2

Client-side field level encryption uses data encryption keys for
encryption and decryption. The :binary:`~bin.mongo` shell
:method:`getKeyVault()` method returns a key vault object for creating,
modifying, and deleting data encryption keys. 

This page documents client-side field level encryption using the
:binary:`~bin.mongo` shell, and does *not* refer to any official MongoDB
4.2-compatible driver. See the relevant :ref:`documentation
<field-level-encryption-drivers>` for driver-specific data encryption
key management methods and syntax.

.. _field-level-encryption-data-key-create:

Create a data encryption key
----------------------------

The following procedure uses the :binary:`~bin.mongo` shell to create a
data encryption key for use with client-side field level encryption and
decryption. For guidance on data encryption key management using a
4.2-compatible driver, see the documentation for that driver.

.. include:: /includes/steps/manage-client-side-encryption-create-key.rst

.. _field-level-encryption-data-key-manage:

Manage a data encryption key's alternate name
---------------------------------------------

The following procedure uses the :binary:`~bin.mongo` shell to manage
the alternate names of a data encryption key. For guidance on data
encryption key management using a 4.2-compatible driver, see the
documentation for that driver.

.. include:: /includes/steps/manage-client-side-encryption-manage-key-altname.rst

.. _field-level-encryption-data-key-delete:

Remove a data encryption key
----------------------------

.. warning::

    Deleting a data encryption key renders all fields encrypted using
    that key as permanently unreadable.

The following procedure uses the :binary:`~bin.mongo` shell to remove a
data encryption key from the key vault. For guidance on data encryption
key management using a 4.2-compatible driver, see the documentation for
that driver.

.. include:: /includes/steps/manage-client-side-encryption-delete-key.rst
