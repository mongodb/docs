#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"


#: ../source/reference/write-concern.txt:38

msgid ""
"A new protocol for :ref:`write operations <rel-notes-write-operations>` "
"integrates write concerns with the write operations and eliminates the need "
"to call the :dbcommand:`getLastError` command. Previous versions required a "
":dbcommand:`getLastError` command immediately after a write operation to "
"specify the write concern."
msgstr "用于 :ref:`写操作 <rel-notes-write-operations>` 的新协议将安全写级别与写操作"
"结合在一起，并不需要调用 :dbcommand:`getLastError` 命令。以前的版本需要在一个写操作"
"后马上调用 :dbcommand:`getLastError` 命令以指定安全写级别。"


#: ../source/reference/write-concern.txt:68
msgid "``w`` Option"
msgstr ""

#: ../source/reference/write-concern.txt:95
msgid "Value"
msgstr ""

#: ../source/reference/write-concern.txt:96
msgid "Description"
msgstr ""


#: ../source/includes/fact-master-slave-majority.rst:1
msgid ""

"In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats ``w:"
" \"majority\"`` as equivalent to ``w: 1``. In earlier versions of MongoDB, "
"``w: \"majority\"`` produces an error in :doc:`master/slave </core/master-"
"slave>` deployments."
msgstr ""


#: ../source/reference/write-concern.txt:153
msgid "``j`` Option"
msgstr ""

#: ../source/reference/write-concern.txt:188
msgid "``wtimeout``"
msgstr ""

#: ../source/reference/write-concern.txt:190
msgid ""

"This option specifies a time limit, in milliseconds, for the write concern. "
"``wtimeout`` is only applicable for ``w`` values greater than ``1``."
msgstr ""

#: ../source/reference/write-concern.txt:194
msgid ""
"``wtimeout`` causes write operations to return with an error after the "
"specified limit, even if the required write concern will eventually succeed."
" When these write operations return, MongoDB **does not** undo successful "
"data modifications performed before the write concern exceeded the "
"``wtimeout`` time limit."
msgstr ""


#: ../source/reference/write-concern.txt:200
msgid ""

"If you do not specify the ``wtimeout`` option and the level of write concern"
" is unachievable, the write operation will block indefinitely. Specifying a "
"``wtimeout`` value of ``0`` is equivalent to a write concern without the "
"``wtimeout`` option."
msgstr ""

#: ../source/reference/write-concern.txt:8
msgid "Write Concern"
msgstr ""

#: ../source/reference/write-concern.txt:0
msgid "On this page"
msgstr ""


#: ../source/reference/write-concern.txt:18
msgid ""

"Write concern describes the level of acknowledgement requested from MongoDB "
"for write operations to a standalone :program:`mongod` or to :doc:`replica "
"sets </core/replication-introduction>` or to :doc:`sharded clusters </core"
"/sharding-introduction>`. In sharded clusters, :program:`mongos` instances "
"will pass the write concern on to the shards."
msgstr ""

#: ../source/reference/write-concern.txt:27
msgid ""
"For replica sets using :rsconf:`protocolVersion: 1 <protocolVersion>` "
"**and** running with the :term:`journal` enabled:"
msgstr ""

#: ../source/reference/write-concern.txt:30
msgid ":writeconcern:`w: \"majority\" <\"majority\">` implies :ref:`j: true <wc-j>`."
msgstr ""

#: ../source/reference/write-concern.txt:33
msgid ""
":term:`Secondary members <secondary>` acknowledge replicated write "
"operations after the secondary members have written to their respective on-"
"disk journals, regardless of the :ref:`j <wc-j>` option used for the write "
"on the :term:`primary`."
msgstr ""


#: ../source/reference/write-concern.txt:47
msgid "Write Concern Specification"
msgstr ""

#: ../source/reference/write-concern.txt:49
msgid "Write concern can include the following fields:"
msgstr ""

#: ../source/reference/write-concern.txt:55
msgid ""

"the :ref:`w <wc-w>` option to request acknowledgment that the write "
"operation has propagated to a specified number of :program:`mongod` "
"instances or to :program:`mongod` instances with specified tags."
msgstr ""

#: ../source/reference/write-concern.txt:59
msgid ""
"the :ref:`j <wc-j>` option to request acknowledgement that the write "
"operation has been written to the journal, and"
msgstr ""


#: ../source/reference/write-concern.txt:62
msgid ""
":ref:`wtimeout <wc-wtimeout>` option to specify a time limit to prevent "
"write operations from blocking indefinitely."
msgstr ""

#: ../source/reference/write-concern.txt:70
msgid ""

"The ``w`` option requests acknowledgement that the write operation has "
"propagated to a specified number of :program:`mongod` instances or to "
":program:`mongod` instances with specified tags."
msgstr ""


#: ../source/reference/write-concern.txt:74
msgid ""

"Using the ``w`` option, the following ``w: <value>`` write concerns are "
"available:"
msgstr ""

#: ../source/reference/write-concern.txt:79
msgid ""
"Standalone :program:`mongod` instances and primaries of replica sets "
"acknowledge write operations after applying the write in memory, unless "
":ref:`j:true <wc-j>`."
msgstr ""


#: ../source/reference/write-concern.txt:85
msgid ""

"For replica sets using :rsconf:`protocolVersion: 1 <protocolVersion>`, "
"secondaries acknowledge write operations after the secondary members have "
"written to their respective on-disk :doc:`journals </core/journaling>`, "
"regardless of the :ref:`j <wc-j>` option."
msgstr ""


#: ../source/reference/write-concern.txt:100
msgid ""

"Requests acknowledgement that the write operation has propagated to the "
"specified number of :program:`mongod` instances. For example:"
msgstr ""


#: ../source/reference/write-concern.txt:108
msgid "``w: 1``"
msgstr ""

#: ../source/reference/write-concern.txt:105
msgid ""

"Requests acknowledgement that the write operation has propagated to the "
"standalone :program:`mongod` or the primary in a replica set. ``w: 1`` is "
"the default write concern for MongoDB."
msgstr ""


#: ../source/reference/write-concern.txt:118
msgid "``w: 0``"
msgstr ""

#: ../source/reference/write-concern.txt:111
msgid ""
"Requests no acknowledgment of the write operation. However, ``w: 0`` may "
"return information about socket exceptions and networking errors to the "
"application."
msgstr ""

#: ../source/reference/write-concern.txt:115
msgid ""
"If you specify ``w: 0`` but include :ref:`j: true <wc-j>`, the :ref:`j: true"
" <wc-j>` prevails to request acknowledgement from the standalone "
":program:`mongod` or the primary of a replica set."
msgstr ""

#: ../source/reference/write-concern.txt:120
msgid ""

"Numbers greater than 1 are valid only for replica sets to request "
"acknowledgement from specified number of members, including the primary."
msgstr ""


#: ../source/reference/write-concern.txt:126
msgid "*Changed in version 3.2*"
msgstr ""

#: ../source/reference/write-concern.txt:128
msgid ""

"Requests acknowledgment that write operations have propagated to the "
"majority of voting nodes [#majority-definition]_, including the primary, and"
" have been written to the on-disk :doc:`journal </core/journaling>` for "
"these nodes."
msgstr ""

#: ../source/reference/write-concern.txt:133
msgid ""
"For replica sets using :rsconf:`protocolVersion: 1 <protocolVersion>`, "
":writeconcern:`w: \"majority\" <\"majority\">` implies :ref:`j: true "
"<wc-j>`. So, unlike ``w: <number>``, with :writeconcern:`w: \"majority\" "
"<\"majority\">`, the primary also writes to the on-disk journal before "
"acknowledging the write."
msgstr ""


#: ../source/reference/write-concern.txt:139
msgid ""

"After the write operation returns with a :writeconcern:`w: \"majority\" "
"<\"majority\">` acknowledgement to the client, the client can read the "
"result of that write with a :readconcern:`\"majority\"` readConcern."
msgstr ""


#: ../source/reference/write-concern.txt:146
msgid ""

"Requests acknowledgement that the write operations have propagated to a "
"replica set member with the specified :ref:`tag <replica-set-configuration-"
"tag-sets>`."
msgstr ""


#: ../source/reference/write-concern.txt:155
msgid ""

"The :ref:`j <wc-j>` option requests acknowledgement from MongoDB that the "
"write operation has been written to the :doc:`journal </core/journaling>`."
msgstr ""


#: ../source/reference/write-concern.txt:164
msgid ""
"Requests acknowledgement that the :program:`mongod` instances, as specified "
"in the :ref:`w: \\<value\\> <wc-w>`, have written to the on-disk journal. "
"``j: true`` does not by itself guarantee that the write will not be rolled "
"back due to replica set primary failover."
msgstr ""

#: ../source/includes/note-write-concern-journaled-replication.rst:1
msgid ""

"With :writeconcern:`j: true <j>`, MongoDB returns only after the requested "
"number of members, including the primary, have written to the journal. "
"Previously :writeconcern:`j: true <j>` write concern in a replica set only "
"requires the :term:`primary` to write to the journal, regardless of the "
":ref:`w: \\<value\\> <wc-w>` write concern."
msgstr ""


#: ../source/reference/write-concern.txt:174
msgid ""
"For replica sets using :rsconf:`protocolVersion: 1 <protocolVersion>`, "
":writeconcern:`w: \"majority\" <\"majority\">` implies :ref:`j: true "
"<wc-j>`, if journaling is enabled. Journaling is enabled by default."
msgstr ""

#: ../source/reference/write-concern.txt:179
msgid ""

"Specifying a write concern that includes ``j: true`` to a :program:`mongod` "
"or :program:`mongos` running with :option:`--nojournal` option produces an "
"error. Previous versions would ignore the ``j: true``."
msgstr ""


#: ../source/reference/write-concern.txt:209
msgid ""
"Prior to MongoDB 3.0, ``w: \"majority\"`` refers to the majority of the "
"replica set's members."
msgstr ""

#~ msgid "Write Concern Reference"
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Write concern </core/write-concern>` describes the guarantee that "
#~ "MongoDB provides when reporting on the success of a write operation."
#~ msgstr ""

#~ msgid "Available Write Concern"
#~ msgstr ""

#~ msgid ""
#~ "Write concern can include the :ref:`w <wc-w>` option to specify the required"
#~ " number of acknowledgments before returning, the :ref:`j <wc-j>` option to "
#~ "require writes to the journal before returning, and :ref:`wtimeout <wc-"
#~ "wtimeout>` option to specify a time limit to prevent write operations from "
#~ "blocking indefinitely."
#~ msgstr ""

#~ msgid ""
#~ "In sharded clusters, :program:`mongos` instances will pass the write concern"
#~ " on to the shard."
#~ msgstr ""

#~ msgid ""
#~ "The ``w`` option provides the ability to disable write concern entirely *as "
#~ "well as* specify the write concern for :term:`replica sets <replica set>`."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB uses ``w: 1`` as the default write concern. ``w: 1`` provides basic "
#~ "receipt acknowledgment."
#~ msgstr ""

#~ msgid "The ``w`` option accepts the following values:"
#~ msgstr ""

#~ msgid "``1``"
#~ msgstr ""

#~ msgid ""
#~ "Provides acknowledgment of write operations on a standalone "
#~ ":program:`mongod` or the :term:`primary` in a replica set."
#~ msgstr ""

#~ msgid "This is the default write concern for MongoDB."
#~ msgstr ""

#~ msgid "``0``"
#~ msgstr ""

#~ msgid ""
#~ "Disables basic acknowledgment of write operations, but returns information "
#~ "about socket exceptions and networking errors to the application."
#~ msgstr ""

#~ msgid ""
#~ "If you disable basic write operation acknowledgment but require journal "
#~ "commit acknowledgment, the journal commit prevails, and the server will "
#~ "require that :program:`mongod` acknowledge the write operation."
#~ msgstr ""

#~ msgid "<Number greater than 1>"
#~ msgstr ""

#~ msgid ""
#~ "Guarantees that write operations have propagated successfully to the "
#~ "specified number of replica set members including the primary."
#~ msgstr ""

#~ msgid ""
#~ "For example, ``w: 2`` indicates acknowledgements from the primary and at "
#~ "least one secondary."
#~ msgstr ""

#~ msgid ""
#~ "If you set ``w`` to a number that is greater than the number of set members "
#~ "that hold data, MongoDB waits for the non-existent members to become "
#~ "available, which means MongoDB blocks indefinitely."
#~ msgstr ""

#~ msgid "``\"majority\"``"
#~ msgstr ""

#~ msgid ""
#~ "Confirms that write operations have propagated to the majority of voting "
#~ "nodes: a majority of the replica set's voting members must acknowledge the "
#~ "write operation before it succeeds. This allows you to avoid hard coding "
#~ "assumptions about the size of your replica set into your application."
#~ msgstr ""

#~ msgid ""
#~ "In previous versions, ``w: \"majority\"`` refers to the majority of the "
#~ "replica set's members."
#~ msgstr ""

#~ msgid "<tag set>"
#~ msgstr ""

#~ msgid ""
#~ "By specifying a :ref:`tag set <replica-set-configuration-tag-sets>`, you can"
#~ " have fine-grained control over which replica set members must acknowledge a"
#~ " write operation to satisfy the required level of write concern."
#~ msgstr ""

#~ msgid ""
#~ "The ``j`` option confirms that the :program:`mongod` instance has written "
#~ "the data to the on-disk journal. This ensures that data is not lost if the "
#~ ":program:`mongod` instance shuts down unexpectedly. Set to ``true`` to "
#~ "enable."
#~ msgstr ""

#~ msgid ""
#~ "Specifying a write concern that includes ``j: true`` to a :program:`mongod` "
#~ "or :program:`mongos` running with :option:`--nojournal` option now errors. "
#~ "Previous versions would ignore the ``j: true``."
#~ msgstr ""

#~ msgid ""
#~ "Requiring *journaled* write concern in a replica set only requires a journal"
#~ " commit of the write operation to the :term:`primary` of the set regardless "
#~ "of the level of *replica acknowledged* write concern."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Write Concern Introduction </core/write-concern>` and :ref:`Write "
#~ "Concern for Replica Sets <replica-set-write-concern>`."
#~ msgstr ""
