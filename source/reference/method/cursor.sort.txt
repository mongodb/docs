=============
cursor.sort()
=============

.. default-domain:: mongodb

Definition
----------

.. method:: cursor.sort(sort)

   Specifies the order in which the query returns matching documents.
   You must apply :method:`~cursor.sort()` to the cursor before
   retrieving any documents from the database.

   The :method:`~cursor.sort()` method has the following parameter:

   .. include:: /reference/method/cursor.sort-param.rst

   The ``sort`` parameter contains field and value pairs, in the
   following form:

   .. code-block:: javascript

      { field: value }

   The sort document can specify :ref:`ascending or descending sort on
   existing fields <sort-asc-desc>` or :ref:`sort on computed metadata
   <sort-metadata>`.

Behaviors
---------

Result Ordering
~~~~~~~~~~~~~~~

Unless you specify the :method:`~cursor.sort()` method or use the
:query:`$near` operator, MongoDB does **not** guarantee the order of
query results.

.. _sort-asc-desc:

Ascending/Descending Sort
~~~~~~~~~~~~~~~~~~~~~~~~~

Specify in the sort parameter the field or fields to sort by and a
value of ``1`` or ``-1`` to specify an ascending or descending sort
respectively.

The following sample document specifies a descending sort by the
``age`` field and then an ascending sort by the ``posts`` field:

.. code-block:: javascript

   { age : -1, posts: 1 }

.. include:: /includes/fact-sort-order.rst

.. _sort-metadata:

Metadata Sort
~~~~~~~~~~~~~

Specify in the sort parameter a new field name for the
computed metadata and specify the :projection:`$meta` expression as its
value.

The following sample document specifies a descending sort by the
``"textScore"`` metadata:

.. code-block:: javascript

   { score: { $meta: "textScore" } }

The specified metadata determines the sort order. For example, the
``"textScore"`` metadata sorts in descending order. See
:projection:`$meta` for details.

Limit Results
~~~~~~~~~~~~~

The sort operation requires that the entire sort be able to complete
within 32 megabytes.

When the sort operation consumes more than 32 megabytes, MongoDB
returns an error. To avoid this error, either create an index to
support the sort operation or use :method:`~cursor.sort()` in
conjunction with :method:`~cursor.limit()`. The specified limit must
result in a number of documents that fall within the 32 megabyte limit.

For example, if the following sort operation ``stocks_quotes`` exceeds
the 32 megabyte limit:

.. code-block:: javascript

   db.stocks.find().sort( { ticker: 1, date: -1 } )

Either create an index to support the sort operation:

.. code-block:: javascript

   db.stocks.ensureIndex( { ticker: 1, date: -1 } )

Or use :method:`~cursor.sort()` in conjunction with
:method:`~cursor.limit()`:

.. code-block:: javascript

   db.stocks.find().sort( { ticker: 1, date: -1 } ).limit(100)

Examples
--------

A collection ``orders`` contain the following documents:

.. code-block:: javascript

   { _id: 1, item: { category: "cake", type: "chiffon" }, amount: 10 }
   { _id: 2, item: { category: "cookies", type: "chocolate chip" }, amount: 50 }
   { _id: 3, item: { category: "cookies", type: "chocolate chip" }, amount: 15 }
   { _id: 4, item: { category: "cake", type: "lemon" }, amount: 30 }
   { _id: 5, item: { category: "cake", type: "carrot" }, amount: 20 }
   { _id: 6, item: { category: "brownies", type: "blondie" }, amount: 10 }

The following query, which returns all documents from the ``orders``
collection, does not specify a sort order:

.. code-block:: javascript

   db.orders.find()

The query returns the documents in indeterminate order:

.. code-block:: none

   { "_id" : 1, "item" : { "category" : "cake", "type" : "chiffon" }, "amount" : 10 }
   { "_id" : 2, "item" : { "category" : "cookies", "type" : "chocolate chip" }, "amount" : 50 }
   { "_id" : 3, "item" : { "category" : "cookies", "type" : "chocolate chip" }, "amount" : 15 }
   { "_id" : 4, "item" : { "category" : "cake", "type" : "lemon" }, "amount" : 30 }
   { "_id" : 5, "item" : { "category" : "cake", "type" : "carrot" }, "amount" : 20 }
   { "_id" : 6, "item" : { "category" : "brownies", "type" : "blondie" }, "amount" : 10 }

The following query specifies a sort on the ``amount`` field in
descending order.

.. code-block:: javascript

   db.orders.find().sort( { amount: -1 } )

The query returns the following documents, in descending order of
``amount``:

.. code-block:: javascript

   { "_id" : 2, "item" : { "category" : "cookies", "type" : "chocolate chip" }, "amount" : 50 }
   { "_id" : 4, "item" : { "category" : "cake", "type" : "lemon" }, "amount" : 30 }
   { "_id" : 5, "item" : { "category" : "cake", "type" : "carrot" }, "amount" : 20 }
   { "_id" : 3, "item" : { "category" : "cookies", "type" : "chocolate chip" }, "amount" : 15 }
   { "_id" : 1, "item" : { "category" : "cake", "type" : "chiffon" }, "amount" : 10 }
   { "_id" : 6, "item" : { "category" : "brownies", "type" : "blondie" }, "amount" : 10 }

The following query specifies the sort order using the fields from a
sub-document ``item``. The query sorts first by the ``category`` field
in ascending order, and then within each ``category``, by the ``type``
field in ascending order.

.. code-block:: javascript

   db.orders.find().sort( { "item.category": 1, "item.type": 1 } )

The query returns the following documents, ordered first by the
``category`` field, and within each category, by the ``type`` field:

.. code-block:: javascript

   { "_id" : 6, "item" : { "category" : "brownies", "type" : "blondie" }, "amount" : 10 }
   { "_id" : 5, "item" : { "category" : "cake", "type" : "carrot" }, "amount" : 20 }
   { "_id" : 1, "item" : { "category" : "cake", "type" : "chiffon" }, "amount" : 10 }
   { "_id" : 4, "item" : { "category" : "cake", "type" : "lemon" }, "amount" : 30 }
   { "_id" : 2, "item" : { "category" : "cookies", "type" : "chocolate chip" }, "amount" : 50 }
   { "_id" : 3, "item" : { "category" : "cookies", "type" : "chocolate chip" }, "amount" : 15 }

.. _return-storage-order:

Return in Storage Order
-----------------------

The :operator:`$natural` parameter returns items according to their
storage order within the collection level extents.

Typically, the storage order reflects insertion order, *except* when
documents relocate because of :ref:`document growth due to updates
<data-model-document-growth>` or remove operations free up space which
are then taken up by newly inserted documents.

.. include:: /includes/fact-natural-parameter.rst

Consider the sequence of insert operations to the ``trees`` collection:

.. code-block:: javascript

   db.trees.insert( { _id: 1, common_name: "oak", genus: "quercus" } )
   db.trees.insert( { _id: 2, common_name: "chestnut", genus: "castanea" } )
   db.trees.insert( { _id: 3, common_name: "maple", genus: "aceraceae" } )
   db.trees.insert( { _id: 4, common_name: "birch", genus: "betula" } )

The following query returns the documents in the storage order:

.. code-block:: javascript

   db.trees.find().sort( { $natural: 1 } )

The documents return in the following order:

.. code-block:: javascript

   { "_id" : 1, "common_name" : "oak", "genus" : "quercus" }
   { "_id" : 2, "common_name" : "chestnut", "genus" : "castanea" }
   { "_id" : 3, "common_name" : "maple", "genus" : "aceraceae" }
   { "_id" : 4, "common_name" : "birch", "genus" : "betula" }

Update a document such that the document outgrows its current allotted space:

.. code-block:: javascript

   db.trees.update(
      { _id: 1 },
      { $set: { famous_oaks: [ "Emancipation Oak", "Goethe Oak" ] } }
   )

Rerun the query to returns the documents in the storage order:

.. code-block:: javascript

   db.trees.find().sort( { $natural: 1 } )

The documents return in the following storage order:

.. code-block:: javascript

   { "_id" : 2, "common_name" : "chestnut", "genus" : "castanea" }
   { "_id" : 3, "common_name" : "maple", "genus" : "aceraceae" }
   { "_id" : 4, "common_name" : "birch", "genus" : "betula" }
   { "_id" : 1, "common_name" : "oak", "genus" : "quercus", "famous_oaks" : [ "Emancipation Oak", "Goethe Oak" ] }

.. seealso:: :operator:`$natural`
