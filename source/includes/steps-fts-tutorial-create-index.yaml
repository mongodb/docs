stepnum: 1
ref: nav-to-fts
inherit:
  file: steps-source-project-nav.yaml
  ref: project-nav-search

---
stepnum: 2
title: "Click :guilabel:`Create Index`."
ref: click-create-fts-index

---
stepnum: 3
title: "Select a :guilabel:`Configuration Method` and click :guilabel:`Next`."
ref: select-a-configuration-method
content: |

  - For a guided experience, select :guilabel:`Visual Editor`.
  - To edit the raw index definition, select 
    :guilabel:`JSON Editor`.

---
stepnum: 4
title: "Enter the :guilabel:`Index Name`, and set the :guilabel:`Database and Collection`."
ref: name-index
content: |

  a. In the :guilabel:`Index Name` field, enter ``default``.

     .. include:: /includes/default-fts-index-name.rst 

  #. In the :guilabel:`Database and Collection` section, find the 
     ``sample_mflix`` database, and select the ``movies`` collection.

---
stepnum: 5
title: "Specify an index definition."
ref: enter-index-definition
content: |

  You can create an |fts| index that uses :ref:`dynamic mappings 
  <static-dynamic-mappings>` or :ref:`static mappings 
  <static-dynamic-mappings>`. To learn more about dynamic and static 
  mappings, see :ref:`static-dynamic-mappings`.
  
  Choose one of the following index definitions to get started with 
  |fts|. You can use the :guilabel:`Visual Editor` or the 
  :guilabel:`JSON Editor` in the |service| user interface to create the 
  index.

  **Dynamic Mappings**
  
  The following index definition dynamically indexes the fields of 
  :ref:`supported types <bson-data-chart>` in the ``movies`` collection.

  Visual Editor
  +++++++++++++
              
  a. Click :guilabel:`Next`.
  #. Review the ``"default"`` index definition for the ``movies`` 
     collection.

  JSON Editor
  +++++++++++

  a. Click :guilabel:`Next`.
  #. Review the index definition.
     
     Your index definition should look similar to the following: 

     .. code-block:: json 
                    
        {
          "mappings": {
            "dynamic": true
          }
        }

     The above index definition dynamically indexes the fields of 
     :ref:`supported types <bson-data-chart>` in each document in 
     the ``movies`` collection. 

  #. Click :guilabel:`Next`.

  **Static Mappings**
  
  The ``movies`` collection is large, so in order to save space we will 
  only index the ``title``, ``genres``, and ``plot`` fields.

  Visual Editor
  +++++++++++++
  
  a. Click :guilabel:`Next`.
  #. Click :guilabel:`Refine Your Index`.
  #. Change :guilabel:`Dynamic Mapping` to :guilabel:`Off`.
  #. Add the following fields:
              
     .. list-table:: 
        :header-rows: 1
        :widths: 20 30 50
   
        * - Field Name 
          - Dynamic Mapping 
          - Data Type Configuration 

        * - ``genres``
          - Change :guilabel:`Enable Dynamic Mapping` to 
            :guilabel:`Off`.
          - Click :guilabel:`Add Data Type`, and select 
            :guilabel:`String`.

        * - ``plot``
          - Change :guilabel:`Enable Dynamic Mapping` to 
            :guilabel:`Off`.
          - Click :guilabel:`Add Data Type`, and select 
            :guilabel:`String`.

        * - ``title``
          - Change :guilabel:`Enable Dynamic Mapping` to 
            :guilabel:`Off`.
          - a. Click :guilabel:`Add Data Type`, and select 
            :guilabel:`String`.

            #. Click :guilabel:`Add Data Type`, and select 
               :guilabel:`Multi`.

            #. Specify ``keywordAnalyzer`` as the name of the 
               :guilabel:`Multi` analyzer.

            #. Change :guilabel:`Index Analyzer` to 
               :guilabel:`lucene.keyword`.

            #. Click :guilabel:`Save Changes`. 

  JSON Editor
  +++++++++++
  
  Replace the default definition with the following and click 
  :guilabel:`Next`.

  .. code-block:: json

     {
       "mappings": {
         "dynamic": false,
         "fields": {
           "title": {
             "type": "string",
             "analyzer": "lucene.standard",
             "multi": {
               "keywordAnalyzer": {
                 "type": "string",
                 "analyzer": "lucene.keyword"
               }
             }
           },
           "genres": {
             "type": "string",
             "analyzer": "lucene.standard"
           },
           "plot": {
             "type": "string",
             "analyzer": "lucene.standard"
           }
         }
       }
     }

  The above index definition specifies: 
              
  - The :ref:`standard analyzer <ref-standard-analyzer>` as the default 
    analyzer for all three indexed fields. 
  - The :ref:`keyword analyzer <ref-keyword-analyzer>` as an alternate 
    analyzer for the ``title`` field, with the name 
    ``keywordAnalyzer``. The keyword analyzer indexes the entire field 
    as a single term, so it only returns results if the search term and 
    the specified field match exactly. For more information about 
    ``multi`` analyzer designations, see :ref:`ref-path`.
  - The :ref:`standard analyzer <ref-standard-analyzer>` as the 
    analyzer by default for queries on the ``genres`` field, which is 
    an array of strings. For indexing arrays, |fts| only requires the 
    data type of the array elements. You don't have to specify that the 
    data is contained in an array in the index definition. 

---
stepnum: 6
title: "Click :guilabel:`Create Search Index`."
ref: click-create-search-index

---
stepnum: 7
title: "Close the :guilabel:`You're All Set!` Modal Window."
ref: close-in-progress
content: |

  A modal window appears to let you know your index is building. Click 
  the :guilabel:`Close` button.

---
stepnum: 8
title: "Wait for the index to finish building."
ref: wait-for-index
content: |

  The index should take about one minute to build. While it is
  building, the :guilabel:`Status` column reads ``Build in
  Progress``. When it is finished building, the
  :guilabel:`Status` column reads ``Active``.

...
