================================================================
Enforce Keyfile Access Control in a Replica Set without Downtime
================================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

To secure against unauthorized access, enforce :ref:`authentication
<authentication>` for your deployments. Authentication
for replica sets consists of :ref:`internal authentication <inter-process-auth>`
among the replica set members, and :ref:`user access control <authorization>`
for clients connecting to the replica set.

If your deployment does not enforce authentication, MongoDB 3.4+ provides the
:option:`--transitionToAuth <mongod --transitionToAuth>` option for performing a no-downtime upgrade to
enforcing authentication.

.. versionadded:: 3.4

   MongoDB 3.2 and earlier do not support a no-downtime upgrade to enforce
   authentication. See
   :doc:`/tutorial/enforce-keyfile-access-control-in-existing-replica-set` for
   enforcing authentication in an existing MongoDB 3.2 replica set.

This tutorial uses the :ref:`keyfile <internal-auth-keyfile>` internal
authentication mechanism for internal security, and
:ref:`authentication-scram`-based :ref:`role-based access controls
<authorization>` for client connections.

Cloud Manager and Ops Manager
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you are using Cloud Manager or Ops Manager to manage your deployment,
see the respective :mms-docs:`Cloud Manager manual
</tutorial/edit-host-authentication-credentials>`
or the :opsmgr:`Ops Manager manual
</tutorial/edit-host-authentication-credentials>` to enforce authentication.

Architecture
~~~~~~~~~~~~

This tutorial assumes that your replica set can elect a new
:term:`primary` after stepping down the existing primary replica set member.
This requires:

- A majority of voting replica set members available after stepping down the
  :term:`primary`.

- At least one :term:`secondary` member that is not :ref:`delayed
  <replica-set-delayed-members>`, :ref:`hidden <replica-set-hidden-members>`,
  or :ref:`Priority 0 <replica-set-secondary-only-members>`.

Transition State
~~~~~~~~~~~~~~~~

A :binary:`~bin.mongod` running with :option:`--transitionToAuth <mongod --transitionToAuth>` accepts both
authenticated and non-authenticated connections. Clients connected to the
:binary:`~bin.mongod` during this transition state can perform read, write, and
administrative operations on any database.

Client Access
~~~~~~~~~~~~~

At the end of the following procedure, the replica set rejects any
client attempting to make a non-authenticated connection. The procedure creates
:ref:`users <users>` for client applications to use when connecting to the
replica set.

See :ref:`security-checklist-role-based-access-control` for user creation and
management best practices.

IP Binding
~~~~~~~~~~~

.. versionchanged:: 3.6

.. include:: /includes/fact-default-bind-ip-change.rst

Passwords
~~~~~~~~~

.. important::

   Passwords should be random, long, and complex to ensure system
   security and to prevent or delay malicious access.

.. _security-replSet-nodowntime-enable-access-control:

Enforce Keyfile Access Control on Existing Replica Set
------------------------------------------------------

.. include:: /includes/steps/enable-authentication-in-replica-set-no-downtime.rst

x.509 Internal Authentication
-----------------------------

For details on using x.509 for internal authentication, see
:doc:`/tutorial/configure-x509-member-authentication`.

To upgrade from keyfile internal authentication to x.509 internal
authentication, see
:doc:`/tutorial/upgrade-keyfile-to-x509`.
