======================
db.collection.update()
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.collection.update(query, update, options)

   Modifies an existing document or documents in a collection. The
   method can modify specific fields of an existing document or documents
   or replace an existing document entirely, depending on the
   :ref:`update parameter <update-parameter>`.

   By default, the :method:`~db.collection.update()` method updates a
   **single** document. Set the :ref:`multi-parameter` to update all
   documents that match the query criteria.

   The :method:`~db.collection.update()` method has the following form:

   .. versionchanged:: 2.6

   .. code-block:: javascript

      db.collection.update(
         <query>,
         <update>,
         {
           upsert: <boolean>,
           multi: <boolean>,
           writeConcern: <document>,
           collation: <document>
         }
      )

   The :method:`~db.collection.update()` method takes the following
   parameters:

   .. include:: /includes/apiargs/method-db.collection.update-param.rst

   .. versionchanged:: 2.6
      The :method:`~db.collection.update()` method returns an object that
      contains the status of the operation.

   :returns: A :ref:`writeresults-update` object that contains the
      status of the operation.

Behavior
--------

.. _update-wc:

Write Concern
~~~~~~~~~~~~~

.. versionchanged:: 2.6

The :method:`~db.collection.update()` method uses the
:dbcommand:`update` command, which uses the default :doc:`write concern
</reference/write-concern>`. To specify a different write concern,
include the ``writeConcern`` option in the options parameter. See
:ref:`example-update-write-concern` for an example.

.. _update-parameter:

Update Parameter
~~~~~~~~~~~~~~~~

The :method:`~db.collection.update()` method either modifies specific
fields in existing documents or replaces an existing document entirely.

Update Specific Fields
``````````````````````

If the ``<update>`` document contains :ref:`update operator
<update-operators>` modifiers, such as those using the
:update:`$set` modifier, then:

- The ``<update>`` document must contain *only* :ref:`update operator
  <update-operators>` expressions.

- The :method:`~db.collection.update()` method updates only the
  corresponding fields in the document.

To update an embedded document or an array as a whole, specify the
replacement value for the field. To update particular fields in an
embedded document or in an array, use :ref:`dot notation
<document-dot-notation>` to specify the field.

Replace a Document Entirely
```````````````````````````

If the ``<update>`` document contains *only* ``field:value``
expressions, then:

- The :method:`~db.collection.update()` method *replaces* the matching
  document with the ``<update>`` document. The
  :method:`~db.collection.update()` method *does not* replace the
  ``_id`` value. For an example, see
  :ref:`example-update-replace-fields`.

- :method:`~db.collection.update()` *cannot* :ref:`update multiple
  documents <multi-parameter>`.

.. _upsert-parameter:

Upsert Option
~~~~~~~~~~~~~

.. _upsert-behavior:

Upsert Behavior
```````````````

If ``upsert`` is ``true`` and no document matches the query
criteria, :method:`~db.collection.update()` inserts a *single* document.
The update creates the new document with either:

- The fields and values of the ``<update>`` parameter if the
  ``<update>`` parameter is a replacement document (i.e., contains
  only field and value pairs). If neither the ``<query>`` nor the
  ``<update>`` document specifies an ``_id`` field, MongoDB adds
  the ``_id`` field with an :ref:`objectid` value.

- The fields and values of both the ``<query>`` and ``<update>``
  parameters if the ``<update>`` parameter contains :ref:`update
  operator <update-operators>` expressions. The update creates a base
  document from the equality clauses in the ``<query>`` parameter, and
  then applies the update expressions from the ``<update>`` parameter.
  :doc:`Comparison </reference/operator/query>` operations from the
  ``<query>`` will not be included in the new document.

If ``upsert`` is ``true`` and there are documents that match the query
criteria, :method:`~db.collection.update()` performs an update.

.. seealso:: :update:`$setOnInsert`

.. _update-with-unique-indexes:

Use Unique Indexes
``````````````````

.. warning:: To avoid inserting the same document more than once,
   only use ``upsert: true`` if the ``query`` field is uniquely
   indexed.

Given a collection named ``people`` where no documents have a ``name``
field that holds the value ``Andy``. Consider when multiple clients
issue the following *update* with ``upsert: true`` at the same
time:

.. code-block:: javascript

   db.people.update(
      { name: "Andy" },
      {
         name: "Andy",
         rating: 1,
         score: 1
      },
      { upsert: true }
   )

If all :method:`~db.collection.update()` operations complete the
``query`` portion before any client successfully inserts data, **and**
there is no unique index on the ``name`` field, then each update
operation may result in an insert.

To prevent MongoDB from inserting the same document more than once,
create a :ref:`unique index <index-type-unique>` on the ``name`` field.
With a unique index, if multiple applications issue the same update
with ``upsert: true``, *exactly one*
:method:`~db.collection.update()` would successfully insert a new
document.

The remaining operations would either:

- update the newly inserted document, or

- fail when they attempted to insert a duplicate.

  If the operation fails because of a duplicate index key error,
  applications may retry the operation which will succeed as an update
  operation.

.. _mongodb30-upsert-id:

``upsert:true`` with a Dotted ``_id`` Query
```````````````````````````````````````````

.. include:: /includes/fact-mongodb30-upsert-id.rst

.. include:: /includes/fact-mongodb30-upsert-id-example.rst


.. _multi-parameter:

Multi Parameter
~~~~~~~~~~~~~~~

If ``multi`` is set to ``true``, the :method:`~db.collection.update()`
method updates all documents that meet the ``<query>`` criteria. The
``multi`` update operation may interleave with other operations, both
read and/or write operations. For unsharded collections, you can
override this behavior with the :update:`$isolated` operator, which
isolates the update operation and disallows yielding during the
operation. This isolates the update so that no client can see the
updated documents until they are all processed, or an error stops the
update operation.

If the :ref:`\<update\> <update-parameter>` document contains *only*
``field:value`` expressions, then :method:`~db.collection.update()`
*cannot* update multiple documents.

For an example, see :ref:`example-update-multi`.

Sharded Collections
~~~~~~~~~~~~~~~~~~~

.. |single-modification-operation-names| replace:: :method:`~db.collection.update()`

.. |single-modification-operation-option| replace:: ``multi: false``

.. include:: /includes/fact-single-modification-in-sharded-collections.rst

.. seealso:: :method:`~db.collection.findAndModify()`

.. _update-method-examples:

Examples
--------

.. _example-update-specific-fields:

Update Specific Fields
~~~~~~~~~~~~~~~~~~~~~~

To update specific fields in a document, use :ref:`update operators
<update-operators>` in the ``<update>`` parameter.

For example, given a ``books`` collection with the following document:

.. code-block:: javascript

   {
     _id: 1,
     item: "TBD",
     stock: 0,
     info: { publisher: "1111", pages: 430 },
     tags: [ "technology", "computer" ],
     ratings: [ { by: "ijk", rating: 4 }, { by: "lmn", rating: 5 } ],
     reorder: false
   }

The following operation uses:

- the :update:`$inc` operator to increment the ``stock`` field; and

- the :update:`$set` operator to replace the value of the ``item``
  field, the ``publisher`` field in the ``info`` embedded document, the
  ``tags`` field, and the second element in the ``ratings`` array.

.. code-block:: javascript

   db.books.update(
      { _id: 1 },
      {
        $inc: { stock: 5 },
        $set: {
          item: "ABC123",
          "info.publisher": "2222",
          tags: [ "software" ],
          "ratings.1": { by: "xyz", rating: 3 }
        }
      }
   )

The updated document is the following:

.. code-block:: javascript

   {
     "_id" : 1,
     "item" : "ABC123",
     "stock" : 5,
     "info" : { "publisher" : "2222", "pages" : 430 },
     "tags" : [ "software" ],
     "ratings" : [ { "by" : "ijk", "rating" : 4 }, { "by" : "xyz", "rating" : 3 } ],
     "reorder" : false
   }

.. seealso:: :update:`$set`, :update:`$inc`,
   :doc:`/reference/operator/update`,
   :ref:`dot notation <document-dot-notation>`

Remove Fields
~~~~~~~~~~~~~

The following operation uses the :update:`$unset` operator to remove
the ``tags`` field:

.. code-block:: javascript

   db.books.update( { _id: 1 }, { $unset: { tags: 1 } } )

.. seealso:: :update:`$unset`, :update:`$rename`, :doc:`/reference/operator/update`

.. _example-update-replace-fields:

Replace All Fields
~~~~~~~~~~~~~~~~~~

Given the following document in the ``books`` collection:

.. code-block:: javascript

   {
     _id: 2,
     item: "XYZ123",
     stock: 15,
     info: { publisher: "5555", pages: 150 },
     tags: [ ],
     ratings: [ { by: "xyz", rating: 5, comment: "ratings and reorder will go away after update"} ],
     reorder: false
   }

The following operation passes an ``<update>`` document that contains
only field and value pairs. The ``<update>`` document completely
replaces the original document except for the ``_id`` field.

.. code-block:: javascript

   db.books.update(
      { item: "XYZ123" },
      {
        item: "XYZ123",
        stock: 10,
        info: { publisher: "2255", pages: 150 },
        tags: [ "baking", "cooking" ]
      }
   )

The updated document contains *only* the fields from the replacement
document and the ``_id`` field. That is, the fields ``ratings`` and
``reorder`` no longer exist in the updated document since the fields
were not in the replacement document.

.. code-block:: javascript

   {
      "_id" : 2,
      "item" : "XYZ123",
      "stock" : 10,
      "info" : { "publisher" : "2255", "pages" : 150 },
      "tags" : [ "baking", "cooking" ]
   }

.. _example-update-upsert:

Insert a New Document if No Match Exists
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


The following update sets the :ref:`upsert <upsert-parameter>` option
to ``true`` so that :method:`~db.collection.update()` creates a new
document in the ``books`` collection if no document matches the
``<query>`` parameter:

.. code-block:: javascript

   db.books.update(
      { item: "ZZZ135" },
      {
        item: "ZZZ135",
        stock: 5,
        tags: [ "database" ]
      },
      { upsert: true }
   )

If no document matches the ``<query>`` parameter, the update operation
inserts a document with *only* the fields and values of the
``<update>`` document and a new unique ``ObjectId`` for the ``_id``
field:

.. code-block:: javascript

   {
     "_id" : ObjectId("542310906694ce357ad2a1a9"),
     "item" : "ZZZ135",
     "stock" : 5,
     "tags" : [ "database" ]
   }

For more information on ``upsert`` option and the inserted document,
:ref:`upsert-parameter`.

.. _example-update-multi:

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

To update multiple documents, set the ``multi`` option to ``true``. For
example, the following operation updates all documents where ``stock``
is less than or equal to ``10``:

.. code-block:: javascript

   db.books.update(
      { stock: { $lte: 10 } },
      { $set: { reorder: true } },
      { multi: true }
   )

If the ``reorder`` field does not exist in the matching document(s),
the :update:`$set` operator will add the field with the specified
value. See :update:`$set` for more information.

.. _example-update-write-concern:

Override Default Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation on a replica set specifies a :doc:`write
concern </reference/write-concern>` of ``"w: majority"`` with a
``wtimeout`` of 5000 milliseconds such that the method returns after
the write propagates to a majority of the voting replica set members or
the method times out after 5 seconds.

.. include:: /includes/fact-majority-write-concern-change.rst

.. code-block:: javascript

   db.books.update(
      { stock: { $lte: 10 } },
      { $set: { reorder: true } },
      {
        multi: true,
        writeConcern: { w: "majority", wtimeout: 5000 }
      }
   )

Combine the ``upsert`` and ``multi`` Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Given a ``books`` collection that includes the following documents:

.. code-block:: javascript

   {
     _id: 5,
     item: "EFG222",
     stock: 18,
     info: { publisher: "0000", pages: 70 },
     reorder: true
   }
   {
     _id: 6,
     item: "EFG222",
     stock: 15,
     info: { publisher: "1111", pages: 72 },
     reorder: true
   }

The following operation specifies both the ``multi`` option and the
``upsert`` option. If matching documents exist, the operation updates
all matching documents. If no matching documents exist, the operation
inserts a new document.

.. code-block:: javascript

   db.books.update(
      { item: "EFG222" },
      { $set: { reorder: false, tags: [ "literature", "translated" ] } },
      { upsert: true, multi: true }
   )

The operation updates all matching documents and results in the
following:

.. code-block:: javascript

   {
      "_id" : 5,
      "item" : "EFG222",
      "stock" : 18,
      "info" : { "publisher" : "0000", "pages" : 70 },
      "reorder" : false,
      "tags" : [ "literature", "translated" ]
   }
   {
      "_id" : 6,
      "item" : "EFG222",
      "stock" : 15,
      "info" : { "publisher" : "1111", "pages" : 72 },
      "reorder" : false,
      "tags" : [ "literature", "translated" ]
   }

If the collection had *no* matching document, the operation would
result in the insertion of a document using the fields from both the
``<query>`` and the ``<update>`` specifications:

.. code-block:: javascript

   {
      "_id" : ObjectId("5423200e6694ce357ad2a1ac"),
      "item" : "EFG222",
      "reorder" : false,
      "tags" : [ "literature", "translated" ]
   }

For more information on ``upsert`` option and the inserted document,
:ref:`upsert-parameter`.

Specify Collation
~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/collation-versionadded.rst

A collection ``myColl`` has the following documents:

.. code-block:: javascript

   { _id: 1, category: "café", status: "A" }
   { _id: 2, category: "cafe", status: "a" }
   { _id: 3, category: "cafE", status: "a" }

The following operation includes the :ref:`collation <collation>`
option:

.. code-block:: javascript

   db.myColl.update(
      { category: "cafe" },
      { $set: { status: "Updated" } },
      { collation: { locale: "fr", strength: 1 } }
   );

.. _writeresults-update:

WriteResult
-----------

.. versionchanged:: 2.6

Successful Results
~~~~~~~~~~~~~~~~~~

The :method:`~db.collection.update()` method returns a
:method:`WriteResult` object that contains the status of the operation.
Upon success, the :method:`WriteResult` object contains the number of
documents that matched the query condition, the number of documents
inserted by the update, and the number of documents modified:

.. code-block:: javascript

   WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

.. see:: :data:`WriteResult.nMatched`, :data:`WriteResult.nUpserted`,
   :data:`WriteResult.nModified`

Write Concern Errors
~~~~~~~~~~~~~~~~~~~~

If the :method:`~db.collection.update()` method encounters write
concern errors, the results include the
:data:`WriteResult.writeConcernError` field:

.. code-block:: javascript

   WriteResult({
      "nMatched" : 1,
      "nUpserted" : 0,
      "nModified" : 1,
      "writeConcernError" : {
         "code" : 64,
         "errmsg" : "waiting for replication timed out at shard-a"
      }
   })

.. seealso:: :method:`WriteResult.hasWriteConcernError()`

Errors Unrelated to Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the :method:`~db.collection.update()` method encounters a non-write
concern error, the results include the :data:`WriteResult.writeError`
field:

.. code-block:: javascript

   WriteResult({
      "nMatched" : 0,
      "nUpserted" : 0,
      "nModified" : 0,
      "writeError" : {
         "code" : 7,
         "errmsg" : "could not contact primary for replica set shard-a"
      }
   })

.. seealso:: :method:`WriteResult.hasWriteError()`
