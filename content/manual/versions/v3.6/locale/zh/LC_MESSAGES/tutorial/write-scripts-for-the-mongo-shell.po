#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:3
msgid "Write Scripts for the ``mongo`` Shell"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:13
msgid ""
"You can write scripts for the :binary:`~bin.mongo` shell in JavaScript "
"that manipulate data in MongoDB or perform administrative operation."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:16
msgid ""
"This tutorial provides an introduction to writing JavaScript that uses "
"the :binary:`~bin.mongo` shell to access MongoDB."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:22
msgid "Opening New Connections"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:24
msgid ""
"From the :binary:`~bin.mongo` shell or from a JavaScript file, you can "
"instantiate database connections using the :method:`Mongo()` constructor:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:34
msgid ""
"Consider the following example that instantiates a new connection to the "
"MongoDB instance running on localhost on the default port and sets the "
"global ``db`` variable to ``myDatabase`` using the "
":method:`~Mongo.getDB()` method:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:44
msgid ""
"If connecting to a MongoDB instance that enforces access control, you can"
" use the :method:`db.auth()` method to authenticate."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:47
msgid ""
"Additionally, you can use the :method:`connect()` method to connect to "
"the MongoDB instance. The following example connects to the MongoDB "
"instance that is running on ``localhost`` with the non-default port "
"``27020`` and set the global ``db`` variable:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:56
msgid ":doc:`/reference/method/`"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:59
msgid "Differences Between Interactive and Scripted ``mongo``"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:61
msgid ""
"When writing scripts for the :binary:`~bin.mongo` shell, consider the "
"following:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:64
msgid ""
"To set the ``db`` global variable, use the :method:`~Mongo.getDB()` "
"method or the :method:`connect()` method. You can assign the database "
"reference to a variable other than ``db``."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:68
msgid ""
"Write operations in the :binary:`~bin.mongo` shell use a write concern of"
" :ref:`{ w: 1 } <wc-w>` by default. If performing bulk operations, use "
"the :method:`Bulk()` methods. See :ref:`write-methods-incompatibility` "
"for more information."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:73
msgid ""
"You **cannot** use any shell helper (e.g. ``use <dbname>``, ``show dbs``,"
" etc.) inside the JavaScript file because they are not valid JavaScript."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:77
msgid ""
"The following table maps the most common :binary:`~bin.mongo` shell "
"helpers to their JavaScript equivalents."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:84
msgid "Shell Helpers"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:86
msgid "JavaScript Equivalents"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:88
msgid "``show dbs``, ``show databases``"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:177
msgid ""
"In interactive mode, :binary:`~bin.mongo` prints the results of "
"operations including the content of all cursors. In scripts, either use "
"the JavaScript ``print()`` function or the :binary:`~bin.mongo` specific "
"``printjson()`` function which returns formatted JSON."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:184
msgid ""
"To print all items in a result cursor in :binary:`~bin.mongo` shell "
"scripts, use the following idiom:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:197
msgid "Scripting"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:199
msgid "From the system prompt, use :binary:`~bin.mongo` to evaluate JavaScript."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:202
msgid "``--eval`` option"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:204
msgid ""
"Use the :option:`--eval <mongo --eval>` option to :binary:`~bin.mongo` to"
" pass the shell a JavaScript fragment, as in the following:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:211
msgid ""
"This returns the output of :method:`db.getCollectionNames()` using the "
":binary:`~bin.mongo` shell connected to the :binary:`~bin.mongod` or "
":binary:`~bin.mongos` instance running on port ``27017`` on the "
"``localhost`` interface."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:219
msgid "Execute a JavaScript file"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:221
msgid ""
"You can specify a ``.js`` file to the :binary:`~bin.mongo` shell, and "
":binary:`~bin.mongo` will execute the JavaScript directly. Consider the "
"following example:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:229
msgid ""
"This operation executes the ``myjsfile.js`` script in a "
":binary:`~bin.mongo` shell that connects to the ``test`` :term:`database`"
" on the :binary:`~bin.mongod` instance accessible via the ``localhost`` "
"interface on port ``27017``."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:234
msgid ""
"Alternately, you can specify the mongodb connection parameters inside of "
"the javascript file using the ``Mongo()`` constructor. See :ref:`mongo-"
"shell-new-connections` for more information."
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:1
msgid ""
"You can execute a ``.js`` file from within the :binary:`~bin.mongo` "
"shell, using the :method:`load()` function, as in the following:"
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:8
msgid "This function loads and executes the :file:`myjstest.js` file."
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:10
msgid ""
"The :method:`load()` method accepts relative and absolute paths. If the "
"current working directory of the :binary:`~bin.mongo` shell is "
":file:`/data/db`, and the :file:`myjstest.js` resides in the "
":file:`/data/db/scripts` directory, then the following calls within the "
":binary:`~bin.mongo` shell would be equivalent:"
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:21
msgid ""
"There is no search path for the :method:`load()` function. If the desired"
" script is not in the current working directory or the full specified "
"path, :binary:`~bin.mongo` will not be able to access the file."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid ""
#~ "If connecting to a MongoDB instance "
#~ "that has enforces access control, you"
#~ " can use the :method:`db.auth()` method "
#~ "to authenticate."
#~ msgstr ""

# 631757eaf88144eba9acfbc34417d3c2
#~ msgid "On this page"
#~ msgstr ""

# 31142f52bee947fbb5607cf188ee8073
#~ msgid ""
#~ "You can write scripts for the "
#~ ":program:`mongo` shell in JavaScript that "
#~ "manipulate data in MongoDB or perform"
#~ " administrative operation. For more "
#~ "information about the :program:`mongo` shell,"
#~ " see the :ref:`running-js-scripts-"
#~ "in-mongo-on-mongod-host` section for"
#~ " more information about using these "
#~ ":program:`mongo` script."
#~ msgstr ""

# 6abb31f4425d4f0da8167884ea4b05f3
#~ msgid ""
#~ "This tutorial provides an introduction "
#~ "to writing JavaScript that uses the "
#~ ":program:`mongo` shell to access MongoDB."
#~ msgstr ""

# 6d22a0e651324f4486b171ea3e565670
#~ msgid ""
#~ "From the :program:`mongo` shell or from"
#~ " a JavaScript file, you can "
#~ "instantiate database connections using the "
#~ ":method:`Mongo()` constructor:"
#~ msgstr ""

# 71d156bf15704c63b196712f4a385225
#~ msgid ""
#~ "When writing scripts for the "
#~ ":program:`mongo` shell, consider the "
#~ "following:"
#~ msgstr ""

# 676ce9008c2d4e0b9fb7bdafa1878e24
#~ msgid ""
#~ "Write operations in the :program:`mongo` "
#~ "shell use a write concern of "
#~ ":ref:`{ w: 1 } <wc-w>` by default."
#~ " If performing bulk operations, use "
#~ "the :method:`Bulk()` methods. See :ref"
#~ ":`write-methods-incompatibility` for more "
#~ "information."
#~ msgstr ""

# 7e40bbe904494f2096d6e42194da89f4
#~ msgid ""
#~ "Before MongoDB 2.6, call "
#~ ":method:`db.getLastError()` explicitly to wait "
#~ "for the result of :doc:`write operations"
#~ " </crud>`."
#~ msgstr ""

# 0e1e0cbfa68843c2a5ae5229627ac557
#~ msgid ""
#~ "The following table maps the most "
#~ "common :program:`mongo` shell helpers to "
#~ "their JavaScript equivalents."
#~ msgstr ""

# de107397e22b411193417bf4eb4219b7
#~ msgid "``use <db>``"
#~ msgstr ""

# 1d00460eb9c14f25b10dc6bd831b6e3b
#~ msgid "``show collections``"
#~ msgstr ""

# 15dff06dcac247ecb4deb4fc6bcffdee
#~ msgid "``show users``"
#~ msgstr ""

# 8044c209c16847fabb4ab6ed0dfe6068
#~ msgid "``show roles``"
#~ msgstr ""

# 6efefb2ed8754a18bfedd046b8ad6139
#~ msgid "``show log <logname>``"
#~ msgstr ""

# 8a982c5828714cef861d0ed63e26ee12
#~ msgid "``show logs``"
#~ msgstr ""

# bc9bcaace49c4f3daf4697c450ff72a2
#~ msgid "``it``"
#~ msgstr ""

# 496f9904592646119227bc42492ce3db
#~ msgid ""
#~ "In interactive mode, :program:`mongo` prints"
#~ " the results of operations including "
#~ "the content of all cursors. In "
#~ "scripts, either use the JavaScript "
#~ "``print()`` function or the :program:`mongo`"
#~ " specific ``printjson()`` function which "
#~ "returns formatted JSON."
#~ msgstr ""

# ae9e97be5989461a84bea5b968060f21
#~ msgid "Example"
#~ msgstr ""

# d99b2326d78f4f6ab36e1a0d95b3991b
#~ msgid ""
#~ "To print all items in a result "
#~ "cursor in :program:`mongo` shell scripts, "
#~ "use the following idiom:"
#~ msgstr ""

# a73143a43ddc454ab916f8235b6a50a7
#~ msgid "From the system prompt, use :program:`mongo` to evaluate JavaScript."
#~ msgstr ""

# 4935095f17164bd6bf50ad415d0222e1
#~ msgid ""
#~ "Use the :option:`--eval <mongo --eval>` "
#~ "option to :program:`mongo` to pass the"
#~ " shell a JavaScript fragment, as in"
#~ " the following:"
#~ msgstr ""

# d9c585f0e7074d7aa40c6e284c0ba7a1
#~ msgid ""
#~ "This returns the output of "
#~ ":method:`db.getCollectionNames()` using the "
#~ ":program:`mongo` shell connected to the "
#~ ":program:`mongod` or :program:`mongos` instance "
#~ "running on port ``27017`` on the "
#~ "``localhost`` interface."
#~ msgstr ""

# 4812de13da064e939c91fbbaabc24c2e
#~ msgid ""
#~ "You can specify a ``.js`` file to"
#~ " the :program:`mongo` shell, and "
#~ ":program:`mongo` will execute the JavaScript"
#~ " directly. Consider the following example:"
#~ msgstr ""

# b72a207315e74cc7832d095fbe874889
#~ msgid ""
#~ "This operation executes the ``myjsfile.js``"
#~ " script in a :program:`mongo` shell "
#~ "that connects to the ``test`` "
#~ ":term:`database` on the :program:`mongod` "
#~ "instance accessible via the ``localhost`` "
#~ "interface on port ``27017``."
#~ msgstr ""

# bf1387d35b50445c956dc848046dec5b
#~ msgid ""
#~ "You can execute a ``.js`` file "
#~ "from within the :program:`mongo` shell, "
#~ "using the :method:`load()` function, as "
#~ "in the following:"
#~ msgstr ""

# a7a034c62d5b474d880f9e05e533e6e5
#~ msgid ""
#~ "The :method:`load()` method accepts relative"
#~ " and absolute paths. If the current"
#~ " working directory of the :program:`mongo`"
#~ " shell is :file:`/data/db`, and the "
#~ ":file:`myjstest.js` resides in the "
#~ ":file:`/data/db/scripts` directory, then the "
#~ "following calls within the :program:`mongo`"
#~ " shell would be equivalent:"
#~ msgstr ""

# 163f6b26e6fb4b328fe8d0f50e2eb8aa
#~ msgid ""
#~ "There is no search path for the"
#~ " :method:`load()` function. If the desired"
#~ " script is not in the current "
#~ "working directory or the full specified"
#~ " path, :program:`mongo` will not be "
#~ "able to access the file."
#~ msgstr ""

