.. _encoding-channels:

=================
Encoding Channels
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Encoding channels are the building blocks of your visualizations.
When you apply a data field from your collection to an encoding
channel, |charts| processes the data from that field and adds it to
your visualization. The channels are the means by which |charts-short|
translates data from your
:manual:`collection </core/databases-and-collections/>` to the
visualization, and the encoding process dictates how that data
ultimately appears in the chart.

|charts| provides various encoding channels to visualize your data
based on the type of chart selected. Each encoding channel type
provides different capabilities for processing and visualizing your
data, which vary based on the type of data you provide to the
channel. The following table provides a brief description for each
encoding channel type in |charts|:

.. _charts-channel-type-table:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Encoding Channel Type
     - Description

   * - Value
     - A point on the chart is created from the chosen field for each
       document in the collection. You may only assign fields with a
       ``numeric`` or ``date`` type to a :guilabel:`Value` channel.

   * - Category
     - Each *unique* value from this field in the collection is used
       as a chart category. The :guilabel:`Category` encoding channel
       provides the following additional visualization options:

       - For fields with a ``string`` data type, you can specify a
         field to :ref:`sort <charts-sort-data>` on and the sort order.

       - For fields with a ``numeric`` data type, you can toggle
         :ref:`data binning <charts-bin-data>` and select the bin size.

       - For fields with a ``date`` data type, you can toggle date
         grouping and select the grouping period.

   * - Aggregation
     - A point on the chart is created by applying an
       :manual:`aggregation <aggregation>` function over the values of
       this field from multiple documents; for example
       :manual:`$count </reference/operator/aggregation/count/>` and
       :manual:`$sum </reference/operator/aggregation/sum/>`. For more
       information on aggregation in |charts-short|, see the
       :ref:`Aggregation <building-charts-aggregation>` section.

.. _building-charts-aggregation:

Aggregation
-----------

Dragging a field onto an :guilabel:`aggregation`
:ref:`encoding channel <encoding-channels>` allows you to use an
:manual:`aggregation pipeline operator </reference/operator/aggregation/>`
on that field. The aggregation operators available in the chart
builder change based on the :manual:`data type </reference/bson-types/>`
of the selected field. MongoDB Charts categorizes the field data type
as either a ``number``, ``string``, or ``date`` and displays
appropriate aggregation options accordingly.

.. example::

   Donut charts provide two encoding channels:

   - A :guilabel:`category` channel called :guilabel:`Label` dictating
     which field to use when dividing the sections of the chart.

   - An :guilabel:`aggregation` channel called :guilabel:`Arc` dictating
     the aggregation operation to perform on the :guilabel:`Label`
     category.

   The following donut chart examines NASA's Landslide data source to
   show the frequency of various landslide triggers by performing a
   :manual:`$count </reference/operator/aggregation/count/>` aggregation
   on the ``trigger`` field:

   .. figure:: /images/charts/donut-chart-example-2.png
      :figwidth: 720px
      :alt: Donut chart example

   We see from the chart that the most common landslide trigger is
   ``Downpour`` followed by ``Rain``.

.. _multi-series-charts:

Multi-Series Charts
-------------------

|charts| supports building *multi-series* charts, which split your
chart data into groups, or *series*, to compare additional
fields within your schema. There are two ways to create multi-series
charts:

- :ref:`Using multiple aggregation or value field mappings
  <multiple-field-mappings>`. Use this method to compare or aggregate
  upon multiple non-categorical fields in the schema.

- :ref:`Using the Series field in the chart builder
  <charts-series-encoding>`. Use this method when grouping data based
  on a discrete list of items.

.. _multiple-field-mappings:

Multiple Field Mappings
~~~~~~~~~~~~~~~~~~~~~~~

|charts| allows you to map multiple :ref:`aggregation
<building-charts-aggregation>` or :guilabel:`value`
:ref:`encoding channels <encoding-channels>` to a single chart property
(e.g. :guilabel:`X Axis` or :guilabel:`Y Axis`). This allows you to
compare additional fields in your visualization by creating new series
based on the encoding channels added.

After dragging a field to an :guilabel:`aggregation`
or :guilabel:`value` :ref:`encoding channel <encoding-channels>`, an
additional optional encoding channel of the same type appears below the
one which was just added, allowing you to add additional series to your
visualization. This process repeats with each channel you add, so
you can map as many fields as desired to your chart.

.. example::

   The following multi-series column chart shows average movie ratings
   by genre from two different sources: `IMDB <https://www.imdb.com/>`_
   and `Rotten Tomatoes <https://www.rottentomatoes.com/>`_:

   .. figure:: /images/charts/multi-series-agg.png
      :figwidth: 720px
      :alt: Movie Ratings Multiseries Chart

   There are two :guilabel:`aggregation` encoding channels on
   the chart's :guilabel:`Y Axis`, one for each of the site's rating
   fields. By selecting the :guilabel:`mean` aggregation option, the
   chart aggregates these two fields using the
   :manual:`$avg </reference/operator/aggregation/avg/>` operator to
   provide a comparison of the average of two fields in the same
   column.

.. tip::

   Use multiple field mappings to create a multi-series chart when
   the values being compared in the visualization come from two or more
   separate fields in the schema.

   In the example above, there is one series for Rotten Tomato ratings
   and one series for IMDB ratings. Since these are separate fields
   within the schema, adding multiple :guilabel:`aggregation` encoding
   channels to map the data is the best choice to compare the fields.

.. _charts-series-encoding:

Series Encoding Channel
~~~~~~~~~~~~~~~~~~~~~~~

You can also create multi-series charts by using the :guilabel:`Series`
field in the chart builder. The :guilabel:`Series` field differs from
:guilabel:`aggregation` :ref:`encoding channels <encoding-channels>`
because it instead utilizes a :ref:`Category encoding channel
<charts-channel-type-table>`. When creating a series using the
:guilabel:`category` encoding channel, each unique value from the
data field becomes a series in the visualization.

.. example::

   The following multi-series column chart shows order data from an
   office supply store, showing the most common items sold by
   store location:

   .. figure:: /images/charts/series-encoding-channel-example.png
      :figwidth: 720px
      :alt: Supply Store Series Encoding Channel Example

   By using the ``item.name`` in the :guilabel:`Series` encoding
   channel, a series within each location group is added for each
   item name.

.. tip::

   The :guilabel:`Series` field is useful when you are grouping data
   based on a discrete list of items. This approach should be used when
   the values for all series are stored in a single field, with a
   separate field used to establish the discrete categories.
