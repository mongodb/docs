=============
rs.stepDown()
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Description
-----------

.. method:: rs.stepDown(stepDownSecs, secondaryCatchUpPeriodSecs)

   Forces the :term:`primary` of the replica set to become a
   :term:`secondary`, triggering an :ref:`election for primary
   <replica-set-election-internals>`. The method steps down the primary
   for a specified number of seconds; during this period, the stepdown
   member is ineligible from becoming primary.

   The method only steps down the primary if an :data:`electable
   <~replSetGetConfig.members[n].priority>` secondary is up-to-date
   with the primary, waiting up to 10 seconds for a secondary to catch
   up.

   The method is only valid against the primary and will error if run
   on a non-primary member.
   
   The :method:`rs.stepDown()` method has the following parameters:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``stepDownSecs``
   
        - number
   
        - The number of seconds to step down the primary, during which time the
          stepdown member is ineligible for becoming primary. If you specify a
          non-numeric value, the command uses ``60`` seconds.
          
          The stepdown period starts from the time that the
          :binary:`~bin.mongod` receives the command. The stepdown period must
          be greater than the ``secondaryCatchUpPeriodSecs``.
          
          
   
      * - ``secondaryCatchUpPeriodSecs``
   
        - number
   
        - Optional. The number of seconds that ``mongod`` will wait for an
          electable secondary to catch up to the primary.
          
          When specified, ``secondaryCatchUpPeriodSecs`` 
          overrides the default wait time of ``10`` seconds.
          
          
   


   :method:`rs.stepDown()` provides a wrapper around the
   command :dbcommand:`replSetStepDown`.

Behavior
--------

.. versionadded:: 3.0

Before stepping down, :method:`rs.stepDown()` will attempt to
terminate long running user operations that would block the primary
from stepping down, such as an index build, a write operation or a
map-reduce job.

To avoid rollbacks, :method:`rs.stepDown()`, by default, only
steps down the primary if an electable secondary is completely caught up
with the primary. The command will wait up to either 10 seconds or the
``secondaryCatchUpPeriodSecs`` for a secondary to catch up.

If no electable secondary meets this criterion by the waiting period,
the primary does not step down and the method throws an exception.

Upon successful stepdown, :method:`rs.stepDown()` forces all
clients currently connected to the database to disconnect. This helps
ensure that the clients maintain an accurate view of the replica set.

Because the disconnect includes the connection used to run the command,
you cannot retrieve the return status of the command if the command
completes successfully; i.e. you can only retrieve the return status of
the command if it errors. When running the command in a script, the
script should account for this behavior.

.. note::

   :method:`rs.stepDown()` blocks all writes to the primary while it
   runs.
