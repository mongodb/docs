========================
cursor.noCursorTimeout()
========================

.. default-domain:: mongodb

Definition
----------

.. method:: cursor.noCursorTimeout()


   .. include:: /includes/fact-mongo-shell-method.rst


   Instructs the server to avoid closing a cursor automatically after a period
   of inactivity.

   The :method:`~cursor.noCursorTimeout()` method has the following
   prototype form:

   .. code-block:: javascript

      db.collection.find(<query>).noCursorTimeout()

Behavior
--------

Session Idle Timeout Overrides ``noCursorTimeout``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/sessions-cursor-timeout.rst

Consider an application that issues a :method:`db.collection.find()`
with :method:`cursor.noCursorTimeout`. The server returns a cursor along
with a batch of documents defined by the :method:`cursor.batchSize()` of
the :method:`~db.collection.find()`. The session refreshes each time the
application requests a new batch of documents from the server. However,
if the application takes longer than 30 minutes to process the current
batch of documents, the session is marked as expired and closed. When
the server closes the session, it also kills the cursor *despite* the
cursor being configured with :method:`~cursor.noCursorTimeout`. When the
application requests the next batch of documents, the server returns an
error.

For operations that return a cursor, if the cursor may be idle for
longer than 30 minutes, issue the operation within an explicit session
using :method:`Mongo.startSession()` and periodically refresh the
session using the :dbcommand:`refreshSessions` command. For example:

.. code-block:: shell

   var session = db.getMongo().startSession()
   var sessionId = session.getSessionId().id

   var cursor = session.getDatabase("examples").getCollection("data").find().noCursorTimeout()
   var refreshTimestamp = new Date() // take note of time at operation start

   while (cursor.hasNext()) {
  
     // Check if more than 5 minutes have passed since the last refresh
     if ( (new Date()-refreshTimestamp)/1000 > 300 ) { 
       print("refreshing session")
       db.adminCommand({"refreshSessions" : [sessionId]})
       refreshTimestamp = new Date()
     }

     // process cursor normally
  
   }

In the example operation, the :method:`db.collection.find()` method is
associated with an explicit session. The cursor is configured with
:method:`cursor.noCursorTimeout()` to prevent the server from closing
the cursor if idle. The ``while`` loop includes a block that uses
:dbcommand:`refreshSessions` to refresh the session every 5 minutes.
Since the session will never exceed the 30 minute idle timeout, the
cursor can remain open indefinitely.

For MongoDB drivers, defer to the :ecosystem:`driver documentation
</drivers>` for instructions and syntax for creating sessions. 
