.. _avs-types-vector-search:

=====================================
How to Index Fields for Vector Search 
=====================================

.. default-domain:: mongodb

.. meta::
   :description: Use the Atlas Vector Search type to index vector embeddings for vector search using the vectorSearch type.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can use the ``vectorSearch`` type to index fields for running 
:pipeline:`$vectorSearch` queries. You can define the index for the
vector embeddings that you want to query and the boolean, numeric, or
string values that you want to use to pre-filter your data. Filtering
your data is useful to narrow the scope of your semantic search and
ensure that certain vector embeddings are not considered for 
comparison, such as in a multi-tenant environment.

You can use the {+atlas-ui+}, {+atlas-admin-api+}, 
{+atlas-cli+}, {+mongosh+}, or a supported :driver:`MongoDB Driver </>`
to :ref:`create <avs-create-index>` your {+avs+} index. 

.. note:: 

   You can't use the deprecated :ref:`knn-beta-ref` operator to query
   fields indexed using the ``vectorSearch`` type index definition. 

.. _avs-types-vector-search-considerations:

Considerations 
--------------

In a ``vectorSearch`` type index definition, you can index arrays with
only a single element. You can't index fields inside arrays of documents
or fields inside arrays of objects. You can index fields inside
documents using the dot notation. 

Syntax 
------

The following syntax defines the ``vectorSearch`` index type:

.. code-block:: json
   :copyable: true 
   :linenos:

   {
     "fields":[ 
       {
         "type": "vector",
         "path": "<field-to-index>",
         "numDimensions": <number-of-dimensions>,
         "similarity": "euclidean | cosine | dotProduct"
       },
       {
         "type": "filter",
         "path": "<field-to-index>"
       },
       ...
     ]
   }

.. _avs-types-vector:

About the ``vector`` Type 
~~~~~~~~~~~~~~~~~~~~~~~~~

The vector field must contain an array of numbers of the |bson|
``double`` data type for querying using the :pipeline:`$vectorSearch`
pipeline stage. You must index the vector field as the ``vector`` type
inside the ``fields`` array.  

The following syntax defines the ``vector`` field type: 

.. code-block:: json
   :copyable: true 
   :linenos:
   :emphasize-lines: 4-7

   {
     "fields":[ 
       {
         "type": "vector",
         "path": <field-to-index>,
         "numDimensions": <number-of-dimensions>,
         "similarity": "euclidean | cosine | dotProduct"
       },
       ...
     ]
   }

.. _avs-types-filter:

About the ``filter`` Type 
~~~~~~~~~~~~~~~~~~~~~~~~~

You can optionally index boolean, numeric, date, and string values to
pre-filter your data. Filtering your data is useful to narrow the scope
of your semantic search and ensure that not all vectors are considered
for comparison. You must index your boolean, numeric, date, and string
fields using the ``filter`` type inside the ``fields`` array.

The following syntax defines the ``filter`` field type: 

.. code-block:: json
   :copyable: true 
   :linenos:
   :emphasize-lines: 8-9

   {
     "fields":[ 
       {
         "type": "vector",
         ...
       },
       {
         "type": "filter",
         "path": "<field-to-index>"
       },
       ...
     ]
   }

.. include:: /includes/fact-avs-pre-filtering-score-impact.rst

.. _avs-types-vector-search-options:

{+avs+} Index Fields
--------------------------------

The {+avs+} index definition takes the following fields:

.. list-table::
   :widths: 25 10 15 50
   :header-rows: 1

   * - Option
     - Type 
     - Necessity
     - Purpose

   * - ``fields``
     - array of documents 
     - Required 
     - Vector and filter fields to index, one per document. At least one
       document *must* contain the field definition for the vector
       field. You can optionally also index date, number, boolean, and
       string fields, one per document, for pre-filtering the data.

   * - ``fields.type``
     - string 
     - Required 
     - Field type to use to index fields for :pipeline:`$vectorSearch`.
       You can specify one of the following values:  
       
       - ``vector`` - for fields that contain vector embeddings.
       - ``filter`` - for fields that contain boolean, numeric, or
         string values. 

   * - ``fields.path``
     - string 
     - Required 
     - Name of the field to index. For nested fields, use dot notation
       to specify path to embedded fields. You can't index field names
       with two consecutive dots (``.``) and field names ending with
       dots (``.``). For example, {+avs+} *doesn't* support indexing the 
       following field names: 

       .. list-table:: 
          :stub-columns: 1

          * - ``foo..bar`` 
            - Field name has two consecutive dots.
       
          * - ``foo_bar.`` 
            - Field name ends with a dot.

   * - ``fields.numDimensions``
     - int
     - Required
     - Number of vector dimensions that {+avs+} enforces at index-time and
       query-time. You must specify a value less than or equal to
       ``4096``. You can set this field only for ``vector`` type fields.

   * - ``fields.similarity``
     - string
     - Required
     - Vector similarity function to use to search for top K-nearest 
       neighbors. You can set this field only for ``vector`` type
       fields. Value include: 

       - ``euclidean`` - measures the distance between ends of vectors. 
         This value allows you to measure similarity based on varying 
         dimensions. To learn more, see :wikipedia:`Euclidean 
         <Euclidean_distance>`.
       - ``cosine`` - measures similarity based on the angle between 
         vectors. This value allows you to measure similarity that isn't 
         scaled by magnitude. You can't use zero magnitude vectors with 
         ``cosine``. To measure cosine similarity, we recommend that 
         you normalize your vectors and use ``dotProduct`` instead. To 
         learn more, see :wikipedia:`Cosine <Cosine_similarity>`.
       - ``dotProduct`` - measures similar to ``cosine``, but takes 
         into account the magnitude of the vector. This value allows you to 
         efficiently measure similarity based on both angle and 
         magnitude. To use ``dotProduct``, you must normalize the 
         vector to unit length at index-time and query-time. To learn more, 
         see :wikipedia:`Dot Product <Dot_product>`.

       .. note:: 

          If you normalize the magnitude, ``cosine`` and 
          ``dotProduct`` are almost identical in measuring similarity. 

.. 
  .. _avs-types-vector-search-clients:

  Supported Clients 
  -----------------

  You can create and manage {+avs+} indexes through the {+atlas-ui+},
  {+mongosh+}, and the following MongoDB :driver:`drivers </>`: 

  - :driver:`C# </csharp/current/>`
  - :driver:`Java </java-drivers/>`
  - :driver:`Node </node/current/>`
  - :driver:`Pymongo </pymongo/>`

  You can also use {+avs+} with local |service| deployments that you
  create with the {+atlas-cli+}. To learn more, see :atlascli:`Create a
  Local Atlas Deployment </atlas-cli-deploy-local>`. 

.. _avs-types-vector-search-manage:

Create and Manage {+avs+} Indexes   
---------------------------------------------

You can create and manage {+avs+} indexes from the {+atlas-ui+} and
the {+atlas-admin-api+}. To learn more, see: 

- :ref:`avs-create-index`
- :ref:`avs-view-index`
- :ref:`avs-edit-index`
- :ref:`avs-delete-index`

.. _avs-node-status-ref:

Node Status
-----------

When you create the {+avs+} index, the :guilabel:`Status` column shows 
the current state of the index on the primary node of the cluster. 
Click the :guilabel:`View status details` link below the status to view 
the state of the index on all the nodes of the cluster.

When the :guilabel:`Status` column reads :guilabel:`Active`, the index
is ready to use. In other states, queries against the index may return
incomplete results.

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Status
     - Description

   * - Not Started 
     - |service| has not yet started building the index.

   * - Initial Sync 
     - |service| is building the index or re-building the 
       index after an edit. When the index is in this state:
       
       - For a new index, {+avs+} doesn't serve queries until the 
         index build is complete. 
       - For an existing index, you can continue to use the old index 
         for existing and new queries until the index rebuild 
         is complete.

   * - Active
     - Index is ready to use.

   * - Recovering
     - Replication encountered an error. This state commonly occurs 
       when the current replication point is no longer available on the 
       |mongod| oplog. You can still query the existing index until it 
       updates and its status changes to :guilabel:`Active`. Use the 
       error in the :guilabel:`View status details` modal window to 
       troubleshoot the issue. To learn more, see 
       :ref:`atlas-search-alerts`.

   * - Failed 
     - |service| could not build the index. Use the error  
       in the :guilabel:`View status details` modal window to 
       troubleshoot the issue. To learn more, see 
       :ref:`atlas-search-alerts`.

   * - Delete in Progress
     - |service| is deleting the index from the cluster nodes.

While |service| builds the index and after the build completes, the 
:guilabel:`Documents` column shows the percentage and number of 
documents indexed. The column also shows the total number of documents 
in the collection.
