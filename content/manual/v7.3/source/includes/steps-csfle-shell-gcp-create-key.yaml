---
title: "Launch ``mongosh``."
ref: launch-mongo-shell
level: 4
content: |

  Configuring client-side field level encryption for the GCP KMS
  requires your GCP Email and its associated Private Key.

  To mitigate the risk of these credentials leaking into logs, the
  following procedure passes the values into :binary:`~bin.mongosh`
  using environment variables.

  First, ensure that you have configured the following environment
  variables according to your platform's documentation:

  - ``GCP_EMAIL``
  - ``GCP_PRIVATEKEY``

  Next, create a :binary:`~bin.mongosh` session using the
  :option:`--eval <mongosh --eval>`, :option:`--shell <mongosh --shell>`,
  and :option:`--nodb <mongosh --nodb>` options:

  .. code-block:: bash

      mongosh --eval "
          var GCP_EMAIL = '$GCP_EMAIL'
          var GCP_PRIVATEKEY = '$GCP_PRIVATEKEY'
        " \
        --shell --nodb

  This example opens :binary:`~bin.mongosh` without a
  connection to a MongoDB database. The ``--eval`` option sets the
  ``GCP_EMAIL`` and ``GCP_PRIVATEKEY`` variables in
  :binary:`~bin.mongosh` to the value of the corresponding
  environment variables.

---
title: "Create the Encryption Configuration."
ref: create-encryption-configuration
level: 4
content: |

  In :binary:`~bin.mongosh`, create a new
  :ref:`{+auto-encrypt-options+}` variable for storing the
  client-side field level encryption configuration document:

  .. code-block:: javascript

     var autoEncryptionOpts = {
       "keyVaultNamespace" : "encryption.__dataKeys",
       "kmsProviders" : {
         "gcp" : {
           "email" : GCP_EMAIL,
           "privateKey" : GCP_PRIVATEKEY
         }
       }
     }

---
title: "Connect with Encryption Support."
ref: connect-with-encryption
level: 4
content: |

  In :binary:`~bin.mongosh`, use the :method:`Mongo()<Mongo()>`
  constructor to establish a database connection to the target cluster.
  Specify the :ref:`{+auto-encrypt-options+}` document as
  the second parameter to the :method:`Mongo()<Mongo()>` constructor to
  configure the connection for client-side field level encryption:

  .. code-block:: javascript

     csfleDatabaseConnection = Mongo(
       "mongodb://replaceMe.example.net:27017/?replicaSet=myMongoCluster",
       autoEncryptionOpts
     )

  Replace the ``replaceMe.example.net`` :ref:`URI <mongodb-uri>` with
  the connection string for the target cluster.

  Use the ``csfleDatabaseConnection`` object to access
  :doc:`client-side field level encryption
  </reference/method/js-client-side-field-level-encryption>` shell
  methods.

  For complete documentation on establishing database connections
  configured for client-side field level encryption, see the
  :method:`Mongo()` constructor reference.

---
title: "Create the Key Vault Object."
ref: create-keyvault-object
level: 4
content: |

  Use the :method:`getKeyVault()` method on the
  ``csfleDatabaseConnection`` database connection object to create the
  ``keyVault`` object:

  .. code-block:: javascript

     keyVault = csfleDatabaseConnection.getKeyVault();

  .. important::

     {+csfle+} depends on server-enforced
     uniqueness of key alternate names. :method:`getKeyVault()`
     creates a :ref:`unique index <index-type-unique>` on
     ``keyAltNames`` if one does not exist. Do **not** drop the
     :ref:`unique index <index-type-unique>` created by
     :method:`getKeyVault()`.

---
title: "Create the Data Encryption Key."
ref: create-encryption-key
level: 4
content: |

  Use the :method:`KeyVault.createKey()` method on the ``keyVault``
  object to create a new data encryption key in the key vault:

  .. code-block:: javascript

     keyVault.createKey(
       "gcp",
       {
         projectId: "projectid",
         location: "locationname",
         keyRing: "keyringname",
         keyName: "keyname"
       },
       [ "keyAlternateName" ]
     )

  Where:

  - The first parameter *must* be ``"gcp"`` to specify the configured
    Google Cloud KMS.

  - The second parameter *must* be a document containing

    - ``projectid`` is the name of your GCP project, such as
      ``my-project``
    - ``locationname`` is the location of the KMS keyring, such as
      ``global``
    - ``keyringname`` is the name of the KMS keyring, such as
      ``my-keyring``
    - ``keyname`` is the name of your key.

  - The third parameter *may* be an array of one or more
    ``keyAltNames`` for the data encryption key. Each key alternate
    name *must* be unique. :method:`getKeyVault()` creates a
    :ref:`unique index <index-type-unique>` on ``keyAltNames`` to
    enforce uniqueness on the field if one does not already exist. Key
    alternate names facilitate data encryption key findability.

  .. include:: /includes/fact-createkey-returns-uuid.rst

...
