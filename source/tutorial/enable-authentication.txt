===========================
Enable Basic Authentication
===========================

.. default-domain:: mongodb

Authentication is enabled by the the :setting:`auth` or
:setting:`keyFile` setting. A single-instance deployment uses
:setting:`auth`. Instances with :term:`replica sets <replica set>` or
:term:`sharded clusters <sharded cluster>` use the :setting:`keyFile`
setting, which implies :setting:`auth` and allows intra-deployment
authentication and operation.

Authentication requires that you have at least one administrator user in
the ``admin`` database. You can create the user before enabling
authentication or after enabling authentication.

Create the Administrator and then Enable Authentication
-------------------------------------------------------

1. Start the :program:`mongod` or :program:`mongos` instance *without*
   the :setting:`auth` or :setting:`keyFile` setting.

#. Create the administrator user as described in
   :doc:`/tutorial/add-user-administrator`.

#. Re-start the :program:`mongod` or :program:`mongos` instance with the
   :setting:`auth` or :setting:`keyFile` setting.

Enable Authentication and then Create Administrator
---------------------------------------------------

1. Start the :program:`mongod` or :program:`mongos` instance with
   the :setting:`auth` or :setting:`keyFile` setting.

#. Connect to the instance on the same system so that you can
   authenticate using the :ref:`localhost exception
   <localhost-exception>`.

#. Create the administrator user as described in
   :doc:`/tutorial/add-user-administrator`.

Query Authenticated Users
-------------------------

If you have the :authrole:`userAdmin` or
:authrole:`userAdminAnyDatabase` role on a database, you can query
authenticated users in that database with the following operation:

.. code-block:: javascript

   db.system.users.find()

.. _password-hashing-security:

Password Hashing Insecurity
---------------------------

In version 2.2 and earlier:

- the read-write users of a database all have access to the
  ``system.users`` collection, which contains the user names and user
  password hashes. [#read-and-write-system-users]_

  .. note:: In 2.4, only users with the ``userAdmin`` role have access
     to the ``system.users`` collection.

- if a user has the same password for multiple databases, the hash will
  be the same. A malicious user could exploit this to
  gain access on a second database using a different user's credentials.

As a result, always use unique username and password combinations
for each database.

.. [#read-and-write-system-users] Read-only users do not have access
   to the ``system.users`` collection.

.. example: NOT INCLUDED IN OUTPUT.

   Eve connects to the ``db1`` database and views the ``system.users``
   collection, with the following invocation of :program:`mongo`:

   .. code-block:: sh

      mongo <host>/db1 -u eve -p test

   Then, in the :program:`mongo` shell, issues the following
   operation:

   .. code-block:: javascript

      db.system.users.find()

   This operation returns the following documents:

   .. code-block:: javascript

      { "_id": ObjectId("5074202e032a960d16f4394e"), "user": "alice", "readOnly": false, "pwd": "ac2061b4a08ef8f2d60a07dc18ab4a0a" }
      { "_id": ObjectId("507420ba032a960d16f43951"), "user": "eve", "readOnly": false, "pwd": "5dcc2819b97e68d5cfe51da6cae8a7f6" }

   Alice has read and write accounts on both ``db1`` and ``db2`` and
   also has access on the ``admin`` database. Consider the following
   example where Alice authenticates to the ``admin`` db:

   .. code-block:: javascript

      use admin
      db.auth("alice", "pass")

   Consider the output of :method:`find() <db.collection.find()>` on
   the ``system.users`` collection:

   .. code-block:: javascript

      db.system.users.find()

   The following output confirms that the user has the same password and hash:

   .. code-block:: javascript

      { "_id": ObjectId("50742045032a960d16f43950"), "user": "alice", "readOnly": false, "pwd": "ac2061b4a08ef8f2d60a07dc18ab4a0a" }

Thanks to Will Urbanski, from Dell SecureWorks, for identifying this issue.
