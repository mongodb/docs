=========================================
Get All |fts| Hardware and Status Metrics
=========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The ``fts`` resource allows you to return all the |fts| hardware 
and status metrics for one process in the specified project.

.. include:: /includes/api-requirements.rst

.. include:: /includes/fact-projects-groups-synonyms.rst

Required Roles 
--------------

You must have the :authrole:`Project Read Only` or higher role to view 
the |fts| metric types using the |service| :doc:`UI 
</review-atlas-search-metrics>` or API.

Resource 
--------

.. include:: /includes/api/base-api-uri.rst

.. code-block:: http

   GET /groups/{GROUP-ID}/hosts/{PROCESS-ID}/fts/metrics/measurements

Request Parameters
------------------

Request Path Parameters
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 15 10 10 65

   * - Path Element
     - Type
     - Necessity
     - Description

   * - ``GROUP-ID``
     - string
     - Required
     - Unique 24-hexadecimal digit string that identifies the 
       :ref:`project <projects>`.

   * - ``PROCESS-ID``
     - string
     - Required
     - Unique hexadecimal digit string, or a string in the form of 
       ``<hostname>:port``, that identifies the process.
  
       .. note::

          You can find the ``PROCESS-ID`` in the URL of the process in
          |service| after ``/host/``.

Request Query Parameters
~~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :widths: 20 14 11 45 10
   :header-rows: 1
   :stub-columns: 1

   * - Name
     - Type
     - Necessity
     - Description
     - Default

   * - ``end``
     - string
     - Conditional
     - Required if you don't specify ``period``.
       |iso8601-time| that indicates the end date up to which 
       |service| reports the metrics. If you specify **end** you must 
       also specify **start**. Mutually exclusive with **period**.
     - 
   
   * - ``envelope``
     - boolean
     - Optional
     - Flag that indicates whether |service| should wrap the response 
       in a |json| envelope.

       If |api| clients cannot access the |http| response headers 
       or status code, set ``envelope=true`` in the query.

       For endpoints that return one result, the response body
       includes:

       .. list-table::
          :widths: 30 70
          :stub-columns: 1

          * - status
            - |http| response code
          * - envelope
            - Expected response body

       For endpoints that return a list of results, the **results**
       object is an envelope. |service| adds the **status** field to
       the response body.

     - ``false``
  
   * - ``granularity``
     - string
     - Required
     - |iso8601-duration| that specifies the interval at which 
       |service| reports the metrics.  |service| supports the following 
       subset of |iso8601|\-formatted time periods:

       - **PT10S**
         
         .. include:: /includes/fact-10-second-granularity.rst

       - **PT1M**
       - **PT5M**
       - **PT1H**
       - **P1D**
        
       When you specify **granularity**, you must specify either
       **period** *or* **start** and **end**.
     -

   * - ``metrics``
     - string
     - Optional
     - List that contains the metrics that you want |service| to report 
       for the associated data series. If you don't specify individual 
       **metrics**, the endpoint returns all metrics for the associated 
       data series.
     - ``<all-metrics>``

   * - ``period``
     - string
     - Conditional
     - Required if you don't specify ``start`` and ``end``.
       |iso8601-duration| that specifies the length of time over  
       which Atlas reports the metrics. Mutually exclusive with 
       ``start`` and ``end``.

       .. example::

          To request the last 36 hours, specify: ``period=P1DT12H``.
     - 

   * - ``start``
     - string
     - Conditional
     - Required if you don't specify ``period``.
       |iso8601-time| that indicates the start date from which 
       |service| reports the metrics. If you specify **start** you must 
       also specify **end**. Mutually exclusive with **period**.
     - 

Request Body Parameters
~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/api/no-body-parameters.rst

Response Elements
-----------------

The |http| response returns a |json| document that includes an a
array of |fts| metric types. Each |fts| metric type contains the 
following elements:

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 15 10 75

   * - Name
     - Type
     - Description

   * - ``groupId``
     - string
     - Unique 24-hexadecimal digit string that identifies the 
       project.

   * - ``processId``
     - string
     - String in the form of ``<hostname>:port`` that identifies the 
       process.

   * - ``granularity``
     - string
     - |iso8601-duration| that specifies the interval at which 
       |service| reports the metrics.

   * - ``start``
     - string
     - |iso8601-time| that indicates the start date from which 
       |service| reports the metrics.

   * - ``end``
     - string
     - |iso8601-time| that indicates the end date up to which 
       |service| reports the metrics.

   * - ``hardwareMeasurements``
     - array
     - List that contains all available |fts| hardware :ref:`metrics 
       <fts-measurements>`.

   * - ``hardwareMeasurements.dataPoints``
     - string
     - List that contains |fts| hardware metric data.

   * - ``hardwareMeasurements.dataPoints.timestamp``
     - string
     - |iso8601-time| that indicates when |service| captured the 
       |fts| hardware metric data point.

   * - ``hardwareMeasurements.dataPoints.value``
     - number
     - Number that indicates the |fts| hardware metric data point 
       value.
  
   * - ``hardwareMeasurements.name``
     - string
     - Human-readable label that identifies the |fts| hardware 
       metric.

   * - ``hardwareMeasurements.units``
     - string
     - Unit of measurement that applies to the |fts| hardware 
       metric.

   * - ``statusMeasurements``
     - array
     - List that contains all available |fts| status :ref:`metrics 
       <fts-measurements>`.

   * - ``statusMeasurements.dataPoints``
     - string
     - List that contains |fts| status metric data.

   * - ``statusMeasurements.dataPoints.timestamp``
     - string
     - |iso8601-time| that indicates when |service| captured the 
       |fts| status metric data point.

   * - ``statusMeasurements.dataPoints.value``
     - number
     - Number that indicates the |fts| status metric data point 
       value.

   * - ``statusMeasurements.name``
     - string
     - Human-readable label that identifies the |fts| status metric.

   * - ``statusMeasurements.units``
     - string
     - Unit of measurement that applies to the |fts| status metric.
  
   * - ``links``
     - array
     - .. include:: /includes/api/links-explanation.rst

.. _fts-measurements:

Measurement Values
~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 45 55

   * - Measurement
     - Description

   * - ``FTS_DISK_USAGE``
     - Total bytes of disk space that search processes use. 

   * - ``FTS_PROCESS_CPU_KERNEL``
     - Percentage of time that the CPU spent servicing operating system 
       calls for the search process. For servers with more than 1 CPU 
       core, this value can exceed 100%.

   * - ``FTS_PROCESS_CPU_USER``
     - Percentage of time that the CPU spent servicing the search 
       process. For servers with more than 1 CPU core, this value can 
       exceed 100%.

   * - ``FTS_PROCESS_NORMALIZED_CPU_KERNEL``
     - Percentage of time that the CPU spent servicing operating system 
       calls for the search process, scaled to a range of 0-100% by 
       dividing by the number of CPU cores.

   * - ``FTS_PROCESS_NORMALIZED_CPU_USER``
     - Percentage of time that the CPU spent servicing the search 
       process, scaled to a range of 0-100% by dividing by the number 
       of CPU cores.

   * - ``FTS_PROCESS_RESIDENT_MEMORY``
     - Total bytes of resident memory that search processes occupy.

   * - ``FTS_PROCESS_SHARED_MEMORY``
     - Total bytes of shared memory that search processes occupy.

   * - ``FTS_PROCESS_VIRTUAL_MEMORY``
     - Total bytes of virtual memory that search processes occupy.

   * - ``JVM_CURRENT_MEMORY``
     - Amount of memory that the JVM heap is currently using.

   * - ``JVM_MAX_MEMORY``
     - Total available memory in the JVM heap.

Example Request
---------------

.. code-block:: sh

   curl --user "{PUBLIC-KEY}:{PRIVATE-KEY}" --digest \
        --include \
        --request GET "https://cloud.mongodb.com/api/atlas/v1.0/groups/{GROUP-ID}/hosts/{PROCESS-ID}/fts/metrics/measurements?granularity=PT1M&period=PT1M"

Example Response
----------------

Response Header
~~~~~~~~~~~~~~~

.. include:: /includes/api/api-headers/200.rst

Response Body
~~~~~~~~~~~~~

The following example response contains an array of |fts| metric types.

.. code-block:: json
   :copyable: false

   {
    "end": "2021-12-20T16:50:48Z",
    "granularity": "PT1M",
    "groupId": "5f86fb2ff9c4e56d39502559",
    "hardwareMeasurements": [
        {
            "dataPoints": [
                {
                    "timestamp": "2021-12-20T16:50:48Z",
                    "value": 39354368
                }
            ],
            "name": "FTS_DISK_USAGE",
            "units": "BYTES"
        },
        {
            "dataPoints": [
                {
                    "timestamp": "2021-12-20T16:50:48Z",
                    "value": null
                }
            ],
            "name": "FTS_PROCESS_CPU_USER",
            "units": "PERCENT"
        },
        {
            "dataPoints": [
                {
                    "timestamp": "2021-12-20T16:50:48Z",
                    "value": null
                }
            ],
            "name": "FTS_PROCESS_CPU_KERNEL",
            "units": "PERCENT"
        },
        {
            "dataPoints": [
                {
                    "timestamp": "2021-12-20T16:50:48Z",
                    "value": null
                }
            ],
            "name": "FTS_PROCESS_NORMALIZED_CPU_USER",
            "units": "PERCENT"
        },
        {
            "dataPoints": [
                {
                    "timestamp": "2021-12-20T16:50:48Z",
                    "value": null
                }
            ],
            "name": "FTS_PROCESS_NORMALIZED_CPU_KERNEL",
            "units": "PERCENT"
        },
        {
            "dataPoints": [
                {
                    "timestamp": "2021-12-20T16:50:48Z",
                    "value": 389877760
                }
            ],
            "name": "FTS_PROCESS_RESIDENT_MEMORY",
            "units": "BYTES"
        },
        {
            "dataPoints": [
                {
                    "timestamp": "2021-12-20T16:50:48Z",
                    "value": 3353886720
                }
            ],
            "name": "FTS_PROCESS_VIRTUAL_MEMORY",
            "units": "BYTES"
        },
        {
            "dataPoints": [
                {
                    "timestamp": "2021-12-20T16:50:48Z",
                    "value": 15740928
                }
            ],
            "name": "FTS_PROCESS_SHARED_MEMORY",
            "units": "BYTES"
        }
    ],
    "links": [
        {
            "href": "https://cloud.mongodb.com/api/atlas/v1.0/groups/5f86fb2ff9c4e56d39502559/hosts/cluster0-shard-00-00.5f3gk.mongodb.net:27017/fts/metrics/measurements?granularity=PT1M&period=PT1M",
            "rel": "self"
        },
        {
            "href": "https://cloud-dev.mongodb.com/api/atlas/v1.0/groups/5f86fb2ff9c4e56d39502559/processes/cluster0-shard-00-00.5f3gk.mongodb.net:27017",
            "rel": "http://cloud.mongodb.com/host"
        }
    ],
    "processId": "cluster0-shard-00-00.5f3gk.mongodb.net:27017",
    "start": "2021-12-20T16:50:48Z",
    "statusMeasurements": [
        {
            "dataPoints": [],
            "name": "JVM_CURRENT_MEMORY",
            "units": "MEGABYTES"
        },
        {
            "dataPoints": [],
            "name": "JVM_MAX_MEMORY",
            "units": "MEGABYTES"
        }
    ]
   }
