.. meta::
   :robots: noindex, nosnippet

========================
CRUD - Delete - Java SDK
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

About the Examples on this Page
-------------------------------

The examples on this page use the data model of a project
management app that has two Realm object types: ``Project``
and ``Task``. A ``Project`` has zero or more ``Tasks``.

See the schema for these two classes, ``Project`` and
``Task``, below:

.. tabs-realm-languages::
  
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/ProjectTask.snippet.projecttask.kt
         :language: kotlin
         :caption: ProjectTask.kt
         :copyable: false

      .. literalinclude:: /examples/generated/java/sync/Project.snippet.project.kt
         :language: kotlin
         :caption: Project.kt
         :copyable: false

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/ProjectTask.snippet.projecttask.java
         :language: java
         :caption: ProjectTask.java
         :copyable: false

      .. literalinclude:: /examples/generated/java/sync/Project.snippet.project.java
         :language: java
         :caption: Project.java
         :copyable: false

.. _java-delete-an-object:

Delete an Object
----------------

To delete an object from a realm, use either the dynamic or static
versions of the ``deleteFromRealm()`` method of a :java-sdk:`RealmObject
<io/realm/RealmObject.html>` subclass.

The following example shows how to delete one object from
its realm with :java-sdk:`deleteFromRealm()
<io/realm/RealmObject.html#deleteFromRealm-->`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/WritesTest.snippet.delete-an-object.kt
         :language: kotlin
         :emphasize-lines: 6
         :copyable: false

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/WritesTest.snippet.delete-an-object.java
         :language: java
         :emphasize-lines: 4
         :copyable: false

.. tip:: Do not use objects after delete

   The SDK throws an error if you try to use an object after
   it has been deleted.

.. _java-delete-multiple-objects:

Delete Multiple Objects
-----------------------

To delete an object from a realm, use the ``deleteAllFromRealm()``
method of the :java-sdk:`RealmResults <io/realm/RealmResults.html>`
instance that contains the objects you would like to delete. You can
filter the ``RealmResults`` down to a subset of objects using the
:java-sdk:`where() <io/realm/Realm.html#where-java.lang.Class->` method.

The following example demonstrates how to delete a
collection from a realm with :java-sdk:`deleteAllFromRealm()
<io/realm/RealmResults.html#deleteAllFromRealm-->`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/WritesTest.snippet.delete-a-collection.kt
         :language: kotlin
         :emphasize-lines: 6
         :copyable: false

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/WritesTest.snippet.delete-a-collection.java
         :language: java
         :emphasize-lines: 4
         :copyable: false

.. _java-delete-object-and-dependent-objects:

Delete an Object and its Dependent Objects
------------------------------------------

Sometimes, you have :ref:`dependent objects
<java-client-relationships>` that you want to delete when
you delete the parent object. We call this a **chaining
delete**. Realm does not delete the dependent
objects for you. If you do not delete the objects yourself,
they will remain orphaned in your realm. Whether or not
this is a problem depends on your application's needs.

Currently, the best way to delete dependent objects is to
iterate through the dependencies and delete them before
deleting the parent object.

The following example demonstrates how to perform a
chaining delete by first deleting all of Ali's turtles,
then deleting Ali:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/WritesTest.snippet.cascading-deletes.kt
         :language: kotlin
         :emphasize-lines: 6
         :copyable: false

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/WritesTest.snippet.cascading-deletes.java
         :language: java
         :emphasize-lines: 5
         :copyable: false

.. _java-delete-all-object-of-a-specific-type:

Delete All Objects of a Specific Type
-------------------------------------

Realm supports deleting all instances of a :ref:`Realm type
<java-realm-objects>` from a realm.

The following example demonstrates how to delete all
Turtle instances from a realm with :java-sdk:`delete()
<io/realm/Realm.html#delete-java.lang.Class->`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/WritesTest.snippet.delete-all-instances-of-a-type.kt
         :language: kotlin
         :emphasize-lines: 2
         :copyable: false

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/WritesTest.snippet.delete-all-instances-of-a-type.java
         :language: java
         :emphasize-lines: 2
         :copyable: false

.. _java-delete-all-objects-in-a-realm:

Delete All Objects in a Realm
-----------------------------

It is possible to delete all objects from the realm. This
does not affect the schema of the realm. This is useful for
quickly clearing out your realm while prototyping.

The following example demonstrates how to delete everything
from a realm with :java-sdk:`deleteAll()
<io/realm/Realm.html#deleteAll-->`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/WritesTest.snippet.delete-all.kt
         :language: kotlin
         :emphasize-lines: 2
         :copyable: false

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/WritesTest.snippet.delete-all.java
         :language: java
         :emphasize-lines: 2
         :copyable: false

Delete an Object Using an Iterator
----------------------------------

Because realm collections always reflect the latest state, they
can appear, disappear, or change while you iterate over a collection.
To get a stable collection you can iterate over, you can create a
**snapshot** of a collection's data. A snapshot guarantees the order of
elements will not change, even if an element is deleted.

For an example, refer to :ref:`java-iteration`.
