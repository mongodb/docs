======
Update
======

.. default-domain:: mongodb

Of the four basic database operations (i.e. CRUD), *update* operations
are those that modify existing records or :term:`documents <document>`
in a MongoDB :term:`collection`. For general information about write
operations and the factors that affect their performance, see
:ref:`/core/write-operations`; for documentation of other CRUD
operations, see the :doc:`/crud` page.

Overview
--------

Update operation modifies an existing :term:`document <document>` or
documents in a :term:`collection`. MongoDB provides the following
methods to perform update operations:

- :ref:`update <crud-update-update>`

- :ref:`save <crud-update-save>`

.. note::

   - .. include:: /includes/fact-update-field-order.rst

   - .. include:: /includes/fact-write-concerns.rst

.. _crud-update-update:

Update
------

The :method:`update() <db.collection.update()>` method is method used
to modify documents in a MongoDB collection. By default the
:method:`update() <db.collection.update()>` method updates a single
document, but by using the ``multi`` option, :method:`update()
<db.collection.update()>` can update all documents that match the
query criteria in the collection. The :method:`update()
<db.collection.update()>` method can either replace the existing
document with the new document or update specific fields in the
existing document.

The :method:`update() <db.collection.update()>` has the following
syntax:

.. code-block:: javascript

   db.collection.update( <query>, <update>, <options> )

.. admonition:: Corresponding operation in SQL

   The :method:`update() <db.collection.update()>` method corresponds
   to the ``UPDATE`` operation in SQL, and:
   
   - the ``<query>`` argument corresponds to the ``WHERE`` statement,
     and
   
   - the ``<update>`` corresponds to the ``SET ...`` statement.

   However, :method:`update() <db.collection.update()>` is more
   flexible and offers more control than its SQL equivalents.

Consider the following examples that illustrate the use of the
:method:`update() <db.collection.update()>` method:

- If the ``<update>`` argument contains only :ref:`update operators
  <update-operators>` expressions such as the :operator:`$set` operator
  expression, the :method:`update() <db.collection.update()>` method
  updates only the corresponding fields in the document.

  The following operation queries the ``csbios`` collection for the
  document that has an ``_id`` field equal to ``1`` and sets the
  ``middle`` field in the ``name`` subdocument to ``Warner`` and adds a
  new element to the ``awards`` field:

  .. code-block:: javascript

     db.csbios.update( { _id: 1 },
                       { $set: { 'name.middle': 'Warner' },
                         $push: { awards: { award: 'IBM Fellow',
                                            year: '1963',
                                            by: 'IBM' } }
                       } )

- If the ``<update>`` argument contains :operator:`$unset` operator, the
  :method:`update() <db.collection.update()>` method removes the field
  from the document.

  The following operation queries the ``csbios`` collection for the
  first document that has an ``_id`` field equal to ``3`` and removes
  the ``birth`` field from the document:

 .. code-block:: javascript

     db.csbios.update( { _id: 3 },
                       { $unset: { birth: 1 } } )

- If the ``<update>`` argument contains fields not currently in the
  document, the :method:`update() <db.collection.update()>` method
  adds the new fields to the document.

  The following operation queries the ``csbios`` collection for the
  first document that has an ``_id`` field equal to ``3`` and adds to
  the document a new ``mbranch`` field and a new ``aka`` field in the
  subdocument ``name``:

  .. code-block:: javascript

     db.csbios.update( { _id: 3 },
                       { $set: { mbranch: 'Navy',
                                 'name.aka': 'Amazing Grace'} } )

- If the ``<update>`` argument contains only field and value pairs, the
  :method:`update() <db.collection.update()>` method *replaces* the
  existing document with the document in the ``<update>`` argument,
  except for the ``_id`` field.

  The following operation queries the ``csbios`` collection for the
  first document that has a ``name`` field equal to ``{ first: 'John',
  last: 'McCarthy' }`` and replaces all but the ``_id`` field in the
  document with the fields in the ``<update>`` argument:

  .. code-block:: javascript

     db.csbios.update(
                       { name: { first: 'John', last: 'McCarthy' } },
                       {
                         name: { first: 'Ken', last: 'Iverson' },
                         born: new Date('Dec 17, 1941'),
                         died: new Date('Oct 19, 2004'),
                         contribs: [ 'APL', 'J' ],
                         awards: [
                                     { award: 'Turing Award',
                                       year: '1979',
                                       by: 'ACM' },
                                     { award: 'Harry H. Goode Memorial Award',
                                       year: '1975',
                                       by: 'IEEE Computer Society' },
                                     { award: 'IBM Fellow',
                                       year: '1970',
                                       by: 'IBM' }
                                 ]
                       } )

- If the update operation requires an update of an element in an array
  field:

  - The :method:`update() <db.collection.update()>` method can perform
    the update using the position of the element. Arrays in MongoDB are
    zero-based.

    The following operation queries the ``csbios`` collection for
    the document with ``_id`` field equal to ``1`` and updates the
    second element in the ``contribs`` array:

    .. code-block:: javascript

       db.csbios.update( { _id: 1 } ,
                         { $set: { 'contribs.1': 'ALGOL 58' } } )

  - The :method:`update() <db.collection.update()>` method can perform
    the update using the :operator:`$` positional operator if the
    position is not known. The array field must appear in the ``query``
    argument in order to determine which array element.

    The following operation queries the ``csbios`` collection for a
    document with the ``_id`` field equal to ``3`` and the ``contribs``
    array contains an element equal to ``compiler``. If found, the
    :method:`update() <db.collection.update()>` method updates the
    first matching element in the array to ``A compiler`` in the
    document:

    .. code-block:: javascript

       db.csbios.update( { _id: 3, 'contribs': 'compiler' },
                         { $set: { 'contribs.$': 'A compiler' } } )

  - The :method:`update() <db.collection.update()>` method can perform
    the update of an array that contains subdocuments by using the
    :operator:`$` positional operator and the :wiki:`dot notation
    <Dot+Notation+(Reaching+into+Objects)>`.

    The following operation queries the ``csbios`` collection for a
    document with the ``_id`` field equal to ``6`` and the ``awards``
    array contains a subdocument element with the ``by`` field equal
    to ``ACM``. If found, the :method:`update()
    <db.collection.update()>` method updates the ``by`` field in the
    first matching subdocument:

    .. code-block:: javascript

       db.csbios.update( { _id: 6, 'awards.by': 'ACM'  } ,
                         { $set: { 'awards.$.by': 'Association for Computing Machinery' } } )

- If the ``<options>`` argument contains the ``multi`` option set to
  ``true`` or ``1``, the :method:`update() <db.collection.update()>`
  method updates all documents that match the query.

  The following operation queries the ``csbios`` collection for all
  documents where the ``awards`` field contains a subdocument element
  with the ``award`` field equal to ``Turing`` and sets the ``turing``
  field to ``true`` in the matching documents:

  .. code-block:: javascript

     db.csbios.update( { 'awards.award': 'Turing' },
                       { $set: { turing: true } },
                       { multi: true } )

- If you set the ``upsert`` option in the ``<options>`` argument to
  ``true`` or ``1`` and no existing document match the ``<query>``
  argument, the :method:`update() <db.collection.update()>` method can
  insert a new document into the collection:

  The following operation queries the ``csbios`` collection for a
  document with the ``_id`` field equal to ``11`` and the ``name``
  field equal to ``{ first: 'James', last: 'Gosling'}``. If the query
  selects a document, the operation performs an update operation. If a
  document is not found, :method:`update() <db.collection.update()>`
  performs an insert operation of a new document with the fields and
  values in the ``<update>`` argument and the ``<query>`` argument
  since the ``<update>`` argument contains only :ref:`update operators
  <update-operators>` expressions.

  .. code-block::javascript

     db.csbios.update(
        { _id:11, name: { first: 'James', last: 'Gosling' } },
        {
          $set: {
                   born: new Date('May 19, 1955'),
                   contribs: [ 'Java' ],
                   awards: [
                             { award: 'The Economist Innovation Award',
                               year: '2002',
                               by: 'The Economist' },
                             { award: 'Officer of the Order of Canada',
                               year: '2007',
                               by: 'Canada' }
                  ]
               }
        },
        { upsert: true }
     )

  See also :ref:`Create <crud-create-update>`.

 .. _crud-update-save:

Save
----

The :method:`save() <db.collection.save()>` method updates an existing
document or inserts a document depending on the ``_id`` field of the
document. The :method:`save() <db.collection.save()>` method is
analogous to the :method:`update() <db.collection.update()>` method
with the ``upsert`` option and a ``<query>`` argument on the ``_id``
field.

The :method:`save() <db.collection.save()>` method has the
following syntax:

.. code-block:: javascript

   db.collection.save( <document> )

Consider the following examples of the :method:`save()
<db.collection.save()>` method:

- If the ``<document>`` argument contains the ``_id`` field that exists
  in the collection, the :method:`save() <db.collection.save()>` method
  performs an update that replaces the existing document with the
  ``<document>`` argument.

  The following operation queries the ``csbios`` collection for a
  document where the ``_id`` equals
  ``ObjectId("507c4e138fada716c89d0014")`` and replaces the document
  with the ``<document>`` argument:

  .. code-block:: javascript

     db.csbios.save( { _id: ObjectId("507c4e138fada716c89d0014"),
                       name: { first: 'Martin', last: 'Odersky' },
                       contribs: [ 'Scala' ]
                      } )

- If no ``_id`` field exists or if the ``_id`` field exists but does
  not match any document in the collection, the :method:`save()
  <db.collection.save()>` method performs an insert. If no ``_id``
  field exists, the insert will generate a unique :term:`Object` for
  and create an ``_id`` field for the new document.

  The following operation adds the ``_id`` field to the document,
  assigns to the field a unique ``ObjectId``, and inserts into the
  ``csbios`` collection:

  .. code-block:: javascript

     db.csbios.save( { name: { first: 'Larry', last: 'Wall' },
                       contribs: [ 'Perl' ] } )

  Upserts are also :ref:`create <crud-create-save>` operations.
