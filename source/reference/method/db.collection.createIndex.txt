.. _method-createIndex:

===========================
db.collection.createIndex()
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.collection.createIndex(keys, options)

   Creates indexes on collections.

   .. versionchanged:: 3.2

      MongoDB disallows the creation of :ref:`version 0
      <3.2-version-0-indexes>` indexes. To upgrade existing version 0
      indexes, see :ref:`3.2-version-0-indexes`.


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``keys``
   
        - document
   
        - A document that contains the field and value pairs where the field is
          the index key and the value describes the type of index for that
          field. For an ascending index on a field, specify a value of ``1``; for
          descending index, specify a value of ``-1``.
          
          MongoDB supports several different index types including
          :ref:`text <index-feature-text>`, :ref:`geospatial
          <index-feature-geospatial>`, and :ref:`hashed
          <index-type-hashed>` indexes. See :ref:`index types <index-types>`
          for more information.
          
          Starting in 3.6, you cannot specify ``*`` as the index name.
          
          
   
      * - ``options``
   
        - document
   
        - Optional. A document that contains a set of options that controls the creation
          of the index. See :ref:`ensureIndex-options` for details.
          
          
   


   The :method:`db.collection.createIndex()` is a wrapper around the
   :dbcommand:`createIndexes` command.

   To minimize the impact of building an index on replica sets and
   sharded clusters, use a rolling index build procedure as described
   on :doc:`/tutorial/build-indexes-on-replica-sets`.

.. _ensureIndex-options:
.. _createIndex-options:

Options
-------

The ``options`` document contains a set of options that controls the
creation of the index. Different index types can have additional
options specific for that type.

Multiple index options can be specified in the same document. However,
if you specify mutiple option documents the :method:`db.collection.createIndex()`
operation will fail.

Consider the following :method:`db.collection.createIndex()` operation:

.. code-block:: javascript

  db.collection.createIndex(
    {
        "a": 1
    },
    {
        unique: true,
        sparse: true,
        expireAfterSeconds: 3600
    }
  )

If the options specification had been split into multiple documents
like this:
``{ unique: true }, { sparse: true, expireAfterSeconds: 3600 }``
the index creation operation would have failed.

Options for All Index Types
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for all index types unless
otherwise specified:

.. include:: /includes/fact-remove-dropDups-option.rst


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``background``

     - boolean

     - Optional. Builds the index in the background so the operation does
       *not* block other database activities. Specify ``true`` to build in
       the background. The default value is ``false``.
       
       

   * - ``unique``

     - boolean

     - Optional. Creates a unique index so that the collection will not accept
       insertion or update of documents where the index key value matches an existing
       value in the index.
       
       
       Specify ``true`` to create a unique index. The
       default value is ``false``.
       
       The option is *unavailable* for :doc:`hashed </core/index-hashed>`
       indexes.
       
       
       

   * - ``name``

     - string

     - Optional. The name of the index. If unspecified, MongoDB generates an index name
       by concatenating the names of the indexed fields and the sort order.
       
       Whether user specified or MongoDB generated, index names including
       their full namespace (i.e. ``database.collection``) cannot be longer
       than the :limit:`Index Name Limit <Index Name Length>`.
       
       

   * - ``partialFilterExpression``

     - document

     - Optional. If specified, the index only references documents that match the
       filter expression. See :doc:`/core/index-partial` for more information.
       
       
       A filter expression can include:
       
       .. include:: /includes/fact-partial-filter-expression-operators.rst
       
       You can specify a ``partialFilterExpression`` option for all MongoDB
       :ref:`index types <index-types>`.
       
       .. versionadded:: 3.2
       
       
       

   * - ``sparse``

     - boolean

     - Optional. If ``true``, the index only references documents with the specified
       field. These indexes use less space but behave differently in some
       situations (particularly sorts). The default value is ``false``.
       See :doc:`/core/index-sparse` for more information.
       
       .. versionchanged:: 3.2 
       
          Starting in MongoDB 3.2, MongoDB provides the option to create
          :ref:`partial indexes <index-type-partial>`. Partial indexes
          offer a superset of the functionality of sparse indexes. If you
          are using MongoDB 3.2 or later, :ref:`partial indexes
          <index-type-partial>` should be preferred over sparse indexes.
       
       .. versionchanged:: 2.6
       
          :doc:`2dsphere </core/2dsphere>` indexes are sparse by default and
          ignore this option. For a compound index that includes
          ``2dsphere`` index key(s) along with keys of other types, only the
          ``2dsphere`` index fields determine whether the index references a
          document.
       
          :doc:`2d </core/2d>`, :doc:`geoHaystack </core/geohaystack>`, and
          :doc:`text </core/index-text>` indexes behave similarly to the
          :doc:`2dsphere </core/2dsphere>` indexes.
       
       

   * - ``expireAfterSeconds``

     - integer

     - Optional. Specifies a value, in seconds, as a :term:`TTL` to control how long
       MongoDB retains documents in this collection. See
       :doc:`/tutorial/expire-data` for more information on this
       functionality. This applies only to :term:`TTL` indexes.
       
       

   * - ``storageEngine``

     - document

     - Optional. Allows users to configure the storage engine on a
       per-index basis when creating an index.
       
       
       The ``storageEngine`` option should take the following form:
       
       .. code-block:: javascript
       
          storageEngine: { <storage-engine-name>: <options> }
       
       Storage engine configuration options specified when creating indexes are
       validated and logged to the :term:`oplog` during replication to
       support replica sets with members that use different storage
       engines.
       
       .. versionadded:: 3.0
       
       
       



.. _create-index-collation:

Option for Collation
~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.4

.. warning::

   Collation is not supported in MongoDB 3.2 and earlier versions. In
   MongoDB 3.2 and earlier versions, do not create indexes with the
   unsupported collation option as this will block the upgrade to 3.4,
   which enforces a :ref:`stricter validation of index options
   <3.4-index-validation>`.


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``collation``

     - document

     - Optional. Specifies the :ref:`collation <collation>` for the index.
       
       .. include:: /includes/extracts/collation-description.rst
       
       .. include:: /includes/extracts/collation-index-collection.rst
       
       .. include:: /includes/extracts/collation-option-specification.rst
       
       .. versionadded:: 3.4
       
       



.. include:: /includes/extracts/collation-index-type-restrictions.rst

.. include:: /includes/extracts/collation-index-type-restrictions-addendum.rst

.. _createIndex-collation-index-use:

Collation and Index Use
```````````````````````

.. include:: /includes/extracts/collation-index.rst

Options for ``text`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for :doc:`text </core/index-text>`
indexes only:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``weights``

     - document

     - Optional. For :doc:`text </core/index-text>` indexes, a document that contains
       field and weight pairs. The weight is an integer ranging from 1 to
       99,999 and denotes the significance of the field relative to the
       other indexed fields in terms of the score. You can specify weights
       for some or all the indexed fields. See
       :doc:`/tutorial/control-results-of-text-search` to adjust the scores.
       The default value is ``1``.
       
       

   * - ``default_language``

     - string

     - Optional. For :doc:`text </core/index-text>` indexes, the language that
       determines the list of stop words and the rules for the stemmer and
       tokenizer. See :ref:`text-search-languages` for the available
       languages and :doc:`/tutorial/specify-language-for-text-index` for
       more information and examples. The default value is ``english``.
       
       

   * - ``language_override``

     - string

     - Optional. For :doc:`text </core/index-text>` indexes, the name of the field, in
       the collection's documents, that contains the override language for
       the document. The default value is ``language``. See
       :ref:`specify-language-field-text-index-example` for an example.
       
       

   * - ``textIndexVersion``

     - integer

     - Optional. The ``text`` index version number. Users can use this option to
       override the default version number.
       
       For available versions, see :ref:`text-versions`.
       
       .. versionadded:: 2.6
       
       



Options for ``2dsphere`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following option is available for :doc:`2dsphere </core/2dsphere>`
indexes only:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``2dsphereIndexVersion``

     - integer

     - Optional. The ``2dsphere`` index version number. Users can use this option to
       override the default version number.
       
       For the available versions, see :ref:`2dsphere-v2`.
       
       .. versionadded:: 2.6
       
       



Options for ``2d`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for :doc:`2d </core/2d>` indexes
only:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``bits``

     - integer

     - Optional. For :doc:`2d </core/2d>` indexes, the number of precision of the
       stored :term:`geohash` value of the location data.
       
       The ``bits`` value ranges from 1 to 32 inclusive. The default value
       is ``26``.
       
       

   * - ``min``

     - number

     - Optional. For :doc:`2d </core/2d>` indexes, the lower inclusive boundary for
       the longitude and latitude values. The default value is ``-180.0``.
       
       

   * - ``max``

     - number

     - Optional. For :doc:`2d </core/2d>` indexes, the upper inclusive boundary for
       the longitude and latitude values. The default value is ``180.0``.
       
       



Options for ``geoHaystack`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following option is available for :doc:`geoHaystack </core/geohaystack>`
indexes only:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``bucketSize``

     - number

     - For :doc:`geoHaystack </core/geohaystack>` indexes, specify the
       number of units within which to group the location values; i.e. group
       in the same bucket those location values that are within the
       specified number of units to each other.
       
       The value must be greater than 0.
       
       



.. _create-index-behaviors:

Behaviors
---------

The :method:`~db.collection.createIndex()` method has the behaviors
described here.

.. warning::

   Foreground index builds block all other operations on the database.


.. include:: /includes/extracts/createIndex-behavior.rst

- .. include:: /includes/fact-index-key-length-operation-behaviors.rst
      :start-after: index-field-limit-ensureIndex
      :end-before: .. index-field-limit-reIndex

  .. |limit| replace:: :limit:`Maximum Index Key Length <Index Key>`

Examples
--------

Create an Ascending Index on a Single Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates an ascending index on the field
``orderDate``.

.. code-block:: javascript

   db.collection.createIndex( { orderDate: 1 } )

If the ``keys`` document specifies more than one field, then
:method:`~db.collection.createIndex()` creates a :term:`compound
index`.

Create an Index on a Multiple Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates a compound index on the
``orderDate`` field (in ascending order) and the ``zipcode``
field (in descending order.)

.. code-block:: javascript

   db.collection.createIndex( { orderDate: 1, zipcode: -1 } )

A compound index cannot include a :ref:`hashed index <index-type-hashed>`
component.

.. note::

   The order of an index is important for supporting
   :method:`~cursor.sort()` operations using the index.

Create Indexes with Collation Specified
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.4

The following example creates an index named ``category_fr``. The
example creates the index with the :ref:`collation
<create-index-collation>` that specifies the locale ``fr`` and
comparison strength ``2``:

.. code-block:: javascript

   db.collection.createIndex(
      { category: 1 },
      { name: "category_fr", collation: { locale: "fr", strength: 2 } }
   )

The following example creates a compound index named
``date_category_fr`` with a :ref:`collation <create-index-collation>`.
The collation applies only to the index keys with string values.

.. code-block:: javascript

   db.collection.createIndex(
      { orderDate: 1, category: 1 },
      { name: "date_category_fr", collation: { locale: "fr", strength: 2 } }
   )

The collation applies to the indexed keys whose values are string.

For queries or sort operations on the indexed keys that uses the same collation
rules, MongoDB can use the index. For details, see :ref:`createIndex-collation-index-use`.

Additional Information
----------------------

- The :doc:`/indexes` section of this manual for full
  documentation of indexes and indexing in MongoDB.

- :method:`db.collection.getIndexes()` to view the specifications of
  existing indexes for a collection.

- :doc:`/core/index-text` for details on creating ``text``
  indexes.

- :ref:`index-feature-geospatial` and
  :ref:`index-geohaystack-index` for geospatial queries.

- :ref:`index-feature-ttl` for expiration of data.
