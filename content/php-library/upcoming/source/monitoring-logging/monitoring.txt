.. _php-cluster-monitoring:
.. _php-monitoring:

==========================
Monitor Application Events
==========================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, server, topology

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecols

Overview
--------

In this guide, you can learn how to set up and configure **monitoring**
in the {+php-library+}.

Monitoring is the process of gathering information about your application's
behavior as it runs. This information can help you make informed decisions when
designing and debugging your application. You can also use information from monitoring
events to track your application's performance and resource use.
 
The {+php-library+} emits command events and Server Discovery and Monitoring (SDAM)
events that provide application information. You can listen for these events to
monitor your application.

.. note::
   
   This page explains how to monitor your application in code. To learn how to
   record this information to an external log, see the :ref:`php-logging` guide.

Event Types
-----------

The type of event that the driver emits depends on the operation being performed.
The following table describes the types of events that the driver emits:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Event Type
     - Description

   * - Command events
     - Events related to MongoDB database commands, such as ``find``, ``insert``,
       ``delete``, and ``count``. To learn how to use the {+library-short+} to run a
       database command, see :ref:`<php-run-command>`. For more information about
       MongoDB database commands, see :manual:`Database Commands </reference/command/>`
       in the {+mdb-server+} manual.

   * - Server Discovery and Monitoring (SDAM) events
     - Events related to changes in the state of the MongoDB deployment.

Monitor Events
--------------

To monitor events, you must perform the following actions:

1. :ref:`php-subscribe`: Create a class that implements the command or
   SDAM event subscriber
#. :ref:`php-register`: Register a monitoring event subscriber with your
   ``MongoDB\Client``

.. tip::

   To view a list of monitoring events to which you can subscribe, see the
   :php:`Monitoring classes and subscriber functions <mongodb.monitoring>`
   section of the PHP manual.

.. _php-subscribe:

Create an Event Subscriber
~~~~~~~~~~~~~~~~~~~~~~~~~~

To subscribe to a monitoring event, create a class that implements the
event subscriber interface. You can implement the following interfaces:

- ``MongoDB\Driver\Monitoring\CommandSubscriber``, which subscribes to
  command events
- ``MongoDB\Driver\Monitoring\SDAMSubscriber``, which subscribes to 
  SDAM events

.. _php-subscribe-command:

Command Event Subscriber Example
````````````````````````````````

To subscribe to an SDAM event, create a class that implements the
``MongoDB\Driver\Monitoring\CommandSubscriber`` interface. In your
class, define each of the ``CommandSubscriber`` methods. The following
table describes these methods and the command events they receive notifications
for:

.. list-table::
   :header-rows: 1
   :widths: 30 20 50

   * - Method
     - Command Event
     - Description

   * - :php:`commandFailed() <mongodb-driver-monitoring-commandsubscriber.commandfailed>`
     - :php:`CommandFailedEvent <class.mongodb-driver-monitoring-commandfailedevent>`
     - Called when a command does not succeed

   * - :php:`commandStarted() <mongodb-driver-monitoring-commandsubscriber.commandstarted>`
     - :php:`CommandStartedEvent <class.mongodb-driver-monitoring-commandstartedevent>`
     - Called when a command is sent to the server

   * - :php:`commandSucceeded() <mongodb-driver-monitoring-commandsubscriber.commandsucceeded>`
     - :php:`CommandSucceededEvent <class.mongodb-driver-monitoring-commandsucceededevent>`
     - Called when a command succeeds

The following code creates the ``MyCommandSubscriber`` class, which implements
the ``CommandSubscriber`` interface. The class defines each ``CommandSubscriber`` method
and includes custom logic for the ``commandStarted()`` method, which prints details
about each new command that the server receives:

.. literalinclude:: /includes/monitoring-logging/MyCommandSubscriber.php
   :start-after: start-command-subscriber
   :end-before: end-command-subscriber
   :language: php
   :copyable:
   :dedent:

.. _php-subscribe-sdam:

SDAM Event Subscriber Example
`````````````````````````````

To subscribe to an SDAM event, create a class that implements the
``MongoDB\Driver\Monitoring\SDAMSubscriber`` interface. In your
class, define each ``SDAMSubscriber`` method. The following
table describes these methods and the command events they receive
notifications for:

.. list-table::
   :header-rows: 1
   :widths: 30 20 50

   * - Method
     - SDAM Event
     - Description

   * - :php:`serverChanged() <mongodb-driver-monitoring-sdamsubscriber.serverchanged>`
     - :php:`ServerChangedEvent <class.mongodb-driver-monitoring-serverchangedevent>`
     - Called when a server's description changes

   * - :php:`serverClosed() <mongodb-driver-monitoring-sdamsubscriber.serverclosed>`
     - :php:`ServerClosedEvent <class.mongodb-driver-monitoring-serverclosedevent>`
     - Called when a server is removed from the topology

   * - :php:`serverHeartbeatFailed() <mongodb-driver-monitoring-sdamsubscriber.serverheartbeatfailed>`
     - :php:`ServerHeartbeatFailedEvent <class.mongodb-driver-monitoring-serverheartbeatfailedevent>`
     - Called when a server heartbeat is unsuccessful

   * - :php:`serverHeartbeatStarted() <mongodb-driver-monitoring-sdamsubscriber.serverheartbeatstarted>`
     - :php:`ServerHeartbeatStartedEvent <class.mongodb-driver-monitoring-serverheartbeatstartedevent>`
     - Called when the server receives a heartbeat

   * - :php:`serverHeartbeatSucceeded() <mongodb-driver-monitoring-sdamsubscriber.serverheartbeatsucceeded>`
     - :php:`ServerHeartbeatSucceededEvent <class.mongodb-driver-monitoring-serverheartbeatsucceededevent>`
     - Called when a server heartbeat succeeds

   * - :php:`serverOpening() <mongodb-driver-monitoring-sdamsubscriber.serveropening>`
     - :php:`ServerOpeningEvent <class.mongodb-driver-monitoring-serveropeningevent>`
     - Called when a new server is added to the topology

   * - :php:`topologyChanged() <mongodb-driver-monitoring-sdamsubscriber.topologychanged>`
     - :php:`TopologyChangedEvent <class.mongodb-driver-monitoring-topologychangedevent>`
     - Called when the topology description changes

   * - :php:`topologyClosed() <mongodb-driver-monitoring-sdamsubscriber.topologyclosed>`
     - :php:`TopologyClosedEvent <class.mongodb-driver-monitoring-topologyclosedevent>`
     - Called when the topology is closed

   * - :php:`topologyOpening() <mongodb-driver-monitoring-sdamsubscriber.topologyopening>`
     - :php:`TopologyOpeningEvent <class.mongodb-driver-monitoring-topologyopeningevent>`
     - Called when the topology is opened

The following code creates the ``MySDAMSubscriber`` class, which implements
the ``SDAMSubscriber`` interface. The class defines each ``SDAMSubscriber`` method
and includes custom logic for the ``serverOpening()`` method, which prints details
about servers added to the topology:

.. literalinclude:: /includes/monitoring-logging/MySdamSubscriber.php
   :start-after: start-sdam-subscriber
   :end-before: end-sdam-subscriber
   :language: php
   :copyable:
   :dedent:

.. _php-register:

Register an Event Subscriber
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After creating a class that implements your subscriber interface,
you must register this class with a ``MongoDB\Client`` to receive
event notifications for your client. To register a subscriber, call the
``MongoDB\Client::addSubscriber()`` method and pass an instance
of your subscriber class as a parameter.

Example
```````

The following code registers the command and SDAM event subscribers
created in the :ref:`php-subscribe` section of this page with a
``MongoDB\Client``:

.. literalinclude:: /includes/monitoring-logging/monitor.php
   :start-after: start-add-subs
   :end-before: end-add-subs
   :language: php
   :copyable:
   :dedent:

When you start the application and run an insert command, your subscribers
record the events and output messages that resemble the following:

.. code-block:: none
   :copyable: false

   Server opening on ac-rmuag0v-shard-00-00.gh0qg50.mongodb.net:27017
   Server opening on ac-rmuag0v-shard-00-01.gh0qg50.mongodb.net:27017
   Server opening on ac-rmuag0v-shard-00-02.gh0qg50.mongodb.net:27017
   Started command #3 "insert": { "insert" : ... }

Remove a Subscriber
-------------------

To unregister a subscriber from your client, use the
``MongoDB\Client::removeSubscriber()`` method.

The following code shows how to remove the subscriber created in
the :ref:`php-subscribe-command` section of this page:

.. literalinclude:: /includes/monitoring-logging/monitor.php
   :start-after: start-remove-sub
   :end-before: end-remove-sub
   :language: php
   :copyable:
   :dedent:

API Documentation
-----------------

To learn more about any of the classes or methods discussed in this guide, see the
following API documentation:

- :phpmethod:`MongoDB\Client::addSubscriber()`
- :phpmethod:`MongoDB\Client::removeSubscriber()`

To learn more about subscriber classes and methods, see the following
pages in the PHP manual:

- :php:`MongoDB\Driver\Monitoring\CommandSubscriber <mongodb-driver-monitoring-commandsubscriber>`
- :php:`MongoDB\Driver\Monitoring\SDAMSubscriber <mongodb-driver-monitoring-sdamsubscriber>`
