collection: "inventory"
options:
  show_title: False
  show_collection: False
content:
  source:
    file: example/example-gs-query-all.yaml
    ref: 0
---
title:
  text: Update Top-Level Fields
  level: 3
ref: 1
pre: |
  The following operation updates the first document with ``item``
  equal to ``"ABC"``, using the :update:`$set` operator to update the
  ``item`` and the ``details`` fields to the
  specified values and the :update:`$currentDate` operator to update
  the ``lastModified`` field with the current date.
operation:
    language: javascript
    code: |
      db.inventory.update(
          { "item": "ABC" },
          {
            $set: {
              "item": "ABC1",
              "details": { "model": "14Q3", "color": "mocha" }
            },
            $currentDate: { "lastModified": true }
          }
      )
post: |
  The update operation returns a :method:`WriteResult` object which
  contains the status of the operation. A successful update of the
  document returns the following object:
results:
  - 'WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })'
---
title:
  text: Update an Embedded Field
  level: 3
ref: 2
pre: |
  To update a field within an embedded document, use the :term:`dot
  notation`. When using the dot notation, enclose the whole dotted
  field name in quotes.
operation:
  - pre: |
      The following updates the ``model`` field within the embedded
      ``details`` document.
    language: javascript
    code: |
      db.inventory.update(
        { item: "DEF" },
        { $set: { "details.model": "14Q2" } }
      )
post: |
   The update operation returns a :method:`WriteResult` object which
   contains the status of the operation. A successful update of the
   document returns the following object:
results:
  - 'WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })'
---
title: 
  text: Update Multiple Documents
  level: 3
ref: 3
pre: |
  By default, the :method:`~db.collection.update()` method updates a
  single document. To update multiple documents, use the ``multi``
  option in the :method:`~db.collection.update()` method.
operation:
  - pre: |
      The following operation updates *all* documents that have
      ``category`` field equal to ``"hat"``, setting the ``category``
      field to ``"hats"`` and the ``lastModified`` field to the current
      date.
    language: javascript
    code: |
      db.inventory.update( 
         { "category": "hat" },
         {
           $set: { "category": "hats" },
           $currentDate: { "lastModified": true }
         },
         { multi: true }
      )
post: |
  The update operation returns a :method:`WriteResult` object which
  contains the status of the operation. A successful update of the
  document returns the following object:
results:
  - 'WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })'
...