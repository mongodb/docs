=========================
Databases and Collections
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview 
--------
MongoDB stores data records as :term:`documents <document>`
(specifically :ref:`BSON documents <bson-document-format>`) which are
gathered together in :term:`collections <collection>`.  A
:term:`database <database>` stores one or more collections of documents.


Databases
---------
In MongoDB, databases hold one or more collections of documents. To
select a database to use, in the :binary:`~bin.mongo` shell, issue the
``use <db>`` statement, as in the following example:

.. code-block:: javascript

   use myDB

Create a Database
~~~~~~~~~~~~~~~~~

If a database does not exist, MongoDB creates the database when you
first store data for that database. As such, you can switch to a
non-existent database and perform the following operation in the
:binary:`~bin.mongo` shell:

.. code-block:: javascript

   use myNewDB

   db.myNewCollection1.insertOne( { x: 1 } )

The :method:`~db.collection.insertOne()` operation creates both the
database ``myNewDB`` and the collection ``myNewCollection1`` if they do
not already exist. Be sure that both the database and collection names
follow MongoDB :ref:`restrictions-on-db-names`.

.. _collections:

Collections
-----------

MongoDB stores documents in collections. Collections are analogous to
tables in relational databases.

.. include:: /images/crud-annotated-collection.rst

Create a Collection
~~~~~~~~~~~~~~~~~~~

If a collection does not exist, MongoDB creates the collection when you
first store data for that collection.

.. code-block:: javascript

   db.myNewCollection2.insertOne( { x: 1 } )
   db.myNewCollection3.createIndex( { y: 1 } )

Both the :method:`~db.collection.insertOne()` and the
:method:`~db.collection.createIndex()` operations create their
respective collection if they do not already exist. Be sure that the
collection name follows MongoDB :ref:`restrictions-on-db-names`.

Explicit Creation
~~~~~~~~~~~~~~~~~

MongoDB provides the :method:`db.createCollection()` method to
explicitly create a collection with various options, such as setting
the maximum size or the documentation validation rules. If you are not
specifying these options, you do not need to explicitly create the
collection since MongoDB creates new collections when you first store
data for the collections.

To modify these collection options, see :dbcommand:`collMod`.

Document Validation
~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.2

By default, a collection does not require its documents to have the
same schema; i.e. the documents in a single collection do not need to
have the same set of fields and the data type for a field can differ
across documents within a collection.

Starting in MongoDB 3.2, however, you can enforce :doc:`document
validation rules </core/schema-validation>` for a collection during
update and insert operations. See :doc:`/core/schema-validation` for
details.

Modifying Document Structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To change the structure of the documents in a collection, such as add
new fields, remove existing fields, or change the field values to a new
type, update the documents to the new structure.


.. _collections-uuids:

Unique Identifiers
~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.6

.. note::

   The ``featureCompatibilityVersion`` must be set to ``"3.6"`` or greater. For
   more information, see :ref:`view-fcv`.

Collections are assigned an immutable :abbr:`UUID (Universally unique
identifier)`. The
collection UUID remains the same across all members of a replica set
and shards in a sharded cluster.

To retrieve the UUID for a collection, run either the
:manual:`listCollections </reference/command/listCollections>` command
or the :method:`db.getCollectionInfos()` method.

.. toctree::
   :titlesonly:
   :hidden:

   /core/views
   /core/materialized-views
   /core/capped-collections
   /core/timeseries-collections
