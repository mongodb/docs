.. facet::
   :name: programming_language
   :values: csharp, go, java, javascript/typescript, python

.. meta::
   :keywords: code example, node.js, compass, java sync
   :description: Build a CSFLE-enabled application using a KMIP-compliant key provider to insert documents with encrypted fields.

.. _csfle-tutorial-automatic-kmip:

===========================================================
Use Automatic {+csfle+} with KMIP
===========================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This guide shows you how to build a {+csfle+} ({+csfle-abbrev+})-enabled
application using a Key Management Interoperability Protocol
(KMIP)-compliant key provider.

After you complete the steps in this guide, you should have:

- A {+cmk-long+} hosted on a {+kmip-kms+}.
- A working client application that inserts {+in-use-docs+}
  using your {+cmk-long+}.

Before You Get Started
----------------------

.. include:: /includes/set-up-section.rst

.. include:: /includes/fact-csfle-placeholder.rst

Select the programming language for which you want to see code examples for from
the dropdown menu below. 

.. composable-tutorial::
   :options: language-no-dependencies
   :defaults: nodejs

   Full Application Code
   ~~~~~~~~~~~~~~~~~~~~~

   .. selected-content::
      :selections: java-sync

      `Complete Java Application <{+sample-app-url-csfle+}/java/kmip/reader/>`__
   
   .. selected-content::
      :selections: nodejs

      `Complete Node.js Application <{+sample-app-url-csfle+}/node/kmip/reader/>`__

   .. selected-content::
      :selections: python

      `Complete Python Application <{+sample-app-url-csfle+}/python/kmip/reader/>`__

   .. selected-content::
      :selections: csharp

      `Complete C# Application <{+sample-app-url-csfle+}/dotnet/kmip/reader/CSFLE/>`__

   .. selected-content::
      :selections: go

      `Complete Go Application <{+sample-app-url-csfle+}/go/kmip/reader/>`__

   Set Up the KMS
   ~~~~~~~~~~~~~~

   .. note::

      ``mongod`` reads the KMIP configuration at startup. By default, the
      server uses KMIP protocol version 1.2.

      To connect to a version 1.0 or 1.1 KMIP server, use the 
      :setting:`useLegacyProtocol <security.kmip.useLegacyProtocol>`
      setting.

   .. selected-content::
      :selections: nodejs

      .. include:: /includes/csfle/nodejs-kmip.rst

   .. selected-content::
      :selections: java-sync

      .. include:: /includes/csfle/java-sync-kmip.rst

   .. selected-content::
      :selections: python

      .. include:: /includes/csfle/python-kmip.rst

   .. selected-content::
      :selections: csharp

      .. include:: /includes/csfle/csharp-kmip.rst

   .. selected-content::
      :selections: go

      .. include:: /includes/csfle/go-kmip.rst

Learn More
----------

To learn how {+csfle-abbrev+} works, see
:ref:`<csfle-fundamentals>`.

To learn more about the topics mentioned in this guide, see the
following links:

- Learn more about CSFLE components on the :ref:`Reference <csfle-reference>` page.
- Learn how {+cmk-long+}s and {+dek-long+}s work on the :ref:`<qe-reference-keys-key-vaults>` page.
- See how KMS Providers manage your CSFLE keys on the :ref:`<qe-fundamentals-kms-providers>` page.
