# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:5
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:32
msgid "Linearizable Reads via ``findAndModify``"
msgstr ""

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:10
msgid "Overview"
msgstr ""

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:12
msgid "When reading from a replica set, it is possible to read data that is stale (i.e. may not reflect all writes that have occurred prior to the read operation) or not durable (i.e. the state of the data may reflect a write that has not been acknowledged by a majority or the replica set members and thus could be rolled back), depending on the read concern used."
msgstr ""

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:19
msgid "Starting in version 3.4, MongoDB introduces :readconcern:`\"linearizable\"` read concern that returns durable data that is not stale. :readconcern:`Linearizable <\"linearizable\">` read concern guarantees only apply if read operations specify a query filter that uniquely identifies a single document."
msgstr ""

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:25
msgid "This tutorial outlines an alternative procedure, one using :method:`db.collection.findAndModify()` to read data that is not stale and cannot be rolled back, for deployments using MongoDB 3.2. For MongoDB 3.4, although the outlined procedure can be applied, see :readconcern:`\"linearizable\"` read concern instead."
msgstr ""

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:34
msgid "This procedure uses :method:`db.collection.findAndModify()` to read data that is not stale and cannot be rolled back. To do so, the procedure uses the :method:`~db.collection.findAndModify()` method with a :ref:`write concern <write-concern>` to modify a dummy field in a document. Specifically, the procedure requires that:"
msgstr ""

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:40
msgid ":method:`db.collection.findAndModify()` use an **exact** match query, and a :doc:`unique index </core/index-unique>` **must exist** to satisfy the query."
msgstr ""

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:44
msgid ":method:`~db.collection.findAndModify()` must actually modify a document; i.e. result in a change to the document."
msgstr ""

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:47
msgid ":method:`~db.collection.findAndModify()` must use the write concern :writeconcern:`{ w: \"majority\" } <\"majority\">`."
msgstr ""

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:52
msgid "The \"quorum read\" procedure has a substantial cost over simply using a read concern of :readconcern:`\"majority\"` because it incurs write latency rather than read latency. This technique should only be used if staleness is absolutely intolerable."
msgstr ""

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:58
msgid "Prerequisites"
msgstr ""

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:60
msgid "This tutorial reads from a collection named ``products``. Initialize the collection using the following operation."
msgstr ""

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:89
msgid "The documents in this collection contain a dummy field named ``_dummy_field`` that will be incremented by the :method:`db.collection.findAndModify()` in the tutorial. If the field does not exist, the :method:`db.collection.findAndModify()` operation will add the field to the document. The purpose of the field is to ensure that the :method:`db.collection.findAndModify()` results in a modification to the document."
msgstr ""

#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:98
msgid "Procedure"
msgstr ""

#: ../source/includes/steps/findAndModify-quorum-reads.rst:8
msgid "Create a unique index."
msgstr ""

#: ../source/includes/steps/findAndModify-quorum-reads.rst:10
#: ../source/includes/steps/findAndModify-quorum-reads.rst:31
msgid "Create a unique index on the fields that will be used to specify an exact match in the :method:`db.collection.findAndModify()` operation."
msgstr ""

#: ../source/includes/steps/findAndModify-quorum-reads.rst:13
#: ../source/includes/steps/findAndModify-quorum-reads.rst:34
msgid "This tutorial will use an exact match on the ``sku`` field. As such, create a unique index on the ``sku`` field."
msgstr ""

#: ../source/includes/steps/findAndModify-quorum-reads.rst:29
msgid "Step 1: Create a unique index."
msgstr ""

#: ../source/includes/steps/findAndModify-quorum-reads.rst:50
msgid "Use ``findAndModify`` to read committed data."
msgstr ""

#: ../source/includes/steps/findAndModify-quorum-reads.rst:52
#: ../source/includes/steps/findAndModify-quorum-reads.rst:101
msgid "Use the :method:`db.collection.findAndModify()` method to make a trivial update to the document you want to read and return the modified document. A write concern of :writeconcern:`{ w: \"majority\" } <\"majority\">` is required. To specify the document to read, you must use an exact match query that is supported by a unique index."
msgstr ""

#: ../source/includes/steps/findAndModify-quorum-reads.rst:58
#: ../source/includes/steps/findAndModify-quorum-reads.rst:107
msgid "The following :method:`~db.collection.findAndModify()` operation specifies an exact match on the uniquely indexed field ``sku`` and increments the field named ``_dummy_field`` in the matching document. While not necessary, the write concern for this command also includes a :ref:`wc-wtimeout` value of ``5000`` milliseconds to prevent the operation from blocking forever if the write cannot propagate to a majority of voting members."
msgstr ""

#: ../source/includes/steps/findAndModify-quorum-reads.rst:79
#: ../source/includes/steps/findAndModify-quorum-reads.rst:128
msgid "Even in situations where two nodes in the replica set believe that they are the primary, only one will be able to complete the write with :writeconcern:`w: \"majority\" <\"majority\">`. As such, the :method:`~db.collection.findAndModify()` method with :writeconcern:`\"majority\"` write concern will be successful only when the client has connected to the true primary to perform the operation."
msgstr ""

#: ../source/includes/steps/findAndModify-quorum-reads.rst:86
#: ../source/includes/steps/findAndModify-quorum-reads.rst:135
msgid "Since the quorum read procedure only increments a dummy field in the document, you can safely repeat invocations of :method:`~db.collection.findAndModify()`, adjusting the :ref:`wc-wtimeout` as necessary."
msgstr ""

#: ../source/includes/steps/findAndModify-quorum-reads.rst:99
msgid "Step 2: Use ``findAndModify`` to read committed data."
msgstr ""

