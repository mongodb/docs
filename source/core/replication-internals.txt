=====================
Replication Internals
=====================

.. default-domain:: mongodb

Synopsis
--------

This document provides a more in-depth explanation of the internals and
operation of :term:`replica set` features. This material is not necessary for
normal operation or application development but may be useful for
troubleshooting and for further understanding MongoDB's behavior and approach.

.. index:: replica set; oplog
.. _replica-set-oplog:

Oplog
-----

Replication itself works by way of a special :term:`capped collection`
called the :term:`oplog`. This collection keeps a rolling record of
all operations applied to the :term:`primary`. Secondary members then
replicate this log by applying the operations to themselves in an
asynchronous process.  Under normal operation, :term:`secondary` members
reflect writes within one second of the primary. However, various
exceptional situations may cause secondaries to lag behind further. See
:term:`replication lag` for details.

All members send heartbeats (pings) to all other members in the set and can
import operations to the local oplog from any other member in the set.

For more information about the oplog, see :ref:`oplog sizing <replica-set-oplog-sizing>`.

.. In 2.0, replicas would import entries from the member lowest
.. "ping," This wasn't true in 1.8 and will likely change in 2.2.

.. _replica-set-implementation:

Implementation
--------------

MongoDB uses :term:`single-master replication` to ensure that the
database remains consistent. However, clients may modify the
:ref:`read preferences <replica-set-read-preference>` on a
per-connection basis in order to distribute read operations to the
:term:`secondary` members of a :term:`replica set`. Read-heavy deployments may achieve
greater query volumes by distributing reads to secondary members. But
keep in mind that replication is asynchronous; therefore, reads from
secondaries may not always reflect the latest writes to the
:term:`primary`. See the :ref:`consistency <replica-set-consistency>`
section for more about :ref:`read preference
<replica-set-read-preference>` and :ref:`write concern
<replica-set-write-concern>`.

.. note::

   Use :func:`db.getReplicationInfo()` from a secondary member
   and the :doc:`replication status </reference/replication-info>`
   output to asses the current state of replication and determine if
   there is any unintended replication delay.

In the default configuration, all members have an equal chance of
becoming primary; however, it's possible to set :data:`priority <members[n].priority>` values that
weight the election. In some architectures, there may be operational
reasons for increasing the likelihood of a specific replica set member
becoming primary. For instance, a member located in a remote data
center should *not* become primary. See: :ref:`node
priority <replica-set-node-priority>` for more background on this
concept.

Replica sets can also include members with the following four special
configurations that affect membership behavior:

- :ref:`Secondary-only <replica-set-secondary-only-members>` members have
  their :data:`priority <members[n].priority>` values set to ``0`` and thus
  are not eligible for election as primaries.

- :ref:`Hidden <replica-set-hidden-members>` members do not appear in the
  output of :func:`db.isMaster()`. This prevents clients
  from discovering and potentially querying the member in question.

- :ref:`Delayed <replica-set-delayed-members>` members lag a fixed period
  of time behind the primary. These members are typically used
  for disaster recovery scenarios. For example, if an administrator
  mistakenly truncates a collection, and you discover the mistake within
  the lag window, then you can manually fail over to the delayed member.

- :ref:`Arbiters <replica-set-arbiters>` exist solely to participate
  in elections. They do not replicate data from the primary.

In almost every case, replica sets simplify the process of
administering database replication. However, replica sets still have a
unique set of administrative requirements and concerns. Choosing the
right :doc:`system architecture </administration/replication-architectures>`
for your data set is crucial.

Administrators of replica sets also have unique :ref:`monitoring
<replica-set-monitoring>` and :ref:`security <replica-set-security>`
concerns. The :ref:`replica set functions <replica-set-functions>` in
the :program:`mongo` shell, provide the tools necessary for replica set
administration. In particular use the :func:`rs.conf()` to return a
:term:`document` that holds the :doc:`replica set configuration
</reference/replica-configuration>` and use :func:`rs.reconfig()` to
modify the configuration of an existing replica set.

.. index:: replica set; elections
.. index:: replica set; failover
.. _replica-set-election-internals:

Elections
---------

When you initialize a :term:`replica set` for the first time, or when any
failover occurs, an election takes place to decide which member should
become :term:`primary`. A primary is the only member in the replica
set that can accept write operations, including :func:`insert()
<db.collection.insert()>`, :func:`update() <db.collection.update()>`,
and :func:`remove() <db.collection.remove()>`.

Elections are the process replica set members use to
select the primary in a set. Two types of events can trigger an election:
a primary steps down or a :term:`secondary` member
loses contact with a primary. All members have one vote
in an election, and any :program:`mongod` can veto an election. A
single veto invalidates the election.

An existing primary will step down in response to the
:dbcommand:`replSetStepDown` command or if it sees that one of
the current secondaries is eligible for election *and* has a higher
priority. A secondary will call for an election if it cannot
establish a connection to a primary. A primary will also step
down when it cannot contact a majority of the members of the replica
set. When the current primary steps down, it closes all open client
connections to prevent clients from unknowingly writing data to a
non-primary member.

In an election, every member, including :ref:`hidden
<replica-set-hidden-members>` members, :ref:`arbiters
<replica-set-arbiters>`, and even recovering members, get a single
vote. Members will give votes to every eligible member that calls an
election.

A member of the set will veto an election under the following
conditions:

- If the member seeking an election is not a member of the voter's set.

- If the member seeking an election is not up-to_date with the most
  recent operation accessible in the replica set.

- If the member seeking an election has a lower priority than another member
  in the set that is also eligible for election.

- If the current primary member has more recent operations
  (i.e. a higher "optime") than the member seeking election, from the
  perspective of the voting member.

- The current primary will also veto an election if it has the same or
  more recent operations (i.e. a "higher or equal optime") than the
  member seeking election.

.. note::

   Any member of a replica set *can* veto an election, even if the
   member is a :ref:`non-voting member <replica-set-non-voting-members>`.

The first member to receive votes from a majority of members in a set
becomes the next primary until the next election. Be
aware of the following conditions and possible situations:

- Replica set members send heartbeats (pings) to each other every 2
  seconds. If a heartbeat does not return for more than 10 seconds,
  the other members mark the delinquent member as inaccessible.

- Replica set members compare priorities only with other members of
  the set. The absolute value of priorities does not have any impact on
  the outcome of replica set elections.

  .. note::

     The only exception is that members with :data:`priority <members[n].priority>` values of ``0``
     cannot become primary and will not seek election. See
     :ref:`replica-set-node-priority-configuration` for more
     information.

- A replica set member cannot become primary *unless* it has the
  highest "optime" of any visible member in the set.

- If the member of the set with the highest priority is within 10
  seconds of the latest :term:`oplog` entry, then the set will *not* elect a
  primary until the member with the highest priority catches up
  to the latest operation.


.. seealso:: :ref:`Non-voting members in a replica
             set<replica-set-non-voting-members>`,
             :ref:`replica-set-node-priority-configuration`, and
             :data:`replica configuration <members[n].votes>`

Syncing
-------

In order to remain up-to-date with the current state of the :term:`replica set`,
set members sync, or copy, :term:`oplog` entries from other members.

When a new member joins a set or when an existing member restarts, the
member waits to receive heartbeats from other members. By
default, the member syncs from the *the closest* member of the
set that is either the primary or another secondary with more recent
oplog entries. This prevents two secondaries from syncing from each other.

In version 2.0, secondaries only change sync targets if the connection
between secondaries drops or produces an error.

For example:

#. If you have two secondary members in one data center and a primary in
   a second facility, and if you start all three instances at roughly
   the same time (i.e. with no existing data sets or oplog,) both
   secondaries will likely sync from the primary, as neither secondary
   has more recent oplog entries.

   If you restart one of the secondaries, then when it rejoins the set it
   will likely begin syncing from the other secondary, because of proximity.

#. If you have a primary in one facility and a secondary in an
   alternate facility, and if you add another secondary to the alternate
   facility, the new secondary will likely sync from the existing
   secondary because it is closer than the primary.
