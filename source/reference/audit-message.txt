===========================
System Event Audit Messages
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/note-audit-in-enterprise-only.rst

.. _audit-message-format:

Audit Message
-------------

The :doc:`event auditing feature </core/auditing>` can record events in
JSON format. To configure auditing output, see
:doc:`/tutorial/configure-auditing`.

.. versionchanged:: 5.0

The recorded JSON messages have the following syntax:

.. code-block:: none

   {
     atype: <string>,
     ts : { $date: <timestamp> },
     uuid : { $binary: <string>, $type: <string> },
     local: { ip: <string>, port: <int> || isSystemUser: <boolean> || unix: <string> },
     remote: { ip: <string>, port: <int> || isSystemUser: <boolean> || unix: <string> },
     users : [ { user: <string>, db: <string> }, ... ],
     roles: [ { role: <string>, db: <string> }, ... ],
     param: <document>,
     result: <int>
   }


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Field

     - Type

     - Description

   * - ``atype``

     - string

     - Action type. See :ref:`audit-action-details-results`.
       
       

   * - ``ts``

     - document

     - Document that contains the date and UTC time of the event, in ISO
       8601 format.
       
       

   * - .. _audit-message-uuid:
   
       ``uuid``

     - document

     - Document that contains a universally unique identifier (UUID) for
       the audit message. The ``$type`` field specifies the BSON subtype
       for the ``$binary`` field. The ``$type`` value of ``04``
       specifies that the ``$binary`` field contains a UUID.

       .. versionadded:: 5.0



   * - .. _audit-message-local:
   
       ``local``

     - document

     - A document that contains the ``ip`` address and the ``port``
       number of the running instance.

       .. include:: /includes/audit-local-remote.rst

       .. note::

          Starting in MongoDB 5.0, the ``local`` field is deprecated.
          Use the ``localEndpoint`` field in the :ref:`clientMetadata
          <audit-message-clientMetadata>` audit message instead.

       .. versionchanged:: 5.0



   * - ``remote``

     - document

     - A document that contains the ``ip`` address and the ``port``
       number of the incoming connection associated with the event.

       .. include:: /includes/audit-local-remote.rst       

       .. versionchanged:: 5.0



   * - ``users``

     - array

     - Array of user identification documents. Because MongoDB allows a
       session to log in with different user per database, this array can
       have more than one user. Each document contains a ``user`` field for
       the username and a ``db`` field for the authentication database for
       that user.
       
       

   * - ``roles``

     - array

     - Array of documents that specify the :doc:`roles
       </core/authorization>` granted to the user. Each document contains a
       ``role`` field for the name of the role and a ``db`` field for the
       database associated with the role.
       
       

   * - ``param``

     - document

     - Specific details for the event. See :ref:`audit-action-details-results`.
       
       

   * - ``result``

     - integer

     - Error code. See :ref:`audit-action-details-results`.
       
       



.. _audit-action-details-results:

Audit Event Actions, Details, and Results
-----------------------------------------

The following table lists for each ``atype`` or action type, the
associated ``param`` details and the ``result`` values, if any.

.. list-table::
   :header-rows: 1
   :widths: 20 50 30

   * - ``atype``

     - ``param``

     - ``result``


   * - .. _audit-message-authenticate:

       ``authenticate``

     - .. code-block:: none
          :copyable: false

          {
            user: <user name>,
            db: <database>,
            mechanism: <mechanism>
          }

       Starting in MongoDB 5.0, ``authenticate``:

       - Is logged for incomplete authentication attempts.
       
       - Includes the principle name and identifier in
         ``mechanism`` for external authentication mechanisms such as
         :ref:`x.509 <security-auth-x509>` and Amazon Web Services
         Identity and Access Management (AWS-IAM) (see
         :urioption:`authMechanism`).

       .. versionchanged:: 5.0

     - | ``0`` - Success
       | ``18`` - Authentication Failed
       | ``334`` - Mechanism Unavailable

   * - .. _audit-message-authCheck:

       ``authCheck``

     - .. code-block:: none
          :copyable: false

          {
            command: <name>,
            ns: <database>.<collection>,
            args: <command object>
          }

       | ``ns`` field is optional.
       | ``args`` field may be redacted.

       By default, the auditing system logs only the authorization
       failures. To enable the system to log authorization successes,
       use the :parameter:`auditAuthorizationSuccess` parameter.
       
       .. include:: /includes/fact-auditAuthorizationSuccess-performance-impact.rst

       Starting in MongoDB 5.0, ``authCheck`` is not logged for actions
       that are generated internally.

       .. versionchanged:: 5.0

     - | ``0`` - Success
       | ``13`` - Unauthorized to perform the operation.


   * - .. _audit-message-clientMetadata:

       ``clientMetadata``

     - .. code-block:: none
          :copyable: false

          {
             localEndpoint : {
                ip : <IP address of running instance>,
                port : <port of running instance>
             } || {
                unix : <MongoDB socket file path if connecting through
                        a Unix domain socket>
             },
             clientMetadata : {
                driver : {
                   name : <client driver name>,
                   version : <client driver version>
                },
                os : {
                   type : <client operating system type>,
                   name : <client operating system name>,
                   architecture : <client operating system architecture>,
                   version : <client operating system version>
                },
                platform : <client platform name>,
                application : {
                   name : <client application name>
                }
             }
          }

       Contains the client metadata. Logged when the client runs the
       :dbcommand:`hello` command.

       .. seealso::
       
          :ref:`log-messages-client-data`
       
       .. versionadded:: 5.0

     - ``0`` - Success


   * - .. _audit-message-createCollection:

       :authaction:`createCollection`

     - .. code-block:: none
          :copyable: false

          {
             ns: <database>.<collection || view>,
             viewOn: <database>.<collection>,
             pipeline: [ <pipeline definition> ]
          }

       Logged when a:
       
       - Collection is created.
       
       - :ref:`View <3.4-reference-views>` is created, with the view
         name logged in the ``ns`` field.

       .. include:: /includes/collection-audit-event.rst

       .. versionchanged:: 5.0

     - ``0`` - Success


   * - ``createDatabase``

     - .. code-block:: none
          :copyable: false

          { ns: <database> }


     - ``0`` - Success


   * - .. _audit-message-createIndex:

       :authaction:`createIndex`

     - .. code-block:: none
          :copyable: false

          {
            ns: <database>.<collection>,
            indexName: <index name>,
            indexSpec: <index specification>,
            indexBuildState: <index build state>
          }

       Possible values for ``indexBuildState`` are:

       - ``IndexBuildStarted``
       - ``IndexBuildSucceeded``
       - ``IndexBuildAborted``

       Starting in MongoDB 5.0, :authaction:`createIndex` audit events
       are:
       
       - Logged at the start and end of index creation, and includes a
         message indicating if the index was successfully created or
         not.

       - Attributed to the originating user for the action that
         caused the :authaction:`createIndex` audit event.

       - Logged for a :authaction:`createCollection` event if the
         collection has an index.

       .. versionchanged:: 5.0

     - | ``0`` - Success
       | ``276`` - Index build aborted.

       The audit message contains result code ``276`` for
       :authaction:`createIndex` audit events with ``IndexBuildState``
       set to ``IndexBuildAborted``. The audit message contains result
       code ``0`` for :authaction:`createIndex` audit events with
       ``IndexBuildState`` set to ``IndexBuildStarted`` or
       ``IndexBuildSucceeded``.


   * - .. _audit-message-directAuthMutation:

       ``directAuthMutation``

     - .. code-block:: none
          :copyable: false

          {
             document: {
                <collection modifications>
             },
             ns: <database>.<collection>,
             operation: <database operation>
          }

       Logged when a database operation directly modifies the contents
       of the :data:`admin.system.users` or :data:`admin.system.roles`
       collections.

       .. versionadded:: 5.0

     - ``0`` - Success


   * - ``renameCollection``

     - .. code-block:: none
          :copyable: false

          {
            old: <database>.<collection>,
            new: <database>.<collection>
          }


     - ``0`` - Success


   * - .. _audit-message-dropCollection:

       :authaction:`dropCollection`

     - .. code-block:: none
          :copyable: false

          {
             ns: <database>.<collection || view>,
             viewOn: <database>.<collection>,
             pipeline: [ <pipeline definition> ]
          }

       Logged when a:
       
       - Collection is dropped.
       
       - :ref:`View <3.4-reference-views>` is dropped, with the view
         name logged in the ``ns`` field.

       .. include:: /includes/collection-audit-event.rst

       In addition, starting in MongoDB 5.0, a
       :authaction:`dropCollection` audit event is logged when a
       :authaction:`dropDatabase` event occurs.

       .. versionchanged:: 5.0

     - | ``0`` - Success
       | ``26`` - ``NamespaceNotFound``

       If the collection or view does not exist, the audit message shows
       the return code as ``result: 26``. 

   * - :authaction:`dropDatabase`

     - .. code-block:: none
          :copyable: false

          { ns: <database> }

     - ``0`` - Success

   * - :authaction:`dropIndex`

     - .. code-block:: none
          :copyable: false

          {
            ns: <database>.<collection>,
            indexName: <index name>
          }


     - ``0`` - Success

   * - :authaction:`createUser`

     - .. code-block:: none
          :copyable: false

          {
            user: <user name>,
            db: <database>,
            customData: <document>,
            roles: [
               {
                 role: <role name>,
                 db: <database>
               },
               ...
            ]
          }

       The ``customData`` field is optional.


     - ``0`` - Success

   * - :authaction:`dropUser`

     - .. code-block:: none
          :copyable: false

          {
            user: <user name>,
            db: <database>
          }


     - ``0`` - Success

   * - ``dropAllUsersFromDatabase``

     - .. code-block:: none
          :copyable: false

          { db: <database> }


     - ``0`` - Success

   * - ``updateUser``

     - .. code-block:: none
          :copyable: false

          {
            user: <user name>,
            db: <database>,
            passwordChanged: <boolean>,
            customData: <document>,
            roles: [
               {
                 role: <role name>,
                 db: <database>
               },
               ...
            ]
          }

       The ``customData`` field is optional.


     - ``0`` - Success

   * - ``grantRolesToUser``

     - .. code-block:: none
          :copyable: false

          {
            user: <user name>,
            db: <database>,
            roles: [
               {
                 role: <role name>,
                 db: <database>
               },
               ...
            ]
          }


     - ``0`` - Success

   * - ``revokeRolesFromUser``

     - .. code-block:: none
          :copyable: false

          {
            user: <user name>,
            db: <database>,
            roles: [
               {
                 role: <role name>,
                 db: <database>
               },
               ...
            ]
          }


     - ``0`` - Success

   * - :authaction:`createRole`

     - .. code-block:: none
          :copyable: false

          {
            role: <role name>,
            db: <database>,
            roles: [
               {
                 role: <role name>,
                 db: <database>
               },
               ...
            ],
            privileges: [
              {
                resource: <resource document>,
                actions: [ <action>, ... ]
              },
              ...
            ]
          }

       The ``roles`` and the ``privileges`` fields are optional.

       For details on the resource document, see :ref:`resource-document`.
       For a list of actions, see :ref:`security-user-actions`.


     - ``0`` - Success

   * - ``updateRole``

     - .. code-block:: none
          :copyable: false

          {
            role: <role name>,
            db: <database>,
            roles: [
               {
                 role: <role name>,
                 db: <database>
               },
               ...
            ],
            privileges: [
              {
                resource: <resource document>,
                actions: [ <action>, ... ]
              },
              ...
            ]
          }

       The ``roles`` and the ``privileges`` fields are optional.

       For details on the resource document, see :ref:`resource-document`.
       For a list of actions, see :ref:`security-user-actions`.


     - ``0`` - Success

   * - :authaction:`dropRole`

     - .. code-block:: none
          :copyable: false

          {
            role: <role name>,
            db: <database>
          }


     - ``0`` - Success

   * - ``dropAllRolesFromDatabase``

     - .. code-block:: none
          :copyable: false

          { db: <database> }


     - ``0`` - Success

   * - ``grantRolesToRole``

     - .. code-block:: none
          :copyable: false

          {
            role: <role name>,
            db: <database>,
            roles: [
               {
                 role: <role name>,
                 db: <database>
               },
               ...
            ]
          }


     - ``0`` - Success

   * - ``revokeRolesFromRole``

     - .. code-block:: none
          :copyable: false

          {
            role: <role name>,
            db: <database>,
            roles: [
               {
                 role: <role name>,
                 db: <database>
               },
               ...
            ]
          }


     - ``0`` - Success

   * - ``grantPrivilegesToRole``

     - .. code-block:: none
          :copyable: false

          {
            role: <role name>,
            db: <database>,
            privileges: [
              {
                resource: <resource document>,
                actions: [ <action>, ... ]
              },
              ...
            ]
          }

       For details on the resource document, see :ref:`resource-document`.
       For a list of actions, see :ref:`security-user-actions`.


     - ``0`` - Success

   * -  ``revokePrivilegesFromRole``

     - .. code-block:: none
          :copyable: false

          {
            role: <role name>,
            db: <database name>,
            privileges: [
              {
                resource: <resource document>,
                actions: [ <action>, ... ]
              },
              ...
            ]
          }

       For details on the resource document, see :ref:`resource-document`.
       For a list of actions, see :ref:`security-user-actions`.


     - ``0`` - Success

   * - ``replSetReconfig``

     - .. code-block:: none
          :copyable: false

          {
            old: {
             _id: <replicaSetName>,
             version: <number>,
             ...
             members: [ ... ],
             settings: { ... }
            },
            new: {
             _id: <replicaSetName>,
             version: <number>,
             ...
             members: [ ... ],
             settings: { ... }
            }
          }

       For details on the replica set configuration document, see
       :doc:`/reference/replica-configuration`.

     - ``0`` - Success

   * - :authaction:`enableSharding`

     - .. code-block:: none
          :copyable: false

          { ns: <database> }


     - ``0`` - Success

   * - ``shardCollection``

     - .. code-block:: none
          :copyable: false

          {
            ns: <database>.<collection>,
            key: <shard key pattern>,
            options: { unique: <boolean> }
          }


     - ``0`` - Success

   * - :authaction:`addShard`

     - .. code-block:: none
          :copyable: false

          {
            shard: <shard name>,
            connectionString: <hostname>:<port>,
            maxSize: <maxSize>
          }

       When a shard is a replica set, the ``connectionString`` includes the
       replica set name and can include other members of the replica set.


     - ``0`` - Success

   * - :authaction:`refineCollectionShardKey`

     - .. code-block:: none
          :copyable: false

          {
            ns: <database>.<collection>,
            key: <shard key pattern>
          }


     - ``0`` - Success


   * - :authaction:`removeShard`

     - .. code-block:: none
          :copyable: false

          { shard: <shard name> }


     - ``0`` - Success

   * - :authaction:`shutdown`

     - .. code-block:: none
          :copyable: false

          { }

       Indicates commencement of database shutdown.


     - ``0`` - Success

   * - :authaction:`applicationMessage`

     - .. code-block:: none
          :copyable: false

          { msg: <custom message string> }

       See :dbcommand:`logApplicationMessage`.


     - ``0`` - Success


   * - .. _audit-message-logout:

       ``logout``

     - .. code-block:: none
          :copyable: false

          {
            reason: <string>,
            initialUsers: [ <document>, ... ],
            updatedUsers: [ <document>, ... ], 
          }

       ``reason`` will be either:
         - "Explicit logout from <database>"
         - "Implicit logout due to client connection closure"

       ``initialUsers`` is an array of documents containing users 
       authenticated on the current client prior to logout.

       ``updatedUsers`` is an array of documents containing users 
       expected to be authenticated on the current client after the 
       logout event. 

       Each document in ``initialUsers`` and ``updatedUsers`` contains:
         - ``user``: the username
         - ``db``: the database ``user`` is authenticated to

       .. versionadded:: 5.0


     - ``0`` - Success


   * - .. _audit-message-startup:
   
       ``startup``

     - .. code-block:: none
          :copyable: false

          { options: <document> }

       The ``options`` document contains the options the instance was 
       started with.
     
       .. versionadded:: 5.0


     - ``0`` - Success
