============================
Change the Size of the Oplog
============================

.. default-domain:: mongodb

The :term:`oplog` exists internally as a :term:`capped collection`, so
you cannot modify its size in the course of normal operations. In most
cases the :ref:`default oplog size <replica-set-oplog-sizing>` is an
acceptable size; however, in some situations you may need a larger or
smaller oplog. For example, you might need to change the oplog size
if your applications perform large numbers of multi-updates or
deletes in short periods of time.

This tutorial describes how to resize the oplog. For a detailed
explanation of oplog sizing, see :ref:`replica-set-oplog-sizing`.
For details how
oplog size affects :term:`delayed members <delayed member>` and affects
:term:`replication lag`, see :ref:`replica-set-delayed-members`.

Overview
--------

Resize the oplog on each member
separately, starting with the :term:`secondaries
<secondary>`. Resize the :term:`primary's <primary>` oplog last. Resizing for a given
member involves:

- Restart the member in standalone mode. For the primary, which is
  done last, step it down first.

- Recreate the oplog with the new size and with an old oplog entry to
  seed it.

- Restart the member normally.

Procedure
---------

Perform a rolling update of the oplog size by shutting down a member,
changing its oplog size, and restarting the member. Start with the
non-primary members and end with the primary. Starting with the primary
would trigger a :ref:`failover <replica-set-failover>` situation.
Another member would become primary. In most cases, it is least
disruptive to limit the number of primary changes to just the one at the end.

To change the size of the oplog for a replica set, use the following
procedure for every member of the set that may become primary.

Restart a Secondary in Standalone Mode on a Different Port
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Shut down the :program:`mongod` instance for one of the non-primary
members of your replica set. For example, to shut down, use the
:method:`db.shutdownServer()` method:

.. code-block:: sh

   db.shutdownServer()

Restart this :program:`mongod` as a standalone instance
running on a different port and *without*
the :option:`--replSet <mongod --replSet>` parameter. Use a command
similar to the following:

.. code-block:: sh

   mongod --port 37017 --dbpath /srv/mongodb

Create a Backup of the Oplog (Optional)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Optionally, backup the existing oplog on the standalone instance. For example:

.. code-block:: sh

   mongodump --db local --collection 'oplog.rs' --port 37017


Recreate the Oplog with a New Size and a Seed Entry
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Save the last entry from the oplog. For example, connect to the instance
using the :program:`mongo` shell, and enter the following command to
switch to the ``local`` database:

.. code-block:: javascript

   use local

Use the :method:`db.collection.save()` operation and a sort on
reverse :term:`natural order` to find the last entry and save it
to a temporary collection:

.. _last-oplog-entry:

.. code-block:: javascript

   db.temp.save( db.oplog.rs.find( { }, { ts: 1, h: 1 } ).sort( {$natural : -1} ).limit(1).next() )

To see this oplog entry, issue the following command:

.. code-block:: javascript

   db.temp.find()

Drop the Oplog
~~~~~~~~~~~~~~

Drop the old ``oplog.rs`` collection in the ``local`` database. Use
the following command:

.. code-block:: javascript

   db.oplog.rs.drop()

This returns ``true`` on the shell.

Create a New Oplog
~~~~~~~~~~~~~~~~~~

Use the :dbcommand:`create` command to create a new oplog of a
different size. Specify the ``size`` argument in bytes. A value of
``2 * 1024 * 1024 * 1024`` will create a new oplog that's 2 gigabytes:

.. code-block:: javascript

   db.runCommand( { create: "oplog.rs", capped: true, size: (2 * 1024 * 1024 * 1024) } )

Upon success, this command returns the following status:

.. code-block:: javascript

   { "ok" : 1 }

Insert the Last Entry of the Old Oplog into the New Oplog
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Insert the previously saved last entry from the old oplog into the
new oplog. For example:

.. code-block:: javascript

   db.oplog.rs.save( db.temp.findOne() )

To confirm the entry is in the new oplog, issue the following command:

.. code-block:: javascript

   db.oplog.rs.find()

Restart the Member
~~~~~~~~~~~~~~~~~~

Restart the server as a member of the replica set on its usual
port. For example:

.. code-block:: javascript

   db.shutdownServer()
   mongod --replSet rs0 --dbpath /srv/mongodb

The replica member will recover and "catch up" and then will be
eligible for election to primary.

Repeat Process for all Members that may become Primary
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Repeat this procedure for all members for which to change the oplog
size. We suggest you do this for all members that can become primary
(i.e., members with a "non-zero" priority). Do not *yet* apply the
procedure to the primary itself.

Apply the Procedure to the Primary
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To finish the rolling upgrade, step down the primary with the
:method:`rs.stepDown()` method and repeat the oplog resizing procedure
above.
