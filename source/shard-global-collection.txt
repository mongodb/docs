.. _shard-global-collection:

=========================
Shard a Global Collection
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/serverless-dont-use.rst

.. _de-shard-collection-for-global-writes:

Shard a Global Collection for |global-write| in the {+atlas-ui+}
----------------------------------------------------------------

.. note::

   - Global writes are only supported on global {+clusters+}, which
     require an ``M30+`` {+cluster+} tier.

   - This document assumes prior knowledge of sharding semantics.
     Review the :manual:`Sharding documentation </sharding>` before
     continuing with this tutorial.

In sharded {+clusters+}, you can create :term:`zones <zone>` of sharded
data based on the :term:`shard key`. Your zones can segment data
based on geographic area. To learn more about sharding based
on geographic area, see :manual:`Segmenting Data by Location
</tutorial/sharding-segmenting-data-by-location/>`.

The {+atlas-ui+} supports sharding Global Write collections only inside 
of a global {+cluster+}. To shard non-Global-Write
collections, you must use {+mongosh+} or application
code. To learn more, see :manual:`Deploy a Sharded Cluster
</tutorial/deploy-shard-cluster/>`.

Required Roles
~~~~~~~~~~~~~~

You must have the :authrole:`Project Owner`  or :authrole:`Organization 
Owner` role for the {+cluster+}'s |service| project to shard a 
collection for |global-write| in the {+atlas-ui+}.

Considerations
~~~~~~~~~~~~~~

Review the restrictions and compatibility requirements for
:ref:`global-writes-collections` before beginning this procedure.

.. include:: /includes/fact-online-archive-recommendation.rst

After selecting a shard key via the {+atlas-ui+}, |service| attempts to 
shard the target collection. During this period, ensure that no user 
manually shards the collection. If |service| detects that the target 
collection was sharded with a different key than the one selected via 
the {+atlas-ui+}, |service| stops the procedure and displays a warning 
for that collection in the {+atlas-ui+}. You can click 
:guilabel:`Unmanage Collection` to clear the warning. This action 
removes the collection from |service| management while leaving the 
underlying collection and the manually chosen shard key intact.

Update the Shard Key Value
``````````````````````````

Starting in MongoDB 4.2, you can update a document’s shard key value
unless the shard key field is the immutable ``_id`` field. To learn
more, see :manual:`Change a Document’s Shard Key Value
</core/sharding-shard-key/#change-a-document-s-shard-key-value>`.

In MongoDB 4.0 and earlier, you can't update the value of a shard key
field in an existing document in a Global Writes-enabled collection.

Procedure
~~~~~~~~~

To shard a collection in a |global-write-cluster|:

.. include:: /includes/steps/shard-collection-for-global-writes.rst

|service| displays the compound shard key near the top of the
:guilabel:`Global Writes` tab after configuring the collection.

.. _global-cluster-sharding:

Global Cluster Sharding Reference
---------------------------------

The following sections describe :manual:`sharding </sharding>`
behavior and how to enable sharding for :ref:`global-clusters`.

.. _global-writes-collections:

Sharding Collections for Global Writes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Unsharded collections must meet the following compatibility
requirements *prior to sharding* to use |global-write| when
sharded:

- Every document in the collection **must** include a ``location``
  field.

- The value of the ``location`` field **must** be either an
  |iso3166-1a2| country code (``"US"``, ``"DE"``, ``"IN"``) *or* a
  supported |iso3166-2| subdivision code (``"US-DC"``, ``"DE-BE"``,
  ``"IN-DL"``). Documents that don't match this criteria can't be routed
  to any shard in the {+cluster+}. To view the complete list of 
  currently supported country or subdivision codes, see
  https://cloud.mongodb.com/static/atlas/country_iso_codes.txt.

A shard key on the ``location`` field alone might result in bottlenecks,
especially for workloads where a subset of countries or subdivisions
receive the majority of write operations. |service| |global-write|
requires a :manual:`compound shard key </core/index-compound>` to
facilitate the efficient distribution of sharded data across the 
{+cluster+}. |service| |global-write-cluster| shard keys share the same 
restrictions as MongoDB shard keys. The following |service|
|global-write-cluster| limitations apply:

- The first field of the compound shard key must be ``location`` and 
  *can't* be hashed.

- There can only be one secondary shard key field in a compound shard 
  key.

- Starting in MongoDB version 4.4, the secondary shard key field of a 
  compound shard key *can* be hashed.

- The secondary shard key field *can't* be an array.

.. seealso::

   To learn more about:

   - Choosing a secondary shard key field and the effect of shard
     key choices on data distribution, see
     :ref:`Choosing a Shard Key <sharding-shard-key-selection>`.

   - Shard key limitations, see
     :ref:`Shard Key Limitations <limits-shard-keys>`.

   - Available hashed sharding options, see
     :ref:`Hashed Sharding Options <global-writes-initial-chunks>`.

.. important:: Changing the Shard Key

   After sharding, what you can modify depends on the version of
   MongoDB that you run:

   .. list-table::
      :widths: 40 30 30
      :header-rows: 1
      :stub-columns: 1

      * - MongoDB Version
        - Modify Shard Key Keys
        - Modify Shard Key Values

      * - MongoDB 4.0
        - No
        - No

      * - MongoDB 4.2
        - No
        - Yes

      * - MongoDB 4.4
        - Yes, add fields to a key using the :ref:`{+atlas-ui+} 
          <atlas-ui>` only.
        - Yes

      * - MongoDB 5.0
        - Yes, add fields to a key using the :ref:`{+atlas-ui+}
          <atlas-ui>` only.
        - Yes

The :ref:`{+atlas-ui+} <atlas-ui>` supports creating sharded
collections with specific validations for |global-write|.

.. seealso::

   To learn more, see
   :ref:`de-shard-collection-for-global-writes`.

You can also use {+mongosh+} to execute the
:method:`sh.shardCollection() <sh.shardCollection>`. After sharding
the collection, you must use the :ref:`{+atlas-ui+} <atlas-ui>`
to enable |global-write| for that collection.

.. seealso::

   To learn more about sharding collections via the {+atlas-ui+}, see
   :ref:`de-shard-collection-for-global-writes`.

.. _global-writes-initial-chunks:

Hashed Sharding Options  
```````````````````````

Shard keys use :manual:`hashed sharding </core/hashed-sharding/>` and 
pre-split data for even distribution. This is only available on 
|service| {+clusters+} running MongoDB 4.4 and later.

|service| distributes the sharded data evenly by hashing the second 
field of the shard key if you perform one of the following actions:

- Enable the use of the hashed index shard keys by selecting 
  :guilabel:`Use hashed index as the shard key` in the 
  :ref:`{+atlas-ui+} <de-shard-collection-for-global-writes>`.

- Set ``isCustomShardKeyHashed`` through the :oas-atlas-op:`API 
  </createOneManagedNamespaceInOneGlobalCluster>`.


You can optionally specify whether to perform initial chunk creation and
distribution for an empty or non-existing collection. This action is 
based on the defined zones and zone ranges for the collection. To do 
this, perform one of the following actions:

- Select :guilabel:`Pre-split data for even distribution` 
  in the :ref:`{+atlas-ui+} <de-shard-collection-for-global-writes>`.
 
- Set ``presplitHashedZone`` using the :oas-atlas-op:`API 
  </createOneManagedNamespaceInOneGlobalCluster>`.

When you create a sharded collection using a compound hashed shard key 
for |global-write-cluster|\s, |service| creates at least 1 chunk per 
location `code 
<https://cloud.mongodb.com/static/atlas/country_iso_codes.txt>`__ 
and attempts to distribute chunks evenly across shards in the
{+cluster+}. 

You can also specify the minimum number of chunks to create initially 
when sharding an empty collection with a :manual:`hashed shard key 
</core/hashed-sharding/>` using the :ref:`{+atlas-ui+} 
<de-shard-collection-for-global-writes>` or by 
setting the ``numInitialChunks`` parameter through the 
:oas-atlas-op:`API </createOneManagedNamespaceInOneGlobalCluster>`. 

.. note:: 

   If you specify the number of chunks per shard, |service| creates at 
   least the minimum number of chunks that you specified, with the same 
   number of chunks per location code. If you specify the minimum 
   number of chunks, |service| sets up zoned sharding quickly, 
   especially if you already know how to geographically distribute your 
   data before sharding.

Error Handling
~~~~~~~~~~~~~~

If |service| encounters an error while sharding a collection for global
writes, a message appears in the banner at the top of the screen.

1. Click :guilabel:`See Details` to learn about the error and the 
   namespace where the error occured. A modal window appears with the 
   complete error message and a :guilabel:`Fix Now` button.

#. Click :guilabel:`Close` and navigate to the collection in the
   {+atlas-ui+}. You can also click the :guilabel:`Fix Now` button to 
   go to the {+atlas-ui+} for that |service| {+cluster+}.
   
#. Click the :guilabel:`Global Writes` tab for the collection mentioned 
   in the error message.

#. Click :guilabel:`Unmanage Collection` to cancel the global writes 
   sharding operation. You must have the
   :authrole:`Project Data Access Admin` role to cancel the sharding 
   operation.
   
After you make any necessary changes to the collection as indicated by 
the error message, you can start the sharding process again.

Possible errors include:

An index already exists on the custom shard key.
  If the field chosen as the second part of the compound shard key is
  already indexed, the sharding operation may fail.

The shard key field is not present.
  All documents in the collection must contain both the shard key
  fields. This error occurs only in versions earlier than MongoDB 4.4.

The collection is already sharded.
  If the collection has already been manually sharded, the operation
  fails.

The collection has a custom default collation.
  A :manual:`custom default collation </reference/collation/>` on the
  collection may cause a sharding error.

.. _global-writes-write-operations:

|global-write-cluster| Write Operations
```````````````````````````````````````

For each document in a write operation, MongoDB
uses the ``location`` field of the shard key (if included) to determine 
the zone to route the data to. MongoDB selects a shard associated to 
that zone as the target for writing the document, facilitating
geographically isolated and segmented data storage.

.. warning::
   
   If a shard key isn't included in the write operation,
   or a shard key is included, but the ``location`` field isn't present,
   the write operation will succeed, but the resulting documents will 
   not to be distributed.


MongoDB can guarantee this behavior only for inserted documents that
meet the criteria defined in :ref:`global-writes-collections`.
Specifically, MongoDB can route a document whose ``location`` field
doesn't conform to |iso3166-1a2| *or* |iso3166-2| to any shard in the
cluster.

.. _global-writes-read-operations:

|global-write-cluster| Read Operations
``````````````````````````````````````

MongoDB query routing depends on whether the read operation includes
the full shard key **and** that the ``location`` value corresponds to a
supported |iso3166-1a2| country code (``"US"``, ``"DE"``, ``"IN"``)
*or* a supported |iso3166-2| subdivision code (``"US-DC"``,
``"DE-BE"``, ``"IN-DL"``).

- For queries that do include the full shard key and whose ``location``
  value meets the requirements for |global-write|, MongoDB targets the
  read operation to the zone that maps to the ``location`` value or
  values specified in the query.

- For read operations that don't include the ``location`` value , or if
  the ``location`` value doesn't correspond to a supported
  |iso3166-1a2| country code or |iso3166-2| subdivision code, MongoDB
  must broadcast the read operation to every zone in the {+cluster+}.

- For |global-write| zones that have :guilabel:`Read-only` nodes in
  geographically distant regions, clients in those regions can query
  the local :guilabel:`Read-only` node for that zone by specifying the
  full shard key as part of the query *and* issuing the read
  operation with a :manual:`Read Preference </core/read-preference/>`
  of :readmode:`nearest`.

.. important::

   Secondary reads might return stale data depending on the level
   of replication lag between the secondary node and the primary.

.. seealso::

   To learn more about:

   - MongoDB read preference, see
     :manual:`Read Preference </core/read-preference/>`.

   - MongoDB query routing, see
     :manual:`mongos </core/sharded-cluster-query-router/>`.

Sharding Collections without Global Writes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

|global-write| {+clusters+} support the same
:manual:`Ranged </core/ranged-sharding>` and
:manual:`Hashed </core/hashed-sharding>` sharding strategies
as a standard |service| sharded {+cluster+}. For sharded collections 
whose shard keys and document schema don't support |global-write|,
MongoDB distributes the sharded data evenly across the available shards
in the {+cluster+} with respect to the chosen
:manual:`shard key </core/sharding-shard-key/>`. Consider using a
separate sharded {+cluster+} for data that can't take advantage of
|global-write|.

You can't modify a collection to support |global-write| after
sharding. We recommend that you choose a shard key that will
allow you to use |global-write| for a collection in the future.

.. seealso::

   To learn more about |global-write| sharding requirements, see
   :ref:`global-writes-collections`.

Unsharded Collections in Global Write {+Clusters+}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

|global-write-clusters| provide the same support for unsharded
collections as a standard |service| sharded {+cluster+}. For each 
database in the {+cluster+}, MongoDB stores its unsharded collections 
on a :term:`primary shard`. Use :method:`sh.status() <sh.status>` from 
{+mongosh+} to determine the primary shard for the database.
