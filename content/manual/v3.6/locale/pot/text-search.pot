# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/text-search.txt:3
msgid "Text Search"
msgstr ""

#: ../source/text-search.txt:14
msgid "Overview"
msgstr ""

#: ../source/text-search.txt:16
msgid "MongoDB supports query operations that perform a text search of string content. To perform text search, MongoDB uses a :ref:`text index <index-feature-text>` and the :query:`$text` operator."
msgstr ""

#: ../source/includes/extracts/views-unsupported-text-search.rst:1
msgid ":doc:`Views </core/views>` do not support text search."
msgstr ""

#: ../source/text-search.txt:25
msgid "Example"
msgstr ""

#: ../source/text-search.txt:27
msgid "This example demonstrates how to build a text index and use it to find coffee shops, given only text fields."
msgstr ""

#: ../source/text-search.txt:30
msgid "Create a collection ``stores`` with the following documents:"
msgstr ""

#: ../source/text-search.txt:45
msgid "Text Index"
msgstr ""

#: ../source/includes/fact-text-index.rst:1
msgid "MongoDB provides :ref:`text indexes <index-feature-text>` to support text search queries on string content. ``text`` indexes can include any field whose value is a string or an array of string elements."
msgstr ""

#: ../source/includes/fact-create-text-index.rst:1
msgid "To perform text search queries, you must have a ``text`` index on your collection. A collection can only have **one** text search index, but that index can cover multiple fields."
msgstr ""

#: ../source/includes/fact-create-text-index.rst:5
msgid "For example you can run the following in a :binary:`~bin.mongo` shell to allow text search over the ``name`` and ``description`` fields:"
msgstr ""

#: ../source/text-search.txt:52
msgid "``$text`` Operator"
msgstr ""

#: ../source/includes/fact-use-text-operator.rst:1
msgid "Use the :query:`$text` query operator to perform text searches on a collection with a :ref:`text index <index-feature-text>`."
msgstr ""

#: ../source/includes/fact-use-text-operator.rst:4
msgid ":query:`$text` will tokenize the search string using whitespace and most punctuation as delimiters, and perform a logical ``OR`` of all such tokens in the search string."
msgstr ""

#: ../source/includes/fact-use-text-operator.rst:8
msgid "For example, you could use the following query to find all stores containing any terms from the list \"coffee\", \"shop\", and \"java\":"
msgstr ""

#: ../source/text-search.txt:57
msgid "Exact Phrase"
msgstr ""

#: ../source/text-search.txt:59
msgid "You can also search for exact phrases by wrapping them in double-quotes. If the ``$search`` string includes a phrase and individual terms, text search will only match documents that include the phrase."
msgstr ""

#: ../source/text-search.txt:63
msgid "For example, the following will find all documents containing \"coffee shop\":"
msgstr ""

#: ../source/text-search.txt:70
msgid "For more information, see :ref:`text-operator-phrases`."
msgstr ""

#: ../source/text-search.txt:73
msgid "Term Exclusion"
msgstr ""

#: ../source/text-search.txt:75
msgid "To exclude a word, you can prepend a \"``-``\" character. For example, to find all stores containing \"java\" or \"shop\" but not \"coffee\", use the following:"
msgstr ""

#: ../source/text-search.txt:84
msgid "Sorting"
msgstr ""

#: ../source/text-search.txt:86
msgid "MongoDB will return its results in unsorted order by default. However, text search queries will compute a relevance score for each document that specifies how well a document matches the query."
msgstr ""

#: ../source/text-search.txt:90
msgid "To sort the results in order of relevance score, you must explicitly project the :projection:`$meta` ``textScore`` field and sort on it:"
msgstr ""

#: ../source/text-search.txt:100
msgid "Text search is also available in the aggregation pipeline."
msgstr ""

#: ../source/text-search.txt:103
msgid "Language Support"
msgstr ""

#: ../source/text-search.txt:105
msgid "MongoDB supports text search for various languages. See :doc:`/reference/text-search-languages` for a list of supported languages."
msgstr ""

