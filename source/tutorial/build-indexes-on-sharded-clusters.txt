.. index:: index; sharded clusters
.. index:: sharded clusters; index

.. _index-build-on-sharded-clusters:

========================================
Rolling Index Builds on Sharded Clusters
========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Index builds can impact sharded cluster performance. By default, MongoDB
4.4 and later build indexes simultaneously on all data-bearing replica
set members. Index builds on sharded clusters occur only on those
shards which contain data for the collection being indexed. For
workloads which cannot tolerate performance decrease due to index
builds, consider using the following procedure to build indexes in a
rolling fashion. 

Rolling index builds take at most one shard replica set member out at a
time, starting with the secondary members, and builds the index on that
member as a standalone. Rolling index builds require at least one
replica set election per shard.

Considerations
--------------

Unique Indexes
~~~~~~~~~~~~~~

To create :ref:`unique indexes <index-type-unique>` using the following
procedure, you must stop all writes to the collection during this
procedure.

If you cannot stop all writes to the collection during this procedure,
do not use the procedure on this page. Instead, build your unique index
on the collection by issuing :method:`db.collection.createIndex()` on
the :binary:`~bin.mongos` for a sharded cluster.
 
Oplog Size
~~~~~~~~~~

Ensure that your :term:`oplog` is large enough to permit the indexing
or re-indexing operation to complete without falling too far behind to
catch up. See the :ref:`oplog sizing <replica-set-oplog-sizing>`
documentation for additional information.

Prerequisites
-------------

For building unique indexes
   #. To create :ref:`unique indexes <index-type-unique>` using the following
      procedure, you must stop all writes to the collection during the index
      build. Otherwise, you may end up with inconsistent data across the
      replica set members. If you cannot stop all writes to the collection,
      do not use the following procedure to create unique indexes.

      .. warning::

         If you cannot stop all writes to the collection, do not use the
         following procedure to create unique indexes.

   #. Before creating the index, validate that no documents in the
      collection violate the index constraints. If a collection is
      distributed across shards and a shard contains a chunk with
      duplicate documents, the create index operation may succeed on the
      shards without duplicates but not on the shard with duplicates.
      To avoid leaving inconsistent indexes across shards, you can issue the
      :method:`db.collection.dropIndex()` from a :binary:`~bin.mongos` to
      drop the index from the collection.


Procedure
---------

.. important::

   The following procedure to build indexes in a rolling fashion applies
   to sharded clusters deployments, and not replica set deployments. For
   the procedure for replica sets, see
   :doc:`/tutorial/build-indexes-on-replica-sets` instead.

A. Stop the Balancer
~~~~~~~~~~~~~~~~~~~~

Connect a :binary:`~bin.mongo` shell to a :binary:`~bin.mongos`
instance in the sharded cluster, and run :method:`sh.stopBalancer()` to
disable the balancer: [#autosplit-stop]_

.. code-block:: javascript

   sh.stopBalancer()

.. note::

   If a migration is in progress, the system will complete the
   in-progress migration before stopping the balancer.
  
To verify that the balancer is disabled, run
:method:`sh.getBalancerState()`, which returns false if the balancer
is disabled:

.. code-block:: javascript

   sh.getBalancerState()

.. [#autosplit-stop]

   .. include:: /includes/extracts/4.2-changes-stop-balancer-autosplit.rst

.. _build-indexes-sharded-cluster-distribution:

B. Determine the Distribution of the Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

From the :binary:`~bin.mongo` shell connected to the
:binary:`~bin.mongos`, refresh the cached routing table for that
:binary:`~bin.mongos` to avoid returning stale distribution information
for the collection. Once refreshed, run
:method:`db.collection.getShardDistribution()` for the collection you
wish to build the index.

For example, if you want to an ascending index
on the ``records`` collection in the ``test`` database:

.. code-block:: javascript

   db.adminCommand( { flushRouterConfig: "test.records" } );
   db.records.getShardDistribution();

The method outputs the shard distribution. For example, consider a
sharded cluster with 3 shards ``shardA``, ``shardB``, and ``shardC``
and the :method:`db.collection.getShardDistribution()` returns the
following:

.. code-block:: none
   :copyable: false

   Shard shardA at shardA/s1-mongo1.example.net:27018,s1-mongo2.example.net:27018,s1-mongo3.example.net:27018
    data : 1KiB docs : 50 chunks : 1
    estimated data per chunk : 1KiB
    estimated docs per chunk : 50

   Shard shardC at shardC/s3-mongo1.example.net:27018,s3-mongo2.example.net:27018,s3-mongo3.example.net:27018
    data : 1KiB docs : 50 chunks : 1
    estimated data per chunk : 1KiB
    estimated docs per chunk : 50

   Totals
    data : 3KiB docs : 100 chunks : 2
    Shard shardA contains 50% data, 50% docs in cluster, avg obj size on shard : 40B
    Shard shardC contains 50% data, 50% docs in cluster, avg obj size on shard : 40B

From the output, you only build the indexes for ``test.records`` on
``shardA`` and ``shardC``.

.. _tutorial-index-on-affected-shards:

C. Build Indexes on the Shards That Contain Collection Chunks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For each shard that contains chunks for the collection, follow the
procedure to build the index on the shard.

.. _tutorial-index-on-sharded-clusters-stop-one-member:

C1. Stop One Secondary and Restart as a Standalone
``````````````````````````````````````````````````

For an affected shard, stop the :binary:`~bin.mongod` process
associated with one of its secondary. Restart after making the following
configuration updates:

.. tabs::

   tabs:
      - id: config-file
        name: Configuration File
        content: |

           If you are using a configuration file, make the following
           configuration updates:

           - Change the :setting:`net.port` to a different port. [#different-port]_
             Make a note of the original port setting as a comment.

           - Comment out the :setting:`replication.replSetName` option.

           - Comment out the :setting:`sharding.clusterRole` option.

           - Set parameter :parameter:`skipShardingConfigurationChecks`
             (also available for MongoDB 3.6.3+, 3.4.11+, 3.2.19+) to
             ``true`` in the :setting:`setParameter` section.
      
           - Set parameter ``disableLogicalSessionCacheRefresh`` to
             ``true`` in the :setting:`setParameter` section.

           For example, for a shard replica set member, the
           updated configuration file will include content like
           the following example:

           .. code-block:: yaml

              net:
                 bindIp: localhost,<hostname(s)|ip address(es)>
                 port: 27218
              #   port: 27018
              #replication:
              #   replSetName: shardA
              #sharding:
              #   clusterRole: shardsvr
              setParameter:
                 skipShardingConfigurationChecks: true
                 disableLogicalSessionCacheRefresh: true

           And restart:

           .. code-block:: sh

              mongod --config <path/To/ConfigFile>

           Other settings (e.g. :setting:`storage.dbPath`, etc.) remain the same.

      - id: command-line
        name: Command-line Options
        content: |

          If using command-line options, make the following
          configuration updates:

          - Modify :option:`--port <mongod --port>` to a different port. [#different-port]_

          - Remove :option:`--replSet <mongod --replSet>`.

          - Remove :option:`--shardsvr <mongod --shardsvr>` if a
            shard member and :option:`--configsvr <mongod
            --configsvr>` if a config server member.

          - Set parameter
            :parameter:`skipShardingConfigurationChecks` (also
            available for MongoDB 3.6.3+, 3.4.11+, 3.2.19+) to
            ``true`` in the :option:`--setParameter <mongod
            --setParameter>` option.

          - Set parameter ``disableLogicalSessionCacheRefresh``
            to ``true`` in the :option:`--setParameter <mongod
            --setParameter>` option.

          For example, restart your shard replica set member
          without the :option:`--replSet <mongod --replSet>` and
          :option:`--shardsvr <mongod --shardsvr>` options.
          Specify a new port number and set both the
          :parameter:`skipShardingConfigurationChecks` and
          ``disableLogicalSessionCacheRefresh`` parameters to
          true:

          .. code-block:: sh

             mongod --port 27218 --setParameter skipShardingConfigurationChecks=true --setParameter disableLogicalSessionCacheRefresh=true

          Other settings (e.g. :option:`--dbpath <mongod --dbpath>`, etc.) remain the same.

.. [#different-port] By running the :binary:`~bin.mongod` on a different
   port, you ensure that the other members of the replica set and all
   clients will not contact the member while you are building the
   index.

.. _tutorial-index-on-sharded-clusters-build-index:

C2. Build the Index
```````````````````

Connect directly to the :binary:`~bin.mongod` instance running as a
standalone on the new port and create the new index for this
instance.

For example, connect a :binary:`~bin.mongo` shell to the instance,
and use the :method:`db.collection.createIndex()` method to create
an ascending index on the ``username`` field of the ``records``
collection:

.. code-block:: sh

   db.records.createIndex( { username: 1 } )

.. _tutorial-index-on-sharded-clusters-restart-mongod:

C3. Restart the Program ``mongod`` as a Replica Set Member
``````````````````````````````````````````````````````````

When the index build completes, shutdown the :binary:`~bin.mongod`
instance. Undo the configuration changes made when starting as a
standalone to return to its original configuration and restart.

.. important::

   Be sure to remove the
   :parameter:`skipShardingConfigurationChecks` parameter and
   ``disableLogicalSessionCacheRefresh`` parameter.

For example, to restart your replica set shard member:

.. tabs::

   tabs:
      - id: config-file
        name: Configuration File
        content: |

           If you are using a configuration file:

           - Revert to the original port number.

           - Uncomment the :setting:`replication.replSetName`.

           - Uncomment the :setting:`sharding.clusterRole`.

           - Remove parameter :parameter:`skipShardingConfigurationChecks`
             in the :setting:`setParameter` section.

           - Remove parameter ``disableLogicalSessionCacheRefresh``
             in the :setting:`setParameter` section.

           .. code-block:: yaml

              net:
                 bindIp: localhost,<hostname(s)|ip address(es)>
                 port: 27018
              replication:
                 replSetName: shardA
              sharding:
                 clusterRole: shardsvr

           Other settings (e.g. :setting:`storage.dbPath`, etc.) remain the same.

           And restart:
           
           .. code-block:: sh
           
              mongod --config <path/To/ConfigFile>

      - id: command-line
        name: Command-line Options
        content: |

           If you are using command-line options:
     
           - Revert to the original port number.
     
           - Include :option:`--replSet <mongod --replSet>`.
     
           - Include :option:`--shardsvr <mongod --shardsvr>` if
             a shard member or :option:`--configsvr <mongod
             --configsvr>` if a config server member.

           - Remove parameter
             :parameter:`skipShardingConfigurationChecks`.

           - Remove parameter ``disableLogicalSessionCacheRefresh``.

           For example:

           .. code-block:: sh

              mongod --port 27018 --replSet shardA --shardsvr 

           Other settings (e.g. :option:`--dbpath <mongod --dbpath>`, etc.) remain the same.

Allow replication to catch up on this member.

C4. Repeat the Procedure for the Remaining Secondaries for the Shard
````````````````````````````````````````````````````````````````````

Once the member catches up with the other members of the set, repeat
the procedure one member at a time for the remaining secondary
members for the shard:

#. :ref:`tutorial-index-on-sharded-clusters-stop-one-member`

#. :ref:`tutorial-index-on-sharded-clusters-build-index`

#. :ref:`tutorial-index-on-sharded-clusters-restart-mongod`

C5. Build the Index on the Primary
``````````````````````````````````

When all the secondaries for the shard have the new index, step down
the primary for the shard, restart it as a standalone using the
procedure described above, and build the index on the former primary:

#. Use the :method:`rs.stepDown()` method in the :binary:`~bin.mongo` shell
   to step down the primary. Upon successful stepdown, the current primary
   becomes a secondary and the replica set members elect a new primary.

#. :ref:`tutorial-index-on-sharded-clusters-stop-one-member`

#. :ref:`tutorial-index-on-sharded-clusters-build-index`

#. :ref:`tutorial-index-on-sharded-clusters-restart-mongod`

D. Repeat for the Other Affected Shards
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Once you finish building the index for a shard, repeat
:ref:`tutorial-index-on-affected-shards` for the other
affected shards.

E. Restart the Balancer
~~~~~~~~~~~~~~~~~~~~~~~

Once you finish the rolling index build for the affected shards,
restart the balancer.

Connect a :binary:`~bin.mongo` shell to a :binary:`~bin.mongos`
instance in the sharded cluster, and run :method:`sh.startBalancer()`: [#autosplit-start]_

.. code-block:: javascript

   sh.startBalancer()

.. [#autosplit-start]

   .. include:: /includes/extracts/4.2-changes-start-balancer-autosplit.rst

Additional Information
----------------------

A sharded collection has an inconsistent index if the collection does
not have the exact same indexes (including the index options) on each
shard that contains chunks for the collection. Although inconsistent
indexes should not occur during normal operations, inconsistent indexes
can occur, such as:

- When a user is creating an index with a ``unique`` key constraint and
  one shard contains a chunk with duplicate documents. In such cases,
  the create index operation may succeed on the shards without
  duplicates but not on the shard with duplicates.

- When a user is creating an index across the shards in a rolling
  manner but either fails to build the index for an associated shard or
  incorrectly builds an index with different specification.

Starting in MongoDB 4.4 (and 4.2.6), the :doc:`config server
</core/sharded-cluster-config-servers>` primary periodically checks for
index inconsistencies across the shards for sharded collections. To
configure these periodic checks, see
:parameter:`enableShardedIndexConsistencyCheck` and
:parameter:`shardedIndexConsistencyCheckIntervalMS`.

The command :dbcommand:`serverStatus` returns the field
:serverstatus:`shardedIndexConsistency` to report on index
inconsistencies when run on the config server primary.

To check if a sharded collection has inconsistent indexes, see
:ref:`manage-indexes-find-inconsistent-indexes`.
