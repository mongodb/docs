====================
$match (aggregation)
====================

.. default-domain:: agg

.. pipeline:: $match

   Provides a query-like interface to filter documents out of the
   aggregation :term:`pipeline`. The :pipeline:`$match` drops
   documents that do not match the condition from the aggregation
   pipeline, and it passes documents that match along the pipeline
   unaltered.

   The syntax passed to the :pipeline:`$match` is identical
   to the :term:`query` syntax. Consider the following prototype form:

   .. code-block:: javascript

      db.article.aggregate(
          { $match : <match-predicate> }
      );

   The following example performs a simple field equality test:

   .. code-block:: javascript

      db.article.aggregate(
          { $match : { author : "dave" } }
      );

   This operation only returns documents where the ``author`` field
   holds the value ``dave``. Consider the following example,
   which performs a range test:

   .. code-block:: javascript

      db.article.aggregate(
          { $match : { score  : { $gt : 50, $lte : 90 } } }
      );

   Here, all documents return when the ``score`` field holds a value
   that is greater than 50 and less than or equal to 90.

   .. note::

      Place the :pipeline:`$match` as early in the aggregation
      :term:`pipeline` as possible. Because :pipeline:`$match`
      limits the total number of documents in the aggregation
      pipeline, earlier :pipeline:`$match` operations minimize the
      amount of later processing. If you place a :pipeline:`$match`
      at the very beginning of a pipeline, the query can take
      advantage of :term:`indexes <index>` like any other
      :mongodb:method:`db.collection.find()` or :mongodb:method:`db.collection.findOne()`.

   .. warning::

      You cannot use :mongodb:operator:`$where` or :ref:`geospatial
      operations <geospatial-query-operators>` in :pipeline:`$match`
      queries as part of the aggregation pipeline.

