.. _fts-tutorials:

=========
Tutorials
=========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The following tutorials take you through the steps of setting up and 
querying an |fts| index. 

.. _fts-tutorials-prereqs:

Prerequisites 
-------------

.. important::

   The :ref:`cross-collection-indexes-and-queries` tutorial doesn't have the 
   same prerequisites as the other |fts| tutorials. To learn more,
   see the Prerequisites section of the 
   :ref:`cross-collection-indexes-and-queries` tutorial.
  

To complete these tutorials, you must have the following: 

- An |service| cluster with MongoDB version 4.2 or higher.

- The :doc:`sample datasets </sample-data>` loaded into your |service| 
  cluster.
  
- One of the following applications to run queries on your |service|
  {+cluster+}:

  - {+mongosh+}
  - :dl:`Compass <compass>`
  - :driver:`Go </go/current/>`
  - :driver:`Java </java-drivers/>`
  - :driver:`MongoDB Node Driver </node/current/>`
  - :driver:`Pymongo </pymongo/>`

About the Tutorials 
-------------------

- The :ref:`autocomplete-tutorial` tutorial describes how to create and 
  query an |fts| index configured with an ``autocomplete`` field using 
  the ``autocomplete`` operator. We will create the |fts| index on the 
  ``sample_mflix.movies`` collection and index ``title`` field text 
  values for autocompletion. We will run |fts| queries using 
  the ``autocomplete`` operator to search the indexed field for a 
  sequence of characters.

- The :ref:`compound-query-custom-score-tutorial` tutorial describes 
  how to create a dynamic index and run compound queries with custom 
  scoring. The queries search the ``sample_mflix.movies`` collection 
  and alter the relevance score of the documents in the result using 
  :ref:`scoring-constant`, :ref:`scoring-boost`, and 
  :ref:`scoring-function` options.

- The :ref:`compound-query-date-range-tutorial` tutorial describes how 
  to create a dynamic index and run compound queries that use the 
  ``range`` operator. The queries search the ``sample_mflix.movies`` 
  collection for movies between a specified date range.

- The :ref:`run-geo-search-tutorial` tutorial describes 
  how to create an index on the ``sample_airbnb.listingsAndReviews`` 
  collection and run a query that returns documents with the
  ``name``, ``address``, and ``property_type``
  of each property within a specified polygon defined using ``coordinates``.
  |fts| results reflect a preference for properties of type ``condominium``, 
  and each document in the result is assigned a relevance ``score``, 
  returned in order from highest to lowest.

- The :ref:`facet-tutorial` tutorial describes how to create an index 
  with a facet definition for the ``sample_mflix.movies`` collection 
  and run queries against the faceted fields for results grouped by 
  values and ranges in the specified, faceted fields, including a 
  count for each of those groups.

- The :ref:`cross-collection-indexes-and-queries` tutorial describes how to
  index and query on multiple collections using a combination of 
  On-Demand Materialized Views and {+atlas-app-services+} Scheduled Triggers.

- The :ref:`partial-match-tutorial` tutorial describes how to create an 
  index on the ``sample_mflix.movies`` collection and run case-sensitive partial match queries against the indexed field using 
  :ref:`autocomplete-ref`, :ref:`phrase-ref`, :ref:`regex-ref`, and 
  :ref:`wildcard-ref` operators.

- The :ref:`synonyms-tutorial` describes how to add a collection that 
  configures words as synonyms, create an index that defines synonym 
  mappings on the ``sample_mflix.movies`` collection, and run |fts| 
  queries against the ``title`` field using words that are configured 
  as synonyms.

- The :ref:`multilingual-tutorial` describes how to create an index 
  that uses a language analyzer and perform a multilingual search
  against the ``sample_mflix.movies`` collection. The queries search the
  ``sample_mflix.movies`` collection for full movie plots that contain a
  multilingual term.

.. toctree::
   :titlesonly:
   
   Use Autocomplete </atlas-search/tutorial/autocomplete-tutorial>
   Run Compound Queries with Weighted Fields </atlas-search/tutorial/compound-query-custom-score>
   Run Queries with a Date Range Filter </atlas-search/tutorial/compound-query-date-range>
   Run a Geo JSON Query </atlas-search/tutorial/run-geo-query.txt>
   Run Queries on Multiple Collections </atlas-search/tutorial/cross-collection-indexes-and-queries>
   Use Facets </atlas-search/tutorial/facet-tutorial>
   Run Partial Match Queries </atlas-search/tutorial/partial-match>
   Use Synonyms </atlas-search/tutorial/synonyms-tutorial>
   Run Multilingual Queries </atlas-search/tutorial/multilingual-tutorial>
   