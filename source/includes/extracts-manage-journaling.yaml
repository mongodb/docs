ref: journaling-intro
content: |
  MongoDB uses *write ahead logging* to an on-disk :term:`journal` to
  guarantee :doc:`write operation </crud>` durability.
  The MMAPv1 storage engine also requires the `journal` in order to
  provide crash resiliency.
  
  The WiredTiger storage engine does not require journaling to guarantee
  a consistent state after a crash. The database will be restored to the
  last consistent :ref:`checkpoint <storage-wiredtiger-checkpoints>`
  during recovery.  However, if MongoDB exits unexpectedly in between
  checkpoints, journaling is required to recover writes that occurred
  after the last checkpoint.
  
  With journaling enabled, if :binary:`~bin.mongod` stops unexpectedly, the
  program can recover everything written to the journal. MongoDB will
  re-apply the write operations on restart and maintain a consistent
  state. By default, the greatest extent of lost writes, i.e., those not
  made to the journal, are those made in the last 100 milliseconds, plus
  the time it takes to perform the actual journal writes. See
  :setting:`~storage.journal.commitIntervalMs` for more information on
  the default.
---
ref: journaling-disable-journaling
content: |
  Disable Journaling
  ~~~~~~~~~~~~~~~~~~

  .. warning::

     Do not disable journaling on production systems. When using the
     MMAPv1 storage engine *without* a journal, if your
     :binary:`~bin.mongod` instance stops without shutting down cleanly
     unexpectedly for any reason, (e.g. power failure) and you are not
     running with journaling, then you must recover from an unaffected
     :term:`replica set` member or backup, as described in :doc:`repair
     </tutorial/recover-data-following-unexpected-shutdown>`.

     .. include:: /includes/wiredtiger-node-nojournal.rst

  To disable journaling, start :binary:`~bin.mongod` with the
  :option:`--nojournal <mongod --nojournal>` command line option.
---
ref: journaling-get-commit-acknowledgement
content: |
  Get Commit Acknowledgement
  ~~~~~~~~~~~~~~~~~~~~~~~~~~

  You can get commit acknowledgement with the :ref:`write-concern` and
  the :writeconcern:`j` option. For details, see
  :ref:`write-concern-operation`.
---
ref: journaling-avoid-preallocation-lag-mmapv1
content: |
  Avoid Preallocation Lag for MMAPv1
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  With the :doc:`MMAPv1 storage engine </core/mmapv1>`, MongoDB may
  preallocate journal files if the :binary:`~bin.mongod` process determines
  that it is more efficient to preallocate journal files than create new
  journal files as needed.

  Depending on your filesystem, you might experience a preallocation lag
  the first time you start a :binary:`~bin.mongod` instance with journaling
  enabled. The amount of time required to pre-allocate files might last
  several minutes; during this time, you will not be able to connect to
  the database. This is a one-time preallocation and does not occur with
  future invocations.

  To avoid :ref:`preallocation lag <journaling-journal-files>`, you can
  preallocate files in the journal directory by copying them from
  another instance of :binary:`~bin.mongod`.

  Preallocated files do not contain data. It is safe to later remove
  them.  But if you restart :binary:`~bin.mongod` with journaling,
  :binary:`~bin.mongod` will create them again.

  .. example:: The following sequence preallocates journal files for an
     instance of :binary:`~bin.mongod` running on port ``27017`` with a
     database path of ``/data/db``.

     For demonstration purposes, the sequence starts by creating a set
     of journal files in the usual way.

     1. Create a temporary directory into which to create a set of
        journal files:

        .. code-block:: sh

           mkdir ~/tmpDbpath

     #. Create a set of journal files by starting a :binary:`~bin.mongod`
        instance that uses the temporary directory. For example:

        .. code-block:: sh

           mongod --port 10000 --dbpath ~/tmpDbpath --journal --bind_ip localhost,<ip address of the mongod host> --storageEngine mmapv1

        .. include:: /includes/warning-bind-ip-security-considerations.rst

     #. When you see the following log output, indicating
        :binary:`~bin.mongod` has the files, press CONTROL+C to stop the
        :binary:`~bin.mongod` instance:

        .. code-block:: sh

           ... NETWORK  [initandlisten] waiting for connections on port 10000

     #. Preallocate journal files for the new instance of
        :binary:`~bin.mongod` by moving the journal files from the data
        directory of the existing instance to the data directory of the
        new instance:

        .. code-block:: sh

           mv ~/tmpDbpath/journal /data/db/

     #. Start the new :binary:`~bin.mongod` instance. For example:

        .. code-block:: sh

           mongod --port 27017 --dbpath /data/db --journal --bind_ip localhost,<ip address of the mongod host> --storageEngine mmapv1

        .. include:: /includes/warning-bind-ip-security-considerations.rst

---
ref: journaling-monitor-journal-status
content: |
  Monitor Journal Status
  ~~~~~~~~~~~~~~~~~~~~~~

  Use the following command to monitor journal status:

  - :dbcommand:`serverStatus`

    The :dbcommand:`serverStatus` command returns database status
    information that is useful for assessing performance.

---
ref: journaling-change-group-commit-interval-mmapv1
content: |
  Change the Group Commit Interval for MMAPv1
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  For the :doc:`MMAPv1 storage engine </core/mmapv1>`, you can set the
  group commit interval using the :option:`--journalCommitInterval
  <mongod --journalCommitInterval>` command line option. The allowed
  range is ``2`` to ``300`` milliseconds.

  Lower values increase the durability of the journal at the expense of
  disk performance.
---
ref: journaling-recover-data-unexpected-shutdown
content: |
  Recover Data After Unexpected Shutdown
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  On a restart after a crash, MongoDB replays all journal files in the
  journal directory before the server becomes available. If MongoDB must
  replay journal files, :binary:`~bin.mongod` notes these events in the log
  output.

  There is no reason to run :dbcommand:`repairDatabase` in these
  situations.
...
