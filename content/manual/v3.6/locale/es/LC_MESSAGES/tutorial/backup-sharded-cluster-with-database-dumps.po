# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 18:40+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/backup-sharded-cluster-with-database-dumps.txt:5
msgid "Back Up a Sharded Cluster with Database Dumps"
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-database-dumps.txt:17
msgid ""
"Starting in MongoDB 3.2, the following procedure can be used with the "
":doc:`MMAPv1 </core/mmapv1>` and the :doc:`WiredTiger </core/wiredtiger>`"
" storage engines. With previous versions of MongoDB, the procedure "
"applied to :doc:`MMAPv1 </core/mmapv1>` only."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-database-dumps.txt:23
msgid "Overview"
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-database-dumps.txt:25
msgid ""
"This document describes a procedure for taking a backup of all components"
" of a :term:`sharded cluster`. This procedure uses "
":binary:`~bin.mongodump` to create dumps of the :binary:`~bin.mongod` "
"instances."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-database-dumps.txt:30
msgid ""
"You may alternatively use :doc:`file system snapshots </tutorial/backup-"
"sharded-cluster-with-filesystem-snapshots>` to capture the backup data. "
"File system snapshots may be more efficient in some situations if your "
"system configuration supports them."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-database-dumps.txt:35
msgid ""
"For more information on backups in MongoDB and backups of sharded "
"clusters in particular, see :doc:`/core/backups` and "
":doc:`/administration/backup-sharded-clusters`."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-database-dumps.txt:40
msgid "Prerequisites"
msgstr ""

#: ../source/includes/note-shard-cluster-backup.rst:1
msgid ""
"To capture a point-in-time backup from a sharded cluster you **must** "
"stop *all* writes to the cluster. On a running production system, you can"
" only capture an *approximation* of point-in-time snapshot."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-database-dumps.txt:45
msgid "Access Control"
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-database-dumps.txt:47
msgid ""
"The :authrole:`backup` role provides the required privileges to perform "
"backup on a sharded cluster that has access control enabled."
msgstr ""

#: ../source/includes/fact-required-access-for-backup-profiling.rst:3
msgid ""
"The :authrole:`backup` role provides additional privileges to back up the"
" :data:`system.profile <<database>.system.profile>` collections that "
"exist when running with :ref:`database profiling <database-profiling>`. "
"Previously, users required an additional ``read`` access on this "
"collection."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-database-dumps.txt:53
msgid "Consideration"
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-database-dumps.txt:55
msgid ""
"To create backups of a sharded cluster, you will stop the cluster "
"balancer, take a backup of the :term:`config database`, and then take "
"backups of each shard in the cluster using :binary:`~bin.mongodump` to "
"capture the backup data. To capture a more exact moment-in-time snapshot "
"of the system, you will need to stop all application writes before taking"
" the filesystem snapshots; otherwise the snapshot will only approximate a"
" moment in time."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-database-dumps.txt:63
msgid ""
"For approximate point-in-time snapshots, you can minimize the impact on "
"the cluster by taking the backup from a secondary member of each replica "
"set shard."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-database-dumps.txt:68
msgid "Procedure"
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:8
msgid "Disable the balancer process."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:10
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:38
msgid ""
"To disable the :ref:`balancer <sharding-internals-balancing>`, connect "
"the :binary:`~bin.mongo` shell to a :binary:`~bin.mongos` instance and "
"run :method:`sh.stopBalancer()` in the ``config`` database."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:21
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:49
msgid ""
"For more information, see the :ref:`sharding-balancing-disable-"
"temporarily` procedure."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:24
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:52
msgid ""
"If you do not stop the balancer, the backup could have duplicate data or "
"omit data as :term:`chunks <chunk>` migrate while recording backups."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:36
msgid "Step 1: Disable the balancer process."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:64
msgid "Lock one secondary member of each replica set."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:66
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:162
msgid ""
"Lock a secondary member of each replica set in the sharded cluster, and "
"one secondary of the :ref:`config server replica set (CSRS) <replset-"
"config-servers>`."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:70
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:166
msgid ""
"Ensure that the :term:`oplog` has sufficient capacity to allow these "
"secondaries to catch up to the state of the primaries after finishing the"
" backup procedure. See :ref:`replica-set-oplog-sizing` for more "
"information."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:77
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:173
msgid "Lock shard replica set secondary."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:79
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:175
msgid ""
"For each shard replica set in the sharded cluster, connect a "
":binary:`~bin.mongo` shell to the secondary member's "
":binary:`~bin.mongod` instance and run :method:`db.fsyncLock()`."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:90
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:186
msgid "Lock config server replica set secondary."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:92
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:188
msgid ""
"If locking a secondary of the CSRS, confirm that the member has "
"replicated data up to some control point. To verify, first connect a "
":binary:`~bin.mongo` shell to the CSRS primary and perform a write "
"operation with :writeconcern:`\"majority\"` write concern on a control "
"collection:"
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:113
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:209
msgid ""
"The operation should return either the newly inserted document or the "
"updated document:"
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:122
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:218
msgid ""
"Query the CSRS secondary member for the returned control document. "
"Connect a :binary:`~bin.mongo` shell to the CSRS secondary to lock and "
"use :method:`db.collection.find()` to query for the control document:"
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:138
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:234
msgid ""
"If the secondary member contains the latest control document, it is safe "
"to lock the member. Otherwise, wait until the member contains the "
"document or select a different secondary member that contains the latest "
"control document."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:144
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:240
msgid "To lock the secondary member, run :method:`db.fsyncLock()` on the member:"
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:160
msgid "Step 2: Lock one secondary member of each replica set."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:256
msgid "Backup one config server."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:258
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:294
msgid ""
"Run :binary:`~bin.mongodump` against a config server "
":binary:`~bin.mongod` instance to back up the cluster's metadata. You "
"only need to back up one config server. Perform this step against the "
"locked config server."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:264
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:300
msgid ""
"Use :binary:`~bin.mongodump` with the :option:`--oplog <mongodump "
"--oplog>` option to backup one of the :ref:`config servers <sharding-"
"config-server>`."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:274
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:310
msgid ""
"If your deployment uses CSRS config servers, unlock the config server "
"node before proceeding to the next step. To unlock the CSRS member, use "
":method:`db.fsyncUnlock()` method in the :binary:`~bin.mongo` shell."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:292
msgid "Step 3: Backup one config server."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:328
msgid "Back up a replica set member for each shard."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:330
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:350
msgid ""
"Back up the locked replica set members of the shards using "
":binary:`~bin.mongodump` with the :option:`--oplog <mongodump --oplog>` "
"option. You may back up the shards in parallel."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:348
msgid "Step 4: Back up a replica set member for each shard."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:368
msgid "Unlock replica set members for each shard."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:370
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:391
msgid ""
"To unlock the replica set members, use :method:`db.fsyncUnlock()` method "
"in the :binary:`~bin.mongo` shell."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:379
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:400
msgid "Allow these members to catch up with the state of the primary."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:389
msgid "Step 5: Unlock replica set members for each shard."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:410
msgid "Re-enable the balancer process."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:412
#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:432
msgid ""
"To re-enable to balancer, connect the :binary:`~bin.mongo` shell to a "
":binary:`~bin.mongos` instance and run :method:`sh.setBalancerState()`."
msgstr ""

#: ../source/includes/steps/backup-sharded-clusters-dumps.rst:430
msgid "Step 6: Re-enable the balancer process."
msgstr ""

#: ../source/includes/extracts/additional-resources-backup-tutorials.rst:4
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-backup-tutorials.rst:6
msgid ""
"`MongoDB Atlas: For a simple way to run, monitor, and maintain cloud-"
"hosted MongoDB deployments "
"<https://www.mongodb.com/cloud/atlas?jmp=docs>`_"
msgstr ""

#~ msgid ""
#~ "In this procedure, you will stop "
#~ "the cluster balancer and take a "
#~ "backup up of the :term:`config "
#~ "database`, and then take backups of "
#~ "each shard in the cluster using "
#~ ":program:`mongodump` to capture the backup "
#~ "data. If you need an exact "
#~ "moment-in-time snapshot of the "
#~ "system, you will need to stop all"
#~ " application writes before taking the "
#~ "filesystem snapshots; otherwise the snapshot"
#~ " will only approximate a moment of"
#~ " time."
#~ msgstr ""

#~ msgid ""
#~ "For approximate point-in-time snapshots,"
#~ " you can improve the quality of "
#~ "the backup while minimizing impact on"
#~ " the cluster by taking the backup "
#~ "from a secondary member of the "
#~ "replica set that provides each shard."
#~ msgstr ""

#~ msgid ""
#~ "It is essential that you stop the"
#~ " balancer before creating backups. If "
#~ "the balancer remains active, your "
#~ "resulting backups could have duplicate "
#~ "data or miss some data, as "
#~ ":term:`chunks <chunk>` migrate while recording"
#~ " backups."
#~ msgstr ""

#~ msgid ""
#~ "You must run this command on the"
#~ " system where the :program:`mongod` ran."
#~ " This operation will use journaling "
#~ "and create a dump of the entire"
#~ " :program:`mongod` instance with data files"
#~ " stored in ``/data/db/``. :program:`mongodump`"
#~ " will write the output of this "
#~ "dump to the ``/data/backup/`` directory."
#~ msgstr ""

# d11f58e30ca2412fbfb3642b071a5410
#~ msgid "Backup a Sharded Cluster with Database Dumps"
#~ msgstr ""

# 1a64d5cbf0734338bb26bebaa147759a
#~ msgid ""
#~ "This document describes a procedure for"
#~ " taking a backup of all components"
#~ " of a sharded cluster. This procedure"
#~ " uses :program:`mongodump` to create dumps"
#~ " of the :program:`mongod` instance. An "
#~ "alternate procedure uses file system "
#~ "snapshots to capture the backup data,"
#~ " and may be more efficient in "
#~ "some situations if your system "
#~ "configuration allows file system backups. "
#~ "See :doc:`/administration/backup-sharded-clusters`"
#~ " for more information."
#~ msgstr ""

# 472215ad667145f8a3aa4af06d3a7a08
#~ msgid ""
#~ "See :doc:`/core/backups` and :doc:`/administration"
#~ "/backup-sharded-clusters` for complete "
#~ "information on backups in MongoDB and"
#~ " backups of sharded clusters in "
#~ "particular."
#~ msgstr ""

# bf197c714c474e2a866e464eae0f653d
#~ msgid ""
#~ "To backup all the databases in a"
#~ " cluster via :program:`mongodump`, you "
#~ "should have the :authrole:`backup` role. "
#~ "The :authrole:`backup` role provides all "
#~ "the needed privileges for backing up "
#~ "all database. The role confers no "
#~ "additional access, in keeping with the"
#~ " policy of :term:`least privilege`."
#~ msgstr ""

# 043de167cf1b424d8bb5b2db823df9c7
#~ msgid ""
#~ "To backup a given database, you "
#~ "must have ``read`` access on the "
#~ "database. Several roles provide this "
#~ "access, including the :authrole:`backup` role."
#~ msgstr ""

# 7da260bf448941b48d7b954cf6e62cc9
#~ msgid ""
#~ "To backup the ``system.profile`` collection"
#~ " in a database, you must have "
#~ "``read`` access on certain system "
#~ "collections in the database. Several "
#~ "roles provide this access, including the"
#~ " :authrole:`clusterAdmin` and :authrole:`dbAdmin` "
#~ "roles."
#~ msgstr ""

# b6456d5b028248f2a5a8e0bbc2879f27
#~ msgid ""
#~ "To backup users and :ref:`user-defined"
#~ " roles <user-defined-roles>` for a"
#~ " given database, you must have access"
#~ " to the ``admin`` database. MongoDB "
#~ "stores the user data and role "
#~ "definitions for all databases in the "
#~ "``admin`` database."
#~ msgstr ""

# 311f45a063434c99abf47211ea07d1c7
#~ msgid ""
#~ "Specifically, to backup a given "
#~ "database's users, you must have the "
#~ ":authaction:`find` :ref:`action <security-user-"
#~ "actions>` on the ``admin`` database's "
#~ ":data:`admin.system.users` collection. The "
#~ ":authrole:`backup` and :authrole:`userAdminAnyDatabase`"
#~ " roles both provide this privilege."
#~ msgstr ""

# 8598e4055d7c416fad23821362a53f2e
#~ msgid ""
#~ "To backup the user-defined roles "
#~ "on a database, you must have the"
#~ " :authaction:`find` action on the ``admin``"
#~ " database's :data:`admin.system.roles` collection. "
#~ "Both the :authrole:`backup` and "
#~ ":authrole:`userAdminAnyDatabase` roles provide this"
#~ " privilege."
#~ msgstr ""

# 47feaecbc47842aa9fc51966dafa4c5b
#~ msgid ""
#~ "Disable the :term:`balancer` process that "
#~ "equalizes the distribution of data among"
#~ " the :term:`shards <shard>`. To disable "
#~ "the balancer, use the "
#~ ":method:`sh.stopBalancer()` method in the "
#~ ":program:`mongo` shell. For example:"
#~ msgstr ""

# c62c60bb5fb049598b6db38f45d8b69a
#~ msgid ""
#~ "Lock one member of each replica "
#~ "set in each shard so that your "
#~ "backups reflect the state of your "
#~ "database at the nearest possible "
#~ "approximation of a single moment in "
#~ "time. Lock these :program:`mongod` instances"
#~ " in as short of an interval as"
#~ " possible."
#~ msgstr ""

# a8edde644b884fc1824aeb33cc8307f7
#~ msgid ""
#~ "To lock or freeze a sharded "
#~ "cluster, you shut down one member "
#~ "of each replica set. Ensure that "
#~ "the :term:`oplog` has sufficient capacity "
#~ "to allow these secondaries to catch "
#~ "up to the state of the primaries"
#~ " after finishing the backup procedure. "
#~ "See :ref:`replica-set-oplog-sizing` for"
#~ " more information."
#~ msgstr ""

# 647a12d07cbb4684a155a2a47365cfd5
#~ msgid ""
#~ "Use :program:`mongodump` to backup one "
#~ "of the :ref:`config servers <sharding-"
#~ "config-server>`. This backs up the "
#~ "cluster's metadata. You only need to "
#~ "back up one config server, as they"
#~ " all hold the same data."
#~ msgstr ""

# 1a0ee230c21f440c8825365e02b60ab4
#~ msgid ""
#~ "Use the :program:`mongodump` tool to "
#~ "capture the content of the config "
#~ ":program:`mongod` instances."
#~ msgstr ""

# fb58a3f8f3414249b7d34596b332e68a
#~ msgid ""
#~ "Your config servers must run MongoDB "
#~ "2.4 or later with the "
#~ ":option:`--configsvr <mongod --configsvr>` option"
#~ " and the :program:`mongodump` option must"
#~ " include the :option:`--oplog <mongodump "
#~ "--oplog>` to capture a consistent copy"
#~ " of the config database:"
#~ msgstr ""

# 8a205ebab8e3405393b818116d6fc44b
#~ msgid ""
#~ "Back up the replica set members of"
#~ " the shards that shut down using "
#~ ":program:`mongodump` and specifying the "
#~ ":option:`--dbpath <mongodump --dbpath>` option. "
#~ "You may back up the shards in "
#~ "parallel. Consider the following invocation:"
#~ msgstr ""

# 8762c935da9e4b9da5d5113c37367358
#~ msgid ""
#~ "Restart all stopped replica set members"
#~ " of each shard as normal and "
#~ "allow them to catch up with the"
#~ " state of the primary."
#~ msgstr ""

# 1e0ccb64318e484997c3f76e95cf8ce6
#~ msgid "Re-enable the balancer with the :method:`sh.setBalancerState()` method."
#~ msgstr ""

# 04e40c1aeaf546d2aea6a55207a34f3e
#~ msgid ""
#~ "Use the following command sequence when"
#~ " connected to the :program:`mongos` with"
#~ " the :program:`mongo` shell:"
#~ msgstr ""

#~ msgid ""
#~ "To create these backups of a "
#~ "sharded cluster, you will stop the "
#~ "cluster balancer and take a backup "
#~ "up of the :term:`config database`, and"
#~ " then take backups of each shard "
#~ "in the cluster using :program:`mongodump` "
#~ "to capture the backup data. To "
#~ "capture a more exact moment-in-"
#~ "time snapshot of the system, you "
#~ "will need to stop all application "
#~ "writes before taking the filesystem "
#~ "snapshots; otherwise the snapshot will "
#~ "only approximate a moment in time."
#~ msgstr ""

#~ msgid ""
#~ "For approximate point-in-time snapshots,"
#~ " taking the backup from a single "
#~ "offline secondary member of the replica"
#~ " set that provides each shard can "
#~ "improve the quality of the backup "
#~ "while minimizing impact on the cluster."
#~ msgstr ""

#~ msgid "Lock replica set members."
#~ msgstr ""

#~ msgid "Backup replica set members."
#~ msgstr ""

#~ msgid ""
#~ "You must run :program:`mongodump` on the"
#~ " same system where the :program:`mongod`"
#~ " ran. This operation will create a"
#~ " dump of all the data managed "
#~ "by the :program:`mongod` instances that "
#~ "used the :setting:`~storage.dbPath` ``/data/db/``."
#~ "  :program:`mongodump` writes the output of"
#~ " this dump to the ``/data/backup/`` "
#~ "directory."
#~ msgstr ""

#~ msgid "Restart replica set members."
#~ msgstr ""

