==================
db.getCollection()
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
-----------

.. method:: db.getCollection(name)

   Returns a :term:`collection` or a :doc:`view </core/views>` object
   that is functionally equivalent to using the ``db.<collectionName>``
   syntax. The method is useful for a collection or a view whose name
   might interact with the :binary:`~bin.mongo` shell itself, such as names
   that begin with ``_`` or that match a :doc:`database shell method
   </reference/method/js-database>`.

   The :method:`db.getCollection()` method has the following parameter:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``name``
   
        - string
   
        - The name of the collection.
          
          
   


Behavior
--------

The :method:`db.getCollection()` object can access any
:doc:`collection methods</reference/method/js-collection>`.

The collection specified may or may not exist on the server.  If the collection
does not exist, MongoDB creates it implicitly as part of 
:doc:`write operations </crud>` like 
:method:`db.collection.insertOne()`.

Example
-------

The following example uses :method:`db.getCollection()` to access the
``auth`` collection and insert a document into it.

.. code-block:: javascript

   var authColl = db.getCollection("auth")

   authColl.insertOne(
      {
          usrName : "John Doe",
          usrDept : "Sales",
          usrTitle : "Executive Account Manager",
          authLevel : 4,
          authDept : [ "Sales", "Customers"]
      }
   )

This returns:

.. code-block:: javascript

   {
      "acknowledged" : true,
      "insertedId" : ObjectId("569525e144fe66d60b772763")
   }

The previous example requires the use of 
:method:`db.getCollection("auth")<db.getCollection()>` because
of a name conflict with the database method :method:`db.auth()`.  Calling
``db.auth`` directly to perform an insert operation would reference the
:method:`db.auth()` method and would error.

The following example attempts the same operation, but without using the
:method:`db.getCollection()` method:

.. code-block:: javascript

   db.auth.insertOne(
      {
          usrName : "John Doe",
          usrDept : "Sales",
          usrTitle : "Executive Account Manager",
          authLevel : 4,
          authDept : [ "Sales", "Customers"]
      }
   )

The operation errors as ``db.auth()`` method has no ``insertOne``
method.

.. seealso::

   :doc:`/reference/method/js-collection`
