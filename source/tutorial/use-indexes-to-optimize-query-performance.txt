===================================
Use Indexes to Optimize Performance
===================================

.. default-domain:: mongodb

For commonly issued queries, create :doc:`indexes </indexes>`. If a
query searches multiple fields, create a :ref:`compound index
<index-type-compound>`. Scanning an index is much faster than scanning a
collection. The indexes structures are smaller than the documents
reference, and store references in order.

.. example:: If you have a ``posts`` collection containing blog posts,
   and if you regularly issue a query that sorts on the ``author_name``
   field, then you can optimize the query by creating an index on the
   ``author_name`` field:

   .. code-block:: javascript

      db.posts.ensureIndex( { author_name : 1 } )

Indexes also improve efficiency on queries that routinely sort on a
given field.

.. example:: If you regularly issue a query that sorts on the
   ``timestamp`` field, then you can optimize the query by creating an
   index on the ``timestamp`` field:

   Creating this index:

   .. code-block:: javascript

      db.posts.ensureIndex( { timestamp : 1 } )

   Optimizes this query:

   .. code-block:: javascript

      db.posts.find().sort( { timestamp : -1 } )

Because MongoDB can read indexes in both ascending and descending
order, the direction of a single-key index does not matter.

Indexes support queries, update operations, and some phases of the
:ref:`aggregation pipeline
<aggregation-pipeline-operators-and-performance>`.

.. include:: /includes/fact-bindata-storage-optimization.rst
