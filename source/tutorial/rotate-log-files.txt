================
Rotate Log Files
================

.. default-domain:: mongodb

Overview
--------

Log rotation using MongoDB's standard approach archives the current
log file and starts a new one. To do this, the :program:`mongod` or
:program:`mongos` instance renames the current log file by appending a
UTC (GMT) timestamp to the filename, in :term:`ISODate` format. It then
opens a new log file, closes the old log file, and sends all new log
entries to the new log file.

MongoDB's standard approach to log rotation only rotates logs
in response to the :dbcommand:`logRotate` command, or when the
:program:`mongod` or :program:`mongos` process receives a ``SIGUSR1``
signal from the operating system.

Alternately, you may configure mongod to send log data to ``syslog``. In
this case, you can take advantage of alternate logrotation tools.

.. seealso:: For information on logging, see the
   :ref:`monitoring-standard-loggging` section.

Log Rotation With MongoDB
-------------------------

The following steps create and rotate a log file:

1. Start a :program:`mongod` with verbose logging, with appending
   enabled, and with the following log file:

   .. code-block:: javascript

      mongod -v --logpath /var/log/mongodb/server1.log --logappend

#. In a separate terminal, list the matching files:

   .. code-block:: javascript

      ls /var/log/mongodb/server1.log*

   For results, you get:

   .. code-block:: javascript

      server1.log

#. Rotate the log file using *one* of the following methods.

   - From the :program:`mongo` shell, issue the :dbcommand:`logRotate`
     command from the ``admin`` database:

     .. code-block:: javascript

        use admin
        db.runCommand( { logRotate : 1 } )

     This is the only available method to rotate log files on
     Windows systems.

   - For Linux systems, rotate logs for a single process by issuing
     the following command:

     .. code-block:: javascript

        kill -SIGUSR1 <mongod process id>

#. List the matching files again:

   .. code-block:: javascript

      ls /var/log/mongodb/server1.log*

   For results you get something similar to the following. The
   timestamps will be different.

   .. code-block:: none

      server1.log  server1.log.2011-11-24T23-30-00

   The example results indicate a log rotation performed at exactly
   ``11:30 pm`` on ``November 24th, 2011 UTC``, which is the local time
   offset by the local time zone. The original log file is the one with
   the timestamp. The new log is ``server1.log`` file.

   If you issue a second :dbcommand:`logRotate` command an hour later,
   then an additional file would appear when listing matching files,
   as in the following example:

   .. code-block:: none

      server1.log  server1.log.2011-11-24T23-30-00  server1.log.2011-11-25T00-30-00

   This operation does not modify the
   ``server1.log.2011-11-24T23-30-00`` file created earlier, while
   ``server1.log.2011-11-25T00-30-00`` is the previous ``server1.log``
   file, renamed. ``server1.log`` is a new, empty file that receives
   all new log output.

Syslog Log Rotation
-------------------

.. versionadded:: 2.2

To configure mongod to send log data to syslog rather than writing log
data to a file, use the following procedure.

1. Start a :program:`mongod` with the :setting:`syslog` option.

#. Store and rotate the log output using your system's default log
   rotation mechanism.

.. important:: You cannot use :setting:`syslog` with :setting:`logpath`.
