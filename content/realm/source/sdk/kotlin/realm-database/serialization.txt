.. meta::
   :robots: noindex, nosnippet

.. _kotlin-serialization:

==========================
Serialization - Kotlin SDK
==========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

The Realm Kotlin SDK supports Kotlin Serialization. You can serialize specific
Realm data types using stable serializers, or user-defined classes with
an experimental full-document serialization API.

Realm Data Type Serializers
----------------------------

The Realm Kotlin SDK provides serializers for the following data types for
KSerializer:

.. list-table::
   :widths: 25 75
   :header-rows: 1
   :stub-columns: 1

   * - Realm Data Type
     - KSerializer for Type
   * - ``MutableRealmInt``
     - ``MutableRealmIntKSerializer::class``
   * - ``RealmAny``
     - ``RealmAnyKSerializer::class``
   * - ``RealmDictionary``
     - ``RealmDictionaryKSerializer::class``
   * - ``RealmInstant``
     - ``RealmInstantKSerializer::class``
   * - ``RealmList``
     - ``RealmListKSerializer::class``
   * - ``RealmSet``
     - ``RealmSetKSerializer::class``
   * - ``RealmUUID``
     - ``RealmUUIDKSerializer::class``

The serializers are located in ``io.realm.kotlin.serializers``.

For examples of how Realm serializes the different data types, refer to 
:ref:`kotlin-realm-datatypes-serialization-output-examples`.

Deserializing Realm data types generates unmanaged data instances.

Register a Serializer for a Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can register a serializer for a specific property. Use the ``@Serializable``
annotation to bind to a specific Realm data type serializer.

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.serialize-single-property.kt
    :language: kotlin

Register a Serializer for All Occurrences in a File
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can register a serializer for all occurrences of that type within a file
by adding the declaration to the top of the file:

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.serialize-type-in-file.kt
    :language: kotlin

Then, any objects that have properties of that type within the file can use 
the serializer without individually registering it:

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.serialize-all-type-occurrences.kt
    :language: kotlin

Automatically Bind Realm Types to Serializers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To automatically bind all Realm types to their serializers, you can add
a snippet containing all serializers to the top of a file:

.. code-block:: kotlin

   @file:UseSerializers(
      MutableRealmIntKSerializer::class,
      RealmAnyKSerializer::class,
      RealmDictionaryKSerializer::class,
      RealmInstantKSerializer::class,
      RealmListKSerializer::class,
      RealmSetKSerializer::class,
      RealmUUIDKSerializer::class
   )

.. _kotlin-realm-datatypes-serialization-output-examples:

Serialization Output Examples
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

These examples illustrate how the different Realm data types serialize 
using a JSON encoder:

.. list-table::
   :widths: 25 75
   :header-rows: 1
   :stub-columns: 1

   * - Realm Data Type
     - Serialization Type and Example
   * - MutableRealmInt
     - | Serializes using a regular integer value.
       |
       | ``MutableRealmInt.create(35)`` serializes to ``35``
   * - RealmAny
     - | Serializes using a map containing a union of all values and its type.
       |
       | ``RealmAny.create("hello world")`` serializes to ``{"type": "STRING", "string": "hello world"}``
       |
       | ``RealmAny.create(20)`` serializes to ``{"type": "INT", "int": 20}``
   * - RealmDictionary
     - | Serializes using a generic list.
       |
       | ``realmDictionaryOf("hello" to "world")`` serializes to ``{"hello": "world"}``
   * - RealmInstant
     - | Serializes as a ``BsonDateTime``.
       |
       | ``RealmInstant.now()`` serializes to ``{"$date": {"$numberLong": "<millis>"}}``
   * - RealmList
     - | Serializes using a generic list.
       |
       | ``realmListOf("hello", world)`` serializes to ``["hello", "world"]``
   * - RealmSet
     - | Serializes using a generic list.
       |
       | ``realmSetOf("hello", world)`` serializes to ``["hello", "world"]``
   * - BsonObjectId or ObjectId
     - | Serializes as a ``BsonObjectId``.
       |
       | ``ObjectId.create()`` serializes to ``{"$oid": <ObjectId bytes as 24-character, big-endian hex string>}``
   * - RealmUUID
     - | Serializes as a ``BsonBinary``.
       |
       | ``RealmUUID.random()`` serializes to ``{ "$binary": {"base64": "<payload>", "subType": "<t>"}}``
   * - RealmObject
     - Serializes using the polymorphic setup defined by the user. Do this via the SerializersModule:

       .. code-block:: json
          :copyable: false
       
          val json = Json {
              serializersModule = SerializersModule {
                polymorphic(RealmObject::class) {
                    subclass(SerializableSample::class)
                }
              }
          }

.. _kotlin-ejson-encoding-for-atlas:

EJSON Encoding for Atlas
------------------------

.. versionadded:: 1.9.0

Realm Kotlin SDK APIs that communicate directly with MongoDB Atlas use 
EJSON encoding. The SDK offers two types of EJSON encoders:

- A limited but stable encoder
- An experimental encoder that offers full document serialization

The APIs that use these encoders include:

- App Services :ref:`Function calls <kotlin-call-function>`
- Credentials with :ref:`custom function authentication <kotlin-login-custom-function>`
- User profile and :ref:`custom user data <kotlin-custom-user-data>`

Add KSerialization to Your Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Realm Kotlin SDK's EJSON serialization support depends on the official 
Kotlin Serialization library. You must add 
`Kotlin Serialization <https://github.com/Kotlin/kotlinx.serialization>`__
to your project. Use the same version used in your Realm Kotlin SDK version.
Refer to the `Version Compatibility Matrix in the realm-kotlin GitHub repository
<https://github.com/realm/realm-kotlin#version-compatibility-matrix>`__
for information about the supported dependencies of each version.

The ``@Serializable`` annotation in the following examples comes from 
the Kotlin Serialization framework.

.. _kotlin-ejson-stable-encoder:

Stable Encoder
~~~~~~~~~~~~~~

The stable encoder does not support user-defined classes. You can use these
argument types with the stable encoder:

- Primitives
- BSON 
- ``MutableRealmInt``
- ``RealmUUID``
- ``ObjectId``
- ``RealmInstant``
- ``RealmAny``
- Array
- Collection
- Map

To return a collection or map, you can use ``BsonArray`` or ``BsonDocument``.

Call a Function
```````````````

You can :ref:`call a Function <kotlin-call-function>` using the stable encoder
with a valid argument type, and deserialize the result. 

In this example, we call the ``getMailingAddress`` Function with two 
string arguments, and get the result as a ``BsonDocument``:

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.call-function-stable-serializer.kt
    :language: kotlin

Custom Function Credentials
```````````````````````````

You can create a ``Credential`` for use with 
:ref:`custom function authentication <kotlin-login-custom-function>` using 
the stable encoder as either a map or a ``BsonDocument``:

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.create-custom-credential-using-stable-serializer.kt
    :language: kotlin

User Profile and Custom Data
````````````````````````````

You can access a user profile or :ref:`custom user data <kotlin-custom-user-data>`
using the stable encoder as a ``BsonDocument``:

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.user-profile-stable-serializer.kt
    :language: kotlin

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.custom-user-data-stable-serializer.kt
    :language: kotlin

.. _kotlin-ejson-full-document-encoder:

Full-Document Encoder
~~~~~~~~~~~~~~~~~~~~~

The full-document encoder enables you to serialize and deserialize user-defined
classes. You can define and use custom KSerializers for your type with Atlas
features that communicate directly with MongoDB Atlas using EJSON encoding.
The full-document encoder supports contextual serializers.

.. important:: This is experimental

   The current implementation of full document serialization is experimental.
   Calling these APIs when your project uses a different version of Kotlin 
   Serialization than Realm's dependency causes undefined behavior. Refer to
   the `Version Compatibility Matrix in the realm-kotlin GitHub repository
   <https://github.com/realm/realm-kotlin#version-compatibility-matrix>`__
   for information about the supported dependencies of each version.

Required Imports
````````````````

To use this feature, add one or more of the following imports to your 
file as relevant:

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.serialization-imports.kt
    :language: kotlin

Define a Serializer
```````````````````

When you use serialization in the Realm Kotlin SDK, you can define a 
serializer in one of two ways:

- Add the ``@Serializable`` annotation to a class
- Define a custom KSerializer for your type, and pass it to the relevant API

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.define-a-class-as-serializable.kt
    :language: kotlin

You can set a custom EJSON serializer for your app in the ``AppConfiguration``,
as in a case where you want to use a contextual serializer:

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.set-custom-ejson-serializer-for-app-configuration.kt
    :language: kotlin

Experimental Opt-In
```````````````````

Because the full-document serialization API is experimental, you must add 
the relevant ``@OptIn`` annotations for the APIs you use.

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.experimental-serializer-opt-in.kt
    :language: kotlin

Call a Function
```````````````

You can :ref:`call a Function <kotlin-call-function>` using the experimental
API with arguments or return types that use custom serializers.

In this example, we call the ``getMailingAddressForPerson`` Function with 
a serialized ``Person`` object, and get the result as a deserialized 
``Address`` object:

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.define-serializable-class.kt
    :language: kotlin

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.call-function-experimental-serializer.kt
    :language: kotlin

.. tip::

   Atlas Function calls for the stable serializer and the experimental API 
   serializer share the same method name. When invoking a function with no
   parameters, you must provide an empty block in the instruction for the 
   experimental API.

   .. code-block:: kotlin
      :copyable: false

      val color = user.functions.call<PersonalFavorites>("favouriteColor") {}

Custom Function Credentials
```````````````````````````

You can define a custom serializer for 
:ref:`custom function authentication <kotlin-login-custom-function>` using 
the experimental API:

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.custom-function-credential-serializer.kt
    :language: kotlin

And use it when creating a custom function credential:

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.create-custom-credential-using-serializer.kt
    :language: kotlin

User Profile and Custom Data
````````````````````````````

Define a custom serializer for user profile or custom data:

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.user-profile-serializer.kt
    :language: kotlin

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.custom-data-serializer.kt
    :language: kotlin

And use the custom serializer when accessing the user profile or custom user data:

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.user-profile-experimental-serializer.kt
    :language: kotlin

.. literalinclude:: /examples/generated/kotlin/Serialization.snippet.custom-user-data-experimental-serializer.kt
    :language: kotlin

Other Serialization Libraries
-----------------------------

Serialization methods used by libraries that depend on reflection, such as
`GSON <https://github.com/google/gson>`__ do not work with the SDK
by default.

This is because the SDK compiler plugin injects a hidden field
into object models, prefixed with ``io_realm_kotlin_``. The SDK uses
this hidden field to manage internal object state. Any library that
relies on fields instead of getters and setters needs to ignore this
hidden field.

To use the SDK with external libraries such as GSON, exclude the hidden
fields from serialization using a prefix match:

.. code-block:: kotlin
   :copyable: false

   var gson: Gson = GsonBuilder()
       .setExclusionStrategies(object: ExclusionStrategy {
           override fun shouldSkipField(f: FieldAttributes?): Boolean =
               f?.name?.startsWith("io_realm_kotlin_") ?: false
           override fun shouldSkipClass(clazz: Class<*>?): Boolean =
               false
       })
       .create()
