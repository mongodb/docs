======
Create
======

.. default-domain:: mongodb

Create operation adds new :term:`documents <document>` to a
:term:`collection`. MongoDB provides the following methods to perform
create operations:

- :ref:`insert <crud-create-insert>`

- :ref:`update with upsert <crud-create-update>`

- :ref:`save <crud-create-save>`

Additionally, the three methods exhibit the following behavior during
the create operation:

- If the new document does not specify an :term:`_id` field, these
  methods add the ``_id`` field to the document and assign as
  its value a unique :term:`ObjectId <objectid>`.

- If the new document specifies an ``_id`` field, the ``_id``
  field must be unique within the collection.

- If the new document specifies a new field not found in existing
  documents, these methods add the document **without** requiring a
  schema change to the collection or any change to the existing
  documents.

MongoDB v2.2 has a 16 megabytes limit on document size.

.. include:: /includes/note-write-concerns.rst

.. include:: /includes/warning-document-field-name-restrictions.rst

.. _crud-create-insert:

Insert
------

The :method:`insert() <db.collection.insert()>` method is the primary
method to insert a document or documents into a collection. 

The :method:`insert() <db.collection.insert()>` method has the
following syntax:

.. code-block:: javascript

   db.collection.insert( <document> )

The :method:`insert() <db.collection.insert()>` method is analogous to
the ``SQL INSERT``.

Consider the following examples that illustrate the use of the
:method:`insert() <db.collection.insert()>` method:

- If the collection does not exist, then the :method:`insert()
  <db.collection.insert()>` method creates the collection during the
  first insert.
  
  The following operation creates the collection ``csbios`` and
  inserts the document:

  .. code-block:: javascript

     db.csbios.insert( {
        _id: 1,
        name: { first: 'John', last: 'Backus' },
        birth: new Date('Dec 03, 1924'),
        death: new Date('Mar 17, 2007'),
        contribs: [ 'Fortran', 'ALGOL', 'Backus-Naur Form', 'FP' ],
        awards: [
                  { award: 'W.W. McDowell Award',
                    year: '1967',
                    by: 'IEEE Computer Society' },
                  { award: 'National Medal of Science',
                    year: '1975',
                    by: 'National Science Foundation' },
                  { award: 'Turing Award',
                    year: '1977',
                    by: 'ACM' },
                  { award: 'Draper Prize',
                    year: '1993',
                    by: 'National Academy of Engineering' }
                ]
     } )

  You can verify the results of this operation by querying the
  ``csbios`` collection:

  .. code-block:: javascript

     db.csbios.find()

  This will return the document from the ``csbios`` collection:

  .. code-block:: javascript

     { 
       "_id" : 1, 
       "name" : { "first" : "John", "last" :"Backus" },
       "birth" : ISODate("1924-12-03T05:00:00Z"),
       "death" : ISODate("2007-03-17T04:00:00Z"),
       "contribs" : [ "Fortran", "ALGOL", "Backus-Naur Form", "FP" ],
       "awards" : [
                   { "award" : "W.W. McDowellAward",
                     "year" : "1967",
                     "by" : "IEEE Computer Society" },
                   { "award" : "National Medal of Science",
                     "year" : "1975",
                     "by" : "National Science Foundation" },
                   { "award" : "Turing Award", 
                     "year" : "1977",
                     "by" : "ACM" },
                   { "award" : "Draper Prize",
                     "year" : "1993",
                     "by" : "National Academy of Engineering" }
                  ]
      }

- If the new document does not contain an ``_id`` field, then the
  :method:`insert() <db.collection.insert()>` method adds the ``_id``
  field to the document and assigns a unique ``ObjectId`` as its value.
  
  The following operation adds the ``_id`` field to the document,
  assigns to the field a unique ``ObjectId``, and inserts the document
  into the ``csbios`` collection:

  .. code-block:: javascript

     db.csbios.insert( {
        name: { first: 'John', last: 'McCarthy' },
        birth: new Date('Sep 04, 1927'),
        death: new Date('Dec 24, 2011'),
        contribs: [ 'Lisp', 'Artificial Intelligence', 'ALGOL' ],
        awards: [
                  { award: 'Turing Award',
                    year: '1971',
                    by: 'ACM' },
                  { award: 'Kyoto Prize',
                    year: '1988',
                    by: 'Inamori Foundation'},
                  { award: 'National Medal of Science',
                    year: '1990',
                    by: 'National Science Foundation' }
                ]

     } )

  You can verify the inserted document by the querying the ``csbios``
  collection:

  .. code-block:: javascript

     db.csbios.find( { name: { first: 'John', last: 'McCarthy' } } )

  The returned document contains an ``_id`` field with the generated
  ``ObjectId`` value:

  .. code-block:: javascript

     {
       "_id" : ObjectId("507c294cbcf86cd7994f6c0a"),
       "name" : { "first" : "John", "last" : "McCarthy" },
       "birth" : ISODate("1927-09-04T04:00:00Z"),
       "death" : ISODate("2011-12-24T05:00:00Z"),
       "contribs" : [ "Lisp", "Artificial Intelligence", "ALGOL" ],
       "awards" : [
                    { "award" : "Turing Award",
                      "year" : "1971",
                      "by" : "ACM" },
                    { "award" : "Kyoto Prize",
                      "year" : "1988",
                      "by" : "Inamori Foundation" }, 
                    { "award" : "National Medal of Science",
                      "year" : "1990",
                      "by" : "National Science Foundation" }
                  ] 
     }

- If the argument to the :method:`insert() <db.collection.insert()>`
  method is an array of documents, then the :method:`insert()
  <db.collection.insert()>` method performs a bulk insert into a
  collection.

  The following operation inserts three documents into the
  ``csbios`` collection. The operation also illustrates the
  *dynamic schema* characteristic of MongoDB. Although the document
  with ``_id: 3`` contains a field ``title`` which does not appear in
  the other documents, MongoDB does not require the other documents to
  contain this field:

  .. code-block:: javascript

     db.csbios.insert( [ 
        {
          _id: 3,
          name: { first: 'Grace', last: 'Hopper' },
          title: 'Rear Admiral',
          birth: new Date('Dec 09, 1906'),
          death: new Date('Jan 01, 1992'),
          contribs: [ 'UNIVAC', 'compiler', 'FLOW-MATIC', 'COBOL' ],
          awards: [
                    { award: 'Computer Sciences Man of the Year',
                      year: '1969',
                      by: 'Data Processing Management Association' },
                    { award: 'Distinguished Fellow',
                      year: '1973',
                      by: ' British Computer Society' },
                    { award: 'W. W. McDowell Award',
                      year: '1976',
                      by: 'IEEE Computer Society' },
                    { award: 'National Medal of Technology',
                      year: '1991',
                      by: 'United States' }
                  ]
        },
        {
          _id: 4,
          name: { first: 'Kristen', last: 'Nygaard' },
          birth: new Date('Aug 27, 1926'),
          death: new Date('Aug 10, 2002'),
          contribs: [ 'OOP', 'Simula' ],
          awards: [
                    { award: 'Rosing Prize', 
                      year: '1999',
                      by: 'Norwegian Data Association' },
                    { award: 'Turing Award',
                      year: '2001',
                      by: 'ACM' },
                    { award: 'IEEE John von Neumann Medal', 
                      year: '2001',
                      by: 'IEEE' }
                  ]
        },
        {
          _id: 5,
          name: { first: 'Ole-Johan', last: 'Dahl' },
          birth: new Date('Oct 12, 1931'),
          death: new Date('Jun 29, 2002'),
          contribs: [ 'OOP', 'Simula' ],
          awards: [
                    { award: 'Rosing Prize',
                      year: '1999',
                      by: 'Norwegian Data Association' },
                    { award: 'Turing Award',
                      year: '2001',
                      by: 'ACM' },
                    { award: 'IEEE John von Neumann Medal', 
                      year: '2001',
                      by: 'IEEE' }
                  ]
        }
     ] )

.. _crud-create-update:

Update with Upsert
------------------

The ``upsert``, or more specifically the :method:`update()
<db.collection.update()>` method with the ``upsert`` option, inserts a
single document into a collection if no document exists that matches
the ``query`` argument. The ``upsert`` eliminates the need to perform a
separate database call to check for the existence of a record before
performing either an insert or an update.

An ``upsert`` has the following syntax:

.. code-block:: javascript

   db.collection.update( <query>,
                         <update>,
                         { upsert: true } )

Consider the following examples that illustrate the use of the
``upsert`` to perform create operations:

- If the ``update`` argument contains only ``field:value`` pairs and no
  document matches the ``query`` argument, the ``upsert`` operation
  inserts a new document containing the fields and values in the
  ``update`` argument and the ``_id`` field if not found in the
  ``update`` argument.

  The following operation inserts a new document into the
  ``csbios`` collection since there is no document matching the
  ``name`` field as specified in the ``query`` argument. Since the
  ``update`` argument contains only ``field:value`` pairs, the new
  document contains only these fields and values:

  .. code-block:: javascript

     db.csbios.update(
        { name: { first: 'Dennis', last: 'Ritchie'} },
        {
          _id: 6,
          name: { first: 'Dennis', last: 'Ritchie'},
          birth: new Date('Sep 09, 1941'),
          died: new Date('Oct 12, 2011'),
          contribs: [ 'UNIX', 'C' ],
          awards: [ 
                    { award: 'Turing Award',
                      year: '1983',
                      by: 'ACM' },
                    { award: 'IEEE Richard W. Hamming Medal',
                      year: '1990',
                      by: 'IEEE'},
                    { award: 'National Medal of Technology',
                      year: '1998',
                      by: 'United States' },
                    { award: 'Japan Prize',
                      year: '2011',
                      by: 'The Japan Prize Foundation' }
                ]
        },
        { upsert: true }
     )

- If the ``update`` argument includes only :ref:`update operators
  <update-operators>`, the ``upsert`` operation inserts a new document
  containing the fields and values in the ``update`` argument and the
  fields and values in the ``query`` argument.

  The following operation inserts a new document into the
  ``csbios`` collection since there is no document matching the
  ``_id`` field and the ``name`` field as specified in the ``query``
  argument. Since the ``update`` argument contains only :ref:`update
  operators <update-operators>`, the inserted document contains fields
  and values from both the ``query`` and the ``update`` arguments.

  .. code-block:: javascript

     db.csbios.update(
        { _id: 7,
          name: { first: 'Ken', last: 'Thompson'}
        },
        {
          $set: {
                   birth: new Date('Feb 04, 1943'),
                   contribs: [ 'UNIX', 'C', 'B', 'UTF-8' ],
                   awards: [ 
                    { award: 'Turing Award',
                      year: '1983',
                      by: 'ACM' },
                    { award: 'IEEE Richard W. Hamming Medal',
                      year: '1990',
                      by: 'IEEE'},
                    { award: 'National Medal of Technology',
                      year: '1998',
                      by: 'United States' },
                    { award: 'Tsutomu Kanai Award',
                      year: '1999',
                      by: 'IEEE' },
                    { award: 'Japan Prize',
                      year: '2011',
                      by: 'The Japan Prize Foundation' }
                  ]
               }
        },
        { upsert: true }
     )

  You can verify the inserted document by querying the ``csbios``
  collection:

  .. code-block:: javascript

     db.csbios.find( { _id: 7 } )

  The returned document contains the ``_id`` and the ``name`` fields
  from the ``query`` argument as well as the fields and values from the
  ``update`` argument:

  .. code-block:: javascript

     {
       "_id" : 7,
       "awards" : [
                    { "award" : "Turing Award",
                      "year" : "1983",
                      "by" : "ACM" },
                    { "award" : "IEEE Richard W. Hamming Medal",
                      "year" : "1990",
                      "by" : "IEEE" },
                    { "award" : "National Medal of Technology",
                      "year" : "1998",
                      "by" : "United States" },
                    { "award" : "Tsutomu Kanai Award",
                      "year" : "1999",
                      "by" : "IEEE" },
                    { "award" : "Japan Prize",
                      "year" : "2011",
                      "by" : "The Japan Prize Foundation" }
                  ], 
       "birth" : ISODate("1943-02-04T05:00:00Z"),
       "contribs" : [ "UNIX", "C", "B", "UTF-8" ],
       "name" : { "first" : "Ken", "last" : "Thompson" }
     }

- If the ``_id`` is not specified in either the ``query`` argument and
  the ``update`` argument, the ``upsert`` operation adds the ``_id``
  field to the document and assigns a unique ``ObjectId`` as its value.

  The following operation inserts a new document into the
  ``csbios`` collection since there is no document matching the
  ``name`` field as specified in the ``query`` argument. Because the
  ``update`` argument does not contain the ``_id`` field, the
  ``upsert`` operation adds the ``_id`` field to the document and
  assigns to the field a unique ``ObjectId``:

  .. code-block:: javascript

     db.csbios.update( 
        { name: { first: 'Bjarne', last: 'Stroustrup' } },
        { 
          name: { first: 'Bjarne', last: 'Stroustrup' },
          birth: new Date('Jun 11, 1950'),
          contribs: [ 'C++' ],
          awards: [ 
                    { award: 'Grace Murray Hopper Award',
                      year: '1992',
                      by: 'ACM' },
                    { award: 'Computer Entrepreneur Award', 
                      year: '2004',
                      by: 'IEEE'}
                ]
        },
        { upsert: true }
     )

  You can verify the inserted document by the querying the ``csbios``
  collection:

  .. code-block:: javascript

     db.csbios.find( { name: { first: 'Bjarne', last: 'Stroustrup' } } )

  The returned document contains an ``_id`` field with the generated
  ``ObjectId`` value:

  .. code-block:: javascript

     {
       "_id" : ObjectId("507c35dd8fada716c89d0013"),
       "name" : { "first" : "Bjarne", "last" : "Stroustrup" },
       "birth" : ISODate("1950-06-11T04:00:00Z"),
       "contribs" : [ "C++" ],
       "awards" : [
                    { "award" : "Grace Murray Hopper Award",
                      "year" : "1992",
                      "by" : "ACM" },
                    { "award" : "Computer Entrepreneur Award",
                      "year" : "2004",
                      "by" : "IEEE" }
                  ]
     }

.. _crud-create-save:

Save
----

The :method:`save() <db.collection.save()>` method inserts a document
into a collection if the document does not contain the ``_id`` field or
contains an ``_id`` field with a value not in the collection. If the
document does not contain the ``_id`` field, the :method:`save()
<db.collection.save()>` method adds the ``_id`` field to the document
and assigns a unique ``ObjectId`` as its value.

The :method:`save() <db.collection.save()>` method has the
following syntax:

.. code-block:: javascript

   db.collection.save( <document> )

Consider the following examples that illustrate the use of the
:method:`insert() <db.collection.insert()>` method for create
operations:

- If the ``document`` does not contain the ``_id`` field, the
  :method:`save() <db.collection.save()>` method adds the ``_id`` field
  to the document and performs an insert.
  
  The following operation performs an insert into the ``csbios``
  collection since the document does not contain the ``_id`` field:

  .. code-block:: javascript

     db.csbios.save( {
        name: { first: 'Guido', last: 'van Rossum'},
        birth: new Date('Jan 31, 1956'),
        contribs: [ 'Python' ],
        awards: [
                  { award: 'Award for the Advancement of Free Software',
                    year: '2001',
                    by: 'Free Software Foundation' },
                  { award: 'NLUUG Award', 
                    year: '2003',
                    by: 'NLUUG'}
                ]
     } )

  You can verify the addition of the ``_id`` field during the operation
  by querying the ``csbios`` collection:

  .. code-block:: javascript

     db.csbios.find( { name: { first: 'Guido', last: 'van Rossum'} } )

  The returned document contains an ``_id`` field with the generated
  ``ObjectId`` value:

  .. code-block:: javascript

     {
       "_id" : ObjectId("507c387cbcf86cd7994f6c0b"),
       "name" : { "first" : "Guido", "last" : "van Rossum" },
       "birth" : ISODate("1956-01-31T05:00:00Z"),
       "contribs" : [ "Python" ],
       "awards" :[
                   { "award" : "Award for the Advancement of Free Software",
                     "year" : "2001",
                     "by" : "Free Software Foundation" },
                   { "award" : "NLUUG Award",
                     "year" : "2003",
                     "by" : "NLUUG" }
                 ]
     }

- If the ``document`` contains an ``_id`` field but has a value not
  found in the collection, the :method:`save() <db.collection.save()>`
  method performs an insert.

  The following operation performs an insert into the ``csbios``
  collection since the document contains an ``_id`` field whose value
  ``10`` is not found in the ``csbios`` collection:

  .. code-block:: javascript

     db.csbios.save(
        {
          _id: 10,
          name: { first: 'Yukihiro', aka: 'Matz', last: 'Matsumoto'},
          birth: new Date('Apr 14, 1965'),
          contribs: [ 'Ruby' ],
          awards: [
                    { award: 'Award for the Advancement of Free Software',
                      year: '2011',
                      by: 'Free Software Foundation' }
                  ]
        }
     )
