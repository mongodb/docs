==========
createRole
==========

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: createRole

   Creates a role and specifies its privileges. The role applies to the
   database on which you run the command. The :dbcommand:`createRole`
   command returns a *duplicate role* error if the role already exists in
   the database.

   The :dbcommand:`createRole` command uses the following syntax:

   .. code-block:: javascript

      { createRole: "<new role>",
        privileges: [
          { resource: { <resource> }, actions: [ "<action>", ... ] },
          ...
        ],
        roles: [
          { role: "<role>", db: "<database>" },
          ...
        ],
        writeConcern: <write concern document>
      }

   The :dbcommand:`createRole` command has the following fields:

   .. include:: /reference/command/createRole-field.rst

   .. important:: Both the ``privileges`` array and ``roles`` array must be
      present. If you choose not to specify one or the other, or both, you
      must provide empty arrays.

Required Access
---------------

.. include:: /includes/access-create-role.rst

Example
-------

The following is an example of the :dbcommand:`createRole` command that
creates a role ``myClusterwideAdmin`` on the ``admin`` database:

.. code-block:: javascript

   use admin
   db.runCommand({ createRole: "myClusterwideAdmin",
     privileges: [
       { resource: { cluster: true }, actions: [ "addShard" ] },
       { resource: { db: "config", collection: "" }, actions: [ "find", "update", "insert", "remove" ] },
       { resource: { db: "users", collection: "usersCollection" }, actions: [ "update", "insert", "remove" ] },
       { resource: { db: "", collection: "" }, actions: [ "find" ] }
     ],
     roles: [
       { role: "read", db: "admin" }
     ],
     writeConcern: { w: "majority" , wtimeout: 5000 }
   })
