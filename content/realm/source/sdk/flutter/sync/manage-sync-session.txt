.. meta::
   :robots: noindex, nosnippet

.. _flutter-manage-sync-session:

===================================
Manage a Sync Session - Flutter SDK
===================================

.. facet::
  :name: genre
  :values: tutorial

.. meta::
   :description: Access the syncSession to check network connection, pause and resume sync sessions, and monitor Sync progress with the Atlas Device SDK for Flutter.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

When you use Atlas Device Sync, the Flutter SDK syncs data with Atlas
in the background using a sync session. The sync session starts whenever
you open a synced realm.

The sync session manages the following:

- Uploading and downloading changes to the synced database
- Pausing and resuming sync
- Monitoring sync progress
- Monitoring network connectivity

You can access the :flutter-sdk:`Session <realm/Session-class.html>` of any synced
realm through the :flutter-sdk:`Realm.syncSession <realm/Realm/syncSession.html>` property.

Prerequisites
-------------

Before you can manage your sync session state, you must perform the following:

#. :ref:`Configure Flexible Sync on the Atlas App Services backend <enable-flexible-sync>`
#. :ref:`Add Device Sync to your app <flutter-add-sync-to-app>`

.. _flutter-sync-wait-for-changes:

Wait for Changes to Upload and Download
---------------------------------------

To asynchronously wait for all changes to upload to Atlas from your synced realm,
call :flutter-sdk:`Session.waitForUpload()
<realm/Session/waitForUpload.html>`. To asynchronously wait for all changes on Atlas
to download to your synced realm, call :flutter-sdk:`Session.waitForDownload()
<realm/Session/waitForDownload.html>`.

.. literalinclude:: /examples/generated/flutter/manage_sync_session_test.snippet.wait-upload-download.dart
   :language: dart

You can add an optional :flutter-sdk:`CancellationToken
<realm/CancellationToken-class.html>` to ``waitForUpload()`` and
``waitForDownload()``.

.. literalinclude:: /examples/generated/flutter/manage_sync_session_test.snippet.cancel-waitfor.dart
   :language: dart

.. _flutter-pause-resume-sync:

Pause and Resume a Sync Session
-------------------------------

To pause syncing for a session, call :flutter-sdk:`Session.pause() <realm/Session/pause.html>`.
The realm will not sync changes with Atlas while the session is paused.

To resume syncing a changes, call :flutter-sdk:`Session.resume() <realm/Session/resume.html>`.

You must manually call ``Session.pause()`` and ``Session.resume()`` for each
realm whose Sync session you want to pause and restart.
The sync state of one session has no impact on other open sessions.

The following code block demonstrates calling these methods:

.. literalinclude:: /examples/generated/flutter/manage_sync_session_test.snippet.pause-resume-sync.dart
   :language: dart

When to Pause a Sync Session
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/when-to-pause-sync.rst

.. _flutter-monitor-sync-progress:

Monitor Sync Upload and Download Progress
-----------------------------------------

.. versionchanged:: 2.0.0
   ``transferredBytes`` and ``transferrableBytes`` deprecated in favor of ``progressEstimate``

To monitor Sync progress, call :flutter-sdk:`SyncSession.getProgressStream()
<realm/Session/getProgressStream.html>`. This method returns a Stream of
:flutter-sdk:`SyncProgress <realm/SyncProgress-class.html>` objects that provide
a ``progressEstimate`` for the current upload or download.

The provided ``progressEstimate`` is a double whose value
ranges from ``0.0`` to ``1.0``. At ``1.0``, the progress stream is complete.

``SyncSession.getProgressStream()`` takes two arguments:

- A :flutter-sdk:`ProgressDirection <realm/ProgressDirection.html>`
  enum that can be set to ``upload`` or ``download``. Specifies whether the
  progress stream monitors upload or download progress.

- A :flutter-sdk:`ProgressMode <realm/ProgressMode.html>` enum
  that can be set to one of the following:

  - ``reportIndefinitely``: Sets notifications to continue until the callback is
    unregistered.
  - ``forCurrentlyOutstandingWork``: Sets notifications to continue until the
    ``progressEstimate`` reaches ``1.0``.

.. literalinclude:: /examples/generated/flutter/manage_sync_session_test.snippet.monitor-progress.dart
   :language: dart

.. tip::

   You can also configure sync monitoring by using the 
   :ref:`onProgressCallback <flutter-progress-callback>` when you first open a 
   Realm.

.. _flutter-monitor-network-connection:

Monitor Network Connection
--------------------------

You can get the state of the current network connection with
:flutter-sdk:`Session.connectionState <realm/Session/connectionState.html>`.
This returns a :flutter-sdk:`ConnectionState <realm/ConnectionState.html>` enum
that contains the network connection's state: ``connected``, ``disconnected``, or ``connecting``.

.. literalinclude:: /examples/generated/flutter/manage_sync_session_test.snippet.get-network-connection.dart
   :language: dart

Monitor the state of the network connection with
:flutter-sdk:`Session.connectionStateChanges <realm/Session/connectionStateChanges.html>`.
This property returns a Stream of :flutter-sdk:`ConnectionStateChange <realm/ConnectionStateChange-class.html>`
objects that updates when the network connection changes.
You can access the current and previous ``ConnectionState`` from ``ConnectionStateChange``.

.. literalinclude:: /examples/generated/flutter/manage_sync_session_test.snippet.monitor-network-connection.dart
   :language: dart

Manually Reconnect All Sync Sessions
------------------------------------

The Flutter SDK automatically detects when a device regains connectivity after
being offline and attempts to reconnect using an incremental backoff strategy.

You can choose to manually trigger a reconnect attempt with the
:flutter-sdk:`App.reconnect() <realm/App/reconnect.html>` instead of waiting for
the duration of the incremental backoff. This is useful if you have a more
accurate understanding of the network conditions and don't want to rely on
automatic reconnect detection.

.. literalinclude:: /examples/generated/flutter/manage_sync_session_test.snippet.session-reconnect.dart
   :language: dart

When you call this method, the SDK forces all sync sessions to attempt to
reconnect immediately and resets any timers used for incremental backoff.

.. important:: Cannot Reconnect Within Socket Read Timeout Duration

   The Flutter SDK has an internal default socket read timeout of 2 minutes,
   where the SDK will time out if a read operation does not receive any data
   within a 2-minute window. If you call ``App.Sync.reconnect()``
   within that window, the Flutter SDK does *not* attempt to reconnect.
