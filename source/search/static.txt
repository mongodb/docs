:template: guide

.. _guides-search-static:

=========================================
Build an Index with Static Field Mappings
=========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

.. short-description::

   Retrieve documents in MongoDB with a field-specific query. 

In this guide, you will learn how to index only specified fields in
documents by creating an index with static field mappings. This
allows you to perform more targeted searches.

.. time:: 15

What You'll Need
----------------

- A MongoDB account. See :ref:`guides-create-atlas-account`.
- An Atlas cluster. See :ref:`guides-create-a-cluster`.
- Sample datasets :ref:`loaded into your cluster <guides-load-sample-data>`.

Procedure
---------

.. procedure::
   :style: normal

   .. include:: /includes/navigate_to_collections.rst

   .. step:: In the right-hand pane, click ``sample_supplies``, 
         then click the ``sales`` collection.

   .. step:: Click :guilabel:`Search Indexes` in the upper right
         of the collection preview pane.

   .. step:: Create a search index in the :guilabel:`Visual Editor`.

      .. procedure::
         :style: connected

         .. step:: Click :guilabel:`Create Search Index`.

         .. step:: Click the :guilabel:`Visual Editor` configuration 
            method, then click :guilabel:`Next`.

         .. step:: Review the :guilabel:`Index Name and Data Source` 
            page to ensure that ``sample_supplies.sales`` is selected, 
            then click :guilabel:`Next`.

         .. step:: Click :guilabel:`Refine Your Index` in the bottom 
            left. Then, in the :guilabel:`Index Configurations` pane, 
            toggle off :guilabel:`Dynamic Mapping`.

         .. step:: In the :guilabel:`Field Mappings` pane, click
            :guilabel:`Add Field Mapping`. In the modal window, select 
            ``storeLocation`` from the :guilabel:`Field Name` dropdown 
            menu.

         .. step:: From the :guilabel:`Data Type` dropdown menu, select 
            ``String``. Leave the :guilabel:`Index Configurations` 
            values unchanged, and click :guilabel:`Add` at the bottom 
            of the modal window.

         .. step: Click :guilabel:`Save Changes`, then click 
            :guilabel:`Create Search Index`. Wait for the 
            :guilabel:`Status` column to read :guilabel:`Active`.

      You now have a search index with a static field mapping. 
      This index allows you to focus your search on the 
      ``storeLocation`` field and reduce your computational resource
      requirements by not indexing unused fields.

   .. step:: Query your collection.

      .. procedure::
         :style: connected

         .. step:: On the :guilabel:`Search Tester` page, type 
            ``London`` into the search bar, then click 
            :guilabel:`Search`.

         .. step:: Review the results. Each record includes a relevance
            score.

         .. step:: Type ``online`` into the search bar, then click
            :guilabel:`Search`.

            Even though some records include
            the string ``online`` in the ``purchaseMethod`` field, no
            records appear. The index only has a mapping for the
            ``storeLocation`` field, meaning Atlas Search will only 
            return records with matching values in the 
            ``storeLocation`` field.

         .. step:: Review the results.

         .. step:: Click :guilabel:`View Query Syntax`. The modal window
            displays the query sent through the {+fts+} API.

            When building applications using {+fts+}, you can use this 
            syntax to construct queries for programmatic execution.

Summary
-------

If you successfully completed the procedure in this guide, you have
created an Atlas Search index with a static field mapping, and used 
it to perform a targeted relevance-based search. In the next guide,
you will learn how to perform compound searches against specific 
fields using the aggregation pipeline.

.. guide-next::