.. _multi-series-charts:

===========================
Create a Multi-Series Chart
===========================

.. meta::
   :description: Create multi-series charts in Atlas Charts by mapping multiple fields to a single axis or using the Series field to group data based on discrete items.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

|charts| supports building *multi-series* charts, which split your
chart data into groups, or *series*, to compare additional
fields within your schema. There are two ways to create multi-series
charts:

- :ref:`Map Multiple Fields to a Single Axis
  <multiple-field-mappings>`. Use this method to compare or aggregate
  upon multiple non-categorical fields in the schema.

- :ref:`Using the Series field in the chart builder
  <charts-series-encoding>`. Use this method when grouping data based
  on a discrete list of items.

.. _multiple-field-mappings:

Map Multiple Fields to a Single Axis
------------------------------------

|charts| allows you to map multiple :ref:`Aggregation
<building-charts-aggregation>` or :guilabel:`Value` fields to a single
chart property (such as the :guilabel:`X Axis` or :guilabel:`Y Axis`).
This allows you to compare additional fields by creating new series
based on the encoding channels added.

After dragging a field to an :guilabel:`aggregation`
or :guilabel:`value` :ref:`encoding channel <encoding-channels>`, an
additional optional encoding channel of the same type appears below the
one which was just added, allowing you to add additional series to your
visualization. This process repeats with each channel you add, so
you can map as many fields as desired to your chart.

.. example::

   The following multi-series column chart shows average movie ratings
   by genre from two different sources: `IMDB <https://www.imdb.com/>`_
   and `Rotten Tomatoes <https://www.rottentomatoes.com/>`_:

   .. figure:: /images/charts/multi-series-agg.png
      :figwidth: 720px
      :alt: Movie Ratings Multiseries Chart

   There are two :guilabel:`aggregation` encoding channels on
   the chart's :guilabel:`Y Axis`, one for each of the site's rating
   fields. By selecting the :guilabel:`mean` aggregation option, the
   chart aggregates these two fields using the
   :manual:`$avg </reference/operator/aggregation/avg/>` operator to
   provide a comparison of the average of two fields in the same
   column.

.. tip::

   Use multiple field mappings to create a multi-series chart when
   the values being compared in the visualization come from two or more
   separate fields in the schema.

   In the example above, there is one series for Rotten Tomato ratings
   and one series for IMDB ratings. Since these are separate fields
   within the schema, adding multiple :guilabel:`aggregation` encoding
   channels to map the data is the best choice to compare the fields.

.. seealso::

   If you omit the :guilabel:`Category` field, you can create
   a single-series chart based on your selected aggregated fields.
   To learn more, see :ref:`single-series-multiple-fields`.

Use a Secondary Y Axis
~~~~~~~~~~~~~~~~~~~~~~

If you map multiple :guilabel:`Aggregation` or :guilabel:`Value` fields
to the :guilabel:`Y axis`, you can plot one set of values on a :ref:`secondary
Y axis <secondary-y-axis>`.

.. _charts-series-encoding:

Series Field
------------

You can also create multi-series charts by using the :guilabel:`Series`
field in the chart builder. The :guilabel:`Series` field differs from
:guilabel:`aggregation` :ref:`encoding channels <encoding-channels>`
because it instead utilizes a :guilabel:`Category`
:ref:`encoding channel <charts-channel-type-table>` instead of a
:guilabel:`Value` or :guilabel:`Aggregation` channel. When creating a
series using the :guilabel:`Category` encoding channel, each unique
value from the data field becomes a series in the visualization.

.. example::

   The following multi-series column chart shows order data from an
   office supply store, showing the most common items sold by
   store location:

   .. figure:: /images/charts/series-encoding-channel-example.png
      :figwidth: 720px
      :alt: Supply Store Series Encoding Channel Example

   By using the ``item.name`` in the :guilabel:`Series` encoding
   channel, a series within each location group is added for each
   item name.

.. tip::

   The :guilabel:`Series` field is useful when you are grouping data
   based on a discrete list of items. This approach should be used when
   the values for all series are stored in a single field, with a
   separate field used to establish the discrete categories.

.. _count-by-value-agg:

``count by value`` Aggregation Option
-------------------------------------

When you drag a field onto an :ref:`aggregation channel
<building-charts-aggregation>`, you can select the :guilabel:`count by
value` option to create a multi-series chart based on the values contained
in the field. A series is automatically created for each unique value from
the field, with the chart value representing the number of occurrences.

Your chart can display multiple :guilabel:`count by value` fields with
additional aggregations, as long as there is no field mapped to the
category axis.

.. note::

   If any field in the :guilabel:`X` or :guilabel:`Y` axis channel has the
   :guilabel:`count by value` aggregation selected, the :guilabel:`Series`
   channel is disabled, and any field previously mapped to that channel is
   removed.

.. example::

   The following multi-series bar chart uses the ``sample_airbnb``
   database. It groups listings by the number of beds and the number of
   bedrooms they have, showing the total number of listings for each
   value.

   .. figure:: /images/charts/count-by-value-sample-chart2.png
      :figwidth: 720px
      :alt: Count by value multi-series chart example

You can also create a multi-series chart with a :guilabel:`count by
value` aggregation channel and a category axis channel.

.. example::

   The following multi-series stacked column chart uses the ``sample_airbnb``
   database. It shows all the different suburbs of Turkey with the number of
   each distinct type of property located there.

   .. figure:: /images/charts/count-by-value-sample-chart.png
      :figwidth: 720px
      :alt: Count by value multi-series chart example
   
   The ``address.suburb`` field populates the :guilabel:`X axis`, while
   the stacked columns represent all the different property types and the
   total number of each.
