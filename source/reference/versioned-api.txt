=============
Versioned API
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol
   
What is the Versioned API, and Should You Use It?
-------------------------------------------------

The MongoDB Versioned API lets you upgrade your MongoDB server at will, 
and ensure that behavior changes between MongoDB versions do not break 
your application.

MongoDB 5.0 introduces the Versioned API for applications 
communicating with MongoDB server products. The Versioned API allows 
you to specify which version of the MongoDB API your application 
runs against.

The Versioned API provides long-term API stability for applications 
and supports more frequent releases and automatic server upgrades. This 
allows your applications to take advantage of rapidly released 
features without risking backwards-breaking changes.

The default behavior for your driver connection will continue to 
function as expected, even if you do not explicitly specify
an :ref:`apiVersion <api-version-desc>`.

The Versioned API encompasses the 
:ref:`subset of MongoDB commands <api-v1-command-list>` that 
applications use to read and write data, create collections 
and indexes, and perform other common tasks. 

Backward Compatibility Guarantee
--------------------------------

Your application will not experience significant behavior changes 
resulting from server upgrades. This guarantee holds as long as the 
new server supports your specified API version.

To guarantee backward compatibility, your application must:

- Declare an API version
- Only use commands and features supported in your specified API version
- Deploy with a supported version of an official driver

Declare the API Version
-----------------------

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu in the
upper-right to set the language of the examples on this page.

----------

To use the Versioned API, upgrade to the latest driver and create your 
application's MongoClient:

.. tabs-selector:: drivers

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. code-block:: javascript
         
         mongosh --apiVersion 1

   .. tab::
      :tabid: python

      .. literalinclude:: /driver-examples/test_examples.py
         :language: python
         :dedent: 8
         :start-after: Start Versioned API Example 1
         :end-before: End Versioned API Example 1

   .. tab::
      :tabid: php

      .. literalinclude:: /driver-examples/DocumentationExamplesTest.php
         :language: php
         :dedent: 8
         :start-after: Start Versioned API Example 1
         :end-before: End Versioned API Example 1

   .. tab::
      :tabid: c

      .. literalinclude:: /driver-examples/test-mongoc-sample-commands.c
         :language: c
         :dedent: 3
         :start-after: Start Versioned API Example 1
         :end-before: End Versioned API Example 1

   .. tab::
      :tabid: go

      .. literalinclude:: /driver-examples/go_examples.go
         :language: go
         :dedent: 0
         :start-after: Start Versioned API Example 1
         :end-before: End Versioned API Example 1

   .. tab::
      :tabid: csharp

      .. literalinclude:: /driver-examples/VersionedApiExamples.cs
         :language: csharp
         :dedent: 12
         :start-after: Start Versioned API Example 1
         :end-before: End Versioned API Example 1

   .. tab::
      :tabid: nodejs

      .. literalinclude:: /driver-examples/node_versioned_api.js
         :language: nodejs
         :dedent: 4
         :start-after: Start Versioned API Example 1
         :end-before: End Versioned API Example 1

``"1"`` is currently the only API version available. 

By default, clients are *non-strict*. A non-strict client allows you
to run any command, regardless of whether or not it belongs to the 
Versioned API.

Create a Strict Client 
----------------------

A *strict* client rejects all commands outside of the Versioned API. 
Attempts to use commands outside of the Versioned API will receive the 
:ref:`APIVersionError <api-vers-resp>` response.

Use the sample code to create a *strict* client:

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. code-block:: javascript
         
         mongosh --apiVersion 1 --apiStrict

   .. tab::
      :tabid: python

      .. literalinclude:: /driver-examples/test_examples.py
         :language: python
         :dedent: 8
         :start-after: Start Versioned API Example 2
         :end-before: End Versioned API Example 2

   .. tab::
      :tabid: php

      .. literalinclude:: /driver-examples/DocumentationExamplesTest.php
         :language: php
         :dedent: 8
         :start-after: Start Versioned API Example 2
         :end-before: End Versioned API Example 2

   .. tab::
      :tabid: c

      .. literalinclude:: /driver-examples/test-mongoc-sample-commands.c
         :language: c
         :dedent: 3
         :start-after: Start Versioned API Example 2
         :end-before: End Versioned API Example 2

   .. tab::
      :tabid: go

      .. literalinclude:: /driver-examples/go_examples.go
         :language: go
         :dedent: 0
         :start-after: Start Versioned API Example 2
         :end-before: End Versioned API Example 2
   
   .. tab::
      :tabid: csharp

      .. literalinclude:: /driver-examples/VersionedApiExamples.cs
         :language: csharp
         :dedent: 12
         :start-after: Start Versioned API Example 2
         :end-before: End Versioned API Example 2
   
   .. tab::
      :tabid: nodejs

      .. literalinclude:: /driver-examples/node_versioned_api.js
         :language: nodejs
         :dedent: 4
         :start-after: Start Versioned API Example 2
         :end-before: End Versioned API Example 2

Migrate To Versioned API Commands
---------------------------------

To migrate your application to use the Versioned API, you must:

#. Run your application's test suite with the new MongoClient options.
#. Determine which commands and features you're using that are outside 
   of the Versioned API.
#. Migrate to alternative commands and features in the Versioned API.

Once your application uses only commands and features defined in the 
Versioned API, you can redeploy it with the new MongoClient options 
and be confident that future server upgrades won't negatively
impact your application.

Example: :dbcommand:`count` Migration 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example shows how to migrate an application that implements the
:dbcommand:`count` command to an alternative method of counting 
documents. Since the :dbcommand:`count` command does not belong to the 
Versioned API, this application cannot use the Versioned API until the 
:dbcommand:`count` command is removed from the code.

Use the sample MQL (MongoDB Query Language) code to create a ``sales``
collection in :mongosh:`mongosh </>`:

.. code-block:: javascript

   db.sales.insertMany([
       { "_id" : 1, "item" : "abc", "price" : 10, "quantity" : 2, "date" : ISODate("2021-01-01T08:00:00Z") },
       { "_id" : 2, "item" : "jkl", "price" : 20, "quantity" : 1, "date" : ISODate("2021-02-03T09:00:00Z") },
       { "_id" : 3, "item" : "xyz", "price" : 5, "quantity" : 5, "date" : ISODate("2021-02-03T09:05:00Z") },
       { "_id" : 4, "item" : "abc", "price" : 10, "quantity" : 10, "date" : ISODate("2021-02-15T08:00:00Z") },
       { "_id" : 5, "item" : "xyz", "price" : 5, "quantity" : 10, "date" : ISODate("2021-02-15T09:05:00Z") },
       { "_id" : 6, "item" : "xyz", "price" : 5, "quantity" : 5, "date" : ISODate("2021-02-15T12:05:10Z") },
       { "_id" : 7, "item" : "xyz", "price" : 5, "quantity" : 10, "date" : ISODate("2021-02-15T14:12:12Z") },
       { "_id" : 8, "item" : "abc", "price" : 10, "quantity" : 5, "date" : ISODate("2021-03-16T20:20:13Z") }
   ])

Versioned API Error Response
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For example, issuing ``db.sales.count()`` results in this error:

.. code-block:: javascript
   :copyable: false

   {
	 "ok" : 0,
	 "errmsg" : "Provided apiStrict:true, but the command count is not in API Version 1",
	 "code" : 323,
	 "codeName" : "APIStrictError"
   }

However, the :dbcommand:`aggregate` command is
:ref:`in the Versioned API <api-v1-command-list>` and can be used to 
obtain a count. Use the sample MQL (MongoDB Query Language) code to 
obtain a count from the ``sales`` collection in :mongosh:`mongosh </>`:

.. code-block:: javascript

   db.sales.aggregate([
     { 
         $group: { 
           _id: null, 
           count: { $count: { } }
         }
     }
   ]) 

This results in a document where the ``count`` field contains the 
number of documents in the collection:

.. code-block:: javascript

  { "_id" : null, "count" : 8 }

How To Use Commands and Features Outside of the Versioned API
-------------------------------------------------------------

To use commands and features outside of the Versioned API, you can 
connect to your deployment with a *non-strict* client. By default,
clients are *non-strict*.

Use the sample code to create a *non-strict* client:

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. code-block:: javascript
         
         mongosh --apiVersion 1

   .. tab::
      :tabid: python

      .. literalinclude:: /driver-examples/test_examples.py
         :language: python
         :dedent: 8
         :start-after: Start Versioned API Example 3
         :end-before: End Versioned API Example 3

   .. tab::
      :tabid: php

      .. literalinclude:: /driver-examples/DocumentationExamplesTest.php
         :language: php
         :dedent: 8
         :start-after: Start Versioned API Example 3
         :end-before: End Versioned API Example 3

   .. tab::
      :tabid: c

      .. literalinclude:: /driver-examples/test-mongoc-sample-commands.c
         :language: c
         :dedent: 3
         :start-after: Start Versioned API Example 3
         :end-before: End Versioned API Example 3

   .. tab::
      :tabid: go

      .. literalinclude:: /driver-examples/go_examples.go
         :language: go
         :dedent: 0
         :start-after: Start Versioned API Example 3
         :end-before: End Versioned API Example 3
   
   .. tab::
      :tabid: csharp

      .. literalinclude:: /driver-examples/VersionedApiExamples.cs
         :language: csharp
         :dedent: 12
         :start-after: Start Versioned API Example 3
         :end-before: End Versioned API Example 3

   .. tab::
      :tabid: nodejs

      .. literalinclude:: /driver-examples/node_versioned_api.js
         :language: nodejs
         :dedent: 4
         :start-after: Start Versioned API Example 3
         :end-before: End Versioned API Example 3

Using this non-strict client allows you to run commands outside of the
Versioned API. For example, this non-strict client now allows you to 
use the :dbcommand:`count` command once again.

.. important:: 

   Commands and features outside of the Versioned API do not have the same 
   backward compatibility guarantees as versioned alternatives.

.. _api-v1-command-list:

API V1 Commands
---------------

API V1 protects you from API-breaking changes 
for the following commands:

- :dbcommand:`abortTransaction`
- :dbcommand:`aggregate`
- :dbcommand:`authenticate`
- :dbcommand:`collMod`
- :dbcommand:`commitTransaction`
- :dbcommand:`create`
- :dbcommand:`createIndexes`
- :dbcommand:`delete`
- :dbcommand:`drop`
- :dbcommand:`dropDatabase`
- :dbcommand:`dropIndexes`
- :dbcommand:`endSessions`
- :dbcommand:`explain`
- :dbcommand:`find`
- :dbcommand:`findAndModify`
- :dbcommand:`getMore`
- :dbcommand:`insert`
- :dbcommand:`hello`
- :dbcommand:`killCursors`
- :dbcommand:`listCollections`
- :dbcommand:`listDatabases`
- :dbcommand:`listIndexes`
- :dbcommand:`ping`
- :dbcommand:`refreshSessions`
- :dbcommand:`update`


Parameters
----------

You can specify the following optional parameters for Versioned API in 
your application's MongoDB driver connection code. Check the MongoDB 
driver documentation for the driver you use in your application for 
more information:

.. list-table::
   :widths: 30,30,40
   :header-rows: 1

   * - Parameter

     - Type

     - Description

   * - :ref:`apiVersion <api-version-desc>`

     - string

     - .. _api-version-desc:
       
       API Version. ``"1"`` is currently the only supported API Version.
       
       See :ref:`APIVersionError <api-vers-resp>`.
   
   * - :ref:`apiStrict <api-strict-desc>`

     - boolean 

     - .. _api-strict-desc: 
     
       If ``true``, your application can only use commands defined for 
       your specified :ref:`apiVersion <api-version-desc>`.     

       If not specified, defaults to ``false``. 

       See :ref:`APIStrictError <api-strict-resp>`.

   * - :ref:`apiDeprecationErrors <api-depr-desc>`

     - boolean

     - .. _api-depr-desc:
       
       If ``true``, your application errors if it invokes a command or 
       behavior that is deprecated in the specified 
       :ref:`apiVersion <api-version-desc>`.

       If not specified, defaults to ``false``. 
       
       See :ref:`APIDeprecationError <api-deprecation-resp>`.
       

Behavior
--------

Parameter Validation                         
~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 5.0, API V1 database commands raise an error if 
passed a parameter not explicitly accepted by the command. 

In MongoDB 4.4 and earlier, unrecognized parameters are silently 
ignored.

.. _api-error-responses:

API Error Responses
~~~~~~~~~~~~~~~~~~~

This table shows error responses for problematic Versioned API requests.

.. list-table::
   :widths: 25,75
   :header-rows: 1

   * - Server Response 

     - Request

   * - :ref:`APIDeprecationError <api-deprecation-resp>`

     - .. _api-deprecation-resp:

       Specifies ``{ apiDeprecationErrors: true }`` with 
       API version ``V`` and uses a behavior deprecated in ``V``.

   * - :ref:`APIStrictError <api-strict-resp>`
    
     - .. _api-strict-resp:

       Specifies ``{ apiStrict: true }`` with API version ``V``, 
       but uses a behavior not in version ``V``.

   * - :ref:`APIVersionError <api-vers-resp>`
  
     - .. _api-vers-resp:

       Specifies an :ref:`apiVersion <api-version-desc>` that the server 
       does not support.

   * - :ref:`InvalidOptions <api-invalid-opts-resp>`
       
     - .. _api-invalid-opts-resp:

       Specifies ``{ apiStrict: true }`` or 
       ``{ apiDeprecationErrors: true }`` but omits 
       :ref:`apiVersion <api-version-desc>`.
  

.. toctree::
   :titlesonly:
   :hidden:

   /reference/versioned-api-reference
