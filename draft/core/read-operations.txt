===============
Read Operations
===============

.. default-domain:: mongodb

Read operations determine how MongoDB returns collection data when you
issue a query. This document describes how MongoDB performs read
operations and how different factors affect the efficiency of reads.

.. index:: read operation; query
.. index:: query; read operations
.. _read-operations-query-operators:

Query Operations
----------------

Queries are the primary read operations in MongoDB.

.. _read-operations-query-syntax:

Query Syntax
~~~~~~~~~~~~

For a list of query operators, see :doc:`/reference/operators`.

.. TODO link to the yet-to-be created query operations doc

.. _read-operations-indexing:

Indexes
~~~~~~~

Indexes improve the efficiency of read operations by optimizing queries,
pre-sorting query results, and making it possible to store fewer
documents in memory.

The most selective indexes return the fastest results. The most
selective index possible for a given query is an index for which all the
documents that match the query criteria also match the entire query.

.. example::

   Given a collection with the following indexes, data, and query:

   Indexes:

   .. code-block:: javascript

      { x : 1 } , { y : 1 }

   Data:

   .. code-block:: javascript

      { x : 1 , y : 2 }
      { x : 2 , y : 1 }
      { x : 3 , y : 0 }
      { x : 4 , y : 0 }

   Query:

   .. code-block:: javascript

      db.foo.find( { x : { $gte : 1 } , y : { $gte : 1} } )

   The ``{ y : 1 }`` index is more selective because all the documents
   that match the query's ``y`` key value also match the entire query.
   Conversely, not all the documents that match the query's ``x`` key
   value also match the entire query.

.. seealso::

   - The :doc:`/indexes` documentation, in particular :doc:`/applications/indexes`
   - :doc:`/reference/operators`
   - :method:`find() <db.collection.find()>`
   - :method:`findOne() <findOne>`

.. index:: query optimizer
.. _read-operations-query-optimization:

Query Optimization
~~~~~~~~~~~~~~~~~~

The MongoDB query optimizer matches a query to the index that produces
the fastest results. The optimizer then uses the query plan each time
the query is run. If a collection changes significantly, the optimizer
creates a new query plan.

Query plans take advantage of MongoDB's indexing features. You should
always write indexes that use the same fields and that sort in the same
order as do your queries. For more information, see
:doc:`/applications/indexes`.

MongoDB creates a query plan as follows:

1. The query optimizer runs the query against several indexes at once in
   parallel.

#. The optimizer records matches in a single common buffer, as though
   the results all come from the same index.

#. If an index returns a result already returned by another index, the
   optimizer recognizes the duplication and skips the duplicate match.

#. The optimizer determines a "winning" index when either of
   the following occur:

   - The optimizer exhausts an index, which means that the index has
     provided the full result set. At this point, the optimizer stops
     querying.

   - The optimizer reaches 101 results. At this point, the optimizer
     chooses the plan that has provided the most results *first* and
     continues reading only from that plan. Note that another index
     might have provided all those results as duplicates but because the
     "winning" index provided the full result set first, it is more
     efficient.

#. The "winning" index becomes the index specified in the query plan.

To evaluate the optimizer's choice of query plan, run the query with the
:method:`explain() <cursor.explain()>` method and :method:`hint()
<cursor.hint()>` methods appended. Instead of returning query results,
this returns statistics about how the query runs. For example:

.. code-block:: javascript

   db.people.find( { name:"John"} ).explain().hint()

For details on the output, see :method:`explain() <cursor.explain()>`.

.. note::

   If you run :method:`explain() <cursor.explain()>` without including
   :method:`hint() <cursor.hint()>` the query optimizer re-evaluates
   the query and runs against multiple indexes before returning the query
   statistics.

Because your collections will likely change over time, the query
optimizer deletes a query plan and re-evaluates the indexes when any
of the following occur:

- The number of writes to the collection reaches 1,000.

- You run the :dbcommand:`reIndex() <reIndex>` command on the index.

- You restart :program:`mongod`.

When you re-evaluate a query, the optimizer displays the same results if
no data has changed, but the the results might appear in a different
order. This is because the optimizer retrieves the results from several
indexes at once during re-evaluation, and the order in which results
appear depends on the order in which indexes are arranged in the
parallel query operation.

.. _read-operations-projection:

Projection
~~~~~~~~~~

A projection specifies which field values to return for matching
documents. If you run a query *without* a projection, the query returns
all fields and values for matching documents. By narrowing the fields to
display, projections can minimize network and deserialization costs.

You specify a projection in the second document in a query:

.. code-block:: javascript

   db.foo.find( { <search values> } , { <projection> } )

.. example::

   Given the following small collection name ``foo``:

   .. code-block:: javascript

      { "_id" : 100 , x : 1 , y : 15 , z : 20 }
      { "_id" : 101 , x : 2 , y : 16 , z : 21 }
      { "_id" : 102 , x : 2 , y : 17 , z : 22 }
      { "_id" : 103 , x : 3 , y : 18 , z : 23 }

   To search for all documents where ``x`` is ``2`` but return only the
   ``z`` field, issue this query:

   .. code-block:: javascript

      db.foo.find( { x : 2 } , { z : 1 } )

   The query returns this result set:

   .. code-block:: javascript

      { "_id" : 101, "z" : 21 }
      { "_id" : 102, "z" : 22 }

   By default, the results include the ``_id`` field. To return ``z``
   *without* returning ``_id``, include ``_id : 0`` in the projection:

   .. code-block:: javascript

      db.foo.find( { x : 2 } , { z : 1 , _id : 0 } )

   The query returns this result set:

   .. code-block:: javascript

      { "z" : 21 }
      { "z" : 22 }

MongoDB also provides the following projection operators specific to
arrays. For documentation on each operator, click the operator name:

- :projection:`$elemMatch`

- :projection:`$slice`

.. _read-operations-aggregation:

Aggregation
~~~~~~~~~~~

When you run a query using aggregation, MongoDB performs summary,
grouping, or other operations on data before returning results. When you
run a query without aggregation, you retrieve data as it's stored in the
database; when you run with aggregation, you retrieve reframed data.

Beginning with MongoDB version 2.1, the primary way to perform
aggregation is through the aggregation framework, which processes data
through pipelines and returns data as a document stream specific to the
aggregation process.

For more information on the aggregation framework, including
descriptions of operators, see see :doc:`/applications/aggregation`.

In addition to the operators used by the aggregation framework, you can
use the following aggregation operators. For documentation on each
operator, click the operator name:

- :method:`count() <cursor.count()>`

- :dbcommand:`distinct() <distinct>`

- :method:`group()`

- :dbcommand:`mapReduce() <mapreduce>` (See also :wiki:`MapReduce`.)

.. index:: read operation; architecture
.. _read-operations-architecture:

Query Operators that Cannot Use Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some query operators cannot take advantage of indexes and require a
collection scan. When using these operators you can narrow the documents
scanned by combining the operator with another operator that does use an
index.

Operators that cannot use indexes include the following:

- :operator:`$nin`

- :operator:`$ne`

.. TODO Regular expressions queries also do not use an index.
.. TODO :method:`cursor.skip()` can cause paginating large numbers of docs

Architecture
------------

.. index:: read operation; connection pooling
.. index:: connection pooling; read operations
.. _read-operations-connection-pooling:

Connection Pooling
~~~~~~~~~~~~~~~~~~

.. TODO

Shard Clusters
~~~~~~~~~~~~~~

.. TODO

Replica Sets
~~~~~~~~~~~~

:term:`Replica sets <replica set>` use :term:`read preferences <read
preference>` to determine where and how to route read operations. By
default, MongoDB always reads data from a replica set's :term:`primary`.
You can modify that behavior by changing the :ref:`read preference mode
<replica-set-read-preference-modes>`.

For example, you can set the :ref:`read preference mode
<replica-set-read-preference-modes>` to allow reads from
:term:`secondaries <secondary>` when backing up data, or to block reads
entirely during a :ref:`failover <replica-set-failover>`.

If your database traffic is comprised mostly of read operations, then
using read preferences to distribute reads can improve read throughput.
The trade-off is that some reads might return stale data, as
secondaries always have some amount of lag.

For more information on choosing read preference modes, see
:ref:`replica-set-read-preference-modes`.
