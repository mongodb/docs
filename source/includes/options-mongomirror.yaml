program: mongomirror
name: uri
args: <connection string>
description: |
   .. versionadded:: MongoDB 3.4.7
   
   The URI connection string for the source replica set. As of version
   3.4.7, the ``--uri`` option can be used in place of the ``--host``
   option to connect to your replica set. For information
   on constructing a MongoDB URI connection string, see
   `Connection String URI Format <https://docs.mongodb.com/manual/reference/connection-string/>`_.
   
   Example:

   .. code-block:: none
   
      mongodb://root:<PASSWORD>@atlas-host1:27017,atlas-host2:27017,atlas-host3:27017/<DATABASE>?ssl=true&replicaSet=myAtlasRS&authSource=admin
directive: option
---
program: mongomirror
name: host
args: <host>
description: |
   The host information for the source replica set. Specify the replica
   set name and a seed list of the members, as in the following:

   .. code-block:: none

      <RSname>/<host1>:<port1>,<host2>:<port2>,<host3>:<port3>
optional: true
directive: option
---
program: mongomirror
name: username
args: <username>
description: |
  If the source replica set requires authentication, the name of a user
  in the source replica set with privileges to read any database,
  including the ``local`` database. A user with the :authrole:`backup` role provides
  the appropriate privileges. For details on the specific privileges
  required, see :ref:`source-rs-authorization`.
optional: true
directive: option
---
program: mongomirror
name: password
args: <password>
description: |
   Password for the user specified in ``--username``.
optional: true
directive: option
---
program: mongomirror
name: authenticationDatabase
args: <authenticationDatabase>
description: |
   The database in the source replica set where the user specified in
   ``--username`` was created.
optional: true
directive: option
---
program: mongomirror
name: authenticationMechanism
args: <authenticationMechanism>
description: |
   The authentication mechanism to use to authenticate the user to the
   source replica set.

   .. list-table::
      :header-rows: 1
      :widths: 20 40

      * - Value

        - Description

      * - :ref:`SCRAM-SHA-1 <authentication-scram-sha-1>`

        - `RFC 5802 <https://tools.ietf.org/html/rfc5802>`_ standard
          Salted Challenge Response Authentication Mechanism using the SHA1
          hash function.

      * - :ref:`MONGODB-CR <authentication-mongodb-cr>`

        - MongoDB challenge/response authentication.

      * - :ref:`MONGODB-X509 <security-auth-x509>`

        - MongoDB TLS/SSL certificate authentication.

      * - :ref:`GSSAPI <security-auth-kerberos>` (Kerberos)

        - External authentication using Kerberos. This mechanism is
          available only in `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise?jmp=docs>`_.

      * - :ref:`PLAIN <security-auth-ldap>` (LDAP SASL)

        - External authentication using LDAP. You can also use ``PLAIN``
          for authenticating in-database users. ``PLAIN`` transmits
          passwords in plain text. This mechanism is available only in
          `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise?jmp=docs>`_.
optional: true
directive: option
---
program: mongomirror
name: destination
args: <destination>
description: |

   The host information for the target Atlas replica set.

   Specify the replica set name and a seed list of the members, as in the
   following:

   .. code-block:: none

      <RSname>/<host1>:<port1>,<host2>:<port2>,<host3>:<port3>

directive: option
---
program: mongomirror
name: destinationUsername
args: <Atlas user name>
description: |
   Name of a MongoDB user in the Atlas cluster with privileges to
   read, write, and admin any database.
   A user with the |service| :ref:`admin role <add-mongodb-users>`
   provides the appropriate privileges. For details on the specific
   privileges required, see :ref:`destination-authorization`.
directive: option
---
program: mongomirror
name: destinationPassword
args: <password>
description: |
   Password of the MongoDB user specified in --destinationUsername.
directive: option
---
program: mongomirror
name: ssl
args: null
description: |
   Enables TLS/SSL encrypted connections to the source replica set.
optional: true
directive: option
---
program: mongomirror
name: sslPEMKeyFile
args: <file>
description: |
   The .pem file if the source replica set requires clients to present
   a certificate. The .pem file contains both the TLS/SSL certificate
   and key. Specify the file using relative or absolute paths.
optional: true
directive: option
---
program: mongomirror
name:  sslPEMKeyPassword
args: <value>
description: |
   Password to decrypt the certificate-key file specified in
   --sslPEMKeyFile. Use if the --sslPEMKeyFile is encrypted.
optional: true
directive: option
---
program: mongomirror
name:  sslCAFile
args: <file>
description: |
   The .pem file that contains the root certificate chain from the
   Certificate Authority(CA) for the source replica set. Specify the
   file using relative or absolute paths.
optional: true
directive: option
---
program: mongomirror
name:  sslCRLFile
args: <filename>
description: |
   The .pem file that contains the Certificate Revocation List for the source replica set. Specify
   the file using relative or absolute paths.
optional: true
directive: option
---
program: mongomirror
name: sslAllowInvalidHostnames
args: null
description: |
   Disables the validation of the hostnames in TLS/SSL certificates presented by the source replica set.
   Allows :program:`mongomirror` to connect to the source replica set if the
   hostname in the certificates does not match the specified hostname.
optional: true
directive: option
---
program: mongomirror
name: sslAllowInvalidCertificates
args: null
description : |
   Bypasses the validation checks for certificates presented by the source replica set and allows
   the use of invalid certificates. When using the
   ``--allowInvalidCertificates`` setting, MongoDB logs as a warning the
   use of the invalid certificate.
optional: true
directive: option
---
program: mongomirror
name: gssapiServiceName
args: <name>
description: |
   If the source replica set uses Kerberos authentication, the name of the service
   using GSSAPI/Kerberos. Only required if the service does not use the
   default name of ``mongodb``.

   This option is available only in MongoDB Enterprise.
optional: true
directive: option
---
program: mongomirror
name: gssapiHostName
args: <host>
description: |
   If the source replica set uses Kerberos authentication, the hostname of a service
   using GSSAPI/Kerberos. Only required if the hostname of a machine
   does not match the hostname resolved by DNS.

   This option is available only in MongoDB Enterprise.
optional: true
directive: option

---
program: mongomirror
name: readPreference
args: <read preference>
description: |
   Read preference that :program:`mongomirror` uses to read from the
   source replica set. Can specify read preference name, e.g.

   .. code-block:: sh

      mongomirror --readPreference primary  ...

   or as a JSON object; e.g.

   .. code-block:: sh

      mongomirror --readPreference '{mode: primary}' ...

optional: true
directive: option
---
program: mongomirror
name: writeConcern
args: <write concern>
description: |

  .. deprecated:: 0.2.3
     
     {{program}} always uses majority write concern.
directive: option
---
program: mongomirror
name: numParallelCollections
aliases: -j
default: 4
args: <num>
description: |
   The number of collections to copy and restore in parallel.
optional: true
directive: option
---
program: mongomirror
name: bypassDocumentValidation
args: null
description: |
   
   .. deprecated:: 0.2.3
      
      {{program}} always bypasses document validation.
directive: option
---
program: mongomirror
name: tailOnly
args: null
description: |
   Flag that indicates that mongomirror only tails the oplog; i.e.
   skips the initial sync phase.

optional: true
directive: option
---
program: mongomirror
name: bookmarkFile
args: <file>
default: "mongomirror.timestamp"
description: |

   Name of the oplog timestamp bookmark file. 

optional: true
directive: option
---
program: mongomirror
name: forceDump
args: null
description: |
   Flag that indicates that mongomirror resync all source collections,
   even if a nonempty bookmark file exists.
optional: true
directive: option
---
program: mongomirror
name: drop
args: null
description: |
   Flag that indicates that mongomirror should drop all but the
   ``system.*`` collections in the target cluster.

optional: true
directive: option
---
program: mongomirror
name: httpStatusPort
args: null
description: |

  Directs {{program}} to start an HTTP server on port ``8080``. You can
  retrieve the current status of {{program}} by issuing an HTTP ``GET`` request
  to ``http://localhost:8080``.
  
  When running with {{role}}, {{program}} does not exit when it encounters an
  error. Instead, it logs the error as normal and reports the error over HTTP.
  
  {{program}} returns a document in response to the HTTP request. The following
  example syntax represents all the possible output fields - the actual
  response may only return a subset of these fields. See the subsequent table
  for a description of the fields and when to expect them.
    
  .. code-block:: json
  
     {
        "stage" : "<stage Name>",
        "phase" : "<phase Name>",
        "details" : {
           "currentTimestamp" : "<BSON timestamp>",
           "latestTimestamp" : "<BSON timestamp>",
           "<namespace>" : {
              "complete" : <boolean>,
              "copiedBytes" : <integer>,
              "totalBytes" : <integer>,
              "createIndexes" : <integer>
           },
           ...
        },         
        "errorMessage" : "<error message>"
     }
     
  The following table describes each field and its possible values:
    
  .. list-table::
     :header-rows: 1
     :widths: 40 60
     
     * - Field
       - Description
       
     * - ``stage``
       - The name of the stage in progress. Possible values are:
         
         - ``initializing``
         
           {{program}} has started but is not yet copying 
           any data.
         - ``initial sync``
         
           {{program}} is copying documents and indexes that
           already exist on the source deployment. {{program}} also tails and
           applies entries from the oplog.
         - ``oplog sync``
         
           {{program}} is tailing and applying entries from 
           the oplog.
     * - ``phase``
       - The name of the phase. Provides more specific details about what part 
         of the ``stage`` is in progress.
     * - ``details``
       - A document providing a detailed description of the progress of the 
         current phase. 
         
         During the ``initial sync`` stage, each subdocument in ``details``
         represents a single collection being copied by {{program}}.
         
         Depending on the ``stage`` or ``phase``, {{program}} may not include
         this field in the response.
         
     * - ``details.<namespace>``
       - The full namespace of the collection being copied, displayed as 
         ``<database>.<collection>``.
         
         Only displays during the ``initial sync`` phase when copying
         documents or indexes.
         
     * - ``details.<namespace>.complete``
       - Displays ``true`` or ``false`` depending on whether or not
         {{program}} has copied all documents or indexes from the collection
         to the target |service| cluster.
         
         Only displays during the ``initial sync`` phase when copying
         documents or indexes.
         
     * - ``details.<namespace>.copiedBytes``
       - The number of bytes copied so far. Note that this is a different 
         measurement from the {{program}} logs, which report the current/total 
         number of *documents* copied.
         
         Only displays during the ``initial sync`` phase when copying
         non-index data.
         
     * - ``details.<namespace>.totalBytes``
       - The total size (in bytes) of the collection.
         
         Only displays during the ``initial sync`` phase when copying
         non-index data.
         
     * - ``details.<namespace>.createIndexes``
       - The number of indexes that have been or will be created.
       
         Only displays during the ``initial sync`` stage when copying
         indexes.
         
     * - ``details.currentTimestamp``
       - The BSON timestamp value of the oplog entry most recently processed.
         {{program}} only refreshes this data point every 10 seconds, so
         {{program}} may be slightly further ahead of the reported time.
         
         Only displays during the ``initial sync`` or ``oplog sync``
         stages when tailing or applying oplog entries.
         
     * - ``details.latestTimestamp``
       - During the ``initial sync`` stage, this represents the BSON timestamp
         value of the latest oplog entry available after the initial data was
         copied during initial sync.

         During the ``oplog sync`` stage, this represents the BSON timestamp
         value of the latest oplog entry available on the source deployment.
         
         Only displays during the ``initial sync`` or ``oplog sync`` stages
         when tailing or applying oplog entries.
       
     * - ``errorMessage``
       - A string that describes any error encountered by {{program}}.
optional: true
directive: option
...
