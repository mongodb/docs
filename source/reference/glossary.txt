========
Glossary
========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. glossary::
   :sorted:

   agent
      A lightweight program that provides an interface between your MongoDB
      processes and |mms|.


   agent API key
      A unique identifier that authenticates a project's
      :term:`MongoDB Agents <MongoDB Agent>` to |mms|. A project can have
      multiple agent |api| keys.

      .. seealso::

         :doc:`/tutorial/manage-agent-api-key`

   application database
      The dedicated set of MongoDB databases that store metadata for the
      |onprem| installation and the managed MongoDB deployments.

      .. seealso::

         :ref:`mms-application-database`

   authentication mechanism
      A method to enable access to a MongoDB database. This is separate
      from authorization, which grants you permission to use certain
      actions on a MongoDB database.

      .. seealso::

         :doc:`/tutorial/edit-host-authentication-credentials`

   automation
      The assisted management of MongoDB processes through the |mms|
      interface. The :term:`MongoDB Agents <MongoDB Agent>` installed on
      your MongoDB hosts allow you to deploy, configure, and update
      MongoDB processes directly from |mms|.

      .. seealso::

         :ref:`automation`

   Automation Agent
      The lightweight component that had automated common management
      tasks. The Automation Agent runs on every server that ran a
      :manual:`mongod </reference/program/mongod/#mongodb-binary-bin.mongod>` or :manual:`mongos </reference/program/mongos/#mongodb-binary-bin.mongos>`.

      .. note::

         This has been replaced with the :term:`MongoDB Agent`.


   backing databases
      The collective term for the sets of MongoDB databases that support an
      |onprem| deployment: the :term:`application database` and the
      :term:`backup database(s) <Backup Database>`.

      .. seealso::

         :doc:`/tutorial/prepare-backing-mongodb-instances`

   Backup Agent
      The lightweight component that had run within your data center and
      backed up MongoDB processes via the MongoDB wire protocol. No direct
      file system access was needed.

      .. note::

         This has been replaced with the :term:`MongoDB Agent`.


   Backup Database
      The set of databases where onprem stores backup data. This
      includes the :term:`Oplog Store Database` and any
      :term:`backup blockstore database` or :opsmgr:`S3 Snapshot Store </reference/glossary/#std-term-S3-Snapshot-Store>`
      metadata database deployed.

      .. seealso::

         - :ref:`backup-database`
         - :doc:`/core/backup-overview`


   backup blockstore database
      The database that stores your :manual:`snapshots </reference/glossary/#std-term-snapshot>`. The
      database is also referred to simply as the *blockstore.* The
      blockstore uses a storage format that parses a snapshot into
      :term:`smaller chunks <block>` that allow |onprem| to manage snapshot
      changes. You can administer blockstores from the
      :ref:`blockstores-page`. The blockstore is one type of
      :term:`Backup Database`.


   backup cursor
      A :manual:`tailable cursor </core/tailable-cursors>` pointing to a list of
      backup files. Starting with FCV 4.2, |onprem| uses
      :manual:`backup cursors </reference/glossary/#std-term-backup-cursor>` instead of 
      :opsmgr:`head databases </reference/glossary/#std-term-head-database>`.


   Backup Daemon
      A required headless service to the |mms| Application that is
      responsible for backup :term:`snapshot` maintenance work, such as
      a :term:`groom` and managing file system snapshot files on the
      :term:`file system store <File System Store>`

      While we no longer use a :term:`head database` for backup
      snapshots, Backup Daemons are still a required component for
      |mms| backups and :term:`queryable backup` to function.

      .. seealso::

         :ref:`backup-daemon`

   backup job
      The |onprem| process that backs up MongoDB deployments.
      
      For FCV 4.0 and earlier, the :opsmgr:`Backup Daemon </reference/glossary/#std-term-backup-daemon>` stores backups 
      locally as :opsmgr:`head databases </reference/glossary/#std-term-head-database>`. A sharded cluster 
      will have a different head database for each shard. 

      For FCV 4.2 and later, the WiredTiger storage engine takes snapshots
      of your deployment using :manual:`backup cursors </reference/glossary/#std-term-backup-cursor>` to 
      allow point-in-time copying of the WiredTiger files. Applications 
      can continue read and write operations on the database while 
      WiredTiger takes the snapshot.

      You can re-assign backup jobs among Backup Daemons.

      .. seealso::

         :ref:`jobs-page`

   batch
      The collection of jobs needed to restore a :manual:`sharded cluster </reference/glossary/#std-term-sharded-cluster>`:
      one job for each shard and one job for the :manual:`config server </reference/glossary/#std-term-config-server>`.

      Replica set restore jobs do not use batches.


   block
      A MongoDB document that stores the compressed contents of a 64 KB to
      16 MB slice of the data and metadata of a file included in a
      snapshot. In dividing the snapshot, |onprem| can back up data block
      by block instead of writing whole new copies of a snapshot.


   blockstore
      .. seealso::

         :term:`backup blockstore database`

   checkpoint
      A point in time between snapshots to which you can restore a sharded
      cluster. |mms| must stop the :term:`balancer` each time it creates a
      checkpoint. |mms| doesn't require checkpoints and disables
      checkpoints by default.

      .. include:: /includes/admonitions/important/checkpoints-fcv-4-0-only.rst

      .. seealso::

         :ref:`checkpoint`

   conf call
      A request from a :term:`MongoDB Agent` to |onprem| to get the latest
      configuration for that Agent's project including the nodes to which
      the Agent connects and what data to back up.


   cluster
      In |mms|, *cluster* can refer to either a :manual:`replica set </reference/glossary/#std-term-replica-set>` or
      :manual:`sharded cluster </reference/glossary/#std-term-sharded-cluster>`.


   custom snapshot
      A backup of the state of your MongoDB deployment at a point in time
      between :manual:`stored snapshots </reference/glossary/#std-term-snapshot>`. |mms| builds a custom
      snapshot by applying oplog data to a stored snapshot.

      .. seealso::

         :doc:`/tutorial/nav/restore-overview`

   deduplication
      A process that eliminates redundant data. This data can be additional
      copies of database or file system documents or redundant data within
      those documents at the block level when written to a storage medium
      like spinning or solid state disks. Only unique documents or blocks
      are written to a storage medium. This process usually applies to
      backups or data archiving.

      .. example::

         Each recipient in an email system may have their own copy of an
         email sent to the whole company. With deduplication, all copies of
         this except one are replaced with pointers to a single stored copy
         before backing up the email system. This effectively reduces the
         amount of storage capacity needed to back up this one email by 99
         percent.


   deployment
      Usually refers to all the MongoDB processes that run within |a-mms|
      :opsmgr:`project </reference/glossary/#std-term-project>`. *Deployment* can also refer to a specific set of
      MongoDB processes, such as a specific :manual:`sharded cluster </reference/glossary/#std-term-sharded-cluster>` or
      :manual:`replica set </reference/glossary/#std-term-replica-set>`.


   dirty bytes
      Data that has been updated in the WiredTiger cache but not flushed to
      disk.


   excluded namespace
      A database or collection that |mms| will not back up, as designated
      by its :term:`namespace`.

      .. seealso::

         :ref:`namespaces-filter`

   File System Store
      A directory on a server that stores your database backup
      :manual:`snapshots </reference/glossary/#std-term-snapshot>` as files. You can administer file system
      storage from the :ref:`blockstores-page`.


   groom
      A job that removes unused blocks on a :opsmgr:`blockstore </reference/glossary/#std-term-backup-blockstore-database>` and that can
      move blocks from one blockstore to another. You can view and manage
      grooms from :ref:`grooms-page` and :ref:`groom-priority-page`.


   group
      A distinct set of MongoDB processes and |mms| users. Synonymous with
      :opsmgr:`project </reference/glossary/#std-term-project>`.

      .. seealso::

         :doc:`/tutorial/manage-projects`

   head
      .. seealso::

         :opsmgr:`head database </reference/glossary/#std-term-head-database>`

   head database
      The copy of a backed-up deployment stored on the
      :opsmgr:`Backup Daemon's </reference/glossary/#std-term-Backup-Daemon>` server. The daemon maintains
      a :opsmgr:`head database </reference/glossary/#std-term-head-database>` for each :manual:`shard </reference/glossary/#std-term-shard>` or
      :manual:`replica set </reference/glossary/#std-term-replica-set>` it backs up and creates periodic
      :manual:`snapshots </reference/glossary/#std-term-snapshot>`. The Daemon stores the head databases
      in the :term:`head directory`.

      Starting with FCV 4.2, onprem uses
      :manual:`backup cursors </reference/glossary/#std-term-backup-cursor>` instead of 
      :opsmgr:`head databases </reference/glossary/#std-term-head-database>`.


   head directory
      The dedicated disk partition on the
      :opsmgr:`Backup Daemon's </reference/glossary/#std-term-Backup-Daemon>` host where the Backup Daemon
      stores the :opsmgr:`head databases </reference/glossary/#std-term-head-database>`. The daemon writes
      to this directory as the ``mongodb-mms`` user.


   host
      A physical machine, virtual machine, or container that serves one or
      more MongoDB processes.


   initial sync
      The MongoDB operation that replicates data from an existing
      :manual:`replica set </reference/glossary/#std-term-replica-set>` member to a new member. |mms| uses initial sync
      when creating a new :opsmgr:`head database </reference/glossary/#std-term-head-database>`.

      .. seealso::

         - :ref:`backup-initial-sync`
         - :manual:`Replica Set Data Synchronization
           </core/replica-set-sync>` in the MongoDB manual


   job
      See :term:`backup job`.


   link-token
      A string that contains the information necessary to connect from
      |mms| to |service-short| during a Live Migration from an |mms| deployment
      to a deployment in |service-short|.
      
      When you are ready to live migrate data from an
      |mms| deployment, you generate a link-token in |service-short|
      and then enter it in your |mms| organization's settings. You use the
      same link-token to migrate each deployment in your |mms|
      organization sequentially, one at a time.
      
      You can generate multiple link-tokens in |service-short|. Use
      one unique link-token for each |mms| organization.

      .. seealso::
      
         - :ref:`lm-workflow`
         - :doc:`/tutorial/migrate-to-atlas`


   migration host
      A dedicated server with its own specially-configured {+mdbagent-lm+}.
      You run the Live Migration (push) process on the migration host to migrate
      your MongoDB deployment to |service-short|.

      .. seealso::
      
         - :doc:`/tutorial/provision-migration-host`
         - :doc:`/tutorial/migrate-to-atlas`


   MongoDB Agent
      A lightweight :term:`agent` that can monitor, manage, and back up
      your MongoDB databases.

      .. seealso::

         :doc:`/tutorial/nav/mongodb-agent`


   monitoring
      The real-time reporting, visualization, and alerting of the state of
      your MongoDB processes.

      .. seealso::

         :ref:`monitoring-functional-overview`

   Monitoring Agent
      The lightweight component that had run within your data center and
      monitored your MongoDB processes via the MongoDB wire protocol. No
      direct file system access was needed.

      .. note::

         This has been replaced with the :term:`MongoDB Agent`.


   namespace
      The combination of the database name and collection name:

      .. code-block:: javascript

         "database-name.collection-name"


   oplog slice
      A compressed batch of entries for the tailed :manual:`oplog </reference/glossary/#std-term-oplog>` of a
      backed-up shard or replica set. The :term:`MongoDB Agent` creates an
      oplog slice and sends it to |mms|, which stores it in the
      :term:`Oplog Store Database`.

      For FCV 4.0 and earlier, the :opsmgr:`Backup Daemon </reference/glossary/#std-term-backup-daemon>` retrieves the 
      slice and applies it to the associated :opsmgr:`head database </reference/glossary/#std-term-head-database>`.

      For FCV 4.2 and later, onprem retrieves the slice and stores it
      in the :term:`Oplog Store Database`.

      .. seealso::

         :ref:`oplog-stores-page`

   Oplog Store Database
      The database where |onprem| stores :term:`oplog slices <oplog slice>`
      before applying them to a deployment's backup.

      .. seealso::

         :ref:`oplog-stores-page`

   Ops Manager Application
      The main |onprem| component. The application provides the user
      interface for managing MongoDB deployments and provides endpoints for
      :term:`MongoDB Agents <MongoDB Agent>` to transmit data.

      .. seealso::

         :ref:`mms-application-package`

   Ops Manager HTTP Service
      The interface through which the :term:`MongoDB Agent` communicates
      with |onprem|.

      .. seealso::

         :ref:`mms-http-service`

   ping
      A data transmission that the :term:`MongoDB Agent` sends to |mms| to
      confirm that the Agent and its MongoDB processes are running and
      reachable.


   point-in-time restore
      A database restoration that captures the state of your data at a
      moment in-between :manual:`snapshots </reference/glossary/#std-term-snapshot>`. Point-in-time
      restores take longer to perform than snapshot restores.

      .. seealso::

         :doc:`/tutorial/nav/restore-overview`

   process
      An instance of MongoDB running on a given host and port. The MongoDB
      database process is :manual:`mongod </reference/program/mongod/#mongodb-binary-bin.mongod>`. MongoDB also uses the
      :manual:`mongos </reference/program/mongos/#mongodb-binary-bin.mongos>` process to route operations in the
      :manual:`sharded clusters </reference/glossary/#std-term-sharded-cluster>`.

      .. seealso::

         :manual:`MongoDB Package Components </reference/program>`

   project
      A distinct set of MongoDB processes and |mms| users. Synonymous with
      :opsmgr:`group </reference/glossary/#std-term-group>`.

      .. seealso::

         :doc:`/tutorial/manage-projects`

   Public API key
      A unique identifier that authenticates |a-mms| user through the
      :doc:`{+admin-api+} </core/api>`. The key belongs to 
      the user, as opposed to the :opsmgr:`agent API key </reference/glossary/#std-term-agent-api-key>`, which belongs to 
      the project.


   queryable backup
      A feature provided by |mms| in which |mms| quickly and securely makes
      a given snapshot accessible over a MongoDB connection string. You can
      use the connection string with standard MongoDB tools such as
      {+mongosh+} or mongodump to access the snapshot for read-only
      operations.

      Queryable backups start up quickly regardless of the snapshot's total
      data size. They are uniquely useful for restoring a small subset of
      data, such as a document that was accidentally deleted, or reading
      out a single collection with mongodump.

      .. seealso::

         :doc:`/tutorial/query-backup/`

   Recovery Point Objective
      The maximum tolerable age of backup files that must be recovered from
      storage for normal operations to resume after a failure or disaster
      occurs.


   Recovery Time Objective
      The maximum tolerable length of time that a system can be offline
      after a failure or disaster occurs.


   role
      The permissions granted to |a-mms| or MongoDB user.

      .. seealso::

         - :doc:`/reference/user-roles` for |mms| user roles
         - :manual:`Built-in Roles </reference/built-in-roles>` in the
           MongoDB manual for MongoDB user roles

   rolling restart
      A technique used to maintain cluster availability during maintenance 
      periods by updating nodes in a replica set one-by-one, always
      maintaining a primary node, until all nodes are updated.

      .. seealso::

         :ref:`rolling-restart-faq`

   S3 Snapshot Store
      An s3 bucket in aws that stores your database backup
      :manual:`snapshots </reference/glossary/#std-term-snapshot>` as blocks. You can administer s3
      blockstore storage from the :ref:`blockstores-page`.

      .. seealso::

         :doc:`/tutorial/manage-s3-blockstore-storage`

   server
      A physical or virtual machine that serves one or more MongoDB
      processes.


   snapshot
      Single backup of your data that |onprem| captures at a specific
      interval and stores as a snapshot in one of the following locations:

      - :term:`blockstore <backup blockstore database>`
      - :opsmgr:`file system stores </reference/glossary/#std-term-File-System-Store>`
      - :opsmgr:`S3 snapshot stores  </reference/glossary/#std-term-S3-Snapshot-Store>`

      |onprem| creates snapshots in different ways depending on the
      fcv-link of the MongoDB database:

      - For fcv-link 4.0 or earlier, |onprem| created snapshots from database copies kept on :opsmgr:`head databases </reference/glossary/#std-term-head-database>`.
      - For fcv-link 4.2 or later, |onprem| creates snapshots from :manual:`secondaries </reference/glossary/#std-term-secondary>`.

      The :ref:`snapshot-frequency-and-retention` determines the interval
      for taking snapshots and how long to store them.

      .. seealso::

         - :doc:`/core/backup-overview`
         - :term:`custom snapshot`


   snapshot frequency and retention policy
      The schedule for how often to take :manual:`snapshots </reference/glossary/#std-term-snapshot>` and
      how long to store them.

      .. seealso::

         :ref:`snapshot-frequency-and-retention`

   snapshot store
      The location where your :manual:`snapshots </reference/glossary/#std-term-snapshot>` are stored.
      There are multiple types of snapshot stores, including:

      - :opsmgr:`file system stores </reference/glossary/#std-term-File-System-Store>`
      - :term:`Blockstores <backup blockstore database>`
      - :opsmgr:`S3 snapshot stores  </reference/glossary/#std-term-S3-Snapshot-Store>`


   storage engine
      The database storage engine manages how data is stored on disk.
      MongoDB versions 3.0 and later offer multiple storage engines.

      .. seealso::

         - :manual:`Storage </core/storage>`
         - :manual:`MongoDB Storage FAQ </faq/storage>` in the MongoDB
           manual


   sync store
      During :opsmgr:`initial sync </reference/glossary/#std-term-initial-sync>` of a backed-up deployment, |onprem|
      briefly stores slices of the backed-up deployment in a temporary sync
      store on the :term:`Oplog Store Database`. |onprem| uses the storage
      while streaming slices to the Backup Daemon.


   version manifest
      List of all released MongoDB versions that a particular version of
      |onprem| supports. |onprem| uses this list if running in
      :doc:`local mode </tutorial/configure-local-mode>`.

