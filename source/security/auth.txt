.. _scala-auth:

=========================
Authentication Mechanisms
=========================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, verify, AWS, Kerberos

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The {+driver-short+} supports all MongoDB authentication mechanisms,
including those available only in the MongoDB Enterprise Edition.

MongoCredential
---------------

An authentication credential is represented as an instance of the
``MongoCredential`` class. The ``MongoCredential`` class includes
static factory methods for each of the supported authentication
mechanisms.

Default Authentication Mechanism
--------------------------------

The default authentication mechanism for MongoDB 6.0 and later is
``SCRAM-SHA-256``.

To create a credential that authenticates by using the default
authentication mechanism, regardless of server version, create a
credential by using the ``createCredential()`` static factory method:

.. literalinclude:: /includes/security/auth.scala
   :start-after: start-default
   :end-before: end-default
   :language: scala
   :copyable:
   :dedent:

Or, you can use a connection string without explicitly specifying the
authentication mechanism:

.. literalinclude:: /includes/security/auth.scala
   :start-after: start-default-connection-string
   :end-before: end-default-connection-string
   :language: scala
   :copyable:
   :dedent:

SCRAM-Based Mechanisms
----------------------

Salted Challenge-Response Authentication Mechanism (``SCRAM``) has been
the default authentication mechanism for MongoDB since 3.0. ``SCRAM`` is
based on the `IETF RFC 5802
<https://datatracker.ietf.org/doc/html/rfc5802>`__ standard that defines
best practices for implementation of challenge-response mechanisms for authenticating
users with passwords.

SCRAM-SHA-256
~~~~~~~~~~~~~

Using this mechanism requires ``featureCompatibilityVersion`` to be set to 4.0 
or a later version.

To explicitly create a credential of type ``SCRAM-SHA-256``, use
the ``createScramSha256Credential()`` method:

.. literalinclude:: /includes/security/auth.scala
   :start-after: start-scram-sha-256
   :end-before: end-scram-sha-256
   :language: scala
   :copyable:
   :dedent:

Or, you can use a connection string that explicitly specifies
``authMechanism=SCRAM-SHA-256``:

.. literalinclude:: /includes/security/auth.scala
   :start-after: start-scram-sha-256-connection-string
   :end-before: end-scram-sha-256-connection-string
   :language: scala
   :copyable:
   :dedent:

x.509
-----

With the x.509 mechanism, MongoDB uses the x.509 certificate presented
during SSL negotiation to authenticate a user whose name is derived
from the distinguished name of the x.509 certificate.

x.509 authentication requires the use of SSL connections with
certificate validation. To create a credential of this type use the
``createMongoX509Credential()`` static factory method:

.. literalinclude:: /includes/security/auth.scala
   :start-after: start-mongodb-x509
   :end-before: end-mongodb-x509
   :language: scala
   :copyable:
   :dedent:

Or, you can use a connection string that explicitly specifies
``authMechanism=MONGODB-X509``:

.. literalinclude:: /includes/security/auth.scala
   :start-after: start-mongodb-x509-connection-string
   :end-before: end-mongodb-x509-connection-string
   :language: scala
   :copyable:
   :dedent:

See the :manual:`Use x.509 Certificates to Authenticate Clients </tutorial/configure-x509-client-authentication/>`
tutorial in the Server manual to learn more about using x.509 certificates in your
application.
