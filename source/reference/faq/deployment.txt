===============
FAQ: Deployment
===============

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

|service-fullname| or |mms-full|?
---------------------------------

|service| offers a managed and simplified experience. |service| users
have access to a curated selection of configuration and infrastructure
options. The available |service| configuration and infrastructure
options may not provide the flexibility that some users require. For
example, |service| requires |tls| for cluster connectivity and does not
surface options for disabling |tls|. |service| suits users who want
fewer moving parts to manage, enabling developers and database
administrators to be more productive.

|mms-full| offers more control by exposing more configuration options
on the infrastructure of your choice. |mms| users have access to
advanced operations and a higher level of control, but must manage the
full lifecycle of their infrastructure. |mms| is best suited for users
who require a higher level of control over their MongoDB clusters.

For guidance on which MongoDB service best suits the needs of your
organization,
:contact:`contact MongoDB Support </atlas?tck=docs_atlas>`.

Can I bring an existing MongoDB deployment into |service-fullname| for management?
----------------------------------------------------------------------------------

No. However, you can upload data from existing MongoDB deployment into
|service-fullname|.

You can use live migration in the {+atlas-ui+} to live migrate data from
a source replica set or sharded {+cluster+} to an |service| {+cluster+}.
To choose an import strategy, see :ref:`import-strategies`.

You can also write scripts using official MongoDB supported drivers to
upload data.

Can I migrate between regions?
------------------------------

Yes. You can change one or more regions for a given cluster within the
original cloud service provider or across different cloud service providers. 
MongoDB |service| uses a rolling-migration strategy for moving nodes from the 
original region to a new region to preserve cluster availability.

.. important:: AWS Only

   Amazon Web Services (AWS) Virtual Private Cloud (VPC) peering
   connections are region-specific. Clusters utilizing an existing
   |vpc| peering connection to an |aws| |vpc| in a given |aws| region
   lose access to that peering connection if moved to a different |aws|
   region. The moved cluster may use an existing peering connection in
   the new region. 

   To learn more, see :doc:`/security-vpc-peering`.

If you need to migrate data between regions on different cloud service
providers, you can:

- :ref:`Modify the cluster configuration form <edit-cluster-atlas>` in the |service| UI by changing the cloud providers and region for each cluster whose data you are migrating. The migration rolls cluster by cluster, starting from the secondary nodes.

- :ref:`Migrate using the multi-cloud/multi-region option <create-cluster-multi-region>`. This method minimizes the risk of issues related to cloud provider capacity, but can result in higher :ref:`data transfer costs <data-transfer-costs>`.

- :doc:`Perform live migration </import/live-import>`.

- :doc:`Migrate using mongomirror </import/mongomirror>`.

- :doc:`Seed the destination cluster using mongorestore </import/mongorestore>`.

- :doc:`Restore a backup from the source cluster to the destination cluster </import/mongorestore>`.

.. warning::

   - When you transition to a new cloud provider, your deployment IP addresses change.
   - Data migration interrupts VPC peering and private endpoint operation. You must reconfigure these after completing migration.
   - Adding or moving a node to a new region or cloud provider without a primary or secondary node 
     requires each newly migrated replica set member to perform an :manual:`initial sync </core/replica-set-sync>`.
   - If you created an |service| cluster on {+gcp+} or {+azure+} before November 2, 2020 when |service| added support for 
     multi-cloud clusters, changing to a different provider changes the connection string to your new cluster. Consider 
     scheduling a time to :ref:`update your applications with the new connection string <tenant-to-tenant>` to connect to the cluster again.

.. seealso:: 
   
   :ref:`import-strategies`

Does |service| support cross-region deployments?
------------------------------------------------

Yes. You can specify additional regions for high availability or local
reads when :doc:`creating </tutorial/create-new-cluster>` or
:doc:`scaling </scale-cluster>` a deployment.

|service| supports cross-cloud service provider deployments. To learn
more, see :ref:`Electable Nodes for High Availability <deploy-across-multiple-regions>`.

What AWS regions does |service| support?
----------------------------------------

|service| supports all |aws| regions other than those in China and
`US GovCloud <https://aws.amazon.com/govcloud-us/>`__. To learn more,
see :doc:`/reference/amazon-aws`.

.. _can-i-pause-or-stop-cluster:

Can I pause or stop my |service| clusters?
------------------------------------------

You can :ref:`pause <pause-cluster>` an ``M10+`` paid cluster for up to
30 days at a time. |service| automatically resumes the cluster after 30 days.

.. _can-i-pre-split-chunks:

Can I pre-split chunks in a |service| sharded cluster?
------------------------------------------------------

The :atlasrole:`Atlas admin` database user role has the necessary
privileges to pre-split chunks in an empty sharded collection.

To learn more about sharded cluster chunk creation and management, see
:manual:`Create Chunks in a Sharded Cluster </tutorial/create-chunks-in-sharded-cluster>`.

.. _can-i-deploy-more-than-24-shards:
.. _can-i-deploy-more-than-50-shards:

Can |service-fullname| deploy clusters with more than 50 shards?
----------------------------------------------------------------

Yes, |service-fullname| allows selection of up to 70 shards. If you're
interested in more than 70 shards, contact |mdb-support|.

.. _high-availability:

How does |service-fullname| deliver high availability?
------------------------------------------------------

|service| clusters use replication capability of MongoDB to deliver high
availability. All |service| clusters are either replica sets or sharded
clusters where each shard is a replica set. To learn more about
MongoDB replica sets and replication, see :manual:`Replication
</replication>`.

|service| uses a rolling upgrade strategy for executing maintenance or
infrastructure operations, such as applying security patches or scaling up
|a-service| cluster. The rolling upgrade strategy ensures that the cluster
can process reads and writes for the majority of the maintenance or
infrastructure operation. During the rolling upgrade procedure:

- |service| applies the changes to each secondary node in the cluster.
- |service| directs the primary node to step down to the secondary
  state and trigger an election of a new primary.
- Once the cluster has a new primary, |service| applies the changes to
  the former primary node.

Applications must hold write operations while the cluster elects a new
primary. The cluster can continue to process
:manual:`secondary read operations </core/read-preference>` during this
period. Elections on |service| clusters typically complete within a few
seconds. Factors such as network latency may extend the time required for
replica set elections to complete, which in turn affects the amount of time
your cluster may operate without a primary. These factors are dependent
on your particular cluster architecture.

You can enable retryable writes by adding :manual:`retryWrites=true
</reference/connection-string/#urioption.retryWrites>` to your |service|
URI connection string. To learn more, see :manual:`Retryable Writes
</core/retryable-writes/>`.

For ``M10+`` clusters, |service| provides a :doc:`Test Primary Failover
</tutorial/test-resilience/test-primary-failover>` feature that allows
you to check that your applications can detect and react to a replica
set election. By designing applications that can seamlessly handle a
replica set election, you no longer have to worry about the underlying
maintenance occurring on your clusters.

|service| maintenance operations include OS patches and maintenance patches
for the MongoDB database itself. Infrastructure operations include repair
operations required to replace faulty infrastructure, and scheduled
infrastructure replacements, such as changing the cluster tier.

:contact:`Contact MongoDB Support </atlas?tck=docs_atlas>` for help with
architecting your application to use |service-fullname| with optimal
availability.

.. _analytics-nodes-overview:

What are Analytics Nodes?
-------------------------

*Available on M10+ clusters.*

Analytics nodes are specialized read-only nodes used to isolate
queries which you do not want to affect your operational workload.
They are useful for handling analytic data such as reporting queries
executed by :abbr:`BI (Business Intelligence)` tools.

Analytics nodes and :ref:`read-only nodes <deploy-read-only-replicas>`
are configured with distinct
:ref:`replica set tags <replica-set-tags>` that allow you to direct
queries to desired node types and regions. For details on the
pre-defined replica set tags implemented by |service|, see
:ref:`Atlas Replica Set Tags <replica-set-tags>`.

You can have up to 50 total nodes on a multi-region cluster.
Within that :manual:`limit </reference/limits/#Number-of-Members-of-a-Replica-Set>`
there's no maximum number of analytics nodes.

Analytics nodes cannot contribute to a cluster's availability because
they cannot participate in :term:`elections <election>`, or become the
:term:`primary` for their cluster.

.. _another-disk-storage-change-request:

Why can't I submit another disk storage change request?
-------------------------------------------------------

If you recently submitted a disk storage change request, |aws| requires
you to wait 6 hours and for the first request to complete before
submitting another disk change request.

.. _migrate-from-one-cloud-provider-to-another:

How can I migrate my |service| cluster from one cloud provider to another?
--------------------------------------------------------------------------

If you use public IPs to connect to the |service| cluster from your 
application, you can switch to a different cloud provider most efficiently 
by modifying the cluster on the {+atlas-ui+}. Provided that your application is 
resilient to failovers, this should migrate your cluster successfully. 

However, if your application is connecting to the |service| cluster 
through :ref:`VPC peering <vpc-peering>` or PrivateLink, the peering or 
the PrivateLink connection between your application and the cluster breaks 
after the cluster migrates to a different cloud provider. Because of 
this, you need to consider how your application connects to your cluster 
after it is migrated to the new cloud provider. Please consult your 
application's network administrator for additional advice or 
:ref:`contact support <request-support>`. 