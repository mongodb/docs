.. index:: index; hashed
.. _index-type-hashed:
.. _index-hashed-index:

==============
Hashed Indexes
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Hashed indexes maintain entries with hashes of the values of the
indexed field. 

Hashed indexes support :doc:`sharding </sharding>`
using hashed shard keys. :ref:`Hashed based sharding
<sharding-hashed-sharding>` uses a hashed index of a field as the shard
key to partition data across your sharded cluster.

Using a hashed shard key to shard a collection results in a more random
distribution of data. See :ref:`sharding-hashed-sharding` for more
details.

Hashing Function
----------------

Hashed indexes use a hashing function to compute the hash of the value
of the index field. [#hashvalue]_ The hashing function collapses
embedded documents and computes the hash for the entire value but does
not support multi-key (i.e. arrays) indexes. Specifically, creating a
hashed index on a field that contains an array *or* attempting to insert
an array into a hashed indexed field returns an error.

.. include:: /includes/tip-applications-do-not-need-to-compute-hashes.rst

.. [#hashvalue]
   Starting in version 4.0, the :binary:`~bin.mongo` shell provides the
   method :method:`convertShardKeyToHashed()`. This method uses the
   same hashing function as the hashed index and can be used to see
   what the hashed value would be for a key.

Create a Hashed Index
---------------------

To create a :ref:`hashed index <index-type-hashed>`, specify
``hashed`` as the value of the index key, as in the following
example:

.. code-block:: javascript

   db.collection.createIndex( { _id: "hashed" } )

.. _index-type-compound-hashed:

Create a Compound Hashed Index
------------------------------

.. versionadded:: 4.4

Starting with MongoDB 4.4, MongoDB supports creating compound indexes
that include a single hashed field. To create a compound hashed index,
specify ``hashed`` as the value of any single index key when creating
the index:

.. code-block:: javascript

   db.collection.createIndex( { "fieldA" : 1, "fieldB" : "hashed", "fieldC" : -1 } )

Compound hashed indexes require :ref:`featureCompatibilityVersion
<view-fcv>` set to ``4.4``. 

.. seealso::

   :ref:`sharding-hashed-sharding`

Considerations
--------------

Embedded Documents
~~~~~~~~~~~~~~~~~~

The hashing function collapses embedded documents and computes the hash
for the entire value, but does not support multi-key (i.e. arrays)
indexes. Specifically, creating a hashed index on a field that contains
an array *or* attempting to insert an array to a hashed indexed field
returns an error.

Unique Constraint
~~~~~~~~~~~~~~~~~

MongoDB does not support specifying a unique constraint on a ``hashed``
index. You can instead create an additional non-hashed index with the
unique constraint on that field. MongoDB can use that non-hashed index
for enforcing uniqueness on the field.

.. _hashed-index-warning:

2\ :sup:`53` Limit
~~~~~~~~~~~~~~~~~~

.. include:: /includes/warning-hashed-index-floating-point.rst

.. _hashed-index-power-pc-check:

PowerPC and 2\ :sup:`63`
~~~~~~~~~~~~~~~~~~~~~~~~

For :doc:`hashed indexes </core/index-hashed>`, MongoDB 4.2 ensures
that the hashed value for the floating point value 2\ :sup:`63` on
PowerPC is consistent with other platforms. 

Although :doc:`hashed indexes </core/index-hashed>` on a field that may
contain floating point values greater than 2\ :sup:`53` is an
unsupported configuration, clients may still insert documents where the
indexed field has the value 2\ :sup:`63`.

To list all ``hashed`` indexes for all
collections in your deployment, you can use the following
operation in the :binary:`~bin.mongo` shell:

.. code-block:: javascript

   db.adminCommand("listDatabases").databases.forEach(function(d){
      let mdb = db.getSiblingDB(d.name);
      mdb.getCollectionInfos({ type: "collection" }).forEach(function(c){
         let currentCollection = mdb.getCollection(c.name);
         currentCollection.getIndexes().forEach(function(idx){
           let idxValues = Object.values(Object.assign({}, idx.key));

           if (idxValues.includes("hashed")) {
             print("Hashed index: " + idx.name + " on " + d.name + "." + c.name);
             printjson(idx);
           };
         }); 
      });
   });

To check if the indexed field contains the value 2\ :sup:`63`, run the
following operation for the collection and the indexed field:

- If the indexed field type is a scalar and never a document:

  .. code-block:: javascript
  
     // substitute the actual collection name for <collection>
     // substitute the actual indexed field name for <indexfield>
    
     db.<collection>.find( { <indexfield>: Math.pow(2,63) } );

- If the indexed field type is a document (or a scalar), you can run:

  .. code-block:: javascript
 
     // substitute the actual collection name for <collection>
     // substitute the actual indexed field name for <indexfield>

     db.<collection>.find({
         $where: function() {
             function findVal(obj, val) {
                 if (obj === val)
                     return true;

                 for (const child in obj) {
                     if (findVal(obj[child], val)) {
                         return true;
                     }
                 }
                 return false;
             }
             return findVal(this.<indexfield>, Math.pow(2, 63));
         }
     })
