.. _sqlgetschema-cmd:

================
``sqlGetSchema``
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/extracts/fact-sql-beta-message.rst

The ``sqlGetSchema`` command retrieves the schema stored for 
the specified collection or view. 

.. _sqlgetschema-syntax:

Syntax 
------

.. code-block:: sh 

   db.runCommand({sqlGetSchema: "<collection-name>|<view-name>"})

.. _sqlgetschema-params:

Parameters  
----------

.. list-table:: 
   :header-rows: 1
   :widths: 10 10 70 10

   * - Parameter
     - Type
     - Description
     - Necessity

   * - ``<collection-name>``
     - string 
     - Name of the collection for which to retrieve the schema. 
       Either the collection name or view name is required.
     - Conditional

   * - ``<view-name>``
     - string 
     - Name of the view for which to retrieve the schema. Either 
       the view name or collection name is required.
     - Conditional

.. _sqlgetschema-output:

Output  
------

The command returns the following output if the 
collection or view does not have a schema. 

.. code-block:: json 

   { "ok" : 1, "metadata" : { }, "schema" : { } }

The command returns output similar to the following 
if the collection or view has a schema. 

.. code-block:: json 
   :copyable: false 

   {
     "ok": 1,
     "metadata": {
	   "description": "<description>"
     },
     "schema": {
	   "version": NumberLong(1),
	   "jsonSchema": {}
     }
   }

.. include:: /includes/sql-cmd-output-metadata-field.rst 

The ``schema`` document contains the following fields: 

.. list-table:: 
   :header-rows: 1
   :widths: 20 10 70

   * - Parameter
     - Type
     - Description

   * - ``schema.version``
     - integer
     - Format version of the schema. Value is always 1.

   * - ``schema.jsonSchema``
     - document
     - |json| schema of the collection or view. The |json| schema can 
       contain the following :manual:`fields 
       </reference/operator/query/jsonSchema/#jsonschema-keywords>` : 

       - ``bsonType`` 
       - ``properties`` 
       - ``items``

       To learn more about these fields, see :manual:`JSON Schema 
       Keywords </reference/operator/query/jsonSchema/#jsonschema-keywords>`.

.. _sqlgetschema-egs:

Example 
-------

.. include:: /includes/command-example-collection.rst

The following command retrieves the schema stored for the ``egData`` 
collection: 

.. code-block:: sh 

   db.runCommand({sqlGetSchema: "egData" })

The previous command returns the following output. For more 
information on the fields in the output, see 
:ref:`sqlgetschema-output`.

.. code-block:: 
   :copyable: false 

   {
	 "ok" : 1,
	 "metadata" : {
	   "description" : "set using sqlGenerateSchema with setSchemas = true"
	 },
	 "schema" : {
	   "version" : NumberLong(1),
	   "jsonSchema" : {
		 "bsonType" : [
		   "object"
		 ],
		 "properties" : {
		   "a" : {
			 "bsonType" : [
			   "object"
			 ],
			 "properties" : {
			   "b" : {
				 "bsonType" : [
				   "object",
					 "array"
				   ],
				   "properties" : {
					 "c" : {
					   "bsonType" : [
						 "array",
						 "string",
						 "object",
						 "null"
					   ],
					   "properties" : {
						 "d" : {
						   "bsonType" : [
							 "int"
						   ]
						 }
					   },
					   "items" : {
						 "bsonType" : [
						   "int"
						 ]
					   }
					 }
				   },
				   "items" : {
					 "bsonType" : [
					   "int"
					 ]
				   }
				 }
			   }
			 },
			 "s" : {
			   "bsonType" : [
				 "int",
				 "object"
			   ]
			 }
		   }
		 }
	   }
	 }
   }
   
