.. _c-compound-index:

================
Compound Indexes
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: index, query, optimization, efficiency

Overview
--------

:manual:`Compound indexes </core/index-compound/>` hold references to multiple
fields within a collection's documents, improving query and sort performance. Use the
``mongoc_collection_create_indexes_with_opts()`` function to create compound indexes.

When creating a compound index, you must specify the following components:

- The fields to index. 
- The sort order for each field (ascending or descending). Specify ``BCON_INT32 (1)``
  for ascending order and ``BCON_INT32 (-1)`` for descending order.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``movies`` collection in the ``sample_mflix``
database from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
free MongoDB Atlas cluster and load the sample datasets, see the
:atlas:`Get Started with Atlas </getting-started>` guide.

Create a Compound Index
-----------------------

The following example creates a compound index on the ``type`` and ``genres`` fields, with
both fields indexed in ascending order:

.. literalinclude:: /includes/indexes/indexes.c
   :start-after: start-index-compound
   :end-before: end-index-compound
   :language: c
   :copyable:
   :dedent:

The following example performs a query that uses the index created in the preceding code
sample:

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/indexes.c
      :start-after: start-index-compound-query
      :end-before: end-index-compound-query
      :language: c
      :dedent:
   
   .. output::
      :visible: false

      { "_id" : ..., "genres" : [ "Crime", "Drama" ], "title" : "Traffic in Souls", "type" : "movie", ... }
      { "_id" : ..., "genres" : [ "Drama" ], "title" : "Laugh, Clown, Laugh", "type" : "movie", ... }
      { "_id" : ..., "genres" : [ "Drama", "Romance" ], "title" : "A Woman of Paris: A Drama of Fate", "type" : "movie", ... }
      { "_id" : ..., "genres" : [ "Drama", "Romance", "Thriller" ], "title" : "He Who Gets Slapped", "type" : "movie", ... }
      { "_id" : ..., "genres" : [ "Drama", "Romance" ], "title" : "Wild Oranges", "type" : "movie", ... }
      ...

Additional Information
----------------------

To learn more about compound indexes, see :manual:`Compound Indexes </core/index-compound>`
in the {+mdb-server+} manual.

To learn about effective indexing strategies using compound indexes, see
:manual:`The ESR Rule </tutorial/equality-sort-range-rule>` in the {+mdb-server+} manual.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods discussed in this guide, see the following API
documentation:

- `mongoc_collection_find_with_opts() <{+api-libmongoc+}/mongoc_collection_find_with_opts.html>`_
- `mongoc_collection_create_indexes_with_opts() <{+api-libmongoc+}/mongoc_collection_create_indexes_with_opts.html>`_