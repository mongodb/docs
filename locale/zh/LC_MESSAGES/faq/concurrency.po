#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/concurrency.txt:3
msgid "FAQ: Concurrency"
msgstr "FAQ: 并发"

#: ../source/faq/concurrency.txt:15
msgid ""
"MongoDB allows multiple clients to read and write the same data. In order to"
" ensure consistency, it uses locking and other :term:`concurrency control` "
"measures to prevent multiple clients from modifying the same piece of data "
"simultaneously. Together, these mechanisms guarantee that all writes to a "
"single document occur either in full or not at all and that clients never "
"see an inconsistent view of the data."
msgstr ""
"MongoDB 通过使用系统锁，允许多个客户端同时读写单独的数据库，并且确保"
"所有的客户端得到同样的数据视图，防止多个应用同时修改同一块数据的确切位"
"置，锁机制帮助确保单一文档的所有写操作完全发生或不发生。"

#: ../source/faq/concurrency.txt:27
msgid "What type of locking does MongoDB use?"
msgstr ""

#: ../source/faq/concurrency.txt:31
msgid ""
"In addition to a shared (S) locking mode for reads and an exclusive (X) "
"locking mode for write operations, intent shared (IS) and intent exclusive "
"(IX) modes indicate an intent to read or write a resource using a finer "
"granularity lock.  When locking at a certain granularity all higher levels "
"are locked using an :term:`intent lock`."
msgstr ""
"MongoDB 使用一个readers-writer [#multi-reader-lock-names]_ 锁，它允许"
"并发多个读操作访问数据库，但是只提供唯一写操作访问。"

#: ../source/faq/concurrency.txt:37
msgid ""
"For example, when locking a collection for writing (using mode X), both the "
"corresponding database lock and the global lock must be locked in intent "
"exclusive (IX) mode. A single database can simultaneously be locked in IS "
"and IX mode, but an exclusive (X) lock cannot coexist with any other modes, "
"and a shared (S) lock can only coexists with intent shared (IS) locks."
msgstr ""
"当一个读操作锁存在时，许多读操作可以使用这个锁。然而，当一个写操作存在时"
"，一个写操作会排他性的保持这个锁，并且不能有其他的读操作或者写操作可以共"
"享这个锁。"

#: ../source/faq/concurrency.txt:46
msgid ""
"Locks are fair, with reads and writes being queued in order. However, to "
"optimize throughput, when one request is granted, all other compatible "
"requests will be granted at the same time, potentially releasing them before"
" a conflicting request.  For example, consider a case in which an X lock was"
" just released, and in which the conflict queue contains the following "
"items:"
msgstr ""

#: ../source/faq/concurrency.txt:53
msgid "IS |rarr| IS |rarr| X |rarr| X |rarr| S |rarr| IS"
msgstr ""
"锁是\"写贪婪,\" 这意味着写操作锁比读操作具有优先权，当写操作和读操作同时等待"
"一个锁，MongoDB会授予读操作这个锁。"

#: ../source/faq/concurrency.txt:55
msgid ""
"In strict first-in, first-out (FIFO) ordering, only the first two IS modes "
"would be granted. Instead MongoDB will actually grant all IS and S modes, "
"and once they all drain, it will grant X, even if new IS or S requests have "
"been queued in the meantime. As a grant will always move all other requests "
"ahead in the queue, no starvation of any request is possible."
msgstr ""

#: ../source/faq/concurrency.txt:62
msgid ""
"See the Wikipedia page on `Multiple granularity locking "
"<http://en.wikipedia.org/wiki/Multiple_granularity_locking>`_ for more "
"information."
msgstr ""
"你可能很熟悉\"readers-writer\"锁， \"multi-reader\"锁或\"shared exclusive\" 锁。"
"参见 Wikipedia 页 `Readers-Writer 锁 "
"<http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock>`_ 获得更多 "
"信息。"

#: ../source/faq/concurrency.txt:68
msgid "How granular are locks in MongoDB?"
msgstr "MongoDB中锁的颗粒度是什么？"


#: ../source/includes/fact-wiredtiger-locks.rst:7

msgid ""
"Some global operations, typically short lived operations involving multiple "
"databases, still require a global \"instance-wide\" lock. Some other "
"operations, such as dropping a collection, still require an exclusive "
"database lock."
msgstr ""
"举个例子，如果你有六个数据库和一个数据库级别的写锁，其他的五个数据库的读写"
"依然有效。一个全局锁在操作期间会使所有的六个数据库都不可用。"

#: ../source/faq/concurrency.txt:83
msgid ""
"The MMAPv1 storage engine uses collection-level locking as of the 3.0 "
"release series, an improvement on earlier versions in which the database "
"lock was the finest-grain lock. Third-party storage engines may either use "
"collection-level locking or implement their own finer-grained concurrency "
"control."
msgstr ""

#: ../source/faq/concurrency.txt:89
msgid ""
"For example, if you have six collections in a database using the MMAPv1 "
"storage engine and an operation takes a collection-level write lock, the "
"other five collections are still available for read and write operations. An"
" exclusive database lock makes all six collections unavailable for the "
"duration of the operation holding the lock."
msgstr ""

#: ../source/faq/concurrency.txt:96
msgid "How do I see the status of locks on my :program:`mongod` instances?"
msgstr ""
"在我的 :program:`mongod` 实例中如何看到锁的状态？"

#: ../source/faq/concurrency.txt:98
msgid ""
"For reporting on lock utilization information on locks, use any of the "
"following methods:"
msgstr ""
"要获得锁使用信息的报告，使用下列方法："

#: ../source/faq/concurrency.txt:101 ../source/faq/concurrency.txt:195
msgid ":method:`db.serverStatus()`,"
msgstr ""

#: ../source/faq/concurrency.txt:102
msgid ":method:`db.currentOp()`,"
msgstr ""

#: ../source/faq/concurrency.txt:103
msgid ":doc:`mongotop </reference/program/mongotop>`,"
msgstr ""

#: ../source/faq/concurrency.txt:104
msgid ":doc:`mongostat </reference/program/mongostat>`, and/or"
msgstr ""

#: ../source/faq/concurrency.txt:105
msgid ""
"the |mms-home| or :products:`Ops Manager, an on-premise solution available "
"in MongoDB Enterprise Advanced </mongodb-enterprise-advanced?jmp=docs>`"
msgstr ""


#: ../source/faq/concurrency.txt:116

msgid "To terminate an operation, use :method:`db.killOp()`."
msgstr "终止一个操作，使用 :method:`db.killOp()`."

#: ../source/faq/concurrency.txt:123
msgid "Does a read or write operation ever yield the lock?"
msgstr "一个读操作或写操作产生锁吗？"

#: ../source/faq/concurrency.txt:125
msgid "In some situations, read and write operations can yield their locks."
msgstr "在某些情况下，读操作和写操作产生自己的锁。"

#: ../source/faq/concurrency.txt:127
msgid ""
"Long running read and write operations, such as queries, updates, and "
"deletes, yield under many conditions.  MongoDB operations can also yield "
"locks between individual document modifications in write operations that "
"affect multiple documents like :method:`~db.collection.update()` with the "
"``multi`` parameter."
msgstr ""
"长期运行的读操作和写操作，比如查询，更新，删除，在很多情况下会产生锁。"
"MongoDB 基于可预测磁盘访问模式使用一个自适应算法允许操作产生锁。（比"
"如：页面错误。）"


#: ../source/faq/concurrency.txt:147

msgid ""
"MongoDB does not yield locks when scanning an index even if it predicts that"
" the index is not in memory."
msgstr ""
"MongoDB 从扫描一个索引一直到预测出这个索引不在内存中的时候不会产生锁。"

#: ../source/faq/concurrency.txt:154
msgid "Which operations lock the database?"
msgstr "哪些操作会锁住数据库？"

#: ../source/faq/concurrency.txt:156
msgid ""
"The following table lists common database operations and the types of locks "
"they use."
msgstr "下表列出了常用的数据库操作和他们使用锁的类型。"

#: ../source/includes/table/lock-behavior-per-operation.rst:4
msgid "Operation"
msgstr "操作"

#: ../source/includes/table/lock-behavior-per-operation.rst:6
msgid "Lock Type"
msgstr "锁类型"

#: ../source/includes/table/lock-behavior-per-operation.rst:8
msgid "Issue a query"
msgstr "查询操作"

#: ../source/includes/table/lock-behavior-per-operation.rst:10
#: ../source/includes/table/lock-behavior-per-operation.rst:14
#: ../source/includes/table/lock-behavior-per-operation.rst:66
msgid "Read lock"
msgstr "读锁"

#: ../source/includes/table/lock-behavior-per-operation.rst:12
msgid "Get more data from a :term:`cursor`"
msgstr "从一个 :term:`cursor` 中获得更多数据"

#: ../source/includes/table/lock-behavior-per-operation.rst:16
msgid "Insert data"
msgstr "插入数据"

#: ../source/includes/table/lock-behavior-per-operation.rst:18
#: ../source/includes/table/lock-behavior-per-operation.rst:22
#: ../source/includes/table/lock-behavior-per-operation.rst:26
msgid "Write lock"
msgstr "写锁"

#: ../source/includes/table/lock-behavior-per-operation.rst:20
msgid "Remove data"
msgstr "删除数据"

#: ../source/includes/table/lock-behavior-per-operation.rst:24
msgid "Update data"
msgstr "更新数据"

#: ../source/includes/table/lock-behavior-per-operation.rst:28
msgid ":term:`Map-reduce <map-reduce>`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:30
msgid ""
"Read lock and write lock, unless operations are specified as non-atomic. "
"Portions of map-reduce jobs can run concurrently."
msgstr ""
"读锁和写锁，除非被指定为非原子性操作。部分 map-reduce 的工作可以同时运行。"

#: ../source/includes/table/lock-behavior-per-operation.rst:34
msgid "Create an index"
msgstr "创建一个索引"

#: ../source/includes/table/lock-behavior-per-operation.rst:36
msgid ""
"Building an index in the foreground, which is the default, locks the "
"database for extended periods of time."
msgstr ""
"在前台创建一个索引，这是默认的，会长时间的锁定数据库。"

#: ../source/includes/table/lock-behavior-per-operation.rst:40
msgid ":method:`db.eval()`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:45
msgid ""
"Write lock. The :method:`db.eval()` method takes a global write lock while "
"evaluating the JavaScript function. To avoid taking this global write lock, "
"you can use the :dbcommand:`eval` command with ``nolock: true``."
msgstr ""
"写锁， :method:`db.eval()`  方法在评估JavaScript函数的时候使用了一个全局写锁，"
"你可以使用 :dbcommand:`eval` 命令，带上  ``nolock: true`` 。"

#: ../source/includes/table/lock-behavior-per-operation.rst:51
msgid ":dbcommand:`eval`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:56
msgid ""
"Write lock. By default, :dbcommand:`eval` command takes a global write lock "
"while evaluating the JavaScript function. If used with ``nolock: true``, the"
" :dbcommand:`eval` command does *not* take a global write lock while "
"evaluating the JavaScript function. However, the logic within the JavaScript"
" function may take write locks for write operations."
msgstr ""
"写锁。默认的， :dbcommand:`eval`  命令在评估JavaScript函数的时候使用一个全局"
"写锁。如果使用参数  ``nolock: true`` ， :dbcommand:`eval` 命令在评估JavaScript函"
"数的时候不会使用全局写锁。然而，JavaScript函数可能为写操作接收一个写锁。"


#: ../source/includes/table/lock-behavior-per-operation.rst:64
msgid ":method:`~db.collection.aggregate()`"
msgstr ""

#: ../source/faq/concurrency.txt:165
msgid "Which administrative commands lock the database?"
msgstr "哪些管理命令会锁定数据库？"

#: ../source/faq/concurrency.txt:167
msgid ""
"Certain administrative commands can exclusively lock the database for "
"extended periods of time. In some deployments, for large databases, you may "
"consider taking the :program:`mongod` instance offline so that clients are "
"not affected. For example, if a :program:`mongod` is part of a "
":term:`replica set`, take the :program:`mongod` offline and let other "
"members of the set service load while maintenance is in progress."
msgstr ""
"某些管理命令会长时间排他性的锁定数据库。在一些部署中，对于大的数据库，"
"你可能会考虑让  :program:`mongod`  实例脱机，这样客户端不会受影响。"
"比如：如果 :program:`mongod` 是一个 :term:`复制集` 的一部分，让"
":program:`mongod` 脱机让集群中的其他成员来负载，当维护进行中的时候。"

#: ../source/faq/concurrency.txt:174
msgid ""
"The following administrative operations require an exclusive (i.e. write) "
"lock on the database for extended periods:"
msgstr ""
"下列的管理命令会在数据库上申请一个排他性的（比如：写操作）锁很长时间。"

#: ../source/faq/concurrency.txt:177
msgid ""
":method:`db.collection.createIndex()`, when issued *without* setting "
"``background`` to ``true``,"
msgstr ""
":method:`db.collection.ensureIndex()` ，在不设置``background`` 为 ``true``"
"时候。"

#: ../source/faq/concurrency.txt:179
msgid ":dbcommand:`reIndex`,"
msgstr ""

#: ../source/faq/concurrency.txt:180
msgid ":dbcommand:`compact`,"
msgstr ""

#: ../source/faq/concurrency.txt:181
msgid ":method:`db.repairDatabase()`,"
msgstr ""

#: ../source/faq/concurrency.txt:182
msgid ""
":method:`db.createCollection()`, when creating a very large (i.e. many "
"gigabytes) capped collection,"
msgstr ""
":method:`db.createCollection()` ， 在创建一个非常大（比如：很多G）的"
"capped collection ，（固定大小集合）"

#: ../source/faq/concurrency.txt:184
msgid ":method:`db.collection.validate()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:185
msgid ""
":method:`db.copyDatabase()`. This operation may lock all databases. See :ref"
":`faq-concurrency-lock-multiple-dbs`."
msgstr ""
":method:`db.copyDatabase()` 。这个操作可能锁住所有的数据库。参见 :ref"
":`faq-concurrency-lock-multiple-dbs`."

#: ../source/faq/concurrency.txt:188
msgid ""
"The following administrative commands lock the database but only hold the "
"lock for a very short time:"
msgstr ""
"下列的管理操作会锁住数据库，但是只保持锁非常短的时间："

#: ../source/faq/concurrency.txt:191
msgid ":method:`db.collection.dropIndex()`,"
msgstr ""

#: ../source/faq/concurrency.txt:192
msgid ":method:`db.getLastError()`,"
msgstr ""

#: ../source/faq/concurrency.txt:193
msgid ":method:`db.isMaster()`,"
msgstr ""

#: ../source/faq/concurrency.txt:194
msgid ":method:`rs.status()` (i.e. :dbcommand:`replSetGetStatus`),"
msgstr ""

#: ../source/faq/concurrency.txt:196
msgid ":method:`db.auth()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:197
msgid ":method:`db.addUser()`."
msgstr ""

#: ../source/faq/concurrency.txt:202
msgid "Does a MongoDB operation ever lock more than one database?"
msgstr "MongoDB 操作是否会锁多个数据库?"

#: ../source/faq/concurrency.txt:204
msgid "The following MongoDB operations lock multiple databases:"
msgstr "下列MongoDB 操作会锁多个数据库："

#: ../source/faq/concurrency.txt:206
msgid ""
":method:`db.copyDatabase()` must lock the entire :program:`mongod` instance "
"at once."
msgstr ""
":method:`db.copyDatabase()` 必须一次锁住整个 :program:`mongod` 实例。"

#: ../source/faq/concurrency.txt:209
msgid ""
":method:`db.repairDatabase()` obtains a global write lock and will block "
"other operations until it finishes."
msgstr ""
":method:`db.repairDatabase()` 获得一个全局写锁，将阻止其他的操作，直到完成。"

#: ../source/faq/concurrency.txt:212
msgid ""
":term:`Journaling <journal>`, which is an internal operation, locks all "
"databases for short intervals. All databases share a single journal."
msgstr ""
":term:`Journaling <journal>` ，这是一个内部操作，在很短的时间内锁住所有的数据"
"库，所有的数据库共享一个日志。"

#: ../source/faq/concurrency.txt:216
msgid ""
":doc:`User authentication </core/authentication>` requires a read lock on "
"the ``admin`` database for deployments using :ref:`2.6 user credentials "
"<admin-system-users-collection>`. For deployments using the 2.4 schema for "
"user credentials, authentication locks the ``admin`` database as well as the"
" database the user is accessing."
msgstr ""
":doc:`User authentication </core/authentication>` 请求一个读锁在 "
" ``admin`` 数据库中， 部署使用 :ref:`2.6 user credentials "
"<admin-system-users-collection>`。 使用 2.4 模式来部署用户凭证，验证锁住 "
"``admin`` 数据库，以及用户访问数据库。"

#: ../source/faq/concurrency.txt:222
msgid ""
"All writes to a replica set's :term:`primary` lock both the database "
"receiving the writes and then the ``local`` database for a short time. The "
"lock for the ``local`` database allows the :program:`mongod` to write to the"
" primary's :term:`oplog` and accounts for a small portion of the total time "
"of the operation."
msgstr ""
"所有对复制集的写操作 :term:`primary` 会锁住数据库接收写操作和 ``local`` 数据库很短"
"的时间。``local`` 数据库的锁允许 :program:`mongod` 写入主节点的 :term:`oplog` "
"，这占用整个操作总时间的很小的部分。"

#: ../source/faq/concurrency.txt:229
msgid "How does sharding affect concurrency?"
msgstr "分片如何影响并发？"

#: ../source/faq/concurrency.txt:231
msgid ""
":term:`Sharding <sharding>` improves concurrency by distributing collections"
" over multiple :program:`mongod` instances, allowing shard servers (i.e. "
":program:`mongos` processes) to perform any number of operations "
"concurrently to the various downstream :program:`mongod` instances."
msgstr ""
":term:`Sharding <sharding>` 通过分布数据集在多个  :program:`mongod`  实例"
"上来改善并发，允许分片服务器 (比如：program:`mongos` 进程) 来执行任意数量"
"的操作并发到不同的下游 :program:`mongod` 实例。"


#: ../source/faq/concurrency.txt:242

msgid "How does concurrency affect a replica set primary?"
msgstr "并发如何影响复制集中的主节点？"


#: ../source/faq/concurrency.txt:255

msgid "How does concurrency affect secondaries?"
msgstr "并发如何影响从节点？"

#: ../source/faq/concurrency.txt:257
msgid ""
"In :term:`replication`, MongoDB does not apply writes serially to "
":term:`secondaries <secondary>`. Secondaries collect oplog entries in "
"batches and then apply those batches in parallel. Secondaries do not allow "
"reads while applying the write operations, and apply write operations in the"
" order that they appear in the oplog."
msgstr ""
"在 :term:`复制集` 中, MongoDB 不会连续的申请写操作到:term:`子节点 <secondary>`。"
"子节点批量的收集 oplog  记录，然后并行的申请。字节点在申请这个写操作的时候不允许"
"读操作，并根据他们出现在oplog中的顺序应用这些写操作。"


#: ../source/faq/concurrency.txt:264

msgid "Does MongoDB support transactions?"
msgstr ""

#: ../source/faq/concurrency.txt:266
msgid "MongoDB does not support multi-document transactions."
msgstr ""

#: ../source/faq/concurrency.txt:268
msgid ""
"However, MongoDB does provide atomic operations on a single document. Often "
"these document-level atomic operations are sufficient to solve problems that"
" would require ACID transactions in a relational database."
msgstr ""

#: ../source/faq/concurrency.txt:273
msgid ""
"For example, in MongoDB, you can embed related data in nested arrays or "
"nested documents within a single document and update the entire document in "
"a single atomic operation. Relational databases might represent the same "
"kind of data with multiple tables and rows, which would require transaction "
"support to update the data atomically."
msgstr ""

#: ../source/faq/concurrency.txt:279 ../source/faq/concurrency.txt:308
msgid ":doc:`/core/write-operations-atomicity`"
msgstr ""

#: ../source/faq/concurrency.txt:282
msgid "What isolation guarantees does MongoDB provide?"
msgstr ""

#: ../source/faq/concurrency.txt:284
msgid ""
"MongoDB provides the following guarantees in the presence of concurrent read"
" and write operations. These guarantees hold on systems configured with "
"either the MMAPv1 or WiredTiger storage engines."
msgstr ""

#: ../source/faq/concurrency.txt:290
msgid ""
"Correctness with respect to query predicates, e.g. "
":method:`db.collection.find()` will only return documents that match and "
":method:`db.collection.update()` will only write to matching documents."
msgstr ""

#: ../source/faq/concurrency.txt:294
msgid ""
"Correctness with respect to sort. For read operations that request a sort "
"order (e.g. :method:`db.collection.find()` or "
":method:`db.collection.aggregate()`), the sort order will not be violated "
"due to concurrent writes."
msgstr ""

#: ../source/faq/concurrency.txt:299
msgid ""
"Although MongoDB provides these strong guarantees for single-document "
"operations, read and write operations may access an arbitrary number of "
"documents during execution.  Multi-document operations do *not* occur "
"transactionally and are not isolated from concurrent writes. This means that"
" the following behaviors are expected under the normal operation of the "
"system, for both the MMAPv1 and WiredTiger storage engines:"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:9
msgid ""
"Non-serializable operations. Suppose a read operation reads a document *d*\\"
" :sub:`1` at time *t*\\ :sub:`1` and a write operation updates *d*\\ "
":sub:`1` at some later time *t*\\ :sub:`3`. This introduces a read-write "
"dependency such that, if the operations were to be serialized, the read "
"operation must precede the write operation. But also suppose that the write "
"operation updates document *d*\\ :sub:`2` at time *t*\\ :sub:`2` and the "
"read operation subsequently reads *d*\\ :sub:`2` at some later time *t*\\ "
":sub:`4`. This introduces a write-read dependency which would instead "
"require the read operation to come *after* the write operation in a "
"serializable schedule. There is a dependency cycle which makes "
"serializability impossible."
msgstr ""

#: ../source/faq/concurrency.txt:311
msgid "Can reads see changes that have not been committed to disk?"
msgstr ""

#: ../source/faq/concurrency.txt:333
msgid "Other systems refer to these semantics as *read uncommitted*."
msgstr ""

#: ../source/faq/concurrency.txt:0
msgid "On this page"
msgstr ""

#: ../source/includes/extracts/lock-general.rst:1
msgid ""
"MongoDB uses multi-granularity locking [#mgl-ref]_ that allows operations to"
" lock at the global, database or collection level, and allows for individual"
" storage engines to implement their own concurrency control below the "
"collection level (e.g., at the document-level in WiredTiger)."
msgstr ""

#: ../source/includes/extracts/lock-general.rst:7
msgid ""
"MongoDB uses reader-writer locks that allow concurrent readers shared access"
" to a resource, such as a database or collection, but in MMAPv1, give "
"exclusive access to a single write operation."
msgstr ""

#: ../source/faq/concurrency.txt:73
msgid "For WiredTiger"
msgstr ""

#: ../source/faq/concurrency.txt:75
msgid ""
"Beginning with version 3.0, MongoDB ships with the :ref:`WiredTiger "
"<storage-wiredtiger>` storage engine."
msgstr ""

#: ../source/includes/fact-wiredtiger-locks.rst:1
msgid ""
"For most read and write operations, WiredTiger uses optimistic concurrency "
"control. WiredTiger uses only intent locks at the global, database and "
"collection levels. When the storage engine detects conflicts between two "
"operations, one will incur a write conflict causing MongoDB to transparently"
" retry that operation."
msgstr ""

#: ../source/faq/concurrency.txt:81
msgid "For MMAPv1"
msgstr ""

#: ../source/faq/concurrency.txt:110
msgid ""
"Specifically, the :serverstatus:`locks` document in the :doc:`output of "
"serverStatus </reference/command/serverStatus>`, or the "
":data:`~currentOp.locks` field in the :doc:`current operation reporting "
"</reference/method/db.currentOp>` provides insight into the type of locks "
"and amount of lock contention in your :program:`mongod` instance."
msgstr ""

#: ../source/faq/concurrency.txt:133
msgid ""
"MongoDB's :ref:`MMAPv1 <storage-mmapv1>` storage engine uses heuristics "
"based on its access pattern to predict whether data is likely in physical "
"memory before performing a read. If MongoDB *predicts* that the data is not "
"in physical memory, an operation will yield its lock while MongoDB loads the"
" data into memory. Once data is available in memory, the operation will "
"reacquire the lock to complete the operation."
msgstr ""

#: ../source/faq/concurrency.txt:141
msgid ""
"For storage engines supporting document level :term:`concurrency control`, "
"such as :doc:`WiredTiger </core/wiredtiger>`, yielding is not necessary when"
" accessing storage as the :term:`intent locks <intent lock>`, held at the "
"global, database and collection level, do not block other readers and "
"writers."
msgstr ""

#: ../source/includes/extracts/lock-sharding.rst:1
msgid ""
"In a sharded cluster, locks apply to each individual shard, not to the whole"
" cluster; i.e. each :program:`mongod` instance is independent of the others "
"in the shard cluster and uses its own :ref:`locks <faq-concurrency-"
"locking>`. The operations on one :program:`mongod` instance do not block the"
" operations on any others."
msgstr ""

#: ../source/faq/concurrency.txt:244
msgid ""
"With replica sets, when MongoDB writes to a collection on the "
":term:`primary`, MongoDB also writes to the primary's :term:`oplog`, which "
"is a special collection in the ``local`` database. Therefore, MongoDB must "
"lock both the collection's database and the ``local`` database. The "
":program:`mongod` must lock both databases at the same time to keep the "
"database consistent and ensure that write operations, even with replication,"
" are \"all-or-nothing\" operations."
msgstr ""

#: ../source/includes/extracts/lock-replica-set-primary.rst:1
msgid ""
"When writing to a :term:`replica set`, the lock's scope applies to the "
":term:`primary`."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:1
msgid ""
"Write operations are atomic with respect to a single document; i.e. if a "
"write is updating multiple fields in the document, a reader will never see "
"the document with only some of the fields updated."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:5
msgid ""
"With a standalone :program:`mongod` instance, a set of read and write "
"operations to a single document is serializable. With a replica set, a set "
"of read and write operations to a single document is serializable *only* in "
"the absence of a rollback."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:2
msgid ""
"Non-point-in-time read operations. Suppose a read operation begins at time "
"*t*\\ :sub:`1` and starts reading documents. A write operation then commits "
"an update to one of the documents at some later time *t*\\ :sub:`2`. The "
"reader may see the updated version of the document, and therefore does not "
"see a point-in-time snapshot of the data."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:22
msgid ""
"Reads may miss matching documents that are updated during the course of the "
"read operation."
msgstr ""

#: ../source/faq/concurrency.txt:315
msgid ""
"MongoDB 3.2 introduces :ref:`3.2-rel-notes-readConcern` option. Clients "
"using :readconcern:`majority` ``readConcern`` cannot see the results of "
"writes before they are made :term:`durable`."
msgstr ""

#: ../source/faq/concurrency.txt:319
msgid ""
"Readers, using :readconcern:`\"local\"` ``readConcern`` can see the results "
"of writes before they are made :term:`durable`, regardless of write concern "
"level or journaling configuration. As a result, applications may observe the"
" following behaviors:"
msgstr ""

#: ../source/faq/concurrency.txt:324
msgid ""
"MongoDB will allow a concurrent reader to see the result of the write "
"operation before the write is acknowledged to the client application. For "
"details on when writes are acknowledged for different write concern levels, "
"see :doc:`/reference/write-concern`."
msgstr ""

#: ../source/faq/concurrency.txt:329
msgid ""
"Reads can see data which may subsequently be rolled back in cases such as "
"replica set failover or power loss. It does *not* mean that read operations "
"can see documents in a partially written or otherwise inconsistent state."
msgstr ""

#~ msgid ""
#~ "MongoDB uses reader-writer locks that allow concurrent readers shared access"
#~ " to a resource, such as a database or collection, but give exclusive access "
#~ "to a single write operation."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB uses multi-granularity locking [#mgl-ref]_ that allows operations to"
#~ " lock at the global, database or collection level, and allows for individual"
#~ " storage engines to implement their own concurrency control below the "
#~ "collection (i.e., at the document-level in WiredTiger)."
#~ msgstr ""

#~ msgid ""
#~ "Beginning with version 3.0, MongoDB ships with the :ref:`WiredTiger "
#~ "<storage-wiredtiger>` storage engine, which uses optimistic concurrency "
#~ "control for most read and write operations. WiredTiger uses only intent "
#~ "locks at the global, database and collection levels. When the storage engine"
#~ " detects conflicts between two operations, one will incur a write conflict "
#~ "causing MongoDB to transparently retry that operation."
#~ msgstr ""

#~ msgid ""
#~ "Specifically, the :data:`~serverStatus.locks` document in the :doc:`output "
#~ "of serverStatus </reference/command/serverStatus>`, or the "
#~ ":data:`~currentOp.locks` field in the :doc:`current operation reporting "
#~ "</reference/method/db.currentOp>` provides insight into the type of locks "
#~ "and amount of lock contention in your :program:`mongod` instance."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB's :ref:`mmapv1 <storage-mmapv1>` storage engine uses heuristics "
#~ "based on its access pattern to predict whether data is likely in physical "
#~ "memory before performing a read. If MongoDB *predicts* that the data is not "
#~ "in physical memory, an operation will yield its lock while MongoDB loads the"
#~ " data into memory. Once data is available in memory, the operation will "
#~ "reacquire the lock to complete the operation."
#~ msgstr ""

#~ msgid ""
#~ "For storage engines supporting document level :term:`concurrency control`, "
#~ "yielding is not necessary when accessing storage, as the :term:`intent locks"
#~ " <intent lock>` held at the global, database and collection level do not "
#~ "block other readers and writers."
#~ msgstr ""

#~ msgid ""
#~ "Each :program:`mongod` instance is independent of the others in the shard "
#~ "cluster and uses its own :ref:`locks <faq-concurrency-locking>`. The "
#~ "operations on one :program:`mongod` instance do not block the operations on "
#~ "any others."
#~ msgstr ""

#~ msgid ""
#~ "In :term:`replication`, when MongoDB writes to a collection on the "
#~ ":term:`primary`, MongoDB also writes to the primary's :term:`oplog`, which "
#~ "is a special collection in the ``local`` database.  Therefore, MongoDB must "
#~ "lock both the collection's database and the ``local`` database. The "
#~ ":program:`mongod` must lock both databases at the same time to keep the "
#~ "database consistent and ensure that write operations, even with replication,"
#~ " are \"all-or-nothing\" operations."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB can apply several writes in parallel on replica set secondaries, in "
#~ "two phases:"
#~ msgstr ""

#~ msgid ""
#~ "During the first *prefer* phase, under a read lock, the :program:`mongod` "
#~ "ensures that all documents affected by the operations are in memory. During "
#~ "this phase, other clients may execute queries against this member."
#~ msgstr ""

#~ msgid ""
#~ "A thread pool using write locks applies all write operations in the batch as"
#~ " part of a coordinated write phase."
#~ msgstr ""

#~ msgid ""
#~ "What kind of concurrency does MongoDB provide for JavaScript operations?"
#~ msgstr ""

#~ msgid ""
#~ "The V8 JavaScript engine added in 2.4 allows multiple JavaScript operations "
#~ "to run at the same time. Prior to 2.4, a single :program:`mongod` could only"
#~ " run a *single* JavaScript operation at once."
#~ msgstr ""

#~ msgid ""
#~ "Read and write operations are atomic with respect to a single document and "
#~ "will always leave the document in a consistent state. This means that "
#~ "readers will never see a partially updated document, and indices will always"
#~ " be consistent with the contents of the collection. Furthermore, a set of "
#~ "read and write operations to a single document are serializable."
#~ msgstr ""

#~ msgid ""
#~ "Non-point-in-time read operations. Suppose a read operation begins at time "
#~ "*t*\\ :sub:`1` and starts reading documents. A write operation then commits "
#~ "an update to a document at some later time *t*\\ :sub:`2`. The reader may "
#~ "see the updated version of the document, and therefore does not see a point-"
#~ "in-time snapshot of the data."
#~ msgstr ""

#~ msgid ""
#~ "Dropped results. Reads may miss matching documents that are updated or "
#~ "deleted during the course of the read operation. However, data that has not "
#~ "been modified during the operation will always be visible."
#~ msgstr ""

#~ msgid ""
#~ "Yes, readers can see the results of writes before they are made durable, "
#~ "regardless of write concern level or journaling configuration. As a result, "
#~ "applications may observe the following behaviors:"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB will allow a concurrent reader to see the result of the write "
#~ "operation before the write is acknowledged to the client application. For "
#~ "details on when writes are acknowledged for different write concern levels, "
#~ "see :doc:`/core/write-concern`."
#~ msgstr ""

#~ msgid ""
#~ "Reads can see data which may subsequently be rolled back in rare cases such "
#~ "as replica set failover or power loss. It does *not* mean that read "
#~ "operations can see documents in a partially written or otherwise "
#~ "inconsistent state."
#~ msgstr ""
