.. meta::
   :robots: noindex, nosnippet

.. _kotlin-client-quick-start:
.. _kotlin-client-quick-start-local:

========================
Quick Start - Kotlin SDK
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page contains information to quickly use Realm with the Kotlin
SDK. The optional :ref:`Add Device Sync <kotlin-client-quick-start-add-device-sync>` section
illustrates how to get Atlas Device Sync integrated into your application.

Before you begin, ensure you have installed
the Kotlin SDK for your platform. 

- :ref:`Install for Kotlin Multiplatform (KMP) <kotlin-install-kotlin-multiplatform>`
- :ref:`Install for Android <kotlin-install-android>`

.. note:: Using this Quick Start with KMP  

   If you're running this project in a fresh Kotlin Multiplatform (KMP) template project, you can
   copy and paste the following snippets into the :file:`Greeting.greeting()` method in the
   :file:`commonMain` module.

Define Your Object Model
------------------------

Your application's **data model** defines the structure of data
stored within Realm.
You can define your application's data model via Kotlin
classes in your application code with
:ref:`Realm Object Models <kotlin-define-object-model>`.

To define your application's data model, add a class definition to your
application code. The example below illustrates the creation of an 'Item' model
that represents Todo items in a Todo list app.

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-model.kt
   :language: kotlin
   :copyable: false

.. _kotlin-client-quick-start-open-a-local-realm:

Open a Realm
------------

Use 
`RealmConfiguration.create() <{+kotlin-local-prefix+}io.realm.kotlin/-realm-configuration/-companion/create.html>`__ 
to open a realm using default parameters. Pass your configuration to the 
`Realm factory constructor <{+kotlin-local-prefix+}io.realm.kotlin/-realm/-companion/open.html>`__
to generate an instance of that realm:

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-open-a-local-realm.kt
   :language: kotlin
   :copyable: false

For more information on how to control the specifics of the
`RealmConfiguration <{+kotlin-local-prefix+}io.realm.kotlin/-realm-configuration/index.html>`__
you would like to open (e.g. name, location, schema version), refer to 
:ref:`Open & Close a Realm <kotlin-open-a-realm>`.

Create, Read, Update, and Delete Objects
----------------------------------------

Once opened, you can create objects within a realm in a
`write transaction block
<{+kotlin-local-prefix+}io.realm.kotlin/-realm/write.html>`__.

To create a new :file:`Item`, instantiate an instance of the
:file:`Item` class and add it to the realm in a write transaction block:

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-create.kt
   :language: kotlin
   :copyable: false

You can retrieve a collection of all Todo items in the realm with
`query.find() <{+kotlin-local-prefix+}io.realm.kotlin.query/find.html>`__:

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-read.kt
   :language: kotlin
   :copyable: false

You can also filter a collection to retrieve a more specific collection
of objects:

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-read-filtered.kt
   :language: kotlin
   :copyable: false

Find more information about string Realm queries in :ref:`Filter Data <kotlin-filter-data>`.

To modify a Todo item, update its properties in a write transaction block:

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-update.kt
   :language: kotlin
   :copyable: false

Finally, you can delete a Todo item by calling `mutableRealm.delete()
<{+kotlin-local-prefix+}io.realm.kotlin/-mutable-realm/delete.html>`__
in a write transaction block:

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-delete.kt
   :language: kotlin
   :copyable: false

Watch for Changes
-----------------

You can :ref:`watch a realm, collection, or object for changes
<kotlin-react-to-changes>` with the ``observe`` method.

.. include:: /includes/serverless-watch-note.rst

In the following example, we listen for changes on all ``Item`` objects.

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-watch-for-changes.kt
   :language: kotlin
   :copyable: false

Later, when you're done observing, cancel the job to cancel the coroutine:

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-unsubscribe-to-changes.kt
   :language: kotlin
   :copyable: false

Close a Realm
-------------

To close a realm and all underlying resources, call `realm.close()
<{+kotlin-local-prefix+}io.realm.kotlin/-realm/close.html>`__. The
:file:`close()` method blocks until all write transactions on the realm have
completed.

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-close-realm.kt
   :language: kotlin
   :copyable: false

.. _kotlin-client-quick-start-add-device-sync:

Add Device Sync (Optional)
--------------------------
This section illustrates how to authenticate with an Anonymous User, and open a
Flexible Sync realm to begin syncing data between devices.

Prerequisites
~~~~~~~~~~~~~

The code snippets in this section require the following:

- :ref:`A created App Services App <create-a-realm-app>`
- :ref:`Enabled anonymous authentication <anonymous-authentication>` in the App Services UI
- :ref:`Enable Flexible Sync <enable-flexible-sync>` with  :ref:`Development Mode <development-mode>` toggled on and an ``owner_id`` field in the :guilabel:`Queryable Fields` section

Initialize the App
~~~~~~~~~~~~~~~~~~

.. include:: /includes/access-app-id.rst

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-initialize-app.kt
   :language: kotlin
   :copyable: false

Authenticate a User
~~~~~~~~~~~~~~~~~~~

To authenticate and log in a user, call `App.login
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__. When :ref:`anonymous authentication
<anonymous-authentication>` is enabled, users can immediately log into your app
without providing any identifying information:

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-authenticate.kt
   :language: kotlin
   :copyable: false

Open a Synced Realm
~~~~~~~~~~~~~~~~~~~

Once you have initialized your Atlas App Services App, authenticated a user, and
defined your object model, you can create a `SyncConfiguration
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.sync/-sync-configuration/index.html>`__. 

If you have opened a local realm following the :ref:`Open a Realm
<kotlin-client-quick-start-open-a-local-realm>` section above, replace the
`RealmConfiguration
<{+kotlin-local-prefix+}io.realm.kotlin/-realm-configuration/index.html>`__ with
the ``SyncConfiguration`` described below.

Pass the authenticated user and the ``Item`` class to the `SyncConfiguration.Builder
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.sync/-sync-configuration/-builder/index.html>`__
function to create a :ref:`Flexible Sync Configuration <kotlin-flexible-sync-fundamentals>`.

.. important:: Initial Subscriptions

   You need at least one subscription before you can read from or write to the
   realm. Use `initialSubscriptions
   <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.sync/-sync-configuration/-builder/initial-subscriptions.html>`__
   to define the initial subscription set when the Realm file is first opened.
   Pass the query you wish to subscribe to and a name for the subscription to the `add()
   <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.sync/-mutable-subscription-set/add.html>`__ function.

The example below specifies a subscription named "User's Items" with
all ``Item`` objects.

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-open-a-synced-realm.kt
   :language: kotlin
   :copyable: false

Next: Check out the Template Apps and Tutorial
----------------------------------------------

Check out the :ref:`template app <template-apps>` to experiment with another quick way to start coding with the Realm Kotlin SDK. The
Kotlin SDK template, labeled ``android.kotlin.todo.flex``, is a premade
application that integrates Realm and Atlas Device Sync into a
customizable android app.

Alternatively, if you are interested in a guided experience, you can read our
:ref:`Android with Kotlin SDK tutorial <kotlin-tutorial>` that expands on the template
app. 
