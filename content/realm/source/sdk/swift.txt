.. meta::
   :robots: noindex, nosnippet

:template: product-landing
:hidefeedback: header
:noprevnext:

.. _ios-intro:
.. _ios-realm-database:

==========================
Atlas Device SDK for Swift
==========================

.. facet::
   :name: programming_language
   :values: swift, objective-c
   
.. meta::
   :description: Use Atlas Device SDK for Swift to develop iOS, macOS, watchOS and tvOS apps in Swift and Objective-C. 
   :keywords: iOS, SwiftUI

.. toctree::
   :titlesonly:
   
   Realm Files </sdk/swift/realm-files>
   Model Data </sdk/swift/model-data>
   CRUD </sdk/swift/crud>
   React to Changes </sdk/swift/react-to-changes>
   SwiftUI </sdk/swift/swiftui>
   Use Realm with Actors </sdk/swift/use-realm-with-actors>
   Swift Concurrency </sdk/swift/swift-concurrency>
   Test and Debug </sdk/swift/test-and-debug>
   Logging </sdk/swift/logging>
   Application Services </sdk/swift/application-services>
   Manage Users </sdk/swift/work-with-users>
   Sync Data </sdk/swift/sync>
   Realm in Xcode Playgrounds </sdk/swift/xcode-playgrounds>
   SDK Telemetry </sdk/swift/telemetry>
   API Reference </sdk/swift/api-reference>
   Release Notes <https://github.com/realm/realm-swift/releases>

Use the Atlas Device SDK for Swift to develop iOS, macOS, watchOS and tvOS 
apps in Swift and Objective-C.

.. kicker:: Learning Paths

Get Started with the Swift SDK
------------------------------

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: Quick Start
      :cta: See Code Examples
      :url: https://www.mongodb.com/docs/realm/sdk/swift/quick-start/
      :icon: atlas_functions
      :icon-alt: Functions Icon

      Minimal-explanation code examples of how to work with the Swift SDK. 
      Write to the device database, and sync with other devices.

   .. card::
      :headline: Working Example App
      :cta: Explore an Example App
      :url: https://www.mongodb.com/docs/atlas/app-services/template-apps/
      :icon: realm_mobile
      :icon-alt: Realm Mobile Icon

      Learn from example by dissecting a working SwiftUI client app that
      uses the Swift SDK.

   .. card::
      :headline: Guided Tutorial
      :cta: Follow the Tutorial
      :url: https://mongodb.com/docs/atlas/app-services/tutorial/swiftui/
      :icon: general_content_tutorial
      :icon-alt: Tutorial Icon

      Follow a guided tutorial to learn how to adapt the example app to
      create your own working app.

.. kicker:: What You Can Do

Develop Apps with the SDK
--------------------------

Use the SDK's open-source database - Realm - as an object store on the device. 
Use Device Sync to keep data in sync with your MongoDB Atlas cluster and 
other clients.

.. tabs::

   .. tab:: Store Data with the SDK
      :tabid: device-persistence

      .. procedure::

         .. step:: Install the Swift SDK

            Use Swift Package Manager, CocoaPods, or Carthage to
            :ref:`ios-install` in your project.

            Import ``RealmSwift`` in your project files to get started.

         .. step:: Define an Object Schema

            Use Swift to idiomatically :ref:`define an object schema
            <ios-define-a-realm-object-schema>`.

         .. step:: Open a Database

            The SDK's database - Realm - stores objects in files on your 
            device. Or you can open an in-memory database which does not 
            create a file. 
            :ref:`Configure and open a database <ios-configure-and-open-a-realm>`
            to specify the options for your database file.

         .. step:: Read and Write Data

            :ref:`Create <swift-crud-create>`, :ref:`read <swift-crud-read>`,
            :ref:`update <swift-crud-update>`, and :ref:`delete <swift-crud-delete>`
            objects from the device database. Filter data using the SDK's
            :ref:`type-safe .where syntax <ios-realm-swift-query-api>`,
            or construct an :ref:`NSPredicate <ios-nspredicate-query>`.

         .. step:: React to Changes

            Live objects mean that your data is always up-to-date.
            You can :ref:`register a notification handler <ios-react-to-changes>`
            to watch for changes and perform some logic, such as updating
            your UI. Or in SwiftUI, use the Swift property wrappers
            to :ref:`update Views when data changes
            <swiftui-update-ui-when-objects-change>`.

      .. image:: /images/illustrations/2024_branding/Technical_SOFTWARE_Connect(2)_Spot.png
         :alt: Atlas Device SDK Mobile Illustration

   .. tab:: Sync Data Across Devices
      :tabid: device-sync

      .. procedure::

         .. step:: Connect to an Atlas App Services App

            Configure :ref:`Device Sync in an App Services App
            <realm-sync-get-started>`. Define data access rules. Use
            Development Mode to infer your schema from your Swift or
            Objective-C data model.

            Then, :ref:`connect to the backend <ios-init-appclient>` from
            your client.

         .. step:: Authenticate a User

            Use one of our authentication providers to :ref:`authenticate a
            user <ios-authenticate-users>`. App Services provides access
            to popular authentication providers, such as Apple, Google, or
            Facebook. Use our built-in email/password provider to manage
            users without a third-party, or use custom JWT authentication to
            integrate with other authentication providers. Anonymous authentication
            provides access without requiring a login or persisting user data.

         .. step:: Open a Synced Database

            :ref:`Configure and open a synced database <ios-configure-and-open-a-synced-realm>`.
            :ref:`Subscribe to a query <swift-manage-flexible-sync-subscriptions>`
            to determine what data the synced database can read and write.

         .. step:: Read and Write Synced Data

            The APIs to read and write data are the same whether you're 
            using a synced or non-synced database. Data that you read and write 
            to the device is automatically kept in sync with your Atlas 
            cluster and other clients. Apps keep working offline and 
            deterministically sync changes whenever a network connection 
            is available.

      .. image:: /images/illustrations/2024_branding/Technical_SOFTWARE_Sync(2)_Spot.png
         :alt: Device Sync Illustration

   .. tab:: Develop with SwiftUI
      :tabid: realm-swiftui

      .. container::

         The Swift SDK offers property wrappers and convenience 
         features designed to make it easier to work with SwiftUI.
         For example View code that demonstrates common SwiftUI 
         patterns, check out the 
         :ref:`SwiftUI documentation <ios-swiftui-examples>`.

         .. literalinclude:: /examples/generated/swiftui/FilterData.snippet.searchable.swift
            :language: swift
            :caption: SwiftUI Property Wrappers Offer Realm/SwiftUI Integration
            :copyable: false

      .. image:: /images/illustrations/2024_branding/Technical_SOFTWARE_GearSettings_Spot.png
         :alt: Atlas Device SDK Mobile Illustration

   .. tab:: Build with Atlas App Services
      :tabid: app-services

      .. container::

         Call Serverless Functions
         ~~~~~~~~~~~~~~~~~~~~~~~~~

         You can :ref:`call serverless Functions <ios-call-a-function>`
         from your client application that run in an App Services backend.

         Query MongoDB Atlas
         ~~~~~~~~~~~~~~~~~~~

         You can :ref:`query data stored in MongoDB <ios-mongodb-remote-access>`
         directly from your client application code.

         Authenticate Users
         ~~~~~~~~~~~~~~~~~~

         Authenticate users with built-in and third-party :ref:`authentication
         providers <ios-authenticate-users>`. Use the authenticated user to
         access App Services.

      .. image:: /images/illustrations/2024_branding/Technical_ACTION_WrenchSettings_Spot.png
         :alt: App Services Illustration

.. kicker:: Essential Documentation

Recommended Reading
-------------------

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: Swift API Reference
      :cta: Swift API Reference
      :url: https://www.mongodb.com/docs/realm-sdks/swift/latest
      :icon: realm_sdk
      :icon-alt: Realm Icon

      Explore generated reference docs for the SDK's Swift APIs.

   .. card::
      :headline: Objective-C API Reference
      :cta: Objective-C API Reference
      :url: https://www.mongodb.com/docs/realm-sdks/objc/latest
      :icon: realm_sdk
      :icon-alt: Realm Icon

      Explore generated reference docs for the SDK's Objective-C APIs.
       
   .. card::
      :headline: SwiftUI Quick Start
      :cta: Explore the Quick Start
      :url: https://www.mongodb.com/docs/realm/sdk/swift/swiftui-tutorial
      :icon: general_content_tutorial
      :icon-alt: Tutorial Icon

      Get started developing with SwiftUI.

.. _ios-additional-examples:

Example Projects
----------------

Explore engineering and expert-provided example projects to learn best 
practices and common development patterns using the Swift SDK. Check out 
the :ref:`<realm-example-projects-table>` page for more sample apps.

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: Analytics/Telemetrics Data
      :cta: Example app
      :url: https://github.com/realm/realm-swift-samples/blob/main/AnalyticsTelemetricsData/README.md
      :icon: atlas_asymmetric_sync
      :icon-alt: Asymmetric Sync icon

      Take sensor readings, push data to Atlas, and display the results in 
      Atlas Charts or a time series collection.

   .. card::
      :headline: Connection State Change & Error Handling
      :cta: Example app
      :url: https://github.com/realm/realm-swift-samples/blob/main/SyncConnectionStateErrorReset/README.md
      :icon: cloud_mobility
      :icon-alt: Cloud Mobile Transfer Icon

      Learn best practices around handling Sync errors and client resets.

   .. card::
      :headline: Offline Login and Database Access
      :cta: Example app
      :url: https://github.com/realm/realm-swift-samples/blob/main/OfflineLoginRealmAccess/README.md
      :icon: realm_offline
      :icon-alt: Realm Offline Icon

      Log in a Device Sync user and open a synced database offline.

   .. card::
      :headline: Integrating In-App Purchases
      :cta: Example app
      :url: https://github.com/realm/realm-swift-samples/tree/main/InAppPurchasesAtlasAppServices
      :icon: general_features_transactions
      :icon-alt: Transaction Icon

      Use StoreKit to add in-app purchases to a Device Sync-enabled recipe 
      library app.
