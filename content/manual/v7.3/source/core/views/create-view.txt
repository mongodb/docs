.. _manual-views-create:

=======================
Create and Query a View
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

To create a view, use one of the following methods:

- Use :method:`db.createCollection()`
- Use :method:`db.createView()`

To create a view in the {+atlas+} UI, you must use a materialized
view. To learn more, see :ref:`create-view-atlas`.

.. important:: View Names are Included in Collection List Output

   Operations that list collections, such as
   :method:`db.getCollectionInfos()` and
   :method:`db.getCollectionNames()`, include views in their outputs.

   .. include:: /includes/extracts/views-public-definition.rst

``db.createCollection()`` Syntax
--------------------------------

.. code-block:: javascript

   db.createCollection( 
     "<viewName>", 
     {
       "viewOn" : "<source>", 
       "pipeline" : [<pipeline>],
       "collation" : { <collation> }
     }
   )

``db.createView()`` Syntax
--------------------------

.. code-block:: javascript

   db.createView(
     "<viewName>",
     "<source>",
     [<pipeline>],
     {
       "collation" : { <collation> }
     }
   )

Restrictions
------------

- You must create views in the same database as the source collection.

- .. include:: /includes/extracts/views-restriction-output-to-disk.rst

- You cannot rename a view once it is created.

Unsupported Operations
~~~~~~~~~~~~~~~~~~~~~~

Some operations are not available with views:

- :method:`db.collection.mapReduce()`.

- :query:`$text` operator, since ``$text`` in
  aggregation is valid only for the first stage.

- Renaming a view.

For more information, see :ref:`views-supported-operations`.

Examples
--------

The first example populates a collection with student data and creates a
view to query the data.

Populate the Collection
~~~~~~~~~~~~~~~~~~~~~~~

Create a ``students`` collection to use for this example:

.. _ex-views-create-sample:

.. code-block:: javascript

   db.students.insertMany( [
      { sID: 22001, name: "Alex", year: 1, score: 4.0 }, 
      { sID: 21001, name: "bernie", year: 2, score: 3.7 }, 
      { sID: 20010, name: "Chris", year: 3, score: 2.5 }, 
      { sID: 22021, name: "Drew", year: 1, score: 3.2 }, 
      { sID: 17301, name: "harley", year: 6, score: 3.1 }, 
      { sID: 21022, name: "Farmer", year: 1, score: 2.2 }, 
      { sID: 20020, name: "george", year: 3, score: 2.8 },
      { sID: 18020, name: "Harley", year: 5, score: 2.8 }, 
   ] )

Use db.createView() to Create a View 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use :method:`db.createView()` to create a view that is limited to first
year students: 

.. code-block:: javascript

   db.createView(
      "firstYears",
      "students",
      [ { $match: { year: 1 } } ]
   )

In the example:

- ``firstYears`` is the name of the new view.
- ``students`` is the collection the view is based on.
- :pipeline:`$match` is an aggregation expression that matches first
  year students in the ``students`` collection.

Query the View
``````````````

This example queries the view:

.. code-block:: javascript

   db.firstYears.find({}, { _id: 0 } )

The following output only contains the documents with data on first
year students. The ``{ _id: 0 }`` :ref:`projection
<method-find-projection>` suppresses the ``_id`` field in the output.

.. code-block:: javascript
   :copyable: false

   [
     { sID: 22001, name: 'Alex', year: 1, score: 4 },
     { sID: 22021, name: 'Drew', year: 1, score: 3.2 },
     { sID: 21022, name: 'Farmer', year: 1, score: 2.2 }
   ]

.. note:: Projection Restrictions

   .. include:: /includes/extracts/views-unsupported-projection-operators.rst

Use db.createCollection() to Create a View
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :method:`db.createCollection()` method allows you to create a
collection or a view with specific options.

The following example creates a ``graduateStudents`` view. The view
only contains documents selected by the :pipeline:`$match` stage. The
optional :ref:`collation <collation>` setting determines the sort
order.

.. code-block:: javascript

   db.createCollection(
      "graduateStudents",
      { 
         viewOn: "students",
         pipeline: [ { $match: { $expr: { $gt: [ "$year", 4 ] } } } ],
         collation: { locale: "en", caseFirst: "upper" }
      }
   )

.. note:: Collation Behavior

   .. include:: /includes/extracts/views-collation-behavior.rst

Query the View
``````````````

The following example queries the view. The :pipeline:`$unset` stage
removes the ``_id`` field from the output for clarity.

.. code-block:: javascript

   db.graduateStudents.aggregate(
      [
         { $sort: { name: 1 } },
         { $unset: [ "_id" ] }
      ]
   )

When the output is sorted, the :pipeline:`$sort` stage uses the 
:ref:`collation <collation>` ordering to sort uppercase letters before
lowercase letters.

.. code-block:: javascript
   :copyable: false

   [
     { sID: 18020, name: 'Harley', year: 5, score: 2.8 },
     { sID: 17301, name: 'harley', year: 6, score: 3.1 }
   ]

.. _create-view-user-roles-system-variable-medical-example:

Retrieve Medical Information for Roles Granted to the Current User
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 7.0, you can use the new :variable:`USER_ROLES`
system variable to return user :ref:`roles <roles>`.

The example in this section shows users with limited access to fields in
a collection containing medical information. The example uses a view
that reads the current user roles from the ``USER_ROLES`` system
variable and hides fields based on the roles.

The example creates these users:

- ``James`` with a ``Billing`` role who can access a ``creditCard``
  field.
- ``Michelle`` with a ``Provider`` role who can access a
  ``diagnosisCode`` field.

Perform the following steps to create the roles, users, collection, and
view:

.. procedure::
   :style: normal

   .. step:: Create the roles

      Run:

      .. code-block:: javascript

         db.createRole( { role: "Billing", privileges: [ { resource: { db: "test",
            collection: "medicalView" }, actions: [ "find" ] } ], roles: [ ] } )
         db.createRole( { role: "Provider", privileges: [ { resource: { db: "test",
            collection: "medicalView" }, actions: [ "find" ] } ], roles: [ ] } )

   .. step:: Create the users

      Create users named ``James`` and ``Michelle`` with the required
      roles. Replace the ``test`` database with your database name.

      .. code-block:: javascript

         db.createUser( {
            user: "James",
            pwd: "js008",
            roles: [
               { role: "Billing", db: "test" }
            ]
         } )

         db.createUser( {
            user: "Michelle",
            pwd: "me009",
            roles: [
               { role: "Provider", db: "test" }
            ]
         } )

   .. step:: Create the collection

      Run:

      .. code-block:: javascript

         db.medical.insertMany( [
            {
               _id: 0,
               patientName: "Jack Jones",
               diagnosisCode: "CAS 17",
               creditCard: "1234-5678-9012-3456"
            },
            {
               _id: 1,
               patientName: "Mary Smith",
               diagnosisCode: "ACH 01",
               creditCard: "6541-7534-9637-3456"
            }
         ] )

   .. step:: Create the view

      .. include:: /includes/user-roles-system-variable-example-description-start.rst

      The view reads the current user roles from the ``USER_ROLES``
      system variable and hides fields based on the roles.

      Run:

      .. code-block:: javascript
         :emphasize-lines: 8, 20

         db.createView(
            "medicalView", "medical",
            [ {
               $set: {
                  "diagnosisCode": {
                     $cond: {
                        if: { $in: [
                           "Provider", "$$USER_ROLES.role"
                        ] },
                        then: "$diagnosisCode",
                        else: "$$REMOVE"
                     }
               }
            },
            }, {
               $set: {
                  "creditCard": {
                     $cond: {
                        if: { $in: [
                           "Billing", "$$USER_ROLES.role"
                        ] },
                        then: "$creditCard",
                        else: "$$REMOVE"
                     }
                  }
               }
            } ]
         )

      The view example:
      
      - includes the ``diagnosisCode`` field for a user with the
        ``Provider`` role.
      - includes the ``creditCard`` field for a user with the
        ``Billing`` role.
      - uses :pipeline:`$set` pipeline stages and :variable:`$$REMOVE
        <REMOVE>` to hide fields based on whether the user who queries
        the view has the matching role returned in
        ``$$USER_ROLES.role``.

Perform the following steps to retrieve the information accessible to
``James``:

.. procedure::
   :style: normal

   .. step:: Log in as James

      Run:

      .. code-block:: javascript

         db.auth( "James", "js008" )

   .. step:: Retrieve the documents

      Run:

      .. code-block:: javascript

         db.medicalView.find()

   .. step:: Examine the documents

      ``James`` has the ``Billing`` role and sees the following
      documents, which include the ``creditCard`` field but not the
      ``diagnosisCode`` field:

      .. code-block:: javascript
         :copyable: false
         :emphasize-lines: 4, 8

         [
            {
               _id: 0, patientName: 'Jack Jones',
               creditCard: '1234-5678-9012-3456'
            },
            {
               _id: 1, patientName: 'Mary Smith',
               creditCard: '6541-7534-9637-3456'
            }
         ]

Perform the following steps to retrieve the information accessible to
``Michelle``:

.. procedure::
   :style: normal

   .. step:: Log in as Michelle

      Run:

      .. code-block:: javascript

         db.auth( "Michelle", "me009" )

   .. step:: Retrieve the documents

      Run:

      .. code-block:: javascript

         db.medicalView.find()

   .. step:: Examine the documents

      ``Michelle`` has the ``Provider`` role and sees the following
      documents, which include the ``diagnosisCode`` field but not the
      ``creditCard`` field:

      .. code-block:: javascript
         :copyable: false
         :emphasize-lines: 3, 5

         [
            { _id: 0, patientName: 'Jack Jones',
               diagnosisCode: 'CAS 17' },
            { _id: 1, patientName: 'Mary Smith',
               diagnosisCode: 'ACH 01' }
         ]

.. _create-view-user-roles-system-variable-example:

Retrieve Budget Documents for Roles Granted to the Current User
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/user-roles-system-variable-introduction.rst

Perform the following steps to create a view and retrieve the documents
accessible to ``John``:

.. procedure::
   :style: normal

   .. step:: Create the view

      .. include:: /includes/user-roles-system-variable-example-description-start.rst

      Run:

      .. code-block:: javascript
         :emphasize-lines: 7

         db.createView(
            "budgetView", "budget",
            [ {
               $match: {
                  $expr: {
                     $not: {
                        $eq: [ { $setIntersection: [ "$allowedRoles", "$$USER_ROLES.role" ] }, [] ]
                     }
                  }
               }
            } ]
         )

      If you cannot create the view, ensure you log in as a user with
      the privilege to create a view.

      .. include:: /includes/user-roles-system-variable-example-description.rst

   .. step:: Log in as John

      .. include:: /includes/user-roles-system-variable-example-login-john.rst

   .. step:: Retrieve the documents

      Run:

      .. code-block:: javascript

         db.budgetView.find()

   .. step:: Examine the documents

      .. include:: /includes/user-roles-system-variable-example-output-john.rst

Perform the following steps to retrieve the documents accessible to
Jane:

.. procedure::
   :style: normal

   .. step:: Log in as ``Jane``

      .. include:: /includes/user-roles-system-variable-example-login-jane.rst

   .. step:: Retrieve the documents

      Run:

      .. code-block:: javascript

         db.budgetView.find()

   .. step:: Examine the documents

      .. include:: /includes/user-roles-system-variable-example-output-jane.rst

Roles with the Same Name in Multiple Databases
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Multiple databases can have roles with the same name. If you create a
view and reference a specific role in the view, you should either
specify both the ``db`` database name field and the ``role`` field, or
specify the ``_id`` field that contains the database name and the role.

The following example returns the roles assigned to ``Jane``, who has
roles with different names. The example returns the ``_id``, ``role``,
and ``db`` database name:

.. procedure::
   :style: normal

   .. step:: Log in as ``Jane``

      .. include:: /includes/user-roles-system-variable-example-login-jane.rst

   .. step:: Retrieve the documents

      Run:

      .. code-block:: javascript

         db.budget.findOne( {}, { myRoles: "$$USER_ROLES" } )

   .. step:: Examine the documents

      Example output, which shows the ``_id``, ``role``, and ``db``
      database name in the ``myRoles`` array:

      .. code-block:: javascript
         :copyable: false
         :emphasize-lines: 3-6

         {
            _id: 0,
            myRoles: [
               { _id: 'test.Operations', role: 'Operations', db: 'test' },
               { _id: 'test.Sales', role: 'Sales', db: 'test' },
               { _id: 'test.read', role: 'read', db: 'test' }
            ]
         }

Behavior
--------

The following sections describe the behaviors of view creation and
queries.

Aggregation Optimizations
~~~~~~~~~~~~~~~~~~~~~~~~~

When you query a view:

- Query ``filter``, ``projection``, ``sort``, ``skip``, ``limit``,
  and other operations for :method:`db.collection.find()` are
  converted to the equivalent :ref:`aggregation pipeline stages
  <aggregation-pipeline-operator-reference>`.

- MongoDB appends the client query to the underlying pipeline and
  returns the results of that combined pipeline to the client. MongoDB
  may apply :ref:`aggregation pipeline optimizations
  <agg-pipeline-optimization>` to the combined pipeline.

- The aggregation pipeline optimizer reshapes the view aggregation 
  pipeline stages to improve performance. The optimization does not 
  change the query results.

Resource Locking
~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/createView-resource-lock.rst
