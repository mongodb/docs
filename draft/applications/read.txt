====
Read
====

.. default-domain:: mongodb

Read operation selects documents from a :term:`collection`. MongoDB
provides the following methods to perform read operations:

- :ref:`find <crud-read-find>`

- :ref:`findOne <crud-read-findOne>`

.. _crud-read-find:

Find
----

The :method:`find() <db.collection.find()>` method is the primary
method to select documents from a collection. The :method:`find()
<db.collection.find()>` method returns a cursor to the selected
documents. Use the cursor handling methods of the language drivers to
iterate through the cursor and access the documents.

The :method:`find() <db.collection.find()>` method has the following
syntax:

.. code-block:: javascript

   db.collection.find( <query>, <projection> )

The :method:`find() <db.collection.find()>` method is analogous to the
``SQL SELECT`` with:

- The ``query`` argument analogous to the ``WHERE`` statement.

- The ``projection`` argument analogous to the selected fields to
  return.

Consider the following examples that illustrate the use of the
:method:`find() <db.collection.find()>` method:

The examples refer to a collection named ``csbios`` that contains
documents with the following prototype:

.. code-block:: javascript

   {
     "_id" : 1, 
     "name" : { "first" : "John", "last" :"Backus" },
     "birth" : ISODate("1924-12-03T05:00:00Z"),
     "death" : ISODate("2007-03-17T04:00:00Z"),
     "contribs" : [ "Fortran", "ALGOL", "Backus-Naur Form", "FP" ],
     "awards" : [
                  { "award" : "W.W. McDowellAward",
                    "year" : "1967",
                    "by" : "IEEE Computer Society" },
                  { "award" : "National Medal of Science",
                    "year" : "1975",
                    "by" : "National Science Foundation" },
                  { "award" : "Turing Award", 
                    "year" : "1977",
                    "by" : "ACM" },
                  { "award" : "Draper Prize",
                    "year" : "1993",
                    "by" : "National Academy of Engineering" }
                ]
   }

.. note::

   In the :program:`mongo` shell, you can format the output by adding
   ``.pretty()`` to the :method:`find() <db.collection.find()>` method
   call.

- If there is no ``query`` argument, the :method:`find()
  <db.collection.find()>` method selects all documents from a collection.

  - The following operation returns all documents (or more
    precisely, a cursor to all documents) in the ``csbios``
    collection:

    .. code-block:: javascript

       db.csbios.find()

- If there is a ``query`` argument, the :method:`find()
  <db.collection.find()>` method selects all documents from a
  collection that meets the ``query``:

  - The following operation returns all documents in the ``csbios``
    collection where the field ``_id`` equals ``5`` or
    ``ObjectId("507c35dd8fada716c89d0013")``:

    .. code-block:: javascript

       db.csbios.find( { _id: { $in: [ 5,  ObjectId("507c35dd8fada716c89d0013") ] } } )

  - The following operation returns all documents in the ``csbios``
    collection where the array field ``contribs`` contains the element
    ``UNIX``:

    .. code-block:: javascript

       db.csbios.find( { contribs: 'UNIX' } )

  - The following operation returns all documents in the ``csbios``
    collection where the subdocument ``name`` contains a field
    ``first`` with the value ``Yukihiro`` and a field ``last`` with the
    value ``Matsumoto``:

    .. code-block:: javascript

       db.csbios.find( { 'name.first': 'Yukihiro', 'name.last': 'Matsumoto' } )

    The query matches the document where the ``name`` field contains a
    field ``first`` with the value ``Yukihiro`` and a field ``last``
    with the value ``Matsumoto``.  For instance, the query would match both: 
    
    - ``name: { first: 'Yukihiro', aka: 'Matz', last: 'Matsumoto'}``
    - ``name: { last: 'Matsumoto', first: 'Yukihiro'}``.

  - The following operation returns all documents in the ``csbios``
    collection where the subdocument ``name`` is *exactly* ``{ first:
    'Yukihiro', last: 'Matsumoto' }``, including the order of the
    fields:

    .. code-block:: javascript

       db.csbios.find( { name: { first: 'Yukihiro', last: 'Matsumoto' } } )

    The query *only* matches the document where the ``name`` field is
    *exactly* ``{ first: 'Yukihiro', last: 'Matsumoto' }``. For
    instance, the query would **not** match either:

    - ``name: { first: 'Yukihiro', aka: 'Matz', last: 'Matsumoto'}`` 
    - ``name: { last: 'Matsumoto' , first: 'Yukihiro' }``.

  - The following operation returns all documents in the ``csbios``
    collection where either the field ``first`` in the subdocument
    ``name`` starts with the letter ``G`` **or** where the field
    ``birth`` is less than ``new Date('01/01/1945')``:

    .. code-block:: javascript

       db.csbios.find( { $or: [ { 'name.first' : /^G/ }, 
                                { birth: { $lt: new Date('01/01/1945') } }
                              ]  } )

  - The following operation returns all documents in the ``csbios``
    collection where the field ``first`` in the subdocument ``name``
    starts with the letter ``K`` **and** the array field ``contribs``
    contains the element ``UNIX``:

    .. code-block:: javascript

       db.csbios.find( { 'name.first': /^K/, 
                          contribs: 'UNIX' } )

  - The following operation returns all documents in the ``csbios``
    collection where ``awards`` array contains a subdocument element
    that contains the ``award`` field equal to ``Turing Award`` and the
    ``year`` field greater than ``1980``:

    .. code-block:: javascript

       db.csbios.find( { awards: { $elemMatch: { 
                                                 award: 'Turing Award', 
                                                 year: { $gt: '1980' } 
                                               } } } )

- If there is a ``projection`` argument, the :method:`find()
  <db.collection.find()>` method returns only those fields as specified
  in the ``projection`` argument to include or exclude (the ``_id``
  field is implicitly included in the ``projection`` argument):

  - The following operation finds all documents in the ``csbios``
    collection and returns only the ``name`` field, the ``contribs``
    field, and the ``_id`` field:

    .. code-block:: javascript

       db.csbios.find( { }, { name: 1, contribs: 1 } )

  - The following operation finds all documents in the ``csbios``
    collection and returns only the ``name`` field and the ``contribs``
    field:

    .. code-block:: javascript

       db.csbios.find( { }, { name: 1, contribs: 1, _id: 0 } )

    .. note:: 

       The ``projection`` argument cannot contain both include and
       exclude specifications *except* for the exclusion of the ``_id``.
     
  - The following operation finds the documents in the ``csbios``
    collection where the ``contribs`` field contains the element
    ``OOP`` and returns all fields *except* the ``_id`` field, the
    ``first`` field in the ``name`` subdocument, and the ``birth``
    field from the matching documents:

    .. code-block:: javascript

       db.csbios.find( { contribs: 'OOP' },
                       { _id: 0, 'name.first': 0, birth: 0 } )

In addition to the ``query`` and the ``projection`` arguments, MongoDB
provides the cursor methods that work with the :method:`find()
<db.collection.find()>` method:

- The :method:`sort <cursor.sort()>` orders the resulting documents and
  is analogous to ``SQL ORDER BY``.

  The following operation returns all documents (or more precisely, a
  cursor to all documents) in the ``csbios`` collection ordered by the
  ``name`` field ascending:

  .. code-block:: javascript

     db.csbios.find().sort( { name: 1 } )
       
- The :method:`limit <cursor.limit()>` method limits the number of
  documents returned and is analogous to ``SQL LIMIT``.

  The following operation returns at most ``5`` documents (or more
  precisely, a cursor to at most 5 documents) in the ``csbios``
  collection:

  .. code-block:: javascript

     db.csbios.find().limit( 5 )

.. _crud-read-findOne:

FindOne
-------

The :method:`findOne() <db.collection.findOne()>` method selects a
single document from a collection and returns the document rather than
a cursor.

The :method:`findOne() <db.collection.findOne()>` method has the following
syntax:

.. code-block:: javascript

   db.collection.findOne( <query>, <projection> )

The :method:`findOne() <db.collection.findOne()>` method is similar to
the :method:`find() <db.collection.find()>` method except the
:method:`findOne() <db.collection.findOne()>` method returns the
single document rather than a cursor.

Consider the following examples that illustrate the use of the
:method:`findOne() <db.collection.findOne()>` method:

- If there is no ``query`` argument, the :method:`findOne()
  <db.collection.findOne()>` method selects just one document from a
  collection.

  - The following operation returns a single document from the
    ``csbios`` collection:

    .. code-block:: javascript

       db.csbios.findOne()

- If there is a ``query`` argument, the :method:`findOne()
  <db.collection.findOne()>` method selects the first document from a
  collection that meets the ``query`` argument:
  
  - The following operation returns the first matching document from
    the ``csbios`` collection where either the field ``first`` in the
    subdocument ``name`` starts with the letter ``G`` **or** where the
    field ``birth`` is less than ``new Date('01/01/1945')``:

    .. code-block:: javascript

       db.csbios.findOne( { $or: [ { 'name.first' : /^G/ }, 
                                   { birth: { $lt: new Date('01/01/1945') } }
                                 ] } )

- If there is a ``projection`` argument, the :method:`findOne()
  <db.collection.findOne()>` method returns only those fields as
  specified in the ``projection`` argument to include or exclude (the
  ``_id`` field is implicitly included in the ``projection`` argument):

  - The following operation finds a document in the ``csbios``
    collection and returns only the ``name`` field, the ``contribs``
    field, and the ``_id`` field:

    .. code-block:: javascript

       db.csbios.findOne( { }, { name: 1, contribs: 1 } )

  - The following operation finds a document in the ``csbios``
    collection where the ``contribs`` field contains the element
    ``OOP`` and returns all fields *except* the ``_id`` field, the
    ``first`` field in the ``name`` subdocument, and the ``birth``
    field from the matching documents:

    .. code-block:: javascript

       db.csbios.findOne( { contribs: 'OOP' },
                          { _id: 0, 'name.first': 0, birth: 0 } )                      
                              