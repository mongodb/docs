.. index:: sharding; security
.. _sharding-security:

========================
Sharded Cluster Security
========================

.. default-domain:: mongodb

.. todo:: migrate this content to /administration/security.txt when that
   document exists. See DOCS-79 for tracking this document.

.. note::

   You should always run all :program:`mongod` components in trusted
   networking environments that control access to the cluster using
   network rules and restrictions to ensure that only known traffic
   reaches your :program:`mongod` and :program:`mongos` instances.

.. warning::  Limitations

   .. versionchanged:: 2.2
      Read only authentication is fully supported in shard
      clusters. Previously, in version 2.0, sharded clusters would not
      enforce read-only limitations.

   .. versionchanged:: 2.0
      Sharded clusters support authentication. Previously, in version
      1.8, sharded clusters will not support authentication and access
      control. You must run your sharded systems in trusted
      environments.

To control access to a sharded cluster, you must set the
:setting:`keyFile` option on all components of the sharded cluster. Use
the :option:`--keyFile <mongos --keyFile>` run-time option or the
:setting:`keyFile` configuration option for all :program:`mongos`,
configuration instances, and shard :program:`mongod` instances.

There are two classes of security credentials in a sharded cluster:
credentials for "admin" users (i.e. for the :term:`admin database`) and
credentials for all other databases. These credentials reside in
different locations within the cluster and have different roles:

#. Admin database credentials reside on the config servers, to receive
   admin access to the cluster you *must* authenticate a session while
   connected to a :program:`mongos` instance using the
   :term:`admin database`.

#. Other database credentials reside on the *primary* shard for the
   database.

This means that you *can* authenticate to these users and databases
while connected directly to the primary shard for a database. However,
for clarity and consistency all interactions between the client and
the database should use a :program:`mongos` instance.

.. note::

   Individual shards can store administrative credentials to their
   instance, which only permit access to a single shard. MongoDB
   stores these credentials in the shards' :term:`admin databases <admin database>` and these
   credentials are *completely* distinct from the cluster-wide
   administrative credentials.
