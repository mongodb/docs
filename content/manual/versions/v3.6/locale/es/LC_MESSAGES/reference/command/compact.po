# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 19:09+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/command/compact.txt:5
msgid "compact"
msgstr ""

#: ../source/reference/command/compact.txt:16
msgid "Definition"
msgstr ""

#: ../source/reference/command/compact.txt:20
msgid ""
"Rewrites and defragments all data and indexes in a collection. On "
":ref:`WiredTiger <storage-wiredtiger>` databases, this command will "
"release unneeded disk space to the operating system."
msgstr ""

#: ../source/reference/command/compact.txt:24
msgid ":dbcommand:`compact` has the following form:"
msgstr ""

#: ../source/reference/command/compact.txt:30
msgid ":dbcommand:`compact` takes the following fields:"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:7
msgid "Field"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:9
msgid "Type"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:11
msgid "Description"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:13
msgid "``compact``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:15
msgid "string"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:17
#: ../source/includes/apiargs/dbcommand-compact-field.rst:83
msgid "The name of the collection."
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:21
msgid "``force``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:23
#: ../source/includes/apiargs/dbcommand-compact-field.rst:67
msgid "boolean"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:25
#: ../source/includes/apiargs/dbcommand-compact-field.rst:89
msgid ""
"Optional. If ``true``, :dbcommand:`compact` can run on the "
":term:`primary` in a :term:`replica set`. If ``false``, "
":dbcommand:`compact` returns an error when run on a primary, because the "
"command blocks all other operations."
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:30
#: ../source/includes/apiargs/dbcommand-compact-field.rst:94
msgid ""
":dbcommand:`compact` blocks operations only for the database it is "
"compacting."
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:35
msgid "``paddingFactor``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:37
msgid "number"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:39
#: ../source/includes/apiargs/dbcommand-compact-field.rst:101
msgid ""
"Optional. *Applicable for the MMAPv1 storage engine only.* Specifies the "
"padding to use (as a factor of the document size) during the "
":dbcommand:`compact` operation."
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:43
#: ../source/includes/apiargs/dbcommand-compact-field.rst:105
msgid ""
"The ``paddingFactor`` does not affect the padding of subsequent record "
"allocations after :dbcommand:`compact` completes. For more information, "
"see :ref:`compact-paddingFactor`."
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:50
msgid "``paddingBytes``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:52
msgid "integer"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:54
#: ../source/includes/apiargs/dbcommand-compact-field.rst:114
msgid ""
"Optional. *Applicable for the MMAPv1 storage engine only.* Specifies the "
"padding to use (in absolute number of bytes) during the "
":dbcommand:`compact` operation."
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:58
#: ../source/includes/apiargs/dbcommand-compact-field.rst:118
msgid ""
"``paddingBytes`` does not affect the padding of subsequent record "
"allocations after :dbcommand:`compact` completes. For more information, "
"see :ref:`compact-paddingBytes`."
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:65
msgid "``preservePadding``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:69
#: ../source/includes/apiargs/dbcommand-compact-field.rst:127
msgid ""
"Optional. *Applicable for the MMAPv1 storage engine only.* Specifies that"
" the :dbcommand:`compact` process should leave document :term:`padding` "
"intact."
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst:72
#: ../source/includes/apiargs/dbcommand-compact-field.rst:130
msgid "This option cannot be used with ``paddingFactor`` or ``paddingBytes``."
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst
msgid "field string compact"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst
msgid "field boolean force"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst
msgid "field number paddingFactor"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst
msgid "field integer paddingBytes"
msgstr ""

#: ../source/includes/apiargs/dbcommand-compact-field.rst
msgid "field boolean preservePadding"
msgstr ""

#: ../source/reference/command/compact.txt:34
msgid ""
"Always have an up-to-date backup before performing server maintenance "
"such as the :dbcommand:`compact` operation."
msgstr ""

#: ../source/reference/command/compact.txt:40
msgid "paddingFactor"
msgstr ""

#: ../source/reference/command/compact.txt:44
msgid ""
"Applicable for the MMAPv1 storage engine only; specifying "
"``paddingFactor`` has no effect when used with the WiredTiger storage "
"engine."
msgstr ""

#: ../source/reference/command/compact.txt:48
msgid "The ``paddingFactor`` field takes the following range of values:"
msgstr ""

#: ../source/reference/command/compact.txt:50
msgid "Default: ``1.0``"
msgstr ""

#: ../source/reference/command/compact.txt:52
msgid "Minimum: ``1.0`` (no padding)"
msgstr ""

#: ../source/reference/command/compact.txt:54
msgid "Maximum: ``4.0``"
msgstr ""

#: ../source/reference/command/compact.txt:56
msgid ""
"If your updates increase the size of the documents, padding will increase"
" the amount of space allocated to each document and avoid expensive "
"document relocation operations within the data files."
msgstr ""

#: ../source/reference/command/compact.txt:60
msgid ""
"You can calculate the padding size by subtracting the document size from "
"the record size or, in terms of the ``paddingFactor``, by subtracting "
"``1`` from the ``paddingFactor``:"
msgstr ""

#: ../source/reference/command/compact.txt:68
msgid ""
"For example, a ``paddingFactor`` of ``1.0`` specifies a padding size of "
"``0`` whereas a ``paddingFactor`` of ``1.2`` specifies a padding size of "
"``0.2`` or 20 percent (20%) of the document size."
msgstr ""

#: ../source/reference/command/compact.txt:72
msgid ""
"With the following command, you can use the ``paddingFactor`` option of "
"the :dbcommand:`compact` command to set the record size to ``1.1`` of the"
" document size, or a padding factor of 10 percent (10%):"
msgstr ""

#: ../source/reference/command/compact.txt:80
msgid ""
":dbcommand:`compact` modifies existing documents, but does not set the "
"padding factor for future documents."
msgstr ""

#: ../source/reference/command/compact.txt:86
msgid "paddingBytes"
msgstr ""

#: ../source/reference/command/compact.txt:90
msgid ""
"Applicable for the MMAPv1 storage engine only; specifying "
"``paddingBytes`` has no effect when used with the WiredTiger storage "
"engine."
msgstr ""

#: ../source/reference/command/compact.txt:94
msgid ""
"Specifying ``paddingBytes`` can be useful if your documents start small "
"but then increase in size significantly."
msgstr ""

#: ../source/reference/command/compact.txt:97
msgid ""
"For example, if your documents are initially 40 bytes long and you grow "
"them by 1 kB, using ``paddingBytes: 1024`` might be reasonable since "
"using ``paddingFactor: 4.0`` would specify a record size of 160 bytes "
"(``4.0`` times the initial document size), which would only provide a "
"padding of 120 bytes (i.e. record size of 160 bytes minus the document "
"size)."
msgstr ""

#: ../source/reference/command/compact.txt:104
msgid ""
"The following command uses the ``paddingBytes`` option to set the padding"
" size to 100 bytes on the collection named by ``<collection>``:"
msgstr ""

#: ../source/reference/command/compact.txt:114
msgid "``compact`` Required Privileges"
msgstr ""

#: ../source/reference/command/compact.txt:116
msgid ""
"For clusters enforcing :ref:`authentication <authentication>`, you must "
"authenticate as a user with the :authrole:`compact` privilege action on "
"the target collection. The :authrole:`dbAdmin` role provides the required"
" privileges for running :dbcommand:`compact` against non-system "
"collections."
msgstr ""

#: ../source/reference/command/compact.txt:122
msgid ""
"For :ref:`system collections <metadata-system-collections>`, create a "
"custom role that grants the :authrole:`compact` action on the system "
"collection. You can then grant that role to a new or existing user and "
"authenticate as that user to perform the :dbcommand:`compact` command. "
"For example, the following operations create a custom role that grants "
"the :authrole:`compact` action against specified database and collection:"
msgstr ""

#: ../source/reference/command/compact.txt:146
msgid ""
"For more information on configuring the ``resource`` document, see :ref"
":`resource-document`."
msgstr ""

#: ../source/reference/command/compact.txt:149
msgid ""
"To add the :authrole:`dbAdmin` or the custom role to an existing user, "
"use :method:`db.grantRoleToUser` or :method:`db.updateUser()`. The "
"following operation grants the custom ``compact`` role to the "
"``myCompactUser`` on the ``admin`` database:"
msgstr ""

#: ../source/reference/command/compact.txt:159
msgid ""
"To add the :authrole:`dbAdmin` or the custom role to a new user, specify "
"the role to the ``roles`` array of the :method:`db.createUser()` method "
"when creating the user."
msgstr ""

#: ../source/reference/command/compact.txt:177
msgid "Behavior"
msgstr ""

#: ../source/reference/command/compact.txt:180
msgid "Blocking"
msgstr ""

#: ../source/reference/command/compact.txt:182
msgid ""
":dbcommand:`compact` only blocks operations for the database it is "
"currently operating on. Only use :dbcommand:`compact` during scheduled "
"maintenance periods."
msgstr ""

#: ../source/reference/command/compact.txt:186
msgid ""
"You may view the intermediate progress either by viewing the "
":binary:`~bin.mongod` log file or by running the :method:`db.currentOp()`"
" in another shell instance."
msgstr ""

#: ../source/reference/command/compact.txt:191
msgid "Operation Termination"
msgstr ""

#: ../source/reference/command/compact.txt:193
msgid ""
"If you terminate the operation with the :method:`db.killOp() "
"<db.killOp()>` method or restart the server before the "
":dbcommand:`compact` operation has finished, be aware of the following:"
msgstr ""

#: ../source/reference/command/compact.txt:197
msgid ""
"If you have journaling enabled, the data remains valid and usable, "
"regardless of the state of the :dbcommand:`compact` operation. You may "
"have to manually rebuild the indexes."
msgstr ""

#: ../source/reference/command/compact.txt:201
msgid ""
"If you do not have journaling enabled and the :binary:`~bin.mongod` or "
":dbcommand:`compact` terminates during the operation, it is impossible to"
" guarantee that the data is in a valid state."
msgstr ""

#: ../source/reference/command/compact.txt:205
msgid ""
"In either case, much of the existing free space in the collection may "
"become un-reusable. In this scenario, you should rerun the compaction to "
"completion to restore the use of this free space."
msgstr ""

#: ../source/reference/command/compact.txt:210
msgid "Disk Space"
msgstr ""

#: ../source/reference/command/compact.txt:212
msgid ""
":dbcommand:`compact` has different impacts on available disk space "
"depending on which storage engine is in use."
msgstr ""

#: ../source/reference/command/compact.txt:215
msgid ""
"To see how the storage space changes for the collection, run the "
":dbcommand:`collStats` command before and after compaction."
msgstr ""

#: ../source/reference/command/compact.txt:219
msgid "WiredTiger"
msgstr ""

#: ../source/reference/command/compact.txt:221
msgid ""
"On :ref:`WiredTiger <storage-wiredtiger>`, :dbcommand:`compact` attempts "
"to reduce the required storage space for data and indexes in a "
"collection, releasing unneeded disk space to the operating system. The "
"effectiveness of this operation is workload dependent and no disk space "
"may be recovered. This command is useful if you have removed a large "
"amount of data from the collection, and do not plan to replace it."
msgstr ""

#: ../source/reference/command/compact.txt:228
msgid ""
":dbcommand:`compact` may require additional disk space to run on "
"WiredTiger databases."
msgstr ""

#: ../source/reference/command/compact.txt:231
msgid "MMAPv1"
msgstr ""

#: ../source/reference/command/compact.txt:233
msgid ""
"On :ref:`MMAPv1 <storage-mmapv1>`, :dbcommand:`compact` defragments the "
"collection's data files and recreates its indexes. Unused disk space is "
"*not* released to the system, but instead retained for future data. If "
"you wish to reclaim disk space from a MMAPv1 database, you should perform"
" an :term:`initial sync`."
msgstr ""

#: ../source/reference/command/compact.txt:239
msgid ""
":dbcommand:`compact` requires up to 2 gigabytes of additional disk space "
"to run on MMAPv1 databases."
msgstr ""

#: ../source/reference/command/compact.txt:243
msgid ""
":dbcommand:`compact` may increase the total size and number of your data "
"files, especially when run for the first time. However, this will not "
"increase the total collection storage space since storage size is the "
"amount of data allocated within the database files, and not the "
"size/number of the files on the file system."
msgstr ""

#: ../source/reference/command/compact.txt:250
msgid "Replica Sets"
msgstr ""

#: ../source/reference/command/compact.txt:252
msgid ""
":dbcommand:`compact` commands do not replicate to secondaries in a "
":term:`replica set`."
msgstr ""

#: ../source/reference/command/compact.txt:255
msgid "Compact each member separately."
msgstr ""

#: ../source/reference/command/compact.txt:257
msgid ""
"Ideally run :dbcommand:`compact` on a secondary. See option "
"``force:true`` above for information regarding compacting the primary."
msgstr ""

#: ../source/includes/extracts/fact-command-puts-secondary-into-recovering-compact.rst:3
msgid ""
"On secondaries, the :dbcommand:`compact` command forces the secondary to "
"enter :replstate:`RECOVERING` state. Read operations issued to an "
"instance in the :replstate:`RECOVERING` state will fail.  This prevents "
"clients from reading during the operation. When the operation completes, "
"the secondary returns to :replstate:`SECONDARY` state."
msgstr ""

#: ../source/includes/extracts/fact-command-puts-secondary-into-recovering-compact.rst:10
msgid ""
"See :doc:`/reference/replica-states/` for more information about replica "
"set member states."
msgstr ""

#: ../source/includes/extracts/fact-command-puts-secondary-into-recovering-compact.rst:13
msgid ""
"See :doc:`/tutorial/perform-maintence-on-replica-set-members` for an "
"example replica set maintenance procedure to maximize availability during"
" maintenance operations."
msgstr ""

#: ../source/reference/command/compact.txt:263
msgid "Sharded Clusters"
msgstr ""

#: ../source/reference/command/compact.txt:265
msgid ""
":dbcommand:`compact` only applies to :binary:`~bin.mongod` instances. In "
"a sharded environment, run :dbcommand:`compact` on each shard separately "
"as a maintenance operation."
msgstr ""

#: ../source/reference/command/compact.txt:269
msgid ""
"You cannot issue :dbcommand:`compact` against a :binary:`~bin.mongos` "
"instance."
msgstr ""

#: ../source/reference/command/compact.txt:272
msgid "Capped Collections"
msgstr ""

#: ../source/reference/command/compact.txt:274
msgid ""
"On :ref:`MMAPv1 <storage-mmapv1>`, it is not possible to compact "
":term:`capped collections <capped collection>`."
msgstr ""

#: ../source/reference/command/compact.txt:277
msgid ""
"On :ref:`WiredTiger <storage-wiredtiger>`, the :dbcommand:`compact` "
"command will attempt to compact the collection."
msgstr ""

#: ../source/reference/command/compact.txt:280
msgid "Index Building"
msgstr ""

#: ../source/reference/command/compact.txt:284
msgid ""
":binary:`~bin.mongod` rebuilds all indexes in parallel following the "
":dbcommand:`compact` operation."
msgstr ""

#~ msgid "The :dbcommand:`compact` has the behaviors described here."
#~ msgstr ""

# d5bc5cb170a94550909d551142936c08
#~ msgid ""
#~ "Rewrites and defragments all data in "
#~ "a collection, as well as all of"
#~ " the indexes on that collection. "
#~ ":dbcommand:`compact` has the following form:"
#~ msgstr ""

# 8f49c8002ecf413cadcc5d784fd5cba7
#~ msgid ":dbcommand:`compact` has the following fields:"
#~ msgstr ""

# 51bcbf1739724f73a484dccfd0042e65
#~ msgid ""
#~ ":dbcommand:`compact` is similar to "
#~ ":dbcommand:`repairDatabase`; however, "
#~ ":dbcommand:`repairDatabase` operates on an "
#~ "entire database."
#~ msgstr ""

# a3ff349ead944be38ebd3546ddd25dbb
#~ msgid ""
#~ ":dbcommand:`compact` compacts existing documents "
#~ "but does not reset ``paddingFactor`` "
#~ "statistics for the collection. After the"
#~ " :dbcommand:`compact` MongoDB will use the"
#~ " existing ``paddingFactor`` when allocating "
#~ "new records for documents in this "
#~ "collection."
#~ msgstr ""

# dca2da6e20f64f1ab409ab348452a1b5
#~ msgid ""
#~ "Specifying ``paddingBytes`` can be useful "
#~ "if your documents start small but "
#~ "then increase in size significantly. For"
#~ " example, if your documents are "
#~ "initially 40 bytes long and you "
#~ "grow them by 1KB, using ``paddingBytes:"
#~ " 1024`` might be reasonable since "
#~ "using ``paddingFactor: 4.0`` would specify "
#~ "a record size of 160 bytes "
#~ "(``4.0`` times the initial document "
#~ "size), which would only provide a "
#~ "padding of 120 bytes (i.e. record "
#~ "size of 160 bytes minus the "
#~ "document size)."
#~ msgstr ""

# f70ff0a4f20e48d6851c02d47b9b87df
#~ msgid ""
#~ "With the following command, you can "
#~ "use the ``paddingBytes`` option of the"
#~ " :dbcommand:`compact` command to set the"
#~ " padding size to ``100`` bytes on "
#~ "the collection named by ``<collection>``:"
#~ msgstr ""

# b94be86186d843a4910f66ce6894b69b
#~ msgid "Behaviors"
#~ msgstr ""

# 6b4b067569204dd8958831eb0201b2c9
#~ msgid ""
#~ "In MongoDB 2.2, :dbcommand:`compact` blocks"
#~ " activities only for its database. "
#~ "Prior to 2.2, the command blocked "
#~ "all activities."
#~ msgstr ""

# 5dacd85c17fd4e71a3fda497f9efdf39
#~ msgid ""
#~ "You may view the intermediate progress"
#~ " either by viewing the :program:`mongod`"
#~ " log file or by running the "
#~ ":method:`db.currentOp()` in another shell "
#~ "instance."
#~ msgstr ""

# 894e3f68c786485fbd3b8dc64cc12dab
#~ msgid ""
#~ "If you terminate the operation with "
#~ "the :method:`db.killOp() <db.killOp()>` method "
#~ "or restart the server before the "
#~ ":dbcommand:`compact` operation has finished:"
#~ msgstr ""

# fdffb101ed8e4e32aa4fee211498d945
#~ msgid ""
#~ "If you do not have journaling "
#~ "enabled and the :program:`mongod` or "
#~ ":dbcommand:`compact` terminates during the "
#~ "operation, it is impossible to guarantee"
#~ " that the data is in a valid"
#~ " state."
#~ msgstr ""

# e18310700672414bad24a0f60d8f3c76
#~ msgid ""
#~ ":dbcommand:`compact` generally uses less disk"
#~ " space than :dbcommand:`repairDatabase` and "
#~ "is faster. However, the :dbcommand:`compact`"
#~ " command is still slow and blocks "
#~ "other database use. Only use "
#~ ":dbcommand:`compact` during scheduled maintenance"
#~ " periods."
#~ msgstr ""

# 480ab7eb625641008b4d54da63019a17
#~ msgid ""
#~ ":dbcommand:`compact` requires up to 2 "
#~ "gigabytes of additional disk space while"
#~ " running. Unlike :dbcommand:`repairDatabase`, "
#~ ":dbcommand:`compact` does *not* free space "
#~ "on the file system."
#~ msgstr ""

# 1413d246edf54a9d95d667a0ea2a38af
#~ msgid "Size and Number of Data Files"
#~ msgstr ""

# 7e1604e48c1448edb11fe5ef881606b0
#~ msgid ""
#~ ":dbcommand:`compact` commands do not replicate"
#~ " to secondaries in a :term:`replica "
#~ "set`:"
#~ msgstr ""

# c6d8855815804a4a9c4f97dcf802138f
#~ msgid ""
#~ "On secondaries, the |cmd-name| command"
#~ " forces the secondary to enter "
#~ ":replstate:`RECOVERING` state. Read operations "
#~ "issued to an instance in the "
#~ ":replstate:`RECOVERING` state will fail.  This"
#~ " prevents clients from reading during "
#~ "the operation. When the operation "
#~ "completes, the secondary returns "
#~ "to:replstate:`SECONDARY` state."
#~ msgstr ""

# d1e94d0f1dcc4cef856c51edea2ca4a1
#~ msgid ""
#~ ":dbcommand:`compact` is a command issued "
#~ "to a :program:`mongod`. In a sharded "
#~ "environment, run :dbcommand:`compact` on each"
#~ " shard separately as a maintenance "
#~ "operation."
#~ msgstr ""

# b7fff897b3f44bb5a77642cef52a8907
#~ msgid ""
#~ "You cannot issue :dbcommand:`compact` against"
#~ " a :program:`mongos` instance."
#~ msgstr ""

# 7ffb2edd6cf9454ea99af1b64b1a2820
#~ msgid ""
#~ "It is not possible to compact "
#~ ":term:`capped collections <capped collection>` "
#~ "because they don't have padding, and "
#~ "documents cannot grow in these "
#~ "collections. However, the documents of a"
#~ " :term:`capped collection` are not subject"
#~ " to fragmentation."
#~ msgstr ""

#~ msgid ""
#~ ":program:`mongod` rebuilds all indexes in "
#~ "parallel following the :dbcommand:`compact` "
#~ "operation."
#~ msgstr ""

