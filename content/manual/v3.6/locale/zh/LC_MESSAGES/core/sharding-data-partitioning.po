# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/sharding-data-partitioning.txt:5
msgid "Data Partitioning with Chunks"
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:15
msgid ""
"MongoDB uses the :term:`shard key` associated to the collection to "
"partition the data into :term:`chunks<chunk>`. A :term:`chunk` consists "
"of a subset of sharded data. Each chunk has a inclusive lower and "
"exclusive upper range based on the :term:`shard key`."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:22
msgid ""
"The :binary:`~bin.mongos` routes writes to the appropriate chunk based on"
" the :term:`shard key` value. MongoDB splits chunks when they grow beyond"
" the configured :ref:`chunk size<sharding-chunk-size>`. Both inserts and "
"updates can trigger a chunk split."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:27
msgid ""
"The smallest range a chunk can represent is a single unique shard key "
"value. A chunk that only contains documents with a single shard key value"
" cannot be :ref:`split<sharding-chunk-split>`."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:35
msgid "Chunk Size"
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:37
msgid ""
"The default :term:`chunk` size in MongoDB is 64 megabytes. You can "
":doc:`increase or reduce the chunk size </tutorial/modify-chunk-size-in-"
"sharded-cluster>`. Consider the implications of changing the default "
"chunk size:"
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:42
msgid ""
"Small chunks lead to a more even distribution of data at the expense of "
"more frequent migrations. This creates expense at the query routing "
"(:binary:`~bin.mongos`) layer."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:46
msgid ""
"Large chunks lead to fewer migrations. This is more efficient both from "
"the networking perspective *and* in terms of internal overhead at the "
"query routing layer. But, these efficiencies come at the expense of a "
"potentially uneven distribution of data."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:51
msgid ""
"Chunk size affects the :limit:`Maximum Number of Documents Per Chunk to "
"Migrate`."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:54
msgid ""
"Chunk size affects the maximum collection size when sharding an "
":limit:`existing collection<Sharding Existing Collection Data Size>`. "
"Post-sharding, chunk size does not constrain collection size."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:58
msgid ""
"For many deployments, it makes sense to avoid frequent and potentially "
"spurious migrations at the expense of a slightly less evenly distributed "
"data set."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:63
msgid "Limitations"
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:65
msgid ""
"Changing the chunk size affects when chunks split but there are some "
"limitations to its effects."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:68
msgid ""
"Automatic splitting only occurs during inserts or updates. If you lower "
"the chunk size, it may take time for all chunks to split to the new size."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:72
msgid ""
"Splits cannot be \"undone\". If you increase the chunk size, existing "
"chunks must grow through inserts or updates until they reach the new "
"size."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:80
msgid "Chunk Splits"
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:82
msgid ""
"Splitting is a process that keeps chunks from growing too large. When a "
"chunk grows beyond a :ref:`specified chunk size <sharding-chunk-size>`, "
"or if the number of documents in the chunk exceeds :limit:`Maximum Number"
" of Documents Per Chunk to Migrate`, MongoDB splits the chunk based on "
"the shard key values the chunk represent. A chunk may be split into "
"multiple chunks where necessary. Inserts and updates may trigger splits. "
"Splits are an efficient meta-data change. To create splits, MongoDB does "
"*not* migrate any data or affect the shards."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:93
msgid ""
"Splits may lead to an uneven distribution of the chunks for a collection "
"across the shards. In such cases, the balancer redistributes chunks "
"across shards. See :ref:`sharding-internals-balancing` for more details "
"on balancing chunks across shards."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:101
msgid "Chunk Migration"
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:103
msgid ""
"MongoDB migrates chunks in a :term:`sharded cluster` to distribute the "
"chunks of a sharded collection evenly among shards. Migrations may be "
"either:"
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:107
msgid ""
"Manual. Only use manual migration in limited cases, such as to distribute"
" data during bulk inserts. See :doc:`Migrating Chunks Manually </tutorial"
"/migrate-chunks-in-sharded-cluster>` for more details."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:111
msgid ""
"Automatic. The :ref:`balancer <sharding-balancing>` process automatically"
" migrates chunks when there is an uneven distribution of a sharded "
"collection's chunks across the shards. See :ref:`Migration Thresholds "
"<sharding-migration-thresholds>` for more details."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:116
msgid ""
"For more information on the sharded cluster :term:`balancer`, see :ref"
":`sharding-balancing`."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:122
msgid "Balancing"
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:124
msgid ""
"The :ref:`balancer <sharding-balancing-internals>` is a background "
"process that manages chunk migrations. If the difference in number of "
"chunks between the largest and smallest shard exceed the :ref:`migration "
"thresholds<sharding-migration-thresholds>`, the balancer begins migrating"
" chunks across the cluster to ensure an even distribution of data."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:133
msgid ""
"You can :doc:`manage</tutorial/manage-sharded-cluster-balancer>` certain "
"aspects of the balancer. The balancer also respects any :term:`zones "
"<zone>` created as a part of configuring :ref:`zones <zone-sharding>` in "
"a sharded cluster."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:138
msgid ""
"See :ref:`sharding-balancing` for more information on the "
":term:`balancer`."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:145
msgid "Indivisible Chunks"
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:147
msgid ""
"In some cases, chunks can grow beyond the :ref:`specified chunk size "
"<sharding-chunk-size>` but cannot undergo a :ref:`split<sharding-chunk-"
"split>`. The most common scenario is when a chunk represents a single "
"shard key value. Since the chunk cannot split, it continues to grow "
"beyond the chunk size, becoming a jumbo chunk. These jumbo chunks can "
"become a performance bottleneck as they continue to grow, especially if "
"the shard key value occurs with high :ref:`frequency<shard-key-"
"frequency>`."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:155
msgid ""
"The addition of new data or new shards can result in data distribution "
"imbalances within the cluster. A particular shard may acquire more chunks"
" than another shard, or the size of a chunk may grow beyond the "
"configured maximum chunk size."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:160
msgid ""
"MongoDB ensures a balanced cluster using two processes: chunk splitting "
"and the balancer."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:166
msgid "``moveChunk`` directory"
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:168
msgid ""
"In MongoDB 2.6 and MongoDB 3.0, :setting:`sharding.archiveMovedChunks` is"
" enabled by default. All other MongoDB versions have this disabled by "
"default. With :setting:`sharding.archiveMovedChunks` enabled, the source "
"shard archives the documents in the migrated chunks in a directory named "
"after the collection namespace under the ``moveChunk`` directory in the "
":setting:`storage.dbPath`."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:174
msgid ""
"If some error occurs during a :doc:`migration </core/sharding-balancer-"
"administration>`, these files may be helpful in recovering documents "
"affected during the migration."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:178
msgid ""
"Once the migration has completed successfully and there is no need to "
"recover documents from these files, you may safely delete these files. "
"Or, if you have an existing backup of the database that you can use for "
"recovery, you may also delete these files after migration."
msgstr ""

#: ../source/core/sharding-data-partitioning.txt:183
msgid ""
"To determine if all migrations are complete, run "
":method:`sh.isBalancerRunning()` while connected to a "
":binary:`~bin.mongos` instance."
msgstr ""

# 1de4ed4db89746f0af9eee1525e509e5
#~ msgid "On this page"
#~ msgstr ""

# 660a47e3355845958bda6496273b4cbd
#~ msgid ""
#~ "The :program:`mongos` routes writes to "
#~ "the appropriate chunk based on the "
#~ ":term:`shard key` value. MongoDB splits "
#~ "chunks when they grows beyond the "
#~ "configured :ref:`chunk size<sharding-chunk-"
#~ "size>`. Both inserts and updates can "
#~ "trigger a chunk split."
#~ msgstr ""

# af44de8d0b5e452488932a9a5829cb57
#~ msgid ""
#~ "Small chunks lead to a more even"
#~ " distribution of data at the expense"
#~ " of more frequent migrations. This "
#~ "creates expense at the query routing "
#~ "(:program:`mongos`) layer."
#~ msgstr ""

# ff1d1cb8399744eb9541c3a20bf1fd82
#~ msgid ""
#~ "In some cases, chunks can grow "
#~ "beyond the :ref:`specified chunk size "
#~ "<sharding-chunk-size>` but cannot undergo"
#~ " a :ref:`split<sharding-chunk-split>`. The"
#~ " most common scenario is when a "
#~ "chunk represents a single shard key "
#~ "value. Since the chunk cannot split, "
#~ "it continues to grow beyond the "
#~ "chunk size, becoming a :ref:`jumbo chunk"
#~ "<jumbo-chunk>`. These jumbo chunks can "
#~ "become a performance bottleneck as they"
#~ " continue to grow, especially if the"
#~ " shard key value occurs with high "
#~ ":ref:`frequency<shard-key-frequency>`."
#~ msgstr ""

# db7d9674a6fb4cb8b0551d59b942781b
#~ msgid ""
#~ "Starting in MongoDB 2.6, "
#~ ":setting:`sharding.archiveMovedChunks` is enabled by"
#~ " default. With :setting:`sharding.archiveMovedChunks`"
#~ " enabled, the source shard archives "
#~ "the documents in the migrated chunks "
#~ "in a directory named after the "
#~ "collection namespace under the ``moveChunk``"
#~ " directory in the :setting:`storage.dbPath`."
#~ msgstr ""

# 91b6c5726aec446586663dde2f6137f4
#~ msgid ""
#~ "To determine if all migrations are "
#~ "complete, run :method:`sh.isBalancerRunning()` while"
#~ " connected to a :program:`mongos` instance."
#~ msgstr ""

# a898535d8bdc4ff49647ff6dc3982d5b
#~ msgid "sharding"
#~ msgstr ""

# a898535d8bdc4ff49647ff6dc3982d5b
#~ msgid "chunk size"
#~ msgstr ""

