# This table is embedded in source/reference/geospatial-queries.txt
# table structure. all content symbolic.
section: layout
header: [ meta.header1, meta.header2, meta.header3, meta.header4, meta.header5 ]
rows:
  - 1: [ content.query1, content.geometry1, content.surface1, content.unit1, content.index1 ]
  - 2: [ content.query2, content.geometry2, content.surface2, content.unit2, content.index2 ]
  - 3: [ content.query3, content.geometry3, content.surface3, content.unit3, content.index3 ]
  - 4: [ content.query4, content.geometry4, content.surface4, content.unit4, content.index4 ]
  - 5: [ content.query5, content.geometry5, content.surface5, content.unit5, content.index5 ]
  - 6: [ content.query6, content.geometry6, content.surface6, content.unit6, content.index6 ]
  - 7: [ content.query7, content.geometry7, content.surface7, content.unit7, content.index7 ]
  - 8: [ content.query8, content.geometry8, content.surface8, content.unit8, content.index8 ]
  - 9: [ content.query9, content.geometry9, content.surface9, content.unit9, content.index9 ]
  - 10: [ content.query10, content.geometry10, content.surface10, content.unit10, content.index10 ]
---
# table metadata, as meta.<key>
section: meta
header1: "Query Document"
header2: "Geometry of the Query Condition"
header3: "Surface Type for Query Calculation"
header4: "Units for Query Calculation"
header5: "Supported by this Index"
---
# table content, as content.<key>
section: content
query1: |
        **Returns points, lines and polygons**
geometry1: |
            
surface1: |
           
unit1: |
        
unit: |
       
index1: |
         
query2: |
        .. code-block:: javascript

           { $geoWithin : {
             $geometry : <GeoJSON Polygon>
           } }
geometry2: |
           polygon
surface2: |
          sphere
unit2: |
       meters
index2: |
        2dsphere
query3: |
        .. code-block:: javascript

           { $geoIntersects : {
             $geometry : <GeoJSON>
           } }
geometry3: |
           point, line or polygon
surface3: |
          sphere
unit3: |
       meters
index3: |
        2dsphere
query4: |
        .. code-block:: javascript

           { $near : {
             $geometry : <GeoJSON Point>,
             $maxDistance : d
           } }
geometry4: |
           point
surface4: |
          sphere
unit4: |
       meters
index4: |
        2dsphere
        
        The index is required.
query5: |
        **Returns points only**
geometry5: |
            
surface5: |
           
unit5: |
        
index5: |
         
query6: |
        .. code-block:: javascript

           { $geoWithin : {
             $box : [[x1, y1], [x2, y2]]
           } }
geometry6: |
           rectangle
surface6: |
          flat
unit6: |
       flat units
index6: |
        2d
query7: |
        .. code-block:: javascript

           { $geoWithin : {
             $polygon : [[x1, y1],
                         [x1, y2],
                         [x2, y2],
                         [x2, y1]]
           } }
geometry7: |
           polygon
surface7: |
          flat
unit7: |
       flat units
index7: |
        2d
query8: |
        .. code-block:: javascript

           { $geoWithin : {
             $center : [x1, y1],
             $maxDistance : d
           } }
geometry8: |
           circular region
surface8: |
          flat
unit8: |
       flat units
index8: |
        2d
query9: |
        .. code-block:: javascript

           { $geoWithin : {
             $centerSphere :
               [[x, y], radius]
             $maxDistance : d
           } }
geometry9: |
           circular region
surface9: |
          sphere
unit9: |
       radians
index9: |
        2d
        
        2dsphere
query10: |
         .. code-block:: javascript

            { $near : [x1, y1],
              $maxDistance : d
            }
geometry10: |
            point
surface10: |
           flat / flat units
unit10: |
        flat units
index10: |
         2d
         
         The index is required.
...
