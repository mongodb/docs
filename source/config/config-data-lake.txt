.. _config-datalake:

===============================
Configuring {+data-lake-short+}
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview 
--------

You can configure {+data-lake+} using the :ref:`datalake-configuration-file`. 
The configuration defines mappings between your {+data-lake-stores+} 
and {+data-lake-short+}. To learn more about the configuration including 
the configuration fields and format, see :ref:`datalake-configuration-file`.

You can retrieve and update the {+data-lake-short+} configuration by 
connecting a :binary:`~bin.mongo` shell to the {+data-lake-short+}:

1. From the |service| UI, select :guilabel:`Data Lake` from the 
   left-hand navigation. 

#. Click :guilabel:`Connect` for the {+data-lake-short+} to
   which you want to connect.

#. Click :guilabel:`Connect with the Mongo Shell`.

#. Follow the instructions in the :guilabel:`Connect` modal. If you
   already have the :binary:`~bin.mongo` shell installed, ensure
   you are running at least the latest stable release of the 3.6 shell.

.. note::

   Any MongoDB user in the |service| project with the :atlas:`atlasAdmin 
   </security-add-mongodb-users/#atlasAdmin>` role can retrieve and update 
   the {+data-lake-short+} configuration.

.. _datalake-getstorageconfig:

Retrieve {+data-lake-short+} Configuration
------------------------------------------

Once connected to the {+data-lake-short+}, you can use the following
database commands to retrieve the {+data-lake-short+} configuration:

.. code-block:: javascript

   use admin
   db.runCommand( { "storageGetConfig" : 1 } )

The command returns the current {+data-lake-short+} configuration. For 
complete documentation on the configuration fields and format, see 
:ref:`datalake-configuration-format`.

.. _datalake-setstorageconfig:

Set or Update {+data-lake-short+} Configuration
-----------------------------------------------

Once connected to the {+data-lake-short+}, you can use the following
database commands to set or update the {+data-lake-short+} configuration:

.. code-block:: javascript

   use admin
   db.runCommand( { "storageSetConfig" : <config> } )

Replace ``<config>`` with the {+data-lake-short+} configuration. For complete 
documentation on the configuration fields and format, see 
:ref:`datalake-configuration-format`. You can validate your :ref:`configuration 
<datalake-configuration-file>` before setting or updating the 
{+data-lake-short+} configuration by running the :ref:`storageValidateConfig 
<datalake-validatestorageconfig>` command.

To set or update the storage configuration through the |service| UI: 

1. Click :guilabel:`Configuration` for your {+dl+} to view the 
   {+dl+} storage configuration. 

   .. figure:: /images/set-update-config-ui.png
      :figwidth: 600px
      :alt: Image highlighting the Configuration button.

2. Make changes to your storage configuration and click :guilabel:`Save`.

.. _datalake-validatestorageconfig:

Validate {+data-lake-short+} Configuration
------------------------------------------

You can run the following command to validate your {+data-lake-short+} 
:ref:`configuration <datalake-configuration-file>`. 

.. code-block:: javascript

   use admin
   db.runCommand( { "storageValidateConfig" : <config> } )

Replace ``<config>`` with the {+data-lake-short+} configuration. For complete 
documentation on the configuration fields and format, see 
:ref:`datalake-configuration-format`.

The command returns the following if your {+dl+} configuration is valid:

.. code-block:: sh 
   :copyable: false

   { "ok" : 1 }

The command returns the list of errors in the ``errs`` field if your 
{+dl+} storage configuration is invalid:

.. code-block:: sh 
   :copyable: false

   {
	  "ok" : 1,
	  "errs" : [
		  "<error>",
		  "<error>",
		  ...
	  ]
   }

.. _datalake-storagegenconfig:

Generate {+data-lake-short+} Configuration
------------------------------------------

You can run the ``storageGenerateConfig`` command to regenerate a 
{+data-lake-short+} :ref:`configuration <datalake-configuration-file>`. 
The command returns an automatically generated :ref:`configuration 
<datalake-configuration-format>`, which you can then modify and 
:ref:`upload <datalake-setstorageconfig>`. In the automatically 
generated configuration, {+data-lake-short+} regenerates a 
:ref:`database <datalake-databases-reference>` for each :ref:`store 
<datalake-stores-reference>`:

- The :datalakeconf:`databases.[n].name` will be the same as the 
  :datalakeconf:`stores.[n].name` that it maps to.
- Each database will contain up to 3 collections and a wildcard (``*``) 
  collection.

As a result, the :ref:`databases <datalake-databases-reference>` 
array in the generated configuration might be different from the 
:ref:`databases <datalake-databases-reference>` array in your existing 
configuration. 

.. note::

   You must have the ``storageSetConfig`` privilege to run the 
   ``storageGenerateConfig`` command. The :atlas:`atlasAdmin 
   </security-add-mongodb-users/#atlasAdmin>` role has the 
   ``storageSetConfig`` privilege by default.

To generate a {+data-lake-short+} configuration, connect to the {+data-lake-short+} 
and run the following database commands: 

.. code-block:: javascript 

   use admin 
   db.runCommand( { "storageGenerateConfig" : 1 } )

For complete documentation on the configuration fields and format, see :ref:`datalake-configuration-format`. 

.. toctree::
   :titlesonly:
   :hidden:

   /reference/format/data-lake-configuration
   /reference/examples/path-syntax-examples
   /supported-unsupported/supported-partition-attributes
   /supported-unsupported/encryption
