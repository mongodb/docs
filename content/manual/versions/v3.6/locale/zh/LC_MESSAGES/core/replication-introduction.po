#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replication-introduction.txt:5
msgid "Replication Introduction"
msgstr ""

#: ../source/core/replication-introduction.txt:15
msgid ""
"Replication is the process of synchronizing data across multiple servers."
msgstr ""

#: ../source/core/replication-introduction.txt:34
msgid "Replication in MongoDB"
msgstr ""

#: ../source/core/replication-introduction.txt:63
msgid ""
"You may add an extra :program:`mongod` instance to a replica set as an "
":doc:`arbiter </core/replica-set-arbiter>`. Arbiters do not maintain a data "
"set. The purpose of an arbiter is to maintain a quorum in a replica set by "
"responding to heartbeat and election requests by other replica set members. "
"Because they do not store a data set, arbiters can be a good way to provide "
"replica set quorum functionality with a cheaper resource cost than a fully "
"functional replica set member with a data set. If your replica set has an "
"even number of members, add an arbiter to obtain a majority of votes in an "
"election for primary. Arbiters do not require dedicated hardware. For more "
"information on arbiters, see :doc:`/core/replica-set-arbiter`."
msgstr ""

#: ../source/core/replication-introduction.txt:77
msgid ""
"An :doc:`arbiter </core/replica-set-arbiter>` will always be an arbiter "
"whereas a :doc:`primary </core/replica-set-primary>` may step down and "
"become a :doc:`secondary </core/replica-set-secondary>` and a "
":doc:`secondary </core/replica-set-secondary>` may become the primary during"
" an election."
msgstr ""

#: ../source/core/replication-introduction.txt:86
msgid "Asynchronous Replication"
msgstr ""

#: ../source/core/replication-introduction.txt:88
msgid ""
"Secondaries apply operations from the primary asynchronously. By applying "
"operations after the primary, sets can continue to function despite the "
"failure of one or more members. For more information on replication "
"mechanics, see :ref:`replica-set-oplog` and :ref:`replica-set-sync`."
msgstr ""

#: ../source/core/replication-introduction.txt:95
msgid "Automatic Failover"
msgstr ""

#: ../source/core/replication-introduction.txt:106
msgid ""
"See :ref:`replica-set-elections` and :ref:`replica-set-rollbacks` for more "
"information."
msgstr ""

#: ../source/core/replication-introduction.txt:110
msgid "Read Operations"
msgstr ""

#: ../source/core/replication-introduction.txt:126
msgid "Additional Features"
msgstr ""

#: ../source/core/replication-introduction.txt:137
msgid ""
"See :ref:`replica-set-secondary-only-members`, :ref:`replica-set-hidden-"
"members` and :ref:`replica-set-delayed-members` for more information."
msgstr ""

#: ../source/includes/extracts/additional-resources-replication-introduction.rst:4
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-replication-introduction.rst:6
msgid ""
"`Quick Reference Cards <https://www.mongodb.com/lp/misc/quick-reference-"
"cards?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-replication-introduction.rst:7
msgid ""
"`Webinar: Managing Your Mission Critical App - Ensuring Zero Downtime "
"<http://www.mongodb.com/webinar/managing-mission-critical-app-"
"downtime?jmp=docs>`_"
msgstr ""

#: ../source/core/replication-introduction.txt:0
msgid "On this page"
msgstr ""

#: ../source/core/replication-introduction.txt:19
msgid "Redundancy and Data Availability"
msgstr ""

#: ../source/core/replication-introduction.txt:21
msgid ""
"Replication provides redundancy and increases data availability. With "
"multiple copies of data on different database servers, replication provides "
"a level of fault tolerance against the loss of a single database server."
msgstr ""

#: ../source/core/replication-introduction.txt:26
msgid ""
"In some cases, replication can provide increased read capacity as clients "
"can send read operations to different servers. Maintaining copies of data in"
" different data centers can increase data locality and availability for "
"distributed applications. You can also maintain additional copies for "
"dedicated purposes, such as disaster recovery, reporting, or backup."
msgstr ""

#: ../source/core/replication-introduction.txt:36
msgid ""
"A replica set is a group of :program:`mongod` instances that maintain the "
"same data set. A replica set contains several data bearing nodes and "
"optionally one arbiter node. Of the data bearing nodes, one and only one "
"member is deemed the primary node, while the other nodes are deemed "
"secondary nodes."
msgstr ""

#: ../source/core/replication-introduction.txt:42
msgid ""
"The :doc:`primary node </core/replica-set-primary>` receives all write "
"operations. A replica set can have only one primary capable of confirming "
"writes with :writeconcern:`{ w: \"majority\" } <\"majority\">` write "
"concern; although in some circumstances, another mongod instance may "
"transiently believe itself to also be primary. [#edge-cases-2-primaries]_ "
"The primary records all changes to its data sets in its operation log, i.e. "
":doc:`oplog </core/replica-set-oplog>`. For more information on primary node"
" operation, see :doc:`/core/replica-set-primary`."
msgstr ""

#: ../source/core/replication-introduction.txt:54
msgid ""
"The :doc:`secondaries </core/replica-set-secondary>` replicate the primary's"
" oplog and apply the operations to their data sets such that the "
"secondaries' data sets reflect the primary's data set. If the primary is "
"unavailable, an eligible secondary will hold an election to elect itself the"
" new primary. For more information on secondary members, see :doc:`/core"
"/replica-set-secondary`."
msgstr ""

#: ../source/core/replication-introduction.txt:97
msgid ""
"When a primary does not communicate with the other members of the set for "
"more than 10 seconds, an eligible secondary will hold an election to elect "
"itself the new primary. The first secondary to hold an election and receive "
"a majority of the members' votes becomes primary."
msgstr ""

#: ../source/includes/fact-replica-set-protocolVersion1.rst:3
msgid ""
"MongoDB introduces a version 1 of the replication protocol "
"(:rsconf:`protocolVersion: 1 <protocolVersion>`) to reduce replica set "
"failover time and accelerates the detection of multiple simultaneous "
"primaries. New replica sets will, by default, use :rsconf:`protocolVersion: "
"1 <protocolVersion>`. Previous versions of MongoDB use version 0 of the "
"protocol."
msgstr ""

#: ../source/core/replication-introduction.txt:112
msgid ""
"By default, clients read from the primary [#edge-cases-2-primaries]_; "
"however, clients can specify a :doc:`read preference </core/read-"
"preference>` to send read operations to secondaries. :ref:`Asynchronous "
"replication <asynchronous-replication>` to secondaries means that reads from"
" secondaries may return data that does not reflect the state of the data on "
"the primary. For information on reading from replica sets, see :doc:`/core"
"/read-preference`."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-read-uncommitted.rst:1
msgid ""
"In MongoDB, clients can see the results of writes before the writes are "
":term:`durable`:"
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
msgid ""
"Regardless of :doc:`write concern </reference/write-concern>`, other clients"
" using :readconcern:`\"local\"` (i.e. the default) readConcern can see the "
"result of a write operation before the write operation is acknowledged to "
"the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:6
msgid ""
"Clients using :readconcern:`\"local\"` (i.e. the default) readConcern can "
"read data which may be subsequently :doc:`rolled back </core/replica-set-"
"rollbacks>`."
msgstr ""

#: ../source/core/replication-introduction.txt:122
msgid ""
"For more information on read isolations, consistency and recency for "
"MongoDB, see :doc:`/core/read-isolation-consistency-recency`."
msgstr ""

#: ../source/core/replication-introduction.txt:128
msgid ""
"Replica sets provide a number of options to support application needs. For "
"example, you may deploy a replica set with :doc:`members in multiple data "
"centers </core/replica-set-architecture-geographically-distributed>`, or "
"control the outcome of elections by adjusting the "
":rsconf:`members[n].priority` of some members. Replica sets also support "
"dedicated members for reporting, disaster recovery, or backup functions."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may "
"*transiently* believe that they are the primary, but at most, one of them "
"will be able to complete writes with :writeconcern:`{ w: \"majority\" } "
"<\"majority\">` write concern. The node that can complete :writeconcern:`{ "
"w: \"majority\" } <\"majority\">` writes is the current primary, and the "
"other node is a former primary that has not yet recognized its demotion, "
"typically due to a :term:`network partition`. When this occurs, clients that"
" connect to the former primary may observe stale data despite having "
"requested read preference :readmode:`primary`, and new writes to the former "
"primary will eventually roll back."
msgstr ""

#~ msgid "Purpose of Replication"
#~ msgstr ""

#~ msgid ""
#~ "Replication provides redundancy and increases data availability. With "
#~ "multiple copies of data on different database servers, replication protects "
#~ "a database from the loss of a single server. Replication also allows you to "
#~ "recover from hardware failure and service interruptions. With additional "
#~ "copies of the data, you can dedicate one to disaster recovery, reporting, or"
#~ " backup."
#~ msgstr ""

#~ msgid ""
#~ "In some cases, you can use replication to increase read capacity. Clients "
#~ "have the ability to send read and write operations to different servers. You"
#~ " can also maintain copies in different data centers to increase the locality"
#~ " and availability of data for distributed applications."
#~ msgstr ""

#~ msgid ""
#~ "A replica set is a group of :program:`mongod` instances that host the same "
#~ "data set. One :program:`mongod`, the primary, receives all write operations."
#~ " All other instances, secondaries, apply operations from the primary so that"
#~ " they have the same data set."
#~ msgstr ""

#~ msgid ""
#~ "The :doc:`primary </core/replica-set-primary>` accepts all write operations "
#~ "from clients. A replica set can have only one primary. [#edge-"
#~ "cases-2-primaries]_ To support replication, the primary records all changes "
#~ "to its data sets in its :doc:`oplog </core/replica-set-oplog>`. For more "
#~ "information on primary node operation, see :doc:`/core/replica-set-primary`."
#~ msgstr ""

#~ msgid ""
#~ "The :doc:`secondaries </core/replica-set-secondary>` replicate the primary's"
#~ " oplog and apply the operations to their data sets such that the "
#~ "secondaries' data sets reflect the primary's data set. If the primary is "
#~ "unavailable, the replica set will elect a secondary to be primary. For more "
#~ "information on secondary members, see :doc:`/core/replica-set-secondary`."
#~ msgstr ""

#~ msgid ""
#~ "When a primary does not communicate with the other members of the set for "
#~ "more than 10 seconds, the replica set will attempt to select another member "
#~ "to become the new primary. The first secondary that receives a majority of "
#~ "the votes becomes primary."
#~ msgstr ""

#~ msgid ""
#~ "When a replica set has one and only one primary, reads from that primary "
#~ "provide :term:`strict consistency`. [#edge-cases-2-primaries]_"
#~ msgstr ""

#~ msgid ""
#~ "By default, clients read from the primary; however, clients can specify a "
#~ ":doc:`read preference </core/read-preference>` to send read operations to "
#~ "secondaries. :ref:`Asynchronous replication <asynchronous-replication>` to "
#~ "secondaries means that reads from secondaries may return data that does not "
#~ "reflect the state of the data on the primary. For information on reading "
#~ "from replica sets, see :doc:`/core/read-preference`."
#~ msgstr ""

#~ msgid ""
#~ "In MongoDB, clients can see the results of writes before they are made "
#~ "durable:"
#~ msgstr ""

#~ msgid ""
#~ "Regardless of :doc:`write concern </reference/write-concern>`, other clients"
#~ " can see the result of the write operations before the write operation is "
#~ "acknowledged to the issuing client."
#~ msgstr ""

#~ msgid ""
#~ "Clients can read data which may be subsequently :doc:`rolled back </core"
#~ "/replica-set-rollbacks>`."
#~ msgstr ""

#~ msgid ""
#~ "Replica sets provide a number of options to support application needs. For "
#~ "example, you may deploy a replica set with :doc:`members in multiple data "
#~ "centers </core/replica-set-architecture-geographically-distributed>`, or "
#~ "control the outcome of elections by adjusting the "
#~ ":data:`~replSetGetConfig.members[n].priority` of some members. Replica sets "
#~ "also support dedicated members for reporting, disaster recovery, or backup "
#~ "functions."
#~ msgstr ""

#~ msgid ""
#~ "In some circumstances, two nodes in a replica set may *transiently* believe "
#~ "that they are the primary, but at most, one of them will be able to complete"
#~ " writes with :ref:`{w: majority} write concern <wc-w>`. The node that can "
#~ "complete :ref:`{w: majority} <wc-w>` writes is the current primary, and the "
#~ "other node is a former primary that has not yet recognized its demotion, "
#~ "typically due to a :term:`network partition`. When this occurs, clients that"
#~ " connect to the former primary may observe stale data despite having "
#~ "requested read preference :readmode:`primary`."
#~ msgstr ""
