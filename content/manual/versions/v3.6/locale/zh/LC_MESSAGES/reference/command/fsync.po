#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/command/fsync.txt:3
msgid "fsync"
msgstr ""

#: ../source/reference/command/fsync.txt:18
msgid "Definition"
msgstr ""

#: ../source/reference/command/fsync.txt:22
msgid ""
"Forces the :binary:`~bin.mongod` process to flush all pending writes from"
" the storage layer to disk and locks the *entire* :binary:`~bin.mongod` "
"instance to prevent additional writes until the user releases the lock "
"with a corresponding :dbcommand:`fsyncUnlock`. Optionally, you can use "
":dbcommand:`fsync` to lock the :binary:`~bin.mongod` instance and block "
"write operations for the purpose of capturing backups."
msgstr ""

#: ../source/reference/command/fsync.txt:30
msgid ""
"As applications write data, MongoDB records the data in the storage layer"
" and then writes the data to disk within the "
":setting:`~storage.syncPeriodSecs` interval, which is 60 seconds by "
"default. Run :dbcommand:`fsync` when you want to flush writes to disk "
"ahead of that interval."
msgstr ""

#: ../source/reference/command/fsync.txt:36
msgid "The :dbcommand:`fsync` command has the following syntax:"
msgstr ""

#: ../source/reference/command/fsync.txt:42
msgid "The :dbcommand:`fsync` command has the following fields:"
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst:7
msgid "Field"
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst:9
msgid "Type"
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst:11
msgid "Description"
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst:13
msgid "``fsync``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst:15
msgid "integer"
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst:17
#: ../source/includes/apiargs/dbcommand-fsync-field.rst:45
msgid "Enter \"1\" to apply :dbcommand:`fsync`."
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst:21
msgid "``async``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst:23
#: ../source/includes/apiargs/dbcommand-fsync-field.rst:32
msgid "boolean"
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst:25
#: ../source/includes/apiargs/dbcommand-fsync-field.rst:51
msgid ""
"Optional. Runs :dbcommand:`fsync` asynchronously. By default, the "
":dbcommand:`fsync` operation is synchronous."
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst:30
msgid "``lock``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst:34
#: ../source/includes/apiargs/dbcommand-fsync-field.rst:58
msgid ""
"Optional. Takes a lock on the :binary:`~bin.mongod` instance and blocks "
"all write operations. Each :dbcommand:`fsync` with ``lock`` operation "
"takes a lock."
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst
msgid "field integer fsync"
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst
msgid "field boolean async"
msgstr ""

#: ../source/includes/apiargs/dbcommand-fsync-field.rst
msgid "field boolean lock"
msgstr ""

#: ../source/reference/command/fsync.txt:46
msgid ""
"To run the :dbcommand:`fsync` command, use the "
":method:`db.adminCommand()` method:"
msgstr ""

#: ../source/reference/command/fsync.txt:54
msgid "Considerations"
msgstr ""

#: ../source/includes/extracts/wt-fsync-lock-compatibility-command.rst:2
msgid ""
":dbcommand:`fsync` command with the ``lock`` option ensures that the data"
" files are safe to copy using low-level backup utilities such as ``cp``, "
"``scp``, or ``tar``. A :binary:`~bin.mongod` started using the copied "
"files contains user-written data that is indistinguishable from the user-"
"written data on the locked :binary:`~bin.mongod`."
msgstr ""

#: ../source/includes/extracts/wt-fsync-lock-compatibility-command.rst:8
msgid ""
"The data files of a locked :binary:`~bin.mongod` may change due to "
"operations such as :ref:`journaling syncs <journal-process>` or "
":ref:`WiredTiger snapshots <storage-wiredtiger-checkpoints>`.  While this"
" has no affect on the logical data (e.g. data accessed by clients), some "
"backup utilities may detect these changes and emit warnings or fail with "
"errors. For more information on MongoDB- recommended backup utilities and"
" procedures, see :doc:`/core/backups/`."
msgstr ""

#: ../source/reference/command/fsync.txt:59
msgid "Impact on Larger Deployments"
msgstr ""

#: ../source/reference/command/fsync.txt:61
msgid ""
"An :dbcommand:`fsync` lock is only possible on *individual* "
":binary:`~bin.mongod` instances of a sharded cluster, not on the entire "
"cluster. To back up an entire sharded cluster, please see "
":doc:`/administration/backup-sharded-clusters` for more information."
msgstr ""

#: ../source/reference/command/fsync.txt:68
msgid "Alternatives with Journaling"
msgstr ""

#: ../source/reference/command/fsync.txt:70
msgid ""
"If your :binary:`~bin.mongod` has :term:`journaling <journal>` enabled, "
"please use :ref:`file system or volume/block level snapshot tool <backup-"
"with-journaling>` to create a backup of the data set and the journal "
"together as a single unit."
msgstr ""

#: ../source/reference/command/fsync.txt:76
msgid "``fsync`` with ``lock: true``"
msgstr ""

#: ../source/reference/command/fsync.txt:80
msgid ""
"The ``{ fsync: 1, lock: true }`` command now returns a ``lockCount`` in "
"the return document."
msgstr ""

#: ../source/reference/command/fsync.txt:83
msgid ""
"After ``{ fsync: 1, lock: true }`` runs on a :binary:`~bin.mongod`, all "
"write operations will block. The :binary:`~bin.mongo` shell provides a "
"helper method :method:`db.fsyncLock()`."
msgstr ""

#: ../source/reference/command/fsync.txt:90
msgid ""
"The ``{ fsync: 1, lock: true }`` operation maintain a lock count. Each "
"``{ fsync: 1, lock: true }`` operation increments the lock count."
msgstr ""

#: ../source/reference/command/fsync.txt:94
msgid ""
"To unlock a :binary:`~bin.mongod` instance for writes, the lock count "
"must be zero. That is, for a given number of ``{ fsync: 1, lock: true }``"
" operation, you must issue a corresponding number of unlock operations in"
" order to unlock the instance for writes. To unlock, see "
":method:`db.fsyncUnlock()`."
msgstr ""

#: ../source/reference/command/fsync.txt:101
msgid "Examples"
msgstr ""

#: ../source/reference/command/fsync.txt:104
msgid "Run Asynchronously"
msgstr ""

#: ../source/reference/command/fsync.txt:106
msgid ""
"The :dbcommand:`fsync` operation is synchronous by default. To run "
":dbcommand:`fsync` asynchronously, use the ``async`` field set to "
"``true``:"
msgstr ""

#: ../source/reference/command/fsync.txt:114
msgid ""
"The operation returns immediately. To view the status of the "
":dbcommand:`fsync` operation, check the output of "
":method:`db.currentOp()`."
msgstr ""

#: ../source/reference/command/fsync.txt:119
msgid "Lock ``mongod`` Instance"
msgstr ""

#: ../source/reference/command/fsync.txt:125
msgid ""
"The primary use of :dbcommand:`fsync` is to lock the "
":binary:`~bin.mongod` instance in order to back up the files within "
":binary:`~bin.mongod`\\ 's :setting:`~storage.dbPath`. The operation "
"flushes all data to the storage layer and blocks all write operations "
"until you unlock the :binary:`~bin.mongod` instance."
msgstr ""

#: ../source/reference/command/fsync.txt:130
msgid "To lock the database, use the ``lock`` field set to ``true``:"
msgstr ""

#: ../source/reference/command/fsync.txt:136
msgid ""
"The operation returns a document that includes the status of the "
"operation and the ``lockCount``:"
msgstr ""

#: ../source/reference/command/fsync.txt:148
msgid ""
"You may continue to perform read operations on a :binary:`~bin.mongod` "
"instance that has a :dbcommand:`fsync` lock. However, after the first "
"write operation all subsequent read operations wait until you unlock the "
":binary:`~bin.mongod` instance."
msgstr ""

#: ../source/reference/command/fsync.txt:154
msgid "The ``{ fsync: 1, lock: true }`` operation maintain a lock count."
msgstr ""

#: ../source/reference/command/fsync.txt:156
msgid ""
"To unlock a :binary:`~bin.mongod` instance for writes, the lock count "
"must be zero. That is, for a given number of ``{ fsync: 1, lock: true }``"
" operation, you must issue a corresponding number of unlock operations in"
" order to unlock the instance for writes."
msgstr ""

#: ../source/reference/command/fsync.txt:162
msgid "Unlock ``mongod`` Instance"
msgstr ""

#: ../source/reference/command/fsync.txt:164
msgid "To unlock the :binary:`~bin.mongod`, use :method:`db.fsyncUnlock()`:"
msgstr ""

#: ../source/reference/command/fsync.txt:170
msgid ""
"Repeat the :method:`db.fsyncUnlock()` to reduce the lock count to zero to"
" unlock the instance for writes."
msgstr ""

#: ../source/reference/command/fsync.txt:174
msgid "Check Lock Status"
msgstr ""

#: ../source/reference/command/fsync.txt:176
msgid ""
"To check the state of the fsync lock, use :method:`db.currentOp()`. Use "
"the following JavaScript function in the shell to test if "
":binary:`~bin.mongod` instance is currently locked:"
msgstr ""

#: ../source/reference/command/fsync.txt:190
msgid ""
"After loading this function into your :binary:`~bin.mongo` shell session "
"call it, with the following syntax:"
msgstr ""

#: ../source/reference/command/fsync.txt:197
msgid ""
"This function will return ``true`` if the :binary:`~bin.mongod` instance "
"is currently locked and ``false`` if the :binary:`~bin.mongod` is not "
"locked."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid ""
#~ "An :dbcommand:`fsync` lock is only "
#~ "possible on *individual* :program:`mongod` "
#~ "instances of a sharded cluster, not "
#~ "on the entire cluster. To backup "
#~ "an entire sharded cluster, please see"
#~ " :doc:`/administration/backup-sharded-clusters` "
#~ "for more information."
#~ msgstr ""

#~ msgid ""
#~ "If your :program:`mongod` has "
#~ ":term:`journaling <journal>` enabled, consider "
#~ "using :ref:`another method <backup-with-"
#~ "journaling>` to create a back up "
#~ "of the data set."
#~ msgstr ""

#~ msgid ""
#~ "After :dbcommand:`fsync`, with lock, runs "
#~ "on a :program:`mongod`, all write "
#~ "operations will block until a subsequent"
#~ " unlock. Read operations *may* also "
#~ "block. As a result, :dbcommand:`fsync`, "
#~ "with lock, is not a reliable "
#~ "mechanism for making a :program:`mongod` "
#~ "instance operate in a read-only "
#~ "mode."
#~ msgstr ""

#~ msgid ""
#~ "When calling :dbcommand:`fsync` with lock, "
#~ "ensure that the connection remains open"
#~ " to allow a subsequent call to "
#~ ":method:`db.fsyncUnlock()`."
#~ msgstr ""

#~ msgid ""
#~ "The :dbcommand:`fsync` operation is "
#~ "synchronous by default To run "
#~ ":dbcommand:`fsync` asynchronously, use the "
#~ "``async`` field set to ``true``:"
#~ msgstr ""

# fbc227ad652a48648987102d05b19d29
#~ msgid "On this page"
#~ msgstr ""

# 108c2866f6c840c0b634732634ec788e
#~ msgid ""
#~ "Forces the :program:`mongod` process to "
#~ "flush all pending writes from the "
#~ "storage layer to disk. Optionally, you"
#~ " can use :dbcommand:`fsync` to lock "
#~ "the :program:`mongod` instance and block "
#~ "write operations for the purpose of "
#~ "capturing backups."
#~ msgstr ""

# 0c3eff60a0954d7785706e067f1b3bf0
#~ msgid "Wired Tiger Compatibility"
#~ msgstr ""

# 0ec7748569b24563ad71d576c40e8551
# bd4fc8cf726b42d8968a5c958314e94c
#~ msgid ""
#~ ":dbcommand:`fsync` command with the ``lock``"
#~ " option can ensure that the data "
#~ "files do not change for MongoDB "
#~ "instances using either the MMAPv1 or "
#~ "the WiredTiger storage engines, thus "
#~ "providing consistency for the purposes "
#~ "of creating backups."
#~ msgstr ""

# 66052e9f7ba04102a2c03c48a3522463
# 68df5f0a2f864663803074d6d48e8030
#~ msgid ""
#~ "In previous MongoDB versions, "
#~ ":dbcommand:`fsync` command with the ``lock``"
#~ " option *cannot* guarantee a consistent "
#~ "set of files for low-level backups"
#~ " (e.g. via file copy ``cp``, ``scp``,"
#~ " ``tar``) for WiredTiger."
#~ msgstr ""

# 0628cc4a22ad46f09ccb9a7bded6a055
#~ msgid ""
#~ "An :dbcommand:`fsync` lock is only "
#~ "possible on *individual* :program:`mongod` "
#~ "instances of a sharded cluster, not "
#~ "on the entire cluster. To back up"
#~ " an entire sharded cluster, please "
#~ "see :doc:`/administration/backup-sharded-clusters`"
#~ " for more information."
#~ msgstr ""

# 71fec146d77b41ac849da07357506473
#~ msgid ""
#~ "If your :program:`mongod` has "
#~ ":term:`journaling <journal>` enabled, consider "
#~ "using :ref:`another method <backup-with-"
#~ "journaling>` to create a backup of "
#~ "the data set."
#~ msgstr ""

# 4315f58c00a34209ad8b48b440ad9ce4
#~ msgid "Impact on Read Operations"
#~ msgstr ""

# 5d89b787145f4731a6f068f09df0003f
#~ msgid ""
#~ "After :dbcommand:`fsync` with the ``lock`` "
#~ "option runs on a :program:`mongod`, all"
#~ " write operations will block until a"
#~ " subsequent unlock. Read operations *may*"
#~ " also block. As a result, "
#~ ":dbcommand:`fsync` with lock is not a"
#~ " reliable mechanism for making a "
#~ ":program:`mongod` instance operate in a "
#~ "read-only mode."
#~ msgstr ""

# 5ce7a56010e848838a310e2667d16ed5
#~ msgid ""
#~ "Blocked read operations prevent verification"
#~ " of authentication. Such reads are "
#~ "necessary to establish new connections "
#~ "to a :program:`mongod` that enforces "
#~ "authorization checks."
#~ msgstr ""

# 1fa2365673fb46858cdf2b87a9cf199a
#~ msgid ""
#~ "When calling :dbcommand:`fsync` with the "
#~ "``lock`` option, ensure that the "
#~ "connection remains open to allow a "
#~ "subsequent call to :method:`db.fsyncUnlock()`."
#~ msgstr ""

# eeaeb8c89d1945468a859ce064481c89
#~ msgid "Closing the connection may make it difficult to release the lock."
#~ msgstr ""

# cbc5aa9df8ef4b20bc63f81d0d764e4a
#~ msgid ""
#~ "The primary use of :dbcommand:`fsync` is"
#~ " to lock the :program:`mongod` instance "
#~ "in order to back up the files "
#~ "within :program:`mongod`\\ 's "
#~ ":setting:`~storage.dbPath`. The operation flushes"
#~ " all data to the storage layer "
#~ "and blocks all write operations until"
#~ " you unlock the :program:`mongod` instance."
#~ msgstr ""

# 374185118fd74a7fb2db5183266f3ae2
#~ msgid ""
#~ "You may continue to perform read "
#~ "operations on a :program:`mongod` instance "
#~ "that has a :dbcommand:`fsync` lock. "
#~ "However, after the first write operation"
#~ " all subsequent read operations wait "
#~ "until you unlock the :program:`mongod` "
#~ "instance."
#~ msgstr ""

# 923fe28b71cf4a73af798cea746d2c58
#~ msgid "To unlock the :program:`mongod`, use :method:`db.fsyncUnlock()`:"
#~ msgstr ""

# 20c654b0d72e4eac936e0b48a7ee4219
#~ msgid ""
#~ "To check the state of the fsync"
#~ " lock, use :method:`db.currentOp()`. Use "
#~ "the following JavaScript function in the"
#~ " shell to test if :program:`mongod` "
#~ "instance is currently locked:"
#~ msgstr ""

# eb15068039de42109bec6f2d9262532c
#~ msgid ""
#~ "After loading this function into your"
#~ " :program:`mongo` shell session call it,"
#~ " with the following syntax:"
#~ msgstr ""

# d708441427424eaaba0937f29f78499d
#~ msgid ""
#~ "This function will return ``true`` if"
#~ " the :program:`mongod` instance is "
#~ "currently locked and ``false`` if the"
#~ " :program:`mongod` is not locked."
#~ msgstr ""

