#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/bulk-write-operations.txt:3
msgid "Bulk Write Operations"
msgstr ""

#: ../source/core/bulk-write-operations.txt:14
msgid "Overview"
msgstr ""

#: ../source/core/bulk-write-operations.txt:16
msgid ""
"MongoDB provides clients the ability to perform write operations in bulk."
" Bulk write operations affect a *single* collection. MongoDB allows "
"applications to determine the acceptable level of acknowledgement "
"required for bulk write operations."
msgstr ""

#: ../source/core/bulk-write-operations.txt:23
msgid ""
"The :method:`db.collection.bulkWrite()` method provides the ability to "
"perform bulk insert, update, and remove operations. MongoDB also supports"
" bulk insert through the :method:`db.collection.insertMany()`."
msgstr ""

#: ../source/core/bulk-write-operations.txt:29
msgid "Ordered vs Unordered Operations"
msgstr ""

#: ../source/core/bulk-write-operations.txt:31
msgid "Bulk write operations can be either *ordered* or *unordered*."
msgstr ""

#: ../source/core/bulk-write-operations.txt:33
msgid ""
"With an ordered list of operations, MongoDB executes the operations "
"serially. If an error occurs during the processing of one of the write "
"operations, MongoDB will return without processing any remaining write "
"operations in the list. See :ref:`ordered Bulk Write<bulkwrite-example-"
"bulk-write-operation>`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:39
msgid ""
"With an unordered list of operations, MongoDB can execute the operations "
"in parallel, but this behavior is not guaranteed. If an error occurs "
"during the processing of one of the write operations, MongoDB will "
"continue to process remaining write operations in the list. See :ref"
":`bulkwrite-example-unordered-bulk-write`."
msgstr ""

#: ../source/core/bulk-write-operations.txt:46
msgid ""
"Executing an ordered list of operations on a sharded collection will "
"generally be slower than executing an unordered list since with an "
"ordered list, each operation must wait for the previous operation to "
"finish."
msgstr ""

#: ../source/core/bulk-write-operations.txt:51
msgid ""
"By default, :method:`~db.collection.bulkWrite()` performs ``ordered`` "
"operations. To specify ``unordered`` write operations, set ``ordered : "
"false`` in the options document."
msgstr ""

#: ../source/core/bulk-write-operations.txt:55
msgid "See :ref:`bulkwrite-write-operations-executionofoperations`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:58
msgid "bulkWrite() Methods"
msgstr ""

#: ../source/core/bulk-write-operations.txt:60
msgid ""
":method:`~db.collection.bulkWrite()` supports the following write "
"operations:"
msgstr ""

#: ../source/core/bulk-write-operations.txt:62
msgid ":ref:`bulkwrite-write-operations-insertOne`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:63
msgid ":ref:`updateOne <bulkwrite-write-operations-updateOneMany>`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:64
msgid ":ref:`updateMany <bulkwrite-write-operations-updateOneMany>`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:65
msgid ":ref:`bulkwrite-write-operations-replaceOne`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:66
msgid ":ref:`deleteOne <bulkwrite-write-operations-deleteOneMany>`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:67
msgid ":ref:`deleteMany <bulkwrite-write-operations-deleteOneMany>`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:69
msgid ""
"Each write operation is passed to :method:`~db.collection.bulkWrite()` as"
" a document in an array."
msgstr ""

#: ../source/core/bulk-write-operations.txt:72
msgid "For example, the following performs multiple write operations:"
msgstr ""

#: ../source/core/bulk-write-operations.txt:74
msgid "The ``characters`` collection contains the following documents:"
msgstr ""

#: ../source/core/bulk-write-operations.txt:82
msgid ""
"The following :method:`~db.collection.bulkWrite()` performs multiple "
"operations on the collection:"
msgstr ""

#: ../source/core/bulk-write-operations.txt:128
msgid "The operation returns the following:"
msgstr ""

#: ../source/core/bulk-write-operations.txt:147
msgid ""
"For more examples, see :ref:`bulkWrite() Examples <bulkwrite-example-"
"bulk-write-operation>`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:151
msgid "Strategies for Bulk Inserts to a Sharded Collection"
msgstr ""

#: ../source/core/bulk-write-operations.txt:153
msgid ""
"Large bulk insert operations, including initial data inserts or routine "
"data import, can affect :term:`sharded cluster` performance. For bulk "
"inserts, consider the following strategies:"
msgstr ""

#: ../source/core/bulk-write-operations.txt:158
msgid "Pre-Split the Collection"
msgstr ""

#: ../source/core/bulk-write-operations.txt:160
msgid ""
"If the sharded collection is empty, then the collection has only one "
"initial :term:`chunk`, which resides on a single shard. MongoDB must then"
" take time to receive data, create splits, and distribute the split "
"chunks to the available shards. To avoid this performance cost, you can "
"pre-split the collection, as described in :doc:`/tutorial/split-chunks-"
"in-sharded-cluster`."
msgstr ""

#: ../source/core/bulk-write-operations.txt:168
msgid "Unordered Writes to ``mongos``"
msgstr ""

#: ../source/core/bulk-write-operations.txt:170
msgid ""
"To improve write performance to sharded clusters, use "
":method:`~db.collection.bulkWrite()` with the optional parameter "
"``ordered`` set to ``false``. :binary:`~bin.mongos` can attempt to send "
"the writes to multiple shards simultaneously. For *empty* collections, "
"first pre-split the collection as described in :doc:`/tutorial/split-"
"chunks-in-sharded-cluster`."
msgstr ""

#: ../source/core/bulk-write-operations.txt:178
msgid "Avoid Monotonic Throttling"
msgstr ""

#: ../source/core/bulk-write-operations.txt:180
msgid ""
"If your shard key increases monotonically during an insert, then all "
"inserted data goes to the last chunk in the collection, which will always"
" end up on a single shard. Therefore, the insert capacity of the cluster "
"will never exceed the insert capacity of that single shard."
msgstr ""

#: ../source/core/bulk-write-operations.txt:185
msgid ""
"If your insert volume is larger than what a single shard can process, and"
" if you cannot avoid a monotonically increasing shard key, then consider "
"the following modifications to your application:"
msgstr ""

#: ../source/core/bulk-write-operations.txt:189
msgid ""
"Reverse the binary bits of the shard key. This preserves the information "
"and avoids correlating insertion order with increasing sequence of "
"values."
msgstr ""

#: ../source/core/bulk-write-operations.txt:193
msgid "Swap the first and last 16-bit words to \"shuffle\" the inserts."
msgstr ""

#: ../source/core/bulk-write-operations.txt:215
msgid ""
":ref:`sharding-shard-key` for information on choosing a sharded key. Also"
" see :ref:`Shard Key Internals <sharding-internals-shard-keys>` (in "
"particular, :ref:`sharding-internals-operations-and-reliability`)."
msgstr ""

#~ msgid ""
#~ "New :method:`Bulk` methods provide the "
#~ "ability to perform bulk insert, update,"
#~ " and remove operations. MongoDB also "
#~ "supports bulk insert through passing an"
#~ " array of documents to the "
#~ ":method:`db.collection.insert()` method."
#~ msgstr ""

#~ msgid ""
#~ "Previous versions of MongoDB provided "
#~ "the ability for bulk inserts only. "
#~ "With previous versions, clients could "
#~ "perform bulk inserts by passing an "
#~ "array of documents to the "
#~ ":v2.4:`db.collection.insert() </core/bulk-inserts>` "
#~ "method. To see the documentation for "
#~ "earlier versions, see :v2.4:`Bulk Inserts "
#~ "</core/bulk-inserts>`."
#~ msgstr ""

#~ msgid ""
#~ "Bulk write operations can be either "
#~ "*ordered* or *unordered*. With an "
#~ "ordered list of operations, MongoDB "
#~ "executes the operations serially. If an"
#~ " error occurs during the processing "
#~ "of one of the write operations, "
#~ "MongoDB will return without processing "
#~ "any remaining write operations in the"
#~ " list."
#~ msgstr ""

#~ msgid ""
#~ "With an unordered list of operations,"
#~ " MongoDB can execute the operations "
#~ "in parallel. If an error occurs "
#~ "during the processing of one of "
#~ "the write operations, MongoDB will "
#~ "continue to process remaining write "
#~ "operations in the list."
#~ msgstr ""

#~ msgid "``Bulk`` Methods"
#~ msgstr ""

#~ msgid "To use the :method:`Bulk()` methods:"
#~ msgstr ""

#~ msgid ""
#~ "Initialize a list of operations using"
#~ " either :method:`db.collection.initializeUnorderedBulkOp()`"
#~ " or :method:`db.collection.initializeOrderedBulkOp()`."
#~ msgstr ""

#~ msgid "Add write operations to the list using the following methods:"
#~ msgstr ""

#~ msgid ":method:`Bulk.insert()`"
#~ msgstr ""

#~ msgid ":method:`Bulk.find()`"
#~ msgstr ""

#~ msgid ":method:`Bulk.find.upsert()`"
#~ msgstr ""

#~ msgid ":method:`Bulk.find.update()`"
#~ msgstr ""

#~ msgid ":method:`Bulk.find.updateOne()`"
#~ msgstr ""

#~ msgid ":method:`Bulk.find.replaceOne()`"
#~ msgstr ""

#~ msgid ":method:`Bulk.find.remove()`"
#~ msgstr ""

#~ msgid ":method:`Bulk.find.removeOne()`"
#~ msgstr ""

#~ msgid ""
#~ "To execute the list of operations, "
#~ "use the :method:`Bulk.execute()` method. You"
#~ " can specify the write concern for"
#~ " the list in the :method:`Bulk.execute()`"
#~ " method."
#~ msgstr ""

#~ msgid "Once executed, you cannot re-execute the list without reinitializing."
#~ msgstr ""

#~ msgid "For example,"
#~ msgstr ""

#~ msgid ""
#~ "For more examples, refer to the "
#~ "reference page for each "
#~ ":doc:`/reference/method/js-bulk` method. For "
#~ "information and examples on performing "
#~ "bulk insert using the "
#~ ":method:`db.collection.insert()`, see "
#~ ":method:`db.collection.insert()`."
#~ msgstr ""

#~ msgid ":ref:`rel-notes-write-operations`"
#~ msgstr ""

#~ msgid "``Bulk`` Execution Mechanics"
#~ msgstr ""

#~ msgid ""
#~ "When executing an :method:`ordered "
#~ "<db.collection.initializeOrderedBulkOp()>` list of "
#~ "operations, MongoDB groups adjacent operations"
#~ " by the :data:`operation type <batchType>`."
#~ " When executing an :method:`unordered "
#~ "<db.collection.initializeUnorderedBulkOp()>` list of "
#~ "operations, MongoDB groups and may also"
#~ " reorder the operations to increase "
#~ "performance. As such, when performing "
#~ "*unordered* bulk operations, applications "
#~ "should not depend on the ordering."
#~ msgstr ""

#~ msgid ""
#~ "Each group of operations can have "
#~ "at most :limit:`1000 operations <Write "
#~ "Command Operation Limit Size>`. If a "
#~ "group exceeds this :limit:`limit <Write "
#~ "Command Operation Limit Size>`, MongoDB "
#~ "will divide the group into smaller "
#~ "groups of 1000 or less. For "
#~ "example, if the bulk operations list "
#~ "consists of 2000 insert operations, "
#~ "MongoDB creates 2 groups, each with "
#~ "1000 operations."
#~ msgstr ""

#~ msgid ""
#~ "The sizes and grouping mechanics are "
#~ "internal performance details and are "
#~ "subject to change in future versions."
#~ msgstr ""

#~ msgid ""
#~ "To see how the operations are "
#~ "grouped for a bulk operation execution,"
#~ " call :method:`Bulk.getOperations()` *after* the"
#~ " execution."
#~ msgstr ""

#~ msgid "For more information, see :method:`Bulk.execute()`."
#~ msgstr ""

#~ msgid "Insert to Multiple ``mongos``"
#~ msgstr ""

#~ msgid ""
#~ "To parallelize import processes, send "
#~ "bulk insert or insert operations to "
#~ "more than one :program:`mongos` instance. "
#~ "For *empty* collections, first pre-split"
#~ " the collection as described in "
#~ ":doc:`/tutorial/split-chunks-in-sharded-"
#~ "cluster`."
#~ msgstr ""

#~ msgid "Example"
#~ msgstr ""

#~ msgid "On this page"
#~ msgstr ""

#~ msgid ""
#~ "To improve write performance to sharded"
#~ " clusters, use :method:`~db.collection.bulkWrite()` "
#~ "with the optional parameter ``ordered`` "
#~ "set to ``false``. :program:`mongos` can "
#~ "attempt to send the writes to "
#~ "multiple shards simultaneously. For *empty*"
#~ " collections, first pre-split the "
#~ "collection as described in :doc:`/tutorial"
#~ "/split-chunks-in-sharded-cluster`."
#~ msgstr ""

