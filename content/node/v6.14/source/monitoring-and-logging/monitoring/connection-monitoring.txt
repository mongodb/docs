.. _node-connection-pool-monitoring:

==========================
Connection Pool Monitoring
==========================

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :keywords: code example, node.js, watch, deployment

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecols

Overview
--------

This guide shows you how to monitor the driver's **connection pool**. A
connection pool is a set of open TCP connections your driver maintains
with a MongoDB instance. Connection pools help reduce the number of
network handshakes your application needs to perform and can help your
application run faster.

The following sections demonstrate how to record connection pool events in your
application and explore the information provided in these events.

Event Subscription Examples
---------------------------

You can access one or more connection pool events using the driver by
subscribing to them in your application. The following example demonstrates
connecting to a replica set and subscribing to one of the connection
pool monitoring events created by the MongoDB deployment:

.. literalinclude:: /code-snippets/monitoring/cpm-subscribe.js
   :language: javascript

Connection pool monitoring events can aid you in debugging and understanding
the behavior of your application's connection pool. The following example uses connection
pool monitoring events to return a count of checked-out connections in the pool:

.. literalinclude:: /code-snippets/monitoring/cpm-status.js
   :language: javascript

Event Descriptions
------------------

You can subscribe to any of the following connection pool monitoring events:

.. list-table::
   :widths: 33 67
   :header-rows: 1

   * - Event Name
     - Description

   * - ``connectionPoolCreated``
     - Created when a connection pool is created.

   * - ``connectionPoolReady``
     - Created when a connection pool is ready.

   * - ``connectionPoolClosed``
     - Created when a connection pool is closed before server
       instance destruction.

   * - ``connectionCreated``
     - Created when a connection is created, but not necessarily
       when it is used for an operation.

   * - ``connectionReady``
     - Created after a connection has successfully completed a
       handshake and is ready to be used for operations.

   * - ``connectionClosed``
     - Created when a connection is closed.

   * - ``connectionCheckOutStarted``
     - Created when an operation attempts to acquire a connection for
       execution.

   * - ``connectionCheckOutFailed``
     - Created when an operation fails to acquire a connection for
       execution.

   * - ``connectionCheckedOut``
     - Created when an operation successfully acquires a connection for
       execution.

   * - ``connectionCheckedIn``
     - Created when a connection is checked back into the pool after an operation
       is executed.

   * - ``connectionPoolCleared``
     - Created when a connection pool is cleared.

Example Event Documents
-----------------------

The following sections show sample output for each type of connection
pool monitoring event.

connectionPoolCreated
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none
   :copyable: false

   ConnectionPoolCreatedEvent {
     time: 2023-02-13T15:54:06.944Z,
     address: '...',
     options: {...}
   }

connectionPoolReady
~~~~~~~~~~~~~~~~~~~

.. code-block:: none
   :copyable: false

   ConnectionPoolReadyEvent {
     time: 2023-02-13T15:56:38.440Z,
     address: '...'
   }

connectionPoolClosed
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none
   :copyable: false

   ConnectionPoolClosedEvent {
     time: 2023-02-13T15:56:38.440Z,
     address: '...'
   }

connectionCreated
~~~~~~~~~~~~~~~~~

.. code-block:: none
   :copyable: false

   ConnectionCreatedEvent {
     time: 2023-02-13T15:56:38.291Z,
     address: '...',
     connectionId: 1
   }

connectionReady
~~~~~~~~~~~~~~~

.. code-block:: none
   :copyable: false

   ConnectionReadyEvent {
     time: 2023-02-13T15:56:38.291Z,
     address: '...',
     connectionId: 1,
     durationMS: 60
   }

connectionClosed
~~~~~~~~~~~~~~~~

.. code-block:: none
   :copyable: false

   ConnectionClosedEvent {
     time: 2023-02-13T15:56:38.439Z,
     address: '...',
     connectionId: 1,
     reason: 'poolClosed',
     serviceId: undefined
   }

connectionCheckOutStarted
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none
   :copyable: false

   ConnectionCheckOutStartedEvent {
     time: 2023-02-13T15:56:38.291Z,
     address: '...',
   }

connectionCheckOutFailed
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none
   :copyable: false

   ConnectionCheckOutFailedEvent {
     time: 2023-02-13T15:56:38.291Z,
     address: '...',
     reason: ...,
     durationMS: 60
   }

connectionCheckedOut
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none
   :copyable: false

   ConnectionCheckedOutEvent {
     time: 2023-02-13T15:54:07.188Z,
     address: '...',
     connectionId: 1,
     durationMS: 60
   }

connectionCheckedIn
~~~~~~~~~~~~~~~~~~~

.. code-block:: none
   :copyable: false

   ConnectionCheckedInEvent {
     time: 2023-02-13T15:54:07.189Z,
     address: '...',
     connectionId: 1
   }

connectionPoolCleared
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none
   :copyable: false

   ConnectionPoolClearedEvent {
     time: 2023-02-13T15:56:38.439Z,
     address: '...',
     serviceId: undefined,
     interruptInUseConnections: true,
   }

