=========================
db.collection.insertOne()
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.collection.insertOne()

   .. versionadded:: 3.2

   Inserts a document into a collection.

   The :method:`~db.collection.insertOne()` method has the following
   syntax:

   .. code-block:: javascript

      db.collection.insertOne(
         <document>,
         {
            writeConcern: <document>
         }
      )

   .. include:: /includes/apiargs/method-db.collection.insertOne-param.rst

   :returns:

      A document containing:

      - A boolean ``acknowledged`` as ``true`` if the operation ran with
        :term:`write concern` or ``false`` if write concern was disabled.

      - A field ``insertedId`` with the ``_id`` value of the
        inserted document.

Behaviors
---------

Collection Creation
~~~~~~~~~~~~~~~~~~~

If the collection does not exist, then the
:method:`~db.collection.insertOne()` method creates the collection.

``_id`` Field
~~~~~~~~~~~~~

If the document does not specify an :term:`_id` field, then :binary:`~bin.mongod`
will add the ``_id`` field and assign a unique
:method:`ObjectId` for the document before inserting. Most
drivers create an ObjectId and insert the ``_id`` field, but the
:binary:`~bin.mongod` will create and populate the ``_id`` if the driver or
application does not.

If the document contains an ``_id`` field, the ``_id`` value must be
unique within the collection to avoid duplicate key error.

Explainability
~~~~~~~~~~~~~~

.. |write-method| replace:: :method:`~db.collection.insertOne()`
.. |old-write-method| replace:: :method:`~db.collection.insert()`


.. include:: /includes/fact-bulkwrite-explainable.rst

Error Handling
~~~~~~~~~~~~~~

On error, :method:`~db.collection.insertOne()` throws either a ``writeError``
or ``writeConcernError`` exception.

.. _insertOne-examples:

Examples
--------

Insert a Document without Specifying an ``_id`` Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following example, the document passed to the
:method:`~db.collection.insertOne()` method does not contain the ``_id``
field:

.. code-block:: javascript

   try {
      db.products.insertOne( { item: "card", qty: 15 } );
   } catch (e) {
      print (e);
   };

The operation returns the following document:

.. code-block:: javascript

   {
      "acknowledged" : true,
      "insertedId" : ObjectId("56fc40f9d735c28df206d078")
   }


Because the documents did not include ``_id``,
:binary:`~bin.mongod` creates and adds the ``_id`` field and
assigns it a unique :method:`ObjectId` value.

.. include:: /includes/fact-object-id-may-differ.rst

Insert a Document Specifying an ``_id`` Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following example, the document passed to the
:method:`~db.collection.insertOne()` method includes the ``_id`` field.
The value of ``_id`` must be unique within the collection to avoid
duplicate key error.

.. code-block:: javascript

   try {
      db.products.insertOne( { _id: 10, item: "box", qty: 20 } );
   } catch (e) {
      print (e);
   }

The operation returns the following:

.. code-block:: javascript

   { "acknowledged" : true, "insertedId" : 10 }

Inserting an duplicate value for any key that is part of a :term:`unique
index`, such as ``_id``, throws an exception. The following attempts to insert
a document with a ``_id`` value that already exists:

.. code-block:: javascript

   try {
      db.products.insertOne( { _id: 10, "item" : "packing peanuts", "qty" : 200 } );
   } catch (e) {
      print (e);
   }

Since ``_id: 10`` already exists, the following exception is thrown:

.. code-block:: javascript

   WriteError({
      "index" : 0,
      "code" : 11000,
      "errmsg" : "E11000 duplicate key error collection: inventory.products index: _id_ dup key: { : 10.0 }",
      "op" : {
         "_id" : 10,
         "item" : "packing peanuts",
         "qty" : 200
      }
   })

.. _insertOne-override-write-concern:

Increase Write Concern
~~~~~~~~~~~~~~~~~~~~~~

Given a three member replica set, the following operation specifies a
``w`` of ``majority``, ``wtimeout`` of ``100``:

.. code-block:: javascript

   try {
      db.products.insertOne(
          { "item": "envelopes", "qty": 100, type: "Self-Sealing" },
          { writeConcern: { w : "majority", wtimeout : 100 } }
      );
   } catch (e) {
      print (e);
   }

If the acknowledgement takes longer than the ``wtimeout`` limit, the following
exception is thrown:

.. code-block:: javascript

   WriteConcernError({
      "code" : 64,
      "errInfo" : {
         "wtimeout" : true
      },
      "errmsg" : "waiting for replication timed out"
   })


.. seealso:: To insert multiple documents, see
   :method:`db.collection.insertMany()`
