===================
$sort (aggregation)
===================

.. default-domain:: mongodb

.. pipeline:: $sort

   The :pipeline:`$sort` :term:`pipeline` operator sorts all input
   documents and returns them to the pipeline in sorted
   order. Consider the following prototype form:

   .. code-block:: javascript

      db.<collection-name>.aggregate(
          { $sort : { <sort-key> } }
      );

   This sorts the documents in the collection named
   ``<collection-name>``, according to the key and specification in
   the ``{ <sort-key> }`` document.

   Specify the sort in a document with a field or fields that you want
   to sort by and a value of ``1`` or ``-1`` to specify an ascending
   or descending sort respectively, as in the following example:

   .. code-block:: javascript

      db.users.aggregate(
          { $sort : { age : -1, posts: 1 } }
      );

   This operation sorts the documents in the ``users`` collection,
   in descending order according by the ``age`` field and then in
   ascending order according to the value in the ``posts`` field.

   .. include:: /includes/fact-sort-order.rst

   .. note::

      The :pipeline:`$sort` cannot begin sorting documents until
      previous operators in the pipeline have returned all output.

      .. todo:: mention the importance of order preserving objects

      - :pipeline:`$skip`

   :pipeline:`$sort` operator can take advantage of an index when
   placed at the **beginning** of the pipeline or placed **before**
   the following aggregation operators:

   - :pipeline:`$project`
   - :pipeline:`$unwind`
   - :pipeline:`$group`.

   .. include:: /includes/fact-agg-sort-limit.rst

   .. warning::

      .. versionchanged:: 2.4
         Sorts immediately proceeded by a limit no longer need to fit into
         memory. Previously, all sorts had to fit into memory or use
         an index.

      Unless the :pipeline:`$sort` operator can use an index, or
      immediately precedes a :pipeline:`$limit`, the :pipeline:`$sort`
      operation must fit within memory.

      For :pipeline:`$sort` operations that immediately precede a
      :pipeline:`$limit` stage, MongoDB only needs to store the number
      of items specified by :pipeline:`$limit` in memory.

      .. todo:: if a sort precedes the first $group in a sharded system,
         all documents must go to the mongos for sorting.
