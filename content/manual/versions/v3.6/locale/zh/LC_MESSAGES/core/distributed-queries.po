#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/distributed-queries.txt:6
msgid "Distributed Queries"
msgstr ""

#: ../source/core/distributed-queries.txt:17
msgid "Read Operations to Replica Sets"
msgstr ""

#: ../source/core/distributed-queries.txt:19
msgid ""
"By default, clients reads from a replica set's :term:`primary`; however, "
"clients can specify a :doc:`read preference </core/read-preference>` to "
"direct read operations to other members. For example, clients can "
"configure read preferences to read from secondaries or from nearest "
"member to:"
msgstr ""

#: ../source/core/distributed-queries.txt:25
msgid "reduce latency in multi-data-center deployments,"
msgstr ""

#: ../source/core/distributed-queries.txt:27
msgid ""
"improve read throughput by distributing high read-volumes (relative to "
"write volume),"
msgstr ""

#: ../source/core/distributed-queries.txt:30
msgid "perform backup operations, and/or"
msgstr ""

#: ../source/core/distributed-queries.txt:32
msgid "allow reads until a :ref:`new primary is elected <replica-set-failover>`."
msgstr ""

#: ../source/core/distributed-queries.txt:37
msgid ""
"Read operations from secondary members of replica sets may not reflect "
"the current state of the primary. Read preferences that direct read "
"operations to different servers may result in non-monotonic reads."
msgstr ""

#: ../source/core/distributed-queries.txt:43
msgid ""
"Starting in MongoDB 3.6, clients can use :ref:`causally consistent "
"<causal-consistency>` sessions, which provides various guarantees, "
"including monotonic reads."
msgstr ""

#: ../source/core/distributed-queries.txt:47
msgid ""
"You can configure the read preference on a per-connection or per-"
"operation basis. For more information on read preference or on the read "
"preference modes, see :doc:`/core/read-preference` and :ref:`replica-set-"
"read-preference-modes`."
msgstr ""

#: ../source/core/distributed-queries.txt:55
msgid "Write Operations on Replica Sets"
msgstr ""

#: ../source/core/distributed-queries.txt:57
msgid ""
"In :term:`replica sets <replica set>`, all write operations go to the "
"set's :term:`primary`. The primary applies the write operation and "
"records the operations on the primary's operation log or :term:`oplog`. "
"The oplog is a reproducible sequence of operations to the data set. "
":term:`Secondary` members of the set continuously replicate the oplog and"
" apply the operations to themselves in an asynchronous process."
msgstr ""

#: ../source/core/distributed-queries.txt:66
msgid ""
"For more information on replica sets and write operations, see "
":doc:`/replication` and :doc:`/reference/write-concern`."
msgstr ""

#: ../source/core/distributed-queries.txt:72
msgid "Read Operations to Sharded Clusters"
msgstr ""

#: ../source/core/distributed-queries.txt:74
msgid ""
":term:`Sharded clusters <sharded cluster>` allow you to partition a data "
"set among a cluster of :binary:`~bin.mongod` instances in a way that is "
"nearly transparent to the application. For an overview of sharded "
"clusters, see the :doc:`/sharding` section of this manual."
msgstr ""

#: ../source/core/distributed-queries.txt:79
msgid ""
"For a sharded cluster, applications issue operations to one of the "
":binary:`~bin.mongos` instances associated with the cluster."
msgstr ""

#: ../source/core/distributed-queries.txt:84
msgid ""
"Read operations on sharded clusters are most efficient when directed to a"
" specific shard. Queries to sharded collections should include the "
"collection's :ref:`shard key <sharding-shard-key>`. When a query includes"
" a shard key, the :binary:`~bin.mongos` can use cluster metadata from the"
" :ref:`config database <sharding-config-server>` to route the queries to "
"shards."
msgstr ""

#: ../source/core/distributed-queries.txt:93
msgid ""
"If a query does not include the shard key, the :binary:`~bin.mongos` must"
" direct the query to *all* shards in the cluster. These *scatter gather* "
"queries can be inefficient. On larger clusters, scatter gather queries "
"are unfeasible for routine operations."
msgstr ""

#: ../source/core/distributed-queries.txt:100
msgid ""
"For replica set shards, read operations from secondary members of replica"
" sets may not reflect the current state of the primary. Read preferences "
"that direct read operations to different servers may result in non-"
"monotonic reads."
msgstr ""

#: ../source/core/distributed-queries.txt:108
msgid "Starting in MongoDB 3.6,"
msgstr ""

#: ../source/core/distributed-queries.txt:110
msgid ""
"Clients can use :ref:`causally consistent <causal-consistency>` sessions,"
" which provides various guarantees, including monotonic reads."
msgstr ""

#: ../source/core/distributed-queries.txt:114
msgid ""
"All members of a shard replica set, not just the primary, maintain the "
"metadata regarding chunk metadata. This prevents reads from the "
"secondaries from returning :term:`orphaned data <orphaned document>` if "
"not using read concern :readconcern:`\"available\"`. In earlier versions,"
" reads from secondaries, regardless of the read concern, could return "
"orphaned documents."
msgstr ""

#: ../source/core/distributed-queries.txt:121
msgid ""
"For more information on read operations in sharded clusters, see the "
":doc:`/core/sharded-cluster-query-router` and :ref:`sharding-shard-key` "
"sections."
msgstr ""

#: ../source/core/distributed-queries.txt:128
msgid "Write Operations on Sharded Clusters"
msgstr ""

#: ../source/core/distributed-queries.txt:130
msgid ""
"For sharded collections in a :term:`sharded cluster`, the "
":binary:`~bin.mongos` directs write operations from applications to the "
"shards that are responsible for the specific *portion* of the data set. "
"The :binary:`~bin.mongos` uses the cluster metadata from the :ref:`config"
" database <sharding-config-server>` to route the write operation to the "
"appropriate shards."
msgstr ""

#: ../source/core/distributed-queries.txt:139
msgid ""
"MongoDB partitions data in a sharded collection into *ranges* based on "
"the values of the :term:`shard key`. Then, MongoDB distributes these "
"chunks to shards. The shard key determines the distribution of chunks to "
"shards. This can affect the performance of write operations in the "
"cluster."
msgstr ""

#: ../source/core/distributed-queries.txt:147
msgid ""
"Update operations that affect a *single* document **must** include the "
":term:`shard key` or the ``_id`` field. Updates that affect multiple "
"documents are more efficient in some situations if they have the "
":term:`shard key`, but can be broadcast to all shards."
msgstr ""

#: ../source/core/distributed-queries.txt:153
msgid ""
"If the value of the shard key increases or decreases with every insert, "
"all insert operations target a single shard. As a result, the capacity of"
" a single shard becomes the limit for the insert capacity of the sharded "
"cluster."
msgstr ""

#: ../source/core/distributed-queries.txt:158
msgid ""
"For more information, see :doc:`/sharding` and :doc:`/core/bulk-write-"
"operations`."
msgstr ""

#: ../source/core/distributed-queries.txt:161
msgid ":ref:`retryable-writes`"
msgstr ""

#~ msgid ""
#~ ":term:`Replica sets <replica set>` use "
#~ ":term:`read preferences <read preference>` to"
#~ " determine where and how to route "
#~ "read operations to members of the "
#~ "replica set. By default, MongoDB always"
#~ " reads data from a replica set's "
#~ ":term:`primary`. You can modify that "
#~ "behavior by changing the :ref:`read "
#~ "preference mode <replica-set-read-"
#~ "preference-modes>`."
#~ msgstr ""

#~ msgid ""
#~ "You can configure the :ref:`read "
#~ "preference mode <replica-set-read-"
#~ "preference-modes>` on a per-connection "
#~ "or per-operation basis to allow "
#~ "reads from :term:`secondaries <secondary>` to:"
#~ msgstr ""

#~ msgid "for backup operations, and/or"
#~ msgstr ""

#~ msgid ""
#~ "to allow reads during :ref:`failover "
#~ "<replica-set-failover>` situations."
#~ msgstr ""

#~ msgid ""
#~ "Read operations from secondary members "
#~ "of replica sets are not guaranteed "
#~ "to reflect the current state of "
#~ "the primary, and the state of "
#~ "secondaries trails the primary by some"
#~ " amount of time. [#edge-cases-2-primaries]_"
#~ msgstr ""

#~ msgid ""
#~ "For more information on read preference"
#~ " or on the read preference modes, "
#~ "see :doc:`/core/read-preference` and :ref"
#~ ":`replica-set-read-preference-modes`."
#~ msgstr ""

#~ msgid ""
#~ "In some circumstances, two nodes in "
#~ "a replica set may *transiently* believe"
#~ " that they are the primary, but "
#~ "at most, one of them will be "
#~ "able to complete writes with :ref:`{w:"
#~ " majority} write concern <wc-w>`. The "
#~ "node that can complete :ref:`{w: "
#~ "majority} <wc-w>` writes is the current"
#~ " primary, and the other node is "
#~ "a former primary that has not yet"
#~ " recognized its demotion, typically due "
#~ "to a :term:`network partition`. When "
#~ "this occurs, clients that connect to "
#~ "the former primary may observe stale "
#~ "data despite having requested read "
#~ "preference :readmode:`primary`."
#~ msgstr ""

#~ msgid ""
#~ ":term:`Sharded clusters <sharded cluster>` "
#~ "allow you to partition a data set"
#~ " among a cluster of :program:`mongod` "
#~ "instances in a way that is nearly"
#~ " transparent to the application. For "
#~ "an overview of sharded clusters, see "
#~ "the :doc:`/sharding` section of this "
#~ "manual."
#~ msgstr ""

#~ msgid ""
#~ "For a sharded cluster, applications "
#~ "issue operations to one of the "
#~ ":program:`mongos` instances associated with "
#~ "the cluster."
#~ msgstr ""

#~ msgid ""
#~ "Read operations on sharded clusters are"
#~ " most efficient when directed to a"
#~ " specific shard. Queries to sharded "
#~ "collections should include the collection's"
#~ " :ref:`shard key <sharding-shard-key>`. "
#~ "When a query includes a shard key,"
#~ " the :program:`mongos` can use cluster "
#~ "metadata from the :ref:`config database "
#~ "<sharding-config-server>` to route the "
#~ "queries to shards."
#~ msgstr ""

#~ msgid ""
#~ "If a query does not include the"
#~ " shard key, the :program:`mongos` must "
#~ "direct the query to *all* shards "
#~ "in the cluster. These *scatter gather*"
#~ " queries can be inefficient. On "
#~ "larger clusters, scatter gather queries "
#~ "are unfeasible for routine operations."
#~ msgstr ""

#~ msgid "read operation"
#~ msgstr ""

#~ msgid "architecture"
#~ msgstr ""

#~ msgid "connection pooling"
#~ msgstr ""

#~ msgid "read operations"
#~ msgstr ""

#~ msgid "On this page"
#~ msgstr ""

#~ msgid ""
#~ "You can configure the read preferece "
#~ "on a per-connection or per-"
#~ "operation basis. For more information on"
#~ " read preference or on the read "
#~ "preference modes, see :doc:`/core/read-"
#~ "preference` and :ref:`replica-set-read-"
#~ "preference-modes`."
#~ msgstr ""

