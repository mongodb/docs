.. _web-mongodb-data-access:
.. _web-query-mongodb:

=======================
Query MongoDB - Web SDK
=======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can query data stored in MongoDB Atlas directly from your client application code
by using the Realm Web SDK's :js-sdk:`MongoDB client <Realm-MongoDB.html>`
with the :manual:`Query API </tutorial/query-documents>`.
Atlas App Services provides data access :ref:`rules <mongodb-rules>` on
collections to securely retrieve results based on the logged-in user or the
content of each document.

The following actions let you query a linked MongoDB Atlas cluster
from a Web app using the Realm Web SDK.

.. include:: /includes/mongodb-data-access-query-filter-indeterminate-order-note.rst

Prerequisites
-------------

Before you can query MongoDB from your web application, you must set up
MongoDB Data Access in your App Services App. To learn how to set up your
backend App to let the Realm SDK query Atlas,
refer to :ref:`Set Up MongoDB Data Access <client-data-access>`
in the App Services documentation.

.. _web-mongodb-set-up:

Set Up Your Project
-------------------

.. procedure::

   .. step:: Set Up Your Project

      Follow the steps in the :ref:`Install Realm for Web <web-quickstart-install>`
      guide.
      

   .. step:: Link a MongoDB Atlas Service Cluster

      Follow the steps in the :ref:`link-a-data-source` guide. Assign your service a
      meaningful name -- you'll need it to connect to the cluster using the
      Realm SDK.
      

   .. step:: Import Realm Dependencies

      At the top of your source files where you want to use Realm,
      add the following code to import the SDK and BSON ObjectId constructor.
      
      .. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.import-realm-web.js
         :language: javascript
      
      

   .. step:: Instantiate a MongoDB Collection Handle

      To access a collection, create MongoDB service handle for the user that you
      wish to access the collection with:

      .. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.instantiate-mongo-client.js
         :language: javascript

.. _web-mongodb-example-dataset:

Example Data
------------

The examples on this page use the following MongoDB collection that describes
various plants for sale in a chain of plant stores:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.sample-data.js
   :language: javascript

.. _web-mongodb-create-documents:

Create Documents
----------------

These code snippets demonstrate how to insert one or more documents into
a MongoDB collection from a web app. Insert operations take a
document or documents to add to MongoDB as an argument and return a
:mdn:`Promise <Web/JavaScript/Reference/Global_Objects/Promise>` that
resolves to an object that contains the results of the execution of the
operation.

.. _web-mongodb-insertOne:

Insert a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

You can insert a single document by calling :js-sdk:`collection.insertOne()
<Realm.MongoDBCollection.html#insertOne>`.

The following snippet inserts a single document describing a "lily of the
valley" plant into a
:ref:`collection of documents that describe plants for sale in a group of stores
<web-mongodb-example-dataset>`:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.insert-single-document.js
   :language: javascript

Running this snippet produces output resembling the following:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.insert-single-document-result.js
   :language: javascript


.. _web-mongodb-insertMany:

Insert Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

You can insert multiple documents at the same time using
:js-sdk:`collection.insertMany() <Realm.MongoDBCollection.html#insertMany>`.

The following snippet inserts three documents describing plants into a
:ref:`collection of documents that describe plants for sale in a group of stores
<web-mongodb-example-dataset>`:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.insert-multiple-documents.js
   :language: javascript


Running this snippet produces output resembling the following:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.insert-multiple-documents-result.js
   :language: javascript

.. _web-mongodb-read-documents:

Read Documents
--------------

These code snippets demonstrate how to read data stored in a MongoDB
collection from a mobile application. Read operations use :manual:`query
filters </core/document/#document-query-filter>` to specify which
documents to return from the database. Read operations return a
:mdn:`Promise <Web/JavaScript/Reference/Global_Objects/Promise>` that
resolves to one of the following: a single matched document (in the case of
``findOne()``), a numeric value (in the case of ``count()``) or an array
of matched documents (in the case of ``find()``).

.. _web-mongodb-findOne:

Find a Single Document
~~~~~~~~~~~~~~~~~~~~~~

You can find a single document using :js-sdk:`collection.findOne() <Realm.MongoDBCollection.html#findOne>`.

The following snippet finds the document that describes venus flytraps in the
:ref:`collection of documents that describe plants for sale in a group of stores
<web-mongodb-example-dataset>`:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.find-single-document.js
   :language: javascript


Running this snippet produces output resembling the following:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.find-single-document-result.js
   :language: javascript


.. _web-mongodb-findMany:

Find Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~

You can find multiple documents using :js-sdk:`collection.find() <Realm.MongoDBCollection.html#find>`.

The following snippet finds all documents in a
:ref:`collection of documents that describe plants for sale in a group of stores
<web-mongodb-example-dataset>` that contain a field named
``type`` with a value of "perennial":

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.find-multiple-documents.js
   :language: javascript

Running this snippet produces output resembling the following:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.find-multiple-documents-result.js
   :language: javascript

.. _web-mongodb-count:

Count Documents in the Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can count documents in a collection using
:js-sdk:`collection.count() <Realm.MongoDBCollection.html#count>`.
You can specify an optional query to
determine which documents to count. If you don't specify a query, the
action counts all documents in the collection.

The following snippet counts the number of documents in a
:ref:`collection of documents that describe plants for sale in a group of stores
<web-mongodb-example-dataset>`:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.count-documents-in-collection.js
   :language: javascript

Running this snippet produces output resembling the following:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.count-documents-in-collection-result.js
   :language: javascript

.. _web-mongodb-update-documents:

Update Documents
----------------

These code snippets demonstrate how to update data stored in a MongoDB
collection from a mobile application. Update operations use queries to
specify which documents to update and :manual:`update operators
</reference/operator/update>` to describe how to mutate documents that match the
query. Update operations return a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that resolves to an object
that contains the results of the execution of the operation.

.. _web-mongodb-updateOne:

Update a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

You can update a single document using
:js-sdk:`collection.updateOne() <Realm.MongoDBCollection.html#updateOne>`.

The following snippet updates a single document in a
:ref:`collection of documents that describe plants for sale in a group of stores
<web-mongodb-example-dataset>`. This operation queries for a document
where the ``name`` field contains the value "petunia" and changes the value
of the first matched document's ``sunlight`` field to "partial":

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.update-single-document.js
   :language: javascript

Running this snippet produces output resembling the following:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.update-single-document-result.js
   :language: javascript

.. _web-mongodb-updateMany:

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

You can update a single document using
:js-sdk:`collection.updateMany() <Realm.MongoDBCollection.html#updateMany>`.

The following snippet updates multiple documents in a
:ref:`collection of documents that describe plants for sale in a group of stores
<web-mongodb-example-dataset>`. This operation queries for documents
where the ``_partition`` field contains the value "Store 42" and changes
the value of the ``_partition`` field of each matching document to "Store 51":

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.update-multiple-documents.js
   :language: javascript

Running this snippet produces output resembling the following:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.update-multiple-documents-result.js
   :language: javascript

.. _web-mongodb-upsert:

Upsert Documents
~~~~~~~~~~~~~~~~

If an update operation does not match any document in the collection,
you can automatically insert a single new document into the collection
that matches the update query by setting the ``upsert`` option to
``true``.

The following snippet updates a document in a
:ref:`collection of documents that describe plants for sale in a group of stores
<web-mongodb-example-dataset>` or inserts a
new document if no document matches the query. This operation
queries for documents where:

- the ``sunlight`` field has a value of "full"
- the ``type`` field has a value of "perennial"
- the ``color`` field has a value of "green"
- the ``_partition`` field has a value of "Store 47"

Because this snippet sets the ``upsert`` option to ``true``, if no
document matches the query, MongoDB creates a new document that includes
both the query and specified updates:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.upsert-documents.js
   :language: javascript

Running this snippet produces output resembling the following:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.upsert-documents-result.js
   :language: javascript

.. _web-mongodb-delete-documents:

Delete Documents
----------------

These code snippets demonstrate how to delete documents that
are stored in a MongoDB collection from a mobile application.
Delete operations use a query to specify which documents to delete
and return a :mdn:`Promise <Web/JavaScript/Reference/Global_Objects/Promise>`
that resolves to an object that contains the results of the execution
of the operation.

.. _web-mongodb-deleteOne:

Delete a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

You can delete a single document from a collection using
:js-sdk:`collection.deleteOne() <Realm.MongoDBCollection.html#deleteOne>`.

The following snippet deletes one document in a
:ref:`collection of documents that describe plants for sale in a group of stores
<web-mongodb-example-dataset>`. This operation queries for a
document where the ``color`` field has a value of "green" and deletes
the first document that matches the query:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.delete-single-document.js
   :language: javascript

Running this snippet produces output resembling the following:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.delete-single-document-result.js
   :language: javascript

.. _web-mongodb-deleteMany:

Delete Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

You can delete multiple items from a collection using
:js-sdk:`collection.deleteMany() <Realm.MongoDBCollection.html#deleteMany>`.

The following snippet deletes all documents for plants that are in "Store 42" in
a :ref:`collection of documents that describe plants for sale in a group of
stores <web-mongodb-example-dataset>`:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.delete-multiple-documents.js
   :language: javascript

Running this snippet produces output resembling the following:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.delete-multiple-documents-result.js
   :language: javascript

.. _web-mongodb-watch:

Watch for Changes
-----------------

You can call :js-sdk:`collection.watch()
<Realm.MongoDBCollection.html#watch>` to subscribe to real-time
:ref:`notification events <database-events>` whenever a document in the
collection is added, modified, or deleted. Each notification specifies a
document that changed, how it changed, and the full document after the
operation that caused the event.

.. include:: /includes/serverless-watch-note.rst

Atlas App Services uses MongoDB :manual:`change streams </changeStreams/>` on
watched collections to listen for changes and broadcasts notifications to
subscribed client applications. This is useful for cases where you want to know
when something happened while a user is online. For example:

- Track the location of a delivery
- Get the most up-to-date score and stats for a game
- Update a chat thread when a user sends a new message

.. note::

   ``collection.watch()`` returns an :mdn:`async generator
   <Web/JavaScript/Reference/Statements/for-await...of#Iterating_over_async_generators>`
   that allows you to asynchronously pull :manual:`change events
   </reference/change-events/>` for operations as they occur.

.. _web-mongodb-watch-a-collection:

Watch for Changes in a Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To watch for all changes in a collection, call :js-sdk:`collection.watch()
<Realm.MongoDBCollection.html#watch>` without any arguments:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.watch-for-changes.js
   :language: javascript

.. _web-mongodb-watch-a-collection-with-filter:

Watch for Changes in a Collection with a Filter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To watch for specific changes in a collection, call :js-sdk:`collection.watch()
<Realm.MongoDBCollection.html#watch>` with a query that specifies change event
values to watch:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.watch-for-changes-with-filter.js
   :language: javascript

.. _web-mongodb-aggregation-pipelines:

Aggregate Documents
-------------------

Aggregation operations run all documents in a collection through a series of
stages called an :manual:`aggregation pipeline </core/aggregation-pipeline>`.
Aggregation allows you to filter and transform documents, collect summary data
about groups of related documents, and other complex data operations.

Aggregation operations accept a list of aggregation stages as input, and
return a :mdn:`Promise <Web/JavaScript/Reference/Global_Objects/Promise>` that
resolves to a collection of documents processed by the pipeline.

.. _web-mongodb-aggregate:

Aggregate Documents in a Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can execute an aggregation pipeline using
:js-sdk:`collection.aggregate() <Realm.MongoDBCollection.html#aggregate>`.

The following snippet groups all documents in the ``plants``
collection by their ``type`` value and aggregates a count of the
number of each type:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.basic-aggregation.js
   :language: javascript

Running this snippet produces output resembling the following:

.. literalinclude:: /examples/generated/web/mongodb-data-access.test.snippet.basic-aggregation-result.js
   :language: javascript

Aggregation Stages
------------------

.. include:: /includes/aggregation-stages.rst
