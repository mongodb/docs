==============
Record Padding
==============

.. default-domain:: mongodb

Update operations can increase the size of the document
[#documentSizeLimit]_. If a document outgrows its current allocated
:term:`record space <record size>`, MongoDB must allocate a new space
and move the document to this new location.

To reduce the number of moves, MongoDB includes a small amount of extra
space, or :term:`padding`, when allocating the record space. This
padding reduces the likelihood that a slight increase in document size
will cause the document to exceed its allocated record size.

.. [#documentSizeLimit] Documents in MongoDB can grow up to the full
   maximum :limit:`BSON document size <BSON Document Size>`.

.. seealso:: :doc:`/core/write-performance`.

.. _write-operations-padding-factor:

Padding Factor
--------------

To minimize document movements and their impact, MongoDB employs
padding. MongoDB adaptively adjusts the size of record allocations in
a collection by adding a :data:`~collStats.paddingFactor` so that the
documents have room to grow. The :data:`~collStats.paddingFactor`
indicates the padding for new inserts and moves.

To check the current :data:`~collStats.paddingFactor` on a collection,
you can run the :method:`db.collection.stats()` operation in the
:program:`mongo` shell, as in the following example:

.. code-block:: javascript

   db.myCollection.stats()

Since MongoDB writes each document at a different point in time, the
padding for each document will not be the same. You can calculate the
padding size by subtracting 1 from the :data:`~collStats.paddingFactor`, for
example:

.. code-block:: none

   padding size = (paddingFactor - 1) * <document size>.

For example, a :data:`~collStats.paddingFactor` of ``1.0`` specifies no padding
whereas a paddingFactor of ``1.5`` specifies a padding size of ``0.5`` or 50
percent (50%) of the document size.

Because the :data:`~collStats.paddingFactor` is relative to the size of each
document, you cannot calculate the exact amount of padding for a
collection based on the average document size and padding factor.

If an update operation causes the document to *decrease* in size, for
instance if you perform an :operator:`$unset` or a :operator:`$pop`
update, the document remains in place and effectively has more
padding. If the document remains this size, the space is not reclaimed
until you perform a :dbcommand:`compact` or a
:dbcommand:`repairDatabase` operation.

Operations That Remove Padding
------------------------------

The following operations remove padding: :dbcommand:`compact`,
:dbcommand:`repairDatabase`, and initial replica sync operations.
However, with the :dbcommand:`compact` command, you can run the command
with a ``paddingFactor`` or a ``paddingBytes`` parameter. See
:dbcommand:`compact` command for details.

Padding is also removed if you use :program:`mongoexport` a collection.
If you use :program:`mongoimport` into a new collection,
:program:`mongoimport` will not add padding. If you use
:program:`mongoimport` with an existing collection with padding,
:program:`mongoimport` will not affect the existing padding.

When a database operation removes padding from a collection, subsequent
updates to the collection that increase the record size will have
reduced throughput until the collection's padding factor grows.
However, the collection will require less storage.

Record Allocation Strategies
----------------------------

.. versionadded:: 2.2
   :dbcommand:`collMod`  and :collflag:`usePowerOf2Sizes`.

To more efficiently reuse the space freed as a result of deletions or
document relocations, you can specify that MongoDB allocates record
sizes in powers of 2. To do so, use the :dbcommand:`collMod` command
with the :collflag:`usePowerOf2Sizes` flag. See :dbcommand:`collMod`
command for more details. As with all padding, power of 2 size
allocations minimizes, but does not eliminate, document movements.

See also :ref:`faq-developers-manual-padding`

.. TODO

   Add sections for:

   - disk/storage system affects.
   - journaling affects.
