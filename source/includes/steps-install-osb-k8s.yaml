---
title: "Create a |k8s-ns| for your |k8s| deployment."
stepnum: 1
level: 4
ref: create-namespace
content: |
  To simplify your installation, consider creating a namespace labeled
  ``atlas`` using the following |kubectl| command:

  .. code-block:: sh

     kubectl create namespace atlas

  If you do not want to use the ``atlas`` namespace, you can label
  your namespace anything you like:

  .. code-block:: sh

     kubectl create namespace <NAMESPACE_NAME>
---
title: "Create the ``Deployment`` and ``Service`` resource definition."
stepnum: 2
level: 4
ref: create-deployment-yaml
content: |

  a. Copy the following resource definition example.

     This is a |yaml| file that you can modify to meet your desired
     configuration. It includes both the ``Deployment`` and ``Service``
     specifications.

     .. note::

        The example uses ``atlas-service-broker`` as the deployment
        name, service name, and pod label. You can update these
        fields with other values as long as you are consistent across
        resources.

     .. literalinclude:: /reference/k8s/example-deployment.yaml
        :language: yaml
        :emphasize-lines: 23, 43

  #. Open your preferred text editor and paste the resource definition
     into a new text file.


  #. Confirm or edit the container port which the {+osb+} server
     listens on.

     .. list-table::
        :widths: 20 30 30 20
        :header-rows: 1

        * - Resource
          - Environment Variable
          - Description
          - Default

        * - ``Deployment``
          - | ``spec.template.spec``
            | ``.containers.ports.containerPort``
          - The port which the {+osb+} server listens on.

            Must match the value of ``targetPort`` in the ``Service``
            resource.
          - ``4000``

        * - ``Service``
          - | ``spec.ports.targetPort``
          - The port which the {+osb+} server listens on.

            Must match the value of ``containerPort`` in the
            ``Deployment`` resource.
          - ``4000``

  #. Save the file as ``deployment-and-service.yaml``.
---
title: "Install the {+osb+}."
stepnum: 3
level: 4
ref: install-osb
content: |

  Use the following |kubectl| command:

  .. code-block:: sh

     kubectl apply -f deployment-and-service.yaml -n <NAMESPACE>
---
title: "Create a |k8s| secret."
stepnum: 4
level: 4
ref: create-secret
content: |

  For the {+osb+} to create or update |k8s-objs| in your |service|
  Project, you need to store your Programmatic API Key and
  Project ID as a |k8s| |k8s-secret|.

  Multiple secrets can exist in the same namespace.

  To create your |k8s| secret:

  a. Make sure you have the following:

     - Public and Private Keys for your desired |service|
       |svc-api-key|.

       If you do not have a |svc-api-key|, generate a new
       :atlas:`Programmatic API Key
       </configure-api-access/#manage-programmatic-access-to-a-project>`.

     - The :atlas:`Project ID </api/#project-id>` for your |service|
       project.


  #. Copy the following resource definition example.

     This is a |yaml| that you can modify to meet your desired
     configuration.

     .. literalinclude:: /reference/k8s/example-secret.yaml
        :language: yaml
        :emphasize-lines: 4, 7-8


  #. Edit the following fields:

     .. list-table::
        :widths: 20 80
        :header-rows: 1

        * - Field Name
          - Description

        * - ``stringData.username``
          - Your |service| Public Key followed by ``@`` and your Project
            ID.

        * - ``stringData.password``
          - Your |service| Private Key.

     The ``username`` and ``password`` are used for Basic
     authentication against the {+osb+}.

     .. example::

        .. code-block:: yaml

           apiVersion: v1
           kind: Secret
           metadata:
             name: atlas-service-broker-auth
           type: Opaque
           stringData:
             username: ABCAXNVY@5d49a272ce4bd97b2e1234abc
             password: 123e8d75-cxfb-x012-bx5c-abc4356e3xyz


  #. Save the file as ``secret.yaml``.


  #. Invoke the following |k8s| command to create your secret:

     .. code-block:: sh

        kubectl apply -f secret.yaml -n <NAMESPACE>

     The ``-n`` flag limits the |k8s-ns| to which this secret
     applies.


  #. Invoke the following |k8s| command to verify your secret:

     .. code-block:: sh

        kubectl describe secrets/<SECRET_NAME> -n <NAMESPACE>

     This command returns a secret description in the shell:

     .. code-block:: sh
        :copyable: false

        Name:         <SECRET_NAME>
        Namespace:    <NAMESPACE>
        Labels:       <none>
        Annotations:
        Type:         Opaque

        Data
        ====
        password:  36 bytes
        username:  36 bytes
---
title: "Create a service broker resource definition."
stepnum: 5
level: 4
ref: edit-service-broker-yaml
content: |

  a. Copy the following resource definition example.

     This is a |yaml| file that you can modify to meet your desired
     configuration.

     .. literalinclude:: /reference/k8s/example-service-broker.yaml
        :language: yaml
        :emphasize-lines: 2,6,10-11


  #. Edit the following fields:

     .. list-table::
        :widths: 20 80
        :header-rows: 1

        * - Field Name
          - Description

        * - ``kind``
          - This value determines whether the {+osb+} is available
            to the entire |k8s| cluster or to only a single
            namespace within the |k8s| cluster. For more information on
            service broker resources, see `the Service Catalog
            documentation
            <https://svc-cat.io/docs/resources/#service-brokers>`__.

            Possible values are:

            .. list-table::
               :widths: 20 80

               * - ``ServiceBroker``
                 - Deploys the {+osb+} scoped to only a single
                   namespace. Any |service| clusters must be
                   provisioned in the same namespace as the {+osb+}.

               * - ``ClusterServiceBroker``
                 - Deploys the {+osb+} scoped to an entire |k8s|
                   cluster. |service| clusters can be provisioned in
                   any namespace.

        * - ``spec.url``
          - The URL of the broker in the format
            ``http://<SERVICE_NAME>.<NAMESPACE>``.

            ``<SERVICE_NAME>`` is the value of ``metadata.name`` in your ``Service`` resource.

            .. example::

               .. code-block:: sh

                  http://atlas-service-broker.atlas

        * - | ``spec.authInfo``
            | ``.basic.secretRef.name``
          - The name of the |k8s| secret that you created in the
            previous step.

        * - | ``spec.authInfo``
            | ``.basic.secretRef.namespace``
          - Your namespace.


  #. Save the file as ``service-broker.yaml``.

---
title: "Register the {+osb+} with the |k8s-service-catalog|"
stepnum: 6
level: 4
ref: register-osb
content: |

  Use the following |kubectl| command:

  .. code-block:: sh

     kubectl apply -f service-broker.yaml -n <NAMESPACE>

---
title: "Check the status of the {+osb+} with the Service Catalog CLI."
stepnum: 7
level: 4
ref: check-status-osb
content: |

  .. code-block:: sh

     svcat get brokers -n <NAMESPACE>

  The command returns the status of the broker. If the status of the
  broker does not appear, wait a few moments and invoke the command
  again.

  .. example::

     The following example shows the status of a broker that was
     defined as a ``ClusterServiceBroker``. Because this broker is
     deployed at the cluster level, there is no namespace.

     .. code-block:: sh
        :copyable: false

                   NAME          NAMESPACE                 URL                   STATUS
        +----------------------+-----------+-----------------------------------+--------+
          atlas-service-broker               http://atlas-service-broker.atlas     Ready

  If your broker has a status other than ``Ready``, pass the
  ``metadata.name`` from ``service-broker.yaml`` into the following
  command to view a detailed error message:

  .. code-block:: sh

     svcat describe broker <METADATA.NAME> -n <NAMESPACE>
...
