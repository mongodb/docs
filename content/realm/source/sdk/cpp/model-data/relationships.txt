.. meta::
   :robots: noindex, nosnippet

.. _cpp-relationships:

=======================
Relationships - C++ SDK
=======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Realm doesn't use bridge tables or explicit joins to define 
relationships as you would in a relational database. Realm
handles relationships through embedded objects or reference properties to 
other Realm objects. You read from and write to these 
properties directly. This makes querying relationships as performant as 
querying against any other property.

Relationship Types
------------------

Realm supports **to-one**, **to-many**, and **inverse**
relationships. Realm also provides a special type of object, called an
:ref:`embedded object <cpp-embedded-object>`, that is conceptually 
similar to a relationship but provides additional constraints.

.. _cpp-to-one-relationship:

To-One Relationship
~~~~~~~~~~~~~~~~~~~

A **to-one** relationship means that an object relates to one other object. 
You define a to-one relationship for an object type in its object 
model. Specify a property where the type is the related Realm 
object type. For example, a dog might have a to-one relationship with 
a favorite toy.

.. _cpp-to-many-relationship:
.. _cpp-list-collections:

To-Many Relationship
~~~~~~~~~~~~~~~~~~~~

A **to-many** relationship means that an object relates to more than one 
other object. In Realm, a to-many relationship is a list of 
references to other objects. For example, a person might have many dogs.

You can represent a to-many relationship between two Realm
types as a list, map, or a set. Lists, maps, and sets are mutable: within 
a write transaction, you can add and remove elements to and from these 
collection types. Lists, maps, and sets are not associated with a query 
and are declared as a property of the object model.

.. _cpp-inverse-relationship:

Inverse Relationship
~~~~~~~~~~~~~~~~~~~~

Relationship definitions in Realm are unidirectional. An 
**inverse relationship** links an object back to an object that refers 
to it.

An inverse relationship property is an automatic backlink relationship. 
Realm automatically updates implicit relationships whenever an object is 
added or removed in a corresponding to-many list or to-one relationship 
property. You cannot manually set the value of an inverse relationship 
property.

.. _cpp-declare-relationship-properties:

Declare Relationship Properties
-------------------------------

.. include:: /includes/see-also-define-relationship-in-app-services-ui.rst

.. _cpp-define-a-to-one-relationship-property:

Define a To-One Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **to-one** relationship maps one property to a single instance of
another object type. For example, you can model a dog having at most one 
favorite toy as a to-one relationship.

Setting a relationship field to null removes the connection between objects. 
Realm does not delete the referenced object, though, unless it is 
:ref:`an embedded object <cpp-embedded-object>`.

.. include:: /includes/note-to-one-relationships-must-be-optional.rst

.. literalinclude:: /examples/generated/cpp/relationships.snippet.to-one-relationship.cpp
   :language: cpp
   :emphasize-lines: 13

.. _cpp-define-a-to-many-relationship-property:

Define a To-Many Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **to-many** relationship maps one property to zero or more instances
of another object type. For example, you can model a company having any
number of employees as a to-many relationship.

.. literalinclude:: /examples/generated/cpp/relationships.snippet.to-many-relationship.cpp
   :language: cpp
   :emphasize-lines: 7

.. _cpp-define-an-inverse-relationship-property:

Define an Inverse Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To define an inverse relationship, use ``linking_objects`` in your object 
model. The ``linking_objects`` definition specifies the object type and 
property name of the relationship that it inverts.

In this example, we define a ``Person`` having a to-one relationship with
a ``Dog``. The ``Dog`` has an inverse relationship to any ``Person`` 
objects through its ``owners`` property.

.. literalinclude:: /examples/generated/cpp/relationships.snippet.define-inverse-relationship.cpp
   :language: cpp
   :emphasize-lines: 13
