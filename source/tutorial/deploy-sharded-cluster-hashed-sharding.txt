============================================
Deploy Sharded Cluster using Hashed Sharding
============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

Hashed shard keys use a :ref:`hashed index <index-hashed-index>` of a
single field as the :term:`shard key` to partition data across your
sharded cluster.

Hashed sharding provides a more even data distribution across the sharded
cluster at the cost of reducing :ref:`sharding-query-isolation`. With
hashed sharding, documents with "close" shard key values are unlikely
to be on the same chunk or shard, and the :binary:`~bin.mongos` is more
likely to perform :ref:`sharding-mongos-broadcast` to fulfill a given
query.

If you already have a sharded cluster deployed, skip to 
:ref:`deploy-hashed-sharded-cluster-shard-collection`.

Atlas, CloudManager and OpsManager
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you are currently using or are planning to use Atlas, Cloud Manager
or Ops Manager, refer to their respective manual for instructions on
deploying a :term:`sharded cluster`:

- `Create a Cluster (Atlas) <https://docs.atlas.mongodb.com/create-new-cluster/>`_

- :mms-docs:`Deploy a Sharded Cluster (Cloud Manager) </tutorial/deploy-sharded-cluster>`

- :opsmgr:`Deploy a Sharded Cluster (Ops Manager) </tutorial/deploy-sharded-cluster>`.

Considerations
--------------

Operating System
~~~~~~~~~~~~~~~~

This tutorial uses the :binary:`~bin.mongod` and :binary:`~bin.mongos`
programs. Windows users should use the :binary:`~bin.mongod.exe` and
:binary:`~bin.mongos.exe` programs instead.

IP Binding
~~~~~~~~~~

Use the :setting:`bind_ip` option to ensure that MongoDB listens for
connections from applications on configured addresses.

.. versionchanged:: 3.6

   .. include:: /includes/fact-default-bind-ip.rst

Security
~~~~~~~~

This tutorial does *not* include the required steps for configuring
:doc:`/core/security-internal-authentication` or :doc:`/core/authorization`.
See :doc:`/tutorial/deploy-sharded-cluster-with-keyfile-access-control` for a
tutorial on deploying a sharded cluster with a
:ref:`keyfile<internal-auth-keyfile>`.

In production environments, sharded clusters should employ at
minimum :doc:`/core/security-x.509` security for internal authentication
and client access:

- For details on using x.509 for internal authentication, see
  :doc:`/tutorial/configure-x509-member-authentication`.

- For details on using x.509 for client authentication, see
  :doc:`/tutorial/configure-x509-client-authentication`.

.. note::

   Enabling internal authentication also enables
   :doc:`/core/authorization`.

.. _deploy-hashed-sharded-cluster:

Deploy Sharded Cluster with Hashed Sharding
-------------------------------------------

.. _deploy-hashed-sharded-cluster-config-server:

Create the Config Server Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following steps deploys a config server replica set.

For a production deployment, deploy a config server replica set with at
least three members. For testing purposes, you can create a
single-member replica set.

For this tutorial, the config server replica set members are associated
with the following hosts:

.. list-table::
   :header-rows: 1

   * - Config Server Replica Set Member
     - Hostname

   * - Member 0
     - ``cfg1.example.net``

   * - Member 1
     - ``cfg2.example.net``

   * - Member 2
     - ``cfg3.example.net``

.. include:: /includes/steps/deploy-sharded-cluster-config-server-noauth.rst

Once the config server replica set (CSRS) is initiated and up, proceed
to creating the shard replica sets.

Create the Shard Replica Sets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For a production deployment, use a replica set with at least three
members for each shard. For testing purposes, you can create a
single-member replica set.

For each shard, use the following steps to create the shard replica set.

.. include:: /includes/steps/deploy-sharded-cluster-shard-replica-noauth.rst

Connect a ``mongos`` to the Sharded Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/steps/deploy-sharded-cluster-connect-noauth.rst

Once you have connected the :binary:`~bin.mongo` shell to the
:binary:`~bin.mongos`, continue to the next procedure to add shards to
the cluster.

Add Shards to the Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~

In the :binary:`~bin.mongo` shell connected to the :binary:`~bin.mongos`, use
the :method:`sh.addShard()` method to add each shard to the cluster.

The following operation adds a single shard replica set to the cluster:

.. code-block:: javascript

   sh.addShard( "<replSetName>/s1-mongo1.example.net:27018")

Repeat to add all shards.

.. _deploy-hashed-sharded-cluster-shard-database:

Enable Sharding for a Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

From the :binary:`~bin.mongo` shell connected to the :binary:`~bin.mongos`, use
the :method:`sh.enableSharding()` method to enable sharding on the
target database. Enabling sharding on a database makes it possible to
shard collections within a database.

.. code-block:: javascript

   sh.enableSharding("<database>")

.. _deploy-hashed-sharded-cluster-shard-collection:

Shard a Collection using Hashed Sharding
----------------------------------------

From the :binary:`~bin.mongo` shell connected to the :binary:`~bin.mongos`, use
the :method:`sh.shardCollection()` method to shard a collection.

.. note:: 

   You must have :ref:`enabled sharding
   <deploy-ranged-sharded-cluster-shard-database>` for the database
   where the collection resides. See
   :ref:`deploy-hashed-sharded-cluster-shard-database`.

If the collection already contains data, you must create a
:ref:`index-type-hashed` on the :term:`shard key` using the
:method:`db.collection.createIndex()` method before using
:method:`~sh.shardCollection()`. [#hashvalue]_

If the collection is empty, MongoDB creates the index as part of
:method:`sh.shardCollection()`.

The following operation shards the target collection using the
:doc:`hashed</core/hashed-sharding>` sharding strategy.

.. code-block:: javascript

   sh.shardCollection("<database>.<collection>", { <shard key> : "hashed" } )

- You must specify the full namespace of the collection and the shard
  key.

- Your selection of shard key affects the efficiency of sharding, as
  well as your ability to take advantage of certain sharding features
  such as :ref:`zones <zone-sharding>`. See the selection
  considerations listed in the :ref:`hashed-sharding-shard-key`.

.. [#hashvalue]
   Starting in version 4.0, the :binary:`~bin.mongo` shell provides the
   method :method:`convertShardKeyToHashed()`. This method uses the
   same hashing function as the hashed index and can be used to see
   what the hashed value would be for a key.

