.. _write-operations-write-concern:
.. _write-concern-operation:
.. _write-concern-internals:
.. _write-concern:

=============
Write Concern
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Write concern describes the level of acknowledgment requested from
MongoDB for write operations to a standalone :binary:`~bin.mongod` or
to :doc:`replica sets </replication>` or to :doc:`sharded clusters
</sharding>`. In sharded clusters, :binary:`~bin.mongos` instances will
pass the write concern on to the shards.

.. note::

   For :doc:`multi-document transactions </core/transactions>`, you set
   the write concern at the transaction level, not at the individual
   operation level. Do not explicitly set the write concern for
   individual write operations in a transaction.

Write Concern Specification
---------------------------

Write concern can include the following fields:

.. code-block:: javascript

   { w: <value>, j: <boolean>, wtimeout: <number> }

- the :ref:`w <wc-w>` option to request acknowledgment that the write
  operation has propagated to a specified number of :binary:`~bin.mongod`
  instances or to :binary:`~bin.mongod` instances with specified tags.

- the :ref:`j <wc-j>` option to request acknowledgment that the write
  operation has been written to the journal, and

- the :ref:`wtimeout <wc-wtimeout>` option to specify a time limit to
  prevent write operations from blocking indefinitely.

.. _wc-w:

``w`` Option
~~~~~~~~~~~~

The ``w`` option requests acknowledgment that the write operation has
propagated to a specified number of :binary:`~bin.mongod` instances or to
:binary:`~bin.mongod` instances with specified tags.

Using the ``w`` option, the following ``w: <value>`` write concerns are
available:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Value
     - Description

   * - .. writeconcern:: <number>

     - Requests acknowledgment that the write operation has propagated
       to the specified number of :binary:`~bin.mongod` instances. For
       example:

       ``w: 1``
         Requests acknowledgment that the write operation has
         propagated to the standalone :binary:`~bin.mongod` or the primary
         in a replica set. ``w: 1`` is the default write concern for
         MongoDB.

       ``w: 0``
         Requests no acknowledgment of the write operation. However, ``w:
         0`` may return information about socket exceptions and
         networking errors to the application.

         If you specify ``w: 0`` but include :ref:`j: true <wc-j>`, the
         :ref:`j: true <wc-j>` prevails to request acknowledgment from
         the standalone :binary:`~bin.mongod` or the primary of a replica
         set.

       Numbers greater than 1 request acknowledgment from the specified 
       number of data-bearing members, including the primary and any 
       hidden or delayed secondary members. For example, in a 
       3-member replica set with 1 delayed secondary and 1 hidden
       member, ``w : 3`` requires acknowledgment from the primary and
       either secondary.

       .. note:: 

          Delayed secondaries can return write acknowledgment no earlier
          than the configured :rsconf:`~members[n].slaveDelay`. 

       See :ref:`wc-ack-behavior` for when :binary:`~bin.mongod` instances
       acknowledge the write.

   * - .. writeconcern:: "majority"

     - Requests acknowledgment that write operations have propagated to
       the majority of data-bearing voting members, including
       the primary and any hidden or delayed secondary members.
       For example, in a 5 member replica set with 2 non-voting members,
       :writeconcern:`majority` requires acknowledgment from the primary 
       and either one of the two voting secondaries.

       .. note:: 

          Delayed secondaries can return write acknowledgment no earlier
          than the configured :rsconf:`~members[n].slaveDelay`. 

       After the write operation returns with a :writeconcern:`w:
       "majority" <"majority">` acknowledgment to the client, the
       client can read the result of that write with a
       :readconcern:`"majority"` readConcern.

       See :ref:`wc-ack-behavior` for when :binary:`~bin.mongod` instances
       acknowledge the write.

   * - .. writeconcern:: <tag set>

     - Requests acknowledgment that the write operations have
       propagated to a replica set member with the specified :ref:`tag
       <replica-set-configuration-tag-sets>`. See
       :ref:`wc-ack-behavior` for when :binary:`~bin.mongod` instances
       acknowledge the write.

.. seealso:: :doc:`/reference/replica-set-protocol-versions`

.. _wc-j:

``j`` Option
~~~~~~~~~~~~

The ``j`` option requests acknowledgment from MongoDB that
the write operation has been written to the :doc:`journal
</core/journaling>`.

.. list-table::
   :widths: 20 80

   * - .. writeconcern:: j

     - If ``j: true``, requests acknowledgment that the
       :binary:`~bin.mongod` instances, as specified in the :ref:`w:
       \<value\> <wc-w>`, have written to the on-disk journal. ``j:
       true`` does not by itself guarantee that the write will not be
       rolled back due to replica set primary failover.

       .. versionchanged:: 3.2

          .. include:: /includes/note-write-concern-journaled-replication.rst

.. note::

   - Specifying a write concern that includes ``j: true`` to a
     :binary:`~bin.mongod` instance that is running without journaling
     produces an error.
  
   - If journaling is enabled, :writeconcern:`w:
     "majority" <"majority">` may imply ``j: true``. The
     :rsconf:`writeConcernMajorityJournalDefault` replica set
     configuration setting determines the behavior. See
     :ref:`wc-ack-behavior` for details.

.. _wc-wtimeout:

``wtimeout``
~~~~~~~~~~~~

This option specifies a time limit, in milliseconds, for the write
concern. ``wtimeout`` is only applicable for ``w`` values greater than
``1``.

``wtimeout`` causes write operations to return with an error
after the specified limit, even if the required write concern will
eventually succeed. When these write operations return,
MongoDB **does not** undo successful data modifications performed
before the write concern exceeded the ``wtimeout`` time limit.

If you do not specify the ``wtimeout`` option and the level of write
concern is unachievable, the write operation will block indefinitely.
Specifying a ``wtimeout`` value of ``0`` is equivalent to a write
concern without the ``wtimeout`` option.

.. _wc-ack-behavior:

Acknowledgment Behavior
-----------------------

The :ref:`w <wc-w>` option and the :ref:`j <wc-j>` option determine
when :binary:`~bin.mongod` instances acknowledge write operations. 

Standalone
~~~~~~~~~~

A standalone :binary:`~bin.mongod` acknowledges a write operation either
after applying the write in memory or after writing to the on-disk
journal. The following table lists the acknowledgment behavior for a
standalone and the relevant write concerns:

.. list-table::
   :header-rows: 1
   :widths: 35 40 25 20

   * -
     - ``j`` is unspecified
     - ``j:true``
     - ``j:false``

   * - ``w: 1``
     - In memory
     - On-disk journal
     - In memory

   * - ``w: "majority"``
     - On-disk journal *if running with journaling*
     - On-disk journal
     - In memory

.. note::

   .. include:: /includes/extracts/no-journaling-rollback.rst

.. _wc-replica-ack-behavior:

Replica Sets
~~~~~~~~~~~~

The value specified to :ref:`w <wc-w>` determines the criteria
for whether a replica set member can contribute to write acknowledgment.
For each eligible replica set member, the :ref:`j <wc-j>` option
determines whether the member acknowledges writes after applying
the write operation in memory or after writing to the on-disk journal.

``w: "majority"``
  Any data-bearing voting member of the replica set can contribute
  to write acknowledgment of :writeconcern:`majority` write operations, 
  such as the primary and all secondaries. This includes any hidden or 
  delayed secondaries. 

  The following table lists when the member can acknowledge
  the write based on the :ref:`j <wc-j>` value:

  .. list-table::
     :stub-columns: 1
     :widths: 30 70

     * - ``j`` is unspecified
       - Acknowledgment depends on the value of
         :rsconf:`writeConcernMajorityJournalDefault`:

         - If ``true``, acknowledgment requires writing operation to on-disk journal
         - If ``false``, acknowledgment requires writing operation in memory

     * - ``j: true``
       - Acknowledgment requires writing operation to on-disk journal

     * - ``j: false``
       - Acknowledgment requires writing operation in memory.

  .. note::

     .. include:: /includes/extracts/no-journaling-rollback.rst

``w: <number>``
  Any data-bearing member of the replica set can contribute
  to write acknowledgment of :ref:`w: \<number\> <wc-w>` write
  operations, such as the primary and all secondaries. This includes 
  any hidden or delayed secondaries.
       
  The following table lists when the member can acknowledge
  the write based on the :ref:`j <wc-j>` value:

  .. list-table::
     :stub-columns: 1
     :widths: 30 70

     * - ``j`` is unspecified
       - Acknowledgment requires writing operation in memory

     * - ``j: true``
       - Acknowledgment requires writing operation to on-disk journal

     * - ``j: false``
       - Acknowledgment requires writing operation in memory.
