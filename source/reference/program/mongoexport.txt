.. _mongoexport:

===============
``mongoexport``
===============

.. default-domain:: mongodb
.. |tool-binary| replace:: mongoexport

Synopsis
--------

:program:`mongoexport` is a utility that produces a JSON or CSV export
of data stored in a MongoDB instance. See the
:doc:`/core/import-export` document for a more in depth
usage overview, and the :doc:`mongoimport` document for more
information regarding the :program:`mongoimport` utility, which
provides the inverse "importing" capability.

.. note::

   Do not use :program:`mongoimport` and :program:`mongoexport` for
   full-scale backups because they may not reliably capture data type
   information. Use :program:`mongodump` and :program:`mongorestore` as
   described in :doc:`/core/backups` for this kind of
   functionality.

Options
-------

.. binary:: mongoexport

.. program:: mongoexport

.. |component| replace:: :program:`mongoexport`
.. include:: /includes/options-mongoexport.rst

.. |binary-name| replace:: :program:`mongoexport`
.. include:: /includes/	manpage-options-auth.rst

.. option:: --dbpath <path>

   Specifies the directory of the MongoDB data files. If used, the
   ``--dbpath`` option enables :program:`mongoexport` to attach
   directly to local data files and insert the data without the
   :program:`mongod`. To run with ``--dbpath``, :program:`mongoexport`
   needs to lock access to the data directory: as a result, no
   :program:`mongod` can access the same path while the process runs.

.. option:: --directoryperdb

   Use the :option:`--directoryperdb` in conjunction with the
   corresponding option to :program:`mongod`, which allows
   :program:`mongoexport` to export data from MongoDB instances that
   have every database's files saved in discrete directories on the
   disk. This option is only relevant when specifying the
   :option:`--dbpath` option.

.. option:: --db <db>, -d <db>

   Use the :option:`--db` option to specify the name of the database
   that contains the collection you want to export.

.. option:: --collection <collection>, -c <collection>

   Use the :option:`--collection` option to specify the collection
   that you want :program:`mongoexport` to export.

.. option:: --fields <field1[,field2]>, -f <field1[,field2]>

   Specify a field or fields to *include* in the export. Use a comma
   separated list of fields to specify multiple fields.

   For :option:`--csv <mongoexport --csv>` output formats,
   :program:`mongoexport` includes only the specified field(s), and the
   specified field(s) can be a field within a sub-document.

   For :term:`JSON` output formats, :program:`mongoexport` includes
   only the specified field(s) **and** the ``_id`` field, and if the
   specified field(s) is a field within a sub-document, the
   :program:`mongoexport` includes the sub-document with all
   its fields, not just the specified field within the document.

.. option:: --fieldFile <file>

   As an alternative to :option:`--fields <mongoexport --fields>`, the
   :option:`--fieldFile <mongoexport --fields>` option allows you to
   specify in a file the field or fields to *include* in the export and
   is **only valid** with the :option:`--csv <mongoexport --csv>`
   option. The file must have only one field per line, and the line(s)
   must end with the LF character (``0x0A``).

   :program:`mongoexport` includes only the specified field(s). The
   specified field(s) can be a field within a sub-document.

.. option:: --query <JSON>, -q <JSON>

   Provides a :term:`JSON document` as a query that optionally limits
   the documents returned in the export.

   .. example::

      Given a collection named ``records`` in the database ``test``
      with the following documents:

      .. code:: json

         { "_id" : ObjectId("51f0188846a64a1ed98fde7c"), "a" : 1 }
         { "_id" : ObjectId("520e61b0c6646578e3661b59"), "a" : 1, "b" : 2 }
         { "_id" : ObjectId("520e642bb7fa4ea22d6b1871"), "a" : 2, "b" : 3, "c" : 5 }
         { "_id" : ObjectId("520e6431b7fa4ea22d6b1872"), "a" : 3, "b" : 3, "c" : 6 }
         { "_id" : ObjectId("520e6445b7fa4ea22d6b1873"), "a" : 5, "b" : 6, "c" : 8 }

      The following :program:`mongoexport` uses the :option:`-q`
      option to export only the documents with the field ``a`` greater
      than or equal to (:query:`$gte`) to ``3``:

      .. code:: bash

         mongoexport -d test -c records -q "{ a: { \$gte: 3 } } }" --out exportdir/myRecords.json

      The resulting file contains the following documents:

      .. code:: json

         { "_id" : { "$oid" : "520e6431b7fa4ea22d6b1872" }, "a" : 3, "b" : 3, "c" : 6 }
         { "_id" : { "$oid" : "520e6445b7fa4ea22d6b1873" }, "a" : 5, "b" : 6, "c" : 8 }

.. option:: --skip <number>

   Use :option:`--skip` to control where :program:`mongoexport` begins
   exporting documents.

   See :method:`~cursor.skip()` for information about the underlying
   operation.

.. option:: --limit <number>

   Specifies a maximum number of documents to include in the
   export.

   See :method:`~cursor.limit()` for information about the underlying
   operation.

.. option:: --sort <JSON>

   Specifies an ordering for exported results. If an index does
   **not** exist that can support the sort operation, the results must
   be *less than* 32 megabytes.

   Use :option:`--sort` conjunction with :option:`--skip` and
   :option:`--limit` to limit number of exported documents.

   .. code-block:: sh

      mongoexport -d test -c records --sort '{a: 1}' --limit 100 --out export.0.json
      mongoexport -d test -c records --sort '{a: 1}' --limit 100 --skip 100 --out export.1.json
      mongoexport -d test -c records --sort '{a: 1}' --limit 100 --skip 200 --out export.2.json

   See :method:`~cursor.sort()` for information about the underlying
   operation.

.. option:: --csv

   Changes the export format to a comma separated values (CSV)
   format. By default :program:`mongoexport` writes data using one
   :term:`JSON` document for every MongoDB document.

   If you specify :option:`--csv`, then you must also use either
   the :option:`--fields` or the :option:`--fieldFile` option to
   declare the fields to export from the collection.

.. option:: --jsonArray

   Modifies the output of :program:`mongoexport` to write the
   entire contents of the export as a single :term:`JSON` array. By
   default :program:`mongoexport` writes data using one JSON document
   for every MongoDB document.

.. option:: --slaveOk, -k

   Allows :program:`mongoexport` to read data from secondary or slave
   nodes when using :program:`mongoexport` with a replica set. This
   option is only available if connected to a :program:`mongod` or
   :program:`mongos` and is not available when used with the
   ":option:`mongoexport --dbpath`" option.

   This is the default behavior.

.. option:: --out <file>, -o <file>

   Specify a file to write the export to. If you do not specify a file
   name, the :program:`mongoexport` writes data to standard output
   (e.g. ``stdout``).

.. option:: --forceTableScan

   .. versionadded:: 2.2

   Forces :program:`mongoexport` to scan the data store directly:
   typically, :program:`mongoexport` saves entries as they appear in the
   index of the ``_id`` field. Use :option:`--forceTableScan` to skip
   the index and scan the data directly. Typically there are two cases
   where this behavior is preferable to the default:

   1. If you have key sizes over 800 bytes that would not be present
      in the ``_id`` index.

   2. Your database uses a custom ``_id`` field.

   When you run with :option:`--forceTableScan`, :program:`mongoexport`
   does not use :operator:`$snapshot`. As a result, the export produced
   by :program:`mongoexport` can reflect the state of the database at
   many different points in time.

   .. warning:: Use :option:`--forceTableScan` with extreme caution
      and consideration.

Use
---

In the following example, :program:`mongoexport` exports the
collection ``contacts`` from the ``users`` database from the
:program:`mongod` instance running on the localhost port number
``27017``. This command writes the export data in :term:`CSV` format
into a file located at ``/opt/backups/contacts.csv``.  The
``fields.txt`` file contains a line-separated list of fields to
export.

.. code-block:: sh

   mongoexport --db users --collection contacts --csv --fieldFile fields.txt --out /opt/backups/contacts.csv

The next example creates an export of the collection ``contacts``
from the MongoDB instance running on the localhost port number ``27017``,
with journaling explicitly enabled. This writes the export to the
``contacts.json`` file in :term:`JSON` format.

.. code-block:: sh

   mongoexport --db sales --collection contacts --out contacts.json --journal

The following example exports the collection ``contacts`` from the
``sales`` database located in the MongoDB data files located at
``/srv/mongodb/``. This operation writes the export to standard output
in :term:`JSON` format.

.. code-block:: sh

   mongoexport --db sales --collection contacts --dbpath /srv/mongodb/

.. warning::

   The above example will only succeed if there is no :program:`mongod`
   connected to the data files located in the ``/srv/mongodb/``
   directory.

The final example exports the collection ``contacts`` from the
database ``marketing`` . This data resides on the MongoDB instance
located on the host ``mongodb1.example.net`` running on port
``37017``, which requires the username ``user`` and the password
``pass``.

.. code-block:: sh

   mongoexport --host mongodb1.example.net --port 37017 --username user --password pass --collection contacts --db marketing --out mdb1-examplenet.json
