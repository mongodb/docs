===============
db.updateUser()
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.updateUser( username, update, writeConcern )

   Updates the user's profile on the database on which you run the method.
   An update to a field **completely replaces** the previous field's values.
   This includes updates to the user's ``roles`` array.

   .. warning::

      When you update the ``roles`` array, you completely replace the
      previous array's values. To add or remove roles without replacing all
      the user's existing roles, use the :method:`db.grantRolesToUser()` or
      :method:`db.revokeRolesFromUser()` methods.

   The :method:`db.updateUser()` method uses the following syntax:

   .. code-block:: javascript

      db.updateUser(
         "<username>",
         {
           customData : { <any information> },
           roles : [
             { role: "<role>", db: "<database>" } | "<role>",
             ...
           ],
           pwd: "<cleartext password>",
           authenticationRestrictions: [
              {
                clientSource: ["<IP>" | "<CIDR range>", ...],
                serverAddress: ["<IP>", | "<CIDR range>", ...]
              },
              ...
           ]
         },
         writeConcern: { <write concern> }
      )

   The :method:`db.updateUser()` method has the following arguments.


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``username``
   
        - string
   
        - The name of the user to update.
          
          
   
      * - ``update``
   
        - document
   
        - A document containing the replacement data for the user. This
          data completely replaces the corresponding data for the user.
          
          
   
      * - ``writeConcern``
   
        - document
   
        - Optional. The level of :doc:`write concern </reference/write-concern>` for the
          update operation. The ``writeConcern`` document takes the same
          fields as the :dbcommand:`getLastError` command.
          
          
   


   The ``update`` document specifies the fields to update and their
   new values. All  fields in the ``update`` document are optional,
   but *must* include at least one field.

   The ``update`` document has the following fields:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``customData``
   
        - document
   
        - Optional. Any arbitrary information.
          
          
   
      * - ``roles``
   
        - array
   
        - Optional. The roles granted to the user. An update to the ``roles`` array
          overrides the previous array's values.
          
          
   
      * - ``pwd``
   
        - string
   
        - Optional. The user's password.
          
          
   
      * - ``authenticationRestrictions``
   
        - array
   
        - Optional. The authentication restrictions the server enforces upon the user.
          Specifies a list of IP addresses and
          :abbr:`CIDR (Classless Inter-Domain Routing)` ranges from which the
          user is allowed to connect to the server or from which the server can
          accept users.
          
          .. versionadded:: 3.6
          
          
   


Roles
~~~~~

.. |local-cmd-name| replace:: :method:`db.updateUser()`
.. include:: /includes/fact-roles-array-contents.rst

Authentication Restrictions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-auth-restrictions-array-contents.rst

The :method:`db.updateUser()` method wraps the :dbcommand:`updateUser`
command.

Behavior
--------

Replica set
~~~~~~~~~~~

.. |command| replace:: :method:`db.updateUser()`

.. include:: /includes/fact-management-methods-write-concern.rst

Encyption
~~~~~~~~~

.. include:: /includes/fact-cleartext-passwords-tls.rst

Required Access
---------------

.. include:: /includes/access-update-user.rst

.. include:: /includes/access-change-own-password-and-custom-data.rst

Example
-------

Given a user ``appClient01`` in the ``products`` database with the following
user info:

.. code-block:: javascript

   {
      _id : "products.appClient01",
      userId : UUID("c5d88855-3f1e-46cb-9c8b-269bef957986"), // Starting in MongoDB 3.6.13
      user : "appClient01",
      db : "products",
      customData : { empID : "12345", badge : "9156" },
      roles : [
          {
            role : "readWrite",
            db : "products"
          },
          {
            role : "read",
            db : "inventory"
          }
      ],
      authenticationRestrictions : [ {
         clientSource: ["69.89.31.226"],
         serverAddress: ["172.16.254.1"]
      } ]
   }

The following :method:`db.updateUser()` method **completely** replaces the
user's ``customData`` and ``roles`` data:

.. code-block:: javascript

   use products
   db.updateUser( "appClient01",
   {
      customData : { employeeId : "0x3039" },
      roles : [
         { role : "read", db : "assets"  }
      ]
   } )

The user ``appClient01`` in the ``products`` database now has the following
user information:

.. code-block:: javascript

   {
      _id : "products.appClient01",
      userId : UUID("c5d88855-3f1e-46cb-9c8b-269bef957986"), // Starting in MongoDB 3.6.13
      user : "appClient01",
      db : "products",
      customData : { employeeId : "0x3039" },
      roles : [
          {
            role : "read",
            db : "assets"
          }
      ],
      authenticationRestrictions : [ {
         clientSource: ["69.89.31.226"],
         serverAddress: ["172.16.254.1"]
      } ]
   }
