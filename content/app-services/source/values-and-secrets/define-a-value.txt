.. meta::
   :robots: noindex, nosnippet

.. _define-value:

==============
Define a Value
==============

.. default-domain:: mongodb


Overview
--------

You can define a new :ref:`Value <app-value>` from the App Services UI or by
importing an application directory that contains one or more
Value configuration files. Select the tab below that
corresponds to the method that you want to use.

Procedure
---------

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      .. procedure::

         .. step:: Create a New Value

            You can define a new :doc:`Value </values-and-secrets>`
            for your application in the App Services UI. To navigate to the
            Value configuration screen, click :guilabel:`Values &
            Secrets` in the left navigation menu. Ensure that the
            :guilabel:`Values` tab is selected and then click
            :guilabel:`Create New Value`.


         .. step:: Name the Value

            Enter a unique :guilabel:`Value Name`. This name is how you refer to
            the value in functions and rules.

            .. note:: Value Name Restrictions

               Value names must not exceed 64 characters and may only contain
               ASCII letters, numbers, underscores, and hyphens. The first
               character must be a letter or number.


         .. step:: Define the Value

            Specify the :guilabel:`Value Type`. You can define two different types
            of Value: **plain text** and **secret**.

            .. tabs::

               tabs:
                 - id: value-plaintext
                   name: Plain Text Value
                   content: |
                     A **plain text** value is a string, array, or object that you define
                     manually using standard JSON syntax.

                     To define a **plain text** value, select the :guilabel:`Plain Text`
                     radio button and then enter the value in the input box.

                 - id: value-secret
                   name: Secret Value
                   content: |
                     A **secret** value exposes a :ref:`Secret <app-secret>` for use in
                     Functions and rules.

                     To reference an existing Secret, select the
                     :guilabel:`Secret` radio button and then select the name of
                     the Secret that the value should reference from the
                     :guilabel:`Secret Name` dropdown.

                     Alternatively, you can create and reference a new Secret by
                     entering the new Secret's name in the :guilabel:`Secret Name`
                     dropdown and then clicking :guilabel:`Create`. Enter the new
                     :guilabel:`Secret Value` in the input box that appears.

         .. step:: Save the Value

            After you have named and defined the new Value, click
            :guilabel:`Save`. Once saved, you can immediately
            :doc:`access the Value
            </values-and-secrets/access-a-value>` in Functions and
            rules.
   
   .. tab::
      :tabid: cli
      
      .. procedure::

         .. step:: Pull Your App's Latest Configuration Files

            .. code-block:: shell

               {+cli-bin+} pull --remote=<App ID>


         .. step:: Add a Value Configuration File

            Each Value is defined in its own JSON file in the ``values``
            subdirectory of your exported application. For example, a Value named
            ``myValue`` would be defined in the file ``/values/myValue.json``.

            Add a configuration file for the new Value to the ``values`` directory:

            .. code-block:: shell

               touch values/<Value Name>.json

            The configuration file should have the following general form:

            .. code-block:: json

               {
                 "name": "<Value Name>",
                 "from_secret": <boolean>,
                 "value": <Stored JSON Value|Secret Name>
               }

            .. list-table::
               :header-rows: 1
               :widths: 25 75

               * - Field
                 - Description

               * - ``name``
                 - A unique name for the value. This name is how you refer to
                   the value in functions and rules.

               * - ``from_secret``
                 - Default: ``false``. If ``true``, the Value exposes a
                   :ref:`Secret <app-secret>` instead of a plain-text JSON value.

               * - ``value``
                 - The stored data that App Services exposes when the Value is referenced.

                   If ``from_secret`` is ``false``, ``value`` can be a standard
                   JSON string, array, or object.

                   If ``from_secret`` is ``true``, ``value`` is a string that
                   contains the name of the Secret the value exposes.


         .. step:: Import Your Application Directory

            Ensure that the Value configuration file is saved and then navigate to
            the root of your exported application directory. Log in to MongoDB
            Atlas with the {+cli+}:

            .. code-block:: shell

               {+cli-bin+} login --api-key="<my api key>" --private-api-key="<my private api key>"

            Once you're logged in, import the directory:

            .. code-block:: shell

               {+cli-bin+} import

            Once the import completes, you can immediately begin to
            :doc:`access the Value
            </values-and-secrets/access-a-value>` in rules and
            functions.


         .. step:: Deploy the Value

            Push the value configuration to deploy it to your app.

            .. code-block:: shell

               {+cli-bin+} push


Summary
-------

- You can use the App Services UI or {+cli+} to create and define
  App Services Values.
