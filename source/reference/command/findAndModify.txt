=============
findAndModify
=============

.. default-domain:: mongodb

.. dbcommand:: findAndModify

   The :dbcommand:`findAndModify` command atomically modifies and
   returns a single document. By default, the returned document does
   not include the modifications made on the update. To return the
   document with the modifications made on the update, use the ``new``
   option. 

   The command has the following syntax:

   .. code-block:: javascript

      { findAndModify: <collection>,  <options>  }

   The :dbcommand:`findAndModify` command takes the following are
   sub-document ``options``:

   :field document query:
   
          Optional. Specifies the selection criteria for the
          modification. The ``query`` field employs the same
          :ref:`query selectors <query-selectors>` as used in the
          :method:`db.collection.find()` method. Although the query may
          match multiple documents, only one document will be selected
          for the modification.
          
          The ``query`` field has the following syntax:
          
          .. code-block:: javascript
          
             query: { <query expression> }
          
   :field document sort: 

          Optional. Determines which document will be modified if the
          query selects multiple documents. The first document as
          determined by the ``sort`` will be the one modified.

          The ``sort`` field has the following syntax:
          
          .. code-block:: javascript
          
             sort: { field1: value1, field2: value2, ... }

   :field boolean remove:

          Optional if ``update`` field exists. When ``true``, removes
          the selected document. The default is ``false``.
          
          The ``remove`` field has the following syntax:
          
          .. code-block:: javascript
          
             remove: <boolean>

   :field document update:

          Optional if ``remove`` field exists. Performs an update of
          the selected document. The ``update`` field employs the same
          :ref:`update operators <update-operators>` or ``key:value``
          specifications to modify the selected document.

          .. code-block:: javascript

             update: { <update expression> }

   :field boolean new:

          Optional. When ``true``, returns the modified document rather
          than the original. The :dbcommand:`findAndModify` method
          ignores the ``new`` option for ``remove`` operations. The
          default is ``false``.

          .. code-block:: javascript

             new: <boolean>

   :field document fields: 
   
          Optional. A subset of fields to return.
          
          .. code-block:: javascript

             fields: { field1: <boolean>, field2: <boolean> ... }

   :field boolean upsert: 
   
          Optional. Used in conjunction with the ``update`` field. When
          ``true``, the :dbcommand:`findAndModify` command creates a
          new document if the ``query`` returns no documents. The
          default is ``false``. In version 2.2, the
          :dbcommand:`findAndModify` command returns ``null`` when
          ``upsert`` is ``true``.

          .. code-block:: javascript

             upsert: <boolean>

          .. versionchanged:: 2.2
             Previously, ``upsert`` operations returned a an empty
             document (e.g. ``{ }``,) see :ref:`the 2.2 release notes
             <2.2-findandmodify-returns-null>` for more information.

   Consider the following example:

   .. code-block:: javascript

      { findAndModify: "people",
        query: { name: "Tom", state: "active", rating: { $gt: 10 } },
        sort: { rating: 1 },
        update: { $inc: { score: 1 } }
      }

   This command performs the following actions:
   
   #. The ``query`` finds a document in the ``people`` collection where the
      ``name`` field has the value ``Tom``, the ``state`` field has the
      value ``active`` and the ``rating`` field has a value
      :operator:`greater than <$gt>` 10.
   
   #. The ``sort`` orders the results of the query in ascending order.
   
   #. The update :operator:`increments <$inc>` the value of the
      ``score`` field by 1.
   
   #. The command returns the original (pre-modification) document
      selected for this update.

   The shell and many :term:`drivers <driver>` provide a
   :method:`findAndModify()` helper method. Using the shell helper,
   this same operation can take the following form:

   .. code-block:: javascript

      db.people.findAndModify( {
          query: { name: "Tom", state: "active", rating: { $gt: 10 } },
          sort: { rating: 1 },
          update: { $inc: { score: 1 } }
          } );

   .. warning::

      When using :dbcommand:`findAndModify` in a :term:`sharded
      <sharding>` environment, the ``query`` must contain the
      :term:`shard key` for all operations against the shard
      cluster. :dbcommand:`findAndModify` operations issued against
      :program:`mongos` instances for non-sharded collections function
      normally.

   .. include:: /includes/warning-blocking-database.rst
