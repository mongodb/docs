.. meta::
   :robots: noindex, nosnippet 

.. _read-operations-cursors:

===============================
Iterate a Cursor in ``mongosh``
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This tutorial demonstrates how to access documents in a :term:`cursor`. 

About This Task
---------------------------

To access documents in a cursor, you can manually iterate the cursor or use
the :method:`~cursor.toArray()` method.

This tutorial overviews how to: 

- Save a cursor as a variable using the ``let`` keyword.

- Use the :method:`next() <cursor.next()>`, :method:`hasNext()
  <cursor.hasNext()>`, and :method:`forEach() <cursor.forEach()>` methods to
  access documents in a cursor.

- Return and access the cursor documents as an array with the
  :method:`~cursor.toArray()` method.

Before You Begin
---------------------------

- Install :ref:`mongosh <mdb-shell-install>`.

- Connect to a :ref:`deployment <mdb-shell-connect>`.

Insert Documents Into a New Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use :binary:`~bin.mongosh` to insert documents into a new collection using the default
``test`` database:

.. code-block:: javascript

   db.users.insertMany( [ 
      { _id: 0, type: "admin", email: "admin@example.com", name: "Admin User" }, 
      { _id: 1, type: "user", email: "user1@example.com", name: "Test User 1" }, 
      { _id: 2, type: "user", email: "user2@example.com", name: "Test User 2" }
   ] )

Examples 
--------

Save a Cursor with ``let``
~~~~~~~~~~~~~~~~~~~~~~~~~~

In :binary:`~bin.mongosh`, the cursor does not automatically iterate when you
assign it to a variable using the ``let`` keyword.

.. code-block:: javascript

   let myCursor = db.users.find( { type: "user" } )

You can call the cursor variable in the shell to iterate up to 20 times
[#set-shell-batch-size]_ and print the matching documents.

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript

      myCursor

   .. output::
      :language: shell
      :visible: false

      [
         {
            _id: 1,
            type: 'user',
            email: 'user1@example.com',
            name: 'Test User 1'
         },
         {
            _id: 2,
            type: 'user',
            email: 'user2@example.com',
            name: 'Test User 2'
         }
      ]

If the returned cursor is not assigned to a variable using the ``let`` keyword,
then the cursor is automatically iterated up to the batch size
[#set-shell-batch-size]_, printing the first batch of results.

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript

      db.users.find( { type: "user" } )

   .. output::
      :language: shell
      :visible: false

      [
         {
            _id: 1,
            type: 'user',
            email: 'user1@example.com',
            name: 'Test User 1'
         },
         {
            _id: 2,
            type: 'user',
            email: 'user2@example.com',
            name: 'Test User 2'
         }
      ]

Access Documents in a Cursor with :method:`next() <cursor.next()>`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can also use the cursor method :method:`next() <cursor.next()>` to access
the documents. :method:`next() <cursor.next()>` returns the document the cursor
currently points and then moves the cursor forward to the next document.

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript
      :emphasize-lines: 3

      let myCursor = db.users.find( { type: "user" } )

      myCursor.next()

   .. output::
      :language: shell
      :visible: false

      {
         _id: 1,
         type: 'user',
         email: 'user1@example.com',
         name: 'Test User 1'
      }


Access Documents in a Cursor with :method:`hasNext() <cursor.hasNext()>`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The cursor method :method:`hasNext() <cursor.hasNext()>` returns ``true`` or
``false`` to indicate if there are more documents to be returned from the cursor.

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript
      :emphasize-lines: 3

      let myCursor = db.users.find( { type: "user" } )

      myCursor.hasNext()

   .. output::
      :language: shell
      :visible: false

      true

You can use the :method:`hasNext() <cursor.hasNext()>` and :method:`next()
<cursor.next()>` methods to print all remaining documents from the cursor using
the ``printjson()`` helper.

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript
      :emphasize-lines: 3, 4, 5

      let myCursor = db.users.find( { type: "user" } )

      while ( myCursor.hasNext() ) { 
         printjson( myCursor.next() )
      }

   .. output::
      :language: shell
      :visible: false

      {
         _id: 1,
         type: 'user',
         email: 'user1@example.com',
         name: 'Test User 1'
      }
      {
         _id: 2,
         type: 'user',
         email: 'user2@example.com',
         name: 'Test User 2'
      }

Access Documents in a Cursor with :method:`forEach() <cursor.forEach()>`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Similarly, you can use the cursor method :method:`forEach() <cursor.forEach()>`
to apply a helper, such as ``printjson()``, to each document in the cursor.

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript
      :emphasize-lines: 3

      let myCursor = db.users.find( { type: "user" } )

      myCursor.forEach( myDocument => printjson(myDocument) )

   .. output::
      :language: shell
      :visible: false

      {
         _id: 1,
         type: 'user',
         email: 'user1@example.com',
         name: 'Test User 1'
      }
      {
         _id: 2,
         type: 'user',
         email: 'user2@example.com',
         name: 'Test User 2'
      }

Starting in :binary:`~bin.mongosh` 2.1.0, you can also use ``for-of`` loops to
iterate the cursor. The following example returns the same results as the
previous example.

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript
      :emphasize-lines: 3, 4, 5

      let myCursor = db.users.find( { type: "user" } )

      for ( let myDocument of myCursor ) {
         printjson( myDocument )
      }

   .. output::
      :language: shell
      :visible: false

      {
         _id: 1,
         type: 'user',
         email: 'user1@example.com',
         name: 'Test User 1'
      }
      {
         _id: 2,
         type: 'user',
         email: 'user2@example.com',
         name: 'Test User 2'
      }

See :ref:`JavaScript cursor methods <js-query-cursor-methods>` and your
:driver:`driver </>` documentation for more information on cursor methods.

Access Documents in a Cursor with :method:`toArray() <cursor.toArray()>`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In :binary:`~bin.mongosh`, use the :method:`~cursor.toArray()` method to
iterate the cursor and return the documents in an array.

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript
      :emphasize-lines: 5

      let myCursor = db.users.find( { type: "user" } )

      let documentArray = myCursor.toArray()

      documentArray

   .. output::
      :language: shell
      :visible: false

      [
         {
            _id: 1,
            type: 'user',
            email: 'user1@example.com',
            name: 'Test User 1'
         },
         {
            _id: 2,
            type: 'user',
            email: 'user2@example.com',
            name: 'Test User 2'
         }
      ]

You can access the resulting document array as a traditional array.

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript
      :emphasize-lines: 5

      let myCursor = db.users.find( { type: "user" } )

      let documentArray = myCursor.toArray()

      documentArray[1]

   .. output::
      :language: shell
      :visible: false

      {
         _id: 2,
         type: 'user',
         email: 'user2@example.com',
         name: 'Test User 2'
      }

The :method:`~cursor.toArray()` method loads all documents returned by the
cursor into RAM and exhausts the cursor.

Some :driver:`Drivers </>` provide access to the documents by using an index on
the cursor (i.e. ``cursor[index]``). This is a shortcut for first calling the
:method:`~cursor.toArray()` method and then using an index on the resulting
array.

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript
      :emphasize-lines: 3

      let myCursor = db.users.find( { type: "user" } )

      myCursor.toArray() [1]

   .. output::
      :language: shell
      :visible: false

      {
         _id: 2,
         type: 'user',
         email: 'user2@example.com',
         name: 'Test User 2'
      }


.. include:: /includes/footnote-set-shell-batch-size.rst

