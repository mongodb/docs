.. _profiler:

========================
Database Profiler Output
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The database profiler captures data information about read and write
operations, cursor operations, and database commands. To configure the
database profile and set the thresholds for capturing profile data,
see the :doc:`/tutorial/manage-the-database-profiler` section.

The database profiler writes data in the :data:`system.profile
<<database>.system.profile>` collection,
which is a :term:`capped collection`. To view the profiler's output,
use normal MongoDB queries on the :data:`system.profile
<<database>.system.profile>` collection.

.. note::

   Because the database profiler writes data to the
   :data:`system.profile <<database>.system.profile>` collection in a
   database, the profiler will profile some write activity, even for
   databases that are otherwise read-only.

.. versionchanged:: 3.4

:dbcommand:`currentOp` and the
:doc:`database profiler</reference/database-profiler>` report the same
basic diagnostic information for all CRUD operations, including the
following:

.. include:: /includes/fact-diagnostic-info.rst

Example ``system.profile`` Document
-----------------------------------

The documents in the :data:`system.profile <<database>.system.profile>`
collection have the following form. This example document reflects a
find operation on a standalone :program:`mongod`:

.. code-block:: javascript

   {
      "op" : "query",
      "ns" : "test.c",
      "command" : {
         "find" : "c",
         "filter" : {
            "a" : 1
         },
         "$clusterTime" : {
               "clusterTime" : Timestamp(1516119535, 1),
               "signature" : {
                  "hash" : BinData(0,"h6fRyauI8KAejCbq4DvwvJAoJ1s="),
                  "keyId" : NumberLong("6511683304255651841")
               }
         },
         "$db" : "test"
      },
      "keysExamined" : 2,
      "docsExamined" : 2,
      "cursorExhausted" : true,
      "numYield" : 0,
      "locks" : {
         "Global" : {
            "acquireCount" : {
               "r" : NumberLong(2)
            }
         },
         "Database" : {
            "acquireCount" : {
               "r" : NumberLong(1)
            }
         },
         "Collection" : {
            "acquireCount" : {
               "r" : NumberLong(1)
            }
         }
      },
      "nreturned" : 2,
      "responseLength" : 108,
      "protocol" : "op_msg",
      "millis" : 0,
      "planSummary" : "IXSCAN { a: 1 }",
      "execStats" : {
         "stage" : "FETCH",
         "nReturned" : 2,
         "executionTimeMillisEstimate" : 0,
         "works" : 3,
         "advanced" : 2,
         "needTime" : 0,
         "needYield" : 0,
         "saveState" : 0,
         "restoreState" : 0,
         "isEOF" : 1,
         "invalidates" : 0,
         "docsExamined" : 2,
         "alreadyHasObj" : 0,
         "inputStage" : {
            "stage" : "IXSCAN",
            "nReturned" : 2,
            "executionTimeMillisEstimate" : 0,
            "works" : 3,
            "advanced" : 2,
            "needTime" : 0,
            "needYield" : 0,
            "saveState" : 0,
            "restoreState" : 0,
            "isEOF" : 1,
            "invalidates" : 0,
            "keyPattern" : {
               "a" : 1
            },
            "indexName" : "a_1",
            "isMultiKey" : false,
            "multiKeyPaths" : {
               "a" : [ ]
            },
            "isUnique" : false,
            "isSparse" : false,
            "isPartial" : false,
            "indexVersion" : 1,
            "direction" : "forward",
            "indexBounds" : {
               "a" : [
                  "[1.0, 1.0]"
               ]
            },
            "keysExamined" : 2,
            "seeks" : 1,
            "dupsTested" : 0,
            "dupsDropped" : 0,
            "seenInvalidated" : 0
         }
      },
      "ts" : ISODate("2015-09-03T15:26:14.948Z"),
      "client" : "127.0.0.1",
      "appName" : "MongoDB Shell",
      "allUsers" : [
            {
               "user" : "report1",
               "db" : "test"
            }
         ],
         "user" : "report1@test"
   }

The profile entry for :dbcommand:`update` and :dbcommand:`delete`
contains the entire update/delete document applied to the named
collection. Multiple update/delete documents will result in a profile
entry for each document.

The following example reflects a single :dbcommand:`update` operation 
on a collection named ``c``.

.. code-block:: javascript

   {
      "op" : "update",
      "ns" : "test.c",
      "command" : {
         "q" : {
            "a" : 1
         },
         "u" : {
            "$set" : {
               "b" : 2
            }
         },
         "multi" : false,
         "upsert" : false
      },
      "keysExamined" : 2,
      "docsExamined" : 2,
      "nMatched" : 1,
      "nModified" : 1, 
      ...
   }


Output Reference
----------------

For any single operation, the documents created by the database
profiler will include a subset of the following fields. The precise
selection of fields in these documents depends on the type of
operation.

.. versionchanged:: 3.2.0

   ``system.profile.query.skip`` replaces the ``system.profile.ntoskip``
   field.

.. versionchanged:: 3.2.0

   The information in the ``system.profile.ntoreturn`` field has been
   replaced by two separate fields, ``system.profile.query.limit`` and
   ``system.profile.query.batchSize``. Older drivers or older versions
   of the :binary:`~bin.mongo` shell may still use ``ntoreturn``; this will
   appear as ``system.profile.query.ntoreturn``.

.. note::

   For the output specific to the version of your MongoDB, refer to
   the appropriate version of the MongoDB Manual.

.. data:: system.profile.op

   The type of operation. The possible values are:

   - ``command``
   - ``count``
   - ``distinct``
   - ``geoNear``
   - ``getMore``
   - ``group``
   - ``insert``
   - ``mapReduce``
   - ``query``
   - ``remove``
   - ``update``

.. data:: system.profile.ns

   The :term:`namespace` the operation targets. Namespaces in MongoDB
   take the form of the :term:`database`, followed by a dot (``.``),
   followed by the name of
   the :term:`collection`.

.. data:: system.profile.command

   .. include:: /includes/extracts/command-field-profiler.rst

.. data:: system.profile.originatingCommand

   .. include:: /includes/fact-originating-command-ref.rst

.. data:: system.profile.cursorid

   The ID of the cursor accessed by a ``query`` and ``getmore``
   operations.

.. data:: system.profile.keysExamined

   .. versionchanged:: 3.2.0

   Renamed from ``system.profile.nscanned``.
   The number of :doc:`index </indexes>` keys that MongoDB scanned in
   order to carry out the operation.

   In general, if :data:`~system.profile.keysExamined` is much higher
   than :data:`~system.profile.nreturned`, the database is scanning many
   index keys to find the result documents. Consider creating or
   adjusting indexes to improve query performance..

   .. versionchanged:: 3.4

   ``keysExamined`` is available for the following commands and
   operations:

   .. include:: /includes/fact-command-diagnostics.rst

.. data:: system.profile.docsExamined

   .. versionchanged:: 3.2.0

      Renamed from ``system.profile.nscannedObjects``.

   The number of documents in the collection that MongoDB scanned in
   order to carry out the operation.

   .. versionchanged:: 3.4

   ``docsExamined`` is available for the following commands and
   operations:

   .. include:: /includes/fact-command-diagnostics.rst

.. data:: system.profile.moved

   *Removed in 3.4.*

   .. versionchanged:: 3.0.0

      Only appears when using the MMAPv1 storage engine.

   This field appears with a value of ``true`` when an update operation
   moved one or more documents to a new location on disk. If the operation
   did not result in a move, this field does not appear. Operations that
   result in a move take more time than in-place updates and typically
   occur as a result of document growth.

.. data:: system.profile.nmoved

   .. versionchanged:: 3.0.0

      Only appears when using the MMAPv1 storage engine.

   The number of documents the operation moved on disk. This field appears
   only if the operation resulted in a move. The field's implicit value is
   zero, and the field is present only when non-zero.

.. data:: system.profile.hasSortStage

   .. versionchanged:: 3.2.0

      Renamed from ``system.profile.scanAndOrder``.

   :data:`~system.profile.hasSortStage` is a boolean that is ``true``
   when a query **cannot** use the ordering in the index to return the
   requested sorted results; i.e. MongoDB must sort the documents after
   it receives the documents from a cursor. The field only appears when
   the value is ``true``.

   .. versionchanged:: 3.4

   ``hasSortStage`` is available for the following commands and
   operations:

   - ``find`` (:ref:`OP_QUERY<wire-op-query>` and
     :dbcommand:`command<find>`)
   - ``getMore`` (:ref:`OP_GET_MORE<wire-op-query>` and
     :dbcommand:`command<getMore>`)
   - :dbcommand:`findAndModify`
   - :dbcommand:`mapReduce`
   - :dbcommand:`aggregate`

.. data:: system.profile.ndeleted

   The number of documents deleted by the operation.

.. data:: system.profile.ninserted

   The number of documents inserted by the operation.

.. data:: system.profile.nMatched

   .. versionadded:: 2.6

   The number of documents that match the :data:`system.profile.query`
   condition for the update operation.

.. data:: system.profile.nModified

   .. versionadded:: 2.6

   The number of documents modified by the update operation.

.. data:: system.profile.upsert

   A boolean that indicates the update operation's ``upsert`` option
   value. Only appears if ``upsert`` is true.

.. data:: system.profile.fastmodinsert

   .. deprecated:: 3.4

   Records the number of update operations that match all of the
   following criteria:

   - Are upserts (that result in an insert)
   - Do not use a modifier operation such as :update:`$set`

.. data:: system.profile.fromMultiPlanner

   .. versionadded:: 3.2.5

   A boolean that indicates whether the query planner evaluated multiple
   plans before choosing the winning execution plan for the query.

   Only present when value is ``true``.

.. data:: system.profile.replanned

   .. versionadded:: 3.2.5

   A boolean that indicates whether the query system evicted a cached
   plan and re-evaluated all candidate plans.

   Only present when value is ``true``.

.. data:: system.profile.keysInserted

   The number of index keys inserted for a given write operation.

.. data:: system.profile.keysDeleted

   *Removed in 3.4.*

   The number of :doc:`index </indexes>` keys the update changed in
   the operation. Changing an index key carries a small performance
   cost because the database must remove the old key and inserts a new
   key into the B-tree index.

.. data:: system.profile.writeConflicts

   .. versionadded:: 3.0.0

   The number of conflicts encountered during the write operation; e.g.
   an ``update`` operation attempts to modify the same document as
   another ``update`` operation. See also :term:`write conflict`.

.. data:: system.profile.numYield

   The number of times the operation yielded to allow other operations
   to complete. Typically, operations yield when they need access to
   data that MongoDB has not yet fully read into memory. This allows
   other operations that have data in memory to complete while MongoDB
   reads in data for the yielding operation. For more information,
   see :ref:`the FAQ on when operations yield
   <faq-concurrency-yielding>`.

.. data:: system.profile.locks

   .. versionadded:: 3.0.0

      :data:`~system.profile.locks` replaces the ``lockStats`` field.

   The :data:`system.profile.locks` provides information for various
   :ref:`lock types and lock modes <faq-concurrency-locking>` held
   during the operation.

   The possible lock types are:

   .. include:: /includes/fact-lock-types.rst

   The possible locking modes for the lock types are as follows:

   .. include:: /includes/fact-lock-modes.rst

   The returned lock information for the various lock types include:

   .. data:: system.profile.locks.acquireCount

      Number of times the operation acquired the lock in the specified
      mode.

   .. data:: system.profile.locks.acquireWaitCount

      Number of times the operation had to wait for the
      :data:`~system.profile.locks.acquireCount` lock acquisitions
      because the locks were held in a conflicting mode.
      :data:`~system.profile.locks.acquireWaitCount` is less than or
      equal to :data:`~system.profile.locks.acquireCount`.

   .. data:: system.profile.locks.timeAcquiringMicros

      Cumulative time in microseconds that the operation had to wait to
      acquire the locks.

      :data:`~system.profile.locks.timeAcquiringMicros` divided by
      :data:`~system.profile.locks.acquireWaitCount` gives an
      approximate average wait time for the particular lock mode.

   .. data:: system.profile.locks.deadlockCount

      Number of times the operation encountered deadlocks while waiting
      for lock acquisitions.

   For more information on lock modes, see
   :ref:`faq-concurrency-locking`.

.. data:: system.profile.nreturned

   The number of documents returned by the operation.

.. data:: system.profile.responseLength

   The length in bytes of the operation's result document. A large
   :data:`~system.profile.responseLength` can affect performance.
   To limit the size of the
   result document for a query operation, you can use any of the
   following:

   - :ref:`Projections <read-operations-projection>`
   - :method:`The limit() method <cursor.limit()>`
   - :method:`The batchSize() method <cursor.batchSize()>`

   .. note:: When MongoDB writes query profile information to the log,
      the :data:`~system.profile.responseLength` value is in a field
      named ``reslen``.

.. data:: system.profile.protocol

   The :doc:`/reference/mongodb-wire-protocol` request message format.

.. data:: system.profile.millis

   The time in milliseconds from the perspective of the
   :binary:`~bin.mongod` from the beginning of the operation to the end of
   the operation.

.. data:: system.profile.planSummary

   .. versionadded:: 3.4

   A summary of the execution plan.
   
.. data:: system.profile.execStats

   .. versionchanged:: 3.0

   A document that contains the execution statistics of the query
   operation. For other operations, the value is an empty document.

   The :data:`system.profile.execStats` presents the statistics as a
   tree; each node provides the statistics for the operation executed
   during that stage of the query operation.

   .. note::

      The following fields list for :data:`~system.profile.execStats`
      is not meant to be exhaustive as the returned fields vary per
      stage.

   .. data:: system.profile.execStats.stage
   
      .. versionadded:: 3.0
         :data:`~system.profile.execStats.stage` replaces the ``type`` field.

      The descriptive name for the operation performed as part of the
      query execution; e.g.

      - ``COLLSCAN`` for a collection scan
      - ``IXSCAN`` for scanning index keys
      - ``FETCH`` for retrieving documents

   .. data:: system.profile.execStats.inputStages

      .. versionadded:: 3.0

         :data:`~system.profile.execStats.inputStages` replaces the
         ``children`` field.

      An array that contains statistics for the operations that are the
      input stages of the current stage.

.. data:: system.profile.ts

   The timestamp of the operation.

.. data:: system.profile.client

   The IP address or hostname of the client connection where the
   operation originates.

   For some operations, such as :method:`db.eval()`, the client is
   ``0.0.0.0:0`` instead of an actual client.

.. data:: system.profile.appName

   .. include:: /includes/fact-client-appname.rst

.. data:: system.profile.allUsers

   An array of authenticated user information (user name and database)
   for the session. See also :doc:`/core/security-users`.

.. data:: system.profile.user

   The authenticated user who ran the operation. If the operation was
   not run by an authenticated user, this field's value is an empty
   string.
