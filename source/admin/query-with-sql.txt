.. _query-with-sql:

=================
Querying with SQL
=================

.. default-domain:: mongodb

.. include:: /includes/extracts/fact-sql-beta-message.rst

{+adl+} supports SQL format queries through the :ref:`JDBC driver 
<jdbc-driver>` for {+adl+} and using the :ref:`adl-sql-stage` 
:ref:`aggregation pipeline <adl-aggregation-pipeline>` stage. To support 
SQL format queries, {+adl+} automatically creates a |json| schema that maps 
to a relational schema of columns, tables, and databases for all new 
collections, except wildcard (``*``) collections, and views in the {+dl+} 
storage configuration. To learn more about the schema, see 
:ref:`sql-schema-format`.

{+dl+} automatically generates a schema for a new non-wildcard collection or 
view in the storage configuration when you: 

- :ref:`Create <dl-create-collection-views-cmd>` the collection or view 
  in the storage configuration.

- :ref:`Rename <dl-rename-collection-cmd>` a collection or view that does not 
  already have a schema. If you rename a collection or view that already has 
  a schema, the schema is also renamed. {+dl+} does not generate a new schema 
  for a renamed collection or view if it already exists.

- :ref:`Set <datalake-setstorageconfig>` the storage configuration.

.. include:: /includes/fact-schema-for-existing-collections.rst

By default, {+dl+} samples data from only one randomly selected document in 
your non-wildcard collection or view to generate a |json| schema. If your 
collection or view contains polymorphic data, you can provide a larger 
sampling size to {+dl+} to generate a new schema or you can manually 
construct and set the schema. 

You can manually generate schemas for all collections and views using the 
:ref:`sqlgenerateschema-cmd` command, set or update the schema for your 
collections or views using the :ref:`sqlsetschema-cmd` command, and view 
the stored schema using the :ref:`sqlgetschema-cmd` command. 

Once the SQL schema is set up, you can query your {+adl+} collections or views 
through the :ref:`JDBC driver <jdbc-driver>` for {+adl+} and using the 
:ref:`adl-sql-stage` :ref:`aggregation pipeline <adl-aggregation-pipeline>` 
stage. 

You can manually delete a schema for a collection or view by running the 
:ref:`sqlsetschema-cmd` command with an empty schema document. {+dl+} 
automatically removes the schema for a collection or view when you: 

- :ref:`Drop the collection or view <dl-drop-collection-views-cmd>` from the 
  storage configuration.
- :ref:`Modify the storage configuration <datalake-setstorageconfig>` to 
  remove the collection or view from the storage configuration.
- :ref:`Drop the database <dl-drop-database-cmd>` that contains the collection 
  or view from the storage configuration.

.. toctree::
   :titlesonly:
   :hidden:

   SQL Schema Format </reference/format/sql-schema-format>
   Generate SQL Schema </reference/cli/sql/sqlgenerateschema>
   Set SQL Schema </reference/cli/sql/sqlsetschema>
   Retrieve SQL Schema </reference/cli/sql/sqlgetschema>
   Connect Using JDBC Driver </tutorial/jdbc-driver>
