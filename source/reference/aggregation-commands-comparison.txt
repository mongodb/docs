===============================
Aggregation Commands Comparison
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. admonition:: Aggregation Pipeline as Alternative to Map-Reduce
   :class: note

   .. include:: /includes/fact-use-aggregation-not-map-reduce.rst

Aggregation Commands Comparison Table
-------------------------------------

The following table provides a brief overview of the features of the
MongoDB aggregation commands.

.. list-table::
   :header-rows: 1
   :widths: 30 40 40 

   * -  

     - :dbcommand:`aggregate` / :method:`db.collection.aggregate()`

     - :dbcommand:`mapReduce` / :method:`db.collection.mapReduce()`

   * - **Description**

     - 
       Designed with specific goals of improving performance and
       usability for aggregation tasks.
       
       Uses a "pipeline" approach where objects are transformed as they
       pass through a series of pipeline operators such as
       :pipeline:`$group`, :pipeline:`$match`, and :pipeline:`$sort`.
       
       See :doc:`/reference/operator/aggregation` for more information
       on the pipeline operators.
       

     - Implements the Map-Reduce aggregation for processing large data sets.
       

   * - **Key Features**

     - Pipeline operators can be repeated as needed.
       
       Pipeline operators need not produce one output document for every
       input document.
       
       Can also generate new documents or filter out documents.

       With the addition of :pipeline:`$merge` in version 4.2, can
       create on-demand materialized views, where the content of the
       output collection can be updated incrementally the pipeline is
       run. :pipeline:`$merge` can incorporate results (insert new
       documents, merge documents, replace documents, keep existing
       documents, fail the operation, process documents with a custom
       update pipeline) into an existing collection.
       
       

     - In addition to grouping operations, can perform complex
       aggregation tasks as well as perform incremental aggregation on
       continuously growing datasets.
       
       See :doc:`/tutorial/map-reduce-examples/` and
       :doc:`/tutorial/perform-incremental-map-reduce/`.
       

   * - **Flexibility**

     - Starting in version 4.4, can define custom aggregation
       expressions with :group:`$accumulator` and
       :expression:`$function`.
     
       In previous versions, can only use operators and expressions
       supported by the aggregation pipeline. 
       
       However, can add computed
       fields, create new virtual sub-objects, and extract sub-fields
       into the top-level of results by using the :pipeline:`$project`
       pipeline operator.
       
       See :pipeline:`$project` for more information as well as
       :doc:`/reference/operator/aggregation` for more information on all
       the available pipeline operators.
       

     - Custom ``map``, ``reduce`` and ``finalize`` JavaScript
       functions offer flexibility to aggregation logic.
       
       See :dbcommand:`mapReduce` for details and restrictions
       on the functions.
       

   * - **Output Results**

     - Returns results as a cursor. If the pipeline includes the
       :pipeline:`$out` stage or :pipeline:`$merge` stage, the cursor
       is empty.
       
       With :pipeline:`$out`, you can replace an existing output
       collection completely or output to a new collection. See
       :pipeline:`$out` for details.

       With :pipeline:`$merge`, you can output to a new or existing
       collection. For existing cllections, you can specify how to
       incorporate the results into the output collection (insert new
       documents, merge documents, replace documents, keep existing
       documents, fail the operation, process documents with a custom
       update pipeline). See :pipeline:`$merge` for details.
 
     - Returns results in various options (inline, new collection, merge,
       replace, reduce). See :dbcommand:`mapReduce` for details on the
       output options.
       

   * - **Sharding**

     - Supports non-sharded and sharded input collections.
     
       :pipeline:`$merge` can output to a non-sharded or sharded
       collection.

     - Supports non-sharded and sharded input collections.


   * - **More Information**

     - 
       - :doc:`/core/aggregation-pipeline` 
       - :method:`db.collection.aggregate()`
       - :dbcommand:`aggregate`

     - 
       - :doc:`/core/map-reduce`
       - :method:`db.collection.mapReduce()` 
       - :dbcommand:`mapReduce`.

.. seealso::

   - :doc:`/reference/map-reduce-to-aggregation-pipeline`