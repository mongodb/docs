.. _node-authentication-aws:

================================
AWS IAM Authentication Mechanism
================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: atlas, amazon web services, code example

Overview
--------

The ``MONGODB-AWS`` authentication mechanism uses Amazon Web Services
Identity and Access Management (AWS IAM) credentials to authenticate a user to MongoDB.
You can use this mechanism only when authenticating to MongoDB Atlas.

.. tip:: Configure Atlas for AWS IAM Authentication

   To learn more about configuring MongoDB Atlas for AWS IAM authentication, see
   :atlas:`Set Up Authentication with AWS IAM </security/aws-iam-authentication/>` in
   the Atlas documentation.

Specify MONGODB-AWS Authentication
----------------------------------

The ``MONGODB-AWS`` authentication mechanism uses your Amazon Web Services
Identity and Access Management (AWS IAM) credentials to authenticate your
user. If you do not already have the `AWS signature library
<https://www.npmjs.com/package/aws4>`__, use the following
``npm`` command to install it:

.. code-block:: bash

   npm install aws4

To connect to a MongoDB instance with ``MONGODB-AWS`` authentication
enabled, specify the ``MONGODB-AWS`` authentication mechanism.

The driver checks for your credentials in the following sources in order:

1. Connection string
#. Environment variables
#. Web identity token file
#. AWS ECS endpoint specified in ``AWS_CONTAINER_CREDENTIALS_RELATIVE_URI``
#. AWS EC2 endpoint. For more information, see `IAM Roles for Tasks
   <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html>`_.

.. important::

   The driver only reads the credentials from the first method that it detects
   in the order as given by the preceding list. For example, if you specify 
   your AWS credentials in the connection string, the driver ignores any 
   credentials that you specified in environment variables.

.. tabs::

   .. tab:: Connection String
      :tabid: connection string

      To connect to your MongoDB instance with a connection string, pass
      your ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY``
      credentials to the driver when you attempt to connect. If your AWS
      login requires a session token, include your ``AWS_SESSION_TOKEN`` as well.

      The following code shows an example of specifying the ``MONGODB-AWS``
      authentication mechanism and credentials with a connection string:

      .. important::

         Always **URI encode** the username and certificate file path using the
         ``encodeURIComponent`` method to ensure they are correctly parsed.

      .. literalinclude:: /code-snippets/authentication/aws.js
         :language: javascript

   .. tab:: Environment Variables
      :tabid: environment variables

      To authenticate to your MongoDB instance using AWS credentials stored in
      environment variables, set the following variables by using
      a shell:

      .. code-block:: bash

         export AWS_ACCESS_KEY_ID=<awsKeyId>
         export AWS_SECRET_ACCESS_KEY=<awsSecretKey>
         export AWS_SESSION_TOKEN=<awsSessionToken>

      .. note::

         Omit the line containing ``AWS_SESSION_TOKEN`` if you don't need an AWS
         session token for that role.

      AWS recommends using regional AWS STS endpoints instead of global 
      endpoints to reduce latency, build-in redundancy, and increase session token validity.
      To set the AWS region, set `AWS_REGION <https://docs.aws.amazon.com/sdkref/latest/guide/feature-region.html>`__ 
      and `AWS_STS_REGIONAL_ENDPOINTS <https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html>`__
      as environment variables, as shown in the following example: 

      .. code-block:: bash
         
         export AWS_STS_REGIONAL_ENDPOINTS=regional // Enables regional endpoints
         export AWS_REGION=us-east-1 // Sets your AWS region
         
      If both these environment variables aren't set, the default region is 
      ``us-east-1``. For a list of available AWS regions, see the
      `Regional Endpoints <https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints>`__ 
      section of the AWS Service Endpoints reference in the AWS documentation. 
      
      After you've set the preceding environment variables, specify the ``MONGODB-AWS``
      authentication mechanism in your connection string as shown in the following example:

      .. literalinclude:: /code-snippets/authentication/aws-env-variable.js
         :language: javascript
      
   .. tab:: Web Identity Token File
      :tabid: web-identity-token-file

      You can use the OpenID Connect (OIDC) token obtained from a web identity
      provider to authenticate to Amazon Elastic Kubernetes Service (EKS) or
      other services.

      To authenticate with your OIDC token you must first install
      `@aws-sdk/credential-providers
      <https://www.npmjs.com/package/@aws-sdk/credential-providers>`__. You can
      install this dependency using the following ``npm`` command:

      .. code-block:: bash

         npm install @aws-sdk/credential-providers

      Next, create a file that contains your OIDC token. Then 
      set the absolute path to this file in an environment variable by using
      a shell as shown in the following example:

      .. code-block:: bash

         export AWS_WEB_IDENTITY_TOKEN_FILE=<absolute path to file containing your OIDC token>

      After you've set the preceding environment variable, specify the ``MONGODB-AWS``
      authentication mechanism in your connection string as shown in the following example:

      .. literalinclude:: /code-snippets/authentication/aws-env-variable.js
         :language: javascript

.. important:: Retrieval of AWS Credentials
   
   Starting in MongoDB version 4.11, when you install the optional
   ``aws-sdk/credential-providers`` dependency, the driver uses the AWS SDK
   to retrieve credentials from the environment. As a result, if you
   have a shared AWS credentials file or config file, the driver will
   use those credentials by default.
   
   You can override this behavior by performing one of the following
   actions:
   
   - Set ``AWS_SHARED_CREDENTIALS_FILE`` variable in your shell to point
     to your credentials file.
   - Set the equivalent environment variable in your application to point
     to your credentials file.
   - Create an AWS profile for your MongoDB credentials and set the
     ``AWS_PROFILE`` environment variable to that profile name.

API Documentation
-----------------

To learn more about any of the methods or types discussed on this
page, see the following API documentation:

- `MongoClient <{+api+}/classes/MongoClient.html>`__
