# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/aggregation-pipeline-optimization.txt:3
# efb384821afc40389e454d9bfe4bcb74
msgid "Aggregation Pipeline Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:7
# 34211e0265c44cc585d663a3a3c2b99e
msgid "Aggregation pipeline operations have an optimization phase which attempts to reshape the pipeline for improved performance."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:10
# 9a0d98c2342544d4810c6e91f4acefd4
msgid "To see how the optimizer transforms a particular aggregation pipeline, include the :method:`explain <db.collection.aggregate()>` option in the :method:`db.collection.aggregate()` method."
msgstr ""

#: ../source/includes/fact-optimizations-subject-to-change.rst:1
# 79d231803fbc4e9a8f13998433bb84d3
msgid "Optimizations are subject to change between releases."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:19
# 1a30d5a371a34d65b73d7ce933ac5e34
msgid "Projection Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:21
# 9e82e0578e40457aa16d5a55e02e1c0d
msgid "The aggregation pipeline can determine if it requires only a subset of the fields in the documents to obtain the results. If so, the pipeline will only use those required fields, reducing the amount of data passing through the pipeline."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:29
# 4888d4632962440db43b8b163f2a5bbc
msgid "Pipeline Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:34
# 35cdc2f02080444e9e4b4955159edcd0
msgid "``$sort`` + ``$match`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:36
# f62fa606a6334d25b7390c9b3a350711
msgid "When you have a sequence with :pipeline:`$sort` followed by a :pipeline:`$match`, the :pipeline:`$match` moves before the :pipeline:`$sort` to minimize the number of objects to sort. For example, if the pipeline consists of the following stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:46
#: ../source/core/aggregation-pipeline-optimization.txt:71
# 838f2e6c8231447a93ab29330609ea62
# 38f64c4d47504a599978586e8dc67da5
msgid "During the optimization phase, the optimizer transforms the sequence to the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:57
# 15e80e725f5642caa6a78ab45dd8fd9e
msgid "``$skip`` + ``$limit`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:59
# 7aeb6cd155fa437da2cc0c5903bef9a3
msgid "When you have a sequence with :pipeline:`$skip` followed by a :pipeline:`$limit`, the :pipeline:`$limit` moves before the :pipeline:`$skip`. With the reordering, the :pipeline:`$limit` value increases by the :pipeline:`$skip` amount."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:64
#: ../source/core/aggregation-pipeline-optimization.txt:101
# 93981abfd89d45c7a5dfbdc286295ef2
# be5ecfdc6cbf49439e55958192244b7f
msgid "For example, if the pipeline consists of the following stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:79
# 93c4750c3eae4b648b16034e82812797
msgid "This optimization allows for more opportunities for :ref:`agg-sort-limit-coalescence`, such as with ``$sort`` + ``$skip`` + ``$limit`` sequences. See :ref:`agg-sort-limit-coalescence` for details on the coalescence and :ref:`agg-sort-skip-limit-sequence` for an example."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:85
# 44e3c35cf0b1411f85ad0533cecb733e
msgid "For aggregation operations on :doc:`sharded collections <aggregation-pipeline-sharded-collections>`, this optimization reduces the results returned from each shard."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:90
# 27f238c59f7d44a4a7888d5319dec847
msgid "``$redact`` + ``$match`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:92
# bf45ecf4197941299da0e9a3a79c9c3c
msgid "When possible, when the pipeline has the :pipeline:`$redact` stage immediately followed by the :pipeline:`$match` stage, the aggregation can sometimes add a portion of the :pipeline:`$match` stage before the :pipeline:`$redact` stage. If the added :pipeline:`$match` stage is at the start of a pipeline, the aggregation can use an index as well as query the collection to limit the number of documents that enter the pipeline. See :ref:`aggregation-pipeline-operators-and-performance` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:108
# f9c319f6841e49388f9510d678faf6a4
msgid "The optimizer can add the same :pipeline:`$match` stage before the :pipeline:`$redact` stage:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:120
# 80ba51541d5f4a039e2438ef029acb23
msgid "Pipeline Coalescence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:122
# 741fc0ee716a44bd96faddc925f6f01e
msgid "When possible, the optimization phase coalesces a pipeline stage into its predecessor. Generally, coalescence occurs *after* any sequence reordering optimization."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:129
# 18e8d143035a41068d4b2e955a47a17e
msgid "``$sort`` + ``$limit`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:131
# 79831626eb0d406db87234a939cbad49
msgid "When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit`, the optimizer can coalesce the :pipeline:`$limit` into the :pipeline:`$sort`. This allows the sort operation to only maintain the top ``n`` results as it progresses, where ``n`` is the specified limit, and MongoDB only needs to store ``n`` items in memory [#coalescence-allowDiskUse]_. See :ref:`sort-and-memory` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:139
# 05cf8624157044a68541d5f5760626e9
msgid "The optimization will still apply when ``allowDiskUse`` is ``true`` and the ``n`` items exceed the :ref:`aggregation memory limit <agg-memory-restrictions>`."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:146
# 99df142dca18460eae2f20cbaf1e4080
msgid "``$limit`` + ``$limit`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:148
# 53ff576e07304800aae431795494aa08
msgid "When a :pipeline:`$limit` immediately follows another :pipeline:`$limit`, the two stages can coalesce into a single :pipeline:`$limit` where the limit amount is the *smaller* of the two initial limit amounts. For example, a pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:159
# 497fd7e7ae6c4fd796f6446f64e5af0e
msgid "Then the second :pipeline:`$limit` stage can coalesce into the first :pipeline:`$limit` stage and result in a single :pipeline:`$limit` stage where the limit amount ``10`` is the minimum of the two initial limits ``100`` and ``10``."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:171
# 7f71ba41960440b9b0f6d0e88d88e870
msgid "``$skip`` + ``$skip`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:173
# f9c36f9baf7f4ef58d332654b1b90155
msgid "When a :pipeline:`$skip` immediately follows another :pipeline:`$skip`, the two stages can coalesce into a single :pipeline:`$skip` where the skip amount is the *sum* of the two initial skip amounts. For example, a pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:183
# 697e98fccc924e1ba66982f2e1c21e34
msgid "Then the second :pipeline:`$skip` stage can coalesce into the first :pipeline:`$skip` stage and result in a single :pipeline:`$skip` stage where the skip amount ``7`` is the sum of the two initial limits ``5`` and ``2``."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:195
# f8512beaf7c54557a6558c349faef563
msgid "``$match`` + ``$match`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:197
# c4179f7350d44be8ab88a8c7ffed7077
msgid "When a :pipeline:`$match` immediately follows another :pipeline:`$match`, the two stages can coalesce into a single :pipeline:`$match` combining the conditions with an :expression:`$and`. For example, a pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:208
# 2fbaf0974c05424e9b108d415bd4c33c
msgid "Then the second :pipeline:`$match` stage can coalesce into the first :pipeline:`$match` stage and result in a single :pipeline:`$match` stage"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:217
# 625c71d0b9614c4d825bb190701947a2
msgid "Examples"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:219
# d9ffeac16f9640b783eeaac6d93d3c82
msgid "The following examples are some sequences that can take advantage of both sequence reordering and coalescence. Generally, coalescence occurs *after* any sequence reordering optimization."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:226
# a085c081b9d7448c907b56ea954195a2
msgid "``$sort`` + ``$skip`` + ``$limit`` Sequence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:228
# 715ee056c2fb4f1aa4f91e9977080b18
msgid "A pipeline contains a sequence of :pipeline:`$sort` followed by a :pipeline:`$skip` followed by a :pipeline:`$limit`:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:237
# 49a0400d21064a9582608ac949fe48a9
msgid "First, the optimizer performs the :ref:`agg-skip-limit-optimization` to transforms the sequence to the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:246
# 3086e5cdcada46a8bef6166fc2520ea6
msgid "The :ref:`agg-skip-limit-optimization` increases the :pipeline:`$limit` amount with the reordering. See :ref:`agg-skip-limit-optimization` for details."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:250
# f7f9a3ff32ae423c854f7e01a8484ad9
msgid "The reordered sequence now has :pipeline:`$sort` immediately preceding the :pipeline:`$limit`, and the pipeline can coalesce the two stages to decrease memory usage during the sort operation. See :ref:`agg-sort-limit-coalescence` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:256
# fde0c26d581245969ad4beb3a9539be2
msgid "``$limit`` + ``$skip`` + ``$limit`` + ``$skip`` Sequence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:258
# 94ea9fd836d147e1ae583d3e013a98b8
msgid "A pipeline contains a sequence of alternating :pipeline:`$limit` and :pipeline:`$skip` stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:268
# 12ab05f7df304697b75ea66314931e97
msgid "The :ref:`agg-skip-limit-optimization` reverses the position of the ``{ $skip: 5 }`` and ``{ $limit: 10 }`` stages and increases the limit amount:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:279
# 4f289608f3514b61b425de6fb34c2d4f
msgid "The optimizer then coalesces the two :pipeline:`$limit` stages into a single :pipeline:`$limit` stage and the two :pipeline:`$skip` stages into a single :pipeline:`$skip` stage. The resulting sequence is the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:289
# 9bacf90e90c548e09a2851fe5bf3fc5e
msgid "See :ref:`agg-limit-limit-coalescence` and :ref:`agg-skip-skip-coalescence` for details."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:293
# 936a91ab6e444972b8a2861d0b4b76f0
msgid ":method:`explain <db.collection.aggregate()>` option in the :method:`db.collection.aggregate()`"
msgstr ""

