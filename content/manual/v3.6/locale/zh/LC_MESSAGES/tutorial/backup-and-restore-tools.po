#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/backup-and-restore-tools.txt:3
msgid "Back Up and Restore with MongoDB Tools"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:13
msgid ""
"This tutorial describes the process for creating backups and restoring "
"data using the utilities provided with MongoDB. The "
":binary:`~bin.mongodump` and :binary:`~bin.mongorestore` utilities work "
"with :doc:`BSON </reference/bson-types>` data dumps, and are useful for "
"creating backups of small deployments. For resilient and non-disruptive "
"backups, use a file system or block-level disk snapshot function, such as"
" the methods described in the :doc:`/core/backups` document."
msgstr ""

#: ../source/includes/extracts/tools-performance-considerations-dump-restore.rst:1
msgid ""
"Because :binary:`~bin.mongodump` and :binary:`~bin.mongorestore` operate "
"by interacting with a running :binary:`~bin.mongod` instance, they can "
"impact the performance of your running database. Not only do the tools "
"create traffic for a running database instance, they also force the "
"database to read all data through memory. When MongoDB reads infrequently"
" used data, it can evict more frequently accessed data, causing a "
"deterioration in performance for the database's regular workload."
msgstr ""

#: ../source/includes/extracts/tools-performance-considerations-dump-restore.rst:9
msgid ""
"When backing up your data with MongoDB's tools, consider the following "
"guidelines:"
msgstr ""

#: ../source/includes/extracts/tools-performance-considerations-dump-restore.rst:12
msgid ""
"Label files so that you can identify the contents of the backup as well "
"as the point in time that the backup reflects."
msgstr ""

#: ../source/includes/extracts/tools-performance-considerations-dump-restore.rst:15
msgid ""
"Use an alternative backup strategy such as :doc:`Filesystem Snapshots "
"</tutorial/backup-with-filesystem-snapshots>` or :mms-docs:`MongoDB Cloud"
" Manager </tutorial/nav/backup-use>` if the performance impact of "
":binary:`~bin.mongodump` and :binary:`~bin.mongorestore` is unacceptable "
"for your use case."
msgstr ""

#: ../source/includes/extracts/tools-performance-considerations-dump-restore.rst:21
msgid ""
"Use :option:`--oplog <mongodump --oplog>` to capture incoming write "
"operations during the :binary:`~bin.mongodump` operation to ensure that "
"the backups reflect a consistent data state."
msgstr ""

#: ../source/includes/extracts/tools-performance-considerations-dump-restore.rst:26
msgid ""
"Ensure that your backups are usable by restoring them to a test MongoDB "
"deployment."
msgstr ""

#: ../source/includes/extracts/tools-performance-considerations-dump-restore.rst:29
msgid ""
":doc:`/core/backups` and :mms-docs:`MongoDB Cloud Manager Backup "
"documentation </tutorial/nav/backup-use/>` for more information on "
"backing up MongoDB instances. Additionally, consider the following "
"reference documentation for the MongoDB import/export tools:"
msgstr ""

#: ../source/includes/extracts/tools-performance-considerations-dump-restore.rst:34
msgid ":binary:`~bin.mongoexport`"
msgstr ""

#: ../source/includes/extracts/tools-performance-considerations-dump-restore.rst:35
msgid ":binary:`~bin.mongoimport`"
msgstr ""

#: ../source/includes/extracts/tools-performance-considerations-dump-restore.rst:36
msgid ":binary:`~bin.mongodump`"
msgstr ""

#: ../source/includes/extracts/tools-performance-considerations-dump-restore.rst:37
msgid ":binary:`~bin.mongorestore`"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:26
msgid "Binary BSON Dumps"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:28
msgid ""
"The :binary:`~bin.mongorestore` and :binary:`~bin.mongodump` utilities "
"work with :doc:`BSON </reference/bson-types>` data dumps, and are useful "
"for creating backups of small deployments. For resilient and non-"
"disruptive backups, use a file system or block-level disk snapshot "
"function, such as the methods described in the :doc:`/core/backups` "
"document."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:34
msgid ""
"Use these tools for backups if other backup methods, such as |mms-home| "
"or :doc:`file system snapshots </tutorial/backup-with-filesystem-"
"snapshots>` are unavailable."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:45
msgid "Procedures"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:48
msgid "Back Up a Database with ``mongodump``"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:51
msgid "Exclude ``local`` Database"
msgstr ""

#: ../source/includes/fact-mongodump-local-database.rst:1
msgid ""
":binary:`~bin.mongodump` excludes the content of the ``local`` database "
"in its output."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:56
msgid "Required Access"
msgstr ""

#: ../source/includes/access-mongodump-collections.rst:1
msgid ""
"To run :binary:`~bin.mongodump` against a MongoDB deployment that has "
":doc:`access control </core/authorization>` enabled, you must have "
"privileges that grant :authaction:`find` action for each database to back"
" up. The built-in :authrole:`backup` role provides the required "
"privileges to perform backup of any and all databases."
msgstr ""

#: ../source/includes/fact-required-access-for-backup-profiling.rst:3
msgid ""
"The :authrole:`backup` role provides additional privileges to back up the"
" :data:`system.profile <<database>.system.profile>` collections that "
"exist when running with :ref:`database profiling <database-profiling>`. "
"Previously, users required an additional ``read`` access on this "
"collection."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:61
msgid "Basic ``mongodump`` Operations"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:63
msgid ""
"The :binary:`~bin.mongodump` utility backs up data by connecting to a "
"running :binary:`~bin.mongod` or :binary:`~bin.mongos` instance."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:66
msgid ""
"The utility can create a backup for an entire server, database or "
"collection, or can use a query to backup just part of a collection."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:69
msgid ""
"When you run :binary:`~bin.mongodump` without any arguments, the command "
"connects to the MongoDB instance on the local system (e.g. ``127.0.0.1`` "
"or ``localhost``) on port ``27017`` and creates a database backup named "
"``dump/`` in the current directory."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:74
msgid ""
"To backup data from a :binary:`~bin.mongod` or :binary:`~bin.mongos` "
"instance running on the same machine and on the default port of "
"``27017``, use the following command:"
msgstr ""

#: ../source/includes/warning-mongodump-compatibility-2.2.rst:1
msgid ""
"The data format used by :binary:`~bin.mongodump` from version 2.2 or "
"later is *incompatible* with earlier versions of :binary:`~bin.mongod`. "
"Do not use recent versions of :binary:`~bin.mongodump` to back up older "
"data stores."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:84
msgid ""
"You can also specify the :option:`--host <mongodump --host>` and "
":option:`--port <mongodump --port>` of the MongoDB instance that the "
":binary:`~bin.mongodump` should connect to. For example:"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:92
msgid ""
":binary:`~bin.mongodump` will write :term:`BSON` files that hold a copy "
"of data accessible via the :binary:`~bin.mongod` listening on port "
"``27017`` of the ``mongodb.example.net`` host. See :ref:`backup-from-non-"
"local` for more information."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:97
msgid ""
"To specify a different output directory, you can use the :option:`--out "
"or -o <mongodump --out>` option:"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:104
msgid ""
"To limit the amount of data included in the database dump, you can "
"specify :option:`--db <mongodump --db>` and :option:`--collection "
"<mongodump --collection>` as options to :binary:`~bin.mongodump`. For "
"example:"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:113
msgid ""
"This operation creates a dump of the collection named ``myCollection`` "
"from the database ``test`` in a :file:`dump/` subdirectory of the current"
" working directory."
msgstr ""

#: ../source/includes/fact-mongodump-overwrite-files.rst:1
msgid ""
":binary:`~bin.mongodump` overwrites output files if they exist in the "
"backup data folder. Before running the :binary:`~bin.mongodump` command "
"multiple times, either ensure that you no longer need the files in the "
"output folder (the default is the ``dump/`` folder) or rename the folders"
" or files."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:120
msgid "Point in Time Operation Using Oplogs"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:122
msgid ""
"Use the :option:`--oplog <mongodump --oplog>` option with "
":binary:`~bin.mongodump` to collect the :term:`oplog` entries to build a "
"point-in-time snapshot of a database within a replica set. With "
":option:`--oplog <mongodump --oplog>`, :binary:`~bin.mongodump` copies "
"all the data from the source database as well as all of the :term:`oplog`"
" entries from the beginning to the end of the backup procedure. This "
"operation, in conjunction with :option:`mongorestore --oplogReplay "
"<mongorestore --oplogReplay>`, allows you to restore a backup that "
"reflects the specific moment in time that corresponds to when "
":binary:`~bin.mongodump` completed creating the dump file."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:136
msgid "Create Backups from Non-Local ``mongod`` Instances"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:138
msgid ""
"The :option:`--host <mongodump --host>` and :option:`--port <mongodump "
"--port>` options for :binary:`~bin.mongodump` allow you to connect to and"
" backup from a remote host. Consider the following example:"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:147
msgid ""
"On any :binary:`~bin.mongodump` command you may, as above, specify "
"username and password credentials to specify database authentication."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:153
msgid "Restore a Database with ``mongorestore``"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:156
msgid "Access Control"
msgstr ""

#: ../source/includes/access-mongorestore-collections.rst:1
msgid ""
"To restore data to a MongoDB deployment that has :doc:`access control "
"</core/authorization>` enabled, the :authrole:`restore` role provides "
"access to restore any database if the backup data does not include "
":data:`system.profile <<database>.system.profile>` collection data."
msgstr ""

#: ../source/includes/fact-restore-role-system.profile.rst:1
msgid ""
"If the backup data includes :data:`system.profile "
"<<database>.system.profile>` collection data and the target database does"
" not contain the :data:`system.profile <<database>.system.profile>` "
"collection, :binary:`~bin.mongorestore` attempts to create the collection"
" even though the program does not actually restore ``system.profile`` "
"documents. As such, the user requires additional privileges to perform "
":authaction:`createCollection` and :authaction:`convertToCapped` actions "
"on the :data:`system.profile <<database>.system.profile>` collection for "
"a database."
msgstr ""

#: ../source/includes/access-mongorestore-collections.rst:8
msgid ""
"As of MongoDB 3.2.11, you can run :binary:`~bin.mongorestore` with "
":option:`--oplogReplay <mongorestore --oplogReplay>` if you have the "
":authrole:`restore` role. To replay the oplog on versions of MongoDB "
"3.2.10 and earlier, you must create a :ref:`user-defined role <create-"
"user-defined-role>` that has :authaction:`anyAction` on :ref:`resource-"
"anyresource` and grant only to users who must run "
":binary:`~bin.mongorestore` with :option:`--oplogReplay <mongorestore "
"--oplogReplay>`."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:161
msgid "Basic ``mongorestore`` Operations"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:163
msgid ""
"The :binary:`~bin.mongorestore` utility restores a binary backup created "
"by :binary:`~bin.mongodump`. By default, :binary:`~bin.mongorestore` "
"looks for a database backup in the :file:`dump/` directory."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:167
msgid ""
"The :binary:`~bin.mongorestore` utility restores data by connecting to a "
"running :binary:`~bin.mongod` or :binary:`~bin.mongos` directly."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:170
msgid ""
":binary:`~bin.mongorestore` can restore either an entire database backup "
"or a subset of the backup."
msgstr ""

#: ../source/includes/fact-uuid-restore-from-backup.rst:3
msgid "*New in version 3.6:*"
msgstr ""

#: ../source/includes/fact-uuid-restore-from-backup.rst:5
msgid ""
"All MongoDB collections have :abbr:`UUIDs (Universally unique "
"identifiers)` by default. When MongoDB restores collections, the restored"
" collections retain their original UUIDs. When restoring a collection "
"where no UUID was present, MongoDB generates a UUID for the restored "
"collection."
msgstr ""

#: ../source/includes/fact-uuid-restore-from-backup.rst:11
msgid ""
"For more information on collection UUIDs, see `Collections "
"<https://docs.mongodb.com/v3.6/core/databases-and-"
"collections/#collections>`_."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:175
msgid ""
"To use :binary:`~bin.mongorestore` to connect to an active "
":binary:`~bin.mongod` or :binary:`~bin.mongos`, use a command with the "
"following prototype form:"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:183
#: ../source/tutorial/backup-and-restore-tools.txt:223
msgid "Consider the following example:"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:189
msgid ""
"Here, :binary:`~bin.mongorestore` imports the database backup in the "
":file:`dump-2013-10-25` directory to the :binary:`~bin.mongod` instance "
"running on the localhost interface on the default port ``27017``."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:196
msgid "Restore Point in Time Oplog Backup"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:198
msgid ""
"If you created your database dump using the :option:`--oplog <mongodump "
"--oplog>` option to ensure a point-in-time snapshot, call "
":binary:`~bin.mongorestore` with the :option:`--oplogReplay <mongorestore"
" --oplogReplay>` option, as in the following example:"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:208
msgid ""
"You may also consider using the :option:`mongorestore --objcheck` option "
"to check the integrity of objects while inserting them into the database,"
" or you may consider the :option:`mongorestore --drop` option to drop "
"each collection from the database before restoring from backups."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:215
msgid "Restore Backups to Non-Local ``mongod`` Instances"
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:217
msgid ""
"By default, :binary:`~bin.mongorestore` connects to a MongoDB instance "
"running on the localhost interface (e.g. ``127.0.0.1``) and on the "
"default port (``27017``). If you want to restore to a different host or "
"port, use the :option:`--host <mongorestore --host>` and :option:`--port "
"<mongorestore --port>` options."
msgstr ""

#: ../source/tutorial/backup-and-restore-tools.txt:229
msgid ""
"As above, you may specify username and password connections if your "
":binary:`~bin.mongod` requires authentication."
msgstr ""

#: ../source/includes/extracts/additional-resources-mongodump.rst:6
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-mongodump.rst:8
msgid ""
"`Backup and its Role in Disaster Recovery White Paper "
"<https://www.mongodb.com/lp/white-paper/backup-disaster-"
"recovery?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-mongodump.rst:9
msgid ":mms-home:`Cloud Backup through MongoDB Cloud Manager </?jmp=docs>`"
msgstr ""

#: ../source/includes/extracts/additional-resources-mongodump.rst:10
msgid ""
"`Blog Post: Backup vs. Replication, Why you Need Both "
"<http://www.mongodb.com/blog/post/backup-vs-replication-why-do-you-need-"
"both?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-mongodump.rst:11
msgid ""
":products:`Backup Service with Ops Manager, an on-premise solution "
"available in MongoDB Enterprise Advanced </mongodb-enterprise-"
"advanced?jmp=docs>`"
msgstr ""

#: ../source/includes/extracts/additional-resources-mongodump.rst:12
msgid ""
"`MongoDB Atlas: For a simple way to run, monitor, and maintain cloud-"
"hosted MongoDB deployments "
"<https://www.mongodb.com/cloud/atlas?jmp=docs>`_"
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid ""
#~ "This document describes the process for"
#~ " creating backups and restoring data "
#~ "using the utilities provided with "
#~ "MongoDB."
#~ msgstr ""

#~ msgid ""
#~ "Because all of these tools primarily "
#~ "operate by interacting with a running"
#~ " :program:`mongod` instance, they can "
#~ "impact the performance of your running"
#~ " database."
#~ msgstr ""

#~ msgid ""
#~ "Not only do they create traffic "
#~ "for a running database instance, they"
#~ " also force the database to read "
#~ "all data through memory. When MongoDB"
#~ " reads infrequently used data, it can"
#~ " supplant more frequently accessed data,"
#~ " causing a deterioration in performance "
#~ "for the database's regular workload."
#~ msgstr ""

#~ msgid ""
#~ "No matter how you decide to import"
#~ " or export your data, consider the"
#~ " following guidelines:"
#~ msgstr ""

#~ msgid ""
#~ "Label files so that you can "
#~ "identify the contents of the export "
#~ "or backup as well as the point "
#~ "in time the export/backup reflect."
#~ msgstr ""

#~ msgid ""
#~ "Do not create or apply exports if"
#~ " the backup process itself will have"
#~ " an adverse effect on a production"
#~ " system."
#~ msgstr ""

#~ msgid ""
#~ "Make sure that the backups reflect "
#~ "a consistent data state. Export or "
#~ "backup processes can impact data "
#~ "integrity (i.e. type fidelity) and "
#~ "consistency if updates continue during "
#~ "the backup process."
#~ msgstr ""

#~ msgid ""
#~ "Test backups and exports by restoring"
#~ " and importing to ensure that the "
#~ "backups are useful."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`/core/backups` or :mms-docs:`MongoDB "
#~ "Cloud Manager Backup documentation "
#~ "</tutorial/nav/backup-use/>` for more "
#~ "information on backing up MongoDB "
#~ "instances. Additionally, consider the "
#~ "following references for the MongoDB "
#~ "import/export tools:"
#~ msgstr ""

#~ msgid ""
#~ "Use these tools for backups if "
#~ "other backup methods, such as the "
#~ "|mms-home| or :doc:`file system snapshots"
#~ " </tutorial/backup-with-filesystem-snapshots>`"
#~ " are unavailable."
#~ msgstr ""

#~ msgid "Backup a Database with ``mongodump``"
#~ msgstr ""

#~ msgid ""
#~ "Here, :program:`mongorestore` imports the "
#~ "database backup in the :file:`dump-2013-10-25`"
#~ " directory to the :program:`mongod` "
#~ "instance running on the localhost "
#~ "interface."
#~ msgstr ""

#~ msgid "Human Intelligible Import/Export Formats"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB's :program:`mongoimport` and "
#~ ":program:`mongoexport` tools allow you to "
#~ "work with your data in a human-"
#~ "readable :doc:`Extended JSON </reference/mongodb-"
#~ "extended-json>` or :term:`CSV` format. "
#~ "This is useful for simple ingestion "
#~ "to or from a third-party system,"
#~ " and when you want to backup or"
#~ " export a small subset of your "
#~ "data. For more complex data migration"
#~ " tasks, you may want to write "
#~ "your own import and export scripts "
#~ "using a client :term:`driver` to "
#~ "interact with the database."
#~ msgstr ""

#~ msgid ""
#~ "The examples in this section use "
#~ "the MongoDB tools :program:`mongoimport` and"
#~ " :program:`mongoexport`. These tools may "
#~ "also be useful for importing data "
#~ "into a MongoDB database from third "
#~ "party applications."
#~ msgstr ""

#~ msgid ""
#~ "If you want to simply copy a "
#~ "database or collection from one instance"
#~ " to another, consider using the "
#~ ":dbcommand:`copydb`, :dbcommand:`clone`, or "
#~ ":dbcommand:`cloneCollection` commands, which may "
#~ "be more suited to this task. The"
#~ " :program:`mongo` shell provides the "
#~ ":method:`db.copyDatabase()` method."
#~ msgstr ""

#~ msgid ""
#~ "Avoid using :program:`mongoimport` and "
#~ ":program:`mongoexport` for full instance "
#~ "production backups. They do not reliably"
#~ " preserve all rich :term:`BSON` data "
#~ "types, because :term:`JSON` can only "
#~ "represent a subset of the types "
#~ "supported by BSON. Use :program:`mongodump`"
#~ " and :program:`mongorestore` as described "
#~ "in :doc:`/core/backups` for this kind of"
#~ " functionality."
#~ msgstr ""

#~ msgid "Collection Export with :program:`mongoexport`"
#~ msgstr ""

#~ msgid "Export in CSV Format"
#~ msgstr ""

#~ msgid ""
#~ ":program:`mongoexport` removed the ``--csv`` "
#~ "option. Use the :option:`--type=csv <--type>`"
#~ " option to specify CSV format for "
#~ "the output."
#~ msgstr ""

#~ msgid ""
#~ "In the following example, "
#~ ":program:`mongoexport` exports data from the"
#~ " collection ``contacts`` collection in the"
#~ " ``users`` database in :term:`CSV` format"
#~ " to the file ``/opt/backups/contacts.csv``."
#~ msgstr ""

#~ msgid ""
#~ "The :program:`mongod` instance that "
#~ ":program:`mongoexport` connects to is running"
#~ " on the localhost port number "
#~ "``27017``."
#~ msgstr ""

#~ msgid ""
#~ "When you export in CSV format, you"
#~ " must specify the fields in the "
#~ "documents to export. The operation "
#~ "specifies the ``name`` and ``address`` "
#~ "fields to export."
#~ msgstr ""

#~ msgid ""
#~ "For CSV exports only, you can also"
#~ " specify the fields in a file "
#~ "containing the line-separated list of"
#~ " fields to export. The file must "
#~ "have only one field per line."
#~ msgstr ""

#~ msgid ""
#~ "For example, you can specify the "
#~ "``name`` and ``address`` fields in a "
#~ "file ``fields.txt``:"
#~ msgstr ""

#~ msgid ""
#~ "Then, using the :option:`--fieldFile` option,"
#~ " specify the fields to export with"
#~ " the file:"
#~ msgstr ""

#~ msgid ""
#~ ":program:`mongoexport` removed the ``--csv`` "
#~ "option and replaced with the "
#~ ":option:`--type` option."
#~ msgstr ""

#~ msgid "Export in JSON Format"
#~ msgstr ""

#~ msgid ""
#~ "This example creates an export of "
#~ "the ``contacts`` collection from the "
#~ "MongoDB instance running on the "
#~ "localhost port number ``27017``. This "
#~ "writes the export to the "
#~ "``contacts.json`` file in :term:`JSON` format."
#~ msgstr ""

#~ msgid "Export from Remote Host Running with Authentication"
#~ msgstr ""

#~ msgid ""
#~ "The following example exports the "
#~ "``contacts`` collection from the ``marketing``"
#~ " database, which requires authentication."
#~ msgstr ""

#~ msgid ""
#~ "This data resides on the MongoDB "
#~ "instance located on the host "
#~ "``mongodb1.example.net`` running on port "
#~ "``37017``, which requires the username "
#~ "``user`` and the password ``pass``."
#~ msgstr ""

#~ msgid "Export Query Results"
#~ msgstr ""

#~ msgid ""
#~ "You can export only the results of"
#~ " a query by supplying a query "
#~ "filter with the :option:`--query <mongoexport"
#~ " --query>` option, and limit the "
#~ "results to a single database using "
#~ "the \":option:`--db <mongoexport --db>`\" "
#~ "option."
#~ msgstr ""

#~ msgid ""
#~ "For instance, this command returns all"
#~ " documents in the ``sales`` database's "
#~ "``contacts`` collection that contain a "
#~ "field named ``field`` with a value "
#~ "of ``1``."
#~ msgstr ""

#~ msgid ""
#~ "You must enclose the query in "
#~ "single quotes (e.g. ``'``) to ensure "
#~ "that it does not interact with "
#~ "your shell environment."
#~ msgstr ""

#~ msgid "Collection Import with :program:`mongoimport`"
#~ msgstr ""

#~ msgid "Simple Usage"
#~ msgstr ""

#~ msgid ""
#~ ":program:`mongoimport` restores a database "
#~ "from a backup taken with "
#~ ":program:`mongoexport`. Most of the arguments"
#~ " to :program:`mongoexport` also exist for"
#~ " :program:`mongoimport`."
#~ msgstr ""

#~ msgid ""
#~ "In the following example, "
#~ ":program:`mongoimport` imports the data in "
#~ "the :term:`JSON` data from the "
#~ "``contacts.json`` file into the collection "
#~ "``contacts`` in the ``users`` database."
#~ msgstr ""

#~ msgid "Import ``JSON`` to Remote Host Running with Authentication"
#~ msgstr ""

#~ msgid ""
#~ "In the following example, "
#~ ":program:`mongoimport` imports data from the"
#~ " file ``/opt/backups/mdb1-examplenet.json`` into "
#~ "the ``contacts`` collection within the "
#~ "database ``marketing`` on a remote "
#~ "MongoDB database with authentication enabled."
#~ msgstr ""

#~ msgid ""
#~ ":program:`mongoimport` connects to the "
#~ ":program:`mongod` instance running on the "
#~ "host ``mongodb1.example.net`` over port "
#~ "``37017``. It authenticates with the "
#~ "username ``user`` and the password "
#~ "``pass``."
#~ msgstr ""

#~ msgid "``CSV`` Import"
#~ msgstr ""

#~ msgid ""
#~ "In the following example, "
#~ ":program:`mongoimport` imports the :term:`csv` "
#~ "formatted data in the "
#~ "``/opt/backups/contacts.csv`` file into the "
#~ "collection ``contacts`` in the ``users`` "
#~ "database on the MongoDB instance running"
#~ " on the localhost port numbered "
#~ "``27017``."
#~ msgstr ""

#~ msgid ""
#~ "Specifying :option:`--headerline <mongoimport "
#~ "--headerline>` instructs :program:`mongoimport` to"
#~ " determine the name of the fields "
#~ "using the first line in the CSV"
#~ " file."
#~ msgstr ""

#~ msgid ""
#~ ":program:`mongoimport` uses the input file "
#~ "name, without the extension, as the "
#~ "collection name if ``-c`` or "
#~ "``--collection`` is unspecified. The following"
#~ " example is therefore equivalent:"
#~ msgstr ""

#~ msgid ""
#~ "Use the \":option:`--ignoreBlanks <mongoimport "
#~ "--ignoreBlanks>`\" option to ignore blank "
#~ "fields. For :term:`CSV` and :term:`TSV` "
#~ "imports, this option provides the "
#~ "desired functionality in most cases "
#~ "because it avoids inserting fields with"
#~ " null values into your collection."
#~ msgstr ""

#~ msgid ""
#~ "If running :program:`mongorestore` with "
#~ ":option:`--oplogReplay`, additional privilege :ref"
#~ ":`user-defined role <create-user-"
#~ "defined-role>` that has :authaction:`anyAction`"
#~ " on :ref:`resource-anyresource` and grant"
#~ " only to users who must run "
#~ ":program:`mongorestore` with :option:`--oplogReplay`."
#~ msgstr ""

# 509e25e3a09f4ed8a171907efb8dc7d6
#~ msgid "On this page"
#~ msgstr ""

# cfb61ff0af42429da98933c30537201f
#~ msgid ""
#~ "This tutorial describes the process for"
#~ " creating backups and restoring data "
#~ "using the utilities provided with "
#~ "MongoDB. The :program:`mongodump` and "
#~ ":program:`mongorestore` utilities work with "
#~ ":doc:`BSON </reference/bson-types>` data "
#~ "dumps, and are useful for creating "
#~ "backups of small deployments. For "
#~ "resilient and non-disruptive backups, "
#~ "use a file system or block-level"
#~ " disk snapshot function, such as the"
#~ " methods described in the "
#~ ":doc:`/core/backups` document."
#~ msgstr ""

# 93f46875a46e4c5c82d75bba23c2bdd1
#~ msgid ""
#~ "Because :program:`mongodump` and "
#~ ":program:`mongorestore` operate by interacting "
#~ "with a running :program:`mongod` instance, "
#~ "they can impact the performance of "
#~ "your running database. Not only do "
#~ "the tools create traffic for a "
#~ "running database instance, they also "
#~ "force the database to read all "
#~ "data through memory. When MongoDB reads"
#~ " infrequently used data, it can evict"
#~ " more frequently accessed data, causing "
#~ "a deterioration in performance for the"
#~ " database's regular workload."
#~ msgstr ""

# ecda889bbd5f4d5b95317d54a5a622dd
#~ msgid ""
#~ "Use an alternative backup strategy such"
#~ " as :doc:`Filesystem Snapshots </tutorial"
#~ "/backup-with-filesystem-snapshots>` or "
#~ ":mms-docs:`MongoDB Cloud Manager </tutorial/nav"
#~ "/backup-use>` if the performance impact "
#~ "of :program:`mongodump` and :program:`mongorestore`"
#~ " is unacceptable for your use case."
#~ msgstr ""

# 5bc0ca6d822b46989d61e780d4c594da
#~ msgid ""
#~ "Use :option:`--oplog` to capture incoming "
#~ "write operations during the "
#~ ":program:`mongodump` operation to ensure that"
#~ " the backups reflect a consistent "
#~ "data state."
#~ msgstr ""

# ff6cc70fdee94bc6973efcaa4e78c2fd
#~ msgid ":program:`mongoexport`"
#~ msgstr ""

# 19a1b328d3a74c489d53d41a37ba6f4b
#~ msgid ":program:`mongoimport`"
#~ msgstr ""

# bc436f515c4345a7932374fd51bf5a8b
#~ msgid ":program:`mongodump`"
#~ msgstr ""

# aae94db810e74ecaa9c4bdb6c78174d8
#~ msgid ":program:`mongorestore`"
#~ msgstr ""

# f0da185e000c483a98e67018fff6111d
#~ msgid ""
#~ "The :program:`mongorestore` and :program:`mongodump`"
#~ " utilities work with :doc:`BSON </reference"
#~ "/bson-types>` data dumps, and are "
#~ "useful for creating backups of small "
#~ "deployments. For resilient and non-"
#~ "disruptive backups, use a file system"
#~ " or block-level disk snapshot "
#~ "function, such as the methods described"
#~ " in the :doc:`/core/backups` document."
#~ msgstr ""

# f186191cffde41d99798d388401d899b
#~ msgid ""
#~ ":program:`mongodump` excludes the content of"
#~ " the ``local`` database in its "
#~ "output."
#~ msgstr ""

# 9f2e74bda4454b5d9fb30f2af134e6ca
#~ msgid ""
#~ "To run :program:`mongodump` against a "
#~ "MongoDB deployment that has :doc:`access "
#~ "control </core/authorization>` enabled, you "
#~ "must have privileges that grant "
#~ ":authaction:`find` action for each database"
#~ " to back up. The built-in "
#~ ":authrole:`backup` role provides the required"
#~ " privileges to perform backup of any"
#~ " and all databases."
#~ msgstr ""

# a59d4ccab6a24b5d851386d031a4bd8d
#~ msgid ""
#~ "The :program:`mongodump` utility backs up "
#~ "data by connecting to a running "
#~ ":program:`mongod` or :program:`mongos` instance."
#~ msgstr ""

# 71a1db793d824ce98ef9383bd591e3dd
#~ msgid ""
#~ "When you run :program:`mongodump` without "
#~ "any arguments, the command connects to"
#~ " the MongoDB instance on the local"
#~ " system (e.g. ``127.0.0.1`` or "
#~ "``localhost``) on port ``27017`` and "
#~ "creates a database backup named "
#~ "``dump/`` in the current directory."
#~ msgstr ""

# 2142aae59fb04918a8d890dd86c0833b
#~ msgid ""
#~ "To backup data from a :program:`mongod`"
#~ " or :program:`mongos` instance running on"
#~ " the same machine and on the "
#~ "default port of ``27017``, use the "
#~ "following command:"
#~ msgstr ""

# b98de8564c014798b09a7fa75e56292d
#~ msgid ""
#~ "The data format used by "
#~ ":program:`mongodump` from version 2.2 or "
#~ "later is *incompatible* with earlier "
#~ "versions of :program:`mongod`. Do not "
#~ "use recent versions of :program:`mongodump`"
#~ " to back up older data stores."
#~ msgstr ""

# 976cf2ecbfd446558a323462d3d7787b
#~ msgid ""
#~ "You can also specify the :option:`--host"
#~ " <mongodump --host>` and :option:`--port "
#~ "<mongodump --port>` of the MongoDB "
#~ "instance that the :program:`mongodump` should"
#~ " connect to. For example:"
#~ msgstr ""

# 9586d933fe0e434aad3ec830300f74e8
#~ msgid ""
#~ ":program:`mongodump` will write :term:`BSON` "
#~ "files that hold a copy of data "
#~ "accessible via the :program:`mongod` listening"
#~ " on port ``27017`` of the "
#~ "``mongodb.example.net`` host. See :ref:`backup-"
#~ "from-non-local` for more information."
#~ msgstr ""

# 321684b4dbee45e08c5dc5135d334d34
#~ msgid ""
#~ "To limit the amount of data "
#~ "included in the database dump, you "
#~ "can specify :option:`--db <mongodump --db>`"
#~ " and :option:`--collection <mongodump "
#~ "--collection>` as options to "
#~ ":program:`mongodump`. For example:"
#~ msgstr ""

# 314bd38264604222b407b17a5c770300
#~ msgid ""
#~ ":program:`mongodump` overwrites output files "
#~ "if they exist in the backup data"
#~ " folder. Before running the "
#~ ":program:`mongodump` command multiple times, "
#~ "either ensure that you no longer "
#~ "need the files in the output "
#~ "folder (the default is the ``dump/`` "
#~ "folder) or rename the folders or "
#~ "files."
#~ msgstr ""

# b0f2dd74fb2b4246872479b828c0b97a
#~ msgid ""
#~ "Use the :option:`--oplog <mongodump --oplog>`"
#~ " option with :program:`mongodump` to "
#~ "collect the :term:`oplog` entries to "
#~ "build a point-in-time snapshot of"
#~ " a database within a replica set. "
#~ "With :option:`--oplog <mongodump --oplog>`, "
#~ ":program:`mongodump` copies all the data "
#~ "from the source database as well "
#~ "as all of the :term:`oplog` entries "
#~ "from the beginning to the end of"
#~ " the backup procedure. This operation, "
#~ "in conjunction with :option:`mongorestore "
#~ "--oplogReplay <mongorestore --oplogReplay>`, allows"
#~ " you to restore a backup that "
#~ "reflects the specific moment in time "
#~ "that corresponds to when :program:`mongodump`"
#~ " completed creating the dump file."
#~ msgstr ""

# 01829feedc3041049fdc6d603633d0ec
#~ msgid ""
#~ "The :option:`--host <mongodump --host>` and"
#~ " :option:`--port <mongodump --port>` options "
#~ "for :program:`mongodump` allow you to "
#~ "connect to and backup from a "
#~ "remote host. Consider the following "
#~ "example:"
#~ msgstr ""

# 52e672b209274b128e49496df8776ae9
#~ msgid ""
#~ "On any :program:`mongodump` command you "
#~ "may, as above, specify username and "
#~ "password credentials to specify database "
#~ "authentication."
#~ msgstr ""

# 4e92412b4bf54925a34d3227cff01aee
#~ msgid ""
#~ "If the backup data includes "
#~ ":data:`system.profile <<database>.system.profile>` "
#~ "collection data and the target database"
#~ " does not contain the :data:`system.profile"
#~ " <<database>.system.profile>` collection, "
#~ ":program:`mongorestore` attempts to create the"
#~ " collection even though the program "
#~ "does not actually restore ``system.profile``"
#~ " documents. As such, the user "
#~ "requires additional privileges to perform "
#~ ":authaction:`createCollection` and "
#~ ":authaction:`convertToCapped` actions on the "
#~ ":data:`system.profile <<database>.system.profile>` "
#~ "collection for a database."
#~ msgstr ""

# 6110d2e294004c9498375090d3a41437
#~ msgid ""
#~ "If running :program:`mongorestore` with "
#~ ":option:`--oplogReplay`, the :authrole:`restore` "
#~ "role is insufficient to replay the "
#~ "oplog. To replay the oplog, create "
#~ "a :ref:`user-defined role <create-"
#~ "user-defined-role>` that has "
#~ ":authaction:`anyAction` on :ref:`resource-"
#~ "anyresource` and grant only to users "
#~ "who must run :program:`mongorestore` with "
#~ ":option:`--oplogReplay`."
#~ msgstr ""

# a169a65804584de48c9a697da381b915
#~ msgid ""
#~ "The :program:`mongorestore` utility restores a"
#~ " binary backup created by "
#~ ":program:`mongodump`. By default, "
#~ ":program:`mongorestore` looks for a database"
#~ " backup in the :file:`dump/` directory."
#~ msgstr ""

# 320a3e9050cb4258b919e732e481ad7a
#~ msgid ""
#~ "The :program:`mongorestore` utility restores "
#~ "data by connecting to a running "
#~ ":program:`mongod` or :program:`mongos` directly."
#~ msgstr ""

# c2d153e6e6714b0688d5dd6e3de678fc
#~ msgid ""
#~ ":program:`mongorestore` can restore either an"
#~ " entire database backup or a subset"
#~ " of the backup."
#~ msgstr ""

# 9fec4f065ceb405fb779a2963457ad0e
#~ msgid ""
#~ "To use :program:`mongorestore` to connect "
#~ "to an active :program:`mongod` or "
#~ ":program:`mongos`, use a command with "
#~ "the following prototype form:"
#~ msgstr ""

# 2d04dab1d6fe432caf19cfc6428172a9
#~ msgid ""
#~ "Here, :program:`mongorestore` imports the "
#~ "database backup in the :file:`dump-2013-10-25`"
#~ " directory to the :program:`mongod` "
#~ "instance running on the localhost "
#~ "interface on the default port ``27017``."
#~ msgstr ""

# 6e810ff0cd964307b2494b27cace37aa
#~ msgid ""
#~ "If you created your database dump "
#~ "using the :option:`--oplog <mongodump "
#~ "--oplog>` option to ensure a point-"
#~ "in-time snapshot, call :program:`mongorestore`"
#~ " with the :option:`--oplogReplay <mongorestore"
#~ " --oplogReplay>` option, as in the "
#~ "following example:"
#~ msgstr ""

# 35ad362f53bd4bf49dfb05cd2dbeb471
#~ msgid ""
#~ "By default, :program:`mongorestore` connects "
#~ "to a MongoDB instance running on "
#~ "the localhost interface (e.g. ``127.0.0.1``)"
#~ " and on the default port (``27017``)."
#~ " If you want to restore to a"
#~ " different host or port, use the "
#~ ":option:`--host <mongorestore --host>` and "
#~ ":option:`--port <mongorestore --port>` options."
#~ msgstr ""

# 8cbe4d3b5c234dfd87ae732fd960e810
#~ msgid ""
#~ "As above, you may specify username "
#~ "and password connections if your "
#~ ":program:`mongod` requires authentication."
#~ msgstr ""

