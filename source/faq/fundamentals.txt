=========================
FAQ: MongoDB Fundamentals
=========================

.. default-domain:: mongodb

This document answers basic questions about MongoDB.

If you don't find the answer you're looking for, check
the :doc:`complete list of FAQs </faq>` or post your question to the
`MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_.

.. contents:: Frequently Asked Questions:
   :backlinks: none
   :local:

What kind of database is MongoDB?
---------------------------------

MongoDB is :term:`document`-oriented DBMS. Think of MySQL but with
:term:`JSON`-like objects comprising the data model, rather than RDBMS
tables. Significantly, MongoDB supports neither joins nor transactions.
However, it features secondary indexes, an expressive query language,
atomic writes on a per-document level, and fully-consistent reads.

Operationally, MongoDB features master-slave replication with automated
failover and built-in horizontal scaling via automated range-based
partitioning.

.. note::

   MongoDB uses :term:`BSON`, a binary object format similar
   to, but more expressive than, :term:`JSON`.

Do MongoDB databases have tables?
---------------------------------

Instead of tables, a MongoDB database stores its data in
:term:`collections <collection>`, which are the rough equivalent of RDMS
tables. A collection holds one or more :term:`documents
<document>`, which corresponds to a record or a row in a relational
database table, and each document has
one or more fields, which corresponds to a column in a relational
database table.

Collections have important differences from RDMS tables. Documents in a
single collection may have a unique combination and set of fields.
Documents need not have identical fields. You can add a field to some
documents in a collection without adding that field to all documents in
the collection.

.. see:: :doc:`/reference/sql-comparison`

.. _faq-schema-free:

Do MongoDB databases have schemas?
----------------------------------

MongoDB uses dynamic schemas. You can create collections without
defining the structure, i.e. the fields or the types of their values,
of the documents in the collection. You can change the structure of
documents simply by adding new fields or deleting existing ones.
Documents in a collection need not have an identical set of fields.

In practice, it is common for a the documents in a collection to have
a largely homogeneous structure; however, this is not a
requirement. MongoDB's flexible schemas mean that schema migration and
augmentation are very easy in practice, and you will rarely, if ever,
need to write scripts that perform "alter table" type operations,
which simplifies and facilitates iterative software development with
MongoDB.

.. see:: :doc:`/reference/sql-comparison`

What languages can I use to work with the MongoDB?
--------------------------------------------------

MongoDB :term:`client drivers <driver>` exist for
all of the most popular programming languages, and many
of the less popular ones. See the `latest list of
drivers <http://www.mongodb.org/display/DOCS/Drivers>`_
for details.

.. seealso:: ":doc:`/applications/drivers`."

Does MongoDB support SQL?
-------------------------

No.

However, MongoDB does support a rich, ad-hoc query language
of its own.

.. seealso:: The query ":doc:`/reference/operators`" document and the
   :wiki:`Query Overview <Advanced+Queries>` and the :wiki:`Tour
   <MongoDB+-+A+Developer's+Tour>` pages from the wiki.

What are typical uses for MongoDB?
----------------------------------

MongoDB has a general-purpose design, making it appropriate for a large
number of use cases. Examples include content management
systems, mobile app, gaming, e-commerce, analytics,
archiving, and logging.

Do not use MongoDB for systems that require SQL,
joins, and multi-object transactions.

Does MongoDB support transactions?
----------------------------------

MongoDB does not provide ACID transactions.

However, MongoDB does provide some basic transactional capabilities. Atomic
operations are possible within the scope of a single document: that
is, we can debit ``a`` and credit ``b`` as a transaction if they
are fields within the same document. Because documents can be rich,
some documents contain thousands of fields, with support for testing
fields in sub-documents.

Additionally, you can make writes in MongoDB durable (the 'D' in
ACID). To get durable writes, you must enable journaling,
which is on by default in 64-bit builds. You must also issue
writes with a write concern of ``{j: true}`` to ensure that the
writes block until the journal has synced to disk.

Users have built successful e-commerce systems using MongoDB,
but application requiring multi-object commit with rollback
generally aren't feasible.

Does MongoDB require a lot of RAM?
----------------------------------

Not necessarily. It's certainly possible to run MongoDB
on a machine with a small amount of free RAM.

MongoDB automatically uses all free memory on the machine as its
cache. System resource monitors show that MongoDB uses a lot of
memory, but it's usage is dynamic. If another process suddenly needs
half the server's RAM, MongoDB will yield cached memory to the other process.

Technically, the operating system's virtual memory subsystem manages
MongoDB's memory. This means that MongoDB will use as much free memory
as it can, swapping to disk as needed. Deployments with enough memory
to fit the application's working data set in RAM will achieve the best
performance.

Do I need a swap space?
-----------------------

You should always have a swap space in case you run into extreme memory
constraints, memory leaks, or another program stealing a lot of memory.
Think of the swap space as something like a steam release valve which
allows excess pressure to release without blowing the system up.

But you *do not* need swap for routine use. Database files are
:ref:`memory-mapped <faq-storage-memory-mapped-files>` and should
constitute most of your MongoDB memory use. Therefore, it is unlikely
that :program:`mongod` will ever use any swap space. The memory mapped
files can simply be released from memory without going to swap or can be
written back to the database files without needing to be swapped out to
disk, as they are already backed by files.

.. _faq-fundamentals-working-set:

Must my working set size fit RAM?
---------------------------------

Your working set should stay in memory to achieve good performance.
Otherwise many random disk IO's will occur, and unless you are using
SSD, this can be quite slow.

One area to watch specifically in managing the size of your working set
is index access patterns. If you are inserting into indexes at random
locations (as would happen with id's that are randomly
generated by hashes), you will continually be updating the whole index.
If instead you are able to create your id's in approximately ascending
order (for example, day concatenated with a random id), all the updates
will occur at the right side of the b-tree and the working set size for
index pages will be much smaller.

It is fine if databases and thus virtual size are much larger than RAM.

.. todo Commenting out for now:

   .. _faq-fundamentals-working-set-size:

   How can I measure working set size?
   -----------------------------------

   Measuring working set size can be difficult; even if it is much
   smaller than total RAM. If the database is much larger than RAM in
   total, all memory will be indicated as in use for the cache. Thus you
   need a different way to estimate the working set size.

   One technique is to use the `eatmem.cpp
   <https://github.com/mongodb/mongo-snippets/blob/master/cpp/eatmem.cpp>`_.
   utility, which reserves a certain amount of system memory for itself.
   You can run the utility with a certain amount specified and see if
   the server continues to perform well. If not, the working set is
   larger than the total RAM minus the consumed RAM. The test will eject
   some data from the file system cache, which might take time to page
   back in after the utility is terminated.

   Running eatmem.cpp continuously with a small percentage of total RAM,
   such as 20%, is a good technique to get an early warning if memory is
   too low. If disk I/O activity increases significantly, terminate
   eatmem.cpp to mitigate the problem for the moment until further steps
   can be taken.

   In :term:`replica sets <replica set>`, if one server is underpowered
   the eatmem.cpp utility could help as an early warning mechanism for
   server capacity. Of course, the server must be receiving
   representative traffic to get an indication.

How do I calculate how much RAM I need for my application?
----------------------------------------------------------

.. todo Improve this FAQ

The amount of RAM you need depends on several factors, including but not
limited to:

- The relationship between :doc:`database storage </faq/storage>` and working set.

- The operating system's cache strategy for LRU (Least Recently Used)

- The impact of :doc:`journaling </administration/journaling>`

- The number or rate of page faults and other MMS gauges to detect when
  you need more RAM

MongoDB makes no choices regarding what data is loaded into memory from
disk. It simply :ref:`memory maps <faq-storage-memory-mapped-files>` all
its data files and relies on the operating system to cache data. The OS
typically evicts the least-recently-used data from RAM when it runs low
on memory. For example if indexes are accessed more frequently than
documents then indexes will more likely stay in RAM, but it depends on
your particular usage.

To calculate how much RAM you need, you must calculate your working set
size, i.e., the portion of your data that is frequently accessed. This
depends on your access patterns, what indexes you have, and the size of
your documents. To calculate working set size, see :ref:`faq-fundamentals-working-set`.

If page faults are infrequent, your
working set fits in RAM. If fault rates rise higher than that, you risk
performance degradation. This is less critical with SSD drives than
with spinning disks.

How do I read memory statistics in the UNIX ``top`` command
-----------------------------------------------------------

Because :program:`mongod` uses :ref:`memory-mapped files
<faq-storage-memory-mapped-files>`, the memory statistics in ``top``
require interpretation in a special way. On a large database, ``VSIZE``
(virtual bytes) tends to be the size of the entire database. If the
:program:`mongod` doesn't have other processes running, ``RSIZE``
(resident bytes) is the total memory of the machine, as this counts
file system cache contents.

The ``vmstat`` command is also useful for determining
memory use. On Macintosh computers, the command is ``vm_stat``.

How do I configure the cache size?
----------------------------------

MongoDB has no configurable cache. MongoDB uses all *free* memory on
the system automatically by way of memory-mapped files. Operating
systems use the same approach with their file system caches.

.. _faq-database-and-caching:

Does MongoDB require a separate caching layer for application-level caching?
----------------------------------------------------------------------------

No. In MongoDB, a document's representation in the database is similar
to its representation in application memory. This means the database
already stores the usable form of data, making the data usable in both
the persistent store and in the application cache. This eliminates the
need for a separate caching layer in the application.

This differs from relational databases, where caching data is more
expensive. Relational databases must transform data into object
representations that applications can read and must store the
transformed data in a separate cache: if these transformation from
data to application objects require joins, this process increases the
overhead related to using the database which increases the importance
of the caching layer.

Does MongoDB handle caching?
----------------------------

Yes. MongoDB keeps all of the most recently used data in RAM. If you
have created indexes for your queries and your working data set fits
in RAM, MongoDB serves all queries from memory.

MongoDB does not implement a query cache: MongoDB serves all queries
directly from the indexes and/or data files.

Are writes written to disk immediately, or lazily?
--------------------------------------------------

Writes are physically written to the :doc:`journal </administration/journaling>` within 100
milliseconds. At that point, the write is "durable" in the sense that
after a pull-plug-from-wall event, the data will still be recoverable after
a hard restart.

While the journal commit is nearly instant, MongoDB writes to the data
files lazily. MongoDB may wait to write data to the data files for as
much as one minute by default. This does not affect durability, as the journal
has enough information to ensure crash recovery. To change the interval
for writing to the data files, see :setting:`syncdelay`.

What language is MongoDB written in?
------------------------------------

MongoDB is implemented in C++. :term:`Drivers <driver>` and client libraries
are typically written in their respective languages, although some
drivers use C extensions for better performance.

.. _faq-32-bit-limitations:

What are the limitations of 32-bit versions of MongoDB?
-------------------------------------------------------

MongoDB uses :ref:`memory-mapped files <faq-storage-memory-mapped-files>`.  When running a 32-bit build of
MongoDB, the total storage size for the server, including data and
indexes, is 2 gigabytes. For this reason, do not deploy MongoDB to
production on 32-bit machines.

If you're running a 64-bit build of MongoDB, there's virtually no
limit to storage size. For production deployments, 64-bit builds and
operating systems are strongly recommended.

.. seealso:: "`Blog Post: 32-bit Limitations <http://blog.mongodb.org/post/137788967/32-bit-limitations>`_

.. note::

   32-bit builds disable :term:`journaling <journal>` by default
   because journaling further limits the maximum amount of data that
   the database can store.
