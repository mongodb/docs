.. index:: write concern
.. _write-concern:
.. _write-operations-write-concern:

=============
Write Concern
=============

.. default-domain:: mongodb

.. include:: /includes/introduction-write-concern.rst

.. seealso:: :doc:`/reference/write-concern` for a reference of
   specific write concern configuration. Also consider
   :doc:`/core/write-operations` for a general overview of write
   operations with MongoDB and :doc:`/core/replica-set-write-concern`
   for considerations specific to replica sets.

.. note:: The :doc:`driver write concern
   </release-notes/drivers-write-concern>` change created a new connection
   class in all of the MongoDB drivers. The new class, called
   ``MongoClient`` change the default write concern. See the :doc:`release
   notes </release-notes/drivers-write-concern>` for this change and the
   release notes for your driver.

Write Concern Levels
--------------------

Clients issue write operations with some level of :term:`write
concern`.  MongoDB has the following levels of conceptual write
concern, listed from weakest to strongest:

.. _write-concern-errors-ignored:

Errors Ignored
~~~~~~~~~~~~~~

With an *errors ignored* write concern, MongoDB does not acknowledge
write operations. With this level of write concern, the client cannot
detect failed write operations. These errors include connection errors
and :program:`mongod` exceptions such as duplicate key exceptions for
:ref:`unique indexes <index-type-unique>`. Although the *errors
ignored* write concern provides fast performance, this performance gain
comes at the cost of significant risks for data persistence and
durability.

To set *errors ignored* write concern, specify ``w`` values of ``-1``
to your driver.

.. warning:: Do not use *errors ignored* write concern in normal
   operation.

.. _write-concern-unacknowledged:

Unacknowledged
~~~~~~~~~~~~~~

With an *unacknowledged* write concern, MongoDB does not acknowledge
the receipt of write operation. *Unacknowledged* is similar to *errors
ignored*; however, drivers attempt receive and handle network errors
when possible. The driver's ability to detect network errors depends on
the system's networking configuration.

To set *unacknowledged* write concern, specify ``w`` values of ``0``
to your driver.

Before the releases outlined in :ref:`driver-write-concern-change`,
this was the default write concern.

.. include:: /images/crud-write-concern-unack.rst

.. _write-concern-acknowledged:

Acknowledged
~~~~~~~~~~~~

With a receipt *acknowledged* write concern, the :program:`mongod`
confirms the receipt of the write operation. *Acknowledged* write
concern allows clients to catch network, duplicate key, and other
errors.

To set *acknowledged* write concern, specify ``w`` values of ``1``
to your driver.

MongoDB uses *acknowledged* write concern by default, after the
releases outlined in :ref:`driver-write-concern-change`.

.. include:: /images/crud-write-concern-ack.rst

Internally, the default write concern calls :dbcommand:`getLastError`
with no arguments. For replica sets, you can define the default write
concern settings in the
:data:`~local.system.replset.settings.getLastErrorDefaults`. When
:data:`~local.system.replset.settings.getLastErrorDefaults` does not
define a default write concern setting, :dbcommand:`getLastError`
defaults to basic receipt acknowledgment.

.. _write-concern-replica-journaled:

Journaled
~~~~~~~~~

With a *journaled* write concern, the :program:`mongod` confirms the
write operation only after committing the data to the :term:`journal`.
A *Journaled* write concern ensures that MongoDB can recover the data
following a shutdown or power interruption.

To set *journaled* write concern, specify ``w`` values of ``1`` and
set the ``journal`` or ``j`` option to ``true`` for your driver.

.. include:: /images/crud-write-concern-journal.rst

Require *journaled* as part of the write concern to provide
this durability guarantee. To use *journaled* write concern, the
:program:`mongod` must have journaling enabled.

.. include:: /includes/note-write-concern-journaled-replication.rst

.. _write-concern-replica-acknowledged:
.. _replica-set-write-concern:

Replica Acknowledged
~~~~~~~~~~~~~~~~~~~~

:term:`Replica sets <replica set>` add several considerations for
write concern. Basic write concerns affect write operations on only
one :program:`mongod` instance. The ``w`` argument to
:dbcommand:`getLastError` provides *replica acknowledged* write
concerns. With *replica acknowledged* you can guarantee that the write
operation propagates to the members of a replica set. See
:doc:`/reference/write-concern` document for the values for ``w`` and
:doc:`Write Concern for Replica Sets <replica-set-write-concern>` for
more information.

To set *replica acknowledged* write concern, specify ``w`` values
greater than ``1`` to your driver.

.. include:: /images/crud-write-concern-w2.rst

.. include:: /includes/note-write-concern-journaled-replication.rst
