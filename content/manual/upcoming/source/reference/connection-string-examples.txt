.. facet::
   :name: programming_language
   :values: csharp, go, java, javascript/typescript, perl, php, python, ruby, rust, scala, shell
   
.. _connections-connection-examples:

==========================
Connection String Examples
==========================

.. default-domain:: mongodb

.. meta:: 
   :keywords: atlas, drivers, code example, node.js, compass, atlas cli, atlas ui

.. meta:: 
   :description: Examples of connection strings to establish connections between MongoDB instances, tools, and applications that use drivers. 

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu in the
upper-right to set the language of the following examples.

----------

.. tabs-selector:: drivers

You can use connection strings to define connections between
MongoDB instances and the following destinations:

- Your applications when you connect using :driver:`drivers </>`.
- Tools such as :compass:`MongoDB Compass </>` and 
  :mongosh:`the MongoDB Shell (mongosh) </>`.

This page provides example URI strings for common connection targets.

{+atlas+} Deployment Connection String Examples
---------------------------------------------------

The following example connection strings connect to an {+atlas+}
deployment.

{+atlas+} Cluster that Authenticates with a Username and Password
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/connection-examples-by-language-atlas.rst

.. _connections-string-example-mongodb-aws:

{+atlas+} Cluster that Authenticates with AWS IAM credentials
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following connects to a `MongoDB Atlas
<https://www.mongodb.com/atlas/database?tck=docs_server>`_ cluster which
has been configured to support authentication via `AWS IAM credentials
<https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html>`__:

.. include:: /includes/connection-examples-by-language-atlas-aws-iam.rst

Connecting to Atlas using AWS IAM credentials in this manner uses the
``MONGODB-AWS`` :urioption:`authentication mechanism <authMechanism>`
and the ``$external`` :urioption:`authSource`, as shown in this example.

If using an `AWS session token
<https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html>`__,
as well, provide it with the ``AWS_SESSION_TOKEN``
:urioption:`authMechanismProperties` value, as follows:

.. include:: /includes/connection-examples-by-language-atlas-aws-session-token.rst

.. include:: /includes/fact-aws-key-pct-encode-uri.rst

You may also set these credentials on your platform using standard
`AWS IAM environment variables
<https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html#envvars-list>`__.
:binary:`~bin.mongosh` checks for the following environment
variables when you use the ``MONGODB-AWS``
:urioption:`authentication mechanism <authMechanism>`:

- ``AWS_ACCESS_KEY_ID``
- ``AWS_SECRET_ACCESS_KEY``
- ``AWS_SESSION_TOKEN``

If set, these credentials do not need to be specified in the connection
string.

The following example sets these environment variables in the ``bash``
shell:

.. code-block:: none

   export AWS_ACCESS_KEY_ID='<aws access key id>'
   export AWS_SECRET_ACCESS_KEY='<aws secret access key>'
   export AWS_SESSION_TOKEN='<aws session token>'

Syntax for setting environment variables in other shells will be
different. Consult the documentation for your platform for more
information.

You can verify that these environment variables have been set with the
following command:

.. code-block:: none

   env | grep AWS

Once set, the following example connects to a MongoDB Atlas cluster
using these environment variables:

.. include:: /includes/connection-examples-by-language-atlas-aws-env-variable.rst

Self-Hosted Deployment Connection String Examples
-------------------------------------------------

The following example connection strings connect to a self-hosted
deployment.

Self-Hosted Cluster that Authenticates with a Username and Password
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: SRV Connection String
      :tabid: srv

      .. include:: /includes/srv-connection-examples-onprem.rst

   .. tab:: Standard Connection String
      :tabid: standard

      .. include:: /includes/standard-connection-examples-onprem.rst

Self-Hosted Database Server Running Locally
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following connects to a database server running locally on the
default port:

.. include:: /includes/connection-examples-by-language-local.rst

Self-Hosted ``admin`` Database Running Locally
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following connects and logs in to the ``admin`` database as user
``myDatabaseUser`` with the password ``D1fficultP%40ssw0rd``:

.. include:: /includes/connection-examples-by-language-admin-local.rst

Self-Hosted ``records`` Database Running Locally
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following connects and logs in to the ``records`` database as user
``myDatabaseUser`` with the password ``D1fficultP%40ssw0rd``:

.. include:: /includes/connection-examples-by-language-records-local.rst

Self-Hosted UNIX Domain Socket
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use a URL encoded connection string when connecting to a UNIX domain
socket.

The following connects to a UNIX domain socket with file path
``/tmp/mongodb-27017.sock`` as user ``myDatabaseUser`` with the
password ``D1fficultP%40ssw0rd``:

.. include:: /includes/connection-examples-by-language-unix.rst

.. note:: Not all drivers support UNIX domain sockets. For information
   on your driver, see the :driver:`Drivers </>`
   documentation.

Self-Hosted Replica Set with Members on Different Machines
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following connects to a :term:`replica set` with two members, one on
``db1.example.net`` and the other on ``db2.example.net``, 
as user ``myDatabaseUser`` with the password ``D1fficultP%40ssw0rd``:

.. note::

   .. include:: /includes/fact-uri-rs-hostnames.rst

.. include:: /includes/connection-examples-by-language-rs-different-machines.rst

Self-Hosted Replica Set with Members on ``localhost``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following connects to a replica set with three members running on ``localhost`` on
ports ``27017``, ``27018``, and ``27019``
as user ``myDatabaseUser`` with the password ``D1fficultP%40ssw0rd``:

.. note::

   .. include:: /includes/fact-uri-rs-hostnames.rst

.. include:: /includes/connection-examples-by-language-rs-local.rst

Self-Hosted Replica Set with Read Distribution
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following connects to a replica set with three members and
distributes reads to the :term:`secondaries <secondary>`
as user ``myDatabaseUser`` with the password ``D1fficultP%40ssw0rd``:

.. note::

   .. include:: /includes/fact-uri-rs-hostnames.rst

.. include:: /includes/connection-examples-by-language-read-distribution.rst

Self-Hosted Replica Set with a High Level of Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following connects to a replica set with write concern configured
to wait for replication to succeed across a majority of the
data-bearing voting members, with a two-second timeout. It authenticates
as user ``myDatabaseUser`` with the password ``D1fficultP%40ssw0rd``.

.. note::

   .. include:: /includes/fact-uri-rs-hostnames.rst

.. include:: /includes/connection-examples-by-language-write-concern.rst

Self-Hosted Sharded Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following connects to a sharded cluster with three :binary:`~bin.mongos` instances as user ``myDatabaseUser`` with the password
``D1fficultP%40ssw0rd``:

.. include:: /includes/connection-examples-by-language-sharded.rst

