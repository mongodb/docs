=========
mapReduce
=========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. note:: Aggregation Pipeline as Alternative to Map-Reduce

   .. include:: /includes/fact-use-aggregation-not-map-reduce.rst

Definition
----------

.. dbcommand:: mapReduce

   The :dbcommand:`mapReduce` command allows you to run
   :term:`map-reduce` aggregation operations over a collection. 

   .. |method| replace:: :method:`~db.collection.mapReduce` helper method
   .. include:: /includes/fact-dbcommand-tip

Compatibility
-------------

This command is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-no-free.rst

.. include:: /includes/fact-environments-onprem-only.rst

Syntax
------

.. note::

   .. include:: /includes/extracts/4.4-changes-mapreduce-ignore-verbose.rst

   .. include:: /includes/extracts/4.2-changes-map-reduce-deprecation.rst

The command has the following syntax:

.. code-block:: javascript

   db.runCommand( 
      {
        mapReduce: <string>,
        map: <string or JavaScript>,
        reduce: <string or JavaScript>,
        finalize: <string or JavaScript>,
        out: <output>,
        query: <document>,
        sort: <document>,
        limit: <number>,
        scope: <document>,
        jsMode: <boolean>,
        verbose: <boolean>,
        bypassDocumentValidation: <boolean>,
        collation: <document>,
        maxTimeMS: <integer>,
        writeConcern: <document>,
        comment: <any>
      }
   )

Command Fields
--------------

The command takes the following fields as arguments:

.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Field
     - Type
     - Description

   * - :ref:`mapReduce <cmd-mapreduce-collection>`
     - string
     - .. _cmd-mapreduce-collection:
     
       The name of the collection on which you want to perform map-reduce.
       This collection will be filtered using ``query`` before being processed
       by the ``map`` function.

       .. include:: /includes/extracts/views-unsupported-mapReduce.rst

   * - :ref:`map <cmd-mapreduce-map>`
     - JavaScript or String
     - .. _cmd-mapreduce-map:
     
       A JavaScript function that associates or "maps" a ``value``
       with a ``key`` and emits the ``key`` and value ``pair``. You
       can specify the function as :ref:`BSON type <bson-types>` 
       Javascript (BSON Type 13) or String (BSON Type 2).
       
       For more information, see :ref:`Requirements for the map Function
       <mapreduce-map-cmd>`.
       
   * - :ref:`reduce <cmd-mapreduce-reduce>`
     - JavaScript or String
     - .. _cmd-mapreduce-reduce:
     
       A JavaScript function that "reduces" to a single object all
       the ``values`` associated with a particular ``key``. You can
       specify the function as BSON type JavaScript (BSON Type 13) or 
       String (BSON Type 2).
       
       For more information, see :ref:`Requirements for the reduce
       Function <mapreduce-reduce-cmd>`.
       
   * - :ref:`out <cmd-mapreduce-out>`
     - string or document
     - .. _cmd-mapreduce-out:
     
       Specifies where to output the result of the map-reduce operation. You
       can either output to a collection or return the result inline. On a
       :term:`primary` member of a replica set you can output either to a collection
       or inline, but on a :term:`secondary`, only inline output is
       possible.
       
       For more information, see :ref:`out Options <mapreduce-out-cmd>`.
       
   * - :ref:`query <cmd-mapreduce-query>`
     - document
     - .. _cmd-mapreduce-query:
     
       Optional. Specifies the selection criteria using :ref:`query operators
       <query-projection-operators-top>` for determining the documents 
       input to the ``map`` function.

   * - :ref:`sort <cmd-mapreduce-sort>`
     - document
     - .. _cmd-mapreduce-sort:
     
       Optional. Sorts the *input* documents. This option is useful for
       optimization. For example, specify the sort key to be the same as
       the emit key so that there are fewer reduce operations. The sort key
       must be in an existing index for this collection.
       
   * - :ref:`limit <cmd-mapreduce-limit>`
     - number
     - .. _cmd-mapreduce-limit:

       Optional. Specifies a maximum number of documents for the input into the
       ``map`` function.
       
   * - :ref:`finalize <cmd-mapreduce-finalize>`
     - JavaScript or String
     - .. _cmd-mapreduce-finalize:

       Optional. A JavaScript function that modifies the output after
       the ``reduce`` function. You can specify the function as
       BSON type JavaScript (BSON Type 13) or String (BSON Type 2).
       
       For more information, see :ref:`Requirements for the finalize
       Function <mapreduce-finalize-cmd>`.
       
   * - :ref:`scope <cmd-mapreduce-scope>`
     - document
     - .. _cmd-mapreduce-scope:
     
       Optional. Specifies global variables that are accessible in the ``map``,
       ``reduce`` and ``finalize`` functions.

   * - :ref:`jsMode <cmd-mapreduce-jsMode>`
     - boolean
     - .. _cmd-mapreduce-jsMode:
     
       Optional. Specifies whether to convert intermediate data into BSON
       format between the execution of the ``map`` and ``reduce``
       functions.
       
       Defaults to ``false``.
       
       If ``false``:
       
       - Internally, MongoDB converts the JavaScript objects emitted
         by the ``map``
         function to BSON objects. These BSON
         objects are then converted back to JavaScript objects when
         calling the ``reduce`` function.
       
       - The map-reduce operation places the intermediate BSON objects
         in temporary, on-disk storage. This allows the map-reduce
         operation to execute over arbitrarily large data sets.
       
       If ``true``:
       
       - Internally, the JavaScript objects emitted during ``map``
         function remain as JavaScript objects. There is no need to
         convert the objects for the ``reduce`` function, which
         can result in faster execution.
       
       - You can only use ``jsMode`` for result sets with fewer than
         500,000 distinct ``key`` arguments to the mapper's ``emit()``
         function.
       
   * - :ref:`verbose <cmd-mapreduce-verbose>`
     - boolean
     - .. _cmd-mapreduce-verbose:
     
       Optional. Specifies whether to include the ``timing`` information in the
       result information. Set ``verbose`` to ``true`` to include
       the ``timing`` information.
       
       Defaults to ``false``.
       
       This option is ignored. The result
       information always excludes the ``timing`` information. 
       You can view timing information by running
       :dbcommand:`explain` with the :dbcommand:`mapReduce` command
       in the ``"executionStats"`` or ``"allPlansExecution"``
       ``verbosity`` modes.

   * - :ref:`bypassDocumentValidation <cmd-mapreduce-bypassDocumentValidation>`
     - boolean
     - .. _cmd-mapreduce-bypassDocumentValidation:
     
       Optional. Enables :dbcommand:`mapReduce` to bypass document validation
       during the operation. This lets you insert documents that do not
       meet the validation requirements.

       If the :ref:`output option <mapreduce-out-cmd>` is set to
       ``inline``, no :doc:`document validation
       </core/schema-validation/>` occurs. If the output goes to
       a collection, :dbcommand:`mapReduce` observes any validation
       rules which the collection has and does not insert any invalid
       documents unless the ``bypassDocumentValidation`` parameter is
       set to true.

   * - :ref:`collation <cmd-mapreduce-collation>`
     - document
     - .. _cmd-mapreduce-collation:
     
       Optional. 
       
       .. include:: /includes/extracts/collation-option.rst

   * - ``maxTimeMS``
     - non-negative integer
     - Optional.

       .. include:: /includes/maxTimeMS-description.rst

   * - :ref:`writeConcern <cmd-mapreduce-writeConcern>`
     - document
     - .. _cmd-mapreduce-writeConcern:
     
       Optional. A document that expresses the :doc:`write concern
       </reference/write-concern>` to use when outputting to a collection.
       Omit to use the default write concern.

   * - ``comment``
     - any
     - .. include:: /includes/extracts/comment-content.rst

.. _map-reduce-usage:

Usage
-----

The following is a prototype usage of the :dbcommand:`mapReduce`
command:

.. code-block:: javascript

   var mapFunction = function() { ... };
   var reduceFunction = function(key, values) { ... };

   db.runCommand(
                  {
                    mapReduce: <input-collection>,
                    map: mapFunction,
                    reduce: reduceFunction,
                    out: { merge: <output-collection> },
                    query: <query>
                  }
                )

.. include:: /includes/extracts/admonition-js-prevalence-mapReduce.rst

.. _mapreduce-map-cmd:

.. include:: /includes/parameters-map-reduce.rst
   :start-after: start-map
   :end-before: end-map

.. _mapreduce-reduce-cmd:

.. include:: /includes/parameters-map-reduce.rst
   :start-after: start-reduce
   :end-before: end-reduce

.. _mapreduce-finalize-cmd:

.. include:: /includes/parameters-map-reduce.rst
   :start-after: start-finalize
   :end-before: end-finalize

.. _mapreduce-out-cmd:

.. include:: /includes/parameters-map-reduce.rst
   :start-after: start-out
   :end-before: end-out

Required Access
---------------

If your MongoDB deployment enforces authentication, the user executing
the :dbcommand:`mapReduce` command must possess the following
privilege actions:

Map-reduce with ``{out : inline}`` output option:

- :authaction:`find`

Map-reduce with the ``replace`` action when :ref:`outputting to a
collection <mapreduce-out-mtd>`:

- :authaction:`find`,
- :authaction:`insert`,
- :authaction:`remove`

Map-reduce with the ``merge`` or ``reduce`` actions when
:ref:`outputting to a collection <mapreduce-out-mtd>`:

- :authaction:`find`,
- :authaction:`insert`,
- :authaction:`update`

The :authrole:`readWrite` built-in role provides the necessary
permissions to perform map-reduce aggregation.

Restrictions
------------

The :dbcommand:`mapReduce` command no longer supports :ref:`afterClusterTime
<afterClusterTime>`. As such, :dbcommand:`mapReduce` cannot be
associated with :ref:`causally consistent sessions <causal-consistency>`.

Map-Reduce Examples
-------------------

In :binary:`~bin.mongosh`, the :method:`db.collection.mapReduce()`
method is a wrapper around the :dbcommand:`mapReduce` command. The
following examples use the :method:`db.collection.mapReduce()` method:

.. include:: /includes/examples-map-reduce.rst
   :start-after: map-reduce-document-prototype-begin

For more information and examples, see the
:ref:`Map-Reduce <map-reduce>` page and
:ref:`Perform Incremental Map-Reduce <incremental-map-reduce>`

.. _mapreduce-output:
.. _mapReduce-output:

Output
------

If you set the :ref:`out <mapreduce-out-cmd>` parameter to write the
results to a collection, the :dbcommand:`mapReduce` command returns a
document in the following form:

.. code-block:: javascript

   { "result" : "map_reduce_example", "ok" : 1 }

If you set the :ref:`out <mapreduce-out-cmd>` parameter to output the
results inline, the :dbcommand:`mapReduce` command returns a document
in the following form:

.. code-block:: javascript

   {
         "results" : [
            {
               "_id" : <key>,
               "value" :<reduced or finalizedValue for key>
            },
            ...
         ],
         "ok" : <int>
   }

.. data:: mapReduce.result

   For output sent to a collection, this value is either:

   - a string for the collection name if :ref:`out <mapreduce-out-cmd>`
     did not specify the database name, or

   - a document with both ``db`` and ``collection`` fields if :ref:`out
     <mapreduce-out-cmd>` specified both a database and collection name.

.. data:: mapReduce.results

   For output written inline, an array of resulting documents. Each
   resulting document contains two fields:

   - ``_id`` field contains the ``key`` value,

   - ``value`` field contains the reduced or finalized value for the
     associated ``key``.

.. data:: mapReduce.ok

   A value of ``1`` indicates the :dbcommand:`mapReduce` command ran
   successfully. A value of ``0`` indicates an error.

In addition to the aforementioned command specific return fields, the
:method:`db.runCommand()` includes additional information:

- for replica sets: ``$clusterTime``, and ``operationTime``.

- for sharded clusters: ``operationTime`` and ``$clusterTime``.

See :ref:`db.runCommand Response <command-response>` for details on
these fields.

Additional Information
----------------------

- :doc:`/tutorial/troubleshoot-map-function`

- :doc:`/tutorial/troubleshoot-reduce-function`

- :method:`db.collection.mapReduce()`

- :ref:`aggregation`

.. slave-ok
