# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 18:40+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:5
msgid "Troubleshoot Sharded Clusters"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:15
msgid ""
"This page describes common strategies for troubleshooting :term:`sharded "
"cluster` deployments."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:19
msgid "Application Servers or :binary:`~bin.mongos` Instances Become Unavailable"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:21
msgid ""
"If each application server has its own :binary:`~bin.mongos` instance, "
"other application servers can continue to access the database. "
"Furthermore, :binary:`~bin.mongos` instances do not maintain persistent "
"state, and they can restart and become unavailable without losing any "
"state or data. When a :binary:`~bin.mongos` instance starts, it retrieves"
" a copy of the :term:`config database` and can begin routing queries."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:29
msgid "A Single :binary:`~bin.mongod` Becomes Unavailable in a Shard"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:31
msgid ""
":doc:`Replica sets </replication>` provide :term:`high availability` for "
"shards. If the unavailable :binary:`~bin.mongod` is a :term:`primary`, "
"then the replica set will :ref:`elect <replica-set-elections>` a new "
"primary. If the unavailable :binary:`~bin.mongod` is a :term:`secondary`,"
" and it disconnects the primary and secondary will continue to hold all "
"data. In a three member replica set, even if a single member of the set "
"experiences catastrophic failure, two other members have full copies of "
"the data. [#recovery-window]_"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:40
msgid ""
"Always investigate availability interruptions and failures. If a system "
"is unrecoverable, replace it and create a new member of the replica set "
"as soon as possible to replace the lost redundancy."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:44
msgid ""
"If an unavailable secondary becomes available while it still has current "
"oplog entries, it can catch up to the latest state of the set using the "
"normal :term:`replication process <sync>`; otherwise, it must perform an "
":term:`initial sync`."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:50
msgid "All Members of a Shard Become Unavailable"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:52
#: ../source/tutorial/troubleshoot-sharded-clusters.txt:93
msgid ""
"In a sharded cluster, :binary:`~bin.mongod` and :binary:`~bin.mongos` "
"instances monitor the replica sets in the sharded cluster (e.g. shard "
"replica sets, config server replica set)."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:56
msgid ""
"If all members of a replica set shard are unavailable, all data held in "
"that shard is unavailable. However, the data on all other shards will "
"remain available, and it is possible to read and write data to the other "
"shards. However, your application must be able to deal with partial "
"results, and you should investigate the cause of the interruption and "
"attempt to recover the shard as soon as possible."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:66
msgid "A Config Server Replica Set Member Become Unavailable"
msgstr ""

#: ../source/includes/fact-mirrored-config-servers-deprecated.rst:1
msgid ""
"Starting in MongoDB 3.2, config servers for sharded clusters can be "
"deployed as a :doc:`replica set </replication>`. The replica set config "
"servers must run the :doc:`WiredTiger storage engine </core/wiredtiger>`."
" MongoDB 3.2 deprecates the use of three mirrored :binary:`~bin.mongod` "
"instances for config servers."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:72
msgid ""
":doc:`Replica sets </replication>` provide :term:`high availability` for "
"the config servers. If an unavailable config server is a :term:`primary`,"
" then the replica set will :ref:`elect <replica-set-elections>` a new "
"primary."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:77
msgid ""
"If the replica set config server loses its primary and cannot elect a "
"primary, the cluster's metadata becomes *read only*. You can still read "
"and write data from the shards, but no :ref:`chunk migration <sharding-"
"balancing>` or :doc:`chunk splits </tutorial/split-chunks-in-sharded-"
"cluster>` will occur until a primary is available."
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:3
msgid ""
"Distributing replica set members across two data centers provides benefit"
" over a single data center. In a two data center distribution,"
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:7
msgid ""
"If one of the data centers goes down, the data is still available for "
"reads unlike a single data center distribution."
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:10
msgid ""
"If the data center with a minority of the members goes down, the replica "
"set can still serve write operations as well as read operations."
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:14
msgid ""
"However, if the data center with the majority of the members goes down, "
"the replica set becomes read-only."
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:17
msgid ""
"If possible, distribute members across at least three data centers. For "
"config server replica sets (CSRS), the best practice is to distribute "
"across three (or more depending on the number of members) centers. If the"
" cost of the third data center is prohibitive, one distribution "
"possibility is to evenly distribute the data bearing members across the "
"two data centers and store the remaining member (either a data bearing "
"member or an arbiter to ensure odd number of members) in the cloud if "
"your company policy allows."
msgstr ""

#: ../source/includes/note-config-server-startup.rst:3
msgid ""
"All config servers must be running and available when you first initiate "
"a :term:`sharded cluster`."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:91
msgid "MongoDB 3.2"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:97
msgid ""
"If no member of the config server replica set is reachable by a "
":binary:`~bin.mongos` instance or a shard member:"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:118
msgid "For MongoDB 3.2.0-3.2.9,"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:101
msgid ""
"If the number of consecutive unsuccessful attempts exceeds "
":parameter:`replMonitorMaxFailedChecks` parameter value, the "
":binary:`~bin.mongod` or :binary:`~bin.mongos` instance denotes the "
"replica set as unavailable and the monitoring :binary:`~bin.mongos` or "
":binary:`~bin.mongod` instance becomes unusable until you restart the "
"instance."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:108
msgid ""
"However, you can avoid having to restart the :binary:`~bin.mongos` or the"
" shard replica set member :binary:`~bin.mongod` in this situation by "
"setting :parameter:`replMonitorMaxFailedChecks` to value ``2147483647`` "
"when you start up these instances:"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:114
msgid "The parameter setting is not persisted upon restart."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:122
msgid "For MongoDB 3.2.10 or later 3.2-series,"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:121
msgid ""
"By default, you do not need to restart unless "
":parameter:`timeOutMonitoringReplicaSets` is set to ``true``."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:125
msgid "Cursor Fails Because of Stale Config Data"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:129
msgid ""
"A query returns the following warning when one or more of the "
":binary:`~bin.mongos` instances has not yet updated its cache of the "
"cluster's metadata from the :term:`config database`:"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:137
msgid ""
"This warning *should* not propagate back to your application. The warning"
" will repeat until all the :binary:`~bin.mongos` instances refresh their "
"caches. To force an instance to refresh its cache, run the "
":dbcommand:`flushRouterConfig` command."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:143
msgid "Shard Keys and Cluster Availability"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:145
msgid "The most important consideration when choosing a :term:`shard key` are:"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:148
msgid ""
"to ensure that MongoDB will be able to distribute data evenly among "
"shards, and"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:151
msgid "to scale writes across the cluster, and"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:153
msgid ""
"to ensure that :binary:`~bin.mongos` can isolate most queries to a "
"specific :binary:`~bin.mongod`."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:156
msgid "Furthermore:"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:158
msgid ""
"Each shard should be a :term:`replica set`, if a specific "
":binary:`~bin.mongod` instance fails, the replica set members will elect "
"another to be :term:`primary` and continue operation. However, if an "
"entire shard is unreachable or fails for some reason, that data will be "
"unavailable."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:164
msgid ""
"If the shard key allows the :binary:`~bin.mongos` to isolate most "
"operations to a single shard, then the failure of a single shard will "
"only render *some* data unavailable."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:168
msgid ""
"If your shard key distributes data required for every operation "
"throughout the cluster, then the failure of the entire shard will render "
"the entire cluster unavailable."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:172
msgid ""
"In essence, this concern for reliability simply underscores the "
"importance of choosing a shard key that isolates query operations to a "
"single shard."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:179
msgid "Config Database String Error"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:183
msgid ""
"Starting in MongoDB 3.2, config servers can be deployed as replica sets. "
"The :binary:`~bin.mongos` instances for the sharded cluster must specify "
"the same config server replica set name but can specify hostname and port"
" of different members of the replica set."
msgstr ""

#: ../source/includes/3.4-sccc-unsupported.rst:1
msgid ""
"Starting in 3.4, the use of the deprecated mirrored :binary:`~bin.mongod`"
" instances as config servers (SCCC) is no longer supported. Before you "
"can upgrade your sharded clusters to 3.4, you must convert your config "
"servers from SCCC to CSRS."
msgstr ""

#: ../source/includes/3.4-sccc-unsupported.rst:6
msgid ""
"To convert your config servers from SCCC to CSRS, see the MongoDB 3.4 "
"manual :v3.4:`Upgrade Config Servers to Replica Set </tutorial/upgrade-"
"config-servers-to-replica-set>`."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:190
msgid ""
"With earlier versions of MongoDB sharded clusters that use the topology "
"of three mirrored :binary:`~bin.mongod` instances for config servers, "
":binary:`~bin.mongos` instances in a sharded cluster must specify "
"identical :setting:`~sharding.configDB` string."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:197
msgid "Avoid Downtime when Moving Config Servers"
msgstr ""

#: ../source/includes/fact-use-cnames-for-config-servers.rst:1
msgid ""
"Use CNAMEs to identify your config servers to the cluster so that you can"
" rename and renumber your config servers without downtime."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:202
msgid "``moveChunk commit failed`` Error"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:204
msgid ""
"At the end of a :ref:`chunk migration <sharding-chunk-migration>`, the "
":term:`shard` must connect to the :term:`config database` to update the "
"chunk's record in the cluster metadata. If the :term:`shard` fails to "
"connect to the :term:`config database`, MongoDB reports the following "
"error:"
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:215
msgid ""
"When this happens, the :term:`primary` member of the shard's replica set "
"then terminates to protect data consistency. If a :term:`secondary` "
"member can access the config database, data on the shard becomes "
"accessible again after an election."
msgstr ""

#: ../source/tutorial/troubleshoot-sharded-clusters.txt:220
msgid ""
"The user will need to resolve the chunk migration failure independently. "
"If you encounter this issue, contact the `MongoDB User Group "
"<http://groups.google.com/group/mongodb-user>`_ or :doc:`MongoDB Support "
"</support>` to address this issue."
msgstr ""

# a104a033f2c24a7b905b599cefa446c8
#~ msgid ""
#~ "This section describes common strategies "
#~ "for troubleshooting :term:`sharded cluster` "
#~ "deployments."
#~ msgstr ""

# 4ed6c5f76d0f4e23a8c7ab3ab8e81002
#~ msgid ""
#~ "Start all :program:`mongos` instances in "
#~ "a sharded cluster with an identical "
#~ ":setting:`~sharding.configDB` string. If a "
#~ ":program:`mongos` instance tries to connect"
#~ " to the sharded cluster with a "
#~ ":setting:`~sharding.configDB` string that does "
#~ "not *exactly* match the string used "
#~ "by the other :program:`mongos` instances, "
#~ "including the order of the hosts, "
#~ "the following errors occur:"
#~ msgstr ""

# 85bb0576787e4120a28c37b6a38d1788
#~ msgid "And:"
#~ msgstr ""

# e7509d7d6287488c820b8226dd05364d
#~ msgid ""
#~ "To solve the issue, restart the "
#~ ":program:`mongos` with the correct string."
#~ msgstr ""

# 0d9e42e24ea54aa3ab0d0dd61b5ab10e
#~ msgid ""
#~ "A query returns the following warning"
#~ " when one or more of the "
#~ ":program:`mongos` instances has not yet "
#~ "updated its cache of the cluster's "
#~ "metadata from the :term:`config database`:"
#~ msgstr ""

# 8c3a60d20d054fbaa0cb85b27e43d0a1
#~ msgid ""
#~ "This warning *should* not propagate back"
#~ " to your application. The warning "
#~ "will repeat until all the "
#~ ":program:`mongos` instances refresh their "
#~ "caches. To force an instance to "
#~ "refresh its cache, run the "
#~ ":dbcommand:`flushRouterConfig` command."
#~ msgstr ""

