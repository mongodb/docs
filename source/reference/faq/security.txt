========
Security
========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

How does |service| encrypt my data?
-----------------------------------

|service| uses whole volume (disk) encryption for any data at rest,
including your cluster data and backups of that data.

|service| also requires |tls| encryption for client data and
intra-cluster network communications.

If your organization requires more specific information regarding
|service| encryption, please contact |service| |mdb-support|. From the
|service| project or cluster view, click :guilabel:`Support` in the
left-hand navigation bar.

Can I disable TLS on my deployment?
-----------------------------------

No.

.. _faq-tls-1.0-deprecation:

What versions of TLS does |service| support?
-------------------------------------------- 

|service| requires |tls| connections for all |service| clusters. 
After July 2020, |service| will enable Transport Layer Security 
(|tls|) protocol version 1.2 by default for all new |service| 
clusters regardless of the MongoDB version. 

MongoDB 4.0 and later :manual:`disables support for TLS 1.0 
</release-notes/4.0/#disable-tls-1-0>` where |tls| 
1.1+ is available. You can manually configure |tls| 1.1 or 1.0 by 
:ref:`editing your cluster configuration 
<scale-cluster-more-configuration-options>`. 

You can read more about timing and reasons for the change from the
`Payment Card Industry (PCI) <https://blog.pcisecuritystandards.org/migrating-from-ssl-and-early-tls>`_
as well as the
`National Institute of Standards and Technology (NIST) 
<https://www.nist.gov/news-events/news/2014/04/nist-revises-guide-use-transport-layer-security-tls-networks>`_.

If you have questions about |tls| support or cannot update your
applications to support |tls| 1.2, please contact |service| 
|mdb-support|.

To open a |service| support ticket, log into the your |service|
account. Click the :guilabel:`Support` link in the |service| console
and fill in the requested details.

How do I know if my applications support TLS 1.2?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Applications whose underlying programming languages or security 
libraries predate |tls| 1.2 may require updating to a more recent 
version to support |tls| 1.2. You may also need to update the 
application host operating system to support |tls| 1.2.

MongoDB and |service| do not provide services to audit external
applications for which versions of |tls| support they support.
Third party services such as
`howsmyssl.com <https://www.howsmyssl.com/s/api.html>`_
may provide the appropriate tooling. MongoDB does not endorse the
aforementioned service, and its reference is intended only as
informational. Defer to your organization's procedures
in selecting the appropriate vendor or service for auditing
your applications.

What do I have to do to update my clusters for TLS 1.2?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After auditing your applications for support of |tls| 1.2 and 
updating any components of your technology stack that do not 
support |tls| 1.2, you must manually :ref:`modify 
<scale-cluster-more-configuration-options>` your cluster 
configuration to use |tls| 1.2.

Can I force enable TLS 1.0?
~~~~~~~~~~~~~~~~~~~~~~~~~~~

|service| allows users to manually configure |tls| 1.0 during
:ref:`cluster modification <scale-cluster-more-configuration-options>`.

Enabling |tls| 1.0 for any |service| cluster carries significant risks.
Consider enabling |tls| 1.0 only for as long as required to update your
application stack to support |tls| 1.2.


Which certificate authority signs MongoDB Atlas cluster TLS certificates?
-------------------------------------------------------------------------

The MongoDB |service| |tls| certificate changed on 25 February 2020.

MongoDB |service| moved to `Let’s Encrypt <https://letsencrypt.org>`__
as the new |certauth| for |tls| certificates for all |service|
clusters.

All newly created ``M10+`` |service| clusters already utilize the new
certificates and can be used to test connectivity.

Please review the following scenarios to ensure that you will not
experience connectivity issues:

.. _tls-change-hard-code:

Hard-coded Certificate Authority
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you hard-coded the DigiCert root |certauth| as the only trusted
|certauth| utilized for your application’s connection to |service|,
please ensure that you add the Let’s Encrypt root |certauth|\s to your
certificate store. Add both of the following root |certauth|\s for
`Let’s Encrypt <https://letsencrypt.org>`__:

- ISRG Root X1: https://letsencrypt.org/certs/isrgrootx1.pem.txt

- (IdenTrust) DST Root CA X3: https://letsencrypt.org/certs/trustid-x3-root.pem.txt

Java Users
~~~~~~~~~~

Let’s Encrypt isn't present in the default trust store for Java
version 7 prior to the 7u111 update, or Java version 8 prior to the
8u101 update. Use a Java release after 19 July 2016.

Please ensure your Java client software is up-to-date. The latest Java
versions are strongly recommended for many improvements beyond these
new |certauth| requirements for our |tls| certificates.

If you have your own trust store, add the Let’s Encrypt certificate to
it. To learn more, see :ref:`tls-change-hard-code`.

Everyone Else
~~~~~~~~~~~~~

This change shouldn't impact you if you use a recent programming
language and operating system version.
