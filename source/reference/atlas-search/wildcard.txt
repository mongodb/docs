.. _wildcard-ref:

========
wildcard
========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: wildcard

   The ``wildcard`` operator enables queries which use special
   characters in the search string that can match any character.

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Character
        - Description

      * - ``?``
        - Matches any single character.

      * - ``*``
        - Matches 0 or more characters.

      * - ``\``
        - Escape character.

   ``wildcard`` is a term-level operator, meaning that the ``query``
   field is not analyzed. Term-level operators work well with the
   :ref:`Keyword Analyzer <ref-keyword-analyzer>`, because the
   ``query`` field is treated as a single term, with special characters
   included. For an example of querying against an analyzed ``query``
   field vs. a non-analyzed ``query`` field, see the
   :ref:`analyzed field example <analyzed-example>`.

.. _wildcard-syntax:

Syntax
------

``wildcard`` has the following syntax:

.. code-block:: javascript

   {
     $search: {
       "index": <index name>, // optional, defaults to "default"
       "wildcard": {
         "query": "<search-string>",
         "path": "<field-to-search>",
         "allowAnalyzedField": <boolean>,
         "score": <options>
       }
     }
   }

.. _wildcard-options:

Options
-------

``wildcard`` uses the following terms to construct a query:

.. list-table::
   :header-rows: 1
   :widths: 10 15 40 10 10

   * - Field
     - Type
     - Description
     - Necessity
     - Default

   * - ``query``
     - string or array of strings
     - String or strings to search for.
     - yes
     -

   * - ``path``
     - string or array of strings
     - Indexed field or fields to search. You can also specify a 
       :ref:`wildcard path <ref-path-usage>` to search. See :ref:`path
       construction <ref-path>` for more information.
     - yes
     -

   * - ``allowAnalyzedField``
     - boolean
     - Must be set to ``true`` if the query is run against an
       analyzed field.
     - no
     - ``false``

   * - ``score``
     - object
     - Modify the :ref:`score <scoring-ref>` assigned to matching
       search term results. Options are:

       - ``boost``: multiply the result score by the given number.

       - ``constant``: replace the result score with the given
         number.

     - no
     -

Behavior
--------

.. _analyzed-example:

``wildcard`` is a term-level operator, meaning that the ``query`` field
is not analyzed. It is possible to use the ``wildcard`` operator to
perform searches on an analyzed field by setting the
``allowAnalyzedField`` option to ``true``, but you may get unexpected
results.

.. example::

   Searching for ``*Star Trek*`` on a field indexed with the
   ``keyword`` analyzer finds all documents in which the field contains
   the string ``Star Trek`` in any context. Searching for ``*Star
   Trek*`` on a field indexed with the :ref:`standard analyzer
   <ref-standard-analyzer>` finds nothing, because there is a space
   between ``Star`` and ``Trek``, and the index contains no spaces.

.. _escape-character-behavior:

Escape Character Behavior
~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-fts-escape-char-behavior.rst

Examples
--------

The following examples use the ``movies`` collection in the
``sample_mflix`` database with a custom index definition that uses the
:ref:`keyword analyzer <ref-keyword-analyzer>`. If you have the
:ref:`sample dataset <available-sample-datasets>` on your cluster, you
can create an |fts| index on the ``movies`` collection and run the
example queries on your cluster. 

.. include:: /includes/admonitions/get-started-atlas-search.rst

Index Definition
~~~~~~~~~~~~~~~~

The following index definition indexes the ``title`` field in the
``movies`` collection with the :ref:`keyword analyzer
<ref-keyword-analyzer>`:

.. code-block:: javascript
   :linenos:

   {
     "mappings": {
       "fields": {
         "title": {
           "analyzer": "lucene.keyword",
           "type": "string"
         }
       }
     }
   }

The following example searches all ``title`` fields for movie titles
that begin with ``Green D``, followed by any number of other
characters.

.. code-block:: javascript
   :linenos:

   db.movies.aggregate([
      {
        "$search": {
          "wildcard": {
            "path": "title",
            "query": "Green D*"
          }
        }
      },
      {
        "$project": {
          "_id": 0,
          "title": 1
        }
      }
   ])

The above query returns the following results:

.. code-block:: json
   :copyable: false

   { "title" : "Green Dolphin Street" }
   { "title" : "Green Dragon" }

The following example searches all ``title`` fields for movie titles
that begin with the string ``Wom?n`` (where ``?`` may be any single
character), followed by a space and then any number of additional
characters. The ``$limit`` stage limits the results to 5 documents,
while the ``$project`` stage limits the results to only the ``title``
field.

.. code-block:: javascript
   :linenos:

   db.movies.aggregate([
      {
        "$search": {
          "wildcard": {
            "path": "title",
            "query": "Wom?n *"
          }
        }
      },
      {
        "$limit": 5
      },
      {
        "$project": {
          "_id": 0,
          "title": 1
        }
      }
   ])

The above query returns the following results:

.. code-block:: json
   :copyable: false

   { "title" : "Woman of the Year" }
   { "title" : "Woman in a Dressing Gown" }
   { "title" : "Woman in the Dunes" }
   { "title" : "Women in Love" }
   { "title" : "Women on the Verge of a Nervous Breakdown" }

Escape Character Example
~~~~~~~~~~~~~~~~~~~~~~~~

The following example searches for documents in which the ``title``
field ends with a question mark.

.. note::

   The following example is intended to run in {+mongosh+}. For
   more information about using the escape characters with a driver,
   see :ref:`Escape Character Behavior <escape-character-behavior>`.

The ``*`` character in the ``query`` field matches any characters, and
the ``\\?`` string matches a literal question mark.

.. code-block:: javascript
   :linenos:

   db.movies.aggregate([
     {
       "$search": {
         "wildcard": {
           "path": "title",
           "query": "*\\?"
         }
       }
     },
     {
       "$limit": 5
     },
     {
       $project: {
         "_id": 0,
         "title": 1
       }
     }
   ])

The above query returns the following results:

.. code-block:: json
   :copyable: false

   { "title" : "Where Are My Children?" }
   { "title" : "Who Killed Cock Robin?" }
   { "title" : "What's Opera, Doc?" }
   { "title" : "Will Success Spoil Rock Hunter?" }
   { "title" : "Who Was That Lady?" }
