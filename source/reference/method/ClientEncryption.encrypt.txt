==========================
ClientEncryption.encrypt()
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. versionadded:: 4.2

.. method:: ClientEncryption.encrypt(encryptionKeyId, value, encryptionAlgorithm)

   :method:`ClientEncryption.encrypt` encrypts the ``value`` using the
   specified ``encryptionKeyId`` and ``encryptionAlgorithm``.
   :method:`~ClientEncryption.encrypt` supports explicit (manual)
   encryption of field values.

   :method:`~ClientEncryption.encrypt` has the following syntax:

   .. code-block:: shell

      clientEncryption = db.getMongo().getClientEncryption()
      
      clientEncryption.encrypt(
        encryptionKeyId,
        value,
        encryptionAlgorithm
      )

   .. list-table::
      :header-rows: 1
      :widths: 20 20 80

      * - Parameter
   
        - Type
   
        - Description

      * - ``encryptionKeyId``
        
        - ``UUID``

        - The data encryption key to use for encrypting the ``value``.
        
          The :abbr:`UUID (Universally unique identifier)` is a BSON
          :bsontype:`binary data <Binary>` object with subtype ``4``
          that identifies a specific data encryption key. If the data
          encryption key does not exist in the key vault configured for
          the database connection, :method:`~ClientEncryption.encrypt()`
          returns an error. See :ref:`field-level-encryption-keyvault`
          for more information on key vaults and data encryption keys.

      * - ``value``
       
        - See :ref:`encrypt-bson-types`.

        - The value to encrypt.

      * - ``encryptionAlgorithm``
        
        - string
        
        - The encryption algorithm to use for encrypting the ``value``.

          - ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``

          - ``AEAD_AES_256_CBC_HMAC_SHA_512-Random``
          
          For complete documentation on the supported encryption
          algorithms, see :ref:`field-level-encryption-algorithms`.

   :returns:
  
     A :bsontype:`binary data <Binary>`  object with
     `subtype 6 <https://github.com/mongodb/specifications/blob/master/source/client-side-encryption/subtype6.rst>`_.

Behavior
--------

Enable Client-Side Field Level Encryption on Database Connection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/csfle-requires-enabling-encryption.rst

.. _encrypt-bson-types:

Unsupported BSON Types
~~~~~~~~~~~~~~~~~~~~~~

:method:`~ClientEncryption.encrypt()` does *not* supports encrypting 
values with the following BSON types:

- ``minKey``
- ``maxKey``
- ``null``
- ``undefined``

If encrypting a field using
``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``,
:method:`~ClientEncryption.encrypt()` does *not* support the following
BSON types:

- ``double``
- ``decimal128``
- ``bool``
- ``object``
- ``array``
- ``javascriptWithScope`` (*Deprecated*)

Example
-------

The following example uses a locally managed KMS for the client-side
field level encryption configuration.

.. include:: /includes/extracts/csfle-connection-boilerplate.rst

Retrieve the :method:`ClientEncryption <getClientEncryption()>` object
and use the :method:`ClientEncryption.encrypt()` method to encrypt
a value using a specific data encryption key ``UUID`` and 
:ref:`encryption algorithm <field-level-encryption-algorithms>`:

.. code-block:: javascript

   clientEncryption = encryptedClient.getClientEncryption();

   clientEncryption.encrypt(
     UUID("64e2d87d-f168-493c-bbdf-a394535a2cb9"), 
     "123-45-6789", 
     "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
   )

If sucessful, :method:`~ClientEncryption.encrypt` returns the encrypted 
value:

.. code-block:: javascript
   :copyable: false

   BinData(6,"AmTi2H3xaEk8u9+jlFNaLLkC3Q/+kmwDbbWrq+h9nuv9W+u7A5a0UnpULBNZH+Q21fAztPpU09wpKPrju9dKfpN1Afpj1/ZhFcH6LYZOWSBBOAuUNjPLxMNSYOOuITuuYWo=")

For complete documentation on initiating MongoDB connections with
client-side field level encryption enabled, see :method:`Mongo()`.
