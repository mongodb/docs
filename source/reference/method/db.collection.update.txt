======================
db.collection.update()
======================

.. default-domain:: mongodb

.. role:: red(strong)
   :class: text-danger

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.collection.update(query, update, options)


   .. include:: /includes/fact-mongo-shell-method.rst


   Modifies an existing document or documents in a collection. The
   method can modify specific fields of an existing document or documents
   or replace an existing document entirely, depending on the
   :ref:`update parameter <update-parameter>`.

   By default, the :method:`db.collection.update()` method updates a
   **single** document. Include the option :ref:`multi: true <multi-parameter>`
   to update all documents that match the query criteria.

Syntax
------

The :method:`db.collection.update()` method has the following form:

.. code-block:: javascript

   db.collection.update(
      <query>,
      <update>,
      {
        upsert: <boolean>,
        multi: <boolean>,
        writeConcern: <document>,
        collation: <document>,
        arrayFilters: [ <filterdocument1>, ... ],
        hint:  <document|string>        // Available starting in MongoDB 4.2
      }
   )

Parameters
~~~~~~~~~~

The :method:`db.collection.update()` method takes the following
parameters:

.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - :ref:`query <update-filter>`

     - document

     - .. _update-filter:

       The selection criteria for the update. The same :ref:`query
       selectors <query-selectors>` as in the :method:`find()
       <db.collection.find()>` method are available.

       .. versionchanged:: 3.0

          .. include:: /includes/fact-mongodb30-upsert-id.rst
             :end-before: end-short-description

          For more information and an example, see
          :ref:`mongodb30-upsert-id`.


   * - ``update``

     - document or pipeline

     - The modifications to apply.

       The value can be either:

       - A document that contains :ref:`update operator expressions
         <update-operators>`, or

       - A replacement document with only ``<field1>: <value1>`` pairs, or

       - Starting in MongoDB 4.2, an aggregation pipeline. The pipeline can
         consist of the following stages:

         .. include:: /includes/list-update-agg-stages.rst

       For details, see :ref:`update-parameter`.

   * - ``upsert``

     - boolean

     - Optional. If set to ``true``, creates a new document when no document matches the
       query criteria. The default value is ``false``, which does *not*
       insert a new document when no match is found.

   * - ``multi``

     - boolean

     - Optional. If set to ``true``, updates multiple documents that meet the ``query``
       criteria. If set to ``false``, updates one document. The default value
       is ``false``. For additional information, see :ref:`multi-parameter`.

   * - ``writeConcern``

     - document

     - Optional. A document expressing the :doc:`write concern
       </reference/write-concern>`. Omit to use the default write concern ``w: 1``.

       See :ref:`example-update-write-concern` for an example.

       .. include:: /includes/extracts/transactions-operations-write-concern.rst

   * - ``collation``

     - document

     - Optional.

       .. include:: /includes/extracts/collation-option.rst

   * - ``arrayFilters``

     - array

     - Optional. An array of filter documents that determine which array elements to
       modify for an update operation on an array field.

       .. include::  /includes/extracts/arrayFilters-details.rst


       For examples, see :ref:`update-arrayFilters`.

       .. versionadded:: 3.6

   * - :ref:`hint <update-hint>` 

     - Document or string

     - .. _update-hint:

       Optional. A document or string that specifies the :doc:`index
       </indexes>` to use to support the :ref:`query predicate
       <update-filter>`.
       
       The option can take an index specification document or the index
       name string.
       
       If you specify an index that does not exist, the operation
       errors.

       For an example, see :ref:`ex-update-hint`.

       .. versionadded:: 4.2

Returns
~~~~~~~

The method returns a :ref:`writeresults-update` document that contains
the status of the operation.

Access Control
--------------

On deployments running with :setting:`~security.authorization`, the
user must have access that includes the following privileges:

- :authaction:`update` action on the specified collection(s).

- :authaction:`find` action on the specified collection(s).

- :authaction:`insert` action on the specified collection(s) if the
  operation results in an upsert.

The built-in role :authrole:`readWrite` provides the required
privileges.

.. _update-behavior:

Behavior
--------

.. _update-parameter:

Update Parameter
~~~~~~~~~~~~~~~~

The :method:`db.collection.update()` method can accept:

- A document that only contains update operator expressions to modify
  specific fields.

- A document that only contains ``<field1>: <value1>`` pairs to replace
  the matching document wholesale.

- Starting in MongoDB 4.2, an aggregation pipeline that modifies the
  matching document(s).

.. _update-behavior-operator-expressions-document:

Update with an Update Operator Expressions Document
````````````````````````````````````````````````````

For the ``<update>`` field , the :method:`db.collection.update()`
method can accept a document that only contains :ref:`update operator
<update-operators>` expressions to perform.

For example:

.. code-block:: javascript
   :emphasize-lines: 3
   :copyable: false

   db.collection.update(
      <query>,
      { $set: { status: "D" }, $inc: { quantity: 2 } },
      ...
   )

If the ``<update>`` document contains :ref:`update operator
<update-operators>` modifiers, such as those using the
:update:`$set` modifier, then:

- The ``<update>`` document must contain *only* :ref:`update operator
  <update-operators>` expressions.

- The :method:`~db.collection.update()` method updates only the
  corresponding fields in the document.

To update an embedded document or an array as a whole, specify the
replacement value for the field. To update particular fields in an
embedded document or in an array, use :ref:`dot notation
<document-dot-notation>` to specify the field.

.. _update-behavior-replacement-document:

Replace a Document Entirely
```````````````````````````

If the ``<update>`` document contains *only* ``field:value``
expressions, then:

- The :method:`~db.collection.update()` method *replaces* the matching
  document with the ``<update>`` document. The
  :method:`~db.collection.update()` method *does not* replace the
  ``_id`` value. For an example, see
  :ref:`example-update-replace-fields`.

- :method:`~db.collection.update()` *cannot* :ref:`update multiple
  documents <multi-parameter>`.

.. code-block:: javascript
   :emphasize-lines: 3
   :copyable: false

   db.collection.update(
      <query>,
      { item: "XYZ123", stock: 10, info: { publisher: "2255", pages: 150 }, tags: [ "baking", "cooking" ] }
      ...
   )

.. _update-behavior-agg-pipeline:

Update with an Aggregation Pipeline
```````````````````````````````````

Starting in MongoDB 4.2, the :method:`db.collection.update()` method
can accept an :doc:`aggregation pipeline
</core/aggregation-pipeline>` ``[ <stage1>, <stage2>, ... ]`` that
specifies the modifications to perform. The pipeline can consist of
the following stages:

.. include:: /includes/list-update-agg-stages.rst

Using the aggregation pipeline allows for a more expressive update
statement, such as expressing conditional updates based on current
field values or updating one field using the value of another field(s).

For example:

.. code-block:: javascript
   :emphasize-lines: 3-6
   :copyable: false

   db.collection.update(
      <query>,
      [
         { $set: { status: "Modified", comments: [ "$misc1", "$misc2" ] } },
         { $unset: [ "misc1", "misc2" ] }
      ]
      ...
   )

.. note::

   The ``$set`` and ``$unset`` used in the pipeline refers to the
   aggregation stages :pipeline:`$set` and :pipeline:`$unset`
   respectively, and not the update operators :update:`$set` and :update:`$unset`.

For examples, see :ref:`update-example-agg`.

.. _upsert-parameter:

Upsert Option
~~~~~~~~~~~~~

.. _upsert-behavior:

Upsert Behavior
```````````````

If ``upsert`` is ``true`` and no document matches the query criteria,
:method:`~db.collection.update()` inserts a *single* document: 

- If the ``<update>`` parameter is a :ref:`replacement document (i.e.,
  contains only field and value pairs)
  <update-behavior-replacement-document>`, the update creates the new
  document with the replacement document. If neither the ``<query>``
  nor the ``<update>`` document specifies an ``_id`` field, MongoDB
  adds the ``_id`` field with an :ref:`objectid` value.

- If the ``<update>`` parameter is a :ref:`document with update
  operator expressions
  <update-behavior-operator-expressions-document>`, the update creates
  the new document with the fields and values of both the ``<query>``
  and ``<update>`` parameters.

  The update creates a base document from the equality clauses in the
  ``<query>`` parameter, and then applies the update expressions from
  the ``<update>`` parameter. :doc:`Comparison
  </reference/operator/query>` operations from the ``<query>`` will not
  be included in the new document. If the new document does not include
  the ``_id`` field, MongoDB adds the ``_id`` field with an
  :ref:`objectid` value.

- If the ``<update>`` parameter is an :ref:`aggregation pipeline
  <update-behavior-agg-pipeline>`, the update creates a base document
  from the equality clauses in the ``<query>`` parameter, and then
  applies the pipeline to the document to create the document to
  insert. If the new document does not include the ``_id`` field,
  MongoDB adds the ``_id`` field with an :ref:`objectid` value.

If ``upsert`` is ``true`` and there are documents that match the query
criteria, :method:`~db.collection.update()` performs an update.

If you specify ``upsert: true`` on a sharded collection, you must
include the full shard key in the ``filter``. For additional
:method:`db.collection.update()` behavior on a sharded collection, see
:ref:`update-sharded-collection`.

.. seealso:: :update:`$setOnInsert`

.. _update-with-unique-indexes:

Use Unique Indexes
``````````````````

.. warning:: To avoid inserting the same document more than once,
   only use ``upsert: true`` if the ``query`` field is uniquely
   indexed.

Given a collection named ``people`` where no documents have a ``name``
field that holds the value ``Andy``. Consider when multiple clients
issue the following *update* with ``upsert: true`` at the same
time:

.. code-block:: javascript

   db.people.update(
      { name: "Andy" },
      {
         name: "Andy",
         rating: 1,
         score: 1
      },
      { upsert: true }
   )

If all :method:`~db.collection.update()` operations complete the
``query`` portion before any client successfully inserts data, **and**
there is no unique index on the ``name`` field, then each update
operation may result in an insert.

To prevent MongoDB from inserting the same document more than once,
create a :ref:`unique index <index-type-unique>` on the ``name`` field.
With a unique index, if multiple applications issue the same update
with ``upsert: true``, *exactly one*
:method:`~db.collection.update()` would successfully insert a new
document.

The remaining operations would either:

- update the newly inserted document, or

- fail when they attempted to insert a duplicate.

  If the operation fails because of a duplicate index key error,
  applications may retry the operation which will succeed as an update
  operation.

.. _mongodb30-upsert-id:

``upsert:true`` with a Dotted ``_id`` Query
```````````````````````````````````````````

.. include:: /includes/fact-mongodb30-upsert-id.rst

.. include:: /includes/fact-mongodb30-upsert-id-example.rst


.. _multi-parameter:

Multi Parameter
~~~~~~~~~~~~~~~

If ``multi`` is set to ``true``, the :method:`~db.collection.update()`
method updates all documents that meet the ``<query>`` criteria. The
``multi`` update operation may interleave with other operations, both
read and/or write operations.

If the :ref:`\<update\> <update-parameter>` document contains *only*
``field:value`` expressions, then :method:`~db.collection.update()`
*cannot* update multiple documents.

For an example, see :ref:`example-update-multi`.

.. _update-sharded-collection:

Sharded Collections
~~~~~~~~~~~~~~~~~~~

To use :method:`db.collection.update()` with ``multi: false`` on a
sharded collection, you must include an exact match on the ``_id``
field or target a single shard (such as by including the shard key).

When the :method:`db.collection.update()` performs update operations
(and not document replacement operations),
:method:`db.collection.update()` can target multiple shards.

.. seealso:: :method:`~db.collection.findAndModify()`

Replace Document Operations
````````````````````````````

Starting in MongoDB 4.2, replace document operations attempt to target
a single shard, first by using the query filter. If the operation
cannot target a single shard by the query filter, it then attempts to target
by the replacement document.

In earlier versions, the operation attempts to target using the
replacement document.


``upsert`` on a Sharded Collection
``````````````````````````````````

For a :method:`db.collection.update()` operation that includes
``upsert: true`` and is on a sharded collection, you must include the
full shard key in the ``filter``:

- For an update operation.

- For a replace document operation (starting in MongoDB 4.2).


Shard Key Modification
``````````````````````

.. include:: /includes/limits-sharding-shardkey-document-immutable.rst

To use :method:`db.collection.update()` to update the shard key:

- You must specify ``multi: false``.

.. include:: /includes/shard-key-modification-requirements.rst

Transactions
~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-supported-operation.rst

.. include:: /includes/extracts/transactions-usage.rst

Existing Collections and Transactions
`````````````````````````````````````

Inside a transaction, you can specify read/write operations on existing
collections. If the |operation| results in an
upsert, the collection must already exist.

If the operation results in an upsert, the collection must already exist.

Write Concerns and Transactions
````````````````````````````````

.. include:: /includes/extracts/transactions-operations-write-concern.rst

.. |operation| replace:: :method:`db.collection.update()`

.. _update-method-examples:

Examples
--------

.. _example-update-specific-fields:

Update using Update Operator Expressions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To update specific fields in a document, use :ref:`update operators
<update-operators>` in the ``<update>`` parameter.

For example, given a ``books`` collection with the following document:

.. code-block:: javascript

   {
     _id: 1,
     item: "TBD",
     stock: 0,
     info: { publisher: "1111", pages: 430 },
     tags: [ "technology", "computer" ],
     ratings: [ { by: "ijk", rating: 4 }, { by: "lmn", rating: 5 } ],
     reorder: false
   }

The following operation uses:

- the :update:`$inc` operator to increment the ``stock`` field; and

- the :update:`$set` operator to replace the value of the ``item``
  field, the ``publisher`` field in the ``info`` embedded document, the
  ``tags`` field, and the second element in the ``ratings`` array.

.. code-block:: javascript

   db.books.update(
      { _id: 1 },
      {
        $inc: { stock: 5 },
        $set: {
          item: "ABC123",
          "info.publisher": "2222",
          tags: [ "software" ],
          "ratings.1": { by: "xyz", rating: 3 }
        }
      }
   )

The updated document is the following:

.. code-block:: javascript

   {
     "_id" : 1,
     "item" : "ABC123",
     "stock" : 5,
     "info" : { "publisher" : "2222", "pages" : 430 },
     "tags" : [ "software" ],
     "ratings" : [ { "by" : "ijk", "rating" : 4 }, { "by" : "xyz", "rating" : 3 } ],
     "reorder" : false
   }

.. seealso:: :update:`$set`, :update:`$inc`,
   :doc:`/reference/operator/update`,
   :ref:`dot notation <document-dot-notation>`

Remove Fields
~~~~~~~~~~~~~

The following operation uses the :update:`$unset` operator to remove
the ``tags`` field:

.. code-block:: javascript

   db.books.update( { _id: 1 }, { $unset: { tags: 1 } } )

.. seealso:: :update:`$unset`, :update:`$rename`, :doc:`/reference/operator/update`

.. _example-update-replace-fields:

Replace Document
~~~~~~~~~~~~~~~~

Given the following document in the ``books`` collection:

.. code-block:: javascript

   {
     _id: 2,
     item: "XYZ123",
     stock: 15,
     info: { publisher: "5555", pages: 150 },
     tags: [ ],
     ratings: [ { by: "xyz", rating: 5, comment: "ratings and reorder will go away after update"} ],
     reorder: false
   }

The following operation passes an ``<update>`` document that contains
only field and value pairs. The ``<update>`` document completely
replaces the original document except for the ``_id`` field.

.. code-block:: javascript

   db.books.update(
      { item: "XYZ123" },
      {
        item: "XYZ123",
        stock: 10,
        info: { publisher: "2255", pages: 150 },
        tags: [ "baking", "cooking" ]
      }
   )

The updated document contains *only* the fields from the replacement
document and the ``_id`` field. That is, the fields ``ratings`` and
``reorder`` no longer exist in the updated document since the fields
were not in the replacement document.

.. code-block:: javascript

   {
      "_id" : 2,
      "item" : "XYZ123",
      "stock" : 10,
      "info" : { "publisher" : "2255", "pages" : 150 },
      "tags" : [ "baking", "cooking" ]
   }

.. _example-update-multi:

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

To update multiple documents, set the ``multi`` option to ``true``. For
example, the following operation updates all documents where ``stock``
is less than or equal to ``10``:

.. code-block:: javascript

   db.books.update(
      { stock: { $lte: 10 } },
      { $set: { reorder: true } },
      { multi: true }
   )

If the ``reorder`` field does not exist in the matching document(s),
the :update:`$set` operator will add the field with the specified
value. See :update:`$set` for more information.

.. _update-example-agg:

Update with Aggregation Pipeline
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 4.2, the :method:`db.collection.update()` can use
an aggregation pipeline for the update. The pipeline can consist of the
following stages:

.. include:: /includes/list-update-agg-stages.rst

Using the aggregation pipeline allows for a more expressive update
statement, such as expressing conditional updates based on current
field values or updating one field using the value of another field(s).

Example 1
`````````

The following examples uses the aggregation pipeline to modify a field
using the values of the other fields in the document.

Create a ``members`` collection with the following documents:

.. code-block:: javascript

   db.members.insertMany([
      { "_id" : 1, "member" : "abc123", "status" : "A", "points" : 2, "misc1" : "note to self: confirm status", "misc2" : "Need to activate" },
      { "_id" : 2, "member" : "xyz123", "status" : "A", "points" : 60, "misc1" : "reminder: ping me at 100pts", "misc2" : "Some random comment" }
   ])

Assume that instead of separate ``misc1`` and ``misc2`` fields, you
want to gather these into a new ``comments`` field. The following
update operation uses an aggregation pipeline to add the new
``comments`` field and remove the ``misc1`` and ``misc2`` fields for
all documents in the collection.

.. code-block:: javascript

   db.members.update(
      { },
      [
         { $set: { status: "Modified", comments: [ "$misc1", "$misc2" ] } },
         { $unset: [ "misc1", "misc2" ] }
      ],
      { multi: true }
   )

.. note::

   The ``$set`` and ``$unset`` used in the pipeline refers to the
   aggregation stages :pipeline:`$set` and :pipeline:`$unset`
   respectively, and not the update operators :update:`$set` and :update:`$unset`.

First Stage
   The :pipeline:`$set` stage creates a new array field ``comments``
   whose elements are the current content of the ``misc1`` and
   ``misc2`` fields.

Second Stage
   The :pipeline:`$unset` stage removes the ``misc1`` and ``misc2`` fields.

After the command, the collection contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "member" : "abc123", "status" : "Modified", "points" : 2, "comments" : [ "note to self: confirm status", "Need to activate" ] }
   { "_id" : 2, "member" : "xyz123", "status" : "Modified", "points" : 60, "comments" : [ "reminder: ping me at 100pts", "Some random comment" ] }

Example 2
`````````

The aggregation pipeline allows the update to perform conditional
updates based on the current field values as well as use current field
values to calculate a separate field value.

For example, create a ``students3`` collection with the following documents:

.. code-block:: javascript

   db.students3.insert([
      { "_id" : 1, "tests" : [ 95, 92, 90 ] },
      { "_id" : 2, "tests" : [ 94, 88, 90 ] },
      { "_id" : 3, "tests" : [ 70, 75, 82 ] }
   ]);

Using an aggregation pipeline, you can update the documents with the
calculated grade average and letter grade.

.. code-block:: javascript

   db.students3.update(
      { },
      [
        { $set: { average : { $avg: "$tests" } } },
        { $set: { grade: { $switch: {
                              branches: [
                                  { case: { $gte: [ "$average", 90 ] }, then: "A" },
                                  { case: { $gte: [ "$average", 80 ] }, then: "B" },
                                  { case: { $gte: [ "$average", 70 ] }, then: "C" },
                                  { case: { $gte: [ "$average", 60 ] }, then: "D" }
                              ],
                              default: "F"
        } } } }
      ],
      { multi: true }
   )

.. note::

   The ``$set`` used in the pipeline refers to the aggregation stage
   :pipeline:`$set`, and not the update operators :update:`$set`.

First Stage
   The :pipeline:`$set` stage calculates a new field ``average`` based
   on the average of the ``tests`` field. See :group:`$avg` for
   more information on the ``$avg`` aggregation operator.

Second Stage
   The :pipeline:`$set` stage calculates a new field ``grade`` based on
   the ``average`` field calculated in the previous stage. See
   :expression:`$switch` for more information on the ``$switch``
   aggregation operator.

After the command, the collection contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "tests" : [ 95, 92, 90 ], "average" : 92.33333333333333, "grade" : "A" }
   { "_id" : 2, "tests" : [ 94, 88, 90 ], "average" : 90.66666666666667, "grade" : "A" }
   { "_id" : 3, "tests" : [ 70, 75, 82 ], "average" : 75.66666666666667, "grade" : "C" }

.. _example-update-upsert:

Insert a New Document if No Match Exists
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


The following update sets the :ref:`upsert <upsert-parameter>` option
to ``true`` so that :method:`~db.collection.update()` creates a new
document in the ``books`` collection if no document matches the
``<query>`` parameter:

.. code-block:: javascript

   db.books.update(
      { item: "ZZZ135" },
      {
        item: "ZZZ135",
        stock: 5,
        tags: [ "database" ]
      },
      { upsert: true }
   )

If no document matches the ``<query>`` parameter, the update operation
inserts a document with *only* the fields and values of the
``<update>`` document and a new unique ``ObjectId`` for the ``_id``
field:

.. code-block:: javascript

   {
     "_id" : ObjectId("542310906694ce357ad2a1a9"),
     "item" : "ZZZ135",
     "stock" : 5,
     "tags" : [ "database" ]
   }

For more information on ``upsert`` option and the inserted document,
:ref:`upsert-parameter`.

.. _example-update-write-concern:

Override Default Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation on a replica set specifies a :doc:`write
concern </reference/write-concern>` of ``"w: majority"`` with a
``wtimeout`` of 5000 milliseconds such that the method returns after
the write propagates to a majority of the voting replica set members or
the method times out after 5 seconds.

.. include:: /includes/fact-majority-write-concern-change.rst

.. code-block:: javascript

   db.books.update(
      { stock: { $lte: 10 } },
      { $set: { reorder: true } },
      {
        multi: true,
        writeConcern: { w: "majority", wtimeout: 5000 }
      }
   )

Combine the ``upsert`` and ``multi`` Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Given a ``books`` collection that includes the following documents:

.. code-block:: javascript

   {
     _id: 5,
     item: "EFG222",
     stock: 18,
     info: { publisher: "0000", pages: 70 },
     reorder: true
   }
   {
     _id: 6,
     item: "EFG222",
     stock: 15,
     info: { publisher: "1111", pages: 72 },
     reorder: true
   }

The following operation specifies both the ``multi`` option and the
``upsert`` option. If matching documents exist, the operation updates
all matching documents. If no matching documents exist, the operation
inserts a new document.

.. code-block:: javascript

   db.books.update(
      { item: "EFG222" },
      { $set: { reorder: false, tags: [ "literature", "translated" ] } },
      { upsert: true, multi: true }
   )

The operation updates all matching documents and results in the
following:

.. code-block:: javascript

   {
      "_id" : 5,
      "item" : "EFG222",
      "stock" : 18,
      "info" : { "publisher" : "0000", "pages" : 70 },
      "reorder" : false,
      "tags" : [ "literature", "translated" ]
   }
   {
      "_id" : 6,
      "item" : "EFG222",
      "stock" : 15,
      "info" : { "publisher" : "1111", "pages" : 72 },
      "reorder" : false,
      "tags" : [ "literature", "translated" ]
   }

If the collection had *no* matching document, the operation would
result in the insertion of a document using the fields from both the
``<query>`` and the ``<update>`` specifications:

.. code-block:: javascript

   {
      "_id" : ObjectId("5423200e6694ce357ad2a1ac"),
      "item" : "EFG222",
      "reorder" : false,
      "tags" : [ "literature", "translated" ]
   }

For more information on ``upsert`` option and the inserted document,
:ref:`upsert-parameter`.

Specify Collation
~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/collation-versionadded.rst

A collection ``myColl`` has the following documents:

.. code-block:: javascript

   { _id: 1, category: "café", status: "A" }
   { _id: 2, category: "cafe", status: "a" }
   { _id: 3, category: "cafE", status: "a" }

The following operation includes the :ref:`collation <collation>`
option:

.. code-block:: javascript

   db.myColl.update(
      { category: "cafe" },
      { $set: { status: "Updated" } },
      { collation: { locale: "fr", strength: 1 } }
   );

.. _update-arrayFilters:

Specify ``arrayFilters`` for an Array Update Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/arrayFilters-blurb.rst

Update Elements Match ``arrayFilters`` Criteria
```````````````````````````````````````````````

Create a collection ``students`` with the following documents:

.. cssclass:: copyable-code

.. code-block:: javascript

   db.students.insert([
      { "_id" : 1, "grades" : [ 95, 92, 90 ] },
      { "_id" : 2, "grades" : [ 98, 100, 102 ] },
      { "_id" : 3, "grades" : [ 95, 110, 100 ] }
   ])

To update all elements that are greater than or equal to ``100`` in the
``grades`` array, use the filtered positional operator
:update:`$[\<identifier\>]` with the ``arrayFilters`` option:

.. cssclass:: copyable-code

.. code-block:: javascript

   db.students.update(
      { grades: { $gte: 100 } },
      { $set: { "grades.$[element]" : 100 } },
      {
        multi: true,
        arrayFilters: [ { "element": { $gte: 100 } } ]
      }
   )

After the operation, the collection contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "grades" : [ 95, 92, 90 ] }
   { "_id" : 2, "grades" : [ 98, 100, 100 ] }
   { "_id" : 3, "grades" : [ 95, 100, 100 ] }

Update Specific Elements of an Array of Documents
`````````````````````````````````````````````````

Consider a collection ``students2`` with the following documents:

.. code-block:: javascript

   {
      "_id" : 1,
      "grades" : [
         { "grade" : 80, "mean" : 75, "std" : 6 },
         { "grade" : 85, "mean" : 90, "std" : 4 },
         { "grade" : 85, "mean" : 85, "std" : 6 }
      ]
   }
   {
      "_id" : 2,
      "grades" : [
         { "grade" : 90, "mean" : 75, "std" : 6 },
         { "grade" : 87, "mean" : 90, "std" : 3 },
         { "grade" : 85, "mean" : 85, "std" : 4 }
      ]
   }

To modify the value of the ``mean`` field for all elements in the
``grades`` array where the grade is greater than or equal to ``85``,
use the filtered positional operator :update:`$[\<identifier\>]` with
the ``arrayFilters``:

.. cssclass:: copyable-code

.. code-block:: javascript

   db.students2.update(
      { },
      { $set: { "grades.$[elem].mean" : 100 } },
      {
        multi: true,
        arrayFilters: [ { "elem.grade": { $gte: 85 } } ]
      }
   )

After the operation, the collection has the following documents:

.. code-block:: javascript

   {
      "_id" : 1,
      "grades" : [
         { "grade" : 80, "mean" : 75, "std" : 6 },
         { "grade" : 85, "mean" : 100, "std" : 4 },
         { "grade" : 85, "mean" : 100, "std" : 6 }
      ]
   }
   {
      "_id" : 2,
      "grades" : [
         { "grade" : 90, "mean" : 100, "std" : 6 },
         { "grade" : 87, "mean" : 100, "std" : 3 },
         { "grade" : 85, "mean" : 100, "std" : 4 }
      ]
   }

.. _ex-update-hint:

Specify ``hint`` for Update Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 4.2

Create a sample ``members`` collection with the following documents:

.. code-block:: javascript

   db.members.insertMany([
      { "_id" : 1, "member" : "abc123", "status" : "P", "points" :  0,  "misc1" : null, "misc2" : null },
      { "_id" : 2, "member" : "xyz123", "status" : "A", "points" : 60,  "misc1" : "reminder: ping me at 100pts", "misc2" : "Some random comment" },
      { "_id" : 3, "member" : "lmn123", "status" : "P", "points" :  0,  "misc1" : null, "misc2" : null },
      { "_id" : 4, "member" : "pqr123", "status" : "D", "points" : 20,  "misc1" : "Deactivated", "misc2" : null },
      { "_id" : 5, "member" : "ijk123", "status" : "P", "points" :  0,  "misc1" : null, "misc2" : null },
      { "_id" : 6, "member" : "cde123", "status" : "A", "points" : 86,  "misc1" : "reminder: ping me at 100pts", "misc2" : "Some random comment" }
   ])

Create the following indexes on the collection:

.. code-block:: javascript

   db.members.createIndex( { status: 1 } )
   db.members.createIndex( { points: 1 } )

The following update operation explicitly hints to use the index ``{
status: 1 }``:

.. note::

   If you specify an index that does not exist, the operation errors.

.. code-block:: javascript

   db.members.update(
      { points: { $lte: 20 }, status: "P" }, 
      { $set: { misc1: "Need to activate" } },
      { multi: true, hint: { status: 1 } }
   )

The update command returns the following:

.. code-block:: javascript

   WriteResult({ "nMatched" : 3, "nUpserted" : 0, "nModified" : 3 })

To see the index used, run :dbcommand:`explain` on the operation:

.. code-block:: javascript

   db.members.explain().update(
      { "points": { $lte: 20 }, "status": "P" }, 
      { $set: { "misc1": "Need to activate" } },
      { multi: true, hint: { status: 1 } }
   )

The :method:`db.collection.explain().update() <db.collection.explain>`
does not modify the documents.

.. _writeresults-update:

WriteResult
-----------

.. versionchanged:: 2.6

Successful Results
~~~~~~~~~~~~~~~~~~

The :method:`~db.collection.update()` method returns a
:method:`WriteResult` object that contains the status of the operation.
Upon success, the :method:`WriteResult` object contains the number of
documents that matched the query condition, the number of documents
inserted by the update, and the number of documents modified:

.. code-block:: javascript

   WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

.. see:: :data:`WriteResult.nMatched`, :data:`WriteResult.nUpserted`,
   :data:`WriteResult.nModified`

Write Concern Errors
~~~~~~~~~~~~~~~~~~~~

If the :method:`~db.collection.update()` method encounters write
concern errors, the results include the
:data:`WriteResult.writeConcernError` field:

.. code-block:: javascript

   WriteResult({
      "nMatched" : 1,
      "nUpserted" : 0,
      "nModified" : 1,
      "writeConcernError" : {
         "code" : 64,
         "errmsg" : "waiting for replication timed out at shard-a"
      }
   })

.. seealso:: :method:`WriteResult.hasWriteConcernError()`

Errors Unrelated to Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the :method:`~db.collection.update()` method encounters a non-write
concern error, the results include the :data:`WriteResult.writeError`
field:

.. code-block:: javascript

   WriteResult({
      "nMatched" : 0,
      "nUpserted" : 0,
      "nModified" : 0,
      "writeError" : {
         "code" : 7,
         "errmsg" : "could not contact primary for replica set shard-a"
      }
   })

.. seealso:: :method:`WriteResult.hasWriteError()`
