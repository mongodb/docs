.. _laravel-vector-search:

===================
Atlas Vector Search
===================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, semantic, text, embeddings

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to perform searches on your documents
by using the Atlas Vector Search feature. {+odm-long+} provides an API to
perform Atlas Vector Search queries directly with your models. This guide
describes how to create Atlas Vector Search indexes and provides
examples of how to use the {+odm-short+} to perform searches.

.. note:: Deployment Compatibility

   You can use the Atlas Vector Search feature only when
   you connect to MongoDB Atlas clusters. This feature is not
   available for self-managed deployments.

To learn more about Atlas Vector Search, see the :atlas:`Overview
</atlas-vector-search/vector-search-overview/>` in the 
Atlas documentation. The Atlas Vector Search API internally uses the
``$vectorSearch`` aggregation operator to perform queries. To learn more about
this operator, see the :atlas:`$vectorSearch
</atlas-vector-search/vector-search-stage/#syntax>` reference in the Atlas
documentation.

.. note::
   
   You might not be able to use the methods described in
   this guide for every type of Atlas Vector Search query.
   For more complex use cases, create an aggregation pipeline by using
   the :ref:`laravel-aggregation-builder`.
   
   To perform advanced full-text searches on your documents, you can use the
   {+odm-long+} Atlas Search API. To learn about this feature, see
   the :ref:`laravel-atlas-search` guide.

.. _laravel-avs-index:

Create an Atlas Vector Search Index
-----------------------------------

You can create an Atlas Search index in either of the following ways:

- Call the ``create()`` method on the ``Schema`` facade and pass the
  ``vectorSearchIndex()`` helper method with index creation details. To learn
  more about this strategy, see the
  :ref:`laravel-schema-builder-atlas-idx` section of the Schema Builder guide.
  
- Access a collection, then call the
  :phpmethod:`createSearchIndex() <phpmethod.MongoDB\\Collection::createSearchIndex()>`
  method from the {+php-library+}. You must specify the ``type`` option as
  ``'vectorSearch'``, as shown in the following code:

  .. code-block:: php
     
     $collection = DB::connection('mongodb')->getCollection('movies');
     
     $collection->createSearchIndex([
         'fields' => [
             [
                 'type' => 'vector',
                 'numDimensions' => 4,
                 'path' => 'embeddings',
                 'similarity' => 'cosine'
             ],
         ],
     ], ['name' => 'vector_index', 'type' => 'vectorSearch']);

Perform Queries
---------------

In this section, you can learn how to use the Atlas Vector Search API in
the {+odm-short+}. The {+odm-short+} provides the ``vectorSearch()``
method as a query builder method and as an Eloquent model method. You
can use the ``vectorSearch()`` method to run Atlas Vector Search queries
on documents in your collections.

You must pass the following parameters to the ``vectorSearch()`` method:

.. list-table::
   :header-rows: 1

   * - Parameter
     - Type
     - Description

   * - ``index``
     - ``string``
     - Name of the vector search index

   * - ``path``
     - ``string``
     - Field that stores vector embeddings
   
   * - ``queryVector``
     - ``array``
     - Vector representation of your query
   
   * - ``limit``
     - ``int``
     - Number of results to return

The following code uses the ``vector`` index created in the preceding
:ref:`laravel-avs-index` section to perform an Atlas Vector Search query on the
``movies`` collection:

.. io-code-block::
   :copyable: true

   .. input::
      :language: php

      $movies = Book::vectorSearch(
          index: 'vector',
          path: 'vector_embeddings',
          // Vector representation of the query `coming of age`
          queryVector: [-0.0016261312, -0.028070757, ...],
          limit: 3,
      );

   .. output::
      :language: json
      :visible: false

      [
         { "title": "Sunrising",
           "plot": "A shy teenager discovers confidence and new friendships during a transformative summer camp experience."
         },
         { "title": "Last Semester",
           "plot": "High school friends navigate love, identity, and unexpected challenges before graduating together."
         }
      ]

You can use the ``vectorSearch()`` method to perform many types of Atlas
Search queries. Depending on your desired query, you can pass the
following optional parameters to ``vectorSearch()``:

.. list-table::
   :header-rows: 1

   * - Optional Parameter
     - Type
     - Description
     - Default Value

   * - ``exact``
     - ``bool``
     - Specifies whether to run an Exact Nearest Neighbor (``true``) or
       Approximate Nearest Neighbor (``false``) search
     - ``false``

   * - ``filter``
     - ``QueryInterface`` or ``array``
     - Specifies a pre-filter for documents to search on
     - no filtering

   * - ``numCandidates``
     - ``int`` or ``null``
     - Specifies the number of nearest neighbors to use during the
       search
     - ``null``

.. note::

   To construct a ``QueryInterface`` instance, you must import the
   ``MongoDB\Builder\Query`` class into your application.

To learn more about these parameters, see the :atlas:`Fields
</atlas-vector-search/vector-search-stage/#fields>` section of the
``$vectorSearch`` operator reference in the Atlas documentation.
