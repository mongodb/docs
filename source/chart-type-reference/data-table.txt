.. _data-table-ref:

==========
Data Table
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Data tables represent data in a tabular view, similar to a
`spreadsheet <https://en.wikipedia.org/wiki/Spreadsheet>`_. Data tables
split your data into categories, with each categorization field
represented in the table columns. The unique categories are represented
as the table rows, and |charts-short| displays aggregated values in the
table body based on the fields selected.

Data Table Encoding Channels
----------------------------

Data tables use the following :ref:`encoding channels
<encoding-channels>`:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Encoding Channel
     - Description

   * - Groups
     - The :guilabel:`category` encoding channels. |charts-short|
       creates a row in the table for each unique value in this field.
       When multiple :guilabel:`Groups` are added to the chart,
       |charts-short| creates a row for each unique combination of
       group fields.

       .. note::

          The :guilabel:`Groups` encoding channel supports
          :ref:`binning <charts-bin-data>` for numeric and date fields.

   * - Values
     - The :guilabel:`aggregation` encoding channels. |charts-short|
       creates a column for each field mapped into the
       :guilabel:`Values` channel. |charts-short|
       aggregates the encoded :guilabel:`Values` fields using the
       selected aggregation methods and populates the grid cells with
       the aggregated value for the corresponding :guilabel:`Group`.

   * - Dynamic Columns
     - A second :guilabel:`Category` encoding channel. When you use
       :guilabel:`Dynamic Columns`, |charts-short| creates table
       columns based on the unique values retrieved from the field
       mapped into the :guilabel:`Dynamic Columns` channel.
       |charts-short| uses the field mapped into the :guilabel:`Values`
       channel to populate the grid cells, aggregated against both the
       :guilabel:`Group` and :guilabel:`Dynamic Column` categories.

       You cannot apply dynamic columns to a table if you have selected
       multiple :guilabel:`Value` encoding channels.

       For an example of how to use dynamic columns, see the following
       :ref:`example <dynamic-col-example>`.

       .. note::

          The :guilabel:`Dynamic Columns` encoding channel supports
          :ref:`binning <charts-bin-data>` for numeric and date fields.

Use Cases
---------

Data tables have a wide variety of applications, but are most useful
when comparing multiple categories of calculated values. Visual charts
struggle to display multiple categories of data without losing their
audience. Data tables present data with multiple categories such that
you can see which value applies to which slice of data.

Data tables are also useful for showing precise data values, rather
than comparing approximate values. Comparing approximate values is
best done with a visual representation, instead of text.

You can use data tables to show:

- The total cost to rent an apartment, including rent, cleaning fees,
  and security deposits organized by location and total area of the
  unit.

- Time spent working out and total calories burned during various
  exercises categorized by the type of exercise and time of day the
  exercised was performed.

Examples
--------

The following data table examples visualize data from a hospitality
and property service. Each document in the collection
represents a unit available for rent and includes information such as
the monthly unit price, neighborhood, and property type.

Basic Data Table
~~~~~~~~~~~~~~~~

The following data table categorizes the rental listings by property
type and location, and shows the average review rating and average
weekly rent for each group:

.. figure:: /images/charts/data-table-basic-example.png
   :figwidth: 750px
   :alt: Basic Data Table Example

The :guilabel:`Group` encoding channels of ``property_type`` and
``suburb`` create a row in the data table for each unique combination
of those two fields in the data.

The :guilabel:`Values` of ``review_scores_rating`` and
``weekly_price`` each add a column to the table. For both values, we
average the rating and price for each ``property type`` and ``suburb``
using :manual:`aggregation </aggregation>` and display the results in
the data table.

The results are formatted using the Customization tab to display the
mean weekly price as currency and round the mean review score to an
appropriate number of decimal places.

.. note::

   We have applied a :ref:`filter <charts-filter-documents>` to this
   chart to only display listings which have a ``weekly_price``
   associated with them.

.. _dynamic-col-example:

Data Table with Dynamic Columns
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following data table displays nearly the same data as the previous
basic data table example. In this example, instead of making
``property_type`` and ``suburb`` :guilabel:`Groups`, ``property_type``
field is now a :guilabel:`Dynamic Column`:

.. figure:: /images/charts/data-table-dynamic-example.png
   :figwidth: 750px
   :alt: Basic Data Table Example

Now, rather than having two category columns in the table, the
``property_types`` become column titles. We are still aggregating
the mean of the ``weekly_price`` based on each combination of
``property_type`` and ``suburb``.

The results are formatted using the Customization tab to display the
mean weekly price as currency.

.. note::

   Blank table cells indicate that there are no documents that match
   the corresponding intersection of ``property_type`` and ``suburb``.

Sort and Resize Data Table Columns
----------------------------------

Users with the viewer and author :ref:`roles <dashboard-roles>`
on data tables can sort and resize data table columns. You
can sort and resize columns either in the
:doc:`dashboard </dashboards>` or the :doc:`Chart Builder
</build-charts>`.

Behavior
~~~~~~~~

When a viewer or author sorts or resizes columns from the
:doc:`dashboard </dashboards>`, the changes do not persist as part of
the chart definition. In this case, the chart returns to its
original state once the chart or corresponding dashboard is
refreshed.

To save the changes as part of the chart definition, an author must
make the changes in the Chart Builder. All |charts-short| users will
see the new column sorting and sizing.

Procedure
~~~~~~~~~

Sort Columns
````````````

To sort a data table column, click on its header. With each click, |charts| cycles between sorting the column in
ascending order, descending order, and the default chart sorting order.

To sort by multiple columns, Shift + Click on the additional columns
by which you wish to sort. |charts-short| applies the sort order in
the same order you select additional columns. |charts-short| displays
numbers in the column headers indicating the order in which the
sorting is applied.

Resize Columns
``````````````

To resize a column, click the the column divider and drag until the
column reaches the desired width.

To return a column to its default width, double-click on the column
divider.

Reorder Data Table Columns
--------------------------

Users with the author and owner :ref:`roles <dashboard-roles>`
on data tables can reorder data table columns in the :doc:`Chart
Builder </build-charts>`.

To reorder data table columns, click and drag column headers to the
desired order.

When an author reorders data table columns and saves the
chart, |charts| saves the specified order as part of the chart
definition. All |charts-short| users will see the new column order.

.. note::

   Data table :ref:`authors <dashboard-roles>` can also reorder
   columns by modifying the order of the respective column
   :ref:`encoding channels <encoding-channels>`. |charts| renders data
   table columns in the same order you specify the column encoding
   channels. To modify the order of the encoding channels, drag and
   drop one field on top of another to swap their order.

Considerations
~~~~~~~~~~~~~~

- You can only reorder columns within their respective table sections,
  being :guilabel:`Groups` or :guilabel:`Values`.

- You cannot reorder :guilabel:`Dynamic Columns`.

Toggle Row and Column Totals
----------------------------

By default, data tables include a Column Totals row, which consists of
a row of values with sum totals for each column. Optionally, you can
enable a Row Totals column, which consists of a column of
values containing sum totals for each row.

The following image shows a detail from a data table with row and
column totals enabled and added text indicating which is which:

.. figure:: /images/charts/row-column-totals.png
   :figwidth: 541px
   :alt: Data table with row and column totals

To toggle the totals on and off:

1. Navigate to the :guilabel:`Customization` tab in the
   :doc:`Chart Builder </build-charts>`.

#. In the :guilabel:`General Customization` section, set the
   :guilabel:`Column Totals` and :guilabel:`Row Totals` toggles
   to the desired settings.

For a complete list of Chart Customization options, see :doc:`Customize
Charts </customize-charts/>`.