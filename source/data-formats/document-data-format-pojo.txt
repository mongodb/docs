.. _fundamentals-pojos:

===========================
Document Data Format: POJOs
===========================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: java sync, code example, custom class, data model

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to store and retrieve data modeled by
plain old Java objects, or POJOs. POJOs are often used for data
encapsulation, which is the practice of separating business logic from
data representation.

.. tip::
   
   To learn more about POJOs, see the :wikipedia:`Plain old Java object
   <w/index.php?title=Plain_old_Java_object&oldid=1143317019>` Wikipedia article.

The example in this guide demonstrates how to perform the following
tasks:

- Configure the driver to serialize and deserialize POJOs
- Perform CRUD operations that use data modeled by POJOs

.. _fundamentals-example-pojo:

Example POJO
------------

The sections in this guide use the following sample POJO class,
which describes the characteristics of flowers:

.. literalinclude:: /includes/fundamentals/code-snippets/POJO-class-example.java
   :language: java
   :dedent:
   :start-after: start-flower-class
   :end-before: end-flower-class

When defining a POJO to store and retrieve data within MongoDB,
use the following guidelines:

- The POJO class cannot implement interfaces or extend classes from a
  framework.
- Include all the fields for which you want to store and retrieve data, and
  make sure they are not marked as ``static`` or ``transient``.
- If you include public getter or setter methods by using the
  `JavaBean naming conventions <https://docs.oracle.com/javase/tutorial/javabeans/writing/properties.html>`__
  in your POJO, the driver calls them when serializing or deserializing data.
  If you omit the getter or setter methods for a public property field, the
  driver accesses or assigns them directly.

Configure the Driver for POJOs
------------------------------

To configure the driver to use POJOs, you must specify the following
components:

- ``PojoCodecProvider`` instance that has
  :ref:`codecs <fundamentals-codecs>` that define how to
  encode and decode the data between the POJO format and BSON. The
  provider also specifies which POJO classes or packages that the codecs
  apply to.
- ``CodecRegistry`` instance that contains the codecs and other related information.
- ``MongoDatabase`` or ``MongoCollection`` instance that is configured to use the
  ``CodecRegistry``.
- ``MongoCollection`` instance that is created with the POJO document class
  bound to the ``TDocument`` generic type.

Perform the following steps to meet the configuration requirements
defined in the preceding section:

1. Configure the ``PojoCodecProvider``. In this example, we use the ``automatic(true)``
   setting of the ``PojoCodecProvider.Builder`` to apply the codecs to
   any class and its properties.

   .. literalinclude:: /includes/fundamentals/code-snippets/POJO-crud.java
      :language: java
      :dedent:
      :start-after: start-codec-provider
      :end-before: end-codec-provider

   .. note::

      Codec providers also contain other objects such as ``ClassModel`` and
      ``Convention`` instances that further define serialization behavior.
      For more information about codec providers and customization, see the guide
      on :ref:`POJO Customization <fundamentals-pojo-customization>`.

#. Add the ``PojoCodecProvider`` instance to a ``CodecRegistry``. The
   ``CodecRegistry`` allows you to specify one or more codec providers to
   encode the POJO data. In this example, we call the following methods:

   - ``fromRegistries()`` to combine multiple ``CodecRegistry``
     instances into one instance
   - ``getDefaultCodecRegistry()`` to retrieve a ``CodecRegistry`` instance from a list of codec providers
   - ``fromProviders()`` to create a ``CodecRegistry`` instance from the ``PojoCodecProvider``

   .. _get-default-codec-registry-example:

   The following code shows how to instantiate the ``CodecRegistry``:

   .. code-block:: java

      // Include the following static imports before your class definition
      import static com.mongodb.MongoClientSettings.getDefaultCodecRegistry;
      import static org.bson.codecs.configuration.CodecRegistries.fromProviders;
      import static org.bson.codecs.configuration.CodecRegistries.fromRegistries;

      ...

      CodecRegistry pojoCodecRegistry = fromRegistries(getDefaultCodecRegistry(), fromProviders(pojoCodecProvider));

#. Configure the ``MongoDatabase`` or ``MongoCollection`` instance to use the
   codecs in the ``CodecRegistry``. You can configure either a database
   or collection to specify the codecs.

   In this example, we set the ``CodecRegistry`` on a ``MongoDatabase`` called
   ``sample_pojos`` by using the ``withCodecRegistry()`` method:

   .. literalinclude:: /includes/fundamentals/code-snippets/POJO-crud.java
      :language: java
      :dedent:
      :start-after: start-connect-db
      :end-before: end-connect-db

#. Pass your POJO class to your call to ``getCollection()`` as the
   document class parameter and specify it as the type argument of your
   ``MongoCollection`` instance, as shown in the following code:

   .. literalinclude:: /includes/fundamentals/code-snippets/POJO-crud.java
      :language: java
      :dedent:
      :start-after: start-get-coll
      :end-before: end-get-coll

Perform CRUD Operations
~~~~~~~~~~~~~~~~~~~~~~~

Once you have configured the ``MongoCollection`` instance to use the
``Flower`` POJO, you can perform CRUD operations on data modeled by the POJO.

This example demonstrates how to perform the following operations by
using the ``Flower`` POJO:

- Insert instances of ``Flower`` into the ``flowers`` collection
- Update a document in the collection
- Delete a document in the collection
- Find and print all documents in the collection

.. literalinclude:: /includes/fundamentals/code-snippets/POJO-crud.java
   :language: java
   :dedent:
   :start-after: start-crud-ops
   :end-before: end-crud-ops

The example prints the following output:

.. code-block:: none
   :copyable: false

   [
   Flower {
       id: 65b178ffa38ac42044ca1573
       name: daisy
       colors: [purple, white, pink]
       isBlooming: true
       height: 21.1
   }, 
   Flower {
       id: 65b178ffa38ac42044ca1574
       name: peony
       colors: [red, green]
       isBlooming: false
       height: 19.2
   }]

.. note::

   By default, the ``PojoCodecProvider`` omits fields in your POJO that are
   set to ``null``. For more information about how to specify this behavior, see
   the :ref:`POJO Customization <fundamentals-pojo-customization>` guide.

For more information about the methods and classes mentioned in this section,
see the following API documentation:

- `CodecRegistry <{+api+}/apidocs/bson/org/bson/codecs/configuration/CodecRegistry.html>`__
- `TDocument <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html>`__
- `PojoCodecProvider <{+api+}/apidocs/bson/org/bson/codecs/pojo/PojoCodecProvider.html>`__
- `automatic(true) <{+api+}/apidocs/bson/org/bson/codecs/pojo/PojoCodecProvider.Builder.html#automatic(boolean)>`__
- `PojoCodecProvider.Builder <{+api+}/apidocs/bson/org/bson/codecs/pojo/PojoCodecProvider.Builder.html>`__
- `fromRegistries() <{+api+}/apidocs/bson/org/bson/codecs/configuration/CodecRegistries.html#fromRegistries(org.bson.codecs.configuration.CodecRegistry...)>`__
- `getDefaultCodecRegistry() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.html?is-external=true#getDefaultCodecRegistry()>`__
- `fromProviders() <{+api+}/apidocs/bson/org/bson/codecs/configuration/CodecRegistries.html#fromProviders(org.bson.codecs.configuration.CodecProvider...)>`__

Summary
-------

This guide describes how to convert data between BSON and the POJO format
by performing the following tasks:

- Instantiate a ``PojoCodecProvider`` which contains codecs that define how to
  encode and decode data between BSON and the POJO fields.
- Specify the **automatic** conversion behavior for the ``PojoCodecProvider``
  to apply the ``Codecs`` to any class and its properties.
- Add the ``PojoCodecProvider`` to a ``CodecRegistry``, and specify the
  registry on an instance of a ``MongoDatabase`` or ``MongoCollection``.
- Perform CRUD operations that use the sample POJO class.