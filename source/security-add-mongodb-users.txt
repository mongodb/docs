.. _mongodb-users:

========================
Configure Database Users
========================

.. default-domain:: mongodb

.. meta::
   :keywords: x509

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Create database users to provide clients access to the {+database-deployments+} in your
project. A database user's access is determined by the roles assigned
to the user. When you create a database user, the user is added to all
{+database-deployments+} in your |service| project.

Database users are separate from |service| users. Database users have
access to MongoDB databases, while |service| users have access to the
|service| application itself. |service| supports creating temporary
database users that automatically expire within a user-configurable
7-day period.

.. include:: /includes/fact-user-auditing.rst

The available |service|
:ref:`database user privileges <atlas-user-privileges>` support
a subset of MongoDB commands. See :ref:`paid-tier-command-limitations`
for more information.

.. include:: /includes/fact-database-user-limits.rst

.. important::

   |service| rolls back any user modifications not made through the UI
   or :doc:`API </reference/api/database-users>`. You must use the
   |service| UI or API to add, modify, or delete database users on
   |service| {+database-deployments+}.

Database User Authentication
----------------------------

|service| offers the following forms of authentication for database users:

.. tabs::

   tabs:
   - id: scram
     name: Password Authentication
     content: |
       :ref:`SCRAM <authentication-scram>` is MongoDB's
       default authentication method. SCRAM requires a password for
       each user.

       The :ref:`authentication database <user-authentication-database>` for
       SCRAM-authenticated users is the ``admin`` database.

   - id: x509
     name: X.509 Certificates
     content: |
       :manual:`X.509 Certificates </core/security-x.509/>`
       allow passwordless authentication by using a trusted certificate.
  
       The :ref:`authentication database <user-authentication-database>` for
       X.509-authenticated users is the ``$external`` database.

       If you :ref:`enable LDAP authorization 
       <ldaps-authentication-authorization>`, you can't connect to your
       {+database-deployments+} with users that authenticate with an
       |service|-managed X.509 certificate. To enable |ldap| and
       connecting to your {+database-deployments+} with X.509 users, see
       :ref:`self-managed-x509`.
  
   - id: aws-iam
     name: AWS IAM Authentication
     content: |
 
       You can create a database user which uses an `AWS IAM
       <https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html>`__
       user :abbr:`ARN (Amazon Resource Name)` for authentication.
  
       The :ref:`authentication database <user-authentication-database>` for
       AWS IAM-authenticated users is the ``$external`` database.
  
       AWS IAM authentication is available only on {+database-deployments+} which use MongoDB
       version 4.4 and higher.

.. _add-mongodb-users:

Add Database Users
------------------

A project can have users with different authentication methods.

You cannot change a user's authentication method after creating that
user. To use an alternative authentication method, you must create a
new user.

Select an authentication mechanism and follow the steps to create a new
database user.

.. tabs::

   tabs:
   - id: scram
     name: Password Authentication
     content: |

       .. include:: /includes/steps/add-scram-user.rst

   - id: x509
     name: X.509 Certificates
     content: |

       .. include:: /includes/steps/add-x509-user.rst

   - id: aws-iam
     name: AWS IAM Authentication
     content: |

       .. note::

          AWS IAM authentication is available only on {+database-deployments+} which use
          MongoDB version 4.4 and higher.

       .. include:: /includes/steps/add-aws-iam-user.rst

       AWS IAM Connection String Example
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

       Connecting to |service| using AWS IAM authentication with the
       {+mongosh+} requires shell version v0.9.0 or higher.

       - Use your `AWS IAM credentials
         <https://console.aws.amazon.com/iam/home?region=us-west-2#/security_credentials>`__,
         with your access key ID as your username and your secret key
         as your password.

       - The ``authSource`` query parameter is ``$external``,
         URL-encoded as ``%24external``.

       - The ``authMechanism`` query parameter is ``MONGODB-AWS``.

       Example:

       .. code-block:: sh

          mongosh "mongodb+srv://<atlas-host-name>/test?authSource=%24external&authMechanism=MONGODB-AWS" \
            --username <access-key-id> --password <secret-key>

You can also add database users through the |service| API. See
:doc:`/reference/api/database-users-create-a-user`.

Modify Database Users
---------------------

To modify existing users for an |service| project:

#. In the :guilabel:`Security` section in the left navigation,
   click :guilabel:`Database Access`. The :guilabel:`Database Users` tab
   displays.

#. Click :icon-fa4:`pencil`
   :guilabel:`Edit` for the user you want to modify.
   You can modify the privileges and authentication details assigned to
   the user. You cannot modify the authentication method.

   - For SCRAM authenticated users, you can edit a user's password.

   - For X.509 certificate authenticated users, you can download a new
     certificate.

   - For AWS IAM users, you can only modify database access privileges.

   For temporary users, you can also modify the time
   period the user exists or make the user a permanent user,
   provided the user's expiration date has not already passed.

   .. note::

      You cannot change a permanent user into a temporary user. If you
      change a temporary user into a permanent user, you cannot make it
      temporary again.

#. Click :guilabel:`Update User` to save the changes.

You can also modify existing users through the |service| API. See
:doc:`/reference/api/database-users-update-a-user`.

Delete Database Users
---------------------

To delete existing users for an |service| project:

#. In the :guilabel:`Security` section in the left navigation, click
   :guilabel:`Database Access`. The :guilabel:`Database Users` tab
   displays.

#. Click :icon-fa4:`trash-o` :guilabel:`Delete` next to the user you
   want to delete.

#. Click :guilabel:`Delete` again to confirm.

You can also delete existing users through the |service| API. See
:doc:`/reference/api/database-users-delete-a-user`.

.. _atlas-user-privileges:

Database User Privileges
------------------------

The following table describes the Database User Privileges and the
MongoDB :manual:`Built-in Roles </core/security-built-in-roles>` or
:manual:`privilege actions </reference/privilege-actions>` they
represent.

.. note:: Protected MongoDB Database Namespaces

   The following databases are read-only for *all* users, including
   those with the :atlasrole:`atlasAdmin` or :authrole:`clusterMonitor` 
   role.

   - ``admin``
   - ``local``
   - ``config``

   :atlasrole:`atlasAdmin` has the :authaction:`update` privilege on
   the ``config.settings`` collection to manage the balancer.

.. list-table::
   :header-rows: 1

   * - Database User Privilege
     - MongoDB Role
     - Inherited Roles or Privilege Actions

   * - .. atlasrole:: Atlas admin
     - .. atlasrole:: atlasAdmin
     -
       - :authrole:`readWriteAnyDatabase`
       - :authrole:`readAnyDatabase`
       - :authrole:`dbAdminAnyDatabase`
       - :authrole:`clusterMonitor`
       - :authaction:`cleanupOrphaned`
       - :authaction:`enableSharding`
       - :authaction:`flushRouterConfig`
       - :authaction:`moveChunk`
       - :authaction:`splitChunk`
       - :authaction:`viewUser`

   * - .. atlasrole:: Read and write to any database
     - .. atlasrole:: readWriteAnyDatabase
     -
       - :authrole:`readWriteAnyDatabase`

   * - .. atlasrole:: Only read any database
     - .. atlasrole:: readAnyDatabase
     -
       - :authrole:`readAnyDatabase`

To learn more about on common commands that |service| doesn't support
with the current |service| user privileges, see
:ref:`paid-tier-command-limitations`

.. toctree::
  :titlesonly:
  :hidden:

  /security/passwordless-authentication
