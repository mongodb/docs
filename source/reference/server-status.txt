:orphan:

====================
Server Status Output
====================

.. default-domain:: mongodb

This document provides a quick overview and example of the
:dbcommand:`serverStatus` command. The helper :method:`db.serverStatus()`
in the :program:`mongo` shell provides access to this output. For full
documentation of the content of this output, see
:doc:`/reference/command/serverStatus`.

.. .. When adding status fields to this document, make sure that the
   ``docs/source/reference/command/serverStatus.txt`` document also reflects
   those changes.

.. note::

   The fields included in this output vary slightly depending on the
   version of MongoDB, underlying operating system platform, and the
   kind of node, including :program:`mongos`, :program:`mongod` or
   :term:`replica set` member.

.. _server-status-example-instance-information:

The :ref:`server-status-instance-information` section displays
information regarding the specific :program:`mongod` and
:program:`mongos` and its state.

.. code-block:: javascript

   {
           "host" : "<hostname>",
           "version" : "<version>",
           "process" : "<mongod|mongos>",
           "pid" : <num>,
           "uptime" : <num>,
           "uptimeMillis" : <num>,
           "uptimeEstimate" : <num>,
           "localTime" : ISODate(""),

.. _server-status-example-locks:

The :ref:`server-status-locks` section reports data that reflect the
state and use of both global (i.e. ``.``) and database specific locks:

.. code-block:: javascript

           "locks" : {
                   "." : {
                           "timeLockedMicros" : {
                                   "R" : <num>,
                                   "W" : <num>
                           },
                           "timeAcquiringMicros" : {
                                   "R" : <num>,
                                   "W" : <num>
                           }
                   },
                   "admin" : {
                           "timeLockedMicros" : {
                                   "r" : <num>,
                                   "w" : <num>
                           },
                           "timeAcquiringMicros" : {
                                   "r" : <num>,
                                   "w" : <num>
                           }
                   },
                   "local" : {
                           "timeLockedMicros" : {
                                   "r" : <num>,
                                   "w" : <num>
                           },
                           "timeAcquiringMicros" : {
                                   "r" : <num>,
                                   "w" : <num>
                           }
                   },
                   "<database>" : {
                           "timeLockedMicros" : {
                                   "r" : <num>,
                                   "w" : <num>
                           },
                           "timeAcquiringMicros" : {
                                   "r" : <num>,
                                   "w" : <num>
                           }
                   }
           },

.. _server-status-example-globallock:

The :ref:`server-status-globallock` field reports on MongoDB's
global system lock. In most cases the :ref:`locks <locks>` document
provides more fine grained data that reflects lock use:

.. code-block:: javascript

           "globalLock" : {
                   "totalTime" : <num>,
                   "lockTime" : <num>,
                   "currentQueue" : {
                           "total" : <num>,
                           "readers" : <num>,
                           "writers" : <num>
                   },
                   "activeClients" : {
                           "total" : <num>,
                           "readers" : <num>,
                           "writers" : <num>
                   }
           },

.. _server-status-example-memory:

The :ref:`server-status-memory` field reports on MongoDB's
current memory use:

.. code-block:: javascript

           "mem" : {
                   "bits" : <num>,
                   "resident" : <num>,
                   "virtual" : <num>,
                   "supported" : <boolean>,
                   "mapped" : <num>,
                   "mappedWithJournal" : <num>
           },

.. _server-status-example-connections:

The :ref:`server-status-connections` field reports on MongoDB's
current number of open connections:

.. versionchanged:: 2.4
   The :data:`~serverStatus.connections.totalCreated` field.

.. code-block:: javascript

           "connections" : {
                   "current" : <num>,
                   "available" : <num>,
                   "totalCreated" : NumberLong(<num>)

           },

.. _server-status-example-extrainfo:

The fields in the :ref:`server-status-extra-info` document provide
platform specific information. The following example block is from a
Linux-based system:

.. code-block:: javascript

           "extra_info" : {
                   "note" : "fields vary by platform",
                   "heap_usage_bytes" : <num>,
                   "page_faults" : <num>
           },

.. _server-status-example-indexcounters:

The :ref:`server-status-indexcounters` document reports on index
use:

.. code-block:: javascript

           "indexCounters" : {
                   "accesses" : <num>,
                   "hits" : <num>,
                   "misses" : <num>,
                   "resets" : <num>,
                   "missRatio" : <num>
           },

.. _server-status-example-backgroundflushing:

The :ref:`server-status-backgroundflushing` document reports on the
process MongoDB uses to write data to disk:

.. code-block:: javascript

           "backgroundFlushing" : {
                   "flushes" : <num>,
                   "total_ms" : <num>,
                   "average_ms" : <num>,
                   "last_ms" : <num>,
                   "last_finished" : ISODate("")
           },

.. _server-status-example-cursors:

The :ref:`server-status-cursors` document reports on current cursor
use and state:

.. code-block:: javascript

           "cursors" : {
                   "totalOpen" : <num>,
                   "clientCursors_size" : <num>,
                   "timedOut" : <num>
           },

.. _server-status-example-network:

The :ref:`server-status-network` document reports on network use and
state:

.. code-block:: javascript

           "network" : {
                   "bytesIn" : <num>,
                   "bytesOut" : <num>,
                   "numRequests" : <num>
           },

.. _server-status-example-repl:

The :ref:`server-status-repl` document reports on the state of
replication and the :term:`replica set`. This document only appears
for replica sets.

.. code-block:: javascript

           "repl" : {
                   "setName" : "<string>",
                   "ismaster" : <boolean>,
                   "secondary" : <boolean>,
                   "hosts" : [
                           <hostname>,
                           <hostname>,
                           <hostname>
                   ],
                   "primary" : <hostname>,
                   "me" : <hostname>

.. _server-status-example-opcountersrepl:

The :ref:`server-status-opcounters-repl` document reports the number
of replicated operations:

.. code-block:: javascript

           "opcountersRepl" : {
                   "insert" : <num>,
                   "query" : <num>,
                   "update" : <num>,
                   "delete" : <num>,
                   "getmore" : <num>,
                   "command" : <num>
           },

.. _server-status-example-opcounters:

The :ref:`server-status-opcounters` document reports the number of
operations this MongoDB instance has processed:

.. code-block:: javascript

           "opcounters" : {
                   "insert" : <num>,
                   "query" : <num>,
                   "update" : <num>,
                   "delete" : <num>,
                   "getmore" : <num>,
                   "command" : <num>
           },

.. _server-status-example-asserts:

The :ref:`server-status-asserts` document reports the number of
assertions or errors produced by the server:

.. code-block:: javascript

           "asserts" : {
                   "regular" : <num>,
                   "warning" : <num>,
                   "msg" : <num>,
                   "user" : <num>,
                   "rollovers" : <num>
           },

.. _server-status-example-writebacksqueued:

The :ref:`server-status-writebacksqueued` document reports the number of
:term:`writebacks`:

.. code-block:: javascript

           "writeBacksQueued" : <num>,

.. _server-status-example-journaling:

The :ref:`server-status-journaling` document reports on data that
reflect this :program:`mongod` instance's journaling-related operations
and performance during a :ref:`journal group commit interval
<journaling-journal-commit-interval>`:

.. code-block:: javascript

           "dur" : {
                   "commits" : <num>,
                   "journaledMB" : <num>,
                   "writeToDataFilesMB" : <num>,
                   "compression" : <num>,
                   "commitsInWriteLock" : <num>,
                   "earlyCommits" : <num>,
                   "timeMs" : {
                           "dt" : <num>,
                           "prepLogBuffer" : <num>,
                           "writeToJournal" : <num>,
                           "writeToDataFiles" : <num>,
                           "remapPrivateView" : <num>
                   }
           },

.. _server-status-example-recordstats:

The :ref:`server-status-recordstats` document reports data on
MongoDB's ability to predict page faults and yield write operations
when required data isn't in memory:

.. code-block:: javascript

           "recordStats" : {
                   "accessesNotInMemory" : <num>,
                   "pageFaultExceptionsThrown" : <num>,
                   "local" : {
                           "accessesNotInMemory" : <num>,
                           "pageFaultExceptionsThrown" : <num>
                   },
                   "<database>" : {
                           "accessesNotInMemory" : <num>,
                           "pageFaultExceptionsThrown" : <num>
                   }
           },

.. _server-status-example-workingset:

The :ref:`server-status-workingset` document provides an estimated
size of the MongoDB instance's working set. This data may not exactly
reflect the size of the working set in all cases. Additionally, the
:data:`~serverStatus.workingSet` document is only present in the
output of :dbcommand:`serverStatus` when explicitly enabled.

.. versionadded:: 2.4

.. code-block:: javascript

        "workingSet" : {
                "note" : "thisIsAnEstimate",
                "pagesInMemory" : <num>,
                "computationTimeMicros" : <num>,
                "overSeconds" : num
        },

.. _server-status-example-metrics:

The :ref:`server-status-metrics` document contains a number of
operational metrics that are useful for monitoring the state and
workload of a :program:`mongod` instance.

.. versionadded:: 2.4

.. code-block:: javascript

        "metrics" : {
                "document" : {
                        "deleted" : NumberLong(<num>),
                        "inserted" : NumberLong(<num>),
                        "returned" : NumberLong(<num>),
                        "updated" : NumberLong(<num>)
                },
                "getLastError" : {
                        "wtime" : {
                                "num" : <num>,
                                "totalMillis" : <num>
                        },
                        "wtimeouts" : NumberLong(<num>)
                },
                "operation" : {
                        "fastmod" : NumberLong(<num>),
                        "idhack" : NumberLong(<num>),
                        "scanAndOrder" : NumberLong(<num>)
                },
                "queryExecutor": {
                        "scanned" : NumberLong(<num>)
                },
                "record" : {
                        "moves" : NumberLong(<num>)
                },
                "repl" : {
                        "apply" : {
                                "batches" : {
                                        "num" : <num>,
                                        "totalMillis" : <num>
                                },
                                "ops" : NumberLong(<num>)
                        },
                        "buffer" : {
                                "count" : NumberLong(<num>),
                                "maxSizeBytes" : <num>,
                                "sizeBytes" : NumberLong(<num>)
                        },
                        "network" : {
                                "bytes" : NumberLong(<num>),
                                "getmores" : {
                                        "num" : <num>,
                                        "totalMillis" : <num>
                                },
                                "ops" : NumberLong(<num>),
                                "readersCreated" : NumberLong(<num>)
                        },
                        "oplog" : {
                                "insert" : {
                                        "num" : <num>,
                                        "totalMillis" : <num>
                                },
                                "insertBytes" : NumberLong(<num>)
                        },
                        "preload" : {
                                "docs" : {
                                        "num" : <num>,
                                        "totalMillis" : <num>
                                },
                                "indexes" : {
                                        "num" : <num>,
                                        "totalMillis" : <num>
                                }
                        }
                },
                "ttl" : {
                        "deletedDocuments" : NumberLong(<num>),
                        "passes" : NumberLong(<num>)
                }
        },

The final ``ok`` field holds the return status for the
:dbcommand:`serverStatus` command:

.. code-block:: javascript

           "ok" : 1
   }
