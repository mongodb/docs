.. meta::
   :robots: noindex, nosnippet 

.. _change-event-update:
.. _change-streams-update-event:

================
``update`` Event
================

.. meta::
   :description: Understand the `update` event in MongoDB change streams, detailing fields like `updateDescription` and `fullDocument`.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. |idref| replace:: ce-update

Summary
-------

.. data:: update

   An ``update`` event occurs when an operation updates a document
   in a collection.

   .. note:: Disambiguation

      To learn more about events that occur when collection options are
      modified, see the :data:`modify` event.

Description
-----------

.. list-table::
   :header-rows: 1
   :widths: 20 20 60

   * - Field
     - Type
     - Description

   * - ``_id``
     - Document
     - .. include:: /includes/change-stream/id

   * - ``clusterTime``
     - Timestamp
     - .. include:: /includes/change-stream/clusterTime

   * - ``collectionUUID``
     - UUID
     - .. include:: /includes/change-stream/collectionUUID

   * - ``documentKey``
     - document
     - .. include:: /includes/change-stream/documentKey


   * - ``fullDocument``
     - document
     - .. include:: /includes/change-stream/fullDocument

       .. include:: /includes/change-stream/fullDocument-update

       .. include:: /includes/change-stream/fullDocument-postimage

   * - ``fullDocumentBeforeChange``
     - document
     - .. include:: /includes/change-stream/fullDocumentBeforeChange

   * - ``lsid``
     - document
     - .. include:: /includes/change-stream/lsid

   * - ``ns``
     - document
     - .. include:: /includes/change-stream/ns

   * - ``ns.coll``
     - string
     - .. include:: /includes/change-stream/ns.coll

   * - ``ns.db``
     - string
     - .. include:: /includes/change-stream/ns.db

   * - ``operationType``
     - string
     - .. include:: /includes/change-stream/operationType

       Returns a value of ``update`` for these change events.

   * - ``updateDescription``
     - document
     - .. include:: /includes/change-stream/updateDescription

   * - | ``updateDescription.``
       | ``disambiguatedPaths``
     - document
     - .. include:: /includes/change-stream/ud-disambiguatedPaths

   * - | ``updateDescription.``
       | ``removedFields``
     - array
     - .. include:: /includes/change-stream/ud-removedFields

   * - | ``updateDescription.``
       | ``truncatedArrays``
     - array 
     - .. include:: /includes/change-stream/ud-truncatedArrays

   * - | ``updateDescription.``
       | ``truncatedArrays.``
       | ``field``
     - string
     - .. include:: /includes/change-stream/ud-ta-field

   * - | ``updateDescription.``
       | ``truncatedArrays.``
       | ``newSize``
     - integer
     - .. include:: /includes/change-stream/ud-ta-newSize

   * - | ``updateDescription.``
       | ``updatedFields``
     - document
     - .. include:: /includes/change-stream/ud-updatedFields

   * - ``txnNumber``
     - NumberLong
     - .. include:: /includes/change-stream/txnNumber

   * - ``wallTime``
     - :term:`ISODate`
     - .. include:: /includes/change-stream/wallTime

Behavior
--------

Document Pre- and Post-Images
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/change-stream-pre-and-post-images-change-events.rst

.. include:: /includes/change-stream-pre-and-post-images-additional-information.rst

Path Disambiguation
~~~~~~~~~~~~~~~~~~~


.. versionadded:: 6.1

The ``updateDescription`` field notes changes made to specific fields in 
documents by an operation.  These field descriptors use dots (``.``) as
path separators and numbers as array indexes, which leads to some
ambiguity when it contains field names that use dots or numbers.

When an ``update`` event reports changes involving ambiguous fields,
the ``disambiguatedPaths`` document provides the path key with an array 
listing each path component.

.. note::
   
   The ``disambiguatedPaths`` field is only available on change streams
   started with the :ref:`showExpandedEvents 
   <change-streams-expanded-events>` option 

For example, consider a document that lists people and the towns in which they 
live:

.. code-block:: json

   {
      "name": "Anthony Trollope",
      "home.town": "Oxford",
      "residences": [
         {"0": "Oxford"},
         {"1": "Sunbury"}
      ]
   }

* When an update modifies the ``home.town`` field from ``Oxford`` to
  ``London``, it produces an update description that looks like this:

  .. code-block:: json
  
     "updateDescription": {
        "updatedFields": {
           "home.town": "London"
        },
        "disambiguatedPaths": {
           "home.town": [ "home.town" ]
        }
     }
  
  Because the field ``home.town`` contains a period, the ``disambiguatedPaths`` 
  field shows an array with one value, to indicate that ``town`` is not a
  sub-field of ``home``.

* When an update modifies a value in the ``residences`` array to make the same 
  change, it produces an update description that looks like this:
  
  .. code-block:: json
  
     "updateDescription": {
        "updatedFields": {
           "residences.0.0": "London"
        },
        "disambiguatedPaths": { "residences.0.0": [ "residences", 0, "0" ] }
     }

  The disambiguated paths include an integer ``0`` to indicate the array index
  and the string ``"0"`` to indicate the field name within the nested document.
  
There are two cases where ``disambiguatedPath`` does **not** include a 
numeric field:

* When the first field in the path is a numeric string (i.e. ``0.name``).
  This is not ambiguous since the first field cannot be an array index.


* When the numeric string field has leading zeroes (i.e., ``0001``).  
  This is not ambiguous since an integer cannot have leading zeroes.

Update Operations
~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-modify-change-event

Array Updates
~~~~~~~~~~~~~

Updates to arrays produce ``update`` change events, but the
``updateDescription.updateFields`` can show different values.

For example, consider the following document and updates:

.. code-block:: javascript

   db.students.insertOne( { student_id: 1, scores: [ ] } )

   db.students.updateOne( 
      { student_id: 1 }, 
      { $push: { scores: 0.85 } }
   )

   db.students.updateOne( 
      { student_id: 1 }, 
      { $push: { scores: 0.94 } } 
   )

   db.students.updateOne( 
      { student_id: 1 }, 
      { $pull: { scores: 0.94 } } 
   )

The first update operates on an empty array. Here, the
:update:`$push` produces an ``update`` change event where the
field is replaced by single-entry array with the given value:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 8

   {
      _id: { _data: '82642AD66B000000012B022C0100296E5A10045DC4B11BEA5F4319A8E7CAF46816ED71461E5F6964002B060004' },
      operationType: 'update',
      clusterTime: Timestamp({ t: 1680529003, i: 1 }),
      ns: { db: 'communication_chat', coll: 'students' },
      documentKey: { student_id: 1 },
      updateDescription: {
         updatedFields: { scores: [ 0.85 ] },
         removedFields: [],
         truncatedArrays: []
      }
   }

In the second update operation, the array now contains values.
The :update:`$push` adds a new entry in the array. The
``update`` change event then shows it as a change on the new
position in the array (that is, ``scores.1``):

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 8

   {
     _id: { _data: '82642AD673000000012B022C0100296E5A10045DC4B11BEA5F4319A8E7CAF46816ED71461E5F6964002B060004' },
     operationType: 'update',
     clusterTime: Timestamp({ t: 1680529011, i: 1 }),
     ns: { db: 'communication_chat', coll: 'students' },
     documentKey: { student_id: 1 },
     updateDescription: {
       updatedFields: { 'scores.1': 0.94 },    
       removedFields: [],
       truncatedArrays: []
     }
   }

If you run the update operation again to add a third score to
the student's record, it would produce an ``update`` change
event that modifies ``scores.2``.

Removal of array items with the :update:`$pull` operator
produces a change event that shows the new array:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 8

   {
     _id: { _data: '82642AD673000000012B022C0100296E5A10045DC4B11BEA5F4319A8E7CAF46816ED71461E5F6964002B060004' },
     operationType: 'update',
     clusterTime: Timestamp({ t: 1680529011, i: 1 }),
     ns: { db: 'communication_chat', coll: 'students' },
     documentKey: { student_id: 1 },
     updateDescription: {
       updatedFields: { scores: [ 0.85 ] },
       removedFields: [],
       truncatedArrays: []
     }
   }

Array Truncation
~~~~~~~~~~~~~~~~

Update operations that reduce the number of elements in arrays
through the :ref:`pipeline updates <updates-agg-pipeline>`, such
as with the :pipeline:`$addFields` or :pipeline:`$set`
aggregation stages, show the updated array and new size in the
``truncatedArrays`` field.

.. code-block:: javascript

   db.students.insertOne( { student_id: 2, scores: [ 0.85, 0.94, 0.78 ] } )

   db.students.updateOne( 
      { student_id: 2 }, 
      [ { $addFields: { scores: [ 0.85, 0.94 ] } } ]
   )

   db.students.updateOne( 
      { student_id: 2 }, 
      [ { $addFields: { scores: [ 0.85, 0.94, 0.78 ] } } ]
   )

The change event from the first update, which used the
:pipeline:`$addFields` stage to remove a value from the
``scores`` field shows the change in the ``truncatedArrays``
field:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 10

   {
     _id: { _data: '82642AD673000000012B022C0100296E5A10045DC4B11BEA5F4319A8E7CAF46816ED71461E5F6964002B060004' },
     operationType: 'update',
     clusterTime: Timestamp({ t: 1680529011, i: 1 }),
     ns: { db: 'communication_chat', coll: 'students' },
     documentKey: { student_id: 2 },
     updateDescription: {
       updatedFields: {},
       removedFields: [],
       truncatedArrays: [ { fields: "scores", newSize: 2 } ]
     }
   }

The change event from the second update, which used the
:pipeline:`$addFields` stage to add a value back to the
``scores`` field, shows the update in the ``updatedFields``
field:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 8

   {
     _id: { _data: '82642AD673000000012B022C0100296E5A10045DC4B11BEA5F4319A8E7CAF46816ED71461E5F6964002B060004' },
     operationType: 'update',
     clusterTime: Timestamp({ t: 1680529011, i: 1 }),
     ns: { db: 'communication_chat', coll: 'students' },
     documentKey: { student_id: 2 },
     updateDescription: {
       updatedFields: { scores.2: 0.78 },
       removedFields: [],
       truncatedArrays: []
     }
   }

Example
-------

The following example illustrates an ``update`` event:

.. code-block:: json
   :copyable: false

   {
      "_id": { <Resume Token> },
      "operationType": "update",
      "clusterTime": <Timestamp>,
      "wallTime": <ISODate>,
      "ns": {
         "db": "engineering",
         "coll": "users"
      },
      "documentKey": {
         "_id": ObjectId("58a4eb4a30c75625e00d2820")
      },
      "updateDescription": {
         "updatedFields": {
            "email": "alice@10gen.com"
         },
         "removedFields": ["phoneNumber"],
         "truncatedArrays": [ {
            "field" : "vacation_time",
            "newSize" : 36
         } ]
      }
   }

The following example illustrates an ``update`` event for change streams
opened with the ``fullDocument : updateLookup`` option:

.. code-block:: json
   :copyable: false

   {
      "_id": { <Resume Token> },
      "operationType": "update",
      "clusterTime": <Timestamp>,
      "wallTime": <ISODate>,
      "ns": {
         "db": "engineering",
         "coll": "users"
      },
      "documentKey": {
         "_id": ObjectId("58a4eb4a30c75625e00d2820")
      },
      "updateDescription": {
         "updatedFields": {
            "email": "alice@10gen.com"
         },
         "removedFields": ["phoneNumber"],
         "truncatedArrays": [ {
            "field" : "vacation_time",
            "newSize" : 36
         } ],
         "disambiguatedPaths": { }
      },
      "fullDocument": {
         "_id": ObjectId("58a4eb4a30c75625e00d2820"),
         "name": "Alice",
         "userName": "alice123",
         "email": "alice@10gen.com",
         "team": "replication"
      }
   }

The ``fullDocument`` document represents the most current majority-committed
version of the updated document. The ``fullDocument`` document may vary from
the document at the time of the update operation depending on the number of
interleaving majority-committed operations that occur between the update
operation and the document lookup.

