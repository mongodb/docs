.. _langchain-hybrid-search:

================================================
Perform Hybrid Search with MongoDB and LangChain
================================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. facet::
   :name: programming_language
   :values: python

.. meta::
   :description: Perform hybrid search by using the LangChain integration for MongoDB Vector Search.
   :keywords: RAG, retrieval, langchain, chatbot, vector database, hybrid search, generative AI, integration, OpenAI

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can integrate {+avs+} with LangChain
to perform :ref:`hybrid search <as_hybrid-search>`. 
In this tutorial, you complete the following steps:

#. Set up the environment.
#. Use MongoDB as a vector store.
#. Create an {+avs+} and |fts| index on your data.
#. Run hybrid search queries.
#. Pass the query results into your |rag| pipeline.

.. cta-banner::
   :url: https://github.com/mongodb/docs-notebooks/blob/main/ai-integrations/langchain-hybrid-search.ipynb
   :icon: Code

   Work with a runnable version of this tutorial as a :github:`Python notebook <mongodb/docs-notebooks/blob/main/ai-integrations/langchain-hybrid-search.ipynb>`.

Prerequisites
-------------

To complete this tutorial, you must have the following:

.. include:: /includes/avs/shared/avs-python-voyage-openai-prerequisites.rst

.. note::

   .. include:: /includes/ai-integrations/langchain/note-python-version-langchain-voyageai.rst

Set Up the Environment
----------------------

.. include:: /includes/avs/shared/set-up-python-notebook-environment.rst

.. include:: /includes/ai-integrations/langchain/set-up-environment-hybrid-search.rst

Use MongoDB as a Vector Store
-----------------------------

You must use MongoDB as a vector store for your data.
You can instantiate a vector store by using an
existing collection in MongoDB.

.. include:: /includes/ai-integrations/langchain/create-vector-store-hybrid-search.rst

.. tip::

   `MongoDBAtlasVectorSearch API Reference <https://langchain-mongodb.readthedocs.io/en/latest/langchain_mongodb/vectorstores/langchain_mongodb.vectorstores.MongoDBAtlasVectorSearch.html>`__

Create the Indexes
------------------

To enable hybrid search queries on your vector store,
create an {+avs+} and |fts| index on the collection.
You can create the indexes by using either the 
LangChain helper methods or the 
:driver:`PyMongo Driver </pymongo/>` method:

.. tabs::

   .. tab:: LangChain
      :tabid: langchain

      .. include:: /includes/ai-integrations/langchain/create-indexes-hybrid-search-langchain.rst

   .. tab:: PyMongo
      :tabid: pymongo
            
      .. include:: /includes/ai-integrations/langchain/create-indexes-hybrid-search-pymongo.rst
         
.. include:: /includes/search-shared/fact-indexes-build-initial-sync.rst

Run a Hybrid Search Query
--------------------------

Once MongoDB builds your indexes, you can run hybrid search queries on your data.
The following code uses the ``MongoDBAtlasHybridSearchRetriever`` `retriever 
<https://python.langchain.com/docs/how_to/#retrievers>`__ to perform a hybrid search 
for the string ``"time travel"``. It also 
specifies the following parameters:

- ``vectorstore``: The name of the vector store instance.
- ``search_index_name``: The name of the {+fts+} index.
- ``top_k``: The number of documents to return.
- ``fulltext_penalty``: The penalty for full-text search. 

  The lower the penalty, the higher the full-text search score.
- ``vector_penalty``: The penalty for vector search. 
  
  The lower the penalty, the higher the vector search score.

The retriever returns a list of documents sorted by the sum of the 
full-text search score and the vector search score. The final output
of the code example includes the title, plot, and the 
different scores for each document.

To learn more about hybrid search query results, 
see :atlas:`About the Query 
</atlas-vector-search/tutorials/reciprocal-rank-fusion/#about-the-query>`.

..
   NOTE: If you edit this Python code, also update the Jupyter Notebook
   at https://github.com/mongodb/docs-notebooks/blob/main/ai-integrations/langchain-hybrid-search.ipynb

.. io-code-block:: 
   :copyable: true

   .. input:: 
      :language: python

      from langchain_mongodb.retrievers.hybrid_search import MongoDBAtlasHybridSearchRetriever

      # Initialize the retriever
      retriever = MongoDBAtlasHybridSearchRetriever(
          vectorstore = vector_store,
          search_index_name = "search_index",
          top_k = 5,
          fulltext_penalty = 50,
          vector_penalty = 50,
          post_filter=[
              {
                  "$project": {
                      "plot_embedding": 0,
                      "plot_embedding_voyage_3_large": 0
                  }
              }
          ])

      # Define your query
      query = "time travel"

      # Print results
      documents = retriever.invoke(query)
      for doc in documents:
         print("Title: " + doc.metadata["title"])
         print("Plot: " + doc.page_content)
         print("Search score: {}".format(doc.metadata["fulltext_score"]))
         print("Vector Search score: {}".format(doc.metadata["vector_score"]))
         print("Total score: {}\n".format(doc.metadata["fulltext_score"] + doc.metadata["vector_score"]))

   .. output:: 

      Title: Timecop
      Plot: An officer for a security agency that regulates time travel, must fend for his life against a shady politician who has a tie to his past.
      Search score: 0.019230769230769232
      Vector Search score: 0.018518518518518517
      Total score: 0.03774928774928775

      Title: A.P.E.X.
      Plot: A time-travel experiment in which a robot probe is sent from the year 2073 to the year 1973 goes terribly wrong thrusting one of the project scientists, a man named Nicholas Sinclair into a...
      Search score: 0.018518518518518517
      Vector Search score: 0.018867924528301886
      Total score: 0.0373864430468204

      Title: About Time
      Plot: At the age of 21, Tim discovers he can travel in time and change what happens and has happened in his own life. His decision to make his world a better place by getting a girlfriend turns out not to be as easy as you might think.
      Search score: 0
      Vector Search score: 0.0196078431372549
      Total score: 0.0196078431372549

      Title: The Time Traveler's Wife
      Plot: A romantic drama about a Chicago librarian with a gene that causes him to involuntarily time travel, and the complications it creates for his marriage.
      Search score: 0.0196078431372549
      Vector Search score: 0
      Total score: 0.0196078431372549

      Title: Retroactive
      Plot: A psychiatrist makes multiple trips through time to save a woman that was murdered by her brutal husband.
      Search score: 0
      Vector Search score: 0.019230769230769232
      Total score: 0.019230769230769232

.. tip::

   `MongoDBAtlasHybridSearchRetriever API Reference <https://langchain-mongodb.readthedocs.io/en/latest/langchain_mongodb/retrievers/langchain_mongodb.retrievers.hybrid_search.MongoDBAtlasHybridSearchRetriever.html#>`__

Pass Results to a RAG Pipeline
------------------------------

You can pass your hybrid search results
into your |rag| pipeline to generate responses 
on the retrieved documents. The sample code 
does the following: 

- Defines a LangChain `prompt template 
  <https://python.langchain.com/docs/how_to/#prompt-templates>`__
  to instruct the LLM to use 
  the retrieved documents as context for your query.
  LangChain passes these documents to the ``{context}`` input
  variable and your query to the ``{query}`` variable.

- Constructs a `chain 
  <https://python.langchain.com/docs/concepts/#langchain-expression-language-lcel>`__
  that specifies the following:

  - The hybrid search retriever you defined to 
    retrieve relevant documents.
    
  - The prompt template that you defined.

  - An LLM from OpenAI to generate a 
    context-aware response. By default, this is the 
    ``gpt-3.5-turbo`` model.

- Prompts the chain with a sample query and returns the response.
  The generated response might vary.

..
   NOTE: If you edit this Python code, also update the Jupyter Notebook
   at https://github.com/mongodb/docs-notebooks/blob/main/ai-integrations/langchain-hybrid-search.ipynb

.. io-code-block::
   :copyable: true 

   .. input:: 
      :language: python

      from langchain_core.output_parsers import StrOutputParser
      from langchain_core.prompts import PromptTemplate
      from langchain_core.runnables import  RunnablePassthrough
      from langchain_openai import ChatOpenAI

      # Define a prompt template
      template = """
         Use the following pieces of context to answer the question at the end.
         {context}
         Question: Can you recommend some movies about {query}?
      """
      prompt = PromptTemplate.from_template(template)
      model = ChatOpenAI()

      # Construct a chain to answer questions on your data
      chain = (
         {"context": retriever, "query": RunnablePassthrough()}
         | prompt
         | model
         | StrOutputParser()
      )

      # Prompt the chain
      query = "time travel"
      answer = chain.invoke(query)
      print(answer)

   .. output::

      Certainly! Here are some movies about time travel from the context provided:

      1. **Timecop (1994)**  
         Genre: Action, Crime, Sci-Fi  
         Plot: A law enforcement officer working for the Time Enforcement Commission battles a shady politician with a personal tie to his past.  
         IMDb Rating: 5.8  

      2. **A.P.E.X. (1994)**  
         Genre: Action, Sci-Fi  
         Plot: A time-travel experiment gone wrong thrusts a scientist into an alternate timeline plagued by killer robots.  
         IMDb Rating: 4.3  

      3. **About Time (2013)**  
         Genre: Drama, Fantasy, Romance  
         Plot: A young man discovers he can time travel and uses this ability to improve his life, especially his love life, but learns the limitations and challenges of his gift.  
         IMDb Rating: 7.8  

      4. **The Time Traveler's Wife (2009)**  
         Genre: Drama, Fantasy, Romance  
         Plot: A Chicago librarian with a gene causing him to involuntarily time travel struggles with its impact on his romantic relationship and marriage.  
         IMDb Rating: 7.1  

      5. **Retroactive (1997)**  
         Genre: Action, Crime, Drama  
         Plot: A woman accidentally time-travels to prevent a violent event, but her attempts to fix the situation lead to worsening consequences due to repeated time cycles.  
         IMDb Rating: 6.3  

      Each movie covers time travel with unique perspectives, from action-packed adventures to romantic dramas.
