================
mongo
================
.. only:: html

	.. meta::
			:description: The mongo command man page.
			:keywords: mongo, mongodb, man page, mongo process, mongo shell
         
.. default-domain:: mongodb

.. _mongo:

Synopsis
--------

.. describe:: mongo [--shell] [--nodb] [--norc] [--quiet] [--port <port>] [--host <host>] [--eval <JavaScript>] [-u <username>] [--username <username>] [-p <password>] [--password <password>] [--help] [-h] [--version] [--verbose] [--ipv6] [database] [file.js]

Description
-----------

:program:`mongo` is an interactive JavaScript shell interface to
MongoDB. The :program:`mongo` command provides a powerful interface
for systems administrators as well as a way to test queries and
operations directly with the database. To increase the flexibility of
the :program:`mongo` command, the shell provides a fully functional JavaScript
environment. This document addresses the basic invocation of the
:program:`mongo` shell and an overview of its usage.

.. STUB -- This manual contains more extensive documentation of :program:`mongo` in the ":doc:`/mongo`" document.

Options
-------

.. binary:: mongo

.. program:: mongo

.. cmdoption:: --shell

   Enables the shell interface after a :term:`JavaScript` file is evaluated. 
   If you invoke the :program:`mongo` command and specify a JavaScript
   file as an argument, or use :option:`mongo --eval` to specify 
   JavaScript on the command line, the :option:`mongo --shell` option 
   provides the user with a shell prompt after the file finishes 
   executing.

.. cmdoption:: --nodb

	Prevents the shell from connecting to any database instances.

.. cmdoption:: --norc

   Prevents the shell from sourcing and evaluating
   :file:`~/.mongorc.js` on startup.
   
.. cmdoption:: --quiet

   Silences output from the shell during the connection process.

.. cmdoption:: --port <PORT>

   Specifies the port where the :program:`mongod` or :program:`mongos`
   instance is listening. Unless specified :program:`mongo` connects
   to :program:`mongod` instances on port 27017, which is the default
   :program:`mongod` port.

.. cmdoption:: --host <HOSTNAME>

   specifies the host where the :program:`mongod` or :program:`mongos` is running to
   connect to as ``<HOSTNAME>``. By default :program:`mongo` will attempt
   to connect to a MongoDB process running on the localhost.

.. cmdoption:: --eval <JAVASCRIPT>

   Evaluates a JavaScript expression specified as an argument to this
   option. :program:`mongo` does not load its own environment when evaluating
   code: as a result many options of the shell environment are not
   available.

.. cmdoption:: --username <USERNAME>, -u <USERNAME>

   Specifies a username to authenticate to the MongoDB instance.
   Use in conjunction with the
   :option:`mongo --password` option to supply a password.
   If you specify a username and password but the default database
   or the specified database do not require authentication, 
   :program:`mongo` will exit with an exception.

.. cmdoption:: --password <password>, -p <password>

   Specifies a password to authenticate to the MongoDB instance. 
   Use in conjunction with the
   :option:`mongo --username` option to supply a username. If you
   specify a :option:`--username <mongo --username>` without the
   :option:`mongo --password` option, :program:`mongo` will prompt for a
   password interactively if authentication is required.

.. cmdoption:: --help,  -h

   Returns a basic help and usage text.

.. cmdoption:: --version

   Returns the version of the shell.

.. cmdoption:: --verbose

   Increases the verbosity of the output of the shell during the
   connection process.

.. cmdoption:: --ipv6

   Enables IPv6 support that allows :program:`mongo` to connect
   to the MongoDB instance using an IPv6 network. All MongoDB programs
   and processes, including :program:`mongo`, disable IPv6
   support by default.

.. cmdoption:: <db address>

   Specifies the "database address" of the database to connect to. For
   example: ::

        mongo admin

   The above command will connect the :program:`mongo` shell to the
   administrative database on the local machine. You may specify a
   remote database instance, with the resolvable hostname or IP
   address. Separate the database name from the hostname using a
   ``/`` character. See the following examples: ::

         mongo mongodb1.example.net
         mongo mongodb1/admin
         mongo 10.8.8.10/test

.. _mongo-shell-file:

.. cmdoption:: <file.js>

   Specifies a JavaScript file to run and then exit. 
   Must be the last option specified.
   Use the
   :option:`mongo --shell` option to return to a shell after the file
   finishes running.

Usage
-----

Typically users invoke the shell with the :program:`mongo` command at
the system prompt. Consider the following examples for other
scenarios.

To connect to a database on a remote host using authentication and a
non-standard port, use the following form:

.. code-block:: sh

   mongo --username <user> --password <pass> --hostname <host> --port 28015

Alternatively, consider the following short form:

.. code-block:: sh

   mongo -u <user> -p <pass> --host <host> --port 28015

Replace ``<user>``, ``<pass>``, and ``<host>`` with the appropriate
values for your situation and substitute or omit the :option:`--port`
as needed.

To execute a JavaScript file without evaluating the ``~/.mongorc.js``
file before starting a shell session, use the following form:

.. code-block:: sh

   mongo --shell --norc alternate-environment.js

To print return a query as :term:`JSON`, from the system prompt using
the :option:`--eval <mongo --eval>` option, use the following form:

.. code-block:: sh

   mongo --eval 'db.collection.find().forEach(printJson)'

Note the use of single quotes (e.g. ``'``) to enclose the JavaScript,
as well as the additional JavaScript required to generate this
output.

Files
-----

:file:`~/.dbshell` 
	
	:program:`mongo` maintains a history of commands in the `.dbshell`
	file.  
	
	.. note:
	
		Authentication commands (such as :dbcommand:`authenticate`, 
		:method:`db.addUser()`) will not be saved in the history file.
		
	.. warning:
	
		Versions of Windows :command:`mongo.exe` earlier than 2.2.0 
		will save the `.dbshell` file in the :command:`mongo.exe` 
		working directory.
		
:file:`~/.mongorc.js`

	:program:`mongo` will read `.mongorc.js` from the home directory
	of the user invoking :program:`mongo`.  
	Specify the :option:`mongo --norc` option to disable 
	reading `.mongorc.js`.
	
:file:`/tmp/mongo_edit{<time_t>}.js`

	 Created by :program:`mongo` when editing a file.  If the file
	 exists :program:`mongo` will append an integer from 1 to 10 to
	 the time value to attempt to create a unique file.
	 
:file:`%TEMP%\mongo_edit{<time_t>}.js`

	 Created by :command:`mongo.exe` on Windows when editing a file.  
	 If the file
	 exists :program:`mongo` will append an integer from 1 to 10 to
	 the time value to attempt to create a unique file.

Environment
-----------

.. envvar:: EDITOR

	Specifies the path to an editor to use with the `edit` shell command.
	A JavaScript variable `EDITOR` will override the value of 
	:envvar:`EDITOR`.

.. envvar:: HOME

	specifies the path to the home directory where :file:`.mongorc.js` will be
	read from and :file:`.dbshell` will be written to.

.. envvar:: HOMEDRIVE

	specifies the Windows path to the home directory where :file:`.mongorc.js` will be
	read from and :file:`.dbshell` will be written to.

.. envvar:: HOMEPATH

	specifies the Windows path to the home directory where :file:`.mongorc.js` will be
	read from and :file:`.dbshell` will be written to.
