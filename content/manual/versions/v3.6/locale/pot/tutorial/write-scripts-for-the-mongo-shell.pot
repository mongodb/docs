# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:3
msgid "Write Scripts for the ``mongo`` Shell"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:13
msgid "You can write scripts for the :binary:`~bin.mongo` shell in JavaScript that manipulate data in MongoDB or perform administrative operation."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:16
msgid "This tutorial provides an introduction to writing JavaScript that uses the :binary:`~bin.mongo` shell to access MongoDB."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:22
msgid "Opening New Connections"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:24
msgid "From the :binary:`~bin.mongo` shell or from a JavaScript file, you can instantiate database connections using the :method:`Mongo()` constructor:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:34
msgid "Consider the following example that instantiates a new connection to the MongoDB instance running on localhost on the default port and sets the global ``db`` variable to ``myDatabase`` using the :method:`~Mongo.getDB()` method:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:44
msgid "If connecting to a MongoDB instance that enforces access control, you can use the :method:`db.auth()` method to authenticate."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:47
msgid "Additionally, you can use the :method:`connect()` method to connect to the MongoDB instance. The following example connects to the MongoDB instance that is running on ``localhost`` with the non-default port ``27020`` and set the global ``db`` variable:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:56
msgid ":doc:`/reference/method/`"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:59
msgid "Differences Between Interactive and Scripted ``mongo``"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:61
msgid "When writing scripts for the :binary:`~bin.mongo` shell, consider the following:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:64
msgid "To set the ``db`` global variable, use the :method:`~Mongo.getDB()` method or the :method:`connect()` method. You can assign the database reference to a variable other than ``db``."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:68
msgid "Write operations in the :binary:`~bin.mongo` shell use a write concern of :ref:`{ w: 1 } <wc-w>` by default. If performing bulk operations, use the :method:`Bulk()` methods. See :ref:`write-methods-incompatibility` for more information."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:73
msgid "You **cannot** use any shell helper (e.g. ``use <dbname>``, ``show dbs``, etc.) inside the JavaScript file because they are not valid JavaScript."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:77
msgid "The following table maps the most common :binary:`~bin.mongo` shell helpers to their JavaScript equivalents."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:84
msgid "Shell Helpers"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:86
msgid "JavaScript Equivalents"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:88
msgid "``show dbs``, ``show databases``"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:177
msgid "In interactive mode, :binary:`~bin.mongo` prints the results of operations including the content of all cursors. In scripts, either use the JavaScript ``print()`` function or the :binary:`~bin.mongo` specific ``printjson()`` function which returns formatted JSON."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:184
msgid "To print all items in a result cursor in :binary:`~bin.mongo` shell scripts, use the following idiom:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:197
msgid "Scripting"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:199
msgid "From the system prompt, use :binary:`~bin.mongo` to evaluate JavaScript."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:202
msgid "``--eval`` option"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:204
msgid "Use the :option:`--eval <mongo --eval>` option to :binary:`~bin.mongo` to pass the shell a JavaScript fragment, as in the following:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:211
msgid "This returns the output of :method:`db.getCollectionNames()` using the :binary:`~bin.mongo` shell connected to the :binary:`~bin.mongod` or :binary:`~bin.mongos` instance running on port ``27017`` on the ``localhost`` interface."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:219
msgid "Execute a JavaScript file"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:221
msgid "You can specify a ``.js`` file to the :binary:`~bin.mongo` shell, and :binary:`~bin.mongo` will execute the JavaScript directly. Consider the following example:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:229
msgid "This operation executes the ``myjsfile.js`` script in a :binary:`~bin.mongo` shell that connects to the ``test`` :term:`database` on the :binary:`~bin.mongod` instance accessible via the ``localhost`` interface on port ``27017``."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:234
msgid "Alternately, you can specify the mongodb connection parameters inside of the javascript file using the ``Mongo()`` constructor. See :ref:`mongo-shell-new-connections` for more information."
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:1
msgid "You can execute a ``.js`` file from within the :binary:`~bin.mongo` shell, using the :method:`load()` function, as in the following:"
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:8
msgid "This function loads and executes the :file:`myjstest.js` file."
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:10
msgid "The :method:`load()` method accepts relative and absolute paths. If the current working directory of the :binary:`~bin.mongo` shell is :file:`/data/db`, and the :file:`myjstest.js` resides in the :file:`/data/db/scripts` directory, then the following calls within the :binary:`~bin.mongo` shell would be equivalent:"
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:21
msgid "There is no search path for the :method:`load()` function. If the desired script is not in the current working directory or the full specified path, :binary:`~bin.mongo` will not be able to access the file."
msgstr ""

