========================================
Getting Started with the ``mongo`` Shell
========================================

.. default-domain:: mongodb

This document provides a basic introduction to using the
:program:`mongo` shell. See :doc:`/installation` for instructions on
installing MongoDB for your system.

Start the ``mongo`` Shell
-------------------------

To start the :program:`mongo` shell and connect to your :doc:`MongoDB
</reference/mongod>` instance running on **localhost** with **default port**:

#. Go to your ``<mongodb installation dir>``:

   .. code-block:: sh

      cd <mongodb installation dir>

#. Type ``./bin/mongo`` to start :program:`mongo`:

   .. code-block:: sh

      ./bin/mongo

   If you have added the ``<mongodb installation dir>/bin`` to the
   ``PATH`` environment variable, you can just type ``mongo`` instead
   of ``./bin/mongo``.

#. To display the database you are using, type ``db``:

   .. code-block:: sh

      db

   The command should return ``test``, which is the default database.
   To switch databases, issue the ``use <db>`` command, as in the
   following example:

   .. code-block:: javascript

      use <database>

   To list the available databases, use the command ``show dbs``. See
   also :ref:`mongo-shell-getSiblingDB` to access a different database
   from the current database without switching your current database
   context (i.e. ``db.``.)

To start the :program:`mongo` shell with other options, see
:ref:`examples of starting up mongo <mongo-usage-examples>` and
:doc:`mongo reference </reference/mongo>` which provides details on the
available options.

.. note::

   When starting, :program:`mongo` checks the user's :envvar:`HOME`
   directory for a JavaScript file named :ref:`.mongorc.js
   <mongo-mongorc-file>`. If found, :program:`mongo` interprets the
   content of :file:`.mongorc.js` before displaying the prompt for the
   first time. If you use the shell to evaluate a JavaScript file or
   expression, either by using the :option:`--eval <mongo --eval>` option on the
   command line or by specifying :ref:`a .js file to mongo
   <mongo-shell-file>`, :program:`mongo` will read the ``.mongorc.js``
   file *after* the JavaScript has finished processing.

.. _mongo-shell-executing-queries:

Executing Queries
-----------------

From the :program:`mongo` shell, you can use the :doc:`shell methods
</reference/javascript>` to run queries, as in the following example:

.. code-block:: javascript

   db.<collection>.find()

- The ``db`` refers to the current database.

- The ``<collection>`` is the name of the collection to query. See
  :ref:`mongo-shell-help-collection` to list the available collections.

  If the :program:`mongo` shell does not accept the name of the
  collection, for instance if the name contains a space or starts with
  a number, you can use an alternate syntax to refer to the
  collection, as in the following:

  .. code-block:: javascript

     db["3test"].find()

     db.getCollection("3test").find()

- The :method:`find() <db.collection.find()>` method is the JavaScript
  method to retrieve documents from ``<collection>``. The
  :method:`find() <db.collection.find()>` method returns a
  :term:`cursor` to the results; however, in the :program:`mongo`
  shell, if the returned cursor is not assigned to a variable, then the
  cursor is automatically iterated up to 20 times to print up to the
  first 20 documents that match the query. The :program:`mongo` shell
  will prompt ``Type it`` to iterate another 20 times.

  You can set the ``DBQuery.shellBatchSize`` attribute to change the
  number of iteration from the default value ``20``, as in the
  following example which sets it to ``10``:

  .. code-block:: javascript

     DBQuery.shellBatchSize = 10;

  For more information and examples on cursor handling in the
  :program:`mongo` shell, see :ref:`read-operations-cursors`.

  See also :ref:`mongo-shell-help-cursor` for list of
  cursor help in the :program:`mongo` shell.

For more documentation of basic MongoDB operations in the
:program:`mongo` shell, see:

- :doc:`/tutorial/getting-started`
- :doc:`/reference/mongo-shell`
- :doc:`/applications/create`
- :doc:`/applications/read`
- :doc:`/applications/update`
- :doc:`/applications/delete`
- :doc:`/administration/indexes`
- :doc:`/core/read-operations`
- :doc:`/core/write-operations`

.. _mongo-shell-print:

Print
-----

The :program:`mongo` shell automatically prints the results of the
:method:`find() <db.collection.find()>` method if the returned cursor
is not assigned to a variable. To format the result, you can add the
``.pretty()`` to the operation, as in the following:

.. code-block:: javascript

   db.<collection>.find().pretty()

In addition, you can use the following explicit print methods in the
:program:`mongo` shell:

- ``print()`` to print without formatting

- ``print(tojson(<obj>))`` to print with :term:`JSON` formatting and
  equivalent to ``printjson()``

- ``printjson()`` to print with :term:`JSON` formatting and equivalent
  to ``print(tojson(<obj>))``

.. _mongo-shell-exit:

Exit the Shell
--------------

To exit the shell, type ``quit()`` or use the ``<Ctrl-c>`` shortcut.
