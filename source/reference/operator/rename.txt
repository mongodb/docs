=======
$rename
=======

.. default-domain:: mongodb

.. operator:: $rename

   *Syntax*: ``{$rename: { <old name1>: <new name1>, <old name2>: <new name2>, ... } }``

   The :operator:`$rename` operator updates the name of a field. The
   ``new name`` must differ from the ``old name``.

   Consider the following example:

   .. code-block:: javascript

      db.students.update( { _id: 1 }, { $rename: { 'nickname': 'alias', 'cell': 'mobile' } } )

   The query renames the field ``nickname`` to the new name ``alias``,
   and the field ``cell`` to ``mobile``.

   If a field with the ``new name`` already exists in the document, the
   :operator:`$rename` operator renames the field with the ``old name``
   to the ``new name`` and the field previously named ``old name`` no
   longer exists.
   
   The :operator:`$rename` operator will expand arrays and
   sub-documents to find a match for field names. When renaming a field
   in a sub-document to another sub-document or to a regular field, the
   sub-document itself remains.
   
   Consider the following examples involving the sub-document of the
   following document:
   
   .. code-block:: javascript
   
      { "_id": 1,
        "alias": [ "The American Cincinnatus", "The American Fabius" ],
        "mobile": "555-555-5555", 
        "nmae": { "first" : "george", "last" : "washington" }
      }

   - To rename a sub-document, call the :operator:`$rename` operator
     with the name of the sub-document as you would any other field:
     
     .. code-block:: javascript
     
        db.students.update( { _id: 1 }, { $rename: { "nmae": "name" } } )
     
     The query renames the sub-document ``nmae`` to ``name``:
     
     .. code-block:: javascript

        { "_id": 1,
          "alias": [ "The American Cincinnatus", "The American Fabius" ],
          "mobile": "555-555-5555",
          "name": { "first" : "george", "last" : "washington" }
        }

   - To rename a field within a sub-document, call the
     :operator:`$rename` operator using the :wiki:`dot notation
     <Dot+Notation+(Reaching+into+Objects)>` to refer to the field.
     Include the name of the sub-document in the ``new name`` to ensure
     the field remains in the sub-document:
     
     .. code-block:: javascript
     
        db.students.update( { _id: 1 }, { $rename: { "name.first": "name.fname" } } )
     
     The query renames the sub-document field ``first`` to ``fname``:
     
     .. code-block:: javascript
     
        { "_id" : 1, 
          "alias" : [ "The American Cincinnatus", "The American Fabius" ],
          "mobile" : "555-555-5555",
          "name" : { "fname" : "george", "last" : "washington" }
        }
    
   - To rename a field within a sub-document and move it to another
     sub-document, call the :operator:`$rename` operator using the
     :wiki:`dot notation <Dot+Notation+(Reaching+into+Objects)>` to
     refer to the field. Include the name of the new sub-document in
     the ``new name``:
     
     .. code-block:: javascript
     
        db.students.update( { _id: 1 }, { $rename: { "name.last": "contact.lname" } } )

     The query renames the sub-document field ``last`` to ``lname`` and
     moves it to the sub-document ``contact``:
          
     .. code-block:: javascript
     
        { "_id" : 1, 
          "alias" : [ "The American Cincinnatus", "The American Fabius" ],
          "contact" : { "lname" : "washington" },
          "mobile" : "555-555-5555",
          "name" : { "fname" : "george" }
        }
      
     If the ``new name`` does not include a sub-document name, the
     field moves out of the subdocument and becomes a regular document
     field.
   
   Consider the following behavior when the ``old name`` does not exist:
   
   - When renaming a single field and the ``old name`` refers to a
     non-existing field, the :operator:`$rename` operator does nothing,
     as in the following:

     .. code-block:: javascript

        db.students.update( { _id: 1 }, { $rename: { 'wife': 'spouse' } } )

     The above query performs no action since the field with the name
     ``wife`` does not exist.

   - When renaming multiple fields and **all** the ``old names`` refer to
     non-existing fields, the :operator:`$rename` operator does
     nothing, as in the following:

     .. code-block:: javascript

        db.students.update( { _id: 1 }, { $rename: { 'wife': 'spouse', 'vice': 'vp', 'office': 'term' } } )

     The above query performs no action since fields with the name
     ``wife``, ``vice``, and ``office`` do not exist.
      
   - When renaming multiple fields and **some** but not all ``old names``
     refer to non-existing fields, the :operator:`$rename` operator
     performs the following operations:
     
     - Renames those existing fields to their respective ``new names``.
     
     - In version 2.2, ignores the non-existing fields.
     
     - In versions 2.0.3, 2.0.4, 2.0.7, **if** no field already exists
       with the ``new names``, ignores the non-existing fields.
       Otherwise, **if** fields already exist with the ``new names``,
       drops these pre-existing fields.
       
     Consider the following query that renames both an existing field
     ``mobile`` and a non-existing field ``wife``. The non-existing
     field ``wife`` is being set to a name that already exists
     ``alias``.
     
     .. code-block:: javascript

        db.students.update( { _id: 1 }, { $rename: { 'wife': 'alias', 'mobile': 'cell' } } )

     In version 2.2, the existing field ``mobile`` is renamed to
     ``cell``. No other action occurs.
     
     .. code-block:: javascript
     
        { "_id" : 1, 
          "alias" : [ "The American Cincinnatus", "The American Fabius" ], 
          "cell" : "555-555-5555", 
          "name" : { "lname" : "washington" }, 
          "places" : { "d" : "Mt Vernon", "b" : "Colonial Beach" } 
        }
     
     In versions 2.0.3, 2.0.4, 2.0.7, the existing field ``mobile`` is
     renamed to ``cell``. The field currently named ``alias`` is
     dropped even though the field ``wife`` does not exist:
     
     .. code-block:: javascript
     
        { "_id" : 1, 
          "cell" : "555-555-5555", 
          "name" : { "lname" : "washington" }, 
          "places" : { "d" : "Mt Vernon", "b" : "Colonial Beach" } 
        }
   
   .. versionadded:: 1.7.2
