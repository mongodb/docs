.. _index-feature-ttl:

===========
TTL Indexes
===========

.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: shell 

.. facet::
   :name: genre 
   :values: reference

.. meta:: 
   :description: TTL indexes are special single-field indexes for automatically removing documents from a collection after a certain amount of time or at a specific clock time.
   :keywords: sample dataset

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. note::

   If you are removing documents to save on storage costs, consider
   :atlas:`Online Archive </online-archive/manage-online-archive>` in
   `MongoDB Atlas <https://www.mongodb.com/cloud?tck=docs_server>`__. Online
   Archive automatically archives infrequently accessed data to
   fully-managed S3 buckets for cost-effective data
   tiering.

TTL indexes are special single-field indexes that MongoDB can use to
automatically remove documents from a collection after a certain amount
of time or at a specific clock time. Data expiration is useful for
certain types of information like machine generated event data, logs,
and session information that only need to persist in a database for a 
finite amount of time.

.. |page-topic| replace:: :ref:`create and manage TTL indexes in the UI <expire-data-atlas-ui>`

.. cta-banner::
   :url: https://www.mongodb.com/docs/manual/tutorial/expire-data/#expire-documents-in-the-mongodb-atlas-ui
   :icon: Cloud

   .. include:: /includes/fact-atlas-compatible.rst

Create a TTL Index
------------------

.. warning::

   After you create a TTL index, it might have a very large number of 
   qualifying documents to delete at once. This large workload might 
   cause performance issues on the server. To avoid these issues, plan 
   to create the index during off hours, or delete qualifying documents 
   in batches before you create the index for future documents.

.. include:: /includes/indexes/create-ttl-indexes.rst

.. include:: includes/expireAfterSeconds-range.rst

For example, to create a TTL index on the ``lastModifiedDate`` field of
the ``eventlog`` collection with a TTL value of ``3600`` seconds, use
the following operation in :binary:`~bin.mongosh`:

.. code-block:: javascript

   db.eventlog.createIndex(
      { "lastModifiedDate": 1 },
      { expireAfterSeconds: 3600 }
   )
   
Starting in MongoDB 7.0, you can create partial TTL indexes on 
:ref:`time series collections <manual-timeseries-landing>`. These
indexes use the collection ``timeField`` as the key field, and require a
:ref:`partial filter expression <index-type-partial>` on the  ``metaField``.

Time series collections include an optional ``expireAfterSeconds``
field. If you don't set ``expireAfterSeconds``, a TTL index with a
``partialFilterExpression`` lets you set an expiration period for
documents that match the filter. If you do set ``expireAfterSeconds``,
a partial TTL index lets you set a different, shorter expiration period
for matching documents. You can only create a ``partialFilterExpression`` on the ``metaField``.

.. important::

   If the ``expireAfterSeconds`` value of the collection is lower than
   the ``expireAfterSeconds`` of the partial TTL index, the collection
   deletes documents after the shorter time, so the TTL index has no effect.

.. include:: /includes/time-series-ttl-deletes.rst

This weather data time series collection deletes documents after 24 hours:

.. code-block:: javascript

   db.createCollection(
      "weather24h",
      {
         timeseries: {
            timeField: "timestamp",
            metaField: "sensor",
            granularity: "hours"
         },
         expireAfterSeconds: 86400
      }
   )

This TTL index deletes documents from the MongoDB NYC
headquarters weather sensor after 1 hour, instead of 24 hours:

.. code-block:: javascript

   db.eventlog.createIndex( 
     { "timestamp": 1 },
     { partialFilterExpression: { "sensor": { $eq: "40.761873, -73.984287" } } },
     { expireAfterSeconds: 3600 } )

.. _convert-non-ttl-single-field-index-into-ttl:

Convert a non-TTL single-field Index into a TTL Index
-----------------------------------------------------

Starting in MongoDB 5.1, you can add the ``expireAfterSeconds`` option
to an existing single-field index. To change a non-TTL single-field
index to a TTL index, use the :dbcommand:`collMod` database command:

.. code-block:: javascript

   db.runCommand({
     "collMod": <collName>,
     "index": {
       "keyPattern": <keyPattern>,
       "expireAfterSeconds": <number>
     }
   })

The following example converts a non-TTL single-field index with the
pattern ``{ "lastModifiedDate": 1 }`` into a TTL index:

.. code-block:: javascript

   db.runCommand({
     "collMod": "tickets",
     "index": {
       "keyPattern": { "lastModifiedDate": 1 },
       "expireAfterSeconds": 100
     }
   })

.. _change-ttl-expireafterseconds-value:

Change the ``expireAfterSeconds`` value for a TTL Index
-------------------------------------------------------

To change the ``expireAfterSeconds`` value for a TTL Index, use the
:dbcommand:`collMod` database command:

.. code-block:: javascript

   db.runCommand({
     "collMod": <collName>,
     "index": {
       "keyPattern": <keyPattern>,
       "expireAfterSeconds": <number>
     }
   })

The following example changes the ``expireAfterSeconds`` value for an
index with the pattern ``{ "lastModifiedDate": 1 }`` on the ``tickets``
collection:

.. code-block:: javascript

   db.runCommand({
     "collMod": "tickets",
     "index": {
       "keyPattern": { "lastModifiedDate": 1 },
       "expireAfterSeconds": 100
     }
   })

.. important::

   Consider the following before updating the ``expireAfterSeconds``
   parameter of a TTL index:

   - Changing the ``expireAfterSeconds`` parameter **does not** trigger a 
     complete index rebuild. However, reducing the ``expireAfterSeconds`` 
     value can make many documents eligible for immediate deletion, 
     potentially causing performance issues due to the increased delete 
     operations.

   - The recommended approach is to manually delete documents in 
     small batches before updating the TTL index. This helps control 
     the impact on your cluster.

   - Deleting many documents can fragment storage files, additionally 
     impacting performance. You may need to run the 
     :ref:`compact <compact>` command on your collection or 
     perform a :ref:`replica-set-initial-sync` to reclaim space and 
     optimize storage.

Behavior
--------

Expiration of Data
~~~~~~~~~~~~~~~~~~

TTL indexes expire documents after the specified number of seconds has
passed since the indexed field value. The expiration threshold is
the indexed field value plus the specified number of seconds. 

If the field is an array, and there are multiple date values in the
index, MongoDB uses *lowest* (earliest) date value in the array to
calculate the expiration threshold.

For time series collections, TTL indexes also remove a bucket of data
when all documents inside it expire. This is equal to the upper
timestamp limit of the bucket, plus the ``expireAfterSeconds`` value.
For example, if a bucket covers data up until ``2023-03-27T18:29:59Z``
and ``expireAfterSeconds`` is 300, the TTL index expires the
bucket after ``2023-03-27T18:34:59Z``.

If the indexed field in a document doesn't contain one or more date
values, the document will not expire. 

If a document does not contain the indexed field, the document will not
expire.

Delete Operations
~~~~~~~~~~~~~~~~~

A background thread in :binary:`~bin.mongod` reads the values in the index
and removes expired :term:`documents <document>` from the collection.

In progress delete operations performed by the TTL thread appear in
:method:`db.currentOp()` output. As the TTL thread deletes documents,
the :serverstatus:`metrics.ttl.deletedDocuments` server status metric is
incremented.

.. include:: /includes/multi-deletes.rst

.. include:: /includes/time-series-ttl-deletes.rst

.. _ttl-monitor-deletion-process:

Deletion Process
````````````````

The TTL background deletion process checks each TTL index for expired
documents. For each TTL index, the background process deletes documents
until one of the following conditions is met:

- The process deletes 50000 documents from the current index.
- The process spends one second deleting documents from the current
  index.
- All expired documents are deleted from the current index. 

Then, the process moves on to the next index. After the process goes
through each TTL index once, the current sub-pass is complete and a new
sub-pass begins to check for remaining expired documents. A pass is
complete when the TTL monitor has deleted all possible candidate
documents from all TTL indexes.

Additionally, the process stops the current deletion loop every 60
seconds to prevent spending too much time on a single large delete. When
this happens, the current sub-pass ends and a new sub-pass begins.

Passes and sub-passes are tracked in the
:serverstatus:`metrics.ttl.passes` and
:serverstatus:`metrics.ttl.subPasses` server status metrics,
respectively.


Timing of the Delete Operation
``````````````````````````````

MongoDB begins removing expired documents or time series buckets as soon
as the index finishes building on the :term:`primary`. For more
information on the index build process, see :ref:`index-operations`.

.. include:: /includes/fact-ttl-collection-background-timing.rst

Replica Sets
````````````

On :term:`replica set <replica set>` members, the TTL background thread *only*
deletes documents when a member is in state :term:`primary`. The TTL background
thread is idle when a member is in state :term:`secondary`. :term:`Secondary <secondary>` members replicate
deletion operations from the primary.

Support for Queries
~~~~~~~~~~~~~~~~~~~

A TTL index supports queries in the same way non-TTL indexes do.

mongod in Standalone Mode
~~~~~~~~~~~~~~~~~~~~~~~~~

The TTL monitor stops when ``mongod`` runs in standalone mode and the
``system.local.replset`` collection contains data. If you take a replica 
set node out of the replica set and run it as a standalone, then the 
TTL monitor is disabled.

Restrictions
------------

- TTL indexes are single-field indexes. :ref:`Compound indexes
  <index-type-compound>` do not support TTL and ignore the
  ``expireAfterSeconds`` option.

- The ``_id`` field does not support TTL indexes.

- Starting in MongoDB 7.0, you can create a :ref:`partial TTL index
  <partial-ttl-indexes>` on a :ref:`time series collection
  <manual-timeseries-landing>`'s ``metaField``. In earlier
  MongoDB versions, you can only create a TTL index for a time series
  collection's ``timeField``.

- You cannot use :method:`~db.collection.createIndex()` to change the
  value of ``expireAfterSeconds`` of an existing index. Instead, use the
  :dbcommand:`collMod` database command. For details, see
  :ref:`change-ttl-expireafterseconds-value`.

- If a non-TTL single-field index already exists for a field, you
  cannot create a TTL index on the same field because you cannot create
  indexes that have the same key specification and differ only by the
  options. To :ref:`change a non-TTL single-field index to a TTL index
  <convert-non-ttl-single-field-index-into-ttl>`, use the
  :dbcommand:`collMod` database command.


.. toctree::
   :titlesonly:
   :hidden:

   Expire Data </tutorial/expire-data>
