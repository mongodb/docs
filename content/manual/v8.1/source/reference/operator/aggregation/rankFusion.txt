.. meta::
   :robots: noindex, nosnippet 

=========================
$rankFusion (aggregation)
=========================

.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: shell

.. meta::
   :description: Learn how to use an aggregation stage to combine the results of multiple ranked aggregation pipelines.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. important::

   ``$rankFusion`` is only available for deployments that use MongoDB 8.1. 

Definition
----------

.. pipeline:: $rankFusion

   ``$rankFusion`` first executes all input pipelines independently and then
   de-duplicates and combines the input pipeline results into a final ranked
   results set.

   ``$rankFusion`` outputs a ranked set of documents based on the ranks the
   input documents appear in their input pipelines and the pipeline weights.
   This stage uses the :ref:`Reciprocal Rank Fusion <rankFusion-rrf>` algorithm
   to rank the combined results of the input pipelines.

   Use ``$rankFusion`` to search for documents in a single collection based on
   multiple criteria and retrieve a final ranked results set that factors in
   all specified criteria.

Syntax
------

The stage has the following syntax:

.. code-block:: javascript

   { $rankFusion: { 
       input: {
            pipelines: { 
                <myPipeline1>: <expression>,
                <myPipeline2>: <expression>,
                ...
            }
        },
        combination: { 
            weights: {
                <myPipeline1>: <numeric expression>,
                <myPipeline2>: <numeric expression>,
                ...
            }
        },
        scoreDetails: <bool>
    } }

Command Fields
~~~~~~~~~~~~~~

``$rankFusion`` takes the following fields:

.. list-table::
   :header-rows: 1
   :widths: 20 20 80
 
   * - Field
 
     - Type
 
     - Description
 
   * - ``input``
 
     - Object

     - Defines the input that ``$rankFusion`` ranks. 

   * - ``input.pipelines``
 
     - Object
 
     - Contains a map of pipeline names to the aggregation stages that define
       that pipeline. ``input.pipelines`` must contain at least one pipeline. All
       pipelines must operate on the same collection and must have a unique
       name.

       For more information on input pipeline restrictions, see
       :ref:`rankFusion-input-pipelines` and :ref:`rankFusion-pipeline-names`. 

   * - ``combination``
 
     - Object

     - Optional. Defines how to combine the ``input`` pipeline results.

   * - ``combination.weights``

     - Object
     
     - Optional. Contains a map from ``input`` pipeline names to their weights
       relative to other pipelines. Each weight value must be a non-negative
       number (whole, or decimal).

       If you do not specify a weight, the default value is 1. 

   * - ``scoreDetails`` 

     - Boolean

     - Default is false. Specifies if ``$rankFusion`` computes and populates the
       ``$scoreDetails`` metadata field for each output document. See
       :ref:`rankFusion-scoreDetails` for more information on this field.

Behavior
--------

Collections
~~~~~~~~~~~

You can only use ``$rankFusion`` with a single collection. You cannot use this
aggregation stage at a database scope. 

De-Duplication
~~~~~~~~~~~~~~

``$rankFusion`` de-duplicates the results across multiple input pipelines in the
final output. Each unique input document appears at most once in the
``$rankFusion`` output, regardless of the number of times that the document
appears in input pipeline outputs. 

.. _rankFusion-input-pipelines:

Input Pipelines
~~~~~~~~~~~~~~~

Each ``input`` pipeline must be both a Selection Pipeline and a Ranked Pipeline. 

Selection Pipeline
``````````````````

A Selection Pipeline retrieves a set of documents from a collection without
performing any modifications after retrieval. ``$rankFusion`` compares documents
across different input pipelines which requires that all input pipelines output
the same unmodified documents. 

.. note::

   If you want to modify the documents that you search for with ``$rankFusion``,
   perform those modifications after the ``$rankFusion`` stage. 

A selection pipeline must only contain the following stages:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Type
     - Stages

   * - Search Stages
     - - :pipeline:`$match`, including ``$match`` with :ref:`legacy text search
         <perform-text-search-onprem>`
       - :pipeline:`$search`
       - :pipeline:`$vectorSearch`
       - :pipeline:`$sample`
       - :pipeline:`$geoNear`

         .. note::

            If you use ``$geoNear`` in a selection pipeline, you cannot specify
            ``includeLogs`` or ``distanceField`` because those fields modify
            documents. 

   * - Ordering Stages
     - - :pipeline:`$sort`

   * - Pagination Stages
     - - :pipeline:`$skip`
       - :pipeline:`$limit`


Ranked Pipeline
```````````````

A ranked pipeline sorts or orders documents. ``$rankFusion`` uses the order of
ranked pipeline results to influence the output ranking. Ranked pipelines must
meet one of the following criteria:

- Begin with one of the following ordered stages:

  - :pipeline:`$search`
  - :pipeline:`$vectorSearch`
  - :pipeline:`$geoNear`

- Contain an explicit :pipeline:`$sort` stage.

.. _rankFusion-pipeline-names:

Input Pipeline Names
~~~~~~~~~~~~~~~~~~~~

Pipeline names in ``input`` must meet the following restrictions:

- Must not be an empty string
- Must not start with a ``$``
- Must not contain the ASCII null character delimiter ``\0`` anywhere in the string
- Must not contain a ``.``

.. _rankFusion-rrf:

Reciprocal Rank Fusion (RRF) Formula
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``$rankFusion`` orders results according to the Reciprocal Rank Fusion (RRF)
Formula. This stage places the RRF score for each document in the ``score``
metadata field of the output results. The RRF formula ranks documents with a
combination of the following factors:

- The placement of documents in input pipeline results
- The number of time that a document appears in different input pipelines
- The ``weights`` of input pipelines.

For example, if a document has a high ranking in multiple pipeline result sets,
the RRF score for that document would be higher than if that same document has
the same ranking in some input pipelines, but is not present (or has a
lower ranking) in the other pipelines

The  Reciprocal Rank Fusion (RRF) Formula is equivalent to the following
algebraic operation:

.. figure:: /images/rrf-score.png
   :alt: The reciprocal rank fusion formula
   :figwidth: 500px

.. note::

   In this formula, 60 is a sensitivity parameter that MongoDB determined. 

The below table contains the variables that the RRF formula uses:

.. list-table::
   :header-rows: 1
   :widths: 20 80
 
   * - Variable
 
     - Description

   * - D
 
     - The set of result documents for the whole operation.

   * - d
 
     -  The document that the RRF score is being computed for.

   * - R
 
     - The set of ranks for input pipelines that ``d`` appears in.

   * - r(d)
 
     - The rank of document ``d`` in this input pipeline.

   * - w
 
     - The weight of the input pipeline that ``d`` appears in.

Each term in the summation represents the appearance of a document ``d`` in one
of the ``input`` pipelines. The total RRF score for ``d`` is the summation of
each of these terms across all the input pipelines that ``d`` appears in. 

RRF Calculation Example
```````````````````````

Consider a ``$rankFusion`` pipeline stage with one ``$search`` and one
``$vectorSearch`` input pipeline. 

All input pipelines output the same 3 documents: ``Document1``, ``Document2``,
and ``Document3``. 

The ``$search`` pipeline ranks the documents in the following order:

1. ``Document3``
2. ``Document2``
3. ``Document1``

The ``$vectorSearch`` pipeline ranks the documents in the following order:

1. ``Document1``
2. ``Document2``
3. ``Document3``. 

``rankFusion`` computes the RRF score for ``Document1`` through the following
operation:

.. code-block:: none

   RRFscore(Document1) = 1/(60 + search_rank_of_Document1) + (1/(60 + vectorSearch_rank_of_Document1))
   RRFscore(Document1) = 1/63 + 1/61
   RRFscore(Document1) = 0.0322664585

The ``score`` metadata field for ``Document1`` is ``0.0322664585``. 

.. _rankFusion-scoreDetails:

scoreDetails
~~~~~~~~~~~~

If you set ``scoreDetails`` to ``true``, ``$rankFusion`` creates a
``scoreDetails`` metadata field for each document. The ``scoreDetails`` field
contains information about the final ranking. 

.. note::

   When you set ``scoreDetails`` to ``true``, ``$rankFusion`` sets the
   ``scoreDetails`` metadata field for each document but does not automatically
   output the ``scoreDetails`` metafield.

   To view the ``scoreDetails`` metadata field, you must either:

   - use a :pipeline:`$project` stage after ``$rankFusion`` to project the
     ``scoreDetails`` field

   - use a :pipeline:`$addFields` stage after ``$rankFusion`` to add the
     ``scoreDetails`` field to your pipeline output

The ``scoreDetails`` field contains the following subfields:

.. list-table::
   :header-rows: 1
   :widths: 30 70
 
   * - Field
 
     - Description
 
   * - ``value``
 
     - The numerical value of the :abbr:`RRF (Reciprocal Rank Fusion)` score for this document.

   * - ``description``
 
     - A description of how ``$rankFusion`` computed the :abbr:`RRF (Reciprocal Rank Fusion)` score.

   * - ``details``
 
     - An array where each array entry contains information about the input
       pipelines that output this document.

Each array entry in the ``details`` field contains the following subfields:

.. list-table::
   :header-rows: 1
   :widths: 30 70
 
   * - Field
 
     - Description

   * - ``inputPipelineName``
 
     - The name of the input pipeline that output this document.

   * - ``rank``
 
     - The rank of this document in the input pipeline.

   * - ``weight``
 
     - The weight of the input pipeline.

   * - ``value``
 
     - Optional. If the input pipeline outputs a ``{ $meta: 'score' }`` for this
       document, ``value`` contains ``{ $meta: 'score' }``.

   * - ``description``
 
     - Optional. If the input pipeline outputs a ``description`` field as part of
       the ``scoreDetails`` for this document, ``details.description`` contains
       that field value.

   * - ``details``
 
     - The ``scoreDetails`` field of the input pipeline. If the input pipeline
       does not output a ``scoreDetails`` field, this field is an empty array.

For example, the following code blocks shows the ``scoreDetails`` field for a
``$rankFusion`` operation with ``$search``, ``$vectorSearch``, and ``$match``
input pipelines:

.. code-block:: js
   :copyable: false

   {
      value: 0.030621785881252923,
      description: "value output by reciprocal rank fusion algorithm, computed as sum of weight * (1 / (60 + rank)) across input pipelines from which this document is output, from:"
      details: [
            {
               inputPipelineName: 'search',
               rank: 2,
               weight: 1,
               value: 0.3876491287,
               description: "sum of:",
               details: [... omitted for brevity in this example ...]
            },
            {
               inputPipelineName: 'vector',
               rank: 9,
               weight: 3,
               value: 0.7793490886688232,
               details: [ ]
            },
            {
               inputPipelineName: 'match',
               rank: 10,
               weight: 1,
               details: []
            }
      ]
    }

Explain Results
~~~~~~~~~~~~~~~

MongoDB converts ``$rankFusion`` operations into a set of existing aggregation
stages that, in combination, compute the output result prior to query execution.
The :ref:`Explain Results <explain-results>` for a ``$rankFusion`` operation
show the full execution of the underlying aggregation stages that
``$rankFusion`` uses to compose the final result. 

Limitations
-----------

You cannot use ``$rankFusion`` on a :ref:`view <views-landing-page>` or within a view
definition. 

Examples
--------

.. tabs-drivers::

   .. tab::
      :tabid: shell

      This example uses a collection with embeddings and text fields. Create 
      ``search`` and ``vectorSearch`` type indexes on the collection. 

      The following index definition automatically indexes all the 
      dynamically indexable fields in the collection for running
      :pipeline:`$search` queries against the indexed fields.

      .. code-block:: js
         :caption: search Index

         db.embedded_movies.createSearchIndex(
            "search_rental",
            {
               mappings: { dynamic: true }
            }
         )

      The following index definition indexes the field with the embeddings in
      the collection for running :pipeline:`$vectorSearch` queries against
      that field. 

      .. code-block:: js 
         :caption: vectorSearch Index

         db.embedded_movies.createSearchIndex(
            "vector_index", 
            "vectorSearch", 
            {
               "fields": [
                  {
                     "type": "vector",
                     "path": "<FIELD_NAME>",
                     "numDimensions": <NUMBER_OF_DIMENSIONS>,
                     "similarity": "dotProduct"
                  }
               ]
            }
         );

      The following aggregation pipeline uses ``$rankFusion`` with the following input
      pipelines:

      .. list-table::
         :header-rows: 1
         :widths: 20 20 60
      
         * - Pipeline
  
           - Number of Documents Returned

           - Description

         * - ``searchOne``

           - 20

           - Runs a vector search on the field indexed as ``vector`` type for
             the term specified as embeddings. The query considers up to 500
             nearest neighbors, but limits the results to 20 documents.

         * - ``searchTwo``

           - 20

           - Runs a full-text search for the same term and limits the results to
             20 documents. 

      .. code-block:: js
         :linenos:

         db.embedded_movies.aggregate( [
            {
               $rankFusion: {
                  input: {
                     pipelines: {
                        searchOne: [
                           {
                              "$vectorSearch": {
                                 "index": "<INDEX_NAME>",
                                 "path": "<FIELD_NAME>",
                                 "queryVector": <QUERY_EMBEDDINGS>,
                                 "numCandidates": 500,
                                 "limit": 20
                              }
                           }
                        ],
                        searchTwo: [
                           {
                              "$search": {
                                 "index": "<INDEX_NAME>",
                                 "text": {
                                    "query": "<QUERY_TERM>",
                                    "path": "<FIELD_NAME>"
                                 }
                              }
                           },
                           { "$limit": 20 }
                        ],
                     }
                  }
               }
            },
            { $limit: 20 }
         ] )

      This operation performs the following actions:

      - Executes the ``input`` pipelines 
      - Combines the returned results
      - Outputs the first 20 documents which are the top 20 ranked results of
        the ``$rankFusion`` pipeline

   .. tab::
      :tabid: nodejs

      .. include:: /includes/driver-examples/node/aggregation/sample-mflix.rst

      .. include:: /includes/driver-examples/node/aggregation/stage-intro.rst

         .. replacement:: stage-name

            ``$rankFusion`` 
        
         .. replacement:: stage-specific-info

            Before running the following example, you must create an Atlas
            Search index named ``default``. Include the following code in your
            application to create a search index on the ``movies`` collection:

            .. literalinclude:: /includes/driver-examples/node/aggregation/examples.js
               :start-after: //start rf index
               :end-before: //end rf index
               :language: javascript
               :dedent: 2 

         .. replacement:: method-description

            executes two pipelines, ``searchPlot`` and ``searchGenre``, that
            perform :pipeline:`$search` operations by using the ``default``
            search index. The ``$rankFusion`` stage then ranks the search
            results based on each ``$search`` pipeline's assigned weight and
            returns the ordered results. The :pipeline:`$addFields` stage
            includes the ``scoreDetails`` field in the return documents

         .. replacement:: more-method-description

      .. literalinclude:: /includes/driver-examples/node/aggregation/examples.js
         :start-after: //start rankFusion
         :end-before: //end rankFusion
         :language: javascript
         :dedent: 2