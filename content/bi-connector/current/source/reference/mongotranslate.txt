==================
``mongotranslate``
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. meta::
   :description: The mongotranslate reference page.

Description
-----------

.. binary:: mongotranslate

``mongotranslate`` is a learning tool designed to help users understand
how SQL queries can be expressed in the MongoDB :manual:`aggregation
language </aggregation>`. The |bi-short|'s SQL-to-aggregation
translation engine provides the translations, which can also be used to
troubleshoot specific |bi-short| translation issues.

``mongotranslate`` is a standalone program. It requires
a :doc:`drdl </reference/mongodrdl>` file generated by
:binary:`~bin.mongodrdl`, but does not require
:binary:`~bin.mongosqld` or :binary:`~bin.mongod` to be running at the
time of execution.

Usage
-----

``mongotranslate`` has the following syntax:

.. code-block:: javascript

   mongotranslate [--query | --queryFile] <query | queryfile> [options]

Command Line Options
--------------------

.. program:: mongotranslate

.. include:: /includes/options/option-mongotranslate-query.rst

.. include:: /includes/options/option-mongotranslate-queryFile.rst

.. include:: /includes/options/option-mongotranslate-schema.rst

.. include:: /includes/options/option-mongotranslate-dbName.rst

.. include:: /includes/options/option-mongotranslate-explain.rst

.. include:: /includes/options/option-mongotranslate-format.rst

.. include:: /includes/options/option-mongotranslate-mongoversion.rst

Examples
--------

The following example specifies an inline query for translation:

.. code-block:: javascript

   mongotranslate --query=“select test.name from restaurants where name like 'Brooklyn%'” \
   --schema=schema.drdl

The above command returns the following results:

.. code-block:: json
   :copyable: false

   [
     {"$match": {"name": {"$regex": "^Brooklyn.*$","$options": "i"}}},
     {"$project": {"test_DOT_restaurants_DOT_name": "$name","_id": {"$numberInt":"0"}}},
   ]

.. note::

   If you need to quote a string inside the :option:`--query
   <mongotranslate --query>` parameter, be sure to use single quotes.
   If you must use double quotes or backticks in your query, use the
   :option:`--queryFile <mongotranslate --query>` option.

The following example specifies a query file and returns a one-line
result:

.. code-block:: javascript

   mongotranslate --queryFile=query.txt --schema=schema.drdl --format=none

The following example uses the :option:`--explain` option:

.. code-block:: javascript

   mongotranslate --query="select count(name) from restaurants;" \
   --schema=schema.drdl --explain

The above command returns the following results:

.. code-block:: json
   :copyable: false

   [
   	 {
   	    "ID": 1,
   	    "StageType": "MongoSourceStage",
   	    "Columns": "[{name: 'count(name)', type: 'int'}]",
   	    "Sources": null,
   	    "Database": {},
   	    "Tables": {},
   	    "Aliases": {},
   	    "Collections": {},
   	    "Pipeline": {},
   	    "PipelineExplain": {},
   	    "PushdownFailures": null
   	 }
   ]
