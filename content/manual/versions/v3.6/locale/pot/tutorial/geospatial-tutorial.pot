# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/geospatial-tutorial.txt:3
msgid "Find Restaurants with Geospatial Queries"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:14
msgid "Overview"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:16
msgid "MongoDB's :term:`geospatial` indexing allows you to efficiently execute spatial queries on a collection that contains geospatial shapes and points. This tutorial will briefly introduce the concepts of geospatial indexes, and then demonstrate their use with :query:`$geoWithin`, :query:`$geoIntersects`, and :dbcommand:`geoNear`."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:22
msgid "To showcase the capabilities of geospatial features and compare different approaches, this tutorial will guide you through the process of writing queries for a simple geospatial application."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:26
msgid "Suppose you are designing a mobile application to help users find restaurants in New York City. The application must:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:29
msgid "Determine the user's current neighborhood using :query:`$geoIntersects`,"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:30
msgid "Show the number of restaurants in that neighborhood using :query:`$geoWithin`, and"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:32
msgid "Find restaurants within a specified distance of the user using :query:`$nearSphere`."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:35
msgid "This tutorial will use a ``2dsphere`` index to query for this data on spherical geometry."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:38
msgid "For more information on spherical and flat geometries, see :ref:`geospatial-geometry`."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:42
msgid "Distortion"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:44
msgid "Spherical geometry will appear distorted when visualized on a map due to the nature of projecting a three dimensional sphere, such as the earth, onto a flat plane."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:48
msgid "For example, take the specification of the spherical square defined by the longitude latitude points ``(0,0)``, ``(80,0)``, ``(80,80)``, and ``(0,80)``. The following figure depicts the area covered by this region:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:55
msgid "Searching for Restaurants"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:58
msgid "Prerequisites"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:60
msgid "Download the example datasets from `<https://raw.githubusercontent.com/mongodb/docs-assets/geospatial/neighborhoods.json>`_ and `<https://raw.githubusercontent.com/mongodb/docs-assets/geospatial/restaurants.json>`_. These contain the collections ``restaurants`` and ``neighborhoods`` respectively."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:65
msgid "After downloading the datasets, import them into the database:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:72
msgid "The :dbcommand:`geoNear` command requires a geospatial index, and almost always improves performance of :query:`$geoWithin` and :query:`$geoIntersects` queries."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:76
msgid "Because this data is geographical, create a ``2dsphere`` index on each collection using the :binary:`~bin.mongo` shell:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:85
msgid "Exploring the Data"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:87
msgid "Inspect an entry in the newly-created ``restaurants`` collection from within the :binary:`~bin.mongo` shell:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:94
msgid "This query returns a document like the following:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:106
msgid "This restaurant document corresponds to the location shown in the following figure:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:111
msgid "Because the tutorial uses a ``2dsphere`` index, the geometry data in the ``location`` field must follow the :doc:`GeoJSON format </reference/geojson>`."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:114
msgid "Now inspect an entry in the ``neighborhoods`` collection:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:120
msgid "This query will return a document like the following:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:137
msgid "This geometry corresponds to the region depicted in the following figure:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:142
msgid "Find the Current Neighborhood"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:144
msgid "Assuming the userâ€™s mobile device can give a reasonably accurate location for the user, it is simple to find the user's current neighborhood with :query:`$geoIntersects`."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:148
msgid "Suppose the user is located at -73.93414657 longitude and 40.82302903 latitude. To find the current neighborhood, you will specify a point using the special :query:`$geometry` field in :term:`GeoJSON` format:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:156
msgid "This query will return the following result:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:178
msgid "Find all Restaurants in the Neighborhood"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:180
msgid "You can also query to find all restaurants contained in a given neighborhood. Run the following in the :binary:`~bin.mongo` shell to find the neighborhood containing the user, and then count the restaurants within that neighborhood:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:189
msgid "This query will tell you that there are 127 restaurants in the requested neighborhood, visualized in the following figure:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:195
msgid "Find Restaurants within a Distance"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:197
msgid "To find restaurants within a specified distance of a point, you can use either :query:`$geoWithin` with :query:`$centerSphere` to return results in unsorted order, or :query:`nearSphere` with :query:`$maxDistance` if you need results sorted by distance."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:203
msgid "Unsorted with ``$geoWithin``"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:205
msgid "To find restaurants within a circular region, use :query:`$geoWithin` with :query:`$centerSphere`. :query:`$centerSphere` is a MongoDB-specific syntax to denote a circular region by specifying the center and the radius in radians."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:209
msgid ":query:`$geoWithin` does not return the documents in any specific order, so it may show the user the furthest documents first."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:212
msgid "The following will find all restaurants within five miles of the user:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:220
msgid ":query:`$centerSphere`'s second argument accepts the radius in radians, so you must divide it by the radius of the earth in miles. See :doc:`/tutorial/calculate-distances-using-spherical-geometry-with-2d-geospatial-indexes` for more information on converting between distance units."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:226
msgid "Sorted with ``$nearSphere``"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:228
msgid "You may also use :query:`$nearSphere` and specify a :query:`$maxDistance` term in meters. This will return all restaurants within five miles of the user in sorted order from nearest to farthest:"
msgstr ""

