.. _mongorestore:

================
``mongorestore``
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. |tool-binary| replace:: mongorestore

.. include:: /includes/admonition-mac-osx-sierra-restriction.rst

Synopsis
--------

The :binary:`~bin.mongorestore` program loads data from either a binary
database dump created by :binary:`~bin.mongodump` or the standard input
(starting in version 3.0.0) into a :binary:`~bin.mongod` or
:binary:`~bin.mongos` instance.

For an overview of :binary:`~bin.mongorestore` usage, see
:doc:`/tutorial/backup-and-restore-tools`.

Syntax
------

.. include:: /includes/extracts/require-cmd-line-mongorestore.rst

.. code-block:: sh

   mongorestore [options] [<directory>/<BSON file>]


For example, to restore from a ``dump`` directory to a local
:binary:`~bin.mongod` instance running on port ``27017``:

.. code-block:: sh

   mongorestore  dump/

As :binary:`~bin.mongorestore` restores from the ``dump/`` directory,
it creates the database and collections as needed and logs its progress:

.. code-block:: sh
   :copyable: false

   2019-07-13T10:05:40.353-0400   preparing collections to restore from
   2019-07-13T10:05:40.386-0400   reading metadata for test.bakesales from dump/test/bakesales.metadata.json
   2019-07-13T10:05:40.403-0400   reading metadata for test.salaries from dump/test/salaries.metadata.json
   2019-07-13T10:05:40.434-0400   restoring test.bakesales from dump/test/bakesales.bson
   2019-07-13T10:05:40.464-0400   restoring test.salaries from dump/test/salaries.bson
   2019-07-13T10:05:40.473-0400   no indexes to restore
   2019-07-13T10:05:40.473-0400   finished restoring test.bakesales (21 documents)
   2019-07-13T10:05:40.490-0400   no indexes to restore
   2019-07-13T10:05:40.491-0400   finished restoring test.salaries (10 documents)
   2019-07-13T10:05:40.491-0400   restoring users from dump/admin/system.users.bson
   2019-07-13T10:05:40.559-0400   restoring roles from dump/admin/system.roles.bson
   2019-07-13T10:05:40.711-0400   done

You can also restore a specific collection or collections from the
``dump/`` directory. For example, the following operation restores a
single collection from corresponding data files in the ``dump/``
directory:

.. code-block:: sh

   mongorestore --nsInclude test.purchaseorders dump/

If the ``dump/`` directory does not contain the corresponding data file
for the specified namespace, no data will be restored. For example, the
following specifies a collection namespace that does not have a
corresponding data in the ``dump/`` directory:

.. code-block:: sh

   mongorestore --nsInclude foo.bar dump/

The :binary:`~bin.mongorestore` outputs the following messages:

.. code-block:: sh
   :copyable: false

   2019-07-13T10:06:36.095-0400   preparing collections to restore from
   2019-07-13T10:06:36.095-0400   done

For more examples, see :ref:`mongorestore-examples`.

For more information on the options and arguments, see
:ref:`mongorestore-options`.

Behavior
--------

Insert Only
~~~~~~~~~~~

:binary:`~bin.mongorestore` can create a new database or add data to an
existing database. However, :binary:`~bin.mongorestore` performs inserts
only and does not perform updates. That is, if restoring documents to
an existing database and collection and existing documents have the
same value ``_id`` field as the to-be-restored documents,
:binary:`~bin.mongorestore` will *not* overwrite those documents.

Rebuild Indexes
~~~~~~~~~~~~~~~

:binary:`~bin.mongorestore` recreates indexes recorded by
:binary:`~bin.mongodump`.

.. note::

   Starting in MongoDB 2.6, creating indexes will :ref:`error if an
   index key in an existing document exceeds the limit
   <2.6-index-key-length-incompatibility>`. See
   :ref:`2.6-index-key-length-incompatibility` for more information and
   solution.

   If you have an existing data set that violates this limit but want
   to resolve the index issue after restoring the data, you can disable
   the default index key length validation on the target database by
   setting the :program:`mongod` instance's
   :parameter:`failIndexKeyTooLong` parameter to false.

Version Compatibility
~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/warning-mongodump-compatibility-2.2.rst

Exclude ``system.profile`` Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:binary:`~bin.mongorestore` does not restore the :data:`system.profile
<<database>.system.profile>` collection data.

.. _mongorestore-required-access:

Required Access
---------------

To restore data to a MongoDB deployment that has :doc:`access control
</core/authorization>` enabled, the :authrole:`restore` role provides
the necessary privileges to restore data from backups *if* the data does
not include :data:`system.profile <<database>.system.profile>`
collection data and you run :binary:`~bin.mongorestore` without the
:option:`--oplogReplay <mongorestore --oplogReplay>` option.

.. include:: /includes/access-mongorestore-collections.rst

.. _mongorestore-options:

Options
-------

.. versionchanged:: 3.0.0
   :binary:`~bin.mongorestore` removed the ``--filter``, ``--dbpath``, and the
   ``--noobjcheck`` options.

.. binary:: mongorestore

.. program:: mongorestore

.. option:: --help

   Returns information on the options and use of :program:`mongorestore`.


.. option:: --verbose, -v

   Increases the amount of internal reporting returned on standard output
   or in log files. Increase the verbosity with the ``-v`` form by
   including the option multiple times, (e.g. ``-vvvvv``.)
   


.. option:: --quiet

   Runs :program:`mongorestore` in a quiet mode that attempts to limit the amount
   of output.

   This option suppresses:
   
   - output from :term:`database commands <database command>`
   
   - replication activity
   
   - connection accepted events
   
   - connection closed events


.. option:: --version

   Returns the :program:`mongorestore` release number.


.. option:: --uri <connectionString>

   .. versionadded:: 3.4.6
   
   Specify a resolvable :doc:`URI connection string
   </reference/connection-string/>` to connect to the MongoDB deployment.
   
   .. code-block:: none
   
      --uri "mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]"
   
   For more information on the components of the connection string, see
   the :doc:`Connection String URI Format
   </reference/connection-string/>` documentation.

   .. important::

      Due to a known bug with legacy versions of
      :program:`mongorestore` (versions shipped alongside MongoDB 4.2
      and previous), you **must** use the :option:`--db` option to
      specify the database name to restore into **if** you are restoring
      a single :term:`BSON` file. The ``/database`` specified in
      the connection string will only be used as the
      :ref:`authentication database <authentication-database>` in this
      case.

      If restoring from a directory or archive file, you should specify
      the database name to restore into using the connection string as
      normal, and not use the :option:`--db` option.

   .. important::
   
      The following command-line options cannot be used in conjunction
      with :option:`--uri` option:
   
      - :option:`--host`
      - :option:`--port`
      - :option:`--username`
      - :option:`--password`  (if the
        :doc:`URI </reference/connection-string/>` connection string also includes the password)
      - :option:`--authenticationDatabase`
      - :option:`--authenticationMechanism`
   
      Instead, specify these options as part of your :option:`--uri` 
      connection string.


.. option:: --host <hostname><:port>, -h <hostname><:port>

   *Default*: localhost:27017

   Specifies a resolvable hostname for the :binary:`~bin.mongod` to which to
   connect. By default, the :program:`mongorestore` attempts to connect to a MongoDB
   instance running on the localhost on port number ``27017``.
   
   To connect to a replica set, specify the
   :setting:`~replication.replSetName` and a seed list of set members, as in
   the following:
   
   .. code-block:: none
   
      --host <replSetName>/<hostname1><:port>,<hostname2><:port>,<...>
   
   When specifying the replica set list format, :program:`mongorestore` always connects to
   the :term:`primary <Primary>`. 
   
   You can also connect to any single member of the replica set by specifying
   the host and port of only that member:
   
   .. code-block:: none
   
      --host <hostname1><:port>
   
   .. versionchanged:: 3.0.0
      If you use IPv6 and use the ``<address>:<port>`` format, you must
      enclose the portion of an address and port combination in
      brackets (e.g. ``[<address>]``).
   
   .. note::
   
      You cannot specify both :option:`--host` and :option:`--uri`.


.. option:: --port <port>

   *Default*: 27017

   Specifies the TCP port on which the MongoDB instance listens for
   client connections.
   
   .. note::
   
      You cannot specify both :option:`--port` and :option:`--uri`.


.. option:: --ssl

   .. versionadded:: 2.6
   
   Enables connection to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   TLS/SSL support enabled.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslCAFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   :file:`.pem` file using relative or absolute paths.
   
   .. include:: /includes/extracts/ssl-facts-ca-file.rst
   
   .. warning::
   
      **Version 3.2 and earlier:** For TLS/SSL connections (``--ssl``) to
      :binary:`~bin.mongod` and :binary:`~bin.mongos`, if the :program:`mongorestore` runs without the
      :option:`--sslCAFile`, :program:`mongorestore` will not attempt
      to validate the server certificates. This creates a vulnerability
      to expired :binary:`~bin.mongod` and :binary:`~bin.mongos` certificates as
      well as to foreign processes posing as valid :binary:`~bin.mongod` or
      :binary:`~bin.mongos` instances. Ensure that you *always* specify the
      CA file to validate the server certificates in cases where
      intrusion is a possibility.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --sslPEMKeyFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the :file:`.pem` file using relative
   or absolute paths.
   
   This option is required when using the :option:`--ssl` option to connect
   to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   :setting:`~net.ssl.CAFile` enabled *without*
   :setting:`~net.ssl.allowConnectionsWithoutCertificates`.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslPEMKeyPassword <value>

   .. versionadded:: 2.6
   
   Specifies the password to de-crypt the certificate-key file (i.e.
   :option:`--sslPEMKeyFile`). Use the :option:`--sslPEMKeyPassword` option only if the
   certificate-key file is encrypted. In all cases, the :program:`mongorestore` will
   redact the password from all logging and reporting output.
   
   If the private key in the PEM file is encrypted and you do not specify
   the :option:`--sslPEMKeyPassword` option, the :program:`mongorestore` will prompt for a passphrase. See
   :ref:`ssl-certificate-password`.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --sslCRLFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains the Certificate Revocation
   List. Specify the file name of the :file:`.pem` file using relative or
   absolute paths.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslAllowInvalidCertificates

   .. versionadded:: 2.6
   
   Bypasses the validation checks for server certificates and allows
   the use of invalid certificates. When using the
   :setting:`~net.ssl.allowInvalidCertificates` setting, MongoDB logs as a
   warning the use of the invalid certificate.
   
   .. include:: /includes/extracts/ssl-facts-x509-invalid-certificate.rst
   
   .. include:: /includes/extracts/ssl-facts-invalid-cert-warning-clients.rst
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslAllowInvalidHostnames

   .. versionadded:: 3.0
   
   Disables the validation of the hostnames in TLS/SSL certificates. Allows
   :program:`mongorestore` to connect to MongoDB instances even if the hostname in their
   certificates do not match the specified hostname.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --sslFIPSMode

   .. versionadded:: 2.6
   
   Directs the :program:`mongorestore` to use the FIPS mode of the installed OpenSSL
   library. Your system must have a FIPS compliant OpenSSL library to use
   the :option:`--sslFIPSMode` option.
   
   .. include:: /includes/note-fips-is-enterprise-only.rst


.. option:: --username <username>, -u <username>

   Specifies a username with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the :option:`--password` and
   :option:`--authenticationDatabase` options.
   
   .. note::
   
      You cannot specify both :option:`--username` and :option:`--uri`.


.. option:: --password <password>, -p <password>

   Specifies a password with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the :option:`--username` and
   :option:`--authenticationDatabase` options.
   
   .. versionchanged:: 3.0.2
   
      To prompt the user
      for the password, pass the :option:`--username` option without
      :option:`--password` or specify an empty string as the :option:`--password` value,
      as in ``--password ""`` .
   
   .. note::
   
      You cannot specify both :option:`--password` and :option:`--uri`.


.. option:: --authenticationDatabase <dbname>

   Specifies the authentication database where the specified :option:`--username` has been created.
   See :ref:`user-authentication-database`.
   
   .. note::
   
      You cannot specify both :option:`--authenticationDatabase` and :option:`--uri`.


.. option:: --authenticationMechanism <name>

   *Default*: SCRAM-SHA-1

   .. versionchanged:: 2.6
      Added support for the ``PLAIN`` and ``MONGODB-X509`` authentication
      mechanisms.
   
   .. versionchanged:: 3.0
      Added support for the ``SCRAM-SHA-1`` authentication mechanism. Changed
      default mechanism to ``SCRAM-SHA-1``.
   

   Specifies the authentication mechanism the :program:`mongorestore` instance uses to
   authenticate to the :binary:`~bin.mongod` or :binary:`~bin.mongos`.
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - :ref:`SCRAM-SHA-1 <authentication-scram-sha-1>`
   
        - `RFC 5802 <https://tools.ietf.org/html/rfc5802>`_ standard
          Salted Challenge Response Authentication Mechanism using the SHA1
          hash function.
   
      * - :ref:`MONGODB-CR <authentication-mongodb-cr>`
   
        - MongoDB challenge/response authentication. (*Deprecated in MongoDB 3.6*)
   
      * - :ref:`MONGODB-X509 <security-auth-x509>`
   
        - MongoDB TLS/SSL certificate authentication.
   
      * - :ref:`GSSAPI <security-auth-kerberos>` (Kerberos)
   
        - External authentication using Kerberos. This mechanism is
          available only in `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise-advanced?jmp-docs>`_.
   
      * - :ref:`PLAIN <security-auth-ldap>` (LDAP SASL)
   
        - External authentication using LDAP. You can also use ``PLAIN``
          for authenticating in-database users. ``PLAIN`` transmits
          passwords in plain text. This mechanism is available only in
          `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise-advanced?jmp-docs>`_.
   
   .. note::
   
      You cannot specify both :option:`--authenticationMechanism` and :option:`--uri`.


.. option:: --gssapiServiceName

   .. versionadded:: 2.6
   
   Specify the name of the service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. Only required if the service does not use the
   default name of ``mongodb``.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --gssapiHostName

   .. versionadded:: 2.6
   
   Specify the hostname of a service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. *Only* required if the hostname of a machine does
   not match the hostname resolved by DNS.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --db <database>, -d <database>

   
   Specifies the destination database for :program:`mongorestore` to restore data
   *into* when restoring from a BSON file. If the database does not
   exist, :program:`mongorestore` creates the database. For example, the following
   restores the ``salaries`` collection into the ``reporting`` database.
   
   .. code-block:: sh
      :copyable: false
   
      mongorestore --db reporting dump/test/salaries.bson 
   
   If you do not specify :option:`--db`, :program:`mongorestore` takes the database name
   from the data files.
   
   The use of :option:`--db` and :option:`--collection` options are
   deprecated when restoring from a directory or an archive file.
   Instead, to restore from an archive or a directory, see
   :option:`--nsInclude` instead.



.. option:: --collection <collection>, -c <collection>

   
   Specifies the name of the destination collection for :program:`mongorestore` to
   restore data *into* when restoring from a BSON file. If
   you do not specify :option:`--collection`, :program:`mongorestore` takes
   the collection name from the input filename. If the input file has an
   extension, MongoDB omits the extension of the file from the collection
   name.
   
   .. code-block:: sh
      :copyable: false
   
      mongorestore --db reporting --collection employeesalaries dump/test/salaries.bson 
   
   The use of :option:`--db` and :option:`--collection` options are
   deprecated when restoring from a directory or an archive file.
   Instead, to restore from an archive or a directory, see
   :option:`--nsInclude` instead.


.. option:: --nsExclude <namespace pattern>

   .. versionadded:: 3.4
   

   
   Specifies a :term:`namespace` pattern (e.g. ``"test.myCollection"``,
   ``"reporting.*"``, ``"dept*.bar"``) to *exclude* the matching
   namespaces from the restore. In the pattern, you can use asterisks
   ``*`` as *wild cards*. For an example of the wildcard pattern, see
   :ref:`example-basic-wildcard-usage`.
   
   You can specify :option:`--nsExclude` multiple times to exclude multiple namespace
   patterns.


.. option:: --nsInclude <namespace pattern>

   .. versionadded:: 3.4
   

   
   Specifies a :term:`namespace` pattern (e.g. ``"test.myCollection"``,
   ``"reporting.*"``, ``"dept*.bar"``) to restore only the namespaces
   that match the pattern. In the pattern, you can use asterisks ``*``
   as *wild cards*. For an example of the wildcard pattern, see
   :ref:`example-basic-wildcard-usage`.
   
   You can specify :option:`--nsInclude` multiple times to include multiple namespace
   patterns.
   
   If source directory or file (i.e. the directory/file from which you
   are restoring the data) does not contain data files that match the
   namespace pattern, no data will be restored.


.. option:: --nsFrom <namespace pattern>

   .. versionadded:: 3.4
   

   Use with :option:`--nsTo` to rename a :term:`namespace` during the
   restore operation. :option:`--nsFrom` specifies the collection in the
   dump file, while :option:`--nsTo` specifies the name that should be
   used in the restored database.

   .. include:: /includes/extracts/ns-pattern-complex-from.rst
   


.. option:: --nsTo <namespace pattern>

   .. versionadded:: 3.4
   

   Use with :option:`--nsFrom` to rename a :term:`namespace` during the
   restore operation. :option:`--nsTo` specifies the new collection
   name to use in the restored database, while
   :option:`--nsFrom` specifies the name in the dump file.

   .. include:: /includes/extracts/ns-pattern-complex-to.rst
   


.. option:: --objcheck

   Forces :program:`mongorestore` to validate all requests from clients
   upon receipt to ensure that clients never insert invalid documents into
   the database. For objects with a high degree of sub-document nesting,
   :option:`--objcheck` can have a small impact on performance.


.. option:: --drop

   Before restoring the collections from the dumped backup, drops the
   collections from the target database. :option:`--drop` does not drop
   collections that are not in the backup.
   
   When the restore includes the ``admin`` database, :program:`mongorestore` with
   :option:`--drop` removes all user credentials and replaces them with the
   users defined in the dump file. Therefore, in systems with
   :setting:`~security.authorization` enabled, :program:`mongorestore` must be able
   to authenticate to an existing user *and* to a user defined in the
   dump file. If :program:`mongorestore` can't authenticate to a user defined in the
   dump file, the restoration process will fail, leaving an empty
   database.


.. option:: --dryRun

   .. versionadded:: 3.4
   

   Runs :program:`mongorestore` without actually importing any data, returning the
   :program:`mongorestore` summary information. Use with ``--verbose`` to produce
   more detailed summary information.


.. option:: --oplogReplay

   After restoring the database dump, replays the :term:`oplog` entries
   from a bson file.
   When used in conjunction with :option:`mongodump --oplog`,
   :binary:`~bin.mongorestore --oplogReplay <mongorestore>`
   restores the database to the point-in-time backup captured with the
   ``mongodump --oplog`` command. 
   
   :program:`mongorestore` searches for any valid source  for the bson file
   in the following locations:
   
   - The top level of the dump directory, as in the case of a dump created
     with :option:`mongodump --oplog`.
   
   - The path specified by :option:`--oplogFile`.
   
   - ``<dump-directory>/local/oplog.rs.bson``, as in the case of a dump
     of the ``oplog.rs`` collection in the ``local`` database
     on a :binary:`~bin.mongod` that is a member of a replica set.
   
   - ``<dump-directory>/local/oplog.$main.bson``, as in the case of a dump
     of the ``oplog.rs`` collection in the ``local`` database
     on a :binary:`~bin.mongod` that uses master-slave replication.
   
   If there is an ``oplog.bson`` file at the top level of the dump
   directory **and** a path specified by :option:`--oplogFile`,
   :program:`mongorestore` returns an error.
      
   If there is an ``oplog.bson`` file at the top level of the dump directory,
   :program:`mongorestore` restores that file as the oplog. If there are also bson
   files in the ``dump/local`` directory, :program:`mongorestore` restores them like
   normal collections.
   
   If you specify an oplog file using :option:`--oplogFile`,
   :program:`mongorestore` restores that file as the oplog. If there are also bson
   files in the ``dump/local`` directory, :program:`mongorestore` restores them like
   normal collections.
   
   If there is both an ``oplog.rs.bson`` and an ``oplog.$main.bson``
   file in the ``dump/local`` directory **and** there is no
   ``oplog.bson`` file at the top level of the dump directory or file
   specified with :option:`--oplogFile`, :program:`mongorestore` returns an error.
   
   For an example of :option:`--oplogReplay`, see :ref:`backup-restore-oplogreplay`.
   
   .. note::
   
      When using :binary:`~bin.mongorestore` with :option:`--oplogReplay` to restore
      a replica set, you must restore a full dump of a :term:`replica set` member created 
      using :option:`mongodump --oplog`.

      :binary:`~bin.mongorestore` with :option:`--oplogReplay` fails if you use any of 
      the following options to limit the data to be restored:
   
      - :option:`--db`
      - :option:`--collection`
      - :option:`--nsInclude`
      - :option:`--nsExclude`
   
   .. seealso:: :ref:`mongorestore Required Access <mongorestore-required-access>`
   
   .. seealso:: :option:`mongodump --oplog`


.. option:: --oplogLimit <timestamp>

   Prevents :program:`mongorestore` from applying :term:`oplog` entries
   with timestamp newer than or equal to ``<timestamp>``. Specify
   ``<timestamp>`` values in the form of ``<time_t>:<ordinal>``, where
   ``<time_t>`` is the seconds since the UNIX epoch, and ``<ordinal>``
   represents a counter of operations in the oplog that occurred in the
   specified second.
   
   You must use :option:`--oplogLimit` in conjunction with the
   :option:`--oplogReplay` option.


.. option:: --oplogFile <path>

   .. versionadded:: 3.4
   

   Specifies the path to the oplog file containing oplog data for the
   restore. Use with :option:`--oplogReplay`. 
   
   If you specify :option:`--oplogFile` and there is an :file:`oplog.bson`
   file at the top level of the dump directory, :program:`mongorestore` returns an 
   error.


.. option:: --keepIndexVersion

   Prevents :program:`mongorestore` from upgrading the index to the latest
   version during the restoration process.


.. option:: --noIndexRestore

   Prevents :program:`mongorestore` from restoring and building indexes as
   specified in the corresponding :binary:`~bin.mongodump` output.


.. option:: --noOptionsRestore

   Prevents :program:`mongorestore` from setting the collection options,
   such as those specified by the :dbcommand:`collMod` :term:`database
   command`, on restored collections.


.. option:: --restoreDbUsersAndRoles

   Restore user and role definitions for the given database. See
   :doc:`/reference/system-roles-collection` and
   :doc:`/reference/system-users-collection` for more information.

   .. note::

      The :option:`--restoreDbUsersAndRoles` option cannot be used if
      specifying the ``admin`` database to the :option:`--db
      <mongorestore --db>` option, and attempting to do so will result
      in an error. Restoring the ``admin`` database by specifying
      :option:`--db admin <mongorestore --db>` to
      :program:`mongorestore` already restores all users and roles.


.. option:: --writeConcern <document>

   *Default*: majority

   Specifies the :term:`write concern` for each write operation that :program:`mongorestore`
   performs.
   
   Specify the write concern as a document with :ref:`w options <wc-w>`. For example:
   
   .. code-block:: sh
   
      --writeConcern "{w:'majority'}"


.. option:: --maintainInsertionOrder

   *Default*: false

   If specified, :program:`mongorestore` inserts the documents in the order of
   their appearance in the input source, otherwise :program:`mongorestore` may
   perform the insertions in an arbitrary order.


.. option:: --numParallelCollections int, -j int

   *Default*: 4

   Number of collections :program:`mongorestore` should restore
   in parallel.

   If you specify ``-j`` when restoring a *single* collection, ``-j``
   maps to the :option:`--numInsertionWorkersPerCollection` option rather than
   :option:`--numParallelCollections`.


.. option:: --numInsertionWorkersPerCollection int

   *Default*: 1

   .. versionadded:: 3.0.0
   
   Specifies the number of insertion workers to run concurrently per collection.
   

   For large imports, increasing the number of insertion workers
   may increase the speed of the import.
   


.. option:: --stopOnError

   .. versionadded:: 3.0
   
   Forces :program:`mongorestore` to halt the restore when it encounters an
   error.


.. option:: --bypassDocumentValidation

   Enables :program:`mongorestore` to bypass :doc:`document validation </core/schema-validation>`
   during the operation. This lets you insert documents that do not
   meet the validation requirements.
   
   .. versionadded:: 3.2.1


.. _mongorestore-path-option:

.. option:: --gzip

   .. versionadded:: 3.2
   
   Restores from compressed files or data stream created by
   :option:`mongodump --gzip`
   
   To restore from a dump directory that contains compressed files, run
   :binary:`~bin.mongorestore` with the :option:`--gzip` option.
   
   To restore from a compressed archive file, run :binary:`~bin.mongorestore` with
   both the :option:`--gzip`  and the `--archive` options.
   


.. option:: --archive <=file|null>

   .. versionadded:: 3.2
   
   Restores from an archive file or from the standard input (``stdin``).
   
   To restore from an archive file, run :program:`mongorestore` with the ``--archive``
   option and the archive filename.
   
   To restore from the standard input, run :program:`mongorestore` with the
   ``--archive`` option but *omit* the filename.
   
   .. note::
   
      - You cannot use the ``--archive`` option with the :option:`--dir`
        option. 
   
      - If you use the :option:`--archive` option with the :option:`\<path\>`
        parameter, :program:`mongorestore` ignores :option:`\<path\>` parameter.
    
      - :program:`mongorestore` still supports the positional ``-`` parameter to
        restore a *single* collection from the standard input.


.. option:: <path>

   
   The directory path or BSON file name from which to restore data.
   
   You cannot specify both the ``<path>`` argument and the ``--dir``
   option, which also specifies the dump directory, to :program:`mongorestore`.


.. option:: --dir string

   Specifies the dump directory.
   
   - You cannot specify both the ``--dir`` option and the ``<path>``
     argument, which also specifies the dump directory, to :program:`mongorestore`.
   
   - You cannot use the ``--archive`` option with the ``--dir`` option.


.. _mongorestore-examples:

Examples
--------

Restore with Access Control
~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following example, :binary:`~bin.mongorestore` restores from
``/opt/backup/mongodump-2011-10-24`` to a :binary:`~bin.mongod`
instance running on port ``27017`` on the host
``mongodb1.example.net``. The :option:`--uri <mongorestore --uri>`
string omits the user's password to have :binary:`~bin.mongorestore`
prompt for the password.

.. code-block:: sh

   mongorestore --uri "mongodb://user@mongodb1.example.net:27017/?authSource=admin" /opt/backup/mongodump-2011-10-24

Alternatively, you can specify the host, port, username, and
authentication database using :option:`--host <mongorestore --host>`,
:option:`--port <mongorestore --port>`, :option:`--username <mongorestore
--username>`, and :option:`--authenticationDatabase <mongorestore
--authenticationDatabase>`.  Omit :option:`--password <mongorestore
--password>` to have :binary:`~bin.mongorestore` prompt for the password:

.. code-block:: sh

   mongorestore --host mongodb1.example.net --port 27017 --username user --authenticationDatabase=admin /opt/backup/mongodump-2011-10-24

Restore a Collection
~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.4

To restore a specific collection, use :option:`--nsInclude
<mongorestore --nsInclude>`, passing in the full namespace
(``<database>.<collection>``) of the collection.

For example, the following restores the collection named
``purchaseorders`` in the database ``test`` from the corresponding
files located in the ``dump/`` directory.

.. code-block:: sh

   mongorestore --nsInclude test.purchaseorders dump/

The :binary:`~bin.mongorestore` outputs the results, including the
number of documents restored:

.. code-block:: sh
   :copyable: false
   
   2019-07-13T10:09:17.942-0400   preparing collections to restore from
   2019-07-13T10:09:17.957-0400   reading metadata for test.purchaseorders from dump/test/purchaseorders.metadata.json
   2019-07-13T10:09:18.010-0400   restoring test.purchaseorders from dump/test/purchaseorders.bson
   2019-07-13T10:09:18.033-0400   no indexes to restore
   2019-07-13T10:09:18.033-0400   finished restoring test.purchaseorders (6 documents)
   2019-07-13T10:09:18.033-0400   done

If the ``dump/`` directory does not contain the corresponding data
files for the specified namespace, no data will be restored:

.. code-block:: sh
   :copyable: false

   2019-07-13T10:10:05.779-0400   preparing collections to restore from
   2019-07-13T10:10:05.779-0400   done

Alternatively, you can restore a specific collection using the
:option:`--db <mongorestore --db>`, :option:`--collection <mongorestore
--collection>`, and a ``.bson`` file:

.. code-block:: sh

   mongorestore --db test --collection purchaseorders dump/test/purchaseorders.bson

.. code-block:: sh
   :copyable: false

   2019-07-13T10:11:00.093-0400   checking for collection data in dump/test/purchaseorders.bson
   2019-07-13T10:11:00.110-0400   reading metadata for test.purchaseorders from dump/test/purchaseorders.metadata.json
   2019-07-13T10:11:00.158-0400   restoring test.purchaseorders from dump/test/purchaseorders.bson
   2019-07-13T10:11:00.223-0400   no indexes to restore
   2019-07-13T10:11:00.223-0400   finished restoring test.purchaseorders (6 documents)
   2019-07-13T10:11:00.223-0400   done

.. _example-basic-wildcard-usage:

Restore Collections Using Wild Cards
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.4

:option:`--nsInclude <mongorestore --nsInclude>` and
:option:`--nsExclude <mongorestore --nsExclude>` support specifying the
:term:`namespaces <namespace>` you wish to include or exclude from a
restore operation using asterisks as *wild cards*.

The following example restores the documents in the ``dump/``
sub-directory of the current directory that match the specified
namespace pattern. The :option:`--nsInclude <mongorestore --nsInclude>`
statement specifies to only restore documents in the ``transactions``
database while :option:`--nsExclude <mongorestore --nsExclude>`
instructs :binary:`~bin.mongorestore` to exclude collections whose
names end with ``_dev``. :binary:`~bin.mongorestore` restores data to
the :binary:`~bin.mongod` instance running on the localhost interface
on port ``27017``.

.. code-block:: sh

   mongorestore --nsInclude 'transactions.*' --nsExclude 'transactions.*_dev' dump/

.. _example-complex-wildcard-usage:

Change Collections' Namespaces during Restore
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.4

MongoDB 3.4 added the :option:`--nsFrom <mongorestore --nsFrom>` and
:option:`--nsTo <mongorestore --nsTo>` options, which enable you to
change the namespace of a collection that you are restoring.
:option:`--nsFrom <mongorestore --nsFrom>` and :option:`--nsTo
<mongorestore --nsTo>` support using asterisks as wild cards *and*
support using dollar signs to delimit "wild card" variables to use in
the replacement.

Consider a database ``data`` that you have exported to a ``dump/``
directory using :binary:`~bin.mongodump`. The ``data`` database
contains the following collections:

- ``sales_customer1``
- ``sales_customer2``
- ``sales_customer3``
- ``users_customer1``
- ``users_customer2``
- ``users_customer3``

Using :option:`--nsFrom <mongorestore --nsFrom>` and :option:`--nsTo
<mongorestore --nsTo>`, you can restore the data into different
namespaces. The following operation

- restores the ``sales_<customerName>`` collections in the ``data``
  database to ``sales`` collections in the ``<customerName>`` database,
  and

- restores the ``users_<customerName>`` collections to ``users``
  collections in the ``<customerName>`` database.

.. code-block:: sh

   mongorestore --nsInclude 'data.*' --nsFrom 'data.$prefix$_$customer$' --nsTo '$customer$.$prefix$'

.. _mongorestore-example-archive-file:

Restore from an Archive File
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To restore from an archive file, run :binary:`~bin.restore` with the new
``--archive`` option and the archive filename.

.. code-block:: sh

   mongorestore --archive=test.20150715.archive 

.. _mongorestore-example-archive-file-db:

Restore a Database from an Archive File
````````````````````````````````````````

.. versionadded:: 3.2

To restore from an archive file, run :binary:`~bin.restore` with the new
``--archive`` option and the archive filename. For example, the
following operation restores the ``test`` database from the file
``test.20150715.archive``.

.. code-block:: sh

   mongorestore --archive=test.20150715.archive  --nsInclude "test.*"


.. _mongorestore-example-gzip:

Restore from Compressed Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.2
   With the ``--gzip`` option, :binary:`~bin.mongorestore` can restore from
   compressed files or data stream created by :binary:`~bin.mongodump`.

To restore from a dump directory that contains compressed files, run
:binary:`~bin.mongorestore` with the :option:`--gzip <mongorestore
--gzip>`. For example, the following operation restores the ``test``
database from the compressed files located in the default ``dump``
directory:

.. code-block:: sh

   mongorestore --gzip  --nsInclude "test.*" dump/

To restore from a compressed archive file, run
:binary:`~bin.mongorestore` with the :option:`--gzip <mongorestore
--gzip>` option and the :option:`--archive <mongorestore --archive>`
option. For example, the following operation restores the ``test``
database from the archive file ``test.20150715.gz``.

.. code-block:: sh

   mongorestore --gzip --archive=test.20150715.gz --nsInclude "test.*"

.. _mongorestore-example-archive-stdin:

Restore a Database from Standard Input
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.2

To restore from the standard input, run :binary:`~bin.mongorestore`
with the :option:`--archive <mongorestore --archive>` option but *omit*
the filename. For example:

.. code-block:: sh

   mongodump --archive --db test --port 27017 | mongorestore --archive --port 27018

