#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/replica-set-sync.txt:5
msgid "Replica Set Data Synchronization"
msgstr ""

#: ../source/core/replica-set-sync.txt:15
msgid ""
"In order to maintain up-to-date copies of the shared data set, secondary "
"members of a replica set :term:`sync` or replicate data from other "
"members. MongoDB uses two forms of data synchronization: initial sync to "
"populate new members with the full data set, and replication to apply "
"ongoing changes to the entire data set."
msgstr ""

#: ../source/core/replica-set-sync.txt:25
msgid "Initial Sync"
msgstr ""

#: ../source/core/replica-set-sync.txt:27
msgid ""
"Initial sync copies all the data from one member of the replica set to "
"another member."
msgstr ""

#: ../source/core/replica-set-sync.txt:31
msgid "Process"
msgstr ""

#: ../source/core/replica-set-sync.txt:33
msgid "When you perform an initial sync, MongoDB:"
msgstr ""

#: ../source/core/replica-set-sync.txt:35
msgid ""
"Clones all databases except the :ref:`local <replica-set-local-database>`"
" database. To clone, the :binary:`~bin.mongod` scans every collection in "
"each source database and inserts all data into its own copies of these "
"collections."
msgstr ""

#: ../source/core/replica-set-sync.txt:40
msgid ""
"Initial sync builds all collection indexes as the documents are copied "
"for each collection. In earlier versions of MongoDB, only the ``_id`` "
"indexes are built during this stage."
msgstr ""

#: ../source/core/replica-set-sync.txt:45
msgid ""
"Initial sync pulls newly added oplog records during the data copy. Ensure"
" that the target member has enough disk space in the ``local`` database "
"to temporarily store these oplog records for the duration of this data "
"copy stage."
msgstr ""

#: ../source/core/replica-set-sync.txt:51
msgid ""
"Applies all changes to the data set. Using the oplog from the source, the"
" :binary:`~bin.mongod` updates its data set to reflect the current state "
"of the replica set."
msgstr ""

#: ../source/core/replica-set-sync.txt:55
msgid ""
"When the initial sync finishes, the member transitions from "
":replstate:`STARTUP2` to :replstate:`SECONDARY`."
msgstr ""

#: ../source/core/replica-set-sync.txt:58
msgid ""
"To perform an initial sync, see :doc:`/tutorial/resync-replica-set-"
"member`."
msgstr ""

#: ../source/core/replica-set-sync.txt:64
msgid "Fault Tolerance"
msgstr ""

#: ../source/core/replica-set-sync.txt:66
msgid ""
"To recover from transient network or operation failures, initial sync has"
" built-in retry logic."
msgstr ""

#: ../source/core/replica-set-sync.txt:71
msgid ""
"MongoDB 3.4 improves the initial sync retry logic to be more resilient to"
" intermittent failures on the network."
msgstr ""

#: ../source/core/replica-set-sync.txt:78
msgid "Replication"
msgstr ""

#: ../source/core/replica-set-sync.txt:80
msgid ""
"Secondary members replicate data continuously after the initial sync. "
"Secondary members copy the :doc:`oplog </core/replica-set-oplog>` from "
"their *sync from* source and apply these operations in an asynchronous "
"process. [#slow-oplogs]_"
msgstr ""

#: ../source/core/replica-set-sync.txt:85
msgid ""
"Secondaries may automatically change their *sync from* source as needed "
"based on changes in the ping time and state of other members' "
"replication."
msgstr ""

#: ../source/includes/fact-voting-node-sync-incompatibility.rst:1
msgid ""
"MongoDB 3.2 replica set members with :rsconf:`1 vote <members[n].votes>` "
"cannot sync from members with  :rsconf:`0 votes <members[n].votes>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:93
msgid ""
"Secondaries avoid syncing from :ref:`delayed members <replica-set-"
"delayed-members>` and :ref:`hidden members <replica-set-hidden-members>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:97
msgid ""
"If a secondary member has :rsconf:`members[n].buildIndexes` set to "
"``true``, it can only sync from other members where "
":rsconf:`~members[n].buildIndexes` is ``true``. Members where "
":rsconf:`~members[n].buildIndexes` is ``false`` can sync from any other "
"member, barring other sync restrictions. "
":rsconf:`~members[n].buildIndexes` is ``true`` by default."
msgstr ""

#: ../source/includes/fact-slow-oplog-log-message-footnote.rst:1
msgid ""
"For MongoDB 3.6 deployments, starting in version 3.6.11, secondary "
"members of a replica set now :ref:`log oplog entries <slow-oplog>` that "
"take longer than the slow operation threshold to apply. These slow oplog "
"messages are logged for the secondaries in the :option:`diagnostic log "
"<mongod --logpath>` under the :data:`REPL` component with the text "
"``applied op: <oplog entry> took <num>ms``. These slow oplog entries "
"depend only on the slow operation threshold. They do not depend on the "
"log levels (either at the system or component level), or the profiling "
"level, or the slow operation sample rate. The profiler does not capture "
"slow oplog entries."
msgstr ""

#: ../source/core/replica-set-sync.txt:110
msgid "Multithreaded Replication"
msgstr ""

#: ../source/core/replica-set-sync.txt:112
msgid ""
"MongoDB applies write operations in batches using multiple threads to "
"improve concurrency. MongoDB groups batches by namespace (:ref:`MMAPv1 "
"<storage-mmapv1>`) or by document id (:ref:`WiredTiger <storage-"
"wiredtiger>`) and simultaneously applies each group of operations using a"
" different thread. MongoDB always applies write operations to a given "
"document in their original write order."
msgstr ""

#: ../source/core/replica-set-sync.txt:119
msgid ""
"While applying a batch, MongoDB blocks all read operations. As a result, "
"secondary read queries can never return data that reflect a state that "
"never existed on the primary."
msgstr ""

#: ../source/core/replica-set-sync.txt:124
msgid "Pre-Fetching Indexes to Improve Replication Throughput"
msgstr ""

#: ../source/core/replica-set-sync.txt:127
msgid "Applies to MMAPv1 only."
msgstr ""

#: ../source/core/replica-set-sync.txt:129
msgid ""
"With the :ref:`MMAPv1 <storage-mmapv1>` storage engine, MongoDB fetches "
"memory pages that hold affected data and indexes to help improve the "
"performance of applying oplog entries. This *pre-fetch* stage minimizes "
"the amount of time MongoDB holds write locks while applying oplog "
"entries. By default, secondaries will pre-fetch all :ref:`indexes`."
msgstr ""

#: ../source/core/replica-set-sync.txt:135
msgid ""
"Optionally, you can disable all pre-fetching or only pre-fetch the index "
"on the ``_id`` field. See the "
":setting:`~replication.secondaryIndexPrefetch` setting for more "
"information."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "Validity and Durability"
#~ msgstr ""

#~ msgid ""
#~ "Initial sync copies all the data "
#~ "from one member of the replica set"
#~ " to another member. A member uses "
#~ "initial sync when the member has "
#~ "no data, such as when the member"
#~ " is new, or when the member has"
#~ " data but is missing a history "
#~ "of the set's replication."
#~ msgstr ""

#~ msgid ""
#~ "Clones all databases. To clone, the "
#~ ":program:`mongod` queries every collection in"
#~ " each source database and inserts all"
#~ " data into its own copies of "
#~ "these collections.  At this time, "
#~ "``_id`` indexes are also built. The "
#~ "clone process only copies valid data,"
#~ " omitting invalid documents."
#~ msgstr ""

#~ msgid ""
#~ "Builds all indexes on all collections"
#~ " (except ``_id`` indexes, which were "
#~ "already completed)."
#~ msgstr ""

#~ msgid ""
#~ "When the :program:`mongod` finishes building"
#~ " all index builds, the member can "
#~ "transition to a normal state, i.e. "
#~ ":term:`secondary`."
#~ msgstr ""

#~ msgid ""
#~ "When the clone process omits an "
#~ "invalid document from the sync, MongoDB"
#~ " writes a message to the logs "
#~ "that begins with ``Cloner: found corrupt"
#~ " document in <collection>``."
#~ msgstr ""

#~ msgid ""
#~ "In most cases, secondaries sync from "
#~ "the primary. Secondaries may automatically "
#~ "change their *sync from* source if "
#~ "needed based on changes in the "
#~ "ping time and state of other "
#~ "members' replication."
#~ msgstr ""

# ab9980bbea8b44998979c5097fa6639b
#~ msgid "On this page"
#~ msgstr ""

# ef7c26c4eb2f41ccbcbaad0cb7f64523
#~ msgid ""
#~ "In order to maintain up-to-date"
#~ " copies of the shared data set, "
#~ "secondary members of a replica set "
#~ ":term:`sync` or replicate data from "
#~ "other members. MongoDB uses two forms"
#~ " of data synchronization: :ref:`initial "
#~ "sync <replica-set-initial-sync>` to "
#~ "populate new members with the full "
#~ "data set, and replication to apply "
#~ "ongoing changes to the entire data "
#~ "set."
#~ msgstr ""

# 69f5c97540ac4e22bd291621f49abd5b
#~ msgid ""
#~ "Clones all databases except the "
#~ ":ref:`local <replica-set-local-database>` "
#~ "database. To clone, the :program:`mongod` "
#~ "scans every collection in each source"
#~ " database and inserts all data into"
#~ " its own copies of these collections."
#~ msgstr ""

# b00e1aac3b8949fd91dab96c42c1598a
#~ msgid ""
#~ "Applies all changes to the data "
#~ "set. Using the oplog from the "
#~ "source, the :program:`mongod` updates its "
#~ "data set to reflect the current "
#~ "state of the replica set."
#~ msgstr ""

# d8747aca969e4ffd903f4e65fe2792bd
#~ msgid ""
#~ "MongoDB 3.4 improves the retry logic "
#~ "to be more resilient to intermittent "
#~ "failures on the network."
#~ msgstr ""

# 7d62dde4ec07452c803c3eb36d570433
#~ msgid ""
#~ "Secondary members replicate data continuously"
#~ " after the initial sync. Secondary "
#~ "members copy the :doc:`oplog </core"
#~ "/replica-set-oplog>` from their *sync "
#~ "from* source and apply these operations"
#~ " in an asynchronous process."
#~ msgstr ""

