.. facet::
   :name: genre
   :values: tutorial

.. facet::
   :name: programming_language
   :values: javascript/typescript, shell

.. meta::
   :description: Quick start for creating a time series collection with self-managed MongoDB or Atlas
   :keywords: code example, shell

.. _timeseries-quick-start:

=======================
Time Series Quick Start
=======================
   
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This quick start describes how to configure, create, and query a time series 
collection with MongoDB Atlas or a self-managed deployment.

*Time required: 30 minutes*

.. |service| replace:: {+service+}

.. composable-tutorial::
   :options: deployment-type, interface, language
   :defaults: atlas, driver, python

   .. selected-content::
      :selections: atlas, mongosh, None

      .. procedure::
         :style: normal

         .. include:: /includes/steps-ts-quick-start-atlas.rst

         .. step:: Get mongosh connection details.

            a. Under Access your data through tools, click :guilabel:`Shell`.

               If you haven't already, follow the steps provided to download and
               install :binary:`mongosh`.

            #. Copy your connection string and click :guilabel:`Done`.

         .. include:: /includes/steps-ts-quick-start-mongosh.rst

   .. selected-content::
      :selections: local, mongosh, None

      .. procedure::
         :style: normal

         .. include:: /includes/steps-ts-quick-start-atlas-cli.rst
         
         .. step:: Install mongosh.

            Go to the :binary:`mongosh` page and click 
            :guilabel:`Download mongosh`. Check that the platform matches
            your system and click :guilabel:`Download`.

         .. include:: /includes/steps-ts-quick-start-mongosh.rst

   .. selected-content::
      :selections: self, mongosh, None

      .. procedure::
         :style: normal

         .. include:: /includes/steps-ts-quick-start-self-managed.rst

         .. step:: Install mongosh.

            Go to the :binary:`mongosh` page and click 
            :guilabel:`Download mongosh`. Check that the platform matches
            your system and click :guilabel:`Download`.

         .. include:: /includes/steps-ts-quick-start-mongosh.rst

   .. selected-content::
      :selections: atlas, driver, python

      .. procedure::
         :style: normal

         .. include:: /includes/steps-ts-quick-start-atlas.rst

         .. step:: Get PyMongo connection details.

            a. Under Connect to your application, click :guilabel:`Driver`.
               Select Python.

               If you haven't already, follow the steps provided to download and
               install the :driver:`PyMongo Driver </pymongo/>`.

            #. Copy your connection string and click :guilabel:`Done`.

         .. include:: /includes/steps-ts-quick-start-python.rst

   .. selected-content::
      :selections: local, driver, python

      .. procedure::
         :style: normal

         .. include:: /includes/steps-ts-quick-start-atlas-cli.rst

         .. step:: Install the PyMongo Driver.

            Follow the directions on the `PyMongo Get Started <https://www.mongodb.com/docs/languages/python/pymongo-driver/current/get-started/>`__
            page to create a new project directory and install driver dependencies.

         .. include:: /includes/steps-ts-quick-start-python.rst

   .. selected-content::
      :selections: self, driver, python

      .. procedure::
         :style: normal

         .. include:: /includes/steps-ts-quick-start-self-managed.rst

         .. step:: Install the PyMongo Driver.

            Follow the directions on the `PyMongo Get Started <https://www.mongodb.com/docs/languages/python/pymongo-driver/current/get-started/>`__
            page to create a new project directory and install driver dependencies.

         .. include:: /includes/steps-ts-quick-start-python.rst

.. _ts-quick-start-sample-data:

Sample Data
------------

This quick start creates a ``stocks`` time series collection with the
following document structure.

.. code-block:: javascript

   { 
      _id: ObjectId(...),
      ticker: <string>, 
      date: ISODate(...), 
      close: <double>,
      volume: <double>
   }


Learning Summary
----------------

This quick start focused on creating a new time series collection. Because time
series collections are optimized for time data, their performance depends
heavily on how you configure them at creation. For more information, see
:ref:`Time Series Collection Considerations
<manual-timeseries-considerations>`.


Next Steps
----------

* To migrate existing data into a time series collection, see :ref:`Migrate
  Data into a Time Series Collection 
  <migrate-data-into-a-timeseries-collection>`.

* To shard a time series collection, see :ref:`Shard a Time Series Collection
  <manual-timeseries-shard-collection>`. 

* For aggregation and query behaviors specific to time series
  collections, see :ref:`Aggregation and Operator Considerations 
  <manual-timeseries-aggregations-operators>`.

Learn More
----------

* To learn more about how MongoDB stores time series data internally, see
  :ref:`About Time Series Data <timeseries-bucketing>`.

* To learn more about custom bucketing parameters in MongoDB 6.3 and later, see
  :ref:`Using Custom Bucketing Parameters <flexible-bucketing>`.