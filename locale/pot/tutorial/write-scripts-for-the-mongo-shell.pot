# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:3
# 7f3e97be27434826af9c27ae5c81c2d4
msgid "Write Scripts for the ``mongo`` Shell"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:7
# 719a764f6a964dcea7f5c095b90a3073
msgid "You can write scripts for the :program:`mongo` shell in JavaScript that manipulate data in MongoDB or perform administrative operation. For more information about the :program:`mongo` shell see :doc:`/administration/scripting`, and see the :ref:`running-js-scripts-in-mongo-on-mongod-host` section for more information about using these :program:`mongo` script."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:14
# 8f4cecb1b63d42cf948f68f87d7b2669
msgid "This tutorial provides an introduction to writing JavaScript that uses the :program:`mongo` shell to access MongoDB."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:20
# 19f446a909b542058fbe859c1bfd3468
msgid "Opening New Connections"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:22
# 64deaac7fe21455cbd3e660290465d14
msgid "From the :program:`mongo` shell or from a JavaScript file, you can instantiate database connections using the :method:`Mongo()` constructor:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:32
# 17d8d74b393b47b48d23e96760f2011b
msgid "Consider the following example that instantiates a new connection to the MongoDB instance running on localhost on the default port and sets the global ``db`` variable to ``myDatabase`` using the :method:`~Mongo.getDB()` method:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:42
# 63a1c297be4a4deca527efd8898eafc3
msgid "Additionally, you can use the :method:`connect()` method to connect to the MongoDB instance. The following example connects to the MongoDB instance that is running on ``localhost`` with the non-default port ``27020`` and set the global ``db`` variable:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:52
# a5c03d35300d404aa8f4d39efb9e65e8
msgid "Differences Between Interactive and Scripted ``mongo``"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:54
# 37b87b79444848aea68f8561128e6a90
msgid "When writing scripts for the :program:`mongo` shell, consider the following:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:57
# 3565c32ab1044beabadc6749491bc219
msgid "To set the ``db`` global variable, use the :method:`~Mongo.getDB()` method or the :method:`connect()` method. You can assign the database reference to a variable other than ``db``."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:61
# 958d83e4de9f4949b66f3745d736435e
msgid "Write operations in the :program:`mongo` shell use the \"safe writes\" by default. If performing bulk operations, use the :method:`Bulk()` methods. See :ref:`write-methods-incompatibility` for more information."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:66
# 9916e0caf1e44938904eadcd59ea60d8
msgid "Before MongoDB 2.6, call :method:`db.getLastError()` explicitly to wait for the result of :doc:`write operations </core/write-operations>`."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:71
# 1fca1ef39e5040b48d86303b228a1ea1
msgid "You **cannot** use any shell helper (e.g. ``use <dbname>``, ``show dbs``, etc.) inside the JavaScript file because they are not valid JavaScript."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:75
# 9cf8298832994d52ac53c27ca808e3b5
msgid "The following table maps the most common :program:`mongo` shell helpers to their JavaScript equivalents."
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:4
# 261080f8c7484c8e88487c324bb4341f
msgid "Shell Helpers"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:6
# 6667cdb97da5492eb02b928a6cab53c6
msgid "JavaScript Equivalents"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:8
# 9d098c0b01f544eaad72d97b8295ad26
msgid "``show dbs``, ``show databases``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:16
# 05cf691c3ff94118ac670764dbd125c6
msgid "``use <db>``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:24
# c33b2fbd6f01472b82d566503588b42a
msgid "``show collections``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:32
# bd22c31a24df48b7a177443d7d1ce9c3
msgid "``show users``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:40
# 6db1e91a602b4116a330433cb81b1c6f
msgid "``show roles``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:48
# 6cdca78d1b60461f93e57e3054f9502a
msgid "``show log <logname>``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:56
# 2f3da70d588d4d938b78d5d48728afc1
msgid "``show logs``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:64
# 5b68e3d474634e7fbbe57829197d6d98
msgid "``it``"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:80
# 9826544ef1194f049bc58703f7041507
msgid "In interactive mode, :program:`mongo` prints the results of operations including the content of all cursors. In scripts, either use the JavaScript ``print()`` function or the :program:`mongo` specific ``printjson()`` function which returns formatted JSON."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:0
# 441aac7fdc7c431aa32efb3ce2851991
msgid "Example"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:87
# a4323c12321a4a15a1dbc0ad63281e52
msgid "To print all items in a result cursor in :program:`mongo` shell scripts, use the following idiom:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:100
# 576de70f08cc413090bafec51caaa085
msgid "Scripting"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:102
# 314032e8cda94d5a978c3e23625bdcec
msgid "From the system prompt, use :program:`mongo` to evaluate JavaScript."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:105
# 56f4b36df7914f5f9ee6c67cb41ff0cd
msgid "``--eval`` option"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:107
# 1fb542a58f884842af7fa89d99c1d220
msgid "Use the :option:`--eval <mongo --eval>` option to :program:`mongo` to pass the shell a JavaScript fragment, as in the following:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:114
# ddb2e32ed66b4c1c9c5f9c81eb9f378f
msgid "This returns the output of :method:`db.getCollectionNames()` using the :program:`mongo` shell connected to the :program:`mongod` or :program:`mongos` instance running on port ``27017`` on the ``localhost`` interface."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:122
# 8f3055320d6f4a44a7b6c3c0b53e9479
msgid "Execute a JavaScript file"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:124
# 2d0bfb1edcc64e3d8f09bc64e38743ff
msgid "You can specify a ``.js`` file to the :program:`mongo` shell, and :program:`mongo` will execute the JavaScript directly. Consider the following example:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:132
# 8529b96f31774819ad27d13b3a8407e5
msgid "This operation executes the ``myjsfile.js`` script in a :program:`mongo` shell that connects to the ``test`` :term:`database` on the :program:`mongod` instance accessible via the ``localhost`` interface on port ``27017``."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:137
# 3bf399be74054f30ba85dae8b1e0c190
msgid "Alternately, you can specify the mongodb connection parameters inside of the javascript file using the ``Mongo()`` constructor. See :ref:`mongo-shell-new-connections` for more information."
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:1
# 2f447ed6f4c8437f961e7e22ceb5ba80
msgid "You can execute a ``.js`` file from within the :program:`mongo` shell, using the :method:`load()` function, as in the following:"
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:8
# e6a9197fe19e496fbf72c2dfdf4b5eb3
msgid "This function loads and executes the :file:`myjstest.js` file."
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:10
# b4a612fd302343dfb7df431eda97ee2d
msgid "The :method:`load()` method accepts relative and absolute paths. If the current working directory of the :program:`mongo` shell is :file:`/data/db`, and the :file:`myjstest.js` resides in the :file:`/data/db/scripts` directory, then the following calls within the :program:`mongo` shell would be equivalent:"
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:21
# bc7074b7853c4b42bf1c01834cd6c099
msgid "There is no search path for the :method:`load()` function. If the desired script is not in the current working directory or the full specified path, :program:`mongo` will not be able to access the file."
msgstr ""

