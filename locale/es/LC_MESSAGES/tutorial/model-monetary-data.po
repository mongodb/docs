#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 043ab58c18204f2db4392853e96a191a
#: ../source/tutorial/model-monetary-data.txt:3
msgid "Model Monetary Data"
msgstr ""

# 783770d9937140d591acf34b51b3d173
#: ../source/tutorial/model-monetary-data.txt
msgid "On this page"
msgstr ""

# ff73a62e3f334035a415694af009682f
#: ../source/tutorial/model-monetary-data.txt:14
msgid "Overview"
msgstr ""

# a42f33187e1141ac89d4cac5e49fa8a1
#: ../source/tutorial/model-monetary-data.txt:16
msgid ""
"Applications that handle monetary data often require the ability to "
"capture fractional units of currency and need to emulate decimal rounding"
" with exact precision when performing arithmetic. The binary-based "
"floating-point arithmetic used by many modern systems (i.e., float, "
"double) is unable to represent exact decimal fractions and requires some "
"degree of approximation making it unsuitable for monetary arithmetic. "
"This constraint is an important consideration when modeling monetary "
"data."
msgstr ""

# 589e80a0379845948b8717d182385e66
#: ../source/tutorial/model-monetary-data.txt:25
msgid ""
"There are several approaches to modeling monetary data in MongoDB using "
"the numeric and non-numeric models."
msgstr ""

# 8f629b57f0ef452aac2f39cd0fdb2caf
# 696f475a05914c1aa863ed1adb9a6928
#: ../source/tutorial/model-monetary-data.txt:31
#: ../source/tutorial/model-monetary-data.txt:73
msgid "Numeric Model"
msgstr ""

# 5d6690caea5240f49a208bd08ccfcb9f
#: ../source/tutorial/model-monetary-data.txt:33
msgid ""
"The numeric model may be appropriate if you need to query the database "
"for exact, mathematically valid matches or need to perform server-side "
"arithmetic, e.g., :update:`$inc`, :update:`$mul`, and :doc:`aggregation "
"framework arithmetic </reference/operator/aggregation-arithmetic>`."
msgstr ""

# a98efb4d2c2d4421b7bdd8cb7523dd93
#: ../source/tutorial/model-monetary-data.txt:38
msgid "**The following approaches follow the numeric model:**"
msgstr ""

# 7f1691b1635e451ebafc7c6419cfa931
#: ../source/tutorial/model-monetary-data.txt:40
msgid ""
":ref:`numeric-decimal` which is a decimal-based floating-point format "
"capable of providing exact precision. Available in MongoDB version 3.4 "
"and later."
msgstr ""

# 1d3b611065e3471bb97ab77c550c698e
#: ../source/tutorial/model-monetary-data.txt:44
msgid ""
":ref:`numeric-scale-factor` to convert the monetary value to a 64-bit "
"integer (``long`` BSON type) by multiplying by a power of 10 scale "
"factor."
msgstr ""

# 6d18dc195caf40d594ddf12da28e867f
# 662959b433fb4cb1a0d70ca79b30e7c2
#: ../source/tutorial/model-monetary-data.txt:51
#: ../source/tutorial/model-monetary-data.txt:306
msgid "Non-Numeric Model"
msgstr ""

# c0501f5c06fb40c0a72adb3d24f2141c
#: ../source/tutorial/model-monetary-data.txt:53
msgid ""
"If there is no need to perform server-side arithmetic on monetary data or"
" if server-side approximations are sufficient, modeling monetary data "
"using the non-numeric model may be suitable."
msgstr ""

# b9b65dba5fb04168a3a1d4edf17b03b7
#: ../source/tutorial/model-monetary-data.txt:57
msgid "**The following approach follows the non-numeric model:**"
msgstr ""

# 291d8f7a373043049aa0c98f955d99d2
#: ../source/tutorial/model-monetary-data.txt:59
msgid ""
":ref:`Using two fields for the monetary value <monetary-value-non-"
"numeric>`: One field stores the exact monetary value as a non-numeric "
"``string`` and another field stores a binary-based floating-point "
"(``double`` BSON type) approximation of the value."
msgstr ""

# 70d6df7750594c3aaa50a4d6c06a75cc
#: ../source/tutorial/model-monetary-data.txt:66
msgid ""
"Arithmetic mentioned on this page refers to server-side arithmetic "
"performed by :program:`mongod` or :program:`mongos`, and not to client-"
"side arithmetic."
msgstr ""

# b9e3cb60ef96444b9483b6fb006583c3
#: ../source/tutorial/model-monetary-data.txt:78
msgid "Using the Decimal BSON Type"
msgstr ""

# 140ee432774344de8506d232c1f4d873
#: ../source/tutorial/model-monetary-data.txt:82
msgid ""
"The ``decimal`` :doc:`BSON type </reference/bson-types>` uses the IEEE "
"754 decimal128 decimal-based floating-point numbering format. Unlike "
"binary-based floating-point formats (i.e., the ``double`` BSON type), "
"decimal128 does not approximate decimal values and is able to provide the"
" exact precision required for working with monetary data."
msgstr ""

# c20319c3a3194cb08bb7034fc93a3747
#: ../source/tutorial/model-monetary-data.txt:88
msgid ""
"From the :program:`mongo` shell ``decimal`` values are assigned and "
"queried using the ``NumberDecimal()`` constructor.  The following example"
" adds a document containing gas prices to a ``gasprices`` collection:"
msgstr ""

# 95b0b25cfa4e45428ecf2d89992631f0
#: ../source/tutorial/model-monetary-data.txt:97
msgid "The following query matches the document above:"
msgstr ""

# 7088d9b7a8b3470eab845e1fc27c3025
#: ../source/tutorial/model-monetary-data.txt:103
msgid ""
"For more information on the ``decimal`` type, see :ref:`shell-type-"
"decimal`."
msgstr ""

# 6e4c68bf9b004d4e9d7ea3c626317d7a
#: ../source/tutorial/model-monetary-data.txt:107
msgid "Converting Values to Decimal"
msgstr ""

# a21509e88f7b4db7bd1e798f354fa155
#: ../source/tutorial/model-monetary-data.txt:109
msgid ""
"A collection's values can be transformed to the ``decimal`` type by "
"performing a one-time transformation or by modifying application logic to"
" perform the transformation as it accesses records."
msgstr ""

# 287d4d062b1f4e5a8db92be33c38ce40
#: ../source/tutorial/model-monetary-data.txt:114
msgid "One-Time Collection Transformation"
msgstr ""

# b6cd0a0378004c3485bbb700085556bd
#: ../source/tutorial/model-monetary-data.txt:116
msgid ""
"A collection can be transformed by iterating over all documents in the "
"collection, converting the monetary value to the ``decimal`` type, and "
"writing the document back to the collection."
msgstr ""

# 2fa3c737da0c4cd082b1f4acd034782e
#: ../source/tutorial/model-monetary-data.txt:120
msgid ""
"It is strongly advised to add the ``decimal`` value to the document as a "
"new field and remove the old field later once the new field's values have"
" been verified."
msgstr ""

# 29e47de2fc2c4d7d8cde11c742ddccf8
#: ../source/tutorial/model-monetary-data.txt:124
msgid ""
"Be sure to  test ``decimal`` conversions in an isolated test environment."
" Once datafiles are created or modified with MongoDB version 3.4 they "
"will no longer be compatible with previous versions and there is no "
"support for downgrading datafiles containing decimals."
msgstr ""

# 3901adaff5ba41c4ab87edabcb5c172b
#: ../source/tutorial/model-monetary-data.txt:130
msgid "**Scale Factor Transformation:**"
msgstr ""

# edfb72e8b3154478a3ff6f0a9fc4ed62
#: ../source/tutorial/model-monetary-data.txt:132
msgid ""
"Consider the following collection which used the :ref:`Scale Factor "
"<numeric-scale-factor>` approach and saved the monetary value as a 64-bit"
" integer representing the number of cents:"
msgstr ""

# 89543f5248bc47d38fe1aa74ae7fabee
#: ../source/tutorial/model-monetary-data.txt:144
msgid ""
"The ``long`` value can be converted to an appropriately formatted "
"``decimal`` value by multiplying ``price`` and "
"``NumberDecimal(\"0.01\")`` using the :expression:`$multiply` operator. "
"The following aggregation pipeline assigns the converted value to the new"
" ``priceDec`` field in the :pipeline:`$addFields` stage:"
msgstr ""

# e24ffe3e5417428192370e1ec638e15c
#: ../source/tutorial/model-monetary-data.txt:167
msgid ""
"The results of the aggregation pipeline can be verified using the "
"``db.clothes.find()`` query:"
msgstr ""

# 498cc73d4b9a45a38167f84fbf4531a9
#: ../source/tutorial/model-monetary-data.txt:178
msgid ""
"If you do not want to add a new field with the ``decimal`` value, the "
"original field can be overwritten. The following "
":method:`~db.collection.update()` method first checks that ``price`` "
"exists and that it is a ``long``, then transforms the ``long`` value to "
"``decimal`` and stores it in the ``priceDec`` field:"
msgstr ""

# 40e13ad280d34dc2b2b180f74b6563b1
#: ../source/tutorial/model-monetary-data.txt:192
msgid "The results can be verified using the ``db.clothes.find()`` query:"
msgstr ""

# a0a5df724fea40cda10161c052b03108
#: ../source/tutorial/model-monetary-data.txt:202
msgid "**Non-Numeric Transformation:**"
msgstr ""

# cc3e0f7753e94430bf37678868646385
#: ../source/tutorial/model-monetary-data.txt:204
msgid ""
"Consider the following collection which used the :ref:`non-numeric "
"<monetary-value-non-numeric>` model and saved the monetary value as a "
"``string`` with the exact representation of the value:"
msgstr ""

# 0e0f14d48e10471da1586880fa0cdcb0
#: ../source/tutorial/model-monetary-data.txt:217
msgid ""
"The following function first checks that ``price`` exists and that it is "
"a ``string``, then transforms the ``string`` value to a ``decimal`` value"
" and stores it in the ``priceDec`` field:"
msgstr ""

# ea1d264f830a4250b21e6959459e2e7d
#: ../source/tutorial/model-monetary-data.txt:228
msgid ""
"The function does not output anything to the command line. The results "
"can be verified using the ``db.clothes.find()`` query:"
msgstr ""

# dca1e12b5b0b43bd95ee243f965a9278
#: ../source/tutorial/model-monetary-data.txt:240
msgid "Application Logic Transformation"
msgstr ""

# d2329da00a9e47adb2ef1cf2750e0ef3
#: ../source/tutorial/model-monetary-data.txt:242
msgid ""
"It is possible to perform the transformation to the ``decimal`` type from"
" within the application logic. In this scenario the application modified "
"to perform the transformation as it accesses records."
msgstr ""

# 0f49cd9004184d94a25fff163a889081
#: ../source/tutorial/model-monetary-data.txt:247
msgid "The typical application logic is as follows:"
msgstr ""

# 80fb1ab2c0894b14a98aa8f0c34bebf0
#: ../source/tutorial/model-monetary-data.txt:249
msgid "Test that the new field exists and that it is of ``decimal`` type"
msgstr ""

# bc82d7ac91354983bcb0ecfe5068a4fd
#: ../source/tutorial/model-monetary-data.txt:251
msgid "If the new ``decimal`` field does not exist:"
msgstr ""

# 486db91fd2f24c7d9b8dc6cccf9562f9
#: ../source/tutorial/model-monetary-data.txt:253
msgid "Create it by properly converting old field values"
msgstr ""

# cfb1a4dc2234460d9598e1d4e37d576d
#: ../source/tutorial/model-monetary-data.txt:255
msgid "Remove the old field"
msgstr ""

# 734bb3822f6e460da786592988d45d8f
#: ../source/tutorial/model-monetary-data.txt:257
msgid "Persist the transformed record"
msgstr ""

# 03e9d81c277d4156b209c94c66ed3e3e
#: ../source/tutorial/model-monetary-data.txt:262
msgid "Using a Scale Factor"
msgstr ""

# 707f8484480548978d45158bd27d58fa
#: ../source/tutorial/model-monetary-data.txt:264
msgid ""
"If you are using MongoDB version 3.4 or higher, using the :ref:`decimal "
"<numeric-decimal>` type for modeling monetary data is preferable to the "
":ref:`Scale Factor <numeric-scale-factor>` method."
msgstr ""

# 88853cc3cc274fec82b6f100a364cbdb
#: ../source/tutorial/model-monetary-data.txt:269
msgid "To model monetary data using the scale factor approach:"
msgstr ""

# 8b6fc054b92c40d7b452b0a0a3e96e8d
#: ../source/tutorial/model-monetary-data.txt:271
msgid ""
"Determine the maximum precision needed for the monetary value. For "
"example, your application may require precision down to the tenth of one "
"cent for monetary values in ``USD`` currency."
msgstr ""

# 93cb3b248b2d4fe0a7f10c60f7a28c02
#: ../source/tutorial/model-monetary-data.txt:275
msgid ""
"Convert the monetary value into an integer by multiplying the value by a "
"power of 10 that ensures the maximum precision needed becomes the least "
"significant digit of the integer. For example, if the required maximum "
"precision is the tenth of one cent, multiply the monetary value by 1000."
msgstr ""

# d2df40e9bb3149cd834156c618d5d955
#: ../source/tutorial/model-monetary-data.txt:281
msgid "Store the converted monetary value."
msgstr ""

# 05cdf8f8778f47ee9316304898c61159
#: ../source/tutorial/model-monetary-data.txt:283
msgid ""
"For example, the following scales ``9.99 USD`` by 1000 to preserve "
"precision up to one tenth of a cent."
msgstr ""

# 1359030bebc24ec0a66373650a30a54a
#: ../source/tutorial/model-monetary-data.txt:290
msgid "The model assumes that for a given currency value:"
msgstr ""

# 3688821691c747f6adf9f44e68fd3ecd
#: ../source/tutorial/model-monetary-data.txt:292
msgid ""
"The scale factor is consistent for a currency; i.e. same scaling factor "
"for a given currency."
msgstr ""

# b21ae004f5b14bd798f567c372d90f43
#: ../source/tutorial/model-monetary-data.txt:295
msgid ""
"The scale factor is a constant and known property of the currency; i.e "
"applications can determine the scale factor from the currency."
msgstr ""

# faddba35b2fd459ba1225fee8cef4162
#: ../source/tutorial/model-monetary-data.txt:298
msgid ""
"When using this model, applications must be consistent in performing the "
"appropriate scaling of the values."
msgstr ""

# e782c10e66464846abedb6fef43aa232
#: ../source/tutorial/model-monetary-data.txt:301
msgid "For use cases of this model, see :ref:`numeric-model-use-case`."
msgstr ""

# 2c5d076d624149f4b3411fc912baefb4
#: ../source/tutorial/model-monetary-data.txt:308
msgid ""
"To model monetary data using the non-numeric model, store the value in "
"two fields:"
msgstr ""

# f26b1c2f2fac43568fbc5998aeec360e
#: ../source/tutorial/model-monetary-data.txt:311
msgid ""
"In one field, encode the exact monetary value as a non-numeric data type;"
" e.g., ``BinData`` or a ``string``."
msgstr ""

# a399cee22efd47ed81debf0d1e7f6dd0
#: ../source/tutorial/model-monetary-data.txt:314
msgid ""
"In the second field, store a double-precision floating point "
"approximation of the exact value."
msgstr ""

# 319351d93b1c45b58837eef01b952912
#: ../source/tutorial/model-monetary-data.txt:317
msgid ""
"The following example uses the non-numeric model to store ``9.99 USD`` "
"for the price and ``0.25 USD`` for the fee:"
msgstr ""

# 51c6f611d524426aa4ed2f8b8670c6d1
#: ../source/tutorial/model-monetary-data.txt:327
msgid ""
"With some care, applications can perform range and sort queries on the "
"field with the numeric approximation. However, the use of the "
"approximation field for the query and sort operations requires that "
"applications perform client-side post-processing to decode the non-"
"numeric representation of the exact value and then filter out the "
"returned documents based on the exact monetary value."
msgstr ""

# 9d5ca6f825a44d7bb087c7926b2c3fc6
#: ../source/tutorial/model-monetary-data.txt:334
msgid "For use cases of this model, see :ref:`non-numeric-model-use-case`."
msgstr ""

#~ msgid ""
#~ "MongoDB stores numeric data as either"
#~ " IEEE 754 standard 64-bit floating "
#~ "point numbers or as 32-bit or "
#~ "64-bit signed integers. Applications that "
#~ "handle monetary data often require "
#~ "capturing fractional units of currency. "
#~ "However, arithmetic on floating point "
#~ "numbers, as implemented in modern "
#~ "hardware, often does not conform to "
#~ "requirements for monetary arithmetic. In "
#~ "addition, some fractional numeric quantities,"
#~ " such as one third and one "
#~ "tenth, have no exact representation in"
#~ " binary floating point numbers."
#~ msgstr ""

#~ msgid "This document describes two ways to model monetary data in MongoDB:"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`monetary-value-exact-precision` which"
#~ " multiplies the monetary value by a"
#~ " power of 10."
#~ msgstr ""

#~ msgid ""
#~ ":ref:`monetary-value-arbitrary-precision` "
#~ "which uses two fields for the "
#~ "value: one field to store the "
#~ "exact monetary value as a non-"
#~ "numeric and another field to store "
#~ "a floating point approximation of the"
#~ " value."
#~ msgstr ""

#~ msgid "Use Cases for Exact Precision Model"
#~ msgstr ""

#~ msgid ""
#~ "If you regularly need to perform "
#~ "server-side arithmetic on monetary data,"
#~ " the exact precision model may be "
#~ "appropriate. For instance:"
#~ msgstr ""

#~ msgid ""
#~ "If you need to query the database"
#~ " for exact, mathematically valid matches,"
#~ " use :ref:`monetary-value-exact-precision`."
#~ msgstr ""

#~ msgid ""
#~ "If you need to be able to do"
#~ " server-side arithmetic, e.g., "
#~ ":update:`$inc`, :update:`$mul`, and "
#~ ":doc:`aggregation framework arithmetic "
#~ "</reference/operator/aggregation-arithmetic>`, use "
#~ ":ref:`monetary-value-exact-precision`."
#~ msgstr ""

#~ msgid "Use Cases for Arbitrary Precision Model"
#~ msgstr ""

#~ msgid ""
#~ "If there is no need to perform "
#~ "server-side arithmetic on monetary data,"
#~ " modeling monetary data using the "
#~ "arbitrary precision model may be "
#~ "suitable. For instance:"
#~ msgstr ""

#~ msgid ""
#~ "If you need to handle arbitrary or"
#~ " unforeseen number of precision, see "
#~ ":ref:`monetary-value-arbitrary-precision`."
#~ msgstr ""

#~ msgid ""
#~ "If server-side approximations are "
#~ "sufficient, possibly with client-side "
#~ "post-processing, see :ref:`monetary-value-"
#~ "arbitrary-precision`."
#~ msgstr ""

#~ msgid "Exact Precision"
#~ msgstr ""

#~ msgid "To model monetary data using the exact precision model:"
#~ msgstr ""

#~ msgid "For use cases of this model, see :ref:`exact-precision-model-use-case`."
#~ msgstr ""

#~ msgid "Arbitrary Precision"
#~ msgstr ""

#~ msgid ""
#~ "To model monetary data using the "
#~ "arbitrary precision model, store the "
#~ "value in two fields:"
#~ msgstr ""

#~ msgid ""
#~ "The following example uses the arbitrary"
#~ " precision model to store ``9.99 "
#~ "USD`` for the price and ``0.25 "
#~ "USD`` for the fee:"
#~ msgstr ""

#~ msgid ""
#~ "For use cases of this model, see"
#~ " :ref:`arbitrary-precision-model-use-case`."
#~ msgstr ""

