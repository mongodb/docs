# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/build-a-2dsphere-index.txt:5
#: ../source/tutorial/build-a-2dsphere-index.txt:54
# e1276d32d15c4c76b71b50efe687d2bd
# f610ff42974d4c22af39d858a757a711
msgid "Create a ``2dsphere`` Index"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:9
# 02357f383cd54b16a0129be4b24a5081
msgid "To create a geospatial index for GeoJSON-formatted data, use the :method:`db.collection.createIndex()` method to create a :doc:`2dsphere index </core/2dsphere>`. In the index specification document for the :method:`db.collection.createIndex()` method, specify the location field as the index key and specify the string literal ``\"2dsphere\"`` as the value:"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:20
# 3693bd5c8edd440f8ce72f033ff57ec6
msgid "The following procedure presents steps to populate a collection with documents that contain a GeoJSON data field and create :doc:`2dsphere indexes </core/2dsphere>`. Although the procedure populates the collection first, you can also create the indexes before populating the collection."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:27
# 3ff0f8d90bf544a893a0007f6533a22d
msgid "Procedure"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:29
# 5f4b7fe86f13490495890c2f90a1eff8
msgid "First, populate a collection ``places`` with documents that store location data as :ref:`GeoJSON Point <geojson-point>` in a field named ``loc``. The coordinate order is longitude, then latitude."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:51
# 8af83357262c48f582fa8c3c542b5433
msgid "Then, create the :doc:`2dsphere </core/2dsphere>` index."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:56
# 9e595caa60ea4a67b8a86c4fece5e38f
msgid "For example, the following creates a :doc:`2dsphere </core/2dsphere>` index on the location field ``loc``:"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:64
# 113786d836494cc7bdbfc3a3968e5102
msgid "Create a Compound Index with ``2dsphere`` Index Key"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:66
# 7bc4d326252642f2992067fbca79e779
msgid "A :ref:`compound index <index-type-compound>` can include a ``2dsphere`` index key in combination with non-geospatial index keys. For example, the following operation creates a compound index where the first key ``loc`` is a ``2dsphere`` index key, and the remaining keys ``category`` and ``names`` are non-geospatial index keys, specifically descending (``-1``) and ascending (``1``) keys respectively."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:78
# 81ae6191961f4f3799622959be373a35
msgid "Unlike the :doc:`2d </core/2d>` index, a compound ``2dsphere`` index does not require the location field to be the first field indexed. For example:"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:87
# 3096726b00954a3eb20e5a3588e34d4d
msgid "Considerations"
msgstr ""

#: ../source/includes/geo-data-limit-for-2dsphere.rst:1
# ed494b3589aa41c6bd23ef1bd7a53908
msgid "Fields with :doc:`2dsphere </core/2dsphere>` indexes must hold geometry data in the form of :term:`coordinate pairs <legacy coordinate pairs>` or :term:`GeoJSON` data. If you attempt to insert a document with non-geometry data in a ``2dsphere`` indexed field, or build a ``2dsphere`` index on a collection where the indexed field has non-geometry data, the operation will fail."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:1
# 79b26bcdf1f642ec99a201e93cc910ca
msgid "The :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline stage require that a collection have *at most* only one |first-geo-index| and/or only one |second-geo-index| whereas :ref:`geospatial query operators <geospatial-query-selectors>` (e.g. :query:`$near` and :query:`$geoWithin`) permit collections to have multiple geospatial indexes."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:8
# c7bf6d18fea9489fa861a4ebd6fd742f
msgid "The geospatial index restriction for the :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline stage exists because neither the :dbcommand:`geoNear` command nor the :pipeline:`$geoNear` pipeline stage syntax includes the location field. As such, index selection among multiple ``2d`` indexes or ``2dsphere`` indexes is ambiguous."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:14
# 1ec8a438c285474eb49e7eac21849aee
msgid "No such restriction applies for :ref:`geospatial query operators <geospatial-query-selectors>` since these operators take a location field, eliminating the ambiguity."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:95
# 1339ee1d13dd4c909d4171644c6be873
msgid "As such, although this tutorial creates multiple ``2dsphere`` indexes, to use the :dbcommand:`geoNear` command or the :pipeline:`$geoNear` pipeline stage against the example collection, you will need to :method:`drop <db.collection.dropIndex()>` all but one of the ``2dsphere`` indexes."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:101
# 7701adaa8d4e4b758fdf9a9b06c23a93
msgid "To query using the ``2dsphere`` index, see :doc:`/tutorial/query-a-2dsphere-index`."
msgstr ""

