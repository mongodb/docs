.. _vsce-databases-collections:

==================
Navigate Your Data
==================

.. meta::
   :description: Explore and manage databases, collections, and documents using the MongoDB VS Code Extension, including creating, editing, and dropping data.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Once you :ref:`connect to your deployment <vsce-connect>` using |vsce|,
use the left navigation to:

- Explore your databases, collections, read-only views, and documents.

- Create new databases and collections.

- Drop databases and collections.

.. figure:: /images/dbs-colls-docs.png
  :figwidth: 270px
  :alt: Image showing deployment navigation

.. note::

   .. include:: /includes/fact-required-roles.rst

View Databases and Collections
------------------------------

When you expand an active connection, |vsce| shows the databases in
that deployment.

- Click the name of a database to view the collections it contains.
- Click the name of a collection to view its documents, schema, and
  indexes.

.. include:: /includes/admonitions/close-all-docs-on-exit.rst

View Collection Documents and Schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you expand a collection, |vsce| displays the number of documents
next to the :guilabel:`Documents` label in the navigation panel.

Documents
``````````

When you expand a collection's documents, |vsce| lists the ``_id`` of
each document in the collection. Click an ``_id`` value to open that
document in |vscode-short| and view its contents.

*To open a document in the collection*, you can also do the following:  

1. Right-click the ID of the document that you want to open.
2. Click :guilabel:`Open Document`.

*To edit this single document*:

.. include:: /includes/seq-edit-document.rst

.. important::

   Users must have the :authaction:`listCollections` permission in 
   order to view a collection's documents.

*To view all of the collection's documents* in an array, you can:

1. Right-click a collection.
2. Click :guilabel:`View Documents`.

*To copy a document in the collection*, you can: 

1. Right-click the ID of the document you want to copy.
2. Click :guilabel:`Copy Document`.

   |vsce| copies the document to your clipboard.

*To clone a document in the collection*, you can: 

1. Right-click the ID of the document you want to clone.
#. Click :guilabel:`Clone Document`.

   |vsce| opens the Playground where it displays the command to insert
   one new document in the collection.

#. Remove or replace the ``_id`` field and make any other changes to the
   cloned document. 
#. Click the :guilabel:`Play Button` in VS Code's top navigation bar to
   insert this document in the collection.
#. Click :guilabel:`Yes` to confirm. 

   The :guilabel:`Playground Result` window displays the inserted ID of
   the new document. 

*To remove a document from the collection*, you can: 

1. Right-click the ID of the document you want to remove.
2. Click :guilabel:`Delete Document`.
3. Click :guilabel:`Yes` to confirm.

*To insert a document*, you can: 

1. Right-click the collection where you want to insert a document.
#. Click :guilabel:`Insert Document`.

   |vsce| opens the Playground with a template for adding a document to
   the collection. 

   .. code-block:: json
      :copyable: false 
      :caption: Example Playground Template 
      :linenos: 
      :emphasize-lines: 8-10

      // MongoDB Playground
      // Use Ctrl+Space inside a snippet or a string literal to trigger completions.

      // The current database to use.
      use('<database-name>');

      // Create a new document in the collection.
      db.getCollection('<collection-name>').insertOne({

      });

#. Paste the document to add inside the
   :method:`db.collection.insertOne()` method and click the
   :guilabel:`Play Button`. 

#. Click :guilabel:`Yes` to confirm. 

   The |vsce| :guilabel:`Playground Result` panel displays the ID of the
   inserted document.

.. include:: /includes/admonitions/document-search-template.rst

Schema
``````

Your collection's schema defines the fields and data types within the
collection. Due to MongoDB's flexible schema model, different documents
in a collection may contain different fields, and data types may vary
within a field. MongoDB can enforce
:manual:`schema validation </core/schema-validation/>` to ensure your
collection documents have the same shape.

When you expand a collection's schema, |vsce| lists the fields which
appear in that collection's documents. If a field exists in all
documents and its type is consistent throughout the collection, |vsce|
displays an icon indicating that field's data type. Hover over the
field name for a text description of the field's data type.

Manage Indexes
~~~~~~~~~~~~~~

Your collections's indexes are listed under the :guilabel:`Indexes`
heading. When you expand an index, each index key appears with an icon
designating its type. Index key types include:

- Ascending
- Descending
- Geospatial (2d, 2dsphere, geoHaystack)
- Text
- Hashed

.. note::

   You can open a :ref:`MongoDB Playground <vsce-crud>` pre-configured
   to create an index by hovering over the :guilabel:`Indexes` label
   in the navigation panel and clicking the :icon-fa4:`plus` icon that
   appears.

.. seealso::

   To learn more about MongoDB indexes, see the
   :manual:`server manual </indexes>`.

Create a New Database
~~~~~~~~~~~~~~~~~~~~~

When you create a new database, you must populate it with an
initial collection.

#. Hover over the connection for the deployment where you want your
   database to exist.

#. Click the :icon-fa5:`plus` icon or right-click and select 
   :guilabel:`Add Database`. |vsce| opens a new tab with ``const`` 
   variables for database and 
   collection names.

#. Update the ``database`` and ``collection`` variables with 
   the names for your database and collection.

#. Click the :icon-fa5:`play` button located at the top right of the 
   tab to execute the script. If the database and collection do not 
   already exist, they are created.

Create a New Collection
~~~~~~~~~~~~~~~~~~~~~~~

#. Hover over the database name where you want your collection to exist.

#. Right-click the database name and select :guilabel:`Add Collection`.
   |vsce| opens a new tab with ``const`` variables for database and 
   collection names.

#. Update the ``collection`` variable with your new collection name.

#. Click the :icon-fa5:`play` button located at the top right of the 
   tab to execute the script. The collection is created in the specified database.

Drop a Database or Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. important::

   Dropping data from MongoDB is an irreversible process. Take caution
   to only drop data you are sure you want to delete, and backup your
   data as necessary.

   Dropping a database also drops all collections and documents within
   that database.

To drop a database or collection:

1. Right-click the target database or collection.

#. Click :guilabel:`Drop Database` or :guilabel:`Drop Collection`.

#. In the prompt, type the name of the target database or collection.

#. Press the enter key.

Refresh Data
------------

You can refresh a deployment, database, or collection at any time to
re-query your deployment and populate |vsce| with the most up-to-date
data.

To refresh:

1. Right-click the target deployment, database, or collection.

#. Click :guilabel:`Refresh`.
