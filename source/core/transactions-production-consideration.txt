=========================
Production Considerations
=========================

.. default-domain:: mongodb



.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

The following page lists some production considerations for running
transactions. These apply whether you run transactions on replica sets
or sharded clusters. For running transactions on sharded clusters, see
also the :doc:`/core/transactions-sharded-clusters` for additional
considerations that are specific to sharded clusters.

Availability
------------

- **In version 4.0**, MongoDB supports multi-document transactions on
  replica sets.

- **In version 4.2**, MongoDB introduces distributed transactions,
  which adds support for multi-document transactions on sharded
  clusters and incorporates the existing support for
  multi-document transactions on replica sets.

  To use transactions on MongoDB 4.2 deployments(replica sets and
  sharded clusters), clients :red:`must` use MongoDB drivers updated for
  MongoDB 4.2.

.. topic:: Distributed Transactions and Multi-Document Transactions

   Starting in MongoDB 4.2, the two terms are synonymous. Distributed
   transactions refer to multi-document transactions on sharded
   clusters and replica sets. Multi-document transactions (whether on
   sharded clusters or replica sets) are also known as distributed
   transactions starting in MongoDB 4.2.

Feature Compatibility
---------------------

To use transactions, the :ref:`featureCompatibilityVersion <view-fcv>`
for all members of the deployment must be at least:

.. list-table::
   :header-rows: 1

   * - Deployment
     - Minimum ``featureCompatibilityVersion``
     
   * - Replica Set
     - ``4.0`` 
     
   * - Sharded Cluster
     - ``4.2``

To check the fCV for a member, connect to the member and run the
following command:

.. code-block:: javascript

   db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

For more information, see the
:dbcommand:`setFeatureCompatibilityVersion` reference page.

.. _transaction-limit:

Runtime Limit
-------------

By default, a transaction must have a runtime of less than one minute.
You can modify this limit using
:parameter:`transactionLifetimeLimitSeconds` for the
:binary:`~bin.mongod` instances. For sharded clusters, the parameter
must be modified for all shard replica set members. Transactions that
exceeds this limit are considered expired and will be aborted by a
periodic cleanup process.

For sharded clusters, you can also specify a ``maxTimeMS`` limit on
``commitTransaction``. For more information, see :ref:`Sharded Clusters
Transactions Time Limit <transactions-sharded-clusters-time-limit>`.

.. _txn-oplog-size-limit:

Oplog Size Limit
----------------

Starting in version 4.2,
   MongoDB creates as many oplog entries as necessary to the
   encapsulate all write operations in a transaction, instead of a
   single entry for all write operations in the transaction. This
   removes the 16MB total size limit for a transaction imposed by the
   single oplog entry for all its write operations. Although the total
   size limit is removed, each oplog entry still must be within the
   BSON document size limit of 16MB.

In version 4.0, 
   MongoDB creates a single :doc:`oplog (operations log)
   </core/replica-set-oplog>` entry at the time of commit if the
   transaction contains any write operations. That is, the individual
   operations in the transactions do not have a corresponding oplog
   entry. Instead, a single oplog entry contains all of the write
   operations within a transaction. The oplog entry for the transaction
   must be within the BSON document size limit of 16MB.

WiredTiger Cache
----------------

To prevent storage cache pressure from negatively impacting the
performance:

- When you abandon a transaction, abort the transaction.

- When you encounter an error during individual operation in the
  transaction, abort and retry the transaction.

The :parameter:`transactionLifetimeLimitSeconds` also ensures that
expired transactions are aborted periodically to relieve storage cache
pressure.

Transactions and Security
-------------------------

- If running with :doc:`access control </core/authorization>`, you must
  have :doc:`privileges </reference/built-in-roles>` for the
  :ref:`operations in the transaction <transactions-operations>`.

- If running with :doc:`auditing </core/auditing>`, operations in an
  aborted transaction are still audited. However, there is no audit
  event that indicates that the transaction aborted.

.. _transactions-disabled-wcmajority:

Shard Configuration Restriction
-------------------------------

.. include:: /includes/extracts/transactions-shards-wcmajority-disabled.rst

Sharded Clusters and Arbiters
-----------------------------

.. include:: /includes/extracts/transactions-arbiters.rst

.. |disabledrcmaj| replace:: :ref:`transactions-psa`

.. _transactions-psa:

3-Member Primary-Secondary-Arbiter Architecture
-----------------------------------------------
  
For a three-member replica set with a primary-secondary-arbiter (PSA)
architecture or a sharded cluster with a three-member PSA shards, you
may have :ref:`disabled read concern "majority"
<disable-read-concern-majority>` to avoid cache pressure.

.. include:: /includes/extracts/transactions-read-concern-majority-sharded-clusters.rst

.. include:: /includes/extracts/transactions-read-concern-majority-replica-set.rst

.. tip::

   To check if read concern "majority" is disabled, You can run
   :method:`db.serverStatus()` on the :binary:`~bin.mongod` instances
   and check the :serverstatus:`storageEngine.supportsCommittedReads`
   field. If ``false``, read concern "majority" is disabled.

.. seealso::

   - :option:`--enableMajorityReadConcern false <mongod
     --enableMajorityReadConcern>`

   - :setting:`replication.enableMajorityReadConcern: false
     <replication.enableMajorityReadConcern>`.
  
.. _txns-locks:

Acquiring Locks
---------------

By default, transactions wait up to ``5`` milliseconds to acquire locks
required by the operations in the transaction. If the transaction
cannot acquire its required locks within the ``5`` milliseconds, the
transaction aborts.

Transactions release all locks upon abort or commit.

.. include:: /includes/extracts/transactions-operations-catalog-tip.rst

Lock Request Timeout
~~~~~~~~~~~~~~~~~~~~

You can use the :parameter:`maxTransactionLockRequestTimeoutMillis`
parameter to adjust how long transactions wait to acquire locks.
Increasing :parameter:`maxTransactionLockRequestTimeoutMillis` allows
operations in the transactions to wait the specified time to acquire
the required locks. This can help obviate transaction aborts on
momentary concurrent lock acquisitions, like fast-running metadata
operations. However, this could possibly delay the abort of deadlocked
transaction operations.

You can also use operation-specific timeout by setting
:parameter:`maxTransactionLockRequestTimeoutMillis` to ``-1``.

.. _txn-prod-considerations-ddl:

Pending DDL Operations and Transactions
---------------------------------------

If a multi-document transaction is in progress, new DDL operations that
affect the same database(s) or collection(s) wait behind the
transaction. While these pending DDL operations exist, new transactions
that access the same database(s) or collection(s) as the pending DDL
operations cannot obtain the required locks and and will abort after
waiting :parameter:`maxTransactionLockRequestTimeoutMillis`. In
addition, new non-transaction operations that access the same 
database(s) or collection(s) will block until they reach their 
``maxTimeMS`` limit.

Consider the following scenarios:

DDL Operation That Requires a Collection Lock
  While an in-progress transaction is performing various CRUD operations
  on the ``employees`` collection in the ``hr`` database, an
  administrator issues the :method:`db.collection.createIndex()` DDL
  operation against the ``employees`` collection.
  :method:`~db.collection.createIndex()` requires an exclusive
  collection lock on the collection.

  Until the in-progress transaction completes, the
  :method:`~db.collection.createIndex()` operation must wait to obtain
  the lock. Any new transaction that affects the ``employees``
  collection and starts while the :method:`~db.collection.createIndex()`
  is pending must wait until after 
  :method:`~db.collection.createIndex()` completes. 

  The pending :method:`~db.collection.createIndex()` DDL operation does
  not affect transactions on other collections in the ``hr`` database.
  For example, a new transaction on the ``contractors`` collection in
  the ``hr`` database can start and complete as normal.

DDL Operation That Requires a Database Lock  
  While an in-progress transaction is performing various CRUD operations
  on the ``employees`` collection in the ``hr`` database, an
  administrator issues the :dbcommand:`collMod` DDL  operation against
  the ``contractors`` collection in the same database.
  :dbcommand:`collMod` requires a database lock on the parent ``hr``
  database.

  Until the in-progress transaction completes, the :dbcommand:`collMod`
  operation must wait to obtain the lock. Any new transaction that
  affects the ``hr`` database or *any* of its collections and starts
  while the :dbcommand:`collMod` is pending must wait until after
  :dbcommand:`collMod` completes. 

In either scenario, if the DDL operation remains pending for more than
:parameter:`maxTransactionLockRequestTimeoutMillis`, pending
transactions waiting behind that operation abort. That is, the value of 
:parameter:`maxTransactionLockRequestTimeoutMillis` must at least cover
the time required for the in-progress transaction *and* the pending DDL
operation to complete.

.. seealso:: 

   - :ref:`transactions-write-conflicts`
   
   - :ref:`transactions-stale-reads`

   - :ref:`faq-concurrency-database-lock`

   - :ref:`faq-concurrency-collection-lock`

.. _transactions-write-conflicts:

In-progress Transactions and Write Conflicts
--------------------------------------------

.. include:: /includes/extracts/transactions-write-conflict.rst

.. seealso::

   - :ref:`txns-locks`
   - :ref:`txn-prod-considerations-ddl`
   - :data:`$currentOp output <$currentOp.prepareReadConflicts>`

.. _transactions-stale-reads:

In-progress Transactions and Stale Reads
----------------------------------------

.. include:: /includes/extracts/transactions-stale-reads.rst

In-progress Transactions and Chunk Migration
--------------------------------------------

.. include:: /includes/extracts/transactions-chunk-migration.rst

.. seealso:: :serverstatus:`shardingStatistics.countDonorMoveChunkLockTimeout`

.. _transactions-prod-consideration-outside-reads:

Outside Reads During Commit
---------------------------

.. include:: /includes/extracts/transactions-multi-shard-block-external-reads.rst

Errors
------

Use of MongoDB 4.0 Drivers
~~~~~~~~~~~~~~~~~~~~~~~~~~

To use transactions on MongoDB 4.2 deployments(replica sets and sharded
clusters), clients :red:`must` use MongoDB drivers updated for MongoDB
4.2.

On sharded clusters with multiple :binary:`~bin.mongos` instances,
performing transactions with drivers updated for MongoDB 4.0 (instead
of MongoDB 4.2) will fail and can result in errors, including:

.. note::

   Your driver may return a different error. Refer to your driver's
   documentation for details.


.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Error Code
     - Error Message

   * - 251
     - ``cannot continue txnId -1 for session ... with txnId 1``

   * - 50940
     - ``cannot commit with no participants``

Additional Information
----------------------

.. seealso:: :doc:`/core/transactions-sharded-clusters`

