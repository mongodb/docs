- Adds the ``SearchIndexType`` class, which you can pass
  when constructing a ``SearchIndexModel`` instance. This change
  allows you to specify the index type when creating an Atlas
  Search or Vector Search index. To learn more, see |avs-index-link|.

- Delegates the implementation of the algorithms that implement
  the ``SCRAM-SHA-1`` and ``SCRAM-SHA-256`` authentication mechanisms to
  the configured JCA provider. This change means that your application
  can use a configured FIPS-compliant JCA provider to provide a higher
  level of security.

- Revises the `mongodb-crypt
  <https://mvnrepository.com/artifact/org.mongodb/mongodb-crypt>`__
  dependency versioning to match the versioning for the JVM drivers.
  Future versions of ``mongodb-crypt`` will be released alongside the
  driver and will share the same version number. You must upgrade your
  ``mongodb-crypt`` dependency to v5.2.0 when upgrading your driver for
  this release. To learn more, see |encrypt-link|.

- Performance improvements due to implementation of native cryptography
  on all supported platforms. The following list describes the actions
  needed to implement this improvement depending on your operating
  system:
  
  - **Windows**: Upgrade your ``mongodb-crypt`` version to v5.2.0.

  - **Mac**: Upgrade your ``mongodb-crypt`` version to v5.2.0.

  - **Linux**: Install ``libmongocrypt.so`` directly on the file system,
    instead of using the file that is bundled within the
    ``mongodb-crypt`` JAR file. You can find Linux instructions to install
    ``libmongocrypt`` in the :manual:`Server manual
    </core/csfle/reference/libmongocrypt/#linux-installation>`. If you
    use a package manager to install ``libmongocrypt``, Java Native
    Access (JNA) will find it there without further configuration.
    Alternatively, you can specify the search path by setting the
    ``LD_LIBRARY_PATH`` environment variable to the file path of the
    ``libmongocrypt`` package.
    
    We recommend direct installation because the bundled shared library
    does not link with OpenSSL due to the potential for OpenSSL binary
    incompatibilities.

    The shared library loading is handled by JNA. You can view the rules for library
    loading search path order in the `NativeLibrary class documentation
    <https://java-native-access.github.io/jna/5.14.0/javadoc/com/sun/jna/NativeLibrary.html>`__.

- Fixes an issue that caused the ``InsertOneResult.getInsertedId()`` and
  ``InsertManyResult.getInsertedIds()`` methods to return incorrect document IDs in
  some situations. This change is backported to {+driver-short+} v5.1.4
  and v4.11.4.

- When a sharded cluster operation is unsuccessful, the driver avoids selecting
  the same ``mongos`` server for operation retry attempts if other ``mongos``
  servers are available.

- Adds reachability metadata needed when your application uses GraalVM
  Native Image. This metadata replaces the need for collecting
  reachability metadata when using the driver libraries. To learn more,
  see `Reachability Metadata
  <https://www.graalvm.org/latest/reference-manual/native-image/metadata/>`__
  in the GraalVM documentation.

  This change does not add the ``libjnidispatch`` and ``libmongocrypt``
  resource entries, because adding entries for all supported
  platforms (targets) significantly affects the size of
  native executables built using GraalVM Native Image. View this sample
  `resource-config.json
  <https://github.com/mongodb/mongo-java-driver/blob/master/graalvm-native-image-app/src/main/resources/META-INF/native-image/resource-config.json>`__
  file in the driver GitHub repository to see how to specify these entries explicitly
  if your application depends on the ``org.mongodb:mongodb-crypt`` library.

- Enables exact vector search by extending the ``VectorSearchOptions`` API
  to introduce the following specific option subtypes:

  - ``ExactVectorSearchOptions``: Use this options type to enable
    precise matching, ensuring that results are the closest vectors to a
    given query vector.

  - ``ApproximateVectorSearchOptions``: Use this options type to
    enable searches that might not return the exact closest vectors. You
    can pass a ``numCandidates`` parameter when instantiating this type
    to specify the number of nearest neighbors to consider.

  To learn more about using the Atlas Vector Search feature, see
  |vector-search-link|.