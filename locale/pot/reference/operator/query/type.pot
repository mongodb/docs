# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/operator/query/type.txt:3
# cb6df10235324998953244e9b50f1f81
msgid "$type"
msgstr ""

#: ../source/reference/operator/query/type.txt:8
# 4624d8b24eeb40c1a5ef07cf8c2d9cee
msgid "Definition"
msgstr ""

#: ../source/reference/operator/query/type.txt:12
# 5b84cfd4ea5f425d9fdf691b917d63f6
msgid "*Syntax*: ``{ field: { $type: <BSON type> } }``"
msgstr ""

#: ../source/reference/operator/query/type.txt:14
# 63c5d73cba33457f8c7fa45437e98a34
msgid ":query:`$type` selects the documents where the *value* of the ``field`` is an instance of the specified numeric :term:`BSON` type. This is useful when dealing with highly unstructured data where data types are not predictable."
msgstr ""

#: ../source/includes/warning-mixing-types.rst:3
# eca980b135404e65ad2c9aa6a4d63fa9
msgid "Data models that associate a field name with different data types within a collection are *strongly* discouraged."
msgstr ""

#: ../source/includes/warning-mixing-types.rst:6
# 753957a1eaea4e298687962ce82b7d68
msgid "Without internal consistency complicates application code, and can lead to unnecessary complexity for application developers."
msgstr ""

#: ../source/reference/operator/query/type.txt:22
# 1cdadecbe1c246058e49ff3dfdc1a6c5
msgid "Behavior"
msgstr ""

#: ../source/reference/operator/query/type.txt:25
# 2e9660b81b8747bea47f9e4939b530a6
msgid "Available Types"
msgstr ""

#: ../source/reference/operator/query/type.txt:27
# d83648822be0469197139ea007591902
msgid "Refer to the following table for the available :term:`BSON` types and their corresponding numbers."
msgstr ""

#: ../source/includes/fact-bson-types.rst:2
# bead52a9749046f7897941e757b6aa16
msgid "**Type**"
msgstr ""

#: ../source/includes/fact-bson-types.rst:2
# 26f1e03790a747059a0a90ddb6dd0832
msgid "**Number**"
msgstr ""

#: ../source/includes/fact-bson-types.rst:2
# 8687bfe011be467491672db052786b65
msgid "**Notes**"
msgstr ""

#: ../source/includes/fact-bson-types.rst:4
# 5386302c64d54cd989ec998cab18a069
msgid "Double"
msgstr ""

#: ../source/includes/fact-bson-types.rst:4
# a8dbbab761c9487f8784ffa47a5dec81
msgid "1"
msgstr ""

#: ../source/includes/fact-bson-types.rst:5
# 587d1cd333084dfcb3e354213ba9777b
msgid "String"
msgstr ""

#: ../source/includes/fact-bson-types.rst:5
# 7cbcada5bdc843198d4f3348e99156d5
msgid "2"
msgstr ""

#: ../source/includes/fact-bson-types.rst:6
# c4de84af9df24c478108ab8bdd7e6b66
msgid "Object"
msgstr ""

#: ../source/includes/fact-bson-types.rst:6
# 6172f6c67bde4c51aa9072e91bee50b8
msgid "3"
msgstr ""

#: ../source/includes/fact-bson-types.rst:7
# 7efa37320e91420bb8be2dda46e9cdc0
msgid "Array"
msgstr ""

#: ../source/includes/fact-bson-types.rst:7
# 47ecfcbb4d544f1bbfad7dfcd5a88caa
msgid "4"
msgstr ""

#: ../source/includes/fact-bson-types.rst:8
# 210ba496c4274bceb84dde6ffb9efc5b
msgid "Binary data"
msgstr ""

#: ../source/includes/fact-bson-types.rst:8
# fb1e1049b6f74dd6a0bbd26d404a9a62
msgid "5"
msgstr ""

#: ../source/includes/fact-bson-types.rst:9
# 85fe5f1e305e4b3885c7b1c94d0b0f26
msgid "Undefined"
msgstr ""

#: ../source/includes/fact-bson-types.rst:9
# 64b41edf4ba747899790408a293038c2
msgid "6"
msgstr ""

#: ../source/includes/fact-bson-types.rst:9
# 1458367b0c094b7bbcfc335b11010c7c
msgid "Deprecated."
msgstr ""

#: ../source/includes/fact-bson-types.rst:10
# 864d57f54bbc4ff59f8255cfefab9449
msgid "Object id"
msgstr ""

#: ../source/includes/fact-bson-types.rst:10
# ddfac3b81f304f0897d631c63cd09cf8
msgid "7"
msgstr ""

#: ../source/includes/fact-bson-types.rst:11
# 289e9f144e4d442199c6fc76a5704532
msgid "Boolean"
msgstr ""

#: ../source/includes/fact-bson-types.rst:11
# ae808445f49d4cf9aa7273d938b4a85c
msgid "8"
msgstr ""

#: ../source/includes/fact-bson-types.rst:12
# d875b3184df54555b4a54ff6b1f7b2b2
msgid "Date"
msgstr ""

#: ../source/includes/fact-bson-types.rst:12
# a6e6490c078f4049b2743e87bf8f531f
msgid "9"
msgstr ""

#: ../source/includes/fact-bson-types.rst:13
# aa0f7609875d4016b851e86374fa468a
msgid "Null"
msgstr ""

#: ../source/includes/fact-bson-types.rst:13
# 81845e66c7284b3396e8c21517989431
msgid "10"
msgstr ""

#: ../source/includes/fact-bson-types.rst:14
# 58bacf3d85574afca4dbabb35cd532d7
msgid "Regular Expression"
msgstr ""

#: ../source/includes/fact-bson-types.rst:14
# 9fed875315ed4f36a37912044b28d52f
msgid "11"
msgstr ""

#: ../source/includes/fact-bson-types.rst:15
# 00daa920b37d4e5e94f38b1e7043fb02
msgid "JavaScript"
msgstr ""

#: ../source/includes/fact-bson-types.rst:15
# a0b05d1e9bb145efb008d69d233ee1f4
msgid "13"
msgstr ""

#: ../source/includes/fact-bson-types.rst:16
# 130a8e2db9b54471b6580ba4939b5626
msgid "Symbol"
msgstr ""

#: ../source/includes/fact-bson-types.rst:16
# df3c2f5e9f164833933e2885ce223822
msgid "14"
msgstr ""

#: ../source/includes/fact-bson-types.rst:17
# e58d65c725bf42d5aa6c2241e4a6d5e7
msgid "JavaScript (with scope)"
msgstr ""

#: ../source/includes/fact-bson-types.rst:17
# 0c76ad8ac4bc42ebbef8c35f7aa4e55a
msgid "15"
msgstr ""

#: ../source/includes/fact-bson-types.rst:18
# 373f0f5570ab4204a1ed61ae54419219
msgid "32-bit integer"
msgstr ""

#: ../source/includes/fact-bson-types.rst:18
# c17feb44aca14989b7b3000218fc65f3
msgid "16"
msgstr ""

#: ../source/includes/fact-bson-types.rst:19
# 44bf34bb22974c78a705333ad96bcc59
msgid "Timestamp"
msgstr ""

#: ../source/includes/fact-bson-types.rst:19
# 1e0c3665dd8f48bb884c2240d15c0ad5
msgid "17"
msgstr ""

#: ../source/includes/fact-bson-types.rst:20
# 2b80607a2f4d41f68af991c1eefade41
msgid "64-bit integer"
msgstr ""

#: ../source/includes/fact-bson-types.rst:20
# 9c9f3e4b29a8448dbc344ab65477e328
msgid "18"
msgstr ""

#: ../source/includes/fact-bson-types.rst:21
# 5eeecb272fea40048cf8c838be9a76ee
msgid "Min key"
msgstr ""

#: ../source/includes/fact-bson-types.rst:21
# b66dd58c5eb047d19652c4bb3c8d5811
msgid "255"
msgstr ""

#: ../source/includes/fact-bson-types.rst:21
# ce1f232d17054ef3b262451f6541cab4
msgid "Query with ``-1``."
msgstr ""

#: ../source/includes/fact-bson-types.rst:22
# 13732807548b440bb422c53aaafc0750
msgid "Max key"
msgstr ""

#: ../source/includes/fact-bson-types.rst:22
# f0b03e3cafae42a581bd45386ef78fd8
msgid "127"
msgstr ""

#: ../source/reference/operator/query/type.txt:33
# 5df6aa366361452c91b656829f1aaed8
msgid "Minimum and Maximum Values"
msgstr ""

#: ../source/reference/operator/query/type.txt:35
# 09b304ae2da04ef9bb0a32838149817c
msgid "``MinKey`` and ``MaxKey`` compare less than and greater than all other possible :term:`BSON` element values, respectively, and exist primarily for internal use."
msgstr ""

#: ../source/reference/operator/query/type.txt:39
# a912f3a52a0942c681cc829bd49fed2f
msgid "To query if a field value is a ``MinKey``, you must use :query:`$type` with ``-1`` as in the following example:"
msgstr ""

#: ../source/reference/operator/query/type.txt:47
# 431723ddae3e4a0faa862ded8fe3f851
msgid "Arrays"
msgstr ""

#: ../source/reference/operator/query/type.txt:49
# 20859eef147e475f9f1c8308bfd8ac8b
msgid "When applied to arrays, :query:`$type` matches any **inner** element that is of the specified type. Without :term:`projection` this means that the entire array will match if **any** element has the right type. With projection, the results will include just those elements of the requested type."
msgstr ""

#: ../source/reference/operator/query/type.txt:56
# ad059659e7a04395a8f98e2a81f46134
msgid "Examples"
msgstr ""

#: ../source/reference/operator/query/type.txt:59
# 0a8e604fae684e248c2fe55e6dddf167
msgid "Querying by Data Type"
msgstr ""

#: ../source/reference/operator/query/type.txt:61
# 5d5ddeea1ac848f4b829992bfbaa40cc
msgid "Consider the following query:"
msgstr ""

#: ../source/reference/operator/query/type.txt:67
# 71fd6a868948492c86bc56af223f2552
msgid "This will list all documents containing a ``tags`` field that is either a string or an array holding at least one string. If you only want to list documents where ``tags`` is an array, you could use :query:`$where`:"
msgstr ""

#: ../source/reference/operator/query/type.txt:75
# bc0b7671447440c593e9530eb0337d24
msgid "Queries that use :query:`$where` requires a complete collection scan and uses :ref:`Server-side JavaScript <server-side-javascript>`."
msgstr ""

#: ../source/reference/operator/query/type.txt:79
# 26bc5cc97098478f949613929be69d0c
msgid "``MinKey`` and ``MaxKey``"
msgstr ""

#: ../source/reference/operator/query/type.txt:81
# 291b5332077c4f23ab529c24286d40fa
msgid "The following operation sequence demonstrates both type comparison *and* the special ``MinKey`` and ``MaxKey`` values:"
msgstr ""

#: ../source/reference/operator/query/type.txt:102
# 9e9ee4aaf5414c6c82fdd8fed1bccd95
msgid "Minimum Shard Key"
msgstr ""

#: ../source/reference/operator/query/type.txt:104
# 680f7d810d58494fad4a34e6585ca023
msgid "To query for the minimum value of a :term:`shard key` of a :term:`sharded cluster`, use the following operation when connected to the :program:`mongos`:"
msgstr ""

#: ../source/reference/operator/query/type.txt:114
# 451f0c7a5a204863ae2140c5179f059c
msgid "Additional Information"
msgstr ""

#: ../source/reference/operator/query/type.txt:116
# fc16086d84a24e50b1cd30e6b8713825
msgid ":method:`~db.collection.find()`, :method:`~db.collection.insert()`, :query:`$where`, :term:`BSON`, term:`shard key`, :term:`sharded cluster` ."
msgstr ""

