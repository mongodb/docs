===============================================
Reconfigure a Replica Set when Members are Down
===============================================

.. default-domain:: mongodb

To reconfigure a :term:`replica set` when a only a **minority** of
members have become inaccessible, use the :method:`rs.reconfig()`
operation on
the current :term:`primary`, following the example in the
:ref:`Replica Set Reconfiguration Procedure
<replica-set-reconfiguration-usage>`.

To reconfigure a replica set when a **majority** of members have become
inaccessible, use one of the procedures in this document. This situation
might occur, for example, in a replica set is distributed across
multiple facilities and *no* local group of members can reach a
majority. See
:ref:`replica-set-elections-and-network-partitions` for more
information on this situation.

This document provides the following options for reconfiguring a replica
set when a **majority** of members are accessible:

- :ref:`replica-set-force-reconfiguration`
- :ref:`replica-set-reconfigure-by-replacing`

.. index:: replica set; reconfiguration
.. _replica-set-force-reconfiguration:

Reconfigure by Forcing the Reconfiguration
------------------------------------------

.. versionchanged:: 2.0

This procedure lets you recover while a majority of :term:`replica set`
members are down or unreachable. You connect to any surviving member and
use the ``force`` option to the :method:`rs.reconfig()`  method.

The ``force`` option forces reconfiguration of the set. Use this procedure only to
recover from catastrophic interruptions. Do not use ``force`` every
time you reconfigure. Also, do not use ``force`` in any automatic
scripts and do not use ``force`` when there is still a :term:`primary`.

To force reconfiguration:

1. Back up a surviving member.

#. Connect to a surviving member and save the current configuration.
   Consider the following example commands for saving the configuration:

   .. code-block:: javascript

      cfg = rs.conf()

      printjson(cfg)

#. On the same member, remove the down and unreachable members of the
   replica set from the :data:`members <rs.conf.members>` array by
   setting the array equal to the surviving members alone. Consider the
   following example, which uses the ``cfg`` variable created in the
   previous step:

   .. code-block:: javascript

      cfg.members = [cfg.members[0] , cfg.members[4] , cfg.members[7]]

#. On the same member, reconfigure the set by using the
   :method:`rs.reconfig()` command with the ``force`` option set to
   ``true``:

   .. code-block:: javascript

      rs.reconfig(cfg, {force : true})

   This operation forces the replica set to elect a new primary. Often
   this is the member with which your :program:`mongo` shell has a
   connection.

   .. note:: When you use ``force : true``, the version number in the
      replica set configuration increases significantly, by tens or
      hundreds of thousands. This is normal and designed to prevent set
      version collisions if network partitioning ends.

#. If the failure or partition was only temporary, shut down or
   decommission the removed members as soon as possible.

.. _replica-set-reconfigure-by-replacing:

Reconfigure by Replacing the Replica Set
----------------------------------------

Use the following procedure **only** for versions of MongoDB prior to
version 2.0. If you're running MongoDB 2.0 or later, use the above
procedure, :ref:`replica-set-force-reconfiguration`.

These procedures are for situations where a *majority* of the
:term:`replica set` members are down or unreachable. If a majority is
*running*, then skip these procedures and instead use the
:method:`rs.reconfig()` command according to the examples in
:ref:`replica-set-reconfiguration-usage`.

If you run a pre-2.0 version and a majority of your replica set is down,
you have the two options described here. Both involve replacing the
replica set.

Reconfigure by Turning Off Replication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This option replaces the :term:`replica set` with a :term:`standalone` server.

1. Stop the surviving :program:`mongod` instances. To ensure a clean shutdown, use
   an existing :term:`control script` or an invocation that resembles the
   following:

   .. code-block:: javascript

      mongod --dbpath /data/db/ --shutdown

   Set :option:`--dbpath <mongod --dbpath>` to the data directory of your
   :program:`mongod` instance.

#. Create a backup of the data directory (i.e. :setting:`dbpath`) of
   the surviving members of the set.

   .. optional:: If you have a backup of the database you may instead remove
      this data.

#. Restart one of the :program:`mongod` instances *without* the
   :option:`--replSet <mongod --replSet>` parameter.

   The data is now accessible and provided by a single server that is
   not a replica set member. Clients can use this server for both
   reads and writes.

When possible, re-deploy a replica set to provide redundancy and to
protect your deployment from operational interruption.

Reconfigure by "Breaking the Mirror"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This option selects a surviving :term:`replica set` member to be the new
:term:`primary` and to "seed" a new replica set. All other
members must resync from this new primary.

1. Stop the surviving :program:`mongod` instances. To ensure a clean shutdown, use
   an existing :term:`control script` or an invocation that resembles the
   following:

   .. code-block:: javascript

      mongod --dbpath /data/db/ --shutdown

   Set :option:`--dbpath <mongod --dbpath>` to the data directory of your
   :program:`mongod` instance.

#. Move the data directory (i.e. :setting:`dbpath <mongod --dbpath>`) from each
   surviving member to an archive. For example:

   .. code-block:: sh

      mv /data/db /data/db-old

   .. optional:: If you have a backup of the database you may instead remove
      this data.

#. Restart all :program:`mongod` instances with a new replica set
   name. For example, if the old set name was ``rs0``, you might invoke the :program:`mongod`
   instances with the following command line argument:

   .. code-block:: sh

      --replSet rs1

   See :setting:`replSet` and :option:`--replSet <mongod --replSet>`
   for more information.

#. On the new primary, add the other instances as members of the replica
   set. For more information, see :doc:`/tutorial/expand-replica-set`.
