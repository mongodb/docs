# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/build-a-2dsphere-index.txt:5
#: ../source/tutorial/build-a-2dsphere-index.txt:54
# d772d8631d484982b03ba252dc653d32
# 989a1216d6bb4809bdbff101f887f126
msgid "Create a ``2dsphere`` Index"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:9
# d08580ee20c64faeb25d70d55ea823dd
msgid "To create a geospatial index for GeoJSON-formatted data, use the :method:`db.collection.createIndex()` method to create a :doc:`2dsphere index </core/2dsphere>`. In the index specification document for the :method:`db.collection.createIndex()` method, specify the location field as the index key and specify the string literal ``\"2dsphere\"`` as the value:"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:20
# 461f0a6ae1504b659e295ba92e3c3156
msgid "The following procedure presents steps to populate a collection with documents that contain a GeoJSON data field and create :doc:`2dsphere indexes </core/2dsphere>`. Although the procedure populates the collection first, you can also create the indexes before populating the collection."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:27
# 751b0ceb326448d5b074a6b2d2671d22
msgid "Procedure"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:29
# 42005dd3445c4d3a8f0a079765af65b3
msgid "First, populate a collection ``places`` with documents that store location data as :ref:`GeoJSON Point <geojson-point>` in a field named ``loc``. The coordinate order is longitude, then latitude."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:51
# f1a6960f69ba466481a4c57eb2ae9c29
msgid "Then, create the :doc:`2dsphere </core/2dsphere>` index."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:56
# b776838c2b744192a148f85d60a59a50
msgid "For example, the following creates a :doc:`2dsphere </core/2dsphere>` index on the location field ``loc``:"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:64
# 96e3939e54914163bd94776bef0020f7
msgid "Create a Compound Index with ``2dsphere`` Index Key"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:66
# e7eb9eeac730478e954f5c87f2058683
msgid "A :ref:`compound index <index-type-compound>` can include a ``2dsphere`` index key in combination with non-geospatial index keys. For example, the following operation creates a compound index where the first key ``loc`` is a ``2dsphere`` index key, and the remaining keys ``category`` and ``names`` are non-geospatial index keys, specifically descending (``-1``) and ascending (``1``) keys respectively."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:78
# 5c32762faa044750a8b80d37ecf8b5ff
msgid "Unlike the :doc:`2d </core/2d>` index, a compound ``2dsphere`` index does not require the location field to be the first field indexed. For example:"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:87
# 61b4cb604fed49afa0ae05a327e3c722
msgid "Considerations"
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:1
# 4f7a2b8343ca4545917db856e747e9ff
msgid "The :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline stage require that a collection have *at most* only one |first-geo-index| and/or only one |second-geo-index| whereas :ref:`geospatial query operators <geospatial-query-selectors>` (e.g. :query:`$near` and :query:`$geoWithin`) permit collections to have multiple geospatial indexes."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:8
# f6c5de4d4e9f4107a0d82e00fa67b93e
msgid "The geospatial index restriction for the :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline stage exists because neither the :dbcommand:`geoNear` command nor the :pipeline:`$geoNear` pipeline stage syntax includes the location field. As such, index selection among multiple ``2d`` indexes or ``2dsphere`` indexes is ambiguous."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:14
# 5ba1942de6264f868e2acf4239494097
msgid "No such restriction applies for :ref:`geospatial query operators <geospatial-query-selectors>` since these operators take a location field, eliminating the ambiguity."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:93
# cbf674d532224c37b2c759905b4c0f5f
msgid "As such, although this tutorial creates multiple ``2dsphere`` indexes, to use the :dbcommand:`geoNear` command or the :pipeline:`$geoNear` pipeline stage against the example collection, you will need to :method:`drop <db.collection.dropIndex()>` all but one of the ``2dsphere`` indexes."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:99
# 4c115eea19764d31b9aae28cd636d68f
msgid "To query using the ``2dsphere`` index, see :doc:`/tutorial/query-a-2dsphere-index`."
msgstr ""

