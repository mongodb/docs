============
db.getRole()
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Definition
----------

.. |getRoleMethod| replace:: ``db.getRole()``

.. method:: db.getRole(rolename, args)

   Returns the roles from which this role inherits privileges. Optionally, the
   method can also return all the role's privileges.

   Run :method:`db.getRole()` from the database that contains the role. The
   command can retrieve information for both :ref:`user-defined roles
   <user-defined-roles>` and :ref:`built-in roles <built-in-roles>`.

   The :method:`db.getRole()` method accepts the following parameters:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
        - Type
        - Description
   
      * - ``rolename``
        - string
        - The name of the role.

      * - ``args``
        - document
        - Optional. A document specifying additional arguments.

   The ``args`` document supports the following optional fields:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
        - Type
        - Description
   
      * - ``showAuthenticationRestrictions``

        - boolean

        - .. include:: /includes/fact-show-auth-restrictions-description.rst
      
      * - ``showBuiltinRoles``

        - boolean

        - Optional. Set this field to ``true`` to include :ref:`built-in
          roles <built-in-roles>` in the output. By default, this field
          is set to ``false``, and the output for ``rolesInfo: 1``
          displays only :ref:`user-defined roles <user-defined-roles>`.
   
      * - ``showPrivileges``

        - boolean

        - Optional. Set this field to ``true`` to show role privileges,
          including both privileges inherited from other roles and
          privileges defined directly. By default, the command returns
          only the roles from which this role inherits privileges and
          does not return specific privileges.

   :method:`db.getRole()` wraps the :dbcommand:`rolesInfo` command.

Compatibility
-------------

This method is available in deployments hosted in the following
environments:

.. include:: /includes/fact-environments-no-atlas-support.rst

.. include:: /includes/fact-environments-onprem-only.rst

Required Access
---------------

.. include:: /includes/access-roles-info.rst

Examples
--------

The examples in this section show how to use ``db.getRoles`` to:

- :ref:`db-getRole-example-inheritance`

- :ref:`db-getRole-example-privileges`

- :ref:`db-getRole-example-auth-restrictions`

.. _db-getRole-example-inheritance:

Show Role Inheritance Information
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation returns role inheritance information for the role
``associate`` defined on the ``products`` database:

.. code-block:: javascript

   use products
   db.getRole( "associate" )

Example output:

.. code-block:: javascript
   :copyable: false

   {
     _id: 'products.associate',
     role: 'associate',
     db: 'products',
     roles: [ { role: 'readWrite', db: 'products' } ],
     inheritedRoles: [ { role: 'readWrite', db: 'products' } ],
     isBuiltin: false
   }

.. _db-getRole-example-privileges:

Show Role Privileges
~~~~~~~~~~~~~~~~~~~~

The following operation returns role inheritance information *and privileges*
for the role ``associate`` defined on the ``products`` database:

.. code-block:: javascript

   use products
   db.getRole( "associate", { showPrivileges: true } )

Example output:

.. code-block:: javascript
   :copyable: false

   {
     _id: 'products.associate',
     role: 'associate',
     db: 'products',
     privileges: [
       {
         resource: { db: 'products', collection: '' },
         actions: [ 'bypassDocumentValidation' ]
       }
     ],
     roles: [ { role: 'readWrite', db: 'products' } ],
     inheritedRoles: [ { role: 'readWrite', db: 'products' } ],
     inheritedPrivileges: [
       {
         resource: { db: 'products', collection: '' },
         actions: [ 'bypassDocumentValidation' ]
       },
       {
         resource: { db: 'products', collection: '' },
         actions: [
           'changeStream',
           'collStats',
           'compactStructuredEncryptionData',
           'convertToCapped',
           'createCollection',
           'createIndex',
           'dbHash',
           'dbStats',
           'dropCollection',
           'dropIndex',
           'find',
           'insert',
           'killCursors',
           'listCollections',
           'listIndexes',
           'planCacheRead',
           'remove',
           'renameCollectionSameDB',
           'update'
         ]
       }
     ],
     isBuiltin: false
   }

.. _db-getRole-example-auth-restrictions:

Show Authentication Restrictions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation returns role inheritance information and
authentication restrictions for the role ``associate`` defined on the
``products`` database:

.. code-block:: javascript

   use products
   db.getRole( "associate", { showAuthenticationRestrictions: true } )

Example output:

.. code-block:: javascript
   :copyable: false

   {
     _id: 'products.associate',
     role: 'associate',
     db: 'products',
     roles: [ { role: 'readWrite', db: 'products' } ],
     authenticationRestrictions: [
       [ { clientSource: [ '198.51.100.0' ] } ]
     ],
     inheritedRoles: [ { role: 'readWrite', db: 'products' } ],
     inheritedAuthenticationRestrictions: [
       [ { clientSource: [ '198.51.100.0' ] } ]
     ],
     isBuiltin: false
   }
