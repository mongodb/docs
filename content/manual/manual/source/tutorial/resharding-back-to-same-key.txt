.. _resharding-a-collection-back-to-same-key:

===============================================
Reshard a Collection back to the Same Shard Key
===============================================

.. facet::
   :name: genre
   :values: tutorial

.. meta:: 
   :description: Resharding a collection back to the same shard key

About this Task
---------------

Resharding to the same shard key lets you use resharding as a data
movement mechanism. This enables you to:       

.. include:: /includes/resharding-about.rst

.. include:: /includes/resharding-operation-phases.rst

Before you Begin
----------------

Before you reshard, you must calculate your cluster's 
:ref:`<resharding-storage-req>`, :ref:`<resharding-latency-req>`,
and any :ref:`<resharding-addl-reqs>`.

.. _resharding-storage-req:

Storage Requirements
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/reshard-to-same-key/storage.rst

.. _resharding-latency-req:

Latency Requirements
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/reshard-to-same-key/latency.rst

.. _resharding-addl-reqs:

Additional Resource Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/reshard-to-same-key/addl-resource-reqs.rst

Steps
-----

.. procedure::
   :style: normal
   
   .. step:: Reshard the collection.

      Use the :dbcommand:`reshardCollection` command with the ``forceRedistribution`` 
      option set to ``true`` to reshard the collection. The ``reshardCollection``
      command has the following syntax:
 
      .. include:: /includes/reshardCollection-syntax.rst

      For example, this command reshards the ``info.productsInformation``
      collection on its current shard key ``{ product_SKU : 1 }``:

      .. code-block:: javascript
     
         db.adminCommand( 
            {
               reshardCollection: "info.productsInformation",
               key: { product_SKU : 1 },
               forceRedistribution: true
            }
         )
            
   .. step:: Monitor the resharding operation. 
   
      To monitor the resharding operation, you can use the
      :pipeline:`$currentOp` pipeline stage:
   
      .. code-block:: javascript
   
         db.getSiblingDB("admin").aggregate( 
            [
              { $currentOp: { allUsers: true, localOps: false } },
              {
                $match: {
                  type: "op",
                  "originatingCommand.reshardCollection": "<database>.<collection>"
                }
              }
            ] 
         )
   
      .. note::
   
         To see updated values, you need to continuously run the 
         pipeline.
   
      The :pipeline:`$currentOp` pipeline outputs:
   
      - ``totalOperationTimeElapsedSecs``: elapsed operation time in
        seconds
      - .. include:: /includes/remainingOperationTimeEstimatedSecs-details.rst
   
      .. code-block:: javascript
   
         [
           {
             shard: '<shard>',
             type: 'op',
             desc: 'ReshardingRecipientService | ReshardingDonorService | ReshardingCoordinatorService <reshardingUUID>',
             op: 'command',
             ns: '<database>.<collection>',
             originatingCommand: {
               reshardCollection: '<database>.<collection>',
               key: <shardkey>,
               unique: <boolean>,
               collation: { locale: 'simple' }
             },
             totalOperationTimeElapsedSecs: <number>,
             remainingOperationTimeEstimatedSecs: <number>,
             ...
           },
           ...
         ]
      

Learn More
----------

- :ref:`<reshard-to-same-key>`
- :ref:`<sharding-resharding>`
- :method:`sh.reshardCollection()`
