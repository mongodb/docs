============
Transactions
============

.. default-domain:: mongodb

.. role:: red(strong)
   :class: text-danger

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. meta::
   :description: MongoDB transactions, distributed transactions, MongoDB multi-document transactions, MongoDB multi-statement transactions, java transaction examples, python transaction examples, node transaction examples, php transaction examples, scala transaction examples, csharp transaction examples, perl transaction examples, ruby transaction examples
   :keywords: MongoDB, transactions, distributed transactions, MongoDB multi-document transactions, MongoDB multi-statement transactions, java transaction examples, python transaction examples, node transaction examples, php transaction examples, scala transaction examples, csharp transaction examples, perl transaction examples, ruby transaction examples

In MongoDB, an operation on a single document is atomic. Because you can
use embedded documents and arrays to capture relationships between data
in a single document structure instead of normalizing across multiple
documents and collections, this single-document atomicity obviates the
need for multi-document transactions for many practical use cases.

For situations that require atomicity of reads and writes to multiple
documents (in a single or multiple collections), MongoDB supports
multi-document transactions. With distributed transactions,
transactions can be used across multiple operations, collections,
databases, documents, and shards.

Transactions API
----------------

The following example highlights the key components
of the transactions API:

.. tabs::

   tabs:

     - id: pythontxn
       name: Python

       content: |

          The example uses the new callback API for working with
          transactions, which starts a transaction, executes the
          specified operations, and commits (or aborts on error). The
          new callback API also incorporates retry logic for
          ``TransientTransactionError`` or
          ``UnknownTransactionCommitResult`` commit errors.

          .. important::
          
             - For transactions on MongoDB 4.2 deployments (replica
               sets and sharded clusters), clients :red:`must` use
               MongoDB drivers updated for MongoDB 4.2.

             - When using the drivers, each operation in the
               transaction must be associated with the session (i.e.
               pass in the session to each operation).

          .. code-block:: python

             # For a replica set, include the replica set name and a seedlist of the members in the URI string; e.g.
             # uriString = 'mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017/admin?replicaSet=myRepl'
             # For a sharded cluster, connect to the mongos instances; e.g.
             # uriString = 'mongodb://mongos0.example.com:27017,mongos1.example.com:27017/admin'

             client = MongoClient(uriString)
             
             my_write_concern_majority = WriteConcern('majority', wtimeout=1000)

             # Prereq: Create collections. CRUD operations in transactions must be on existing collections.

             client.get_database(
                 'mydb1',
                 write_concern=my_write_concern_majority).foo.insert_one({'abc': 0})
             client.get_database(
                 'mydb2',
                 write_concern=my_write_concern_majority).bar.insert_one({'xyz': 0})

             # Step 1: Define the callback that specifies the sequence of operations to perform inside the transactions.

             def callback(my_session):
                 collection_one = my_session.client.mydb1.foo
                 collection_two = my_session.client.mydb2.bar

                 # Important:: You must pass the session to the operations.

                 collection_one.insert_one({'abc': 1}, session=my_session)
                 collection_two.insert_one({'xyz': 999}, session=my_session)

             #. Step 2: Start a client session.

             with client.start_session() as session:

                 # Step 3: Use with_transaction to start a transaction, execute the callback, and commit (or abort on error).

                 session.with_transaction(callback,
                                          read_concern=ReadConcern('local'),
                                          write_concern=my_write_concern_majority,
                                          read_preference=ReadPreference.PRIMARY)

     - id: javatxn
       name: Java

       content: |

          The example uses the new callback API for working with
          transactions, which starts a transaction, executes the
          specified operations, and commits (or aborts on error). The
          new callback API also incorporates retry logic for
          ``TransientTransactionError`` or
          ``UnknownTransactionCommitResult`` commit errors.

          .. important::
          
             - For transactions on MongoDB 4.2 deployments (replica
               sets and sharded clusters), clients :red:`must` use
               MongoDB drivers updated for MongoDB 4.2.

             - When using the drivers, each operation in the
               transaction must be associated with the session (i.e.
               pass in the session to each operation).

          .. code-block:: java

             /*
               For a replica set, include the replica set name and a seedlist of the members in the URI string; e.g.
               String uri = "mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017/admin?replicaSet=myRepl";
               For a sharded cluster, connect to the mongos instances; e.g.
               String uri = "mongodb://mongos0.example.com:27017,mongos1.example.com:27017:27017/admin";
              */

             final MongoClient client = MongoClients.create(uri);

             /*
                 Prereq: Create collections. CRUD operations in transactions must be on existing collections.
              */

             client.getDatabase("mydb1").getCollection("foo")
                     .withWriteConcern(WriteConcern.MAJORITY).insertOne(new Document("abc", 0));
             client.getDatabase("mydb2").getCollection("bar")
                     .withWriteConcern(WriteConcern.MAJORITY).insertOne(new Document("xyz", 0));

             /* Step 1: Start a client session. */

             final ClientSession clientSession = client.startSession();

             /* Step 2: Optional. Define options to use for the transaction. */

             TransactionOptions txnOptions = TransactionOptions.builder()
                     .readPreference(ReadPreference.primary())
                     .readConcern(ReadConcern.LOCAL)
                     .writeConcern(WriteConcern.MAJORITY)
                     .build();

             /* Step 3: Define the sequence of operations to perform inside the transactions. */

             TransactionBody txnBody = new TransactionBody<String>() {
                 public String execute() {
                     MongoCollection<Document> coll1 = client.getDatabase("mydb1").getCollection("foo");
                     MongoCollection<Document> coll2 = client.getDatabase("mydb2").getCollection("bar");

                     /*
                        Important:: You must pass the session to the operations.
                      */
                     coll1.insertOne(clientSession, new Document("abc", 1));
                     coll2.insertOne(clientSession, new Document("xyz", 999));
                     return "Inserted into collections in different databases";
                 }
             };
             try {
                 /* 
                    Step 4: Use .withTransaction() to start a transaction, 
                    execute the callback, and commit (or abort on error).
                 */

                 clientSession.withTransaction(txnBody, txnOptions);
             } catch (RuntimeException e) {
                 // some error handling
             } finally {
                 clientSession.close();
             }

     - id: nodetxn
       name: Node.js
       content: |

          The example uses the new callback API for working with
          transactions, which starts a transaction, executes the
          specified operations, and commits (or aborts on error). The
          new callback API also incorporates retry logic for
          ``TransientTransactionError`` or
          ``UnknownTransactionCommitResult`` commit errors.

          .. important::
          
             - For transactions on MongoDB 4.2 deployments (replica
               sets and sharded clusters), clients :red:`must` use
               MongoDB drivers updated for MongoDB 4.2.

             - When using the drivers, each operation in the
               transaction must be associated with the session (i.e.
               pass in the session to each operation).

          .. code-block:: javascript

             /*
               For a replica set, include the replica set name and a seedlist of the members in the URI string; e.g.
               uri = 'mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017/admin?replicaSet=myRepl';
               For a sharded cluster, connect to the mongos instances; e.g.
               uri = 'mongodb://mongos0.example.com:27017,mongos1.example.com:27017:27017/admin';
              */
            
             const client = new MongoClient(uri);
             await client.connect();

             /* 
               Prerequisites: Assumes the collections already exist. 
               CRUD operations in transactions must be on existing collections.
              */
  
             /* Step 1: Start a client session. The default transaction options are optional.*/
             const session = client.startSession({defaultTransactionOptions: {
                readConcern: { level: 'local' },
                writeConcern: { w: 'majority' },
                readPreference: 'primary'
             }});

              
             try {
               /* 
                  Step 2: Use withTransaction method to start a transaction, 
                  execute the callback, and commit (or abort on error).
                  The withTransaction method only supports functions that return a `Promise`.
                */
               await session.withTransaction(async function() {
                  const coll1 = client.db('mydb1').collection('foo');
                  const coll2 = client.db('mydb2').collection('bar');
                  
                  // Important:: You must pass the session to the operations.
                  await coll1.insertOne({ abc: 1 }, { session });

                  // Important:: You must pass the session to the operations.
                  await coll2.insertOne({ xyz: 999 }, { session });
               });
             } catch (err) {
               // transaction failed after attempted retry
               // some error handling
             }

     - id: phptxn
       name: PHP
       content: |

          The following example omits retry logic and robust error
          handling for simplicity's sake.

          .. important::
          
             - For transactions on MongoDB 4.2 deployments (replica
               sets and sharded clusters)*, clients :red:`must` use
               MongoDB drivers updated for MongoDB 4.2.

             - When using the driver, each operation in the transaction
               must be associated with the session (i.e. pass in the
               session to each operation).

          .. code-block:: php

             /*  Prereq: Create collections. CRUD operations in transactions must be on existing collections. */
             $client->mydb1->createCollection('foo', ['writeConcern' => new \MongoDB\Driver\WriteConcern('majority')]);
             $client->mydb2->createCollection('bar', ['writeConcern' => new \MongoDB\Driver\WriteConcern('majority')]);
             
             /* Step 1: Start a client session. */

             $session = $client->startSession();
             
             /* Step 2: Start a transaction.  The transaction options are optional.*/
             $session->startTransaction([
                 'readConcern' => new \MongoDB\Driver\ReadConcern("local"),
                 'writeConcern' => new \MongoDB\Driver\WriteConcern(\MongoDB\Driver\WriteConcern::MAJORITY)
             ]);
         
             /* 
                Step 3: Specify the operations to perform inside the transaction. 
                Important:: You must pass the session to the operations. 
              */
      
             $client->mydb1->foo->insertOne(
                 ['abc' => 1],
                 ['session' => $session]
             );
             $client->mydb2->bar->insertOne(
                 ['xyz' => 999],
                 ['session' => $session]
             );

            /* Step 4: Commit the Transaction. */

             $session->commitTransaction()
   
     - id: mongoshell
       name: mongo Shell

       content: |

           .. note::

              The :binary:`~bin.mongo` shell example omits retry logic
              and robust error handling for simplicity's sake. For a
              more practical example of incorporating transactions in
              applications, see :ref:`transactions-retry` instead.

           .. code-block:: javascript
              :copyable: false

              // Prereq: Create collections. CRUD operations in transactions must be on existing collections.
              db.getSiblingDB("mydb1").foo.insert( {abc: 0}, { writeConcern: { w: "majority", wtimeout: 2000 } } );
              db.getSiblingDB("mydb2").bar.insert( {xyz: 0}, { writeConcern: { w: "majority", wtimeout: 2000 } } );
              
              // Start a session.
              session = db.getMongo().startSession( { readPreference: { mode: "primary" } } );

              coll1 = session.getDatabase("mydb1").foo;
              coll2 = session.getDatabase("mydb2").bar;

              // Start a transaction
              session.startTransaction( { readConcern: { level: "local" }, writeConcern: { w: "majority" } } );

              // Operations inside the transaction
              try {
                 coll1.insertOne( { abc: 1 } );
                 coll2.insertOne( { xyz: 999 } );
              } catch (error) {
                 // Abort transaction on error
                 session.abortTransaction();
                 throw error;
              }

              // Commit the transaction using write concern set at transaction start
              session.commitTransaction();

              session.endSession();



.. _transactions-atomicity:

Transactions and Atomicity
--------------------------

.. topic:: Distributed Transactions and Multi-Document Transactions

   Starting in MongoDB 4.2, the two terms are synonymous. Distributed
   transactions refer to multi-document transactions on sharded
   clusters and replica sets. Multi-document transactions (whether on
   sharded clusters or replica sets) are also known as distributed
   transactions starting in MongoDB 4.2.

For situations that require atomicity of reads and writes to multiple
documents (in a single or multiple collections), MongoDB supports
multi-document transactions:

- **In version 4.0**, MongoDB supports multi-document transactions on
  replica sets.

- **In version 4.2**, MongoDB introduces distributed transactions,
  which adds support for multi-document transactions on sharded
  clusters and incorporates the existing support for
  multi-document transactions on replica sets.

  To use transactions on MongoDB 4.2 deployments(replica sets and
  sharded clusters), clients :red:`must` use MongoDB drivers updated for
  MongoDB 4.2.

Multi-document transactions are atomic (i.e. provide an
"all-or-nothing" proposition):

- When a transaction commits, all data changes made in the transaction
  are saved and visible outside the transaction. That is, a transaction
  will not commit some of its changes while rolling back others.

  .. include:: /includes/extracts/transactions-committed-visibility.rst

- When a transaction aborts, all data changes made in the transaction
  are discarded without ever becoming visible. For example, if any
  operation in the transaction fails, the transaction aborts and all
  data changes made in the transaction are discarded without ever
  becoming visible.

.. include:: /includes/extracts/transactions-usage.rst

.. seealso:: :ref:`transactions-prod-consideration-outside-reads`

.. _transactions-operations:

Transactions and Operations
---------------------------

Distributed transactions can be used across multiple operations,
collections, databases, documents, and, starting in MongoDB 4.2, shards.

For transactions:

.. include:: /includes/extracts/transactions-operations-crud.rst

Operations that affect the database catalog, such as creating or
dropping a collection or an index, are not allowed in
transactions. For example, a transaction cannot include an insert
operation that would result in the creation of a new collection. See
:ref:`transactions-ops-restricted`.

.. include:: /includes/extracts/transactions-operations-catalog-tip.rst

.. seealso::

   - :doc:`Transactions and Operations Reference </core/transactions-operations>`

.. _transactions-ops-count:

Count Operation
~~~~~~~~~~~~~~~

.. container::

   .. include:: /includes/extracts/transactions-count.rst

.. _transactions-ops-distinct:

Distinct Operation
~~~~~~~~~~~~~~~~~~

.. container::

   .. include:: /includes/extracts/transactions-distinct.rst

.. _transactions-ops-info:

Informational Operations
~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-operations-restrictions-info.rst

.. _transactions-ops-restricted:

Restricted Operations
~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-operations-restrictions.rst

.. seealso::

   - :ref:`txn-prod-considerations-ddl`

   - :doc:`Transactions and Operations Reference </core/transactions-operations>`

Transactions and Sessions
-------------------------

- Transactions are associated with a session; i.e. you start a
  transaction for a session.

- At any given time, you can have at most one open transaction for a
  session.

- When using the drivers, each operation in the transaction must be
  associated with the session. Refer to your driver specific
  documentation for details.

- If a session ends and it has an open transaction, the transaction
  aborts.

.. _transaction-options:

Read Concern/Write Concern/Read Preference
------------------------------------------

.. _transactions-read-preference:

Transactions and Read Preference
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Operations in a transaction use the transaction-level :doc:`read
preference </reference/read-preference>`.

Using the drivers, you can set the transaction-level :doc:`read
preference </reference/read-preference>` at the transaction start:

- If the transaction-level read preference is unset, the transaction
  uses the session-level read preference.

- If transaction-level and the session-level read preference are unset,
  the transaction uses the client-level read preference. By default,
  the client-level read preference is :readmode:`primary`.

.. include:: /includes/extracts/transactions-read-pref.rst

.. _transactions-read-concern:

Transactions and Read Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Operations in a transaction use the transaction-level :doc:`read
concern </reference/read-concern>`. That is, any read concern set at
the collection and database level is ignored inside the transaction.

You can set the transaction-level :doc:`read concern
</reference/read-concern>` at the transaction start.

- If the transaction-level read concern is unset, the transaction-level
  read concern defaults to the session-level read concern.

- If transaction-level and the session-level read concern are unset,
  the transaction-level read concern defaults to the client-level read
  concern. By default, client-level read concern is
  :readconcern:`"local"` for reads against the primary. See also
  :ref:`transactions-read-preference`.

Transactions support the following read concern levels:

``"local"``
```````````

.. container::

   - Read concern :readconcern:`"local"` returns the most recent data
     available from the node but can be rolled back.

   - For transactions on sharded cluster, :readconcern:`"local"` read
     concern cannot guarantee that the data is from the same snapshot
     view across the shards. If snapshot isolation is required, use
     :ref:`transactions-read-concern-snapshot` read concern.

``"majority"``
``````````````

.. container::

   - Read concern :readconcern:`"majority"` returns data that has been
     acknowledged by a majority of the replica set members (i.e. data
     cannot be rolled back) **if** the transaction commits with
     :ref:`write concern "majority" <transactions-write-concern>`.

   - If the transaction does not use :ref:`write concern "majority"
     <transactions-write-concern>` for the commit, the
     :readconcern:`"majority"` read concern provides **no** guarantees that
     read operations read majority-committed data.

   - For transactions on sharded cluster, :readconcern:`"majority"` read
     concern cannot guarantee that the data is from the same snapshot
     view across the shards. If snapshot isolation is required, use
     :ref:`transactions-read-concern-snapshot` read concern.

.. _transactions-read-concern-snapshot:

``"snapshot"``
``````````````

.. container::

   - Read concern :readconcern:`"snapshot"` returns data from a
     snapshot of majority committed data **if** the transaction commits
     with :ref:`write concern "majority" <transactions-write-concern>`.

   - If the transaction does not use :ref:`write concern "majority"
     <transactions-write-concern>` for the commit, the
     :readconcern:`"snapshot"` read concern provides **no** guarantee that
     read operations used a snapshot of majority-committed data.

   - For transactions on sharded clusters, the
     :readconcern:`"snapshot"` view of the data **is** synchronized
     across shards.

.. _transactions-write-concern:

Transactions and Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Transactions use the transaction-level :doc:`write concern
</reference/write-concern>` to commit the write operations. Write
operations inside transactions must be issued without explicit write
concern specification and use the default write concern. At commit
time, the writes are then commited using the transaction-level write
concern.

.. tip::

   Do not explicitly set the write concern for the individual write
   operations inside a transaction. Setting write concerns for the
   individual write operations inside a transaction results in an error.

You can set the transaction-level :doc:`write concern
</reference/write-concern>` at the transaction start:

- If the transaction-level write concern is unset, the
  transaction-level write concern defaults to the session-level write
  concern for the commit.

- If the transaction-level write concern and the session-level write
  concern are unset, transaction-level write concern defaults to the
  client-level write concern. By default, client-level write concern
  is :writeconcern:`w: 1 <\<number\>>`.

Transactions support all write concern :ref:`w <wc-w>`
values, including:

``w: 1``
````````

.. container::

   - Write concern :writeconcern:`w: 1 <\<number\>>` returns
     acknowledgement after the commit has been applied to the primary.

     .. important::

        When you commit with :writeconcern:`w: 1 <\<number\>>`, your
        transaction can be :doc:`rolled back if there is a failover
        </core/replica-set-rollbacks>`.

   - When you commit with :writeconcern:`w: 1 <\<number\>>` write
     concern, transaction-level :readconcern:`"majority"` read concern
     provides **no** guarantees that read operations in the transaction
     read majority-committed data.

   - When you commit with :writeconcern:`w: 1 <\<number\>>` write
     concern, transaction-level :readconcern:`"snapshot"` read concern
     provides **no** guarantee that read operations in the transaction
     used a snapshot of majority-committed data.

``w: "majority"``
`````````````````

.. container::

   - Write concern :writeconcern:`w: "majority" <"majority">` returns
     acknowledgement after the commit has been applied to a majority
     (M) of voting members; i.e. the commit has been applied to the
     primary and (M-1) voting secondaries.

   - When you commit with :writeconcern:`w: "majority" <"majority">`
     write concern, transaction-level :readconcern:`"majority"` read
     concern guarantees that operations have read majority-committed
     data. For transactions on sharded clusters, this view of the
     majority-committed data is not synchronized across shards.

   - When you commit with :writeconcern:`w: "majority" <"majority">`
     write concern, transaction-level :readconcern:`"snapshot"` read
     concern guarantees that operations have from a synchronized
     snapshot of majority-committed data.


General Information
-------------------

Production Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~

For various production considerations with using transactions, see
:doc:`/core/transactions-production-consideration`. In addition, or sharded
clusters, see also :doc:`/core/transactions-sharded-clusters`.

Arbiters
~~~~~~~~

.. include:: /includes/extracts/transactions-arbiters.rst

.. |disabledrcmaj| replace:: :ref:`transactions-disabled-rc-majority`

.. _transactions-disabled-rc-majority:

Disabled Read Concern Majority
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A 3-member PSA (Primary-Secondary-Arbiter) replica set or a sharded
cluster with 3-member PSA shards may have disabled read concern
majority (:option:`--enableMajorityReadConcern false <mongod
--enableMajorityReadConcern>` or
:setting:`replication.enableMajorityReadConcern: false
<replication.enableMajorityReadConcern>`)

.. include:: /includes/extracts/transactions-read-concern-majority-sharded-clusters.rst

.. include:: /includes/extracts/transactions-read-concern-majority-replica-set.rst

.. tip::

   To check if read concern "majority" is disabled, You can run
   :method:`db.serverStatus()` on the :binary:`~bin.mongod` instances
   and check the :serverstatus:`storageEngine.supportsCommittedReads`
   field. If ``false``, read concern "majority" is disabled.
 
For more information, see :ref:`transactions-psa` and
:ref:`transactions-sharded-clusters-psa`.

.. _transactions-wcmajority-disabled:

Shard Configuration Restriction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-shards-wcmajority-disabled.rst

Diagnostics
~~~~~~~~~~~

MongoDB provides various transactions metrics:

- The :method:`db.serverStatus()` method/:dbcommand:`serverStatus`
  command returns :ref:`server-status-transactions` metrics.
  
- The :pipeline:`$currentOp` aggregation pipeline returns
  :data:`$currentOp.transaction` information for an operation if that
  operation is part of a transaction. You can also use
  :pipeline:`$currentOp` to find inactive sessions that are holding
  locks as part of a transaction.

For slow transactions (i.e. transactions that exceed the
:setting:`operationProfiling.slowOpThresholdMs` threshhold),
:binary:`~bin.mongod` and :binary:`~bin.mongos` log the transaction
information under the :data:`TXN` log component.

..  _transactions-fcv:

Feature Compatibility Version (FCV)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To use transactions, the :ref:`featureCompatibilityVersion <view-fcv>`
for all members of the deployment must be at least:

.. list-table::
   :header-rows: 1

   * - Deployment
     - Minimum ``featureCompatibilityVersion``

   * - Replica Set
     - ``4.0``

   * - Sharded Cluster
     - ``4.2``

To check the fCV for a member, connect to the member and run the
following command:

.. code-block:: javascript

   db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

For more information, see the
:dbcommand:`setFeatureCompatibilityVersion` reference page.

.. _transactions-storage-engines:

Storage Engines
~~~~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-inmemory-txn-page.rst

Additional Transactions Topics
------------------------------

.. toctree::
   :titlesonly:
   
   /core/transactions-in-applications
   /core/transactions-production-consideration
   /core/transactions-sharded-clusters
   /core/transactions-operations



