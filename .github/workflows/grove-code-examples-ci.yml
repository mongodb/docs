name: Grove Code Examples - CI

on:
  pull_request:
    paths:
      - "code-example-tests/csharp/driver/**"
      - "code-example-tests/go/driver/**"
      - "code-example-tests/java/driver-sync/**"
      - "code-example-tests/javascript/driver/**"
      - "code-example-tests/python/pymongo/**"
      - "code-example-tests/command-line/mongosh/**"

concurrency:
  group: grove-ci-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

# Security: Restrict permissions to minimum required
permissions:
  contents: read
  pull-requests: read

# Security: Set environment variables for the entire workflow
env:
  # Prevent command injection in shell commands
  SHELL_OPTIONS: "set -euo pipefail"
  # Secure temporary directory
  SECURE_TMP_DIR: "/tmp/secure-${{ github.run_id }}"

jobs:
  # Determine which drivers need testing based on changed files
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          # Security: Minimal checkout depth for performance
          fetch-depth: 1
          # Security: Don't persist credentials
          persist-credentials: false

      - name: Detect changed files
        id: changed-files
        uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44
        with:
          files: code-example-tests/**
          separator: "\n"

      - name: Validate Grove config
        run: |
          set -euo pipefail
          CONFIG=.github/workflows/config/grove-driver-config.json

          # Security: Validate config file exists
          if [[ ! -f "$CONFIG" ]]; then
            echo "ERROR: grove-driver-config.json not found at $CONFIG" >&2
            exit 1
          fi

          # Security: Validate JSON syntax
          if ! jq empty "$CONFIG" 2>/dev/null; then
            echo "ERROR: Invalid JSON in grove-driver-config.json" >&2
            exit 1
          fi

          # Validate required structure
          if ! jq -e '.drivers' "$CONFIG" >/dev/null 2>&1; then
            echo "ERROR: Missing 'drivers' key in grove-driver-config.json" >&2
            exit 1
          fi

      - name: Build matrix from grove-driver-config.json
        id: build-matrix
        run: |
          set -euo pipefail
          CONFIG=.github/workflows/config/grove-driver-config.json
          if [[ ! -f "$CONFIG" ]]; then echo "{}"; echo "matrix=[]" >> $GITHUB_OUTPUT; exit 0; fi

          # Build candidate matrix from config JSON
          # Config structure: drivers.{lang}.setup.action = "actions/setup-dotnet@v4"
          # Extract just the tool name (e.g., "dotnet" from "actions/setup-dotnet@v4")
          raw_matrix=$(jq -c '.drivers | to_entries | map({
            language: .key,
            path: .value.path,
            watch_paths: (.value.watch_paths // [ .value.path ]),
            setup: (.value.setup.action | capture("setup-(?<s>[^@]+)").s),
            version: (.value.setup.version // ""),
            distribution: (.value.setup.distribution // ""),
            version_file: (.value.setup.version_file // ""),
            cache: (.value.setup.cache // false),
            cache_dependency_path: (.value.setup.cache_dependency_path // ""),
            format_cmd: .value.commands.format_check,
            test_cmd: .value.commands.test,
            deps_cmd: .value.commands.install_deps
          })' "$CONFIG")

          # Get changed files from tj-actions/changed-files output
          changed_files="${{ steps.changed-files.outputs.all_changed_files }}"

          # Check if there are any changes
          if [[ -z "$changed_files" ]]; then
            echo "No relevant changes; empty matrix"; echo "matrix=[]" >> $GITHUB_OUTPUT; exit 0
          fi

          # Convert changed files to JSON array
          changed_json=$(echo "$changed_files" | jq -R -s 'split("\n") | map(select(length>0))')

          # Filter raw matrix by any watch_path prefix match
          filtered=$(jq -c --argjson changed "$changed_json" '[ .[] | select(.watch_paths | any(. as $w | $changed | any(startswith($w | gsub("/\\*\\*$"; ""))))) ]' <(echo "$raw_matrix"))

          echo "Computed matrix: $filtered" >&2
          echo "matrix=$filtered" >> $GITHUB_OUTPUT

  # Setup MongoDB once and cache for all jobs
  setup-mongodb:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '[]'
    timeout-minutes: 15
    # Security: Restrict permissions for this job
    permissions:
      contents: read
    outputs:
      connection-string: ${{ steps.mongodb.outputs.connection_string }}
      cache-hit: ${{ steps.mongodb.outputs.cache_hit }}
      mongodb-ready: ${{ steps.mongodb.outputs.connection_string != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 1
          persist-credentials: false

      - name: Setup MongoDB with sample data
        id: mongodb
        uses: ./.github/actions/grove-setup-mongodb
        with:
          port: '27017'
          deployment_name: 'myLocalRs1'
          load_sample_data: 'true'
          cache_key_suffix: '-${{ github.run_id }}'

  # Combined formatting and testing job
  format-and-test:
    runs-on: ubuntu-latest
    needs: [detect-changes, setup-mongodb]
    if: needs.detect-changes.outputs.matrix != '[]' && needs.setup-mongodb.outputs.mongodb-ready == 'true'
    timeout-minutes: 30
    # Security: Restrict permissions for this job
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 1
          persist-credentials: false

      - name: Reuse MongoDB connection string
        id: mongodb
        run: |
          set -euo pipefail
          echo "connection_string=${{ needs.setup-mongodb.outputs.connection-string }}" >> $GITHUB_OUTPUT

      # Language-specific setup with pinned versions
      - name: Setup .NET
        if: matrix.setup == 'dotnet'
        uses: actions/setup-dotnet@6bd8b7f7774af54e05809fcc5431931b3eb1ddee # v4.0.1
        with:
          dotnet-version: ${{ matrix.version }}
          cache: ${{ matrix.cache }}
          cache-dependency-path: ${{ matrix.cache && matrix.cache_dependency_path && format('{0}/{1}', matrix.path, matrix.cache_dependency_path) || '' }}

      - name: Setup Go
        if: matrix.setup == 'go'
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: '${{ matrix.path }}/${{ matrix.version_file }}'
          cache: ${{ matrix.cache }}

      - name: Setup Java
        if: matrix.setup == 'java'
        uses: actions/setup-java@b36c23c0d998641eff861008f374ee103c25ac73 # v4.4.0
        with:
          distribution: ${{ matrix.distribution }}
          java-version: ${{ matrix.version }}
          cache: ${{ matrix.cache }}

      - name: Setup Node.js
        if: matrix.setup == 'node'
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ matrix.version }}
          cache: 'npm'
          cache-dependency-path: '${{ matrix.path }}/package-lock.json'

      - name: Setup Python
        if: matrix.setup == 'python'
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
        with:
          python-version: ${{ matrix.version }}
          cache: 'pip'
          cache-dependency-path: '${{ matrix.path }}/requirements.txt'

      # Install dependencies
      - name: Install dependencies
        run: |
          set -euo pipefail

          # Security: Validate path to prevent directory traversal
          if [[ "${{ matrix.path }}" != code-example-tests/* ]]; then
            echo "ERROR: Invalid path: ${{ matrix.path }}" >&2
            exit 1
          fi

          # Security: Ensure path exists and is a directory
          if [[ ! -d "${{ matrix.path }}" ]]; then
            echo "ERROR: Path does not exist or is not a directory: ${{ matrix.path }}" >&2
            exit 1
          fi

          cd "${{ matrix.path }}"
          ${{ matrix.deps_cmd }}

      # Check formatting
      - name: Check formatting
        run: |
          set -euo pipefail
          cd "${{ matrix.path }}"
          ${{ matrix.format_cmd }}

      # Create environment file
      - name: Create environment file
        run: |
          set -euo pipefail
          cd "${{ matrix.path }}"

          # Security: Create .env file with restricted permissions
          touch .env
          chmod 600 .env

          # Security: Validate connection string format
          connection_string="${{ steps.mongodb.outputs.connection_string }}"
          if [[ ! "$connection_string" =~ ^mongodb://localhost:[0-9]+/\?directConnection=true$ ]]; then
            echo "ERROR: Invalid connection string format" >&2
            exit 1
          fi

          echo "CONNECTION_STRING=\"$connection_string\"" >> .env
          if [ "${{ matrix.language }}" == "javascript" ]; then
            echo "TZ=UTC" >> .env
          fi
          if [ "${{ matrix.language }}" == "csharp" ]; then
            echo "SOLUTION_ROOT=$(pwd)" >> .env
          fi

      # Set TZ for Node tests
      - name: Set TZ for Node tests
        if: matrix.language == 'javascript'
        run: echo "TZ=UTC" >> $GITHUB_ENV

      # Run tests
      - name: Run tests
        run: |
          set -euo pipefail
          cd "${{ matrix.path }}"
          ${{ matrix.test_cmd }}
        continue-on-error: false

      - name: Archive test logs (best-effort)
        if: always()
        run: |
          set -euo pipefail
          mkdir -p /tmp/grove-logs/${{ matrix.language }}

          # Copy Maven Surefire reports (Java)
          if [ -d "${{ matrix.path }}/target/surefire-reports" ]; then
            cp -r "${{ matrix.path }}/target/surefire-reports" /tmp/grove-logs/${{ matrix.language }}/surefire-reports/
          fi

          # Generic logs and XML reports
          find "${{ matrix.path }}" -maxdepth 4 -type f \( -name '*.log' -o -name 'TEST-*.xml' \) -print0 2>/dev/null | while IFS= read -r -d '' f; do
            dest=/tmp/grove-logs/${{ matrix.language }}/$(echo "$f" | tr '/' '_')
            cp "$f" "$dest" || true
          done
        shell: bash
      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: grove-logs-${{ matrix.language }}
          path: /tmp/grove-logs/${{ matrix.language }}
          if-no-files-found: ignore

  # Summary job for PR status checks
  ci-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, setup-mongodb, format-and-test]
    if: always()
    steps:
      - name: Check results
        run: |
          # Add step summary for PR visibility
          echo "### Grove CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-changes.outputs.matrix }}" == "[]" ]; then
            echo "PASS: No driver changes detected" | tee -a $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Show matrix
          echo "**Tested Drivers:**" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ needs.detect-changes.outputs.matrix }}' | jq '.' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Show results
          echo "**Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- MongoDB Setup: \`${{ needs.setup-mongodb.result }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Driver Tests: \`${{ needs.format-and-test.result }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.setup-mongodb.result }}" != "success" ]; then
            echo "FAIL: MongoDB setup failed" | tee -a $GITHUB_STEP_SUMMARY
            exit 1
          fi

          if [ "${{ needs.format-and-test.result }}" != "success" ]; then
            echo "FAIL: Driver tests failed" | tee -a $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "PASS: All tests passed" | tee -a $GITHUB_STEP_SUMMARY
