.. meta::
   :robots: noindex, nosnippet

.. _java-sync-changes-between-devices:
.. _java-realm-sync:

====================================
Sync Data Between Devices - Java SDK
====================================

.. toctree::
   :titlesonly:

   Configure & Open a Synced Realm </sdk/java/sync/configure-and-open-a-synced-realm>
   Manage Flexible Sync Subscriptions </sdk/java/sync/flexible-sync>
   Handle Sync Errors </sdk/java/sync/handle-sync-errors>
   Client Reset </sdk/java/sync/reset-a-client-realm>
   Manual Client Reset Data Recovery </sdk/java/sync/manual-client-reset-data-recovery>
   Pause or Resume a Sync Session </sdk/java/sync/pause-resume-sync>
   Check Upload & Download Progress </sdk/java/sync/sync-progress>
   Check the Network Connection </sdk/java/sync/network-connection>
   Background Sync </sdk/java/sync/background-sync>
   Partition-Based Sync </sdk/java/sync/partition-based-sync>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Atlas Device Sync automatically synchronizes data between client applications and 
an :ref:`Atlas App Services backend <realm-cloud>`. When a client 
device is online, Sync asynchronously synchronizes data in a 
background thread between the device and your backend App. 

.. seealso::

   :ref:`enable-realm-sync`

.. _java-flexible-sync-fundamentals:

Flexible Sync
-------------

When you select :ref:`Flexible Sync <flexible-sync>` for your backend App 
configuration, your client implementation must include subscriptions to 
queries on :ref:`queryable fields <queryable-fields>`. Flexible Sync works 
by synchronizing data that matches query subscriptions you maintain in the 
client application. 

A subscription set contains a set of queries. Realm Flexible Sync returns 
documents matching those queries, where the user has the appropriate 
:ref:`permissions <flexible-sync-rules-and-permissions>` to read and/or 
read and write the documents. If documents match the query, but the client 
does not have the permission to read or write them, they do not sync to 
the client application.

You can form queries using :ref:`Realm Query Language <realm-query-language>`.

.. include:: /includes/note-unsupported-flex-sync-rql-operators.rst

Subscription sets are based on a specific type of :ref:`Realm object <java-object-schema>`. 
You might have multiple subscriptions if you have many types of Realm objects.

To use Flexible Sync in your client application, open a synced realm 
with a flexible sync configuration. Then, manage subscriptions
to determine which documents to sync.

.. _java-sync-data:

Sync Data
---------

The syntax to :ref:`read <java-realm-database-reads>`, :ref:`write
<java-realm-database-writes>`, and
:ref:`watch for changes <java-client-notifications>` on a
synced realm is identical to the syntax for non-synced realms. While you work with
local data, a background thread efficiently integrates, uploads, and downloads changesets.

.. important:: When Using Sync, Avoid Writes on the Main Thread

   The fact that Realm performs sync integrations on a background thread means
   that if you write to your realm on the main thread, there's a small chance your UI
   could appear to hang as it waits for the background sync thread to finish a write
   transaction. Therefore, it's a best practice :ref:`never to write on the main thread
   when using Sync <java-threading-three-rules>`.

Group Updates for Improved Performance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/sync-memory-performance.rst
