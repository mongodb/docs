.. _arch-center-is-image-search:

===============================================
AI-Enhanced Claim Adjustment for Auto Insurance 
===============================================

.. facet::
   :name: genre
   :values: tutorial

.. meta:: 
   :keywords: Gen AI, insurance, Atlas
   :description: Learn how to use Atlas Vector Search to create an image search solution featuring our demo as an example.
   
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

**Use cases:** `Gen AI <https://www.mongodb.com/use-cases/artificial-intelligence>`__

**Industries:** `Insurance <https://www.mongodb.com/industries/insurance>`__

**Products:** `MongoDB Atlas <http://mongodb.com/atlas>`__, 
`MongoDB Atlas Vector Search <https://www.mongodb.com/products/platform/atlas-vector-search>`__

**Partners:** `PyTorch <https://pytorch.org/>`__

Solution Overview
-----------------

The insurance industry has the daunting challenge of processing claims
efficiently and accurately. Traditional methods are fraught with
inefficiencies, primarily due to: 

- **Time-intensive manual processes:** Adjusters typically spend extensive time manually comparing new accident photos with historical claims, a process that is both slow and error prone. In this example, a car has just crashed into another vehicle. The driver gets out and starts taking pictures of the damage, uploading them to their auto insurance app, making the photos available to a claim adjuster. Typically, the adjuster would comb through past claims and parse guidelines to work up an estimate of the damage and process the claim. 

- **Fragmented data systems:** Vital information is often dispersed across multiple, disconnected systems, making data retrieval and analysis a cumbersome and error-prone task. 

- **Volume of unstructured data:** The sheer amount of unstructured data, such as images and documents, poses a significant challenge in terms of storage, retrieval, and analysis, often leading to delays and inaccuracies in claim processing. 

- **Inconsistency and inaccuracy:** The manual nature of traditional claim processing can result in inconsistent assessments and potential inaccuracies in estimating claims, impacting customer satisfaction and financial outcomes.

The solution addresses these challenges by implementing an AI-driven vector search system within a centralized vector database. This approach offers several benefits: 

- **Reduces time and effort:** Automates the comparison of accident images, significantly cutting down the time required for adjusters to make informed decisions. 

- **Integrates data seamlessly:** Using MongoDB Atlas unifies data across systems, enhancing accessibility and analysis.

- **Harnesses unstructured data:** The AI-driven system efficiently processes and analyzes unstructured data, leading to more accurate and consistent claim assessments.

A structured process can centrally organize and integrate your
data, building an `ODL
<https://www.mongodb.com/basics/implementing-an-operational-data-layer>`__
enables strategic initiatives such as legacy modernization and data as a
service. Building this data architecture on MongoDB Atlas provides the
foundation for modern apps, giving users access to new platform features
such as `MongoDB Atlas Vector Search
<https://www.mongodb.com/products/platform/atlas-vector-search>`__,
which they can use to unlock unstructured data and work with `AI
<https://www.mongodb.com/basics/what-is-artificial-intelligence>`__ and
`LLMs <https://www.mongodb.com/basics/large-language-models>`__.

The adjuster can simply ask an AI to “show me images similar to this
crash” and a Vector Search-powered system can return photos of car
accidents with similar damage profiles from the claims history database.
The adjuster is now able to quickly compare the car accident photos with
the most relevant ones in the insurer's claim history.

Broader Applications
~~~~~~~~~~~~~~~~~~~~

While tailored for the insurance industry, this solution's principles
are more broadly applicable. Sectors dealing with large volumes of
`unstructured data <https://www.mongodb.com/unstructured-data>`__ — from
healthcare to legal services — can benefit from this approach, leading
to enhanced operational efficiencies and improved decision-making
processes.

.. video:: https://www.youtube.com/watch?v=N4Fp1_HYr1Q

This video showcases how MongoDB turbocharges the process of building
semantic search and AI-powered applications.

Reference Architectures
-----------------------

MongoDB Atlas combines transactional and search capabilities in the same
platform, as shown in Figure 1, providing a unified development experience. 
In this framework, you can store embeddings alongside existing data into a 
collection, as shown in Figure 2. Then, as shown in Figure 3, you can run a 
vector search query that returns the document with the vector embeddings and
the associated metadata, eliminating the need to retrieve the data
elsewhere.

.. figure:: /includes/images/industry-solutions/insurance-image-search-arch1.svg
   :alt: AI-enhanced claim adjustment

   Figure 1. Reference architecture with MongoDB

.. figure:: /includes/images/industry-solutions/insurance-image-search-store.svg
   :alt: Store

   Figure 2. A dataset of photos of past accidents is vectorized and stored in Atlas

.. figure:: /includes/images/industry-solutions/insurance-image-search-query.svg
   :alt: Query

   Figure 3. An image similarity query is performed, and the 5 top similar images are returned

Data Model Approach
-------------------

The data model for the vectorized images collection contains documents including
car crash photos or references to them as AWS S3 links, and metadata about photos
such as notes describing the accident and the loss amount.

Once the photos are vectorized, their embedding is added to the document
as an array alongside existing fields:

.. code-block:: json

   {
      _id: ObjectId('64d39175e65'),
      notes: "The crash happened...",
      loss amount: 1250,
      filename: "image_65.jpg",
      url: "https://my-bucket...",
      embedding: [0.3, 0.6, ..., 11.2]
   }

Build the Solution
------------------

Visit the `GitHub repo: Insurance-image-search <https://github.com/mongodb-industry-solutions/Insurance-image-search?tab=readme-ov-file>`__
and create this demo for yourself.  Follow the steps below to build your image 
search pipeline:

.. procedure::
   :style: normal
   
   .. step:: Configure the Atlas Vector Search index

      Create the Vector Search index in Atlas following the instructions of
      `this tutorial (Step 4)
      <https://www.mongodb.com/developer/products/atlas/building-generative-ai-applications-vector-search-open-source-models/?hideMenu=1>`__.
      Use the index configuration of the image below:

      .. figure:: /includes/images/industry-solutions/insurance-image-search-IndexConfig.svg
         :figwidth: 1200px
         :alt: Index configuration
      
         Figure 4. Atlas Vector Search index configuration in the Atlas UI

   .. step:: Set up the application

      Open the python notebook in the GitHub repo and follow the instructions, the code guides you through the following steps:
      
      - Definition of the image embedding class
      
      - Dataset download
      
      - Definition of data visualization functions
      
      - Connection to MongoDB
      
      - Vectorization of the dataset
      
      - Querying the dataset with a photo picked by the user

Key Learnings
-------------

- **Generate Text Embeddings:** You can create embeddings using different models
  and deployment options. It is important to consider privacy and data protection
  requirements. You can deploy a model locally if your data needs to remain on the 
  servers. Otherwise you can call an API and get your vector embeddings back, as
  explained in `this <https://www.mongodb.com/docs/atlas/atlas-vector-search/create-embeddings/>`__ 
  tutorial. You can use `Voyage AI <https://www.mongodb.com/company/blog/news/redefining-database-ai-why-mongodb-acquired-voyage-ai>`__
  or open-source models.

- **Create Vector Search Indexes:** You can build Vector Search Indexes in MongoDB
  Atlas. Alternatively, you can also build indexes for `local deployments
  <https://www.mongodb.com/docs/atlas/cli/stable/atlas-cli-deploy-local/#std-label-atlas-cli-deploy-local-avs>`__. 

- **Perform a Vector Search Query:** You can run `Vector Search queries
  <https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-stage/>`__
  with MongoDB’s `aggregation pipeline
  <https://www.mongodb.com/docs/manual/aggregation/>`__, allowing you to concatenate
  multiple operations in your workflow. This approach eliminates the need to learn 
  another programming language or change context.

Authors
-------

- Luca Napoli, MongoDB

- Jeff Needham, MongoDB

- Karthic Subramanian, MongoDB

Learn More
----------

- :ref:`arch-center-is-claim-management`