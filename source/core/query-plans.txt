.. index:: query optimizer
.. _read-operations-query-optimization:
.. _query-plans-query-optimization:

===========
Query Plans
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. TODO Consider moving this to the mechanics of the index section

For a query, the MongoDB query optimizer chooses and caches the most
efficient query plan given the available indexes. The evaluation of the
most efficient query plan is based on the number of "work units"
(``works``) performed by the query execution plan when the query planner
evaluates candidate plans.

The associated plan cache entry is used for subsequent queries with the
same query shape.

.. _cache-entry-state:

Plan Cache Entry State
~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 4.2, the cache entry is associated with a state:

.. list-table::
   :header-rows: 1
   :widths: 15 85

   * - State
     - Description
   
   * - :ref:`Missing <cache-entry-missing>`
   
     - .. _cache-entry-missing:

       No entry for this shape exists in the cache.
       
       For a query, if the cache entry state for a shape is
       :ref:`Missing <cache-entry-missing>`:

       #. Candidate plans are evaluated and a winning plan is selected.

       #. The selected plan is added to the cache in :ref:`Inactive
          <cache-entry-inactive>` state with its ``works`` value.
       
   * - :ref:`Inactive <cache-entry-inactive>`

     - .. _cache-entry-inactive:

       The entry in the cache is a placeholder entry for this shape.
       That is, the planner has seen the shape and calculated its cost
       (``works`` value) and stored as a placeholder entry but the query
       shape is **not** used to generate query plans.
    
       For a query, if the cache entry state for a shape is
       :ref:`Inactive <cache-entry-inactive>`:

       #. Candidate plans are evaluated and a winning plan is selected.
  
       #. The selected plan's ``works`` value is compared
          to the :ref:`Inactive <cache-entry-inactive>` entry's. If the
          selected plan's ``works`` value is:
     
          - Less than or equal to the :ref:`Inactive <cache-entry-inactive>` entry's,
               The selected plan replaces the placeholder
               :ref:`Inactive <cache-entry-inactive>` entry and has an
               :ref:`Active <cache-entry-active>` state.
       
               If before the replacement happens, the :ref:`Inactive
               <cache-entry-inactive>` entry becomes :ref:`Active
               <cache-entry-active>` (for example, due to another query
               operation), the newly active entry will only be replaced
               if its ``works`` value is greater than the selected plan.

          - Greater than the :ref:`Inactive <cache-entry-inactive>` entry's,
              The :ref:`Inactive <cache-entry-inactive>` entry remains
              but its ``works`` value is incremented.

   * - :ref:`Active <cache-entry-active>`

     - .. _cache-entry-active:

       The entry in the cache is for the winning plan. The planner can
       use this entry to generate query plans.

       For a query, if the cache entry state for a shape is
       :ref:`Active <cache-entry-active>`:

       The active entry is used to generate query plans.

       The planner also evaluates the entry's performance and if its
       ``works`` value no longer meets the selection criterion, it will
       transition to :ref:`Inactive <cache-entry-inactive>` state.

See :ref:`query-plans-plan-cache-flushes` for additional scenarios that trigger
changes to the plan cache.


Query Plan and Cache Information
--------------------------------

To view the query plan information for a given query, you can use
:method:`db.collection.explain()` or the :method:`cursor.explain()` .

Starting in MongoDB 4.2, you can use the :pipeline:`$planCacheStats`
aggregation stage to view plan cache information for a collection.

.. _query-plans-query-revision:

.. _query-plans-plan-cache-flushes:

Plan Cache Flushes
------------------

The query plan cache does not persist if a :binary:`~bin.mongod`
restarts or shuts down. In addition:

- Catalog operations like index or collection drops clear the plan
  cache.

- Least recently used (LRU) cache replacement mechanism clears the
  least recently accessed cache entry, regardless of state.

Users can also:

- Manually clear the entire plan cache using the
  :method:`PlanCache.clear()` method.

- Manually clear specific plan cache entries using the
  :method:`PlanCache.clearPlansByQuery()` method.

.. seealso:: :ref:`query-hash-plan-cache-key`

.. _query-hash-plan-cache-key:

``queryHash`` and ``planCacheKey``
----------------------------------

.. _query-hash:


``queryHash``
~~~~~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-query-shapes.rst

.. _plan-cache-key:

``planCacheKey``
~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-plan-cache-key.rst

For example, consider a collection ``foo`` with the following indexes:
 
.. code-block:: javascript

   db.foo.createIndex( { x: 1 } )
   db.foo.createIndex( { x: 1, y: 1 } )
   db.foo.createIndex( { x: 1, z: 1 }, { partialFilterExpression: { x: { $gt: 10 } } } )

The following queries on the collection have the same shape:

.. code-block:: javascript

   db.foo.explain().find( { x: { $gt: 5 } } )  // Query Operation 1
   db.foo.explain().find( { x: { $gt: 20 } } ) // Query Operation 2

Given these queries, the index with the :ref:`partial filter expression
<partial-index-query-coverage>` can support query operation 2 but *not*
support query operation 1. Since the indexes available to support query operation 1
differs from query operation 2, the two queries have different
``planCacheKey``.

If one of the indexes were dropped, or if a new index ``{ x: 1, a: 1
}`` were added, the ``planCacheKey`` for both query operations will
change.

Availability
~~~~~~~~~~~~

The ``queryHash`` and ``planCacheKey`` are available in:

- :doc:`explain() output </reference/explain-results>` fields:
  :data:`queryPlanner.queryHash <explain.queryPlanner.queryHash>` and
  :data:`queryPlanner.planCacheKey <explain.queryPlanner.planCacheKey>`

- :doc:`profiler log messages </tutorial/manage-the-database-profiler>`
  and :doc:`diagnostic log messages (i.e. mongod/mongos log
  messages)</reference/log-messages>` when logging slow queries.

- :pipeline:`$planCacheStats` aggregation stage (*New in MongoDB 4.2*)

- ``PlanCache.listQueryShapes()``
  method/``planCacheListQueryShapes`` command

- ``PlanCache.getPlansByQuery()``
  method/``planCacheListPlans`` command

.. _index-filters:

Index Filters
-------------

Index filters determine which indexes the optimizer evaluates for a
:term:`query shape`. A query shape consists of a combination of query,
sort, and projection specifications. If an index filter exists for a
given query shape, the optimizer only considers those indexes
specified in the filter.

When an index filter exists for the query shape, MongoDB ignores the
:method:`~cursor.hint()`. To see whether MongoDB applied an index
filter for a query shape, check the :data:`~explain.queryPlanner.indexFilterSet`
field of either the :method:`db.collection.explain()` or the
:method:`cursor.explain()` method.

Index filters only affects which indexes the optimizer evaluates; the
optimizer may still select the collection scan as the winning plan for
a given query shape.

Index filters exist for the duration of the server process and do not
persist after shutdown. MongoDB also provides a command to manually remove
filters.

Because index filters override the expected behavior of the optimizer
as well as the :method:`~cursor.hint()` method, use index filters
sparingly.

See :dbcommand:`planCacheListFilters`,
:dbcommand:`planCacheClearFilters`, and :dbcommand:`planCacheSetFilter`.

.. seealso::

   :doc:`/applications/indexes`