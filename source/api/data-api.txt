
====================================
Read and Write with the {+data-api+}
====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::

   {+data-api+} Resources </api/data-api-resources>
   {+data-api+} Examples </api/data-api-examples>
   {+data-api+} Data Formats </api/data-api-data-formats>

Overview
--------

The |service-fullname| {+data-api+} is a managed service that lets you
securely work with data stored in |service| using standard HTTPS requests.
The {+data-api+} is not a direct connection to your database. Instead, the
API is a fully-managed middleware service that sits between your cluster
and the clients that send requests.

You can use the {+data-api+} to connect to |service-fullname| from any platform
that supports HTTPS, including:

- Web browsers
- Web servers
- CI/CD pipelines
- Serverless & Edge compute environments
- Mobile applications
- Internet-Of-Things devices

You don't need to install any database drivers or opinionated libraries
to work with the {+data-api+}. Instead, you send standard HTTPS requests
like the following:

.. io-code-block::

   .. input::
      :language: bash

      curl --request POST \
        'https://data.mongodb-api.com/app/data-abcde/endpoint/data/v1/action/insertOne' \
        --header 'apiKey: TpqAKQgvhZE4r6AOzpVydJ9a3tB1BLMrgDzLlBLbihKNDzSJWTAHMVbsMoIOpnM6' \
        --header 'Content-Type: application/json' \
        --data-raw '{
            "dataSource": "Cluster0",
            "database": "learn-data-api",
            "collection": "hello",
            "document": {
              "text": "Hello from the {+data-api+}!",
            }
        }'

   .. output::
      :language: json
      :visible: true

      {"insertedId":"5f1a785e1536b6e6992fd588"}

How the {+data-api+} Works
~~~~~~~~~~~~~~~~~~~~~~

{+data-api+} requests may resemble traditional database operations, like
``find`` or ``insertOne``, but the {+data-api+} is not a direct connection
to your database. Instead, the {+data-api+} adds additional authentication,
authorization, and correctness checks to ensure that your data is only
accessed or modified in the ways you allow. This allows you to safely
access data in |service| from potentially vulnerable clients like web apps.

For each incoming request, the {+data-api+}:

1. **Authenticates the calling user.** This might involve validating an
   access token, logging in with header credentials, or directly
   assigning a specific runtime user based on your configuration.

2. **Authorizes the request.** This ensures that the user sent a
   well-formed request and has permission to perform the requested
   operation based on your endpoint authorization scheme.

3. **Runs the requested operation.** This might involve reading or
   writing data in |service| with a generated endpoint or invoke a custom
   function that you wrote.

   For requests that read or write data in |service|, the {+data-api+} also
   enforces the access control rules and document schemas defined in
   your App. This means that users can only access data they're allowed
   to read and write. Requests fail if they include an invalid write
   operation.

4. **Returns an HTTPS response to the caller.** The response includes
   the result of a generated endpoint operation or any data that you
   return from a custom endpoint. In the request, you can choose to receive the
   response in either :ref:`JSON or EJSON format
   <atlas-data-api-data-formats>`.

When to Use the {+data-api+}
~~~~~~~~~~~~~~~~~~~~~~~~

For server applications, and especially for high-load and latency
sensitive use-cases, we recommend connecting directly to |service| with a
MongoDB driver. Operations called through a {+data-api+} endpoint take
longer to complete than the corresponding MongoDB operations called
through a driver. Additionally, the drivers provide more flexibility and
control over how your operations are executed. To learn more, visit the
:driver:`MongoDB Drivers </>` documentation.

We recommend using the {+data-api+} when:

- You want to run MongoDB operations from a web application or other
  client that you can't trust.

- You can't or don't want to manage a MongoDB driver in your server-side
  environment. For example, the language you are using for your server
  does not have a driver.

- Your server-side code runs in an edge compute environment that does
  not support database drivers or connection pooling.

- You want to develop a new feature and prefer a flexible solution for
  working on the client side first before later creating and refining
  the API layer.

- You want to integrate |service| data access into a federated API gateway.

- You want to connect to |service| from an client not currently
  supported by a Realm SDK.

{+atlas-app-services+}
~~~~~~~~~~~~~~~~~~

The {+data-api+} is powered by {+atlas-app-services+}.

You can :ref:`quickly set up and access <data-api-get-started>` the
{+data-api+} through |service|, which creates an {+app-services+} App
for you that's linked to the |service| UI. The default configuration and
|service| UI support API key authentication with several basic
permissions models.

You can define more complex API access permissions and customize your
API with your own endpoints by modifying the underlying App that was
created for you or enabling the API in your own App.

To learn more about App Services, how the {+data-api+} works, and how
you can customize it, see :ref:`{+data-api+} <data-api>`
in the App Services documentation.

.. _data-api-get-started:

Get Started
-----------

Follow the steps below to set up the {+data-api+} and send your first requests.

.. _enable-data-api:

1. Enable the {+data-api+}
~~~~~~~~~~~~~~~~~~~~~~~~~~

The {+data-api+} is disabled by default. To use the API, you need to
turn it on in the {+atlas-ui+} for one or more clusters.

Click :guilabel:`{+data-api+}` in the left navigation menu. On the
following screen, select one or more clusters that you want to enable
the API on from the dropdown menu and then click :guilabel:`Enable the
{+data-api+}`.

.. note::

   You can enable or disable the {+data-api+} for a cluster at any time
   from the :guilabel:`{+data-api+}` screen.

.. _create-data-api-key:

2. Create a {+data-api+} Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The {+data-api+} uses project-level API keys to manage access and
prevent unauthorized requests. Every request must include a valid
{+data-api+} key.

A {+data-api+} key grants full read and write access every collection in
a cluster and can access any enabled cluster in the project.

.. important::

   {+data-api+} keys are not the same as the :ref:`programmatic API keys
   <atlas-prog-api-key>` used to access the |service| and {+app-services+}
   Administration APIs.

Click :guilabel:`Create API Key`, enter a unique name for the new key,
and then click :guilabel:`Create API Key`.

You can now see and copy your new API key for the first and only time.
Once you close the modal, |service| will never expose the value again.

Copy the new API key and store it somewhere safe where you can reference
it later. {+data-api+} keys are sensitive, so make sure not to hardcode
them directly into user-facing apps or commit them to version control.

.. tip::

   You can delete a {+data-api+} key at any time. Any request that
   includes a deleted key will fail. You might delete a key to prevent
   an existing client from continuing to use the API or if you
   accidentally expose the key and need to replace it.

.. _send-data-api-request:

3. Send a {+data-api+} Request
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You include your {+data-api+} key when you call action endpoints that
read and write documents in MongoDB. For a list of all available actions
& endpoints, see :ref:`data-api-resources`.

You can run the following commands in a shell to make sure everything
works and then start exploring:

.. tip::

   Make sure to replace placeholder values before you run each request:

   - ``<{+data-api+} App ID>``: Your {+data-api+} App ID, which you can
     find in the :guilabel:`URL Endpoint` section of the UI.

   - ``<{+data-api+} key>``: The {+data-api+} key you just created.

   - ``<cluster name>``: The name of a cluster with the {+data-api+}
     enabled.

A. Insert a test document:

   .. code-block:: bash

      curl --request POST \
        'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/insertOne' \
        --header 'Content-Type: application/json' \
        --header 'apiKey: <{+data-api+} Key>' \
        --data-raw '{
            "dataSource": "<cluster name>",
            "database": "learn-data-api",
            "collection": "people",
            "document": {
              "name": "John Sample",
              "age": 42
            }
        }'

B. Then, find the test document that you just inserted:

   .. code-block:: bash

      curl --request POST \
        'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/findOne' \
        --header 'Content-Type: application/json' \
        --header 'apiKey: <{+data-api+} Key>' \
        --data-raw '{
            "dataSource": "<cluster name>",
            "database": "learn-data-api",
            "collection": "people",
            "filter": { "name": "John Sample" }
        }'

C. Finally, delete the test document:

   .. code-block:: bash

      curl --request POST \
        'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/deleteOne' \
        --header 'Content-Type: application/json' \
        --header 'apiKey: <{+data-api+} Key>' \
        --data-raw '{
            "dataSource": "<cluster name>",
            "database": "learn-data-api",
            "collection": "people",
            "filter": { "name": "John Sample" }
        }'

Configure the {+data-api+}
--------------------------

You can configure your API deployment and how users interact with the
API.

.. _data-api-versions:

API Versions
~~~~~~~~~~~~

The {+data-api+} uses a built-in versioning scheme to upgrade endpoints over
time while maintaining backwards compatibility. Incoming requests can
specify which version of an endpoint to use in the request URL and the
{+data-api+} can serve any version that you have enabled.

You must enable a new version before users can call endpoints with that
version. You can always enable the most recent {+data-api+} version.
However, you cannot enable an older version after a newer version has
been released.

The following versions are currently supported:

- ``beta``
- ``v1``

.. _data-api-permissions:

Data Access Permissions
~~~~~~~~~~~~~~~~~~~~~~~

The |service| {+data-api+} allows you to define cluster-level read/write
permissions that apply to all incoming requests. You can define one of the
following for each cluster:

- **Read and Write**: Requests can read all data and can insert, modify,
  or delete data in any collection.

- **Read Only**: Requests can read all data in any collection but cannot
  write any data.

- **No Access**: Requests can't read or write any data in any collection.

For more complex permissions, you can define custom :ref:`data access
rules <data-api-permissions>` in the managed |service| {+data-api+} app.

.. _data-api-authentication:

Authentication and API Keys
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The |service| {+data-api+} supports user authentication with API keys.
Incoming requests must include an API key in a request header. You can
create up to 100 {+data-api+} keys.

To allow users to authenticate requests with another method, like a
username and password or a JSON web token, you can enable additional
authentication providers in the :ref:`{+app-services+} App
<data-api-authentication>`.

.. _data-api-deployment-regions:

Deployment Models & Regions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The {+app-services+} layer that runs the {+data-api+} processes requests
on managed servers hosted in deployment regions around the world. You
can control where you deploy your {+data-api+} and process requests
using one of two deployment models:

- **Global** deployment hosts your API on servers in every supported
  region across the world. The API automatically routes and processes
  incoming requests to the server that's nearest to the requesting user.

- **Local** deployment hosts your API servers in one specific deployment
  region in AWS or Azure. The API processes all incoming requests in the
  local region.

  .. include:: /includes/linkto-app-services-deployment-regions.rst

.. _data-api-response-type:

Response Type
~~~~~~~~~~~~~

Endpoints can return data in one of two :ref:`data formats
<atlas-data-api-data-formats>`, either JSON or EJSON.

By default, endpoints return JSON, which is a standard data format that
is widely supported modern langauges and platforms. However, JSON cannot
represent every data type that you can store in MongoDB and loses type
information for some data types.

You can also configure endpoints to return EJSON, which uses structured
JSON objects to fully represent the types that MongoDB supports. This
preserves type information in responses but requires that your
application understands how to parse and use EJSON.

.. tip::

   The official MongoDB drivers include methods for working with EJSON.
   You can also download a standalone parser like :npm:`bson
   <package/bson>` on npm.

Call a {+data-api+} Endpoint
----------------------------

You can call a {+data-api+} endpoint from any standard HTTP client. Each
request can include configuration headers and arguments in the request
body.

Specify the Request Data Format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+data-api+} requests must include a ``Content-Type`` header to specify
the :ref:`data format <atlas-data-api-data-formats>` used in the request
body.

- Use ``Content-Type: application/json`` to represent standard JSON
  types in a {+data-api+} request body.

- Use ``Content-Type: application/ejson`` to represent standard JSON
  types *and* additional EJSON types in a {+data-api+} request body.

.. tabs::

   .. tab:: EJSON
      :tabid: ejson

      .. io-code-block::

         .. input::
            :language: bash
            :emphasize-lines: 4

            curl -X GET \
              https://data.mongodb-api.com/app/<AppID>/endpoint/data/v1/action/insertOne \
              -H 'apiKey: <API Key>' \
              -H 'Content-Type: application/ejson' \
              -H 'Accept: application/ejson' \
              --data-raw '{
                  "dataSource": "Cluster0",
                  "database": "learn-data-api",
                  "collection": "hello",
                  "document": {
                    "_id": { "$oid": "629971c0d71aad65bd59c595" },
                    "greeting": "Hello, EJSON!",
                    "date": { "$date": { "$numberLong": "1654589430998" } }
                  }
              }'

         .. output::
            :language: json

            { "insertedId": { "$oid": "629971c0d71aad65bd59c595" } }

   .. tab:: JSON
      :tabid: json

      .. io-code-block::

         .. input::
            :language: bash
            :emphasize-lines: 4

            curl -X POST \
              https://data.mongodb-api.com/app/<AppID>/endpoint/data/v1/action/updateOne \
              -H 'apiKey: <API Key>' \
              -H 'Content-Type: application/json' \
              --data-raw '{
                 "dataSource": "Cluster0",
                 "database": "learn-data-api",
                 "collection": "hello",
                 "filter": { "greeting": "Hello, world!" },
                 "update": {
                     "$set": { "greeting": "Hello, universe!" }
                 }
              }'

         .. output::
            :language: json
            :visible: false

            { "matchedCount": 1, "modifiedCount": 1 }

.. _data-api-choose-response-format:

Choose a Response Data Format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A request can include an ``Accept`` header to request a specific data
format for the response body, either JSON or EJSON. If a request does
not include a valid ``Accept`` header, the response uses the data format
specified in your :ref:`{+data-api+} configuration
<data-api-response-type>`.

.. tabs::

   .. tab:: EJSON
      :tabid: ejson

      .. io-code-block::

         .. input::
            :language: bash
            :emphasize-lines: 5

            curl -X GET \
              https://data.mongodb-api.com/app/<AppID>/endpoint/data/v1/action/findOne \
              -H 'apiKey: <API Key>' \
              -H 'Content-Type: application/json' \
              -H 'Accept: application/ejson' \
              --data-raw '{
                 "dataSource": "Cluster0",
                 "database": "learn-data-api",
                 "collection": "hello",
                 "projection": { "greeting": 1, "date": 1 }
              }'

         .. output::
            :language: json

            {
              "_id": { "$oid": "629971c0d71aad65bd59c545"},
              "greeting": "Hello, Leafie!",
              "date": { "$date": { "$numberLong": "1654589430998" } }
            }

   .. tab:: JSON
      :tabid: json

      .. io-code-block::

         .. input::
            :language: bash
            :emphasize-lines: 5

            curl -X POST \
              https://data.mongodb-api.com/app/<AppID>/endpoint/data/v1/action/findOne \
              -H 'apiKey: <API Key>' \
              -H 'Content-Type: application/json' \
              -H 'Accept: application/json' \
              --data-raw '{
                 "dataSource": "Cluster0",
                 "database": "learn-data-api",
                 "collection": "hello",
                 "projection": { "greeting": 1, "date": 1 }
              }'

         .. output::
            :language: json

            {
              "_id": "629971c0d71aad65bd59c545",
              "greeting": "Hello, Leafie!",
              "date": "2022-06-07T08:10:30.998Z"
            }

.. _data-api-authenticate:

Authenticate Requests
~~~~~~~~~~~~~~~~~~~~~

To keep your data secure and correct, generated {+data-api+} endpoints
always run in the context of a specific registered user.

Incoming requests must include request headers that authenticate a
unique user for the request. There are two ways to authenticate: Bearer
authentication and Credential authentication.

.. _atlas-data-api-bearer-authentication:

Bearer Authentication
+++++++++++++++++++++

Bearer authentication is the most secure authentication method for
{+data-api+} requests and is required for requests that originate from a
web browser. This method allows you to reuse an existing user session
without storing their login credentials.

Under this scheme, requests include a user access token in the
``Authorization`` header. The access token is issued by {+app-services+}
when a user authenticates and is valid for a limited period of time. To
learn more about how to get an access token and use it to authenticate
requests, see :ref:`Authenticate Data API Requests
<data-api-authenticate-requests>`.

.. code-block:: shell
   :emphasize-lines: 2

   curl -X POST 'https://data.mongodb-api.com/app/<AppID>/endpoint/data/v1/action/find' \
      --header 'Authorization: Bearer <AccessToken>' \
      --header 'Content-Type: application/json' \
      --data-raw '{
        "dataSource": "mongodb-atlas",
        "database": "sample_mflix",
        "collection": "movies",
        "filter": {
          "title": "The Matrix"
        }
      }'

.. _atlas-data-api-credential-authentication:

Credential Authentication
+++++++++++++++++++++++++

Credential authentication is useful while you're developing and in some
server-side environments. However, for most production use cases you should
prefer to use Bearer authentication.

Under this scheme, requests include plaintext user authentication
information from one of the following enabled authentication providers:

- :ref:`Email/Password <email-password-authentication>`
- :ref:`API Key <api-key-authentication>`
- :ref:`Custom JWT <custom-jwt-authentication>`

.. tabs-realm-auth-providers::

   .. tab::
      :tabid: local-userpass

      .. code-block:: bash
         :emphasize-lines: 3-4

         curl -X POST \
           https://data.mongodb-api.com/app/<AppID>/endpoint/data/v1/action/findOne \
           -H 'email: <Email Address>' \
           -H 'password: <Password>' \
           -H 'Content-Type: application/json' \
           --data-raw '{
             "dataSource": "Cluster0",
             "database": "learn-data-api",
             "collection": "hello",
           }'

   .. tab::
      :tabid: api-key

      .. code-block:: bash
         :emphasize-lines: 3

         curl -X POST \
           https://data.mongodb-api.com/app/<AppID>/endpoint/data/v1/action/findOne \
           -H 'apiKey: <API Key>' \
           -H 'Content-Type: application/json' \
           --data-raw '{
             "dataSource": "Cluster0",
             "database": "learn-data-api",
             "collection": "hello",
           }'

   .. tab::
      :tabid: custom-token

      .. code-block:: bash
         :emphasize-lines: 3

         curl -X POST \
           https://data.mongodb-api.com/app/<AppID>/endpoint/data/v1/action/findOne \
           -H 'jwtTokenString: <Custom JSON Web Token>' \
           -H 'Content-Type: application/json' \
           --data-raw '{
             "dataSource": "Cluster0",
             "database": "learn-data-api",
             "collection": "hello",
           }'

.. _data-api-cors:

Authenticate Web Browser Requests
+++++++++++++++++++++++++++++++++

You can use the {+data-api+} from a web browser, but you must
authenticate requests using Bearer authentication with an access token
instead of directly including a user's API key or other credentials.
Modern web browsers enforce :mdn:`Cross-Origin Resource Sharing
<Web/HTTP/CORS> (CORS)`, which blocks all {+data-api+}
requests that do not include a valid access token.

To learn how to get an access token and include it in a request, see
:ref:`Authenticate Data API Requests <data-api-authenticate-requests>`.

Request Logs
------------

The {+data-api+} logs all requests and stores the logs for 30 days.

You can view them on the :guilabel:`{+data-api+}` screen in the
:guilabel:`Logs` tab.

Request Limitations
-------------------

The {+data-api+} enforces the following limitations on all requests:

- Incoming requests may not exceed 18 MB.
- Response body content may not exceed 16 MB.
- Request processing time may not exceed 90 seconds.

Request Traffic
---------------

The {+data-api+} limits request traffic to 10,000 concurrent requests. Any
requests made beyond this limit return an HTTP response status code of
`429 - Too Many Requests <https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429>`_.
You can request a higher limit by `filing a support ticket
<https://support.mongodb.com/welcome>`__.

Billing
-------

The {+data-api+} has usage-based pricing measured by the underlying
{+app-services+} application. For details, see
:appservices:`{+app-services+} Billing </billing>`.

{+data-api+} usage is billed based on the following dimensions:

- **Requests:** Every action adds one request to your billed total
  regardless of whether or not the action is successful.

- **Compute:** Every action bills for time and memory that the server
  uses to process the action. The exact usage depends on your workload.

- **Data Transfer:** Every action bills for data returned to the caller
  in the response. The response may include the result set of the action
  or metadata that describes the result of the action.
