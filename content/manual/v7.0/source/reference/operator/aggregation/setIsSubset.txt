==========================
$setIsSubset (aggregation)
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $setIsSubset

   Takes two arrays and returns ``true`` when the first array is a
   subset of the second, including when the first array equals the
   second array, and ``false`` otherwise.

   :expression:`$setIsSubset` has the following syntax:

   .. code-block:: javascript

      { $setIsSubset: [ <expression1>, <expression2> ] }

   The arguments can be any valid :ref:`expression
   <aggregation-expressions>` as long as they each resolve to an array.
   For more information on expressions, see
   :ref:`aggregation-expressions`.

Behavior
--------

.. |set-operator-name| replace:: :expression:`$setIsSubset`

.. include:: /includes/important-set-operator-semantics.rst
   :end-before: set-output

.. include:: /includes/extracts/fact-agg-top-level-expressions-setIsSubset.rst

.. list-table::
   :header-rows: 1
   :widths: 70 30
   :class: border-table

   * - Example

     - Result

   * - .. code-block:: javascript
          :copyable: false

          { $setIsSubset: [ [ "a", "b", "a" ], [ "b", "a" ] ] }

     - ``true``

   * - .. code-block:: javascript
          :copyable: false

          { $setIsSubset: [ [ "a", "b" ], [ [ "a", "b" ] ] ] }

     - ``false``

Example
-------

Consider an ``flowers`` collection with the following documents:

.. code-block:: javascript

   db.flowers.insertMany( [
      { "_id" : 1, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "rose", "orchid" ] },
      { "_id" : 2, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "orchid", "rose", "orchid" ] },
      { "_id" : 3, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "rose", "orchid", "jasmine" ] },
      { "_id" : 4, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "jasmine", "rose" ] },
      { "_id" : 5, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ ] },
      { "_id" : 6, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ [ "rose" ], [ "orchid" ] ] },
      { "_id" : 7, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ [ "rose", "orchid" ] ] },
      { "_id" : 8, "flowerFieldA" : [ ], "flowerFieldB" : [ ] },
      { "_id" : 9, "flowerFieldA" : [ ], "flowerFieldB" : [ "rose" ] }
   ] ) 

   

The following operation uses the :expression:`$setIsSubset` operator to
determine if the ``flowerFieldA`` array is a subset of the ``flowerFieldB``
array:

.. code-block:: javascript

   db.flowers.aggregate(
      [
        { $project: { flowerFieldA:1, flowerFieldB: 1, AisSubset: { $setIsSubset: [ "$flowerFieldA", "$flowerFieldB" ] }, _id:0 } }
      ]
   )

The operation returns the following results:

.. code-block:: javascript
   :copyable: false

   { "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "rose", "orchid" ], "AisSubset" : true }
   { "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "orchid", "rose", "orchid" ], "AisSubset" : true }
   { "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "rose", "orchid", "jasmine" ], "AisSubset" : true }
   { "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "jasmine", "rose" ], "AisSubset" : false }
   { "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ ], "AisSubset" : false }
   { "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ [ "rose" ], [ "orchid" ] ], "AisSubset" : false }
   { "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ [ "rose", "orchid" ] ], "AisSubset" : false }
   { "flowerFieldA" : [ ], "flowerFieldB" : [ ], "AisSubset" : true }
   { "flowerFieldA" : [ ], "flowerFieldB" : [ "rose" ], "AisSubset" : true }
