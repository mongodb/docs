=====================
|mms-full| Components
=====================

.. default-domain:: mongodb

An |onprem| installation consists of the :ref:`mms-application-package` and,
optionally, the :ref:`backup-daemon`. Each package also requires a MongoDB
database to hold operational data.

For deployment diagrams, see :doc:`/core/deployments`. For default ports and
health-check endpoints, see :doc:`/reference/firewall-configuration`.

Network Diagram
---------------

.. include:: /images/opsmanager-network-diagram.rst

.. _mms-application-package:

|application|
-------------

The front-end |application| contains the UI the end user interacts with, as
well as HTTPS services used by the Monitoring Agent and Backup Agent
to transmit data to and from |mms|. All three components start
automatically when the |application| starts. These components
are stateless. Multiple instances of the front-end package can run as
long as each instance has the same configuration. Users and agents can
interact with any instance.

For Monitoring, you **only** need to install the application
package. The application package consists of the following components:

- :ref:`mms-http-service`

- :ref:`backup-http-service`

- :ref:`backup-alert-service`

.. _mms-http-service:

|http-service|
~~~~~~~~~~~~~~

The HTTP server runs on port ``8080`` by default.  This component
contains the web interface for managing |mms| users, monitoring of
MongoDB servers, and managing those serverâ€™s backups. Users can sign
up, create new accounts and groups, as well as join an existing
group.

.. todo:: Is this next sentence, below, redundant? The only endpoint in
   the |http-service| is 8080.

   The |mms| Web Server also contains endpoints used by the Monitoring Agent
   to report back information on monitored MongoDB instances.

.. _backup-http-service:

Backup HTTP Service
~~~~~~~~~~~~~~~~~~~

The HTTP server runs on port ``8081`` by default. The Backup HTTP Service
contains a set of web services used by the Backup Agent. The agent
retrieves its configuration from this service. The agent also sends
back initial sync and oplog data through this interface. There is no
user interaction with this service. The Backup HTTP service runs on
port ``8081`` by default.

The Backup HTTP Service exposes an endpoint that reports on the state of the
service and the underlying database to support monitoring of the Backup
service. This status also checks the connections from the service to the
:ref:`mms-application-database` and the :ref:`mms-backup-blockstore-database`. See
:ref:`backup-http-service-endpoint`.

.. _backup-alert-service:

Backup Alert Service
~~~~~~~~~~~~~~~~~~~~

The Backup Alert Service watches the state of all agents, local copies
of backed up databases, and snapshots. It sends email alerts as
problems occur. The Backup Alert Service exposes a health-check endpoint.
See :ref:`backup-alert-service-endpoint`.

.. _backup-daemon:

Backup Daemon
-------------

The Backup Daemon manages all local copies of backed up database (i.e. HEADs)
as well as backup snapshots. The daemon does scheduled work based on data
coming in to the Backup HTTP Service from the Backup Agents. No client
applications talk directly to the daemon. Its state and job queues come from
the :ref:`mms-application-database`.

The daemon creates a local copy of the backed up database on in its
local storage in the :setting:`rootDirectory` path. If you run
multiple Backup Daemons, when you add a new backup the system selects
a daemon for that instance and the local copy of that instance resides
with that Daemon.

The daemon will take scheduled snapshots and store the snapshots in the
:ref:`Backup Blockstore database <mms-backup-blockstore-database>`. It will
also act on restore requests by retrieving data from the Blockstore and
delivering it to the requested destination.

The server running the Backup Daemon acts as a :manual:`hidden secondary
</core/replica-set-hidden-member>` for every :term:`replica set` assigned
to it.

:ref:`Multiple Backup Daemons <multiple-backup-daemons>` can increase your
storage by scaling horizontally and can provide **manual** failover.

The Backup Daemon exposes a health-check endpoint. See
:ref:`backup-daemon-endpoint`.

.. _backing-database:

Data Storage
------------

|mms| uses dedicated MongoDB databases to store the |application|'s monitoring
data and the Backup Daemon's snapshots. These **backing databases** run on separate
dedicated :doc:`backing MongoDB instances
</tutorial/prepare-backing-mongodb-instances>`.
The backing instances run as replica sets and host **only** |mms| data.

The databases are not part of the |mms| package installations and are set
up separately.

.. _mms-application-database:

|application| Database
~~~~~~~~~~~~~~~~~~~~~~

This database contains application metadata used by the 
:ref:`mms-application-package`. The database stores:

- Monitoring data collected from Monitoring Agents.

- Meta data for |mms| users, groups, hosts, monitoring data, and backup
  state.

For topology and specifications, see
:ref:`mms-application-database-specifications`.

.. _mms-backup-blockstore-database:

|mms| Backup Blockstore Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This database contains all snapshots of databases backed up and oplogs
retained for point in time restores. The Backup Blockstore database requires
disk space proportional to the backed-up databases.

Configure the Blockstore as a replica set to provide durability and automatic
failover to the backup and restore components. The replica set must have at
least three members that hold data.

You **cannot** backup the Blockstore database with |onprem| Backup.

For additional specifications, see
:ref:`mms-blockstore-database-specifications`.
