=================
The MongoDB Shell
=================

.. default-domain:: mongodb

The :program:`mongo` shell is an interactive JavaScript environment
for MongoDB that you can use to perform administrative operation on
MongoDB deployments, to support prototyping, and as a tool for
learning how to use MongoDB. The shell provides a complete MongoDB
interface, and is a part of the MongoDB server package that includes
:program:`mongod` the database server itself.

The examples in the MongoDB Primer use the :program:`mongo` shell:
however, you can use any :ecosystem:`MongoDB Driver </drivers>` to
connect to and interact with MongoDB deployments.

Operations
----------

Start ``mongo``
~~~~~~~~~~~~~~~

After you've installed MongoDB, while logged into a system prompt on
the same system where you installed MongoDB you can run the
:program:`mongo` shell with the following command:

.. code-block:: sh

   mongo

On Windows systems, add ``.exe`` as follows:

.. code-block:: sh

   mongo.exe

The examples in the MongoDB Primer use the UNIX-like variant, but all
operations are available on Windows.

By default the :program:`mongo` session is using the database named
``test``.

When you run :program:`mongo` without any arguments the shell will
attempt to connect to the MongoDB instance running on the
``localhost`` interface on port ``27017``.

You can specify an alternate port using the :option:`--port
<mongo --port>` option, as in the following:

.. code-block:: sh

   mongo --port 7001

Specify Host and Port Information
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To connect the :program:`mongo` shell to a MongoDB instance running on
the ``mongodb0.example.net`` host, start :program:`mongo` with the
following invocation:

.. code-block:: sh

   mongo mongodb0.example.net

You can also specify the host explicitly with the :option:`--host
<mongo --host>` option:

.. code-block:: sh

   mongo --host mongodb0.example.net

:program:`mongod` automatically connects to port ``27017`` by
default. To connect to a MongoDB instance on another port, use the
following command:

.. code-block:: sh

   mongo mongodb0.example.net:7001

You can also specify a different hostname and port combination using
options, as follows:

.. code-block:: sh

   mongo --host mongodb0.example.net --port 7001

Connect to a Specific Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, all :program:`mongo` shell connections will start using
the ``test`` database. To connect to a different database, for example
``records``, specify that name directly when starting the shell, as in
the following:

.. code-block:: sh

   mongo records

You can specify a database *and* hostname, using the following form:

.. code-block:: sh

   mongo <host><:<port>></<database>>

For example:

.. code-block:: sh

   mongo mongodb0.exmaple.net:7001/records

If you omit the port number, you can connect to remote host on the
default port ``27017``:

.. code-block:: sh

   mongo mongodb0.example.net/records

If your database name is *also* a resolvable hostname, you *must*
specify both a hostname and a database name.

Run JavaScript with the ``mongo`` Shell
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Once you have a connection to a :program:`mongod` instance, you can
interactively run and test JavaScript code. Consider the following
sequence of operations that: creates an empty JavaScript object, assigns it to
the variable named ``test_record``, adds a value, and prints ``test_record``:

.. code-block:: javascript

   test_record = {};

   test_record.message = "hello world";

   print(tojson(test_record));

The :program:`mongo` shell defines a helper function named
``printjson()``, as an alternative to ``print(tojson());``. You can
save the document you created to MongoDB with the following operation:

.. code-block:: javascript

   db.records.save(test_record);

This method saves the document ``test_record`` to the ``records``
collection in the current database. See the tutorials on
:doc:`inserting documents </insert>` for additional information saving
data to MongoDB.

Because the :program:`mongo` shell is interactive, you do not need to
specify the terminal semi-colon (i.e. ``;``) at the end of each
statement. In interactive mode, you may use or omit terminal
semi-colons as you wish.

The shell can evaluate and run any JavaScript, consider the following
loop which saves ``25`` documents to a MongoDB collection, stopping if
it encounters an error:

.. code-block:: javascript

   for (i = 0; i < 25; i++ ) {
       var random = _rand() * 10;
       var doc = { x: i, r: random };

       var result = db.records.save(doc);

       if (result.nInserted != 1) {
           print("encountered an error inserting: " + tojson(doc) + " stopping");
           break;
       }
   }
   print("records has " + db.records.count() + " documents");

In most cases, you would want to use a :manual:`bulk write operation
</reference/method/Bulk>` to write a group of documents rather than a
``for`` loop.

Additional Information
----------------------

Scripting
~~~~~~~~~

Because :program:`mongo` includes a full JavaScript environment,
built on top of V8, in addition to a collection of :manual:`methods
for interacting with MongoDB </reference/method>`, you can use and run
arbitrary JavaScript in the shell. :program:`mongo` includes a
non-interactive mode, that you can use to run scripts like some other
MongoDB drivers. See :manual:`mongo Shell Scripting
</tutorial/write-scripts-for-the-mongo-shell>` for more information.

Reference
~~~~~~~~~

See the following documents in the MongoDB Manual for more information
on the :program:`mongo` shell.

- :manual:`Data Types in the MongoDB Shell </core/shell-types>`
- :manual:`MongoDB Shell Help </tutorial/access-mongo-shell-help>`
- :manual:`Shell Quick Reference </reference/mongo-shell>`
- :manual:`Shell JavaScript Reference </reference/method>`
- :manual:`Manual Page </reference/program/mongo>`
