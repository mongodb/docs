# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/operator/query/regex.txt:3
# 1a50a3c85251496b86888ce6b377924e
msgid "$regex"
msgstr ""

#: ../source/reference/operator/query/regex.txt:8
# 58e6c2a7636f4801b9b4395c7cf36c21
msgid "Definition"
msgstr ""

#: ../source/reference/operator/query/regex.txt:12
# 2db483b48a7d4e8dba665c98a3312a88
msgid "Provides regular expression capabilities for pattern matching *strings* in queries. MongoDB uses Perl compatible regular expressions (i.e. \"PCRE\" ) version 8.30 with UTF-8 support."
msgstr ""

#: ../source/reference/operator/query/regex.txt:16
# f9b3d3775e9540188114b11fdb7f33cb
msgid "To use :query:`$regex`, use one of the following syntax:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:24
# f69a1c9dd35e4898a503f1aea02eb748
msgid "In MongoDB, you can also use regular expression objects (i.e. ``/pattern/``) to specify regular expressions:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:31
# e17c72fe6f6a4a37a39e8d2fec6a9c8a
msgid "For restrictions on particular syntax use, see :ref:`syntax-restrictions`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:36
# 67c2995c2db44d41bf1ab5d75cc06931
msgid "The following ``<options>`` are available for use with regular expression."
msgstr ""

#: ../source/reference/operator/query/regex.txt:43
# 4bd744b5782543f0a0621ba97df641a9
msgid "Option"
msgstr ""

#: ../source/reference/operator/query/regex.txt:44
# 057e85aa1ee148ba88df51c8c7e9c444
msgid "Description"
msgstr ""

#: ../source/reference/operator/query/regex.txt:45
# c9f3b74b1acc4b6b925c63cea62a8ee6
msgid "Syntax Restrictions"
msgstr ""

#: ../source/reference/operator/query/regex.txt:47
# fa931a323d2a4330a5df662e770e966d
msgid "``i``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:48
# cde9d8b643df4c669c5feef9f3684a94
msgid "Case insensitivity to match upper and lower cases. For an example, see :ref:`regex-case-insensitive`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:52
# a420f6c60f274a6d805f2ecd57e67d35
msgid "``m``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:54
# ba3f66e907494d448b3fa57cfa3cf453
msgid "For patterns that include anchors (i.e. ``^`` for the start, ``$`` for the end), match at the beginning or end of each line for strings with multiline values. Without this option, these anchors match at beginning or end of the string. For an example, see :ref:`regex-multiline-match`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:60
# e5aeb956d19c4b78ba675c1483484374
msgid "If the pattern contains no anchors or if the string value has no newline characters (e.g. ``\\n``), the ``m`` option has no effect."
msgstr ""

#: ../source/reference/operator/query/regex.txt:66
# 881eeeb6de594d5480e2100d0186ec22
msgid "``x``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:68
# a134136ed3a842119858c5459e2dc572
msgid "\"Extended\" capability to ignore all white space characters in the :query:`$regex` pattern unless escaped or included in a character class."
msgstr ""

#: ../source/reference/operator/query/regex.txt:72
# d7d993f9c9b04fbdb78d164786592d36
msgid "Additionally, it ignores characters in-between and including an un-escaped hash/pound (``#``) character and the next new line, so that you may include comments in complicated patterns. This only applies to data characters; white space characters may never appear within special character sequences in a pattern."
msgstr ""

#: ../source/reference/operator/query/regex.txt:79
# a9379a4bdaad4463850077397a73f942
msgid "The ``x`` option does not affect the handling of the VT character (i.e. code 11)."
msgstr ""

#: ../source/reference/operator/query/regex.txt:82
#: ../source/reference/operator/query/regex.txt:90
# 887c99c5f71d4991aded43a832f5eccd
# e84410748c5646528cbe760923140713
msgid "Requires ``$regex`` with ``$options`` syntax"
msgstr ""

#: ../source/reference/operator/query/regex.txt:84
# a352e10106174f59a957320665f30f21
msgid "``s``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:86
# 9fd4e97b4cb941fd8fcfdb87958dc8f8
msgid "Allows the dot character (i.e. ``.``) to match all characters *including* newline characters. For an example, see :ref:`regex-dot-new-line`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:93
# c573545410154ec587526e004440cf37
msgid "Behavior"
msgstr ""

#: ../source/reference/operator/query/regex.txt:98
# c62086add2574466aea23f4e8adbaaa0
msgid "$regex vs. /pattern/ Syntax"
msgstr ""

#: ../source/reference/operator/query/regex.txt:101
# d62768e3ae694fc7af553b8a9095639e
msgid "``$in`` Expressions"
msgstr ""

#: ../source/reference/operator/query/regex.txt:103
# 87fe6cec3334464cbd0b72c7c9489888
msgid "To include a regular expression in an ``$in`` query expression, you can only use JavaScript regular expression objects (i.e. ``/pattern/`` ). For example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:111
# 8c1a0dd7aa134c90862532ce6c20e5d9
msgid "You *cannot* use :query:`$regex` operator expressions inside an :query:`$in`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:115
# edad586a432d47d2ab3d7ead9e8c0c79
msgid "Implicit ``AND`` Conditions for the Field"
msgstr ""

#: ../source/reference/operator/query/regex.txt:117
# 95384664a88649bb8b3b73d8387a8282
msgid "To include a regular expression in a comma-separated list of query conditions for the field, use the :query:`$regex` operator. For example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:127
# 757f4687d59146679035a2fc015ae53a
msgid "``x`` and ``s`` Options"
msgstr ""

#: ../source/reference/operator/query/regex.txt:129
# e6e74cece94f4ab2822e1e6c79bb9760
msgid "To use either the ``x`` option or ``s`` options, you must use the :query:`$regex` operator expression *with* the :query:`$options` operator. For example, to specify the ``i`` and the ``s`` options, you must use :query:`$options` for both:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:140
# e0467da6c5164d41885ded253f5cc2f4
msgid "PCRE vs JavaScript"
msgstr ""

#: ../source/reference/operator/query/regex.txt:142
# cc572f7e8b9142d380131de866e7cb41
msgid "To use PCRE supported features in the regex pattern that are unsupported in JavaScript, you must use the :query:`$regex` operator expression with the pattern as a string. For example, to use ``(?i)`` in the pattern to turn case-insensitivity on for the remaining pattern and ``(?-i)`` to turn case-sensitivity on for the remaining pattern, you must use the :query:`$regex` operator with the pattern as a string:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:156
# fa30bd6833d6422a99ffab47a1523e8e
msgid "Index Use"
msgstr ""

#: ../source/reference/operator/query/regex.txt:160
# 9753dc34fb3341b085c28a6490eadcf2
msgid "If an index exists for the field, then MongoDB matches the regular expression against the values in the index, which can be faster than a collection scan. Further optimization can occur if the regular expression is a \"prefix expression\", which means that all potential matches start with the same string. This allows MongoDB to construct a \"range\" from that prefix and only match against those values from the index that fall within that range."
msgstr ""

#: ../source/reference/operator/query/regex.txt:168
# e8c28fe3714842bbb1ded68ae5ffd673
msgid "A regular expression is a \"prefix expression\" if it starts with a caret (``^``) or a left anchor (``\\A``), followed by a string of simple symbols. For example, the regex ``/^abc.*/`` will be optimized by matching only against the values from the index that start with ``abc``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:173
# 25fab55f0724478a83c6fbfbda584824
msgid "Additionally, while ``/^a/``, ``/^a.*/``, and ``/^a.*$/`` match equivalent strings, they have different performance characteristics. All of these expressions use an index if an appropriate index exists; however, ``/^a.*/``, and ``/^a.*$/`` are slower. ``/^a/`` can stop scanning after matching the prefix."
msgstr ""

#: ../source/reference/operator/query/regex.txt:180
# 0740cbb21c4b498cb9fee2eb11dc2b4f
msgid "Examples"
msgstr ""

#: ../source/reference/operator/query/regex.txt:182
# 209eeef5b6ea43b0b94404707425a3f8
msgid "The following examples use a collection ``products`` with the following documents:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:195
# bc51d33f6f5742f4bd594872fc62a9a6
msgid "Perform Case-Insensitive Regular Expression Match"
msgstr ""

#: ../source/reference/operator/query/regex.txt:197
# 8d8095883b1843fd813bade2fb625573
msgid "The following example uses the ``i`` option perform a *case-insensitive* match for documents with ``sku`` value that starts with ``ABC``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:205
#: ../source/reference/operator/query/regex.txt:224
#: ../source/reference/operator/query/regex.txt:264
# fb913fb7064c4b17933e0d369dcd248f
# 940ae931938045b6bd22cdbf1f0ed206
# 408e0f2887a94569aac893f1ae882de0
msgid "The query matches the following documents:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:215
# e315357e0a4a4df39b7df0f6962c17d1
msgid "Multiline Match for Lines Starting with Specified Pattern"
msgstr ""

#: ../source/reference/operator/query/regex.txt:217
# a1d1d4eee3554119bd30c23a73c00ace
msgid "The following example uses the ``m`` option to match lines starting with the letter ``S`` for multiline strings:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:231
# 19b3c66f45bc4396b647b4002adb5e7e
msgid "Without the ``m`` option, the query would match just the following document:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:237
# 00fb1debcace4170af5ad315a7b14701
msgid "If the :query:`$regex` pattern does not contain an anchor, the pattern matches against the string as a whole, as in the following example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:244
# 1a62ebbba6004062889618758644648f
msgid "Then, the :query:`$regex` would match both documents:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:254
# e95a3dbebd214cb6bfdb8a0c07940087
msgid "Use the ``.`` Dot Character to Match New Line"
msgstr ""

#: ../source/reference/operator/query/regex.txt:256
# 29b1878f0a124a388871674dd7737ef7
msgid "The following example uses the ``s`` option to allow the  dot character (i.e. ``.``) to match all characters *including* new line as well as the ``i`` option to perform a case-insensitive match:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:271
# 289c0182d3d34bc9b6ebef96b64a74a0
msgid "*Without* the ``s`` option, the query would have matched only the following document:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:280
# 4ef6b7e8cf1a4a929cad4d23326199cb
msgid "Ignore White Spaces in Pattern"
msgstr ""

#: ../source/reference/operator/query/regex.txt:282
# 2e5dec95dcbc4a248b38fa81d2f1f325
msgid "The following example uses the ``x`` option ignore white spaces and the comments, denoted by the ``#`` and ending with the ``\\n`` in the matching pattern:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:291
# 00816885e2f8489a84d9a29f11da77d6
msgid "The query matches the following document:"
msgstr ""

