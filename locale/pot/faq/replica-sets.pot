# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/replica-sets.txt:3
# c0b6719e4a7a4c1ab277af619ee4ae65
msgid "FAQ: Replication and Replica Sets"
msgstr ""

#: ../source/faq/replica-sets.txt:7
# 4c4993af4af64da08210e651438a08d4
msgid "This document answers common questions about database replication in MongoDB."
msgstr ""

#: ../source/faq/replica-sets.txt:10
# c821b3800c3d42db8b7bfe18f5b6e02f
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/replica-sets.txt:15
# 76d3915d6b954d4a8ba65fadc40ca880
msgid "What kinds of replication does MongoDB support?"
msgstr ""

#: ../source/faq/replica-sets.txt:17
# f1ea4f9a17374d82a56e16ac21bff8b8
msgid "MongoDB supports master-slave replication and a variation on master-slave replication known as replica sets. Replica sets are the recommended replication topology."
msgstr ""

#: ../source/faq/replica-sets.txt:22
# f6a130bb145b4008ac76900c0f975b0f
msgid "What do the terms \"primary\" and \"master\" mean?"
msgstr ""

#: ../source/faq/replica-sets.txt:24
# f2efdb99b12a4e74a53092993f008fce
msgid ":term:`Primary` and :term:`master` nodes are the nodes that can accept writes. MongoDB's replication is \"single-master:\" only one node can accept write operations at a time."
msgstr ""

#: ../source/faq/replica-sets.txt:28
# d3371baba87e49518cb854fd41c73c31
msgid "In a replica set, if the current \"primary\" node fails or becomes inaccessible, the other members can autonomously :term:`elect <election>` one of the other members of the set to be the new \"primary\"."
msgstr ""

#: ../source/faq/replica-sets.txt:32
# a3f61c1c574545eb9a0f0abbc52c0131
msgid "By default, clients send all reads to the primary; however, :term:`read preference` is configurable at the client level on a per-connection basis, which makes it possible to send reads to secondary nodes instead."
msgstr ""

#: ../source/faq/replica-sets.txt:38
# 087952ae5eb24cc580dd9193eccf3ad4
msgid "What do the terms \"secondary\" and \"slave\" mean?"
msgstr ""

#: ../source/faq/replica-sets.txt:40
# 29b07759a2bd450e8d2e22836ae969c1
msgid ":term:`Secondary` and :term:`slave` nodes are read-only nodes that replicate from the :term:`primary`."
msgstr ""

#: ../source/faq/replica-sets.txt:43
# c4b7f0c73b6c44248cd46af4ed230ccc
msgid "Replication operates by way of an :term:`oplog`, from which secondary/slave members apply new operations to themselves. This replication process is asynchronous, so secondary/slave nodes may not always reflect the latest writes to the primary. But usually, the gap between the primary and secondary nodes is just few milliseconds on a local network connection."
msgstr ""

#: ../source/faq/replica-sets.txt:50
# e61c92e30843467f9c3b9adacaa1ee32
msgid "How long does replica set failover take?"
msgstr ""

#: ../source/faq/replica-sets.txt:52
# b3af9b7a4a5d41f2b66c5bd0fdd11798
msgid "It varies, but a replica set will select a new primary within a minute."
msgstr ""

#: ../source/faq/replica-sets.txt:54
# dba9003381c74067b250bb60c9b3674f
msgid "It may take 10-30 seconds for the members of a :term:`replica set` to declare a :term:`primary` inaccessible. This triggers an :term:`election`. During the election, the cluster is unavailable for writes."
msgstr ""

#: ../source/faq/replica-sets.txt:59
# 9ee20cb42cbf4d5888d951ba7b938821
msgid "The election itself may take another 10-30 seconds."
msgstr ""

#: ../source/faq/replica-sets.txt:63
# a272592ed1d24a2ea0c72df9e6d4d523
msgid ":term:`Eventually consistent <eventual consistency>` reads, like the ones that will return from a replica set are only possible with a :term:`write concern` that permits reads from :term:`secondary` members."
msgstr ""

#: ../source/faq/replica-sets.txt:69
# dc21fbe285454c46befaf56ad366f31a
msgid "Does replication work over the Internet and WAN connections?"
msgstr ""

#: ../source/faq/replica-sets.txt:71
#: ../source/faq/replica-sets.txt:141
#: ../source/faq/replica-sets.txt:259
# ff2ae0b85ee84cf2ac773ef33a8da9f5
# e0fa0ff9ec91408d999f0714ba5153aa
# db54aa0400f7418388f74798fa08e8da
msgid "Yes."
msgstr ""

#: ../source/faq/replica-sets.txt:73
# eba9adcbc78f463aae5d7ca12c8b2143
msgid "For example, a deployment may maintain a :term:`primary` and :term:`secondary` in an East-coast data center along with a :term:`secondary` member for disaster recovery in a West-coast data center."
msgstr ""

#: ../source/faq/replica-sets.txt:77
# fd7795a554cd480dbae812be5b8a0c27
msgid ":doc:`/tutorial/deploy-geographically-distributed-replica-set`"
msgstr ""

#: ../source/faq/replica-sets.txt:80
# f828567d6aef4bedb3289f37a904e6ae
msgid "Can MongoDB replicate over a \"noisy\" connection?"
msgstr ""

#: ../source/faq/replica-sets.txt:82
# 8857760343f84a579f7f839ffd1fccc1
msgid "Yes, but not without connection failures and the obvious latency."
msgstr ""

#: ../source/faq/replica-sets.txt:84
# 6de0be53878a48989148ef09db830275
msgid "Members of the set will attempt to reconnect to the other members of the set in response to networking flaps. This does not require administrator intervention. However, if the network connections among the nodes in the replica set are very slow, it might not be possible for the members of the node to keep up with the replication."
msgstr ""

#: ../source/faq/replica-sets.txt:90
# 5ea8367c3b5f47e397f8e684cc1c5110
msgid "If the TCP connection between the secondaries and the :term:`primary` instance breaks, a :term:`replica set` will automatically elect one of the :term:`secondary` members of the set as primary."
msgstr ""

#: ../source/faq/replica-sets.txt:95
# b1a6af22a4b245449d79275a4f994ccb
msgid "What is the preferred replication method: master/slave or replica sets?"
msgstr ""

#: ../source/faq/replica-sets.txt:99
# ecca2ae653554c619c930677013c4a7b
msgid "In MongoDB 3.0.0, replica sets can have up to :ref:`50 nodes <3.0-replica-sets-max-members>`. Previous versions limited the maximum number of replica set members to 12."
msgstr ""

#: ../source/faq/replica-sets.txt:103
# 74ef29220fc84d33858bbd5a17c33f43
msgid ":term:`Replica sets <replica set>` are the preferred :term:`replication` mechanism in MongoDB. However, if your deployment requires more than 50 nodes, you must use master/slave replication."
msgstr ""

#: ../source/faq/replica-sets.txt:108
# 40534f50ea7e47d18b19785ec0a321a1
msgid "What is the preferred replication method: replica sets or replica pairs?"
msgstr ""

#: ../source/faq/replica-sets.txt:112
# 4b54df2a79924ee19e898897f8cf4f2a
msgid ":term:`Replica sets <replica set>` replaced :term:`replica pairs` in version 1.6. :term:`Replica sets <replica set>` are the preferred :term:`replication` mechanism in MongoDB."
msgstr ""

#: ../source/faq/replica-sets.txt:117
# e34999c280c046e5b1dea3de2de0acfa
msgid "Why use journaling if replication already provides data redundancy?"
msgstr ""

#: ../source/faq/replica-sets.txt:119
# e41c66002b41450d9f1f863f73d1d3c3
msgid ":term:`Journaling <journal>` facilitates faster crash recovery. Prior to journaling, crashes often required :dbcommand:`database repairs <repairDatabase>` or full data resync. Both were slow, and the first was unreliable."
msgstr ""

#: ../source/faq/replica-sets.txt:123
# 0cc3053f04a247568deac73852d1918c
msgid "Journaling is particularly useful for protection against power failures, especially if your replica set resides in a single data center or power circuit."
msgstr ""

#: ../source/faq/replica-sets.txt:127
# 1a91468e0f194819b9cbc01a923c171e
msgid "When a :term:`replica set` runs with journaling, :program:`mongod` instances can safely restart without any administrator intervention."
msgstr ""

#: ../source/faq/replica-sets.txt:132
# de256d9a89614bbdbe03f40900224f69
msgid "Journaling requires some resource overhead for write operations. Journaling has no effect on read performance, however."
msgstr ""

#: ../source/faq/replica-sets.txt:135
# 64721e6cf45042bea4daf37cb0f21bb5
msgid "Journaling is enabled by default on all 64-bit builds of MongoDB v2.0 and greater."
msgstr ""

#: ../source/faq/replica-sets.txt:139
# 5567eb348fa14c6eb1fabed1255ba99a
msgid "Are write operations durable if write concern does not acknowledge writes?"
msgstr ""

#: ../source/faq/replica-sets.txt:143
# 744d46ccd8114c0db9a803c09a750448
msgid "However, if you want confirmation that a given write has arrived at the server, use :ref:`write concern <write-concern>`."
msgstr ""

#: ../source/faq/replica-sets.txt:146
# 6d037d4b01964b96871418b99d65dbea
msgid "After the :ref:`default write concern change <driver-write-concern-change>`, the default write concern acknowledges all write operations, and unacknowledged writes must be explicitly configured. See the :doc:`/applications/drivers` documentation for your driver for more information."
msgstr ""

#: ../source/faq/replica-sets.txt:154
# 49ec664fe300457c93da1692991bb4be
msgid "The :program:`mongo` shell now defaults to use :doc:`safe writes </core/write-concern>`. See :ref:`write-methods-incompatibility` for more information."
msgstr ""

#: ../source/faq/replica-sets.txt:158
# cdb8f7a7c31c42458cf28b849367d2a4
msgid "A new protocol for :ref:`write operations <rel-notes-write-operations>` integrates write concerns with the write operations. Previous versions issued a :dbcommand:`getLastError` command after a write to specify a write concern."
msgstr ""

#: ../source/faq/replica-sets.txt:165
# 3025cd3208d94bd7b2146361c2afba0e
msgid "How many arbiters do replica sets need?"
msgstr ""

#: ../source/faq/replica-sets.txt:167
# 559b83cfbf74445cb6b82742e4d68a0e
msgid "Some configurations do not require any :term:`arbiter` instances. Arbiters vote in :term:`elections <election>` for :term:`primary` but do not replicate the data like :term:`secondary` members."
msgstr ""

#: ../source/faq/replica-sets.txt:172
# 3b1633b248cd4e14b85808fce5596a1c
msgid ":term:`Replica sets <replica set>` require a majority of the remaining nodes present to elect a primary. Arbiters allow you to construct this majority without the overhead of adding replicating nodes to the system."
msgstr ""

#: ../source/faq/replica-sets.txt:177
# 148c0bb697c840d4a833f25865e897de
msgid "There are many possible replica set :doc:`architectures </core/replica-set-architectures>`."
msgstr ""

#: ../source/faq/replica-sets.txt:180
# 100e257d23464f0dbe1d64eed9a0b464
msgid "A replica set with an odd number of voting nodes does not need an arbiter."
msgstr ""

#: ../source/faq/replica-sets.txt:182
# 0c186afce3a34178bb5ab9b297092bad
msgid "A common configuration consists of two replicating nodes that include a :term:`primary` and a :term:`secondary`, as well as an :term:`arbiter` for the third node. This configuration makes it possible for the set to elect a primary in the event of failure, without requiring three replicating nodes."
msgstr ""

#: ../source/faq/replica-sets.txt:188
# 3f0c3beb31934a098ddc2a1b9fae059a
msgid "You may also consider adding an arbiter to a set if it has an equal number of nodes in two facilities and network partitions between the facilities are possible. In these cases, the arbiter will break the tie between the two facilities and allow the set to elect a new primary."
msgstr ""

#: ../source/faq/replica-sets.txt:194
# ff304c6c3bc54f4ea9b407b0c7aeb02b
msgid ":doc:`/core/replica-set-architectures`"
msgstr ""

#: ../source/faq/replica-sets.txt:197
# e301aa13552f487382121e7bca667720
msgid "What information do arbiters exchange with the rest of the replica set?"
msgstr ""

#: ../source/faq/replica-sets.txt:199
# 98d14b01332f4d49ac91a24d1df8adf1
msgid "Arbiters never receive the contents of a collection but do exchange the following data with the rest of the replica set:"
msgstr ""

#: ../source/faq/replica-sets.txt:202
# ed42d72bb99645a6923077a285b6c4fb
msgid "Credentials used to authenticate the arbiter with the replica set. All MongoDB processes within a replica set use keyfiles. These exchanges are encrypted."
msgstr ""

#: ../source/faq/replica-sets.txt:206
# 3e9eacf0225a4e87b00b0996b30cd6ba
msgid "Replica set configuration data and voting data. This information is not encrypted. Only credential exchanges are encrypted."
msgstr ""

#: ../source/faq/replica-sets.txt:209
# 97bfc9b9847244f78e0a9652239e6d0c
msgid "If your MongoDB deployment uses SSL, then all communications between arbiters and the other members of the replica set are secure. See the documentation for :doc:`/tutorial/configure-ssl` for more information. Run all arbiters on secure networks, as with all MongoDB components."
msgstr ""

#: ../source/faq/replica-sets.txt:0
# feb19c9ca0ad4e2197d80a0d08f562ac
msgid "See"
msgstr ""

#: ../source/faq/replica-sets.txt:219
# d962178a347749fd9ab762c3f437d08b
msgid "Which members of a replica set vote in elections?"
msgstr ""

#: ../source/faq/replica-sets.txt:221
# 232bc077738748c696ce59ca9a02dacd
msgid "All members of a replica set, unless the value of :data:`votes <replSetGetConfig.members[n].votes>` is equal to ``0``, vote in elections. This includes all :ref:`delayed <replica-set-delayed-members>`, :ref:`hidden <replica-set-hidden-members>` and :ref:`secondary-only <replica-set-secondary-only-members>` members. :ref:`Arbiters <replica-set-arbiters>` always vote in elections and always have ``1`` vote."
msgstr ""

#: ../source/faq/replica-sets.txt:230
# 441559c7ae224974a5aba1a3206dcdf9
msgid "Additionally, the :data:`~replSetGetStatus.members.state` of the voting members also determine whether the member can vote. Only voting members in the following states are eligible to vote:"
msgstr ""

#: ../source/faq/replica-sets.txt:234
# a103c4fcda754566b9a3c87c2e091085
msgid "``PRIMARY``"
msgstr ""

#: ../source/faq/replica-sets.txt:236
# 546f5b091267470aab874a5a99b1c63d
msgid "``SECONDARY``"
msgstr ""

#: ../source/faq/replica-sets.txt:238
# 9e6e69bd1ea444c0992ad3f181ed44c5
msgid "``RECOVERING``"
msgstr ""

#: ../source/faq/replica-sets.txt:240
# 731a240f1f34468fa204c9120af63d84
msgid "``ARBITER``"
msgstr ""

#: ../source/faq/replica-sets.txt:242
# a4ebaea0157c4c2794f0ce491da6ec1f
msgid "``ROLLBACK``"
msgstr ""

#: ../source/faq/replica-sets.txt:244
#: ../source/faq/replica-sets.txt:254
# 7db57c8982cf489aa3378a9839baf22b
# c190cc57201e4ad590f5c4803688cd86
msgid ":ref:`replica-set-elections`"
msgstr ""

#: ../source/faq/replica-sets.txt:247
# 621bb84269e7413cba2e2181ef50738b
msgid "Do hidden members vote in replica set elections?"
msgstr ""

#: ../source/faq/replica-sets.txt:249
# e0ddd494f5434698844b69e52bc6585f
msgid ":ref:`Hidden members <replica-set-hidden-members>` of :term:`replica sets <replica set>` *do* vote in elections. To exclude a member from voting in an :term:`election`, change the value of the member's :data:`~replSetGetConfig.members[n].votes` configuration to ``0``."
msgstr ""

#: ../source/faq/replica-sets.txt:257
# 3f958c3fe7454a93bfd0f509f0d45855
msgid "Is it normal for replica set members to use different amounts of disk space?"
msgstr ""

#: ../source/faq/replica-sets.txt:261
# 87f56c49dae3429d92110511ad805dc6
msgid "Factors including: different oplog sizes, different levels of storage fragmentation, and MongoDB's data file pre-allocation can lead to some variation in storage utilization between nodes. Storage use disparities will be most pronounced when you add members at different times."
msgstr ""

