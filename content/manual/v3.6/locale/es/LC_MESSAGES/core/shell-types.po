# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 19:31+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/shell-types.txt:3
msgid "Data Types in the ``mongo`` Shell"
msgstr ""

#: ../source/core/shell-types.txt:13
msgid ""
"MongoDB :term:`BSON` provides support for additional data types than "
":term:`JSON`. :ecosystem:`Drivers </drivers>` provide native support for "
"these data types in host languages and the :binary:`~bin.mongo` shell "
"also provides several helper classes to support the use of these data "
"types in the :binary:`~bin.mongo` JavaScript shell. See the "
":doc:`Extended JSON </reference/mongodb-extended-json>` reference for "
"additional information."
msgstr ""

#: ../source/core/shell-types.txt:24
msgid "Types"
msgstr ""

#: ../source/core/shell-types.txt:29
msgid "Date"
msgstr ""

#: ../source/core/shell-types.txt:31
msgid ""
"The :binary:`~bin.mongo` shell provides various methods to return the "
"date, either as a string or as a ``Date`` object:"
msgstr ""

#: ../source/core/shell-types.txt:34
msgid "``Date()`` method which returns the current date as a string."
msgstr ""

#: ../source/core/shell-types.txt:36
msgid ""
"``new Date()`` constructor which returns a ``Date`` object using the "
"``ISODate()`` wrapper."
msgstr ""

#: ../source/core/shell-types.txt:39
msgid ""
"``ISODate()`` constructor which returns a ``Date`` object using the "
"``ISODate()`` wrapper."
msgstr ""

#: ../source/includes/fact-bson-date-internals.rst:1
msgid ""
"Internally, :ref:`document-bson-type-date` objects are stored as a signed"
" 64-bit integer representing the number of milliseconds since the Unix "
"epoch (Jan 1, 1970)."
msgstr ""

#: ../source/includes/fact-bson-date-internals.rst:5
msgid ""
"Not all database operations and drivers support the full 64-bit range. "
"You may safely work with dates with years within the inclusive range "
"``0`` through ``9999``."
msgstr ""

#: ../source/core/shell-types.txt:45
msgid "Return Date as a String"
msgstr ""

#: ../source/core/shell-types.txt:47
msgid ""
"To return the date as a string, use the ``Date()`` method, as in the "
"following example:"
msgstr ""

#: ../source/core/shell-types.txt:54 ../source/core/shell-types.txt:92
msgid ""
"To print the value of the variable, type the variable name in the shell, "
"as in the following:"
msgstr ""

#: ../source/core/shell-types.txt:61
msgid "The result is the value of ``myDateString``:"
msgstr ""

#: ../source/core/shell-types.txt:67
msgid "To verify the type, use the ``typeof`` operator, as in the following:"
msgstr ""

#: ../source/core/shell-types.txt:73
msgid "The operation returns ``string``."
msgstr ""

#: ../source/core/shell-types.txt:76
msgid "Return ``Date``"
msgstr ""

#: ../source/core/shell-types.txt:78
msgid ""
"The :binary:`~bin.mongo` shell wraps objects of ``Date`` type with the "
"``ISODate`` helper; however, the objects remain of type ``Date``."
msgstr ""

#: ../source/core/shell-types.txt:81
msgid ""
"The following example uses both the ``new Date()`` constructor and the "
"``ISODate()`` constructor to return ``Date`` objects."
msgstr ""

#: ../source/core/shell-types.txt:89
msgid ""
"You can use the ``new`` operator with the ``ISODate()`` constructor as "
"well."
msgstr ""

#: ../source/core/shell-types.txt:99
msgid ""
"The result is the ``Date`` value of ``myDate`` wrapped in the "
"``ISODate()`` helper:"
msgstr ""

#: ../source/core/shell-types.txt:106
msgid "To verify the type, use the ``instanceof`` operator, as in the following:"
msgstr ""

#: ../source/core/shell-types.txt:114
msgid "The operation returns ``true`` for both."
msgstr ""

#: ../source/core/shell-types.txt:117
msgid "ObjectId"
msgstr ""

#: ../source/core/shell-types.txt:119
msgid ""
"The :binary:`~bin.mongo` shell provides the ``ObjectId()`` wrapper class "
"around the :ref:`objectid` data type. To generate a new ObjectId, use the"
" following operation in the :binary:`~bin.mongo` shell:"
msgstr ""

#: ../source/core/shell-types.txt:132
msgid "NumberLong"
msgstr ""

#: ../source/core/shell-types.txt:134
msgid ""
"The :binary:`~bin.mongo` shell treats all numbers as floating-point "
"values by default. The :binary:`~bin.mongo` shell provides the "
"``NumberLong()`` wrapper to handle 64-bit integers."
msgstr ""

#: ../source/core/shell-types.txt:138
msgid "The ``NumberLong()`` wrapper accepts the long as a string:"
msgstr ""

#: ../source/core/shell-types.txt:144
msgid ""
"The following examples use the ``NumberLong()`` wrapper to write to the "
"collection:"
msgstr ""

#: ../source/core/shell-types.txt:155
msgid "Retrieve the document to verify:"
msgstr ""

#: ../source/core/shell-types.txt:161
msgid ""
"In the returned document, the ``calc`` field contains a ``NumberLong`` "
"object:"
msgstr ""

#: ../source/core/shell-types.txt:168
msgid ""
"If you use the :update:`$inc` to increment the value of a field that "
"contains a ``NumberLong`` object by a **float**, the data type changes to"
" a floating point value, as in the following example:"
msgstr ""

#: ../source/core/shell-types.txt:172
msgid ""
"Use :update:`$inc` to increment the ``calc`` field by ``5``, which the "
":binary:`~bin.mongo` shell treats as a float:"
msgstr ""

#: ../source/core/shell-types.txt:180
msgid "Retrieve the updated document:"
msgstr ""

#: ../source/core/shell-types.txt:186
msgid ""
"In the updated document, the ``calc`` field contains a floating point "
"value:"
msgstr ""

#: ../source/core/shell-types.txt:196
msgid "NumberInt"
msgstr ""

#: ../source/core/shell-types.txt:198
msgid ""
"The :binary:`~bin.mongo` shell treats all numbers as floating-point "
"values by default. The :binary:`~bin.mongo` shell provides the "
"``NumberInt()`` constructor to explicitly specify 32-bit integers."
msgstr ""

#: ../source/core/shell-types.txt:205
msgid "NumberDecimal"
msgstr ""

#: ../source/core/shell-types.txt:209
msgid ""
"The :binary:`~bin.mongo` shell treats all numbers as 64-bit floating-"
"point ``double`` values by default. The :binary:`~bin.mongo` shell "
"provides the ``NumberDecimal()`` constructor to explicitly specify "
"128-bit decimal-based floating-point values capable of emulating decimal "
"rounding with exact precision. This functionality is intended for "
"applications that handle :doc:`monetary data </tutorial/model-monetary-"
"data>`, such as financial, tax, and scientific computations."
msgstr ""

#: ../source/core/shell-types.txt:218
msgid ""
"The ``decimal`` :doc:`BSON type </reference/bson-types>` uses the IEEE "
"754 decimal128 floating-point numbering format which supports 34 decimal "
"digits (i.e. significant digits) and an exponent range of âˆ’6143 to +6144."
msgstr ""

#: ../source/core/shell-types.txt:223
msgid ""
"The ``NumberDecimal()`` constructor accepts the ``decimal`` value as a "
"string:"
msgstr ""

#: ../source/core/shell-types.txt:230 ../source/core/shell-types.txt:249
#: ../source/core/shell-types.txt:262
msgid "The value is stored in the database as follows:"
msgstr ""

#: ../source/core/shell-types.txt:236
msgid ""
"The ``NumberDecimal()`` constructor also accepts ``double`` values from "
"the :binary:`~bin.mongo` shell (i.e. without quotes), although this is "
"not recommended due to the risk of losing precision. The constructor "
"creates a binary-based ``double`` precision representation of the "
"decimal-based parameter (potentially losing precision), then converts "
"that value to a ``decimal`` value with a precision of 15 digits. The "
"following example passes the value implicitly as a ``double`` and shows "
"how it is created with a precision of 15 digits:"
msgstr ""

#: ../source/core/shell-types.txt:255
msgid ""
"The following example passes the value implicitly as a ``double`` and "
"shows how a loss of precision can occur:"
msgstr ""

#: ../source/core/shell-types.txt:269
msgid ""
"To use the ``decimal`` data type with a :ecosystem:`MongoDB driver "
"</drivers/>`, be sure to use a driver version that supports it."
msgstr ""

#: ../source/core/shell-types.txt:274
msgid "Equality and Sort Order"
msgstr ""

#: ../source/core/shell-types.txt:276
msgid ""
"Values of the ``decimal`` type are compared and sorted with other numeric"
" types based on their actual numeric value.  Numeric values of the "
"binary-based ``double`` type generally have approximate representations "
"of decimal-based values and may not be exactly equal to their ``decimal``"
" representations, so use the ``NumberDecimal()`` constructor when "
"checking the equality of ``decimal`` values. Consider the following "
"examples with the following documents in the ``numbers`` collection:"
msgstr ""

#: ../source/core/shell-types.txt:293
msgid ""
"When the queries from the table below are plugged into the "
"``db.numbers.find(<query>)`` method, the following results are returned:"
msgstr ""

#: ../source/core/shell-types.txt:301
msgid "Query"
msgstr ""

#: ../source/core/shell-types.txt:302
msgid "Results"
msgstr ""

#: ../source/core/shell-types.txt:304
msgid "**{ \"val\": 9.99 }**"
msgstr ""

#: ../source/core/shell-types.txt:305
msgid "**{ \"_id\": 2, \"val\": 9.99, \"description\": \"Double\" }**"
msgstr ""

#: ../source/core/shell-types.txt:307
msgid "**{ \"val\": NumberDecimal( \"9.99\" ) }**"
msgstr ""

#: ../source/core/shell-types.txt:308
msgid ""
"**{ \"_id\": 1, \"val\": NumberDecimal( \"9.99\" ), \"description\": "
"\"Decimal\" }**"
msgstr ""

#: ../source/core/shell-types.txt:310
msgid "**{ val: 10 }**"
msgstr ""

#: ../source/core/shell-types.txt
msgid "**{ \"_id\": 3, \"val\": 10, \"description\": \"Double\" }**"
msgstr ""

#: ../source/core/shell-types.txt
msgid "**{ \"_id\": 4, \"val\": NumberLong(10), \"description\": \"Long\" }**"
msgstr ""

#: ../source/core/shell-types.txt
msgid ""
"**{ \"_id\": 5, \"val\": NumberDecimal( \"10.0\" ), \"description\": "
"\"Decimal\" }**"
msgstr ""

#: ../source/core/shell-types.txt:315
msgid "**{ val: NumberDecimal( \"10\" ) }**"
msgstr ""

#: ../source/core/shell-types.txt:321
msgid ""
"The first query, ``{ \"val\": 9.99 }``, implicitly searches for the "
"``double`` representation of ``9.99`` which is not equal to the "
"``decimal`` representation of the value."
msgstr ""

#: ../source/core/shell-types.txt:325
msgid ""
"The ``NumberDecimal()`` constructor is used to query for the document "
"with the ``decimal`` representation of ``9.99``. Values of the ``double``"
" type are excluded because they do not match the exact value of the "
"``decimal`` representation of ``9.99``."
msgstr ""

#: ../source/core/shell-types.txt:330
msgid ""
"Matching values of all numeric types are returned when querying for whole"
" numbers. For example, querying for a ``double`` representation of ``10``"
" will include a ``decimal`` representation of ``10.0`` in the results and"
" vice versa."
msgstr ""

#: ../source/core/shell-types.txt:336
msgid "Checking for ``decimal`` Type"
msgstr ""

#: ../source/core/shell-types.txt:338
msgid ""
"To test for ``decimal`` type, use the :query:`$type` operator with the "
"string alias ``\"decimal\"`` or ``19``, the numeric code for the "
"``decimal`` type."
msgstr ""

#: ../source/core/shell-types.txt:349
msgid "Check Types in the ``mongo`` Shell"
msgstr ""

#: ../source/core/shell-types.txt:351
msgid ""
"To determine the type of fields, the :binary:`~bin.mongo` shell provides "
"the ``instanceof`` and ``typeof`` operators."
msgstr ""

#: ../source/core/shell-types.txt:356
msgid "``instanceof``"
msgstr ""

#: ../source/core/shell-types.txt:358
msgid ""
"``instanceof`` returns a boolean to test if a value is an instance of "
"some type."
msgstr ""

#: ../source/core/shell-types.txt:361
msgid ""
"For example, the following operation tests whether the ``_id`` field is "
"an instance of type ``ObjectId``:"
msgstr ""

#: ../source/core/shell-types.txt:368
msgid "The operation returns ``true``."
msgstr ""

#: ../source/core/shell-types.txt:371
msgid "``typeof``"
msgstr ""

#: ../source/core/shell-types.txt:373
msgid "``typeof`` returns the type of a field."
msgstr ""

#: ../source/core/shell-types.txt:375
msgid ""
"For example, the following operation returns the type of the ``_id`` "
"field:"
msgstr ""

#: ../source/core/shell-types.txt:382
msgid ""
"In this case ``typeof`` will return the more generic ``object`` type "
"rather than ``ObjectId`` type."
msgstr ""

#~ msgid ""
#~ "The :program:`mongo` shell provides various"
#~ " options to return the date, either"
#~ " as a string or as an object:"
#~ msgstr ""

#~ msgid ""
#~ "``Date()`` constructor which returns an "
#~ "``ISODate`` object when used with the"
#~ " ``new`` operator."
#~ msgstr ""

#~ msgid ""
#~ "``ISODate()`` constructor which returns an "
#~ "``ISODate`` object when used with *or*"
#~ " without the ``new`` operator."
#~ msgstr ""

#~ msgid "Consider the following examples:"
#~ msgstr ""

#~ msgid ""
#~ "To get the date as an ``ISODate``"
#~ " object, instantiate a new instance "
#~ "using the ``Date()`` constructor with "
#~ "the ``new`` operator, as in the "
#~ "following example:"
#~ msgstr ""

#~ msgid "The result is the value of ``myDateObject``:"
#~ msgstr ""

#~ msgid "The operation returns ``object``."
#~ msgstr ""

#~ msgid ""
#~ "To get the date as an ``ISODate``"
#~ " object, instantiate a new instance "
#~ "using the ``ISODate()`` constructor *without*"
#~ " the ``new`` operator, as in the "
#~ "following example:"
#~ msgstr ""

#~ msgid "The result is the value of ``myDateObject2``:"
#~ msgstr ""

#~ msgid ""
#~ "The :program:`mongo` shell provides the "
#~ "``ObjectId()`` wrapper class around "
#~ ":term:`ObjectId` data types. To generate "
#~ "a new ObjectId, use the following "
#~ "operation in the :program:`mongo` shell:"
#~ msgstr ""

#~ msgid ""
#~ "By default, the :program:`mongo` shell "
#~ "treats all numbers as floating-point "
#~ "values. The :program:`mongo` shell provides"
#~ " the ``NumberLong()`` class to handle "
#~ "64-bit integers."
#~ msgstr ""

#~ msgid "The ``NumberLong()`` constructor accepts the long as a string:"
#~ msgstr ""

#~ msgid ""
#~ "The following examples use the "
#~ "``NumberLong()`` class to write to the"
#~ " collection:"
#~ msgstr ""

#~ msgid ""
#~ "To determine the type of fields, "
#~ "the :program:`mongo` shell provides the "
#~ "following operators:"
#~ msgstr ""

#~ msgid ""
#~ "``instanceof`` returns a boolean to test"
#~ " if a value has a specific "
#~ "type."
#~ msgstr ""

#~ msgid "Example"
#~ msgstr ""

#~ msgid "Consider the following operations using ``instanceof`` and ``typeof``:"
#~ msgstr ""

#~ msgid ""
#~ "The following operation tests whether "
#~ "the ``_id`` field is of type "
#~ "``ObjectId``:"
#~ msgstr ""

#~ msgid "The following operation returns the type of the ``_id`` field:"
#~ msgstr ""

# 8a6c10a0cf3a4abd828f3debeaa0c596
#~ msgid ""
#~ "MongoDB :term:`BSON` provides support for "
#~ "additional data types than :term:`JSON`. "
#~ ":doc:`Drivers </applications/drivers>` provide "
#~ "native support for these data types "
#~ "in host languages and the "
#~ ":program:`mongo` shell also provides several"
#~ " helper classes to support the use"
#~ " of these data types in the "
#~ ":program:`mongo` JavaScript shell. See "
#~ ":doc:`/reference/mongodb-extended-json` for "
#~ "additional information."
#~ msgstr ""

# d91683f381f1492fb23246706a437762
#~ msgid "See"
#~ msgstr ""

# 81045f9a6fe144279dff83bba85b35e1
#~ msgid ""
#~ "Use :update:`$inc` to increment the "
#~ "``calc`` field by ``5``, which the "
#~ ":program:`mongo` shell treats as a "
#~ "float:"
#~ msgstr ""

# 8fe6e470ce9d4a81840953d513a8b94d
#~ msgid ""
#~ "By default, the :program:`mongo` shell "
#~ "treats all numbers as floating-point "
#~ "values. The :program:`mongo` shell provides"
#~ " the ``NumberInt()`` constructor to "
#~ "explicitly specify 32-bit integers."
#~ msgstr ""

#~ msgid ""
#~ "The :program:`mongo` shell provides various"
#~ " methods to return the date, either"
#~ " as a string or as a ``Date``"
#~ " object:"
#~ msgstr ""

#~ msgid ""
#~ "Internally, ``Date`` objects are stored "
#~ "as a 64 bit integer representing "
#~ "the number of milliseconds since the "
#~ "Unix epoch (Jan 1, 1970), which "
#~ "results in a representable date range"
#~ " of about 290 millions years into "
#~ "the past and future."
#~ msgstr ""

#~ msgid ""
#~ "The :program:`mongo` shell wrap objects "
#~ "of ``Date`` type with the ``ISODate``"
#~ " helper; however, the objects remain "
#~ "of type ``Date``."
#~ msgstr ""

#~ msgid ""
#~ "The :program:`mongo` shell provides the "
#~ "``ObjectId()`` wrapper class around the "
#~ ":term:`ObjectId` data type. To generate "
#~ "a new ObjectId, use the following "
#~ "operation in the :program:`mongo` shell:"
#~ msgstr ""

#~ msgid ""
#~ "By default, the :program:`mongo` shell "
#~ "treats all numbers as floating-point "
#~ "values. The :program:`mongo` shell provides"
#~ " the ``NumberLong()`` wrapper to handle "
#~ "64-bit integers."
#~ msgstr ""

#~ msgid ""
#~ "To determine the type of fields, "
#~ "the :program:`mongo` shell provides the "
#~ "``instanceof`` and ``typeof`` operators."
#~ msgstr ""

