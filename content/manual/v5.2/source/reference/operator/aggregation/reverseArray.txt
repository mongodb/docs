===========================
$reverseArray (aggregation)
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol
   
Definition
----------

.. expression:: $reverseArray

   .. versionadded:: 3.4
   
   Accepts an array expression as an argument and returns an array with the
   elements in reverse order.

   :expression:`$reverseArray` has the following :ref:`operator
   expression syntax <agg-quick-ref-operator-expressions>`:

   .. code-block:: javascript

      { $reverseArray: <array expression> }

   The argument can be any valid :ref:`expression
   <aggregation-expressions>` as long as it resolves to an array.

Behavior
--------

.. include:: /includes/extracts/agg-expression-null-operand-reverseArray.rst

``$reverseArray`` returns an empty array when the argument is an empty array.

If the argument contains subarrays, ``$reverseArray`` only operates on the top level array elements and will not reverse the contents of subarrays.

.. list-table::
   :header-rows: 1
   :widths: 65 35 
   :class: border-table

   * - Example [#literal]_
     - Results
      
   * - .. code-block:: javascript
          :copyable: false 

          { $reverseArray: { $literal: [ 1, 2, 3 ] } }
     - ``[ 3, 2, 1 ]``
   
   * - .. code-block:: javascript
          :copyable: false 
         
          { $reverseArray: 
             { $slice:  [ [ "foo", "bar", "baz", "qux" ], 1, 2 ] } }
          }
     - ``[ "baz", "bar" ]``
   
   * - .. code-block:: javascript
          :copyable: false 

          { $reverseArray: null }

     - ``null``
      
   * - .. code-block:: javascript
          :copyable: false 

          { $reverseArray: { $literal: [ ] } }

     - ``[ ]``

   * - .. code-block:: javascript
          :copyable: false 

          { $reverseArray: { $literal: [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] } }
     - ``[ [ 4, 5, 6 ], [ 1, 2, 3 ] ]``

.. [#literal]

   The examples in the table take a literal argument. To avoid parsing
   ambiguity if the literal argument is an array, you must wrap the
   literal array in a :expression:`$literal` expression or keep the
   outer array that designates the argument list (e.g. ``[ [ 1, 2, 3 ]
   ]`` ) to pass in the literal array ``[1, 2, 3]``.

Example
-------

A collection named ``users`` contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "name" : "dave123", "favorites" : [ "chocolate", "cake", "butter", "apples" ] }
   { "_id" : 2, "name" : "li", "favorites" : [ "apples", "pudding", "pie" ] }
   { "_id" : 3, "name" : "ahn", "favorites" : [ ] }
   { "_id" : 4, "name" : "ty" }

The following example returns an array containing the elements of
the ``favorites`` array in reverse order:

.. code-block:: javascript

   db.users.aggregate([
      {
        $project:
         {
            name: 1,
            reverseFavorites: { $reverseArray: "$favorites" }
         }
      }
   ])

The operation returns the following results:

.. code-block:: javascript

   { "_id" : 1, "name" : "dave123", "reverseFavorites" : [ "apples", "butter", "cake", "chocolate" ] }
   { "_id" : 2, "name" : "li", "reverseFavorites" : [ "pie", "pudding", "apples" ] }
   { "_id" : 3, "name" : "ahn", "reverseFavorites" : [ ] }
   { "_id" : 4, "name" : "ty", "reverseFavorites" : null }
