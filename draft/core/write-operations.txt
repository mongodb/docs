================
Write Operations
================

.. default-domain:: mongodb

All operations that create or modify data in the MongoDB instance are
write operations. MongoDB represents data as :term:`BSON documents
<document>` stored in a collection :term:`collections
<collection>`. Write operations target a single collection and are
atomic on the level of a single document: no single write operation
can atomically affect more than one document or more than one
collection.

This document describes the syntax of all write operations in MongoDB,
and describes their operation, and strategies increasing the
efficiency of writes in applications.

.. index:: write operators
.. _write-operations-operators:

Write Operators
---------------

For information on write operators and how to write data to a MongoDB
database, see the following pages:

- :doc:`/applications/create`
- :doc:`/applications/update`
- :doc:`/applications/delete`

For information on specific methods in the :program:`mongo` shell used
for write operations, see the following:

- :method:`db.collection.insert()`
- :method:`db.collection.update()`
- :method:`db.collection.save()`
- :method:`db.collection.findAndModify()`
- :method:`db.collection.remove()`
- :method:`db.collection.delete()`

For information on how to perform write operations from within an
application, see the :doc:`/applications/drivers` documentation or the
documentation for your client library.

.. index:: write concern
.. _write-operations-write-concern:

Write Concern
-------------

.. _write-concern-considerations:

Operational Considerations and Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clients issue all write operations with some level of :term:`Write
concern <write concern>`, which describes level of concern or the kind
of guarantee the server will provide in its response to a write
operation. Consider the following levels of conceptual write concern: 

- *none*: Write operations are not acknowledged, and may be lost if
  there is a connection error that the client is not yet aware of, or
  if the :program:`mongod` produces an exception (e.g. a duplicate key
  exception for :ref:`unique indexes <index-type-unique>`.) While this
  operation is efficient because it does not require the database to
  respond to every write operation, it also incurs a significant risk
  about the persistence and durability of the data.

  Before the releases outlined in :ref:`driver-write-concern-change`,
  this was the default write concern.
  
- *receipt acknowledgment*: The :program:`mongod` will confirm
  receipt of the write operation, allowing the client to catch
  network, duplicate key, and other exceptions. After the releases
  outlined in :ref:`driver-write-concern-change`, this is the default
  write concern. [#default-write-concern]_
  
- *journal commit*: The :program:`mongod` will confirm the write
  operation only after it has written operation to the
  :term:`journal`. This confirms that the write operation can survive
  a :program:`mongod` shutdown and ensures that the write operation is
  durable. 

  While receipt acknowledgment provides the fundamental basis
  for write concern, without requiring a journal commit in the write
  concern, there is an up-to 100 millisecond window between journal
  commits where the write operation is not fully durable. Require
  journal commit as part of the write concern to provide this
  durability guarantee.

:term:`Replica sets <replica set>` add an additional layer of
consideration for write concern. Basic write concerns level affect the
write operation on only one :program:`mongod` instance. The ``w``
argument to :dbcommand:`getLastError` makes it possible to guarantee
that the write operation has propagated to the members of a replica
set. See the :ref:`Write Concern for Replica Sets
<replica-set-write-concern>` for more information.


.. [#default-write-concern] The default write concern is to call
   :dbcommand:`getLastError` with no arguments. For replica sets with
   :data:`getLastErrorDefaults <settings.getLastErrorDefaults>`  
   settings, the default write concern will be whatever 
   :data:`getLastErrorDefaults <settings.getLastErrorDefaults>`
   defines. If :data:`getLastErrorDefaults <settings.getLastErrorDefaults>`
   defines no default write concern, :dbcommand:`getLastError` will
   provide basic receipt acknowledgment.

.. _write-concern-operation:
.. _write-concern-internals:

Internal Operation of Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To provide write concern, :doc:`drivers </applications/drivers>` issue
the :dbcommand:`getLastError` command after a write opeation and
receive a document with information about the last operation. The this
document's ``err`` field contains either:

- ``null``, which indicates write operations have completed
  successfully, or

- a description of the last error encountered.

The definition of a "successful write" depends on the arguments
specified to :dbcommand:`getLastError` or in replica sets the
configuration of :data:`getLastErrorDefaults <settings.getLastErrorDefaults>`.
When deciding on what level of write concern your application needs,
become familiar with the :ref:`write-concern-considerations`. 

The :dbcommand:`getLastError` has the following options, that you can
use to define write concern requirements.

- ``j`` or "journal" option

  This option confirms that the :program:`mongod` instance has written
  the data to the on-disk journal and ensures data is not lost if the
  :program:`mongod` instance shuts down unexpectedly. Set to ``true`` to
  enable, as shown in the following example:

  .. code-block:: javascript

     db.runCommand( { getLastError: 1, j: "true" } )

- ``w`` option

  This option provides write concern operations for :term:`replica
  sets <replica set>` *and* is also used to disable write concern
  entirely. By default, the ``w`` option is set to ``1``, which
  provides basic receipt acknowledgment on a single :program:`mongod`
  instance or on the :term:`primary` in a replica set.

  The ``w`` option takes the following values:

  - ``-1``: 

    Disables all acknowledgment of write operations, including
    networking errors.

  - ``0``:

    Disables basic acknowledgment of write operations, but does
    pass information about networking errors to the application.

    .. note:: If you disable basic operation acknowledgment write
       concern but enable the journal commit write concern, as
       in the following operation: 

       .. code-block:: javascript

          db.runCommand( { getLastError: 1, w: 0, j: "true" } )

       The setting with the ``j`` (journal) prevails, which provides
       acknowledgment of write operations from a single :program:`mongod`
       instance as well as confirmation of the journal commit. 

  - ``1``:

    Provides acknowledgment of write operations on a standalone
    :program:`mongod` or the :term:`primary` in a replica set.

  - *A number greater than 1*:

    Guarantees that write write operations have propagated
    successfully to the specified number of replica set members
    including the primary. If you set ``w`` to a number that is
    greater than the number of set members that hold data, MongoDB
    waits for the non-existent members become available, which means
    MongoDB blocks indefinitely.

  - ``majority``:

    Confirms that write operations have propagated to the majority of
    configured replica set nodes must acknowledge the write operation
    before it succeeds. This ensures that write operation will *never*
    be subject to a rollback in the course of normal operation, and
    furthemore allows you to prevent hard coding assumptions about the
    size of your replica set into your application.

  - *A tag set*: 

    By specifying a :ref:`tag set
    <replica-set-configuration-tag-sets>` you can have much more fine
    grained control over which members of the replica set must
    acknowledge a write operation to satisfy the required level of
    write concern.

For more information on write concern and replica sets, see :ref:`Write
Concern for Replica Sets <replica-set-write-concern>` for more information..

In sharded clusters, :program:`mongos` instances will pass write
concern on to the shard :program:`mongod` instances.

.. _write-operations-bulk-insert:

Bulk Inserts
------------

In some situations you may need to insert or ingest a large amount of
data into a MongoDB database. These *bulk inserts*, have some
special considerations that are different from other write
operations.

The :method:`insert() <db.collection.insert()>` method, when passed an
array of documents will perform a "bulk insert," and insert each
document separately. :doc:`Drivers </applications/drivers>` each
provide their own interface for this kind of operation.

.. versionadded:: 2.2
   :method:`insert() <db.collection.insert()>` in the :program:`mongo`
   shell gained support for bulk inserts in version 2.2.   
   
Bulk insert can significantly increase performance by distributing
:ref:`write concern <write-operations-write-concern>` costs. In the
drivers, you can configure write concern for batches rather than on a
per-document level. 

Drivers also have a ``ContinueOnError`` option in their insert
operation, so that the bulk operation will continue to insert
remaining documents in a batch even if an insert fails.

.. note:: 
   
   .. versionadded::  2.0 
      Support for ``ContinueOnError`` depends on version 2.0 of the
      core :program:`mongod` and :program:`mongos` components.

If the bulk insert process generates more than one error in a batch
job, the client will only receive the most recent error. All bulk
operations to a :term:`sharded collection` run with
``ContinueOnError``, which applications cannot disable. See
:ref:`sharding-bulk-inserts` section for more information on
consideration for bulk inserts in sharded clusters.

For more information see your :doc:`driver documentation
</applications/drivers>` for details on performing bulk inserts in
your application. Also consider the following resources:
:ref:`write-operations-sharded-clusters`,
:ref:`sharding-bulk-inserts`, and
:doc:`/administration/import-export`.

.. _write-operations-indexing:

Indexing
--------

After every insert, update, or delete operation, MongoDB must update
*every* index associated with the collection in addition to the data
itself. Therefore, every index on a collection adds some amount of
overhead for the performance of write operations.

In general, the performance gains that indexes realize for *read
operations* are worth the insertion penalty; however, when optimizing
write performance be careful when creating new indexes and always
evaluate the indexes on the collection and ensure that your quires are
actually using these indexes.

For more information on indexes in MongoDB consider :doc:`/indexes`
and :doc:`/applications/indexes`.

.. _write-operations-isolation:

Isolation
---------

When a single write operation modifies multiple documents, the
operation as a whole is not atomic, and other operations may
interleave. The modification of a single document, or record, is always
atomic, even if the write operation modifies multiple sub-document
*within* the single record.

No other operations are atomic; however, you can attempt to isolate a
write operation that affects multiple documents using the
:doc:`isolation operator </reference/operator/atomic>`.

To isolate a sequence of write operations from other read and write
operations, see :doc:`/tutorial/perform-two-phase-commits`.

Architecture
------------

.. _write-operations-replica-sets:

Replica Sets
~~~~~~~~~~~~

In :term:`replica sets <replica set>`, all write operations go to the
set's :term:`primary`, which applies the write operation then records
the operations on the primary's operation log or :term:`oplog`. The
oplog is a reproducible sequence of operations to the data
set. :term:`Secondary` members of the set are always replicating the
oplog and applying the operations to themselves in an asynchronous
process.

Large volumes of write operations, particularly bulk operations may
create situations where secondary members have a difficult time
applying replicating operations from the primary fast enough, which
can cause their state to fall behind that of the primary. Secondaries
that are significantly behind the primary present problems for normal
operation of the replica set, particularly :ref:`failover
<replica-set-failover-administration>` in the form of :ref:`rollbacks
<replica-set-rollback>` as well as general 
:ref:`read consistency <replica-set-consistency>`.

To help avoid this issue, you can customize :ref:`write concern
<write-operations-write-concern>` to return confirm confirmation of
the write operation to another member [#write-concern-throttling]_ of
the replica set ``100`` or ``1,000``) operations. This provides an
opportunity for secondaries to catch up with the primary. Write
concern can slow the overall progress of write operations but ensure
that the secondaries can maintain a largely current state with respect
to the primary.

For more information on replica sets and write operations, see
:ref:`replica-set-write-concern`, :ref:`replica-set-oplog-sizing`,
:ref:`replica-set-oplog`, and :ref:`replica-set-procedure-change-oplog-size`. 

.. [#write-concern-throttling] By calling :dbcommand:`getLastError`
   intermittently with a ``w`` value of ``2`` or ``majority`` to
   :dbcommand:`getLastError` will slow the throughput of the write
   operation but will prevent bulk inserts.

.. _write-operations-sharded-clusters:

Sharded Clusters
~~~~~~~~~~~~~~~~

In a :term:`sharded cluster`, MongoDB directs a given write operation to
a :term:`shard` and then performs the write on a particular
:term:`chunk` on that shard. Shards and chunks are range-based.
:term:`Shard keys <shard keys>` affect how MongoDB distributes documents
among shards. Choosing the correct shard key can have a great impact on
the performance, capability, and functioning of your database and
cluster.

For more information, see :doc:`/administration/sharding` and
:ref:`write-operations-bulk-insert`.
