.. _create-project-schema-file:

====================================
Load a Data Definition Language File
====================================

.. meta::
   :description: Create a project in Relational Migrator by importing schema files, selecting tables, and configuring initial mappings for MongoDB schema migration.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can create a project by submitting schema files from your relational 
system. Creating a project is the first step in the migration process. 
When creating a project with schema files you:

- Export a Data Definition Language (DDL) file from your relational system.

- Import the DDL file into {+rel-mig+}.

- Select the database, schema, and tables that are part of the migration.

About this Task
---------------

{+rel-mig+} only parses statements related to table, keys, and indexes. 
Any other non-DDL statements are ignored.

The following workbench tools are documented for exporting table DDL files:

- Oracle SQL Developer
- SQL Server Management Studio
- MySQL Workbench
- pgAdmin

You can use DDL files for project creation when network connectivity or permissions
to your relational database are a consideration.

Although you can create a project and map schemas from a DDL file, {+rel-mig+} 
still connects to the relational database to run migration jobs. 

.. include:: /includes/project-initial-mappings-att.rst

Before you Begin
----------------

To create a project from schema files, you must export your schema files 
from your source relational system. Follow the instructions below
to generate DDL files from your relational system.


.. tabs::

   .. tab:: Oracle
      :tabid: oracle-ddl

      1. Open :guilabel:`Oracle SQL Developer`.

      #. In the main menu, select :guilabel:`Tools` then :guilabel:`Database Export`.

      #. Select the database connection.

      #. Uncheck :guilabel:`Export Data`. 

      #. On the :guilabel:`Specify Data` page, click :guilabel:`Lookup` and choose the 
         tables you want to include.

   .. tab:: SQL Server
      :tabid: sql-ddl

      1. Open :guilabel:`SQL Server Management Studio (SSMS)`.

      #. Under :guilabel:`Server Explorer`, right-click the database.

      #. Select :guilabel:`Tasks` then :guilabel:`Generate Scripts`.

      #. Select :guilabel:`Save script as file` and specify a file path.

   .. tab:: MySQL
      :tabid: mysql-ddl

      1. Open :guilabel:`MySQL Workbench`.

      #. In the main menu, select :guilabel:`Server` then :guilabel:`Data Export`.

      #. Select the schema objects to export.

      #. Choose :guilabel:`Dump Structure Only`, :guilabel:`Export to Self-Contained File` 
         and :guilabel:`Include Create Schema` options.

   .. tab:: PostgreSQL
      :tabid: postgresql-ddl

      1. Open :guilabel:`pgAdmin`.

      #. Right-click the :guilabel:`Database` then :guilabel:`Backup`.

      #. Enter a path, a filename, and select :guilabel:`Plain` format.

      #. Select :guilabel:`Dump options` and enable :guilabel:`Only schema`.

      #. Select :guilabel:`Options` and enable :guilabel:`Include CREATE DATABASE statement`.

   .. tab:: Sybase ASE
      :tabid: sybase-ddl

      Importing DDL files with Sybase ASE is not supported.

   .. tab:: DB2
      :tabid: db2-ddl

      Importing DDL files with DB2 is not supported.

Steps
-----

1. Click :guilabel:`New Project` at the top-right of the {+rel-mig+} home 
   screen.

#. Click the :guilabel:`Import .SQL file` button.

#. Select a database type. The {+rel-mig+} currently supports migrating
   from these database types: 

   - MySQL
   - Oracle
   - PostgreSQL
   - SQL Server

#. Choose or drag and drop a DDL statement file and click :guilabel:`Import`.

#. From the :guilabel:`Select tables` screen, indicate the tables you want to migrate, 
   and click :guilabel:`Next`.

   The following table explains the different ways you can select tables to migrate: 

   .. list-table::
      :header-rows: 1
      :widths: 25 75

      * - Target
        - Action

      * - All tables within a database
        - Click the check mark for the target database.

      * -  All tables within a schema
        - Expand the target database and click the check mark for the target schema.

      * - Specific tables within a schema
        - Expand the target database and schema. Select the target tables individually.
    
      * - Specific table names
        - Use the :guilabel:`Filter` bar above the :guilabel:`Relational Schema` list.

#. Choose a :guilabel:`Global casing` option for collection names. 
   
   This option affects the names of your collections created from the tables in 
   your relational database:

   - :guilabel:`Keep Original`: Keep the original casing used in your relational
     database table name.

   - :guilabel:`Override with Global Casing`: Override the original table name
     with a global casing convention.

     - ``camelCase``
     - ``TitleCase``
     - ``kebab-case``
     - ``snake_case``
     - ``UPPER_SNAKE_CASE``

#. Choose an :guilabel:`Initial mappings` option for your MongoDB schema.

   .. include:: /includes/project-initial-mappings.rst

#. Enter a name for your project.

#. Click :guilabel:`Done`.

Next Steps
----------

- :ref:`Create Mapping Rules From Relational <create-rule-relational>`

- :ref:`Create Mapping Rules To MongoDB <create-rule-mongodb>`
