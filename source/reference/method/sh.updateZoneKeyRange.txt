=======================
sh.updateZoneKeyRange()
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: sh.updateZoneKeyRange(namespace, minimum, maximum, zone)

   .. versionadded:: 3.4

   Associates a range of shard key values with a :term:`zone`.
   :method:`sh.updateZoneKeyRange()` takes the following arguments:

   .. include:: /includes/apiargs/method-sh.updateZoneKeyRange-param.rst

   Only issue :method:`sh.updateZoneKeyRange()` when connected to a
   :binary:`~bin.mongos` instance.

Behavior
--------

You cannot create a range of shard key values whose lower and upper boundaries
overlap with an existing range for the sharded collection. For example, given
an existing range of ``1`` to ``10``, you cannot create a new range of ``5``
to ``20``, as the new range would overlap with the existing range.

A zone can have multiple ranges of data associated with it, but a range
can at most be associated with a single zone.

See the :ref:`zone <zone-sharding>` manual page for more information on zones
in sharded clusters.

Balancer
~~~~~~~~

After associating a range to a zone, the :ref:`balancer
<sharding-balancing-internals>` must first run in order to migrate any chunks
whose ranges are covered by the zone to shards inside of that zone. Until
balancing completes, some chunks may reside on the wrong shard given the
configured zones for the sharded cluster. See :ref:`zone-sharding-balancer`
for more information.

See the :ref:`sharded cluster balancer <sharding-balancing>` manual page for
more information on how migrations work in a sharded cluster.

Bounds
~~~~~~

.. include:: /includes/fact-shard-ranges-inclusive-exclusive.rst

Dropped Collections
~~~~~~~~~~~~~~~~~~~

If you add a zone range to a collection using :method:`sh.updateZoneKeyRange()` and
then later drop the collection or its database, MongoDB does not remove the
zone association. If you later create a new collection with the same name, the
old zone association applies to the new collection.

Security
~~~~~~~~

For sharded clusters running with :ref:`authentication <authentication>`, you
must authenticate as a user whose privileges include:

- :authaction:`find` on the ``config.shards`` collection or the ``config``
  database

- :authaction:`find` on the ``config.tags`` collection or the ``config``
  database

- :authaction:`update` on the ``config.tags`` collection or the ``config``
  database

The :authrole:`clusterAdmin` or :authrole:`clusterManager` built-in roles have
the appropriate permissions for issuing :method:`sh.updateZoneKeyRange()`. See
the documentation page for :ref:`Role-Based Access Control <authorization>`
for more information.

Example
-------

Given a sharded collection ``exampledb.collection`` with a shard key of ``{ a
: 1 }``, the following operation creates a range with a lower bound of ``1``
and an upper bound of ``10`` on the ``alpha`` zone:

.. code-block:: javascript

   sh.updateZoneKeyRange(
      "exampledb.collection",
      { a : 1 },
      { a : 10 },
      "alpha"
   )

The following operation removes the previously created range by passing
``null`` to the ``zone`` field.

.. code-block:: javascript

   sh.updateZoneKeyRange( 
      "exampledb.collection",
      { a : 1 },
      { a : 10 },
      null
   )

The ``min`` and ``max`` must match exactly the bounds of the target range.
The following operation attempts to remove the previously created range, but
specifies ``{ a : 0 }`` as the ``min`` bound:

.. code-block:: javascript

   sh.updateZoneKeyRange(
      "exampledb.collection",
      { a : 0 },
      { a : 10 },
      null
   )

While the range of ``{ a : 0 }`` and ``{ a : 10 }`` encompasses the existing
range, it is not an exact match and therefore :dbcommand:`updateZoneKeyRange`
does not remove anything.

Compound Shard Key
~~~~~~~~~~~~~~~~~~

Given a sharded collection ``exampledb.collection`` with a shard key of ``{ a
: 1, b : 1 }``, the following operation creates a range covering the lower
bound of ``{ a: 1, b : 1 }`` and an upper bound of ``{ a : 10, b : 10}`` and associates it
with the ``alpha`` zone:

.. code-block:: javascript

   sh.updateZoneKeyRange(
      "exampledb.collection",
      { a : 1, b : 1 },
      { a : 10, b : 10 },
      "alpha"
   )

If you wanted to create a range on values of ``b`` only, you must specify
the entire range of ``a`` when creating ranges. For example, the following
operations create two ranges on ``b`` and associates them to the
``beta`` zone.

.. note::

   The previously defined range conflicts with the ranges defined in this
   example. Issue the :method:`sh.removeRangeFromZone()` operation to remove an
   existing conflicting range.

.. code-block:: javascript

   sh.updateZoneKeyRange( 
      "exampledb.collection",
      { a : MinKey, b : 1 },
      { a : MaxKey, b: 10 },
      "alpha"
   );

   sh.updateZoneKeyRange( 
      "exampledb.collection",
      { a : MinKey, b : 10 },
      { a : MaxKey, b: 20 },
      "beta"
   );

:bsontype:`MinKey` always compares as lower than every other possible value,
while :bsontype:`MaxKey` always compares as higher than every other possible
value. Using these special values for the lower and upper bounds of the range
captures the entire possible value space of ``a``.

.. seealso:: :method:`sh.addShardToZone()`, :method:`sh.removeRangeFromZone()`
