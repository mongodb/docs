====
$and
====

.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: shell

.. meta::
   :description: Use the $and operator to perform a logical AND operation on expressions, selecting documents satisfying all conditions. MongoDB's query optimizer considers available indexes for optimization.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. query:: $and

   :query:`$and` performs a logical ``AND`` operation on an array of
   *one or more* expressions (``<expression1>``, ``<expression2>``, and
   so on) and selects the documents that satisfy *all* the expressions.

   .. note::

      MongoDB provides an implicit ``AND`` operation when specifying a
      comma separated list of expressions.

Compatibility
-------------

.. |operator-method| replace:: ``$and``

.. include:: /includes/fact-compatibility.rst

Syntax
------

The :query:`$and` has the following syntax:

.. code-block:: javascript
   
   { $and: [ { <expression1> }, { <expression2> } , ... , { <expressionN> } ] }

Behavior
--------

.. |and-or| replace:: ``$and``
.. |true-false| replace:: ``false``

When evaluating the clauses in the :query:`$and` expression, MongoDB's
query optimizer considers which indexes are available that could
help satisfy clauses of the :query:`$and` expression when
:ref:`selecting the best plan to execute <read-operations-query-optimization>`.
 
.. include:: /includes/and-or-behavior.rst

.. code-block:: javascript

   db.example.find( {
      $and: [
         { x: { $ne: 0 } },
         { $expr: { $eq: [ { $divide: [ 1, "$x" ] }, 3 ] } }
      ]
   } )

Examples
--------

``AND`` Queries With Multiple Expressions Specifying the Same Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider this query:

.. code-block:: javascript

   db.inventory.find( { $and: [ { price: { $ne: 1.99 } }, { price: { $exists: true } } ] } )

The query selects all documents in the ``inventory`` collection where:

- the ``price`` field value is not equal to ``1.99`` **and**
- the ``price`` field exists.

The query can be rewritten with an implicit ``AND`` operation that
combines the operator expressions for the ``price`` field:

.. code-block:: javascript

   db.inventory.find( { price: { $ne: 1.99, $exists: true } } )

``AND`` Queries With Multiple Expressions Specifying the Same Operator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider this query:

.. code-block:: javascript

   db.inventory.find( {
       $and: [
           { $or: [ { qty: { $lt : 10 } }, { qty : { $gt: 50 } } ] },
           { $or: [ { sale: true }, { price : { $lt : 5 } } ] }
       ]
   } )

The query selects all documents where:

- the ``qty`` field value is less than ``10`` or greater than ``50``, **and**
- the ``sale`` field value is equal to ``true`` **or** the ``price``
  field value is less than ``5``.

The query cannot use an implicit ``AND`` operation because it uses the
:query:`$or` operator more than once.

.. seealso::

   - :method:`~db.collection.find()`
   - :method:`~db.collection.updateMany()`
   - :query:`$ne`
   - :query:`$exists`
   - :update:`$set`
