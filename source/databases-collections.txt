.. _php-databases-collections:

=========================
Databases and Collections
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: table, row, organize, storage, code example

Overview
--------

In this guide, you can learn how to use MongoDB databases and
collections with the {+php-library+}.

MongoDB organizes data into a hierarchy of the following levels:

- **Databases**: Top-level data structures in a MongoDB deployment that store collections.
- **Collections**: Groups of MongoDB documents. They are analogous to tables in relational databases.
- **Documents**: Units that store literal data such as string, numbers, dates, and other embedded documents.
  For more information about document field types and structure, see the
  :manual:`Documents </core/document/>` guide in the {+mdb-server+} manual.

Access a Database
-----------------

Access a database by passing the database name to the ``MongoDB\Client::getDatabase()``
method.

The following example accesses a database named ``test_database``:

.. literalinclude:: /includes/databases-collections/databases-collections.php
    :language: php
    :dedent:
    :start-after: start-access-database
    :end-before: end-access-database

Alternatively, you can implicitly call the ``MongoDB\Client::__get()`` magic method on
a client object. This method allows you to select a database by using the syntax for
accessing a class property. The following example uses this shorthand syntax to access
the ``test_database`` database:

.. literalinclude:: /includes/databases-collections/databases-collections.php
    :language: php
    :dedent:
    :start-after: start-access-database-short
    :end-before: end-access-database-short

.. tip::

   To learn more about ``__get()`` and PHP magic methods, see the following resources:

   - :phpmethod:`MongoDB\Client::__get()` in the library API documentation
   - :php:`Magic Methods <language.oop5.magic>` in the PHP manual

.. _php-db-coll-access-collection:

Access a Collection
-------------------

Access a collection by using either of the following methods:

- ``MongoDB\Client::getCollection()``: Pass the database and collection names as 
  parameters
- ``MongoDB\Database::getCollection()``: Pass the collection name as a parameter

The following example accesses a collection named ``test_collection`` by using the 
``MongoDB\Database::getCollection()`` method:

.. literalinclude:: /includes/databases-collections/databases-collections.php
    :language: php
    :dedent:
    :start-after: start-access-collection
    :end-before: end-access-collection

.. tip::

   If the provided collection name does not already exist in the database,
   MongoDB implicitly creates the collection when you first insert data
   into it.

Alternatively, you can implicitly call the ``MongoDB\Database::__get()`` magic method on
a database object. This method allows you to select a collection by using the syntax for
accessing a class property. The following example uses this shorthand syntax to access
the ``test_collection`` collection:

.. literalinclude:: /includes/databases-collections/databases-collections.php
    :language: php
    :dedent:
    :start-after: start-access-collection-short
    :end-before: end-access-collection-short

To learn more, see the :phpmethod:`MongoDB\Database::__get()`
API documentation.

.. _php-db-coll-create-collection:

Create a Collection
-------------------

Pass a collection name to the ``MongoDB\Database::createCollection()`` method to
explicitly create a collection in a MongoDB database.

The following example creates a collection named ``example_collection``:

.. literalinclude:: /includes/databases-collections/databases-collections.php
    :language: php
    :dedent:
    :start-after: start-create-collection
    :end-before: end-create-collection

You can specify collection options, such as maximum size and document
validation rules, by passing them as an array to the ``createCollection()`` method.
For a full list of optional parameters, see the `API documentation
<{+api+}/method/MongoDBDatabase-createCollection/#parameters>`__.

Get a List of Collections
-------------------------

You can query for a list of collections in a database by calling the
``MongoDB\Database::listCollections()`` method. The method returns a
cursor containing all collections in the database and their associated metadata.

The following example calls the ``listCollections()`` method and iterates over
the returned iterator to print the collections from the :ref:`php-db-coll-access-collection`
and :ref:`php-db-coll-create-collection` examples:

.. io-code-block::
   :copyable:

   .. input:: /includes/databases-collections/databases-collections.php
      :language: php
      :start-after: start-find-collections
      :end-before: end-find-collections
      :dedent:

   .. output::
      :language: console
      :visible: false

      MongoDB\Model\CollectionInfo Object
      (
         [name] => example_collection
         [type] => collection
         ...
      )
      MongoDB\Model\CollectionInfo Object
      (
         [name] => test_collection
         [type] => collection
         ...
      )

Delete a Collection
-------------------

You can delete a collection from the database by using the ``MongoDB\Database::dropCollection()``
method.

The following example deletes the ``test_collection`` collection:

.. literalinclude:: /includes/databases-collections/databases-collections.php
    :language: php
    :dedent:
    :start-after: start-drop-collection
    :end-before: end-drop-collection

.. warning:: Dropping a Collection Deletes All Data in the Collection

   Dropping a collection from your database permanently deletes all
   documents and all indexes within that collection.

   Drop a collection only if you no longer need the data in it.

.. _php-config-read-write:

Configure Read and Write Operations
-----------------------------------

You can control how read and write operations run on replica sets
by specifying a read preference, read concern, or write concern.

By default, databases inherit read and write settings from the ``MongoDB\Client``
instance. Collections inherit these settings from the ``MongoDB\Client`` or
``MongoDB\Database`` instance on which the ``getCollection()`` method is called.
You can change these settings by passing an options array to the
``MongoDB\Client::getDatabase()``, ``MongoDB\Client::getCollection()``, or
``MongoDB\Database::getCollection()`` methods.

To learn more about setting a read preference, read concern, and write concern,
see the :ref:`php-read-write-pref` guide.

API Documentation
-----------------

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- :phpmethod:`MongoDB\Client::getDatabase()`
- :phpmethod:`MongoDB\Client::getCollection()`
- :phpmethod:`MongoDB\Database::getCollection()`
- :phpmethod:`MongoDB\Database::createCollection()`
- :phpmethod:`MongoDB\Database::listCollections()`
- :phpmethod:`MongoDB\Database::dropCollection()`
