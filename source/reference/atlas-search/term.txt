.. meta::
   :robots: noindex, nosnippet

.. _term-ref:

=================
term (Deprecated)
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: term

   The ``term`` operator specifies an unanalyzed search. The engine
   searches for the query terms exactly as they are indexed, with no
   :ref:`analyzer <analyzers-ref>` modifications at query time. Any
   analyzer which was used during the index creation still applies to
   the index, but the search itself does not use an analyzer.

   .. note:: 

      The ``term`` operator normalizes the query terms in the same way they 
      are normalized in the index. That is, when you use it with the 
      :ref:`ref-standard-analyzer`, the operator converts your query terms 
      to lower case. When you use it with the :ref:`ref-keyword-analyzer`, 
      the ``term`` operator performs an exact match on the field.
   
   ``term`` has the following syntax:
   
   .. code-block:: javascript
   
      { 
        $search: {  
          "index": <index name>, // optional, defaults to "default"
          "term": {
            "query": "<search-term>",
            "path": "<field-to-search>",
            "wildcard": <boolean>,
            "regex": <boolean>,
            "prefix": <boolean>,
            "fuzzy": { "maxEdits": <integer>, "prefixLength": <integer> },
            "score": <options>
          }
        }
      }
   
   .. list-table::
      :header-rows: 1
      :widths: 10 20 50 10 10
   
      * - Field
        - Type
        - Description
        - Required?
        - Default
   
      * - ``query``
        - string or array of strings
        - The term or terms to search for.
        - yes
        -
   
      * - ``path``
        - string or array of strings
        - The indexed field or fields to search. See :ref:`path
          construction <ref-path>` for more information.
        - yes
        -
   
      * - ``wildcard``
        - boolean
        - Enable wildcard searching. 

          .. note::

             The ``wildcard`` option is deprecated for the :ref:`term <term-ref>`
             operator. Use the :ref:`wildcard <wildcard-ref>` operator instead.
        - no
        - ``false``
   
      * - ``regex``
        - boolean
        - Enable regular expression searching. 

          .. note::

             The ``regex`` option is deprecated for the :ref:`term <term-ref>`
             operator. Use the :ref:`regex <regex-ref>` operator instead.
        - no
        - ``false``
   
      * - ``prefix``
        - boolean
        - Use the string specified in ``query`` as a prefix and search
          for any term which starts with it.

          .. note::

             The ``prefix`` option is deprecated for the :ref:`term <term-ref>`
             operator. Use the :ref:`wildcard <wildcard-ref>` or :ref:`regex
             <regex-ref>` operators instead.
        - no
        - ``false``

      * - ``fuzzy``
        - object
        - Enable fuzzy search. Find strings which are similar to the
          search term or terms.
        - no
        -

      * - ``fuzzy.maxEdits``
        - integer
        - Maximum number of single-character edits required to match the
          specified search term.
  
          .. note::
  
                 ``maxEdits`` has a maximum allowable value of ``2``.
        - no
        - ``2``
  
      * - ``fuzzy.prefixLength``
        - integer
        - Number of characters at the beginning of the result that
          must exactly match the search term.
        - no
        - ``0``

      * - ``score``
        - object
        - Modify the score assigned to matching search term results. Options are:

          - ``boost``: multiply the result score by the given number.

          - ``constant``: replace the result score with the given number.

        - no
        -

   .. important::
  
      The ``wildcard``, ``regex``, ``prefix`` and ``fuzzy`` options
      cannot be used in combination with each other.

Examples
--------

The following examples use a collection called ``fruit`` which contains
the following documents:

.. code-block:: json
   :linenos:

   {
     "_id" : 1,
     "type" : "apple",
     "description" : "Apples come in several varieties, including Fuji, Granny Smith, and Honeycrisp."
   },
   {
     "_id" : 2,
     "type" : "banana",
     "description" : "Bananas are usually sold in bunches of five or six."
   }

The ``fruit`` collection has an |fts| index on the ``description``
field which uses the :ref:`standard <ref-standard-analyzer>` analyzer.
The ``standard`` analyzer lower-cases all words and disregards common
stop words (``"the", "a", "and",`` etc).

Basic Example
~~~~~~~~~~~~~

The following |fts| example performs a basic search of the
``description`` field for the query term ``several``, using the
``term`` operator.

.. code-block:: javascript
   :linenos:

   db.fruit.aggregate([
     {
       $search: {
         "term": {
           "query": "several",
           "path": "description"
         }
       }
     }
   ])

The above query returns the document with ``_id: 1``, which has the
word ``several`` in the ``description`` field.

The following example performs a basic search of the ``description`` 
field for the query term ``Smith``. The ``standard`` analyzer,
which was used to create the index lower-cases all tokens, and the
``term`` operator also converts the query term to lower case.

.. code-block:: javascript
   :linenos:

   db.fruit.aggregate([
     {
       $search: {
         "term": {
           "query": "Smith",
           "path": "description"
         }
       }
     }
   ])

The above query returns the document with ``_id: 1``, which has the
word ``Smith`` in the ``description`` field.

Fuzzy Example
~~~~~~~~~~~~~

Use the ``fuzzy`` option to search for strings which are
similar to a term or terms which you specify.

The following query searches for strings which are within one
character of the strings ``fuj`` and ``bannas``.

- ``maxEdits`` field specifies that only one character change is
  allowed to match the query to the document.

- ``prefixLength`` field specifies that the first two characters
  of the query term may not be changed to match a result.

.. code-block:: javascript
   :linenos:

   db.fruit.aggregate([
     {
       $search: {
         "term": {
           "path": "description",
           "query": ["fuj", "bannas"],
           "fuzzy": { "maxEdits": 1, "prefixLength": 2 }
         }
       }
     },
     {
       $project: {
          "_id": 0,
          "description": 1
       }
     }
   ])

The above query finds both of the documents in the collection. The
``$project`` stage limits the output to the ``description`` field.

.. code-block:: json
   :copyable: false

   {
     "description" : "Bananas are usually sold in bunches of five or six."
   },
   {
     "description" : "Apples come in several varieties, including Fuji, Granny Smith, and Honeycrisp."
   }
