===========================
Current Operation Reporting
===========================

.. default-domain:: mongodb

.. versionchanged:: 2.2

Example Output
--------------

The :method:`db.currentOp()` helper in the :program:`mongo` shell
reports on the current operations running on the :program:`mongod`
instance. The operation returns the ``inprog`` array, which contains a
document for each in progress operation. Consider the following
example output:

.. code-block:: javascript

   {
     "inprog": [
                {
                        "opid" : 3434473,
                        "active" : <boolean>,
                        "secs_running" : 0,
                        "op" : "<operation>",
                        "ns" : "<database>.<collection>",
                        "query" : {
                        },
                        "client" : "<host>:<outgoing>",
                        "desc" : "conn57683",
                        "threadId" : "0x7f04a637b700",
                        "connectionId" : 57683,
                        "locks" : {
                                "^" : "w",
                                "^local" : "W",
                                "^<database>" : "W"
                        },
                        "waitingForLock" : false,
                        "msg": "<string>"
                        "numYields" : 0,
                        "progress" : {
                                "done" : <number>,
                                "total" : <number>
                        }
                        "lockStats" : {
                                "timeLockedMicros" : {
                                        "R" : NumberLong(),
                                        "W" : NumberLong(),
                                        "r" : NumberLong(),
                                        "w" : NumberLong()
                                },
                                "timeAcquiringMicros" : {
                                        "R" : NumberLong(),
                                        "W" : NumberLong(),
                                        "r" : NumberLong(),
                                        "w" : NumberLong()
                                }
                        }
                },
               ]
   }

.. optional::

   You may specify the ``true`` argument to :method:`db.currentOp()`
   to return a more verbose output including idle connections and
   system operations. For example:

   .. code-block:: javascript

      db.currentOp(true)

   Furthermore, active operations (i.e. where :data:`active` is
   ``true``) will return additional fields.

Operations
----------

You can use the :method:`db.killOp()` in conjunction with the
:data:`opid` field to terminate a currently running
operation. Consider the following JavaScript operations for the
:program:`mongo` shell that you can use to filter the output of
identify specific types of operations:

.. include:: /includes/example-filter-current-op.rst

Output Reference
----------------

.. data:: opid

   Holds an identifier for the operation. You can pass this value to
   :method:`db.killOp()` in the :program:`mongo` shell to terminate the
   operation.

.. data:: active

   A boolean value, that is ``true`` if the operation is currently running
   or ``false`` if the operation is queued and waiting for a lock to run.

.. data:: secs_running

   The duration of the operation in seconds. MongoDB calculates this
   value by subtracting the current time from the start time of the
   operation.

.. data:: op

   A string that identifies the type of operation. The possible values
   are:

   - ``insert``
   - ``query``
   - ``update``
   - ``remove``
   - ``getmore``
   - ``command``

.. data:: ns

   The :term:`namespace` the operation targets. MongoDB forms
   namespaces using the name of the :term:`database` and the name of
   the :term:`collection`.

.. data:: query

   A document containing the current operation's query. The document
   is empty for operations that do not have queries: ``getmore``,
   ``insert``, and ``command``.

.. data:: client

   The IP address (or hostname) and the ephemeral port of the client
   connection where the operation originates. If your ``inprog``
   array has operations from many different clients, use this string
   to relate operations to clients.

   For some commands, including :dbcommand:`findAndModify` and
   :method:`db.eval()`, the client will be ``0.0.0.0:0``, rather than
   an actual client.

.. data:: desc

   A description of the client. This string includes the
   :data:`connectionId`.

.. data:: threadId

   An identifier for the thread that services the operation and its
   connection.

.. data:: connectionId

   An identifier for the connection where the operation originated.

.. data:: locks

   .. versionadded:: 2.2
   
   The :data:`locks` document reports on the kinds of locks the
   operation currently holds. The following kinds of locks are possible:

   .. data:: locks.^

      :data:`locks.^` reports on the global lock state for the
      :program:`mongod` instance. The operation must hold this for
      some global phases of an operation.

   .. data:: locks.^local

      :data:`locks.^` reports on the lock for the ``local``
      database. MongoDB uses the ``local`` database for a number of
      operations, but the most frequent use of the ``local`` database
      is for the :term:`oplog` used in replication.

   .. data:: locks.^<database>

      :data:`locks.^<database>` reports on the lock state for the
      database that this operation targets.

   :data:`locks` replaces ``lockType`` in earlier versions.

.. data:: lockType

   *Removed in version 2.2.*
   
   Identifies the type of lock the operation currently holds. The
   possible values are:

   - ``read``
   - ``write``

.. data:: waitingForLock

   Returns a boolean value. :data:`waitingForLock` is ``true`` if the
   operation is waiting for a lock and ``false`` if the operation has
   the required lock.

.. data:: msg

   The :data:`msg` provides a message that describes the status and
   progress of the operation. In the case of indexing or mapReduce
   operations, the field reports the completion percentage.

.. data:: progress

   Reports on the progress of mapReduce or indexing operations. The
   :data:`progress` fields corresponds to the completion percentage in
   the :data:`msg` field. The :data:`progress` specifies the following
   information:
   
   .. data:: done
   
      Reports the number completed.
      
   .. data:: total
   
      Reports the total number.

.. data:: killed

   Reports ``true`` if the operation is killed.

.. data:: numYields

   :data:`numYields` is a counter that reports the number of times the
   operation has yielded to allow other operations to complete.

   Typically, operations yield when they need access to data that
   MongoDB has not yet fully read into memory. This allows
   other operations that have data in memory to complete quickly
   while MongoDB reads in data for the yielding operation.

.. data:: lockStats

   .. versionadded:: 2.2
   
   The :data:`lockStats` document reflects the amount of time the
   operation has spent both acquiring and holding
   locks. :data:`lockStats` reports data on a per-lock type, with the
   following possible lock types:

   - ``R`` represents the global read lock,
   - ``W`` represents the global write lock,
   - ``r`` represents the database specific read lock, and
   - ``w`` represents the database specific write lock.

    .. data:: timeLockedMicros

       The :data:`timeLockedMicros` document reports the amount of
       time the operation has spent holding a specific lock.

       .. data:: timeLockedMicros.R

          Reports the amount of time in microseconds the operation has held the
          global read lock.

       .. data:: timeLockedMicros.W

          Reports the amount of time in microseconds the operation has held the
          global write lock.

       .. data:: timeLockedMicros.r

          Reports the amount of time in microseconds the operation has held the
          database specific read lock.

       .. data:: timeLockedMicros.w

          Reports the amount of time in microseconds the operation has held the
          database specific write lock.

   .. data:: timeAcquiringMicros

      The :data:`timeAcquiringMicros` document reports the amount of time
      the operation has spent *waiting* to acquire a specific lock.

      .. data:: timeAcquiringMicros.R

         Reports the mount of time in microseconds the operation has waited for the
         global read lock.

      .. data:: timeAcquiringMicros.W

         Reports the mount of time in microseconds the operation has waited for the
         global write lock.

      .. data:: timeAcquiringMicros.r

         Reports the mount of time in microseconds the operation has waited for the
         database specific read lock.

      .. data:: timeAcquiringMicros.w

         Reports the mount of time in microseconds the operation has waited for the
         database specific write lock.
