.. _convert-serverless-to-dedicated:

============================================================
Convert a {+Serverless-Instance+} to a {+Dedicated-Cluster+}
============================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can migrate your data from a {+Serverless-instance+} to a
{+dedicated-cluster+} using one of the following methods:

- (Recommended). :ref:`Migrate Using Atlas UI <convert-serverless-to-dedicated-atlas-ui>`.
  This process ensures correctness and allows you to **keep** the existing public connection strings.

- :ref:`Migrate Using mongodump and mongorestore <convert-serverless-to-dedicated-atlas-manual>`.
- :ref:`Restore data from a scheduled or on-demand {+Cloud-Backup+}<restore-from-snapshot>`.

.. _convert-serverless-to-dedicated-atlas-ui:

Migrate Using {+atlas-ui+}
------------------------------------

The UI-based conversion from a {+Serverless-instance+} to a {+dedicated-cluster+}
has the following considerations:

- The conversion process creates a {+dedicated-cluster+}.
- Using the {+atlas-ui+}-based process causes some downtime. Your {+database-deployment+}
  must go offline while |service| converts your {+Serverless-instance+} to a {+dedicated-cluster+}.
- If some of your connections use private endpoints, :ref:`reconfigure private endpoints <cluster-private-endpoint>`
  once |service| upgrades your {+Serverless-instance+} to a {+dedicated-cluster+} tier.
- You can't change the cloud provider or region during this conversion process.
  After the upgrade, you can :ref:`move a cluster to a different provider or region <move-cluster>`.
- Charts that have the {+Serverless-instance+} as the data source
  are unavailable during the conversion to a {+dedicated-cluster+},
  but will become available once |service| completes the conversion.
- Upgrading your {+Serverless-instance+} to a {+dedicated-cluster+} is irreversible.

Required Access
~~~~~~~~~~~~~~~

To migrate your data from a {+Serverless-instance+} (deprecated) to a {+dedicated-cluster+},
you must have :authrole:`Project Cluster Manager` access or higher to the project.

Convert Your {+Serverless-Instance+} to a {+Dedicated-Cluster+}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To convert your {+Serverless-instance+} to a {+dedicated-cluster+}:

.. procedure::
   :style: normal

   .. include:: /includes/nav/steps-db-deployments-page.rst

   .. step:: Edit the configuration.

      For the {+cluster+} you want to modify, click the :icon-fa5:`ellipsis-h` icon,
      and then select :guilabel:`Edit Configuration`.

   .. step:: At the top of your configuration settings, click the :guilabel:`Dedicated` tab.

   .. step:: Select the recommended  :guilabel:`Cluster Tier` and storage size.

      .. important::

         |service| recommends a {+cluster+} tier and storage size based
         on your {+Serverless-instance+} tier, storage size, and usage. After
         the conversion process, you can :ref:`modify the cluster tier <scale-cluster-instance>`
         and storage size based on your needs.

   .. step:: (Optional) Change additional options.
      To learn more, see :ref:`create-cluster-more-configuration-options`,
      and :ref:`Manage Cluster Tags <manage-tags-modify-cluster>`.

   .. step:: (Optional) Review backups and billing.
      To learn more, see :ref:`Dedicated Cluster Billing <cluster-config-billing>`
      and :ref:`{+Cloud-Backup+}s <backup-cloud-provider>`.

   .. step:: Click :guilabel:`Review Changes` to review the changes you have made.

      The :guilabel:`Review Changes` page displays a complete side-by-side
      summary of the modified attributes with any warnings or notes
      pertaining to the changes. The original attribute settings are listed
      on the left and the corresponding new settings with changes in pricing
      are listed on the right.

      |service| displays the following warnings and notes related to the change at the top:

      - If you used a private endpoint with your {+Serverless-instance+},
        :ref:`reconfigure the private endpoint <cluster-private-endpoint>` once
        |service| upgrades your {+Serverless-instance+} to a {+dedicated-cluster+} tier.
      - If you enable disk auto-scaling, the minimum oplog window changes to 24 hours.
      - Charts that have the {+Serverless-instance+} as the data source
        are unavailable during the conversion to a {+dedicated-cluster+},
        but will become available once |service| completes the conversion.
      - Upgrading your {+Serverless-instance+} to a {+dedicated-cluster+} is irreversible.

   .. step:: Click :guilabel:`Apply Changes`.

      Once you have reviewed the changes, click :guilabel:`Apply Changes`
      to apply them to your {+cluster+}.

      You can use the same :manual:`DNS seed list connection string 
      </reference/connection-string/#dns-seed-list-connection-format>`
      to connect to your new {+dedicated-cluster+} as you have used
      for your {+Serverless-instance+}.

.. _convert-serverless-to-dedicated-atlas-manual:

Migrate Using ``mongodump`` and ``mongorestore``
-------------------------------------------------

To migrate your data from a {+Serverless-instance+} to a
{+dedicated-cluster+} using tools, you must have the following: 

- A {+dedicated-cluster+} that runs the same major version of MongoDB as
  the {+Serverless-instance+} from which you want to migrate data.
- The following command-line tools:

  - |mongodump|
  - |mongorestore|

.. procedure:: 
   :style: normal

   .. include:: /includes/nav/steps-db-deployments-page.rst

   .. step:: Pause writes on the {+Serverless-instance+} to obtain a consistent snapshot of your data.

   .. step:: Connect to your {+Serverless-instance+} using |mongodump| to retrieve the data to migrate.

      To connect to your {+Serverless-instance+} and retrieve the data,
      do the following in the {+atlas-ui+}:

      a. Click the :icon-mms:`ellipsis` (ellipsis) for the
         {+Serverless-instance+} and select :guilabel:`Command Line
         Tools` from the dropdown. 

         The :guilabel:`Cmd Line Tools` tab displays.

      #. In the :guilabel:`Binary Import and Export Tools` section, copy
         the ``mongodump`` command to create a binary export of the
         contents of a database.

         For example:

         .. code-block:: shell 
            :copyable: false 

            mongodump --uri
            mongodb+srv://{username}:<PASSWORD>@test.jca5k.mongodb.net/<DATABASE> 
            
      To learn more, see :ref:`command-line-tools`.

   .. step:: Run the |mongodump| command in a terminal to retrieve the data.

      To run the |mongodump| command that you copied, do the
      following in a terminal: 

      a. Paste the ``mongodump`` command that you copied into the terminal.
      
      #. Replace the ``<PASSWORD>`` in the string with the password of
         the user.

      #. Replace the ``<DATABASE>`` in the string with the name of the
         database that you want to migrate to the {+dedicated-cluster+}.

      #. Run the |mongodump| command.

         When you run |mongodump|, the command copies the contents of
         the specified database into the ``dump/`` sub-directory of the 
         current directory. If the ``dump`` directory doesn't already
         exist, the command creates the directory and copies the data
         into that directory.

      #. Repeat these steps for each database that you want to migrate to the
         {+dedicated-cluster+}.

   .. include:: /includes/nav/steps-db-deployments-page.rst

   .. step:: Connect to your {+dedicated-cluster+} using |mongorestore| to migrate the data to that {+cluster+}.

      To connect to your {+dedicated-cluster+} and migrate the data,
      do the following in the {+atlas-ui+}:

      a. Click the :icon-mms:`ellipsis` (ellipsis) for the
         {+dedicated-cluster+} and select :guilabel:`Command Line
         Tools` from the dropdown. 

         The :guilabel:`Cmd Line Tools` tab displays.

      #. In the :guilabel:`Binary Import and Export Tools` section, copy
         the ``mongorestore`` command to create a new database or add
         data to an existing database. 

         For example:

         .. code-block:: shell 
            :copyable: false 

            mongorestore --uri
            mongodb+srv://{username}:<PASSWORD>@test.jca5k.mongodb.net
            
      To learn more, see :ref:`command-line-tools`.
            
   .. step:: Run the |mongorestore| command in a terminal to retrieve the data.

      To run the |mongorestore| command that you copied, do the
      following in a terminal: 

      a. Paste the ``mongorestore`` command that you copied into the terminal.
      
      #. Replace the ``<PASSWORD>`` in the string with the password of
         the user.

      #. Run the |mongorestore| command.

         When you run |mongorestore|, by default, the command copies the
         contents of the ``dump/`` sub-directory of the current
         directory to the {+cluster+}. If you stored the data in a
         different directory, see |mongorestore| syntax for the
         command options to specify a different location. 

      #. (Optional) If you are migrating each database individually,
         repeat these steps for each database that you want to migrate to the 
         {+dedicated-cluster+}.

   .. include:: /includes/nav/steps-db-deployments-page.rst

   .. step:: (Optional) Confirm that you've successfully migrated data to the {+dedicated-cluster+}.

      To confirm that you've successfully migrated your data, do the
      following in the {+atlas-ui+}.

      a. Do one of the following on the {+dedicated-cluster+} where you
         copied the data:  
       
         - Review the {+atlas-ui+}:

           i. .. include:: /includes/nav/list-data-explorer
            
           #. Visually verify that data has been migrated to the 
              {+cluster+}  

         - Click :guilabel:`Connect` to connect to your {+cluster+} and
           run queries against the data.