.. meta::
   :keywords: client-side field level encryption, encryption

.. _csfle-reference-encryption-schemas:
.. _field-level-encryption-json-schema:

========================
CSFLE Encryption Schemas
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

.. include:: /includes/extracts/csfle-enterprise-atlas-only.rst

Encryption schemas contain user-specified rules that identify which 
fields must be encrypted and how to encrypt those fields. Applications 
must specify the automatic encryption rules using a strict subset of 
the `JSON Schema Draft 4 standard syntax
<https://tools.ietf.org/html/draft-zyp-json-schema-04>`_ and
the following encryption-specific keywords:

- :ref:`Encrypt <csfle-reference-encryption-schemas-encrypt-keyword>` 
  specifies the encryption options to use when encrypting the current 
  field. 

- :ref:`Encrypt Metadata
  <field-level-encryption-encryptMetadata-keyword>` specifies 
  inheritable encryption options.

For the MongoDB shell, use the :method:`Mongo` constructor
to create the database connection with the automatic encryption rules
included as part of the {+csfle+}
:ref:`configuration object <{+auto-encrypt-options+}>`.
See :ref:`mongo-connection-automatic-client-side-encryption-enabled`
for an example.

For the official MongoDB drivers, use the
driver-specific database connection constructor (``MongoClient``)
to create the database connection with the automatic encryption rules
included as part of the {+csfle+}
configuration object. To learn more about {+csfle-abbrev+}-specific 
``MongoClient`` options, see the :ref:`mongo client 
<csfle-reference-mongo-client>` page.

.. important:: Don't Specify Document Validation Keywords In Your Encryption Schema
   
   Do  **not** specify document validation keywords in the automatic
   encryption rules. To define document validation rules, configure
   :ref:`schema validation<schema-validation-overview>`.

Definition
----------

.. _csfle-reference-encryption-schemas-encrypt-keyword:
.. _field-level-encryption-encrypt-keyword:

.. autoencryptkeyword:: encrypt

   *Object*

   
   .. code-block:: json
      :copyable: false
      :emphasize-lines: 4-8
      
      "bsonType" : "object",
      "properties" : {
        "<fieldName>" : {
          "encrypt" : {
            "algorithm" : "<string>",
            "bsonType" : "<string>" | [ "<string>" ],
            "keyId" : [ <UUID> ]
          }
        }
      }

   Indicates that ``<fieldName>`` must be encrypted. The ``encrypt``
   object has the following requirements:

   - ``encrypt`` cannot have any sibling fields in the 
     ``<fieldName>`` object. ``encrypt`` must be the only child of the
     ``<fieldName>`` object.

   - ``encrypt`` cannot be specified within any subschema of the
     ``items`` or ``additionalItems`` keywords. Specifically,
     automatic {+csfle+} does not support encrypting individual 
     elements of an array.
      
   The ``encrypt`` object can contain **only** the
   following fields:

   - :autoencryptkeyword:`~encrypt.algorithm`
   - :autoencryptkeyword:`~encrypt.bsonType`
   - :autoencryptkeyword:`~encrypt.keyId`

   Including any other field to the ``encrypt`` object
   results in errors when issuing automatically encrypted read or write
   operations

   If :autoencryptkeyword:`~encrypt.keyId` or
   :autoencryptkeyword:`~encrypt.algorithm` are omitted, the
   :ref:`{+shared-library+} <csfle-reference-shared-library>` checks all parent
   fields and attempts to construct those options from the nearest
   :autoencryptkeyword:`encryptMetadata` object that specifies the
   option. :autoencryptkeyword:`~encrypt.bsonType` cannot be inherited
   and *may* be required depending on the value of
   :autoencryptkeyword:`~encrypt.algorithm`.

   If the {+shared-library+} cannot construct the full ``encrypt`` object using
   the fields specified to the object and any required
   ``encryptMetadata``-inherited keys, automatic encryption fails and
   returns an error.

.. autoencryptkeyword:: encrypt.algorithm

   *String*

   Indicates which encryption algorithm to use when encrypting
   values of ``<fieldName>``. Supports the following algorithms
   *only*:

   - ``AEAD_AES_256_CBC_HMAC_SHA_512-Random``
   - ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``

   For complete documentation on the encryption algorithms, see
   :ref:`csfle-reference-encryption-algorithms`.

   If omitted, the :ref:`{+shared-library+} <csfle-reference-shared-library>` checks
   all parent fields for the closest ancestor containing an
   :autoencryptkeyword:`encryptMetadata.algorithm` key and inherits that value.
   If no parent :autoencryptkeyword:`~encryptMetadata.algorithm` exists, automatic
   field level encryption fails and returns an error.

   - If ``encrypt.algorithm`` or its inherited value is
     ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``,
     the ``encrypt`` object *requires* the 
     :autoencryptkeyword:`encrypt.bsonType` field.

   - If ``encrypt.algorithm`` or its inherited value is
     ``AEAD_AES_256_CBC_HMAC_SHA_512-Random``,
     the ``encrypt`` object *may* include the 
     :autoencryptkeyword:`encrypt.bsonType` field. 

.. autoencryptkeyword:: encrypt.bsonType

  *String | Array of Strings*

  The :ref:`BSON type <bson-types>` of the field being encrypted.
  Required if :autoencryptkeyword:`encrypt.algorithm` is
  ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``.

  If :autoencryptkeyword:`encrypt.algorithm` or its inherited value is
  ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``, ``bsonType``
  *must* specify a *single* type.  ``bsonType`` does **not**
  support any of the following BSON types with the deterministic
  encryption algorithm:

  - ``double``
  - ``decimal128``
  - ``bool``
  - ``object``
  - ``array``

  If :autoencryptkeyword:`encrypt.algorithm` or its inherited value is
  ``AED_AES_256_CBC_HMAC_SHA_512-Random``, ``bsonType`` is
  optional and may specify an array of supported bson types. For
  fields with ``bsonType`` of ``array`` or ``object``, the client
  encrypts the *entire* array or object and not their individual
  elements. 

  ``encrypt.bsonType`` does **not** support the following types
  regardless of :autoencryptkeyword:`encrypt.algorithm` or its inherited
  value:

  - ``minKey``
  - ``maxKey``
  - ``null``
  - ``undefined`` 

.. autoencryptkeyword:: encrypt.keyId

  *Array of single UUID*

  The UUID of the {+dek-long+} to use for encrypting field
  values. The UUID is a BSON `binary data
  <http://bsonspec.org/spec.html>`_ element of subtype ``4``.

  Specify *one* string inside the array.

  If omitted, the :ref:`{+shared-library+} <csfle-reference-shared-library>` checks
  all parent fields for the closest ancestor containing an 
  :autoencryptkeyword:`encryptMetadata.keyId` key and inherits
  that value. If no parent 
  :autoencryptkeyword:`~encryptMetadata.keyId` exists,
  automatic field level encryption fails and returns an error.

  The :autoencryptkeyword:`~encrypt.keyId` or its inherited value *must*
  exist in the {+key-vault-long+} specified as  part of the automatic encryption
  :ref:`configuration options <{+auto-encrypt-options+}>`.
  If the specified {+dek-long+} does not exist, automatic
  encryption fails.

  Official MongoDB drivers have language-specific requirements for specifying 
  the UUID. Defer to the :ref:`driver documentation <csfle-driver-tutorials>`
  for complete documentation on implementing client-side field
  level encryption.

.. _field-level-encryption-encryptMetadata-keyword:

.. autoencryptkeyword:: encryptMetadata

  *Object*

  .. code-block:: json
    :copyable: false
    :emphasize-lines: 3-6

    {
      "bsonType" : "object",
      "encryptMetadata" : {
        "algorithm" : "<string>",
        "keyId" : [ <UUID> ]
      },
      "properties" : {
        "encrypt" : {}
      }
    }

  Defines encryption options which an :autoencryptkeyword:`encrypt`
  object nested in the sibling ``properties`` may inherit. If an
  :autoencryptkeyword:`encrypt` is missing an option required to support
  encryption, the {+shared-library+} searches all parent objects
  to locate an :autoencryptkeyword:`encryptMetadata` object that
  specifies the missing option.

  ``encryptMetadata`` must be specified in subschemas with ``bsonType:
  "object"``. ``encryptMetadata`` cannot be specified to any subschema
  of the ``items`` or ``additionalItems`` keywords. Specifically,
  automatic {+csfle+} does not support
  encrypting individual elements of an array.

  The ``encryptMetadata`` object can contain *only* the
  following fields. Including any other field to the ``encrypt`` object
  results in errors when issuing automatically encrypted read or write
  operations:

  - :autoencryptkeyword:`~encryptMetadata.algorithm`
  - :autoencryptkeyword:`~encryptMetadata.keyId`

.. autoencryptkeyword:: encryptMetadata.algorithm

  *String*
  
  The encryption algorithm to use to encrypt a given field. If an
  :autoencryptkeyword:`encrypt` object is missing the
  :autoencryptkeyword:`~encrypt.algorithm` field, the {+shared-library+}
  searches all parent objects to locate an
  :autoencryptkeyword:`encryptMetadata` object that specifies
  :autoencryptkeyword:`encryptMetadata.algorithm`.

  Supports the following algorithms *only*:

  - ``AEAD_AES_256_CBC_HMAC_SHA_512-Random``
  - ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``

  For complete documentation on the encryption algorithms, see
  :ref:`field-level-encryption-algorithms`.

  If specifying ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``, 
  any ``encrypt`` object inheriting that value *must* specify
  :autoencryptkeyword:`encrypt.bsonType`.

.. autoencryptkeyword:: encryptMetadata.keyId

  *Array of single UUID*

  The UUID of a {+dek-long+}. The UUID is a BSON `binary data
  <http://bsonspec.org/spec.html>`_ element of subtype ``4``.
  
  Specify *one* string inside the array.

  If an :autoencryptkeyword:`encrypt` object is missing the 
  :autoencryptkeyword:`~encrypt.keyId` field, the {+shared-library+}
  searches all parent objects to locate 
  an :autoencryptkeyword:`encryptMetadata` object that
  specifies :autoencryptkeyword:`encryptMetadata.keyId`.
  
  The {+dek-long+} *must* exist in the {+key-vault-long+} specified as
  part of the automatic encryption :ref:`configuration options
  <csfle-reference-mongo-client>`. The specified configuration
  options must *also* include appropriate access to the
  :ref:`Key Management Service (KMS) <qe-fundamentals-kms-providers>` and
  {+cmk-long+} (CMK) used to create the data key. Automatic
  encryption fails if the {+dek-long+} does not exist *or* if the
  client cannot decrypt the key with the specified KMS and CMK.

  Official MongoDB drivers have language-specific requirements for specifying 
  the UUID. Defer to the :ref:`driver documentation <csfle-driver-tutorials>`
  for complete documentation on implementing client-side field
  level encryption.

Examples
--------

.. _field-level-encryption-auto-encrypt-multiple-fields:

Encryption Schema -  Multiple Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider a collection ``MedCo.patients`` where each document has
the following structure:

.. code-block:: none

   {
     "fname" : "<String>",
     "lname" : "<String>",
     "passportId" : "<String>",
     "bloodType" : "<String>",
     "medicalRecords" : [
       {<object>}
     ],
     "insurance" : {
       "policyNumber" : "<string>",
       "provider" : "<string>"
     }
   }

The following fields contains personally identifiable information (PII)
that may be queried:

- ``passportId``
- ``bloodType``
- ``insurance.policyNumber``
- ``insurance.provider``

The :ref:`deterministic <field-level-encryption-deterministic>`
encryption algorithm guarantees that the encrypted output of a value
remains static. This allows queries for a specific value to return
meaningful results at the cost of increased susceptibility to frequency
analysis recovery. The deterministic encryption algorithm therefore
meets both the encryption and queryability requirements of the data.

The following fields contain legally protected personally identifiable
information (PII) that may never be queried:

- ``medicalRecords``

The :ref:`randomized <field-level-encryption-random>` encryption
algorithm guarantees that the encrypted output of a value is always
unique. This prevents queries for a specific field value from returning
meaningful results while supporting the highest possible protection of
the field contents. The randomized encryption algorithm therefore meets
both the encryption and queryability requirements of the data.

The following schema specifies automatic encryption rules which meet the
above requirements for the ``MedCo.patients`` collection:

.. code-block:: json

   {
     "MedCo.patients" : {
       "bsonType" : "object",
       "properties" : {
         "passportId" : {
           "encrypt" : {
             "keyId" : [UUID("bffb361b-30d3-42c0-b7a4-d24a272b72e3")],
             "algorithm" : "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
             "bsonType" : "string"
           }
         },
         "bloodType" : {
           "encrypt" : {
             "keyId" : [UUID("bffb361b-30d3-42c0-b7a4-d24a272b72e3")],
             "algorithm" : "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
             "bsonType" : "string"
           }
         },
         "medicalRecords" : {
           "encrypt" : {
             "keyId" : [UUID("f3821212-e697-4d65-b740-4a6791697c6d")],
             "algorithm" : "AEAD_AES_256_CBC_HMAC_SHA_512-Random",
             "bsonType" : "array"
           }
         },
         "insurance" : {
           "bsonType" : "object",
           "properties" : {
             "policyNumber" : {
               "encrypt" : {
                 "keyId" : [UUID("bffb361b-30d3-42c0-b7a4-d24a272b72e3")],
                 "algorithm" : "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
                 "bsonType" : "string"
               }
             },
             "provider" : {
               "encrypt" : {
                 "keyId" : [UUID("bffb361b-30d3-42c0-b7a4-d24a272b72e3")],
                 "algorithm" : "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
                 "bsonType" : "string"
               }
             }
           }
         }
       }
     }
   }

The above automatic encryption rules mark the ``passportId``,
``bloodType``, ``insurance.policyNumber``, ``insurance.provider``,
and ``medicalRecords`` fields for encryption. 

- The ``passportId``, ``bloodType``, ``insurance.policyNumber``, and
  ``provider`` fields require deterministic encryption using the
  specified key.

- The ``medicalRecords`` field requires randomized encryption using the
  specified key. 

.. include:: /includes/queryable-encryption/fact-csfle-compatibility-drivers.rst

.. _field-level-encryption-auto-encrypt-multiple-fields-inheritance:

Encryption Schema -  Multiple Fields With Inheritance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider a collection ``MedCo.patients`` where each document has
the following structure:

.. code-block:: none

   {
     "fname" : "<String>",
     "lname" : "<String>",
     "passportId" : "<String>",
     "bloodType" : "<String>",
     "medicalRecords" : [
       {<object>}
     ],
     "insurance" : {
       "policyNumber" : "<string>",
       "provider" : "<string>"
     }
   }

The following fields contain private data that may be queried:

- ``passportId``
- ``bloodType``
- ``insurance.policyNumber``
- ``insurance.provider``

The :ref:`deterministic <field-level-encryption-deterministic>`
encryption algorithm guarantees that the encrypted output of a value
remains static. This allows queries for a specific value to return
meaningful results at the cost of increased susceptibility to frequency
analysis recovery. The deterministic encryption algorithm therefore
meets both the encryption and queryability requirements of the data.

The following fields contain private data that may never be queried:

- ``medicalRecords``

The :ref:`randomized <field-level-encryption-random>` encryption
algorithm guarantees that the encrypted output of a value is always
unique. This prevents queries for a specific field value from returning
meaningful results while supporting the highest possible protection of
the field contents. The randomized encryption algorithm therefore meets
both the encryption and queryability requirements of the data.

The following schema specifies automatic encryption rules which meet the
encryption requirements for the ``MedCo.patients`` collection:

.. code-block:: json

   {
     "MedCo.patients" : {
       "bsonType" : "object",
       "encryptMetadata" : {
         "keyId" : [UUID("6c512f5e-09bc-434f-b6db-c42eee30c6b1")],
         "algorithm" : "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
       },
       "properties" : {
         "passportId" : {
           "encrypt" : {
             "bsonType" : "string"
           }
         },
         "bloodType" : {
           "encrypt" : {
             "bsonType" : "string"
           }
         },
         "medicalRecords" : {
           "encrypt" : {
             "keyId" : [UUID("6c512f5e-09bc-434f-b6db-c42eee30c6b1")],
             "algorithm" : "AEAD_AES_256_CBC_HMAC_SHA_512-Random",
             "bsonType" : "array"
           }
         },
         "insurance" : {
           "bsonType" : "object",
           "properties" : {
             "policyNumber" : {
               "encrypt" : {
                 "bsonType" : "string"
               }
             },
             "provider" : {
               "encrypt" : {
                 "bsonType" : "string"
               }
             }
           }
         }
       }
     }
   }

The above automatic encryption rules mark the ``passportId``,
``bloodType``, ``insurance.policyNumber``, ``insurance.provider``,
and ``medicalRecords`` fields for encryption. 

- The ``passportId``, ``bloodType``, ``insurance.policyNumber``, and
  ``provider`` fields inherit their encryption settings from the parent
  ``encryptMetadata`` field. Specifically, these fields inherit
  the :autoencryptkeyword:`~encryptMetadata.algorithm` and
  :autoencryptkeyword:`~encryptMetadata.keyId` values specifying
  deterministic encryption with the specified {+dek-long+}.

- The ``medicalRecords`` field requires randomized encryption using the
  specified key. The ``encrypt`` options override those specified
  in the parent ``encryptMetadata`` field.

.. include:: /includes/queryable-encryption/fact-csfle-compatibility-drivers.rst

To learn more about your CMK and {+key-vault-long+}, 
see the :ref:`key vaults <qe-reference-keys-key-vaults>` page.

To learn more about encryption algorithms, 
see the :ref:`Encryption algorithms <csfle-reference-encryption-algorithms>` page.

To learn more about {+csfle-abbrev+}-specific ``MongoClient`` options, 
see the :ref:`mongo client <csfle-reference-mongo-client>` page.

.. _field-level-encryption-auto-encrypt-with-pattern-properties:

Encryption Schema -  Encrypt with Pattern Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the ``patternProperties`` keyword in your encryption schema to 
define encryption rules for all fields with names that match a regular expression.

Consider a collection ``MedCo.patients`` where each document has
the following structure:

.. code-block:: none

   {
     "fname" : "<string>",
     "lname" : "<string>",
     "passportId_PIIString" : "<string>",
     "bloodType_PIIString" : "<string>",
     "medicalRecords_PIIArray" : [
       {<object>}
     ],
     "insurance" : {
       "policyNumber_PIINumber" : "<number>",
       "provider_PIIString" : "<string>"
     }
   }

The fields that contain private data are identified by a "_PII<type>" 
tag appended the end of the field name.

- ``passportId_PIIString``
- ``bloodType_PIIString``
- ``medicalRecords_PIIArray``
- ``insurance.policyNumber_PIINumber``
- ``insurance.provider_PIIString``

You can use the ``patternProperties`` keyword to configure these fields for 
encryption, without identifying each field individually, and without using the 
full field name. Do this by using regular expressions that match all fields that 
end with the "_PII<type>" tag.

The following JSON schema uses ``patternProperties`` and regular expressions to 
specify which fields to encrypt.

.. code-block:: json

  {
    "MedCo.patients": {
    "bsonType": "object",
    "patternProperties": {
      "_PIIString$": {
        "encrypt": {
          "keyId": [UUID("6c512f5e-09bc-434f-b6db-c42eee30c6b1")],
          "bsonType": "string",
          "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
        },
      },
      "_PIIArray$": {
        "encrypt": {
          "keyId": [UUID("6c512f5e-09bc-434f-b6db-c42eee30c6b1")],
          "bsonType": "array",
          "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random",
        },
      },
      "insurance": {
        "bsonType": "object",
        "patternProperties": {
          "_PIINumber$": {
            "encrypt": {
              "keyId": [UUID("6c512f5e-09bc-434f-b6db-c42eee30c6b1")],
              "bsonType": "int",
              "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
            },
          },
          "_PIIString$": {
            "encrypt": {
              "keyId": [UUID("6c512f5e-09bc-434f-b6db-c42eee30c6b1")],
              "bsonType": "string",
              "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
            },
          },
        },
      },
    },
    },
  }

The above automatic encryption rules mark the ``passportId_PIIString``, 
``bloodType_PIIString``, ``medicalRecords_PIIArray``, ``insurance.policyNumber_PIINumber``,
``insurance.provider_PIIString`` fields for encryption.

To Learn more about the ``patternProperties`` keyword, see
:ref:`csfle-fundamentals-pattern-properties`.
