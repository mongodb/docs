# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/authentication.txt:5
# fa101de60b17451daf93cd41d4b73d1d
msgid "Authentication"
msgstr ""

#: ../source/core/authentication.txt:9
# de60a3e8e32b40d288d0acbacd45d5e4
msgid "Authentication is the process of verifying the identity of a client. When access control, i.e. :doc:`authorization </core/authorization>`, is enabled, MongoDB requires all clients to authenticate themselves first in order to determine the access for the client."
msgstr ""

#: ../source/core/authentication.txt:14
# 2b23c930a2524ae8b5e2cadf7190edb6
msgid "Although authentication and :doc:`authorization </core/authorization>` are closely connected, authentication is distinct from authorization. Authentication verifies the identity of a user; authorization determines the verified user's access to resources and operations."
msgstr ""

#: ../source/core/authentication.txt:19
# d5ff6f9f4e9e4bbcb3cf4bbbf810f020
msgid "MongoDB supports a number of :ref:`authentication mechanisms <security-authentication-mechanisms>` that clients can use to verify their identity. These mechanisms allow MongoDB to integrate into your existing authentication system. See :ref:`security-authentication-mechanisms` for details."
msgstr ""

#: ../source/core/authentication.txt:25
# 4f3c79fd10f64d5180f460cdb3469ee9
msgid "In addition to verifying the identity of a client, MongoDB can require members of replica sets and sharded clusters to :ref:`authenticate their membership <inter-process-auth>` to their respective replica set or sharded cluster. See :ref:`inter-process-auth` for more information."
msgstr ""

#: ../source/core/authentication.txt:34
# cbc6732806eb486dbff847891e7ea7a4
msgid "Client Users"
msgstr ""

#: ../source/core/authentication.txt:36
# 43b27371e74a44e1a55af45c67cf4904
msgid "To authenticate a client in MongoDB, you must add a corresponding user to MongoDB. When adding a user, you create the user in a specific database. Together, the user's name and database serve as a unique identifier for that user. That is, if two users have the same name but are created in different databases, they are two separate users. To authenticate, the client must authenticate the user against the user's database. For instance, if using the :program:`mongo` shell as a client, you can specify the database for the user with the :ref:`--authenticationDatabase <mongo-shell-authentication-options>` option."
msgstr ""

#: ../source/core/authentication.txt:47
# 0239567d67fb42189db756ef69ec46fa
msgid "To add and manage user information, MongoDB provides the :method:`db.createUser()` method as well as other :ref:`user management methods <user-management-methods>`. For an example of adding a user to MongoDB, see :doc:`/tutorial/add-user-to-database`."
msgstr ""

#: ../source/core/authentication.txt:52
# 48f8bd0dd71740ff9b6c0a99a63dea19
msgid "MongoDB stores all user information, including :data:`name <admin.system.users.user>`, :data:`password <admin.system.users.credentials>`, and the :data:`user's database <admin.system.users.db>`, in the :doc:`system.users </reference/system-users-collection>` collection in the ``admin`` database."
msgstr ""

#: ../source/core/authentication.txt:62
# 4aef8097cc0743a79918c889bd371a5f
msgid "Authentication Mechanisms"
msgstr ""

#: ../source/core/authentication.txt:66
# 6ce963eb78de466f8044ea450bb84078
msgid "MongoDB supports multiple authentication mechanisms. MongoDB's default authentication method is a :ref:`challenge and response mechanism (SCRAM-SHA-1) <authentication-scram-sha-1>`. MongoDB also supports :ref:`x509 certificate authentication <security-auth-x509>`, :ref:`LDAP proxy authentication <security-auth-ldap>`, and :ref:`Kerberos authentication <security-auth-kerberos>`."
msgstr ""

#: ../source/core/authentication.txt:73
# 79c96b558225432e8a0de920e73b3595
msgid "This section introduces the mechanisms available in MongoDB."
msgstr ""

#: ../source/core/authentication.txt:75
# 7bcf5577e9654d7184c888d095219c28
msgid "To specify the authentication mechanism to use, see :parameter:`authenticationMechanisms`."
msgstr ""

#: ../source/core/authentication.txt:81
# 12b3b615821a43f19853bca73a8c2759
msgid "``SCRAM-SHA-1`` Authentication"
msgstr ""

#: ../source/core/authentication.txt:85
# dc3316ec37a44335be5c8ead47b2a091
msgid "``SCRAM-SHA-1`` is an IETF standard, `RFC 5802 <https://tools.ietf.org/html/rfc5802>`_, that defines best practice methods for implementation of challenge-response mechanisms for authenticating users with passwords."
msgstr ""

#: ../source/core/authentication.txt:90
# 8e90fb6efc234436b7428a83f860dc64
msgid "``SCRAM-SHA-1`` verifies supplied user credentials against the user's :data:`name <admin.system.users.user>`, :data:`password <admin.system.users.credentials>` and :data:`database <admin.system.users.db>`. The user's database is the database where the user was created, and the user's database and the user's name together serves to identify the user."
msgstr ""

#: ../source/core/authentication.txt:97
# 0e731f62a7e84fcb9135528dd4aabdb2
msgid "MongoDB's implementation of ``SCRAM-SHA-1`` represents an improvement in security over the previously-used ``MONGODB-CR``, providing:"
msgstr ""

#: ../source/core/authentication.txt:100
# f7d4863b09df408ab858472d53db0c46
msgid "A tunable work factor (``iterationCount``),"
msgstr ""

#: ../source/core/authentication.txt:101
# 9022ea2b29a54be8bff782ae01211d8f
msgid "Per-user random salts rather than server-wide salts,"
msgstr ""

#: ../source/core/authentication.txt:102
# 3b44f5975c4545739e47ee7803a78a37
msgid "A cryptographically stronger hash function (``SHA-1`` rather than ``MD5``), and"
msgstr ""

#: ../source/core/authentication.txt:104
# dccc03defbb14ef6ad295daf5fb2ded9
msgid "Authentication of the server to the client as well as the client to the server."
msgstr ""

#: ../source/core/authentication.txt:109
# f15af18972874867ae27ce22792e16b6
msgid "``SCRAM-SHA-1`` is the default mechanism for MongoDB versions beginning with the 3.0 series. Legacy ``MONGODB-CR`` credentials from databases created with older server versions will still work under 3.0 but must be upgraded with :dbcommand:`authSchemaUpgrade` in order to take advantage of many of the improvements. The server will continue to use the legacy credentials until it undergoes this upgrade. Clients and drivers compatible with 3.0 will use the ``SCRAM`` communication protocol even while using the legacy credentials."
msgstr ""

#: ../source/core/authentication.txt:122
# 9f505c2eb5894fd197edae53e12ea2c6
msgid "``MONGODB-CR`` Authentication"
msgstr ""

#: ../source/core/authentication.txt:124
# 4c0746753c8142b98ad5c4ddfc1ff3a2
msgid "``MONGODB-CR`` is a challenge-response mechanism that authenticates users through passwords."
msgstr ""

#: ../source/core/authentication.txt:127
# 3e21d05ac6634586bb16857ce5c1cd07
msgid "Versions of MongoDB prior to 3.0 use ``MONGODB-CR`` as the default mechanism. As of version 3.0, MongoDB uses ``SCRAM-SHA-1`` by default."
msgstr ""

#: ../source/core/authentication.txt:132
# 8c753991ebdf4ebda0c18e22b1a2bcda
msgid "``MONGODB-CR`` verifies supplied user credentials against the user's :data:`name <admin.system.users.user>`, :data:`password <admin.system.users.credentials>` and :data:`database <admin.system.users.db>`. The user's database is the database where the user was created, and the user's database and the user's name together serve to identify the user."
msgstr ""

#: ../source/core/authentication.txt:139
# 56cfbe1d4515439998e29445380db14b
msgid "Using :setting:`key files <security.keyFile>`, you can also use ``MONGODB-CR`` authentication for the :ref:`internal member authentication <inter-process-auth>` of replica set members and sharded cluster members. The contents of the key files serve as the shared password for the members. You must store the key file on each :program:`mongod` or :program:`mongos` instance for that replica set or sharded cluster. The content of the key file is arbitrary but must be the same on all :program:`mongod` and :program:`mongos` instances that connect to each other."
msgstr ""

#: ../source/core/authentication.txt:149
# 417246fe81e1448d980c99d99a074f35
msgid "See :doc:`/tutorial/generate-key-file` for instructions on generating a key file and turning on key file authentication for members."
msgstr ""

#: ../source/core/authentication.txt:155
# 95dc3e7f60ed4bbd8ce0125b643df453
msgid "x.509 Certificate Authentication"
msgstr ""

#: ../source/core/authentication.txt:159
# 1c36d7a61a5048c69e8c4090957928d7
msgid "MongoDB supports x.509 certificate authentication for use with a secure :doc:`SSL connection </tutorial/configure-ssl>`."
msgstr ""

#: ../source/core/authentication.txt:162
# 1c25b0dedbc54152988d7d9556deffdb
msgid "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords. See :ref:`x509-client-authentication` for more information."
msgstr ""

#: ../source/core/authentication.txt:166
# 58b76ebfba664e49aa3c2f2d99c88c08
msgid "For membership authentication, members of sharded clusters and replica sets can use x.509 certificates instead of key files. See :ref:`x509-internal-authentication` for more information."
msgstr ""

#: ../source/core/authentication.txt:173
# c36044b406a3450ebcbaf39364a78bd0
msgid "Kerberos Authentication"
msgstr ""

#: ../source/core/authentication.txt:175
# 427ddf20f057438cb4907b4cfc606e1d
msgid "`MongoDB Enterprise <http://www.mongodb.com/products/mongodb-enterprise>`_ supports authentication using a Kerberos service. Kerberos is an industry standard authentication protocol for large client/server systems."
msgstr ""

#: ../source/core/authentication.txt:179
# 90ee218789d440ebb331cbe23214ca9f
msgid "To use MongoDB with Kerberos, you must have a properly configured Kerberos deployment, configured :ref:`Kerberos service principals <kerberos-service-principal>` for MongoDB, and added :ref:`Kerberos user principal <kerberos-user-principal>` to MongoDB."
msgstr ""

#: ../source/core/authentication.txt:184
# cdd1b4e3634b4a4690ffad68ef795be5
msgid "See :doc:`/core/kerberos` for more information on Kerberos and MongoDB. To configure MongoDB to use Kerberos authentication, see :doc:`/tutorial/control-access-to-mongodb-with-kerberos-authentication` and :doc:`/tutorial/control-access-to-mongodb-windows-with-kerberos-authentication`."
msgstr ""

#: ../source/core/authentication.txt:193
# 1bbf574ae5c04055b71703078abc0c62
msgid "LDAP Proxy Authority Authentication"
msgstr ""

#: ../source/core/authentication.txt:195
# a574deed0ce549628148f1f62bb15e30
msgid "`MongoDB Enterprise <http://www.mongodb.com/products/mongodb-enterprise>`_ supports proxy authentication through a Lightweight Directory Access Protocol (LDAP) service. See :doc:`/tutorial/configure-ldap-sasl-openldap` and :doc:`/tutorial/configure-ldap-sasl-activedirectory`."
msgstr ""

#: ../source/includes/admonition-mongodb-enterprise-windows-ldap.rst:1
# e46859ea9ff0436d93cf497770156e9d
msgid "MongoDB Enterprise for Windows does **not** include LDAP support for authentication. However, MongoDB Enterprise for Linux supports using LDAP authentication with an ActiveDirectory server."
msgstr ""

#: ../source/core/authentication.txt:203
# f92f8d6c21564d818bdbd5b1090a1233
msgid "MongoDB does **not** support LDAP authentication in mixed sharded cluster deployments that contain both version 2.4 and version 2.6 shards."
msgstr ""

#: ../source/core/authentication.txt:207
# 5577fe3a1c094315b17f3cc5e0cbf497
msgid "Authentication Behavior"
msgstr ""

#: ../source/core/authentication.txt:212
# 58fc1ad2b18645839eafa94ff3e6083e
msgid "Client Authentication"
msgstr ""

#: ../source/core/authentication.txt:214
# d70089b5b52d447e97ed7b6f9aa55630
msgid "Clients can authenticate using the :ref:`challenge and response <authentication-mongodb-cr>`, :ref:`x.509 <security-auth-x509>`, :ref:`LDAP Proxy <security-auth-ldap>` and :ref:`Kerberos <security-auth-kerberos>` mechanisms."
msgstr ""

#: ../source/core/authentication.txt:219
# f75afdb1c4b9434aab9f10ad873d7f63
msgid "Each client connection should authenticate as exactly one user. If a client authenticates to a database as one user and later authenticates to the same database as a different user, the second authentication invalidates the first. While clients can authenticate as multiple users if the users are defined on different databases, we recommend authenticating as one user at a time, providing the user with appropriate privileges on the databases required by the user."
msgstr ""

#: ../source/core/authentication.txt:227
# 2f2ab36500104e68b4eaa6a4613d47ea
msgid "See :doc:`/tutorial/authenticate-as-client` for more information."
msgstr ""

#: ../source/core/authentication.txt:233
# 22da7d719f5d4f0fb356a5b3ccd59af1
msgid "Authentication Between MongoDB Instances"
msgstr ""

#: ../source/core/authentication.txt:235
# f5f3cc8ca36c4c5cad2263b75e21f70a
msgid "You can authenticate members of :term:`replica sets <replica set>` and :term:`sharded clusters <sharded cluster>`. To authenticate members of a single MongoDB deployment to each other, MongoDB can use the :setting:`~security.keyFile` and :ref:`x.509 <security-auth-x509>` mechanisms. Using :setting:`~security.keyFile` authentication for members also enables authorization."
msgstr ""

#: ../source/core/authentication.txt:249
# b8b661244cea4ca68888e3d19d6bc67e
msgid "Always run replica sets and sharded clusters in a trusted networking environment. Ensure that the network permits only trusted traffic to reach each :program:`mongod` and :program:`mongos` instance."
msgstr ""

#: ../source/core/authentication.txt:253
# f92b96bb888a40a5b19761b7c0ddec53
msgid "Use your environment's firewall and network routing to ensure that traffic *only* from clients and other members can reach your :program:`mongod` and :program:`mongos` instances. If needed, use virtual private networks (VPNs) to ensure secure connections over wide area networks (WANs)."
msgstr ""

#: ../source/core/authentication.txt:258
# e705f61332dc40a7ac1cd901d2420365
msgid "Always ensure that:"
msgstr ""

#: ../source/core/authentication.txt:260
# 9ce2dbc1a8b24d1f8c3feb75d87be4fd
msgid "Your network configuration will allow every member of the replica set or sharded cluster to contact every other member."
msgstr ""

#: ../source/core/authentication.txt:263
# adc18dda0e864f95987a82c014990f51
msgid "If you use MongoDB's authentication system to limit access to your infrastructure, ensure that you configure a :setting:`~security.keyFile` on all members to permit authentication."
msgstr ""

#: ../source/core/authentication.txt:267
# f1d292a0d7d041ac99ec2ce6cd7a777a
msgid "See :doc:`/tutorial/generate-key-file` for instructions on generating a key file and turning on key file authentication for members. For an example of using key files for sharded cluster authentication, see :doc:`/tutorial/enable-authentication-in-sharded-cluster`."
msgstr ""

#: ../source/core/authentication.txt:277
# 6aab476db75f478b987b05e4303ede86
msgid "Authentication on Sharded Clusters"
msgstr ""

#: ../source/core/authentication.txt:279
# cd3a53b0ec96456c80a989645edf2e30
msgid "In sharded clusters, applications authenticate to directly to :program:`mongos` instances, using credentials stored in the ``admin`` database of the :term:`config servers <config server>`. The shards in the sharded cluster also have credentials, and clients can authenticate directly to the shards to perform maintenance directly on the shards. In general, applications and clients should connect to the sharded cluster through the :program:`mongos`."
msgstr ""

#: ../source/core/authentication.txt:288
# 6a3013f9d0894df995ee9939449b64ff
msgid "Previously, the credentials for authenticating to a database on a cluster resided on the :ref:`primary shard <primary-shard>` for that database."
msgstr ""

#: ../source/core/authentication.txt:293
# 8477a93ed0484cf58b5a771f77cc3aaa
msgid "Some maintenance operations, such as :dbcommand:`cleanupOrphaned`, :dbcommand:`compact`, :method:`rs.reconfig()`, require direct connections to specific shards in a sharded cluster. To perform these operations with authentication enabled, you must connect directly to the shard and authenticate as a *shard local* administrative user. To create a *shard local* administrative user, connect directly to the shard and create the user. MongoDB stores *shard local* users in the ``admin`` database of the shard itself. These *shard local* users are completely independent from the users added to the sharded cluster via :program:`mongos`. *Shard local* users are local to the shard and are inaccessible by :program:`mongos`. Direct connections to a shard should only be for shard-specific maintenance and configuration."
msgstr ""

#: ../source/core/authentication.txt:309
# 7eeca93e91c44ff299d90ff7dcd9231f
msgid "Localhost Exception"
msgstr ""

#: ../source/core/authentication.txt:311
# 70b547cca3c948deaa66b868606e08ad
msgid "The localhost exception allows you to enable authorization *before* creating the first user in the system. When active, the localhost exception allows connections from the localhost interface to create the first user on the ``admin`` database. The exception applies only when there are no users created in the MongoDB instance."
msgstr ""

#: ../source/core/authentication.txt:317
# 895b60bdfcb6468e8cdb60b9706122ef
msgid "The localhost exception changed so that these connections *only* have access to create the first user on the ``admin`` database. In previous versions, connections that gained access using the localhost exception had unrestricted access to the MongoDB instance."
msgstr ""

#: ../source/core/authentication.txt:324
# cb3ac5f65e2b41e897095d8db7b96dbc
msgid "If you use the localhost exception when deploying a new MongoDB system, the first user you create must be in the ``admin`` database with privileges to create other users, such as a user with the :authrole:`userAdmin` or :authrole:`userAdminAnyDatabase` role. See :doc:`/tutorial/enable-authentication` and :doc:`/tutorial/add-user-administrator` for more information."
msgstr ""

#: ../source/core/authentication.txt:331
# 47f29b7f6e3b4afdbae0e866d15e4320
msgid "In the case of a sharded cluster, the localhost exception applies to each shard individually as well as to the cluster as a whole. Once you create a sharded cluster and add an administrator to the :program:`mongos` instance, you must still prevent unauthorized access to the individual shards. Follow one of the following steps for each shard in your cluster:"
msgstr ""

#: ../source/core/authentication.txt:337
# 748d39f7601243c2bf30e88f86027ce6
msgid "Create an administrative user, or"
msgstr ""

#: ../source/core/authentication.txt:338
# c77d5e61d4ab44d9b8d7e671c6f4f0d1
msgid "Disable the localhost exception at startup.  To disable the localhost exception, use :setting:`setParameter` in your :doc:`configuration file </reference/configuration-options>`, or :option:`--setParameter` on the command line to set the :parameter:`enableLocalhostAuthBypass` parameter to ``0``."
msgstr ""

#: ../source/core/authentication.txt:272
# 3855bfa0b007460097b889fba3f9abc9
msgid "sharding"
msgstr ""

#: ../source/core/authentication.txt:272
# 3855bfa0b007460097b889fba3f9abc9
msgid "localhost"
msgstr ""

