ref: _wt-fsync-lock-compatibility
content: |

  {{operation}} ensures that the data files are safe to copy
  using low-level backup utilities such as ``cp``, ``scp``, or
  ``tar``. A :binary:`~bin.mongod` started using the copied
  files contains user-written data that is indistinguishable from the 
  user-written data on the locked :binary:`~bin.mongod`.

  The data files of a locked :binary:`~bin.mongod` may change due to
  operations such as :ref:`journaling syncs <journal-process>` or
  :ref:`WiredTiger snapshots <storage-wiredtiger-checkpoints>`.  While
  this has no affect on the logical data (e.g. data accessed by
  clients), some backup utilities may detect these changes and emit
  warnings or fail with errors. For more information on MongoDB-
  recommended backup utilities and procedures, see
  :doc:`/core/backups/`.

---
ref: _wt-cache-additional-constraints
content: |
   .. note::

      The {{cachesetting}} limits the size of the WiredTiger internal
      cache. The operating system will use the available free memory
      for filesystem cache, which allows the compressed MongoDB data
      files to stay in memory. In addition, the operating system will
      use any free RAM to buffer file system blocks and file system
      cache.

      To accommodate the additional consumers of RAM, you may have to
      decrease WiredTiger internal cache size.

   The default WiredTiger internal cache size value assumes that there is a
   single :binary:`~bin.mongod` instance per machine. If a single machine
   contains multiple MongoDB instances, then you should decrease the setting to
   accommodate the other :binary:`~bin.mongod`
   instances.

   If you run :binary:`~bin.mongod` in a container (e.g. ``lxc``,
   ``cgroups``, Docker, etc.) that does *not* have access to all of the
   RAM available in a system, you must set {{cachesetting}} to a value
   less than the amount of RAM available in the container. The exact
   amount depends on the other processes running in the container. See
   :data:`~hostInfo.system.memLimitMB`.
   
...
