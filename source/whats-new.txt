.. _golang-whats-new:

==========
What's New
==========

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. tip:: Release Notes
   
   To learn more about changes and updates between versions, you can
   read the `release notes
   <https://github.com/mongodb/mongo-go-driver/tags>`__ published with the driver source code.

Learn what's new in:

* :ref:`Version 1.12.1 <version-1.12.1>`
* :ref:`Version 1.12 <version-1.12>`

.. _version-1.12.1:

What's New in 1.12.1
--------------------

The 1.12 {+driver-short+} release includes the following improvements and fixes:

- The driver unpins connections when ending a session. This prevents connections
  from leaking when a user runs a transaction while connected to a load balancer.

- The driver does not throw a runtime error when you unmarshal an empty
  ``bson.RawValue`` type with an invalid type or marshal a ``nil`` pointer of a ``ReadConcern`` instance.

- Setting ``options.LogComponentAll`` as the log component correctly results in the publication of logs against all components.

.. _version-1.12:

What's New in 1.12
------------------

.. important:: Deprecation Notice

   - The ``mongo.NewClient()`` and ``client.Connect()`` methods are
     deprecated. You can create a client and connect in one call
     by using the ``mongo.Connect()`` method.

New features of the 1.12 Go driver release include: 

Queryable Encryption
~~~~~~~~~~~~~~~~~~~~

This driver version adds support for :ref:`qe-manual-feature-qe` (QE). To learn
more about the requirements for using the QE feature, see the
:ref:`Queryable Encryption Driver Compatibility Table
<qe-compatibility-reference>`.
  
The ``ClientEncryption.CreateEncryptedCollection()``
method automatically creates data encryption keys when
you create a new encrypted collection. To learn how to use the QE
feature, see the :ref:`qe-quick-start` in the Server manual.

Logging Interface
~~~~~~~~~~~~~~~~~

You can now record connection management and command execution events by
using the ``LogSink`` logging interface.

To learn more, see the :ref:`golang-logging` Fundamentals guide.

Additional BSON Marshalling Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This driver version adds features to the ``options`` package to specify
how the driver marshals and unmarshals BSON.

The following example shows how to set BSON options on your
``Client``. The options specify the following behaviors:

- The driver falls back to ``json`` :ref:`struct tags
  <golang-struct-tags>` if ``bson`` struct tags are absent.
- The driver marshals ``nil`` Go map types as empty BSON documents.
- The driver marshals ``nil`` Go slice types as empty BSON arrays.

.. code-block:: go

   bsonOpts := &options.BSONOptions{
   	UseJSONStructTags: true,
   	NilMapAsEmpty:     true,
   	NilSliceAsEmpty:   true,
   }
   options.Client().SetBSONOptions(bsonOpts)

For a full example of how to specify and implement the ``BSONOptions``
type, see the `API documentation <{+api+}/mongo#example-Connect-BSONOptions>`__.

Simplified Write Concern Specification
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This driver version simplifies the ``WriteConcern`` API. To learn more about
the changes, see :ref:`Write Concern <golang-writeconcern>`.

Additional Changes
~~~~~~~~~~~~~~~~~~

- Support for authentication with AWS IAM roles in EKS.
- Addition of the ``Cursor.SetBatchSize()`` method to allow
  specification of the size of batches fetched when iterating through a
  cursor.
- Addition of the ``UnmarshalValue()`` method to allow ummarshalling of
  BSON values marshalled with the ``MarshalValue()`` method.