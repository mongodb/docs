stepnum: 1
title: Create a keyfile.
ref: deploy-repset-generate-keyfile
level: 4
pre: |
  The contents of the keyfile serves as the shared password for the members 
  of the replica set. The content of the keyfile must be the same for all 
  :program:`mongod` instances in the replica set.
  
  You can generate a keyfile using any method you choose. The contents of 
  the keyfile must be between 6 and 1024 characters long. The keyfile must have 
  read permission for the file owner, and no group or world permissions.

  The following operation uses ``openssl`` to generate a complex 
  pseudo-random 1024 character string to use for a keyfile. It then uses 
  ``chmod`` to apply user read permissions for the file owner only:
action:
  language: sh
  code: |
    openssl rand -base64 755 > <path-to-keyfile>
    chmod 400 <path-to-keyfile>
post: |
  See :ref:`internal-auth-keyfile` for additional details  and requirements
  for using keyfiles.
---
stepnum: 2
title: Copy the keyfile to each replica set member.
ref: deploy-repset-copy-keyfile
level: 4
pre: |
  Copy the keyfile to each server hosting a replica set member. 
---
stepnum: 3
title: Enforce access control on each member of the replica set.
level: 4
ref: deploy-repset-start-members
pre: |
  Running a :program:`mongod` with the ``keyFile`` parameter enforces both 
  :doc:`/core/security-internal-authentication` and 
  :doc:`/core/authorization`.

  For *each* :program:`mongod` in the replica set, start the 
  :program:`mongod` using either a configuration file or the command line.
  
  .. important::
     You cannot change the name of a replica set after initiating it. 
     Choose an appropriate replica set name at this stage to reduce 
     complications later.
  
action:
  - pre: |
      **Configuration File**
      
      If using a configuration file, set the :setting:`security.keyFile` option
      to the keyfile's path, and the :setting:`replication.replSetName` option 
      to the replica set name:
    language: yaml
    code: |
      security:
        keyFile: <path-to-keyfile>
      replication:
        replSetName: <setname>
  - pre: |
      Start the :program:`mongod` using the configuration file:
    language: shell
    code: |
      mongod --config <path-to-config-file>
    post: |
      For more information on the configuration file, see 
      :doc:`configuration options</reference/configuration-options>`.
  - pre: |
      **Command Line**
      
      If using the command line option, start the :program:`mongod` with the
      ``--keyFile`` and ``--replSet`` parameters:
    language: sh
    code: |
       mongod --keyFile <path-to-keyfile> --replSet <setname>
post: |
  For more information on startup parameters, 
  see the :program:`mongod` reference page. 
  
  Include additional settings as appropriate to your deployment.
---
stepnum: 4
title: Connect to a member of the replica set over the localhost interface.
level: 4
ref: deploy-repset-connect-to-member
pre: |
  The :ref:`localhost-exception` allows clients connected over the 
  localhost interface to create users on a :program:`mongod` 
  enforcing access control. After creating the first user, 
  the :ref:`localhost-exception` closes.

  Connect to one of the replica set members over the 
  :ref:`localhost interface<localhost-exception>`. You must run the
  :program:`mongo` shell on the same physical machine as the target
  :program:`mongod`.
---
stepnum: 5
title: Initiate the replica set using a configuration document.
level: 4
ref: deploy-repset-initiate
pre: | 
  The :method:`rs.initiate()` method initiates the replica set, and 
  can take an optional configuration document that describes 
  each member of the replica set.
  
  The configuration document requires at minimum the 
  :rsconf:`_id` and :rsconf:`members` fields. The :rsconf:`members` 
  field is an array, and requires a document per member of the replica 
  set containing the :rsconf:`members[n]._id` and 
  :rsconf:`members[n].host` fields. 
  
  The :rsconf:`_id` *must* match the ``--replSet`` parameter 
  passed to the :program:`mongod`.
  
  See :doc:`/reference/replica-configuration` for more information on 
  replica set configuration documents.
action:
  - pre: |
      The following example initates a three member replica set. 
      
  - pre: |
    language: javascript
    code: |
      rs.initiate( 
        {
          _id : <replicaSetName>,
          members: [
            { _id : 0, host : "mongo1.example.net:27017" },
            { _id : 1, host : "mongo2.example.net:27017" },
            { _id : 2, host : "mongo3.example.net:27017" }
          ]
        }
      )
post: |
  :method:`rs.initiate()` triggers an :term:`election` and 
  elects one of the members to be the :term:`primary`.
  
  Connect to the primary before continuing. Use :method:`rs.status()` to 
  locate the primary member.
---
stepnum: 6
title: Create the user administrator.
level: 4
ref: deploy-repset-user-admin
pre: |
  .. important::
     After you create the first user, the :ref:`localhost exception
     <localhost-exception>` is no longer available.
     
     The first user must have privileges to create other users, such 
     as a user with the :authrole:`userAdminAnyDatabase`. This ensures 
     that you can create additional users after the :ref:`localhost-exception`
     closes. 
     
     If at least one user does *not* have privileges to create users, 
     once the localhost exception closes you may be unable to create
     or modify users with new privileges, and therefore unable to 
     access necessary operations.
  
  Add a user using the :method:`db.createUser()` method. The user should
  have at minimum the :authrole:`userAdminAnyDatabase` role on the 
  ``admin`` database. 
  
  You must be connected to the :term:`primary` to create users.
  
  The following example creates the user ``userAdmin`` on the
  ``admin`` database. Change the ``pwd`` to be a password of your
  own choosing:

  .. important::
     Passwords should be random, long, and complex to ensure system security
     and to prevent or delay malicious access. 

action:
  pre: |
  
  language: javascript
  code: |
    admin = db.getSiblingDB("admin")
    admin.createUser(
      {
        user: "userAdmin",
        pwd: "<password>",
        roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
      }
    )
post: |

  See :ref:`database-user-roles` for a full list of built-in roles and
  related to database administration operations.
---
stepnum: 7
title: Authenticate as the user administrator.
ref: deploy-repset-auth-user
level: 4
pre: |
  Authenticate to the ``admin`` database using the ``userAdmin`` user.
action:
  - pre: |
      Use :method:`db.auth()` to authenticate as the user administrator. 
    language: javascript
    code: |
      admin = db.getSiblingDB("admin")
      admin.auth("userAdmin", "<password>" )
  - pre: |
      Alternatively, connect a new :program:`mongo` shell to the primary 
      replica set member using the ``-u <username>``, ``-p <password>``, and
      the ``--authenticationDatabase`` parameters.
    language: sh
    code: |
      mongo -u "userAdmin" -p "<password>" --authenticationDatabase "admin"
---
stepnum: 8
title: Create the cluster administrator.
level: 4
ref: deploy-repset-add-user-cluster
pre: |
  The :authrole:`clusterAdmin` role grants access to 
  replication operations.
action:
  - pre: |
      Create a cluster administrator user and assign the 
      :authrole:`clusterAdmin role to the ``admin`` database:
    language: sh
    code: |
      admin = db.getSiblingDB("admin")
      admin.createUser(
        {
          "user" : "clusterAdmin",
          "pwd" : "changeme",
          roles: [ { "role" : "clusterAdmin", "db" : "admin" } ] 
        }
      )
post: |
  See :ref:`cluster-admin-roles` for a full list of built-in roles related to 
  replica set and sharded cluster operations.
---
stepnum: 9
title: Create additional users (Optional).
ref: deploy-repset-add-addtl-users
level: 4
pre: |
  Create users to allow clients to connect and interact with the replica set. 
  See :ref:`database-user-roles` for basic built-in roles to use in creating 
  read-only and read-write users.
  
  You may also want additional administrative users.
  For more information on users, see :doc:`/core/security-users`.
---
stepnum: 10
title: Authenticate as cluster admin (Optional).
ref: deploy-repset-auth-cluster
level: 4
pre: |
  You cannot perform replica operations such as configuring members 
  using the ``userAdmin`` user. The underlying :authrole:`userAdminAnyDatabase`
  role does not have the required privileges.
  
  Authenticate to the ``admin`` database as the ``clusterAdmin`` using the 
  :method:`db.auth()` method or a new :program:`mongo` shell with the 
  ``username``, ``password``, and ``authenticationDatabase`` parameters.
...