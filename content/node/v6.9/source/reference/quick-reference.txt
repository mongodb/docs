.. meta::
   :robots: noindex, nosnippet 

.. _node-quick-reference:

===============
Quick Reference
===============

.. default-domain:: mongodb

.. facet::
   :name: genre 
   :values: reference

.. meta:: 
   :description: See Node.js driver code examples of frequently-used MongoDB commands and links to their related reference and API documentation.
   :keywords: node.js, code example

This page shows the driver syntax for several MongoDB commands and links to
their related reference and API documentation.

Compatibility
-------------

.. |page-topic| replace:: execute commands
.. |link-topic-ing| replace:: performing common CRUD operations in the Atlas UI

.. |atlas-url| replace:: :atlas:`Create, View, Update, and Delete Documents </atlas-ui/documents>`

.. include:: /includes/fact-atlas-compatible.rst
.. include:: /includes/fact-atlas-link.rst

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Command
     - Syntax

   * - | **Find a Document**
       |
       | `API Documentation <{+api+}/classes/Collection.html#findOne>`__
       | :ref:`Usage Example <node-usage-findone>`
       | :ref:`Query Operations <node-query>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             await coll.findOne({ title: 'Hamlet' });

          .. output::
             :language: js
             :visible: false

             { title: 'Hamlet', type: 'movie', ... }

   * - | **Find Multiple Documents**
       |
       | `API Documentation <{+api+}/classes/Collection.html#find>`__
       | :ref:`Usage Example <node-usage-find>`
       | :ref:`Fundamentals <node-fundamentals-retrieve-data>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             coll.find({ year: 2005 });

          .. output::
             :language: js
             :visible: false

             [
               { title: 'Christmas in Boston', year: 2005, ... },
               { title: 'Chicken Little', year: 2005, ... },
               ...
             ]

   * - | **Insert a Document**
       |
       | `API Documentation <{+api+}/classes/Collection.html#insert>`__
       | :ref:`Usage Example <node-usage-insert>`
       | :ref:`Fundamentals <node-fundamentals-insert-data>`

     - .. code-block:: javascript
          :copyable: true

          await coll.insertOne({ title: 'Jackie Robinson' });

   * - | **Insert Multiple Documents**
       |
       | `API Documentation <{+api+}/classes/Collection.html#insertMany>`__
       | :ref:`Usage Example <node-usage-insertmany>`
       | :ref:`Fundamentals <node-fundamentals-insert-data>`

     - .. code-block:: javascript
          :copyable: true

          await coll.insertMany([
            { title: 'Dangal', rating: 'Not Rated' },
            { title: 'The Boss Baby', rating: 'PG' }
           ]);

   * - | **Update a Document**
       |
       | `API Documentation <{+api+}/classes/Collection.html#update>`__
       | :ref:`Usage Example <node-usage-updateone>`
       | :ref:`Fundamentals <node-fundamentals-change-a-document>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             await coll.updateOne(
               { title: 'Amadeus' },
               { $set: { 'imdb.rating': 9.5 } }
             );

          .. output::
             :language: js
             :visible: false

             { title: 'Amadeus', imdb: { rating: 9.5, ... } }

   * - | **Update Multiple Documents**
       |
       | `API Documentation <{+api+}/classes/Collection.html#updateMany>`__
       | :ref:`Usage Example <node-usage-updatemany>`
       | :ref:`Fundamentals <node-fundamentals-change-a-document>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             await coll.updateMany(
               { year: 2001 },
               { $inc: { 'imdb.votes': 100 } }
             );

          .. output::
             :language: js
             :visible: false

             [
               { title: 'A Beautiful Mind', year: 2001, imdb: { votes: 826257, ... },
               { title: 'Shaolin Soccer', year: 2001, imdb: { votes: 65442, ... },
               ...
             ]

   * - | **Update Arrays in Documents**
       |
       | `API Documentation <{+api+}/classes/Collection.html#update>`__
       | :ref:`Fundamentals <node-fundamentals-update-array>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             await coll.updateOne(
               { title: 'Cosmos' },
               { $push: { genres: 'Educational' } }
             ):

          .. output::
             :language: js
             :visible: false

             { title: 'Cosmos', genres: [ 'Documentary', 'Educational' ] }

   * - | **Replace a Document**
       |
       | `API Documentation <{+api+}/classes/Collection.html#replaceOne>`__
       | :ref:`Usage Example <node-usage-replaceone>`
       | :ref:`Fundamentals <node-fundamentals-replaceone>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             await coll.replaceOne(
               { name: 'Deli Llama', address: '2 Nassau St' },
               { name: 'Lord of the Wings', zipcode: 10001 }
             );

          .. output::
             :language: js
             :visible: false

             { name: 'Lord of the Wings', zipcode: 10001 }

   * - | **Delete a Document**
       |
       | `API Documentation <{+api+}/classes/Collection.html#deleteOne>`__
       | :ref:`Usage Example <node-usage-deleteone>`
       | :ref:`Fundamentals <node-fundamentals-delete>`

     - .. code-block:: javascript
          :copyable: true

          await coll.deleteOne({ title: 'Congo' });

   * - | **Delete Multiple Documents**
       |
       | `API Documentation <{+api+}/classes/Collection.html#deleteMany>`__
       | :ref:`Usage Example <node-usage-deletemany>`
       | :ref:`Fundamentals <node-fundamentals-delete>`

     - .. code-block:: javascript
          :copyable: true

          await coll.deleteMany({ title: { $regex: /^Shark.*/ } });

   * - | **Bulk Write**
       |
       | `API Documentation <{+api+}/classes/Collection.html#bulkWrite>`__
       | :ref:`Usage Example <node-usage-bulk>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             await coll.bulkWrite([
               {
                 insertOne: {
                   document: {
                     title: 'A New Movie',
                     year: 2022
                   }
                 }
               },
               {
                 deleteMany: {
                   filter: { year: { $lt: 1970 } }
                 }
               }
             ]);

          .. output::
             :language: js
             :visible: false

             BulkWriteResult {
               result: {
                 ...
               },
               ...
             }

   * - | **Watch for Changes**
       |
       | `API Documentation <{+api+}/classes/Collection.html#watch>`__
       | :ref:`Usage Example <node-usage-watch>`
       | :ref:`Fundamentals <node-fundamentals-watch>`

     - .. code-block:: javascript
          :copyable: true

          coll.watch([ { $match: { year: { $gte: 2022 } } } ]);

   * - | **Access Data from a Cursor Iteratively**
       |
       | :ref:`Fundamentals <node-fundamentals-async-iteration>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             const cursor = coll.find();
             for await (const doc of cursor) {
                console.dir(doc);
             } 

          .. output::
             :language: js
             :visible: false

             [
               { title: '2001: A Space Odyssey', ... },
               { title: 'The Sound of Music', ... },
               ...
             ]

   * - | **Access Data from a Cursor as an Array**
       |
       | `API Documentation <{+api+}/classes/FindCursor.html#toArray>`__
       | :ref:`Fundamentals <node-fundamentals-cursor-array>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             const cursor = coll.find();
             const results = await cursor.toArray();

          .. output::
             :language: js
             :visible: false

             [
               { title: '2001: A Space Odyssey', ... },
               { title: 'The Sound of Music', ... },
               ...
             ]

   * - | **Count Documents**
       |
       | `API Documentation <{+api+}/classes/Collection.html#countDocuments>`__
       | :ref:`Usage Example <node-usage-count>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             await coll.countDocuments({ year: 2000 });

          .. output::
             :language: js
             :visible: false

             618

   * - | **List the Distinct Documents or Field Values**
       | `API Documentation <{+api+}/classes/Collection.html#distinct>`__
       | :ref:`Usage Example <node-usage-distinct>`
       | :ref:`Fundamentals <node-fundamentals-limit>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             await coll.distinct('year');

          .. output::
             :language: js
             :visible: false

             [ 1891, 1893, 1894, 1896, 1903, ... ]

   * - | **Limit the Number of Documents Retrieved**
       |
       | `API Documentation <{+api+}/classes/FindCursor.html#limit>`__
       | :ref:`Fundamentals <node-fundamentals-limit>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             coll.find().limit(2);

          .. output::
             :language: js
             :visible: false

             [
               { title: 'My Neighbor Totoro', ... },
               { title: 'Amélie', ... }
             ]

   * - | **Skip Retrieved Documents**
       |
       | `API Documentation <{+api+}/classes/FindCursor.html#skip>`__
       | :ref:`Fundamentals <node-fundamentals-skip>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             coll.find({ title: { $regex: /^Rocky/} }, { skip: 2 });

          .. output::
             :language: js
             :visible: false

             [
               { title: 'Rocky III', ... },
               { title: 'Rocky IV', ... },
               { title: 'Rocky V'}, ... }
             ]

   * - | **Sort the Documents When Retrieving Them**
       |
       | `API Documentation <{+api+}/classes/FindCursor.html#sort>`__
       | :ref:`Fundamentals <node-fundamentals-sort>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             coll.find().sort({ year: 1});

          .. output::
             :language: js
             :visible: false

             [
               { title: 'Newark Athlete', year: 1891, ... },
               { title: 'Blacksmith Scene', year: 1893, ...},
               { title: 'Dickson Experimental Sound Film', year: 1894},
               ...
             ]

   * - | **Project Document Fields When Retrieving Them**
       |
       | `API Documentation <{+api+}/classes/FindCursor.html#project>`__
       | :ref:`Fundamentals <node-fundamentals-project>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             coll.find().project({ _id: 0, year: 1, imdb: 1 });

          .. output::
             :language: js
             :visible: false

             [
               { year: 2012, imdb: { rating: 5.8, votes: 230, id: 8256 }},
               { year: 1985, imdb: { rating: 7.0, votes: 447, id: 1654 }},
               ...
             ]

   * - | **Create an Index**
       |
       | `API Documentation <{+api+}/classes/Collection.html#createIndex>`__
       | :ref:`Fundamentals <node-fundamentals-indexes>`

     - .. code-block:: javascript
          :copyable: true

          await coll.createIndex({ title: 1, year: -1 });

   * - | **Search Text**
       |
       | `API Documentation <{+api+}/classes/Collection.html#find>`__
       | :ref:`Fundamentals <node-fundamentals-text>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: js

             // only searches fields with text indexes
             coll.find({ $text: { $search: 'zissou' } });

          .. output::
             :language: js
             :visible: false

             [
               { title: 'The Life Aquatic with Steve Zissou', ... }
             ]

   * - | **Install the Driver Dependency**

     - .. code-block:: javascript
          :caption: package.json
          :copyable: true

          "dependencies": {
            "mongodb": "^{+version+}",
            ...
          }
