===================
$slice (projection)
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. projection:: $slice

   The :projection:`$slice` projection operator specifies the number of
   elements in an array to return in the query result.

   .. see:: Disambiguation

      For information on limiting the size of an array during an update
      with :update:`$push`, see the :update:`$slice` modifier instead.

      For aggregation operator, see :expression:`$slice` aggregation
      operator instead.

Syntax
------

The :projection:`$slice` has one of the following syntax forms:

.. code-block:: javascript
   :emphasize-lines: 3

   db.collection.find( 
      <query>, 
      { <arrayField>: { $slice: <number> } } 
   );

or

.. code-block:: javascript
   :emphasize-lines: 3

   db.collection.find( 
      <query>, 
      { <arrayField>: { $slice: [ <number>, <number> ] } } 
   );

.. list-table::
   :header-rows: 1

   * - Value
     - Description
     
   * - ``$slice: <number>``
   
     - Specifies the number of elements to return in the
       ``<arrayField>``. For ``<number>``:

       - Specify a positive number ``n`` to return the first ``n``
         elements.

       - Specify a negative number ``n`` to return the last ``n``
         elements.

       If the ``<number>`` is greater than the number of array
       elements, the query returns all array elements.

   * - ``$slice: [ <number to skip>, <number to return> ]``

     - Specifies the number of elements to return in the
       ``<arrayField>`` after skipping the specified number of elements
       starting from the first element. You must specify both elements.

       For the ``<number to skip>``:

       - Specify a positive number ``n`` to skip ``n`` elements from
         the start of the array; i.e. 0th index position. Based on a
         zero-based array index, ``1`` indicates the starting position
         of the 2nd element, etc. If ``n`` is greater than the number
         of array elements, the query returns an empty array for the
         ``<arrayField>``.

       - Specify a negative number ``n`` to skip backward ``n``
         elements from the start of the array; i.e. 0th index position
         Based on a zero-based array index (i.e. the first element is
         at index 0), ``-1`` indicates the starting position of the
         last element, etc. If the absolute value of the negative
         number is greater than the number of array elements, the
         starting position is the start of the array.

       For the ``<number to return>``, you must specify a 
       *positive* number ``n`` to return the next ``n`` elements,
       starting after skipping the specified number.

Behavior
--------


``$slice`` of Embedded Array 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/projection-slice-operator-inclusion.rst

View Restriction
~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/views-unsupported-projection-$slice.rst

``$`` Positional Operator and ``$slice`` Restriction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/projection-positional-operator-slice-full.rst

Path Collision: ``$slice`` of an Array and Embedded Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/projection-path-collision-slice-embedded-field-full.rst

.. |findoperation| replace:: :method:`find <db.collection.find()>` and :method:`findAndModify <db.collection.findAndModify()>`

.. seealso:: :ref:`find-projection`

Examples
--------

Create an example collection ``posts`` with the following documents:

.. code-block:: javascript

   db.posts.insertMany([
      {
        _id: 1, 
        title: "Bagels are not croissants.", 
        comments: [ { comment: "0. true" }, { comment: "1. croissants aren't bagels."} ]
      },
      {
        _id: 2, 
        title: "Coffee please.", 
        comments: [ { comment: "0. fooey" }, { comment: "1. tea please" }, { comment: "2. iced coffee" }, { comment: "3. cappuccino" }, { comment: "4. whatever" } ]
      }
   ])

Return an Array with Its First 3 Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation uses the :projection:`$slice` projection
operator on the ``comments`` array to return the array with its first
three elements. If the array has less than three elements, all elements
in the array are returned.

.. code-block:: javascript

   db.posts.find( {}, { comments: { $slice: 3 } } )

The operation returns the following documents:

.. code-block:: javascript

   {
      "_id" : 1, 
      "title" : "Bagels are not croissants.", 
      "comments" : [ { "comment" : "0. true" }, { "comment" : "1. croissants aren't bagels." } ] 
   }
   { 
      "_id" : 2,
      "title" : "Coffee please.",
      "comments" : [ { "comment" : "0. fooey" }, { "comment" : "1. tea please" }, { "comment" : "2. iced coffee" } ]
   }

Return an Array with Its Last 3 Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation uses the :projection:`$slice` projection
operator on the ``comments`` array to return the array with its last
three elements. If the array has less than three elements, all elements
in the array are returned.

.. code-block:: javascript

   db.posts.find( {}, { comments: { $slice: -3 } } )

The operation returns the following documents:

.. code-block:: javascript

   { 
      "_id" : 1, 
      "title" : "Bagels are not croissants.",
      "comments" : [ { "comment" : "0. true" }, { "comment" : "1. croissants aren't bagels." } ]
   }
   { 
      "_id" : 2,
      "title" : "Coffee please.",
      "comments" : [ { "comment" : "2. iced coffee" }, { "comment" : "3. cappuccino" }, { "comment" : "4. whatever" } ]
   }

Return an Array with 3 Elements After Skipping the First Element
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation uses the :projection:`$slice` projection
operator on the ``comments`` array to:

- Skip the first element such that the second element is the starting
  point.

- Then, return three elements from the starting point.

If the array has less than three
elements after the skip, all remaining elements are returned.

.. code-block:: javascript

   db.posts.find( {}, { comments: { $slice: [ 1, 3 ] } } )

The operation returns the following documents:

.. code-block:: javascript

   {
      "_id" : 1,
      "title" : "Bagels are not croissants.",
      "comments" : [ { "comment" : "1. croissants aren't bagels." } ]
   }
   
   {
      "_id" : 2,
      "title" : "Coffee please.",
      "comments" : [ { "comment" : "1. tea please" }, { "comment" : "2. iced coffee" }, { "comment" : "3. cappuccino" } ]
   }

Return an Array with 3 Elements After Skipping the Last Element
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation uses the :projection:`$slice` projection
operator on the ``comments`` array to

- Skip backwards from the first element such that the last element is
  the starting point.

- Then, return three elements from the starting point.

If the array has less than three elements after the skip, all remaining
elements in the array are returned.

.. code-block:: javascript

   db.posts.find( {}, { comments: { $slice: [ -1, 3 ] } } )

The operation returns the following documents:

.. code-block:: javascript

   {
      "_id" : 1,
      "title" : "Bagels are not croissants.",
      "comments" : [ { "comment" : "1. croissants aren't bagels." } ]
   }
   {
      "_id" : 2,
      "title" : "Coffee please.",
      "comments" : [ { "comment" : "4. whatever" } ]
   }

