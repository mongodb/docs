===============
|service| Users
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

The following resources give access to |service| users. You must have the
``Owner`` role for the group to use these resources:

- ``/groups/GROUP-ID/users``

- ``/users``

.. note::

   |service| users are separate from MongoDB users. MongoDB users are accessed
   through the ``databaseUsers`` resource.

Endpoints
---------

.. _api-get-all-users-in-group:

Get All Users in a Group
~~~~~~~~~~~~~~~~~~~~~~~~

Retrieve all users in a group.

.. code-block:: none

   GET /api/atlas/v1.0/groups/GROUP-ID/users

Get a User by ID
~~~~~~~~~~~~~~~~

.. code-block:: none

   GET /api/atlas/v1.0/users/USER-ID

Get a User by Name
~~~~~~~~~~~~~~~~~~

.. code-block:: none

   GET /api/atlas/v1.0/users/byName/USER-NAME

Create a User
~~~~~~~~~~~~~

.. code-block:: none

   POST /api/atlas/v1.0/users

To create a user, you must include all the fields in the ``/users`` entity.

Update a User
~~~~~~~~~~~~~

.. code-block:: none

   PATCH /api/atlas/v1.0/users/USER-ID

Update the fields returned from the server. Unspecified fields will preserve
their current values. You cannot edit the user's password.

Sample Entity
-------------

.. code:: javascript

   {
     "id": "xxx",
     "username": "somebody",
     "password": "abc123",
     "emailAddress": "somebody@example.com",
     "mobileNumber": "2125551234",
     "firstName": "John",
     "lastName": "Doe",
     "roles": [
         {
           "groupId": "8491812938cbda83918c",
           "roleName": "GROUP_OWNER"
         },
         {
           "groupId": "4829cbda839cbdac3819",
           "roleName": "GROUP_READ_ONLY"
         }
     ],
     "links": [ ... ]
   }

Entity Fields
-------------

.. list-table::
   :widths: 10 10 80
   :header-rows: 1

   * - ``Name``
     - Type
     - Description

   * - ``id``
     - string
     - Unique identifier.

   * - ``username``
     - string
     - |service| username.

   * - ``password``
     - string
     - Password. This field is NOT included in the entity returned from the
       server. It can only be sent in the entity body when creating a new user.

   * - ``emailAddress``
     - string
     - Email address.

   * - ``mobileNumber``
     - string
     - The mobile number |service| uses when sending alert notification via SMS.

   * - ``firstName``
     - string
     - First name.

   * - ``lastName``
     - string
     - Last name.

   * - ``roles``
     - object array
     - Role assignments.

   * - ``roles.groupId``
     - string
     - The group ID in which the user has the specified role.

   * - ``roles.roleName``
     - string
     - The name of the role. The ``users`` resource returns all the roles the
       user has in both |service| and |mms|. Possible values are:

       - ``GROUP_OWNER``
       - ``GROUP_READ_ONLY``
       - ``GROUP_AUTOMATION_ADMIN`` (|mms|)
       - ``GROUP_BACKUP_ADMIN`` (|mms|)
       - ``GROUP_MONITORING_ADMIN`` (|mms|)
       - ``GROUP_OWNER`` (|mms|)
       - ``GROUP_READ_ONLY`` (|mms|)
       - ``GROUP_USER_ADMIN`` (|mms|)

Links
-----

.. list-table::
   :header-rows: 1

   * - ``Relation``
     - Description

   * - ``self``
     - Me

   * - ``http://mms.mongodb.com/whitelist``
     - The user's API whitelist.

Examples
--------

Get All Users in a Group
~~~~~~~~~~~~~~~~~~~~~~~~

Request
```````

.. code-block:: none

   curl -u "username:apiKey" --digest -i "https://cloud.mongodb.com/api/atlas/v1.0/groups/535683b3794d371327b/users"

Response
````````

.. code-block:: none

   HTTP/1.1 200 OK

   {
     "totalCount": 5,
     "results": [ {
       "id" : "5329c8dfe4b0b07a83d67d",
       "username" : "joe",
       "emailAddress" : "joe@example.com",
       "firstName" : "John",
       "lastName" : "Doe",
       "roles" : [ {
         "groupId" : "535683b3794d371327b",
         "roleName" : "GROUP_OWNER"
       }, {
         "groupId" : "6d3628d022db4cbc26e",
         "roleName" : "GROUP_READ_ONLY"
       } ],
       "links": [ ... ]
     }, ...  ],
     "links": [ ... ]
   }

Get a User by ID
~~~~~~~~~~~~~~~~

Request
```````

.. code-block:: none

   curl -u "username:apiKey" --digest -i "https://cloud.mongodb.com/api/atlas/v1.0/users/5dc19ce4b00835ff81e2eb"

Response
````````

.. code-block:: none

   HTTP/1.1 200 OK

   {
     "id" : "5dc19ce4b00835ff81e2eb",
     "username" : "jane",
     "emailAddress" : "jane@example.com",
     "firstName" : "Jane",
     "lastName" : "D'oh",
     "roles" : [ {
       "groupId" : "535683b3794d371327b",
       "roleName" : "GROUP_OWNER"
     } ],
     "links": [ ... ]
   }

Get a User by Name
~~~~~~~~~~~~~~~~~~

Request
```````

.. code-block:: none

   curl -u "username:apiKey" --digest -i "https://cloud.mongodb.com/api/atlas/v1.0/users/byName/jane"

Response
````````

.. code-block:: none

   HTTP/1.1 200 OK

   {
     "id" : "5dc19ce4b00835ff81e2eb",
     "emailAddress" : "jane@example.com",
     "firstName" : "Jane",
     "lastName" : "D'oh",
     "roles" : [ {
       "groupId" : "535683b3794d371327b",
       "roleName" : "GROUP_OWNER"
     } ],
     "links": [ ... ]
   }

Create a User
~~~~~~~~~~~~~

Request
```````

.. code-block:: none

   curl -u "username:apiKey" -H "Content-Type: application/json" --digest -i -X POST "https://cloud.mongodb.com/api/atlas/v1.0/users" --data '
   {
     "username": "simon",
     "emailAddress": "simon@example.com",
     "firstName": "Simon",
     "lastName": "Smith",
     "password": "passw0rd!",
     "roles": [ {
       "groupId": "535683b3794d371327b",
       "roleName": "GROUP_READ_ONLY"
     } ]
   }'

Response
````````

.. code-block:: none

   HTTP/1.1 201 Created

   {
     "id" : "4fef83b201a482549032eb",
     "username": "simon",
     "emailAddress": "simon@example.com",
     "firstName": "Simon",
     "lastName": "Smith",
     "roles": [ {
       "groupId": "535683b3794d371327b",
       "roleName": "GROUP_READ_ONLY"
     } ],
     "links" : [ ... ]
   }

Update a User
~~~~~~~~~~~~~

Request
```````

.. code-block:: none

   curl -u "username:apiKey" -H "Content-Type: application/json" --digest -i -X PATCH "https://cloud.mongodb.com/api/atlas/v1.0/users/4fef83b201a482549032eb" --data '
   {
     "emailAddress": "simon.jones@example.com",
     "lastName": "Jones"
   }'

Response
````````

.. code-block:: none

   HTTP/1.1 200 OK

   {
     "id" : "4fef83b201a482549032eb",
     "username": "simon",
     "emailAddress": "simon.jones@example.com",
     "firstName": "Simon",
     "lastName": "Jones",
     "roles": [ {
       "groupId": "535683b3794d371327b",
       "roleName": "GROUP_READ_ONLY"
     } ],
     "links" : [ ... ]
   }
