.. _php-upgrade:

========================
Upgrade Library Versions
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: compatibility, backwards compatibility

Overview
--------

On this page, you can learn about the changes you must make to your application
when you upgrade to a new version of the {+php-library+}. This page also includes
how to upgrade your PHP extension to a new version.

How to Upgrade
--------------

Before you upgrade, perform the following actions:

- Address any breaking changes between the library version
  your application is using and your planned upgrade version in the
  :ref:`Breaking Changes <php-breaking-changes>` section.

- Ensure the new {+library-short+} version is compatible with the {+mdb-server+} versions
  your application connects to and the PHP version your
  application compiles with. For version compatibility information, see the
  :ref:`Compatibility Changes <php-compat-changes>` section and the 
  :ref:`{+php-library+} Compatibility <php-compatibility>` page.

.. tip::

   To ensure compatibility across {+mdb-server+} versions when
   upgrading library versions, use the :ref:`{+stable-api+} <php-stable-api>`.

Major and minor versions of the PHP extension and library are in sync. This
means you can run an upgrade command for the extension to also upgrade the PHP 
library. 

Patch versions (x.x.x) for the library and extension are not in sync. Run the 
respective commands to update to the patch versions for the library or extension. 

To upgrade the PHP extension, replace ``<version-number>`` with the version number 
you want to upgrade to and run the following command in your application's 
directory:

.. code-block:: bash

   pecl upgrade mongodb-<version-number>

To upgrade the PHP library version, replace ``<version-number>`` with the 
version number you want to upgrade to and run the following command in your 
application's directory:

.. code-block:: bash

   composer require mongodb/mongodb:<version-number>

Detailed installation instructions may be found in the 
:php:`PHP.net documentation <mongodb.installation>`.

.. _php-breaking-changes:

Breaking Changes
----------------

A breaking change is a change of a convention or a behavior starting in a specific
version of the library. This type of change may prevent your application from working
properly if not addressed before upgrading the library.

The breaking changes in this section are categorized by the library
version that introduced them. Only major library versions introduce
breaking changes. When upgrading versions, address all
the breaking changes between the current and upgrade versions.

For more information on release changes, see the release notes and associated 
JIRA tickets for each release on `GitHub <https://github.com/mongodb/mongo-php-library/releases>`__.

Version 1.0 Breaking Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To view breaking changes for this major release, see the 
:github:`release notes </mongodb/mongo-php-library/releases/tag/1.0.0>`
on GitHub.

.. _php-compat-changes:

Compatibility Changes
---------------------

This section describes the {+mdb-server+} and {+language+} compatibility
changes introduced in {+php-library+} version releases.

Version 1.x Compatibility Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This library version introduces the following compatibility changes:

- Drops support for {+mdb-server+} 3.6 in {+php-library+} v1.20

.. tip:: Earlier Library Versions

   To view compatibility changes for {+php-library+} versions 1.19 and earlier, see the
   release notes and associated JIRA tickets for each release on `GitHub
   <https://github.com/mongodb/mongo-php-library/releases>`__.  
