======
Create
======

.. default-domain:: mongodb

*Create* operations add new :term:`documents <document>` to a
:term:`collection`. A document is the equivalent of an :term:`RDBMS`
record, and a collection is the equivalent of an RDBMS table. *Create*
operations are one of the three categories of
:doc:`/core/write-operations`, along with :doc:`/core/update` and
:doc:`/core/delete` operations.

You can create documents in a MongoDB collection using either of the
following *create* operations:

- :ref:`Inserts <crud-create-insert>`, which are MongoDB's core create
  operation.

- :ref:`Updates that include the upsert flag <crud-create-update>`.
  These updates create a new document if no document matches the update
  criteria.

The create operations have the following behaviors:

- If you insert a document *without* the :term:`_id` field, the client
  library or :program:`mongod` instance adds an ``_id`` field and
  populates the field with a unique :term:`ObjectId <objectid>`.

- For operations with :ref:`write concern <write-concern>`, if you
  specify an ``_id`` field, the field must be unique within the
  collection. Otherwise :program:`mongod` returns a duplicate key
  exception.

  .. note::

     .. include:: /includes/fact-write-concern.rst

.. include:: /includes/fact-document-max-size.rst

.. include:: /includes/fact-document-field-name-restrictions.rst

.. _crud-create-insert:

Insert Operations
-----------------

The :method:`~db.collection.insert()` method is the primary method to
insert documents into a MongoDB collection and has the following syntax:

.. code-block:: javascript

   db.collection.insert( <document> )

.. admonition:: Corresponding Operation in SQL

   The :method:`~db.collection.insert()` method is analogous
   to the ``INSERT`` statement.

.. example:: The following inserts a document with three fields:

   .. code-block:: javascript

      db.products.insert( { _id: 10, item: "card", qty: 15 } )

For further examples, see :method:`~db.collection.insert()` and
:ref:`crud-create-insert-save`.

.. _crud-create-update:

Update Operations that Include the ``upsert`` Flag
--------------------------------------------------

An :method:`~db.collection.update()` operation with the ``upsert`` flag
creates a new document *if no document matches the update's query
criteria*. The operation has the following syntax
[#previous-versions-upsert]_:

.. code-block:: javascript

   db.collection.update( <query> , <update> , { upsert : true } )

If no document matches the ``<query>`` criteria, the ``upsert`` creates
a new document with either:

- the fields and values of the ``<update>`` parameter, or

- the fields and values of the both the ``<query>`` and ``<update>``
  parameters.

The ``upsert`` creates a document with data from both ``<query>`` and
``<update>`` if the ``<update>`` parameter *only uses update operators*.
See :ref:`update-operators`.

.. example:: The following ``upsert`` operation either updates a
   document or creates a new one:

   .. code-block:: javascript

       db.favorites.update( { author : "Dante" } , { $inc : { votes : 1 } } , { upsert : true } )

   If no document contains ``{ author : "Dante" }``, the ``upsert``
   creates a new document with an auto-generated ``_id``:

   .. code-block:: javascript

      { "_id" : ObjectId("51e01a2d9c6ae665454e301b"), "author" : "Dante", "votes" : 1 }

   If one or more documents exist with ``{ author : "Dante" }``, the
   ``upsert`` does not create a new document but instead increments the
   ``votes`` field in an existing document.

For further examples, see :method:`~db.collection.update()` and
:ref:`crud-create-save`.

.. [#previous-versions-upsert]
   .. include:: /includes/fact-upsert-multi-options.rst
