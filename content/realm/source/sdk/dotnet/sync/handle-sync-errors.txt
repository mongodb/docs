.. meta::
   :robots: noindex, nosnippet

.. _dotnet-handle-sync-errors:

==========================================
Handle Sync Errors and Timeouts - .NET SDK
==========================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Device Sync represents errors via 
:dotnet-sdk:`SessionExceptions <reference/Realms.Sync.Exceptions.SessionException.html>`. 
In addition to the standard exception properties, you have access to an 
:dotnet-sdk:`ErrorCode <reference/Realms.Sync.Exceptions.ErrorCode.html>`
that contains information about the type of the error and allows you to have
strongly typed handling logic.

.. literalinclude:: /examples/generated/dotnet/ErrorHandler.snippet.handle-errors.cs
   :language: csharp

.. note:: Additional Exception Information

   For security reasons, App Services may send only a minimal amount of 
   information about an exception, but the server-side logs will contain more 
   details. In these cases, the 
   `HelpLink <https://docs.microsoft.com/en-us/dotnet/api/system.exception.helplink?view=net-6.0#system-exception-helplink>`_ 
   property on the exception contains a link to the associated log entry.

.. include:: /includes/sync-errors-in-app-services.rst

.. _dotnet-set-the-client-log-level:

Set the Client Log Level
------------------------
To control which messages are logged by the client logger, use
:dotnet-sdk:`LogLevel <reference/Realms.Logging.LogLevel.html>`:

.. literalinclude:: /examples/generated/dotnet/ErrorHandler.snippet.set-log-level.cs
   :language: csharp

.. include:: /includes/tip-sync-log-levels.rst


.. _dotnet-customize-logging-function:

Customize the Logging Function
------------------------------
To set a custom logger function, set :dotnet-sdk:`Logger.Default <reference/Realms.Logging.Logger.html>` to a custom Logger function. 

.. literalinclude:: /examples/generated/dotnet/ErrorHandler.snippet.customize-logging-function.cs
   :language: csharp

Handle Timeouts
---------------
During Sync sessions, events may timeout without throwing an exception. You can 
set the :dotnet-sdk:`CancelAsyncOperationsOnNonFatalErrors <reference/Realms.Sync.SyncConfigurationBase.html#Realms_Sync_SyncConfigurationBase_CancelAsyncOperationsOnNonFatalErrors>` 
to ``true`` so that these events throw an exception that you can then handle.
The following code shows an example of setting the ``CancelAsyncOperationsOnNonFatalErrors`` 
property, and 3 events that will throw an exception if they timeout:

.. literalinclude:: /examples/generated/dotnet/FlexibleSyncExamples.snippet.cancelasync.cs
   :language: csharp