=====================
db.createCollection()
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.createCollection(name, options)

   Creates a new collection or :doc:`view </core/views>`. For views,
   see also :method:`db.createView()`.

   Because MongoDB creates a collection implicitly when the collection
   is first referenced in a command, this method is used primarily for
   creating new collections that use specific options. For example, you use
   :method:`db.createCollection()` to create a :term:`capped collection
   <capped collection>`, or to create a new collection that uses
   :doc:`document validation </core/schema-validation>`.

   :method:`db.createCollection()` is a wrapper around the database
   command :dbcommand:`create`.

   The :method:`db.createCollection()` method has the following prototype form:

   .. note:: Starting in MongoDB 4.2


      MongoDB removes the MMAPv1 storage engine and the MMAPv1 specific
      options ``paddingFactor``, ``paddingBytes``, ``preservePadding``
      for :method:`db.createCollection()`.

   .. code-block:: javascript

      db.createCollection( <name>, 
         {
           capped: <boolean>,
           autoIndexId: <boolean>,
           size: <number>,
           max: <number>,
           storageEngine: <document>,
           validator: <document>,
           validationLevel: <string>,
           validationAction: <string>,
           indexOptionDefaults: <document>,
           viewOn: <string>,              // Added in MongoDB 3.4
           pipeline: <pipeline>,          // Added in MongoDB 3.4
           collation: <document>,         // Added in MongoDB 3.4
           writeConcern: <document> 
         }
      )

   The :method:`db.createCollection()` method has the following parameters:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``name``
   
        - string
   
        - The name of the collection to create. See
          :ref:`restrictions-on-db-names`.

      * - ``options``
   
        - document
   
        - Optional. Configuration options for creating a capped collection, for
          preallocating space in a new collection, or for creating a view.
          
          
   


   The ``options`` document contains the following fields:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``capped``
   
        - boolean
   
        - Optional. To create a :term:`capped collection`,
          specify ``true``. If you specify ``true``, you must also set a maximum
          size in the ``size`` field.
          
          
   
      * - ``autoIndexId``
   
        - boolean
   
        - Optional. Specify ``false`` to disable the automatic creation of an index on the
          ``_id`` field.
          
          .. important::
          
             Starting in MongoDB 4.0, you cannot set the option ``autoIndexId``
             to ``false`` when creating collections in databases other than the
             ``local`` database.
          
          .. deprecated:: 3.2
          
          
   
      * - ``size``
   
        - number
   
        - Optional. Specify a maximum size in bytes for a capped collection. Once a
          capped collection reaches its maximum size, MongoDB removes the older
          documents to make space for the new documents. The ``size`` field is
          required for capped collections and ignored for other collections.
          
          
   
      * - ``max``
   
        - number
   
        - Optional. The maximum number of documents allowed in the capped collection. The
          ``size`` limit takes precedence over this limit. If a capped
          collection reaches the ``size`` limit before it reaches the maximum
          number of documents, MongoDB removes old documents. If you prefer to
          use the ``max`` limit, ensure that the ``size`` limit, which is
          required for a capped collection, is sufficient to contain the
          maximum number of documents.
          
          
   
      * - ``storageEngine``
   
        - document
   
        - Optional. Available for the WiredTiger storage engine only.

          Allows users to specify configuration to the storage engine on a
          per-collection basis when creating a collection. The value of the
          ``storageEngine`` option should take the following form:
          
          .. code-block:: javascript
          
             { <storage-engine-name>: <options> }
          
          Storage engine configuration specified when creating collections are
          validated and logged to the :term:`oplog` during replication to
          support replica sets with members that use different storage
          engines.
          
          
   
      * - ``validator``
   
        - document
   
        - Optional. Allows users to specify :doc:`validation rules or expressions
          </core/schema-validation>` for the collection. For more information,
          see :doc:`/core/schema-validation`.
          
          .. versionadded:: 3.2
          
          The ``validator`` option takes a document that specifies the
          validation rules or expressions. You can specify the expressions using
          the same operators as the :ref:`query operators <query-selectors>`
          with the exception of :query:`$geoNear`, :query:`$near`,
          :query:`$nearSphere`, :query:`$text`, and :query:`$where`.
          
          .. note::
          
             - Validation occurs during updates and inserts. Existing
               documents do not undergo validation checks until modification.
          
             - You cannot specify a validator for collections in the ``admin``,
               ``local``, and ``config`` databases.
          
             - You cannot specify a validator for ``system.*`` collections.
          
          
   
      * - ``validationLevel``
   
        - string
   
        - Optional. Determines how strictly MongoDB applies the
          validation rules to existing documents during an update.
          
          .. versionadded:: 3.2
          
          .. include:: /includes/extracts/table-validationLevel-values.rst
          
          
   
      * - ``validationAction``
   
        - string
   
        - Optional. Determines whether to ``error`` on invalid documents or just ``warn``
          about the violations but allow invalid documents to be inserted.
          
          .. versionadded:: 3.2
          
          .. important::
          
             Validation of documents only applies to those documents as
             determined by the ``validationLevel``.
          
          .. include:: /includes/extracts/table-validationAction-values.rst
          
          
   
      * - ``indexOptionDefaults``
   
        - document
   
        - Optional. Allows users to specify a default configuration for indexes when
          creating a collection.
          
          The ``indexOptionDefaults`` option accepts a ``storageEngine``
          document, which should take the following form:
          
          .. code-block:: javascript
          
             { <storage-engine-name>: <options> }
          
          Storage engine configuration specified when creating indexes are
          validated and logged to the :term:`oplog` during replication to
          support replica sets with members that use different storage
          engines.
          
          .. versionadded:: 3.2
          
          
   
      * - ``viewOn``
   
        - string
   
        - The name of the source collection or view from which to create the
          view. The name is not the full namespace of the collection or
          view; i.e. does not include the database name and implies the same
          database as the view to create. You must create views in the same
          database as the source collection.
          
          
          See also :method:`db.createView()`.
          
          .. versionadded:: 3.4
          
          
          
   
      * - ``pipeline``
   
        - array
   
        - An array that consists of the :ref:`aggregation pipeline stage(s)
          <aggregation-pipeline>`.  :method:`db.createView` creates the view by
          applying the specified ``pipeline`` to the ``viewOn`` collection or view.
          
          .. include:: /includes/extracts/views-restriction-output-to-disk.rst
                  
          .. include:: /includes/extracts/views-public-definition.rst
          
          
          See also :method:`db.createView()`.
          
          .. versionadded:: 3.4
          
          
          
   
      * - ``collation``
   
        - document
   
        - Specifies the default :ref:`collation <collation>` for the collection.
          
          .. include:: /includes/extracts/collation-description.rst
          
          .. include:: /includes/extracts/collation-option-specification.rst
          
          .. include:: /includes/extracts/collation-collection-level.rst
          
          .. include:: /includes/extracts/collation-unspecified.rst
          
          For a collection, you can only specify the collation during the
          collection creation. Once set, you cannot modify the collection's
          default collation.
          
          For an example, see :ref:`createCollection-collation-example`.
          
          .. versionadded:: 3.4
          
          
   
      * - ``writeConcern``
   
        - document
   
        - Optional. A document that expresses the :doc:`write concern </reference/write-concern>`
          for the operation. Omit to use the default write
          concern.
          
          .. include:: /includes/extracts/mongos-operations-wc-create.rst
          
          
   


Access Control
--------------

.. include:: /includes/extracts/access-control-createCollection.rst

Behavior
--------

Resource Locking
~~~~~~~~~~~~~~~~

.. versionchanged:: 4.2

.. include:: /includes/extracts/createCollection-resource-lock.rst

Transactions
~~~~~~~~~~~~

.. versionchanged:: 4.4

.. include:: /includes/extracts/transactions-explicit-ddl.rst

.. |operation| replace:: :method:`db.createCollection()`


Examples
--------

Create a Capped Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~

Capped collections
have maximum size or document counts that prevent them from growing
beyond maximum thresholds. All capped collections must specify a maximum
size and may also specify a maximum document count. MongoDB removes
older documents if a collection reaches the maximum size limit before it
reaches the maximum document count. Consider the following example:

.. code-block:: javascript

   db.createCollection("log", { capped : true, size : 5242880, max : 5000 } )

This command creates a collection named ``log`` with a maximum size of 5
megabytes and a maximum of 5000 documents.

See :doc:`/core/capped-collections` for more
information about capped collections.

Create a Collection with Document Validation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.2

Collections with validation compare each inserted or updated document
against the criteria specified in the ``validator`` option. Depending
on the ``validationLevel`` and ``validationAction``, MongoDB either
returns a warning, or refuses to insert or update the document if it
fails to meet the specified criteria.

The following example creates a ``contacts`` collection with a JSON
Schema validator:

.. note::

   MongoDB 3.6 adds the :query:`$jsonSchema` operator to support JSON
   Schema validation.

.. code-block:: json

   db.createCollection( "contacts", {
      validator: { $jsonSchema: {
         bsonType: "object",
         required: [ "phone" ],
         properties: {
            phone: {
               bsonType: "string",
               description: "must be a string and is required"
            },
            email: {
               bsonType : "string",
               pattern : "@mongodb\.com$",
               description: "must be a string and match the regular expression pattern"
            },
            status: {
               enum: [ "Unknown", "Incomplete" ],
               description: "can only be one of the enum values"
            }
         }
      } }
   } )

With the validator in place, the following insert operation fails validation:

.. code-block:: javascript

   db.contacts.insert( { name: "Amanda", status: "Updated" } )

The method returns the error in the ``WriteResult``:

.. code-block:: javascript

   WriteResult({
      "nInserted" : 0,
      "writeError" : {
         "code" : 121,
         "errmsg" : "Document failed validation"
      }
   })

For more information, see :doc:`/core/schema-validation`. To view the
validation specifications for a collection, use the
:method:`db.getCollectionInfos()` method.

.. _createCollection-collation-example:

Specify Collation
~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/collation-versionadded.rst

You can specify :ref:`collation <collation>` at the collection or
:ref:`view <3.4-reference-views>` level. For example, the following
operation creates a collection, specifying a collation for the
collection (See :ref:`collation-document-fields` for descriptions of
the collation fields):

.. code-block:: javascript

   db.createCollection( "myColl", { collation: { locale: "fr" } } );

This collation will be used by indexes and operations that support
collation unless they explicitly specify a different collation. For
example, insert the following documents into ``myColl``:

.. code-block:: javascript

   { _id: 1, category: "café" }
   { _id: 2, category: "cafe" }
   { _id: 3, category: "cafE" }

The following operation uses the collection's collation:

.. code-block:: javascript

   db.myColl.find().sort( { category: 1 } )

The operation returns documents in the following order:

.. code-block:: javascript

   { "_id" : 2, "category" : "cafe" }
   { "_id" : 3, "category" : "cafE" }
   { "_id" : 1, "category" : "café" }

The same operation on a collection that uses simple binary collation
(i.e. no specific collation set) returns documents in the following order:

.. code-block:: javascript

   { "_id" : 3, "category" : "cafE" }
   { "_id" : 2, "category" : "cafe" }
   { "_id" : 1, "category" : "café" }

.. seealso::

   :ref:`create-view-w-collation`

.. _create-collection-storage-engine-options:

Specify Storage Engine Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can specify collection-specific storage engine configuration
options when you create a collection with
:method:`db.createCollection()`. Consider the following operation:

.. code-block:: javascript

   db.createCollection(
      "users",
      { storageEngine: { wiredTiger: { configString: "<option>=<setting>" } } }
   )

This operation creates a new collection named ``users`` with a
specific configuration string that MongoDB will pass to the
``wiredTiger`` storage engine. See the :wtdocs:`WiredTiger documentation of
collection level options </struct_w_t___s_e_s_s_i_o_n.html>`
for specific ``wiredTiger`` options.
