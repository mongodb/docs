================
grantRolesToUser
================

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: grantRolesToUser

   Grants an additional role and its privileges to a
   user. :dbcommand:`grantRolesToUser` can grant multiple additional
   roles to a user.

   The :dbcommand:`grantRolesToUser` command uses the following syntax:

   .. code-block:: javascript

      { grantRolesToUser: "<user>",
        roles: [ <roles> ],
        writeConcern: { <write concern> }
      }

   The command has the following fields:

   .. include:: /reference/command/grantRolesToUser-field.rst

.. TODO rename section (or make it subsection or something)

Considerations
--------------

.. |local-cmd-name| replace:: :dbcommand:`grantRolesToUser`
.. include:: /includes/fact-roles-array-contents.rst

Required Access
---------------

.. include:: /includes/access-grant-role-to-user.rst

Example
-------

Given a user ``Erin`` in the ``products`` database with the following
roles:

.. code-block:: javascript

   "roles" : [
       { "role" : "assetsReader",
         "db" : "assets"
       }
   ]

The following :dbcommand:`grantRolesToUser` command gives ``Erin`` the
:authrole:`read` role on the ``stock`` database and the
:authrole:`readWrite` role on the ``products`` database where the
:dbcommand:`grantRolesToUser` command runs.

.. code-block:: javascript

   use products
   db.runCommand( { grantRolesToUser: "Erin",
                    roles: [
                       { role: "read", db: "stock"},
                       "readWrite"
                    ],
                    writeConcern: { w: "majority" , wtimeout: 2000 }
                } )

The user ``Erin`` in the ``products`` database now has the following
roles:

.. code-block:: javascript

   "roles" : [
       { "role" : "assetsReader",
         "db" : "assets"
       },
       { "role" : "read",
         "db" : "stock"
       },
       { "role" : "readWrite",
         "db" : "products"
       }
   ]
