.. meta::
   :keywords: atlas ui, atlas cli
   :description: Configure programmatic access to Atlas using API keys or service accounts, including authentication methods and access management.

.. _atlas-admin-api-access:

====================================================
Get Started with the {+atlas-admin-api+}
====================================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. important::

   Each {+atlas-admin-api+} has its own resources and requires initial
   setup.

   You can access the {+atlas-admin-api+} servers through the public 
   internet only. The {+atlas-admin-api+} is not available over 
   connections that use :ref:`network peering <vpc-peering>` or 
   :ref:`private endpoints <private-endpoint>`.

   To learn more, see :doc:`/api`.

The {+atlas-admin-api+} follows the principles of the |rest| 
architectural style to expose a number of internal resources which 
enable programmatic access to |service|'s features. To learn more, see 
:ref:`atlas-admin-api-ref`.

.. _programmatic-access:
.. _atlas-prog-api-key:

Grant Programmatic Access to |service|
--------------------------------------

You can grant programmatic access to an organization or project using one of the 
two following authentication methods:

.. include:: /includes/api-table-auth-comparison.rst

.. include:: /includes/api/admonitions/service-accounts.rst

.. _enable-api-access-list:
.. _atlas-require-api-access-list:

Optional: Require an IP Access List for the {+atlas-admin-api+}
-------------------------------------------------------------------------

When you create an organization using the {+atlas-ui+}, |service|
enables the |api| IP access list feature by default. This limits |api| 
requests to only those from the location-based IP or |cidr| addresses that you 
specify in the IP access list. If you make a request to 
the {+atlas-admin-api+} without an IP access list entry, the server responds with 
a 403 status code.

If you disable the feature, you can make |api| requests from any address on 
the internet as long as the IP access list is empty. Once you add an IP access 
list entry, only requests originating from that IP address can make requests.  
 
To set your organization to require IP access lists for every 
{+atlas-admin-api+} request after organization creation, follow these steps:

.. include:: /includes/steps-require-ip-access-list.rst

.. _see-org-api-keys:
.. _about-org-api-keys:
.. _create-org-api-key:

Grant Programmatic Access to an Organization
--------------------------------------------

Use the following procedures to grant programmatic access to an 
organization either through a service account or |api| keys. 
To learn more about these two authentication methods, see :ref:`api-authentication`.

Required Access
~~~~~~~~~~~~~~~

To perform the following actions, you must have
:authrole:`Organization Owner` access to |service|.

.. tabs::
   
   .. tab:: Service Account
      :tabid: serviceaccount

      .. tabs::

         .. tab:: {+atlas-ui+}
            :tabid: ui

            .. include:: /includes/steps-create-service-account-org.rst
                  
         .. tab:: {+atlas-admin-api+}
            :tabid: api

            You can use the {+atlas-admin-api+} to :oas-bump-atlas-op:`create a service account for your organization 
            <createserviceaccount>`.

            .. include:: /includes/api-record-secret.rst

   .. tab:: API Key
      :tabid: apikey

      .. tabs::

         .. tab:: {+atlas-cli+}
            :tabid: atlascli

            Create an |api| Key
            ```````````````````

            .. include:: /includes/extracts/atlas-organizations-apiKeys-create.rst

            Add an |api| Access List Entry for the |api| Key
            ````````````````````````````````````````````````

            .. include:: /includes/extracts/atlas-organizations-apiKeys-accessLists-create.rst

         .. tab:: {+atlas-ui+}
            :tabid: ui

            .. include:: /includes/steps-app-api-key-create-in-org.rst

.. _about-project-api-keys:

Grant Programmatic Access to a Project
--------------------------------------

Use the following procedures to grant programmatic access to a project 
either through a service account or |api| keys. 
To learn more about these two authentication methods, see :ref:`api-authentication`.

Required Access
~~~~~~~~~~~~~~~

To give a service account access to a project, you must have
:authrole:`Organization Owner` access to the organization that owns the project.

To give |api| keys access to a project, you must have
:authrole:`Project Owner` access for that project.

.. _invite-org-app-api-keys:

Assign Existing Organization Access to a Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you've already created service accounts or |api| keys for an organization, 
you can assign them to a project to grant that project access to the {+atlas-admin-api+}.

.. tabs::

   .. tab:: Service Account
      :tabid: serviceaccount
   
      .. warning::

         If you assign an organization service account to a project, the 
         :authrole:`Project Owner` can manage the service account, including rotating 
         secrets and updating the IP access list. 

      .. tabs::

         .. tab:: {+atlas-ui+}
            :tabid: ui

            .. procedure::
               :style: normal

               .. include:: /includes/nav/steps-project-access-manager.rst

               .. step:: Click :guilabel:`Invite to Project`.

               .. step:: Locate your organization service account. 
                  
                  Start typing the client ID of your service account in the field, 
                  then select your service account from the menu.

               .. step:: Assign project roles to your service account. 

                  In the menu that appears, select the :ref:`new role or roles <project-roles>` 
                  for the service account.

               .. step:: Click :guilabel:`Invite to Project`.

         .. tab:: {+atlas-admin-api+}
            :tabid: api

            You can use the {+atlas-admin-api+} to :oas-bump-atlas-op:`grant an existing 
            service account access to a project <addprojectserviceaccount>`.

   .. tab:: API Key
      :tabid: apikey

      .. tabs::

         .. tab:: {+atlas-cli+}
            :tabid: atlascli

            .. include:: /includes/extracts/atlas-projects-apiKeys-assign.rst

         .. tab:: {+atlas-ui+}
            :tabid: ui

            To assign organization |api| keys to a project using the 
            {+atlas-ui+}:
            
            .. include:: /includes/steps-app-api-key-invite-to-project.rst

.. _create-project-api-key:

Add Project Access from a Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you haven't already created a service account or |api| keys for an organization, 
you can create them for a project to grant that project access to the {+atlas-admin-api+}.
The service account or |api| keys that you create for a project are automatically added 
to the parent organization with the permission :authrole:`Organization Member`. 

.. tabs::

   .. tab:: Service Account
      :tabid: serviceaccount
   
      .. tabs::

         .. tab:: {+atlas-ui+}
            :tabid: ui

            To create a service account for a project using the {+atlas-ui+}:

            .. include:: /includes/steps-create-service-account-project.rst  

         .. tab:: {+atlas-admin-api+}
            :tabid: api

            You can use the {+atlas-admin-api+} to :oas-bump-atlas-op:`create a service 
            account for your project <createprojectserviceaccount>`.

            .. include:: /includes/api-record-secret.rst

   .. tab:: API Key
      :tabid: apikey

      .. tabs::

         .. tab:: {+atlas-cli+}
            :tabid: atlascli

            .. include:: /includes/extracts/atlas-projects-apiKeys-create.rst

            After you create the |api| key for your project, use the 
            {+atlas-ui+} to add an |api| access list entry. You can't use the
            |api| key for the project until you set up the |api| access list.

            .. note:: {+atlas-cli+} Limitation

               You can't edit the |api| access list for a project |api| key
               using the {+atlas-cli+}.

            To add an |api| access list entry using the {+atlas-ui+}:

            .. include:: /includes/steps/add-project-api-key-to-access-list.rst 

         .. tab:: {+atlas-ui+}
            :tabid: ui

            To create an |api| key for a project using the {+atlas-ui+}:

            .. include:: /includes/steps-app-api-key-create-in-project.rst

.. _prog-access-usage:
.. _example-api-request:

Make an |api| Request
---------------------

The {+atlas-admin-api+} uses one of two authentication methods to authenticate requests:
service account or |api| keys. You'll need the keys or secret that you saved when 
:ref:`configuring your preferred authentication method <create-org-api-key>` to 
complete the following procedures.

All {+atlas-admin-api+} endpoints have the following base URL:

.. include:: /includes/api-base-url.rst

.. important::

   MongoDB uses HTTPS URLs to increase security. Using HTTP URLs will return a 301 status code.

.. tabs::

   .. tab:: Service Account
      :tabid: serviceaccount

      To make an |api| request using a service account, use the service account to generate
      an access token, then use the access token in your request:

      .. procedure::  
         :style: normal 

         .. step:: Retrieve the client secret for your service account.

            Locate the client secret beginning with ``mdb_sa_sk_`` that you saved 
            immediately after :ref:`creating the service account <see-org-api-keys>`, 
            which was the only time you could view the client secret.
            If you did not save the client secret, you must generate a new client secret.
        
         .. step:: Base64-encode the client ID and secret.

            For example, run:

            .. code:: sh

               echo -n {CLIENT-ID}:{CLIENT-SECRET} | base64

         .. step:: Request an access token.

            Replace ``{BASE64-AUTH}`` in the following example with the output from the 
            preceding step, then run:

            .. io-code-block:: 
               :copyable: true 

               .. input:: 
                  :language: sh
                  :linenos: 

                  curl --request POST \                                                                             
                     --url https://cloud.mongodb.com/api/oauth/token \
                     --header 'accept: application/json' \
                     --header 'cache-control: no-cache' \
                     --header 'authorization: Basic {BASE64-AUTH}' \                                 
                     --header 'content-type: application/x-www-form-urlencoded' \
                     --data 'grant_type=client_credentials'

               .. output::
                  :language: sh

                  {"access_token":"eyJhbGciOiJFUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6ImYyZjE2YmE4LTkwYjUtNDRlZS1iMWYwLTRkNWE2OTllYzVhNyJ9.eyJpc3MiOiJodHRwczovL2Nsb3VkLWRldi5tb25nb2RiLmNvbSIsImF1ZCI6ImFwaTovL2FkbWluIiwic3ViIjoibWRiX3NhX2lkXzY2MjgxYmM2MDNhNzFhNDMwYjkwNmVmNyIsImNpZCI6Im1kYl9zYV9pZF82NjI4MWJjNjAzYTcxYTQzMGI5MDZlZjciLCJhY3RvcklkIjoibWRiX3NhX2lkXzY2MjgxYmM2MDNhNzFhNDMwYjkwNmVmNyIsImlhdCI6MTcxMzkwNTM1OSwiZXhwIjoxNzEzOTA4OTU5LCJqdGkiOiI4ZTg1MTM3YS0wZGU1LTQ0N2YtYTA0OS1hMmVmNTIwZGJhNTIifQ.AZSFvhcjwVcJYmvW6E_K5UnDmeiX2sJgL27vo5ElzeBuPawRciKkn6ervZ6IpUTx2HHllGgAAMmhaP9B66NywhfjAXC697X9KcOzm81DTtvDjLrFeRSc_3vFmeGvfUKKXljEdWBnbmwCwtBlO5SJuBxb1V5swAl-Sbq9Ymo4NbyepSnF","expires_in":3600,"token_type":"Bearer"}%

            .. important:: 

               The access token is valid for 1 hour (3600 seconds). You can't refresh an access token.
               When this access token expires, repeat this step to generate a new one.   

         .. step:: Make an |api| call.

            Replace ``{ACCESS-TOKEN}`` in the following example with the output from the 
            preceding step. 

            The following sample ``GET`` request 
            :oas-bump-atlas-op:`returns all projects <listprojects>` in your organization:

            .. code-block:: sh

                  curl --request GET \
                       --url https://cloud.mongodb.com/api/atlas/v2/groups \
                       --header 'Authorization: Bearer {ACCESS-TOKEN}' \
                       --header 'Accept: application/vnd.atlas.2023-02-01+json' \
                       --header 'Content-Type: application/json'

            The following sample ``POST`` request takes a request body and
            :oas-bump-atlas-op:`creates a project <createproject>` named 
            ``MyProject`` in your organization:

            .. code-block:: sh

               curl --header 'Authorization: Bearer {ACCESS-TOKEN}' \
                     --header "Content-Type: application/json" \
                     --header "Accept: application/vnd.atlas.2023-02-01+json" \
                     --include \
                     --request POST "https://cloud.mongodb.com/api/atlas/v2/groups" \
                     --data '
                        {
                           "name": "MyProject",
                           "orgId": "5a0a1e7e0f2912c554080adc"
                        }'

   .. tab:: API Key
      :tabid: apikey

      Your request should resemble the following examples, where 
      ``{PUBLIC-KEY}`` is your |api| public key and ``{PRIVATE-KEY}``
      is the corresponding private key. To explore the available endpoints
      through the {+atlas-admin-api+}, you can use MongoDB's 
      `Postman workspace <https://www.postman.com/mongodb-devrel/workspace/mongodb-atlas-administration-apis/overview>`__.

      The following sample ``GET`` request 
      :oas-bump-atlas-op:`returns all projects <listprojects>` in your organization:

      .. code-block:: sh

         curl --user "{PUBLIC-KEY}:{PRIVATE-KEY}" --digest \
               --header "Content-Type: application/json" \
               --header "Accept: application/vnd.atlas.2024-08-05+json" \
               --include \
               --request GET "https://cloud.mongodb.com/api/atlas/v2/groups"

      The following sample ``POST`` request takes a request body and
      :oas-bump-atlas-op:`creates a project <createproject>` named 
      ``MyProject`` in your organization:

      .. code-block:: sh

         curl --user "{PUBLIC-KEY}:{PRIVATE-KEY}" --digest \
               --header "Content-Type: application/json" \
               --header "Accept: application/vnd.atlas.2024-08-05+json" \
               --include \
               --request POST "https://cloud.mongodb.com/api/atlas/v2/groups" \
               --data '
                  {
                     "name": "MyProject",
                     "orgId": "5a0a1e7e0f2912c554080adc"
                  }'

.. seealso::
   
   - `{+atlas-admin-api+} Specification <https://mongodb.com/docs/atlas/reference/api-resources-spec>`_
   - :ref:`atlas-api-error-codes`
   
Alternatively, you can use any tool that supports `OpenAPI v3
specification <https://spec.openapis.org/oas/v3.0.1>`__ to generate code
samples or mock servers. For example, you can import 
the :atlas:`Atlas Admin API Specification </reference/api-resources-spec>`
into `Postman <https://www.postman.com/>`__ to generate ``curl``
commands.

.. warning::

   Using an HTTP URL with Postman will return a 301 status code as expected. However, in this scenario, Postman may automatically retry the request with HTTPS, but simultaneously strip the header and body from the retry request. This will return a 401 status code instead of 301, making it difficult to determine why the request failed.

To use Postman to generate ``curl`` commands: 

.. procedure:: 
   :style: normal 

   .. step:: In the MongoDB |service| Administration API :atlas:`documentation </reference/api-resources-spec/>`, right-click the **Download** button and copy the link.
   
   .. step:: Open Postman and click **File**, then **Import**.

      The **Import** window displays.

   .. step:: In the **Import** window, click **Link** and paste the download link that you copied in step 1.

   .. step:: Click **Continue**, then **Import**.

   .. step:: For the request for which you want to generate a ``curl`` command, click **</>** on the right and select **cURL** from the **Code snippet** dropdown.

Next Steps
----------

To learn more about the {+atlas-admin-api+}, see 
:ref:`atlas-admin-api-ref`.

To manage programmatic access to the {+atlas-admin-api+}, see any of 
the following procedures:

- :ref:`atlas-admin-api-access-org`.

- :ref:`prog-access-mult-orgs`.

- :ref:`atlas-admin-api-access-project`.

- :ref:`rotate-service-account-secrets`.

.. toctree::
   
   Organization Access </configure-api-access-org>
   Multiple Organizations </configure-api-access-mult-org>
   Project Access </configure-api-access-project>
   
