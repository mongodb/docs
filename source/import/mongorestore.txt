==========================
Seed with ``mongorestore``
==========================

.. default-domain:: mongodb


You can use :binary:`mongodump <bin.mongodump>` and
:binary:`mongorestore <bin.mongorestore>` to seed |service-fullname|
cluster with data from an existing MongoDB standalone, replica set or a
sharded cluster.

Considerations
~~~~~~~~~~~~~~~~~

- :binary:`mongorestore <bin.mongorestore>` errors when merging in
  MongoDB users and roles data into |service|. If using
  :binary:`mongorestore <bin.mongorestore>` version 3.4 or greater,
  you can exclude specific collections from the restore using
  ``--nsExclude`` option.

- :binary:`mongodump` excludes the content of the ``local`` database
  in its output.

- :binary:`mongodump` can adversely affect performance of the
  :binary:`mongod`. If your data is larger than system memory, the
  :binary:`mongodump` will push the working set out of memory.

  If you are performing a switch-over from a non-|service| deployment
  to an |service| cluster, you should consider your downtime tolerance
  and the required state of the data (e.g. being fully up to date) at
  the time of the switch-over.

- If the data must be fully in sync with the non-|service| deployment
  before switching over, after uploading via :binary:`mongorestore`,
  additional steps must be taken to bring the |service| cluster in sync
  with an existing cluster.

Procedure
---------

The following tutorial uses :binary:`mongodump <bin.mongodump>` and
:binary:`mongorestore <bin.mongorestore>` to stream data over a
network device via a pipe to upload data from an existing deployment to
an |service| cluster:

.. include:: /includes/steps/migrate-using-mongorestore.rst

Additional Information
----------------------

For more information on :binary:`mongodump` and
:binary:`mongorestore`, including behavior, options, and examples, see
the :binary:`mongodump reference page <bin.mongodump>` and the
:binary:`mongorestore reference page <bin.mongorestore>`.

