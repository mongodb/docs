===================================
Restore a Replica Set from a Backup
===================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

When you restore a replica set from backup, |mms| provides you with a
restore file for the selected restore point. For an overview of the
restore process, please see :doc:`/core/restore-overview`.

.. include:: /includes/fact-pit-restore-change.rst

Considerations
--------------

``BinData``
+++++++++++

.. include:: /includes/considerations-restore-bindata-change.rst

``restoreInfo.txt``
+++++++++++++++++++

The backup restore file includes a metadata file, ``restoreInfo.txt``.
This file captures the options the database used when the snapshot was
taken. The database must be run with the listed options after it has
been restored.

.. include:: /includes/extracts/fact-restoreInfo-file.rst

Prerequisites
-------------

.. include:: /includes/extracts/fact-restore-from-encrypted-backup-prereq.rst

.. include:: /includes/extracts/encrypted-backup-display-kmip-info.rst

Oplog Size, Start and End Timestamps
++++++++++++++++++++++++++++++++++++

To seed each :term:`replica set` member you need to know the current
size, start timestamp, and end timestamp of your :term:`oplog <Oplog
Store Database>`.

To find the size of your oplog for your :term:`replica set` member:
  Connect to the member in a :program:`mongo` shell and run the
  :method:`rs.printReplicationInfo()` method. This method returns the
  following data:

  .. code-block:: sh
     :emphasize-lines: 1,3-4

     configured oplog size:   10.10546875MB
     log length start to end: 94400 (26.22hrs)
     oplog first event time:  Mon Mar 19 2012 13:50:38 GMT-0400 (EDT)
     oplog last event time:   Wed Oct 03 2012 14:59:10 GMT-0400 (EDT)
     now:                     Wed Oct 03 2012 15:00:21 GMT-0400 (EDT)

To make a *point-in-time* or *oplog timestamp* restore:
  Run the ``mongodb-backup-restore-util`` with the following options:

  - ``--seedReplSetMember``
  - ``--oplogSizeMB``
  - ``--seedTargetPort``
  - ``--opStart``
  - ``--opEnd``

  The :abbr:`MBRU (MongoDB Backup Restore Utility)` needs the oplog size
  as an integer in :abbr:`MB (megabytes)`. Set this value using the
  ``--oplogSizeMB`` option.

  The |mms| application provides the start timestamp and end timestamp.

To make a *snapshot* restore
  Run the :file:`seedSecondary.sh` or :file:`seedSecondary.bat` script
  included in the backup restore file.

  The seedSecondary script needs the :term:`replica set`'s :term:`oplog`
  size as an integer in :abbr:`GB (gigabytes)`.

  To learn how to seed a :term:`secondary` using this script, see
  :doc:`use-restore-to-seed-secondary`.

.. seealso::
   For learn how the oplog affects replication, see
   :ref:`replica-set-troubleshooting-check-oplog-size`
   section of the :manual:`Troubleshoot Replica Sets
   </tutorial/troubleshoot-replica-sets>`.

Client Requests During Restoration
++++++++++++++++++++++++++++++++++

.. include:: /includes/considerations-restore-in-isolation.rst

Secure Copy (``SCP``) Delivery
++++++++++++++++++++++++++++++

.. include:: /includes/note-scp-key-pair-requirement.rst

.. include:: /includes/note-windows-scp-issue.rst

``SCP`` is performed in parallel and, by default, Secure Shell Daemon
(``sshd``) installations use a small number of concurrent connections.
Changing this setting in ``sshd_config`` allows ``SCP`` to support
sufficient connections to complete the restore.

Automatic Restore
-----------------

To have |mms| restore the snapshots, perform the
:ref:`select the snapshot <select-snapshot-replica-set>` procedure. Choose
:guilabel:`Choose Cluster to Restore to` at Step 2 of the restore wizard.

Manual Restore
--------------

To restore the backup manually, perform the following procedures:

1. :ref:`Select and Prepare the Snapshot<select-snapshot-replica-set>`.

#. :ref:`Retrieve the Snapshot using HTTPS
   <retrieve-snapshot-replica-set>` or
   :ref:`Send the Snapshot using SCP
   <send-snapshot-replica-set-by-scp>`.

#. :ref:`Prepare and Distribute Snapshot <prep-and-distro-snapshot-replica-set>`

#. :ref:`Unmanage the Replica Set<unmanage-replset>`.

#. :ref:`Restore the Replica Set Manually<restore-replset-manually>`.

#. :ref:`Reimport the Replica Set<reimport-replset>`.

.. _select-snapshot-replica-set:

Select and Prepare the Snapshot
+++++++++++++++++++++++++++++++

.. include:: /includes/steps/prepare-snapshot-replica-set.rst

.. _retrieve-snapshot-replica-set:

Retrieve the Snapshot using HTTPS
+++++++++++++++++++++++++++++++++

.. include:: /includes/steps/download-snapshot-replica-set.rst

.. important::
   Skip to :ref:`prep-and-distro-snapshot-replica-set`.

.. _send-snapshot-replica-set-by-scp:

Send Snapshot using SCP
+++++++++++++++++++++++

Direct |mms| to copy the restore files to your server via ``SCP``.

.. include:: /includes/steps/send-snapshot-replica-set-scp.rst

.. _prep-and-distro-snapshot-replica-set:

Prepare and Distribute Snapshot
+++++++++++++++++++++++++++++++

.. include:: /includes/steps/send-pit-replica-set.rst

.. _unmanage-replset:

Unmanage the Replica Set
++++++++++++++++++++++++

Before attempting to restore the data manually,
:doc:`remove the replica set from Automation </tutorial/unmanage-deployment>`.

.. _restore-replset-manually:

Restore the Replica Set Manually
++++++++++++++++++++++++++++++++

Follow the tutorial from the MongoDB Manual to
:manual:`restore the replica set </tutorial/restore-replica-set-from-backup>`

.. _reimport-replset:

Reimport the Replica Set
++++++++++++++++++++++++

To manage the replica set with automation again,
:doc:`import the replica set </tutorial/add-existing-mongodb-processes>`
back into |mms|.

