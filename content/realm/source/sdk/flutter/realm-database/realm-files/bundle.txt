.. meta::
   :robots: noindex, nosnippet

.. _flutter-bundle:

============================
Bundle a Realm - Flutter SDK
============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You might want to seed your mobile app with some initial data that will be available
to users on the initial launch of the app. To do this, you can bundle an existing
realm file in your Flutter app.

If your app uses a synced realm, you may not want to bundle it. For more information,
refer to the :ref:`Bundle a Synced Realm <flutter-bundle-synced-realm>` section.

.. tip:: Consider Initial Data Callback

   You can also add data to your realm the first time an application opens it
   using the :ref:`initial data callback function <flutter-initial-data-callback>`.

Bundle a Local Realm
--------------------

.. procedure::

   .. step:: Create a Realm File for Bundling

      Create a new project with the same :ref:`Realm object schema
      <flutter-define-realm-object-schema>` as your production app.
      :ref:`Open an existing realm <flutter-open-realm>` with the data
      you wish to bundle, or create a new one.

      Get the path to the realm file with the :flutter-sdk:`Realm.config.path <realm/Configuration/path.html>`
      property.

      .. literalinclude:: /examples/generated/flutter/myapp.snippet.create-bundle.dart
         :language: dart

      .. tip:: Create Bundled Realm with Dart Standalone SDK

         You might want to use the :ref:`Dart Standalone SDK <dart-install-steps>`
         to create the bundled realm for your Flutter application for the following reasons:

         - Creating a bundled realm does not require any Flutter UI elements.
         - Dart standalone projects require less boilerplate code than Flutter projects

   .. step:: Bundle a Realm File in Your Production Application

      Now that you have a copy of the realm with the "seed" data in it, you
      need to bundle it with your production application.

      Add the realm file to your application's :flutter:`Flutter assets <development/ui/assets-and-images>`.
      For example you could add the bundled realm in your project at the location
      :file:`assets/bundled.realm`.

      Add a reference to the bundled realm to your :file:`pubspec.yaml` file
      to include it in your production application:

      .. code-block:: yaml
         :caption: pubspec.yaml

         flutter:
           assets:
           - realm/bundle.realm

   .. step:: Open a Realm from a Bundled Realm File

      Now that you have a copy of the realm included with your app, you need to
      add code to use it.

      Before you deploy your app with the bundled realm, you need to
      extract the realm from the embedded resources, save it to the app's data
      location, and then open this new realm in the app. The following code shows
      how you can do this during start-up of the app.

      Create a helper function ``initBundledRealm`` to check if the bundled realm
      already exists within the app, and load it into the app if it does not exist yet.
      Call ``initBundledRealm`` before calling loading the app's widgets with
      `runApp() <https://api.flutter.dev/flutter/widgets/runApp.html>`__.

      .. literalinclude:: /examples/generated/flutter/main.snippet.include-bundled-realm.dart
         :language: dart
         :caption: lib/main.dart

.. _flutter-bundle-synced-realm:

Bundle a Synced Realm
---------------------

In most cases, you should **not** bundle a synced realm. If the bundled realm
was last updated further in the past than :ref:`client maximum offline time
<client-maximum-offline-time>`, the user experiences a client reset
the first time they open the bundled realm file. The client reset causes
the application to download the full state of the realm from the application backend.
This negates the advantages of bundling a realm file.

Rather than bundling a synced realm, you can populate your application with data
using sync subscriptions. If you add data using sync subscriptions,
you do not need to be concerned with data being older than the client maximum online time
while taking advantage of Flexible Sync's :ref:`trimming <trimming>` feature.
To learn more about using sync subscriptions, refer to :ref:`Manage Sync Subscriptions
<flutter-flexible-sync-manage-subscriptions>`.

You should only bundle a synced realm if your use case meets the following criteria:

- You can ensure that the users have a version of the app with the bundled synced realm
  that was created more recently than the client maximum offline time.
- The initial bundled data is very large **and** the app is being used in a situation
  with limited internet bandwidth, so an initial data download using sync subscriptions
  would take too long.
- All app users have backend permission to view the data included in the bundle.
  If a user doesn't have permission to view this data, it will be removed from
  their device when the realm sync with Atlas via a :ref:`compensating write error
  <flutter-compensating-writes>`.

To bundle a synced realm, perform the following:

#. Connect to your App Services App and authenticate a user.
#. Add a subscription to the realm. You need a subscription to write to a synced realm.
#. Add data to the synced realm.
#. Wait for all local changes to synchronize with the Device Sync server.
#. Use :flutter-sdk:`Realm.writeCopy() <realm/Realm/writeCopy.html>` to create
   a new version of the synced realm. You **must** use ``Realm.writeCopy()``
   to bundle the synced realm because the method removes metadata that associates
   the realm with the user, which allows other users
   to open the realm file as well.

.. literalinclude:: /examples/generated/flutter/myapp.snippet.create-synced-bundle.dart
   :language: dart

After you create the bundled realm, follow the instructions from the above sections
**Bundle a Realm File in Your Production Application** and **Open a Realm from a Bundled Realm File**.
