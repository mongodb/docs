.. _mongoimport:

.. default-domain:: mongodb

======================
mongoimport
======================

Synopsis
--------

The ``mongoimport`` utility provides a route to import content from a
JSON, CSV, or TSV export created by :program:`mongoexport`, or
potentially, another third-party export tool. See the
":doc:`/administration/import-export`" document for a more in depth
usage overview, and the ":doc:`mongoexport`" document for more
information regarding the :program:`mongoexport` utility, which
provides the inverse "importing" capability.

.. note::

   Do not use :program:`mongoimport` and :program:`mongoexport` for
   full-scale backups because they may not reliably capture data type
   information. Use :program:`mongodump` and :program:`mongorestore` as
   described in ":doc:`/administration/backups`" for this kind of
   functionality.

Options
-------

.. binary:: mongoimport

.. program:: mongoimport

.. option:: --help

   Returns a basic help and usage text.

.. option:: --verbose, -v

   Increases the amount of internal reporting returned on the command
   line. Increase the verbosity with the ``-v`` form by including
   the option multiple times, (e.g. ``-vvvvv``.)

.. option:: --version

   Returns the version of the :program:`mongoimport` utility.

.. option:: --host <hostname><:port>, -h

   Specifies a resolvable hostname for the :program:`mongod` to which
   you want to restore the database. By default :program:`mongoimport`
   will attempt to connect to a MongoDB process ruining on the
   localhost port numbered ``27017``.

   Optionally, specify a port number to connect a MongoDB instance
   running on a port other than ``27017``.

   To connect to a replica set, use the :option:`--host` argument with a
   setname, followed by a slash and a comma separated list of host and
   port names. The :program:`mongo` utility will, given the seed of at least
   one connected set member, connect to primary node of that set. this
   option would resemble:

   .. code-block:: sh

      --host repl0/mongo0.example.net,mongo0.example.net,27018,mongo1.example.net,mongo2.example.net

   You can always connect directly to a single MongoDB instance by
   specifying the host and port number directly.

.. option:: --port <port>

   Specifies the port number, if the MongoDB instance is not running on
   the standard port. (i.e. ``27017``) You may also specify a port
   number using the :option:`mongoimport --host` command.

.. option:: --ipv6

   Enables IPv6 support that allows :program:`mongoimport` to connect
   to the MongoDB instance using an IPv6 network. All MongoDB programs
   and processes, including :program:`mongoimport`, disable IPv6
   support by default.

.. option:: --username <username>, -u <username>

   Specifies a username to authenticate to the MongoDB instance, if your
   database requires authentication. Use in conjunction with the
   :option:`mongoimport --password` option to supply a password.

.. option:: --password <password>

   Specifies a password to authenticate to the MongoDB instance. Use
   in conjunction with the :option:`mongoimport --username` option to
   supply a username.

   If you specify a :option:`--username <mongoimport --username>`
   without the :option:`--password` option, :program:`mongoimport`
   will prompt for a password interactively.

.. option:: --dbpath <path>

   Specifies the directory of the MongoDB data files. If used, the
   :option:`--dbpath <mongoimport --dbpath>` option enables
   :program:`mongoimport` to attach directly to local data files and
   insert the data without the :program:`mongod`. To run with
   ``--dbpath``, :program:`mongoimport` needs to lock access to the
   data directory: as a result, no :program:`mongod` can access the
   same path while the process runs.

.. option:: --directoryperdb

   Use the :option:`--directoryperdb` in conjunction with the
   corresponding option to :program:`mongod`, which allows
   :program:`mongoimport` to import data into MongoDB instances that
   have every database's files saved in discrete directories on the
   disk. This option is only relevant when specifying the
   :option:`--dbpath` option.

.. option:: --journal

   Allows :program:`mongoexport` write to the durability
   :term:`journal` to ensure that the data files will remain in a
   consistent state during the write process. This option is only
   relevant when specifying the :option:`--dbpath` option.

.. option:: --db <db>, -d <db>

   Use the :option:`--db` option to specify a database for
   :program:`mongoimport` to restore data. If you do not specify a
   ``<db>``, :program:`mongoimport` creates new databases that
   correspond to the databases where data originated and data may be
   overwritten. Use this option to restore data into a MongoDB
   instance that already has data, or to restore only some data in the
   specified backup.

.. option:: --collection <collection>, -c <collection>

   Use the :option:`--collection` option to specify a collection for
   :program:`mongorestore` to restore. If you do not specify a
   ``<collection>``, :program:`mongoimport` imports all collections
   created. Existing data may be overwritten. Use this option to
   restore data into a MongoDB instance that already has data, or to
   restore only some data in the specified imported data set.

.. option:: --fields <field1[,filed2]>, -f <field1[,filed2]>

   Specify a field or number fields to *import* from the specified
   file. All other fields present in the export will be *excluded*
   during importation. Comma separate a list of fields to limit the
   fields imported.

.. option:: --fieldFile <filename>

   As an alternative to ":option:`mongoimport --fields`" the
   :option:`--fieldFile` option allows you to specify a file
   (e.g. ``<file>```) to hold a list of field names to specify a list
   of fields to *include* in the export. All other fields will be
   *excluded* from the export. Place one field per line.

.. option:: --ignoreBlanks

   In :term:`csv` and :term:`tsv` exports, ignore empty fields. If not
   specified, :program:`mongoimport` creates fields without values in
   imported documents.

.. option:: --type <json|csv|tsv>

   Declare the type of export format to import. The default format is
   :term:`JSON`, but it's possible to import :term:`csv` and
   :term:`tsv` files.

.. option:: --file <filename>

   Specify the location of a file containing the data to
   import. :program:`mongoimport` will read data from standard input
   (e.g. "stdin.") if you do not specify a file.

.. option:: --drop

   Modifies the importation procedure so that the target instance
   drops every collection before restoring the collection from the
   dumped backup.

.. option:: --headerline

   If using ":option:`--type csv <mongoimport --type>`" or
   ":option:`--type tsv <mongoimport --type>`," use the first line as
   field names. Otherwise, :program:`mongoimport` will import the first
   line as a distinct document.

.. option:: --upsert

   Modifies the import process to update existing objects in the
   database if they match an imported object, while inserting all
   other objects.

   If you do not specify a field or fields using the
   :option:`--upsertFields` :program:`mongoimport` will upsert on the
   basis of the ``_id`` field.

.. option:: --upsertFields <field1[,field2]>

   Specifies a list of fields for the query portion of the
   :term:`upsert`. Use this option if the ``_id`` fields in the
   existing documents don't match the field in the document, but
   another field or field combination can uniquely identify
   documents as a basis for performing upsert operations.

   To ensure adequate performance, indexes should exist for this
   field or fields.

.. option:: --stopOnError

   .. versionadded:: 2.2

   Forces :program:`mongoimport` to halt the import operation at the
   first error rather than continuing the operation despite errors.

.. option:: --jsonArray

   .. versionchanged:: 2.2
      The limit on document size increased from 4MB to 16MB.

   Accept import of data expressed with multiple MongoDB document
   within a single :term:`JSON` array.

   Use in conjunction with :option:`mongoexport --jsonArray` to
   import data written as a single :term:`JSON` array. Limited to
   imports of 16 MB or smaller.

Usage
-----

In this example, :program:`mongoimport` imports the :term:`csv`
formatted data in the ``/opt/backups/contacts.csv`` into the
collection ``contacts`` in the ``users`` database on the MongoDB
instance running on the localhost port numbered ``27017``.

.. code-block:: sh

   mongoimport --db users --collection contacts --type csv --file /opt/backups/contacts.csv

In the following example, :program:`mongoimport` imports the data in
the :term:`JSON` formatted file ``contacts.json`` into the collection
``contacts`` on the MongoDB instance running on the localhost port
number 27017. Journaling is explicitly enabled.

.. code-block:: sh

   mongoimport --collection contacts --file contacts.json --journal

In the next example, :program:`mongoimport` takes data passed to it on
standard input (i.e. with a ``|`` pipe.)  and imports it into the
collection ``contacts`` in the ``sales`` database is the
MongoDB datafiles located at ``/srv/mongodb/``. if the import process
encounters an error, the :program:`mongoimport` will halt because of
the :option:`--stopOnError <mongoimport --stopOnError>` option.

.. code-block:: sh

   mongoimport --db sales --collection contacts --stopOnError --dbpath /srv/mongodb/

In the final example, :program:`mongoimport` imports data from the
file ``/opt/backups/mdb1-examplenet.json`` into the collection
``contacts`` within the database ``marketing`` on a remote MongoDB
database. This :program:`mongoimport` accesses the :program:`mongod`
instance running on the host ``mongodb1.example.net`` over port
``37017``, which requires the username ``user`` and the password
``pass``.

.. code-block:: sh

   mongoimport --host mongodb1.example.net --port 37017 --username user --password pass --collection contacts --db marketing --file /opt/backups/mdb1-examplenet.json
