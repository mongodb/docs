==============================================
Causal Consistency and Read and Write Concerns
==============================================

.. default-domain:: mongodb

With MongoDB's :ref:`causally consistent client sessions <sessions>`,
different combinations of read and write concerns provide different
:ref:`causal consistency guarantees <causal-consistency-guarantees>`. When
causal consistency is defined to imply durability, then the following table lists
the specific guarantees provided by the various combinations:

.. list-table::
   :header-rows: 1

   * - Read Concern
     - Write Concern
     - Read own writes
     - Monotonic reads
     - Monotonic writes
     - Writes follow reads

   * - :readconcern:`"majority"`
     - :writeconcern:`"majority"`
     - |checkmark|
     - |checkmark|
     - |checkmark|
     - |checkmark|

   * - :readconcern:`"majority"`
     - :writeconcern:`{ w: 1 } <\<number\>>`
     - 
     - |checkmark|
     - 
     - |checkmark|

   * - :readconcern:`"local"`
     - :writeconcern:`{ w: 1 } <\<number\>>`
     - 
     - 
     - 
     - 

   * - :readconcern:`"local"`
     - :writeconcern:`"majority"`
     - 
     - 
     - |checkmark|
     - 

If causal consistency implies durability, then, as seen from the table,
only read operations with :readconcern:`"majority"` read concern and
write operations with :writeconcern:`"majority"` write concern can
guarantee all four causal consistency guarantees. That is,
:ref:`causally consistent client sessions <sessions>` can only
guarantee causal consistency for:

- Read operations with :readconcern:`"majority"` read concern; i.e. the
  read operations that return data that has been acknowledged by a
  majority of the replica set members and is durable.

- Write operations with :writeconcern:`"majority"` write concern; i.e.
  the write operations that request acknowledgement that the operation
  has been applied to a majority of the replica set's voting members.

If causal consistency does not imply durability (i.e. writes may be
rolled back), then write operations with :writeconcern:`{ w: 1 }
<\<number\>>` write concern can also provide causal consistency. 

.. note::

   The other combinations of read and write concerns may also satisfy
   all four causal consistency guarantees in some situations, but not
   necessarily in all situations.

The read concern :readconcern:`"majority"` and write concern
:writeconcern:`"majority"` ensure that the four causal consistency
guarantees hold even in :ref:`circumstances (such as with a network
partition) <edge-cases>` where two members in a replica set
*transiently* believe that they are the primary. And while both
primaries can complete writes with :writeconcern:`{ w: 1 }
<\<number\>>` write concern, only one primary will be able to complete
writes with :writeconcern:`"majority"` write concern.

For example, consider a situation where a network partition divides a
five member replica set:

.. figure:: /images/network-partition-two-primaries.svg
   :alt: Network partition: new primary elected on one side but old primary has not stepped down yet.
   :figwidth: 240px

.. admonition:: With the above partition
   :class: admonition-example

   - Writes with :writeconcern:`"majority"` write concern can complete
     on ``P``\ :sub:`new` but cannot complete on ``P``\ :sub:`old`.

   - Writes with :writeconcern:`{ w: 1 } <\<number\>>` write concern
     can complete on either ``P``\ :sub:`old` or ``P``\ :sub:`new`.
     However, the writes to ``P``\ :sub:`old` (as well as the writes
     replicated to ``S``\ :sub:`1`) roll back once these members regain
     communication with the rest of the replica set.

   - After a successful write with :writeconcern:`"majority"` write
     concern on ``P``\ :sub:`new`, causally consistent reads with
     :readconcern:`"majority"` read concern can observe the write on
     ``P``\ :sub:`new`, ``S``\ :sub:`2`,and ``S``\ :sub:`3`. The reads
     can also observe the write on ``P``\ :sub:`old` and ``S``\
     :sub:`1` once they can communicate with the rest of the replica
     set and sync from the other members of the replica set. Any writes
     made to ``P``\ :sub:`old` and/or replicated to ``S``\ :sub:`1`
     during the partition are rolled back.

Scenarios
---------

To illustrate the read and write concern requirements, the following
scenarios have a client issue a sequence of operations with various
combination of read and write concerns to the replica set:

- :ref:`causal-rc-majority-wc-majority`

- :ref:`causal-rc-majority-wc-1`

- :ref:`causal-rc-local-wc-majority`

- :ref:`causal-rc-local-wc-1`

.. _causal-rc-majority-wc-majority:

Read Concern ``"majority"`` and Write concern ``"majority"``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The use of read concern :readconcern:`"majority"` and write concern
:writeconcern:`"majority"` in a causally consistent session provides
the following causal consistency guarantees:

|checkmark| Read own writes  |checkmark| Monotonic reads  |checkmark| Monotonic writes  |checkmark| Writes follow reads

.. topic:: Scenario 1 (Read Concern "majority" and Write Concern "majority")

   During the transient period with two primaries, because only ``P``\
   :sub:`new` can fulfill writes with :writeconcern:`{ w: "majority" }
   <"majority">` write concern, a client session can issue the
   following sequence of operations successfully:

   .. list-table::
      :header-rows: 1
      :class: no-outer-border

      * - Sequence

        - Example

      * - | 1. Write\ :sub:`1` with write concern :writeconcern:`"majority"`  to  ``P``\ :sub:`new`
          | 2. Read\ :sub:`1` with read concern :readconcern:`"majority"` to ``S``\ :sub:`2`
          | 3. Write\ :sub:`2` with write concern :writeconcern:`"majority"` to ``P``\ :sub:`new`
          |
          | 4. Read\ :sub:`2` with read concern :readconcern:`"majority"` to ``S``\ :sub:`3`

        - | For item ``A``, update ``qty`` to ``50``.
          | Read item ``A``.
          | For items with ``qty`` less than or equal to ``50``,
          | update ``restock`` to ``true``.
          | Read item ``A``.

   .. figure:: /images/causal-rc-majority-wc-majority.svg
      :alt: State of data with two primaries using read concern majority and write concern majority
      :figwidth: 550px

   .. list-table::
      :class: no-outer-border
      :widths: 20 80

      * - |checkmark| **Read own writes**

        - | Read\ :sub:`1` reads data from ``S``\ :sub:`2` that reflects a state after Write\ :sub:`1`.
          | Read\ :sub:`2` reads data from ``S``\ :sub:`1` that
            reflects a state after Write1\ :sub:`1` followed by Write\
            :sub:`2`.

      * - |checkmark| **Monotonic reads**

        - Read\ :sub:`2` reads data from ``S``\ :sub:`3` that reflects
          a state after Read\ :sub:`1`.

      * - |checkmark| **Monotonic writes**

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that
          reflects a state after Write\ :sub:`1`.

      * - |checkmark| **Writes follow reads**

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that
          reflects a state of the data after Read\ :sub:`1` (i.e. an
          earlier state reflects the data read by Read\ :sub:`1`).

.. topic:: Scenario 2 (Read Concern "majority" and Write Concern "majority")

   Consider an alternative sequence where Read\ :sub:`1` with read
   concern :readconcern:`"majority"` routes to ``S``\ :sub:`1`:

   .. list-table::
      :header-rows: 1
      :class: no-outer-border

      * - Sequence

        - Example


      * - | 1. Write\ :sub:`1` with write concern :writeconcern:`"majority"`  to  ``P``\ :sub:`new`
          | 2. Read\ :sub:`1` with read concern :readconcern:`"majority"` to ``S``\ :sub:`1`
          | 3. Write\ :sub:`2` with write concern :writeconcern:`"majority"` to ``P``\ :sub:`new`
          |
          | 4. Read\ :sub:`2` with with read concern :readconcern:`"majority"` to ``S``\ :sub:`3`

        - | For item ``A``, update ``qty`` to ``50``.
          | Read item ``A``.
          | For items with ``qty`` less than or equal to ``50``,
          | update ``restock`` to ``true``.
          | Read item ``A``.

   In this sequence, Read\ :sub:`1` cannot return until the
   majority commit point has advanced on ``P``\ :sub:`old`. This cannot
   occur until ``P``\ :sub:`old` and ``S``\ :sub:`1` can communicate
   with the rest of the replica set; at which time, ``P``\ :sub:`old`
   has stepped down (if not already), and the two members sync
   (including Write\ :sub:`1`) from the other members of the
   replica set.

   .. list-table::
      :class: no-outer-border
      :widths: 20 80

      * - |checkmark| **Read own writes**

        - | Read\ :sub:`1` reflects a state of data after Write1\
            :sub:`1`, albeit after the network partition has healed
            and the member has sync'ed from the other members of the
            replica set.

          | Read\ :sub:`2` reads data from ``S``\ :sub:`3` that
            reflects a state after Write1\ :sub:`1` followed by Write\
            :sub:`2`.

      * - |checkmark| **Monotonic reads**

        - Read\ :sub:`2` reads data from ``S``\ :sub:`3` that reflects
          a state after Read\ :sub:`1` (i.e. an earlier state is
          reflected in the data read by Read\ :sub:`1`).

      * - |checkmark| **Monotonic writes**

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that
          reflects a state after Write\ :sub:`1`.

      * - |checkmark| **Writes follow reads**

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that
          reflects a state of the data after Read\ :sub:`1` (i.e. an
          earlier state reflects the data read by Read\ :sub:`1`).

.. _causal-rc-majority-wc-1:

Read Concern ``"majority"`` and Write concern ``{w: 1}``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The use of read concern :readconcern:`"majority"` and write concern
:writeconcern:`{ w: 1 } <\<number\>>` in a causally consistent session
provides the following causal consistency guarantees *if causal consistency implies durability*:

|xmark| Read own writes  |checkmark| Monotonic reads  |xmark| Monotonic writes  |checkmark| Writes follow reads

*If causal consistency does not imply durability*:

|checkmark| Read own writes  |checkmark| Monotonic reads  |checkmark| Monotonic writes  |checkmark| Writes follow reads

.. topic:: Scenario 3 (Read Concern "majority" and Write Concern ``{w: 1}``)

   During the transient period with two primaries, because both ``P``\
   :sub:`old` and ``P``\ :sub:`new` can fulfill writes with
   :writeconcern:`{ w: 1 } <\<number\>>` write concern, a client session
   could issue the following sequence of operations
   successfully but not be causally consistent **if causal consistency
   implies durability**:

   .. list-table::
      :header-rows: 1
      :class: no-outer-border

      * - Sequence

        - Example

      * - | 1. Write\ :sub:`1` with write concern :writeconcern:`{ w: 1 } <\<number\>>`  to  ``P``\ :sub:`old`
          | 2. Read\ :sub:`1` with read concern :readconcern:`"majority"` to ``S``\ :sub:`2`
          | 3. Write\ :sub:`2` with write concern :writeconcern:`{ w: 1 } <\<number\>>` to ``P``\ :sub:`new`
          |
          | 4. Read\ :sub:`2` with with read concern :readconcern:`"majority"` to ``S``\ :sub:`3`

        - | For item ``A``, update ``qty`` to ``50``.
          | Read item ``A``.
          | For items with ``qty`` less than or equal to ``50``,
          | update ``restock`` to ``true``.
          | Read item ``A``.

   .. figure:: /images/causal-rc-majority-wc-1.svg
      :alt: State of data with two primaries using read concern majority and write concern 1
      :figwidth: 450px

   In this sequence,

   - Read\ :sub:`1` cannot return until the majority commit point has
     advanced on ``P``\ :sub:`new` past the time of Write\ :sub:`1`.

   - Read\ :sub:`2` cannot return until the majority commit point has
     advanced on ``P``\ :sub:`new` past the time of Write\ :sub:`2`.

   - Write\ :sub:`1` will roll back when the network partition is healed.

   |arrow| *If causal consistency implies durability*

   .. list-table::
      :class: no-outer-border
      :widths: 20 80

      * - |xmark| **Read own writes**

        - Read\ :sub:`1` reads data from ``S``\ :sub:`2` that does not
          reflect a state after Write\ :sub:`1`.

      * - |checkmark| **Monotonic reads**

        - Read\ :sub:`2` reads data from ``S``\ :sub:`3` that reflects
          a state after Read\ :sub:`1` (i.e. an earlier state is
          reflected in the data read by Read\ :sub:`1`).

      * - |xmark| **Monotonic writes**

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that does
          not reflect a state after Write\ :sub:`1`.

      * - |checkmark| **Writes follow reads**

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that
          reflects a state after Read\ :sub:`1` (i.e. an
          earlier state reflects the data read by Read\
          :sub:`1`).

   |arrow| *If causal consistency does not imply durability*

   .. list-table::
      :class: no-outer-border
      :widths: 20 80

      * - |checkmark| **Read own writes**

        - Read\ :sub:`1` reads data from ``S``\ :sub:`2` returns data
          that reflects a state equivalent to Write\ :sub:`1` followed
          by rollback of Write\ :sub:`1`.

      * - |checkmark| **Monotonic reads**

        - Read\ :sub:`2` reads data from ``S``\ :sub:`3` that reflects
          a state after Read\ :sub:`1` (i.e. an earlier state is
          reflected in the data read by Read\ :sub:`1`).

      * - |checkmark| **Monotonic writes**

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that is
          equivalent to after Write\ :sub:`1` followed by rollback of Write\
          :sub:`1`.

      * - |checkmark| **Writes follow reads**

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that
          reflects a state after Read\ :sub:`1` (i.e. whose
          earlier state reflects the data read by Read\
          :sub:`1`).

.. topic:: Scenario 4 (Read Concern "majority" and Write Concern ``{w: 1}``)

   Consider an alternative sequence where Read\ :sub:`1` with
   read concern :readconcern:`"majority"` routes to ``S``\ :sub:`1`:

   .. list-table:: :header-rows: 1
      :class: no-outer-border

      * - Sequence

        - Example

      * - | 1. Write\ :sub:`1` with write concern :writeconcern:`{ w: 1 } <\<number\>>`  to  ``P``\ :sub:`old`
          | 2. Read\ :sub:`1` with read concern :readconcern:`"majority"` to ``S``\ :sub:`1`
          | 3. Write\ :sub:`2` with write concern :writeconcern:`{ w: 1 } <\<number\>>` to ``P``\ :sub:`new`
          |
          | 4. Read\ :sub:`2` with with read concern :readconcern:`"majority"` to ``S``\ :sub:`3`

        - | For item ``A``, update ``qty`` to ``50``.
          | Read item ``A``.
          | For items with ``qty`` less than or equal to ``50``,
          | update ``restock`` to ``true``.
          | Read item ``A``.

   In this sequence:

   - Read\ :sub:`1` cannot return until the majority commit point
     has advanced on ``S``\ :sub:`1`. This cannot occur until ``P``\
     :sub:`old` and ``S``\ :sub:`1` can communicate with the rest of
     the replica set. At which time, ``P``\ :sub:`old` has stepped down
     (if not already), Write\ :sub:`1` is rolled back from ``P``\
     :sub:`old` and ``S``\ :sub:`1`, and the two members sync from the
     other members of the replica set.

   |arrow| *If causal consistency implies durability*

   .. list-table::
      :class: no-outer-border
      :widths: 20 80

      * - |xmark| **Read own writes**

        - The data read by Read\ :sub:`1` does not reflect the results
          of Write\ :sub:`1`, which has rolled back.

      * - |checkmark| **Monotonic reads**

        - Read\ :sub:`2` reads data from ``S``\ :sub:`3` that reflects
          a state after Read\ :sub:`1` (i.e. whose
          earlier state reflects the data read by Read\
          :sub:`1`).

      * - |xmark| **Monotonic writes**

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that does
          not reflect a state after Write\ :sub:`1`, which had preceded
          Write\ :sub:`2` but has rolled back.

      * - |checkmark| **Writes follow reads**

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that
          reflects a state after Read\ :sub:`1` (i.e. whose
          earlier state reflects the data read by Read\ :sub:`1`).

   |arrow| *If causal consistency does not imply durability*

   .. list-table::
      :class: no-outer-border
      :widths: 20 80

      * - |checkmark| **Read own writes**

        - Read\ :sub:`1` returns data that reflects the final result of
          Write\ :sub:`1` since Write\ :sub:`1` ultimately rolls back.

      * - |checkmark| **Monotonic reads**

        - Read\ :sub:`2` reads data from ``S``\ :sub:`3` that reflects
          a state after Read\ :sub:`1` (i.e. an earlier state
          reflects the data read by Read\ :sub:`1`).

      * - |checkmark| **Monotonic writes**

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that is
          equivalent to after Write\ :sub:`1` followed by rollback of Write\
          :sub:`1`.

      * - |checkmark| **Writes follow reads**

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that
          reflects a state after Read\ :sub:`1` (i.e. an earlier state
          reflects the data read by Read\ :sub:`1`).

.. _causal-rc-local-wc-1:

Read Concern ``"local"`` and Write concern ``{w: 1}``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The use of read concern :readconcern:`"local"` and write concern
:writeconcern:`{ w: 1 } <\<number\>>` in a causally consistent session
cannot guarantee causal consistency. 

|xmark| Read own writes  |xmark| Monotonic reads  |xmark| Monotonic writes  |xmark| Writes follow reads

This combination may satisfy all four causal consistency guarantees in
some situations, but not necessarily in all situations.

.. topic:: Scenario 5 (Read Concern "local" and Write Concern ``{w: 1}``)

   During this transient period, because both ``P``\ :sub:`old` and
   ``P``\ :sub:`new` can fulfill writes with :writeconcern:`{ w: 1 } <\<number\>>` write concern, a
   client session could issue the following sequence of operations
   successfully but not be causally consistent:

   .. list-table:: :header-rows: 1
      :class: no-outer-border

      * - Sequence

        - Example

      * - | 1. Write\ :sub:`1` with write concern :writeconcern:`{ w: 1 } <\<number\>>`  to  ``P``\ :sub:`old`
          | 2. Read\ :sub:`1` with read concern :readconcern:`"local"` to ``S``\ :sub:`1`
          | 3. Write\ :sub:`2` with write concern :writeconcern:`{ w: 1 } <\<number\>>` to ``P``\ :sub:`new`
          |
          | 4. Read\ :sub:`2` with read concern :readconcern:`"local"` to ``S``\ :sub:`3`

        - | For item ``A``, update ``qty`` to ``50``.
          | Read item ``A``.
          | For items with ``qty`` less than or equal to ``50``,
          | update ``restock`` to ``true``.
          | Read item ``A``.

   .. figure:: /images/causal-rc-local-wc-1.svg
      :alt: State of data with two primaries using read concern local and write concern 1
      :figwidth: 450px

   .. list-table::
      :class: no-outer-border
      :widths: 20 80

      * - |xmark| Read own writes

        - Read\ :sub:`2` reads data from ``S``\ :sub:`3` that only
          reflects a state after Write\ :sub:`2` and not Write\ :sub:`1`
          followed by Write\ :sub:`2`.

      * - |xmark| Monotonic reads

        - Read\ :sub:`2` reads data from ``S``\ :sub:`3` that does not
          reflect a state after Read\ :sub:`1` (i.e. an earlier state
          does not reflect the data read by Read\ :sub:`1`).

      * - |xmark| Monotonic writes

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that does
          not reflect a state after Write\ :sub:`1`.

      * - |xmark| Write follow read

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that does
          not reflect a state after Read\ :sub:`1` (i.e. an earlier
          state does not reflect the data read by Read\ :sub:`1`).

.. _causal-rc-local-wc-majority:

Read Concern ``"local"`` and Write concern ``"majority"``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The use of read concern :readconcern:`"local"` and write concern
:writeconcern:`"majority"` in a causally consistent session provides
the following causal consistency guarantees:

|xmark| Read own writes  |xmark| Monotonic reads  |checkmark| Monotonic writes  |xmark| Writes follow reads

This combination may satisfy all four causal consistency guarantees in
some situations, but not necessarily in all situations.

.. topic:: Scenario 6 (Read Concern "local" and Write Concern "majority")

   During this transient period, because only ``P``\ :sub:`new` can
   fulfill writes with  :writeconcern:`{ w: "majority" } <"majority">` write concern, a client
   session could issue the following sequence of operations successfully
   but not be causally consistent:

   .. list-table::
      :header-rows: 1

      * - Sequence

        - Example

      * - | 1. Write\ :sub:`1` with write concern :writeconcern:`"majority"`  to  ``P``\ :sub:`new`
          | 2. Read\ :sub:`1` with read concern :readconcern:`"local"` to ``S``\ :sub:`1`
          | 3. Write\ :sub:`2` with write concern :writeconcern:`"majority"`  to ``P``\ :sub:`new`
          |
          | 4. Read\ :sub:`2` with read concern :readconcern:`"local"` to ``S``\ :sub:`3`

        - | For item ``A``, update ``qty`` to ``50``.
          | Read item ``A``.
          | For items with ``qty`` less than or equal to ``50``,
          | update ``restock`` to ``true``.
          | Read item ``A``.

   .. figure:: /images/causal-rc-local-wc-majority.svg
      :alt: State of data with two primaries using read concern local and write concern majority
      :figwidth: 550px

   .. list-table::
      :class: no-outer-border
      :widths: 20 80

      * - |xmark| Read own writes.

        - Read\ :sub:`1` reads data from ``S``\ :sub:`1` that does not
          reflect a state after Write1\ :sub:`1`.

      * - |xmark| Monotonic reads.

        - Read\ :sub:`2` reads data from ``S``\ :sub:`3` that does not
          reflect a state after Read\ :sub:`1` (i.e. an earlier state
          does not reflect the data read by Read\ :sub:`1`).

      * - |checkmark| Monotonic writes

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that
          reflects a state after Write\ :sub:`1`.

      * - |xmark| Write follow read.

        - Write\ :sub:`2` updates data on ``P``\ :sub:`new` that does
          not reflect a state after Read\ :sub:`1` (i.e. an earlier
          state does not reflect the data read by Read\ :sub:`1`).


.. |arrow| unicode:: U+27A4

.. |checkmark| unicode:: U+2705

.. |xmark| unicode:: U+274C
