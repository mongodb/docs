===============
cloneCollection
===============

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: cloneCollection

   Copies a collection from a remote :program:`mongod` instance to
   the current :program:`mongod` instance. :dbcommand:`cloneCollection`
   takes the following form:

   .. code-block:: javascript

      { cloneCollection: "<collection>", from: "<hostname>", query: { <query> }, copyIndexes: <true|false> }

   .. important:: You cannot clone a collection through a
      :program:`mongos` but must connect directly to the
      :program:`mongod` instance.
   
   :dbcommand:`cloneCollection` has the following fields:

   .. include:: /reference/command/cloneCollection-field.rst

Example
-------

.. code-block:: javascript

   { cloneCollection: "users.profiles", from: "mongodb.example.net:27017", query: { active: true }, copyIndexes: false }

This operation copies the ``profiles`` collection from the ``users``
database on the server at ``mongodb.example.net``. The operation only
copies documents that satisfy the query ``{ active: true }`` and does
not copy indexes. :dbcommand:`cloneCollection` copies indexes by
default, but you can disable this behavior by setting ``{ copyIndexes:
false }``. The ``query`` and ``copyIndexes`` arguments are optional.

:dbcommand:`cloneCollection` creates a collection on the current
database with the same name as the origin collection. If, in the above
example, the ``profiles`` collection already exists in the local
database, then MongoDB appends documents in the remote collection to the
destination collection.
