.. meta::
   :robots: nosnippet

=====================
Use a Custom 404 Page
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can replace the default :wikipedia:`404 page
<HTTP_404#Custom_error_pages>` that Atlas App Services displays when a user tries to
access a resource that does not exist with a custom HTML document. You
can specify this custom 404 page from the App Services UI or by :ref:`importing
<deploy-cli>` an application configuration
directory that includes the page in its ``hosting`` directory. Select
the tab below that corresponds to the method you want to use.

.. include:: /hosting/spa-404-note.rst

Procedure
---------

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui
      
      .. procedure::

         .. step:: Create a Custom 404 Page File

            You can use any hosted file as your custom 404 page. It's common to
            use an HTML file that incorporates the following elements:

            - A short message indicating the error, e.g. "This page does not
              exist."
            - Alternative links or options for the user to continue navigating.


         .. step:: Host the 404 File in App Services

            Once you've created the custom 404 file, you need to :doc:`upload it
            to App Services </hosting/upload-content-to-app-services>`. To upload the file,
            navigate to the :guilabel:`Hosting` screen of the App Services UI, click
            :guilabel:`Upload Files`, and select the custom HTML file.


         .. step:: Configure the 404 Resource Path in App Services

            Once you have successfully uploaded the 404 file, all that's left is
            to configure App Services to serve that file instead of the default 404
            page.

            1. On the :guilabel:`Hosting` page, click the :guilabel:`Settings`
               tab.
            2. Under :guilabel:`Custom 404 Page`, click :guilabel:`Choose File`.
            3. Select your custom 404 file from the list.
            4. Click :guilabel:`Save`.

            Once you have updated the :guilabel:`Hosting` configuration, App Services
            will begin serving your custom file instead of the default 404 page.


   .. tab::
      :tabid: cli
      
      .. procedure::

         .. step:: Pull the Latest Version of Your App

            To configure a custom 404 page with the {+cli-ref+}, you need a local copy of your
            application's configuration files.

            To pull a local copy of the latest version of your app, run the following:

            .. code-block:: bash

               {+cli-bin+} pull --remote="<Your App ID>"

            .. tip::

               You can also download a copy of your application's configuration files from
               the :guilabel:`Deploy > Import/Export App` screen in the App Services UI.


         .. step:: Create a Custom 404 Page HTML File

            You can use any valid HTML file for your application's 404 page. Consider
            incorporating the following elements:

            - A short message indicating the error, e.g. "This page does not
              exist."
            - Alternative links or options for the user to continue navigating.


         .. step:: Host the HTML File in App Services

            Once you've created the custom HTML file, you need to :doc:`host it in
            App Services </hosting/upload-content-to-app-services>`.

            If you aren't already hosting the HTML file in App Services, add it to
            the ``hosting/files/`` directory.


         .. step:: Specify the 404 Page in the Application Configuration

            In ``hosting/config.json``, set ``default_error_path`` to the :ref:`resource
            path <hosting-resource-path>` of the 404 page HTML file then save the
            configuration file.

            .. code-block:: json

               "hosting": {
                 "enabled": true,
                 "default_error_path": "/pages/custom_404.html"
               }


         .. step:: Deploy the Updated Hosting Configuration

            Once you've updated ``hosting/config.json`` you can push the updated config to
            your remote app. If you also added the 404 page, make sure to use the
            ``--include-hosting`` flag. {+cli+} immediately starts to serve your custom
            404 page on push.

            .. code-block:: bash

               {+cli-bin+} push --remote="<Your App ID>" --include-hosting
