#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/query-optimization.txt:5
msgid "Query Optimization"
msgstr ""

#: ../source/core/query-optimization.txt:15
msgid ""
"Indexes improve the efficiency of read operations by reducing the amount "
"of data that query operations need to process. This simplifies the work "
"associated with fulfilling queries within MongoDB."
msgstr ""

#: ../source/core/query-optimization.txt:20
msgid "Create an Index to Support Read Operations"
msgstr ""

#: ../source/core/query-optimization.txt:22
msgid ""
"If your application queries a collection on a particular field or set of "
"fields, then an index on the queried field or a :doc:`compound index "
"</core/index-compound>` on the set of fields can prevent the query from "
"scanning the whole collection to find and return the query results. For "
"more information about indexes, see the :doc:`complete documentation of "
"indexes in MongoDB </indexes>`."
msgstr ""

#: ../source/core/query-optimization.txt:37
msgid ""
"To improve the performance of this query, add an ascending or a "
"descending index to the ``inventory`` collection on the ``type`` field. "
"[#ensureIndexOrder]_ In the :binary:`~bin.mongo` shell, you can create "
"indexes using the :method:`db.collection.createIndex()` method:"
msgstr ""

#: ../source/core/query-optimization.txt:47
msgid ""
"This index can prevent the above query on ``type`` from scanning the "
"whole collection to return the results."
msgstr ""

#: ../source/core/query-optimization.txt:50
msgid ""
"To analyze the performance of the query with an index, see "
":doc:`/tutorial/analyze-query-plan`."
msgstr ""

#: ../source/core/query-optimization.txt:53
msgid ""
"In addition to optimizing read operations, indexes can support sort "
"operations and allow for a more efficient storage utilization. See "
":method:`db.collection.createIndex()` and :doc:`/indexes` for more "
"information about index creation."
msgstr ""

#: ../source/core/query-optimization.txt:60
msgid ""
"For single-field indexes, the selection between ascending and descending "
"order is immaterial. For compound indexes, the selection is important. "
"See :ref:`indexing order <index-ascending-and-descending>` for more "
"details."
msgstr ""

#: ../source/core/query-optimization.txt:68
msgid "Query Selectivity"
msgstr ""

#: ../source/core/query-optimization.txt:70
msgid ""
"Query selectivity refers to how well the query predicate excludes or "
"filters out documents in a collection. Query selectivity can determine "
"whether or not queries can use indexes effectively or even use indexes at"
" all."
msgstr ""

#: ../source/core/query-optimization.txt:75
msgid ""
"More selective queries match a smaller percentage of documents. For "
"instance, an equality match on the unique ``_id`` field is highly "
"selective as it can match at most one document."
msgstr ""

#: ../source/core/query-optimization.txt:79
msgid ""
"Less selective queries match a larger percentage of documents. Less "
"selective queries cannot use indexes effectively or even at all."
msgstr ""

#: ../source/includes/extracts/inequality_operators_selectivity.rst:2
msgid ""
"For instance, the inequality operators :query:`$nin` and :query:`$ne` are"
" *not* very selective since they often match a large portion of the "
"index. As a result, in many cases, a :query:`$nin` or :query:`$ne` query "
"with an index may perform no better than a :query:`$nin` or :query:`$ne` "
"query that must scan all documents in a collection."
msgstr ""

#: ../source/core/query-optimization.txt:84
msgid ""
"The selectivity of :query:`regular expressions <$regex>` depends on the "
"expressions themselves. For details, see :ref:`regular expression and "
"index use <regex-index-use>`."
msgstr ""

#: ../source/core/query-optimization.txt:93
msgid "Covered Query"
msgstr ""

#: ../source/core/query-optimization.txt:95
msgid ""
"A covered query is a query that can be satisfied entirely using an index "
"and does not have to examine any documents. An index :ref:`covers "
"<indexes-covered-queries>` a query when both of the following apply:"
msgstr ""

#: ../source/core/query-optimization.txt:100
msgid ""
"all the fields in the :ref:`query <read-operations-query-document>` are "
"part of an index, **and**"
msgstr ""

#: ../source/core/query-optimization.txt:103
msgid "all the fields returned in the results are in the same index."
msgstr ""

#: ../source/core/query-optimization.txt:105
msgid ""
"For example, a collection ``inventory`` has the following index on the "
"``type`` and ``item`` fields:"
msgstr ""

#: ../source/core/query-optimization.txt:112
msgid ""
"This index will cover the following operation which queries on the "
"``type`` and ``item`` fields and returns only the ``item`` field:"
msgstr ""

#: ../source/core/query-optimization.txt:122
msgid ""
"For the specified index to cover the query, the projection document must "
"explicitly specify ``_id: 0`` to exclude the ``_id`` field from the "
"result since the index does not include the ``_id`` field."
msgstr ""

#: ../source/core/query-optimization.txt:126
msgid ""
"An index can cover a query on fields within embedded documents. [#index-"
"embedded-document-fields]_"
msgstr ""

#: ../source/core/query-optimization.txt:130
msgid ""
"For example, consider a collection ``userdata`` with documents of the "
"following form:"
msgstr ""

#: ../source/core/query-optimization.txt:137
msgid "The collection has the following index:"
msgstr ""

#: ../source/core/query-optimization.txt:143
msgid "The ``{ \"user.login\": 1 }`` index will cover the query below:"
msgstr ""

#: ../source/core/query-optimization.txt:149
msgid "To index fields in embedded documents, use :term:`dot notation`."
msgstr ""

#: ../source/core/query-optimization.txt:155
msgid "Multikey Covering"
msgstr ""

#: ../source/core/query-optimization.txt:157
msgid ""
"Starting in 3.6, multikey indexes can cover queries over the non-array "
"fields if the index tracks which field or fields cause the index to be "
"multikey. Multikey indexes created in MongoDB 3.4 or later on storage "
"engines other than MMAPv1 track this data."
msgstr ""

#: ../source/includes/fact-multikey-index-covered-query.rst:1
msgid ""
":ref:`Multikey indexes <index-type-multikey>` cannot cover queries over "
"array field(s)."
msgstr ""

#: ../source/core/query-optimization.txt:166
msgid "Performance"
msgstr ""

#: ../source/core/query-optimization.txt:168
msgid ""
"Because the index contains all fields required by the query, MongoDB can "
"both match the :ref:`query conditions <read-operations-query-document>` "
"and return the results using only the index."
msgstr ""

#: ../source/core/query-optimization.txt:172
msgid ""
"Querying *only* the index can be much faster than querying documents "
"outside of the index. Index keys are typically smaller than the documents"
" they catalog, and indexes are typically available in RAM or located "
"sequentially on disk."
msgstr ""

#: ../source/core/query-optimization.txt:178
msgid "Limitations"
msgstr ""

#: ../source/core/query-optimization.txt:181
msgid "Restrictions on Indexed Fields"
msgstr ""

#: ../source/includes/fact-geospatial-index-covered-query.rst:1
msgid ""
":ref:`Geospatial indexes <index-feature-geospatial>` cannot :ref:`cover a"
" query <covered-queries>`."
msgstr ""

#: ../source/core/query-optimization.txt:187
msgid ":ref:`multikey-covering`"
msgstr ""

#: ../source/core/query-optimization.txt:192
msgid "Restrictions on Sharded Collection"
msgstr ""

#: ../source/includes/extracts/fact-covered-query-sharded-collection-cover.rst:7
msgid ""
"Starting in MongoDB 3.0, an index cannot cover a query on a "
":term:`sharded <shard>` collection when run against a "
":binary:`~bin.mongos` if the index does not contain the shard key, with "
"the following exception for the ``_id`` index: If a query on a sharded "
"collection only specifies a condition on the ``_id`` field and returns "
"only the ``_id`` field, the ``_id`` index can cover the query when run "
"against a :binary:`~bin.mongos` even if the ``_id`` field is not the "
"shard key."
msgstr ""

#: ../source/includes/extracts/fact-covered-query-sharded-collection-cover.rst:16
msgid ""
"In previous versions, an index cannot :ref:`cover <covered-queries>` a "
"query on a :term:`sharded <shard>` collection when run against a "
":binary:`~bin.mongos`."
msgstr ""

#: ../source/core/query-optimization.txt:197
msgid "``explain``"
msgstr ""

#: ../source/core/query-optimization.txt:199
msgid ""
"To determine whether a query is a covered query, use the "
":method:`db.collection.explain()` or the :method:`~cursor.explain()` "
"method and review the :ref:`results <explain-output-covered-queries>`."
msgstr ""

#: ../source/includes/fact-explain-collection-method.rst:1
msgid ""
":method:`db.collection.explain()` provides information on the execution "
"of other operations, such as :method:`db.collection.update()`. See "
":method:`db.collection.explain()` for details."
msgstr ""

#: ../source/core/query-optimization.txt:205
msgid "For more information see :ref:`indexes-measuring-use`."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid ""
#~ "An index :ref:`covers <indexes-covered-"
#~ "queries>` a query when both of the"
#~ " following apply:"
#~ msgstr ""

#~ msgid ""
#~ "The ``{ \"user.login\": 1 }`` index "
#~ "does **not** cover the following query:"
#~ msgstr ""

#~ msgid ""
#~ "However, the query can use the ``{"
#~ " \"user.login\": 1 }`` index to find"
#~ " matching documents."
#~ msgstr ""

# 2863f77bb5d54bf990c384ea253aa189
#~ msgid "On this page"
#~ msgstr ""

# 3ce72697a3e9422c8b444b2bb54ba74d
#~ msgid "Example"
#~ msgstr ""

# bbdb1220872045149da3bb422f4dc5de
#~ msgid ""
#~ "To improve the performance of this "
#~ "query, add an ascending or a "
#~ "descending index to the ``inventory`` "
#~ "collection on the ``type`` field. "
#~ "[#ensureIndexOrder]_ In the :program:`mongo` "
#~ "shell, you can create indexes using "
#~ "the :method:`db.collection.createIndex()` method:"
#~ msgstr ""

# bb8418d40bdd4d3499c07f9c15604c4c
#~ msgid "An index **cannot** cover a query if:"
#~ msgstr ""

# 17b14c7a864e415e9f59d4fc21a97a1b
#~ msgid ""
#~ "any of the indexed fields in any"
#~ " of the documents in the collection"
#~ " includes an array. If an indexed "
#~ "field is an array, the index "
#~ "becomes a :ref:`multi-key index "
#~ "<index-type-multikey>` and cannot support"
#~ " a covered query."
#~ msgstr ""

# c1c1b114881e4a77a255dc933c08adbd
#~ msgid ""
#~ "any of the indexed fields in the"
#~ " query predicate or returned in the"
#~ " projection are fields in embedded "
#~ "documents. [#index-embedded-document-fields]_"
#~ " For example, consider a collection "
#~ "``users`` with documents of the "
#~ "following form:"
#~ msgstr ""

# 1802cbe5059842208127d21ae8ffc112
#~ msgid ""
#~ "The ``{ \"user.login\": 1 }`` index "
#~ "will **not** cover the query below "
#~ "because this index is on a field"
#~ " in an embedded document:"
#~ msgstr ""

# 8306bab72dfa41418f2e1ae2b2ca7b88
#~ msgid ""
#~ "This query can still use the ``{"
#~ " \"user.login\": 1 }`` index to find"
#~ " matching documents but it will "
#~ "examine and fetch documents to satisfy"
#~ " the query."
#~ msgstr ""

# d8f2bd5163c3493baf27b178a066641b
#~ msgid ""
#~ "An index cannot cover a query on"
#~ " a :term:`sharded <shard>` collection when"
#~ " run against a :program:`mongos` if "
#~ "the index does not contain the "
#~ "shard key, with the following exception"
#~ " for the ``_id`` index: If a "
#~ "query on a sharded collection only "
#~ "specifies a condition on the ``_id`` "
#~ "field and returns only the ``_id`` "
#~ "field, the ``_id`` index can cover "
#~ "the query when run against a "
#~ ":program:`mongos` even if the ``_id`` "
#~ "field is not the shard key."
#~ msgstr ""

# 397bdd082cae4edb8550c42b8a6a8508
#~ msgid ""
#~ "In previous versions, an index cannot"
#~ " :ref:`cover <covered-queries>` a query "
#~ "on a :term:`sharded <shard>` collection "
#~ "when run against a :program:`mongos`."
#~ msgstr ""

