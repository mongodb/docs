.. _storage-inmemory:

========================
In-Memory Storage Engine
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. versionchanged:: 3.2.6

Starting in MongoDB Enterprise version 3.2.6, the in-memory storage
engine is part of general availability (GA) in the 64-bit builds. Other
than some metadata and diagnostic data, the in-memory storage engine
does not maintain any on-disk data, including configuration data,
indexes, user credentials, etc.

By avoiding disk I/O, the in-memory storage engine allows for more
predictable latency of database operations.

.. _inmemory-specify-storage-engine:

Specify In-Memory Storage Engine
--------------------------------

To select the in-memory storage engine, specify:

- ``inMemory`` for the :option:`--storageEngine <mongod --storageEngine>` option, or the
  :setting:`storage.engine` setting if using a configuration file.

- ``--dbpath``, or :setting:`storage.dbPath` if using a configuration
  file. Although the in-memory storage engine does not write data to
  the filesystem, it maintains in the ``--dbpath`` small metadata files
  and diagnostic data as well temporary files for building large
  indexes.

For example, from the command line:

.. code-block:: sh

   mongod --storageEngine inMemory --dbpath <path> 

Or, if using the :doc:`YAML configuration file format
</reference/configuration-options>`:

.. code-block:: yaml

   storage:
      engine: inMemory
      dbPath: <path>

See :ref:`cli-mongod-inmemory` for configuration options specific to
this storage engine. Most :binary:`~bin.mongod` configuration options are
available for use with in-memory storage engine except for those
options that are related to data persistence, such as journaling or
encryption at rest configuration.

.. warning::
   The in-memory storage engine does not persist data after process shutdown.

.. _inmemory-concurrency:

Concurrency
-----------

The in-memory storage engine uses *document-level* concurrency control for write
operations. As a result, multiple clients can modify different
documents of a collection at the same time.

.. _inmemory-memory-use:

Memory Use
----------

In-memory storage engine requires that all its data (including indexes,
oplog if :binary:`~bin.mongod` instance is part of a replica set, etc.) must
fit into the specified :option:`--inMemorySizeGB <mongod --inMemorySizeGB>` command-line option
or :setting:`storage.inMemory.engineConfig.inMemorySizeGB` setting in
the :doc:`YAML configuration file </reference/configuration-options>`.

.. include:: /includes/fact-inmemory-storage-engine-default-ram.rst

If a write operation would cause the data to exceed the specified
memory size, MongoDB returns with the error:

.. code-block:: sh

   "WT_CACHE_FULL: operation would overflow cache"

To specify a new size, use the
:setting:`storage.inMemory.engineConfig.inMemorySizeGB` setting in the
:doc:`YAML configuration file format
</reference/configuration-options>`:

.. code-block:: yaml

   storage:
      engine: inMemory
      dbPath: <path>
      inMemory:
         engineConfig:
            inMemorySizeGB: <newSize>

Or use the command-line option :option:`--inMemorySizeGB  <mongod --inMemorySizeGB>`:

.. code-block:: sh

   mongod --storageEngine inMemory --dbpath <path> --inMemorySizeGB <newSize>

.. _inmemory-durability:

Durability
----------

The in-memory storage engine is non-persistent and does not write data
to a persistent storage. Non-persisted data includes
application data and system data, such as users, permissions, indexes,
replica set configuration, sharded cluster configuration, etc.

As such, the concept of :term:`journal` or waiting for data to become
:term:`durable` does not apply to the in-memory storage engine.

.. include:: /includes/extracts/no-journaling-writeConcernMajorityJournalDefault-false.rst

.. note::

   .. include:: /includes/extracts/4.2-changes-inmem-startup-warning.rst

.. include:: /includes/extracts/no-journaling-rollback.rst

Write operations that specify a write concern :writeconcern:`journaled
<j>` are acknowledged immediately. When an :binary:`~bin.mongod` instance
shuts down, either as result of the :dbcommand:`shutdown` command or
due to a system error, recovery of in-memory data is impossible.

Transactions
------------

.. include:: /includes/extracts/transactions-inmemory-storage-page.rst

Deployment Architectures
------------------------

In addition to running as standalones, :binary:`~bin.mongod` instances that
use in-memory storage engine can run as part of a replica set or part
of a sharded cluster.

Replica Set
~~~~~~~~~~~

You can deploy :binary:`~bin.mongod` instances that use in-memory storage
engine as part of a replica set. For example, as part of a three-member
replica set, you could have:

- two :binary:`~bin.mongod` instances run with in-memory storage engine.

- one :binary:`~bin.mongod` instance run with :doc:`WiredTiger
  </core/wiredtiger>` storage engine. Configure the WiredTiger member
  as a hidden member (i.e. :rsconf:`hidden: true <members[n].hidden>`
  and :rsconf:`priority: 0 <members[n].priority>`).

With this deployment model, only the :binary:`~bin.mongod` instances
running with the in-memory storage engine can become the primary.
Clients connect only to the in-memory storage engine :binary:`~bin.mongod`
instances. Even if both :binary:`~bin.mongod` instances running in-memory
storage engine crash and restart, they can sync from the member running
WiredTiger. The hidden :binary:`~bin.mongod` instance running with
WiredTiger persists the data to disk, including the user data, indexes,
and replication configuration information.

.. note::

   In-memory storage engine requires that all its data (including oplog
   if :binary:`~bin.mongod` is part of replica set, etc.) fit into the
   specified :option:`--inMemorySizeGB <mongod --inMemorySizeGB>` command-line option or
   :setting:`storage.inMemory.engineConfig.inMemorySizeGB` setting. See
   :ref:`inmemory-memory-use`.

Sharded Cluster
~~~~~~~~~~~~~~~

You can deploy :binary:`~bin.mongod` instances that use in-memory storage
engine as part of a sharded cluster. For example, in a sharded cluster,
you could have one shard that has consists of the following replica set:

- two :binary:`~bin.mongod` instances run with in-memory storage engine

- one :binary:`~bin.mongod` instance run with :doc:`WiredTiger
  </core/wiredtiger>` storage engine. Configure the WiredTiger member
  as a hidden member (i.e. :rsconf:`hidden: true <members[n].hidden>`
  and :rsconf:`priority: 0 <members[n].priority>`).

To this shard, add the :method:`tag <sh.addShardTag>` ``inmem``. For
example, if this shard has the name ``shardC``, connect to the
:binary:`~bin.mongos` and run :method:`sh.addShardTag()`.

For example, 

.. code-block:: javascript

   sh.addShardTag("shardC", "inmem")

To the other shards, add a separate tag ``persisted`` .

.. code-block:: javascript

   sh.addShardTag("shardA", "persisted")
   sh.addShardTag("shardB", "persisted")

For each sharded collection that should reside on the ``inmem`` shard,
:method:`assign to the entire chunk range <sh.addTagRange>` the tag
``inmem``:

.. code-block:: javascript

   sh.addTagRange("test.analytics", { shardKey: MinKey }, { shardKey: MaxKey }, "inmem")

For each sharded collection that should reside across the
``persisted`` shards, :method:`assign to the entire chunk range <sh.addTagRange>` the tag
``persisted``:

.. code-block:: javascript

   sh.addTagRange("salesdb.orders", { shardKey: MinKey }, { shardKey: MaxKey }, "persisted")

For the ``inmem`` shard, create a database or move the database.
