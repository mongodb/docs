=======================
Introduction to MongoDB
=======================

.. default-domain:: mongodb

Welcome to MongoDB. This document provides a brief introduction to MongoDB
and some key concepts. See the :doc:`installation guides </installation>` for
information on downloading and installing MongoDB.

.. This document provides a brief introduction to MongoDB and some key
   concepts and walks you through the process of installing and using
   MongoDB.

What is MongoDB
---------------

MongoDB is an open-source document database that provides high
performance, high availability, and automatic scaling.

Document Database
~~~~~~~~~~~~~~~~~

A record in MongoDB is a document, which is a data structure composed
of field and value pairs. MongoDB documents are similar to JSON
objects. The values of fields may include other documents, arrays,
and arrays of documents.

.. include:: /images/crud-annotated-document.rst

The advantages of using documents are:

- Documents (i.e. objects) correspond to native data types in
  many programming languages.

- Embedded documents and arrays reduce need for expensive joins.

- Dynamic schema supports fluent polymorphism.

Key Features
~~~~~~~~~~~~

High Performance
````````````````

MongoDB provides high performance data persistence. In particular,

- Support for embedded data models reduces I/O activity on database
  system.

- Indexes support faster queries and can include keys from embedded
  documents and arrays.

High Availability
`````````````````

To provide high availability, MongoDB's replication facility, called
replica sets, provide:

- *automatic* failover.

- data redundancy.

A :doc:`replica set </core/replication-introduction>` is a group of
MongoDB servers that maintain the same data set, providing redundancy
and increasing data availability.

Automatic Scaling
`````````````````

MongoDB provides horizontal scalability as part of its *core*
functionality.

- Automatic :doc:`sharding </core/sharding-introduction>` distributes
  data across a cluster of machines.

- Replica sets can provide eventually-consistent reads for low-latency
  high throughput deployments.
