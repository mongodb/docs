=======================
$elemMatch (projection)
=======================

.. seealso::

   :doc:`/reference/operator/query/elemMatch`

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. projection:: $elemMatch

  The :projection:`$elemMatch` operator limits the contents of an
  ``<array>`` field from the query results to contain only the **first**
  element matching the :projection:`$elemMatch` condition.

Usage Considerations
--------------------

Returned Element
~~~~~~~~~~~~~~~~

.. include:: /includes/fact-positional-projection-vs-elemmatch.rst

Field Order
~~~~~~~~~~~

.. include:: /includes/extracts/projection-elemMatch-projection-field-order.rst

Restrictions
~~~~~~~~~~~~

- .. include:: /includes/extracts/views-unsupported-projection-$elemMatch.rst

- You cannot specify a :query:`$text` query expression in an
  :projection:`$elemMatch`.

Examples
--------

The examples on the :projection:`$elemMatch` projection operator
assumes a collection ``schools`` with the following documents:

.. code-block:: javascript
   :copyable: true

   {
    _id: 1,
    zipcode: "63109",
    students: [
                 { name: "john", school: 102, age: 10 },
                 { name: "jess", school: 102, age: 11 },
                 { name: "jeff", school: 108, age: 15 }
              ]
   },
   {
    _id: 2,
    zipcode: "63110",
    students: [
                 { name: "ajax", school: 100, age: 7 },
                 { name: "achilles", school: 100, age: 8 },
              ],
    athletics: [ "swimming", "basketball", "football" ]
   },
   {
    _id: 3,
    zipcode: "63109",
    students: [
                 { name: "ajax", school: 100, age: 7 },
                 { name: "achilles", school: 100, age: 8 },
              ],
    athletics: [ "baseball", "basketball", "soccer" ]
   },
   {
    _id: 4,
    zipcode: "63109",
    students: [
                 { name: "barney", school: 102, age: 7 },
                 { name: "ruth", school: 102, age: 16 },
              ]
   }

.. tabs-drivers::

   .. tab:: MongoDB Shell
      :tabid: shell

   .. tab:: C#
      :tabid: csharp

      You can model these documents by using the following C# classes:

      .. literalinclude:: /includes/driver-examples/projection/School.cs
         :language: csharp

      .. literalinclude:: /includes/driver-examples/projection/Student.cs
         :language: csharp

Zipcode Search
~~~~~~~~~~~~~~

.. tabs-selector:: drivers

.. tabs-drivers::

   .. tab:: MongoDB Shell
      :tabid: shell

      The following :method:`~db.collection.find()` operation
      queries for all documents where the value of the ``zipcode``
      field is ``"63109"``. The :projection:`$elemMatch` projection
      returns only the **first** matching element of the ``students``
      array where the ``school`` field has a value of ``102``:

      .. code-block:: javascript
         :copyable: true

         db.schools.find( { zipcode: "63109" },
                         { students: { $elemMatch: { school: 102 } } } )

   .. tab:: C#
      :tabid: csharp

      To perform an ``$elemMatch`` projection when using the .NET/C# driver, call the
      ``ElemMatch()`` method on the projection builder. Pass the name of the array field
      to project and the filter to apply to the array elements.

      The following code example finds all documents in which the value of the ``Zipcode``  
      field is ``"63109"``. For each matching document, the projection returns the
      following fields:  
      
      - ``Id`` 
      - The first element of the ``Students`` array in which the value of the nested
        ``School`` field has the value ``102``

      .. literalinclude:: /includes/driver-examples/projection/ElemMatchExamples.cs
         :language: csharp
         :start-after: // start zipSearch
         :end-before: // end zipSearch
         :dedent: 8

The operation returns the following documents that have a ``zipcode`` value of
``"63109"`` and projects the ``students`` array using
:projection:`$elemMatch`:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "students" : [ { "name" : "john", "school" : 102, "age" : 10 } ] }
   { "_id" : 3 }
   { "_id" : 4, "students" : [ { "name" : "barney", "school" : 102, "age" : 7 } ] }

- For the document with ``_id`` equal to ``1``, the ``students``
  array contains multiple elements with the ``school`` field
  equal to ``102``. However, the :projection:`$elemMatch`
  projection returns only the first matching element from the
  array.

- The document with ``_id`` equal to ``3`` does not contain the
  ``students`` field in the result since no element in its
  ``students`` array matched the :projection:`$elemMatch`
  condition.

:projection:`$elemMatch` with Multiple Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :projection:`$elemMatch` projection can specify criteria on multiple
fields.

.. tabs-drivers::

   .. tab:: MongoDB Shell
      :tabid: shell

      The following :method:`~db.collection.find()` operation
      queries for all documents where the value of the ``zipcode``
      field is ``"63109"``. The projection includes the **first**
      matching element of the ``students`` array where the ``school``
      field has a value of ``102`` **and** the ``age`` field is greater
      than ``10``:

      .. code-block:: javascript
         :copyable: true

         db.schools.find( { zipcode: "63109" },
                         { students: { $elemMatch: { school: 102, age: { $gt: 10} } } } )

   .. tab:: C#
      :tabid: csharp

      The following code example finds all documents in which the value of the ``Zipcode``  
      field is ``"63109"``. For each matching document, the projection returns the following fields:  
      
      - ``Id`` 
      - The first element of the ``Students`` array in which the value of the nested
        ``School`` field has the value ``102`` and the ``Age`` field has a value greater than
        ``10``

      .. literalinclude:: /includes/driver-examples/projection/ElemMatchExamples.cs
         :language: csharp
         :start-after: // start zipMultipleSearch
         :end-before: // end zipMultipleSearch
         :dedent: 8

The operation returns the three documents that have a ``zipcode`` value of ``"63109"``:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "students" : [ { "name" : "jess", "school" : 102, "age" : 11 } ] }
   { "_id" : 3 }
   { "_id" : 4, "students" : [ { "name" : "ruth", "school" : 102, "age" : 16 } ] }

The document with ``_id`` equal to ``3`` does not contain the ``students`` field
since no array element matched the :projection:`$elemMatch` criteria.

The argument to :projection:`$elemMatch` matches elements of the array that
``$elemMatch`` is projecting. If you specify an equality with a field
name to ``$elemMatch``, it attempts to match objects within the array.
For example, ``$elemMatch`` attempts to match objects, instead of scalar
values, within the array for the following in the projection:

.. tabs-drivers::

   .. tab:: MongoDB Shell
      :tabid: shell

      .. code-block:: javascript

         db.schools.find( { zipcode: "63109" },
                         { athletics: { $elemMatch: { athletics: "basketball" } } })

   .. tab:: C#
      :tabid: csharp

      .. literalinclude:: /includes/driver-examples/projection/ElemMatchExamples.cs
         :language: csharp
         :start-after: // start zipAthleticsIncomplete
         :end-before: // end zipAthleticsIncomplete
         :dedent: 8

The preceding examples return the documents that have a ``zipcode`` value of
``"63109"``, but these documents include only the ``_id`` field because the projection
operation found no matching elements.

.. tabs-drivers::

   .. tab:: MongoDB Shell
      :tabid: shell

      To match scalar values, use the equality operator along with the scalar
      value that you want to match (``{$eq: <scalar value>}``). For example,
      the following :method:`~db.collection.find()` operation queries for all
      documents where the value of the ``zipcode`` field is ``"63109"``. The
      projection includes the matching element of the ``athletics`` array
      where the value is ``basketball``:

      .. code-block:: javascript
         :copyable: true

         db.schools.find( { zipcode: "63109" },
                         { athletics: { $elemMatch: { $eq: "basketball" } } })

   .. tab:: C#
      :tabid: csharp

      To perform an ``$elemMatch`` operation against scalar values in an array when using
      the .NET/C# driver, call the ``ElemMatch()`` method
      on the projection builder. Pass the name of the array field to project and an
      equality filter for the field ``"$eq"`` and the value you want to compare against.

      .. literalinclude:: /includes/driver-examples/projection/ElemMatchExamples.cs
         :language: csharp
         :start-after: // start zipAthletics
         :end-before: // end zipAthletics
         :dedent: 8

The operation returns the three documents that have ``zipcode`` value of
``"63109"``. The returned documents include the ``_id`` field and matching
elements of the ``athletics`` array, if any.

.. code-block:: javascript
   :copyable: false

   [
      { _id: 1 },
      { _id: 3, athletics: [ 'basketball' ] },
      { _id: 4 }
   ]

The document with ``_id`` equal to ``3`` is the only document that
matched the :projection:`$elemMatch` criteria.

.. seealso::

   :projection:`$ (projection) <$>` operator
