============================
$arrayToObject (aggregation)
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $arrayToObject

   .. versionadded:: 3.6

   Converts an array into a single document; the array must be
   either:

   - An array of two-element arrays where the first element is the
     field name, and the second element is the field value:

     .. code-block:: none

        [ [ "item", "abc123"], [ "qty", 25 ] ]

   \- OR -

   - An array of documents that contains two fields, ``k`` and ``v``
     where:

     - The ``k`` field contains the field name.

     - The ``v`` field contains the value of the field.

     .. code-block:: none

        [ { "k": "item", "v": "abc123"}, { "k": "qty", "v": 25 } ]

   :expression:`$arrayToObject` has the following syntax:

   .. code-block:: javascript

      { $arrayToObject: <expression> }

   The ``<expression>`` can be any valid :ref:`expression
   <aggregation-expressions>` that resolves to an array of two-element
   arrays or array of documents that contains "k" and "v" fields.

   For more information on expressions, see
   :ref:`aggregation-expressions`.

Behavior
--------

For more information on expressions, see :ref:`aggregation-expressions`.

.. list-table::
   :header-rows: 1
   :widths: 90 10

   * - Example
     - Results

   * - .. code-block:: json

          { $arrayToObject: { $literal: [{ "k": "item", "v": "abc123"}, { "k": "qty", "v": 25 } ] } }

     - .. code-block:: json

          { "item" : "abc123", "qty" : 25 }

   * - .. code-block:: json

          { $arrayToObject: { $literal:  [ [ "item", "abc123"], [ "qty", 25 ] ] } }

     - .. code-block:: json

          { "item" : "abc123", "qty" : 25 }

   * - .. code-block:: json

          { $arrayToObject: { $literal: [{ "k": "item", "v": "123abc"}, { "k": "item", "v": "abc123" } ] } }

     - .. code-block:: json

          { "item" : "123abc" }


Examples
--------


``$arrayToObject``  Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider a ``inventory`` collection with the following documents:

.. code-block:: javascript

   { "_id" : 1, "item" : "ABC1",  dimensions: [ { "k": "l", "v": 25} , { "k": "w", "v": 10 }, { "k": "uom", "v": "cm" } ] }
   { "_id" : 2, "item" : "ABC2",  dimensions: [ [ "l", 50], [ "w",  25 ], [ "uom", "cm" ] ] }

The following aggregation pipeline operation use the
:expression:`$arrayToObject` to return the ``dimensions`` field as a
document:

.. cssclass:: copyable-code
.. code-block:: javascript

   db.inventory.aggregate(
      [
         {
            $project: {
               item: 1,
               dimensions: { $arrayToObject: "$dimensions" }
            }
         }
      ]
   )

The operation returns the following:

.. code-block:: javascript

   { "_id" : 1, "item" : "ABC1", "dimensions" : { "l" : 25, "w" : 10, "uom" : "cm" } }
   { "_id" : 2, "item" : "ABC2", "dimensions" : { "l" : 50, "w" : 25, "uom" : "cm" } }

In case that our array field ``dimensions`` contains sub-documents with the same
``k`` field value:

.. code-block:: javascript
    
    { "_id" : 3, "item" : "ABC3", dimensions: [ { "k": "a", "v": 10}, { "k": "a", "v": 30 }  ]}

:expression:`$arrayToObject` will return as key value pair, the first
sub-document values in the array field:

.. code-block:: javascript

    { "_id" : 3, "item" : "ABC3", "dimensions" : { "a" : 10 } }


``$objectToArray`` + ``$arrayToObject`` Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/example-objectToArray-arrayToObject.rst

.. seealso:: :expression:`$objectToArray`
