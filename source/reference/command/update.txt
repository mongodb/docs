======
update
======

.. default-domain:: mongodb



.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

Definition
----------

.. dbcommand:: update

   The :dbcommand:`update` command modifies documents in a collection.
   A single :dbcommand:`update` command can contain multiple update
   statements. The update methods provided by the MongoDB drivers use
   this command internally.

   The :binary:`~bin.mongo` shell provides the following helper methods:

   - :method:`db.collection.updateOne()`

   - :method:`db.collection.updateMany()` 

   - :method:`db.collection.update()`

Syntax
------

.. versionchanged:: 4.2

The :dbcommand:`update` command has the following syntax:

.. code-block:: javascript

   db.runCommand(
      {
         update: <collection>,
         updates: [
            {
              q: <query>,
              u: <document or pipeline>,
              upsert: <boolean>,
              multi: <boolean>,
              collation: <document>,
              arrayFilters: <array>,
              hint: <document|string>
            },
            ...
         ],
         ordered: <boolean>,
         writeConcern: { <write concern> },
         bypassDocumentValidation: <boolean>,
         comment: <any>
      }
   )

Command Fields
~~~~~~~~~~~~~~

The command takes the following fields:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Field

     - Type

     - Description

   * - ``update``

     - string

     - The name of the target collection.
       
       

   * - ``updates``

     - array

     - An array of one or more update statements to perform on the named
       collection. For details of the update statements, see :ref:`Update
       Statements <update-statement-documents>`.
       
       

   * - ``ordered``

     - boolean

     - Optional. If ``true``, then when an update statement fails, return without
       performing the remaining update statements. If ``false``, then when
       an update fails, continue with the remaining update statements, if
       any. Defaults to ``true``.
       
       

   * - ``writeConcern``

     - document

     - Optional. A document expressing the :doc:`write concern </reference/write-concern>`
       of the :dbcommand:`update` command. Omit to use the default write
       concern.
       
       .. include:: /includes/extracts/transactions-operations-write-concern.rst
       
       

   * - ``bypassDocumentValidation``

     - boolean

     - Optional. Enables :dbcommand:`update` to bypass document validation
       during the operation. This lets you update documents that do not
       meet the validation requirements.
       
       .. versionadded:: 3.2
       
       
   * - ``comment``

     - any

     - .. include:: /includes/extracts/comment-content.rst
       
       .. versionadded:: 4.4


.. _update-statement-documents:

Update Statements
`````````````````

Each element of the ``updates`` array is an update statement document.
Each document contains the following fields:

.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Field

     - Type

     - Description

   * - :ref:`q <update-command-q>`

     - document

     - .. _update-command-q:
     
       The query that matches documents to update. Use the same :ref:`query
       selectors <query-selectors>` as used in the :method:`find()
       <db.collection.find()>` method.

   * - :ref:`u <update-command-u>`

     - document or pipeline

     - .. _update-command-u:

       The modifications to apply.

       The value can be either:

       - A document that contains :ref:`update operator expressions
         <update-operators>`,

       - A replacement document with only ``<field1>: <value1>`` pairs, or

       - Starting in MongoDB 4.2, an aggregation pipeline.

         .. include:: /includes/list-update-agg-stages.rst

       For details, see :ref:`update-command-behaviors`.

   * - :ref:`upsert <update-command-upsert>`

     - boolean

     - .. _update-command-upsert:
     
       Optional. If ``true``, perform an insert if no documents match the query. If
       both ``upsert`` and ``multi`` are true and no documents match the
       query, the update operation inserts only a single document.

   * - ``multi``

     - boolean

     - Optional. If ``true``, updates all documents that meet the query criteria. If
       ``false``, limit the update to one document that meet the query
       criteria. Defaults to ``false``.

   * - ``collation``

     - document

     - Optional.

       .. include:: /includes/extracts/collation-option.rst

   * - ``arrayFilters``

     - array

     - Optional. An array of filter documents that determines which array elements to
       modify for an update operation on an array field.

       .. include::  /includes/extracts/arrayFilters-details.rst


       For examples, see :ref:`update-command-arrayFilters`.

       .. versionadded:: 3.6

   * - :ref:`hint <update-command-hint>` 

     - Document or string

     - .. _update-command-hint:

       Optional. A document or string that specifies the :doc:`index
       </indexes>` to use to support the :ref:`query predicate
       <update-command-q>`.
       
       The option can take an index specification document or the index
       name string.
       
       If you specify an index that does not exist, the operation
       errors.

       For an example, see :ref:`ex-update-command-hint`.

       .. versionadded:: 4.2

Returns
~~~~~~~

The command returns a document that contains the status of the
operation. For example:

.. code-block:: javascript
   :copyable: false

   {
      "ok" : 1,
      "nModified" : 0,
      "n" : 1,
      "upserted" : [
         {
            "index" : 0,
            "_id" : ObjectId("52ccb2118908ccd753d65882")
         }
      ]
   }

For details of the output fields, see :ref:`update-command-output`.

Access Control
--------------

On deployments running with :setting:`~security.authorization`, the
user must have access that includes the following privileges:

- :authaction:`update` action on the specified collection(s).

- :authaction:`find` action on the specified collection(s).

- :authaction:`insert` action on the specified collection(s).

The built-in role :authrole:`readWrite` provides the required
privileges.

.. _update-command-behaviors:

Behavior
--------

.. _update-command-behaviors-update-expressions:

Update with an Update Operator Expressions Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The update statement field :ref:`u <update-command-u>` can accept a
document that only contains :ref:`update operator <update-operators>`
expressions. For example:

.. code-block:: javascript
   :emphasize-lines: 4
   :copyable: false

   updates: [
      {
        q: <query>,
        u: { $set: { status: "D" }, $inc: { quantity: 2 } },
         ...
      },
      ...
   ]

Then, the :dbcommand:`update` command updates only the corresponding
fields in the document.

.. _update-command-behaviors-replacement-document:

Update with a Replacement Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The update statement field :ref:`u <update-command-u>` field can accept
a replacement document, i.e. the document contains *only*
``field:value`` expressions. For example:

.. code-block:: javascript
   :emphasize-lines: 4
   :copyable: false

   updates: [
      {
         q: <query>,
         u: { status: "D", quantity: 4 },
         ...
      },
      ...
   ]

Then the :dbcommand:`update` command *replaces* the matching document
with the update document. The :dbcommand:`update` command can only
replace a *single* matching document; i.e. the ``multi`` field cannot
be ``true``. The :dbcommand:`update` command *does not* replace the
``_id`` value.

.. _update-command-behaviors-aggregation-pipeline:

Update with an Aggregation Pipeline
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 4.2, the update statement field :ref:`u
<update-command-u>` field can accept an :doc:`aggregation pipeline
</core/aggregation-pipeline>` ``[ <stage1>, <stage2>, ... ]`` that
specifies the modifications to perform. The pipeline can consist of
the following stages:

.. include:: /includes/list-update-agg-stages.rst

Using the aggregation pipeline allows for a more expressive update
statement, such as expressing conditional updates based on current
field values or updating one field using the value of another field(s).

For example:

.. code-block:: javascript
   :emphasize-lines: 4-7
   :copyable: false

   updates: [
      {
         q: <query>,
         u: [ 
           { $set: { status: "Modified", comments: [ "$misc1", "$misc2" ] } }, 
           { $unset: [ "misc1", "misc2" ] } 
         ],
         ...
      },
      ...
   ]

.. note::

   The ``$set`` and ``$unset`` used in the pipeline refers to the
   aggregation stages :pipeline:`$set` and :pipeline:`$unset`
   respectively, and not the update operators :update:`$set` and :update:`$unset`.

For examples, see :ref:`update-command-example-agg`.

Limits
~~~~~~

For each update element in the ``updates`` array, the sum of the query
and the update sizes (i.e. ``q`` and ``u`` ) must be less than or equal
to the :limit:`maximum BSON document size <BSON Document Size>`.

The total number of update statements in the ``updates`` array must be
less than or equal to the :limit:`maximum bulk size
<Bulk Operation Size>`.

Document Validation
~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/bypassDocumentValidation-update.rst

Sharded Collections
~~~~~~~~~~~~~~~~~~~

.. _cmd-update-sharded-upsert:

``upsert`` on a Sharded Collection
``````````````````````````````````

To use :dbcommand:`update` with ``multi: false`` on a sharded
collection,

- If you do not specify :ref:`upsert: true <update-command-upsert>`,
  the filter :ref:`q <update-command-q>` must either include an
  equality match on the ``_id`` field or target a single shard (such as
  by including the shard key).

- If you specify :ref:`upsert: true <update-command-upsert>`, the
  filter :ref:`q <update-command-q>` must include an equality match on the
  shard key.

  .. include:: /includes/extracts/missing-shard-key-equality-condition-update.rst

Replace Document
````````````````

Starting in MongoDB 4.2, when replacing a document, :dbcommand:`update`  attempts
to target a shard, first by using the query filter. If the operation
cannot target a single shard by the query filter, it then attempts to target
by the replacement document.

In earlier versions, the operation attempts to target using the
replacement document.

.. _command-update-shard-key-modification:

Shard Key Modification
``````````````````````

.. container::

   .. include:: /includes/limits-sharding-shardkey-document-immutable.rst

   To modify the **existing** shard key value with
   :dbcommand:`update`:

   - You :red:`must` run on a :binary:`~bin.mongos`. Do :red:`not`
     issue the operation directly on the shard.

   - You :red:`must` run either in a :doc:`transaction
     </core/transactions>` or as a :doc:`retryable write
     </core/retryable-writes>`.

   - You :red:`must` specify ``multi: false``.
   
   - You :red:`must` include an equality :ref:`query filter
     <update-command-q>` on the full shard key.

   .. tip::

      .. include:: /includes/extracts/missing-shard-key-equality-condition-abridged.rst

   See also :ref:`cmd-update-sharded-upsert`.

.. _cmd-update-missing-shard-key:

Missing Shard Key
`````````````````

.. container::

   Starting in version 4.4, documents in a sharded collection can be
   :ref:`missing the shard key fields <shard-key-missing>`. To use
   :dbcommand:`update` to set the document's
   **missing** shard key, you :red:`must` run on a
   :binary:`~bin.mongos`. Do :red:`not` issue the operation directly on
   the shard.

   In addition, the following requirements also apply:

   .. list-table::
      :header-rows: 1
      :widths: 30 70

      * - 

        - Requirements

      * - To set to ``null``

        - - Can specify ``multi: true``.

          - Requires equality filter on the full shard key if ``upsert:
            true`` is specified.

      * - To set to a non-``null`` value:

        - - :red:`Must` be performed either inside a :doc:`transaction
            </core/transactions>` or as a :doc:`retryable write
            </core/retryable-writes>`.

          - :red:`Must` specify ``multi: false``.

          - Requires equality filter on the full shard key if either:

            - ``upsert: true``, or

            - if using a replacement document and the new shard key
              value belongs to a different shard.

   .. tip::

      .. include:: /includes/extracts/missing-shard-key-equality-condition-abridged.rst

   See also:

   - :ref:`method-update-sharded-upsert`

   - :ref:`shard-key-missing`

Transactions
~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-supported-operation.rst

.. include:: /includes/extracts/transactions-usage.rst

Upsert within Transactions
``````````````````````````

.. include:: /includes/extracts/transactions-upsert-availability.rst

Write Concerns and Transactions
````````````````````````````````

.. include:: /includes/extracts/transactions-operations-write-concern.rst



.. |operation| replace:: :dbcommand:`update`

Examples
--------

Update Specific Fields of One Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use :ref:`update operators <update-operators>` to update only the
specified fields of a document.

For example, create a ``members`` collection with the following documents:

.. code-block:: javascript

   db.members.insertMany([
      { _id: 1, member: "abc123", status: "Pending", points: 0, misc1: "note to self: confirm status", misc2: "Need to activate" },
      { _id: 2, member: "xyz123", status: "D", points: 59, misc1: "reminder: ping me at 100pts", misc2: "Some random comment" },
   ])

The following command uses the :update:`$set` and :update:`$inc`
update operators to update the ``status`` and the ``points`` fields of a
document where the ``member`` equals ``"abc123"``:

.. code-block:: javascript

   db.runCommand(
      {
         update: "members",
         updates: [
            {
              q: { member: "abc123" }, u: { $set: { status: "A" }, $inc: { points: 1 } }
            }
         ],
         ordered: false,
         writeConcern: { w: "majority", wtimeout: 5000 }
      }
   )

Because ``<update>`` document does not specify the optional ``multi``
field, the update only modifies one document, even if more than one
document matches the ``q`` match condition.

The returned document shows that the command found and updated a single
document. The command returns:

.. code-block:: javascript
   :copyable: false

   { "n" : 1, "nModified" : 1, "ok" : 1, <additional fields if run on a replica set/sharded cluster> }

See :ref:`update-command-output` for details.

After the command, the collection contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "member" : "abc123", "status" : "A", "points" : 1, "misc1" : "note to self: confirm status", "misc2" : "Need to activate" }
   { "_id" : 2, "member" : "xyz123", "status" : "D", "points" : 59, "misc1" : "reminder: ping me at 100pts", "misc2" : "Some random comment" }

Update Specific Fields of Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use :ref:`update operators <update-operators>` to update only the
specified fields of a document, and include the ``multi`` field set to
``true`` in the update statement.

For example, a ``members`` collection contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "member" : "abc123", "status" : "A", "points" : 1, "misc1" : "note to self: confirm status", "misc2" : "Need to activate" }
   { "_id" : 2, "member" : "xyz123", "status" : "D", "points" : 59, "misc1" : "reminder: ping me at 100pts", "misc2" : "Some random comment" }

The following command uses the :update:`$set` and :update:`$inc`
update operators to modify the ``status`` and the ``points`` fields
respectively of all documents in the collection:

.. code-block:: javascript

   db.runCommand(
      {
         update: "members",
         updates: [
            { q: { }, u: { $set: { status: "A" }, $inc: { points: 1 } }, multi: true }
         ],
         ordered: false,
         writeConcern: { w: "majority", wtimeout: 5000 }
      }
   )

The update modifies all documents that match the query specified in the
``q`` field, namely the empty query which matches all documents in the
collection.

The returned document shows that the command found and updated multiple
documents.  For a replica set, the command returns:

.. code-block:: javascript
   :copyable: false

   { "n" : 2, "nModified" : 2, "ok" : 1,  <additional fields if run on a replica set/sharded cluster> }

See :ref:`update-command-output` for details.

After the command, the collection contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "member" : "abc123", "status" : "A", "points" : 2, "misc1" : "note to self: confirm status", "misc2" : "Need to activate" }
   { "_id" : 2, "member" : "xyz123", "status" : "A", "points" : 60, "misc1" : "reminder: ping me at 100pts", "misc2" : "Some random comment" }

.. _update-command-example-agg:

Update with Aggregation Pipeline
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 4.2, the :dbcommand:`update` command can use an
aggregation pipeline for the update. The pipeline can consist of the
following stages:

.. include:: /includes/list-update-agg-stages.rst

Using the aggregation pipeline allows for a more expressive update
statement, such as expressing conditional updates based on current
field values or updating one field using the value of another field(s).

Example 1
`````````

The following examples uses the aggregation pipeline to modify a field
using the values of the other fields in the document.

A ``members`` collection contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "member" : "abc123", "status" : "A", "points" : 2, "misc1" : "note to self: confirm status", "misc2" : "Need to activate" }
   { "_id" : 2, "member" : "xyz123", "status" : "A", "points" : 60, "misc1" : "reminder: ping me at 100pts", "misc2" : "Some random comment" }

Assume that instead of separate ``misc1`` and ``misc2`` fields, you
want to gather these into a new ``comments`` field. The following
update operation uses an aggregation pipeline to add the new
``comments`` field and remove the ``misc1`` and ``misc2`` fields for
all documents in the collection.

- First, set the ``status`` field to ``"Modified"`` and add a new
  field ``comments`` that contains the current contents of two other
  fields ``misc1`` and ``misc2`` fields.

- Second, remove the ``misc1`` and ``misc2`` fields.

.. code-block:: javascript

   db.runCommand(
      {
         update: "members",
         updates: [
            { 
              q: { },  
              u: [ 
                 { $set: { status: "Modified", comments: [ "$misc1", "$misc2" ] } },
                 { $unset: [ "misc1", "misc2" ] }
              ], 
              multi: true
            }
         ],
         ordered: false,
         writeConcern: { w: "majority", wtimeout: 5000 }
      }
   )

.. note::

   The ``$set`` and ``$unset`` used in the pipeline refers to the
   aggregation stages :pipeline:`$set` and :pipeline:`$unset`
   respectively, and not the update operators :update:`$set` and :update:`$unset`.

The returned document shows that the command found and updated multiple
documents.  The command returns:

.. code-block:: javascript
   :copyable: false

   { "n" : 2, "nModified" : 2, "ok" : 1, <additional fields if run on a replica set/sharded cluster> }

See :ref:`update-command-output` for details.

After the command, the collection contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "member" : "abc123", "status" : "Modified", "points" : 2, "comments" : [ "note to self: confirm status", "Need to activate" ] }
   { "_id" : 2, "member" : "xyz123", "status" : "Modified", "points" : 60, "comments" : [ "reminder: ping me at 100pts", "Some random comment" ] }

Example 2
`````````

The aggregation pipeline allows the update to perform conditional
updates based on the current field values as well as use current field
values to calculate a separate field value.

.. code-block:: javascript

   db.students.insert([
      { "_id" : 1, "tests" : [ 95, 92, 90 ] },
      { "_id" : 2, "tests" : [ 94, 88, 90 ] },
      { "_id" : 3, "tests" : [ 70, 75, 82 ] }
   ]);

Using an aggregation pipeline, you can update the documents with the
calculated grade average and letter grade.

.. code-block:: javascript

   db.runCommand(
      {
         update: "students",
         updates: [
            { 
              q: { },  
              u: [ 
                    { $set: { average : { $avg: "$tests" } } },
                    { $set: { grade: { $switch: { 
                                          branches: [
                                              { case: { $gte: [ "$average", 90 ] }, then: "A" },
                                              { case: { $gte: [ "$average", 80 ] }, then: "B" },
                                              { case: { $gte: [ "$average", 70 ] }, then: "C" },                                                   
                                              { case: { $gte: [ "$average", 60 ] }, then: "D" }
                                          ],
                                          default: "F" 
                    } } } } 
              ], 
              multi: true
            }
         ],
         ordered: false,
         writeConcern: { w: "majority", wtimeout: 5000 }
      }
   )

.. note::

   The ``$set`` used in the pipeline refers to the aggregation stage
   :pipeline:`$set`, and not the update operators :update:`$set`.


First Stage
   The :pipeline:`$set` stage calculates a new field ``average`` based
   on the average of the ``tests`` field. See :expression:`$avg` for
   more information on the ``$avg`` aggregation operator.

Second Stage
   The :pipeline:`$set` stage calculates a new field ``grade`` based on
   the ``average`` field calculated in the previous stage. See
   :expression:`$switch` for more information on the ``$switch``
   aggregation operator.

The returned document shows that the command found and updated multiple
documents.  The command returns:

.. code-block:: javascript
   :copyable: false

   { "n" : 3, "nModified" : 3, "ok" : 1, <additional fields if run on a replica set/sharded cluster> }

After the command, the collection contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "tests" : [ 95, 92, 90 ], "average" : 92.33333333333333, "grade" : "A" }
   { "_id" : 2, "tests" : [ 94, 88, 90 ], "average" : 90.66666666666667, "grade" : "A" }
   { "_id" : 3, "tests" : [ 70, 75, 82 ], "average" : 75.66666666666667, "grade" : "C" }

Bulk Update
~~~~~~~~~~~

The following example performs multiple update operations on the
``members`` collection:

.. code-block:: javascript

   db.runCommand(
      {
         update: "members",
         updates: [
            { q: { status: "P" }, u: { $set: { status: "D" } }, multi: true },
            { q: { _id: 5 }, u: { _id: 5, name: "abc123", status: "A" }, upsert: true }
         ],
         ordered: false,
         writeConcern: { w: "majority", wtimeout: 5000 }
      }
   )

The returned document shows that the command modified ``10`` documents
and inserted a document with the ``_id`` value ``5``. See
:ref:`update-command-output` for details.

.. code-block:: javascript

   {
      "ok" : 1,
      "nModified" : 10,
      "n" : 11,
      "upserted" : [
         {
            "index" : 1,
            "_id" : 5
         }
      ]
   }

Specify Collation
~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/collation-versionadded.rst

A collection ``myColl`` has the following documents:

.. code-block:: javascript

   { _id: 1, category: "café", status: "A" }
   { _id: 2, category: "cafe", status: "a" }
   { _id: 3, category: "cafE", status: "a" }

The following operation includes the :ref:`collation <collation>`
option:

.. code-block:: javascript

   db.runCommand({
      update: "myColl",
      updates: [
        { q: { category: "cafe", status: "a" }, u: { $set: { status: "Updated" } }, collation: { locale: "fr", strength: 1 } }
      ]
   })

.. _update-command-arrayFilters:

Specify ``arrayFilters`` for Array Update Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/arrayFilters-blurb.rst

Update Elements Match ``arrayFilters`` Criteria
```````````````````````````````````````````````

Create a collection ``students``  with the following
documents:

.. cssclass:: copyable-code

.. code-block:: javascript

   db.students.insert([
      { "_id" : 1, "grades" : [ 95, 92, 90 ] },
      { "_id" : 2, "grades" : [ 98, 100, 102 ] },
      { "_id" : 3, "grades" : [ 95, 110, 100 ] }
   ]);

To modify all elements that are greater than or equal to ``100`` in the
``grades`` array, use the filtered positional operator
:update:`$[\<identifier\>]` with the ``arrayFilters`` option:

.. code-block:: javascript

   db.runCommand({
      update: "students",
      updates: [
        { q: { grades: { $gte: 100 } }, u: { $set: { "grades.$[element]" : 100 } }, arrayFilters: [ { "element": { $gte: 100 } } ], multi: true}
      ]
   })

After the operation, the collection contains the following documents:

.. code-block:: javascript
   :emphasize-lines: 2-3

   { "_id" : 1, "grades" : [ 95, 92, 90 ] }
   { "_id" : 2, "grades" : [ 98, 100, 100 ] }
   { "_id" : 3, "grades" : [ 95, 100, 100 ] }

Update Specific Elements of an Array of Documents
`````````````````````````````````````````````````

Create a collection ``students2`` with the following documents:

.. code-block:: javascript

   db.students2.insert([
      {
         "_id" : 1,
         "grades" : [
            { "grade" : 80, "mean" : 75, "std" : 6 },
            { "grade" : 85, "mean" : 90, "std" : 4 },
            { "grade" : 85, "mean" : 85, "std" : 6 }
         ]
      },
      {
         "_id" : 2,
         "grades" : [
            { "grade" : 90, "mean" : 75, "std" : 6 },
            { "grade" : 87, "mean" : 90, "std" : 3 },
            { "grade" : 85, "mean" : 85, "std" : 4 }
         ]
      }
   ]);

To modify the value of the ``mean`` field for all elements in the
``grades`` array where the grade is greater than or equal to ``85``,
use the filtered positional operator :update:`$[\<identifier\>]` with
the ``arrayFilters``:

.. code-block:: javascript

   db.runCommand({
      update: "students2",
      updates: [
        { q: { }, u: { $set: { "grades.$[elem].mean" : 100 } }, arrayFilters: [ { "elem.grade": { $gte: 85 } } ], multi: true }
      ]
   })

After the operation, the collection has the following documents:

.. code-block:: javascript
   :emphasize-lines: 5-6,12-14

   {
      "_id" : 1,
      "grades" : [
         { "grade" : 80, "mean" : 75, "std" : 6 },
         { "grade" : 85, "mean" : 100, "std" : 4 },
         { "grade" : 85, "mean" : 100, "std" : 6 }
      ]
   }
   {
      "_id" : 2,
      "grades" : [
         { "grade" : 90, "mean" : 100, "std" : 6 },
         { "grade" : 87, "mean" : 100, "std" : 3 },
         { "grade" : 85, "mean" : 100, "std" : 4 }
      ]
   }

.. _ex-update-command-hint:

Specify ``hint`` for Update Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 4.2

Create a sample ``members`` collection with the following documents:

.. code-block:: javascript

   db.members.insertMany([
      { "_id" : 1, "member" : "abc123", "status" : "P", "points" :  0,  "misc1" : null, "misc2" : null },
      { "_id" : 2, "member" : "xyz123", "status" : "A", "points" : 60,  "misc1" : "reminder: ping me at 100pts", "misc2" : "Some random comment" },
      { "_id" : 3, "member" : "lmn123", "status" : "P", "points" :  0,  "misc1" : null, "misc2" : null },
      { "_id" : 4, "member" : "pqr123", "status" : "D", "points" : 20,  "misc1" : "Deactivated", "misc2" : null },
      { "_id" : 5, "member" : "ijk123", "status" : "P", "points" :  0,  "misc1" : null, "misc2" : null },
      { "_id" : 6, "member" : "cde123", "status" : "A", "points" : 86,  "misc1" : "reminder: ping me at 100pts", "misc2" : "Some random comment" }
   ])

Create the following indexes on the collection:

.. code-block:: javascript

   db.members.createIndex( { status: 1 } )
   db.members.createIndex( { points: 1 } )

The following update operation explicitly hints to use the index ``{
status: 1 }``:

.. note::
   
   If you specify an index that does not exist, the operation errors.

.. code-block:: javascript

   db.runCommand({
      update: "members",
      updates: [
        { q: { "points": { $lte: 20 }, "status": "P" }, u: { $set: { "misc1": "Need to activate" } }, hint: { status: 1 }, multi: true }
      ]
   })

The update command returns the following:

.. code-block:: javascript

   { "n" : 3, "nModified" : 3, "ok" : 1 }

To see the index used, run :dbcommand:`explain` on the operation:

.. code-block:: javascript

   db.runCommand(
      {
        explain: {
          update: "members",
          updates: [ 
            { q: { "points": { $lte: 20 }, "status": "P" }, u: { $set: { "misc1": "Need to activate" } }, hint: { status: 1 }, multi: true }
          ]
        },
        verbosity: "queryPlanner"
      }
   )

The :dbcommand:`explain` does not modify the documents.

.. _update-command-output:

Output
------

The returned document contains a subset of the following fields:

.. data:: update.ok

   The status of the command.

.. data:: update.n

   The number of documents selected for update. If the update operation
   results in no change to the document, e.g. :update:`$set` expression
   updates the value to the current value, :data:`~update.n` can be
   greater than :data:`~update.nModified`.

.. data:: update.nModified

   The number of documents updated. If the update operation results in
   no change to the document, such as setting the value of the field to
   its current value, :data:`~update.nModified` can be less than
   :data:`~update.n`.

.. data:: update.upserted

   An array of documents that contains information for each document
   inserted through the update with ``upsert: true``.

   Each document contains the following information:

   .. data:: update.upserted.index

      An integer that identifies the update with ``upsert:true``
      statement in the ``updates`` array, which uses a zero-based index.

   .. data:: update.upserted._id

      The ``_id`` value of the added document.

.. data:: update.writeErrors

   An array of documents that contains information regarding any error
   encountered during the update operation. The
   :data:`~update.writeErrors` array contains an error document for
   each update statement that errors.

   Each error document contains the following fields:

   .. data:: update.writeErrors.index

      An integer that identifies the update statement in the
      ``updates`` array, which uses a zero-based index.

   .. data:: update.writeErrors.code

      An integer value identifying the error.

   .. data:: update.writeErrors.errmsg

      A description of the error.

.. data:: update.writeConcernError

   Document that describe error related to write concern and contains
   the field:

   .. data:: update.writeConcernError.code

      An integer value identifying the cause of the write concern error.

   .. data:: update.writeConcernError.errmsg

      A description of the cause of the write concern error.

   .. data:: update.writeConcernError.errInfo.writeConcern

      .. versionadded:: 4.4

      .. include:: /includes/fact-errInfo-wc.rst

      .. data:: update.writeConcernError.errInfo.writeConcern.provenance

         .. include:: /includes/fact-errInfo-wc-provenance.rst

In addition to the aforementioned update specific return fields, the
:method:`db.runCommand()` includes additional information:

- for replica sets: ``optime``, ``electionId``, ``$clusterTime``, and
  ``operationTime``. 
  
- for sharded clusters: ``operationTime`` and ``$clusterTime``.

See :ref:`db.runCommand Response <command-response>` for details on
these fields.


The following is an example document returned for a successful
:dbcommand:`update` command that performed an upsert:

.. code-block:: javascript

   {
      "ok" : 1,
      "nModified" : 0,
      "n" : 1,
      "upserted" : [
         {
            "index" : 0,
            "_id" : ObjectId("52ccb2118908ccd753d65882")
         }
      ]
   }

The following is an example document returned for a bulk update
involving three update statements, where one update statement was
successful and two other update statements encountered errors:

.. code-block:: javascript

   {
      "ok" : 1,
      "nModified" : 1,
      "n" : 1,
      "writeErrors" : [
         {
            "index" : 1,
            "code" : 16837,
            "errmsg" : "The _id field cannot be changed from {_id: 1.0} to {_id: 5.0}."
         },
         {
            "index" : 2,
            "code" : 16837,
            "errmsg" : "The _id field cannot be changed from {_id: 2.0} to {_id: 6.0}."
         },
      ]
   }
