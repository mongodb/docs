=====================
grantPrivilegesToRole
=====================

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: grantPrivilegesToRole

   Assigns additional privileges to an existing role. To use this
   command you must have the :authaction:`grantAnyRole` action on the
   database that the privilege targets. To grant a privilege on multiple
   databases or on the ``cluster`` resource, you must have the
   :authaction:`grantAnyRole` action on the ``admin`` database.

   The :dbcommand:`grantPrivilegesToRole` command uses the following
   syntax:

   .. code-block:: javascript

      { grantPrivilegesToRole: "<role>",
        privileges: [
          { resource: { <resource> }, actions: [ "<action>", ... ] },
          ...
        ],
        writeConcern: { <write concern> }
      }

   The :dbcommand:`grantPrivilegesToRole` command has the following
   fields:

   .. include:: /reference/command/grantPrivilegesToRole-field.rst

Example
-------

In the following :dbcommand:`grantPrivilegesToRole` command, the
``privileges`` array grants two additional privileges to the ``service``
role:

.. code-block:: javascript

   { grantPrivilegesToRole: "service",
     privileges: [
       { resource: { db: "products", collection: "" }, actions: [ "find" ] },
       { resource: { db: "", collection: "system.indexes" }, actions: [ "find" ] }
     ],
     writeConcern: { w: "majority" , wtimeout: 5000 }
   }

The first privilege in the ``privileges`` array allows the user to
search on all non-system collections in the ``products`` database. The
privilege does not allow searches on :doc:`system collections
</reference/system-collections>`, such as the :data:`system.indexes
<<database>.system.indexes>` collection, which must be explicitly named
in a privilege to be included.

The second privilege explicitly allows the :authaction:`find` action on
:data:`system.indexes <<database>.system.indexes>` collections and
allows such searches on all databases.
