=====
$near
=====

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. query:: $near

   Specifies a point for which a :term:`geospatial` query returns the
   documents from nearest to farthest. The :query:`$near` operator can
   specify either a :term:`GeoJSON` point or legacy coordinate point.

   :query:`$near` requires a geospatial index:

   - :doc:`2dsphere </core/2dsphere>` index if specifying a
     :term:`GeoJSON` point,

   - :doc:`2d </core/2d>` index if specifying a point using legacy
     coordinates.

   To specify a :term:`GeoJSON` point, :query:`$near` operator requires
   a :doc:`2dsphere </core/2dsphere>` index and has the following
   syntax:

   .. code-block:: javascript

      {
        $near: {
           $geometry: {
              type: "Point" ,
              coordinates: [ <longitude> , <latitude> ],
              $maxDistance: <distance in meters>,
              $minDistance: <distance in meters>
           },
        }
      }

   When specifying a :term:`GeoJSON` point, you can use the *optional*
   :query:`$minDistance` and :query:`$maxDistance` specifications to
   limit the :query:`$near` results by distance in *meters*:

   - :query:`$minDistance` limits the results to those documents that
     are *at least* the specified distance from the center point.
     :query:`$minDistance` is only available for use with
     :doc:`2dsphere </core/2dsphere>` index.

     .. versionadded:: 2.6

   - :query:`$maxDistance` limits the results to those documents that
     are *at most* the specified distance from the center point.

   To specify a point using legacy coordinates, :query:`$near` requires
   a :doc:`2d </core/2d>` index and has the following syntax:

   .. code-block:: javascript

      {
        $near: [ <x>, <y> ],
        $maxDistance: <distance in radians>
      }

   If you use longitude and latitude for legacy coordinates, specify
   the longitude first, then latitude.

   When specifying a legacy coordinate, you can use the *optional*
   :query:`$maxDistance` specification to limit the :query:`$near`
   results by distance in *radians*. :query:`$maxDistance` limits the
   results to those documents that are *at most* the specified distance
   from the center point.

Behavior
--------

``2d`` Index
~~~~~~~~~~~~

:query:`$near` queries that use a :doc:`2d </core/2d>` index return a
limit of 100 documents.

If using a ``2d`` index for :query:`$near`, specifying a batch size
(i.e. :method:`~cursor.batchSize()`) in conjunction with :query:`$near`
queries that use a :doc:`2d </core/2d>` index is undefined. See
:issue:`SERVER-5236` for more information.

Special Indexes Restriction
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-geo-near-special-indexes.rst

Sharded Collections Restrictions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-near-sharded-cluster.rst

Sort Operation
~~~~~~~~~~~~~~

.. include:: /includes/fact-geo-near-returns-sorted-results.rst

.. |geo-operation| replace:: :dbcommand:`$near`

Examples
--------

Query on GeoJSON Data
~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/example-near-minDistance.rst

Query on Legacy Coordinates
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. important::
   Specify coordinates in this order: **"longitude, latitude."**

Consider a collection ``legacy2d`` that has a ``2d`` index.

The following example returns documents that are at most ``0.10``
radians from the specified legacy coordinate pair, sorted from nearest
to farthest:

.. code-block:: javascript

   db.legacy2d.find(
      { location : { $near : [ -73.9667, 40.78 ], $maxDistance: 0.10 } }
   )

The result set contains at most 100 documents.
