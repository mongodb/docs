===================================
Migrate Chunks in a Sharded Cluster
===================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

In most circumstances, you should let the automatic :term:`balancer`
migrate :term:`chunks <chunk>` between :term:`shards <shard>`. However,
you may want to migrate chunks manually in a few cases:

- When :term:`pre-splitting` an empty collection, migrate chunks
  manually to distribute them evenly across the shards. Use
  pre-splitting in limited situations to support bulk data ingestion.

- If the balancer in an active cluster cannot distribute chunks within
  the :ref:`balancing window <sharding-schedule-balancing-window>`, then
  you will have to migrate chunks manually.

To manually migrate chunks, use the :dbcommand:`moveChunk` command.
For more information on how the automatic balancer moves chunks
between shards, see :ref:`sharding-balancing-internals` and
:ref:`sharding-chunk-migration`.

.. example:: Migrate a single chunk

   The following example assumes that the field ``username`` is the
   :term:`shard key` for a collection named ``users`` in the ``myapp``
   database, and that the value ``smith`` exists within the :term:`chunk`
   to migrate. Migrate the chunk using the following command in the
   :binary:`~bin.mongo` shell.

   .. code-block:: javascript

      db.adminCommand( { moveChunk : "myapp.users",
                         find : {username : "smith"},
                         to : "mongodb-shard3.example.net" } )

   This command moves the chunk that includes the shard key value "smith" to the
   :term:`shard` named ``mongodb-shard3.example.net``. The command will
   block until the migration is complete.

   .. tip::

      To return a list of shards, use the :dbcommand:`listShards`
      command.

.. example:: Evenly migrate chunks

   To evenly migrate chunks for the ``myapp.users`` collection,
   put each prefix chunk on the next shard from the other and run
   the following commands in the mongo shell:

   .. code-block:: javascript

      var shServer = [ "sh0.example.net", "sh1.example.net", "sh2.example.net", "sh3.example.net", "sh4.example.net" ];
      for ( var x=97; x<97+26; x++ ){
        for( var y=97; y<97+26; y+=6 ) {
          var prefix = String.fromCharCode(x) + String.fromCharCode(y);
          db.adminCommand({moveChunk : "myapp.users", find : {email : prefix}, to : shServer[(y-97)/6]})
        }
      }

See :doc:`/tutorial/create-chunks-in-sharded-cluster` for an introduction
to pre-splitting.

The :dbcommand:`moveChunk` command has the: ``_secondaryThrottle``
parameter and the ``writeConcern`` parameter that determines when the
balancer proceeds with the next document in the migrating chunk. For
more information, see :ref:`sharded-cluster-config-secondary-throttle`.

.. warning::

   The :dbcommand:`moveChunk` command may produce the following error
   message:

   .. code-block:: none

      The collection's metadata lock is already taken.

   This occurs when clients have too many open :term:`cursors
   <cursor>` that access the migrating chunk. You may either
   wait until the cursors complete their operations or close the
   cursors manually.

   .. todo:: insert link to killing a cursor.
