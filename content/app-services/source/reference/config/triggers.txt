.. meta::
   :robots: noindex, nosnippet

.. _appconfig-triggers:

===========================
Trigger Configuration Files
===========================

.. facet::
   :name: genre 
   :values: reference

.. facet::
  :name: programming_language
  :values: json

.. meta::
  :description: Learn about Atlas Trigger configuration parameters. 

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. code-block:: none
   
   app/
   └── triggers/
       └── <trigger name>.json

.. _config-trigger:

General Configuration
---------------------

All triggers conform to a base schema with specific variations depending on the
trigger type. The following fields exist in *all* trigger configuration files:

.. code-block:: json
   :caption: triggers/<trigger name>.json
   
   {
     "name": "<Trigger Name>",
     "type": "<Trigger Type>",
     "disabled": <Boolean>,
     "config": {},
     "event_processors": {
       "<Type of Event Processor>": {
         "config": {}
       }
     }
   }

.. list-table::
   :widths: 10 30
   :header-rows: 1

   * - Field
     - Description
   
   * - | ``name``
       | ``string``
     - The trigger name. This may be at most 64 characters
       long and can only contain ASCII letters, numbers, underscores,
       and hyphens.
   
   * - | ``type``
       | ``string``
     - The trigger type. The value of this field determines the exact
       configuration file schema.
       
       Valid Options:
       
       - ``"DATABASE"``
       - ``"AUTHENTICATION"``
       - ``"SCHEDULED"``

   * - | ``disabled``
       | ``boolean``
     - Defaults to ``false``. If ``true``, the trigger will not listen for any events and will
       not fire.

   * - | ``config``
       | ``object``
     - A document with fields that map to additional configuration options for
       the trigger. The exact configuration fields depend on the trigger
       ``type``:
       
       - :ref:`Database Triggers <config-database-trigger>`
       - :ref:`Authentication Triggers <config-authentication-trigger>`
       - :ref:`Scheduled Triggers <config-scheduled-trigger>`

   * - | ``event_processors``
       | ``object``
     - A document that configures the trigger to send events to an event
       processor whenever it fires.

       Valid Options:

       - "FUNCTION"
       - "AWS_EVENTBRIDGE"

       For more information on Functions, see :ref:`Atlas Functions <functions>`. 

       For more information on AWS EventBridge, see :ref:`Send Trigger Events to AWS EventBridge
       <aws-eventbridge>`.

   * - | ``event_processors.config``
       | ``object``
     - A document with fields that map to additional configuration options for
       the event processor. The exact configuration fields depend on the event
       processor type: 

       - :ref:`Function <trigger-function-event-processor>`
       - :ref:`AWS EventBridge <trigger-eventbridge-event-processor>`

.. _config-database-trigger:

Database Triggers
-----------------

Database trigger configurations conform to the base trigger schema with
additional configuration options that specify which collection to watch and when
to fire the trigger. 

The following fields exist in *database* trigger configuration files. There are
two possible configurations depending on the event processor type:

- ``FUNCTION``
- ``AWS_EVENTBRIDGE``

.. _trigger-function-event-processor:

**Database Trigger with a Function Event Processor**

.. code-block:: json
   :caption: triggers/<trigger name>.json
   
   {
     "name": "<Trigger Name>",
     "type": "DATABASE",
     "disabled": <boolean>,
     "config": {
       "service_id": "<MongoDB Data Source Service ID>",
       "database": "<Database Name>",
       "collection": "<Collection Name>",
       "operation_types": ["<Operation Type>", ...],
       "full_document": <boolean>,
       "full_document_before_change": <boolean>,
       "tolerate_resume_errors": <boolean>,
       "unordered": <boolean>,
       "match": { <Match Filter> },
       "maximum_throughput": <boolean>,
       "skip_catchup_events": <boolean>,
       "project": { <Projection Filter> },
     },
     "event_processors": {
        "FUNCTION": {
            "config": {
                "function_name": "<Function Name>"  
            }
        }
     }
   }

.. _trigger-eventbridge-event-processor:

**Database Trigger with an AWS EventBridge Event Processor**

.. code-block:: json
   :caption: triggers/<trigger name>.json
   
   {
     "name": "<Trigger Name>",
     "type": "DATABASE",
     "disabled": <boolean>,
     "config": {
       "service_id": "<MongoDB Data Source Service ID>",
       "database": "<Database Name>",
       "collection": "<Collection Name>",
       "operation_types": ["<Operation Type>", ...],
       "full_document": <boolean>,
       "full_document_before_change": <boolean>,
       "tolerate_resume_errors": <boolean>,
       "unordered": <boolean>,
       "match": { <Match Filter> },
       "maximum_throughput": <boolean>,
       "skip_catchup_events": <boolean>,
       "project": { <Projection Filter> },
     },
     "event_processors": {
       "AWS_EVENTBRIDGE": {
         "config": {
           "account_id": "<AWS Account ID>",
           "region": "<AWS Region>",
           "extended_json_enabled": <boolean>
         }
       }
     },
     "error_handler": {
       "config": { 
         "enabled": <boolean>,
         "function_name": "<Error Handler Function Name>"
       }  
     }
   }

.. list-table::
   :widths: 10 30
   :header-rows: 1

   * - Field
     - Description
   
   * - | ``config.service_id``
       | ``string``
     
     - The unique identifier of the :ref:`MongoDB data source <appconfig-data_sources>`
       that contains the watched collection. You cannot define a database
       trigger on a :ref:`serverless instance <serverless-caveats>` or
       :ref:`{+adf-instance+} <data-federation-caveats>`.
   
   * - | ``config.database``
       | ``string``
     - The name of the MongoDB database that contains the watched collection.
   
   * - | ``config.collection``
       | ``string``
     - The name of the collection that the trigger watches.
   
   * - | ``config.operation_types``
       | ``string[]``
     - A list of one or more :ref:`database operation
       types <database-event-operation-types>` that cause the trigger to fire.
       
       Valid operations types for all triggers:
       
       - ``"INSERT"``
       - ``"UPDATE"``
       - ``"REPLACE"``
       - ``"DELETE"``

       Valid operations types for database and deployment triggers: 
       
       - ``"CREATE_COLLECTION"``
       - ``"MODIFY_COLLECTION"``
       - ``"RENAME_COLLECTION"``
       - ``"SHARD_COLLECTION"``
       - ``"DROP_COLLECTION"``
       - ``"RESHARD_COLLECTION"``
       - ``"REFINE_COLLECTION_SHARD_KEY"``
       - ``"CREATE_INDEXES"``
       - ``"DROP_INDEXES"``

       Valid operations types for deployment triggers only:

       - ``"DROP_DATABASE"``
       
       .. tip::
          
          Update operations executed from MongoDB Compass or the MongoDB Atlas Data
          Explorer fully replace the previous document. As a result, update
          operations from these clients will generate ``REPLACE`` change events
          rather than ``UPDATE`` events.
   
   * - | ``config.full_document``
       | ``boolean``
     - If ``true``, ``UPDATE`` change events include the latest
       :manual:`majority-committed </reference/read-concern-majority/>` version
       of the modified document *after* the change was applied in the
       ``fullDocument`` field.
       
       .. note::
       
          Regardless of this setting, ``INSERT`` and ``REPLACE`` events always 
          include the``fullDocument`` field. ``DELETE`` events never include the 
          ``fullDocument`` field.
   
   * - | ``config.full_document_before_change``
       | ``boolean``
     - If ``true``, change events include a copy of the modified document
       from immediately *before* the change was applied in the
       ``fullDocumentBeforeChange`` field. All change events except for
       ``INSERT`` events include the document preimage.
             
       .. important:: Collection-Level Preimage Settings
          
          Document preimages use extra information stored in the oplog.
          The extra data may have performance implications for some apps.
          
          Once you've enabled document preimages for any trigger on a
          given collection, that collection will include preimage data in
          the oplog and other triggers on the collection can use preimages
          with no additonal overhead.
          
          You can disable document preimages on a per-trigger basis to
          exclude the preimage from change events. Regardless of your
          trigger-level settings, a collection's oplog entries will
          continue to include preimage data unless you explicitly disable
          preimages for the collection.
          
          For more information, see :ref:`preimages`.

   * - | ``config.tolerate_resume_errors``
       | ``boolean``
     - If ``true``, the Trigger automatically resumes if the token
       required to process change stream events cannot be found.

       .. include:: /includes/trigger-auto-resume.rst

       For more information on resuming suspended Triggers, see
       :ref:`Suspended Triggers <suspended_triggers>`.

   * - | ``config.unordered``
       | ``boolean``
     - If ``true``, indicates that event ordering is disabled for this trigger.
       
       .. include:: /includes/trigger-event-ordering.rst
   
   * - | ``config.match``
       | ``object``
     - .. include:: /includes/trigger-match-expression.rst

   * - | ``config.maximum_throughput``
       | ``boolean``
     - Defaults to ``false``. If ``true``, you can increase the maximum throughput
       beyond the default 10,000 concurrent processes. For more information,
       see :ref:`Maximize Throughput Triggers <triggers-maximum-throughput>`.
   
   * - | ``config.skip_catchup_events``
       | ``boolean``
     - Defaults to ``false``. If ``true``, enabling the Trigger after it was disabled
       will not invoke events that occurred while the Trigger was disabled.

   * - | ``config.project``
       | ``object``
     - .. include:: /includes/trigger-project-expression.rst

   * - | ``event_processors.config.account_id``
       | ``string``
     - An AWS account ID. For more information on how to find the account ID,
       refer to :ref:`Setup the MongoDB Partner Event Source <setup-eventbridge>`.

   * - | ``event_processors.config.region``
       | ``string``
     - An AWS region.

   * - | ``event_processors.config.extended_json_enabled``
       | ``boolean``
     - ``false`` by default. If ``true``, extended JSON is enabled.
       
       Triggers convert the BSON types in event objects into standard JSON types. 
       To preserve BSON type information, you can serialize event objects into 
       :manual:`Extended JSON format </reference/mongodb-extended-json>` instead. 
       Extended JSON preserves type information at the expense of readability and 
       interoperability.

   * - | ``error_handler.config.enabled``
       | ``boolean``
     - If ``true``, error handling is enabled for the AWS EventBridge trigger. For more information on
       configuring error handling, refer to :ref:`Custom Error Handling <eventbridge-error-handling>`.

   * - | ``error_handler.config.function_name``
       | ``string``
     - The name of the error handler function invoked when the AWS EventBridge 
       trigger fails and cannot be successfully retried.
     
.. _config-authentication-trigger:

Authentication Triggers
-----------------------

Authentication trigger configurations conform to the base trigger schema with
additional configuration options that specify which auth providers to watch and
when to fire the trigger. The following fields exist in *authentication* trigger
configuration files:

.. code-block:: json
   :caption: triggers/<trigger name>.json
   
   {
     "name": "<Trigger Name>",
     "type": "AUTHENTICATION",
     "config": {
       "operation_type": ["<Operation Type>", ...],
       "providers": ["<Provider Type>", ...],
     },
     "function_name": "<Trigger Function Name>",
     "disabled": <Boolean>
   }

.. list-table::
   :widths: 10 30
   :header-rows: 1

   * - Field
     - Description
   
   * - | ``config.operation_type``
       | ``string``
     - The :ref:`authentication operation type
       <authentication-event-operation-types>` that causes the trigger to fire.
       
       Valid operations types:
       
       - ``"LOGIN"``
       - ``"CREATE"``
       - ``"DELETE"``
   
   * - | ``config.providers``
       | ``string[]``
     - A list of :ref:`authentication provider <authentication-providers>` types
       that the trigger watches.
       
       Valid provider types:
       
       .. include:: /includes/auth-provider-internal-names.rst

.. _config-scheduled-trigger:

Scheduled Triggers
------------------

Scheduled trigger configurations conform to the base trigger schema with
additional configuration options that specify the schedule on which the trigger
fires. The following fields exist in *scheduled* trigger configuration files:

.. code-block:: json
   :caption: triggers/<trigger name>.json
   
   {
     "name": "<Trigger Name>",
     "type": "SCHEDULED",
     "config": {
       "schedule": "<CRON expression>"
     },
     "function_name": "<Trigger Function Name>",
     "disabled": <Boolean>
   }

.. list-table::
   :widths: 10 30
   :header-rows: 1

   * - Field
     - Description
   
   * - | ``config.schedule``
       | ``string``
     - The :ref:`CRON expression <CRON-expressions>` that
       schedules the trigger's execution.
