=======
$firstN
=======

.. default-domain:: mongodb

.. contents:: On this page
  :local:
  :backlinks: none
  :depth: 2
  :class: singlecol

Definition
----------

.. versionadded:: 5.2

   
``$firstN`` can be used as an aggregation accumulator or array operator. As 
an aggregation accumulator, it returns an aggregation of the first ``n``
elements within a group. As an array operator, it returns the 
specified number of elements from the beginning of an array.

Aggregation Accumulator
-----------------------
.. group:: $firstN

When ``$firstN`` is used as an aggregation accumulator, the elements returned 
are meaningful only if they are in a specified sort order.  If the group contains 
fewer than ``n`` elements, ``$firstN`` returns all elements in the group.

Syntax
~~~~~~
When used as an aggregation accumulator, ``$firstN`` has the following syntax:

.. code-block:: none
   :copyable: false

   {
      $firstN:
         {
            input: <expression>,
            n: <expression>
         }
   }

- ``input`` specifies the field(s) from the document to take the first 
  ``n`` of. Input can be any expression.
- ``n`` has to be a positive integral expression that is either a 
  constant or depends on the ``_id`` value for :pipeline:`$group`. 
  For details see :ref:`group key example<first-n-with-group-key>`.

Behavior
~~~~~~~~

Null and Missing Values
```````````````````````

- ``$firstN`` does not filter out null values.
- ``$firstN`` converts missing values to null.

Consider the following aggregation that returns the first five documents
from a group:

.. code-block:: javascript
   :emphasize-lines: 7,8

   db.aggregate( [
      {
         $documents: [
            { playerId: "PlayerA", gameId: "G1", score: 1 },
            { playerId: "PlayerB", gameId: "G1", score: 2 },
            { playerId: "PlayerC", gameId: "G1", score: 3 },
            { playerId: "PlayerD", gameId: "G1"},
            { playerId: "PlayerE", gameId: "G1", score: null }
         ]
      },
      {
         $group:
         {  
            _id: "$gameId",
            firstFiveScores:
               { 
                  $firstN:
                     {    
                        input: "$score",
                        n: 5
                     }
               }
         }
      }
   ] )

In this example:

- :pipeline:`$documents` creates the literal documents that contain
  player scores.
- :pipeline:`$group` groups the documents by ``gameId``. This
  example has only one ``gameId``, ``G1``.
- ``PlayerD`` has a missing score and ``PlayerE`` has a
  null ``score``. These values are both considered as null.
- The ``firstFiveScores`` field is specified using ``input : "$score"`` 
  and returned as an array. 
- Since there is no sort criteria the first 5 ``score``
  fields are returned.

.. code-block:: javascript
   :copyable: false

   [
      {
         _id: 'G1',
         firstFiveScores: [ 1, 2, 3, null, null ]
      }
   ]

Comparison of ``$firstN`` and ``$topN`` Accumulators
````````````````````````````````````````````````````

Both ``$firstN`` and ``$topN`` accumulators can accomplish similar 
results.

In general:

- If the documents coming into :pipeline:`$group` are already ordered,
  you should use ``$firstN``.
- If you're sorting and selecting the top ``n`` elements then you can use 
  ``$topN`` to accomplish both tasks with one accumulator.
- ``$firstN`` can be used as an aggregation expression, ``$topN`` cannot.

Restrictions
~~~~~~~~~~~~

Window Function and Aggregation Expression Support
``````````````````````````````````````````````````

``$firstN`` is supported as an
:ref:`aggregation expression <aggregation-expressions>`.

``$firstN`` is supported as a 
:pipeline:`window operator <$setWindowFields>`.

Examples
~~~~~~~~

Consider a ``gamescores`` collection with the following documents:

.. code-block:: javascript

   db.gamescores.insertMany([
      { playerId: "PlayerA", gameId: "G1", score: 31 },
      { playerId: "PlayerB", gameId: "G1", score: 33 },
      { playerId: "PlayerC", gameId: "G1", score: 99 },
      { playerId: "PlayerD", gameId: "G1", score: 1 },
      { playerId: "PlayerA", gameId: "G2", score: 10 },
      { playerId: "PlayerB", gameId: "G2", score: 14 },
      { playerId: "PlayerC", gameId: "G2", score: 66 },
      { playerId: "PlayerD", gameId: "G2", score: 80 }
   ])

Find the First Three Player Scores for a Single Game
````````````````````````````````````````````````````

You can use the ``$firstN`` accumulator to find the first three scores
in a single game.

.. code-block:: javascript

   db.gamescores.aggregate( [
      {
         $match : { gameId : "G1" }
      },
      {
         $group:
            {
               _id: "$gameId",
               firstThreeScores:
                  {
                     $firstN:
                     {
                        input: ["$playerId", "$score"],
                        n:3
                     }
                  }
            }
      }
   ] )

The example pipeline:

- Uses :pipeline:`$match` to filter the results on a single ``gameId``. 
  In this case, ``G1``.
- Uses :pipeline:`$group` to group the results by ``gameId``. In this 
  case, ``G1``.
- Specifies the fields that are input for ``$firstN`` with
  ``input : ["$playerId"," $score"]``.
- Uses ``$firstN`` to return the first three documents
  for the ``G1`` game with ``n : 3``.

The operation returns the following results:

.. code-block:: javascript
   :copyable: false

   [
      {
         _id: 'G1',
         firstThreeScores: [ [ 'PlayerA', 31 ], [ 'PlayerB', 33 ], [ 'PlayerC', 99 ] ]
      }
   ]

Finding the First Three Player Scores Across Multiple Games
```````````````````````````````````````````````````````````

You can use the ``$firstN`` accumulator to find the first ``n``
input fields in each game.

.. code-block:: javascript

   db.gamescores.aggregate( [
      {
         $group:
         { 
         _id: "$gameId", playerId:
            {
               $firstN:
                  {
                     input: [ "$playerId","$score" ],
                     n: 3
                  }
            }
         }
      }
   ] )
   
The example pipeline:

- Uses ``$group`` to group the results by ``gameId``.
- Uses ``$firstN`` to return the first three documents
  for each game with ``n: 3``.
- Specifies the fields that are input for ``$firstN`` with
  ``input : ["$playerId", "$score"]``.

The operation returns the following results:

.. code-block:: javascript
   :copyable: false

   [
      {
         _id: 'G1',
         playerId: [ [ 'PlayerA', 31 ], [ 'PlayerB', 33 ], [ 'PlayerC', 99 ] ]
      },
      {
         _id: 'G2',
         playerId: [ [ 'PlayerA', 10 ], [ 'PlayerB', 14 ], [ 'PlayerC', 66 ] ]
      }
   ]

Using ``$sort`` With ``$firstN``
````````````````````````````````

Using a ``$sort`` stage earlier in the pipeline can influence the 
results of the ``$firstN`` accumulator.

In this example:

- ``{$sort : { score : -1 } }`` sorts the highest scores to the back of 
  each group.
- ``firstN`` returns the three highest scores from front of each group.

.. code-block:: javascript

   db.gamescores.aggregate( [
         { $sort : { score : -1 } },
         {
            
            $group:
            { _id: "$gameId", playerId:
               {
                  $firstN:
                     {
                        input: [ "$playerId","$score" ],
                        n: 3
                     }
               }
            }
         }
      ] )

The operation returns the following results:

.. code-block:: javascript
   :copyable: false

   [
      {
         _id: 'G2',
         playerId: [ [ 'PlayerD', 80 ], [ 'PlayerC', 66 ], [ 'PlayerB', 14 ] ]
      },
      {
         _id: 'G1',
         playerId: [ [ 'PlayerC', 99 ], [ 'PlayerB', 33 ], [ 'PlayerA', 31 ] ]
      }
   ]

.. _first-n-with-group-key: 

Computing ``n`` Based on the Group Key for ``$group``
`````````````````````````````````````````````````````

You can also assign the value of ``n`` dynamically. In this example,
the :expression:`$cond` expression is used on the ``gameId`` field.

.. code-block:: javascript
   :emphasize-lines: 11

   db.gamescores.aggregate([
      {
         $group:
         {
            _id: {"gameId": "$gameId"},
            gamescores:
               {
                  $firstN:
                     {
                        input: "$score",
                        n: { $cond: { if: {$eq: ["$gameId","G2"] }, then: 1, else: 3 } }
                     }
               }
         }
      }
   ] )

The example pipeline:

- Uses ``$group`` to group the results by ``gameId``.
- Specifies the fields that input for ``$firstN`` with
  ``input : "$score"``.
- If the ``gameId`` is ``G2`` then ``n`` is 1, otherwise ``n`` is 3.

The operation returns the following results:

.. code-block:: javascript
   :copyable: false

   [
      { _id: { gameId: 'G1' }, gamescores: [ 31, 33, 99 ] },
      { _id: { gameId: 'G2' }, gamescores: [ 10 ] }
   ]


.. _firstN-aggregation-expression:

Using ``$firstN`` as an Aggregation Expression
``````````````````````````````````````````````

You can also use ``$firstN`` as an aggregation expression.

In this example:

- :pipeline:`$documents` creates the literal document that contains
  an array of values.
- ``$project`` is used to return the output of ``$firstN``.
- ``_id`` is omited from the output with ``_id : 0``.
- ``$firstN`` uses the input array of ``[10, 20, 30, 40]``.
- The first three elements of the array are returned for the input 
  document.

.. code-block:: javascript
   :emphasize-lines: 10

   db.aggregate( [ 
      {
         $documents: [
            { array: [10, 20, 30, 40] } ] 
      },
      { $project: { 
         firstThreeElements:{
                              $firstN: 
                              { 
                                 input: "$array", 
                                 n: 3 
                              }
                           }
                  } 
      }
   ] )

The operation returns the following results:

.. code-block:: javascript
   :copyable: false

   [
      { firstThreeElements: [ 10, 20, 30 ] }
   ]

Array Operator
--------------

.. expression:: $firstN 


Syntax
~~~~~~

When used as an array operator, ``$firstN`` has the following syntax:

.. code-block:: javascript

   { $firstN: { n: <expression>, input: <expression> } }

.. list-table::
   :header-rows: 1
   :class: border-table

   * - Field
     - Description

   * - ``n``
     - An :ref:`expression <aggregation-expressions>` that resolves to a 
       positive integer. The integer specifies the number of array elements
       that :expression:`$firstN` returns.

   * - ``input``
     - An :ref:`expression <aggregation-expressions>` that resolves to the 
       array from which to return ``n`` elements.

Behavior
~~~~~~~~

- :expression:`$firstN` returns elements in the same order they appear in 
  the input array.

- :expression:`$firstN` does not filter out ``null`` values in the input 
  array.

- You cannot specify a value of ``n`` less than ``1``.

- If the specified ``n`` is greater than or equal to the number of elements 
  in the ``input`` array, :expression:`$firstN` returns the ``input`` array. 

- If ``input`` resolves to a non-array value, the aggregation operation 
  errors.

Example
~~~~~~~

The collection ``games`` has the following documents:

.. code-block:: javascript
   :copyable: true

   db.games.insertMany([
       { "playerId" : 1, "score" : [ 1, 2, 3 ] },
       { "playerId" : 2, "score" : [ 12, 90, 7, 89, 8 ] },
       { "playerId" : 3, "score" : [ null ] },
       { "playerId" : 4, "score" : [ ] },
       { "playerId" : 5, "score" : [ 1293, null, 3489, 9 ]},
       { "playerId" : 6, "score" : [ "12.1", 2, NumberLong("2090845886852"), 23 ]}
   ])

The following example uses the :expression:`$firstN` operator to retrieve the 
first three scores for each player. The scores are returned in the new field 
``firstScores`` created by :pipeline:`$addFields`. 

.. code-block:: javascript
   :copyable: true

   db.games.aggregate([
      { $addFields: { firstScores: { $firstN: { n: 3, input: "$score" } } } }
   ])

The operation returns the following results:

.. code-block:: javascript
   :copyable: true
   :emphasize-lines: 4, 9, 14, 19, 24, 29

   [{
     "playerId": 1,
     "score": [ 1, 2, 3 ],
     "firstScores": [ 1, 2, 3 ]
   },
   {
     "playerId": 2,
     "score": [ 12, 90, 7, 89, 8 ],
     "firstScores": [ 12, 90, 7 ]
   },
   {
     "playerId": 3,
     "score": [ null ],
     "firstScores": [ null ]
   },
   {
     "playerId": 4,
     "score": [ ],
     "firstScores": [ ]
   },
   { 
     "playerId": 5,
     "score": [ 1293, null, 3489, 9 ],
     "firstScores": [ 1293, null, 3489 ]
   },
   {
     "playerId": 6,
     "score": [ "12.1", 2, NumberLong("2090845886852"), 23 ],
     "firstScores": [ "12.1", 2, NumberLong("2090845886852") ]
    }]

.. seealso::

   - :expression:`$lastN`
   - :expression:`$sortArray`