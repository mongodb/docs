===============
Read Operations
===============

.. default-domain:: mongodb

Read operations determine how MongoDB returns collection data when you
issue a query. This document describes how MongoDB performs read
operations and how different factors affect the efficiency of reads.

In :doc:`crud operations </crud>`, read operations are all operations
that return data from the database without modifying the database. In
MongoDB, all read operations or *queries* return a cursor object that
iterates over the result set of matching :term:`documents` in a collection.

.. note::

   All of the examples in this document use the :program:`mongo`
   shell interface. All of these operations are available in an
   idiomatic interface for each language by way of the :doc:`MongoDB
   Driver </drivers>`. See your :api:`driver documentation <>` for
   full API documentation.

.. index:: read operations; query
.. index:: query; read operations
.. _read-operations-query-operations:

Read Operations
---------------

In the :program:`mongo` shell the :method:`find()
<db.collection.find()>` and :method:`findOne()
<db.collection.findOne()>` methods perform read operations. The
:method:`find() <db.collection.find()>` method is has the following
syntax:

.. code-block:: javascript

   db.collection.find( <query>, <projection> )

- The ``db.collection`` object, describes the database and collection
  to query. All queries in MongoDB address a *single* collection.

  You can enter ``db`` in the :program:`mongo` shell to return the
  name of the current database. Use the ``show collections`` operation
  in the :program:`mongo` shell to list the current collections in the
  database.

- Queries in MongoDB have a JSON-like syntax, and take the form of a
  :term:`document` using a collection of :doc:`/reference/operators`
  query operators to describe query parameters.

  The ``<query>`` argument of the :method:`find()
  <db.collection.find()>` method holds this query document. A query,
  without a query document will return all documents in the
  collection.

- The ``<projection>`` argument describes describes the result or
  return set in the form of a document. Projections specify or limit
  the fields to return.

  Without a projection the operation will return all
  fields of all documents, specify a projection if your documents are
  larger, or when your application only needs a subset of available
  fields.

For example, the following operation on the ``products`` collection,
selects all documents where the ``type`` field equals ``'food'`` and
the ``price`` field has a value less than ``9.95``. The projection
limits the response to the ``item`` and ``qty``, and ``_id`` field:

.. code-block:: javascript

   db.inventory.find( { type: 'food', price: { $lt: 9.95 } },
                      { item: 1, qty: 1 } )

The :method:`findOne() <db.collection.findOne()>` method is similar to
the :method:`find() <db.collection.find()>` method except the
:method:`findOne() <db.collection.findOne()>` method returns a single
document from a collection rather than a cursor. The method has the
syntax:

.. code-block:: javascript

   db.collection.findOne( <query>, <projection> )

For additional documentation and examples of the main MongoDB read
operators, refer to the :doc:`/applications/read` page of the
:doc:`/crud` section.

.. _read-operations-query-document:
.. _read-operations-query-argument:

Query Document
~~~~~~~~~~~~~~

The ``query`` argument determines the documents to return in the
query. Consider the following example query operations using the
:method:`find() <db.collection.find()>` method calls on a notional
``inventory`` collection:

- No ``query`` argument or an empty ``query`` argument (``{}``)
  returns all documents in the collection:

  .. code-block:: javascript

     db.inventory.find()
     db.inventory.find( {} )

- A ``query`` document that specifies all documents in the collection
  where the value of the ``type`` field is ``'food'`` or ``'snacks'``:

  .. code-block:: javascript

     db.inventory.find( { type: { $in: [ 'food', 'snacks' ] } } )

  .. note::

     Although you can express this query using the :operator:`$or`
     operator, choose the :operator:`$in` operator rather than the
     :operator:`$or` operator when performing equality checks on the
     same field.

- A compound ``query`` document that specifies all documents in the
  collection were the ``type`` field is ``'food'`` **and** the
  value of the ``price`` field is less than ``9.95``:

  .. code-block:: javascript

     db.inventory.find( { type: 'food', price: { $lt: 9.95 } } )

- A compound ``query`` document that specifies the all documents in the
  collection where the field ``qty`` has a value greater than ``100``
  **or** the value of the ``price`` field is less than ``9.95``:

  .. code-block:: javascript

     db.inventory.find( { $or: [ { qty: { $gt: 100 } },
                                 { price: { $lt: 9.95 } } ]
                        } )

- A compound ``query`` document that specifies the all documents in
  the collection where the value of the ``type`` field is ``'food'``
  **and** *either* the ``qty`` has a value greater than ``100`` *or*
  the value of the ``price`` field is less than ``9.95``:

  .. code-block:: javascript

     db.inventory.find( { type: 'food', $or: [ { qty: { $gt: 100 } },
                                               { price: { $lt: 9.95 } } ]
                         } )

- A ``query`` document that specifies all documents in the collection
  where the array in the ``tags`` field contains the element
  ``fruit``:

  .. code-block:: javascript

     db.inventory.find( { tags: "fruit" } )

MongoDB provides a full complement of query selection operators such
as the :operator:`$lt` operator and the :operator:`$or`
operator. Refer to the :doc:`/reference/operators` document for the
complete list of query selection operators.

.. _read-operations-projection:

Projection Argument
~~~~~~~~~~~~~~~~~~~

The :term:`projection` specification, limits the fields to return for
all matching. By narrowing the fields to return, projections can
minimize network transit costs and the costs of deserializing document
in the applications. In the ``<projection>`` argument, you can either
specify the fields to include (``field:1``) or specify the fields to
exclude (``field:0``). The ``_id`` field is implicitly included,
unless explicitly excluded.

.. note::

   You cannot combine inclusion and exclusion semantics in a single
   projection with the *exception* of the ``_id`` field.

Consider the following projection specifications, in the
:method:`find() <db.collection.find()>` operations:

- If you specify no projection, the :method:`find()
  <db.collection.find()>` method will return all fields in all the
  documents that match the query specification.

  .. code-block:: javascript

     db.inventory.find( { type: 'food' } )

- A projection that specifies the result set such that :method:`find()
  <db.collection.find()>` method will return only the ``item``,
  ``qty``, and the ``_id`` fields in the documents that match the
  query specification.

  .. code-block:: javascript

     db.inventory.find( { type: 'food' }, { item: 1, qty: 1 } )

- A projection that specifies the result set such that the :method:`find()
  <db.collection.find()>` method will return only the ``item`` and
  ``qty`` fields that match the query specification.

  .. code-block:: javascript

     db.inventory.find( { type: 'food' }, { item: 1, qty: 1, _id:0 } )

- A projection that specifies the result such that the :method:`find()
  <db.collection.find()>` method will return all fields except the
  ``type`` field in all documents that match the query specification.

  .. code-block:: javascript

     db.inventory.find( { type: 'food' }, { type:0 } )

MongoDB also provides the following projection operators, that allow
richer projection specifications for fields that hold arrays. Refer to
the operator documentation for the :projection:`$elemMatch` and
:projection:`$slice` operators.

.. _read-operations-indexing:

Indexes
-------

Indexes improve the efficiency of read operations by reducing the work
associated with fulfilling queries, by building a special structure
and maintain that structure when inserting or modifying
documents. These indexes support specific queries, sort operations,
and allow for more efficient storage utilization.

Create indexes using the :method:`db.collection.ensureIndex{)` method
in the :program:`mongo` shell, as in the following prototype
operation:

.. code-block:: javascript

   db.collection.ensureIndex( { field1: order1, field2: order2, ... } )

- The ``field`` specifies the field to index.

- The ``order`` specifies ascending ( ``1`` ) or descending ( ``-1`` ).

Measuring Index Use
~~~~~~~~~~~~~~~~~~~

Consider the performance of the following read operation that does not
use an index:

.. code-block:: javascript

   db.inventory.find( { type: 'food' } ).explain()

The results from the :method:`explain() <cursor.explain()>` method
shows that the execution of the :method:`find() <db.collection.find()>`
method would involve scanning ``4000006`` documents to return ``5``
objects:

.. code-block:: javascript

   {
     "cursor" : "BasicCursor",
     "isMultiKey" : false,
     "n" : 5,
     "nscannedObjects" : 4000006,
     "nscanned" : 4000006,
     "nscannedObjectsAllPlans" : 4000006,
     "nscannedAllPlans" : 4000006,
     "scanAndOrder" : false,
     "indexOnly" : false,
     "nYields" : 2,
     "nChunkSkips" : 0,
     "millis" : 1591,
     "indexBounds" : { },
     "server" : "mongodb0.example.net:27017"
   }

To improve the performance of the query, create an index on the
``type`` field:

.. code-block:: javascript

   db.inventory.ensureIndex( { type: 1 } )

Compare the performance of the previous read operation, but now
executed with the newly created index:

.. code-block:: javascript

   db.inventory.find( { type: 'food' } ).explain()

The results show a substantial improvement in the performance of the
operation. The execution of the :method:`find() <db.collection.find()>`
method would involve scanning ``5`` documents to return ``5`` objects:

.. code-block:: javascript

   {
     "cursor" : "BtreeCursor type_1",
     "isMultiKey" : false,
     "n" : 5,
     "nscannedObjects" : 5,
     "nscanned" : 5,
     "nscannedObjectsAllPlans" : 5,
     "nscannedAllPlans" : 5,
     "scanAndOrder" : false,
     "indexOnly" : false,
     "nYields" : 0,
     "nChunkSkips" : 0,
     "millis" : 0,
     "indexBounds" : { "type" : [
                                   [ "food",
                                     "food" ]
                                ] },
     "server" : "mongodbo0.example.net:27017" }

.. index:: query optimizer
.. _read-operations-query-optimization:

Query Optimization
~~~~~~~~~~~~~~~~~~

The MongoDB query optimizer matches a query to the index that produces
the fastest results. The optimizer then uses this query plan each time
the query runs. If a collection changes significantly, the optimizer
creates a new query plan.

MongoDB creates a query plan as follows:

1. The query optimizer runs the query against several indexes in
   parallel.

#. The optimizer records the matches in a single common buffer, as
   though the results all come from the same index.

#. If an index returns a result already returned by another index, the
   optimizer skips the duplicate match.

#. The optimizer determines a "winning" index when either of
   the following occur:

   - The optimizer exhausts an index, which means that the index has
     provided the full result set. At this point, the optimizer stops
     querying.

   - The optimizer reaches 101 results. At this point, the optimizer
     chooses the index that has provided the most results *first* and
     continues reading only from that index.

#. The "winning" index becomes the index specified in the query plan.

To evaluate the optimizer's choice of query plan, run the query with
the :method:`explain() <cursor.explain()>` method and the
:method:`hint() <cursor.hint()>` method appended, as in the following:

.. code-block:: javascript

   db.inventory.find( { type: 'food' } ).explain().hint()

This returns the statistics regarding the execution of the query. For a
detailed explanation on the output, see the :method:`explain()
<cursor.explain()>` method documentation.

.. note::

   If you run :method:`explain() <cursor.explain()>` without including
   :method:`hint() <cursor.hint()>` the query optimizer re-evaluates
   the query and runs against multiple indexes before returning the query
   statistics.

As collections change over time, the query optimizer deletes a query
plan and re-evaluates the indexes when any of the following occur:

- The number of writes to the collection reaches 1,000.

- You run the :dbcommand:`reIndex() <reIndex>` command on the index.

- You restart :program:`mongod`.

When you re-evaluate a query, the optimizer displays the same results if
no data has changed, but the the results might appear in a different
order. This is because the optimizer retrieves the results from several
indexes at once during re-evaluation, and the order in which results
appear depends on the order of the indexes in the
parallel query operation.

For more information, refer to :doc:`/applications/indexes`.

Query Operators that Cannot Use Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some query operators cannot take advantage of indexes and require a
collection scan. When using these operators, you can narrow the
documents scanned by combining the operator with another operator that
does use an index.

Operators that cannot use indexes include the following:

- :operator:`$nin`

- :operator:`$ne`

.. TODO Regular expressions queries also do not use an index except when used with anchors.
.. TODO :method:`cursor.skip()` can cause paginating large numbers of docs

.. _read-operations-aggregation:

Aggregation
~~~~~~~~~~~

With aggregation, MongoDB performs summary, grouping, or other
operations on data before returning the results.

Beginning with MongoDB version 2.1, the primary way to perform
aggregation is through the aggregation framework, which processes data
through pipelines and returns the data as a document stream specific to
the aggregation process.

The order of aggregation operators can affect the performance of the
query. For more information on the aggregation framework, including the
descriptions of the operators and the optimization of performance, see
:doc:`/applications/aggregation`.

Additionally, MongoDB supplements the aggregation framework with the
following methods and commands:

- :method:`count() <cursor.count()>`

- :dbcommand:`distinct() <distinct>`

- :method:`group()`

- :dbcommand:`mapReduce() <mapreduce>` (See also :wiki:`MapReduce`.)

.. index:: read operation; architecture
.. _read-operations-architecture:

Architecture
------------

.. index:: read operation; connection pooling
.. index:: connection pooling; read operations
.. _read-operations-connection-pooling:

Connection Pooling
~~~~~~~~~~~~~~~~~~

.. TODO

Sharded Clusters
~~~~~~~~~~~~~~~~

Sharded clusters allows for the distribution of the collection data
across multiple nodes. With a sharded cluster, you issue all read
operations to one of the :program:`mongos` instances associated with
the cluster. From the perspective of the application there is no
difference between read operations to the MongoDB sharded cluster and
read operations to standalone instances and replica sets.

For non-sharded collections, the :program:`mongos` locates the
:term:`primary shard` for the database, and directs all operations to
that :program:`mongod` instance. For sharded collections, the
:program:`mongos` uses the :term:`shard key` to determine which
:term:`shard` or shards contains the documents that could match the
query. Then, the :program:`mongos` directs the query to the relevant
shards and merges the results.

Choosing the appropriate shard key can improve the performance of the
query. If the query operation includes either the shard key, *or* a
prefix of the shard key, the :program:`mongos` may be able to target
the query to a smaller subset of the shards. Otherwise, the
:program:`mongos` performs non-targeted queries; i.e., :program:`mongos`
must query *all* shards in the cluster for the results. For clusters
with a small number of shards, the performance of non-targeted queries
may be acceptable. But, with more shards, non-targeted queries become
inefficient and impractical for routine operations.

For more information on read operations in sharded clusters, consider
the following resources:

- :ref:`An Introduction to Shard Keys <sharding-shard-key>`
- :ref:`Shard Key Internals and Operations <sharding-internals-shard-keys>`
- :ref:`Querying Sharded Clusters <sharding-internals-querying>`
- :ref:`sharding-mongos`

Replica Sets
~~~~~~~~~~~~

:term:`Replica sets <replica set>` use :term:`read preferences <read
preference>` to determine where and how to route read operations. By
default, MongoDB always reads data from a replica set's :term:`primary`.
You can modify that behavior by changing the :ref:`read preference mode
<replica-set-read-preference-modes>`.

For example, you can set the :ref:`read preference mode
<replica-set-read-preference-modes>` to allow reads from
:term:`secondaries <secondary>` when backing up data, or to block reads
entirely during a :ref:`failover <replica-set-failover>`.

If the majority of database use are read operations, then
using read preferences to distribute reads can improve read throughput.
The trade-off is that some reads might return stale data, as
secondaries always have some amount of lag.

For more information on choosing read preference modes, see
:ref:`replica-set-read-preference-modes`.
