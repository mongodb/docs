# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 19:29+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/replica-set-elections.txt:9
msgid "Replica Set Elections"
msgstr ""

#: ../source/core/replica-set-elections.txt:19
msgid ""
":term:`Replica sets <replica set>` use elections to determine which set "
"member will become :term:`primary`. Replica sets can trigger an election "
"in response to a variety of events, such as:"
msgstr ""

#: ../source/core/replica-set-elections.txt:23
msgid "Adding a new node to the replica set,"
msgstr ""

#: ../source/core/replica-set-elections.txt:24
msgid ":method:`initiating a replica set <rs.initiate()>`,"
msgstr ""

#: ../source/core/replica-set-elections.txt:25
msgid ""
"performing replica set maintenance using methods such as "
":method:`rs.stepDown()` or :method:`rs.reconfig()`, and"
msgstr ""

#: ../source/core/replica-set-elections.txt:26
msgid ""
"the :term:`secondary` members losing connectivity to the primary for more"
" than the configured :rsconf:`timeout <settings.electionTimeoutMillis>` "
"(10 seconds by default)."
msgstr ""

#: ../source/core/replica-set-elections.txt:28
msgid ""
"In the following diagram, the primary node was unavailable for longer "
"than the :rsconf:`configured timeout <settings.electionTimeoutMillis>` "
"and triggers the :ref:`automatic failover <replication-auto-failover>` "
"process. One of the remaining secondaries calls for an election to select"
" a new primary and automatically resume normal operations."
msgstr ""

#: ../source/core/replica-set-elections.txt:36
msgid ""
"The replica set cannot process write operations until the election "
"completes successfully. The replica set can continue to serve read "
"queries if such queries are configured to :ref:`run on secondaries "
"<replica-set-read-preference>`."
msgstr ""

#: ../source/includes/fact-election-latency.rst:1
msgid ""
"The median time before a cluster elects a new primary should not "
"typically exceed 12 seconds, assuming default :rsconf:`replica "
"configuration settings <settings>`. This includes time required to mark "
"the primary as :ref:`unavailable <replication-auto-failover>` and call "
"and complete an :ref:`election <replica-set-elections>`. You can tune "
"this time period by modifying the "
":rsconf:`settings.electionTimeoutMillis` replication configuration "
"option. Factors such as network latency may extend the time required for "
"replica set elections to complete, which in turn affects the amount of "
"time your cluster may operate without a primary. These factors are "
"dependent on your particular cluster architecture."
msgstr ""

#: ../source/includes/fact-retryable-writes-failover-election.rst:1
msgid ""
"Your application connection logic should include tolerance for automatic "
"failovers and the subsequent elections."
msgstr ""

#: ../source/includes/fact-retryable-writes-failover-election.rst:6
msgid ""
"MongoDB 3.6+ drivers can detect the loss of the primary and automatically"
" :ref:`retry certain write operations <retryable-writes>` a single time, "
"providing additional built-in handling of automatic failovers and "
"elections."
msgstr ""

#: ../source/core/replica-set-elections.txt:47
msgid "Factors and Conditions that Affect Elections"
msgstr ""

#: ../source/core/replica-set-elections.txt:50
msgid "Replication Election Protocol"
msgstr ""

#: ../source/includes/fact-replica-set-protocolVersion1.rst:3
msgid ""
"MongoDB introduces a version 1 of the replication protocol "
"(:rsconf:`protocolVersion: 1 <protocolVersion>`) to reduce replica set "
"failover time and accelerate the detection of multiple simultaneous "
"primaries. New replica sets, by default, use :rsconf:`protocolVersion: 1 "
"<protocolVersion>`. Previous versions of MongoDB use version 0 of the "
"protocol. See :ref:`replication election enhancements <3.2-rel-notes-rs-"
"enhancements>` for details."
msgstr ""

#: ../source/core/replica-set-elections.txt:55
msgid "Heartbeats"
msgstr ""

#: ../source/core/replica-set-elections.txt:57
msgid ""
"Replica set members send heartbeats (pings) to each other every two "
"seconds. If a heartbeat does not return within 10 seconds, the other "
"members mark the delinquent member as inaccessible."
msgstr ""

#: ../source/core/replica-set-elections.txt:62
msgid "Member Priority"
msgstr ""

#: ../source/core/replica-set-elections.txt:64
msgid ""
"After a replica set has a stable primary, the election algorithm will "
"make a \"best-effort\" attempt to have the secondary with the highest "
":rsconf:`~members[n].priority` available call an election. Member "
"priority affects both the timing and the outcome of elections; "
"secondaries with higher priority call elections relatively sooner than "
"secondaries with lower priority, and are also more likely to win. "
"However, a lower priority instance can be elected as primary for brief "
"periods, even if a higher priority secondary is available. Replica set "
"members continue to call elections until the highest priority member "
"available becomes primary."
msgstr ""

#: ../source/core/replica-set-elections.txt:76
msgid ""
"Members with a priority value of ``0`` cannot become primary and do not "
"seek election. For details, see :doc:`/core/replica-set-"
"priority-0-member`."
msgstr ""

#: ../source/core/replica-set-elections.txt:81
msgid "Loss of a Data Center"
msgstr ""

#: ../source/core/replica-set-elections.txt:83
msgid ""
"With a distributed replica set, the loss of a data center may affect the "
"ability of the remaining members in other data center or data centers to "
"elect a primary."
msgstr ""

#: ../source/core/replica-set-elections.txt:87
msgid ""
"If possible, distribute the replica set members across data centers to "
"maximize the likelihood that even with a loss of a data center, one of "
"the remaining replica set members can become the new primary."
msgstr ""

#: ../source/core/replica-set-elections.txt:91
msgid ":doc:`/core/replica-set-architecture-geographically-distributed`"
msgstr ""

#: ../source/core/replica-set-elections.txt:94
msgid "Network Partition"
msgstr ""

#: ../source/core/replica-set-elections.txt:96
msgid ""
"A :term:`network partition` may segregate a primary into a partition with"
" a minority of nodes. When the primary detects that it can only see a "
"minority of nodes in the replica set, the primary steps down as primary "
"and becomes a secondary. Independently, a member in the partition that "
"can communicate with a majority of the nodes (including itself) holds an "
"election to become the new primary."
msgstr ""

#: ../source/core/replica-set-elections.txt:108
msgid "Vetoes in Elections"
msgstr ""

#: ../source/core/replica-set-elections.txt:112
msgid ""
"The :rsconf:`protocolVersion: 1 <protocolVersion>` obviates the need for "
"vetoes. The following veto discussion applies to replica sets that use "
"the older :rsconf:`protocolVersion: 0 <protocolVersion>`."
msgstr ""

#: ../source/core/replica-set-elections.txt:116
msgid ""
"For replica sets using :rsconf:`protocolVersion: 0 <protocolVersion>`, "
"all members of a replica set can veto an election, including :ref:`non-"
"voting members <replica-set-non-voting-members>`. A member will veto an "
"election:"
msgstr ""

#: ../source/core/replica-set-elections.txt:121
msgid "If the member seeking an election is not a member of the voter's set."
msgstr ""

#: ../source/core/replica-set-elections.txt:123
msgid ""
"If the current primary has more recent operations (i.e. a higher "
":data:`optime <replSetGetStatus.members.optime>`) than the member seeking"
" election, from the perspective of another voting member."
msgstr ""

#: ../source/core/replica-set-elections.txt:128
msgid ""
"If the current primary has the same or more recent operations (i.e. a "
"higher or equal :data:`optime <replSetGetStatus.members.optime>`) than "
"the member seeking election."
msgstr ""

#: ../source/core/replica-set-elections.txt:133
msgid ""
"If a :ref:`priority 0 member <replica-set-secondary-only-members>` "
"[#imply-secondary-only]_ is the most current member at the time of the "
"election. In this case, another eligible member of the set will catch up "
"to the state of the :ref:`priority 0 member <replica-set-secondary-only-"
"members>` member and then attempt to become primary."
msgstr ""

#: ../source/core/replica-set-elections.txt:140
msgid ""
"If the member seeking an election has a lower priority than another "
"member in the set that is also eligible for election."
msgstr ""

#: ../source/core/replica-set-elections.txt:144
msgid ""
":ref:`Hidden <replica-set-hidden-members>` and :ref:`delayed<replica-set-"
"delayed-members>` imply :ref:`priority 0 <replica-set-secondary-only-"
"members>` configuration."
msgstr ""

#: ../source/core/replica-set-elections.txt:149
msgid "Voting Members"
msgstr ""

#: ../source/core/replica-set-elections.txt:151
msgid ""
"The replica set member configuration setting :rsconf:`members[n].votes` "
"and member :data:`~replSetGetStatus.members.state` determine whether a "
"member votes in an election."
msgstr ""

#: ../source/core/replica-set-elections.txt:156
msgid ""
"All replica set members that have their :rsconf:`members[n].votes` "
"setting equal to 1 vote in elections. To exclude a member from voting in "
"an :term:`election`, change the value of the member's "
":rsconf:`members[n].votes` configuration to ``0``."
msgstr ""

#: ../source/includes/fact-rs-non-voting-priority-restriction.rst:1
msgid "Non-voting members must have :rsconf:`~members[n].priority` of 0."
msgstr ""

#: ../source/includes/fact-rs-nonzero-priority-vote-restriction.rst:1
msgid ""
"Members with :rsconf:`~members[n].priority` greater than 0 cannot have 0 "
":rsconf:`~members[n].votes`."
msgstr ""

#: ../source/core/replica-set-elections.txt:167
msgid "Only voting members in the following states are eligible to vote:"
msgstr ""

#: ../source/core/replica-set-elections.txt:169
msgid ":replstate:`PRIMARY`"
msgstr ""

#: ../source/core/replica-set-elections.txt:171
msgid ":replstate:`SECONDARY`"
msgstr ""

#: ../source/core/replica-set-elections.txt:173
msgid ":replstate:`STARTUP2`"
msgstr ""

#: ../source/core/replica-set-elections.txt:175
msgid ":replstate:`RECOVERING`"
msgstr ""

#: ../source/core/replica-set-elections.txt:177
msgid ":replstate:`ARBITER`"
msgstr ""

#: ../source/core/replica-set-elections.txt:179
msgid ":replstate:`ROLLBACK`"
msgstr ""

#: ../source/core/replica-set-elections.txt:185
msgid "Non-Voting Members"
msgstr ""

#: ../source/core/replica-set-elections.txt:187
msgid ""
"Although non-voting members do not vote in elections, these members hold "
"copies of the replica set's data and can accept read operations from "
"client applications."
msgstr ""

#: ../source/core/replica-set-elections.txt:191
msgid ""
"Because a replica set can have up to :limit:`50 members <Number of "
"Members of a Replica Set>`, but only :limit:`7 voting members <Number of "
"Voting Members of a Replica Set>`, non-voting members allow a replica set"
" to have more than seven members."
msgstr ""

#: ../source/core/replica-set-elections.txt:198
msgid ""
"For instance, the following nine-member replica set has seven voting "
"members and two non-voting members."
msgstr ""

#: ../source/core/replica-set-elections.txt:203
msgid ""
"A non-voting member has both :rsconf:`~members[n].votes` and "
":rsconf:`~members[n].priority` equal to ``0``:"
msgstr ""

#: ../source/core/replica-set-elections.txt:222
msgid ""
"Do **not** alter the number of votes to control which members will become"
" primary. Instead, modify the :rsconf:`members[n].priority` option. "
"*Only* alter the number of votes in exceptional cases. For example, to "
"permit more than seven members."
msgstr ""

#: ../source/core/replica-set-elections.txt:228
msgid ""
"To configure a non-voting member, see :doc:`/tutorial/configure-a-non-"
"voting-replica-set-member`."
msgstr ""

#~ msgid ""
#~ "A replica set does *not* hold an"
#~ " election as long as the current "
#~ "primary has the highest priority value"
#~ " and is within 10 seconds of "
#~ "the latest :term:`oplog` entry in the"
#~ " set. If a higher-priority member "
#~ "catches up to within 10 seconds of"
#~ " the latest oplog entry of the "
#~ "current primary, the set holds an "
#~ "election in order to provide the "
#~ "higher-priority node a chance to "
#~ "become primary."
#~ msgstr ""

#~ msgid ""
#~ "When possible, all members should have"
#~ " only one vote. Changing the number"
#~ " of votes can cause ties, deadlocks,"
#~ " and the wrong members to become "
#~ "primary."
#~ msgstr ""

# c244a03aa48544bd86eb2a4c39ed62a9
#~ msgid ""
#~ ":term:`Replica sets <replica set>` use "
#~ "elections to determine which set member"
#~ " will become :term:`primary`. Elections "
#~ "occur after initiating a replica set,"
#~ " and also any time the primary "
#~ "becomes unavailable. The primary is the"
#~ " only member in the set that "
#~ "can accept write operations. If a "
#~ "primary becomes unavailable, elections allow"
#~ " the set to recover normal operations"
#~ " without manual intervention. Elections are"
#~ " part of the :ref:`failover process "
#~ "<replica-set-failover-administration>`."
#~ msgstr ""

# 6397931f5da84a4c9932993cfea6e9b6
#~ msgid ""
#~ "Elections are essential for independent "
#~ "operation of a replica set; however, "
#~ "elections take time to complete. While"
#~ " an election is in process, the "
#~ "replica set has no primary and "
#~ "cannot accept writes. MongoDB avoids "
#~ "elections unless necessary."
#~ msgstr ""

# 364a0410ccc545adb86b563c482e5000
#~ msgid ""
#~ "In the following three-member replica"
#~ " set, the primary is unavailable. The"
#~ " remaining secondaries hold an election "
#~ "to choose a new primary."
#~ msgstr ""

# 9d0176782a254323b2d7411440f645ab
#~ msgid "Priority Comparisons"
#~ msgstr ""

# e295eb95e25f4089b371d1d091dd5ece
#~ msgid ""
#~ "The :data:`~local.system.replset.members[n].priority` "
#~ "setting affects elections. Members will "
#~ "prefer to vote for members with "
#~ "the highest priority value."
#~ msgstr ""

# 99c3130424a74f8baaeb433dcca04a14
#~ msgid "Optime"
#~ msgstr ""

# 759cd49c8d154efe9a2e522dc53d4f8c
#~ msgid ""
#~ "The :data:`optime <replSetGetStatus.members.optime>` "
#~ "is the timestamp of the last "
#~ "operation that a member applied from "
#~ "the oplog. A replica set member "
#~ "cannot become primary unless it has "
#~ "the highest (i.e. most recent) "
#~ ":data:`~replSetGetStatus.members.optime` of any "
#~ "visible member in the set."
#~ msgstr ""

# d2ef4e790def4bd1822f42456df623b3
#~ msgid "Connections"
#~ msgstr ""

# 1ed18be64ae04c5483fe2a7db20b1934
#~ msgid ""
#~ "A replica set member cannot become "
#~ "primary unless it can connect to a"
#~ " majority of the members in the "
#~ "replica set. For the purposes of "
#~ "elections, a majority refers to the "
#~ "total number of *votes*, rather than "
#~ "the total number of members."
#~ msgstr ""

# 06e5a24c1c9c4f50bc7dc779818e389b
#~ msgid ""
#~ "If you have a three-member replica"
#~ " set, where every member has one "
#~ "vote, the set can elect a primary"
#~ " as long as two members can "
#~ "connect to each other. If two "
#~ "members are unavailable, the remaining "
#~ "member remains a :term:`secondary` because "
#~ "it cannot connect to a majority of"
#~ " the set's members. If the remaining"
#~ " member is a :term:`primary` and two"
#~ " members become unavailable, the primary"
#~ " steps down and becomes and "
#~ "secondary."
#~ msgstr ""

# a6f25d491e2d4e0090984f9d53f6e8f6
#~ msgid "Network Partitions"
#~ msgstr ""

# 8e4bebf8f715497b86711839bf192f1b
#~ msgid ""
#~ "Network partitions affect the formation "
#~ "of a majority for an election. If"
#~ " a primary steps down and neither "
#~ "portion of the replica set has a"
#~ " majority the set will **not** elect"
#~ " a new primary. The replica set "
#~ "becomes read-only."
#~ msgstr ""

# 6a3f70821c9b4c128df9490289f92885
#~ msgid ""
#~ "To avoid this situation, place a "
#~ "majority of instances in one data "
#~ "center and a minority of instances "
#~ "in any other data centers combined."
#~ msgstr ""

# cf4319876c0c4456ba73b70274825e7d
#~ msgid "Election Mechanics"
#~ msgstr ""

# a0f630a36cf24d72bd1194dc762f399e
#~ msgid "Election Triggering Events"
#~ msgstr ""

# 2e59599a10b74856a0729f5a3495c631
#~ msgid ""
#~ "Replica sets hold an election any "
#~ "time there is no primary. Specifically,"
#~ " the following:"
#~ msgstr ""

# d67f0c3728e246af954a9f4383937c92
#~ msgid "the initiation of a new replica set."
#~ msgstr ""

# 4d1863e4ee624d78a9aac29013a14828
#~ msgid ""
#~ "a secondary loses contact with a "
#~ "primary. Secondaries call for elections "
#~ "when they cannot see a primary."
#~ msgstr ""

# 09985bd0d83e4bbc80d92ad61658f777
#~ msgid "a primary steps down."
#~ msgstr ""

# 0787a46f40d54bc2a09d6566a065f65f
#~ msgid ""
#~ ":doc:`Priority 0 members </core/replica-"
#~ "set-priority-0-member>`, do not trigger "
#~ "elections, even when they cannot connect"
#~ " to the primary."
#~ msgstr ""

# a82fcfa4a0d249e09901a5c046a3a950
#~ msgid "A primary will step down:"
#~ msgstr ""

# 1d071a207622444b8911d7984ab3dcff
#~ msgid "after receiving the :dbcommand:`replSetStepDown` command."
#~ msgstr ""

# 375572d75eca4f919477d87857fc3de8
#~ msgid ""
#~ "if one of the current secondaries "
#~ "is eligible for election *and* has "
#~ "a higher priority."
#~ msgstr ""

# b8842a587bbf415db4298309de1e1741
#~ msgid "if primary cannot contact a majority of the members of the replica set."
#~ msgstr ""

# 1469d3d5573d403aae0a2543af014f9d
#~ msgid ""
#~ "In some cases, modifying a replica "
#~ "set's configuration will trigger an "
#~ "election by modifying the set so "
#~ "that the primary must step down."
#~ msgstr ""

# a7020706ec184397af132536ba95adff
#~ msgid ""
#~ "When a primary steps down, it "
#~ "closes all open client connections, so"
#~ " that clients don't attempt to write"
#~ " data to a secondary. This helps "
#~ "clients maintain an accurate view of "
#~ "the replica set and helps prevent "
#~ ":term:`rollbacks <rollback>`."
#~ msgstr ""

# 71b97f67877347fe8f84e2b6b6ea371b
#~ msgid "Participation in Elections"
#~ msgstr ""

# d76fa07e54dc450da3e90b353d81c8d7
#~ msgid ""
#~ "Every replica set member has a "
#~ "*priority* that helps determine its "
#~ "eligibility to become a :term:`primary`. "
#~ "In an election, the replica set "
#~ "elects an eligible member with the "
#~ "highest :data:`~local.system.replset.members[n].priority` "
#~ "value as primary. By default, all "
#~ "members have a priority of ``1`` "
#~ "and have an equal chance of "
#~ "becoming primary. In the default, all"
#~ " members also can trigger an "
#~ "election."
#~ msgstr ""

# 9cb0ba0ee6ff4d8797702cd36567db64
#~ msgid ""
#~ "You can set the "
#~ ":data:`~local.system.replset.members[n].priority` value to"
#~ " weight the election in favor of "
#~ "a particular member or group of "
#~ "members. For example, if you have "
#~ "a :doc:`geographically distributed replica set"
#~ " </core/replica-set-architecture-"
#~ "geographically-distributed>`, you can adjust "
#~ "priorities so that only members in "
#~ "a specific data center can become "
#~ "primary."
#~ msgstr ""

# 85aeed99e7cd4368a2ce7d8717eff4ff
#~ msgid ""
#~ "The first member to receive the "
#~ "majority of votes becomes primary. By"
#~ " default, all members have a single"
#~ " vote, unless you modify the "
#~ ":data:`~local.system.replset.members[n].votes` setting. "
#~ ":doc:`Non-voting members </tutorial/configure-a"
#~ "-non-voting-replica-set-member>` have "
#~ ":data:`~local.system.replset.members[n].votes` value of"
#~ " ``0``. All other members have ``1``"
#~ " vote."
#~ msgstr ""

# be972d2b53ff4e12833f56f4d6ee51a8
#~ msgid ""
#~ ":data:`~local.system.replset.members[n].votes` values "
#~ "greater than ``1``."
#~ msgstr ""

# 5c22db1f4567466b9decb734ef83980c
#~ msgid ""
#~ "Earlier versions of MongoDB allowed a"
#~ " member to have more than ``1`` "
#~ "vote by setting "
#~ ":data:`~local.system.replset.members[n].votes` to a "
#~ "value greater than ``1``. Setting "
#~ ":data:`~local.system.replset.members[n].votes` to value"
#~ " greater than ``1`` now produces a"
#~ " warning message."
#~ msgstr ""

# 19a8818048ca4a0d95aeedf62315923b
#~ msgid ""
#~ "The :data:`~replSetGetStatus.members.state` of a "
#~ "member also affects its eligibility to"
#~ " vote. Only members in the following"
#~ " states can vote: ``PRIMARY``, "
#~ "``SECONDARY``, ``RECOVERING``, ``ARBITER``, and "
#~ "``ROLLBACK``."
#~ msgstr ""

# 8c8b1f5a34a047c1b93abd1d3a2af55c
#~ msgid ""
#~ "Do not alter the number of votes"
#~ " in a replica set to control "
#~ "the outcome of an election. Instead, "
#~ "modify the "
#~ ":data:`~local.system.replset.members[n].priority` value."
#~ msgstr ""

# f5e5679a422f441a84fff93cdade1fd4
#~ msgid ""
#~ "All members of a replica set can"
#~ " veto an election, including :ref:`non-"
#~ "voting members <replica-set-non-"
#~ "voting-members>`. A member will veto "
#~ "an election:"
#~ msgstr ""

# 7be4fcf9360a425bbec6d4ccd71ae4ac
#~ msgid ""
#~ "If the member seeking an election "
#~ "is not up-to-date with the "
#~ "most recent operation accessible in the"
#~ " replica set."
#~ msgstr ""

# b6121a8348db49a1922b42e588556f41
#~ msgid ""
#~ "If a :ref:`priority 0 member "
#~ "<replica-set-secondary-only-members>` "
#~ "[#imply-secondary-only]_ is the most "
#~ "current member at the time of the"
#~ " election. In this case, another "
#~ "eligible member of the set will "
#~ "catch up to the state of this "
#~ "secondary member and then attempt to "
#~ "become primary."
#~ msgstr ""

# 15f7a8485e7b4427b8f3dac6f4661fdd
#~ msgid ""
#~ "If the current primary has more "
#~ "recent operations (i.e. a higher "
#~ ":data:`optime <replSetGetStatus.members.optime>`) than "
#~ "the member seeking election, from the"
#~ " perspective of the voting member."
#~ msgstr ""

# 4690285563a9467da2dd28e5796e1035
#~ msgid ""
#~ "Remember that :ref:`hidden <replica-set-"
#~ "hidden-members>` and :ref:`delayed <replica-"
#~ "set-delayed-members>` imply :ref:`priority "
#~ "0 <replica-set-secondary-only-members>`"
#~ " configuration."
#~ msgstr ""

# 24bcc23ecbf3408b83ebb6aa7755a150
#~ msgid ""
#~ "Non-voting members hold copies of "
#~ "the replica set's data and can "
#~ "accept read operations from client "
#~ "applications. Non-voting members do not"
#~ " vote in elections, but **can** "
#~ ":ref:`veto <replica-set-vetos>` an "
#~ "election and become primary."
#~ msgstr ""

# 6bd6237beadb487f9318bf9f9c19b80b
#~ msgid ""
#~ "Because a replica set can have up"
#~ " to 12 members but only up to"
#~ " seven voting members, non-voting "
#~ "members allow a replica set to "
#~ "have more than seven members."
#~ msgstr ""

# dd1fa564615d49f7b98da21d46af52c5
#~ msgid ""
#~ "A non-voting member has a "
#~ ":data:`~local.system.replset.members[n].votes` setting "
#~ "equal to ``0`` in its member "
#~ "configuration:"
#~ msgstr ""

# 1886bdbc541c4f6b805089e39a90c123
#~ msgid ""
#~ "Do **not** alter the number of "
#~ "votes to control which members will "
#~ "become primary. Instead, modify the "
#~ ":data:`~local.system.replset.members[n].priority` option. "
#~ "*Only* alter the number of votes "
#~ "in exceptional cases. For example, to"
#~ " permit more than seven members."
#~ msgstr ""

# 5254049768bc429498ffdaa3c9c022bf
# 26040319b0a242f1b97a88cc83d5517b
# 0e2ed31cd4af45f996ae5bb9f6126059
#~ msgid "replica set"
#~ msgstr ""

# 5254049768bc429498ffdaa3c9c022bf
#~ msgid "network partitions"
#~ msgstr ""

# 26040319b0a242f1b97a88cc83d5517b
#~ msgid "elections"
#~ msgstr ""

# 0e2ed31cd4af45f996ae5bb9f6126059
#~ msgid "failover"
#~ msgstr ""

# 0e2557ea78ff48708c85f592a5d208f0
#~ msgid "replica set members"
#~ msgstr ""

# 0e2557ea78ff48708c85f592a5d208f0
#~ msgid "non-voting"
#~ msgstr ""

#~ msgid ""
#~ "A replica set does *not* hold an"
#~ " election as long as the current "
#~ "primary has the highest priority value"
#~ " or no secondary with higher priority"
#~ " is within 10 seconds of the "
#~ "latest :term:`oplog` entry in the set."
#~ " If a higher-priority member catches"
#~ " up to within 10 seconds of the"
#~ " latest oplog entry of the current"
#~ " primary, the set holds an election"
#~ " in order to provide the higher-"
#~ "priority node a chance to become "
#~ "primary."
#~ msgstr ""

#~ msgid ""
#~ "When possible, all members should have"
#~ " one vote. Changing the number of "
#~ "votes can cause the wrong members "
#~ "to become primary."
#~ msgstr ""

