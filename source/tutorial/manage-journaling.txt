=================
   管理日志
=================

.. default-domain:: mongodb

MongoDB使用*预写日志*记录到磁盘. :term:`日志`用来
保证 :doc:`写操作 </core/write-operations>` 的持久性
和灾后恢复能力.在更改数据文件前 ,MongoDB将更改的操作写入到日志中. 
如果MongoDB终止或遇到错误.然后才能写入到从数据文件日志的变化, 
MongoDB可以重新申请写操作并保持一致的状态.

*无* 日志记录, 如果 :program:`mongod` 意外退出,会发生数据不一直的状态,
你必须运行:doc:`修复 </tutorial/recover-data-following-unexpected-shutdown>`
或者, 最好, 清理复制集并:doc:`重新同步 </tutorial/resync-replica-set-member>`

启用了日志记录, 如果 :program:`mongod` 意外停止,
程序可以恢复所有写入日志的数据, 和数据保持一致的状态. 
默认情况, 对最大程度上失去了写操作, 将保存最近100毫秒的数据.
请参考 :setting:`~storage.journal.commitIntervalMs` 上更多的默认信息.

开启了日志,如果想要把数据集合全部放在内存,你需要足够的内存来保存
数据集合加上"工作的数据集".这个"工作的数据集".是唯一的数据,
你想看写之间映射的视图.请参阅:ref:`journaling-storage-views`.

.. important::

   .. versionchanged:: 2.0
      64位构建的 :program:`mongod`, 日志是默认开启的.  
      其它平台, 请参阅 :setting:`storage.journal.enabled`.

程序
----------

启用日志记录
~~~~~~~~~~~~~~~~~

.. versionchanged:: 2.0
    :program:`mongod`, 默认情况下启用日志.

要启用日志记录, 启动 :program:`mongod` 命令行的时候加上参数
:option:`--journal <mongod --journal>` .

如果没有日志文件存在,当:program:`mongod` 启动,必须预分配新的日志文件.
在此操作期间,:program:`mongod`不会监听预分配的连接.
完成:对于某些系统中，这可能需要几分钟的时间.这期间你的应用程序和
:program:`mongo` 都无法使用.

禁用日志
~~~~~~~~~~~~~~~~~~

.. 警告::

   不要在生产系统上禁用日志. 如果
   不担心:program:`mongod` 意外停止, (比如：停电) 
   你可以不用开启日志, 如果发生意外.
   那么你必须从一个未受影响的副本集成员或备份中恢复.
   参考资料：:doc:`repair  </tutorial/recover-data-following-unexpected-shutdown>`.
   

要禁用日志记录, 启动 :program:`mongod` 命令行的时候加上参数
:option:`--nojournal <mongod --nojournal>`.

Get Commit Acknowledgment
~~~~~~~~~~~~~~~~~~~~~~~~~

You can get commit acknowledgment with the
:ref:`write-concern` 和 ``j`` 选项. 有关详细信息, 请参阅
:ref:`write-concern-operation`.

.. _journaling-avoid-preallocation-lag:

Avoid Preallocation Lag
~~~~~~~~~~~~~~~~~~~~~~~

To avoid :ref:`preallocation lag <journaling-journal-files>`, you can
preallocate files in the journal directory by copying them from another
instance of :program:`mongod`.

Preallocated files do not contain data. It is safe to later remove them.
But if you restart :program:`mongod` with journaling, :program:`mongod`
will create them again.

.. example:: The following sequence preallocates journal files for an
   instance of :program:`mongod` running on port ``27017`` with a database
   path of ``/data/db``.

   For demonstration purposes, the sequence starts by creating a set of
   journal files in the usual way.

   1. Create a temporary directory into which to create a set of journal
      files:

      .. code-block:: sh

         mkdir ~/tmpDbpath

   #. Create a set of journal files by staring a :program:`mongod`
      instance that uses the temporary directory:

      .. code-block:: sh

         mongod --port 10000 --dbpath ~/tmpDbpath --journal

   #. When you see the following log output, indicating
      :program:`mongod` has the files, press CONTROL+C to stop the
      :program:`mongod` instance:

      .. code-block:: sh

         [initandlisten] waiting for connections on port 10000

   #. Preallocate journal files for the new instance of
      :program:`mongod` by moving the journal files from the data directory
      of the existing instance to the data directory of the new instance:

      .. code-block:: sh

         mv ~/tmpDbpath/journal /data/db/

   #. Start the new :program:`mongod` instance:

      .. code-block:: sh

         mongod --port 27017 --dbpath /data/db --journal

Monitor Journal Status
~~~~~~~~~~~~~~~~~~~~~~

Use the following commands and methods to monitor journal status:

- :dbcommand:`serverStatus`

  The :dbcommand:`serverStatus` command returns database status
  information that is useful for assessing performance.

- :dbcommand:`journalLatencyTest`

  Use :dbcommand:`journalLatencyTest` to measure how long it takes on
  your volume to write to the disk in an append-only fashion. You can
  run this command on an idle system to get a baseline sync time for
  journaling. You can also run this command on a busy system to see the
  sync time on a busy system, which may be higher if the journal
  directory is on the same volume as the data files.

  The :dbcommand:`journalLatencyTest` command also provides a way to
  check if your disk drive is buffering writes in its local cache. If
  the number is very low (i.e., less than 2 milliseconds) and the drive
  is non-SSD, the drive is probably buffering writes. In that case,
  enable cache write-through for the device in your operating system,
  unless you have a disk controller card with battery backed RAM.

.. _journaling-journal-commit-interval:

Change the Group Commit Interval
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionchanged:: 2.0

You can set the group commit interval using the
:option:`--journalCommitInterval <mongod --journalCommitInterval>`
command line option. The allowed range is ``2`` to ``300`` milliseconds.

Lower values increase the durability of the journal at the expense of
disk performance.

Recover Data After Unexpected Shutdown
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

On a restart after a crash, MongoDB replays all journal files in the
journal directory before the server becomes available. If MongoDB must
replay journal files, :program:`mongod` notes these events in the log
output.

There is no reason to run :dbcommand:`repairDatabase` in these
situations.
