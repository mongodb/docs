======
create
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: create

   .. versionchanged:: 3.4

      Added support for the creation of views and the specification of
      :ref:`collation`.

   Explicitly creates a collection or view. :dbcommand:`create` has
   the following form:

   .. code-block:: javascript

      {
        create: <collection or view name>,
        capped: <true|false>,
        autoIndexId: <true|false>,
        size: <max_size>,
        max: <max_documents>,
        flags: <0|1|2|3>,
        storageEngine: <document>,
        validator: <document>,
        validationLevel: <string>,
        validationAction: <string>,
        indexOptionDefaults: <document>,
        viewOn: <source>, 
        pipeline: <pipeline>,
        collation: <document>,
        writeConcern: <document>
      }

   :dbcommand:`create` has the following fields:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``create``
   
        - string
   

        - The name of the new collection or view. See
          :ref:`restrictions-on-db-names`.

   
      * - ``capped``
   
        - boolean
   
        - Optional. To create a :term:`capped collection`,
          specify ``true``. If you specify ``true``, you must also set a maximum
          size in the ``size`` field.
          
          
   
      * - ``autoIndexId``
   
        - boolean
   
        - Optional. Specify ``false`` to disable the automatic creation of an index on the
          ``_id`` field.
          
          .. important::
          
             For replica sets, do not set ``autoIndexId`` to ``false``.
          
          .. deprecated:: 3.2
          
          
   
      * - ``size``
   
        - integer
   
        - Optional. Specify a maximum size in bytes for a capped collection. Once a
          capped collection reaches its maximum size, MongoDB removes the older
          documents to make space for the new documents. The ``size`` field is
          required for capped collections and ignored for other collections.
          
          
   
      * - ``max``
   
        - integer
   
        - Optional. The maximum number of documents allowed in the capped collection. The
          ``size`` limit takes precedence over this limit. If a capped
          collection reaches the ``size`` limit before it reaches the maximum
          number of documents, MongoDB removes old documents. If you prefer to
          use the ``max`` limit, ensure that the ``size`` limit, which is
          required for a capped collection, is sufficient to contain the
          maximum number of documents.
          
          
   
      * - ``flags``
   
        - integer
   
        - Optional. Available for the MMAPv1 storage engine only to set the
          :collflag:`usePowerOf2Sizes` and the :collflag:`noPadding` flags. To
          set, specify one of the following values:
          
          .. include:: /includes/list-collection-user-flags.rst
          
          Defaults to ``1``.
          
          .. versionadded:: 2.6
          
          .. versionchanged:: 3.0.0
             Add support for setting the new :collflag:`noPadding` flag.
          
          .. warning::
             Do not set ``noPadding`` if the workload includes removes or any
             updates that may cause documents to grow. For more information,
             see :ref:`exact-fit-allocation`.
          
          
   
      * - ``storageEngine``
   
        - document
   
        - Optional. Available for the WiredTiger storage engine only.
          
          .. versionadded:: 3.0
          
          Allows users to specify configuration to the storage engine on a
          per-collection basis when creating a collection. The value of the
          ``storageEngine`` option should take the following form:
          
          .. code-block:: javascript
          
             { <storage-engine-name>: <options> }
          
          Storage engine configuration specified when creating collections are
          validated and logged to the :term:`oplog` during replication to
          support replica sets with members that use different storage
          engines.
          
          
   
      * - ``validator``
   
        - document
   
        - Optional. Allows users to specify :doc:`validation rules or expressions
          </core/schema-validation>` for the collection. For more information,
          see :doc:`/core/schema-validation`.
          
          .. versionadded:: 3.2
          
          The ``validator`` option takes a document that specifies the
          validation rules or expressions. You can specify the expressions using
          the same operators as the :ref:`query operators <query-selectors>`
          with the exception of :query:`$geoNear`, :query:`$near`,
          :query:`$nearSphere`, :query:`$text`, and :query:`$where`.
          
          .. note::
          
             - Validation occurs during updates and inserts. Existing
               documents do not undergo validation checks until modification.
          
             - You cannot specify a validator for collections in the ``admin``,
               ``local``, and ``config`` databases.
          
             - You cannot specify a validator for ``system.*`` collections.
          
          
   
      * - ``validationLevel``
   
        - string
   
        - Optional. Determines how strictly MongoDB applies the
          validation rules to existing documents during an update.
          
          .. versionadded:: 3.2
          
          .. include:: /includes/extracts/table-validationLevel-values.rst
          
          
   
      * - ``validationAction``
   
        - string
   
        - Optional. Determines whether to ``error`` on invalid documents or just ``warn``
          about the violations but allow invalid documents to be inserted.
          
          .. versionadded:: 3.2
          
          .. important::
          
             Validation of documents only applies to those documents as
             determined by the ``validationLevel``.
          
          .. include:: /includes/extracts/table-validationAction-values.rst
          
          
   
      * - ``indexOptionDefaults``
   
        - document
   
        - Optional. Allows users to specify a default configuration for indexes when
          creating a collection.
          
          The ``indexOptionDefaults`` option accepts a ``storageEngine``
          document, which should take the following form:
          
          .. code-block:: javascript
          
             { <storage-engine-name>: <options> }
          
          Storage engine configuration specified when creating indexes are
          validated and logged to the :term:`oplog` during replication to
          support replica sets with members that use different storage
          engines.
          
          .. versionadded:: 3.2
          
          
   
      * - ``viewOn``
   
        - string
   
        - The name of the source collection or view from which to create the
          view. The name is not the full namespace of the collection or
          view; i.e. does not include the database name and implies the same
          database as the view to create. You must create views in the same
          database as the source collection.
          
          
          See also :method:`db.createView()`.
          
          .. versionadded:: 3.4
          
          
          
   
      * - ``pipeline``
   
        - array
   
        - An array that consists of the :ref:`aggregation pipeline stage
          <aggregation-pipeline>`.  :dbcommand:`create` creates the view by
          applying the specified ``pipeline`` to the ``viewOn`` collection or view.
          
          .. include:: /includes/extracts/views-public-definition.rst
          
          
          See also :method:`db.createView()`.
          
          .. versionadded:: 3.4
          
          
          
   
      * - ``collation``
   
        - 
   
        - Specifies the default :ref:`collation <collation>` for the
          collection or the view.
          
          .. include:: /includes/extracts/collation-description.rst
          
          .. include:: /includes/extracts/collation-option-specification.rst
          
          .. include:: /includes/extracts/collation-collection-level.rst
          
          .. include:: /includes/extracts/collation-unspecified.rst
          
          For a view, if no collation is specified, the view's default
          collation is the "simple" binary comparison collator. For a view on
          a collection, the view does not inherit the collection's collation
          settings. For a view on another view, the to be created view must
          specify the same collation settings.
          
          After you create the collection or the view, you cannot update its
          default collation.
          
          For an example that specifies the default collation during the
          creation of a collection, see :ref:`create-collation-example`.
          
          .. versionadded:: 3.4
          
          
   
      * - ``writeConcern``
   
        - document
   
        - Optional. A document that expresses the :doc:`write concern </reference/write-concern>`
          for the operation. Omit to use the default write
          concern.
          
          
   


   The :method:`db.createCollection()` method and the
   :method:`db.createView()` method wrap the :dbcommand:`create`
   command.

Considerations
--------------

The :dbcommand:`create` command obtains a write lock on the
affected database and will block other operations until it has
completed. The write lock for this operation is typically short
lived. However, allocations for large capped collections may take
longer.

Access Control
--------------

.. include:: /includes/extracts/access-control-create-cmd.rst

Examples
--------

Create a Capped Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~

To create a :term:`capped collection` limited to 64 kilobytes, issue
the command in the following form:

.. code-block:: javascript

   db.runCommand( { create: "collection", capped: true, size: 64 * 1024 } )

Create a View
~~~~~~~~~~~~~

.. versionadded:: 3.4

To create a :doc:`view </core/views>` using the :dbcommand:`create`
command, use the following syntax:

.. code-block:: javascript

   db.runCommand( { create: <view>, viewOn: <source>, pipeline: <pipeline> } )
   
or if specifying a collation:

.. code-block:: javascript

   db.runCommand( { create: <view>, viewOn: <source>, pipeline: <pipeline>, collation: <collation> } )

For example, given a collection ``survey`` with the following documents:

.. code-block:: javascript

   { _id: 1, empNumber: "abc123", feedback: { management: 3, environment: 3 }, department: "A" }
   { _id: 2, empNumber: "xyz987", feedback: { management: 2, environment: 3 }, department: "B" }
   { _id: 3, empNumber: "ijk555", feedback: { management: 3, environment: 4 }, department: "A" }

The following operation creates a ``managementRatings`` view with the
``_id``, ``feedback.management``, and ``department`` fields:

.. code-block:: javascript

   db.runCommand ( {
      create: "managementFeedback",
      viewOn: "survey",
      pipeline: [ { $project: { "management": "$feedback.management", department: 1 } } ]
   } )

.. important::

   .. include:: /includes/extracts/views-public-definition.rst

.. seealso:: :method:`db.createView()`

.. _create-collation-example:

Specify Collation
~~~~~~~~~~~~~~~~~

You can specify :ref:`collation <collation>` at the collection or
:ref:`view <3.4-reference-views>` level. For example, the following
operation creates a collection, specifying a collation for the
collection (See :ref:`collation-document-fields` for descriptions of
the collation fields):

.. code-block:: javascript

   db.runCommand ( {
      create: "myColl",
      collation: { locale: "fr" }
   });

This collation will be used by indexes and operations that support
collation unless they explicitly specify a different collation. For
example, insert the following documents into ``myColl``:

.. code-block:: javascript

   { _id: 1, category: "café" }
   { _id: 2, category: "cafe" }
   { _id: 3, category: "cafE" }

The following operation uses the collection's collation:

.. code-block:: javascript

   db.myColl.find().sort( { category: 1 } )

The operation returns documents in the following order:

.. code-block:: javascript

   { "_id" : 2, "category" : "cafe" }
   { "_id" : 3, "category" : "cafE" }
   { "_id" : 1, "category" : "café" }

The same operation on a collection that uses simple binary collation
(i.e. no specific collation set) returns documents in the following order:

.. code-block:: javascript

   { "_id" : 3, "category" : "cafE" }
   { "_id" : 2, "category" : "cafe" }
   { "_id" : 1, "category" : "café" }

.. seealso:: :ref:`create-view-w-collation`, :ref:`ref-collation-and-views`

Specify Storage Engine Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.0

You can specify collection-specific storage engine configuration
options when you create a collection with
:method:`db.createCollection()`. Consider the following operation:

.. code-block:: javascript

   db.runCommand( {
       create: "users",
       storageEngine: { wiredTiger: { configString: "<option>=<setting>" } }
   } )

This operation creates a new collection named ``users`` with a
specific configuration string that MongoDB will pass to the
``wiredTiger`` storage engine. See the :wtdocs:`WiredTiger documentation of
collection level options </struct_w_t___s_e_s_s_i_o_n.html>`
for specific ``wiredTiger`` options.
