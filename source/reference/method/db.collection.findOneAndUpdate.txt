=================================
db.collection.findOneAndUpdate()
=================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.collection.findOneAndUpdate( filter, update, options )

   .. versionadded:: 3.2

   Updates a single document based on the ``filter`` and
   ``sort`` criteria.

   The :method:`~db.collection.findOneAndUpdate()` method has the following
   form:

   .. versionchanged:: 3.6


   .. code-block:: javascript

      db.collection.findOneAndUpdate(
         <filter>,
         <update>,
         {
           projection: <document>,
           sort: <document>,
           maxTimeMS: <number>,
           upsert: <boolean>,
           returnNewDocument: <boolean>,
           collation: <document>,
           arrayFilters: [ <filterdocument1>, ... ]
         }
      )

   The :method:`~db.collection.findOneAndUpdate()` method takes the following
   parameters:

   .. include:: /includes/apiargs/method-db.collection.findOneAndUpdate-param.rst

   :returns:

      Returns either the original document or, if ``returnNewDocument: true``,
      the updated document.

Behavior
--------

Document Match
~~~~~~~~~~~~~~

:method:`db.collection.findOneAndUpdate()` updates the first matching
document in the collection that matches the ``filter``.
The ``sort`` parameter can be used to influence which document is updated.

Projection
~~~~~~~~~~

The ``projection`` parameter takes a document in the following form:

.. code-block:: javascript

   { field1 : < boolean >, field2 : < boolean> ... }

The ``<boolean>`` value can be any of the following:

- ``1`` or ``true`` to include the field. The method returns the
  ``_id`` field even if it is not explicitly stated in the projection
  parameter.

- ``0`` or ``false`` to exclude the field. This can be used on any
  field, including ``_id``.

Transactions
~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-supported-operation.rst

If the operation results in an upsert, the collection must already exist.

.. include:: /includes/extracts/transactions-operations-write-concern.rst

.. |operation| replace:: :method:`db.collection.findOneAndUpdate()`

.. _findOneAndUpdate-examples:

Examples
----------

.. _findOneAndUpdate-example-replace-document:

Update A Document
~~~~~~~~~~~~~~~~~~

The ``grades`` collection contains documents similar to the following:

.. code-block:: javascript

   { _id: 6305, name : "A. MacDyver", "assignment" : 5, "points" : 24 },
   { _id: 6308, name : "B. Batlock", "assignment" : 3, "points" : 22 },
   { _id: 6312, name : "M. Tagnum", "assignment" : 5, "points" : 30 },
   { _id: 6319, name : "R. Stiles", "assignment" : 2, "points" : 12 },
   { _id: 6322, name : "A. MacDyver", "assignment" : 2, "points" : 14 },
   { _id: 6234, name : "R. Stiles", "assignment" : 1, "points" : 10 }

The following operation finds the first document where ``name : R. Stiles``
and increments the score by ``5``:

.. code-block:: javascript

   db.scores.findOneAndUpdate(
      { "name" : "R. Stiles" },
      { $inc: { "points" : 5 } }
   )

The operation returns the *original* document before the update:

.. code-block:: javascript

   { _id: 6319, name: "R. Stiles", "assignment" : 2, "points" : 12 }

If ``returnNewDocument`` was true, the operation would return the
updated document instead.

.. _findOneAndUpdate-example-sort-and-replace-document:

Sort And Update A Document
~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``grades`` collection contains documents similar to the following:

.. code-block:: javascript

   { _id: 6305, name : "A. MacDyver", "assignment" : 5, "points" : 24 },
   { _id: 6308, name : "B. Batlock", "assignment" : 3, "points" : 22 },
   { _id: 6312, name : "M. Tagnum", "assignment" : 5, "points" : 30 },
   { _id: 6319, name : "R. Stiles", "assignment" : 2, "points" : 12 },
   { _id: 6322, name : "A. MacDyver", "assignment" : 2, "points" : 14 },
   { _id: 6234, name : "R. Stiles", "assignment" : 1, "points" : 10 }

The following operation updates a document where ``name : "A. MacGyver"``.  The
operation sorts the matching documents by ``points`` ascending to update the
matching document with the least points.

.. code-block:: javascript

   db.scores.findOneAndUpdate(
      { "name" : "A. MacDyver" },
      { $inc : { "points" : 5 } },
      { sort : { "points" : 1 } }
   )

The operation returns the *original* document before the update:

.. code-block:: javascript

   { _id: 6322, name: "A. MacDyver", "assignment" : 2, "points" : 14 }

.. _findOneAndUpdate-example-project-returned-document:

Project the Returned Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation uses projection to only display the ``_id``,
``points``, and ``assignment`` fields in the returned document:

.. code-block:: javascript

   db.scores.findOneAndUpdate(
      { "name" : "A. MacDyver" },
      { $inc : { "points" : 5 } },
      { sort : { "points" : 1 }, projection: { "assignment" : 1, "points" : 1 } }
   )

The operation returns the *original* document with only the
fields specified in the ``projection`` document and the ``_id`` field as it was not
explicitly suppressed (``_id: 0``) in the :ref:`projection document <projections>`.

.. code-block:: javascript

   { "_id" : 6322, "assignment" : 2, "points" : 14 }

.. _findOneAndUpdate-example-replace-with-time-limit:

Update Document with Time Limit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation sets a 5ms time limit to complete the update:

.. code-block:: javascript

   try {
      db.scores.findOneAndUpdate(
         { "name" : "A. MacDyver" },
         { $inc : { "points" : 5 } },
         { sort: { "points" : 1 }, maxTimeMS : 5 };
      );
   }
   catch(e){
      print(e);
   }

If the operation exceeds the time limit, it returns:

.. code-block:: javascript

   Error: findAndModifyFailed failed: { "ok" : 0, "errmsg" : "operation exceeded time limit", "code" : 50 }


.. _findOneAndUpdate-example-replace-with-upsert:

Update Document with Upsert
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation uses the ``upsert`` field to insert the update
document if nothing matches the ``filter``:

.. code-block:: javascript

   try {
   db.scores.findOneAndUpdate(
      { "name" : "A.B. Abracus" },
      { $set: { "name" : "A.B. Abracus", "assignment" : 5}, $inc : { "points" : 5 } },
      { sort: { "points" : 1 }, upsert:true, returnNewDocument : true }
   );
   }
   catch (e){
      print(e);
   }

The operation returns the following:

.. code-block:: javascript

   {
      "_id" : ObjectId("5789249f1c49e39a8adc479a"),
      "name" : "A.B. Abracus",
      "assignment" : 5,
      "points" : 5
   }

If ``returnNewDocument`` was false, the operation would return ``null`` as
there is no original document to return.

Specify Collation
~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/collation-versionadded.rst

A collection ``myColl`` has the following documents:

.. code-block:: javascript

   { _id: 1, category: "café", status: "A" }
   { _id: 2, category: "cafe", status: "a" }
   { _id: 3, category: "cafE", status: "a" }

The following operation includes the :ref:`collation <collation>`
option:

.. code-block:: javascript

   db.myColl.findOneAndUpdate(
      { category: "cafe" },
      { $set: { status: "Updated" } },
      { collation: { locale: "fr", strength: 1 } }
   );

The operation returns the following document:

.. code-block:: javascript

   { "_id" : 1, "category" : "café", "status" : "A" }

.. _findOneAndUpdate-arrayFilters:

Specify ``arrayFilters`` for an Array Update Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/arrayFilters-blurb.rst

Update Elements Match ``arrayFilters`` Criteria
```````````````````````````````````````````````

Create a collection ``students`` with the following documents:

.. cssclass:: copyable-code

.. code-block:: javascript

   db.students.insert([
      { "_id" : 1, "grades" : [ 95, 92, 90 ] },
      { "_id" : 2, "grades" : [ 98, 100, 102 ] },
      { "_id" : 3, "grades" : [ 95, 110, 100 ] }
   ])

To modify all elements that are greater than or equal to ``100`` in the
``grades`` array, use the filtered positional operator
:update:`$[\<identifier\>]` with the ``arrayFilters`` option in the
:method:`db.collection.findOneAndUpdate` method:

.. cssclass:: copyable-code

.. code-block:: javascript

   db.students.findOneAndUpdate(
      { grades: { $gte: 100 } },
      { $set: { "grades.$[element]" : 100 } },
      { arrayFilters: [ { "element": { $gte: 100 } } ] }
   )

The operation updates the ``grades`` field for a single document, and
after the operation, the collection has the following documents:

.. code-block:: javascript
   :emphasize-lines: 2

   { "_id" : 1, "grades" : [ 95, 92, 90 ] }
   { "_id" : 2, "grades" : [ 98, 100, 100 ] }
   { "_id" : 3, "grades" : [ 95, 110, 100 ] }

Update Specific Elements of an Array of Documents
`````````````````````````````````````````````````

Create a collection ``students2`` with the following documents:

.. code-block:: javascript

.. code-block:: javascript

   db.students2.insert([
      {
         "_id" : 1,
         "grades" : [
            { "grade" : 80, "mean" : 75, "std" : 6 },
            { "grade" : 85, "mean" : 90, "std" : 4 },
            { "grade" : 85, "mean" : 85, "std" : 6 }
         ]
      },
      {
         "_id" : 2,
         "grades" : [
            { "grade" : 90, "mean" : 75, "std" : 6 },
            { "grade" : 87, "mean" : 90, "std" : 3 },
            { "grade" : 85, "mean" : 85, "std" : 4 }
         ]
      }
   ])

To modify the value of the ``mean`` field for all elements in the
``grades`` array where the grade is greater than or equal to ``85``,
use the filtered positional operator :update:`$[\<identifier\>]` with
the ``arrayFilters`` in the :method:`db.collection.findOneAndUpdate`
method::

.. cssclass:: copyable-code

.. code-block:: javascript

   db.students2.findOneAndUpdate(
      { },
      { $set: { "grades.$[elem].mean" : 100 } },
      { arrayFilters: [ { "elem.grade": { $gte: 85 } } ] }
   )

The operation updates the ``grades`` field for a single document, and after the
operation, the collection has the following documents:

.. code-block:: javascript
   :emphasize-lines: 5-6

   {
      "_id" : 1,
      "grades" : [
         { "grade" : 80, "mean" : 75, "std" : 6 },
         { "grade" : 85, "mean" : 100, "std" : 4 },
         { "grade" : 85, "mean" : 100, "std" : 6 }
       ]
   }
   {
      "_id" : 2,
      "grades" : [
         { "grade" : 90, "mean" : 75, "std" : 6 },
         { "grade" : 87, "mean" : 90, "std" : 3 },
         { "grade" : 85, "mean" : 85, "std" : 4 }
      ]
   }

