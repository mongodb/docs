# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/write-concern.txt:7
# c5220ee4b75e4652bc7ba8c675c8335b
msgid "Write Concern"
msgstr ""

#: ../source/includes/introduction-write-concern.rst:1
# 206e09d3a9a74e4b8dfa0e4a03fe93bc
msgid ":term:`Write concern` describes the guarantee that MongoDB provides when reporting on the success of a write operation. The strength of the write concerns determine the level of guarantee. When inserts, updates and deletes have a *weak* write concern, write operations return quickly. In some failure cases, write operations issued with weak write concerns may not persist. With *stronger* write concerns, clients wait after sending a write operation for MongoDB to confirm the write operations."
msgstr ""

#: ../source/includes/introduction-write-concern.rst:10
# 02ea48ef91a74131b2d815c40b8569b8
msgid "MongoDB provides different levels of write concern to better address the specific needs of applications. Clients may adjust write concern to ensure that the most important operations persist successfully to an entire MongoDB deployment. For other less critical operations, clients can adjust the write concern to ensure faster performance rather than ensure persistence to the entire deployment."
msgstr ""

#: ../source/core/write-concern.txt:13
# 85b9ef2acdbc4506b79469d7ea68148b
msgid "A new protocol for :ref:`write operations <rel-notes-write-operations>` integrates write concern with the write operations."
msgstr ""

#: ../source/core/write-concern.txt:18
# 868aacc55b8b4ec6943729961d975e09
msgid "For details on write concern configurations, see :doc:`/reference/write-concern`."
msgstr ""

#: ../source/core/write-concern.txt:22
# 0bc06c24e1d84343ae9ec51abc37e6d1
msgid "Considerations"
msgstr ""

#: ../source/core/write-concern.txt:25
# 8b2ef88426a74ed7b12fb216875d4651
msgid "Default Write Concern"
msgstr ""

#: ../source/core/write-concern.txt:27
# b1f3efa3495245cc9488e976364c022f
msgid "The :program:`mongo` shell and the MongoDB drivers use :ref:`write-concern-acknowledged` as the default write concern."
msgstr ""

#: ../source/core/write-concern.txt:30
# 6496992a6a224a159941f7639c82e61b
msgid "See :ref:`write-concern-acknowledged` for more information, including when this write concern became the default."
msgstr ""

#: ../source/core/write-concern.txt:34
# 6f63785d4b6340c1836837c17ee3feeb
msgid "Read Isolation"
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:1
# 138c6dec5088484383a160f978903413
msgid "MongoDB allows clients to read documents inserted or modified before it commits these modifications to disk, regardless of write concern level or journaling configuration. As a result, applications may observe two classes of behaviors:"
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:6
# e489ae1e36fa41b5bc33deb0efffad09
msgid "For systems with multiple concurrent readers and writers, MongoDB will allow clients to read the results of a write operation before the write operation returns."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:10
# c0a05355d820491b97751bd19ec5f4fe
msgid "If the :program:`mongod` terminates before the journal commits, even if a write returns successfully, queries may have read data that will not exist after the :program:`mongod` restarts."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:14
# 577f0866a3ec4a7f9a00de77053aed36
msgid "Other database systems refer to these isolation semantics as *read uncommitted*. For all inserts and updates, MongoDB modifies each document in isolation: clients never see documents in intermediate states. For multi-document operations, MongoDB does not provide any multi-document transactions or isolation."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:20
# 66df6f4865f94e529feac3fe191fceee
msgid "When a standalone :program:`mongod` returns a successful *journaled write concern*, the data is fully committed to disk and will be available after :program:`mongod` restarts."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:24
# 2491202260634be49a3893807dbb594e
msgid "For replica sets, write operations are durable only after a write replicates and commits to the journal on a majority of the voting members of the set. MongoDB regularly commits data to the journal regardless of journaled write concern: use the :setting:`~storage.journal.commitIntervalMs` to control how often a :program:`mongod` commits the journal."
msgstr ""

#: ../source/core/write-concern.txt:39
# 02c32b64b60e480ca08f70fa9068e545
msgid "Timeouts"
msgstr ""

#: ../source/core/write-concern.txt:41
# 029975e65c6443f999e3851f1e846831
msgid "Clients can set a :ref:`wtimeout <wc-wtimeout>` value as part of a :ref:`replica acknowledged <replica-set-write-concern>` write concern. If the write concern is not satisfied in the specified interval, the operation returns an error, even if the write concern will eventually succeed."
msgstr ""

#: ../source/core/write-concern.txt:47
# bea923a0daec484a8d72ff968119d789
msgid "MongoDB does not \"rollback\" or undo modifications made before the ``wtimeout`` interval expired."
msgstr ""

#: ../source/core/write-concern.txt:51
# 49dd60c53ce943b5a25a7f41056eb63b
msgid "Write Concern Levels"
msgstr ""

#: ../source/core/write-concern.txt:53
# bc19ec97945345b685e6df88da4294e3
msgid "MongoDB has the following levels of conceptual write concern, listed from weakest to strongest:"
msgstr ""

#: ../source/core/write-concern.txt:59
# 5da92e5f5a5548b6950d24a9ac059f0f
msgid "Unacknowledged"
msgstr ""

#: ../source/core/write-concern.txt:61
# 4e8273bc694340098fa458630a5c4e94
msgid "With an *unacknowledged* write concern, MongoDB does not acknowledge the receipt of write operations. *Unacknowledged* is similar to *errors ignored*; however, drivers will attempt to receive and handle network errors when possible. The driver's ability to detect network errors depends on the system's networking configuration."
msgstr ""

#: ../source/core/write-concern.txt:67
# a704486a95ab489995861d8d8c90f2e5
msgid "Before the releases outlined in :ref:`driver-write-concern-change`, this was the default write concern."
msgstr ""

#: ../source/core/write-concern.txt:75
# 1a3ba71b76d8478997509841ca52c9bb
msgid "Acknowledged"
msgstr ""

#: ../source/core/write-concern.txt:77
# 8014e839659b40e5b033a87afb7cef09
msgid "With a receipt *acknowledged* write concern, the :program:`mongod` confirms that it received the write operation and applied the change to the in-memory view of data. *Acknowledged* write concern allows clients to catch network, duplicate key, and other errors."
msgstr ""

#: ../source/core/write-concern.txt:82
# 5029305eadd6497886c7712497fffeea
msgid "MongoDB uses the *acknowledged* write concern by default starting in the driver releases outlined in :ref:`write-concern-change-releases`."
msgstr ""

#: ../source/core/write-concern.txt:85
# fc4fa5c997ca4a33aafa181a545edb2c
msgid "The :program:`mongo` shell write methods now incorporates the :doc:`write concern </core/write-concern>` in the write methods and provide the default write concern whether run interactively or in a script. See :ref:`write-methods-incompatibility` for details."
msgstr ""

#: ../source/core/write-concern.txt:93
# f68cb1b4856442059e67dccbf52769a7
msgid "*Acknowledged* write concern does *not* confirm that the write operation has persisted to the disk system."
msgstr ""

#: ../source/core/write-concern.txt:99
# 67d368db91ac4418a8c17e51e1d67982
msgid "Journaled"
msgstr ""

#: ../source/core/write-concern.txt:101
# 34991296f3694330a80eaa47ed57500b
msgid "With a *journaled* write concern, the MongoDB acknowledges the write operation only after committing the data to the :term:`journal`. This write concern ensures that MongoDB can recover the data following a shutdown or power interruption."
msgstr ""

#: ../source/core/write-concern.txt:106
# 47e5058150db42eb8622d476fb57105c
msgid "You must have journaling enabled to use this write concern."
msgstr ""

#: ../source/core/write-concern.txt:108
# b7d2e215343c4a48aec29e436ecdf0c5
msgid "With a *journaled* write concern, write operations must wait for the next journal commit. To reduce latency for these operations, MongoDB also increases the frequency that it commits operations to the journal. See :setting:`~storage.journal.commitIntervalMs` for more information."
msgstr ""

#: ../source/includes/note-write-concern-journaled-replication.rst:1
#: ../source/includes/note-write-concern-journaled-replication.rst:1
# 799c8f1ebe5048a98de0761b078f4d08
# 0e92e460baa44663b6d5603056651acb
msgid "Requiring *journaled* write concern in a replica set only requires a journal commit of the write operation to the :term:`primary` of the set regardless of the level of *replica acknowledged* write concern."
msgstr ""

#: ../source/core/write-concern.txt:121
# a875277ee7c14e9c9dad6e0b9b1e1a3c
msgid "Replica Acknowledged"
msgstr ""

#: ../source/core/write-concern.txt:123
# eab8c87e17e84e61a49569d571b2802f
msgid ":term:`Replica sets <replica set>` present additional considerations with regards to write concern. The default write concern only requires acknowledgement from the primary."
msgstr ""

#: ../source/core/write-concern.txt:127
# 6471da6efdce4da9be757eeae0920c1a
msgid "With *replica acknowledged* write concern, you can guarantee that the write operation propagates to additional members of the replica set. See :doc:`Write Concern for Replica Sets <replica-set-write-concern>` for more information."
msgstr ""

#: ../source/core/write-concern.txt:136
# 3d343357a60348a7be5b9ea518d8dae3
msgid ":doc:`/reference/write-concern`"
msgstr ""

#: ../source/core/write-concern.txt:1
# 6c2ddd64b96543838f9b027cdf5d8b72
msgid "write concern"
msgstr ""

