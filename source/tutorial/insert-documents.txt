.. include:: /includes/java-sync-links.rst
.. include:: /includes/java-async-links.rst

.. _write-op-insert:

================
Insert Documents
================

.. default-domain:: mongodb

.. meta::
   :description: Insert documents using MongoDB. Creates collection upon first insert.
   :keywords: insert documents, create documents, insert into collection, create collection

This page provides examples in:

.. tabs-pillstrip:: languages

This page provides examples of insert operations in MongoDB.

.. note:: Creating a Collection


   If the collection does not currently exist, insert operations will
   create the collection.

.. _write-op-insertOne:

Insert a Single Document
------------------------

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         :method:`db.collection.insertOne()` inserts a *single*
         :ref:`document<bson-document-format>` into a collection.

         The following example inserts a new document into the
         ``inventory`` collection. If the document does not specify
         an ``_id`` field, MongoDB adds the ``_id`` field with an
         ObjectId value to the new document. See
         :ref:`write-op-insert-behavior`.

     - id: compass
       content: |
         To insert a single document using :ref:`MongoDB Compass <compass-index>`:

         1. Navigate to the collection you wish to insert the document
            into:

            a. In the left-hand MongoDB Compass navigation pane, click
               the database to which your target collection belongs.

            b. From the database view, click the target collection name.

         2. Click the :guilabel:`Insert Document` button:

            .. figure:: /images/compass-insert-button.png
               :alt: Compass insert button

         3. For each field in the document, select the field type and
            fill in the field name and value. Add fields by clicking
            the last line number, then clicking
            :guilabel:`Add Field After ...`

            - For ``Object`` types, add nested fields by clicking the
              last field's number and selecting
              :guilabel:`Add Field After ...`

            - For ``Array`` types, add additional elements to the array
              by clicking the last element's line number and selecting
              :guilabel:`Add Array Element After ...`

         4. Once all fields have been filled out, click :guilabel:`Insert`.

         The following example inserts a new document into the
         ``test.inventory`` collection:

     - id: python
       content: |
         :py:meth:`pymongo.collection.Collection.insert_one` inserts a
         *single* :ref:`document<bson-document-format>` into a
         collection.

         The following example inserts a new document into the
         ``inventory`` collection. If the document does not specify
         an ``_id`` field, the PyMongo driver adds the ``_id`` field
         with an ObjectId value to the new document. See
         :ref:`write-op-insert-behavior`.

     - id: motor
       content: |
         :py:meth:`motor.motor_asyncio.AsyncIOMotorCollection.insert_one` inserts a
         *single* :ref:`document<bson-document-format>` into a
         collection.

         The following example inserts a new document into the
         ``inventory`` collection. If the document does not specify
         an ``_id`` field, the Motor driver adds the ``_id`` field
         with an ObjectId value to the new document. See
         :ref:`write-op-insert-behavior`.

     - id: java-sync
       content: |
         com.mongodb.client.MongoCollection.insertOne_
         inserts a *single* :ref:`document<bson-document-format>` into
         a collection.

         The following example inserts a new document into the
         ``inventory`` collection. If the document does not specify
         an ``_id`` field, the driver adds the ``_id`` field with an
         ObjectId value to the new document. See
         :ref:`write-op-insert-behavior`.

     - id: java-async
       content: |
         `com.mongodb.reactivestreams.client.MongoCollection.insertOne <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#insertOne(TDocument)>`_
         inserts a *single* :ref:`document<bson-document-format>` into
         a collection with the `Java Reactive Streams
         Driver <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/>`_:

         .. code-block:: json

            { item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } }

         The following example inserts the document above into the
         ``inventory`` collection. If the document does not specify
         an ``_id`` field, the driver adds the ``_id`` field with an
         ObjectId value to the new document. See
         :ref:`write-op-insert-behavior`.

     - id: nodejs
       content: |
         :node-api:`Collection.insertOne() <Collection.html#insertOne>`
         inserts a *single* :ref:`document<bson-document-format>` into a
         collection.

         The following example inserts a new document into the
         ``inventory`` collection. If the document does not specify
         an ``_id`` field, the Node.js driver adds the ``_id`` field
         with an ObjectId value to the new document. See
         :ref:`write-op-insert-behavior`.

     - id: php
       content: |
         :phpmethod:`MongoDB\\Collection::insertOne() <phpmethod.MongoDB\\Collection::insertOne>`
         inserts a *single* :ref:`document<bson-document-format>` into a
         collection.

         The following example inserts a new document into the
         ``inventory`` collection. If the document does not specify
         an ``_id`` field, the PHP driver adds the ``_id`` field
         with an ObjectId value to the new document. See
         :ref:`write-op-insert-behavior`.

     - id: perl
       content: |
         :perl-api:`MongoDB::Collection::insert_one()<Collection#insert_one>`
         inserts a *single* :ref:`document<bson-document-format>` into a
         collection.

         The following example inserts a new document into the
         ``inventory`` collection. If the document does not specify
         an ``_id`` field, the Perl driver adds the ``_id`` field
         with an ObjectId value to the new document. See
         :ref:`write-op-insert-behavior`.

     - id: ruby
       content: |
         :ruby-api:`Mongo::Collection#insert_one()<Collection.html#insert_one-instance_method>`
         inserts a *single* :ref:`document<bson-document-format>` into a
         collection.

         The following example inserts a new document into the
         ``inventory`` collection. If the document does not specify
         an ``_id`` field, the Ruby driver adds the ``_id`` field
         with an ObjectId value to the new document. See
         :ref:`write-op-insert-behavior`.

     - id: scala
       content: |
         :scala-api:`collection.insertOne()<insertOne(document:TResult,options:org.mongodb.scala.model.InsertOneOptions):org.mongodb.scala.SingleObservable[org.mongodb.scala.Completed]>`
         inserts a *single* :ref:`document<bson-document-format>` into a
         collection.

         The following example inserts a new document into the
         ``inventory`` collection. If the document does not specify
         an ``_id`` field, the Scala driver adds the ``_id`` field
         with an ObjectId value to the new document. See
         :ref:`write-op-insert-behavior`.

     - id: csharp
       content: |
         :csharp-api:`IMongoCollection.InsertOne() <M_MongoDB_Driver_IMongoCollection_1_InsertOne>`
         inserts a *single* :ref:`document<bson-document-format>` into a
         collection.

         The following example inserts a new document into the
         ``inventory`` collection. If the document does not specify
         an ``_id`` field, the C# driver adds the ``_id`` field
         with an ObjectId value to the new document. See
         :ref:`write-op-insert-behavior`.

     - id: go
       content: |

          :go-api:`Collection.InsertOne <mongo#Collection.InsertOne>`
          inserts a *single* :ref:`document<bson-document-format>` into a
          collection.
          
          The following example inserts a new document into the
          ``inventory`` collection. If the document does not specify
          an ``_id`` field, the driver adds the ``_id`` field
          with an ObjectId value to the new document. See
          :ref:`write-op-insert-behavior`.

.. include:: /includes/driver-examples/driver-example-insert-1.rst

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         :method:`~db.collection.insertOne()` returns a document that
         includes the newly inserted document's ``_id`` field value. For
         an example of a return document, see
         :ref:`db.collection.insertOne() reference<insertOne-examples>`.

     - id: compass
       content: |
         .. note::

            MongoDB Compass generates the ``_id`` field and its value
            automatically. The generated
            :term:`ObjectId` consists of a
            unique randomly generated hexadecimal value.

            You can change this value prior to inserting your document
            so long as it remains unique and is a valid ``ObjectId``.
            For more information on the ``_id`` field, see
            :ref:`_id Field <insert-id-field>`.

     - id: python
       content: |
         :py:meth:`~pymongo.collection.Collection.insert_one` returns an
         instance of :py:class:`pymongo.results.InsertOneResult` whose
         ``inserted_id`` field contains the ``_id`` of the newly
         inserted document.

     - id: motor
       content: |
         :py:meth:`~motor.motor_asyncio.AsyncIOMotorCollection.insert_one` returns an
         instance of :py:class:`pymongo.results.InsertOneResult` whose
         ``inserted_id`` field contains the ``_id`` of the newly
         inserted document.

     - id: java-sync
       content: |

     - id: java-async
       content: |
         `com.mongodb.reactivestreams.client.MongoCollection.insertOne <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#insertOne(TDocument)>`_
         returns a `Publisher <http://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Publisher.html>`_
         object. The ``Publisher`` inserts the document into a collection when subscribers request data.

     - id: nodejs
       content: |
         :node-api:`insertOne() <Collection.html#insertOne>` returns a
         promise that provides a ``result``.  The ``result.insertedId``
         promise contains the ``_id`` of the newly inserted document.

     - id: php
       content: |
         Upon successful insert, the
         :phpmethod:`insertOne() <phpmethod.MongoDB\\Collection::insertOne>`
         method returns an instance of
         :phpclass:`MongoDB\\InsertOneResult <phpclass.MongoDB\\InsertOneResult>`
         whose
         :phpmethod:`getInsertedId() <phpmethod.MongoDB\\InsertOneResult::getInsertedId>`
         method returns the ``_id`` of the newly inserted document.

     - id: perl
       content: |
         Upon successful insert, the
         :perl-api:`insert_one()<Collection#insert_one>` method returns
         an instance of
         :perl-api:`MongoDB::InsertOneResult<InsertOneResult>` whose
         ``inserted_id`` attribute contains the ``_id`` of the newly
         inserted document.

     - id: ruby
       content: |
         Upon successful insert, the
         :ruby-api:`insert_one()<Collection.html#insert_one-instance_method>`
         method returns an instance of
         :ruby-api:`Mongo::Operation::Result<Operation/Result.html>`, whose
         ``inserted_id`` attribute contains the ``_id`` of the newly
         inserted document.

     - id: scala
       content: |
         Upon successful insert, the
         :scala-api:`collection.insertOne()<MongoCollection.html#insertOne(document:TResult,options:org.mongodb.scala.model.InsertOneOptions):org.mongodb.scala.SingleObservable[org.mongodb.scala.Completed]>`
         method returns an instance of
         :scala-api:`collection.insertOne().results();<InsertOneResult>` whose
         ``inserted_id`` attribute contains the ``_id`` of the newly
         inserted document.

     - id: csharp
       content: |

     - id: go
       content: |

          :go-api:`Collection.InsertOne <mongo#Collection.InsertOne>`
          function returns an instance of
          :go-api:`InsertOneResult<mongo#InsertOneResult>` whose
          ``InsertedID`` attribute contains the ``_id`` of the newly
          inserted document.

To retrieve the document that you just inserted, :ref:`query the collection
<document-query-filter>`:

.. include:: /includes/driver-examples/driver-example-insert-2.rst

.. _write-op-insertMany:

Insert Multiple Documents
-------------------------

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         .. versionadded:: 3.2

         :method:`db.collection.insertMany()` can insert *multiple*
         :ref:`documents <bson-document-format>` into a collection. Pass an
         array of documents to the method.

         The following example inserts three new documents into the
         ``inventory`` collection. If the documents do not specify an
         ``_id`` field, MongoDB adds the ``_id`` field with an ObjectId
         value to each document. See :ref:`write-op-insert-behavior`.

     - id: compass
       content: |
         Currently, MongoDB Compass does not support inserting multiple
         documents in a single operation.

     - id: python
       content: |
         .. versionadded:: 3.2

         :py:meth:`pymongo.collection.Collection.insert_many` can insert
         *multiple* :ref:`documents <bson-document-format>` into a
         collection. Pass an iterable of documents to the method.

         The following example inserts three new documents into the
         ``inventory`` collection. If the documents do not specify an
         ``_id`` field, the PyMongo driver adds the ``_id`` field with
         an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

     - id: motor
       content: |

         :py:meth:`motor.motor_asyncio.AsyncIOMotorCollection.insert_many`
         can insert *multiple* :ref:`documents <bson-document-format>`
         into a collection. Pass an iterable of documents to the method.

         The following example inserts three new documents into the
         ``inventory`` collection. If the documents do not specify an
         ``_id`` field, the PyMongo driver adds the ``_id`` field with
         an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

     - id: java-sync
       content: |
         .. versionadded:: 3.2

         com.mongodb.client.MongoCollection.insertMany_
         can insert *multiple* :ref:`documents <bson-document-format>`
         into a collection. Pass a list of documents to the method.

         The following example inserts three new documents into the
         ``inventory`` collection. If the documents do not specify an
         ``_id`` field, the driver adds the ``_id`` field with
         an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

     - id: java-async
       content: |
         .. versionadded:: 3.2

         `com.mongodb.reactivestreams.client.MongoCollection.html.insertMany
         <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#insertMany(java.util.List)>`_
         inserts the following documents with the `Java Reactive Streams
         Driver <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/>`_:

         .. code-block:: json

            { item: "journal", qty: 25, tags: ["blank", "red"], size: { h: 14, w: 21, uom: "cm" } }
            { item: "mat", qty: 85, tags: ["gray"], size: { h: 27.9, w: 35.5, uom: "cm" } }
            { item: "mousepad", qty: 25, tags: ["gel", "blue"], size: { h: 19, w: 22.85, uom: "cm" } }

         The following example inserts three new documents into the
         ``inventory`` collection. If the documents do not specify an
         ``_id`` field, the driver adds the ``_id`` field with
         an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

     - id: nodejs
       content: |
         .. versionadded:: 3.2

         :node-api:`Collection.insertMany() <Collection.html#insertMany>`
         can insert *multiple* :ref:`documents <bson-document-format>`
         into a collection. Pass an array of documents to the method.

         The following example inserts three new documents into the
         ``inventory`` collection. If the documents do not specify an
         ``_id`` field, the Node.js driver adds the ``_id`` field with
         an ObjectId value to each document. See
         :ref:`write-op-insert-behavior`.

     - id: php
       content: |
         .. versionadded:: 3.2

         :phpmethod:`MongoDB\\Collection::insertMany() <phpmethod.MongoDB\\Collection::insertMany>`
         can insert *multiple* :ref:`documents <bson-document-format>` into a
         collection. Pass an array of documents to the method.

         The following example inserts three new documents into the
         ``inventory`` collection. If the documents do not specify an
         ``_id`` field, the PHP driver adds the ``_id`` field with
         an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

     - id: perl
       content: |
         .. versionadded:: 3.2

         :perl-api:`MongoDB::Collection::insert_many()<Collection#insert_many>`
         can insert *multiple* :ref:`documents <bson-document-format>` into a
         collection. Pass an array reference of documents to the method.

         The following example inserts three new documents into the
         ``inventory`` collection. If the documents do not specify an
         ``_id`` field, the Perl driver adds the ``_id`` field with
         an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

     - id: ruby
       content: |
         .. versionadded:: 3.2

         :ruby-api:`Mongo::Collection#insert_many()<Collection.html#insert_many-instance_method>`
         can insert *multiple* :ref:`documents <bson-document-format>` into a
         collection. Pass an array of documents to the method.

         The following example inserts three new documents into the
         ``inventory`` collection. If the documents do not specify an
         ``_id`` field, the Ruby driver adds the ``_id`` field with
         an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

     - id: scala
       content: |
         .. versionadded:: 3.2

         :scala-api:`collection.insertMany()<insertMany(documents:Seq[_<:TResult],options:org.mongodb.scala.model.InsertManyOptions):org.mongodb.scala.SingleObservable[org.mongodb.scala.Completed]>`
         can insert *multiple* :ref:`documents <bson-document-format>` into a
         collection.

         The following example inserts three new documents into the
         ``inventory`` collection. If the documents do not specify an
         ``_id`` field, the Scala driver adds the ``_id`` field with
         an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

     - id: csharp
       content: |
         .. versionadded:: 3.2

         :csharp-api:`IMongoCollection.InsertMany()<M_MongoDB_Driver_IMongoCollection_1_InsertMany>`
         can insert *multiple* :ref:`documents <bson-document-format>`
         into a collection. Pass an enumerable collection of documents
         to the method.

         The following example inserts three new documents into the
         ``inventory`` collection. If the documents do not specify an
         ``_id`` field, the driver adds the ``_id`` field with
         an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

     - id: go
       content: |

          :go-api:`Collection.InsertMany <mongo#Collection.InsertMany>`
          can insert *multiple* :ref:`documents <bson-document-format>` into a
          collection.
          
          The following example inserts three new documents into the
          ``inventory`` collection. If the documents do not specify an
          ``_id`` field, the driver adds the ``_id`` field with
          an ObjectId value to each document. See :ref:`write-op-insert-behavior`.


.. include:: /includes/driver-examples/driver-example-insert-3.rst

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         :method:`~db.collection.insertMany()` returns a document that includes
         the newly inserted documents ``_id`` field values. See the
         :ref:`reference <insertMany-examples>` for an example.

         To retrieve the inserted documents, :ref:`query the collection
         <read-operations-query-document>`:

     - id: python
       content: |
         :py:meth:`~pymongo.collection.Collection.insert_many` returns
         an instance of :py:class:`pymongo.results.InsertManyResult`
         whose ``inserted_ids`` field is a list containing the ``_id``
         of each newly inserted document.

         To retrieve the inserted documents, :ref:`query the collection
         <read-operations-query-document>`:

     - id: motor
       content: |
         :py:meth:`~motor.motor_asyncio.AsyncIOMotorCollection.insert_many`
         returns an instance of :py:class:`pymongo.results.InsertManyResult`
         whose ``inserted_ids`` field is a list containing the ``_id``
         of each newly inserted document.

         To retrieve the inserted documents, :ref:`query the collection
         <read-operations-query-document>`:

     - id: java-sync
       content: |

         To retrieve the inserted documents, :ref:`query the collection
         <read-operations-query-document>`:

     - id: java-async
       content: |
         `com.mongodb.reactivestreams.client.MongoCollection.html.insertMany
         <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#insertMany(java.util.List)>`_
         returns a `Publisher <http://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Publisher.html>`_
         object. The ``Publisher`` inserts the document into a collection
         when subscribers request data.

         To retrieve the inserted documents, :ref:`query the collection
         <read-operations-query-document>`:

     - id: nodejs
       content: |
         :node-api:`insertMany() <Collection.html#insertMany>` returns a
         promise that provides a ``result``. The ``result.insertedIds``
         field contains an array with the ``_id`` of each newly inserted
         document.

         To retrieve the inserted documents, :ref:`query the collection
         <read-operations-query-document>`:

     - id: php
       content: |
         Upon successful insert, the
         :phpmethod:`insertMany() <phpmethod.MongoDB\\Collection::insertMany>`
         method
         returns an instance of
         :phpclass:`MongoDB\\InsertManyResult <phpclass.MongoDB\\InsertManyResult>`
         whose
         :phpmethod:`getInsertedIds() <phpmethod.MongoDB\\InsertManyResult::getInsertedIds>`
         method returns the ``_id`` of each newly inserted document.

         To retrieve the inserted documents, :ref:`query the collection
         <read-operations-query-document>`:

     - id: perl
       content: |
         Upon successful insert, the
         :perl-api:`insert_many()<Collection#insert_many>` method
         returns an instance of
         :perl-api:`MongoDB::InsertManyResult<InsertManyResult>`
         whose ``inserted_ids`` attribute is a list containing the
         ``_id`` of each newly inserted document.

         To retrieve the inserted documents, :ref:`query the collection
         <read-operations-query-document>`:

     - id: ruby
       content: |
         Upon successful insert, the
         :ruby-api:`insert_many()<Collection.html#insert_many>` method
         returns an instance of
         :ruby-api:`Mongo::BulkWrite::Result<BulkWrite/Result.html>`
         whose ``inserted_ids`` attribute is a list containing the
         ``_id`` of each newly inserted document.

         To retrieve the inserted documents, :ref:`query the collection
         <read-operations-query-document>`:

     - id: scala
       content: |
         Upon successful insert, the
         :scala-api:`insertMany()<insertMany(documents:Seq[_<:TResult],options:org.mongodb.scala.model.InsertManyOptions):org.mongodb.scala.SingleObservable[org.mongodb.scala.Completed]>`
         method returns an `Observable <http://mongodb.github.io/mongo-scala-driver/2.1/reference/observables/>`_ with a type parameter indicating when
         the operation has completed or with either a
         ``com.mongodb.DuplicateKeyException`` or
         ``com.mongodb.MongoException``.

         To retrieve the inserted documents, :ref:`query the collection
         <read-operations-query-document>`:

     - id: csharp
       content: |

         To retrieve the inserted documents, :ref:`query the collection
         <read-operations-query-document>`:

     - id: go
       content: |

          To retrieve the inserted documents, :ref:`query the collection
          <read-operations-query-document>`:


.. include:: /includes/driver-examples/driver-example-query-7.rst

.. _write-op-insert-behavior:

Insert Behavior
---------------

Collection Creation
~~~~~~~~~~~~~~~~~~~

If the collection does not currently exist, insert operations will
create the collection.

.. _insert-id-field:

``_id`` Field
~~~~~~~~~~~~~

.. include:: /includes/fact-id-field.rst

Atomicity
~~~~~~~~~

All write operations in MongoDB are atomic on the level of a single
document. For more information on MongoDB and atomicity, see
:doc:`/core/write-operations-atomicity`

Write Acknowledgement
~~~~~~~~~~~~~~~~~~~~~

With write concerns, you can specify the level of acknowledgement
requested from MongoDB for write operations. For details, see
:doc:`/reference/write-concern`.

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         .. seealso::

            - :method:`db.collection.insertOne()`

            - :method:`db.collection.insertMany()`

            - :ref:`additional-inserts`

     - id: python
       content: |
         .. seealso::

            - :py:meth:`pymongo.collection.Collection.insert_one`

            - :py:meth:`pymongo.collection.Collection.insert_many`

            - :ref:`additional-inserts`

     - id: motor
       content: |
         .. seealso::

            - :py:meth:`motor.motor_asyncio.AsyncIOMotorCollection.insert_one`

            - :py:meth:`motor.motor_asyncio.AsyncIOMotorCollection.insert_many`

            - :ref:`additional-inserts`

     - id: java-sync
       content: |
         .. seealso::

            - com.mongodb.client.MongoCollection.insertOne_

            - com.mongodb.client.MongoCollection.insertMany_

            - `Additional Java Synchronous Driver Write Examples`_

     - id: java-async
       content: |
         .. seealso::

            - `com.mongodb.reactivestreams.client.MongoCollection.insertOne <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#insertOne(TDocument)>`_

            - `com.mongodb.reactivestreams.client.MongoCollection.html.insertMany <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#insertMany(java.util.List)>`_

            - `Java Reactive Streams Driver Quick Tour <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/getting-started/quick-tour/>`_

     - id: nodejs
       content: |
         .. seealso::

            - :node-api:`Collection.insertOne() <Collection.html#insertOne>`

            - :node-api:`Collection.insertMany() <Collection.html#insertMany>`

            - :ref:`additional-inserts`

     - id: php
       content: |
         .. seealso::

            - :phpmethod:`MongoDB\\Collection::insertOne() <phpmethod.MongoDB\\Collection::insertOne>`

            - :phpmethod:`MongoDB\\Collection::insertMany() <phpmethod.MongoDB\\Collection::insertMany>`

            - :ref:`additional-inserts`

     - id: perl
       content: |
         .. seealso::

            - :perl-api:`MongoDB::Collection::insert_one()<Collection#insert_one>`

            - :perl-api:`MongoDB::Collection::insert_many()<Collection#insert_many>`

            - :ref:`additional-inserts`

     - id: ruby
       content: |
         .. seealso::

            - :ruby-api:`Mongo::Collection#insert_one()<Collection.html#insert_one-instance_method>`

            - :ruby-api:`Mongo::Collection#insert_many()<Collection.html#insert_many-instance_method>`

     - id: scala
       content: |
         .. seealso::

            - :scala-api:`collection.insertOne()<insertOne(document:TResult,options:org.mongodb.scala.model.InsertOneOptions):org.mongodb.scala.SingleObservable[org.mongodb.scala.Completed]>`

            - :scala-api:`collection.insertMany()<insertMany(documents:Seq[_<:TResult],options:org.mongodb.scala.model.InsertManyOptions):org.mongodb.scala.SingleObservable[org.mongodb.scala.Completed]>`

            - :ref:`additional-inserts`

     - id: csharp
       content: |
         .. seealso::

            - :csharp-api:`IMongoCollection.InsertOne() <M_MongoDB_Driver_IMongoCollection_1_InsertOne>`

            - :csharp-api:`IMongoCollection.InsertMany() <M_MongoDB_Driver_IMongoCollection_1_InsertMany>`

            - :ref:`additional-inserts`

     - id: go
       content: |
         .. seealso::

            - :go-api:`Collection.InsertOne <mongo#Collection.InsertOne>`

            - :go-api:`Collection.InsertMany <mongo#Collection.InsertMany>`

            - :ref:`additional-inserts`
.. toctree::
   :titlesonly:
   :hidden:

   /reference/insert-methods
