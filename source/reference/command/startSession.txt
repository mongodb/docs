============
startSession
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: startSession

   .. versionadded:: 3.6

   The :dbcommand:`startSession` command starts a new logical
   :ref:`session <sessions>` for a sequence of operations.

   :dbcommand:`startSession` has the following syntax:

   .. code-block:: javascript

      { startSession: 1 }

   .. include:: /includes/fact-dbcommand.rst

   .. |command| replace:: :dbcommand:`startSession`

   .. code-block:: javascript

      db.runCommand( { startSession: 1 } )

   .. important::

      ``featureCompatibilityVersion`` must be 3.6 or greater to use the
      :dbcommand:`startSession` command.

   .. seealso::

   :method:`Mongo.startSession()`


Behavior
--------

If the deployment enforces authentication/authorization, you must be
authenticated to run the :dbcommand:`startSession` command. The user
who runs :dbcommand:`startSession` owns the created session, and only
that user can use the session.

If the deployment does not enforce authentication/authorization, a
created session has no owner and can be used by any user on any
connection. If the user authenticates and creates a session for a
deployment that does not enforce authentication/authorization, the user
owns the session. However, any user on any connection may use the
session.

If the deployment transitions to auth without any downtime, any
sessions without an owner cannot be used.

Output
------

In addition to the status and operation time of the command, the
:dbcommand:`startSession` returns the following session specific
information:

.. list-table::
   :header-rows: 1

   * - Field
     - Type
     - Description

   * - ``id``

     - Document

     - The document that contains the 16-byte Universally Unique
       Identifier (UUID) portion of the session's identifier.

       .. code-block:: javascript

          id: { id: <UUID> }

       The session's identifier consists of this UUID concatenated with
       the hash of the authenticated user credentials.

   * - ``timeoutMinutes``

     - number

     - The amount of time, in minutes, since the last client use that a
       session remains active before expiring. By default, sessions
       have an expiration timeout of 30 minutes. To change the value,
       set the :parameter:`localLogicalSessionTimeoutMinutes` parameter
       when starting up :binary:`~bin.mongod`. For replica sets and sharded
       clusters, you must specify the same value on every member.

       .. seealso: :dbcommand:`refreshSession`

