======================
Create a Database User
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/styles/corrections.rst

.. include:: /includes/fact-projects-groups-synonyms.rst

.. include:: /includes/api-base-url.rst

.. include:: /includes/extracts/fact-api-requirements-owner.rst

.. include:: /includes/fact-database-user-limits.rst

Syntax
------

.. code-block:: http

   POST /api/atlas/v1.0/groups/{GROUP-ID}/databaseUsers

Request Path Parameters
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1

   * - Path Parameter
     - Necessity
     - Description

   * - ``GROUP-ID``

     - Required

     - Unique identifier for the :ref:`project <group-id>`.

Request Query Parameters
~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/no-query-parameters.rst

Request Body Parameters
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 15 10 10 65

   * - Body Parameter
     - Type
     - Necessity
     - Description

   * - ``databaseName``
     - string
     - Required
     - The user's :ref:`authentication database
       <authentication-database>`. A user must provide both a username
       and authentication database to log into MongoDB. 
       
       Accepted values include:

       - ``admin`` if ``ldapAuthType`` and ``x509Type`` are omitted or
         ``NONE``.
       - ``$external`` if:

         - ``ldapAuthType`` is ``USER`` or ``GROUP``, or
         - ``x509Type`` is ``MANAGED`` or ``CUSTOMER``.

   * - ``deleteAfterDate``
     - string
     - Optional
     - |iso8601-time| after which |service| deletes the user. The
       specified date must be in the future and within one week of the
       time you make the |api| request.

       .. note::

          You may include an |iso8601| time zone designator to ensure
          that the expiration date occurs with respect to the local
          time in the specified time zone.

   * - ``labels``
     - array of documents
     - Optional
     - Array containing key-value pairs that tag and categorize the 
       database user.

       Each key and value has a maximum length of 255 characters.

       .. include:: /includes/fact-example-labels.rst        

   * - ``ldapAuthType``
     - string
     - Optional
     - Method by which the provided ``username`` is authenticated. If
       no value is given, |service| uses the default value of ``NONE``.

       Accepted values include:

       .. list-table::
          :stub-columns: 1
          :widths: 20 80

          * - ``NONE``
            - |service| authenticates this user through
              :manual:`SCRAM-SHA </core/security-scram>`, not |ldap|.
          * - ``USER``
            - |ldap| server authenticates this user through the user's
              |ldap| user.
              
              ``username`` must also be a fully qualified distinguished 
              name, as defined in :rfc:`2253`.

          * - ``GROUP``
            - |ldap| server authenticates this user using their
              |ldap| user and authorizes this user using their |ldap|
              group. To learn more about |ldap| security, see
              :doc:`/security-ldaps`.

              ``username`` must also be a fully qualified distinguished 
              name, as defined in :rfc:`2253`.
   
   * - ``x509Type``
     - string
     - Optional
     - X.509 method by which the provided ``username`` is
       authenticated. If no value is given, |service| uses the default 
       value of ``NONE``.
       
       The accepted types are:
       
       .. list-table::
          :stub-columns: 1
          :widths: 20 80

          * - ``NONE``
            - The user does not use X.509 authentication.

          * - ``MANAGED``
            - The user is being created for use with |service|-managed 
              X.509.
              
              Externally authenticated users can only be created on the 
              ``$external`` database.

          * - ``CUSTOMER``
            - The user is being created for use with 
              :ref:`Self-Managed X.509 <self-managed-x509>`. Users 
              created with this ``x509Type`` require a 
              Common Name (CN) in the ``username`` field. For more 
              information, see 
              `RFC 2253 <https://tools.ietf.org/html/rfc2253>`_.
              
              Externally authenticated users can only be created on the 
              ``$external`` database.

   * - ``groupId``
     - string
     - Required
     - Unique identifier of the |service| project to which the user
       belongs.

   * - ``roles``
     - string array
     - Required
     - .. include:: /includes/fact-database-user-role.rst

       .. include:: /includes/fact-subset-privilege-actions.rst

       .. important::

          If a user is assigned a :ref:`custom role
          <mongodb-roles>`, they cannot be assigned any other roles.

   * - | ``roles``
       | ``.collectionName``
     - string
     - Required
     - Collection for which the role applies.

       You can specify a collection for the ``read`` and ``readWrite``
       roles. If you do not specify a collection for ``read`` and
       ``readWrite``, the role applies to all collections in the
       database (excluding some collections in the ``system.``
       database).

       .. note::

          .. include:: /includes/fact-read-read-write-actions.rst

   * - | ``roles``
       | ``.databaseName``
     - string
     - Required
     - Database on which the user has the specified role. A role
       on the ``admin`` database can include privileges that apply to
       the other databases.

   * - | ``roles``
       | ``.roleName``
     - string
     - Required
     - Name of the role. This value can either be a
       :manual:`built-in role </reference/built-in-roles/>` or a
       :ref:`custom role <mongodb-roles>`.

       The following accepted values of ``role`` are restricted to the
       ``admin`` database:

       - :atlasrole:`atlasAdmin <Atlas admin>`
       - :authrole:`readWriteAnyDatabase`
       - :authrole:`readAnyDatabase`
       - :authrole:`clusterMonitor`
       - :authrole:`backup`
       - :authrole:`dbAdminAnyDatabase`
       - ``enableSharding``

         This role is specific to MongoDB databases managed by
         |service|. The role allows the user to enable sharding on a
         database and to shard a collection.

       The following accepted values of ``role`` can be applied to a
       specific database:

       - :authrole:`dbAdmin`
       - ``read``
       - ``readWrite``

       The following accepted values of ``role`` can be applied to a
       specific collection:

       - ``read``
       - ``readWrite``

       If you do not specify a collection for the ``read`` and
       ``readWrite`` roles, the roles apply to all collections
       (excluding some ``system.`` collections) in the database.

       .. note::

          If you specify a :ref:`custom role <mongodb-roles>` name in
          this field, the ``roles.databaseName`` field must be
          ``admin``.

   * - ``password``
     - string
     - Conditional
     - The user's password. Required if ``x509Type`` and 
       ``ldapAuthType`` are ``NONE``. This field is *not* included in 
       the server response.

   * - ``username``
     - string
     - Required
     - Username for authenticating to MongoDB. 
     
       Must be a fully qualified distinguished name, as defined in 
       :rfc:`2253`, if:

       - ``ldapAuthType`` is ``USER`` or ``GROUP``, or
       - ``x509Type`` is ``CUSTOMER``.

Response Elements
~~~~~~~~~~~~~~~~~

If you set the query element ``envelope`` to ``true``, the response is
wrapped by the ``content`` object.

.. include:: /includes/api/list-tables/database-users-get-response.rst

Examples
--------

Request
~~~~~~~

.. tabs::

   tabs:
     - id: scram
       name: SCRAM-SHA
       content: |

         Create a database user that |service| authenticates using
         :manual:`SCRAM-SHA </core/security-scram>` and the ``admin`` 
         database.

         .. include:: /includes/extracts/fact-api-requirements-modify.rst

         .. literalinclude:: /includes/api/requests/database-create-users-create-a-user-scram.sh
            :language: sh

     - id: x509
       name: X.509
       content: |

         Create a database user that |service| authenticates using
         X.509 certificates and the ``$external`` database.

         .. include:: /includes/extracts/fact-api-requirements-modify.rst

         .. literalinclude:: /includes/api/requests/database-create-users-create-a-user-x509.sh
            :language: sh            

     - id: ldap
       name: LDAP
       content: |

         Create a database user that |service| authenticates using
         :doc:`LDAP </security-ldaps>` and the ``$external`` 
         database.

         .. include:: /includes/extracts/fact-api-requirements-modify.rst

         .. literalinclude:: /includes/api/requests/database-create-users-create-a-user-ldap.sh
            :language: sh

Response Header
~~~~~~~~~~~~~~~

.. include:: /includes/api/api-headers/401.rst

.. include:: /includes/api/api-headers/201.rst

Response Body
~~~~~~~~~~~~~

.. tabs::

   hidden: true

   tabs:
     - id: scram
       name: SCRAM-SHA
       content: |

         .. literalinclude:: /includes/api/responses/database-create-users-create-a-user-scram.json
            :language: json
            :copyable: false

     - id: x509
       name: X.509
       content: |

         .. literalinclude:: /includes/api/responses/database-create-users-create-a-user-x509.json
            :language: json
            :copyable: false        

     - id: ldap
       name: LDAP
       content: |

         .. literalinclude:: /includes/api/responses/database-create-users-create-a-user-ldap.json
            :language: json
            :copyable: false
