==================
$map (aggregation)
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $map

   Applies an :ref:`expression <aggregation-expressions>` to
   each item in an array and returns an array with the applied results.

   The :expression:`$map` expression has the following syntax:

   .. code-block:: javascript

      { $map: { input: <expression>, as: <string>, in: <expression> } }

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Field
        - Specification

      * - ``input``

        - An :ref:`expression <aggregation-expressions>` that
          resolves to an array.

      * - ``as``

        - Optional. A name for the :doc:`variable
          </reference/aggregation-variables>` that represents each
          individual element of the ``input`` array. If no name is
          specified, the variable name defaults to ``this``.

      * - ``in``

        - An :ref:`expression <aggregation-expressions>` that is
          applied to each element of the ``input`` array. The expression
          references each element individually with the variable name
          specified in ``as``.

   For more information on expressions, see
   :ref:`aggregation-expressions`.

Examples
--------

Add to each element of an array using ``$map``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

From the :binary:`~bin.mongo` shell, create a sample collection named
``grades`` with the following documents:

.. code-block:: javascript

   db.grades.insertMany([
     { _id: 1, quizzes: [ 5, 6, 7 ] },
     { _id: 2, quizzes: [ ] },
     { _id: 3, quizzes: [ 3, 8, 9 ] }
   ])

The following aggregation operation uses :expression:`$map` with the
:expression:`$add` expression to increment each element in the
``quizzes`` array by ``2``.

.. code-block:: javascript

   db.grades.aggregate(
      [
         { $project:
            { adjustedGrades:
               {
                 $map:
                    {
                      input: "$quizzes",
                      as: "grade",
                      in: { $add: [ "$$grade", 2 ] }
                    }
               }
            }
         }
      ]
   )

This operation returns the following results:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "adjustedGrades" : [ 7, 8, 9 ] }
   { "_id" : 2, "adjustedGrades" : [ ] }
   { "_id" : 3, "adjustedGrades" : [ 5, 10, 11 ] }

Truncate each array element with ``$map``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

From the :binary:`~bin.mongo` shell, create a sample collection named
``deliveries`` with the following documents:

.. code-block:: javascript

   db.deliveries.insertMany([
     { "_id" : 1, "city" : "Bakersfield", "distances" : [ 34.57, 81.96, 44.24 ] },
     { "_id" : 2, "city" : "Barstow", "distances" : [ 73.28, 9.67, 124.36 ] },
     { "_id" : 3, "city" : "San Bernadino", "distances" : [ 16.04, 3.25, 6.82 ] }
   ])

The following aggregation operation uses :expression:`$map` to
:expression:`truncate <$trunc>` each element in the ``distances`` array
to its integer.

.. code-block:: javascript

   db.deliveries.aggregate(
      [
         { $project:
            {  city: "$city",
               integerValues:
                  { $map:
                     {
                        input: "$distances",
                        as: "decimalValue",
                        in: { $trunc: "$$decimalValue" }
                     }
               }
            }
         }
      ]
   )

This operation returns the following results:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "city" : "Bakersfield", "integerValues" : [ 34, 81, 44 ] }
   { "_id" : 2, "city" : "Barstow", "integerValues" : [ 73, 9, 124 ] }
   { "_id" : 3, "city" : "San Bernadino", "integerValues" : [ 16, 3, 6 ] }

Convert Celsius Temperatures to Fahrenheit Using ``$map``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

From the :binary:`~bin.mongo` shell, create a sample collection named
``temperatures`` with the following documents:

.. code-block:: javascript

   db.temperatures.insertMany([
     { "_id" : 1, "date" : ISODate("2019-06-23"), "tempsC" : [ 4, 12, 17 ] },
     { "_id" : 2, "date" : ISODate("2019-07-07"), "tempsC" : [ 14, 24, 11 ] },
     { "_id" : 3, "date" : ISODate("2019-10-30"), "tempsC" : [ 18, 6, 8 ] }
   ])

The following aggregation operation uses the :pipeline:`$addFields`
stage to add a new field to the documents called ``tempsF`` which
contains Fahrenheit equivalents of the elements in the ``tempsC``
array. To convert from Celsius to Fahrenheit, the operation uses
:expression:`$map` to :expression:`$multiply` the Celsius
values by ``9/5`` and then :expression:`$add` ``32``.

.. code-block:: javascript

   db.temperatures.aggregate( [
     { $addFields:
        {
           "tempsF":
              { $map:
                 {
                    input: "$tempsC",
                    as: "tempInCelsius",
                    in: { $add: [ { $multiply: [ "$$tempInCelsius", 9/5 ] }, 32 ] }
                 }
              }
         }
      }
  ] )

This operation returns the following results:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "date" : ISODate("2019-06-23T00:00:00Z"), "tempsC : [ 4, 12, 17 ], "tempsF" : [ 39.2, 53.6, 62.6 ] }
   { "_id" : 2, "date" : ISODate("2019-07-07T00:00:00Z"), "tempsC" : [ 14, 24, 11 ], "tempsF" : [ 57.2, 75.2, 51.8 ] }
   { "_id" : 3, "date" : ISODate("2019-10-30T00:00:00Z"), "tempsC" : [ 18, 6, 8 ], "tempsF" : [ 64.4, 42.8, 46.4 ] }

.. seealso::

   

   - :expression:`$let`
   - :expression:`$add`
   - :expression:`$multiply`
