.. _langgraph-build-agents:

==================================================
Build an AI Agent with LangGraph and MongoDB Atlas
==================================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. facet::
   :name: programming_language
   :values: python

.. meta::
   :description: Learn how to build AI agents with LangGraph and MongoDB Vector Search.

.. dismissible-skills-card::
   :skill: Gen AI
   :url: https://learn.mongodb.com/skills?openTab=gen+ai

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can integrate |service-fullname| with :ref:`LangGraph <langgraph>`
to build AI agents. This tutorial demonstrates how to build an AI
agent that answers questions about sample data in MongoDB.

Specifically, the agent uses the integration to implement 
:ref:`agentic RAG <agentic-rag>` and :ref:`agent memory <avs-agent-memory>`.
It uses semantic search and full-text search tools to retrieve relevant
information and answer questions about the data. It also implements
both short and long-term memory using MongoDB by storing
conversation history and important interactions in separate 
collections.

.. cta-banner::
   :url: https://github.com/mongodb/docs-notebooks/blob/main/ai-integrations/langgraph.ipynb
   :icon: Code

   The code on this page builds a complete sample application.
   You can also work through the code as a
   :github:`Python notebook <mongodb/docs-notebooks/blob/main/ai-integrations/langgraph.ipynb>`
   if you prefer to learn step-by-step.

Prerequisites
-------------

To complete this tutorial, you must have the following:

.. include:: /includes/avs/shared/avs-python-voyage-openai-prerequisites-without-notebook.rst

.. note::

   .. include:: /includes/ai-integrations/langchain/note-python-version-langchain-voyageai.rst

Set Up the Environment
----------------------

To set up the environment, complete the following steps:

.. include:: /includes/ai-integrations/langgraph/python/set-up-environment.rst

Use MongoDB as a Vector Database
--------------------------------

To configure MongoDB as a vector database
for storage and retrieval, complete the following steps:

.. include:: /includes/ai-integrations/langgraph/python/steps-vector-database.rst

Define Search Tools
-------------------

Create a ``search_tools.py`` file in your project.
In this file, you define the search tools that the agent
uses to perform :ref:`agentic RAG <agentic-rag>`.

.. collapsible::
   :heading: search_tools.py
   :sub_heading: Copy and paste the following code into your search_tools.py file.
   :expanded: false

   - ``plot_search``: This tool uses the vector store object as a `retriever 
     <https://python.langchain.com/docs/how_to/vectorstore_retriever/>`__.
     Under the hood, the retriever runs an {+avs+} query 
     to retrieve semantically similar documents. The tool then
     returns the titles and plots of the retrieved movie documents.
   
   - ``title_search``: This tool uses the :ref:`full-text search retriever
     <langchain-fts-retriever>` to retrieve movie documents that
     match the specified movie title. Then, the tool returns the
     plot of the specified movie.
      
   .. literalinclude:: /includes/ai-integrations/langgraph/python/search_tools.py
      :language: python
      :copyable:    

.. note:: 

   You can define any tool that you need to perform a 
   specific task. You can also define tools for other retrieval 
   methods, such as :ref:`hybrid search <langchain-hybrid-search>` 
   or :ref:`parent-document retrieval <langchain-parent-document>`. 

.. _langgraph-long-term-memory:

Define Memory Tools
-------------------

Create a ``memory_tools.py`` file in your project.
In this file, you define the tools that the agent
can use to store and retrieve important interactions
across sessions to implement :ref:`long-term memory 
<avs-agent-memory>`.
    
.. collapsible::
   :heading: memory_tools.py
   :sub_heading: Copy and paste the following code into your memory_tools.py file.
   :expanded: false

   - ``store_memory``: This tool uses the :ref:`LangGraph MongoDB store <langgraph-mongodb-store>`
     to store important interactions in a MongoDB collection.

   - ``retrieve_memory``: This tool uses the LangGraph MongoDB store to 
     retrieve relevant interactions based on the query by using 
     semantic search.

   .. literalinclude:: /includes/ai-integrations/langgraph/python/memory_tools.py
      :language: python
      :copyable:        

.. _langgraph-short-term-memory:

Build the Agent with Persistence
--------------------------------

Create a ``agent.py`` file in your project.
In this file, you build the `graph <https://langchain-ai.github.io/langgraph/concepts/low_level/#graphs>`__
that orchestrates the agent's workflow. This agent uses 
the :ref:`MongoDB Checkpointer <mongodb-checkpointer-python>` 
component to implement :ref:`short-term memory 
<avs-agent-memory>`, allowing for
multiple concurrent conversations with separate histories.

The agent uses the following workflow to respond to queries:

1. **Start**: The agent receives a user query.
2. **Agent Node**: The tool-bound LLM analyzes the query and determines if tools are needed.
3. **Tools Node** (if needed): Executes the appropriate search or memory tools.
4. **End**: The LLM generates a final response using the output from the tools.

.. figure:: /images/avs/langgraph-agent-workflow.svg
   :alt: Diagram that shows the workflow of the LangGraph-MongoDB agent.
   :figwidth: 500px

.. collapsible::
   :heading: agent.py
   :sub_heading: Copy and paste the following code into your agent.py file.
   :expanded: false

   The agent implementation consists of several components:

   - ``LangGraphAgent``: Main agent class that orchestrates the workflow
   - ``build_graph``: Constructs the LangGraph workflow and configures the 
     ``MongoDBSaver`` checkpointer for short-term memory persistence
   - ``agent_node``: Main decision-maker that processes messages and determines tool usage
   - ``tools_node``: Executes requested tools and returns results
   - ``route_tools``: Conditional routing function that determines workflow direction
   - ``execute``: Main entry point that accepts a ``thread_id`` parameter 
     for conversation thread tracking

   .. literalinclude:: /includes/ai-integrations/langgraph/python/agent.py
      :emphasize-lines: 67-69
      :language: python
      :copyable:

.. collapsible::
   :heading: About the Workflow
   :sub_heading: Expand this section for details about the LangGraph components used in the agent.
   :expanded: false

   This graph includes the following key components:

   - `Graph State <https://langchain-ai.github.io/langgraph/concepts/low_level/#graphs>`__:
     maintains shared data throughout the workflow, tracking the agent's `messages 
     <https://langchain-ai.github.io/langgraph/concepts/low_level/#working-with-messages-in-graph-state>`__
     including user queries, |llm| responses, and tool call results.

   - `Nodes <https://langchain-ai.github.io/langgraph/concepts/low_level/#nodes>`__:
     
     - **Agent node**: Processes messages, invokes the LLM, and updates state with |llm| responses
     - **Tools node**: Processes tool calls and updates conversation history with results

   - `Edges <https://langchain-ai.github.io/langgraph/concepts/low_level/#edges>`__, which connect nodes:
     
     - `Normal edges <https://langchain-ai.github.io/langgraph/concepts/low_level/#normal-edges>`__: Route from start to agent node and agent to tools node
     - `Conditional edge <https://langchain-ai.github.io/langgraph/concepts/low_level/#conditional-edges>`__: Routes conditionally depending on whether tools are needed

   - `Persistence <https://langchain-ai.github.io/langgraph/concepts/persistence/>`__:
     Uses the ``MongoDBSaver`` checkpointer to save conversation state to specific threads,
     enabling short-term memory across sessions. You can find the thread data in the 
     ``checkpoints`` and ``checkpoint_writes`` collections.

.. tip::
   
   To learn more about persistence, short-term memory, and the MongoDB checkpointer, 
   see the following resources:

   - `MongoDB Checkpointer Documentation <https://langchain-ai.github.io/langgraph/how-tos/persistence_mongodb/>`__
   - `API reference <https://langchain-mongodb.readthedocs.io/en/latest/langgraph_checkpoint_mongodb/api_docs.html>`__

Run the Agent
-------------

Finally, create a file named ``main.py`` in your project. This file
runs the agent and allows you to interact with it. 

.. collapsible::
   :heading: main.py
   :sub_heading: Copy and paste the following code into your main.py file.
   :expanded: false

   .. literalinclude:: /includes/ai-integrations/langgraph/python/main.py
      :language: python
      :copyable:      

Save your project, then run the following command. When you run the agent:

- The agent initializes the vector store and creates the indexes if 
  they don't already exist.
- You can enter a session ID to start a new session or continue an existing session.
  Each session is persisted and you can always resume a previous conversation.
- Ask questions about movies. The agent generates a response based on your tools and 
  previous interactions.

The following output demonstrates a sample interaction:

.. io-code-block::

   .. input:: 
      :language: shell

      python main.py

   .. output::
      :language: none
      :emphasize-lines: 9, 19, 26, 36, 44

      Creating vector search index...
      Vector search index created successfully!
      Creating search index...
      Search index created successfully!
      Enter a session ID: 123

      Ask me about movies! Type 'quit' to exit.

      Your query: What are some movies that take place in the ocean?
      ðŸ”§ Agent chose to use tool(s): plot_search
         â†’ Executing plot_search

      Answer: Here are some movies that take place in the ocean:

      1. **20,000 Leagues Under the Sea** - A marine biologist, his daughter, and a mysterious Captain Nemo explore the ocean aboard an incredible submarine.
      2. **Deep Rising** - A group of armed hijackers board a luxury ocean liner in the South Pacific Ocean, only to fight man-eating, tentacled sea creatures.
      ... (truncated)

      Your query: What is the plot of the Titanic?
      ðŸ”§ Agent chose to use tool(s): title_search
         â†’ Executing title_search

      Answer: The plot of *Titanic* involves the romantic entanglements of two couples aboard the doomed ship's maiden voyage
      ... (truncated)

      Your query: What movies are like the movie I just mentioned?
      ðŸ”§ Agent chose to use tool(s): plot_search
         â†’ Executing plot_search

      Answer: Here are some movies similar to *Titanic*:

      1. **The Poseidon Adventure** - A group of passengers struggles to survive when their ocean liner capsizes at sea.
      2. **Pearl Harbor** - Focused on romance and friendship amidst the backdrop of a historical tragedy, following two best friends and their love lives during wartime.
      ... (truncated)

      Your query: I don't like sad movies.
      ðŸ”§ Agent chose to use tool(s): save_memory
         â†’ Executing save_memory

      Answer: Got itâ€”I'll keep that in mind. Let me know if you'd like recommendations that focus more on uplifting or happy themes!

      (In different session)
      Enter a session ID: 456
      Your query: Recommend me a movie based on what you know about me.
      ðŸ”§ Agent chose to use tool(s): retrieve_memories
         â†’ Executing retrieve_memories

      Answer: Based on what I know about youâ€”you don't like sad moviesâ€”I'd recommend a fun, uplifting, or action-packed film. Would you be interested in a comedy, adventure, or family-friendly movie?

      Your query: Sure!
      ðŸ”§ Agent chose to use tool(s): plot_search, plot_search, plot_search
         â†’ Executing plot_search
         â†’ Executing plot_search
         â†’ Executing plot_search

      Answer: Here are some movie recommendations from various uplifting genres that suit your preferences:

      ### Comedy:
      1. **Showtime** (2002): A spoof of buddy cop movies where two very different cops are forced to team up on a new reality-based TV cop show. It's packed with laughs and action!
      2. **The Big Bus** (1976): A hilarious disaster film parody featuring a nuclear-powered bus going nonstop from New York to Denver, plagued by absurd disasters.

      ### Adventure:
      1. **Journey to the Center of the Earth** (2008): A scientist, his nephew, and their mountain guide discover a fantastic and dangerous lost world at the earth's core.
      2. **Jason and the Argonauts** (1963): One of the most legendary adventures in mythology, brought to life in this epic saga of good versus evil.

      ### Family-Friendly:
      1. **The Incredibles** (2004): A family of undercover superheroes is forced into action to save the world while living in quiet suburban life.
      2. **Mary Poppins** (1964): A magical nanny brings joy and transformation to a cold banker's unhappy family.
      3. **Chitty Chitty Bang Bang** (1968): A whimsical adventure featuring an inventor, his magical car, and a rescue mission filled with fantasy.
