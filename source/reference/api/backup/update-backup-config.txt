===============================
Update One Backup Configuration
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/fact-groups-projects-synonyms.rst

.. include:: /includes/api/base-api-uri.rst

Resource
--------

.. code-block:: http

   PATCH /groups/{projectId}/backupConfigs/{clusterId}

Request Parameters
------------------

Request Path Parameters
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :widths: 20 14 11 55
   :header-rows: 1
   :stub-columns: 1

   * - Path Parameter
     - Type
     - Necessity
     - Description

   * - projectId
     - string
     - Required
     - Unique 24-hexadecimal digit string that identifies the 
       project that holds the cluster with the backup configuration you 
       want to change.

   * - clusterId
     - string
     - Required
     - Unique 24-hexadecimal digit string that identifies the cluster 
       whose backup configuration you want to change.

Request Query Parameters
~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/api/no-query-single-parameters.rst

Request Body Parameters
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :widths: 20 14 11 55
   :header-rows: 1
   :stub-columns: 1

   * - Name
     - Type
     - Necessity
     - Description

   * - authMechanismName
     - string
     - Conditional
     - Authentication mechanism needed to connect to the sync source
       database. |mms| requires this parameter if the sync store uses authentication. |mms| accepts:

       .. include:: /includes/api/lists/authMechanismName-values.rst

   * - encryptionEnabled
     - boolean
     - Optional
     - Flag that indicates if encryption is enabled for the backup
       configuration. You must include the **syncSource** parameter
       when enabling encryption for a backup configuration. For
       existing backups in a project, enabling encryption requires an
       :opsmgr:`initial sync </reference/glossary/#std-term-initial-sync>` to recreate the backups’ head databases.

       .. include:: /includes/head-database-deprecated-encrypt.rst

   * - excludedNamespaces
     - array of strings
     - Conditional
     - List of database and collection names to *omit* from the backup.
       Each string represents one namespace. Namespaces use one of the 
       following formats: 

       - **{database}** 
       - **{database}.{collection}**.

       |mms| accepts this parameter for backup jobs running MongoDB
       |fcv-link| 4.0 or earlier. |mms| ignores this parameter when
       backing up MongoDB databases running |fcv| 4.2 or later.

       This parameter must meet the following conditions:

       - |mms| accepts either this parameter or **includedNamespaces**, not
         both.

       - |mms| requires the new full list of excluded namespaces,
         including any already found in the array.

         - If your new list *removes* any namespaces from the existing
           array, set the **syncSource** parameter.

           - Removing an excluded namespace requires a full resync.
           - Without the **syncSource** parameter, the request fails.

         - If your new list only *adds* to the existing array, don't
           set **syncSource**.

   * - includedNamespaces
     - array of strings
     - Conditional
     - List of database and collection names to *include* from the
       backup. Each string represents one namespace. Namespaces use one 
       of the following formats: 
       
       - **{database}**
       - **{database}.{collection}**.

       |mms| accepts this parameter for backup jobs running MongoDB
       |fcv-link| 4.0 or earlier. |mms| ignores this parameter when
       backing up MongoDB databases running |fcv| 4.2 or later.

       This parameter must meet the following conditions:

       - |mms| accepts either this parameter or **excludedNamespaces**, not
         both.

       - |mms| requires the new full list of included namespaces,
         including any already found in the array.

         - If the new list adds any namespaces from existing array,
           set the **syncSource** parameter.

           - Adding an included namespace requires a full resync.
           - Without the **syncSource** parameter, the request fails.

         - If the new list only removes namespaces from the existing
           array, don't set **syncSource**.

   * - password
     - string
     - Conditional
     - Password to use to connect to the sync source database. |mms|
       requires this parameter when the sync store |mongod| instances
       require clients to authenticate.

   * - preferredMember
     - string
     - Optional
     - .. include:: /includes/fact-preferred-member.rst

   * - provisioned
     - boolean
     - Conditional
     - Flag that indicates if |mms| has provisioned the resources
       needed to store a backup.

   * - sslEnabled
     - boolean
     - Optional
     - Flag that indicates if |tls| is enabled for the sync source
       database.

   * - statusName
     - string
     - Optional
     - Current (or desired) status of the backup configuration. |mms|
       accepts:

       - **INACTIVE**
       - **PROVISIONING**
       - **STARTED**
       - **STOPPED**
       - **TERMINATING**

   * - storageEngineName
     - string
     - Optional
     - Storage engine used for the backup. |mms| accepts:

       - **MEMORY_MAPPED**
       - **WIRED_TIGER**

   * - syncSource
     - string
     - Conditional
     - |mongod| instance from which you retrieve backup data. |mms|
       accepts either a specific hostname or one of: **PRIMARY** and
       **SECONDARY**.

       |mms| requires this parameter if
       **"storageEngineName" : "WIRED_TIGER"**.

   * - username
     - string
     - Conditional
     - Name of the user to use to connect to the sync source database.
       |mms| requires this parameter when the sync store |mongod|
       instances require clients to authenticate.

       Send this parameter to |mms| when updating the backup
       configuration for a replica set or sharded cluster that |mms|
       *doesn't* manage.

   * - snapshotStore
     - object
     - optional
     - Object that specifies the snapshot store to transition to. This 
       object contains the snapshot store type and the ID of the S3 
       bucket (S3 blockstore). Existing snapshots remain in the 
       original store until they expire based on your configured 
       retention policy. You can also transition between S3-compatible 
       snapshot stores from the :ref:`Jobs page <transition-s3>`.

   * - snapshotStore.snapshotStoreType
     - string
     - conditional
     - String that identifies the snapshot store type. Currently, only 
       an S3 bucket (S3 blockstore) is supported. Value must be 
       ``s3blockstore``. If you provide the ``snapshotStore`` object, 
       you must specify both the ``snapshotStoreType`` and 
       ``snapshotStoreId`` parameters.

   * - snapshotStore.snapshotStoreId
     - string
     - conditional
     - String that identifies the S3 blockstore to transition to. New 
       snapshots will be stored in this destination S3 blockstore.
       Existing snapshots remain in the original store until they 
       expire based on your configured retention policy. If you provide 
       the ``snapshotStore`` object, you must specify both the 
       ``snapshotStoreType`` and ``snapshotStoreId`` parameters.

Response
--------

.. list-table::
   :widths: 20 14 66
   :header-rows: 1
   :stub-columns: 1

   * - Name
     - Type
     - Description

   * - authMechanismName
     - string
     - Name of the authentication mechanism to use when connecting to
       the sync source database. |mms| returns this parameter if the
       sync store uses authentication.

   * - clusterId
     - string
     - Unique identifier of the cluster to which this backup
       configuration applies.

   * - encryptionEnabled
     - boolean
     - Flag that indicates if encryption is enabled for the backup
       configuration. You must include the **syncSource** field when
       enabling encryption for a backup configuration. For existing
       backups in a project, enabling encryption requires an 
       :opsmgr:`initial sync </reference/glossary/#std-term-initial-sync>` to recreate the backups’ head databases.

       .. include:: /includes/head-database-deprecated-encrypt.rst

   * - excludedNamespaces
     - array of strings
     - List of database names and collection names to omit from
       the backup. Each string is a namespace in the form of
       **{database}** or **{database}.{collection}**.

   * - includedNamespaces
     - array of strings
     - List of database names and collection names to include in
       the backup. Each string is a namespace in the form of
       **{database}** or **{database}.{collection}**.

   * - preferredMember
     - string
     - .. include:: /includes/fact-preferred-member.rst

   * - projectId
     - string
     - Unique identifier of the project that owns this backup
       configuration.

   * - provisioned
     - boolean
     - Flag that indicates if |mms| has provisioned the resources
       needed to store a backup. |mms| returns this parameter when the
       amount of data to be backed up exceeds a certain threshold.

   * - sslEnabled
     - boolean
     - Flag that indicates if |tls| is enabled for the sync source
       database.

   * - statusName
     - string
     - Current status of the backup configuration.

   * - storageEngineName
     - string
     - Storage engine used for the backup.

   * - snapshotStore
     - object
     - Object that specifies the snapshot store to transition to. This 
       object contains the snapshot store type and the ID of the S3 
       bucket (S3 blockstore). Existing snapshots remain in the 
       original store until they expire based on your configured 
       retention policy. You can also transition between S3-compatible 
       snapshot stores from the :ref:`Jobs page <transition-s3>`.

   * - snapshotStore.snapshotStoreType
     - string
     - String that identifies the snapshot store type. Currently, only 
       an S3 bucket (S3 blockstore) is supported. Value must be 
       ``s3blockstore``. If you specify the ``snapshotStore`` object, 
       you must specify both the ``snapshotStoreType`` and 
       ``snapshotStoreId`` parameters.

   * - snapshotStore.snapshotStoreId
     - string
     - String that identifies the S3 blockstore to transition to. New 
       snapshots will be stored in this destination S3 blockstore.
       Existing snapshots remain in the original store until they 
       expire based on your configured retention policy. If you provide 
       the ``snapshotStore`` object, you must specify both the 
       ``snapshotStoreType`` and ``snapshotStoreId`` parameters.

Example Request
---------------

.. tabs::
  
   .. tab:: Basic Request
      :tabid: basic  

      .. code-block:: sh
         :linenos:
         :emphasize-lines: 6-10

         curl --user "{publicKey}:{privateKey}" --digest \
              --header "Accept: application/json" \
              --header "Content-Type: application/json" \
              --include --request PATCH "https://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}/backupConfigs/{clusterId}" \
              --data '
                {
                  "statusName": "STARTED",
                  "storageEngineName": "WIRED_TIGER",
                  "syncSource": "primary"
                }'

   .. tab:: Preferred Member Request
      :tabid: members  

      .. include:: /includes/fact-default-member-for-backup.rst

      The following request sets the preferred member.

      .. code-block:: sh
         :linenos:
         :emphasize-lines: 6-8

         curl --user "{publicKey}:{privateKey}" --digest \
              --header "Accept: application/json" \
              --header "Content-Type: application/json" \
              --include --request PATCH "https://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}/backupConfigs/{clusterId}" \
              --data '
                {
                  "preferredMember":"{HOSTNAME}:{PORT}"
                }'

   .. tab:: S3 Blockstore Migration Request
      :tabid: s3-migration

      .. code-block:: sh
         :linenos:
         :emphasize-lines: 7-9
      
         curl --user "grdktmix:c030563c-6b65-4568-88c0-82fd8c91ec07" \   
              --digest \
              --header "Accept: application/json" \
              --header "Content-Type: application/json" \
              --include --request PATCH "http://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}/backupConfigs/{clusterId}" \
              --data '
                {
                  "snapshotStore": {"snapshotStoreId":"after", "snapshotStoreType":"s3blockstore"}
                }' 

Example Response
----------------

Response Header
~~~~~~~~~~~~~~~

.. include:: /includes/api/api-headers/401.rst

.. include:: /includes/api/api-headers/200.rst

Response Body
~~~~~~~~~~~~~

.. tabs::
   :hidden:

   .. tab:: Basic Response
      :tabid: basic

      .. code-block:: json
         :linenos:
         :emphasize-lines: 21-22

         {
           "authMechanismName" : "NONE",
           "clusterId" : "{clusterId}",
           "encryptionEnabled" : false,
           "excludedNamespaces" : [ ],
           "groupId" : "{projectId}",
           "links" : [ {
             "href" : "http://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}/backupConfigs/{clusterId}",
             "rel" : "self"
            }, {
             "href" : "http://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}/clusters/{clusterId}",
             "rel" : "http://mms.mongodb.com/cluster"
           }, {
             "href" : "http://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}",
             "rel" : "http://mms.mongodb.com/group"
           }, {
             "href" : "http://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}/backupConfigs/{clusterId}/snapshotSchedule",
             "rel" : "http://mms.mongodb.com/snapshotSchedule"
           } ],
           "sslEnabled" : false,
           "statusName" : "STARTED",
           "storageEngineName" : "WIRED_TIGER"
         }

   .. tab:: Preferred Member Response
      :tabid: members

      .. include:: /includes/fact-default-member-for-backup.rst

      The following response includes preferred member.

      .. code-block:: json
         :linenos:
         :emphasize-lines: 23

         {
           "authMechanismName" : "NONE",
           "clusterId" : "{clusterId}",
           "encryptionEnabled" : false,
           "excludedNamespaces" : [ ],
           "groupId" : "{projectId}",
           "links" : [ {
             "href" : "http://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}/backupConfigs/{clusterId}",
             "rel" : "self"
            }, {
             "href" : "http://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}/clusters/{clusterId}",
             "rel" : "http://mms.mongodb.com/cluster"
           }, {
             "href" : "http://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}",
             "rel" : "http://mms.mongodb.com/group"
           }, {
             "href" : "http://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}/backupConfigs/{clusterId}/snapshotSchedule",
             "rel" : "http://mms.mongodb.com/snapshotSchedule"
           } ],
           "sslEnabled" : false,
           "statusName" : "STARTED",
           "storageEngineName" : "WIRED_TIGER",
           "preferredMember":"{HOSTNAME}:{PORT}"
         }

   .. tab:: S3 Blockstore Migration Response
      :tabid: s3-migration

      .. code-block:: json
         :linenos:
         :emphasize-lines: 23 - 26

         {
           "authMechanismName" : "NONE",
           "clusterId" : "{clusterId}",
           "encryptionEnabled" : false,
           "excludedNamespaces" : [ ],
           "groupId" : "{projectId}",
           "links" : [ {
             "href" : "http://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}/backupConfigs/{clusterId}",
             "rel" : "self"
            }, {
             "href" : "http://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}/clusters/{clusterId}",
             "rel" : "http://mms.mongodb.com/cluster"
           }, {
             "href" : "http://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}",
             "rel" : "http://mms.mongodb.com/group"
           }, {
             "href" : "http://{+opsmgr-url+}/api/public/v1.0/groups/{projectId}/backupConfigs/{clusterId}/snapshotSchedule",
             "rel" : "http://mms.mongodb.com/snapshotSchedule"
           } ],
           "sslEnabled" : false,
           "statusName" : "STARTED",
           "storageEngineName" : "WIRED_TIGER",
           "snapshotStore": {
             "snapshotStoreType": "s3blockstore",
             "snapshotStoreId": "your-snapshot-store-id"
           }
         }
