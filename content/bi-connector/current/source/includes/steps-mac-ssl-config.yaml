title: Create a Certificates Directory.
ref: create-certs-dir
level: 4
stepnum: 1
content: |
  Create a directory to hold your certificates. This tutorial uses
  ``/opt/certs``. Your certificate directory must be readable by
  the system user which runs the |mongod| and
  |mongosqld| programs.

  .. code-block:: sh

     mkdir /opt/certs
     cd /opt/certs
---
title: Generate a Self-Signed Certificate Authority.
ref: gen-private-key
level: 4
stepnum: 2
content: |
  a. The following command generates and outputs a private key to
     ``mdbprivate.key``.

     .. code-block:: sh

        openssl genrsa -out /opt/certs/mdbprivate.key -aes256 \
                       -passout pass:password

  b. The following command generates and outputs a certificate
     authority file to ``mdbca.crt``.

     .. include:: /includes/fact-common-name.rst

     .. code-block:: sh

        openssl req -x509 -new -key /opt/certs/mdbprivate.key \
                    -days 1000 -out /opt/certs/mdbca.crt \
                    -passin pass:password

  We now have two files: The ``mdbca.crt`` certificate authority file,
  and the ``mdbprivate.key`` key used to sign that request.
---
title: Generate a PEM Certificate for the MongoDB Server.
ref: gen-mongodb-key
level: 4
stepnum: 3
content: |
  The following command generates a key for the |mongod| process to use
  and a Certificate Signing Request (CSR). The ``Common Name`` response
  must be the Fully Qualified Domain Name (|fqdn|) of the host where
  your |mongod| instance runs such as ``www.example.com``. To determine
  the |fqdn| of your server, use ``hostname -f`` at the command prompt.

  You may be prompted to enter a challenge password for the ``Extra
  Attribute`` element. For the purposes of this tutorial, you can leave
  this element blank.

  .. code-block:: sh

     openssl req -new -nodes -newkey rsa:2048 -keyout /opt/certs/mdb.key \
     -out /opt/certs/mdb.csr

---
title: Sign the MongoDB CSR.
ref: sign-mongodb-csr
level: 4
stepnum: 4
content: |
  .. code-block:: sh

      openssl x509 -CA /opt/certs/mdbca.crt
                   -CAkey /opt/certs/mdbprivate.key \
                   -CAcreateserial -req -days 1000 \
                   -in /opt/certs/mdb.csr -out /opt/certs/mdb.crt \
                   -passin pass:password
---
title: Create a PEM file for the MongoDB server.
ref: create-pem-file
level: 4
stepnum: 5
content: |
  A ``.pem`` file consists of a key and a certificate concatenated
  together. To create a ``.pem`` file for your MongoDB instance to use,
  enter the following command in the ``/opt/certs/`` directory:

  .. code-block:: sh

     cat /opt/certs/mdb.key /opt/certs/mdb.crt > /opt/certs/mdb.pem

  You should now have the following files in your certificates
  directory:

  .. code-block:: sh
     :copyable: false

     mdb.crt
     mdb.csr
     mdb.key
     mdb.pem
     mdbca.crt
     mdbprivate.key

  If any are missing, go back and review the previous steps, checking
  for errors.
---
title: Update ``mongod`` configuration file.
ref: update-conf
level: 4
stepnum: 6
content: |

  To configure |mongod| to require |tls| for incoming connections,
  modify your configuration file as follows. Your values may vary,
  depending on where you created your |tls| files.

  .. list-table::
     :header-rows: 1
     :widths: 50 50

     * - Option
       - Value

     * - :setting:`net.ssl.mode <net.tls.mode>`
       - ``requireSSL``

     * - :setting:`net.ssl.PEMKeyFile <net.tls.certificateKeyFile>`
       - ``/opt/certs/mdb.pem``

     * - :setting:`net.ssl.CAFile <net.tls.CAFile>`
       - ``/opt/certs/mdbca.crt``

     * - :setting:`net.ssl.clusterFile <net.tls.clusterFile>`
       - ``/opt/certs/mdb.pem``

     * - ``security.clusterAuthmode``
       - ``x509``

  .. example::

     The following configuration file contains directives for |tls|
     connections and :manual:`x.509 </core/security-x.509>`
     authentication.

     Your configuration file may require additional or different options.

     .. code-block:: sh

        systemLog:
           destination: file
           path: '/data/mongod.log'
           logAppend: true
        processManagement:
           fork: true
           pidFilePath: '/data/mongod.pid'
        net:
           bindIp: localhost
           port: 27017
           ssl:
              mode: requireSSL
              PEMKeyFile: '/opt/certs/mdb.pem'
              CAFile: '/opt/certs/mdbca.crt'
              clusterFile: '/opt/certs/mdb.pem'
        security:
           clusterAuthMode: x509
        storage:
           dbPath: '/data'

  If you prefer to start |mongod| with command-line options instead of
  a configuration file, see |mongosqld| for equivalent options.

---
title: Restart your ``mongod`` server.
ref: restart-server
level: 4
stepnum: 7
content: |
  .. code-block:: sh

     mongod --config /path/to/mongod.conf
---
title: Test your connection with the ``mongo`` shell.
ref: test-connection
level: 4
stepnum: 8
content: |
  Connect to your server with the |mongo| shell to test your |tls|
  connection. Your |mongo| command needs the following |tls| options:

  .. list-table::
     :header-rows: 1
     :widths: 40 60

     * - Option
       - Value

     * - :manual:`--tls </reference/program/mongod/#std-option-mongod.--tlsMode>`
       - none

     * - :manual:`--tlsCAFile </reference/program/mongod/#std-option-mongod.--tlsCAFile>`
       - ``/opt/certs/mdbca.crt`` (file generated in step 2.2)

     * - :manual:`--tlsCertificateKeyFile </reference/program/mongod/#std-option-mongod.--tlsCertificateKeyFile>`
       - ``/opt/certs/mdb.pem`` (file generated in step 5)

  .. code-block:: sh

     mongo --tls --host <step3-common-name> \
           --tlsCAFile /opt/certs/mdbca.crt \
           --tlsPEMKeyFile /opt/certs/mdb.pem

  Edit your options appropriately.
---
title: Create a key and a |csr| for {+bi-short+}.
ref: create-key-msqld
level: 4
stepnum: 9
content: |
  The ``Common Name`` entry for this |csr| should match the |fqdn| of
  the host where you run |mongosqld|. To determine the |fqdn| of your
  host, use ``hostname -f`` at the command prompt.

  You may be prompted to enter a challenge password for the ``Extra
  Attribute`` element. For the purposes of this tutorial, you can leave
  this element blank.

  .. note::

     The ``Common Name`` entry for this |csr| must be different from the
     ``Common Name`` entry for the first |csr| you created, in step 2.

  .. code-block:: sh

     openssl req -new -nodes -newkey rsa:2048 \
                 -keyout /opt/certs/bi.key \
                 -out /opt/certs/bi.csr
---
title: Sign the {+bi-short+} certificate.
ref: sign-msqld-cert
level: 4
stepnum: 10
content: |

  .. code-block:: sh

     openssl x509 -CA /opt/certs/mdbca.crt \
                  -CAkey /opt/certs/mdbprivate.key \
                  -CAcreateserial -req -days 1000 \
                  -in /opt/certs/bi.csr -out /opt/certs/bi.crt \
                  -passin pass:password

---
title: Create a {+bi-short+} PEM file.
ref: create-msqld-pem
level: 4
stepnum: 11
content: |

  .. code-block:: sh

     cat /opt/certs/bi.key /opt/certs/bi.crt > /opt/certs/bi.pem

---
title: Start ``mongosqld``.
ref: start-msqld
level: 4
stepnum: 12
content: |
  Your |mongosqld| configuration file requires several
  |tls|\-specific options. Your values may vary, depending on where
  you created your |tls| files.

  .. list-table::
     :header-rows: 1
     :widths: 50 50

     * - Option
       - Value

     * - :option:`mongodb.net.ssl.enabled <mongosqld --mongo-ssl>`
       - ``true``

     * - :option:`mongodb.net.ssl.PEMKeyFile <mongosqld --mongo-sslPEMKeyFile>`
       - ``/opt/certs/mdb.pem``

     * - :option:`mongodb.net.sslCAFile <mongosqld --mongo-sslCAFile>`
       - ``/opt/certs/mdbca.crt``

     * - :option:`net.ssl.mode <mongosqld --sslMode>`
       - ``requireSSL``

     * - :option:`net.ssl.PEMKeyFile <mongosqld --sslPEMKeyFile>`
       - ``/opt/certs/bi.pem``

     * - :option:`net.ssl.CAFile <mongosqld --sslCAFile>`
       - ``/opt/certs/mdbca.crt``

  .. example::

     The following :ref:`configuration file <config-format>` uses files
     located in the ``/opt/certs/`` directory. It specifies a username
     and password which correspond to a MongoDB user with sufficient
     :ref:`permissions <cached-sampling-user-permissions>` to run
     |mongosqld| and read from the ``test`` database.

     .. code-block:: yaml

        systemLog:
          logAppend: false
          path: './logs/mongosqld.log'
          verbosity: 2

        security:
          enabled: true

        mongodb:
          net:
            uri: <step9-common-name>
            auth:
              username: <username>
              password: <password>
            ssl:
              enabled: true
              PEMKeyFile: '/opt/certs/mdb.pem'
              CAFile: '/opt/certs/mdbca.crt'

        net:
          bindIp: localhost
          port: 3307
          ssl:
            mode: 'requireSSL'
            PEMKeyFile: '/opt/certs/bi.pem'
            CAFile: '/opt/certs/mdbca.crt'

        schema:
          sample:
            namespaces: 'test.*'

  Start |mongosqld| with the
  :option:`--config <mongosqld --config>` option to use a
  configuration file.

  .. code-block:: sh

     mongosqld --config /path/to/mongosqld.conf
---
title: Test with the MySQL shell
ref: test-mysql-shell
level: 4
stepnum: 13
content: |
  To connect to your ``mongosqld`` instance, start the MySQL shell with
  the following command line options.

  .. code-block:: sh

     mysql --ssl-mode REQUIRED --ssl-ca=/opt/certs/mdbca.crt \
           --enable-cleartext-plugin --port 3307 -u <username> -p
...
