===============
``mongoreplay``
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Synopsis
--------

.. versionadded:: 3.4

:binary:`~bin.mongoreplay` is a traffic capture and replay tool for MongoDB
that you can use to inspect and record commands sent to a MongoDB
instance, and then replay those commands back onto another host at a
later time.

:binary:`~bin.mongoreplay` can help you preview how your MongoDB deployment
will perform a production workload under a different environment,
such as with a different storage engine, on different hardware, or
with a different operating system configuration.
:binary:`~bin.mongoreplay` can also help reproduce and investigate an issue by
recording and replaying the operations that trigger the issue.
Finally, :binary:`~bin.mongoreplay` serves as a more flexible version of
the legacy ``mongosniff`` tool to help you investigate database activity.

.. include:: /includes/extracts/require-cmd-line-mongoreplay.rst

Required Access
---------------

:binary:`~bin.mongoreplay` requires access to the network interface that
the :toolcommand:`record` or :toolcommand:`monitor` commands will
listen on. You may need to run :binary:`~bin.mongoreplay` with root privileges
to access the network device.

:binary:`~bin.mongoreplay` will not work with MongoDB instances using an SSL connection.

.. warning::

   Only use root privileges when connecting to trusted sources.

If you are using :toolcommand:`play` to connect to a MongoDB deployment
that :doc:`enforces access control </core/authorization>`, you must
connect as a user with the required privileges to execute the
recorded operations. Include the user's credentials in the
:option:`--host <mongoreplay play --host>` MongoDB connection string.

Options
-------

.. binary:: mongoreplay

.. program:: mongoreplay

.. include:: /includes/option/option-mongoreplay-verbosity.rst

.. include:: /includes/option/option-mongoreplay-debug.rst

.. include:: /includes/option/option-mongoreplay-silent.rst

.. include:: /includes/option/option-mongoreplay-help.rst

Commands
--------

:binary:`~bin.mongoreplay` includes the following *commands* to record,
play back, and monitor MongoDB network traffic.

``record``
~~~~~~~~~~

:toolcommand:`record` produces a playback file based on
network traffic. :toolcommand:`record` supports collecting network
traffic directly or can
accept a `pcap file <https://en.wikipedia.org/wiki/Pcap>`_
to produce the playback file.
The playback file contains a list of all requests sent to the
:binary:`~bin.mongod` instance during the recording as well as all
responses transmitted to the client during the recording. The playback
file also records metadata for each request, such as the connection
identifier and timestamp.

The following prototype uses :binary:`~bin.mongoreplay` to record data
on the loopback network interface and creates a playback file
located at ``~/recordings/playback``.

.. code-block:: sh

   mongoreplay record -i eth0 -e "port 27017" -p ~/recordings/playback

Similarly, the following prototype uses :binary:`~bin.mongoreplay`
to produce a playback file from an existing pcap file:

.. code-block:: sh

   mongoreplay record -f traffic.pcap -p ~/recordings/playback

``record`` supports the following options:

.. binary:: mongoreplay record

.. toolcommand:: record

.. program:: mongoreplay record

.. include:: /includes/option/option-mongoreplay-record--f.rst

.. include:: /includes/option/option-mongoreplay-record--b.rst

.. include:: /includes/option/option-mongoreplay-record-expr.rst

.. include:: /includes/option/option-mongoreplay-record--i.rst

.. include:: /includes/option/option-mongoreplay-record-gzip.rst

.. include:: /includes/option/option-mongoreplay-record-playback-file.rst

.. see::

   :ref:`mongoreplay-use-record` for examples of using
   :binary:`~bin.mongoreplay` with the ``record`` command.

``play``
~~~~~~~~

:toolcommand:`play` replays a playback file created with
:toolcommand:`record` against a :binary:`~bin.mongod` instance.

The following prototype uses :binary:`~bin.mongoreplay` to replay the
``~/recordings/playback`` playback file to the :binary:`~bin.mongod` instance running on
``192.168.0.4:27018``:

.. code-block:: sh

   mongoreplay play -p ~/recordings/playback --report ~/reports/replay_stats.json --host mongodb://192.168.0.4:27018

``play`` supports the following options:

.. binary:: mongoreplay play

.. toolcommand:: play

.. program:: mongoreplay play

.. include:: /includes/option/option-mongoreplay-play-collect.rst

.. include:: /includes/option/option-mongoreplay-play-report.rst

.. include:: /includes/option/option-mongoreplay-play-no-truncate.rst

.. include:: /includes/option/option-mongoreplay-play-format.rst

.. include:: /includes/option/option-mongoreplay-play-no-colors.rst

.. include:: /includes/option/option-mongoreplay-play-playback-file.rst

.. include:: /includes/option/option-mongoreplay-play-speed.rst

.. include:: /includes/option/option-mongoreplay-play-host.rst

.. include:: /includes/option/option-mongoreplay-play-repeat.rst

.. include:: /includes/option/option-mongoreplay-play-queueTime.rst

.. include:: /includes/option/option-mongoreplay-play-no-preprocess.rst

.. include:: /includes/option/option-mongoreplay-play-gzip.rst

.. see::

   :ref:`mongoreplay-use-play` for examples of using
   :binary:`~bin.mongoreplay` with the :toolcommand:`play` command.

``monitor``
~~~~~~~~~~~

:toolcommand:`monitor` inspects live or pre-recorded
MongoDB network traffic.

The following prototype uses :binary:`~bin.mongoreplay` to produce a
JSON report based on the ``playback.bson`` playback file in the ``~/recordings`` directory:

.. code-block:: sh

   mongoreplay monitor --collect json --report ~/reports/monitor-report.json -p ~/recordings/playback.bson

``monitor`` supports the following options:

.. binary:: mongoreplay monitor

.. toolcommand:: monitor

.. program:: mongoreplay monitor

.. include:: /includes/option/option-mongoreplay-monitor-collect.rst

.. include:: /includes/option/option-mongoreplay-monitor-report.rst

.. include:: /includes/option/option-mongoreplay-monitor-no-truncate.rst

.. include:: /includes/option/option-mongoreplay-monitor-format.rst

.. include:: /includes/option/option-mongoreplay-monitor-no-colors.rst

.. include:: /includes/option/option-mongoreplay-monitor--f.rst

.. include:: /includes/option/option-mongoreplay-monitor--b.rst

.. include:: /includes/option/option-mongoreplay-monitor-expr.rst

.. include:: /includes/option/option-mongoreplay-monitor--i.rst

.. include:: /includes/option/option-mongoreplay-monitor-paired.rst

.. include:: /includes/option/option-mongoreplay-monitor-gzip.rst

.. include:: /includes/option/option-mongoreplay-monitor-playback-file.rst

.. see::

   :ref:`mongoreplay-use-monitor` for examples of using
   :binary:`~bin.mongoreplay` with the :toolcommand:`monitor` command.

.. _mongoreplay-report-format:

:binary:`~bin.mongoreplay` Report Format
----------------------------------------

:toolcommand:`monitor` and :toolcommand:`play` can produce
reports based on a playback file when run with the ``--report`` option.

Sample Record
~~~~~~~~~~~~~

The following is an example record from a JSON-formatted
:toolcommand:`monitor` report:

.. code-block:: json

   {
      "order": 57,
      "op": "op_command",
      "command": "aggregate",
      "ns": "example",
      "request_data": {
         "command_args": {
            "aggregate": "restaurants",
            "cursor": {},
            "pipeline": [{
               "$match": {
                  "borough": "Queens"
               }
            }, {
               "$group": {
                  "_id": "$cuisine",
                  "count": {
                     "$sum": 1.0
                  }
               }
            }]
         },
         "input_docs": [],
         "metadata": {}
      },
      "reply_data": null,
      "connection_num": 0,
      "seen": "2016-09-08T10:21:48.072329-04:00",
      "request_id": 53
   }

Fields
~~~~~~

:binary:`~bin.mongoreplay` reports can include the following fields:

.. describe:: order

   A monotonically increasing key indicating the order in which the
   operations were recorded and played back. This can be used to
   reconstruct the ordering of the series of operations executed on a
   connection, since the order in which they appear in the report file
   may not match the playback order.

.. describe:: op

   The type of operation represented by the request: i.e. "query",
   "insert", "command", "getmore".

.. describe:: command

   The name of the database command performed, such as ``isMaster`` or
   ``getLastError``. This field is left blank for operations that are not
   commands, such as queries and inserts.

.. describe:: ns

   The :term:`namespace` on which the request was executed.

.. describe:: request_data

   The payload of the operation.

   - Query operations: ``request_data`` contains the actual
     query that was issued.

   - Insert operations: ``request_data`` contains the documents
     being inserted.

   - Update operations: ``request_data`` contains the query
     selector and the update modifier.

.. describe:: reply_data

   The payload of the reply to the request.

.. describe:: nreturned

   The number of documents returned as a result of the operation.

.. describe:: played_at

   The time at which the :toolcommand:`play` command executed
   the operation.

.. describe:: play_at

   The time at which the operation was supposed to be executed by
   the :toolcommand:`play` command.

.. describe:: playbacklag_us

   The difference in microseconds in time between ``played_at``
   and ``play_at``. Higher values generally indicate that the
   target server is not able to keep up with the rate at which requests
   need to be executed according to the playback file.

.. describe:: connection_num

   A key that identifies the connection on which the request was
   executed. All requests/replies that executed on the same connection
   have the same value for ``connection_num``.

   The ``connection_num`` value
   does *not* match the connection ID logged on the server side.

.. describe:: latency_us

   The time difference in microseconds between when the request was
   sent by the client and when a response from the server was received.

.. describe:: errors

   Lists any errors returned from the server.

.. describe:: msg

   Lists the error message returned from the server.

.. describe:: seen

   The time at which the operation was originally captured.

.. describe:: request_id

   The ID of the MongoDB operation. The ``request_id`` for a request
   operation is the same as the ``response_id`` for the corresponding
   reply.

Output Formatting with ``--format``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:toolcommand:`monitor` and :toolcommand:`play` output to either the
terminal or, when run with ``--report`` (i.e. :option:`monitor --report
<mongoreplay monitor --report>` or :option:`play --report <mongoreplay
play --report>`), to a file.

Use the ``--collect`` (:option:`monitor --collect <mongoreplay monitor
--collect>` or :option:`play --collect <mongoreplay play --collect>`)
option to specify the format of the output:

- ``--collect json`` produces JSON output,

- ``--collect format`` outputs the data based on the formatting
  specified by the ``--format`` option for :option:`monitor
  <mongoreplay monitor --format>` and :option:`play <mongoreplay
  play --format>` .

Use
---

.. _mongoreplay-use-record:

Use :toolcommand:`record`
~~~~~~~~~~~~~~~~~~~~~~~~~

Capture TCP data with ``record``
````````````````````````````````

To create a recording of traffic, use the :toolcommand:`record` command. The
following operation records traffic through port ``27017`` on the
``eth0`` network interface and writes the captured traffic to
``~/recordings/recording.bson``:

.. code-block:: sh

   mongoreplay record -i eth0 -e "port 27017" -p ~/recordings/recording.bson

The produced playback file contains everything needed to re-execute
the workload on another system.

Record a Playback File from Existing pcap Data
``````````````````````````````````````````````

If you do not wish to use :binary:`~bin.mongoreplay` to capture traffic, you
can capture traffic using a utility such as ``tcpdump`` and then create a
:binary:`~bin.mongoreplay` recording from the static pcap file.

.. warning::

   Only use root privileges when connecting to a trusted source.

The following operation uses ``tcpdump`` to capture traffic through
port ``27017`` on the ``eth0`` network interface and writes the captured
data to a pcap file called ``traffic.pcap``:

.. code-block:: sh

   sudo tcpdump -B $((100*1024)) -i eth0 -n "port 27017" -w traffic.pcap

To create the :binary:`~bin.mongoreplay` playback file, you can use
:toolcommand:`record` with the :option:`-f <mongoreplay record -f>`
option to specify the pcap file from which to create the playback file,
as in the following:

.. code-block:: sh

   mongoreplay record -f traffic.pcap -p ~/recordings/playback.bson

The produced playback file contains everything needed to re-execute
the workload on another system.

.. _mongoreplay-use-play:

Use :toolcommand:`play`
~~~~~~~~~~~~~~~~~~~~~~~

Execute a Playback File Against a Target Host
`````````````````````````````````````````````

:toolcommand:`play` takes a playback file and executes the
recorded operations against the ``mongodb://example.com:27018`` host.
Since the :binary:`~bin.mongod` enforces authentication, the
:doc:`connection string </reference/connection-string>` specified to
:option:`--host <mongoreplay play --host>` also includes the username, password, and authentication
database so that :binary:`~bin.mongoreplay` can write to the database.

.. code-block:: sh

   mongoreplay play -p ~/recordings/recording.bson --host mongodb://username:password@example.com:27018/admin

By default, :binary:`~bin.play <mongoreplay play>` executes the playback
file at the rate of the recording. :option:`--speed <mongoreplay play --speed>` lets you modify
the playback speed. For example, the following operation executes
the operations in ``recording.bson`` at twice the recording speed:

.. code-block:: sh

   mongoreplay play -p ~/recordings/recording.bson --speed=2.0 --host mongodb://username:password@example.com:27018/admin

Log Metrics About Execution Performance during Playback
```````````````````````````````````````````````````````

:toolcommand:`play` can produce a report with detailed metrics
about the performance of each operation executed during playback.

The following example executes playback against the
``mongodb://example.com:27017`` host and produces a JSON report written to
``~/reports/playback-report.json``

.. code-block:: sh

   mongoreplay play -p ~/recordings/recording.bson --report ~/reports/playback-report.json --collect json --host mongodb://example.com:27017

The ``play`` report contents would resemble:

.. code-block:: json

   {
      "order": 2,
      "op": "op_command",
      "command": "listCollections",
      "ns": "dbs",
      "request_data": {
         "command_args": {
            "filter": {},
            "listCollections": 1.0
         },
         "input_docs": [],
         "metadata": {}
      },
      "reply_data": {
         "command_reply": {
            "cursor": {
               "firstBatch": [],
               "id": {
                  "$numberLong": "0"
               },
               "ns": "dbs.$cmd.listCollections"
            },
            "ok": 1.0
         },
         "metadata": {},
         "output_docs": null
      },
      "played_at": "2016-09-12T15:50:47.576511488-04:00",
      "play_at": "2016-09-12T15:50:47.568587106-04:00",
      "playbacklag_us": 7924,
      "connection_num": 1,
      "latency_us": 327,
      "seen": "2016-08-29T15:18:46.000445Z",
      "request_id": 20
   }
   {
      "order": 4,
      "op": "op_command",
      "command": "aggregate",
      "ns": "example",
      "request_data": {
         "command_args": {
            "aggregate": "restaurants",
            "cursor": {},
            "pipeline": [{
               "$match": {
                  "borough": "Manhattan"
               }
            }, {
               "$group": {
                  "_id": "$cuisine"
               }
            }]
         },
         "input_docs": [],
         "metadata": {}
      },
      "reply_data": {
         "command_reply": {
            "cursor": {
               "firstBatch": [],
               "id": {
                  "$numberLong": "0"
               },
               "ns": "example.restaurants"
            },
            "ok": 1.0
         },
         "metadata": {},
         "output_docs": null
      },
      "played_at": "2016-09-12T15:51:09.775716-04:00",
      "play_at": "2016-09-12T15:51:09.775244206-04:00",
      "playbacklag_us": 471,
      "connection_num": 1,
      "latency_us": 407,
      "seen": "2016-08-29T15:22:28.067016Z",
      "request_id": 21
   }

Refer to :ref:`mongoreplay-report-format` for a description of each field.

.. _mongoreplay-use-monitor:

Use :toolcommand:`monitor`
~~~~~~~~~~~~~~~~~~~~~~~~~~

Inspect Recorded Operations
```````````````````````````

:toolcommand:`monitor` can create a report based on the
contents of a playback file. :toolcommand:`monitor`\'s report includes
*all* operations and some metadata about each operation's execution.

The following operation uses :toolcommand:`monitor` to create a JSON
report based on the contents of the ``recording.bson`` playback file
located in the ``~/recordings`` directory and write the report to
``~/reports/monitoring-report.json``:

.. code-block:: sh

   mongoreplay monitor -p ~/recordings/recording.bson --report ~/reports/monitoring-report.json --collect json

The report contents would resemble:

.. code-block:: json

   {
      "order": 0,
      "op": "command",
      "command": "isMaster",
      "ns": "admin.$cmd",
      "request_data": {
         "isMaster": 1
      },
      "reply_data": null,
      "connection_num": 0,
      "seen": "2016-08-26T14:45:59.387837Z",
      "request_id": 14
   }
   {
      "order": 1,
      "op": "reply",
      "request_data": null,
      "reply_data": {
         "ismaster": true,
         "localTime": {
            "$date": "2016-08-26T14:45:59.388Z"
         },
         "maxBsonObjectSize": 16777216,
         "maxMessageSizeBytes": 48000000,
         "maxWireVersion": 4,
         "maxWriteBatchSize": 1000,
         "minWireVersion": 0,
         "ok": 1.0
      },
      "nreturned": 1,
      "connection_num": 0,
      "latency_us": 214,
      "seen": "2016-08-26T14:45:59.388051Z",
      "request_id": 14
   }
   {
      "order": 2,
      "op": "op_command",
      "command": "listCollections",
      "ns": "folkore",
      "request_data": {
         "command_args": {
            "filter": {},
            "listCollections": 1.0
         },
         "input_docs": [],
         "metadata": {}
      },
      "reply_data": null,
      "connection_num": 0,
      "seen": "2016-08-26T14:45:59.388186Z",
      "request_id": 15
   }

Refer to :ref:`mongoreplay-report-format` for a description of each field.

Inspect Live MongoDB Traffic
````````````````````````````

:toolcommand:`monitor` can also inspect live traffic and, optionally,
create a report based on the observed operations.

To monitor traffic in real time in your terminal, omit the
:option:`--report <mongoreplay monitor --report>` option, as in the
following:

.. code-block:: sh

   mongoreplay monitor -i eth0 -e 'port 27017' --collect json

Optionally, you can create a report based on the operations observed
using :toolcommand:`monitor`. The following example creates a JSON
report written to ``~/reports/monitor-live.json`` based on the traffic
through port ``27017`` on the ``eth0`` network interface:

.. code-block:: sh

   mongoreplay monitor -i eth0 -e 'port 27017' --report ~/reports/monitor-live.json --collect json


