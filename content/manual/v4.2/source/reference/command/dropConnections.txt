===============
dropConnections
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: dropConnections
   
   .. versionadded:: 4.2

   The :dbcommand:`dropConnections` command drops the 
   :binary:`~bin.mongod`/:binary:`~bin.mongos` instance's outgoing
   connections to the specified hosts. The :dbcommand:`dropConnections`
   must be run  against the ``admin`` database. 

   The command has following syntax:

   .. code-block:: javascript

      db.adminCommand({ 
        dropConnections: 1, 
        hostAndPort : [ "host1:port1", "host2:port2", ... ] 
      })

   The command requires the following field:

   .. list-table::
      :header-rows: 1
      :widths: 20 10 70

      * - Field
        - Type
        - Description

      * - ``hostAndPort``

        - array

        - Each array element represents the hostname and
          port of a remote machine.

Access Control
--------------

If the deployment enforces 
:ref:`authentication/authorization <authentication>`,
the :dbcommand:`dropConnections` command requires the 
:authaction:`dropConnections` action on the 
:ref:`cluster <resource-cluster>` resource. 

Create a :ref:`user-defined role <user-defined-roles>` in the ``admin``
database  where the ``privilege`` array includes the following document:

.. code-block:: javascript

   { "resource" : { "cluster" : true } }, "actions" : [ "dropConnections" ] }

- Use :method:`db.createUser()` to create a user on the ``admin``
  database with the custom role.

  *or* 

- Use :method:`db.grantRolesToUser()` to grant the role to an  existing 
  user on the ``admin`` database.

For example, the following operation creates a
user-defined role on the ``admin`` database with the privileges
to support :dbcommand:`dropConnections`:

.. code-block:: javascript

   db.getSiblingDB("admin").createRole(
     {
       "role" : "dropConnectionsRole",
       "privileges" : [
         { 
           "resource" : { "cluster" : true }, 
           "actions" : [ "dropConnections" ] 
         }
       ],
       "roles" : []
     }
   )

Assign the custom role to a user on the ``admin`` database:

.. code-block:: javascript

   db.getSiblingDB("admin").createUser(
     {
       "user" : "dropConnectionsUser",
       "pwd" : "replaceThisWithASecurePassword",
       "roles" : [ "dropConnectionsRole" ]
     }
   )

The created user can execute :dbcommand:`dropConnections`. 

For more examples of user creation, see :doc:`/tutorial/create-users`.
For a tutorial on adding privileges to an existing database user, see 
:ref:`modify-existing-user-access`.

Behavior
--------

:dbcommand:`dropConnections` silently ignores ``hostAndPort`` elements
that do not include both the hostname and port of the remote machine.

Example
-------

Consider a replica set with a recently removed member at
``oldhost.example.com:27017``. Running the following 
:dbcommand:`dropConnections` command against each active
replica set member ensures there are no remaining outgoing connections 
to ``oldhost.example.com:27017``:

.. code-block:: javascript

   db.adminCommand( 
     {
       "dropConnections" : 1,
       "hostAndPort" : [
         "oldhost.example.com:27017"
       ] 
     } 
   )

The command returns output similar to the following:

.. code-block:: javascript

   {
    "ok" : 1,
    "$clusterTime" : {
      "clusterTime" : Timestamp(1551375968, 1),
      "signature" : {
        "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
        "keyId" : NumberLong(0)
      }
    },
    "operationTime" : Timestamp(1551375968, 1)
   }

You can confirm the status of the connection pool for the
:binary:`~bin.mongod` or :binary:`~bin.mongos` using the
:dbcommand:`connPoolStats` command. 
