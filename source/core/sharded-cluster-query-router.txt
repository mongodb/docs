.. index:: mongos
.. _sharded-cluster-query-routing:
.. _sharding-read-operations:

======
mongos
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB :binary:`~bin.mongos` instances route queries and write operations
to :term:`shards <shard>` in a sharded cluster. :binary:`~bin.mongos` provide the
only interface to a sharded cluster from the perspective of
applications. Applications never connect or communicate directly with
the shards.

The :binary:`~bin.mongos` tracks what data is on which shard by caching
the metadata from the :ref:`config servers
<sharded-cluster-config-server>`. The :binary:`~bin.mongos` uses the
metadata to route operations from applications and clients to the
:binary:`~bin.mongod` instances. A :binary:`~bin.mongos` has no *persistent*
state and consumes minimal system resources.

The most common practice is to run :binary:`~bin.mongos` instances on the
same systems as your application servers, but you can maintain
:binary:`~bin.mongos` instances on the shards or on other dedicated
resources.

Routing And Results Process
---------------------------

A :binary:`~bin.mongos` instance routes a query to a :term:`cluster <sharded
cluster>` by:

1. Determining the list of :term:`shards <shard>` that must receive the
   query.

#. Establishing a cursor on all targeted shards.

The :binary:`~bin.mongos` then merges the data from each of the
targeted shards and returns the result document. Certain
query modifiers, such as :ref:`sorting<sharding-mongos-sort>`,
are performed on a shard such as the :term:`primary shard` before
:binary:`~bin.mongos` retrieves the results.

.. versionchanged:: 3.6

   For :doc:`aggregation operations </core/aggregation-pipeline>` that
   run on multiple shards, if the operations do not require running on
   the database's :term:`primary shard`, these operations may route the
   results back to the :binary:`~bin.mongos` where the results are then
   merged.

   There are two cases in which a pipeline is ineligible to run on
   :binary:`~bin.mongos`.
   
   The first case occurs when the merge part of the split pipeline
   contains a stage which *must* run on a primary shard. For instance,
   if ``$lookup`` requires access to an unsharded collection in the same
   database as the sharded collection on which the aggregation is running,
   the merge is obliged to run on the primary shard.

   The second case occurs when the merge part of the split pipeline
   contains a stage which may write temporary data to disk, such as
   ``$group``, and the client has specified ``allowDiskUse:true``. In this
   case, assuming that there are no other stages in the merge pipeline
   which require the primary shard, the merge will run on a
   randomly-selected shard in the set of shards targeted by the
   aggregation.

   For more information on how the work of aggregation is split among
   components of a sharded cluster query, use ``explain:true`` as a
   parameter to the :method:`~db.collection.aggregation()` call. The
   return will include three json objects. ``mergeType`` shows where the
   stage of the merge happens ("primaryShard", "anyShard", or "mongos").
   ``splitPipeline`` shows which operations in your pipeline have run on
   individual shards. ``shards`` shows the work each shard has done.

In some cases, when the :term:`shard key` or a prefix of the shard key
is a part of the query, the :binary:`~bin.mongos` performs a
:ref:`targeted operation<sharding-mongos-targeted>`, routing queries to
a subset of shards in the cluster.

:binary:`~bin.mongos` performs a :ref:`broadcast
operation<sharding-mongos-broadcast>` for queries that do *not* include the
:term:`shard key`, routing queries to *all* shards in the cluster. Some
queries that do include the shard key may still result in a broadcast
operation depending on the distribution of data in the cluster and the
selectivity of the query.

See :ref:`sharding-query-isolation` for more on targeted and
broadcast operations.

How ``mongos`` Handles Query Modifiers
--------------------------------------

.. _sharding-mongos-sort:

Sorting
~~~~~~~

If the result of the query is not sorted, the :binary:`~bin.mongos`
instance opens a result cursor that "round robins" results from all
cursors on the shards.

If the query specifies sorted results using the
:method:`~cursor.sort()` cursor method, the :binary:`~bin.mongos` instance
passes the :operator:`$orderby` option to the shards. The :term:`primary
shard` for the database receives and performs a merge sort for all
results before returning the data to the client via the
:binary:`~bin.mongos`.

Limits
~~~~~~

If the query limits the size of the result set using the
:method:`~cursor.limit()` cursor method, the :binary:`~bin.mongos`
instance passes that limit to the shards and then re-applies the limit
to the result before returning the result to the client.

Skips
~~~~~

If the query specifies a number of records to *skip* using the
:method:`~cursor.skip()` cursor method, the :binary:`~bin.mongos` *cannot*
pass the skip to the shards, but rather retrieves unskipped results
from the shards and skips the appropriate number of documents when assembling
the complete result.

When used in conjunction with a :method:`~cursor.limit()`, the
:binary:`~bin.mongos` will pass the *limit* plus the value of the
:method:`~cursor.skip()` to the shards to improve the efficiency of these
operations.

Confirm Connection to ``mongos`` Instances
------------------------------------------

To detect if the MongoDB instance that your client is connected
to is :binary:`~bin.mongos`, use the :dbcommand:`isMaster` command. When a
client connects to a :binary:`~bin.mongos`, :dbcommand:`isMaster` returns
a document with a ``msg`` field that holds the string
``isdbgrid``. For example:

.. code-block:: javascript

   {
      "ismaster" : true,
      "msg" : "isdbgrid",
      "maxBsonObjectSize" : 16777216,
      "ok" : 1,
      ...
   }

If the application is instead connected to a :binary:`~bin.mongod`, the
returned document does not include the ``isdbgrid`` string.

.. index:: shard key; query isolation
.. _sharding-query-router-broadcast-targeted:
.. _sharding-shard-key-query-isolation:
.. _sharding-query-isolation:

Query Isolation
---------------

Generally, the fastest queries in a sharded environment are those that
:binary:`~bin.mongos` route to a single shard, using the :term:`shard key` and the
cluster meta data from the :ref:`config server <sharding-config-server>`.
These :ref:`targeted operations<sharding-mongos-targeted>` use the
shard key value to locate the shard or subset of shards that satisfy the
query document.

For queries that don't include the shard key, :binary:`~bin.mongos` must query all
shards, wait for their responses and then return the result to the
application. These "scatter/gather" queries can be long running operations.

.. _sharding-mongos-broadcast:

Broadcast Operations
~~~~~~~~~~~~~~~~~~~~

:binary:`~bin.mongos` instances broadcast queries to all shards for the
collection **unless** the :binary:`~bin.mongos` can
determine which shard or subset of shards stores this data.

.. include:: /images/sharded-cluster-scatter-gather-query.rst

After the :binary:`~bin.mongos` receives responses from all shards, it merges
the data and returns the result document. The performance of a broadcast
operation depends on the overall load of the cluster, as well as variables
like network latency, individual shard load, and number of documents returned
per shard. Whenever possible, favor operations that result in :ref:`targeted
operation<sharding-mongos-targeted>` over those that result in a broadcast
operation.

Multi-update operations are always broadcast operations.

The :method:`~db.collection.updateMany()` and
:method:`~db.collection.deleteMany()` methods are broadcast
operations, unless the query document specifies the shard key in full.

.. _sharding-mongos-targeted:

Targeted Operations
~~~~~~~~~~~~~~~~~~~

:binary:`~bin.mongos` can route queries that include the shard key or the prefix
of a :term:`compound<compound index>` shard key a specific shard or set of
shards. :binary:`~bin.mongos` uses the shard key value to locate the
:term:`chunk` whose range includes the shard key value and directs the
query at the :term:`shard` containing that chunk.

.. include:: /images/sharded-cluster-targeted-query.rst

For example, if the shard key is:

.. code-block:: javascript

   { a: 1, b: 1, c: 1 }

The :binary:`~bin.mongos` program *can* route queries that include the full
shard key or either of the following shard key prefixes at a
specific shard or set of shards:

.. code-block:: javascript

   { a: 1 }
   { a: 1, b: 1 }

All :method:`~db.collection.insertOne()` operations target to one shard. Each
document in the :method:`~db.collection.insertMany()` array targets to a
single shard, but there is no guarantee all documents in the array insert into
a single shard.

All :method:`~db.collection.updateOne()`,
:method:`~db.collection.replaceOne()` and :method:`~db.collection.deleteOne()`
operations *must* include the :term:`shard key` or ``_id`` in the query
document. MongoDB returns an error if these methods are used without
the shard key or ``_id``.

Depending on the distribution of data in the cluster and the selectivity of
the query, :binary:`~bin.mongos` may still perform a :ref:`broadcast
operation<sharding-mongos-broadcast>` to fulfill these queries.

Index Use
~~~~~~~~~

If the query does not include the :term:`shard key`, the
:binary:`~bin.mongos` must send the query to all shards as a
"scatter/gather" operation. Each shard will, in turn, use *either* the
shard key index or another more efficient index to fulfill the query.

If the query includes multiple sub-expressions that reference the
fields indexed by the shard key *and* the secondary index, the
:binary:`~bin.mongos` can route the queries to a specific shard and the
shard will use the index that will allow it to fulfill most
efficiently.

Sharded Cluster Security
------------------------

Use :doc:`/core/security-internal-authentication` to enforce intra-cluster
security and prevent unauthorized cluster components from accessing the
cluster. You must start each :binary:`~bin.mongod` or :binary:`~bin.mongos` in the
cluster with the appropriate security settings in order to enforce internal
authentication.

See :doc:`/tutorial/deploy-sharded-cluster-with-keyfile-access-control` for a
tutorial on deploying a secured sharded cluster.

Cluster Users
~~~~~~~~~~~~~

Sharded clusters support :doc:`/core/authorization` *(RBAC)* for restricting
unauthorized access to cluster data and operations. You must start each
:binary:`~bin.mongod` in the cluster, including the :term:`config servers <config
server>`, with the :option:`--auth <mongod --auth>` option in order to enforce RBAC.
Alternatively, enforcing :doc:`/core/security-internal-authentication` for
inter-cluster security also enables user access controls via RBAC.

With RBAC enforced, clients must specify a :option:`--username <mongo --username>`,
:option:`--password <mongo --password>`, and
:option:`--authenticationDatabase <mongo --authenticationDatabase>` when
connecting to the :binary:`~bin.mongos` in order to access cluster resources.

Each cluster has its own cluster users. These users cannot be used
to access individual shards.

See :doc:`/tutorial/enable-authentication` for a tutorial on enabling
adding users to an RBAC-enabled MongoDB deployment.
