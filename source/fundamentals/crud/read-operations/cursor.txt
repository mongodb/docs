.. _node-access-cursor:

=========================
Access Data From a Cursor
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Read operations that return multiple documents do not immediately return all values
matching the query. Because a query can potentially match very large sets of documents,
these operations return an object called a cursor, which references documents identified
by the query. A cursor fetches documents in batches to reduce both memory consumption and
network bandwidth usage. Cursors are highly configurable and offer multiple interaction
paradigms for different use cases.

The following functions directly return cursors:

- ``Collection.find()``

- ``Collection.aggregate()``

- ``Collection.listIndexes()``

- ``Collection.listSearchIndexes()``

- ``Db.aggregate()``

- ``Db.listCollections()``

Other methods such as :doc:`Collection.findOne() </usage-examples/findOne>`
and :doc:`Collection.watch() </usage-examples/changeStream>` use
cursors internally, and return the results of the operations instead of
a cursor.

.. _cursor-methods:

Cursor Paradigms
----------------

You can use several different **cursor paradigms** to access data.
Most cursor paradigms allow you to access query results one document at
a time, abstracting away network and caching logic. However, since use
cases differ, other paradigms offer different access patterns, like
pulling all matching documents into a collection in process memory.

.. warning::

   Do not combine different cursor paradigms on a single cursor.
   Operations such as ``hasNext()`` and ``toArray()``
   each predictably modify the original cursor. If you mix these calls
   on a single cursor, you may receive unexpected results.

.. warning::

   Because asynchronous calls directly modify the cursor, executing
   asynchronous calls on a single cursor simultaneously can also cause
   undefined behavior. Always wait for the previous
   asynchronous operation to complete before running another.

.. note::

   When you reach the last result through iteration or through an at-once
   fetch, the cursor is exhausted which means it ceases to respond to methods
   that access the results.

.. _node-fundamentals-async-iteration:

Asynchronous Iteration
~~~~~~~~~~~~~~~~~~~~~~

Cursors implement the :mdn:`AsyncIterator
<Web/JavaScript/Reference/Statements/for-await...of>` interface, which
allows you to use cursors in ``for await...of`` loops:

.. literalinclude:: /code-snippets/crud/cursor.js
   :language: javascript
   :start-after: start async cursor example
   :end-before: end async cursor example

Manual Iteration
~~~~~~~~~~~~~~~~

You can use the `hasNext() <{+api+}/classes/FindCursor.html#hasNext>`__
method to check if a cursor can retrieve more data, and then use
the `next() <{+api+}/classes/FindCursor.html#next>`__
method to retrieve the subsequent element of the cursor:

.. literalinclude:: /code-snippets/crud/cursor.js
   :language: javascript
   :start-after: start manual cursor example
   :end-before: end manual cursor example

.. _node-fundamentals-cursor-array:

Return an Array of All Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For use cases that require all documents matched by a query to be held
in memory at the same time, use the `toArray() <{+api+}/classes/FindCursor.html#toArray>`__
method. Note that large numbers of matched documents can cause performance issues
or failures if the operation exceeds memory constraints. Consider using
the ``for await...of`` syntax to iterate
through results rather than returning all documents at once.

.. literalinclude:: /code-snippets/crud/cursor.js
   :language: javascript
   :start-after: start fetchAll cursor example
   :end-before: end fetchAll cursor example
 
Stream API
~~~~~~~~~~

Cursors expose the ``stream()`` method to convert them to Node Readable Streams. These streams operate in **Object
Mode**, which passes JavaScript objects rather than Buffers or Strings through the pipeline.

.. literalinclude:: /code-snippets/crud/cursor.js
   :language: javascript
   :start-after: start stream cursor example
   :end-before: end stream cursor example

Event API
~~~~~~~~~

As Readable Streams, cursors also support the Event API's
``close``, ``data``, ``end``, and ``readable`` events:

.. literalinclude:: /code-snippets/crud/cursor.js
   :language: javascript
   :start-after: start event cursor example
   :end-before: end event cursor example

Cursor Utility Methods
----------------------

Rewind
~~~~~~

To reset a cursor to its initial position in the set of returned
documents, use `rewind() <{+api+}/classes/FindCursor.html#rewind>`__.

.. literalinclude:: /code-snippets/crud/cursor.js
   :language: javascript
   :start-after: start rewind cursor example
   :end-before: end rewind cursor example

Close
~~~~~

Cursors consume memory and network resources both in the client
application and in the connected instance of MongoDB. Use
`close() <{+api+}/classes/FindCursor.html#close>`__
to free up a cursor's resources in both the client application
and the {+mdb-server+}:

.. literalinclude:: /code-snippets/crud/cursor.js
   :language: javascript
   :start-after: start close cursor example
   :end-before: end close cursor example

Abort
~~~~~

You can cancel cursor operations by using an `abort signal
<{+api+}/types/Abortable.html>`__.  This can help you manage your resources by
releasing memory and network resources used by the cursor if they're no longer
needed.

.. note::
   
   This feature is experimental. Aborting a signal closes a connection, which 
   might cause unnecessary connection reestablishment.

You can pass the ``signal`` command to the following methods:

- ``collection.find()``
- ``collection.findOne()``
- ``collection.aggregate()``
- ``collection.countDocuments()``
- ``db.listCollections()``
- ``db.command()``

To use an abort signal, create an ``AbortController`` instance and extract the
``signal`` from the controller. In this code example, the process listens for a
``SIGINT`` (``Ctrl+C``) to trigger the ``abort()`` method. You can pass the
``signal`` option to the ``find()`` method to abort the cursor operation if the
signal triggers, as shown in the following example:

.. literalinclude:: /code-snippets/crud/cursor.js
   :language: javascript
   :start-after: start abort cursor example
   :end-before: end abort cursor example
