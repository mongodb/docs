# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 4aade867eda74cefb8dba9237e9bdfee
# 9a80f85c2d3a4688817f0ffb50c0a6a0
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:5
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:32
msgid "Linearizable Reads via ``findAndModify``"
msgstr ""

# cc3c81ef39ae4a178730674396a338da
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:10
msgid "Overview"
msgstr ""

# 533452d8668a49e496dfcf45067474ae
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:12
msgid ""
"When reading from a replica set, it is possible to read data that is "
"stale (i.e. may not reflect all writes that have occurred prior to the "
"read operation) or not durable (i.e. the state of the data may reflect a "
"write that has not been acknowledged by a majority or the replica set "
"members and thus could be rolled back), depending on the read concern "
"used."
msgstr ""

# 47f907c954a940bf9be41f284e8b41f4
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:19
msgid ""
"Starting in version 3.4, MongoDB introduces "
":readconcern:`\"linearizable\"` read concern that returns durable data "
"that is not stale. :readconcern:`Linearizable <\"linearizable\">` read "
"concern guarantees only apply if read operations specify a query filter "
"that uniquely identifies a single document."
msgstr ""

# a960196a5f9e4f1b94ccbe8a3e615e37
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:25
msgid ""
"This tutorial outlines an alternative procedure, one using "
":method:`db.collection.findAndModify()` to read data that is not stale "
"and cannot be rolled back, for deployments using MongoDB 3.2. For MongoDB"
" 3.4, although the outlined procedure can be applied, see "
":readconcern:`\"linearizable\"` read concern instead."
msgstr ""

# afa2fd8a151646eebd8a7bdd5f6c8a43
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:34
msgid ""
"This procedure uses :method:`db.collection.findAndModify()` to read data "
"that is not stale and cannot be rolled back. To do so, the procedure uses"
" the :method:`~db.collection.findAndModify()` method with a :ref:`write "
"concern <write-concern>` to modify a dummy field in a document. "
"Specifically, the procedure requires that:"
msgstr ""

# 5448fd607f5b4595928f000dd96973cf
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:40
msgid ""
":method:`db.collection.findAndModify()` use an **exact** match query, and"
" a :doc:`unique index </core/index-unique>` **must exist** to satisfy the"
" query."
msgstr ""

# cf381937eace4baebd42a8868480ff0d
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:44
msgid ""
":method:`~db.collection.findAndModify()` must actually modify a document;"
" i.e. result in a change to the document."
msgstr ""

# 57e4767a055b4997af663a6673a762d9
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:47
msgid ""
":method:`~db.collection.findAndModify()` must use the write concern "
":writeconcern:`{ w: \"majority\" } <\"majority\">`."
msgstr ""

# c463c7bdaa3f489ebd43bd9fae667fa6
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:52
msgid ""
"The \"quorum read\" procedure has a substantial cost over simply using a "
"read concern of :readconcern:`\"majority\"` because it incurs write "
"latency rather than read latency. This technique should only be used if "
"staleness is absolutely intolerable."
msgstr ""

# c718916de13a4219ba710de94509b9a1
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:58
msgid "Prerequisites"
msgstr ""

# c2019bd0d4a44d05aba59e305b6a159c
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:60
msgid ""
"This tutorial reads from a collection named ``products``. Initialize the "
"collection using the following operation."
msgstr ""

# 0928043df7644aa3b00849cadd35b3ed
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:89
msgid ""
"The documents in this collection contain a dummy field named "
"``_dummy_field`` that will be incremented by the "
":method:`db.collection.findAndModify()` in the tutorial. If the field "
"does not exist, the :method:`db.collection.findAndModify()` operation "
"will add the field to the document. The purpose of the field is to ensure"
" that the :method:`db.collection.findAndModify()` results in a "
"modification to the document."
msgstr ""

# 7c23805034dc4ab4905b906329cb08bf
#: ../source/tutorial/perform-findAndModify-linearizable-reads.txt:98
msgid "Procedure"
msgstr ""

# 44100bcc0f46446e83c28cc8533585c8
#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may"
" *transiently* believe that they are the primary, but at most, one of "
"them will be able to complete writes with :writeconcern:`{ w: "
"\"majority\" } <\"majority\">` write concern. The node that can complete "
":writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current "
"primary, and the other node is a former primary that has not yet "
"recognized its demotion, typically due to a :term:`network partition`. "
"When this occurs, clients that connect to the former primary may observe "
"stale data despite having requested read preference :readmode:`primary`, "
"and new writes to the former primary will eventually roll back."
msgstr ""

