#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/operator/aggregation/sort.txt:3
msgid "$sort (aggregation)"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:14
msgid "Definition"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:18
msgid ""
"Sorts all input documents and returns them to the pipeline in sorted "
"order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:21
msgid "The :pipeline:`$sort` stage has the following prototype form:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:27
msgid ""
":pipeline:`$sort` takes a document that specifies the field(s) to sort by"
" and the respective sort order. ``<sort order>`` can have one of the "
"following values:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:31
msgid "``1`` to specify ascending order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:33
msgid "``-1`` to specify descending order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:35
msgid ""
"``{ $meta: \"textScore\" }`` to sort by the computed ``textScore`` "
"metadata in descending order. See :ref:`sort-pipeline-metadata` for an "
"example."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:40
msgid "Examples"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:45
msgid "Ascending/Descending Sort"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:47
msgid ""
"For the field or fields to sort by, set the sort order to ``1`` or ``-1``"
" to specify an ascending or descending sort respectively, as in the "
"following example:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:58
msgid ""
"This operation sorts the documents in the ``users`` collection, in "
"descending order according by the ``age`` field and then in ascending "
"order according to the value in the ``posts`` field."
msgstr ""

#: ../source/includes/fact-sort-order.rst:1
msgid ""
"When comparing values of different :ref:`BSON types <bson-types>`, "
"MongoDB uses the following comparison order, from lowest to highest:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:4
msgid "MinKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:5
msgid "Null"
msgstr ""

#: ../source/includes/fact-sort-order.rst:6
msgid "Numbers (ints, longs, doubles, decimals)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:7
msgid "Symbol, String"
msgstr ""

#: ../source/includes/fact-sort-order.rst:8
msgid "Object"
msgstr ""

#: ../source/includes/fact-sort-order.rst:9
msgid "Array"
msgstr ""

#: ../source/includes/fact-sort-order.rst:10
msgid "BinData"
msgstr ""

#: ../source/includes/fact-sort-order.rst:11
msgid "ObjectId"
msgstr ""

#: ../source/includes/fact-sort-order.rst:12
msgid "Boolean"
msgstr ""

#: ../source/includes/fact-sort-order.rst:13
msgid "Date"
msgstr ""

#: ../source/includes/fact-sort-order.rst:14
msgid "Timestamp"
msgstr ""

#: ../source/includes/fact-sort-order.rst:15
msgid "Regular Expression"
msgstr ""

#: ../source/includes/fact-sort-order.rst:16
msgid "MaxKey (internal type)"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:64
msgid ""
"For details on the comparison/sort order for specific types, see :ref"
":`bson-types-comparison-order`."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:70
msgid "Metadata Sort"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:72
msgid ""
"Specify in the ``{ <sort-key> }`` document, a new field name for the "
"computed metadata and specify the :expression:`$meta` expression as its "
"value, as in the following example:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:85
msgid ""
"This operation uses the :query:`$text` operator to match the documents, "
"and then sorts first by the ``\"textScore\"`` metadata and then by "
"descending order of the ``posts`` field. The specified metadata "
"determines the sort order. For example, the ``\"textScore\"`` metadata "
"sorts in descending order. See :expression:`$meta` for more information "
"on metadata."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:95
msgid "``$sort`` Operator and Memory"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:100
msgid "``$sort`` + ``$limit`` Memory Optimization"
msgstr ""

#: ../source/includes/fact-agg-sort-limit.rst:1
msgid ""
"When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit` in the"
" pipeline, the :pipeline:`$sort` operation only maintains the top ``n`` "
"results as it progresses, where ``n`` is the specified limit, and MongoDB"
" only needs to store ``n`` items in memory. This optimization still "
"applies when ``allowDiskUse`` is ``true`` and the ``n`` items exceed the "
":ref:`aggregation memory limit <agg-memory-restrictions>`."
msgstr ""

#: ../source/includes/fact-optimizations-subject-to-change.rst:1
msgid "Optimizations are subject to change between releases."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:109
msgid "``$sort`` and Memory Restrictions"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:111
msgid ""
"The :pipeline:`$sort` stage has a limit of 100 megabytes of RAM. By "
"default, if the stage exceeds this limit, :pipeline:`$sort` will produce "
"an error. To allow for the handling of large datasets, set the "
"``allowDiskUse`` option to ``true`` to enable :pipeline:`$sort` "
"operations to write to temporary files. See the ``allowDiskUse`` option "
"in :method:`db.collection.aggregate()` method and the "
":dbcommand:`aggregate` command for details."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:119
msgid ""
"The memory limit for :pipeline:`$sort` changed from 10 percent of RAM to "
"100 megabytes of RAM."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:124
msgid "``$sort`` Operator and Performance"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:126
msgid ""
":pipeline:`$sort` operator can take advantage of an index when placed at "
"the **beginning** of the pipeline or placed **before** the "
":pipeline:`$project`, :pipeline:`$unwind`, and :pipeline:`$group` "
"aggregation operators. If :pipeline:`$project`, :pipeline:`$unwind`, or "
":pipeline:`$group` occur prior to the :pipeline:`$sort` operation, "
":pipeline:`$sort` cannot use any indexes."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:138
msgid ""
":doc:`/tutorial/aggregation-zip-code-data-set`, :doc:`/tutorial"
"/aggregation-with-user-preference-data`"
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid ""
#~ "When comparing values of different "
#~ ":term:`BSON` types, MongoDB uses the "
#~ "following comparison order, from lowest "
#~ "to highest:"
#~ msgstr ""

#~ msgid "Numbers (ints, longs, doubles)"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB treats some types as equivalent"
#~ " for comparison purposes. For instance, "
#~ "numeric types undergo conversion before "
#~ "comparison."
#~ msgstr ""

#~ msgid ""
#~ "Date objects sort before Timestamp "
#~ "objects. Previously Date and Timestamp "
#~ "objects sorted together."
#~ msgstr ""

#~ msgid ""
#~ "The comparison treats a non-existent "
#~ "field as it would an empty BSON"
#~ " Object. As such, a sort on the"
#~ " ``a`` field in documents ``{ }`` "
#~ "and ``{ a: null }`` would treat"
#~ " the documents as equivalent in sort"
#~ " order."
#~ msgstr ""

#~ msgid ""
#~ "With arrays, a less-than comparison "
#~ "or an ascending sort compares the "
#~ "smallest element of arrays, and a "
#~ "greater-than comparison or a descending "
#~ "sort compares the largest element of "
#~ "the arrays. As such, when comparing "
#~ "a field whose value is a "
#~ "single-element array (e.g. ``[ 1 ]``)"
#~ " with non-array fields (e.g. ``2``),"
#~ " the comparison is between ``1`` and"
#~ " ``2``. A comparison of an empty "
#~ "array (e.g. ``[ ]``) treats the "
#~ "empty array as less than ``null`` "
#~ "or a missing field."
#~ msgstr ""

#~ msgid "MongoDB sorts ``BinData`` in the following order:"
#~ msgstr ""

#~ msgid "First, the length or size of the data."
#~ msgstr ""

#~ msgid "Then, by the BSON one-byte subtype."
#~ msgstr ""

#~ msgid "Finally, by the data, performing a byte-by-byte comparison."
#~ msgstr ""

# 3e83f1ddecc14041995af479939abcc5
#~ msgid "On this page"
#~ msgstr ""

# 974b5a5acc564f31bf7b20bf71568cb0
#~ msgid ""
#~ "Before MongoDB 2.4, :pipeline:`$sort` would"
#~ " sort all the results in memory, "
#~ "and then limit the results to n"
#~ " results."
#~ msgstr ""

