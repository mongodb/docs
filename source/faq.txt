=================================
FAQ: The MongoDB Connector for BI
=================================

.. meta::
   :description: Find answers to common questions about the MongoDB Connector for BI, including authentication, data processing, and using TLS/SSL.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Is there a cloud-hosted version of the |bi-short|?
--------------------------------------------------

.. include:: /includes/atlas-bi-connector.rst

How do I authenticate with the |bi-short|?
------------------------------------------

.. versionchanged:: 2.0

   Prior to version 2.0, the |bi-short| stored its own separate set of
   credentials.

   .. include:: /includes/fact-upgrade.rst

When connecting to a MongoDB deployment using
:manual:`authentication </tutorial/enable-authentication>`, you can
authenticate as the users and roles configured in that deployment.

See :ref:`client-authentication` for details on how to specify
your authentication source and mechanism.

When upgrading MongoDB, what considerations should be taken for the |bi-short|?
-------------------------------------------------------------------------------

Before upgrading your MongoDB deployment, set the
:option:`--mongo-versionCompatibility <mongosqld --mongo-versionCompatibility>`
option to the currently installed major
:ref:`release series <release-version-numbers>` of MongoDB, for example
``3.4``. Once the upgrade is complete, restart :binary:`~bin.mongosqld`
without the
:option:`--mongo-versionCompatibility <mongosqld --mongo-versionCompatibility>`
option or set it to the newly updated major release series.

.. note::

   If you launch the |bi-short| with a
   :ref:`DRDL schema file <schema-with-drdl-file>`, you must
   update your schema file after the upgrade if you start using
   a newly introduced :manual:`BSON Type </reference/bson-types>`.

   MongoDB 3.4 introduces the :manual:`decimal BSON type </reference/bson-types>`.
   When you upgrade from MongoDB 3.2 to MongoDB 3.4 and your schema file
   contains ``float64`` values (which map to the ``double`` type in
   MongoDB), you must update your DRDL file after you begin using the
   new ``decimal`` type.

Does the |bi-short| store any data?
-----------------------------------

The |bi-short| instance only transforms SQL queries into
MongoDB queries. It does not store any data itself.

When starting :binary:`~bin.mongosqld`, you provide it a
:doc:`DRDL </schema-configuration>` file describing the schema of your
data.

How are queries processed?
--------------------------

The |bi-short| constructs :manual:`aggregation </aggregation>`
expressions.

:binary:`~bin.mongosqld` always enables the
:manual:`aggregate </reference/command/aggregate>` ``allowDiskUse``
option.

The |bi-short| cannot map some supported SQL constructs into an
aggregation equivalent. In this case, the |bi-short| will execute those
constructs in memory.

.. _bi-skip-incompatible-types:

How do I skip data incompatible with my DRDL type definition?
-------------------------------------------------------------

Using MongoDB Views
~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-pipeline-views.rst

Using a DRDL Filter
~~~~~~~~~~~~~~~~~~~

If documents in a collection contain different data types for a field,
you may filter for a specific data type. To accomplish this, you can
include a :pipeline:`$match` stage at the beginning of the pipeline in
your :ref:`DRDL <drdl>` table definition.

For example, to match only documents containing a number in the ``grade`` field,
use the following pipeline stage:

.. code-block:: javascript

   "$match": { "grade": { "$type": "number" } }

If you are :pipeline:`unwinding <$unwind>` an array field that contains
different data types, then to filter the array for a specific data type, put
the :pipeline:`$match` stage after the :pipeline:`$unwind`.

.. seealso::

   :ref:`Heterogeneous data types <drdl-heterogeneous>`

Can I use MongoDB views with |bi-short|?
----------------------------------------

Yes. |bi-short| treats a :manual:`view </core/views>` like any other
collection. For more information on using views with |bi-short|, see
:ref:`Managing Schema with MongoDB Views <schema-with-views>`.

Is there any syntax validation tool for DRDL?
---------------------------------------------

:ref:`DRDL <drdl>` files use the `YAML <http://yaml.org/>`_ syntax. Any
YAML validator such as `<https://yaml-online-parser.appspot.com/>`_ can help you
check your DRDL files.

How does the |bi-short| process dates?
--------------------------------------

The |bi-short| will correctly process :ref:`BSON date <document-bson-type-date>` data
by mapping it to the :term:`SQL` ``datetime`` type. For example:

.. code-block:: javascript

   db.data.save({ date: new Date() })

If you store date data as a string, the |bi-short| treats it as a string
rather than as a date. For example, |bi-short| treats the following as a
string:

.. code-block:: javascript

   db.data.save({ date: '32-FEB-2015' })

How do I use TLS/SSL with the |bi-short|?
-----------------------------------------

The connection between :binary:`~bin.mongosqld` and your MongoDB deployment
has TLS/SSL configured separately from the connection between your SQL
client and :binary:`~bin.mongosqld`.

Connecting ``mongosqld`` to MongoDB
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the MongoDB instance you are connecting to uses
:manual:`TLS/SSL </core/security-transport-encryption>`, provide
the :option:`--mongo-ssl <mongosqld --mongo-ssl>`
option to :binary:`~bin.mongosqld`.

For example:

.. code-block:: sh

   mongosqld --schema=schema.drdl --mongo-ssl

To specify a TLS/SSL CA root certificate, use the
:option:`--mongo-sslCAFile <mongosqld --mongo-sslCAFile>`
option. To specify a client certificate, use the
:option:`--mongo-sslPEMKeyFile <mongosqld --mongo-sslPEMKeyFile>`
option. For example:

.. code-block:: sh

   mongosqld --schema=schema.drdl \
             --mongo-ssl \
             --mongo-sslCAFile=/certs/ca.pem \
             --mongo-sslPEMKeyFile=/certs/mongodb_client.pem

Connecting a client to ``mongosqld``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To specify a TLS/SSL CA root certificate, use the
:option:`--sslCAFile <mongosqld --sslCAFile>`
option. To specify a client certificate, use the
:option:`--sslPEMKeyFile <mongosqld --sslPEMKeyFile>`
option. For example:

.. code-block:: sh

   mongosqld --schema=schema.drdl \
             --sslCAFile=/certs/ca.pem \
             --sslPEMKeyFile=/certs/mongosql_server.pem

Can I use the SQL ``EXPLAIN`` function?
---------------------------------------

If you are using an SQL client which allows you to issue SQL
statements directly, such as the MySQL shell, you can precede any
query with ``EXPLAIN`` to get information about how the query will
be executed. ``EXPLAIN`` returns the complete :manual:`aggregation
operation </aggregation>` which |bi-short| will send to MongoDB,
without running the query or returning any results. ``EXPLAIN`` is
useful if you want to know exactly how a specific SQL query translates
into MongoDB Query Language.
