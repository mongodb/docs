.. _laravel-feature-compat:

=============================
Laravel Feature Compatibility
=============================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: php framework, odm, support

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This guide describes the Laravel features that are supported by
{+odm-long+}. This page discusses Laravel version 12.x feature
availability in the {+odm-short+}.

The following sections contain tables that describe whether individual
features are available in the {+odm-short+}.

.. tip:: SQL Concepts in MongoDB 

   To learn about how MongoDB represents SQL terminology, concepts, and
   functionality, see the :manual:`SQL to MongoDB Mapping Chart
   </reference/sql-comparison/>`.

Database Features
-----------------

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Eloquent Feature
     - Availability

   * - Configuration
     - ✓

   * - Read/Write Connections
     - Use :manual:`read preference </core/read-preference/>` instead.

   * - Multiple Database Connections
     - ✓

   * - Listening for Query Events
     - ✓

   * - Monitoring Cumulative Query Time
     - ✓

   * - Transactions
     - ✓ See :ref:`laravel-transactions`.

   * - Command Line Interface (CLI)
     - Use the :mdb-shell:`MongoDB Shell <>` (``mongosh``).

   * - Database Inspection
     - *Unsupported*

   * - Database Monitoring
     - *Unsupported*

   * - Multi-database Support / Multiple Schemas
     - | *Unsupported* 
       | Laravel uses a dot separator (``.``)
         between SQL schema and table names, but MongoDB allows ``.``
         characters within collection names, which might lead to
         unexpected namespace parsing.

Query Features
--------------

The following Eloquent methods are not supported in the {+odm-short+}:

- ``toSql()``
- ``toRawSql()``
- ``whereColumn()``
- ``orWhereColumn()``
- ``whereFulltext()``
- ``groupByRaw()``
- ``orderByRaw()``
- ``inRandomOrder()``
- ``union()``
- ``unionAll()``
- ``havingRaw()``
- ``having()``
- ``havingBetween()``
- ``orHavingRaw()``
- ``whereIntegerInRaw()``
- ``orWhereIntegerInRaw()``
- ``whereIntegerNotInRaw()``
- ``orWhereIntegerNotInRaw()``

.. list-table::
   :header-rows: 1

   * - Eloquent Feature
     - Availability

   * - Running Queries
     - ✓

   * - Chunking Results
     - ✓

   * - Aggregates
     - ✓

   * - Select Statements
     - ✓

   * - Raw Expressions
     - *Unsupported*

   * - Joins
     - Use the ``$lookup`` aggregation stage. To learn more, see the
       :manual:`$lookup reference
       </reference/operator/aggregation/lookup/>` in the
       {+server-docs-name+}. {+odm-long+} provides the
       :ref:`laravel-aggregation-builder` to perform aggregations.

   * - Unions
     - Use the ``$unionWith`` aggregation stage. To learn more, see the
       :manual:`$unionWith reference
       </reference/operator/aggregation/unionWith/>` in the
       {+server-docs-name+}. {+odm-long+} provides the
       :ref:`laravel-aggregation-builder` to perform aggregations.

   * - `Basic Where Clauses <https://laravel.com/docs/{+laravel-docs-version+}/queries#basic-where-clauses>`__
     - ✓

   * - `Additional Where Clauses <https://laravel.com/docs/{+laravel-docs-version+}/queries#additional-where-clauses>`__
     - ✓

   * - Logical Grouping
     - ✓

   * - `Advanced Where Clauses <https://laravel.com/docs/{+laravel-docs-version+}/queries#advanced-where-clauses>`__
     - ✓

   * - `Subquery Where Clauses <https://laravel.com/docs/{+laravel-docs-version+}/queries#subquery-where-clauses>`__
     - *Unsupported*

   * - Ordering
     - ✓

   * - Random Ordering
     - *Unsupported*

   * - Grouping
     - Use the ``$group`` aggregation stage. To learn more, see the
       :manual:`$group reference
       </reference/operator/aggregation/group/>` in the
       {+server-docs-name+}. {+odm-long+} provides the
       :ref:`laravel-aggregation-builder` to perform aggregations.

   * - Limit and Offset
     - ✓

   * - Conditional Clauses
     - ✓

   * - Insert Statements
     - ✓

   * - Auto-Incrementing IDs
     - *Unsupported as MongoDB uses ObjectIDs*

   * - Upserts
     - ✓ See :ref:`laravel-mongodb-query-builder-upsert`.

   * - Update Statements
     - ✓

   * - Updating JSON Columns
     - *Unsupported*

   * - Increment and Decrement Values
     - ✓

   * - Debugging
     - ✓

Pagination Features
-------------------

The {+odm-short+} supports all Laravel pagination features.


Migration Features
------------------

The {+odm-short+} supports all Laravel migration features, but the
implementation is specific to MongoDB's schema-flexible model.

Seeding Features
----------------

The {+odm-short+} supports all Laravel seeding features.

Eloquent Features
-----------------

.. list-table::
   :header-rows: 1

   * - Eloquent Feature
     - Availability

   * - Models
     - ✓

   * - UUID and ULID Keys
     - ✓

   * - Timestamps
     - ✓

   * - Retrieving Models
     - ✓

   * - Advanced Subqueries
     - *Unsupported*

   * - Retrieving or Creating Models
     - ✓

   * - Retrieving Aggregates
     - *Partially supported*

   * - Inserting and Updating Models
     - ✓

   * - Upserts
     - ✓ See :ref:`laravel-modify-documents-upsert`.

   * - Deleting Models
     - ✓

   * - Soft Deleting
     - ✓

   * - Pruning Models
     - ✓

.. tip::
   
   To learn more, see the :ref:`laravel-eloquent-model-class` guide.

Eloquent Relationship Features
------------------------------

.. list-table::
   :header-rows: 1

   * - Eloquent Feature
     - Availability

   * - Defining Relationships
     - ✓

   * - Many-to-Many Relationships
     - ✓

   * - Polymorphic Relationships
     - ✓

   * - Dynamic Relationships
     - ✓

   * - Querying Relations
     - ✓

   * - Aggregating Related Models
     - *Unsupported*

   * - Inserting and Updating Related Models
     - ✓

.. tip::
   
   To learn more, see the :ref:`laravel-eloquent-model-relationships` guide.

Eloquent Collection Features
----------------------------

The {+odm-short+} supports all Eloquent collection features.

Eloquent Mutator Features
-------------------------

.. list-table::
   :header-rows: 1

   * - Eloquent Feature
     - Availability

   * - Casts
     - ✓

   * - Array and JSON Casting
     - ✓ You can store objects and arrays in MongoDB without serializing to JSON.

   * - Date Casting
     - ✓

   * - Enum Casting
     - ✓

   * - Encrypted Casting
     - ✓

   * - Custom Casts
     - ✓

.. tip::
   
   To learn more, see the :ref:`laravel-eloquent-model-class` guide.

Eloquent Model Factory Features
-------------------------------

The {+odm-short+} supports all Eloquent factory features.
