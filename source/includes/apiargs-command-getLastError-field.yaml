arg_name: field
description: |
  If ``true``, wait for the next journal commit before returning, rather
  than waiting for a full disk flush. If :binary:`~bin.mongod` does not have
  journaling enabled, this option has no effect. If this option is
  enabled for a write operation, :binary:`~bin.mongod` will wait *no more*
  than 1/3 of the current :setting:`~storage.journal.commitIntervalMs` before
  writing data to the journal.
interface: command
name: j
operation: getLastError
optional: false
position: 1
type: boolean
---
arg_name: field
description: |
  When running with replication, this is the number of servers to
  replicate to before returning. A ``w`` value of 1 indicates the
  primary only. A ``w`` value of 2 includes the primary and at least
  one secondary, etc. In place of a number, you may also set ``w`` to
  ``majority`` to indicate that the command should wait until the
  latest write propagates to a majority of the voting replica set
  members.

  .. include:: /includes/fact-majority-write-concern-change.rst

  If using ``w``, you should also use ``wtimeout``. Specifying
  a value for ``w`` without also providing a ``wtimeout`` may cause
  :dbcommand:`getLastError` to block indefinitely.
interface: command
name: w
operation: getLastError
optional: false
position: 2
type:
- integer
- string
---
# Commenting out to be consistent with writeConcern documentation,
# which does not include fsync. Also, with journaling
# enabled, fsync:true -> j: true
#
# arg_name: field
# description: |
#   If ``true``, wait for :binary:`~bin.mongod` to write this data to disk
#   before returning. Defaults to false. In most cases, use the ``j``
#   option to ensure durability and consistency of the data set.
# interface: command
# name: fsync
# operation: getLastError
# optional: false
# position: 3
# type: boolean
# ---
arg_name: field
description: |
  Milliseconds. Specify a value in milliseconds to control how
  long to wait for write propagation to complete. If replication does
  not complete in the given timeframe, the :dbcommand:`getLastError`
  command will return with an error status.
interface: command
name: wtimeout
operation: getLastError
optional: true
position: 3
type: integer
...
