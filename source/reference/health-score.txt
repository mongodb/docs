======================
Health Check Solutions
======================

.. default-domain:: mongodb

.. 
.. The intro text intentionally comes before the "On this page" block.
.. 

This page lists issues that can be raised by |a-mms| health check and
provides their solutions.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. 
.. TECH WRITERS: Keep the health checks alphabetized.
.. 

Agent version outdated
----------------------

Agents get upgraded for better performance and user experience.
You may choose to update the agents for your |mms| project:

If you use Automation:
  Update the agents through the |mms| :guilabel:`Deployment` tab.

If you do not use Automation
  Follow the update procedures for the operating system of the
  servers on which your agents currently run:

  - :doc:`Update the {+bagent+} </tutorial/nav/install-backup-agent>`

  - :doc:`Update the {+magent+} </tutorial/nav/install-monitoring-agent>`

Host has decreasing available disk space
----------------------------------------

|mms| considers any disk on any host as needing more disk capacity if
it estimates that the disk will be full in two weeks or less.

To remedy this problem, move your database to disk(s) with greater
capacity.

Host has excessive disk utilization
-----------------------------------

|mms| considers any disk on any host as having excessive disk
utilization if it is actively storing or retrieving data for a
prolonged period of time.

To remedy this problem, move your database to disk(s) with greater
throughput.

Host has startup warnings
-------------------------

Limits Startup Warning
~~~~~~~~~~~~~~~~~~~~~~

Process and user limits with low default values can cause a number of issues in
the course of normal MongoDB operation. Please see :manual:`UNIX ulimit Settings
</reference/ulimit/>` in the MongoDB Manual for further information and
recommendations.

NUMA Enabled Startup Warning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Running MongoDB on a system with NUMA can cause a number of operational
problems, including slow performance for periods of time and high system process
usage. Please see `MongoDB and NUMA Hardware
<https://docs.mongodb.org/manual/administration/production-notes/#mongodb-and-numa-hardware>`_
in the MongoDB Manual for further information and recommendations.

Readahead
~~~~~~~~~

Please see the readahead information `in this section
<https://docs.mongodb.org/manual/administration/production-notes/#recommended-configuration>`_
of the MongoDB Manual for information and recommendations about the ``Readahead``
startup warning.

Transparent Huge Pages + Defrag
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Please see :manual:`Disable Transparent Huge Pages (THP)
</tutorial/transparent-huge-pages>` for information and recommendations about
the ``Transparent Huge Pages and Defrag`` startup warning.

Host is unreachable
-------------------

The {+magent+} connects to each MongoDB process in your deployment to collect diagnostic data.

If your {+magent+} cannot connect to a process, consider the following possible resolutions:

.. list-table::
   :widths: 40 60
   :header-rows: 1

   * - Reason

     - Resolution

   * - Host no longer exists.
     
     - Remove host from |mms|.

   * - {+magent+} cannot reach host.
    
     - See :doc:`Remedies for a Host Down Alert </reference/alerts/host-down>` 
       for possible resolutions.

MongoDB version outdated
------------------------

For MongoDB deployments managed by |mms|, |mms| supports safe automatic
upgrade and downgrade operations between releases of MongoDB while
maximizing the availability of your deployment. |mms| supports upgrade
and downgrade operations for sharded clusters, replica sets, and
standalone MongoDB instances.

:doc:`Configure Available MongoDB Versions </tutorial/configure-available-mongodb-version>`
describes how to choose which versions of MongoDB are available to |mms|.

If your deployment is **not** managed by |mms|, you will need to manually change the
version of MongoDB. The `MongoDB Manual <https://docs.mongodb.org/manual/>`_
provides upgrade tutorials with each release. For example, see :manual:`Upgrade
MongoDB to 3.2 </release-notes/3.2-upgrade>` for upgrading to MongoDB 3.2 from
an earlier version.

For managed deployments:

1. Click :guilabel:`Deployment`, then the :guilabel:`Processes` tab.

2. Click the :guilabel:`Topology` view.

3. On the line listing the cluster, replica set, or process, click the :guilabel:`Modify` button.

4. In the :guilabel:`Version` field, select the version. Then click :guilabel:`Apply`.

5. Click :guilabel:`Review & Deploy`.

6. Click :guilabel:`Confirm & Deploy`.

For more information and precautions, see :doc:`/tutorial/change-mongodb-version`.

Replica set has an even number of votes
---------------------------------------

An even number of voting members in a replica set can lead to election issues in
the event of a primary node failure. You should consider adding an additional
voting node to your replica sets to ensure an odd number of votes.

You can add an arbiter to your replica set to allow an uneven number of members
without the overhead of a member that replicates data.

If your deployment is **not** managed by |mms|, follow the MongoDB Manual's
instructions to :manual:`manually add an arbiter to your replica set
</tutorial/add-replica-set-arbiter>`.

For managed deployments:

1. Click :guilabel:`Deployment`, then the :guilabel:`Processes` tab.

2. Click the :guilabel:`Topology` view.

3. On the line listing the replica set, click the :guilabel:`Modify` button.

4. Add and configure the new member: Under :guilabel:`Member Options`, click
   :guilabel:`Add` and select :guilabel:`Arbiter`.

5. Click :guilabel:`Apply`.

6. Click :guilabel:`Review & Deploy`. |mms| displays your proposed changes.

7. Click :guilabel:`Confirm & Deploy`.

Replica set has less than three data-bearing nodes
--------------------------------------------------

We recommend that your replica set includes at least three data-bearing nodes to
ensure high availability. For factors that affect high availability, see the
MongoDB Manual's pages on :manual:`high availability
</core/replica-set-high-availability>`, :manual:`elections
</core/replica-set-elections>`, and :manual:`failover
</core/replica-set-rollbacks>`.

If your deployment is **not** managed by |mms|, follow the MongoDB Manual's
instructions to :manual:`manually add a node to your replica set
</tutorial/expand-replica-set>`.

For managed deployments:

1. Click :guilabel:`Deployment`, then the :guilabel:`Processes` tab.

2. Click the :guilabel:`Topology` view.

3. On the line listing the replica set, click the :guilabel:`Modify` button.

4. Add and configure the new member: Add the member by increasing the number of
   members in the :guilabel:`MongoDs Per Replica Set` field.

5. Click :guilabel:`Apply`.

6. Click :guilabel:`Review & Deploy`. |mms| displays your proposed changes.

7. Click :guilabel:`Confirm & Deploy`.

Replica set has mixed version nodes
-----------------------------------

Because of potential incompatibilities, it is recommended you upgrade outdated
versions of MongoDB instances to the most recent in your cluster.

If your deployment is **not** managed by |mms|, you will need to manually change
the version of MongoDB. The `MongoDB Manual <https://docs.mongodb.org/manual/>`_
provides upgrade tutorials with each release. For example, see :manual:`Upgrade
MongoDB to 3.2 </release-notes/3.2-upgrade>` for upgrading to MongoDB 3.2 from
an earlier version.

For managed deployments:

1. Click :guilabel:`Deployment`, then the :guilabel:`Processes` tab.

2. Click the :guilabel:`Topology` view.

3. On the line listing the replica set, click the :guilabel:`Modify` button.

4. In the :guilabel:`Version` field, select the version. Then click :guilabel:`Apply`.

5. Click :guilabel:`Review & Deploy`.

6. Click :guilabel:`Confirm & Deploy`.

For more information and precautions, see :doc:`/tutorial/change-mongodb-version`.

Replica set has more than one arbiter
-------------------------------------

An arbiter is added to a replica set with an even number of members to add a
vote in elections for primary. Arbiters always have exactly one vote, and thus
allow replica sets to have an uneven number of members, without the overhead of a
member that replicates data. Only one arbiter is required to break election ties.

If your deployment is **not** managed by |mms|, follow the MongoDB Manual's
instructions to :manual:`manually remove a member from your replica set
</tutorial/remove-replica-set-member>`.

For managed deployments:

1. Click :guilabel:`Deployment`, then the :guilabel:`Processes` tab.

2. Click the :guilabel:`Topology` view.

3. For the arbiter to be removed, click the ellipsis icon and select
   :guilabel:`Remove from Replica Set`.

4. Click :guilabel:`Remove` to confirm.

5. Click :guilabel:`Review & Deploy`. |mms| displays your proposed changes.

6. Click :guilabel:`Confirm & Deploy`.

For more information on deployment architectures, see :manual:`Replica Set
Deployment Architectures </core/replica-set-architectures>` in the MongoDB
Manual.

Shared cluster has mixed version nodes
--------------------------------------

The :manual:`components of the sharded cluster
</core/sharded-cluster-components>` run different versions of MongoDB.

To avoid compatibility issues, use the same version of MongoDB for all the
:program:`mongos` and :program:`mongod` processes that make up your sharded
cluster. This includes all the :program:`mongod` processes used for the
cluster's :term:`config servers <config server>` and :term:`shards <shard>`.

To change the version of a :program:`mongod` or :program:`mongos` process,
see :doc:`/tutorial/change-mongodb-version`.

Too many queued operations
--------------------------

Queued operations are operations that are waiting to be processed. This may
occur when you have reached your hardware capacity or if you have poorly
performing queries.

If you have access to |mms| Premium, you can track long running operations using
the |mms| Profiler. To enable the profiler tool in |mms|:

1. Click :guilabel:`Deployment`, then the :guilabel:`Processes` tab.

2. Click the :guilabel:`Topology` view.

3. On the line listing the process, click the :guilabel:`Metrics` button.

4. Click the :guilabel:`Profiler` tab and follow instructions to enable the profiler.

If you don’t have access to |mms| Premium, you can still get access to profiling
data for statistics about performance and database operations. To read more
about profiling databases, see :doc:`/tutorial/profile-database`.

Too much replication lag
------------------------

Replication lag is a delay between an operation on the primary and the
application of that operation from the oplog to the secondary. Replication lag
can be a significant issue and can seriously affect MongoDB replica set
deployments. Excessive replication lag makes "lagged" members ineligible to
quickly become primary and increases the possibility that distributed read
operations will be inconsistent.

For information on how to troubleshoot replication lag, please see :ref:`Check
the Replication Lag <replica-set-replication-lag>` in the MongoDB Manual.
