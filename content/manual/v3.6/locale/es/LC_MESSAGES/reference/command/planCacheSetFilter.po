# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 19:37+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/command/planCacheSetFilter.txt:3
msgid "planCacheSetFilter"
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:14
msgid "Definition"
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:20
msgid ""
"Set an :ref:`index filter <index-filters>` for a collection. If an index "
"filter already exists for the :term:`query shape`, the command overrides "
"the previous index filter."
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:24
msgid "The command has the following syntax:"
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:38
msgid "The :dbcommand:`planCacheSetFilter` command has the following field:"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:7
msgid "Field"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:9
msgid "Type"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:11
msgid "Description"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:13
msgid "``planCacheSetFilter``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:15
msgid "string"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:17
#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:80
msgid "The name of the collection."
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:21
msgid "``query``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:23
#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:38
#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:48
msgid "document"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:25
#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:86
msgid ""
"The query predicate associated with the index filter. Together with the "
"``sort`` and the ``projection``, the ``query`` predicate make up the "
":term:`query shape` for the specified index filter."
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:29
#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:90
msgid ""
"Only the structure of the predicate, including the field names, are "
"significant; the values in the query predicate are insignificant. As "
"such, query predicates cover similar queries that differ only in the "
"values."
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:36
msgid "``sort``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:40
#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:99
msgid ""
"Optional. The sort associated with the filter. Together with the "
"``query`` and the ``projection``, the ``sort``  make up the :term:`query "
"shape` for the specified index filter."
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:46
msgid "``projection``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:50
#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:107
msgid ""
"Optional. The projection associated with the filter.  Together with the "
"``query`` and the ``sort``, the ``projection``  make up the :term:`query "
"shape` for the specified index filter."
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:56
msgid "``indexes``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:58
msgid "array"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:60
#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:115
msgid "An array of index filters for the specified :term:`query shape`."
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:62
#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:117
msgid ""
"Specify the index filters as either: - an array of index specification "
"documents, e.g. ``[ { x : 1 }, ... ]`` - an array of index names, e.g. "
"``[ \"x_1\", ... ]``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:66
#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:121
msgid ""
"Because the :doc:`query optimizer </core/query-plans>` chooses among the "
"collection scan and these indexes, if the indexes are non-existent, the "
"optimizer will choose the collection scan."
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:70
#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst:125
msgid ""
"In cases of multiple indexes with the same key pattern, you must specify "
"the index by name."
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst
msgid "field string planCacheSetFilter"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst
msgid "field document query"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst
msgid "field document sort"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst
msgid "field document projection"
msgstr ""

#: ../source/includes/apiargs/dbcommand-planCacheSetFilter-field.rst
msgid "field array indexes"
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:42
msgid ""
"Index filters only exist for the duration of the server process and do "
"not persist after shutdown; however, you can also clear existing index "
"filters using the :dbcommand:`planCacheClearFilters` command."
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:47
msgid "Required Access"
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:49
msgid ""
"A user must have access that includes the "
":authaction:`planCacheIndexFilter` action."
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:55
msgid "Examples"
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:58
msgid "Set Filter on Query Shape Consisting of Predicate Only"
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:60
msgid ""
"The following example creates an index filter on the ``orders`` "
"collection such that for queries that consist only of an equality match "
"on the ``status`` field without any projection and sort, the query "
"optimizer evaluates only the two specified indexes and the collection "
"scan for the winning plan:"
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:79
msgid ""
"In the query predicate, only the structure of the predicate, including "
"the field names, are significant; the values are insignificant. As such, "
"the created filter applies to the following operations:"
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:88
msgid ""
"To see whether MongoDB will apply an index filter for a query shape, "
"check the :data:`~explain.queryPlanner.indexFilterSet` field of either "
"the :method:`db.collection.explain()` or the :method:`cursor.explain()` "
"method."
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:94
msgid "Set Filter on Query Shape Consisting of Predicate, Projection, and Sort"
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:96
msgid ""
"The following example creates an index filter for the ``orders`` "
"collection. The filter applies to queries whose predicate is an equality "
"match on the ``item`` field, where only the ``quantity`` field is "
"projected and an ascending sort by ``order_date`` is specified."
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:115
msgid ""
"For the query shape, the query optimizer will only consider indexed plans"
" which use the index ``{ item: 1, order_date: 1, quantity: 1 }``."
msgstr ""

#: ../source/reference/command/planCacheSetFilter.txt:119
msgid ":dbcommand:`planCacheClearFilters`, :dbcommand:`planCacheListFilters`"
msgstr ""

# ae463536f7494d61bc32a33e483c4e19
#~ msgid ""
#~ "The following example creates an index"
#~ " filter on the ``orders`` collection "
#~ "such that for queries that consists "
#~ "only of an equality match on the"
#~ " ``status`` field without any projection"
#~ " and sort, the query optimizer "
#~ "evaluates only the two specified indexes"
#~ " and the collection scan for the "
#~ "winning plan:"
#~ msgstr ""

# d69fb37b5b82445b9400a9ba535dcc7c
#~ msgid ""
#~ "To see whether MongoDB applied an "
#~ "index filter for a query, check "
#~ "the :data:`explain.filterSet` field of the "
#~ ":method:`~cursor.explain()` output."
#~ msgstr ""

