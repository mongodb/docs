.. index:: sharding; architecture
.. index:: architectures; sharding
.. _sharding-architecture:

===========================
Shard Cluster Architectures
===========================

.. default-domain:: mongodb

This document describes the organization and design of :term:`shard
cluster` deployments.

.. seealso:: The :doc:`/administration/sharding` document, the
   ":ref:`Sharding Requirements <sharding-requirements>`" section,
   and the ":ref:`Sharding Tutorials <sharding-tutorials>`" for more
   information on deploying and maintaining a :term:`shard cluster`.

Deploying a Test Cluster
------------------------

.. warning:: Use this architecture for testing and development only.

You can deploy a very minimal :term:`shard cluster` for testing
and development. Such a cluster will have the following components:

- 1 :ref:`config server <sharding-config-server>`.

- At least one :program:`mongod` instance (either :term:`replica sets <replica set>`
  or as a standalone node.)

- 1 :program:`mongos` instance.

Deploying a Production Cluster
------------------------------

When deploying a shard cluster to production, you must ensure that the data
is redundant and that your individual nodes are highly available. To that end,
a production-level shard cluster should have the following:

- 3 :ref:`config servers <sharding-config-server>`, each residing on a separate node.

.. note:: 

   :ref:`Config servers <sharding-config-server>` are tied to single shard
   cluster and cannot be shared by multiple shard clusters.

- For each shard, a three member :term:`replica set <replica set>` consisting of:

  - 3 :program:`mongod` replicas or

    .. seealso:: ":doc:`/administration/replication-architectures`"
       and ":doc:`/administration/replica-sets`."

  - 2 :program:`mongod` replicas and a single
    :program:`mongod` instance acting as a :term:`arbiter`.

    .. optional::

       All replica set configurations and options are available.

       You may also choose to deploy a :ref:`hidden member
       <replica-set-hidden-members>` for backups or a
       :ref:`delayed member <replica-set-delayed-members>`.

       You might also keep a member of each replica set in a
       geographically distinct data center in case the primary data
       center becomes unavailable.

       See ":doc:`/replication`" for more information on replication
       and :term:`replica sets <replica set>`.

  .. seealso:: The ":ref:`sharding-procedure-add-shard`" and
     ":ref:`sharding-procedure-remove-shard`" procedures for more
     information.

- :program:`mongos` instances. Typically, you will deploy a single
  :program:`mongos` instance on each application server. Alternatively,
  you may deploy several `mongos` nodes and let your application connect
  to these via a load balancer.

Sharded and Non-Sharded Data
----------------------------

Sharding operates on the collection level. You can shard multiple
collections within a database, or have multiple databases with
sharding enabled. [#sharding-databases]_ However, in production
deployments some databases and collections will use sharding, while
other databases and collections will only reside on a single database
instance or replica set (i.e. a :term:`shard`.)

.. note::

   Regardless of the data architecture of your :term:`shard cluster`,
   ensure that all queries and operations use the :term:`mongos`
   router to access the data cluster. Use the :program:`mongos` even
   for operations that do not impact the sharded data.

Every database has a "primary" [#overloaded-primary-term]_ shard that
holds all un-sharded collections in that database. All collections
that *are not* sharded reside on the primary for their database. Use
the :dbcommand:`moveprimary` command to change the primary shard for a
database. Use the :dbcommand:`printShardingStatus` command or the
:method:`sh.status()` to see an overview of the cluster, which contains
information about the chunk and database distribution within the
cluster.

.. warning::

   The :dbcommand:`moveprimary` command can be expensive because
   it copies all non-sharded data to the new shard, during which
   that data will be unavailable for other operations.

When you deploy a new :term:`shard cluster`, the "first shard" becomes
the primary for all databases before enabling sharding. Databases
created subsequently, may reside on any shard in the cluster.

.. [#sharding-databases] As you configure sharding, you will use the
   :dbcommand:`enablesharding` command to enable sharding for a
   database. This simply makes it possible to use the
   :dbcommand:`shardcollection` on a collection within that database.

.. [#overloaded-primary-term] The term "primary" in the context of
   databases and sharding, has nothing to do with the term
   :term:`primary` in the context of :term:`replica sets <replica set>`.
