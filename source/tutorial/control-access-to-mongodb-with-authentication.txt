=========================
Access Control in MongoDB
=========================

.. default-domain:: mongodb

This document describes how to set up and manage basic authentication
and authorization. For information on Kerberos authentication, which is
available in MongoDB Enterprise, see
:doc:`Kerberos Authentication
</tutorial/control-access-to-mongodb-with-kerberos-authentication>`.

MongoDB provides a basic access control system that you can enable
with the :setting:`auth` and :setting:`keyFile` configuration
settings [#cli-options]_. For an overview,
see the :ref:`security-authentication` section of the
:doc:`/core/security` document. For additional configuration
settings that affect security, see the :ref:`configuration-security`
section of the :doc:`/administration/configuration` document.

MongoDB also provides role-based privileges through each database's
:data:`system.users <<database>.system.users>` collection. For an
overview, see the :ref:`security-authorization` section of the
:doc:`/core/security` document.

.. [#cli-options] Use the :option:`--auth <mongod --auth>` or
   :option:`--keyFile <mongod --keyFile>` options on the command
   line.

.. _control-access-add-users:

Add Users
---------

.. versionchanged:: 2.4
   The schema of :data:`system.users <<database>.system.users>`
   changed in 2.4 to accommodate a more sophisticated :doc:`user
   privilege model </reference/user-privileges>`.

When setting up authentication for the first time you must either:

- add at least one user to the ``admin`` database before starting the
  :program:`mongod` instance with :setting:`auth`.

- add the first user to the ``admin`` database when connected to the
  :program:`mongod` instance from a ``localhost`` connection.
  [#sharded-localhost]_

The first user to a MongoDB deployment should be a user with the
``userAdminAnyDatabase`` role in the ``admin`` database.

.. [#sharded-localhost] Because of :issue:`SERVER-6591`, in version
   2.2 you cannot add the first user to a sharded cluster using the
   ``localhost`` connection. If you are running a 2.2 sharded cluster,
   and want to enable authentication, you must deploy the cluster and
   add the first user to the ``admin`` database before restarting the
   cluster to run with :setting:`keyFile`.

Add a User with the ``userAdminAnyDatabase`` Role
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The first user created for a MongoDB deployment should have the
``userAdminAnyDatabase`` role, which allows the user to create other
users with any roles. Use this user to create all other users in the
system.

The user with the ``userAdminAnyDatabase`` role is effectively a
super-user, as the user can grant itself any role. In production
deployments, this user should have *no other roles* and should only
administer users and privileges.

As this user can grant itself and any other user full access to
anything, the credentials to log in as this user should be carefully
controlled.

1. Connect to the :program:`mongod` or :program:`mongos` on the
   ``localhost`` interface using the :program:`mongo` shell.

#. Switch to the ``admin`` database:

   .. code-block:: javascript

      use admin

#. Add the user with the ``userAdminAnyDatabase`` role, and only that
   role, by issuing a command similar to the following, where
   ``<username>`` is the username and ``<password>`` is the password:

   .. code-block:: javascript

      db.addUser( { user: "<username>", pwd: "<password>", roles: [ "userAdminAnyDatabase" ] } )

   For more information on creating a user, see
   :ref:`control-access-add-user-to-database`.

.. [#auth-disabled-maintenance] You can also use this procedure if
   authentication is *not* enabled so that your databases has an
   administrative user when you enable :setting:`auth`.

.. _control-access-add-user-to-database:

Add a User to a Database
~~~~~~~~~~~~~~~~~~~~~~~~

To add a user to a database you must authenticate to that database as a
user with the ``userAdmin`` role.

To add a user, pass the :method:`db.addUser()` method a
well-formed :data:`system.users <<database>.system.users>` document that
contains the user's credentials and privileges. The
:method:`db.addUser()` method adds the document to the database's
:data:`system.users <<database>.system.users>` collection.

For the structure of user privilege documents, see :data:`system.users
<<database>.system.users>`. The following are example documents.

.. example:: The following creates a user named ``Alice`` in the
   ``products`` database and gives her ``readWrite`` and
   ``dbAdmin`` privileges.

   .. code-block:: javascript

      use products
      db.addUser( { user: "Alice", pwd: "Moon1234", roles: [ "readWrite", "dbAdmin" ] } )

.. example:: The following creates a user named ``Bob`` in the
   ``admin`` database. The :data:`system.users
   <<database>.system.users>` document uses Bob's credentials from
   ``products`` database and assigns him ``userAdmin`` privileges.

   .. code-block:: javascript

      use admin
      db.addUser( { user: "Bob", userSource: "products", roles: [ "userAdmin" ] } )

.. example:: The following creates a user named ``Carlos`` in the
   ``admin`` database and gives him ``readWrite`` access to the
   ``config`` database, which lets him change certain settings for
   sharded clusters, such as to disable the balancer.

   .. code-block:: javascript

      use admin
      db.addUser( { user: "Carlos", pwd: "Moon1234", roles: [ "clusterAdmin" ], otherDBRoles: { config: [ "readWrite" ] } } )

   Only the ``admin`` database supports the
   :data:`~admin.system.users.otherDBRoles` field.

For more information about user roles, see
:doc:`/reference/user-privileges` and
:doc:`/reference/privilege-documents`. 

.. _auth-localhost-exception:

Authentication on Localhost
---------------------------

If there are no users for the ``admin`` database, you may connect via
the localhost interface. That is, if running :program:`mongod` or
:program:`mongos` with :setting:`auth` or :setting:`keyFile`, you can
connect from a client running on the same system as the
:program:`mongod` or :program:`mongos`.

.. note:: 

   For version of MongoDB 2.2 before 2.2.4, connections on localhost
   are not correctly granted full access on sharded systems that run
   those versions. For those versions, if :program:`mongos` is running
   with :setting:`keyFile`, then all users connecting over the
   localhost interface must authenticate, even if there aren't any
   users in the ``admin`` database.

   MongoDB 2.2.4 resolves this issue.

Password Hashing Insecurity
---------------------------

In version 2.2 and earlier:

- the read-write users of a database all have access to the
  ``system.users`` collection, which contains the user names and user
  password hashes. [#read-and-write-system-users]_

  .. note:: In 2.4, only users with the ``userAdmin`` role have access
     to the ``system.users`` collection.

- if a user has the same password for multiple databases, the hash will
  be the same. A malicious user could exploit this to
  gain access on a second database using a different user's credentials.

As a result, always use unique username and password combinations
for each database.

.. [#read-and-write-system-users] Read-only users do not have access
   to the ``system.users`` collection.

.. example: NOT INCLUDED IN OUTPUT.

   Eve connects to the ``db1`` database and views the ``system.users``
   collection, with the following invocation of :program:`mongo`:

   .. code-block:: sh

      mongo <host>/db1 -u eve -p test

   Then, in the :program:`mongo` shell, issues the following
   operation:

   .. code-block:: javascript

      db.system.users.find()

   This operation returns the following documents:

   .. code-block:: javascript

      { "_id": ObjectId("5074202e032a960d16f4394e"), "user": "alice", "readOnly": false, "pwd": "ac2061b4a08ef8f2d60a07dc18ab4a0a" }
      { "_id": ObjectId("507420ba032a960d16f43951"), "user": "eve", "readOnly": false, "pwd": "5dcc2819b97e68d5cfe51da6cae8a7f6" }

   Alice has read and write accounts on both ``db1`` and ``db2`` and
   also has access on the ``admin`` database. Consider the following
   example where Alice authenticates to the ``admin`` db:

   .. code-block:: javascript

      use admin
      db.auth("alice", "pass")

   Consider the output of :method:`find() <db.collection.find()>` on
   the ``system.users`` collection:

   .. code-block:: javascript

      db.system.users.find()

   The following output confirms that the user has the same password and hash:

   .. code-block:: javascript

      { "_id": ObjectId("50742045032a960d16f43950"), "user": "alice", "readOnly": false, "pwd": "ac2061b4a08ef8f2d60a07dc18ab4a0a" }

Thanks to Will Urbanski, from Dell SecureWorks, for identifying this issue.

Configuration Considerations for Authentication
-----------------------------------------------

The following sections outline practices for enabling and managing
authentication with specific MongoDB deployments:

- :ref:`replica-set-security`
- :ref:`sharding-security`

.. _generate-key-file:

Generate a Key File
-------------------

The key file must be less than one kilobyte in size and may only
contain characters in the base64 set. The key file must not have group
or world permissions on UNIX systems. Key file permissions are not
checked on Windows systems.

Windows Systems
~~~~~~~~~~~~~~~

Use the following ``openssl`` command at the system shell to generate
pseudo-random content for a key file for deployments with Windows
components:

.. code-block:: sh

   openssl rand -base64 741

Linux and Unix Systems
~~~~~~~~~~~~~~~~~~~~~~

Use the following ``openssl`` command at the system shell to generate
pseudo-random content for a key file for systems that do not have
Windows components (i.e. OS X, Unix, or Linux systems):

.. code-block:: sh

   openssl rand -base64 753

Key File Properties
~~~~~~~~~~~~~~~~~~~

Be aware that MongoDB strips whitespace characters (e.g. ``x0d``,
``x09``, and ``x20``,) for cross-platform convenience. As a result,
the following operations produce identical keys:

.. code-block:: sh

   echo -e "my secret key" > key1
   echo -e "my secret key\n" > key2
   echo -e "my    secret    key" > key3
   echo -e "my\r\nsecret\r\nkey\r\n" > key4
