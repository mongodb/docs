.. _manual-convert-replica-set-to-sharded-cluster:

=======================================================
Convert a Self-Managed Replica Set to a Sharded Cluster
=======================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Sharded clusters partition data across multiple servers based on a
:term:`shard key`. A sharded cluster scales better than a replica set
for deployments with large data sets and high throughput operations.

This tutorial converts a single three-member replica set to a sharded
cluster with two shards. Each shard in the new cluster is an independent
three-member replica set.

.. |page-topic| replace:: :atlas:`convert to a sharded cluster in the UI </scale-cluster/#convert-a-replica-set-to-a-sharded-cluster>`

.. cta-banner::
   :url: https://www.mongodb.com/docs/atlas/scale-cluster/#convert-a-replica-set-to-a-sharded-cluster
   :icon: Cloud

   .. include:: /includes/fact-atlas-compatible.rst

About This Task
---------------

- Some steps in this tutorial cause downtime for your deployment.
  Individual steps note when downtime will occur.

- This tutorial is for deployments that have :ref:`authentication
  enabled <authentication>`.

- In this tutorial, you specify server settings with :ref:`configuration
  files <configuration-options>`. Configuration files contain settings
  that are equivalent to the :binary:`mongod` and
  :binary:`mongos` command-line options.

- The sharded cluster you deploy with this tutorial contains ten
  servers:

  - One server for the :binary:`mongos`.

  - Three servers each for the two shards in the cluster (six servers in
    total).

  - Three servers for the :ref:`config server replica set
    <sharding-config-server>`.

Server Architecture
~~~~~~~~~~~~~~~~~~~

This tutorial uses the following servers:

.. list-table::
   :header-rows: 1

   * - Hostname
     - Port
     - Description

   * - ``mongodb0.example.net``
     - ``27017``
     -  Member of the initial data-bearing shard, ``rs0``.

   * - ``mongodb1.example.net``
     - ``27017``
     - Member of the initial data-bearing shard, ``rs0``.

   * - ``mongodb2.example.net``
     - ``27017``
     - Member of the initial data-bearing shard, ``rs0``.

   * - ``mongodb3.example.net``
     - ``27018``
     - Member of the second data-bearing shard, ``rs1``.
   
   * - ``mongodb4.example.net``
     - ``27018``
     - Member of the second data-bearing shard, ``rs1``.

   * - ``mongodb5.example.net``
     - ``27018``
     - Member of the second data-bearing shard, ``rs1``.

   * - ``mongodb6.example.net``
     - ``27017``
     - The :binary:`mongos`, used to connect to the sharded cluster.

   * - ``mongodb7.example.net``
     - ``27019``
     - Member of the config server replica set.

   * - ``mongodb8.example.net``
     - ``27019``
     - Member of the config server replica set.

   * - ``mongodb9.example.net``
     - ``27019``
     - Member of the config server replica set.

The hostnames used in this tutorial are examples. Replace the hostnames
used in the example commands with the hostnames used in your
deployments.

.. include:: /includes/important-hostnames.rst

Before You Begin
----------------

- To complete this tutorial, you must have a replica set that uses
  either keyfile or x.509 certificate authentication. To deploy a secure
  replica set that uses one of these authentication methods, see either:

  - :ref:`deploy-repl-set-with-keyfile`
  - :ref:`x509-internal-authentication`

- This tutorial uses the default data directories ``/data/db`` and
  ``/data/configdb``. To use different paths, set the
  :setting:`storage.dbPath` setting in your configuration file.

- .. include:: /includes/fact-support-online-transition-from-replset-to-sharded-cluster.rst

Steps
-----

.. note::
   
   .. include:: /includes/fact-cannot-connect-directly-to-shards.rst

.. _convert-setup-initial-set:

.. procedure::
   :style: normal

   .. step:: Get the Existing Users and Roles from the Replica Set

      To get existing users and roles, run ``mongodump``:

      .. code-block:: sh

         mongodump -d=admin --out=adminDump -u <adminUser> -p <password> --host <replicaSetURI> --dumpDbUsersAndRoles

   .. step:: Deploy the Config Server Replica Set

      Deploy a three-member replica set for the config servers. In this
      example, the config servers use the following hosts:

      - ``mongodb7.example.net``
      - ``mongodb8.example.net``
      - ``mongodb9.example.net``

      a. Configure the Config Servers

         Configure a :binary:`mongod` instance on each config server host.
         Specify these options in the :ref:`configuration file
         <configuration-options>` for each :binary:`mongod` instance:

         .. list-table::
            :header-rows: 1

            * - Option
              - Value

            * - :setting:`replication.replSetName`
              - ``configReplSet``
               
            * - :setting:`sharding.clusterRole`
              - ``configsvr``

            * - :setting:`net.bindIp`
              - ``localhost``, followed by any other hostnames on
                which the :binary:`mongod` should listen for client
                connections.

         .. code-block:: yaml

            replication:
              replSetName: configReplSet
            sharding:
              clusterRole: configsvr
            net:
              bindIp: localhost,<hostname(s)>

         .. include:: /includes/sharding/convert-repl-set-tutorial/include-additional-options.rst
 
      #. Start the Config Servers

         Deploy the :binary:`mongod` with your specified configuration:
      
         .. code-block:: sh

            mongod --config <PATH_TO_CONFIG_FILE>
          
         The config servers use the default data directory
         ``/data/configdb`` and the default port ``27019``.

      #. Connect to one of the config servers.
      
         Use :binary:`mongosh` to connect to one of the config
         servers. For example:

         .. code-block:: sh

            mongosh "mongodb://mongodb7.example.net:27019"
 
      #. Initiate the config server replica set.

         To initiate the replica set, run :method:`rs.initiate()`:

         .. code-block:: javascript

            rs.initiate( {
               _id: "configReplSet",
               configsvr: true,
               members: [
                  { _id: 0, host: "mongodb7.example.net:27019" },
                  { _id: 1, host: "mongodb8.example.net:27019" },
                  { _id: 2, host: "mongodb9.example.net:27019" }
               ]
            } )

         The preceding command uses the :ref:`localhost exception
         <localhost-exception>` to perform administrative actions without
         authentication.

         .. important::

            .. include:: /includes/fact-rs-initiate-once-only.rst
   
   .. step:: Restore Existing Users and Roles to the New Config

      Restore the existing users and roles you got when you ran ``mongodump``.

      .. code-block:: sh

         mongorestore ./adminDump --nsInclude "admin.*" --host <configPrimaryURI>

      The preceding command uses the :ref:`localhost exception
      <localhost-exception>` to perform administrative actions without
      authentication.

      The output from running this command may be similar to:

      .. code-block:: sh

         0 document(s) restored successfully

      This message does not indicate a problem. This output means that 0 documents
      other than the users and roles were restored.

   .. step:: Secure Config Server Replica Set

      Reconfigure and restart the config server replica set.

      a. Reconfigure the Config Servers

         Select the tab for your authentication mechanism:

         .. tabs::

            .. tab:: Keyfile Authentication
               :tabid: keyfile

               Restart a :binary:`mongod` instance on each of these hosts:

               - ``mongodb7.example.net``
               - ``mongodb8.example.net``
               - ``mongodb9.example.net``

               Specify these options in the :ref:`configuration file
               <configuration-options>` for each :binary:`mongod` instance:

               .. list-table::
                  :header-rows: 1

                  * - Option
                    - Value

                  * - :setting:`security.keyFile`
                    - The path to the key file used for your initial replica set.

               .. code-block:: yaml

                  security:
                     keyFile: <PATH_TO_KEYFILE>
                  replication:
                     replSetName: configReplSet
                  sharding:
                     clusterRole: configsvr
                  net:
                     bindIp: localhost,<hostname(s)>

               .. include:: /includes/sharding/convert-repl-set-tutorial/include-additional-options.rst

            .. tab:: x.509 Authentication
               :tabid: x509

               Restart a :binary:`mongod` instance on each of these hosts:

               - ``mongodb7.example.net``
               - ``mongodb8.example.net``
               - ``mongodb9.example.net``

               Specify these options in the :ref:`configuration file
               <configuration-options>` for each :binary:`mongod` instance
               in addition to the options you already configured:

               .. list-table::
                  :header-rows: 1

                  * - Option
                    - Value

                  * - :setting:`security.clusterAuthMode`
                    - ``x509``

                  * - :setting:`net.tls.mode`
                    - ``requireTLS``

                  * - :setting:`net.tls.certificateKeyFile`
                    - The absolute path to the ``.pem`` file that contains
                      both the TLS certificate and key.

                  * - :setting:`net.tls.CAFile`
                    - The absolute path to the ``.pem`` file that contains
                      the root certificate chain from the Certificate
                      Authority.

                  * - :setting:`net.bindIp`
                    - ``localhost``, followed by any other hostnames on
                      which the :binary:`mongod` should listen for client
                      connections.

                      :red:`WARNING:` Before you bind your instance to a publicly-accessible IP address,
                      you must secure your cluster from unauthorized access. For a complete
                      list of security recommendations, see
                      :ref:`security-checklist`. At minimum, consider
                      :ref:`enabling authentication <checklist-auth>` and :ref:`hardening
                      network infrastructure <network-config-hardening>`.

               .. code-block:: yaml

                  sharding:
                     clusterRole: configsvr
                  replication:
                     replSetName: configReplSet
                  security:
                     clusterAuthMode: x509
                  net:
                     tls:
                        mode: requireTLS
                        certificateKeyFile: <FILE_WITH_COMBINED_CERT_AND_KEY>
                        CAFile: <CA_FILE>
                     bindIp: localhost,<hostname(s)>

               .. include:: /includes/sharding/convert-repl-set-tutorial/additional-tls-options.rst

      #. Restart MongoDB

         Restart the :binary:`mongod` with your specified configuration:

         .. code-block:: sh

            mongod --config <PATH_TO_CONFIG_FILE> --shutdown
            mongod --config <PATH_TO_CONFIG_FILE>

   .. step:: Deploy the ``mongos``

      The :binary:`mongos` provides the interface between the client
      applications and the sharded cluster.

      a. Create a configuration file for the mongos.

         .. tabs::

            .. tab:: Keyfile Authentication
               :tabid: keyfile

               Specify these options in your :binary:`mongos` configuration file:

               .. list-table::
                  :header-rows: 1

                  * - Option
                    - Value

                  * - :setting:`sharding.configDB`
                    - ``configReplSet``, followed by a slash ``/`` and at least
                      one of the config server hostnames and ports.

                  * - :setting:`security.keyFile`
                    - The path to the key file used for your initial replica set.

                  * - :setting:`net.bindIp`
                    - ``localhost``, followed by any other hostnames on which the
                      :binary:`~bin.mongos` should listen for client connections.

               .. code-block:: yaml

                  sharding:
                     configDB: configReplSet/mongodb7.example.net:27019,mongodb8.example.net:27019,mongodb9.example.net:27019
                  security:
                     keyFile: <PATH_TO_KEYFILE>
                  net:
                     bindIp: localhost,<hostname(s)>

               .. include:: /includes/sharding/convert-repl-set-tutorial/include-additional-options.rst

            .. tab:: x.509 Authentication
               :tabid: x509

               Specify these options in your :binary:`mongos` configuration file:

               .. list-table::
                  :header-rows: 1

                  * - Option
                    - Value

                  * - :setting:`sharding.configDB`
                    - ``configReplSet``, followed by a slash ``/`` and at least
                      one of the config server hostnames and ports.

                  * - :setting:`security.clusterAuthMode`
                    - ``x509``

                  * - :setting:`net.tls.mode`
                    - ``requireTLS``

                  * - :setting:`net.tls.certificateKeyFile`
                    - The absolute path to the ``.pem`` file that contains
                      both the TLS certificate and key.

                  * - :setting:`net.tls.CAFile`
                    - The absolute path to the ``.pem`` file that contains
                      the root certificate chain from the Certificate
                      Authority.

                  * - :setting:`net.bindIp`
                    - ``localhost``, followed by any other hostnames on which the
                      :binary:`~bin.mongos` should listen for client connections.

               .. code-block:: yaml

                  sharding:
                     configDB: configReplSet/mongodb7.example.net:27019,mongodb8.example.net:27019,mongodb9.example.net:27019
                  security:
                     clusterAuthMode: x509
                  net:
                     tls:
                        mode: requireTLS
                        certificateKeyFile: <FILE_WITH_COMBINED_CERT_AND_KEY>
                        CAFile: <CA_FILE>
                     bindIp: localhost,<hostname(s)>

               Include any additional options appropriate for your deployment.

      #. Deploy the mongos.

         Deploy the :binary:`mongos` with your specified configuration:

         .. code-block:: sh

            mongos --config <PATH_TO_CONFIG_FILE>


   .. step:: Restart the Initial Replica Set as a Shard
   
      .. _convert-deploy-sharding-infrastructure:

      In this example, your initial replica set is a three-member replica set.
      This step updates the initial replica set so that it can be added as a
      shard to your sharded cluster.
      
      The replica set runs on these hosts:
      
      - ``mongodb0.example.net:27017``
      - ``mongodb1.example.net:27017``
      - ``mongodb2.example.net:27017``
      
      For sharded clusters, you must set the role for each
      :binary:`~bin.mongod` instance in the shard to ``shardsvr``. To specify
      the server role, set the :setting:`sharding.clusterRole` setting in the
      ``mongod`` configuration file.
      
      .. note::
      
         The default port for :binary:`~bin.mongod` instances with the
         ``shardsvr`` role is ``27018``. To use a different port, specify the
         :setting:`net.port` setting.
      
      a. Connect to a member of your initial replica set.
      
         Use :binary:`mongosh` to connect to one of the members of your
         **initial replica set**.
       
         .. tabs::
       
            .. tab:: Keyfile Authentication
               :tabid: keyfile
       
               .. code-block:: sh
       
                  mongosh "mongodb://<username>@mongodb0.example.net:27017"
       
            .. tab:: x.509 Authentication
               :tabid: x509
       
               .. include:: /includes/sharding/convert-repl-set-tutorial/mongosh-tls-options.rst
       
               For example:
       
               .. code-block:: sh
       
                  mongosh "mongodb://<username>@mongodb0.example.net:27017" --tls --tlsCAFile <CA_FILE> --tlsCertificateKeyFile <filename>
      
      #. Determine the replica set's primary and secondaries.
      
         Run :method:`rs.status()` to determine the primary and
         secondaries:
      
         .. code-block:: sh
      
            rs.status()
      
         In the command output, the
         :data:`replSetGetStatus.members[n].stateStr` field indicates which
         member is the primary and which members are secondaries.
      
      #. Restart the secondaries with the ``--shardsvr`` option.
      
         .. warning::
  
            This step requires some downtime for applications
            connected to the replica set secondaries.
  
            After you restart a secondary, any applications that are
            connected to that secondary return a
            ``CannotVerifyAndSignLogicalTime`` error until you perform the
            steps in :ref:`Add the Initial Replica Set as a Shard 
            <convert-add-initial-shard>`.
  
            You can also restart your application to stop it from receiving
            ``CannotVerifyAndSignLogicalTime`` errors.
  
         .. tabs::
  
            .. tab:: Keyfile Authentication
               :tabid: keyfile
  
               i. Connect to a secondary.
  
                  Use :binary:`mongosh` to connect to one of the
                  secondaries.
  
                  .. code-block:: sh
  
                     mongosh "mongodb://<username>@<host>:<port>"
  
               #. Shut down the secondary.
  
                  Run the following commands:
  
                  .. code-block:: javascript
  
                     use admin
                     db.shutdownServer()
  
               #. Edit the secondary's configuration file.
  
                  In the secondary's configuration file, set
                  :setting:`sharding.clusterRole` to ``shardsvr``:
  
                  .. code-block:: yaml
  
                     security:
                        keyFile: <PATH_TO_KEYFILE>
                     replication:
                       replSetName: rs0
                     sharding:
                        clusterRole: shardsvr
                     net:
                        port: 27017
                        bindIp: localhost,<hostname(s)>
  
                  .. include:: /includes/sharding/convert-repl-set-tutorial/include-additional-options.rst
  
               #. Restart the secondary as a shard server.
  
                  Run the following command on the host containing the secondary:
  
                  .. code-block:: sh
  
                     mongod --config <PATH_TO_CONFIG_FILE>
  
               #. Repeat the shut down and restart steps for the other secondary.
  
            .. tab:: x.509 Authentication
               :tabid: x509
   
               i. Connect to a secondary.
  
                  Use :binary:`mongosh` to connect to one of the secondaries.
  
                  .. include:: /includes/sharding/convert-repl-set-tutorial/mongosh-tls-options.rst
  
                  .. code-block:: sh
  
                     mongosh "mongodb://<username>@<host>:<port>" --tls --tlsCAFile <CA_FILE> --tlsCertificateKeyFile <filename>
  
               #. Shut down the secondary.
  
                  Run the following commands:
  
                  .. code-block:: javascript
  
                     use admin
                     db.shutdownServer()
  
               #. Edit the secondary's configuration file.
  
                  In the secondary's configuration file, set
                  :setting:`sharding.clusterRole` to ``shardsvr``:
  
                  .. code-block:: yaml
  
                     replication:
                        replSetName: rs0
                     sharding:
                        clusterRole: shardsvr
                     security:
                        clusterAuthMode: x509
                     net:
                        port: 27017
                        tls:
                           mode: requireTLS
                           certificateKeyFile: <FILE_WITH_COMBINED_CERT_AND_KEY>
                           CAFile: <CA_FILE>
                        bindIp: localhost,<hostname(s)>
  
                  .. include:: /includes/sharding/convert-repl-set-tutorial/additional-tls-options.rst
  
               #. Restart the secondary as a shard server.
  
                  Run the following command on the host containing the secondary:
  
                  .. code-block:: sh
  
                     mongod --config <PATH_TO_CONFIG_FILE>
  
               #. Repeat the shut down and restart steps for the other secondary.

   .. step:: Restart the primary with the ``--shardsvr`` option.

      .. warning::

         This step requires some downtime for applications
         connected to the primary of the replica set.

         After you restart the primary, any applications that are
         connected to the primary return a
         ``CannotVerifyAndSignLogicalTime`` error until you perform the
         steps in :ref:`Add the Initial Replica Set as a Shard
         <convert-add-initial-shard>`.

         You can also restart your application to stop it from receiving
         ``CannotVerifyAndSignLogicalTime`` errors.

      .. tabs::

         .. tab:: Keyfile Authentication
            :tabid: keyfile

            a. Connect to the primary.

               Use :binary:`mongosh` to connect to the primary:

               .. code-block::

                  mongosh "mongodb://<username>@<host>:<port>"

            #. Step down the primary.

               Run the following command:

               .. code-block:: javascript

                  rs.stepDown()

            #. Verify that the step down is complete.

               Run :method:`rs.status()` to confirm that the member you are
               connected to has stepped down and is now a secondary:

               .. code-block:: javascript

                  rs.status()

            #. Shut down the former primary.

               Run the following commands:

               .. code-block:: javascript

                  use admin
                  db.shutdownServer()

               Wait for the shutdown to complete.

            #. Edit the primary's configuration file.

               In the primary's configuration file, set
               :setting:`sharding.clusterRole` to ``shardsvr``:

               .. code-block:: yaml

                  security:
                     keyFile: <PATH_TO_KEYFILE>
                  replication:
                     replSetName: rs0
                  sharding:
                     clusterRole: shardsvr
                  net:
                     port: 27017
                     bindIp: localhost,<hostname(s)>

               .. include:: /includes/sharding/convert-repl-set-tutorial/include-additional-options.rst

            #. Restart the primary as a shard server.

               Run the following command on the host containing the primary:

               .. code-block:: sh

                  mongod --config <PATH_TO_CONFIG_FILE>

         .. tab:: x.509 Authentication
            :tabid: x509

            a. Connect to the primary.

               Use :binary:`mongosh` to connect to one of the secondaries.

               If your deployment uses x.509 authentication, specify these
               :binary:`mongosh` options:

               .. include:: /includes/sharding/convert-repl-set-tutorial/mongosh-tls-options.rst

               .. code-block:: sh

                  mongosh "mongodb://<username>@<host>:<port>" --tls --tlsCAFile <CA_FILE> --tlsCertificateKeyFile <filename>

            #. Step down the primary.

               Run the following command:

               .. code-block:: javascript

                  rs.stepDown()

            #. Verify that the step down is complete.

               Run :method:`rs.status()` to confirm that the member you are
               connected to has stepped down and is now a secondary:

               .. code-block:: javascript

                  rs.status()

            #. Shut down the former primary.

               Run the following commands:

               .. code-block:: javascript

                  use admin
                  db.shutdownServer()

               Wait for the shutdown to complete.

            #. Edit the primary's configuration file.

               In the primary's configuration file, set
               :setting:`sharding.clusterRole` to ``shardsvr``:

               .. code-block:: yaml

                  replication:
                     replSetName: rs0
                  sharding:
                     clusterRole: shardsvr
                  security:
                     clusterAuthMode: x509
                  net:
                     port: 27017
                     tls:
                        mode: requireTLS
                        certificateKeyFile: <FILE_WITH_COMBINED_CERT_AND_KEY>
                        CAFile: <CA_FILE>
                     bindIp: localhost,<hostname(s)>

               .. include:: /includes/sharding/convert-repl-set-tutorial/additional-tls-options.rst

            #. Restart the primary as a shard server.

               Run the following command on the host containing the primary:

               .. code-block:: sh

                  mongod --config <PATH_TO_CONFIG_FILE>

   .. step:: Add the Initial Replica Set as a Shard

      .. _convert-add-initial-shard:

      After you convert the initial replica set (``rs0``) to a shard, add it
      to the sharded cluster.

      a. Connect to the ``mongos`` as your cluster's administrative user.

         The ``mongos`` instance is running on host
         ``mongodb6.example.net``.

         .. tabs::

            .. tab:: Keyfile Authentication
               :tabid: keyfile

               To connect ``mongosh`` to the ``mongos``,  run the following
               command:

               .. code-block:: sh

                  mongosh "mongodb://admin01@mongodb6.example.net:27017"

            .. tab:: x.509 Authentication
               :tabid: x509

               If your deployment uses x.509 authentication, specify these
               :binary:`mongosh` options:

               .. include:: /includes/sharding/convert-repl-set-tutorial/mongosh-tls-options.rst

               .. code-block:: sh

                  mongosh "mongodb://admin01@mongodb6.example.net:27017" --tls --tlsCAFile <CA_FILE> --tlsCertificateKeyFile <filename>

         This command authenticates you as the ``admin01`` user you created
         on the sharded cluster. After you enter the command, enter your
         user's password.

      #. Add the shard.

         To add a shard to the cluster, run the :method:`sh.addShard`
         method:

         .. code-block:: javascript

            sh.addShard( "rs0/mongodb0.example.net:27017,mongodb1.example.net:27017,mongodb2.example.net:27017" )

         .. warning::

            Once the new shard is active, ``mongosh`` and other clients must
            **always** connect to the ``mongos`` instance. Do not connect
            directly to the ``mongod`` instances. If your clients connect to
            shards directly, you may create data or metadata inconsistencies.


   .. step:: Update Your Application Connection String
      
      .. _convert-update-app-strings:

      After you add the first shard to your cluster, update the
      :ref:`connection string <mongodb-uri>` used by your applications to the
      connection string for your sharded cluster. Then, restart your
      applications.


   .. step:: Deploy a Second Replica Set
   
      .. _convert-add-second-shard:

      Deploy a new replica set called ``rs1``. The members of replica set
      ``rs1`` are on the following hosts:
      
      - ``mongodb3.example.net``
      - ``mongodb4.example.net``
      - ``mongodb5.example.net``
      
      a. Start each member of the replica set.
      
         .. tabs::
      
            .. tab:: Keyfile Authentication
               :tabid: keyfile
      
               For each :binary:`mongod` instance in the replica set,
               create a configuration file with these options:
      
               .. list-table::
                  :header-rows: 1
      
                  * - Option
                    - Value
      
                  * - :setting:`security.keyFile`
                    - The path to the key file used for your initial
                      replica set.
      
                  * - :setting:`replication.replSetName`
                    - ``rs1``
      
                  * - :setting:`sharding.clusterRole`
                    - ``shardsvr``
      
                  * - :setting:`net.bindIp`
                    - ``localhost``, followed by any other hostnames on
                      which the :binary:`mongod` should listen for client
                      connections.
      
               .. code-block:: yaml
      
                  security:
                     keyFile: <PATH_TO_KEYFILE>
                  replication:
                     replSetName: rs1
                  sharding:
                     clusterRole: shardsvr
                  net:
                     bindIp: localhost,<hostname(s)>
     
               .. include:: /includes/sharding/convert-repl-set-tutorial/include-additional-options.rst
      
            .. tab:: x.509 Authentication
               :tabid: x509
      
               For each member, start a :binary:`mongod` with the
               following options:
      
               .. list-table::
                  :header-rows: 1
      
                  * - Option
                    - Value
      
                  * - :setting:`replication.replSetName`
                    - ``rs1``
      
                  * - :setting:`sharding.clusterRole`
                    - ``shardsvr``
      
                  * - :setting:`security.clusterAuthMode`
                    - ``x509``
      
                  * - :setting:`net.tls.mode`
                    - ``requireTLS``
      
                  * - :setting:`net.tls.certificateKeyFile`
                    - The absolute path to the ``.pem`` file that contains
                      both the TLS certificate and key.
      
                  * - :setting:`net.tls.CAFile`
                    - The absolute path to the ``.pem`` file that contains
                      the root certificate chain from the Certificate
                      Authority.
      
                  * - :setting:`net.bindIp`
                    - ``localhost``, followed by any other hostnames on
                      which the :binary:`mongod` should listen for client
                      connections.
      
               .. code-block:: yaml
      
                  replication:
                     replSetName: rs1
                  sharding:
                     clusterRole: shardsvr
                  security:
                     clusterAuthMode: x509
                  net:
                     tls:
                        mode: requireTLS
                        certificateKeyFile: <FILE_WITH_COMBINED_CERT_AND_KEY>
                        CAFile: <CA_FILE>
                     bindIp: localhost,<hostname(s)>
      
         Deploy the :binary:`mongod` with your specified configuration:
      
         .. code-block:: sh
   
            mongod --config <PATH_TO_CONFIG_FILE>
  
         .. note::
  
            When you specify the ``--shardsvr`` option for a
            :binary:`mongod` instance, the instance runs on port ``27018``
            by default.
      
      #. Start each member of the replica set.
      
      #. Connect to a replica set member.
      
         Use :binary:`mongosh` to connect to one of the replica set
         members. For example:
  
         .. tabs::
            :hidden:
  
            .. tab:: Keyfile Authentication
               :tabid: keyfile
  
               .. code-block:: sh
  
                  mongosh "mongodb://mongodb3.example.net:27018"
  
            .. tab:: x.509 Authentication
               :tabid: x509
  
               .. code-block:: sh
  
                  mongosh "mongodb://mongodb3.example.net:27018" --tls --tlsCAFile <CA_FILE> --tlsCertificateKeyFile <filename>
       
      #. Initiate the replica set.
      
         In :binary:`mongosh`, run the :method:`rs.initiate()`
         method to initiate a replica set that contains the current member:
  
         .. code-block:: javascript
  
            rs.initiate( {
               _id : "rs1",
               members: [
                   { _id: 0, host: "mongodb3.example.net:27018" },
                   { _id: 1, host: "mongodb4.example.net:27018" },
                   { _id: 2, host: "mongodb5.example.net:27018" }
               ]
            } )
  
         .. include:: /includes/sharding/convert-repl-set-tutorial/localhost-exception-preceding.rst
  
         .. important::
  
            .. include:: /includes/fact-rs-initiate-once-only.rst
      
      #. Add an administrative user for the replica set.
      
         After you deploy the replica set, use the :ref:`localhost exception
         <localhost-exception>` to create the replica set's first user.
  
         a. Determine the replica set primary.
  
            To determine the primary, run :method:`rs.status()`:

            .. code-block:: sh

               rs.status()

            In the command output, the
            :data:`replSetGetStatus.members[n].stateStr` field indicates
            which member is the primary.
  
         #. Connect to the replica set primary.
  
            Connect to the replica set primary with :binary:`mongosh`.
            For example, if the primary is ``mongodb4.example.net``, run
            this command:

            .. tabs::
               :hidden:

               .. tab:: Keyfile Authentication
                  :tabid: keyfile

                  .. code-block:: sh

                     mongosh "mongodb://mongodb4.example.net:27018"
  
                  .. tab:: x.509 Authentication
                     :tabid: x509
 
                     .. code-block:: sh
  
                        mongosh "mongodb://mongodb4.example.net:27018" --tls --tlsCAFile <CA_FILE> --tlsCertificateKeyFile <filename>
      
         #. Create an administrative user.
      
            Run the following :method:`db.createUser()` method to create
            a user named ``rs1Admin`` with the :authrole:`userAdmin`
            role:

            .. code-block:: javascript

               use admin

               db.createUser(
                  {
                     user: "rs1Admin",
                     pwd: passwordPrompt(),
                     roles: [
                        { role: "userAdmin", db: "admin" }
                     ]
                  }
               )

            After you run the command, the database prompts you to enter a
            password for the ``rs1Admin`` user.

   .. step:: Add the Second Replica Set to the Cluster as a Shard

      Add the new replica set, ``rs1``, to the sharded cluster.
      
      a. Connect ``mongosh`` to the ``mongos``.
      
         Run the following command **from the command line** to connect to
         the ``mongos`` instance running on host ``mongodb6.example.net``:
      
         .. tabs::
            :hidden:
      
           .. tab:: Keyfile Authentication
              :tabid: keyfile
      
              .. code-block:: sh
      
                 mongosh "mongodb://admin01@mongodb6.example.net:27017/admin"
      
           .. tab:: x.509 Authentication
              :tabid: x509
      
              .. code-block:: sh
              
                 mongosh "mongodb://admin01@mongodb6.example.net:27017/admin" --tls --tlsCAFile <CA_FILE> --tlsCertificateKeyFile <filename>
      
         This command authenticates you as the ``admin01`` user you created
         on the sharded cluster. After you enter the command, enter your
         user's password.
      
      #. Add the second shard.
      
         After you connect to the :binary:`mongos`, add the replica set
         ``rs1`` as a shard to the cluster with the :method:`sh.addShard()`
         method:
      
         .. code-block:: javascript
      
            sh.addShard( "rs1/mongodb3.example.net:27018,mongodb4.example.net:27018,mongodb5.example.net:27018" )

   .. step:: Shard a Collection

      The final step of the procedure is to shard a collection in the sharded
      cluster.
      
      a. Determine the shard key.

         Determine the :ref:`shard key <sharding-shard-key>` for the
         collection. The shard key indicates how MongoDB distributes the
         documents between shards. Good shard keys:

         - Have values that are evenly distributed among all documents.
         - Group documents that are often accessed at the same time into
           contiguous chunks.
         - Allow for effective distribution of activity among shards.

         For more information, see :ref:`sharding-shard-key-selection`.

         This procedure uses the ``number`` field as the shard key for
         the ``test_collection`` collection.

      #. Create an index on the shard key.

         Before you shard a non-empty collection, create an index on the
         shard key:

         .. code-block:: javascript

            use test
            db.test_collection.createIndex( { "number" : 1 } )

      #. Shard the collection.

         In the ``test`` database, shard the ``test_collection``.
         Specify ``number`` as the shard key.

         .. code-block:: javascript

            sh.shardCollection( "test.test_collection", { "number" : 1 } )

         The next time that the :ref:`balancer <sharding-balancing>` runs,
         it redistributes chunks of documents between shards. As clients
         insert additional documents into this collection, the
         :binary:`mongos` routes the documents to the appropriate
         shard.

         When the balancer redistributes chunks, it may negatively
         impact your application's performance. To minimize performance
         impact, you can specify when the balancer runs so it does not
         run during peak hours. To learn more, see
         :ref:`sharding-schedule-balancing-window`.

Learn More
----------

For more sharding tutorials and procedures, see these pages:

- :ref:`sharding-manage-shards`
- :ref:`back-up-sharded-cluster-metadata`
- :ref:`sharding-high-availability`
