.. _authentication:

==============
Authentication
==============

.. default-domain:: mongodb

Authentication is the process of verifying the identity of a
client. When enabled, MongoDB requires all clients to provide
credentials to access MongoDB databases. By default, MongoDB does not
require authentication.

MongoDB supports a number of authentication mechanisms, or methods
clients can use to validate their identity. These mechanisms allow
MongoDB to integrate into existing authentication systems that your
environments may use. MongoDB's default authentication method is a
challenge and response mechanism. MongoDB also supports x509
certificate authentication, LDAP proxy authentication, and Kerberos
authentication.

With authentication, MongoDB requires authentication for all clients,
including connections between all MongoDB components in a deployment.
See :ref:`inter-process-auth-key-file` for more information.

Authentication is distinct from :ref:`authorization <authorization>`,
which determines the client's access to resources and operations.

Authentication Mechanisms and Credential Storage
------------------------------------------------

MongoDB supports multiple authentication mechanisms to fit into
existing deployments and use existing authentication infrastructure.
To declare a specific authentication mechanism use the
:parameter:`authenticationMechanisms` parameter. For details, see
:doc:`/tutorial/enable-authentication`.

MongoDB represents authentication credentials differently depending on
authentication mechanism. This section addresses all available methods
and describes how each method stores user credentials.

.. _replica-set-security:

``MONGODB-CR`` Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``MONGODB-CR`` is a challenge-response mechanism that authenticates users
through passwords. ``MONGODB-CR`` applies by default when you enable
authentication in MongoDB without setting a mechanism in the
:parameter:`authenticationMechanisms` parameter. You can also explicitly
apply ``MONGODB-CR`` by setting it as the value of
:parameter:`authenticationMechanisms`.

:setting-When you enable ``MONGODB-CR`` authentication using the
:`auth` setting, MongoDB uses the credentials stored in the
``admin`` database's :data:`system.users <admin.system.users>` collection.

When you enable ``MONGODB-CR`` authentication using the :setting:`keyFile`
setting, you must store the key file on each :program:`mongod` or
:program:`mongos` instance. MongoDB uses the key file as stored on each
instance. See :doc:`/tutorial/generate-key-file` for instructions on
generating a key file.

.. _inter-process-auth-x509:

x.509 Certificate Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.6

MongoDB supports x.509 certificate authentication for use with a secure
:doc:`SSL connection </tutorial/configure-ssl>`.

Instead of usernames and passwords, clients can use certificates to
authenticate to servers.

Instead of key files, MongoDB instances can use certificates to
authenticate to sharded clusters and replica sets.

When used to verify membership in a sharded cluster or replica set, an
x.509 certificate must have certain properties, as described in
:ref:`x509-internal-authentication`.

For more information, see :doc:`/tutorial/configure-x509`.

Kerberos Authentication
~~~~~~~~~~~~~~~~~~~~~~~

`MongoDB Enterprise <http://www.mongodb.com/products/mongodb-enterprise>`_
supports authentication using a Kerberos service. Kerberos is an industry
standard authentication protocol for large client/server system.

To use MongoDB with Kerberos, you must have a properly configured Kerberos
deployment and the ability to generate valid *keytab* files.

When you use MongoDB with Kerberos, you must store a *keytab* file on each
:program:`mongod` and :program:`mongos` instance. Transmit keytab files
only over secure channels.

You must create corresponding user credentials in the :data:`system.users
<admin.system.users>` collection on the ``admin`` database.

For more information, see
:doc:`/tutorial/control-access-to-mongodb-with-kerberos-authentication`.

LDAP Proxy Authority Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`MongoDB Enterprise <http://www.mongodb.com/products/mongodb-enterprise>`_
supports proxy authentication through a Lightweight Directory Access
Protocol (LDAP) service. See
:doc:`/tutorial/configure-ldap-sasl-authentication`.

.. include:: /includes/admonition-mongodb-enterprise-windows-ldap.rst

MongoDB does **not** support LDAP authentication in mixed sharded cluster
deployments that contain both version 2.4 and version 2.6 shards. To
upgrade to 2.6, see :doc:`/release-notes/2.6-upgrade` for upgrade
instructions.

.. seealso:: :ref:`ldap-mixed-mode-incompatibility`

Authentication Behavior
-----------------------

.. _client-authentication:

Client Authentication
~~~~~~~~~~~~~~~~~~~~~

Each client connection should authenticate as exactly one user. If a
client authenticates to a database as one user and later authenticates on
the same database as a different user, the second authentication
invalidates the first. A client can log into a *different* database as a
different user and not invalidate the authentication on other databases,
though this is not a recommended approach.

See :doc:`/tutorial/authenticate-as-client`

.. _inter-process-auth-key-file:

Authentication Between MongoDB Instances
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

All MongoDB Deployments
```````````````````````

:term:`Replica sets <replica set>` and :term:`sharded clusters <sharded
cluster>` require authentication between MongoDB instances. The default
mechanism for authentication between MongoDB instances is the
:setting:`keyFile` setting. The key file serves as a shared password. The
content of the key file is arbitrary but must be the same on all
:program:`mongod` and :program:`mongos` instances that connect to each
other.

Always run replica sets and sharded clusters in a trusted networking
environment. Ensure that the network permits only trusted traffic to reach
each :program:`mongod` and :program:`mongos` instance.

Use your environment's firewall and network routing to ensure that traffic
*only* from clients and other members can reach your :program:`mongod` and
:program:`mongos` instances. If needed, use virtual private networks
(VPNs) to ensure secure connections over wide area networks (WANs).

Always ensure that:

- Your network configuration will allow every member of the replica set or
  sharded cluster to contact every other member.

- If you use MongoDB's authentication system to limit access to your
  infrastructure, ensure that you configure a :setting:`keyFile` on all
  members to permit authentication.

.. index:: sharding; localhost
.. _sharding-localhost:
.. _sharding-security:

Authentication on Sharded Clusters
``````````````````````````````````

In a sharded cluster, you can authenticate to the cluster as a whole, to a
specific database on the cluster, or to a given shard. This section
describes how to authenticate to each and where the credentials for
authenticating to each are stored.

To authenticate as an administrator of a **sharded cluster**, authenticate
to the program:`mongos` instance. The credentials for authenticating as an
administrator of a cluster reside on the ``admin`` databases of the
ref:`config servers <sharding-config-server>`.

To authenticate to a given database in the sharded cluster, authenticate
to the program:`mongos` instance. The credentials for authenticating to a
database on a cluster reside on the :program:`mongod` instance that is the
:ref:`primary shard <primary-shard>` for that database.

For additional information, see
:doc:`/tutorial/enable-authentication-in-sharded-cluster`.
