.. facet::
   :name: programming_language
   :values: csharp, java, javascript/typescript, python, shell

.. _return-vector-search-results:

=========================
Run Vector Search Queries 
=========================

.. default-domain:: mongodb

.. meta::
   :keywords: code example, sample dataset, motor, java sync, node.js, .NET

.. facet::
   :name: genre
   :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

{+avs+} queries take the form of an 
:manual:`aggregation pipeline stage </aggregation>`. For the
:pipeline:`$vectorSearch` queries, {+avs+} returns the results of your
semantic search.

.. note:: 

   {+avs+} supports |ann| search on {+clusters+} running MongoDB
   v6.0.11, v7.0.2, or later and |enn| search on {+clusters+} running
   MongoDB v6.0.16, v7.0.10, v7.3.2, or later.

.. _vectorSearch-agg-pipeline:

Definition
----------

The :pipeline:`$vectorSearch` stage performs an |ann| or |enn| search on
a vector in the specified field. 

|ann| Search 
~~~~~~~~~~~~

For |ann| search, {+avs+} finds vector embeddings in your data that are
closest to the vector embedding in your query based on their proximity
in multi-dimensional space and based on the number of neighbors that it
considers. It uses the |hnsw| algorithm and finds the vector embeddings
most similar to the vector embedding in your query without scanning
every vector. Therefore, |ann| search is ideal for querying large
datasets without significant filtering.

|enn| Search 
~~~~~~~~~~~~

For |enn| search, {+avs+} exhaustively searches all the indexed vector
embeddings by calculating the distance between all the embeddings 
and finds the exact nearest neighbor for the vector embedding in your
query. This is computationally intensive and might negatively impact
query latency. Therefore, we recommend |enn| searches for the following
use-cases:

- You want to determine the recall and accuracy of your |ann| query
  using the ideal, exact results for the |enn| query.
- You want to query less than 10000 documents without having to tune the 
  number of nearest neighbors to consider.
- Your want to include selective pre-filters in your query against
  collections where less than 5% of your data meets the given pre-filter.

Syntax 
------

The field that you want to search must be indexed as {+avs+}
:ref:`vector <avs-types-vector>` type inside a :ref:`vectorSearch 
<avs-types-vector-search>` index type. 

.. pipeline:: $vectorSearch

   A ``$vectorSearch`` pipeline has the following prototype form: 

   .. code-block:: json 

      {
        "$vectorSearch": {
          "exact": true | false,
          "filter": {<filter-specification>},
          "index": "<index-name>",
          "limit": <number-of-results>,
          "numCandidates": <number-of-candidates>,
          "path": "<field-to-search>",
          "queryVector": [<array-of-numbers>]
        }
      }

.. _vectorSearch-agg-pipeline-options:

Fields 
------

The ``$vectorSearch`` stage takes a document with the following fields: 

.. list-table:: 
   :header-rows: 1
   :widths: 10 15 15 70

   * - Field 
     - Type 
     - Necessity 
     - Description

   * - ``exact``
     - boolean
     - Optional 
     - This is required if ``numCandidates`` is omitted. 

       Flag that specifies whether to run |enn| or |ann| search. Value
       can be one of the following: 
 
       - ``false`` - to run |ann| search 
       - ``true`` - to run |enn| search

       If omitted, defaults to ``false``. 

       |enn| search is supported on |service| {+clusters+} running
       MongoDB version 6.0.16, 7.0.10, 7.32, or later.

   * - ``filter``
     - document
     - Optional
     - Any :abbr:`MQL (MongoDB Query Language)` match expression that
       compares an indexed field with a boolean, date, objectId, number 
       (not decimals), or string to use as a pre-filter. 
       To learn which :manual:`query
       </reference/operator/query/>` and :manual:`aggregation 
       pipeline </reference/operator/aggregation/>` operators {+avs+} supports
       in your filter, see :ref:`vectorSearch-agg-pipeline-filter`.

   * - ``index`` 
     - string 
     - Required 
     - Name of the {+avs+} index to use.
       
       {+avs+} doesn't return results if you misspell the index name or 
       if the specified index doesn't already exist on the {+cluster+}.

   * - ``limit`` 
     - number 
     - Required 
     - Number (of type ``int`` only) of documents to return in the
       results. This alue can't exceed the value of ``numCandidates`` if
       you specify ``numCandidates``.

   * - ``numCandidates``
     - number 
     - Optional 
     - This field is required if ``exact`` is ``false`` or omitted.
       
       Number of nearest neighbors to use during the search. Value must 
       be less than or equal to (``<=``) ``10000``. You can't specify a
       number less than the number of documents to return (``limit``).
       
       We recommend that you specify a number higher than the number of
       documents to return (``limit``) to increase accuracy although
       this might impact latency. For example, we recommend a ratio of
       ten to twenty nearest neighbors for a limit of only one document.
       This overrequest pattern is the recommended way to trade off
       latency and recall in your |ann| searches, and we recommend
       tuning this on your specific dataset. 

   * - ``path``
     - string 
     - Required 
     - Indexed :ref:`vectorEmbedding <fts-data-types-knn-vector>`
       type field to search. To learn more, see :ref:`Path Construction
       <ref-path>`. 

   * - ``queryVector``
     - array of numbers 
     - Required 
     - Array of numbers of the |bson| ``double`` type that represent the
       query vector. The array size must match the number of vector
       ``dimensions`` specified in the :ref:`index definition
       <fts-data-types-knn-vector>` for the field. 

       .. note:: 

          You must embed your query with the same model that you used to
          embed the data.

.. _vectorSearch-agg-pipeline-behavior:

Behavior 
--------

:pipeline:`$vectorSearch` must be the first stage of any pipeline where it
appears. 

.. _vectorSearch-agg-pipeline-index:

{+avs+} Index
~~~~~~~~~~~~~~~~~~~~~~~~~

You must index the fields to search using the :pipeline:`$vectorSearch`
stage inside a :ref:`vectorSearch <avs-types-vector-search>` type index
definition. You can index the following types of fields in an {+avs+}
:ref:`vectorSearch <avs-types-vector-search>` type index definition: 

- Fields that contain vector embeddings as :ref:`vector
  <avs-types-vector-search>` type.  
- Fields that contain boolean, date, objectId, numeric, and string values as
  :ref:`filter <avs-types-vector-search>` type to enable vector search
  on pre-filtered data. 

To learn more about these 
{+avs+} field types, see :ref:`avs-types-vector-search`. 

.. _vectorSearch-agg-pipeline-score:

{+avs+} Score
~~~~~~~~~~~~~~~~~~~~~~~~~

{+avs+} assigns a score, in a fixed range from ``0`` to ``1`` 
(where ``0`` indicates low similarity and ``1`` indicates high
similarity), to every document that it returns. For ``cosine`` and
``dotProduct`` :ref:`similarities <fts-knn-vector-type-options>`,
{+avs+} normalizes the score to ensure that the score is not negative.

For ``cosine``, {+avs+} uses the following algorithm to normalize the
score: 

.. code-block:: shell 
   :copyable: false 

   score = (1 + cosine(v1,v2)) / 2

For ``dotProduct``, {+avs+} uses the following algorithm to normalize
the score:  

.. code-block:: shell 
   :copyable: false 

   score = (1 + dotProduct(v1,v2)) / 2

These algorithms show that {+avs+} normalizes the score by considering
the similarity score of the document vector (``v1``) and the query vector
(``v2``), which has the range [``-1``, ``1``]. {+avs+} adds ``1`` to the
similarity score to normalize the score to a range [``0``, ``2``] and
then divides by ``2`` to ensure a value between ``0`` and ``1``.   

For ``euclidean`` similarity, {+avs+} uses the following algorithm to
normalize the score to ensure a value between ``0`` and ``1``: 

.. code-block:: shell 
   :copyable: false 

   score = 1 / (1 + euclidean(v1,v2))

The preceding algorithm shows that {+avs+} normalizes the score by
calculating the euclidean distance, which is the distance between the 
document vector (``v1``) and the query vector (``v2``), which has the range 
[``0``, ``âˆž``]. {+avs+} then transforms the distance to a similarity
score by adding ``1`` to the distance and then divides ``1`` by the
similarity score to ensure a value between ``0`` and ``1``.

The score assigned to a returned document is part of the document's
metadata. To include each returned document's score along with the
result set, use a :pipeline:`$project` stage in your aggregation
pipeline. 

To retrieve the score of your {+avs+} query results, use
``vectorSearchScore`` as the value in the :manual:`$meta 
</reference/operator/aggregation/meta/>` expression. That is, after the
:pipeline:`$vectorSearch` stage, in the :pipeline:`$project` stage, the
``score`` field takes the :manual:`$meta
</reference/operator/aggregation/meta/>` expression. The expression
requires the ``vectorSearchScore`` value to return the score of
documents for the vector search. 

.. example:: 

   .. code-block:: javascript
      :copyable: false
      :linenos:
      :emphasize-lines: 11

      db.<collection>.aggregate([
        {
          "$vectorSearch": {
            <query-syntax>
          }
        },
        {
          "$project": {
            "<field-to-include>": 1,
            "<field-to-exclude>": 0,
            "score": { "$meta": "vectorSearchScore" }
          }
        }
      ]) 

.. include:: /includes/fact-avs-pre-filtering-score-impact.rst

.. _vectorSearch-agg-pipeline-filter:

{+avs+} Pre-Filter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :pipeline:`$vectorSearch` ``filter`` option matches only |bson|
boolean, date, objectId, string, and numeric values. You **must** index the fields
that you want to filter your data by as the :ref:`filter
<avs-types-vector-search>` type in a :ref:`vectorSearch
<avs-types-vector-search>` type index definition. Filtering your data is 
useful to narrow the scope of your semantic search and ensure that not
all vectors are considered for comparison. 

{+avs+} supports the :pipeline:`$vectorSearch` ``filter`` option
for the following :abbr:`MQL (MongoDB Query Language)` 
match expressions, with the exception of certain 
:ref:`limitations <vectorSearch-agg-pipeline-limitations>`:

- :query:`$gt`
- :query:`$lt`
- :query:`$gte`
- :query:`$lte`
- :query:`$eq`
- :query:`$ne`
- :query:`$in`
- :query:`$nin`
- :query:`$nor`
- :expression:`$and`
- :expression:`$or`

The :pipeline:`$vectorSearch` ``filter`` option supports only the following 
:manual:`aggregation pipeline </reference/operator/aggregation/>`
operators: 

- :expression:`$and`
- :expression:`$or`

.. note:: 

   The :pipeline:`$vectorSearch` ``filter`` option doesn't support other
   :manual:`query </reference/operator/query/>`
   and :manual:`aggregation pipeline </reference/operator/aggregation/>`
   operators.    

.. _vectorSearch-agg-pipeline-limitations:

Limitations 
~~~~~~~~~~~

:pipeline:`$vectorSearch` is supported only on |service| {+clusters+}
running the following MongoDB versions: 

- v6.0.11
- v7.0.2 and later (including :abbr:`RCs (Release Candidates)`). 

The :pipeline:`$vectorSearch` ``filter`` option on 
fields with the :ref:`objectId <objectId-ref>` type
does not support the following :abbr:`MQL (MongoDB Query Language)` 
match expressions:

- :query:`$gt`
- :query:`$lt`
- :query:`$gte`
- :query:`$lte`

:pipeline:`$vectorSearch` can't be used in 
:manual:`view definition </core/views/>` and the following pipeline
stages:  

- :pipeline:`$lookup` sub-pipeline :icon-fa5:`star`
- :pipeline:`$unionWith` sub-pipeline :icon-fa5:`star`
- :pipeline:`$facet` pipeline stage

:icon-fa5:`star` You can pass the results of :pipeline:`$vectorSearch`
to this stage.

.. _vectorSearch-agg-pipeline-clients:

Supported Clients
~~~~~~~~~~~~~~~~~

You can run :pipeline:`$vectorSearch` queries using the |service|
:guilabel:`Data Explorer`, {+mongosh+}, and the following drivers: 

- :driver:`C# </csharp/current/>`
- :driver:`Java </java-drivers/>`
- :driver:`Node </node/current/>`
- :driver:`Pymongo </pymongo/>`

You can also use {+avs+} with local |service| deployments that you
create with the {+atlas-cli+}. To learn more, see :atlascli:`Create a
Local Atlas Deployment </atlas-cli-deploy-local>`. 

.. _vectorSearch-concurrent-queries:

Parallel Query Execution Across Segments 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We recommend dedicated :ref:`Search Nodes <configure-search-nodes>`
to isolate vector search query processing. You might see improved query 
performance on the dedicated Search Nodes. Note that the high-CPU systems
might provide more performance improvement. When {+avs+} runs on search
nodes, {+avs+} parallelizes query execution across segments of data. 

Parallelization of query processing improves the response time in many
cases, such as queries on large datasets. Using intra-query parallelism
during {+avs+} query processing utilizes more resources, but improves
latency for each individual query. 

.. note:: 

   {+avs+} doesn't guarantee that each query will run concurrently. For
   example, when too many concurrent queries are queued, {+avs+} might
   fall back to single-threaded execution.

.. _vectorSearch-agg-pipeline-egs:
 
Examples 
--------

The following queries search the sample ``sample_mflix.embedded_movies``
collection using the :pipeline:`$vectorSearch` stage. The queries search
the ``plot_embedding`` field, which contains embeddings created using
OpenAI's ``text-embedding-ada-002`` embeddings model. If you added the
:ref:`sample collection <mflix-embedded_movies>` to your |service|
{+cluster+} and created the :ref:`sample indexes <avs-types-vector-search-egs>` 
for the collection, you can run the following queries against the
collection. 

.. note:: 

   Pasting the ``queryVector`` from the sample code into your terminal
   might take a while depending on your machine.  

.. tabs-selector:: drivers

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu to set the
language of the examples in this page.

----------

|ann| Examples 
~~~~~~~~~~~~~~

.. tabs-drivers::

   .. tab::
      :tabid: shell 

      .. tabs:: 

         .. tab:: Basic Example 
            :tabid: basic 

            .. include:: /includes/extracts/avs-basic-query-desc.rst

            .. io-code-block::
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/basic-query.sh
                  :language: json
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/basic-query-shell-output.js
                  :language: js
                  :linenos: 

         .. tab:: Filter Example 
            :tabid: filter 

            .. include:: /includes/extracts/avs-filter-query-desc.rst

            .. io-code-block:: 
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/filter-query.sh
                  :language: json
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/filter-query-shell-output.js 
                  :language: js
                  :linenos: 

            .. include:: /includes/extracts/avs-filter-query-results.rst          

   .. tab::
      :tabid: csharp 

      .. tabs:: 

         .. tab:: Basic Example 
            :tabid: basic 

            .. include:: /includes/extracts/avs-basic-query-desc.rst

            .. io-code-block::
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/basic-query.cs
                  :language: csharp
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/basic-query-csharp-output.js
                  :language: js
                  :linenos: 

         .. tab:: Filter Example 
            :tabid: filter 

            .. include:: /includes/extracts/avs-filter-query-desc.rst

            .. io-code-block:: 
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/filter-query.cs 
                  :language: csharp
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/filter-query-csharp-output.js  
                  :language: js
                  :linenos: 

            .. include:: /includes/extracts/avs-filter-query-results.rst    

   .. tab:: 
      :tabid: java-sync 

      .. tabs:: 

         .. tab:: Basic Example 
            :tabid: basic 

            .. include:: /includes/extracts/avs-basic-query-desc.rst

            .. io-code-block::
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/basic-query.java
                  :language: java
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/basic-query-java-output.js 
                  :language: js
                  :linenos: 

         .. tab:: Filter Example 
            :tabid: filter 

            .. include:: /includes/extracts/avs-filter-query-desc.rst

            .. io-code-block:: 
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/filter-query.java 
                  :language: java
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/filter-query-java-output.js  
                  :language: js
                  :linenos: 

            .. include:: /includes/extracts/avs-filter-query-results.rst    


   .. tab::
      :tabid: nodejs

      .. tabs:: 

         .. tab:: Basic Example 
            :tabid: basic 

            .. include:: /includes/extracts/avs-basic-query-desc.rst

            .. io-code-block::
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/basic-query.js
                  :language: js
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/basic-query-nodejs-output.js 
                  :language: js
                  :linenos: 

         .. tab:: Filter Example 
            :tabid: filter 

            .. include:: /includes/extracts/avs-filter-query-desc.rst

            .. io-code-block:: 
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/filter-query.js 
                  :language: js
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/filter-query-nodejs-output.js  
                  :language: js
                  :linenos: 

            .. include:: /includes/extracts/avs-filter-query-results.rst    


   .. tab::
      :tabid: python

      .. tabs:: 

         .. tab:: Basic Example 
            :tabid: basic 

            .. include:: /includes/extracts/avs-basic-query-desc.rst

            .. io-code-block::
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/basic-query.py 
                  :language: python
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/basic-query-python-output.js
                  :language: js
                  :linenos: 

         .. tab:: Filter Example 
            :tabid: filter 

            .. include:: /includes/extracts/avs-filter-query-desc.rst

            .. io-code-block:: 
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/filter-query.py 
                  :language: python
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/filter-query-python-output.js  
                  :language: js
                  :linenos: 

            .. include:: /includes/extracts/avs-filter-query-results.rst    

|enn| Example 
~~~~~~~~~~~~~

.. include:: /includes/extracts/avs-enn-query-description.rst

.. tabs-drivers::

   .. tab::
      :tabid: shell 

      .. io-code-block::
         :copyable: true 

         .. input:: /includes/avs-examples/pipeline-stage-examples/enn-basic-query.sh
            :language: shell
            :linenos: 

         .. output:: /includes/avs-examples/pipeline-stage-examples/enn-basic-query-shell-output.js 
            :language: js
            :linenos: 

   .. tab::
      :tabid: csharp 

      .. code-block:: shell
         :copyable: false

         Not yet available.

   .. tab:: 
      :tabid: java-sync 

      .. code-block:: shell
         :copyable: false

         Not yet available.

   .. tab::
      :tabid: nodejs

      .. io-code-block::
         :copyable: true 

         .. input:: /includes/avs-examples/pipeline-stage-examples/enn-basic-query.js
            :language: js
            :linenos: 

         .. output:: /includes/avs-examples/pipeline-stage-examples/enn-basic-query-nodejs-output.js 
            :language: js
            :linenos: 

   .. tab::
      :tabid: python

      .. io-code-block::
         :copyable: true

         .. input:: /includes/avs-examples/pipeline-stage-examples/enn-basic-query.py
            :language: python
            :linenos: 

         .. output:: /includes/avs-examples/pipeline-stage-examples/enn-basic-query-py-output.js 
            :language: js
            :linenos:
