# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/write-operations-introduction.txt:6
# dd10fa9fbf744b7184f3590ade07b690
msgid "Write Operations Overview"
msgstr ""

#: ../source/core/write-operations-introduction.txt:10
# 97bf5b0dba6a41bf82e64211aa664d31
msgid "A write operation is any operation that creates or modifies data in the MongoDB instance. In MongoDB, write operations target a single :term:`collection`. All write operations in MongoDB are atomic on the level of a single :term:`document`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:15
# ec61d94bba5e426e92c9e7c487a43ea9
msgid "There are three classes of write operations in MongoDB: :ref:`insert <write-op-insert>`, :ref:`update <write-op-update>`, and :ref:`remove <write-op-remove>`. Insert operations add new data to a collection. Update operations modify existing data, and remove operations delete data from a collection. No insert, update, or remove can affect more than one document atomically."
msgstr ""

#: ../source/core/write-operations-introduction.txt:22
# 04240debb8704abc9d6b9d4600e8e92f
msgid "For the update and remove operations, you can specify criteria, or conditions, that identify the documents to update or remove. These operations use the same query syntax to specify the criteria as :doc:`read operations </core/read-operations>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:27
# de2c8e96c12b495bb1318de097d9b1e4
msgid "MongoDB allows applications to determine the acceptable level of acknowledgement required of write operations. See :doc:`/core/write-concern` for more information."
msgstr ""

#: ../source/core/write-operations-introduction.txt:34
# c84f1c023aed47f3b7526ca77f591277
msgid "Insert"
msgstr ""

#: ../source/core/write-operations-introduction.txt:36
# 437f11c829b84716a28e9f3828437b8f
msgid "In MongoDB, the :method:`db.collection.insert()` method adds new :term:`documents <document>` to a collection."
msgstr ""

#: ../source/core/write-operations-introduction.txt:39
# 99ca69a4ed4b47c883382b8060983c7c
msgid "The following diagram highlights the components of a MongoDB insert operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:44
#: ../source/core/write-operations-introduction.txt:109
#: ../source/core/write-operations-introduction.txt:188
# 45b9c43c491f4517b6753f5eebe15cf0
# be2107dc4dd04f49b1c25cc89be5293a
# 79b32d98bdbd46aabf53c819fe2e22a2
msgid "The following diagram shows the same query in SQL:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:0
#: ../source/core/write-operations-introduction.txt:0
#: ../source/core/write-operations-introduction.txt:0
# 922fcddefaba44b0a581c809ce31718c
# 1f129e37f84341f386241eb886260910
# 9101c09e1627483aa01854c4b5154988
msgid "Example"
msgstr ""

#: ../source/core/write-operations-introduction.txt:50
# 3b4a846bfcf54ba3b293770173ef8468
msgid "The following operation inserts a new document into the ``users`` collection. The new document has four fields ``name``, ``age``, and ``status``, and an ``_id`` field. MongoDB always adds the ``_id`` field to the new document if that field does not exist."
msgstr ""

#: ../source/core/write-operations-introduction.txt:65
# ff774ce375bf423a9b95af93d45ae64e
msgid "For more information and examples, see :method:`db.collection.insert()`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:68
# c30f055ae0a548dbb758846ecc60f315
msgid "Insert Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:70
# 06567a9654c7421da19377fac6cbeaa5
msgid "If you add a new document *without* the :term:`_id` field, the client library or the :program:`mongod` instance adds an ``_id`` field and populates the field with a unique :term:`ObjectId <objectid>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:74
# 94b4bd452fb8453395fe4ac32b115f63
msgid "If you specify the ``_id`` field, the value must be unique within the collection. For operations with :ref:`write concern <write-concern>`, if you try to create a document with a duplicate ``_id`` value, :program:`mongod` returns a duplicate key exception."
msgstr ""

#: ../source/core/write-operations-introduction.txt:80
# e07350165ace4a05a5e95c19e8f231c0
msgid "Other Methods to Add Documents"
msgstr ""

#: ../source/core/write-operations-introduction.txt:82
# c69d1111fdd84d0bbc0f94d32dc5b1d4
msgid "You can also add new documents to a collection using methods that have an :ref:`upsert <write-operations-upsert-behavior>` option. If the option is set to ``true``, these methods will either modify existing documents or add a new document when no matching documents exist for the query. For more information, see :ref:`write-operations-upsert-behavior`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:91
# 25b6a3e4d053421d96408c2914033dc1
msgid "Update"
msgstr ""

#: ../source/core/write-operations-introduction.txt:93
# 2237b3e02a3e4b8390b657b11ce5589f
msgid "In MongoDB, the :method:`db.collection.update()` method modifies existing :term:`documents <document>` in a :term:`collection`. The :method:`db.collection.update()` method can accept query criteria to determine which documents to update as well as an options document that affects its behavior, such as the ``multi`` option to update multiple documents."
msgstr ""

#: ../source/core/write-operations-introduction.txt:100
# a85c925c7a2947a0902cf18821fe628f
msgid "Operations performed by an update are atomic within a single document. For example, you can safely use the :update:`$inc` and :update:`$mul` operators to modify frequently-changed fields in concurrent applications."
msgstr ""

#: ../source/core/write-operations-introduction.txt:104
# ba17d35cc3504fb7aaf48ef6dd8cc839
msgid "The following diagram highlights the components of a MongoDB update operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:123
# 7c4266e86b50462a9a6cae1db90c3992
msgid "This update operation on the ``users`` collection sets the ``status`` field to ``A`` for the documents that match the criteria of ``age`` greater than ``18``."
msgstr ""

#: ../source/core/write-operations-introduction.txt:127
# b818bef9ea6a4d48bdfe906b14eba731
msgid "For more information, see :method:`db.collection.update()` and :ref:`update() Examples <update-method-examples>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:133
# f376f59e2694402bbd6eb392834195f8
msgid "Default Update Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:135
# e4c1a1acbbb64a2e8e740768cf09a552
msgid "By default, the :method:`db.collection.update()` method updates a **single** document. However, with the ``multi`` option, :method:`~db.collection.update()` can update all documents in a collection that match a query."
msgstr ""

#: ../source/core/write-operations-introduction.txt:140
# 8ad19039a58a4206bd3502526798525b
msgid "The :method:`db.collection.update()` method either updates specific fields in the existing document or replaces the document. See :method:`db.collection.update()` for details as well as examples."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:1
# 507c3c9480fc46a687b9a1d51791af7d
msgid "When performing update operations that increase the document size beyond the allocated space for that document, the update operation relocates the document on disk."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:7
# 9119d560d55645e68f65f4fe3005b355
msgid "MongoDB preserves the order of the document fields following write operations *except* for the following cases:"
msgstr ""

#: ../source/includes/fact-update-field-order.rst:10
# eb7f7ae4b7c945ecb29ff85539ef7283
msgid "The ``_id`` field is always the first field in the document."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:12
# 5304535cd8434de485397af4c586659d
msgid "Updates that include :update:`renaming <$rename>` of field names may result in the reordering of fields in the document."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:17
# c0f56f4d5b62476288dcacee2f57e77c
msgid "Starting in version 2.6, MongoDB actively attempts to preserve the field order in a document. Before version 2.6, MongoDB did not actively preserve the order of the fields in a document."
msgstr ""

#: ../source/core/write-operations-introduction.txt:149
# 76992765dccf4a3a9d06f5d7840023f1
msgid "Update Behavior with the ``upsert`` Option"
msgstr ""

#: ../source/core/write-operations-introduction.txt:151
# 01c7a866f9854f90b19c927a6aaa2698
msgid "If the :method:`~db.collection.update()` method includes :ref:`upsert: true <upsert-parameter>` *and* no documents match the query portion of the update operation, then the update operation creates a new document. If there are matching documents, then the update operation with the :ref:`upsert: true <upsert-parameter>` modifies the matching document or documents."
msgstr ""

#: ../source/core/write-operations-introduction.txt:158
# 69b85ded45904392a1d33a4e26dbbbe9
msgid "By specifying :term:`upsert: true <upsert>`, applications can indicate, in a *single* operation, that if no matching documents are found for the update, an insert should be performed. See :method:`~db.collection.update()` for details on performing an :ref:`upsert <upsert-parameter>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:166
# 6bc137b60e824d27aeb288b8dd6ecabf
msgid "In 2.6, the new :method:`Bulk()` methods and the underlying :dbcommand:`update` command allow you to perform many updates with ``upsert: true`` operations in a single call."
msgstr ""

#: ../source/core/write-operations-introduction.txt:170
# 2439933170094f4a817573d31e7b9d33
msgid "If you create documents using the ``upsert`` option to :method:`~db.collection.update()` consider using a :ref:`a unique index <update-with-unique-indexes>` to prevent duplicated operations."
msgstr ""

#: ../source/core/write-operations-introduction.txt:177
# b1a83a03d8c74d2e8a941366f0ea0417
msgid "Remove"
msgstr ""

#: ../source/core/write-operations-introduction.txt:179
# b4a8e1ad558345d8bdca7e0abd741d80
msgid "In MongoDB, the :method:`db.collection.remove()` method deletes documents from a collection. The :method:`db.collection.remove()` method accepts a query criteria to determine which documents to remove."
msgstr ""

#: ../source/core/write-operations-introduction.txt:183
# dca474a0e5ad417c8c5c092aa7347c65
msgid "The following diagram highlights the components of a MongoDB remove operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:200
# 6f240bc9a6d84051bc11fda8202f0edf
msgid "This delete operation on the ``users`` collection removes all documents that match the criteria of ``status`` equal to ``D``."
msgstr ""

#: ../source/core/write-operations-introduction.txt:203
# 15d392ca4a7d4f6f91439742af1e60f5
msgid "For more information, see :method:`db.collection.remove()` method and :doc:`/tutorial/remove-documents`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:207
# 75f92f740caf4e52a8077f1979ecf8db
msgid "Remove Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:209
# 39e1b817b296452d94ea8674e466d275
msgid "By default, :method:`db.collection.remove()` method removes all documents that match its query. However, the method can accept a flag to limit the delete operation to a single document."
msgstr ""

#: ../source/core/write-operations-introduction.txt:216
# 72dc8cd2a02440faa6b3311fd41e8d1b
msgid "Isolation of Write Operations"
msgstr ""

#: ../source/core/write-operations-introduction.txt:218
# 2f320236743c49d5960378e2b0194aaf
msgid "The modification of a single document is always atomic, even if the write operation modifies multiple embedded documents *within* that document. No other operations are atomic."
msgstr ""

#: ../source/core/write-operations-introduction.txt:222
# acfc045cc0d14e66853314c58a322f79
msgid "If a write operation modifies multiple documents, the operation as a whole is not atomic, and other operations may interleave. You can, however, attempt to isolate a write operation that affects multiple documents using the :doc:`isolation operator </reference/operator/update/isolated>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:228
# 5589888956b846fc8f045f3ee9860a27
msgid "For more information :doc:`/core/write-operations-atomicity`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:231
# a84a1d5f764047298bef39d56db39ca1
msgid "Additional Methods"
msgstr ""

#: ../source/core/write-operations-introduction.txt:233
# 847b54dcee2e4c33979d63f1ad7bb919
msgid "The :method:`db.collection.save()` method can either update an existing document or insert a document if the document cannot be found by the ``_id`` field. See :method:`db.collection.save()` for more information and examples."
msgstr ""

#: ../source/core/write-operations-introduction.txt:238
# e4ad6a68ea3a4baa8428608514c04853
msgid "MongoDB also provides methods to perform write operations in bulk. See :method:`Bulk()` for more information."
msgstr ""

#: ../source/core/write-operations-introduction.txt:1
#: ../source/core/write-operations-introduction.txt:2
# 6203b270259848fe9d84081b25d867a2
# 9788595c44c64897961ffa66cbc08fe0
msgid "write operations"
msgstr ""

#: ../source/core/write-operations-introduction.txt:2
# 9788595c44c64897961ffa66cbc08fe0
msgid "crud"
msgstr ""

