arg_name: field
interface: pipeline
name: near
operation: geoNear
optional: false
position: 1
description: |
  The point for which to find the closest documents.

  If using a :doc:`2dsphere </core/2dsphere>` index, you can specify
  the point as either a GeoJSON point or legacy coordinate pair.

  If using a :doc:`2d </core/2d>` index, specify the point as a legacy
  coordinate pair.
type:
  - GeoJSON point
  - :term:`legacy coordinate pair <legacy coordinate pairs>`

---
#### This option does not exist for geoNear command
#### As such, cannot inherit from geoNear command
arg_name: field
description: |
  The output field that contains the
  calculated distance. To specify a field within an embedded document,
  use :term:`dot notation`.
interface: pipeline
name: distanceField
operation: geoNear
optional: false
type: string
---
name: spherical
arg_name: field
interface: pipeline
operation: geoNear
description: |

  Determines how MongoDB calculates the distance between two points: 
  
  - When ``true``, MongoDB uses :query:`$nearSphere` semantics and
    calculates distances using spherical geometry.
  
  - When ``false``, MongoDB uses :query:`$near` semantics:
    spherical geometry for :doc:`2dsphere </core/2dsphere>`
    indexes and planar geometry for :doc:`2d </core/2d>` indexes.

  *Default: false.*

type: boolean
optional: true

---
name: maxDistance
description: |
  The maximum distance from the center point that the documents *can*
  be. MongoDB limits the results to those documents that fall within
  the specified distance from the center point.

  Specify the distance in meters if the specified point is
  :term:`GeoJSON` and in radians if the specified point is
  :term:`legacy coordinate pairs <legacy coordinate pairs>`.

arg_name: field
interface: pipeline
operation: geoNear
optional: true
type: number
---
name: query
arg_name: field
interface: pipeline
operation: geoNear
description: |
  Limits the results to the documents that match the query. The query
  syntax is the usual MongoDB :ref:`read operation query
  <read-operations-query-argument>` syntax.

  .. include:: /includes/fact-geoNear-restrict-near-in-query.rst

optional: true
type: document
---
name: distanceMultiplier
arg_name: field
interface: pipeline
operation: geoNear
description: |
  The factor to multiply all distances returned by the query. For
  example, use the ``distanceMultiplier`` to convert radians, as
  returned by a spherical query, to kilometers by multiplying by the
  radius of the Earth.
optional: true
type: number
---
### COMMENT The field is different from geoNear command
### as such, do not inherit from command
arg_name: field
description: |
  This specifies the output field that identifies the location used to
  calculate the distance. This option is useful when a location field
  contains multiple locations. To specify a field within an
  embedded document, use :term:`dot notation`.
interface: pipeline
name: includeLocs
operation: geoNear
optional: true
type: string
---
name: uniqueDocs
arg_name: field
interface: pipeline
operation: geoNear
description: |
  If this value is ``true``, the query returns a matching document once,
  even if more than one of the document's location fields match the
  query.

  .. include:: /includes/deprecation-uniqueDocs.rst
optional: true
type: boolean
---
name: minDistance
type: number
optional: true
description: |
   The minimum distance from the center point that the documents can
   be. MongoDB limits the results to those documents that fall outside
   the specified distance from the center point.

   Specify the distance in meters for GeoJSON data and in radians for
   legacy coordinate pairs.

   .. versionadded:: 3.2

interface: pipeline
operation: geoNear
arg_name: field
---
name: key
arg_name: field
interface: pipeline
operation: geoNear
description: |

   Specify the geospatial indexed field to use when calculating the
   distance.
 
   If your collection has multiple ``2d`` and/or multiple ``2dsphere``
   indexes, you **must** use the ``key`` option to specify the indexed
   field path to use. :ref:`pipeline-geoNear-key-param-example`
   provides a full example.

   If there is more than one ``2d`` index or more than one ``2dsphere``
   index and you do not specify a ``key``, MongoDB will return an error.
  
   If you do not specify the ``key``, and you have at most only one
   ``2d`` index and/or only one ``2dsphere`` index, MongoDB looks first
   for a ``2d`` index to use. If a ``2d`` index does not exists, then
   MongoDB looks for a ``2dsphere`` index to use.

   .. versionadded:: 4.0

optional: true
...
