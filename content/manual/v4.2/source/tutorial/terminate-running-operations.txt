============================
Terminate Running Operations
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

MongoDB provides two facilitates to terminate running operations:
:method:`~cursor.maxTimeMS()` and :method:`db.killOp()`. Use these
operations as needed to control the behavior of operations in a
MongoDB deployment.

Available Procedures
--------------------

``maxTimeMS``
~~~~~~~~~~~~~

The :method:`~cursor.maxTimeMS()` method sets a time limit for an
operation. When the operation reaches the specified time limit,
MongoDB interrupts the operation at the next :term:`interrupt point`.

Terminate a Query
`````````````````

From the :binary:`~bin.mongo` shell, use the following method to set a
time limit of 30 milliseconds for this query:

.. code-block:: javascript

   db.location.find( { "town": { "$regex": "(Pine Lumber)",
                                 "$options": 'i' } } ).maxTimeMS(30)

.. _terminate-long-running-commands:

Terminate a Command
```````````````````

Consider a potentially long running operation using
:dbcommand:`distinct` to return each distinct ``collection`` field that
has a ``city`` key:

.. code-block:: javascript

   db.runCommand( { distinct: "collection",
                    key: "city" } )

You can add the ``maxTimeMS``  field to the command document to set a
time limit of 45 milliseconds for the operation:

.. code-block:: javascript

   db.runCommand( { distinct: "collection",
                    key: "city",
                    maxTimeMS: 45 } )

:method:`db.getLastError()` and :method:`db.getLastErrorObj()` will return
errors for interrupted options:

.. code-block:: javascript

   { "n" : 0,
     "connectionId" : 1,
     "err" : "operation exceeded time limit",
     "ok" : 1 }

``killOp``
~~~~~~~~~~

The :method:`db.killOp()` method interrupts a running operation at
the next :term:`interrupt point`. :method:`db.killOp()` identifies
the target operation by operation ID.

.. code-block:: javascript

   db.killOp(<opId>)

.. include:: /includes/extracts/warning-terminating-ops-method.rst

Sharded Cluster
````````````````

Starting in MongoDB 4.0, the :dbcommand:`killOp` command can be run on
a :binary:`~bin.mongos` and can kill queries (i.e. read operations)
that span shards in a cluster. The :dbcommand:`killOp` command from the
:binary:`~bin.mongos` does not propagate to the shards when the
operation to be killed is a write operation.

For more information on killing operations on a sharded cluster, see:

- :ref:`kill-read-ops-sharded-cluster`

- :ref:`kill-write-ops-sharded-cluster`

For information on how to list sharding operations that are active on a
:binary:`~bin.mongos`, see the ``localOps`` parameter in
:pipeline:`$currentOp`.

