.. _mongodump:

=============
``mongodump``
=============

.. default-domain:: mongodb

.. |tool-binary| replace:: mongodump

Synopsis
--------

:program:`mongodump` is a utility for creating a binary export of the
contents of a database. Consider using this utility as part an
effective :doc:`backup strategy </core/backups>`. Use
:program:`mongodump` in conjunction with :program:`mongorestore` to
restore databases.

:program:`mongodump` can read data from either :program:`mongod` or :program:`mongos`
instances, in addition to reading directly from MongoDB data files
without an active :program:`mongod`.

.. seealso:: :program:`mongorestore`,
   :doc:`/tutorial/backup-sharded-cluster-with-database-dumps`
   and :doc:`/core/backups`.

Behavior
--------

.. include:: /includes/fact-mongodump-local-database.rst

.. include:: /includes/warning-mongodump-compatibility-2.2.rst

When running :program:`mongodump` against a :program:`mongos` instance
where the :term:`sharded cluster` consists of :term:`replica sets <replica
set>`, the :term:`read preference` of the operation will prefer reads
from :term:`secondary` members of the set.

.. include:: /includes/warning-fsync-lock-mongodump.rst

Required Access
---------------

Backup Collections
~~~~~~~~~~~~~~~~~~

.. include:: /includes/access-mongodump-collections.rst

Backup Users
~~~~~~~~~~~~

.. include:: /includes/access-mongodump-users.rst

Options
-------

.. binary:: mongodump

.. program:: mongodump

.. include:: /includes/option/option-mongodump-help.rst

.. include:: /includes/option/option-mongodump-verbose.rst

.. include:: /includes/option/option-mongodump-quiet.rst

.. include:: /includes/option/option-mongodump-version.rst

.. include:: /includes/option/option-mongodump-host.rst

.. include:: /includes/option/option-mongodump-port.rst

.. include:: /includes/option/option-mongodump-ipv6.rst

.. include:: /includes/option/option-mongodump-ssl.rst

.. include:: /includes/option/option-mongodump-sslCAFile.rst

.. include:: /includes/option/option-mongodump-sslPEMKeyFile.rst

.. include:: /includes/option/option-mongodump-sslPEMKeyPassword.rst

.. include:: /includes/option/option-mongodump-sslCRLFile.rst

.. include:: /includes/option/option-mongodump-sslAllowInvalidCertificates.rst

.. include:: /includes/option/option-mongodump-sslFIPSMode.rst

.. include:: /includes/option/option-mongodump-username.rst

.. include:: /includes/option/option-mongodump-password.rst

.. include:: /includes/option/option-mongodump-authenticationDatabase.rst

.. include:: /includes/option/option-mongodump-authenticationMechanism.rst

.. include:: /includes/option/option-mongodump-dbpath.rst

.. include:: /includes/option/option-mongodump-directoryperdb.rst

.. include:: /includes/option/option-mongodump-journal.rst

.. include:: /includes/option/option-mongodump-db.rst

.. include:: /includes/option/option-mongodump-collection.rst

.. include:: /includes/option/option-mongodump-out.rst

.. include:: /includes/option/option-mongodump-query.rst

.. include:: /includes/option/option-mongodump-oplog.rst

.. include:: /includes/option/option-mongodump-repair.rst

.. include:: /includes/option/option-mongodump-forceTableScan.rst

.. include:: /includes/option/option-mongodump-dumpDbUsersAndRoles.rst

Use
---

See the :doc:`/tutorial/backup-with-mongodump`
for a larger overview of :program:`mongodump` usage. Also see the
:doc:`mongorestore` document for an overview of the
:program:`mongorestore`, which provides the related inverse
functionality.

The following command creates a dump file that contains only the
collection named ``collection`` in the database named ``test``. In
this case the database is running on the local interface on port
``27017``:

.. code-block:: sh

   mongodump --collection collection --db test

In the next example, :program:`mongodump` creates a backup of the
database instance stored in the ``/srv/mongodb`` directory on the
local machine. This requires that no :program:`mongod` instance is
using the ``/srv/mongodb`` directory.

.. code-block:: sh

   mongodump --dbpath /srv/mongodb

In the final example, :program:`mongodump` creates a database dump
located at ``/opt/backup/mongodump-2011-10-24``, from a database
running on port ``37017`` on the host ``mongodb1.example.net`` and
authenticating using the username ``user`` and the password
``pass``, as follows:

.. code-block:: sh

   mongodump --host mongodb1.example.net --port 37017 --username user --password pass --out /opt/backup/mongodump-2011-10-24

.. _mongodump-behavior:
