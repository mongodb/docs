.. _compact:

=======
compact
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: compact

   Rewrites and defragments all data and indexes in a collection. On
   :ref:`WiredTiger <storage-wiredtiger>` databases, this command will release
   unneeded disk space to the operating system.

   :dbcommand:`compact` has the following form:

   .. code-block:: javascript

      { compact: <collection name> }

   :dbcommand:`compact` takes the following fields:

   .. note:: Starting in MongoDB 4.2


      MongoDB removes the MMAPv1 storage engine and the MMAPv1 specific
      options ``paddingFactor``, ``paddingBytes``, ``preservePadding``
      for :dbcommand:`compact`.


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``compact``
   
        - string
   
        - The name of the collection.
          
          
   
      * - ``force``
   
        - flag
   
        - .. versionchanged:: 4.4 
        
          Optional. Starting in v4.4, if specified, forces 
          :dbcommand:`compact` to run on the :term:`primary` in 
          a :term:`replica set`. Before v4.4, this boolean field 
          enabled :dbcommand:`compact` to run on the :term:`primary` 
          in a :term:`replica set` if the value was ``true`` and 
          returned an error when run on a :term:`primary` if the 
          value was ``false``, because the command blocked all other 
          operations.
          
          Starting in v4.4, :dbcommand:`compact` does not block 
          :ref:`crud` on the database it is compacting. 
          
      * - ``comment``

        - any

        - .. include:: /includes/extracts/comment-content.rst
       
          .. versionadded:: 4.4   


.. warning:: Always have an up-to-date backup before performing server
   maintenance such as the :dbcommand:`compact` operation.

.. _compact-authentication:

``compact`` Required Privileges
-------------------------------

For clusters enforcing :ref:`authentication <authentication>`,
you must authenticate as a user with the :authrole:`compact` privilege
action on the target collection. The :authrole:`dbAdmin` role provides 
the required privileges for running :dbcommand:`compact` against
non-system collections. 

For :ref:`system collections <metadata-system-collections>`, create a 
custom role that grants the :authrole:`compact` action on the system 
collection. You can then grant that role to a new or existing user and 
authenticate as that user to perform the :dbcommand:`compact` command. 
For example, the following operations create a custom role that grants 
the :authrole:`compact` action against specified database and
collection:

.. code-block:: javascript

   use admin
   db.createRole(
      {
         role: "myCustomCompactRole",
         privileges: [
            {
               resource: { "db" : "<database>" , "collection" : "<collection>" },
               actions: [ "compact" ]
            }
         ],
         roles: []
      }
   )

For more information on configuring the ``resource`` document, see 
:ref:`resource-document`.

To add the :authrole:`dbAdmin` or the custom role to an existing
user, use :method:`db.grantRolesToUser` or :method:`db.updateUser()`.
The following operation grants the custom ``compact`` role to the 
``myCompactUser`` on the ``admin`` database:

.. code-block:: javascript

   use admin
   db.grantRolesToUser("myCompactUser", [ "dbAdmin" | "myCustomCompactRole" ] )

To add the :authrole:`dbAdmin` or the custom role to a new user,
specify the role to the ``roles`` array of the
:method:`db.createUser()` method when creating the user.

.. code-block:: javascript

   use admin
   db.createUser(
     { 
        user: "myCompactUser",
        pwd: "myCompactUserPassword",
        roles: [
          { role: "dbAdmin", db: "<database>" } | "myCustomCompactRole"
        ]
      }
   )

Behavior
--------

Blocking
~~~~~~~~

.. versionchanged:: 4.4 

Starting in v4.4, on :ref:`WiredTiger <storage-wiredtiger>`, 
:dbcommand:`compact` only blocks the following metadata operations: 

- :method:`db.collection.drop`
- :method:`db.collection.createIndex` and 
  :method:`db.collection.createIndexes`
- :method:`db.collection.dropIndex` and 
  :method:`db.collection.dropIndexes`

:dbcommand:`compact` does not block :ref:`crud` for the database it is 
currently operating on. 

Before v4.4, :dbcommand:`compact` blocked all operations for the 
database it was compacting, including :ref:`crud`, and was therefore 
recommended for use only during scheduled maintenance periods. Starting in 
v4.4, the :dbcommand:`compact` command is appropriate for use at any time.

You may view the intermediate progress either by viewing the
:binary:`~bin.mongod` log file or by running the 
:method:`db.currentOp()` in another shell instance.

Operation Termination
~~~~~~~~~~~~~~~~~~~~~

If you terminate the operation with the :method:`db.killOp()
<db.killOp()>` method or restart the server before the
:dbcommand:`compact` operation has finished, be aware of the following:

- If you have journaling enabled, the data remains valid and
  usable, regardless of the state of the :dbcommand:`compact` operation.
  You may have to manually rebuild the indexes.

- If you do not have journaling enabled and the :binary:`~bin.mongod` or
  :dbcommand:`compact` terminates during the operation, it is impossible
  to guarantee that the data is in a valid state.

- In either case, much of the existing free space in the collection may
  become un-reusable. In this scenario, you should rerun the compaction
  to completion to restore the use of this free space.

Disk Space
~~~~~~~~~~

To see how the storage space changes for the collection, run the
:dbcommand:`collStats` command before and after compaction.

On :ref:`WiredTiger <storage-wiredtiger>`, :dbcommand:`compact` attempts to
reduce the required storage space for data and indexes in a collection, releasing
unneeded disk space to the operating system. The effectiveness of this operation
is workload dependent and no disk space may be recovered. This command is useful
if you have removed a large amount of data from the collection, and do not plan
to replace it.

:dbcommand:`compact` may require additional disk space to run on WiredTiger databases.

.. _compact-cmd-replica-sets:

Replica Sets
~~~~~~~~~~~~

:dbcommand:`compact` commands do not replicate to secondaries in a
:term:`replica set`.

- Compact each member separately.

- Ideally run :dbcommand:`compact` on a secondary. See option
  ``force`` above for information regarding compacting the primary.

Before v4.4, :dbcommand:`compact` forced the secondary to enter 
:replstate:`RECOVERING` state during its execution, which caused read 
operations from clients to fail. Starting in v4.4, :dbcommand:`compact` 
does not change the run state of the secondary, and clients may continue 
to read from the secondary during the compaction operation. 

Sharded Clusters
~~~~~~~~~~~~~~~~

:dbcommand:`compact` only applies to :binary:`~bin.mongod` instances. In a
sharded environment, run :dbcommand:`compact` on each shard separately
as a maintenance operation.

You cannot issue :dbcommand:`compact` against a :binary:`~bin.mongos` instance.

Capped Collections
~~~~~~~~~~~~~~~~~~

On :ref:`WiredTiger <storage-wiredtiger>`, the :dbcommand:`compact`
command will attempt to compact the collection.

Index Building
~~~~~~~~~~~~~~

:binary:`~bin.mongod` rebuilds all indexes in parallel following the
:dbcommand:`compact` operation.
