.. _java-rs-write:

=====================
Write Data to MongoDB
=====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :description: Learn how to use the {+driver-short+} to write data to MongoDB.
   :keywords: usage examples, save, crud, create, code example

.. toctree::
    :titlesonly:
    :maxdepth: 1

    Insert </write/insert-documents>
    Update </write/write-update-documents>
    Replace </write/replace-documents>
    Delete </write/write-delete-documents>
    Bulk Write </write/bulk-writes>
    Transactions </write/transactions>
    GridFS </write/store-large-docs>
    Write Concern </write/write-concern>
    Run a Database Command </write/run-command>

Overview
--------

.. _write-data-reactor-overview:

This page contains copyable code examples of {+driver-short+} methods that you can use to
write data to MongoDB.

.. tip::

  To learn more about any of the methods shown on this page, see the link
  provided in each section.

To use an example from this page, copy the code example into the
:ref:`sample application <java-rs-write-sample>` or your own application.
Be sure to replace all placeholders in the code examples, such as ``<connection string>``, with
the relevant values for your MongoDB deployment.

This guide uses the {+pr+} library to consume ``Publisher`` instances returned
by the {+driver-short+} methods. To learn more about the {+pr+} library
and how to use it, see `Getting Started <https://projectreactor.io/docs/core/release/reference/#getting-started>`__
in the Reactor documentation. 

There are also other ways to consume ``Publisher`` instances. You can use one of many alternative libraries such as
`RxJava <https://github.com/ReactiveX/RxJava>`__ or call ``Publisher.subscribe()`` directly and pass your own
implementation of a ``Subscriber``.

This guide uses the ``Mono.block()`` method from Reactor to subscribe to a ``Publisher`` and block the current
thread until the ``Publisher`` reaches its terminal state. To learn more about the Reactive Streams initiative, see `Reactive Streams <https://www.reactive-streams.org/>`__.

.. important:: Publishers Returned are Cold

   All ``Publisher`` instances returned by the {+driver-short+} methods are cold,
   which means that the corresponding operation does not happen unless you
   subscribe to the returned ``Publisher``. We recommend only subscribing to 
   the returned ``Publisher`` once, because subscribing more than once can lead
   to errors. 
   
.. _java-rs-write-sample:

.. include:: /includes/usage-examples/sample-app-intro.rst

.. literalinclude:: /includes/usage-examples/sample-write-application.java
   :language: java
   :copyable:
   :linenos:
   :emphasize-lines: 56-58

Insert One
----------

.. literalinclude:: /includes/usage-examples/write-code-examples.java
   :start-after: start-insert-one
   :end-before: end-insert-one
   :language: java
   :copyable:

To learn more about the ``insertOne()`` method, see the :ref:`Insert Documents <java-rs-write-insert>` guide.

Insert Multiple
---------------

.. literalinclude:: /includes/usage-examples/write-code-examples.java
   :start-after: start-insert-multiple
   :end-before: end-insert-multiple
   :language: java
   :copyable:

To learn more about the ``insertMany()`` method, see the :ref:`Insert Documents <java-rs-write-insert>` guide.

Update One
----------

.. literalinclude:: /includes/usage-examples/write-code-examples.java
   :start-after: start-update-one
   :end-before: end-update-one
   :language: java
   :copyable:

To learn more about the ``updateOne()`` method, see the :ref:`Update Documents <java-rs-write-update-docs>` guide.

Update Multiple
---------------

.. literalinclude:: /includes/usage-examples/write-code-examples.java
   :start-after: start-update-multiple
   :end-before: end-update-multiple
   :language: java
   :copyable:


To learn more about the ``updateMany()`` method, see the :ref:`Update Documents <java-rs-write-update-docs>` guide.

Replace One
-----------

.. literalinclude:: /includes/usage-examples/write-code-examples.java
   :start-after: start-replace-one
   :end-before: end-replace-one
   :language: java
   :copyable:


To learn more about the ``replaceOne()`` method, see the :ref:`Replace Documents <java-rs-write-replace>` guide.

Delete One
----------

.. literalinclude:: /includes/usage-examples/write-code-examples.java
   :start-after: start-delete-one
   :end-before: end-delete-one
   :language: java
   :copyable:


To learn more about the ``deleteOne()`` method, see the :ref:`Delete Documents <java-rs-write-delete-docs>` guide.

Delete Multiple
---------------

.. literalinclude:: /includes/usage-examples/write-code-examples.java
   :start-after: start-delete-multiple
   :end-before: end-delete-multiple
   :language: java
   :copyable:

To learn more about the ``deleteMany()`` method, see the :ref:`Delete Documents <java-rs-write-delete-docs>` guide.

Bulk Write
----------

.. literalinclude:: /includes/usage-examples/write-code-examples.java
   :start-after: start-bulk-write
   :end-before: end-bulk-write
   :language: java
   :copyable:

.. TODO: replace link
.. To learn more about the ``bulkWrite()`` method, see the
   :ref:`Bulk Write <java-rs-bulk-write>` guide.