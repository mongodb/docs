# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/read-isolation-consistency-recency.txt:3
msgid "Read Isolation, Consistency, and Recency"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:14
msgid "Isolation Guarantees"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:17
msgid "Read Uncommitted"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-read-uncommitted.rst:1
msgid "In MongoDB, clients can see the results of writes before the writes are :term:`durable`:"
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
msgid "Regardless of :doc:`write concern </reference/write-concern>`, other clients using :readconcern:`\"local\"` or :readconcern:`\"available\"` readConcern can see the result of a write operation before the write operation is acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:6
msgid "Clients using :readconcern:`\"local\"` or :readconcern:`\"available\"` readConcern can read data which may be subsequently :doc:`rolled back </core/replica-set-rollbacks>`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:21
msgid "Read uncommitted is the default isolation level and applies to :binary:`~bin.mongod` standalone instances as well as to replica sets and sharded clusters."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:26
msgid "Read Uncommitted And Single Document Atomicity"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:1
msgid "Write operations are atomic with respect to a single document; i.e. if a write is updating multiple fields in the document, a reader will never see the document with only some of the fields updated."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:5
msgid "With a standalone :binary:`~bin.mongod` instance, a set of read and write operations to a single document is serializable. With a replica set, a set of read and write operations to a single document is serializable *only* in the absence of a rollback."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:30
msgid "However, although the readers may not see a *partially* updated document, read uncommitted means that concurrent readers may still see the updated document before the changes are :term:`durable`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:35
msgid "Read Uncommitted And Multiple Document Write"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes.rst:1
msgid "When a single write operation modifies multiple documents, the modification of each document is atomic, but the operation as a whole is not atomic and other operations may interleave."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:39
msgid "Without isolating the multi-document write operations, MongoDB exhibits the following behavior:"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:2
msgid "Non-point-in-time read operations. Suppose a read operation begins at time *t*\\ :sub:`1` and starts reading documents. A write operation then commits an update to one of the documents at some later time *t*\\ :sub:`2`. The reader may see the updated version of the document, and therefore does not see a point-in-time snapshot of the data."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:9
msgid "Non-serializable operations. Suppose a read operation reads a document *d*\\ :sub:`1` at time *t*\\ :sub:`1` and a write operation updates *d*\\ :sub:`1` at some later time *t*\\ :sub:`3`. This introduces a read-write dependency such that, if the operations were to be serialized, the read operation must precede the write operation. But also suppose that the write operation updates document *d*\\ :sub:`2` at time *t*\\ :sub:`2` and the read operation subsequently reads *d*\\ :sub:`2` at some later time *t*\\ :sub:`4`. This introduces a write-read dependency which would instead require the read operation to come *after* the write operation in a serializable schedule. There is a dependency cycle which makes serializability impossible."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:22
msgid "Reads may miss matching documents that are updated during the course of the read operation."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:44
msgid ":doc:`/core/write-operations-atomicity`"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:49
msgid "Cursor Snapshot"
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:2
msgid "MongoDB cursors can return the same document more than once in some situations. As a cursor returns documents other operations may interleave with the query. If some of these operations are :doc:`updates </tutorial/update-documents>` that cause the document to move (in the case of MMAPv1, caused by document growth) or that change the indexed field on the index used by the query; then the cursor will return the same document more than once."
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:10
msgid "If your collection has a field or fields that are never modified, you can use a *unique* index on this field or these fields so that the query will return each document no more than once. Query with :method:`~cursor.hint()` to explicitly force the query to use that index."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:55
msgid "Monotonic Writes"
msgstr ""

#: ../source/includes/extracts/monotonic-writes.rst:2
msgid "MongoDB provides monotonic write guarantees, by default, for standalone :binary:`~bin.mongod` instances and replica set."
msgstr ""

#: ../source/includes/extracts/monotonic-writes.rst:5
msgid "For monotonic writes and sharded clusters, see :ref:`causal-consistency`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:62
msgid "Real Time Order"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:66
msgid "For read and write operations on the primary, issuing read operations with :readconcern:`\"linearizable\"` read concern and write operations with :writeconcern:`\"majority\"` write concern enables multiple threads to perform reads and writes on a single document as if a single thread performed these operations in real time; that is, the corresponding schedule for these reads and writes is considered linearizable."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:73
msgid ":ref:`causal-consistency`"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:78
msgid "Causal Consistency"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:82
msgid "If an operation logically depends on a preceding operation, there is a causal relationship between the operations. For example, a write operation that deletes all documents based on a specified condition and a subsequent read operation that verifies the delete operation have a causal relationship."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:88
msgid "With causally consistent sessions, MongoDB executes causal operations in an order that respect their causal relationships, and clients observe results that are consistent with the causal relationships."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:95
msgid "Client Sessions and Causal Consistency Guarantees"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:97
msgid "To provide causal consistency, MongoDB 3.6 enables causal consistency in client sessions. A causally consistent session denotes that the associated sequence of read operations with :readconcern:`\"majority\"` read concern and write operations with :writeconcern:`\"majority\"` write concern have a causal relationship that is reflected by their ordering. Applications must ensure that only one thread at a time executes these operations in a client session."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:105
msgid "For causally related operations:"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:107
msgid "A client starts a client session."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:111
msgid "Client sessions only guarantee causal consistency for:"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:113
msgid "Read operations with :readconcern:`\"majority\"`; i.e. the return data has been acknowledged by a majority of the replica set members and is durable."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:117
msgid "Write operations with :writeconcern:`\"majority\"` write concern; i.e. the write operations that request acknowledgement that the operation has been applied to a majority of the replica set's voting members."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:122
msgid "For more information on causal consistency and various read and write concerns, see :doc:`/core/causal-consistency-read-write-concerns`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:126
msgid "As the client issues a sequence of read with :readconcern:`\"majority\"` read concern and write operations (with :writeconcern:`\"majority\"` write concern), the client includes the session information with each operation."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:131
msgid "For each read operation with :readconcern:`\"majority\"` read concern and write operation with :writeconcern:`\"majority\"` write concern associated with the session, MongoDB returns the operation time and the cluster time, even if the operation errors. The client session keeps track of the operation time and the cluster time."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:139
msgid "MongoDB does not return the operation time and the cluster time for *unacknowledged* (``w: 0``) write operations. Unacknowledged writes do not imply any causal relationship."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:143
msgid "Although, MongoDB returns the operation time and the cluster time for read operations and acknowledged write operations in a client session, only the read operations with :readconcern:`\"majority\"` read concern and write operations with :writeconcern:`\"majority\"` write concern can guarantee causal consistency. For details, see :doc:`/core/causal-consistency-read-write-concerns`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:151
msgid "The associated client session tracks these two time fields."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:155
msgid "Operations can be causally consistent across different sessions. MongoDB drivers and the :binary:`~bin.mongo` shell provide the methods to advance the operation time and the cluster time for a client session. So, a client can advance the cluster time and the operation time of one client session to be consistent with the operations of another client session."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:165
msgid "Causal Consistency Guarantees"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:167
msgid "The following table lists the causal consistency guarantees provided by causally consistent sessions for read operations with :readconcern:`\"majority\"` read concern and write operations with :writeconcern:`\"majority\"` write concern."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:177
msgid "Guarantees"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:178
msgid "Description"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:180
msgid "Read your writes"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:182
msgid "Read operations reflect the results of write operations that precede them."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:185
msgid "Monotonic reads"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:187
msgid "Read operations do not return results that correspond to an earlier state of the data than a preceding read operation."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:190
msgid "For example, if in a session:"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:192
msgid "write\\ :sub:`1` precedes write\\ :sub:`2`,"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:194
msgid "read\\ :sub:`1` precedes read\\ :sub:`2`, and"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:196
msgid "read\\ :sub:`1` returns results that reflect write\\ :sub:`2`"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:198
msgid "then read\\ :sub:`2` cannot return results of write\\ :sub:`1`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:200
msgid "Monotonic writes"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:202
msgid "Write operations that must precede other writes are executed before those other writes."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:205
msgid "For example, if write\\ :sub:`1` must precedes write\\ :sub:`2` in a session, the state of the data at the time of write\\ :sub:`2` must reflect the state of the data post write\\ :sub:`1`. Other writes can interleave between write\\ :sub:`1` and write write\\ :sub:`2`, but write\\ :sub:`2` cannot occur before write\\ :sub:`1`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:212
msgid "Writes follow reads"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:214
msgid "Write operations that must occur after read operations are executed after those read operations. That is, the state of the data at the time of the write must incorporate the state of the data of the preceding read operations."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:220
msgid "Read Preference"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:222
msgid "These guarantees hold across all members of the MongoDB deployment. For example, if, in a causally consistent session, you issue a write with :writeconcern:`\"majority\"` write concern followed by a read that reads from a secondary (i.e. read preference :readmode:`<secondary>`) with :readconcern:`\"majority\"` read concern, the read operation will reflect the state of the database after the write operation."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:230
msgid "Isolation"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:232
msgid "Operations within a causally consistent session are not isolated from operations outside the session. If a concurrent write operation interleaves between the session's write and read operations, the session's read operation may return results that reflect a write operation that occurred *after* the session's write operation."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:239
msgid "Feature Compatibility Version"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:241
msgid "The ``featureCompatibilityVersion`` (fCV) must be set to \"3.6\" or greater. To check the fCV, run the following command:"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:248
msgid "For more information, see :ref:`view-fcv` and :dbcommand:`setFeatureCompatibilityVersion`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:252
msgid "MongoDB Drivers"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:254
msgid "Clients require MongoDB drivers updated for MongoDB 3.6 or later:"
msgstr ""

#: ../source/includes/3.6-drivers.rst:4
msgid "Java 3.6+"
msgstr ""

#: ../source/includes/3.6-drivers.rst:6
msgid "Python 3.6+"
msgstr ""

#: ../source/includes/3.6-drivers.rst:8
msgid "C 1.9+"
msgstr ""

#: ../source/includes/3.6-drivers.rst:10
msgid "C# 2.5+"
msgstr ""

#: ../source/includes/3.6-drivers.rst:12
msgid "Node 3.0+"
msgstr ""

#: ../source/includes/3.6-drivers.rst:14
msgid "Ruby 2.5+"
msgstr ""

#: ../source/includes/3.6-drivers.rst:16
msgid "Perl 2.0+"
msgstr ""

#: ../source/includes/3.6-drivers.rst:18
msgid "PHPC 1.4+"
msgstr ""

#: ../source/includes/3.6-drivers.rst:20
msgid "Scala 2.2+"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:261
msgid "Limitations"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:263
msgid "The following operations that build in-memory structures are not causally consistent:"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:269
msgid "Operation"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:270
msgid "Notes"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:272
msgid ":dbcommand:`collStats`"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:276
msgid ":pipeline:`$collStats` with ``latencyStats`` option."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:280
msgid ":pipeline:`$currentOp`"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:282
#: ../source/core/read-isolation-consistency-recency.txt:291
#: ../source/core/read-isolation-consistency-recency.txt:300
#: ../source/core/read-isolation-consistency-recency.txt:305
msgid "Returns an error if the operation is associated with a causally consistent client session."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:285
msgid ":dbcommand:`dbStats`"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:289
msgid ":dbcommand:`getMore`"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:294
msgid ":pipeline:`$indexStats`"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:298
msgid ":dbcommand:`ping`"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:303
msgid ":dbcommand:`serverStatus`"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:308
msgid ":dbcommand:`createIndex` with ``background: true`` option; i.e. background index builds"
msgstr ""

