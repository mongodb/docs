.. meta::
   :robots: noindex, nosnippet 

.. _esr-indexing-guideline:
.. _esr-indexing-rule:

=========================================
The ESR (Equality, Sort, Range) Guideline
=========================================

.. meta::
   :description: Apply the ESR Guideline to optimize compound indexes by arranging keys for equality, sort, and range operations efficiently.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol


An index that references multiple fields is a :ref:`compound index
<index-type-compound>`. Compound indexes can dramatically improve query
response times.

Index keys correspond to document fields. In most cases, applying the
ESR (Equality, Sort, Range) Guideline to arrange the index keys helps to
create a more efficient :ref:`compound index <index-type-compound>`. 

Ensure that equality fields always come first. Applying equality to the leading
field(s) of the compound index allows you to take advantage of the rest of the 
field values being in sorted order. Choose whether to use a sort or range field
next based on your index's specific needs:

- If avoiding in-memory sorts is critical, place sort fields before range fields 
  (ESR)
- If your range predicate in the query is very selective, then put it before
  sort fields (ERS)

This page introduces the ESR Guideline. For more information on optimizing
queries, see :dbcommand:`explain` and 
:ref:`query-plans-query-optimization`. 

.. tip::

   To force MongoDB to use a particular index, use :ref:`cursor-hint`
   when testing indexes.

.. _esr-rule-equality:

Equality
--------

"Equality" refers to an exact match on a single value. The following
exact match queries scan the ``cars`` collection for documents whose
``model`` field exactly matches ``Cordoba``.

.. code-block:: javascript

   db.cars.find( { model: "Cordoba" } )
   db.cars.find( { model: { $eq: "Cordoba" } } )

Index searches make efficient use of exact matches to reduce the number of index
keys examined. Equality fields must come first. When you use the first part of 
the index for equality, the rest of the index stays in sorted order. 

An index may have multiple keys for queries with exact matches. The
index keys for equality matches can appear in any order. However, to
satisfy an equality match with the index, all of the index keys for
exact matches must come before any other index fields. MongoDB's search
algorithm eliminates any need to arrange the exact match fields in a
particular order.

The more selective the equality matches, the more efficient the indexed query.

.. _esr-rule-sort:

Sort
----

"Sort" determines the order for results. To avoid in-memory sorts, put sort 
fields before range in the index.

An index can support sort operations when the query fields are a subset
of the index keys. Sort operations on a subset of the index keys are
only supported if the query includes equality conditions for all of the
prefix keys that precede the sort keys. For more information, see
:ref:`Sort and Non-prefix Subset of an Index
<sort-index-nonprefix-subset>`.

The following example queries the ``cars`` collection. The output is
sorted by ``model``:

.. code-block:: javascript

   db.cars.find( { manufacturer: "GM" } ).sort( { model: 1 } )

To improve query performance, create an index on the ``manufacturer``
and ``model`` fields:

.. code-block:: javascript

   db.cars.createIndex( { manufacturer: 1, model: 1 } )

- ``manufacturer`` is the first key because it is an equality match.
- ``model`` is indexed in the same order ( ``1`` ) as the query. 

.. _esr-rule-range:

Range
-----

"Range" filters scan fields. The scan doesn't require an exact match,
which means range filters are loosely bound to index keys. To improve
query efficiency, limit the range bounds and use
equality matches to reduce the number of documents to scan.

Range filters resemble the following:

.. code-block:: javascript

   db.cars.find( { price: { $gte: 15000} } )
   db.cars.find( { age: { $lt: 10 } } )
   db.cars.find( { priorAccidents: { $ne: null } } )

If the range predicate in your query is very selective, place it before the sort
fields to reduce the number of sorted documents and allow an in-memory sort.

To avoid an in-memory sort, place the range filter after the sort 
predicate. For more information on in-memory sorts, see 
:method:`cursor.allowDiskUse()`.


Additional Considerations
-------------------------

- Inequality operators such as :query:`$ne` or :query:`$nin` are range
  operators, not equality operators.

- :query:`$regex` is a range operator.

- :query:`$in`:

  - When ``$in`` is used alone, it is an equality operator that performs a 
    series of equality matches. 
  - When ``$in`` is used with ``.sort()``:

    - If ``$in`` has fewer than 201 array elements, the elements are
      expanded and then merged in the sort order specified for the
      index using a ``SORT_MERGE`` stage. This improves performance for 
      small arrays. 
      In this case, ``$in`` is similar to an equality predicate with ESR.
    - If ``$in`` has 201 elements or more, the elements are ordered like
      a range operator. In this case, the performance improvement
      for small arrays isn't realized. It isn't possible for the
      subsequent fields in the index to be used for sorting, and ``$in`` 
      is similar to a range predicate with ESR.
    - If you typically use ``$in`` operators with small arrays, include 
      them earlier in the index specification. If you typically use large 
      arrays, include ``$in`` operators where you would include a range 
      predicate.

.. note::

   The ``$in`` behavior change at 201 array elements is not
   guaranteed to stay the same for all MongoDB versions.

Example
-------

The following query searches the ``cars`` collection for vehicles
manufactured by Ford that cost more than $15,000 dollars. The results
are sorted by model:

.. code-block:: javascript

   db.cars.find(
      {
          manufacturer: 'Ford',
          cost: { $gt: 15000 }
      } ).sort( { model: 1 } )

The query contains all the elements of the ESR Guideline:

- ``manufacturer: 'Ford'`` is an equality based match
- ``cost: { $gt: 15000 }`` is a range based match, and
- ``model`` is used for sorting

Following the ESR guideline, the optimal index for the example query is:

.. code-block:: javascript
   :copyable: false

   { manufacturer: 1, model: 1, cost: 1 }

Learn More
----------

- :ref:`create-indexes-to-support-queries`
- :ref:`index-sort`
- :ref:`index-selectivity`
