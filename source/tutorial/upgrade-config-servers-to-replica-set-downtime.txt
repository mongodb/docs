.. _upgrade-config-servers-rs-downtime:

================================================
Upgrade Config Servers to Replica Set (Downtime)
================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. important::

   In version 3.4, MongoDB removes support for SCCC config servers.
   Before you can upgrade your sharded clusters to 3.4, you must
   convert your config servers from SCCC to CSRS. To convert to CSRS,
   follow the procedure to change your 3.2.x SCCC to 3.2.x CSRS.

The following procedure upgrades three mirrored config servers to a
:ref:`config server replica set <csrs>`.

Prerequisites
-------------

- All binaries in the sharded clusters must be at least version 3.2. See
  :ref:`3.2-upgrade-cluster` for instructions to upgrade the sharded
  cluster.

- The existing config servers must be in sync.

Procedure
---------

.. important:: The procedure outlined in this tutorial requires
   downtime. If all the sharded cluster binaries are at least version
   3.2.4, you can also convert the config servers to replica set without
   downtime. For details, see :doc:`/tutorial/upgrade-config-servers-to-replica-set`.

#. **Disable the balancer** as described in
   :ref:`sharding-balancing-disable-temporarily`.

#. Connect a :binary:`~bin.mongo` shell to the *first* config server listed
   in the :setting:`~sharding.configDB` setting of the :binary:`~bin.mongos` and
   run :method:`rs.initiate()` to initiate the single member replica set.

   .. code-block:: javascript

      rs.initiate( {
         _id: "csReplSet",
         version: 1,
         configsvr: true,
         members: [ { _id: 0, host: "<host>:<port>" } ]
      } )

   - :rsconf:`_id` corresponds to the replica set name for the config
     servers.

   - :rsconf:`version` set to 1, corresponding to the initial version
     of the replica set configuration.

   - :rsconf:`configsvr` must be set be ``true``.

   - :rsconf:`members` array contains a document that specifies:

     - :rsconf:`members._id <members[n]._id>` which is a numeric identifier for the
       member.

     - :rsconf:`members.host <members[n].host>` which is a string corresponding to the config
       server's hostname and port.

#. Restart this config server as a single member replica set with:

   - the :option:`--replSet <mongod --replSet>` option set to the replica set name specified
     during the :method:`rs.initiate()`,

   - the :option:`--configsvrMode <mongod --configsvrMode>` option set to the legacy config server
     mode Sync Cluster Connection Config (``sccc``), 
     
   - the :option:`--configsvr <mongod --configsvr>` option, and

   - the :option:`--storageEngine <mongod --storageEngine>` option set to the storage engine used by
     this config server. For this upgrade procedure, the existing
     config server can be using either MMAPv1 or WiredTiger.

   Include additional options as specific to your deployment.

   .. code-block:: sh

      mongod --configsvr --replSet csReplSet --configsvrMode=sccc --storageEngine <storageEngine> --port <port> --dbpath <path>

   Or if using a :doc:`configuration file
   </reference/configuration-options>`, specify the
   :setting:`replication.replSetName:`,
   :setting:`sharding.clusterRole`, :setting:`sharding.configsvrMode`
   and :setting:`net.port`.

   .. code-block:: yaml

      sharding:
         clusterRole: configsvr
         configsvrMode: sccc
      replication:
         replSetName: csReplSet
      net:
         port: <port>
      storage:
         dbPath: <path>
         engine: <storageEngine>

#. Start the new :binary:`~bin.mongod` instances to add to the replica set.
   These instances must use the :doc:`WiredTiger </core/wiredtiger>`
   storage engine. Starting in 3.2, the default storage engine is
   WiredTiger for new :binary:`~bin.mongod` instances with new data paths.

   .. important::

      - Do not add existing config servers to the replica set.
      - Use new dbpaths for the new instances.

   The number of new :binary:`~bin.mongod` instances to add depends on the
   config server currently in the single-member replica set:

   - If the config server is using MMAPv1, start 3 new :binary:`~bin.mongod`
     instances.

   - If the config server is using WiredTiger, start 2 new
     :binary:`~bin.mongod` instances.

   .. note:: The example in this procedure assumes that the existing
      config servers use MMAPv1.

   For each new :binary:`~bin.mongod` instance to add, include the
   ``--configsvr`` and the ``--replSet`` options:

   .. code-block:: sh

      mongod --configsvr --replSet csReplSet --port <port> --dbpath <path>

   Or if using a :doc:`configuration file
   </reference/configuration-options>`:

   .. code-block:: yaml

      sharding:
         clusterRole: configsvr
      replication:
         replSetName: csReplSet
      net:
         port: <port>
      storage:
         dbPath: <path>

#. Using the :binary:`~bin.mongo` shell connected to the replica set config
   server, add the new :binary:`~bin.mongod` instances as :ref:`non-voting
   <replica-set-non-voting-members>`, :doc:`priority 0
   </core/replica-set-priority-0-member>` members:

   .. code-block:: javascript

      rs.add( { host: <host:port>, priority: 0, votes: 0 } )

#. Once all the new members have been added as :ref:`non-voting
   <replica-set-non-voting-members>`, :doc:`priority 0
   </core/replica-set-priority-0-member>` members, ensure that the new
   nodes have completed the :ref:`initial sync
   <replica-set-initial-sync>` and have reached :replstate:`SECONDARY`
   state. To check the state of the replica set members, run
   :method:`rs.status()` in the :binary:`~bin.mongo` shell:

   .. code-block:: javascript

      rs.status()

#. Shut down one of the other non-replica set config servers; i.e.
   either the second and third config server listed in the
   :setting:`~sharding.configDB` setting of the :binary:`~bin.mongos`.

#. Reconfigure the replica set to allow all members to vote and have
   default priority of ``1``.

   .. code-block:: javascript

      var cfg = rs.conf();

      cfg.members[0].priority = 1;
      cfg.members[1].priority = 1;
      cfg.members[2].priority = 1;
      cfg.members[3].priority = 1;
      cfg.members[0].votes = 1;
      cfg.members[1].votes = 1;
      cfg.members[2].votes = 1;
      cfg.members[3].votes = 1;

      rs.reconfig(cfg);

#. Step down the first config server, i.e. the server started with
   ``--configsvrMode=sccc``.

   .. code-block:: javascript

      rs.stepDown()

#. Shut down the following members of the sharded cluster:

   - The :binary:`~bin.mongos` instances.

   - The shards.

   - The remaining non-replica set config servers.

#. Shut down the first config server. 

   If the first config server uses the MMAPv1 storage engine, remove
   the member from the replica set. Connect a :binary:`~bin.mongo` shell to
   the current primary and use :method:`rs.remove()`:

   .. important::

      If the first config server uses the WiredTiger storage engine,
      do not remove.

   .. code-block:: javascript

      rs.remove("<hostname>:<port>")

#. If the first config server uses :doc:`WiredTiger
   </core/wiredtiger>`, restart the first config server in config server
   replica set (``CSRS``) mode; i.e. restart **without** the
   ``--configsvrMode=sccc`` option:

   .. important::

      If the first config server uses the MMAPv1 storage engine,
      do not restart.

   .. code-block:: sh

      mongod --configsvr --replSet csReplSet --storageEngine wiredTiger --port <port> --dbpath <path>

   Or if using a :doc:`configuration file
   </reference/configuration-options>`, omit the
   :setting:`sharding.configsvrMode` setting:

   .. code-block:: yaml

      sharding:
         clusterRole: configsvr
      replication:
         replSetName: csReplSet
      net:
         port: <port>
      storage:
         dbPath: <path>
         engine: <storageEngine>

#. Restart the shards.

#. Restart :binary:`~bin.mongos` instances with updated :option:`--configdb <mongos --configdb>` or
   :setting:`~sharding.configDB` setting. 

   For the updated :option:`--configdb <mongos --configdb>` or :setting:`~sharding.configDB`
   setting, specify the replica set name for the config servers and the
   members in the replica set.

   .. code-block:: sh

      mongos --configdb csReplSet/<rsconfigsver1:port1>,<rsconfigsver2:port2>,<rsconfigsver3:port3>

#. **Re-enable the balancer** as described in
   :ref:`sharding-balancing-enable`.
