.. _java-integrations:

===================
Driver Integrations
===================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: java sync, third party, tools, frameworks

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

On this page, you can learn about using tools and frameworks together
with the {+driver-short+} to develop applications.

This page describes the following third-party integrations:

- :ref:`spring-framework`
- :ref:`quarkus-framework`
- :ref:`micronaut-framework`

.. TODO (add after JAVA-3580 is finished):
   - :ref:`graalvm-integration`

.. important::

   The integrations on this page are not developed by official MongoDB
   partners.

.. _spring-framework:

Spring Data
-----------

`Spring <https://spring.io/>`__ is a Java framework that provides infrastructure support
for Java applications. Spring's modules enable aspect-oriented programming, authentication
protocols, inversion of control, and other services to facilitate application development.

Spring offers the Spring Data sub-framework for database access. Spring Data's features include
map-reduce frameworks, cloud-based data services, and an access layer for relational and
non-relational databases. To learn more about the Spring Data project, see `Spring Data
<https://spring.io/projects/spring-data>`__.

Using Spring Data and MongoDB
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Spring Data MongoDB enables you to access MongoDB databases by using a Spring-based programming
model. 

You can use Spring Data MongoDB's template API to perform the following actions:

- Run CRUD operations on MongoDB data
- Map domain objects to MongoDB documents using the MongoDB converter
- Perform Atlas Search queries using the ``$search`` aggregation pipeline stage
- Enable Client-Side Field Level Encryption (CSFLE) to encrypt application data

For instructions on using Spring Data MongoDB to build an application and interact with MongoDB, see the 
`Getting Started <https://docs.spring.io/spring-data/mongodb/reference/mongodb/getting-started.html>`__ page
in the Spring reference documentation.

.. tip:: 

   To learn more about Spring Data MongoDB and its features, see the `Spring Data MongoDB
   <https://spring.io/projects/spring-data-mongodb/>`__ project overview.

.. _quarkus-framework:

Quarkus
-------

The `Quarkus <https://quarkus.io/>`__ Java framework supports the development of microservices
and serverless applications. Quarkus is native to `Kubernetes <https://kubernetes.io/>`__, a platform
that manages the deployment of containerized applications.

Quarkus' features include an interactive developer interface, live coding, and container-first application
development that reduces the memory usage of Java applications.

Using Quarkus and MongoDB
~~~~~~~~~~~~~~~~~~~~~~~~~

Quarkus provides a MongoDB client for MongoDB data access.

You can use the MongoDB client extension to access the following features:

- CRUD operation methods, such as ``find()`` and ``insertOne()``
- Automatic translation of domain objects to MongoDB documents by using the BSON Codec
- Customized domain object mapping by using the POJO Codec

For instructions on how to use the ``quarkus-mongodb-client`` extension to connect to MongoDB,
see the `Using the MongoDB Client <https://quarkus.io/guides/mongodb>`__ guide in the Quarkus
documentation.

.. tip::

   You can also install the ``quarkus-mongodb-panache`` extension to further simplify MongoDB
   database interactions. For details and instructions on using this extension, see the
   `Simplified MongoDB with Panache <https://quarkus.io/guides/mongodb-panache>`__ guide in the
   Quarkus documentation.

.. TODO (after JAVA-3580):
  .. _graalvm-integration:

.. _micronaut-framework:

Micronaut
---------

`Micronaut <https://micronaut.io/>`__ is a framework that focuses on server-side microservice
development. Micronaut reduces code reflection, enabling performance improvements such as
decreased application startup time and memory usage.

Key features of the Micronaut framework include aspect-oriented programming, inversion
of control, and automatic code configuration.

Using Micronaut and MongoDB
~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can create a Micronaut application that interacts with MongoDB. 

Micronaut provides a serialization library and BSON annotations to manage MongoDB data from your
application. These features enable you to create POJOs that correspond to MongoDB documents,
interfaces that map to MongoDB collections, and other custom mappings. 

For instructions on using the ``data-mongodb`` or ``data-mongodb-async`` feature to create a MongoDB-backed
Micronaut application, see the `Micronaut Data MongoDB <https://micronaut-projects.github.io/micronaut-data/latest/guide/#mongo>`__
guide in the Micronaut documentation.

.. tip::

   For a full list of Micronaut's available annotations, see the `io.micronaut.data.annotation
   <https://micronaut-projects.github.io/micronaut-data/latest/api/io/micronaut/data/annotation/package-summary.html>`__
   package API documentation.


