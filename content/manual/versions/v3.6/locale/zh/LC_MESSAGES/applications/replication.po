#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/applications/replication.txt:3
msgid "Replica Set Read and Write Semantics"
msgstr ""

#: ../source/applications/replication.txt:20
msgid ""
":term:`Sharded clusters <sharded cluster>` where the shards are also replica"
" sets provide the same operational semantics with regards to write and read "
"operations."
msgstr ""

#: ../source/includes/toc/dfn-list-replica-set-read-write-semantics.rst:5
msgid ":doc:`/core/replica-set-write-concern`"
msgstr ""

#: ../source/includes/toc/dfn-list-replica-set-read-write-semantics.rst:9
msgid ":doc:`/core/read-preference`"
msgstr ""

#: ../source/includes/toc/dfn-list-replica-set-read-write-semantics.rst:11
msgid ":doc:`/core/read-preference-mechanics`"
msgstr ""

#: ../source/applications/replication.txt:13
msgid ""
"From the perspective of a client application, whether a MongoDB instance is "
"running as a single server (i.e. \"standalone\") or a :term:`replica set` is"
" transparent. However, MongoDB provides additional read and write "
"configurations for replica sets."
msgstr ""

#: ../source/includes/toc/dfn-list-replica-set-read-write-semantics.rst:4
msgid ""
"Write concern describes the level of acknowledgement requested from MongoDB "
"for write operations."
msgstr ""

#: ../source/includes/toc/dfn-list-replica-set-read-write-semantics.rst:8
msgid ""
"Read preference specifies where (i.e. which members of the replica set) the "
"drivers should direct the read operations."
msgstr ""

#: ../source/includes/toc/dfn-list-replica-set-read-write-semantics.rst:12
msgid "Describes the mechanics of read preference."
msgstr ""

#~ msgid ""
#~ "From the perspective of a client application, whether a MongoDB instance is "
#~ "running as a single server (i.e. \"standalone\") or a :term:`replica set` is"
#~ " transparent."
#~ msgstr ""

#~ msgid ""
#~ "By default, in MongoDB, read operations to a replica set return results from"
#~ " the :doc:`primary </core/replica-set-primary>`."
#~ msgstr ""

#~ msgid ""
#~ "Users may configure :term:`read preference` on a per-connection basis to "
#~ "prefer that the read operations return results from the :term:`secondary` "
#~ "members. If clients configure the :term:`read preference` to permit "
#~ "secondary reads, read operations can return data from :term:`secondary` "
#~ "members that have not replicated more recent write operations."
#~ msgstr ""

#~ msgid ""
#~ "This behavior is sometimes characterized as :term:`eventual consistency` "
#~ "because the secondary member's state will *eventually* reflect the primary's"
#~ " state and MongoDB cannot guarantee :term:`strict consistency` for read "
#~ "operations from secondary members. [#edge-cases-2-primaries]_"
#~ msgstr ""

#~ msgid ""
#~ "In MongoDB, clients can see the results of writes before they are made "
#~ "durable:"
#~ msgstr ""

#~ msgid ""
#~ "Regardless of :doc:`write concern </reference/write-concern>`, other clients"
#~ " can see the result of the write operations before the write operation is "
#~ "acknowledged to the issuing client."
#~ msgstr ""

#~ msgid ""
#~ "Clients can read data which may be subsequently :doc:`rolled back </core"
#~ "/replica-set-rollbacks>`."
#~ msgstr ""

#~ msgid ""
#~ "Write concern is the guarantee an application requires from MongoDB to "
#~ "consider a write operation successful."
#~ msgstr ""

#~ msgid ""
#~ "Applications specify *read preference* to control how drivers direct read "
#~ "operations to members of the replica set."
#~ msgstr ""

#~ msgid ""
#~ "With replica sets, read operations may have additional semantics and "
#~ "behavior."
#~ msgstr ""

#~ msgid ""
#~ "In some circumstances, two nodes in a replica set may *transiently* believe "
#~ "that they are the primary, but at most, one of them will be able to complete"
#~ " writes with :ref:`{w: majority} write concern <wc-w>`. The node that can "
#~ "complete :ref:`{w: majority} <wc-w>` writes is the current primary, and the "
#~ "other node is a former primary that has not yet recognized its demotion, "
#~ "typically due to a :term:`network partition`. When this occurs, clients that"
#~ " connect to the former primary may observe stale data despite having "
#~ "requested read preference :readmode:`primary`."
#~ msgstr ""
