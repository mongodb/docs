===============
listCollections
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: listCollections

   Retrieves information, including the names and creation options, for
   the collections and :ref:`views <views-landing-page>` in a database. 
   
   The ``listCollections`` command returns a document that contains an unsorted
   list of all collections and views in the database. You can use the returned
   document to create a :ref:`cursor <doc-cursor-methods>` on the collection. 

   :binary:`~bin.mongosh` provides the :method:`db.getCollectionInfos()`
   and the :method:`db.getCollectionNames()` helper methods.

Compatibility
-------------

This command is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-all.rst

.. include:: /includes/fact-environments-onprem-only.rst

Syntax
------

The command has the following syntax:

.. code-block:: javascript

   db.runCommand(
      { 
        listCollections: 1, 
        filter: <document>, 
        nameOnly: <boolean>, 
        authorizedCollections: <boolean>, 
        comment: <any> 
      }
   )

Command Fields
--------------

The command can take the following optional fields:

.. list-table::
  :header-rows: 1
  :widths: 20 20 80

  * - Field
    - Type
    - Description

  * - ``filter``
    - document
    - Optional. A query predicate to filter the list of collections.
      
      You can specify a query predicate on any of the :ref:`fields
      returned <list-collection-output>` by :dbcommand:`listCollections`.

  * - ``nameOnly``
    - boolean
    - .. include:: /includes/listCollections-nameOnly-option.rst
      
  * - ``authorizedCollections``
    - boolean
    - Optional. A flag, when set to ``true`` and used with ``nameOnly: true``, that
      allows a user without the required privilege (i.e.
      :authaction:`listCollections` action on the database) to run the
      command when access control is enforced.
      
      When both ``authorizedCollections`` and ``nameOnly`` options are set
      to true, the command returns only those collections for which the user
      has privileges. For example, if a user has :authaction:`find` action
      on specific collections, the command returns only those collections; or,
      if a user has :authaction:`find` or any other action, on the
      database resource, the command lists all collections in the database.
      
      The default value is ``false``. That is, the user must have
      :authaction:`listCollections` action on the database to run the
      command.
      
      For a user who has :authaction:`listCollections` action on the
      database, this option has no effect since the user has privileges to
      list the collections in the database.
      
      When used without ``nameOnly: true``, this option has no effect.
      That is, the user must have the required privileges to run the
      command when access control is enforced. Otherwise, the user is
      unauthorized to run the command.
      
  * - ``comment``
    - any
    - .. include:: /includes/extracts/comment-content.rst

      .. |comment-include-command| replace:: ``listCollections``

      .. include:: /includes/comment-option-getMore-inheritance.rst

.. _listCollections-behavior:

Behavior
--------

Filter
~~~~~~

Use a filter to limit the results of ``listCollections``. You can specify a 
``filter`` on any of the :ref:`fields returned <list-collection-output>` in the 
``listCollections`` result set.

Locks
~~~~~

``listCollections`` lock behavior:

- Earlier than MongoDB 5.0, ``listCollections`` takes an :term:`intent
  shared lock <intent lock>` lock on each collection in the database
  when ``listCollections`` holds an intent shared lock on the database.

- Starting in MongoDB 5.0, ``listCollections`` doesn't take an intent
  shared lock on a collection or database. ``listCollections`` isn't
  blocked by operations holding an exclusive write lock on a collection.

To learn about locks, see :ref:`faq-concurrency`.

Client Disconnection
~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-disconnect.rst

.. |operation| replace:: :dbcommand:`listCollections`

Replica Set Member State Restriction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.4-changes-repl-state-restrictions-operation.rst

.. |operations| replace:: :dbcommand:`listCollections`

Required Access
---------------

.. include:: /includes/extracts/listCollections-auth-required-access.rst

``show collections``
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/listCollections-auth-show-collections.rst

.. _list-collection-output:

Output
------

.. data:: listCollections.cursor

   A document that contains information with which to create a cursor
   to documents that contain collection names and options. The cursor
   information includes the cursor id, the full namespace for the
   command, as well as the first batch of results. Each document in the
   batch output contains the following fields:

   .. list-table::
      :header-rows: 1
      :widths: 15 15 30

      * - Field
        - Type
        - Description

      * - name
        - String
        - Name of the collection.

      * - type
        - String
        - Type of data store. Returns ``collection`` for
          :manual:`collections
          </core/databases-and-collections/#collections>`, ``view`` for
          :manual:`views </core/views/>`, and ``timeseries`` for
          :ref:`time series collection <manual-timeseries-collection>`.

      * - options
        - Document
        - Collection options.

          These options correspond directly to the options available in
          :method:`db.createCollection()`. For the descriptions on the
          options, see :method:`db.createCollection()`.

      * - info
        - Document
        - Lists the following fields related to the collection:

          readOnly
             ``boolean``. If ``true`` the data store is read only.

          uuid
             :abbr:`UUID (Universally unique identifier)`. Once
             established, the collection UUID does not change. The
             collection UUID remains the same across replica set
             members and shards in a sharded cluster.

      * - idIndex
        - Document
        - Provides information on the ``_id`` index for the
          collection.

.. data:: listCollections.ok

   The return value for the command. A value of ``1`` indicates
   success.



Example
-------

List All Collections
~~~~~~~~~~~~~~~~~~~~

The ``music`` database contains three collections, ``motorhead``, 
``taylorSwift``, and ``ramones``.

To list the collections in the database, you can use the built-in
:binary:`mongosh` command, :ref:`show collections <mdb-shell-help>`.

.. code-block:: javascript

   show collections

The output is:

.. code-block:: javascript
   :copyable: false

   motorhead
   ramones
   taylorSwift

To get a similar list with the ``listCollections`` collections command,
use the ``nameOnly`` option.

.. code-block:: javascript

   db.runCommand(
      {
         listCollections: 1.0,
         nameOnly: true
      }
   )

The output is:

.. code-block:: javascript
   :copyable: false

   {
     cursor: {
       id: Long("0"),
       ns: 'music.$cmd.listCollections',
       firstBatch: [
         { name: 'motorhead', type: 'collection' },
         { name: 'taylorSwift', type: 'collection' },
         { name: 'ramones', type: 'collection' }
       ]
     },
     ok: 1
   }

To get more detailed information, remove the ``nameOnly`` option.

.. code-block:: javascript

   db.runCommand(
      {
         listCollections: 1.0
      }
   )


The output is:

.. code-block:: javascript
   :copyable: false

   {
     cursor: {
       id: Long("0"),
       ns: 'music.$cmd.listCollections',
       firstBatch: [
         {
           name: 'motorhead',
           type: 'collection',
           options: {},
           info: {
             readOnly: false,
             uuid: new UUID("09ef1858-2831-47d2-a3a7-9a29a9cfeb94")
           },
           idIndex: { v: 2, key: { _id: 1 }, name: '_id_' }
         },
         {
           name: 'taylorSwift',
           type: 'collection',
           options: {},
           info: {
             readOnly: false,
             uuid: new UUID("6c46c8b9-4999-4213-bcef-9a36b0cff228")
           },
           idIndex: { v: 2, key: { _id: 1 }, name: '_id_' }
         },
         {
           name: 'ramones',
           type: 'collection',
           options: {},
           info: {
             readOnly: false,
             uuid: new UUID("7e1925ba-f2f9-4e42-90e4-8cafd434a6c4")
           },
           idIndex: { v: 2, key: { _id: 1 }, name: '_id_' }
         }
       ]
     },
     ok: 1
   }

Learn More
----------

For collection options:

- :method:`db.createCollection()`
- :dbcommand:`create`

For collection information:

- :method:`db.getCollectionInfos()`
- :ref:`mongosh built-in commands <mongosh-help>`
