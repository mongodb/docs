==========================
MongoDB Extended JSON (v2)
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. important:: Disambiguation


   The following page discusses MongoDB Extended JSON v2. For
   discussion on the Legacy MongoDB Extended JSON v1, see
   :doc:`/reference/mongodb-extended-json-v1`.

   For :binary:`~bin.mongo` shell wrapper methods for types, see
   :doc:`/core/shell-types`.

:term:`JSON` can only directly represent a subset of the types
supported by :term:`BSON`. To preserve type information, MongoDB adds
the following extensions to the JSON format.

- Canonical Mode
      A string format that emphasizes type preservation at the expense
      of readability and interoperability. That is, conversion from
      canonical to BSON will generally preserve type information except
      in certain specific cases.

- Relaxed Mode
      A string format that emphasizes readability and interoperability
      at the expense of type preservation. That is, conversion from
      relaxed format to BSON can lose type information.

Both formats conform to the `JSON RFC <http://www.json.org>`_ and can be
parsed by the various MongoDB drivers and tools.

MongoDB Extended JSON v2 Usage
------------------------------

Drivers
~~~~~~~

The following drivers use the Extended JSON v2.0

.. hlist::
   :columns: 3

   - C

   - C++

   - Go

   - Java

   - Node

   - Perl

   - PHPC

   - Python

   - Scala
   
For C# and Ruby that use Legacy MongoDB Extended JSON v1, refer to
:doc:`/reference/mongodb-extended-json-v1`.

MongoDB Command-Line Tools
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-extended-json-v2.rst

BSON Data Types and Associated Representations
----------------------------------------------

The following presents some common BSON data types and the associated
representations in *Canonical* and *Relaxed*.

.. list-table::
   :widths: 15 15 15 30

   * - - :bsontype:`Array`
       - :bsontype:`Binary`
       - :bsontype:`Date`

     - - :bsontype:`Decimal128`
       - :bsontype:`Document`
       - :bsontype:`Double`

     - - :bsontype:`Int32`
       - :bsontype:`Int64`
       - :bsontype:`MaxKey`

     - - :bsontype:`MinKey`
       - :bsontype:`ObjectId`
       - :bsontype:`Regular Expression`
       - :bsontype:`Timestamp`

For a complete list, see
https://github.com/mongodb/specifications/blob/master/source/extended-json.rst#conversion-table.

.. bsontype:: Array

--------------------------------------------------- 

.. list-table::
   :header-rows: 1
   :class: border-table

   * - Canonical

     - Relaxed

   * - .. code-block:: none
          :copyable: false

          [ <elements> ]

     - .. code-block:: none
          :copyable: false

          <Same as Canonical>

.. list-table::

   * - Where the array elements are as follows:

   * - - ``<elements>``
            Array elements use Extended JSON.
            To specify an empty array, omit the content ``[ ]``.


.. _extended-json-binary:

.. bsontype:: Binary

---------------------------------------------------

.. list-table::
   :header-rows: 1
   :class: border-table

   * - Canonical
     - Relaxed

   * - .. code-block:: none
          :copyable: false

          { "$binary": 
             {
                "base64": "<payload>",
                "subType": "<t>" 
             }
          }

     - .. code-block:: none
          :copyable: false
     
          <Same as Canonical>

.. list-table::

   * - Where the values are as follows:

   * - - ``"<payload>"``
            Base64 encoded (with padding as "=") payload string.

       - ``"<t>"``
            A one- or two-character hex string that corresponds to a
            BSON binary subtype. See the extended bson documentation
            http://bsonspec.org/spec.html for subtypes available.

.. _extended-json-date:

.. bsontype:: Date

---------------------------------------------------

*For dates between years 1970 and 9999, inclusive*:

.. list-table::
   :header-rows: 1
   :class: border-table
 
   * - Canonical
     - Relaxed

   * - .. code-block:: none
          :copyable: false

          {"$date": {"$numberLong": "<millis>"}}

     - .. code-block:: none
          :copyable: false
     
          {"$date": "<ISO-8601 Date/Time Format>"}

*For dates before year 1970 or after year 9999*:

.. list-table::
   :header-rows: 1
   :class: border-table
 
   * - Canonical
     - Relaxed

   * - .. code-block:: none
          :copyable: false

          {"$date": {"$numberLong": "<millis>"}}
     
     - .. code-block:: none
          :copyable: false
     
          <Same as Canonical>

.. list-table::

   * - Where the values are as follows:
   * - - ``"<millis>"``
            A 64-bit signed integer as string. The value
            represents milliseconds relative to the epoch.

       - ``"<ISO-8601 Date/Time Format>"``
            A date in `ISO-8601 Internet
            Date/Time Format
            <https://tools.ietf.org/html/rfc3339#section-5.6>`__ as string.
            The date/time has a maximum time precision of milliseconds:

            - Fractional seconds have exactly 3 decimal
              places if the fractional part is non-zero.

            - Otherwise, fractional seconds SHOULD be omitted if zero.

.. bsontype:: Decimal128

--------------------------------------------------- 

.. versionadded:: 3.4

.. list-table::
   :header-rows: 1
   :class: border-table

   * - Canonical

     - Relaxed

   * - .. code-block:: none
          :copyable: false

          { "$numberDecimal": "<number>" }

     - .. code-block:: none
          :copyable: false

          <Same as Canonical>

.. list-table::

   * - Where the values are as follows:

   * - - ``"<number>"``
           A `high-precision decimal
           <https://github.com/mongodb/specifications/blob/master/source/bson-decimal128/decimal128.rst>`_ 
           as string.

.. bsontype:: Document

--------------------------------------------------- 

.. list-table::
   :header-rows: 1
   :class: border-table

   * - Canonical

     - Relaxed

   * - .. code-block:: none
          :copyable: false

          { <content> }

     - .. code-block:: none
          :copyable: false

          <Same as Canonical>

.. list-table::

   * - Where the document contents are as follows:

   * - - ``<content>``
            Name:value pairs that use Extended JSON.
            To specify an empty document, omit the content ``{ }``.

.. bsontype:: Double

---------------------------------------------------

*For finite numbers*:

.. list-table::
   :header-rows: 1
   :class: border-table
 
   * - Canonical
     - Relaxed

   * - .. code-block:: none
          :copyable: false

          {"$numberDouble": "<decimal string>" }

     - .. code-block:: none
          :copyable: false

          <non-integer number>

*For infinite numbers or NAN*:

.. list-table::
   :header-rows: 1
   :class: border-table
 
   * - Canonical
     - Relaxed

   * - .. code-block:: none
          :copyable: false

          {"$numberDouble": <"Infinity"|"-Infinity"|"NaN"> }
     
     - .. code-block:: none
          :copyable: false
     
          <Same as Canonical>

.. list-table::

   * - Where the values are as follows:
   * - - ``"<decimal string>"``
            A 64-bit signed floating point as a string.

       - ``<non-integer number>``
           A non-integer number. Integer numbers are parsed as
           integer instead of double.

.. bsontype:: Int64

--------------------------------------------------- 

.. list-table::
   :header-rows: 1
   :class: border-table

   * - Canonical

     - Relaxed

   * - .. code-block:: none
          :copyable: false

          { "$numberLong": "<number>" }

     - .. code-block:: none
          :copyable: false

          <integer>

 .. list-table::
 
    * - Where the values are as follows:

    * - - ``"<number>"``
            A 64-bit signed integer as string.

        - ``<integer>``
            A 64-bit signed integer.

.. bsontype:: Int32

--------------------------------------------------- 

.. list-table::
   :header-rows: 1
   :class: border-table

   * - Canonical

     - Relaxed

   * - .. code-block:: none
          :copyable: false

          { "$numberInt": "<number>" }

     - .. code-block:: none
          :copyable: false

          <integer>

 .. list-table::
 
    * - Where the values are as follows:

    * - - ``"<number>"``
            A 32-bit signed integer as string.

        - ``<integer>``
            A 32-bit signed integer.

.. bsontype:: MaxKey

--------------------------------------------------- 

.. list-table::
   :header-rows: 1
   :class: border-table

   * - Canonical

     - Relaxed


   * - .. code-block:: none
          :copyable: false

          { "$maxKey": 1 }

     - .. code-block:: none
          :copyable: false

          <Same as Canonical>

The MaxKey BSON data type compares higher than all other types. See
:ref:`faq-dev-compare-order-for-BSON-types` for more information on
comparison order for BSON types.

.. bsontype:: MinKey

--------------------------------------------------- 

.. list-table::
   :header-rows: 1
   :class: border-table

   * - Canonical

     - Relaxed


   * - .. code-block:: none
          :copyable: false

          { "$minKey": 1 }

     - .. code-block:: none
          :copyable: false

          <Same as Canonical>

The MinKey BSON data type compares lower than all other types. See
:ref:`faq-dev-compare-order-for-BSON-types` for more information on
comparison order for BSON types.

.. bsontype:: ObjectId

--------------------------------------------------- 

.. list-table::
   :header-rows: 1
   :class: border-table

   * - Canonical
     - Relaxed

   * - .. code-block:: none
          :copyable: false

          { "$oid": "<ObjectId bytes>" }

     - .. code-block:: none
          :copyable: false

          <Same as Canonical>

.. list-table::

   * - Where the values are as follows:

   * - - ``"<ObjectId bytes>"``
           A 24-character, big-endian hexadecimal string that
           represents the ObjectId bytes.

.. bsontype:: Regular Expression

--------------------------------------------------- 

.. list-table::
   :header-rows: 1
   :class: border-table

   * - Canonical

     - Relaxed

   * - .. code-block:: none
          :copyable: false

          { "$regularExpression": 
             {
                "pattern": "<regexPattern>", 
                "options": "<options>"
            }
          }

     - .. code-block:: none
          :copyable: false

          <Same as Canonical>

.. list-table::

   * - Where the values are as follows:

   * - - ``"<regexPattern>"``
           A string that corresponds to the regular expression
           pattern. The string can contain valid JSON characters and
           unescaped double quote (``"``) characters, but may not
           contain unescaped forward slash (``/``) characters.

       - ``"<options>"``
           A string that specifies BSON regular expression options
           ('g', 'i', 'm' and 's') or an empty string ``""``.
       
           Options other than ('g', 'i', 'm' and 's') will be dropped
           when converting to this representation.

           .. important::

              The options MUST be in alphabetical order.

.. bsontype:: Timestamp

--------------------------------------------------- 

.. list-table::
   :header-rows: 1
   :class: border-table

   * - Canonical

     - Relaxed

   * - .. code-block:: none
          :copyable: false

          {"$timestamp": {"t": <t>, "i": <i>}}

     - .. code-block:: none
          :copyable: false

          <Same as Canonical>

.. list-table::

   * - Where the values are as follows:

   * - - ``<t>``
           A positive integer for the seconds since epoch.

       - ``<i>``
           A positive integer for the increment.


Example
-------

.. list-table::
   :widths: 20 40 40
   :header-rows: 1
   
   * - Example Field Name
     - Canonical Format
     - Relaxed Format

   * - "_id:"
   
     - {"$oid":"5d505646cf6d4fe581014ab2"}
     - {"$oid":"5d505646cf6d4fe581014ab2"}

   * - "arrayField":
     - ["hello",{"$numberInt":"10"}]
     - ["hello",10]

   * - "dateField":
     - {"$date":{"$numberLong":"1565546054692"}}
     - {"$date":"2019-08-11T17:54:14.692Z"}

   * - "dateBefore1970":
     - {"$date":{"$numberLong":"-1577923200000"}}
     - {"$date":{"$numberLong":"-1577923200000"}}
     
   * - "decimal128Field":
     - {"$numberDecimal":"10.99"}
     - {"$numberDecimal":"10.99"}

   * - "documentField":
     - {"a":"hello"}
     - {"a":"hello"}

   * - "doubleField":
     - {"$numberDouble":"10.5"}
     - 10.5

   * - "infiniteNumber"
     - {"$numberDouble":"Infinity"}
     - {"$numberDouble":"Infinity"}
    
   * - "int32field":
     - {"$numberInt":"10"}
     - 10

   * - "int64Field":
     - {"$numberLong":"50"}
     - 50

   * - "minKeyField":
     - {"$minKey":1}
     - {"$minKey":1}

   * - "maxKeyField":
     - {"$maxKey":1}
     - {"$maxKey":1}

   * - "regexField":
     - {"$regularExpression":{"pattern":"^H","options":"i"}}
     - {"$regularExpression":{"pattern":"^H","options":"i"}}

   * - "timestampField":
     - {"$timestamp":{"t":1565545664,"i":1}}
     - {"$timestamp":{"t":1565545664,"i":1}}
