=========================================
Upgrade to the Latest Revision of MongoDB
=========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

:ref:`MongoDB versioning <release-version-numbers>` have the form
``X.Y.Z`` where ``Z`` refers to the revision/patch number.
Revisions provide security patches, bug fixes, and new or changed
features that generally do not contain any backward breaking changes.
Always upgrade to the latest revision in your release series.

For more information on versioning, see :ref:`release-version-numbers`.

.. _upgrade-options:

Before Upgrading
----------------

Backup
~~~~~~

Ensure you have an up-to-date backup of your data set. See
:doc:`/core/backups`.

Compatibility Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Consult the following documents for any special considerations or
  compatibility issues specific to your MongoDB release:

  - The release notes, located at :doc:`/release-notes`.

  - The documentation for your driver. See :ecosystem:`Drivers
    </drivers>` and :ecosystem:`Driver Compatibility
    </drivers/driver-compatibility-reference>` pages for more information.

.. important::

   - Starting in MongODB 4.2, MongoDB removes support for Ubuntu 16.04
     PPCLE.

   - Starting in MongoDB 3.6.13, MongoDB 3.6-series removes support for
     Ubuntu 16.04 PPCLE.
     
   - Starting in MongoDB 3.4.21, MongoDB 3.4-series removes support for
     Ubuntu 16.04 PPCLE.
     
Maintenance Window
~~~~~~~~~~~~~~~~~~

If your installation includes :term:`replica sets <replica set>`, plan
the upgrade during a predefined maintenance window.

Change Streams
~~~~~~~~~~~~~~

Starting in MongoDB 4.0.7, change streams use a version 1 ``v1`` resume
tokens. MongoDB versions earlier than 4.0.7 use ``v0`` resume tokens.

When upgrading from MongoDB 4.0.6 or earlier to MongoDB 4.0.7 or later,
a client may try to resume change streams using the new ``v1`` resume
token when connected to a member that has not been updated (i.e. only
accepts ``v0`` or BinData token) and fail. In such cases, the client
must wait for the upgrade to complete before resuming change streams.

3-Member PSA Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 3.6, MongoDB enables support for
:readconcern:`"majority"` read concern by default.

You can disable read concern :readconcern:`"majority"` to prevent
the storage cache pressure from immobilizing a deployment with a
primary-secondary-arbiter (PSA) architecture. However,

- .. include:: /includes/extracts/changestream-disable-rc-majority.rst

- .. include:: /includes/extracts/transactions-read-concern-majority.rst

For more information, see :ref:`disable-read-concern-majority`.

Staging Environment Check
~~~~~~~~~~~~~~~~~~~~~~~~~~

Before you upgrade a production environment, use the procedures in this
document to upgrade a *staging* environment that reproduces your
production environment, to ensure that your production configuration is
compatible with all changes.

.. _upgrade-procedure:

Upgrade Procedure
-----------------

.. important:: Always backup all of your data before upgrading MongoDB.

Upgrade each :binary:`~bin.mongod` and :binary:`~bin.mongos` binary
separately, using the procedure described here. When upgrading a binary,
use the procedure :ref:`upgrade-mongodb-instance`.

Follow this upgrade procedure:

1. For deployments that use authentication, first upgrade all of your
   MongoDB :ecosystem:`drivers </drivers>`. To upgrade, see the
   documentation for your driver as well as the :ecosystem:`Driver
   Compatibility </drivers/driver-compatibility-reference>` page.

#. Upgrade sharded clusters, as described in
   :ref:`upgrade-sharded-cluster`.

#. Upgrade any standalone instances. See :ref:`upgrade-mongodb-instance`.

#. Upgrade any replica sets that are not part of a sharded cluster, as
   described in :ref:`upgrade-replica-set`.

.. _upgrade-mongodb-instance:

Upgrade a MongoDB Instance
--------------------------

To upgrade a :binary:`~bin.mongod` or :binary:`~bin.mongos` instance, use one
of the following approaches:

- Upgrade the instance using the operating system's package management
  tool and the official MongoDB packages. This is the preferred
  approach. See :doc:`/installation`.

- Upgrade the instance by replacing the existing binaries with new
  binaries. See :ref:`upgrade-replace-binaries`.

.. _upgrade-replace-binaries:

Replace the Existing Binaries
-----------------------------

.. important:: Always backup all of your data before upgrading MongoDB.

This section describes how to upgrade MongoDB by replacing the existing
binaries. The preferred approach to an upgrade is to use the operating
system's package management tool and the official MongoDB packages, as
described in :doc:`/installation`.

To upgrade a :binary:`~bin.mongod` or :binary:`~bin.mongos` instance by
replacing the existing binaries:

1. Download the binaries for the latest MongoDB revision from the
   `MongoDB Download Page`_ and store the binaries in a temporary
   location. The binaries download as compressed files that uncompress
   to the directory structure used by the MongoDB installation.

#. Shutdown the instance.

#. Replace the existing MongoDB binaries with the downloaded binaries.

#. Restart the instance.

.. _`MongoDB Download Page`: https://www.mongodb.com/try/download/community?tck=docs_server


.. _upgrade-replica-set:

Upgrade Replica Sets
--------------------

To upgrade a replica set, upgrade each member individually, starting with
the :term:`secondaries <secondary>` and finishing with the
:term:`primary`. Plan the upgrade during a predefined maintenance window.

.. note::

   Starting in MongoDB 4.0.7, change streams use a version 1 ``v1``
   :ref:`resume tokens <change-stream-resume-token>`. MongoDB versions
   earlier than 4.0.7 use ``v0`` resume tokens or BinData resume tokens.

   When upgrading from MongoDB 4.0.0-4.0.6 to MongoDB 4.0.7 or later,
   a client may try to resume change streams using the new ``v1``
   resume token when connected to a member that has not been updated
   (i.e. only accepts ``v0`` token or BinData) and fail. In such cases, the
   client must wait for the upgrade to complete before resuming change
   streams.

Upgrade Secondaries
~~~~~~~~~~~~~~~~~~~

Upgrade each secondary separately as follows:

1. Upgrade the secondary's :binary:`~bin.mongod` binary by following the
   instructions in :ref:`upgrade-mongodb-instance`.

#. After upgrading a secondary, wait for the secondary to recover to
   the ``SECONDARY`` state before upgrading the next instance. To
   check the member's state, issue :method:`rs.status()` in the
   :binary:`~bin.mongo` shell.

   The secondary may briefly go into ``STARTUP2`` or ``RECOVERING``.
   This is normal. Make sure to wait for the secondary to fully recover
   to ``SECONDARY`` before you continue the upgrade.

Upgrade the Primary
~~~~~~~~~~~~~~~~~~~

1. Step down the primary to initiate the normal :ref:`failover
   <replica-set-failover>` procedure. Using one of the following:

   - The :method:`rs.stepDown()` helper in the :binary:`~bin.mongo` shell.

   - The :dbcommand:`replSetStepDown` database command.

   During failover, the set cannot accept writes. Typically this takes
   10-20 seconds. Plan the upgrade during a predefined maintenance
   window.

   .. note:: Stepping down the primary is preferable to directly
      *shutting down* the primary. Stepping down expedites the
      failover procedure.

#. Once the primary has stepped down, call the :method:`rs.status()`
   method from the :binary:`~bin.mongo` shell until you see that another
   member has assumed the ``PRIMARY`` state.

#. Shut down the original primary and upgrade its instance by
   following the instructions in :ref:`upgrade-mongodb-instance`.

.. _upgrade-sharded-cluster:

Upgrade Sharded Clusters
------------------------

.. versionchanged:: 3.4

   The procedure applies to |version|. To make revision upgrades for
   other versions of MongoDB sharded clusters, refer to the appropriate
   version of the manual.

.. note::

   Starting in MongoDB 4.0.7, change streams use a version 1 ``v1``
   :ref:`resume tokens <change-stream-resume-token>`. MongoDB versions
   earlier than 4.0.7 use ``v0`` resume tokens or BinData resume tokens.

   When upgrading from MongoDB 4.0.6 or earlier to 4.0.7 or later, the
   members of the sharded clusters will continue to produce ``v0`` or
   BinData resume tokens until the :binary:`~bin.mongos` instance(s)
   are updated. Upgraded :binary:`~bin.mongos` instances will begin
   producing ``v1`` change stream resume tokens. These tokens cannot be
   used to resume a stream on a :binary:`~bin.mongos` that has not yet
   been upgraded to 4.0.7 or later.

To upgrade a |version| sharded cluster:

1. Disable the cluster's balancer as described in
   :ref:`sharding-balancing-disable-temporarily`.

#. Upgrade the :ref:`config servers <sharding-config-server>`.

   To upgrade the config server replica set, use the procedures in
   :ref:`upgrade-replica-set`.

#. Upgrade each shard.

   - If a shard is a replica set, upgrade the shard using the
     procedure titled :ref:`upgrade-replica-set`.

   - If a shard is a standalone instance, upgrade the shard using the
     procedure titled
     :ref:`upgrade-mongodb-instance`.

#. Once the config servers and the shards have been upgraded, upgrade
   each :binary:`~bin.mongos` instance by following the instructions in
   :ref:`upgrade-mongodb-instance`. You can upgrade the
   :binary:`~bin.mongos` instances in any order.


#. Re-enable the balancer, as described in :ref:`sharding-balancing-re-enable`.
