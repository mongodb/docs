.. _scoring-ref:

=======
Scoring
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Every document returned by an |fts| query is assigned a score based
on relevance, and the documents included in a result set are returned
in order from highest score to lowest.

Behavior
--------

Many factors can influence a document's score, including:

- The position of the search term in the document,
- The frequency of occurrence of the search term in the document,
- The type of :ref:`operator <fts-operators>` the query uses,
- The type of :ref:`analyzer <analyzers-ref>` the query uses.

The score assigned to a returned document is part of the document's
metadata. You can include each returned document's score along with the
result set by using a :pipeline:`$project` in your aggregation
pipeline.

The following example query uses a :pipeline:`$project` stage to add a
field named ``score`` to the returned documents:

.. code-block:: javascript
   :linenos:

   db.movies.aggregate([
     {
       $search: {
         "text": {
           "query": "Helsinki",
           "path": "plot"
         }
       }
     },
     {
       $project: {
         plot: 1,
         title: 1,
         score: { $meta: "searchScore" }
       }
     }
   ])

More information about the Lucene scoring algorithm can be found in the
`Lucene documentation <https://lucene.apache.org/core/3_5_0/scoring.html>`__.

Score Modifiers
---------------

Two score modifying options are available to the
:ref:`search <search-ref>` and :ref:`term <term-ref>` operators.

.. _scoring-boost:

``boost``
~~~~~~~~~

The ``boost`` option multiplies a result's base score by a given
number. In the following example, the :ref:`text <text-ref>`
operator uses ``score`` with the ``boost`` option to multiply the score
results by ``3``.

.. code-block:: javascript
   :linenos:

   db.movies.aggregate([
     {
       $search: {
         "text": {
           "query": "Helsinki",
           "path": "title",
           "score": { "boost": { "value": 3 } }
         }
       }
     },
     {
       $project: {
         "_id": 0,
         "title": 1,
         "score": { "$meta": "searchScore" }
       }
     }
   ])

The above query returns the following results, in which the score is
multiplied by 3 from its base value:

.. code-block:: javascript
   :copyable: false

   { "title" : "Kites Over Helsinki", "score" : 12.247001647949219 }
   { "title" : "Helsinki-Naples All Night Long", "score" : 9.568056106567383 }

.. _scoring-constant:

``constant``
~~~~~~~~~~~~

The ``constant`` option replaces the base score with a given number. In
the following example, the :ref:`term <term-ref>` operator uses
``score`` with the ``constant`` option to replace all score results
with ``5``.

.. code-block:: javascript
   :linenos:

   db.movies.aggregate([
     {
       $search: {
         "term": {
           "query": "tower",
           "path": "title",
           "score": { "constant": { "value": 5 } }
         }
       }
     },
     {
       $project: {
         "_id": 0,
         "title": 1,
         "score": { "$meta": "searchScore" }
       }
     }
   ])

The above query returns the following results, in which the score is
replaced with the specified ``constant`` value:

.. code-block:: json
   :copyable: false
   :linenos:

   { "title": "Tower Heist", "score": 5 }
   { "title": "Tokyo Tower", "score": 5 }
   { "title": "The Leaning Tower", "score": 5 }
   { "title": "Ivory Tower", "score": 5 }

.. note::

   The ``boost`` and ``constant`` options may not be used together.
