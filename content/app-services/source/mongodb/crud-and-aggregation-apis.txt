.. meta::
   :robots: nosnippet

.. _mongodb-crud-and-aggregation-apis:

=======================
CRUD & Aggregation APIs
=======================

.. facet::
   :name: genre 
   :values: reference

.. meta:: 
   :description: Use supported MongoDB CRUD operations, aggregation methods, and limited database commands with your Atlas data source.


.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _mongodb-crud-and-aggregation-apis-overview:

Overview
--------

This page lists :ref:`MongoDB data source <data-sources>` support for
MongoDB commands, operators, options, and aggregation stages.

For information on how to read and write data in MongoDB from a
function, see :ref:`Query MongoDB Atlas <functions-mongodb>`.

For more information on supported features and limitations, see
:ref:`Service Limitations <mongodb-service-limitations>`.

.. note::

   Support for an operation may depend on whether you're running the
   operation as an application user or as a system user.

   - A :ref:`user function <user-functions>` runs in the context of a
     specific application user and enforces data access permissions and
     schema validation, which makes some operations untenable.
   
   - A :ref:`system function <system-functions>` runs as a generic
     system user and is not subject to rules or schema validation. Some
     operations are only available in system functions.

.. _mongodb-crud-and-aggregation-apis-crud-operations:

CRUD Operations
---------------

.. _mongodb-crud-and-aggregation-apis-query-operators:

Query Operators
~~~~~~~~~~~~~~~

Atlas App Services supports most :manual:`query operators
</reference/operator/query>` for queries that run in a
:ref:`user function <user-functions>`. However, some evaluation
operators and all geospatial and bitwise operators are only available
in :ref:`system functions <system-functions>`.

Comparison Operator Availability
````````````````````````````````

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Operation
     - User Function
     - System Function

   * - :manual:`$eq </reference/operator/query/eq>`
     - Yes
     - Yes

   * - :manual:`$gt </reference/operator/query/gt>`
     - Yes
     - Yes

   * - :manual:`$gte </reference/operator/query/gte>`
     - Yes
     - Yes

   * - :manual:`$in </reference/operator/query/in>`
     - Yes
     - Yes

   * - :manual:`$lt </reference/operator/query/lt>`
     - Yes
     - Yes

   * - :manual:`$lte </reference/operator/query/lte>`
     - Yes
     - Yes

   * - :manual:`$ne </reference/operator/query/ne>`
     - Yes
     - Yes

   * - :manual:`$nin </reference/operator/query/nin>`
     - Yes
     - Yes

Logical Operator Availability
`````````````````````````````

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Operation
     - User Function
     - System Function

   * - :manual:`$and </reference/operator/query/and>`
     - Yes
     - Yes

   * - :manual:`$not </reference/operator/query/not>`
     - Yes
     - Yes

   * - :manual:`$nor </reference/operator/query/nor>`
     - Yes
     - Yes

   * - :manual:`$or </reference/operator/query/or>`
     - Yes
     - Yes

Array Operator Availability
```````````````````````````

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Operation
     - User Function
     - System Function

   * - :manual:`$all </reference/operator/query/all>`
     - Yes
     - Yes

   * - :manual:`$elemMatch </reference/operator/query/elemMatch>`
     - Yes
     - Yes

   * - :manual:`$size </reference/operator/query/size>`
     - Yes
     - Yes

Element Operator Availability
`````````````````````````````

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Operation
     - User Function
     - System Function

   * - :manual:`$exists </reference/operator/query/exists>`
     - Yes
     - Yes

   * - :manual:`$type </reference/operator/query/type>`
     - Yes
     - Yes

Evaluation Operator Availability
````````````````````````````````

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Operation
     - User Function
     - System Function

   * - :manual:`$mod </reference/operator/query/mod>`
     - Yes
     - Yes

   * - :manual:`$expr </reference/operator/query/expr>`
     - No
     - Yes

   * - :manual:`$jsonSchema </reference/operator/query/jsonSchema>`
     - No
     - Yes

   * - :manual:`$regex </reference/operator/query/regex>`
     - No
     - Yes

   * - :manual:`$text </reference/operator/query/text>`
     - No
     - Yes

   * - :manual:`$where </reference/operator/query/where>`
     - No
     - Yes

Geospatial Operator Availability
````````````````````````````````

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Operation
     - User Function
     - System Function

   * - :manual:`$geoIntersects </reference/operator/query/geoIntersects>`
     - No
     - Yes

   * - :manual:`$geoWithin </reference/operator/query/geoWithin>`
     - No
     - Yes

   * - :manual:`$near </reference/operator/query/near>`
     - No
     - Yes

   * - :manual:`$nearSphere </reference/operator/query/nearSphere>`
     - No
     - Yes

Bitwise Operator Availability
`````````````````````````````

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Operation
     - User Function
     - System Function

   * - :manual:`$bitsAllClear </reference/operator/query/bitsAllClear>`
     - No
     - Yes

   * - :manual:`$bitsAllSet </reference/operator/query/bitsAllSet>`
     - No
     - Yes

   * - :manual:`$bitsAnyClear </reference/operator/query/bitsAnyClear>`
     - No
     - Yes

   * - :manual:`$bitsAnySet </reference/operator/query/bitsAnySet>`
     - No
     - Yes

.. _mongodb-crud-and-aggregation-apis-update-operators:

Update Operators
~~~~~~~~~~~~~~~~

App Services supports most :manual:`update operators
</reference/operator/update>` for queries that run in a
:ref:`user function <user-functions>`. However, some array update
operators are only available in :ref:`system functions
<system-functions>`.

Field Update Operator Availability
``````````````````````````````````

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Operation
     - User Function
     - System Function

   * - :manual:`$currentDate </reference/operator/update/currentDate>`
     - Yes
     - Yes

   * - :manual:`$inc </reference/operator/update/inc>`
     - Yes
     - Yes

   * - :manual:`$min </reference/operator/update/min>`
     - Yes
     - Yes

   * - :manual:`$max </reference/operator/update/max>`
     - Yes
     - Yes

   * - :manual:`$mul </reference/operator/update/mul>`
     - Yes
     - Yes

   * - :manual:`$rename </reference/operator/update/rename>`
     - Yes
     - Yes

   * - :manual:`$set </reference/operator/update/set>`
     - Yes
     - Yes

   * - :manual:`$setOnInsert </reference/operator/update/setOnInsert>`
     - Yes
     - Yes

   * - :manual:`$unset </reference/operator/update/unset>`
     - Yes
     - Yes

Array Update Operator Availability
``````````````````````````````````

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Operation
     - User Function
     - System Function

   * - :manual:`$ (Positional Update) </reference/operator/update/positional>`
     - Yes
     - Yes

   * - :manual:`$addToSet </reference/operator/update/addToSet>`
     - Yes
     - Yes

   * - :manual:`$pop </reference/operator/update/pop>`
     - Yes
     - Yes

   * - :manual:`$pull </reference/operator/update/pull>`
     - Yes
     - Yes

   * - :manual:`$push </reference/operator/update/push>`
     - Yes
     - Yes

   * - :manual:`$pullAll </reference/operator/update/pullAll>`
     - Yes
     - Yes

   * - :manual:`$[] (All Positional Update) </reference/operator/update/positional-all>`
     - Yes
     - Yes

   * - :manual:`$[element] (Filtered Positional Update) </reference/operator/update/positional-filtered>`
     - Yes
     - Yes

Array Update Operator Modifiers Availability
````````````````````````````````````````````

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Modifier
     - User Function
     - System Function

   * - :manual:`$each </reference/operator/update/each>`
     - Yes
     - Yes

   * - :manual:`$position </reference/operator/update/position>`
     - Yes
     - Yes

   * - :manual:`$slice </reference/operator/update/slice>`
     - Yes
     - Yes

   * - :manual:`$sort </reference/operator/update/sort>`
     - Yes
     - Yes

Bitwise Update Operator Availability
````````````````````````````````````

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Operator
     - User Function
     - System Function

   * - :manual:`$bit </reference/operator/update/bit>`
     - Yes
     - Yes

.. _mongodb-crud-and-aggregation-apis-bulk-write-operations:

Bulk Write Operations
~~~~~~~~~~~~~~~~~~~~~

App Services supports bulk write operations using the same API as the
:node-docs:`MongoDB Node.js driver <>`.

.. tip::

   App Services also provides the :method:`collection.bulkWrite()`
   method for performing bulk write operations.

Ordered Bulk Write Operation Availability
`````````````````````````````````````````

You define ordered bulk operations by calling
:node-driver:`collection.initializeOrderedBulkOp()
<Collection.html#initializeOrderedBulkOp>` and manipulating the
:node-driver:`OrderedBulkOperation <OrderedBulkOperation.html>` object that it
returns.

App Services supports the following ``OrderedBulkOperation`` methods:

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Operation
     - User Function
     - System Function

   * - :manual:`execute </reference/method/Bulk.execute>`
     - Yes
     - Yes

   * - :manual:`find </reference/method/Bulk.find>`
     - Yes
     - Yes

   * - :manual:`insert </reference/method/Bulk.insert>`
     - Yes
     - Yes

Unordered Bulk Write Operation Availability
```````````````````````````````````````````

You define unordered bulk operations by calling
:node-driver:`collection.initializeUnorderedBulkOp()
<Collection.html#initializeUnorderedBulkOp>` and manipulating the
:node-driver:`OrderedBulkOperation <UnorderedBulkOperation.html>` object that it
returns.

App Services supports the following ``UnorderedBulkOperation`` methods:

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Operation
     - User Function
     - System Function

   * - :manual:`execute </reference/method/Bulk.execute>`
     - Yes
     - Yes

   * - :manual:`find </reference/method/Bulk.find>`
     - Yes
     - Yes

   * - :manual:`insert </reference/method/Bulk.insert>`
     - Yes
     - Yes

.. _mongodb-crud-and-aggregation-apis-query-options:

Query Options
~~~~~~~~~~~~~

App Services does not support configuring the following options for any
CRUD operation in :ref:`user functions <user-functions>`. All query
options are available in :ref:`system functions <system-functions>`.

Query Option Availability
`````````````````````````

.. list-table::
   :header-rows: 1
   :widths: 25 10 10

   * - Option
     - User Context
     - System Context

   * - :manual:`Read Isolation (Read Concern) </reference/read-concern>`
     - No
     - Yes

   * - :manual:`Write Acknowledgment (Write Concern) </reference/write-concern>`
     - No
     - Yes

   * - :manual:`Collation </reference/collation>`
     - No
     - Yes

.. _mongodb-crud-and-aggregation-apis-aggregation:

Aggregation
-----------

Aggregation Methods
~~~~~~~~~~~~~~~~~~~

App Services supports aggregation on the both the database and collection level
using the following commands:

- :manual:`db.aggregate() </reference/method/db.aggregate>`
- :manual:`db.collection.aggregate() </reference/method/db.collection.aggregate>`

Aggregation Pipeline Stage Availability
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

All :manual:`aggregation pipeline stages </reference/operator/aggregation-pipeline/>` 
stages are available to the *system user* except for ``$indexStats``. However, 
App Services does not support the following aggregation pipeline stages
when you :ref:`run an aggregation pipeline <mongodb-aggregate>` in the context 
of an :ref:`application user <user-accounts>`. 

.. list-table::
   :header-rows: 1

   * - Operation
     - Notes
     
   * - :manual:`$collStats </reference/operator/aggregation/collStats/>` 
     - 

   * - :manual:`$facet </reference/operator/aggregation/facet/>`
     - 
          
   * - :manual:`$geoNear </reference/operator/aggregation/geoNear/>`
     - 
          
   * - :manual:`$graphLookup </reference/operator/aggregation/graphLookup/>`
     - 
          
   * - :manual:`$indexStats </reference/operator/aggregation/indexStats/>`
     - 
          
   * - :manual:`$lookup </reference/operator/aggregation/lookup/>`
     - 
          
   * - :manual:`$merge </reference/operator/aggregation/merge/>`
     - 
          
   * - :manual:`$out </reference/operator/aggregation/out/>`
     - |
       | By default, ``$merge`` and ``$out`` route the entire aggregation operation to
       | the cluster's primary node. If you want to force these stages to respect your
       | configured cluster read preference, set the ``enforceReadPref`` option to
       | ``true``.
     
   * - :atlas:`$search </reference/atlas-search/query-syntax/>`
     - |
       | App Services performs ``$search`` operations as a system user and
       | enforces field-level rules on the returned search results. This means 
       | that a user may search on a field for which they do not have read access. 
       | In this case, the search is based on the specified field but no returned 
       | documents include the field. 
       | 
       | The :atlas:`$$SEARCH_META </atlas-search/query-syntax/#aggregation-variable>`
       | aggregation variable is only available for functions that 
       | :ref:`run as system <system-functions>` or if the first role on the 
       | searched collection 
       | has its ``apply_when`` and ``read`` expressions set to ``true``.
       | If neither of these two scenarios apply, ``$$SEARCH_META`` is undefined 
       | and the aggregation will fail.
    
   * - :manual:`$unionWith </reference/operator/aggregation/unionWith/>`
     - 

Aggregation Pipeline Operator Availability
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

App Services supports all :manual:`aggregation pipeline operators
</reference/operator/aggregation/>` when you :ref:`run an aggregation pipeline
<mongodb-aggregate>` in the :ref:`system user
<system-functions>` context. 

App Services supports all pipeline operators
in an :ref:`application user <user-accounts>` context except for the following
operators:

- :manual:`$function </reference/operator/aggregation/function/>`
- :manual:`$setIsSubset </reference/operator/aggregation/setIsSubset/>`

.. _mongodb-crud-and-aggregation-apis-database-commands:

Database Commands
-----------------

App Services does not support any :manual:`database commands
</reference/command>` in the Client SDKs or :doc:`Functions
</functions>`. You can, however, call a limited subset of database
commands when connected to a MongoDB cluster over the :ref:`App Services
wire protocol <wire-protocol>`.

The following :manual:`database commands </reference/command>` are
partially supported over the wire protocol. Unsupported options for each
command are listed below.

.. note::
   
   App Services Apps cannot run commands on the ``admin`` database.

Database Command Availability
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 10 40 50

   * - Command
     - Unsupported Options
     - App Services-Specific Options

   * - :manual:`find </reference/command/find>`
     - - ``hint``
       - ``skip``
       - ``batchSize``
       - ``comment``
       - ``maxScan``
       - ``maxTimeMS``
       - ``readConcern``
       - ``max``
       - ``min``
       - ``returnKey``
       - ``showRecordId``
       - ``tailable``
       - ``awaitData``
       - ``oplogReplay``
       - ``noCursorTimeout``
       - ``allowPartialResults``
       - ``collation``
     - 

   * - :manual:`aggregate </reference/command/aggregate>`
     - - ``distinct``
       - ``explain``
       - ``allowDiskUse`` [#f1]_
       - ``readConcern``
       - ``collation``
       - ``bypassDocumentValidation``
       - ``hint``
       - ``comment``
       - ``writeConcern``
     - - ``enforceReadPref``

   * - :manual:`count </reference/command/count>`
     - - ``limit``
       - ``skip``
       - ``hint``
       - ``readConcern``
     - 

   * - :manual:`insert </reference/command/insert>`
     - - ``writeConcern``
       - ``bypassDocumentValidation``
     - 

   * - :manual:`update </reference/command/update>`
     - - ``bypassDocumentValidation``
       - ``collation``
     - 

   * - :manual:`delete </reference/command/delete>`
     - - ``collation``
     - 

.. rubric::footnotes

.. [#f1] App Services supports ``allowDiskUse`` when run in a Function or 
   Trigger with :ref:`system-level permissions <system-functions>`.
