.. _replication:

===========
Replication
===========

.. default-domain:: mongodb

.. meta::
   :keywords: Replica sets provide redundancy and high availability.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

A *replica set* in MongoDB is a group of :binary:`~bin.mongod` processes
that maintain the same data set. Replica sets provide redundancy and
:term:`high availability`, and are the basis for all production 
deployments. This section introduces replication in MongoDB as well as 
the components and architecture of replica sets. The section also 
provides tutorials for common tasks related to replica sets.

Redundancy and Data Availability
--------------------------------

Replication provides redundancy and increases 
:term:`data availability <high availability>`. With
multiple copies of data on different database servers, replication
provides a level of fault tolerance against the loss of a single
database server.

In some cases, replication can provide increased read capacity as
clients can send read operations to different servers. Maintaining
copies of data in different data centers can increase data locality
and availability for distributed applications. You can also maintain
additional copies for dedicated purposes, such as disaster recovery,
reporting, or backup.

.. _replica-set:

Replication in MongoDB
----------------------

A replica set is a group of :binary:`~bin.mongod` instances that maintain
the same data set. A replica set contains several data bearing nodes
and optionally one arbiter node. Of the data bearing nodes, one and
only one member is deemed the primary node, while the other nodes are
deemed secondary nodes.

The :doc:`primary node </core/replica-set-primary>` receives all write
operations. A replica set can have only one primary capable of
confirming writes with :writeconcern:`{ w: "majority" } <"majority">`
write concern; although in some circumstances, another mongod instance
may transiently believe itself to also be primary.
[#edge-cases-2-primaries]_ The primary records all changes to its data
sets in its operation log, i.e. :doc:`oplog
</core/replica-set-oplog>`. For more information on primary node
operation, see :doc:`/core/replica-set-primary`.

.. include:: /images/replica-set-read-write-operations-primary.rst

The :doc:`secondaries </core/replica-set-secondary>` replicate the
primary's oplog and apply the operations to their data sets such that
the secondaries' data sets reflect the primary's data set. If the
primary is unavailable, an eligible secondary will hold an election to
elect itself the new primary. For more information on secondary
members, see :doc:`/core/replica-set-secondary`.

.. include:: /images/replica-set-primary-with-two-secondaries.rst

In some circumstances (such as you have a primary and a secondary but
cost constraints prohibit adding another secondary), you may choose to
add a :binary:`~bin.mongod` instance to a replica set as an
:doc:`arbiter </core/replica-set-arbiter>`. An arbiter participates in
:ref:`elections <replica-set-elections>` but does not hold data (i.e.
does not provide data redundancy). For more information on arbiters,
see :doc:`/core/replica-set-arbiter`.

.. include:: /images/replica-set-primary-with-secondary-and-arbiter.rst

An :doc:`arbiter </core/replica-set-arbiter>` will always be an arbiter
whereas a :doc:`primary </core/replica-set-primary>` may step down and
become a :doc:`secondary </core/replica-set-secondary>` and a
:doc:`secondary </core/replica-set-secondary>` may become the primary
during an election.

.. _asynchronous-replication:

Asynchronous Replication
------------------------

Secondaries replicate the primary's oplog and apply the operations to
their data sets asynchronously. By having the secondaries' data sets
reflect the primary's data set, the replica set can continue to
function despite the failure of one or more members.

For more information on replication mechanics, see
:ref:`replica-set-oplog` and :ref:`replica-set-sync`.


Slow Operations
~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-slow-oplog-log-message-footnote.rst

.. _replication-flow-control:

Replication Lag and Flow Control
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:term:`Replication lag <replication lag>` refers to the amount of time
that it takes to copy (i.e. replicate) a write operation on the
:term:`primary` to a :term:`secondary`. Some small delay period may be
acceptable, but significant problems emerge as replication lag grows,
including building cache pressure on the primary.

.. include:: /includes/extracts/4.2-changes-flow-control-general-desc.rst

.. include:: /includes/extracts/4.2-changes-flow-control-specific-desc.rst
 
For more information, see :ref:`replica-set-replication-lag` and
:ref:`flow-control`.

.. _replication-auto-failover:

Automatic Failover
------------------

When a primary does not communicate with the other members of the set
for more than the configured :rsconf:`electionTimeoutMillis` period
(10 seconds by default), an eligible secondary calls for an election
to nominate itself as the new primary. The cluster attempts to
complete the election of a new primary and resume normal operations.

.. include:: /images/replica-set-trigger-election.rst

The replica set cannot process write operations
until the election completes successfully.  The replica set can continue
to serve read queries if such queries are configured to
:ref:`run on secondaries <replica-set-read-preference>` while the
primary is offline.

.. include:: /includes/fact-election-latency.rst

Lowering the :rsconf:`~settings.electionTimeoutMillis`
replication configuration option from the default ``10000`` (10 seconds)
can result in faster detection of primary failure. However,
the cluster may call elections more frequently due to factors such as
temporary network latency even if the primary is otherwise healthy.
This can result in increased :ref:`rollbacks <replica-set-rollback>` for
:ref:`w : 1 <wc-w>` write operations.

.. include:: /includes/fact-retryable-writes-failover-election.rst

Starting in version 4.4, MongoDB provides :ref:`mirrored reads
<mirrored-reads>` to pre-warm electable secondary members' cache with
the most recently accessed data. Pre-warming the cache of a secondary
can help restore performance more quickly after an election.

To learn more about MongoDBâ€™s failover process, see:

- :ref:`replica-set-elections`
- :ref:`retryable-writes`
- :ref:`replica-set-rollback`


Read Operations
---------------

Read Preference
~~~~~~~~~~~~~~~

By default, clients read from the primary [#edge-cases-2-primaries]_;
however, clients can specify a :doc:`read preference
</core/read-preference>` to send read operations to secondaries.

.. include:: /images/replica-set-read-preference-secondary.rst

:ref:`Asynchronous replication <asynchronous-replication>` to
secondaries means that reads from secondaries may return data that does
not reflect the state of the data on the primary. 

.. include:: /includes/extracts/transactions-read-pref.rst

For information on reading from replica sets, see
:doc:`/core/read-preference`.

Data Visibility
~~~~~~~~~~~~~~~

.. include:: /includes/extracts/concurrent-operations-read-uncommitted.rst

For more information on read isolations, consistency and recency for
MongoDB, see :doc:`/core/read-isolation-consistency-recency`.

.. _mirrored-reads:

Mirrored Reads
~~~~~~~~~~~~~~

Starting in version 4.4, MongoDB provides mirrored reads to pre-warm
the cache of electable secondary members (i.e. members with
:rsconf:`priority greater than 0 <members[n].priority>`). With mirrored
reads (which is enabled by default), the primary can mirror a subset of
:ref:`operations <mirrored-reads-supported-operations>` that it
receives and send them to a subset of electable secondaries. The size
of the subset is :ref:`configurable <mirrored-reads-parameters>`.

.. note::

   The primary's response to the client is not affected by the mirror
   reads. The mirrored reads are "fire-and-forget" operations by the
   primary; i.e., the primary does not await the response for the
   mirrored reads.

.. _mirrored-reads-supported-operations:

Supported Operations
````````````````````

Mirrored reads are supported for the following operations:

- :dbcommand:`count`

- :dbcommand:`distinct`

- :dbcommand:`find`

- :dbcommand:`findAndModify` (Specifically, the filter is sent as a
  mirrored read)

- :dbcommand:`update` (Specifically, the filter is sent as a mirrored
  read)

.. _mirrored-reads-parameters:

Enable/Disable Support for Mirrored Reads
`````````````````````````````````````````

With MongoDB 4.4, mirrored reads are enabled by default and use a
default :parameter:`sampling rate <mirrorReads>` of ``0.01``.
That is, the primary mirrors :ref:`reads
<mirrored-reads-supported-operations>` to each electable (i.e.
:rsconf:`priority greater than 0 <members[n].priority>`) secondary at
the sampling rate of 1 percent.

For example, given a replica set with a primary and two electable
secondaries and a sampling rate of ``0.01``, if the primary receives
``100`` operations that can be mirrored, the sampling may result in
``1`` reads being mirrored to one secondary and ``0`` reads to the
other or ``0`` to each, etc.

To modify the sampling rate, use the :parameter:`mirrorReads` parameter:

- A sampling rate value of ``0.0`` disables mirrored reads. 

- A sampling rate greater than ``0.0`` enables mirrored reads.

- A sampling rate cannot be greater than ``1.0``.

For details, see :parameter:`mirrorReads`.

Mirrored Reads Metrics
``````````````````````

Starting in MongoDB 4.4, the command :dbcommand:`serverStatus` and its
corresponding :binary:`~bin.mongo` shell method
:method:`db.serverStatus()` return :serverstatus:`mirroredReads` if you
specify the field's inclusion in the operation.  For example, 

.. code-block:: javascript

   db.serverStatus( { mirroredReads: 1 } )

Transactions
------------

Starting in MongoDB 4.0, :doc:`multi-document transactions
</core/transactions>` are available for replica sets.

.. include:: /includes/extracts/transactions-read-pref.rst

.. include:: /includes/extracts/transactions-committed-visibility.rst


Change Streams
--------------

Starting in MongoDB 3.6, :doc:`change streams </changeStreams>` are
available for replica sets and sharded clusters. Change streams allow
applications to access real-time data changes without the complexity
and risk of tailing the oplog. Applications can use change streams to
subscribe to all data changes on a collection or collections.


Additional Features
-------------------

Replica sets provide a number of options to support application
needs. For example, you may deploy a replica set with :doc:`members in
multiple data centers
</core/replica-set-architecture-geographically-distributed>`, or
control the outcome of elections by adjusting the
:rsconf:`members[n].priority` of some
members. Replica sets also support dedicated members for reporting,
disaster recovery, or backup functions.

See :ref:`replica-set-secondary-only-members`,
:ref:`replica-set-hidden-members` and
:ref:`replica-set-delayed-members` for more information.

.. [#edge-cases-2-primaries]

   .. include:: /includes/footnote-two-primaries-edge-cases.rst

.. toctree::
   :titlesonly:
   :hidden:

   /core/replica-set-members
   /core/replica-set-oplog
   /core/replica-set-sync
   /core/replica-set-architectures
   Replica Set High Availability </core/replica-set-high-availability>
   /applications/replication
   /administration/replica-set-deployment
   /administration/replica-set-member-configuration
   /administration/replica-set-maintenance
   /reference/replication
