title: Connect with the privilege to grant roles.
stepnum: 1
ref: connect-with-grant-role-privileges
pre: |
  Connect to the :program:`mongod` or :program:`mongos` either through the
  :ref:`localhost exception <localhost-exception>` or as a user with the
  privileges required in the :ref:`assign-role-to-user-prereq` section.
action:
  pre: |
    The following example operation connects to the MongoDB instance as a user
    named ``roleManager``:
  language: javascript
  code: |
    mongo --port 27017 -u roleManager -p 12345678 --authenticationDatabase admin
---
stepnum: 2
source:
  file: steps-change-user-privileges.yaml
  ref: verify-privileges
---
title: Identify the user's roles and privileges.
stepnum: 3
ref: identify-privileges
pre: |
  To display the roles and privileges of the user to be modified, use the
  :method:`db.getUser()` and :method:`db.getRole()` methods, as described in
  :doc:`/tutorial/verify-user-privileges`.
action:
  pre: |
    For example, to view roles for ``accountUser01`` on the current database, issue:
  code: |
    db.getUser("accountUser01")
  language: javascript
action:
  pre: |
    To display the privileges granted by ``siteRole01`` on the current database, issue:
  code: |
    db.getRole( "siteRole01", { showPrivileges: true } )
  language: javascript
---
title: Identify the privileges to grant or revoke.
stepnum: 4
ref: select-roles-to-modify
pre: |
  Determine which role contains the privileges *and only those privileges*. If
  such a role does not exist, then to grant the privileges will require
  :doc:`creating a new role </tutorial/define-roles>` with the specific set of
  privileges. To revoke a subset of privileges provided by an existing role:
  revoke the original role, :doc:`create a new role </tutorial/define-roles>`
  that contains the privileges *to keep*, and then grant that role to the
  user.
---
title: Grant a role to a user.
stepnum: 5
ref: grant-role-to-user
pre: |
  Grant the user the role using the :method:`db.grantRolesToUser()` method.
action:
  pre: |
    For example:
  language: javascript
  code: |
    use admin
    db.grantRolesToUser(
      "accountAdmin01",
      [
        { 
          role: "readWrite", db: "products"
        },
        {
          role: "readAnyDatabase", db:"admin"
        }
      ]
    )
...
