.. _mongodb-analyzer-rules:

=========================
Rules and Message Content
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn about the {+product+} rules and attached
messages. A rule evaluates different parts of your code and returns a
message if a specific condition is met.

For example, the Analyzer might apply a rule if it detects a LINQ
expression, which causes your IDE to display a message that contains the
equivalent Query API expression. Each rule has a severity level of
``Info`` or ``Warning`` that impacts where the message might be recorded.

Rule Descriptions
-----------------

The following sections describe each {+product-short+} rule, including the
rule category, severity level, and description of the corresponding
message. Each section also includes an example message.

MABuilders1001
~~~~~~~~~~~~~~

The ``MABuilders1001`` rule evaluates your code for builders expressions
and triggers a message that contains the equivalent Query API
expression.

.. list-table::
   :header-rows: 0
   :stub-columns: 1
   :widths: 35 65

   * - **Category**
     - ``MongoDB.Analyzer.Builders``

   * - **Severity**
     - ``Info``

   * - **Notes**
     - None

The following code triggers the ``MABuilders1001`` rule to display a message that
shows the equivalent Query API expression:

.. code-block:: csharp
   
   var filter = Builders<Book>.Filter.Eq(b => b.Genre, "Theory") & 
       Builders<Book>.Filter.Gte(b => b.Price, 10);

The following image displays the ``MABuilders1001`` rule and information
message:

.. figure:: /includes/images/MABuilders1001-rule.png
   :alt: Screenshot of builder expression with MABuilders1001 rule message

.. tip::

   To learn more about builders expressions, see the
   :ref:`mongodb-analyzer-analyze-builders` guide.

MABuilders2001
~~~~~~~~~~~~~~

The ``MABuilders2001`` rule detects unsupported builders expressions and
displays a translation error of the unsupported expression.

.. list-table::
   :header-rows: 0
   :stub-columns: 1
   :widths: 35 65

   * - **Category**
     - ``MongoDB.Analyzer.Builders``

   * - **Severity**
     - ``Warning``

   * - **Notes**
     - To view examples of unsupported builders expressions, see the
       `source code testing files <{+product-source-repo+}/blob/main/tests/MongoDB.Analyzer.Tests.Common.TestCases/Builders/NotSupportedBuildersExpressions.cs>`__.

The following code triggers the ``MABuilders2001`` rule to display a message that
shows the unsupported builders expression:

.. code-block:: csharp
   
   var filter = Builders<Book>.Filter.Eq(b => b.Price + 2, 1);

The following image displays the ``MABuilders2001`` rule and information
message:

.. figure:: /includes/images/MABuilders2001-rule.png
   :alt: Screenshot of builder expression with MABuilders2001 rule message
   
.. tip::

   To learn more about builders expressions, see the
   :ref:`mongodb-analyzer-analyze-builders` guide.

MALinq1001
~~~~~~~~~~

The ``MALinq1001`` rule evaluates your code for LINQ expressions
and triggers a message that contains the equivalent Query API
expression.

.. list-table::
   :header-rows: 0
   :stub-columns: 1
   :widths: 35 65

   * - **Category**
     - ``MongoDB.Analyzer.LINQ``

   * - **Severity**
     - ``Info``

   * - **Notes**
     - This rule might apply differently depending on the value of
       your ``DefaultLinqVersion`` configuration setting. To learn more,
       see the :ref:`Analyzer Configuration Options <mongodb-analyzer-configuration-options>`.

The following code triggers the ``MALinq1001`` rule to display a message that
shows the equivalent Query API expression:

.. code-block:: csharp
   
   var results = queryableColl
       .Where(b => b.Genre == "Theory")
       .OrderBy(b => b.Price);

The following image displays the ``MALinq1001`` rule and information
message:

.. figure:: /includes/images/MALinq1001-rule.png
   :alt: Screenshot of LINQ expression with MALinq1001 rule message

.. tip::

   To learn more about LINQ expressions, see the
   :ref:`mongodb-analyzer-analyze-linq` guide.

MALinq2001
~~~~~~~~~~

The ``MALinq2001`` rule detects unsupported LINQ expressions and
displays a translation error of the unsupported expression.

.. list-table::
   :header-rows: 0
   :stub-columns: 1
   :widths: 35 65

   * - **Category**
     - ``MongoDB.Analyzer.LINQ``

   * - **Severity**
     - ``Warning``

   * - **Notes**
     - | This rule might apply differently depending on the value of
       | your ``DefaultLinqVersion`` configuration setting. To learn more,
       | see the :ref:`Analyzer Configuration Options <mongodb-analyzer-configuration-options>`.
       |
       | To view examples of unsupported LINQ expressions, see the
       | `source code testing files <{+product-source-repo+}/blob/main/tests/MongoDB.Analyzer.Tests.Common.TestCases/Linq/NotSupportedLinqExpressions.cs>`__.

The following code triggers the ``MALinq2001`` rule to display a message that
shows the unsupported LINQ expression:

.. code-block:: csharp
   
   var results = queryableColl.Where(b => b.GetHashCode() == 1);

The following image displays the ``MALinq2001`` rule and information
message:

.. figure:: /includes/images/MALinq2001-rule.png
   :alt: Screenshot of LINQ expression with MALinq2001 rule message

.. tip::

   To learn more about LINQ expressions, see the
   :ref:`mongodb-analyzer-analyze-linq` guide.

MALinq2002
~~~~~~~~~~

The ``MALinq2002`` rule detects if an expression is supported only in
LINQ3 and displays a message that contains the equivalent Query API expression.

.. list-table::
   :header-rows: 0
   :stub-columns: 1
   :widths: 35 65

   * - **Category**
     - ``MongoDB.Analyzer.LINQ``

   * - **Severity**
     - ``Warning``

   * - **Notes**
     - | This rule might apply differently depending on the value of
       | your ``DefaultLinqVersion`` configuration setting. To learn more,
       | see the :ref:`Analyzer Configuration Options <mongodb-analyzer-configuration-options>`.
       |
       | To view examples of supported LINQ3 expressions, see the
       | `source code testing files <{+product-source-repo+}/blob/main/tests/MongoDB.Analyzer.Tests.Common.TestCases/Linq/NotSupportedLinq2.cs>`__.

The following code triggers the ``MALinq2002`` rule to display a message that
shows the supported LINQ3 expression:

.. code-block:: csharp
   
   var results = queryableColl
       .Where(b => b.Price + 1 == 21)
       .Where(b => "Re-release: " + b.Title == "Re-release: Siddhartha");

The following image displays the ``MALinq2002`` rule and information
message:

.. figure:: /includes/images/MALinq2002-rule.png
   :alt: Screenshot of LINQ expression with MALinq2002 rule message

.. tip::

   To learn more about LINQ expressions, see the
   :ref:`mongodb-analyzer-analyze-linq` guide.

MAPoco1001
~~~~~~~~~~

The ``MAPoco1001`` rule evaluates your code for POCO declarations
and triggers a message that contains the JSON representation of a sample
instance. This rule evaluates some BSON serialization annotations such
as ``BsonIgnore`` and ``BsonElement``.

.. list-table::
   :header-rows: 0
   :stub-columns: 1
   :widths: 35 65

   * - **Category**
     - ``MongoDB.Analyzer.Poco``

   * - **Severity**
     - ``Info``

   * - **Notes**
     - This rule might apply differently depending on the value of
       your ``PocoAnalysisVerbosity`` configuration setting. To learn more,
       see the :ref:`Analyzer Configuration Options <mongodb-analyzer-configuration-options>`.

The following code triggers the ``MAPoco1001`` rule to display a message that
shows the JSON representation of a sample POCO:

.. code-block:: csharp
   
   public class Person
   {
      [BsonId]
      public int Id { get; set; }
      public string FirstName { get; set; }
      public string LastName { get; set; }
      public int Age { get; set; }
      [BsonIgnore]
      public double Income { get; set; }
   }

The following image displays the ``MAPoco1001`` rule and information
message:

.. figure:: /includes/images/MAPoco1001-rule.png
   :alt: Screenshot of builder expression with MAPoco1001 rule message

.. tip::

   To learn more about POCO analysis, see the
   :ref:`mongodb-analyzer-analyze-pocos` guide.

   To learn more about POCO annotations, see the `POCOs guide
   <{+driver-docs+}/fundamentals/serialization/poco/>`__
   in the {+driver-short+} documentation.

MAPoco2001
~~~~~~~~~~

The ``MAPoco2001`` rule evaluates your code for unsupported
serialization settings specified on a POCO declaration.

.. list-table::
   :header-rows: 0
   :stub-columns: 1
   :widths: 35 65

   * - **Category**
     - ``MongoDB.Analyzer.Poco``

   * - **Severity**
     - ``Warning``

   * - **Notes**
     - | This rule might apply differently depending on the value of
       | your ``PocoAnalysisVerbosity`` configuration setting. To learn more,
       | see the :ref:`Analyzer Configuration Options <mongodb-analyzer-configuration-options>`.
       |
       | To view examples of unsupported POCO declarations, see the
       | `source code testing files <{+product-source-repo+}/blob/main/tests/MongoDB.Analyzer.Tests.Common.TestCases/Poco/NotSupportedPocoClassDeclarations.cs>`__.

The following code triggers the ``MAPoco2001`` rule to display a message
that explains that the code includes an invalid serialization setting on the ``Date``
field:

.. code-block:: csharp
   
   public class Appointment
   {
      [BsonDateTimeOptions(DateOnly = true, Kind = DateTimeKind.Local)]
      public decimal Date { get; set; }
      public string Doctor { get; set; }
   }

The following image displays the ``MAPoco2001`` rule and information
message:

.. figure:: /includes/images/MAPoco2001-rule.png
   :alt: Screenshot of builder expression with MAPoco2001 rule message

.. tip::

   To learn more about POCO analysis, see the
   :ref:`mongodb-analyzer-analyze-pocos` guide.

   To learn more about POCO annotations, see the `POCOs guide
   <{+driver-docs+}/fundamentals/serialization/poco/>`__
   in the {+driver-short+} documentation.
   