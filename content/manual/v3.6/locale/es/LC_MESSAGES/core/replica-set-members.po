# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2013-12-16 23:53+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/replica-set-members.txt:3
msgid "Replica Set Members"
msgstr ""

#: ../source/core/replica-set-members.txt:13
msgid ""
"A *replica set* in MongoDB is a group of :binary:`~bin.mongod` processes "
"that provide redundancy and high availability. The members of a replica "
"set are:"
msgstr ""

#: ../source/core/replica-set-members.txt:18
msgid ":ref:`replica-set-primary-member`."
msgstr ""

#: ../source/core/replica-set-members.txt:18
msgid "The primary receives all write operations."
msgstr ""

#: ../source/core/replica-set-members.txt:25
msgid ":ref:`replica-set-secondary-members`."
msgstr ""

#: ../source/core/replica-set-members.txt:21
msgid ""
"Secondaries replicate operations from the primary to maintain an "
"identical data set. Secondaries may have additional configurations for "
"special usage profiles. For example, secondaries may be :ref:`non-voting "
"<replica-set-non-voting-members>` or :ref:`priority 0 <replica-set-"
"secondary-only-members>`."
msgstr ""

#: ../source/core/replica-set-members.txt:27
msgid ""
"You can also maintain an :ref:`arbiter <replica-set-arbiters>` as part of"
" a replica set. Arbiters do not keep a copy of the data. However, "
"arbiters play a role in the elections that select a primary if the "
"current primary is unavailable."
msgstr ""

#: ../source/core/replica-set-members.txt:32
msgid ""
"The minimum recommended configuration for a replica set is a three member"
" replica set with three data-bearing members: one :ref:`primary <replica-"
"set-primary-member>` and two :ref:`secondary <replica-set-secondary-"
"members>` members. You may alternatively deploy a three member replica "
"set with *two* data-bearing members: a :ref:`primary <replica-set-"
"primary-member>`, a :ref:`secondary <replica-set-secondary-members>`, and"
" an :ref:`arbiter <replica-set-arbiters>`, but replica sets with at least"
" three data-bearing members offer better redundancy."
msgstr ""

#: ../source/core/replica-set-members.txt:44
msgid ""
"A replica set can have up to :ref:`50 members <3.0-replica-sets-max-"
"members>` but only 7 voting members. [#master-slave]_ In previous "
"versions, replica sets can have up to 12 members."
msgstr ""

#: ../source/core/replica-set-members.txt:54
msgid "Primary"
msgstr ""

#: ../source/core/replica-set-primary.txt:3
msgid ""
"The primary is the only member in the replica set that receives write "
"operations. MongoDB applies write operations on the :term:`primary` and "
"then records the operations on the primary's :doc:`oplog </core/replica-"
"set-oplog>`. :ref:`Secondary <replica-set-secondary-members>` members "
"replicate this log and apply the operations to their data sets."
msgstr ""

#: ../source/core/replica-set-primary.txt:10
msgid ""
"In the following three-member replica set, the primary accepts all write "
"operations. Then the secondaries replicate the oplog to apply to their "
"data sets."
msgstr ""

#: ../source/core/replica-set-primary.txt:16
msgid ""
"All members of the replica set can accept read operations. However, by "
"default, an application directs its read operations to the primary "
"member. See :doc:`/core/read-preference` for details on changing the "
"default read behavior."
msgstr ""

#: ../source/core/replica-set-primary.txt:21
msgid ""
"The replica set can have at most one primary. [#edge-cases-2-primaries]_ "
"If the current primary becomes unavailable, an election determines the "
"new primary. See :doc:`/core/replica-set-elections` for more details."
msgstr ""

#: ../source/core/replica-set-members.txt:72
msgid "Secondaries"
msgstr ""

#: ../source/core/replica-set-secondary.txt:3
msgid ""
"A secondary maintains a copy of the :term:`primary's <primary>` data set."
" To replicate data, a secondary applies operations from the primary's "
":doc:`oplog </core/replica-set-oplog>` to its own data set in an "
"asynchronous process. [#slow-oplogs]_ A replica set can have one or more "
"secondaries."
msgstr ""

#: ../source/core/replica-set-secondary.txt:9
msgid ""
"The following three-member replica set has two secondary members. The "
"secondaries replicate the primary's oplog and apply the operations to "
"their data sets."
msgstr ""

#: ../source/core/replica-set-secondary.txt:15
msgid ""
"Although clients cannot write data to secondaries, clients can read data "
"from secondary members. See :doc:`/core/read-preference` for more "
"information on how clients direct read operations to replica sets."
msgstr ""

#: ../source/core/replica-set-secondary.txt:19
msgid ""
"A secondary can become a primary. If the current primary becomes "
"unavailable, the replica set holds an :term:`election` to choose which of"
" the secondaries becomes the new primary."
msgstr ""

#: ../source/core/replica-set-secondary.txt:3
msgid "See :doc:`/core/replica-set-elections` for more details."
msgstr ""

#: ../source/core/replica-set-secondary.txt:6
msgid ""
"You can configure a secondary member for a specific purpose. You can "
"configure a secondary to:"
msgstr ""

#: ../source/core/replica-set-secondary.txt:9
msgid ""
"Prevent it from becoming a primary in an election, which allows it to "
"reside in a secondary data center or to serve as a cold standby. See "
":doc:`/core/replica-set-priority-0-member`."
msgstr ""

#: ../source/core/replica-set-secondary.txt:13
msgid ""
"Prevent applications from reading from it, which allows it to run "
"applications that require separation from normal traffic. See :doc:`/core"
"/replica-set-hidden-member`."
msgstr ""

#: ../source/core/replica-set-secondary.txt:17
msgid ""
"Keep a running \"historical\" snapshot for use in recovery from certain "
"errors, such as unintentionally deleted databases. See :doc:`/core"
"/replica-set-delayed-member`."
msgstr ""

#: ../source/includes/fact-slow-oplog-log-message-footnote.rst:1
msgid ""
"For MongoDB 3.6 deployments, starting in version 3.6.11, secondary "
"members of a replica set now :ref:`log oplog entries <slow-oplog>` that "
"take longer than the slow operation threshold to apply. These slow oplog "
"messages are logged for the secondaries in the :option:`diagnostic log "
"<mongod --logpath>` under the :data:`REPL` component with the text "
"``applied op: <oplog entry> took <num>ms``. These slow oplog entries "
"depend only on the slow operation threshold. They do not depend on the "
"log levels (either at the system or component level), or the profiling "
"level, or the slow operation sample rate. The profiler does not capture "
"slow oplog entries."
msgstr ""

#: ../source/core/replica-set-members.txt:94
msgid "Arbiter"
msgstr ""

#: ../source/core/replica-set-arbiter.txt:3
msgid ""
"An arbiter does **not** have a copy of data set and **cannot** become a "
"primary. Replica sets may have arbiters to add a vote in :ref:`elections "
"for primary <replica-set-elections>`. Arbiters *always* have exactly "
"``1`` election vote, and thus allow replica sets to have an uneven number"
" of voting members without the overhead of an additional member that "
"replicates data."
msgstr ""

#: ../source/includes/fact-arbiter-priority.rst:1
msgid ""
"Starting in MongoDB 3.6, arbiters have priority ``0``. When you upgrade a"
" replica set to MongoDB 3.6, if the existing configuration has an arbiter"
" with priority ``1``, MongoDB 3.6 reconfigures the arbiter to have "
"priority ``0``."
msgstr ""

#: ../source/core/replica-set-arbiter.txt:14
msgid ""
"Do not run an arbiter on systems that also host the primary or the "
"secondary members of the replica set."
msgstr ""

#: ../source/core/replica-set-arbiter.txt:17
msgid "To add an arbiter, see :doc:`/tutorial/add-replica-set-arbiter`."
msgstr ""

#: ../source/includes/extracts/arbiters-and-pvs-with-reference.rst:2
msgid ""
"For the following MongoDB versions, ``pv1`` increases the likelihood of "
":writeconcern:`w:1 <\\<number\\>>` rollbacks compared to ``pv0`` for "
"replica sets with arbiters:"
msgstr ""

#: ../source/includes/extracts/arbiters-and-pvs-with-reference.rst:6
msgid "MongoDB 3.4.1"
msgstr ""

#: ../source/includes/extracts/arbiters-and-pvs-with-reference.rst:8
msgid "MongoDB 3.4.0"
msgstr ""

#: ../source/includes/extracts/arbiters-and-pvs-with-reference.rst:10
msgid "MongoDB 3.2.11 or earlier"
msgstr ""

#: ../source/includes/extracts/arbiters-and-pvs-with-reference.rst:12
msgid "See :doc:`/reference/replica-set-protocol-versions`."
msgstr ""

#: ../source/includes/fact-master-slave-workaround.rst:1
msgid ""
"While replica sets are the recommended solution for production, a replica"
" set can support up to :limit:`50 members <Number of Members of a Replica"
" Set>` in total. If your deployment requires more than 50 members, youâ€™ll"
" need to use :doc:`master-slave </core/master-slave>` replication. "
"However, master-slave replication lacks the automatic failover "
"capabilities."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may"
" *transiently* believe that they are the primary, but at most, one of "
"them will be able to complete writes with :writeconcern:`{ w: "
"\"majority\" } <\"majority\">` write concern. The node that can complete "
":writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current "
"primary, and the other node is a former primary that has not yet "
"recognized its demotion, typically due to a :term:`network partition`. "
"When this occurs, clients that connect to the former primary may observe "
"stale data despite having requested read preference :readmode:`primary`, "
"and new writes to the former primary will eventually roll back."
msgstr ""

# 8c9585df8bae4c49a03646dca09ff48e
#~ msgid ""
#~ "A *replica set* in MongoDB is a"
#~ " group of :program:`mongod` processes that"
#~ " provide redundancy and high availability."
#~ " The members of a replica set "
#~ "are:"
#~ msgstr ""

# d434622198eb48919d1b598426217438
#~ msgid "The *primary* receives all write operations."
#~ msgstr ""

# 7d9256e5452d47d6a2f34f3a17af857c
#~ msgid ""
#~ "A replica set can have up to "
#~ "12 members. [#master-slave]_ However, "
#~ "only 7 members can vote at a "
#~ "time."
#~ msgstr ""

# 09cbf6f931864e39932b45389d528d55
#~ msgid ""
#~ "The minimum requirements for a replica"
#~ " set are: A :ref:`primary <replica-"
#~ "set-primary-member>`, a :ref:`secondary "
#~ "<replica-set-secondary-members>`, and an"
#~ " :ref:`arbiter <replica-set-arbiters>`. "
#~ "Most deployments, however, will keep "
#~ "three members that store data: A "
#~ ":ref:`primary <replica-set-primary-member>`"
#~ " and two :ref:`secondary members "
#~ "<replica-set-secondary-members>`."
#~ msgstr ""

# 042b2e70305248cea95e23b3392f7b3a
#~ msgid ""
#~ "While replica sets are the recommended"
#~ " solution for production, a replica "
#~ "set can support only 12 members in"
#~ " total. If your deployment requires "
#~ "more than 12 members, youâ€™ll need "
#~ "to use :doc:`master-slave </core/master-"
#~ "slave>` replication. Master-slave replication"
#~ " lacks the automatic failover capabilities."
#~ msgstr ""

