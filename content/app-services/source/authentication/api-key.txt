.. meta::
   :robots: nosnippet

.. _api-key-authentication:

======================
API Key Authentication
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _api-key-authentication-overview:

Overview
--------

The API Key :ref:`authentication provider <authentication-providers>`
allows users to log in using generated keys.

App Services supports the following two types of API keys:

- **Server API keys**: API keys associated with server users that is created
  from the App Services CLI, API or UI.
- **User API keys**: API keys created from the Realm SDKs associated
  with application users.

API keys do not expire automatically.

.. _api-key-authentication-configuration:
.. _config-api-key:

Enable API Key Authentication
-----------------------------

To work with API key users, you must first enable the API key authentication provider.
The API Key authentication provider does not have any configuration options.

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui

      You can enable and configure the API Key authentication
      provider from the App Services UI by selecting :guilabel:`API Keys`
      from the :guilabel:`Authentication` page.

   .. tab::
      :tabid: cli

      To enable and configure the API Key authentication provider with
      ``{+cli-ref+}``, define a :ref:`configuration
      object <appconfig-auth>` for it in ``/auth/providers.json``.

      API Key provider configurations have the following form:

      .. code-block:: json
         :caption: /auth/providers.json

         {
           "api-key": {
             "name": "api-key",
             "type": "api-key",
             "disabled": false
           }
         }
      
      .. include:: /includes/auth-provider-config-same-name-and-type.rst

.. _api-key-user-objects:

API Key User Objects
--------------------

Every App Services user has a unique metadata object. The object is passed to Functions
called by the user and rule expressions for requests made by the user.
In API key user objects, the ``type`` field has the value ``"server"``. For example:

.. code-block:: js
   :emphasize-lines: 3

   {
     id: "<Unique User ID>",
     type: "server",
     data: <user data object>,
     custom_data: <custom user data object>,
     identities: <array of user identities>,
   }

You can use this field to evaluate if requests come from API keys.

For more information, refer to :ref:`User Objects <user-objects>`.

.. _api-key-authentication-server-api-key:

Server API Keys
---------------

Server API keys are generated in a server-side context using one of
the App Services CLI, API or UI. When you create a server API key,
you also create an associated server user.

You can provide a server key to external applications and services
to allow them to authenticate directly with App Services.

You can associate up to 100 server API keys with an app.

.. _api-key-authentication-usage-create-server-key:

Create a Server API Key
~~~~~~~~~~~~~~~~~~~~~~~

You must enable the API key provider before you can create an API key.

.. important::

   You must copy the server key's value as soon as you create it.
   Once you create the API key, you can no longer retrieve it.

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui

      #. Select :guilabel:`App Users` from the left navigation menu.

      #. Select the :guilabel:`Authentication Providers` button and then select
         the :guilabel:`API Keys` provider.

      #. If the API Key provider is not currently enabled, you must enable it 
         and then deploy your changes before you can create a key.

      #. Click :guilabel:`Create API Key`.

      #. Enter a unique name for the key and then click :guilabel:`Save`.

   .. tab::
      :tabid: cli
      
      To create a new server API key, call ``{+cli-bin+} users create`` and
      specify ``--type=api-key``. The CLI will prompt you for your App ID as
      well as a name for the new API key.

      .. code-block:: bash
         
         {+cli-bin+} users create --type=api-key
      
      You can also specify the arguments when you call the program:
      
      .. code-block:: bash
         
         {+cli-bin+} users create --type=api-key \
           --app=<Your App ID> \
           --name=<API Key Name>

   .. tab::
      :tabid: api

      To create a server API key using the Admin API, make a request to the
      `Create a new API key <{+base-url+}{+admin-api-page+}tag/apikeys/operation/adminListApiKeys>`__ endpoint.

.. _api-key-authentication-user-api-key:

User API Keys
-------------

You can generate user API keys with the Realm SDKs. Each user API Key is associated 
with a single non-anonymous user. Each user can associate up to 20 user API keys 
with their account. Once the key is associated with a user account, the user 
can use the key to authenticate. The following diagram shows how to create, 
and then use, a User API Key:

.. figure:: /images/auth-user-key-flow.png
    :alt: User API Key flow diagram
    :width: 350px

To learn how to generate user API keys, refer to the Realm SDK documentation.

.. _api-key-authentication-examples:

Realm SDK Examples
------------------

For code examples that demonstrate how to register and log in using
API Key authentication, see the documentation for the Realm SDKs.

Log In With an API Key
~~~~~~~~~~~~~~~~~~~~~~

The Realm SDK can log in with an existing server or user API key.

- :ref:`C++ SDK <cpp-login-api-key>`
- :ref:`Flutter SDK <flutter-login-api-key>`
- :ref:`Java SDK <java-login-api-key>`
- :ref:`Kotlin SDK <kotlin-login-api-key>`
- :ref:`.NET SDK <dotnet-login-api-key>`
- :ref:`Node SDK <node-login-api-key>`
- :ref:`React Native SDK <react-native-login-api-key>`
- :ref:`Swift SDK <ios-login-api-key>`
- :ref:`Web SDK <web-login-api-key>`

Create a User API Key
~~~~~~~~~~~~~~~~~~~~~

The Realm SDK can create a new user API key for an existing user account.

- :ref:`Flutter SDK <flutter-login-api-key>`
- :ref:`Java SDK <java-manage-user-api-keys>`
- :ref:`Kotlin SDK <kotlin-manage-user-api-keys>`
- :ref:`.NET SDK <dotnet-manage-user-api-keys>`
- :ref:`Node SDK <node-manage-user-api-keys>`
- :ref:`React Native SDK <react-native-manage-user-api-keys>`
- :ref:`Swift SDK <ios-manage-user-api-keys>`
- :ref:`Web SDK <web-create-manage-api-keys>`
- *Not yet available for the C++ SDK*
