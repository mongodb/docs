.. _vsce-update-doc-playground:

=============================
Update Documents with VS Code
=============================

.. meta::
   :description: Update documents in a MongoDB collection using VS Code Playground with updateOne() and updateMany() methods.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can update documents in a collection using the 
:manual:`MongoDB CRUD Operators </crud>` in a MongoDB Playground:

- Use the :manual:`updateOne() 
  </reference/method/db.collection.updateOne>` method to update one
  document.
- Use the :manual:`updateMany() 
  </reference/method/db.collection.updateMany>` method to update more 
  than one document.

Prerequisites
-------------

If you have not done so already, you must complete the following 
prerequisites before you can update documents with a MongoDB Playground:

- :ref:`Create a connection to a MongoDB deployment 
  <vsce-connect-task>`.
- :ref:`Activate the connection to the MongoDB deployment 
  <vsce-activate-connection>`.
- :ref:`Open a MongoDB Playground <open-playground-for-crud-vsce>`.
- :ref:`vsce-create-doc-playground` or create documents in a collection
  using a different method.

Update One Document
-------------------

To update one document, use the following syntax in your Playground:

.. code-block:: javascript

   db.collection.updateOne(
      <filter>,
      <update>,
      {
        upsert: <boolean>,
        writeConcern: <document>,
        collation: <document>,
        arrayFilters: [ <filterdocument1>, ... ],
        hint:  <document|string>
      }
   )

For a detailed description of this method's parameters,
see :manual:`updateOne() </reference/method/db.collection.updateOne>`
in the MongoDB Manual.

.. include:: /includes/run-playground.rst

Example
~~~~~~~

The following example:

1. Switches to the ``test`` database.
#. Updates one document in the ``test.sales`` collection that matches 
   the filter.

.. code-block:: javascript
   :copyable: false

   use("test");

  db.sales.updateOne(
    { "_id" : 1},
    { $inc: { "quantity" : 1 }}
  );

.. include:: /includes/fact-playground-results.rst

.. code-block:: javascript
   :copyable: false

   {
     acknowleged: 1,
     matchedCount: 1,
     modifiedCount: 1,
     upsertedCount: 0,
     insertedId: null
   }

Update Many Documents
---------------------

To update many documents, use the following syntax in your Playground:

.. code-block:: javascript

   db.collection.updateMany(
      <filter>,
      <update>,
      {
        upsert: <boolean>,
        writeConcern: <document>,
        collation: <document>,
        arrayFilters: [ <filterdocument1>, ... ],
        hint:  <document|string>
      }
   )

For a detailed description of this method's parameters,
see :manual:`updateMany() </reference/method/db.collection.updateMany>`
in the MongoDB Manual.

.. include:: /includes/run-playground.rst

Example
~~~~~~~

The following example:

1. Switches to the ``test`` database.
#. Updates all documents in the ``test.sales`` collection that match 
   the filter.

.. code-block:: javascript
   :copyable: false

   use("test");

   db.sales.updateMany(
     { "item" : "abc" },
     { $set: { "price": 9 }}
   );

.. include:: /includes/fact-playground-results.rst

.. code-block:: javascript
   :copyable: false

   {
     acknowleged: 1,
     matchedCount: 3,
     modifiedCount: 3,
     upsertedCount: 0,
     insertedId: null
   }

