==========================
$arrayElemAt (aggregation)
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $arrayElemAt

   .. versionadded:: 3.2

   Returns the element at the specified array index.

   :expression:`$arrayElemAt` has the following syntax:

   .. code-block:: javascript

      { $arrayElemAt: [ <array>, <idx> ] }

   The ``<array>`` expression can be any valid :ref:`expression
   <aggregation-expressions>` that resolves to an array.

   The ``<idx>`` expression can be any valid :ref:`expression
   <aggregation-expressions>` that resolves to an integer:

   - If the ``<idx>`` expression resolves to zero or a positive integer,
     :expression:`$arrayElemAt` returns the element at the ``idx``
     position, counting from the start of the array.

   - If the ``<idx>`` expression resolves to a negative integer,
     :expression:`$arrayElemAt` returns the element at the ``idx``
     position, counting from the end of the array.

   If ``idx`` exceeds the array bounds, :expression:`$arrayElemAt` does
   not return a result.

   For more information on expressions, see
   :ref:`aggregation-expressions`.

Behavior
--------

For more information on expressions, see
:ref:`aggregation-expressions`.

.. list-table::
   :header-rows: 1
   :widths: 90 10

   * - Example
     - Results

   * - ``{ $arrayElemAt: [ [ 1, 2, 3 ], 0 ] }``
     - ``1``

   * - ``{ $arrayElemAt: [ [ 1, 2, 3 ], -2 ] }``
     - ``2``

   * - ``{ $arrayElemAt: [ [ 1, 2, 3 ], 15 ] }``
     - 

Example
-------

A collection named ``users`` contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "name" : "dave123", favorites: [ "chocolate", "cake", "butter", "apples" ] }
   { "_id" : 2, "name" : "li", favorites: [ "apples", "pudding", "pie" ] }
   { "_id" : 3, "name" : "ahn", favorites: [ "pears", "pecans", "chocolate", "cherries" ] }
   { "_id" : 4, "name" : "ty", favorites: [ "ice cream" ] }

The following example returns the first and last element in the
``favorites`` array:

.. code-block:: javascript

   db.users.aggregate([
      {
        $project:
         {
            name: 1,
            first: { $arrayElemAt: [ "$favorites", 0 ] },
            last: { $arrayElemAt: [ "$favorites", -1 ] }
         }
      }
   ])

The operation returns the following results:

.. code-block:: javascript

   { "_id" : 1, "name" : "dave123", "first" : "chocolate", "last" : "apples" }
   { "_id" : 2, "name" : "li", "first" : "apples", "last" : "pie" }
   { "_id" : 3, "name" : "ahn", "first" : "pears", "last" : "cherries" }
   { "_id" : 4, "name" : "ty", "first" : "ice cream", "last" : "ice cream" }



See Also
--------

- :expression:`$first`

- :expression:`$last`

- :expression:`$slice`

- :ref:`agg-quick-ref-operator-array`
