.. meta::
   :robots: noindex, nosnippet

=====================
Filter Data - SwiftUI
=====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Observe in SwiftUI Views
------------------------

The ``@ObservedResults`` property wrapper used in the examples on this page 
is intended for use in a SwiftUI View. If you want to observe results 
in a view model instead, :ref:`register a change listener 
<ios-react-to-changes>`.

Search a Realm Collection
-------------------------

.. versionadded:: 10.19.0

The Realm Swift SDK allows you to extend :apple:`.searchable 
<documentation/swiftui/view/searchable(text:placement:prompt:)-18a8f>`. 
When you use :swift-sdk:`ObservedResults <Structs/ObservedResults.html>` 
to query a realm, you can specify collection and keypath in the result set 
to mark it as searchable. 

The collection is the bound collection represented by your ObservedResults
query. In this example, it is the ``dogs`` variable that represents the 
collection of all Dog objects in the realm.

The keypath is the object property that you want to search. In this
example, we search the dogs collection by dog name. The Realm Swift 
``.searchable`` implementation only supports keypaths with ``String`` types.

.. literalinclude:: /examples/generated/swiftui/FilterData.snippet.searchable.swift
   :language: swift

Filter or Query a Realm with ObservedResults
--------------------------------------------

The :swift-sdk:`@ObservedResults <Structs/ObservedResults.html>` property wrapper
opens a realm and returns all objects of the specified type. However, you 
can filter or query ``@ObservedResults`` to use only a subset of the objects
in your view.

.. seealso::

   For more information about the query syntax and types of queries that Realm
   supports, see: :ref:`Read - Swift SDK <swift-crud-read>` and :ref:`Filter 
   Data - Swift SDK <ios-filter-data>`.

Filter with an NSPredicate
~~~~~~~~~~~~~~~~~~~~~~~~~~

To filter ``@ObservedResults`` using the :ref:`NSPredicate Query API 
<ios-nspredicate-query>`, pass an :apple:`NSPredicate 
<documentation/foundation/nspredicate>` as an argument to ``filter``:

.. literalinclude:: /examples/generated/swiftui/FilterData.snippet.nspredicate-filter.swift
   :language: swift

Query with the Realm Type-Safe Query API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 10.24.0 
   Use *where* to perform type-safe queries on ObservedResults.

To use ``@ObservedResults`` with the :ref:`Realm Type-Safe Query API 
<ios-realm-swift-query-api>`, pass a query in a closure as an argument to 
``where``:

.. literalinclude:: /examples/generated/swiftui/FilterData.snippet.type-safe-query-filter.swift
   :language: swift

Section Filtered Results
------------------------

.. versionadded:: 10.29.0

The :swift-sdk:`@ObservedSectionedResults <Structs/ObservedSectionedResults.html>` 
property wrapper opens a realm and returns all objects of the specified type,
divided into sections by the specified key path. Similar to
``@ObservedResults`` above, you can filter or query ``@ObservedSectionedResults`` 
to use only a subset of the objects in your view:

.. literalinclude:: /examples/generated/swiftui/FilterData.snippet.observed-filtered-sectioned-results.swift
   :language: swift
