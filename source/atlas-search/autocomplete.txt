.. _autocomplete-ref:

============
autocomplete
============

.. default-domain:: mongodb

.. meta::
   :keywords: autocomplete, autocomplete search, operator, search word, atlas search operator, predict word, search as you type
   :description: Use the autocomplete operator to predict words as you type.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Definition
----------

.. expression:: autocomplete

   .. include:: /includes/fact-autocomplete-operator.rst

.. _autocomplete-ref-syntax:

Syntax
------

``autocomplete`` has the following syntax:

.. code-block:: json
   :linenos:

   {
     $search: {
       "index": "<index name>", // optional, defaults to "default"
       "autocomplete": {
         "query": "<search-string>",
         "path": "<field-to-search>",
         "tokenOrder": "any|sequential",
         "fuzzy": <options>,
         "score": <options>
       }
     }
   }

.. _autocomplete-ref-options:

Options
-------

.. list-table::
   :header-rows: 1
   :widths: 10 20 50 10 10

   * - Field
     - Type
     - Description
     - Necessity
     - Default

   * - ``query``
     - string or array of strings
     - String or strings to search for. If there are multiple
       terms in a string, |fts| also looks for a match for each term
       in the string separately.
     - yes
     -

   * - ``path``
     - string
     - Indexed :ref:`autocomplete <bson-data-types-autocomplete>` type
       of field to search.

       .. seealso::

          :ref:`path construction <ref-path>`

       .. note::

          The ``autocomplete`` operator does not support ``multi`` in
          the field path.

     - yes
     -

   * - ``fuzzy``
     - object
     - Enable fuzzy search. Find strings which are similar to the
       search term or terms.
     - no
     -

   * - | ``fuzzy``
       | ``.maxEdits``
     - integer
     - Maximum number of single-character edits required to match the
       specified search term. Value can be ``1`` or ``2``.
     - no
     - ``2``

   * - | ``fuzzy``
       | ``.prefixLength``
     - integer
     - Number of characters at the beginning of each term in the result
       that must exactly match.
     - no
     - ``0``

   * - | ``fuzzy``
       | ``.maxExpansions``
     - integer
     - Maximum number of variations to generate and search for. This
       limit applies on a per-token basis.
     - no
     - ``50``

   * - ``score``
     - object
     - :ref:`score <scoring-ref>` assigned to matching search term
       results. Use one of the following options to modify the score:

       .. list-table::
          :stub-columns: 1
          :widths: 10 90

          * - ``boost``
            - Multiply the result score by the given number.
          * - ``constant``
            - Replace the result score with the given number.

       .. note::

          ``autocomplete`` offers less fidelity in
          :ref:`score <scoring-ref>` in exchange for faster query
          execution.

     - no
     -

   * - ``tokenOrder``
     - string
     - Order in which to search for tokens. Value can be one of the
       following:

       .. list-table::
          :stub-columns: 1
          :widths: 10 90

          * - ``any``
            - Indicates tokens in the query can appear in any order in
              the documents. Results contain documents where the tokens
              appear sequentially and non-sequentially. However,
              results where the tokens appear sequentially score higher
              than other, non-sequential values.

          * - ``sequential``
            - Indicates tokens in the query must appear adjacent to
              each other or in the order specified in the query in the
              documents. Results contain only documents where the
              tokens appear sequentially.

     - no
     - ``any``

.. _autocomplete-limitations:

Limitations 
-----------

The ``autocomplete`` operator query results that are exact matches 
receive a lower score than results that aren't exact matches. |fts| 
can't determine if a query string is an exact match for an indexed text 
if you specify just the autocomplete-indexed token substrings. To score 
exact matches higher, try the following workaround: 

.. note::
   
   The following workaround doesn't guarantee higher scores for exact 
   matches in all cases.

1. Index the field as both :ref:`bson-data-types-autocomplete` and 
   :ref:`bson-data-types-string` types.

   |fts| ``autocomplete`` boosts exact matches when an ``autocomplete`` 
   field is also indexed as a ``string``, thereby increasing the score 
   of exact matches.

#. Query using the :ref:`compound-ref` operator.

For a demonstration of this workaround, see 
:ref:`autocomplete-compound`.

.. _autocomplete-ref-egs:

Examples
--------

The following examples use the ``movies`` collection in the 
``sample_mflix`` database. If you loaded the :ref:`sample dataset 
<available-sample-datasets>` on your {+cluster+}, you can create the 
static index for :ref:`autocompletion <bson-data-types-autocomplete>` 
and run the example queries on your cluster.

.. include:: /includes/admonitions/get-started-atlas-search.rst

Index Definition
~~~~~~~~~~~~~~~~

The following tabs contain sample index definitions for the 
``edgeGram``, ``rightEdgeGram``, and ``nGram`` 
:ref:`tokenization strategies <bson-data-types-autocomplete>`.

.. tabs::

   .. tab:: edgeGram 
      :tabid: edgeGram

      .. code-block:: json
         :linenos:

         {
           "mappings": {
             "dynamic": false,
             "fields": {
               "title": [
                 {
                   "type": "stringFacet"
                 },
                 {
                   "type": "string"
                 },
                 {
                   "foldDiacritics": false,
                   "maxGrams": 7,
                   "minGrams": 3,
                   "tokenization": "edgeGram",
                   "type": "autocomplete"
                 }
               ]
             }
           }
         }

   .. tab:: rightEdgeGram 
      :tabid: rightEdgeGram

      .. code-block:: json
         :linenos:

         {
           "mappings": {
             "dynamic": false,
             "fields": {
               "title": [
                 {
                   "type": "string"
                 },
                 {
                   "type": "autocomplete",
                   "tokenization": "rightEdgeGram",
                   "minGrams": 3,
                   "maxGrams": 7,
                   "foldDiacritics": false
                 }
               ]
             }
           }
         }

   .. tab:: nGram 
      :tabid: nGram

      .. code-block:: json
         :linenos:

         {
           "mappings": {
             "dynamic": false,
             "fields": {
               "title": [
                 {
                   "type": "autocomplete",
                   "tokenization": "nGram",
                   "minGrams": 3,
                   "maxGrams": 7,
                   "foldDiacritics": false
                 }
               ]
             }
           }
         }

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu to set the 
language of the example on this page.

----------

.. tabs-selector:: drivers

.. tabs-drivers::

   .. tab::
      :tabid: shell

      Run the following command at the {+mongosh+} prompt to use the
      ``sample_mflix`` database:

      .. code-block:: shell

         use sample_mflix

   .. tab::
      :tabid: compass

   .. tab:: 
      :tabid: go

   .. tab:: 
      :tabid: java-sync 

   .. tab::
      :tabid: nodejs

   .. tab::
      :tabid: python

.. _autocomplete-ref-egs-basic:

Basic Examples
~~~~~~~~~~~~~~

The following query searches for movies with the characters ``off`` in
the ``title`` field. The query includes a:

- :pipeline:`$limit` stage to limit the output to 10 results.
- :pipeline:`$project` stage to exclude all fields except ``title``.

.. tabs-drivers::

   .. tab::
      :tabid: shell
      
      .. literalinclude:: /includes/fts-tutorial/autocomplete/basic-shell.js
         :language: js
         :dedent:

   .. tab::
      :tabid: compass

      .. include:: /includes/fts-tutorial/autocomplete/basic.rst

   .. tab:: 
      :tabid: go

      .. literalinclude:: /includes/fts-tutorial/autocomplete/basic.go
         :language: go
         :dedent:

   .. tab:: 
      :tabid: java-sync 

      .. literalinclude:: /includes/fts-tutorial/autocomplete/basic.java
         :language: java
         :dedent:

   .. tab::
      :tabid: nodejs

      .. literalinclude:: /includes/fts-tutorial/autocomplete/basic.js
         :language: js
         :dedent:

   .. tab::
      :tabid: python

      .. literalinclude:: /includes/fts-tutorial/autocomplete/basic.py
         :language: python
         :dedent:

.. include:: /includes/fts-tutorial/autocomplete/different-results-note.rst

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. include:: /includes/fts-tutorial/autocomplete/basic-output-shell-and-compass.rst

   .. tab::
      :tabid: compass

      .. include:: /includes/fts-tutorial/autocomplete/basic-output-shell-and-compass.rst

   .. tab:: 
      :tabid: go

      .. include:: /includes/fts-tutorial/autocomplete/basic-output-go.rst

   .. tab:: 
      :tabid: java-sync 

      .. include:: /includes/fts-tutorial/autocomplete/basic-output-java.rst

   .. tab::
      :tabid: nodejs

      .. include:: /includes/fts-tutorial/autocomplete/basic-output-js.rst

   .. tab::
      :tabid: python

      .. include:: /includes/fts-tutorial/autocomplete/basic-output-py.rst

.. _autocomplete-ref-egs-fuzzy:

Fuzzy Example
~~~~~~~~~~~~~

The following query searches for movies with the characters ``pre`` in
the ``title`` field. The query uses:

.. list-table::
   :stub-columns: 1
   :widths: 10 90

   * - Field
     - Description

   * - ``maxEdits``
     - Indicates that only one character variation is allowed in the
       query string ``pre`` to match the query to a word in the
       documents.

   * - ``prefixLength``
     - Indicates that the first character in the query string ``pre``
       can't change when matching the query to a word in the documents.

   * - ``maxExpansions``
     - Indicates that up to two hundred and fifty six similar terms for
       ``pre`` can be considered when matching the query string to a
       word in the documents.

The query also includes a:

- :pipeline:`$limit` stage to limit the output to 10 results.
- :pipeline:`$project` stage to exclude all fields except ``title``.

.. tabs-drivers::

   .. tab::
      :tabid: shell
  
      .. literalinclude:: /includes/fts-tutorial/autocomplete/fuzzy-shell.js
         :language: js
         :dedent:

   .. tab::
      :tabid: compass

      .. include:: /includes/fts-tutorial/autocomplete/fuzzy.rst

   .. tab:: 
      :tabid: go

      .. literalinclude:: /includes/fts-tutorial/autocomplete/fuzzy.go
         :language: go
         :dedent:

   .. tab:: 
      :tabid: java-sync 

      .. literalinclude:: /includes/fts-tutorial/autocomplete/fuzzy.java
         :language: java
         :dedent:

   .. tab::
      :tabid: nodejs

      .. literalinclude:: /includes/fts-tutorial/autocomplete/fuzzy.js
         :language: js
         :dedent:

   .. tab::
      :tabid: python

      .. literalinclude:: /includes/fts-tutorial/autocomplete/fuzzy.py
         :language: python
         :dedent:

.. include:: /includes/fts-tutorial/autocomplete/different-results-note.rst

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. include:: /includes/fts-tutorial/autocomplete/fuzzy-output-shell-and-compass.rst

   .. tab::
      :tabid: compass

      .. include:: /includes/fts-tutorial/autocomplete/fuzzy-output-shell-and-compass.rst

   .. tab:: 
      :tabid: go

      .. include:: /includes/fts-tutorial/autocomplete/fuzzy-output-go.rst

   .. tab:: 
      :tabid: java-sync 

      .. include:: /includes/fts-tutorial/autocomplete/fuzzy-output-java.rst

   .. tab::
      :tabid: nodejs

      .. include:: /includes/fts-tutorial/autocomplete/fuzzy-output-js.rst

   .. tab::
      :tabid: python

      .. include:: /includes/fts-tutorial/autocomplete/fuzzy-output-py.rst

.. _autocomplete-ref-egs-tokenOrder:

Token Order Example
~~~~~~~~~~~~~~~~~~~

The following queries search for movies with the characters ``men
with`` in the ``title`` field. The queries also use the ``tokenOrder`` field,
which specifies whether the query searches for tokens in ``any`` order 
or in ``sequential`` order.

Each query includes a:

- :pipeline:`$limit` stage to limit the output to 4 results.
- :pipeline:`$project` stage to exclude all fields except ``title``.

.. tabs::

   .. tab:: any
      :tabid: any

      .. include:: /includes/fts-tutorial/autocomplete/token-any-section.rst

   .. tab:: sequential
      :tabid: sequential

      .. tabs::

         .. tab:: Simple Example
            :tabid: sequential-simple
            
            .. include:: /includes/fts-tutorial/autocomplete/token-seq-section.rst
         
         .. tab:: Starts With Example
            :tabid: sequential-starts-with

            .. include:: /includes/fts-tutorial/autocomplete/token-seq-analyzer-section.rst

.. _autocomplete-highlighting:

Highlighting Example 
~~~~~~~~~~~~~~~~~~~~

The following query searches for the characters ``ger`` in the 
``title`` field of the ``movies`` collection, with the 
``highlight`` option enabled for the ``title`` field.

The query includes a:

- :pipeline:`$limit` stage to limit the output to 5 results.
 
- :pipeline:`$project` stage to:

  - return the document's score.
 
  - exclude all fields except ``title``.
   
  - add a new field called ``highlights``, which contains highlighting 
    information.

.. important::

   To highlight the autocomplete indexed version of a path, the 
   :ref:`autocomplete operator <autocomplete-ref>` must be the only 
   operator that uses that path in the query.

.. tabs-drivers::

   .. tab::
      :tabid: shell
  
      .. literalinclude:: /includes/fts-tutorial/autocomplete/highlight-shell.js
         :language: js
         :dedent:

   .. tab::
      :tabid: compass

      .. include:: /includes/fts-tutorial/autocomplete/highlight.rst

   .. tab:: 
      :tabid: go

      .. literalinclude:: /includes/fts-tutorial/autocomplete/highlight.go
         :language: go
         :dedent:

   .. tab:: 
      :tabid: java-sync 

      .. literalinclude:: /includes/fts-tutorial/autocomplete/highlight.java
         :language: java
         :dedent:

   .. tab::
      :tabid: nodejs

      .. literalinclude:: /includes/fts-tutorial/autocomplete/highlight.js
         :language: js
         :dedent:

   .. tab::
      :tabid: python

      .. literalinclude:: /includes/fts-tutorial/autocomplete/highlight.py
         :language: python
         :dedent:

.. include:: /includes/fts-tutorial/autocomplete/different-results-note.rst

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. include:: /includes/fts-tutorial/autocomplete/highlight-output-shell-and-compass.rst

   .. tab::
      :tabid: compass

      .. include:: /includes/fts-tutorial/autocomplete/highlight-output-shell-and-compass.rst

   .. tab:: 
      :tabid: go

      .. include:: /includes/fts-tutorial/autocomplete/highlight-output-go.rst

   .. tab:: 
      :tabid: java-sync 

      .. include:: /includes/fts-tutorial/autocomplete/highlight-output-java.rst

   .. tab::
      :tabid: nodejs

      .. include:: /includes/fts-tutorial/autocomplete/highlight-output-js.rst

   .. tab::
      :tabid: python

      .. include:: /includes/fts-tutorial/autocomplete/highlight-output-py.rst

.. _autocomplete-compound:

Compound Example 
~~~~~~~~~~~~~~~~

The following query searches for the characters ``ball`` in the 
``title`` field of the ``movies`` collection using the 
:ref:`compound-ref` operator. The query specifies a preference for 
documents that contain ``ballroom`` in the ``title`` field.

The query includes a:

- :pipeline:`$limit` stage to limit the output to 10 results.
 
- :pipeline:`$project` stage to:

  - return the document's score.
 
  - exclude all fields except ``title``.

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. literalinclude:: /includes/fts-tutorial/autocomplete/compound-eg-shell.js 
         :language: js
         :linenos:

   .. tab::
      :tabid: compass

      .. include:: /includes/fts-tutorial/autocomplete/compound-eg-compass.rst 

   .. tab:: 
      :tabid: go

      .. literalinclude:: /includes/fts-tutorial/autocomplete/compound-eg.go
         :language: go
         :linenos:

   .. tab:: 
      :tabid: java-sync 

      .. literalinclude:: /includes/fts-tutorial/autocomplete/compound-eg.java
         :language: java
         :linenos:

   .. tab::
      :tabid: nodejs

      .. literalinclude::  /includes/fts-tutorial/autocomplete/compound-eg.js 
         :language: js
         :linenos:

   .. tab::
      :tabid: python

      .. literalinclude:: /includes/fts-tutorial/autocomplete/compound-eg.py
         :language: python
         :linenos:

.. include:: /includes/fts-tutorial/autocomplete/different-results-note.rst

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. include:: /includes/fts-tutorial/autocomplete/compound-eg-output-shell-and-compass.rst

   .. tab::
      :tabid: compass

      .. include:: /includes/fts-tutorial/autocomplete/compound-eg-output-shell-and-compass.rst

   .. tab:: 
      :tabid: go

      .. include:: /includes/fts-tutorial/autocomplete/compound-eg-output-go.rst

   .. tab:: 
      :tabid: java-sync 

      .. include:: /includes/fts-tutorial/autocomplete/compound-eg-output-java.rst

   .. tab::
      :tabid: nodejs

      .. include:: /includes/fts-tutorial/autocomplete/compound-eg-output-nodejs.rst

   .. tab::
      :tabid: python

      .. include:: /includes/fts-tutorial/autocomplete/compound-eg-output-py.rst

.. _autocomplete-facet:

Facet Example 
~~~~~~~~~~~~~

The following query uses the :pipeline:`$searchMeta` stage to return
unique values of movies that contain the term ``Gravity`` in the
``title`` field of the ``movies`` collection. The index definition of
this query limits the results returned from a
:ref:`bson-data-types-string-facet` index, where both the
:ref:`autocomplete-ref` and :ref:`bson-data-types-string-facet` types
are on the ``title`` field.

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. literalinclude:: /includes/fts-tutorial/autocomplete/facet-shell.js 
         :language: js
         :linenos:
  
   .. tab::
      :tabid: compass

      .. include:: /includes/fts-tutorial/autocomplete/facet.rst 

   .. tab:: 
      :tabid: go

      .. literalinclude:: /includes/fts-tutorial/autocomplete/facet.go
         :language: go
         :linenos:

   .. tab:: 
      :tabid: java-sync 

      .. literalinclude:: /includes/fts-tutorial/autocomplete/facet.java
         :language: java
         :linenos:

   .. tab::
      :tabid: nodejs

      .. literalinclude::  /includes/fts-tutorial/autocomplete/facet.js 
         :language: js
         :linenos:

   .. tab::
      :tabid: python

      .. literalinclude:: /includes/fts-tutorial/autocomplete/facet.py
         :language: python
         :linenos:

.. include:: /includes/fts-tutorial/autocomplete/different-results-note.rst

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. include:: /includes/fts-tutorial/autocomplete/facet-output-shell-and-compass.rst

   .. tab::
      :tabid: compass

      .. include:: /includes/fts-tutorial/autocomplete/facet-output-shell-and-compass.rst

   .. tab:: 
      :tabid: go

      .. include:: /includes/fts-tutorial/autocomplete/facet-output-go.rst

   .. tab:: 
      :tabid: java-sync 

      .. include:: /includes/fts-tutorial/autocomplete/facet-output-java.rst

   .. tab::
      :tabid: nodejs

      .. include:: /includes/fts-tutorial/autocomplete/facet-output-nodejs.rst

   .. tab::
      :tabid: python

      .. include:: /includes/fts-tutorial/autocomplete/facet-output-py.rst

|fts| returns documents that contain the term ``Gravity`` in the
``title`` field. The ``count`` field in the results indicate the number
of documents in the collection with the same title. In the results,
|fts| found three documents in the collection with ``Gravity`` as its
title, but |fts| ommited the duplicate titles and only returned one
matching document.

If you want to see the duplicate titles as shown in the results below, 
run the preceding :ref:`autocomplete-ref` operator query using 
:pipeline:`$search` without :ref:`fts-facet-ref`. 

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. code-block:: json
         :copyable: false
         
         [
           { title: 'Gravity' },
           { title: 'Gravity' },
           { title: 'Gravity' },
           { title: 'Defying Gravity' },
           { title: 'Laws of Gravity' }
         ]

   .. tab::
      :tabid: compass

      
      .. code-block:: json
         :copyable: false
         
         [
           { title: 'Gravity' },
           { title: 'Gravity' },
           { title: 'Gravity' },
           { title: 'Defying Gravity' },
           { title: 'Laws of Gravity' }
         ]

   .. tab:: 
      :tabid: go

      .. code-block:: none
         :copyable: false
         
         [{title Gravity}],
         [{title Gravity}],
         [{title Gravity}],
         [{title Defying Gravity}],
         [{title Laws of Gravity}]

   .. tab:: 
      :tabid: java-sync 

      .. code-block:: json
         :copyable: false

         {"title": "Gravity"}
         {"title": "Gravity"}
         {"title": "Gravity"}
         {"title": "Defying Gravity"}
         {"title": "Laws of Gravity"}

   .. tab::
      :tabid: nodejs

      .. code-block:: javascript
         :copyable: false

         { title: 'Gravity' }
         { title: 'Gravity' }
         { title: 'Gravity' }
         { title: 'Defying Gravity' }
         { title: 'Laws of Gravity' }

   .. tab::
      :tabid: python

      .. code-block:: python
         :copyable: false

         { 'title': 'Gravity' }
         { 'title': 'Gravity' }
         { 'title': 'Gravity' }
         { 'title': 'Defying Gravity' }
         { 'title': 'Laws of Gravity' }
