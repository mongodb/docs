========================================
Seed a New Secondary from Backup Restore
========================================

.. default-domain:: mongodb

Overview
--------

When a natural synchronization of a new secondary host costs too much time or
resources, seeding a secondary from a |backup| restore is a better
alternative. Seeding also does not impact an active MongoDB process
to retrieve data.

Prerequisites
-------------

To seed a secondary from a backup restore file, you must have:

- A backup restore file.

- The :file:`seedSecondary.sh` and :file:`seedSecondary.bat` scripts
  included in the backup restore file.

When you run the :file:`seedSecondary.sh` script on a Unix-based system
or :file:`seedSecondary.bat` script on a Windows-based system as part of this tutorial,
you must provide the replica set's oplog size, in gigabytes. If you do not
have the size, see the section titled "Check the Size of the Oplog" on the
:manual:`Troubleshoot Replica Sets </tutorial/troubleshoot-replica-sets>`
page of the MongoDB manual.

.. _seed-secondary-considerations:

Considerations
--------------

An |mms| backup stores all database files in a single directory.
If you run MongoDB with the ``directoryPerDb`` option, then after
restore you must redistribute the files to the different databases. |mms|
Backup does not provide restoration artifacts that use the
``directoryPerDb`` option.

The seedSecondary.sh file will not be in the backup restore if you have
blacklisted dbs or collections or have resynced your backup after the snapshot
(or for config servers). In these cases, including the script would cause an
inconsistent secondary. In the case of a blacklist, your secondary would not
include some collections which would cause problems for your deployment.

Seeding a new secondary from a backup restore requires an oplog window on the
current primary that spans back to the snapshot's timestamp.

Procedure
---------

.. include:: /includes/steps/backup-seed-new-secondary.rst
