=================================
Change Hostnames in a Replica Set
=================================

.. default-domain:: mongodb

Synopsis
--------

For most :term:`replica sets <replica set>` the hostnames
[#hostnames-ips-dns]_ in the :data:`members[n].host` field never
change. However, in some cases you must migrate some or all host names
in a replica set as organizational needs change. This
document presents two possible procedures for changing the hostnames
in the :data:`members[n].host` field. Depending on your environments
availability requirements, you may: 

#. Make the configuration change without disrupting the availability
   of the replica set. While this ensures that your application will
   always be able to read and write data to the replica set, this
   procedure can take a long time and may incur downtime at the
   application layer. [#application-changes]_

   For this procedure, see :ref:`replica-set-change-hostname-no-downtime`. 
   
#. Stop all members of the replica set at once running on the "old"
   hostnames or interfaces, make the configuration changes, and then
   start the members at the new hostnames or interfaces. While the set
   will be totally unavailable during the operation, the total
   maintenance window is shorter.

   For this procedure, see :ref:`replica-set-change-hostname-downtime`.

.. seealso::

   - :doc:`/reference/replica-configuration`
   - :ref:`Replica Set Reconfiguration Process <replica-set-reconfiguration-usage>`
   - :func:`rs.conf()` and :func:`rs.reconfig()`

   And the following tutorials:

   - :doc:`/tutorial/deploy-replica-set`
   - :doc:`/tutorial/expand-replica-set`

.. [#hostnames-ips-dns] Always use resolvable hostnames
   for the value of the :data:`members[n].host` field in the replica
   set configuration to avoid confusion and complexity.

.. [#application-changes] You will have to configure your applications
   so that they can connect to the replica set at both the old and new
   locations. This often requires a restart and reconfiguration at the
   application layer, which may affect the availability of your
   applications. This re-configuration is beyond the scope of this
   document and makes the :ref:`second option <replica-set-change-hostname-downtime>`  
   preferable when you must change the hostnames of *all* members of
   the replica set at once.

Procedures
----------

.. _replica-set-change-hostname-no-downtime:

.. I think these section names can be better still.

Changing Hostnames while Maintaining the Replica Set's Availability
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Make one of the :term:`secondary <secondary>` members of the
   :term:`replica set` accessible at the new location. 
         
   This change may be as straightforward as creating a new DNS record,
   or may involve starting the :program:`mongo` instance on a new
   :setting:`port`.

   For example, given a secondary with hostname ``localhost:27018``,
   you could change the hostname by starting the secondary on a new port,
   as shown here:

   .. code-block:: sh

      mongod --dbpath /data/db/ --port 37018 --replSet rs0

#. Open a :program:`mongo` shell connected to the replica set's
   :term:`primary` and then call :func:`rs.reconfigure()` to
   reconfigure the set, and then wait for the moved secondary
   to catch up. For example, for a primary running on port
   ``27107``, you would issue the following commands:

   .. code-block:: sh

      mongo --port 27017

      rs.reconfigure()

#. Make sure that your client applications are able to access the set
   at the new location.

#. Repeat the above steps for each non-primary member of the set.

#. Open a :program:`mongo` shell connected to the primary and step
   down the primary using :dbcommand:`replSetStepDown`. You can do
   so by issuing the :func:`rs.stepDown()` command, as shown here:

   .. code-block:: sh

      mongo --port 27017

      rs.stepDown()

#. Shut down the primary.

#. Open a :program:`mongo` shell connected to the new primary and
   call :func:`rs.reconfigure()` to reconfigure the set for the last
   time. For example:

   .. code-block:: sh

      mongo --port 37018

      rs.reconfigure()

#. Restart the original primary.

#. Open a :program:`mongo` shell connected to the primary.
   For example:

   .. code-block:: sh

      mongo --port 27017

#.  Run :func:`rs.stdatus()` to confirm that the set has reconfigured.
    For example:

   .. code-block:: sh

      rs.stdatus()

.. _replica-set-change-hostname-downtime:

Changing Hostnames by Making the Replica Set Unavailable
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Stop all members in the :term:`replica set`.

#. Restart each member *on a different port* and *without* using the
   :option:`--replSet <mongod --replset>` run-time option. Running on
   a different port prevents clients from connecting to this host while you perform
   maintenance. Use a command that
   resembles the following:

   .. code-block:: sh

      mongod --dbpath /data/db/ --port 37017

#. For each member in the replica set, perform the following sequence of operations:

   #. Open a :program:`mongo` shell connected to the member's
      :program:`mongod` running on the new, temporary port. For example,
      for a member running on a temporary port of ``37017``, you would issue
      this command:

      .. code-block:: sh

         mongo --port 37017

   #. Edit the replica set configuration manually. The replica set
      configuration is the only document in the ``system.replset``
      collection in the ``local`` database. Edit the replica set
      configuration with the new hostnames and correct ports for all
      the members of the replica set. Consider the following sequence of
      commands to change the hostnames in a three-member set:

      .. code-block:: javascript

         use local
         
         cfg = db.system.replset.findOne( { "_id": "rs0" } )

         cfg.members[0].host = "mdb0.example.net:27017"

         cfg.members[1].host = "mdb1.example.net:27018"

         cfg.members[2].host = "mdb2.example.net:27019"

         db.system.replset.update( { "_id": "rs0" } , cfg )

   #. Stop the :program:`mongod` process on the member.

#. After re-configuring all members of the set, start each
   :program:`mongod` instance in the normal way: use the usual port
   number and use the :option:`--replSet <mongod --replset>` option. For
   example:

   .. code-block:: sh

      mongod --dbpath /data/db/ --port 27017 --replSet rs0

#. Connect to one of the :program:`mongod` instances
   using the :program:`mongo` shell. For example:

   .. code-block:: sh

      mongo --port 27017

#.  Run :func:`rs.stdatus()` to confirm that the set has reconfigured.
    For example:

   .. code-block:: sh

      rs.stdatus()

