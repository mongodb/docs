.. _aggregation:

======================
Aggregation Operations
======================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :keywords: sample dataset
   :description: Aggregation operations process multiple documents and return computed results.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Aggregation operations process multiple documents and return computed
results. You can use aggregation operations to:

- Group values from multiple documents together.

- Perform operations on the grouped data to return a single result.

- Analyze data changes over time.

- Query the most up-to-date version of your data. 

By using the built-in aggregation operators in MongoDB, you can perform 
analytics on your cluster without having to move your data to another platform. 

Get Started 
-----------

To perform aggregation operations, you can use:

- :ref:`Aggregation pipelines <aggregation-pipeline-intro>`, which are
  the preferred method for performing aggregations.

- :ref:`Single purpose aggregation methods
  <single-purpose-agg-methods>`, which are simple but lack the
  capabilities of an aggregation pipeline.

.. |page-topic| replace:: :atlas:`run aggregation pipelines in the UI </atlas-ui/agg-pipeline>`

.. cta-banner::
   :url: https://www.mongodb.com/docs/atlas/atlas-ui/agg-pipeline
   :icon: Cloud

   .. include:: /includes/fact-atlas-compatible.rst

.. _aggregation-pipeline-intro:

Aggregation Pipelines
---------------------

.. include:: /includes/aggregation-pipeline-introduction.rst

Aggregation Pipeline Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. note::
   To run this example, load the ``sample_training`` dataset in MongoDB Atlas.
   See :ref:`how to load sample data <load-sample-data>`.

The following example pipeline uses documents from the :ref:`sample data 
<sample-data>` available in MongoDB Atlas, specifically the 
``sample_training.routes`` collection. In this pipeline, we'll find the top 
three airlines that offer the most direct flights out of the airport in 
Portland, Oregon, USA (PDX). 

First, add a :pipeline:`$match` stage to filter the documents to flights 
that have a ``src_airport`` value of ``PDX`` and zero ``stops``:

.. code-block:: javascript 

   {
      $match : { 
         "src_airport" : "PDX", 
         "stops" : 0
      }
   }

The ``$match`` stage reduces the number of documents in our pipeline from 66,985 
to 113. Next, :pipeline:`$group` the documents by airline name and count 
the number of flights: 

.. code-block:: javascript

   {
      $group : { 
         _id : { 
            "airline name": "$airline.name", 
         }
         count : { 
            $sum : 1
         }
      }
   }

The ``$group`` stage reduces the number of documents in the pipeline to 16 
airlines. To find the airlines with the most flights, use the :pipeline:`$sort` 
stage to sort the remaining documents in descending order:

.. code-block:: javascript

   {
      $sort : { 
         count : -1
      }
   }

After you sort your documents, use the :pipeline:`$limit` stage to return the 
top three airlines that offer the most direct flights out of PDX:

.. code-block:: javascript

   {
      $limit : 3
   }

After putting the documents in the ``sample_training.routes`` collection through 
this aggregation pipeline, the top three airlines offering non-stop flights from 
PDX are Alaska, American, and United Airlines with 39, 17, and 13 flights, 
respectively.

The full pipeline resembles the following: 

.. code-block:: javascript 

   db.routes.aggregate( [
      {
         $match : { 
            "src_airport" : "PDX", 
            "stops" : 0
         }
      },
      {
         $group : { 
            _id : { 
               "airline name": "$airline.name", 
            },
            count : { 
               $sum: 1
            }
         }
      },
      {
         $sort : { 
            count : -1
         }
      },
      {
         $limit : 3
      }
   ] )

For runnable examples containing sample input documents, see
:ref:`Complete Aggregation Pipeline Examples
<aggregation-pipeline-examples>`. 

Learn More About Aggregation Pipelines
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To learn more about aggregation pipelines, see
:ref:`aggregation-pipeline`.

.. _single-purpose-agg-methods:

Single Purpose Aggregation Methods
----------------------------------

The single purpose aggregation methods aggregate documents from a single
collection. The methods are simple but lack the capabilities of an
aggregation pipeline.

.. list-table::
   :header-rows: 1
   :widths: 50 50
   
   * - Method
     - Description

   * - :method:`db.collection.estimatedDocumentCount()`
     - Returns an approximate count of the documents in a collection or
       a view.

   * - :method:`db.collection.countDocuments()`
      - Returns an exact count of documents matching optional criteria.
   * - :method:`db.collection.estimatedDocumentCount()`
      - Returns a fast approximate count (no query filter support).

   * - :method:`db.collection.distinct()`
     - Returns an array of documents that have distinct values for the
       specified field.

.. toctree::
   :titlesonly:
   :hidden:

   Aggregation Pipeline </core/aggregation-pipeline>
   Reference </reference/aggregation>
   Map-Reduce </core/map-reduce>
