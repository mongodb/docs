.. meta::
   :robots: noindex, nosnippet

.. _java-realmdictionary:

==========================
RealmDictionary - Java SDK
==========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 10.6.0

You can use the :java-sdk:`RealmDictionary
<io/realm/RealmDictionary.html>` data type to manage a collection of
unique ``String`` keys paired with values. ``RealmDictionary``
implements Java's ``Map`` interface, so it works just like the built-in
``HashMap`` class, except managed ``RealmDictionary`` instances persist
their contents to a realm. ``RealmDictionary`` instances that
contain Realm objects store references to those objects.
When you delete a Realm object from a realm, any
references to that object in a ``RealmDictionary`` become ``null``
values.

Usage
-----

To create a field of type ``RealmDictionary``, define an object property
of type ``RealmDictionary<T>``, where ``T`` defines the values you would
like to store in your ``RealmDictionary``. Currently, ``RealmDictionary``
instances can only use keys of type ``String``.

The following table shows which methods you can use to complete common
collection tasks with ``RealmDictionary``:

.. list-table::
   :header-rows: 1
   :widths: 70 30

   * - Task
     - Method

   * - Add an object to a ``RealmDictionary``
     - :java-sdk:`put() <io/realm/RealmDictionary.html#put-E->` (or the ``[]`` operator in Kotlin)

   * - Add multiple objects to a ``RealmDictionary``
     - :java-sdk:`putAll() <io/realm/RealmDictionary.html#putAll-Map->`

   * - Check if the dictionary contains an specific key
     - :java-sdk:`containsKey() <io/realm/RealmDictionary.html#containsKey-String->`

   * - Check if the dictionary contains a specific value
     - :java-sdk:`containsValue() <io/realm/RealmDictionary.html#containsValue-Object->`

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/local/FrogDictionaryKt.snippet.complete.kt
         :language: kotlin
         :copyable: false

      .. literalinclude:: /examples/generated/java/local/DataTypesTest.snippet.realmDictionary.kt
         :language: kotlin
         :copyable: false

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/local/FrogDictionary.snippet.complete.java
         :language: java
         :copyable: false

      .. literalinclude:: /examples/generated/java/local/DataTypesTest.snippet.realmDictionary.java
         :language: java
         :copyable: false

Notifications
-------------

To subscribe to changes to a ``RealmDictionary``, pass a
:java-sdk:`MapChangeListener <io/realm/MapChangeListener.html>`
implementation to the :java-sdk:`RealmSet.addChangeListener <io/realm/RealmMap.html#addChangeListener-io.realm.MapChangeListener->` method.
Your ``MapChangeListener`` implementation must define an
``onChange()`` method, which accepts a reference to the changed ``RealmDictionary``
and a set of changes as parameters. You can access the keys
added to the dictionary as well as the keys removed from the dictionary
through the ``MapChangeSet`` parameter.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/local/DataTypesTest.snippet.realmdictionary-notifications.kt
         :language: kotlin
         :copyable: false

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/local/DataTypesTest.snippet.realmdictionary-notifications.java
         :language: java
         :copyable: false
