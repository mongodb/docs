===================
Date() and Datetime
===================

.. default-domain:: mongodb

.. meta::
   :description: Use the date method to return a new date. You can specify a date to return or return the current date.

.. facet::
   :name: programming_language 
   :values: shell

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. method:: Date()

   Returns a date either as a string or as a
   :ref:`document-bson-type-date` object. The date can contain a date
   and a time, known as a *datetime*.

   The `BSON specification <http://bsonspec.org/#/specification>`_
   states a ``Date`` object contains the *UTC datetime*. UTC is
   *Coordinated Universal Time*. The UTC datetime stores an unsigned
   64-bit integer value, indicating the number of milliseconds after the
   Unix epoch (January 1st, 1970 at 00:00:00 UTC).

Compatibility
-------------

.. |operator-method| replace:: ``Date()``

.. include:: /includes/fact-compatibility.rst

Syntax
------

You can specify either of the following formats:

- ``Date()`` returns the current date as a string in
  :binary:`~bin.mongosh`.

- ``new Date()`` returns the current date as a
  :ref:`document-bson-type-date` object. :binary:`~bin.mongosh`
  wraps the :ref:`document-bson-type-date` object with the
  ``ISODate`` helper. The ``ISODate`` is in `UTC
  <https://en.wikipedia.org/wiki/Coordinated_Universal_Time>`__.

You can specify a particular date by passing an ISO-8601 date string
with a year within the inclusive range ``0`` through ``9999`` to the
``new Date()`` constructor or the ``ISODate()`` function. These
functions accept the following formats:

- ``new Date("<YYYY-mm-dd>")`` returns the ``ISODate`` with the
  specified date.

- ``new Date("<YYYY-mm-ddTHH:MM:ss>")`` specifies the datetime
  in the client's local timezone and returns the ``ISODate`` with the
  specified datetime in UTC.

- ``new Date("<YYYY-mm-ddTHH:MM:ssZ>")`` specifies the
  datetime in UTC and returns the ``ISODate`` with the specified
  datetime in UTC.

- ``new Date(<integer>)`` specifies the datetime as milliseconds
  since the :term:`UNIX epoch <unix epoch>` (Jan 1, 1970), and
  returns the resulting ``ISODate`` instance.

Behavior
--------

.. include:: /includes/fact-bson-date-internals.rst

Examples
--------

Use Date in a Query
~~~~~~~~~~~~~~~~~~~

If no document with ``_id`` equal to ``1`` exists in the ``products``
collection, the following operation inserts a document with the field
``dateAdded`` set to the current date:

.. code-block:: javascript

   db.products.updateOne(
      { _id: 1 },
      {
        $set: { item: "apple" },
        $setOnInsert: { dateAdded: new Date() }
      },
      { upsert: true }
   )

.. seealso::

   - :update:`$currentDate`
   - :ref:`NOW aggregation variable usage <currentDate-example-agg>` to
     update with aggregation pipeline 

Return Date as a String
~~~~~~~~~~~~~~~~~~~~~~~

To return the date as a string, use the ``Date()`` method. For example:

.. code-block:: javascript

   var myDateString = Date();

Return Date as ``Date`` Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:binary:`~bin.mongosh` wraps objects of
:ref:`document-bson-type-date` type with the ``ISODate`` helper.
However, the objects are :ref:`document-bson-type-date` types.

The following example uses ``new Date()`` to return
a :ref:`document-bson-type-date` object with the specified UTC datetime:

.. code-block:: javascript

   var myDate = new Date("2016-05-18T16:00:00Z");

.. seealso::

   - :ref:`BSON Date <document-bson-type-date>`
   - :ref:`mongo Shell Date <mongo-shell-date-type>`

Insert and Return ``ISODate`` Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can specify dates as ``ISODate`` objects.

The following example creates a ``cakeSales`` collection with
``ISODate`` objects in the ``orderDate`` field:

.. code-block:: javascript

   db.cakeSales.insertMany( [
      { _id: 0, type: "chocolate", orderDate: new ISODate("2020-05-18T14:10:30Z") },
      { _id: 1, type: "strawberry", orderDate: new ISODate("2021-03-20T11:30:05Z") },
      { _id: 2, type: "vanilla", orderDate: new ISODate("2021-01-15T06:31:15Z") }
   ] )

The following example returns documents where the ``orderDate`` is less
than the ``ISODate`` specified in the :expression:`$lt` operator:

.. code-block:: javascript

   db.cakeSales.find( { orderDate: { $lt: ISODate("2021-02-25T10:03:46.000Z") } } )

Example output:

.. code-block:: javascript
   :copyable: false

   [
      {
         _id: 0,
         type: 'chocolate',
         orderDate: ISODate("2020-05-18T14:10:30.000Z")
      },
      {
         _id: 2,
         type: 'vanilla',
         orderDate: ISODate("2021-01-15T06:31:15.000Z")
      }
   ]
