stepnum: 1
level: 4
source:
  file: steps-source-backup-tab.yaml
  ref: select-backup-tab-overview-page
---
stepnum: 2
level: 4
source:
  file: steps-source-prepare-restore-snapshot.yaml
  ref: click-deployment-select-restore
---
stepnum: 3
level: 4
title: "Select the Restore Point."
ref: select-shard-pit-manual
content: |

  a. Choose the point from which you want to restore your backup.

     .. include:: /includes/backup/select-restore-point.rst

  b. Click :guilabel:`Next`.

---
stepnum: 4
level: 4
title: "Click :guilabel:`Download` to Restore the Files Manually."
ref: select-restore-method

---
stepnum: 5
level: 4
source:
  file: steps-source-download-restore-snapshot.yaml
  ref: select-restore-destination
---
stepnum: 6
level: 4
title: "Retrieve the Snapshots."
ref: retrieve
content: |

  |mms| creates links to the snapshot. By default, these links are
  available for an hour and can be used just once.

  To download the snapshots:

  a. If you closed the restore panel, click :guilabel:`Backup`, then
     :guilabel:`Restore History`.

  b. When the restore job completes, click :guilabel:`(get link)`
     for each :term:`replica set` appears.

  c. Click:

     - The copy button to the right of the link to copy the link to
       use it later, or
     - :guilabel:`Download` to download the snapshot immediately.

---
stepnum: 7
level: 4
title: "Restore the Snapshot Data Files to the Target Host."
ref: copy-snapshot-files
content: |

  .. example::

     .. code-block:: sh

        tar -xvf <backupSnapshot>.tar.gz
        mv <backupSnapshot> </path/to/datafiles>
---
stepnum: 8
level: 4
title: "Unmanage the Replica Set."
ref: unmanage-replset
content: |

  Before attempting to restore the data manually, :doc:`remove the
  replica set from Automation </tutorial/unmanage-deployment>`.

---
stepnum: 9
level: 4
title: "Verify Hardware and Software Requirements."
ref: verify-requirements
content: |

  .. list-table::
     :widths: 30 70
     :stub-columns: 1

     * - Storage Capacity
       - The target host hardware needs enough free storage space for
         the restored data. If you want to keep any existing sharded
         cluster data on this host, make sure the host has enough free
         space for both data sets.

     * - MongoDB Version
       - The target host and source host must run the same MongoDB
         Server version. To check the MongoDB version, run ``mongod
         --version`` from a terminal or shell.

  To learn more about installation, see :manual:`/installation`.


---
stepnum: 10
level: 4
title: "Remove Replica Set-Related Collections from the ``local`` Database."
ref: remove-replset-config
content: |

  Invoke the following commands to remove the previous replica set
  configuration and other non-oplog, replication-related collections.

  .. code-block:: javascript

     db.getSiblingDB("local").replset.minvalid.drop()
     db.getSiblingDB("local").replset.oplogTruncateAfterPoint.drop()
     db.getSiblingDB("local").replset.election.drop()
     db.getSiblingDB("local").system.replset.remove({})

  A successful response should look like this:

  .. code-block:: javascript
     :copyable: false

     > db.getSiblingDB("local").replset.minvalid.drop()
     true
     > db.getSiblingDB("local").replset.oplogTruncateAfterPoint.drop()
     true
     > db.getSiblingDB("local").replset.election.drop()
     true
     > db.getSiblingDB("local").system.replset.remove({})
     WriteResult({ "nRemoved" : 1 })

---
stepnum: 11
level: 4
title: "Add a New Replica Set Configuration."
ref: add-new-replset-config
content: |

  Insert the following document into the ``system.replset`` collection
  in the ``local`` database. Change the following variables:

  - ``<replaceMeWithTheReplicaSetName>`` to the name of your Replica Set
  - ``<host>`` to the |fqdn| of the host serving this Replica Set member
  - ``<port>`` to the port of your Replica Set instance

  .. code-block:: javascript
     :linenos:

     db.getSiblingDB("local").system.replset.insert({
       "_id" : "<replaceMeWithTheReplicaSetName>",
       "version" : NumberInt(1),
       "protocolVersion" : NumberInt(1),
       "members" : [
         {
           "_id" : NumberInt(0),
           "host" : "<host>:<port>"
         }
       ],
       "settings" : {

       }
     })

  A successful response should look like this:

  .. code-block:: javascript
     :copyable: false

     WriteResult({ "nInserted" : 1 })

---
stepnum: 12
level: 4
title: "Insert the Minimum Valid Timestamp."
ref: set-minvalid-timestamp
content: |

  Issue the following command:

  .. code-block:: javascript

     db.getSiblingDB("local").replset.minvalid.insert({
       "_id" : ObjectId(),
       "t" : NumberLong(-1),
       "ts" : Timestamp(0,1)
     });

---
stepnum: 13
level: 4
title: "Set the Restore Point to the ``Restore Timestamp`` Value from the ``restoreInfo`` File."
ref: set-restore-point
content: |
  Set the ``oplogTruncateAfterPoint`` document to the Restore timestamp
  given in the :ref:`restoreInfo.txt <com-restore-info-rs>` file.

  .. code-block:: javascript

     truncateAfterPoint = Timestamp(restoreTS.getTime(), restoreTS.getInc())
     db.getSiblingDB("local").replset.oplogTruncateAfterPoint.insert({
        "_id": "oplogTruncateAfterPoint",
        "oplogTruncateAfterPoint": truncateAfterPoint
     })

  A successful response should look like this:

  .. code-block:: javascript
     :copyable: false

     WriteResult({ "nInserted" : 1 })

  .. note:: Restoring MongoDB 4.2 Snapshots using MongoDB 4.4

     If you try to restore a MongoDB 4.2 snapshot with a |mongod|
     running MongoDB 4.4, your oplog may contain unneeded documents.

     To resolve this issue, you can either:

     - Decrement the timestamp by 1.
     - Restore using MongoDB 4.2.
     - Have |mms| run an automated restore.

     This issue doesn't apply to MongoDB 4.4 or later snapshots.
---
stepnum: 14
level: 4
title: "Restart as a Single-Node Replica Set to Recover the Oplog."
ref: restart-special-db
content: |

  Start the |mongod|. The |mongod| replays the oplog up to the
  ``Restore timestamp``.

  .. code-block:: sh

     ./mongod --dbpath </path/to/datafiles> \
              --port <ephemeralPort> \
              --replSet <replaceMeWithTheReplicaSetName>

  .. important::

     You must not set ``<ephemeralPort>`` in this command to the same
     ``<port>`` you set in **Step 10**.

  Once the |mongod| has started and accepting connections, you can shut
  it down via normal mechanisms.

---
stepnum: 15
level: 4
title: "Stop the Temporary Single-Node Replica Set."
ref: stop-temp-replset
content: |

  Issue the following command:

  .. code-block:: sh

     ./mongod --dbpath </path/to/datafiles> \
              --port <ephemeralPort> \
              --shutdown

---
stepnum: 16
title: "Run the MongoDB Backup Restore Utility (Point-in-Time Restore Only)."
level: 4
ref: mbru-binary
content: |

  a. Download the MongoDB Backup Restore Utility to your host.

     .. note::

        If you closed the restore panel, click :guilabel:`Backup`, then
        :guilabel:`More` and then :guilabel:`Download MongoDB Backup
        Restore Utility`.

  #. Start a :binary:`~bin.mongod` instance without authentication
     enabled using the extracted snapshot directory as the data
     directory.

     .. example::

        .. code-block:: sh

           mongod --port <port number> \
                  --dbpath <temp-database-path> \
                  --setParameter ttlMonitorEnabled=false

     .. warning::
        The MongoDB Backup Restore Utility doesn't support
        authentication, so you can't start this temporary database with
        authentication.

  #. Run the MongoDB Backup Restore Utility on your destination host.
     Run it once for the replica set.

     .. include:: /includes/fact-pre-configured-mbru-command.rst

     The ``mongodb-backup-restore-util`` command uses the following
     options:

     .. cond:: cloud

        .. include:: /includes/fact-restore-manual-replica-set-cloud.rst

     .. cond:: onprem

        .. include:: /includes/fact-restore-manual-replica-set-onprem.rst

     :icon:`check-circle` means that if you copied the
     ``mongodb-backup-restore-util`` command provided in
     |application|, this field is pre-configured.



---
stepnum: 17
level: 4
title: "Connect a ``mongo`` Shell to the ``mongod`` Instance."
ref: connect-to-instance
content: |

  From the host running this |mongod| process, start the
  |mongo| shell. To connect to the |mongod| listening to
  localhost on port ``<port>``, invoke:

  .. code-block:: sh

     ./mongo --port <port>

  Depending on your path, you may need to specify the path to the
  |mongo| shell.

  After the |mongod| starts accepting connections, continue.
---
stepnum: 18
level: 4
title: "Initiate the New Replica Set."
ref: initiate-new-replset
content: |

  Use :method:`rs.initiate()` on the replica set:

  .. code-block:: javascript

     rs.initiate( {
       _id : <replaceMeWithTheReplicaSetName>,
       members: [ {
         _id : 0,
         host : <host:port>
       } ]
     })

  MongoDB initiates a set that consists of the current member and that
  uses the default replica set configuration.

---
stepnum: 19
level: 4
title: "Repeat Steps 7 to 17 for each node in the Replica Set."
ref: repeat-rs
content: |

---
stepnum: 20
level: 4
title: "Shut Down the New Replica Set."
ref: shutdown-new-replset
content: |

  .. code-block:: javascript

     db.shutdownServer({});
---
stepnum: 21
level: 4
title: "Reimport the Replica Set."
ref: reimport-replica-set
content: |

  To manage the replica set with automation again,
  :doc:`import the replica set </tutorial/add-existing-mongodb-processes>`
  back into |mms|.

...

