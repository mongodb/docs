=======================
Administration Overview
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Introduction
------------

If you have administrative privileges for the |onprem| deployment, click
the :guilabel:`Admin` link in the top right corner of |onprem| to access
the system administration tool. This page describes the system administration
interface. For configuration settings, see :doc:`/reference/configuration`.

General Tab
-----------

The :guilabel:`General` tab gives access to system topology, users,
messages, and other information.

Overview Page
~~~~~~~~~~~~~

This page displays the |onprem| network topology and provides reports on
system use and activity.

Ops Manager Config
~~~~~~~~~~~~~~~~~~

The :guilabel:`General` tab's :guilabel:`Ops Manager Config` page lets you
update your |onprem| settings. For information on each field, see
:doc:`/reference/configuration`.

Users Page
~~~~~~~~~~

This page displays a list of user information for all
people with permission to use the |onprem| application as well as provides
an interface to manage users. Use the search box on the upper right corner
to find a user record. The :guilabel:`Last Access`
column displays the date and time of the last access event.

To edit a user record:

.. include:: /includes/steps/admin-user-edit.rst

To delete a user record:

.. include:: /includes/steps/admin-user-delete.rst

.. _groups-page-admin-ui:

Projects Page
~~~~~~~~~~~~~

This page in the :guilabel:`Admin` interface lists :term:`groups <group>`,
their creation dates, and their last pings from agents.

.. list-table::
   :header-rows: 1

   * - Task

     - Procedure

   * - To view a group's details:

     - Click the group name.

   * - To delete a group:

     - Click the group's trash icon.

   * - To edit a group's tags:

     - Click the :guilabel:`pencil icon` in the :guilabel:`Tags` column.

       .. include:: /includes/requirements-tag-names.rst

   * - To edit a group's metric data retention policy:

     - 1. Click the group's :guilabel:`More` link.

       2. On the line for :guilabel:`Monitoring Data Retention`, click :guilabel:`Customize`.

       3. Change the retention levels as desired. Increasing the retention
          period for a granularity level requires more storage on the :ref:`Ops
          Manager Application Database <mms-application-database>`. For more
          information on data retention, see
          :ref:`default-monitoring-data-retention`.

Logs Page
~~~~~~~~~

This page lists backup logs by job and class with messages
grouped and counted by last hour, 6 hours, and last 2 days. Click a
count number to see all messages in the group.

Version Manifest Page
~~~~~~~~~~~~~~~~~~~~~

This page lists all released MongoDB
versions. |onprem| requires this list to run in local mode. See
the :doc:`/tutorial/configure-local-mode`
tutorial for more information.

Messages Page
~~~~~~~~~~~~~

This page displays messages
you have added to the |onprem| interface. You can add a message to any
page of the |onprem| interface to notify users of information and events,
such as impending maintenance windows. To add messages, see
:doc:`/tutorial/add-message-to-interface`

Audits Page
~~~~~~~~~~~

This page displays all events tracked by |onprem|.
This includes the group events as well as internal and system events, which
are not tracked at a group level.

.. Automation tab: internal

.. _backup-tab:

Backup Tab
----------

The :guilabel:`Admin` interface's :guilabel:`Backup` tab provides
information on Backup resources, including :term:`jobs <backup job>`,
:term:`daemons <Backup Daemon>`, and :term:`blockstores <blockstore>`.
For an overview of Backup and Backup resources, see
:doc:`/core/backup-overview`.

.. _jobs-page:

Jobs Page
~~~~~~~~~

This page lets you manage Backup jobs and Backup resources for
each group. The top part of the page displays :guilabel:`Active Jobs` and the
bottom part displays :guilabel:`Stopped Jobs`.
The following fields on the page have a yellow background if delayed:

- :guilabel:`Last Agent Conf`, if older than 1 hour.

- :guilabel:`Last Oplog`, if older than 1 hour before the :guilabel:`Last Agent Conf`.

- :guilabel:`Head Time`, if older than 1 hour before :guilabel:`Last Oplog`.

- :guilabel:`Last Snapshot`, if older than the snapshot interval multiplied by 1.5.

.. _manage-backup-jobs:

Manage Backup Jobs
``````````````````

From the :guilabel:`Jobs` page, you can do the following:

.. list-table::
   :header-rows: 1

   * - Task

     - Procedure

   * - Assign a group to particular set of :term:`Backup Daemons <Backup
       Daemon>` or :term:`blockstores <blockstore>`.

     - Click the group, select the daemons or :term:`blockstores
       <blockstore>`, and select :guilabel:`Save Changes`.

   * - View a job's log.

     - Click the name of the job and then click the :guilabel:`Logs` link.
       Contact MongoDB Support if you need help interpreting the error
       message.

   * - View information about a job.

     - Click the job. From the job's page you can access logs, conf calls,
       and other information, and you can download diagnostics.

   * - Move a job to a new Backup Daemon.

     - Click the job. On the job's page, click the :guilabel:`Move head`
       link, select the new :term:`head <head database>`, and click the
       :guilabel:`Move Head` button.

   * - Filter the page to display the jobs assigned to a particular daemon or
       blockstore.

     - Click the name of the daemon or blockstore.

   * - Toggle whether a job :term:`journals <journal>` its
       :term:`head database`.

     - Select or clear :guilabel:`Journal Head` to turn on or off journaling
       for your head database.

       .. note::
          Changing this setting at the job level overrides the deployment-wide
          setting.

       See :setting:`mms.backup.journal.heads` for how to enable or disable
       journaling for all head databases in your group.

Manage Backup Resources
```````````````````````

From the :guilabel:`Jobs` page, you can assign backup resources to a
particular :term:`group`.

You can make these changes for existing backups, but only new
:term:`backup jobs <backup job>` will follow the new rules. Making these
changes does not affect existing deployments. For additional procedural
information, see :doc:`/tutorial/move-jobs-to-new-backup-daemon`.

.. list-table::
   :header-rows: 1

   * - Task

     - Procedure

   * - Assign a group to particular :term:`daemons <Backup Daemon>`,
       :term:`blockstores <blockstore>`
       or :term:`oplog stores <Oplog Store Database>`.

     - Click the group to open the group's assignment page; make the
       assignments; select :guilabel:`Save Changes`.

   * - Assign a group to a labelled set of daemons, blockstores,
       and oplog stores.

     - First assign the label on the Admin page for each resource. See
       :ref:`daemons-interface`, :ref:`blockstores-page`,
       and :ref:`oplog-stores-page`.

       Then, on the :guilabel:`Jobs` page:

       1. Click the group name to open the group's assignment page.

       2. In the :guilabel:`Assignment Labels` list box, click :guilabel:`Select Labels`.

       3. Select the label. Each selected label must exist on at least one
          daemon, one blockstore, and one oplog store. If
          you select multiple labels, the resource must meet all selected
          labels.

          Keep in mind that the resource must also meet any other selected
          criteria on this page. For example, for a daemon to match, it
          must also meet any selections you have made in the
          :guilabel:`Backup Daemon` field.

       4. Click :guilabel:`Save Changes`.

Job Timeline Page
~~~~~~~~~~~~~~~~~

This page displays a graphical representation of
information found on other :guilabel:`Admin` pages, in particular the
:guilabel:`Jobs` page. The :guilabel:`Job Timeline` page displays critical
timestamps (:term:`head <head database>`, last snapshot, next snapshot) and
offers a way to assign a :term:`daemon <Backup Daemon>` to a given job.

Click the :guilabel:`Auto refresh` checkbox to update the list automatically
every 10 seconds. Click the :guilabel:`Refresh` button to refresh data
manually.

To view the backup job JSON, click the :guilabel:`Show JSON` link under
the :guilabel:`Project` heading for any backup job. When the JSON displays,
click the :guilabel:`View raw runtime data` link under the code to view
the raw data. To hide the daemon JSON, click the :guilabel:`Hide JSON` link.

To move the job to a new Backup Daemon, click the :guilabel:`Move head`
link under the :guilabel:`Machine` heading for a backup job. Select the
location and click the :guilabel:`Move head` button to move the job to a
new Backup Daemon. |onprem| does not automatically move jobs between daemons.

You can bind a backup job to a head by clicking :guilabel:`Set binding`
under the :guilabel:`Machine` heading for a backup job. You can bind a job
to a preferred Backup Daemon during :term:`initial sync`.
After initial sync completes, |onprem| automatically
assigns jobs to Backup Daemons.

Logs Page
~~~~~~~~~

This page lists backup logs by job and class with messages
grouped and counted by last 2 hours, last day, and last 3 days. Click a
count number to see all messages in the group.

Restores Page
~~~~~~~~~~~~~

This page displays the last 100 requested restores and their
progress. To show all restores ever requested, click :guilabel:`Show All`.

.. _resource-usage-page:

Resource Usage Page
~~~~~~~~~~~~~~~~~~~

This page provides key size and throughput
statistics on a per-job basis for all groups for which Backup is enabled. The
page displays such throughput statistics as the size of the data set, how
active it is, and how much space is being used on the :term:`blockstore`.

To export the information, click :guilabel:`Export as CSV`.

.. _grooms-page:

Grooms Page
~~~~~~~~~~~

This page lists active and recent :term:`groom` jobs.
|onprem| performs periodic garbage collection on :term:`blockstores
<blockstore>` through groom jobs that remove unused blocks to reclaim
space. Unused blocks are those
that are no longer referenced by a live snapshot. A
scheduling process determines when grooms are necessary.

A groom job forces the backup process to:

- write all new data to a new location,

- copy all existing, needed data from the old location to the new one,

- update references, to maintain data relationships, and

- drop the old database.

During groom operations, you may notice that blockstore file size will
fluctuate, sometimes dramatically.

You can manually direct |onprem| to move blocks between blockstores through
the :ref:`groom-priority-page`.

You can also :doc:`/tutorial/configure-block-size`.

.. _groom-priority-page:

Groom Priority
~~~~~~~~~~~~~~

This page allows you to manually schedule jobs to move a backup's blocks
to a different :term:`blockstore`
and to manually schedule :ref:`grooms <grooms-page>`. The page lists
each backup by its replica set and highlights a backup in blue if a groom
is in progress.

To move a backup's chunks to a different blockstore, select the destination
blockstore in the backup's :guilabel:`Blockstore List` column.
You might want to do this, for example, if you add a new blockstore and would
like to balance data.

Typically, you should not need to manually schedule groom jobs. |onprem|
:ref:`runs the jobs automatically <grooms-page>`. If you do need to
initiate a job, click the :guilabel:`Schedule` button for the backup's
replica set.

See also: :doc:`/tutorial/configure-block-size`.

.. _daemons-interface:

Daemons Page
~~~~~~~~~~~~

This page lists all active :term:`Backup Daemons <Backup Daemon>`
and provides
configuration options. |onprem| automatically detects Backup Daemons and
displays them here. You can reconfigure daemons from this page. Changes
can take up to 5 minutes to take effect.

Use the :guilabel:`Pre-Configure New Daemon` button at the bottom of the
page if you want to add a daemon but do not want it to take new jobs. Type
the ``<machine>:<roothead path>`` in the text field above the
:guilabel:`Pre-Configure New Daemon` button. Click the button to configure
the new Backup Daemon.

For each daemon, the page lists the server name, configuration, :term:`head <head database>`
space used, head space free, the number of replica sets backed up, the
percentage of time the Backup Daemon Service was busy, and job runtime
counts by 1 minute, 10 minutes, 60 minutes, less than or equal to 180
minutes, and greater than 180 minutes.

The page includes the following fields and links to manage and configure
daemons:

.. These table fields are internal only:
   Queryable Restore Jobs, Archive Jobs, Git Commit Hash: internal

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 20 80

   * - Field
     - Description
   * - :guilabel:`Show Detailed JSON`
     - Displays the Backup Daemon JSON. When the JSON displays, the
       :guilabel:`View raw runtime data` link appears under the code, allowing
       you to view the raw data.
   * - :guilabel:`Move all heads`
     - Moves all the Backup Daemon jobs that live on this daemon to a new daemon
       location. Click the link, then select the location, and then click the
       :guilabel:`Move all heads` button.
   * - :guilabel:`Delete Daemon`
     - Deletes a Backup Daemon.
   * - :guilabel:`Assignment`
     - Allows the daemon to take more jobs. If a disk fills on daemon server,
       you can deselect this so the server isn't overloaded.
   * - :guilabel:`Backup Jobs`
     - Allows the daemon to take more backup jobs. Deselect this, for example,
       when performing maintenance on a daemon's server.
   * - :guilabel:`Restore Jobs`
     - Allows the daemon to take more restore jobs.
   * - :guilabel:`Resource Usage`
     - Collects information on :term:`blockstore` use (i.e., on how many blocks
       are still referenced by snapshots). |onprem| uses this information
       to generate the :ref:`resource-usage-page` page and to prioritize
       garbage collection.
   * - :guilabel:`Garbage Collection`
     - Enables garbage collection.

   * - :guilabel:`Head Disk Type`
     - Indicates whether the disk type is SSD or HDD. If you change a daemon
       to SSD, then only jobs with an :term:`oplog` greater than 1GB/hour will
       go to this daemon, except in the case that no HDD daemon is available.
       Jobs with an oplog less than 1GB/hour can go to this daemon only if no
       HDD daemon is available.

       .. warning:: If you run |onprem| 2.0.3 or earlier, jobs with an oplog less
          than 1GB/hour **cannot** be bound to an to SSD daemon.

   * - :guilabel:`Assignment Labels`
     - Creates one or more labels that can be used to assign the daemon to
       a specific group.

.. _blockstores-page:

Snapshot Storage Page
~~~~~~~~~~~~~~~~~~~~~

MongoDB database backups called *snapshots* and they are stored in containers
called *snapshot stores*. This page lists existing snapshot stores and allows
you to create or modify snapshot stores.

|mms| supports the following snapshot stores:

- On a File System,
- In a MongoDB database (:term:`blockstore`), or
- In an S3 Bucket (S3 blockstore)

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 20 20 60

   * - Storage Method
     - Name
     - Description

   * - File System
     - File System Store
     - Snapshots are stored in a directory on a file system. Each snapshot is
       found in its own sub-directory. The snapshot files are compressed
       individually. To create or edit a file system store, see
       :doc:`/tutorial/manage-filestore-storage`.

   * - Database Storage
     - Blockstore
     - Snapshots are stored in a managed MongoDB database in a compressed, de-
       duplicated format. Depending on data usage patterns the de-duplication
       can provide significant storage savings without the need for any
       specialized hardware or other software. To create or edit a blockstore,
       see :doc:`/tutorial/manage-blockstore-storage`

   * - :abbr:`AWS (Amazon Web Services)` :abbr:`S3 (Simple Storage Service)` Bucket
     - S3 Blockstore
     - Snapshot data is stored as blocks in an `AWS S3
       <https://aws.amazon.com/s3/>`_ bucket. Snapshot metadata is stored in a
       managed MongoDB database. The metadata database tracks which blocks
       comprise each snapshot. The blocks are compressed and de-duplicated. To
       create or edit an S3 blockstore, see
       :doc:`/tutorial/manage-s3-blockstore-storage`

You can add, edit or delete any snapshot store listed.

Additional Information
``````````````````````

For additional information on managing snapshots, see:

- :doc:`/tutorial/manage-blockstore-storage`

- :doc:`/tutorial/manage-s3-blockstore-storage`

- :doc:`/tutorial/manage-filestore-storage`

- :doc:`/tutorial/assign-snapshot-stores-to-data-center`

- :doc:`/tutorial/configure-block-size`

- :ref:`groom-priority-page`, to manually direct |onprem| to move blocks
  between blockstores

.. _oplog-stores-page:

Oplog Stores Page
~~~~~~~~~~~~~~~~~

This page configures the backing replica sets that store oplog slices.
Oplog slices are compressed batches of the entries in the tailed
:term:`oplogs <oplog>` of your backed-up deployments.

.. warning::

   Do not modify the oplog store’s connection string to point to a
   different replica set. Existing data will not be copied and a resync
   will be required.

From this page you can:

- Add a member to a replica set by adding the host to the replica set
  connection string in the :guilabel:`<hostname>:<port>` field. Do
  **not** modify the connection string to point to a different replica
  set.

- Change the authentication credentials or connection options for a
  oplog store by modifying the appropriate fields.

- Add an additional oplog store by clicking the :guilabel:`Add New
  Oplog Store` button at the bottom of the page.

- Enable and disable new assignments to oplog stores using the
  checkboxes in the :guilabel:`Assignment Enabled` column.

- Assign labels that can be used to assign the oplog store to a
  specific group. Enter labels in :guilabel:`Assignment Labels`.
  Separate multiple labels with commas.

After saving changes to the oplog store’s values, you must restart all the Ops Manager instances, including those running activated Backup Daemons, for the changes to take effect.

Alerts Tab
----------

The :guilabel:`Admin` interface's :guilabel:`Alerts` tab sets and displays
global and system alerts. :doc:`Global alerts </tutorial/manage-global-alerts>`
apply a group-level alert condition to multiple groups. :doc:`System
alerts </core/system-alerts>` monitor the health of |onprem|.

Control Panel Tab
-----------------

Message History Page
~~~~~~~~~~~~~~~~~~~~

This page displays alert messages sent and the
recipients. To filter the list, click :guilabel:`Filter by Recipient`.

Send Test Message
~~~~~~~~~~~~~~~~~

Use this page to send messages to users to test validity of their
addresses.

.. _admin-server-pool:

Server Pool
-----------

This page allows for the administration of the :doc:`server pool
</tutorial/server-pool>`.

.. _server-pool-servers:

``Servers``
~~~~~~~~~~~

The :guilabel:`Servers` tab allows Administators to view information
regarding servers in the pool, such as availability, as well as cancel
pending requests and recycle servers that have been terminated but
*not* returned to the pool. The :guilabel:`Servers` tab provides three
views:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - View
     - Description

   * - :guilabel:`Server List`

     - Lists servers in the pool and their availability (i.e. whether
       they are bound to a specific |mms| group or unbound). From this list,
       Administrators can terminate unbound servers.

       For servers bound to a group, owners of the group can terminate
       the servers from their :guilabel:`Deployment` view.

   * - :guilabel:`Pending Requests`
     - Lists the pending :doc:`requests
       </tutorial/request-servers-from-pool>`. Administrator can cancel
       pending requests from this view.

   * - :guilabel:`Recycle Bin`

     - Lists terminated servers that have not been returned to the
       pool. From this view, Administrator can recycle terminated
       servers to return them to the pool.

       If the list of terminated servers exceed the list displayed on
       the current page, :guilabel:`Recycle All` recycles *all*
       terminated servers in the recycle bin, not just the servers
       displayed on the current page.

.. seealso:: :ref:`server-pool-manage-server-pool`

.. _server-pool-server-request-options:

Servers Request Options
~~~~~~~~~~~~~~~~~~~~~~~

The :guilabel:`Servers Request Options` tab allows Administrators to
control which server options are displayed to the users when users make
a server request. These options are the properties and values specified
in the :asetting:`serverPoolPropertiesFile` file.

.. seealso:: :ref:`server-pool-manager-server-request-options`

.. _server-pool-agent-configuration:

Agent Configuration
~~~~~~~~~~~~~~~~~~~

The :guilabel:`Agent Configuration` tab displays the
:asetting:`serverPoolKey` needed to configure the Automation Agent for
a server to be added to the server pool.
