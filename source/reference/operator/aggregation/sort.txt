===================
$sort (aggregation)
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. pipeline:: $sort

   Sorts all input documents and returns them to the pipeline in sorted
   order.

   The :pipeline:`$sort` stage has the following prototype form:

   .. code-block:: javascript

      { $sort: { <field1>: <sort order>, <field2>: <sort order> ... } }

   :pipeline:`$sort` takes a document that specifies the field(s) to
   sort by and the respective sort order. ``<sort order>`` can have one
   of the following values:

   .. list-table::
      :header-rows: 1
      :widths: 35 65

      * - Value
        - Description

      * - ``1``
        - Sort ascending.

      * - ``-1``
        - Sort descending.

      * - ``{ $meta: "textScore" }``
        - Sort by the computed ``textScore`` metadata in descending
          order. See :ref:`sort-pipeline-metadata` for an example.

   If sorting on multiple fields, sort order is evaluated from left to
   right. For example, in the form above, documents are first sorted by
   ``<field1>``. Then documents with the same ``<field1>`` values are
   further sorted by ``<field2>``.

Examples
--------

.. _sort-pipeline-asc-desc:

Ascending/Descending Sort
~~~~~~~~~~~~~~~~~~~~~~~~~

For the field or fields to sort by, set the sort order to ``1`` or ``-1`` to
specify an ascending or descending sort respectively, as in the following example:

.. code-block:: javascript

   db.users.aggregate(
      [
        { $sort : { age : -1, posts: 1 } }
      ]
   )

This operation sorts the documents in the ``users`` collection,
in descending order according by the ``age`` field and then in
ascending order according to the value in the ``posts`` field.

.. include:: /includes/fact-sort-order.rst

For details on the comparison/sort order for specific types, see
:ref:`bson-types-comparison-order`.

.. _sort-pipeline-metadata:

Text Score Metadata Sort
~~~~~~~~~~~~~~~~~~~~~~~~~

For a pipeline that includes a :query:`$text` search, you can sort by
descending relevance score using the :expression:`{ $meta: "textScore"
} <$meta>` expression. In the ``{ <sort-key> }`` document, set the
:expression:`{ $meta: "textScore" } <$meta>` expression to an arbitrary
field name. The field name is ignored by the query system. For example:

.. code-block:: javascript

   db.users.aggregate(
      [
        { $match: { $text: { $search: "operating" } } },
        { $sort: { score: { $meta: "textScore" }, posts: -1 } }
      ]
   )

This operation uses the :query:`$text` operator to match the documents,
and then sorts first by the ``"textScore"`` metadata in descending
order, and then by the ``posts`` field in descending order. The
``score`` field name in the sort document is ignored by the query
system. In this pipeline, the ``"textScore"`` metadata is not included
in the projection and is not returned as part of the matching
documents. See :expression:`$meta` for more information.

.. _sort-and-memory:

``$sort`` Operator and Memory
-----------------------------

.. _sort-limit-sequence:

``$sort`` + ``$limit`` Memory Optimization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-agg-sort-limit.rst

.. include:: /includes/fact-optimizations-subject-to-change.rst

.. _sort-memory-limit:

``$sort`` and Memory Restrictions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :pipeline:`$sort` stage has a limit of 100 megabytes of RAM. By
default, if the stage exceeds this limit, :pipeline:`$sort` will
produce an error. To allow for the handling of large datasets, set the
``allowDiskUse`` option to ``true`` to enable :pipeline:`$sort`
operations to write to temporary files. See the ``allowDiskUse``
option in :method:`db.collection.aggregate()` method and the
:dbcommand:`aggregate` command for details.

``$sort`` Operator and Performance
----------------------------------

:pipeline:`$sort` operator can take advantage of an index as long as it
is not preceded by a :pipeline:`$project`, :pipeline:`$unwind`, or
:pipeline:`$group` stage.

.. todo:: if a sort precedes the first $group in a sharded system,
   all documents must go to the mongos for sorting.

.. seealso:: 
   :doc:`/tutorial/aggregation-zip-code-data-set`,
   :doc:`/tutorial/aggregation-with-user-preference-data`
