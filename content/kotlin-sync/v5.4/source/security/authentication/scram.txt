.. _kotlin-sync-auth-scram:

====================
SCRAM Authentication
====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: salt, default, code example

Overview
--------

**Salted Challenge Response Authentication Mechanism (SCRAM)** is a family of
authentication mechanisms that use a challenge-response mechanism to authenticate
the user. ``SCRAM-SHA-256``, which uses the ``SHA-256`` algorithm to hash your password, is the
default authentication mechanism in {+mdb-server+} version 4.0
and later. ``SCRAM-SHA-1``, which uses the ``SHA-1`` algorithm, is the default
authentication mechanism in {+mdb-server+} versions earlier than 4.0.

You can use ``SCRAM`` to authenticate to MongoDB Atlas, MongoDB
Enterprise Advanced, and MongoDB Community Edition.

.. tip:: SCRAM Mechanisms

   To learn more about the ``SCRAM`` family of authentication mechanisms, see
   `RFC 5802 <https://tools.ietf.org/html/rfc5802>`__ and
   :wikipedia:`Salted Challenge Response Authentication Mechanism <Salted_Challenge_Response_Authentication_Mechanism>`
   on Wikipedia.

   For more information about the MongoDB implementation of ``SCRAM``, see
   :manual:`SCRAM </core/security-scram>` in the {+mdb-server+} manual.

.. _kotlin-sync-auth-default:
.. _kotlin-sync-auth-scramsha256:

Specify SCRAM-SHA-256 Authentication
------------------------------------

``SCRAM-SHA-256``, as defined by `RFC 7677 <https://www.rfc-editor.org/rfc/rfc7677>`__, 
encrypts your username and password with the ``SHA-256`` algorithm to authenticate
your user. This is the default authentication mechanism.

The examples in this section show how to specify this default authentication
mechanism and use the following placeholder values:

- ``db_username``: Your MongoDB database username.
- ``db_password``: Your MongoDB database user's password.
- ``hostname``: The network address of your MongoDB deployment, open to your client.
- ``port``: The port number of your MongoDB deployment.
- ``authenticationDb``: The MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the default authentication mechanism by using a connection
      string, omit the mechanism as shown in the following example:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :start-after: start-default-cred-string
         :end-before: end-default-cred-string
         :dedent:
      
   .. tab::
      :tabid: MongoCredential

      To specify the default authentication mechanism by using the
      ``MongoCredential`` class, use the ``createCredential()`` method
      as shown in the following example:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :start-after: start-default-mongo-cred
         :end-before: end-default-mongo-cred
         :dedent:

Alternatively, you can explicitly specify the ``SCRAM-SHA-256`` authentication mechanism.
Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the ``SCRAM-SHA-256`` authentication mechanism by using a
      connection string, assign the ``authMechanism`` parameter the value
      ``SCRAM-SHA-256`` in your connection string as shown in the following example:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :dedent:
         :start-after: start-scramsha256-cred-string
         :end-before: end-scramsha256-cred-string

   .. tab::
      :tabid: MongoCredential

      To specify the default authentication mechanism by using the
      ``MongoCredential`` class, use the
      `createScramSha256Credential() <{+core-api+}/MongoCredential.html#createScramSha256Credential(java.lang.String,java.lang.String,char[])>`__
      method as shown in the following example:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :dedent:
         :start-after: start-scramsha256-mongo-cred
         :end-before: end-scramsha256-mongo-cred

.. _kotlin-sync-auth-scramsha1:

Specify SCRAM-SHA-1 Authentication
----------------------------------

``SCRAM-SHA-1``, as defined by `RFC 5802 <https://www.rfc-editor.org/rfc/rfc5802>`__, 
encrypts your username and password with the ``SHA-1`` algorithm to authenticate
your user.

The examples in this section show how to specify this authentication
mechanism and use the following placeholder values:

- ``db_username``: Your MongoDB database username.
- ``db_password``: Your MongoDB database user's password.
- ``hostname``: The network address of your MongoDB deployment, open to your client.
- ``port``: The port number of your MongoDB deployment.
- ``authenticationDb``: The MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying the ``SCRAM-SHA-1`` authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the ``SCRAM-SHA-1`` authentication mechanism by using a
      connection string, assign the ``authMechanism`` parameter the value
      ``SCRAM-SHA-1`` in your connection string as shown in the following example:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :dedent:
         :start-after: start-scramsha1-cred-string
         :end-before: end-scramsha1-cred-string

   .. tab::
      :tabid: MongoCredential

      To specify the default authentication mechanism by using the
      ``MongoCredential`` class, use the
      `createScramSha1Credential() <{+core-api+}/MongoCredential.html#createScramSha1Credential(java.lang.String,java.lang.String,char[])>`__
      method as shown in the following example:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :dedent:
         :start-after: start-scramsha1-mongo-cred
         :end-before: end-scramsha1-mongo-cred

Additional Information
----------------------

To learn more about authenticating to MongoDB, see
:manual:`Authentication </core/authentication/>` in the {+mdb-server+} manual.

To learn more about creating a ``MongoClient`` object by using the
{+driver-short+}, see the :ref:`kotlin-sync-mongoclient` guide.