# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/distributed-write-operations.txt:3
# 5d890f5245344e4181fe360c1466c6b8
msgid "Distributed Write Operations"
msgstr ""

#: ../source/core/distributed-write-operations.txt:10
# 6b13b2fd143c43239380fc1d5ba4118c
msgid "Write Operations on Sharded Clusters"
msgstr ""

#: ../source/core/distributed-write-operations.txt:12
# ab2d788d0cde4a9082eae8568dfcbf30
msgid "For sharded collections in a :term:`sharded cluster`, the :program:`mongos` directs write operations from applications to the shards that are responsible for the specific *portion* of the data set. The :program:`mongos` uses the cluster metadata from the :ref:`config database <sharding-config-server>` to route the write operation to the appropriate shards."
msgstr ""

#: ../source/core/distributed-write-operations.txt:21
# 2c559454e93f442b97f30685e6040f0e
msgid "MongoDB partitions data in a sharded collection into *ranges* based on the values of the :term:`shard key`. Then, MongoDB distributes these chunks to shards. The shard key determines the distribution of chunks to shards. This can affect the performance of write operations in the cluster."
msgstr ""

#: ../source/core/distributed-write-operations.txt:29
# f007b8bc76894fdc8515df8648edbfde
msgid "Update operations that affect a *single* document **must** include the :term:`shard key` or the ``_id`` field. Updates that affect multiple documents are more efficient in some situations if they have the :term:`shard key`, but can be broadcast to all shards."
msgstr ""

#: ../source/core/distributed-write-operations.txt:35
# 08fc700c53c04e98a0d0f114e3a21a01
msgid "If the value of the shard key increases or decreases with every insert, all insert operations target a single shard. As a result, the capacity of a single shard becomes the limit for the insert capacity of the sharded cluster."
msgstr ""

#: ../source/core/distributed-write-operations.txt:40
# e5a116980e9f43b683671c039dc9d2f9
msgid "For more information, see :doc:`/administration/sharded-clusters` and :ref:`write-operations-bulk-insert`."
msgstr ""

#: ../source/core/distributed-write-operations.txt:46
# dd37b8702f284e3a99d5eb86f39df846
msgid "Write Operations on Replica Sets"
msgstr ""

#: ../source/core/distributed-write-operations.txt:48
# 0a3465d05f254cf4a69ab396a3cf680f
msgid "In :term:`replica sets <replica set>`, all write operations go to the set's :term:`primary`, which applies the write operation then records the operations on the primary's operation log or :term:`oplog`. The oplog is a reproducible sequence of operations to the data set. :term:`Secondary` members of the set are continuously replicating the oplog and applying the operations to themselves in an asynchronous process."
msgstr ""

#: ../source/core/distributed-write-operations.txt:58
# 3e14dc500c6f485db2906c1385022790
msgid "Large volumes of write operations, particularly bulk operations, may create situations where the secondary members have difficulty applying the replicating operations from the primary at a sufficient rate: this can cause the secondary's state to fall behind that of the primary. Secondaries that are significantly behind the primary present problems for normal operation of the replica set, particularly :ref:`failover <replica-set-failover-administration>` in the form of :ref:`rollbacks <replica-set-rollback>` as well as general :doc:`read consistency </applications/replication>`."
msgstr ""

#: ../source/core/distributed-write-operations.txt:68
# 39dfba800ae5409d9c9bcbd6e702b44a
msgid "To help avoid this issue, you can customize the :ref:`write concern <write-operations-write-concern>` to return confirmation of the write operation to another member [#write-concern-throttling]_ of the replica set every 100 or 1,000 operations. This provides an opportunity for secondaries to catch up with the primary. Write concern can slow the overall progress of write operations but ensure that the secondaries can maintain a largely current state with respect to the primary."
msgstr ""

#: ../source/core/distributed-write-operations.txt:78
# 96d76b553800444e83315a47c7449a19
msgid "For more information on replica sets and write operations, see :ref:`replica-set-write-concern`, :ref:`replica-set-oplog-sizing`, and :doc:`/tutorial/change-oplog-size`."
msgstr ""

#: ../source/core/distributed-write-operations.txt:82
# 06415bca8f704d578eabdd20991c0534
msgid "Intermittently issuing a write concern with a ``w`` value of ``2`` or ``majority`` will slow the throughput of write traffic; however, this practice will allow the secondaries to remain current with the state of the primary."
msgstr ""

#: ../source/includes/fact-master-slave-majority.rst:1
# d86d599937ff4adcbb7bce66bb748974
msgid "In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats ``w: \"majority\"`` as equivalent to ``w: 1``. In earlier versions of MongoDB, ``w: \"majority\"`` produces an error in :doc:`master/slave </core/master-slave>` deployments."
msgstr ""

