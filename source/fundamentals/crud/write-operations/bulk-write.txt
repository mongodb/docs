.. _csharp-bulk-write:

=====================
Bulk Write Operations
=====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: insert, update, replace, code example, multiple changes

Overview
--------

In this guide, you can learn how to perform multiple write operations in
a single database call by using **bulk write operations**.

Consider a scenario in which you want to insert a document,
update multiple other documents, then delete a document. If you use
individual methods, each operation requires its own database call.

By using a bulk write operation, you can perform multiple write operations in
fewer database calls. You can perform bulk write operations at the following levels:

- :ref:`Collection <csharp-coll-bulk-write>`: You can use the 
  ``IMongoCollection.BulkWrite()`` or
  ``IMongoCollection.BulkWriteAsync()`` method to perform bulk write
  operations on a single collection. These methods make a database call
  for each type of write operation. For example, the methods perform
  multiple update operations in one call, but make two separate calls to
  the database for an insert operation and a replace operation.

- :ref:`Client <csharp-client-bulk-write>`: If your application connects to
  {+mdb-server+} version 8.0 or later, you can use the ``IMongoClient.BulkWrite()``
  or ``IMongoClient.BulkWriteAsync()`` method to perform bulk write
  operations on multiple collections and databases in the same cluster.
  This method performs all write operations in one database call.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``sample_restaurants.restaurants``
and ``sample_mflix.movies`` collections from the :atlas:`Atlas sample
datasets </sample-data>`. To learn how to create a free MongoDB Atlas
cluster and load the sample datasets, see the :atlas:`Get Started with
Atlas </getting-started>` guide.

.. tip:: Bulk Write Operations with POCOs

   The examples in this guide use the ``BsonDocument`` type for the ``TDocument`` type
   in all generic classes. You can also use a Plain Old CLR Object (POCO) for these
   classes. To do so, you must define a class that represents the documents in your
   collection. The class must have properties that match the fields in your documents.
   For more information, see :ref:`csharp-poco`.

.. _csharp-coll-bulk-write:

Collection Bulk Write
---------------------

Bulk write operations contain one or more write operations. For each
write operation you want to perform, create an instance of one of
the following ``WriteModel<TDocument>`` classes:

- ``DeleteManyModel<TDocument>``
- ``DeleteOneModel<TDocument>``
- ``InsertOneModel<TDocument>``
- ``ReplaceOneModel<TDocument>``
- ``UpdateManyModel<TDocument>``
- ``UpdateOneModel<TDocument>``

The following sections show how to create and use instances of the preceding classes
to perform the corresponding write operation in a bulk write
operation. The :ref:`csharp-coll-bulkwrite-method` section 
demonstrates how to pass a list of models to the ``BulkWrite()`` or
``BulkWriteAsync()`` method to perform the bulk operation.

Insert Operations
~~~~~~~~~~~~~~~~~

To perform an insert operation, create an ``InsertOneModel<TDocument>``
instance and specify the document you want to insert.

The following example creates an instance of the
``InsertOneModel<BsonDocument>`` class. This instance directs the driver to
insert a document in which the ``"name"`` field is ``"Mongo's Deli"``
into the ``restaurants`` collection.

.. literalinclude:: /includes/fundamentals/code-examples/CollectionBulkWrite.cs
   :start-after: start-insert-one
   :end-before: end-insert-one
   :language: csharp
   :copyable:
   :dedent:

To insert multiple documents, create an instance of ``InsertOneModel<TDocument>``
for each document.

.. important:: Duplicate Key Error

   When performing a bulk operation, the ``InsertOneModel<TDocument>`` cannot
   insert a document with an ``_id`` that already exists in the
   collection. In this situation, the driver throws a
   ``MongoBulkWriteException``.

Update Operations
~~~~~~~~~~~~~~~~~

To update a single document, create an instance of
``UpdateOneModel<TDocument>`` and pass the following arguments:

- **Query filter** that specifies the criteria used to match documents
  in your collection. To learn more about specifying a query, see
  :manual:`Query and Projection Operators
  </reference/operator/query/>` in the {+mdb-server+} manual.

- **Update document** that describes the update to perform. To learn
  more about specifying an update, see :manual:`Update Operators
  </reference/operator/update/>` in the {+mdb-server+} manual.

An ``UpdateOneModel<TDocument>`` instance specifies an update for *the first*
document that matches your query filter.

In the following code example, the ``UpdateOneModel<BsonDocument>`` object
represents an update operation on the ``restaurants`` collection.
The operation matches the first document in the collection where the value of the ``name``
field is ``"Mongo's Deli"``. It then updates the value of the ``cuisine`` field in the
matched document to ``"Sandwiches and Salads"``.

.. literalinclude:: /includes/fundamentals/code-examples/CollectionBulkWrite.cs
   :start-after: start-update-one
   :end-before: end-update-one
   :language: csharp
   :copyable:
   :dedent:

To update multiple documents, create an instance of ``UpdateManyModel<TDocument>`` and pass
the same arguments as for ``UpdateOneModel<TDocument>``. The ``UpdateManyModel<TDocument>``
class specifies updates for *all* documents that match your query
filter.

In the following code example, the ``UpdateManyModel<BsonDocument>`` object
represents an update operation on the ``restaurants`` collection.
The operation matches all documents in the collection where
the value of the ``name`` field is ``"Mongo's Deli"``. It then updates
the value of the ``cuisine`` field to ``"Sandwiches and Salads"``.

.. literalinclude:: /includes/fundamentals/code-examples/CollectionBulkWrite.cs
   :start-after: start-update-many
   :end-before: end-update-many
   :language: csharp
   :copyable:
   :dedent:

Replace Operations
~~~~~~~~~~~~~~~~~~

A replace operation removes all fields and values of a specified document and
replaces them with new fields and values that you specify. To perform a
replace operation, create an instance of ``ReplaceOneModel<TDocument>`` and pass a
query filter and the fields and values you want to replace the matching
document with.

In the following example, the ``ReplaceOneModel<BsonDocument>`` object
represents a replace operation on the ``restaurants`` collection.
The operation matches the document in the collection
where the value of the ``restaurant_id`` field is ``"1234"``. It then
removes all fields other than ``_id`` from this document, and sets new values in the
``name``, ``cuisine``, ``borough``, and ``restaurant_id`` fields.

.. literalinclude:: /includes/fundamentals/code-examples/CollectionBulkWrite.cs
   :start-after: start-replace-one
   :end-before: end-replace-one
   :language: csharp
   :copyable:
   :dedent:

To replace multiple documents, you must create an instance of
``ReplaceOneModel<TDocument>`` for each document.

Delete Operations
~~~~~~~~~~~~~~~~~

To delete a document, create an instance of ``DeleteOneModel<TDocument>`` and pass a
query filter specifying the document you want to delete. A
``DeleteOneModel<TDocument>`` instance provides instructions to delete
only *the first* document that matches your query filter.

In the following code example, the ``DeleteOneModel<BsonDocument>`` object
represents a delete operation on the ``restaurants`` collection.
The operation matches and deletes the first document
where the value of the ``restaurant_id`` field is ``"5678"``.

.. literalinclude:: /includes/fundamentals/code-examples/CollectionBulkWrite.cs
   :start-after: start-delete-one
   :end-before: end-delete-one
   :language: csharp
   :copyable:
   :dedent:

To delete multiple documents, create an instance of ``DeleteManyModel<TDocument>`` and pass a
query filter specifying the documents you want to delete. An instance of
``DeleteManyModel<TDocument>`` provides instructions to remove *all* documents that
match your query filter.

In the following code example, the ``DeleteManyModel<BsonDocument>`` object
represents a delete operation on the ``restaurants`` collection.
The operation matches and deletes all documents
where the value of the ``name`` field is ``"Mongo's Deli"``.

.. literalinclude:: /includes/fundamentals/code-examples/CollectionBulkWrite.cs
   :start-after: start-delete-many
   :end-before: end-delete-many
   :language: csharp
   :copyable:
   :dedent:

.. _csharp-coll-bulkwrite-method:

Perform the Bulk Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~

After you define a ``WriteModel`` instance for each operation that you want to perform,
create an instance of a class that implements the ``IEnumerable`` interface. Add your
``WriteModel`` objects to this ``IEnumerable``, then pass the ``IEnumerable``
to the ``BulkWrite()`` or ``BulkWriteAsync()`` method. By default, these methods run
the operations in the order they're defined in the list.

.. tip:: IEnumerable

   ``Array`` and ``List`` are two common classes that implement the
   ``IEnumerable`` interface.

Select from the following tabs to view how to use the synchronous ``BulkWrite()`` method
and the asynchronous ``BulkWriteAsync()`` method to perform a bulk write
operation on the ``restaurants`` collection:

.. tabs::

   .. tab:: Synchronous
      :tabid: bulk-write-sync

      .. literalinclude:: /includes/fundamentals/code-examples/CollectionBulkWrite.cs
         :start-after: start-bulk-write-sync
         :end-before: end-bulk-write-sync
         :language: csharp
         :copyable:
         :dedent:

   .. tab:: Asynchronous
      :tabid: bulk-write-async

      .. literalinclude:: /includes/fundamentals/code-examples/CollectionBulkWrite.cs
         :start-after: start-bulk-write-async
         :end-before: end-bulk-write-async
         :language: csharp
         :copyable:
         :dedent:

The preceding code examples produce the following output:

.. code-block:: shell
   :copyable: false

   MongoDB.Driver.BulkWriteResult1+Acknowledged[MongoDB.Bson.BsonDocument]

.. note::

   When the driver runs a bulk operation, it uses the write concern of the
   target collection. The driver reports all write concern errors after
   attempting all operations, regardless of execution order.

Customize Bulk Write Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you call the ``BulkWrite()`` or ``BulkWriteAsync()`` method, you can pass an
instance of the ``BulkWriteOptions`` class. The ``BulkWriteOptions`` class
contains the following properties, which represent options you can use to configure the
bulk write operation:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``BypassDocumentValidation``
     - | Specifies whether the operation bypasses document-level validation. For more
         information, see :manual:`Schema
         Validation </core/schema-validation/#schema-validation>` in the {+mdb-server+}
         manual.
       | Defaults to ``False``.

   * - ``Comment``
     - | A comment to attach to the operation, in the form of a ``BsonValue``. For
         more information, see the :manual:`delete command
         fields </reference/command/delete/#command-fields>` guide in the
         {+mdb-server+} manual.

   * - ``IsOrdered``
     - | If ``True``, the driver performs the write operations in the order
         provided. If an error occurs, the remaining operations are not
         attempted. 
       |
       | If ``False``, the driver performs the operations in an
         arbitrary order and attempts to perform all operations. If any of the write
         operations in an unordered bulk write fail, the driver
         reports the errors only after attempting all operations.
       | Defaults to ``True``.

   * - ``Let``
     - | A map of parameter names and values, in the form of a ``BsonDocument``. Values
         must be constant or closed
         expressions that don't reference document fields. For more information,
         see the :manual:`let statement
         </reference/command/delete/#std-label-delete-let-syntax>` in the
         {+mdb-server+} manual.

The following code examples use a ``BulkWriteOptions`` object to perform
an unordered bulk write operation:

.. tabs::

   .. tab:: Synchronous
      :tabid: bulk-write-options-sync

      .. literalinclude:: /includes/fundamentals/code-examples/CollectionBulkWrite.cs
        :start-after: start-bulk-write-options-sync
        :end-before: end-bulk-write-options-sync
        :language: csharp
        :copyable:
        :dedent:

   .. tab:: Asynchronous
      :tabid: bulk-write-options-async

      .. literalinclude:: /includes/fundamentals/code-examples/CollectionBulkWrite.cs
         :start-after: start-bulk-write-options-async
         :end-before: end-bulk-write-options-async
         :language: csharp
         :copyable:
         :dedent:

Return Value
~~~~~~~~~~~~

The ``BulkWrite()`` and ``BulkWriteAsync()`` methods return a
``BulkWriteResult`` object that contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``IsAcknowledged``
     - | Indicates whether the server acknowledged the bulk write operation. If the
         value of this property is ``False`` and you try to access any other property
         of the ``BulkWriteResult`` object, the driver throws an exception.
   
   * - ``DeletedCount``
     - | The number of documents deleted, if any.
   
   * - ``InsertedCount``
     - | The number of documents inserted, if any.

   * - ``MatchedCount``
     - | The number of documents matched for an update, if applicable.

   * - ``ModifiedCount``
     - | The number of documents modified, if any.

   * - ``IsModifiedCountAvailable``
     - | Indicates whether the modified count is available.

   * - ``Upserts``
     - | A list that contains information about each request that
         resulted in an upsert operation.
   
   * - ``RequestCount``
     - | The number of requests in the bulk operation.

Handling Exceptions
~~~~~~~~~~~~~~~~~~~

If any of the operations in a bulk write operation fail, the {+driver-short+} throws a
``BulkWriteError`` and does not perform any further operations.

A ``BulkWriteError`` object contains the ``Index`` property that
describes the index of the request that resulted in an error.

.. _csharp-client-bulk-write:

Client Bulk Write
-----------------

When connecting to a deployment running {+mdb-server+} 8.0 or later,
you can use the ``IMongoClient.BulkWrite()`` or
``IMongoClient.BulkWriteAsync()`` method to write 
to multiple databases and collections in the same cluster. These
methods perform all write operations in a single call.

For each write operation you want to perform, create an instance of one of
the following ``BulkWriteModel`` classes:

- ``BulkWriteInsertOneModel<TDocument>``
- ``BulkWriteUpdateOneModel<TDocument>``
- ``BulkWriteUpdateManyModel<TDocument>``
- ``BulkWriteReplaceOneModel<TDocument>``
- ``BulkWriteDeleteOneModel<TDocument>``
- ``BulkWriteDeleteManyModel<TDocument>``

The following sections show how to create and use instances of the
preceding classes to perform the corresponding write operation in a bulk
write. The :ref:`csharp-client-bulkwrite-method` section  
demonstrates how to pass a list of models to the ``BulkWrite()`` or
``BulkWriteAsync()`` method to perform the bulk operation.

Insert Operations
~~~~~~~~~~~~~~~~~

To perform an insert operation, create an instance of the
``BulkWriteInsertOneModel<TDocument>`` class.
The ``BulkWriteInsertOneModel<TDocument>`` constructor accepts the
following parameters:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Parameter
     - Description
   
   * - ``collectionNamespace``
     - | The database and collection to insert the BSON document into.
       |
       | **Data Type:** {+string-data-type+} or `CollectionNamespace <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.CollectionNamespace.html>`__

   * - ``document``
     - | The document to insert into the collection.
       |
       | **Data Type:** ``TDocument``

The following example creates instances of the ``BulkWriteInsertOneModel<TDocument>``
class. These instances direct the driver to insert documents into the
``sample_restaurants.restaurants`` and ``sample_mflix.movies`` collections.

.. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
   :start-after: start-bulk-insert-one
   :end-before: end-bulk-insert-one
   :language: csharp
   :copyable:
   :dedent:

Update Operations
~~~~~~~~~~~~~~~~~

To update a single document, create an instance of the ``BulkWriteUpdateOneModel<TDocument>``
class. The ``BulkWriteUpdateOneModel<TDocument>`` constructor accepts the following
parameters:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Parameter
     - Description
   
   * - ``collectionNamespace``
     - | The database and collection to insert the BSON document into.
       |
       | **Data Type:** {+string-data-type+} or `CollectionNamespace <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.CollectionNamespace.html>`__

   * - ``filter``
     - | The **query filter** that specifies the criteria used to match documents in your collection.
         The ``UpdateOne`` operation updates *only the first document* that matches the
         query filter.
       |
       | **Data Type:** `FilterDefinition<TDocument> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.FilterDefinition-1.html>`__

   * - ``update``
     - | The update operation you want to perform. For more information about update
         operations, see :manual:`Field Update Operators </reference/operator/update-field/>`
         in the {+mdb-server+} manual.
       |
       | **Data Type:** `UpdateDefinition<TDocument> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateDefinition-1.html>`__

   * - ``collation``
     - | *Optional.* The language collation to use when sorting results. See the
         :manual:`{+mdb+server+} manual</reference/command/delete/#std-label-deletes-array-collation>`
         for more information.
       |
       | **Data Type:** `Collation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Collation.html>`__
       | **Default:** ``null``
   
   * - ``hint``
     - | *Optional.* The index to use to scan for documents. 
         See the :manual:`{+mdb-server+} manual</reference/command/update/#std-label-update-command-hint>`
         for more information.
       |
       | **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__
       | **Default:** ``null``

   * - ``isUpsert``
     - | *Optional.* Specifies whether the update operation performs an upsert operation if no 
         documents match the query filter. See the :manual:`{+mdb-server+} manual</reference/command/update/#std-label-update-command-upsert>`
         for more information.
       |
       | **Data Type:** {+bool-data-type+}
       | **Default:** ``false``

   * - ``arrayFilters``
     - | Specifies which array elements to modify for an update operation on an array field.
         See the :manual:`{+mdb-server+} manual</reference/command/update/#update-elements-match-arrayfilters-criteria>`
         for more information.
       |
       | **Data Type:** `IEnumerable<ArrayFilterDefinition> <https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1?view=net-8.0>`__ 
       | **Default:** ``null``

In the following code example, the ``BulkWriteUpdateOneModel<BsonDocument>`` objects
represent update operations on the ``sample_restaurants.restaurants``
and ``sample_mflix.movies`` collections.

.. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
   :start-after: start-bulk-update-one
   :end-before: end-bulk-update-one
   :language: csharp
   :copyable:
   :dedent:

To update multiple documents, create an instance of the
``BulkWriteUpdateManyModel<TDocument>`` class. The constructor for this class
accepts the same parameters as the ``BulkWriteUpdateOneModel<TDocument>`` constructor.
The ``BulkWriteUpdateManyModel<TDocument>``
operation updates *all documents* that match your query filter.

In the following code example, the ``BulkWriteUpdateManyModel<BsonDocument>`` object
represents an update operation on the ``sample_restaurants.restaurants`` collection.
The operation matches all documents in the collection where
the value of the ``name`` field is ``"Starbucks"``. It then updates
the value of the ``cuisine`` field to ``"Coffee (Chain)"``.

.. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
   :start-after: start-bulk-update-many
   :end-before: end-bulk-update-many
   :language: csharp
   :copyable:
   :dedent:

Replace Operations
~~~~~~~~~~~~~~~~~~

To replace the fields in a document, create an instance of the
``BulkWriteReplaceOneModel<TDocument>`` class. The ``BulkWriteReplaceOneModel<TDocument>``
constructor accepts the following parameters:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Parameter
     - Description
   
   * - ``collectionNamespace``
     - | The database and collection to insert the BSON document into.
       |
       | **Data Type:** {+string-data-type+} or `CollectionNamespace <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.CollectionNamespace.html>`__

   * - ``filter``
     - | The **query filter** that specifies the criteria used to match documents in your collection.
         The ``UpdateOne`` operation updates *only the first document* that matches the
         query filter.
       |
       | **Data Type:** `FilterDefinition<TDocument> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.FilterDefinition-1.html>`__

   * - ``replacement``
     - | The replacement document, which specifies the fields and values to insert in the
         target document.
       |
       | **Data Type:** ``TDocument``

   * - ``collation``
     - | *Optional.* The language collation to use when sorting results. See
         the :manual:`{+mdb-server+} manual</reference/command/delete/#std-label-deletes-array-collation>`
         for more information.
       |
       | **Data Type:** `Collation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Collation.html>`__
       | **Default:** ``null``
   
   * - ``hint``
     - | *Optional.* The index to use to scan for documents. 
         See the :manual:`{+mdb-server+} manual</reference/command/update/#std-label-update-command-hint>`
         for more information.
       |
       | **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__
       | **Default:** ``null``

   * - ``isUpsert``
     - | *Optional.* Specifies whether the update operation performs an upsert operation if no 
         documents match the query filter. 
         See the :manual:`{+mdb-server+} manual</reference/command/update/#std-label-update-command-upsert>`
         for more information.
       |
       | **Data Type:** {+bool-data-type+}
       | **Default:** ``false``

In the following example, the ``BulkWriteReplaceOneModel<BsonDocument>`` objects
represent replace operations on the ``sample_restaurants.restaurants``
and ``sample_mflix.movies`` collections.

.. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
   :start-after: start-bulk-replace-one
   :end-before: end-bulk-replace-one
   :language: csharp
   :copyable:
   :dedent:

Delete Operations
~~~~~~~~~~~~~~~~~

To delete a document, create an instance of the ``BulkWriteDeleteOneModel<TDocument>``
class. The ``BulkWriteDeleteOneModel<TDocument>`` constructor accepts the following
parameters:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Parameter
     - Description
   
   * - ``collectionNamespace``
     - | The database and collection to insert the BSON document into.
       |
       | **Data Type:** {+string-data-type+} or `CollectionNamespace <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.CollectionNamespace.html>`__

   * - ``filter``
     - | The **query filter** that specifies the criteria used to match documents in your collection.
         The ``DeleteOne`` operation deletes *only the first document* that matches the
         query filter.
       |
       | **Data Type:** `FilterDefinition<TDocument> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.FilterDefinition-1.html>`__

   * - ``collation``
     - | *Optional.* The language collation to use when sorting results. See
         the :manual:`{+mdb-server+} manual</reference/command/delete/#std-label-deletes-array-collation>`
         for more information.
       |
       | **Data Type:** `Collation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Collation.html>`__
       | **Default:** ``null``
   
   * - ``hint``
     - | *Optional.* The index to use to scan for documents. 
         See the :manual:`{+mdb-server+} manual</reference/command/update/#std-label-update-command-hint>`
         for more information.
       |
       | **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__
       | **Default:** ``null``

In the following code example, the ``BulkWriteDeleteOneModel<BsonDocument>`` objects
represent delete operations on the ``sample_restaurants.restaurants``
and ``sample_mflix.movies`` collections.

.. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
   :start-after: start-bulk-delete-one
   :end-before: end-bulk-delete-one
   :language: csharp
   :copyable:
   :dedent:

To delete multiple documents, create an instance of the ``BulkWriteDeleteManyModel<TDocument>``
class and pass a query filter that specifies the document that you want to delete.
The ``DeleteMany`` operation removes *all documents* that match your
query filter.

In the following code example, the ``BulkWriteDeleteManyModel<BsonDocument>`` object
represents a delete operation on the ``sample_restaurants.restaurants`` collection.
The operation matches and deletes all documents
where the value of the ``name`` field is ``"Mongo's Deli"``.

.. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
   :start-after: start-bulk-delete-many
   :end-before: end-bulk-delete-many
   :language: csharp
   :copyable:
   :dedent:

.. _csharp-client-bulkwrite-method:

Perform the Bulk Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~

After you define a ``BulkWriteModel`` instance for each operation that you want to perform,
create an instance of a class that implements the ``IReadOnlyList`` interface. Add your
``BulkWriteModel`` objects to this ``IReadOnlyList``, then pass the ``IReadOnlyList``
to the ``BulkWrite()`` or ``BulkWriteAsync()`` method. By default, these methods run
the operations in the order they're defined in the collection.

.. tip:: IReadOnlyList

   ``Array`` and ``List`` are two common classes that implement the ``IReadOnlyList``
   interface.

Select from the following tabs to view how to use the synchronous ``BulkWrite()`` method
and the asynchronous ``BulkWriteAsync()`` method to perform a bulk write
operation on multiple namespaces.

.. tabs::

   .. tab:: Synchronous
      :tabid: bulk-write-sync

      .. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
         :start-after: start-bulk-write-sync
         :end-before: end-bulk-write-sync
         :language: csharp
         :copyable:
         :dedent:

   .. tab:: Asynchronous
      :tabid: bulk-write-async

      .. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
         :start-after: start-bulk-write-async
         :end-before: end-bulk-write-async
         :language: csharp
         :copyable:
         :dedent:

The preceding code examples produce the following output:

.. code-block:: shell
      
   BulkWriteResult({'writeErrors': [], 'writeConcernErrors': [], 'nInserted': 2, 'nUpserted': 0, 'nMatched': 2, 'nModified': 2, 'nRemoved': 1, 'upserted': []}, acknowledged=True)

.. _csharp-client-bulk-write-options:

Customize Bulk Write
~~~~~~~~~~~~~~~~~~~~

When you call the ``BulkWrite()`` or ``BulkWriteAsync()`` method, you can pass an
instance of the ``ClientBulkWriteOptions`` class. The ``ClientBulkWriteOptions`` class
contains the following properties, which represent options you can use to configure the
bulk write operation:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``BypassDocumentValidation``
     - | Specifies whether the operation bypasses document-level validation. For more
         information, see :manual:`Schema
         Validation </core/schema-validation/#schema-validation>` in the {+mdb-server+}
         manual.
       | Defaults to ``false``.

   * - ``Comment``
     - | A comment to attach to the operation, in the form of a ``BsonValue``. For
         more information, see the :manual:`delete command
         fields </reference/command/delete/#command-fields>` guide in the
         {+mdb-server+} manual.

   * - ``IsOrdered``
     - | If ``true``, the driver performs the write operations in the order
         provided. If an error occurs, the remaining operations are not
         attempted. 
       |
       | If ``false``, the driver performs the operations in an
         arbitrary order and attempts to perform all operations. If any of the write
         operations in an unordered bulk write fail, the driver
         reports the errors only after attempting all operations.
       | Defaults to ``True``.

   * - ``Let``
     - | A map of parameter names and values, in the form of a ``BsonDocument``. Values
         must be constant or closed
         expressions that don't reference document fields. For more information,
         see the :manual:`let statement
         </reference/command/delete/#std-label-delete-let-syntax>` in the
         {+mdb-server+} manual.
    
   * - ``VerboseResult``
     - | Specifies whether the ``ClientBulkWriteResult`` object returned by the operation
         includes detailed results for each successful write operation.
       | Defaults to ``false``.

   * - ``WriteConcern``
     - | The write concern to use for the write operation, as a value from the ``WriteConcern``
         enum.
       | Defaults to the write concern of the collection on which the operation is running.

The following code examples use a ``ClientBulkWriteOptions`` object to
customize the bulk write operation:

.. tabs::

   .. tab:: Synchronous
      :tabid: bulk-write-options-sync

      .. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
        :start-after: start-bulk-write-options-sync
        :end-before: end-bulk-write-options-sync
        :language: csharp
        :copyable:
        :dedent:

   .. tab:: Asynchronous
      :tabid: bulk-write-options-async

      .. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
         :start-after: start-bulk-write-options-async
         :end-before: end-bulk-write-options-async
         :language: csharp
         :copyable:
         :dedent:

Return Value
~~~~~~~~~~~~

The ``BulkWrite()`` and ``BulkWriteAsync()`` methods return a ``ClientBulkWriteResult``
object that contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``Acknowledged``
     - | Indicates whether the server acknowledged the bulk write operation. If the
         value of this property is ``false`` and you try to access any other property
         of the ``ClientBulkWriteResult`` object, the driver throws an exception.

   * - ``DeleteResults``
     - | An ``IReadOnlyDictionary<int, BulkWriteDeleteResult>`` object containing the
         results of each successful delete operation, if any.
   
   * - ``DeletedCount``
     - | The number of documents deleted, if any.

   * - ``InsertResults``
     - | An ``IReadOnlyDictionary<int, BulkWriteInsertOneResult>`` object containing the
         results of each successful insert operation, if any.
   
   * - ``InsertedCount``
     - | The number of documents inserted, if any.

   * - ``MatchedCount``
     - | The number of documents matched for an update, if applicable.

   * - ``ModifiedCount``
     - | The number of documents modified, if any.

   * - ``UpsertResults``
     - | An ``IReadOnlyDictionary<int, BulkWriteUpdateResult>`` object containing the
         results of each successful update operation, if any.
   
   * - ``UpsertedCount``
     - | The number of documents upserted, if any.

Handling Exceptions
~~~~~~~~~~~~~~~~~~~

If any of the operations in a bulk write operation fail, the {+driver-short+} throws a
``ClientBulkWriteException`` and does not perform any further operations.

A ``ClientBulkWriteException`` object contains the following properties:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Property
     - Description
   * - ``connectionId``
     - | The connection identifier.
       |
       | **Data Type:** `ConnectionId <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Core.Connections.ConnectionId.html>`__
   * - ``message``
     - | The error message.
       |
       | **Data Type:** string
   * - ``writeErrors``
     - | A dictionary of errors that occurred during the bulk write operation.
       |
       | **Data Type:** IReadOnlyDictionary<int, `WriteError <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.WriteError.html>`__>
   * - ``partialResult``
     - | The results of any successful operations performed before the exception was thrown.
       |
       | **Data Type:** `ClientBulkWriteResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ClientBulkWriteResult.html>`__
   * - ``writeConcernErrors``
     - | Write concern errors that occurred during execution of the bulk write operation.
       |
       | **Data Type:** IReadOnlyList<`MongoWriteConcernException <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.MongoWriteConcernException.html>`__>
   * - ``innerException``
     - | The inner exception.
       |
       | **Data Type:** `Exception <https://learn.microsoft.com/dotnet/api/system.exception>`__

Additional Information
----------------------

To learn how to perform individual write operations, see the following guides:

- :ref:`csharp-update-one`
- :ref:`csharp-update-many`
- :ref:`csharp-insert-guide`
- :ref:`csharp-delete-guide`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- Collection Bulk Write

  - `BulkWrite() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.BulkWrite.html>`__
  - `BulkWriteAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.BulkWriteAsync.html>`__
  - `BulkWriteOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteOptions.-ctor.html>`__
  - `BulkWriteResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteResult.html>`__
  - `InsertOneModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.InsertOneModel-1.html>`__
  - `UpdateOneModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateOneModel-1.html>`__
  - `UpdateManyModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateManyModel-1.html>`__
  - `ReplaceOneModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ReplaceOneModel-1.html>`__
  - `DeleteOneModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.DeleteOneModel-1.html>`__
  - `DeleteManyModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.DeleteManyModel-1.html>`__
  - `BulkWriteError <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteError.html>`__

- Client Bulk Write

  - `BulkWrite() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoClient.BulkWrite.html>`__
  - `BulkWriteAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoClient.BulkWriteAsync.html>`__
  - `ClientBulkWriteOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ClientBulkWriteOptions.html>`__
  - `ClientBulkWriteResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ClientBulkWriteResult.html>`__
  - `BulkWriteInsertOneModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteInsertOneModel-1.html>`__
  - `BulkWriteUpdateOneModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteUpdateOneModel-1.html>`__
  - `BulkWriteUpdateManyModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteUpdateManyModel-1.html>`__
  - `BulkWriteReplaceOneModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteReplaceOneModel-1.html>`__
  - `BulkWriteDeleteOneModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteDeleteOneModel-1.html>`__
  - `BulkWriteDeleteManyModel <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteDeleteManyModel-1.html>`__
  - `BulkWriteInsertOneResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteInsertOneResult.html>`__
  - `BulkWriteUpdateResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteUpdateResult.html>`__
  - `BulkWriteDeleteResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.BulkWriteDeleteResult.html>`__
  - `ClientBulkWriteException <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ClientBulkWriteException.html>`__
