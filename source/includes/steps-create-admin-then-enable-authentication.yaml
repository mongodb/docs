title: Start MongoDB without access control.
stepnum: 1
level: 4
ref: start-without-auth
pre: |

   Start a standalone :binary:`~bin.mongod` instance without access
   control.
  
   For example, open a terminal and issue the following:

action:
  language: sh
  code: |
    mongod --port 27017 --dbpath /var/lib/mongodb
---
stepnum: 2
title: Connect to the instance.
level: 4
ref: connect
pre: |

   For example, open a new terminal and connect a :binary:`~bin.mongo`
   shell to the instance:

action:
  language: sh
  code: |
    mongo --port 27017 
post: |
   Specify additional command line options as appropriate to connect the
   :binary:`~bin.mongo` shell to your deployment, such as ``--host``.
---
stepnum: 3
title: Create the user administrator.
level: 4
ref: create-user-admin
pre: |

  From the :binary:`~bin.mongo` shell, add a user with the
  :authrole:`userAdminAnyDatabase` role in the ``admin`` database. Include additional roles as
  needed for this user. For example, the following
  creates the user ``myUserAdmin`` in the ``admin`` database with the
  :authrole:`userAdminAnyDatabase` role and the
  :authrole:`readWriteAnyDatabase` role.

action:
  pre: |

    .. tip::

       .. include:: /includes/extracts/4.2-changes-passwordPrompt.rst

  language: javascript
  code: |
    use admin
    db.createUser(
      {
        user: "myUserAdmin",
        pwd: passwordPrompt(), // or cleartext password
        roles: [ { role: "userAdminAnyDatabase", db: "admin" }, "readWriteAnyDatabase" ]
      }
    )
post: |
   .. note::
      The database where you create the user (in this example,
      ``admin``) is the user's :ref:`authentication database
      <user-authentication-database>`. Although the user would
      authenticate to this database, the user can
      have roles in other databases; i.e. the user's authentication
      database does not limit the user's privileges.
---
title: Re-start the MongoDB instance with access control.
level: 4
stepnum: 4
ref: restart-with-auth
pre: |
  
  a. Shut down the :binary:`~bin.mongod` instance. For example, from
     the :binary:`~bin.mongo` shell, issue the following command:

     .. code-block:: javascript

        db.adminCommand( { shutdown: 1 } )

  #. Exit the :binary:`~bin.mongo` shell.

  #. From the terminal, re-start the :binary:`~bin.mongod` instance
     with the :option:`--auth <mongod --auth>` command line option or, if using a
     configuration file, the :setting:`security.authorization` setting.
  
action:
  language: sh
  code: |
    mongod --auth --port 27017 --dbpath /var/lib/mongodb
post: |
  Clients that connect to this instance must now authenticate
  themselves as a MongoDB user. Clients can only perform actions as
  determined by their assigned roles.
---
title: Connect and authenticate as the user administrator.
level: 4
stepnum: 5
ref: auth-as-admin
content: |
   Using the :binary:`~bin.mongo` shell, you can:

   - Connect with authentication by passing in user credentials, or

   - Connect first without authentication, and then issue the
     :method:`db.auth()` method to authenticate.

   .. tabs::

      tabs:
         - id: cmdline
           name: Authenticate during Connection
           content: |
              Start a :binary:`~bin.mongo` shell with the :option:`-u
              \<username\> <mongo -u>`, :option:`-p <mongo -p>`, and the
              :option:`--authenticationDatabase \<database\> <mongo
              --authenticationDatabase>` command line options:

              .. code-block:: sh

                 mongo --port 27017  --authenticationDatabase "admin" -u "myUserAdmin" -p

              Enter your password when prompted.

         - id: authafter
           name: Authenticate after Connection
           content: |
 
              Connect the :binary:`~bin.mongo` shell to the
              :binary:`~bin.mongod`:

              .. code-block:: sh

                 mongo --port 27017


              In the :binary:`~bin.mongo` shell, switch to the
              authentication database (in this case, ``admin``), and
              use :method:`db.auth(\<username\>, \<pwd\>) <db.auth()>`
              method to authenticate:

              .. tip::

                 .. include:: /includes/extracts/4.2-changes-passwordPrompt.rst

              .. code-block:: javascript

                 use admin
                 db.auth("myUserAdmin", passwordPrompt()) // or cleartext password

              Enter the password when prompted.
---
title: Create additional users as needed for your deployment.
level: 4
stepnum: 6
ref: create-additionalusers
pre: |
  Once authenticated as the user administrator, use
  :method:`db.createUser()` to create additional users. You can assign
  any :doc:`built-in roles </reference/built-in-roles>` or
  :doc:`user-defined roles </core/security-user-defined-roles>` to the
  users.

action:
  pre: |
    The following operation adds a user ``myTester`` to the ``test``
    database who has :authrole:`readWrite` role in the ``test``
    database as well as :authrole:`read` role in the ``reporting``
    database.

    .. tip::

       .. include:: /includes/extracts/4.2-changes-passwordPrompt.rst

  language: javascript
  code: |
    use test
    db.createUser(
      {
        user: "myTester",
        pwd:  passwordPrompt(),   // or cleartext password
        roles: [ { role: "readWrite", db: "test" },
                 { role: "read", db: "reporting" } ]
      }
    )

post: |

   .. note::
      The database where you create the user (in this example,
      ``test``) is that user's :ref:`authentication database
      <user-authentication-database>`. Although the user would
      authenticate to this database, the user can have roles in other
      databases; i.e. the user's authentication database does not limit
      the user's privileges.

   After creating the additional users, disconnect the
   :binary:`~bin.mongo` shell.
---
title: Connect to the instance and authenticate as ``myTester``.
level: 4
ref: auth-as-mytester
content: |

   After disconnecting the :binary:`~bin.mongo` shell as
   ``myUserAdmin``, reconnect as ``myTester``.  You can:

   - Connect with authentication by passing in user credentials, or

   - Connect first withouth authentication, and then issue the
     :method:`db.auth()` method to authenticate.
   
   .. tabs::

      tabs:
         - id: cmdline2
           name: Authenticate during Connection
           content: |
              Start a :binary:`~bin.mongo` shell with the :option:`-u
              \<username\> <mongo --username>`, :option:`-p <mongo -p>`, and the
              :option:`--authenticationDatabase \<database\> <mongo
              --authenticationDatabase>` command line options:

              .. code-block:: sh

                 mongo --port 27017 -u "myTester" --authenticationDatabase "test" -p

              Enter the password for the user when prompted.

         - id: authafter2
           name: Authenticate after Connection
           content: |

              Connect the :binary:`~bin.mongo` shell to the
              :binary:`~bin.mongod`:

              .. code-block:: sh

                 mongo --port 27017

              In the :binary:`~bin.mongo` shell, switch to the
              authentication database (in this case, ``test``), and use
              :method:`db.auth(\<username\>, \<pwd\>) <db.auth()>`
              method to authenticate:
         
              .. tip::

                 .. include:: /includes/extracts/4.2-changes-passwordPrompt.rst

              .. code-block:: javascript

                 use test
                 db.auth("myTester", passwordPrompt())  // or cleartext password

              Enter the password for the user when prompted.
---
title: Insert a document as ``myTester``.
level: 4
ref: insert-as-mytester
content: |

   As ``myTester``, you have privileges to perform read and write
   operations in the ``test`` database (as well as perform read
   operations in the ``reporting`` database). Once authenticated as
   ``myTester``, insert a document into a collection in ``test``
   database. For example, you can perform the following insert
   operation in the ``test`` database:
          
   .. code-block:: javascript

      db.foo.insert( { x: 1, y: 1 } )
...
