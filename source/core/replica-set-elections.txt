.. index:: replica set; network partitions
.. index:: replica set; elections
.. index:: replica set; failover
.. _replica-set-election-internals:
.. _replica-set-elections:

=====================
Replica Set Elections
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

:term:`Replica sets <replica set>` use elections to determine which
set member will become :term:`primary`. Elections occur after
initiating a replica set, and also any time the primary becomes
unavailable. The primary is the only member in the set that can accept
write operations. If a primary becomes unavailable, elections allow
the set to recover normal operations without manual
intervention. Elections are part of the :ref:`failover process
<replica-set-failover-administration>`.

In the following three-member replica set, the primary is unavailable.
One of the remaining secondaries holds an election to elect itself as a
new primary.

.. include:: /images/replica-set-trigger-election.rst

Elections are essential for independent operation of a
replica set; however, elections take time to complete. While an
election is in process, the replica set has no primary and cannot
accept writes and all remaining members become read-only. MongoDB
avoids elections unless necessary.

If a majority of the replica set is inaccessible or unavailable to the
current primary, the primary will step down and become a secondary. The
replica set cannot accept writes after this occurs, but remaining
members can continue to serve read queries if such queries are
configured to run on secondaries.

Factors and Conditions that Affect Elections
--------------------------------------------

Replication Election Protocol
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-replica-set-protocolVersion1.rst

Heartbeats
~~~~~~~~~~

Replica set members send heartbeats (pings) to each other every two
seconds. If a heartbeat does not return within 10 seconds, the other
members mark the delinquent member as inaccessible.

Member Priority
~~~~~~~~~~~~~~~

After a replica set has a stable primary, the election algorithm will
make a "best-effort" attempt to have the secondary with the highest
:rsconf:`~members[n].priority` available call an election.
Member priority affects both the timing and the
outcome of elections; secondaries with higher priority call elections
relatively sooner than secondaries with lower
priority, and are also more likely to win. It's possible
that a lower priority node can still be elected as primary for brief
periods of time, even if a higher priority secondary is available.
If a lower priority member wins an election while higher priority member
is available, the replica set continues to call elections until the
highest priority member available becomes primary.

Members with a priority value of ``0`` cannot become primary and do
not seek election. For details, see
:doc:`/core/replica-set-priority-0-member`.

Network Partitions
~~~~~~~~~~~~~~~~~~

Network partitions affect the formation of a majority for an
election. If a primary steps down and neither portion of the replica
set has a majority the set will **not** elect a new primary. The
replica set becomes read-only.

To avoid this situation, place a majority of instances in one data
center and a minority of instances in any other data centers combined.

.. index:: replica set members; non-voting
.. _replica-set-non-voting-configuration:
.. _replica-set-non-voting-members:

Non-Voting Members
------------------

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Although non-voting members do not vote in elections, these members
hold copies of the replica set's data and can accept read operations
from client applications.

Because a replica set can have up to :limit:`50 members 
<Number of Members of a Replica Set>`, but only :limit:`7 voting
members <Number of Voting Members of a Replica Set>`, non-voting
members allow a replica set to have more than seven members.

For instance, the following nine-member replica set has seven voting
members and two non-voting members.

.. include:: /images/replica-set-only-seven-voting-members.rst

A non-voting member has a
:rsconf:`members[n].votes` setting equal to ``0``
in its member configuration:

.. code-block:: javascript

   {
     "_id" : <num>
     "host" : <hostname:port>,
     "votes" : 0
   }

.. important:: Do **not** alter the number of votes to control which
   members will become primary. Instead, modify the
   :rsconf:`members[n].priority` option. *Only*
   alter the number of votes in exceptional cases. For example, to
   permit more than seven members.

To configure a non-voting member, see
:doc:`/tutorial/configure-a-non-voting-replica-set-member`.
