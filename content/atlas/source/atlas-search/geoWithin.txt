.. facet::
   :name: programming_language
   :values: csharp, go, java, javascript/typescript, kotlin, python, shell

.. _geowithin-ref:

======================
``geoWithin`` Operator
======================

.. default-domain:: mongodb

.. meta::
   :keywords: query within shape
   :description: Learn how to query points within a specified geometric shape.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Definition
----------

.. expression:: geoWithin

   The ``geoWithin`` operator supports querying geographic points
   within a given geometry. Only points are returned, even if
   ``indexShapes`` value is ``true`` in the
   :ref:`index definition <bson-data-types-geo>`.

   You can query points within a:

   - Circle
   - Bounding box
   - Polygon

   .. include:: /includes/fts/facts/fact-atlas-search-geo-coordinates.rst

.. _geowithin-syntax:

Syntax
------

``geoWithin`` has the following syntax:

.. code-block:: javascript

   {
     "$search": {
        "index": <index name>, // optional, defaults to "default"
        "geoWithin": {
           "path": "<field-to-search>",
           "box | circle | geometry": <object>,
           "score": <score-options>
        }
     }
   }

.. _geowithin-options:

Options
-------

``geoWithin`` uses the following terms to construct a query:

.. list-table::
   :header-rows: 1
   :widths: 10 20 60 10

   * - Field
     - Type
     - Description
     - Necessity

   * - ``box``
     - object
     - Object that specifies the bottom left and top right
       :manual:`GeoJSON </reference/geojson/>` points of a box to
       search within. The object takes the following fields:

       - ``bottomLeft`` - Bottom left GeoJSON :manual:`point
         </reference/geojson/#point>`.
       - ``topRight`` - Top right GeoJSON :manual:`point
         </reference/geojson/#point>`.

       To learn how to specify GeoJSON data inside a GeoJSON object, 
       see :manual:`GeoJSON Objects </reference/geojson/>`.

       Either ``box``, ``circle``, or ``geometry`` is required.

     - conditional

   * - ``circle``
     - object
     - Object that specifies the center point and the radius in meters
       to search within. The object contains the following
       :manual:`GeoJSON </reference/geojson/>` fields:

       - ``center`` - Center of the circle specified as a GeoJSON
         :ref:`point <geojson-point>`.
       - ``radius`` - Radius, which is a number, specified in
         meters. Value must be greater than or equal to ``0``.

       To learn how to specify GeoJSON data inside a GeoJSON object, 
       see :manual:`GeoJSON Objects </reference/geojson/>`.

       Either ``circle``, ``box``, or ``geometry`` is required.
     - conditional

   * - ``geometry``
     - GeoJSON object
     - :manual:`GeoJSON </reference/geojson/>` object that specifies
       the :ref:`MultiPolygon <geojson-multipolygon>` or
       :ref:`Polygon <geojson-polygon>` to search
       within. The polygon must be specified as a closed loop where
       the last position is the same as the first position.

       .. include:: /includes/fts/facts/fact-fts-geo-intersection.rst

       To learn how to specify GeoJSON data inside a GeoJSON object, 
       see :manual:`GeoJSON Objects </reference/geojson/>`.

       Either ``geometry``, ``box``, or ``circle`` is required.
     - conditional

   * - ``path``
     - string or array of strings
     - Indexed :ref:`geo <bson-data-types-geo>` type field or fields to
       search.
     - yes

   * - ``score``
     - object
     - Score to assign to matching search results. By default, the
       :ref:`score <scoring-ref>` in the results is ``1``. You
       can modify the score using the following options:

       - ``boost``: multiply the result score by the given number.
       - ``constant``: replace the result score with the given number.
       - ``function``: replace the result score with the given expression.

       For information on using ``score`` in your query, see
       :ref:`scoring-ref`.
     - no

.. _geowithin-egs:

Examples
--------

The following examples use the ``listingsAndReviews`` collection in the
``sample_airbnb`` database. If you have the :ref:`sample dataset
<available-sample-datasets>` on your cluster, you can create a custom
|fts| index for :ref:`geo <bson-data-types-geo>` type and run the
example queries on your cluster. 

Use the following sample index definition for
indexing the ``address.location`` field in the ``listingsAndReviews``
collection:

.. code-block:: json
   :linenos:

   {
     "mappings": {
       "fields": {
         "address": {
           "fields": {
             "location": {
               "type": "geo"
             }
           },
           "type": "document"
         },
         "property_type": {
           "type": "token"
         }
       }
     }
   }

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu on this page to 
set the language of the examples in this section.

----------

.. tabs-selector:: drivers

.. _geowithin-box-eg:

``box`` Example
~~~~~~~~~~~~~~~

The following query uses the ``geoWithin`` operator with
the ``box`` field to search for
properties within a bounding box in Australia. 

The query includes a:

- :pipeline:`$limit` stage to limit the output to ``3`` results.
- :pipeline:`$project` stage to exclude all fields except ``name`` and
  ``address``.

.. include:: /includes/fts/facts/fact-fts-index-default.rst

Basic Example 
`````````````

The following |fts| query returns the documents that match the specified
search criteria.

.. tabs-drivers::

  .. tab::
     :tabid: atlas-ui 

     .. io-code-block::  
        :copyable: true 
      
        .. input:: /includes/fts/geo/box/ui-query.json

        .. output:: /includes/fts/geo/box/ui-query-output.js
           :language: javascript
           :linenos:
           :visible: false

  .. tab::
     :tabid: shell

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/box/shell-query.json
           :language: json
           :linenos:

        .. output:: /includes/fts/geo/box/shell-query-output.js
           :language: javascript
           :visible: false

  .. tab::
     :tabid: compass

     To learn how to run the following queries in the |compass|,
     see :ref:`atlas-search-queries`. 

     .. include:: /includes/fts/geo/box/compass-query.rst

     .. literalinclude:: /includes/fts/geo/box/compass-query-output.js
        :language: javascript
        :copyable: false

  .. tab::
     :tabid: csharp

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/box/geo-box-query.cs
           :language: csharp
           :linenos:

        .. output:: /includes/fts/geo/box/csharp-query-output.js
           :language: javascript
           :visible: false

  .. tab::
     :tabid: go

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/box/run-geo-box-query.go
           :language: go 
           :linenos:

        .. output:: /includes/fts/geo/box/go-query-output.js
           :language: javascript
           :visible: false

  .. tab::
     :tabid: java-sync

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/box/GeoBoxQuery.java
           :language: java
           :linenos:

        .. output:: /includes/fts/geo/box/java-query-output.js
           :language: json
           :visible: false

  .. tab::
     :tabid: kotlin-coroutine

     .. io-code-block:: 
        :copyable: true 
        
        .. input:: /includes/fts/geo/box/box-tutorial.kt
           :language: java
           :linenos:

        .. output:: /includes/fts/geo/box/kotlin-query-output.js
           :language: javascript 
           :visible: false

  .. tab::
     :tabid: nodejs

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/box/run-geo-box-query.js
           :language: javascript
           :linenos:

        .. output:: /includes/fts/geo/box/nodejs-query-output.js
           :language: javascript
           :visible: false

  .. tab::
     :tabid: python

     .. io-code-block::
        :copyable: true 

        .. input:: /includes/fts/geo/box/run-geo-box-query.py
           :language: python
           :linenos:

        .. output:: /includes/fts/geo/box/python-query-output.js
           :language: javascript
           :visible: false

Metadata Example 
````````````````

The following query returns the number of types of properties (such
as apartment, house, and so on) for the specified search criteria.

.. tabs-drivers::

  .. tab::
     :tabid: atlas-ui 

     .. io-code-block::  
        :copyable: true 
      
        .. input:: /includes/fts/geo/box/metadata-ui-query.json

        .. output:: /includes/fts/geo/box/metadata-output.js
           :language: javascript
           :linenos:
           :visible: false

  .. tab::
     :tabid: shell

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/box/metadata-shell-query.json
           :language: json
           :linenos:

        .. output:: /includes/fts/geo/box/metadata-output.js
           :language: javascript
           :visible: false

  .. tab::
     :tabid: compass

     To learn how to run the following queries in the |compass|,
     see :ref:`atlas-search-queries`. 

     .. include:: /includes/fts/geo/box/metadata-compass-query.rst

     .. literalinclude:: /includes/fts/geo/box/metadata-output.js
        :language: javascript
        :copyable: false

  .. tab::
     :tabid: csharp

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/box/geo-box-metadata-query.cs
           :language: csharp
           :linenos:

        .. output:: /includes/fts/geo/box/metadata-output.js
           :language: javascript
           :visible: false

  .. tab::
     :tabid: go

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/box/run-geo-box-metadata-query.go
           :language: go
           :linenos:

        .. output:: /includes/fts/geo/box/metadata-output.js
           :language: javascript
           :visible: false

  .. tab::
     :tabid: java-sync

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/box/GeoBoxMetadataQuery.java
           :language: java
           :linenos:

        .. output:: /includes/fts/geo/box/metadata-output.js
           :language: json
           :visible: false

  .. tab::
     :tabid: kotlin-coroutine

     .. io-code-block:: 
        :copyable: true 
        
        .. input:: /includes/fts/geo/box/box-metadata-tutorial.kt
           :language: java
           :linenos:

        .. output:: /includes/fts/geo/box/kotlin-metadata-output.js 
           :language: javascript 
           :visible: false

  .. tab::
     :tabid: nodejs

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/box/run-geo-box-metadata-query.js
           :language: javascript
           :linenos:

        .. output:: /includes/fts/geo/box/node-metadata-output.js 
           :language: javascript
           :visible: false

  .. tab::
     :tabid: python

     .. io-code-block::
        :copyable: true 

        .. input:: /includes/fts/geo/box/run-geo-box-metadata-query.py
           :language: python
           :linenos:

        .. output:: /includes/fts/geo/box/py-metadata-output.js 
           :language: javascript
           :visible: false

.. _geowithin-circle-eg:

``circle`` Example
~~~~~~~~~~~~~~~~~~

The following query uses the ``geoWithin`` operator with the ``circle``
field to search for properties within one mile radius of specified 
coordinates in Canada.

The query includes a:

- :pipeline:`$limit` stage to limit the output to ``3`` results
- :pipeline:`$project` stage to exclude all fields except ``name``
  and ``address``.

.. include:: /includes/fts/facts/fact-fts-index-default.rst

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu on this page to 
set the language of the examples in this section.

----------

.. tabs-drivers::

  .. tab::
     :tabid: atlas-ui 

     .. io-code-block::  
        :copyable: true 
      
        .. input:: /includes/fts/geo/circle/ui-query.json

        .. output:: /includes/fts/geo/circle/query-output.js
           :language: javascript
           :linenos:
           :visible: false

  .. tab::
     :tabid: shell

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/circle/shell-query.json
           :language: json
           :linenos:

        .. output:: /includes/fts/geo/circle/query-output.js
           :language: javascript
           :visible: false

  .. tab::
     :tabid: compass

     To learn how to run the following queries in the |compass|,
     see :ref:`atlas-search-queries`. 

     .. include:: /includes/fts/geo/circle/compass-query.rst

     .. literalinclude:: /includes/fts/geo/circle/query-output.js
        :language: javascript
        :copyable: false

  .. tab::
     :tabid: csharp

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/circle/geo-circle-query.cs
           :language: csharp
           :linenos:
           :dedent:

        .. output:: /includes/fts/geo/circle/query-output.js
           :language: javascript
           :visible: false

  .. tab::
     :tabid: go

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/circle/run-geo-circle-query.go
           :language: go
           :linenos:
           :dedent:
            
        .. output:: /includes/fts/geo/circle/go-query-output.js
           :language: javascript
           :visible: false

  .. tab::
     :tabid: java-sync

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/circle/GeoCircleQuery.java
           :language: java
           :linenos:
           :dedent:
            
        .. output:: /includes/fts/geo/circle/query-output.js
           :language: json
           :visible: false

  .. tab::
     :tabid: kotlin-coroutine

     .. io-code-block:: 
        :copyable: true 
        
        .. input:: /includes/fts/geo/circle/circle-tutorial.kt
           :language: kotlin
           :linenos:
           :dedent:

        .. output:: /includes/fts/geo/circle/kotlin-query-output.js 
           :language: javascript 
           :visible: false

  .. tab::
     :tabid: nodejs

     .. io-code-block::
        :copyable: true

        .. input:: /includes/fts/geo/circle/run-geo-circle-query.js
           :language: javascript
           :linenos:
           :dedent:
            
        .. output:: /includes/fts/geo/circle/node-query-output.js
           :language: javascript
           :visible: false

  .. tab::
     :tabid: python

     .. io-code-block::
        :copyable: true 

        .. input:: /includes/fts/geo/circle/run-geo-circle-query.py
           :language: python
           :linenos:
           :dedent:

        .. output:: /includes/fts/geo/circle/py-query-output.js
           :language: javascript
           :visible: false

.. _geowithin-geometry-eg:

``geometry`` Examples
~~~~~~~~~~~~~~~~~~~~~

The following examples use the ``geoWithin`` operator with the
``geometry`` field to search for properties in Hawaii. The ``type`` field
specifies whether the area is a GeoJSON :ref:`Polygon <geojson-polygon>` or 
:ref:`MultiPolygon <geojson-multipolygon>`.

The queries include a: 

- :pipeline:`$limit` stage to limit the output to ``3`` results.
- :pipeline:`$project` stage to
  exclude all fields except ``name`` and ``address``.

.. include:: /includes/fts/facts/fact-fts-index-default.rst

.. tabs::

   .. tab:: Polygon Example
      :tabid: polygon 

      ----------

      .. |arrow| unicode:: U+27A4

      |arrow| Use the **Select your language** drop-down menu on this page to 
      set the language of the examples in this section.

      ----------

      The following |fts| query:

      .. include:: /includes/fts/facts/fact-fts-tutorial-run-geo-query-results.rst

      .. tabs-drivers::

        .. tab::
           :tabid: atlas-ui 

           .. io-code-block::  
              :copyable: true 
            
              .. input:: /includes/fts/geo/polygon/ui-query.json
                 :language: json 

              .. output:: /includes/fts/geo/polygon/ui-query-output.js
                 :language: javascript
                 :linenos:
                 :visible: false

        .. tab::
           :tabid: shell

           .. io-code-block::
              :copyable: true

              .. input:: /includes/fts/geo/polygon/shell-query.json
                 :language: json

              .. output:: /includes/fts/geo/polygon/shell-query-output.js
                 :language: javascript
                 :visible: false

        .. tab::
           :tabid: compass

           To learn how to run the following queries in the |compass|,
           see :ref:`atlas-search-queries`. 

           .. include:: /includes/fts/geo/polygon/compass-query.rst

           .. literalinclude:: /includes/fts/geo/polygon/compass-output.js
              :language: javascript
              :copyable: false

        .. tab::
           :tabid: csharp

           .. io-code-block::
              :copyable: true

              .. input:: /includes/fts/geo/polygon/geo-tutorial-query.cs
                 :language: csharp
                 :linenos:
                 :dedent:
                 :emphasize-lines: 13

              .. output:: /includes/fts/geo/polygon/csharp-output.js
                 :language: javascript
                 :visible: false  

        .. tab::
           :tabid: go

           .. io-code-block::
              :copyable: true

              .. input:: /includes/fts/geo/polygon/run-geo-query.go
                 :language: go
                 :linenos:
                 :dedent:
                 :emphasize-lines: 14
                  
              .. output:: /includes/fts/geo/polygon/run-geo-query.go
                 :language: javascript
                 :visible: false

        .. tab::
           :tabid: java-sync

           .. io-code-block::
              :copyable: true

              .. input:: /includes/fts/geo/polygon/GeoPolygonQuery.java 
                 :language: java
                 :linenos:
                 :dedent:
                 :emphasize-lines: 28
                  
              .. output:: /includes/fts/geo/polygon/java-output.js
                 :language: json
                 :visible: false

        .. tab::
           :tabid: kotlin-coroutine

           The following code example:

           - Imports ``mongodb`` packages and dependencies.
           - Establishes a connection to your cluster.
           - Prints the documents that match the query from the
             ``AggregateFlow`` instance.

           .. io-code-block:: 
              :copyable: true 
              
              .. input:: /includes/fts/geo/polygon/tutorial.kt
                 :language: kotlin
                 :linenos:
                 :dedent:
                 :emphasize-lines: 10

              .. output:: /includes/fts/geo/polygon/kotlin-query-results.js
                 :language: javascript 
                 :visible: false

        .. tab::
           :tabid: nodejs

           The following code example:

           - Imports ``mongodb``, MongoDB's Node.js driver. 
           - Creates an instance of the ``MongoClient`` class to establish a 
             connection to your cluster.
           - Iterates over the cursor to print the documents that match the 
             query.

           .. io-code-block::
              :copyable: true

              .. input:: /includes/fts/geo/polygon/run-geo-query.js
                 :language: javascript
                 :linenos:
                 :dedent:
                 :emphasize-lines: 4
                  
              .. output:: /includes/fts/geo/polygon/node-query-output.js
                 :language: javascript
                 :visible: false

        .. tab::
           :tabid: python

           The following code example:

           - Imports ``pymongo``, MongoDB's Python driver, and the ``dns``
             module, which is required to connect ``pymongo`` to ``Atlas`` 
             using a |dns| seed list connection string. 

           - Creates an instance of the ``MongoClient`` class to establish a 
             connection to your cluster.

             .. include:: /includes/fts/facts/fact-fts-tutorial-run-geo-query-results.rst

           - Iterates over the cursor to print the documents that match the 
             query.

           .. io-code-block::
              :copyable: true 

              .. input:: /includes/fts/geo/polygon/run-geo-query.py
                 :language: python
                 :linenos:
                 :dedent:
                 :emphasize-lines: 4

              .. output:: /includes/fts/geo/polygon/python-query-output.js
                 :language: javascript
                 :visible: false

   .. tab:: MultiPolygon Example
      :tabid: multipolygon

      ----------

      .. |arrow| unicode:: U+27A4

      |arrow| Use the **Select your language** drop-down menu on this page to 
      set the language of the examples in this section.

      ----------

      The following |fts| query uses the ``geoWithin`` operator with the
      ``geometry`` field to search for properties in Hawaii. The ``type`` field
      specifies whether the area is a GeoJSON :ref:`Polygon <geojson-polygon>` or 
      :ref:`MultiPolygon <geojson-multipolygon>`.

      The query includes a: 

      - :pipeline:`$limit` stage to limit the output to ``3`` results.
      - :pipeline:`$project` stage to
        exclude all fields except ``name`` and ``address``.

      .. include:: /includes/fts/facts/fact-fts-index-default.rst

      .. tabs-drivers::

        .. tab::
           :tabid: atlas-ui 

           .. io-code-block::  
              :copyable: true 
            
              .. input:: /includes/fts/geo/multipolygon/ui-query.json
                 :language: json 

              .. output:: /includes/fts/geo/multipolygon/query-output.js
                 :language: javascript
                 :linenos:
                 :visible: false

        .. tab::
           :tabid: shell

           .. io-code-block::
              :copyable: true

              .. input:: /includes/fts/geo/multipolygon/shell-query.json
                 :language: json

              .. output:: /includes/fts/geo/multipolygon/query-output.js
                 :language: javascript
                 :visible: false

        .. tab::
           :tabid: compass

           To learn how to run the following queries in the |compass|,
           see :ref:`atlas-search-queries`. 

           .. include:: /includes/fts/geo/multipolygon/compass-query.rst

           .. literalinclude:: /includes/fts/geo/multipolygon/query-output.js
              :language: javascript
              :copyable: false

        .. tab::
           :tabid: csharp

           .. io-code-block::
              :copyable: true

              .. input:: /includes/fts/geo/multipolygon/geo-multipolygon-query.cs
                 :language: csharp
                 :linenos:
                 :dedent:

              .. output:: /includes/fts/geo/multipolygon/query-output.js
                 :language: javascript
                 :visible: false

        .. tab::
           :tabid: go

           .. io-code-block::
              :copyable: true

              .. input:: /includes/fts/geo/multipolygon/run-geo-multipolygon-query.go
                 :language: go
                 :linenos:
                 :dedent:
                  
              .. output:: /includes/fts/geo/multipolygon/go-query-output.js
                 :language: javascript
                 :visible: false

        .. tab::
           :tabid: java-sync

           .. io-code-block::
              :copyable: true

              .. input:: /includes/fts/geo/multipolygon/GeoMultiPolygonQuery.java
                 :language: java
                 :linenos:
                 :dedent:
                  
              .. output:: /includes/fts/geo/multipolygon/query-output.js
                 :language: json
                 :visible: false

        .. tab::
           :tabid: kotlin-coroutine

           .. io-code-block:: 
              :copyable: true 
              
              .. input:: /includes/fts/geo/multipolygon/multipolygon-tutorial.kt
                 :language: kotlin
                 :linenos:
                 :dedent:

              .. output:: /includes/fts/geo/multipolygon/kotlin-query-output.js
                 :language: javascript 
                 :visible: false

        .. tab::
           :tabid: nodejs

           .. io-code-block::
              :copyable: true

              .. input:: /includes/fts/geo/multipolygon/run-geo-multipolygon-query.js
                 :language: javascript
                 :linenos:
                 :dedent:
                  
              .. output:: /includes/fts/geo/multipolygon/node-query-output.js
                 :language: javascript
                 :visible: false

        .. tab::
           :tabid: python

           .. io-code-block::
              :copyable: true 

              .. input:: /includes/fts/geo/multipolygon/run-geo-multipolygon-query.py
                 :language: python
                 :linenos:
                 :dedent:

              .. output:: /includes/fts/geo/multipolygon/py-query-output.js
                 :language: javascript
                 :visible: false
