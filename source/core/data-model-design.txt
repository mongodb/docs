.. _data-modeling-decisions:

=================
Data Model Design
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Effective data models support your application needs. The key
consideration for the structure of your documents is the decision to
:ref:`embed <data-modeling-embedding>` or to :ref:`use references
<data-modeling-referencing>`.

.. _data-modeling-embedding:

Embedded Data Models
--------------------

With MongoDB, you may embed related data in a single structure or
document. These schema are generally known as "denormalized" models,
and take advantage of MongoDB's rich documents. Consider the following
diagram:

.. include:: /images/data-model-denormalized.rst

Embedded data models allow applications to store related pieces of
information in the same database record. As a result, applications may
need to issue fewer queries and updates to complete common operations.

In general, use embedded data models when:

- you have "contains" relationships between entities. See
  :ref:`data-modeling-example-one-to-one`.

- you have one-to-many relationships between entities. In these
  relationships the "many" or child documents always appear with or
  are viewed in the context of the "one" or parent documents.  See
  :ref:`data-modeling-example-one-to-many`.
  
In general, limiations of embedded data models may be seen: 

- in situations where documents grow after creation. 

- with the MMAPv1 storage engine, as document growth can impact 
  write performance and lead to data fragmentation.

Generally, embedding provides better performance for read operations,
as well as the ability to request and retrieve related data in a single
database operation. Embedded data models make it possible to update
related data in a single atomic write operation.

In version 3.0.0, MongoDB uses :ref:`power-of-2-allocation` as the
default allocation strategy for MMAPv1 in order to account for document
growth, minimizing the likelihood of data fragmentation. See
:ref:`power-of-2-allocation` for details. Furthermore, documents in
MongoDB must be smaller than the :limit:`maximum BSON document size
<BSON Document Size>`. For bulk binary data, consider :doc:`GridFS
</core/gridfs>`.

To interact with embedded documents, use :term:`dot notation` to "reach
into" embedded documents. See :ref:`query for data in arrays
<read-operations-arrays>` and :ref:`query data in embedded documents
<read-operations-embedded-documents>` for more examples on accessing data in
arrays and embedded documents.

.. _data-modeling-referencing:

Normalized Data Models
----------------------

Normalized data models describe relationships using :doc:`references
</reference/database-references>` between documents.

.. include:: /images/data-model-normalized.rst

In general, use normalized data models:

- when embedding would result in duplication of data but would not
  provide sufficient read performance advantages to outweigh the
  implications of the duplication.

- to represent more complex many-to-many relationships.

- to model large hierarchical data sets.

In general, the limitations of normalized data models include:

- normalized data models possibly requiring more round trips to the server.

Normalized data models provides more flexibility than embedding. However,
client-side applications must issue follow-up queries to resolve the
references. 

See :ref:`data-modeling-publisher-and-books` for an example of
referencing. For examples of various tree models using references, see
:doc:`/applications/data-models-tree-structures`.
