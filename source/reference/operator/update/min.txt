====
$min
====

.. default-domain:: mongodb

.. update:: $min

   The :update:`$min` updates the value of the field to a specified
   value *if* the specified value is **less than** the current value of
   the field. If the field does not exists, the :update:`$min`
   operator sets the field to the specified value. The :update:`$min`
   operator can compare values of different types, using the :ref:`BSON
   comparison order <faq-dev-compare-order-for-BSON-types>`.

Examples
--------

Use ``$min`` to Compare Numbers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider the following document in the collection ``scores``:

.. code-block:: javascript

   { _id: 1, highScore: 800, lowScore: 200 }

The ``lowScore`` for the document currently has the value
``200``. The following operation uses :update:`$min` to compare
``200`` to the specified value ``150`` and updates the value of
``lowScore`` to ``150`` since ``150`` is less than ``200``:

.. code-block:: javascript

   db.scores.update( { _id: 1 }, { $min: { lowScore: 150 } } )

The ``scores`` collection now contains the following modified document:

.. code-block:: javascript

   { _id: 1, highScore: 800, lowScore: 150 }

The next operation has no effect since the current value of the
field ``lowScore``, i.e ``150``, is less than ``200``:

.. code-block:: javascript

   db.scores.update( { _id: 1 }, { $min: { lowScore: 250 } } )

The document remains unchanged in the ``scores`` collection:

.. code-block:: javascript

   { _id: 1, highScore: 800, lowScore: 150 }

Use ``$min`` to Compare Dates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider the following document in the collection ``tags``:

.. code-block:: javascript

   {
     _id: 1,
     desc: "crafts",
     dateEntered: ISODate("2013-10-01T05:00:00Z"),
     dateExpired: ISODate("2013-10-01T16:38:16Z")
   }

The following operation compares the current value of the
``dateEntered`` field, i.e. ``ISODate("2013-10-01T05:00:00Z")``,
with the specified date ``new Date("2013-09-25")`` to determine
whether to update the field:

.. code-block:: javascript

   db.tags.update( { _id: 1 },
                   {
                     $min: {
                             dateEntered: new Date("2013-09-25")
                           }
                    }
                 )

The operation updates the ``dateEntered`` field:

.. code-block:: javascript
   :emphasize-lines: 4

   {
     _id: 1,
     desc: "crafts",
     dateEntered: ISODate("2013-09-25T00:00:00Z"),
     dateExpired: ISODate("2013-10-01T16:38:16Z")
   }
