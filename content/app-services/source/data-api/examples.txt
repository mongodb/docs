.. meta::
   :robots: nosnippet

:orphan:

=================
Data API Examples
=================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The following examples demonstrate how to send requests to the Atlas
Data API.

Create, Read, Update, and Delete (CRUD) Operations
--------------------------------------------------

The following examples demonstrate how to perform CRUD operations using
the Atlas Data API.

.. _data-api-findOne:

Find a Single Document
~~~~~~~~~~~~~~~~~~~~~~

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.findOne.sh

.. _data-api-find:

Find Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.find.sh

.. _data-api-insertOne:

Insert a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.insertOne.sh

.. _data-api-insertMany:

Insert Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.insertMany.sh

.. _data-api-updateOne:

Update a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.updateOne.sh

.. _data-api-updateMany:

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.updateMany.sh

.. _data-api-replaceOne:

Replace a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~~

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.replaceOne.sh

.. _data-api-deleteOne:

Delete a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.deleteOne.sh

.. _data-api-deleteMany:

Delete Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.deleteMany.sh

.. _data-api-aggregate:

Run an Aggregation Pipeline
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. literalinclude:: /data-api/snippets/generated-endpoints.snippet.aggregate.sh

Specify BSON Types in Requests
------------------------------

Data API requests can specify BSON types that don't exist in JSON by
instead using the EJSON :ref:`data format <data-api-data-formats>` in
the request body. You can use EJSON to match BSON types in query filters
or write BSON types in insert and update operations.

To specify that a request body uses EJSON, set the ``Content-Type`` header:

.. code-block:: none
   
   Content-Type: application/ejson

Binary
~~~~~~

To specify a binary value, use ``$binary`` with the value encoded in
Base64 and a `BSON subtype <https://bsonspec.org/spec.html>`_ encoded as
a two-character hexadecimal string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Binary.sh
   :language: bash
   :emphasize-lines: 11-16

Date
~~~~

To specify a date, use a ``$date`` object. The value depends on which
EJSON format you want to use.

**Canonical EJSON**

The value is a `UNIX timestamp in milliseconds
<https://currentmillis.com/>`_ as a 64-bit integer:

.. literalinclude:: /data-api/snippets/data-types.snippet.Date-Canonical.sh
   :language: bash
   :emphasize-lines: 11

**Relaxed EJSON**

The value is an :wikipedia:`ISO 8601 <ISO_8601>` date string with a time
component:

.. literalinclude:: /data-api/snippets/data-types.snippet.Date-Relaxed.sh
   :language: bash
   :emphasize-lines: 11

Decimal128
~~~~~~~~~~

To specify a 128-bit decimal, use ``$numberDecimal`` with the decimal
value as a string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Decimal128.sh
   :language: bash
   :emphasize-lines: 11

Double
~~~~~~

To specify a 64-bit signed floating point value (commonly referred to as
a "double"), use a canonical ``$numberDouble`` with the integer value as
a string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Double-Canonical.sh
   :language: bash
   :emphasize-lines: 11

**Relaxed EJSON**

An EJSON value that contains a raw JSON ``number`` with a decimal point
is automatically cast to a ``$numberDouble`` object:

.. literalinclude:: /data-api/snippets/data-types.snippet.Double-Relaxed.sh
   :language: bash
   :emphasize-lines: 11

Int32
~~~~~

To specify a 32-bit signed integer value, use a canonical ``$numberInt``
object with the integer value as a string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Int32-Canonical.sh
   :language: bash
   :emphasize-lines: 11

**Relaxed EJSON**

An EJSON value that contains a raw JSON ``number`` without a decimal
point is automatically cast to a ``$numberInt`` object:

.. literalinclude:: /data-api/snippets/data-types.snippet.Int32-Relaxed.sh
   :language: bash
   :emphasize-lines: 11

Int64
~~~~~

To specify a 64-bit signed integer value, use ``$numberLong`` with the
integer value as a string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Int64.sh
   :language: bash
   :emphasize-lines: 11

ObjectId
~~~~~~~~

To specify an ObjectId value, use ``$oid`` with the ID as a byte string:

.. literalinclude:: /data-api/snippets/data-types.snippet.ObjectId.sh
   :language: bash
   :emphasize-lines: 11

.. _data-api-query-examples:

Query Examples
--------------

The code snippets in this section demonstrate common patterns you can
use in your read and write operations.

Find All Documents
~~~~~~~~~~~~~~~~~~

To match all documents in a collection, use an empty query object:

.. code-block:: bash
   :emphasize-lines: 9
   :copyable: false
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<App ID>/endpoint/data/v1/action/find' \
     --header 'Content-Type: application/ejson' \
     --header 'apiKey: <API Key>' \
     --data-raw '{
       "dataSource": "<cluster name>",
       "database": "<database name>",
       "collection": "<collection name>",
       "filter": {}
     }'

Find a Document by ID
~~~~~~~~~~~~~~~~~~~~~

MongoDB stores each document with a unique identifier in the ``_id``
field. For most apps, this is a BSON ObjectID value. You can match any
ObjectID field, including a document using an EJSON ``$oid`` object:

.. code-block:: bash
   :emphasize-lines: 10
   :copyable: false
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<App ID>/endpoint/data/v1/action/find' \
     --header 'Content-Type: application/ejson' \
     --header 'apiKey: <API Key>' \
     --data-raw '{
       "dataSource": "<cluster name>",
       "database": "<database name>",
       "collection": "<collection name>",
       "filter": {
         "_id": { "$oid": "630e51b3f4cd7d9e606caab6" }
       }
     }'

Find By Date
~~~~~~~~~~~~

You can match documents on a specific date by matching an EJSON
``$date`` object with a field that contains a date value:

.. code-block:: bash
   :emphasize-lines: 10
   :copyable: false
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<App ID>/endpoint/data/v1/action/find' \
     --header 'Content-Type: application/ejson' \
     --header 'apiKey: <API Key>' \
     --data-raw '{
       "dataSource": "<cluster name>",
       "database": "<database name>",
       "collection": "<collection name>",
       "filter": {
         "createdAt": { "$date": "2022-08-30T17:52:05.033Z" }
       }
     }'

You can query a range of dates with ``$gt``, ``$gte``, ``$lt``, and
``$lte``:

.. code-block:: bash
   :emphasize-lines: 11-12
   :copyable: false
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<App ID>/endpoint/data/v1/action/find' \
     --header 'Content-Type: application/ejson' \
     --header 'apiKey: <API Key>' \
     --data-raw '{
       "dataSource": "<cluster name>",
       "database": "<database name>",
       "collection": "<collection name>",
       "filter": {
         "createdAt": {
           "$gte": { "$date": "2022-01-01T00:00:00.000Z" },
           "$lt": { "$date": "2023-01-01T00:00:00.000Z" }
         }
       }
     }'

Data Access Permissions
-----------------------

You can secure Data API requests using your app's built-in role-based
permissions. The examples in this section demonstrate how to set up
common permissions schemes. You can mix and match these and more complex
schemes to meet your API's needs. For more examples and information on
how permissions work, see :ref:`Role-based Permissions <permissions>`.

Define Permissions for Specific API Keys
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can define multiple roles with different data access permissions and
assign specific API keys to each role. For example, you can create a
``read-only`` role that allows users to read all data but not insert,
delete, or modify data.

You map each role to an API key in the role's ``apply_when`` expression.

Each API key corresponds to a separate user account with a unique
account ID. You can access the account ID and other data of the user
making a request with the :json-expansion:`%%user` expansion.

To associate a role with a single API key, set the ``apply_when``
expression to match the API key's account ID:

.. code-block:: json
   :caption: apply_when - One user per role
   :emphasize-lines: 7-9
   
   {
     "database": "<database>",
     "collection": "<collection>",
     "roles": [
       {
         "name": "SpecificUser",
         "apply_when": {
           "%%user.id": "61f9a5e69cd3c0199dc1bb88"
         },
         "insert": true,
         "delete": true,
         "read": true,
         "write": true
       }
     ],
     "filters": []
   }

To associate a role with multiple API keys, set the ``apply_when``
expression to match an array of API key account IDs:

.. code-block:: json
   :caption: apply_when - Multiple users per role
   :emphasize-lines: 7-14
   
   {
     "database": "<database>",
     "collection": "<collection>",
     "roles": [
       {
         "name": "MultipleUsers",
         "apply_when": {
           "%%user.id": {
             "$in": [
               "61f9a5e69cd3c0199dc1bb88",
               "61f9a5e69cd3c0199dc1bb89"
             ]
           }
         },
         "insert": true,
         "delete": true,
         "read": true,
         "write": true
       }
     ],
     "filters": []
   }

You can also use a custom system to determine if a user has a role. For
example, you can write a function that looks up a user's roles from an
Atlas cluster.

.. code-block:: javascript
   :caption: functions/hasRole.js
   
   exports = async function hasRole({
     userId, // The user account ID, e.g. "60d0c1bdee9d3c23b677f929"
     roleName, // The name of a role the user might have, e.g. "admin"
   }) {
     // 1. Get a reference to a custom user data collection
     const users = context.services.get("mongodb-atlas").db("app").collection("users")
     // 2. Query the user's document and make sure it exists
     const user = await users.findOne({ userId })
     if(!user) {
       console.error(`User.id ${userId} not found in custom user data collection`)
       return false
     }
     // 3. Decide if the user has the role we're checking
     return user.roles.includes(roleName)
   };

And then call that function from the role's ``apply_when`` expression
with the :json-operator:`%function` operator:

.. code-block:: json
   :caption: apply_when - Custom function
   :emphasize-lines: 7-17
   
   {
     "database": "<database>",
     "collection": "<collection>",
     "roles": [
       {
         "name": "SomeCustomRole",
         "apply_when": {
           "%%true": {
             "%function": {
               "name": "hasRole",
               "arguments": [{
                 "userId": "%%user.id",
                 "roleName": "SomeCustomRole"
               }]
             }
           }
         },
         "insert": true,
         "delete": true,
         "read": true,
         "write": true
       }
     ],
     "filters": []
   }

This example uses a custom user data collection, but you can use any
external service to determine if a user has a role. The function code
and arguments you pass are up to you.

Define Permissions for a Specific Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can define roles that control data access permissions for a specific
collection in your cluster. For example, you can create a ``read-only``
role that allows users to read all data in a collection but not insert,
delete, or modify any data.

To define roles for a specific collection, update the collection's
configuration file with the :ref:`collection-specific role
configurations <config-role>`:

.. code-block:: json
   :caption: /data_sources/<data source>/<database>/<collection>/rules.json
   
   {
     "database": "<database>",
     "collection": "<collection>",
     "roles": [
       {
         "name": "IsOwner",
         "apply_when": { "owner_id": "%%user.id" },
         "insert": false,
         "delete": false,
         "read": true,
         "write": true
       }
     ],
     "filters": []
   }

If no collection roles match, then the request is also evaluated against
the data source's default roles. If you don't want to apply default
roles, remove any roles and filters from the default rule configuration
file.

.. code-block:: json
   :caption: /data_sources/<data source>/default_rule.json

   {
     "roles": [],
     "filters": []
   }
