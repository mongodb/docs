===============
db.updateRole()
===============

.. default-domain:: mongodb

Definition
----------

.. method:: db.updateRole( rolename, update, writeConcern )

   Updates a :ref:`user-defined role <user-defined-roles>`. The
   :method:`db.updateRole()` method must run on the role's database.

   An update to a field **completely replaces** the previous field's values.
   To grant or remove roles or :ref:`privileges <privileges>` without
   replacing all values, use one or more of the following methods:

   - :method:`db.grantRolesToRole()`
   - :method:`db.grantPrivilegesToRole()`
   - :method:`db.revokeRolesFromRole()`
   - :method:`db.revokePrivilegesFromRole()`

   .. warning::

      An update to the ``privileges`` or ``roles`` array completely replaces
      the previous array's values.

   The :method:`updateRole()` method uses the following syntax:

   .. code-block:: javascript

      db.updateRole(
          "<rolename>",
          {
            privileges:
                [
                  { resource: { <resource> }, actions: [ "<action>", ... ] },
                  ...
                ],
            roles:
                [
                  { role: "<role>", db: "<database>" } | "<role>",
                  ...
                ]
          },
          { <writeConcern> }
      )

   The :method:`db.updateRole()` method takes the following arguments.

   .. include:: /reference/method/db.updateRole-param.rst

   The ``update`` document specifies the fields to update and the new
   values. Each field in the ``update`` document is optional, but the
   document must include at least one field. The ``update`` document has the
   following fields:

   .. include:: /reference/method/db.updateRole-update-fields.rst

   .. |local-cmd-name| replace:: :method:`db.updateRole()`
   .. include:: /includes/fact-roles-array-contents.rst

   The :method:`db.updateRole()` method wraps the :dbcommand:`updateRole`
   command.

Behavior
--------

A role's privileges apply to the database where the role is created. The
role can inherit privileges from other roles in its database. A role
created on the ``admin`` database can include privileges that apply to all
databases or to the :ref:`cluster <resource-cluster>` and can inherit
privileges from roles in other databases.

Required Access
---------------

.. include:: /includes/access-update-role.rst

Example
-------

The following :method:`db.updateRole()` method replaces the
:data:`~admin.system.roles.privileges` and the
:data:`~admin.system.roles.roles` for the ``inventoryControl`` role
that exists in the ``products`` database. The method runs on the
database that contains ``inventoryControl``:

.. code-block:: javascript

   use products
   db.updateRole(
       "inventoryControl",
       {
         privileges:
             [
               {
                 resource: { db:"products", collection:"clothing" },
                 actions: [ "update", "createCollection", "createIndex"]
               }
             ],
         roles:
             [
               {
                 role: "read",
                 db: "products"
               }
             ]
       },
       { w:"majority" }
   )

To view a role's privileges, use the :dbcommand:`rolesInfo` command.
