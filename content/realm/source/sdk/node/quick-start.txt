.. meta::
   :robots: noindex, nosnippet

.. _node-client-quick-start-local:
.. _node-client-quick-start:

=========================
Quick Start - Node.js SDK
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page contains information to quickly get Realm
integrated into your app.

If you haven't already, :ref:`install the Realm Node.js SDK <node-install>`.

.. _node-quickstart-local-import-realm:

Import Realm
------------

At the top of your source files where you want to use Realm, add
the following line to import the SDK and the BSON library.

.. include:: /examples/generated/node/v12/formatted/quickstart.test.snippet.import-realm.ts.rst

.. _node-quickstart-local-define-an-object-model:

Define Your Object Model
------------------------

Your application's :ref:`object model <node-object-schemas>` defines the data
that you can store within Realm. 

To define a Realm object type, create a schema object that specifies the type's
``name`` and ``properties``. The type name must be unique among object types in
a realm. For details on how to define specific properties, see :ref:`Define
Object Properties <node-define-a-property>`.

The following code shows how to define an object model for a ``Task`` object. In this example:
  
- The ``primaryKey`` is the ``_id`` of type ``int``. Another common type used for 
  primary keys is :ref:`ObjectId <node-data-types-field-types>`.
- The ``name`` field is required.
- The ``status`` and ``owner_id`` fields are optional, denoted by the question 
  mark immediately after the data type.

.. tabs-realm-languages::

    .. tab::
      :tabid: typescript
    
      .. include::  /examples/generated/node/v12/formatted/models.snippet.define-an-object-model.ts.rst
    
    .. tab::
      :tabid: javascript

      .. include::  /examples/generated/node/v12/formatted/models.snippet.define-an-object-model.js.rst

.. _node-quickstart-local-open-a-realm:

Open a Realm
------------

To open a realm, pass a :js-sdk:`Realm.BaseConfiguration
<types/BaseConfiguration.html>` object to :js-sdk:`Realm.open()
<classes/Realm-1.html#open>`.

.. include:: /examples/generated/node/v12/formatted/quickstart.test.snippet.open-a-realm.ts.rst

.. _node-quickstart-local-find-sort-and-filter-objects:

Find, Sort, and Filter Objects
------------------------------

The following code demonstrates how to:

- Query for all instances of the "Task" object type.
- Filter the query to retrieve only the tasks that are "Open".
- Sort the tasks by the name in an ascending order.

.. include:: /examples/generated/node/v12/formatted/quickstart.test.snippet.find-sort-and-filter-objects.ts.rst

.. _node-quickstart-local-modify-an-object:
.. _node-quickstart-local-delete-an-object:
.. _node-quickstart-local-create-realm-objects:

Create, Modify, and Delete Realm Objects
----------------------------------------

Once you have opened a realm, you can create, modify, and delete :ref:`objects
<node-object-types>` in it. All write operations must occur within a :ref:`write
transaction <node-write-transactions>`.

.. include:: /examples/generated/node/v12/formatted/quickstart.test.snippet.create-modify-delete.ts.rst

.. _node-quickstart-local-watch-a-collection:

Watch a Collection
------------------

You can :ref:`watch a realm, collection, or object for changes
<node-change-notifications>` by registering event handlers with the
:js-sdk:`Realm.addListener() <classes/Realm-1.html#addListener>`
:js-sdk:`Object.addListener() <classes/Object.html#addListener>`
:js-sdk:`Collection.addListener() <classes/Collection.html#addListener>`
methods.

.. important:: Order Matters
   
   In collection notification handlers, always apply changes
   in the following order: deletions, insertions, then
   modifications. Handling insertions before deletions may
   result in unexpected behavior.

In the following example, an application developer watches for changes to the
``Task`` collection.

.. tabs-realm-languages::

    .. tab::
      :tabid: typescript
    
      .. include::  /examples/generated/node/v12/formatted/quickstart.test.snippet.watch-a-collection.ts.rst
    
    .. tab::
      :tabid: javascript

      .. include::  /examples/generated/node/v12/formatted/quickstart.test.snippet.watch-a-collection.js.rst

.. _node-quickstart-local-close-a-realm:

Close a Realm
-------------

Call the :js-sdk:`realm.close() <classes/Realm-1.html#close>` method when done 
with a realm instance to avoid memory leaks.

.. include:: /examples/generated/node/v12/formatted/quickstart.test.snippet.close-a-realm.ts.rst

Add Device Sync (Optional)
--------------------------

This section illustrates how to authenticate with an Anonymous User and open a
Flexible Sync realm to sync data between devices.

Prerequisites
~~~~~~~~~~~~~

- :ref:`An App Services App <create-a-realm-app>`
- :ref:`Anonymous authentication <anonymous-authentication>` enabled in the App Services UI
- :ref:`Flexible Sync <enable-flexible-sync>` enabled with :ref:`Development Mode <development-mode>`
  on and an ``owner_id`` field in the :guilabel:`Queryable Fields` section

.. _node-quick-start-init-app:

Initialize the App
~~~~~~~~~~~~~~~~~~

To use App Services features, such as authentication and sync, you must first access
your App Services App using your App ID. You can :ref:`find your App ID <find-your-app-id>`
in the App Services UI.

.. include:: /examples/generated/node/v12/formatted/quickstart.test.snippet.initialize.ts.rst

.. _node-quick-start-authenticate:

Authenticate a User
~~~~~~~~~~~~~~~~~~~

To authenticate and log in a user, call :js-sdk:`App.logIn()
<classes/App.html#logIn>`. When :ref:`anonymous authentication
<anonymous-authentication>` is enabled, users can immediately log into your app
without providing any identifying information:

.. include:: /examples/generated/node/v12/formatted/quickstart.test.snippet.anonymous-login.ts.rst

Define an Object Model
~~~~~~~~~~~~~~~~~~~~~~

Object models for synced realms work the same way as :ref:`local-only Realms 
<node-quickstart-local-define-an-object-model>`. Define your object model 
just as you would for a local-only Realm.

.. tabs-realm-languages::

    .. tab::
      :tabid: typescript
    
      .. include::  /examples/generated/node/v12/formatted/models.snippet.define-an-object-model.ts.rst
    
    .. tab::
      :tabid: javascript

      .. include::  /examples/generated/node/v12/formatted/models.snippet.define-an-object-model.js.rst

Open a Synced Realm
~~~~~~~~~~~~~~~~~~~

After you have initialized your App, authenticated a user, and
defined your object model, you can create a :js-sdk:`SyncConfiguration
<types/FlexibleSyncConfiguration.html>`.

To open a Flexible Sync realm, call :js-sdk:`Realm.open() <classes/Realm-1.html#open>`. 
Pass in a :js-sdk:`BaseConfiguration <types/BaseConfiguration.html>`
object, which must include the ``sync`` property defining a 
:js-sdk:`SyncConfiguration <types/FlexibleSyncConfiguration.html>` object. 
To use Flexible Sync, in the SyncConfiguration, you must include include a 
``user`` and ``flexible: true``.

Additionally, you need at least one subscription before you can read from or write to the
realm. Use ``Configuration.sync.initialSubscriptions`` to define the initial 
subscription set when the Realm file is first opened.

.. tabs-realm-languages::

    .. tab::
      :tabid: typescript
    
      .. include::  /examples/generated/node/v12/formatted/quickstart.test.snippet.open-realm-with-subscriptions.ts.rst
    
    .. tab::
      :tabid: javascript

      .. include::  /examples/generated/node/v12/formatted/quickstart.test.snippet.open-realm-with-subscriptions.js.rst

The syntax to :ref:`read <node-read-operations>`, :ref:`write <node-write-operations>`, 
and :ref:`watch for changes <node-react-to-changes>` on a
synced realm is identical to the syntax for non-synced realms above. While 
you work with local data, a background thread efficiently integrates, 
uploads, and downloads changesets.
