================================================
Prevent Replica Set Member from Becoming Primary
================================================

.. default-domain:: mongodb

The secondary-only configuration prevents a :term:`secondary` member in a
:term:`replica set` from ever becoming a :term:`primary` in a
:term:`failover`. You can set secondary-only mode for any member of
the set except the current primary.

For example, you may want to configure all members of a replica sets
located outside of the main data centers as secondary-only to prevent
these members from ever becoming primary.

To configure a member as secondary-only, set its
:data:`~local.system.replset.members[n].priority` value to ``0``. Any member with a
:data:`~local.system.replset.members[n].priority` equal to ``0`` will never seek
:ref:`election <replica-set-elections>` and cannot become primary in any
situation. For more information on priority levels, see
:ref:`replica-set-node-priority`.

.. include:: /includes/note-rs-conf-array-index.rst

As an example of modifying member priorities, assume a four-member
replica set. Use the following sequence of operations in the
:program:`mongo` shell to modify member priorities:

.. code-block:: javascript

   cfg = rs.conf()
   cfg.members[0].priority = 2
   cfg.members[1].priority = 1
   cfg.members[2].priority = 0.5
   cfg.members[3].priority = 0
   rs.reconfig(cfg)

This reconfigures the set, with the following priority settings:

- Member ``0`` to a priority of ``2`` so that it becomes primary, under
  most circumstances.

- Member ``1`` to a priority of ``1``, which is the default value.
  Member ``1`` becomes primary if no member with a *higher* priority is
  eligible.

- Member ``2`` to a priority of ``0.5``, which makes it less likely to
  become primary than other members but doesn't prohibit the
  possibility.

- Member ``3`` to a priority of ``0``.
  Member ``3`` cannot become the :term:`primary` member under any
  circumstances.

.. include:: /includes/warning-rs-reconfig.rst

.. note::

   - If your replica set has an even number of members, add an
     :doc:`arbiter </tutorial/add-replica-set-arbiter>` to ensure that
     members can quickly obtain a majority of votes in an election for
     primary.

   - MongoDB does not permit the current :term:`primary` to have a
     :data:`~local.system.replset.members[n].priority` of ``0``. If you
     want to prevent the current primary from becoming primary, first
     use :method:`rs.stepDown()` to step down the current primary, and
     then :ref:`reconfigure the replica set
     <replica-set-reconfiguration-usage>` with :method:`rs.conf()` and
     :method:`rs.reconfig()`.

.. seealso:: :data:`~local.system.replset.members[n].priority` and
   :ref:`Replica Set Reconfiguration <replica-set-reconfiguration-usage>`.
