# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 18:43+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 1f503185fb65421290ce078adc64d5cb
#: ../source/reference/bson-types.txt:5
msgid "BSON Types"
msgstr ""

# 64d70b879e2e44ae9772c92e62444ff1
#: ../source/reference/bson-types.txt
msgid "On this page"
msgstr ""

# 11ad3b93bc9e4e3cbd2d41f1729bc1d3
#: ../source/reference/bson-types.txt:15
msgid ""
":term:`BSON` is a binary serialization format used to store documents and"
" make remote procedure calls in MongoDB. The BSON specification is "
"located at `bsonspec.org <http://bsonspec.org/>`_."
msgstr ""

# 31035ee273ae497a9a169d76d394209d
#: ../source/reference/bson-types.txt:19
msgid ""
"BSON supports the following data types as values in documents. Each data "
"type has a corresponding number and string alias that can be used with "
"the :query:`$type` operator to query documents by BSON type."
msgstr ""

# fe09c0e08f7c42f3b92e2aa89f0827d9
#: ../source/includes/fact-bson-types.rst:4
msgid "Type"
msgstr ""

# ed4d827f3c914a42a0ca8741fb04758e
#: ../source/includes/fact-bson-types.rst:5
msgid "Number"
msgstr ""

# 1dd1922c88ba4a4e91f2fa20d4740e9c
#: ../source/includes/fact-bson-types.rst:6
msgid "Alias"
msgstr ""

# 21df9a1334fb4f2d82a1588ffee9353b
#: ../source/includes/fact-bson-types.rst:7
msgid "Notes"
msgstr ""

# 0c3acd50245747d39fc625383289a874
#: ../source/includes/fact-bson-types.rst:9
msgid "Double"
msgstr ""

# 2b16f7f2a72c4823b9cb15c3b70bf9f2
#: ../source/includes/fact-bson-types.rst:10
msgid "1"
msgstr ""

# 5e54e0ad249d4732b02842acb5c1e4a1
#: ../source/includes/fact-bson-types.rst:11
msgid "\"double\""
msgstr ""

# 39ba0bfc35e947b887a685b3be6444bd
# c6c50eada2554c9aa7a3fe617df81f95
#: ../source/includes/fact-bson-types.rst:14
#: ../source/reference/bson-types.txt:65
msgid "String"
msgstr ""

# a81549884e3e41f08199eb5d169aa18d
#: ../source/includes/fact-bson-types.rst:15
msgid "2"
msgstr ""

# a1eecfa53c8643f1bf8e3d096b76ce1f
#: ../source/includes/fact-bson-types.rst:16
msgid "\"string\""
msgstr ""

# 3299b9f89b5249f88d4f7421df0f401a
#: ../source/includes/fact-bson-types.rst:19
msgid "Object"
msgstr ""

# 233fc3b117424e0696b63a25a65876db
#: ../source/includes/fact-bson-types.rst:20
msgid "3"
msgstr ""

# 4fce9d513d4744b5bb10f3525da0197c
#: ../source/includes/fact-bson-types.rst:21
msgid "\"object\""
msgstr ""

# 8b3fb951f25342bc819f3e6af8e99bd9
#: ../source/includes/fact-bson-types.rst:24
msgid "Array"
msgstr ""

# 7b0428d7057945418238eaccc56b4d65
#: ../source/includes/fact-bson-types.rst:25
msgid "4"
msgstr ""

# 5a464917478f465b8dbf4f3e1c8f3efd
#: ../source/includes/fact-bson-types.rst:26
msgid "\"array\""
msgstr ""

# 5ecc2bf53077474db82415ac7bec41ed
#: ../source/includes/fact-bson-types.rst:29
msgid "Binary data"
msgstr ""

# ebd14dbb2119455b901a37166a681fcc
#: ../source/includes/fact-bson-types.rst:30
msgid "5"
msgstr ""

# 53799b7ed0ae49479fd38000d6cb4ec2
#: ../source/includes/fact-bson-types.rst:31
msgid "\"binData\""
msgstr ""

# b2b695b2b85d4fb28e4290c7b029a31a
#: ../source/includes/fact-bson-types.rst:34
msgid "Undefined"
msgstr ""

# 8fa100b050db48bbabf7489286d2752a
#: ../source/includes/fact-bson-types.rst:35
msgid "6"
msgstr ""

# e6f2ad41cabf4b61ac8d4975d9cd4a73
#: ../source/includes/fact-bson-types.rst:36
msgid "\"undefined\""
msgstr ""

# 50ce96e610b8498199cac7bdda6e90da
# 8db6cd02d1bb4099815c9c297d617b32
# fccd5ccb266445c69b9a2bf3f99f0b7c
#: ../source/includes/fact-bson-types.rst:37
#: ../source/includes/fact-bson-types.rst:67
#: ../source/includes/fact-bson-types.rst:77
msgid "Deprecated."
msgstr ""

# 63a5e10731914ded87ccbddaf5aabed6
# 645b31d6d22d48098262aa6563a52c71
#: ../source/includes/fact-bson-types.rst:39
#: ../source/reference/bson-types.txt:37
msgid "ObjectId"
msgstr ""

# 7917eecfff424b60a366574b14ee1af8
#: ../source/includes/fact-bson-types.rst:40
msgid "7"
msgstr ""

# 04910505547a4d0b853e69b3e3585f66
#: ../source/includes/fact-bson-types.rst:41
msgid "\"objectId\""
msgstr ""

# 82862ab6bb414e57bc35caae8217c5ec
#: ../source/includes/fact-bson-types.rst:44
msgid "Boolean"
msgstr ""

# 3870ed24be36410dbb8b63e52be02691
#: ../source/includes/fact-bson-types.rst:45
msgid "8"
msgstr ""

# e28c3313115b4724a4a496ec49b20e4b
#: ../source/includes/fact-bson-types.rst:46
msgid "\"bool\""
msgstr ""

# ea5a055a7bcd4c4ca2e0dda9e3d3f775
# 902aac5cf1b543b2919748bd45898331
#: ../source/includes/fact-bson-types.rst:49
#: ../source/reference/bson-types.txt:137
msgid "Date"
msgstr ""

# f14c183925404279b5f465020461fb05
#: ../source/includes/fact-bson-types.rst:50
msgid "9"
msgstr ""

# 2fa0708cb04245869769535be713b768
#: ../source/includes/fact-bson-types.rst:51
msgid "\"date\""
msgstr ""

# 6e259a5f975f41b791ed27f1e05c06fb
#: ../source/includes/fact-bson-types.rst:54
msgid "Null"
msgstr ""

# 85690ae173154a3e8fb6dbcd08659114
#: ../source/includes/fact-bson-types.rst:55
msgid "10"
msgstr ""

# 25284781d6914fb4a2b0f5d4e6f88153
#: ../source/includes/fact-bson-types.rst:56
msgid "\"null\""
msgstr ""

# 7fa85f69186f4b00aa9f47b2b0f8dcbd
#: ../source/includes/fact-bson-types.rst:59
msgid "Regular Expression"
msgstr ""

# 68b2920145ce4fa5bb98fff4c493b992
#: ../source/includes/fact-bson-types.rst:60
msgid "11"
msgstr ""

# b8805d03545c4d2b9d3b5163a4614b18
#: ../source/includes/fact-bson-types.rst:61
msgid "\"regex\""
msgstr ""

# 849bca99298d461f93a43e7547ec6eb5
#: ../source/includes/fact-bson-types.rst:64
msgid "DBPointer"
msgstr ""

# bcfddb52cf6b4e7b9c8354399c45329c
#: ../source/includes/fact-bson-types.rst:65
msgid "12"
msgstr ""

# 399a14313c6e4814bc7d9aa23e05ba56
#: ../source/includes/fact-bson-types.rst:66
msgid "\"dbPointer\""
msgstr ""

# f1d5665548204304930a8e2267ac9bee
#: ../source/includes/fact-bson-types.rst:69
msgid "JavaScript"
msgstr ""

# 981d7ed339504018b2d729ca532dfe30
#: ../source/includes/fact-bson-types.rst:70
msgid "13"
msgstr ""

# df1f567d80be4329845d73b149ebe346
#: ../source/includes/fact-bson-types.rst:71
msgid "\"javascript\""
msgstr ""

# 0832ce077ffe4ecab330f16318f6f1b3
#: ../source/includes/fact-bson-types.rst:74
msgid "Symbol"
msgstr ""

# c81d90b31f914db495da568f8ebd44db
#: ../source/includes/fact-bson-types.rst:75
msgid "14"
msgstr ""

# abf9eeb7a99b41759c4d2c29ec5e66bb
#: ../source/includes/fact-bson-types.rst:76
msgid "\"symbol\""
msgstr ""

# b72e4d2aa6234ceaa4f1672608c455a0
#: ../source/includes/fact-bson-types.rst:79
msgid "JavaScript (with scope)"
msgstr ""

# 839f55ac301141c98b38914a2cd36ba9
#: ../source/includes/fact-bson-types.rst:80
msgid "15"
msgstr ""

# 9fe642882f6242adaa0d601009d117d7
#: ../source/includes/fact-bson-types.rst:81
msgid "\"javascriptWithScope\""
msgstr ""

# c6d84633b62645e3b58c326584f25394
#: ../source/includes/fact-bson-types.rst:84
msgid "32-bit integer"
msgstr ""

# 247952049740487fb1e1810545659fc0
#: ../source/includes/fact-bson-types.rst:85
msgid "16"
msgstr ""

# ddc88376c7b744b39ee0389074a002f1
#: ../source/includes/fact-bson-types.rst:86
msgid "\"int\""
msgstr ""

# 1dcb481acdc94821ab3b571b16218ddb
#: ../source/includes/fact-bson-types.rst:89
msgid "Timestamp"
msgstr ""

# 9a56e0bb4d56452e914131f37a874f92
#: ../source/includes/fact-bson-types.rst:90
msgid "17"
msgstr ""

# 12ac2115befd430b823453448c19fafb
#: ../source/includes/fact-bson-types.rst:91
msgid "\"timestamp\""
msgstr ""

# 4b43c5b19a544816a95c64a7f9faa357
#: ../source/includes/fact-bson-types.rst:94
msgid "64-bit integer"
msgstr ""

# 165d46ef432340178f6a291fb5ccbcd7
#: ../source/includes/fact-bson-types.rst:95
msgid "18"
msgstr ""

# d530f144fcb64858b0770ab600a0f492
#: ../source/includes/fact-bson-types.rst:96
msgid "\"long\""
msgstr ""

# 1e8bc1bae78244c99184055356801e65
#: ../source/includes/fact-bson-types.rst:99
msgid "Decimal128"
msgstr ""

# 0cf15a94bea640739b853b90c169556d
#: ../source/includes/fact-bson-types.rst:100
msgid "19"
msgstr ""

# 3a68529abd5846a68b6ab001776977cf
#: ../source/includes/fact-bson-types.rst:101
msgid "\"decimal\""
msgstr ""

# 6c25311b92714d7eb4354ab15e08d94f
#: ../source/includes/fact-bson-types.rst:102
msgid "New in version 3.4."
msgstr ""

# 6c69a01794584c23bc824b0d039b2a59
#: ../source/includes/fact-bson-types.rst:104
msgid "Min key"
msgstr ""

# 658864fcd4784932aa971d200989c20d
#: ../source/includes/fact-bson-types.rst:105
msgid "-1"
msgstr ""

# 96943e83d0634c9284e8629a5ba7b6be
#: ../source/includes/fact-bson-types.rst:106
msgid "\"minKey\""
msgstr ""

# 28cbe0bb269b40d0b354a84aa52c0449
#: ../source/includes/fact-bson-types.rst:109
msgid "Max key"
msgstr ""

# c82928835cb74d5d87b0dfa2a5f3f8a0
#: ../source/includes/fact-bson-types.rst:110
msgid "127"
msgstr ""

# a02573faca0b4064a36a5cdd9aef6418
#: ../source/includes/fact-bson-types.rst:111
msgid "\"maxKey\""
msgstr ""

# 29401978554e43cca4bed253d3ff91d8
#: ../source/reference/bson-types.txt:25
msgid "To determine a field's type, see :ref:`check-types-in-shell`."
msgstr ""

# 4a73e3e7508647c5b72e50e380bf7981
#: ../source/reference/bson-types.txt:27
msgid ""
"If you convert BSON to JSON, see the :doc:`Extended JSON </reference"
"/mongodb-extended-json>` reference."
msgstr ""

# 11b9193dcb874e4fa7247f4fb313e845
#: ../source/reference/bson-types.txt:30
msgid ""
"The following sections describe special considerations for particular "
"BSON types."
msgstr ""

# 53d27d9a719d4948b3bdd8f6237ed070
#: ../source/reference/bson-types.txt:39
msgid ""
"ObjectIds are small, likely unique, fast to generate, and ordered. "
"ObjectId values consists of 12-bytes, where the first four bytes are a "
"timestamp that reflect the ObjectId's creation, specifically:"
msgstr ""

# 8c91f5460da04169a16c47b9371d0b56
#: ../source/includes/fact-ObjectId-construct.rst:1
msgid "a 4-byte value representing the seconds since the Unix epoch,"
msgstr ""

# 25e7f0de19fd4bb5b193a3d04bad4842
#: ../source/includes/fact-ObjectId-construct.rst:3
msgid "a 3-byte machine identifier,"
msgstr ""

# 6f0bc5863c354e92bfcc09ce3228468e
#: ../source/includes/fact-ObjectId-construct.rst:5
msgid "a 2-byte process id, and"
msgstr ""

# 68ae476d015947c6b4b67927d6c2c2bd
#: ../source/includes/fact-ObjectId-construct.rst:7
msgid "a 3-byte counter, starting with a random value."
msgstr ""

# 431ec24fd7d94aac9a53365dcafb82bf
#: ../source/includes/fact-id-field.rst:1
msgid ""
"In MongoDB, each document stored in a collection requires a unique "
":term:`_id` field that acts as a :term:`primary key`. If an inserted "
"document omits the ``_id`` field, the MongoDB driver automatically "
"generates an :ref:`objectid` for the ``_id`` field."
msgstr ""

# eac9dbcd60954544a451c19632c52b3d
#: ../source/includes/fact-id-field.rst:6
msgid ""
"This also applies to documents inserted through update operations with "
":ref:`upsert: true <upsert-parameter>`."
msgstr ""

# 877f4889c72d4a9fa02b29b59d8ba537
#: ../source/reference/bson-types.txt:47
msgid ""
"MongoDB clients should add an ``_id`` field with a unique ObjectId. Using"
" ObjectIds for the ``_id`` field provides the following additional "
"benefits:"
msgstr ""

# 65fdab7f927443f08c8bb7b92b65ecf1
#: ../source/reference/bson-types.txt:51
msgid ""
"in the :program:`mongo` shell, you can access the creation time of the "
"``ObjectId``, using the :method:`ObjectId.getTimestamp()` method."
msgstr ""

# e7b61f53282744bb925b6e46355b90f3
#: ../source/reference/bson-types.txt:54
msgid ""
"sorting on an ``_id`` field that stores ``ObjectId`` values is roughly "
"equivalent to sorting by creation time."
msgstr ""

# aa40a9d2c5c6429e993db92d86f50606
#: ../source/includes/fact-ObjectId-timestamp-order.rst:1
msgid ""
"The relationship between the order of ``ObjectId`` values and generation "
"time is not strict within a single second. If multiple systems, or "
"multiple processes or threads on a single system generate values, within "
"a single second; ``ObjectId`` values do not represent a strict insertion "
"order. Clock skew between clients can also result in non-strict ordering "
"even for values because client drivers generate ``ObjectId`` values."
msgstr ""

# ff0503fe35184fa18e3204f3506625c0
#: ../source/reference/bson-types.txt:60
msgid ":method:`ObjectId()`"
msgstr ""

# 40519c58fddf48c28a34220f598168ee
#: ../source/reference/bson-types.txt:67
msgid ""
"BSON strings are UTF-8. In general, drivers for each programming language"
" convert from the language's string format to UTF-8 when serializing and "
"deserializing BSON. This makes it possible to store most international "
"characters in BSON strings with ease. [#sort-string-"
"internationalization]_ In addition, MongoDB :query:`$regex` queries "
"support UTF-8 in the regex string."
msgstr ""

# 47a1c50cc4934771b8fcef97e72819a7
#: ../source/reference/bson-types.txt:74
msgid ""
"Given strings using UTF-8 character sets, using :method:`sort() "
"<cursor.sort()>` on strings will be reasonably correct. However, because "
"internally :method:`sort() <cursor.sort()>` uses the C++ ``strcmp`` api, "
"the sort order may handle some characters incorrectly."
msgstr ""

# 4ade5d1e70704f6d99a771bf00d8f09c
#: ../source/reference/bson-types.txt:83
msgid "Timestamps"
msgstr ""

# 655cefc038b84f3a9b67afedfe1c618c
#: ../source/reference/bson-types.txt:85
msgid ""
"BSON has a special timestamp type for *internal* MongoDB use and is "
"**not** associated with the regular :ref:`document-bson-type-date` type. "
"Timestamp values are a 64 bit value where:"
msgstr ""

# 29b92a2150c54b30ac92fef7412c98c7
#: ../source/reference/bson-types.txt:89
msgid "the first 32 bits are a ``time_t`` value (seconds since the Unix epoch)"
msgstr ""

# 82ff4543af664f0fb807a670c7b08975
#: ../source/reference/bson-types.txt:91
msgid ""
"the second 32 bits are an incrementing ``ordinal`` for operations within "
"a given second."
msgstr ""

# 3035b24387674443940866dfc734ab89
#: ../source/reference/bson-types.txt:94
msgid ""
"Within a single :program:`mongod` instance, timestamp values are always "
"unique."
msgstr ""

# 38d6d2d1dc2e475cbd49792a529d6331
#: ../source/reference/bson-types.txt:97
msgid ""
"In replication, the :term:`oplog` has a ``ts`` field. The values in this "
"field reflect the operation time, which uses a BSON timestamp value."
msgstr ""

# e976eb65fb284e54b721c92533ef970f
#: ../source/reference/bson-types.txt:103
msgid ""
"The BSON timestamp type is for *internal* MongoDB use. For most cases, in"
" application development, you will want to use the BSON date type. See "
":ref:`document-bson-type-date` for more information."
msgstr ""

# e0ff9392067846d8bb23b180ba5935b3
#: ../source/reference/bson-types.txt:108
msgid ""
"If you insert a document containing an empty BSON timestamp in a top-"
"level field, the MongoDB server will replace that empty timestamp with "
"the current timestamp value. For example, if you create an insert a "
"document with a timestamp value, as in the following operation:"
msgstr ""

# 689b132f9bc243c0a3ac25db13edb03a
#: ../source/reference/bson-types.txt:119
msgid ""
"Then, the :method:`db.test.find() <db.collection.find()>` operation will "
"return a document that resembles the following:"
msgstr ""

# ec6354d5e8454405b3379c16a093bb8b
#: ../source/reference/bson-types.txt:126
msgid ""
"If ``ts`` were a field in an embedded document, the server would have "
"left it as an empty timestamp value."
msgstr ""

# 2b908c23033c46868becaccaaf624e93
#: ../source/reference/bson-types.txt:129
msgid ""
"Previously, the server would only replace empty timestamp values in the "
"first two fields, including ``_id``, of an inserted document. Now MongoDB"
" will replace any top-level field."
msgstr ""

# 09bb05b237a04e2cab5ca1ffcae93f00
#: ../source/reference/bson-types.txt:139
msgid ""
"BSON Date is a 64-bit integer that represents the number of milliseconds "
"since the Unix epoch (Jan 1, 1970). This results in a representable date "
"range of about 290 million years into the past and future."
msgstr ""

# 8782d442409b49d88a7e83f60d38a51d
#: ../source/reference/bson-types.txt:144
msgid ""
"The `official BSON specification <http://bsonspec.org/#/specification>`_ "
"refers to the BSON Date type as the *UTC datetime*."
msgstr ""

# aaa7c3fafcc64e88bbfa603c8ca24a75
#: ../source/reference/bson-types.txt:147
msgid ""
"BSON Date type is signed. [#unsigned-date]_ Negative values represent "
"dates before 1970."
msgstr ""

# 39d1539e3d55402591e0c85d9cf6088a
# f5253da179054f2eb2d3048592d6ccae
# 1e3a8024caf444fb896b57c33c34230c
# 63f3e91e4fb749d98a6b557af023b5e6
#: ../source/reference/bson-types.txt
msgid "Example"
msgstr ""

# c1d2c29e884c4c65a6d12378f092d766
#: ../source/reference/bson-types.txt:177
msgid ""
"Prior to version 2.0, ``Date`` values were incorrectly interpreted as "
"*unsigned* integers, which affected sorts, range queries, and indexes on "
"``Date`` fields. Because indexes are not recreated when upgrading, please"
" re-index if you created an index on ``Date`` values with an earlier "
"version, and dates before 1970 are relevant to your application."
msgstr ""

#~ msgid ""
#~ "The next sections describe special "
#~ "considerations for particular BSON types."
#~ msgstr ""

#~ msgid ""
#~ "BSON Date is a 64-bit integer that"
#~ " represents the number of milliseconds "
#~ "since the Unix epoch (Jan 1, "
#~ "1970). The `official BSON specification "
#~ "<http://bsonspec.org/#/specification>`_ refers to "
#~ "the BSON Date type as the *UTC "
#~ "datetime*."
#~ msgstr ""

# 08ce06236fec40cfba7a029df86fbf2b
#~ msgid ""
#~ "BSON supports the following data types"
#~ " as values in documents. Each data"
#~ " type has a corresponding number that"
#~ " can be used with the :query:`$type`"
#~ " operator to query documents by BSON"
#~ " type."
#~ msgstr ""

# 977032187d9b4651a928718914cbe8d7
#~ msgid "**Type**"
#~ msgstr ""

# 57f63952eef04dca85c7ed3c73a7a8a1
#~ msgid "**Number**"
#~ msgstr ""

# c0d560c80c604fb38a9352cffbc863e5
#~ msgid "Object id"
#~ msgstr ""

# bc5a79439d44461e9a675a70c0687e33
#~ msgid "255"
#~ msgstr ""

# 3df3d9d21cf04c0599a88cd5e79f30ce
#~ msgid ""
#~ "When comparing values of different "
#~ ":term:`BSON` types, MongoDB uses the "
#~ "following comparison order, from lowest "
#~ "to highest:"
#~ msgstr ""

# de9bc0b4f7184d9498ba5af4f6b7d740
#~ msgid "MinKey (internal type)"
#~ msgstr ""

# 60c1bc8c266547d8aa7f48a798ed9c3b
#~ msgid "Numbers (ints, longs, doubles)"
#~ msgstr ""

# 438f4a97745f4c30b9e98e2cae7a3c90
#~ msgid "Symbol, String"
#~ msgstr ""

# 1074d82168614e239ee7b715d1f51cb0
#~ msgid "BinData"
#~ msgstr ""

# 1f0e6f65a8f44d6d8be6e21c876606ad
#~ msgid "Date, Timestamp"
#~ msgstr ""

# b194e9938a8a4ad78886409b126b62a7
#~ msgid "MaxKey (internal type)"
#~ msgstr ""

# e5f67458330e4f27931fd1a903d80679
#~ msgid ""
#~ "MongoDB treats some types as equivalent"
#~ " for comparison purposes. For instance, "
#~ "numeric types undergo conversion before "
#~ "comparison."
#~ msgstr ""

# 51eec89a9e314f4da26786b4342653a0
#~ msgid ""
#~ "The comparison treats a non-existent "
#~ "field as it would an empty BSON"
#~ " Object. As such, a sort on the"
#~ " ``a`` field in documents ``{ }`` "
#~ "and ``{ a: null }`` would treat"
#~ " the documents as equivalent in sort"
#~ " order."
#~ msgstr ""

# 71252e4a88ab441faf081f8dd034d902
#~ msgid ""
#~ "With arrays, a less-than comparison "
#~ "or an ascending sort compares the "
#~ "smallest element of arrays, and a "
#~ "greater-than comparison or a descending "
#~ "sort compares the largest element of "
#~ "the arrays. As such, when comparing "
#~ "a field whose value is a "
#~ "single-element array (e.g. ``[ 1 ]``)"
#~ " with non-array fields (e.g. ``2``),"
#~ " the comparison is between ``1`` and"
#~ " ``2``. A comparison of an empty "
#~ "array (e.g. ``[ ]``) treats the "
#~ "empty array as less than ``null`` "
#~ "or a missing field."
#~ msgstr ""

# cea6fbbb5e7b405a8ef05a072b3950a7
#~ msgid ""
#~ "If you convert BSON to JSON, see"
#~ " :doc:`/reference/mongodb-extended-json`."
#~ msgstr ""

# dcb45d46d5e9455d93a798afeae479ee
#~ msgid ""
#~ "ObjectIds are: small, likely unique, "
#~ "fast to generate, and ordered. These "
#~ "values consists of 12-bytes, where the"
#~ " first four bytes are a timestamp "
#~ "that reflect the ObjectId's creation. "
#~ "Refer to the :doc:`ObjectId </reference"
#~ "/object-id>` documentation for more "
#~ "information."
#~ msgstr ""

# 56a428d1cb0543a398fa1e2b01838557
#~ msgid ""
#~ "The BSON Timestamp type is for "
#~ "*internal* MongoDB use. For most cases,"
#~ " in application development, you will "
#~ "want to use the BSON date type."
#~ " See :ref:`document-bson-type-date` "
#~ "for more information."
#~ msgstr ""

# 188d2b850da4408ba20df62893aee2c9
#~ msgid ""
#~ "If you create a BSON Timestamp "
#~ "using the empty constructor (e.g. ``new"
#~ " Timestamp()``), MongoDB will only generate"
#~ " a timestamp *if* you use the "
#~ "constructor in the first field of "
#~ "the document. [#id_exception]_ Otherwise, "
#~ "MongoDB will generate an empty timestamp"
#~ " value (i.e. ``Timestamp(0, 0)``.)"
#~ msgstr ""

# 331d3f842d944c6081b3422807509f64
#~ msgid ":program:`mongo` shell displays the Timestamp value with the wrapper:"
#~ msgstr ""

# d68006a1eb88438187f95759b48f9759
#~ msgid ""
#~ "Prior to version 2.1, the "
#~ ":program:`mongo` shell display the Timestamp"
#~ " value as a document:"
#~ msgstr ""

# 340d4924b70843a6964cda69881c0a1d
#~ msgid ""
#~ "If the first field in the document"
#~ " is ``_id``, then you can generate"
#~ " a timestamp in the *second* field"
#~ " of a document."
#~ msgstr ""

# 45038684a8f74e55bf2869045e56c97a
#~ msgid ""
#~ "In the following example, MongoDB will"
#~ " generate a Timestamp value, even "
#~ "though the ``Timestamp()`` constructor is "
#~ "*not* in the first field in the"
#~ " document:"
#~ msgstr ""

#~ msgid "Comparison/Sort Order"
#~ msgstr ""

#~ msgid "MongoDB sorts ``BinData`` in the following order:"
#~ msgstr ""

#~ msgid "First, the length or size of the data."
#~ msgstr ""

#~ msgid "Then, by the BSON one-byte subtype."
#~ msgstr ""

#~ msgid "Finally, by the data, performing a byte-by-byte comparison."
#~ msgstr ""

