.. meta::
   :robots: noindex, nosnippet

.. _dotnet-partition-based-sync:

===============================
Partition-Based Sync - .NET SDK
===============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Partition-Based Sync is an older mode for using Atlas Device Sync with the 
Realm .NET SDK. We recommend using :ref:`Flexible Sync <dotnet-flexible-sync-fundamentals>` 
for new apps. The information on this page is for users who are still 
using Partition-Based Sync.

.. tip::

   Realm .NET SDK v11.1.0 and newer supports the ability to migrate from 
   Partition-Based Sync to Flexible Sync. For more information, refer to: 
   :ref:`dotnet-migrate-pbs-to-fs`. We recommend you migrate your older 
   Partition-Based Sync apps to use Flexible Sync.

.. _dotnet-partition-based-sync-fundamentals:

Partition Value
---------------

When you select :ref:`Partition-Based Sync <partition-based-sync>` for your 
backend App configuration, your client implementation must include a 
partition value. This is the value of the :ref:`partition key 
<partition-key>` field you select when you configure Partition-Based Sync. 

The partition value determines which data the client application can access.
You pass in the partition value when you open a synced realm.

.. _dotnet-partition-sync-open-realm:

Open a Partition-Based Sync Realm While Online
----------------------------------------------

The steps for opening a synced realm while online are:

1. Your app code walks the user through :ref:`authenticating <dotnet-authenticate>`. 

#. Create a 
   :dotnet-sdk:`PartitionSyncConfiguration <reference/Realms.Sync.PartitionSyncConfiguration.html>` 
   object that includes the :ref:`partition value <partition-value>` and 
   the :dotnet-sdk:`User <reference/Realms.Sync.User.html>` object.

#. Open a synced realm by calling the 
   :dotnet-sdk:`GetInstanceAsync() <reference/Realms.Realm.html#Realms_Realm_GetInstanceAsync_Realms_RealmConfigurationBase_System_Threading_CancellationToken_>` 
   method, passing in the ``PartitionSyncConfiguration`` object.
   
The following code demonstrates these steps:

.. literalinclude:: /examples/generated/dotnet/OpenARealmExamples.snippet.open-synced-realm.cs
   :language: csharp

In the above example, the code shows how to open the realm *asynchronously* 
by calling ``GetInstanceAsync()``. You can also open a realm *synchronously* 
by calling the 
:dotnet-sdk:`GetInstance() <reference/Realms.Realm.html#Realms_Realm_GetInstance_System_String_>` 
method:

.. literalinclude:: /examples/generated/dotnet/OpenARealmExamples.snippet.open-synced-realm-synchronously.cs
   :language: csharp

.. seealso::

   :ref:`Partitions <sync-partitions>`

   :ref:`Partition Strategies <partition-strategies>`

Open a Partition-Based Sync Realm While Offline
-----------------------------------------------

Once a user authenticates, the ``User`` object persists on the device until the 
user logs off. This allows your app to 
:ref:`retrieve an existing user <dotnet-retrieve-current-user>` and open a 
synced realm in an offline state. Changes that occur while offline will be 
synced by the SDK once the device reconnects to your App.

The following code shows how to check if there is an existing ``User`` object. 
If none is found, it uses the process outlined about to obtain a user. If the 
device already has a ``user``, it opens the synced realm with that user:

.. literalinclude:: /examples/generated/dotnet/OpenARealmExamples.snippet.check-if-offline.cs
   :language: csharp

.. _dotnet-migrate-pbs-to-fs:

Migrate from Partition-Based Sync to Flexible Sync
--------------------------------------------------

You can migrate your App Services Device Sync Mode from Partition-Based Sync 
to Flexible Sync. Migrating is an automatic process that does not require 
any changes to your application code. Automatic migration requires Realm 
.NET SDK version 11.1.0 or newer. 

Migrating enables you to keep your existing App Services users and 
authentication configuration. Flexible Sync provides more versatile permissions
configuration options and more granular data synchronization.

For more information about how to migrate your App Services App from 
Partition-Based Sync to Flexible Sync, refer to :ref:`Migrate Device Sync Modes 
<realm-sync-migrate-modes>`.

.. _dotnet-update-client-code-after-pbs-to-fs-migration:

Updating Client Code After Migration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The automatic migration from Partition-Based Sync to Flexible Sync does not
require any changes to your client code. However, to support this 
functionality, Realm automatically handles the differences between the two 
Sync Modes by:

- Automatically creating Flexible Sync subscriptions for each object type 
  where ``partitionKey == partitionValue``.
- Injecting a ``partitionKey`` field into every object if one does not already 
  exist. This is required for the automatic Flexible Sync subscription.

If you need to make updates to your client code after migration, consider 
updating your client codebase to remove hidden migration functionality.
You might want update your client codebase when:

- You add a new model or change a model in your client codebase
- You add or change functionality that involves reading or writing Realm objects
- You want to implement more fine-grained control over what data you sync

Make these changes to convert your Partition-Based Sync client code to use 
Flexible Sync:

- Change your 
  :dotnet-sdk:`PartitionSyncConfiguration <reference/Realms.Sync.PartitionSyncConfiguration.html>`
  to a
  :dotnet-sdk:`FlexibleSyncConfiguration <reference/Realms.Sync.FlexibleSyncConfiguration.html>`.
- Add relevant properties to your object models to use in your Flexible Sync 
  subscriptions. For example, you might add an ``ownerId`` property to enable
  a user to sync only their own data.
- Remove automatic Flexible Sync subscriptions and manually create the 
  relevant subscriptions.

For examples of Flexible Sync permissions strategies, including examples of 
how to model data for these strategies, refer to :ref:`flexible-sync-permissions-guide`.

Remove and Manually Create Subscriptions
````````````````````````````````````````

When you migrate from Partition-Based Sync to Flexible Sync, Realm
automatically creates hidden Flexible Sync subscriptions for your app. The 
next time you add or change subscriptions, we recommend that you:

1. :ref:`Remove the automatically-generated subscriptions <dotnet-remove-subscriptions>`. 
2. :ref:`Manually add the relevant subscriptions in your client codebase 
   <dotnet-sync-add-subscription>`.

This enables you to see all of your subscription logic together in your 
codebase for future iteration and debugging.

For more information about the automatically-generated Flexible Sync 
subscriptions, refer to :ref:`realm-sync-migrate-client`.

.. _dotnet-convert-to-sync:

Migrate from Non-Synced Realms to Synced Realms
-----------------------------------------------
You can convert a non-synced realm to a synced realm (with partition-based sync). 
To convert from a non-synced realm to one that uses partition-based sync, you do 
the following:

1. Open the existing realm.
2. Create a configuration for a new realm.
3. Call the :dotnet-sdk:`WriteCopy() <reference/Realms.Realm.html#Realms_Realm_WriteCopy_Realms_RealmConfigurationBase_>` 
   method on the existing realm to copy the data to the new realm. 

In the following code, we open a non-synced realm, create a new 
:dotnet-sdk:`PartitionSyncConfiguration <reference/Realms.Sync.PartitionSyncConfiguration.html>` 
object and then copy the existing realm to the new realm. We then delete the 
existing realm and open the new realm.

.. literalinclude:: /examples/generated/dotnet/Convert.snippet.nonsync-to-sync.cs
   :language: csharp
   :copyable: true

.. include:: /includes/note-writecopy-local-to-sync.rst