.. meta::
   :robots: nosnippet

.. _authentication-providers:

========================
Authentication Providers
========================

.. default-domain:: mongodb

.. toctree::
   :titlesonly:
   :hidden:
   
   Anonymous </authentication/anonymous>
   API Key </authentication/api-key>
   Email/Password </authentication/email-password>
   Facebook </authentication/facebook>
   Google </authentication/google>
   Apple ID  </authentication/apple>
   Custom Function </authentication/custom-function>
   Custom JWT </authentication/custom-jwt>
   Firebase (Custom JWT) </authentication/firebase-jwt>
   Okta (Custom JWT) </authentication/okta-jwt>

Users log in to your client application using authentication providers.

Apps provide several authentication provider options:

- :ref:`Anonymous Authentication <anonymous-authentication>` allows
  users to view or edit data without creating an account.

- The :ref:`Email/Password <email-password-authentication>` and
  :ref:`API Key <api-key-authentication>` providers let you register new
  user accounts and API keys that are unique to your App.

- The OAuth providers for :ref:`Facebook <facebook-authentication>`,
  :ref:`Google <google-authentication>`, and :ref:`Apple
  <apple-id-authentication>` allow users to log in with their existing
  accounts using the OAuth 2.0 standard.

- The :ref:`Custom JWT <custom-jwt-authentication>` and :ref:`Custom
  Function <custom-function-authentication>` providers allow you to
  integrate with any authentication system using standard JSON Web
  Tokens or custom code that you write.

Use a single provider when all users authenticate in the same way. For 
more flexibility, you can enable multiple providers. Link user accounts 
from one provider to another with client SDKs.

.. example::

   A blog or news service app might use multiple authentication providers. 
   A reader might authenticate anonymously with no need to register. 
   Journalists would sign in through an account with authorization to 
   publish content. In this example, an anonymous user might have read-only 
   access. The journalist with an account would have write access.

.. _auth-provider-list:

Authentication Providers
------------------------

Atlas App Services provides these authentication providers for user login:

.. list-table::
   :header-rows: 1
   :widths: 6 18

   * - Authentication Provider
     - Description

   * - | :doc:`Anonymous </authentication/anonymous>`
       | ``anon-user``
     - Authenticate without credentials. Allow users to create and interact 
       with data without creating an identity. This is great for a read-only 
       user, or one who does not need to persist important data. You can 
       later link the data from the Anonymous session with a permanent 
       identity. See the client SDK documentation for details.

   * - | :doc:`Email/Password </authentication/email-password>`
       | ``local-userpass``
     - Authenticate with an email address and password. Client applications 
       must implement email confirmation and password reset functionality. 
       Realm SDKs provide methods to simplify or customize this 
       implementation.

   * - | :doc:`API Key </authentication/api-key>`
       | ``api-key``
     - Log in with API keys generated in the App Services admin console 
       or by your end users.

   * - | :doc:`Apple ID </authentication/apple>`
       | ``oauth2-apple``
     - Use OAuth2 to log in with an Apple ID.

   * - | :doc:`Google </authentication/google>`
       | ``oauth2-google``
     - Use OAuth2 to log in with an
       `existing Google account <https://developers.google.com/identity/sign-in/web/>`_.

   * - | :doc:`Facebook </authentication/facebook>`
       | ``oauth2-facebook``
     - Use OAuth2 to log in with an
       `existing Facebook account <https://developers.facebook.com/docs/facebook-login/>`_.

   * - | :doc:`Custom JWT </authentication/custom-jwt>`
       | ``custom-token``
     - Log in with JWT-based credentials generated by a service external 
       to App Services.

   * - | :doc:`Custom Function </authentication/custom-function>`
       | ``custom-function``
     - Log in with arbitrary credentials according to custom authentication 
       logic that you define.

.. _user-metadata:

User Metadata
-------------

Each authentication provider can associate metadata fields with an 
application user. Some providers, such as Email/Password, always add 
specific fields. Others allow you to configure the data to associate with 
each user.

To learn more, see :ref:`Authentication Provider Metadata <auth-provider-metadata>`.

.. list-table::
   :header-rows: 1
   :widths: 30 70
   
   * - Authentication Provider
     - Details
   
   * - :doc:`Anonymous </authentication/anonymous>`
     - Anonymous users have no metadata.
   
   * - :doc:`Email/Password </authentication/email-password>`
     - Email/Password users always have an ``email`` field. This contains 
       the user's email address.
   
   * - :doc:`API Key (Server & User) </authentication/api-key>`
     - API Key users always have a ``name`` field. When you create an API 
       key, you give it a name. When users authenticate with API keys, 
       the ``name`` field contains the key name.
   
   * - OAuth 2.0 (:doc:`Facebook </authentication/facebook>` & :doc:`Google </authentication/google>`)
     - OAuth 2.0 authentication services can provide user metadata. Specify 
       the metadata you want to access in the provider's
       :guilabel:`Metadata Fields` configuration. Each user must grant 
       your app permission to access the requested data.
   
   * - :doc:`Custom Function </authentication/custom-function>`
     - Custom Function authentication users do not have metadata.
   
   * - :doc:`Custom JWT </authentication/custom-jwt>`
     - You can add metadata to JWT users. This metadata comes from data 
       in the JWT that the authentication system returns. Use the 
       :guilabel:`Metadata Fields` configuration to specify the expected 
       metadata. This configuration maps fields in the JWT to fields in 
       the user object.

Summary
-------

- App Services's **authentication providers** allow users to log in 
  to your app.

- You can link a specific user across
  multiple providers.

- Each authentication provider has metadata about a user's identity.
