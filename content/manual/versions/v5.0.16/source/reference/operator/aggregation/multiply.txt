=======================
$multiply (aggregation)
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $multiply

   Multiplies numbers together and returns the result. Pass the
   arguments to :expression:`$multiply` in an array.

   The :expression:`$multiply` expression has the following syntax:

   .. code-block:: javascript

      { $multiply: [ <expression1>, <expression2>, ... ] }

   The arguments can be any valid :ref:`expression
   <aggregation-expressions>` as long as they resolve to numbers. For
   more information on expressions, see :ref:`aggregation-expressions`.

Example
-------

Consider a ``sales`` collection with the following documents:

.. code-block:: javascript

   { "_id" : 1, "item" : "abc", "price" : 10, "quantity": 2, date: ISODate("2014-03-01T08:00:00Z") }
   { "_id" : 2, "item" : "jkl", "price" : 20, "quantity": 1, date: ISODate("2014-03-01T09:00:00Z") }
   { "_id" : 3, "item" : "xyz", "price" : 5, "quantity": 10, date: ISODate("2014-03-15T09:00:00Z") }

The following aggregation uses the :expression:`$multiply` expression
in the :pipeline:`$project` pipeline to multiply the ``price`` and the
``quantity`` fields:

.. code-block:: javascript

   db.sales.aggregate(
      [
        { $project: { date: 1, item: 1, total: { $multiply: [ "$price", "$quantity" ] } } }
      ]
   )

The operation returns the following results:

.. code-block:: javascript

   { "_id" : 1, "item" : "abc", "date" : ISODate("2014-03-01T08:00:00Z"), "total" : 20 }
   { "_id" : 2, "item" : "jkl", "date" : ISODate("2014-03-01T09:00:00Z"), "total" : 20 }
   { "_id" : 3, "item" : "xyz", "date" : ISODate("2014-03-15T09:00:00Z"), "total" : 50 }
