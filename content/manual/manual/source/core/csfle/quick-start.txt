.. facet::
   :name: programming_language
   :values: csharp, go, java, javascript/typescript, python

.. meta::
   :keywords: code example, node.js, compass, java sync
   :description: Encrypt documents using Client-Side Field Level Encryption with MongoDB drivers, including creating encryption keys and configuring clients.

.. _csfle-quick-start:
.. _csfle-guide-intro:
.. _download-example-project:

=================
{+csfle-abbrev+} Quick Start
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. composable-tutorial::
   :options: language-no-dependencies
   :defaults: python

   Overview
   --------

   This guide shows you how to encrypt a document with automatic
   {+csfle+} ({+csfle-abbrev+}) and a MongoDB driver.

   After completing this guide, you should have the following knowledge
   and software:

   - Knowledge of the steps to configure a driver to encrypt fields in a
     document.
   - A working, but not production-ready, client application that
     utilizes automatic {+csfle+}.

   .. important:: Do Not Use this Application In Production

      Since this example application stores an encryption key on your
      application's filesystem, you risk unauthorized access to the key or
      loss of the key to decrypt your data.

      To view a tutorial that demonstrates how to create a production-ready
      {+csfle-abbrev+}-enabled application, see
      :ref:`<csfle-tutorial-automatic-encryption>`.

   Before You Get Started
   ----------------------

   .. include:: /includes/set-up-section.rst

   .. include:: /includes/select-your-language.rst

   Full Application Code
   ~~~~~~~~~~~~~~~~~~~~~

   To see the complete code for the sample application, select your programming
   language in the language selector.

   .. selected-content::
      :selections: java-sync

      `Complete Java Application <{+sample-app-url-csfle+}/java/local/reader/>`__

   .. selected-content::
      :selections: nodejs

      `Complete Node.js Application <{+sample-app-url-csfle+}/node/local/reader/>`__

   .. selected-content::
      :selections: python

      `Complete Python Application <{+sample-app-url-csfle+}/python/local/reader/>`__

   .. selected-content::
      :selections: csharp

      `Complete C# Application <{+sample-app-url-csfle+}/dotnet/local/reader/CSFLE/>`__

   .. selected-content::
      :selections: go

      `Complete Go Application <{+sample-app-url-csfle+}/go/local/reader/>`__

   .. _csfle-quick-start-create-master-key:

   Procedure
   ---------

   .. selected-content::
      :selections: java-sync

      .. include:: /includes/csfle/javasync-quickstart-steps.rst

   .. selected-content::
      :selections: nodejs

      .. include:: /includes/csfle/nodejs-quickstart-steps.rst

   .. selected-content::
      :selections: python

      .. include:: /includes/csfle/python-quickstart-steps.rst

   .. selected-content::
      :selections: csharp

      .. include:: /includes/csfle/csharp-quickstart-steps.rst

   .. selected-content::
      :selections: go

      .. include:: /includes/csfle/go-quickstart-steps.rst

Learn More
----------

To view a tutorial on production-ready {+csfle-abbrev+} with a remote
KMS, see :ref:`<csfle-tutorial-automatic-encryption>`.

To learn how {+csfle-abbrev+} works, see
:ref:`<csfle-fundamentals>`.

To learn more about the topics mentioned in this guide, see the
following links:

- :ref:`{+cmk-long+}s <qe-reference-keys-key-vaults>`
- :ref:`{+kms-long+} providers <qe-fundamentals-kms-providers>`
- :ref:`{+dek-long+}s <qe-reference-keys-key-vaults>`
- :ref:`{+key-vault-long+}s <qe-reference-keys-key-vaults>`
- :ref:`Encryption Schemas <csfle-reference-encryption-schemas>`
- :ref:`mongocryptd <csfle-reference-mongocryptd>`
- :ref:`{+csfle-abbrev+}-specific MongoClient settings <csfle-reference-mongo-client>`
- :ref:`Automatic {+csfle-abbrev+} Writes <csfle-fundamentals-automatic-encryption>`
