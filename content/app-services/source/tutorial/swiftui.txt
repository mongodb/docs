.. meta::
   :robots: noindex, nosnippet

.. _ios-swift-tutorial:
.. _swift-swiftui-tutorial:

===================================================
Tutorial: Atlas Device Sync for Swift with Swift UI
===================================================

.. meta::
   :keywords: code example
   :description: Learn how to build, modify, and run a demo SwiftUI application using Atlas Device SDK for Swift and Atlas Device Sync.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

*Estimated time to complete: 30 minutes, depending on your experience with SwiftUI*

Realm provides a Swift SDK that allows you to create a native iOS 
mobile application with Swift or Objective-C. This tutorial is based on the 
SwiftUI Flexible Sync Template App, named ``swiftui.todo.flex``, which illustrates
the creation of a to-do list application. This application enables users to: 

- Register their email as a new user account.
- Sign in to their account with their email and password (and sign out later).
- View, create, modify, and delete their own tasks.
- View all tasks, even where the user is not the owner.

The template app also provides a toggle that simulates the device being in 
"Offline Mode." This toggle lets you quickly test Device Sync functionality 
on the simulator, emulating the user having no internet connection. However,
you would likely remove this toggle in a production application.

This tutorial builds on the Template App. You will add a new ``priority`` field 
to the existing ``Item`` model and update the 
:ref:`Flexible Sync subscription <queryable-fields>` to only show items within 
a range of priorities.

Learning Objectives
-------------------

This tutorial illustrates how you might adapt the
template app for your own needs. You would not necessarily make
this change given the current structure of the template app.

In this tutorial, you will learn how to:

- Update a Realm object model with a non-breaking change.
- Update a Device Sync subscription.
- Add a queryable field to the Device Sync configuration on the server
  to change which data is synchronized.

.. tip::

   If you prefer to get started with your own application rather than follow a 
   guided tutorial, check out the :ref:`Swift Quick Start <ios-client-quick-start-with-sync>`. 
   It includes copyable code examples and the essential information that you 
   need to set up an Atlas App Services backend.

   For a SwiftUI-specific get started experience, refer to the :ref:`ios-swiftui-quick-start`.

Prerequisites
-------------

- Ensure that you have the necessary software installed. The Swift SDK requires
  `Xcode <https://developer.apple.com/xcode/>`_ version 13.1 or newer.

.. include:: /includes/tutorial-template-prerequisite.rst  

Start with the Template
-----------------------

This tutorial is based on the SwiftUI Flexible Sync Template App named 
``swiftui.todo.flex``. We start with the default app and build new features 
on it. 

.. include:: /includes/tutorial-learn-more-template-app.rst

.. tabs::

   .. tab:: App Services UI
      :tabid: ui

      Follow the procedure described in the 
      :ref:`create-app` guide, and select
      :guilabel:`Create App from Template`. Select the 
      :guilabel:`Real-time Sync` template. This creates an App Services App
      pre-configured to use with one of the Device Sync template app clients.

      After you create a template app, the UI displays a modal labeled 
      :guilabel:`Get the Front-end Code for your Template`. This modal 
      provides instructions for downloading the template app client code 
      as a ``.zip`` file or using {+cli+} to get the client.

      After selecting the ``.zip`` or {+cli+} method, follow the on-screen
      instructions to get the client code. For this tutorial, select the 
      :guilabel:`SwiftUI (iOS + SwiftUI)` client code.

      .. include:: /includes/note-windows-zip.rst

   .. tab:: App Services CLI
      :tabid: cli

      The :ref:`{+cli-bin+} apps create <appservices-apps-create>`
      command sets up the backend and creates a SwiftUI template app for
      you to use as a base for this tutorial.

      Run the following command in a terminal window to create an app
      named "MyTutorialApp" that is deployed in the ``US-VA`` region
      with its environment set to "development" (instead of production
      or QA).

      .. code-block:: shell

         {+cli-bin+} app create \
           --name MyTutorialApp \
           --template swiftui.todo.flex \
           --deployment-model global \
           --environment development

      The command creates a new directory in your current path with the
      same name as the value of the ``--name`` flag.

   .. tab:: GitHub Repository
      :tabid: github

      You can fork and clone a GitHub repository that contains the Device 
      Sync client code. The SwiftUI client code is available at
      :github:`https://github.com/mongodb/template-app-swiftui-todo <mongodb/template-app-swiftui-todo>`.

      If you use this process to get the client code, you must create a
      template app to use with the client. Follow the instructions at 
      :ref:`create-template-app` to use the Atlas App Services UI, {+cli+},
      or Admin API to create a Device Sync template app.

Explore the Template App
------------------------

.. procedure::

   .. step:: Open the App

      Open the frontend client's ``App.xcodeproj`` in Xcode. 
      
      If you downloaded the client as a ``.zip`` file or cloned the client 
      GitHub repository, you must manually insert the App Services App ID 
      in the appropriate place in your client. Follow the 
      :guilabel:`Configuration` instructions in the client :file:`README.md` 
      to learn where to insert your App ID.

   .. step:: Explore the App Structure

      Take a few minutes to explore how the project is organized while 
      Swift Package Manager downloads the latest version of the Realm Swift 
      SDK. Within the App directory, you can see a few files worth noting:

      .. cssclass:: config-table
      .. list-table::
         :header-rows: 1
         :widths: 40 60

         * - File
           - Purpose

         * - ``AppConfig.swift``
           - This file contains the logic to read the ``appId`` and ``baseUrl`` 
             from the ``Realm.plist``. This is pre-populated with the 
             ``appId`` for your Template App.

         * - ``App.swift``
           - This file uses the values from ``AppConfig.swift`` to initialize
             the ``RealmSwift.App``. The ``App`` is how your app communicates 
             with the App Services backend. This provides access to login and 
             authentication. This file also contains the error handler that 
             listens for Device Sync errors.

             To learn more about how you can customize your app configuration,
             see: :ref:`Connect to an Atlas App Services Backend <ios-init-appclient>`.

             This file is also the entrypoint to the SwiftUI app. We pass the 
             ``App`` to the ``ContentView`` that observes the app state 
             for user authentication state.

      In this tutorial, you'll be working in the following files:

      .. cssclass:: config-table
      .. list-table::
         :header-rows: 1
         :widths: 35 65

         * - File
           - Purpose

         * - ``Item.Swift``
           - This file, located at the root of the project, defines the 
             Realm object we store in the database.

         * - ``CreateItemView.swift``
           - This file, located in the ``Views`` directory, provides the 
             functionality to add a new item to the list.

         * - ``ContentView.Swift``
           - This file, located in the ``Views`` directory, defines the 
             Flexible Sync subscription.

   .. step:: Run the App

      Without making any changes to the code, you should be able to run the app 
      in the iOS Simulator or on a physical device.

      Run the app, register a new user account, and then add a new Item to your 
      todo list.

   .. step:: Check the Backend

      Log in to `Atlas App Services <http://cloud.mongodb.com>`_. In the 
      :guilabel:`Data Services` tab, click on :guilabel:`Browse Collections`. In the list 
      of databases, find and expand the :guilabel:`todo` database, and then the 
      :guilabel:`Item` collection. You should see the document you created 
      in this collection.

Modify the Application
----------------------

Add a New Property
~~~~~~~~~~~~~~~~~~

.. procedure::

   .. step:: Add a Property to the Model

      Now that you have confirmed everything is working as expected, we can 
      add changes. In this tutorial, we have decided that we want to add a 
      "priority" property to each Item so that we can filter Items by their 
      priorities. The priority property uses a PriorityLevel enum 
      to constrain the possible values.
      
      To do this, follow these steps:

      A. Open the ``App.xcodeproj`` in Xcode. 

      #. Open the ``Item.swift`` class file.

      #. Add the following property to the ``Item`` class:

         .. code-block:: swift

            @Persisted var priority: PriorityLevel
            
      #. Also add a PriorityLevel ``PersistableEnum`` below the ``Item`` class:
         
         .. code-block:: swift
            :emphasize-lines: 9-23

            class Item: Object, ObjectKeyIdentifiable {
               @Persisted(primaryKey: true) var _id: ObjectId
               @Persisted var isComplete = false
               @Persisted var summary: String
               @Persisted var owner_id: String
               @Persisted var priority: PriorityLevel
            }

            enum PriorityLevel: Int, PersistableEnum, CaseIterable {
               case severe = 0
               case high = 1
               case medium = 2
               case low = 3

               var description: String {
                  switch self {
                  case .severe: return "Severe"
                  case .high: return "High"
                  case .medium: return "Medium"
                  case .low: return "Low"
                  }
               }
            }

         :ref:`PersistableEnum is the protocol <ios-realm-enum>` that marks 
         enum types as persistable directly in Realm. We set the enum's type
         as ``Int`` here instead of ``String`` so we can query based on a 
         numeric priority level later. We use a ``description`` computed property
         to display a string representation of the priority in the UI.
         
   .. step:: Set the Priority when Creating a New Item

      A. In the ``Views`` directory, go to ``CreateItemView.swift``. 
         Add a new ``@State`` property under the existing ``itemSummary`` property.
         For now, set the default value to medium priority:

         .. code-block:: swift
            :emphasize-lines: 2

            @State var itemSummary = ""
            @State var priority = PriorityLevel.medium

      #. Now, in the ``Form`` body, add a Picker that enables the user to 
         choose which priority level to set on the new Item. Locate the 
         ``Section`` that contains the buttons, and insert the following 
         code *above* it:

         .. code-block:: swift

            Section(header: Text("Priority")) {
                Picker(selection: $priority, label: Text("Set priority")) {
                    ForEach(PriorityLevel.allCases, id: \.self) { priority in
                        Text(priority.description)
                    }
                }
            }

      #. Now, move down to the ``Button(action:`` that sets the values of the 
         ``newItem`` when the user presses the ``Save`` button. Add a line 
         below ``newItem.summary`` to also set the ``priority`` property:

         .. code-block:: swift
            :emphasize-lines: 2

            newItem.summary = itemSummary
            newItem.priority = priority

   .. step:: Run and Test
    
      At this point, you can run the application again. Log in using the account 
      you created earlier in this tutorial. You will see the one Item you 
      previously created. Add a new Item, and you will see that you can now 
      set the priority. Choose ``High`` for the priority and save the Item. 

      Now switch back to the Atlas data page in your browser, and refresh the 
      ``Item`` collection. You should now see the new Item with the ``priority`` 
      field added and set to **1**. The existing Item does not have a ``priority`` 
      field.

      .. figure:: /images/dotnet-tutorial-two-new-items.png
         :alt:  Two items in a collection
         :figwidth: 300px

      .. note:: Why Didn't This Break Sync?
      
         Adding a property to a Realm object is not a breaking change and therefore 
         does not require a :ref:`client reset <client-resets>`. The template 
         app has Development Mode enabled, so changes to the client Realm object 
         are reflected in the server-side schema. For more information, see 
         :ref:`<development-mode>` and :ref:`<additive-changes-synced-schema>`.

Change the Subscription
~~~~~~~~~~~~~~~~~~~~~~~

.. procedure::

   .. step:: Update the subscription

      In the ``ContentView.swift`` file, we create the Flexible Sync subscription 
      that defines which documents we sync with the user's device & account. 
      Look for the ``let config = user.flexibleSyncConfiguration(initialSubscriptions:``
      variable where we set the initial subscriptions. Within the ``subscriptions.append()`` 
      method, you can see that we are currently subscribing to all documents where 
      the ``owner_id`` property matches the authenticated user's id. We want to maintain 
      that, but *only* sync Items that are marked as High or Severe priority. 

      This is why we set the ``PriorityLevel`` enum to type ``Int``, where the highest 
      priority (severe) has a value of 0, and the lowest priority (low) has 
      a value of 3. We can make direct comparisons between an Int and the 
      priority property. To do so, update the query statement to include documents 
      where the priority is equal to or *less* than PriorityLevel.High (or 1), as 
      shown here. 
      
      We'll also add the ``reRunOnOpen`` bool, and set it to ``true``, 
      to force the subscription query to recalculate which documents to sync
      every time we open the app.

      .. code-block:: swift
         :emphasize-lines: 2-5, 9, 12

         let config = user.flexibleSyncConfiguration(initialSubscriptions: { subs in
            if let foundSubscription = subs.first(named: Constants.myItems) {
               foundSubscription.updateQuery(toType: Item.self, where: {
                  $0.owner_id == user.id && $0.priority <= PriorityLevel.high
               })
            } else {
               // No subscription - create it
               subs.append(QuerySubscription<Item>(name: Constants.myItems) {
                  $0.owner_id == user.id && $0.priority <= PriorityLevel.high
               })
            }
         }, rerunOnOpen: true)

   .. step:: Run and Test
    
      Run the application again. Log in using the account you created earlier 
      in this tutorial. Because we added ``reRunOnOpen``, the app
      should re-sync only the documents that match the Flexible Sync query.
      After an initial moment when Realm resyncs the document collection, you 
      will only see the new Item of High priority that you created.

      The Item document you initially created is not synced, 
      because it does not have a ``priority`` field. If you want this Item to 
      be synced, you can edit the document in the Atlas UI and add a value for 
      the priority field.

      .. include:: /includes/tip-queryable-fields-dev-mode.rst
      
      If you want to further test the functionality, you can create Items of various 
      priorities. You will see that a new Item with a lower priority briefly
      appears in the list of Items and then disappears. The Sync error handler
      helpfully provides a message describing this behavior:

      .. code-block:: sh
         :copyable: false

         ERROR 
         "Client attempted a write that is outside 
         of permissions or query filters; it has been reverted"

      You can also see this message in the console log.

      In this scenario, Realm creates the Item locally, syncs it with the 
      backend, and then reverts the write because it doesn't meet the 
      subscription rules.

Conclusion
----------

Adding a property to an existing Realm object is a non-breaking change, and 
Development Mode ensures that the schema change is reflected server-side.

What's Next?
------------

- Consider adding the new ``Priority`` property to the ``ItemList``, ``ItemRow``, and ``ItemDetail`` Views.
- Read our :ref:`Swift SDK <ios-intro>` and :ref:`SwiftUI <ios-swiftui-examples>` documentation.
- Find developer-oriented blog posts and integration tutorials on the 
  `MongoDB Developer Hub <https://developer.mongodb.com>`__.
- Join the `MongoDB Community forum <https://developer.mongodb.com/community/forums/c/realm/9>`__ 
  to learn from other MongoDB developers and technical experts.
- Explore engineering and expert-provided `example projects <https://www.mongodb.com/docs/realm/example-projects/>`__.

.. include:: /includes/tutorial-request-for-feedback-note.rst
