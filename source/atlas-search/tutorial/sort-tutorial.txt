.. facet::
   :name: programming_language
   :values: csharp, go, java, javascript/typescript, kotlin, python, shell

.. _sort-tutorial:

==============================
How to Sort Your |fts| Results
==============================

.. default-domain:: mongodb

.. meta::
   :keywords: sort for speed and precision, search scoring, compound operator, compound search queries, $search sort option, code example, atlas ui, compass, java sync, node.js
   :description: Learn how to sort your Atlas Search results in ascending or descending order.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This tutorial describes how to :ref:`sort <sort-ref>` the |fts| results
by numeric, date, and string fields in the ``sample_mflix.movies``
collection in ascending or descending order. It also demonstrates how to
perform a case-insensitive :ref:`sort <sort-ref>` of your |fts| results.
When you create an |fts| index on a collection, you can configure the
index to normalize the value of a string field to lowercase. This allows
you to sort your query results regardless of the sorted field's letter
case. 

.. tabs:: 

   .. tab:: Default Sort
      :tabid: default

      To demonstrate how to sort |fts| results by numeric, date, and
      string fields using the default behavior of |fts| ``sort`` option,
      the tutorial takes you through the following steps:

      1. Create an |fts| index on the string field named ``title``, date
         field named ``released``, and numeric field named ``awards.wins`` in
         the ``sample_mflix.movies`` collection for both running queries
         against these fields and sorting the results by these fields.

         .. note:: 

            If you enable :ref:`dynamic mappings <static-dynamic-mappings>`,
            |fts| automatically indexes :ref:`number <bson-data-types-number>`
            and :ref:`date <bson-data-types-date>` types for sorting. 
            It doesn't dynamically index :ref:`string
            <bson-data-types-string>` fields for sorting. Instead, you must
            use the :ref:`token <bson-data-types-token>` type to index string
            fields for sorting. 

      #. Run |fts| queries against the ``title``, ``released``, and
         ``awards.wins`` fields in the ``sample_mflix.movies`` collection and
         sort the results in ascending and descending order by these fields.

   .. tab:: Case-Insensitive Sort
      :tabid: normalize

      To demonstrate how to sort |fts| results by normalizing the value
      of a string field to lowercase using |fts| ``sort`` option, the
      tutorial takes you through the following steps: 

      1. Load sample documents into the ``sample_mflix.movies``
         collection on  your |service| {+cluster+}.
      2. Create |fts| indexes on the string field named ``title`` for
         both running queries and sorting the results by this field.  

         .. note:: 

            If you enable :ref:`dynamic mappings <static-dynamic-mappings>`,
            |fts| automatically indexes :ref:`number <bson-data-types-number>`
            and :ref:`date <bson-data-types-date>` types for sorting. It
            doesn't dynamically index :ref:`string <bson-data-types-string>`
            fields for sorting. Instead, you must use the :ref:`token
            <bson-data-types-token>` type to index string fields for sorting. 

      #. Run |fts| queries against the ``title`` field in the collection and 
         sort the results by the indexed fields.

Before you begin, ensure that your |service| cluster meets the
requirements described in the :ref:`fts-tutorials-prereqs`. 

.. include:: /includes/atlas-roles/create-search-index.rst

Load the Sample Data  
--------------------- 

.. tabs:: 
   :hidden: 

   .. tab:: Default Sort
      :tabid: default

      To sort documents in the ``sample_mflix.movies`` collection by
      number, date, and string fields using the default ``sort``
      behavior, you can skip this section and proceed to create the
      index for the collection. 

   .. tab:: Case-Insensitive Sort
      :tabid: normalize

      Overview 
      ~~~~~~~~

      To demonstrate how |fts| sorts documents regardless of the letter
      case, we provide sample documents. Each sample document represents
      a movie and contains three fields that specifies the movie's title
      (in lowercase), genre, and number of awards. In this section, you
      load the sample documents to the ``sample_mflix.movies``
      collection in your |service| {+cluster+}. You can load the sample
      collection using the {+atlas-ui+} or {+mongosh+}.  

      Procedure 
      ~~~~~~~~~

      .. include:: /includes/steps-fts-tutorial-normalized-sort-load-data.txt

.. _sort-tutorial-create-index:

Create the |fts| Index 
----------------------

Overview 
~~~~~~~~

.. tabs:: 
   :hidden: 

   .. tab:: Default Sort
      :tabid: default

      In this section, you will create an |fts| index on the ``title``, 
      ``released``, and ``awards.wins`` fields in the ``sample_mflix.movies`` 
      collection for running queries against these fields and sorting the
      results by these fields. 

   .. tab:: Case-Insensitive Sort
      :tabid: normalize

      In this section, you will create an |fts| index on the ``title``
      field in the ``sample_mflix.movies`` collection for running
      queries against this field and sorting the results by this field.

Procedure 
~~~~~~~~~

.. |search-type| replace:: :guilabel:`Atlas Search`
.. |database-name| replace:: ``sample_mflix`` database
.. |collection-name| replace:: ``movies`` collection
   
.. tabs:: 
   :hidden: 

   .. tab:: Default Sort
      :tabid: default

      .. |index-name| replace:: ``sort-tutorial``

      .. include:: /includes/steps-fts-sort-create-index.rst

   .. tab:: Case-Insensitive Sort
      :tabid: normalize

      .. |index-name| replace:: ``case-insensitive-sort``

      .. include:: /includes/steps-fts-tutorial-normalized-sort-create-index.rst

.. _sort-tutorial-run-query:

Sort Your Search Results
------------------------

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu to set the
language of the example in this section.

----------

.. tabs-selector:: drivers

You can sort your search results in multiple ways. In this section, you 
connect to your |service| {+cluster+} and then run the sample queries 
against the indexed fields in the ``sample_mflix.movies`` collection.

.. tabs:: 
   :hidden: 

   .. tab:: Default Sort
      :tabid: default

      Sort Numbers
      ~~~~~~~~~~~~

      The :pipeline:`$search` stage in the sample queries use the
      ``sort`` option to sort the |fts| results by the indexed number
      field. 

      .. tabs-drivers::

         .. tab:: 
            :tabid: atlas-ui

            .. include:: /includes/steps-fts-tutorial-sort-numbers-run-query-atlas-ui.rst

         .. tab:: 
            :tabid: shell

            .. include:: /includes/steps/fts-tutorial-sort-numbers-run-query-shell.rst  

         .. tab:: 
            :tabid: compass

            .. include:: /includes/steps/fts-tutorial-sort-numbers-run-query-compass.rst
   
         .. tab:: 
            :tabid: csharp

            .. include:: /includes/steps/fts-tutorial-sort-numbers-run-query-cs.rst
   
         .. tab:: 
            :tabid: nodejs

            .. include:: /includes/steps-fts-tutorial-sort-numbers-run-query-nodejs.txt

         .. tab:: 
            :tabid: java-sync

            .. include:: /includes/steps/fts-tutorial-sort-numbers-run-query-java.rst
   
         .. tab:: 
            :tabid: kotlin-coroutine

            .. include:: /includes/steps/fts-tutorial-sort-numbers-run-query-kotlin.rst

         .. tab:: 
            :tabid: go

            .. include:: /includes/steps-fts-tutorial-sort-numbers-run-query-go.txt 

         .. tab:: 
            :tabid: python

            .. include:: /includes/steps-fts-tutorial-sort-numbers-run-query-python.txt

      Sort Dates
      ~~~~~~~~~~

      The :pipeline:`$search` stage in the sample queries use the
      ``sort`` option to sort the |fts| results by the indexed date
      field. 

      .. tabs-drivers::

         .. tab:: 
            :tabid: atlas-ui

            .. include:: /includes/steps-fts-sort-date-tutorial-run-query-atlas-ui.rst

         .. tab:: 
            :tabid: shell

            .. include:: /includes/steps/fts-sort-date-tutorial-run-query-shell.rst

         .. tab:: 
            :tabid: compass

            .. include:: /includes/steps/fts-sort-date-tutorial-run-query-compass.rst
   
         .. tab:: 
            :tabid: csharp

            .. include:: /includes/steps/fts-sort-date-tutorial-run-query-cs.rst

         .. tab:: 
            :tabid: nodejs

            .. include:: /includes/steps-fts-sort-date-tutorial-run-query-nodejs.txt

         .. tab:: 
            :tabid: java-sync

            .. include:: /includes/steps/fts-sort-date-tutorial-run-query-java.rst

         .. tab:: 
            :tabid: kotlin-coroutine

            .. include:: /includes/steps/fts-sort-date-tutorial-run-query-kotlin.rst

         .. tab:: 
            :tabid: go

            .. include:: /includes/steps-fts-sort-date-tutorial-run-query-go.txt

         .. tab:: 
            :tabid: python

            .. include:: /includes/steps-fts-sort-date-tutorial-run-query-python.txt

   .. tab:: Normalized
      :tabid: normalize

Sort Strings
~~~~~~~~~~~~

.. tabs:: 
   :hidden: 

   .. tab:: Default Sort
      :tabid: default

      The :pipeline:`$search` stage in the sample queries use the
      ``sort`` option to sort the |fts| results by the indexed string
      field. 

      .. tabs-drivers::

         .. tab:: 
            :tabid: atlas-ui

            .. include:: /includes/steps-fts-sort-string-tutorial-run-query-atlas-ui.rst

         .. tab:: 
            :tabid: shell

            .. include:: /includes/steps/fts-sort-string-tutorial-run-query-shell.rst 

         .. tab:: 
            :tabid: compass

            .. include:: /includes/steps/fts-sort-string-tutorial-run-query-compass.rst
   
         .. tab:: 
            :tabid: csharp

            .. include:: /includes/steps/fts-sort-string-tutorial-run-query-cs.rst

         .. tab:: 
            :tabid: nodejs

            .. include:: /includes/steps-fts-sort-string-tutorial-run-query-nodejs.txt

         .. tab:: 
            :tabid: java-sync

            .. include:: /includes/steps/fts-sort-string-tutorial-run-query-java.rst

         .. tab:: 
            :tabid: kotlin-coroutine

            .. include:: /includes/steps/fts-sort-string-tutorial-run-query-kotlin.rst

         .. tab:: 
            :tabid: go

            .. include:: /includes/steps-fts-sort-string-tutorial-run-query-go.txt

         .. tab:: 
            :tabid: python

            .. include:: /includes/steps-fts-sort-string-tutorial-run-query-python.txt

   .. tab:: Normalized
      :tabid: normalize

      The :pipeline:`$search` stage in the sample query uses the
      :ref:`sort <sort-ref>` option to sort the |fts| results regardless
      of the letter case of the sorted field value. 

      .. tabs-drivers::

         .. tab::
            :tabid: atlas-ui

            .. include:: /includes/steps-fts-tutorial-normalized-sort-run-query-atlas-ui.txt

         .. tab::
            :tabid: shell

            .. include:: /includes/steps-fts-tutorial-normalized-sort-run-query-mongosh.txt

         .. tab::
            :tabid: compass

            .. include:: /includes/steps-fts-tutorial-normalized-sort-run-query-compass.txt 

         .. tab::
            :tabid: csharp

            .. include:: /includes/steps-fts-tutorial-normalized-sort-run-query-cs.txt  

         .. tab:: 
            :tabid: go

            .. include:: /includes/steps-fts-tutorial-normalized-sort-run-query-go.txt

         .. tab:: 
            :tabid: java-sync 

            .. include:: /includes/steps-fts-tutorial-normalized-sort-run-query-java.txt

         .. tab:: 
            :tabid: kotlin-coroutine

            .. include:: /includes/steps-fts-tutorial-normalized-sort-run-query-kotlin.txt

         .. tab::
            :tabid: nodejs

            .. include:: /includes/steps-fts-tutorial-normalized-sort-run-query-nodejs.txt

         .. tab::
            :tabid: python

            .. include:: /includes/steps-fts-tutorial-normalized-sort-run-query-python.txt
