========================
sh.removeRangeFromZone()
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: sh.removeRangeFromZone(namespace, minimum, maximum)

   .. versionadded:: 3.4

   Removes the association between a range of shard key values and a
   :term:`zone`.

   :method:`sh.removeRangeFromZone()` takes the following arguments:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``namespace``
   
        - string
   
        - The :term:`namespace` of the sharded collection to associate with the zone.
          
          The collection must be sharded for the operation to succeed.
          
          
   
      * - ``minimum``
   
        - document
   
        - The inclusive lower bound of the range of :term:`shard key` values. 
          
          Specify each field of the shard key in the form of ``<fieldname> : <value>``.
          The value must be of the same BSON type or types as the shard key.
          
          
   
      * - ``maximum``
   
        - document
   
        - The exclusive upper bound of the range of :term:`shard key` values. 
          
          Specify each field of the shard key in the form of ``<fieldname> : <value>``.
          The value must be of the same BSON type or types as the shard key.
          
          
   


   Use :method:`sh.removeRangeFromZone()` to remove the association between
   unused, out of date, or conflicting ranges and a zone.

   If no range matches the minimum and maximum bounds passed to
   :method:`~sh.removeShardFromZone()`, nothing is removed.

   Only issue :method:`sh.removeTagRange()` when connected to a
   :binary:`~bin.mongos` instance.

Behavior
--------

:method:`sh.removeShardFromZone()` does not remove the zone associated to the
specified range.

See the :ref:`zone <zone-sharding>` manual page for more information on zones
in sharded clusters.

Balancer
~~~~~~~~

Removing the association between a range and a zone removes the constraints
keeping chunks covered by the range on the shards inside that zone. During the
next balancer round, the balancer may migrate chunks that were previously
covered by the zone.

See the documentation for the :ref:`sharded cluster balancer
<sharding-balancing>` for more information on how migrations work in a sharded
cluster.

Security
~~~~~~~~

For sharded clusters running with :ref:`authentication <authentication>`, you
must authenticate as either:

- a user whose privileges include the specified actions on various
  collections in the ``config`` database:

  - :authaction:`find` on the ``config.shards`` collection

  - :authaction:`find`, :authaction:`update`, and :authaction:`remove`
    on the ``config.tags`` collection;
    
  or, alternatively

- a user whose privileges include :authaction:`enableSharding` on the
  :ref:`cluster <resource-specific-collection>` resource (available
  starting in version 4.0.14 and 3.6.16).

The :authrole:`clusterAdmin` or :authrole:`clusterManager` built-in roles have
the appropriate permissions for issuing :method:`sh.removeRangeFromZone()`.
See the documentation page for :ref:`Role-Based Access Control
<authorization>` for more information.

Example
-------

Given a sharded collection ``exampledb.collection`` with a shard key of ``{ a
: 1 }``, the following operation removes the range with a lower bound of ``1``
and an upper bound of ``10``:

.. code-block:: javascript

   sh.removeRangeFromZone( "exampledb.collection",
                   { a : 1 },
                   { a : 10 }
                 )

The ``min`` and ``max`` must match exactly the bounds of the target range.
The following operation attempts to remove the previously created range, but
specifies ``{ a : 0 }`` as the ``min`` bound:

.. code-block:: javascript

   admin = db.getSiblingDB("admin")
   admin.runCommand(
      {
         updateZoneKeyRange : "exampledb.collection",
         min : { a : 0 },
         max : { a : 10 },
         zone : null
      }
   )

While the range of ``{ a : 0 }`` and ``{ a : 10 }`` encompasses the existing
range, it is not an exact match and therefore
:method:`sh.removeRangeFromZone()` does not remove anything.

Compound Shard Key
~~~~~~~~~~~~~~~~~~

Given a sharded collection ``exampledb.collection`` with a shard key of 
``{ a : 1, b : 1 }``, the following operation removes the range with a lower
bound of ``{ a : 1, b : 1}`` and an upper bound of ``{ a : 10, b : 10 }``:

.. code-block:: javascript

   sh.removeRangeFromZone( "exampledb.collection",
                   { a : 1, b : 1 },
                   { a : 10, b : 10 }
                 )
                 
Given the previous example, if there was an existing range with a lower bound
of ``{ a : 1, b : 5 }`` and an upper bound of ``{ a : 10, b : 1 }``, the
operation would *not* remove that range, as it is not an exact match of the
minimum and maximum passed to :method:`sh.removeRangeFromZone()`.

