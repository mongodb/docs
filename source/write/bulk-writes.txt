.. _java-rs-bulk-write:

=====================
Bulk Write Operations
=====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: insert, update, replace, code example

Overview
--------

In this guide, you can learn how to perform multiple write operations in
a single database call by using **bulk write operations**.

Consider a scenario in which you want to insert a document,
update multiple other documents, then delete a document. If you use
individual methods, each operation requires its own database call.

By using a bulk write operation, you can perform multiple write operations in
fewer database calls. You can perform bulk write operations at the following levels:

- :ref:`Collection <java-rs-coll-bulk-write>`: You can use the 
  ``MongoCollection.bulkWrite()`` method to perform bulk write operations on a 
  single collection. In this method, each kind of write operation requires at
  least one database call. For example, ``MongoCollection.bulkWrite()`` puts multiple update
  operations in one call, but makes two separate calls to the database for an insert
  operation and a replace operation.

- :ref:`Client <java-rs-client-bulk-write>`: If your application connects to
  {+mdb-server+} version 8.0 or later, you can use the ``MongoClient.bulkWrite()``
  method to perform bulk write operations on multiple collections and databases 
  in the same cluster. This method performs all write operations 
  in one database call.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``sample_restaurants.restaurants`` collection
from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
free MongoDB Atlas cluster and load the sample datasets, see the
:ref:`<java-rs-getting-started>` tutorial.

.. include:: /includes/reactor-note.rst

.. _java-rs-coll-bulk-write:

Collection Bulk Write
---------------------

Bulk write operations contain one or more write operations. To perform a bulk 
write operation at the collection level, pass a ``List`` of ``WriteModel`` 
documents to the ``MongoCollection.bulkWrite()`` method. A ``WriteModel`` is a 
model that represents a write operation.

For each write operation you want to perform, create an instance of one of
the following classes that inherit from ``WriteModel``:

- ``InsertOneModel``
- ``UpdateOneModel``
- ``UpdateManyModel``
- ``ReplaceOneModel``
- ``DeleteOneModel``
- ``DeleteManyModel``

The following sections show how to create and use instances of the
preceding classes.

Insert Operations
~~~~~~~~~~~~~~~~~

To perform an insert operation, create an instance of ``InsertOneModel`` and
pass in the document you want to insert.

The following example creates an instance of ``InsertOneModel``:

.. literalinclude:: /includes/write/bulk-write.java
   :start-after: start-bulk-insert-one
   :end-before: end-bulk-insert-one
   :language: java
   :copyable:
   :dedent:

To insert multiple documents, create an instance of ``InsertOneModel`` for each document.

Update Operations
~~~~~~~~~~~~~~~~~

To update a document, create an instance of ``UpdateOneModel`` and pass in
the following arguments:

- **Query filter** that specifies the criteria used to match documents in your collection.
- **Update operation** you want to perform. For more information about update
  operations, see the :manual:`Field Update Operators
  </reference/operator/update-field/>` guide in the {+mdb-server+} manual.

The following example creates an instance of ``UpdateOneModel``:

.. literalinclude:: /includes/write/bulk-write.java
   :start-after: start-bulk-update-one
   :end-before: end-bulk-update-one
   :language: java
   :copyable:
   :dedent:

If multiple documents match the query filter specified in
the ``UpdateOneModel`` instance, the operation updates the first
result. You can specify a sort in an ``UpdateOptions`` instance to apply
an order to matched documents before the server performs the update
operation, as shown in the following code:

.. code-block:: java

   UpdateOptions options = UpdateOptions.sort(Sorts.ascending("_id"));

To update multiple documents, create an instance of ``UpdateManyModel`` and pass in
the same arguments. ``UpdateManyModel`` updates *all* documents that match your query
filter.

The following example creates an instance of ``UpdateManyModel``:

.. literalinclude:: /includes/write/bulk-write.java
   :start-after: start-bulk-update-many
   :end-before: end-bulk-update-many
   :language: java
   :copyable:
   :dedent:

Replace Operations
~~~~~~~~~~~~~~~~~~

A replace operation removes all fields and values of a specified document, aside from
the ``_id`` field, and replaces them with new ones. To perform a replace operation, create
an instance of ``ReplaceOneModel`` and pass in a query filter and the fields and values
you want to store in the matching document.

The following example creates an instance of ``ReplaceOneModel``:

.. literalinclude:: /includes/write/bulk-write.java
   :start-after: start-bulk-replace-one
   :end-before: end-bulk-replace-one
   :language: java
   :copyable:
   :dedent:

If multiple documents match the query filter specified in
the ``ReplaceOneModel`` instance, the operation replaces the first
result. You can specify a sort in a ``ReplaceOptions`` instance to apply
an order to matched documents before the server performs the replace
operation, as shown in the following code:

.. code-block:: java

   ReplaceOptions options = ReplaceOptions.sort(Sorts.ascending("_id"));

.. tip:: Replace Multiple Documents

   To replace multiple documents, create an instance of
   ``ReplaceOneModel`` for each document.

Delete Operations
~~~~~~~~~~~~~~~~~

To delete a document, create an instance of ``DeleteOneModel`` and pass in a
query filter specifying the document you want to delete. ``DeleteOneModel`` removes
only *the first* document that matches your query filter.

The following example creates an instance of ``DeleteOneModel``:

.. literalinclude:: /includes/write/bulk-write.java
   :start-after: start-bulk-delete-one
   :end-before: end-bulk-delete-one
   :language: java
   :copyable:
   :dedent:

To delete multiple documents, create an instance of ``DeleteManyModel`` and pass in a
query filter specifying the documents you want to delete. ``DeleteManyModel`` removes
*all* documents that match your query filter.

The following example creates an instance of ``DeleteManyModel``:

.. literalinclude:: /includes/write/bulk-write.java
   :start-after: start-bulk-delete-many
   :end-before: end-bulk-delete-many
   :language: java
   :copyable:
   :dedent:

Perform the Bulk Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~

After you define a ``WriteModel`` instance for each operation you want to perform,
pass a list of these instances to the ``bulkWrite()`` method.
By default, the method runs the operations in the order
they're defined in the list.

The following example performs multiple write operations by using the
``bulkWrite()`` method:

.. io-code-block::
   :copyable: 

   .. input:: /includes/write/bulk-write.java
      :start-after: start-bulk-write-mixed
      :end-before: end-bulk-write-mixed
      :language: java
      :dedent:

   .. output::
      
      AcknowledgedBulkWriteResult{insertedCount=2, matchedCount=2, removedCount=1, modifiedCount=2, upserts=[], inserts=[BulkWriteInsert{index=0, id=BsonObjectId{value=66a7e0a6c08025218b657208}}, BulkWriteInsert{index=1, id=BsonObjectId{value=66a7e0a6c08025218b657209}}]}

If any of the write operations fail, the {+driver-short+} signals a
``MongoBulkWriteException`` and does not perform any further individual operations.
``MongoBulkWriteException`` includes a ``BulkWriteError`` that can be accessed by using the
``MongoBulkWriteException.getWriteErrors()`` method, which provides details of the
individual failure.

.. note::

   When the {+driver-short+} runs a bulk operation, it uses the ``writeConcern`` of the
   collection on which the operation is running. The driver reports all write
   concern errors after attempting all operations, regardless of execution order. 

Customize Bulk Write
~~~~~~~~~~~~~~~~~~~~

The ``BulkWriteOptions`` class contains methods that modify
the behavior of the ``bulkWrite()`` method. To use the ``BulkWriteOptions``
class, construct a new instance of the class, then call one or more of its methods
to modify the write operation. You can chain these method calls together.
To modify the behavior of the write operation, pass the class instance as the last
argument to the ``bulkWrite()`` method.

You can use the following methods in the ``BulkWriteOptions`` class
to modify a write method. All methods are optional.

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method
     - Description

   * - ``bypassDocumentValidation(Boolean bypassDocumentValidation)``
     - | Specifies whether the bulk write operation bypasses document validation. This lets you 
         perform write operations on documents that don't meet the schema validation requirements, if any 
         exist. For more information about schema validation, see :manual:`Schema
         Validation </core/schema-validation/#schema-validation>` in the MongoDB
         Server manual.

   * - ``comment(Bson comment)``
     - | Attaches a ``Bson`` comment to the operation. For more information, see the :manual:`insert command
         fields </reference/command/insert/#command-fields>` guide in the
         MongoDB Server manual.  

   * - ``comment(String comment)``
     - | Attaches a ``String`` comment to the operation. For more information, see the :manual:`insert command
         fields </reference/command/insert/#command-fields>` guide in the
         MongoDB Server manual.  

   * - ``let(Bson variables)``
     - | Specifies a map of parameter names and values. Values must be constant or closed
         expressions that don't reference document fields. For more information,
         see the :manual:`let statement
         </reference/command/update/#std-label-update-let-syntax>` in the
         MongoDB Server manual.

   * - ``ordered(Boolean ordered)``
     - | If set to ``True``, the driver performs the individual operations in the order
         provided. If an individual operation fails, the driver will not execute any
         subsequent individual operations.
       | Defaults to ``True``. 

The following example calls the ``bulkWrite()`` method from the preceding
example but sets the ``ordered`` option to ``False``:

.. io-code-block::
   :copyable: 

   .. input:: /includes/write/bulk-write.java
      :start-after: start-bulk-write-unordered
      :end-before: end-bulk-write-unordered
      :language: java
      :dedent:

   .. output::

      AcknowledgedBulkWriteResult{insertedCount=2, matchedCount=2, removedCount=1, modifiedCount=2, upserts=[], inserts=[BulkWriteInsert{index=0, id=BsonObjectId{value=66a7e03cce430c5854b6caf9}}, BulkWriteInsert{index=1, id=BsonObjectId{value=66a7e03cce430c5854b6cafa}}]}

If any of the write operations in an unordered bulk write fail, the {+driver-short+}
reports the errors only after attempting all operations.

.. note::

   Unordered bulk operations do not guarantee order of execution. The order can
   differ from the way you list them to optimize the runtime.

.. _java-rs-client-bulk-write:

Client Bulk Write
-----------------

When connecting to a deployment running {+mdb-server+} 8.0 or later,
you can use the ``MongoClient.bulkWrite()`` method to write
to multiple databases and collections in the same cluster. The
``MongoClient.bulkWrite()`` method performs all write operations in a
single call.

The ``MongoClient.bulkWrite()`` method takes a 
list of ``ClientNamespacedWriteModel`` instances to represent different write operations.
You can construct instances of the ``ClientNamespacedWriteModel`` interface by using 
instance methods. For example, an instance of ``ClientNamespacedInsertOneModel`` represents an
operation to insert one document, and you can create this model by using
the ``ClientNamespacedWriteModel.insertOne()`` method.

The models and their corresponding instance methods are described
in the table below.

.. list-table::
   :header-rows: 1
   
   * - Model
     - Instance Method
     - Description
     - Parameters

   *  - ``ClientNamespacedInsertOneModel``
      - ``insertOne()``
      - Creates a model to insert a document into the ``namespace``.
      - ``namespace``: Database and collection to write to
        
        ``document``: Document to insert

   * - ``ClientNamespacedUpdateOneModel``
     - ``updateOne()``
     - Creates a model to update the first document in the ``namespace``
       that matches ``filter``.
     - ``namespace``: Database and collection to write to

       ``filter``: Filter that selects which document to update

       ``update``: Update to apply to matching document

       ``updatePipeline``: Update pipeline to apply to matching document

       ``options``: *(optional)* Options to apply when updating document

       You must pass a value for either the ``update`` or ``updatePipeline`` 
       parameter.

   * - ``ClientNamespacedUpdateManyModel``
     - ``updateMany()``
     - Creates a model to update all documents in the ``namespace`` that match 
       ``filter``.
     - ``namespace``: Database and collection to write to

       ``filter``: Filter that selects which documents to update

       ``update``: Update to apply to matching documents

       ``updatePipeline``: Update pipeline to apply to matching documents

       ``options``: *(optional)* Options to apply when updating documents

       You must pass a value for either the ``update`` or ``updatePipeline`` 
       parameter.

   * - ``ClientNamespacedReplaceOneModel``
     - ``replaceOne()``
     - Creates a model to replace the first document in the ``namespace`` that 
       matches ``filter``.
     - ``namespace``: Database and collection to write to

       ``filter``: Filter that selects which document to replace

       ``replacement``: Replacement document

       ``options``: *(optional)* Options to apply when replacing documents

   * - ``ClientNamespacedDeleteOneModel``
     - ``deleteOne()``
     - Creates a model to delete the first document in the ``namespace`` that 
       matches ``filter``.
     - ``namespace``: Database and collection to write to

       ``filter``: Filter that selects which document to delete

       ``option``: *(optional)* Options to apply when deleting document

   * - ``ClientNamespacedDeleteManyModel``
     - ``deleteMany()``
     - Creates a model to delete all documents in the ``namespace`` that match 
       ``filter``.
     - ``namespace``: Database and collection to write to

       ``filter``: Filter that selects which documents to delete

       ``option``: *(optional)* Options to apply when deleting documents

The following sections provide some examples of how to create models and use
the client ``bulkWrite()``  method.

Insert Operations
~~~~~~~~~~~~~~~~~

This example shows how to create models that contain instructions to
insert two documents. One document is inserted into the ``db.people``
collection, and the other document is inserted into the ``db.things`` collection.
The ``MongoNamespace`` instance defines the target database and collection that 
each write operation applies to.

.. literalinclude:: /includes/write/client-bulk-write.java
   :start-after: start-insert-models
   :end-before: end-insert-models
   :language: java
   :copyable:
   :dedent:

.. _java-rs-client-bulk-write-update:

Update Operations
~~~~~~~~~~~~~~~~~

The following example shows how to use the ``bulkWrite()`` method to update
existing documents in the ``db.people`` and
``db.things`` collections:

.. literalinclude:: /includes/write/client-bulk-write.java
   :start-after: start-update-models
   :end-before: end-update-models
   :language: java
   :copyable:
   :dedent:

This example increments the value of the ``age`` field by ``1`` in the
document that has a ``name`` value of ``"Freya Polk"`` in the ``people``
collection. It also sets the value of the ``manufacturer`` field to
``"Premium Technologies"`` in all documents that have a ``category``
value of ``"electronic"`` in the ``things`` collection.

If multiple documents match the query filter specified in
a ``ClientNamespacedUpdateOneModel`` instance, the operation updates the
first result. You can specify a sort order in a `ClientUpdateOneOptions
<{+core-api+}/client/model/bulk/ClientUpdateOneOptions.html>`__
instance to apply an order to matched documents before the server
performs the update operation, as shown in the following code:

.. code-block:: java

   ClientUpdateOneOptions options = ClientUpdateOneOptions
           .clientUpdateOneOptions()
           .sort(Sorts.ascending("_id"));

.. _java-rs-client-bulk-write-replace:

Replace Operations
~~~~~~~~~~~~~~~~~~

The following example shows how to create models to replace
existing documents in the ``db.people`` and ``db.things`` collections:

.. literalinclude:: /includes/write/client-bulk-write.java
   :start-after: start-replace-models
   :end-before: end-replace-models
   :language: java
   :copyable:
   :dedent:

After this example runs successfully, the document that has an ``_id`` value of ``1`` 
in the ``people`` collection is replaced with a new document. The document in 
the ``things`` collection that has an ``_id`` value of ``1`` 
is replaced with a new document.

If multiple documents match the query filter specified in
a ``ClientNamespacedReplaceOneModel`` instance, the operation replaces the
first result. You can specify a sort order in a `ClientReplaceOneOptions
<{+core-api+}/client/model/bulk/ClientReplaceOneOptions.html>`__
instance to apply an order to matched documents before the server
performs the replace operation, as shown in the following code:

.. code-block:: java

   ClientReplaceOneOptions options = ClientReplaceOneOptions
           .clientReplaceOneOptions()
           .sort(Sorts.ascending("_id"));

Perform the Bulk Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~

After you define a ``ClientNamespacedWriteModel`` instance for each
operation you want to perform, pass a list of these instances to the
client ``bulkWrite()`` method. By default, the method runs the
operations in the order they're specified.

The following example performs multiple write operations by using the
``bulkWrite()`` method:

.. io-code-block::
   :copyable: 

   .. input:: /includes/write/client-bulk-write.java
      :start-after: start-perform
      :end-before: end-perform
      :emphasize-lines: 18-19
      :language: java
      :dedent:

   .. output::
      
      AcknowledgedSummaryClientBulkWriteResult{insertedCount=1, matchedCount=1, ...}

If any of the write operations fail, the driver raises a
``ClientBulkWriteException`` and does not perform any further individual operations.
``ClientBulkWriteException`` includes a ``BulkWriteError`` that can be accessed by using the
``ClientBulkWriteException.getWriteErrors()`` method, which provides details of the
individual failure.

.. _java-rs-client-bulk-write-options:

Customize Bulk Write
~~~~~~~~~~~~~~~~~~~~

You can pass an instance of ``ClientBulkWriteOptions`` to the
``bulkWrite()`` method to customize how the driver performs the bulk write
operation.

Order of Execution
``````````````````

By default, the driver runs the individual operations in a bulk
operation in the order that you specify them until an error occurs, or
until the operation completes successfully.

However, you can pass ``false`` to the ``ordered()`` method when creating
a ``ClientBulkWriteOptions`` instance to direct the driver to perform
write operations in an unordered way. When using the unordered option,
an error-producing operation does not prevent the driver from running
other write operations in the bulk write operation.

The following code sets the ``ordered`` option to ``false`` in an
instance of ``ClientBulkWriteOptions`` and performs a bulk write operation to 
insert multiple documents.

.. literalinclude:: /includes/write/client-bulk-write.java
   :start-after: start-options
   :end-before: end-options
   :emphasize-lines: 3-5, 23-24
   :language: java
   :copyable:
   :dedent:

Even though the write operation inserting a document with a duplicate key results
in an error, the other operations are performed because the write operation is
unordered.

Additional Information
----------------------

To learn how to perform individual write operations, see the following guides:

- :ref:`java-rs-write-insert`
- :ref:`java-rs-write-update-docs`
- :ref:`java-rs-write-replace`
- :ref:`java-rs-write-delete-docs`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- Collection Bulk Write

  - `bulkWrite()
    <{+rs-driver-api+}/MongoCollection.html#bulkWrite(com.mongodb.reactivestreams.client.ClientSession,java.util.List)>`__
  - `InsertOneModel <{+core-api+}/client/model/InsertOneModel.html>`__
  - `UpdateOneModel <{+core-api+}/client/model/UpdateOneModel.html>`__
  - `UpdateManyModel <{+core-api+}/client/model/UpdateManyModel.html>`__
  - `ReplaceOneModel <{+core-api+}/client/model/ReplaceOneModel.html>`__
  - `DeleteOneModel <{+core-api+}/client/model/DeleteOneModel.html>`__
  - `DeleteManyModel <{+core-api+}/client/model/DeleteManyModel.html>`__
  - `BulkWriteResult <{+core-api+}/bulk/BulkWriteResult.html>`__
  - `BulkWriteError <{+core-api+}/bulk/BulkWriteError.html>`__
  - `MongoBulkWriteException <{+core-api+}/MongoBulkWriteException.html>`__

- Client Bulk Write

  - `bulkWrite()
    <{+rs-driver-api+}/MongoCluster.html#bulkWrite(java.util.List,com.mongodb.client.model.bulk.ClientBulkWriteOptions)>`__
  - `ClientNamespacedWriteModel <{+core-api+}/client/model/bulk/ClientNamespacedWriteModel.html>`__
  - `MongoNamespace <{+core-api+}/MongoNamespace.html>`__
  - `ClientBulkWriteOptions <{+core-api+}/client/model/bulk/ClientBulkWriteOptions.html>`__
  - `ClientBulkWriteResult <{+core-api+}/client/model/bulk/ClientBulkWriteResult.html>`__
