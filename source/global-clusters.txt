.. _global-clusters:

===============
Global Clusters
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

|service| |global-write-clusters| uses a highly curated implementation 
of sharded cluster :manual:`zones </core/zone-sharding>` to support 
location-aware read and write operations for globally distributed 
application instances and clients. |global-write-clusters| support 
deployment patterns such as:

- Low-latency read and write operations for globally distributed
  clients.

- Uptime protection during partial or full regional outages.

- Location-aware data storage in specific geographic regions.

|service| supports enabling |global-write| when deploying an ``M30`` or 
greater sharded cluster. For replica sets, 
:doc:`scale </scale-cluster>` the cluster to at least an ``M30``
instance and enable |global-write|. All shard nodes deploy with the 
selected instance size. You cannot enable |global-write| on an existing
standard |service| sharded cluster.

.. include:: /images/global-writes-map.rst

|service| |global-write-clusters| require developers to define 
single or multi-region :guilabel:`Zones`, where each zone supports
write and read operations from geographically local shards. You can also
configure zones to support global low-latency secondary reads. For more 
information on |global-write| zones, see :ref:`global-writes-zones`.

|service| does not auto-configure or auto-shard collections. 
Sharded collections must meet specific compatibility requirements to 
utilize |global-write|. For more information on guidance and 
requirements for sharding collections for |global-write|, see 
:ref:`global-writes-collections`. The |service| :ref:`data-explorer`
supports creating sharded collections with specific validations for
|global-write|. For complete documentation, see 
:ref:`de-shard-collection-for-global-writes`.

.. important::

   You cannot disable |global-write| for a cluster once deployed.

.. _global-writes-zones:

Global Write Zones and Zone Mapping
-----------------------------------

Each |service| |global-write-clusters| supports up to 9 distinct 
zones. Each zone consists of one :guilabel:`Preferred` region and one or 
more :guilabel:`Electable` or :guilabel:`Read-only` regions. The 
available regions depend on the selected cloud service provider. 

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Region Type
     - Description

   * - :guilabel:`Preferred`
     - Dictates where |service| deploys the :term:`primary` replica set 
       member for the shard or shards associated with that zone. Clients 
       can only issue write operations to the :term:`primary`.

       |service| uses the geographic location of the 
       :guilabel:`Preferred` region for constructing a map of
       geographically-near countries and subdivisions. The 
       |global-write| cluster uses this map for directing write
       operations to the correct zone.

   * - :guilabel:`Electable` 
     - Dictates where |service| deploys electable :term:`secondary` 
       replica set members for the shard or shards associated to that 
       zone. :guilabel:`Electable` regions add additional fault 
       tolerance in the event of a partial or total regional outage in 
       the :guilabel:`Preferred` region.

   * - :guilabel:`Read-only` 
     - Dictates where |service| deploys non-electable :term:`secondary`
       replica set members for supporting secondary read operations. 
       For each zone in the cluster, add a :guilabel:`Read-only` node 
       in the :guilabel:`Preferred Region` of every other zone
       to facilitate low-latency local secondary reads of globally 
       distributed data.

For each shard associated to a zone, |service| distributes the
shard nodes across the configured regions. While |service| allows
more than one shard per zone, users should instead consider 
creating additional zones to address high user volume in a concentrated
geographic area.

.. note::
   
   |service| supports up to :ref:`50 shards per sharded cluster <can-i-deploy-more-than-50-shards>`
   regardless of the number of zones. Contact support by clicking
   :guilabel:`Support` from the |service| UI if you have requirements
   for more shards in your |global-write-cluster|.

The |service| cluster builder includes templates for automatically
configuring |global-write| zones for the |global-write-cluster|. 
Each template provides a visual description of the cluster zone
configuration, including estimates of geographic latency and coverage.
For complete documentation on creating a |global-write-cluster|,
see :ref:`create-new-global-write-cluster`. For more information on
|global-write| templates, see the
:ref:`create-global-write-cluster-zone-templates` section of that
tutorial.

.. _global-writes-collections:

Sharding Collections for Global Writes
--------------------------------------

Unsharded collections must meet the following compatibility 
requirements **prior to sharding** to utilize |global-write| when 
sharded:

- Every document in the collection **must** include a 
  ``location`` field.

- The value of the ``location`` field **must** be either an
  `ISO-3166-1 alpha 2 <https://en.wikipedia.org/wiki/ISO_3166-1>`_
  country code (``"US"``, ``"DE"``, ``"IN"``) *or* a supported
  `ISO-3166-2 <https://en.wikipedia.org/wiki/ISO_3166-2>`_ 
  subdivision code (``"US-DC"``, ``"DE-BE"``, ``"IN-DL"``). 
  Documents that do not match this criteria can be routed to any shard 
  in the cluster. To view the complete list of currently supported 
  country or subdivision codes, visit
  https://cloud.mongodb.com/static/atlas/country_iso_codes.txt.

For collections that meet the stated requirements, you **must** shard 
the collection using the following pattern:

.. code-block:: json

   { "location" : 1, "<secondary_field>" : 1 }

A shard key on the ``location`` field alone may result in bottlenecks,
especially for workloads where a subset of countries or subdivisions
receive the majority of write operations. |service| |global-write|
requires a :manual:`compound shard key </core/index-compound>` 
to facilitate efficient distribution of sharded data across the cluster.
|service| |global-write-cluster| shard keys share the same restrictions as 
MongoDB shard keys; for example, the secondary shard key field *cannot* 
be an array.

For guidance on choosing a secondary shard key field and the effect of 
shard key choice on data distribution, see :manual:`Choosing a Shard Key 
</core/sharding-shard-key/#choosing-a-shard-key>`. For complete
documentation on shard key limitations, see 
:ref:`Shard Key Limitations <limits-shard-keys>`.

.. important::

   You cannot easily change the shard key after sharding, nor can 
   you modify the value of shard key fields in any document in the 
   sharded collection.

The |service| :ref:`data-explorer` supports creating sharded collections
with specific validations for |global-write|. For complete 
documentation, see :ref:`de-shard-collection-for-global-writes`. 

You can also use the :binary:`~bin.mongo` shell to execute the
:method:`sh.shardCollection() <sh.shardCollection>`. After sharding
the collection, you must use the |service| :ref:`data-explorer`
to enable |global-write| for that collection. For complete 
documentation on sharding collections via the Data Explorer, 
see :ref:`de-shard-collection-for-global-writes`. 

.. _global-writes-write-operations:

|global-write-cluster| Write Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each write to a sharded collection *must* include the shard key for the
operation to succeed. For each document in a write operation, MongoDB 
uses the ``location`` field of the shard key to determine the zone to 
which to route the data. MongoDB selects a shard associated to that zone
as the target for writing the document, facilitating geographically 
isolated and segmented data storage.

MongoDB can only guarantee this behavior for inserted documents that 
meet the criteria defined in :ref:`global-writes-collections`. 
Specifically, MongoDB can route a document whose ``location`` field does 
not conform to 
`ISO-3166-1 alpha 2 <https://en.wikipedia.org/wiki/ISO_3166-1>`_ *or*
`ISO-3166-2 <https://en.wikipedia.org/wiki/ISO_3166-2>`_ to any shard
in the cluster.

.. _global-writes-read-operations:

|global-write-cluster| Read Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB query routing depends on whether the read operation
includes the full shard key **and** that the ``location`` value
corresponds to a supported
`ISO-3166-1 alpha 2 <https://en.wikipedia.org/wiki/ISO_3166-1>`_
country code (``"US"``, ``"DE"``, ``"IN"``) *or* a supported
`ISO-3166-2 <https://en.wikipedia.org/wiki/ISO_3166-2>`_ 
subdivision code (``"US-DC"``, ``"DE-BE"``, ``"IN-DL"``).

For queries that do include the full shard key and whose ``location``
value meets the requirements for |global-write|, MongoDB targets 
the read operation to the zone which maps to the ``location`` value or 
values specified in the query. 

For read operations that do not include the full shard key, or if the 
``location`` value does correspond to a supported ``ISO-3166-1 alpha 2``
country code or ``ISO-3166-2`` subdivision code, MongoDB must 
broadcast the read operation to every zone in the cluster. 

For |global-write| zones which have :guilabel:`Read-only` nodes
in geographically distant regions, clients in those regions can
query the local :guilabel:`Read-only` node for that zone by specifying
the full shard key as part of the query **and** issuing the
read operation with a :manual:`Read Preference </core/read-preference/>` 
of :readmode:`nearest`. 

.. important::

   Secondary reads may return stale data depending on the level
   of replication lag between the secondary node and the primary.
   For complete documentation on MongODB read preference,
   see :manual:`Read Preference </core/read-preference/>`.

For more information on MongoDB query routing, see 
:manual:`mongos </core/sharded-cluster-query-router/>`.  

Sharding Collections without Global Writes
------------------------------------------

|global-write| clusters support the same
:manual:`Ranged </core/ranged-sharding>` and 
:manual:`Hashed </core/hashed-sharding>` sharding strategies
as a standard |service| sharded cluster. For sharded collections whose 
shard keys and document schema do not support |global-write|, 
MongoDB distributes the sharded data evenly across the available shards 
in the cluster with respect to the chosen 
:manual:`shard key </core/sharding-shard-key/>`. Consider using a
separate sharded cluster for data that cannot take advantage of 
|global-write| functionality. 

You cannot modify a collection to support |global-write| after
sharding. Consider whether you might want to use |global-write|
for a collection in the future before choosing an incompatible shard
key. For more information on |global-write| sharding requirements, see 
:ref:`global-writes-collections`.

Unsharded Collections in Global Write Clusters
----------------------------------------------

|global-write-clusters| provide the same support for unsharded 
collections as a standard |service| sharded cluster. For each database 
in the cluster, MongoDB stores its unsharded collections on a 
:term:`primary shard`. Use :method:`sh.status() <sh.status>` from
the :binary:`~bin.mongo` shell to determine the primary shard for the 
database. 

.. important::

   |service| does not support the :dbcommand:`movePrimary` command for
   moving the primary shard for a database. If you require assistance
   with changing the primary shard of a database, contact |service|
   support by clicking the :guilabel:`Support` link in the left hand
   navigation of the |service| UI.

.. class:: hidden

   .. toctree::
      :titlesonly:

      /tutorial/create-global-writes-cluster

