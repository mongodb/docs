======================
db.collection.update()
======================

.. default-domain:: mongodb

Definition
----------

.. method:: db.collection.update(query, update, [options])

   Modifies an existing document or documents in a collection.
   :method:`~db.collection.update()` takes the following parameters:

   .. include:: /reference/method/db.collection.update-param.rst

   :method:`~db.collection.update()` updates a single document by
   default. To update all documents in the collection that match the
   update query criteria, specify the ``multi`` option. To insert a
   document if no document matches the update query criteria, specify
   the ``upsert`` option.

   .. versionchanged:: 2.2
      The :program:`mongo` shell provides an updated interface that
      accepts the options parameter in a document format to specify
      ``multi`` and ``upsert`` options.

   Prior to version 2.2, in the :program:`mongo` shell, ``upsert`` and
   ``multi`` were positional boolean options:

   .. code-block:: javascript

      db.collection.update(query, update, <upsert>, <multi>)

   Although the update operation may apply mostly to updating the values
   of the fields, :method:`update() <db.collection.update()>` can also
   modify the name of the ``field`` in a document using the
   :operator:`$rename` operator.

.. _update-parameter:

Update Parameter
~~~~~~~~~~~~~~~~

If the ``update`` parameter contains any :ref:`update operator
<update-operators>` expressions, such as the :operator:`$set` operator
expression, then:

- the ``update`` parameter must contain only update operator
  expressions.

.. versionadded:: 2.2

- :method:`~db.collection.update()` updates only the corresponding
  fields in the document.

If the ``update`` parameter consists only of ``field: value``
expressions, then:

- :method:`~db.collection.update()` *replaces* the document with the
  ``updates`` document. If the ``updates`` document is missing the
  :term:`_id` field, MongoDB will add the ``_id`` field and assign to it
  a unique :term:`objectid` .

- :method:`~db.collection.update()` updates cannot update multiple
  documents.

.. _upsert-parameter:

Upsert Parameter
~~~~~~~~~~~~~~~~

If ``upsert`` is set to ``true`` and no document matches the criteria,
:method:`~db.collection.update()` inserts a new document with the fields
and values of the ``update`` parameter. If the ``update`` included only
update operators, :method:`~db.collection.update()` inserts the
``query`` parameter as well .

In version 2.2 of the :program:`mongo` shell, you may also specify
``upsert`` in the ``options`` parameter.

With ``upsert``, :method:`~db.collection.update()` inserts a *single*
document.

.. _multi-parameter:

Multi Parameter
~~~~~~~~~~~~~~~

When ``multi`` is set to ``true``, the :method:`~db.collection.update()`
method updates all documents that meet the ``query`` criteria. In
version 2.2 of the :program:`mongo` shell, you may also specify
``multi`` in the ``options`` parameter.

The ``multi`` update operation may interleave with other write
operations. For unsharded collections, you can override this behavior
with the :operator:`$isolated` isolation operator, which isolates the
update operation and blocks other write operations during the update.

Examples
--------

The following examples use the 2.2 interface to specify options in the
document form.

Update Specific Fields in a Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Call :method:`~db.collection.update()` with an ``update`` parameter
using ``field: value`` pairs and expressions using :ref:`update
operators <update-operators>` as in the following:

.. code-block:: javascript

   db.products.update( { item: "book", qty: { $gt: 5 } }, { $set: { x: 6 }, $inc: { y: 5} } )

This operation updates a document in the ``products``
collection that matches the query criteria and sets the value of
the field ``x`` to ``6``, and increment the value of the field
``y`` by ``5``. All other fields of the document remain the same.

Replace All Fields in a Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To replace all the fields in a document with the document as
specified in the ``update`` parameter, call the :method:`update()
<db.collection.update()>` method with an ``update`` parameter
that consists of *only* ``key: value`` expressions, as in the following:

.. code-block:: javascript

   db.products.update( { item: "book", qty: { $gt: 5 } }, { x: 6, y: 15 } )

This operation selects a document from the ``products``
collection that matches the query criteria sets the value of the
field ``x`` to ``6`` and the value of the field ``y`` to
``15``. All other fields of the matched document are *removed*,
except the :term:`_id` field.

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

Call the :method:`update() <db.collection.update()>` method and specify
the ``multi`` option, as in the following:

.. code-block:: javascript

   db.products.update( { item: "book", qty: { $gt: 5 } }, { $set: { x: 6, y: 15 } }, { multi: true } )

This operation updates *all* documents in the ``products``
collection that match the query criteria by setting the value of
the field ``x`` to ``6`` and the value of the field ``y`` to
``15``. This operation does not affect any other fields in
documents in the ``products`` collection.

You can perform the same operation by calling the
:method:`~db.collection.update()` method with the ``multi``
parameter:

.. code-block:: javascript

   db.products.update( { item: "book", qty: { $gt: 5 } }, { $set: { x: 6, y: 15 } }, false, true )

Upsert
~~~~~~

To update a document or to insert a new document if no document matches
the query criteria, call the :method:`~db.collection.update()` and
specify the ``upsert`` option, as in the following:

.. code-block:: javascript

   db.products.update( { item: "magazine", qty: { $gt: 5 } }, { $set: { x: 25, y: 50 } }, { upsert: true } )

This operation will:

- update a single document in the ``products`` collection that
  matches the query criteria, setting the value of the field
  ``x`` to ``25`` and the value of the field ``y`` to ``50``, *or*

- if no matching document exists, insert a document in the
  ``products`` collection, with the field ``item`` set to
  ``magazine``, the field ``x`` set to ``25``, and the field ``y``
  set to ``50``.
