.. _java-rs-cursors:

=========================
Access Data From a Cursor
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: read, results, oplog

Overview
--------

In this guide, you can learn how to access data from a **cursor** by using the
{+driver-short+}.

A cursor is a mechanism that returns the results of a read operation in iterable
batches. Because a cursor holds only a subset of documents at any given time,
cursors reduce both memory consumption and network bandwidth usage.

In the {+driver-short+}, some streams are backed by cursors. The size of batches used
in these underlying cursors depends on the demand requested on the ``Subscription`` for the
``Publisher``. You can set the batch size of data contained by each underlying cursor by
using the ``FindPublisher.batchSize()`` method.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``sample_restaurants.restaurants`` collection
from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
free MongoDB Atlas cluster and load the sample datasets, see the
:ref:`<java-rs-getting-started>` guide.

.. include:: includes/reactor-note.rst

.. _java-rs-cursors-iterate:

Access Cursor Contents Iteratively
----------------------------------

To iterate over the contents of a cursor, use the ``Flux.from()`` method, as shown in the
following example:

.. literalinclude:: /includes/read-ops/cursors.java
   :start-after: start-cursor-iterate
   :end-before: end-cursor-iterate
   :language: java
   :dedent:
   :copyable:

Retrieve All Documents
----------------------

.. warning::

   If the number and size of documents returned by your query exceeds available
   application memory, your program will crash. If you expect a large result
   set, :ref:`access your cursor iteratively <java-rs-cursors-iterate>`.

To retrieve all documents from a cursor, convert the cursor into a ``List``, as
shown in the following example:

.. literalinclude:: /includes/read-ops/cursors.java
   :start-after: start-cursor-list
   :end-before: end-cursor-list
   :language: java
   :dedent:
   :copyable:

Tailable Cursors
----------------

When querying on a :manual:`capped collection </core/capped-collections/>`, you
can use a **tailable cursor** that remains open after the client exhausts the
results in a cursor. To create a tailable cursor on a capped collection,
pass a value of ``CursorType.TailableAwait`` to the ``cursorType()`` method of a
``FindPublisher`` object.

The following example creates a tailable cursor on a collection and prints its contents:

.. literalinclude:: /includes/read-ops/cursors.java
   :start-after: start-tailable-cursor
   :end-before: end-tailable-cursor
   :language: java
   :dedent:
   :copyable:

To learn more about tailable cursors and their usage, see the :manual:`Tailable Cursors guide
</core/tailable-cursors/>` in the {+mdb-server+} manual.

API Documentation
-----------------

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `find() <{+rs-driver-api+}/MongoCollection.html#find()>`__
- `FindPublisher <{+rs-driver-api+}/FindPublisher.html>`__
- `CursorType <{+core-api+}/CursorType.html>`__
