================
renameCollection
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: renameCollection

   Changes the name of an existing collection. Specify collection names
   to :dbcommand:`renameCollection` in the form of a complete
   :term:`namespace` (``<database>.<collection>``).

   .. warning::

      This command obtains a database-level write lock for renames
      within the same database and a global write lock for
      cross-database renames. Write locks will block other database
      activity for the duration of the rename operation.

   Issue the :dbcommand:`renameCollection` command against the
   :term:`admin database`.

   The command takes the following form:

   .. versionchanged:: 3.6

   .. code-block:: javascript

      { 
        renameCollection: "<source_namespace>", 
        to: "<target_namespace>", 
        dropTarget: <true|false>,
        txnNumber: <long>,
        lsid: { id: <UUID> }
      }

   The command contains the following fields:

   .. include:: /includes/apiargs/dbcommand-renameCollection-field.rst

Behavior
--------

The :dbcommand:`renameCollection` command should be used with caution
in production environments.

.. warning::

  - :dbcommand:`renameCollection` is **not** compatible with sharded
    collections.

  - If the :dbcommand:`renameCollection` operation does not complete,
    the ``target`` collection and indexes will not be usable and
    will require manual intervention to clean up.

  - If the ``source`` collection is not in the same database as the
    ``target`` collection, :dbcommand:`renameCollection` will acquire
    a global write lock that blocks all database activity for the
    duration of the rename operation.

  .. versionchanged:: 3.6

  - If the ``source`` collection is in the same database as the
    ``target`` collection, :dbcommand:`renameCollection` will acquire
    a database-level write lock. This will block activity for
    the affected database for the duration of the rename operation,
    but is less disruptive than the global write lock required for
    a cross-database collection rename.
  
The :dbcommand:`renameCollection` command will fail if ``target``
is the name of an existing collection *and* you do not specify
``dropTarget: true``.

Example
-------

The following example renames a collection named ``orders`` in the
``test`` database to ``orders2014`` in the ``test`` database.

.. code-block:: javascript

   db.adminCommand( { renameCollection: "test.orders", to: "test.orders2014" } )

The :program:`mongo` shell provides the
:method:`db.collection.renameCollection()` helper for the command to
rename collections within the *same* database. The following is
equivalent to the previous example:

.. code-block:: javascript

   use test
   db.orders.renameCollection( "orders2014" )

Exceptions
----------

:exception 10026:
   Raised if the ``source`` namespace does not exist.

:exception 10027:
   Raised if the ``target`` namespace exists and ``dropTarget`` is
   either ``false`` or unspecified.

:exception 15967:
   Raised if the ``target`` namespace is an invalid collection
   name.
