ref: fts-sort-for-precision-desc
content: | 

  The following query shows how to sort a string field to increase the
  precision of your query. It searches for titles that begin with
  ``Prince`` or ``Prance`` and sorts the results by the
  :ref:`scoring-constant` score assigned to the different titles.

---
ref: fts-sort-for-precision-stage
content: | 

  The query uses the following pipeline stages:
  
  - :pipeline:`$search` to search the ``title`` field
    using the following :ref:`compound-ref` clauses: 

    - ``should`` clause with the :ref:`wildcard-ref` operator to
      search for titles that begin with ``Prance`` and ``Prince``.
      Each subquery specifies a score that replaces the base score for
      matching results with the specified number, which allows the
      results to be sorted based on the score. The scores from highest
      to lowest sort the movie titles alphabetically.
  
  - :pipeline:`$limit` stage to limit the output to ``5`` results.
  - :pipeline:`$project` stage to:
    
    - Exclude all fields except ``title``.
    - Add a field named ``score``.

---
ref: fts-sort-for-precision-results
content: | 

  The |fts| results contain documents with movie titles that begin with
  ``Prance`` and ``Prince``. |fts| returns titles with ``Prance``
  followed by ``Prince`` because |fts| returns documents from highest to
  lowest score and you replaced the scores of these terms with a
  constant value of ``99`` and ``95`` respectively. If you want to sort
  the results by ``Prince`` first, modify its score value to be greater
  than ``Prance``.
---
ref: fts-sort-speed-precision-constant-desc
content: | 
  
  The following query shows how to sort a string field to increase the
  overall performance of your query. It searches for titles that begin
  with the term ``Happy`` using the :ref:`wildcard-ref` operator and
  retrieves the stored fields to sort your results.

---
ref: fts-sort-speed-precision-stage
content: | 

  The query uses the following pipeline stages:
  
  - :pipeline:`$search` stage to search the ``title`` field and retrieve the field stored on ``mongot``.
  - :pipeline:`$limit` stage to limit the output to ``5`` results.
  - :pipeline:`$sort` stage to sort the titles in descending order.
  
---
ref: fts-sort-for-speed-constant-desc
content: | 

  The following query shows how to sort a numeric field to decrease the
  time your query executes. It uses the :ref:`near-ref` operator to
  search for movies that were released in and about five years before or
  after 2015.

---
ref: fts-sort-for-speed-stage
content: | 

  The query uses the following pipeline stages:
  
  - :pipeline:`$search` stage to search the ``year`` field.
  - :pipeline:`$limit` stage to limit the output to ``5`` results.
  - :pipeline:`$project` stage to exclude all fields except ``_id``,
    ``title``, ``released``, and ``year``.

  .. note:: 

     This method omits the :pipeline:`$sort` stage because
     the :ref:`near-ref` operator automatically sorts the results in
     ascending order based on ``_id`` field.

...
