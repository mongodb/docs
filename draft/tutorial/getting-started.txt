=================================================
Getting Started with the MongoDB JavaScript Shell
=================================================

.. default-domain:: mongodb

This tutorial is an introduction to creating and retrieving database
documents using the MongoDB JavaScript Shell.

The MongoDB JavaScript shell, also referred to as the :program:`mongo`
shell, is a full JavaScript shell that gives you access to all create,
read, update, and delete operations in a MongoDB database. The shell
also allows you to use all JavaScript functions and syntax. See the
:api:`mongo JavaScript API <js>` documentation and the :program:`mongo`
shell :doc:`JavaScript Methods </reference/javascript>`.

The tutorial assumes MongoDB is installed on a Linux or OS X operating
system and that the database server is running. For instructions on
installing MongoDB and starting the database server, see
:doc:`/installation`.

.. contents:: The tutorial takes you through the following procedures:
   :backlinks: none
   :local:
   :depth: 3

Connect to the :program:`mongod`
--------------------------------

From the command line, start the MongoDB JavaScript shell by issuing the
:program:`mongo` command:

.. code-block:: sh

   mongo

By default, :program:`mongo` looks for a database server listening on
port ``27017``. To look for a server listening on a different port, use
the :option:`--port <mongod --port>` option.

Select a Database
~~~~~~~~~~~~~~~~~

1. From the :program:`mongo` shell, display the list of available
databases by issuing the following command:

   .. code-block:: javascript

      show dbs

#. Switch to a new database called ``mydb`` by typing the following command:

   .. code-block:: javascript

      use mydb

#. Confirm that the ``mydb`` database is the context for your session by
   typing the following command, which returns the name of the database
   you are on:

   .. code-block:: javascript

      db

   If you issue the ``show dbs`` command again you will not yet see
   ``mydb`` listed. MongoDB will not create the ``mydb`` database
   permanently until you insert data to the database, as described
   next in :ref:`getting-started-create-documents`.

Display :program:`mongod` Help
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To return a list of help pages for the :program:`mongo` shell, issue the
following command:

.. code-block:: javascript

   help

.. _getting-started-create-documents:

Create a Collection and Insert Documents
----------------------------------------

In these procedures, you insert documents into a new :term:`collection`
named ``things`` within the new :term:`database` named ``mydb``. MongoDB
does not require that you predefine the collection or database. Instead,
MongoDB creates both the first time you insert data.

MongoDB also does not require you to pre-define the structure of your
documents. MongoDB databases use dynamic schemas. See
:ref:`faq-schema-free`.

Insert Individual Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. From the :program:`mongo` shell, confirm that the ``mydb`` database
   is the context for your session by typing the following command:

   .. code-block:: javascript

      db

#. If MongoDB does not return ``mydb``, issue the following command:

   .. code-block:: javascript

      use mydb

#. Create two documents, named ``j`` and ``t``, by issuing the following
   sequence of operations:

   .. code-block:: javascript

      j = { name : "mongo" }
      t = { x : 3 }

#. Insert the ``j`` and ``t`` documents as documents in the collection
   ``things`` by entering the following sequence of operations:

   .. code-block:: javascript

      db.things.insert(j)
      db.things.insert(t)

   Once you insert the first document (in this case, the ``j``
   document), MongoDB creates both the ``mydb`` database and the ``things``
   collection.

#. Confirm that the collection named ``things`` has been created by issuing
   the following command:

   .. code-block:: javascript

      show collections

   The :program:`mongo` shell returns a list of the collections in
   ``mydb``, which in this case is just the one collection, `` things``.

#. Confirm that the documents have been inserted by querying the
   ``things`` collection using the :method:`find() <db.collection.find()>` method:

   .. code-block:: javascript

      db.things.find()

   MongoDB returns the following results. Your :doc:`ObjectId
   </object-id>` values will be different:

   .. code-block:: javascript

      { "_id" : ObjectId("4c2209f9f3924d31102bd84a"), "name" : "mongo" }
      { "_id" : ObjectId("4c2209fef3924d31102bd84b"), "x" : 3 }

   All MongoDB documents must have an ``_id`` field with a unique value.
   These operations do not explicitly specify a value for the ``_id``
   field, so :program:`mongo` creates a unique :doc:`ObjectId
   </object-id>` value for the field.

   Unlike the documents in the ``things`` collection, most MongoDB
   collections store documents with the same structure.

Insert Multiple Documents Using a For Loop
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. From the :program:`mongo` shell, add more documents to the collection
   named ``things`` by issuing the following ``for`` loop:

   .. code-block:: javascript

      for (var i = 1; i <= 20; i++) db.things.insert({x : 4, j : i})

#. Query the collection by issuing the following command:

   .. code-block:: javascript

      db.things.find()

   MongoDB returns the first 20 documents in the collection. Your
   :doc:`ObjectId </object-id>` values will be different:

   .. code-block:: javascript

      { "_id" : ObjectId("4c2209f9f3924d31102bd84a"), "name" : "mongo" }
      { "_id" : ObjectId("4c2209fef3924d31102bd84b"), "x" : 3 }
      { "_id" : ObjectId("4c220a42f3924d31102bd856"), "x" : 4, "j" : 1 }
      { "_id" : ObjectId("4c220a42f3924d31102bd857"), "x" : 4, "j" : 2 }
      { "_id" : ObjectId("4c220a42f3924d31102bd858"), "x" : 4, "j" : 3 }
      { "_id" : ObjectId("4c220a42f3924d31102bd859"), "x" : 4, "j" : 4 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85a"), "x" : 4, "j" : 5 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85b"), "x" : 4, "j" : 6 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85c"), "x" : 4, "j" : 7 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85d"), "x" : 4, "j" : 8 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85e"), "x" : 4, "j" : 9 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85f"), "x" : 4, "j" : 10 }
      { "_id" : ObjectId("4c220a42f3924d31102bd860"), "x" : 4, "j" : 11 }
      { "_id" : ObjectId("4c220a42f3924d31102bd861"), "x" : 4, "j" : 12 }
      { "_id" : ObjectId("4c220a42f3924d31102bd862"), "x" : 4, "j" : 13 }
      { "_id" : ObjectId("4c220a42f3924d31102bd863"), "x" : 4, "j" : 14 }
      { "_id" : ObjectId("4c220a42f3924d31102bd864"), "x" : 4, "j" : 15 }
      { "_id" : ObjectId("4c220a42f3924d31102bd865"), "x" : 4, "j" : 16 }
      { "_id" : ObjectId("4c220a42f3924d31102bd866"), "x" : 4, "j" : 17 }
      { "_id" : ObjectId("4c220a42f3924d31102bd867"), "x" : 4, "j" : 18 }
      has more

#. Type ``it`` (for iterate) to return the next batch of results.

   MongoDB returns the following:

   .. code-block:: javascript

      { "_id" : ObjectId("4c220a42f3924d31102bd868"), "x" : 4, "j" : 19 }
      { "_id" : ObjectId("4c220a42f3924d31102bd869"), "x" : 4, "j" : 20 }

   When you issue the :method:`find() <db.collection.find()>` method,
   MongoDB creates a "cursor" object that contains all the documents
   returned by the query. The shell iterates over the cursor and
   returns the first 20 documents. To continue to iterate over
   the cursor, you type ``it``.

   The next procedure describes additional ways to work with the cursor
   object.

For more information on inserting new documents, see :ref:`crud-create-insert`.

Retrieve Data from a Collection
-------------------------------

You have already returned documents from a collection by using the
:method:`find() <db.collection.find()>` method in its simplest form.

In these procedures you will determine what is returned and displayed by
working with:

- The cursor object created by :method:`find() <db.collection.find()>`

- :ref:`Query documents <read-operations-query-document>`

- The :method:`limit() <cursor.limit()>` method

Working with the Cursor Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you query a :term:`collection`, MongoDB returns a "cursor" object that
contains the results of the query. Cursor objects give you flexibility
in how to work with results.

The previous procedure showed how to display results by iterating over a
cursor using the ``it`` command. This procedure shows other ways to work
with a cursor.

For documentation on the cursor object, see :ref:`crud-read-cursor`.

Return More than 20 Documents
`````````````````````````````

1. In the MongoDB JavaScript shell, query the collection named ``things``
   and assign the resulting cursor object to the ``c`` variable:

   .. code-block:: javascript

      var c = db.things.find()

#. To return the full result set without limiting the results to 20
   documents, use a ``while`` loop to iterate over the ``c`` variable:

   .. code-block:: javascript

      while ( c.hasNext() ) printjson( c.next() )

   The ``hasNext()`` function tells if there are any more documents to
   return. The ``next()`` function returns the next document. The
   ``printjson()`` method renders the document in a JSON-style format.

   MongoDB returns the following result. Your :doc:`ObjectId </object-id>` values
   will be different:

   .. code-block:: javascript

      { "_id" : ObjectId("4c2209f9f3924d31102bd84a"), "name" : "mongo" }
      { "_id" : ObjectId("4c2209fef3924d31102bd84b"), "x" : 3 }
      { "_id" : ObjectId("4c220a42f3924d31102bd856"), "x" : 4, "j" : 1 }
      { "_id" : ObjectId("4c220a42f3924d31102bd857"), "x" : 4, "j" : 2 }
      { "_id" : ObjectId("4c220a42f3924d31102bd858"), "x" : 4, "j" : 3 }
      { "_id" : ObjectId("4c220a42f3924d31102bd859"), "x" : 4, "j" : 4 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85a"), "x" : 4, "j" : 5 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85b"), "x" : 4, "j" : 6 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85c"), "x" : 4, "j" : 7 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85d"), "x" : 4, "j" : 8 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85e"), "x" : 4, "j" : 9 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85f"), "x" : 4, "j" : 10 }
      { "_id" : ObjectId("4c220a42f3924d31102bd860"), "x" : 4, "j" : 11 }
      { "_id" : ObjectId("4c220a42f3924d31102bd861"), "x" : 4, "j" : 12 }
      { "_id" : ObjectId("4c220a42f3924d31102bd862"), "x" : 4, "j" : 13 }
      { "_id" : ObjectId("4c220a42f3924d31102bd863"), "x" : 4, "j" : 14 }
      { "_id" : ObjectId("4c220a42f3924d31102bd864"), "x" : 4, "j" : 15 }
      { "_id" : ObjectId("4c220a42f3924d31102bd865"), "x" : 4, "j" : 16 }
      { "_id" : ObjectId("4c220a42f3924d31102bd866"), "x" : 4, "j" : 17 }
      { "_id" : ObjectId("4c220a42f3924d31102bd867"), "x" : 4, "j" : 18 }
      { "_id" : ObjectId("4c220a42f3924d31102bd868"), "x" : 4, "j" : 19 }
      { "_id" : ObjectId("4c220a42f3924d31102bd869"), "x" : 4, "j" : 20 }

Use Array Operations with the Cursor
````````````````````````````````````

You can treat a cursor like an array. You also can convert a cursor to an array.

1. In the MongoDB JavaScript shell, query the collection named ``things``
   and assign the resulting cursor object to the ``c`` variable:

   .. code-block:: javascript

      var c = db.things.find()

#. To find the document at the fifth position (i.e. at subscript ``4``),
   issue the following command:

   .. code-block:: javascript

      printjson( c [ 4 ] )

   MongoDB returns the following:

   .. code-block:: javascript

      { "_id" : ObjectId("4c220a42f3924d31102bd858"), "x" : 4, "j" : 3 }

   When you query based on a document's position in the cursor object,
   :program:`mongo` loads into RAM all the documents prior to the
   highest position queried. For example, if you query the document at
   ``c[4]``, :program:`mongo` loads into RAM the documents at ``c[0]``,
   ``c[1]``, ``c[2]`` and ``c[3]`` as well. For very large result sets,
   you can run out of memory. For queries that return large result sets,
   it is better to iterate over the cursor using any of the iteration
   approaches already described.

#. To convert the cursor to an array, use ``toArray()``. Issue the
   following operations to create an array ``a`` and to find the
   document at the sixth position:

   .. code-block:: javascript

      var a = db.things.find().toArray()
      a [ 5 ]

   MongoDB returns the following:

   .. code-block:: javascript

      { "_id" : ObjectId("4c220a42f3924d31102bd859"), "x" : 4, "j" : 4 }

For more information on the cursor object, see :ref:`crud-read-cursor`.

.. todo Add:
   MongoDB cursors are not snapshots. Use explicit locking to perform
   a snapshotted query.
   And then link to kay's isolated operations document

Query for Specific Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this procedure, you query for specific documents in the ``things``
:term:`collection` by passing a "query document" as a parameter to the
:method:`find() <db.collection.find()>` method. A query document
specifies the field/value pair the query must match to return a
document. For more information, see
:ref:`read-operations-query-document`.

To query for specific documents, do the following:

1. In the MongoDB JavaScript shell, query for all documents where the
   ``name`` field has a value of ``mongo`` by passing the
   ``{ name : "mongo" }`` query document as a parameter to the
   :method:`find() <db.collection.find()>` method:

   .. code-block:: javascript

      db.things.find( { name : "mongo" } )

   MongoDB returns the one document that fits this criteria. Your
   :doc:`ObjectId </object-id>` value will be different:

   .. code-block:: javascript

      { "_id" : ObjectId("4c2209f9f3924d31102bd84a"), "name" : "mongo" }

#. Query for all documents where ``x`` has a value of ``4`` by passing
   the ``{ x : 4 }`` query document as a parameter to :method:`find()
   <db.collection.find()>`:

   .. code-block:: javascript

      db.things.find( { x : 4 } )

   MongoDB returns the following result set. :doc:`ObjectId
   </object-id>` values are always unique.

   .. code-block:: javascript

      { "_id" : ObjectId("4c220a42f3924d31102bd856"), "x" : 4, "j" : 1 }
      { "_id" : ObjectId("4c220a42f3924d31102bd857"), "x" : 4, "j" : 2 }
      { "_id" : ObjectId("4c220a42f3924d31102bd858"), "x" : 4, "j" : 3 }
      { "_id" : ObjectId("4c220a42f3924d31102bd859"), "x" : 4, "j" : 4 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85a"), "x" : 4, "j" : 5 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85b"), "x" : 4, "j" : 6 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85c"), "x" : 4, "j" : 7 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85d"), "x" : 4, "j" : 8 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85e"), "x" : 4, "j" : 9 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85f"), "x" : 4, "j" : 10 }
      { "_id" : ObjectId("4c220a42f3924d31102bd860"), "x" : 4, "j" : 11 }
      { "_id" : ObjectId("4c220a42f3924d31102bd861"), "x" : 4, "j" : 12 }
      { "_id" : ObjectId("4c220a42f3924d31102bd862"), "x" : 4, "j" : 13 }
      { "_id" : ObjectId("4c220a42f3924d31102bd863"), "x" : 4, "j" : 14 }
      { "_id" : ObjectId("4c220a42f3924d31102bd864"), "x" : 4, "j" : 15 }
      { "_id" : ObjectId("4c220a42f3924d31102bd865"), "x" : 4, "j" : 16 }
      { "_id" : ObjectId("4c220a42f3924d31102bd866"), "x" : 4, "j" : 17 }
      { "_id" : ObjectId("4c220a42f3924d31102bd867"), "x" : 4, "j" : 18 }
      { "_id" : ObjectId("4c220a42f3924d31102bd868"), "x" : 4, "j" : 19 }
      { "_id" : ObjectId("4c220a42f3924d31102bd869"), "x" : 4, "j" : 20 }

#. Query for all documents where ``x`` has a value of ``4``, as in the
   last step, but this time return only the value of ``j``. To do this,
   you add the ``{ j : true }`` document as a second parameter to
   :method:`find() <db.collection.find()>`. The document lists the
   fields to be returned. Issue the following command:

   .. code-block:: javascript

      db.things.find( { x : 4 } , { j : true } )

   MongoDB returns the following results, excluding the ``x`` field. The
   ``_id`` field is included by default:

   .. code-block:: javascript

      { "_id" : ObjectId("4c220a42f3924d31102bd856"), "j" : 1 }
      { "_id" : ObjectId("4c220a42f3924d31102bd857"), "j" : 2 }
      { "_id" : ObjectId("4c220a42f3924d31102bd858"), "j" : 3 }
      { "_id" : ObjectId("4c220a42f3924d31102bd859"), "j" : 4 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85a"), "j" : 5 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85b"), "j" : 6 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85c"), "j" : 7 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85d"), "j" : 8 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85e"), "j" : 9 }
      { "_id" : ObjectId("4c220a42f3924d31102bd85f"), "j" : 10 }
      { "_id" : ObjectId("4c220a42f3924d31102bd860"), "j" : 11 }
      { "_id" : ObjectId("4c220a42f3924d31102bd861"), "j" : 12 }
      { "_id" : ObjectId("4c220a42f3924d31102bd862"), "j" : 13 }
      { "_id" : ObjectId("4c220a42f3924d31102bd863"), "j" : 14 }
      { "_id" : ObjectId("4c220a42f3924d31102bd864"), "j" : 15 }
      { "_id" : ObjectId("4c220a42f3924d31102bd865"), "j" : 16 }
      { "_id" : ObjectId("4c220a42f3924d31102bd866"), "j" : 17 }
      { "_id" : ObjectId("4c220a42f3924d31102bd867"), "j" : 18 }
      { "_id" : ObjectId("4c220a42f3924d31102bd868"), "j" : 19 }
      { "_id" : ObjectId("4c220a42f3924d31102bd869"), "j" : 20 }

#. MongoDB lets you retrieve a single document via the :method:`findOne()
   <db.collection.findOne()>` method. The :method:`findOne()
   <db.collection.findOne()>` method takes all the same parameters as
   :method:`find() <db.collection.find()>`, but instead of returning a
   cursor, it returns a document.

   To retrieve one document from the ``things`` collection, issue the
   following command:

   .. code-block:: javascript

      db.things.findOne()

For more information on querying for documents, see the
:doc:`/applications/read` and :doc:`/read-operations` documentation.

Limit the Number of Documents in the Result Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can constrain the size of the result set to increase performance by
limiting the amount of data your application must receive over the
network.

To specify the maximum number of documents in the result set, use the
:method:`limit() <cursor.limit()>` method.

Issue the following command:

.. code-block:: javascript

   db.things.find().limit(3)

MongoDB returns the following result. Your :doc:`ObjectId </object-id>` values will
be different:

.. code-block:: javascript

   { "_id" : ObjectId("4c2209f9f3924d31102bd84a"), "name" : "mongo" }
   { "_id" : ObjectId("4c2209fef3924d31102bd84b"), "x" : 3 }
   { "_id" : ObjectId("4c220a42f3924d31102bd856"), "x" : 4, "j" : 1 }

Continuing to Use MongoDB
-------------------------

To learn more about manipulating the documents in a database, see:

- :ref:`crud-operations`

- :doc:`/reference/sql-comparison`

- :doc:`/applications/drivers`
