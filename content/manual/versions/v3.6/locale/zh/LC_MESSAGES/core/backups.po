#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/backups.txt:3
msgid "MongoDB Backup Methods"
msgstr ""

#: ../source/core/backups.txt:13
msgid ""
"When deploying MongoDB in production, you should have a strategy for "
"capturing and restoring backups in the case of data loss events."
msgstr ""

#: ../source/core/backups.txt:18
msgid "Back Up with Atlas"
msgstr ""

#: ../source/core/backups.txt:20
msgid ""
"`MongoDB Atlas <https://www.mongodb.com/cloud/atlas?jmp=docs>`_ is a "
"database-as-a-service that offers fully managed backups."
msgstr ""

#: ../source/core/backups.txt:24
msgid "Back Up with |MMS| or Ops Manager"
msgstr ""

#: ../source/core/backups.txt:26
msgid ""
"|MMS| is a hosted back up, monitoring, and automation service for "
"MongoDB. |mms-home| supports backing up and restoring MongoDB "
":term:`replica sets <replica set>` and :term:`sharded clusters <sharded "
"cluster>` from a graphical user interface."
msgstr ""

#: ../source/core/backups.txt:34
msgid "|MMS|"
msgstr ""

#: ../source/core/backups.txt:36
msgid ""
"The |mms-home| supports the backing up and restoring of MongoDB "
"deployments."
msgstr ""

#: ../source/core/backups.txt:39
msgid ""
"|MMS| continually backs up MongoDB :term:`replica sets <replica set>` and"
" :term:`sharded clusters <sharded cluster>` by reading the :term:`oplog` "
"data from your MongoDB deployment. |MMS| creates snapshots of your data "
"at set intervals, and can also offer point-in-time recovery of MongoDB "
"replica sets and sharded clusters."
msgstr ""

#: ../source/core/backups.txt:49
msgid ""
"To get started with |MMS| Backup, sign up for |mms-home|. For "
"documentation on |MMS|, see the |mms-docs|."
msgstr ""

#: ../source/core/backups.txt:57
msgid "Ops Manager"
msgstr ""

#: ../source/core/backups.txt:59
msgid ""
"With Ops Manager, MongoDB subscribers can install and run the same core "
"software that powers :ref:`backup-with-mms` on their own infrastructure. "
"Ops Manager is an on-premise solution that has similar functionality to "
"|MMS| and is available with Enterprise Advanced subscriptions."
msgstr ""

#: ../source/core/backups.txt:64
msgid ""
"For more information about Ops Manager, see the `MongoDB Enterprise "
"Advanced <https://www.mongodb.com/products/mongodb-enterprise-"
"advanced?jmp=docs>`_ page and the :opsmgr:`Ops Manager Manual </>`."
msgstr ""

#: ../source/core/backups.txt:72
msgid "Back Up by Copying Underlying Data Files"
msgstr ""

#: ../source/core/backups.txt:75
msgid "Back Up with Filesystem Snapshots"
msgstr ""

#: ../source/core/backups.txt:77
msgid ""
"You can create a backup of a MongoDB deployment by making a copy of "
"MongoDB's underlying data files."
msgstr ""

#: ../source/core/backups.txt:80
msgid ""
"If the volume where MongoDB stores its data files supports point-in-time "
"snapshots, you can use these snapshots to create backups of a MongoDB "
"system at an exact moment in time. File system snapshots are an operating"
" system volume manager feature, and are not specific to MongoDB. With "
"file system snapshots, the operating system takes a snapshot of the "
"volume to use as a baseline for data backup. The mechanics of snapshots "
"depend on the underlying storage system. For example, on Linux, the "
"Logical Volume Manager (LVM) can create snapshots. Similarly, Amazonâ€™s "
"EBS storage system for EC2 supports snapshots."
msgstr ""

#: ../source/core/backups.txt:91
msgid ""
"To get a correct snapshot of a running :binary:`~bin.mongod` process, you"
" must have journaling enabled and the journal must reside on the same "
"logical volume as the other MongoDB data files. Without journaling "
"enabled, there is no guarantee that the snapshot will be consistent or "
"valid."
msgstr ""

#: ../source/core/backups.txt:97
msgid ""
"To get a consistent snapshot of a :term:`sharded cluster`, you must "
"disable the balancer and capture a snapshot from every shard as well as a"
" config server at approximately the same moment in time."
msgstr ""

#: ../source/core/backups.txt:101
msgid ""
"For more information, see the :doc:`/tutorial/backup-with-filesystem-"
"snapshots` and :doc:`/tutorial/backup-sharded-cluster-with-filesystem-"
"snapshots` for complete instructions on using LVM to create snapshots. "
"Also see :ecosystem:`Back up and Restore Processes for MongoDB on Amazon "
"EC2 </tutorial/backup-and-restore-mongodb-on-amazon-ec2>`."
msgstr ""

#: ../source/core/backups.txt:109
msgid "Back Up with ``cp`` or ``rsync``"
msgstr ""

#: ../source/core/backups.txt:111
msgid ""
"If your storage system does not support snapshots, you can copy the files"
" directly using ``cp``, ``rsync``, or a similar tool. Since copying "
"multiple files is not an atomic operation, you must stop all writes to "
"the :binary:`~bin.mongod` before copying the files. Otherwise, you will "
"copy the files in an invalid state."
msgstr ""

#: ../source/core/backups.txt:117
msgid ""
"Backups produced by copying the underlying data do not support point in "
"time recovery for :term:`replica sets <replica set>` and are difficult to"
" manage for larger sharded clusters. Additionally, these backups are "
"larger because they include the indexes and duplicate underlying storage "
"padding and fragmentation. :binary:`~bin.mongodump`, by contrast, creates"
" smaller backups."
msgstr ""

#: ../source/core/backups.txt:127
msgid "Back Up with ``mongodump``"
msgstr ""

#: ../source/core/backups.txt:129
msgid ""
":binary:`~bin.mongodump` reads data from a MongoDB database and creates "
"high fidelity BSON files which the :binary:`~bin.mongorestore` tool can "
"use to populate a MongoDB database. :binary:`~bin.mongodump` and "
":binary:`~bin.mongorestore` are simple and efficient tools for backing up"
" and restoring small MongoDB deployments, but are not ideal for capturing"
" backups of larger systems."
msgstr ""

#: ../source/core/backups.txt:137
msgid ""
":binary:`~bin.mongodump` and :binary:`~bin.mongorestore` operate against "
"a running :binary:`~bin.mongod` process, and can manipulate the "
"underlying data files directly. By default, :binary:`~bin.mongodump` does"
" not capture the contents of the :doc:`local database </reference/local-"
"database>`."
msgstr ""

#: ../source/core/backups.txt:142
msgid ""
":binary:`~bin.mongodump` only captures the documents in the database. The"
" resulting backup is space efficient, but :binary:`~bin.mongorestore` or "
":binary:`~bin.mongod` must rebuild the indexes after restoring data."
msgstr ""

#: ../source/core/backups.txt:146
msgid ""
"When connected to a MongoDB instance, :binary:`~bin.mongodump` can "
"adversely affect :binary:`~bin.mongod` performance. If your data is "
"larger than system memory, the queries will push the working set out of "
"memory, causing :ref:`page faults <administration-monitoring-page-"
"faults>`."
msgstr ""

#: ../source/core/backups.txt:151
msgid ""
"Applications can continue to modify data while :binary:`~bin.mongodump` "
"captures the output. For replica sets, :binary:`~bin.mongodump` provides "
"the :option:`--oplog <mongodump --oplog>` option to include in its output"
" :term:`oplog` entries that occur during the :binary:`~bin.mongodump` "
"operation. This allows the corresponding :binary:`~bin.mongorestore` "
"operation to replay the captured oplog. To restore a backup created with "
":option:`--oplog <mongodump --oplog>`, use :binary:`~bin.mongorestore` "
"with the :option:`--oplogReplay <mongorestore --oplogReplay>` option."
msgstr ""

#: ../source/core/backups.txt:160
msgid ""
"However, for replica sets, consider :ref:`backup-with-mms` or :ref"
":`backup-with-mms-onprem`."
msgstr ""

#: ../source/core/backups.txt:163
msgid ""
"See :doc:`/tutorial/backup-and-restore-tools` and :doc:`/tutorial/backup-"
"sharded-cluster-with-database-dumps` for more information."
msgstr ""

#: ../source/includes/extracts/additional-resources-backup.rst:4
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-backup.rst:6
msgid ""
"`MongoDB Atlas: For a simple way to run, monitor, and maintain cloud-"
"hosted MongoDB deployments "
"<https://www.mongodb.com/cloud/atlas?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-backup.rst:10
msgid ""
"`Backup and it's Role in Disaster Recovery White Paper "
"<https://www.mongodb.com/lp/white-paper/backup-disaster-"
"recovery?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-backup.rst:11
msgid ""
"`Backup vs. Replication: Why Do You Need Both? "
"<http://www.mongodb.com/blog/post/backup-vs-replication-why-do-you-need-"
"both?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-backup.rst:12
msgid ""
"`MongoDB Production Readiness Consulting Package "
"<https://www.mongodb.com/products/consulting?jmp=docs#s_product_readiness>`_"
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid ""
#~ "When deploying MongoDB in production, "
#~ "you should have a strategy for "
#~ "capturing and restoring backups in the"
#~ " case of data loss events. There "
#~ "are several ways to back up "
#~ "MongoDB clusters:"
#~ msgstr ""

#~ msgid ":ref:`backup-with-file-copies`"
#~ msgstr ""

#~ msgid ":ref:`backup-and-restore-tools`"
#~ msgstr ""

#~ msgid ":ref:`backup-with-mms`"
#~ msgstr ""

#~ msgid ":ref:`backup-with-mms-onprem`"
#~ msgstr ""

#~ msgid "Backup by Copying Underlying Data Files"
#~ msgstr ""

#~ msgid "You can create a backup by copying MongoDB's underlying data files."
#~ msgstr ""

#~ msgid ""
#~ "If the volume where MongoDB stores "
#~ "data files supports point in time "
#~ "snapshots, you can use these snapshots"
#~ " to create backups of a MongoDB "
#~ "system at an exact moment in time."
#~ msgstr ""

#~ msgid ""
#~ "File systems snapshots are an operating"
#~ " system volume manager feature, and "
#~ "are not specific to MongoDB. The "
#~ "mechanics of snapshots depend on the "
#~ "underlying storage system. For example, "
#~ "if you use Amazonâ€™s EBS storage "
#~ "system for EC2 supports snapshots. On"
#~ " Linux the LVM manager can create "
#~ "a snapshot."
#~ msgstr ""

#~ msgid ""
#~ "To get a consistent snapshot of a"
#~ " sharded system, you must disable the"
#~ " balancer and capture a snapshot from"
#~ " every shard and a config server "
#~ "at approximately the same moment in "
#~ "time."
#~ msgstr ""

#~ msgid ""
#~ "Backups produced by copying the "
#~ "underlying data do not support point "
#~ "in time recovery for replica sets "
#~ "and are difficult to manage for "
#~ "larger sharded clusters. Additionally, these"
#~ " backups are larger because they "
#~ "include the indexes and duplicate "
#~ "underlying storage padding and fragmentation."
#~ " :program:`mongodump`, by contrast, creates "
#~ "smaller backups."
#~ msgstr ""

#~ msgid "Backup with ``mongodump``"
#~ msgstr ""

#~ msgid ""
#~ "If applications modify data while "
#~ ":program:`mongodump` is creating a backup, "
#~ ":program:`mongodump` will compete for "
#~ "resources with those applications."
#~ msgstr ""

#~ msgid ""
#~ "See :doc:`/tutorial/backup-and-restore-tools`,"
#~ " :doc:`/tutorial/backup-small-sharded-cluster-"
#~ "with-mongodump`, and :doc:`/tutorial/backup-"
#~ "sharded-cluster-with-database-dumps` for"
#~ " more information."
#~ msgstr ""

#~ msgid "|MMS| Backup"
#~ msgstr ""

#~ msgid ""
#~ "|MMS| continually backs up MongoDB "
#~ "replica sets and sharded clusters by "
#~ "reading the oplog data from your "
#~ "MongoDB deployment."
#~ msgstr ""

#~ msgid ""
#~ "|MMS| Backup offers point in time "
#~ "recovery of MongoDB replica sets and "
#~ "a consistent snapshot of sharded "
#~ "clusters."
#~ msgstr ""

#~ msgid ""
#~ "|MMS| achieves point in time recovery"
#~ " by storing oplog data so that "
#~ "it can create a restore for any"
#~ " moment in time in the last 24"
#~ " hours for a particular replica set"
#~ " or sharded cluster. Sharded cluster "
#~ "snapshots are difficult to achieve with"
#~ " other MongoDB backup methods."
#~ msgstr ""

#~ msgid ""
#~ "To restore a MongoDB deployment from "
#~ "an |MMS| Backup snapshot, you download"
#~ " a compressed archive of your MongoDB"
#~ " data files and distribute those "
#~ "files before restarting the :program:`mongod`"
#~ " processes."
#~ msgstr ""

#~ msgid "Ops Manager Backup Software"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB Subscribers can install and run"
#~ " the same core software that powers"
#~ " :ref:`backup-with-mms` on their own"
#~ " infrastructure. Ops Manager, an on-"
#~ "premise solution, has similar functionality"
#~ " to the cloud version and is "
#~ "available with Enterprise Advanced "
#~ "subscriptions."
#~ msgstr ""

#~ msgid "Further Reading"
#~ msgstr ""

#~ msgid ":doc:`/tutorial/backup-with-filesystem-snapshots`"
#~ msgstr ""

#~ msgid ""
#~ "An outline of procedures for creating"
#~ " MongoDB data set backups using "
#~ "system-level file snapshot tool, such "
#~ "as :term:`LVM` or native storage "
#~ "appliance tools."
#~ msgstr ""

#~ msgid ":doc:`/tutorial/restore-replica-set-from-backup`"
#~ msgstr ""

#~ msgid ""
#~ "Describes procedure for restoring a "
#~ "replica set from an archived backup "
#~ "such as a :program:`mongodump` or "
#~ "|mms-home| Backup file."
#~ msgstr ""

#~ msgid ":doc:`/tutorial/backup-and-restore-tools`"
#~ msgstr ""

#~ msgid ""
#~ "Describes a procedure for exporting the"
#~ " contents of a database to either "
#~ "a binary dump or a textual "
#~ "exchange format, and for importing these"
#~ " files into a database."
#~ msgstr ""

#~ msgid ":doc:`/administration/backup-sharded-clusters`"
#~ msgstr ""

#~ msgid ""
#~ "Detailed procedures and considerations for "
#~ "backing up sharded clusters and single"
#~ " shards."
#~ msgstr ""

#~ msgid ":doc:`/tutorial/recover-data-following-unexpected-shutdown`"
#~ msgstr ""

#~ msgid ""
#~ "Recover data from MongoDB data files "
#~ "that were not properly closed or "
#~ "have an invalid state."
#~ msgstr ""

#~ msgid ""
#~ "The :program:`mongodump` tool reads data "
#~ "from a MongoDB database and creates "
#~ "high fidelity BSON files. The "
#~ ":program:`mongorestore` tool can populate a"
#~ " MongoDB database with the data from"
#~ " these BSON files."
#~ msgstr ""

#~ msgid "Use Cases"
#~ msgstr ""

#~ msgid ""
#~ ":program:`mongodump` and :program:`mongorestore` are"
#~ " simple and efficient for backing up"
#~ " small MongoDB deployments, for partial "
#~ "backup and restores based on a "
#~ "query, syncing from production to "
#~ "staging or development environments, or "
#~ "changing the storage engine of a "
#~ "standalone."
#~ msgstr ""

#~ msgid ""
#~ "However, these tools can be problematic"
#~ " for capturing backups of larger "
#~ "systems, sharded clusters, or replica "
#~ "sets. For alternatives, see :ref:`backup-"
#~ "with-mms` or :ref:`backup-with-mms-"
#~ "onprem`."
#~ msgstr ""

#~ msgid "Data Exclusion"
#~ msgstr ""

#~ msgid ""
#~ ":program:`mongodump` excludes the content of"
#~ " the ``local`` database in its "
#~ "output."
#~ msgstr ""

#~ msgid ""
#~ ":program:`mongodump` only captures the "
#~ "documents in the database in its "
#~ "backup data and does not include "
#~ "index data. :program:`mongorestore` or "
#~ ":program:`mongod` must then rebuild the "
#~ "indexes after restoring data."
#~ msgstr ""

#~ msgid "Data Compression Handling"
#~ msgstr ""

#~ msgid ""
#~ "When run against a :program:`mongod` "
#~ "instance that uses the :doc:`WiredTiger "
#~ "</core/wiredtiger>` storage engine, "
#~ ":program:`mongodump` outputs uncompressed data."
#~ msgstr ""

#~ msgid "Performance"
#~ msgstr ""

#~ msgid ""
#~ ":program:`mongodump` can adversely affect the"
#~ " performance of the :program:`mongod`. If"
#~ " your data is larger than system "
#~ "memory, the :program:`mongodump` will push "
#~ "the working set out of memory."
#~ msgstr ""

#~ msgid ""
#~ "To mitigate the impact of "
#~ ":program:`mongodump` on the performance of "
#~ "the replica set, use :program:`mongodump` "
#~ "to capture backups from a "
#~ ":doc:`secondary </core/replica-set-secondary>` "
#~ "member of a replica set."
#~ msgstr ""

# f41b0d7ec03642e19ce4b1c4db5d8b5f
#~ msgid "On this page"
#~ msgstr ""

# 3b036dc86a6b406189160888da244fab
#~ msgid "Tip"
#~ msgstr ""

# 637abe65a04d42f39d581ef8577c9652
#~ msgid ""
#~ "To get a correct snapshot of a "
#~ "running :program:`mongod` process, you must"
#~ " have journaling enabled and the "
#~ "journal must reside on the same "
#~ "logical volume as the other MongoDB "
#~ "data files. Without journaling enabled, "
#~ "there is no guarantee that the "
#~ "snapshot will be consistent or valid."
#~ msgstr ""

# a664b966054d4e4b8f35f569404d2500
#~ msgid ""
#~ "If your storage system does not "
#~ "support snapshots, you can copy the "
#~ "files directly using ``cp``, ``rsync``, "
#~ "or a similar tool. Since copying "
#~ "multiple files is not an atomic "
#~ "operation, you must stop all writes "
#~ "to the :program:`mongod` before copying "
#~ "the files. Otherwise, you will copy "
#~ "the files in an invalid state."
#~ msgstr ""

# 428462f52eb34bd29602a162d7d61930
#~ msgid ""
#~ "Backups produced by copying the "
#~ "underlying data do not support point "
#~ "in time recovery for :term:`replica sets"
#~ " <replica set>` and are difficult to"
#~ " manage for larger sharded clusters. "
#~ "Additionally, these backups are larger "
#~ "because they include the indexes and "
#~ "duplicate underlying storage padding and "
#~ "fragmentation. :program:`mongodump`, by contrast,"
#~ " creates smaller backups."
#~ msgstr ""

# 60f0bf5e3b4f431a9891288e2004759b
#~ msgid ""
#~ ":program:`mongodump` reads data from a "
#~ "MongoDB database and creates high "
#~ "fidelity BSON files which the "
#~ ":program:`mongorestore` tool can use to "
#~ "populate a MongoDB database. "
#~ ":program:`mongodump` and :program:`mongorestore` are"
#~ " simple and efficient tools for "
#~ "backing up and restoring small MongoDB"
#~ " deployments, but are not ideal for"
#~ " capturing backups of larger systems."
#~ msgstr ""

# ee0dfaa258b9420f8381f23fa784174b
#~ msgid ""
#~ ":program:`mongodump` and :program:`mongorestore` "
#~ "operate against a running :program:`mongod`"
#~ " process, and can manipulate the "
#~ "underlying data files directly. By "
#~ "default, :program:`mongodump` does not capture"
#~ " the contents of the :doc:`local "
#~ "database </reference/local-database>`."
#~ msgstr ""

# 943eb31b2d23441c86addef099c1e2b0
#~ msgid ""
#~ ":program:`mongodump` only captures the "
#~ "documents in the database. The resulting"
#~ " backup is space efficient, but "
#~ ":program:`mongorestore` or :program:`mongod` must"
#~ " rebuild the indexes after restoring "
#~ "data."
#~ msgstr ""

# 797e8425109a424fb386992faa2f7d1d
#~ msgid ""
#~ "When connected to a MongoDB instance,"
#~ " :program:`mongodump` can adversely affect "
#~ ":program:`mongod` performance. If your data"
#~ " is larger than system memory, the"
#~ " queries will push the working set"
#~ " out of memory, causing :ref:`page "
#~ "faults <administration-monitoring-page-"
#~ "faults>`."
#~ msgstr ""

# bc98528e66554709ab5cbc228e323463
#~ msgid ""
#~ "Applications can continue to modify data"
#~ " while :program:`mongodump` captures the "
#~ "output. For replica sets, :program:`mongodump`"
#~ " provides the :option:`--oplog <mongodump "
#~ "--oplog>` option to include in its "
#~ "output :term:`oplog` entries that occur "
#~ "during the :program:`mongodump` operation. "
#~ "This allows the corresponding "
#~ ":program:`mongorestore` operation to replay "
#~ "the captured oplog. To restore a "
#~ "backup created with :option:`--oplog "
#~ "<mongodump --oplog>`, use :program:`mongorestore`"
#~ " with the :option:`--oplogReplay <mongorestore"
#~ " --oplogReplay>` option."
#~ msgstr ""

