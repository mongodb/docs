.. _golang-connection-guide:

================
Connection Guide
================

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to connect to a MongoDB instance or
replica set deployment by using the {+driver-short+}.

You can use the {+driver-short+} to connect to deployments hosted in the
following environments:

.. include:: /includes/fact-environments.rst

.. _golang-connection-uri:

--------------
Connection URI
--------------

A **connection URI**, also known as a connection string, tells the
driver how to connect to MongoDB and how to behave while connected.

Parts of a Connection URI
~~~~~~~~~~~~~~~~~~~~~~~~~

The following example explains each part of a sample connection URI:

.. figure:: /includes/figures/connection_uri_parts.png
   :alt: Each part of the connection string

In this example, we use ``mongodb`` for the protocol, which specifies the
:manual:`Standard Connection String Format
</reference/connection-string/#std-label-connections-standard-connection-string-format>`.
You can also use the :manual:`DNS Seed List Connection Format
</reference/connection-string/#dns-seed-list-connection-format>` if you
want more flexibility of deployment and the ability to change the
servers in rotation without reconfiguring clients.

The next part of the connection string contains your username and, if
you are using password-based authentication, your password. Replace the value of
``user`` with your username and ``pass`` with your password. If you are using an
authentication mechanism that does not require a username and password, omit
this part of the connection URI.

The next part of the connection string specifies the hostname or IP address and
port of your MongoDB instance. In the preceding example, we use ``sample.host``
as the hostname and ``27017`` as the port. Replace these values to point to
your MongoDB instance.

The last part of the connection string specifies connection and authentication
options. In the example, we set two connection options:
``maxPoolSize=20`` and ``w=majority``. To learn more about connection
options, read the :ref:`golang-connection-options` section of this guide.

Connection Example
~~~~~~~~~~~~~~~~~~

To connect to MongoDB, you must create a client. A client manages your
connections and runs database commands.

.. tip:: Reuse Your Client

   We recommend that you reuse your client across sessions and operations.
   You can use the same ``Client`` instance to perform multiple tasks, instead of
   creating a new one each time. The ``Client`` type is safe for
   concurrent use by multiple `goroutines
   <https://www.golang-book.com/books/intro/10>`__. To learn more about
   how connection pools work in the driver, see the :ref:`FAQ page <golang-faq-connection-pool>`.

You can create a client that uses your connection string and other
client options by passing a ``ClientOptions`` object to the ``Connect()``
method.

To specify your connection URI, pass it to the ``ApplyURI()``
method, which returns a new ``ClientOptions`` instance. To set any other
options, call the relevant helper method from the ``options`` package.

To learn more about connection options, see the
:ref:`Connection Options section <golang-connection-options>`. To learn
more about creating a client, see the API documentation for `Client
<{+api+}/mongo#Client>`__ and `Connect() <{+api+}/mongo#Connect>`__.

You can set the {+stable-api+} version as an option to avoid
breaking changes when you upgrade to a new server version. To
learn more about the {+stable-api+} feature, see the :ref:`{+stable-api+} page
<golang-stable-api>`.

The following code shows how you can create a client that uses an Atlas
connection string and the {+stable-api+} version, connect to MongoDB, and
verify that the connection is successful:

.. literalinclude:: /includes/fundamentals/code-snippets/srv.go
   :language: go

.. tip::

   Follow the :ref:`Quick Start guide <golang-connect-to-your-cluster>`
   to retrieve your Atlas connection string.

.. note::

   To learn about connecting to Atlas Serverless, see the
   :ref:`Serverless Instance Limitations page
   <atlas-serverless-drivers>` to identify the minimum driver version
   required.

--------------------------------
Other Ways to Connect to MongoDB
--------------------------------

If you are connecting to a single MongoDB server instance or replica set
that is not hosted on Atlas, see the following sections to find out how to
connect.

Connect to a MongoDB Server on Your Local Machine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/localhost-connection.rst

To test whether you can connect to your server, replace the connection
string with your localhost connection string in the preceding code example.

Connect to a Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~

A MongoDB replica set deployment is a group of connected instances that
store the same set of data. This configuration provides data
redundancy and high data availability.

To connect to a replica set deployment, specify the hostname and port numbers
of each instance, separated by commas, and the replica set name as the value
of the ``replicaSet`` parameter in the connection string. In the following
example, the hostnames are ``host1``, ``host2``, and ``host3``, and the
port numbers are all ``27017``. The replica set name is ``myRS``.

.. code-block:: none

   mongodb://host1:27017,host2:27017,host3:27017/?replicaSet=myRS

When connecting to a replica set, the driver takes the following actions by default:

- Discovers all replica set members when given the address of any one member.
- Dispatches operations to the appropriate member, such as instructions
  to write against the **primary**.

.. tip::

   You can specify just one host to connect to a replica set.
   However, to ensure connectivity when the specified host
   is unavailable, you should provide the full list of hosts.

Direct Connection
`````````````````

To force operations on the host designated in the connection URI, specify the ``directConnection`` option. Direct
connections:

- Don't support SRV strings.
- Fail on writes when the specified host is not the **primary**.
- Require you to :manual:`specify a secondary read preference </core/read-preference/#mongodb-readmode-secondary>`
  when the specified host isn't the **primary**.

.. _golang-connection-options:

------------------
Connection Options
------------------

This section explains several common MongoDB connection and authentication
options. You can pass the connection options as parameters of the connection
URI to specify the behavior of the client.

.. list-table::
   :header-rows: 1
   :widths: 34 10 12 44

   * - Option Name
     - Type
     - Default Value
     - Description

   * - **timeoutMS**
     - integer
     - ``null``
     - Specifies the number of milliseconds that a single operation run on the
       ``Client`` can take before returning a timeout error. Operations honor
       this setting only if there is no deadline on the operation Context.

   * - **connectTimeoutMS**
     - integer
     - ``30000``
     - Specifies the number of milliseconds to wait before timeout on a TCP
       connection.

   * - **maxPoolSize**
     - integer
     - ``100``
     - Specifies the maximum number of connections that a connection pool may
       have at a given time.

   * - **replicaSet**
     - string
     - ``null``
     - Specifies the replica set name for the cluster. All nodes in the
       replica set must have the same replica set name, or the Client will not
       consider them as part of the set.

   * - **maxIdleTimeMS**
     - integer
     - ``0``
     - Specifies the maximum amount of time a connection can remain idle
       in the connection pool before being removed and closed. The
       default is ``0``, meaning a connection can remain unused
       indefinitely.

   * - **minPoolSize**
     - integer
     - ``0``
     - Specifies the minimum number of connections that the driver maintains
       in a single connection pool.

   * - **socketTimeoutMS**
     - integer
     - ``0``
     - Specifies the number of milliseconds to wait for a socket read or
       write to return before returning a network error. The ``0``
       default value indicates that there is no timeout.

   * - **serverSelectionTimeoutMS**
     - integer
     - ``30000``
     - Specifies the number of milliseconds to wait to find an available,
       suitable server to execute an operation.

   * - **heartbeatFrequencyMS**
     - integer
     - ``10000``
     - Specifies the number of milliseconds to wait between periodic
       background server checks.

   * - **tls**
     - boolean
     - ``false``
     - Specifies whether to establish a Transport Layer Security (TLS)
       connection with the instance. This is automatically set to ``true``
       when using a DNS seedlist (SRV) in the connection string. You can
       override this behavior by setting the value to ``false``.

   * - **w**
     - string or integer
     - ``null``
     - Specifies the write concern. To learn more about values, see the
       server documentation on
       :manual:`Write Concern options </reference/write-concern>`.

   * - **directConnection**
     - boolean
     - ``false``
     - Specifies whether to force dispatch **all** operations to the host
       specified in the connection URI.

For a full list of connection options, see the `ClientOptions API
documentation
<{+api+}/mongo/options#ClientOptions>`__.

.. _golang-timeout-setting:

Single Timeout Setting
~~~~~~~~~~~~~~~~~~~~~~

You can set a single ``Timeout`` option on your ``Client`` to govern the
amount of time that a single operation can take to execute using the
``SetTimeout()`` method or specifying the ``timeoutMS`` option in your
connection URI string. ``Database``, ``Collection``,
``Session``, ``ChangeStream``, and ``Bucket`` instances elsewhere in
your code inherit the ``Timeout`` option from ``Client`` if you do not set a
Context for operations against the same entity.

If you pass a Context into an operation with a deadline, the driver uses
that Context deadline for the operation. If the context does not have a
deadline, the driver derives a new Context from the given Context using
the ``Timeout`` option set on the ``Client``.

.. note:: Retries under Timeout Specification

   With default settings, if you set a ``Timeout`` option on your ``Client``
   and your operation requires a retry, the driver retries the operation
   as many times as possible before the timeout expires. Once the timeout
   expires, the driver returns a timeout error. Versions 1.1 and later
   of the {+driver-short+} enable retryable reads and writes by default.
   See the Server manual for more information about :ref:`retryable
   reads <retryable-reads>` and :manual:`retryable writes </core/retryable-writes/>`.

The following code shows how to set the ``Timeout`` option on a ``Client``
with the ``SetTimeout`` option:

.. code-block:: go

   opts := options.Client().SetTimeout(5 * time.Second)

The following example shows how you can set a single timeout with the
URI option and execute an operation that inherits this setting:

.. code-block:: go

   uri := "mongodb://user:pass@sample.host:27017/?timeoutMS=5000"
   client := mongo.Connect(uri)
   coll := client.Database("<db>").Collection("<collection>")
   ...
   coll.InsertOne(context.Background(), doc)

.. important:: Legacy Timeout Options

   ``SocketTimeout``, ``wTimeout``, ``MaxTime``, and ``MaxCommitTime``
   will be deprecated in an upcoming release. The driver ignores ``MaxTime`` and
   ``MaxCommitTime`` if you set ``Timeout``. The driver still honors
   ``SocketTimeout`` and ``wTimeout``, but these settings may result in
   undefined behavior. Consider using only the single timeout option instead.
