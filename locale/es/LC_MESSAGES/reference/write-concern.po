# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 18:45+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 54e1463fe305429f8c064d89b6145d00
#: ../source/reference/write-concern.txt:8
msgid "Write Concern"
msgstr ""

# 8d24bcf63c964efbb9984596e3501f79
#: ../source/reference/write-concern.txt
msgid "On this page"
msgstr ""

# 22acfd458ba74d5f86918b7d97870c9b
#: ../source/reference/write-concern.txt:18
msgid ""
"Write concern describes the level of acknowledgement requested from "
"MongoDB for write operations to a standalone :program:`mongod` or to "
":doc:`replica sets </replication>` or to :doc:`sharded clusters "
"</sharding>`. In sharded clusters, :program:`mongos` instances will pass "
"the write concern on to the shards."
msgstr ""

# 49c6209b5f664ef2ad7cb2776088ed08
#: ../source/reference/write-concern.txt:25
msgid ""
"A new protocol for :ref:`write operations <rel-notes-write-operations>` "
"integrates write concerns with the write operations and eliminates the "
"need to call the :dbcommand:`getLastError` command. Previous versions "
"required a :dbcommand:`getLastError` command immediately after a write "
"operation to specify the write concern."
msgstr ""

# 90d4ba378a4e428393b3a6e92edcac50
#: ../source/reference/write-concern.txt:34
msgid "Write Concern Specification"
msgstr ""

# bd25f540d78540afb95c21f1f92cdaad
#: ../source/reference/write-concern.txt:36
msgid "Write concern can include the following fields:"
msgstr ""

# 5357ee360e2840c0a75d78e8acb59b29
#: ../source/reference/write-concern.txt:42
msgid ""
"the :ref:`w <wc-w>` option to request acknowledgment that the write "
"operation has propagated to a specified number of :program:`mongod` "
"instances or to :program:`mongod` instances with specified tags."
msgstr ""

# 51bd419b8e3c4c00a21fe00fa6694e73
#: ../source/reference/write-concern.txt:46
msgid ""
"the :ref:`j <wc-j>` option to request acknowledgement that the write "
"operation has been written to the journal, and"
msgstr ""

# 0549e5fe47644e32a3c778cf24c9f431
#: ../source/reference/write-concern.txt:49
msgid ""
"the :ref:`wtimeout <wc-wtimeout>` option to specify a time limit to "
"prevent write operations from blocking indefinitely."
msgstr ""

# 360e1910394745f6a4a667240160da76
#: ../source/reference/write-concern.txt:55
msgid "``w`` Option"
msgstr ""

# dc4201321cf84a6f8f379a46f3cf8055
#: ../source/reference/write-concern.txt:57
msgid ""
"The ``w`` option requests acknowledgement that the write operation has "
"propagated to a specified number of :program:`mongod` instances or to "
":program:`mongod` instances with specified tags."
msgstr ""

# 5710852ff4b440fab37ae20fc4e8e518
#: ../source/reference/write-concern.txt:61
msgid ""
"Using the ``w`` option, the following ``w: <value>`` write concerns are "
"available:"
msgstr ""

# b626367e38b94444a6854cbbdfffddfa
#: ../source/reference/write-concern.txt:68
msgid "Value"
msgstr ""

# 703e73446ee240baa17a9d66ed51d1c0
#: ../source/reference/write-concern.txt:69
msgid "Description"
msgstr ""

# 4a315043b28f4df2af3a503fdc2b4ef7
#: ../source/reference/write-concern.txt:73
msgid ""
"Requests acknowledgement that the write operation has propagated to the "
"specified number of :program:`mongod` instances. For example:"
msgstr ""

# 97bc942f8d314f6e872c4c5536820d28
# 788cf7b5b5714872b164f4182b39a51b
#: ../source/reference/write-concern.txt:81
#: ../source/reference/write-concern.txt:204
msgid "``w: 1``"
msgstr ""

# ee2a2ce0c2a64c3b9b56b9e776be7b2e
#: ../source/reference/write-concern.txt:78
msgid ""
"Requests acknowledgement that the write operation has propagated to the "
"standalone :program:`mongod` or the primary in a replica set. ``w: 1`` is"
" the default write concern for MongoDB."
msgstr ""

# 60a44dccf92e462f8d5654fee6aadfef
#: ../source/reference/write-concern.txt:91
msgid "``w: 0``"
msgstr ""

# fe914263ad6b4e8d80c610b946792ba8
#: ../source/reference/write-concern.txt:84
msgid ""
"Requests no acknowledgment of the write operation. However, ``w: 0`` may "
"return information about socket exceptions and networking errors to the "
"application."
msgstr ""

# 623aa91407d34adeb4197ad7358cf592
#: ../source/reference/write-concern.txt:88
msgid ""
"If you specify ``w: 0`` but include :ref:`j: true <wc-j>`, the :ref:`j: "
"true <wc-j>` prevails to request acknowledgement from the standalone "
":program:`mongod` or the primary of a replica set."
msgstr ""

# 4dd4b1b6d9994a82a9845aa9f186f0ab
#: ../source/reference/write-concern.txt:93
msgid ""
"Numbers greater than 1 are valid only for replica sets to request "
"acknowledgement from specified number of members, including the primary."
msgstr ""

# 96c5751e7c024faea81ad3b4bd8c2c77
# bc9be7944ad849c29fe950b2f438b454
#: ../source/reference/write-concern.txt:97
#: ../source/reference/write-concern.txt:111
msgid ""
"See :ref:`wc-ack-behavior` for when :program:`mongod` instances "
"acknowledge the write."
msgstr ""

# eedd2738a16742a8a069ca9ffc1c62f8
#: ../source/reference/write-concern.txt:102
msgid ""
"Requests acknowledgment that write operations have propagated to the "
"majority of voting nodes [#majority-definition]_, including the primary."
msgstr ""

# 840df2236a144d9dae926a742032def1
#: ../source/reference/write-concern.txt:106
msgid ""
"After the write operation returns with a :writeconcern:`w: \"majority\" "
"<\"majority\">` acknowledgement to the client, the client can read the "
"result of that write with a :readconcern:`\"majority\"` readConcern."
msgstr ""

# 521640e5e8f34d6b8d57e4c170f9b667
#: ../source/reference/write-concern.txt:116
msgid ""
"Requests acknowledgement that the write operations have propagated to a "
"replica set member with the specified :ref:`tag <replica-set-"
"configuration-tag-sets>`. See :ref:`wc-ack-behavior` for when "
":program:`mongod` instances acknowledge the write."
msgstr ""

# d02d2e8ce3ac474396a07b2bb7ff37d6
#: ../source/reference/write-concern.txt:125
msgid "``j`` Option"
msgstr ""

# 1b4e934ebe9e42b09ef6a728e346b508
#: ../source/reference/write-concern.txt:127
msgid ""
"The ``j`` option requests acknowledgement from MongoDB that the write "
"operation has been written to the :doc:`journal </core/journaling>`."
msgstr ""

# d6ebddc5d45c4e1d8252e1172c73851f
#: ../source/reference/write-concern.txt:136
msgid ""
"If ``j: true``, requests acknowledgement that the :program:`mongod` "
"instances, as specified in the :ref:`w: \\<value\\> <wc-w>`, have written"
" to the on-disk journal. ``j: true`` does not by itself guarantee that "
"the write will not be rolled back due to replica set primary failover."
msgstr ""

# 92e5cc30ea1947dfaaa4ac89c2f64fdc
#: ../source/includes/note-write-concern-journaled-replication.rst:1
msgid ""
"With :writeconcern:`j: true <j>`, MongoDB returns only after the "
"requested number of members, including the primary, have written to the "
"journal. Previously :writeconcern:`j: true <j>` write concern in a "
"replica set only requires the :term:`primary` to write to the journal, "
"regardless of the :ref:`w: \\<value\\> <wc-w>` write concern."
msgstr ""

# ee181cc2b99543cc8c5b13f7c053b153
#: ../source/reference/write-concern.txt:148
msgid ""
"Specifying a write concern that includes ``j: true`` to a "
":program:`mongod` instance that is running without journaling produces an"
" error."
msgstr ""

# faad1f68098b4b16b4a53b9257cc5b9c
#: ../source/reference/write-concern.txt:152
msgid ""
"For replica sets using :rsconf:`protocolVersion: 1 <protocolVersion>`, if"
" journaling is enabled, :writeconcern:`w: \"majority\" <\"majority\">` "
"may imply ``j: true``. The :rsconf:`writeConcernMajorityJournalDefault` "
"replica set configuration setting determines the behavior. See :ref:`wc-"
"ack-behavior` for details."
msgstr ""

# b9074760c45f4baca3d173a37b8c713a
#: ../source/reference/write-concern.txt:162
msgid "``wtimeout``"
msgstr ""

# af0e61d9067a47a39be74e12313c206c
#: ../source/reference/write-concern.txt:164
msgid ""
"This option specifies a time limit, in milliseconds, for the write "
"concern. ``wtimeout`` is only applicable for ``w`` values greater than "
"``1``."
msgstr ""

# 4e4d7f246dfa4fc2867d5a09fdc950ff
#: ../source/reference/write-concern.txt:168
msgid ""
"``wtimeout`` causes write operations to return with an error after the "
"specified limit, even if the required write concern will eventually "
"succeed. When these write operations return, MongoDB **does not** undo "
"successful data modifications performed before the write concern exceeded"
" the ``wtimeout`` time limit."
msgstr ""

# 6fbb651807f0450eaa18d7348cb1a801
#: ../source/reference/write-concern.txt:174
msgid ""
"If you do not specify the ``wtimeout`` option and the level of write "
"concern is unachievable, the write operation will block indefinitely. "
"Specifying a ``wtimeout`` value of ``0`` is equivalent to a write concern"
" without the ``wtimeout`` option."
msgstr ""

# 45c929765153485ba83efea24b5b92f8
#: ../source/reference/write-concern.txt:182
msgid "Acknowledgement Behavior"
msgstr ""

# 3e0e4fb73b1c415a9a66e6d84a8f6dac
#: ../source/reference/write-concern.txt:184
msgid ""
"The :ref:`w <wc-w>` option and the :ref:`j <wc-j>` option determine when "
":program:`mongod` instances acknowledge write operations."
msgstr ""

# 6cf13133a7c14109b763777461a8311c
#: ../source/reference/write-concern.txt:188
msgid "Standalone"
msgstr ""

# 4191f1ff903640b09caa3c5cae87d587
#: ../source/reference/write-concern.txt:190
msgid ""
"A standalone :program:`mongod` acknowledges a write operation either "
"after applying the write in memory or after writing to the on-disk "
"journal. The following table lists the acknowledgement behavior for a "
"standalone and the relevant write concerns:"
msgstr ""

# 8fcdef1491e14f85918a38ec723845ba
# 80b65417da354f8faafbf9dddcb66abc
#: ../source/reference/write-concern.txt:200
#: ../source/reference/write-concern.txt:235
msgid "``j`` is unspecified"
msgstr ""

# 3119862c439d4ba98df303179243d8a6
# c9a005f16aba4d1789b1cc0e3b33f632
#: ../source/reference/write-concern.txt:201
#: ../source/reference/write-concern.txt:236
msgid "``j:true``"
msgstr ""

# 0014f28defa24a01946de97a9325bba4
# c7bb849bf52e467297c2442aec4c448e
#: ../source/reference/write-concern.txt:202
#: ../source/reference/write-concern.txt:237
msgid "``j:false``"
msgstr ""

# 7ab075860dce48f3aac44d4547a08a8b
# c7e850c8778e450aa8e91f397570984b
# 551d412a723e4f61870a3a0b10d33f77
# 0a29271b91de45cebdf2ca364eb7a2a4
# adfea8e0f18840df80c262bc948c4556
# d9c5ea86b30e47b5a2737569995c2111
#: ../source/reference/write-concern.txt:205
#: ../source/reference/write-concern.txt:207
#: ../source/reference/write-concern.txt:212
#: ../source/reference/write-concern.txt:252
#: ../source/reference/write-concern.txt:256
#: ../source/reference/write-concern.txt:260
msgid "In memory"
msgstr ""

# 8c0590ef2f2d456abb5a2c346ccea3b2
# 82ee102671fc4f6cb85be0c8b4359647
# 5880caa778af47dbae06c1c4c09bb7a4
# eac2419b520c47449babb7812770e850
#: ../source/reference/write-concern.txt:206
#: ../source/reference/write-concern.txt:211
#: ../source/reference/write-concern.txt:250
#: ../source/reference/write-concern.txt:258
msgid "On-disk journal"
msgstr ""

# bcad5acb8c2c42d9a18711066b2a3465
# 602236e5e32240b1953baaa5d1b2b6a2
#: ../source/reference/write-concern.txt:209
#: ../source/reference/write-concern.txt:239
msgid "``w: \"majority\"``"
msgstr ""

# dd92e6bbfbc3442ca485ecc7c262295e
#: ../source/reference/write-concern.txt:210
msgid "On-disk journal *if running with journaling*"
msgstr ""

# 06fb8800f0ff49e5a33ff4ab8b047c57
# 1d8a3e11a4b34dd294faa41b9aa11eae
#: ../source/includes/extracts/no-journaling-rollback.rst:1
msgid ""
"With :rsconf:`writeConcernMajorityJournalDefault` set to ``false``, "
"MongoDB will not wait for :writeconcern:`w: \"majority\" <\"majority\">` "
"writes to be durable before acknowledging the writes. As such, "
":writeconcern:`\"majority\"` write operations could possibly roll back in"
" the event of a loss of a replica set member."
msgstr ""

# d087c06232ce433f8ee48866b32c2ef4
#: ../source/reference/write-concern.txt:219
msgid "Replica Sets"
msgstr ""

# 07d70ee567124c8aa698a589ae36c2b4
#: ../source/reference/write-concern.txt:223
msgid ""
"A replica set acknowledges a write operation either after the specified "
"number of members apply the write in memory or after they write to the "
"on-disk journal. The number of members is specified by the :ref:`w: "
"\\<value\\> <wc-w>` setting. The following table lists the "
"acknowledgement behavior for these members and the relevant write "
"concerns [#3.2-behavior]_:"
msgstr ""

# e09a417b99574f649f72563c95ecadb2
#: ../source/reference/write-concern.txt:241
msgid "Depends on the value of :rsconf:`writeConcernMajorityJournalDefault`."
msgstr ""

# aa5076ab1aa2427dab23fc6b9b309088
#: ../source/reference/write-concern.txt:244
msgid "If true, On-disk journal."
msgstr ""

# 4106661ef7644894b5d9013a085677b6
#: ../source/reference/write-concern.txt:246
msgid "If false, In memory."
msgstr ""

# c87ec1c8ed2a4e3ba6c7212f013124e6
#: ../source/reference/write-concern.txt:254
msgid "``w: <number>``"
msgstr ""

# dd3fff66b09a445c99bafa1669fb44f9
#: ../source/reference/write-concern.txt:268
msgid ""
"For the behavior in version 3.2, refer to the :v3.2:`3.2 manual "
"</reference/write-concern>`."
msgstr ""

# ba8cf4f371324c7b85c50a282e94ef2e
#: ../source/reference/write-concern.txt:275
msgid ""
"Prior to MongoDB 3.0, ``w: \"majority\"`` refers to the majority of the "
"replica set's members instead of the majority of the replica set's voting"
" members."
msgstr ""

# a09435686d524b4b85436c07d293e70f
#: ../source/includes/fact-master-slave-majority.rst:1
msgid ""
"In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats "
"``w: \"majority\"`` as equivalent to ``w: 1``. In earlier versions of "
"MongoDB, ``w: \"majority\"`` produces an error in :doc:`master/slave "
"</core/master-slave>` deployments."
msgstr ""

#~ msgid "Overview"
#~ msgstr ""

#~ msgid ""
#~ ":term:`Write concern` describes the guarantee"
#~ " that MongoDB provides when reporting "
#~ "on the success of a write "
#~ "operation. The strength of the write "
#~ "concerns determine the level of "
#~ "guarantee. When inserts, updates and "
#~ "deletes have a *weak* write concern, "
#~ "write operations return quickly. In some"
#~ " failure cases, write operations issued "
#~ "with weak write concerns may not "
#~ "persist. With *stronger* write concerns, "
#~ "clients wait after sending a write "
#~ "operation for MongoDB to confirm the "
#~ "write operations."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB provides different levels of "
#~ "write concern to better address the "
#~ "specific needs of applications. Clients "
#~ "may adjust write concern to ensure "
#~ "that the most important operations "
#~ "persist successfully to an entire "
#~ "MongoDB deployment. For other less "
#~ "critical operations, clients can adjust "
#~ "the write concern to ensure faster "
#~ "performance rather than ensure persistence "
#~ "to the entire deployment."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`/core/write-concern` for an introduction"
#~ " to write concern in MongoDB."
#~ msgstr ""

#~ msgid ""
#~ "To provide write concern, :doc:`drivers "
#~ "</applications/drivers>` issue the "
#~ ":dbcommand:`getLastError` command after a "
#~ "write operation and receive a document"
#~ " with information about the last "
#~ "operation. This document's ``err`` field "
#~ "contains either:"
#~ msgstr ""

#~ msgid ""
#~ "``null``, which indicates the write "
#~ "operations have completed successfully, or"
#~ msgstr ""

#~ msgid "a description of the last error encountered."
#~ msgstr ""

#~ msgid ""
#~ "The definition of a \"successful write\""
#~ " depends on the arguments specified "
#~ "to :dbcommand:`getLastError`, or in replica"
#~ " sets, the configuration of "
#~ ":data:`~local.system.replset.settings.getLastErrorDefaults`. "
#~ "When deciding the level of write "
#~ "concern for your application, see the"
#~ " introduction to :doc:`/core/write-concern`."
#~ msgstr ""

#~ msgid ""
#~ "The :dbcommand:`getLastError` command has the"
#~ " following options to configure write "
#~ "concern requirements:"
#~ msgstr ""

#~ msgid "``j`` or \"journal\" option"
#~ msgstr ""

#~ msgid ""
#~ "This option confirms that the "
#~ ":program:`mongod` instance has written the "
#~ "data to the on-disk journal and"
#~ " ensures data is not lost if "
#~ "the :program:`mongod` instance shuts down "
#~ "unexpectedly. Set to ``true`` to enable,"
#~ " as shown in the following example:"
#~ msgstr ""

#~ msgid ""
#~ "If you set :data:`journal` to true, "
#~ "and the :program:`mongod` does not have"
#~ " journaling enabled, as with "
#~ ":setting:`nojournal`, then :dbcommand:`getLastError` "
#~ "will provide basic receipt acknowledgment, "
#~ "and will include a ``jnote`` field "
#~ "in its return document."
#~ msgstr ""

#~ msgid "``w`` option"
#~ msgstr ""

#~ msgid ""
#~ "This option provides the ability to "
#~ "disable write concern entirely *as well"
#~ " as* specifies the write concern "
#~ "operations for :term:`replica sets <replica"
#~ " set>`. See :doc:`Write Concern "
#~ "Considerations </core/write-concern>` for an"
#~ " introduction to the fundamental concepts"
#~ " of write concern. By default, the"
#~ " ``w`` option is set to ``1``, "
#~ "which provides basic receipt acknowledgment"
#~ " on a single :program:`mongod` instance "
#~ "or on the :term:`primary` in a "
#~ "replica set."
#~ msgstr ""

#~ msgid "The ``w`` option takes the following values:"
#~ msgstr ""

#~ msgid "``0``:"
#~ msgstr ""

#~ msgid ""
#~ "If you disable basic write operation "
#~ "acknowledgment but require journal commit "
#~ "acknowledgment, the journal commit prevails,"
#~ " and the driver will require that "
#~ ":program:`mongod` will acknowledge the write"
#~ " operation."
#~ msgstr ""

#~ msgid "``1``:"
#~ msgstr ""

#~ msgid "*A number greater than 1*:"
#~ msgstr ""

#~ msgid ""
#~ "Guarantees that write operations have "
#~ "propagated successfully to the specified "
#~ "number of replica set members including"
#~ " the primary. If you set ``w`` "
#~ "to a number that is greater than"
#~ " the number of set members that "
#~ "hold data, MongoDB waits for the "
#~ "non-existent members to become available,"
#~ " which means MongoDB blocks indefinitely."
#~ msgstr ""

#~ msgid "``majority``:"
#~ msgstr ""

#~ msgid ""
#~ "In :doc:`Master/Slave </core/master-slave>` "
#~ "deployments, :dbcommand:`getLastError` treats "
#~ "``w:majority`` as equivalent to ``w:1``. "
#~ "In earlier versions of MongoDB, "
#~ "``w:majority`` produces an error in "
#~ ":doc:`master/slave </core/master-slave>` "
#~ "deployments."
#~ msgstr ""

#~ msgid "*A tag set*:"
#~ msgstr ""

#~ msgid ""
#~ "By specifying a :ref:`tag set "
#~ "<replica-set-configuration-tag-sets>` you"
#~ " can have fine-grained control over"
#~ " which replica set members must "
#~ "acknowledge a write operation to satisfy"
#~ " the required level of write concern."
#~ msgstr ""

#~ msgid ""
#~ ":dbcommand:`getLastError` also supports a "
#~ "``wtimeout`` setting which allows clients "
#~ "to specify a timeout for the write"
#~ " concern: if you don't specify "
#~ "``wtimeout``, or if you give it a"
#~ " value of ``0``, and the "
#~ ":program:`mongod` cannot fulfill the write "
#~ "concern the :dbcommand:`getLastError` will "
#~ "block, potentially forever."
#~ msgstr ""

#~ msgid ""
#~ "For more information on write concern"
#~ " and replica sets, see :ref:`Write "
#~ "Concern for Replica Sets <replica-"
#~ "set-write-concern>` for more information."
#~ msgstr ""

#~ msgid ""
#~ "In sharded clusters, :program:`mongos` "
#~ "instances will pass write concern on "
#~ "to the shard :program:`mongod` instances."
#~ msgstr ""

# d64c63509bd34d3b8b06c4bc53fd7433
#~ msgid "Write Concern Reference"
#~ msgstr ""

# 6a1834578f1c48a3994b896a69a8201c
#~ msgid "Read Isolation Behavior"
#~ msgstr ""

# cf9eef82ab574ac3a288d0b148eb7276
#~ msgid ""
#~ "MongoDB allows clients to read documents"
#~ " inserted or modified before it "
#~ "commits these modifications to disk, "
#~ "regardless of write concern level or "
#~ "journaling configuration. As a result, "
#~ "applications may observe two classes of"
#~ " behaviors:"
#~ msgstr ""

# e7a5f3e3f6f543b09406b364b5a5c19c
#~ msgid ""
#~ "For systems with multiple concurrent "
#~ "readers and writers, MongoDB will allow"
#~ " clients to read the results of "
#~ "a write operation before the write "
#~ "operation returns."
#~ msgstr ""

# 855faf18005a4c6cae1167a69c37f886
#~ msgid ""
#~ "If the :program:`mongod` terminates before "
#~ "the journal commits, even if a "
#~ "write returns successfully, queries may "
#~ "have read data that will not exist"
#~ " after the :program:`mongod` restarts."
#~ msgstr ""

# 28c0dab2ebe8400d85ad9d2d900c59bf
#~ msgid ""
#~ "Other database systems refer to these"
#~ " isolation semantics as *read uncommitted*."
#~ " For all inserts and updates, MongoDB"
#~ " modifies each document in isolation: "
#~ "clients never see documents in "
#~ "intermediate states. For multi-document "
#~ "operations, MongoDB does not provide any"
#~ " multi-document transactions or isolation."
#~ msgstr ""

# 8819034b3eb8420ebeadad9a96e534e4
#~ msgid ""
#~ "When :program:`mongod` returns a successful"
#~ " *journaled write concern*, the data "
#~ "is fully committed to disk and "
#~ "will be available after :program:`mongod` "
#~ "restarts."
#~ msgstr ""

# 42761cb0189b491aa0937961b3048836
#~ msgid ""
#~ "For replica sets, write operations are"
#~ " durable only after a write "
#~ "replicates and commits to the journal"
#~ " of a majority of the members "
#~ "of the set. MongoDB regularly commits"
#~ " data to the journal regardless of"
#~ " journaled write concern: use the "
#~ ":setting:`~storage.journal.commitIntervalMs` to control"
#~ " how often a :program:`mongod` commits "
#~ "the journal."
#~ msgstr ""

# 298e8ef9baba481e9606d2b2b4d5e36f
#~ msgid "Available Write Concern"
#~ msgstr ""

# bda73172e0ba43a68b2963e7f7786475
#~ msgid ""
#~ "Disables basic acknowledgment of write "
#~ "operations, but returns information about "
#~ "socket exceptions and networking errors "
#~ "to the application."
#~ msgstr ""

# dc4ef5653dc240b089538e158293c356
#~ msgid ""
#~ "Provides acknowledgment of write operations"
#~ " on a standalone :program:`mongod` or "
#~ "the :term:`primary` in a replica set."
#~ msgstr ""

# eac57718110a401686edd06bac8867b7
#~ msgid ""
#~ "Confirms that write operations have "
#~ "propagated to the majority of configured"
#~ " replica set: a majority of the "
#~ "set's configured members must acknowledge "
#~ "the write operation before it succeeds."
#~ " This allows you to avoid hard "
#~ "coding assumptions about the size of "
#~ "your replica set into your application."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Write concern </core/write-concern>` "
#~ "describes the guarantee that MongoDB "
#~ "provides when reporting on the success"
#~ " of a write operation."
#~ msgstr ""

#~ msgid ""
#~ "Write concern can include the :ref:`w"
#~ " <wc-w>` option to specify the "
#~ "required number of acknowledgments before "
#~ "returning, the :ref:`j <wc-j>` option to"
#~ " require writes to the journal before"
#~ " returning, and :ref:`wtimeout <wc-"
#~ "wtimeout>` option to specify a time "
#~ "limit to prevent write operations from"
#~ " blocking indefinitely."
#~ msgstr ""

#~ msgid ""
#~ "In sharded clusters, :program:`mongos` "
#~ "instances will pass the write concern"
#~ " on to the shard."
#~ msgstr ""

#~ msgid ""
#~ "The ``w`` option provides the ability"
#~ " to disable write concern entirely "
#~ "*as well as* specify the write "
#~ "concern for :term:`replica sets <replica "
#~ "set>`."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB uses ``w: 1`` as the "
#~ "default write concern. ``w: 1`` provides"
#~ " basic receipt acknowledgment."
#~ msgstr ""

#~ msgid "The ``w`` option accepts the following values:"
#~ msgstr ""

#~ msgid "``1``"
#~ msgstr ""

#~ msgid "This is the default write concern for MongoDB."
#~ msgstr ""

#~ msgid "``0``"
#~ msgstr ""

#~ msgid ""
#~ "If you disable basic write operation "
#~ "acknowledgment but require journal commit "
#~ "acknowledgment, the journal commit prevails,"
#~ " and the server will require that "
#~ ":program:`mongod` acknowledge the write "
#~ "operation."
#~ msgstr ""

#~ msgid "<Number greater than 1>"
#~ msgstr ""

#~ msgid ""
#~ "Guarantees that write operations have "
#~ "propagated successfully to the specified "
#~ "number of replica set members including"
#~ " the primary."
#~ msgstr ""

#~ msgid ""
#~ "For example, ``w: 2`` indicates "
#~ "acknowledgements from the primary and at"
#~ " least one secondary."
#~ msgstr ""

#~ msgid ""
#~ "If you set ``w`` to a number "
#~ "that is greater than the number of"
#~ " set members that hold data, MongoDB"
#~ " waits for the non-existent members"
#~ " to become available, which means "
#~ "MongoDB blocks indefinitely."
#~ msgstr ""

#~ msgid "``\"majority\"``"
#~ msgstr ""

#~ msgid "<tag set>"
#~ msgstr ""

#~ msgid ""
#~ "By specifying a :ref:`tag set "
#~ "<replica-set-configuration-tag-sets>`, you"
#~ " can have fine-grained control over"
#~ " which replica set members must "
#~ "acknowledge a write operation to satisfy"
#~ " the required level of write concern."
#~ msgstr ""

#~ msgid ""
#~ "The ``j`` option confirms that the "
#~ ":program:`mongod` instance has written the "
#~ "data to the on-disk journal. This"
#~ " ensures that data is not lost "
#~ "if the :program:`mongod` instance shuts "
#~ "down unexpectedly. Set to ``true`` to"
#~ " enable."
#~ msgstr ""

#~ msgid ""
#~ "Specifying a write concern that includes"
#~ " ``j: true`` to a :program:`mongod` "
#~ "or :program:`mongos` running with "
#~ ":option:`--nojournal` option now errors. "
#~ "Previous versions would ignore the ``j:"
#~ " true``."
#~ msgstr ""

#~ msgid ""
#~ "Requiring *journaled* write concern in a"
#~ " replica set only requires a journal"
#~ " commit of the write operation to "
#~ "the :term:`primary` of the set "
#~ "regardless of the level of *replica "
#~ "acknowledged* write concern."
#~ msgstr ""

#~ msgid ""
#~ "``wtimeout`` causes write operations to "
#~ "return with an error after the "
#~ "specified limit, even if the required"
#~ " write concern is not fulfilled. When"
#~ " these write operations return, MongoDB "
#~ "**does not** undo successful data "
#~ "modifications performed before the write "
#~ "concern exceeded the ``wtimeout`` time "
#~ "limit."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Write Concern Introduction </core/write-"
#~ "concern>` and :ref:`Write Concern for "
#~ "Replica Sets <replica-set-write-"
#~ "concern>`."
#~ msgstr ""

