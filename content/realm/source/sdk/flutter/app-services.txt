.. meta::
   :robots: noindex, nosnippet

.. _flutter-mongodb-realm-cloud:
.. _flutter-application-services:

===========================================
Application Services Overview - Flutter SDK
===========================================

.. toctree::
   :titlesonly:

   Connect to App Services </sdk/flutter/app-services/connect-to-app>
   Query Atlas GraphQL API </sdk/flutter/app-services/graphql-api>
   Call an Atlas Function </sdk/flutter/app-services/call-function>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. banner::
   :variant:  warning

   GraphQL is deprecated. :ref:`Learn More <migrate-hosting-graphql>`.

Overview
--------

You can connect your client apps to the Atlas App Services
backend using the Flutter SDK. Backend functionality includes:

- :doc:`Connect to a Realm App </sdk/flutter/app-services/connect-to-app>`
- :doc:`Authenticate Users </sdk/flutter/users/authenticate>`
- :doc:`Query Atlas GraphQL API </sdk/flutter/app-services/graphql-api>`

The App Services Client
-----------------------

To connect to your App Services backend, start with an
:flutter-sdk:`App <realm/App-class.html>` object.
This object provides all other functionality related to
the backend. Initialize an App with the Realm app ID, which you can
:ref:`find in the Realm UI <find-your-app-id>`.

To learn how to initialize the Realm App client, refer to
:ref:`Connect to App Services <flutter-connect-to-backend>`.

.. button:: Create an App Services Account
   :uri: https://www.mongodb.com/realm/register?tck=docs_CTA_realm_flutter


Authentication & User Management
--------------------------------

One of the most challenging aspects of client development is implementing a
robust and secure authentication system. With the SDKs,
however, you can use any of the App Services authentication providers with
minimal backend setup and client-side code. With the authentication APIs,
you can implement the following functionality:

- Create new user accounts
- User log in and log out
- Multiple users logged on at the same time on the same device
- Link user accounts from different providers
- Store custom data for a particular user

To learn how to set up authentication in your app, refer to
:ref:`Authenticate Users <flutter-authenticate>`.

Device Sync
-----------

Device Sync adds data synchronization between an App Services backend and
client devices on top of all of the functionality of Realm.
When you use Realm with Sync, realms exist on device,
similar to using Realm without Sync. However, changes to
the data stored in those realms synchronize between all client
devices through a backend App Services instance. That backend also stores
realm data in a cloud-based Atlas cluster running MongoDB.

To get started with Sync, refer to :ref:`Device Sync <flutter-sync>`.

Call Atlas Functions
--------------------

:ref:`Atlas Functions <functions>` let you  define and execute server-side
logic. You can call these Functions from your client applications
via the Realm SDKs. These server-side functions can run in the context
of the authenticated user, and thus honor the rules, roles, and permissions that
you have assigned to your data in Atlas.

Using Functions provides a secure way for multiple client
applications to share complex functionality without having to reproduce that
logic client-side.

To learn how to call an Atlas Function from your client app,
refer to :ref:`Call a Function <flutter-call-function>`.

Query Atlas GraphQL API
-----------------------

The :ref:`Atlas GraphQL API <graphql-api>` lets you access data stored
in a linked MongoDB Atlas cluster using any standard GraphQL client.

To learn how to use the Realm Flutter SDK to authenticate requests to the Atlas GraphQL API,
refer to :ref:`Query Atlas GraphQL API <flutter-graphql-api>`.
