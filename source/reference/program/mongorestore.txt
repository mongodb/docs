.. _mongorestore:

================
``mongorestore``
================

.. default-domain:: mongodb
.. |tool-binary| replace:: mongorestore

Synopsis
--------

The :program:`mongorestore` program writes data from a binary database
dump created by :program:`mongodump` to a MongoDB
instance. :program:`mongorestore` can create a new database or add
data to an existing database.

:program:`mongorestore` can write data to either `mongod` or :program:`mongos`
instances, in addition to writing directly to MongoDB data files
without an active :program:`mongod`.

Behavior
--------

If you restore to an existing database, :program:`mongorestore` will
only insert into the existing database, and does not perform updates
of any kind. If existing documents have the same value ``_id`` field
in the target database and collection,
:program:`mongorestore` will *not* overwrite those documents.

Remember the following properties of :program:`mongorestore` behavior:

- :program:`mongorestore` recreates indexes recorded by
  :program:`mongodump`.

- all operations are inserts, not updates.

- :program:`mongorestore` does not wait for a response from a
  :program:`mongod` to ensure that the MongoDB process has received or
  recorded the operation.

  The :program:`mongod` will record any errors to its log that occur
  during a restore operation, but :program:`mongorestore` will not
  receive errors.

.. include:: /includes/warning-mongodump-compatibility-2.2.rst

Required Access to Restore User Data
------------------------------------

.. include:: /includes/access-mongorestore.rst

Options
-------

.. binary:: mongorestore

.. program:: mongorestore

.. include:: /includes/options-mongoimport.rst

.. _mongorestore-path-option:

.. option::  <path>

   The final argument of the :program:`mongorestore` command is a
   directory path. This argument specifies the location of the
   database dump from which to restore.

Usage
-----

See :doc:`/tutorial/backup-and-restore-with-binary-database-dumps`
for a larger overview of :program:`mongorestore`
usage. Also see the :doc:`mongodump` document for an overview of the
:program:`mongodump`, which provides the related inverse
functionality.

Consider the following example:

.. code-block:: sh

   mongorestore --collection people --db accounts dump/accounts/people.bson

Here, :program:`mongorestore` reads the database dump in the ``dump/``
sub-directory of the current directory, and restores *only* the
documents in the collection named ``people`` from the database named
``accounts``. :program:`mongorestore` restores data to the instance
running on the localhost interface on port ``27017``.

In the next example, :program:`mongorestore` restores a backup of the
database instance located in ``dump`` to a database instance stored
in the ``/srv/mongodb`` on the local machine. This requires that there
are no active :program:`mongod` instances attached to ``/srv/mongodb``
data directory.

.. code-block:: sh

   mongorestore --dbpath /srv/mongodb

In the final example, :program:`mongorestore` restores a database
dump located at ``/opt/backup/mongodump-2011-10-24``, to a database
running on port ``37017`` on the host
``mongodb1.example.net``. The :program:`mongorestore` command authenticates to
the MongoDB instance using the username ``user`` and the
password ``pass``, as follows:

.. code-block:: sh

   mongorestore --host mongodb1.example.net --port 37017 --username user --password pass /opt/backup/mongodump-2011-10-24
