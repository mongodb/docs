=============
createIndexes
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: createIndexes

   Builds one or more indexes on a collection.

   The :dbcommand:`createIndexes` command takes the following form:

   .. code-block:: javascript

      db.runCommand(
        {
          createIndexes: <collection>,
          indexes: [
              {
                  key: {
                      <key-value_pair>,
                      <key-value_pair>,
                      ...
                  },
                  name: <index_name>,
                  <option1>,
                  <option2>,
                  ...
              },
              { ... },
              { ... }
          ],
          writeConcern: { <write concern> }
        }
      )

   The :dbcommand:`createIndexes` command takes the following fields:

   .. include:: /includes/apiargs/dbcommand-createIndexes-field.rst

   Each document in the ``indexes`` array can take the following fields:

   .. include:: /includes/fact-remove-dropDups-option.rst

   .. include:: /includes/apiargs/dbcommand-createIndexes-indexes-field.rst

   The :binary:`~bin.mongo` shell provides the methods
   :method:`db.collection.createIndex()` and
   :method:`db.collection.createIndexes()` as wrappers for the
   :dbcommand:`createIndexes` command.

Considerations
--------------

.. versionchanged:: 3.2

   MongoDB disallows the creation of :ref:`version 0
   <3.2-version-0-indexes>` indexes. To upgrade existing version 0
   indexes, see :ref:`3.2-version-0-indexes`.

Index Names
~~~~~~~~~~~

.. admonition:: Changed in MongoDB 4.2
   :class: note

   .. include:: /includes/extracts/4.2-changes-index-names.rst

Starting in version 4.2, the :dbcommand:`createIndexes` command and
the :binary:`~bin.mongo` shell helpers
:method:`db.collection.createIndex()` and
:method:`db.collection.createIndexes()` report an error if you
create an index with one name, and then try to create the same index
again but with another name.

.. code-block:: javascript

  {
     "ok" : 0,
     "errmsg" : "Index with name: x_1 already exists with a different name",
     "code" : 85,
     "codeName" : "IndexOptionsConflict"
  }

In previous versions, MongoDB did not create the index again, but
would return a response object with ``ok`` value of ``1`` and a note
that implied that the index was not recreated. For example:

.. code-block:: javascript

  {
     "numIndexesBefore" : 2,
     "numIndexesAfter" : 2,
     "note" : "all indexes already exist",
     "ok" : 1
  }

Replica Sets and Sharded Clusters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To minimize the impact of building an index on replica sets and sharded
clusters, use a rolling index build procedure
as described on :doc:`/tutorial/build-indexes-on-replica-sets`.

Collation and Index Types
~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/collation-index-type-restrictions.rst

.. include:: /includes/extracts/collation-index-type-restrictions-addendum.rst

Behavior
--------

Concurrency
~~~~~~~~~~~

Foreground indexing operations on a populated collection block all
other operations on a database.

.. _createIndexes-multiple-indexes:

Multiple Index Builds
~~~~~~~~~~~~~~~~~~~~~

.. versionchanged:: 3.0.0

If you specify multiple indexes to the :dbcommand:`createIndexes`
command, the operation only scans the collection once, and if at least
one index is to be built in the foreground, the operation will build
all the specified indexes in the foreground.

Memory Usage Limit
~~~~~~~~~~~~~~~~~~

.. versionchanged:: 3.4

   .. include:: /includes/fact-index-build-default-memory-limit.rst


Index Options
~~~~~~~~~~~~~

With the exception of the :ref:`collation option
<createIndexes-collation-option>`, if you create an index with one set
of index options and then try to recreate the same index but with
different index options, MongoDB will not change the options nor
recreate the index.

To change these index options, drop the existing index with
:method:`db.collection.dropIndex()` before running 
:dbcommand:`createIndexes` with the new options.

.. _createIndexes-collation-option:

Collation Option
````````````````

.. versionadded:: 3.4

.. include:: /includes/extracts/collation-index-options.rst

.. include:: /includes/extracts/collation-index-collection.rst

.. include:: /includes/extracts/collation-index-tip.rst

.. include:: /includes/extracts/collation-index-use.rst

.. _createIndexes-command-wildcard-behavior:

Wildcard Indexes
~~~~~~~~~~~~~~~~

.. versionadded:: 4.2

- .. include:: /includes/extracts/wildcard-index-id.rst

- .. include:: /includes/extracts/wildcard-index-fcv.rst

- .. include:: /includes/extracts/wildcard-index-limitations.rst

For examples of wildcard index creation, see
:ref:`createIndexes-command-wildcard-examples`.  For complete 
documentation on Wildcard Indexes, see :ref:`wildcard-index-core`.

Example
-------

The following command builds two indexes on the ``inventory`` collection of
the ``products`` database:

.. code-block:: javascript

   db.getSiblingDB("products").runCommand(
     {
       createIndexes: "inventory",
       indexes: [
           {
               key: {
                   item: 1,
                   manufacturer: 1,
                   model: 1
               },
               name: "item_manufacturer_model",
               unique: true
           },
           {
               key: {
                   item: 1,
                   supplier: 1,
                   model: 1
               },
               name: "item_supplier_model",
               unique: true
           }
       ],
       writeConcern: { w: "majority" }
     }
   )

When the indexes successfully finish building, MongoDB returns a results
document that includes a status of ``"ok" : 1``.

.. _createIndexes-command-wildcard-examples:

Create a Wildcard Index
~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 4.2

   .. include:: /includes/extracts/wildcard-index-fcv.rst

   For complete documentation on Wildcard Indexes, see
   :ref:`wildcard-index-core`.

The following lists examples of wildcard index creation:

- :ref:`createIndexes-command-wildcard-onepath`
- :ref:`createIndexes-command-wildcard-allpaths`
- :ref:`createIndexes-command-wildcard-inclusion`
- :ref:`createIndexes-command-wildcard-exclusion`

.. _createIndexes-command-wildcard-onepath:

Create a Wildcard Index on a Single Field Path
``````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index on the 
``product_attributes`` field and its subfields:

.. code-block:: shell

   use inventory
   db.runCommand(
     {
       createIndexes: "products_catalog",
       indexes: [
         {
           key: { "product_attributes.$**" : 1 },
           name: "wildcardIndex"
         }
       ]
     }
   )

The wildcard index can support arbitrary single-field queries on 
``product_attributes`` and any of its subpaths:

.. code-block:: shell

   db.products_catalog.find( { "product_attributes.superFlight" : true } )
   db.products_catalog.find( { "product_attributes.maxSpeed" : { $gt : 20 } } )
   db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )

.. _createIndexes-command-wildcard-allpaths:

Create a Wildcard Index on All Field Paths
``````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index on all fields and
subfields:

.. code-block:: shell

   use inventory
   db.runCommand(
     {
       createIndexes: "products_catalog",
       indexes: [
         {
           key: { "$**" : 1 },
           name: "wildcardIndex"
         }
       ]
     }
   )

The created index can support queries on any arbitrary field 
within documents in the collection:

.. code-block:: shell

   db.products_catalog.find( { "product_price" : { $lt : 25 } } )
   db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )

.. _createIndexes-command-wildcard-inclusion:

Include Specific Fields in Wildcard Index Coverage
``````````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index and uses
the ``wildcardProjection`` option to include only the
``product_attributes.elements`` and ``product_attributes.resistance``
fields and their subfields as part of index coverage.

.. code-block:: shell

   use inventory
   db.runCommand(
     {
       createIndexes: "products_catalog",
       indexes: [
         {
           key: { "$**" : 1 },
           "wildcardProjection" : {
             "product_attributes.elements" : 1,
             "product_attributes.resistance" : 1
           },
           name: "wildcardIndex"
         }
       ]
     }
   )

While the key pattern ``"$**"`` covers all fields in the document, the
``wildcardProjection`` field limits the index to only the included
fields and their subfields.

The created index can support queries on any arbitrary field or subfield
**only if** that field is included by ``wildcardProjection``:

.. code-block:: shell

   db.products_catalog.find( { "product_attributes.elements" : { $eq: "Water" } } )
   db.products_catalog.find( { "product_attributes.resistance" : "Bludgeoning" } )

.. include:: /includes/extracts/wildcard-index-id.rst

.. _createIndexes-command-wildcard-exclusion:

Omit Specific Fields from Wildcard Index Coverage
`````````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index and uses
the ``wildcardProjection`` document to exclude the 
``product_attributes.elements`` and ``product_attributes.resistance``
fields and their subfields from the wildcard index:

.. code-block:: shell

   use inventory
   db.runCommand(
     {
       createIndexes: "products_catalog",
       indexes: [
         {
           key: { "$**" : 1 },
           "wildcardProjection" : {
              "product_attributes.elements" : 0,
              "product_attributes.resistance" : 0
           },
           name: "wildcardIndex"
         }
       ]
     }
   )

While the key pattern ``"$**"`` covers all fields in the document, the
``wildcardProjection`` field excludes the specified fields from the
index.

The created index can support queries on any arbitrary field or
subfield **except** those excluded by ``wildcardProjection``:

.. code-block:: shell

   db.products_catalog.find( { "product_attributes.maxSpeed" : { $gt: 25 } } )
   db.products_catalog.find( { "product_attributes.superStrength" : true } )

.. include:: /includes/extracts/wildcard-index-id-exclusion.rst

Output
------

The :dbcommand:`createIndexes` command returns a document that indicates
the success of the operation. The document contains some but not all of
the following fields, depending on outcome:

.. data:: createIndexes.createdCollectionAutomatically

   If ``true``, then the collection didn't exist and was created in the
   process of creating the index.

.. data:: createIndexes.numIndexesBefore

   The number of indexes at the start of the command.

.. data:: createIndexes.numIndexesAfter

   The number of indexes at the end of the command.

.. data:: createIndexes.ok

   A value of ``1`` indicates the indexes are in place. A value of
   ``0`` indicates an error.

.. data:: createIndexes.note

   This ``note`` is returned if an existing index or indexes already
   exist. This indicates that the index was not created or changed.

.. data:: createIndexes.errmsg

   Returns information about any errors.

.. data:: createIndexes.code

   The error code representing the type of error.
