.. _migrate-ranges-sharded-cluster:
.. _migrate-chunks-sharded-cluster:

===================================
Migrate Ranges in a Sharded Cluster
===================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

In most circumstances, you should let the automatic :term:`balancer`
migrate :term:`ranges <range>` between :term:`shards <shard>`. However,
you may want to migrate ranges manually in a few cases:

- When :term:`pre-splitting` an empty collection, migrate ranges
  manually to distribute them evenly across the shards. Use
  pre-splitting in limited situations to support bulk data ingestion.

- If the balancer in an active cluster cannot distribute ranges within
  the :ref:`balancing window <sharding-schedule-balancing-window>`, then
  you will have to migrate ranges manually.

To manually migrate ranges, use the :dbcommand:`moveChunk` or 
:dbcommand:`moveRange` command.

For more information on how the automatic balancer moves ranges between
shards, see :ref:`sharding-balancing-internals` and
:ref:`sharding-range-migration`.

.. example:: Migrate a single range

   The following example assumes that the field ``username`` is the
   :term:`shard key` for a collection named ``users`` in the ``myapp``
   database, and that the value ``smith`` exists within the :term:`range`
   to migrate. Migrate the range using the following command in
   :binary:`~bin.mongosh`.

   .. code-block:: javascript

      db.adminCommand( { moveChunk : "myapp.users",
                         find : {username : "smith"},
                         to : "mongodb-shard3.example.net" } )

   This command moves the range that includes the shard key value "smith" to the
   :term:`shard` named ``mongodb-shard3.example.net``. The command will
   block until the migration is complete.

   .. tip::

      To return a list of shards, use the :dbcommand:`listShards`
      command.

.. example:: Evenly migrate ranges

   To evenly migrate ranges for the ``myapp.users`` collection,
   put each prefix range on the next shard from the other and run
   the following commands in the mongo shell:

   .. code-block:: javascript

      var shServer = [ "sh0.example.net", "sh1.example.net", "sh2.example.net", "sh3.example.net", "sh4.example.net" ];
      for ( var x=97; x<97+26; x++ ){
        for( var y=97; y<97+26; y+=6 ) {
          var prefix = String.fromCharCode(x) + String.fromCharCode(y);
          db.adminCommand({moveChunk : "myapp.users", find : {email : prefix}, to : shServer[(y-97)/6]})
        }
      }

See :ref:`create-ranges-in-a-sharded-cluster` for an introduction to
pre-splitting.

- Use the :dbcommand:`moveChunk` command with the ``_secondaryThrottle``
  and ``writeConcern`` fields to determine when the balancer 
  proceeds with the next document in the migrating range. 

- Use the :dbcommand:`moveRange` command with the ``secondaryThrottle``
  and ``writeConcern`` fields to determine when the balancer 
  proceeds with the next document in the migrating range. 

See :dbcommand:`moveChunk` and :dbcommand:`moveRange` for details.


Change Streams and Orphan Documents
-----------------------------------

.. include:: /includes/change-streams-and-orphans.rst
