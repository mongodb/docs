.. meta::
   :robots: noindex, nosnippet

.. _values-and-secrets:

================
Values & Secrets
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:
   :hidden:
   
   Define a Value  </values-and-secrets/define-a-value>
   Define and Manage Secrets  </values-and-secrets/define-and-manage-secrets>
   Access a Value </values-and-secrets/access-a-value>

Introduction
------------

:ref:`Atlas App Services Values <app-value>` and :ref:`App Services Secrets
<app-secret>` are static, server-side constants that you can access or link to
from other components of your application. You can :doc:`access Values
</values-and-secrets/access-a-value>` directly from :doc:`Atlas
Functions </functions>` and :ref:`rule expressions <expressions>` and link
Secrets to configuration values for :ref:`authentication providers
<authentication-providers>`.

Concepts
--------

.. _app-value:

Value
~~~~~

A **value** is a named reference to a piece of static data stored by App Services
that you can access in :doc:`functions </functions>` and :ref:`rule expression
<expressions>`. Values provide an alternative to hardcoding configuration
constants directly into your functions and rules. In other words, values allow
you to separate deployment-specific configuration data from the business logic
of your app.

Values can resolve to two types of data:

- A *plain text* Value resolves to a regular JSON object,
  array, or string that you define.

- A *secret* Value resolves to the value of a
  :ref:`Secret <app-secret>`.

.. _app-secret:

Secret
~~~~~~

A **Secret** is a private value that is stored on the
App Services backend, hidden from users, and not included in exported
applications. Secrets are useful for storing sensitive
information such as an API key or an internal identifier.

You cannot directly read the value of a Secret after
defining it. Instead, you link to the Secret by name in
authentication provider and service configurations. If you
need to access the Secret from a Function or
Rule, you can link the Secret to a
:ref:`Value <app-value>`.

A Secret value has a maximum character length of 500 characters.

.. _environment-values:

Environment Values
~~~~~~~~~~~~~~~~~~

An **environment value** is similar to a regular text :ref:`Value <app-value>`
but can dynamically resolve to one of multiple values depending on an
application-wide environment tag. You can specify different values for each of
the following supported environment tags:

.. include:: /includes/list-of-environment-names.rst

You can access defined environment values in functions with
:ref:`context.environment.values <context-environment-values>` and in
rule expressions with :json-expansion:`%%environment`.

For more information, see :ref:`Configure an App Environment
<app-environment>`.

Summary
-------

- App Services Values and App Services Secrets are server-side constants you can use in
  your app.

- App Services Values allow you to separate deployment-specific configuration
  data from the business logic of your app.

- App Services Secrets store sensitive data. You cannot export or directly read a
  Secret. Instead, you access a Secret indirectly
  via a named App Services Value.
