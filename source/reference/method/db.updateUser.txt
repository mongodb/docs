===============
db.updateUser()
===============

.. default-domain:: mongodb

Definition
----------

.. method:: db.updateUser( username, update, writeConcern )

   Updates the user's profile on the database on which you run the method.
   An update to a field **completely replaces** the previous field's values.
   This includes updates to the user's ``roles`` array.

   .. warning::

      When you update the ``roles`` array, you completely replace the
      previous array's values. To add or remove roles without replacing all
      the user's existing roles, use the :method:`db.grantRolesToUser()` or
      :method:`db.revokeRolesFromUser()` methods.

   The :method:`db.updateUser()` method uses the following syntax:

   .. code-block:: javascript

      db.updateUser( 
         "<username>",
         {
           customData : { <any information> },
           roles : [
                     { role: "<role>", db: "<database>" } | "<role>",
                     ...
                   ],
           pwd: "<cleartext password>"
          },
          writeConcern: { <write concern> }
      )
                
   The :method:`db.updateUser()` method has the following arguments.

   .. include:: /reference/method/db.updateUser-param.rst

   The ``update`` document specifies the fields to update and their
   new values. All  fields in the ``update`` document are optional,
   but *must* include at least one field.

   The ``update`` document has the following fields:

   .. include:: /reference/method/db.updateUser-update-fields.rst

   .. |local-cmd-name| replace:: :method:`db.updateUser()`
   .. include:: /includes/fact-roles-array-contents.rst

   The :method:`db.updateUser()` method wraps the :dbcommand:`updateUser`
   command.

Behavior
--------

:method:`db.updateUser()` sends password to the MongoDB instance
*without* encryption. To encrypt the password during transmission,
use :doc:`SSL </tutorial/configure-ssl>`.

Required Access
---------------

.. include:: /includes/access-update-user.rst

.. include:: /includes/access-change-own-password-and-custom-data.rst

Example
-------

Given a user ``appClient01`` in the ``products`` database with the following
user info:

.. code-block:: javascript

   {
      "_id" : "products.appClient01",
      "user" : "appClient01",
      "db" : "products",
      "customData" : { "empID" : "12345", "badge" : "9156" },
      "roles" : [
          { "role" : "readWrite",
            "db" : "products"
          },
          { "role" : "read",
            "db" : "inventory"
          }
      ]
   }

The following :method:`db.updateUser()` method **completely** replaces the
user's ``customData`` and ``roles`` data:

.. code-block:: javascript

   use products
   db.updateUser( "appClient01",
                  {
                    customData : { employeeId : "0x3039" },
                    roles : [
                              { role : "read", db : "assets"  }
                            ]
                   }
                )

The user ``appClient01`` in the ``products`` database now has the following
user information:

.. code-block:: javascript

   {
      "_id" : "products.appClient01",
      "user" : "appClient01",
      "db" : "products",
      "customData" : { "employeeId" : "0x3039" },
      "roles" : [
          { "role" : "read",
            "db" : "assets"
          }
      ]
   }
