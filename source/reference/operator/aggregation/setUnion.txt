=========
$setUnion
=========

.. meta::
   :description: Use `$setUnion` to combine multiple arrays into one, filtering out duplicates and treating arrays as sets.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

Takes two or more arrays and returns a single array containing the 
unique elements that appear in any input array. ``$setUnion`` can be 
used as an aggregation accumulator or an array operator.

Aggregation Accumulator
-----------------------
.. group:: $setUnion

``$setUnion`` is available as an accumulator in these stages:

- :pipeline:`$bucket`
- :pipeline:`$bucketAuto`
- :pipeline:`$group`
- :pipeline:`$setWindowFields`

.. _setUnion-syntax:

Syntax
~~~~~~

When used as an aggregation accumulator, ``$setUnion`` has the following
syntax:

.. code-block:: javascript

   { $setUnion: "<array field>" }


.. _setUnion-behavior:

Behavior
~~~~~~~~

.. |set-operator-name| replace:: :group:`$setUnion`

.. include:: /includes/important-set-operator-semantics.rst

.. include:: /includes/fact-setUnion-non-recursive.rst

.. include:: /includes/fact-agg-accumulator-null-missing-behavior.rst

Example
~~~~~~~

.. include:: /includes/concatArrays-setUnion-accum-example-setup.rst

This example shows how you can use ``$setUnion`` as an accumulator. This 
example accumulates all the unique elements in the ``items`` arrays when 
grouping on the ``location`` field:

.. code-block:: javascript

   db.sales.aggregate( [ 
      {
         $group: {
            _id: "$location",
            array: { "$setUnion": "$items" }
         }
      }
   ] )

The operation returns the following result:

.. code-block:: javascript
   :copyable: false

   [
      {
         "_id": "NYC",
         "array": [
             "laptop", "tablet", "phone", "desktop", { "accessories": [ "mouse", "keyboard"] }
         ]
      }
   ]


Array Operator
--------------
.. expression:: $setUnion

Syntax
~~~~~~

When used as an array operator, ``$setUnion`` has the following syntax:

.. code-block:: javascript

   { 
      $setUnion: [ <expression1>, <expression2>, ... ] 
   }

Behavior
~~~~~~~~

.. |set-operator-name| replace:: :expression:`$setUnion`

.. include:: /includes/important-set-operator-semantics.rst

.. include:: /includes/args-can-be-expressions.rst

.. include:: /includes/fact-setUnion-non-recursive.rst

.. list-table::
   :header-rows: 1
   :widths: 60 35
   :class: border-table

   * - Example
     - Result

   * - .. code-block:: javascript
          :copyable: false

          { $setUnion: [ [ "a", "b", "a" ], [ "b", "a" ] ] }

     - .. code-block:: javascript
          :copyable: false

          [ "b", "a" ]

   * - .. code-block:: javascript
          :copyable: false

          { $setUnion: [ [ "a", "b" ], [ [ "a", "b" ] ] ] }

     - .. code-block:: javascript
          :copyable: false

          [ [ "a", "b" ], "b", "a" ]

Example
~~~~~~~

Consider an ``flowers`` collection with the following documents:

.. code-block:: javascript

   db.flowers.insertMany( [
      { "_id" : 1, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "rose", "orchid" ] },
      { "_id" : 2, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "orchid", "rose", "orchid" ] },
      { "_id" : 3, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "rose", "orchid", "jasmine" ] },
      { "_id" : 4, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "jasmine", "rose" ] },
      { "_id" : 5, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ ] },
      { "_id" : 6, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ [ "rose" ], [ "orchid" ] ] },
      { "_id" : 7, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ [ "rose", "orchid" ] ] },
      { "_id" : 8, "flowerFieldA" : [ ], "flowerFieldB" : [ ] },
      { "_id" : 9, "flowerFieldA" : [ ], "flowerFieldB" : [ "rose" ] }
   ] ) 

The following operation uses the :expression:`$setUnion` operator to
return an array of elements found in the ``flowerFieldA`` array or the
``flowerFieldB`` array or both:

.. code-block:: javascript

   db.flowers.aggregate(
      [
        { $project: { flowerFieldA:1, flowerFieldB: 1, allValues: { $setUnion: [ "$flowerFieldA", "$flowerFieldB" ] }, _id: 0 } }
      ]
   )

The operation returns the following results:

.. code-block:: javascript
   :copyable: false

   { "flowerFieldA": [ "rose", "orchid" ], "flowerFieldB": [ "rose", "orchid" ], "allValues": [ "orchid", "rose" ] }
   { "flowerFieldA": [ "rose", "orchid" ], "flowerFieldB": [ "orchid", "rose", "orchid" ], "allValues": [ "orchid", "rose" ] }
   { "flowerFieldA": [ "rose", "orchid" ], "flowerFieldB": [ "rose", "orchid", "jasmine" ], "allValues": [ "orchid", "rose", "jasmine" ] }
   { "flowerFieldA": [ "rose", "orchid" ], "flowerFieldB": [ "jasmine", "rose" ], "allValues": [ "orchid", "rose", "jasmine" ] }
   { "flowerFieldA": [ "rose", "orchid" ], "flowerFieldB": [ ], "allValues": [ "orchid", "rose" ] }
   { "flowerFieldA": [ "rose", "orchid" ], "flowerFieldB": [ [ "rose" ], [ "orchid" ] ], "allValues": [ "orchid", "rose", [ "rose" ], [ "orchid" ] ] }
   { "flowerFieldA": [ "rose", "orchid" ], "flowerFieldB": [ [ "rose", "orchid" ] ], "allValues": [ "orchid", "rose", [ "rose", "orchid" ] ] }
   { "flowerFieldA": [ ], "flowerFieldB": [ ], "allValues": [ ] }
   { "flowerFieldA": [ ], "flowerFieldB": [ "rose" ], "allValues": [ "rose" ] }

Limitations
-----------

- ``$setUnion`` only supports arrays and expressions that resolve to an 
  array.
- ``$setUnion`` does not guarantee the order of the elements in the 
  output array.

Learn More
----------

- :pipeline:`$bucket`
- :pipeline:`$bucketAuto`
- :pipeline:`$group`
- :pipeline:`$setWindowFields`
