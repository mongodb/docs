.. meta::
   :robots: nosnippet

.. _client-data-access:

============================
Query Atlas from Client Apps
============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can query data in linked MongoDB Atlas clusters from client applications
using standard MongoDB query language (MQL) syntax with **MongoDB Data Access**
in the Realm SDKs.

MongoDB Data Access secures data by enforcing your App's role-based access permissions, query filters, and document schemas.
These features let you construct complex client-side queries with MQL
while your data remains secure on the server.

When to Use MongoDB Data Access
-------------------------------

You might want to use MongoDB Data Access in your application if:

- You want to use an API like the MongoDB drivers
- You want to write database queries in your client code instead of on a server
- You want to construct ad hoc queries from the client device.

You might want to use MongoDB Data Access **instead of** :ref:`Atlas Device Sync <sync>`
in an application in these scenarios:

- You are querying documents that are not or cannot be modeled in Realm Database.
- You want to access collections that are not synced.
- You do not want to persist data locally.
- You are using the Realm Web SDK, which does not support Realm Database or Device Sync.

As an alternative to MongoDB Data Access in **client-side** scenarios,
you can use the :ref:`Atlas Data API <data-api>`.

You can also use these APIs without a Realm SDK for your client app's programming
language as long as the language has a HTTPS client.
However, these APIs do not feature the same type-safe MQL syntax
as the Realm SDKs' MongoDB Data Access.

As alternative to MongoDB Data Access in **server-side** scenarios,
you can use the following:

- :driver:`MongoDB driver <>`. Using a MongoDB driver to connect to Atlas
  is the generally recommended server-side approach, as the drivers are
  more performant and flexible than connecting through App Services.
  If you would like to apply App Services Rules
  to driver operations, you can use the :ref:`App Services Wire Protocol <wire-protocol>`.
- Atlas Data API

Set Up
------

To use MongoDB Data Access from a Realm SDK, you must perform the following set up.

.. procedure::

   .. step:: Create an App Services App

      Create an App Services App with a linked MongoDB data source.

      To learn more about App creation, refer to :ref:`Create an App <create-app>`
      and :ref:`Link a Data Source <link-a-data-source>`.

   .. step:: Add an Authentication Provider

      Add at least one authentication provider to the App. All MongoDB Data Access
      queries run in the context of an authenticated user. To learn more about
      enabling user authentication, refer to :ref:`authentication-providers`.

   .. step:: Add Rules to a Collection

      To secure your client-side queries, you must add App Services Rules
      to any collections that you use with MongoDB Data Access. To learn how to
      add rules to collections, refer to :ref:`Define Roles & Permissions
      <define-roles-and-permissions>`.

      If you do not add rules to a collection, then every request to it
      from the client will fail.

   .. step:: Add a Schema and Filters to Collection (Optional)

      In addition to rules, you can also add a schema and filters to collections
      that you query with MongoDB Data Access.

      :ref:`Schemas <schemas>` define your App's data model and validate documents
      against it. Use filters to ensure that the clients only write data matching
      the schema to the database.

      :ref:`Filters <filters>` modify MongoDB queries before they are sent to
      the database so that queries only return a subset of results. For example,
      you could define a filter that modifies queries so that a user can only
      access data that they've written.

      While schemas and filters are not necessary to use MongoDB Data Access,
      you should add them to most production use cases.

   .. step:: Query from Client Apps

      For documentation on how to query MongoDB from the Realm SDKs,
      refer to the Realm MongoDB Data Access documentation:

      - :ref:`java-mongodb-data-access`
      - :ref:`dotnet-mongodb-data-access`
      - :ref:`node-mongodb-data-access`
      - :ref:`react-native-mongodb-data-access`
      - :ref:`ios-mongodb-data-access`
      - :ref:`web-mongodb-data-access`

      MongoDB Data Access **is not** supported in these Realm SDKs:

      - C++ SDK
      - Flutter SDK
      - Kotlin SDK
