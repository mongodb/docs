.. _index-create-single-field:

=================================
Create an Index on a Single Field
=================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can create an index on a single field to improve performance for
queries on that field. Indexing commonly queried fields increases the
chances of :ref:`covering <indexes-covered-queries>` those queries,
meaning MongoDB can satisfy the query entirely with the index,
without examining documents.

To create a single-field index, use the
:method:`db.collection.createIndex()` method:

.. include:: /includes/indexes/code-examples/create-single-field-index.rst

.. note:: Index Sort Order

   .. include:: /includes/indexes/fact-single-field-index-sort.rst

Before You Begin
----------------

Create a ``students`` collection that contains the following documents:

.. code-block:: javascript

   db.students.insertMany( [
      {
         "name": "Alice",
         "gpa": 3.6,
         "location": { city: "Sacramento", state: "California" }
      },
      {
         "name": "Bob",
         "gpa": 3.2,
         "location": { city: "Albany", state: "New York" }
      }
   ] )

Procedures
----------

The following examples show you how to:

- :ref:`index-create-ascending-single-field`

- :ref:`index-embedded-documents`

- :ref:`index-embedded-fields`

.. _index-create-ascending-single-field:

Create an Index on a Single Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider a school administrator who frequently looks up students by
their :abbr:`GPA (Grade Point Average)`. You can create an index on the
``gpa`` field to improve performance for those queries:

.. code-block:: javascript

   db.students.createIndex( { gpa: 1 } )

Results
```````

The index supports queries that select on the field ``gpa``, such as the
following:

.. code-block:: javascript

   db.students.find( { gpa: 3.6 } )

   db.students.find( { gpa: { $lt: 3.4 } } )

.. _index-subdocuments:
.. _index-embedded-documents:

Create an Index on an Embedded Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can create indexes on embedded documents as a whole.

Consider a social networking application where students can search for
one another by location. Student location is stored in an embedded
document called ``location``. The ``location`` document contains the
fields ``city`` and ``state``.

You can create an index on the ``location`` field to improve performance
for queries on the ``location`` document:

.. code-block:: javascript

   db.students.createIndex( { location: 1 } )

Results
```````

The following query uses the index on the ``location`` field:

.. code-block:: javascript
   
   db.students.find( { location: { city: "Sacramento", state: "California" } } )
   
.. important:: Field Order for Embedded Documents

   When you query based on embedded documents, the order that specify
   fields matters. The embedded documents in your query and returned
   document must match exactly. To see more examples of queries on
   embedded documents, see :ref:`read-operations-subdocuments`.

Details
```````

When you create an index on an embedded document, only queries that
specify the *entire* embedded document use the index. Queries on a
specific field within the document do not use the index.

For example, the following queries *do not* use the index on the
``location`` field because they query on specific fields within the
embedded document:

.. code-block:: javascript

   db.students.find( { "location.city": "Sacramento" } )

   db.students.find( { "location.state": "New York" } )

In order for a :term:`dot notation` query to use an index, you must
create an index on the specific embedded field you are querying, not the
entire embedded object. For an example, see
:ref:`index-embedded-fields`.

.. _index-embedded-fields:

Create an Index on an Embedded Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can create indexes on fields within embedded documents. Indexes on
embedded fields can fulfill queries that use :term:`dot notation`.

The ``location`` field is an embedded document that contains the
embedded fields ``city`` and ``state``. Create an index on the
``location.state`` field:

.. code-block:: javascript

   db.students.createIndex( { "location.state": 1 } )

Results
```````

The index supports queries on the field ``location.state``, such as the
following:

.. code-block:: javascript

   db.students.find( { "location.state": "California" } )

   db.students.find( { "location.city": "Albany", "location.state": "New York" } )

Learn More
----------

- :ref:`index-create-multikey-embedded`

- :ref:`Check if a query uses an index <index-measure-index-use>`

- :ref:`Learn about other types of index types <index-types>`

- :ref:`Learn about index properties <index-properties>`
