=========
db.eval()
=========

.. Edits to this page should be carried over to the command eval.txt
   file.

.. default-domain:: mongodb

.. method:: db.eval(function, arguments)

   The :method:`db.eval()` provides the ability to run JavaScript code
   on the MongoDB server. It is a :program:`mongo` shell wrapper around
   the :dbcommand:`eval` command.
   
   The method accepts the following parameters:

   :param JavaScript function: A JavaScript function. 

          The function may accept no arguments, as in the following
          example:

          .. code-block:: javascript

             function () {
                 ...
             }

          The function can also accept arguments, as in the following example:

          .. code-block:: javascript

             function (arg1, arg2) {
                 ...
             }

   :param arguments: 
          A list of arguments to pass to the JavaScript ``function`` if
          the function accepts arguments. Omit if the ``function`` does
          not take arguments.

   Consider the following example of the :method:`db.eval()` method:
   
   .. code-block:: javascript

      db.eval( function(name, incAmount) { 
                  var doc = db.myCollection.findOne( { name : name } ); 

                  doc = doc || { name : name , num : 0 , total : 0 , avg : 0 }; 

                  doc.num++;
                  doc.total += incAmount;
                  doc.avg = doc.total / doc.num;
         
                  db.myCollection.save( doc ); 
                  return doc; 
               },
               "eliot", 5 );
               
   - The ``db`` in the function refers to the current database.
   
   - ``"eliot"`` is an argument to the function and corresponds to the ``name`` field
   
   - ``5`` is an argument to the function and corresponds to the ``incAmount`` field

   If you want to use the server's interpreter, you must run
   :method:`db.eval()`. Otherwise, the :program:`mongo` shell's
   JavaScript interpreter evaluates functions entered directly into the
   shell.

   If an error occurs, :method:`db.eval()` throws an exception. Consider
   the following invalid function that uses the variable ``x`` without
   declaring it as an argument:

   .. code-block:: javascript

      db.eval( function() { return x + x; }, 3 );

   The statement will result in the following exception:

   .. code-block:: javascript

      {
         "errno" : -3,
         "errmsg" : "invoke failed: JS Error: ReferenceError: x is not defined nofile_b:1",
         "ok" : 0
      }
      
   .. warning::

     - The :method:`db.eval()` operation takes a write lock by default.
       This means that other read and write operations to the database
       are blocked while :method:`db.eval()` is running. However, if
       you are using the :dbcommand:`eval` command and not the method,
       you can disable the lock by setting the ``nolock`` flag to
       ``true`` if the :dbcommand:`eval` performs a strictly read-only
       operation.

     - :method:`db.eval()` also takes a JavaScript lock.

     - Do not use :method:`db.eval()` for long running operations, as
       :method:`db.eval()` blocks all other operations. Consider using
       :doc:`other server side code execution options
       </applications/server-side-code-execution>`.

     - You can not use :method:`db.eval()` with :term:`sharded
       <sharding>` data. In general, you should avoid using
       :method:`db.eval()` in :term:`sharded cluster`; nevertheless, it
       is possible to use :method:`db.eval()` with non-sharded
       collections and databases stored in :term:`sharded cluster`.

   .. seealso:: 

      :doc:`/applications/server-side-code-execution`
