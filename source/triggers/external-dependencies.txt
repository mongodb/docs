.. _external-dependencies:

=====================
External Dependencies
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _external-dependencies-overview:

Overview
--------

An external dependency is an external library that includes logic you'd
rather not implement yourself, such as string parsing, convenience
functions for array manipulations, and data structure or algorithm
implementations.

You can upload external dependencies from the
`npm repository <https://www.npmjs.com/>`_ to {+app-services+} and then
import those libraries into your functions using standard JavaScript
module syntax. To get started with external dependencies, check out the
following guides.

.. note:: Create Your Own Modules

   Though most npm modules are written by third parties, you can
   create and publish your own npm modules to house logic specific to
   your application. You can make your modules available to the Node.js
   community or reserve them for private use. To learn more, see
   npm's guide on `Contributing packages to the registry <https://docs.npmjs.com/packages-and-modules/contributing-packages-to-the-registry>`_.

.. _external-dependencies-upload:

Upload External Dependencies
----------------------------

You can upload npm modules into the {+app-services+} application that houses
your triggers and functions. This allows functions in your
application to depend upon external libraries.

To use external dependencies, upload an archive of an npm
``node_modules`` folder via the {+app-services+} UI. Once uploaded, any
function can import and use any dependencies listed on the
dependencies page of the {+app-services+} UI.

.. important:: External Dependency Size Constraints

   Uploaded zip files are subject to a ``10MB`` size cap.

Procedure
~~~~~~~~~

.. include:: /includes/steps/upload-external-dependencies.rst

.. _external-dependencies-import:

Import External Dependencies
----------------------------

Once uploaded to your application, you can import npm modules listed on
the dependencies page of the {+app-services+} UI into your functions.

.. note:: Pre-requisites for Import

   You must :ref:`upload dependencies <external-dependencies-upload>`
   before you can import them.

Usage
~~~~~

You can import dependencies into any function using the
``require`` keyword inside of the ``exports`` function. You cannot use
ES Module ``import`` syntax. You should import dependencies in the
style of a ``node_modules`` module import, since {+app-services+} does not
support file or local module import. To learn more about ``require``
syntax, consult the `Node.js documentation for the require keyword <https://nodejs.org/api/modules.html#modules_require_id>`_.

.. important:: Where Do I Import Modules?

   Node.js projects commonly place ``require`` statements in the global
   scope of each file, but {+app-services+} does not support this pattern. You
   *must* place function ``require`` statements within a
   function scope.

Import a Full Module
~~~~~~~~~~~~~~~~~~~~

Below, you'll find a simple example of a function that uses the
``require`` keyword inside a function to import the ``ramda`` module
and call `ramda <https://ramdajs.com/>`_'s ``map`` method:

.. code-block:: javascript
   :emphasize-lines: 2

   exports = () => {
      const R = require("ramda");
      return R.map(x => x*2, [1,2,3]);
   }

Import a Module Subfolder
~~~~~~~~~~~~~~~~~~~~~~~~~

The following example demonstrates how to use ``require`` to import a
single submodule of an external dependency into a function:

.. code-block:: javascript
   :emphasize-lines: 2

   exports = function(arg){
      const cloneDeep = require("lodash/cloneDeep");

      var original = { name: "Deep" };
      var copy = cloneDeep(original);
      copy.name = "John";

      console.log(`original: ${original.name}`);
      console.log(`copy: ${copy.name}`);
      return (original != copy);
   };

.. _external-dependencies-constraints:

Constraints
-----------

External dependencies are subject to the following limitations:

- Require statements *must* appear inside a function declaration, not
  outside it. {+atlas-app-services+} does not currently support
  statements in the global scope.

- {+atlas-app-services+} currently supports a subset of Node.js built-in 
  modules.
  For a list of supported and unsupported modules, see
  :appservices:`function constraints </functions/#constraints>`.
