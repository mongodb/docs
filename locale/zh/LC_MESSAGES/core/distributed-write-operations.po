#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/distributed-write-operations.txt:3
msgid "Distributed Write Operations"
msgstr "分布式写操作"

#: ../source/core/distributed-write-operations.txt:16
msgid "Write Operations on Sharded Clusters"
msgstr "分片集群上的写操作"

#: ../source/core/distributed-write-operations.txt:18
msgid ""
"For sharded collections in a :term:`sharded cluster`, the :program:`mongos` "
"directs write operations from applications to the shards that are responsible "
"for the specific *portion* of the data set. The :program:`mongos` uses the "
"cluster metadata from the :ref:`config database <sharding-config-server>` to "
"route the write operation to the appropriate shards."
msgstr ""
"对于 :term:`分片集群` 上的分片集合而言， :program:`mongos` 程序将写操作从应用导"
"入 负责该数据集的特定  * 部分 * 的分片。 :program:`mongos`  使用来自于  :ref:"
"`config database <sharding-config-server>` 的集群元数据将写操作路由到合适的分"
"片。"

#: ../source/core/distributed-write-operations.txt:27
msgid ""
"MongoDB partitions data in a sharded collection into *ranges* based on the "
"values of the :term:`shard key`. Then, MongoDB distributes these chunks to "
"shards. The shard key determines the distribution of chunks to shards. This "
"can affect the performance of write operations in the cluster."
msgstr ""
"MongoDB将分片集合中的数据基于  :term:`片键` 的值合并到 *ranges* 中。然后，"
"MongoDB将这些数据段分发到分片中。 片键决定了从数据段到分片的分布，这将影响到集"
"群中写操作的性能。"

#: ../source/core/distributed-write-operations.txt:35
msgid ""
"Update operations that affect a *single* document **must** include the :term:"
"`shard key` or the ``_id`` field. Updates that affect multiple documents are "
"more efficient in some situations if they have the :term:`shard key`, but can "
"be broadcast to all shards."
msgstr ""
"影响一个  *单一* 文档的更新操作  **必须**  包含  :term:`片键`  或者 ``_id``  字"
"段。在一些情况下，有 :term:`片键` 、影响多个文档的更新操作将会更高效，但是相关"
"的更新操作会广播到所有的分片。"

#: ../source/core/distributed-write-operations.txt:41
msgid ""
"If the value of the shard key increases or decreases with every insert, all "
"insert operations target a single shard. As a result, the capacity of a single "
"shard becomes the limit for the insert capacity of the sharded cluster."
msgstr ""
"如果片键的值随着每个插入操作增加或者减少，这就说明所有的插入操作都是针对于一个"
"单一的分片。因此，单一分片的容量将会成为该分片集群插入容量的极限。"


#: ../source/core/distributed-write-operations.txt:52
msgid "Write Operations on Replica Sets"
msgstr ""

#: ../source/core/distributed-write-operations.txt:0
msgid "On this page"

msgstr ""
"请查阅  :doc:`/administration/sharded-clusters`  以及  :ref:`write-operations-"
"bulk-insert` 了解更多详细信息。"

#: ../source/core/distributed-write-operations.txt:46

msgid ""
"For more information, see :doc:`/administration/sharded-clusters` and "
":doc:`/core/bulk-write-operations`."
msgstr ""


#: ../source/core/distributed-write-operations.txt:54
msgid ""

"In :term:`replica sets <replica set>`, all write operations go to the set's "
":term:`primary`. The primary applies the write operation and records the "
"operations on the primary's operation log or :term:`oplog`. The oplog is a "
"reproducible sequence of operations to the data set. :term:`Secondary` "
"members of the set continuously replicate the oplog and apply the operations"
" to themselves in an asynchronous process."

msgstr ""
"在  :term:`复制集 <replica set>`中，所有的写操作都会到达该集合的 :term:`主节点"
"` ：首先执行该写操作然后将该操作记录到主节点的操作日志或者  :term:`oplog` 中。 "
"这个 oplog 是一个可复写的、对于数据集的操作序列。该集合的 :term:`从节点` 成员需"
"要持续复制该optlog，并且使用一个异步的进程将这些操作应用与本身。"

#: ../source/core/distributed-write-operations.txt:63
msgid ""

"For more information on replica sets and write operations, see :doc:`/core"
"/replication-introduction` and :doc:`/reference/write-concern`."

msgstr ""
"写操作（特别是批量操作）的大容量很有可能会造成以下情形：从节点成员很难以一个高"
"效的速率将操作从主节点中复制过来，这将导致从节点的状态滞后于主节点。从节点远远"
"滞后于主节点将意味着：该复制集的正常操作存在问题，特别是 :ref:`rollbacks "
"<replica-set-rollback>` 形式带来的  :ref:`failover <replica-set-failover-"
"administration>` ，以及比较常见的  :doc:`read consistency </applications/"
"replication>` 。"


#~ msgid ""
#~ "For more information, see :doc:`/administration/sharded-clusters` and :ref"
#~ ":`write-operations-bulk-insert`."
#~ msgstr ""

#~ msgid ""
#~ "In :term:`replica sets <replica set>`, all write operations go to the set's "
#~ ":term:`primary`, which applies the write operation then records the "
#~ "operations on the primary's operation log or :term:`oplog`. The oplog is a "
#~ "reproducible sequence of operations to the data set. :term:`Secondary` "
#~ "members of the set are continuously replicating the oplog and applying the "
#~ "operations to themselves in an asynchronous process."
#~ msgstr ""

#~ msgid ""
#~ "Large volumes of write operations, particularly bulk operations, may create "
#~ "situations where the secondary members have difficulty applying the "
#~ "replicating operations from the primary at a sufficient rate: this can cause"
#~ " the secondary's state to fall behind that of the primary. Secondaries that "
#~ "are significantly behind the primary present problems for normal operation "
#~ "of the replica set, particularly :ref:`failover <replica-set-failover-"
#~ "administration>` in the form of :ref:`rollbacks <replica-set-rollback>` as "
#~ "well as general :doc:`read consistency </applications/replication>`."
#~ msgstr ""

#~ msgid ""
#~ "To help avoid this issue, you can customize the :ref:`write concern <write-"
#~ "operations-write-concern>` to return confirmation of the write operation to "
#~ "another member [#write-concern-throttling]_ of the replica set every 100 or "
#~ "1,000 operations. This provides an opportunity for secondaries to catch up "
#~ "with the primary. Write concern can slow the overall progress of write "
#~ "operations but ensure that the secondaries can maintain a largely current "
#~ "state with respect to the primary."
#~ msgstr ""

#~ msgid ""
#~ "For more information on replica sets and write operations, see :ref"
#~ ":`replica-set-write-concern`, :ref:`replica-set-oplog-sizing`, and "
#~ ":doc:`/tutorial/change-oplog-size`."
#~ msgstr ""

#~ msgid ""
#~ "Intermittently issuing a write concern with a ``w`` value of ``2`` or "
#~ "``majority`` will slow the throughput of write traffic; however, this "
#~ "practice will allow the secondaries to remain current with the state of the "
#~ "primary."
#~ msgstr ""

#~ msgid ""
#~ "In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats ``w:"
#~ " \"majority\"`` as equivalent to ``w: 1``. In earlier versions of MongoDB, "
#~ "``w: \"majority\"`` produces an error in :doc:`master/slave </core/master-"
#~ "slave>` deployments."
#~ msgstr ""

