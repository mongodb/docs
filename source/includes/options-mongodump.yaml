# This file borrows content from /includes/options-shared.yaml, which uses
# {{program}} to refer to the tool.
#
program: mongodump
name: help
inherit:
  name: help
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: verbose
inherit:
  name: verbose
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: quiet
inherit:
  name: quiet
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: version
inherit:
  name: version
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: host
inherit:
  name: host
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: port
inherit:
  name: port
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: ipv6
inherit:
  name: ipv6
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: ssl
inherit:
  name: ssl
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: sslCAFile
inherit:
  name: sslCAFile
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: sslPEMKeyFile
inherit:
  name: sslPEMKeyFile
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: sslPEMKeyPassword
inherit:
  name: sslPEMKeyPassword
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: sslCRLFile
inherit:
  name: sslCRLFile
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: sslAllowInvalidCertificates
inherit:
  name: sslAllowInvalidCertificates
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: sslFIPSMode
inherit:
  name: sslFIPSMode
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: username
inherit:
  name: username
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: password
inherit:
  name: password
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: authenticationDatabase
inherit:
  name: authenticationDatabase
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: authenticationMechanism
inherit:
  name: authenticationMechanism
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: dbpath
inherit:
  name: dbpath
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: directoryperdb
inherit:
  name: directoryperdb
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: journal
inherit:
  name: journal
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: db
aliases: -d
directive: option
args:  <database>
description: |
  Specifies a database to backup. If you do not specify a database,
  :program:`mongodump` copies all databases in this instance into the dump
  files.
optional: true
---
program: mongodump
name: collection
aliases: -c
directive: option
args: <collection>
description: |
  Specifies a collection to backup. If you do not specify a collection,
  this option copies all collections in the specified database or instance
  to the dump files.
optional: true
---
program: mongodump
name: out
aliases: -o
directive: option
args: <path>
description: |
  Specifies the directory where :program:`mongodump` saves the output of
  the database dump. By default, :program:`mongodump` saves output files
  in a directory named ``dump`` in the current working directory.

  To send the database dump to standard output, specify "``-``" instead of
  a path. Write to standard output if you want process the output before
  saving it, such as to use ``gzip`` to compress the dump. When writing
  standard output, :program:`mongodump` does not write the metadata that
  writes in a ``<dbname>.metadata.json`` file when writing to files
  directly.
optional: true
---
program: mongodump
name: query
aliases: -q
directive: option
args: <json>
description: |
  Provides a :term:`JSON document` as a query that optionally limits the
  documents included in the output of :program:`mongodump`.
optional: true
---
program: mongodump
name: oplog
directive: option
args: null
description: |
  Ensures that :program:`mongodump` creates a dump of
  the database that includes a partial :term:`oplog` containing operations
  from the duration of the :program:`mongodump` operation. This oplog
  produces an effective point-in-time snapshot of the state of a
  :program:`mongod` instance. To restore to a specific point-in-time
  backup, use the output created with this option in conjunction with
  :option:`mongorestore --oplogReplay`.

  Without {{role}}, if there are write operations during the dump
  operation, the dump will not reflect a single moment in time. Changes
  made to the database during the update process can affect the output of
  the backup.

  {{role}} has no effect when running :program:`mongodump`
  against a :program:`mongos` instance to dump the entire contents of a
  sharded cluster. However, you can use {{role}} to dump
  individual shards.

  {{role}} only works against nodes that maintain an
  :term:`oplog`. This includes all members of a replica set, as well as
  :term:`master` nodes in master/slave replication deployments.

  {{role}} does not dump the oplog collection.
optional: true
---
program: mongodump
name: repair
directive: option
args: null
description: |
  Runs a repair option in addition to dumping the
  database. The repair option attempts to repair a database that may be in
  an invalid state as a result of an improper shutdown or
  :program:`mongod` crash.

  The {{role}} option uses aggressive data-recovery algorithms
  that may produce a large amount of duplication.
optional: true
---
program: mongodump
name: forceTableScan
directive: option
args: null
description: |
  Forces :program:`mongodump` to scan the data store directly: typically,
  :program:`mongodump` saves entries as they appear in the index of the
  ``_id`` field. Use {{role}} to skip the index and scan
  the data directly. Typically there are two cases where this behavior is
  preferable to the default:

  1. If you have key sizes over 800 bytes that would not be present in the
     ``_id`` index.

  2. Your database uses a custom ``_id`` field.

  When you run with {{role}}, :program:`mongodump` does
  not use :operator:`$snapshot`. As a result, the dump produced by
  :program:`mongodump` can reflect the state of the database at many
  different points in time.

  .. important:: Use {{role}} with extreme caution and
     consideration.
optional: true
---
program: mongodump
name: dumpDbUsersAndRoles
directive: option
args: null
description: |
  Includes user and role definitions when performing :program:`mongodump`
  on a specific database. This option applies only when you specify a
  database in the :option:`--db` option. MongoDB always includes user and
  role definitions when :program:`mongodump` applies to an entire instance
  and not just a specific database.
optional: true
...
