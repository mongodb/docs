====================
db.collection.save()
====================

.. default-domain:: mongodb

Definition
----------

.. method:: db.collection.save()

   Updates an existing document or inserts a new document, depending on
   its ``document`` parameter.

   The :method:`~db.collection.save()` method has the following form:

   .. versionchanged:: 2.6

   .. code-block:: none

      db.collection.save(
         <document>,
         {
           writeConcern: <document>
         }
      )

   .. include:: /reference/method/db.collection.save-param.rst

   .. versionchanged:: 2.6
      The :method:`~db.collection.save()` returns an object that
      contains the status of the operation.

   :returns: A :ref:`writeresults-save` object that contains the
      status of the operation.

Behavior
--------

.. _save-safe-writes:

Safe Writes
~~~~~~~~~~~

.. versionchanged:: 2.6

The :method:`~db.collection.save()` method uses either the
:dbcommand:`insert` or the :dbcommand:`update` command, which use the
default write concern. To specify a different write concern, include
the write concern in the options parameter.

Insert
~~~~~~

If the document does **not** contain an :term:`_id` field, then the
:method:`~db.collection.save()` method performs an
:method:`~db.collection.insert()`. During the operation, the
:program:`mongo` shell will create an :doc:`/reference/object-id` and
assign it to the ``_id`` field.

.. include:: /includes/note-insert-id-field.rst

Upsert
~~~~~~

If the document contains an :term:`_id` field, then the
:method:`~db.collection.save()` method performs an :ref:`update with
upsert <upsert-parameter>`, querying by the ``_id`` field. If a
document does not exist with the specified ``_id`` value, the
``document`` is inserted by the :ref:`update with upsert <upsert-parameter>`. 
If a document exists with the specified ``_id`` value, **all** fields 
in the existing document are replaced with the fields from the ``document``.

Examples
--------

.. _crud-create-insert-save:

Save a New Document without Specifying an ``_id`` Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following example, :method:`~db.collection.save()` method
performs an insert since the document passed to the method does not
contain the ``_id`` field:

.. code-block:: javascript

   db.products.save( { item: "book", qty: 40 } )

During the insert, :program:`mongod` will create the ``_id`` field with
a unique :doc:`/reference/object-id` value, as verified by the inserted
document:

.. code-block:: javascript

   { "_id" : ObjectId("50691737d386d8fadbd6b01d"), "item" : "book", "qty" : 40 }

.. include:: /includes/fact-object-id-may-differ.rst

.. _crud-create-save:

Save a New Document Specifying an ``_id`` Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following example, :method:`~db.collection.save()` performs an
update with ``upsert`` since the document contains an ``_id`` field:

.. code-block:: javascript

   db.products.save( { _id: 100, item: "water", qty: 30 } )

Because the ``_id`` field holds a value that *does not* exist in the
collection, the operation inserts the document. The results of these
operations are identical to an :ref:`update operation with the upsert
flag <upsert-parameter>` set to ``true`` or ``1``.

The operation results in the following new document in the ``products``
collection:

.. code-block:: javascript

   { "_id" : 100, "item" : "water", "qty" : 30 }

Replace an Existing Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``products`` collection contains the following document:

.. code-block:: javascript

   { "_id" : 100, "item" : "water", "qty" : 30 }

The :method:`~db.collection.save()` method performs an update with
``upsert`` since the document contains an ``_id`` field:

.. code-block:: javascript

   db.products.save( { _id : 100, item : "juice" } )

Because the ``_id`` field holds a value that exists in the collection,
the operation performs an update to replace the document and results in
the following document:

.. code-block:: javascript

   { "_id" : 100, "item" : "juice" }

Override Default Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation to a replica set specifies a :doc:`write
concern </reference/write-concern>` of ``"w: majority"`` with a
``wtimeout`` of 5000 milliseconds such that the method returns after
the write propagates to a majority of the replsica set members or the
method times out after 5 seconds.

.. code-block:: javascript

   db.products.save(
       { item: "envelopes", qty : 100, type: "Clasp" },
       { writeConcern: { w: "majority", wtimeout: 5000 } }
   )

.. _writeresults-save:

WriteResult
-----------

.. versionchanged:: 2.6

The :method:`~db.collection.save()` returns a :method:`WriteResult`
object that contains the status of the insert or update operation. See
:ref:`WriteResult for insert <writeresults-insert>` and
:ref:`WriteResult for update <writeresults-update>` for details.
