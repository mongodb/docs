=========================================
Application Development with Replica Sets
=========================================

.. default-domain:: mongodb

From the perspective of the client applications, whether a MongoDB
instance is a single server (i.e. "standalone") or a replica set is
mostly irrelevant. While specific configuration depends to some extent
on the client :doc:`drivers </applications/drivers>`, there is often
minimal or no differences between applications running with
:term:`replica sets <replica set>` or standalone instances.

This document, however, addresses several topics that will help
application developers take advantage of replica sets.

.. _replica-set-write-concern:

Write Concern
-------------

When a :term:`client` sends a write operation to a database server,
the operation will return without waiting for the operation to succeed
or return. To verify that the operation is successful, use the
:dbcommand:`getLastError` command. You can configure
:dbcommand:`getLastError` to return after journal flushes to disk or
after the data itself flushes to disk. For replica sets, you can
configure :dbcommand:`getLastError` to return only after the write
operation has propagated to more than one member of the set or to a
majority of the set's members.

Many drivers have a "safe" or "write concern" mode that automatically
issues a :dbcommand:`getLastError` command following write
operations to ensure that they succeed. "Safe mode,"
provides confirmation of write operations to clients, which is often
the expected method of operation, and is particularly useful when
using standalone instances.

However, safe writes can take longer to return and are not required in
all applications. Using the ``w: "majority"`` option for
:dbcommand:`getLastError`, write operations to a replica set will
return only after a write operation has replicated to a majority of
the members of the set. At the :program:`mongo` shell, use the
following command to ensure that writes have propagated to a majority
of the replica set members:

.. code-block:: javascript

   db.runCommand( { getLastError: 1, w: "majority" } )
   db.getLastError("majority")

You may also specify ``w: 2`` so that the write operation replicates
to a second member before the command returns.

.. note::

   :dbcommand:`getLastError` assumes the current host,
   therefore, ``w: 2`` waits until the :term:`primary` and one other
   member of the replica set commits the write operation. The current
   primary always counts as ``w: 1``.

You can also configure a "default" :dbcommand:`getLastError` behavior on the
replica set configuration. For instance:

.. code-block:: javascript

   cfg = rs.conf()
   cfg.settings.getLastErrorDefaults = {w: "majority", fsync: false, j: true}
   rs.reconfig(cfg)

When the new configuration is active, the effect of the
:dbcommand:`getLastError` operation will wait until the write
operation has succeeded on a majority of the set members before writing. By
specifying ``fsync: false`` and ``j: true`` a successful commit of
the operation to the journal is all that :dbcommand:`getLastError`
requires to return succesullly, rather than a full flush to disk. Use this the
:data:`getLastErrorDefaults`" setting on the sever level to define the
standards for a set-wide "safe mode." The default setting will only
affect :dbcommand:`getLastError` commands with *no* other
arguments.

.. index:: read preference
.. index:: slaveOk

.. _replica-set-read-preference:
.. _slaveOk:

Read Preference
---------------

Read preference describes how MongoDB clients route read operations to
:term:`secondary` members of a :term:`replica set`. The
:ref:`background <replica-set-read-preference-background>` section
introduces read preference, while the :ref:`mode semantics
<replica-set-read-preference-modes>` and :ref:`behavior
<replica-set-read-preference-behavior>` sections address the way that
MongoDB clients and drivers can handle read preferences. Finally, the
:ref:`tag sets <replica-set-read-preference-tag-sets>` section
outlines read preference tagging for custom read preference
configuration, which provides a component of "data center awareness."

.. index:: read preference; background
.. _replica-set-read-preference-background:

Background
~~~~~~~~~~

By default, applications direct queries (i.e. read operations) to the
:term:`primary` member in a :term:`replica set`. When reading from the
the primary, all read operations are :term:`strictly consistent
<strict consistency>`. However, you can improve read performance and
throughput by distributing some or all reads to secondary members of
the replica set as needed. While secondary reads are :term:`eventually
consistent <eventual consistency>`, some applications may not require
strict consistency.

Reads from secondaries are eventually consistent because MongoDB can
not guarantee that secondary members will be consistent with the state
of the primary, which receives all incoming write operations. Do not
allow secondary reads, unless you can accept eventual consistency for
these operations.

In many cases, your application will require the :term:`strict consistency`
that primary reads provide. However, typically secondary reads are
useful for:

- running systems operations including backups and reports without
  impacting the front-end application.

- providing low-latency queries for geographically distributed
  deployments. If one secondary is closer to an application server
  than the primary or the rest of the set, you may see better
  performance for that application if you use secondary reads.

Secondary reads also provide graceful degradation in
:ref:`failover <replica-set-failover>` situations. During failover, replica sets may take
10 seconds or more to elect a new primary. Because there is no primary,
applications that can only read from primaries, with the
:readmode:`primary` read preference mode, are unable to perform reads during this period.
With read preference configured permit read from secondary
members, as with the :readmode:`primaryPrefered` read preference mode, your
application can continue read operations using the
remaining secondary members.

MongoDB :term:`drivers <driver>` allow client applications to
configure a :term:`read preference` on a per-connection or
per-operation basis. See the :func:`rs.slaveOk()` method for more
information about secondary read operations in the :program:`mongo`
shell, as well as the appropriate :ref:`driver` API documentation for
more information about read preference configuration. The
:ref:`semantics <replica-set-read-preference-semantics>` and
:ref:`behavior <replica-set-read-preference-behavior>` sections also
address read preference configuration and operations.

.. note::

   Read preference only affect which members of the set the application chooses
   to read from. Read preferences only affect the members of the replica
   set that the read operation uses, as well as the consistency of
   query results. Use appropriate :ref:`write concern
   <replica-set-write-concern>` policies to ensure proper data
   replication and constancy.

   If read operations account for a large percentage of your
   application's traffic,distributing reads to secondary members may
   provide some performance improvement. However, in most cases
   :doc:`sharding </core/sharding>` will provide better support for
   larger scale operations, because shard clusters can distribute read
   and write operations across a group of machines.

.. index:: read preference; semantics
.. _replica-set-read-preference-semantics:
.. index:: read preference; modes
.. _replica-set-read-preference-modes:

Read Preference Modes
~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.2

All MongoDB drivers :doc:`drivers </applications/drivers>` support the
following read preference modes. These semantics make it possible to
specify read preference on a per-collection or per-operation
basis. The member of the :term:`replica set` that the client read from
can affect the consistency of the result set. See the :ref:`read
preference background <replica-set-read-preference-background>` and
:ref:`read preference behavior <replica-set-read-preference-behavior>`
for more information. Also see the :api:`documentation for your driver
<>` for specific read preference use. :program:`mongos` also supports
all read-preference modes in its connections to the replica sets that
provide each :term:`shard` in a :term:`shard cluster`.

MongoDB drivers and :program:`mongos` all provide the five read
preference modes, which are constants set in the driver itself. The
exact name of the mode depends on driver implementation and the idioms
of the host language. In the :program:`mongo` shell, the
:func:`readPreference() <cursor.readPreference()>` cursor method
provides access to read preferences, which have the following names.

.. readmode:: primary

   With :readmode:`primary`, all read operations from the client will
   use the :term:`primary` member only.

   This is the default read preference.

   If the primary is unavailable, all operations with this preference
   produce an error or throw an exception. :readmode:`primary` read
   preference modes are not compatible with read preferences modes
   that use :ref:`tag sets <replica-set-read-preference-tag-sets>` If
   you specify a tag set with :readmode:`primary`, the driver will
   produce an error.

.. readmode:: primaryPrefered

   With the :readmode:`primaryPrefered` read preference mode,
   operations will read from the :term:`primary` member of the set in
   most situations. However, if the primary is unavailable, as is the
   case during :term:`failover` situations, then these read operations
   can read from secondary members.

   When the read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`,
   the client will first read from the primary, if it is available, and
   then from :term:`secondaries <secondary>` that match the specified
   tags. If there are no secondaries with tags that match the
   specified tags, this read operation will produce an error.

.. readmode:: secondary

   With the :readmode:`secondary` read preference mode, operations
   will read from the :term:`secondary` member of the set if available.
   However, if there are no secondaries available, then these
   operations will produce an error or exception.

   Most sets have at least one secondary, but there are situations
   where there may not be an available secondary. For example, a set
   with a primary, a secondary, and an :term:`arbiter` may not have
   any secondaries if a member is ever in recovering mode.

   When the read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`,
   the client will attempt to find a secondary members that match the
   specified tag set and directs reads to a random secondary from
   among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`.
   If there are no secondaries with tags that match the specified tag
   set, this read operation will produce an error.

.. readmode:: secondaryPrefered

   With the :readmode:`secondaryPrefered`, operations will read from
   :term:`secondary` members, but in situations where the set *only*
   has a :term:`primary` instance, the read operation will use the
   set's primary.

   When :readmode:`secondaryPrefered` reads from a secondary and the
   read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`,
   the client will attempt to find a secondary members that match the
   specified tag set and directs reads to a random secondary from
   among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`.
   If there are no secondaries with tags that match the specified tag
   set, this read operation will produce an error.

.. readmode:: nearest

   With the :readmode:`nearest`, the driver will read from the
   *nearest* member of the :term:`set <replica set>` according to
   the :ref:`member selection <replica-set-read-preference-behavior-nearest>`
   process :readmode:`nearest` read operations will not have any
   consideration for the *type* of the set member. Reads in
   :readmode:`nearest` mode may read from both primaries and
   secondaries.

   Set this mode when you want minimize the effect of network latency
   on read operations.

   If you specify a :ref:`tag set <replica-set-read-preference-tag-sets>`,
   the client will attempt to find a secondary members that match the
   specified tag set and directs reads to a random secondary from
   among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`.

   .. note::

      All operations read from the nearest member of the replica set
      that matches the specified read preference mode.
      :readmode:`nearest` prefers low latency reads over a
      member's :term:`primary` or :term:`secondary` status.

   .. For I/O-bound users who want to distribute reads across all
      members evenly regardless of ping time, set
      secondaryAcceptableLatencyMS very high.

.. The :func:`readPreference() <cursor.readPreference()>` reference
   above will error until DOCS-364 is complete.

.. index:: tag sets
.. index:: read preference; tag sets
.. _replica-set-read-preference-tag-sets:

Tag Sets
~~~~~~~~

Tag sets allow you to specify custom :ref:`read preferences
<replica-set-read-preference>`, so that your application can target
read operations to specific members based on custom parameters. Tag
sets make it possible to ensure that read operations target members of
the set in a particular data center, or :program:`mongod` instances
designated for a particular class of operations, such as reporting or
analytics. The :doc:`/reference/replica-configuration` document
contains a section on :ref:`tag set configuration
<replica-set-configuration-tag-sets>`.

Read preference :ref:`modes <replica-set-read-preferences>` interact
with tag sets, as specified in the documentation of each read
preference mode. The :readmode:`primary` read preference mode is
incompatible with tag sets, but you may specify a tag set with one of
each of the following read preference modes:

- :readmode:`primaryPrefered`
- :readmode:`secondary`
- :readmode:`secondaryPrefered`
- :readmode:`nearest`

See the documentation of each read preference mode for more
information on the interaction of the read preference mode and tag
sets. All interfaces use the same :ref:`member selection logic
<replica-set-read-preference-behavior-member-selection>` to choose a
member to direct read operations to based on read preference mode and
tag sets.

.. index:: read preference; behavior
.. _replica-set-read-preference-behavior:

Behavior
~~~~~~~~

.. versionchanged:: 2.2

.. _replica-set-read-preference-behavior-retry:

Auto-Retry
``````````

Connection between MongoDB drivers and :program:`mongod` instances in
a :term:`replica set` must balance two concerns:

#. The client should attempt to maximize consistency and any
   connection should read from the same member of the replica set as
   much as possible.

#. The client should minimize the amount of time that the database is
   inaccessible as the result of a connection issue, networking
   problem, or :term:`failover` in a replica set.

As a result, MongoDB drivers, and :program:`mongos` will:

- reuse a connection to specific :program:`mongod` for as long as
  possible after establishing a connection to that instance. This
  connection is *pinned* to this :program:`mongod`.

- attempt to reconnect to a new member, obeying existing :ref:`read
  preference mode <replica-set-read-preference-modes>` when it lose a
  connection to its :program:`mongod`.

  These reconnections are transparent to the application itself. If
  the connection permits reads from :term:`secondary` members, after
  reconnecting, the application can receive two sequential reads
  returning from different secondaries. Depending on the state of the
  individual secondary member's replication, the documents can reflect
  the state of your database at different moments.

- return an error *only* after attempting to connect to three members
  of the set that match the :term:`read preference mode <replica-set-read-preference-modes>`
  and :ref:`tag set <replica-set-read-preference-tag-sets>`.
  If there are fewer than three members of the set, the
  client will error after connecting to all existing members of the
  set.

  After this error, the driver will select a new member using the
  specified read preference mode, or in absence of a specified read
  preference :readmode:`PRIMARY`.

- after detecting a failover situation, [#fn-failover]_ the driver will
  attempt to refresh its state of the replica set as quickly as
  possible.

.. [#fn-failover] When a :term:`failover` occurs, all members of the set
   closes all client connections producing a socket error in the
   driver. This behavior prevents or minimized :term:`rollback`.

.. _replica-set-read-preference-behavior-requests:

Request Length
``````````````

MongoDB assumes that connections between the client and database are
long-lived and that the client will reuse a single connection and
corresponding thread for many operations. When you set a :ref:`read
preference mode <replica-set-read-preference-modes>`, that mode will
persist for all operations that use this thread. A read preference
mode will persist on a per-connection basis until:

- the application sets a new read preference mode, in a new
  operation.

  This behavior permits clients to set read preferences on a per
  operation basis.

- the application (i.e. driver) connection thread goes away, as
  the result of normal application processes.

  Typically this triggers a :ref:`retry
  <replica-set-read-preference-behavior-retry>`, which may be
  transparent to the application.

- the client receives a socket exception, as is the case when
  there's a connection error, or when the :program:`mongod` closes
  connections during a :term:`failover`.

As a result, unless you explicitly set read preference modes on your
connections or operations, read operations may run with unexpected
read preference modes.

.. index:: read preference; ping time
.. index:: read preference; nearest
.. index:: read preference; member selection
.. _replica-set-read-preference-behavior-ping-time:
.. _replica-set-read-preference-behavior-nearest:
.. _replica-set-read-preference-behavior-member-selection:

Member Selection
````````````````

Clients by way of their drivers, and :program:`mongos` instances for
shard clusters, send periodic "ping," messages to all member of the
replica set to determine latency from the application to each
:program:`mongod` instance.

For any operation that will target a member *other* than the
:term:`primary`, the driver will:

#. assemble a list of suitable members, taking account member type
   (i.e. secondary, primary, or all members.)

#. determine which of these suitable members is the closest to the
   client in absolute terms.

#. build a list of members that are, by default, within 15
   milliseconds of the "absolute nearest" member. [#acceptable-secondary-latency]_

#. select a member to perform the read operation on from these hosts
   at random.

Once the application selects a member of the set to use for read
operations, the driver will continue to use this connection for read
preference until the application specifies a new read preference or
something interrupts the connection. See ":ref:`replica-set-read-preference-behavior-requests`"
for more information.

.. [#acceptable-secondary-latency] Applications can configure the
   threshold used in this stage. The default "acceptable latency" is
   15 milliseconds. For :program:`mongos` you can use the
   :option:`--localThreshold <mongos --localThreshold>` or
   :setting:`localThreshold` runtime options to set this value.


.. index:: read preference; sharding
.. index:: read preference; mongos
.. _replica-set-read-preference-behavior-sharding:
.. _replica-set-read-preference-behavior-mongos:

Sharding and ``mongos``
```````````````````````

.. versionchanged:: 2.2
   Before version 2.2, :program:`mongos` did not support the
   :ref:`read preference mode semantics <replica-set-read-preference-modes>`.

In most :term:`shard clusters <shard cluster>`, a :term:`replica set`
provides each shard, where read preferences are also
applicable. Unlike simple replica sets, in shard clusters, all
interactions with the shards pass from the clients to the
:program:`mongos` instances that are actually connected to the set
members. In these situations the :program:`mongos` is responsible for
the actual application of the read preferences.

There are no configuration changes required for full support of read
preference modes in sharded environments, as long as the
:program:`mongos` is at least version 2.2. All :program:`mongos`
maintain their own connection pool to the replica set members, as a
result:

- a request without a specified preference will have
  :readmode:`primary`, the default, unless, the :program:`mongos`
  reuses and existing connection that had a different mode set.

  Always explicitly set your read preference mode to prevent
  confusion.

- all :readmode:`nearest` and latency calculations reflect the
  connection between the :program:`mongos` and the :program:`mongod`
  instances, not the client and the :program:`mongod` instances.

  This produces the desired result, because all results must pass
  through the :program:`mongos` before returning to the client.

Database Commands
`````````````````

Because some :term:`database commands <database command>` read and
return data from the database, all of the official drivers support
full :`read preference mode semantics
<replica-set-read-preference-modes>` for the following commands:

- :dbcommand:`group`
- :dbcommand:`mapReduce` [#inline-map-reduce]_
- :dbcommand:`aggregate`
- :dbcommand:`collStats`
- :dbcommand:`dbStats`
- :dbcommand:`count`
- :dbcommand:`distinct`
- :dbcommand:`geoNear`
- :dbcommand:`geoSearch`
- :dbcommand:`geoWalk`

.. [#inline-map-reduce] Only "inline" :dbcommand:`mapReduce`
   operations that do not write data support read preference,
   otherwise these operations must run on the :term:`primary`
   members.
