.. ensure that the changes to this text are reflected in /reference/operator/aggregation.txt
.. ensure that the changes to this text are reflected in /meta/aggregation-quick-reference.txt
   with slight difference. Quick Reference contains information on different expressions,
   such as field paths, expression objects, etc.

====================================
Aggregation Pipeline Quick Reference
====================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/extracts/operators-toc-explanation.rst


Stages
------

Stages (``db.collection.aggregate``)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the :method:`db.collection.aggregate` method, pipeline stages appear
in an array. Documents pass through the stages in sequence. All except
the :pipeline:`$out` and :pipeline:`$geoNear` stages can appear
multiple times in a pipeline.

.. code-block:: javascript

   db.collection.aggregate( [ { <stage> }, ... ] )

.. include:: /includes/extracts/agg-stages-db.collection.aggregate.rst

Stages (``db.aggregate``)
~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in version 3.6, MongoDB also provides the the
:method:`db.aggregate` method:

.. code-block:: javascript

   db.aggregate( [ { <stage> }, ... ] )

.. include:: /includes/extracts/agg-stages-db.aggregate.rst

.. _aggregation-expressions:

Expressions
-----------

Expressions can include :ref:`field paths and system variables
<agg-quick-ref-field-paths>`, :ref:`literals <agg-quick-ref-literals>`,
:ref:`expression objects <agg-quick-ref-expression-objects>`, and
:ref:`expression operators <agg-quick-ref-operator-expressions>`.
Expressions can be nested.

.. _agg-quick-ref-field-paths:

Field Path and System Variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Aggregation expressions use :term:`field path` to access fields in the
input documents. To specify a field path, use a string that prefixes
with a dollar sign ``$`` the field name or the dotted field name, if
the field is in embedded document. For example, ``"$user"`` to specify
the field path for the ``user`` field or ``"$user.name"`` to specify
the field path to ``"user.name"`` field.

``"$<field>"`` is equivalent to ``"$$CURRENT.<field>"`` where the
:variable:`CURRENT` is a system variable that defaults to the root of
the current object in the most stages, unless stated otherwise in
specific stages. :variable:`CURRENT` can be rebound.

Along with the :variable:`CURRENT` system variable, other :ref:`system
variables <agg-system-variables>` are also available for use in
expressions. To access variables in expressions, prefix the variable
name with ``$$``.

.. _agg-quick-ref-literals:

Literals
~~~~~~~~

Literals can be of any type. However, MongoDB parses string literals
that start with a dollar sign ``$`` as a path to a field and
numeric/boolean literals in :ref:`expression objects
<agg-quick-ref-expression-objects>` as projection flags. To avoid
parsing literals, use the :expression:`$literal` expression.

.. _agg-quick-ref-expression-objects:

Expression Objects
~~~~~~~~~~~~~~~~~~

Expression objects have the following form:

.. code-block:: javascript

   { <field1>: <expression1>, ... }

If the expressions are numeric or boolean literals, MongoDB treats the
literals as projection flags (e.g. ``1`` or ``true`` to include the
field), valid only in the :pipeline:`$project` stage. To avoid treating
numeric or boolean literals as projection flags, use the
:expression:`$literal` expression to wrap the numeric or boolean
literals.

.. _agg-quick-ref-operator-expressions:

Operator Expressions
--------------------

.. contents:: In this section
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. include:: /includes/intro-aggregation-operator-expressions.rst

.. _agg-quick-ref-operator-arithmetic:

Arithmetic Expression Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-arithmetic.rst


Array Expression Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-array.rst

Boolean Expression Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-boolean.rst

Comparison Expression Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-comparison.rst


Conditional Expression Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-conditional.rst

.. _agg-qr-date-operators:

Date Expression Operators
~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-date.rst

Literal Expresion Operator
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-literal.rst

Object Expression Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-objects.rst

.. _agg-qr-set-operators:

Set Expression Operators
~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-set.rst

String Expression Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-string.rst

Text Expression Operator
~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-text.rst

.. _agg-quick-ref-operator-trigonometry:

Trigonometry Expression Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-trigonometry.rst

Type Expression Operators
~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-type.rst

.. _aggregation-accumulator-operators:

.. _agg-quick-reference-accumulators:

Accumulators (``$group``)
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/intro-aggregation-accumulator.rst

.. include:: /includes/extracts/agg-operators-accumulators-group.rst

Accumulators (``$project`` and ``$addFields``)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some operators that are available as accumulators for the
:pipeline:`$group` stage are also available for use in the
:pipeline:`$project` and :pipeline:`$addFields` stages but not as
accumulators. When used in the :pipeline:`$project` and
:pipeline:`$addFields` stages, these operators do not maintain their
state and can take as input either a single argument or multiple
arguments.

.. include:: /includes/extracts/agg-operators-accumulators-project.rst

Variable Expression Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/agg-operators-variable-project.rst

Index of Expression Operators
-----------------------------

.. list-table::

   * - | :expression:`$abs`
       | :expression:`$add`
       | :group:`$addToSet`
       | :expression:`$allElementsTrue`
       | :expression:`$and`
       | :expression:`$anyElementTrue`
       | :expression:`$arrayElemAt`
       | :expression:`$arrayToObject`
       | :group:`$avg`
       | :expression:`$cmp`
       | :expression:`$concat`
       | :expression:`$concatArrays`
       | :expression:`$cond`
       | :expression:`$dateFromParts`
       | :expression:`$dateToParts`
       | :expression:`$dateFromString`
       | :expression:`$dateToString`
       | :expression:`$dayOfMonth`
       | :expression:`$dayOfWeek`
       | :expression:`$dayOfYear`
       | :expression:`$divide`

     - | :expression:`$eq`
       | :expression:`$exp`
       | :expression:`$filter`
       | :group:`$first`
       | :expression:`$floor`
       | :expression:`$gt`
       | :expression:`$gte`
       | :expression:`$hour`
       | :expression:`$ifNull`
       | :expression:`$in`
       | :expression:`$indexOfArray`
       | :expression:`$indexOfBytes`
       | :expression:`$indexOfCP`
       | :expression:`$isArray`
       | :expression:`$isoDayOfWeek`
       | :expression:`$isoWeek`
       | :expression:`$isoWeekYear`
       | :group:`$last`
       | :expression:`$let`
       | :expression:`$literal`

     - | :expression:`$ln`
       | :expression:`$log`
       | :expression:`$log10`
       | :expression:`$lt`
       | :expression:`$lte`
       | :expression:`$ltrim`
       | :expression:`$map`
       | :group:`$max`
       | :expression:`$mergeObjects`
       | :expression:`$meta`
       | :group:`$min`
       | :expression:`$millisecond`
       | :expression:`$minute`
       | :expression:`$mod`
       | :expression:`$month`
       | :expression:`$multiply`
       | :expression:`$ne`
       | :expression:`$not`

     - | :expression:`$objectToArray`
       | :expression:`$or`
       | :expression:`$pow`
       | :group:`$push`
       | :expression:`$range`
       | :expression:`$reduce`
       | :expression:`$reverseArray`
       | :expression:`$rtrim`
       | :expression:`$second`
       | :expression:`$setDifference`
       | :expression:`$setEquals`
       | :expression:`$setIntersection`
       | :expression:`$setIsSubset`
       | :expression:`$setUnion`
       | :expression:`$size`
       | :expression:`$slice`
       | :expression:`$split`

     - | :expression:`$sqrt`
       | :group:`$stdDevPop`
       | :group:`$stdDevSamp`
       | :expression:`$strcasecmp`
       | :expression:`$strLenBytes`
       | :expression:`$strLenCP`
       | :expression:`$substr`
       | :expression:`$substrBytes`
       | :expression:`$substrCP`
       | :expression:`$subtract`
       | :group:`$sum`
       | :expression:`$switch`
       | :expression:`$toLower`
       | :expression:`$toUpper`
       | :expression:`$trim`
       | :expression:`$trunc`
       | :expression:`$type`
       | :expression:`$week`
       | :expression:`$year`
       | :expression:`$zip`
