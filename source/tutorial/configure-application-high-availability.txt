==========================================
Configure a Highly Available |application|
==========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

The |application| provides high availability through
use of multiple |application| servers behind a load balancer
and through use of a :term:`replica set`
to host the :ref:`mms-application-database`.

Multiple |application| Servers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The |application|'s :ref:`components <mms-application-package>` are
stateless between requests. Any |application| server can
handle requests as long as all the servers read from the same |application|
Database. If one |application| becomes unavailable, another
fills requests.

To take advantage of this for high availability, configure a load balancer
to balance between the pool of |application| servers. Use the load
balancer of your choice. The load balancer must not return cached content.

In |mms|, set the :setting:`URL to Access Ops Manager` property to the load
balancer URL. Set the :setting:`Load Balancer Remote IP Header` property to
the HTTP header field the load balancer uses to identify the originating
client's IP address (for example, ``X-Forwarded-For``).
The |application| uses the client's IP address for auditing,
logging, and white listing for the API.

Replica Set for the |application| Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Deploy a :term:`replica set` rather than a standalone to host the
:ref:`mms-application-database`.
Replica sets have automatic :manual:`failover
</core/replica-set-high-availability>` if the :term:`primary` becomes
unavailable.

If the replica set has members in multiple facilities, ensure
that a single facility has enough votes to elect a :term:`primary` if
needed. Choose the facility that hosts the core application systems. Place
a majority of voting members and all the members that can become primary
in this facility. Otherwise, network partitions could prevent the set from
being able to form a majority. For details on how replica sets elect
primaries, see :manual:`Replica Set Elections
</core/replica-set-elections>`.

You can create backups of the replica set using :manual:`file system
snapshots </tutorial/backup-with-filesystem-snapshots>`. File system
snapshots use system-level tools to create copies of the device that holds
replica set's data files.

To deploy the replica set that hosts the |application| Database, see
:doc:`backing MongoDB instance </tutorial/prepare-backing-mongodb-instances>`.

.. _gen-key:

The ``gen.key`` File
~~~~~~~~~~~~~~~~~~~~

All servers running |onprem| use an identical ``gen.key`` keyfile to
encrypt and decrypt |onprem|\'s backing database and user credentials.
The ``gen.key`` file is a 24-byte binary file. This file must be stored
on every server that is part of a highly available |onprem| deployment.

.. important::

   The ``gen.key`` file should not be stored on a shared network location. This file should be stored on each |onprem| server.

|onprem| generates the keyfile automatically the first time it runs.
You can choose to manually generate the ``gen.key`` file before
starting |onprem| using a utility like ``openssl rand``.
   
This example uses ``openssl rand`` to generate the key file. 

.. note:: 

   The ``openssl`` library is not a MongoDB product. Support and usage
   are out of scope for this tutorial beyond the limited examples
   provided.

.. example::

   .. code-block:: sh

      openssl rand 24 > /etc/mongodb-mms/gen.key

   .. note:: 

      OpenSSL must be installed before trying to create this key file.
      Run ``openssl -v`` in a Linux shell or Windows Powershell or
      ``openssl version`` on Mac OS X terminal to see if it is
      installed.

   The ``gen.key``, in this example, is stored in the ``/etc/mongodb-
   mms/`` directory on a Red Hat Enterprise Linux system.

However you create the ``gen.key`` file, copy the file from the server
on which it was created to every server that is part of the highly
available |onprem| instance in the appropriate directory:

* ``/etc/mongodb-mms/`` for RPM or Ubuntu installations

* ``<installPath>/.mongodb-mms/`` for an archive (``.tar``) file
  installations

* ``<installPath>\MMSData\Secrets`` for Microsoft Windows Server
  installations

.. warning::

   Any |onprem| server that does not have the ``gen.key`` file
   installed cannot connect to the backing databases and
   become part of an HA |onprem| instance.

   Once you have generated the ``gen.key`` for your |onprem| instance
   on the first |onprem| server, back up the ``gen.key`` file to a
   secure location.

Prerequisites
-------------

Deploy the replica set that hosts the :ref:`mms-application-database`.
To deploy a replica set, see 
:manual:`Deploy a Replica Set </tutorial/deploy-replica-set>` in the
MongoDB manual.

Procedure
---------

The following procedure assumes you will let one of the |application|\ s
create the ``gen.key``. If you instead create your own ``gen.key``,
distribute it to the servers before starting any of the |application|\ s.

.. important::

   The load balancer placed in front of the |application| servers must not
   return cached content. The load balancer must have caching turned off.

To configure multiple |application|\ s with load balancing:

.. include:: /includes/steps/configure-application-high-availability.rst

Additional Information
----------------------

For information on making |mms| Backup highly available, see
:doc:`/tutorial/configure-backup-high-availability`.
