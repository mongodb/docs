.. _kotlin-whats-new:

==========
What's New
==========

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Learn what's new in:

* :ref:`Version 5.1.1 <kotlin-coroutine-version-5.1.1>`
* :ref:`Version 5.1 <kotlin-coroutine-version-5.1>`
* :ref:`Version 5.0 <version-5.0>`
* :ref:`Version 4.11 <version-4.11>`
* :ref:`Version 4.10 <version-4.10>`

.. _kotlin-coroutine-version-5.1.1:

What's New in 5.1.1
-------------------

The 5.1.1 driver patch release includes the following changes:

- When using the ``MONGODB-OIDC`` authentication mechanism, you must not
  include comma characters in the ``authMechanismProperties`` connection
  string value. To learn more about this behavior, see the
  :ref:`MONGODB-OIDC <kotlin-oidc>` section of the Enterprise
  Authentication guide.

.. _kotlin-coroutine-version-5.1:

What's New in 5.1
-----------------

.. warning:: Deprecations in this release

   To avoid breaking changes in future major releases of the driver,
   replace any application code that depends on deprecated program elements.

This section includes the following information:

- :ref:`kotlin-deprecations-5.1`
- :ref:`kotlin-improvements-5.1`
- :ref:`kotlin-new-features-5.1`

.. _kotlin-deprecations-5.1:

Deprecations in 5.1
~~~~~~~~~~~~~~~~~~~

- Support for {+mdb-server+} v3.6 is deprecated and will be removed in the
  next driver version release. To learn how to upgrade your {+mdb-server+}
  deployment, see :manual:`Release Notes </release-notes>` in the {+mdb-server+}
  manual.

.. _kotlin-improvements-5.1:

Improvements in 5.1
~~~~~~~~~~~~~~~~~~~

- Internal testing of GraalVM native image technology. These tests involve building
  native applications by using the GraalVM native-image tool.

- Enhanced support for the ``MONGODB-OIDC`` authentication mechanism.
  To learn more about OIDC, see the :ref:`kotlin-oidc` section of the
  Enterprise Authentication Mechanisms guide.

- Fixes an issue in which operations used the incorrect codec when using
  a polymorphic ``MongoCollection`` instance. This ensures that
  discriminator information is not lost when using ``bson-kotlinx``.

- Fixes an issue in which the class discriminator was the first field
  when decoding, resulting in field type errors when using a polymorphic
  ``MongoCollection`` instance.

.. _kotlin-new-features-5.1:

New Features in 5.1
~~~~~~~~~~~~~~~~~~~

- Support for polymorphic serialization.

.. TODO add polymorphic serialization content

- Introduces the ``serverMonitoringMode`` connection URI option. To
  learn more, see the :ref:`connection-options` guide.

.. _version-5.0:

What's New in 5.0
-----------------

New features of the 5.0 driver release include:

- The ``KotlinSerializerCodecProvider`` constructor now accepts
  ``serializersModule`` and ``bsonConfiguration`` objects:

  .. code-block:: kotlin
     
     KotlinSerializerCodec.create(clazz.kotlin, serializersModule=serializersModule, bsonConfiguration=bsonConfiguration)
  
  This makes it easier to customize your configuration.

- Fixes a Kotlin reflection bug that resulted in container type erasure.

.. _version-4.11:

What's New in 4.11
------------------

This section includes the following information:

- :ref:`kotlin-deprecations-4.11`
- :ref:`kotlin-new-features-4.11`

.. _kotlin-deprecations-4.11:

Deprecations in 4.11
~~~~~~~~~~~~~~~~~~~~

.. warning:: Deprecations in this release

   To avoid breaking changes in future major releases of the driver,
   replace any application code that depends on deprecated methods and types.

The 4.11 driver release deprecates the following items:

- The following network address-related methods are deprecated and will be removed
  in v5.0:

  - The `ServerAddress <{+api+}/apidocs/mongodb-driver-core/com/mongodb/ServerAddress.html>`__
    methods ``getSocketAddress()`` and ``getSocketAddresses()``.

    Instead of ``getSocketAddress()``, use the ``getByName()`` instance
    method of ``java.net.InetAddress``.

    Instead of ``getSocketAddresses()``, use the ``getAllByName()`` instance
    method of ``java.net.InetAddress``.

  - The `UnixServerAddress <{+api+}/apidocs/mongodb-driver-core/com/mongodb/UnixServerAddress.html>`__
    method ``getUnixSocketAddress()``.

    Instead of ``getUnixSocketAddress()``, construct an instance of
    ``jnr.unixsocket.UnixSocketAddress``. Pass the full path of the UNIX
    socket file to the constructor. By default, MongoDB creates a UNIX
    socket file located at ``"/tmp/mongodb-27017.sock"``. To learn more
    about the ``UnixSocketAddress``, see the `UnixSocketAddress <https://www.javadoc.io/doc/com.github.jnr/jnr-unixsocket/latest/jnr/unixsocket/UnixSocketAddress.html>`__ API documentation.

- The following methods and types related to the
  `StreamFactory <https://mongodb.github.io/mongo-java-driver/4.10/apidocs/mongodb-driver-core/com/mongodb/connection/StreamFactory.html>`__
  interface are deprecated and scheduled for removal in v5.0:

  - ``streamFactoryFactory()`` method from ``MongoClientSettings.Builder``
  - ``getStreamFactoryFactory()`` method from ``MongoClientSettings``
  - ``NettyStreamFactoryFactory`` class
  - ``NettyStreamFactory`` class
  - ``AsynchronousSocketChannelStreamFactory`` class
  - ``AsynchronousSocketChannelStreamFactoryFactory`` class
  - ``BufferProvider`` class
  - ``SocketStreamFactory`` class
  - ``Stream`` class
  - ``StreamFactory`` class
  - ``StreamFactoryFactory`` class
  - ``TlsChannelStreamFactoryFactory`` class

  If you configure Netty by using
  ``MongoClientSettings.Builder.streamFactoryFactory()``, your code might resemble
  the following:

  .. code-block:: java
     :emphasize-lines: 6
     :copyable: false

     import com.mongodb.connection.netty.NettyStreamFactoryFactory;

     // ...

     MongoClientSettings settings = MongoClientSettings.builder()
             .streamFactoryFactory(NettyStreamFactoryFactory.builder().build())
             .build();

  Replace this code with the `TransportSettings.nettyBuilder() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/connection/TransportSettings.html>`__
  as shown in the following example:

  .. code-block:: java
     :emphasize-lines: 6

     import com.mongodb.connection.TransportSettings;

     // ...

     MongoClientSettings settings = MongoClientSettings.builder()
             .transportSettings(TransportSettings.nettyBuilder().build())
             .build();


.. _kotlin-new-features-4.11:

New Features in 4.11
~~~~~~~~~~~~~~~~~~~~

New features of the 4.11 driver release include:

- Support for connecting to MongoDB by using a SOCKS5 proxy.
- Added the ``getSplitEvent()`` method to the ``ChangeStreamDocument`` class
  to identify fragments of a change stream event that exceeds 16MB. You must
  use the aggregation stage ``$changeStreamSplitLargeEvent`` in your change
  stream to handle events that exceed 16MB.
- Added an aggregation stage builder for ``$vectorSearch``.
- Added Atlas Search index management helpers.
- Updated Snappy and Zstd compression library dependency versions. To learn
  more about the current dependency versions, see :ref:`network-compression`.
- Added ``getElapsedTime()`` methods to the following classes to monitor the
  duration of connection pool events:

  - `ConnectionCheckOutFailedEvent <{+api+}/apidocs/mongodb-driver-core/com/mongodb/event/ConnectionCheckOutFailedEvent.html>`__
  - `ConnectionCheckedOutEvent <{+api+}/apidocs/mongodb-driver-core/com/mongodb/event/ConnectionCheckedOutEvent.html>`__
  - `ConnectionReadyEvent <{+api+}/apidocs/mongodb-driver-core/com/mongodb/event/ConnectionReadyEvent.html>`__

- Support for Java 21 virtual threads and structured concurrency. The driver
  internals were updated to avoid unnecessary pinning of virtual threads
  and to preserve interrupted status of a thread, as the latter matters for
  structured concurrency where it is used for cancellation.

  To learn more about virtual threads, see the `Virtual Threads <https://openjdk.org/jeps/444>`__
  JDK enhancement proposal. To learn more about structured concurrency, see the
  `Structured Concurrency <https://openjdk.org/jeps/453>`__
  JDK enhancement proposal.

- Updated API documentation for the following types:

  - `ClusterListener <{+api+}/apidocs/mongodb-driver-core/com/mongodb/event/ClusterListener.html>`__
  - `ServerListener <{+api+}/apidocs/mongodb-driver-core/com/mongodb/event/ServerListener.html>`__
  - `ServerMonitorListener <{+api+}/apidocs/mongodb-driver-core/com/mongodb/event/ServerMonitorListener.html>`__

.. _version-4.10:

What's New in 4.10
------------------

.. important::

   Starting in version 4.10.1 of the {+driver-short+}, you must add
   the ``bson-kotlinx`` library as an explicit dependency to use the
   ``kotlinx-serialization`` library.

- Support for Kotlin server-side usage, both for coroutines and for synchronous applications.
- Codec support for Kotlin data classes.
- Support for the ``kotlinx.serialization`` library
