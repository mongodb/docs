====================
Deploy a Replica Set
====================

.. default-domain:: mongodb

This tutorial describes the process for deploying a three member
:term:`replica set` , with specific instructions for development and
test as well as for production systems.

.. seealso:: ":doc:`/core/replication`" and
   ":doc:`/administration/replication-architectures`" for appropriate
   background.

Overview
--------

Three member replica sets provide enough redundancy to survive most
network partitions and other system failures. Additionally, these sets
have sufficient capacity for many distributed read operations. Most
deployments require no additional nodes or configuration.

Requirements
------------

Three distinct systems, so that each system can run its own instance
of :program:`mongod`. For development systems you may run all three
instances of the :program:`mongod` process on a local system. (e.g. a
laptop) or within a virtual instance. For production environments, you
should endeavor to maintain as much separation between the nodes.  For
example, when using VMs in Production, each node should live on
separate host servers, served by redundant power circuits, and with
redundant network paths.

Procedure
---------

This procedure assumes that you already have instances of MongoDB
installed on all systems that you hope to have as members of your
replica set. If you have not already installed MongoDB, see the
:ref:`installation tutorials <tutorials-installation>`.

Development and Test Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Begin by starting three instances of :program:`mongod`. For ephemeral
tests and the purposes of this guide, you may run the :program:`mongod`
instances in separate windows of GNU Screen. OS X and most Linux
distributions come with screen installed by default [#screen]_
systems.

Issue the following command to create the necessary data directories:

.. code-block:: sh

   mkdir -p /srv/mongodb/rs0-0 /srv/mongodb/rs0-1 /srv/mongodb/rs0-2

Issue the following commands, each in a distinct screen window:

.. code-block:: sh

   mongod --port 27017 --dbpath /srv/mongodb/rs0-0 --replSet rs0
   mongod --port 27018 --dbpath /srv/mongodb/rs0-1 --replSet rs0
   mongod --port 27019 --dbpath /srv/mongodb/rs0-2 --replSet rs0

These command start members of a replica set named ``rs0``, each
running on a distinct port. Alternatively, if you are already using these
ports, you can select different ports. See the documentation of the
following options for more information: :option:`--port <mongod --port>`,
:option:`--dbpath <mongod --dbpath>`, and :option:`--replSet <mongod --replSet>`.

.. note::

   If you're running each :program:`mongod` instance on a distinct
   system, you can omit the :option:`--port <mongod --port>`
   option. You will also need to specify the :option:`--bind_ip
   <mongod --bind_ip>` option.

Connect to the :program:`mongod` instance with the :program:`mongo`
shell to the first host. If you're running this command remotely,
replace "localhost" with the appropriate hostname. In a new shell
session, enter the following:

.. code-block:: sh

   mongo localhost:27017

Issue the following shell function to initiate a replica set
consisting of the current node, using the default configuration:

.. code-block:: javascript

   rs.initiate()

Use the following shell function to display the current :doc:`replica
configuration </reference/replica-configuration>`:

.. code-block:: javascript

   rs.conf()

Now, issue the following sequence of commands to add two nodes to the
replica set.

.. code-block:: javascript

   rs.add("localhost:27018")
   rs.add("localhost:27019")

Congratulations, after these commands return you will have a fully
functional replica set. The new replica set should successfully elect
a :term:`primary` node within a few seconds.

Check the status of your replica set at any time with the
:func:`rs.status()` operation.

See the documentation of the following shell functions for more
information: :func:`rs.initiate()`, :func:`rs.conf()`,
:func:`rs.reconfig()` and :func:`rs.add()`.

.. [#screen] `GNU Screen <http://www.gnu.org/software/screen/>`_ is packaged as
   ``screen`` on Debian-based, Fedira/Red Hat-based, and Arch Linux.

.. seealso:: You may also consider the "`simple setup script
   <https://github.com/mongodb/mongo-snippets/blob/master/replication/simple-setup.py>`_"
   as an example of a basic automatically configured replica set.

Production Replica Set
~~~~~~~~~~~~~~~~~~~~~~

Production replica sets are very similar to the development or testing
deployment described above, with the following differences:

- Each member of the replica set will reside on it's own machine, and
  the MongoDB processes will all bind to port ``27017``, which is the
  standard MongoDB port.

- Specify all run-time configuration in :doc:`configuration files
  </reference/configuration-options>` rather than as :doc:`command
  line options </reference/mongod>`.

- Each member of the replica set needs to be accessible by way of
  resolvable DNS or hostnames in the following scheme:

  - ``mongodb0.example.net``
  - ``mongodb1.example.net``
  - ``mongodb2.example.net``

  Configure DNS names appropriately, *or* set up your systems'
  ``/etc/host`` file to reflect this configuration.

Use the following configuration for each MongoDB instance.

.. code-block:: cfg

   port = 27017

   bind_ip = 10.8.0.10

   dbpath = /srv/mongodb/

   fork = true

   replSet = rs0

Modify the :setting:`bind_ip` to reflect a secure interface on
your system that will be able to access all other members of the set
*and* on which all other members of the replica set can access the
current node. The DNS or host names need to point and resolve to this
IP address. Configure network rules or a virtual private network
(i.e. "VPN") to permit this access.

For more documentation of the run time options used above, see:
:setting:`dbpath`, :setting:`port`, :setting:`replSet`,
:setting:`bind_ip`, and :setting:`fork`. Also consider any additional
:doc:`configuration options </reference/configuration-options>` that
your deployment may require.

Store the configuration file on each system, at ``/etc/mongodb.conf``
or a related location on the file system.

On each system issue the following command to start the
:program:`mongod` process:

.. code-block:: sh

     mongod --config /etc/mongodb.conf

.. note::

   In production deployments you likely want to use and configure a
   :term:`control script` to manage this process based on this
   command. Control scripts are beyond the scope of this document.

Log in with the :program:`mongo` shell to this host using the following
command:

.. code-block:: sh

   mongo

Issue the following shell function to initiate a replica set
consisting of the current node, using the default configuration:

.. code-block:: javascript

   rs.initiate()

Use the following shell function to display the current :doc:`replica
configuration </reference/replica-configuration>`:

.. code-block:: javascript

   rs.config()

Now, issue the following sequence of commands to add two nodes to the
replica set.

.. code-block:: javascript

   rs.add("mongodb1.example.net")
   rs.add("mongodb2.example.net")

Congratulations, after these commands return you will have a fully
functional replica set. New replica sets will elect a :term:`primary`
within a few moments.

.. seealso:: The documentation of the following shell functions for
   more information:

   - :func:`rs.initiate()`,
   - :func:`rs.conf()`,
   - :func:`rs.reconfig()`, and
   - :func:`rs.add()`.
