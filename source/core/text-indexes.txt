==============
``text`` Index
==============

.. default-domain:: mongodb

This document provides details on some of the options available when
creating ``text`` indexes.

Specify a Name for the ``text`` Index
-------------------------------------

The default name for the index consists of each index field name
concatenated with ``_text``. Consider the ``text`` index on the fields
``content``, ``users.comments``, and ``users.profiles``.

.. code-block:: javascript

   db.collection.ensureIndex(
                              {
                                content: "text",
                                "users.comments": "text",
                                "users.profiles": "text"
                              } 
                            )

The default name for the index is:

.. code-block:: javascript

   "content_text_users.comments_text_users.profiles_text"

To avoid creating an index with a name that exceeds the :limit:`index
name length limit <Index Name Length>`, you can pass the ``name``
option to the :method:`db.collection.ensureIndex()` method:

.. code-block:: javascript

   db.collection.ensureIndex(
                              {
                                content: "text",
                                "users.comments": "text",
                                "users.profiles": "text" 
                              },
                              {
                                name: "MyTextIndex"
                              }
                            )

.. note::

   To drop the ``text`` index, use the index name. To get the name of
   an index, use :method:`db.collection.getIndexes()`.

Index All Fields
----------------

To allow for text search on all fields with string content, use the
wildcard specifier (``$**``) to index all fields that contain string
content.  

The following example indexes any string value in the data of every
field of every document in a collection and names it ``TextIndex``:

.. code-block:: javascript

   db.collection.ensureIndex(
                              { "$**": "text" },
                              { name: "TextIndex" }
                            )

.. _text-index-default-language:

Specify Languages for Text Index
--------------------------------

The default language associated with the indexed data determines the
list of stop words and the rules for the stemmer and tokenizer. The
default language for the indexed data is ``english``.

To specify a different language, use the ``default_language`` option
when creating the ``text`` index. See :ref:`text-search-languages` for
the languages available for ``default_language``.

The following example creates a ``text`` index on the
``content`` field and sets the ``default_language`` to
``spanish``:

.. code-block:: javascript

   db.collection.ensureIndex(
                              { content : "text" },
                              { default_language: "spanish" }
                            )

.. seealso::

   :doc:`/tutorial/create-text-index-on-multi-language-collection`

.. _text-index-internals-weights:

Control Results of Text Search with Weights
-------------------------------------------

By default, the :dbcommand:`text` command returns matching documents
based on scores, from highest to lowest. For a ``text`` index, the
*weight* of an indexed field denote the significance of the field
relative to the other indexed fields in terms of the score. The score
calculation for a given word in a document includes the weighted sum of
the frequency for each of the indexed fields in that document.

The default weight is 1 for the indexed fields. To adjust the weights
for the indexed fields, include the ``weights`` option in the
:method:`db.collection.ensureIndex()` method.

.. warning::

   Choose the weights carefully in order to prevent the need to reindex.

A collection ``blog`` has the following documents:

.. code-block:: javascript

   { _id: 1,
     content: "This morning I had a cup of coffee.",
     about: "beverage",
     keywords: [ "coffee" ]
   }

   { _id: 2,
     content: "Who doesn't like cake?",
     about: "food",
     keywords: [ "cake", "food", "dessert" ]
   }

To create a ``text`` index with different field weights for the
``content`` field and the ``keywords`` field, include the ``weights``
option to the :method:`~db.collection.ensureIndex()` method.

.. code-block:: javascript

   db.blog.ensureIndex(
                        { 
                          content: "text",
                          keywords: "text",
                          about: "text"
                        },
                        {
                          weights: {
                                     content: 10,
                                     keywords: 5,
                                   },
                          name: "TextIndex"
                        }
                      )

The ``text`` index has the following fields and weights:

- ``content`` has a weight of 10,

- ``keywords`` has a weight of 5, and

- ``about`` has the default weight of 1.

These weights denote the relative significance of the indexed fields to
each other. For instance, a term match in the ``content`` field has:

- ``2`` times (i.e. ``10:5``) the impact as a term match in the
  ``keywords`` field and

- ``10`` times (i.e. ``10:1``) the impact as a term match in the
  ``about`` field.

Tutorials
---------

The following tutorials offer additional ``text`` index creation
patterns:

- :doc:`/tutorial/create-text-index-on-multi-language-collection`

- :doc:`/tutorial/limit-number-of-items-scanned-for-text-search`

- :doc:`/tutorial/return-text-queries-using-only-text-index`
