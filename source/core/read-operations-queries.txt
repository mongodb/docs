.. index:: read operations; query
.. _read-operations-query-operations:
.. _read-operations-queries:

==========================
Read Operations in MongoDB
==========================

.. default-domain:: mongodb

In the :program:`mongo` shell, the :method:`find()
<db.collection.find()>` and :method:`findOne()
<db.collection.findOne()>` methods perform read operations. The
:method:`find() <db.collection.find()>` method has the following
syntax: [#formal-query-structure]_

.. code-block:: javascript

   db.collection.find( <query>, <projection> )

- The ``db.collection`` object specifies the database and collection
  to query. All queries in MongoDB address a *single* collection.

.. TODO: why would you need to find the name of the current database?

  You can enter ``db`` in the :program:`mongo` shell to return the
  name of the current database. Use the ``show collections`` operation
  in the :program:`mongo` shell to list the current collections in the
  database.

- Find queries in MongoDB are :term:`BSON` objects that use a set of
  :doc:`query operators </reference/operator>` to describe query
  parameters.

  - The ``<query>`` argument of the :method:`find()
    <db.collection.find()>` method holds this query document. A read
    operation without a query document will return all documents in the
    collection.

  - The ``<projection>`` argument describes the result set in the form
    of a document. Projections specify or limit the fields to return.

    Without a projection, the operation will return all fields of the
    documents. Specify a projection if your documents are larger, or
    when your application only needs a subset of available fields.

- The order of documents returned by a query is not defined and is not
  necessarily consistent unless you specify a sort (:method:`sort()
  <cursor.sort()>`).

For example, the following operation on the ``inventory`` collection
selects all documents where the ``type`` field equals ``'food'`` and
the ``price`` field has a value less than ``9.95`` (using the
:operator:`$lt` operator). The projection limits the response to the
``item`` and ``qty``, and ``_id`` field:

.. code-block:: javascript

   db.inventory.find( { type: 'food', price: { $lt: 9.95 } },
                      { item: 1, qty: 1 } )

The :method:`findOne() <db.collection.findOne()>` method is similar to
the :method:`find() <db.collection.find()>` method except the
:method:`findOne() <db.collection.findOne()>` method returns a single
document from a collection rather than a cursor. The method has the
syntax:

.. code-block:: javascript

   db.collection.findOne( <query>, <projection> )

For additional documentation and examples of the main MongoDB read
operators, refer to the :doc:`/core/read` page of the
:doc:`/crud` section.

.. [#formal-query-structure] :method:`db.collection.find()` is a
   wrapper for the more formal query structure with the
   :operator:`$query` operator.

.. _read-operations-query-document:
.. _read-operations-query-argument:

Query Documents
---------------

This section provides an overview of the query document for MongoDB
queries. See the preceding section for more information on
:ref:`queries in MongoDB <read-operations-query-operations>`.

The following examples demonstrate the key properties of the query
document in MongoDB queries, using the :method:`find()
<db.collection.find()>` method from the :program:`mongo` shell, and a
collection of documents named ``inventory``:

- An empty query document (``{}``) selects all documents in the
  collection:

  .. code-block:: javascript

     db.inventory.find( {} )

  Not specifying a query document to the :method:`find()
  <db.collection.find()>` is equivalent to specifying an empty query
  document. Therefore the following operation is equivalent to the
  previous operation:

  .. code-block:: javascript

     db.inventory.find()

- A single-clause query selects all documents in a collection where a
  field has a certain value. These are simple "equality" queries.

  In the following example, the query selects all documents in the
  collection where the ``type`` field has the value ``snacks``:

  .. code-block:: javascript

     db.inventory.find( { type: "snacks" } )

- A single-clause query document can also select all documents in a
  collection given a condition or set of conditions for one field in
  the collection's documents. Use the :ref:`query operators
  <query-selectors>` to specify conditions in a MongoDB query.

  In the following example, the query selects all documents in the
  collection where the value of the ``type`` field is either
  ``'food'`` or ``'snacks'``:

  .. code-block:: javascript

     db.inventory.find( { type: { $in: [ 'food', 'snacks' ] } } )

  .. note::

     Although you can express this query using the :operator:`$or`
     operator, choose the :operator:`$in` operator rather than the
     :operator:`$or` operator when performing equality checks on the
     same field.

- A compound query can specify conditions for more than one field in
  the collection's documents. Implicitly, a logical ``AND`` conjunction
  connects the clauses of a compound query so that the query selects
  the documents in the collection that match all the conditions.

  In the following example, the query document specifies an equality
  match on a single field, followed by a range of values for a second
  field using a :ref:`comparison operator <query-selectors-comparison>`:

  .. code-block:: javascript

     db.inventory.find( { type: 'food', price: { $lt: 9.95 } } )

  This query selects all documents where the ``type`` field has the
  value ``'food'`` **and** the value of the ``price`` field is less
  than (:operator:`$lt`) ``9.95``.

- Using the :operator:`$or` operator, you can specify a compound query
  that joins each clause with a logical ``OR`` conjunction so that the
  query selects the documents in the collection that match at least one
  condition.

  In the following example, the query document selects all documents
  in the collection where the field ``qty`` has a value greater than
  (:operator:`$gt`) ``100`` **or** the value of the ``price``
  field is less than (:operator:`$lt`) ``9.95``:

  .. code-block:: javascript

     db.inventory.find( { $or: [ { qty: { $gt: 100 } },
                                 { price: { $lt: 9.95 } } ]
                        } )

- With additional clauses, you can specify precise conditions for
  matching documents. In the following example, the compound query
  document selects all documents in the collection where the value of
  the ``type`` field is ``'food'`` **and** *either* the ``qty`` has a
  value greater than (:operator:`$gt`) ``100`` *or* the value of
  the ``price`` field is less than (:operator:`$lt`) ``9.95``:

  .. code-block:: javascript

     db.inventory.find( { type: 'food', $or: [ { qty: { $gt: 100 } },
                                               { price: { $lt: 9.95 } } ]
                         } )

.. _read-operations-subdocuments:

Subdocuments
~~~~~~~~~~~~

When the field holds an embedded document (i.e. subdocument), you can
either specify the entire subdocument as the value of a field, or
"reach into" the subdocument using :term:`dot notation`, to specify
values for individual fields in the subdocument:

- Equality matches within subdocuments select documents if the
  subdocument matches *exactly* the specified subdocument, including the
  field order.

  In the following example, the query matches all documents where
  the value of the field ``producer`` is a subdocument that contains
  *only* the field ``company`` with the value ``'ABC123'`` and the field
  ``address`` with the value ``'123 Street'``, in the exact order:

  .. code-block:: javascript

     db.inventory.find( {
                          producer: {
                                      company: 'ABC123',
                                      address: '123 Street'
                                    }
                        }
                      )

- Equality matches for specific fields within subdocuments select
  documents when the field in the subdocument contains a field that
  matches the specified value.

  In the following example, the query uses the :term:`dot notation` to
  match all documents where the value of the field ``producer`` is a
  subdocument that contains a field ``company`` with the value
  ``'ABC123'`` and may contain other fields:

  .. code-block:: javascript

     db.inventory.find( { 'producer.company': 'ABC123' } )

.. _read-operations-arrays:

Arrays
~~~~~~

When the field holds an array, you can query for values in the array,
and if the array holds sub-documents, you query for specific fields
within the sub-documents using :term:`dot notation`:

- Equality matches can specify an entire array, to select an array
  that matches exactly. In the following example, the query matches all
  documents where the value of the field ``tags`` is an array and
  holds three elements, ``'fruit'``, ``'food'``, and ``'citrus'``, in
  this order:

  .. code-block:: javascript

     db.inventory.find( { tags: [ 'fruit', 'food', 'citrus' ] } )

- Equality matches can specify a single element in the array. If the
  array contains at least *one* element with the specified value, as
  in the following example: the query matches all documents where
  the value of the field ``tags`` is an array that contains, as one of
  its elements, the element ``'fruit'``:

  .. code-block:: javascript

     db.inventory.find( { tags: 'fruit' } )

  Equality matches can also select documents by values in an array
  using the array index (i.e. position) of the element in the array,
  as in the following example: the query uses the :term:`dot notation`
  to match all documents where the value of the ``tags`` field is an
  array whose first element equals ``'fruit'``:

  .. code-block:: javascript

     db.inventory.find( { 'tags.0' : 'fruit' } )

In the following examples, consider an array that contains
subdocuments:

- If you know the array index of the subdocument, you can specify the
  document using the subdocument's position.

  The following example selects all documents where the ``memos``
  contains an array whose first element (i.e. index is ``0``) is a
  subdocument with the field ``by`` with the value ``'shipping'``:

  .. code-block:: javascript

     db.inventory.find( { 'memos.0.by': 'shipping' } )

- If you do not know the index position of the subdocument,
  concatenate the name of the field that contains the array, with a
  dot (``.``) and the name of the field in the subdocument.

  The following example selects all documents where the ``memos`` field
  contains an array that contains at least one subdocument with the
  field ``by`` with the value ``'shipping'``:

  .. code-block:: javascript

     db.inventory.find( { 'memos.by': 'shipping' } )

- To match by multiple fields in the subdocument, you can use either
  dot notation or the :operator:`$elemMatch` operator:

  The following example uses dot notation to query for documents
  where the value of the ``memos`` field is an array that has at least
  one subdocument that contains the field ``memo`` equal to ``'on time'``
  and the field ``by`` equal to ``'shipping'``:

  .. code-block:: javascript

     db.inventory.find(
                        {
                          'memos.memo': 'on time',
                          'memos.by': 'shipping'
                        }
                      )

  The following example uses :operator:`$elemMatch` to query for
  documents where the value of the ``memos`` field is an array that
  has at least one subdocument that contains the field ``memo`` equal
  to ``'on time'`` and the field ``by`` equal to ``'shipping'``:

  .. code-block:: javascript

     db.inventory.find( { memos: {
                                   $elemMatch: {
                                                 memo : 'on time',
                                                 by: 'shipping'
                                               }
                                 }
                        }
                      )

Refer to the :doc:`/reference/operator` document for the complete list
of query operators.

.. _read-operations-projection:
.. _projection:

Projections
-----------

The :term:`projection` specification limits the fields to return for
all matching documents. Restricting the fields to return can minimize
network transit costs and the costs of deserializing documents in the
application layer.

The second argument to the :method:`find() <db.collection.find()>`
method is a projection, and it takes the form of a :term:`document` with
a list of fields for inclusion or exclusion from the result set. You
can either specify the fields to include (e.g. ``{ field: 1 }``) or specify the
fields to exclude (e.g. ``{ field: 0 }``). The ``_id`` field is, by
default, included in the result set. To exclude the ``_id`` field from
the result set, you need to specify in the projection document the
exclusion of the ``_id`` field (i.e. ``{ _id: 0 }``).

.. note::

   You cannot combine inclusion and exclusion semantics in a single
   projection with the *exception* of the ``_id`` field.

Consider the following projection specifications in :method:`find()
<db.collection.find()>` operations:

- If you specify no projection, the :method:`find()
  <db.collection.find()>` method returns all fields of all documents
  that match the query.

  .. code-block:: javascript

     db.inventory.find( { type: 'food' } )

  This operation will return all documents in the ``inventory``
  collection where the value of the ``type`` field is ``'food'``.

- A projection can explicitly include several fields. In the following
  operation, :method:`find() <db.collection.find()>` method returns
  all documents that match the query as well as ``item`` and ``qty``
  fields. The results also include the ``_id`` field:

  .. code-block:: javascript

     db.inventory.find( { type: 'food' }, { item: 1, qty: 1 } )

- You can remove the ``_id`` field from the results by specifying its
  exclusion in the projection, as in the following example:

  .. code-block:: javascript

     db.inventory.find( { type: 'food' }, { item: 1, qty: 1, _id:0 } )

  This operation returns all documents that match the query, and
  *only* includes the ``item`` and ``qty`` fields in the result set.

- To exclude a single field or group of fields you can use a
  projection in the following form:

  .. code-block:: javascript

     db.inventory.find( { type: 'food' }, { type:0 } )

  This operation returns all documents where the value of the ``type``
  field is ``food``, but does not include the ``type`` field in the
  output.

  With the exception of the ``_id`` field you cannot combine inclusion
  and exclusion statements in projection documents.

The :projection:`$elemMatch` and :projection:`$slice` projection
operators provide more control when projecting only a portion of an
array.
