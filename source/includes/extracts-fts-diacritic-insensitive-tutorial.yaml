ref: fts-diacritic-insensitive-constant-desc
content: | 
  
  - ``must`` clause to search for movie titles that begin 
    with the term ``alle`` using the :ref:`wildcard-ref` operator
  - ``should`` clause to specify preference for the ``Drama`` genre
    using the :ref:`text-ref` operator

---
ref: fts-diacritic-insensitive-stage
content: | 

  The query uses the :pipeline:`$project` stage to:
  
  - Exclude all fields except ``title`` and ``genres``
  - Add a field named ``score``

---
ref: fts-diacritic-insensitive-results
content: | 

  The first document in the result includes diacritics in the ``title``
  field because the ``diacriticFolder`` custom analyzer we used on the
  ``title`` field applied character folding on its values. |fts| returns
  documents with titles that begin with the query term ``alle`` because we
  used the keyword tokenizer, which tokenizes entire strings (or phrases)
  as a single token.

  Alternatively, you can specify the standard tokenizer instead of the
  keyword tokenizer in the custom analyzer used on the title field. For
  the standard tokenizer, the |fts| results would contain documents with
  titles that begin or appear anywhere at the beginning of the word for
  the query term ``alle`` such as "Desde all√®". To test this, edit your
  :ref:`index definition <diacratic-insensitive-index>` to replace the
  ``keyword`` tokenizer on line 17 with ``standard`` tokenizer, save the
  index definition, and run the sample query.

...
