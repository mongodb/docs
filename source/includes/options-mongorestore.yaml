# This file borrows content from other files, including
# /includes/options-shared.yaml, which uses
# {{program}} to refer to the tool.
#
program: mongorestore
name: help
inherit:
  name: help
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: verbose
inherit:
  name: verbose
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: quiet
inherit:
  name: quiet
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: version
inherit:
  name: version
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: uri
inherit:
  name: uri
  program: _shared
  file: options-shared.yaml
replacement:
  program: ":binary:`~bin.mongorestore`"
---
program: mongorestore
name: host
inherit:
  name: host
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: port
inherit:
  name: port
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: ssl
inherit:
  name: ssl
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: sslCAFile
inherit:
  name: sslCAFile
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: sslPEMKeyFile
inherit:
  name: sslPEMKeyFile
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: sslPEMKeyPassword
inherit:
  name: sslPEMKeyPassword
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: sslCRLFile
inherit:
  name: sslCRLFile
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: sslAllowInvalidCertificates
inherit:
  name: sslAllowInvalidCertificates
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: sslAllowInvalidHostnames
inherit:
  name: sslAllowInvalidHostnames
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: sslFIPSMode
inherit:
  name: sslFIPSMode
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: username
inherit:
  name: username
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: password
inherit:
  name: password
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: authenticationDatabase
inherit:
  name: authenticationDatabase
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: authenticationMechanism
inherit:
  name: authenticationMechanism
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: gssapiServiceName
inherit:
  name: gssapiServiceName
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: gssapiHostName
inherit:
  name: gssapiHostName
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: maintainInsertionOrder
inherit:
  name: maintainInsertionOrder
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: writeConcern
inherit:
  name: writeConcern
  program: _shared
  file: options-shared.yaml
---
program: mongorestore
name: db
aliases: -d
directive: option
args:  <database>
description: |
  Specifies a database for {{program}} to restore data *into*.
  If the database does not exist, {{program}} creates the
  database. If you do not specify a ``<db>``, {{program}}
  creates new databases that correspond to the databases where data
  originated and data may be overwritten. Use this option to restore data
  into a MongoDB instance that already has data.

  {{role}} does *not* control which :term:`BSON` files
  {{program}} restores. You must use the
  {{program}} :ref:`path option <mongorestore-path-option>` to
  limit that restored data.
optional: true
---
program: mongorestore
name: collection
aliases: -c
directive: option
args: <collection>
description: |
  Specifies a single collection for {{program}} to restore. If
  you do not specify {{role}}, {{program}} takes
  the collection name from the input filename. If the input file has an
  extension, MongoDB omits the extension of the file from the collection
  name.
optional: true
---
program: mongorestore
name: objcheck
directive: option
args: null
description: |
  Forces {{program}} to validate all requests from clients
  upon receipt to ensure that clients never insert invalid documents into
  the database. For objects with a high degree of sub-document nesting,
  {{role}} can have a small impact on performance.
optional: true
---
program: mongorestore
name: drop
directive: option
args: null
description: |
  Before restoring the collections from the dumped backup, drops the
  collections from the target database. {{role}} does not drop
  collections that are not in the backup.

  When the restore includes the ``admin`` database, {{program}} with
  {{role}} removes all user credentials and replaces them with the
  users defined in the dump file. Therefore, in systems with
  :setting:`~security.authorization` enabled, {{program}} must be able
  to authenticate to an existing user *and* to a user defined in the
  dump file. If {{program}} can't authenticate to a user defined in the
  dump file, the restoration process will fail, leaving an empty
  database.

optional: true
---
program: mongorestore
name: oplogReplay
directive: option
args: null
description: |
  After restoring the database dump, replays the :term:`oplog` entries
  from a bson file.
  When used in conjunction with :option:`mongodump --oplog`,
  :binary:`~bin.mongorestore --oplogReplay <mongorestore>`
  restores the database to the point-in-time backup captured with the
  ``mongodump --oplog`` command. 
  
  {{program}} searches for any valid source  for the bson file
  in the following locations:

  - The top level of the dump directory, as in the case of a dump created
    with :option:`mongodump --oplog`.

  - The path specified by :option:`--oplogFile`.

  - ``<dump-directory>/local/oplog.rs.bson``, as in the case of a dump
    of the ``oplog.rs`` collection in the ``local`` database
    on a :binary:`~bin.mongod` that is a member of a replica set.

  If there is an ``oplog.bson`` file at the top level of the dump
  directory **and** a path specified by :option:`--oplogFile`,
  {{program}} returns an error.
     
  If there is an ``oplog.bson`` file at the top level of the dump directory,
  {{program}} restores that file as the oplog. If there are also bson
  files in the ``dump/local`` directory, {{program}} restores them like
  normal collections.
  
  If you specify an oplog file using :option:`--oplogFile`,
  {{program}} restores that file as the oplog. If there are also bson
  files in the ``dump/local`` directory, {{program}} restores them like
  normal collections.
  
  For an example of {{role}}, see :ref:`backup-restore-oplogreplay`.

  .. note::

     When using :binary:`~bin.mongorestore` with {{role}} to restore
     a replica set, you must 
     restore a full dump of a :term:`replica set` member created 
     using :binary:`~bin.mongodump --oplog <mongodump>`. 
     :binary:`~bin.mongorestore` with {{role}} fails if you use any of 
     the following options to limit the data be restored:

     - :option:`--db`
     - :option:`--collection`
     - :option:`--nsInclude`
     - :option:`--nsExclude`

  .. seealso:: :ref:`mongorestore Required Access <mongorestore-required-access>`

  .. seealso:: :option:`mongodump --oplog`

optional: true
---
program: mongorestore
name: oplogLimit
directive: option
args: <timestamp>
description: |
  Prevents {{program}} from applying :term:`oplog` entries
  with timestamp newer than or equal to ``<timestamp>``. Specify
  ``<timestamp>`` values in the form of ``<time_t>:<ordinal>``, where
  ``<time_t>`` is the seconds since the UNIX epoch, and ``<ordinal>``
  represents a counter of operations in the oplog that occurred in the
  specified second.

  You must use {{role}} in conjunction with the
  :option:`--oplogReplay` option.
optional: true
---
program: mongorestore
name: keepIndexVersion
directive: option
args: null
description: |
  Prevents {{program}} from upgrading the index to the latest
  version during the restoration process.
optional: true
---
program: mongorestore
name: noIndexRestore
directive: option
args: null
description: |
  Prevents {{program}} from restoring and building indexes as
  specified in the corresponding :binary:`~bin.mongodump` output.
optional: true
---
program: mongorestore
name: noOptionsRestore
directive: option
args: null
description: |
  Prevents {{program}} from setting the collection options,
  such as those specified by the :dbcommand:`collMod` :term:`database
  command`, on restored collections.
optional: true
---
program: mongorestore
name: restoreDbUsersAndRoles
directive: option
args: null
description: |
  Restore user and role definitions for the given database. See
  :doc:`/reference/system-roles-collection` and
  :doc:`/reference/system-users-collection` for more information.
optional: true
---
program: mongorestore
name: <path>
directive: option
args: null
description: |
  The final argument of the {{program}} command is a
  directory path. This argument specifies the location of the
  database dump from which to restore.

  You cannot specify both the ``<path>`` argument and the ``--dir``
  option, which also specifies the dump directory, to {{program}}.

optional: true
---
program: mongorestore
name: dir
directive: option
args: string
description: |
  Specifies the dump directory.

  - You cannot specify both the ``--dir`` option and the ``<path>``
    argument, which also specifies the dump directory, to {{program}}.

  - You cannot use the ``--archive`` option with the ``--dir`` option.

optional: true
---
program: mongorestore
name: numInsertionWorkersPerCollection
inherit:
  name: numInsertionWorkers
  program: mongoimport
  file: options-mongoimport.yaml
description: |
  .. versionadded:: 3.0.0

  Specifies the number of insertion workers to run concurrently per collection.
default: 1
---
program: mongorestore
name: numParallelCollections
inherit:
  name: numParallelCollections
  program: _shared
  file: options-shared.yaml
post: |
  If you specify ``-j`` when restoring a *single* collection, ``-j``
  maps to the :option:`--numInsertionWorkersPerCollection` option rather than
  {{role}}.
replacement:
  verb: restore
---
program: mongorestore
name: stopOnError
directive: option
args: null
description: |
  .. versionadded:: 3.0

  Forces {{program}} to halt the restore when it encounters an
  error.
optional: true
---
program: mongorestore
name: archive
directive: option
args: <=file|null>
description: |
  .. versionadded:: 3.2

  Restores from an archive file or from the standard input (``stdin``).

  To restore from an archive file, run {{program}} with the ``--archive``
  option and the archive filename.

  To restore from the standard input, run {{program}} with the
  ``--archive`` option but *omit* the filename.

  .. note::

     - You cannot use the ``--archive`` option with the ``--dir`` option.

     - {{program}} still supports the positional ``-`` parameter to
       restore a *single* collection from the standard input.

optional: true
---
program: mongorestore
name: gzip
directive: option
args: null
description: |
  .. versionadded:: 3.2

  Restores from compressed files or data stream created by
  :binary:`~bin.mongodump --archive <mongodump>`

  To restore from a dump directory that contains compressed files, run
  :binary:`~bin.mongorestore` with the new ``--gzip`` option.

  To restore from a compressed archive file, run :binary:`~bin.mongorestore` with
  the ``--gzip`` option in conjunction with the ``--archive`` option.
optional: true
---
program: mongorestore
name: bypassDocumentValidation
inherit:
  name: bypassDocumentValidation
  program: _shared
  file: options-shared.yaml
replacement:
  verb: "insert"
---
program: mongorestore
name: nsExclude
directive: option
args: <namespace pattern>
pre: |
  .. versionadded:: 3.4

description: |
  Excludes the specified :term:`namespaces <namespace>` from the
  restore operation.
post: |
  .. include:: /includes/extracts/ns-pattern-simple-exclude.rst
optional: true
---
program: mongorestore
name: nsInclude
directive: option
args: <namespace pattern>
pre: |
  .. versionadded:: 3.4

description: |
  Includes only the specified :term:`namespaces <namespace>` in the
  restore operation.
  By enabling you to specify multiple collections to restore,
  {{role}} offers a superset of the functionality of the
  :option:`--collection` option.
optional: true
post: |
  .. include:: /includes/extracts/ns-pattern-simple-include.rst
---
program: mongorestore
name: nsFrom
directive: option
args: <namespace pattern>
pre: |
  .. versionadded:: 3.4

description: |
  Use with :option:`--nsTo` to rename a :term:`namespace` during the
  restore operation. {{role}} specifies the collection in the
  dump file, while :option:`--nsTo` specifies the name that should be
  used in the restored database.
optional: true
post: |
  .. include:: /includes/extracts/ns-pattern-complex-from.rst
---
program: mongorestore
name: nsTo
directive: option
args: <namespace pattern>
pre: |
  .. versionadded:: 3.4

description: |
  Use with :option:`--nsFrom` to rename a :term:`namespace` during the
  restore operation. {{role}} specifies the new collection
  name to use in the restored database, while
  :option:`--nsFrom` specifies the name in the dump file.
optional: true
post: |
  .. include:: /includes/extracts/ns-pattern-complex-to.rst
---
program: mongorestore
name: oplogFile
directive: option
args: <path>
pre: |
  .. versionadded:: 3.4

description: |
  Specifies the path to the oplog file containing oplog data for the
  restore. Use with :option:`--oplogReplay`. 
  
  If you specify {{role}} and there is an :file:`oplog.bson`
  file at the top level of the dump directory, {{program}} returns an 
  error.
optional: true
---
program: mongorestore
name: dryRun
directive: option
args: null
pre: |
  .. versionadded:: 3.4

description: |
  Runs {{program}} without actually importing any data, returning the
  {{program}} summary information. Use with ``--verbose`` to produce
  more detailed summary information.
optional: true
...
