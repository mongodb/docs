.. meta::
   :robots: nosnippet

.. _deploy:

=====================
Develop & Deploy Apps
=====================

.. toctree::
   :titlesonly:
   :caption: Manage & Deploy Apps
   :hidden:

   Get App Metadata </apps/metadata>
   Update an App </apps/update>
   Copy an App </apps/copy>
   Delete an App </apps/delete>
   Roll Back a Deployment </apps/rollback>
   Export an App </apps/export>
   Configure an App Environment </apps/environment>
   Set Up a CI/CD Pipeline </apps/cicd>
   Change Deployment Models </apps/change-deployment-models>
   Deployment Models & Regions </apps/deployment-models-and-regions>

.. contents:: On this page
   :depth: 2

Overview
--------

What is an App Services App?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An App Services App is a collection of managed services that run your
application's backend operations on MongoDB Atlas. You configure the
App's services using declarative configuration files and write
JavaScript code to implement custom behavior.

An App sits between your application's frontend client and your data
stored in MongoDB Atlas. Apps have built-in tools for modeling and
working with data in Atlas, including role-based access permissions and
document schema validation. You can use these to power services like
:ref:`Device Sync <sync>`, :ref:`Triggers <triggers>`, and the
:ref:`Data API <data-api>`.

To learn how to create an App, see :ref:`Create an App <create-app>`.

How are Apps Deployed?
~~~~~~~~~~~~~~~~~~~~~~

Apps use a "serverless" architecture, which means that you as the
developer don't directly manage or think about the servers that run your
App. Instead, you deploy your App to a one or more cloud regions around
the world. Your services run on-demand on servers in
that region managed by MongoDB Atlas.

To learn more, see :ref:`Deployment Models & Regions <deployment-model>`.

App Administration Tools
------------------------

App Services includes several tools that you can use to create,
configure, and deploy Apps. You can accomplish most administration tasks
using any of these tools, so choose the tool that best suits your
development workflow.

The following administration tools are available:

- **App Services UI**: A browser-based GUI that's available within MongoDB
  Atlas. You can use it to develop and manage your Apps with rich
  editors and forms.

- **App Services CLI**: A command-line interface that you can access from a
  terminal or shell script. The CLI lets you work directly with your
  App's configuration files in a local environment or CI/CD pipeline.

- **App Services Admin API**: A REST-ful API that you can access using
  any standard HTTPS client. You can use the Admin API to integrate App
  Services with automation tools like CI/CD pipelines.

.. tip::

   Many pages in this documentation include tabs that let you choose a
   specific admin tool. Make sure to look out for these tabs and to
   choose your preferred tool.

Automate Deployment
-------------------

You can use the App Services admin tools on an ad hoc basis to manually
develop and deploy changes. Alternatively, you can automate the
deployment process. This is particularly useful for Apps with testing
and staging environments or that are developed by teams.

There are two approaches to automatic deployment:

- **App Services GitHub Integration**: The built-in GitHub integration
  lets you link your App to a GitHub repository and automatically syncs
  your deployed App with configuration files stored in the repo. To
  learn more, see :ref:`Deploy Automatically with GitHub
  <deploy-github>`.

- **Custom Automation Workflows**: You can create, modify, and delete
  Apps in your own CI/CD pipelines using a code-first admin tool like
  the App Services CLI or Admin API. To learn more, see :ref:`Set Up a
  CI/CD Pipeline <ci-cd-pipeline>`.

.. _deployment-history:

Deployment History
------------------

App Services logs every deployment of an application and stores a list
of the {+deployment-history-size+} most recent deployments. You can
:ref:`export <export-app>` or :ref:`rollback <rollback-deployments>` to
any version stored in the deployment history.

You can access the deployment history for an App from the
:guilabel:`Deployment` screen in the App Services UI or by calling the
:admin-api-endpoint:`List recent deployments
<operation/adminListDeployments>` Admin API endpoint.

.. figure:: /images/deployment-history-table.png
   :alt: The table of application deployment history logs in the App Services UI
