.. _conf-mms.properties:

======================
|onprem| Configuration
======================

.. default-domain:: mongodb

Overview
--------

|onprem| stores configuration settings both globally in the |application|
Database and locally on each server. Global settings apply to all your
|onprem| servers. Local settings apply to the server on which they are
configured. Any local settings on a server override the global settings.

You configure global settings through the |onprem| interface during
installation. You can edit global settings at any time through the
:guilabel:`Admin` interfaces's :guilabel:`General` > :guilabel:`Ops
Manager Config` page.

You configure local settings through a server's ``conf-mms.properties``
file. Each server's ``conf-mms.properties`` must contain the connection
string and authentication settings for accessing the |onprem| Application
Database. The ``conf-mms.properties`` file also contains any overrides of
global settings specific to that server.

The location of the ``conf-mms.properties`` file depends on how you
installed |onprem|, as described in the table below.

.. list-table::
   :widths: 35 65
   :header-rows: 1

   * - Install method

     - conf-mms.properties location

   * - ``rpm`` or ``deb`` package

     - ``/opt/mongodb/mms/conf/``

   * - ``tar.gz`` archive

     - ``<install-directory>/conf/``

   * - ``msi`` file (Windows)

     - ``<install-folder>\Server\Config``

       By default, this is: ``C:\MMSData\Server\Config``.

Web Server Settings
-------------------

Configure global settings through the :guilabel:`Admin` interface.
|onprem| stores global settings in the |application| database.

.. setting:: mms.centralUrl

   *Field Name*: :guilabel:`URL to Access Ops Manager`

   *Type*: string

   The fully qualified URL and port number of the |application|. For
   example:

   .. code-block:: ini

      mms.centralUrl=http://mms.example.com:8080

   To use a port other than ``8080``, see :doc:`/tutorial/manage-ports`.

.. setting:: mms.https.PEMKeyFile

   *Field Name*: :guilabel:`HTTPS PEM Key File`

   *Type*: string

   Absolute path to the PEM file that contains the |application|'s valid
   certificate and private key. The PEM file is required if the
   |application| will use HTTPS to encrypt connections between the
   |application|, the agents, and the web interface.

   The default port for HTTPS access to the |application| is ``8443``, as
   set in ``<install_dir>/conf/mms.conf`` file. If you change this
   default, you must also change the port specified in the
   :setting:`mms.centralUrl` setting.

.. setting:: mms.https.PEMKeyFilePassword

   *Field Name*: :guilabel:`HTTPS PEM Key File Password`

   *Type*: string

   The password for the HTTPS PEM key file. This is required if the PEM
   file contains an encrypted private key. If storing this in the
   :ref:`conf-mms.properties <conf-mms.properties>` file, you can encrypt
   the password using the |onprem| ``credentialstool``. See
   :ref:`encrypt-mongodb-user-credentials`.

.. setting:: mms.remoteIp.header

   *Field Name*: :guilabel:`Load Balancer Remote IP Header`

   *Type*: string

   If you use a load balancer with the |application|, use this setting to
   specify the name of the header that the load balancer will use to
   specify the original client's IP address to the application server.

   See :doc:`/tutorial/configure-application-high-availability` for
   more information.

   When you specify :setting:`mms.remoteIp.header`, do not allow
   clients to connect directly to any application server.

.. _email-address-settings:

Email Settings
--------------

The following email address settings are mandatory. You **must** define
them before |onprem| will start.

.. setting:: mms.fromEmailAddr

   *Field Name*: :guilabel:`"From" Email Address`

   *Type*: string

   The email address used for sending the general emails,
   such as |mms| alerts. You can include an alias with the email address.
   For example:

   .. code-block:: ini

      mms.fromEmailAddr=|mms| Alerts <mms-alerts@example.com>

.. setting:: mms.replyToEmailAddr

   *Field Name*: :guilabel:`"Reply To" Email Address`

   *Type*: string

   The email address to send replies to general emails. For
   example:

   .. code-block:: ini

      mms.replyToEmailAddr=mms-no-reply@example.com

.. setting:: mms.adminEmailAddr

   *Field Name*: :guilabel:`Admin Email Address`

   *Type*: string

   The email address to send messages or replies to the |mms|
   admin. You can include an alias with the email address. For example:

   .. code-block:: ini

      mms.adminEmailAddr=mms-admin@example.com

.. setting:: mms.adminFromEmailAddr

   *Type*: string

   The email address to send messages from the |mms| admin. You
   can include an alias with the email address. For example:

   .. code-block:: ini

      mms.adminFromEmailAddr=|mms| Admin <mms-admin@example.com>

.. setting:: mms.bounceEmailAddr

   *Type*: string

   The email address to send bounce messages, i.e. messages
   of non-delivery of alerts or messages from |mms| admin. For example:

   .. code-block:: ini

      mms.bounceEmailAddr=bounce@example.com

.. setting:: mms.emailDaoClass

   *Field Name*: :guilabel:`Email Delivery Method Configuration`

   *Type*: string

   The email interface to use. For AWS Simple Email Service,
   specify ``com.xgen.svc.core.dao.email.AwsEmailDao``, as in:

   .. code-block:: ini

      mms.emailDaoClass=com.xgen.svc.core.dao.email.AwsEmailDao

   For AWS Simple Email Service, see also :setting:`aws.accesskey` and
   :setting:`aws.secretkey`.

   For JavaEmailDao, specify
   ``com.xgen.svc.core.dao.email.JavaEmailDao``, as in:

   .. code-block:: ini

      mms.emailDaoClass=com.xgen.svc.core.dao.email.JavaEmailDao

.. setting:: mms.mail.transport

   *Field Name*: :guilabel:`Transport`

   *Type*: string

   *Default*: smtp

   Transfer protocol ``smtp`` or ``smtps`` as specified by your email
   provider. For example:

   .. code-block:: ini

      mms.mail.transport=smtp

.. setting:: mms.mail.hostname

   *Field Name*: :guilabel:`SMTP Server Hostname`

   *Type*: string

   *Default*: localhost

   Email hostname as specified by your email provider. For example:

   .. code-block:: ini

      mms.mail.hostname=mail.example.com

.. setting:: mms.mail.port

   *Field Name*: :guilabel:`SMTP Server Port`

   *Type*: number

   *Default*: 25

   Port number for the transfer protocol as specified by your email
   provider. For example:

   .. code-block:: ini

      mms.mail.port=25

.. setting:: mms.mail.username

   *Field Name*: :guilabel:`Username`

   *Type*: string

   User name of the email account. If unset, defaults to disabled SMTP
   authentication.

   .. code-block:: ini

       mms.mail.username=

.. setting:: mms.mail.password

   *Field Name*: :guilabel:`Password`

   *Type*: string

   Password for the email account. If unset, defaults to disabled SMTP
   authentication.

   .. code-block:: ini

      mms.mail.password=emailPassword

.. setting:: mms.mail.tls

   *Field Name*: :guilabel:`Use SSL`

   *Type*: boolean

   *Default*: false

   Indicator of whether the transfer protocol runs on top of TLS. For
   example:

   .. code-block:: ini

      mms.mail.tls=false

.. setting:: aws.accesskey

   *Field Name*: :guilabel:`AWS Access Key`

   *Type*: string

   Required if using AWS Simple Email Service. The access key ID for AWS.

   .. code-block:: ini

      aws.accesskey=EXAMPLEAccessKeyID

.. setting:: aws.secretkey

   *Field Name*: :guilabel:`AWS Secret Key`

   *Type*: string

   Required if using AWS Simple Email Service. The secret access key
   for AWS.

   .. code-block:: ini

      aws.secretkey=eXampLe/aCcESs/KEY

User Authentication Method
--------------------------

.. setting:: mms.userSvcClass

   *Field Name*: :guilabel:`User Authentication Method`

   *Type*: string

   Select whether to store authentication credentials in the |onprem|
   Application Database or in an external authentication source.

   .. COMMENT / QUESTION: Or is this:

      The LDAP service class ``com.xgen.svc.mms.svc.user.UserSvcLdap``; i.e.

      .. code-block:: ini

         mms.userSvcClass=com.xgen.svc.mms.svc.user.UserSvcLdap

Authentication through |onprem| Application Database
----------------------------------------------------

.. setting:: mms.password.minChangesBeforeReuse

   *Field Name*: :guilabel:`Password Changes Before Reuse`

   *Type*: number

   The number of previous passwords to remember. You cannot reuse a
   remembered password as a new password.

.. setting:: mms.password.maxFailedAttemptsBeforeAccountLock

   *Field Name*: :guilabel:`Password Failed Attempts Before Account Lock`

   *Type*: number

   The number of failed login attempts before an account becomes
   locked. Only an |a-mms| Administrator can unlock a locked account.

.. setting:: mms.password.maxDaysInactiveBeforeAccountLock

   *Field Name*: :guilabel:`Password Days Inactive Before Account Lock`

   *Type*: number

   The maximum number of days with no visits to the |mms| website before
   |mms| locks an account.

.. setting:: mms.password.maxDaysBeforeChangeRequired

   *Field Name*: :guilabel:`Password Days Before Change Required`

   *Type*: number

   The number of days a password is valid before the password expires.

.. _ldap-settings:
.. _ldap-user-settings:
.. _default-ldap-separator:
.. _ldap-global-role-settings:

Authentication through LDAP
---------------------------

These settings configure |mms| to use an LDAP server for authentication. If you
use LDAP authentication, users must belong to an LDAP group to log into |mms|.
You must create LDAP groups for each |mms| :doc:`user role
</reference/user-roles>`.

*Settings that begin with "mms.ldap.global.role"* assign |mms|
:ref:`global roles <global-roles>` to the members of
the specified LDAP groups. Specify groups using the format used by the LDAP
attribute specified in the :setting:`mms.ldap.user.group` setting. You can
specify multiple groups using the ``;;`` delimiter. To change the default
delimiter, use the :setting:`mms.ldap.group.separator` setting.
Each |mms| global role provides its level of access to all the |mms| :doc:`groups
</tutorial/create-group>` in the deployment. To provide access to specific
groups, use :doc:`group-level roles </reference/user-roles>`.

.. setting:: mms.ldap.url

   *Field Name*: :guilabel:`LDAP URI`

   *Type*: string

   The URI for the LDAP or SSL LDAP server.  For example:

   .. code-block:: ini

      mms.ldap.url=ldaps://acme-dc1.acme.example.net:3890

.. setting:: mms.ldap.ssl.CAFile

   *Field Name*: :guilabel:`LDAP SSL CA File`

   *Type*: string

   A file containing one or more trusted certificates in PEM format.
   Use :setting:`mms.ldap.ssl.CAFile` if you are using LDAPS and the server
   is using a certificate that is not from a well-known CA. For example:

   .. code-block:: ini

      mms.ldap.ssl.CAFile=/opt/CA.pem

.. setting:: mms.ldap.ssl.PEMKeyFile

   *Field Name*: :guilabel:`LDAP SSL PEM Key File`

   *Type*: string

   A file containing a client certificate and private key.
   Use :setting:`mms.ldap.ssl.PEMKeyFile` when your SSL LDAP server
   requires client certificates.

.. setting:: mms.ldap.ssl.PEMKeyFilePassword

   *Field Name*: :guilabel:`LDAP SSL PEM Key File Password`

   *Type*: string

   The password for :setting:`mms.ldap.ssl.PEMKeyFile`. Use
   :setting:`mms.ldap.ssl.PEMKeyFilePassword` if the ``PEMKeyFile``
   is encrypted.

.. setting:: mms.ldap.bindDn

   *Field Name*: :guilabel:`LDAP Bind Dn`

   *Type*: string

   The LDAP user used to execute searches for other users. For example:

   .. code-block:: ini

      mms.ldap.bindDn=authUser@acme.example.net

.. setting:: mms.ldap.bindPassword

   *Field Name*: :guilabel:`LDAP Bind Password`

   *Type*: string

   The credentials for the search user. For example:

   .. code-block:: ini

      mms.ldap.bindPassword=<user-password>

.. setting:: mms.ldap.user.baseDn

   *Field Name*: :guilabel:`LDAP User Base Dn`

   *Type*: string

   The base Distinguished Name (DN) that |mms| uses to search for users. Escape
   the ``=`` sign with ``\``. For example:

   .. code-block:: ini

      mms.ldap.user.baseDn=DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.user.searchAttribute

   *Field Name*: :guilabel:`LDAP User Search Attribute`

   *Type*: string

   The LDAP field used for the LDAP search. This is typically a username
   or email address.

   The value of this field is also used as the |mms| username.

   Example:

   .. code-block:: ini

      mms.ldap.user.searchAttribute=mail

.. setting:: mms.ldap.user.group

   *Field Name*: :guilabel:`LDAP User Group`

   *Type*: string

   The LDAP user attribute that contains the list of LDAP groups the user
   belongs to. The LDAP attribute can use any format to list the groups,
   including Common Name (``cn``) or Distinguished Name (``dn``). All |mms|
   settings in this configuration file that specify groups must match the
   chosen format.

   Example:

   .. code-block:: ini

      mms.ldap.user.group=memberOf

.. setting:: mms.ldap.global.role.owner

   *Field Name*: :guilabel:`LDAP Global Role Owner`

   *Type*: string

   The LDAP group that has full privileges for the |mms| deployment, including
   full access to all |mms| :doc:`groups </tutorial/create-group>` and all
   administrative permissions. Users in the specified LDAP group receive the
   :ref:`global owner <global-owner-role>` role in |mms|. Specify the group
   using the format that is used by the LDAP attribute specified in the
   :setting:`mms.ldap.user.group` setting.

   .. COMMENT/QUESTION: Should the LDAP examples use ;; as the delimiter?

   Example:

   .. code-block:: ini

      mms.ldap.global.role.owner=CN\=MMSGlobalOwner,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.user.firstName

   *Field Name*: :guilabel:`LDAP User First Name`

   *Type*: string

   The LDAP user attribute that contains the user's first name. After
   successful LDAP authentication, |mms| synchronizes the specified LDAP
   attribute with the first name from the |mms| user record.

   For example:

   .. code-block:: ini

      mms.ldap.user.firstName=givenName

.. setting:: mms.ldap.user.lastName

   *Field Name*: :guilabel:`LDAP User Last Name`

   *Type*: string

   The LDAP user attribute that contains the user's last name. After
   successful LDAP authentication, |mms| synchronizes the specified LDAP
   attribute with the last name from the |mms| user record.

   For example:

   .. code-block:: ini

      mms.ldap.user.lastName=sn

.. setting:: mms.ldap.user.email

   *Field Name*: :guilabel:`LDAP User Email`

   *Type*: string

   The LDAP user attribute that contains the user's email address. After
   successful LDAP authentication, |mms| synchronizes the specified LDAP
   attribute with the email address from the |mms| user record.

   For example:

   .. code-block:: ini

      mms.ldap.user.email=mail

.. setting:: mms.ldap.global.role.backupAdmin

   *Field Name*: :guilabel:`LDAP Global Role Backup Admin`

   *Type*: string

   The LDAP group whose members have the :ref:`global backup admin role
   <global-backup-admin-role>` in |mms|. For example:

   .. code-block:: ini

      mms.ldap.global.role.backupAdmin=CN\=MMS-BackupAdmin,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.global.role.monitoringAdmin

   *Field Name*: :guilabel:`LDAP Global Role Monitoring Admin`

   *Type*: string

   The LDAP group whose members have the :ref:`global monitoring admin
   role <global-monitoring-admin-role>` in |mms|. For example:

   .. code-block:: ini

      mms.ldap.global.role.monitoringAdmin=CN\=MMS-MonitoringAdmin,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.global.role.userAdmin

   *Field Name*: :guilabel:`LDAP Global Role User Admin`

   *Type*: string

   The LDAP group whose members have the :ref:`global user admin role
   <global-user-admin-role>` in |mms|. For example:

   .. code-block:: ini

      mms.ldap.global.role.userAdmin=CN\=MMS-UserAdmin,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.global.role.readOnly

   *Field Name*: :guilabel:`LDAP Global Role Read Only`

   *Type*: string

   The LDAP group whose members have the :ref:`global read-only role
   <global-read-only-role>` in |mms|. For example:

   .. code-block:: ini

      mms.ldap.global.role.readOnly=CN\=MMS-ReadOnly,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.global.role.automationAdmin

   *Type*: string

   The LDAP group whose members have the :ref:`global automation admin
   role <global-automation-admin-role>` in |mms|. Specify groups using the
   format used by the LDAP attribute specified in the
   :setting:`mms.ldap.user.group` setting. You can specify multiple groups
   using the ``;;`` delimiter. To change the default delimiter, use the
   :setting:`mms.ldap.group.separator` setting.

   For example:

   .. code-block:: ini

      mms.ldap.global.role.automationAdmin=CN\=MMS-AutomationAdmin,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

   Each |mms| global role provides its level of access to all the |mms|
   :doc:`groups </tutorial/create-group>` in the deployment. To provide
   access to specific groups, use :ref:`group-level roles <global-roles>`.

.. setting:: mms.ldap.group.separator

   *Type*: string

   Each of the global role values can take a delimited list of groups: for
   example ``"dbas,sysadmins"``.

   If a group value contains the delimiter, the
   delimiter must be set to another value. For example, if you
   have the group value ``"CN\=foo,DN\=bar"`` and the delimiter is ``,`` then
   |mms| parses ``"CN\=foo,DN\=bar"`` as two elements rather than as the
   description for a single group. Change the delimiter by adding the
   :setting:`mms.ldap.group.separator` setting to the configuration file
   and specifying a different delimiter.

   Starting with |mms| 1.5, the default delimiter is ``;;``.

Multi-Factor Authentication (MFA) Settings
------------------------------------------

.. setting:: mms.multiFactorAuth.level

   *Field Name*: :guilabel:`Multi-factor Auth Level`

   *Type*: string

   *Default*: OFF

   Configures the :doc:`two-factor authentication </tutorial/manage-two-factor-authentication>` "level":

   - ``OFF``: Disables two-factor authentication. When
     :setting:`mms.multiFactorAuth.level` ``= 'OFF'``, |onprem| does not
     use two-factor authentication.

   - ``OPTIONAL``: Users can choose to set up two-factor authentication
     for their |onprem| account.

   - ``REQUIRED_FOR_GLOBAL_ROLES``: Users who possess a :ref:`global role <global-roles>`
     **must** set up two-factor authentication. Two factor authentication is
     optional for all other users.

   - ``REQUIRED``: **All** users must set up two-factor authentication for
     their |onprem| account.

   Two-factor authentication is recommended for the security of your
   |onprem| deployment.

.. setting:: mms.multiFactorAuth.require

   In |onprem| 1.8 and later, :setting:`mms.multiFactorAuth.level`
   replaces :setting:`mms.multiFactorAuth.require`.

   *Type*: boolean

   *Default*: false

   When ``true``, |mms| will require two-factor authentication for
   users to log in or to perform certain destructive operations within the
   application.

   If you configure :ref:`Twilio integration <twilio-sms-alert-settings>`,
   users may obtain their second factor tokens via Google Authenticator, SMS,
   or voice calls. Otherwise, the only mechanism to provide two-factor authentication is
   Google Authenticator.

.. setting:: mms.multiFactorAuth.allowReset

   *Field Name*: :guilabel:`Multi-factor Auth Allow Reset`

   *Type*: boolean

   *Default*: false

   When ``true``, |mms| will allow users to reset their two-factor
   authentication settings via email in an analogous fashion to resetting their
   passwords.

   To reset two-factor authentication, a user must:

   - be able to receive email at the address associated with the user account
   - know the user account's password
   - know the Agent API key for any |mms| Group of which the user is a member

.. setting:: mms.multiFactorAuth.issuer

   *Field Name*: :guilabel:`Multi-factor Auth Issuer`

   *Type*: string

   If Google Authenticator provides two-factor authentication, this
   string is the ``issuer`` in the Google Authenticator app. If
   left blank, the ``issuer`` is the domain name of the |mms|
   installation.

Other Authentication Options
----------------------------

.. setting:: reCaptcha.enabled

   *Field Name*: :guilabel:`ReCaptcha Enabled`

   *Type*: boolean

   Set to ``true`` to require `reCaptcha
   <https://www.google.com/recaptcha>`_ validation when a new user
   registers. You must have a `reCaptcha account
   <https://www.google.com/recaptcha/admin>`_.

.. setting:: reCaptcha.public.key

   *Field Name*: :guilabel:`ReCaptcha Public Key`

   *Type*: string

   The reCaptcha public key associated with your account.

.. setting:: reCaptcha.private.key

   *Field Name*: :guilabel:`ReCaptcha Private Key`

   *Type*: string

   The reCaptcha private key associated with your account.

.. setting:: mms.session.maxHours

   *Type*: number

   The number of hours before a session on the |mms| website expires.

   *Field Name*: :guilabel:`Session Max Hours`

.. setting:: mms.monitoring.agent.session.timeoutMillis

   .. versionadded 1.5.4, 1.6.1

   *Type*: number

   *Default*: 300000

   *Minimum*: 90000

   The Monitoring Agent failover time, in milliseconds. If |mms| does not
   receive a deployment status from the primary Monitoring Agent in the
   time specified, |mms| will make a standby Monitoring Agent the new
   primary. Configuring the timeout below `90000` (90 seconds) will cause
   |mms| to fail at startup with a configuration error.

HTTP/HTTPS Proxy Settings
-------------------------

|mms| can pass all outgoing HTTP and HTTPS requests through an HTTP
or HTTPS proxy.

.. setting:: http.proxy.host

   *Field Name*: :guilabel:`Proxy Host`

   *Type*: string

   Specify the hostname of the HTTP or HTTPS proxy to which you wish to connect.
   For example:

   .. code-block:: ini

      http.proxy.host=proxy.example.com

.. setting:: http.proxy.port

   *Field Name*: :guilabel:`Proxy Port`

   *Type*: integer

   Specify the port on which you wish to connect to the host. You must
   specify both :setting:`http.proxy.port` and :setting:`http.proxy.host`
   to use a proxy.

   .. code-block:: ini

      http.proxy.host=8080

.. setting:: http.proxy.username

   *Field Name*: :guilabel:`Proxy Username`

   *Type*: string

   If the proxy requires authentication, use :setting:`http.proxy.username`
   to specify the username with which to connect to the proxy.

   .. code-block:: ini

      http.proxy.username=proxyusername

.. setting:: http.proxy.password

   *Field Name*: :guilabel:`Proxy Password`

   *Type*: string

   If the proxy requires authentication, use :setting:`http.proxy.password`
   to specify the password with which to connect to the proxy.

   .. code-block:: ini

      http.proxy.password=cDZRJAb2tsb6BE

.. _twilio-sms-configure:
.. _twilio-sms-alert-settings:

Twilio Integration Settings
---------------------------

To receive alert notifications via SMS, you must have a `Twilio
<http://www.twilio.com/docs/quickstart>`_ account.

.. setting:: twilio.account.sid

   *Field Name*: :guilabel:`Account SID`

   *Type*: string

   `Twilio <http://www.twilio.com/docs/quickstart>`_ account ID.

.. setting:: twilio.auth.token

   *Field Name*: :guilabel:`Twilio Auth Token`

   *Type*: string

   Twilio API token.

.. setting:: twilio.from.num

   *Field Name*: :guilabel:`Twilio From Number`

   *Type*: string

   Twilio phone number.

.. _automation-versions-settings:

MongoDB Version Management
--------------------------

The following settings determine how |onprem| knows what MongoDB releases
exist and from what servers the Automation Agent downloads the binaries
for a MongoDB release.

.. setting:: automation.versions.source

   *Field Name*: :guilabel:`Version Manifest Source`

   *Type*: string

   *Default*: mongodb

   Selects whether the Automation Agents retrieve MongoDB binaries over
   the internet from MongoDB Inc. or locally from the |application|
   server. Set this to ``mongodb`` if the Automation Agents have internet
   access to retrieve the binaries from MongoDB Inc. Set this to ``local``
   if your Automation Agents cannot reach the internet. If you specify
   ``local``, you must set the :setting:`automation.versions.directory`
   and place ``.tgz`` archive files for the MongoDB binaries in the
   specified directory. You must also provide the MongoDB version
   manifest. For details, see :doc:`/tutorial/configure-local-mode`.

   .. note::

      Configuring local access to binaries for the Automation Agent is
      independent from configuring local access to binaries for the Backup
      Daemon. To configure local access to MongoDB binaries for the Backup
      Daemon, see the :setting:`mongodb.release.autoDownload` setting.

.. setting:: automation.versions.directory

   *Field Name*: :guilabel:`Versions Directory`

   *Type*: string

   When :setting:`automation.versions.source` is set to ``local``, this
   specifies the directory on the |application| server from which the
   Automation Agents access MongoDB binaries when installing a new
   deployment or changing the MongoDB version of an existing deployment.
   You must download the desired MongoDB binaries as ``.tgz`` archive
   files and place the ``.tgz`` files in the specified directory.

.. _mongodb-release-autodownload:

.. setting:: mongodb.release.autoDownload

   *Field Name*: :guilabel:`Backup Versions Auto Download`

   *Type*: boolean

   If you set :setting:`mongodb.release.autoDownload` to ``true``, Backup
   automatically downloads the MongoDB releases from `mongodb.org
   <http://www.mongodb.org/downloads>`_ (Community Edition) and
   `mongodb.com <https://www.mongodb.com/lp/download/mongodb-enterprise>`_
   (Enterprise Edition) and stores them in the directory
   specified by the :setting:`mongodb.release.directory` setting. Backup's
   ``mongodb-fetch`` utility, located in the
   ``/opt/mongodb/backup-daemon/bin`` directory, runs once an hour to
   perform the downloads.

   If you set :setting:`mongodb.release.autoDownload` to ``false``, you
   must manually download and install
   the needed MongoDB releases to the directory specified in the
   :setting:`mongodb.release.directory` setting. Downloads must adhere to
   the rules described in the :setting:`mongodb.release.directory`
   entry.

   .. note::

      Configuring local access to binaries for the Backup Daemon is
      independent from configuring local access to binaries for the
      Automation Agent. To configure local access to MongoDB binaries for
      the Automation Agent, see the :setting:`automation.versions.source`
      setting and see the :doc:`/tutorial/configure-local-mode` tutorial.

.. setting:: mongodb.release.directory

   *Field Name*: :guilabel:`Backup Versions Auto Download Enterprise Builds`

   *Type*: string

   When :setting:`mongodb.release.autoDownload` is set to ``false``, this
   specifies the full path to the directory that contains the MongoDB
   releases needed by the Backup Daemon. When backing up a replica set,
   the Backup Daemon must use a :program:`mongod` that matches the version
   of the replica set being backed up. Once you specify release directory,
   you must manually download the needed releases.

   .. warning::

      .. include:: /includes/extracts/fact-enterprise-dependencies-vanilla.rst

   For each version of MongoDB needed,
   you must download the archive for that version and extract it into this
   directory. The extracted archive creates a subdirectory that uses the
   following naming convention:
   ``mongodb-<platform>-<architecture>-<version>``.

   Adhere to the following rules for populating the release directory:

   - The release directory can contain versions from either the MongoDB
     Community edition or the MongoDB Enterprise but not from both.

   - |onprem| 1.8 supports platform-specific MongoDB Community Edition
     builds for MongoDB 3.0. Use the MongoDB 3.0 Community Edition build
     for your operating system, available from
     `<http://www.mongodb.org/downloads>`_. You can also use the generic
     ``Linux 64-bit legacy`` version if you wish or if there is no
     platform-specific build for your operating system.

   .. important::

      If you are backing up MongoDB custom builds, you must manually place
      a matching binary distribution for each custom build in this
      directory.

   Beginning in |onprem| version 1.5, the Backup Daemon uses the following
   rules to match the MongoDB version of the replica set being backed up:

   - If the MongoDB version uses the MongoDB standard ``A.B.C`` version
     format, the daemon looks for a folder named
     ``mongodb-<platform>-<architecture>-A.B.x``, where ``x`` is greater
     than or equal to ``C``.

   - If the MongoDB version does not use the standard format, the daemon
     looks for a folder named
     ``mongodb-<platform>-<architecture>-<version>``, where ``<version>``
     ends with the MongoDB instance's version. For example, if the source
     version is ``2.4.10-abc``, the daemon would match on
     ``mongodb-linux-x86_64-production-2.4.10-abc``.

Backup Settings
---------------

These settings are necessary if you use the Backup feature.

.. setting:: rootDirectory

   *Type*: string

   The disk partition used by the Backup Daemon to dynamically create and
   maintain the :term:`head database` directories. For more information,
   see the :ref:`Backup functional overview
   <mms-backup-functional-overview>`.

   This directory must be writable
   by the mongodb-mms user and must end in a trailing slash.  It is critical
   that this partition is sized appropriately.

   .. important::
      Data in this directory is dynamically created, maintained and destroyed by the
      Backup Daemon. This partition should not be used for any other purpose.
      This partition should *not* overlap with the partition used for the Backup
      Database.

.. setting:: numWorkers

   *Type*: number

   The number of replica sets that should be processed at a time.

.. setting:: mms.alerts.LowHeadFreeSpace.minimumHeadFreeSpaceGB

   *Type*: integer

   *Default*: 10

   Specifies the minimum amount of free disk space in GB required on the
   partition where the Backup Daemon stores the :term:`head databases
   <head database>` that back up your data. You can view a daemon's
   available head space on the |onprem| :ref:`daemons-interface`. If the
   amount of free space drops below this minimum, |onprem| triggers the
   following :doc:`system alert </core/system-alerts>`:

   :alert:`System detects backup daemon has low free head space`

.. setting:: mms.alerts.BackupAgentConfCallFailure.maximumFailedConfCalls

   *Type*: integer

   *Default*: 10

   If the Backup Agent experiences more than this number of consecutive
   failed conf calls, |onprem| triggers the following :doc:`global alert
   </tutorial/manage-global-alerts>`:

   :alert:`Backup Agent has too many conf call failures`

.. _advanced-backup-restore-settings:

.. setting:: mms.backup.restore.linkExpirationHours

   *Type*: number

   *Default*: 1

   The amount of time in hours that a restore link is available.

.. setting:: mms.backup.restore.linkUnlimitedUses

   *Type*: boolean

   *Default*: false

   Sets whether the link to a restored point-in-time snapshot can be used
   more than once. By default, when you create a point-in-time snapshot,
   the link to download the snapshot can be used just once. To allow
   multiple downloads of the snapshot, set this value to ``true``.

.. setting:: mms.backup.restore.snapshotPITExpirationHours

   *Type*: number

   *Default*: 24

   The length of time in hours that a link to a restored point-in-time
   snapshot is available. By default, the link is available for 24 hours
   after creation of the point-in-time snapshot.

Public API
----------

You can modify certain default behaviors of the :doc:`Public API
</core/api>`. To add the following settings, click the :guilabel:`Admin`
link, then the :guilabel:`General` tab, then the :guilabel:`Ops Manage
Config` page, and then the :guilabel:`Custom` section.

.. setting:: mms.publicApi.ignoreEnabledForGlobalRoles

   *Type*: boolean

   By default, a user with a :ref:`global role <global-roles>` can access any
   |onprem| group through the :doc:`Public API </core/api>`, whether or not
   the Public API is enabled for that group.

   To prevent access when a group's Public API is disabled, add this
   setting and set its value to ``false``:

   .. code-block:: ini

      mms.publicApi.ignoreEnabledForGlobalRoles=false

.. setting:: mms.publicApi.whitelistEnabled

   *Type*: boolean

   Certain API calls require that requests originate from a whitelisted IP
   address. To turn off this requirement, add this setting and set its
   value to ``false``:

   .. code-block:: ini

      mms.publicApi.whitelistEnabled=false

.. _config-monitoring-agent-failover:

Monitoring Agent Session Failover
---------------------------------

If you have multiple monitoring agents for a group, only one Monitoring
Agent is the **primary agent**. The primary agent reports the cluster's
status to |mms|. The remaining agents are completely idle, except to log
their status as standby agents and to periodically ask |mms| whether they
should become the primary.

The following settings tune the frequency with which the standby agents
poll |mms| to determine if they have become the primary agent, and the
interval that |mms| uses to determine if the primary agent is
unaccessible. To add the following settings, click the :guilabel:`Admin`
link, then the :guilabel:`General` tab, then the :guilabel:`Ops Manage
Config` page, and then the :guilabel:`Custom` section.

.. setting:: mms.monitoring.agent.session.timeoutMillis

   *Type*: integer

   *Default*: ``90000``

   The interval that |mms| uses to determine if a secondary agent should
   be promoted to primary. If |mms| does not hear from the primary agent
   for the duration specifies in
   :setting:`mms.monitoring.agent.session.timeoutMillis`, |mms|
   promotes a secondary agent to primary. The minimum supported value
   is ``90000``.

.. setting:: mms.monitoring.agent.standbyCollectionFactor

   *Type*: Integer
   
   *Default*: ``4``

   Specifies how frequently standby agents check in with |mms| to see if
   they have become the primary agent. The following values are
   permitted:

   - ``1``: the standby agents check every 55 seconds.

   - ``2``: the standby agents check in at twice the rate as ``1``, or
     approximately every 27 seconds.

   - ``3``: the standby agents check approximately every 18 seconds

   - ``4``: the standby agents check approximately every 14
     seconds.

.. _snmp-heartbeat-configure:

SNMP Heartbeat Settings
-----------------------

|onprem| uses SNMP v2c. You can configure the |application| to send a
periodic heartbeat trap notification (v2c) that contains an internal
health assessment of the |application|. The |application| can send traps
to one or more endpoints on the standard SNMP UDP port 162.

To configure the |application| to send trap notifications, first download
the Management Information Base (MIB) file at
`<http://downloads.mongodb.com/on-prem-monitoring/MMS-MONGODB-MIB.txt>`_ .
Then add the following settings as custom settings. To do so, click the
:guilabel:`Admin` link, then the :guilabel:`General` tab, then the
:guilabel:`Ops Manage Config` page, and then the :guilabel:`Custom`
section.

.. setting:: snmp.default.hosts

   *Type*: string

   *Default*: blank

   Comma-separated list of hosts where 'heartbeat' traps will be sent
   on the standard UDP port 162.
   You must set :setting:`snmp.default.hosts` to enable the SNMP
   heartbeat functionality; otherwise, leaving the setting blank
   disables the SNMP heartbeat functionality.

.. setting:: snmp.listen.port

   *Type*: number

   *Default*: 11611

   Listening UDP port for SNMP. Setting to a number less than 1024 will
   require running the |application| with root privileges.

.. setting:: snmp.default.heartbeat.interval

   *Type*: number

   *Default*: 300

   Number of seconds between heartbeat notifications.

Non-Uniform Access Memory (NUMA) Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To disable NUMA for the :term:`head databases <head database>` managed by
the Backup Daemon, configure this setting. See :manual:`MongoDB and NUMA
Hardware </administration/production-notes/>` in the MongoDB Production
Notes. To add the following setting, click the :guilabel:`Admin` link,
then the :guilabel:`General` tab, then the :guilabel:`Ops Manage Config`
page, and then the :guilabel:`Custom` section.

.. setting:: mongodb.disable.numa

   *Type*: boolean

   Add this property and set it to ``true`` to disable
   the NUMA setting. 

   .. code-block:: properties

      mongodb.disable.numa=true









Settings
--------

|application| Database Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following settings configure the |onprem| connection to the
:ref:`mms-application-database`.

Connection String
`````````````````

.. setting:: mongo.mongoUri

   *Type*: string

   **Required**. The :manual:`connection string </reference/connection-string/>`
   used to access the :ref:`mms-application-database`.

   The following examples show the formats to use for replica sets and for
   the different :parameter:`authentication mechanisms
   <authenticationMechanisms>`.

   **Replica Sets:** If you use a :term:`replica set` for the database's :doc:`backing
   instance </tutorial/prepare-backing-mongodb-instances>`, specify all
   members of the replica set:

   .. code-block:: ini

      mongo.mongoUri=mongodb://db1.example.net:40000,db2.example.net:40000,db3.example.net:40000

   If you omit the port number, |onprem| uses the default ``27017`` port for
   all hosts.

   **MongoDB Default Authentication:** For a MongoDB instance using the
   MongoDB ``SCRAM-SHA-1`` or ``MONGODB-CR`` challenge-response mechanisms,
   the connection string must include authentication credentials. The
   |application| must authenticate as a MongoDB user with the following
   roles:

   - :authrole:`readWriteAnyDatabase`

   - :authrole:`dbAdminAnyDatabase`.

   - :authrole:`clusterAdmin` if the database is a sharded cluster,
     otherwise :authrole:`clusterMonitor`

   Prefix the hostname with the MongoDB username and password in the form
   ``<username>:<password>@``

   .. code-block:: ini

      mongo.mongoUri=mongodb://mongodbuser1:password@mydb1.example.net:40000

   **x.509 Certificate Authentication:** For a MongoDB instance using ``MONGODB-X509``
   authentication, you must first add the value of the **subject** from the client certificate as a
   MongoDB user, as described in :manual:`Use x.509 Certificates to
   Authenticate Clients </tutorial/configure-x509-client-authentication>` in
   the MongoDB manual. The client certificate is contained in the PEM file
   you specify in the :setting:`mongodb.ssl.PEMKeyFile` setting. Once you
   have created the user, prefix the host specified in
   :setting:`mongo.mongoUri` with the name of the new user and append
   ``authMechanism=MONGODB-X509`` after the specified port:

   .. code-block:: ini

      mongo.mongoUri=mongodb://<new_mongodb_user>@mydb1.example.net:40000/?authMechanism=MONGODB-X509

   **LDAP Authentication:** For a MongoDB instance using LDAP, prefix the hostname with the MongoDB
   username and password in the form ``<username>:<password>@``, and append
   the ``authMechanism=PLAIN&authSource=$external`` options after the port:

   .. code-block:: ini

      mongo.mongoUri=mongodb://mongodbuser1:password@mydb1.example.net:40000/?authMechanism=PLAIN&authSource=$external

   **Kerberos Authentication:** For a MongoDB instance using Kerberos, prefix the hostname with the
   Kerberos user principal and specify the authentication mechanism,
   ``authMechanism=GSSAPI``, after the port.
   
   Kerberos user principal names have the form ``<username>@<KERBEROS
   REALM>``. You must escape the user principal, replacing symbols with
   the URL encoded representation. A Kerberos user principal of
   ``username@REALM.EXAMPLE.COM`` would therefore become
   ``username%40REALM.EXAMPLE.COM``.

   The following is an example of Kerberos authentication:

   .. code-block:: ini

      mongo.mongoUri=mongodb://username%40REALM.EXAMPLE.COM@mydb1.example.net:40000/?authMechanism=GSSAPI

   To enable Kerberos authentication between the |application| and the
   :ref:`backup-database`, see :ref:`configuration-kerberos-settings`.
   See also :data:`~uri.authMechanism` and :data:`~uri.authSource`
   in the MongoDB manual.

.. _mongodb-ssl-settings:

MongoDB SSL Settings
````````````````````

The following settings in ``conf-mms.properties`` and
``conf-daemon.propeties`` configure |onprem| to use SSL to encrypt connections
to the :doc:`backing MongoDB instances
</tutorial/prepare-backing-mongodb-instances>` that host the
:ref:`mms-application-database`
and :ref:`backup-database`.

.. setting:: mongo.ssl

   *Type*: boolean

   Enables SSL connection to the :ref:`mms-application-database` when set to
   ``true``.

.. setting:: mongodb.ssl.CAFile

   *Type*: string

   The name of the PEM file that contains the root certificate chain from the
   Certificate Authority that signed the MongoDB server certificate.

.. setting:: mongodb.ssl.PEMKeyFile

   *Type*: string

   The name of the PEM file that contains the X509 certificate and private key.
   Required if the MongoDB instance is running with the :option:`--sslCAFile` 
   option or :setting:`net.ssl.CAFile` setting.

   If you authenticate using the ``MONGODB-X509`` authentication mechanism,
   you also enter this as the name of the user in the :setting:`mongoUri`
   connection string.

.. setting:: mongodb.ssl.PEMKeyFilePassword

   *Type*: string

   Required if the PEM file contains an encrypted private key. Specify the
   password for PEM file. You can encrypt the specified password using the
   |onprem| ``credentialstool``. See :ref:`encrypt-mongodb-user-credentials`.

Encrypted Credentials
`````````````````````

.. setting:: mongo.encryptedCredentials

   *Type*: boolean

   Add this property and set it to ``true`` if :setting:`mongo.mongoUri`
   contains the
   encrypted username and password:

   .. code-block:: ini

      mongo.encryptedCredentials=true

   You must encrypt the username and password in :setting:`mongo.mongoUri`
   using the |mms| ``credentialstool``. See
   :ref:`encrypt-mongodb-user-credentials`.

   .. important::
      The ``conf-mms.properties`` file can contain multiple
      :setting:`mongo.mongoUri` settings. If
      :setting:`mongo.encryptedCredentials` is ``true``, you must encrypt
      all user credentials found in the various :setting:`mongo.mongoUri`
      settings.

.. _configuration-kerberos-settings:

Kerberos Settings
~~~~~~~~~~~~~~~~~

To enable Kerberos authentication between the |application| and the
:ref:`mms-application-database`,
configure the following settings. You must configure
all required Kerberos settings to enable Kerberos authentication.

.. setting:: jvm.java.security.krb5.kdc

   *Type*: string

   Required if using Kerberos. The IP/FQDN (Fully Qualified Domain Name) of
   the KDC server. The value will be set to JVM's java.security.krb5.kdc.

   .. code-block:: properties

      jvm.java.security.krb5.kdc=kdc.example.com

.. setting:: jvm.java.security.krb5.realm

   *Type*: string

   Required if using Kerberos. This is the default REALM for Kerberos. It is
   being used for JVM's java.security.krb5.realm.

   .. code-block:: properties

      jvm.java.security.krb5.realm=EXAMPLE.COM

.. setting:: mms.kerberos.principal

   *Type*: string

   Required if using Kerberos. The principal used to authenticate with
   MongoDB. This should be the exact same user on the
   :setting:`mongo.mongoUri` above.

   .. code-block:: properties

      mms.kerberos.principal=mms/mmsweb.example.com@EXAMPLE.COM

.. setting:: mms.kerberos.keyTab

   *Type*: string

   Required if using Kerberos. The absolute path to the keytab file for the
   principal.

   .. code-block:: properties

      mms.kerberos.keyTab=/path/to/mms.keytab

.. setting:: mms.kerberos.debug

   *Type*: boolean

   The debug flag to output more information on Kerberos
   authentication process.

   .. code-block:: properties

      mms.kerberos.debug=false

.. _encrypt-mongodb-user-credentials:

Encrypt MongoDB User Credentials
--------------------------------

If you do not want to store credentials in plain text, |mms|
provides a tool to encrypt the MongoDB credentials. To encrypt
authentication credentials:

#. Issue the following command to create an encrypted credential pair,
   replacing ``<username>`` with your username:

   .. code-block:: sh

      sudo <install_dir>/bin/credentialstool --username <username> --password

   This will prompt you to enter the password and will output the
   encrypted credential pair.

   ``credentialstool`` requires root privileges, (i.e. ``sudo``) when
   installed with ``rpm`` or ``deb`` packages, because it modifies the
   ``/etc/mongodb-mms/gen.key`` file. |onprem| uses the ``gen.key`` to
   encrypt sensitive data in the database and configuration files.

#. Use the encrypted credential pair in the :setting:`mongo.mongoUri`
   settings where needed, and add the
   :setting:`mongo.encryptedCredentials = true
   <mongo.encryptedCredentials>` setting. For example:

   .. code-block:: sh

      mongo.mongoUri=mongodb://da83ex3s:a4fbcf3a1@mydb1.example.net:40000/admin
      mongo.encryptedCredentials=true

.. important::
   The ``conf-mms.properties`` file can contain multiple
   :setting:`mongo.mongoUri` settings. If
   :setting:`mongo.encryptedCredentials` is ``true``, you must encrypt
   all user credentials found in the various :setting:`mongo.mongoUri`
   settings.

Required Roles for MongoDB User Connecting to Backing Databases
---------------------------------------------------------------

The MongoDB user used to connect to |onprem|'s backing databases must
possess the :authrole:`readWriteAnyDatabase`, :authrole:`clusterAdmin`,
and :authrole:`dbAdminAnyDatabase` MongoDB user roles.


.. NOTE: Do NOT document these settings:
   increment.gle.freq
   increment.offer.time
   increment.queue.size
   increment.thread.count
   ping.queue.size
   ping.thread.count
