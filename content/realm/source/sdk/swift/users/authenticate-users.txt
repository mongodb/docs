.. meta::
   :robots: noindex, nosnippet

.. _ios-authenticate-users:

==============================
Authenticate Users - Swift SDK
==============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Log In
------

.. _ios-login-anonymous:

Anonymous User
~~~~~~~~~~~~~~

If you have enabled :ref:`Anonymous authentication <anonymous-authentication>`
in the App Services UI, users can immediately log into your app without providing any
identifying information. The following code shows how to do this:

.. literalinclude:: /examples/generated/code/start/Authenticate.snippet.anonymous.swift
   :language: swift

.. _ios-login-email-password:

Email/Password User
~~~~~~~~~~~~~~~~~~~

If you have enabled :ref:`Email/Password authentication <email-password-authentication>`,
you can log in using the following code:

.. literalinclude:: /examples/generated/code/start/Authenticate.snippet.email-password.swift
   :language: swift

.. _ios-login-api-key:

API Key User
~~~~~~~~~~~~

If you have enabled :ref:`API Key authentication <api-key-authentication>`,
you can log in using the following code:

.. literalinclude:: /examples/generated/code/start/Authenticate.snippet.api-key.swift
   :language: swift

.. _ios-login-custom-function:

Custom Function User
~~~~~~~~~~~~~~~~~~~~

If you have enabled the :ref:`Custom Function authentication provider
<custom-function-authentication>`, you can log in using the following code:

.. literalinclude:: /examples/generated/code/start/Authenticate.snippet.function.swift
   :language: swift


.. _ios-login-custom-jwt:

Custom JWT User
~~~~~~~~~~~~~~~

If you have enabled the :ref:`Custom JWT authentication provider
<custom-jwt-authentication>`, you can log in using the following code:

.. literalinclude:: /examples/generated/code/start/Authenticate.snippet.jwt.swift
   :language: swift

.. _ios-login-facebook:

Facebook User
~~~~~~~~~~~~~

The :ref:`Facebook <facebook-authentication>` authentication provider allows you
to authenticate users through a Facebook app using their existing Facebook
account.

.. include:: /includes/note-enable-facebook-auth.rst

.. include:: /includes/note-facebook-profile-picture-url.rst

Follow the official :facebook:`Facebook Login for iOS Quickstart
<docs/facebook-login/ios?sdk=cocoapods>` to set up the authentication
flow for your application. In the login completion handler, create an
App Services Facebook credential with the logged in user's
:facebook:`access token string <docs/facebook-login/access-tokens>` and
log the user into your App Services app.

.. literalinclude:: /examples/generated/code/start/Authenticate.snippet.facebook.swift
   :language: swift

.. _ios-login-google:

Google User
~~~~~~~~~~~

.. important::
   
   To log a user in with their existing Google account, you must configure and
   enable the :ref:`Google authentication provider <google-authentication>` for
   your application.

Follow the official :google:`Google Sign-In for iOS Integration Guide
<identity/sign-in/ios/start-integrating>` to set up the authentication flow for
your application. In the sign-in completion handler, create an App Services
Google credential and log the user into your App Services app.

The value that you pass to the credential depends on whether or not you have
:ref:`enabled OpenID Connect <openIdConnect>` for the provider:

- If OpenID Connect is enabled, pass the ``id_token``
  :google:`included in the Google OAuth response
  <identity/sign-in/ios/backend-auth>` to :swift-sdk:`Credentials.googleId(token:)
  <Enums/Credentials.html#/s:10RealmSwift11CredentialsO8googleIdyACSS_tcACmF>`.

- If OpenID Connect is not enabled, pass the user's :google:`server auth code
  <identity/sign-in/ios/reference/Classes/GIDGoogleUser#serverauthcode>` to
  :swift-sdk:`Credentials.google(serverAuthCode:)
  <Enums/Credentials.html#/s:10RealmSwift11CredentialsO6googleyACSS_tcACmF>`.

.. tabs::

   .. tab:: ID Token
      :tabid: idToken

      .. literalinclude:: /examples/generated/code/start/Authenticate.snippet.google-with-googleId.swift
         :language: swift

   .. tab:: Server Auth Code
      :tabid: serverAuthCode

      .. literalinclude:: /examples/generated/code/start/Authenticate.snippet.google-with-serverAuthCode.swift
         :language: swift

.. _ios-login-apple:

Apple User
~~~~~~~~~~

If you have enabled :ref:`Sign-in with Apple authentication
<apple-id-authentication>`, you can log in using the following code:

.. literalinclude:: /examples/generated/code/start/Authenticate.snippet.apple.swift
   :language: swift

.. include:: /includes/authorization-appleidcredential-string.rst

.. _ios-async-await-login:

Async/Await Login
~~~~~~~~~~~~~~~~~

.. versionadded:: 10.15.0

The async/await version of the :swift-sdk:`App.login <Extensions/App.html#/s:So6RLMAppC10RealmSwiftE5login11credentials7Combine6FutureCySo7RLMUserCs5Error_pGAC11CredentialsO_tF>` 
method asynchronously returns a User or Error.

.. literalinclude:: /examples/generated/code/start/Authenticate.snippet.async-await.swift
   :language: swift

.. include:: /includes/swift-async-await-support.rst

.. _ios-offline-login:

Offline Login
-------------

.. include:: /includes/offline-login.rst

.. literalinclude:: /examples/generated/code/start/Authenticate.snippet.offline-login.swift
   :language: swift

.. _ios-get-a-user-access-token:

Get a User Access Token
-----------------------

The Realm SDK automatically manages access tokens, refreshes them when they 
expire, and includes a valid access token for the current user with each 
request. 

If you send requests outside of the SDK, you must include the user's access
token with each request. In this scenario, you must manually refresh the token when 
it expires. Access tokens expire after 30 minutes.

You can call :swift-sdk:`.refreshCustomData() 
<Extensions/User.html#/s:So7RLMUserC10RealmSwiftE17refreshCustomData7Combine6FutureCySDys11AnyHashableVypGs5Error_pGyF>`
on a logged-in user to refresh the user's auth session. Then, return the 
``.accessToken`` as a string you can use in your code. You might use a 
function similar to this to fetch an access token:

.. literalinclude:: /examples/generated/code/start/Authenticate.snippet.refresh-user-access-token-function.swift
   :language: swift

Which requires a logged-in user:

.. literalinclude:: /examples/generated/code/start/Authenticate.snippet.get-user-access-token.swift
   :language: swift

Refresh Token Expiration
------------------------

.. include:: /includes/refresh-token-expiry.rst

.. _ios-logout:

Log Out
-------

Once logged in, you can log out:

.. include:: /includes/log-out-queries-in-progress.rst

.. literalinclude:: /examples/generated/code/start/Authenticate.snippet.logout.swift
   :language: swift
