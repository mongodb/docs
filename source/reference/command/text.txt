====
text
====

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: text

   .. versionadded:: 2.4

   Searches text content stored in the :ref:`text index
   <index-feature-text>`. The :dbcommand:`text` command is
   **case-insensitive**.

   The :dbcommand:`text` command returns all documents that contain any
   of the terms; i.e. it performs a logical ``OR`` search. By default,
   the command limits the matches to the top 100 scoring documents, in
   descending score order, but you can specify a different limit.

   The :dbcommand:`text` command has the following syntax:

   .. code-block:: javascript

      db.collection.runCommand( "text", { search: <string>,
                                          filter: <document>,
                                          project: <document>,
                                          limit: <number>,
                                          language: <string> } )

   The :dbcommand:`text` command has the following parameters:

   .. include:: /reference/command/text-field.rst

   :return:

      The :dbcommand:`text` command returns a document that contains a
      field ``results`` that contains an array of the highest scoring
      documents, in descending order by score. See
      :ref:`text-search-output` for details.

   .. warning::

      The complete results of the :dbcommand:`text` command must fit
      within the :limit:`BSON Document Size`. Otherwise, the command will
      limit the results to fit within the :limit:`BSON Document Size`.
      Use the ``limit`` and the ``project`` parameters with the
      :dbcommand:`text` command to limit the size of the result set.

   .. note::

      - If the ``search`` string includes phrases, the search performs
        an ``AND`` with any other terms in the search string; e.g.
        search for ``"\"twinkle twinkle\" little star"`` searches for
        ``"twinkle twinkle"`` **and** (``"little"`` **or** ``"star"``).

      - :dbcommand:`text` adds all negations to the query with the
        logical ``AND`` operator.

      - The :dbcommand:`text` command ignores stop words for the search
        language, such as ``the`` and ``and`` in English.

      - The :dbcommand:`text` command matches on the complete *stemmed*
        word. So if a document field contains the word ``blueberry``,
        a search on the term ``blue`` will not match. However,
        ``blueberry`` or ``blueberries`` will match.

   .. TODO remove the following "include" statement in 2.6

   .. include:: /includes/note-special-indexes-and-text.rst

.. _search-field:

The ``search`` Field
--------------------

The ``search`` field takes a string of terms that MongoDB parses and
uses to query the ``text`` index. Enclose the string of terms in
escaped double quotes to match on the phrase. Additionally, the
:dbcommand:`text` command treats most punctuation as delimiters,
except when a hyphen ``-`` negates terms.

Prefixing a word with a hyphen sign (``-``) negates a word:

- The negated word excludes documents that contain the
  negated word from the result set.

- A search string that only contains negated words returns
  **no** match.

- A hyphenated word, such as ``pre-market``, is not a
  negation. The text command treats the hyphen as a delimiter.

Examples
--------

The following examples assume a collection ``articles`` that has a text
index on the field ``subject``:

.. code-block:: javascript

   db.articles.ensureIndex( { subject: "text" } )

Search for a Single Word
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

   db.articles.runCommand( "text", { search: "coffee" } )

This query returns documents that contain the word ``coffee``,
case-insensitive, in the indexed ``subject`` field.

Search for Multiple Words
~~~~~~~~~~~~~~~~~~~~~~~~~

The following command searches for ``bake`` or ``coffee`` or ``cake``:

.. code-block:: javascript

   db.articles.runCommand( "text", { search: "bake coffee cake" } )

This query returns documents that contain either ``bake`` **or**
``coffee`` **or** ``cake`` in the indexed ``subject`` field.

Search for a Phrase
~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

   db.articles.runCommand( "text", { search: "\"bake coffee cake\"" } )

This query returns documents that contain the phrase ``bake
coffee cake``.

Exclude a Term from the Result Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the hyphen (``-``) as a prefix to exclude documents that
contain a term. Search for documents that contain the words
``bake`` or ``coffee`` but do **not** contain ``cake``:

.. code-block:: javascript

   db.articles.runCommand( "text", { search: "bake coffee -cake" } )

Search with Additional Query Conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``filter`` option to include additional query conditions.

Search for a single word ``coffee`` with an additional filter on
the ``about`` field, but limit the results to 2 documents
with the highest score and return only the ``subject`` field in
the matching documents:

.. code-block:: javascript

   db.articles.runCommand( "text", {
                                     search: "coffee",
                                     filter: { about: /desserts/ },
                                     limit: 2,
                                     project: { subject: 1, _id: 0 }
                                   }
                         )

- The ``filter`` *query document*
  may use any of the available :doc:`query operators
  </reference/operator>`.

- Because the ``_id`` field is implicitly included, in order to
  return **only** the ``subject`` field, you must explicitly
  exclude (``0``) the ``_id`` field. Within the ``project``
  document, you cannot mix inclusions (i.e. ``<fieldA>: 1``) and
  exclusions (i.e. ``<fieldB>: 0``), except for the ``_id`` field.

Search a Different Language
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``language`` option to specify Spanish as the language
that determines the list of stop words and the rules for the
stemmer and tokenizer:

.. code-block:: javascript

   db.articles.runCommand( "text", {
                                       search: "leche",
                                       language: "spanish"
                                   }
                         )

See :ref:`text-search-languages` for the supported languages.

.. important:: Specify the language in **lowercase**.

.. _text-search-output:

Output
------

The following is an example document returned by the :dbcommand:`text`
command:

.. code-block:: javascript

   {
      "queryDebugString" : "tomorrow||||||",
      "language" : "english",
      "results" : [
         {
            "score" : 1.3125,
            "obj": {
                     "_id" : ObjectId("50ecef5f8abea0fda30ceab3"),
                     "quote" : "tomorrow, and tomorrow, and tomorrow, creeps in this petty pace",
                     "related_quotes" : [
                                          "is this a dagger which I see before me",
                                          "the handle toward my hand?"
                                        ],
                     "src" : {
                                "title" : "Macbeth",
                                "from" : "Act V, Scene V"
                             },
                     "speaker" : "macbeth"
                   }
         }
      ],
      "stats" : {
                  "nscanned" : 1,
                  "nscannedObjects" : 0,
                  "n" : 1,
                  "nfound" : 1,
                  "timeMicros" : 163
               },
      "ok" : 1
   }

The :dbcommand:`text` command returns the following data:

.. data:: text.queryDebugString

   For internal use only.

.. data:: text.language

   The :data:`~text.language` field returns the language used for the
   text search. This language determines the list of stop words and the
   rules for the stemmer and tokenizer.

.. data:: text.results

   The :data:`~text.results` field returns an array of result documents
   that contain the information on the matching documents. The result
   documents are ordered by the :data:`~text.results.score`. Each
   result document contains:

   .. data:: text.results.obj

      The :data:`~text.results.obj` field returns the actual document
      from the collection that contained the stemmed term or terms.

   .. data:: text.results.score

      The :data:`~text.results.score` field for the document that
      contained the stemmed term or terms. The
      :data:`~text.results.score` field signifies how well the document
      matched the stemmed term or terms. See
      :doc:`/tutorial/control-results-of-text-search` for how you can
      adjust the scores for the matching words.

.. data:: text.stats

   The :data:`~text.stats` field returns a document that contains the
   query execution statistics. The :data:`~text.stats` field contains:

   .. data:: text.stats.nscanned

      The :data:`~text.stats.nscanned` field returns the total
      number of index entries scanned.

   .. data:: text.stats.nscannedObjects

      The :data:`~text.stats.nscannedObjects` field returns the
      total number of documents scanned.

   .. data:: text.stats.n

      The :data:`~text.stats.n` field returns the number of elements in
      the :data:`~text.results` array. This number may be less than the
      total number of matching documents, i.e.
      :data:`~text.stats.nfound`, if the full result exceeds the
      :limit:`BSON Document Size`.

   .. data:: text.stats.nfound

      The :data:`~text.stats.nfound` field returns the total number
      of documents that match. This number may be greater than
      the size of the :data:`~text.results` array, i.e.
      :data:`~text.stats.n`, if the result set exceeds the
      :limit:`BSON Document Size`.

   .. data:: text.stats.timeMicros

      The :data:`~text.stats.timeMicros` field returns the time in
      microseconds for the search.

.. data:: text.ok

   The :data:`~text.ok` returns the status of the :dbcommand:`text`
   command.

.. _text-search-languages:

Text Search Languages
---------------------

The :ref:`text index <index-feature-text>` and the :dbcommand:`text`
command support the following languages:

- ``danish``
- ``dutch``
- ``english``
- ``finnish``
- ``french``
- ``german``
- ``hungarian``
- ``italian``
- ``norwegian``
- ``portuguese``
- ``romanian``
- ``russian``
- ``spanish``
- ``swedish``
- ``turkish``

.. note::

   If you specify a language value of ``"none"``, then the text search
   has no list of stop words, and the text search does not stem or
   tokenize the search terms.
