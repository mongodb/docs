==================
Recover Data Files
==================

.. default-domain:: mongodb

Overview
--------

Any deployment may suffer hardware failure, power failure, networking
failure, or some other interruption that may damage data files. MongoDB
provides a range of features, including :term:`replica sets <replica
set>` and :term:`journaling`, to make recovery from those events
quick and complete.

If you suspect that some of your data files might be invalid, it may
be possible to recover some of the data.

If your deployment *does* use :term:`replica sets <replica set>`, use
the procedures described in :doc:`/tutorial/resync-replica-set-member`
to resync the invalid data files from valid files on one of the other
members of the replica set.

If your deployment does *not* use replica sets, use the following
procedures to remove the invalid portions of your data files, and to
make the remaining portions usable.

The best way to avoid data loss and ensure the most
robust deployments is to follow the recommendations in
:doc:`maintain-valid-data-files`.

See also
:doc:`/core/backups` and
:doc:`/administration/backup` for more information on preventing data loss. Also see
:doc:`/core/replication`,
:doc:`/core/journaling`, and
:doc:`/tutorial/manage-journaling`.

Considerations
--------------

.. warning::

   This procedure removes the invalid parts of data files. *You can
   lose data as part of the recovery process.*

   Using this procedure on a capped collection truncates the
   collection to two documents. Do not use :program:`mongodump` with
   the :option:`--repair <mongodump>` to recover capped collections.

- Use a recovery path with enough space to hold the recovered data files.

- Do not remove the ``mongod.lock`` file from the data directory.

- Do not perform this procedure on files that are currently opened
  by a running :program:`mongod` instance. This procedure will not
  work on files that are already open.

Procedure
---------

This procedure assumes a ``/data/db`` directory that contains data
files for a ``users`` database, and a ``/data/recovery`` directory
for recovered files. Use the following sequence of operations with
the relevant directory and database names.

#. Run :program:`mongodump` once for each database to recover. If the
   database used the :option:`--directoryperdb` option, run the
   following command from the system shell prompt:

   .. code-block:: sh

      mongodump --journal --dbpath /data/db --directoryperdb --repair -d users -o /data/recovery > /data/recovery/users.log

   Otherwise omit the :option:`--directoryperdb` option:

   .. code-block:: sh

      mongodump --journal --dbpath /data/db --repair -d users -o /data/recovery > /data/recovery/users.log

   .. warning::

   Run :program:`mongodump` on each database to recover.

#. Verify the recovered files exist in ``/data/recovery``. Examine
   ``/data/recovery/users.log`` to determine how many
   documents :program:`mongodump` recovered.

#. Use :program:`mongorestore` on the newly recovered files to create a new
   MongoDB node. In this example the new data directory is ``/data/db2``.

   .. code-block:: sh

      mongorestore --dbpath /data/db2 /data/recovery

.. _test-data-file-recovery:

#. Test the data files by bringing up a standalone :program:`mongod`
   instance, and have :option:`--dbpath <mongod --dbpath>` point
   to the repaired data files in the new directory. If the repair has
   removed data, the number of documents in the collection will be
   lower than it had been previously.

   From the :program:`mongo` shell, verify the number of documents
   in each collection:

   .. code-block:: javascript

      use users
      db.collection.count()

   Perform other application-specific tests in a staging environment
   as needed. If the data files are correct, delete or archive the
   ``/data/recovery`` directory, and *do not proceed with any further
   recovery efforts*

#. If :program:`mongodump` failed to recover the data files, use
   :program:`mongod` with the :option:`--repair <mongod --repair>`
   and :option:`--repairpath <mongod --repairpath>` options to create
   a new data directory with a repaired set of data files.

   Specify a new directory to receive the repaired data files:

   .. code-block:: sh

      mongod --dbpath /data/db --repair --repairpath /data/recovery

   When the :option:`--repair <mongod --repair>` operation completes
   successfully, the newly-repaired data files are in the new
   directory.

   .. warning::

      :option:`--repair <mongod --repair>` removes the invalid parts of
      data files. *You can lose data as part of the recovery process.*

      Under some circumstances, :option:`--repair <mongod --repair>`
      may remove the majority of data in the data file.

      Without the :option:`--repairpath <mongod --repairpath>`
      option, the new data files permanently overwrite the old.

#. Test the data files using the procedure :ref:`outlined above
   <test-data-file-recovery>`.

#. You may use the recovered files normally. Start :program:`mongod`
   with :setting:`dbpath` pointing to the new directory:

   .. code-block:: sh

      mongod --dbpath <newpath>

