.. _fts-customize-score:

==========================================================
How to Customize the Score of the Documents in the Results
==========================================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can customize the :ref:`score <scoring-ref>` of the documents in the
results. By adjusting how scores are calculated, you can ensure that the
most pertinent documents are ranked higher in the search results. To
learn more about the different ways in which you can customize the
score, see :ref:`scoring-ref`. This page demonstrates how to modify the
score of the documents in the results to boost or bury the results and
how to normalize your :pipeline:`$search` query score in the range from
``0`` to ``1`` in the subsequent stages of your aggregation pipeline. .

.. _compound-query-custom-score-tutorial:

Modify the Score of the Documents in the Results 
------------------------------------------------

Every document that an |fts| query returns is assigned a score based on
its relevance. The documents included in a result set return in order
from highest to lowest score. To learn more, see :ref:`scoring-ref`. 

You can use the following options with all operators to modify the
default scoring behavior. For details and examples, click any of the
following options: 

- :ref:`scoring-boost`
- :ref:`scoring-constant`
- :ref:`scoring-embedded`
- :ref:`scoring-function`

This section demonstrates how to add weights to your search fields to
boost or bury the documents in the results or a category of results.
Specifically, it demonstrates how to assign one or more values to a
field to return results with a higher or lower score. 

Example Index 
~~~~~~~~~~~~~

You can set up an index with :ref:`dynamic mappings
<static-dynamic-mappings>` enabled to index all the fields in the
collection or with static mappings on the fields you want to query and
sort the results by. To learn more about creating |fts| indexes, see
:ref:`ref-create-index`. 

.. _fts-normalize-score:

Example Queries 
~~~~~~~~~~~~~~~

.. tabs-selector:: drivers

The sample queries demonstrate how to boost or bury the documents in the
results. They use the :ref:`compound operator <compound-ref>` to combine two or more 
operators into a single query. 

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu to set the 
client you want to use try the examples in this section.

----------

.. collapsible::
   :heading: Boost the Results
   :sub_heading: Use the compound operator to combine two or more operators into a single query and use score options to alter the relevance score that Atlas Search returns.
   :expanded: false 

   Use the ``title`` and ``year`` fields in
   the ``sample_mflix.movies`` namespace to boost the relevance score
   that |fts| returns for movie titles that contain the term ``snow``. If
   you set up the index on ``movies`` collection, you can run the
   following queries. 

   .. tabs-drivers::

      .. tab::
         :tabid: atlas-ui

         .. include:: /includes/fts/custom-score/procedures/steps-fts-compound-score-tutorial-run-query-atlas-ui.rst

      .. tab::
         :tabid: shell

         .. include:: /includes/fts/custom-score/procedures/steps/fts-score-tutorial-run-queries.rst

      .. tab::
         :tabid: compass

         .. include:: /includes/fts/custom-score/procedures/steps/fts-compound-score-tutorial-run-query-compass.rst

      .. tab::
         :tabid: csharp

         .. include:: /includes/fts/custom-score/procedures/steps/fts-compound-score-tutorial-run-query-cs.rst

      .. tab:: 
         :tabid: go

         .. include:: /includes/fts/custom-score/procedures/steps/fts-compound-score-tutorial-run-query-go.rst

      .. tab:: 
         :tabid: java-sync 

         .. include:: /includes/fts/custom-score/procedures/steps/fts-compound-score-tutorial-run-query-java.rst

      .. tab:: 
         :tabid: kotlin-coroutine

         .. include:: /includes/fts/custom-score/procedures/steps/fts-compound-score-tutorial-run-query-kotlin.rst

      .. tab::
         :tabid: nodejs

         .. include:: /includes/fts/custom-score/procedures/steps/fts-compound-score-tutorial-run-query-nodejs.rst

      .. tab::
         :tabid: python

         .. include:: /includes/fts/custom-score/procedures/steps/fts-compound-score-tutorial-run-query-python.rst

.. collapsible::
   :heading: Bury the Results
   :sub_heading: Use the compound operator to combine two or more operators into a single query and use score options to alter the relevance score that Atlas Search returns.
   :expanded: false 

   The following sample queries use the ``title``, ``plot``, and
   ``genres`` fields in the ``sample_mflix.movies`` namespace to
   perform the following searches:

   - Search for all movies containing the word "ghost", but reduce the
     score of comedy movies by 50%. 
   - Search for all movies containing the word "ghost", but reduce the
     score of movies with specified ``ObjectIds`` by 50%. 

   .. tabs-drivers::

      .. tab::
         :tabid: atlas-ui

         .. include:: /includes/fts/custom-score/procedures/steps-fts-tutorial-bury-results-query-atlas-ui.rst

      .. tab::
         :tabid: shell

         .. include:: /includes/fts/custom-score/procedures/steps-fts-tutorial-bury-results-query-mongosh.rst

      .. tab::
         :tabid: compass

         .. include:: /includes/fts/custom-score/procedures/steps-fts-tutorial-bury-results-query-compass.rst

      .. tab::
         :tabid: csharp

         .. include:: /includes/fts/custom-score/procedures/steps-fts-tutorial-bury-results-query-cs.rst

      .. tab:: 
         :tabid: go

         .. include:: /includes/fts/custom-score/procedures/steps-fts-tutorial-bury-results-query-go.rst

      .. tab:: 
         :tabid: java-sync 

         .. include:: /includes/fts/custom-score/procedures/steps-fts-tutorial-bury-results-query-java.rst

      .. tab:: 
         :tabid: kotlin-coroutine

         .. include:: /includes/fts/custom-score/procedures/steps-fts-tutorial-bury-results-query-kotlin.rst

      .. tab::
         :tabid: nodejs

         .. include:: /includes/fts/custom-score/procedures/steps-fts-tutorial-bury-results-query-nodejs.rst

      .. tab::
         :tabid: python

         .. include:: /includes/fts/custom-score/procedures/steps-fts-tutorial-bury-results-query-python.rst

Normalize the Score 
-------------------

You can normalize your :pipeline:`$search` query score in the range from
``0`` to ``1`` in the subsequent stages of your aggregation pipeline.
You can use the following stages after your :pipeline:`$search` stage in
the following order to normalize the score: 

- :pipeline:`$addFields`
    
  .. code-block:: json

     {
        "$addFields": {
        "score": {
            "$meta": "searchScore"
        }
        }
     }

- :pipeline:`$setWindowFields`
    
  .. code-block:: json 

     {
        "$setWindowFields": {
        "output": {
            "maxScore": {
            "$max": "$score"
            }
        }
        }
     }

- :pipeline:`$addFields`
    
  .. code-block:: json 

     {
        "$addFields": {
        "normalizedScore": {
            "$divide": [
            "$score", "$maxScore"
            ]
        }
        }
     }

.. tabs:: 

   .. tab:: Basic 
      :tabid: Basic 

      .. io-code-block::
         :copyable: true

         .. input:: /includes/fts/custom-score/normalize-basic-query.json
            :language: json
            :linenos:
                
         .. output:: /includes/fts/custom-score/normalize-basic-query-results.js 
            :language: javascript
            :linenos:
            :emphasize-lines: 6,12,18,24,30

   .. tab:: Arithmetic
      :tabid: arithmetic

      .. io-code-block::  
         :copyable: true

         .. input:: /includes/fts/custom-score/normalize-arithmetic-query.json
            :language: json
            :linenos:

         .. output:: /includes/fts/custom-score/normalize-arithmetic-query-results.js
            :language: javascript
            :linenos:
            :emphasize-lines: 6,12,18,24,30

   .. tab:: Gaussian
      :tabid: gauss 

      .. io-code-block:: 
         :copyable: true 

         .. input:: /includes/fts/custom-score/normalize-gaussian-query.json
            :language: json
            :linenos:

         .. output:: /includes/fts/custom-score/normalize-gaussian-query-results.js 
            :language: javascript
            :linenos:
            :emphasize-lines: 6,12,18,24,30

   .. tab:: Path
      :tabid: path 

      .. io-code-block:: 
         :copyable: true 

         .. input:: /includes/fts/custom-score/normalize-path-query.json
            :language: json
            :linenos:

         .. output:: /includes/fts/custom-score/normalize-path-query-results.js 
            :language: javascript
            :linenos:
            :emphasize-lines: 6,12,18,24,30

   .. tab:: Unary
      :tabid: unary 

      .. io-code-block::  
         :copyable: true

         .. input:: /includes/fts/custom-score/normalize-unary-query.json
            :language: json
            :linenos:

         .. output:: /includes/fts/custom-score/normalize-unary-query-results.js 
            :language: javascript
            :linenos:
            :emphasize-lines: 6,12,18,24,30

The |fts| results contain the following scores:

- The modified score for the :pipeline:`$search` query in the ``score``
  field from the :pipeline:`$addFields` stage. 
- The maximum score assigned to the documents in the results in the
  ``maxScore`` field from the :pipeline:`$setWindowFields` stage.  
- The normalized score in the ``normalizedScore`` field from the
  :pipeline:`$addFields` stage, which is computed by dividing the
  modified score in ``$score`` by the maximum score in ``$maxScore``
  using :manual:`$divide </reference/operator/aggregation/divide/>`. 

Continue Learning 
~~~~~~~~~~~~~~~~~

To learn more about compound queries using |fts|, take 
Unit 9 of the :mdbu-course:`Intro To MongoDB Course on MongoDB University
</courses/mongodb-atlas-search>`. The 1.5
hour unit includes an overview of |fts| and lessons on creating |fts|
indexes, running :pipeline:`$search` queries using compound operators,
and grouping results using :ref:`fts-facet-ref`.  
