============
$setOnInsert
============

.. default-domain:: mongodb

.. operator:: $setOnInsert

   .. versionadded:: 2.4

   The :operator:`$setOnInsert` operator assigns values to fields
   during an :method:`upsert <db.collection.update()>` **only** when
   using the :term:`upsert` option to the
   :method:`~db.collection.update()` operation performs an insert.

   .. code-block:: javascript

      db.collection.update( <query>,
                            { $setOnInsert: { <field1>: <value1>, ... } },
                            { upsert: true }
                          )
   .. example::

      A collection named ``products`` contains no documents.

      Then, the following :method:`upsert <db.collection.update()>`
      operation performs an insert and applies the
      :operator:`$setOnInsert` to set the field ``defaultQty`` to
      ``100``:

      .. code-block:: javascript

         db.products.update(
                             { _id: 1 },
                             { $setOnInsert: { defaultQty: 100 } },
                             { upsert: true }
                           )

      The ``products`` collection contains the newly-inserted document:

      .. code-block:: javascript

         { "_id" : 1, "defaultQty" : 100 }

   .. note::

      The :operator:`$setOnInsert` operator only affects
      :method:`~db.collection.update()` operations with the
      :term:`upsert` flag that perform an :doc:`insert
      </core/create>`.

      If the :method:`~db.collection.update()` has the upsert flag and
      performs an :doc:`update </core/update>`,
      :operator:`$setOnInsert` has no effect.

   .. example::

      A collection named ``products`` has the following document:

      .. code-block:: javascript

         { "_id" : 1, "defaultQty" : 100 }

      The following :method:`~db.collection.update()` with the
      *upsert* flag operation performs an update:

      .. code-block:: javascript

         db.products.update(
                             { _id: 1 },
                             { $setOnInsert: { defaultQty: 500, inStock: true },
                               $set: { item: "apple" } },
                             { upsert: true }
                           )

      Because the :method:`~db.collection.update()` with *upsert*
      operation only performs an update, MongoDB ignores the
      :operator:`$setOnInsert` operation and only applies the
      :operator:`$set` operation.

      The ``products`` collection now contains the following modified
      document:

      .. code-block:: javascript

         { "_id" : 1, "defaultQty" : 100, "item" : "apple" }
