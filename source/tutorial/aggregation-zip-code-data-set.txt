======================================
Aggregation with the Zip Code Data Set
======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The examples in this document use the ``zipcodes`` collection. This
collection is available at: `media.mongodb.org/zips.json
<http://media.mongodb.org/zips.json>`_. Use :binary:`~bin.mongoimport` to
load this data set into your :binary:`~bin.mongod` instance.

Data Model
----------

Each document in the ``zipcodes`` collection has the following form:

.. code-block:: javascript

   {
     "_id": "10280",
     "city": "NEW YORK",
     "state": "NY",
     "pop": 5574,
     "loc": [
       -74.016323,
       40.710537
     ]
   }

- The ``_id`` field holds the zip code as a string.

- The ``city`` field holds the city name. A city can have more than one
  zip code associated with it as different sections of the city can
  each have a different zip code.

- The ``state`` field holds the two letter state abbreviation.

- The ``pop`` field holds the population.

- The ``loc`` field holds the location as a longitude latitude pair.

``aggregate()`` Method
----------------------

All of the following examples use the :method:`aggregate()
<db.collection.aggregate()>` helper in the :binary:`~bin.mongo` shell.

The :method:`aggregate() <db.collection.aggregate()>` method uses the
:ref:`aggregation pipeline <aggregation-pipeline>` to process
documents into aggregated results. An :ref:`aggregation pipeline
<aggregation-pipeline>` consists of :ref:`stages
<aggregation-pipeline-operator-reference>` with each stage processing
the documents as they pass along the pipeline. Documents pass through
the stages in sequence.

The :method:`aggregate() <db.collection.aggregate()>` method in the
:binary:`~bin.mongo` shell provides a wrapper around the
:dbcommand:`aggregate` database command. See the documentation for your
:driver:`driver </>` for a more idiomatic interface
for data aggregation operations.

.. _aggregation-return-states-by-population:

Return States with Populations above 10 Million
-----------------------------------------------

The following aggregation operation returns all states with total
population greater than 10 million:

.. code-block:: javascript

   db.zipcodes.aggregate( [
      { $group: { _id: "$state", totalPop: { $sum: "$pop" } } },
      { $match: { totalPop: { $gte: 10*1000*1000 } } }
   ] )

In this example, the :ref:`aggregation pipeline <aggregation-pipeline>`
consists of the :pipeline:`$group` stage followed by the
:pipeline:`$match` stage:

- The :pipeline:`$group` stage groups the documents of the ``zipcode``
  collection by the ``state`` field, calculates the ``totalPop`` field
  for each state, and outputs a document for each unique state.

  The new per-state documents have two fields: the ``_id`` field and
  the ``totalPop`` field. The ``_id`` field contains the value of the
  ``state``; i.e. the group by field. The ``totalPop`` field is a
  calculated field that contains the total population of each state. To
  calculate the value, :pipeline:`$group` uses the :group:`$sum`
  operator to add the population field (``pop``) for each state.

  After the :pipeline:`$group` stage, the documents in the
  pipeline resemble the following:

  .. code-block:: javascript

     {
       "_id" : "AK",
       "totalPop" : 550043
     }

- The :pipeline:`$match` stage filters these grouped documents to
  output only those documents whose ``totalPop`` value is greater than
  or equal to 10 million. The :pipeline:`$match` stage does not alter
  the matching documents but outputs the matching documents unmodified.

The equivalent :term:`SQL` for this aggregation operation is:

.. code-block:: sql

   SELECT state, SUM(pop) AS totalPop
   FROM zipcodes
   GROUP BY state
   HAVING totalPop >= (10*1000*1000)

.. seealso::

   :pipeline:`$group`, :pipeline:`$match`, :group:`$sum`

Return Average City Population by State
---------------------------------------

The following aggregation operation returns the average populations for
cities in each state:

.. code-block:: javascript

   db.zipcodes.aggregate( [
      { $group: { _id: { state: "$state", city: "$city" }, pop: { $sum: "$pop" } } },
      { $group: { _id: "$_id.state", avgCityPop: { $avg: "$pop" } } }
   ] )

In this example, the :ref:`aggregation pipeline <aggregation-pipeline>`
consists of the :pipeline:`$group` stage followed by another
:pipeline:`$group` stage:

- The first :pipeline:`$group` stage groups the documents by the
  combination of ``city`` and ``state``, uses the :group:`$sum`
  expression to calculate the population for each combination, and
  outputs a document for each ``city`` and ``state`` combination.
  [#multiple-zips-per-city]_

  After this stage in the pipeline, the documents resemble the
  following:

  .. code-block:: javascript

     {
       "_id" : {
         "state" : "CO",
         "city" : "EDGEWATER"
       },
       "pop" : 13154
     }

- A second :pipeline:`$group` stage groups the documents in the
  pipeline by the ``_id.state`` field (i.e. the ``state`` field inside
  the ``_id`` document), uses the :group:`$avg` expression to calculate
  the average city population (``avgCityPop``) for each state, and
  outputs a document for each state.

The documents that result from this aggregation operation resembles the
following:

.. code-block:: javascript

   {
     "_id" : "MN",
     "avgCityPop" : 5335
   }

.. seealso::

   :pipeline:`$group`, :group:`$sum`, :group:`$avg`

Return Largest and Smallest Cities by State
-------------------------------------------

The following aggregation operation returns the smallest and largest
cities by population for each state:

.. code-block:: javascript

   db.zipcodes.aggregate( [
      { $group: 
         {
           _id: { state: "$state", city: "$city" },
           pop: { $sum: "$pop" }
         }
      },
      { $sort: { pop: 1 } },
      { $group:
         {
           _id : "$_id.state",
           biggestCity:  { $last: "$_id.city" },
           biggestPop:   { $last: "$pop" },
           smallestCity: { $first: "$_id.city" },
           smallestPop:  { $first: "$pop" }
         }
      },

     // the following $project is optional, and
     // modifies the output format.

     { $project:
       { _id: 0,
         state: "$_id",
         biggestCity:  { name: "$biggestCity",  pop: "$biggestPop" },
         smallestCity: { name: "$smallestCity", pop: "$smallestPop" }
       }
     }
   ] )

In this example, the :ref:`aggregation pipeline <aggregation-pipeline>`
consists of a :pipeline:`$group` stage, a :pipeline:`$sort` stage,
another :pipeline:`$group` stage, and a :pipeline:`$project` stage:

- The first :pipeline:`$group` stage groups the documents by the
  combination of the ``city`` and ``state``, calculates the :group:`sum
  <$sum>` of the ``pop`` values for each combination, and outputs a
  document for each ``city`` and ``state`` combination.

  At this stage in the pipeline, the documents resemble the following:

  .. code-block:: javascript

     {
       "_id" : {
         "state" : "CO",
         "city" : "EDGEWATER"
       },
       "pop" : 13154
     }

- The :pipeline:`$sort` stage orders the documents in the pipeline by
  the ``pop`` field value, from smallest to largest; i.e. by
  increasing order. This operation does not alter the documents.

- The next :pipeline:`$group` stage groups the now-sorted documents
  by the ``_id.state`` field (i.e. the ``state`` field inside the
  ``_id`` document) and outputs a document for each state.

  The stage also calculates the following four fields for each state.
  Using the :group:`$last` expression, the :pipeline:`$group` operator
  creates the ``biggestCity`` and ``biggestPop`` fields that store the
  city with the largest population and that population. Using the
  :group:`$first` expression, the :pipeline:`$group` operator creates
  the ``smallestCity`` and ``smallestPop`` fields that store the city
  with the smallest population and that population.

  The documents, at this stage in the pipeline, resemble the following:

  .. code-block:: javascript

     {
       "_id" : "WA",
       "biggestCity" : "SEATTLE",
       "biggestPop" : 520096,
       "smallestCity" : "BENGE",
       "smallestPop" : 2
     }

- The final :pipeline:`$project` stage renames the ``_id`` field to
  ``state`` and moves the ``biggestCity``, ``biggestPop``,
  ``smallestCity``, and ``smallestPop`` into ``biggestCity`` and
  ``smallestCity`` embedded documents.

The output documents of this aggregation operation resemble the following:

.. code-block:: javascript

   {
     "state" : "RI",
     "biggestCity" : {
       "name" : "CRANSTON",
       "pop" : 176404
     },
     "smallestCity" : {
       "name" : "CLAYVILLE",
       "pop" : 45
     }
   }

.. [#multiple-zips-per-city] A city can have more than one zip
   code associated with it as different sections of the city can each
   have a different zip code.
