---
title: "Create a ConfigMap for the Certificate Authority certificate."
stepnum: 0
level: 4
ref: create-configmap-ca
content: |
  The |k8s-op-short| requires the root |certauth| certificate of the
  Certificate Authority that issued the |mms| host's certificate. Run
  the following command to create a |k8s-configmap| containing the root
  CA certificate in the same namespace of your database pods:

  .. code-block:: sh

     kubectl create configmap <root-ca-configmap-name> \
       --from-file=mms-ca.crt

  .. important::

     The |k8s-op-short| requires that the certificate is named
     ``mms-ca.crt`` in the ConfigMap.

---
title: "Copy the following example ``ConfigMap``."
stepnum: 0
level: 4
ref: copy-k8s-configmap-tls
content: |

  .. literalinclude:: /reference/k8s/example-configmap.yaml
     :language: yaml

---
title: "Copy the following example ConfigMap."
stepnum: 0
level: 4
ref: copy-k8s-configmap
content: |

  .. literalinclude:: /reference/k8s/example-configmap.yaml
     :language: yaml
     :emphasize-lines: 5, 7-9
---
title: "Open your preferred text editor and paste the example |k8s-configmap| into a new text file."
stepnum: 0
level: 4
ref: paste-k8s-configmap
---
title: "Change the highlighted four lines."
stepnum: 0
level: 4
ref: configure-k8s-configmap
content: |
  .. include:: /includes/list-tables/configmap-keys.rst

---
title: "Copy the highlighted section of this {{k8sResource}} resource."
stepnum: 0
level: 4
ref: copy-k8s-example-resource
content: |

   Change the highlighted settings of this |yaml| file to match your
   desired {{k8sResource}} configuration.

   {{k8sExample}}

---
title: "Paste the copied example to create a new {{k8sResource}} resource."
stepnum: 0
level: 4
ref: paste-new-k8s-example-resource
content: |
  Open your preferred text editor and paste the |k8s-obj| specification
  into a new text file.

---
title: "Paste the copied example section into your existing {{k8sResource}} resource."
stepnum: 0
level: 4
ref: paste-k8s-example-resource-section
content: |
  Open your preferred text editor and paste the |k8s-obj| specification
  at the end of your resource file in the ``spec`` section.

---
title: "Change the highlighted settings to your preferred values."
stepnum: 0
level: 4
ref: change-k8s-rs-values
content: |

  .. include:: /includes/list-tables/rs-resource-base-options.rst

---
title: "Configure the TLS settings for your {{k8sResource}} resource."
stepnum: 0
level: 4
ref: add-tls-settings
content: |

  To enable |tls| in your deployment, configure the following
  settings in your |k8s| object:

  .. include:: /includes/list-tables/resource-keys-tls.rst

---
title: "Configure the TLS settings for your {{k8sResource}} resource using a Custom Certificate Authority."
stepnum: 0
level: 4
ref: add-tls-settings-custom-ca
content: |

  To enable |tls| in your deployment, configure the following
  settings in your |k8s| object:

  .. include:: /includes/list-tables/resource-keys-tls-custom-ca.rst

---
title: "Configure the general X.509 settings for your {{k8sResource}} resource."
stepnum: 4
level: 4
ref: add-client-x509-settings
content: |

  To enable |tls| and X.509 in your deployment, configure the following
  settings in your |k8s| object:

  .. include:: /includes/list-tables/resource-keys-client-x509.rst

---
title: "Configure the internal X.509 settings for your {{k8sResource}} resource."
stepnum: 4
level: 4
ref: add-internal-x509-settings
content: |

  To enable |tls| and X.509 in your deployment, configure the following
  settings in your |k8s| object:

  .. include:: /includes/list-tables/resource-keys-internal-x509.rst


---
title: "Add any additional accepted settings for a {{k8sResource}} deployment."
stepnum: 0
level: 4
ref: add-k8s-rs-values
content: |

  You can also add any of the following optional settings to the
  |k8s-obj| specification file for a {{k8sResource}} deployment:

  - :setting:`spec.clusterDomain`
  - :setting:`spec.featureCompatibilityVersion`
  - :setting:`spec.logLevel`
  - :setting:`spec.podSpec.cpu`
  - :setting:`spec.podSpec.cpuRequests`
  - :setting:`spec.podSpec.memory`
  - :setting:`spec.podSpec.memoryRequests`
  - :setting:`spec.podSpec.persistence.single`
  - :setting:`spec.podSpec.persistence.multiple.data`
  - :setting:`spec.podSpec.persistence.multiple.journal`
  - :setting:`spec.podSpec.persistence.multiple.logs`
  - :setting:`spec.podSpec.podAffinity`
  - :setting:`spec.podSpec.podAntiAffinityTopologyKey`
  - :setting:`spec.podSpec.nodeAffinity`

  .. include:: /includes/admonitions/warning-set-cluster-name.rst

---
title: "Add any additional accepted settings for a {{k8sResource}}  deployment."
stepnum: 0
level: 4
ref: add-k8s-sc-values
content: |
  You can also add any of the following optional settings to the
  |k8s-obj| specification file for a :term:`sharded cluster`
  deployment:

  - :setting:`spec.clusterDomain`
  - :setting:`spec.exposedExternally`
  - :setting:`spec.logLevel`
  - :setting:`spec.featureCompatibilityVersion`
  - :setting:`spec.connectivity.replicaSetHorizons`


  .. include:: /includes/admonitions/warning-set-cluster-name.rst

  **For config server**

  - :setting:`spec.configSrvPodSpec.cpu`
  - :setting:`spec.configSrvPodSpec.cpuRequests`
  - :setting:`spec.configSrvPodSpec.memory`
  - :setting:`spec.configSrvPodSpec.memoryRequests`
  - :setting:`spec.configSrvPodSpec.persistence.single`
  - :setting:`spec.configSrvPodSpec.persistence.multiple.data`
  - :setting:`spec.configSrvPodSpec.persistence.multiple.journal`
  - :setting:`spec.configSrvPodSpec.persistence.multiple.logs`
  - :setting:`spec.configSrvPodSpec.nodeAffinity`
  - :setting:`spec.configSrvPodSpec.podAffinity`
  - :setting:`spec.configSrvPodSpec.podAntiAffinityTopologyKey`

  **For shard routers**

  - :setting:`spec.mongosPodSpec.cpu`
  - :setting:`spec.mongosPodSpec.cpuRequests`
  - :setting:`spec.mongosPodSpec.memory`
  - :setting:`spec.mongosPodSpec.memoryRequests`
  - :setting:`spec.mongosPodSpec.nodeAffinity`
  - :setting:`spec.mongosPodSpec.podAffinity`
  - :setting:`spec.mongosPodSpec.podAntiAffinityTopologyKey`

  **For shard members**

  - :setting:`spec.shardPodSpec.cpu`
  - :setting:`spec.shardPodSpec.cpuRequests`
  - :setting:`spec.shardPodSpec.memory`
  - :setting:`spec.shardPodSpec.memoryRequests`
  - :setting:`spec.shardPodSpec.nodeAffinity`
  - :setting:`spec.shardPodSpec.persistence.single`
  - :setting:`spec.shardPodSpec.persistence.multiple.data`
  - :setting:`spec.shardPodSpec.persistence.multiple.journal`
  - :setting:`spec.shardPodSpec.persistence.multiple.logs`
  - :setting:`spec.shardPodSpec.podAffinity`
  - :setting:`spec.shardPodSpec.podAntiAffinityTopologyKey`

---
title: "Save this {{k8sResource}} config file with a ``.yaml`` file extension."
stepnum: 0
level: 4
ref: save-object-spec

---
title: "Save your {{k8sResource}} config file."
stepnum: 0
level: 4
ref: save-object-spec-update

---
title: "Start your {{k8sResource}} deployment."
stepnum: 0
level: 4
ref: start-k8s-deployment
content: |

   Invoke the following |k8s| command to create your
   {{k8sResource}}:

   .. code-block:: sh

      kubectl apply -f <{{k8sResourceType}}-conf>.yaml

---
title: "Update and restart your {{k8sResource}} deployment."
stepnum: 0
level: 4
ref: restart-k8s-deployment
content: |

   Invoke the following |k8s| command to update and restart your
   {{k8sResource}}:

   .. code-block:: sh

      kubectl apply -f <{{k8sResourceType}}-conf>.yaml


---
title: "Apply your changes to your {{k8sResource}} deployment."
stepnum: 0
level: 4
ref: apply-changes-k8s-deployment
content: |

   Invoke the following |k8s| command to updated your
   {{k8sResource}}:

   .. code-block:: sh

      kubectl apply -f <{{k8sResourceType}}-conf>.yaml

---
title: "Track the status of your {{k8sResource}} deployment."
stepnum: 0
level: 4
ref: track-k8s-deployment-basic
content: |

  .. include:: /includes/check-resource-status.rst

---
title: "Retrieve the CSR for each host in your deployment."
stepnum: 0
level: 4
ref: get-csrs-rs-tls
content: |

  Invoke the following command to retrieve the |csrs| for each host:

  .. code-block:: sh

     kubectl get csr

  The command's output resembles the following:

  .. literalinclude:: /includes/code-examples/responses/k8s-cert-output.sh
     :language: sh
     :copyable: false
     :start-after: START-output-k8s-rs-tls-csrs
     :end-before: END-output-k8s-rs-tls-csrs

---
title: "Approve the CSR for each host in your deployment."
stepnum: 0
level: 4
ref: approve-csrs-rs-tls
content: |

  Using the values returned in the ``NAME`` column, approve each
  certificate from the previous command's output using the following
  command:

  .. code-block:: sh

     kubectl certificate approve <NAME>

  .. example::

     The following commands approve the certificates for the
     replica set example in the previous step:

     .. literalinclude:: /includes/code-examples/requests/k8s-cert-input.sh
        :language: sh
        :start-after: START-input-k8s-rs-csrs
        :end-before: END-input-k8s-rs-csrs

   |kubectl| prints a message to the console when a certificate
   is approved.

---
title: "Retrieve the CSR for each host in your deployment."
stepnum: 0
level: 4
ref: get-csrs-rs-x509
content: |

  Invoke the following command to retrieve the |csrs| for each host:

  .. code-block:: sh

     kubectl get csr

  The command's output resembles the following:

  .. literalinclude:: /includes/code-examples/responses/k8s-cert-output.sh
     :language: sh
     :copyable: false
     :start-after: START-output-k8s-rs-x509-csrs
     :end-before: END-output-k8s-rs-x509-csrs

---
title: "Approve the CSR for each host in your deployment."
stepnum: 0
level: 4
ref: approve-csrs-rs-x509
content: |

  Using the values returned in the ``NAME`` column, approve each
  certificate from the previous command's output using the following
  command:

  .. code-block:: sh

     kubectl certificate approve <NAME>

  .. example::

     The following commands approve the certificates for the
     replica set example in the previous step:

     .. literalinclude:: /includes/code-examples/requests/k8s-cert-input.sh
        :language: sh
        :start-after: START-input-k8s-rs-csrs
        :end-before: END-input-k8s-rs-csrs

   |kubectl| prints a message to the console when a certificate
   is approved.

---
title: "Retrieve the CSR for each host and agent in your deployment."
stepnum: 0
level: 4
ref: get-csrs-rs-internal-x509
content: |

  Invoke the following command to retrieve the |csrs| for each host:

  .. code-block:: sh

     kubectl get csr

  The command's output resembles the following:

  .. literalinclude:: /includes/code-examples/responses/k8s-cert-output.sh
     :language: sh
     :copyable: false
     :start-after: START-output-k8s-rs-internal-x509-csrs
     :end-before: END-output-k8s-rs-internal-x509-csrs

  .. note::

     The |k8s-op-short| generates |csrs| for the {+mdbagent+}s when
     MongoDB resources are present.

---
title: "Approve the certificate request for each host and agent in your deployment."
stepnum: 0
level: 4
ref: approve-csrs-rs-internal-x509
content: |

  Using the values returned in the ``NAME`` column, approve each
  certificate from the ``get csr`` output using the following command:

  .. code-block:: sh

     kubectl certificate approve <NAME>

  .. example::

     Invoke the following commands to approve the certificates for the
     replica set:

     .. literalinclude:: /includes/code-examples/requests/k8s-cert-input.sh
        :language: sh
        :start-after: START-input-k8s-rs-csrs
        :end-before: END-input-k8s-rs-csrs

  |kubectl| prints a message to the console when a certificate is
  approved.

---
title: "Retrieve the cluster file CSR for each host in your deployment."
stepnum: 0
level: 4
ref: get-csrs-rs-internal-x509-clusterfile
content: |

  When :setting:`spec.security.authentication.internalCluster` ``:
  "X509"``, the |k8s-op-short| generates an additional |csr| per host
  for the clusterfile.

  After the first batch of certificates are approved, run the
  command to retrieve the |csrs| again:

  .. code-block:: sh

     kubectl get csr

  The clusterfile |csrs| are now present in the output:

  .. literalinclude:: /includes/code-examples/responses/k8s-cert-output.sh
     :language: sh
     :copyable: false
     :start-after: START-output-k8s-rs-internal-x509-clusterfile-csrs
     :end-before: END-output-k8s-rs-internal-x509-clusterfile-csrs

---
title: "Approve the cluster file CSR for each host in your deployment."
stepnum: 0
level: 4
ref: approve-csrs-rs-internal-x509-clusterfile
content: |

  Approve the clusterfile |csrs| using the same command:

  .. code-block:: sh

     kubectl certificate approve <NAME>

  .. example::

     The following commands approve the clusterfile certificates:

     .. literalinclude:: /includes/code-examples/requests/k8s-cert-input.sh
        :language: sh
        :start-after: START-input-k8s-rs-clusterfile-csrs
        :end-before: END-input-k8s-rs-clusterfile-csrs

---
stepnum: 0
title: "Check the status of your deployment."
level: 4
ref: check-k8s-deployment
content: |
  The |k8s-op-short| creates the MongoDB resources and requests the
  |k8s| |certauth| to approve the database host's certificates. Run the
  following command to verify that the certificates are pending
  approval:

  .. code-block:: sh

     kubectl get mdb <resource-name> -o yaml -w

  The ``status`` field of the output should resemble the following:

  .. code-block:: sh
     :copyable: false

     status:
       lastTransition: 2019-05-01T15:36:59Z
       message: Not all certificates have been approved by Kubernetes CA
       phase: Failed
       type: ""
       version: ""

  If you do not see the ``status.message`` above, see
  :ref:`k8s-troubleshooting` to help diagnose the issue.

---
title: "Retrieve the CSRs for each host in your deployment."
stepnum: 0
level: 4
ref: get-csrs-sc-tls
content: |

  Invoke the following command to retrieve the |csrs| for each host:

  .. code-block:: sh

     kubectl get csr

  The command's output resembles the following:

  .. literalinclude:: /includes/code-examples/responses/k8s-cert-output.sh
     :language: sh
     :copyable: false
     :start-after: START-output-k8s-sc-tls-csrs
     :end-before: END-output-k8s-sc-tls-csrs
---
title: "Approve the CSR for each host in your deployment."
stepnum: 0
level: 4
ref: approve-csrs-sc-tls
content: |

  Using the values returned in the ``NAME`` column, approve each
  certificate from the previous command's output using the following
  command:

  .. code-block:: sh

     kubectl certificate approve <NAME>

  .. example::

     The following commands approve the certificates for the
     sharded cluster example:

     .. literalinclude:: /includes/code-examples/requests/k8s-cert-input.sh
        :language: sh
        :start-after: START-input-k8s-sc-csrs
        :end-before: END-input-k8s-sc-csrs

  |kubectl| prints a message to the console when a certificate
  is approved.

---
title: "Retrieve the CSRs for each host in your deployment."
stepnum: 0
level: 4
ref: get-csrs-sc-x509
content: |

  Invoke the following command to retrieve the |csrs| for each host:

  .. code-block:: sh

     kubectl get csr

  The command's output resembles the following:

  .. literalinclude:: /includes/code-examples/responses/k8s-cert-output.sh
     :language: sh
     :copyable: false
     :start-after: START-output-k8s-sc-internal-x509-csrs
     :end-before: END-output-k8s-sc-internal-x509-csrs

---
title: "Approve the CSR for each host in your deployment."
stepnum: 0
level: 4
ref: approve-csrs-sc-x509
content: |

  Using the values returned in the ``NAME`` column, approve each
  certificate from the previous command's output using the following
  command:

  .. code-block:: sh

     kubectl certificate approve <NAME>

  .. example::

     The following commands approve the certificates for the
     sharded cluster example in the previous step:

     .. literalinclude:: /includes/code-examples/requests/k8s-cert-input.sh
        :language: sh
        :start-after: START-input-k8s-sc-x509-csrs
        :end-before: END-input-k8s-sc-x509-csrs

  |kubectl| prints a message to the console when a certificate
  is approved.

---
title: "Retrieve the clusterfile CSRs for each host in your deployment."
stepnum: 0
level: 4
ref: get-clusterfile-csrs-sc-x509
content: |

  When :setting:`spec.security.clusterAuthenticationMode` is set to
  ``x509``, |k8s-op-short| generates an additional |csr| per host for
  the clusterfile.

  After the first batch of certificates are approved, run the
  command to retrieve the |csrs| again:

  .. code-block:: sh

     kubectl get csr

  The clusterfile |csrs| are now present in the output:

  .. literalinclude:: /includes/code-examples/responses/k8s-cert-output.sh
     :language: sh
     :copyable: false
     :start-after: START-output-k8s-sc-x509-clusterfile-csrs
     :end-before: END-output-k8s-sc-x509-clusterfile-csrs

  .. note::

     The |k8s-op-short| generates |csrs| for the {+mdbagent+}s when
     MongoDB resources are present.

---
title: "Approve the clusterfile CSRs for each host in your deployment."
stepnum: 0
level: 4
ref: approve-clusterfile-csrs-sc-x509
content: |

  Approve the clusterfile |csrs| using the same command:

  .. code-block:: sh

     kubectl certificate approve <NAME>

  .. example::

     The following commands approve the clusterfile certificates:

     .. literalinclude:: /includes/code-examples/requests/k8s-cert-input.sh
        :language: sh
        :start-after: START-input-k8s-sc-x509-clusterfile-csrs
        :end-before: END-input-k8s-sc-x509-clusterfile-csrs


---
title: "Get the CSR for each host in your deployment."
stepnum: 0
level: 4
ref: get-csrs-sc-internal-x509
content: |

  Invoke the following command to retrieve the |csrs| for each host:

  .. code-block:: sh

     kubectl get csr

  The command's output resembles the following:

  .. literalinclude:: /includes/code-examples/responses/k8s-cert-output.sh
     :language: sh
     :copyable: false
     :linenos:
     :start-after: START-output-k8s-sc-internal-x509-csrs
     :end-before: END-output-k8s-sc-internal-x509-csrs

---
title: "Approve the CSR for each host in your deployment."
stepnum: 0
level: 4
ref: approve-csrs-sc-internal-x509
content: |

  Using the values returned in the ``NAME`` column, approve each
  certificate from the previous command's output using the following
  command:

  .. code-block:: sh

     kubectl certificate approve <NAME>

  .. example::

     The following commands approve the CSRs for the sharded cluster
     example:

     .. code-block:: sh
        :copyable: false

        kubectl certificate approve my-secure-sc-0-0.mongodb
        kubectl certificate approve my-secure-sc-0-1.mongodb
        kubectl certificate approve my-secure-sc-0-2.mongodb
        kubectl certificate approve my-secure-sc-1-0.mongodb
        kubectl certificate approve my-secure-sc-1-1.mongodb
        kubectl certificate approve my-secure-sc-1-2.mongodb
        kubectl certificate approve my-secure-sc-config-0.mongodb
        kubectl certificate approve my-secure-sc-config-1.mongodb
        kubectl certificate approve my-secure-sc-config-2.mongodb
        kubectl certificate approve my-secure-sc-mongos-0.mongodb
        kubectl certificate approve my-secure-sc-mongos-1.mongodb

  |kubectl| prints a message to the console when a certificate
  is approved.

---
title: "Retrieve the cluster file CSR for each host in your deployment."
stepnum: 0
level: 4
ref: get-csrs-sc-internal-x509-clusterfile
content: |

  When :setting:`spec.security.clusterAuthenticationMode` is set to
  ``x509``, |k8s-op-short| generates an additional |csr| per host for
  the clusterfile.

  After the first batch of certificates are approved, run the
  command to retrieve the |csrs| again:

  .. code-block:: sh

     kubectl get csr

  The clusterfile |csrs| are now present in the output:

  .. literalinclude:: /includes/code-examples/responses/k8s-cert-output.sh
     :language: sh
     :copyable: false
     :linenos:
     :start-after: START-output-k8s-sc-internal-x509-clusterfile-csrs
     :end-before: END-output-k8s-sc-internal-x509-clusterfile-csrs

  .. note::

     The |k8s-op-short| generates |csrs| for the {+mdbagent+}s when
     MongoDB resources are present.

---
title: "Approve the cluster file CSR for each host in your deployment."
stepnum: 0
level: 4
ref: approve-csrs-sc-internal-x509-clusterfile
content: |

  Approve the clusterfile |csrs| using the same command:

  .. code-block:: sh

     kubectl certificate approve <NAME>

  .. example::

     The following commands approve the clusterfile
     certificates:

     .. code-block:: sh

        kubectl certificate approve my-secure-sc-0-0-clusterfile.mongodb
        kubectl certificate approve my-secure-sc-0-1-clusterfile.mongodb
        kubectl certificate approve my-secure-sc-0-2-clusterfile.mongodb
        kubectl certificate approve my-secure-sc-1-0-clusterfile.mongodb
        kubectl certificate approve my-secure-sc-1-1-clusterfile.mongodb
        kubectl certificate approve my-secure-sc-1-2-clusterfile.mongodb
        kubectl certificate approve my-secure-sc-config-0-clusterfile.mongodb
        kubectl certificate approve my-secure-sc-config-1-clusterfile.mongodb
        kubectl certificate approve my-secure-sc-config-2-clusterfile.mongodb
        kubectl certificate approve my-secure-sc-mongos-0-clusterfile.mongodb
        kubectl certificate approve my-secure-sc-mongos-1-clusterfile.mongodb

---
title: "Save your |k8s-configmap|."
stepnum: 0
level: 4
ref: save-k8s-configmap
---
title: "Update your |k8s-configmap| with X.509 enabled."
stepnum: 0
level: 4
ref: create-k8s-configmap
content: |

  Invoke the |k8s| command to update your |k8s-configmap|:

  .. code-block:: sh

      kubectl apply -f <myconfigmap.yaml>

---
title: "Verify your |k8s-configmap|."
stepnum: 0
level: 4
ref: verify-k8s-configmap
content: |

  Invoke the |k8s| command to verify your |k8s-configmap|:

  .. code-block:: sh

     kubectl describe configmaps <myconfigmap>

  This command returns a ConfigMap description in the shell:

  .. code-block:: sh
     :copyable: false

     Name:           <myconfigmap>
     Namespace:      <metadata.namespace>
     Labels:         <none>
     Annotations:    <none>
---
title: "Approve the X.509 client certificates for the Agents."
stepnum: 0
level: 4
ref: approve-agent-certificates
content: |

  Run the following command to verify the agent certificate signing
  requests are pending:

  .. code-block:: sh

     kubectl get csr

  The command returns the following output:

  .. code-block:: sh
     :copyable: false

     NAME                           AGE       REQUESTOR                                                   CONDITION
     mms-automation-agent.mongodb   4s        system:serviceaccount:mongodb:mongodb-enterprise-operator   Pending

  Approve the certificate for each agent using the ``NAME`` field
  above in the following command:

  .. code-block:: sh

     kubectl certificate approve <NAME>

  The following commands approve the agent |csrs|:

  .. code-block:: sh

     kubectl certificate approve mms-automation-agent.mongodb

---
title: "Retrieve the CSRs for each host and agent in your deployment."
stepnum: 0
level: 4
ref: get-csrs
content: |

  Invoke the following command to retrieve the |csrs| for each host:

  .. code-block:: sh

     kubectl get csr

  The command's output resembles the following:

  .. literalinclude:: /includes/code-examples/responses/k8s-cert-output.sh
     :language: sh
     :copyable: false
     :linenos:
     :start-after: {{startTag}}
     :end-before: {{endTag}}

---
title: "Approve the CSR for each host in your deployment."
stepnum: 0
level: 4
ref: approve-host-csrs
content: |

  Using the values returned in the ``NAME`` column, approve each
  certificate from the previous command's output using the following
  command:

  .. code-block:: sh

     kubectl certificate approve <NAME>

  .. example::

     The following commands approve the CSRs for the {{k8sResource}}
     example:

     .. literalinclude:: /includes/code-examples/requests/k8s-cert-input.sh
        :language: sh
        :start-after: {{startTag}}
        :end-before: {{endTag}}

  |kubectl| prints a message to the console when a certificate is
  approved.

---
title: "Approve the CSR for each agent in your deployment."
stepnum: 0
level: 4
ref: approve-client-csrs
content: |

  Using the values returned in the ``NAME`` column, approve each
  certificate from the previous command's output using the following
  command:

  .. code-block:: sh

     kubectl certificate approve <NAME>

  .. example::

     The following commands approve the CSRs for the {{k8sResource}}
     example:

     .. literalinclude:: /includes/code-examples/requests/k8s-cert-input.sh
        :language: sh
        :start-after: {{startTag}}
        :end-before: {{endTag}}

  |kubectl| prints a message to the console when a certificate is
  approved.

---
title: "Retrieve the cluster file CSR for each host in your deployment."
stepnum: 0
level: 4
ref: get-clusterfile-csrs
content: |

  When :setting:`spec.security.clusterAuthenticationMode` is set to
  ``x509``, |k8s-op-short| generates an additional |csr| per host for
  the clusterfile.

  After the first batch of certificates are approved, run the
  command to retrieve the |csrs| again:

  .. code-block:: sh

     kubectl get csr

  The clusterfile |csrs| are now present in the output:

  .. literalinclude:: /includes/code-examples/responses/k8s-cert-output.sh
     :language: sh
     :copyable: false
     :linenos:
     :start-after: {{startTag}}
     :end-before: {{endTag}}

  .. note::

     The |k8s-op-short| generates |csrs| for the {+mdbagent+}s when
     MongoDB resources are present.

---
title: "Approve the cluster file CSR for each host in your deployment."
stepnum: 0
level: 4
ref: approve-clusterfile-csrs
content: |

  Approve the clusterfile |csrs| using the same command:

  .. code-block:: sh

     kubectl certificate approve <NAME>

  .. example::

     The following commands approve the clusterfile certificates:

     .. literalinclude:: /includes/code-examples/requests/k8s-cert-input.sh
        :language: sh
        :start-after: {{startTag}}
        :end-before: {{endTag}}

---
title: "Create the |k8s-secret| for your TLS certificates."
stepnum: 0
level: 4
ref: create-rs-tls-secret
content: |

  Run this ``kubectl`` command to create the |k8s-secret| that stores
  the replica set's certificates:

  .. code-block:: sh

     kubectl create secret generic <metadata.name>-cert \
       --from-file=<metadata.name>-0-pem \
       --from-file=<metadata.name>-1-pem \
       --from-file=<metadata.name>-2-pem

  This example covers a three-member replica set. If you have more than
  three members, you can add them to the certificate using the
  ``--from-file`` option.

---
title: "Create the |k8s-secret| for your X.509 certificates."
stepnum: 0
level: 4
ref: create-rs-x509-secret
content: |

  Run this ``kubectl`` command to create the |k8s-secret| that stores
  the replica set's certificates:

  .. code-block:: sh

     kubectl create secret generic <metadata.name>-clusterfile \
       --from-file=<metadata.name>-0-pem \
       --from-file=<metadata.name>-1-pem \
       --from-file=<metadata.name>-2-pem

  This example covers a three-member replica set. If you have more than
  three members, you can add them to the certificate using the
  ``--from-file`` option.

---
title: "Create the |k8s-configmap| to link your |certauth| with your deployment."
stepnum: 0
level: 4
ref: create-rs-tls-configmap
content: |

  Run this ``kubectl`` command to link your |certauth| to your replica
  set:

  .. code-block:: sh

     kubectl create configmap custom-ca --from-file=ca-pem

---
title: "Create the |k8s-secret| for your Shards' TLS certificates."
stepnum: 0
level: 4
ref: create-sc-shards-tls-secret
content: |

  Run this ``kubectl`` command to create the |k8s-secret| that stores
  the sharded cluster shards' certificates:

  .. code-block:: sh

     kubectl -n mongodb create secret generic <metadata.name>-0-cert \
            --from-file=<metadata.name>-0-0-pem \
            --from-file=<metadata.name>-0-1-pem \
            --from-file=<metadata.name>-0-2-pem \
            --from-file=<metadata.name>-0-3-pem \
            --from-file=<metadata.name>-0-4-pem

     kubectl -n mongodb create secret generic <metadata.name>-1-cert \
            --from-file=<metadata.name>-1-0-pem \
            --from-file=<metadata.name>-1-1-pem \
            --from-file=<metadata.name>-1-2-pem \
            --from-file=<metadata.name>-1-3-pem \
            --from-file=<metadata.name>-1-4-pem

  This example covers a two-shard sharded cluster with five members per
  shard. If you have more than two shards or five members per shard,
  you can add them to the certificate using the ``--from-file`` option.

---
title: "Create the |k8s-secret| for your config server's TLS certificates."
stepnum: 0
level: 4
ref: create-sc-config-tls-secret
content: |

  Run this ``kubectl`` command to create the |k8s-secret| that stores
  the sharded cluster config server's certificates:

  .. code-block:: sh

     kubectl -n mongodb create secret generic <metadata.name>-config-cert \
            --from-file=<metadata.name>-config-0-pem \
            --from-file=<metadata.name>-config-1-pem \
            --from-file=<metadata.name>-config-2-pem

---
title: "Create the |k8s-secret| for your mongos server's TLS certificates."
stepnum: 0
level: 4
ref: create-sc-mongos-tls-secret
content: |

  Run this ``kubectl`` command to create the |k8s-secret| that stores
  the sharded cluster |mongos| certificates:

  .. code-block:: sh

     kubectl -n mongodb create secret generic <metadata.name>-mongos-cert \
            --from-file=<metadata.name>-mongos-0-pem \
            --from-file=<metadata.name>-mongos-1-pem \
            --from-file=<metadata.name>-mongos-2-pem

---
title: "Create the |k8s-secret| for your Shards' X.509 certificates."
stepnum: 0
level: 4
ref: create-sc-shards-x509-secret
content: |

  Run this ``kubectl`` command to create the |k8s-secret| that stores
  the sharded cluster shards' certificates:

  .. code-block:: sh

     kubectl -n mongodb create secret generic <metadata.name>-0-clusterfile \
            --from-file=<metadata.name>-0-0-pem \
            --from-file=<metadata.name>-0-1-pem \
            --from-file=<metadata.name>-0-2-pem \
            --from-file=<metadata.name>-0-3-pem \
            --from-file=<metadata.name>-0-4-pem

     kubectl -n mongodb create secret generic <metadata.name>-1-clusterfile \
            --from-file=<metadata.name>-1-0-pem \
            --from-file=<metadata.name>-1-1-pem \
            --from-file=<metadata.name>-1-2-pem \
            --from-file=<metadata.name>-1-3-pem \
            --from-file=<metadata.name>-1-4-pem

  This example covers a two-shard sharded cluster with five members per
  shard. If you have more than two shards or five members per shard,
  you can add them to the certificate using the ``--from-file`` option.

---
title: "Create the |k8s-secret| for your config server's X.509 certificates."
stepnum: 0
level: 4
ref: create-sc-config-x509-secret
content: |

  Run this ``kubectl`` command to create the |k8s-secret| that stores
  the sharded cluster config server's certificates:

  .. code-block:: sh

     kubectl -n mongodb create secret generic <metadata.name>-config-clusterfile \
            --from-file=<metadata.name>-config-0-pem \
            --from-file=<metadata.name>-config-1-pem \
            --from-file=<metadata.name>-config-2-pem

---
title: "Create the |k8s-secret| for your mongos server's X.509 certificates."
stepnum: 0
level: 4
ref: create-sc-mongos-x509-secret
content: |

  Run this ``kubectl`` command to create the |k8s-secret| that stores
  the sharded cluster |mongos| certificates:

  .. code-block:: sh

     kubectl -n mongodb create secret generic <metadata.name>-mongos-clusterfile \
            --from-file=<metadata.name>-mongos-0-pem \
            --from-file=<metadata.name>-mongos-1-pem \
            --from-file=<metadata.name>-mongos-2-pem

---
title: "Create the |k8s-configmap| to link your |certauth| with your deployment."
stepnum: 0
level: 4
ref: create-sc-tls-configmap
content: |

  Run this ``kubectl`` command to link your |certauth| to your replica
  set:

  .. code-block:: sh

     kubectl create configmap custom-ca --from-file=ca-pem


...


