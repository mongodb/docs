=======================
Back up MongoDB Systems
=======================

.. default-domain:: mongodb

.. contents::
   :backlinks: none
   :local:

Any disaster recovery plan should include regular backups to a
secure storage medium, and a procedure to verify the integrity of
all backups. MongoDB supports several backup options, each with their
own advantages and considerations.

Backup Methods
--------------

.. list-table::
   :header-rows: 1

   * -
     - ``mongodump``
     - Snapshots
     - MMS Backup

   * - Point In Time Replica Set Recovery
     - Snapshot moments only
     - Snapshot moments only
     - Arbitrary points in the last 24 hours

   * - System Overhead
     - High
     - Varies
     - Low

   * - Impact on MongoDB Operation
     - High
     - Low
     - Low

   * - Impact on Underlying System
     - High
     - Varies
     - Low

   * - Scalable
     - No
     - With work
     - Yes

   * - Consistent Sharded Cluster Snapshot
     - Difficult
     - Difficult
     - Yes

MMS Backup
~~~~~~~~~~

The `MongoDB Management Service
<https://mms.10gen.com/?pk_campaign=MongoDB-Org&pk_kwd=Backup-Docs>`_
supports :mms:`backup and restore for MongoDB deployments </backup>`.

Operation
`````````

Replica Sets
^^^^^^^^^^^^

:mms:`MMS backups for replica sets
</backup/tutorial/enable-backup-for-replica-set/>`
uses a small backup agent. The backup agent initially
replicates a secondary member of the running deployment to a remote
backup server. The backup agent then follows the replica set oplog in
real time and mirrors all writes onto the remote server.

MMS sends out an alert if the backup agent becomes unreachable or if
the remote backup falls too far behind the running deployment.

Sharded Clusters
^^^^^^^^^^^^^^^^

Sharded clusters run multiple independent replica sets, each of which
is a single shard of the cluster. MongoDB apportions new documents
among the shards, and the MongoDB balancer periodically migrates data
from one shard to another to ensure a balanced application load across
all shards.

:mms:`MMS backups for sharded clusters
</backup/tutorial/enable-backup-for-sharded-cluster/>`
initially temporarily stops the balancer and inserts a special
document into each shard. This document defines the point-in-time of
the MMS snapshot.

The backup agent follows the oplog, producing one snapshot per shard,
up to the point-in-time defined by the special document.

The backup agent uses the same operation on a regular schedule to
make additional snapshots over time.

Benefits
````````

MMS is easy to set up and use. The backup agent is :mms:`simple to install
</backup/tutorial/install-and-start-backup-agent/>`
and :mms:`configure
</backup/tutorial/configure-backup-agent/>`.
It is also straightforward to :mms:`activate backups for replica sets
</backup/tutorial/enable-backup-for-replica-set/>`
and to :mms:`activate backups for sharded clusters
</backup/tutorial/enable-backup-for-sharded-cluster/>`.

MMS replicates from secondaries, which puts a minimal load on the
running deployment.

For replica sets, oplog tracking ensures your ability to restore to
any point in time within the past 24 hours. Regular snapshots for
replica sets and sharded clusters ensure your ability to restore to
earlier states as well.

To restore from an MMS backup, you can :mms:`download a .tar.gz file
<http://mms.mongodb.com/help/backup/tutorial/restore-from-snapshot/>`
from the remote MMS servers, or have MMS push a restored set of
ready-to-use data files onto a local directory on your server.

Considerations
``````````````

MMS can only back up replica sets and sharded cluster config
servers.

Filesystem Volume Snapshots
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Operation
``````````

Filesystem snapshots are third-party tools that most commonly use
copy-on-write to create a point-in-time backup of a full filesystem.

MongoDB supports :doc:`snapshotting a replica set
</tutorial/backup-and-restore-with-filesystem-snapshots>`
and :doc:`snapshotting a full sharded cluster
</tutorial/backup-sharded-cluster-with-filesystem-snapshots>`.

Benefits
````````

Snapshots back up the state of the database at a known point in time.
This supports restoring a deployment to a known state.

Incremental snapshots can be a relatively inexpensive option, because
they use a small fraction of the computing resources needed for a
full backup.

A full snapshot is also a relatively low-resource operation because
copy-on-write uses similar resources as normal levels of application
queries.

Considerations
``````````````

Snapshots impose additional constraints on the type of filesystem
and block devices used in a MongoDB deployment. Not all filesystems
and block devices support snapshotting.

Snapshots back up indexes and padding as well as data, which produce
space-inefficient backups.

MongoDB Dump and Restore Tools
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Operation
`````````

MongoDB provides a versatile :program:`mongodump` tool that uses
MongoDB's native query operations to dump collection data to an
efficiently packed file.

Benefits
````````

:program:`mongodump` discards indexes and padding and stores only
the data to be backed up.

:program:`mongodump` supports backing up only needed collections.

:program:`mongodump` supports :doc:`tracking the oplog at run-time
</tutorial/backup-and-restore-with-binary-database-dumps>` in order
to create a point-in-time backup.

:program:`mongodump` reads data files in a variety of situations:

- :program:`mongodump` can connect directly to a running
  :program:`mongod` instance.

- if no :program:`mongod` is running, you may configure
  :program:`mongodump` to read disk files directly.

- :program:`mongodump` can :doc:`back up an entire
  sharded cluster to a single output file
  </tutorial/backup-small-sharded-cluster-with-mongodump>`.

- :program:`mongodump` can :doc:`back up each shard of a
  sharded cluster
  </tutorial/backup-sharded-cluster-with-database-dumps>` individually.

Considerations
``````````````

:program:`mongodump` uses MongoDB's native query operations, which
use more computing resources than copying data files directly.

:program:`mongodump` does not back up local collections by
default.

:program:`mongodump` cannot create a point-in-time backup of a
standalone :program:`mongod` instance. Standalone instances lack
an :term:`oplog`.

Copy Data Files
~~~~~~~~~~~~~~~

Operation
`````````

MongoDB data files may be copied directly to a backup medium. For a
single :program:`mongod` instance, you must disable application writes
and copy the data files from ``/data/db``.

For a :term:`replica set`, you may shut down a secondary member
and copy the data files from its ``/data/db`` directory while still
allowing application writes to the primary member.

Benefits
````````

Copying data files uses common tools available by default on any
operating system.

Considerations
``````````````

Disabling writes on a standalone :program:`mongod` instance may
interfere with application availability.

As in the case of filesystem snapshots, a simple file copy includes
indexes and padding that are larger than needed for an efficient
backup.

Deployment Considerations
-------------------------

Replica Sets
~~~~~~~~~~~~

All replica sets should follow these best practices in order to
support more robust backups:

- Always run with journaling enabled. This is MongoDB's default, and
  you should not change it.

- Create backups from secondary nodes instead of primaries where
  feasible.

- Use a volume manager that supports incremental snapshots, and
  include these in your backup plan.

Sharded Clusters
~~~~~~~~~~~~~~~~

Any approach to sharded cluster backups must ensure data validity
and consistency between shards. This may require :doc:`turning off
the balancer </tutorial/schedule-backup-window-for-sharded-clusters>`
or stopping application writes.

When backing up any sharded cluster, you must also :doc:`back up the
config server metadata </tutorial/backup-sharded-cluster-metadata>`.

Testing and Restoring Backups
-----------------------------

Include backup tests in any disaster recovery plan. This
could involve :doc:`restoring a single replica set
</tutorial/restore-replica-set-from-backup>`, :doc:`restoring just
a single shard of a cluster </tutorial/restore-single-shard>`,
or :doc:`restoring a complete sharded cluster
</tutorial/restore-sharded-cluster>`.
