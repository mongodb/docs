# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/developers.txt:5
# d43434eb188f4ea198e5cd52ed01d5cd
msgid "FAQ: MongoDB for Application Developers"
msgstr ""

#: ../source/faq/developers.txt:9
# 5bf4d11f22874b388162e2e868c4a762
msgid "This document answers common questions about application development using MongoDB."
msgstr ""

#: ../source/faq/developers.txt:12
# 14ee89bd9f1f4d97a9b5a131aadaa269
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/developers.txt:19
# 68267ad91e6d439597439598c7532980
msgid "What is a namespace in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:21
# d9903bec44af47079b55f4dfc1e66769
msgid "A \"namespace\" is the concatenation of the :term:`database` name and the :term:`collection` names [#indexes-are-namespaces]_ with a period character in between."
msgstr ""

#: ../source/faq/developers.txt:25
# df79455d1d6044d3b33e133d4ae6d9f2
msgid "Collections are containers for documents that share one or more indexes. Databases are groups of collections stored on disk using a single set of data files. [#ns-limit]_"
msgstr ""

#: ../source/faq/developers.txt:29
# c13fc43ce349470c9705cf535a09c2ff
msgid "For an example ``acme.users`` namespace, ``acme`` is the database name and ``users`` is the collection name. Period characters **can** occur in collection names, so that ``acme.user.history`` is a valid namespace, with ``acme`` as the database name, and ``user.history`` as the collection name."
msgstr ""

#: ../source/faq/developers.txt:35
# 10d82cc940634dfbb6a821566082f7f8
msgid "While data models like this appear to support nested collections, the collection namespace is flat, and there is no difference from the perspective of MongoDB between ``acme``, ``acme.users``, and ``acme.records``."
msgstr ""

#: ../source/faq/developers.txt:40
# cdc655e095cc4fcd876a43cb61eb3308
msgid "Each index also has its own namespace."
msgstr ""

#: ../source/faq/developers.txt:42
# bcc75114f9a34c09983862e1c7ff2aea
msgid "MongoDB database have a configurable limit on the :limit:`number of namespaces <Number of Namespaces>` in a database."
msgstr ""

#: ../source/faq/developers.txt:46
# d98b564bb3344afb954369d6b8215dc6
msgid "If you remove a document, does MongoDB remove it from disk?"
msgstr ""

#: ../source/faq/developers.txt:48
#: ../source/faq/developers.txt:125
# 0a9afc01e6084ec49526b7405d0246f6
# 356efca4bedb4982824c4444feaac3df
msgid "Yes."
msgstr ""

#: ../source/faq/developers.txt:50
# 9b68bbf916584ca0bf465016bd82564e
msgid "When you use :method:`~db.collection.remove()`, the object will no longer exist in MongoDB's on-disk data storage."
msgstr ""

#: ../source/faq/developers.txt:54
# 1578393abb514abd916516bbfa3ede54
msgid "When does MongoDB write updates to disk?"
msgstr ""

#: ../source/faq/developers.txt:56
# 0768c3957f9245ed8a8f520fcdb28d7b
msgid "MongoDB flushes writes to disk on a regular interval. In the default configuration, MongoDB writes data to the main data files on disk every 60 seconds and commits the :term:`journal` roughly every 100 milliseconds. These values are configurable with the :setting:`~storage.journal.commitIntervalMs` and :setting:`~storage.syncPeriodSecs`."
msgstr ""

#: ../source/faq/developers.txt:62
# 2fb2e391da16473abf39a318bfa680d2
msgid "These values represent the *maximum* amount of time between the completion of a write operation and the point when the write is durable in the journal, if enabled, and when MongoDB flushes data to the disk. In many cases MongoDB and the operating system flush data to disk more frequently, so that the above values represents a theoretical maximum."
msgstr ""

#: ../source/faq/developers.txt:69
# c06c726a4a304b02ba4f0d8244e2cc23
msgid "However, by default, MongoDB uses a \"lazy\" strategy to write to disk. This is advantageous in situations where the database receives a thousand increments to an object within one second, MongoDB only needs to flush this data to disk once. In addition to the aforementioned configuration options, you can also use :dbcommand:`fsync` and :doc:`/reference/write-concern` to modify this strategy."
msgstr ""

#: ../source/faq/developers.txt:77
# 9a3b1a1a43ac4163b595fdd6654cefdb
msgid "How do I do transactions and locking in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:79
# bf1f12ab8e264e3a9efb3a6cc17bb7ea
msgid "MongoDB does not have support for traditional locking or complex transactions with rollback. MongoDB aims to be lightweight, fast, and predictable in its performance. This is similar to the MySQL MyISAM autocommit model. By keeping transaction support extremely simple, MongoDB can provide greater performance especially for :term:`partitioned <partition>` or :term:`replicated <replication>` systems with a number of database server processes."
msgstr ""

#: ../source/faq/developers.txt:87
# 8a4be507c755432580082608ae93ac33
msgid "MongoDB *does* have support for atomic operations *within* a single document. Given the possibilities provided by nested documents, this feature provides support for a large number of use-cases."
msgstr ""

#: ../source/faq/developers.txt:91
# c86c2b42bc454ae491fd5ea08bbb0b85
msgid "The :doc:`/core/write-operations-atomicity` page."
msgstr ""

#: ../source/faq/developers.txt:94
# 27db0867d23d4acd8f33236bc33492cf
msgid "How do you aggregate data with MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:96
# 18a42706e6734ebd829b7fe86a38da7f
msgid "In version 2.1 and later, you can use the new :doc:`aggregation framework </core/aggregation>`, with the :dbcommand:`aggregate` command."
msgstr ""

#: ../source/faq/developers.txt:100
# 24d96d119ef4451b91a52fc7f3b49b26
msgid "MongoDB also supports :term:`map-reduce` with the :dbcommand:`mapReduce` command, as well as basic aggregation with the :dbcommand:`group`, :dbcommand:`count`, and :dbcommand:`distinct`. commands."
msgstr ""

#: ../source/faq/developers.txt:105
# 2d9fda175fb24747b1ec48a0b68ad594
msgid "The :doc:`/aggregation` page."
msgstr ""

#: ../source/faq/developers.txt:108
# 09faa9a0d10a4029a9229ff92d82dae4
msgid "Why does MongoDB log so many \"Connection Accepted\" events?"
msgstr ""

#: ../source/faq/developers.txt:110
# 5b81e7c13a7f4340a24a80de5a411b64
msgid "If you see a very large number connection and re-connection messages in your MongoDB log, then clients are frequently connecting and disconnecting to the MongoDB server. This is normal behavior for applications that do not use request pooling, such as CGI. Consider using FastCGI, an Apache Module, or some other kind of persistent application server to decrease the connection overhead."
msgstr ""

#: ../source/faq/developers.txt:117
# 94de096428a04c3abe99798b5d5a20cc
msgid "If these connections do not impact your performance you can use the run-time :setting:`~systemLog.quiet` option or the command-line option :option:`--quiet <mongod --quiet>` to suppress these messages from the log."
msgstr ""

#: ../source/faq/developers.txt:123
# 1787ca7c5b5f4932b0a0eb6bc52db5ee
msgid "Does MongoDB run on Amazon EBS?"
msgstr ""

#: ../source/faq/developers.txt:127
# 1d9803d99ce94e5190a338a8c1e3d6d8
msgid "MongoDB users of all sizes have had a great deal of success using MongoDB on the EC2 platform using EBS disks."
msgstr ""

#: ../source/faq/developers.txt:130
# 50605b29c54a4814bd3cdd2077e76871
msgid ":ecosystem:`Amazon EC2 </platforms/amazon-ec2>`"
msgstr ""

#: ../source/faq/developers.txt:133
# e8ea1bdc303e4fd68a03358696af2560
msgid "Why are MongoDB's data files so large?"
msgstr ""

#: ../source/faq/developers.txt:135
# 8aaaff38bdb0463ab99c67f0b11e256e
msgid "MongoDB aggressively preallocates data files to reserve space and avoid file system fragmentation. You can use the :setting:`storage.smallFiles` setting to modify the file preallocation strategy."
msgstr ""

#: ../source/faq/developers.txt:139
# b66740989681494fa41c9bab33314b6f
msgid ":ref:`faq-disk-size`"
msgstr ""

#: ../source/faq/developers.txt:144
# b6480ddf539041388ad4fe1933b9f50c
msgid "How do I optimize storage use for small documents?"
msgstr ""

#: ../source/faq/developers.txt:146
# 4bf159cd814a4543b007e1783ab76392
msgid "Each MongoDB document contains a certain amount of overhead. This overhead is normally insignificant but becomes significant if all documents are just a few bytes, as might be the case if the documents in your collection only have one or two fields."
msgstr ""

#: ../source/faq/developers.txt:151
# aa1604c3b06343b2b5c37d9a9c82dc9a
msgid "Consider the following suggestions and strategies for optimizing storage utilization for these collections:"
msgstr ""

#: ../source/faq/developers.txt:154
# 7b2251a0955e4199a45bd597b4c14fb5
msgid "Use the ``_id`` field explicitly."
msgstr ""

#: ../source/faq/developers.txt:156
# 06512f072c894efe9428cc1872add338
msgid "MongoDB clients automatically add an ``_id`` field to each document and generate a unique 12-byte :term:`ObjectId` for the ``_id`` field. Furthermore, MongoDB always indexes the ``_id`` field. For smaller documents this may account for a significant amount of space."
msgstr ""

#: ../source/faq/developers.txt:162
# f9a575b70c3e4229a6d5bbd735c14491
msgid "To optimize storage use, users can specify a value for the ``_id`` field explicitly when inserting documents into the collection. This strategy allows applications to store a value in the ``_id`` field that would have occupied space in another portion of the document."
msgstr ""

#: ../source/faq/developers.txt:167
# 70b031fd3afa42c3894ef041101db24d
msgid "You can store any value in the ``_id`` field, but because this value serves as a primary key for documents in the collection, it must uniquely identify them. If the field's value is not unique, then it cannot serve as a primary key as there would be collisions in the collection."
msgstr ""

#: ../source/faq/developers.txt:173
# 351d6929b49049a88a4a311f98004476
msgid "Use shorter field names."
msgstr ""

#: ../source/faq/developers.txt:175
# efba5b74e5ce4efabe134fd542cb3f0d
msgid "MongoDB stores all field names in every document. For most documents, this represents a small fraction of the space used by a document; however, for small documents the field names may represent a proportionally large amount of space. Consider a collection of documents that resemble the following:"
msgstr ""

#: ../source/faq/developers.txt:185
# 4336d6cbc5b0475c81ace557c47e941f
msgid "If you shorten the field named ``last_name`` to ``lname`` and the field named ``best_score`` to ``score``, as follows, you could save 9 bytes per document."
msgstr ""

#: ../source/faq/developers.txt:193
# fb85d78c34e94fd393fbb88d726beb9f
msgid "Shortening field names reduces expressiveness and does not provide considerable benefit for larger documents and where document overhead is not of significant concern. Shorter field names do not reduce the size of indexes, because indexes have a predefined structure."
msgstr ""

#: ../source/faq/developers.txt:199
# 4969ffd83d4a4e4bba1b6ddc43b39e38
msgid "In general it is not necessary to use short field names."
msgstr ""

#: ../source/faq/developers.txt:201
# 0d616bff55ce4a249f11e6ad257cacc2
msgid "Embed documents."
msgstr ""

#: ../source/faq/developers.txt:203
# 0517b111cc494b46a8681aa955ec6534
msgid "In some cases you may want to embed documents in other documents and save on the per-document overhead."
msgstr ""

#: ../source/faq/developers.txt:209
# fd4ed903970642feac940f5761ee1877
msgid "When should I use GridFS?"
msgstr ""

#: ../source/faq/developers.txt:211
# 6c6907a82376418e8c1e0e6f5fce82c9
msgid "For documents in a MongoDB collection, you should always use :term:`GridFS` for storing files larger than 16 MB."
msgstr ""

#: ../source/faq/developers.txt:214
# 1bc7529b208748fca37c81cc4e1a7035
msgid "In some situations, storing large files may be more efficient in a MongoDB database than on a system-level filesystem."
msgstr ""

#: ../source/faq/developers.txt:217
# 22f71242d9354cef8ee21d147bc07095
msgid "If your filesystem limits the number of files in a directory, you can use GridFS to store as many files as needed."
msgstr ""

#: ../source/faq/developers.txt:220
# ea2b5e19ffd74a4cbc832794d454bc88
msgid "When you want to keep your files and metadata automatically synced and deployed across a number of systems and facilities.  When using :ref:`geographically distributed replica sets <replica-set-geographical-distribution>` MongoDB can distribute files and their metadata automatically to a number of :program:`mongod` instances and facilities."
msgstr ""

#: ../source/faq/developers.txt:227
# 07902e62152645688b0583db4279b760
msgid "When you want to access information from portions of large files without having to load whole files into memory, you can use GridFS to recall sections of files without reading the entire file into memory."
msgstr ""

#: ../source/faq/developers.txt:232
# fdfa8fb3fdb2450faa8861b19600f5ac
msgid "Do not use GridFS if you need to update the content of the entire file atomically. As an alternative you can store multiple versions of each file and specify the current version of the file in the metadata. You can update the metadata field that indicates \"latest\" status in an atomic update after uploading the new version of the file, and later remove previous versions if needed."
msgstr ""

#: ../source/faq/developers.txt:239
# 087c20a9a13943629850740d53fe8f60
msgid "Furthermore, if your files are all smaller the 16 MB :limit:`BSON Document Size` limit, consider storing the file manually within a single document. You may use the BinData data type to store the binary data. See your :doc:`drivers </applications/drivers>` documentation for details on using BinData."
msgstr ""

#: ../source/faq/developers.txt:245
# 289d010c1b2a4c53a26d429eb0c7d0f3
msgid "For more information on GridFS, see :doc:`/core/gridfs`."
msgstr ""

#: ../source/faq/developers.txt:248
# 8fdd5e6e6c4d438eab166e084bbce084
msgid "How does MongoDB address SQL or Query injection?"
msgstr ""

#: ../source/faq/developers.txt:251
# f69d6f5a935040c1910931c2ad81c803
msgid "BSON"
msgstr ""

#: ../source/faq/developers.txt:253
# 21035c618c4a4b408219d0ee4e5216c0
msgid "As a client program assembles a query in MongoDB, it builds a BSON object, not a string. Thus traditional SQL injection attacks are not a problem. More details and some nuances are covered below."
msgstr ""

#: ../source/faq/developers.txt:257
# 27977d0b96334b82b2e776c6f14a0388
msgid "MongoDB represents queries as :term:`BSON` objects. Typically :doc:`client libraries </applications/drivers>` provide a convenient, injection free, process to build these objects. Consider the following C++ example:"
msgstr ""

#: ../source/faq/developers.txt:267
# 88822f3166d14c6ab42579da0e726a80
msgid "Here, ``my_query`` then will have a value such as ``{ name : \"Joe\" }``. If ``my_query`` contained special characters, for example ``,``, ``:``, and ``{``, the query simply wouldn't match any documents. For example, users cannot hijack a query and convert it to a delete."
msgstr ""

#: ../source/faq/developers.txt:274
# 5d25a60a163045f29128d1c301de647b
msgid "JavaScript"
msgstr ""

#: ../source/includes/fact-disable-javascript-with-noscript.rst:1
# 1c143d807784460fbebc1b55083f81b8
msgid "You can disable all server-side execution of JavaScript, by passing the :option:`--noscripting <mongod --noscripting>` option on the command line or setting :setting:`security.javascriptEnabled` in a configuration file."
msgstr ""

#: ../source/faq/developers.txt:280
# 199ce09a628b49d382fad4da22d99c05
msgid "All of the following MongoDB operations permit you to run arbitrary JavaScript expressions directly on the server:"
msgstr ""

#: ../source/faq/developers.txt:283
# 8fb9ae9152074cc5be28eb6421bc2269
msgid ":query:`$where`"
msgstr ""

#: ../source/faq/developers.txt:284
# 72618ae085b74519af7d0d384837f066
msgid ":dbcommand:`mapReduce`"
msgstr ""

#: ../source/faq/developers.txt:285
# a562a4513115480b9d96dab9aeed754f
msgid ":dbcommand:`group`"
msgstr ""

#: ../source/faq/developers.txt:287
# aef3b74f97674e63813832ccd1f91ae7
msgid "You must exercise care in these cases to prevent users from submitting malicious JavaScript."
msgstr ""

#: ../source/faq/developers.txt:290
# a4d4cb3f8db24c89a836befa51973b63
msgid "Fortunately, you can express most queries in MongoDB without JavaScript and for queries that require JavaScript, you can mix JavaScript and non-JavaScript in a single query. Place all the user-supplied fields directly in a :term:`BSON` field and pass JavaScript code to the :query:`$where` field."
msgstr ""

#: ../source/faq/developers.txt:296
# b905d60eabb941ee92871d959a3a444f
msgid "If you need to pass user-supplied values in a :query:`$where` clause, you may escape these values with the ``CodeWScope`` mechanism. When you set user-submitted values as variables in the scope document, you can avoid evaluating them on the database server."
msgstr ""

#: ../source/faq/developers.txt:304
# 130476d7ec404a2589fb748d1090abe2
msgid "Dollar Sign Operator Escaping"
msgstr ""

#: ../source/faq/developers.txt:306
# b1acfcfc807a49f59d306a2655f54a9d
msgid "Field names in MongoDB's query language have semantic meaning. The dollar sign (i.e ``$``) is a reserved character used to represent :doc:`operators </reference/operator>` (i.e. :update:`$inc`.) Thus, you should ensure that your application's users cannot inject operators into their inputs."
msgstr ""

#: ../source/faq/developers.txt:312
# bea29e5384ff4ad7b86da8a83fd9c98f
msgid "In some cases, you may wish to build a BSON object with a user-provided key.  In these situations, keys will need to substitute the reserved ``$`` and ``.`` characters. Any character is sufficient, but consider using the Unicode full width equivalents: ``U+FF04`` (i.e. \"＄\") and ``U+FF0E`` (i.e. \"．\")."
msgstr ""

#: ../source/faq/developers.txt:318
# 4381152660824800a47a60f915542022
msgid "Consider the following example:"
msgstr ""

#: ../source/faq/developers.txt:324
# c51c9ac3555d4113beb44a1b8be6fe3a
msgid "The user may have supplied a ``$`` value in the ``a_key`` value. At the same time, ``my_object`` might be ``{ $where : \"things\" }``. Consider the following cases:"
msgstr ""

#: ../source/faq/developers.txt:328
# fa2d2bf614784a358810c930842b20e2
msgid "**Insert**. Inserting this into the database does no harm. The insert process does not evaluate the object as a query."
msgstr ""

#: ../source/faq/developers.txt:333
# 548a4f268ece4ed3aab524fe94ccbd23
msgid "MongoDB client drivers, if properly implemented, check for reserved characters in keys on inserts."
msgstr ""

#: ../source/faq/developers.txt:336
# 024cf42087024dbfb20010cc3c2a7c50
msgid "**Update**.  The :method:`~db.collection.update()` operation permits ``$`` operators in the update argument but does not support the :query:`$where` operator. Still, some users may be able to inject operators that can manipulate a single document only. Therefore your application should escape keys, as mentioned above, if reserved characters are possible."
msgstr ""

#: ../source/faq/developers.txt:343
# 79682fe23c4349beac427866e36fb3c6
msgid "**Query** Generally this is not a problem for queries that resemble ``{ x : user_obj }``: dollar signs are not top level and have no effect. Theoretically it may be possible for the user to build a query themselves. But checking the user-submitted content for ``$`` characters in key names may help protect against this kind of injection."
msgstr ""

#: ../source/faq/developers.txt:351
# 11ac464988614485873d8e3c9ef11d48
msgid "Driver-Specific Issues"
msgstr ""

#: ../source/faq/developers.txt:353
# 2447009fc3054dc68dbc299024205998
msgid "See the \"`PHP MongoDB Driver Security Notes <http://us.php.net/manual/en/mongo.security.php>`_\" page in the PHP driver documentation for more information"
msgstr ""

#: ../source/faq/developers.txt:360
# 36b87ca1c2d54778a4b2f39777402cf0
msgid "How does MongoDB provide concurrency?"
msgstr ""

#: ../source/faq/developers.txt:362
# 22a3d6c60db04dc5ac13defbb1a4ecdc
msgid "MongoDB implements a readers-writer lock. This means that at any one time, only one client may be writing or any number of clients may be reading, but that reading and writing cannot occur simultaneously."
msgstr ""

#: ../source/faq/developers.txt:367
# 48456cb1047049b8b45a01b2af920f6c
msgid "In standalone and :term:`replica sets <replica set>` the lock's scope applies to a single :program:`mongod` instance or :term:`primary` instance. In a sharded cluster, locks apply to each individual shard, not to the whole cluster."
msgstr ""

#: ../source/faq/developers.txt:372
# cd770947829f4fa7b3e1c0ff7f06a0aa
msgid "For more information, see :doc:`/faq/concurrency`."
msgstr ""

#: ../source/faq/developers.txt:377
# eec25096e7904753a64e6f5071b7c34a
msgid "What is the compare order for BSON types?"
msgstr ""

#: ../source/faq/developers.txt:379
# 0662c084d9694e299631f39f7e380e10
msgid "MongoDB permits documents within a single collection to have fields with different :term:`BSON` types. For instance, the following documents may exist within a single collection."
msgstr ""

#: ../source/includes/fact-sort-order.rst:1
# b577281e9a824ddb84a38ae434de50f2
msgid "When comparing values of different :term:`BSON` types, MongoDB uses the following comparison order, from lowest to highest:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:4
# a76dbf0c1f424b5c87fbccce9406ef63
msgid "MinKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:5
# 2725d6a881774f6ab990e8d5e528877a
msgid "Null"
msgstr ""

#: ../source/includes/fact-sort-order.rst:6
# 1e7dc4daab9c443e956a4180c1a6a550
msgid "Numbers (ints, longs, doubles)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:7
# a92c78ef548d47b69605554b453a7263
msgid "Symbol, String"
msgstr ""

#: ../source/includes/fact-sort-order.rst:8
# 5d43ad63ac654c7c9dfba4d8e9ce8148
msgid "Object"
msgstr ""

#: ../source/includes/fact-sort-order.rst:9
# 397135a6f5234af99652b9d675c636a8
msgid "Array"
msgstr ""

#: ../source/includes/fact-sort-order.rst:10
# ff1894ebcccf4fc3948cf0befa7ca6c2
msgid "BinData"
msgstr ""

#: ../source/includes/fact-sort-order.rst:11
# 00745a31e07a45da8ffe760dc534632a
msgid "ObjectId"
msgstr ""

#: ../source/includes/fact-sort-order.rst:12
# ef11a6e1f5d54b209ad929f9405320c8
msgid "Boolean"
msgstr ""

#: ../source/includes/fact-sort-order.rst:13
# 15cf56d0c1ba4619880374c9df086202
msgid "Date"
msgstr ""

#: ../source/includes/fact-sort-order.rst:14
# ac3245ab51af4e89ab7d2f967bdb0c93
msgid "Timestamp"
msgstr ""

#: ../source/includes/fact-sort-order.rst:15
# 1616b25600b349f990c63b45afe32fed
msgid "Regular Expression"
msgstr ""

#: ../source/includes/fact-sort-order.rst:16
# 6a7742e04350486b8105e431d247a10e
msgid "MaxKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:18
# 7bf96d2cf97849799240b274e054bca0
msgid "MongoDB treats some types as equivalent for comparison purposes. For instance, numeric types undergo conversion before comparison."
msgstr ""

#: ../source/includes/fact-sort-order.rst:21
# 566b750312e8484289a2de20c09f06a2
msgid "Date objects sort before Timestamp objects. Previously Date and Timestamp objects sorted together."
msgstr ""

#: ../source/includes/fact-sort-order.rst:25
# 64ab459cd3184407be5db4d6f4b36537
msgid "The comparison treats a non-existent field as it would an empty BSON Object. As such, a sort on the ``a`` field in documents ``{ }`` and ``{ a: null }`` would treat the documents as equivalent in sort order."
msgstr ""

#: ../source/includes/fact-sort-order.rst:29
# a1145f5878044299bc6d79ae260fd2ef
msgid "With arrays, a less-than comparison or an ascending sort compares the smallest element of arrays, and a greater-than comparison or a descending sort compares the largest element of the arrays. As such, when comparing a field whose value is a single-element array (e.g. ``[ 1 ]``) with non-array fields (e.g. ``2``), the comparison is between ``1`` and ``2``. A comparison of an empty array (e.g. ``[ ]``) treats the empty array as less than ``null`` or a missing field."
msgstr ""

#: ../source/includes/fact-sort-order.rst:37
# d53f5affbd184d61b8b3081145162c7f
msgid "MongoDB sorts ``BinData`` in the following order:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:39
# 00d19fd42a034cd2a16d0ec9bfd61cc7
msgid "First, the length or size of the data."
msgstr ""

#: ../source/includes/fact-sort-order.rst:41
# faba3c8ef9374724acfa70020d746f1c
msgid "Then, by the BSON one-byte subtype."
msgstr ""

#: ../source/includes/fact-sort-order.rst:43
# 8b63b322775d4c2ab49dd5d3b779a1ac
msgid "Finally, by the data, performing a byte-by-byte comparison."
msgstr ""

#: ../source/faq/developers.txt:390
# 75c40286b054459ba9a3ab866dcdde2f
msgid "Consider the following :program:`mongo` example:"
msgstr ""

#: ../source/faq/developers.txt:405
# 79ee149c20c34d6389481446f02034cf
msgid "The :query:`$type` operator provides access to :term:`BSON type <BSON types>` comparison in the MongoDB query syntax. See the documentation on :term:`BSON types` and the :query:`$type` operator for additional information."
msgstr ""

#: ../source/includes/warning-mixing-types.rst:3
# 1b694241726a4a228f7dcd7a9e2ce099
msgid "Data models that associate a field name with different data types within a collection are *strongly* discouraged."
msgstr ""

#: ../source/includes/warning-mixing-types.rst:6
# c20dc64821f242e3b726fb40f6918110
msgid "Without internal consistency complicates application code, and can lead to unnecessary complexity for application developers."
msgstr ""

#: ../source/faq/developers.txt:414
# 77934bcb7e3b41c1bb4bead87b164305
msgid "The :doc:`Tailable Cursors </tutorial/create-tailable-cursor>` page for an example of a C++ use of ``MinKey``."
msgstr ""

#: ../source/faq/developers.txt:426
# 80dd354f1a434a15b5288d0c48e71461
msgid "When multiplying values of mixed types, what type conversion rules apply?"
msgstr ""

#: ../source/faq/developers.txt:428
# dba4ece880be442895f33b3b518ac3b0
msgid "The :update:`$mul` multiplies the numeric value of a field by a number. For multiplication with values of mixed numeric types (32-bit integer, 64-bit integer, float), the following type conversion rules apply:"
msgstr ""

#: ../source/faq/developers.txt:437
# b4093b613d1e4284a835d68b487a79b6
msgid "32-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:438
#: ../source/faq/developers.txt:443
#: ../source/faq/developers.txt:447
#: ../source/faq/developers.txt:448
# 5877041e5f0241008603b7aa6c260dc4
# 068fd1eb14064fcc9273829574563715
# 32e80d01994246329cdf5797f9485edc
# e8cc19b9d5b141d9a561787e5c7956c0
msgid "64-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:439
#: ../source/faq/developers.txt:444
#: ../source/faq/developers.txt:449
#: ../source/faq/developers.txt:452
#: ../source/faq/developers.txt:453
#: ../source/faq/developers.txt:454
# e00bdb61ade0461eb9c218f4e8617928
# f163fb8ee8b44571b1550677ab54797b
# 7999ed83f3dd41a1b4cd85441c20f15f
# a9e7b8bf6a914a1a8293bdb2e3336ded
# a08eee4ea115404cac349b61e7286b93
# 625808d036c74471867c679e2a5810c9
msgid "Float"
msgstr ""

#: ../source/faq/developers.txt:441
# 917efdaf3763482489ff72fc24c4268f
msgid "**32-bit Integer**"
msgstr ""

#: ../source/faq/developers.txt:442
# 94bc2fc23ea04a278286bc6aacddb828
msgid "32-bit or 64-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:446
# a09e5260164e47aab74dfed213b840ed
msgid "**64-bit Integer**"
msgstr ""

#: ../source/faq/developers.txt:451
# 91470227f88b4f70b684ad7a70a34051
msgid "**Float**"
msgstr ""

#: ../source/faq/developers.txt:458
# 5d0372da668544ee8e3f38eb68a31c7b
msgid "If the product of two 32-bit integers exceeds the maximum value for a 32-bit integer, the result is a 64-bit integer."
msgstr ""

#: ../source/faq/developers.txt:461
# 357457b738244df2a1d738e99de0dbc3
msgid "Integer operations of any type that exceed the maximum value for a 64-bit integer produce an error."
msgstr ""

#: ../source/faq/developers.txt:467
# db6b72bbafbb49eb93d527d2df08e4fe
msgid "How do I query for fields that have null values?"
msgstr ""

#: ../source/faq/developers.txt:469
# 8f18efe9a0f843fba2caf2dc4cf2a6e2
msgid "Different query operators treat ``null`` values differently."
msgstr ""

#: ../source/faq/developers.txt:471
# deac92e5070346cd9133df28fcb34fbc
msgid "Consider the collection ``test`` with the following documents:"
msgstr ""

#: ../source/faq/developers.txt:481
# 37629e375efe4157a36940cc9ad1f7e4
msgid "Comparison with Null"
msgstr ""

#: ../source/faq/developers.txt:483
# ee58d4ad03bd48a6990736b55b1e0e0d
msgid "The ``{ cancelDate : null }`` query matches documents that either contain the ``cancelDate`` field whose value is ``null`` *or* that do not contain the ``cancelDate`` field. If the queried index is :ref:`sparse <index-type-sparse>`, however, then the query will only match ``null`` values, not missing fields."
msgstr ""

#: ../source/faq/developers.txt:489
# 73643d04ad034e75afeaf3c8fb943c7c
msgid "If using the sparse index results in an incomplete result, MongoDB will not use the index unless a :method:`~cursor.hint()` explicitly specifies the index. See :ref:`index-type-sparse` for more information."
msgstr ""

#: ../source/faq/developers.txt:494
# 51fac6bcb1344690b587ed7266e0ca07
msgid "Given the following query:"
msgstr ""

#: ../source/faq/developers.txt:500
# f7a9224a2c0c40a7bb74aa37c4fe8c6f
msgid "The query returns both documents:"
msgstr ""

#: ../source/faq/developers.txt:508
# f007585457b945fdb6f4b557c7b30c1d
msgid "Type Check"
msgstr ""

#: ../source/faq/developers.txt:510
# a7e6e5d0abd14ab4b35c5e978cd9f88c
msgid "The ``{ cancelDate : { $type: 10 } }`` query matches documents that contains the ``cancelDate`` field whose value is ``null`` *only*; i.e. the value of the ``cancelDate`` field is of BSON Type ``Null`` (i.e. ``10``) :"
msgstr ""

#: ../source/faq/developers.txt:519
# e80fc0a692f7490284c4b09d140981d6
msgid "The query returns only the document that contains the ``null`` value:"
msgstr ""

#: ../source/faq/developers.txt:526
# 1ebdd858c33f4a12a9b15d68baaee850
msgid "Existence Check"
msgstr ""

#: ../source/faq/developers.txt:528
# 2a0f1120749d447aae73fe81fd10e697
msgid "The ``{ cancelDate : { $exists: false } }`` query matches documents that do not contain the ``cancelDate`` field:"
msgstr ""

#: ../source/faq/developers.txt:535
# bc1aed978461440595f90e94cae552f9
msgid "The query returns only the document that does *not* contain the ``cancelDate`` field:"
msgstr ""

#: ../source/faq/developers.txt:542
# 1d41954ae56e414b9b7d51f2fc65dd57
msgid "The reference documentation for the :query:`$type` and :query:`$exists` operators."
msgstr ""

#: ../source/faq/developers.txt:548
# 0792c3d6bfaa4330a53d7af4dcd417f7
msgid "Are there any restrictions on the names of Collections?"
msgstr ""

#: ../source/faq/developers.txt:550
# 2002886ead514c4b82e31cd3a90a6f59
msgid "Collection names can be any UTF-8 string with the following exceptions:"
msgstr ""

#: ../source/faq/developers.txt:553
# f64d41000cf4460abc032b890b932836
msgid "A collection name should begin with a letter or an underscore."
msgstr ""

#: ../source/faq/developers.txt:555
# f31b5dc22d6e4807ae412b8573db2886
msgid "The empty string (``\"\"``) is not a valid collection name."
msgstr ""

#: ../source/faq/developers.txt:557
# 23985310bb6b482987262b671e524742
msgid "Collection names cannot contain the ``$`` character. (version 2.2 only)"
msgstr ""

#: ../source/faq/developers.txt:559
# 3f67ba51bdb246cc9890076d5b6a4af5
msgid "Collection names cannot contain the null character: ``\\0``"
msgstr ""

#: ../source/faq/developers.txt:561
# 7a5d9deed66c4d8fb33b867e6bdd4694
msgid "Do not name a collection using the ``system.`` prefix. MongoDB reserves ``system.`` for system collections."
msgstr ""

#: ../source/includes/fact-collection-namespace-limit.rst:1
# 0b4f24570b454de6992e6266cd742c29
msgid "The maximum length of the collection namespace, which includes the database name, the dot (``.``) separator, and the collection name (i.e. ``<database>.<collection>``), is 120 bytes."
msgstr ""

#: ../source/faq/developers.txt:567
# bebd3cf859074652bf8cf45f3bb42af2
msgid "However, for maximum flexibility, collections should have names less than 80 characters."
msgstr ""

#: ../source/faq/developers.txt:570
# 59f7435d712142b38dbc15c6fc74a0e0
msgid "If your collection name includes special characters, such as the underscore character, then to access the collection use the :method:`db.getCollection()` method or a :api:`similar method for your driver <>`."
msgstr ""

#: ../source/faq/developers.txt:0
# 4e4953857692435c9d5436a383e10f78
msgid "Example"
msgstr ""

#: ../source/faq/developers.txt:582
# 125642574d1140829b8bb2b05e2d6c7c
msgid "To perform a query, use the :method:`~db.collection.find()` method, in as the following:"
msgstr ""

#: ../source/faq/developers.txt:592
# 1ccf6ff6aea54427b517098844739d30
msgid "How do I isolate cursors from intervening write operations?"
msgstr ""

#: ../source/faq/developers.txt:594
# a57f63c19e8e4559a4b14afe80dcd502
msgid "MongoDB cursors can return the same document more than once in some situations. [#duplicate-document-in-result-set]_ You can use the :method:`~cursor.snapshot()` method on a cursor to isolate the operation for a very specific case."
msgstr ""

#: ../source/faq/developers.txt:599
# c1a6949557b848dda316615c095f7477
msgid ":method:`~cursor.snapshot()` traverses the index on the ``_id`` field and guarantees that the query will return each document (with respect to the value of the ``_id`` field) no more than once. [#id-is-immutable]_"
msgstr ""

#: ../source/faq/developers.txt:603
# 4a431b82f2d94453bbcc8238caa35c85
msgid "The :method:`~cursor.snapshot()` does not guarantee that the data returned by the query will reflect a single moment in time *nor* does it provide isolation from insert or delete operations."
msgstr ""

#: ../source/faq/developers.txt:609
# 7380a2dc0c404f688e67e13ec5422c33
msgid "You **cannot** use :method:`~cursor.snapshot()` with :term:`sharded collections <sharding>`."
msgstr ""

#: ../source/faq/developers.txt:612
# de7988e804c8411285ca8d0befdea756
msgid "You **cannot** use :method:`~cursor.snapshot()` with :method:`~cursor.sort()` or :method:`~cursor.hint()` cursor methods."
msgstr ""

#: ../source/faq/developers.txt:616
# dea1555b9eda495498b5af83cf79b207
msgid "As an alternative, if your collection has a field or fields that are never modified, you can use a *unique* index on this field or these fields to achieve a similar result as the :method:`~cursor.snapshot()`. Query with :method:`~cursor.hint()` to explicitly force the query to use that index."
msgstr ""

#: ../source/faq/developers.txt:622
# 9eb2b69e99f9417c85635e9ed40a7c27
msgid "As a cursor returns documents other operations may interleave with the query: if some of these operations are :doc:`updates </core/write-operations>` that cause the document to move (in the case of a table scan, caused by document growth) or that change the indexed field on the index used by the query; then the cursor will return the same document more than once."
msgstr ""

#: ../source/faq/developers.txt:630
# 83c76c5694ba44d98a2d3c2b1d99831e
msgid "MongoDB does not permit changes to the value of the ``_id`` field; it is not possible for a cursor that transverses this index to pass the same document more than once."
msgstr ""

#: ../source/faq/developers.txt:637
# 34ef6a0ca2174c5f8764cdcd27c702c4
msgid "When should I embed documents within other documents?"
msgstr ""

#: ../source/faq/developers.txt:639
# 0b7d3a08618f4f5c9ce8853e54925167
msgid "When :doc:`modeling data in MongoDB </core/data-models>`, embedding is frequently the choice for:"
msgstr ""

#: ../source/faq/developers.txt:642
# e97e698e15b5414ea0dc37bba0f97b6b
msgid "\"contains\" relationships between entities."
msgstr ""

#: ../source/faq/developers.txt:644
# e1b64e6b7bf0427f9aea5e8b859ad3fb
msgid "one-to-many relationships when the \"many\" objects *always* appear with or are viewed in the context of their parents."
msgstr ""

#: ../source/faq/developers.txt:647
# c19859c85a0542158218facc105e3e42
msgid "You should also consider embedding for performance reasons if you have a collection with a large number of small documents. Nevertheless, if small, separate documents represent the natural model for the data, then you should maintain that model."
msgstr ""

#: ../source/faq/developers.txt:652
# 2ffe34356eda45a0acbfabe9de3dfe13
msgid "If, however, you can group these small documents by some logical relationship *and* you frequently retrieve the documents by this grouping, you might consider \"rolling-up\" the small documents into larger documents that contain an array of embedded documents. Keep in mind that if you often only need to retrieve a subset of the documents within the group, then \"rolling-up\" the documents may not provide better performance."
msgstr ""

#: ../source/faq/developers.txt:660
# 672b1d9dec244feab81af2bb98968725
msgid "\"Rolling up\" these small documents into logical groupings means that queries to retrieve a group of documents involve sequential reads and fewer random disk accesses."
msgstr ""

#: ../source/faq/developers.txt:666
# 28a5b3ef9c3a45cb9d7b3a2187ef36df
msgid "Additionally, \"rolling up\" documents and moving common fields to the larger document benefit the index on these fields. There would be fewer copies of the common fields *and* there would be fewer associated key entries in the corresponding index. See :doc:`/core/indexes` for more information on indexes."
msgstr ""

#: ../source/faq/developers.txt:680
# 4696a264653948cfb81adfb66c423ef4
msgid "Where can I learn more about data modeling in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:682
# 476930b7b24a4c5296d14a48df12e749
msgid "Begin by reading the documents in the :doc:`/data-modeling` section. These documents contain a high level introduction to data modeling considerations in addition to practical examples of data models targeted at particular issues."
msgstr ""

#: ../source/faq/developers.txt:687
# 0f7166872a63434dbcc32cc068b5806a
msgid "Additionally, consider the following external resources that provide additional examples:"
msgstr ""

#: ../source/faq/developers.txt:698
# 9055c4785da947dfb79171cffea81a17
msgid "`Schema Design by Example <http://www.mongodb.com/presentations/mongodb-melbourne-2012/schema-design-example>`_"
msgstr ""

#: ../source/faq/developers.txt:700
# a4d3cb876cc94e19931086b05347bdef
msgid "`Dynamic Schema Blog Post <http://dmerr.tumblr.com/post/6633338010/schemaless>`_"
msgstr ""

#: ../source/faq/developers.txt:703
# 571ed68d1b904f5c90053151d237e74e
msgid ":ecosystem:`MongoDB Data Modeling and Rails </tutorial/model-data-for-ruby-on-rails/>`"
msgstr ""

#: ../source/faq/developers.txt:706
# 5a78a170d41342efa036da04eee43e11
msgid "`Ruby Example of Materialized Paths <http://github.com/banker/newsmonger/blob/master/app/models/comment.rb>`_"
msgstr ""

#: ../source/faq/developers.txt:709
# dfeff2acd7164a4abef1f62d97531a97
msgid "`Sean Cribs Blog Post <http://seancribbs.com/tech/2009/09/28/modeling-a-tree-in-a-document-database>`_ which was the source for much of the :ref:`data-modeling-trees` content."
msgstr ""

#: ../source/faq/developers.txt:717
# 21bc98413d254fd3b30a14117c36c065
msgid "Can I manually pad documents to prevent moves during updates?"
msgstr ""

#: ../source/faq/developers.txt:721
# 769a27d9c37945b886c32b5e02774d6d
msgid "An update can cause a document to move on disk if the document grows in size. To *minimize* document movements, MongoDB uses :term:`padding`."
msgstr ""

#: ../source/faq/developers.txt:725
# 01dc79f52bed44ddb72c35f43741aa21
msgid "You should not have to pad manually because by default, MongoDB uses :ref:`power-of-2-allocation` to add :ref:`padding automatically <record-allocation-strategies>`. The :ref:`power-of-2-allocation` ensures that MongoDB allocates document space in sizes that are powers of 2, which helps ensure that MongoDB can efficiently reuse free space created by document deletion or relocation as well as reduce the occurrences of reallocations in many cases."
msgstr ""

#: ../source/faq/developers.txt:733
# e8006cf9f871442e9245c9ed8d168f6a
msgid "However, *if you must* pad a document manually, you can add a temporary field to the document and then :update:`$unset` the field, as in the following example."
msgstr ""

#: ../source/faq/developers.txt:737
# 2065f3bd5f754138a50af02a0c04da40
msgid "Do not manually pad documents in a capped collection. Applying manual padding to a document in a capped collection can break replication. Also, the padding is not preserved if you re-sync the MongoDB instance."
msgstr ""

#: ../source/faq/developers.txt:761
# 2e82db1c5e6840389e6c3657752c48ee
msgid ":ref:`record-allocation-strategies`"
msgstr ""

