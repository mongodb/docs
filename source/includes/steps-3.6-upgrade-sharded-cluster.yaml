title: Disable the Balancer.
level: 4
ref: 3.6-upgrade-disable-balancer
content: |

   Connect a :binary:`~bin.mongo` shell to a :binary:`~bin.mongos` instance in
   the sharded cluster, and run :method:`sh.stopBalancer()` to
   disable the balancer:

   .. cssclass:: copyable-code

   .. code-block:: javascript

      sh.stopBalancer()

   .. note::

      If a migration is in progress, the system will complete the
      in-progress migration before stopping the balancer. You can run
      :method:`sh.isBalancerRunning()` to check the balancer's current
      state.

   To verify that the balancer is disabled, run
   :method:`sh.getBalancerState()`, which returns false if the balancer
   is disabled:

   .. cssclass:: copyable-code

   .. code-block:: javascript

      sh.getBalancerState()

   For more information on disabling the balancer, see
   :ref:`sharding-balancing-disable-temporarily`.

---
title: "Upgrade the config servers."
level: 4
ref: 3.6-upgrade-config-servers
content: |-
   If the config servers are replica sets:
      
   1. Upgrade the :ref:`secondary <replica-set-secondary-members>`
      members of the replica set one at a time:

      a. Shut down the secondary :binary:`~bin.mongod` instance and replace
         the |oldversion| binary with the |newversion| binary.

      #. Start the |newversion| binary with both the ``--configsvr``,
         ``--port`` options, 

         If the sharded cluster members are run on different hosts or
         if you wish remote clients to connect to the sharded cluster,
         you must also specify ``--bind_ip`` (or the
         :setting:`net.bindIp` setting). For more information, see
         :ref:`3.6-bind_ip-compatibility`.

         .. code-block:: sh

            mongod --configsvr --port <port> --dbpath <path> --bind_ip localhost,<ip address>

         If using a :doc:`configuration file
         </reference/configuration-options>`, update the file to
         specify :setting:`sharding.clusterRole: configsvr
         <sharding.clusterRole>` and :setting:`net.port` (and
         :setting:`net.bindIp` setting if needed) and start the
         |newversion| binary:

         .. code-block:: yaml

            sharding:
               clusterRole: configsvr
            net:
               port: <port>
               bindIp: localhost,<ip address>
            storage:
               dbpath: <path>

         Include any other configuration as appropriate for your deployment.

      #. Wait for the member to recover to ``SECONDARY`` state before
         upgrading the next secondary member. To check the member's state,
         issue :method:`rs.status()` in the :binary:`~bin.mongo` shell.

         Repeat for each secondary member.

   #. Step down the replica set primary.

      a. Connect a :binary:`~bin.mongo` shell to the primary and use
         :method:`rs.stepDown()` to step down the primary and force an
         election of a new primary:

         .. code-block:: javascript

            rs.stepDown()

      #. When :method:`rs.status()` shows that the primary has stepped
         down and another member has assumed ``PRIMARY`` state, shut down
         the stepped-down primary and replace the :binary:`~bin.mongod` binary
         with the |newversion| binary.

      #. Start the |newversion| binary with both the ``--configsvr`` and
         ``--port`` options:

         If the sharded cluster members are run on different hosts or
         if you wish remote clients to connect to the sharded cluster,
         you must also specify ``--bind_ip`` (or the
         :setting:`net.bindIp` setting). For more information, see
         :ref:`3.6-bind_ip-compatibility`.

         .. code-block:: sh

            mongod --configsvr --port <port> --dbpath <path> --bind_ip localhost,<ip address>


         If using a :doc:`configuration file
         </reference/configuration-options>`, update the file to
         specify :setting:`sharding.clusterRole: configsvr
         <sharding.clusterRole>` and :setting:`net.port` (and
         :setting:`net.bindIp` setting if needed), and start the
         |newversion| binary:

         .. code-block:: yaml

            sharding:
               clusterRole: configsvr
            net:
               port: <port>
               bindIp: localhost,<ip address>
            storage:
               dbpath: <path>

         Include any other configuration as appropriate for your deployment.
---
title: Upgrade the shards.
level: 4
ref: 3.6-upgrade-shards
content: |-
   Upgrade the shards one at a time. If the shards are replica sets, for each shard:

   1. Upgrade the :ref:`secondary <replica-set-secondary-members>`
      members of the replica set one at a time:

      a. Shut down the :binary:`~bin.mongod` instance and replace the |oldversion|
         binary with the |newversion| binary.

      #. Start the |newversion| binary with the ``--shardsvr`` and
         ``--port`` command line options.

         If the sharded cluster members are run on different hosts or
         if you wish remote clients to connect to the sharded cluster,
         you must also specify ``--bind_ip`` (or the
         :setting:`net.bindIp` setting). For more information, see
         :ref:`3.6-bind_ip-compatibility`.

         .. code-block:: sh

            mongod --shardsvr --port <port> --dbpath <path> --bind_ip localhost,<ip address>

         Of if using a :doc:`configuration file
         </reference/configuration-options>`, update the file to
         include :setting:`sharding.clusterRole: shardsvr
         <sharding.clusterRole>` and :setting:`net.port` (and
         :setting:`net.bindIp` setting if needed) and start:

         .. code-block:: yaml

            sharding:
               clusterRole: shardsvr
            net:
               port: <port>
               bindIp: localhost,<ip address>
            storage:
               dbpath: <path>

         Include any other configuration as appropriate for your deployment.

      #. Wait for the member to recover to ``SECONDARY`` state before
         upgrading the next secondary member. To check the member's
         state, you can issue :method:`rs.status()` in the
         :binary:`~bin.mongo` shell.

         Repeat for each secondary member.

   #. Step down the replica set primary.

      Connect a :binary:`~bin.mongo` shell to the primary and use
      :method:`rs.stepDown()` to step down the primary and force an
      election of a new primary:

      .. code-block:: javascript

         rs.stepDown()

   #. When :method:`rs.status()`
      shows that the primary has stepped down and another member
      has assumed ``PRIMARY`` state, upgrade the stepped-down primary: 

      1. Shut down the stepped-down primary and replace the
         :binary:`~bin.mongod` binary with the |newversion| binary.

      #. Start the |newversion| binary with the ``--shardsvr`` and
         ``--port`` command line options.

         If the sharded cluster members are run on different hosts or
         if you wish remote clients to connect to the sharded cluster,
         you must also specify ``--bind_ip`` (or the
         :setting:`net.bindIp` setting). For more information, see
         :ref:`3.6-bind_ip-compatibility`.

         .. code-block:: sh

            mongod --shardsvr --port <port> --dbpath <path> --bind_ip localhost,<ip address>

         Of if using a :doc:`configuration file
         </reference/configuration-options>`, update the file to
         specify :setting:`sharding.clusterRole: shardsvr
         <sharding.clusterRole>` and :setting:`net.port` (and
         :setting:`net.bindIp` setting if needed) and start the
         |newversion| binary:

         .. code-block:: yaml

            sharding:
               clusterRole: shardsvr
            net:
               port: <port>
               bindIp: localhost,<ip address>
            storage:
               dbpath: <path>

         Include any other configuration as appropriate for your deployment.
---
title: "Upgrade the ``mongos`` instances."
level: 4
ref: 3.6-upgrade-mongos-instances
content: |-
   Replace each :binary:`~bin.mongos` instance with the |newversion| binary
   and restart. Include any other configuration as appropriate for your
   deployment.

   If the sharded cluster members are run on different hosts or
   if you wish remote clients to connect to the sharded cluster,
   you must also specify ``--bind_ip`` (or the
   :setting:`net.bindIp` setting). For more information, see
   :ref:`3.6-bind_ip-compatibility`.

   .. code-block:: sh

      mongos --configdb csReplSet/<rsconfigsver1:port1>,<rsconfigsver2:port2>,<rsconfigsver3:port3> --bind_ip localhost,<ip address>
---
title: "Re-enable the balancer."
level: 4
ref: 3.6-upgrade-reenable-balancer
content: |-

   Using a |newversion| :binary:`~bin.mongo` shell, connect to a
   :binary:`~bin.mongos` in the cluster and run
   :method:`sh.setBalancerState()` to re-enable the balancer:

   .. cssclass:: copyable-code

   .. code-block:: javascript
   
      sh.setBalancerState(true)

   The |oldversion| and earlier :binary:`~bin.mongo` shell is not
   compatible with |newversion| clusters.

   For more information about re-enabling the balancer, see
   :ref:`sharding-balancing-enable`.

---
title: "Enable backwards-incompatible |newversion| features."
level: 5
ref: 3.6-upgrade-enable-features-mongos
pre: |
   .. include:: /includes/3.6-upgrade-enable-features.rst

   .. tip::

      .. include:: /includes/3.6-featureCompatibility-caveat.rst

action:
   pre: |
      On a :binary:`~bin.mongos` instance, run the
      :dbcommand:`setFeatureCompatibilityVersion` command in the ``admin``
      database:
   language: javascript
   code: |
      db.adminCommand( { setFeatureCompatibilityVersion: "3.6" } )
   post: |
      This command must perform writes to an internal system
      collection. If for any reason the command does not complete
      successfully, you can safely retry the command on the
      :binary:`~bin.mongos` as the operation is idempotent.
---
title: "Restart ``mongos`` instances."
level: 5
ref: 3.6-upgrade-bounde-mongos
content: |

   After changing the ``featureCompatibilityVersion``, all
   :binary:`~bin.mongos` instances need to be restarted to pick up the
   changes in the causal consistency behavior.

...
