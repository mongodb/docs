=====================
Security Introduction
=====================

.. default-domain:: mongodb

Maintaining a secure MongoDB deployment requires administrators to
implement controls to ensure that users and applications have
access to only the data that they require. MongoDB provides features that
allow administrators to implement these controls and restrictions for
any MongoDB deployment.

If you are already familiar with security and MongoDB security
practices, consider the :doc:`/administration/security-checklist` for a
collection of recommended actions to protect a MongoDB deployment.

Authentication
--------------

Before gaining access to a system all clients should identify
themselves to MongoDB. This ensures that no client can access the data
stored in MongoDB without being explicitly allowed.

MongoDB supports a number of :ref:`authentication mechanisms
<security-authentication-mechanisms>` that clients can use to verify
their identity. MongoDB supports two mechanisms: a password-based
challenge and response protocol and x.509 certificates. Additionally,
`MongoDB Enterprise
<http://www.mongodb.com/products/mongodb-enterprise>`_ also provides
support for :ref:`LDAP proxy authentication <security-auth-ldap>` and
:ref:`Kerberos authentication <security-auth-kerberos>`.

See :doc:`/core/authentication` for more information.

Role Based Access Control
-------------------------

Access control, i.e. :doc:`authorization </core/authorization>`,
determines a user's access to resources and operations. Clients should
only be able to perform the operations required to fulfill their
approved functions. This is the "principle of least privilege" and
limits the potential risk of a compromised application.

MongoDB's role-based access control system allows administrators to
control all access and ensure that all granted access applies as
narrowly as possible. MongoDB does not enable authorization by default.
When you enable :doc:`authorization </core/authorization>`, MongoDB
will require authentication for all connections.

When authorization is enabled, MongoDB controls a user's access through
the roles assigned to the user. A role consists of a set of privileges,
where a privilege consists of *actions*, or a set of operations, and a
*resource* upon which the actions are allowed.

Users may have one or more role that describes their access. MongoDB
provides several :doc:`built-in roles </reference/built-in-roles>` and
users can construct specific roles tailored to clients' actual
requirements.

See :doc:`/core/authorization` for more information.

Auditing
--------

Auditing provides administrators with the ability to verify that the
implemented security policies are controlling activity in the
system. Retaining audit information ensures that administrators have
enough information to perform forensic investigations and comply with
regulations and polices that require audit data.

See :doc:`/core/auditing` for more information.

Encryption
----------

Transport Encryption
~~~~~~~~~~~~~~~~~~~~

You can use SSL to encrypt all of MongoDB's network traffic. SSL
ensures that MongoDB network traffic is only readable by the intended
client.

See :doc:`/tutorial/configure-ssl` for more information.

Encryption at Rest
~~~~~~~~~~~~~~~~~~

MongoDB has a partnership with Gazzang to encrypt and secure sensitive
data within MongoDB. The solution encrypts data in real time, and Gazzang
provides advanced key management that ensures only authorized processes
can access this data. The Gazzang software ensures that the cryptographic
keys remain safe and ensures compliance with standards including HIPAA,
PCI-DSS, and FERPA.

For more information on the partnership, refer to the following resources:

- `Partnership <https://www.mongodb.com/partners/technology/gazzang>`_

- `Datasheet <http://www.gazzang.com/images/datasheet-zNcrypt-for-MongoDB.pdf>`_

- `Webinar <http://gazzang.com/resources/videos/partner-videos/item/209-gazzang-zncrypt-on-mongodb>`_

Hardening Deployments and Environments
--------------------------------------

In addition to implementing controls within MongoDB, you should also
place controls around MongoDB to reduce the risk exposure of the
entire MongoDB system. This is a *defense in depth*
strategy.

Hardening MongoDB extends the ideas of least privilege, auditing, and
encryption outside of MongoDB. Reducing risk includes: configuring the
network rules to ensure that only trusted hosts have access to MongoDB, and
that the MongoDB processes only have access to the parts of the
filesystem required for operation.
