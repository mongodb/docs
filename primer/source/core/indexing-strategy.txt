.. _primer-indexing-strategy:

=================
Indexing Strategy
=================

When building indexes to support your queries, consider the following
strategies.

Always Avoid Unindexed Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If a query cannot use an index, MongoDB must inspect *every* document
in the collection. If the collection is larger than RAM, then every
query must wait, at least in part, for the disk system to read data
into memory, which is very inefficient.

Even if all documents fit into RAM, inspecting every document is less
efficient than using an index to narrow the possible result set before
examining individual documents.

See :manual:`Create Indexes to Support Your Queries
</tutorial/create-indexes-to-support-queries>` for more information.

Always Use Indexes to Support Sorted Result Sets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Because indexes store documents in order, MongoDB can use the index to
return results in order. If a query cannot use the order of documents
in an index to return ordered results, MongoDB must collect all
responses and then sort them before returning any results to the user,
which is inefficient.

See :ref:`sorting-with-indexes` for more information.

Prefer More Selective Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When choosing between different possible fields to index to support a
query or group of queries, you should prefer indexes on fields:

- that have a large number of possible values for a field. This
  :term:`cardinality`, means that for many queries MongoDB will be
  able to inspect fewer documents for each query.

- where the documents in the collection are likely to have an even
  distribution of values over the range of possible values.

For example, an indexes on telephone numbers or postal codes have
higher potential cardinality than indexes on fields that have boolean
values. At the same time, these same high-cardinality fields may be unevenly
distributed in a collection of data that's focused on a specific
geographical region.

See :ref:`index-selectivity` for more information.

Remove Unused Indexes
~~~~~~~~~~~~~~~~~~~~~

Indexes incur a small cost when you insert and update documents. While
the these costs are offset by the efficiency gains provided to queries
and updates, it's important to remove indexes that you aren't using.

Additional Information
----------------------

See the :ref:`primer-indexing-strategy` for an introduction to the
strategy behind building indexes for a collection. Also see the
:manual:`Indexes Section </indexes>` in the MongoDB Manual for
complete documentation of the indexes in MongoDB.
