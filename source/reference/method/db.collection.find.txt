====================
db.collection.find()
====================

.. default-domain:: mongodb

Definition
----------

.. method:: db.collection.find( <criteria>, <projection>)

   Selects documents
   in a collection and returns a :term:`cursor` to the selected
   documents.

   .. include:: /reference/method/db.collection.find-param.rst

   :returns:

      A :term:`cursor` to the documents that match the ``criteria``
      criteria. If the ``projection`` argument is specified, the
      matching documents contain only the ``projection`` fields, and
      the ``_id`` field if you do not explicitly exclude the ``_id``
      field.

   In the :program:`mongo` shell, you can access the returned documents
   directly without explicitly using the JavaScript cursor handling
   method. Executing the query directly on the :program:`mongo` shell
   prompt automatically iterates the cursor to display up to the first
   20 documents. Type ``it`` to continue iteration.

Examples
--------

Select All Documents in a Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Call the :method:`find() <db.collection.find()>` method with no
parameters:

.. code-block:: javascript

  db.products.find()

This returns all the documents with all the fields from the collection
``products``. In the :program:`mongo` shell, the cursor returns the
first batch of 20 matching documents by default. Iterate through the
next batch by typing ``it``. Use the appropriate cursor handling
mechanism for your specific language driver.

Select Documents that Match a Selection Criteria
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Call the :method:`find() <db.collection.find()>` method with a ``criteria``:

.. code-block:: javascript

   db.products.find( { qty: { $gt: 25 } } )

This returns all the documents from the collection ``products`` where
``qty`` is greater than ``25``, including all fields.

Prototype Projection Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

   { field1: boolean, field2: boolean ... }

The ``boolean`` can take the following include or exclude values:

- ``1`` or ``true`` to include. The :method:`find()
  <db.collection.find()>` method always includes the :term:`_id` field
  even if the field is not explicitly stated to return in the
  :term:`projection` parameter.

- ``0`` or ``false`` to exclude.

The ``projection`` cannot contain both include and exclude
specifications except for the exclusion of the ``_id`` field.

Project Certain Fields in the Result Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example selects documents that match a selection criteria
and returns, or *projects*, only certain fields into the result set:

.. code-block:: javascript

   db.products.find( { qty: { $gt: 25 } }, { item: 1, qty: 1 } )

This returns all the documents from the collection ``products`` where
``qty`` is greater than ``25``. The documents in the result set only
include the ``_id``, ``item``, and ``qty`` fields using "inclusion"
projection. :method:`find() <db.collection.find()>` always returns the
``_id`` field, even when not explicitly included:

.. code-block:: javascript

   { "_id" : 11, "item" : "pencil", "qty" : 50 }
   { "_id" : ObjectId("50634d86be4617f17bb159cd"), "item" : "bottle", "qty" : 30 }
   { "_id" : ObjectId("50634dbcbe4617f17bb159d0"), "item" : "paper", "qty" : 100 }

Exclude Certain Fields from the Result Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example selects documents that match a selection criteria
and excludes a set of fields from the resulting documents:

.. code-block:: javascript

   db.products.find( { qty: { $gt: 25 } }, { _id: 0, qty: 0 } )

The query returns all the documents from the collection ``products``
where ``qty`` is greater than ``25``. The documents in the result set
will contain all fields *except* the ``_id`` and ``qty`` fields, as in
the following:

.. code-block:: javascript

   { "item" : "pencil", "type" : "no.2" }
   { "item" : "bottle", "type" : "blue" }
   { "item" : "paper" }
