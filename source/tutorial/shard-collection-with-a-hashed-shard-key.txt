.. todo The "Hashed Sharding" topic was moved with few changes from
.. core/sharded-clusters.txt to here. Changes in wording are eventually
.. needed.

===============
Hashed Sharding
===============

.. default-domain:: mongodb

.. versionadded:: 2.4

:ref:`Hashed shard keys <sharding-hashed-shard-key-internals>` use a
:ref:`hashed index <index-hashed-index>` of a single field as the
:term:`shard key` to partition data across your sharded cluster.

Procedure
---------

To shard a collection using a hashed shard key, issue an operation in
the :program:`mongo` shell that resembles the following:

.. code-block:: javascript

   sh.shardCollection( "records.active", { a: "hashed" } )

This operation shards the ``active`` collection in the ``records``
database, using a hash of the ``a`` field as the shard key.

Additional Considerations
-------------------------

The field you choose as your hashed shard key should have a good
cardinality, or large number of different values. Hashed keys work
well with fields that increase monotonically like :term:`ObjectId`
values or timestamps.

If you shard an empty collection using a hashed
shard key, MongoDB will automatically create and migrate chunks so
that each shard has two chunks.  You can control how many chunks
MongoDB will create with the ``numInitialChunks`` parameter to
:dbcommand:`shardCollection`.

See :ref:`index-hashed-index` for limitations on hashed indexes.

.. include:: /includes/warning-hashed-index-floating-point.rst

.. warning:: 

   Hashed shard keys are only supported by the MongoDB 2.4 and greater
   versions of the :program:`mongos` program. After sharding a
   collection with a hashed shard key, you must use the MongoDB 2.4 or
   greater :program:`mongos` instances in your sharded cluster.
