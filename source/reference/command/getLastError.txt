============
getLastError
============

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: getLastError

   Returns the error status of
   the last operation on the *current connection*.
   Clients typically use :dbcommand:`getLastError` in
   combination with write operations to ensure that the write
   succeeds.

   .. include:: /reference/command/getLastError-field.rst

   The following is the prototype form:

   .. code-block:: javascript

      { getLastError: 1 }

   .. seealso:: :doc:`Write Concern </core/write-concern>`
      and :ref:`replica-set-write-concern`.

.. _gle-examples:

Examples
--------

Confirm Replication to Two Replica Set Members
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example ensures the operation has replicated to two
members (the primary and one other member):

.. code-block:: javascript

   db.runCommand( { getLastError: 1, w: 2 } )

Confirm Replication to a Majority of a Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example ensures the write operation has replicated to a
majority of the configured members of the set.

.. code-block:: javascript

   db.runCommand( { getLastError: 1, w: "majority" } )

Set a Timeout for a ``getLastError`` Response
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Unless you specify a timeout, a :dbcommand:`getLastError` command may
block forever if MongoDB cannot satisfy the requested write
concern. To specify a timeout of 5000 milliseconds, use an invocation
that resembles the following:

.. code-block:: javascript

   db.runCommand( { getLastError: 1, w: 2, wtimeout:5000 } )
