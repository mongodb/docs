.. _security-gcp-kms:

==========================================
Manage Customer Keys with Google Cloud KMS
==========================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: encryption

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/unavailable-serverless-m0-m2-m5-clusters.rst

|service| uses your |gcp| Service Account Key to encrypt and decrypt
your MongoDB master keys. These MongoDB master keys are used to encrypt
cluster database files and
:ref:`cloud providers snapshots <backup-cloud-provider>`.

.. include:: /includes/fact-atlas-key-rotation.rst

|service| encrypts your data at rest using encrypted storage media.
Using keys you manage with |gcp| |kms|, |service| encrypts your
data a second time when it writes it to the MongoDB
:manual:`encrypted storage engine </core/security-encryption-at-rest>`.
You use your |gcp| |sak| to encrypt the MongoDB master encryption keys.

This page covers configuring customer key management using |gcp| on
your |service| project.

You must configure customer key management for the |service| project
before enabling it on clusters in that project.

Enable Customer-Managed Keys with Google Cloud KMS
--------------------------------------------------

Key Concepts 
~~~~~~~~~~~~

.. expression:: MongoDB Master Key

   :expression:`MongoDB Master Key` is an encryption key used by the
   MongoDB Server to encrypt the WiredTiger Storage Engine. The key
   isn't stored in the MongoDB database, but it's supplied externally
   through |kmip| or a local keyfile. When the MongoDB server starts, it
   obtains the master key from the |kmip| or local file and then stores
   it in memory. This key is then used to decrypt the data stored in the
   WiredTiger storage engine. 

   |service| maintains a layer that translates requests between MongoDB
   Server and a |cmk| that you created in |gcp|. To translate the
   requests, |service| uses the layer to request the |cmk| to create an
   encrypted data encryption key (DEK). This encrypted :abbr:`DEK (data
   encryption key)` is generated per |service| deployment.  

   For example, for a three node M10+ replica set as shown in the
   following figure, there are three unique encrypted :abbr:`DEK (data
   encryption key)`\s, one per node. |service| stores the encrypted
   :abbr:`DEK (data encryption key)` on disk on each node in the
   |service| cluster. When the cluster starts up, the |service| layer
   decrypts the :abbr:`DEK (data encryption key)` using the customer
   provided encryption key and supplies this to the MongoDB Server.  

   .. figure:: /images/gcp-kms-cmk-key-concepts.png 
      :figwidth: 100%
      :alt: Atlas and AWS KMS key transfer workflow

.. expression:: Per Database Encryption Key in a MongoDB Cluster

   MongoDB Server maintains a per database encryption key in the MongoDB 
   cluster. In the preceding figure, there are three databases on the
   MongoDB cluster, each of which is encrypted with a unique database
   encryption key. Each of these keys are then encrypted with the
   :expression:`MongoDB Master Key`.  

.. expression:: Data Encryption Key (in cloud provider terminology) or MongoDB Master Key 

   |service| uses the customer provided encryption key to create an
   encrypted :abbr:`DEK (data encryption key)`. |service| also uses a 
   customer key management instance to decrypt this encrypted :abbr:`DEK
   (data encryption key)` and supply the resulting plaintext key to the 
   MongoDB Server over the wire using |tls|. When MongoDB Server uses
   this plaintext key, it refers to it as the :expression:`MongoDB
   Master Key`, whereas a cloud provider's customer key management
   instance might refer to it as a :abbr:`DEK (data encryption key)`. 
   To learn more about :abbr:`DEK (data encryption key)`\s, see `Data
   encryption keys
   <https://cloud.google.com/kms/docs/envelope-encryption#data_encryption_keys>`__. 

.. expression:: Customer Master Key (CMK)

   Customer Master Keys are used to  encrypt and decrypt a
   :expression:`MongoDB Master Key` (or :abbr:`DEK (data encryption
   key)`). The |cmk| exists only on the customer key management
   instance. To learn more about |cmk|\s, see `Customer-managed
   encryption keys  
   <https://cloud.google.com/storage/docs/encryption/customer-managed-keys>`__.

Required Access
---------------

.. include:: /includes/atlas-roles/kms.rst

.. _gcp-kms-prereqs:
.. _security-gcp-kms-restrictions:

Prerequisites
~~~~~~~~~~~~~

To enable customer-managed keys with |gcp| |kms| for a MongoDB
project, you must have:

.. include:: /includes/fact-gcp-kms-prereqs.rst

.. _gcp-kms-configure-project:

Enable Customer-Managed Keys for a Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You must enable customer key management for a project before you can
enable it on a cluster in that project.

.. include:: /includes/steps/configure-gcp-encryption-for-project.rst

.. _gcp-enable-cluster-encryption-at-rest:

Enable Customer Key Management for an |service| Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After you :ref:`gcp-kms-configure-project`, you must enable customer key
management for each |service| cluster that contains data that you want
to encrypt.

.. note::

   You must have the :authrole:`Project Owner <Project Owner>` role to
   enable customer key management for clusters in that project.

For new clusters, toggle the
:ref:`Manage your own encryption keys 
<create-cluster-enable-encryption>`
setting to :guilabel:`Yes` when you create the cluster. 

For existing clusters:

.. include:: /includes/steps/cluster-customer-key-management.rst

Alerts
~~~~~~

|service| automatically creates an :alert:`encryption key rotation alert <GCP encryption key elapsed time since last rotation is above (n) days>`
once you configure customer key management for a project. You can reset this alert at any time by
:ref:`rotating your GCP Key Version Resource ID <gcp-kms-rotate-key>`.

.. _gcp-kms-rotate-key:

Rotate your GCP Key Version Resource ID
---------------------------------------

.. meta::
   :keywords: encryption

.. include:: /includes/unavailable-serverless-m0-m2-m5-clusters.rst

MongoDB Master Key - MongoDB Responsibility
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-atlas-key-rotation.rst

Your |gcp| |cmk| - Your Responsibility
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

|service| does *not* automatically rotate the Key Version Resource ID
used for |gcp| key management.

As a best practice, |service| creates an :alert:`alert <AWS encryption
key elapsed time since last rotation is above (n) days>` to remind you
to rotate your GCP Key Version Resource ID every 90 days by default when 
you :ref:`enable Encryption at Rest <security-gcp-kms>` for the
|service| project. You can configure the time period of this alert.

You can `rotate <https://cloud.google.com/kms/docs/rotate-key>`__ your
|gcp| |cmk| yourself or configure your |gcp| |kms| instance to
`automatically rotate
<https://cloud.google.com/kms/docs/rotate-key#automatic>`__ 
your |cmk|. If you configure automatic |gcp| |cmk| rotation, the default
time period for rotation is approximately 365 days.

If you have already set up an automatic |cmk| rotation in |gcp| and
don't want to receive the |service| alert to rotate your |cmk| every 90 
days, you can :ref:`modify <configure-alerts>` the default alert period
to be greater than 365 days.

Prerequisites
~~~~~~~~~~~~~

You must create a new Service Account Key in the |gcp| account
associated with your |service| project.

Procedure
~~~~~~~~~

The following procedure documents how to rotate your |service| project Key Identifier by specifying a new Key Version Resource ID in |service|.

.. include:: /includes/steps/rotate-gcp-encryption-key.rst

Alerts
~~~~~~

|service| resets the
:alert:`encryption key rotation alert <GCP encryption key elapsed time since last rotation is above (n) days>`
timer at the completion of this procedure.

Related Topics
--------------

- To enable Encryption at Rest using your Key Management when deploying
  an |service| cluster, see :ref:`create-cluster-enable-encryption`.

- To enable Encryption at Rest using your Key Management for an
  existing |service| cluster, see
  :ref:`scale-cluster-enable-encryption`.

- To learn more about Encryption at Rest using your Key Management in
  |service|, see :ref:`security-kms-encryption`.

- To learn more about MongoDB Encryption at Rest, see
  :manual:`Encryption at Rest </core/security-encryption-at-rest/>` in
  the MongoDB server documentation.

- To learn more about Encryption at Rest with {+Cloud-Backup+}s, see
  :ref:`encrypted-cloud-provider-snapshot`.
