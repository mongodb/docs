collection: "restaurants"
options:
  show_title: False
  show_collection: False
edition:
  - shell
  - python
  - node
  - cpp
ref: example-collection
---
source:
  file: examples-remove-base.yaml
  ref: _remove-matching-documents
ref: remove-matching-documents
edition: shell
operation:
  language: javascript
  code: |
    db.restaurants.remove( { "borough": "Manhattan" } )
post: |
  The remove operation returns a :method:`WriteResult` object which
  contains the status of the operation. :data:`~WriteResult.nRemoved`
  field specifies the number of documents removed.
---
source:
  file: examples-remove-base.yaml
  ref: _remove-justOne
ref: remove-justOne
edition: shell
operation:
  - language: javascript
    code: |
      db.restaurants.remove( { "borough": "Queens" }, { justOne: true } )
post: |
  Successful operation should return the following
  :method:`WriteResult` object.
results: |
  WriteResult({ "nRemoved" : 1 })
final: |
  :data:`~WriteResult.nRemoved` field specifies the number of documents
  removed, in this case ``1``.
replacement:
  removeMethod: :method:`~db.collection.remove()`
---
source:
  file: examples-remove-base.yaml
  ref: _remove-all-documents
ref: remove-all-documents
edition: shell
operation:
  language: javascript
  code: |
    db.restaurants.remove( { } )
post: |
  The remove operation returns a :method:`WriteResult` object which
  contains the status of the operation. :data:`~WriteResult.nRemoved`
  field specifies the number of documents removed.
replacement:
  removeMethod: :method:`~db.collection.remove()`
---
source:
  file: examples-remove-base.yaml
  ref: _drop-collection
ref: drop-collection
edition: shell
operation:
  language: javascript
  code: |
     db.restaurants.drop()
post: |
   Upon successful drop of the collection, the operation returns
   ``true``.
results:
  - 'true'
final: |
  If the collection to drop does not exist, the operation
  will return ``false``.
replacement:
  dropMethod: :method:`~db.collection.drop()`
---
source:
  file: examples-remove-base.yaml
  ref: _remove-matching-documents
ref: remove-matching-documents
edition: python
operation:
  language: python
  code: |
    db.restaurants.remove( { "borough": "Manhattan" } )
post: |
  The remove operation returns a ``dict`` object which contains the
  status of the operation. Successful operation should return ``u'ok':
  1.0``. ``u'n'`` field indicates the number of documents removed.
replacement:
  removeMethod: :py:meth:`~pymongo.collection.Collection.remove()`
---
source:
  file: examples-remove-base.yaml
  ref: _remove-all-documents
ref: remove-all-documents
edition: python
operation:
  language: python
  code: |
    db.restaurants.remove()
post: |
  The remove operation returns a ``dict`` object which contains the
  status of the operation. Successful operation should return ``u'ok':
  1.0``. ``u'n'`` field indicates the number of documents removed.
replacement:
  removeMethod: :py:meth:`~pymongo.collection.Collection.remove()`
---
source:
  file: examples-remove-base.yaml
  ref: _drop-collection
ref: drop-collection
edition: python
operation:
  language: python
  code: |
     db.restaurants.drop()
replacement:
  dropMethod: :py:meth:`~pymongo.collection.Collection.drop()`
---
source:
  file: examples-remove-base.yaml
  ref: _remove-matching-documents
ref: remove-matching-documents
edition: node
operation:
  - pre: |
      Define a ``removeRestaurants`` function as follows:
    language: javascript
    code: |
      var removeRestaurants = function(db, callback) {
         db.collection('restaurants').deleteMany( 
            { "borough": "Manhattan" },
            function(err, results) {
               console.log(results);
               callback();
            }
         );
      };
  - pre: |
      Call the ``removeRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);

        removeRestaurants(db, function() {
            db.close();
        });
      });
post: |
   The operation prints to the console the number of documents removed.
replacement:
  removeMethod: |
    `remove() <http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#remove>`_
---
source:
  file: examples-remove-base.yaml
  ref: _remove-justOne
ref: remove-justOne
title: "Use the ``single`` Option"
edition: node
operation:
  - pre: |
      Define a ``removeRestaurants`` function as follows:
    language: javascript
    code: |
      var removeRestaurants = function(db, callback) {
         db.collection('restaurants').deleteOne( 
            { "borough": "Queens" },
            function(err, results) {
               console.log(results);
               callback();
            }
         );
      };
  - pre: |
      Call the ``removeRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);

        removeRestaurants(db, function() {
            db.close();
        });
      });
post: |
   The operation prints to the console the number of documents removed.
replacement:
  removeMethod: |
    `remove() <http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#remove>`_
---
source:
  file: examples-remove-base.yaml
  ref: _remove-all-documents
ref: remove-all-documents
edition: node
operation:
  - pre: |
      Define a ``removeRestaurants`` function as follows:
    language: javascript
    code: |
      var removeRestaurants = function(db, callback) {
         db.collection('restaurants').removeMany( {}, function(err, results) {
            console.log(results);
            callback();
         });
      };
  - pre: |
      Call the ``removeRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);

        removeRestaurants(db, function() {
            db.close();
        });
      });
post: |
   The operation prints to the console the number of documents removed.
replacement:
  removeMethod: |
    `remove() <http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#remove>`_
---
source:
  file: examples-remove-base.yaml
  ref: _drop-collection
ref: drop-collection
edition: node
operation:
  - pre: |
      Define a ``dropRestaurants`` function as follows:
    language: javascript
    code: |
      var dropRestaurants = function(db, callback) {
         db.collection('restaurants').drop( function(err, response) {
            console.log(response)
            callback();
         });
      };
  - pre: |
      Call the ``dropRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);

        dropRestaurants(db, function() {
            db.close();
        });
      });
post: |
   Upon successful drop of the collection, the operation prints to the
   console ``true``. If the collection to drop does not exist, the
   operation prints to the console ``false``.
replacement:
  dropMethod: |
    `drop() <http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#drop>`_
---
source:
  file: examples-remove-base.yaml
  ref: _remove-matching-documents
ref: remove-matching-documents
edition: cpp
operation:
  literalinclude: includes/example-cpp-remove-matching-documents.cpp
  language: cpp
---
source:
  file: examples-remove-base.yaml
  ref: _remove-justOne
ref: remove-justOne
edition: cpp
title: "Use the ``delete_one`` method."
pre: |
  Use the ``delete_one`` method to limit the remove operation to only
  one of the matching documents
operation:
  literalinclude: includes/example-cpp-remove-justOne.cpp
  language: cpp
---
source:
  file: examples-remove-base.yaml
  ref: _remove-all-documents
ref: remove-all-documents
edition: cpp
operation:
  literalinclude: includes/example-cpp-remove-all-documents.cpp
  language: cpp
replacement:
  removeMethod: "``delete_many``"
---
source:
  file: examples-remove-base.yaml
  ref: _drop-collection
ref: drop-collection
edition: cpp
operation:
  literalinclude: includes/example-cpp-drop-collection.cpp
  language: cpp
replacement:
  removeMethod: "``<cpp method>``"
replacement:
  dropMethod: :method:`~db.collection.drop()`
...
