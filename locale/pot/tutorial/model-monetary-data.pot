# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/model-monetary-data.txt:3
# b341d1c6292a4a21b6e42d718b56673a
msgid "Model Monetary Data"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:8
# a29d57f6217649c688fdee402e1bbe2b
msgid "Overview"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:10
# d242f2ce7bed4261ae8c79b8d4115c72
msgid "MongoDB stores numeric data as either IEEE 754 standard 64-bit floating point numbers or as 32-bit or 64-bit signed integers. Applications that handle monetary data often require capturing fractional units of currency. However, arithmetic on floating point numbers, as implemented in modern hardware, often does not conform to requirements for monetary arithmetic. In addition, some fractional numeric quantities, such as one third and one tenth, have no exact representation in binary floating point numbers."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:21
# 15ce813f73e34c21b5268232e71bf23d
msgid "Arithmetic mentioned on this page refers to server-side arithmetic performed by :program:`mongod` or :program:`mongos`, and not to client-side arithmetic."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:25
# bc6c927ce6fc4ce9addc2629f10177dd
msgid "This document describes two ways to model monetary data in MongoDB:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:27
# 9fa7e8f6cc8c469684230aeb161acfe1
msgid ":ref:`monetary-value-exact-precision` which multiplies the monetary value by a power of 10."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:30
# aca04eac33a24c4d8b0fb13747b00665
msgid ":ref:`monetary-value-arbitrary-precision` which uses two fields for the value: one field to store the exact monetary value as a non-numeric and another field to store a floating point approximation of the value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:38
# c2f43e30e4c745fa818b012db7e41d6e
msgid "Use Cases for Exact Precision Model"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:40
# c3f61e76d4eb4daea1bba29b6acb0447
msgid "If you regularly need to perform server-side arithmetic on monetary data, the exact precision model may be appropriate. For instance:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:43
# 3110f0523bfd432e9cc00acdcba4b4b3
msgid "If you need to query the database for exact, mathematically valid matches, use :ref:`monetary-value-exact-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:46
# cecf059bce7641788a1ced8e19a404da
msgid "If you need to be able to do server-side arithmetic, e.g., :update:`$inc`, :update:`$mul`, and :doc:`aggregation framework arithmetic </reference/operator/aggregation-arithmetic>`, use :ref:`monetary-value-exact-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:54
# 9730f5ae0eae48d798428a654243688c
msgid "Use Cases for Arbitrary Precision Model"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:56
# 52102f564e7040a1a35247051891dd41
msgid "If there is no need to perform server-side arithmetic on monetary data, modeling monetary data using the arbitrary precision model may be suitable. For instance:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:60
# a6223a3446464432ae686cc94b413cc4
msgid "If you need to handle arbitrary or unforeseen number of precision, see :ref:`monetary-value-arbitrary-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:63
# 7b3eccdc16ed40558af0509a23079cca
msgid "If server-side approximations are sufficient, possibly with client-side post-processing, see :ref:`monetary-value-arbitrary-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:70
# c989dff21c834b509b6b0434109e5817
msgid "Exact Precision"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:72
# 9dd74ec7fa464c27a4cb6ad806bf57ea
msgid "To model monetary data using the exact precision model:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:74
# fcb1f63d23fb4f56bcc5f71c48b4ec81
msgid "Determine the maximum precision needed for the monetary value. For example, your application may require precision down to the tenth of one cent for monetary values in ``USD`` currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:78
# 0d68865ee0534d39aa32afde5438fc29
msgid "Convert the monetary value into an integer by multiplying the value by a power of 10 that ensures the maximum precision needed becomes the least significant digit of the integer. For example, if the required maximum precision is the tenth of one cent, multiply the monetary value by 1000."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:84
# 670cc24a9d58491cab5da493a94b21f2
msgid "Store the converted monetary value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:86
# 1acd13f5ca884fd9b48ca7d2d2e56f9c
msgid "For example, the following scales ``9.99 USD`` by 1000 to preserve precision up to one tenth of a cent."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:93
# 08e1593c5e17472e8a0a19fce4b3a24a
msgid "The model assumes that for a given currency value:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:95
# af8f12315e6c442f8b87ad004c8f4ae8
msgid "The scale factor is consistent for a currency; i.e. same scaling factor for a given currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:98
# 26402655f9ab4282a8bbc2238c498844
msgid "The scale factor is a constant and known property of the currency; i.e applications can determine the scale factor from the currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:101
# bc4937c99d87496dbca819ab507513c1
msgid "When using this model, applications must be consistent in performing the appropriate scaling of the values."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:104
# fc08ee3dea0f4689acdba9359afd54c3
msgid "For use cases of this model, see :ref:`exact-precision-model-use-case`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:109
# 28210da567c7440595bd37c0406b3bb7
msgid "Arbitrary Precision"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:111
# 2b940e480b1f4626a8856e4b3f2cbb37
msgid "To model monetary data using the arbitrary precision model, store the value in two fields:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:114
# d7de57521dd84d179c25f98ec8058e17
msgid "In one field, encode the exact monetary value as a non-numeric data type; e.g., ``BinData`` or a ``string``."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:117
# ab0c24ccdc6140e3a0f90932655c1204
msgid "In the second field, store a double-precision floating point approximation of the exact value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:120
# c3afc9589f1e4aa593304616f2d72219
msgid "The following example uses the arbitrary precision model to store ``9.99 USD`` for the price and ``0.25 USD`` for the fee:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:130
# 42f4f58084014cca9e6f0ddcccfee969
msgid "With some care, applications can perform range and sort queries on the field with the numeric approximation. However, the use of the approximation field for the query and sort operations requires that applications perform client-side post-processing to decode the non-numeric representation of the exact value and then filter out the returned documents based on the exact monetary value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:137
# 15ca4e61791645498288c57ef1fa0857
msgid "For use cases of this model, see :ref:`arbitrary-precision-model-use-case`."
msgstr ""

