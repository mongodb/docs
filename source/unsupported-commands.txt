.. _unsupported-commands:

=============================
Unsupported Commands in Atlas
=============================

.. meta::
   :description: Discover which commands and options are unsupported in various Atlas cluster types, including M0, M2, M5, and Serverless instances.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

.. _free-tier-command-limitations:

Unsupported Commands in M0/M2/M5 and {+Atlas-Flex+} Clusters
----------------------------------------------------------------

.. |starter| replace:: M0 {+Free-clusters+}, {+Flex-clusters+}, and M2/M5 {+Shared-clusters+}

|service| |starter| don't support all functionality 
available to other {+clusters+}. To learn more about ``M0``, ``M2``, and ``M5`` 
{+cluster+} limits, see :ref:`atlas-free-tier`. To learn more about {+Flex-cluster+} limits, 
see :ref:`atlas-flex-limitations`.

.. note::

   If you use an unsupported command or invalid syntax, |service|
   returns the following error message:

   .. code-block:: shell
      :copyable: false
      
       <$command> is not allowed or the syntax is incorrect, 
       see the Atlas documentation for more information. 

   To learn more about valid syntax, see :manual:`Database Commands
   </reference/command>`

.. _free-shard-commands-with-limits:
.. _free-shared-commands-with-limits:

Limited Commands
~~~~~~~~~~~~~~~~

You can run the following commands with limits in |starter|\:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Command
     - Limit

   * - :dbcommand:`aggregate`
     -

       - Limits the ``maxTimeMs`` parameter to 300 seconds
         (``300000``).
       - Ignores the ``allowDiskUsage`` parameter.
       - Doesn't support :manual:`$accumulator 
         </reference/operator/aggregation/accumulator/>` and 
         :manual:`$function </reference/operator/aggregation/function/>` 
         operators.
       - Doesn't support the :manual:`$$USER_ROLES </reference/aggregation-variables/#mongodb-variable-variable.USER_ROLES>` system variable.

   * - :dbcommand:`count`
     -

       - Doesn't support the :query:`$where` operator.
       - Limits the :dbcommand:`count` operation on the ``local`` database
         to the ``system.replset`` and  ``oplog.rs`` collections.

   * - :dbcommand:`dbStats`
     - M0 {+Free-clusters+} and M2/M5 {+Shared-clusters+} don't 
       allow the :dbcommand:`dbStats` command on the ``local`` and 
       ``config`` databases.
      
       To learn more, see :ref:`shared-limits-ops`. 
   
   * - :dbcommand:`distinct`
     - Doesn't support :query:`$where` operator.

   * - :dbcommand:`find`

     -

       - Doesn't support the :query:`$where` operator.
       - Doesn't support the :manual:`$$USER_ROLES </reference/aggregation-variables/#mongodb-variable-variable.USER_ROLES>` system variable.
       - Limits the :dbcommand:`find` operation on the ``local`` database
         to the ``oplog.rs`` collection.
       - Limits the :dbcommand:`find` operation to using an equality condition
         when querying the ``ns`` field in the ``oplog.rs`` collection on
         the ``local`` database.

         .. code-block:: json

            { "ns" : "test.foo" }

   * - :dbcommand:`getParameter`

     - Limits execution to these two documents:

       - ``{ "getParameter": 1, "authSchemaVersion": 1 }``
       - ``{ "getParameter": 1, "authenticationMechanisms": 1 }``

   * - :method:`db.killOp()`
     - Limits the :method:`db.killOp()` method to the MongoDB user
       who ran the operation.

   * - :method:`collection.updateOne()`

     - Doesn't support the :manual:`$$USER_ROLES </reference/aggregation-variables/#mongodb-variable-variable.USER_ROLES>`
       system variable.

   * - :method:`collection.updateMany()`

     - Doesn't support the :manual:`$$USER_ROLES </reference/aggregation-variables/#mongodb-variable-variable.USER_ROLES>`
       system variable.

   * - :dbcommand:`findAndModify`

     - Doesn't support the :manual:`$$USER_ROLES </reference/aggregation-variables/#mongodb-variable-variable.USER_ROLES>`
       system variable.

   * - :dbcommand:`serverStatus`
     - Limits response to the following fields:

       .. hlist::
          :columns: 2

          - ``$clusterTime.clusterTime``
          - ``$clusterTime.operationTime``
          - ``$clusterTime.signature.hash``
          - ``$clusterTime.signature.keyId``
          - ``$clusterTime.signature``
          - ``asserts.msg``
          - ``asserts.regular``
          - ``asserts.rollovers``
          - ``asserts.user``
          - ``asserts.warning``
          - ``atlasVersion.gitVersion``
          - ``atlasVersion.version``
          - ``connections.available``
          - ``connections.current``
          - ``connections.totalCreated``
          - ``extra_info.note``
          - ``extra_info.page_faults``
          - ``host``
          - ``localTime``
          - ``mem.bits``
          - ``mem.mapped``
          - ``mem.mappedWithJournal``
          - ``mem.resident``
          - ``mem.supported``
          - ``mem.virtual``
          - ``metrics.atlas.bytesInWrites``
          - ``metrics.atlas.connectionPool.totalCreated``
          - ``network.bytesIn``
          - ``network.bytesOut``
          - ``network.numRequests``
          - ``ok``
          - ``opcounters.command``
          - ``opcounters.delete``
          - ``opcounters.getmore``
          - ``opcounters.insert``
          - ``opcounters.query``
          - ``opcounters.update``
          - ``opcountersRepl.command``
          - ``opcountersRepl.delete``
          - ``opcountersRepl.getmore``
          - ``opcountersRepl.insert``
          - ``opcountersRepl.query``
          - ``opcountersRepl.update``
          - ``pid``
          - ``process``
          - ``repl.electionId``
          - ``repl.hosts[]``
          - ``repl.ismaster``
          - ``repl.lastWrite.lastWriteDate``
          - ``repl.lastWrite.majorityOpTime.t``
          - ``repl.lastWrite.majorityOpTime.ts``
          - ``repl.lastWrite.majorityWriteDate``
          - ``repl.lastWrite.opTime.t``
          - ``repl.lastWrite.opTime.ts``
          - ``repl.me``
          - ``repl.primary``
          - ``repl.rbid``
          - ``repl.secondary``
          - ``repl.setName``
          - ``repl.setVersion``
          - ``repl.tags.nodeType``
          - ``repl.tags.provider``
          - ``repl.tags.region``
          - ``repl.tags``
          - ``storageEngine.backupCursorOpen``
          - ``storageEngine.dropPendingIdents``
          - ``storageEngine.name``
          - ``storageEngine.oldestRequiredTimestampForCrashRecovery``
          - ``storageEngine.persistent``
          - ``storageEngine.readOnly``
          - ``storageEngine.supportsCommittedReads``
          - ``storageEngine.supportsPendingDrops``
          - ``storageEngine.supportsSnapshotReadConcern``
          - ``uptime``
          - ``uptimeEstimate``
          - ``uptimeMillis``
          - ``version``

.. _free-shard-unsupported-commands:
.. _free-shared-unsupported-commands:

Unsupported Commands
~~~~~~~~~~~~~~~~~~~~

|starter| don't support the following commands:

.. note::

   The commands available for {+clusters+} of all other tiers, M10 and
   larger, correspond to the privileges defined for the built-in
   |service| MongoDB roles. To learn more about permissions, see
   :ref:`Atlas User Privileges <atlas-user-privileges>`.

.. hlist::
   :columns: 3

   - ``_migrateClone``
   - ``_recvChunkAbort``
   - ``_recvChunkCommit``
   - ``_recvChunkStart``
   - ``_recvChunkStatus``
   - ``_transferMods``
   - :authaction:`appendOplogNote`
   - :dbcommand:`applyOps`
   - :dbcommand:`authenticate`
   - :authaction:`authSchemaUpgrade`
   - :dbcommand:`cleanupOrphaned`
   - ``cloneCollection``
   - :dbcommand:`cloneCollectionAsCapped`
   - :dbcommand:`compact`
   - ``copydbgetnonce``
   - ``copydbsaslstart``
   - :dbcommand:`createRole`
   - :method:`db.collection.getSearchIndexes()`
   - :dbcommand:`createUser`
   - ``currentOpCtx``
   - :dbcommand:`dataSize`
   - :dbcommand:`dbHash`
   - :dbcommand:`dropAllRolesFromDatabase`
   - :dbcommand:`dropAllUsersFromDatabase`
   - :dbcommand:`dropConnections`
   - :dbcommand:`dropRole`
   - ``enableFreeMonitoring``
   - ``forcerror``
   - :dbcommand:`fsync`
   - :dbcommand:`fsyncUnlock`
   - ``getDiagnosticData``
   - ``getPrevError``
   - :dbcommand:`getShardMap`
   - :dbcommand:`grantPrivilegesToRole`
   - :dbcommand:`grantRolesToRole`
   - :dbcommand:`grantRolesToUser`
   - ``handshake``
   - :dbcommand:`hostInfo`
   - :dbcommand:`invalidateUserCache`
   - :dbcommand:`killAllSessions`
   - :dbcommand:`killAllSessionsByPattern`
   - :dbcommand:`killSessions`
   - :pipeline:`$listLocalSessions`
   - :pipeline:`$listSessions`
   - :dbcommand:`lockInfo`
   - :dbcommand:`logRotate`
   - :dbcommand:`logApplicationMessage`
   - ``shardedFinish``
   - :dbcommand:`mapReduce`
   - :dbcommand:`planCacheClear`
   - :dbcommand:`planCacheClearFilters`
   - :dbcommand:`planCacheListFilters`
   - ``planCacheListPlans``
   - ``planCacheListQueryShapes``
   - :pipeline:`$planCacheStats` aggregation pipeline stage
   - :dbcommand:`planCacheSetFilter`
   - :dbcommand:`reIndex`
   - ``repairCursor``
   - ``repairDatabase``
   - ``replSetDeclareElectionWinner``
   - ``replSetElect``
   - :dbcommand:`replSetFreeze`
   - ``replSetFresh``
   - :dbcommand:`replSetGetConfig`
   - ``replSetGetRBID``
   - :dbcommand:`replSetGetStatus`
   - :authaction:`replSetHeartbeat`
   - :dbcommand:`replSetInitiate`
   - :dbcommand:`replSetMaintenance`
   - :dbcommand:`replSetReconfig`
   - ``replSetRequestVotes``
   - :dbcommand:`replSetStepDown`
   - ``replSetStepUp``
   - :dbcommand:`replSetSyncFrom`
   - ``replSetUpdatePosition``
   - :dbcommand:`resetError`
   - :authaction:`resync`
   - :dbcommand:`revokePrivilegesFromRole`
   - :dbcommand:`revokeRolesFromRole`
   - :dbcommand:`revokeRolesFromUser`
   - :dbcommand:`setClusterParameter`
   - :dbcommand:`setFeatureCompatibilityVersion`
   - ``setLogLevel``
   - :dbcommand:`setParameter`
   - :method:`setProfilingLevel <db.setProfilingLevel>`
   - :dbcommand:`shutdown`
   - :dbcommand:`updateRole`
   - :dbcommand:`updateUser`
   - :dbcommand:`usersInfo`
   - :dbcommand:`validate`

Unsupported Command Line Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-database-tool-limitations-free.rst

For more information, see :ref:`atlas-free-tier`.

.. _paid-tier-command-limitations:

Unsupported Commands in M10+ Clusters
-----------------------------------------

|service| requires clients to authenticate to access an |service|
cluster. |service| provides a curated list of :ref:`Database User Privileges <atlas-user-privileges>`.
These privileges provide access to a subset of MongoDB commands.

.. _limited-commands-paid:

Limited Commands
~~~~~~~~~~~~~~~~

|service| limits the :method:`db.killOp()` method to
the MongoDB user who ran the operation.

|service| supports the following sharding command on only 
``M30+`` sharded {+clusters+}:

.. list-table::
   :widths: 40 30 30 
   :header-rows: 1

   * - Command
     - Shell Method
     - Privilege Action
  
   * - :dbcommand:`reshardCollection`
     - :method:`sh.reshardCollection() <sh.reshardCollection>`
     - :authaction:`reshardCollection`

.. _unsupported-commands-paid:

Unsupported Commands
~~~~~~~~~~~~~~~~~~~~

The following table lists the most common commands and shell methods
that database user privileges do not support. To ensure cluster 
stability and performance, |service| subsumes or restricts the 
functionality that these commands provide.

Administrative
``````````````

.. list-table::
   :widths: 40 30 30 
   :header-rows: 1

   * - Commands
     - Shell Method
     - Privilege Actions

   * - :dbcommand:`applyOps`
     - 
     - 

   * - :dbcommand:`setClusterParameter` 
     -  
     - 

   * - :dbcommand:`setParameter`
     - :method:`db.setLogLevel() <db.setLogLevel>`

       Others that use :dbcommand:`setParameter`.
     - :authaction:`setParameter`

   * - :dbcommand:`logRotate`
     - 
     - :authaction:`logRotate`

   * - :dbcommand:`shutdown`
     - :method:`db.shutdownServer() <db.shutdownServer>`
     - :authaction:`shutdown`

   * - ``eval``
     - ``db.eval()``
     - 

   * - :dbcommand:`fsync`
     - :method:`db.fsyncLock() <db.fsyncLock>`
     - :authaction:`fsync`

   * - :dbcommand:`setDefaultRWConcern`
     -
     - :authaction:`setDefaultRWConcern`

   * - :dbcommand:`setFeatureCompatibilityVersion`
     -
     -

Sessions
````````

.. list-table::
   :widths: 40 30 30 
   :header-rows: 1

   * - Commands
     - Shell Method
     - Privilege Actions
  
   * - :dbcommand:`killAllSessions`
     - 
     - :authaction:`killAnySession`

Replication
```````````

.. list-table::
   :widths: 40 30 30
   :header-rows: 1

   * - Commands
     - Shell Method
     - Privilege Actions
  
   * - :dbcommand:`replSetFreeze`
     - :method:`rs.freeze() <rs.freeze>`
     - :authaction:`replSetStateChange`

   * - :dbcommand:`replSetInitiate`
     - :method:`rs.initiate() <rs.initiate>`
     - 

   * - :dbcommand:`replSetMaintenance`
     -
     - :authaction:`replSetStateChange`

   * - :dbcommand:`replSetReconfig`
     - :method:`rs.reconfig() <rs.reconfig>`
     - 

   * - :dbcommand:`replSetResizeOplog`
     -
     - 

   * - :dbcommand:`replSetStepDown`
     - :method:`rs.stepDown() <rs.stepDown>`
     - :authaction:`replSetStateChange`

   * - :dbcommand:`replSetSyncFrom`
     - :method:`rs.syncFrom() <rs.syncFrom>`
     - :authaction:`replSetStateChange`

   * - ``resync``
     -
     - :authaction:`resync`

Sharding
````````

.. list-table::
   :widths: 40 30 30
   :header-rows: 1
   :stub-columns: 1

   * - Commands
     - Shell Method
     - Privilege Actions

   * -
     - :method:`sh.disableBalancing() <sh.disableBalancing>` [1]_
     - 

   * -
     - :method:`sh.enableBalancing() <sh.enableBalancing>` [1]_
     - 

   * - :dbcommand:`refineCollectionShardKey` [2]_
     - 
     - :authaction:`refineCollectionShardKey`

   * - :dbcommand:`removeShard`
     -
     - :authaction:`removeShard`

.. [1] If you use MongoDB 5.0.6 or later, you can use :dbcommand:`setAllowMigrations` to control the balancing of a specific collection.

.. [2] This command is not supported on :ref:`global write <global-writes-collections>` clusters only.

User and Role Management
````````````````````````

.. note::
   
   As an alternative, see the available :ref:`user-roles`.

.. list-table::
   :widths: 40 30 30
   :header-rows: 1

   * - Commands
     - Shell Method
     - Privilege Actions

   * - :dbcommand:`createUser`
     - :method:`db.createUser() <db.createUser>`
     - :authaction:`createUser`

   * - ``getUser`` [3]_
     - :method:`db.getUser() <db.getUser>` and
       :method:`db.getUsers() <db.getUsers>` [3]_
     - 

   * - :dbcommand:`dropUser`
     - :method:`db.dropUser() <db.dropUser>`
     - :authaction:`dropUser`

   * - :dbcommand:`grantRolesToUser`
     - :method:`db.grantRolesToUser() <db.grantRolesToUser>`
     - :authaction:`grantRole`

   * - :dbcommand:`revokeRolesFromUser`
     - :method:`db.revokeRolesFromUser() <db.revokeRolesFromUser>`
     - :authaction:`revokeRole`

   * - :dbcommand:`updateUser`
     - :method:`db.updateUser() <db.updateUser>`
     - 

   * - :dbcommand:`createRole`
     - :method:`db.createRole() <db.createRole>`
     - :authaction:`createRole`

   * - :dbcommand:`dropRole`
     - :method:`db.dropRole() <db.dropRole>`
     - :authaction:`dropRole`

   * - :dbcommand:`updateRole`
     - :method:`db.updateRole() <db.updateRole>`
     -

   * - :dbcommand:`usersInfo`
     - 
     -

.. [3] You can call ``getUser`` for your own user account.

Unsupported Command Line Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

M10+ {+clusters+} don't support the :dbtools:`--preserveUUID
</mongorestore/#std-option-mongorestore.--preserveUUID>` option for 
|mongorestore|.

Contact Support
~~~~~~~~~~~~~~~

Contact |service| :doc:`support </support>` if your use case 
requires access to a command that the |service| database user 
privileges don't currently support.

.. _atlas-serverless-command-limitations:

Unsupported Commands in {+Flex-clusters+} and {+Serverless-Instances+}
-------------------------------------------------------------------------

|service| {+Serverless-instances+} don't support the following 
:manual:`database commands </reference/command>` and {+mongosh+}
:manual:`shell methods </reference/method>`:

.. list-table::
   :header-rows: 1

   * - Database Command
     - Shell Method

   * - :dbcommand:`addShard`
     - :method:`sh.addShard() <sh.addShard>`

   * - :dbcommand:`addShardToZone`
     - :method:`sh.addShardToZone() <sh.addShardToZone>`

   * - :dbcommand:`applyOps`
     - 

   * - :dbcommand:`balancerCollectionStatus`
     - :method:`sh.balancerCollectionStatus()
       <sh.balancerCollectionStatus>`

   * - :dbcommand:`balancerStart`
     - :method:`sh.startBalancer() <sh.startBalancer>`

   * - :dbcommand:`balancerStatus`
     - 

   * - :dbcommand:`balancerStop`
     - :method:`sh.stopBalancer() <sh.stopBalancer>`

   * - :dbcommand:`bulkWrite`
     - :method:`Mongo.bulkWrite()`

   * - :dbcommand:`clearJumboFlag`
     - 

   * - :dbcommand:`cloneCollectionAsCapped`
     -  

   * - :dbcommand:`convertToCapped`
     -    

   * - :dbcommand:`createRole`
     - :method:`db.createRole() <db.createRole>`

   * - :dbcommand:`createUser`
     - :method:`db.createUser() <db.createUser>`

   * - :dbcommand:`dbHash`
     - 

   * - :dbcommand:`dropRole`
     - :method:`db.dropRole() <db.dropRole>`

   * - :dbcommand:`dropUser`
     - :method:`db.dropUser() <db.dropUser>`

   * - :dbcommand:`enableSharding`
     - :method:`sh.enableSharding() <sh.enableSharding>`

   * - ``eval``
     - ``db.eval()``

   * - :dbcommand:`flushRouterConfig`
     - 

   * - :dbcommand:`fsync`
     - :method:`db.fsyncLock() <db.fsyncLock>`

   * - | ``geoNear`` 
       | (deprecated in MongoDB v4.0)
     -

   * - :dbcommand:`geoSearch`
     - 

   * - :dbcommand:`getShardMap`
     - 

   * - ``getUser`` [3]_
     - :method:`db.getUser() <db.getUser>` and
       :method:`db.getUsers() <db.getUsers>` [3]_

   * - :dbcommand:`grantRolesToUser`
     - :method:`db.grantRolesToUser() <db.grantRolesToUser>`

   * - :dbcommand:`killAllSessions`
     - 

   * - :dbcommand:`listShards`
     - 

   * - :pipeline:`$listLocalSessions` aggregation pipeline stage
     -

   * - :pipeline:`$listSessions` aggregation pipeline stage
     - 

   * - :dbcommand:`logRotate`
     - 

   * - :dbcommand:`mergeChunks`
     - 

   * - :dbcommand:`moveChunk`
     - :method:`sh.moveChunk() <sh.moveChunk>`

   * - :dbcommand:`movePrimary`
     - 

   * - :pipeline:`$planCacheStats` aggregation pipeline stage
     -

   * - :dbcommand:`refineCollectionShardKey`
     - 

   * - :dbcommand:`removeShard`
     - 

   * - :dbcommand:`removeShardFromZone`
     - :method:`sh.removeShardFromZone() <sh.removeShardFromZone>`

   * - :dbcommand:`replSetFreeze`
     - :method:`rs.freeze() <rs.freeze>`

   * - :dbcommand:`replSetInitiate`
     - :method:`rs.initiate() <rs.initiate>`

   * - :dbcommand:`replSetMaintenance`
     -

   * - :dbcommand:`replSetReconfig`
     - :method:`rs.reconfig() <rs.reconfig>`

   * - :dbcommand:`replSetResizeOplog`
     -

   * - :dbcommand:`replSetStepDown`
     - :method:`rs.stepDown() <rs.stepDown>`

   * - :dbcommand:`replSetSyncFrom`
     - :method:`rs.syncFrom() <rs.syncFrom>`

   * - ``resync``
     -

   * - :dbcommand:`revokeRolesFromUser`
     - :method:`db.revokeRolesFromUser() <db.revokeRolesFromUser>`

   * - :dbcommand:`profile`
     - :method:`db.setProfilingLevel() <db.setProfilingLevel>`

   * - :dbcommand:`setFeatureCompatibilityVersion`
     -

   * - :dbcommand:`setParameter`
     - :method:`db.setLogLevel() <db.setLogLevel>`

       Others that use :dbcommand:`setParameter`.

   * - :dbcommand:`shardCollection`
     - :method:`sh.shardCollection() <sh.shardCollection>`

   * - | :dbcommand:`shardConnPoolStats` 
       | (deprecated in MongoDB v4.4)
     - 

   * - :dbcommand:`shutdown`
     - :method:`db.shutdownServer() <db.shutdownServer>`

   * - :dbcommand:`split`
     - | :method:`sh.splitAt() <sh.splitAt>`
       | :method:`sh.splitFind() <sh.splitFind>`

   * - :dbcommand:`top`
     - 

   * - :dbcommand:`updateRole`
     - :method:`db.updateRole() <db.updateRole>`

   * - :dbcommand:`updateUser`
     - :method:`db.updateUser() <db.updateUser>`

   * - :dbcommand:`updateZoneKeyRange`
     - :method:`sh.updateZoneKeyRange() <sh.updateZoneKeyRange>`

   * - :dbcommand:`usersInfo`
     -

   * - :dbcommand:`validate`
     - :method:`db.collection.validate() <db.collection.validate>`

   * -
     - :method:`sh.disableBalancing() <sh.disableBalancing>` [1]_

   * -
     - :method:`sh.enableBalancing() <sh.enableBalancing>` [1]_

Unsupported Command Line Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+Flex-Clusters+} and {+Serverless-instances+} don't support the following command 
line tool options:

.. list-table::
   :widths: 40 60
   :header-rows: 1

   * - Command Line Tool
     - Unsupported Options

   * - |mongorestore|
     - - :dbtools:`--oplogReplay
         </mongorestore/#std-option-mongorestore.--oplogReplay>`
       - :dbtools:`--preserveUUID
         </mongorestore/#std-option-mongorestore.--preserveUUID>`
