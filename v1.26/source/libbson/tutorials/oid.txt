.. _bson_oid:

=========
ObjectIDs
=========

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Libbson provides a simple way to generate ObjectIDs. It can be used in a single-threaded or
multi-threaded manner depending on your requirements.

The `bson_oid_t <{+api-libbson+}/bson_oid_t.html>`__ structure represents an ``ObjectID`` in MongoDB. It is a 96-bit
identifier.

Composition
-----------

- 4 bytes : The UNIX timestamp in big-endian format.
- 5 bytes : A random number.
- 3 bytes : A 24-bit monotonic counter incrementing from ``rand()`` in big-endian.

Sorting ObjectIDs
-----------------

The typical way to sort in C is using ``qsort()``. Therefore, Libbson provides a ``qsort()``
compatible callback function named `bson_oid_compare <{+api-libbson+}/bson_oid_compare.html>`__. It returns ``less than 1``,
``greater than 1``, or ``0`` depending on the equality of two `bson_oid_t <{+api-libbson+}/bson_oid_t.html>`__ structures.

Comparing Object IDs
--------------------

If you simply want to compare two `bson_oid_t <{+api-libbson+}/bson_oid_t.html>`__ structures for equality, use
`bson_oid_equal <{+api-libbson+}/bson_oid_equal.html>`__.

Generating
----------

To generate a `bson_oid_t <{+api-libbson+}/bson_oid_t.html>`__, you may use the following.

.. code-block:: c

   bson_oid_t oid;

   bson_oid_init (&oid, NULL);

Parsing ObjectID Strings
------------------------

You can also parse a string containing a `bson_oid_t <{+api-libbson+}/bson_oid_t.html>`__. The input string *MUST* be 24 characters
or more in length.

.. code-block:: c

   bson_oid_t oid;

   bson_oid_init_from_string (&oid, "123456789012345678901234");

.. code-block:: c

   bson_oid_t oid;

   bson_oid_init_from_string_unsafe (&oid, "123456789012345678901234");

Hashing ObjectIDs
-----------------

If you need to store items in a hashtable, you may want to use the `bson_oid_t <{+api-libbson+}/bson_oid_t.html>`__ as the key.
Libbson provides a hash function for just this purpose. It is based on DJB hash.

.. code-block:: c

   unsigned hash;

   hash = bson_oid_hash (oid);

Fetching ObjectID Creation Time
-------------------------------

You can easily fetch the time that a `bson_oid_t <{+api-libbson+}/bson_oid_t.html>`__ was generated using
`bson_oid_get_time_t <{+api-libbson+}/bson_oid_get_time_t.html>`__.

.. code-block:: c

   time_t t;

   t = bson_oid_get_time_t (oid);
   printf ("The OID was generated at %u\n", (unsigned) t);

