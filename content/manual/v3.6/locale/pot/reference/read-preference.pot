# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/read-preference.txt:5
msgid "Read Preference Reference"
msgstr ""

#: ../source/includes/introduction-read-preference.rst:1
msgid "Read preference describes how MongoDB clients route read operations to the members of a :term:`replica set`."
msgstr ""

#: ../source/includes/introduction-read-preference.rst:6
msgid "By default, an application directs its read operations to the :term:`primary` member in a :term:`replica set`."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:5
msgid "Read Preference Mode"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:6
msgid "Description"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:7
msgid ":readmode:`primary`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:8
msgid "Default mode. All operations read from the current replica set :term:`primary`."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:10
msgid ":readmode:`primaryPreferred`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:11
msgid "In most situations, operations read from the :term:`primary` but if it is unavailable, operations read from :term:`secondary` members."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:14
msgid ":readmode:`secondary`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:15
msgid "All operations read from the :term:`secondary` members of the replica set."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:17
msgid ":readmode:`secondaryPreferred`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:18
msgid "In most situations, operations read from :term:`secondary` members but if no :term:`secondary` members are available, operations read from the :term:`primary`."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:21
msgid ":readmode:`nearest`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:22
msgid "Operations read from member of the :term:`replica set` with the least network latency, irrespective of the member's type."
msgstr ""

#: ../source/reference/read-preference.txt:21
msgid "The read preference does not affect the visibility of data; i.e, clients can see the results of writes before they are made :term:`durable`:"
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
msgid "Regardless of :doc:`write concern </reference/write-concern>`, other clients using :readconcern:`\"local\"` or :readconcern:`\"available\"` readConcern can see the result of a write operation before the write operation is acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:6
msgid "Clients using :readconcern:`\"local\"` or :readconcern:`\"available\"` readConcern can read data which may be subsequently :doc:`rolled back </core/replica-set-rollbacks>`."
msgstr ""

#: ../source/reference/read-preference.txt:26
msgid "For more information on read isolation level in MongoDB, see :doc:`/core/read-isolation-consistency-recency`."
msgstr ""

#: ../source/reference/read-preference.txt:29
msgid "Read preference also does not affect :ref:`causal consistency <causal-consistency>`. The :ref:`causal consistency guarantees <sessions>` provided by causally consistent sessions for read operations with :readconcern:`\"majority\"` read concern and write operations with :writeconcern:`\"majority\"` write concern hold across all members of the MongoDB deployment."
msgstr ""

#: ../source/reference/read-preference.txt:42
msgid "Read Preference Modes"
msgstr ""

#: ../source/reference/read-preference.txt:46
msgid "All read operations use only the current replica set :term:`primary`. [#edge-cases-2-primaries]_ This is the default read mode. If the primary is unavailable, read operations produce an error or throw an exception."
msgstr ""

#: ../source/reference/read-preference.txt:51
msgid "The :readmode:`primary` read preference mode is not compatible with read preference modes that use :ref:`tag sets <replica-set-read-preference-tag-sets>` or :ref:`maxStalenessSeconds <replica-set-read-preference-max-staleness>`. If you specify tag sets or a ``maxStalenessSeconds`` value with :readmode:`primary`, the driver will produce an error."
msgstr ""

#: ../source/reference/read-preference.txt:60
msgid "In most situations, operations read from the :term:`primary` member of the set. However, if the primary is unavailable, as is the case during :term:`failover` situations, operations read from :term:`secondary` members that satisfy the read preference's ``maxStalenessSeconds`` and tag sets."
msgstr ""

#: ../source/includes/extracts/maxStaleness-primaryPreferred.rst:1
msgid "When the :readmode:`primaryPreferred` read preference includes a :ref:`maxStalenessSeconds value <replica-set-read-preference-max-staleness>` and there is no primary from which to read, the client estimates how stale each secondary is by comparing the secondary's last write to that of the secondary with the most recent write. The client then directs the read operation to a secondary whose estimated lag is less than or equal to ``maxStalenessSeconds``."
msgstr ""

#: ../source/includes/extracts/tagSets-primaryPreferred.rst:1
msgid "When the read preference includes :ref:`tag sets <replica-set-read-preference-tag-sets>` and there is no primary from which to read, the client attempts to find secondary members that match the specified tag sets and directs reads to a random secondary from among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>` of matching secondaries. If no secondaries have matching tags, the read operation produces an error."
msgstr ""

#: ../source/includes/extracts/maxStaleness-and-tagSets-general.rst:1
#: ../source/includes/extracts/maxStaleness-and-tagSets-general.rst:1
#: ../source/includes/extracts/maxStaleness-and-tagSets-general.rst:1
msgid "When the read preference includes a ``maxStalenessSeconds`` value **and** tag sets, the client filters by staleness first and then by the specified tags."
msgstr ""

#: ../source/includes/extracts/secondary-reads-stale-data-primaryPreferred.rst:1
msgid "Read operations using the :readmode:`primaryPreferred` mode may return stale data. Use the ``maxStalenessSeconds`` option to avoid reading from secondaries that the client estimates are overly stale."
msgstr ""

#: ../source/reference/read-preference.txt:76
msgid "Operations read *only* from the :term:`secondary` members of the set. If no secondaries are available, then this read operation produces an error or exception."
msgstr ""

#: ../source/reference/read-preference.txt:80
msgid "Most replica sets have at least one secondary, but there are situations where there may be no available secondary. For example, a replica set with a :term:`primary`, a secondary, and an :term:`arbiter` may not have any secondaries if a member is in recovering state or unavailable."
msgstr ""

#: ../source/includes/extracts/maxStaleness-secondary.rst:1
msgid "When the :readmode:`secondary` read preference includes a :ref:`maxStalenessSeconds value <replica-set-read-preference-max-staleness>`, the client estimates how stale each secondary is by comparing the secondary's last write to that of the primary. The client then directs the read operation to a secondary whose estimated lag is less than or equal to ``maxStalenessSeconds``. If there is no primary, the client uses the secondary with the most recent write for the comparison."
msgstr ""

#: ../source/includes/extracts/tagSets-secondary.rst:1
msgid "When the read preference includes :ref:`tag sets <replica-set-read-preference-tag-sets>`, the client attempts to find secondary members that match the specified tag sets and directs reads to a random secondary from among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>` of matching secondaries. If no secondaries have matching tags, the read operation produces an error. [#capacity-planning]_"
msgstr ""

#: ../source/includes/extracts/secondary-reads-stale-data-secondary.rst:1
msgid "Read operations using the :readmode:`secondary` mode may return stale data. Use the ``maxStalenessSeconds`` option to avoid reading from secondaries that the client estimates are overly stale."
msgstr ""

#: ../source/reference/read-preference.txt:96
msgid "In most situations, operations read from :term:`secondary` members, but in situations where the set consists of a single :term:`primary` (and no other members), the read operation will use the replica set's primary."
msgstr ""

#: ../source/includes/extracts/maxStaleness-secondaryPreferred.rst:1
msgid "When the :readmode:`secondaryPreferred` read preference includes a :ref:`maxStalenessSeconds value <replica-set-read-preference-max-staleness>`, the client estimates how stale each secondary is by comparing the secondary's last write to that of the primary. The client then directs the read operation to a secondary whose estimated lag is less than or equal to ``maxStalenessSeconds``. If there is no primary, the client uses the secondary with the most recent write for the comparison. If there are no secondaries with estimated lag less than or equal to ``maxStalenessSeconds``, the client directs the read operation to the replica set's primary."
msgstr ""

#: ../source/includes/extracts/tagSets-secondaryPreferred.rst:1
msgid "When the read preference includes :ref:`tag sets <replica-set-read-preference-tag-sets>`, the client attempts to find secondary members that match the specified tag sets and directs reads to a random secondary from among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>` of matching secondaries. If no secondaries have matching tags, the client ignores tags and reads from the primary."
msgstr ""

#: ../source/includes/extracts/secondary-reads-stale-data-secondaryPreferred.rst:1
msgid "Read operations using the :readmode:`secondaryPreferred` mode may return stale data. Use the ``maxStalenessSeconds`` option to avoid reading from secondaries that the client estimates are overly stale."
msgstr ""

#: ../source/reference/read-preference.txt:111
msgid "The driver reads from a member whose network latency falls within the acceptable latency window. Reads in the :readmode:`nearest` mode do not consider whether a member is a primary or secondary when routing read operations: primaries and secondaries are treated equivalently. The read preference :ref:`member selection <replica-set-read-preference-behavior-nearest>` documentation describes the process in detail."
msgstr ""

#: ../source/reference/read-preference.txt:119
msgid "Set this mode to minimize the effect of network latency on read operations without preference for current or stale data."
msgstr ""

#: ../source/reference/read-preference.txt:122
msgid "When the read preference includes a :ref:`maxStalenessSeconds value <replica-set-read-preference-max-staleness>`, the client estimates how stale each secondary is by comparing the secondary's last write to that of the primary, if available, or to the secondary with the most recent write if there is no primary. The client will then filter out any secondary whose estimated lag is greater than ``maxStalenessSeconds`` and randomly direct the read to a remaining member (primary or secondary) whose network latency falls within the :ref:`acceptable latency window <replica-set-read-preference-behavior-nearest>`."
msgstr ""

#: ../source/reference/read-preference.txt:133
msgid "If you specify a :ref:`tag set <replica-set-read-preference-tag-sets>`, the client attempts to find a replica set member that matches the specified tag sets and directs reads to an arbitrary member from among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`."
msgstr ""

#: ../source/includes/extracts/maxStaleness-and-tagSets-nearest.rst:1
msgid "When the read preference includes a ``maxStalenessSeconds`` value **and** tag sets, the client filters by staleness first and then by the specified tags.From the remaining :binary:`~bin.mongod` instances, the client then randomly directs the read to an instance that falls within the acceptable latency window. The read preference :ref:`member selection <replica-set-read-preference-behavior-nearest>` documentation describes the process in detail."
msgstr ""

#: ../source/includes/extracts/secondary-reads-stale-data-nearest.rst:1
msgid "Read operations using the :readmode:`nearest` mode may return stale data. Use the ``maxStalenessSeconds`` option to avoid reading from secondaries that the client estimates are overly stale."
msgstr ""

#: ../source/reference/read-preference.txt:145
msgid "All operations read from a member of the nearest group of the replica set that matches the specified read preference mode. The :readmode:`nearest` mode differs in that it prefers low latency reads over a member's :term:`primary` or :term:`secondary` status."
msgstr ""

#: ../source/reference/read-preference.txt:150
msgid "For :readmode:`nearest`, the client assembles a list of acceptable hosts based on ``maxStalenessSeconds`` and tag sets and then narrows that list to the host with the shortest ping time and all other members of the set that are within the \"local threshold,\" or acceptable latency. See :ref:`replica-set-read-preference-behavior-nearest` for more information."
msgstr ""

#: ../source/reference/read-preference.txt:159
msgid "Use Cases"
msgstr ""

#: ../source/reference/read-preference.txt:161
msgid "Depending on the requirements of an application, you can configure different applications to use different read preferences, or use different read preferences for different queries in the same application. Consider the following applications for different read preference strategies."
msgstr ""

#: ../source/reference/read-preference.txt:170
msgid "Maximize Consistency"
msgstr ""

#: ../source/reference/read-preference.txt:172
msgid "To avoid *stale* reads, use :readmode:`primary` read preference and :readconcern:`\"majority\"` ``readConcern``. If the primary is unavailable, e.g. during elections or when a majority of the replica set is not accessible, read operations using :readmode:`primary` read preference produce an error or throw an exception."
msgstr ""

#: ../source/reference/read-preference.txt:180
msgid "In some circumstances, it may be possible for a replica set to temporarily have two primaries; however, only one primary will be capable of confirming writes with the :writeconcern:`\"majority\"` write concern."
msgstr ""

#: ../source/reference/read-preference.txt:185
msgid "A partial :term:`network partition` may segregate a primary (``P``\\ :sub:`old`) into a partition with a minority of the nodes, while the other side of the partition contains a majority of nodes. The partition with the majority will elect a new primary (``P``\\ :sub:`new`), but for a brief period, the old primary (``P``\\ :sub:`old`) may still continue to serve reads and writes, as it has not yet detected that it can only see a minority of nodes in the replica set. During this period, if the old primary (``P``\\ :sub:`old`) is still visible to clients as a primary, reads from this primary may reflect stale data."
msgstr ""

#: ../source/reference/read-preference.txt:196
msgid "A primary (``P``\\ :sub:`old`) may become unresponsive, which will trigger an election and a new primary (``P``\\ :sub:`new`) can be elected, serving reads and writes. If the unresponsive primary (``P``\\ :sub:`old`) starts responding again, two primaries will be visible for a brief period. The brief period will end when ``P``\\ :sub:`old` steps down. However, during the brief period, clients might read from the old primary ``P``\\ :sub:`old`, which can provide stale data."
msgstr ""

#: ../source/reference/read-preference.txt:205
msgid "To increase consistency, you can disable automatic :term:`failover`; however, disabling automatic failover sacrifices availability."
msgstr ""

#: ../source/reference/read-preference.txt:209
msgid "Maximize Availability"
msgstr ""

#: ../source/reference/read-preference.txt:211
msgid "To permit read operations when possible, use :readmode:`primaryPreferred`. When there's a primary you will get consistent reads [#edge-cases-2-primaries]_, but if there is no primary you can still query :term:`secondaries <secondary>`. However, when using this read mode, consider the situation described in :ref:`caveat-secondaryPreferred`."
msgstr ""

#: ../source/reference/read-preference.txt:219
msgid "Minimize Latency"
msgstr ""

#: ../source/reference/read-preference.txt:221
msgid "To always read from a low-latency node, use :readmode:`nearest`. The driver or :binary:`~bin.mongos` will read from the nearest member and those no more than 15 milliseconds [#secondary-acceptable-latency]_ further away than the nearest member."
msgstr ""

#: ../source/reference/read-preference.txt:226
msgid ":readmode:`nearest` does *not* guarantee consistency. If the nearest member to your application server is a secondary with some replication lag, queries could return stale data. :readmode:`nearest` only reflects network distance and does not reflect I/O or CPU load."
msgstr ""

#: ../source/reference/read-preference.txt:232
msgid "Query From Geographically Distributed Members"
msgstr ""

#: ../source/reference/read-preference.txt:234
msgid "If the members of a replica set are geographically distributed, you can create replica tags based that reflect the location of the instance and then configure your application to query the members nearby."
msgstr ""

#: ../source/reference/read-preference.txt:238
msgid "For example, if members in \"east\" and \"west\" data centers are :ref:`tagged <replica-set-configuration-tag-sets>` ``{'dc': 'east'}`` and ``{'dc': 'west'}``, your application servers in the east data center can read from nearby members with the following read preference:"
msgstr ""

#: ../source/reference/read-preference.txt:247
msgid "Although :readmode:`nearest` already favors members with low network latency, including the tag makes the choice more predictable."
msgstr ""

#: ../source/reference/read-preference.txt:253
msgid "``secondary`` vs ``secondaryPreferred``"
msgstr ""

#: ../source/reference/read-preference.txt:255
msgid "For specific dedicated queries (e.g. ETL, reporting), you may shift the read load from the primary by using the :readmode:`secondary` read preference mode. For this use case, the :readmode:`secondary` mode is preferable to the :readmode:`secondaryPreferred` mode because :readmode:`secondaryPreferred` risks the following situation: if all secondaries are unavailable and your replica set has enough :term:`arbiters <arbiter>` [#arbiter-limit]_ to prevent the primary from stepping down, then the primary will receive all traffic from the clients. If the primary is unable to handle this load, the queries will compete with the writes. For this reason, use read preference :readmode:`secondary` to distribute these specific dedicated queries instead of :readmode:`secondaryPreferred`."
msgstr ""

#: ../source/reference/read-preference.txt:269
msgid "In general, avoid deploying more than one arbiter per replica set."
msgstr ""

#: ../source/reference/read-preference.txt:272
msgid "Read Preferences for Database Commands"
msgstr ""

#: ../source/reference/read-preference.txt:274
msgid "Because some :term:`database commands <database command>` read and return data from the database, all of the official drivers support full :ref:`read preference mode semantics <replica-set-read-preference-modes>` for the following commands:"
msgstr ""

#: ../source/reference/read-preference.txt:279
msgid ":dbcommand:`group`"
msgstr ""

#: ../source/reference/read-preference.txt:280
msgid ":dbcommand:`mapReduce` [#inline-map-reduce]_"
msgstr ""

#: ../source/reference/read-preference.txt:281
msgid ":dbcommand:`aggregate` [#aggregation-out]_"
msgstr ""

#: ../source/reference/read-preference.txt:282
msgid ":dbcommand:`collStats`"
msgstr ""

#: ../source/reference/read-preference.txt:283
msgid ":dbcommand:`dbStats`"
msgstr ""

#: ../source/reference/read-preference.txt:284
msgid ":dbcommand:`count`"
msgstr ""

#: ../source/reference/read-preference.txt:285
msgid ":dbcommand:`distinct`"
msgstr ""

#: ../source/reference/read-preference.txt:286
msgid ":dbcommand:`geoNear`"
msgstr ""

#: ../source/reference/read-preference.txt:287
msgid ":dbcommand:`geoSearch`"
msgstr ""

#: ../source/reference/read-preference.txt:288
msgid ":dbcommand:`parallelCollectionScan`"
msgstr ""

#: ../source/reference/read-preference.txt:290
msgid ":binary:`~bin.mongos` routes commands to shards using read preferences."
msgstr ""

#: ../source/reference/read-preference.txt:292
msgid "If your set has more than one secondary, and you use the :readmode:`secondary` read preference mode, consider the following effect. If you have a :ref:`three member replica set <replica-set-three-members>` with a primary and two secondaries, and one secondary becomes unavailable, all :readmode:`secondary` queries must target the remaining secondary. This will double the load on this secondary. Plan and provide capacity to support this as needed."
msgstr ""

#: ../source/reference/read-preference.txt:301
msgid "This threshold is configurable. See :setting:`~replication.localPingThresholdMs` for :binary:`~bin.mongos` or your driver documentation for the appropriate setting."
msgstr ""

#: ../source/reference/read-preference.txt:305
msgid "Only \"inline\" :dbcommand:`mapReduce` operations that do not write data support read preference, otherwise these operations must run on the :term:`primary` members."
msgstr ""

#: ../source/reference/read-preference.txt:310
msgid "Using the ``$out`` pipeline operator forces the aggregation pipeline to run on the primary."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid "In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may *transiently* believe that they are the primary, but at most, one of them will be able to complete writes with :writeconcern:`{ w: \"majority\" } <\"majority\">` write concern. The node that can complete :writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current primary, and the other node is a former primary that has not yet recognized its demotion, typically due to a :term:`network partition`. When this occurs, clients that connect to the former primary may observe stale data despite having requested read preference :readmode:`primary`, and new writes to the former primary will eventually roll back."
msgstr ""

