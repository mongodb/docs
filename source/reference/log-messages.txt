============
Log Messages
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. versionchanged:: 3.0

Starting in MongoDB 3.0, MongoDB includes the :ref:`severity level
<log-severity-levels>` and the :ref:`component
<log-message-components>` associated with each log message. The
log messages have the form:

.. code-block:: none

   <timestamp> <severity> <component> [<context>] <message>

For example:

.. code-block:: none

   2014-11-03T18:28:32.450-0500 I NETWORK [initandlisten] waiting for connections on port 27017

Timestamp
---------

The default format for the ``<timestamp>`` is ``iso8601-local``. To
modify the timestamp format, use the :option:`--timeStampFormat <mongod
--timeStampFormat>` runtime option or the
:setting:`systemLog.timeStampFormat` setting.

.. _log-severity-levels:

Severity Levels
---------------

The following table lists the severity levels associated with each log
message:

.. list-table::
   :header-rows: 1
   :widths: 15 85

   * - Level
     - Description

   * - ``F``
     - Fatal

   * - ``E``
     - Error

   * - ``W``
     - Warning

   * - ``I``
     - Informational, for Verbosity Level of ``0``

   * - ``D``
     - Debug, for All Verbosity Levels > ``0``

You can specify the verbosity level of various components to determine
the amount of Informational and Debug messages MongoDB outputs.

To set verbosity levels, see :ref:`log-messages-configure-verbosity`.

Client Data
-----------

.. versionadded:: 3.4

Client application debugging and performance monitoring is easier
when you can clearly match server events with particular client
requests. With this in mind, recent MongoDB
`drivers <https://docs.mongodb.com/ecosystem/drivers/>`_ and client
applications (including the :program:`mongo` shell) have the ability
to send identifying information at the time of connection to the
server. After the connection is established, the client does not send
the identifying information again unless the connection is dropped
and reestablished.

The exact fields included vary by client. Below is a sample client
data document:

.. code-block:: javascript

   {
      application: {
        name: "MongoDB Shell"
      },
      driver: {
         name: "MongoDB Internal Client",
         version: "3.4.0"
      },
      os: {
         type: "Darwin",
         name: "Mac OS X",
         architecture: "x86_64",
         version: "15.3.0"
      }
   }

When secondary members of a
:doc:`replica set </core/replica-set-members/>` initiate
a connection to a primary, they send similar data. A typical
connection document is as follows:

.. code-block:: javascript

   {
      driver: {
         name: "NetworkInterfaceASIO-Replication",
         version: "3.4.0"
      },
      os: {
         type: "Darwin",
         name: "Mac OS X",
         architecture: "x86_64",
         version: "15.3.0"
      }
   }

For a complete description of client information and required fields,
see the
`MongoDB Handshake specification <https://github.com/mongodb/specifications/blob/master/source/mongodb-handshake/handshake.rst>`_.

.. _log-message-components:

Components
----------

Log messages now include components, providing functional
categorization of the messages:

.. data:: ACCESS

   Messages related to access control, such as authentication. To
   specify the log level for :data:`ACCESS` components, use the
   :setting:`systemLog.component.accessControl.verbosity` setting.

.. data:: COMMAND

   Messages related to :doc:`database commands </reference/command>`,
   such as :dbcommand:`count`. To specify the log level for
   :data:`COMMAND` components, use the
   :setting:`systemLog.component.command.verbosity` setting.

.. data:: CONTROL

   Messages related to control activities, such as initialization. To
   specify the log level for :data:`CONTROL` components, use the
   :setting:`systemLog.component.control.verbosity` setting.

.. data:: FTDC

   .. versionadded:: 3.2
   
   Messages related to the diagnostic data collection mechanism, such 
   as server statistics and status messages. To specify the log level for 
   :data:`FTDC` components, use the 
   :setting:`systemLog.component.ftdc.verbosity` setting.

.. data:: GEO

   Messages related to the parsing of geospatial shapes, such as
   verifying the GeoJSON shapes. To specify the log level for
   :data:`GEO` components, set the
   :setting:`systemLog.component.geo.verbosity` parameter.

.. data:: INDEX

   Messages related to indexing operations, such as
   creating indexes. To specify the log level for
   :data:`INDEX` components, set the
   :setting:`systemLog.component.index.verbosity` parameter.

.. data:: NETWORK

   Messages related to network activities, such as accepting
   connections. To specify the log level for :data:`NETWORK`
   components, set the
   :setting:`systemLog.component.network.verbosity` parameter.

.. data:: QUERY

   Messages related to queries, including query planner activities.
   To specify the log level for :data:`QUERY` components, set the
   :setting:`systemLog.component.query.verbosity` parameter.

.. data:: REPL

   Messages related to replica sets, such as initial sync and
   heartbeats. To specify the log level for :data:`REPL`
   components, set the
   :setting:`systemLog.component.replication.verbosity` parameter.

.. data:: SHARDING

   Messages related to sharding activities, such as the startup of
   the :program:`mongos`. To specify the log level for :data:`SHARDING`
   components, use the
   :setting:`systemLog.component.sharding.verbosity` setting.

.. data:: STORAGE

   Messages related to storage activities, such as processes involved
   in the :dbcommand:`fsync` command. To specify the log level for
   :data:`STORAGE` components, use the
   :setting:`systemLog.component.storage.verbosity` setting.

   MongoDB distinguishes :data:`JOURNAL` components from
   :data:`STORAGE` components; however, :data:`STORAGE` is the parent
   of :data:`JOURNAL`. As such, if
   :setting:`systemLog.component.storage.journal.verbosity` setting
   is unset, MongoDB uses the :data:`STORAGE` verbosity level for
   :data:`JOURNAL` components

.. data:: JOURNAL

   Messages related specifically to journaling activities. To specify
   the log level for :data:`JOURNAL` components, use the
   :setting:`systemLog.component.storage.journal.verbosity` setting.

   MongoDB distinguishes :data:`JOURNAL` components from
   :data:`STORAGE` components; however, :data:`STORAGE` is the parent
   of :data:`JOURNAL`. As such, if
   :setting:`systemLog.component.storage.journal.verbosity` is
   unset, MongoDB uses the :data:`STORAGE` verbosity level for the
   :data:`JOURNAL` components as well.

.. data:: WRITE

   Messages related to write operations, such as :dbcommand:`update`
   commands. To specify the log level for :data:`WRITE` components,
   use the :setting:`systemLog.component.write.verbosity` setting.

.. data:: -

   Messages not associated with a named component. Unnamed components
   have the default log level specified in the
   :setting:`systemLog.verbosity` setting. The
   :setting:`systemLog.verbosity` setting is the default setting for
   both named and unnamed components.

Verbosity Levels
----------------

View Current Log Verbosity Level
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To view the current verbosity levels, use the
:method:`db.getLogComponents()` method.

.. _log-messages-configure-verbosity:

Configure Log Verbosity Levels
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can configure the verbosity level using: the
:setting:`systemLog.verbosity` and
``systemLog.component.<name>.verbosity`` settings, the
:parameter:`logComponentVerbosity` parameter; the
:method:`db.setLogLevel()` method.

``systemLog`` Verbosity Settings
````````````````````````````````

To configure the default log level for all components, use the
:setting:`systemLog.verbosity` setting. To configure the level of
specific components, use the ``systemLog.component.<name>.verbosity``
settings.

For example, the following configuration sets the
:setting:`systemLog.verbosity` to ``1``, the
:setting:`systemLog.component.query.verbosity` to ``2``, the
:setting:`systemLog.component.storage.verbosity` to ``2``, and the
:setting:`systemLog.component.storage.journal.verbosity` to ``1``:

.. code-block:: javascript

   systemLog:
      verbosity: 1
      component:
         query:
            verbosity: 2
         storage:
            verbosity: 2
            journal:
               verbosity: 1

All components not specified in the configuration have the
:setting:`systemLog.verbosity` of ``1``.

``logComponentVerbosity`` Parameter
```````````````````````````````````

To set the :parameter:`logComponentVerbosity` parameter, pass a
document with the verbosity settings to change.

For example, the following sets the :setting:`default verbosity level
<systemLog.verbosity>` to ``1``, the :setting:`query
<systemLog.component.query.verbosity>` to ``2``, the :setting:`storage
<systemLog.component.storage.verbosity>` to ``2``, and the
:setting:`storage.journal
<systemLog.component.storage.journal.verbosity>` to ``1``.

.. code-block:: javascript

   use admin
   db.runCommand( {
      setParameter: 1,
      logComponentVerbosity: {
         verbosity: 1,
         query: {
            verbosity: 2
         },
         storage: {
            verbosity: 2,
            journal: {
               verbosity: 1
            }
         }
      }
   } )

``db.setLogLevel()``
````````````````````

Use the :method:`db.setLogLevel()` method to update a single component
log level. For a component, you can specify verbosity level of ``0`` to
``5``, or you can specify ``-1`` to inherit the verbosity of the
parent. For example, the following sets the
:setting:`systemLog.component.query.verbosity` to its parent verbosity
(i.e. default verbosity):

.. code-block:: javascript

   db.setLogLevel(-1, "query")
