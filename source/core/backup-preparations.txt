===================
Backup Preparations
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. |san| replace:: :abbr:`SAN (Storage Area Network)`
.. |nas| replace:: :abbr:`NAS (Network Attached Storage)`

Overview
--------

Before backing up your cluster or replica set, decide how to back up
the data and what data to back up. This page describes items you must
consider before starting a backup.

.. important::

   .. include:: /includes/fact-backup-standalone-restriction.rst

For an overview of how Backup works, see
:ref:`mms-backup-functional-overview`.

Backup Configuration Options
----------------------------

Backup and recovery requirements vary to meet the cost, performance and
data protection needs for a given system.

|mms| Enterprise Backup and Recovery supports the following storage
architectures, each with its own strengths and trade-offs. Consider which
architecture meets your requirements before configuring and deploying your
backup architecture.

.. example::

   Consider a system whose requirements include low operational costs. Less
   funding limits the amount of storage available on that system and the
   backup and recovery configuration. Conversely, consider a system whose
   requirements include a low :abbr:`RTO (Recovery Time Objective)`. The
   owners of this system tolerates higher storage costs if it results in a
   backup and recovery configuration that fulfills the recovery requirements.

There are five options as to how you can back up MongoDB deployments:

- To a File System on a Sophisticated |san|
- To a File System using NFS to one or more |nas| device
- To an `AWS S3 <https://aws.amazon.com/s3>`_ :term:`Blockstore`
- MongoDB Blockstore in a Highly Available configuration
- MongoDB Blockstore in a Standalone configuration

Backup Method Features
~~~~~~~~~~~~~~~~~~~~~~

Each backup method has certain features shown in the following table:

.. list-table::
   :header-rows: 1
   :widths: 25 15 15 15 15 15
   :stub-columns: 1
 
   * - Backup System Feature
     - File System on |san|
     - File System on |nas|
     - AWS S3 Blockstore
     - MongoDB :abbr:`HA (High Availability)` Blockstore
     - MongoDB Blockstore
 
   * - Snapshot Types
     - Complete
     - Complete
     - Many partial
     - Many partial
     - Many partial
 
   * - Backup Data Deduplication
     - Yes
     - No
     - Yes
     - Yes
     - Yes
 
   * - Backup Data Compression
     - Yes
     - Depends
     - Yes
     - Yes
     - Yes
 
   * - Backup Data Replication
     - 
     - 
     - 
     - Yes
     - 
 
   * - Backup Storage Cost
     - High
     - Medium
     - Low
     - High
     - Low
 
   * - Backup Management Needs
     - Medium
     - Medium
     - Low
     - High
     - Medium
 
   * - Backup :abbr:`RTO (Recovery Time Objective)`
     - Low
     - Medium
     - Low
     - Low
     - Medium

When Do You Use a Particular Backup Method?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- If you do not want to maintain require separate backup systems and the staff
  to maintain them, consider backing up to a **MongoDB** or **S3 blockstore**.

- If you need to restore data when the MongoDB database is not running,
  consider backing up to a **file system on a** |san| **or** |nas| **device**.

- If you are backing up large amounts of data or frequently need to restore
  data, consider either a **file system on a** |san|, **S3 blockstore** or a
  **MongoDB blockstore configured as a replica set or sharded cluster**.

- If you are comfortable with cloud storage, consider backing up to an **S3
  blockstore**.

- If you have a |san| with advanced features like high availability,
  compression, de-duplication, etc., consider using that |san| **for file system**
  backups.

.. _snapshot-frequency-and-retention:

Snapshot Frequency and Retention Policy
---------------------------------------

By default, |mms| takes a base snapshot of your data every 6 hours. If
desired, administrators can change the frequency of base snapshots to 8,
12, or 24 hours. |mms| creates snapshots automatically on a schedule. You
cannot take snapshots on demand.

|mms| retains snapshots for the time periods listed in the following
table. If you terminate a backup, |mms| immediately deletes the backup's
snapshots.

.. list-table::
   :widths: 30 30 40
   :header-rows: 1

   * - Snapshot
     - Default Retention Policy
     - Maximum Retention Setting
   * - Base snapshot.
     - 2 days
     - 5 days.
   * - Daily snapshot
     - 1 week
     - 1 year
   * - Weekly snapshot
     - 1 month
     - 1 year
   * - Monthly snapshot
     - 1 year
     - 3 years.

.. include:: /includes/extracts/backup-preparations-pricing.rst

You can change a backed-up deployment's schedule through its
:guilabel:`Edit Snapshot Schedule` menu option, available through the
:guilabel:`Backup` page. Administrators can change snapshot frequency and
retention through the :doc:`snapshotSchedule resource in the API
</reference/api/snapshot-schedule>`. If you change the schedule to save
fewer snapshots, |mms| does **not** delete existing snapshots to conform
to the new schedule. To delete unneeded snapshots, see
:doc:`/tutorial/delete-backup-snapshots`.

.. _namespaces-filter:

Namespaces Filter
-----------------

The namespaces filter lets you specify which databases and collections to back
up. You create either a :guilabel:`Blacklist` of those to exclude or a
:guilabel:`Whitelist` of those to include. You make your selections when
starting a backup and can later edit them as needed. If you change the filter
in a way that adds data to your backup, a resync is required.

Use the blacklist to prevent backup of collections that contain logging data,
caches, or other ephemeral data. Excluding these kinds of databases and
collections will allow you to reduce backup time and costs.
Using a blacklist is often preferable to using a whitelist as a whitelist
requires you to intentionally opt in to every namespace you want backed up.

.. important::

   If you use the namespaces filter, your backup's restore data will not include
   the ``seedSecondary`` script. The seedSecondary script provides
   an alternative to initial sync on new or restored replica set members. For
   more information, see :doc:`/tutorial/use-restore-to-seed-secondary`.

.. _considerations-backup-storage-engine:

Storage Engine
--------------

When you enable backups for a cluster or replica set that runs on MongoDB
3.0 or higher, you can choose the storage engine for the backups. Your
choices are the MMAPv1 engine or WiredTiger engine. The WiredTiger
encryption option is not available for storing backups. If you do not specify
a storage engine, |mms| uses MMAPv1 by default. For more information on
storage engines, see :manual:`Storage </core/storage>` in the MongoDB
manual.

.. important::

   WiredTiger's encryption option is not available for backups. You can
   store backups using the WiredTiger storage engine, but you cannot
   enable the encryption option. If you restore from a backup, you
   restore unencrypted files.

You can choose a different storage engine for a backup than you do for the
original data. There is no requirement that the storage engine for a backup
match that of the data it replicates. If your original data uses MMAPv1,
you can choose WiredTiger for backing up, and vice versa.

You can change the storage engine for a cluster or replica set's backups
at any time, but doing so requires an :term:`initial sync` of the backup
on the new engine.

If you choose the WiredTiger engine to back up a collection that
already uses WiredTiger, the initial sync replicates all the
collection's WiredTiger options. For information on these options,
see the ``storage.wiredTiger.collectionConfig`` section of the
:manual:`Configuration File Options </reference/configuration-options>`
page in the MongoDB manual.

.. include:: /includes/extracts/backup-preparations-backup-daemon-storage-engine.rst

Index collection options are never replicated.

Resyncing Production Deployments
--------------------------------

For production deployments, it is recommended that as a best practice you
periodically (annually) :doc:`resync </tutorial/resync-backup>` all
backed-up replica sets. When you resync, data is read from a secondary in
each replica set. During resync, no new snapshots are generated.

You may also want to resync your backup after:

- A reduction in data size, such that the size on disk of |mms|'s copy
  of the data is also reduced. This scenario also includes if you:

  - Have a :manual:`TTL index </core/index-ttl>` in place, which
    periodically deletes documents.

  - :manual:`Drop a collection </reference/method/db.collection.drop>`
    (MMAPv1 only).

  - Run a :term:`sharded cluster <sharded cluster>`, and there have been
    a lot of chunks moved off a particular shard.

- A switch in storage engines, if you want |mms| to provide snapshots
  in the new storage engine format.

- A manual build of an index on a replica set in a rolling fashion
  (as per :manual:`Build Indexes on Replica Sets
  </tutorial/build-indexes-on-replica-sets>` in the MongoDB manual).

.. _checkpoint:

Checkpoints
-----------

For :term:`sharded clusters <sharded cluster>`, checkpoints provide
additional restore points between snapshots. With
checkpoints enabled, |mms| creates restoration points at
configurable intervals of every 15, 30 or 60 minutes between
snapshots. To enable checkpoints, see :ref:`enable checkpoints
<enable-cluster-checkpoints>`.

To create a checkpoint, |mms| stops the :term:`balancer`
and inserts a token into the :term:`oplog` of each
:term:`shard` and :term:`config server` in the cluster. These
checkpoint tokens are lightweight and do not have a consequential
impact on performance or disk use.

Backup does not require checkpoints, and they are disabled by default.

Restoring from a checkpoint requires |mms| to apply the oplog of
each shard and config server to the last snapshot captured before the
checkpoint. Restoration from a checkpoint takes longer than
restoration from a snapshot.

.. _snapshot-while-balancer-enabled:

Snapshots when Agent Cannot Stop Balancer
-----------------------------------------

For :term:`sharded clusters <sharded cluster>`,
|mms| disables the :term:`balancer` before taking a
cluster snapshot. In certain situations, such as a long migration or no
running :program:`mongos`, |mms| tries to disable the balancer but cannot.
In such cases, |mms| will continue to take cluster snapshots but will flag
the snapshots with a warning that data may be incomplete and/or
inconsistent. Cluster snapshots taken during an active balancing
operation run the risk of data loss or orphaned data.

Snapshots when Agent Cannot Contact a ``mongod``
------------------------------------------------

For :term:`sharded clusters <sharded cluster>`,
if the Backup Agent cannot reach a :program:`mongod` process, whether a
shard or config server, then the agent cannot insert a synchronization
:term:`oplog` token. If this happens, |mms| will not create the snapshot and
will display a warning message.
