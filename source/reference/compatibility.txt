.. _ruby-compatibility:

=============
Compatibility
=============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: backwards compatibility, versions, upgrade 

MongoDB Compatibility
---------------------

The following compatibility table specifies the recommended
version(s) of the {+driver-long+} for use with a specific version of
MongoDB. Except when indicated, the specified driver versions expose or
take advantage of the features added in the corresponding server versions.

MongoDB server releases are generally backwards compatible. This means a
particular driver version will generally work with newer server versions but might
not utilize the new functionalities in those server versions.

The first column lists the driver versions.

.. sharedinclude:: dbx/lifecycle-schedule-callout.rst

.. include:: /includes/compatibility-table-legend-ruby.rst

.. include:: /includes/mongodb-compatibility-table-ruby.rst

The driver does not support older versions of MongoDB.

Language Compatibility
----------------------

The following compatibility table specifies the versions of Ruby supported
by the various versions of the {+driver-long+}.

The first column lists the driver versions.

.. include:: /includes/compatibility-table-legend-ruby.rst

.. include:: /includes/language-compatibility-table-ruby.rst

The driver does not support older versions of Ruby.

Rails/ActiveSupport Compatibility
---------------------------------

The {+driver-short+} does not depend on ActiveSupport. However, if your
application uses ActiveSupport or Ruby on Rails, you must load the driver's
ActiveSupport compatibility code for behavior such as time serialization to be
correct:

.. code-block:: ruby

   require 'mongo'
   require 'mongo/active_support'

Applications using Mongoid 7.0.6 or newer do not need to explicitly load
the driver's ActiveSupport code, since Mongoid automatically does so.

.. _tls-compatibility:

TLS/SSL Compatibility
----------------------

The {+driver-short+} uses the protocols supported by the underlying Ruby
``openssl`` extension. The ``openssl`` extension generally exposes
the functionality available in the operating system's OpenSSL library.

Industry best practices, and some regulations, require the use of TLS 1.1
or newer. Some operating systems or versions might not provide an OpenSSL version
that supports these TLS versions.

If you use macOS older than 10.13 (High Sierra), you need to install Ruby from
`rvm`_, `homebrew`_, `macports`_, or another similar source. See
`Installing Ruby`_ for more options.

If you use Linux or other non-macOS Unix systems, you can check your OpenSSL version
as follows:

.. code-block:: sh

   openssl version

If the version number is less than 1.0.1, support for TLS 1.1 or newer is
not available. Contact your operating system vendor for a solution or upgrade
to a newer distribution.

You can check your TLS version by running the following command:

.. code-block:: sh

   ruby -e "require 'net/http'; require 'json'; puts JSON.parse(Net::HTTP.get(URI('https://www.howsmyssl.com/a/check')))['tls_version']"

After running the command, you must see ``TLS 1.X`` where ``X`` is greater than
or equal to ``1``.

To learn more about TLS versions and their security implications, see `Transport Layer Security Cheat Sheet
<https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Security_Cheat_Sheet.html>`_.

.. _rvm: https://rvm.io/
.. _homebrew: https://brew.sh/
.. _macports: https://www.macports.org/
.. _Installing Ruby: https://www.ruby-lang.org/en/documentation/installation

JRuby and TLS Connections
-------------------------

Due to JRuby limitations:

- The driver does not support ECDSA server certificates.
- The driver does not perform OCSP endpoint checking.
