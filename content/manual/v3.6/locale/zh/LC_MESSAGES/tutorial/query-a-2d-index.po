#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/query-a-2d-index.txt:3
msgid "Query a ``2d`` Index"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:13
msgid "The following sections describe queries supported by the ``2d`` index."
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:16
msgid "Points within a Shape Defined on a Flat Surface"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:18
msgid ""
"To select all legacy coordinate pairs found within a given shape on a "
"flat surface, use the :query:`$geoWithin` operator along with a shape "
"operator. Use the following syntax:"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:29
msgid ""
"The following queries for documents within a rectangle defined by ``[ 0 ,"
" 0 ]`` at the bottom left corner and by ``[ 100 , 100 ]`` at the top "
"right corner."
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:41
msgid ""
"The following queries for documents that are within the circle centered "
"on ``[ -74 , 40.74 ]`` and with a radius of ``10``:"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:50
msgid "For syntax and examples for each shape, see the following:"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:52
msgid ":query:`$box`"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:54
msgid ":query:`$polygon`"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:56
msgid ":query:`$center` (defines a circle)"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:59
msgid "Points within a Circle Defined on a Sphere"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:61
msgid ""
"MongoDB supports rudimentary spherical queries on flat ``2d`` indexes for"
" legacy reasons. In general, spherical calculations should use a "
"``2dsphere`` index, as described in :doc:`/core/2dsphere`."
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:65
msgid ""
"To query for legacy coordinate pairs in a \"spherical cap\" on a sphere, "
"use :query:`$geoWithin` with the :query:`$centerSphere` operator. Specify"
" an array that contains:"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:69
msgid "The grid coordinates of the circle's center point"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:71
msgid ""
"The circle's radius measured in radians. To calculate radians, see "
":doc:`/tutorial/calculate-distances-using-spherical-geometry-with-2d-"
"geospatial-indexes`."
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:74
msgid "Use the following syntax:"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:83
msgid ""
"The following example query returns all documents within a 10-mile radius"
" of longitude ``88 W`` and latitude ``30 N``. The example converts "
"distance to radians by dividing distance by the approximate equatorial "
"radius of the earth, 3963.2 miles:"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:96
msgid "Proximity to a Point on a Flat Surface"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:98
msgid ""
"Proximity queries return the legacy coordinate pairs closest to the "
"defined point and sort the results by distance. Use either the "
":query:`$near` operator or :dbcommand:`geoNear` command. Both require a "
"``2d`` index."
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:103
msgid "The :query:`$near` operator uses the following syntax:"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:111
msgid "For examples, see :query:`$near`."
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:113
msgid "The :dbcommand:`geoNear` command uses the following syntax:"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:119
msgid ""
"The :dbcommand:`geoNear` command offers more options and returns more "
"information than does the :query:`$near` operator. To run the command, "
"see :dbcommand:`geoNear`."
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:128
msgid "Exact Matches on a Flat Surface"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:130
msgid ""
"You cannot use a ``2d`` index to return an exact match for a coordinate "
"pair. Use a scalar, ascending or descending, index on a field that stores"
" coordinates to return exact matches."
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:134
msgid ""
"In the following example, the :method:`~db.collection.find()` operation "
"will return an exact match on a location if you have a ``{ 'loc': 1}`` "
"index:"
msgstr ""

#: ../source/tutorial/query-a-2d-index.txt:142
msgid "This query will return any documents with the value of ``[ <x> , <y> ]``."
msgstr ""

#~ msgid ""
#~ "Proximity queries return the 100 legacy"
#~ " coordinate pairs closest to the "
#~ "defined point and sort the results "
#~ "by distance. Use either the "
#~ ":query:`$near` operator or :dbcommand:`geoNear` "
#~ "command. Both require a ``2d`` index."
#~ msgstr ""

#~ msgid ""
#~ "Previously, ``2d`` indexes would support "
#~ "exact-match queries for coordinate "
#~ "pairs."
#~ msgstr ""

#~ msgid "geospatial queries"
#~ msgstr ""

#~ msgid "exact"
#~ msgstr ""

#~ msgid "On this page"
#~ msgstr ""

