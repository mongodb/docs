.. _mongoexport:

===============
``mongoexport``
===============

.. default-domain:: mongodb

.. binary:: mongoexport

.. program:: mongoexport

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. meta:: 
  :description: mongoexport is a database tool that produces a JSON or CSV export of data stored in a MongoDB instance.

.. facet::
   :name: genre
   :values: reference

.. |arrow| unicode:: U+27A4
.. |tool-binary| replace:: ``mongoexport``

.. |mongodb-aws-example| replace:: :ref:`mongoexport-example-connect-using-aws-iam`

This documentation is for version ``{+release+}`` of |tool-binary|.

Synopsis
--------

``mongoexport`` is a database tool that produces a JSON
or CSV export of data stored in a MongoDB instance.

Run ``mongoexport`` from the system command line, not the 
:binary:`~bin.mongo` shell.

``mongoexport`` is not a tool for backing up deployments. If you want to
create a backup solution, see :ref:`manual-tutorial-backup-and-restore`. 

.. seealso::

   :binary:`~bin.mongoimport` which provides the corresponding
   structured data import capability.

.. note::

   .. include:: /includes/fact-online-archive-callout.rst

.. include:: /includes/fact-migrate-atlas.rst

Syntax
-------

``mongoexport`` syntax:

.. code-block:: sh

   mongoexport --collection=<coll> <options> <connection-string>

You must specify the :option:`collection <mongoexport --collection>` to
export. If you do not specify an :option:`output file <mongoexport
--out>`, ``mongoexport`` writes to the standard output (e.g.
stdout).

Connect to a MongoDB Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To connect to a local MongoDB instance running on port 27017, you do
not have to specify the host or port.

For example, to export the specified :option:`collection <mongoexport
--collection>` to the specified :option:`output file <mongoexport
--out>` from a local MongoDB instance running on port 27017:

.. code-block:: sh

   mongoexport --collection=events --db=reporting --out=events.json

To specify a host and/or port of the MongoDB instance, you can either:

- Specify the hostname and port in the :option:`--uri connection string
  <mongoexport --uri>`:

  .. code-block:: sh
  
     mongoexport --uri="mongodb://mongodb0.example.com:27017/reporting"  --collection=events  --out=events.json [additional options]

  When using the :option:`--uri connection string <mongoexport --uri>`,
  the database can be specified as part of the string.
  
- Specify the hostname and port in the :option:`--host <mongoexport
  --host>`:

  .. code-block:: sh

     mongoexport --host="mongodb0.example.com:27017" --collection=events --db=reporting --out=events.json [additional options]
  
- Specify the hostname and port in the :option:`--host <mongoexport
  --host>` and :option:`--port <mongoexport --port>`:

  .. code-block:: sh

     mongoexport --host="mongodb0.example.com" --port=27017 --collection=events --db=reporting --out=events.json [additional options]

For more information on the options available, see :ref:`mongoexport-options`.

Connect to a Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   ``mongoexport`` is not a tool for backing up data. To back up your
   replica set, see :ref:`manual-tutorial-backup-and-restore`. 

To connect to a replica set to export its data, you can either:

- Specify the replica set name and members in the :option:`--uri connection string <mongoexport --uri>`:

  .. code-block:: sh
  
     mongoexport --uri="mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/reporting?replicaSet=myReplicaSetName" --collection=events --out=events.json [additional options]

  When using the :option:`--uri connection string <mongoexport --uri>`,
  the database can be specified as part of the string.

- Specify the replica set name and members in the :option:`--host <mongoexport --host>`:

  .. code-block:: sh

     mongoexport --host="myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com" --collection=events --db=reporting --out=events.json [additional options]

By default, ``mongoexport`` reads from the primary of the
replica set. To override the default, you can specify the :ref:`read
preference <replica-set-read-preference>`:

- You can specify the read preference in the
  :option:`--uri connection string <mongoexport --uri>`

  .. code-block:: sh

     mongoexport --uri="mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/reporting?replicaSet=myReplicaSetName&readPreference=secondary" --collection=events --out=events.json [additional options]

  If specifying the read preference tags, include the
  :urioption:`readPreferenceTags` option:

  .. code-block:: sh

     mongoexport --uri="mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/reporting?replicaSet=myReplicaSetName&readPreference=secondary&readPreferenceTags=region:east" --collection=events --out=events.json [additional options]

  When using the :option:`--uri connection string <mongoexport --uri>`,
  the database can be specified as part of the string.

- You can specify the read preference using the
  :option:`--readPreference <mongoexport --readPreference>` command-line
  option. The command-line option takes a string if specifying only the read preference mode:

  .. code-block:: sh

     mongoexport --host="myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017" --readPreference=secondary --collection=events --db=reporting --out=events.json [additional options]

  Or, the command-line option can takes a quote-enclosed document 
  ``'{ mode: <mode>, tagSets: [ <tag1>, ... ], maxStalenessSeconds:<num>}'`` 
  to specify the mode, the optional :ref:`read preference tag
  sets <configure-read-pref-tags>`, and the optional
  :ref:`maxStalenessSeconds
  <replica-set-read-preference-max-staleness>`:
  
  .. code-block:: sh

     mongoexport --host="myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017" --readPreference='{mode: "secondary", tagSets: [ { "region": "east" } ]}' --collection=events --db=reporting --out=events.json [additional options]

For more information on the options available, see :ref:`mongoexport-options`.

Connect to a Sharded Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   ``mongoexport`` is not a tool for backing up data. To back up your
   sharded cluster, see :ref:`backup-restore-sharded-clusters`. 

To connect to a sharded cluster to export its data, you can either:

- Specify the hostname of the :binary:`~bin.mongos` instance in the
  :option:`--uri connection string <mongoexport --uri>`

  .. code-block:: sh
  
     mongoexport --uri="mongodb://mongos0.example.com:27017/reporting" --collection=events --out=events.json [additional options]
  
  When using the :option:`--uri connection string <mongoexport --uri>`,
  the database can be specified as part of the string.

- Specify the hostname and port of the :binary:`~bin.mongos` instance in the :option:`--host <mongoexport --host>` 

  .. code-block:: sh

     mongoexport --host="mongos0.example.com:27017" --collection=events --db=reporting --out=events.json[additional options]

By default, ``mongoexport`` reads from the primary of the
shard replica set. To override the default, you can specify the :ref:`read
preference <replica-set-read-preference>`:

- You can specify the read preference in the
  :option:`--uri connection string <mongoexport --uri>`

  .. code-block:: sh
  
     mongoexport --uri="mongodb://mongos0.example.com:27017/reporting?readPreference=secondary" --collection=events --out=events.json [additional options]

  If specifying the read preference tags, include the
  :urioption:`readPreferenceTags` option:

  .. code-block:: sh
  
     mongoexport --uri="mongodb://mongos0.example.com:27017/reporting?readPreference=secondary&readPreferenceTags=region:east" --collection=events --out=events.json [additional options]

  When using the :option:`--uri connection string <mongoexport --uri>`,
  the database can be specified as part of the string.

- You can specify the read preference using the
  :option:`--readPreference <mongoexport --readPreference>` command-line
  option.  The command-line option takes a string if specifying only the read preference mode:

  .. code-block:: sh
  
     mongoexport --host="mongos0.example.com:27017" --readPreference=secondary --collection=events --db=reporting --out=events.json [additional options]

  Or, the command-line option can takes a quote-enclosed document 
  ``'{ mode: <mode>, tagSets: [ <tag1>, ... ], maxStalenessSeconds:<num>}'`` 
  to specify the mode, the optional :ref:`read preference tag
  sets <configure-read-pref-tags>`, and the optional
  :ref:`maxStalenessSeconds
  <replica-set-read-preference-max-staleness>`:
  
  .. code-block:: sh

     mongoexport --host="mongos0.example.com:27017" --readPreference='{mode: "secondary", tagSets: [ { "region": "east" } ]}' --collection=events --db=reporting --out=events.json [additional options]

.. _mongoexport-options:

Options
-------

.. option:: --help

   Returns information on the options and use of ``mongoexport``.


.. option:: --verbose, -v

   Increases the amount of internal reporting returned on standard output
   or in log files. Increase the verbosity with the ``-v`` form by
   including the option multiple times, (e.g. ``-vvvvv``.)
   


.. option:: --quiet

   Runs ``mongoexport`` in a quiet mode that attempts to limit the amount
   of output.

   This option suppresses:
   
   - Output from :term:`database commands <database command>`
   
   - Replication activity
   
   - Connection accepted and closed events

   - All logs, including error messages, except for those that occur when
     parsing options


.. option:: --version

   Returns the ``mongoexport`` release number.


.. option:: --config=<filename>

   .. versionadded:: 100.3.0

   .. include:: /includes/fact-config-file-option.rst


.. option:: --uri=<connectionString>
   
   Specifies the resolvable :manual:`URI connection string
   </reference/connection-string/>` of the MongoDB deployment, enclosed
   in quotes:
   
   .. code-block:: none
   
      --uri="mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]"
   
   .. include:: /includes/extracts/uri-positional-mongoexport.rst

   For information on the components of the connection string, see
   the :manual:`Connection String URI Format
   </reference/connection-string/>` documentation. 

   .. include:: /includes/fact-uri-with-conflicting-info.rst       

   .. include:: /includes/fact-ubuntu-dns-error.rst

   .. include:: /includes/fact-warning-uri-config.rst


.. option:: --host=<hostname><:port>, -h=<hostname><:port>

   *Default*: localhost:27017

   Specifies the resolvable hostname of the MongoDB deployment. By
   default, ``mongoexport`` attempts to connect to a MongoDB
   instance running on the localhost on port number ``27017``.
   
   To connect to a replica set, specify the
   :setting:`~replication.replSetName` and a seed list of set members, as in
   the following:
   
   .. code-block:: none
   
      --host=<replSetName>/<hostname1><:port>,<hostname2><:port>,<...>
   
   When specifying the replica set list format, ``mongoexport`` always connects to
   the :term:`primary <Primary>`. 
   
   You can also connect to any single member of the replica set by specifying
   the host and port of only that member:
   
   .. code-block:: none
   
      --host=<hostname1><:port>

   If you use IPv6 and use the ``<address>:<port>`` format, you must
   enclose the portion of an address and port combination in
   brackets (e.g. ``[<address>]``).
   
   .. include:: /includes/extracts/uri-used-with-host.rst


.. option:: --port=<port>

   *Default*: 27017

   Specifies the TCP port on which the MongoDB instance listens for
   client connections.
   
   .. include:: /includes/extracts/uri-used-with-port.rst



.. option:: --ssl

   Enables connection to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   TLS/SSL support enabled.
   
   .. include:: /includes/extracts/uri-used-with-ssl.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslCAFile=<filename>

   Specifies the :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   :file:`.pem` file using relative or absolute paths.
   
   .. include:: /includes/extracts/uri-used-with-sslcafile.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --sslPEMKeyFile=<filename>

   Specifies the :file:`.pem` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the :file:`.pem` file using relative
   or absolute paths.
   
   This option is required when using the :option:`--ssl` option to connect
   to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   :setting:`~net.tls.CAFile` enabled *without*
   :setting:`~net.tls.allowConnectionsWithoutCertificates`.
   
   .. include:: /includes/extracts/uri-used-with-sslpemkeyfile.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslPEMKeyPassword=<value>

   Specifies the password to de-crypt the certificate-key file (i.e.
   :option:`--sslPEMKeyFile`). Use the :option:`--sslPEMKeyPassword` option only if the
   certificate-key file is encrypted. In all cases, the ``mongoexport`` will
   redact the password from all logging and reporting output.
   
   If the private key in the PEM file is encrypted and you do not specify
   the :option:`--sslPEMKeyPassword` option, the ``mongoexport`` will prompt for a passphrase. See
   :ref:`ssl-certificate-password`.
   
   .. include:: /includes/extracts/uri-used-with-sslpemkeypassword.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst

   .. include:: /includes/fact-warning-sslpemkeypassword-config.rst


.. option:: --sslCRLFile=<filename>

   Specifies the :file:`.pem` file that contains the Certificate Revocation
   List. Specify the file name of the :file:`.pem` file using relative or
   absolute paths.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslAllowInvalidCertificates

   Bypasses the validation checks for server certificates and allows
   the use of invalid certificates. When using the
   :setting:`~net.tls.allowInvalidCertificates` setting, MongoDB logs as a
   warning the use of the invalid certificate.
   
   .. include:: /includes/extracts/ssl-facts-invalid-cert-warning-clients.rst
   
   .. include:: /includes/extracts/uri-used-with-sslallowinvalidcertificates.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslAllowInvalidHostnames

   Disables the validation of the hostnames in TLS/SSL certificates. Allows
   ``mongoexport`` to connect to MongoDB instances even if the hostname in their
   certificates do not match the specified hostname.
   
   .. include:: /includes/extracts/uri-used-with-sslallowinvalidhostnames.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --username=<username>, -u=<username>

   Specifies a username with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the :option:`--password <mongoexport --password>` and
   :option:`--authenticationDatabase <mongoexport --authenticationDatabase>` options.

   .. include:: /includes/extracts/uri-used-with-username.rst

   .. include:: /includes/extracts/mongodb-aws-username-mongoexport.rst


.. option:: --password=<password>, -p=<password>

   Specifies a password with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the :option:`--username <mongoexport --username>` and
   :option:`--authenticationDatabase <mongoexport --authenticationDatabase>` options.

   To prompt the user for the password, pass the :option:`--username <mongoexport --username>`
   option without :option:`--password <mongoexport --password>` or specify an empty string as the
   :option:`--password <mongoexport --password>` value, as in ``--password ""`` .

   .. include:: /includes/extracts/uri-used-with-password.rst

   .. include:: /includes/extracts/mongodb-aws-password-mongoexport.rst

   .. include:: /includes/fact-warning-password-config.rst


.. option:: --awsSessionToken=<AWS Session Token>

   .. include:: /includes/extracts/mongodb-aws-session-token-mongoexport.rst


.. option:: --authenticationDatabase=<dbname>

   Specifies the authentication database where the specified :option:`--username <mongoexport --username>` has been created.
   See :ref:`user-authentication-database`.

   If you do not specify an authentication database, ``mongoexport``
   assumes that the database specified to export holds the user's credentials.

   .. include:: /includes/fact-auth-database-use-external.rst
    
   .. include:: /includes/extracts/uri-used-with-authenticationDatabase.rst
  

.. option:: --authenticationMechanism=<name>

   *Default*: SCRAM-SHA-1

   Specifies the authentication mechanism the ``mongoexport`` instance uses to
   authenticate to the :binary:`~bin.mongod` or :binary:`~bin.mongos`.

   .. versionchanged:: 100.1.0
   
      Starting in version ``100.1.0``, ``mongoexport`` adds support
      for the ``MONGODB-AWS`` authentication mechanism when connecting
      to a :atlas:`MongoDB Atlas <?tck=docs_server>` cluster.

   .. include:: /includes/list-table-auth-mechanisms.rst
   
   .. include:: /includes/extracts/uri-used-with-authenticationMechanism.rst


.. option:: --gssapiServiceName=<serviceName>

   Specify the name of the service using :manual:`GSSAPI/Kerberos
   </core/kerberos>`. Only required if the service does not use the
   default name of ``mongodb``.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --gssapiHostName=<hostname>

   Specify the hostname of a service using :manual:`GSSAPI/Kerberos
   </core/kerberos>`. *Only* required if the hostname of a machine does
   not match the hostname resolved by DNS.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --db=<database>, -d=<database>

   Specifies the name of the database on which to run the ``mongoexport``.
   
   .. include:: /includes/extracts/uri-used-with-db.rst


.. option:: --collection=<collection>, -c=<collection>

   Specifies the collection to export.
   


.. option:: --fields=<field1[,field2]>, -f=<field1[,field2]>

   Specifies a field or fields to *include* in the export. Use a comma
   separated list of fields to specify multiple fields.
   
   If any of your field names include white space, use
   quotation marks to enclose the field list. For example, if you wished
   to export two fields, ``phone`` and ``user number``, you would
   specify ``--fields "phone,user number"``.
   
   For :option:`csv <mongoexport --type>` output formats,
   ``mongoexport`` includes only the specified field(s), and the
   specified field(s) can be a field within a sub-document.
   
   For :term:`JSON` output formats, ``mongoexport`` includes
   only the specified field(s) **and** the ``_id`` field, and if the
   specified field(s) is a field within a sub-document, the
   ``mongoexport`` includes the sub-document with all
   its fields, not just the specified field within the document.
   
   See: :ref:`mongoexport-fields-example` for sample usage.
   


.. option:: --fieldFile=<filename>

   An alternative to :option:`--fields <mongoexport --fields>`. The
   :option:`--fieldFile` option allows you to
   specify in a file the field or fields to *include* in the export and is
   **only valid** with the :option:`--type <mongoexport --type>` option
   with value ``csv``. The
   file must have only one field per line, and the line(s) must end with
   the LF character (``0x0A``).
   
   ``mongoexport`` includes only the specified field(s). The
   specified field(s) can be a field within a sub-document.
   
   See :ref:`mongoexport-fieldFile-example` for sample usage.


.. option:: --query=<JSON>, -q=<JSON>

   Provides a query as a :term:`JSON document` (enclosed in quotes) to 
   return matching documents in the export. 
   
   .. include:: /includes/fact-quote-command-line-query.rst
   
   The query :red:`must` be in :manual:`Extended JSON v2 format
   (either relaxed or canonical/strict mode)
   </reference/mongodb-extended-json>`, including enclosing the
   field names and operators in quotes:
   
   For example, given a collection named ``records`` in the database
   ``test`` with the following documents:
   
   .. code:: json
   
      { "_id" : ObjectId("51f0188846a64a1ed98fde7c"), "a" : 1, "date" : ISODate("1960-05-01T00:00:00Z") }
      { "_id" : ObjectId("520e61b0c6646578e3661b59"), "a" : 1, "b" : 2, "date" : ISODate("1970-05-01T00:00:00Z") }
      { "_id" : ObjectId("520e642bb7fa4ea22d6b1871"), "a" : 2, "b" : 3, "c" : 5, "date" : ISODate("2010-05-01T00:00:00Z") }
      { "_id" : ObjectId("520e6431b7fa4ea22d6b1872"), "a" : 3, "b" : 3, "c" : 6, "date" : ISODate("2015-05-02T00:00:00Z") }
      { "_id" : ObjectId("520e6445b7fa4ea22d6b1873"), "a" : 5, "b" : 6, "c" : 8, "date" : ISODate("2018-03-01T00:00:00Z") }
      { "_id" : ObjectId("5cd0de910dbce4346295ae28"), "a" : 15, "b" : 5, "date" : ISODate("2015-03-01T00:00:00Z") }
   
   The following ``mongoexport`` uses the :option:`-q` option
   to export only the documents with the field ``a`` greater than or
   equal to (:query:`$gte`) ``3`` and the field ``date`` less than
   (:query:`$lt`) ``ISODate("2016-01-01T00:00:00Z")``, which is
   specified using the :ref:`extended JSON v2 format (relaxed mode) for
   dates <extended-json-date>` ( ``{ "$date":
   "YYYY-MM-DDTHH:mm:ss.mmm\<offset\>"}`` ): 
   
   .. code:: bash
   
      mongoexport -d=test -c=records -q='{ "a": { "$gte": 3 }, "date": { "$lt": { "$date": "2016-01-01T00:00:00.000Z" } } }' --out=exportdir/myRecords.json
   
   The resulting file contains the following documents:
   
   .. code:: json
   
      {"_id":{"$oid":"520e6431b7fa4ea22d6b1872"},"a":3.0,"b":3.0,"c":6.0,"date":{"$date":"2015-05-02T00:00:00Z"}}
      {"_id":{"$oid":"5cd0de910dbce4346295ae28"},"a":15.0,"b":5.0,"date":{"$date":"2015-03-01T00:00:00Z"}}
   
   You can sort the results with the :option:`--sort` option to
   ``mongoexport``.
   
.. option:: --queryFile=<filename>

   An alternative to :option:`--query <mongoexport --query>`. The
   ``--queryFile`` option allows you to
   specify in a file the query in :manual:`Extended JSON v2 format
   </reference/mongodb-extended-json>`. 


.. option:: --type=<string>

   *Default*: json

   Specifies the file type to export. Specify ``csv`` for :term:`CSV`
   format or ``json`` for :term:`JSON` format.
   
   If you specify ``csv``, then you must also use either
   the :option:`--fields` or the :option:`--fieldFile` option to
   declare the fields to export from the collection.
   


.. option:: --out=<file>, -o=<file>

   Specifies a file to write the export to. If you do not specify a file
   name, the ``mongoexport`` writes data to standard output
   (e.g. ``stdout``).
   


.. option:: --jsonFormat=<canonical|relaxed>
   
   *Default*: relaxed

   Modifies the output to use either canonical or relaxed mode of the
   :manual:`MongoDB Extended JSON (v2)</reference/mongodb-extended-json>` format.
   
   For differences between canonical and relaxed modes, see
   :manual:`MongoDB Extended JSON (v2)</reference/mongodb-extended-json>`.

.. option:: --jsonArray

   Modifies the output of ``mongoexport`` to write the
   entire contents of the export as a single :term:`JSON` array. By
   default ``mongoexport`` writes data using one JSON document
   for every MongoDB document.
   


.. option:: --pretty

   Outputs documents in a pretty-printed format JSON.
   


.. option:: --noHeaderLine
   
   By default, ``mongoexport`` includes the exported field names as the first
   line in a CSV output. :option:`--noHeaderLine` directs ``mongoexport`` to export the
   data without the list of field names.
   :option:`--noHeaderLine` is **only valid** with the
   :option:`--type <mongoexport --type>` option with value ``csv``.
   
   See :ref:`mongoexport-noHeaderLine-example` for sample usage.


.. option:: --readPreference=<string|document>

   *Default*: :readmode:`primary`

   Specifies the :ref:`read preference<replica-set-read-preference>` for
   ``mongoexport``. The :option:`--readPreference` option can take:
   
   - A string if specifying only the read preference mode:
   
     .. code-block:: sh
   
        --readPreference=secondary
   
   - A quote-enclosed document to specify the mode, the optional
     :ref:`read preference tag sets <configure-read-pref-tags>`, and the
     optional :ref:`maxStalenessSeconds
     <replica-set-read-preference-max-staleness>`:
   
     .. code-block:: sh
   
        --readPreference='{mode: "secondary", tagSets: [ { "region": "east" } ], maxStalenessSeconds: 120}'
   
     If specifying the :ref:`maxStalenessSeconds
     <replica-set-read-preference-max-staleness>`, the value must be greater than or equal to 90.
   
   ``mongoexport`` defaults to :readmode:`primary`
   :ref:`read preference <replica-set-read-preference>`.
   
   If the read preference is also included in the
   :option:`--uri connection string <--uri>`, the command-line
   :option:`--readPreference` overrides the read preference specified in
   the URI string.


.. option:: --skip=<number>

   Use :option:`--skip` to control where ``mongoexport`` begins
   exporting documents. See :method:`~cursor.skip()` for information about
   the underlying operation.


.. option:: --limit=<number>

   Specifies a maximum number of documents to include in the
   export. See :method:`~cursor.limit()` for information about
   the underlying operation.
   


.. option:: --sort=<JSON>

   Specifies an ordering for exported results. If an index does
   **not** exist that can support the sort operation, the results must
   be *less than* 32 megabytes.
   
   Use :option:`--sort` conjunction with :option:`--skip` and
   :option:`--limit` to limit number of exported documents.
   
   .. code-block:: sh
   
      mongoexport -d=test -c=records --sort='{a: 1}' --limit=100 --out=export.0.json
      mongoexport -d=test -c=records --sort='{a: 1}' --limit=100 --skip=100 --out=export.1.json
      mongoexport -d=test -c=records --sort='{a: 1}' --limit=100 --skip=200 --out=export.2.json
   
   See :method:`~cursor.sort()` for information about the underlying
   operation.


Learn More
----------

- :ref:`mongoexport-compatibility-and-installation`
- :ref:`mongoexport Behavior <mongoexport-behavior-access-usage>`
- :ref:`mongoexport-examples`

.. toctree::
   :maxdepth: 1
   :hidden:

   Compatibility & Installation </mongoexport/mongoexport-compatibility-and-installation>
   Behavior </mongoexport/mongoexport-behavior>
   Examples </mongoexport/mongoexport-examples>