title: "Click :guilabel:`{+Old-Backup+}` in the left navigation."
level: 4
ref: go-backup-view
content: |

   .. figure:: /images/continuous-backup-btn.png
     :scale: 50%
     :alt: {+Old-Backup+} button
---
title: "Select the snapshot to query."
level: 4
ref: select-snapshot-query
content: |
  
   The :guilabel:`Overview` tab on the :guilabel:`{+Old-Backup+}`
   page lists the project's clusters. 

   - If backup is enabled for the cluster, the :guilabel:`Status` is
     :guilabel:`Active`.

   - If backup is disabled for the cluster, the :guilabel:`Status` is
     :guilabel:`Inactive`.

   For the deployment whose backup you want to query, click the
   ellipsis in the :guilabel:`Options` column and select
   :guilabel:`Query`.

   You can also click :guilabel:`View All Snapshots` to view its
   snapshots and click :guilabel:`Query` under the
   :guilabel:`Actions` column for the desired snapshot.
---
title: "Open a Backup Tunnel to the Queryable Snapshot."
ref: open-backup-tunnel
content: |
   a. Select the snapshot to query and click :guilabel:`Next`.

   #. :guilabel:`Start` the process to query a snapshot. You will be
      prompted to enter your |service| password.

   #. Select :guilabel:`Backup Tunnel` as the connection method to the
      queryable snapshot.

   #. Select your :guilabel:`Platform`.

   #. Click :guilabel:`Download Backup Tunnel`.

   #. Uncompress the downloaded file.

   #. Open a terminal or command prompt and go to the uncompressed
      <tunnel> directory. Run the executable to start the tunnel.

      The default port for the tunnel is ``27017``. To change the port,
      use the ``--local`` flag, as in the following example:

      .. code-block:: javascript

         ./<tunnel executable> --local localhost:27020

      .. note::

         If you change the port, you must include the port information
         when connecting.
---
title: Use ``mongodump`` to export a single database or collection from the queryable backup.
ref: dump-database
content: |
   To export the data from a database:
      Include the following
      :manual:`mongodump </reference/program/mongodump>` options to
      connect to the tunnel:

      - ``--port`` set to the port for the tunnel.

      - ``--db`` set to the name of the database to export.

      - ``--out`` set to an empty directory to
        output the data dump.

        .. important::

           Ensure that the user running
           :manual:`mongodump </reference/program/mongodump>` can write to
           the specified directory.

      .. class:: copyable-code
      .. code-block:: none

         mongodump --port <port for tunnel> --db <single-database> --out <data-dump-path>


      For example, to connect to a tunnel running on port ``27020`` to
      dump out data from the ``test`` database to the
      :file:`/mydata/restoredata/` directory:

      .. code-block:: sh

         mongodump --port 27020 --db test --out /mydata/restoredata/

      :manual:`mongodump </reference/program/mongodump>` outputs the
      ``test`` database files into the
      :file:`/mydata/restoredata/test/` directory.

      If :manual:`mongodump </reference/program/mongodump>` is not
      in your ``$PATH``, specify the path for the tool when running the command.

   To export the data for a collection:
      Include the following options to connect to the tunnel:

      - ``--port`` set to the port for the tunnel.

      - ``--db`` set to the name of the database to export.

      - ``--collection`` set to the name of the
        collection to export.

      - ``--out`` set to an empty directory to
        output the data dump.

        .. important::

           Ensure that the user running
           :manual:`mongodump </reference/program/mongodump>` can write
           to the specified directory.

      .. class:: copyable-code
      .. code-block:: none

         mongodump --port <port for tunnel> --db <single-database> --collection <collection-name> --out <data-dump-path>

      For example, to connect to a tunnel running on port ``27020`` to
      dump out data from the ``restaurants`` collection from ``test``
      database to :file:`/mydata/restoredata/` directory:

      .. code-block:: sh

         mongodump --port 27020 --db test --collection restaurants --out /mydata/restoredata/

      :manual:`mongodump </reference/program/mongodump>` outputs the
      ``restaurants`` collection data into the
      :file:`/mydata/restoredata/test/restaurants.bson` file.
---
title: "Use ``mongorestore`` to restore the single database or collection."
ref: import-database
content: |
   To restore a single database:
      Include the following
      :manual:`mongorestore </reference/program/mongorestore/>` options:

      .. note::

         To restore to an |service| cluster, we recommend you connect with a DNS seed list connection string using the ``--uri`` option.

      - ``--uri`` set to the connection string for the destination cluster.

      - ``--db`` set to the name of the destination database.

      .. note::

         If your password contains special characters, it must be percent-encoded.
         
      Optionally, you can include the ``--drop`` option to drop the
      database in the destination cluster if the database already
      exists.

   .. tabs::

      .. tab:: Connect with a standard connection string
         :tabid: standard_connection

         .. class:: copyable-code
         .. code-block:: sh

            mongorestore --uri "mongodb://username:password@mongodb0.example.com:<Port>,mongodb1.example.com:<Port1>,mongodb2.example.com:<Port2>" --ssl --db <destination database> <data-dump-path/database> --drop
      
      .. tab:: Connect with a DNS seed list connection string
         :tabid: dns_seed_list_connection

         .. class:: copyable-code
         .. code-block:: sh

            mongorestore --uri "mongodb+srv://username:password@cluster0.example.mongodb.net" --db <destination database> <data-dump-path/database> --drop

   For example, to restore from the :file:`/mydata/restoredata/test`
   directory to a new database ``restoredTest``:

   .. tabs::

      .. tab:: Connect with a standard connection string
         :tabid: standard_connection

         .. code-block:: sh

            mongorestore --uri "mongodb://username:password@00.foo.mongodb.net:27017,01.foo.mongodb.net:27017,02.foo.mongodb.net:27017" --ssl --db restoredTest /mydata/restoredata/test --drop

         The example assumes that the destination replica set's primary or the destination sharded cluster's :manual:`mongos </reference/program/mongos>` listens on port ``27017``.

      .. tab:: Connect with a DNS seed list connection string
         :tabid: dns_seed_list_connection

         .. code-block:: sh

            mongorestore --uri "mongodb+srv://username:password@cluster0.example.mongodb.net" --db restoredTest /mydata/restoredata/test --drop  

   To restore a single collection:
      Include the following
      :manual:`mongorestore </reference/program/mongorestore>` options:

      .. note::

         To restore to an |service| cluster, we recommend you connect with a DNS seed list using the ``--uri`` option.

      - ``--uri`` set to the connection string for the destination cluster.

      - ``--db`` set to the name of the destination database.

      - ``--collection`` set to the name of the destination collection.

      Optionally, you can include the ``--drop`` option to drop the
      collection in the destination cluster if the collection already
      exists.

   .. class:: copyable-code 
   .. code-block:: sh

      mongorestore --uri "mongodb+srv://username:password@cluster0.example.mongodb.net" --db <destination-database> --collection <destination-collection> <data-dump-path/dbname/collection.bson> --drop

   For example, to restore from the
   :file:`/mydata/restoredata/test/restaurants.bson` data file to a new
   collection ``rest2`` in the ``test2`` database:

   .. code-block:: sh

      mongorestore --uri "mongodb+srv://username:password@cluster0.example.mongodb.net" --db test2 --collection rest2 /mydata/restoredata/test/restaurants.bson --drop

---
title: "Terminate the queryable instance."
ref: terminate-instance
content: |
   Once you have finished, you can terminate the
   queryable instance:

   a. Click :guilabel:`Backup` in the left navigation pane and click
      the :guilabel:`Restore History` tab.

   #. Hover over the :guilabel:`Status` column for the target
      deployment item and click :guilabel:`Cancel`.

   #. Click :guilabel:`Cancel Restore Job`.

---
title: "Restart your appplication."
ref: restart-application
content: |
  Restart your application and ensure it uses the new target cluster.
...
