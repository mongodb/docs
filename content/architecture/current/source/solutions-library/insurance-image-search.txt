.. _arch-center-is-image-search:

===============================================
AI-Enhanced Claim Adjustment for Auto Insurance 
===============================================

.. facet::
   :name: genre
   :values: tutorial

.. meta:: 
   :keywords: Gen AI, insurance, Atlas
   :description: Learn how to use Atlas Vector Search to create an image search solution featuring our demo as an example.
   
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Revolutionize claim management using AI and vector image search. Easily compare accident photos for precise estimates.

**Use cases:** `Gen AI <https://www.mongodb.com/use-cases/artificial-intelligence>`__

**Industries:** `Insurance <https://www.mongodb.com/industries/insurance>`__

**Products:** `MongoDB Atlas <http://mongodb.com/atlas>`__, 
`MongoDB Atlas Vector Search <https://www.mongodb.com/products/platform/atlas-vector-search>`__

**Partners:** `PyTorch <https://pytorch.org/>`__

Solution Overview
-----------------

The insurance industry has the daunting challenge of processing claims
efficiently and accurately. Traditional methods are fraught with
inefficiencies, primarily due to: 

- **Time-intensive manual processes:** Adjusters typically spend extensive time manually comparing new accident photos with historical claims, a process that is both slow and error prone. In our example, a car has just crashed into another vehicle. The driver gets out and starts taking pictures of the damage, uploading them to their auto insurance app, making the photos available to a claim adjuster. Typically, the adjuster would painstakingly comb through past claims and parse guidelines to work up an estimate of the damage and process the claim. 

- **Fragmented data systems:** Vital information is often dispersed across multiple, disconnected systems, making data retrievaland analysis a cumbersome and error-prone task. 

- **Volume of unstructured data:** The sheer amount of unstructured data, such as images and documents, poses a significant challenge in terms of storage, retrieval, and analysis, often leading to delays and inaccuracies in claim processing. 

- **Inconsistency and inaccuracy:** The manual nature of traditional claim processing can result in inconsistent assessments and potential inaccuracies in estimating claims, impacting customer satisfaction and financial outcomes.

Our solution addresses these challenges by implementing an AI-driven vector search system within a centralized vector database. This approach offers several benefits: 

- **Reduces time and effort:** Automates the comparison of accident images, significantly cutting down the time required for adjusters to make informed decisions. 

- **Integrates data seamlessly:** By using MongoDB Atlas, our solution unifies data across systems, enhancing accessibility and analysis.

- **Harnesses unstructured data:** The AI-driven system efficiently processes and analyzes unstructured data, leading to more accurate and consistent claim assessments.

Through a structured process we can centrally organize and integrate our
data, building an `ODL
<https://www.mongodb.com/basics/implementing-an-operational-data-layer>`__
enables strategic initiatives such as legacy modernization and data as a
service. Building this data architecture on MongoDB Atlas provides the
foundation for modern apps, giving us access to new platform features
such as `Atlas Vector Search
<https://www.mongodb.com/products/platform/atlas-vector-search>`__,
which we can use to unlock unstructured data and work with `AI
<https://www.mongodb.com/basics/what-is-artificial-intelligence>`__ and
`LLMs <https://www.mongodb.com/basics/large-language-models>`__.

The adjuster can simply ask an AI to “show me images similar to this
crash,” and a Vector Search-powered system can return photos of car
accidents with similar damage profiles from the claims history database.
The adjuster is now able to quickly compare the car accident photos with
the most relevant ones in the insurer's claim history.

Broader Applications
~~~~~~~~~~~~~~~~~~~~

While tailored for the insurance industry, this solution's principles
are universally applicable. Sectors dealing with large volumes of
`unstructured data <https://www.mongodb.com/unstructured-data>`__ — from
healthcare to legal services — can benefit from this approach, leading
to enhanced operational efficiencies and improved decision-making
processes.

.. video:: https://www.youtube.com/watch?v=N4Fp1_HYr1Q

This video showcases how MongoDB turbocharges the process of building
semantic search and AI-powered applications.

Reference Architectures
-----------------------

MongoDB Atlas combines transactional and search capabilities in the same
platform, providing a unified development experience. As embeddings are
stored alongside existing data, when running a vector search query, we
get the document containing both the vector embeddings and the
associated metadata, eliminating the need to retrieve the data
elsewhere. This is a great advantage for developers who don’t need to
learn to use and maintain a separate technology and can fully focus on
building their apps.

.. figure:: /includes/images/industry-solutions/insurance-image-search-arch1.svg
   :alt: AI-enhanced claim adjustment

   Figure 1. Reference architecture with MongoDB

.. figure:: /includes/images/industry-solutions/insurance-image-search-store.svg
   :alt: Store

   Figure 2. A dataset of photos of past accidents is vectorized and stored in Atlas

.. figure:: /includes/images/industry-solutions/insurance-image-search-query.svg
   :alt: Query

   Figure 3. An image similarity query is performed, and the 5 top similar images are returned

Data Model Approach
-------------------

The data model for the vectorized images collection is extremely basic,
our claim collection contains documents including car crash photos
(references to them, as AWS S3 links) and metadata about photos such as
notes describing the accident and the loss amount.

Once the photos are vectorized, their embedding is added to the document
as an array alongside existing fields:

.. code-block:: json

   {
      _id: ObjectId('64d39175e65'),
      notes: "The crash happened...",
      loss amount: 1250,
      filename: "image_65.jpg",
      url: "https://my-bucket...",
      embedding: [0.3, 0.6, ..., 11.2]
   }

Sample document after the image embedding is added.

Building the Solution
---------------------

In order to build our image search pipeline we need to follow two simple steps:

.. procedure::
   :style: normal
   
   .. step:: Configure the Atlas Search index

      Create the Search index in Atlas following the instructions of
      `this tutorial (Step 4)
      <https://www.mongodb.com/developer/products/atlas/building-generative-ai-applications-vector-search-open-source-models/?hideMenu=1>`__
      using the following configuration as shown in the image:

      .. code-block:: json
      
         {
            _id: ObjectId('64d39175e65'),
            notes: "The crash happened...",
            loss amount: 1250,
            filename: "image_65.jpg",
            url: "https://my-bucket...",
            embedding: [0.3, 0.6, ..., 11.2]
         }

   .. step:: Configure the Atlas Search index

      Open the python notebook in the  Github repo and follow the instructions, the code will guide you through the following steps:
      
      - Definition of the image embedding class
      
      - Dataset download
      
      - Definition of data visualization functions
      
      - Connection to MongoDB
      
      - Vectorization of the dataset
      
      - Querying the dataset with a photo picked by the user

      .. code-block:: json
      
         documents = coll.aggregate([
            {
               "$search": {
               "index": "default",
               "knnBeta": {
               "vector": query_embedding,
               "path": "embedding",
               "k": 5
                  }
               }
            }
         ])

      The above code shows how we perform the similarity query in MQL.

      .. figure:: /includes/images/industry-solutions/insurance-image-search-IndexConfig.svg
         :figwidth: 1200px
         :alt: Index configuration
      
         Figure 4. How to configure the Search Index in the Atlas UI

Visit the `GitHub repo: Insurance-image-search <https://github.com/mongodb-industry-solutions/Insurance-image-search?tab=readme-ov-file>`__ and create this demo for yourself by following the instructions and associated models in this solution’s repository.

Key Learnings
-------------

- **Image vectorization:** The embedding generation process can be carried
  out using different models and deployment options. It is always
  important to be mindful of privacy and data protection requirements.
  If we need our data to never leave our servers, a locally deployed
  model is probably a good idea. Otherwise, we can simply call an API
  and get our vectors back, as explained in `this
  <https://www.mongodb.com/docs/atlas/atlas-vector-search/create-embeddings/>`__
  tutorial. 

- **Creation of a Vector Search index in Atlas:** It is now possible to
  create indexes for `local deployments
  <https://www.mongodb.com/docs/atlas/cli/stable/atlas-cli-deploy-local/#std-label-atlas-cli-deploy-local-avs>`__. 

- **Performing a Vector Search query:** Notably `Vector Search queries
  <https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-stage/>`__
  have a dedicated operator within MongoDB’s `aggregation pipeline
  <https://www.mongodb.com/docs/manual/aggregation/>`__. This means that
  they can be concatenated with other operations, making it extremely
  convenient for developers because they don’t need to learn a different
  language or change context.

Technologies and Products Used
------------------------------

MongoDB Developer Data Platform
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- `MongoDB Atlas <http://mongodb.com/atlas>`__ 
- `MongoDB Atlas Vector Search <https://www.mongodb.com/products/platform/atlas-vector-search>`__

Partner Technologies
~~~~~~~~~~~~~~~~~~~~

- `Image embedding generation with PyTorch <https://pytorch.org/>`__

Authors
-------

- Luca Napoli, MongoDB
- Jeff Needham, MongoDB
- Karthic Subramanian, MongoDB