============================================
Deploy Sharded Cluster using Hashed Sharding
============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

Hashed shard keys use a :ref:`hashed index <index-hashed-index>` of a
single field as the :term:`shard key` to partition data across your
sharded cluster.

Hashed sharding provides more even data distribution across the sharded 
cluster at the cost of reducing :ref:`sharding-query-isolation`. Post-hash, 
documents with "close" shard key values are unlikely to be on the same 
chunk or shard - the :program:`mongos` is more likely to perform 
:ref:`sharding-mongos-broadcast` to fulfill a given query.

If you already have a sharded cluster deployed, skip to 
:ref:`deploy-hashed-sharded-cluster-shard-collection`.

CloudManager and OpsManager
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you are currently using or are planning to use Cloud Manager or
Ops Manager, consider using their built-in features for
deploying a :term:`sharded cluster`.

See ``Deploy a Sharded Cluster`` in the
:mms-docs:`Cloud Manager manual</tutorial/deploy-sharded-cluster>` or in the
:opsmgr:`Ops Manager manual</tutorial/deploy-sharded-cluster>`.

Considerations
--------------

Operating System
~~~~~~~~~~~~~~~~

This tutorial uses the :program:`mongod` and :program:`mongos`
programs. Windows users should use the :program:`mongod.exe` and
:program:`mongos.exe` programs instead.

Security
~~~~~~~~

This tutorial does *not* include the required steps for configuring
:doc:`/core/security-internal-authentication` or :doc:`/core/authorization`.
See :doc:`/tutorial/deploy-sharded-cluster-with-keyfile-access-control` for a
tutorial on deploying a sharded cluster with a
:ref:`keyfile<internal-auth-keyfile>`.

In production environments, sharded clusters should employ at
minimum :doc:`/core/security-x.509` security for internal authentication
and client access.

For details on using x.509 for internal authentication, see
:doc:`/tutorial/configure-x509-member-authentication`.

For details on using x.509 for client authentication, see
:doc:`/tutorial/configure-x509-client-authentication`.

.. note::

   Enabling internal authentication also enables
   :doc:`/core/authorization`.

.. _deploy-hashed-sharded-cluster:

Deploy Sharded Cluster with Hashed Sharding
-------------------------------------------

The following procedures involve creating a new sharded cluster that consists
of a :program:`mongos`, the config servers, and two shards.

.. _deploy-hashed-sharded-cluster-config-server:

Create the Config Server Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following steps deploys a config server replica set.

For a production deployment, deploys a config server replica set with at
least three members. For testing purposes, you can create a
single-member replica set.

.. include:: /includes/steps/deploy-sharded-cluster-config-server-noauth.rst

Once the config server replica set (CSRS) is initiated and up, proceed
to creating the shard replica sets.

Create the Shard Replica Sets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For a production deployment, use a replica set with at least three
members. For testing purposes, you can create a single-member replica
set.

.. include:: /includes/steps/deploy-sharded-cluster-shard-replica-noauth.rst

Connect a ``mongos`` to the Sharded Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/steps/deploy-sharded-cluster-connect-noauth.rst

Add Shards to the Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~

Use the :method:`sh.addShard()` method to add each shard to the cluster. If
the shard is a replica set, specify the name of the replica set and specify a
member of the set. In production deployments, *all* shards should be replica
sets.

The following operation adds a single shard replica set to the cluster:

.. code-block:: javascript

   sh.addShard( "<replSetName>/s1-mongo1.example.net:27017")

The following operation is an example of adding a standalone :program:`mongod`
shard to the cluster:

.. code-block:: javascript

   sh.addShard( "s1-mongo1.example.net:27017")

Repeat these steps until the cluster includes all shards.

.. _deploy-hashed-sharded-cluster-shard-database:

Enable Sharding for a Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To proceed, you must be connected to a :program:`mongos` associated to the
target sharded cluster.

Enabling sharding on a database makes it possible to shard collections
within a database. Use the :method:`sh.enableSharding()` method to
enable sharding on the target database.

.. code-block:: javascript

   sh.enableSharding("<database>")

.. _deploy-hashed-sharded-cluster-shard-collection:

Shard a Collection using Hashed Sharding
----------------------------------------

To proceed, you must be connected to a :program:`mongos` associated to the
target sharded cluster.

To shard a collection, use the :method:`sh.shardCollection()` method. You must
specify the full namespace of the collection and a document containing the
shard key. The database must have sharding
:ref:`enabled<deploy-ranged-sharded-cluster-shard-database>`.

Your selection of shard key affects the efficiency of sharding, as well as
your ability to take advantage of certain sharding features such as
:ref:`zones <zone-sharding>`. See the selection considerations listed
in the :ref:`hashed-sharding-shard-key`.

If the collection already contains data, you must create a
:ref:`index-type-hashed` on the :term:`shard key` using the
:method:`db.collection.createIndex()` method before using
:method:`~sh.shardCollection()`.

If the collection is empty, MongoDB creates the index as part of
:method:`sh.shardCollection()`.

The following operation shards the target collection using the
:doc:`hashed</core/hashed-sharding>` sharding strategy.

.. code-block:: javascript

   sh.shardCollection("<database>.<collection>", { <key> : "hashed" } )
