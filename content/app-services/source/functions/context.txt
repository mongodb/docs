.. meta::
   :robots: noindex, nosnippet

.. _function-context:

=======
Context
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

:ref:`Atlas Functions <functions>` have access to a global ``context``
object that contains metadata for the incoming requests and provides
access to components and services that you've configured in your App
Services App.

The ``context`` object exposes the following interfaces:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Property
     - Description

   * - :ref:`context.app <context-app>`
     - Access metadata about the app running the function.

   * - :ref:`context.environment <context-environment>`
     - Access :ref:`environment values <environment-values>` and the
       current environment tag.

   * - :ref:`context.functions <context-functions>`
     - A client object that calls your app's :ref:`functions <functions>`.

   * - :ref:`context.http <context-http>`
     - A built-in HTTP client.

   * - :ref:`context.request <context-request>`
     - Describes the incoming request that triggered a function call.

   * - :ref:`context.services <context-services>`
     - Exposes client objects that can access :ref:`data sources
       <data-sources>` and :ref:`services <services>`.

   * - :ref:`context.user <context-user>`
     - Describes the authenticated :ref:`user
       <users-and-authentication>` that initiated the request.

   * - :ref:`context.values <context-values>`
     - Contains static global :ref:`values <values-and-secrets>`.

.. _context-app:

Get App Metadata (``context.app``)
----------------------------------

The ``context.app`` object contains metadata about the App that
contains the Function.

.. code-block:: typescript
   
   {
     "id": string,
     "clientAppId": string,
     "name": string,
     "projectId": string,
     "deployment": {
       "model": string,
       "providerRegion": string,
     },
     "lastDeployed": string,
     "hostingUri": string,
   }

.. method:: context.app.id
   
   The unique internal ID of the App that contains the Function.

   .. example::
      
      .. code-block:: json
         
         "60c8e59866b0c33d14ee634a"

.. method:: context.app.clientAppId
   
   The unique Client App ID for the App that contains the Function.
   
   .. example::
      
      .. code-block:: json
         
         "myapp-abcde"

.. method:: context.app.name

   The name of the App that contains the Function.

   .. example::
      
      .. code-block:: json
         
         "myapp"

.. method:: context.app.projectId

   The ID of the Atlas Project that contains the App.

   .. example::
      
      .. code-block:: json
         
         "5e1ec444970199272441a214"

.. method:: context.app.deployment
   
   An object that describes the App's :ref:`deployment model and region
   <deployment-model>`.
   
   .. example::
      
      .. code-block:: json
         
         {
           "model": "LOCAL",
           "providerRegion": "aws-us-east-1"
         }

.. method:: context.app.lastDeployed
   
   The date and time that the Atlas App was last deployed, formatted as
   an ISODate string.
   
   .. example::
      
      .. code-block:: javascript
         
         "2022-10-31T12:00:00.000Z"

.. method:: context.app.hostingUri
   
   If :ref:`static hosting <static-hosting>` is enabled, this value is
   the base URL for hosted assets. (Static Hosting is deprecated. 
   :ref:`Learn more <migrate-hosting-graphql>`)
   
   .. example::
      
      .. code-block:: json
         
         "myapp-abcde.mongodbstitch.com"

.. _context-functions:

Call a Function (``context.functions``)
---------------------------------------

You can call any :ref:`function <functions>` in your application
through the ``context.functions`` interface.

.. method:: context.functions.execute()

   Calls a specific function and returns the result.

   .. code-block:: javascript
      
      context.functions.execute(functionName, ...args)
   
   .. list-table::
      :header-rows: 1
      :widths: 20 10 70

      * - Parameter
        - Type
        - Description

      * - ``functionName``
        - string
        - The name of the function.

      * - ``args``...
        - mixed
        - A variadic list of arguments to pass to the function. Each
          function parameter maps to a separate, comma-separated
          argument.

   .. example::
      
      .. code-block:: javascript
         
         // difference: subtracts b from a using the sum function
         exports = function(a, b) {
             return context.functions.execute("sum", a, -1 * b);
         };

.. _context-environment:

Check the App Environment (``context.environment``)
---------------------------------------------------

You can access information about your App's current :ref:`environment
<app-environment>` configuration and access environment-specific
values through the ``context.environment`` interface.

.. method:: context.environment.tag
   
   The name of the app's current environment as a string.
   
   Possible values:

   .. include:: /includes/list-of-environment-names.rst
   
   .. example::
      
      .. code-block:: javascript
         
         exports = async function() {
           switch(context.environment.tag) {
             case "": {
               return "There is no current environment"
             }
             case "development": {
               return "The current environment is development"
             }
             case "testing": {
               return "The current environment is testing"
             }
             case "qa": {
               return "The current environment is qa"
             }
             case "production": {
               return "The current environment is production"
             }
           }
         };

.. _context-environment-values:

context.environment.values
~~~~~~~~~~~~~~~~~~~~~~~~~~

An object where each field maps the name of an :ref:`environment value
<environment-values>` to its value in the current environment.

.. example::
   
   .. code-block:: javascript
      
      exports = async function() {
        const baseUrl = context.environment.values.baseUrl
      };

.. _context-services:

Connect to a MongoDB Data Source or Third-Party Service (``context.services``)
------------------------------------------------------------------------------

You can access a client for a linked MongoDB Atlas cluster or
{+adf-datasource+} through the ``context.services`` interface. You can
also access third-party services, although this feature is deprecated.

.. method:: context.services.get()

   Gets a service client for the specified service or ``undefined`` if
   no such service exists.
   
   .. code-block:: javascript
      
      context.services.get(serviceName)

   .. list-table::
      :header-rows: 1
      :widths: 20 10 70

      * - Parameter
        - Type
        - Description

      * - ``serviceName``
        - string
        - The name of the linked cluster, {+adf-instance+}, or service.
          
          .. tip:: MongoDB Service Names
             
             Linked :ref:`data sources <data-sources>` created by your
             app use one of the following default names:

             - Cluster: ``mongodb-atlas``
             - {+adf-instance+}: ``mongodb-datafederation``

   .. example::

      .. code-block:: javascript
         :caption: Read and write data in MongoDB Atlas
         
         exports = async function() {
           // Get the cluster's data source client
           const mdb = context.services.get("mongodb-atlas");
           // Reference a specific database/collection
           const db = mdb.db("myApp");
           const collection = db.collection("myCollection");
           // Run a MongoDB query
           return await collection.find({
             name: "Rupert",
             age: { $lt: 50 },
           })
         };
      
      .. code-block:: javascript
         :caption: [Deprecated] Call third-party service actions
         
         exports = async function() {
           // Instantiate a service client for the HTTP Service named "myHttpService"
           const http = context.services.get("myHttpService");
           // Call the HTTP service's get() action
           try {
             const response = await http.get({ url: "https://www.mongodb.com" });
             return response.body.text()
           } catch(err) {
             // You might get an error if:
             // - you passed invalid arguments
             // - the service's rules prevent the action
             console.error(err)
           }
         };

.. _context-request:

Get Request Metadata (``context.request``)
------------------------------------------

You can access information about the incoming request with the
:ref:`context.request <context-request>` interface.

.. tip::
   
   The ``context.request`` interface does not include request body
   payloads. In HTTPS endpoint functions, you can access the request
   body and other request details from the provided ``request``
   argument.

.. method:: context.request
   
   An object that contains information about the HTTP request that
   caused the function to execute.
   
   .. code-block:: javascript
   
      {
         "remoteIPAddress": <string>,
         "requestHeaders": <object>,
         "webhookUrl": <string>,
         "httpMethod": <string>,
         "rawQueryString": <string>,
         "httpReferrer": <string>,
         "httpUserAgent": <string>,
         "service": <string>,
         "action": <string>
      }
   
   .. list-table::
      :header-rows: 1
      :widths: 20 20 60
   
      * - Field
        - Type
        - Description
   
      * - ``remoteIPAddress``
        - string
        - The IP address of the client that issued the Function request.
   
      * - ``requestHeaders``
        - object
        - An object where each field maps to a type of :mdn:`HTTP Header
          <Web/HTTP/Headers>` that was included in the request that caused
          the function to execute. The value of each field is an array of
          strings where each string maps to a header of the specified type
          that was included in the request.
   
          .. example::
   
             .. code-block:: json
   
                {
                  "requestHeaders": {
                    "Content-Type": ["application/json"],
                    "Cookie": [
                      "someCookie=someValue",
                      "anotherCookie=anotherValue"
                    ]
                  }
                }
   
      * - ``webhookUrl``
        - string
        - Optional. In :ref:`HTTPS endpoint <https-endpoints>` functions,
          the route of the endpoint.
   
      * - ``httpMethod``
        - string
        - Optional. In :ref:`HTTPS endpoint <https-endpoints>` functions,
          the :mdn:`HTTP method <Web/HTTP/Methods>` of the request that
          called the endpoint.
   
      * - ``rawQueryString``
        - string
        - The :wikipedia:`query string <Query_string>` attached to the
          incoming HTTP request. All query parameters appear in the same
          order as they were specified.
   
          .. important:: App Services Removes The Secret Parameter
   
             For security reasons, Atlas App Services automatically removes any query
             string key/value pair where the key is ``secret``. For
             example, if an incoming request has the query string
             ``?secret=hello&someParam=42`` then the ``rawQueryString`` for
             that request is ``"someParam=42"``.
   
      * - ``httpReferrer``
        - string
        - Optional. The URL of the page from which the request was sent.
          
          This value is derived from the :mdn:`HTTP Referer header
          <Web/HTTP/Headers/Referer>`. If the request did not include a
          ``Referer`` header then this is ``undefined``.
   
      * - ``httpUserAgent``
        - string
        - Optional. Characteristic information that identifies the source
          of the request, such as the software vendor, operating system, or
          application type.
          
          This value is derived from the :mdn:`HTTP User-Agent header
          <Web/HTTP/Headers/User-Agent>`. If the request did not include a
          ``User-Agent`` header then this is ``undefined``.
   
   .. example::
   
      The following ``context.request`` document reflects a function call
      issued from ``https://myapp.example.com/`` by a user browsing with
      Chrome 73 on macOS High Sierra:
   
      .. io-code-block::
         
         .. input::
            :language: javascript
   
            exports = function() {
              return context.request
            }
         
         .. output::
            :language: json
            :visible: true
   
            {
              "remoteIPAddress": "54.173.82.137",
              "httpReferrer": "https://myapp.example.com/",
              "httpUserAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36",
              "rawQueryString": "?someParam=foo&anotherParam=42",
              "requestHeaders": {
                "Content-Type": ["application/json"],
                "Cookie": [
                  "someCookie=someValue",
                  "anotherCookie=anotherValue"
                ]
              }
            }

.. _context-user:

Get User Data (``context.user``)
--------------------------------

You can access information about the application or system user that
called a function with the ``context.user`` interface.

.. method:: context.user
   
   The :ref:`user object <user-objects>` of the authenticated user that
   called the function.
   
   .. code-block:: javascript
      
      {
          "id": <string>,
          "type": <string>,
          "data": <document>,
          "identities": <array>
      }
   
   .. include:: /includes/user-object-fields.rst
   
   .. example::
      
      The following ``context.user`` document reflects an
      :ref:`email/password <email-password-authentication>`
      user that is associated with a single :ref:`User API Key
      <api-key-authentication-user-api-key>`.
   
      .. io-code-block::
         
         .. input::
            :language: javascript
   
            exports = function() {
              return context.user
            }
         
         .. output::
            :language: json
            :visible: true
            
            {
              "id": "5cbf68583025b12840664682",
              "type": "normal",
              "data": {
                "email": "someone@example.com",
                "name": "myApiKeyName"
              },
              "identities": [
                {
                  "id": "5cbf68583025b12880667681",
                  "provider_type": "local-userpass"
                },
                {
                  "id": "5cbf6c6a922616045a388c71",
                  "provider_type": "api-key"
                }
              ]
            }

.. method:: context.runningAsSystem()
   
   Evaluates to a boolean that is ``true`` if the function is running as
   a :ref:`system user <system-user>` and ``false`` otherwise.
   
   .. code-block:: javascript
      
      exports = function() {
        const isSystemUser = context.runningAsSystem()
        if(isSystemUser) {
          // Do some work that bypasses rules
        } else {
          // Do some work in the context of the user that called the function.
        }
      }

.. _context-values:

Reference a Value (``context.values``)
--------------------------------------

You can access your app's static :ref:`values <values-and-secrets>` in a
function with the ``context.values`` interface.

.. method:: context.values.get(valueName)

   Gets the data associated with the provided value name or
   ``undefined`` if no such value exists. This data is either a plain
   text JSON value or a :ref:`secret <app-secret>` exposed through a
   value.

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60
      
      * - Parameter
        - Type
        - Description
      
      * - ``valueName``
        - string
        - The name of the :ref:`value <values-and-secrets>`.

   .. example::
      
      .. code-block:: javascript
      
         exports = function() {
           // Get a global value (or `undefined` if no value has the specified name)
           const theme = context.values.get("theme");
           console.log(theme.colors)     // Output: { red: "#ee1111", blue: "#1111ee" }
           console.log(theme.colors.red) // Output: "#ee1111"
         };

.. _context-http:

Send an HTTP Request (``context.http``)
---------------------------------------

You can send HTTPS requests through a built-in client with the
``context.http`` interface.

.. method:: context.http.get()
   
   Sends an :mdn:`HTTP GET <Web/HTTP/Methods/GET>` request to the
   specified URL. See :method:`http.get()` for detailed reference
   information, including parameter definitions and return types.

   .. code-block:: javascript

      exports = async function() {
        const response = await context.http.get({ url: "https://www.example.com/users" })
        // The response body is a BSON.Binary object. Parse it and return.
        return EJSON.parse(response.body.text());
      };

.. method:: context.http.post()
   
   Sends an :mdn:`HTTP POST <Web/HTTP/Methods/POST>` request to the
   specified URL. See :method:`http.post()` for detailed reference
   information, including parameter definitions and return types.

   .. code-block:: javascript
 
      exports = async function() {
        const response = await context.http.post({
          url: "https://www.example.com/messages",
          body: { msg: "This is in the body of a POST request!" },
          encodeBodyAsJSON: true
        })
        // The response body is a BSON.Binary object. Parse it and return.
        return EJSON.parse(response.body.text());
      };

.. method:: context.http.put()
   
   Sends an :mdn:`HTTP PUT <Web/HTTP/Methods/PUT>` request to the
   specified URL. See :method:`http.put()` for detailed reference
   information, including parameter definitions and return types.

   .. code-block:: javascript
 
      exports = async function() {
        const response = await context.http.put({
          url: "https://www.example.com/messages",
          body: { msg: "This is in the body of a PUT request!" },
          encodeBodyAsJSON: true
        })
        // The response body is a BSON.Binary object. Parse it and return.
        return EJSON.parse(response.body.text());
      };

.. method:: context.http.patch()

   Sends an :mdn:`HTTP PATCH <Web/HTTP/Methods/PATCH>` request to the
   specified URL. See :method:`http.patch()` for detailed reference
   information, including parameter definitions and return types.

   .. code-block:: javascript
 
      exports = async function() {
        const response = await context.http.patch({
          url: "https://www.example.com/diff.txt",
          body: { msg: "This is in the body of a PATCH request!" },
          encodeBodyAsJSON: true
        })
        // The response body is a BSON.Binary object. Parse it and return.
        return EJSON.parse(response.body.text());
      };

.. method:: context.http.delete()

   Sends an :mdn:`HTTP DELETE <Web/HTTP/Methods/DELETE>` request to the
   specified URL. See :method:`http.delete()` for detailed reference
   information, including parameter definitions and return types.

   .. code-block:: javascript
 
      exports = async function() {
        const response = await context.http.delete({ url: "https://www.example.com/user/8675309" })
      };

.. method:: context.http.head()

   Sends an :mdn:`HTTP HEAD <Web/HTTP/Methods/HEAD>` request to the
   specified URL. See :method:`http.head()` for detailed reference
   information, including parameter definitions and return types.

   .. code-block:: javascript
 
      exports = async function() {
        const response = await context.http.head({ url: "https://www.example.com/users" })
        // The response body is a BSON.Binary object. Parse it and return.
        EJSON.parse(response.body.text());
      };
