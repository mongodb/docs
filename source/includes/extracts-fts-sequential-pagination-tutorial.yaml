ref: fts-sequential-pagination-point-of-ref-query-desc
content: | 
  The sample query uses the following pipeline stages to retrieve
  results for the first page and retrieve tokens or a point of reference
  for subsequent queries:
  
  .. list-table:: 
     :widths: 20 80
     :stub-columns: 1
  
     * - :pipeline:`$search`
  
       - - Searches for titles that contain ``summer`` in the ``title``
           field by using the :ref:`text-ref` operator.
         - Sorts the results by the ``released`` field value in
           ascending order by using the :ref:`sort <sort-ref>` option.

     * - :pipeline:`$limit`
       - Limits the results to ``10`` documents.

     * - :pipeline:`$project`
       - Includes only the ``title``, ``released``, and ``genres``
         fields from the documents in the results. The query also adds
         the following fields to each document in the results:  

         - ``paginationToken``, which is the token that can be used as a 
           point of reference in subsequent queries 
         - ``score``, which is the relevance score of the document in
           the results  

---
ref: fts-sequential-pagination-search-after-query-desc
content: | 
  The sample query uses the following pipeline stages to retrieve
  results for the second page using the token generated by
  ``searchSequenceToken`` from the :ref:`prior query
  <sequential-pagination-tutorial-por-query>` for the same term:   
  
  .. list-table:: 
     :widths: 20 80
     :stub-columns: 1
  
     * - :pipeline:`$search`
  
       - - Searches for titles that contain ``summer`` in the ``title``
           field by using the :ref:`text-ref` operator.
         - Sorts the results by the ``released`` field value in
           ascending order by using the :ref:`sort <sort-ref>` option. 
         - Returns documents after the tenth document in the results,
           which the query specifies by using the pagination token
           generated by the query you ran to
           :ref:`sequential-pagination-tutorial-por-query`. 

     * - :pipeline:`$limit`
       - Limits the results to ``10`` documents.  

     * - :pipeline:`$project`
       - Includes only the ``title``, ``released``, and ``genres``
         fields from the documents in the results. It also adds the
         following fields to each document in the results:

         - ``paginationToken``, which is the token that can be used as
           point of reference in subsequent queries 
         - ``score``, which is the relevance score of the document in
           the results   

---
ref: fts-sequential-pagination-search-before-query-desc
content: | 
  The sample query uses the following pipeline stages to return to
  results on the first page using the token generated by
  ``searchSequenceToken`` from the :ref:`prior query
  <sequential-pagination-tutorial-after-query>` for the same term:  
  
  .. list-table:: 
     :widths: 20 80
     :stub-columns: 1

     * - :pipeline:`$search`
  
       - - Searches for titles that contain ``summer`` in the ``title``
           field by using the :ref:`text-ref` operator.
         - Sorts the results by the ``released`` field value in
           ascending order by using the :ref:`sort <sort-ref>` option. 
         - Returns documents 1 to 10 in the |fts| results by using the
           pagination token associated with the eleventh document in
           the results of the query you ran to
           :ref:`sequential-pagination-tutorial-after-query`.  

     * - :pipeline:`$limit`
       - Limits the results to ``10`` documents. 

     * - :pipeline:`$project`
       - Includes only the ``title``, ``released``, and ``genres``
         fields from the documents in the results. It also adds the
         following fields to each document in the results:  

         - ``paginationToken``, which is the token that can be used as a 
           point of reference in subsequent queries 
         - ``score``, which is the relevance score of the document in the
           results 

  .. note:: 
  
     By default, |fts| returns the results in reverse order for queries 
     that specify tokens to retrieve results before a point of
     reference. To return documents in-order, the query uses the
     :manual:`toArray() </reference/method/cursor.toArray/>` and the
     JavaScript ``reverse()`` methods.

---
ref: fts-sequential-pagination-skip-results-query-desc
content: | 
  The sample query uses the following pipeline stages to jump to
  results on page 5 by using the token generated by ``searchSequenceToken``
  from the :ref:`prior query
  <sequential-pagination-tutorial-after-query>` for the same term and by
  using the :pipeline:`$skip` and :pipeline:`$limit` stages:  
  
  .. list-table:: 
     :widths: 20 80
     :stub-columns: 1

     * - :pipeline:`$search`
  
       - - Searches for titles that contain ``summer`` in the ``title``
           field by using the :ref:`text-ref` operator.
         - Sorts the results by the ``released`` field value in ascending
           order by using the :ref:`sort <sort-ref>` option.
         - Returns documents after the twentieth document specified by
           using the pagination token generated by the query you ran to 
           :ref:`sequential-pagination-tutorial-after-query`. 

     * - :pipeline:`$skip`
       - Skips 20 documents in the results after the specified point of
         reference, which is the token associated with the twentieth
         document in the results for the query you ran to
         :ref:`sequential-pagination-tutorial-after-query`.

     * - :pipeline:`$limit`
       - Limits the results to ``10`` documents. 

     * - :pipeline:`$project`
       - Includes only the ``title``, ``released``, and ``genres``
         fields from the documents in the results. It also adds the
         following fields to each document in the results:  

         - ``paginationToken``, which is the token that can be used as a 
           point of reference in subsequent queries 
         - ``score``, which is the relevance score of the document in
           the results 

---
ref: fts-sequential-pagination-facet-query-desc
content: | 
  The sample query uses the following pipeline stages: 

  .. list-table:: 
     :widths: 20 80
     :stub-columns: 1
  
     * - :pipeline:`$search`
  
       - - Searches for titles that contain ``summer`` in the ``title``
           field by using the :ref:`fts-facet-ref` collector.
         - Retrieves a count of the number of total movies in the
           results in each genre by using ``facets`` option.

     * - :pipeline:`$addFields`
     
       - Adds the ``paginationToken`` field to store the tokens for each
         document in the results generated by using the
         :ref:`searchSequenceToken
         <paginate-results-search-sequence-token>` option.  

     * - :pipeline:`$limit`
       - Limits the results to ``10`` documents.  

     * - :pipeline:`$facet`
       - Returns the following fields: 

         - ``docs`` field, which contains only the ``title``,
           ``released``, and ``genres`` fields from the documents in the
           results and the ``paginationToken`` field.

         - ``meta`` field, which contains a count of the total number of
           movies in the results in each genre that is stored in the
           ``$$SEARCH_META`` variable.  

...
