ref: _fact-count-sharded-clusters
content: |
  On a sharded cluster, {{countOp}} can result in an *inaccurate* count if
  :term:`orphaned documents <orphaned document>` exist or if a
  :doc:`chunk migration </core/sharding-balancer-administration>` is in progress.

  To avoid these situations, on a sharded cluster, use the
  :method:`db.collection.aggregate()` method:

  - You can use the :pipeline:`$count` stage to count the documents.
    For example, the following operation counts the documents in a
    collection:

    .. code-block:: javascript

       db.collection.aggregate([
          { $count: "myCount" }
       ])

    The :pipeline:`$count` stage is equivalent to the following
    :pipeline:`$group` + :pipeline:`$project` sequence:

    .. code-block:: javascript

       db.collection.aggregate( [
          { $group: { _id: null, myCount: { $sum: 1 } } },
          { $project: { _id: 0 } }
       ] )

  - To get a count of documents that match a query condition, include
    the :pipeline:`$match` stage as well:

    .. code-block:: javascript

       db.collection.aggregate( [
          { $match: <query condition> },
          { $count: "myCount" }
       ] )

    Or, if using the ``$group + $project`` equivalent:

    .. code-block:: javascript

       db.collection.aggregate( [
          { $match: <query condition> },
          { $group: { _id: null, myCount: { $sum: 1 } } },
          { $project: { _id: 0 } }
       ] )

  .. seealso:: :pipeline:`$collStats` to return an approximate count based on the collection's metadata.
 
...