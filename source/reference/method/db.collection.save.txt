====================
db.collection.save()
====================

.. default-domain:: mongodb

.. method:: db.collection.save(document)

   Updates an existing document or inserts a new document, depending
   on the specified document.

   The :method:`~db.collection.save()` method takes the following
   parameter:

   .. include:: /reference/method/db.collection.save-param.rst

   **If** the document does not contain an :term:`_id` field,
   then the :method:`~db.collection.save()` method performs
   an insert with the specified fields in the document as well
   as an ``_id`` field with a unique :term:`ObjectId` value.

   **If** the document contains an ``_id`` field, then the
   :method:`~db.collection.save()` method performs an
   ``upsert`` querying the collection on the ``_id`` field:

   - If a document does not exist with the specified ``_id`` value,
     the :method:`~db.collection.save()` method performs an
     insert with the specified fields in the document.

   - If a document exists with the specified ``_id`` value, the
     :method:`~db.collection.save()` method performs an
     update, replacing all field in the existing record with the
     fields from the document.

Examples
--------

The following are examples of the :method:`~db.collection.save()` method.

.. TODO we should break these examples up using headings.

.. example:: Pass to the :method:`~db.collection.save()` method
   a document without an ``_id`` field, so that to insert the document
   into the collection and have MongoDB generate the unique ``_id`` as
   in the following:

   .. code-block:: javascript

      db.products.save( { item: "book", qty: 40 } )

   This operation inserts a new document into the ``products``
   collection with the ``item`` field set to ``book``, the ``qty``
   field set to ``40``, and the ``_id`` field set to a unique
   ``ObjectId``:

   .. code-block:: javascript

      { "_id" : ObjectId("50691737d386d8fadbd6b01d"), "item" : "book", "qty" : 40 }

   .. include:: /includes/note-insert-id-field.rst

.. example:: Pass to the :method:`~db.collection.save()` method a
   document with an ``_id`` field that holds a value that does not
   exist in the collection to insert the document with that value in
   the ``_id`` value into the collection, as in the following:

   .. code-block:: javascript

      db.products.save( { _id: 100, item: "water", qty: 30 } )

   This operation inserts a new document into the ``products``
   collection with the ``_id`` field set to ``100``, the ``item``
   field set to ``water``, and the field ``qty`` set to ``30``:

   .. code-block:: javascript

      { "_id" : 100, "item" : "water", "qty" : 30 }

   .. include:: /includes/note-insert-id-field.rst

.. example:: Pass to the :method:`~db.collection.save()` method a
   document with the ``_id`` field set to a value in the
   ``collection`` to replace all fields and values of the matching
   document with the new fields and values, as in the following:

   .. code-block:: javascript

      db.products.save( { _id:100, item:"juice" } )

   This operation replaces the existing document with a value of
   ``100`` in the ``_id`` field. The updated document will resemble
   the following:

   .. code-block:: javascript

      { "_id" : 100, "item" : "juice" }
