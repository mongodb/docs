.. _pymongo-write-replace:

=================
Replace Documents
=================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: modify, change, code example

Overview
--------

In this guide, you can learn how to use {+driver-short+} to perform a replace
operation on a document in a MongoDB collection. A replace operation performs
differently than an update operation. An update operation
modifies only the specified fields in a target document. A replace operation removes *all* fields
in the target document and replaces them with new ones.

To learn more about update operations, see the :ref:`Update Documents guide.
<pymongo-write-update>`

.. .. tip:: Interactive Lab
   
..    This page includes a short interactive lab that demonstrates how to
..    replace data by using the ``replace_one()`` method. You can complete this
..    lab directly in your browser window without installing MongoDB or a code editor.

..    To start the lab, click the :guilabel:`Open Interactive Tutorial` button at the
..    top of the page. To expand the lab to a full-screen format, click the
..    full-screen button (:guilabel:`â›¶`) in the top-right corner of the lab pane.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``sample_restaurants.restaurants`` collection
from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
free MongoDB Atlas cluster and load the sample datasets, see the
:ref:`<pymongo-get-started>` tutorial.

Replace Operation
-----------------

You can perform a replace operation in MongoDB by using the ``replace_one()`` method. 
This method removes all fields except the ``_id`` field from the first document that
matches the search criteria. It then inserts the fields and values you specify into the 
document.

Required Parameters
~~~~~~~~~~~~~~~~~~~

The ``replace_one()`` method requires the following parameters:

- A **query filter** document, which determines which documents to replace. For
  more information about query filters, see the 
  :manual:`Query Filter Documents section </core/document/#query-filter-documents>` in
  the {+mdb-server+} manual. 
- A **replace** document, which specifies the fields and values to insert in the new 
  document.

Replace One
-----------

The following example uses the ``replace_one()`` method to replace the fields and values of a
document with a ``name`` field value of ``"Pizza Town"``:

.. literalinclude:: /includes/write/replace.py
   :start-after: start-replace-one
   :end-before: end-replace-one
   :language: python
   :copyable:

.. important::

   The values of ``_id`` fields are immutable. If your replacement document specifies 
   a value for the ``_id`` field, it must match the ``_id`` value of the existing document.

Customize the Replace Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``replace_one()`` method optionally accepts additional
parameters, which represent options you can use to configure the replace
operation. If you don't specify any additional options, the driver does not customize
the replace operation.

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``upsert``
     - | Specifies whether the replace operation performs an upsert operation if no 
         documents match the query filter. For more information, see the :manual:`upsert
         statement </reference/command/update/#std-label-update-command-upsert>`
         in the {+mdb-server+} manual.
       | Defaults to ``False``

   * - ``bypass_document_validation``
     - | Specifies whether the replace operation bypasses document validation. This lets you 
         replace documents that don't meet the schema validation requirements, if any 
         exist. For more information about schema validation, see :manual:`Schema
         Validation </core/schema-validation/#schema-validation>` in the MongoDB
         Server manual.
       | Defaults to ``False``.

   * - ``collation``
     - | Specifies the kind of language collation to use when sorting
         results. For more information, see :manual:`Collation </reference/collation/#std-label-collation>`
         in the {+mdb-server+} manual.

   * - ``hint``
     - | Gets or sets the index to scan for documents. 
         For more information, see the :manual:`hint statement </reference/command/update/#std-label-update-command-hint>`
         in the {+mdb-server+} manual.

   * - ``session``
     - | An instance of ``ClientSession``.

   * - ``let``
     - | A Map of parameter names and values. Values must be constant or closed
         expressions that don't reference document fields. For more information,
         see the :manual:`let statement
         </reference/command/update/#std-label-update-let-syntax>` in the
         {+mdb-server+} manual.

   * - ``comment``
     - | A comment to attach to the operation. For more information, see the :manual:`insert command
         fields </reference/command/insert/#command-fields>` guide in the
         {+mdb-server+} manual.

The following code uses the ``replace_one()`` method to find the first document where the 
``name`` field has the value ``"Food Town"``, then replaces this document 
with a new document named ``"Food World"``. Because the ``upsert`` option is
set to ``True``, the driver inserts a new document if the query filter doesn't 
match any existing documents.

.. literalinclude:: /includes/write/replace.py
   :start-after: start-replace-options
   :end-before: end-replace-options
   :language: python
   :copyable:

Return Value
~~~~~~~~~~~~

The ``replace_one()`` method returns an ``UpdateResult`` 
object. The ``UpdateResult`` type contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``matched_count``
     - | The number of documents that matched the query filter, regardless of
         how many were updated.

   * - ``modified_count``
     - | The number of documents modified by the update operation. If an updated
         document is identical to the original, it is not included in this
         count.
         
   * - ``raw_result``
     - | The raw result document returned by the server.

   * - ``upserted_id``
     - | The ID of the document that was upserted in the database, if the driver
         performed an upsert. Otherwise ``None``.

Additional Information 
----------------------

To learn more about creating query filters, see the :ref:`pymongo-specify-query` guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `replace_one() <{+api-root+}pymongo/collection.html#pymongo.collection.Collection.replace_one>`__
- `UpdateResult <{+api-root+}pymongo/results.html#pymongo.results.UpdateResult>`__
