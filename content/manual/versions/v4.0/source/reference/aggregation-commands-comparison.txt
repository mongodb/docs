===============================
Aggregation Commands Comparison
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The following table provides a brief overview of the features of the
MongoDB aggregation commands.

.. list-table::
   :header-rows: 1
   :widths: 30 40 40 

   * -  

     - :dbcommand:`aggregate` / :method:`db.collection.aggregate()`

     - :dbcommand:`mapReduce` / :method:`db.collection.mapReduce()`

   * - **Description**

     - 
       Designed with specific goals of improving performance and
       usability for aggregation tasks.
       
       Uses a "pipeline" approach where objects are transformed as they
       pass through a series of pipeline operators such as
       :pipeline:`$group`,  :pipeline:`$match`, and :pipeline:`$sort`.
       
       See :doc:`/reference/operator/aggregation` for more information
       on the pipeline operators.
       

     - Implements the Map-Reduce aggregation for processing large data sets.
       

   * - **Key Features**

     - Pipeline operators can be repeated as needed.
       
       Pipeline operators need not produce one output document for every
       input document.
       
       Can also generate new documents or filter out documents.
       

     - In addition to grouping operations, can perform complex
       aggregation tasks as well as perform incremental aggregation on
       continuously growing datasets.
       
       See :doc:`/tutorial/map-reduce-examples/` and
       :doc:`/tutorial/perform-incremental-map-reduce/`.
       

   * - **Flexibility**

     - Limited to the operators and expressions supported by the
       aggregation pipeline.
       
       However, can add computed fields, create new virtual sub-objects,
       and extract sub-fields into the top-level of results by using the
       :pipeline:`$project` pipeline operator.
       
       See :pipeline:`$project` for more information as well as
       :doc:`/reference/operator/aggregation` for more information on all
       the available pipeline operators.
       

     - Custom ``map``, ``reduce`` and ``finalize`` JavaScript
       functions offer flexibility to aggregation logic.
       
       See :dbcommand:`mapReduce` for details and restrictions
       on the functions.
       

   * - **Output Results**

     - Returns results as a cursor. If the pipeline includes the
       :pipeline:`$out` stage, the cursor is empty.
       
       .. versionchanged:: 3.6
       
          .. include:: /includes/deprecation-aggregate-wo-cursor.rst
       

     - Returns results in various options (inline, new collection, merge,
       replace, reduce). See :dbcommand:`mapReduce` for details on the
       output options.
       

   * - **Sharding**

     - Supports non-sharded and sharded input collections.

     - Supports non-sharded and sharded input collections.


   * - **More Information**

     - 
       - :doc:`/core/aggregation-pipeline` 
       - :method:`db.collection.aggregate()`
       - :dbcommand:`aggregate`

     - 
       - :doc:`/core/map-reduce`
       - :method:`db.collection.mapReduce()` 
       - :dbcommand:`mapReduce`.


