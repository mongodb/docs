.. meta::
   :robots: noindex, nosnippet

.. _dotnet-add-sync-to-app:
.. _dotnet-sync-changes-between-devices:

====================================
Add Device Sync to an App - .NET SDK
====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol


.. procedure::

   .. step:: Connect to the App Services backend

      Pass the App ID for your App, which you can :ref:`find in the App Services UI
      <find-your-app-id>`.

      .. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.initialize-realm.cs
        :language: csharp

   .. step:: Authenticate a user

      :ref:`Authenticate a user <dotnet-authenticate>` in your client 
      project. Here, we'll use :ref:`anonymous authentication 
      <dotnet-login-anonymous>`. 

      .. literalinclude:: /examples/generated/dotnet/AuthenticationExamples.snippet.logon_anon.cs
        :language: csharp

   .. step:: Open a Synced Realm

      To open the realm as a synced realm, 
      you can specify whether a synced realm should download data before 
      it opens. Here, we use a :ref:`Flexible Sync configuration 
      <dotnet-flexible-sync-open-realm>` and specify that the SDK
      should always download the most recent updates before opening the realm.
      We also :ref:`bootstrap the realm with an initial subscription 
      <dotnet-sync-add-subscription>`.

      .. literalinclude:: /examples/generated/dotnet/FlexibleSyncExamples.snippet.bootstrap-a-subscription.cs
        :language: csharp

Use the Realm
-------------

The syntax to :ref:`read <dotnet-realm-database-reads>`, :ref:`write
<dotnet-write-operations>`, and
:ref:`watch for changes <dotnet-react-to-changes>` on a
synced realm is identical to the syntax for non-synced realms. While 
you work with local data, a background thread efficiently integrates, 
uploads, and downloads changesets.

The following code demonstrates two ways to create a new ``Task`` object and 
add it to the realm:

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.create.cs
   :language: csharp

.. important:: When Using Sync, Avoid Synchronous Writes on the Main Thread

   Because Realm performs sync integrations on a background thread, 
   if you do a synchronous write to your realm on the main thread, there's 
   a small chance your UI could appear to hang as it waits for the background 
   sync thread to finish a write transaction. Therefore, it's a best practice 
   :ref:`not to do a synchronous write on the main thread 
   when using Device Sync <dotnet-threading-three-rules>` and instead use 
   asynchronous writes with ``realm.WriteAsync``.
