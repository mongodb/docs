==============================
Bin, Sort, and Limit Your Data
==============================

.. default-domain:: mongodb

You can bin, sort, and limit data in your charts to highlight key
aspects in your data.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _charts-bin-data:

Bin Data
--------

|charts| supports *binning* both numeric and date fields in your
data. Binning breaks continuous data into discrete groups called
*bins*, with each bin containing a contiguous subset of the original
values. For example, you might group users into bins by the decade they were
born, or group timestamped calendar events by the month of their start
date.

.. _continuous-discrete-data:

.. cssclass:: admonition-example
.. admonition:: Continuous vs Discrete Data

   Continuous data can occupy any value over a continuous range.
   Some examples of continuous data include height, temperature, or
   the time a person was born.

   Alternatively, discrete data is data which can only take certain
   values, categorized into a classification. Examples of discrete
   data include eye color and the number of students in a class.

.. _bin-date-fields:

Bin Date Fields
~~~~~~~~~~~~~~~

When handling dates, this data often comes in a continuous
form. It can be useful to split this data into a specific windows of
time to uncover additional trends and patterns. |charts| supports the
following bins for dates:

.. hlist::
   :columns: 2

   * Year
   * Month
   * Week of Year
   * Date of the Month
   * Day of the Week
   * Hour
   * Minute
   * Second

To use binning for dates:

1. Drag a date field (signified by a calendar icon in the
   :guilabel:`Fields` section of the Chart Builder) to a
   :guilabel:`category` :ref:`encoding channel <encoding-channels>`.

   By default, binning is enabled as indicated by the
   :guilabel:`Binning On` toggle.

#. Use the dropdown to select the bin size for your dates.

.. _periodic-setting:

3. Toggle the :guilabel:`Periodic` setting as desired.

   - If enabled, |charts| creates bins relative to the next highest
     time period and repeats each bin to cover the timeframe spanned
     in the data field.

   - If disabled, the bins |charts-short| creates do not repeat.

   .. example::

      Consider a date field containing data spanning 5 years, and
      a bin selection of :guilabel:`Month`. If :guilabel:`Periodic` is
      disabled, |charts-short| adds the 60 months in the dataset to the
      visualization.

      Alternatively, if :guilabel:`Periodic` is enabled, |charts-short|
      only plots the 12 calendar months, and visualizes the total
      aggregated results from each calendar month.

   .. note::

      The :guilabel:`Periodic` setting is always enabled when selecting
      a bin size of :guilabel:`Day of the Week`.

      The :guilabel:`Periodic` setting is always disabled when
      selecting a bin size of :guilabel:`Year`, because year is the
      largest time period available in |charts-short|.

To disable binning, toggle the :guilabel:`Binning` setting
to off. In this case, each date from the field is added to the
visualization with no grouping performed.

.. example::

   The following chart visualizes historical sales data for an office
   supply store. Every sale is represented by a document in the
   ``supplySales`` collection. Each document in the collection includes
   the date of the sale as ``salesDate`` and a list of items included
   in the sale as the ``items`` array.

   The ``saleDate`` field contains :ref:`continuous
   <continuous-discrete-data>` timestamp data. The field
   is binned by :guilabel:`Date of the Month` with the
   :guilabel:`Periodic` setting enabled. This means that over the
   course of the several years the data spans, |charts| plots the
   :guilabel:`mean` value of sales from each individual date of the
   month:

   .. figure:: /images/charts/charts-binning-by-day.png
      :figwidth: 680px
      :alt: Charts binning by day example

Compare Periods
~~~~~~~~~~~~~~~

When you use binned date data, you have the option to compare data across
periods of time. You can display cumulative totals or changes in value. 

To use the compare periods feature, a chart must have:

- A :ref:`category channel <charts-channel-type-table>` with a :ref:`binned,
  non-periodic date field <bin-date-fields>` encoded.
- An :ref:`aggregation <building-charts-aggregation>` channel.

If the conditions are met, the aggregation card has a toggle switch labeled
:guilabel:`Compare Periods`. When toggled on, a dropdown menu appears with
options for :guilabel:`Cumulative Total` and :guilabel:`Change in Value`.

On a :guilabel:`Cumulative Total` chart, each successive data point is
calculated by adding its own value added to the preceding chronological data
point. You can also specify a baseline value to serve as the initial value
of the cumulative total. The default baseline value is ``0``.

On a :guilabel:`Change in Value` chart, each successive data point shows the
difference between it and the preceding chronological data point. The first
data point in the chart will always be blank, because there is no previous
period to compare against.

The following types of charts can use the compare periods feature:

- :ref:`Bar and Column <column-bar-chart-ref>`
- :ref:`Discrete Line and Area <discrete-charts>`

.. note::

   The cumulative data option is not available with :ref:`multi-series
   charts <multi-series-charts>`.

.. example::

   The following column chart visualizes yearly sales for an office supply
   store as a cumulative total across five years. Each document in the
   collection includes the date of the sale as ``salesDate`` and a ``quantity``
   field with a count of items included in the sale.

   The ``saleDate`` field is binned by year. The ``items`` field is an array
   in which each item has a ``quantity`` field, which is added to the cumulative
   total with a ``SUM`` aggregation operation.

   .. figure:: /images/charts/cumulative-total.png
      :figwidth: 680px
      :alt: Charts cumulative total example

Bin Numeric Fields
~~~~~~~~~~~~~~~~~~

|charts| can also bin numeric fields from a continuous set into groups
of a specified size. This

To use binning for numeric fields:

1. Drag a numeric field (signified by the number sign icon in the
   :guilabel:`Fields` section of the Chart Builder) to a
   :guilabel:`category` :ref:`encoding channel <encoding-channels>`.

   By default, binning is enabled as indicated by the toggle stating
   :guilabel:`Binning On`.

#. Enter the desired bin size in the :guilabel:`Bin Size` input.

To disable binning, toggle the :guilabel:`Binning` setting
to off. In this case, each individual value from the field is added
to the visualization, rather than being grouped into bins.

.. example::

   The following chart visualizes historical sales data for an office
   supply store. Every sale is represented by a document in the
   ``supplySales`` collection. Each sale document contains a
   ``customer`` object, which contains information on the customer
   purchasing the item(s).

   The following chart applies binning to the ``customer.age`` field.
   The ``age`` field contains continuous numeric data and is
   binned by decade. Each ``age`` value is placed into the
   appropriate bin and |charts-short| counts the number of ages in each
   bin to provide a high-level overview of the age distrubution of
   store customers.

   .. figure:: /images/charts/charts-numeric-binning.png
      :figwidth: 680px
      :alt: Charts numeric binning example

Empty Bins
~~~~~~~~~~

When binning is enabled, |charts-short| displays entries for
empty bins within the minimum and maximum data range a chart displays.

.. admonition: Exception
   :class: note

   |charts-short| doesn't display empty bins if including them results
   in more than 5000 unique bins on a chart.

The value |charts-short| uses for empty bins depends on the
aggregation function you choose:

.. list-table::
   :header-rows: 1
   :widths: 2 1

   * - Aggregation Function
     - Inferred Value

   * - ``count`` or ``distinct``
     - ``0``

   * - All Other Functions
     - ``null``

|charts-short| displays bins with ``null`` values differently based on
chart type:

.. list-table::
   :header-rows: 1
   :widths: 1 2

   * - Chart Type
     - How |charts-short| Displays ``null`` Bins

   * - :ref:`column-bar-chart-ref`
     - Bars with a height of ``0``. |charts-short| doesn't display data
       labels for ``null`` bins, even if enabled.

   * - :ref:`line-area-chart-ref`
     - Linear interpolation, with no data marker on the ``null`` bins.
       |charts-short| doesn't display data labels for ``null`` bins,
       even if enabled.

.. _charts-sort-data:

Sort Data
---------

Use the :guilabel:`Sort By` dropdown in the Chart Builder to sort
chart data by either:

- Category
- Value
- Series field (for :ref:`multi-series charts <multi-series-charts>`)

If you sort a multi-series chart generically by :guilabel:`Value`
without sorting by a specific series, |charts| sorts your data based on
the sum of all values in your series.

To toggle between ascending or descending sort order, click the ``a-z``
button to the right of the :guilabel:`Sort By` dropdown.

By default, |charts-short| sorts data based on :guilabel:`Value`
in descending order.

Sort Multi-Series Charts by Series Value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you create a :ref:`multi-series chart <multi-series-charts>` using a
different field per series, you can sort the chart by a specific series
field.

.. example::

   The following charts use the :ref:`Sample Data: Movies <sample-data>`
   data source to compare the mean number of ``fresh`` and ``rotten``
   Rotten Tomato ratings for movies in each genre.

   This chart is sorted by the mean ``fresh`` value in descending
   order:

   .. figure:: /images/charts/sort-by-series-fresh-desc.png
      :figwidth: 550px
      :alt: Chart sorted by fresh rating in descending order

   This chart is sorted by the mean ``rotten`` value in ascending
   order:

   .. figure:: /images/charts/sort-by-series-rotten-asc.png
      :figwidth: 550px
      :alt: Chart sorted by rotten rating in ascending order
   
.. _charts-limit-data:

Limit Data
----------

You can apply a limit to the :guilabel:`Category` encoding channel
to only include a specified number of categories in your visualization.
The categories included are the *first* matching categories based on
the :ref:`sort order <charts-sort-data>` specified. Limiting data can
be useful when visualizing data with so many categories it becomes
difficult to create a meaningful chart.

.. example::

   The following chart shows the average
   `IMDb <https://www.imdb.com/>`_ rating of movies from a
   particular country:

   .. figure:: /images/charts/charts-movie-ratings-by-country.png
      :figwidth: 720px
      :alt: Movie ratings by country

   The dataset contains movies from many different countries, but it
   would be most interesting to see which countries produce the
   highest-rated movies. We can accomplish this by applying a limit to
   only show countries with the 10 highest average ratings for movies.

   Switch the :guilabel:`Limit Results` toggle to ``On`` and leave the
   :guilabel:`Show` input at the default value of 10. The chart is now
   much easier to understand, and we have a clear view of the countries
   with the highest-rated movies:

   .. figure:: /images/charts/charts-movie-ratings-by-country-limited.png
      :figwidth: 720px
      :alt: Movie ratings by country limited
