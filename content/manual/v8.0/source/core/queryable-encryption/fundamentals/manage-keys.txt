.. _qe-fundamentals-manage-keys:

=================================
Rotate and Rewrap Encryption Keys
=================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

In this guide, you can learn how to manage your encryption keys with a
{+kms-long+} ({+kms-abbr+}) in your application.

Overview
--------

This procedure shows you how to rotate encryption keys for {+qe+} using
:binary:`~bin.mongosh`. Rotating DEKs consists of rewrapping them with a
new {+cmk-long+}, so the terms "rotate" and "rewrap" are sometimes used interchangeably.

After completing this guide, you should be able to rotate your
{+cmk-long+} ({+cmk-abbr+}) on your {+kms-long+}, and then rewrap 
existing DEKs in your {+key-vault-long+} with your new
{+cmk-abbr+}.

.. warning::

   As you rotate keys, confirm that they aren't used to encrypt any keys
   or data before deleting them. If you delete a {+dek-abbr+}, all
   fields encrypted with that {+dek-abbr+} become permanently
   unreadable. If you delete a {+cmk-abbr+}, all fields encrypted with a
   {+dek-abbr+} using that {+cmk-abbr+} become permanently unreadable.


Related Information
~~~~~~~~~~~~~~~~~~~

For a detailed explanation of the concepts included in this procedure,
refer to the topics below.

To learn more about keys and key vaults, see
:ref:`qe-reference-keys-key-vaults`.
To view a list of supported {+kms-abbr+} providers, see the
:ref:`qe-fundamentals-kms-providers` page.

For tutorials detailing how to set up a {+qe+} enabled
application with each of the supported {+kms-abbr+} providers, see
:ref:`Overview: Enable Queryable Encryption <qe-overview-enable-qe>`.

Procedure
---------

.. procedure::
   :style: normal
   
   .. step:: Rotate your {+cmk-long+} on your {+kms-long+}

      The process for rotating your {+cmk-abbr+} depends on your
      {+kms-abbr+} provider. For details, refer to your key provider's
      documentation:

      - AWS: `Rotating AWS KMS Keys <https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html>`__
      - Azure: `Configure cryptographic key auto-rotation in Azure Key
        Vault <https://learn.microsoft.com/en-us/azure/key-vault/keys/how-to-configure-key-rotation>`__
      - GCP: `Rotate a key <https://cloud.google.com/kms/docs/rotate-key>`__

      Once you rotate the {+cmk-abbr+}, MongoDB uses it to wrap all new
      DEKs. To re-wrap existing DEKs, continue to the following steps.
   
   .. step:: Rotate your {+dek-long+}s using ``KeyVault.rewrapManyDataKey()``

      The :method:`KeyVault.rewrapManyDataKey()` method automatically
      decrypts multiple {+dek-long+}s and re-encrypts them using the
      specified {+cmk-abbr+}. It then updates the keys in the 
      {+key-vault-long+}.

      The method has the following syntax:

      .. code-block:: javascript

         let keyVault = db.getMongo().getKeyVault()

         keyVault.rewrapManyDataKey(
            { 
               "<Query filter document>" 
            },
            {
               provider: "<KMS provider>",
               masterKey: {
                  "<dataKeyOpts Key>" : "<dataKeyOpts Value>"
               }
            }
         )
      
      #. Specify a query filter document to select the keys to rotate, or omit the argument to rotate all keys in the {+key-vault-long+}

         If you specify a :ref:`query filter document <document-query-filter>`, but no keys match, then no keys rotate.
      
      #. Specify the {+kms-abbr+} provider
      
      #. Specify the ``masterKey`` using the new {+cmk-abbr+}, 
         or omit the argument to rotate keys using their existing {+cmk-abbr+}

Your DEKs themselves are left unchanged after re-wrapping them
with the new {+cmk-abbr+}. The key rotation process is seamless, and does
not interrupt your application.