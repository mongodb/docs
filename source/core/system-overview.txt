=====================
|onprem| Architecture
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

An |onprem| installation includes hosts that run the |application| and
hosts that serve and store application data and snapshots.

.. include:: /images/opsmanager-network-diagram.rst

The |application| requires a dedicated :term:`Application Database`
and, if you enabled backups, :term:`Snapshot Stores <snapshot store>`.

.. _mms-http-service:
.. _application:
.. _mms-application-package:

|application|
-------------

The |application| provides the user interface and the |http| services
the MongoDB Agent uses to transmit data to and from |onprem|. These are
all stateless and start automatically when the |application| starts.
Multiple instances of the |application| can run if each instance uses
the same configuration and the same application database. Users and
Agents can interact with any instance.

By default, the |application| runs on port ``8080`` and contains the
web interface for managing |onprem| users, monitoring of MongoDB hosts,
and managing host backups.

For a list of |onprem|'s default ports and health-check endpoints, see
:doc:`/reference/firewall-configuration`.

.. _backup-daemon:

Backup Daemon Service
---------------------

You can configure any |onprem| instance to run the :term:`Backup
Daemon` service to back up MongoDB databases. The Backup Daemon service
manages the local copies of the backed-up databases and snapshots for
each database. The daemon does scheduled work based on data coming into
the |onprem| from the MongoDB Agents. No client applications can talk
directly to the daemon. Its state and job queues come from the
:ref:`mms-application-database`.

The local backup copy of a deployment is called the
:term:`head database`. The :term:`Backup Daemon` stores all its head
databases in its :term:`head directory` path. To create each head
database, the daemon's host acts as an "invisible" :term:`secondary`
for each :term:`replica set` designated for backup.

The daemon takes scheduled snapshots and stores these snapshots in a
:term:`snapshot store`. The daemon retrieves data from the snapshot
store when it receives a restore request. It then delivers the snapshot
to the requested destination.

:ref:`Multiple Backup Daemons <multiple-backup-daemons>` can scale
horizontally to increase your storage and can provide *manual*
failover.

If you run multiple Backup Daemons, |onprem| selects the Backup Daemon
to use when a user enables backup for a deployment. The
:term:`head database` resides with the daemon's host.

.. _backing-database:

Dedicated Storage for Operational Data
--------------------------------------

.. _mms-application-database:

|application| Database
~~~~~~~~~~~~~~~~~~~~~~

|onprem| uses a dedicated MongoDB database to store the |onprem|\'s
operational data. The :term:`application database` runs as a
:term:`replica set` to ensure redundancy and high availability. This
replica set hosts *only* |onprem| data. Before installing |onprem|,
you must :doc:`provision the application database </tutorial/prepare-backing-mongodb-instances>`.
This database contains :ref:`application` metadata:

- Monitoring data collected from the MongoDB Agents.

- Metadata for |onprem| users, projects, hosts, monitoring data, and
  backup state.

For topology and specifications, see
:ref:`mms-application-database-specifications`.

.. _backup-database:
.. _mms-backup-blockstore-database:

Snapshot Storage
~~~~~~~~~~~~~~~~

|mms| creates snapshots of deployments to back up your databases.
You can have |mms| store these snapshots in
:term:`snapshot stores <snapshot store>`. Snapshot stores can be local
databases, local file systems, or cloud-based data stores. There can
be more than one snapshot store per project. |onprem| writes the
recent history of the deployment database to a separate database
regardless of where the snapshots are written.

Snapshot storage include two components:

Snapshot Stores
```````````````

Snapshots can be written to one of three target storage systems:

.. list-table::
   :widths: 20 40 40
   :header-rows: 1

   * - System
     - Storage Method
     - Learn More

   * - :term:`blockstore <backup blockstore database>`
     - A MongoDB database stored in a local host.
     - :doc:`/tutorial/manage-blockstore-storage`

   * - :term:`S3 snapshot store`
     - A cloud data store in |aws| |s3|.
     - :doc:`/tutorial/manage-s3-blockstore-storage`

   * - :term:`file system store`
     - A local file system in the directory of your choosing.
     - :doc:`/tutorial/manage-filestore-storage`

Oplog Store
```````````

The :term:`Oplog Store <Oplog Store Database>` retains the
:term:`oplog` entries that the :term:`Backup Daemon` applies to its
local copies of your backed-up deployments.

.. seealso::

   To learn about the requirements and procedures for Oplog Stores,
   see :doc:`/tutorial/manage-oplog-storage`.
