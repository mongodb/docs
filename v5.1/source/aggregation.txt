===========
Aggregation
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Aggregation operations process multiple documents and return computed
results. You can use aggregation operations to:

- Group values from multiple documents together.

- Perform operations on the grouped data to return a single result.

- Analyze data changes over time.

To perform aggregation operations, you can use:

- :ref:`Aggregation pipelines <aggregation-framework>`

- :ref:`Single purpose aggregation methods
  <single-purpose-agg-operations>`

- :ref:`Map-reduce functions <aggregation-map-reduce>`

.. _aggregation-framework:

Aggregation Pipelines
---------------------

.. include:: /includes/aggregation-pipeline-introduction.rst

Aggregation Pipeline Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/aggregation-pipeline-example.rst

For a runnable example, see :ref:`Complete Aggregation Pipeline
Example <aggregation-pipeline-example>`.

Aggregation Pipeline Stages and Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The most basic pipeline stages provide *filters* that operate like
queries and *document transformations* that modify the form
of the output document.

Other pipeline operations provide tools for grouping and sorting
documents by specific field or fields as well as tools for aggregating
the contents of arrays, including arrays of documents. In addition,
pipeline stages can use :ref:`operators
<aggregation-expression-operators>` for tasks such as calculating the
average or concatenating a string.

The pipeline provides efficient data aggregation using native
operations within MongoDB, and is the preferred method for data
aggregation in MongoDB.

The aggregation pipeline can operate on a
:doc:`sharded collection </sharding>`.

The aggregation pipeline can use indexes to improve its performance
during some of its stages. In addition, the aggregation pipeline has an
internal optimization phase. See
:ref:`aggregation-pipeline-operators-and-performance` and
:doc:`/core/aggregation-pipeline-optimization` for details.

.. _single-purpose-agg-operations:

Single Purpose Aggregation Operations
-------------------------------------

MongoDB also provides :method:`db.collection.estimatedDocumentCount()`,
:method:`db.collection.count()` and :method:`db.collection.distinct()`.

All of these operations aggregate documents from a single collection.
While these operations provide simple access to common aggregation
processes, they lack the flexibility and capabilities of an aggregation
pipeline.

.. include:: /images/distinct.rst

.. _aggregation-map-reduce:

Map-Reduce
----------

.. include:: /includes/fact-use-aggregation-not-map-reduce.rst

Additional Features and Behaviors
---------------------------------

For a feature comparison of the aggregation pipeline,
map-reduce, and the special group functionality, see
:doc:`/reference/aggregation-commands-comparison`.

Learn More
----------

Practical MongoDB Aggregations E-Book
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For more information on aggregations, read the `Practical MongoDB
Aggregations <https://www.practical-mongodb-aggregations.com>`__ e-book.


.. toctree::
   :titlesonly:
   :hidden:

   /core/aggregation-pipeline
   /core/map-reduce
   /reference/aggregation
