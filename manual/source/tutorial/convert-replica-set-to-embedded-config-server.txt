.. _convert-replica-set-to-embedded-config-server:

=========================================================================
Convert a Replica Set to a Sharded Cluster with an Embedded Config Server
=========================================================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Starting in MongoDB 8.0, you can configure a config server to store your 
application data in addition to the usual :term:`sharded cluster` metadata. 
A config server that stores application data is called a :ref:`config shard 
<config-shard-concept>` or embedded config server. 

Converting your replica set into a sharded cluster with an embedded config 
server can reduce:

- The number of nodes required in your deployment.
- Complexity for maintaining one-shard clusters. 

About this Task 
---------------

You can't directly convert a replica set to a config shard. To convert a 
replica set to an embedded config server, you must:

- Convert your replica set to a sharded cluster with a 
  :term:`dedicated config server`.

- Configure the dedicated config server to run as a :ref:`config shard 
  <config-shard-concept>` using the 
  :dbcommand:`transitionFromDedicatedConfigServer` command. 

  - The ``transitionFromDedicatedConfigServer`` command adds the config server 
    as a shard in the cluster. 
    
- Reduce the number of shards in your cluster after adding the config shard.

Access Control
~~~~~~~~~~~~~~

If access control is enabled, the ``transitionFromDedicatedConfigServer`` 
command requires the :authaction:`transitionFromDedicatedConfigServer`
authorization action for the :ref:`cluster <resource-document>`.

The :authrole:`clusterManager` role has the 
``transitionFromDedicatedConfigServer`` authorization action and can be 
assigned to a user.

Steps
-----

The following example converts a self-managed replica set to a config shard that 
contain pre-existing user data from the replica set.

.. procedure::
   :style: normal

   .. step:: Convert your replica set to a sharded cluster with a dedicated config server
      
      This tutorial assumes that you know how to convert your self-managed 
      replica set to a sharded cluster. For full instructions, see 
      :ref:`manual-convert-replica-set-to-sharded-cluster`.

   .. step:: Connect to ``mongos``

      For example, to connect to your ``mongos`` instance running on host 
      ``mongodb6.example.net`` as an admin user named ``admin01``: 

      .. code-block:: bash

         mongosh "mongodb://admin01@mongodb6.example.net:27017"
      
   .. step:: Run the ``transitionFromDedicatedConfigServer`` command 

      To configure your dedicated config server to run as a config shard, run 
      the ``transitionFromDedicatedConfigServer`` command from the admin 
      database:

      .. code-block:: javascript

         db.adminCommand( { 
            transitionFromDedicatedConfigServer: 1
         } )

   .. step:: Verify that the config server is now a config shard

      .. include:: /includes/confirm-use-config-shard.rst

      .. note:: 
         
         If the :ref:`balancer <sharding-balancing>` is running, it 
         automatically migrates data across the shards. Otherwise, use the 
         :dbcommand:`moveCollection` or :dbcommand:`moveChunk` commands to 
         manually distribute your data.

   .. step:: Reduce the number of shards in your cluster to one
      
      
      To reduce the cluster to a single shard after adding the config shard, 
      move all unsharded collections to the config shard using the 
      :dbcommand:`moveCollection` command and remove the first shard in the 
      cluster with the :dbcommand:`removeShard` command. This step reduces your 
      cluster to a single config shard.
      
      For full instructions on removing shards in your cluster, see 
      :ref:`remove-shards-from-cluster-tutorial`.

Learn More
----------

- :ref:`config-shard-concept`
- :ref:`manual-convert-replica-set-to-sharded-cluster`
- :ref:`remove-shards-from-cluster-tutorial`
- :ref:`sharding-config-server`
- :dbcommand:`transitionFromDedicatedConfigServer`
- :dbcommand:`transitionToDedicatedConfigServer`
