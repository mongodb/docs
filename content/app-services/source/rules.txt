.. meta::
   :robots: nosnippet

.. _rules:
.. _mongodb-rules:

==============================
Define Data Access Permissions
==============================

.. toctree::
   :titlesonly:
   :hidden:
   
   Role-based Permissions </rules/roles>
   Rule Expressions </rules/expressions>
   Filter Incoming Queries </rules/filters>
   Device Sync-Compatible Permissions </rules/sync-compatibility>
   Configure Advanced Rules </mongodb/configure-advanced-rules>
   Data Access Role Examples </rules/examples>

Overview
--------

In traditional applications, an application server exposes an API to client
applications and handles database queries on their behalf. To prevent malicious,
improper, or incorrect read and write operations, clients don't query the
database directly.

Atlas App Services provides a configurable and dynamic permissions engine that
enables you to run MongoDB and Device Sync queries from client applications
while transparently preventing unauthorized reads and writes. Permissions are
defined for entire collections in a linked MongoDB Atlas cluster and apply to
individual documents in the collection dynamically based on the
:doc:`application user </users>` that issues a query or uses Device Sync. You
can also define default roles that serve as a fallback for any collection that
doesn't have its own roles.

.. include:: /includes/adf-rules-note.rst

Key Concepts
------------

To understand how the permissions engine works and how to configure it for your
use case, see :doc:`Role-based Permissions </rules/roles>`.

You define permissions with :doc:`Rule Expressions </rules/expressions>`, a
domain-specific language built on JSON.

You can optimize the performance of the permissions engine with filters. See
:doc:`Filter Incoming Queries </rules/filters>`.

If you're using Device Sync (Flexible Mode), permissions work a bit differently.
See :doc:`Device Sync-Compatible Permissions </rules/sync-compatibility>` for
important considerations.

The default or "Basic Mode" rules editor in the App Services UI covers the
majority of use cases for collection rules. However, there are times when you
need more fine-grained control than the UI interface provides. In those times,
see :doc:`Configure Advanced Rules </mongodb/configure-advanced-rules>`.

Finally, to help you put these concepts into practice, we have provided some
:doc:`Data Access Role Examples </rules/examples>`.
