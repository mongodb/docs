# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: 2014-04-08 19:31+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 88ab546b7d944e05b50945f15d8be7d4
#: ../source/core/sharding-introduction.txt:5
msgid "Sharding Introduction"
msgstr ""

# cfd0c71fea9a495bac30c6c50c37054f
#: ../source/core/sharding-introduction.txt
msgid "On this page"
msgstr ""

# fa4135a224904fe8876f9369a978dba1
#: ../source/core/sharding-introduction.txt:17
msgid ""
"Sharding is a method for storing data across multiple machines. MongoDB "
"uses sharding to support deployments with very large data sets and high "
"throughput operations."
msgstr ""

# d106cec355754bd59bfc6174564050a1
#: ../source/core/sharding-introduction.txt:22
msgid "Purpose of Sharding"
msgstr ""

# 863f50665ac1460a836d62aa3e997cf0
#: ../source/core/sharding-introduction.txt:24
msgid ""
"Database systems with large data sets and high throughput applications "
"can challenge the capacity of a single server. High query rates can "
"exhaust the CPU capacity of the server. Larger data sets exceed the "
"storage capacity of a single machine. Finally, working set sizes larger "
"than the system's RAM stress the I/O capacity of disk drives."
msgstr ""

# a0eb83a995a94fa191f935d04c14fe8f
#: ../source/core/sharding-introduction.txt:30
msgid ""
"To address these issues of scales, database systems have two basic "
"approaches: **vertical scaling** and **sharding**."
msgstr ""

# 0e5464ee5f4c41ad8997c87ceb2da1ad
#: ../source/core/sharding-introduction.txt:33
msgid ""
"**Vertical scaling** adds more CPU and storage resources to increase "
"capacity. Scaling by adding capacity has limitations: high performance "
"systems with large numbers of CPUs and large amount of RAM are "
"disproportionately *more expensive* than smaller systems. Additionally, "
"cloud-based providers may only allow users to provision smaller "
"instances.  As a result there is a *practical maximum* capability for "
"vertical scaling."
msgstr ""

# 64b09c6fa5a74bf88e6b150db812b068
#: ../source/core/sharding-introduction.txt:41
msgid ""
"**Sharding**, or *horizontal scaling*, by contrast, divides the data set "
"and distributes the data over multiple servers, or **shards**. Each shard"
" is an independent database, and collectively, the shards make up a "
"single logical database."
msgstr ""

# df03dca90be0449ab501c53a0327747a
#: ../source/core/sharding-introduction.txt:48
msgid ""
"Sharding addresses the challenge of scaling to support high throughput "
"and large data sets:"
msgstr ""

# 633d6cf906454e9884eaa0677a7af4b5
#: ../source/core/sharding-introduction.txt:51
msgid ""
"Sharding reduces the number of operations each shard handles. Each shard "
"processes fewer operations as the cluster grows. As a result, a cluster "
"can increase capacity and throughput *horizontally*."
msgstr ""

# 76136b0411c7431ca037cc42efc1c1c1
#: ../source/core/sharding-introduction.txt:55
msgid ""
"For example, to insert data, the application only needs to access the "
"shard responsible for that record."
msgstr ""

# c4451eb02ac64b5c9c782eeed8d89a9a
#: ../source/core/sharding-introduction.txt:58
msgid ""
"Sharding reduces the amount of data that each server needs to store. Each"
" shard stores less data as the cluster grows."
msgstr ""

# 4224d6cfdb2c40a99431c544876bde81
#: ../source/core/sharding-introduction.txt:61
msgid ""
"For example, if a database has a 1 terabyte data set, and there are 4 "
"shards, then each shard might hold only 256 GB of data. If there are 40 "
"shards, then each shard might hold only 25 GB of data."
msgstr ""

# 4a00dda77cd844c5b5b6f99b376ed79e
#: ../source/core/sharding-introduction.txt:66
msgid "Sharding in MongoDB"
msgstr ""

# fcc10393b53e470daaeac73de5274742
#: ../source/core/sharding-introduction.txt:68
msgid ""
"MongoDB supports sharding through the configuration of a :term:`sharded "
"clusters <sharded cluster>`."
msgstr ""

# b9422677ef054bc583afa521ad3cc1ce
#: ../source/core/sharding-introduction.txt:73
msgid ""
"Sharded cluster has the following components: :term:`shards <shard>`, "
":term:`query routers <mongos>` and :term:`config servers <config "
"server>`."
msgstr ""

# c51cbaff72044bdbb25f3892bb295c8d
#: ../source/core/sharding-introduction.txt:76
msgid ""
"**Shards** store the data. To provide high availability and data "
"consistency, in a production sharded cluster, each shard is a "
":term:`replica set` [#dev-only-shard-deployment]_. For more information "
"on replica sets, see :doc:`Replica Sets </core/replication>`."
msgstr ""

# 6847d0eab1e0431a9409104eb0a14e04
#: ../source/core/sharding-introduction.txt:82
msgid ""
"**Query Routers**, or :program:`mongos` instances, interface with client "
"applications and direct operations to the appropriate shard or shards. A "
"client sends requests to a :program:`mongos`, which then routes the "
"operations to the shards and returns the results to the clients. A "
"sharded cluster can contain more than one :program:`mongos` to divide the"
" client request load, and most sharded clusters have more than one "
":program:`mongos` for this reason."
msgstr ""

# 67c5f8bbdde34fbf8b2d00323f53bbef
#: ../source/core/sharding-introduction.txt:90
msgid ""
"**Config servers** store the cluster's metadata. This data contains a "
"mapping of the cluster's data set to the shards. The query router uses "
"this metadata to target operations to specific shards."
msgstr ""

# 80c08410d39a488c8987f2dd43fc82d6
#: ../source/includes/fact-mirrored-config-servers-deprecated.rst:1
msgid ""
"Starting in MongoDB 3.2, config servers for sharded clusters can be "
"deployed as a :doc:`replica set </core/replication-introduction>`. The "
"replica set config servers must run the :doc:`WiredTiger storage engine "
"</core/wiredtiger>`. MongoDB 3.2 deprecates the use of three mirrored "
":program:`mongod` instances for config servers."
msgstr ""

# 830f01ca5ca4449d8f8e2d466336510b
#: ../source/core/sharding-introduction.txt:98
msgid ""
"For development and testing purposes only, each **shard** can be a single"
" :program:`mongod` instead of a replica set."
msgstr ""

# c1e39919cad14650a0e82420bcb8c28a
#: ../source/core/sharding-introduction.txt:105
msgid "Data Partitioning"
msgstr ""

# f5435786b3f64074ac6733560e37b4cc
#: ../source/core/sharding-introduction.txt:107
msgid ""
"MongoDB distributes data, or shards, at the collection level. Sharding "
"partitions a collection's data by the **shard key**."
msgstr ""

# 8c3122ac07c04258a6efade78f2b8547
#: ../source/core/sharding-introduction.txt:111
msgid "Shard Keys"
msgstr ""

# 300fc03c335a4dc2933a8a045e99dc4c
#: ../source/core/sharding-introduction.txt:113
msgid ""
"To shard a collection, you need to select a **shard key**. A :term:`shard"
" key` is either an indexed field or an indexed compound field that exists"
" in every document in the collection. MongoDB divides the shard key "
"values into **chunks** and distributes the :term:`chunks <chunk>` evenly "
"across the shards. To divide the shard key values into chunks, MongoDB "
"uses either **range based partitioning** or **hash based partitioning**. "
"See the :doc:`Shard Key </core/sharding-shard-key>` documentation for "
"more information."
msgstr ""

# 30ac2a0d6d204e3aa315099267cffe0a
#: ../source/core/sharding-introduction.txt:123
msgid "Range Based Sharding"
msgstr ""

# a4d04bc6cb8f47099e5e5c2ede8a02dd
#: ../source/core/sharding-introduction.txt:125
msgid ""
"For *range-based sharding*, MongoDB divides the data set into ranges "
"determined by the shard key values to provide **range based "
"partitioning**. Consider a numeric shard key: If you visualize a number "
"line that goes from negative infinity to positive infinity, each value of"
" the shard key falls at some point on that line. MongoDB partitions this "
"line into smaller, non-overlapping ranges called **chunks** where a chunk"
" is range of values from some minimum value to some maximum value."
msgstr ""

# 3f025538af4d461d9a38a12c39cdc8c5
#: ../source/core/sharding-introduction.txt:134
msgid ""
"Given a range based partitioning system, documents with \"close\" shard "
"key values are likely to be in the same chunk, and therefore on the same "
"shard."
msgstr ""

# be7681892ae8452bb0e43eac81b6e3ca
#: ../source/core/sharding-introduction.txt:141
msgid "Hash Based Sharding"
msgstr ""

# a8f81138373141429e9d171229480613
#: ../source/core/sharding-introduction.txt:143
msgid ""
"For *hash based partitioning*, MongoDB computes a hash of a field's "
"value, and then uses these hashes to create chunks."
msgstr ""

# ad13e98a085a4260bcc152582a6675ac
#: ../source/core/sharding-introduction.txt:146
msgid ""
"With hash based partitioning, two documents with \"close\" shard key "
"values are *unlikely* to be part of the same chunk. This ensures a more "
"random distribution of a collection in the cluster."
msgstr ""

# 0db9426a6fcc4b1190339c529b3ed091
#: ../source/core/sharding-introduction.txt:153
msgid "Performance Distinctions between Range and Hash Based Partitioning"
msgstr ""

# 12e7c59686ec4bfb90c063f1bdbc0abd
#: ../source/core/sharding-introduction.txt:155
msgid ""
"Range based partitioning supports more efficient range queries. Given a "
"range query on the shard key, the query router can easily determine which"
" chunks overlap that range and route the query to only those shards that "
"contain these chunks."
msgstr ""

# ba102e2c55814991afa9b168af2f3480
#: ../source/core/sharding-introduction.txt:160
msgid ""
"However, range based partitioning can result in an uneven distribution of"
" data, which may negate some of the benefits of sharding. For example, if"
" the shard key is a linearly increasing field, such as time, then all "
"requests for a given time range will map to the same chunk, and thus the "
"same shard. In this situation, a small set of shards may receive the "
"majority of requests and the system would not scale very well."
msgstr ""

# 86c4836863924538a6d03c05c588546a
#: ../source/core/sharding-introduction.txt:168
msgid ""
"Hash based partitioning, by contrast, ensures an even distribution of "
"data at the expense of efficient range queries. Hashed key values results"
" in random distribution of data across chunks and therefore shards. But "
"random distribution makes it more likely that a range query on the shard "
"key will not be able to target a few shards but would more likely query "
"every shard in order to return a result."
msgstr ""

# a81d11d2f55c4237808029e5e0388aa6
#: ../source/core/sharding-introduction.txt:176
msgid "Customized Data Distribution with Tag Aware Sharding"
msgstr ""

# c0ba41067afa43ef88ddec2ee22951f4
#: ../source/core/sharding-introduction.txt:178
msgid ""
"MongoDB allows administrators to direct the balancing policy using **tag "
"aware sharding**. Administrators create and associate tags with ranges of"
" the shard key, and then assign those tags to the shards. Then, the "
"balancer migrates tagged data to the appropriate shards and ensures that "
"the cluster always enforces the distribution of data that the tags "
"describe."
msgstr ""

# 02a534a1eb5048289533494be3ffbce0
#: ../source/core/sharding-introduction.txt:185
msgid ""
"Tags are the primary mechanism to control the behavior of the balancer "
"and the distribution of chunks in a cluster.  Most commonly, tag aware "
"sharding serves to improve the locality of data for sharded clusters that"
" span multiple data centers."
msgstr ""

# d56339fe4a764e6ea5734d17284c790a
#: ../source/core/sharding-introduction.txt:190
msgid "See :doc:`/core/tag-aware-sharding` for more information."
msgstr ""

# eef24dd8528742e3ad9f36789514ffe9
#: ../source/core/sharding-introduction.txt:193
msgid "Maintaining a Balanced Data Distribution"
msgstr ""

# 70bc195068a44cf7b0fcbfd261dc7b2c
#: ../source/core/sharding-introduction.txt:195
msgid ""
"The addition of new data or the addition of new servers can result in "
"data distribution imbalances within the cluster, such as a particular "
"shard contains significantly more chunks than another shard or a size of "
"a chunk is significantly greater than other chunk sizes."
msgstr ""

# f4ffc10546744fa6a71558215d1dd3b2
#: ../source/core/sharding-introduction.txt:200
msgid ""
"MongoDB ensures a balanced cluster using two background process: "
"splitting and the balancer."
msgstr ""

# 0d7e8cfae1674ff09f438448c83433b6
#: ../source/core/sharding-introduction.txt:204
msgid "Splitting"
msgstr ""

# e681b1a3cc1646888c2e34c46f22dcdd
#: ../source/core/sharding-introduction.txt:206
msgid ""
"Splitting is a background process that keeps chunks from growing too "
"large. When a chunk grows beyond a :ref:`specified chunk size <sharding-"
"chunk-size>`, MongoDB splits the chunk in half. Inserts and updates "
"triggers splits. Splits are an efficient meta-data change. To create "
"splits, MongoDB does *not* migrate any data or affect the shards."
msgstr ""

# f93f4338f5544215a99f62da7cfff376
#: ../source/core/sharding-introduction.txt:216
msgid "Balancing"
msgstr ""

# e4a8719ef1e14489a78d3e76fe37ca09
#: ../source/core/sharding-introduction.txt:218
msgid ""
"The :ref:`balancer <sharding-balancing-internals>` is a background "
"process that manages chunk migrations. The balancer can run from any of "
"the :program:`mongos` instances in a cluster."
msgstr ""

# 7b327cc3bd7b4c57b5e9f28e0b114fd8
#: ../source/core/sharding-introduction.txt:222
msgid ""
"When the distribution of a sharded collection in a cluster is uneven, the"
" balancer process migrates chunks from the shard that has the largest "
"number of chunks to the shard with the least number of chunks until the "
"collection balances. For example: if collection ``users`` has 100 chunks "
"on *shard 1* and 50 chunks on *shard 2*, the balancer will migrate chunks"
" from *shard 1* to *shard 2* until the collection achieves balance."
msgstr ""

# 5c6fa11df844499ca26e31289df3db7b
#: ../source/core/sharding-introduction.txt:230
msgid ""
"The shards manage *chunk migrations* as a background operation between an"
" *origin shard* and a *destination shard*.  During a chunk migration, the"
" *destination shard* is sent all the current documents in the chunk from "
"the *origin shard*. Next, the destination shard captures and applies all "
"changes made to the data during the migration process. Finally, the "
"metadata regarding the location of the chunk on *config server* is "
"updated."
msgstr ""

# 8f2e259ed05f4b80967c5a790295d1b2
#: ../source/core/sharding-introduction.txt:238
msgid ""
"If there's an error during the migration, the balancer aborts the process"
" leaving the chunk unchanged on the origin shard. MongoDB removes the "
"chunk's data from the origin shard **after** the migration completes "
"successfully."
msgstr ""

# cfc73ac276774d5ebb83e1278fa7ec72
#: ../source/core/sharding-introduction.txt:246
msgid "Adding and Removing Shards from the Cluster"
msgstr ""

# 2e209f9c275f45e49fa1521497707ae1
#: ../source/core/sharding-introduction.txt:248
msgid ""
"Adding a shard to a cluster creates an imbalance  since the new shard has"
" no chunks. While MongoDB begins migrating data to the new shard "
"immediately, it can take some time before the cluster balances."
msgstr ""

# 9ee21ddae146488eb21200ca6ea0f086
#: ../source/core/sharding-introduction.txt:252
msgid ""
"When removing a shard, the balancer migrates all chunks from a shard to "
"other shards. After migrating all data and updating the meta data, you "
"can safely remove the shard."
msgstr ""

# 9ba9dce94919410987a9f73293f53c93
#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:4
msgid "Additional Resources"
msgstr ""

# 7d771e66cbd548d1a1e1c6e0c602e83d
#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:6
msgid ""
"`Sharding Methods for MongoDB (Presentation) "
"<http://www.mongodb.com/presentations/webinar-sharding-methods-"
"mongodb?jmp=docs>`_"
msgstr ""

# a9022bdd96194247bd786ffd1d9bb096
#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:7
msgid ""
"`Everything You Need to Know About Sharding (Presentation) "
"<http://www.mongodb.com/presentations/webinar-everything-you-need-know-"
"about-sharding?jmp=docs>`_"
msgstr ""

# f2c1c13af8a84a4788072ed858df3891
#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:8
msgid ""
"`MongoDB for Time Series Data: Sharding "
"<http://www.mongodb.com/presentations/mongodb-time-series-data-"
"part-3-sharding?jmp=docs>`_"
msgstr ""

# db4bb027050c493c855127f33e735675
#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:9
msgid ""
"`MongoDB Operations Best Practices White Paper <http://www.mongodb.com/lp"
"/white-paper/ops-best-practices?jmp=docs>`_"
msgstr ""

# d2e8a91309cf4aa69fb79b25496cd319
#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:10
msgid ""
"`Talk to a MongoDB Expert About Scaling "
"<http://www.mongodb.com/lp/contact/planning-for-scale?jmp=docs>`_"
msgstr ""

# 8706c0444be140a2b465539741b5e6e9
#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:11
msgid ""
"`MongoDB Consulting Package "
"<https://www.mongodb.com/products/consulting?jmp=docs>`_"
msgstr ""

# 4de963402da4459f8dfa18d77369c0fb
#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:12
msgid ""
"`Quick Reference Cards <https://www.mongodb.com/lp/misc/quick-reference-"
"cards?jmp=docs>`_"
msgstr ""

#~ msgid ""
#~ "To shard a collection, you need to"
#~ " select a **shard key**. A "
#~ ":term:`shard key` is either an indexed"
#~ " field or an indexed compound field"
#~ " that exists in every document in "
#~ "the collection. MongoDB divides the "
#~ "shard key values into **chunks** and "
#~ "distributes the :term:`chunks <chunk>` evenly"
#~ " across the shards. To divide the "
#~ "shard key values into chunks, MongoDB"
#~ " uses either **range based partitioning**"
#~ " and **hash based partitioning**. See "
#~ ":doc:`/core/sharding-shard-key` for more "
#~ "information."
#~ msgstr ""

#~ msgid ""
#~ "The shards manage *chunk migrations* as"
#~ " a background operation. During migration,"
#~ " all requests for a chunk's data "
#~ "address the \"origin\" shard."
#~ msgstr ""

#~ msgid ""
#~ "In a chunk migration, the *destination"
#~ " shard* receives all the documents in"
#~ " the chunk from the *origin shard*."
#~ " Then, the destination shard captures "
#~ "and applies all changes made to "
#~ "the data during migration process. "
#~ "Finally, the destination shard updates "
#~ "the metadata regarding the location of"
#~ " the chunk on *config server*."
#~ msgstr ""

#~ msgid ""
#~ "If there's an error during the "
#~ "migration, the balancer aborts the "
#~ "process leaving the chunk on the "
#~ "origin shard. MongoDB removes the "
#~ "chunk's data from the origin shard "
#~ "**after** the migration completes "
#~ "successfully."
#~ msgstr ""

# c0b4044a60164eba857a9f4b1bf79911
#~ msgid ""
#~ "For example, if a database has a"
#~ " 1 terabyte data set, and there "
#~ "are 4 shards, then each shard "
#~ "might hold only 256GB of data. If"
#~ " there are 40 shards, then each "
#~ "shard might hold only 25GB of "
#~ "data."
#~ msgstr ""

# ac897e8892f34f8fb657250c3beeb390
#~ msgid ""
#~ "**Query Routers**, or :program:`mongos` "
#~ "instances, interface with client applications"
#~ " and direct operations to the "
#~ "appropriate shard or shards. The query"
#~ " router processes and targets operations"
#~ " to shards and then returns results"
#~ " to the clients. A sharded cluster"
#~ " can contain more than one query "
#~ "router to divide the client request "
#~ "load. A client sends requests to "
#~ "one query router. Most sharded cluster"
#~ " have many query routers."
#~ msgstr ""

# 4cba3d7fff1342c283751c700c87e6ea
#~ msgid ""
#~ "**Config servers** store the cluster's "
#~ "metadata. This data contains a mapping"
#~ " of the cluster's data set to "
#~ "the shards. The query router uses "
#~ "this metadata to target operations to"
#~ " specific shards. Production sharded "
#~ "clusters have *exactly* 3 config "
#~ "servers."
#~ msgstr ""

# ad63bfbcf53a4df9872dc3e0a9191892
#~ msgid ""
#~ "For development and testing purposes "
#~ "only, each **shard** can be a "
#~ "single :program:`mongod` instead of a "
#~ "replica set. Do **not** deploy "
#~ "production clusters without 3 config "
#~ "servers."
#~ msgstr ""

# 8b9759f4768b4259b65094450fe72224
#~ msgid ""
#~ "Splitting is a background process that"
#~ " keeps chunks from growing too large."
#~ " When a chunk grows beyond a "
#~ ":ref:`specified chunk size <sharding-chunk-"
#~ "size>`, MongoDB splits the chunk in "
#~ "half. Inserts and updates triggers "
#~ "splits. Splits are a efficient meta-"
#~ "data change. To create splits, MongoDB"
#~ " does *not* migrate any data or "
#~ "affect the shards."
#~ msgstr ""

# 67ac3d5811f9405d8126acb4f753879b
#~ msgid ""
#~ "The :ref:`balancer <sharding-balancing-"
#~ "internals>` is a background process that"
#~ " manages chunk migrations. The balancer "
#~ "runs in all of the query routers"
#~ " in a cluster."
#~ msgstr ""

