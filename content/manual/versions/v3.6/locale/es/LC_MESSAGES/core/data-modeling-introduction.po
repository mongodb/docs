# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 19:26+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/data-modeling-introduction.txt:3
msgid "Data Modeling Introduction"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:13
msgid ""
"Data in MongoDB has a *flexible schema*. Unlike SQL databases, where you "
"must determine and declare a table's schema before inserting data, "
"MongoDB's :term:`collections <collection>` do not enforce "
":term:`document` structure. This flexibility facilitates the mapping of "
"documents to an entity or an object. Each document can match the data "
"fields of the represented entity, even if the data has substantial "
"variation. In practice, however, the documents in a collection share a "
"similar structure."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:22
msgid ""
"The key challenge in data modeling is balancing the needs of the "
"application, the performance characteristics of the database engine, and "
"the data retrieval patterns. When designing data models, always consider "
"the application usage of the data (i.e. queries, updates, and processing "
"of the data) as well as the inherent structure of the data itself."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:30
msgid "Document Structure"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:34
msgid ""
"The key decision in designing data models for MongoDB applications "
"revolves around the structure of documents and how the application "
"represents relationships between data. There are two tools that allow "
"applications to represent these relationships: *references* and *embedded"
" documents*."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:41
msgid "References"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:43
msgid ""
"References store the relationships between data by including links or "
"*references* from one document to another. Applications can resolve these"
" :doc:`references </reference/database-references>` to access the related"
" data. Broadly, these are *normalized* data models."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:50
msgid ""
"See :ref:`data-modeling-referencing` for the strengths and weaknesses of "
"using references."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:54
msgid "Embedded Data"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:56
msgid ""
"Embedded documents capture relationships between data by storing related "
"data in a single document structure. MongoDB documents make it possible "
"to embed document structures in a field or array within a document. These"
" *denormalized* data models allow applications to retrieve and manipulate"
" related data in a single database operation."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:65
msgid ""
"See :ref:`data-modeling-embedding` for the strengths and weaknesses of "
"embedding documents."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:71
msgid "Atomicity of Write Operations"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:73
msgid ""
"In MongoDB, write operations are atomic at the :term:`document` level, "
"and no single write operation can atomically affect more than one "
"document or more than one collection. A denormalized data model with "
"embedded data combines all related data for a represented entity in a "
"single document. This facilitates atomic write operations since a single "
"write operation can insert or update the data for an entity. Normalizing "
"the data would split the data across multiple collections and would "
"require multiple write operations that are not atomic collectively."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:83
msgid ""
"However, schemas that facilitate atomic writes may limit ways that "
"applications can use the data or may limit ways to modify applications. "
"The :ref:`Atomicity Considerations <data-model-atomicity>` documentation "
"describes the challenge of designing a schema that balances flexibility "
"and atomicity."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:90
msgid "Document Growth"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:92
msgid ""
"Some updates, such as pushing elements to an array or adding new fields, "
"increase a :term:`document's <document>` size."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:95
msgid ""
"For the MMAPv1 storage engine, if the document size exceeds the allocated"
" space for that document, MongoDB relocates the document on disk. When "
"using the MMAPv1 storage engine, growth consideration can affect the "
"decision to normalize or denormalize data. See :ref:`Document Growth "
"Considerations <data-model-document-growth>` for more about planning for "
"and managing document growth for MMAPv1."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:103
msgid "Data Use and Performance"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:105
msgid ""
"When designing a data model, consider how applications will use your "
"database. For instance, if your application only uses recently inserted "
"documents, consider using :doc:`/core/capped-collections`. Or if your "
"application needs are mainly read operations to a collection, adding "
"indexes to support common queries can improve performance."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:111
msgid ""
"See :doc:`/core/data-model-operations` for more information on these and "
"other operational considerations that affect data model designs."
msgstr ""

#: ../source/includes/extracts/additional-resources-data-modeling-introduction.rst:4
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-data-modeling-introduction.rst:6
msgid ""
"`Thinking in Documents Part 1 (Blog Post) "
"<https://www.mongodb.com/blog/post/thinking-documents-part-1?jmp=docs>`_"
msgstr ""

# f3eb1774e80446e8bd27bc25b4cf9c20
#~ msgid ""
#~ "Embedded documents capture relationships "
#~ "between data by storing related data "
#~ "in a single document structure. MongoDB"
#~ " documents make it possible to embed"
#~ " document structures as sub-documents "
#~ "in a field or array within a "
#~ "document. These *denormalized* data models "
#~ "allow applications to retrieve and "
#~ "manipulate related data in a single "
#~ "database operation."
#~ msgstr ""

# af360ca714204ba68ef8399542b4f3a6
#~ msgid ""
#~ "See :ref:`data-modeling-embedding` for "
#~ "the strengths and weaknesses of "
#~ "embedding sub-documents."
#~ msgstr ""

# d1c5a39fb6314d6bab1f026d09cb2f8e
#~ msgid ""
#~ "Some updates, such as pushing elements"
#~ " to an array or adding new "
#~ "fields, increase a :term:`document's "
#~ "<document>` size. If the document size"
#~ " exceeds the allocated space for that"
#~ " document, MongoDB relocates the document"
#~ " on disk. The growth consideration "
#~ "can affect the decision to normalize "
#~ "or denormalize data. See :ref:`Document "
#~ "Growth Considerations <data-model-document-"
#~ "growth>` for more about planning for "
#~ "and managing document growth in MongoDB."
#~ msgstr ""

