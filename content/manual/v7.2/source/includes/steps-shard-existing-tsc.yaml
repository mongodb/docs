title: Connect to your sharded cluster.
ref: new-sharded-tsc-connect
stepnum: 1
level: 4
content: |
   Connect :binary:`~bin.mongosh` to the :binary:`~bin.mongos` for your
   sharded cluster. Specify the ``host`` and ``port`` on which the
   ``mongos`` is running:

   .. code-block:: javascript

      mongosh --host <hostname> --port <port>
---
title: Confirm that sharding is enabled on your database. 
ref: new-sharded-tsc-confirm-sharding
stepnum: 2
level: 4
content: |
   Run :method:`sh.status()` to confirm that sharding is enabled on your database:

   .. code-block:: javascript

      sh.status()

   The command returns the sharding information:

   .. code-block:: javascript

      --- Sharding Status --- 
         sharding version: {
            "_id" : 1,
            "minCompatibleVersion" : 5,
            "currentVersion" : 6,
      ...

---
title: Create a hashed index on your collection.
ref: new-sharded-tsc-index
stepnum: 3
level: 4
content: |
   Enable sharding on your collection by creating an index that supports
   the :ref:`shard key <shard-key>`.

   Consider a time series collection with the following properties:

   .. code-block:: javascript

      db.createCollection(
         "deliverySensor",
         {
            timeseries: {
               timeField: "timestamp",
               metaField: "metadata",
               granularity: "minutes"
            }
         }
      )

   A sample document from the collection resembles:

   .. code-block:: javascript

      db.deliverySensor.insertOne( {
         "metadata": { "location": "USA", "vehicle": "truck" },
         "timestamp": ISODate("2021-08-21T00:00:10.000Z"),
         "speed": 50
      } )

   Run the following command to create a hashed index on the
   ``metadata.location`` field:

   .. code-block:: javascript

      db.deliverySensor.createIndex( { "metadata.location" : "hashed" } )

---
title: Shard your collection.
ref: new-sharded-tsc-create
stepnum: 4
level: 4
content: |
   Use the :method:`~sh.shardCollection()` method to shard the
   collection.

   To shard the ``deliverySensor`` collection described in the preceding step, run
   the following command:

   .. code-block:: javascript

      sh.shardCollection( "test.deliverySensor", { "metadata.location": "hashed" } )

   In this example, :method:`sh.shardCollection()`:

   - Shards an existing time series collection named ``deliverySensor`` on
     the ``test`` database.

   - Specifies the ``metadata.location`` field as the :ref:`shard key
     <shard-key>`. ``location`` is a sub-field of the collection's
     ``metaField``.

   When the collection you specify to :method:`sh.shardCollection()` is
   a time series collection, you do not need to specify the
   :ref:`timeseries <method-sharded-time-series-collection-options>`
   option.

...
