# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2013-12-16 23:08+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 49d039d988524cde805c7c90d25c7ec0
#: ../source/reference/operator/query/nearSphere.txt:3
msgid "$nearSphere"
msgstr ""

# f87e6a03576440db8a02eb58124e1d45
#: ../source/reference/operator/query/nearSphere.txt
msgid "On this page"
msgstr ""

# 008e2af0e4c6454fbb89560d0ee95ee9
#: ../source/reference/operator/query/nearSphere.txt:14
msgid "Definition"
msgstr ""

# 9bb62892ec1c42c7935b788bcceb5473
#: ../source/reference/operator/query/nearSphere.txt:18
msgid ""
"Specifies a point for which a :term:`geospatial` query returns the "
"documents from nearest to farthest. MongoDB calculates distances for "
":query:`$nearSphere` using spherical geometry."
msgstr ""

# ff65ae9ecf3a4c41ab6d850da39d392d
#: ../source/reference/operator/query/nearSphere.txt:22
msgid ":query:`$nearSphere` *requires* a geospatial index:"
msgstr ""

# 94d6e00649774c738d7b255089c0f787
#: ../source/reference/operator/query/nearSphere.txt:24
msgid ""
":doc:`2dsphere </core/2dsphere>` index for location data defined as "
"GeoJSON points"
msgstr ""

# 1ffe30b6f7e54eb2b4155683792d8100
#: ../source/reference/operator/query/nearSphere.txt:27
msgid ""
":doc:`2d </core/2d>` index for location data defined as legacy coordinate"
" pairs. To use a :doc:`2d </core/2d>` index on :ref:`GeoJSON points "
"<geojson-point>`, create the index on the ``coordinates`` field of the "
"GeoJSON object."
msgstr ""

# 08c3f01bfc83489aaf5070c1468cff1d
#: ../source/reference/operator/query/nearSphere.txt:32
msgid ""
"The :query:`$nearSphere` operator can specify either a :term:`GeoJSON` "
"point or legacy coordinate point."
msgstr ""

# 468ba43e64cc41af9173411e7f08e6f9
#: ../source/reference/operator/query/nearSphere.txt:35
msgid ""
"To specify a :ref:`GeoJSON Point <geojson-point>`, use the following "
"syntax:"
msgstr ""

# 25d4506684604aca8ce6d69b52ca571b
# d05e987bc7d44a3ebe5d42b6971cb59e
#: ../source/reference/operator/query/nearSphere.txt:51
#: ../source/reference/operator/query/nearSphere.txt:71
msgid ""
"The *optional* :query:`$minDistance` is available only if the query uses "
"the :doc:`2dsphere </core/2dsphere>` index. :query:`$minDistance` limits "
"the results to those documents that are *at least* the specified distance"
" from the center point."
msgstr ""

# b98f83e0f5a84ddbae777483ff0e5fbc
# a07f4bc9e0f04ed4be4babfac897d4f2
#: ../source/reference/operator/query/nearSphere.txt:58
#: ../source/reference/operator/query/nearSphere.txt:78
msgid "The *optional* :query:`$maxDistance` is available for either index."
msgstr ""

# 310a24af42054d53823c9d45fa4964c8
#: ../source/reference/operator/query/nearSphere.txt:60
msgid "To specify a point using legacy coordinates, use the following syntax:"
msgstr ""

# cb49325b0a414d159ad7acc112b091b4
#: ../source/reference/operator/query/nearSphere.txt:80
msgid ""
"If you use longitude and latitude for legacy coordinates, specify the "
"longitude first, then latitude."
msgstr ""

# 59af78b5fbed4dda8d095d73833478bd
#: ../source/reference/operator/query/nearSphere.txt:83
msgid ":ref:`3.0-geo-near-compatibility`"
msgstr ""

# f4c14f9e60544ee3a0ce3912c2d6a939
#: ../source/reference/operator/query/nearSphere.txt:86
msgid "Behavior"
msgstr ""

# c9fb5a11dd064c02b1a82398e20b47f8
#: ../source/reference/operator/query/nearSphere.txt:89
msgid "Special Indexes Restriction"
msgstr ""

# 8396121863a64c7aa53a40e9a2fee498
#: ../source/includes/fact-geo-near-special-indexes.rst:1
msgid ""
"You cannot combine the |geo-operation| operator, which requires a special"
" :ref:`geospatial index <index-feature-geospatial>`, with a query "
"operator or command that requires another special index. For example you "
"cannot combine |geo-operation| with the :query:`$text` query."
msgstr ""

# e8d68e260aea4d6e9678b10027d6adc9
#: ../source/reference/operator/query/nearSphere.txt:94
msgid "Sharded Collections Restrictions"
msgstr ""

# 04c638b8e26d48309fbbe7f733872bbb
#: ../source/includes/fact-near-sharded-cluster.rst:1
msgid ""
"For sharded collections, queries using |geo-operation| are not supported."
" You can instead use either the :dbcommand:`geoNear` command or the "
":pipeline:`$geoNear` aggregation stage."
msgstr ""

# f03f883444884d52823780bf84cb08a1
#: ../source/reference/operator/query/nearSphere.txt:99
msgid "Sort Operation"
msgstr ""

# 20dcc1fa4bc1444f9d7ab0d6880432ca
#: ../source/includes/fact-geo-near-returns-sorted-results.rst:1
msgid ""
"|geo-operation| sorts documents by distance. If you also include a "
":method:`~cursor.sort()` for the query, :method:`~cursor.sort()` re-"
"orders the matching documents, effectively overriding the sort operation "
"already performed by |geo-operation|. When using :method:`~cursor.sort()`"
" with geospatial queries, consider using :query:`$geoWithin` operator, "
"which does not sort documents, instead of |geo-operation|."
msgstr ""

# 87bc8a857dd845d0aeb51a23fae25a5a
#: ../source/reference/operator/query/nearSphere.txt:106
msgid "Examples"
msgstr ""

# 6344658352c74cd4bd14f38032d9e40b
#: ../source/reference/operator/query/nearSphere.txt:109
msgid "Specify Center Point Using GeoJSON"
msgstr ""

# 7313ace50a7e4d859c5d26b5ce28fb6c
#: ../source/includes/example-nearSphere-minDistance.rst:1
msgid ""
"Consider a collection ``places`` that contains documents with a "
"``location`` field and has a :doc:`2dsphere </core/2dsphere>` index."
msgstr ""

# d25c7629ca1743608a70cf61402ee3a8
#: ../source/includes/example-nearSphere-minDistance.rst:4
msgid ""
"Then, the following example returns whose ``location`` is at least "
"``1000`` meters from and at most ``5000`` meters from the specified "
"point, ordered from nearest to farthest:"
msgstr ""

# bc20628bcc9e4a9794b7809c031b8093
#: ../source/reference/operator/query/nearSphere.txt:114
msgid "Specify Center Point Using Legacy Coordinates"
msgstr ""

# 8d3f33140ecc42eaa1093537f3b9fefb
#: ../source/reference/operator/query/nearSphere.txt:117
msgid "``2d`` Index"
msgstr ""

# 5c524ee09da04193aa051f7bee5bafea
#: ../source/reference/operator/query/nearSphere.txt:119
msgid ""
"Consider a collection ``legacyPlaces`` that contains documents with "
"legacy coordinates pairs in the ``location`` field and has a :doc:`2d "
"</core/2d>` index."
msgstr ""

# 291354482dec4e069697415773f5aa4e
#: ../source/reference/operator/query/nearSphere.txt:123
msgid ""
"Then, the following example returns those documents whose ``location`` is"
" at most ``0.10`` radians from the specified point, ordered from nearest "
"to farthest:"
msgstr ""

# f27926be37484c6d85d10e722ad96d0d
#: ../source/reference/operator/query/nearSphere.txt:134
msgid "``2dsphere`` Index"
msgstr ""

# 4df7cae0d3b040ea87887739710e9ad4
#: ../source/reference/operator/query/nearSphere.txt:136
msgid ""
"If the collection has a ``2dsphere`` index instead, you can also specify "
"the optional :query:`$minDistance` specification. For example, the "
"following example returns the documents whose ``location`` is at least "
"``0.0004`` radians from the specified point, ordered from nearest to "
"farthest:"
msgstr ""

#~ msgid ""
#~ "Specifies a point for which a "
#~ ":term:`geospatial` query returns the closest"
#~ " documents first. The query sorts the"
#~ " documents from nearest to farthest. "
#~ "MongoDB calculates distances for "
#~ ":query:`$nearSphere` using spherical geometry."
#~ msgstr ""

#~ msgid ""
#~ "The :query:`$nearSphere` operator queries for"
#~ " points defined by either :term:`GeoJSON`"
#~ " objects or legacy coordinate pairs."
#~ msgstr ""

#~ msgid ""
#~ "The optional :query:`$maxDistance` operator "
#~ "limits a :query:`$nearSphere` query to "
#~ "return only those documents that fall"
#~ " within a maximum distance of a "
#~ "point. If you use :query:`$maxDistance` "
#~ "on GeoJSON points, the distance is "
#~ "measured in meters. If you use "
#~ ":query:`$maxDistance` on legacy coordinate "
#~ "pairs, the distance is measured in "
#~ "radians."
#~ msgstr ""

#~ msgid ""
#~ "The :query:`$nearSphere` operator requires a"
#~ " geospatial index. The ``2dsphere`` and "
#~ "``2d`` indexes both support "
#~ ":query:`$nearSphere` with both legacy "
#~ "coordinate pairs and GeoJSON points. "
#~ "Queries that use a ``2d`` index "
#~ "return a at most 100 documents."
#~ msgstr ""

#~ msgid "If you use longitude and latitude, specify **longitude first**."
#~ msgstr ""

#~ msgid "For queries on GeoJSON data, use the following syntax:"
#~ msgstr ""

#~ msgid "For queries on legacy coordinate pairs, use the following syntax:"
#~ msgstr ""

#~ msgid ""
#~ "The following example selects the 100"
#~ " documents with legacy coordinates pairs"
#~ " nearest to ``[ 40 , 5 ]``, "
#~ "as calculated by spherical geometry:"
#~ msgstr ""

#~ msgid ""
#~ "The :query:`$nearSphere` operator requires a"
#~ " geospatial index and can use either"
#~ " :doc:`2dsphere </core/2dsphere>` index or "
#~ ":doc:`2d </core/2d>` index for location "
#~ "data defined as GeoJSON points or "
#~ "legacy coordinate pairs. To use a "
#~ ":doc:`2d </core/2d>` index on :ref:`GeoJSON"
#~ " points <geojson-point>`, create the "
#~ "index on the ``coordinates`` field of"
#~ " the GeoJSON object."
#~ msgstr ""

#~ msgid "To specify a :term:`GeoJSON` point, use the following syntax:"
#~ msgstr ""

#~ msgid ""
#~ "Queries that use a :doc:`2d </core/2d>`"
#~ " index return at most 100 documents."
#~ msgstr ""

#~ msgid ""
#~ "Then, the following example returns up"
#~ " to 100 documents whose ``location`` "
#~ "is at most ``0.10`` radians from "
#~ "the specified point, ordered from "
#~ "nearest to farthest:"
#~ msgstr ""

