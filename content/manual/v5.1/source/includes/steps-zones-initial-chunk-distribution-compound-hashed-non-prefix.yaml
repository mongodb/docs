title: "Create the Zones"
level: 4
ref: initial-chunk-distribution-create-zones
content: |

   Use the :method:`sh.addShardToZone()` command to create the 
   zones.

   .. code-block:: javascript
  
      sh.addShardToZone("shardA", "FacilityAlpha")
      sh.addShardToZone("shardB", "FacilityBaker")
---
title: "Create the Zone Ranges"
level: 4
ref: initial-chunk-distribution-create-zones-ranges
content: |

   The planned shard key is ``{"facility" : 1, "_id" : "hashed"}``. The
   ``facility`` field has two possible values: ``FacilityAlpha`` and
   ``FacilityBaker``.

   Initial chunk distribution on a compound hashed shard key where the
   hashed field is *not* the prefix requires one zone range for each
   combination of distinct prefix field values (i.e. all fields
   preceding the hashed field). Since ``facility`` has two distinct 
   prefix values, the collection requires exactly two zone ranges 
   that cover those values.

   - The lower bound range specifies ``MinKey`` for all non-prefix
     fields.
   
   - The upper-bound range has at least one prefix field that 
     differs from its lower-bound counterpart.

   Use :method:`sh.updateZoneKeyRange()` to create the range for 
   ``"facility": "FacilityAlpha"``:

   .. code-block:: javascript

      sh.updateZoneKeyRange( 
         "examples.metrics",
         { "facility": "FacilityAlpha", "_id" : MinKey },
         { "facility": "FacilityBaker", "_id" : MinKey },
         "FacilityAlpha"
      );

   - Since zone range upper bounds are *exclusive*, this range only
     covers documents with the distinct shard key prefix value 
     ``"facilty" : "FacilityAlpha"`` and all possible values of ``_id``. 

   Use :method:`sh.updateZoneKeyRange()` to create the range for 
   ``"facility": "FacilityBaker"``:

   .. code-block:: javascript

      sh.updateZoneKeyRange( 
         "examples.metrics",
         { "facility": "FacilityBaker", "_id" : MinKey },
         { "facility": MaxKey, "_id" : MinKey },
         "FacilityBaker"
      );

   - While the upper bound of this range can technically
     capture other values of ``facility``, the initial chunk
     distribution logic relies on the assumption that no other distinct
     values for ``facility`` exist. Since the collection only contains
     documents where ``facility`` is ``FacilityAlpha`` or 
     ``FacilityBaker``, this range only covers
     documents with the distinct shard key prefix value 
     ``"facility" : "FacilityBaker"`` and all possible values of 
     ``_id``.

---
title: "Enable Sharding for the Database"
level: 4
optional: true
ref: initial-chunk-distribution-create-zones-enable-sharding
content: |

   Skip this step if you already enabled sharding on the database.

   Use :method:`sh.enableSharding()` to enable sharding for the
   database:

   .. code-block:: javascript

      sh.enableSharding("examples")

---
title: "Shard the Collection"
level: 4
ref: initial-chunk-distribution-create-zones-shard-collection
content: |

   .. note::
   
      If the collection does not exist, the sharding operation creates
      the collection.

      If the collection is empty and no index exists to support the 
      shard key, the sharding operation creates the index.

   Use :method:`sh.shardCollection()` with 
   :ref:`presplitHashedZones: true 
   <method-shard-collection-presplitHashedZones>` to shard the 
   collection and perform initial chunk creation and distribution:

   .. code-block:: javascript

      sh.shardCollection(
        "examples.metrics",
        { "facility" : 1, "_id" : "hashed"},
        false,
        { presplitHashedZones: true }
      )
---
title: "Review the Created Chunks and Distribution"
level: 4
ref: initial-chunk-distribution-create-zones-review
content: |

   To see the created chunks and distribution, run the
   :method:`sh.status()` operation:

   .. code-block:: javascript

      sh.status()

   The output resembles the following 
   (*content omitted for  readability*):

   .. code-block:: javascript
     :emphasize-lines: 7, 11-18, 20-21

     --- Sharding Status --- 

       databases:
         {  "_id" : "config",  "primary" : "config",  "partitioned" : true }
         {  "_id" : "examples",  "primary" : "shardA",  "partitioned" : true,  "version" : {  "uuid" : UUID("6c351bcf-acd2-4fd9-82d8-9f6bd7321558"),  "lastMod" : 1 } }
           examples.metrics
             shard key: { "facility" : 1, "_id" : "hashed" }
             unique: false
             balancing: true
             chunks:
               shardA  3
               shardB  3
             { "facility" : { "$minKey" : 1 }, "_id" : { "$minKey" : 1 } } -->> { "facility" : "FacilityAlpha", "_id" : { "$minKey" : 1 } } on : shard1 Timestamp(1, 0) 
             { "facility" : "FacilityAlpha", "_id" : { "$minKey" : 1 } } -->> { "facility" : "FacilityAlpha", "_id" : NumberLong(0) } on : shard1 Timestamp(1, 1) 
             { "facility" : "FacilityAlpha", "_id" : NumberLong(0) } -->> { "facility" : "FacilityBaker", "_id" : { "$minKey" : 1 } } on : shard1 Timestamp(1, 2) 
             { "facility" : "FacilityBaker", "_id" : { "$minKey" : 1 } } -->> { "facility" : "FacilityBaker", "_id" : NumberLong(0) } on : shard2 Timestamp(1, 3) 
             { "facility" : "FacilityBaker", "_id" : NumberLong(0) } -->> { "facility" : { "$maxKey" : 1 }, "_id" : { "$minKey" : 1 } } on : shard2 Timestamp(1, 4) 
             { "facility" : { "$maxKey" : 1 }, "_id" : { "$minKey" : 1 } } -->> { "facility" : { "$maxKey" : 1 }, "_id" : { "$maxKey" : 1 } } on : shard2 Timestamp(1, 5) 
               
               tag: FacilityAlpha  { "facility" : "FacilityAlpha", "_id" : { "$minKey" : 1 } } -->> { "facility" : "FacilityBaker", "_id" : { "$minKey" : 1 } }
               tag: FacilityBaker  { "facility" : "FacilityBaker", "_id" : { "$minKey" : 1 } } -->> { "facility" : { "$maxKey" : 1 }, "_id" : { "$minKey" : 1 } }

   The sharding operation produced 6 chunks in total. Two chunks
   correspond to the absolute lower and upper bounds. Two zones were
   created, one on ``shardA`` and one on ``shardB``, corresponding to
   ``FacilityAlpha`` and ``FacilityBaker``. Each of these zones has been
   further subdivided into 2 chunks using the hashed field.

...