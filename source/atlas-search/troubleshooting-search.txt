.. _fts-troubleshooting:

=========================
Troubleshoot |fts| Errors 
=========================

.. default-domain:: mongodb

.. meta::
   :keywords: MongoDB Atlas Search troubleshooting, troubleshoot search, $search query errors, Atlas Search query errors, mongot error, Atlas Search workaround, Atlas Search initial sync, Atlas Search initial sync error, empty Atlas Search results, Atlas Search index, incorrect Atlas Search index, Atlas Search data type, incorrect Atlas Search data type
   :description: Use suggested workarounds to troubleshoot Atlas Search query errors.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _troubleshoot-initial-sync:

Initial Sync in Progress 
------------------------

|fts| starts the initial sync process in the following scenarios:

- When you create a new {+cluster+} or perform certain upgrades on a
  {+cluster+}, an initial sync process occurs.  
- If you add shards to a collection with an existing |fts| index, an
  initial sync occurs on the added shards for that index. 
- If you shard a collection that already has an |fts| index, an initial
  sync occurs on shards where the collection begins to exist. 

The initial sync process includes the following steps:
    
1. The ``mongod`` performs an initial sync.
2. The ``mongot`` performs an initial sync, which rebuilds the search indexes.

While a search index rebuilds, you can still perform ``$search`` queries 
on the existing indexed fields. However, |fts| might return an error if you run a
``$search`` query against a new field or a node that you've recently created.
Try your query again after the initial syncs complete and ``mongot`` 
rebuilds the indexes. You can check the status of the ``mongot`` initial 
sync using the following steps:

1. Click the :guilabel:`Atlas Search` tab for your {+database-deployment+}.
2. In the index's ``Status`` column, click :guilabel:`View Status Details`. 
3. Check the state of the index for the node. During ``mongot`` initial sync, the status
   is ``INITIAL SYNC``. When ``mongot`` finishes rebuilding the index, the status
   is ``ACTIVE``.

.. _troubleshoot-mongot-process:

``mongot`` Process Not Installed or Running
-------------------------------------------

The following error is returned if you run ``$search`` queries when 
the |fts| ``mongot`` process isn't installed or running:

.. code-block:: shell 
   :copyable: false 

   MongoError: Remote error from mongot :: caused by :: Error connecting to localhost:28000.

The ``mongot`` process is installed only when the first |fts| index is 
defined. If you don't have any |fts| index in your |service| cluster, 
create at least one |fts| index to resolve this error. 

.. seealso:: 

   - :ref:`ref-index-definitions`
   - :ref:`ref-create-index`
   
.. _troubleshoot-empty-results:

Empty Result Set 
----------------

``mongot`` doesn't return any errors, but returns an empty result set if
your :pipeline:`$search` query:

- References an index that doesn't exist. If you don't specify an index
  by name in the query, |fts| defaults to an index named ``default``. If
  you don't have an index named ``default`` or if the index that you
  specified doesn't exist, |fts| doesn't return an error and returns an
  empty result set. You can specify a valid index by its name using the
  ``index`` option. To learn more, see |fts| :ref:`aggregation pipeline
  stage options <query-syntax-ref>`.
- Specifies a non-indexed field. If you run a query against a field that
  isn't indexed, |fts| doesn't return an error and returns an empty
  result set. You must specify only indexed fields as values for the 
  ``path`` parameter. You can enable :ref:`dynamic mapping
  <static-dynamic-mappings>` in your index definition for the collection
  to ensure that all the :ref:`dynamically indexable fields
  <bson-data-chart>` in the collection are automatically indexed. To
  learn more, see :ref:`dynamic mapping <static-dynamic-mappings>`.
- Uses the ``text`` operator on a field path which is not indexed as a 
  ``string`` type. If a field is indexed as an |fts| field type other than 
  ``string``, such as ``stringFacet`` or ``autocomplete``, |fts| doesn't 
  return an error and returns an empty result set. You *must* index the 
  fields with ``string`` |bson| data type values as 
  :ref:`string <bson-data-types-string>` type to query the fields using 
  the :ref:`text <text-ref>` operator.

``PlanExecutor`` Error
----------------------

``mongot`` returns a ``PlanExecutor`` error if your :pipeline:`$search` query:

- Specifies a field that is indexed as an incorrect data type. In this
  case, if you run a query, |fts| returns an error message identifying the 
  field that was indexed incorrectly and its correct data type. For 
  example:

  .. code-block:: shell
     :copyable: false

     PlanExecutor error during aggregation :: caused by :: Cannot facet on field "genres" because 
     it was not indexed as a "stringFacet" field.

  For example, to run :ref:`fts-facet-ref` queries
  against ``string``, ``number``, or ``date`` fields, create an index
  for the fields using the corresponding |fts| field type such as
  ``stringFacet``, ``numberFacet``, and ``dateFacet`` respectively. To 
  learn more, see :ref:`Supported and Unsupported Data Types <bson-data-chart>`. 

``Failed to Execute search Command`` Error 
------------------------------------------

If you deployed ``mongot`` to run alongside ``mongod`` (i.e. didn't
configure :ref:`configure-search-nodes`), ``mongot`` might return this
error if the ``mongot`` process terminates, such as during any of the
following events:  

- {+Cluster+} upscale
- Node failover
- ``mongot`` upgrade

If you deployed ``mongot`` on a dedicated search node, ``mongod`` uses a
proxy that is aware of each search node and therefore, ``mongod`` routes
search queries to only healthy nodes where the ``mongot`` is active.  
