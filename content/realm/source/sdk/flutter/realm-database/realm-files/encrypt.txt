.. meta::
   :robots: noindex, nosnippet

.. _flutter-encrypt:

=============================
Encrypt a Realm - Flutter SDK
=============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can encrypt your realms to ensure that the data stored to disk can't be
read outside of your application. You encrypt the realm on
disk with AES-256 + SHA-2 by supplying a 64-byte encryption key when
:ref:`opening a realm <flutter-open-realm>`.

Realm transparently encrypts and decrypts data with standard
:wikipedia:`AES-256 encryption <Advanced_Encryption_Standard>` using the
first 256 bits of the given 512-bit encryption key. Realm
uses the other 256 bits of the 512-bit encryption key to validate
integrity using a :wikipedia:`hash-based message authentication code
(HMAC) <HMAC>`.

.. include:: /includes/encrypt-use-strong-cryptographic-hash.rst

.. note:: Encrypt a Realm on Open or Copy Unencrypted Realm

    You must encrypt a realm the first time you open it. 
    If you try to open an existing unencrypted realm using a configuration
    that contains an encryption key, Realm throws an error.

    Alternatively, you can copy the unencrypted realm data to a new 
    encrypted realm using the 
    :flutter-sdk:`Realm.writeCopy() <realm/Realm/writeCopy.html>` method.
    Refer to :ref:`<flutter-copy-data-into-new-realm>` for more information.

Considerations
--------------

The following are key impacts to consider when encrypting a realm.

Storing & Reusing Keys
~~~~~~~~~~~~~~~~~~~~~~

You **must** pass the same encryption key in the realm's 
:flutter-sdk:`Configuration.encryptionKey <realm/Configuration/encryptionKey.html>` 
property every time you open the realm. The key must be a 64-byte ``List<int>``.
To create a key that meets this specification, the List must contain exactly 64 integers
and all integers must be between 0 and 255.

If you don't provide a key or specify the wrong key for an encrypted
realm, the Realm SDK throws an error.

Apps should store the encryption key securely, typically in the target
platform's secure key/value storage, so that other apps cannot read the key.

Performance Impact
~~~~~~~~~~~~~~~~~~

Reads and writes on encrypted realms can be up to 10% slower than unencrypted realms.

Encryption and Atlas Device Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can encrypt a :ref:`synced realm <flutter-sync>`.

.. include:: /includes/encrypt-atlas-device-sync.rst

If you need unique keys for each user of your application, you can use an OAuth provider or
use one of the :ref:`Realm authentication providers <users-and-authentication>` 
and an :ref:`authentication trigger<authentication-triggers>`
to create a 64-bit key and store that key in a :ref:`user object <user-objects>`.

Accessing an Encrypted Realm from Multiple Processes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionchanged:: 1.1.0

Starting with Realm Flutter SDK version 1.1.0, Realm supports opening
the same encrypted realm in multiple processes. 

If your app uses Realm Flutter SDK version 1.1.0 or earlier, attempting to 
open an encrypted realm from multiple processes throws this error:
``Encrypted interprocess sharing is currently unsupported.``

Example
-------

The following code demonstrates how to generate an encryption key and
open an encrypted realm:

.. literalinclude:: /examples/generated/flutter/encrypt_test.snippet.encrypt-realm.dart
   :language: dart
