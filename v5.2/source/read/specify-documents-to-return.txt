.. _java-rs-specify-documents-to-return:

===========================
Specify Documents to Return
===========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: read, paginate, pagination, order, code example

Overview
--------

In this guide, you can learn how to specify which documents to return from a read
operation by using the following methods:

- ``limit()``: Specifies the maximum number of documents to return from a query
- ``sort()``: Specifies the sort order for the returned documents
- ``skip()``: Specifies the number of documents to skip before returning query results

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``sample_restaurants.restaurants`` collection
from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
free MongoDB Atlas cluster and load the sample datasets, see
:ref:`<java-rs-getting-started>`.

.. include:: includes/reactor-note.rst

Limit
-----

To specify the maximum number of documents returned from a read operation,
chain the ``limit()`` method to a ``find()`` method and pass the number
of documents you want to return.

The following example finds all restaurants that have a ``cuisine`` field value
of ``"Italian"``, and limits the results to ``5`` documents:

.. io-code-block::

   .. input:: /includes/specify-documents-to-return.java
      :start-after: start-limit-method
      :end-before: end-limit-method
      :language: java

   .. output::

      Isle Of Capri Resturant Italian
      Arturo'S Italian
      Patsy'S Italian Restaurant Italian
      Piccola Venezia Italian
      Roadhouse Restaurant Italian

.. tip::

   The preceding example returns the first five documents returned by the query, in
   :manual:`natural order </reference/glossary/#std-term-natural-order>`. The following
   section describes how to return the documents in a specified sort order.

.. _java-rs-sort:

Sort
----

To return documents in a specified order, chain the ``sort()`` method to the
``find()`` method. The ``sort()`` method takes the sort direction
method as a parameter. To specify the sort direction, pass either the ``ascending()`` or ``descending()``
method to the ``sort()`` method. Then, pass the field value you want to sort by.
The ``ascending()`` method sorts values from lowest to highest, and
the ``descending()`` method sorts them from highest to lowest. If you don't specify either
direction, the ``sort`` method returns the results in ascending order.

The following example returns all documents with the ``cuisine`` value of
``"Italian"``, sorted by the ``name`` field in ascending order:

.. io-code-block::

   .. input:: /includes/specify-documents-to-return.java
      :start-after: start-sort-method
      :end-before: end-sort-method
      :language: java

   .. output::

      (Lewis Drug Store) Locanda Vini E Olii
      101 Restaurant And Bar
      44 Sw Ristorante & Bar
      900 Park
      A Voce
      ...
      Zucchero E Pomodori

Skip
----

To skip a specified number of documents before returning your query results,
chain the ``skip()`` method to the ``find()`` method and pass the number of documents to skip. The
``skip()`` method ignores the specified number of documents in your query
results and returns the rest.

The following example returns all documents that have a ``borough`` field value
of ``"Manhattan"``, and skips the first ``10`` documents:

.. io-code-block::

   .. input:: /includes/specify-documents-to-return.java
      :start-after: start-skip
      :end-before: end-skip
      :language: java

   .. output::

      Cafe Metro
      Lexler Deli
      Domino'S Pizza
      ...

Combine Limit, Sort, and Skip
-----------------------------

You can combine the ``limit()``, ``sort()``, and ``skip()`` methods in a single
operation by chaining them together. This allows you to set a maximum number of sorted documents to
return, skipping a specified number of documents before returning.

The following example returns ``5`` documents that have a ``cuisine`` value of
``"Italian"``. The results are sorted in ascending order by ``name`` field value,
skipping the first ``10`` documents.

.. io-code-block::

   .. input:: /includes/specify-documents-to-return.java
      :start-after: start-limit-sort-skip
      :end-before: end-limit-sort-skip
      :language: java

   .. output::
      
      Acqua
      Acqua Restaurant
      Acqua Santa
      Acquista Trattoria
      Acquolina Catering

.. note::

   The order in which you call these methods doesn't change the documents
   that are returned. The driver automatically reorders the calls to perform the
   sort and skip operations first, and the limit operation afterward.

Additional Information
----------------------

For more information about specifying a query, see the
:ref:`java-rs-specify-query` guide.

For more information about retrieving documents, see the :ref:`java-rs-retrieve`
guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `FindPublisher <{+api+}/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/FindPublisher.html>`__
- `find() <{+api+}/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/MongoCollection.html#find()>`__
- `limit() <{+api+}/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/FindPublisher.html#limit(int)>`__
- `sort() <{+api+}/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/FindPublisher.html#sort(org.bson.conversions.Bson)>`__
- `skip() <{+api+}/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/FindPublisher.html#skip(int)>`__