========================================================
Storing Updates and Profiles for Social Networking Sites
========================================================

.. default-domain:: mongodb

Overview
--------

This document outlines the basic patterns and principles for using
MongoDB as a persistent storage engine for a social networking
website. In particular, this case study focuses on the task of storing
and displaying user updates.

Problem
~~~~~~~

You want to create an social network where users can create profiles
with personal or professional information. Then, users will be able to
create posts and updates, of various types, that the "walls" or news
feeds of their friends.

Solution
~~~~~~~~

This document assumes that relationships between users in the social
network are a *directed* social graph where users can choose whether
or not to follow another user who follows them. Additionally, the user
may group the people they follow into "circles" to selectively limit
the distribution of their information and help them control their
privacy.

The solution below attempts to minimize the number of documents that
the application must load to display any given page, even at the
expense of complicating update operations.

The type of data that you will store and host depends on the type of
community and site you're building. These decisions are largely beyond
the scope of this document. However, consider the following questions
in light of the following issues:

**What data will you include in a user profile?**
    For a non-professional community and site, this may include age,
    interests, relationship status, etc. or more resume-like data for
    more "business-oriented" communities/networks.

**What type of updates will you allow?**
    The kinds of content that users can submit and include also
    depends on the kind of community and social networking site you're
    building. You may want to allow users to post status updates,
    photos, links, location check-ins, and polls, or you may wish to
    restrict your users to just links and status updates.

Schema
~~~~~~

To model the data for the social networking site, you will use two
main "independent" collections and three "dependent" collections to
store user profile data and posts.

Independent Collections
```````````````````````

The first collection, ``social.user``, stores the social graph
information for a given user along with the user's profile data. It
uses a schema in the following form:

.. code-block:: javascript

   {
     _id: 'T4Y...AC', // base64-encoded ObjectId
     name: 'Rick',
     profile: { ... age, location, interests, etc. ... },
     followers: {
       "T4Y...AD": { name: 'Jared', circles: [ 'python', 'authors'] },
       "T4Y...AF": { name: 'Bernie', circles: [ 'python' ] },
       "T4Y...AI": { name: 'Meghan', circles: [ 'python', 'speakers' ] },
       ...
     ],
     circles: {
       "10gen": {
         "T4Y...AD": { name: 'Jared' },
         "T4Y...AE": { name: 'Max' },
         "T4Y...AF": { name: 'Bernie' },
         "T4Y...AH": { name: 'Paul' },
         ... },
       ...}
     },
     blocked: ['gh1...0d']
   }

Consider the following features of this schema:

- Rather than using a "raw" ``ObjectId`` for your ``_id`` field,
  you'll use a base64-encoded version. This allows you to use ``_id``
  values as keys in subdocuments, which both reduces the memory
  footprint of these subdocuments as well as speeding up some
  operations.

- The schema represents the social graph bidirectionally in the
  ``followers`` and ``circles`` sub-documents. While this is
  redundant, representing the connection in both directions makes it
  easier to display the user's followers on the profile page and helps
  in propagating posts to other users, as shown below.

- In addition to the normal "positive" social graph, this schema also
  stores a ""block list" that contains an array of user ids for
  posters whose posts a user has prohibited from appearing on *their*
  wall or news feed.

- The schema stores all of the user's profile data in the ``profile``
  sub-document, so that you may iterate the schema can evolve as
  necessary without affecting other fields.

..  storing followers in a list would not work well at all in case like twitter, it would grow way too large.
    should only store people that user is following, and index that to get follower list of a user.
    Also could use a mapping table for further flexibility in relationship.

Posts, of various types, reside in the ``social.post`` collection:

.. code-block:: javascript

   {
      _id: ObjectId(...),
      by: { id: "T4Y...AE", name: 'Max' },
      circles: [ '*public*' ],
      type: 'status',
      ts: ISODateTime(...),
      detail: {
         text: 'Loving MongoDB' },
      comments: [
         { by: { id:"T4Y...AG", name: 'Dwight' },
           ts: ISODateTime(...),
           text: 'Right on!' },
           ... all comments listed ... ]
   }

The ``by`` field holds minimal required author information, while the
``type`` field stores the post type and the ``detail`` array contains
specific information for the type. The ``ts`` field stores the
post's. ``comments`` stores an array of documents with comments that
embeds all comments on a post as a time-sorted flat array. For a more
in-depth exploration of the other approaches to storing comments,
please see the :doc:`/use-cases/storing-comments` document.

This schema includes the following considerations: 

- Truncate all author information and store enough data in each ``by``
  property to render the author name and a link to the author's
  profile. If users want more detail on a particular author, the
  application can fetch this information separately. Storing only
  minimally required information helps keep the document small and
  makes most operations fast.

- Control post visibility with the ``circles`` property: any user that
  is part of a circle listed in the array can view the post. Special
  values like ``"\*public*"`` and ``"\*circles*"`` allow the user to
  share a post with the whole world or with any users in any of the
  posting user's circles, respectively.

- Different types of posts may contain different types of data in the
  ``detail`` field. Isolating the subset of fields that can change
  into a sub-document is good practice, and here you would store the
  data for a photo post differently from the data for a status
  update. All the metadata, e.g. ``_id``, ``by``, ``circles``,
  ``type``, ``ts``, and ``comments``, remain the same.

Dependent Collections
`````````````````````

To optimize rendering content for display, this application design
includes three "dependent" collections in addition to two
"independent" collections. The first dependent collection,
``social.wall``, provides a cache for displaying a "wall" or feed that
contains posts created by or directed to a particular user. The schema
for the documents in the ``social.wall`` collection is: 

.. code-block:: javascript

   {
      _id: ObjectId(...),
      user_id: "T4Y...AE",
      month: '201204',
      posts: [
         { id: ObjectId(...),
           ts: ISODateTime(...),
           by: { id: "T4Y...AE", name: 'Max' },
           circles: [ '*public*' ],
           type: 'status',
           detail: { text: 'Loving MongoDB' },
           comments_shown: 3,
           comments: [
             { by: { id: "T4Y...AG", name: 'Dwight',
               ts: ISODateTime(...),
               text: 'Right on!' },
             ... only last 3 comments listed ...
               ]
         },
         { id: ObjectId(...),s
           ts: ISODateTime(...),
           by: { id: "T4Y...AE", name: 'Max' },
           circles: [ '*circles*' ],
           type: 'checkin',
           detail: {
             text: 'Great office!',
             geo: [ 40.724348,-73.997308 ],
             name: '10gen Office',
             photo: 'http://....' },
           comments_shown: 1,
           comments: [
             { by: { id: "T4Y...AD", name: 'Jared' },
               ts: ISODateTime(...),
               text: 'Wrong coast!' },
             ... only last 1 comment listed ...
               ]
         },
         { id: ObjectId(...),
           ts: ISODateTime(...),
           by: { id: "T4Y...g9", name: 'Rick' },
           circles: [ '10gen' ],
           type: 'status',
           detail: {
             text: 'So when do you crush Oracle?' },
           comments_shown: 2,
           comments: [
             { by: { id: "T4Y...AE", name: 'Max' },
               ts: ISODateTime(...),
               text: 'Soon... ;-)' },
             ... only last 2 comments listed ...
               ]
         },
         ...
      ]
   }

Consider the following features of this schema: 

- Each post contains a limited number of comments (i.e. 3 or 4.)
  Limiting the number of comments minimizes the size of the document.
  To display more comments on a post, your application can query the
  ``social.post`` collection for full details.

- The ``social.wall`` collection would contain one document per month
  per ``social.user`` document. Then, the system can keep a "page" of
  recent posts in the initial page view, and can fetch additional
  views as needed.

- Once again, the ``by`` sub-document stores only the minimum amount
  of information required for display. This helps keep the document
  small.

- The ``comments_shown`` field stores the number of comments. This
  allows updates in the future to identify posts with more than a
  certain number of comments because the :operator:`$size` query
  operator does not allow inequality comparisons.

..  not sure this collection is useful, instead just use the post collection.
    Posts should have an index on {user, time} and hence it is efficient to retrieve the wall.
    Also wall may be scrolled down to get further items.
    Don't think it's worth updating this document every time a user posts.

The second dependent collection is is ``social.news``, which collects
posts from people the user follows. These documents duplicate
information from the documents in the ``social.wall`` collection:

.. code-block:: javascript

   {
      _id: ObjectId(...),
      user_id: "T4Y...AE",
      month: '201204',
      posts: [ ... ]
   }

..  This is probably too expensive.
    If someone is followed by 1000+ people, that's a lot of documents to write to.
    Instead system should use a $in query with people that user is following, sorted by time, with a limit.
    This query is actually slow today but got improved a lot in 2.2 and there are good workarounds with 2.0.

Operations
----------

The data model presented above optimizes for read performance at the
possible expense of write performance. As a result, you should ideally
provide a queueing system for processing updates which may take longer
than your desired web request latency.

The examples that follow use the Python programming language and the
:api:`PyMongo <python/current>` :term:`driver` for MongoDB, but you
could easily implement this using any language of your choose.

Viewing a News Feed or Wall Posts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Querying
````````

The most common operations on this site are probably displaying a
particular user's news feed and displaying a user's wall posts. Since
the ``social.news`` and ``social.wall`` collections optimize for these
operations, the query can be quite simple. Since these two collections
share a schema, viewing the posts for a news feed or a wall are
similar operations and can use the same code:

.. code-block:: python

   def get_posts(collection, user_id, month=None):
       spec = { 'user_id': viewed_user_id }
       if month is not None:
           spec['month'] = {'$lte': month}
       cur = collection.find(spec)
       cur = cur.sort('month', -1)
       for page in cur:
           for post in reversed(page['posts']):
               yield page['month'], post

The function ``get_posts`` above retrieves all the posts on a
particular user's wall or news feed in reverse-chronological
order. This requires special handling to achieve the
reverse-chronological ordering efficiently:

- The data model sorts ``posts`` within a month in chronological
  order, so your application must reverse the order of these posts 
  must before displaying them.

- As a users pages through their walls, you want your application to
  be able to avoid fetching the most recent few months from the server
  for every request. Th code specifies the first month to fetch in the
  ``month`` argument, passing this in as an :operator:`$lte`
  expression in the query.

- The generator yields the post's month for use in subsequent calls to
  ``get_posts`` in addition to yielding the post itself.

Also consider privacy configuration when selecting posts for
display. To handle privacy issues, your application will need filter
functions to process the posts generated by ``get_posts``. The first
filter determines if a user can view a given post on their wall:

.. code-block:: python

   def visible_on_own_wall(user, post):
       '''if poster is followed by user, post is visible'''
       for circle, users in user['circles'].items():
           if post['by']['id'] in users: return True
       return False

You might also want your application to provide an "incoming" page
that contains all posts directed to a user even if the user doesn't
follow the poster, unless the user blocks the poster. See the
following filter:

.. code-block:: python

   def visible_on_own_incoming(user, post):
       '''if poster is not blocked by user, post is visible'''
       return post['by']['id'] not in user['blocked']

When viewing a news feed or another user's wall, use the following
operation to check permissions using the value of the post's
``circles`` field:

.. code-block:: python

   def visible_post(user, post):
       if post['circles'] == ['*public*']:
           # public posts always visible
           return True
       circles_user_is_in = set(
           user['followers'].get(post['by']['id'] []))
       if not circles_user_is_in:
           # user is not circled by poster; post is invisible
           return False
       if post['circles'] == ['*circles*']:
           # post is public to all followed users; post is visible
           return True
       for circle in post['circles']:
           if circle in circles_user_is_in:
               # User is in a circle receiving this post
               return True
       return False

Indexing
````````

To support quick retrieval of pages, you'll need an index on
(``user_id``, ``month``) in both the ``social.news`` and
``social.wall`` collections. Use the following operation at the
Python/PyMongo shell.

.. code-block:: pycon

   >>> for collection in (db.social.news, db.social.wall):
   ...     collection.ensure_index([
   ...         ('user_id', 1),
   ...         ('month', -1)])

Commenting on a Post
~~~~~~~~~~~~~~~~~~~~

Updating
````````

In addition to viewing walls and news feeds, the next most common
activity is creating new posts is the next most
common action taken on social networks. To create a comment by ``user`` on a
given ``post`` containing the given ``text``, you'll need to execute code similar
to the following:

.. code-block:: python

   from datetime import datetime

   def comment(user, post_id, text):
       ts = datetime.utcnow()
       month = ts.strfime('%Y%m')
       comment = {
           'by': { 'id': user['id'], 'name': user['name'] }
           'ts': ts,
           'text': text }
       # Update the social.posts collection
       db.social.post.update(
           { '_id': post_id },
           { '$push': { 'comments': comment } } )
       # Update social.wall and social.news collections
       db.social.wall.update(
           { 'posts.id': post_id },
           { '$push': { 'comments': comment },
             '$inc': { 'comments_shown': 1 } },
           upsert=True,
           multi=True)
       db.social.news.update(
           { 'posts.id': _id },
           { '$push': { 'comments': comment },
             '$inc': { 'comments_shown': 1 } },
           upsert=True,
           multi=True)

.. note::

   The presence of a couple of ``multi=True`` update statements means
   that this operation can potentially take a long time. This feature
   makes this function a good candidate for processing 'out of band'
   with the regular request-response flow of your application.

This function can result in unbounded document growth of the
``social.wall`` and ``social.news`` collections, because there is no
limits on the number of comments. To compensate, run the following
update statement periodically. This will truncate the number of
displayed comments and control the size of these documents:

.. code-block:: python

   COMMENTS_SHOWN = 3

   def truncate_extra_comments():
       db.social.news.update(
           { 'posts.comments_shown': { '$gt': COMMENTS_SHOWN } },
           { '$pop': { 'posts.$.comments': -1 },
             '$inc': { 'posts.$.comments_shown': -1 } },
           multi=True)
       db.social.wall.update(
           { 'posts.comments_shown': { '$gt': COMMENTS_SHOWN } },
           { '$pop': { 'posts.$.comments': -1 },
             '$inc': { 'posts.$.comments_shown': -1 } },
           multi=True)

Indexing
````````

To support updates to the ``social.news`` and ``social.wall``
collections, you'll need to be able to locate both of the following
types of documents:

- Documents containing a given post

- Documents containing posts displaying too many comments

This requires indexes on ``posts.id`` and ``posts.comments_shown``
fields in both collections. Create these indexes with the following
form:

.. code-block:: pycon

   >>> for collection in (db.social.news, db.social.wall):
   ...     collection.ensure_index('posts.id')
   ...     collection.ensure_index('posts.comments_shown')

Creating a New Post
~~~~~~~~~~~~~~~~~~~

Inserting
`````````

Use the following operation to create a post and insert content in all
required collections:

.. code-block:: python

   from datetime import datetime

   def post(user, dest_user, type, detail, circles):
       ts = datetime.utcnow()
       month = ts.strfime('%Y%m')
       post = {
           'ts': ts,
           'by': { id: user['id'], name: user['name'] },
           'circles': circles,
           'type': type,
           'detail': detail,
           'comments': [] }
       # Update global post collection
       db.social.post.insert(post)
       # Copy to dest user's wall
       if user['id'] not in dest_user['blocked']:
           append_post(db.social.wall, [dest_user['id']], month, post)
       # Copy to followers' news feeds
       if circles == ['*public*']:
           dest_userids = set(user['followers'].keys())
       else:
           dest_userids = set()
           if circles == [ '*circles*' ]:
               circles = user['circles'].keys()
           for circle in circles:
               dest_userids.update(user['circles'][circle])
       append_post(db.social.news, dest_userids, month, post)

The basic sequence of operations in the code above is the following:

#. The post first saved into the "system of record," the ``social.post``
   collection.

#. The recipient's wall is updated with the post.

#. Updates news feeds of everyone who is "circled" in the post.

Updating
````````

Use the ``append_post`` function to update a particular wall or group
of news feeds:

.. code-block:: python

   def append_post(collection, dest_userids, month, post):
       collection.update(
           { 'user_id': { '$in': sorted(dest_userids) },
             'month': month },
           { '$push': { 'posts': post } },
           multi=True)

Indexing
````````

To update the ``social.wall`` and ``social.news`` collections
efficiently, you will need an index on both ``user_id`` and
``month``. For these operations (``month``, ``user_id``) is the
optimal order of keys in the index. *However*, because your
collections have an index on (``user_id``, ``month``), which *must* be
in that order to support the sort on ``month``, adding a second index
is unnecessary.

Maintaining the Social Graph
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Updating
````````

While maintaining the social graph is a relatively infrequent
operation, it is absolutely essential. Use the following function to
add a user, ``other``, to the current user's, ``self``, circles:

.. code-block:: python

   def circle_user(self, other, circle):
       circles_path = 'circles.%s.%s' % (circle, other['_id'])
       db.social.user.update(
           { '_id': self['_id'] },
           { '$set': { circles_path: { 'name': other['name' ]} } })
       follower_circles = 'followers.%s.circles' % self['_id']
       follower_name = 'followers.%s.name' % self['_id']
       db.social.user.update(
           { '_id': other['_id'] },
           { '$push': { follower_circles: circle },
             '$set': { follower_name: self['name'] } })

.. note::

   This does not add earlier posts by ``other`` to the ``self`` user's
   news feed or wall. To include these past posts is an expensive and
   complex operation beyond the scope of this use case.

Removing
````````

The following function provides support for *removing* users from a
circle:

.. code-block:: python

   def uncircle_user(self, other, circle):
       circles_path = 'circles.%s.%s' % (circle, other['_id'])
       db.social.user.update(
           { '_id': self['_id'] },
           { '$unset': { circles_path: 1 } })
       follower_circles = 'followers.%s.circles' % self['_id']
       db.social.user.update(
           { '_id': other['_id'] },
           { '$pull': { follower_circles: circle } })
       # Special case -- 'other' is completely uncircled
       db.social.user.update(
           { '_id': other['_id'], follower_circles: {'$size': 0 } },
           { '$unset': { 'followers.' + self['_id' } }})

Indexing
````````

Because the update queries both include the ``_id`` field, these
operations require no additional indexes.

Sharding
--------

In order to scale beyond the capacity of a single replica set, you may
eventually need to shard the collections described here. Since the
``social.user``, ``social.wall``, and ``social.news`` collections
contain documents which are specific to a given user, the user's
``_id`` field is an appropriate shard key:

.. code-block:: pycon

   >>> db.command('shardcollection', 'social.user', {
   ...     'key': {'_id': 1 } } )
   { "collectionsharded": "social.user", "ok": 1 }
   >>> db.command('shardcollection', 'social.wall', {
   ...     'key': {'user_id': 1 } } )
   { "collectionsharded": "social.wall", "ok": 1 }
   >>> db.command('shardcollection', 'social.news', {
   ...     'key': {'user_id': 1 } } )
   { "collectionsharded": "social.news", "ok": 1 }

The posting user's ``_id`` is *not* the best choice for a shard key
for the ``social.post`` collection because queries and updates to this
table use the ``_id`` field. To shard the ``social.post`` collection
on ``_id``, then, you'll need to execute the following command:

   >>> db.command('shardcollection', 'social.post', {
   ...     'key': {'_id': 1 } } )
   { "collectionsharded": "social.post", "ok": 1 }

.. seealso::

   ":doc:`/faq/sharding`" and the ":wiki:`Sharding` wiki
   page.
