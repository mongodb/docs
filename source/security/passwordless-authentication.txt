.. _set-up-pwdless-auth:

===============================================
Set Up Passwordless Authentication with AWS IAM
===============================================

.. default-domain:: mongodb

.. meta::
   :keywords: passwordless auth, passwordless, saml, federated identity management, iam roles

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can set up passwordless authentication for your |aws| |iam| users
in the following ways:

- Configure |aws| |iam| roles to make username or password fields
  optional. In this scenario, each user presents the secret key for
  authentication. The user does not send the secret key over the wire to
  |service| and the driver does not persist it. To learn more, see
  :ref:`passwordless-auth-aws-no-saml`.
- Use temporary credentials obtained with the
  `AssumeRoleWithSAML API operation
  <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithSAML.html>`__.
  In this scenario, you must integrate with an |sso| provider, and have
  an |iam| role that specifies your SAML |idp| provider in its trust
  policy. To learn more, see :ref:`passwordless-auth-aws-saml`.

.. _passwordless-auth-aws-no-saml:

Set Up Passwordless Authentication with AWS IAM Roles
-----------------------------------------------------

You can set up a database user to use an |aws| |iam| user ARN for 
authentication. You can connect to your database using {+mongosh+}
and drivers and authenticate using your |aws| |iam| user ARN.
Using |aws| |iam| role reduces the number of authentication mechanisms 
and number of secrets to manage. You can configure |aws| |iam| to not 
require a username or password to authenticate, thus making it a 
passwordless mechanism. The secret key that you use instead for 
authentication is not sent over the wire to |service| and is not 
persisted by the driver, thus making |aws| |iam| suitable for even the 
most sensitive situations.

For |aws| Lambda and HTTP (ECS and EC2), drivers automatically read 
from the `environment variables <https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst#obtaining-credentials>`__. 
For |aws| EKS, you must manually assign the |iam| role. This page 
describes how |aws| Lambda, |aws| :abbr:`ECS (Elastic Container 
Service)`, and |aws| :abbr:`EKS (Elastic Kubernetes Service)` can 
connect using an |aws| |iam| role.

.. note::

   You must assign an |iam| role to Lambda, EC2, ECS, or EKS in the 
   |aws| console.

.. _aws-lambda:

|aws| Lambda 
~~~~~~~~~~~~

|aws| Lambda passes information to functions through the following 
environment variables if you `assign an execution role <https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html>`__ 
to the lambda function: 

- ``AWS_ACCESS_KEY_ID``
- ``AWS_SECRET_ACCESS_KEY``
- ``AWS_SESSION_TOKEN``

To learn more about these environment variables, see `Using AWS Lambda 
environment variables <https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html>`__.

.. _aws-ecs:

|aws| ECS 
~~~~~~~~~

|aws| :abbr:`ECS (Elastic Container Service)` gets the credentials from 
the following URI: 

.. code-block:: shell 
   :copyable: false 

   http://169.254.170.2 + AWS_CONTAINER_CREDENTIALS_RELATIVE_URI

``AWS_CONTAINER_CREDENTIALS_RELATIVE_URI`` is an environment variable. 
To learn more, see `IAM Roles for Tasks <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html>`__.

|aws| EC2 gets the credentials from Instance Metadata Service V2 at the 
following |url|: 

.. code-block:: shell 
   :copyable: false

   http://169.254.169.254/latest/meta-data/iam/security-credentials/

To learn more, see `Launch an instance with an IAM role <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html#attach-iam-role>`__.

.. _atlas-pwless-auth-fargate:

|aws| ECS Fargate
~~~~~~~~~~~~~~~~~

To learn how to configure an AWS IAM role for passwordless authentication with 
|aws| ECS Fargate, see the :aws:`AWS documentation 
</AmazonECS/latest/developerguide/task_execution_IAM_role.html>`.

.. _aws-eks:

|aws| EKS 
~~~~~~~~~

For |aws| :abbr:`EKS (Elastic Kubernetes Service)`, you must first
assign the |iam| role to your pod to set up the following environment 
variables in that pod:

- ``AWS_WEB_IDENTITY_TOKEN_FILE`` - contains the path to the web 
  identity token file.
- ``AWS_ROLE_ARN`` - contains the |iam| role that you want to use to
  connect to your database deployment.

For information on assigning an |iam| role to your pod, see the 
:aws:`AWS documentation
</eks/latest/userguide/specify-service-account-role.html>`.

After you assign the |iam| role to your pod, you must manually
assume the |iam| role to connect to your database deployment.

To assume the role manually: 

1. Use the |aws| `SDK <https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/modules/_aws_sdk_credential_provider_web_identity.html#fromtokenfile>`__ 
   to call `AssumeRoleWithWebIdentity <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html>`__.

   .. tip::

      - Omit the ``ProviderID`` parameter.
      - Find the value of the ``WebIdentityToken`` parameter in the file
        described in your pod's ``AWS_WEB_IDENTITY_TOKEN_FILE`` 
        environment variable.

#. Pass the credentials that you received in the previous step to the
   MongoDB driver. See your :driver:`driver's documentation </>` for 
   details.

.. seealso:: 

   `IAM roles for service accounts <https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html>`__

.. _passwordless-auth-aws-saml:

Set Up Passwordless Authentication Using SAML
---------------------------------------------

If you integrate your |aws| |iam| users with an |idp| that relies on SAML
authentication, you can use your enterprise's corporate |sso| provider
to:

- Access |service|.
- Establish passwordless authentication for your MongoDB database user
  to connect to |service|. {+mongosh+} and MongoDB drivers may then use
  this database user to connect to |service|.

For this MongoDB database user, you can use temporary security
credentials that you obtain with
the `AssumeRoleWithSAML API operation
<https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithSAML.html>`__.

In this scenario, you must already have:

- A SAML |sso| provider configured.
- An existing |idp| role that specifies your SAML |idp| provider in its
  trust policy.

The following steps show how to set up passwordless authentication for a
MongoDB database user. To learn more, use the links for each stage in the
workflow.

To set up passwordless authentication for your MongoDB database user when
your enterprise uses an |sso| provider with SAML and integrates with
|aws| |iam|:


1. `Create a role to delegate permissions to an IAM user
   <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html>`__.
   
#. `Request temporary security credentials from the delegated role
   <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html>`__.
   The |aws| Security Token Service creates temporary security credentials
   when you call the `AssumeRoleWithSAML API operation
   <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithSAML.html>`__.

#. Use your temporary API key, access key, and token to authenticate with
   |service| {+database-deployments+}.

