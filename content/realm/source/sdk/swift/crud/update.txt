.. meta::
   :robots: noindex, nosnippet

.. _swift-crud-update:
.. _ios-modify-an-object:

=========================
CRUD - Update - Swift SDK
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Update Realm Objects
--------------------

Updates to Realm Objects must occur within write transactions. For
more information about write transactions, see: :ref:`Transactions <ios-write-transactions>`.

About The Examples On This Page
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The examples on this page use the following models:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift
      
      .. literalinclude:: /examples/generated/code/start/UpdateRealmObjects.snippet.models.swift
         :language: swift

   .. tab::
      :tabid: objective-c
      
      .. literalinclude:: /examples/generated/code/start/ReadWriteData.snippet.models.m
         :language: objectivec

Update an Object
~~~~~~~~~~~~~~~~

You can modify properties of a Realm object inside of a write
transaction in the same way that you would update any other Swift or
Objective-C object.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift
      
      .. literalinclude:: /examples/generated/code/start/UpdateRealmObjects.snippet.update.swift
         :language: swift

   .. tab::
      :tabid: objective-c
      
      .. literalinclude:: /examples/generated/code/start/ReadWriteData.snippet.update.m
         :language: objectivec


.. tip:: Update Related and Embedded Objects

   To update a property of an :ref:`embedded object
   <ios-define-an-embedded-object-property>` or a :ref:`related object
   <ios-declare-relationship-properties>`, modify the property with
   dot-notation or bracket-notation as if it were in a regular, nested
   object.

.. _ios-update-with-key-value-coding:

Update Properties with Key-value Coding
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``Object``, ``Result``, and ``List`` all conform to 
:apple:`key-value coding <library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/>`. 
This can be useful when you need to determine which property to update 
at runtime.

Applying KVC to a collection is a great way to update objects in bulk. 
Avoid the overhead of iterating over a collection while creating 
accessors for every item.

.. literalinclude:: /examples/generated/code/start/UpdateRealmObjects.snippet.key-value-coding.swift
   :language: swift

You can also add values for embedded objects or relationships this
way. In this example, we add a collection to an object's list property:

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/DeleteRealmObjects.snippet.batch-update.swift
         :language: swift

   .. tab::
      :tabid: objective-c
      
      .. literalinclude:: /examples/generated/code/start/ReadWriteData.snippet.batch-update.m
         :language: objectivec

.. _ios-upsert-an-object:

Upsert an Object
~~~~~~~~~~~~~~~~

An **upsert** either inserts or updates an object depending on whether
the object already exists. Upserts require the data model to have a
:ref:`primary key <ios-specify-a-primary-key>`.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      To upsert an object, call :swift-sdk:`Realm.add(_:update:)
      <Structs/Realm.html#/s:10RealmSwift0A0V3add_6updateySo0aB6ObjectC_AC12UpdatePolicyOtF>`
      with the second parameter, update policy, set to ``.modified``.

      .. literalinclude:: /examples/generated/code/start/UpdateRealmObjects.snippet.upsert.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To upsert an object, call :objc-sdk:`-[RLMRealm
      addOrUpdateObject:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(im)addOrUpdateObject:>`.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.snippet.upsert.m
         :language: objectivec

You can also partially update an object by passing the primary key and a
subset of the values to update:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/UpdateRealmObjects.snippet.partial-update.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.snippet.partial-update.m
         :language: objectivec

Update a Map/Dictionary
~~~~~~~~~~~~~~~~~~~~~~~

You can update a realm :swift-sdk:`map <Classes/Map.html>` as you would a 
standard :apple:`Dictionary <documentation/swift/dictionary>`:

.. literalinclude:: /examples/generated/code/start/UpdateRealmObjects.snippet.map.swift
   :language: swift

.. _swift-update-mutableset-property:

Update a MutableSet Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can ``insert`` elements into a :swift-sdk:`MutableSet 
<Classes/MutableSet.html>` during write transactions to add them to the 
property. If you are working with multiple sets, you can also insert or 
remove set elements contained in one set from the other set. Alternately, 
you can mutate a set to contain only the common elements from both.

.. literalinclude:: /examples/generated/code/start/UpdateRealmObjects.snippet.set-collections.swift
   :language: swift

.. _swift-update-anyrealmvalue-property:

Update an AnyRealmValue Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can update an AnyRealmValue property through assignment, but you must 
specify the type of the value when you assign it. The Realm Swift SDK 
provides an :swift-sdk:`AnyRealmValue enum <Enums/AnyRealmValue.html>` that 
iterates through all of the types the AnyRealmValue can store.

.. literalinclude:: /examples/generated/code/start/UpdateRealmObjects.snippet.mixed-data-type.swift
   :language: swift

Update an Embedded Object Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To update a property in an embedded object, modify the property in a
write transaction. If the embedded object is null, updating an embedded
object property has no effect.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/UpdateRealmObjects.snippet.update-an-embedded-object-property.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/EmbeddedObjects/UpdateEmbeddedObject.m
         :language: objectivec

Overwrite an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To overwrite an embedded object, reassign the embedded object property
of a party to a new instance in a write transaction.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/UpdateRealmObjects.snippet.overwrite-an-embedded-object.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/EmbeddedObjects/ReplaceEmbeddedObject.m
         :language: objectivec

.. _swift-update-object-async:

Update an Object Asynchronously
-------------------------------

You can use Swift concurrency features to asynchronously update objects 
using an actor-isolated realm. 

This function from the example ``RealmActor`` :ref:`defined on the 
Use Realm with Actors page <swift-define-realm-actor>` shows how you might
update an object in an actor-isolated realm:

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.update-async.swift
   :language: swift

And you might perform this update using Swift's async syntax:

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.update-object.swift
   :language: swift

This operation does not block or perform I/O on the calling thread. For
more information about writing to realm using Swift concurrency features, 
refer to :ref:`swift-actor-isolated-realm`.

Update Properties through Class Projections
-------------------------------------------

.. _ios-make-changes-to-class-projection-properties:

Change Class Projection Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can make changes to a class projection's properties in a write transaction.

.. literalinclude:: /examples/generated/code/start/ClassProjection.snippet.change-class-projection-property-value-in-a-write.swift
   :language: swift
