==================
$mod (aggregation)
==================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :keywords: code example

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $mod

   Divides one number by another and returns the *remainder*.

Syntax
------

The ``$mod`` expression has the following syntax:

.. code-block:: javascript

   { $mod: [ <expression1>, <expression2> ] }

The first argument is the dividend, and the second argument is the
divisor. That is, the first argument is divided by the second 
argument.

Behavior
--------

The arguments can be any valid :ref:`expression
<aggregation-expressions>` as long as they resolve to numbers. For
more information on expressions, see :ref:`aggregation-expressions`.

Starting in version 7.2, the output data type of the ``$mod`` operator is
the larger of the two input data types.

.. note::

   Prior to version 7.2, the value and field type of inputs determine
   the ``$mod`` output type if:
  
   - The divisor is type ``double`` but has an integer value. 
   - The dividend is type ``int`` or ``long``.
  
In this case, MongoDB converts the divisor to the dividend data
type before it performs the mod operation. The output data type
is the dividend data type.

Negative Dividend
~~~~~~~~~~~~~~~~~

.. include:: /includes/negative-dividend.rst

For an example, see :ref:`<mod-negative-dividend-example>`.
      
Example
-------

Consider a ``conferencePlanning`` collection with the following documents:

.. code-block:: javascript

   db.conferencePlanning.insertMany( [
      { "_id" : 1, "city" : "New York", "hours" : 80, "tasks" : 7 },
      { "_id" : 2, "city" : "Singapore", "hours" : 40, "tasks" : 4 }
   ] )

The following aggregation uses the ``$mod`` expression to
return the remainder of the ``hours`` field divided by the ``tasks``
field:

.. code-block:: javascript

   db.conferencePlanning.aggregate( [
     { $project: { remainder: { $mod: [ "$hours", "$tasks" ] } } }
   ] )

The operation returns the following results:

.. code-block:: json
   :copyable: false

   [
     { '_id' : 1, 'remainder' : 3 },
     { '_id' : 2, 'remainder' : 0 }
   ]

.. _mod-negative-dividend-example:

Negative Dividend
~~~~~~~~~~~~~~~~~

Consider a ``modExample`` collection that contains the following 
document:

.. code-block:: javascript

   db.modExample.insertOne( [
      { "_id" : 1, "dividend": -13, "divisor": 9 }
   ] )

This aggregation uses the ``$mod`` expression to return the remainder of
``dividend`` divided by the ``divisor`` field:

.. code-block:: javascript

   db.modExample.aggregate( [
     { $project: { remainder: { $mod: [ "$dividend", "$divisor" ] } } }
   ] )

The operation returns the following results:

.. code-block:: json
   :copyable: false

   [ { '_id' : 1, 'remainder' : -4 } ]

