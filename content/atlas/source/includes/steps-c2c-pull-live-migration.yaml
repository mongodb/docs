title: "Start the migration process."
ref: live-import-begin-migration
level: 4
content: |

  a. Select a destination |service| {+cluster+}.

     Navigate to the destination |service| {+cluster+} and click the ellipsis
     :guilabel:`...` button. On the {+cluster+} list, the ellipsis
     :guilabel:`...` button appears beneath the {+cluster+} name. When
     you view {+cluster+} details, the ellipsis :guilabel:`...` appears
     on the right-hand side of the screen, next to the :guilabel:`Connect`
     and :guilabel:`Configuration` buttons.

  #. Click :guilabel:`Migrate Data to this Cluster`.

     |service| displays a walk-through screen with instructions on
     how to proceed with the live migration. The process syncs the data
     from your source {+cluster+} to the new destination {+cluster+}. After
     you complete the walk-through, you can point your application to the
     new {+cluster+}.

     Collect the following details for your source {+cluster+} to
     facilitate the migration:

     - For replica sets, the hostname and port of the source {+cluster+}
       :manual:`primary </core/replica-set-primary/>`. For example,
       ``mongoPrimary.example.net:27017``. |service| only connects to the
       primary member of the source {+cluster+} by default. To increase
       resiliency and facilitate failover if needed, |service| obtains
       the IP addresses of other source {+cluster+} nodes if these nodes
       have publicly available DNS records.

     - For sharded {+clusters+}, the hostname and port of one
       :binary:`bin.mongos`. For example, ``mongos.example.net:27016``.

       Live migration needs only one ``mongos`` and can use any
       ``mongos`` in the entire source cluster to perform the migration.
       If you attempt to enter all ``mongos`` hostnames, the validation
       fails.

     - The database authentication username and password used to connect
       to the source {+cluster+}. For replica sets, the database user must
       have the :authrole:`readAnyDatabase` and :authrole:`backup` roles.
       For sharded {+clusters+}, the database user must
       have the :authrole:`readAnyDatabase`, :authrole:`backup`, and
       :authrole:`clusterMonitor` roles.

     - If the source {+cluster+} uses ``TLS/SSL`` and isn't using a public
       Certificate Authority (CA), you will need the source {+cluster+}
       :abbr:`CA (Certificate Authority)` file.

  #. Prepare the information as stated in the walk-through screen,
     then click :guilabel:`I'm Ready To Migrate`.
     
     |service| displays a walk-through screen that collects information
     required to connect to the source {+cluster+}.

     - |service| displays the IP address of the MongoDB live migration server
       responsible for your live migration at the top of the walk-through
       screen. Configure your source {+cluster+} firewall to grant access
       to the displayed IP address.

     - For replica sets, enter the hostname and port of the primary member
       of the source {+cluster+} into the provided text box.
       For sharded {+clusters+}, enter the hostname and port of each
       :binary:`bin.mongos`.

     - .. include:: /includes/import/sharding-and-index-config.rst

     - If the source {+cluster+} enforces authentication, enter a username and
       password into the provided text boxes.

       See :ref:`live-import-c2c-security` for guidance on the
       user permissions required by |service| live migration.
     - For replica sets, |service| displays the switch
       :guilabel:`Verify data post-migration (recommended)`. If you enable
       this setting, |service| automatically verifies supported data after the
       migration. If you disable this setting, you must run the full data
       verification manually instead. To learn more, see :ref:`verify-migrations`.

     - If the source {+cluster+} uses ``TLS/SSL`` and isn't using a public
       Certificate Authority (CA), toggle the switch
       :guilabel:`Is encryption in transit enabled?` and copy the contents
       of the source {+cluster+} CA file into the provided text box.

     - If your destination {+cluster+} has any existing data, check the option
       to delete this data: :guilabel:`Clear any existing data on your destination cluster`,
       and then enter the name of the destination {+cluster+}. |service|
       deletes the existing data. If you leave this option unchecked and
       the destination {+cluster+} has any data during the migration
       process, the migration fails and issues a validation error.

  #. Click :guilabel:`Validate` to confirm that |service| can connect to the
     source {+cluster+}.

     If validation fails, check that:

     - You have :ref:`added <live-import-c2c-ip-access-list>` |service|
       to the IP access list on your source {+cluster+}.

     - The provided user credentials, if any, exist on the source {+cluster+}
       and have the required permissions.

     - The :guilabel:`Is encryption in transit enabled?` toggle is enabled
       only if the source {+cluster+} requires it.

     - The CA file provided, if any, is valid and correct.

  #. Click :guilabel:`Start Migration` to start the migration process.

     Once the migration process begins, |service| UI displays the
     :guilabel:`Migrating Data` walk-through screen for the destination
     |service| {+cluster+}. The walk-through screen updates as the
     destination {+cluster+} proceeds through the migration process.
     The migration process includes:

     - Applying new writes to the source {+cluster+} data to the destination
       {+cluster+} data.
     - Copying data from the source {+cluster+} to the destination {+cluster+}.
     - Finalizing the migration on the destination {+cluster+}.
     - Running the verification process, if you enabled it. If you started
       the migration with the :guilabel:`Verify data post-migration (recommended)`
       setting enabled, |service| notifies you that it performed data
       verification for supported types. If you started the migration
       with verification disabled, |service| asks you to verify your data
       manually instead. To learn more, see :ref:`verify-migrations`.

     A lag time value displays during the final phase of the migration process
     that represents the current lag between the source and destination {+clusters+}.

     You receive an email notification when your expiration window is nearly up.

     When the lag behind source is close to zero and the migration process is caught up,
     |service| activates the :guilabel:`Cutover to your destination cluster` button
     and indicates that your source and destination {+clusters+} are in sync.
     Proceed to the next step.

---
title: "Perform the cutover."
ref: live-import-prepare-cutover
level: 4
content: |

   Cutover is a three-step process of directing your application's reads and writes
   away from your source cluster and to your destination cluster. 

   When |service| detects that the source and destination {+clusters+} are
   nearly in sync, it starts an extendable 120 hour (5 day) timer to begin
   the cutover stage of the live migration procedure. After the 120 hour
   period passes, |service| stops synchronizing with the source {+cluster+}.

   At this stage in the migration process, you can proceed to cutover or
   extend the syncing period and then proceed to cutover.

   - If you click :guilabel:`I'm ready to cutover`, |service| starts the cutover process.
   - If you click :guilabel:`Extend Sync`, and if the extended sync completes successfully,
     |service| confirms that source and destination clusters are in sync.
     Proceed with the cutover process. If the sync time expires, you can retry the migration.

     .. include:: /includes/import/migration-email-expiration.rst

   a. Click :guilabel:`I'm ready to cutover`. Proceed with the three-step cutover
      process quickly to ensure minimal downtime to your application.

   #. Click :guilabel:`Proceed to cutover`. The three-step cutover process begins:

      i. Stop writes to your source {+cluster+}. Click
         :guilabel:`I confirm that I've stopped writes to my source cluster`.
         Click :guilabel:`Finalize migration` to proceed.
      #. Wait a few minutes while |service| finalizes the migration. 
         |service| performs these actions to complete the process:

         - Removes the MongoDB live migration server subnets from the IP access
           list on the destination {+cluster+}.
         - Removes the database user that live migration used to import data
           to the destination {+cluster+}.

         .. include:: /includes/import/migration-email-lm-in-progress.rst

      #. If the migration succeeds, the :guilabel:`You have successfully migrated to Atlas`
         page displays.
         |service| shows the status of the synced changes, the application downtime,
         the duration of the migration process, the amount of initial data copied,
         and the number of copied collections.

         - Verify that your data is transferred to the destination {+cluster+}
           by comparing document counts and running hash comparisons.
           To learn more, see |mongosync-verification|.

         - Click :guilabel:`Connect to your new cluster`. |service| redirects you
           to the :guilabel:`Connect to Atlas` page, where you can choose a connection method.
         - After you connect to your cluster, resume writes to the destination {+cluster+}.

...
