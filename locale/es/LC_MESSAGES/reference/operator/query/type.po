# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 18:55+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# c8b945b7666c40ed8aa7bff9f7c00327
#: ../source/reference/operator/query/type.txt:3
msgid "$type"
msgstr ""

# 4b70835541874f669ebef5eb1d94405f
#: ../source/reference/operator/query/type.txt
msgid "On this page"
msgstr ""

# 2e28fc49ba1145fa8438a1a1a1181ada
#: ../source/reference/operator/query/type.txt:14
msgid "Definition"
msgstr ""

# b0ce761bfe6c48f3a99204528f8d11e4
#: ../source/reference/operator/query/type.txt:18
msgid ""
":query:`$type` selects the documents where the *value* of the ``field`` "
"is an instance of the specified :term:`BSON` type. Querying by data type "
"is useful when dealing with highly unstructured data where data types are"
" not predictable."
msgstr ""

# dc59cba7bb94412b8dc4ff619631d6d6
#: ../source/reference/operator/query/type.txt:23
msgid "A :query:`$type` expression has the following syntax:"
msgstr ""

# 34785fdcb2fb4a548d0deba685c5bee4
#: ../source/reference/operator/query/type.txt:31
msgid ""
":ref:`document-type-available-types` describes the BSON types and their "
"corresponding numeric and string aliases."
msgstr ""

# e7d88dc496614b12b7fa6c5c681bb876
#: ../source/reference/operator/query/type.txt:35
msgid "Behavior"
msgstr ""

# a7ca057b432848f38eae686ba272b1f9
#: ../source/reference/operator/query/type.txt:37
msgid ""
":query:`$type` returns documents where the BSON type of the ``field`` "
"matches the BSON type passed to :query:`$type`."
msgstr ""

# 3d9a9831ee194395ad049fc586e300ec
#: ../source/reference/operator/query/type.txt:43
msgid "Available Types"
msgstr ""

# 2854c6a7096d4950b5054e75817a5bdd
#: ../source/reference/operator/query/type.txt:45
msgid ""
":query:`$type` operator accepts string aliases for the BSON types in "
"addition to the numbers corresponding to the BSON types. Previous "
"versions only accepted the numbers corresponding to the BSON type."
msgstr ""

# b7101fb1cbf84c12aede0838dfb38999
#: ../source/includes/fact-bson-types.rst:4
msgid "Type"
msgstr ""

# 0b68a9b9e06e47d3988a6a89a63d539d
#: ../source/includes/fact-bson-types.rst:5
msgid "Number"
msgstr ""

# 3293412493624923988f827dfcfed12f
#: ../source/includes/fact-bson-types.rst:6
msgid "Alias"
msgstr ""

# a0cdff67111e41b68afc945b02b7508e
#: ../source/includes/fact-bson-types.rst:7
msgid "Notes"
msgstr ""

# c9e4b24dfee646b7bbb3eebc34c7fb94
#: ../source/includes/fact-bson-types.rst:9
msgid "Double"
msgstr ""

# ffb9e5a8acf5410c962028ec14e6fd3b
#: ../source/includes/fact-bson-types.rst:10
msgid "1"
msgstr ""

# 077d2599ed7143089a99075580b5da9e
#: ../source/includes/fact-bson-types.rst:11
msgid "\"double\""
msgstr ""

# dd630e6231ef4fe2a1922c1ad59f2758
#: ../source/includes/fact-bson-types.rst:14
msgid "String"
msgstr ""

# 38844473d72b417e80b5eeb1e64f027d
#: ../source/includes/fact-bson-types.rst:15
msgid "2"
msgstr ""

# deef23ef28df473b99e4a0e4f1eb8fd7
#: ../source/includes/fact-bson-types.rst:16
msgid "\"string\""
msgstr ""

# 0444dbcb3bf346d3b7faddcd617e9ed7
#: ../source/includes/fact-bson-types.rst:19
msgid "Object"
msgstr ""

# 991a6b503aa346b3b121ee23a1d9bed6
#: ../source/includes/fact-bson-types.rst:20
msgid "3"
msgstr ""

# b8d2bb1007e74ebea045cd0b79ad9191
#: ../source/includes/fact-bson-types.rst:21
msgid "\"object\""
msgstr ""

# d647bebdfa9b43188ac1f73f49318dc1
#: ../source/includes/fact-bson-types.rst:24
msgid "Array"
msgstr ""

# f279fc4e9fb84079be16100bb1419a0d
#: ../source/includes/fact-bson-types.rst:25
msgid "4"
msgstr ""

# a838fbd48b164942bfe4d0b2947baf2a
#: ../source/includes/fact-bson-types.rst:26
msgid "\"array\""
msgstr ""

# 07884ec295e446878f0eb7f859bc18f2
#: ../source/includes/fact-bson-types.rst:29
msgid "Binary data"
msgstr ""

# d75a15f130584ff5abe6d607f8d9a7c4
#: ../source/includes/fact-bson-types.rst:30
msgid "5"
msgstr ""

# b099f9e1135f4ac49acd8369eb86377c
#: ../source/includes/fact-bson-types.rst:31
msgid "\"binData\""
msgstr ""

# a8cbba546d024ee28342b98d6ce62747
#: ../source/includes/fact-bson-types.rst:34
msgid "Undefined"
msgstr ""

# 54be8cfdd9fb4999b5678bf6682916f5
#: ../source/includes/fact-bson-types.rst:35
msgid "6"
msgstr ""

# 3a9c5fe191cc464088d2b73eb022c466
#: ../source/includes/fact-bson-types.rst:36
msgid "\"undefined\""
msgstr ""

# 144c0493d1e8486585ab851a0fd5a711
# c92e5e4d76e4446484df4d4c2169646a
# 793ce43ef28f41aab4df5a850d341ca9
#: ../source/includes/fact-bson-types.rst:37
#: ../source/includes/fact-bson-types.rst:67
#: ../source/includes/fact-bson-types.rst:77
msgid "Deprecated."
msgstr ""

# 371c0aa503044d50acef9e66373e7eb3
#: ../source/includes/fact-bson-types.rst:39
msgid "ObjectId"
msgstr ""

# a4ae71bedae84c49a02952f8dea3552c
#: ../source/includes/fact-bson-types.rst:40
msgid "7"
msgstr ""

# f2ae3f7f293f4bf5a09b4507222ac9b1
#: ../source/includes/fact-bson-types.rst:41
msgid "\"objectId\""
msgstr ""

# 6260c6b1637044a2a49a4ac67c460160
#: ../source/includes/fact-bson-types.rst:44
msgid "Boolean"
msgstr ""

# 9e09c3e0991f48e6a98fefa126bd6bbe
#: ../source/includes/fact-bson-types.rst:45
msgid "8"
msgstr ""

# 6bf525e2dc864f8aa65f26573f83137e
#: ../source/includes/fact-bson-types.rst:46
msgid "\"bool\""
msgstr ""

# 4d7e790a78454f879ace3f621c14e396
#: ../source/includes/fact-bson-types.rst:49
msgid "Date"
msgstr ""

# cd23530deae4427c8e4f724dc25fba9d
#: ../source/includes/fact-bson-types.rst:50
msgid "9"
msgstr ""

# 062f94de6cae4617b5cfc2c3cf8354f0
#: ../source/includes/fact-bson-types.rst:51
msgid "\"date\""
msgstr ""

# 5e19b5919d3343b8aa693313c3e5862a
#: ../source/includes/fact-bson-types.rst:54
msgid "Null"
msgstr ""

# e457af3375984f8c82fdcc86ba4d21f7
#: ../source/includes/fact-bson-types.rst:55
msgid "10"
msgstr ""

# 8f766adc50424124b346d91a3c5b579e
#: ../source/includes/fact-bson-types.rst:56
msgid "\"null\""
msgstr ""

# 3f677ca245c24522bf527fb0397c1f40
#: ../source/includes/fact-bson-types.rst:59
msgid "Regular Expression"
msgstr ""

# dbdddb3b60c84ffb8b5b3da4f9c505db
#: ../source/includes/fact-bson-types.rst:60
msgid "11"
msgstr ""

# 5505f52593ff454d940f0ac470255b75
#: ../source/includes/fact-bson-types.rst:61
msgid "\"regex\""
msgstr ""

# 617fe8e251944dd5b19a3b28434af75b
#: ../source/includes/fact-bson-types.rst:64
msgid "DBPointer"
msgstr ""

# a9d8c7426aee4e8a816aff1e5231bec0
#: ../source/includes/fact-bson-types.rst:65
msgid "12"
msgstr ""

# ba3081ae32c44c9cb3ec80f45d9ca9ce
#: ../source/includes/fact-bson-types.rst:66
msgid "\"dbPointer\""
msgstr ""

# deca396ba9b44fc8a1321f92702e9aca
#: ../source/includes/fact-bson-types.rst:69
msgid "JavaScript"
msgstr ""

# e0be93de09bc4318b65c52d0d60e0332
#: ../source/includes/fact-bson-types.rst:70
msgid "13"
msgstr ""

# 1042085daa8048b4a845ab5bf3b2d1d9
#: ../source/includes/fact-bson-types.rst:71
msgid "\"javascript\""
msgstr ""

# 095fe4ced2cc460db09781c21e4600d8
#: ../source/includes/fact-bson-types.rst:74
msgid "Symbol"
msgstr ""

# 7a0dda40b0d043709c2d21a17f531c41
#: ../source/includes/fact-bson-types.rst:75
msgid "14"
msgstr ""

# c1a8cb0533b24112953cfbff2de3440d
#: ../source/includes/fact-bson-types.rst:76
msgid "\"symbol\""
msgstr ""

# ce6069cca47c43729aa15f9e8767155a
#: ../source/includes/fact-bson-types.rst:79
msgid "JavaScript (with scope)"
msgstr ""

# 7440898986674e89b62f912037d77953
#: ../source/includes/fact-bson-types.rst:80
msgid "15"
msgstr ""

# 66b45fccabde4235860bdd098c6d5196
#: ../source/includes/fact-bson-types.rst:81
msgid "\"javascriptWithScope\""
msgstr ""

# a5d2cd0665a44f3e947fb1c2dad072cb
# 1ac8d92b1bc24d50aa1b20e5e0a21ca5
#: ../source/includes/fact-bson-types.rst:84
#: ../source/reference/operator/query/type.txt:58
msgid "32-bit integer"
msgstr ""

# aca2420ff67d41fbbc48b89e23932393
#: ../source/includes/fact-bson-types.rst:85
msgid "16"
msgstr ""

# 115ce6dddb234134a87ae43912d3a663
#: ../source/includes/fact-bson-types.rst:86
msgid "\"int\""
msgstr ""

# de452e54d913465bbfd582daa3f6316b
#: ../source/includes/fact-bson-types.rst:89
msgid "Timestamp"
msgstr ""

# e20bb40a416741d3af91996a59125ed2
#: ../source/includes/fact-bson-types.rst:90
msgid "17"
msgstr ""

# 3752dd939eae4a5eafa7f1f6292baa66
#: ../source/includes/fact-bson-types.rst:91
msgid "\"timestamp\""
msgstr ""

# f7b35e50ae5f4baeb0450574554e3198
# ccf79d04955f4480b7355e78af145af5
#: ../source/includes/fact-bson-types.rst:94
#: ../source/reference/operator/query/type.txt:60
msgid "64-bit integer"
msgstr ""

# 15d81a7e0d6343aa87aa413a1a8a2245
#: ../source/includes/fact-bson-types.rst:95
msgid "18"
msgstr ""

# 9bbefc28c25049d4ae1c736673b69bf5
#: ../source/includes/fact-bson-types.rst:96
msgid "\"long\""
msgstr ""

# 1a9b0c8699ed4b7e937fcfad1f4ae48c
#: ../source/includes/fact-bson-types.rst:99
msgid "Decimal128"
msgstr ""

# fff50937dae445ed82db442f228807f0
#: ../source/includes/fact-bson-types.rst:100
msgid "19"
msgstr ""

# 6ea7de51d649452190c8925ba074e18f
#: ../source/includes/fact-bson-types.rst:101
msgid "\"decimal\""
msgstr ""

# c9ee96541c2c4721996f4ee66ff0ef25
#: ../source/includes/fact-bson-types.rst:102
msgid "New in version 3.4."
msgstr ""

# ea49f6ef962d48928ab97d33e48f5222
#: ../source/includes/fact-bson-types.rst:104
msgid "Min key"
msgstr ""

# 5bd9e02f9657486d841d0e201cf3ec37
#: ../source/includes/fact-bson-types.rst:105
msgid "-1"
msgstr ""

# f21c003077ae48a0a56444dd09d35a10
#: ../source/includes/fact-bson-types.rst:106
msgid "\"minKey\""
msgstr ""

# 28a9f4cc543b4e4aaa9258403077cf1c
#: ../source/includes/fact-bson-types.rst:109
msgid "Max key"
msgstr ""

# 60893d29f25e43888ab68e7d8ec5141a
#: ../source/includes/fact-bson-types.rst:110
msgid "127"
msgstr ""

# 9bcce439291e48798e17400bb89720a0
#: ../source/includes/fact-bson-types.rst:111
msgid "\"maxKey\""
msgstr ""

# be3382f8b6fc43d8bab57e0033a051ee
#: ../source/reference/operator/query/type.txt:53
msgid ""
":query:`$type` supports the ``number`` alias, which will match against "
"the following :term:`BSON` types:"
msgstr ""

# 52fafa05bbe14c5488f908444256270f
#: ../source/reference/operator/query/type.txt:56
msgid "double"
msgstr ""

# 8b551a40e3d14405a01294db4757ee9f
#: ../source/reference/operator/query/type.txt:62
msgid "decimal"
msgstr ""

# 52f74e60167e47a2bffe0bc059188aa2
#: ../source/reference/operator/query/type.txt:64
msgid "See :ref:`document-querying-by-data-type`"
msgstr ""

# 4bee0e0ca6644ab3866cdc274771eee1
#: ../source/reference/operator/query/type.txt:67
msgid "Arrays"
msgstr ""

# 2b575601d5ad445091090a9edac2ca2a
#: ../source/reference/operator/query/type.txt:69
msgid ""
"When applied to arrays, :query:`$type` matches any **inner** element that"
" is of the specified :term:`BSON` type. For example, when matching for "
"``$type : 'array'``, the document will match if the field has a nested "
"array. It will not return results where the field itself is an ``array``."
msgstr ""

# 4880d4f628344c5a969f532cf8c97d94
#: ../source/reference/operator/query/type.txt:74
msgid "See :ref:`document-querying-by-array-type` for an example."
msgstr ""

# ad12b7578e3841c8bf938e5848702536
#: ../source/reference/operator/query/type.txt:78
msgid "MinKey and MaxKey"
msgstr ""

# 11565003086f49f79ddc56b064f037db
#: ../source/reference/operator/query/type.txt:80
msgid ""
":bsontype:`MinKey <data_minkey>` and :bsontype:`MaxKey <data_maxkey>` are"
" used in comparison operations and exist primarily for internal use. For "
"all possible :term:`BSON` element values, ``MinKey`` will always be the "
"smallest value while ``MaxKey`` will always be the greatest value."
msgstr ""

# 52332efacc3848349e23af5acdf1ad2b
#: ../source/reference/operator/query/type.txt:85
msgid ""
"Querying for  ``minKey`` or ``maxKey`` with :query:`$type` will only "
"return fields that match the special ``MinKey`` or ``MaxKey`` values."
msgstr ""

# 5562cd49d5f24edf863d5341db52789c
#: ../source/reference/operator/query/type.txt:89
msgid ""
"Suppose that the ``data`` collection has two documents with ``MinKey`` "
"and ``MaxKey``:"
msgstr ""

# 6e2a86e3e5f74b52b7598acea618abaf
#: ../source/reference/operator/query/type.txt:97
msgid "The following query will return the document with ``_id: 1``:"
msgstr ""

# 42bc89a68ec84f2aa48f0909b9a63d08
#: ../source/reference/operator/query/type.txt:103
msgid "The following query will return the document with ``_id: 2``:"
msgstr ""

# 6cadd0808c6d44449c587fb264964f35
#: ../source/reference/operator/query/type.txt:110
msgid "Examples"
msgstr ""

# 39ef4b9bef284426ad26d1e87c8a8d52
#: ../source/reference/operator/query/type.txt:115
msgid "Querying by Data Type"
msgstr ""

# 291bf0aff56741469eedfaac37cf45de
#: ../source/reference/operator/query/type.txt:117
msgid ""
"The ``addressBook`` contains addresses and zipcodes, where ``zipCode`` "
"has ``string``, ``int``, ``double``, and ``long`` values:"
msgstr ""

# a2f8cdb5e61e43a59388da9b033f8553
#: ../source/reference/operator/query/type.txt:132
msgid ""
"The following queries return all documents where ``zipCode`` is the "
":term:`BSON` type ``string``:"
msgstr ""

# c16ee3d3ad8d4c77917bee234cc9124b
# 1401d108db5c45958c8c60cc02efe82c
# 6686f8f6bc724693abf20d62e04d5394
#: ../source/reference/operator/query/type.txt:141
#: ../source/reference/operator/query/type.txt:155
#: ../source/reference/operator/query/type.txt:168
msgid "These queries return:"
msgstr ""

# 2084cf2a76654164b96bd826343c5143
#: ../source/reference/operator/query/type.txt:147
msgid ""
"The following queries return all documents where ``zipCode`` is the "
":term:`BSON` type ``double``:"
msgstr ""

# 4c5110f9501e4e6496894ac2ff044a52
#: ../source/reference/operator/query/type.txt:161
msgid ""
"The following query uses the ``number`` alias to return documents where "
"``zipCode`` is the :term:`BSON` type ``double``, ``int``, or ``long``:"
msgstr ""

# 4f89bfa22bc743289848f48692436522
#: ../source/reference/operator/query/type.txt:179
msgid "Querying by MinKey and MaxKey"
msgstr ""

# 9a59bbad28864fd0b4f78cfd45a73e7b
#: ../source/reference/operator/query/type.txt:181
msgid ""
"The ``restaurants`` collection uses ``minKey`` for any grade that is a "
"failing grade:"
msgstr ""

# 862366993fa642089e787ce335cff4ac
#: ../source/reference/operator/query/type.txt:206
msgid "And ``maxKey`` for any grade that is the highest passing grade:"
msgstr ""

# b74ac72620d043c6a1fb3d94b67c6c1c
#: ../source/reference/operator/query/type.txt:230
msgid ""
"The following query returns any restaurant whose ``grades.grade`` field "
"contains  ``minKey``:"
msgstr ""

# f83a15d9300e4efc98836997ad4efd25
# f742af45ad8a43c5a12ecaf514c0ca1d
#: ../source/reference/operator/query/type.txt:239
#: ../source/reference/operator/query/type.txt:273
msgid "This returns"
msgstr ""

# 0b6a7c2140c141d1b6f37773c4d27a2c
#: ../source/reference/operator/query/type.txt:263
msgid ""
"The following query returns any restaurant whose ``grades.grade`` field "
"contains ``maxKey``:"
msgstr ""

# 5d07b894f58b4ea79d4faba3cbc09caf
#: ../source/reference/operator/query/type.txt:300
msgid "Querying by Array Type"
msgstr ""

# 9960d14c6b794f44adffb9bd74f37f7e
#: ../source/reference/operator/query/type.txt:302
msgid "The ``SensorReading`` collection contains the following documents:"
msgstr ""

# 348c14c39bb04cc09fb5285946773608
#: ../source/reference/operator/query/type.txt:325
msgid ""
"The following query returns any document where ``readings`` has an "
"element of :term:`BSON` type ``array``; i.e. the :query:`$type` does not "
"check if ``readings`` itself is an array:"
msgstr ""

# 5d957a40b54844ecbc128fc4ec935466
#: ../source/reference/operator/query/type.txt:333
msgid "This returns the following doucment:"
msgstr ""

# c0ad1611e62047b79449539d3651d8db
#: ../source/reference/operator/query/type.txt:347
msgid ""
"The document with ``_id : 1`` has at least one element in ``readings`` "
"that is an ``array``, whereas the document with ``_id : 2`` does *not*."
msgstr ""

# e8dc1f99478d476b814f9981303f77eb
#: ../source/reference/operator/query/type.txt:351
msgid "Additional Information"
msgstr ""

# ddb33a3905c542f0898bde51aee83965
#: ../source/reference/operator/query/type.txt:353
msgid ""
":method:`~db.collection.find()`, :doc:`BSON Types </reference/bson-"
"types>`."
msgstr ""

# 23e9e551a2ad441ca9e1a50d260c74ec
#~ msgid "*Syntax*: ``{ field: { $type: <BSON type> } }``"
#~ msgstr ""

# fa3d55241c7048cdaaad0fc6609d1399
#~ msgid ""
#~ ":query:`$type` selects the documents where "
#~ "the *value* of the ``field`` is "
#~ "the specified :term:`BSON` type."
#~ msgstr ""

# 52569ba39ff84ad18b57ee178f5007b9
#~ msgid "Consider the following example:"
#~ msgstr ""

# 4e4c63aa9e7748578f331916f45a5446
#~ msgid ""
#~ "This query will select all documents "
#~ "in the ``inventory`` collection where "
#~ "the ``price`` field value is a "
#~ "Double."
#~ msgstr ""

# ff45173dff5946928563e5cce4f346bb
#~ msgid ""
#~ "If the ``field`` holds an array, "
#~ "the :query:`$type` operator performs the "
#~ "type check against the array elements"
#~ " and **not** the ``field``."
#~ msgstr ""

# 18f3fe2242c04653a3c197b9a4e8cfc9
#~ msgid "Consider the following example where the ``tags`` field holds an array:"
#~ msgstr ""

# 69692a695c5445968ecdd0f928a605bc
#~ msgid ""
#~ "This query will select all documents "
#~ "in the ``inventory`` collection where "
#~ "the ``tags`` array contains an element"
#~ " that is itself an array."
#~ msgstr ""

# f4f40b49d0e14394aa5c00f3cf5779ac
#~ msgid ""
#~ "If instead you want to determine "
#~ "whether the ``tags`` field is an "
#~ "array type, use the :query:`$where` "
#~ "operator:"
#~ msgstr ""

# d4bb9a3a13814faea51c81874d9c599d
#~ msgid "See the :issue:`SERVER-1475` for more information about the array type."
#~ msgstr ""

# c062fd7f91c345f8a86711a5cd243b67
#~ msgid ""
#~ "Refer to the following table for "
#~ "the available :term:`BSON` types and "
#~ "their corresponding numbers."
#~ msgstr ""

# 6ba1a306440a4f7e9d2d2b81e121da6d
#~ msgid "**Type**"
#~ msgstr ""

# b3ae2e06af2541939888815932afa5e6
#~ msgid "**Number**"
#~ msgstr ""

# 897f67d9539646118c5dfafa5792684f
#~ msgid "Undefined (deprecated)"
#~ msgstr ""

# ce6fcf68778442aa9f9d2a421a8d6e3e
#~ msgid "Object id"
#~ msgstr ""

# 676c2639fd2c4ae69348b0efa9cd9ab6
#~ msgid "255"
#~ msgstr ""

# 08c41e855d9448108a6d320e819489e1
#~ msgid ""
#~ "``MinKey`` and ``MaxKey`` compare less "
#~ "than and greater than all other "
#~ "possible :term:`BSON` element values, "
#~ "respectively, and exist primarily for "
#~ "internal use."
#~ msgstr ""

# de71905419aa4af99b798d143f24ef2b
#~ msgid ""
#~ "To query if a field value is "
#~ "a ``MinKey``, you must use the "
#~ ":query:`$type` with ``-1`` as in the "
#~ "following example:"
#~ msgstr ""

# 6083273e1aec4e8096988088dbc552a6
#~ msgid "Example"
#~ msgstr ""

# 52562d3d349d49e88be5b501287ab5ea
#~ msgid ""
#~ "Consider the following example operation "
#~ "sequence that demonstrates both type "
#~ "comparison *and* the special ``MinKey`` "
#~ "and ``MaxKey`` values:"
#~ msgstr ""

# 63b729f5015e45a7a07a889e334bc950
#~ msgid ""
#~ "To query for the minimum value of"
#~ " a :term:`shard key` of a "
#~ ":term:`sharded cluster`, use the following "
#~ "operation when connected to the "
#~ ":program:`mongos`:"
#~ msgstr ""

# 6811d8ab85d64507943ac590ef13e00d
#~ msgid ""
#~ "Storing values of the different types"
#~ " in the same field in a "
#~ "collection is *strongly* discouraged."
#~ msgstr ""

# 2c1e59c3232e4d0585ebb4b075413994
#~ msgid ""
#~ ":method:`~db.collection.find()`, "
#~ ":method:`~db.collection.insert()`, :query:`$where`, "
#~ ":term:`BSON`, :term:`shard key`, :term:`sharded "
#~ "cluster` ."
#~ msgstr ""

