.. _node-fundamentals-retrieve-data:
.. _node-find:

==============
Find Documents
==============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :description: Learn how to retrieve data, aggregate data, and monitor data changes in MongoDB by using the Node.js driver.   
   :keywords: node.js, code example, find one, find many

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _nodejs-driver-retrieve-data-overview:

Overview
--------

You can perform find operations to retrieve data from your MongoDB database.
You can perform a find operation to match documents on a set of criteria
by calling the ``find()`` or ``findOne()`` method.

.. tip:: Interactive Lab
   
   This page includes a short interactive lab that demonstrates how to
   retrieve data by using the ``find()`` method. You can complete this lab
   directly in your browser window without installing MongoDB or a code editor.

   To start the lab, click the :guilabel:`Open Interactive Tutorial` button at the
   top of the page. To expand the lab to a full-screen format, click the
   full-screen button (:guilabel:`â›¶`) in the top-right corner of the lab pane.

You can also further specify the information that the find operation
returns by specifying optional parameters or by chaining other methods,
as shown in the following guides:

- :ref:`node-specify-documents-to-return`
- :ref:`node-project`

You can also use an aggregation operation to retrieve data. This type of
operation allows you to apply an ordered pipeline of transformations to the
matched data.

If you want to monitor the database for incoming data that matches a set of
criteria, you can use the watch operation to be notified in real-time when
matching data is inserted.

.. include:: /includes/access-cursor-note.rst

.. |page-topic| replace:: perform read operations
.. |link-topic-ing| replace:: performing read operations in the Atlas UI

.. |atlas-url| replace:: :atlas:`View, Filter, and Sort Documents </atlas-ui/documents/#view--filter--and-sort-documents>`

.. include:: /includes/fact-atlas-compatible.rst
.. include:: /includes/fact-atlas-link.rst

Finding Documents
-----------------

You can call the ``find()`` method on a ``Collection`` object. The
method accepts a query document that describes the documents you want to
retrieve. For more information on how to specify your query document,
see the :ref:`node-fundamentals-query-document` guide.

.. tip:: No Query Criteria
   
   To execute a find operation that has no query criteria, you can
   pass an empty query or omit the query document in your find
   method parameters.

   The following operations both return all documents in the
   ``myColl`` collection:

   .. code-block:: javascript

      myColl.find(); // no query
      myColl.find({}); // empty query
   
   If you don't pass a query or pass an empty query
   to the ``findOne()`` method, the operation returns a single
   document from a collection.

   You can chain cursor methods to a find operation even when you pass an
   empty query. For example, the following code shows how you can
   specify a projection while performing a find operation
   that receives an empty query parameter:

   .. code-block:: javascript

      const projectFields = { _id: 0, field1: 1 };

      const findResult = await myColl.findOne().project(projectFields);

   For more information about projecting document fields, see the
   :ref:`node-fundamentals-project` guide.

The ``find()`` method returns a ``Cursor`` instance from which you can
access the matched documents. The ``findOne()`` method returns a ``Promise``
instance, which you can resolve to access either the matching document or
a ``null`` value if there are no matches.

.. example::

   A pizza restaurant wants to find all pizzas ordered by Lemony Snicket
   yesterday. They run the following ``find()`` query on the
   ``orders`` collection:

   .. literalinclude:: /code-snippets/crud/pizza.js
      :language: javascript
      :start-after: start find crud example
      :end-before: end find crud example

   Once the operation returns, the ``findResult`` variable references a
   ``Cursor``. You can print the documents retrieved using the ``for await...of``
   syntax as shown below:

   .. code-block:: javascript

      for await (const doc of findResult) {
        console.log(doc);
      }

   The output might resemble the following:

   .. code-block:: javascript
      :copyable: false

      [
        { name: "Lemony Snicket", type: "horseradish pizza", qty: 1, status: "delivered", date: ... },
        { name: "Lemony Snicket", type: "coal-fired oven pizza", qty: 3, status: "canceled", date: ...},
        ...
      ]

.. _node-usage-findone:

findOne() Example: Full File
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/crud/example-intro.rst

The following full file example finds a single document from the ``movies``
collection. It uses the following parameters:

- **Filter** that matches documents in which the ``title`` value is ``'The
  Room'``.

- **Sort** that organizes matched documents in descending order by
  rating, so if our query matches multiple documents the returned
  document will be the document with the highest rating.

- **Projection** that explicitly excludes the ``_id`` field from
  returned documents and explicitly includes only the ``title`` and
  ``imdb`` object (and its embedded fields).

.. _node-driver-findone-usage-example-code-snippet:

.. tabs::

  .. tab:: JavaScript
     :tabid: javascript

     .. literalinclude:: /code-snippets/usage-examples/findOne.js
        :language: javascript

  .. tab:: TypeScript
     :tabid: typescript

     .. literalinclude:: /code-snippets/usage-examples/findOne.ts
        :language: typescript


Running the preceding example results in the following output:

.. code-block:: javascript
   :copyable: false

   { title: 'The Room', imdb: { rating: 3.5, votes: 25673, id: 368226 } }

.. _node-usage-find:

find() Example: Full File
~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/crud/example-intro.rst

The following full file example finds documents from the ``movies`` collection. It
uses the following parameters:

- **Filter** that matches documents in which the ``runtime`` value is less than 15
  minutes.

- **Sort** that organizes returned documents in ascending order by
  title (alphabetical order in which "A" comes before "Z" and "1" before
  "9").

- **Projection** that explicitly excludes the ``_id`` field from
  returned documents and explicitly includes only the ``title`` and
  ``imdb`` object (and its embedded fields).

.. _node-driver-find-usage-example-code-snippet:

.. tabs::

  .. tab:: JavaScript
     :tabid: javascript

     .. literalinclude:: /code-snippets/usage-examples/find.js
        :language: javascript
        :linenos:

  .. tab:: TypeScript
     :tabid: typescript

     .. literalinclude:: /code-snippets/usage-examples/find.ts
        :language: typescript
        :linenos:

Running the preceding example results in the following output:

.. code-block:: javascript
   :copyable: false

   { title: '10 Minutes', imdb: { rating: 7.9, votes: 743, id: 339976 } }
   { title: '3x3', imdb: { rating: 6.9, votes: 206, id: 1654725 } }
   { title: '7:35 in the Morning', imdb: { rating: 7.3, votes: 1555, id: 406501 } }
   { title: '8', imdb: { rating: 7.8, votes: 883, id: 1592502 } }
   ...

.. include:: /includes/crud/chain-cursor-methods.rst 

Additional Information
~~~~~~~~~~~~~~~~~~~~~~

For more information about the ``findOne()`` and ``find()`` methods, see the
following Server manual documentation:

- :manual:`findOne() </reference/method/db.collection.findOne/>`
- :manual:`find() </reference/method/db.collection.find/>`

Aggregate Data from Documents
-----------------------------

If you want to run a custom processing pipeline to retrieve data from your
database, you can use the ``aggregate()`` method. This method accepts
aggregation expressions to run in sequence. These expressions let you filter,
group, and arrange the result data from a collection.

.. example::

   A pizza restaurant wants to run a status report on-demand to
   summarize pizza orders over the past week. They run the following
   ``aggregate()`` query on the ``orders`` collection to fetch the
   totals for each distinct "status" field:

   .. literalinclude:: /code-snippets/crud/pizza.js
      :language: javascript
      :start-after: start aggregate crud example
      :end-before: end aggregate crud example

   Once the operation returns, the ``aggregateResult`` variable references a
   ``Cursor``. You can print the documents retrieved using the ``for await...of``
   syntax as shown below:

   .. code-block:: javascript

      for await (const doc of aggregateResult) {
        console.log(doc);
      }

   The output might resemble the following:

   .. code-block:: javascript
      :copyable: false

      [
        { _id: 'delivering', count: 5 },
        { _id: 'delivered', count: 37 },
        { _id: 'created', count: 9 }
      ]

Additional Information
~~~~~~~~~~~~~~~~~~~~~~

For more information on how to construct an aggregation pipeline, see
the :ref:`node-aggregation` guide or :manual:`Aggregation Operations </aggregation>`
in the Server manual.

.. _node-fundamentals-watch:

Monitor Data Changes
--------------------

You can use the ``watch()`` method to monitor a collection for changes to
a collection that match certain criteria. These changes include inserted,
updated, replaced, and deleted documents. You can pass this method
a pipeline of aggregation commands that sequentially runs on the changed
data whenever write operations are executed on the collection.

.. example::

   A pizza restaurant wants to receive a notification whenever a new pizza
   order comes in. To accomplish this, they create an aggregation pipeline
   to filter on insert operations and return specific fields. They pass
   this pipeline to the ``watch()`` method called on the ``orders``
   collection as shown below:

   .. literalinclude:: /code-snippets/crud/pizza.js
      :language: javascript
      :start-after: start watch crud example
      :end-before: end watch crud example

Additional Information
~~~~~~~~~~~~~~~~~~~~~~

For a runnable example of the ``watch()`` method, see the :ref:`examples
<node-usage-watch>` section in the :ref:`node-change-streams` guide.

.. _node-retrieve-instruqt-lab:

.. instruqt:: /mongodb-docs/tracks/find-node?token=em_OVNHWCPNPMLwNOCm
   :title: find() Lesson
   :drawer:
   
