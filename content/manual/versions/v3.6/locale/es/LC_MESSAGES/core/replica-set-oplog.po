# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 19:29+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/replica-set-oplog.txt:5
msgid "Replica Set Oplog"
msgstr ""

#: ../source/core/replica-set-oplog.txt:15
msgid ""
"The :term:`oplog` (operations log) is a special :term:`capped collection`"
" that keeps a rolling record of all operations that modify the data "
"stored in your databases. MongoDB applies database operations on the "
":term:`primary` and then records the operations on the primary's oplog. "
"The :term:`secondary` members then copy and apply these operations in an "
"asynchronous process.  All replica set members contain a copy of the "
"oplog, in the :data:`local.oplog.rs` collection, which allows them to "
"maintain the current state of the database."
msgstr ""

#: ../source/core/replica-set-oplog.txt:25
msgid ""
"To facilitate replication, all replica set members send heartbeats "
"(pings) to all other members. Any :term:`secondary` member can import "
"oplog entries from any other member."
msgstr ""

#: ../source/core/replica-set-oplog.txt:29
msgid ""
"Each operation in the oplog is :term:`idempotent`. That is, oplog "
"operations produce the same results whether applied once or multiple "
"times to the target dataset."
msgstr ""

#: ../source/core/replica-set-oplog.txt:36
msgid "Oplog Size"
msgstr ""

#: ../source/core/replica-set-oplog.txt:38
msgid ""
"When you start a replica set member for the first time, MongoDB creates "
"an oplog of a default size."
msgstr ""

#: ../source/core/replica-set-oplog.txt:69
msgid "For Unix and Windows systems"
msgstr ""

#: ../source/core/replica-set-oplog.txt:42
msgid "The default oplog size depends on the storage engine:"
msgstr ""

#: ../source/core/replica-set-oplog.txt:48
#: ../source/core/replica-set-oplog.txt:79
msgid "Storage Engine"
msgstr ""

#: ../source/core/replica-set-oplog.txt:49
#: ../source/core/replica-set-oplog.txt:80
msgid "Default Oplog Size"
msgstr ""

#: ../source/core/replica-set-oplog.txt:50
msgid "Lower Bound"
msgstr ""

#: ../source/core/replica-set-oplog.txt:51
msgid "Upper Bound"
msgstr ""

#: ../source/core/replica-set-oplog.txt:53
#: ../source/core/replica-set-oplog.txt:82
msgid ":doc:`/core/inmemory`"
msgstr ""

#: ../source/core/replica-set-oplog.txt:55
#, python-format
msgid "5% of physical memory"
msgstr ""

#: ../source/core/replica-set-oplog.txt:57
msgid "50 MB"
msgstr ""

#: ../source/core/replica-set-oplog.txt:59
#: ../source/core/replica-set-oplog.txt:64
#: ../source/core/replica-set-oplog.txt:69
msgid "50 GB"
msgstr ""

#: ../source/core/replica-set-oplog.txt:61
#: ../source/core/replica-set-oplog.txt:86
msgid ":doc:`/core/wiredtiger`"
msgstr ""

#: ../source/core/replica-set-oplog.txt:62
#: ../source/core/replica-set-oplog.txt:67
#, python-format
msgid "5% of free disk space"
msgstr ""

#: ../source/core/replica-set-oplog.txt:63
#: ../source/core/replica-set-oplog.txt:68
msgid "990 MB"
msgstr ""

#: ../source/core/replica-set-oplog.txt:66
#: ../source/core/replica-set-oplog.txt:89
msgid ":doc:`/core/mmapv1`"
msgstr ""

#: ../source/core/replica-set-oplog.txt:90
msgid "For 64-bit macOS systems"
msgstr ""

#: ../source/core/replica-set-oplog.txt:72
msgid ""
"The default oplog size is 192 MB of either physical memory or free disk "
"space depending on the storage engine:"
msgstr ""

#: ../source/core/replica-set-oplog.txt:84
msgid "192 MB of physical memory"
msgstr ""

#: ../source/core/replica-set-oplog.txt:87
#: ../source/core/replica-set-oplog.txt:90
msgid "192 MB of free disk space"
msgstr ""

#: ../source/core/replica-set-oplog.txt:92
#, python-format
msgid ""
"In most cases, the default oplog size is sufficient. For example, if an "
"oplog is 5% of free disk space and fills up in 24 hours of operations, "
"then secondaries can stop copying entries from the oplog for up to 24 "
"hours without becoming too stale to continue replicating. However, most "
"replica sets have much lower operation volumes, and their oplogs can hold"
" much higher numbers of operations."
msgstr ""

#: ../source/core/replica-set-oplog.txt:99
msgid ""
"Before :binary:`~bin.mongod` creates an oplog, you can specify its size "
"with the :setting:`~replication.oplogSizeMB` option. Once you have "
"started a replica set member for the first time, use the "
":dbcommand:`replSetResizeOplog` administrative command to change the "
"oplog size. :dbcommand:`replSetResizeOplog` enables you to resize the "
"oplog dynamically without restarting the :binary:`~bin.mongod` process."
msgstr ""

#: ../source/core/replica-set-oplog.txt:107
msgid "Workloads that Might Require a Larger Oplog Size"
msgstr ""

#: ../source/core/replica-set-oplog.txt:109
msgid ""
"If you can predict your replica set's workload to resemble one of the "
"following patterns, then you might want to create an oplog that is larger"
" than the default. Conversely, if your application predominantly performs"
" reads with a minimal amount of write operations, a smaller oplog may be "
"sufficient."
msgstr ""

#: ../source/core/replica-set-oplog.txt:115
msgid "The following workloads might require a larger oplog size."
msgstr ""

#: ../source/core/replica-set-oplog.txt:118
msgid "Updates to Multiple Documents at Once"
msgstr ""

#: ../source/core/replica-set-oplog.txt:120
msgid ""
"The oplog must translate multi-updates into individual operations in "
"order to maintain :term:`idempotency <idempotent>`. This can use a great "
"deal of oplog space without a corresponding increase in data size or disk"
" use."
msgstr ""

#: ../source/core/replica-set-oplog.txt:126
msgid "Deletions Equal the Same Amount of Data as Inserts"
msgstr ""

#: ../source/core/replica-set-oplog.txt:128
msgid ""
"If you delete roughly the same amount of data as you insert, the database"
" will not grow significantly in disk use, but the size of the operation "
"log can be quite large."
msgstr ""

#: ../source/core/replica-set-oplog.txt:133
msgid "Significant Number of In-Place Updates"
msgstr ""

#: ../source/core/replica-set-oplog.txt:135
msgid ""
"If a significant portion of the workload is updates that do not increase "
"the size of the documents, the database records a large number of "
"operations but does not change the quantity of data on disk."
msgstr ""

#: ../source/core/replica-set-oplog.txt:140
msgid "Oplog Status"
msgstr ""

#: ../source/core/replica-set-oplog.txt:142
msgid ""
"To view oplog status, including the size and the time range of "
"operations, issue the :method:`rs.printReplicationInfo()` method. For "
"more information on oplog status, see :ref:`replica-set-troubleshooting-"
"check-oplog-size`."
msgstr ""

#: ../source/core/replica-set-oplog.txt:147
msgid ""
"Under various exceptional situations, updates to a :term:`secondary's "
"<secondary>` oplog might lag behind the desired performance time.  Use "
":method:`db.getReplicationInfo()` from a secondary member and the "
":doc:`replication status </reference/method/db.getReplicationInfo>` "
"output to assess the current state of replication and determine if there "
"is any unintended replication delay."
msgstr ""

#: ../source/core/replica-set-oplog.txt:154
msgid ""
"See :ref:`Replication Lag <replica-set-replication-lag>` for more "
"information."
msgstr ""

#: ../source/core/replica-set-oplog.txt:161
msgid "Slow Oplog Application"
msgstr ""

#: ../source/core/replica-set-oplog.txt:163
msgid ""
"For MongoDB 3.6 deployments, starting in version 3.6.11, secondary "
"members of a replica set now log oplog entries that take longer than the "
"slow operation threshold to apply. These messages are :option:`logged "
"<mongod --logpath>` for the secondaries under the :data:`REPL` component "
"with the text ``applied op: <oplog entry> took <num>ms``."
msgstr ""

#: ../source/core/replica-set-oplog.txt:174
msgid "The slow oplog application logging on secondaries are:"
msgstr ""

#: ../source/core/replica-set-oplog.txt:176
msgid ""
"Not affected by the :setting:`~operationProfiling.slowOpSampleRate`; i.e."
" all slow oplog entries are logged by the secondary."
msgstr ""

#: ../source/core/replica-set-oplog.txt:179
msgid ""
"Not affected by the :parameter:`logLevel`/:setting:`systemLog.verbosity` "
"level (or the :setting:`systemLog.component.replication.verbosity` "
"level); i.e. for oplog entries, the secondary logs only the slow oplog "
"entries. Increasing the verbosity level does not log all oplog entries."
msgstr ""

#: ../source/core/replica-set-oplog.txt:185
msgid ""
"Not captured by the :doc:`profiler </tutorial/manage-the-database-"
"profiler>` and not affected by the profiling level."
msgstr ""

#: ../source/core/replica-set-oplog.txt:189
msgid "For more information on setting the slow operation threshold, see"
msgstr ""

#: ../source/core/replica-set-oplog.txt:191
msgid ":option:`mongod --slowms`"
msgstr ""

#: ../source/core/replica-set-oplog.txt:193
msgid ":setting:`~operationProfiling.slowOpThresholdMs`"
msgstr ""

#: ../source/core/replica-set-oplog.txt:195
msgid ""
"The :dbcommand:`profile` command or :method:`db.setProfilingLevel()` "
"shell helper method."
msgstr ""

#~ msgid ""
#~ "The :term:`oplog` (operations log) is a"
#~ " special :term:`capped collection` that "
#~ "keeps a rolling record of all "
#~ "operations that modify the data stored"
#~ " in your databases. MongoDB applies "
#~ "database operations on the :term:`primary` "
#~ "and then records the operations on "
#~ "the primary's oplog. The :term:`secondary` "
#~ "members then copy and apply these "
#~ "operations in an asynchronous process. "
#~ "All replica set members contain a "
#~ "copy of the oplog, allowing them "
#~ "to maintain the current state of "
#~ "the database."
#~ msgstr ""

#~ msgid ""
#~ "For 64-bit Linux, Solaris, FreeBSD, and"
#~ " Windows systems, MongoDB allocates 5% "
#~ "of the available free disk space "
#~ "to the oplog. If this amount is"
#~ " smaller than a gigabyte, then "
#~ "MongoDB allocates 1 gigabyte of space."
#~ msgstr ""

# 6d00393279d34f8a9de2833bb6659f82
#~ msgid ""
#~ "To facilitate replication, all replica "
#~ "set members send heartbeats (pings) to"
#~ " all other members. Any member can"
#~ " import oplog entries from any other"
#~ " member."
#~ msgstr ""

# 4bf3ec7948c04faebe63f90d10df18fb
#~ msgid ""
#~ "Whether applied once or multiple times"
#~ " to the target dataset, each "
#~ "operation in the oplog produces the "
#~ "same results, i.e. each operation in "
#~ "the oplog is :term:`idempotent`. For "
#~ "proper replication operations, entries in "
#~ "the oplog must be idempotent:"
#~ msgstr ""

# 74c3a7749bca45b8b1359acc73fa6f3d
#~ msgid "initial sync"
#~ msgstr ""

# e27b8ffbbe98459fb2159cb3fd1ede2a
#~ msgid "post-rollback catch-up"
#~ msgstr ""

# a3d12629fc5c43b798ea82b456ace9aa
#~ msgid "sharding chunk migrations"
#~ msgstr ""

# 12b729c7abc64b7d90fcae9112780ad2
#~ msgid ""
#~ "When you start a replica set "
#~ "member for the first time, MongoDB "
#~ "creates an oplog of a default "
#~ "size. The size depends on the "
#~ "architectural details of your operating "
#~ "system."
#~ msgstr ""

# d4db0a1c5eb64bfea7d69ff9122f20be
#~ msgid ""
#~ "Before :program:`mongod` creates an oplog, "
#~ "you can specify its size with the"
#~ " :setting:`~replication.oplogSizeMB` option. However,"
#~ " after you have started a replica "
#~ "set member for the first time, you"
#~ " can only change the size of "
#~ "the oplog using the :doc:`/tutorial/change-"
#~ "oplog-size` procedure."
#~ msgstr ""

# caac8e653e1f41e58feda2f97042f00d
#~ msgid "By default, the size of the oplog is as follows:"
#~ msgstr ""

# a8c99d5b0ad243959d26bdb09a1c21cc
#~ msgid ""
#~ "For 64-bit OS X systems, MongoDB "
#~ "allocates 183 megabytes of space to "
#~ "the oplog."
#~ msgstr ""

# e726ddfd09014822bcfbbf31efa6c5d3
#~ msgid ""
#~ "For 32-bit systems, MongoDB allocates "
#~ "about 48 megabytes of space to the"
#~ " oplog."
#~ msgstr ""

# de739f5dc2784613ac9c728952c28dd8
#~ msgid ""
#~ "If a significant portion of the "
#~ "workload is in-place updates, the "
#~ "database records a large number of "
#~ "operations but does not change the "
#~ "quantity of data on disk."
#~ msgstr ""

#~ msgid ""
#~ "The :term:`oplog` (operations log) is a"
#~ " special :term:`capped collection` that "
#~ "keeps a rolling record of all "
#~ "operations that modify the data stored"
#~ " in your databases. MongoDB applies "
#~ "database operations on the :term:`primary` "
#~ "and then records the operations on "
#~ "the primary's oplog. The :term:`secondary` "
#~ "members then copy and apply these "
#~ "operations in an asynchronous process. "
#~ "All replica set members contain a "
#~ "copy of the oplog, in the "
#~ ":data:`local.oplog.rs` collection, which allows "
#~ "them to maintain the current state "
#~ "of the database."
#~ msgstr ""

#~ msgid ""
#~ "For 64-bit Linux, Solaris, FreeBSD, and"
#~ " Windows systems, MongoDB allocates 5% "
#~ "of the available free disk space, "
#~ "but will always allocate at least "
#~ "1 gigabyte and never more than 50"
#~ " gigabytes."
#~ msgstr ""

