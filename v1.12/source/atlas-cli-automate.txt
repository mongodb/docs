.. meta::
   :robots: noindex, nosnippet 

.. _atlas-cli-automate:

=========================================
Automate Processes with the {+atlas-cli+}
=========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

To automate a process with the {+atlas-cli+} in a script, use
the following resources and best practices as guidance.  

To learn how to connect to the {+atlas-cli+} programmatically, see
the :guilabel:`Programmatic User` tabs on :ref:`connect-atlas-cli`.

Resources for Automation with the {+atlas-cli+}
-----------------------------------------------

.. list-table:: 
   :header-rows: 1
   :widths: 40 60

   * - Resource
     - Objective

   * - :ref:`atlas-cli-env-vars`
     - Set environment variables that you can define once and use
       across all of your scripts.

   * - :ref:`go-template-output`
     - Use Go templates or |json| paths to customize the output from
       the {+atlas-cli+}. You can include the anticipated custom output in your scripts.

Best Practices for Automation with the {+atlas-cli+}
----------------------------------------------------

Follow these best practices when you automate processes with the
{+atlas-cli+}:

Base Your Script on the Version of the {+atlas-cli+} that You Run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you create a script to automate processes, you should base the
script on the version of the {+atlas-cli+} that you currently run.
**Don't** build automatic upgrades for the {+atlas-cli+} into your
script because new {+atlas-cli+} releases could introduce breaking
changes, which could break your automated processes.

Instead, check release notes for deprecated features and
breaking changes before you manually upgrade your version of the 
{+atlas-cli+}.

.. _atlas-cli-redirect-stderr:

Redirect ``stderr``
~~~~~~~~~~~~~~~~~~~

The {+atlas-cli+} prints error messages and command deprecation
warnings in the output for commands. These unanticipated error messages
and warnings can cause issues for your automated processes that
anticipate a specific output. To prevent issues, you can redirect
``stderr`` to an output file in your script.

For example, the following command redirects the ``stderr`` output from
a script called ``myScript.sh`` to a text file called ``error.txt``:

.. code-block::

   myScript.sh 2> error.txt

In the previous example, all error messages and deprecation warnings
are stored in ``error.txt`` and don't display in the output, so
they don't disrupt your automated processes.

Command deprecation messages are similar to the following text:

.. code-block::

   Command "describe" is deprecated, Please use atlas privateEndpoints aws interfaces describe <atlasPrivateEndpointId> [--privateEndpointId privateEndpointID] [--projectId projected]

Update Scripts Regularly
~~~~~~~~~~~~~~~~~~~~~~~~

You should regularly update your scripts to discontinue use of 
deprecated commands because they will be removed in future releases.
You can learn which commands are deprecated from the
:ref:`atlas-cli-changelog`. If you 
:ref:`set up a redirect file for stderr <atlas-cli-redirect-stderr>`,
you can also check that file for deprecation warnings.

.. toctree::
   :titlesonly:

   Environment Variables </atlas-cli-env-variables>
   Customize Output </custom-output-cli>
   