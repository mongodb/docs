============
$setOnInsert
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. update:: $setOnInsert

   If an update operation with :ref:`upsert: true <upsert-parameter>`
   results in an insert of a document, then :update:`$setOnInsert`
   assigns the specified values to the fields in the document. If the
   update operation does not result in an insert,
   :update:`$setOnInsert` does nothing.

   You can specify the ``upsert`` option for either the
   :method:`db.collection.update()` or
   :method:`db.collection.findAndModify()` methods.

   .. code-block:: javascript

      db.collection.update(
         <query>,
         { $setOnInsert: { <field1>: <value1>, ... } },
         { upsert: true }
      )

   .. include:: /includes/use-dot-notation.rst

Example
--------

A collection named ``products`` contains no documents.

Then, the following :method:`db.collection.update()` with :ref:`upsert:
true <upsert-parameter>` inserts a new document.

.. code-block:: javascript

   db.products.update(
     { _id: 1 },
     {
        $set: { item: "apple" },
        $setOnInsert: { defaultQty: 100 }
     },
     { upsert: true }
   )

MongoDB creates a new document with ``_id`` equal to ``1`` from the
``<query>`` condition, and then applies the :update:`$set` and
:update:`$setOnInsert` operations to this document.

The ``products`` collection contains the newly-inserted document:

.. code-block:: javascript

   { "_id" : 1, "item" : "apple", "defaultQty" : 100 }

If the :method:`db.collection.update()` with :ref:`upsert: true
<upsert-parameter>` had found a matching document, then MongoDB
performs an update, applying the :update:`$set` operation but ignoring
the :update:`$setOnInsert` operation.

.. seealso::

   :method:`db.collection.update()`,

   :method:`db.collection.findAndModify()`
