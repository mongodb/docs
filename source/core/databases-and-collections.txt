.. _databases-and-collections:

====================================
Databases and Collections in MongoDB 
====================================

.. default-domain:: mongodb

.. facet::
   :name: genre 
   :values: reference

.. facet::
   :name: programming_language
   :values: shell 

.. meta:: 
   :keywords: drivers, table

.. facet::
   :name: genre 
   :values: reference

.. meta:: 
   :description: Learn how databases and collections work within MongoDB
   :keywords: atlas, compass, MongoDB

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview 
--------

MongoDB stores data records as :term:`documents <document>`
(specifically :ref:`BSON documents <bson-document-format>`) which are
gathered together in :term:`collections <collection>`.  A
:term:`database <database>` stores one or more collections of documents.

You can manage :atlas:`databases </atlas-ui/databases>` and
:atlas:`collections </atlas-ui/collections>` on the Atlas cluster from 
the Atlas UI, :binary:`~bin.mongosh`, or |compass|. This page describes
how to manage databases and collections on the Atlas cluster from the
Atlas UI. For self-managed deployments, you can use
:binary:`~bin.mongosh` or |compass| to manage databases and collections. 

Select the client that you want to use to manage databases and
collections.  

.. tabs:: 

   .. tab:: Atlas UI
      :tabid: atlas

      MongoDB Atlas is a multi-cloud database service that simplifies
      deploying and managing your databases on the cloud providers of
      your choice. 

   .. tab:: mongosh 
      :tabid: mongosh 

      The MongoDB Shell, :program:`mongosh`, is a JavaScript and Node.js 
      :abbr:`REPL (Read Eval Print Loop)` environment for interacting
      with MongoDB deployments. To learn more, see :mongosh:`mongosh
      </>`. 

   .. tab:: MongoDB Compass 
      :tabid: compass 

      MongoDB Compass is a powerful GUI for querying, aggregating, and
      analyzing your MongoDB data in a visual environment. To learn
      more, see :compass:`MongoDB Compass </>`.

Databases
---------

In MongoDB, databases hold one or more collections of documents. 

.. tabs:: 
   :hidden:

   .. tab:: Atlas UI
      :tabid: atlas

      To select a database to use, log in to Atlas and do the following:

      .. procedure:: 
         :style: normal

         .. step:: Navigate to the :guilabel:`Collections` tab.

         .. step:: Select the database from the list of databases in the left pane.

   .. tab:: mongosh 
      :tabid: mongosh 

      To select a database to use, in :binary:`~bin.mongosh`, issue the
      ``use <db>`` statement, as in the following example: 

      .. code-block:: javascript

         use myDB

   .. tab:: MongoDB Compass 
      :tabid: compass 

      To select a database to use, complete the following steps:

      .. procedure:: 
         :style: normal 

         .. step:: Start |compass| and connect to your cluster. 

            To learn more, see :compass:`Connect to MongoDB
            </connect/>`.
            
         .. step:: Select :guilabel:`Databases` from the left navigation. 

            The :guilabel:`Databases` tab opens to list the existing databases
            for your MongoDB deployment. 
            
Create a Database
~~~~~~~~~~~~~~~~~

.. tabs:: 
   :hidden:

   .. tab:: Atlas UI 
      :tabid: atlas

      To create a new database, log in to Atlas and do the following:

      .. procedure:: 
         :style: normal

         .. step:: Navigate to the :guilabel:`Collections` tab.

         .. step:: Click :guilabel:`Create Database`.

         .. step:: Enter the :guilabel:`Database Name` and the :guilabel:`Collection Name`.

            Enter the database and the collection name to create the
            database and its first collection. 

         .. step:: Click :guilabel:`Create`.

            Upon successful creation, the database and the collection
            displays in the left pane in the Atlas UI. 

   .. tab:: mongosh 
      :tabid: mongosh 

      If a database does not exist, MongoDB creates the database when you
      first store data for that database. As such, you can switch to a
      non-existent database and perform the following operation in
      :binary:`~bin.mongosh`:

      .. code-block:: javascript

         use myNewDB

         db.myNewCollection1.insertOne( { x: 1 } )

      The :method:`~db.collection.insertOne()` operation creates both the
      database ``myNewDB`` and the collection ``myNewCollection1`` if they do
      not already exist. Be sure that both the database and collection names
      follow MongoDB :ref:`restrictions-on-db-names`.

   .. tab:: MongoDB Compass 
      :tabid: compass 

      .. procedure:: 
         :style: normal   

         .. step:: Open the :guilabel:`Databases` tab.

         .. step:: Click the :guilabel:`Create database` button.

         .. step:: Enter database and first collection names in the :guilabel:`Create Database` dialog. 

         .. step:: Click :guilabel:`Create Database` to create the database and its first collection. 

.. _collections:

Collections
-----------

MongoDB stores documents in collections. Collections are analogous to
tables in relational databases.

.. include:: /images/crud-annotated-collection.rst

Create a Collection
~~~~~~~~~~~~~~~~~~~

If a collection does not exist, MongoDB creates the collection when you
first store data for that collection.

.. tabs:: 
   :hidden:

   .. tab:: Atlas 
      :tabid: atlas

      To create a new collection, log in to Atlas and do the following:

      .. procedure:: 
         :style: normal

         .. step:: Navigate to the :guilabel:`Collections` tab.

         .. step:: Click the :guilabel:`+` icon for the database.

         .. step:: Enter the name of the collection.

         .. step:: Click :guilabel:`Create`.

            Upon successful creation, the collection displays underneath
            the database in the Atlas UI. 

   .. tab:: mongosh 
      :tabid: mongosh 

      .. code-block:: javascript

         db.myNewCollection2.insertOne( { x: 1 } )
         db.myNewCollection3.createIndex( { y: 1 } )

      Both the :method:`~db.collection.insertOne()` and the
      :method:`~db.collection.createIndex()` operations create their
      respective collection if they do not already exist. Be sure that the
      collection name follows MongoDB :ref:`restrictions-on-db-names`.

   .. tab:: MongoDB Compass 
      :tabid: compass 

      .. procedure:: 
         :style: normal   

         .. step:: Click the name of the database where you to want to create a collection in the left navigation.

         .. step:: Click the :guilabel:`+` icon next to the database name.

         .. step:: Enter the name of the collection in the :guilabel:`Create Collection` dialog.

         .. step:: Click :guilabel:`Create Collection` to create the collection. 

Explicit Creation
~~~~~~~~~~~~~~~~~

.. tabs:: 
   :hidden:

   .. tab:: Atlas 
      :tabid: atlas

      To create a new collection, log in to Atlas and do the following:

      .. procedure:: 
         :style: normal

         .. step:: Navigate to the :guilabel:`Collections` tab.

         .. step:: Click the :guilabel:`+` icon for the database.

         .. step:: Enter the name of the collection.
         
         .. step:: Optional. From the :guilabel:`Additional Preferences` dropdown, select the type of collection that you want to create.

            You can create one of the following types of collections:
            
            - :ref:`Capped collection <manual-capped-collection>`

              If you select to create a capped collection, specify the
              maximum size in bytes. 

            - :ref:`Time Series Collection <manual-timeseries-landing>`

              If you select to create a time series collection, specify
              the time field and granularity. You can optionally specify
              the meta field and the time for old data in the collection
              to expire.  

            - :ref:`Clustered Index Collection <clustered-collections>`

              If you select to create a clustered collection, you must
              specify clustered index key value and a name for the
              clustered index.  
         
         .. step:: Click :guilabel:`Create`.

            Upon successful creation, the collection displays underneath
            the database in the Atlas UI.          

   .. tab:: mongosh 
      :tabid: mongosh 

      MongoDB provides the :method:`db.createCollection()` method to
      explicitly create a collection with various options, such as setting
      the maximum size or the documentation validation rules. If you are not
      specifying these options, you do not need to explicitly create the
      collection since MongoDB creates new collections when you first store
      data for the collections.

      To modify these collection options, see :dbcommand:`collMod`.

   .. tab:: MongoDB Compass 
      :tabid: compass 

      .. procedure:: 
         :style: normal   

         .. step:: Click the name of the database where you to want to create a collection in the left navigation.

         .. step:: Click the :guilabel:`Create collection` button.

         .. step:: Enter the name of the collection and optionally, configure additional preferences.

         .. step:: Click :guilabel:`Create Collection` to create the collection. 

            |compass| provides the following additional preferences that
            you can configure for your collection: 

            - :compass:`Create a Capped Collection</collections/capped-collection/>`
            - :compass:`Create a Clustered Collection</collections/clustered-collection/>`
            - :compass:`Create a Collection with Collation </collections/collation-collection/>`
            - :compass:`Create a Collection with Encrypted Field </collections/encrypted-collection/>`
            - :compass:`Create a Time Series Collection </collections/time-series-collection/>`

Document Validation
~~~~~~~~~~~~~~~~~~~

By default, a collection does not require its documents to have the
same schema; i.e. the documents in a single collection do not need to
have the same set of fields and the data type for a field can differ
across documents within a collection.

However, you can enforce :doc:`document validation rules 
</core/schema-validation>` for a collection during update and insert operations. 
See :doc:`/core/schema-validation` for details.

For deployments hosted in {+atlas+}, the :atlas:`Performance Advisor 
</performance-advisor>` and the {+atlas+} UI detect common schema
design issues and suggest modifications that follow MongoDB best
practices. To learn more, see :atlas:`Schema Suggestions 
</performance-advisor/schema-suggestions/#schema-suggestions>`.

Modifying Document Structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To change the structure of the documents in a collection, such as add
new fields, remove existing fields, or change the field values to a new
type, update the documents to the new structure.


.. _collections-uuids:

Unique Identifiers
~~~~~~~~~~~~~~~~~~

Collections are assigned an immutable :abbr:`UUID (Universally unique
identifier)`. The
collection UUID remains the same across all members of a replica set
and shards in a sharded cluster.

.. tabs:: 
   :hidden:

   .. tab:: Atlas 
      :tabid: atlas

   .. tab:: mongosh 
      :tabid: mongosh 

      To retrieve the UUID for a collection, run either the
      :manual:`listCollections </reference/command/listCollections>` command
      or the :method:`db.getCollectionInfos()` method.

   .. tab:: MongoDB Compass 
      :tabid: compass

.. toctree::
   :titlesonly:
   :hidden:

   Views </core/views>
   On-Demand Materialized Views </core/materialized-views>
   Capped Collections </core/capped-collections>
   Clustered Collections </core/clustered-collections>
