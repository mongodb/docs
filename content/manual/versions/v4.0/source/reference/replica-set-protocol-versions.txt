============================
Replica Set Protocol Version
============================

.. default-domain:: mongodb


Starting in version 4.0, MongoDB only supports replica set protocol
version 1 (:rsconf:`pv1 <protocolVersion>`). ``pv1`` is the default for
all new replica sets created with MongoDB 3.2 or later.

Preservation of Writes
----------------------

``w:1`` Writes
~~~~~~~~~~~~~~

With :rsconf:`pv1 <protocolVersion>`, you can use
:rsconf:`~settings.catchUpTimeoutMillis` to prioritize between faster
failovers and preservation of :writeconcern:`w:1 <\<number\>>` writes.

``w: "majority"`` Writes
~~~~~~~~~~~~~~~~~~~~~~~~

``pv1`` guarantees the preservation of confirmed :writeconcern:`w:
"majority" <"majority">` writes.

Availability
------------

``pv1`` is available in MongoDB version 3.2 or later and is the default
for all new replica sets created with version 3.2 or later.

Arbiters
--------

.. include:: /includes/extracts/arbiters-and-pvs.rst

Priorities
----------

.. include:: /includes/extracts/priorities-and-pvs.rst

Vetoes
------

``pv1`` does not use vetoes. Individual members can vote for or against
a candidate in a particular election, but cannot individually veto (abort)
an election unilaterally.

.. _simultaneous-primaries:

Detection of Simultaneous Primaries
-----------------------------------

.. include:: /includes/footnote-two-primaries-edge-cases.rst

``pv1`` uses the concept of :term:`term`. This allows for a faster
detection of simultaneous primaries and for multiple successful
elections in a short period of time.

Back to Back Elections
----------------------

``pv1`` makes a "best-effort" attempt to have the secondary with the
highest :rsconf:`~members[n].priority` available call an election. This
could lead to back-to-back elections as eligible members with
higher priority can call an election.

However, in MongoDB 3.6+ (as well as MongoDB 3.4.2+ and 3.2.12+), for ``pv1``:

- Priority elections have been limited to occur only if the higher
  priority node is within 10 seconds of the current primary. 

- Arbiters will vote no in elections if they detect a healthy primary
  of equal or greater priority to the candidate.

Double Voting
-------------

``pv1`` prevents double voting in one member's call for election. This
is achieved through its use of :term:`terms <term>`.

.. _update-replica-set-protocol-version:

Modify Replica Set Protocol Version
------------------------------------

Starting in version 4.0, MongoDB only supports replica set protocol
version 1 (:rsconf:`pv1 <protocolVersion>`).

However, MongoDB 3.2 through MongoDB 3.6 support replica set protocol
version ``1`` and protocol version ``0``.

Before changing the protocol version for MongoDB 3.2 through MongoDB
3.6, ensure that at least one oplog entry (generated from the current
protocol version) has replicated from the primary to all secondaries.
To check, on each secondary, check the :data:`optimes.lastCommittedOpTime.t
<replSetGetStatus.optimes.lastCommittedOpTime>` field returned from
:method:`rs.status()`. For example, connect a :binary:`~bin.mongo`
shell to each secondary and run:

.. code-block:: javascript

   rs.status().optimes.lastCommittedOpTime.t

- If the current replica set protocol version is ``0``, the ``t`` is equal
  to ``-1``.

- If the current replica set protocol version is ``1``, the ``t`` is greater
  than ``-1``.

Once you have verified that at least one oplog entry (using the current
protocol version) has replicated to all the secondaries, you can change
the protocol version.

To change the replica set protocol version, reconfigure
(:method:`rs.reconfig`) the replica set with the new
:rsconf:`protocolVersion`. For example, to upgrade to ``pv1``, connect
a :binary:`~bin.mongo` shell to the current primary and perform the
following sequence of operations:

.. code-block:: sh

   cfg = rs.conf();
   cfg.protocolVersion=1;
   rs.reconfig(cfg);

You can use :rsconf:`~settings.catchUpTimeoutMillis` to prioritize
between faster failovers and preservation of :writeconcern:`w:1
<\<number\>>` writes.
