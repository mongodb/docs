.. meta::
   :robots: noindex, nosnippet

==========================
Manage Users - Node.js SDK
==========================

.. toctree::
   :titlesonly:

   Create and Delete Users </sdk/node/users/create-delete-users>
   Authenticate Users </sdk/node/users/authenticate-users>
   Custom User Data </sdk/node/users/access-custom-user-data>
   User Metadata </sdk/node/users/user-metadata>
   Manage Email/Password Users </sdk/node/users/manage-email-password-users>
   Multi-User Applications </sdk/node/users/multi-user-applications>
   Link User Identities </sdk/node/users/link-identities>
   Create & Manage User API Keys </sdk/node/users/manage-user-api-keys>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

When you use Atlas App Services to back your client app, you get access to a
:ref:`user object <user-objects>`. Use Node.js SDK methods with this user 
object to conveniently:

- Create and delete users
- Log users in and out
- Create and update custom user data
- Read user metadata from social login providers

.. _node-creating-and-deleting-users:

Create and Delete Users
-----------------------

For all authentication providers other than email/password authentication,
App Services automatically :ref:`creates a user object <node-create-user>` 
the first time a user authenticates. If a user authenticates via more than 
one method, you can :ref:`link these user identities <node-link-user-identities>` 
to a single user object. 

You can :ref:`delete user objects <node-delete-user>`. Deleting a user object 
deletes metadata attached to the user object, but does not delete user-entered
data from the backend.

.. include:: /includes/apple-account-deletion-requirements.rst

.. _node-access-the-app-client:

Log Users In and Out
--------------------

Use one or more :ref:`authentication providers <auth-providers>` to :ref:`log 
users in and out <node-authenticate-users>` of your client app. You can: 

- Log users in with an existing social account, such as Apple, Facebook,
  or Google. 
- Create new user accounts with App Services email/password management,
  or your own custom function or custom JWT user management.
- Enable anonymous users to let users access your App Services App without persisting
  user data.

When you have a logged-in user, SDK methods enable you to:

- :ref:`Open a synced realm <node-open-a-synced-realm>` with the user's 
  configuration object
- :ref:`Run a backend function <node-call-a-function>` as the logged-in user
- :ref:`Log the user out <node-logout>`
- :ref:`Change the active user <node-change-the-active-user>` in a multi-user 
  application
- :ref:`Remove a user <node-remove-a-user-from-the-device>` from the device

On successful login, the Node.js SDK caches credentials on the device. You 
can bypass the login flow and access the cached user. Use this to open a 
realm or call a function upon subsequent app opens. 

User Sessions
~~~~~~~~~~~~~

.. include:: /includes/manage-user-sessions.rst

.. _node-app-work-with-custom-user-data:

Read and Update Custom User Data
--------------------------------

You can :ref:`associate custom data <custom-user-data>` with a user object, 
such as a preferred language or local timezone, and read it from your client 
application. A user object has a ``customData`` property that you can use 
to :ref:`access custom user data <node-access-custom-user-data>`. 

To create and update custom user data, you must access 
your MongoDB data source directly. App Services does not offer a SDK 
method to create or update this custom user data; it's a read-only property.

.. _node-app-read-user-metadata-from-login-providers:

Read User Metadata from Login Providers
---------------------------------------

Some authentication providers enable developers to access user metadata, such
as full name or email address. When you configure these metadata fields on 
the App Services application, you can read this medata from your client app. A
user object has a ``profile`` property that you can use to :ref:`access 
user metadata <node-user-metadata>`.
