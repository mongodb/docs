# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# ca26ccc10d8d480ba9e15ff0394ec1cc
#: ../source/reference/method/sh.updateZoneKeyRange.txt:3
msgid "sh.updateZoneKeyRange()"
msgstr ""

# de4d0c7afe8a4fc19c61466eda035618
#: ../source/reference/method/sh.updateZoneKeyRange.txt
msgid "On this page"
msgstr ""

# 0736b9979d7d43468a69c1f8e54ebf0b
#: ../source/reference/method/sh.updateZoneKeyRange.txt:14
msgid "Definition"
msgstr ""

# 260ac0de1f6c49a087fa07a2c232ed48
#: ../source/reference/method/sh.updateZoneKeyRange.txt:20
msgid ""
"Associates a range of shard key values with a :term:`zone`. "
":method:`sh.updateZoneKeyRange()` takes the following arguments:"
msgstr ""

# eb3ac1d2f53047348340609bd537b76c
#: ../source/reference/method/sh.updateZoneKeyRange.txt:25
msgid ""
"Only issue :method:`sh.updateZoneKeyRange()` when connected to a "
":program:`mongos` instance."
msgstr ""

# 34330ee3802b496099dac67b02d83fec
#: ../source/reference/method/sh.updateZoneKeyRange.txt:29
msgid "Behavior"
msgstr ""

# f81cfe8fb9d442289d64bbf883246c84
#: ../source/reference/method/sh.updateZoneKeyRange.txt:31
msgid ""
"You cannot create a range of shard key values whose lower and upper "
"boundaries overlap with an existing range for the sharded collection. For"
" example, given an existing range of ``1`` to ``10``, you cannot create a"
" new range of ``5`` to ``20``, as the new range would overlap with the "
"existing range."
msgstr ""

# a4fb66889c8940d59127b8036e2ff2ce
#: ../source/reference/method/sh.updateZoneKeyRange.txt:36
msgid ""
"A zone can have multiple ranges of data associated with it, but a range "
"can at most be associated with a single zone."
msgstr ""

# 83bd8a725ac24677a9282db41d3dd10d
#: ../source/reference/method/sh.updateZoneKeyRange.txt:39
msgid ""
"See the :ref:`zone <zone-sharding>` manual page for more information on "
"zones in sharded clusters."
msgstr ""

# 2faf948f9d8f4deb85bb98fba6cf767e
#: ../source/reference/method/sh.updateZoneKeyRange.txt:43
msgid "Balancer"
msgstr ""

# dac648db19a74eed98ec3c4b23645fe0
#: ../source/reference/method/sh.updateZoneKeyRange.txt:45
msgid ""
"After associating a range to a zone, the :ref:`balancer <sharding-"
"balancing-internals>` must first run in order to migrate any chunks whose"
" ranges are covered by the zone to shards inside of that zone. Until "
"balancing completes, some chunks may reside on the wrong shard given the "
"configured zones for the sharded cluster. See :ref:`zone-sharding-"
"balancer` for more information."
msgstr ""

# a7d50c1976e44ae98194719929637128
#: ../source/reference/method/sh.updateZoneKeyRange.txt:52
msgid ""
"See the :ref:`sharded cluster balancer <sharding-balancing>` manual page "
"for more information on how migrations work in a sharded cluster."
msgstr ""

# 5bb0dc14db0a4d21aeab4b4b59c5abc8
#: ../source/reference/method/sh.updateZoneKeyRange.txt:56
msgid "Bounds"
msgstr ""

# 64b559a4dc994ea28ab3d709a6053288
#: ../source/includes/fact-shard-ranges-inclusive-exclusive.rst:1
msgid ""
"Zone ranges are always inclusive of the lower boundary and exclusive of "
"the upper boundary."
msgstr ""

# 2658ffdc4d7e4c64a37fc9f8f4a7ea57
#: ../source/reference/method/sh.updateZoneKeyRange.txt:61
msgid "Dropped Collections"
msgstr ""

# 5844f392768a435bbf80624aa8e9b209
#: ../source/reference/method/sh.updateZoneKeyRange.txt:63
msgid ""
"If you add a zone range to a collection using "
":method:`sh.updateZoneKeyRange()` and then later drop the collection or "
"its database, MongoDB does not remove the zone association. If you later "
"create a new collection with the same name, the old zone association "
"applies to the new collection."
msgstr ""

# 6ef7a6aec61146008c325d7b133a40b2
#: ../source/reference/method/sh.updateZoneKeyRange.txt:69
msgid "Security"
msgstr ""

# 3a33bffcb6c442abb7801114c6525d5a
#: ../source/reference/method/sh.updateZoneKeyRange.txt:71
msgid ""
"For sharded clusters running with :ref:`authentication <authentication>`,"
" you must authenticate as a user whose privileges include:"
msgstr ""

# e9059484c5f34049b3710367ece30a73
#: ../source/reference/method/sh.updateZoneKeyRange.txt:74
msgid ""
":authaction:`find` on the ``config.shards`` collection or the ``config`` "
"database"
msgstr ""

# 66a7887524934fa686637efbe716b060
#: ../source/reference/method/sh.updateZoneKeyRange.txt:77
msgid ""
":authaction:`find` on the ``config.tags`` collection or the ``config`` "
"database"
msgstr ""

# 992c8566d6444c19b0443054df93a00a
#: ../source/reference/method/sh.updateZoneKeyRange.txt:80
msgid ""
":authaction:`update` on the ``config.tags`` collection or the ``config`` "
"database"
msgstr ""

# 2b29a06e6caf41e7ab7a8469178fbb83
#: ../source/reference/method/sh.updateZoneKeyRange.txt:83
msgid ""
"The :authrole:`clusterAdmin` or :authrole:`clusterManager` built-in roles"
" have the appropriate permissions for issuing "
":method:`sh.updateZoneKeyRange()`. See the documentation page for :ref"
":`Role-Based Access Control <authorization>` for more information."
msgstr ""

# b973175c7f0245269fda7e759a9e1e7c
#: ../source/reference/method/sh.updateZoneKeyRange.txt:89
msgid "Example"
msgstr ""

# 3d0f0f8f08754e3aadffabde10eff27a
#: ../source/reference/method/sh.updateZoneKeyRange.txt:91
msgid ""
"Given a sharded collection ``exampledb.collection`` with a shard key of "
"``{ a : 1 }``, the following operation creates a range with a lower bound"
" of ``1`` and an upper bound of ``10`` on the ``alpha`` zone:"
msgstr ""

# 179c8a570810496db9e240dc0fe88180
#: ../source/reference/method/sh.updateZoneKeyRange.txt:104
msgid ""
"The following operation removes the previously created range by passing "
"``null`` to the ``zone`` field."
msgstr ""

# d76bfdba0cc14a839bcc471fae67c663
#: ../source/reference/method/sh.updateZoneKeyRange.txt:116
msgid ""
"The ``min`` and ``max`` must match exactly the bounds of the target "
"range. The following operation attempts to remove the previously created "
"range, but specifies ``{ a : 0 }`` as the ``min`` bound:"
msgstr ""

# f548df72298d4b9e88b3d190210ff04d
#: ../source/reference/method/sh.updateZoneKeyRange.txt:129
msgid ""
"While the range of ``{ a : 0 }`` and ``{ a : 10 }`` encompasses the "
"existing range, it is not an exact match and therefore "
":dbcommand:`updateZoneKeyRange` does not remove anything."
msgstr ""

# 8cd3faff788445baa9d8ae010d2cf670
#: ../source/reference/method/sh.updateZoneKeyRange.txt:134
msgid "Compound Shard Key"
msgstr ""

# 260a4fe653c74618a2bee0fc05213060
#: ../source/reference/method/sh.updateZoneKeyRange.txt:136
msgid ""
"Given a sharded collection ``exampledb.collection`` with a shard key of "
"``{ a : 1, b : 1 }``, the following operation creates a range covering "
"the lower bound of ``{ a: 1, b : 1 }`` and an upper bound of ``{ a : 10, "
"b : 10}`` and associates it with the ``alpha`` zone:"
msgstr ""

# 5dbcedbde0b84cac94afa07d79c359c2
#: ../source/reference/method/sh.updateZoneKeyRange.txt:150
msgid ""
"If you wanted to create a range on values of ``b`` only, you must specify"
" the entire range of ``a`` when creating ranges. For example, the "
"following operations create two ranges on ``b`` and associates them to "
"the ``beta`` zone."
msgstr ""

# 0cc745d4072a40ae9dccbf0e129cf690
#: ../source/reference/method/sh.updateZoneKeyRange.txt:157
msgid ""
"The previously defined range conflicts with the ranges defined in this "
"example. Issue the :method:`sh.removeRangeFromZone()` operation to remove"
" an existing conflicting range."
msgstr ""

# 9da6720c7e724267bfface4139e16860
#: ../source/reference/method/sh.updateZoneKeyRange.txt:177
msgid ""
":bsontype:`MinKey` always compares as lower than every other possible "
"value, while :bsontype:`MaxKey` always compares as higher than every "
"other possible value. Using these special values for the lower and upper "
"bounds of the range captures the entire possible value space of ``a``."
msgstr ""

# c70a000ab9b4459aaf2e2028c36c76ef
#: ../source/reference/method/sh.updateZoneKeyRange.txt:182
msgid ":method:`sh.addShardToZone()`, :method:`sh.removeRangeFromZone()`"
msgstr ""

