.. _fts-tutorials:

===============
|fts| Tutorials
===============

.. default-domain:: mongodb

.. meta:: 
   :keywords: atlas search, atlas search tutorials, set up an atlas search index, query a collection with an atlas search index, autocomplete tutorial, compound queries with weighted fields tutorial, queries with a date range filter tutorial, queries with objects in arrays tutorial, compound geo json query tutorial, facets tutorial, partial match query tutorial, synonyms tutorial, multilingual queries tutorial, diacritic insensitive queries tutorial, sort results tutorial, strings queries with date and numeric fields tutorial, query in multiple collections tutorial, build an atlas search ui tutorial, materialized views, app services, scheduled triggers
   :description: Follow step-by-step Atlas Search tutorials to configure a search index with autocomplete, facets, synonyms, and more.
   
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The following tutorials take you through the steps of setting up and 
querying an |fts| index. 

.. _fts-tutorials-prereqs:

Prerequisites 
-------------

To complete these tutorials, you must have the following: 

- An |service| cluster with MongoDB version 4.2 or higher.

- The :doc:`sample data </sample-data>` loaded into your |service| 
  cluster.
  
- One of the following applications to run queries on your |service|
  {+cluster+}:

  - {+mongosh+}
  - :dl:`Compass <compass>`
  - :driver:`C# </csharp/current/>`
  - :driver:`Go </go/current/>`
  - :driver:`Java </java-drivers/>`
  - :driver:`MongoDB Node Driver </node/current/>`
  - :driver:`Pymongo </pymongo/>`

About the Tutorials 
-------------------

- The :ref:`autocomplete-tutorial` tutorial describes how to create and 
  query an |fts| index configured with an ``autocomplete`` field using 
  the ``autocomplete`` operator. We will create the |fts| index on the 
  ``sample_mflix.movies`` collection and index ``title`` field text 
  values for autocompletion. We will run |fts| queries using 
  the ``autocomplete`` operator to search the indexed field for a 
  sequence of characters.

- The :ref:`compound-query-custom-score-tutorial` tutorial describes 
  how to create a dynamic index and run compound queries with custom 
  scoring. The queries search the ``sample_mflix.movies`` collection 
  and alter the relevance score of the documents in the result using 
  :ref:`scoring-constant`, :ref:`scoring-boost`, and 
  :ref:`scoring-function` options.

- The :ref:`compound-query-date-range-tutorial` tutorial describes how 
  to create a dynamic index and run compound queries that use the 
  ``range`` operator. The queries search the ``sample_mflix.movies`` 
  collection for movies between a specified date range.

- The :ref:`embedded-documents-tutorial` tutorial demonstrates how to 
  index fields of type string inside an array of objects and run 
  |fts| queries against the indexed fields.

- The :ref:`run-geo-search-tutorial` tutorial describes 
  how to create an index on the ``sample_airbnb.listingsAndReviews`` 
  collection and run a query that returns documents with the
  ``name``, ``address``, and ``property_type``
  of each property within a specified polygon defined using ``coordinates``.
  |fts| results reflect a preference for properties of type ``condominium``, 
  and each document in the result is assigned a relevance ``score``, 
  returned in order from highest to lowest.

- The :ref:`facet-tutorial` tutorial describes how to create an index 
  with a facet definition for the ``sample_mflix.movies`` collection 
  and run queries against the faceted fields for results grouped by 
  values and ranges in the specified, faceted fields, including a 
  count for each of those groups.

- The :ref:`partial-match-tutorial` tutorial describes how to create an 
  index on the ``sample_mflix.movies`` collection and run case-sensitive
  partial match queries against the indexed field using 
  :ref:`autocomplete-ref`, :ref:`phrase-ref`, :ref:`regex-ref`, and 
  :ref:`wildcard-ref` operators.

- The :ref:`synonyms-tutorial` tutorial describes how to add a 
  collection that configures words as synonyms, create an index that 
  defines synonym mappings on the ``sample_mflix.movies`` collection, 
  and run |fts| queries against the ``title`` field using words that 
  are configured as synonyms.

- The :ref:`multilingual-tutorial` tutorial describes how to create an 
  index that uses a language analyzer and perform a multilingual search
  against the ``sample_mflix.movies`` collection. The queries search the
  ``sample_mflix.movies`` collection for full movie plots that contain a
  multilingual term.

- The :ref:`diacritic-insensitive-tutorial` tutorial describes how to
  create an index that uses a custom analyzer and perform a
  diacritic-insensitive search against the ``sample_mflix.movies``
  collection. The query searches the ``sample_mflix.movies`` collection
  for movie titles that contain the given term regardless if the term
  contains diacritics.

- The :ref:`sort-tutorial` tutorial describes how to index and store
  fields on ``mongot`` for interim operations such as sort, run queries
  against the indexed fields, and then sort the results on the returned
  fields using :pipeline:`$sort` and ``score``. 

- The :ref:`query-nonstring-tutorial` tutorial describes how to run 
  queries against numeric and date fields using operators that 
  support only string queries. The queries search for properties that were 
  listed on certain dates and allow them to stay up to a certain number of 
  days.
  
- The :ref:`fts-cross-collection-tutorials` contains tutorials that 
  describe how to run queries across multiple collections by first 
  combining collections using :pipeline:`$lookup`, and 
  :pipeline:`$unionWith`, and then running :pipeline:`$search` queries 
  against the collections.

- The :ref:`reactivesearch-tutorial` describes how to set up |service| 
  and use :appservices:`{+atlas-app-services+} </>` to run queries and 
  build a search UI that uses `Searchbox 
  <https://opensource.appbase.io/searchbox/>`_ and `ReactiveSearch 
  <https://opensource.appbase.io/reactivesearch/>`_ UI libraries.

.. tip:: Want more |fts| content?

   - Take `Unit 9 of the Intro To MongoDB Course on MongoDB University 
     <https://learn.mongodb.com/courses/mongodb-atlas-search>`__ for an
     overview of |fts| and lessons on creating |fts| indexes, running
     :pipeline:`$search` queries using compound operators, and grouping 
     results using :ref:`fts-facet-ref`. 

   - Visit the `MongoDB Developer Center 
     <https://www.mongodb.com/developer/products/atlas/search/>`__ for 
     more real-world |fts| examples.

   - Try the full-text search examples in the `Practical MongoDB 
     Aggregations Book <https://www.practical-mongodb-aggregations.com/examples/full-text-search/full-text-search.html>`__.

.. toctree::
   :titlesonly:
   
   Use Autocomplete </atlas-search/tutorial/autocomplete-tutorial>
   Run Compound Queries with Weighted Fields </atlas-search/tutorial/compound-query-custom-score>
   Run Queries Against Objects in Arrays </atlas-search/tutorial/embedded-documents-tutorial>
   Run Queries with a Date Range Filter </atlas-search/tutorial/compound-query-date-range>
   Run a Geo JSON Query </atlas-search/tutorial/run-geo-query.txt>
   Use Facets </atlas-search/tutorial/facet-tutorial>
   Run Partial Match Queries </atlas-search/tutorial/partial-match>
   Use Synonyms </atlas-search/tutorial/synonyms-tutorial>
   Run Multilingual Queries </atlas-search/tutorial/multilingual-tutorial>
   Run a Diacritic-Insensitive Query </atlas-search/tutorial/diacritic-insensitive>
   Sort Results <atlas-search/tutorial/sort-tutorial>
   Run String Queries Against Date and Numeric Fields </atlas-search/tutorial/query-date-number-fields>
   Run Queries Across Collections </atlas-search/tutorial/cross-collection-tutorials>
   Build a Search UI </atlas-search/tutorial/reactivesearch-tutorial>
   Check for Null Values </atlas-search/tutorial/null-check>
