# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/fundamentals.txt:3
# 83fb623ebe28435cb39cc49934ee769b
msgid "FAQ: MongoDB Fundamentals"
msgstr ""

#: ../source/faq/fundamentals.txt:7
# 47c077d4c4ae4cc3a3058e7c957945c8
msgid "This document addresses basic high level questions about MongoDB and its use."
msgstr ""

#: ../source/faq/fundamentals.txt:10
# 6e399d9e3e614e93a278e58d2eccdca7
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/fundamentals.txt:15
# 71a8c6658b3246f7841552f406a8e910
msgid "What kind of database is MongoDB?"
msgstr ""

#: ../source/faq/fundamentals.txt:17
# f6dfa8ac08774d4bb867fbf1a179b3de
msgid "MongoDB is a :term:`document`\\-oriented DBMS. Think of MySQL but with :term:`JSON`-like objects comprising the data model, rather than RDBMS tables. Significantly, MongoDB supports neither joins nor transactions. However, it features secondary indexes, an expressive query language, atomic writes on a per-document level, and fully-consistent reads."
msgstr ""

#: ../source/faq/fundamentals.txt:23
# 8b9240220b66435d9b09d5af1654664e
msgid "Operationally, MongoDB features master-slave replication with automated failover and built-in horizontal scaling via automated range-based partitioning."
msgstr ""

#: ../source/faq/fundamentals.txt:29
# e6484965d75b4dea9646359cb9fa44d2
msgid "MongoDB uses :term:`BSON`, a binary object format similar to, but more expressive than :term:`JSON`."
msgstr ""

#: ../source/faq/fundamentals.txt:33
# 4619d3aef3204dac8fc1bcfa3375771b
msgid "Do MongoDB databases have tables?"
msgstr ""

#: ../source/faq/fundamentals.txt:35
# 334cb9cf30c64b8391bb47b851136f66
msgid "Instead of tables, a MongoDB database stores its data in :term:`collections <collection>`, which are the rough equivalent of RDBMS tables. A collection holds one or more :term:`documents <document>`, which corresponds to a record or a row in a relational database table, and each document has one or more fields, which corresponds to a column in a relational database table."
msgstr ""

#: ../source/faq/fundamentals.txt:43
# fd291729532c4fb8a6b13dc140ae6d82
msgid "Collections have important differences from RDBMS tables. Documents in a single collection may have a unique combination and set of fields. Documents need not have identical fields. You can add a field to some documents in a collection without adding that field to all documents in the collection."
msgstr ""

#: ../source/faq/fundamentals.txt:0
#: ../source/faq/fundamentals.txt:0
# b0fcd0aba9444047a2fe4e5a854f7ed4
# 43f6d1768df645a2a3e8e1f9cb2161fd
msgid "See"
msgstr ""

#: ../source/faq/fundamentals.txt:54
# dc919738ffb54b62bb62025265447067
msgid "Do MongoDB databases have schemas?"
msgstr ""

#: ../source/faq/fundamentals.txt:56
# 991545ab33244ba2976accda10095fc7
msgid "MongoDB uses dynamic schemas. You can create collections without defining the structure, i.e. the fields or the types of their values, of the documents in the collection. You can change the structure of documents simply by adding new fields or deleting existing ones. Documents in a collection need not have an identical set of fields."
msgstr ""

#: ../source/faq/fundamentals.txt:62
# 32364a2f6b1342228484527a6b1321a6
msgid "In practice, it is common for the documents in a collection to have a largely homogeneous structure; however, this is not a requirement. MongoDB's flexible schemas mean that schema migration and augmentation are very easy in practice, and you will rarely, if ever, need to write scripts that perform \"alter table\" type operations, which simplifies and facilitates iterative software development with MongoDB."
msgstr ""

#: ../source/faq/fundamentals.txt:73
# 7854b4adf0ad47318709c07ff2625488
msgid "What languages can I use to work with MongoDB?"
msgstr ""

#: ../source/faq/fundamentals.txt:75
# 84f781ec22354bb085ef4bd726469e02
msgid "MongoDB :term:`client drivers <driver>` exist for all of the most popular programming languages, and many other ones. See the :ecosystem:`latest list of drivers </drivers>` for details."
msgstr ""

#: ../source/faq/fundamentals.txt:81
# df3703213ebb4de6854f4618e3a977f6
msgid ":doc:`/applications/drivers`."
msgstr ""

#: ../source/faq/fundamentals.txt:84
# 8a311a60dda84f49be61d5b13c5e930d
msgid "Does MongoDB support SQL?"
msgstr ""

#: ../source/faq/fundamentals.txt:86
# 593f7bf40a474da1bcff7c46b74f6636
msgid "No."
msgstr ""

#: ../source/faq/fundamentals.txt:88
# a05579bd95494c0d929ab72a8c92e96b
msgid "However, MongoDB does support a rich, ad-hoc query language of its own."
msgstr ""

#: ../source/faq/fundamentals.txt:91
# 37c14659fc5f4e90b69a1023dd30c0f0
msgid ":doc:`/reference/operator`"
msgstr ""

#: ../source/faq/fundamentals.txt:94
# d22af80615774c5b8682d48123725854
msgid "What are typical uses for MongoDB?"
msgstr ""

#: ../source/faq/fundamentals.txt:96
# cd2d6499650743e3b5f48b13791b64c4
msgid "MongoDB has a general-purpose design, making it appropriate for a large number of use cases. Examples include content management systems, mobile applications, gaming, e-commerce, analytics, archiving, and logging."
msgstr ""

#: ../source/faq/fundamentals.txt:101
# 9846537698f6425a8809c3983530b723
msgid "Do not use MongoDB for systems that require SQL, joins, and multi-object transactions."
msgstr ""

#: ../source/faq/fundamentals.txt:105
# 1f69366556de4c86b176db32791b6d7a
msgid "Does MongoDB support ACID transactions?"
msgstr ""

#: ../source/faq/fundamentals.txt:107
# c6acc81c8f654d858a46e635600de1d2
msgid "MongoDB does not support multi-document transactions."
msgstr ""

#: ../source/faq/fundamentals.txt:109
# ac388142f1074dce94e9df05dc351771
msgid "However, MongoDB does provide atomic operations on a single document. Often these document-level atomic operations are sufficient to solve problems that would require ACID transactions in a relational database."
msgstr ""

#: ../source/faq/fundamentals.txt:114
# 82d29c47a44d4207adc3f2b0b7557cfe
msgid "For example, in MongoDB, you can embed related data in nested arrays or nested documents within a single document and update the entire document in a single atomic operation. Relational databases might represent the same kind of data with multiple tables and rows, which would require transaction support to update the data atomically."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:1
# 2d7167ee49454be692a4cb3493f89b21
msgid "MongoDB allows clients to read documents inserted or modified before it commits these modifications to disk, regardless of write concern level or journaling configuration. As a result, applications may observe two classes of behaviors:"
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:6
# 12a4383f57f346d896851d3f4a7a9404
msgid "For systems with multiple concurrent readers and writers, MongoDB will allow clients to read the results of a write operation before the write operation returns."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:10
# 3198e3b4ceb74d4e81a726ba3a9cb794
msgid "If the :program:`mongod` terminates before the journal commits, even if a write returns successfully, queries may have read data that will not exist after the :program:`mongod` restarts."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:14
# e76a64f17614471dbc11e3f68f75b36c
msgid "Other database systems refer to these isolation semantics as *read uncommitted*. For all inserts and updates, MongoDB modifies each document in isolation: clients never see documents in intermediate states. For multi-document operations, MongoDB does not provide any multi-document transactions or isolation."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:20
# 61f272b604fc425388af5cee3435d897
msgid "When a standalone :program:`mongod` returns a successful *journaled write concern*, the data is fully committed to disk and will be available after :program:`mongod` restarts."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:24
# 9e0d1a664f4b4f798f91b1e4faad149b
msgid "For replica sets, write operations are durable only after a write replicates and commits to the journal on a majority of the voting members of the set. MongoDB regularly commits data to the journal regardless of journaled write concern: use the :setting:`~storage.journal.commitIntervalMs` to control how often a :program:`mongod` commits the journal."
msgstr ""

#: ../source/faq/fundamentals.txt:123
# b2c5cf8d91754bff8d9d696f5df7ff6f
msgid "Does MongoDB require a lot of RAM?"
msgstr ""

#: ../source/faq/fundamentals.txt:125
# 0a3557433a71480786e2f329de05400d
msgid "Not necessarily. It's certainly possible to run MongoDB on a machine with a small amount of free RAM."
msgstr ""

#: ../source/faq/fundamentals.txt:128
# e0e394d70e384ae9a91f78962c2213ab
msgid "MongoDB automatically uses all free memory on the machine as its cache. System resource monitors show that MongoDB uses a lot of memory, but its usage is dynamic. If another process suddenly needs half the server's RAM, MongoDB will yield cached memory to the other process."
msgstr ""

#: ../source/faq/fundamentals.txt:133
# 0a340f06917b42ea9782aa323e18100c
msgid "Technically, the operating system's virtual memory subsystem manages MongoDB's memory. This means that MongoDB will use as much free memory as it can, swapping to disk as needed. Deployments with enough memory to fit the application's working data set in RAM will achieve the best performance."
msgstr ""

#: ../source/faq/fundamentals.txt:139
# a580bec6f6ba47128d473b0e9083587c
msgid ":doc:`/faq/diagnostics` for answers to additional questions about MongoDB and Memory use."
msgstr ""

#: ../source/faq/fundamentals.txt:143
# 79a0fec8559b499281672c60bd0ba1e8
msgid "How do I configure the cache size for MMAPv1?"
msgstr ""

#: ../source/faq/fundamentals.txt:145
# f5ded28ec5f94e3dbcdf2a53a52f28c3
msgid "MongoDB has no configurable cache for MMAPv1 storage engine. MongoDB uses all *free* memory on the system automatically by way of memory-mapped files. Operating systems use the same approach with their file system caches."
msgstr ""

#: ../source/faq/fundamentals.txt:150
# 28e10f07e9b744429c27511a05d8f241
msgid "For the WiredTiger storage engine, you can specify the maximum size of the cache that WiredTiger will use for all data. See :setting:`storage.wiredTiger.engineConfig.cacheSizeGB` and :option:`--wiredTigerCacheSizeGB`."
msgstr ""

#: ../source/faq/fundamentals.txt:158
# 51d47a50c6d648ccb5fcff73d19b8889
msgid "Does MongoDB require a separate caching layer for application-level caching?"
msgstr ""

#: ../source/faq/fundamentals.txt:160
# dd29297c3fb14d9497df0114c4cca6b7
msgid "No. In MongoDB, a document's representation in the database is similar to its representation in application memory. This means the database already stores the usable form of data, making the data usable in both the persistent store and in the application cache. This eliminates the need for a separate caching layer in the application."
msgstr ""

#: ../source/faq/fundamentals.txt:166
# 7655346d96484c838a74ca82d679e2c4
msgid "This differs from relational databases, where caching data is more expensive. Relational databases must transform data into object representations that applications can read and must store the transformed data in a separate cache: if these transformation from data to application objects require joins, this process increases the overhead related to using the database which increases the importance of the caching layer."
msgstr ""

#: ../source/faq/fundamentals.txt:175
# d9661f59b29846e1bbad19c2cda4bc90
msgid "Does MongoDB handle caching?"
msgstr ""

#: ../source/faq/fundamentals.txt:177
# a5d96b95b4c34c9aba21b9ad91755996
msgid "Yes. MongoDB keeps all of the most recently used data in RAM. If you have created indexes for your queries and your working data set fits in RAM, MongoDB serves all queries from memory."
msgstr ""

#: ../source/faq/fundamentals.txt:181
# 20eb08334d3743189d5549339df5c3e8
msgid "MongoDB does not implement a query cache: MongoDB serves all queries directly from the indexes and/or data files."
msgstr ""

#: ../source/faq/fundamentals.txt:185
# 6a6d37504fdc459185ad1b2b8765a4d1
msgid "Are writes written to disk immediately, or lazily?"
msgstr ""

#: ../source/faq/fundamentals.txt:187
# 8cb39a4f4bff44ef97c4b24bbddb31e5
msgid "Writes are physically written to the :doc:`journal </core/journaling>` within 100 milliseconds, by default. At that point, the write is \"durable\" in the sense that after a pull-plug-from-wall event, the data will still be recoverable after a hard restart. See :setting:`~storage.journal.commitIntervalMs` for more information on the journal commit window."
msgstr ""

#: ../source/faq/fundamentals.txt:193
# fa82e53581ff406a951ea58a4f8eee33
msgid "While the journal commit is nearly instant, MongoDB writes to the data files lazily. MongoDB may wait to write data to the data files for as much as one minute by default. This does not affect durability, as the journal has enough information to ensure crash recovery. To change the interval for writing to the data files, see :setting:`~storage.syncPeriodSecs`."
msgstr ""

#: ../source/faq/fundamentals.txt:200
# ddb820375ac041b2a3b8111f94980733
msgid "What language is MongoDB written in?"
msgstr ""

#: ../source/faq/fundamentals.txt:202
# 6c0115aa940547368023d5191b00d02c
msgid "MongoDB is implemented in C++. :term:`Drivers <driver>` and client libraries are typically written in their respective languages, although some drivers use C extensions for better performance."
msgstr ""

#: ../source/faq/fundamentals.txt:209
# 88031764b95d45efac817a0bad77b3a9
msgid "What are the limitations of 32-bit versions of MongoDB?"
msgstr ""

#: ../source/faq/fundamentals.txt:213
# e474e4cbc8f64c18b79404f1e5386780
msgid "Commercial support is no longer provided for MongoDB on 32-bit platforms (Linux and Windows). See :ref:`3.0-compatibility-platform-support`."
msgstr ""

#: ../source/faq/fundamentals.txt:217
# 55bf868b3668429faffb16abcc77970e
msgid "32-bit versions of MongoDB do **not** support the WiredTiger storage engine."
msgstr ""

#: ../source/faq/fundamentals.txt:220
# a14977a7d2924c12b30e7f24fe759461
msgid "When running a 32-bit build of MongoDB, the total storage size for the server, including data and indexes, is 2 gigabytes. For this reason, do not deploy MongoDB to production on 32-bit machines."
msgstr ""

#: ../source/faq/fundamentals.txt:224
# 40b6a50377ca4e16b74bdfbcaf8e3d24
msgid "If you're running a 64-bit build of MongoDB, there's virtually no limit to storage size. For production deployments, 64-bit builds and operating systems are strongly recommended."
msgstr ""

#: ../source/faq/fundamentals.txt:228
# c63bca9fba2a4b85a32a179bd7c44176
msgid "\"`Blog Post: 32-bit Limitations <http://blog.mongodb.org/post/137788967/32-bit-limitations>`_\""
msgstr ""

#: ../source/faq/fundamentals.txt:232
# 66b88f324d784ef499c9ea204589fbe9
msgid "32-bit builds disable :term:`journaling <journal>` by default because journaling further limits the maximum amount of data that the database can store."
msgstr ""

