#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/sharded-cluster-config-servers.txt:8
msgid "Config Servers"
msgstr ""

#: ../source/includes/3.4-sccc-unsupported.rst:1
msgid ""
"Starting in 3.4, the use of the deprecated mirrored :binary:`~bin.mongod`"
" instances as config servers (SCCC) is no longer supported. Before you "
"can upgrade your sharded clusters to 3.4, you must convert your config "
"servers from SCCC to CSRS."
msgstr ""

#: ../source/includes/3.4-sccc-unsupported.rst:6
msgid ""
"To convert your config servers from SCCC to CSRS, see the MongoDB 3.4 "
"manual :v3.4:`Upgrade Config Servers to Replica Set </tutorial/upgrade-"
"config-servers-to-replica-set>`."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:22
msgid ""
"Config servers store the metadata for a :term:`sharded cluster`. The "
"metadata reflects state and organization for all data and components "
"within the sharded cluster. The metadata includes the list of chunks on "
"every shard and the ranges that define the chunks."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:27
msgid ""
"The :binary:`~bin.mongos` instances cache this data and use it to route "
"read and write operations to the correct shards. :binary:`~bin.mongos` "
"updates the cache when there are metadata changes for the cluster, such "
"as :ref:`sharding-chunk-splits` or :doc:`adding a shard</tutorial/add-"
"shards-to-shard-cluster>`. Shards also read chunk metadata from the "
"config servers."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:34
msgid ""
"The config servers also store :doc:`authentication` configuration "
"information such as :doc:`Role-Based Access Control</core/authorization>`"
" or :doc:`internal authentication</core/security-internal-"
"authentication>` settings for the cluster."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:40
msgid "MongoDB also uses the config servers to manage distributed locks."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:42
msgid ""
"Each sharded cluster must have its own config servers. Do not use the "
"same config servers for different sharded clusters."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:47
msgid ""
"Administrative operations conducted on config servers may have "
"significant impact on sharded cluster performance and availability. "
"Depending on the number of config servers impacted, the cluster may be "
"read-only or offline for a period of time."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:56
msgid "Replica Set Config Servers"
msgstr ""

#: ../source/includes/fact-csrs-versionchanged.rst:1
msgid ""
"Starting in MongoDB 3.2, config servers for sharded clusters can be "
"deployed as a :doc:`replica set </replication>` (CSRS) instead of three "
"mirrored config servers (SCCC). Using a replica set for the config "
"servers improves consistency across the config servers, since MongoDB can"
" take advantage of the standard replica set read and write protocols for "
"the config data. In addition, using a replica set for config servers "
"allows a sharded cluster to have more than 3 config servers since a "
"replica set can have up to 50 members. To deploy config servers as a "
"replica set, the config servers must run the :doc:`WiredTiger storage "
"engine </core/wiredtiger>`."
msgstr ""

#: ../source/includes/fact-csrs-versionchanged.rst:12
msgid ""
"In version 3.4, MongoDB :ref:`removes support for SCCC config servers "
"<3.4-compat-remove-sccc>`."
msgstr ""

#: ../source/includes/fact-config-server-replica-set-restrictions.rst:1
msgid ""
"The following restrictions apply to a replica set configuration when used"
" for config servers:"
msgstr ""

#: ../source/includes/fact-config-server-replica-set-restrictions.rst:4
msgid "Must have zero :doc:`arbiters </core/replica-set-arbiter>`."
msgstr ""

#: ../source/includes/fact-config-server-replica-set-restrictions.rst:6
msgid "Must have no :doc:`delayed members </core/replica-set-delayed-member>`."
msgstr ""

#: ../source/includes/fact-config-server-replica-set-restrictions.rst:9
msgid ""
"Must build indexes (i.e. no member should have "
":data:`~replSetGetConfig.members[n].buildIndexes` setting set to false)."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:70
msgid "Read and Write Operations on Config Servers"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:72
msgid ""
"The ``admin`` database and the :doc:`config database </reference/config-"
"database>` exist on the config servers."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:76
msgid "Writes to Config Servers"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:78
msgid ""
"The ``admin`` database contains the collections related to the "
"authentication and authorization as well as the other :ref:`system.* "
"collections <metadata-system-collections>` for internal use."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:82
msgid ""
"The :doc:`config database </reference/config-database>` contains the "
"collections that contain the sharded cluster metadata. MongoDB writes "
"data to the :doc:`config database </reference/config-database>` when the "
"metadata changes, such as after a :doc:`chunk migration </core/sharding-"
"balancer-administration>` or a :doc:`chunk split </core/sharding-data-"
"partitioning>`."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:89
msgid ""
"Users should avoid writing directly to the config database in the course "
"of normal operation or maintenance."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:92
msgid ""
"When writing to the config servers, MongoDB uses a :ref:`write concern "
"<wc-w>` of ``\"majority\"``."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:96
msgid "Reads from Config Servers"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:98
msgid ""
"MongoDB reads from the ``admin`` database for authentication and "
"authorization data and other internal uses."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:101
msgid ""
"MongoDB reads from the ``config`` database when a :binary:`~bin.mongos` "
"starts or after a change in the metadata, such as after a chunk "
"migration. Shards also read chunk metadata from the config servers."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:105
msgid ""
"When reading from the replica set config servers, MongoDB uses a "
":doc:`/reference/read-concern` level of :readconcern:`\"majority\"`."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:111
msgid "Config Server Availability"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:113
msgid ""
"If the config server replica set loses its primary and cannot elect a "
"primary, the cluster's metadata becomes *read only*. You can still read "
"and write data from the shards, but no chunk migration or chunk splits "
"will occur until the replica set can elect a primary."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:118
msgid ""
"In a sharded cluster, :binary:`~bin.mongod` and :binary:`~bin.mongos` "
"instances monitor the replica sets in the sharded cluster (e.g. shard "
"replica sets, config server replica set)."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:122
msgid ""
"If all config servers become unavailable, the cluster can become "
"inoperable. To ensure that the config servers remain available and "
"intact, backups of config servers are critical. The data on the config "
"server is small compared to the data stored in a cluster, and the config "
"server has a relatively low activity load."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:128
msgid ""
"For 3.2 sharded clusters, if the number of consecutive unsuccessful "
"attempts to monitor the config server replica set exceeds "
":parameter:`replMonitorMaxFailedChecks` parameter value, the monitoring "
":binary:`~bin.mongos` or :binary:`~bin.mongod` instance becomes unusable "
"until you restart the instance. See :ref:`sharded-clusters-3.2-config-"
"server-avail` for a workaround."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:135
msgid "See :ref:`sharding-config-servers-and-availability` for more information."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:141
msgid "Sharded Cluster Metadata"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:143
msgid "Config servers store metadata in the :doc:`/reference/config-database`."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:145
msgid ""
"Always back up the ``config`` database before doing any maintenance on "
"the config server."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:148
msgid ""
"To access the ``config`` database, issue the following command from the "
":binary:`~bin.mongo` shell:"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:155
msgid ""
"In general, you should *never* edit the content of the ``config`` "
"database directly. The ``config`` database contains the following "
"collections:"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:159
msgid ":data:`~config.changelog`"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:160
msgid ":data:`~config.chunks`"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:161
msgid ":data:`~config.collections`"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:162
msgid ":data:`~config.databases`"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:163
msgid ":data:`~config.lockpings`"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:164
msgid ":data:`~config.locks`"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:165
msgid ":data:`~config.mongos`"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:166
msgid ":data:`~config.settings`"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:167
msgid ":data:`~config.shards`"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:168
msgid ":data:`~config.version`"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:170
msgid ""
"For more information on these collections and their role in sharded "
"clusters, see :doc:`/reference/config-database`. See :ref:`config-server-"
"read-write-ops` for more information about reads and updates to the "
"metadata."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:176
msgid "Sharded Cluster Security"
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:178
msgid ""
"Use :doc:`/core/security-internal-authentication` to enforce intra-"
"cluster security and prevent unauthorized cluster components from "
"accessing the cluster. You must start each :binary:`~bin.mongod` in the "
"cluster with the appropriate security settings in order to enforce "
"internal authentication."
msgstr ""

#: ../source/core/sharded-cluster-config-servers.txt:183
msgid ""
"See :doc:`/tutorial/deploy-sharded-cluster-with-keyfile-access-control` "
"for a tutorial on deploying a secured sharded cluster."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "**Always** use three config servers for production deployments."
#~ msgstr ""

#~ msgid "Tip"
#~ msgstr ""

#~ msgid "MongoDB also uses the config server to manage distributed locks."
#~ msgstr ""

#~ msgid ""
#~ "Config servers store the cluster's "
#~ "metadata in the :doc:`config database "
#~ "</reference/config-database>`. The :program:`mongos`"
#~ " instances cache this data and use"
#~ " it to route reads and writes "
#~ "to shards."
#~ msgstr ""

#~ msgid "after a :doc:`chunk migration </core/sharding-chunk-migration>`, or"
#~ msgstr ""

#~ msgid "after a :doc:`chunk split </core/sharding-chunk-splitting>`."
#~ msgstr ""

#~ msgid "MongoDB reads data from the config server in the following cases:"
#~ msgstr ""

#~ msgid ""
#~ "A new :program:`mongos` starts for the"
#~ " first time, or an existing "
#~ ":program:`mongos` restarts."
#~ msgstr ""

#~ msgid "After change in the cluster metadata, such as after a chunk migration."
#~ msgstr ""

#~ msgid ""
#~ "Config servers store the :doc:`metadata "
#~ "</core/sharded-cluster-metadata>` for a "
#~ "sharded cluster."
#~ msgstr ""

#~ msgid ""
#~ "If the config servers become "
#~ "inaccessible, the cluster is not "
#~ "accessible. If you cannot recover the"
#~ " data on a config server, the "
#~ "cluster will be inoperable."
#~ msgstr ""

#~ msgid ""
#~ "Starting in MongoDB 3.2, config servers"
#~ " for sharded clusters can be deployed"
#~ " as a :doc:`replica set </core"
#~ "/replication-introduction>`. Using a replica "
#~ "set for the config servers improves "
#~ "consistency across the config servers, "
#~ "since MongoDB can take advantage of "
#~ "the standard replica set read and "
#~ "write protocols for the config data. "
#~ "In addition, using a replica set "
#~ "for config servers allows a sharded "
#~ "cluster to have more than 3 config"
#~ " servers since a replica set can "
#~ "have up to 50 members. To deploy"
#~ " config servers as a replica set, "
#~ "the config servers must run the "
#~ ":doc:`WiredTiger storage engine </core/wiredtiger>`."
#~ msgstr ""

#~ msgid ""
#~ "Earlier versions of MongoDB required "
#~ "*exactly three* mirrored :program:`mongod` "
#~ "instances to act as the config "
#~ "servers. If you are using *mirrored* "
#~ "config servers, each server's system "
#~ "clock must be within 30 seconds of"
#~ " each other server for the "
#~ "distributed lock manager to work "
#~ "properly. With *mirrored* config servers, "
#~ "minimize clock skew by running the "
#~ "network time protocol (NTP) ``ntpd`` on"
#~ " your servers. MongoDB 3.2 deprecates "
#~ "the use of three mirrored "
#~ ":program:`mongod` instances for config "
#~ "servers."
#~ msgstr ""

#~ msgid ""
#~ "With replica set config servers, clock"
#~ " skew does not affect distributed "
#~ "lock management."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB only writes data to the "
#~ "config servers when the metadata "
#~ "changes, such as"
#~ msgstr ""

#~ msgid ""
#~ "When writing to the replica set "
#~ "config servers, MongoDB uses a "
#~ ":ref:`write concern <wc-w>` of "
#~ "``\"majority\"``."
#~ msgstr ""

#~ msgid ""
#~ "The :program:`mongos` instances cache the "
#~ "metadata from the config servers. As "
#~ "such, if all config server members "
#~ "become unavailable, you can still use"
#~ " the cluster if you do not "
#~ "restart the :program:`mongos` instances until"
#~ " after the config servers are "
#~ "accessible again. If you restart the "
#~ ":program:`mongos` instances before the config"
#~ " servers are available, the "
#~ ":program:`mongos` will be unable to "
#~ "route reads and writes."
#~ msgstr ""

# bb4b3ffcd1cf48a8b38231416552951f
#~ msgid "On this page"
#~ msgstr ""

# 429a602cbeb447df841ead7a4da981f0
#~ msgid ""
#~ "Starting in 3.4, the use of the"
#~ " deprecated mirrored :program:`mongod` instances"
#~ " as config servers (SCCC) is no "
#~ "longer supported. Before you can upgrade"
#~ " your sharded clusters to 3.4, you"
#~ " must convert your config servers "
#~ "from SCCC to CSRS."
#~ msgstr ""

# 175cbf1485f44bea9428d75b00fac32d
#~ msgid ""
#~ "To convert your config servers from "
#~ "SCCC to CSRS, see :doc:`/tutorial/upgrade-"
#~ "config-servers-to-replica-set`."
#~ msgstr ""

# c2b5bf4ba22246769e3acd4d674b944c
#~ msgid ""
#~ "The :program:`mongos` instances cache this "
#~ "data and use it to route read "
#~ "and write operations to the correct "
#~ "shards. :program:`mongos` updates the cache"
#~ " when there are metadata changes for"
#~ " the cluster, such as :ref:`sharding-"
#~ "chunk-splits` or :doc:`adding a "
#~ "shard</tutorial/add-shards-to-shard-cluster>`."
#~ " Shards also read chunk metadata from"
#~ " the config servers."
#~ msgstr ""

# 267dd7cdd09d479da0c93352770e1f09
#~ msgid ""
#~ "In version 3.4, MongoDB removes support"
#~ " for SCCC config servers. To upgrade"
#~ " your config servers from SCCC to "
#~ "CSRS, see :doc:`/tutorial/upgrade-config-"
#~ "servers-to-replica-set`."
#~ msgstr ""

# 9062a85cf95a4f9095d531200b2eb497
#~ msgid ""
#~ "MongoDB reads from the ``config`` "
#~ "database when a :program:`mongos` starts "
#~ "or after a change in the metadata,"
#~ " such as after a chunk migration. "
#~ "Shards also read chunk metadata from "
#~ "the config servers."
#~ msgstr ""

# 4ff3e707b61346a2ad690b576b3062f6
#~ msgid ""
#~ "If the config server replica set "
#~ "loses its primary and cannot elect "
#~ "a primary, the cluster's metadata "
#~ "becomes *read only*. You can still "
#~ "read and write data from the "
#~ "shards, but no chunk migration or "
#~ "chunk splits will occur until the "
#~ "replica set can elect a primary. "
#~ "If all config databases become "
#~ "unavailable, the cluster can become "
#~ "inoperable."
#~ msgstr ""

# e14a83842b65448f912db71baca4a5be
#~ msgid ""
#~ "The :program:`mongos` instances cache the "
#~ "metadata from the config servers. As "
#~ "such, if all config server members "
#~ "become unavailable, you can still use"
#~ " the cluster if you do not "
#~ "restart the :program:`mongos` instances until"
#~ " after the config servers are "
#~ "accessible again. If you restart the "
#~ ":program:`mongos` instances before the config"
#~ " servers are available, the "
#~ ":program:`mongos` cannot route reads and "
#~ "writes."
#~ msgstr ""

# 9311a7f162864d038d9942cbd4d571f3
#~ msgid ""
#~ "Clusters become inoperable without the "
#~ "cluster metadata. To ensure that the "
#~ "config servers remain available and "
#~ "intact, backups of config servers are"
#~ " critical. The data on the config "
#~ "server is small compared to the "
#~ "data stored in a cluster, and the"
#~ " config server has a relatively low"
#~ " activity load."
#~ msgstr ""

# 160cc1662ab94e15a18750e5ee992db5
#~ msgid ""
#~ "To access the ``config`` database, issue"
#~ " the following command from the "
#~ ":program:`mongo` shell:"
#~ msgstr ""

# ab96acb7cdd643eebf2fd54e61dadef3
#~ msgid ""
#~ "Use :doc:`/core/security-internal-authentication`"
#~ " to enforce intra-cluster security "
#~ "and prevent unauthorized cluster components"
#~ " from accessing the cluster. You must"
#~ " start each :program:`mongod` in the "
#~ "cluster with the appropriate security "
#~ "settings in order to enforce internal"
#~ " authentication."
#~ msgstr ""

# 6879edc9d4a84379973c2cca81a2b306
#~ msgid "sharding"
#~ msgstr ""

# 6879edc9d4a84379973c2cca81a2b306
# f2f40d631661474f8b44d37480991c06
#~ msgid "config servers"
#~ msgstr ""

# b21c8e309db84d1c8c472b8a28ca7073
#~ msgid "config databases"
#~ msgstr ""

# 17d5be70ae514bc89e5b765342c77a4f
#~ msgid "database"
#~ msgstr ""

# 17d5be70ae514bc89e5b765342c77a4f
#~ msgid "config"
#~ msgstr ""

