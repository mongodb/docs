.. meta::
   :robots: noindex, nosnippet

===============================
Application Services - Java SDK
===============================

.. toctree::
   :titlesonly:

   Connect to an App Services App </sdk/java/app-services/connect-to-app-services-backend>
   Call a Function </sdk/java/app-services/call-a-function>
   Query MongoDB </sdk/java/app-services/mongodb-remote-access>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _java-mongodb-realm-cloud:
.. _java-application-services:

Realm provides SDKs that help you connect your client apps to the Atlas App Services
backend. The SDK provides the functionality needed to
authenticate users with any of the built-in :ref:`Authentication providers <authentication-providers>`,
call :ref:`Atlas Functions <functions>`, and directly access a
:ref:`MongoDB database <data-sources>`.

The App Client
--------------

When using the SDK to access the App Services backend, you start with an
App object. This object provides all other functionality related to 
App Services. The ``App`` object is 
:ref:`initialized <java-init-appclient>` with the App ID, which you can 
:ref:`find in the App Services UI <find-your-app-id>`.

.. tip::

   To learn how to initialize the App client, see
   :ref:`java-connect-to-mongodb-realm-backend-app`.

Authentication & User Management
--------------------------------

One of the most challenging aspects of client development is implementing a 
robust and secure authentication system. With the Realm SDKs, however, you 
can use any of the App Services authentication providers with very minimal backend 
setup or client-side code required. With the authentication APIs, you can 
implement the following functionality:

- Creation of new user accounts
- User log-in and log-out
- Multiple users logged on at the same time on the same device 
- Linking user accounts from different providers 
- Providing custom user data 

.. tip::

   To learn how to set up authentication with different providers, see
   :ref:`java-authenticate-users`.

   To learn how to manage multiple users, see :ref:`java-multi-user-applications`.

   To learn how to link user accounts, see :ref:`java-link-user-identities`.

   To learn how to provide custom user data, see :ref:`java-custom-user-data`.

Calling Functions
-----------------
:ref:`Functions <functions>` enable you to define and execute server-side
logic for your application. You can call these functions from your client applications
via the Realm SDKs. These server-side functions can run under the context
of the authenticated user, and thus honor the rules, roles, and permissions that
you have assigned to your collections.

By using Functions, you provide a secure way for a variety of client
applications to share complex functionality without having to reproduce that
logic client-side. 

.. tip::

   To learn how to call functions, see :ref:`Call a Function <java-call-a-function>`.

Accessing MongoDB
-----------------

The Realm SDKs include APIs for accessing a MongoDB Atlas instance directly.
With these APIs, you can perform all of the standard CRUD operations from your
client. For security, you configure server-side :ref:`data access rules <mongodb-rules>`
to dynamically determine read & write permissions for every object that
is accessed.

.. tip::

   To learn how to use the MongoDB APIs, see :ref:`Query MongoDB <java-mongodb-data-access>`.
