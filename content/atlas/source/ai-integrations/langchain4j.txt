.. _langchain4j:

============================================
Get Started with the LangChain4j Integration
============================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. facet::
   :name: programming_language
   :values: java

.. meta::
   :description: Integrate MongoDB Vector Search with LangChain4j to build LLM applications in Java.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can integrate {+avs+} with `LangChain4j
<https://docs.langchain4j.dev/>`__ to build LLM applications. This
tutorial demonstrates how to start using {+avs+} with LangChain4j to
perform semantic searches on your data and build a simple |rag|
implementation. Specifically, you perform the following actions:

#. Set up the environment.
#. Instantiate the embedding model.
#. Use MongoDB as an embedding store.
#. Store custom data in your MongoDB cluster.
#. Run the following vector search queries:

   - Semantic search.
   - Semantic search with metadata pre-filtering.

#. Implement |rag| by using {+avs+} to answer questions on your data.

Background
----------

LangChain4j is a framework that simplifies the creation of |llm|
applications in Java. LangChain4j combines concepts and functionality
from LangChain, Haystack, LlamaIndex, and other sources. You can use
this framework for a variety of use cases, including semantic search and
|rag|.

By integrating {+avs+} with LangChain4j, you can use 
MongoDB as a vector database and use {+avs+} to
implement |rag| by using semantically similar documents 
to answer queries. To learn more about |rag|,
see :ref:`ai-key-concepts`.

Prerequisites
-------------

To complete this tutorial, you must have the following:

- .. include:: /includes/avs/shared/avs-requirements-cluster.rst

- A Voyage AI API Key. You must have an account with
  tokens available for API requests. To learn more about registering a
  Voyage AI account, see the `Voyage AI website
  <https://www.voyageai.com/>`__.

- .. include:: /includes/avs/shared/avs-requirements-openai-api-key.rst

.. include:: /includes/avs/shared/avs-requirements-java.rst

Set Up the Environment
----------------------

You must first set up the environment for this tutorial, which includes
adding the necessary dependencies and setting environment variables.

.. include:: /includes/ai-integrations/langchain4j/set-up-environment.rst

Instantiate the Embedding Model
-------------------------------

In this step, you instantiate an :term:`embedding model` that uses
Voyage AI to convert text in sample data into vector embeddings.

Add the following code to your ``Main.java`` file to instantiate the
embedding model by using your Voyage AI API key and selecting
``voyage-3-large`` as the model:

.. literalinclude:: /includes/ai-integrations/langchain4j/Main.java
   :start-after: start-embedding-model
   :end-before: end-embedding-model
   :language: java
   :copyable:
   :dedent:

To learn more about the ``voyage-3-large`` model, see the `blog post about
voyage-3 & voyage-3-lite
<https://blog.voyageai.com/2024/09/18/voyage-3/>`__ on the Voyage AI
website.

Use MongoDB as an Embedding Store
---------------------------------

In this section, you instantiate MongoDB as a vector database, also
called a `vector or embedding store
<https://docs.langchain4j.dev/tutorials/embedding-stores>`__. When you
instantiate the embedding store, LangChain4j automatically creates a {+avs+}
index on your data.

.. note:: Required Access

   To create a {+avs+} index, you must have :authrole:`Project Data Access 
   Admin` or higher access to the MongoDB project.

.. include:: /includes/ai-integrations/langchain4j/vector-store-description.rst

.. literalinclude:: /includes/ai-integrations/langchain4j/Main.java
   :start-after: start-vector-store
   :end-before: end-vector-store
   :language: java
   :copyable:
   :dedent:

To learn more about the classes and methods used in the preceding code,
see the `dev.langchain4j.store.embedding.mongodb package
<https://docs.langchain4j.dev/apidocs/dev/langchain4j/store/embedding/mongodb/package-summary.html>`__
API documentation.

Store Custom Data
-----------------

In this section, you create sample documents, use the embedding model
to convert the text to embeddings, and persist the data to MongoDB.

.. include:: /includes/ai-integrations/langchain4j/store-sample-data.rst

.. literalinclude:: /includes/ai-integrations/langchain4j/Main.java
   :start-after: start-persist-docs
   :end-before: end-persist-docs
   :language: java
   :copyable:
   :dedent:

Run Vector Search Queries
-------------------------

This section demonstrates how to run queries on your vectorized data.

.. include:: /includes/ai-integrations/langchain4j/run-queries.rst

.. seealso::

   For more information, refer to
   the `API reference <https://docs.langchain4j.dev/apidocs/index.html>`__.

Use Your Data to Answer Questions
---------------------------------

This section demonstrates a |rag| implementation that uses
the LangChain4j framework and {+avs+}. Now that you've used {+avs+}
to retrieve semantically similar documents, use the following
code examples to prompt the LLM to answer questions by using
information from documents stored in MongoDB.

.. include:: /includes/ai-integrations/langchain4j/rag.rst

Next Steps
----------

MongoDB also provides the following developer resources:

- `How to Make a RAG Application With LangChain4j
  <https://dev.to/mongodb/how-to-make-a-rag-application-with-langchain4j-1mad>`__
  tutorial on the DEV Community website
- :github:`MongoDB Developer GitHub Repository </mongodb-developer>`

.. seealso:: 

   - `LangChain4j Documentation <https://docs.langchain4j.dev/>`__
   - `LangChain4j MongoDB Atlas Documentation <https://docs.langchain4j.dev/integrations/embedding-stores/mongodb-atlas/>`__
   - `LangChain4j API Reference <https://docs.langchain4j.dev/apidocs/index.html>`__
