.. meta::
   :robots: noindex, nosnippet

.. _dotnet-object-models-and-schemas:
.. _dotnet-realm-objects:
.. _dotnet-objects:
.. _dotnet-realm-schema:

==================================
Object Models & Schemas - .NET SDK
==================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Object Types & Schemas
----------------------

Realm applications model data as objects composed of property-value pairs
that each contain one or more primitive data types or other Realm
objects. Realm objects are essentially the same
as regular objects, but they inherit from 
:dotnet-sdk:`RealmObject <reference/Realms.RealmObject.html>` or 
:dotnet-sdk:`EmbeddedObject <reference/Realms.EmbeddedObject.html>` and include
additional features like
:ref:`real-time updating data views <dotnet-live-object>` and reactive
:ref:`change event handlers <dotnet-client-notifications>`.

Every Realm object has an *object type* that refers to the object's
class. Objects of the same type share an :ref:`object schema
<dotnet-object-schema>` that defines the properties and relationships of those
objects.

Schemas
~~~~~~~

In C#, you typically define object schemas by using the C# class declarations. 
When Realm is initialized, it discovers the 
Realm objects defined in all assemblies that have been loaded and 
generates schemas accordingly. This is the simplest approach to defining a 
schema, and is generally the least error-prone. However, this approach includes 
all loaded Realm objects, and there may be cases where you only want 
to use :ref:`a subset of classes <dotnet-omit-classes-from-schema>`, or to 
customize Realm object schemas. To do this, you can  
:ref:`programmatically define a schema <dotnet-manual-schema>`.

.. note:: 

   .NET does not load an assembly until you reference a class in it, so if you 
   define your object models in one assembly and instantiate Realm 
   in another, be sure to call a method in the assembly that contains the object 
   models *before* initialization. Otherwise, Realm will not discover 
   the objects when it first loads. 


Working with Realm Objects
--------------------------

The following code block shows an object schema that describes a Dog.
Every Dog object must include a ``Name`` and may
optionally include the dog's ``Age``, ``Breed`` and a list of people that 
represents the dog's ``Owners``. 

.. literalinclude:: /examples/generated/dotnet/ObjectModelsAndSchemas.snippet.dog_class.cs
   :language: csharp

.. note::
   
   To define a collection of objects within an object, use an ``IList<T>`` with 
   only a getter. You do not need to initialize it in the constructor, as realm 
   will generate a collection instance the first time the property is accessed. 


.. note:: Further Examples

   The :ref:`<dotnet-crud>` section provides examples of creating, reading, 
   updating, filtering, and deleting Realm objects.

