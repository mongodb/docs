==========================
$strLenCP (aggregation)
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol
   
Definition
----------

.. expression:: $strLenCP

   .. versionadded:: 3.4
   
   Returns the number of UTF-8 `code points
   <http://www.unicode.org/glossary/#code_point>`_ in the specified string.

   :expression:`$strLenCP` has the following :ref:`operator expression
   syntax <agg-quick-ref-operator-expressions>`:

   .. code-block:: javascript

      { $strLenCP: <string expression> }

   The argument can be any valid :ref:`expression
   <aggregation-expressions>` as long as it resolves to an string. For
   more information on expressions, see :ref:`aggregation-expressions`.

   .. include:: /includes/extracts/agg-expression-null-operand-strLenCP.rst

   .. list-table::
      :header-rows: 1
      :widths: 95 5
   
      * - Example
        - Results
   
      * - ``{ $strLenCP: "abcde" }``
        - ``5``
        
      * - ``{ $strLenCP: "Hello World!" }``
        - ``12``
   
      * - ``{ $strLenCP: "cafeteria" }``
        - ``9``
   
      * - ``{ $strLenCP: "cafétéria" }``
        - ``9``
      
      * - ``{ $strLenCP: "" }``
        - ``0``
      
      * - ``{ $strLenCP: "$€λA" }``
        - ``4``

      * - ``{ $strLenCP: "寿司" }``
        - ``2``

Behavior
--------

The :expression:`$strLenCP` operator counts the number of code points
in the specified string. This behavior differs from the
:expression:`$strLenBytes` operator which counts the number of bytes in
the string, where each character uses between one and four bytes.

Example
-------

Single-Byte and Multibyte Character Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A collection named ``food`` contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "name" : "apple" }
   { "_id" : 2, "name" : "banana" }
   { "_id" : 3, "name" : "éclair" }
   { "_id" : 4, "name" : "hamburger" }
   { "_id" : 5, "name" : "jalapeño" }
   { "_id" : 6, "name" : "pizza" }
   { "_id" : 7, "name" : "tacos" }
   { "_id" : 8, "name" : "寿司" }

The following operation uses the ``$strLenCP`` operator to calculate
the ``length`` of each ``name`` value:

.. code-block:: javascript

   db.food.aggregate(
     [
       {
         $project: {
           "name": 1,
           "length": { $strLenCP: "$name" }
         }
       }
     ]
   )

The operation returns the following results:

.. code-block:: javascript

   { "_id" : 1, "name" : "apple", "length" : 5 }
   { "_id" : 2, "name" : "banana", "length" : 6 }
   { "_id" : 3, "name" : "éclair", "length" : 6 }
   { "_id" : 4, "name" : "hamburger", "length" : 9 }
   { "_id" : 5, "name" : "jalapeño", "length" : 8 }
   { "_id" : 6, "name" : "pizza", "length" : 5 }
   { "_id" : 7, "name" : "tacos", "length" : 5 }
   { "_id" : 8, "name" : "寿司", "length" : 2 }
   
.. seealso::

   :expression:`$strLenBytes`
