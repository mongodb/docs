======
$slice
======

.. default-domain:: mongodb

.. update:: $slice

   .. versionadded:: 2.4

   The :update:`$slice` modifier limits the number of array
   elements during a :update:`$push` operation. To project, or return,
   a specified number of array elements from a read operation, see the
   :projection:`$slice` projection operator instead.

   To use the :update:`$slice` modifier, it must appear with the
   :update:`$each` modifier.

   .. tip::
      You can pass an empty array ``[]`` to the :update:`$each`
      modifier such that only the :update:`$slice` modifier has an
      effect.

   .. versionchanged:: 2.6

      - The :update:`$slice` can slice from the beginning of the
        array.

      - Trying to use the :update:`$slice` modifier without the
        :update:`$each` modifier results in an error.

      - The order in which the modifiers appear is immaterial. Previous
        versions required the :update:`$each` modifier to appear as
        the first modifier if used in conjunction with
        :update:`$slice`.

   .. code-block:: javascript

      db.collection.update( <query>,
                            { $push: {
                                       <field>: {
                                                  $each: [ <value1>, <value2>, ... ],
                                                  $slice: <num>
                                                }
                                     }
                            }
                          )

   The ``<num>`` can be:

   - **zero** to update the array ``<field>`` to an empty array,

   - **negative** to update the array ``<field>`` to contain only the
     last ``<num>`` elements, or

   - **positive** to update the array ``<field>`` contain only the
     first ``<num>`` elements.

     .. versionadded:: 2.6

Examples
--------

Slice from the End of the Array
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A collection ``students`` contains the following document:

.. code-block:: javascript

   { "_id" : 1, "scores" : [ 40, 50, 60 ] }

The following operation adds new elements to the ``scores`` array, and
then uses the :update:`$slice` modifier to trim the array to the
last five elements:

.. code-block:: javascript

   db.students.update( { _id: 1 },
                       { $push: { scores: {
                                            $each: [ 80, 78, 86 ],
                                            $slice: -5
                                          }
                                }
                       }
                     )

The result of the operation is slice the elements of the updated
``scores`` array to the last five elements:

.. code-block:: javascript

   { "_id" : 1, "scores" : [  50,  60,  80,  78,  86 ] }

Slice from the Front of the Array
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A collection ``students`` contains the following document:

.. code-block:: javascript

   { "_id" : 2, "scores" : [ 89, 90 ] }

The following operation adds new elements to the ``scores`` array, and
then uses the :update:`$slice` modifier to trim the array to the
first three elements.

.. code-block:: javascript

   db.students.update( { _id: 2 }, 
                       { $push: { scores: { $each: [ 100, 20 ], $slice: 3 } } }
                     )

The result of the operation is to slice the elements of the updated
``scores`` array to the first three elements:

.. code-block:: javascript

   { "_id" : 2, "scores" : [  89,  90,  100 ] }

Update Array Using Slice Only
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A collection ``students`` contains the following document:

.. code-block:: javascript

   { "_id" : 3, "scores" : [  89,  70,  100,  20 ] }

To update the ``scores`` field with just the effects of the
:update:`$slice` modifier, specify the number of elements to slice
(e.g. ``-3``) for the :update:`$slice` modifier and an empty
array ``[]`` for the :update:`$each` modifier, as in the following:

.. code-block:: javascript

   db.students.update(
                       { _id: 3 }, 
                       { $push: { scores: { $each: [ ], $slice: -3 } } }
                     )

The result of the operation is to slice the elements of the ``scores``
array to the last three elements:

.. code-block:: javascript

   { "_id" : 3, "scores" : [  70,  100,  20 ] }

Use ``$slice`` with Other ``$push`` Modifiers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/example-push-with-multiple-modifiers.rst

The order of the modifiers is immaterial to the order in which the
modifiers are processed. See :ref:`push-modifiers` for details.
