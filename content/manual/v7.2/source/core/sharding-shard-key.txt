.. _sharding-shard-key:
.. _shard-key:
.. _sharding-internals-shard-keys:

==========
Shard Keys
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The shard key is either a single indexed :term:`field` or multiple
fields covered by a :term:`compound index` that determines the
distribution of the collection's :term:`documents <document>` among the
cluster's :term:`shards <shard>`.

MongoDB divides the span of shard key values (or hashed
shard key values) into non-overlapping ranges of shard key values (or
hashed shard key values). Each range is associated with a
:term:`chunk`, and MongoDB attempts to distribute chunks evenly among
the shards in the cluster.

.. include:: /images/sharding-range-based.rst

The shard key has a direct relationship to the effectiveness of chunk
distribution. See :ref:`sharding-shard-key-selection`.

.. _sharding-internals-shard-key-indexes:
.. _sharding-shard-key-indexes:

Shard Key Indexes
-----------------

All sharded collections **must** have an index that supports the
:term:`shard key`. The index can be an index on the shard key or a
:term:`compound index` where the shard key is a :ref:`prefix
<compound-index-prefix>` of the index.

- If the collection is empty, :method:`sh.shardCollection()` creates
  the index on the shard key if such an index does not already exists.

- If the collection is not empty, you must create the index first
  before using :method:`sh.shardCollection()`.

You cannot :ref:`drop <collection-drop-index>` or 
:ref:`hide <collection-hide-index>` an index if it is the only 
non-hidden index that supports the shard key.

.. _sharding-shard-key-unique:

Unique Indexes
~~~~~~~~~~~~~~

MongoDB can enforce a uniqueness constraint on a ranged shard key index.
Through the use of a unique index on the shard key, MongoDB enforces
uniqueness on the entire key combination and not individual components
of the shard key.

For a ranged sharded collection, only the following indexes can be
:ref:`unique <index-type-unique>`:

- The index on the shard key

- A :term:`compound index` where the shard key is a :ref:`prefix
  <compound-index-prefix>`

- The default ``_id`` index. 

  .. important::

     Sharded clusters only enforce the uniqueness constraint on
     ``_id`` fields across the cluster when the ``_id`` field is
     also the shard key.

     If the ``_id`` field is not the shard key or if it is only
     the prefix to the shard key, the uniqueness constraint
     applies only to the shard that stores the document. This
     means that two or more documents can have the same ``_id``
     value, provided they occur on different shards.

     In cases where the ``_id`` field is not the shard key,
     MongoDB expects applications to enforce the uniqueness of
     ``_id`` values across the shards.

The unique index constraints mean that:

- For a to-be-sharded collection, you cannot shard the collection if
  the collection has other unique indexes.

- For an already-sharded collection, you cannot create unique indexes
  on other fields.

- A unique index stores a null value for a document missing the
  indexed field; that is a missing index field is treated as another
  instance of a ``null`` index key value. For more information, see
  :ref:`unique-index-and-missing-field`.

To enforce uniqueness on the shard key values, pass the ``unique``
parameter as ``true`` to the :method:`sh.shardCollection()` method:

.. include:: /includes/extracts/shard-collection-unique-restriction-method.rst

You cannot specify a unique constraint on a :ref:`hashed index
<index-type-hashed>`.

.. _shard-key-missing:

Missing Shard Key Fields
------------------------

Documents in sharded collections can be missing the shard key fields. 
To set missing shard key fields, see :ref:`shard-key-missing-set`.

Chunk Range and Missing Shard Key Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Missing shard key fields fall within the same chunk range as shard keys
with null values. For example, if the shard key is on the fields ``{ x:
1, y: 1 }``, then:

.. list-table::
   :header-rows: 1
   :widths: 60 60

   * - Document Missing Shard Key

     - Falls into Same Range As

   * - ``{ x: "hello" }``
     - ``{ x: "hello", y: null }``

   * - ``{ y: "goodbye" }``
     - ``{ x: null, y: "goodbye" }``

   * - ``{ z: "oops" }``
     - ``{ x: null, y: null }``

.. _shard-key-missing-read-write-ops:

Read/Write Operations and Missing Shard Key Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To target documents with missing shard key fields, you can use the
:query:`{ $exists: false } <$exists>` filter condition on the shard key
fields. For example, if the shard key is on the fields ``{ x: 1, y: 1
}``, you can find the documents with missing shard key fields by running
this query:

.. code-block:: javascript

   db.shardedcollection.find( { $or: [ { x: { $exists: false } }, { y: { $exists: false } } ] } )

If you specify a :doc:`null equality match
</tutorial/query-for-null-fields>` filter condition (e.g. ``{ x: null
}``), the filter matches :red:`both` those documents with missing shard
key fields :red:`and` those with shard key fields set to ``null``.

Some write operations, such as a write with an ``upsert``
specification, require an equality match on the shard key. In those
cases, to target a document that is missing the shard key, include
another filter condition in addition to the ``null`` equality match.
For example:

.. code-block:: javascript

   { _id: <value>, <shardkeyfield>: null } // _id of the document missing shard key

.. toctree::
   :titlesonly:

   /core/sharding-shard-a-collection.txt
   /core/sharding-choose-a-shard-key.txt
   /core/sharding-change-a-shard-key.txt
   /core/sharding-change-shard-key-value.txt
   /core/sharding-set-missing-shard-key-fields.txt
   /core/sharding-find-shard-key.txt
   /core/sharding-troubleshooting-shard-keys.txt
