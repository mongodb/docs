=============
shardingState
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: shardingState

   :dbcommand:`shardingState` is an admin command that reports if
   :binary:`~bin.mongod` is a member of a :term:`sharded cluster`.
   :dbcommand:`shardingState` has the following prototype form:

   .. code-block:: javascript

      { shardingState: 1 }

   For :dbcommand:`shardingState` to detect that a :binary:`~bin.mongod`
   is a member of a sharded cluster, the :binary:`~bin.mongod` must
   satisfy the following conditions:

   #. the :binary:`~bin.mongod` is a primary member of a replica set, and

   #. the :binary:`~bin.mongod` instance is a member of a sharded
      cluster.

   If :dbcommand:`shardingState` detects that a :binary:`~bin.mongod` is a
   member of a sharded cluster, :dbcommand:`shardingState` returns a
   document that resembles the following prototype:

   .. code-block:: javascript

      {
        "enabled" : true,
        "configServer" : "<configdb-string>",
        "shardName" : "<string>",
        "shardHost" : "string:",
        "versions" : {
             "<database>.<collection>" : Timestamp(<...>),
             "<database>.<collection>" : Timestamp(<...>)
        },
        "ok" : 1
      }

   Otherwise, :dbcommand:`shardingState` will return the following
   document:

   .. code-block:: javascript

      { "note" : "from execCommand", "ok" : 0, "errmsg" : "not master" }

   The response from :dbcommand:`shardingState` when used with a
   :term:`config server <config database>` is:

   .. code-block:: javascript

      { "enabled": false, "ok": 1 }


   .. note::

      :binary:`~bin.mongos` instances do not provide the
      :dbcommand:`shardingState`.

   .. warning::

      This command obtains a write lock on the affected database and
      will block other operations until it has completed; however, the
      operation is typically short lived.

   .. admin-only
