.. _kotlin-builders-landing:

========
Builders
========

.. toctree::

   Aggregation </fundamentals/builders/aggregates>
   Filters </fundamentals/builders/filters>
   Indexes </fundamentals/builders/indexes>
   Projection </fundamentals/builders/projections>
   Sort </fundamentals/builders/sort>
   Update </fundamentals/builders/updates>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This section includes guides on how to use each of the available
builders, and demonstrates the utility the MongoDB Kotlin driver builder classes
provide.

The Kotlin driver provides classes to simplify the process for developers
to use CRUD operations and the Aggregation API. The static utility methods allow you
to build a query more efficiently.

Why Use Builders?
-----------------

Using the builders class, you leverage the power of:

- The Kotlin compiler and the IDE to find errors during development
- The IDE for discovery and code completion

When using builders, the Kotlin compiler and the IDE catch errors such as misspelled
operators early on. When using the MongoDB shell or plain Kotlin, you
write operators as strings and get no visual indication of a problem,
pushing these errors to runtime instead of compile time.

With the builder classes, you write operators as methods. The IDE
instantly underlines and gives you a red bar on the right indicating
something is wrong. While developing, the IDE also shows you the
methods you can use. It automatically completes your code with
placeholder parameters once you select which method you want to use.

Scenario
--------

Imagine we want to send a marketing email to all users in our ``users``
collection with the following criteria:

- Users that identify as ``female`` gender
- Users that are older than ``29``

We only want their email address, so we'll ensure our query doesn't
return data we pay bandwidth costs for but don't need.

The documents in the ``users`` collection are modeled with the following data class
in our application:

.. literalinclude:: /examples/generated/BuildersTest.snippet.user-data-class.kt
   :language: kotlin

Using the MongoDB Shell
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: js

   collection.find({ "gender": "female", "age" : { "$gt": 29 }}, { "_id": 0, "email": 1 })

Without Using Builders
~~~~~~~~~~~~~~~~~~~~~~

.. literalinclude:: /examples/generated/BuildersTest.snippet.no-builders.kt
   :language: kotlin

Using Builders
~~~~~~~~~~~~~~

.. code-block:: kotlin

   import com.mongodb.client.model.Filters
   import com.mongodb.client.model.Projections

.. literalinclude:: /examples/generated/BuildersTest.snippet.builders.kt
   :language: kotlin

Available Builders
------------------

- :ref:`Aggregates <aggregates-builders>` for building aggregation pipelines.
- :ref:`Filters <filters-builders>` for building query filters.
- :ref:`Indexes <indexes-builders>` for creating index keys.
- :ref:`Projections <projections-builders>` for building projections. 
- :ref:`Sorts <sorts-builders>` for building sort criteria.
- :ref:`Updates <updates-builders>` for building updates.
