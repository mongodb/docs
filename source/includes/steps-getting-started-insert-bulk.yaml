title: Initialize a ``Bulk`` operations builder.
stepnum: 1
pre: |
  Initialize a :method:`Bulk` operations builder for the collection
  ``orders``.
ref: ""
action:
  language: javascript
  code: |
      var bulk = db.orders.initializeOrderedBulkOp();
post: |
  The operation returns an ordered operations builder which maintains a
  list of operations to perform. Ordered operations means that MongoDB
  will execute the operations in order, and the bulk operation will
  stop on error instead of continuing with the next operation in the
  list.
---
title: Add insert operations to the ``bulk`` object.
stepnum: 2
pre: |
   The following code uses nested for loops to add insert operations to
   the ``bulk`` object.
ref: ""
action:
  language: javascript
  code: |
      var customers = [ "abc123", "xyz321", "ijk021" ];
      var products = [ "qqq", "yyy", "zzz" ];

      for (var i=0; i < customers.length; i++ ) {
         for (var j=0; j< products.length; j++ ) {
            bulk.insert(
              {
                cust_id: customers[i],
                ord_date: new Date( "04/15/2014" ),
                status: 'A',
                items: [ { sku: products[j], qty: 10, price: 10 } ],
                shipping: {
                   location: "Warehouse1",
                   mode: "airfreight"
                }
              }
            );
         }
      }
---
title: Execute the bulk operation.
stepnum: 3
pre: |
   Call the :method:`~Bulk.execute()` method on the ``bulk`` object to
   execute the operations in its list.
ref: ""
action:
  language: javascript
  code: |
      bulk.execute();
post: |
  The method returns a :method:`BulkWriteResult` object with the status
  of the operation.
---
title: Review the returned object.
stepnum: 4
ref: ''
pre: |
  The bulk operation returns a :method:`BulkWriteResult` object which
  contains the status of the operation. A successful insert of the
  documents returns the following object:
action:
  language: javascript
  code: |
     BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 9,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
     })
post: |
  The :data:`~BulkWriteResult.nInserted` field specifies the number of
  documents inserted. If the operation encounters an error, the
  :method:`BulkWriteResult` object will contain information regarding
  the error.

  Optional. You can verify the insert operation by querying the
  collection as in the single document insert procedure. The inserted
  documents will each have an ``_id`` field added by MongoDB.
