#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:5
msgid "Back Up a Sharded Cluster with File System Snapshots"
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:17
msgid ""
"Starting in MongoDB 3.2, the procedure can be used with the :doc:`MMAPv1 "
"</core/mmapv1>` and the :doc:`WiredTiger </core/wiredtiger>` storage "
"engines. With previous versions of MongoDB, the procedure applied to "
":doc:`MMAPv1 </core/mmapv1>` only."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:23
msgid "Overview"
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:25
msgid ""
"This document describes a procedure for taking a backup of all components"
" of a :term:`sharded cluster`. This procedure uses file system snapshots "
"to capture a copy of the :binary:`~bin.mongod` instance. An alternate "
"procedure uses :binary:`~bin.mongodump` to create binary database dumps "
"when file-system snapshots are not available. See :doc:`/tutorial/backup-"
"sharded-cluster-with-database-dumps` for the alternate procedure."
msgstr ""

#: ../source/includes/note-shard-cluster-backup.rst:1
msgid ""
"To capture a point-in-time backup from a sharded cluster you **must** "
"stop *all* writes to the cluster. On a running production system, you can"
" only capture an *approximation* of point-in-time snapshot."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:35
msgid ""
"For more information on backups in MongoDB and backups of sharded "
"clusters in particular, see :doc:`/core/backups` and "
":doc:`/administration/backup-sharded-clusters`."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:40
msgid "Considerations"
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:43
msgid "Balancer"
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:45
msgid ""
"It is *essential* that you stop the :ref:`balancer <sharding-internals-"
"balancing>` before capturing a backup."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:48
msgid ""
"If the balancer is active while you capture backups, the backup artifacts"
" may be incomplete and/or have duplicate data, as :term:`chunks <chunk>` "
"may migrate while recording backups."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:53
msgid "Precision"
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:55
msgid ""
"In this procedure, you will stop the cluster balancer and take a backup "
"up of the :term:`config database`, and then take backups of each shard in"
" the cluster using a file-system snapshot tool. If you need an exact "
"moment-in-time snapshot of the system, you will need to stop all "
"application writes before taking the file system snapshots; otherwise the"
" snapshot will only approximate a moment in time."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:62
msgid ""
"For approximate point-in-time snapshots, you can minimize the impact on "
"the cluster by taking the backup from a secondary member of each replica "
"set shard."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:67
msgid "Consistency"
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:69
msgid ""
"If the journal and data files are on the same logical volume, you can use"
" a single point-in-time snapshot to capture a consistent copy of the data"
" files."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:73
msgid ""
"If the journal and data files are on different file systems, you must use"
" :method:`db.fsyncLock()` and :method:`db.fsyncUnlock()` to ensure that "
"the data files do not change, providing consistency for the purposes of "
"creating backups."
msgstr ""

#: ../source/includes/fact-backup-snapshots-with-ebs-in-raid10.rst:2
msgid "Snapshots with Amazon EBS in a RAID 10 Configuration"
msgstr ""

#: ../source/includes/fact-backup-snapshots-with-ebs-in-raid10.rst:4
msgid ""
"If your deployment depends on Amazon's Elastic Block Storage (EBS) with "
"RAID configured within your instance, it is impossible to get a "
"consistent state across all disks using the platform's snapshot tool. As "
"an alternative, you can do one of the following:"
msgstr ""

#: ../source/includes/fact-backup-snapshots-with-ebs-in-raid10.rst:9
msgid ""
"Flush all writes to disk and create a write lock to ensure consistent "
"state during the backup process."
msgstr ""

#: ../source/includes/fact-backup-snapshots-with-ebs-in-raid10.rst:12
msgid "If you choose this option see :ref:`backup-without-journaling`."
msgstr ""

#: ../source/includes/fact-backup-snapshots-with-ebs-in-raid10.rst:14
msgid ""
"Configure :term:`LVM` to run and hold your MongoDB data files on top of "
"the RAID within your system."
msgstr ""

#: ../source/includes/fact-backup-snapshots-with-ebs-in-raid10.rst:17
msgid ""
"If you choose this option, perform the LVM backup operation described in "
":ref:`lvm-backup-operation`."
msgstr ""

#: ../source/tutorial/backup-sharded-cluster-with-filesystem-snapshots.txt:81
msgid "Procedure"
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:8
msgid "Disable the balancer."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:10
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:34
msgid ""
"To disable the :ref:`balancer <sharding-internals-balancing>`, connect "
"the :binary:`~bin.mongo` shell to a :binary:`~bin.mongos` instance and "
"run :method:`sh.stopBalancer()` in the ``config`` database."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:21
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:45
msgid ""
"For more information, see the :ref:`sharding-balancing-disable-"
"temporarily` procedure."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:32
msgid "Step 1: Disable the balancer."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:56
msgid "If necessary, lock one secondary member of each replica set."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:58
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:164
msgid ""
"If your secondary does not have journaling enabled *or* its journal and "
"data files are on different volumes, you **must** lock the secondary's "
":binary:`~bin.mongod` instance before capturing a backup."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:62
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:168
msgid ""
"If your secondary has journaling enabled and its journal and data files "
"are on the same volume, you may skip this step."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:67
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:173
msgid ""
"If your deployment requires this step, you must perform it on one "
"secondary of each shard and one secondary of the :ref:`config server "
"replica set (CSRS) <replset-config-servers>`."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:71
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:177
msgid ""
"Ensure that the :term:`oplog` has sufficient capacity to allow these "
"secondaries to catch up to the state of the primaries after finishing the"
" backup procedure. See :ref:`replica-set-oplog-sizing` for more "
"information."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:79
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:185
msgid "Lock shard replica set secondary."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:81
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:187
msgid ""
"For each shard replica set in the sharded cluster, connect a "
":binary:`~bin.mongo` shell to the secondary member's "
":binary:`~bin.mongod` instance and run :method:`db.fsyncLock()`."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:92
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:198
msgid "Lock config server replica set secondary."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:94
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:200
msgid ""
"If locking a secondary of the CSRS, confirm that the member has "
"replicated data up to some control point. To verify, first connect a "
":binary:`~bin.mongo` shell to the CSRS primary and perform a write "
"operation with :writeconcern:`\"majority\"` write concern on a control "
"collection:"
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:115
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:221
msgid "The operation should return the modified (or inserted) control document:"
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:124
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:230
msgid ""
"Query the CSRS secondary member for the returned control document. "
"Connect a :binary:`~bin.mongo` shell to the CSRS secondary to lock and "
"use :method:`db.collection.find()` to query for the control document:"
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:140
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:246
msgid ""
"If the secondary member contains the latest control document, it is safe "
"to lock the member. Otherwise, wait until the member contains the "
"document or select a different secondary member that contains the latest "
"control document."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:146
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:252
msgid "To lock the secondary member, run :method:`db.fsyncLock()` on the member:"
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:162
msgid "Step 2: If necessary, lock one secondary member of each replica set."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:268
msgid "Back up one of the config servers."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:273
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:294
msgid ""
"Backing up a :ref:`config server <sharding-config-server>` backs up the "
"sharded cluster's metadata. You only need to back up one config server, "
"as they all hold the same data. Perform this step against the locked CSRS"
" secondary member."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:278
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:299
msgid ""
"To create a file-system snapshot of the config server, follow the "
"procedure in :ref:`lvm-backup-operation`."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:289
msgid "Step 3: Back up one of the config servers."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:310
msgid "Back up a replica set member for each shard."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:312
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:329
msgid ""
"If you locked a member of the replica set shards, perform this step "
"against the locked secondary."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:315
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:332
msgid ""
"You may back up the shards in parallel. For each shard, create a "
"snapshot, using the procedure in :doc:`/tutorial/backup-with-filesystem-"
"snapshots`."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:327
msgid "Step 4: Back up a replica set member for each shard."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:344
msgid "Unlock all locked replica set members."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:346
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:367
msgid ""
"If you locked any :binary:`~bin.mongod` instances to capture the backup, "
"unlock them."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:349
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:370
msgid ""
"To unlock the replica set members, use :method:`db.fsyncUnlock()` method "
"in the :binary:`~bin.mongo` shell."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:365
msgid "Step 5: Unlock all locked replica set members."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:386
msgid "Enable the balancer."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:388
#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:407
msgid ""
"To re-enable to balancer, connect the :binary:`~bin.mongo` shell to a "
":binary:`~bin.mongos` instance and run :method:`sh.setBalancerState()`."
msgstr ""

#: ../source/includes/steps/backup-sharded-cluster-with-snapshots.rst:405
msgid "Step 6: Enable the balancer."
msgstr ""

#: ../source/includes/extracts/additional-resources-backup-tutorials.rst:4
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-backup-tutorials.rst:6
msgid ""
"`MongoDB Atlas: For a simple way to run, monitor, and maintain cloud-"
"hosted MongoDB deployments "
"<https://www.mongodb.com/cloud/atlas?jmp=docs>`_"
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "Balancing"
#~ msgstr ""

#~ msgid "Backup a Sharded Cluster with Filesystem Snapshots"
#~ msgstr ""

#~ msgid ""
#~ "This document describes a procedure for"
#~ " taking a backup of all components"
#~ " of a sharded cluster. This procedure"
#~ " uses file system snapshots to "
#~ "capture a copy of the :program:`mongod`"
#~ " instance. An alternate procedure uses "
#~ ":program:`mongodump` to create binary database"
#~ " dumps when file-system snapshots are"
#~ " not available. See :doc:`/tutorial/backup-"
#~ "sharded-cluster-with-database-dumps` for"
#~ " the alternate procedure."
#~ msgstr ""

#~ msgid ""
#~ "In this procedure, you will stop "
#~ "the cluster balancer and take a "
#~ "backup up of the :term:`config "
#~ "database`, and then take backups of "
#~ "each shard in the cluster using a"
#~ " file-system snapshot tool. If you"
#~ " need an exact moment-in-time "
#~ "snapshot of the system, you will "
#~ "need to stop all application writes "
#~ "before taking the filesystem snapshots; "
#~ "otherwise the snapshot will only "
#~ "approximate a moment in time."
#~ msgstr ""

# 3983dfc91e6946bda1a11d37b8df4229
#~ msgid "On this page"
#~ msgstr ""

# f3eb90ad35a24a638e236d8989b275fd
#~ msgid ""
#~ "This document describes a procedure for"
#~ " taking a backup of all components"
#~ " of a :term:`sharded cluster`. This "
#~ "procedure uses file system snapshots to"
#~ " capture a copy of the "
#~ ":program:`mongod` instance. An alternate "
#~ "procedure uses :program:`mongodump` to create"
#~ " binary database dumps when file-"
#~ "system snapshots are not available. See"
#~ " :doc:`/tutorial/backup-sharded-cluster-with-"
#~ "database-dumps` for the alternate "
#~ "procedure."
#~ msgstr ""

# bb1624e7a7974176a306ea06ae280723
#~ msgid "See also |mms-home| for seamless automation, backup, and monitoring."
#~ msgstr ""

