.. _node-mongoclient:

====================
Create a MongoClient
====================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :description: Learn how to create a MongoClient using the {+driver-short+}.
   :keywords: connection string, URI, server, Atlas, settings, client

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

To connect to a MongoDB deployment, you need two things:

- **Connection URI**, also known as a *connection string*, which tells the
  {+driver-short+} which MongoDB deployment to connect to.
- **MongoClient** object, which creates the connection to and performs 
  operations on the MongoDB deployment.

You can also use ``MongoClientOptions`` to customize the way the {+driver-short+} behaves
while connected to MongoDB.

This guide shows you how to create a connection string and use a ``MongoClient`` object
to connect to MongoDB.

.. _node-connection-uri:

Connection URI
--------------

A standard connection string includes the following components:

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Component
     - Description

   * - ``mongodb://``

     - Required. A prefix that identifies this as a string in the
       standard connection format.

   * - ``username:password``

     - Optional. Authentication credentials. If you include these, the client
       authenticates the user against the database specified in ``authSource``.
       For more information about the ``authSource`` connection option, 
       see :ref:`node-troubleshooting-connection-admin` in the Connection Troubleshooting guide.

   * - ``host[:port]``

     - Required. The host and optional port number where MongoDB is running. If you don't
       include the port number, the driver uses the default port, ``27017``.

   * - ``/defaultauthdb``
     
     - Optional. The authentication database to use if the
       connection string includes ``username:password@``
       authentication credentials but not the ``authSource`` option.  
       When you call ``client.db()`` with no argument, this is the database that is used. If you don't include 
       this component, the client authenticates the user against the ``admin`` database.

   * - ``?<options>``

     - Optional. A query string that specifies connection-specific
       options as ``<name>=<value>`` pairs. See
       :ref:`node-connection-options` for a full description of
       these options.

For more information about creating a connection string, see
:manual:`Connection Strings </reference/connection-string>` in the
MongoDB Server documentation.

.. _connect-sample-node-driver:

Atlas Connection Example
------------------------

You must create a client to connect to a MongoDB deployment on Atlas. To create
a client, construct an instance of ``MongoClient``, passing in your
URI and a ``MongoClientOptions`` object.

.. tip:: Reuse Your Client

   As each ``MongoClient`` represents a pool of connections to the
   database, most applications only require a single instance of a
   ``MongoClient``, even across multiple requests. To learn more about
   how connection pools work in the driver, see the :ref:`Connection Pools page
   <node-connection-pools>`.

Use the ``serverApi`` option in your ``MongoClientOptions`` object to
enable the {+stable-api+} feature, which forces the server to run operations
with behavior compatible with the specified API version.

The following code shows how you can specify the connection string and the
{+stable-api+} client option when connecting to a MongoDB deployment on Atlas and
verify that the connection is successful:

.. literalinclude:: /code-snippets/connection/stable-api-connect.js
   :language: javascript

.. note::

   The {+driver-short+} automatically calls the ``MongoClient.connect()``
   method when using the client to perform CRUD operations on your MongoDB deployment.
   Call the ``MongoClient.connect()`` method explicitly if you want to verify that the
   connection is successful.

.. include:: /includes/explicit-resource-management.rst

To learn more about the {+stable-api+} feature, see the :ref:`{+stable-api+} page
<nodejs-stable-api>`.

Prevent a Slow Operation From Delaying Other Operations
-------------------------------------------------------

When you use the same ``MongoClient`` instance to run multiple MongoDB
operations concurrently, a slow operation can cause delays to other
operations. Slow operations keep a connection to MongoDB occupied,
which can cause other operations to wait until another connection
becomes available.

If you suspect that slow MongoDB operations are causing delays, you
can check the performance of all in-progress operations by using the
following methods:

- Enable the database profiler on your deployment. To learn more, see
  :manual:`Database Profiler </tutorial/manage-the-database-profiler/>`
  in the Server manual.
- Run the ``db.currentOp()`` MongoDB Shell command. To learn more, see the 
  :manual:`db.currentOp() </reference/method/db.currentOp/>`
  documentation in the Server manual.
- Enable connection pool monitoring. To learn more, see
  :ref:`node-connection-pool-monitoring`.

After you determine which operations are causing delays, try to improve
the performance of these operations. Read the :website:`Best Practices
Guide for MongoDB Performance </basics/best-practices>` for possible solutions.

If you implement performance best practices but still
experience delays, you can modify your connection settings to increase
the size of the connection pool. A connection pool is the group of
connections to the server that the driver maintains at any time.

To specify the maximum size of a
connection pool, you can set the ``maxPoolSize`` option in the
:ref:`connection options <node-connection-options>` for your
``MongoClient`` instance. The default value
of ``maxPoolSize`` is ``100``. If the number of in-use connections to a
server reaches ``maxPoolSize``, the next operation sent to the server
pauses until a connection to the driver becomes available. The following
code sets ``maxPoolSize`` to ``150`` when creating a new ``MongoClient``:

.. code-block:: js
   
   const client = new MongoClient(uri, { maxPoolSize: 150 });

.. tip::
   
   To learn more about connection pooling, see the :ref:`Connection Pool Overview
   <node-faq-connection-pool>` section in the Connection Pools page.

API Documentation
-----------------

For more information about creating a ``MongoClient`` object with the 
{+driver-short+}, see the following API documentation: 

- `MongoClient <{+api+}/classes/MongoClient.html>`__
- `MongoClientOptions <{+api+}/interfaces/MongoClientOptions.html>`__