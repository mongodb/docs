.. _scala-project:

========================
Specify Fields To Return
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: read, filter, project, select

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to specify which fields
to return from a read operation by using a **projection**. A projection is a document
that specifies which fields MongoDB returns from a query.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``restaurants`` collection in the ``sample_restaurants``
database from the :atlas:`Atlas sample datasets </sample-data>`. To access this collection
from your Scala application, create a ``MongoClient`` that connects to an Atlas cluster
and assign the following values to your ``database`` and ``collection`` variables:

.. literalinclude:: /includes/read/project.scala
    :language: scala
    :dedent:
    :start-after: start-db-coll
    :end-before: end-db-coll

To learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the
:atlas:`Get Started with Atlas </getting-started>` guide.

Projection Types
----------------

You can use a projection to specify which fields to include in a return
document, or to specify which fields to exclude. You cannot combine inclusion and
exclusion statements in a single projection, unless you are excluding the
``_id`` field.

Specify Fields to Include
~~~~~~~~~~~~~~~~~~~~~~~~~

To specify the fields to include in the result, chain the ``projection()`` method
to the ``find()`` method. The ``Projections`` class provides the ``include()`` helper
method that you can use to set the fields to include.

The following example uses the ``find()`` method to find all restaurants in which the ``name``
field value is ``"Emerald Pub"``. Then, the code calls the ``projection()`` and ``include()``
methods to instruct the find operation to return only the ``name``, ``cuisine``, and ``borough`` fields
of matching documents:

.. io-code-block::
   :copyable:   

   .. input:: /includes/read/project.scala
      :start-after: start-project-include
      :end-before: end-project-include
      :language: scala
      :dedent:

   .. output::
      :visible: false

      {"_id": {"$oid": "..."}, "borough": "Manhattan", "cuisine": "American", "name": "Emerald Pub"}
      {"_id": {"$oid": "..."}, "borough": "Queens", "cuisine": "American", "name": "Emerald Pub"}

When you use a projection to specify fields to include in the return
document, the ``_id`` field is also included by default. All other fields are
implicitly excluded. To remove the ``_id`` field from the return
document, you must :ref:`explicitly exclude it <scala-project-remove-id>`.

.. _scala-project-remove-id:

Exclude the ``_id`` Field
~~~~~~~~~~~~~~~~~~~~~~~~~

When specifying fields to include, you can also exclude the ``_id`` field from
the returned document. The ``Projections`` class provides the ``excludeId()`` helper
method that you can use to omit this field.

The following example performs the same query as the preceding example but
excludes the ``_id`` field from the projection:

.. io-code-block::
   :copyable:   

   .. input:: /includes/read/project.scala
      :start-after: start-project-include-without-id
      :end-before: end-project-include-without-id
      :language: scala
      :dedent:

   .. output::
      :visible: false

      {"borough": "Manhattan", "cuisine": "American", "name": "Emerald Pub"}
      {"borough": "Queens", "cuisine": "American", "name": "Emerald Pub"}

Specify Fields to Exclude
~~~~~~~~~~~~~~~~~~~~~~~~~

To specify the fields to exclude from the result, chain the ``projection()`` method
to the ``find()`` method. The ``Projections`` class provides the ``exclude()`` helper
method that you can use to set the fields to exclude.

The following example uses the ``find()`` method to find all restaurants in which the ``name``
field value is ``"Emerald Pub"``. Then, the code calls the ``projection()`` and ``exclude()``
methods to instruct the find operation to omit the ``name`` and ``address`` fields
in the result:

.. io-code-block::
   :copyable:

   .. input:: /includes/read/project.scala
      :start-after: start-project-exclude
      :end-before: end-project-exclude
      :language: scala
      :dedent:

   .. output:: 
      :visible: false

      {"_id": {"$oid": "..."}, "borough": "Manhattan", "cuisine": "American",
      "grades": [...], "restaurant_id": "40367329"}
      {"_id": {"$oid": "..."}, "borough": "Queens", "cuisine": "American",
      "grades": [...], "restaurant_id": "40668598"}

When you use a projection to specify which fields to exclude,
any unspecified fields are implicitly included in the return document.

Additional Information
----------------------

To learn more about projections, see the :manual:`Project Fields
</tutorial/project-fields-from-query-results/>` guide in the {+mdb-server+} manual.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `find() <{+api+}/org/mongodb/scala/MongoCollection.html#find[C](filter:org.mongodb.scala.bson.conversions.Bson)(implicite:org.mongodb.scala.bson.DefaultHelper.DefaultsTo[C,TResult],implicitct:scala.reflect.ClassTag[C]):org.mongodb.scala.FindObservable[C]>`__
- `projection() <{+api+}/org/mongodb/scala/FindObservable.html#projection(projection:org.mongodb.scala.bson.conversions.Bson):org.mongodb.scala.FindObservable[TResult]>`__
- `Projections <{+api+}/org/mongodb/scala/model/Projections$.html>`__
- `include() <{+api+}/org/mongodb/scala/model/Projections$.html#include(fieldNames:String*):org.mongodb.scala.bson.conversions.Bson>`__
- `excludeId() <{+api+}/org/mongodb/scala/model/Projections$.html#excludeId():org.mongodb.scala.bson.conversions.Bson>`__
- `exclude() <{+api+}/org/mongodb/scala/model/Projections$.html#exclude(fieldNames:String*):org.mongodb.scala.bson.conversions.Bson>`__