.. meta::
   :robots: noindex, nosnippet

.. _kotlin-schema-versions-and-migrations:
.. _kotlin-change-object-model:

====================================
Change an Object Model - Kotlin SDK
====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/note-modify-schema-properties-of-synced-realms.rst

Overview
--------

You can make changes to your object schema after you 
:ref:`create your Realm object model <kotlin-define-object-model>`.  
Depending on the type of changes you make to the schema, the changes can be 
automatically applied or require a manual update to the new schema.  

- Realm will automatically update a Realm :ref:`object schema <kotlin-object-schema>` when you add or 
  delete a property from a Realm object model. 
  You only need to update the schema version.
- For all other schema changes, you must manually migrate old instances 
  of a given object to the new schema. 

.. tip:: Bypass Migration During Development

   When developing or debugging your application, you may prefer to :ref:`delete 
   the realm <kotlin-delete-to-avoid-migration>` instead of migrating it. Use the 
   `deleteRealmIfMigrationNeeded <{+kotlin-local-prefix+}io.realm.kotlin/-realm-configuration/-builder/delete-realm-if-migration-needed.html>`__ 
   flag to delete the database automatically when a schema mismatch would
   require a migration. 

   Never release an app to production with this flag set to ``true``.

.. _kotlin-schema-version:

Schema Version
--------------

A **schema version** identifies the state of a 
:ref:`realm schema<kotlin-realm-schema>` at some point in time. 
Realm tracks the schema version of each realm and uses it to map the
objects in each realm to the correct schema.

Schema versions are ascending integers that you can optionally include
in the realm configuration when you :ref:`open a realm <kotlin-open-a-realm>`. 
If a client application does not specify a version number when it opens a 
realm, then the realm defaults to version ``0``.

.. important:: Increment Versions Monotonically
   
   Migrations must update a realm to a higher schema version. 
   Realm will throw an error if a client
   application opens a realm with a schema version that is lower than
   the realm's current version or if the specified schema version is the
   same as the realm's current version but includes different
   object schemas.

.. _kotlin-migrations:

Migration
---------

Schema updates are called **migrations** in Realm.
A migration updates a realm and any objects it
contains from one schema version to a newer version. 

Whenever you open an existing realm with a schema version greater than the
realm's current version, you can provide a **migration function** that 
defines any additional logic needed for the schema update.
For example: 

- Setting property values
- Combining or splitting fields
- Renaming a field
- Changing a field's type
  
The function has access to the realm's version number and incrementally
updates objects in the realm to conform to the new schema.

A **local migration** is a migration for a realm that does *not* 
automatically :ref:`Sync <sync>` with another realm. 

.. note::
   To modify schema properties of a synced realm, refer to 
   :ref:`Update a Data Model <synced-schema-overview>` in the Atlas
   Device Sync documentation.

Automatically Update Schema
---------------------------

If your schema update adds or removes properties, 
Realm can perform the migration automatically. 
You only need to increment the ``schemaVersion``. 

.. _kotlin-add-a-property:

Add a Property
~~~~~~~~~~~~~~

To add a property to a schema:  

#. Add the new property to the ``RealmObject`` definition.
#. Set the schema version through the `RealmConfiguration <{+kotlin-local-prefix+}io.realm.kotlin/-realm-configuration/index.html>`__ builder.

Realm automatically sets values for new properties if the updated object schema 
specifies a default value. 
If the updated object schema does not specify a default value, you must manually
set values for the new property through a :ref:`migration function <kotlin-other-migration-tasks>`.  

.. example::
   
   A realm using schema version ``1`` has a ``Person`` object type 
   with first name, last name, and age properties: 
      
   .. literalinclude:: /examples/generated/kotlin/MigrationTest.snippet.model-v1.kt
    :language: kotlin

   The developer adds an ``email`` field to the ``Person`` class:

   .. literalinclude:: /examples/generated/kotlin/MigrationTest.snippet.model-v2.kt
    :language: kotlin
    :emphasize-lines: 6

   To change the realm to conform to the updated ``Person`` schema, the
   developer sets the realm's schema version to ``2``:

   .. literalinclude:: /examples/generated/kotlin/MigrationTest.snippet.update-schema-version-2.kt
     :language: kotlin
     :emphasize-lines: 4

.. _kotlin-delete-a-property:

Delete a Property
~~~~~~~~~~~~~~~~~

To delete a property from a schema: 

#. Remove the property from the object's class.
#. Set the schema version through the 
   `RealmConfiguration <{+kotlin-local-prefix+}io.realm.kotlin/-realm-configuration/index.html>`__ builder. 

Deleting a property will not impact existing objects.

.. example::
   
   A realm using schema version ``2`` has a ``Person`` object type 
   with first name, last name, age, and email properties:
   
   .. literalinclude:: /examples/generated/kotlin/MigrationTest.snippet.model-v2.kt
    :language: kotlin

   The developer removes the ``age`` field from the ``Person`` class:

   .. literalinclude:: /examples/generated/kotlin/MigrationTest.snippet.model-v3.kt
    :language: kotlin
    :emphasize-lines: 5

   To change the realm to conform to the updated ``Person`` schema, the
   developer sets the realm's schema version to ``3``:

   .. literalinclude:: /examples/generated/kotlin/MigrationTest.snippet.update-schema-version-3.kt
     :language: kotlin
     :emphasize-lines: 4

.. _kotlin-perform-a-schema-migration:

Manually Migrate Schema
-----------------------

For more complex schema updates, Realm requires you to manually 
migrate old instances of a given object to the new schema.

When you open the realm with the updated schema, you must do the following
in the 
`RealmConfiguration <{+kotlin-local-prefix+}io.realm.kotlin/-realm-configuration/index.html>`__:

- Increment the ``schemaVersion`` property.
- Define the migration logic using the `migrationContext <{+kotlin-local-prefix+}io.realm.kotlin.migration/-automatic-schema-migration/-migration-context/index.html>`__.

.. _kotlin-modify-a-property:
.. _kotlin-rename-a-property:

Modify a Property
~~~~~~~~~~~~~~~~~

To modify an object property (e.g. rename, merge, split, or change property
type): 

#. Change the property or properties in the object schema.
#. Open the realm with an incremented schema version and a
   migration function that maps the existing objects to use the new properties.

In the following example, the schema is updated to change a property type, merge two properties into a new property, and rename an existing property:

.. literalinclude:: /examples/generated/kotlin/MigrationTest.snippet.model-v4.kt
   :language: kotlin

Then, the migration function defines the migration logic to map data between 
the modified properties in the old object schema and the new object schema:

.. literalinclude:: /examples/generated/kotlin/MigrationTest.snippet.local-migration.kt
   :language: kotlin

.. _kotlin-convert-to-an-embedded-object:

.. note:: 

  If your schema update includes converting a 
  `RealmObject <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__ to an 
  `EmbeddedRealmObject <{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__, 
  the migration function must ensure that the embedded object has exactly one 
  parent object linked to it. 
  Embedded objects cannot exist independently of a parent object. 

.. _kotlin-other-migration-tasks:

Other Migration Tasks
~~~~~~~~~~~~~~~~~~~~~

To perform other realm schema migrations, use the following properties of
the ``AutomaticSchemaMigration.MigrationContext`` interface:

- `oldRealm <{+kotlin-local-prefix+}io.realm.kotlin.migration/-automatic-schema-migration/-migration-context/old-realm.html>`__: 
  The realm as it existed before the migration with the previous schema 
  version.
  The `dynamic API <{+kotlin-local-prefix+}io.realm.kotlin.dynamic/index.html>`__ lets you find Realm objects by a string representation of 
  their class name.
- `newRealm <{+kotlin-local-prefix+}io.realm.kotlin.migration/-automatic-schema-migration/-migration-context/new-realm.html>`__:
  The realm as it exists after the migration using the new schema version. 
  
Any objects obtained from ``oldRealm`` and ``newRealm`` 
are valid only in the scope of the migration function.

By the end of the migration, you must migrate all data affected by the schema 
update from the old realm to the new realm. 
Any data affected by the schema update that is not migrated will be lost. 

.. literalinclude:: /examples/generated/kotlin/MigrationTest.snippet.local-migration-other.kt
   :language: kotlin
