=====================
$redact (aggregation)
=====================

.. default-domain:: mongodb

Definition
----------

.. pipeline:: $redact

   .. versionadded:: 2.6

   Restricts the contents of the documents based on information stored
   in the documents themselves.

   The :pipeline:`$redact` pipeline operator takes an expression that
   evaluates to `$$DESCEND`_, `$$PRUNE`_, or `$$KEEP`_.

   For example, the following :pipeline:`$redact` pipeline uses the
   :expression:`$cond` expression [#cond-syntax]_:

   .. code-block:: none

      db.<collection>.aggregate(
         [
           { $redact:
              {
                 $cond:
                    {
                       if: <boolean-expression>,
                       then: <"$$DESCEND" | "$$PRUNE" | "$$KEEP">,
                       else: <"$$DESCEND" | "$$PRUNE" | "$$KEEP">
                    }
              }
           }
         ]
      )

   In the example :expression:`$cond` expression, the
   ``<boolean-expression>`` uses a field or fields in the document to
   specify the conditions for either returning or omitting content.

   .. tip:: To handle documents that are missing field(s) used in
      ``<boolean-expression>``, include :expression:`$ifNull` in the
      expression.

   .. list-table::
      :header-rows: 1
      :widths: 15 50

      * - System Variable

        - Description

      * - _`$$DESCEND`

        - :pipeline:`$redact` returns the *non-subdocument* fields at
          the current document/subdocument level. For subdocuments or
          subdocuments in arrays, apply the :expression:`$cond`
          expression to the subdocuments to determine access for these
          subdocuments.

      * - _`$$PRUNE`

        - :pipeline:`$redact` excludes all fields at this current
          document/subdocument level, **without** further inspection of
          any of the excluded fields. This applies even if the excluded
          field contains subdocuments that may have different access
          levels.

      * - _`$$KEEP`

        - :pipeline:`$redact` returns or keeps all fields at this
          current document/subdocument level, **without** further
          inspection of the fields at this level. This applies even if
          the included field contains subdocuments that may have
          different access levels.

.. seealso:: :expression:`$cond`.

.. [#cond-syntax] The :expression:`$cond` expression supports an
   alternate syntax that accepts an array instead of a document form.
   See :expression:`$cond` for details.

Examples
--------

The examples in this section use the
:method:`db.collection.aggregate()` helper provided in the 2.6 version
of the :program:`mongo` shell.

Evaluate Access at Every Document/Sub-document Level
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A ``forecasts`` collection contains documents of the following form
where the ``tags`` field lists the different access values for that
document/subdocument level; i.e. a value of ``[ "G", "STLW" ]``
specifies either ``"G"`` or ``"STLW"`` can access the data:

.. code-block:: javascript

   {
      _id: 1,
      title: "123 Department Report",
      tags: [ "G", "STLW" ],
      year: 2014,
      subsections: [
          {
              subtitle: "Section 1: Overview",
              tags: [ "SI", "G" ],
              content:  "Section 1: This is the content of section 1."
          },
          {
              subtitle: "Section 2: Analysis",
              tags: [ "STLW" ],
              content: "Section 2: This is the content of section 2."
          },
          {
              subtitle: "Section 3: Budgeting",
              tags: [ "TK" ],
              content: {
                  text: "Section 3: This is the content of section3.",
                  tags: [ "HCS" ]
              }
          }
      ]
   }

A user has access to view information with either the tag ``"STLW"`` or
``"G"``. To run a query on all documents with year ``2014`` for this
user, include a :pipeline:`$redact` stage as in the following:

.. code-block:: none

   var userAccess = [ "STLW", "G" ];
   db.forecasts.aggregate(
      [
        { $match: { year: 2014 } },
        { $redact:
            {
               $cond:
                  {
                    if: { $gt: [ { $size: { $setIntersection: [ "$tags", userAccess ] } }, 0 ] },
                    then: "$$DESCEND",
                    else: "$$PRUNE"
                  }
            }
        }
      ]
   )

The aggregation operation returns the following "redacted" document:

.. code-block:: none

   {
      "_id" : 1,
      "title" : "123 Department Report",
      "tags" : [ "G", "STLW" ],
      "year" : 2014,
      "subsections" : [
         {
            "subtitle" : "Section 1: Overview",
            "tags" : [ "SI", "G" ],
            "content" : "Section 1: This is the content of section 1."
         },
         {
            "subtitle" : "Section 2: Analysis",
            "tags" : [ "STLW" ],
            "content" : "Section 2: This is the content of section 2."
         }
      ]
   }

.. seealso:: :expression:`$size`, :expression:`$setIntersection`

Exclude All Fields at a Given Level
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A collection ``accounts`` contains the following document:

.. code-block:: javascript

   {
     _id: 1,
     level: 1,
     acct_id: "xyz123",
     cc: {
           level: 5,
           type: "yy",
           num: 000000000000,
           exp_date: ISODate("2015-11-01T00:00:00.000Z"),
           billing_addr: {
                           level: 5,
                           addr1: "123 ABC Street",
                           city: "Some City"
                         },
           shipping_addr: [
                             { 
                               level: 3,
                               addr1: "987 XYZ Ave",
                               city: "Some City"
                             },
                             { 
                               level: 3,
                               addr1: "PO Box 0123",
                               city: "Some City"
                             }
                          ]
         },
     status: "A"
   }

In this example document, the ``level`` field determines the access
level required to view the data.

To run a query on all documents with status ``A`` and exclude *all*
fields contained in a document/subdocument at level ``5``, include a
:pipeline:`$redact` stage that specifies the system variable
``"$$PRUNE"`` in the ``then`` field:

.. code-block:: none

   db.accounts.aggregate(
      [
        { $match: { status: "A" } },
        { $redact:
           {
               $cond: {
                        if: { $eq: [ "$level", 5 ] },
                        then: "$$PRUNE",
                        else: "$$DESCEND"
                      }
           }
        }
      ]
   )

The :pipeline:`$redact` stage evaluates the ``level`` field to
determine access. If the ``level`` field equals ``5``, then exclude all
fields at that level, even if the excluded field contains subdocuments
that may have different ``level`` values, such as the ``shipping_addr``
field.

The aggregation operation returns the following "redacted" document:

.. code-block:: none

   {
     "_id" : 1,
     "level" : 1,
     "acct_id" : "xyz123",
     "status" : "A"
   }

The result set shows that the :pipeline:`$redact` stage excluded
the field ``cc`` as a whole, including the ``shipping_addr`` field
which contained subdocuments that had ``level`` field values equal to
``3`` and not ``5``.

.. seealso::
   :doc:`/tutorial/control-access-to-document-content-with-multiple-tag-sets` for
   steps to set up multiple combinations of access for the same data.
