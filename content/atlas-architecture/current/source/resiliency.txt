.. _arch-center-resiliency:

=======================================
Guidance for {+service+} for Resiliency
=======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

.. tabs-selector:: drivers

MongoDB |service| is a highly-performant database that is designed 
to maintain uptime regardless of infrastructure outages, system maintenance, 
and more. Use the guidance on this page to plan settings to maximize the 
resiliency of your application and database.

Features for {+service+} Resiliency
-----------------------------------

Database Replication 
~~~~~~~~~~~~~~~~~~~~

|service| {+clusters+} consist of a `replica set <https://www.mongodb.com/docs/manual/replication/>`__ 
with a minimum of three nodes, and you can increase the node count to any odd 
number of nodes you require. |service| first writes data from your application 
to a `primary node <https://www.mongodb.com/docs/manual/core/replica-set-primary/>`__, and then |service| incrementally replicates and stores that 
data across all `secondary nodes <https://www.mongodb.com/docs/manual/core/replica-set-secondary/>`__ within your {+cluster+}. To 
control the durability of your data storage, you can adjust the `write concern <https://www.mongodb.com/docs/manual/reference/write-concern/>`__ of 
your application code to complete the write only once a certain number of secondaries 
have committed the write. To learn more, see :ref:`resiliency-read-write-concerns`.

By default, |service| distributes {+cluster+} nodes across availability zones within 
one of your chosen cloud provider's `availability regions <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html>`__. For example, if your 
{+cluster+} is deployed to the cloud provider region ``us-east``, |service| deploys 
nodes to ``us-east-a``, ``us-east-b`` and ``us-east-c`` by default. 

To learn more about high availability and node distribution across regions, 
see :ref:`arch-center-high-availability`.

Self-Healing Deployments
~~~~~~~~~~~~~~~~~~~~~~~~

|service| {+clusters+} must consist of an odd number of nodes, because the node 
pool must elect a primary node to and from which your application writes 
and reads directly. A cluster consisting of an even number of nodes might
result in a deadlock that prevents a primary node from being elected.

In the event that a primary node is unavailable, because of infrastructure 
outages, maintenance windows or any other reason, |service| {+clusters+} self-heal 
by promoting an existing secondary node to the role of primary node to maintain 
database availability. To learn more about this process, see `How does MongoDB Atlas deliver high availability? <https://www.mongodb.com/docs/atlas/reference/faq/deployment/#how-does-service-fullname-deliver-high-availability->`__

Maintenance Window Uptime
~~~~~~~~~~~~~~~~~~~~~~~~~

|service| maintains uptime during scheduled maintenance by applying updates in 
a rolling fashion to one node at a time. During this process, |service| elects a new 
primary when necessary just as it does during any other unplanned primary node 
outage.  

When you `configure a maintenance window <https://www.mongodb.com/docs/atlas/tutorial/cluster-maintenance-window/>`__, select a time that corresponds to when your application has the lowest amount of traffic.

Monitoring
~~~~~~~~~~

|service| provides `built-in tools <https://www.mongodb.com/docs/atlas/monitoring-alerts/>`__ 
to monitor {+cluster+} performance, query performance and more. Additionally, |service| 
integrates easily with `third-party services <https://www.mongodb.com/docs/atlas/tutorial/third-party-service-integrations/#std-label-third-party-integrations>`__. 

By actively monitoring your {+clusters+}, you can gain valuable insights into 
query and deployment performance. To learn more about monitoring in |service|, see 
`Monitor Your Clusters <https://www.mongodb.com/docs/atlas/monitoring-alerts/>`__ 
and :ref:`Monitoring and Alerts <arch-center-monitoring-alerts>`.

Deployment Resilience Testing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can simulate various scenarios that require disaster recovery workflows in 
order to measure your preparedness for such events. Specifically, with |service| 
you can `test primary node failover <https://www.mongodb.com/docs/atlas/tutorial/test-resilience/test-primary-failover/#std-label-test-failover>`__
and `simulate regional outages <https://www.mongodb.com/docs/atlas/tutorial/test-resilience/simulate-regional-outage/#std-label-test-outage>`__. We strongly recommend that you run these tests before 
deploying an application to production.

Cluster Termination Safeguards
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can prevent accidental deletion of |service| {+clusters+} by enabling 
`termination protection <https://www.mongodb.com/docs/atlas/cluster-additional-settings/#termination-protection>`__.
Enabling termination protection is especially important when leveraging 
{+iac+} tools like Terraform to ensure that a redeployment 
does not provision new infrastructure.
To delete a cluster that has termination protection enabled, you must first 
disable termination protection. By default, Atlas disables termination protection 
for all clusters.

Database Backups
~~~~~~~~~~~~~~~~

|service| Cloud Backups facilitate cloud backup storage using the native 
snapshot functionality of cloud service provider on which your {+cluster+} is 
deployed. For example, if you deploy your cluster on |aws|, you can elect to 
backup your {+cluster+}'s data with snapshots taken at configurable intervals 
in |aws| |s3|.

To learn more about database backup and snapshot retrieval, see `Back Up Your Cluster <https://www.mongodb.com/docs/atlas/backup/cloud-backup/overview/>`__. 

For recommendations on backups, see :ref:`arch-center-backups`.

.. _arch-center-resiliency-recs:

Recommendations for {+service+} Resiliency
------------------------------------------

Use MongoDB 8.0 or Later
~~~~~~~~~~~~~~~~~~~~~~~~

To improve the resiliency of your cluster, upgrade your cluster to MongoDB 8.0. 
MongoDB 8.0 introduces the following performance improvements and new features 
related to resilience:

- `Improved memory management <https://www.mongodb.com/docs/atlas/resilient-application/#std-label-resilient-upgraded-tcmalloc>`__

- `Operation rejection filters <https://www.mongodb.com/docs/atlas/resilient-application/#std-label-resilient-operations-rejection-filters>`__ to reactively mitigate expensive queries

- `Cluster-level timeouts <https://www.mongodb.com/docs/atlas/resilient-application/#std-label-resilient-default-read-timeout>`__ for proactive protection against expensive read operations

- Better workload isolation with the :ref:`moveCollection command
  <arch-center-move-collection>`


Connecting Your Application to |service|
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We recommend that you use a connection method built on the most `current driver version <https://www.mongodb.com/docs/drivers/>`__ 
for your application's programming language whenever possible. And while the 
default connection string |service| provides is a good place to start, you might 
want to tune it for performance in the context of your specific application 
and deployment architecture. 

For example, you might want to set a short ``maxTimeMS`` for a 
microservice that provides a login capability, whereas you may want to set the 
``maxTimeMS`` to a much larger value if the application code is a long-running 
analytics job request against the cluster.

`Tuning your connection pool settings <https://www.mongodb.com/docs/manual/tutorial/connection-pool-performance-tuning/>`__ 
is particularly important in the context of enterprise level application deployments. 

Connection Pool Considerations for Performant Applications
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Opening database client connections is one of the most
resource-intensive processes
involved in maintaining a client connection pool that facilitates application access 
to your |service| {+cluster+}. 

Because of this, it is worth thinking about how and when you would like this 
process of opening client connections to unfold in the context of your specific 
application. 

For example, if you are scaling your |service| {+cluster+} to meet user demand, 
consider what the minimum pool size of connections your application will 
consistently need, so that when the application pool scales the additional 
networking and compute load that comes with opening new client connections 
doesn't undermine your application's time-sensitive need for increased 
database operations. 

Min and Max Connection Pool Size 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If your ``minPoolSize`` and ``maxPoolSize`` values are similar, the majority of your 
database client connections open at application startup. For example, if your
``minPoolSize`` is set to ``10`` and your ``maxPoolSize`` is set to ``12``, 10 
client connections open at application startup, and only 2 more connections 
can then be opened during application runtime. However, if your ``minPoolSize`` 
is set to ``10`` and your ``maxPoolSize`` is set to ``100``, up to 90 additional 
connections can be opened as needed during application runtime.

Additional network overhead associated with opening new client connections.
So, consider whether you would prefer to incur that network cost at 
application startup, or to incur it dynamcially in as as-needed basis during 
application runtime, which has the potential to impact operational latency and 
perceived performance for end-users if there is a sudden spike in requests that 
requires a large number of additional connections to be opened at once.

Your application's architecture is central to this consideration. If, for example, 
you deploy your application as microservices, consider which services should 
call |service| directly as a means of controlling the dynamic expansion and 
contraction of your connection pool. Alternatively, if your application deployment 
is leveraging single-threaded resources, like AWS Lambda, your application will 
only ever be able to open and use one client connection, so your ``minPoolSize`` 
and your ``maxPoolSize`` should both be set to ``1``.

Query Timeout
~~~~~~~~~~~~~

Almost invariably, workload-specific queries from your application will vary in 
terms of the amount of time they take to execute in |service| and in terms of 
the amount of time your application can wait for a response.  

You can set `query timeout <https://www.mongodb.com/docs/manual/tutorial/query-documents/specify-query-timeout/>`__ 
behavior globally in |service|, and you can also define it at the query level. 

Retryable Database Reads and Writes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

|service| supports `retryable read <https://www.mongodb.com/docs/manual/core/retryable-reads/>`__ 
and `retryable write <https://www.mongodb.com/docs/manual/core/retryable-writes/>`__ 
operations. When enabled, |service| retries read and write operations once as a 
safeguard against intermittent network outages. 

.. _resiliency-read-write-concerns:

Configure Read and Write Concerns 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

|service| {+clusters+} eventually replicate all data across all nodes. However, 
you can configure the number of nodes across which data must be replicated before 
a read or write operation is reported to have been successful. You can define
`read concerns <https://www.mongodb.com/docs/manual/reference/read-concern/>`__ and 
`write concerns <https://www.mongodb.com/docs/manual/reference/write-concern/>`__ 
globally in |service|, and you can also define them at the client level in your 
connection string. |service| has a default write concern of ``majority``, meaning that 
data must be replicated across more than half of the nodes in your cluster 
before |service| reports success. Conversely, |service| has a default read concern
of ``local``, which means that when queried, |service| retrieves data from only 
one node in your cluster

.. _arch-center-move-collection:

Isolate the Impact of Busy, Unsharded Collections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/cloud-docs/move-collection.rst

Disaster Recovery 
~~~~~~~~~~~~~~~~~

For recommendations on disaster recovery best practices for |service|,
see :ref:`arch-center-dr` and :ref:`arch-center-ha-configurations`.

Resilient Example Application
-----------------------------

.. include:: /includes/cloud-docs/example-resilient-app.rst
