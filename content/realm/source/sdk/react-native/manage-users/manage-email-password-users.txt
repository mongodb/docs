.. meta::
   :robots: noindex, nosnippet

.. _react-native-manage-email-password-users:

==============================================
Manage Email/Password Users - React Native SDK
==============================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can register a new user account, confirm a user email address, or reset a
user's password in your app's React Native client code.

The ``@realm/react`` hook ``useEmailPasswordAuth`` has methods and enums 
specifically for managing email/password users. Refer to
:ref:`useEmailPasswordAuth Hook <react-native-email-pass-hook>` for a quick
reference.

Prerequisites
-------------

Before you can authenticate a user, you must:

- :ref:`Create an App Services App <create-a-realm-app>`
- Enable email/password authentication in the App. For details, refer to
  :ref:`email-password-authentication` in the App Services documentation.
- :ref:`Install the React Native SDK <react-native-install>`

Configure User Authentication in Client
---------------------------------------

``@realm/react`` has providers and hooks for user authentication. To configure
user authentication:

#. Set up ``@realm/react`` providers.
#. Log a user in with a ``UserProvider`` fallback component.

Set up @realm/react Providers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Components wrapped by :realm-react-sdk:`AppProvider <functions/AppProvider.html>`
can access the :realm-react-sdk:`useApp <functions/useApp.html>` and
:realm-react-sdk:`useAuth <functions/useAuth.html>` hooks. These components only
render if ``AppProvider`` successfully connects to your App Services backend.

Components wrapped by :realm-react-sdk:`UserProvider <functions/UserProvider.html>`
can access authenticated users with the :realm-react-sdk:`useUser 
<functions/useUser.html>` hook. These components only render if your app has an
authenticated user

To configure user authentication:

#. Wrap all components that need to access App Services in ``AppProvider``.
#. Inside of ``AppProvider``, wrap all components that you want to have access
   to an authenticated user with ``UserProvider``.
#. In ``UserProvider``, include a ``fallback`` prop with a component
   that logs a user in. The app renders this component if there
   is no authenticated user.

.. include:: /examples/generated/react-native/v12/RealmWrapper.snippet.configure-user-provider.tsx.rst
.. _react-native-email-login:

Log In with a Fallback Component
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Users must have a registered email/password account before they can log in.
After a user logs in, all components wrapped in ``UserProvider`` have access
to an instance of that user object through the :realm-react-sdk:`useUser 
<functions/useUser.html>` hook.

To log a user in with email and password:

#. Register user if they aren't already.
#. Destructure ``logIn`` and ``result`` from the ``useEmailPasswordAuth`` hook.
#. Pass the user's email and password to ``LogIn()`` as an object.
#. Handle the ``result``.

.. include:: /examples/generated/react-native/v12/LoginWithEmail.snippet.email-password-login.tsx.rst

.. _react-native-register-new-user:

Register a New User Account
---------------------------

Before you can register a new email/password user, you need to get their email
address and password. The email address must not be associated with another
email/password user and the password must be between 6 and 128 characters.

After registration, you must confirm a new user's email address before they can
log in to your app.

To register a new user account:

#. Destructure ``register`` and ``result`` from the ``useEmailPasswordAuth``
   hook.
#. Pass the user's email and password to ``register()`` as an object.
#. Confirm the user's email address.

.. include:: /examples/generated/react-native/v12/LoginWithEmail.snippet.email-password-register.tsx.rst

.. _react-native-confirm-user:
.. _react-native-complete-confirmation:

.. _react-native-confirm-new-user:

Confirm a User's Email Address
------------------------------

New users must confirm that they own their email address before they can log in
to your app unless the auth provider is configured to :ref:`automatically confirm new
users <auth-automatically-confirm-users>`. The confirmation process starts
when you register a user and ends when you confirm them from your client code.

Email confirmation requries a valid ``token`` and ``tokenId``. You get these
values from different places depending on the auth provider configuration:

- :ref:`Send a confirmation email <auth-send-a-confirmation-email>`. The
  ``token`` and ``tokenId`` values are included as query parameters in the
  :guilabel:`Email Confirmation URL`.

- :ref:`Run a confirmation function <auth-run-a-confirmation-function>`. The
  ``token`` and ``tokenId`` values are passed to the function as arguments.

To confirm a registered user:

#. In App Services, make sure :guilabel:`User Confirmation Method` is set to
   :guilabel:`Send a confirmation email`.
#. In your client code, destructure ``confirm`` and ``result`` from the
   ``useEmailPasswordAuth`` hook.
#. Pass ``token`` and ``tokenId`` to ``confirm()`` as an object.
#. Handle confirmation based on ``result``.

.. This code example isn't tested because it's paricularly difficult to test
   in an idempotent way. And the App Services App is set to automatically
   confirm users. The SDK team doesn't properly test it either.

.. code-block:: typescript

   interface ConfirmUserProps {
     token: string;
     tokenId: string;
   }

   const ConfirmUser = ({token, tokenId}: ConfirmUserProps) => {
     const {confirm, result} = useEmailPasswordAuth();

     const performConfirmation = () => {
       confirm({token, tokenId});
     };

     // Handle `result`...
   }

.. _react-native-email-password-retry-user-confirmation:

Retry User Confirmation Methods
-------------------------------

The SDK provides methods to resend user confirmation emails or retry custom 
confirmation methods.

.. _react-native-resend-confirmation-email:

Resend a Confirmation Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the provider is configured to :ref:`send a confirmation email
<auth-send-a-confirmation-email>`, Atlas App Services automatically sends a
confirmation email when a user registers. The email contains a link to the
configured :guilabel:`Email Confirmation URL` with a token that is valid for 
30 minutes. If a user does not follow the link and confirm within that period, 
they must request a new confirmation email.

To resend a confirmation email:

#. Destructure ``resendConfirmationEmail`` and ``result`` from the
   ``useEmailPasswordAuth`` hook.
#. Pass the user's email to ``resendConfirmationEmail()`` as an object.
#. Handle confirmation based on ``result``.

.. This code example isn't tested because it's paricularly difficult to test
   in an idempotent way. And the App Services App is set to automatically
   confirm users. The SDK team doesn't properly test it either.

.. code-block:: typescript

   const ResendUserConfirmationEmail = () => {
     const {resendConfirmationEmail, result} = useEmailPasswordAuth();
     const [email, setEmail] = useState('');

     const performResendConfirmationEmail = () => {
       resendConfirmationEmail({email});
     };

     // Handle `result`...
   }

.. _react-native-email-password-resend-confirmation-function:

Retry a User Confirmation Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can rerun your :ref:`custom confirmation function 
<auth-run-a-confirmation-function>` if needed.

To retry a user confirmation function:

#. Destructure ``retryCustomConfirmation`` and ``result`` from the
   ``useEmailPasswordAuth`` hook.
#. Pass the user's email to ``retryCustomConfirmation()`` as an object.
#. Handle confirmation based on ``result``.

.. This code example isn't tested because it's paricularly difficult to test
   in an idempotent way. And the App Services App is set to automatically
   confirm users. The SDK team doesn't properly test it either.

.. code-block:: typescript

   const RetryCustomUserConfirmation = () => {
     const {retryCustomConfirmation, result} = useEmailPasswordAuth();
     const [email, setEmail] = useState('');

     const performRetryCustomConfirmation = () => {
       retryCustomConfirmation({email});
     };

     // Handle `result`...
   }

.. _react-native-reset-password:

Reset a User's Password
-----------------------

Resetting a user's password is a multistep process.

1. In your client app, provide a UI for a user to reset their password. 
   Your App Services App can then send an email or run a custom function 
   to confirm the user's identity.
#. After confirming the user's identity, complete the password reset request. 
#. After the password reset finishes, the user can log in using the new password.

For more information about how to set your preferred password reset method,
refer to the :ref:`App Services Email/Password Authentication documentation 
<email-password-authentication-password-resets>`.

.. _react-native-send-password-reset-email:

Reset Password with Email
~~~~~~~~~~~~~~~~~~~~~~~~~

You can send password reset emails to confirm users' identities. You must
configure your App Services App to :ref:`send a password reset email 
<auth-send-a-password-reset-email>`. Mobile applications can handle password
resets directly in the app. Configure deep linking in Android or universal links
in iOS.

The ``token`` and ``tokenId`` values from password reset emails are valid for
30 minutes. If users don't visit the email's :guilabel:`Password Reset URL` in
that time, the values expire and users must request another password reset
email.

To reset a password with email:

#. In App Services, make sure :guilabel:`Password Reset Method` is set to 
   :guilabel:`Send a password reset email`.
#. In your client code, destructure ``sendResetPasswordEmail``,
   ``resetPassword``, and ``result`` from the ``useEmailPasswordAuth`` hook.
#. Pass the user's email to ``sendResetPasswordEmail()`` as an object.
#. Extract the ``token`` and ``tokenId`` values from the reset email password
   URL.
#. Pass the new user password, ``token``, and ``tokenId`` to ``resetPassword()``
   as an object.

.. include:: /examples/generated/react-native/v12/LoginWithEmail.snippet.password-reset-send-email.tsx.rst
.. include:: /examples/generated/react-native/v12/LoginWithEmail.snippet.password-reset.tsx.rst

.. _react-native-call-password-reset-function:

Call a Password Reset Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can call an App Services Function that you define to handle password resets.
You must configure your App Services App to :ref:`run a password reset function 
<auth-run-a-password-reset-function>`.

This function can take a username, a password, and any number 
of additional arguments. You can use these arguments to specify details 
like security question answers or other challenges that the user should 
pass to successfully complete a password reset.

On the App Services side, you define the custom password reset function that
runs when you call this method. That function should return one of three
possible statuses:

- ``fail``
- ``pending``
- ``success``

A ``fail`` status is treated as an error. The SDK method
``callResetPasswordFunction()`` does not take return values, so it does not
return a ``pending`` or ``success`` status to the client.

To call a password reset function:

#. In App Services, create a password reset function.
#. In App Services, make sure :guilabel:`Password Reset Method` is set to
   :guilabel:`Run a password reset function` and point it to your new function.
#. In your client code, destructure ``callResetPasswordFunction`` and ``result``
   from the ``useEmailPasswordAuth`` hook.
#. Pass the user's email and password to ``callResetPasswordFunction()`` as an
   object, followed by any other arguments you defined for your custom function.

.. This code example isn't tested because it's paricularly difficult to test
   in an idempotent way.

.. code-block:: typescript
   
   const ResetPasswordWithFunction = () => {
     const {callResetPasswordFunction, result} = useEmailPasswordAuth();
     const [email, setEmail] = useState('');
     const [password, setPassword] = useState('');

     const performResetPassword = () => {
       callResetPasswordFunction({email, password}, "extraArg1", "extraArg2");
     };
   }

.. _react-native-complete-password-reset:

Server-Side Pending Case
````````````````````````

Your :ref:`App Services password reset function 
<auth-run-a-password-reset-function>` may return ``pending`` if you want 
the user to take some additional step to confirm their identity. However, that
return value is not passed to the SDK's ``callResetPasswordFunction()``, so 
your client app must implement its own logic to handle a ``pending`` status.

Your server-side function might send an email using a custom email provider. 
Or you may use SMS to confirm the user's identity via text message. 

You have access to a ``token`` and ``tokenId`` in the App Services password 
reset function context. If you pass this information from your App Services 
password reset function, you can pass these values back to your app using
platform-specific deep linking or universal links. Then, your client 
application can use the :realm-react-sdk:`useEmailPasswordAuth hook 
<functions/useEmailPasswordAuth.html>` to complete the password reset flow.

.. include:: /examples/generated/react-native/v12/LoginWithEmail.snippet.password-reset.tsx.rst

Server-Side Success Case
````````````````````````

If your :ref:`App Services password reset function 
<auth-run-a-password-reset-function>` does additional validation within 
the function, or if you have validated the user's identity prior to 
attempting to reset the password, you may configure the App Services function
to return ``success``. However, that return value is not passed to the SDK's 
``callResetPasswordFunction()``, so your client app must implement its 
own logic to handle a ``success`` status.

.. _react-native-email-pass-hook:

useEmailPasswordAuth Hook Reference
-----------------------------------

The ``useEmailPasswordAuth`` hook has methods to streamline managing
email/password users. It also has state related to authentication. Refer to the
:ref:`useEmailPasswordAuth <react-native-use-emailpassword-auth>` reference for
details.

You can also check out the ``@realm/react`` API documentation for
:realm-react-sdk:`useEmailPasswordAuth <functions/useEmailPasswordAuth.html>`.
