.. _pymongo-security:

================
Secure Your Data
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: ldap, encryption, principal, tls, authorize, boto, ecs, aws
   :description: Learn how to use (+driver-short+} to secure your data.

.. toctree::
   :titlesonly:
   :maxdepth: 1

   Authentication </security/authentication>
   In-Use Encryption </security/in-use-encryption>

Overview
--------

MongoDB supports multiple mechanisms that you can use to authenticate your application.
This page contains code examples that show each of these mechanisms.

.. tip::
  
  To learn more about any of the authentication mechanisms on this page, see the
  :ref:`pymongo-auth` and :ref:`pymongo-enterprise-auth` pages.

To use an authentication example from this page, copy the code example into the
:ref:`sample application <pymongo-auth-sample>` or your own application.
Be sure to replace all placeholders in the code examples, such as ``<hostname>``, with
the relevant values for your MongoDB deployment.

.. _pymongo-auth-sample:

.. include:: /includes/usage-examples/sample-app-intro.rst

.. literalinclude:: /includes/usage-examples/connect-sample-app.py
      :language: python
      :copyable: true
      :linenos:
      :emphasize-lines: 4-6

SCRAM-SHA-256
-------------

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      username="<db_username>",
                                      password="<db_password>",
                                      authSource="<authentication database>",
                                      authMechanism="SCRAM-SHA-256")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<percent-encoded username>:<percent-encoded password>"
                "@<hostname>:<port>/?"
                "authSource=<authentication database>"
                "&authMechanism=SCRAM-SHA-256")
         client = pymongo.MongoClient(uri)

To learn more about SCRAM-SHA-256 authentication, see :ref:`pymongo-scram-sha-256` in
the Authentication guide.

SCRAM-SHA-1
-----------

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      username="<db_username>",
                                      password="<db_password>",
                                      authSource="<authentication database>",
                                      authMechanism="SCRAM-SHA-1")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<percent-encoded username>:<percent-encoded password>"
                "@<hostname>:<port>/?"
                "authSource=<authentication database>"
                "&authMechanism=SCRAM-SHA-1")
         client = pymongo.MongoClient(uri)

To learn more about SCRAM-SHA-1 authentication, see :ref:`pymongo-scram-sha-1` in
the Authentication guide.

MONGODB-X509
------------

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      tls=True,
                                      tlsCertificateKeyFile="/path/to/client.pem",
                                      authMechanism="MONGODB-X509")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<hostname>:<port>/?"
                "tls=true"
                "&tlsCertificateKeyFile=path/to/client.pem"
                "&authMechanism=MONGODB-X509")
         client = pymongo.MongoClient(uri)

To learn more about MONGODB-X509 authentication, see :ref:`pymongo-mongodb-x509` in
the Authentication guide.

MONGODB-AWS
-----------

``MongoClient`` Credentials
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      username="<AWS IAM access key ID>",
                                      password="<AWS IAM secret access key>",
                                      authMechanism="MONGODB-AWS")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<percent-encoded AWS IAM access key ID>:"
                "<percent-encoded AWS IAM secret access key>"
                "@<hostname>:<port>/?"
                "&authMechanism=MONGODB-AWS")
         client = pymongo.MongoClient(uri)

To learn more about authenticating with AWS ``MongoClient`` credentials, see
:ref:`pymongo-mongodb-aws-credentials` in the Authentication guide.

Environment Variables
~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      authMechanism="MONGODB-AWS")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<hostname>:<port>/?&authMechanism=MONGODB-AWS"
         client = pymongo.MongoClient(uri)

To learn more about authenticating with AWS environment variables, see
:ref:`pymongo-mongodb-aws-env-vars` in the Authentication guide.

Shared Credentials File
~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      authMechanism="MONGODB-AWS")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<hostname>:<port>/?&authMechanism=MONGODB-AWS"
         client = pymongo.MongoClient(uri)

To learn more about authenticating with a shared AWS credentials file, see
:ref:`pymongo-mongodb-aws-creds-file` in the Authentication guide.

AWS Config File
~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      authMechanism="MONGODB-AWS")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<hostname>:<port>/?&authMechanism=MONGODB-AWS"
         client = pymongo.MongoClient(uri)


To learn more about authenticating with an AWS config file, see
:ref:`pymongo-mongodb-aws-config-file` in the Authentication guide.

AssumeRole Request
~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://@<hostname>:<port>",
                                      username="<AWS IAM access key ID>",
                                      password="<AWS IAM secret access key>",
                                      authMechanismProperties="AWS_SESSION_TOKEN:<AWS session token>",
                                      authMechanism="MONGODB-AWS")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<percent-encoded AWS IAM access key ID>:"
                "<percent-encoded AWS IAM secret access key>"
                "@<hostname>:<port>/?"
                "authMechanismProperties=AWS_SESSION_TOKEN:<AWS session token>"
                "&authMechanism=MONGODB-AWS")
         client = pymongo.MongoClient(uri)

To learn more about authenticating with an ``AssumeRole`` request, see
:ref:`pymongo-mongodb-aws-assume-role` in the Authentication guide.

AssumeRoleWithWebIdentity
~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      authMechanism="MONGODB-AWS")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<hostname>:<port>/?&authMechanism=MONGODB-AWS"
         client = pymongo.MongoClient(uri)

To learn more about authenticating with an ``AssumeRoleWithWebIdentity`` request, see
:ref:`pymongo-mongodb-aws-oidc` in the Authentication guide.

ECS Container or EC2 Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      authMechanism="MONGODB-AWS")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<hostname>:<port>/?&authMechanism=MONGODB-AWS"
         client = pymongo.MongoClient(uri)

To learn more about authenticating from an ECS container, see
:ref:`pymongo-mongodb-aws-ec` in the Authentication guide.

Kerberos
--------

.. note:: MongoDB Enterprise Only

   Kerberos authentication is available only in MongoDB Enterprise.

Unix
~~~~

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      username="mongodbuser@EXAMPLE.COM",
                                      authMechanism="GSSAPI",
                                      authMechanismProperties="SERVICE_NAME:<authentication service name>")

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://mongodbuser%40EXAMPLE.COM@<hostname>:<port>/?"
                "&authMechanism=GSSAPI"
                "&authMechanismProperties=SERVICE_NAME:<authentication service name>")
         client = pymongo.MongoClient(uri)

To learn more about authenticating with Kerberos, see
:ref:`pymongo-kerberos` in the Enterprise Authentication guide.

Windows
~~~~~~~

.. tabs::

         .. tab:: MongoClient
            :tabid: mongoclient

            .. code-block:: python

               client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                            username="<db_username>",
                                            authMechanism="GSSAPI",
                                            password="<db_password>",
                                            authMechanismProperties="SERVICE_NAME:<authentication service name>,
                                                CANONICALIZE_HOST_NAME:true,
                                                SERVICE_REALM:<service realm>")

         .. tab:: Connection String
            :tabid: connectionstring

            .. code-block:: python

               uri = ("mongodb://<percent-encoded username>:<percent-encoded user password>"
                      "@<hostname>:<port>/?"
                      "&authMechanism=GSSAPI"
                      "&authMechanismProperties="
                        "SERVICE_NAME:<authentication service name>,"
                        "CANONICALIZE_HOST_NAME:true,"
                        "SERVICE_REALM:<service realm>")
               client = pymongo.MongoClient(uri)

To learn more about authenticating with Kerberos, see
:ref:`pymongo-kerberos` in the Enterprise Authentication guide.

PLAIN SASL
----------

.. note:: MongoDB Enterprise Only

   PLAIN SASL authentication is available only in MongoDB Enterprise.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      username="<db_username>",
                                      password="<db_password>",
                                      authMechanism="PLAIN",
                                      tls=True)

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<db_username>:<db_password>@<hostname>:<port>/?"
                "&authMechanism=PLAIN"
                "&tls=true")
         client = pymongo.MongoClient(uri)

To learn more about authenticating with PLAIN SASL, see
:ref:`pymongo-sasl` in the Enterprise Authentication guide.

MONGODB-OIDC
------------

.. note:: MongoDB Enterprise Only

   MONGODB-OIDC authentication is available only in MongoDB Enterprise.

Azure IMDS
~~~~~~~~~~

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. literalinclude:: /includes/authentication/azure-imds-mongoclient.py
            :language: python
            :copyable: true

   .. tab:: Connection String
      :tabid: connectionstring

      .. literalinclude:: /includes/authentication/azure-imds-connection-string.py
            :language: python
            :copyable: true

To learn more about authenticating with OIDC, see
:ref:`pymongo-mongodb-oidc-azure-imds` in the Authentication guide.

GCP IMDS
~~~~~~~~

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. literalinclude:: /includes/authentication/gcp-imds-mongoclient.py
            :language: python
            :copyable: true

   .. tab:: Connection String
      :tabid: connectionstring

      .. literalinclude:: /includes/authentication/gcp-imds-connection-string.py
            :language: python
            :copyable: true

To learn more about authenticating with OIDC, see
:ref:`pymongo-mongodb-oidc-gcp-imds` in the Authentication guide.

Other Azure Environments
~~~~~~~~~~~~~~~~~~~~~~~~

.. literalinclude:: /includes/authentication/azure-envs-mongoclient.py
      :language: python
      :copyable: true

To learn more about authenticating with OIDC, see
:ref:`pymongo-mongodb-oidc-azure-envs` in the Authentication guide.

GCP GKE
~~~~~~~

.. literalinclude:: /includes/authentication/gcp-gke-mongoclient.py
      :language: python
      :copyable: true

To learn more about authenticating with OIDC, see
:ref:`pymongo-mongodb-oidc-gcp-gke` in the Authentication guide.