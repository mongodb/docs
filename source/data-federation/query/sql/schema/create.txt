.. _sqlschema-create:

=============
Create Schema
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Create Schema Using the |service| UI
------------------------------------

Schema generation happens automatically when you create an {+asql+} quick start connection.

.. procedure::
   :style: normal

   .. include:: /includes/nav/steps-data-federation.rst

   .. step:: Navigate to Manage SQL Schemas page.

             From the :guilabel:`Federated Database Instances` section,
             click the :icon-fa5:`ellipsis-h` icon to the right of the schema,
             and then select :guilabel:`Manage SQL Schemas` from the dropdown.

   .. step:: Create a schema.

             On a collection that has an empty schema:

             a. Click the :icon-fa4:`pencil`.
             b. Click :guilabel:`Generate new schema from sample`, or provide your own JSON.
             c. Click :guilabel:`Save`.

.. _sqlgenerateschema-cmd:

Create Schema Using ``mongosh``
-------------------------------

The ``sqlGenerateSchema`` command generates an {+asql+} schema for the 
specified collections or views.

.. _sqlgenerateschema-syntax:

Syntax 
~~~~~~

.. code-block:: sh 

   db.runCommand({
	sqlGenerateSchema: 1, 
	sampleNamespaces: [<namespace>], 
	sampleSize: <int>, 
	setSchemas: true|false
   })

.. _sqlgenerateschema-params:

Parameters
~~~~~~~~~~

.. list-table:: 
   :header-rows: 1
   :widths: 10 10 70 10

   * - Parameter
     - Type
     - Description
     - Necessity

   * - ``sampleNamespaces``
     - array of strings
     - Specifies the comma-separated list of namespaces for which to generate 
       schemas. A :manual:`namespace </reference/limits/#namespaces>` 
       includes the database name, a dot (.) separator, and the collection or 
       view name (i.e. ``<database>.<collection>|<view>``). To generate schemas 
       for all the collections in a database, specify ``*`` instead of the 
       collection or view name (i.e. ``<database>.*``). If omitted, generates 
       schemas for all collections and views in the current database.

     - Optional

   * - ``sampleSize``
     - integer
     - Specifies the number of documents to use as a sample to create the schema. 
       If omitted, defaults to ``1000``.
     - Optional

   * - ``setSchemas``
     - boolean
     - Specifies whether or not to store the generated schema for the collection 
       or view. Value can be one of the following: 

       - ``true`` to store the schema. If a schema already exists 
         for the collection or view, overwrite the existing schema.
       - ``false`` to not store the schema. 
       
       If omitted, defaults to ``false``.

     - Optional

.. _sqlgenerateschema-output:

Output  
~~~~~~

The command returns the following if the command succeeds. 

.. code-block:: json 

   {
	 "ok" : 1,
	 "schemas" : [
	   {
		 "databaseName" : "<database-name>",
		 "namespaces" : [
		   {
			 "name" : "<collection-name>",
			 "schema" : {
			   "version" : NumberLong(1),
			   "jsonSchema" : {}
			 }
		   }
		 ]
	   },
	   ...
	 ]
   }

.. include:: /includes/data-federation/sql-cmd-output-schemas-fields.rst

If you set the schema for the collection or view using the 
``setSchemas`` option, you can verify that the command 
succeeded by running the ``sqlGetSchema`` command. The 
``sqlGetSchema`` command ``metadata.description`` should 
contain the following value: 

.. code-block:: json 
   :copyable: false 

   "set using sqlGenerateSchema with setSchemas = true"

.. _sqlgetschema-egs:

Examples 
~~~~~~~~

.. include:: /includes/data-federation/command-example-collection.rst

The examples below use the ``sqlGenerateSchema`` command to 
generate a schema for the above collection.

Basic Example 
~~~~~~~~~~~~~

The following command generates a schema for the collection 
named ``sampleDB.egData`` in the storage configuration. The 
command uses two randomly selected documents from the 
collection to create the schema because the ``sampleSize`` 
is ``2``. The command does not set the schema for the 
collection because the ``setSchemas`` option is not specified 
with the command and defaults to ``false``. 

.. code-block:: sh 

   db.runCommand({
	sqlGenerateSchema: 1, 
	sampleNamespaces: ["sampleDB.egData"], 
	sampleSize: 2
   })

The previous command returns the following output. To learn 
more about the fields in the output, see 
:ref:`sqlgenerateschema-output`.

.. code-block:: json 
   :copyable: false

   {
	 "ok" : 1,
	 "schemas" : [
	   {
		 "databaseName" : "sampleDB",
		 "namespaces" : [
		   {
			 "name" : "egData",
			 "schema" : {
			   "version" : NumberLong(1),
			   "jsonSchema" : {
				 "bsonType" : [
				   "object"
				 ],
				 "properties" : {
				   "a" : {
					 "bsonType" : [
					   "object"
					 ],
					 "properties" : {
					   "b" : {
						 "bsonType" : [
						   "object"
						 ],
						 "properties" : {
						   "c" : {
							 "bsonType" : [
							   "array"
							 ],
							 "items" : {
							   "bsonType" : [
								 "int"
							   ]
							 }
						   }
						 }
					   }
					 }
				   },
				   "s" : {
					 "bsonType" : [
					   "int"
					 ]
				   }
				 }
			   }
			 }
		   }
		 ]
	   }
	 ]
    }

Generate and Set Schema Example 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following command generates a schema for the collection 
named ``sampleDB.egData`` in the storage configuration. The command 
uses up to 1000 documents in the collection to create the schema 
because the ``sampleSize`` option is not specified with the command 
and defaults to ``1000``. The command sets the generated schema as 
the schema to use for the collection because the ``setSchemas`` 
option is set to ``true``. 

.. code-block:: sh 

   db.runCommand({
	sqlGenerateSchema: 1, 
	sampleNamespaces: ["sampleDB.egData"], 
	setSchemas: true
   })

The previous command returns the following output. To learn 
more about the fields in the output, see 
:ref:`sqlgenerateschema-output`.

.. code-block:: json 
   :copyable: false

   {
	 "ok" : 1,
	 "schemas" : [
	   {
		 "databaseName" : "sampleDB",
		 "namespaces" : [
		   {
			 "name" : "egData",
			 "schema" : {
			   "version" : NumberLong(1),
			   "jsonSchema" : {
				 "bsonType" : [
				   "object"
				 ],
			     "properties" : {
				   "a" : {
				     "bsonType" : [
					   "object"
				     ],
				     "properties" : {
					   "b" : {
					     "bsonType" : [
						   "object",
						   "array"
					     ],
					     "properties" : {
						   "c" : {
						     "bsonType" : [
							   "array",
							   "string",
							   "object",
							   "null"
						     ],
						     "properties" : {
							   "d" : {
							     "bsonType" : [
								   "int"
							     ]
							   }
						     },
						       "items" : {
							       "bsonType" : [
								       "int"
							       ]
						       }
					       }
					     },
					     "items" : {
						     "bsonType" : [
						       "int"
						       ]
					       }
				       }
				     }
			       },
			       "s" : {
				     "bsonType" : [
				       "int",
				       "object"
				     ]
			       }
			     }
		       }
	       }
	     ]
	   }
	 ]
   }    

.. _sqlgetschema-errors:

Errors 
~~~~~~

The command returns the following error if the command fails: 

.. code-block:: none 
   :copyable: false

   "failedNamespaces": [
     { 
       "namespace" : "<db.ns>", 
       "error" : "no documents found in sample namespace" 
     }
   ]

The above error is returned if the specified namespaces do not 
exist in the storage configuration or are empty. This error is 
also returned if the schema could not be set for a given  
namespace.
