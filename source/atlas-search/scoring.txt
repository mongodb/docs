.. _scoring-ref:

==================================
Score the Documents in the Results
==================================

.. default-domain:: mongodb

.. meta::
   :keywords: atlas search, documents score, score based on relevance, documents metadata, boost option, multiply base score, boost fields, boost example, constant option, replace with specified score, constant fields, constant example, embedded option, embedded documents, embedded fields, embedded example, function option, alter final document score, function expressions, function example, modify score examples, normalize score examples, get score details, score details examples
   :description: Modify, normalize, or return a breakdown of the score assigned to a returned document with the boost, constant, embedded, or function options.

Every document returned by an |fts| query is assigned a score based
on relevance, and the documents included in a result set are returned
in order from highest score to lowest. 

Many factors can influence a document's score, including:

- The position of the search term in the document,
- The frequency of occurrence of the search term in the document,
- The type of :ref:`operator <fts-operators>` the query uses,
- The type of :ref:`analyzer <analyzers-ref>` the query uses.

.. note:: 

   .. include:: /includes/fact-fts-array-scoring.rst

The score assigned to a returned document is part of the document's
metadata. You can include each returned document's score along with the
result set by using a :pipeline:`$project` stage in your aggregation
pipeline. In the :pipeline:`$project` stage, the ``score`` field takes
the :manual:`$meta </reference/operator/aggregation/meta/>` expression,
which requires the ``searchScore`` value. You can also specify the
``searchScoreDetails`` value for the ``scoreDetails`` field
:manual:`$meta </reference/operator/aggregation/meta/>` expression for a
detailed breakdown of the score.

After a :pipeline:`$project` stage, you don't need to include a
descending :pipeline:`$sort` because |fts| returns the documents from
highest score to lowest. However, if multiple documents in the results
have identical scores, the ordering of the documents in the results is
non-deterministic. Therefore, to ensure deterministic results, we
recommend that you include a :pipeline:`$sort` to sort the results by a
unique field such as MongoDB's unique ``_id`` field.

The following example query uses a :pipeline:`$project` stage to add a
field named ``score`` to the returned documents:

.. code-block:: javascript
   :linenos:

   db.movies.aggregate([
     {
       $search: {
         "text": {
           "query": "Helsinki",
           "path": "plot"
         }
       }
     },
     {
       $project: {
         plot: 1,
         title: 1,
         score: { $meta: "searchScore" }
       }
     }
   ])

More information about the Lucene scoring algorithm can be found in the
`Lucene documentation
<https://lucene.apache.org/core/3_5_0/scoring.html>`__.

.. toctree::
   :titlesonly:
   
   /atlas-search/score/modify-score
   /atlas-search/score/get-details 
   /atlas-search/score/normalize-score
