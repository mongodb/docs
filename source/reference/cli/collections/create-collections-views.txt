.. _dl-create-collection-views-cmd:

==========
``create``
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The ``create`` command creates a collection for existing 
:datalakeconf:`stores` or a :manual:`view </core/views/>` on a 
collection in the {+data-lake+} storage configuration. 

The wildcard ``"*"`` can be used with the ``create`` command in two ways:

- As the name of the collection to dynamically create collections that maps 
  to files and folders in the specified file path on the :datalakeconf:`stores` 
  {+data-lake-store+}.
- In the ``path`` parameter to create a collection that maps to multiple 
  files and folders in the specified file path on the :datalakeconf:`stores` 
  {+data-lake-store+}.

Click on the tab to learn more about creating a collection or a view.

.. tabs:: 

   .. tab:: Collection 
      :tabid: coll

      This tab contains the syntax and parameters for creating a collection.
      Choose the tab for your {+data-lake-store+} to learn more about the 
      syntax and parameters for that {+data-lake-store+}.

      .. tabs::
      
         .. tab:: S3  
            :tabid: s3 

            This tab contains the syntax and parameters for creating a 
            collection for |s3| {+data-lake-store+}.

         .. tab:: Atlas Cluster 
            :tabid: atlas

            This tab contains the syntax and parameters for creating a 
            collection for |service| {+data-lake-store+}.

         .. tab:: HTTP 
            :tabid: http

            This tab contains the syntax and parameters for creating a 
            collection for a |http| {+data-lake-store+}.

            .. include:: /includes/extracts/fact-http-beta-message.rst

   .. tab:: Views 
      :tabid: views 

      This tab contains the syntax and parameters for creating a view for 
      a collection.

.. _dl-collections-views-create-cmd-syntax:

Syntax 
------

.. tabs:: 
   :hidden:

   .. tab:: Collection 
      :tabid: coll

      .. tabs::
         :hidden:
      
         .. tab:: S3  
            :tabid: s3

            .. code-block:: sh 

               db.runCommand({ "create" : "<collection-name>|*", "dataSources" : [{ "storeName" : "<store-name>", "path" : "<path-to-files-or-folders>", "defaultFormat" :  "<file-extension>" }]})

         .. tab:: Atlas Cluster
            :tabid: atlas

            .. code-block:: sh 

               db.runCommand({ "create" : "<collection-name>|*", "dataSources" : [{ "storeName" : "<store-name>", "database" : "<atlas-database-name>", "collection" :  "<atlas-collection-name>" }]})

         .. tab:: HTTP 
            :tabid: http

            .. code-block:: sh 

               db.runCommand({ "create" : "<collection-name>", "dataSources" : [{ "storeName" : "<store-name>", "allowInsecure" : true|false, "urls" : [ "<url>" ], "defaultFormat" :  "<file-extension>" }]})

   .. tab:: Views 
      :tabid: views

      .. code-block:: sh

         db.runCommand({ "create" : "<view-name>", "viewOn" :" <collection-name>", "pipeline" : ["<stage1>","<stage2>",...] })

.. _dl-collections-views-create-cmd-params:

Parameters  
----------

.. tabs:: 
   :hidden:

   .. tab:: Collection
      :tabid: coll

      .. list-table::
         :header-rows: 1
         :widths: 10 10 70 10 

         * - Parameter 
           - Type 
           - Description 
           - Required?

         * - .. tabs:: 
                :hidden: 

                .. tab:: S3 Configuration 
                   :tabid: s3

                   ``<collection-name>|*``

                .. tab:: Atlas Configuration 
                   :tabid: atlas

                   ``<collection-name>|*``

                .. tab:: HTTP Configuration 
                   :tabid: http 

                   ``<collection-name>``
                
           - string 
           - .. tabs:: 
                :hidden: 

                .. tab:: S3 Configuration 
                   :tabid: s3

                   .. include:: /includes/extracts/cli-param-collection-name.rst

                   You can generate collection names dynamically from file 
                   paths by  specifying ``*`` for the collection name and the 
                   ``collectionName()`` function in the 
                   ``dataSources.collection`` field. By default, {+adl+} 
                   creates up to ``100`` wildcard collections. You can 
                   customize the maximum number of wildcard collections that 
                   {+adl+} automatically generates using the 
                   :datalakeconf:`databases.[n].maxWildcardCollections` 
                   parameter. Note that each wildcard collection can contain 
                   only one ``dataSource``.
             
                .. tab:: Atlas Configuration 
                   :tabid: atlas

                   .. include:: /includes/extracts/cli-param-collection-name.rst


                   You can generate collection names dynamically by specifying 
                   ``*`` for the collection name and omitting the 
                   ``dataSources.collection`` field. 

                .. tab:: HTTP Configuration 
                   :tabid: http

                   The name of the collection to which {+data-lake-short+} maps 
                   the data contained in the {+data-lake-store+}. You can't 
                   generate collection names dynamically by specifying 
                   ``*``.
                   
           - yes

         * - ``dataSources``
           - object 
           - Array of objects where each object represents a 
             {+data-lake-store+} in the :datalakeconf:`stores` array to map 
             with the collection.
           - yes

         * - ``dataSources.storeName``
           - string
           - The name of a {+data-lake-store+} to map to the collection. 
             The value must match the :datalakeconf:`~stores.[n].name` in the 
             :datalakeconf:`stores` array.
           - yes

      .. tabs:: 
         :hidden: 

         .. tab:: S3 Configuration 
            :tabid: s3

            .. list-table::

               * - ``dataSources.path``
                 - string
                 - The path to the files and folders. Specify ``/`` to capture 
                   all files and folders from the ``prefix`` path. See 
                   :ref:`datalake-path-syntax` for more information. 
                 - yes

               * - ``dataSources.defaultFormat`` 
                 - string 
                 - .. include:: /includes/extracts/cli-param-default-format.rst
                 - no

         .. tab:: Atlas Configuration 
            :tabid: atlas

            .. list-table::

               * - ``dataSources.database`` 
                 - string 
                 - The name of the database that contains the collection in the 
                   |service| cluster. 
                 - yes 

               * - ``dataSources.collection``
                 - string
                 - The name of the collection in the |service| database. When 
                   creating a wildcard collection, this must not be specified.
                 - yes

         .. tab:: HTTP Configuration 
            :tabid: http

            .. list-table::

               * - ``dataSources.allowInsecure``
                 - boolean
                 - .. include:: /includes/extracts/cli-param-allow-insecure.rst
                 - no

               * - ``dataSources.urls``
                 - array of strings or empty array
                 - The |url|\s of the publicly accessible data files. You 
                   can't specify |url|\s that require authentication. {+adl+} 
                   creates a partition for each |url|. If empty or omitted, 
                   {+dl+} uses the |url|\s from the store specified in the 
                   ``dataSources.storeName`` parameter.
                 - yes

               * - ``dataSources.defaultFormat`` 
                 - string 
                 - .. include:: /includes/extracts/cli-param-default-format.rst

                   If included, the specified format only applies to the 
                   |url|\s in the ``dataSource``.
                 - no

   .. tab:: Views
      :tabid: views 

      .. list-table::
         :header-rows: 1
         :widths: 20 10 60 10 

         * - Parameter 
           - Type 
           - Description 
           - Required?

         * - ``<view-name>``
           - string
           - The name of the :manual:`view </core/views/>`. A view name 
             **must** be unique. It cannot be the same as a collection name or 
             any other view name in the same database.
           - yes

         * - ``viewOn``
           - string 
           - The name of the source collection on which to create the view.
           - yes

         * - ``pipeline``
           - array of :manual:`stages </core/aggregation-pipeline/#id1>`
           - The array of :manual:`aggregation pipeline stages 
             </core/aggregation-pipeline/#id1>` to use to create the view.

             The view definition pipeline cannot include the :manual:`$out 
             </reference/operator/aggregation/out/#pipe._S_out>` or the 
             :manual:`$merge </reference/operator/aggregation/merge/#pipe._S_merge>` 
             stage, even inside nested pipeline stages like :manual:`$lookup 
             </reference/operator/aggregation/lookup/#pipe._S_lookup>` or 
             :manual:`$facet </reference/operator/aggregation/facet/#pipe._S_facet>`.
           - yes

.. _dl-collections-views-create-cmd-output:

Output 
------

The command returns the following output if it succeeds. You can verify 
the results by running the commands in 
:ref:`dl-collections-views-create-cmd-verify`. If it fails, see 
:ref:`dl-collections-views-create-cmd-errors` below for recommended 
solutions.

.. code-block:: shell 
   :copyable: false

   { ok: 1 }

.. _dl-collections-views-create-cmd-egs:

Examples 
--------

.. tabs:: 
   :hidden:

   .. tab:: Create Collections Examples
      :tabid: coll

      .. tabs:: 
         :hidden:

         .. tab:: S3 Example 
            :tabid: s3

            The following examples use the sample dataset, 
            `airbnb <https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json>`__, 
            on |aws| |s3| store with the following settings: 

            .. list-table:: 
               :stub-columns: 1
               :widths: 20 80

               * - **Store Name** 
                 - ``egS3Store``

               * - **Region**
                 - ``us-east-2``

               * - **Bucket**
                 - ``test-data-lake``

               * - **Prefix**
                 - ``json``

               * - **Delimiter**
                 - ``/``

               * - **Sample Dataset**
                 - ``airbnb``

         .. tab:: Atlas Example 
            :tabid: atlas 

            The following examples use the ``sample_airbnb.listingsAndReviews`` 
            collection from the :atlas:`sample dataset </sample-data/sample-airbnb/>` 
            on the |service| cluster with the following settings: 

            .. list-table:: 
               :stub-columns: 1
               :widths: 20 80

               * - **Store Name** 
                 - ``egAtlasStore``

               * - **Sample Dataset**
                 - ``sample_airbnb.listingsAndReviews``

            Review :atlas:`Load Sample Data into Your Atlas Cluster </sample-data/>` 
            to load the sample dataset in your |service| cluster.

         .. tab:: HTTP Example 
            :tabid: http 

            The following examples use the following |url|\s:

            - ``https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json`` 
            - ``https://atlas-data-lake.s3.amazonaws.com/json/sample_weatherdata/data.json`` 

      .. _dl-create-collection-cmd-basic-eg:

      **Basic Example** 

      The following command creates a collection named ``airbnb`` in the 
      ``sampleDB`` database in the storage configuration. 

      .. tabs:: 
         :hidden:

         .. tab:: S3 Example 
            :tabid: s3
      
            The ``airbnb`` collection maps to the ``airbnb`` sample dataset 
            in the ``json`` folder in the |s3| store named ``egS3Store``.

            .. code-block:: json 

               use sampleDB
               db.runCommand({ "create" : "airbnb", "dataSources" : [{ "storeName" : "egS3Store", "path" : "/json/airbnb", "defaultFormat" : ".json" }]})

            The previous command returns the following output:

            .. code-block:: json 
               :copyable: false 

               { "ok" : 1 }

            The following commands show that the collection was successfully 
            created: 

            .. code-block:: json
               :copyable: false 

               > show collections
               airbnb
               > db.runCommand({"storageGetConfig" : 1 })
               {
	               "ok" : 1,
	               "storage" : {
		               "stores" : [{
				             "name" : "egS3Store",
				             "provider" : "s3",
				             "region" : "us-east-2",
				             "bucket" : "test-data-lake",
				             "delimiter" : "/",
				             "prefix" : ""
		               }],
		               "databases" : [{
			               "name" : "sampleDB",
			               "collections" : [{
				               "name" : "airbnb",
				               "dataSources" : [{
					               "storeName" : "egS3Store",
					               "path" : "/json/airbnb",
					               "defaultFormat" : ".json"
				               }]
			               }]
		               }]
	               }
               }

         .. tab:: Atlas Example 
            :tabid: atlas
      
            The ``airbnb`` collection maps to the ``listingsAndReviews`` sample 
            collection in the ``sample_airbnb`` database on the |service| cluser.

            .. code-block:: json 

               use sampleDB
               db.runCommand({ "create" : "airbnb", "dataSources" : [{ "storeName" : "egAtlasStore", "database" : "sample_airbnb", "collection" : "listingsAndReviews" }]})

            The previous command returns the following output:

            .. code-block:: json 
               :copyable: false 

               { "ok" : 1 }

            The following commands show that the collection was successfully 
            created: 

            .. code-block:: json
               :copyable: false 

               > show collections
               airbnb
               > db.runCommand({"storageGetConfig":1})
               {
	               "ok" : 1,
	               "storage" : {
		               "stores" : [{
				             "name" : "egAtlasStore",
				             "provider" : "atlas",
				             "clusterName" : "myTestCluster",
				             "projectId" : "<project-id>"
			             }],
		               "databases" : [{
			               "name" : "sampleDB",
			               "collections" : [{
				               "name" : "airbnb",
				               "dataSources" : [{
					               "storeName" : "egAtlasStore",
					               "database" : "sample_airbnb",
					               "collection" : "listingsAndReview"
				               }]
			               }]
		               }]
	               }
               }

         .. tab:: HTTP Example 
            :tabid: http
      
            The ``airbnb`` collection includes a partition for 
            each |url| in the collection. The ``allowInsecure`` flag is 
            not set and defaults to ``false``.

            .. code-block:: json 

               use sampleDB
               db.runCommand({ "create" : "airbnb", "dataSources" : [{ "storeName" : "http-store", "urls": ["https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json","https://atlas-data-lake.s3.amazonaws.com/json/sample_weatherdata/data.json"], "defaultFormat" : ".json" }]})

            The previous command returns the following output:

            .. code-block:: json 
               :copyable: false 

               { "ok" : 1 }

            The following commands show that the collection was successfully 
            created: 

            .. code-block:: json
               :copyable: false 

               > show collections
               airbnb
               > db.runCommand({"storageGetConfig":1})
               {
	              "ok" : 1,
	              "storage" : {
		             "stores" : [
			            {
				           "name" : "http-store",
				           "provider" : "http",
				           "urls" : [
					          "https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json",
					          "https://atlas-data-lake.s3.amazonaws.com/json/sample_weatherdata/data.json"
				           ],
				           "defaultFormat" : ".json"
			            }
		             ],
		             "databases" : [
			            {
				           "name" : "sampleDb",
				           "collections" : [
					          {
						         "name" : "airbnb",
						         "dataSources" : [
							        {
								       "storeName" : "http-store",
								       "defaultFormat" : ".json",
								       "urls" : [
									      "https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json",
									      "https://atlas-data-lake.s3.amazonaws.com/json/sample_weatherdata/data.json"
								       ]
							        }
						         ]
					          }
				           ]
			            }
		             ]
	              }
               }

      .. _dl-create-collection-cmd-multi-eg:

      **Multiple Data Sources Example** 

      The following command creates a collection named ``egCollection`` in the 
      ``sampleDB`` database in the storage configuration. The ``egCollection`` 
      collection maps to the following sample datasets: 

      - ``airbnb`` dataset in the ``json`` folder in the |s3| store 
        named ``egS3Store``
      - ``airbnb`` dataset in the ``sample_airbnb.listingsAndReviews`` 
        collection on the |service| cluster named ``myTestCluster``
      - ``airbnb`` dataset in the |url| ``https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json``

      .. code-block:: json 

         use sampleDB
         db.runCommand({ "create" : "egCollection", "dataSources" : [{ "storeName" : "egS3Store", "path" : "/json/airbnb" },{ "storeName" : "egAtlasStore", "database": "sample_airbnb", "collection": "listingsAndReviews" },{"storeName" : "egHttpStore", "urls": ["https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json"]}]})

      The previous command returns the following output:

      .. code-block:: json 
         :copyable: false 

         { "ok" : 1 }

      The following commands show that the collection was successfully 
      created: 

      .. code-block:: json
         :copyable: false 

         > show collections
         egCollection
         > db.runCommand({"storageGetConfig":1})
         {
	         "ok" : 1,
	         "storage" : {
		         "stores" : [{
				       "name" : "egS3Store",
				       "provider" : "s3",
				       "region" : "us-east-2",
				       "bucket" : "test-data-lake",
				       "delimiter" : "/",
				       "prefix" : ""
			        },
			        {
				       "name" : "egAtlasStore",
				       "provider" : "atlas",
				       "clusterName" : "myTestCluster",
				       "projectId" : "<project-id>"
			        },
			        {
				       "name" : "egHttpStore",
				       "provider" : "http",
				       "urls" : ["https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json"]                   
			        }
               ],
		         "databases" : [{
			         "name" : "sampleDB",
			         "collections" : [{
				         "name" : "egCollection",
				         "dataSources" : [
					         {
					           "storeName" : "egS3Store",
					           "path" : "json/airbnb"
					         },
					         {
					           "storeName" : "egAtlasStore",
					           "database" : "sample_airbnb",
					           "collection" : "listingsAndReviews"
					         },
					         {
					           "storeName" : "egHttpStore",
					           "urls" : ["https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json"]
					         }
				         ]
			         }]
		         }]
	         }
         }

      .. _dl-create-collection-cmd-wildcard-eg:

      .. tabs:: 
         :hidden:

         .. tab:: S3 Example 
            :tabid: s3

            **Wildcard Usage Examples** 
            
            This example shows how the wildcard ``"*"`` can be specified with the ``create`` command.
            
            *Collection Name Example*
            
            The following example uses the ``create`` command to dynamically 
            create collections.

            The following example uses the ``create`` command to dynamically 
            create collections for the files in the path ``/json/`` in the 
            ``egS3Store`` {+data-lake-store+}. It uses the ``collectionName()`` 
            function to name the collections after the filenames in the specified 
            path.

            .. code-block:: json 
         
               use sampleDB 
               db.runCommand({ "create" : "*", "dataSources" : [{ "storeName" : "egS3Store", "path": "/json/{collectionName()}"}]})

            The previous command returns the following output:

            .. code-block:: json 
               :copyable: false 

               { "ok" : 1 }
      
            The following commands show that the collection was successfully 
            created:

            .. code-block:: json 
               :copyable: false 

                > show collections
                airbnb
                > db.runCommand({"storageGetConfig" : 1 })
                {
                  "ok" : 1,
                  "storage" : {
                    "stores" : [{
                      "name" : "egS3Store",
                      "provider" : "s3",
                      "region" : "us-east-2",
                      "bucket" : "test-data-lake",
                      "delimiter" : "/",
                      "prefix" : ""
                    }],
                    "databases" : [{
                      "name" : "sampleDB",
                      "collections" : [{
                        "name" : "*",
                        "dataSources" : [{
                          "storeName" : "egS3Store",
                          "path" : "/json/{collectionName()}"
                        }]
                      }]
                    }]
                  }
                }

            *Path Glob Example*

            The following example uses the ``create`` command to create a 
            collection named ``egCollection`` that maps to a 
            {+data-lake-short+} store named ``egS3Store``. The ``egS3Store`` 
            contains the sample dataset, `airbnb <https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json>`__, 
            in a folder named ``json``. 

            .. code-block:: json 
      
               use sampleDB
               db.runCommand({ "create" : "egCollection", "dataSources" : [{ "storeName" : "egS3Store", "path": "/json/*"}]}})

            The previous command returns the following output:

            .. code-block:: json 
               :copyable: false 

               { "ok" : 1 }

            The following commands show that the collection was successfully 
            created: 

            .. code-block:: json 
               :copyable: false 

               > show collections
               egCollection
               > db.runCommand({"storageGetConfig" : 1 })
               {
	               "ok" : 1,
	               "storage" : {
		               "stores" : [{
		                 "name" : "egS3Store",
		                 "provider" : "s3",
		                 "region" : "us-east-2",
		                 "bucket" : "test-data-lake",
		                 "delimiter" : "/",
		                 "prefix" : ""
		               }],
		               "databases" : [{
		                 "name" : "sample",
		                 "collections" : [{
			                 "name" : "egCollection",
			                 "dataSources" : [{
				                 "storeName" : "egS3Store",
				                 "path" : "/json/*"
				               }]
			               }]
		               }]
	               }
               }
         
         .. tab:: Atlas Example 
            :tabid: atlas

            **Wildcard Usage Example** 
            
            The following example uses the ``create`` command to dynamically 
            create collections for the documents in the ``sample_airbnb`` 
            database on the |service| cluster name ``myTestCluster``. 

            .. code-block:: json 
    
               use sampleDB 
               db.runCommand({ "create" : "*", "dataSources" : [{ "storeName" : "egAtlasStore", "database": "sample_airbnb"}]})

            The previous command returns the following output:

            .. code-block:: json 
               :copyable: false 

                { "ok" : 1 }
            
            The following command shows that the collection was successfully 
            created:

            .. code-block:: json 
              :copyable: false 

              > db.runCommand({storageGetConfig:1})
              {
                "ok" : 1,
                "storage" : {
                  "stores" : [{
                    "name" : "egAtlasStore",
                    "provider" : "atlas",
                    "clusterName" : "myTestCluster",
                    "projectId" : "<project-id>"
                  }],
                  "databases" : [{
                    "name" : "sampleDB",
                    "collections" : [{
                      "name" : "*",
                      "dataSources" : [{
                        "storeName" : "egAtlasStore",
                        "database" : "sample_airbnb"
                       }]
                    }]
                  }]
                }
              }
              > show collections 
              listingsAndReviews

         .. tab:: HTTP Example 
            :tabid: http

   .. tab:: Create Views Example
      :tabid: views

      The following command creates a view named ``listings`` on the 
      `airbnb <https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json>`__ 
      collection in the ``sample`` database with the ``name`` and 
      ``property_type`` fields:

      .. code-block:: sh 

         use sampleDB
         db.runCommand({ "create" : "listings", "viewOn" : "airbnb", "pipeline" : [{$project: {"property_type":1, "name": 1}}] })

      This command returns the following output: 
      
      .. code-block:: json 
         :copyable: false 

         { "ok" : 1 }

      The ``listCollections`` and ``storageGetConfig`` commands return the 
      following output: 

      .. tabs:: 

         .. tab:: listCollections
            :tabid: listCollections

            .. code-block:: json 
               :copyable: false 

               > db.runCommand({"listCollections":1})
               {
	               "ok" : 1,
	               "cursor" : {
		               "firstBatch" : [
			               {
				               "name" : "airbnb",
				               "type" : "collection",
				               "info" : {
					               "readOnly" : true
				               }
			               },
			               {
				               "name" : "listings",
				               "type" : "view",
				               "info" : {
					               "readOnly" : true
				               }
			               }
		               ],
		               "id" : NumberLong(0),
		               "ns" : "egS3Store.$cmd.listCollections"
	               }
               }

         .. tab:: storageGetConfig
            :tabid: storageGetConfig

            .. code-block:: json 
               :copyable: false 

               > db.runCommand({"storageGetConfig":1})
               {
	               "ok" : 1,
	               "storage" : {
		               "stores" : [
			               {
				               "name" : "egS3Store",
				               "provider" : "s3",
				               "region" : "us-east-2",
				               "bucket" : "test-data-lake",
				               "delimiter" : "/"
			               }
		               ],
		               "databases" : [
			               {
				               "name" : "sample",
				               "collections" : [
					               {
						               "name" : "airbnb",
						               "dataSources" : [
							               {
								               "storeName" : "egS3Store",
								               "path" : "json/airbnb/*"
							               }
						               ]
					               },
					               {
						               "name" : "*",
						               "dataSources" : [
							               {
								               "storeName" : "egS3Store",
								               "path" : "json/{collectionName()}"
							               }
						               ]
					               }
				               ],
				               "views" : [
					               {
						               "name" : "listings",
						               "source" : "airbnb",
						               "pipeline" : "[{\"$project\":{\"property_type\":{\"$numberInt\":\"1\"},\"name\":{\"$numberInt\":\"1\"}}}]"
					               }
				               ]
			               },
		               ]
	               }
               }

.. _dl-collections-views-create-cmd-verify:

Verify Collection 
-----------------

You can verify that the command successfully created the 
collection or view by running one of the following commands: 

.. code-block:: shell

   show collections 
   db.runCommand({ "storageGetConfig" : 1 })
   db.runCommand({ "listCollections" : 1 })

.. _dl-collections-views-create-cmd-errors:

Troubleshoot Errors 
-------------------

.. tabs:: 
   :hidden:

   .. tab:: Collection 
      :tabid: coll

      If the command fails, it returns one of the following errors:

      **Store Name Does Not Exist**

      .. code-block:: json 
         :copyable: false 

         {
	         "ok" : 0,
	         "errmsg" : "store name does not exist",
	         "code" : 9,
	         "codeName" : "FailedToParse"
         }

      **Solution:** Ensure that the specified ``storeName`` matches the name of 
      a store in the :datalakeconf:`stores` array. You can run the ``listStores`` 
      command to retrieve the list of stores in your {+data-lake-short+} storage 
      configuration.

      **Collection Name Already Exists**

      .. code-block:: json 
         :copyable: false 

         {
	         "ok" : 0,
	         "errmsg" : "collection name already exists in the database",
	         "code" : 9,
	         "codeName" : "FailedToParse"
         }

      **Solution:** Ensure that the collection ``name`` is unique. You can run 
      the ``show collections`` command to retrieve the list of existing collections.

   .. tab:: Views 
      :tabid: views 

      If the command fails, it returns the following error:

      **View Name Exists**

      .. code-block:: json 
         :copyable: false 

         {
	         "ok" : 0,
	         "errmsg" : "a view '<database>.<view>' already exists, correlationID = <1603aaffdbc91ba93de6364a>",
	         "code" : 48,
	         "codeName" : "NamespaceExists"
         }

      **Solution:** Ensure that the view name is unique. You can run the 
      ``listCollections`` command to retrieve the list of existing views on 
      a collection.
