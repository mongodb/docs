# table structure. all content symbolic.
section: layout
header: [ meta.header1, meta.header2 ]
rows: 
  - 1: [ content.sql1, content.mongo1 ]
  - 2: [ content.sql2, content.mongo2 ]
  - 3: [ content.sql3, content.mongo3 ]
  - 4: [ content.sql4, content.mongo4 ]
  - 5: [ content.sql5, content.mongo5 ]
  - 6: [ content.sql6, content.mongo6 ]
  - 7: [ content.sql7, content.mongo7 ]
  - 8: [ content.sql8, content.mongo8 ]
  - 9: [ content.sql9, content.mongo9 ]
---
# table metadata, as meta.<key>
section: meta
header1: "SQL Terms, Functions, and Concepts"
header2: "MongoDB Aggregation Operators"
---
# table content, as content.<key>
section: content
sql1: WHERE
mongo1: :agg:pipeline:`$match`         
sql2: GROUP BY
mongo2: :agg:pipeline:`$group`
sql3: HAVING
mongo3: :agg:pipeline:`$match` 
sql4: SELECT
mongo4: :agg:pipeline:`$project` 
sql5: ORDER BY
mongo5: :agg:pipeline:`$sort`
sql6: LIMIT
mongo6: :agg:pipeline:`$limit`
sql7: SUM()
mongo7: :agg:pipeline:`$sum`
sql8: COUNT()    
mongo8: :agg:pipeline:`$sum`
sql9: join
mongo9: |   
        No direct corresponding operator;
        *however*, the :agg:pipeline:`$unwind` operator
        allows for somewhat similar functionality,
        but with fields embedded within the document.
...