===================
$sort (aggregation)
===================

.. default-domain:: agg

.. pipeline:: $sort

   The :pipeline:`$sort` :term:`pipeline` operator sorts all input
   documents and returns them to the pipeline in sorted
   order. Consider the following prototype form:

   .. code-block:: javascript

      db.<collection-name>.aggregate(
          { $sort : { <sort-key> } }
      );

   This sorts the documents in the collection named
   ``<collection-name>``, according to the key and specification in
   the ``{ <sort-key> }`` document.

   Specify the sort in a document with a field or fields that you want
   to sort by and a value of ``1`` or ``-1`` to specify an ascending
   or descending sort respectively, as in the following example:

   .. code-block:: javascript

      db.users.aggregate(
          { $sort : { age : -1, posts: 1 } }
      );

   This operation sorts the documents in the ``users`` collection,
   in descending order according by the ``age`` field and then in
   ascending order according to the value in the ``posts`` field.

   .. include:: /includes/fact-sort-order.rst

   .. note::

      The :pipeline:`$sort` cannot begin sorting documents until
      previous operators in the pipeline have returned all output.

      .. todo:: mention the importance of order preserving objects

      - :agg:pipeline:`$skip` 

   :pipeline:`$sort` operator can take advantage of an index when
   placed at the **beginning** of the pipeline or placed **before**
   the following aggregation operators:

   - :agg:pipeline:`$project`
   - :agg:pipeline:`$unwind`
   - :agg:pipeline:`$group`.

   .. warning:: Unless the :pipeline:`$sort` operator can use an index,
      in the current release, the sort must fit within memory. This
      may cause problems when sorting large numbers of documents.

      .. todo:: if a sort precedes the first $group in a sharded system,
         all documents must go to the mongos for sorting.
