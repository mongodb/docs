# table structure. all content symbolic.
section: layout
header: [ meta.header1, meta.header2, meta.header3, meta.header4 ]
rows:
  - 1: [ content.query1, content.shape1, content.shapetype1, content.index1 ]
  - 2: [ content.query2, content.shape2, content.shapetype2, content.index2 ]
  - 3: [ content.query3, content.shape3, content.shapetype3, content.index3 ]
  - 4: [ content.query4, content.shape4, content.shapetype4, content.index4 ]
  - 5: [ content.query5, content.shape5, content.shapetype5, content.index5 ]
  - 6: [ content.query6, content.shape6, content.shapetype6, content.index6 ]
  - 7: [ content.query7, content.shape7, content.shapetype7, content.index7 ]
  - 8: [ content.query8, content.shape8, content.shapetype8, content.index8 ]
  - 9: [ content.query9, content.shape9, content.shapetype9, content.index9 ]
  - 10: [ content.query10, content.shape10, content.shapetype10, content.index10 ]
---
# table metadata, as meta.<key>
section: meta
header1: "Preferred Geospatial Query Document"
header2: "Shape for Query Condition"
header3: "Shape / Units for Calculation"
header4: "Supported by this Index"
---
# table content, as content.<key>
section: content
query1: |
        **Returns points, lines and polygons**
shape1: |
         
shapetype1: |
             
index1: |
         
query2: |
        .. code-block:: javascript

           { $geoWithin : {
             $geometry : <GeoJSON>
           } }
shape2: |
        point, line or polygon
shapetype2: |
            sphere / meters
index2: |
        2dsphere
query3: |
        .. code-block:: javascript

           { $geoIntersects : {
             $geometry : <GeoJSON>
           } }
shape3: |
        point, line or polygon
shapetype3: |
            sphere / meters
index3: |
        2dsphere
query4: |
        .. code-block:: javascript

           { $near : {
             $geometry : <GeoJSON Point>,
             $maxDistance : d
           } }
shape4: |
        circular region
shapetype4: |
            sphere / meters
index4: |
        2dsphere
        
        The index is required.
query5: |
        **Returns points only**
shape5: |
         
shapetype5: |
             
index5: |
         
query6: |
        .. code-block:: javascript

           { $geoWithin : {
             $box : [[x1, y1], [x2, y2]]
           } }
shape6: |
        rectangle
shapetype6: |
            flat / flat units
index6: |
        2d
query7: |
        .. code-block:: javascript

           { $geoWithin : {
             $polygon : [[x1, y1],
                         [x1, y2],
                         [x2, y2],
                         [x2, y1]]
           } }
shape7: |
        polygon
shapetype7: |
            flat / flat units
index7: |
        2d
query8: |
        .. code-block:: javascript

           { $geoWithin : {
             $center : [x1, y1],
             $maxDistance : d
           } }
shape8: |
        circular region
shapetype8: |
            flat / flat units
index8: |
        2d
query9: |
        .. code-block:: javascript

           { $geoWithin : {
             $centerSphere :
               [[x, y], radius]
             $maxDistance : d
           } }
shape9: |
        circular region
shapetype9: |
            sphere / radians
index9: |
        2d
        
        2dsphere
query10: |
        .. code-block:: javascript

           { $near : [x1, y1],
             $maxDistance : d
           }
shape10: |
        circular region
shapetype10: |
            flat / flat units
index10: |
         2d
         
         The index is required.
...
