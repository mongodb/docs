.. _ak8so-ear:

===========================================
Encrypt Data Using a Key Management Service
===========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/serverless-preview-dont-use.rst

.. include:: /includes/fact-encryption-at-rest.rst

You can use one or more of the following customer |kms|
providers for encryption at rest in |service|:

- :aws:`AWS KMS </kms/>`
- :azure:`Azure Key Vault </services/key-vault/#product-overview>`
- :gcp:`{+gcp+} KMS </security-key-management/>`

.. note::

   The key management provider doesn't need to match the {+cluster+}
   cloud service provider.

To learn more about using your |kms| with |service|, see:

- :ref:`security-kms-encryption`.
- :ref:`Manage Customer Keys with AWS KMS <security-aws-kms>`.
- :ref:`Manage Customer Keys with Azure Key Vault
  <security-azure-kms>`.
- :ref:`Manage Customer Keys with Google Cloud KMS
  <security-gcp-kms>`.

To manage your |kms| encryption with |ak8so|, you can
specify and update the :setting:`spec.encryptionAtRest` parameter for
the :ref:`atlasproject-custom-resource`. Each time you change the
``spec`` field in any of the supported custom resources, |ak8so|
:ref:`creates or updates <ak8so-create-update-process>` the 
corresponding |service| configuration.

Prerequisites
-------------

.. tabs::

   .. tab:: AWS KMS
      :tabid: aws-kms

      To configure encryption at rest using |aws| |kms| in |ak8so|, you require:

      - A running |k8s| cluster with |ak8so| :ref:`deployed
        <ak8so-quick-start-ref>`.

      - The :authrole:`Project Owner` or :authrole:`Organization Owner`
        role in |service|.

      - Valid key management credentials and an encryption key for 
        :aws:`AWS KMS </kms/>`. To learn more, see 
        :ref:`Prerequisites to Enable Customer-Managed Keys with AWS
        <aws-ksm-prereqs>`.

      - An assumed |iam| role for your |service| account. To set up an
        assumed |iam| role with the |ak8so|, see
        :ref:`ak8so-unified-access`. To learn more about role-based
        access for an |aws| encryption key, see 
        :ref:`Manage Customer Keys with AWS KMS <security-aws-kms>`.

      .. include:: /includes/fact-switching-access-to-encryption-keys.rst

   .. tab:: Azure Key Vault
      :tabid: azure-key-vault

      To configure encryption at rest using |azure| Key Vault in 
      |ak8so|, you require:

      - A running |k8s| cluster with |ak8so| :ref:`deployed
        <ak8so-quick-start-ref>`.

      - The :authrole:`Project Owner` or :authrole:`Organization Owner`
        role in |service|.

      - Valid key management credentials and an encryption key for 
        :azure:`Azure Key Vault </services/key-vault/#product-overview>`. To learn more, see 
        :ref:`Prerequisites to Enable Customer-Managed Keys with Azure
        <azure-kms-prereqs>`.

   .. tab:: {+gcp+} KMS
      :tabid: gcp-kms

      To configure encryption at rest using a {+gcp+} |kms| in |ak8so|, you require:

      - A running |k8s| cluster with |ak8so| :ref:`deployed
        <ak8so-quick-start-ref>`.

      - The :authrole:`Project Owner` or :authrole:`Organization Owner`
        role in |service|.

      - Valid key management credentials and an encryption key for 
        :gcp:`{+gcp+} KMS </security-key-management/>`. To learn more, see :ref:`Prerequisites to Enable Customer-Managed Keys with {+gcp+}
        <gcp-kms-prereqs>`.

Procedure
---------

.. _ak8so-configure-ear:

Encypt your |service| data using a customer-managed key with the
following procedure:

.. tabs::
   :hidden:

   .. tab:: AWS KMS
      :tabid: aws-kms

      .. procedure::
         :style: normal

         .. step:: Specify the ``spec.encryptionAtRest.awsKms`` parameter.

            .. include:: /includes/steps-ear-ak8so-aws.rst

         .. step:: Check for successful enablement of encryption at rest on your project.

            Run the following command to check whether |ak8so| detects
            the |aws| |kms| configuration for your project.

            .. io-code-block::

               .. input::
                  :language: sh

                  kubectl get atlasprojects my-project -o=jsonpath='{.status.conditions[?(@.type=="EncryptionAtRestReadyType")].status}

               .. output::
                  :language: json
                  :visible: true

                  true

         .. step:: Enable encryption at rest using customer-managed keys for your {+cluster+}.

            After you enable encryption at rest using customer-managed
            keys for your project, you must enable it at the 
            {+cluster+} level to encrypt data.

            Run the following command to add the 
            :setting:`spec.DeploymentSpec.encryptionAtRestProvider` to your
            :ref:`atlasdeployment-custom-resource`, which enables encryption at rest using your |aws| key for this 
            {+cluster+}:

            .. literalinclude:: /includes/enable-ear-cluster-aws.sh
               :language: sh
               :emphasize-lines: 9

   .. tab:: Azure Key Vault
      :tabid: azure-key-vault

      .. procedure::
         :style: normal

         .. step:: Specify the ``spec.encryptionAtRest.azureKeyVault`` parameter.

            .. include:: /includes/steps-ear-ak8so-azure.rst

         .. step:: Check for successful enablement of encryption at rest on your project.

            Run the following command to check whether |ak8so| detects
            the |azure| Key Vault configuration for your project.

            .. io-code-block::

               .. input::
                  :language: sh

                  kubectl get atlasprojects my-project -o=jsonpath='{.status.conditions[?(@.type=="EncryptionAtRestReadyType")].status}

               .. output::
                  :language: json
                  :visible: true

                  true

         .. step:: Enable encryption at rest using customer-managed keys for your {+cluster+}.

            After you enable encryption at rest using customer-managed
            keys for your project, you must enable it at the 
            {+cluster+} level to encrypt data.

            Run the following command to add the 
            :setting:`spec.DeploymentSpec.encryptionAtRestProvider` to
            your
            :ref:`atlasdeployment-custom-resource`, which enables encryption at rest using your |azure| key for this 
            {+cluster+}:

            .. literalinclude:: /includes/enable-ear-cluster-azure.sh
               :language: sh
               :emphasize-lines: 9

   .. tab:: {+gcp+} KMS
      :tabid: gcp-kms

      .. procedure::
         :style: normal

         .. step:: Specify the ``spec.encryptionAtRest.googleCloudKms`` parameter.

            .. include:: /includes/steps-ear-ak8so-gcp.rst

         .. step:: Check for successful enablement of encryption at rest on your project.

            Run the following command to check whether |ak8so| detects
            the {+gcp+} |kms| configuration for your project.

            .. io-code-block::

               .. input::
                  :language: sh

                  kubectl get atlasprojects my-project -o=jsonpath='{.status.conditions[?(@.type=="EncryptionAtRestReadyType")].status}

               .. output::
                  :language: json
                  :visible: true

                  true

         .. step:: Enable encryption at rest using customer-managed keys for your {+cluster+}.

            After you enable encryption at rest using customer-managed
            keys for your project, you must enable it at the 
            {+cluster+} level to encrypt data.

            Run the following command to add the 
            :setting:`spec.DeploymentSpec.encryptionAtRestProvider` to
            your
            :ref:`atlasdeployment-custom-resource`, which enables encryption at rest using your {+gcp+} key for this 
            {+cluster+}:

            .. literalinclude:: /includes/enable-ear-cluster-gcp.sh
               :language: sh
               :emphasize-lines: 9