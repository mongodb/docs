.. index:: sharding; config servers
.. index:: config servers
.. _sharding-config-server:
.. _sharded-cluster-config-server:

==============
Config Servers
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Config servers store the :doc:`metadata </core/sharded-cluster-metadata>`
for a sharded cluster.

.. warning::

   If the config servers become inaccessible, the cluster is not
   accessible. If you cannot recover the data on a config server, the
   cluster will be inoperable.

MongoDB also uses the config servers to manage distributed locks.


.. _csrs:
.. _replset-config-servers:

Replica Set Config Servers
--------------------------

.. versionchanged:: 3.2

   .. include:: /includes/fact-csrs-versionchanged.rst

.. include:: /includes/fact-config-server-replica-set-restrictions.rst

Earlier versions of MongoDB required *exactly three* mirrored
:program:`mongod` instances to act as the config servers. If you are using
*mirrored* config servers, each server's system clock must be within 30
seconds of each other server for the distributed lock manager to work
properly. With *mirrored* config servers, minimize clock skew by running the
network time protocol (NTP) ``ntpd`` on your servers. MongoDB 3.2 deprecates
the use of three mirrored :program:`mongod` instances for config servers.

With replica set config servers, clock skew does not affect distributed lock
management.

Each sharded cluster must have its own config servers. Do not use the
same config servers for different sharded clusters.

.. index:: config databases
.. index:: database, config

.. _config-server-read-write-ops:

Read and Write Operations on Config Servers
-------------------------------------------

Config servers store the cluster's metadata in the :doc:`config
database </reference/config-database>`. The :program:`mongos` instances
cache this data and use it to route reads and writes to shards.

MongoDB only writes data to the config servers when the metadata changes,
such as

- after a :doc:`chunk migration </core/sharding-chunk-migration>`, or

- after a :doc:`chunk split </core/sharding-chunk-splitting>`.

When writing to the replica set config servers, MongoDB uses a
:ref:`write concern <wc-w>` of ``"majority"``.

MongoDB reads data from the config server in the following cases:

- A new :program:`mongos` starts for the first time, or an existing
  :program:`mongos` restarts.

- After change in the cluster metadata, such as after a chunk
  migration.

When reading from the replica set config servers, MongoDB uses a
:doc:`/reference/read-concern` level of :readconcern:`"majority"`.

Config Server Availability
--------------------------

If the config server replica set loses its primary and cannot elect a
primary, the cluster's metadata becomes *read only*. You can still read
and write data from the shards, but no chunk migration or chunk splits
will occur until the replica set can elect a primary. If all config
databases become unavailable, the cluster can become inoperable.

The :program:`mongos` instances cache the metadata from the config
servers. As such, if all config server members become unavailable, you
can still use the cluster if you do not restart the :program:`mongos`
instances until after the config servers are accessible again. If you
restart the :program:`mongos` instances before the config servers are
available, the :program:`mongos` will be unable to route reads and writes.

Clusters become inoperable without the cluster metadata. To ensure that
the config servers remain available and intact, backups of config
servers are critical. The data on the config server is small compared
to the data stored in a cluster, and the config server has a relatively
low activity load.

See :ref:`sharding-config-servers-and-availability` for more
information.
