.. _paid-tier-command-limitations:

=========================================
Command Limitations in Paid Tier Clusters
=========================================

.. default-domain:: mongodb

|service| requires clients to authenticate to access a |service|.
|service| provides a curated list of 
:ref:`MongoDB Database User Privileges <atlas-user-privileges>`. 
These privileges provide access to a subset of MongoDB commands. 

The following list covers the most common commands not currently
supported by |service| MongoDB database user privileges. The 
functionality provided by these commands are largely subsumed by 
|service|, or are restricted to ensure cluster stability and
performance. This list does not cover every possible unsupported 
command. See :ref:`paid-view-user-privilege` for instructions on 
generating a complete list of user privileges.

.. list-table::

   * - Category
     - Commands

   * - Replication
     - | ``applyOps``
       | ``replSetFreeze``
       | ``replSetInitiate``
       | ``replSetMaintenance``
       | ``replSetReconfig``
       | ``replSetResizeOplog``
       | ``replSetStepDown``
       | ``replSetSyncFrom``
       | ``resync``

   * - Sharding
     - | ``addShardToZone``
       | ``balancerStart``
       | ``balancerStop``
       | ``movePrimary``
       | ``mergeChunks``
       | ``removeShard``
       | ``removeShardFromZone``
       | ``updateZoneKeyRange``

   * - User and Role Management
     - | ``createUser``
       | ``dropUser``
       | ``grantRolesTouser``
       | ``revokeRolesFromUser``
       | ``updateUser``
       | ``createRole``
       | ``dropRole``
       | ``updateRole``

   * - Administrative
     - | ``setParameter``
       | ``logRotate``
       | ``shutdown``

Please contact |service| support if your use case requires access
to a command not currently supported by the existing |service| 
privileges.

.. _paid-view-user-privilege:

How to View an Authenticated User's Privileges and Access
---------------------------------------------------------

Each |service| MongoDB user inherits a number of privileges and
resources for which each privilege applies. You can view those
privileges by performing the following steps from the
:binary:`mongo <~bin.mongo>` shell.

1. Connect to your cluster via the :binary:`mongo <~bin.mongo>` shell.
    See :ref:`connect-mongo-shell` for complete instructions. You
    must authenticate as the user whose privileges you want to
    review.

#. Run the following command from the shell to switch to the ``admin``
   database:

   .. code-block:: shell

      use admin

#. Run the following command to retrieve the user's roles and
   inherited privileges. Replace ``<USERNAME>`` with the username
   of the authenticated user.

   .. code-block:: shell

      db.getUser( <USERNAME>, { showPrivileges: true } )

#. The command output should resemble the following:

   .. code-block:: shell

      {
         "_id" : "admin.<USERNAME>",
         "user" : "<USERNAME>",
         "db" : "admin",
         "roles" : [
            {
               "role" : "atlasAdmin",
               "db" : "admin"
            }
         ],
         "inheritedRoles" : [
            {
               "role" : "atlasAdmin",
               "db" : "admin"
            }
         ],
         "inheritedPrivileges" : [
            {
               "resource" : {
                  "db" : "admin",
                  "collection" : ""
               },
               "actions" : [
                  "viewRole"
               ]
            },
            ...,
         ]
      }

   Each document under the ``inheritedPrivileges`` consists of the
   following:

   - A ``resource`` document that defines what resources in the cluster
     the associated actions apply to. See 
     :manual:`Resource Document </reference/resource-document>` for
     more information.

   - A ``actions`` array that defines what actions the user can
     execute against the associated resources. See
     :manual:`Privilege Actions </reference/privilege-actions>` for 
     more information.

   You can only execute actions for which the user has access to,
   and only on the resources defined in the associated resource
   document. In the given example, the user can perform the
   ``viewRole`` action against the ``admin`` database.

   Use this output in combination with the linked reference
   pages to get a complete view of what actions the authenticated
   user has access to.

Please contact |service| support if the available |service| privileges
do not provide enough access for your workload or use case.




