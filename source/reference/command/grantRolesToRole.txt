================
grantRolesToRole
================

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: grantRolesToRole

   Allows users to defines from which roles an authorization role will
   inherit privileges. :dbcommand:`grantRolesToRole` modifies roles on
   the current database.

   The :dbcommand:`grantRolesToRole` command uses the following syntax:

   .. code-block:: javascript

      { grantRolesToRole: "<role>",
        grantedRoles: [
          { role: "<role>", db: "<database>" },
          ...
        ],
        writeConcern: { <write concern> }
      }

   The :dbcommand:`grantRolesToRole` command has the following fields:

   .. include:: /reference/command/grantRolesToRole-field.rst

   The ``grantedRoles`` array can take both documents and strings. If
   the role exists in the current database, specify the role by its
   name. If it exists in another database, specify the role as a
   document. The syntax for ``grantedRoles`` array's elements is the
   same as the syntax for the :data:`~admin.system.roles.roles`
   array's elements. See :data:`~admin.system.roles.roles` array.

Required Access
---------------

To grant a role, a user must have access that includes the
:authaction:`grantAnyRole` action on the relevant database.

Example
-------

The following :dbcommand:`grantRolesToRole` command adds the
``productsReader`` role from the ``products`` database to the
``productsReaderWriter`` role. The ``productsReaderWriter`` role
inherits the privileges of ``productsReader``:

.. code-block:: javascript

   { grantRolesToRole: "productsReaderWriter",
     grantedRoles: [
       { role: "productsReader", db: "products"}
     ],
     writeConcern: { w: "majority" , wtimeout: 5000 }
   }
