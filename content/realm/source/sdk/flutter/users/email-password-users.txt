.. meta::
   :robots: noindex, nosnippet

.. _flutter-manage-email-password-users:

==================================
Email/Password Users - Flutter SDK
==================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

With Atlas App Services's email/password authentication provider, you can register a new
account, confirm an email address, and reset a user's password from client code.

.. warning:: Version 0.5.0 Breaking Change

   The Realm Flutter SDK version 0.5.0 includes a breaking change to email/password
   authentication. The change fixes a bug where the unicode null character ``\u0000``
   was appended to the end of passwords in previous versions of the SDK.

   As a result, once you upgrade your application to use version >0.5.0,
   users must either reset their password or create a new account.
   Previous passwords will no longer work after updating to >0.5.0.

Before You Begin
----------------

#. :ref:`Create an App Services App <create-a-realm-app>`.
#. Before you begin writing client code, you should understand the different email/password
   authentication flows that App Services provides, and configure the backend implementation
   for your application. App Services has a variety of ways to confirm email/password
   user identities and reset user passwords.
   Learn more about, enable, and configure App Services :ref:`email/password authentication
   <email-password-authentication>`.


.. _flutter-manage-email-password-users-register:

Register a User
---------------

#. Create a new :flutter-sdk:`EmailPasswordAuthProvider <realm/EmailPasswordAuthProvider-class.html>`
   instance with your ``App`` instance as the argument.
#. Invoke :flutter-sdk:`EmailPasswordAuthProvider.registerUser()
   <realm/EmailPasswordAuthProvider/registerUser.html>`, passing the user's
   email and password as arguments.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.register-user.dart
   :language: dart

.. note::

   Registering a user does not also log that user in. You must log the user in separately.

Log in a User
-------------

#. Create an email/password credential by calling :flutter-sdk:`Credentials.emailPassword()
   <realm/Credentials/Credentials.emailPassword.html>` with the user's email and password.
#. Pass the generated credential to ``app.logIn``.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.email-password-credentials.dart
   :language: dart

.. _flutter-email-password-confirm-user:

Confirm a New User's Email Address
----------------------------------

Once you register a new email/password user, you must confirm the email address
unless you configure App Services to :ref:`automatically confirm users
<auth-automatically-confirm-users>`.

Custom Confirmation Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you configure App Services to use a :ref:`custom function for email address confirmation
<auth-run-a-confirmation-function>`, handle user confirmation with the logic
of your custom function's flow. The App Services backend invokes the custom
function when the user registers.

Send a Confirmation Email
~~~~~~~~~~~~~~~~~~~~~~~~~

You only need to send a confirmation email if you :ref:`configure App Services to handle
user confirmation with an email <auth-send-a-confirmation-email>`.

To confirm a newly-created user, pass a confirmation ``token`` and
``tokenId`` to :flutter-sdk:`EmailPasswordAuthProvider.confirmUser() <realm/EmailPasswordAuthProvider/confirmUser.html>`.
These are included in the email sent to the user's email address when they register.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.send-confirmation-email.dart
   :language: dart

.. note:: Use Deep Links in Flutter Apps

   Mobile applications can handle email confirmation directly in the app
   by configuring `deep linking <https://docs.flutter.dev/development/ui/navigation/deep-linking>`__.

Retry User Confirmation
-----------------------

The SDK provides methods to resend user confirmation emails or retry custom confirmation.

Retry a User Confirmation Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use this user confirmation method if you've configured the App Services backend
to retry a :ref:`custom user confirmation function <auth-run-a-confirmation-function>`.

To retry a confirmation function, pass the email used in sign up to
:flutter-sdk:`EmailPasswordAuthProvider.retryCustomConfirmationFunction()
<realm/EmailPasswordAuthProvider/retryCustomConfirmationFunction.html>`.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.retry-user-confirmation-function.dart
   :language: dart

Resend a User Confirmation Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use this user confirmation method if you've configured the App Services backend
to resend a :ref:`confirmation email <auth-send-a-confirmation-email>`.
The confirmation tokens in each URL expire after 30 minutes. If a user does not 
follow the link and confirm within that period, they must request a new 
confirmation email.

To resend a confirmation email, pass the email used in sign up to
:flutter-sdk:`EmailPasswordAuthProvider.resendUserConfirmation()
<realm/EmailPasswordAuthProvider/resendUserConfirmation.html>`.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.retry-user-confirmation-email.dart
   :language: dart

.. _flutter-email-password-reset-password:

Reset a User's Password
-----------------------

Resetting a user's password is a multi-step process. 

1. In your client app, you provide a UI for the user to reset their password. 
   Your App Services App can then send an email or run a custom function 
   to confirm the user's identity.
#. After confirming the user's identity, you can complete the password reset 
   request. 
#. After the password reset is complete, the user can log in using the new 
   password.

To select which of these methods to use in your app,
:ref:`configure the App Services authentication password reset behavior
<email-password-authentication-password-resets>`.

Call a Reset Function
~~~~~~~~~~~~~~~~~~~~~

When you configure your app to :ref:`run a password reset function 
<auth-run-a-password-reset-function>`, you define the function that
should run when you call
:flutter-sdk:`EmailPasswordAuthProvider.callResetPasswordFunction()
<realm/EmailPasswordAuthProvider/callResetPasswordFunction.html>`.
This function can take a username, a password, and any number 
of additional arguments. You can use these arguments to specify details 
like security question answers or other challenges that the user should 
pass to successfully complete a password reset.

You might prefer to use a custom password reset function when you want to
define your own password reset flows. For example, you might send a custom
password reset email from a specific domain. Or you might use a service other 
than email to confirm the user's identity.

On the App Services side, you define the custom password reset function that
runs when you call this method. That function can return one of three possible
statuses:

- ``fail``
- ``pending``
- ``success``

A ``fail`` status is treated as an error by the SDK. The SDK ``callResetPasswordFunction()``
does not take return values, so it does not return a ``pending`` or ``success``
status to the client. 

Server-Side Pending Case
````````````````````````

Your :ref:`App Services password reset function 
<auth-run-a-password-reset-function>` may return ``pending`` if you want 
the user to take some additional step to confirm their identity. However, that
return value is not passed to the SDK's ``callResetPasswordFunction()``, so 
your client app must implement its own logic to handle a ``pending`` status.

Your server-side function might send an email using a custom email provider. 
Or you may use SMS to confirm the user's identity via text message. 

You have access to a ``token`` and ``tokenId`` in the App Services password 
reset function context. If you pass this information from your App Services 
password reset function, you can pass these values back to your app using
platform-specific deep linking or universal links. Then, your client 
application can call :flutter-sdk:`EmailPasswordAuthProvider.completeResetPassword
<realm/EmailPasswordAuthProvider/completeResetPassword.html>` 
to complete the password reset flow.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.password-reset-function-pending.dart
   :language: dart

Server-Side Success Case
````````````````````````

If your :ref:`App Services password reset function 
<auth-run-a-password-reset-function>` does additional validation within 
the function, or if you have validated the user's identity prior to 
attempting to reset the password, you may configure the App Services function
to return ``success``. However, that return value is not passed to the SDK's 
``callResetPasswordFunction()``, so your client app must implement its 
own logic to handle a ``success`` status.

Calling the function in this example performs the entire password reset process.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.password-reset-function-success.dart
   :language: dart

Send Password Reset Email
~~~~~~~~~~~~~~~~~~~~~~~~~

To send password reset emails to confirm the user's identity, 
you must configure your App to :ref:`send a password reset email 
<auth-send-a-password-reset-email>`.

To send a password reset email, pass the email used in sign up to
:flutter-sdk:`EmailPasswordAuthProvider.resetPassword()
<realm/EmailPasswordAuthProvider/resetPassword.html>`.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.password-reset-email.dart
   :language: dart

Password reset emails contain a URL encoded with two values, ``token`` and 
``tokenId``. To complete the password reset flow, you can reset the user's 
password on the client or by calling a custom function on the backend.
To use the SDK to complete the password reset, pass these values to
:flutter-sdk:`EmailPasswordAuthProvider.completeResetPassword()
<realm/EmailPasswordAuthProvider/completeResetPassword.html>`.

If the user does not visit the URL from the password reset email within 30 
minutes, the ``token`` and ``tokenId`` expire. You must begin the password 
reset process again.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.password-reset-email-confirmation.dart
   :language: dart

.. note::

   To access the ``token`` and ``tokenId`` values sent in the password
   reset email, you can use a  :ref:`custom password reset email
   <email-password-authentication-password-resets>` containing a
   `deep link <https://docs.flutter.dev/development/ui/navigation/deep-linking>`__.

