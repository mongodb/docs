.. _node-fundamentals-change-a-document:
.. _node-modify:

================
Modify Documents
================

.. meta::
   :description: Modify documents in a collection using update and replace operations in the MongoDB Node.js Driver using updateOne(), updateMany(), and replaceOne() methods.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :keywords: code example, node.js, modify data

Overview
--------

You can modify documents in a MongoDB collection by using **update**
and **replace** operations. Update operations modify the fields and
values of a document while keeping other fields and values
unchanged. Replace operations substitute all fields and values
in an existing document with specified fields and values while keeping
the ``_id`` field value unchanged.

The {+driver-short+} provides the following methods to change documents:

- ``updateOne()``
- ``updateMany()``
- ``replaceOne()``

To learn how to replace documents, see the :ref:`<node-replace>` guide.

.. tip:: Interactive Lab
   
   This page includes a short interactive lab that demonstrates how to
   modify data by using the ``updateMany()`` method. You can complete this lab
   directly in your browser window without installing MongoDB or a code editor.

   To start the lab, click the :guilabel:`Open Interactive Tutorial` button at the
   top of the page. To expand the lab to a full-screen format, click the
   full-screen button (:guilabel:`â›¶`) in the top-right corner of the lab pane.

.. _updateDocuments:

Update Documents
----------------

To perform an update to one or more documents, create an **update
document** that specifies the **update operator** (the type of update to
perform) and the fields and values that describe the change. Update
documents use the following format:

.. code-block:: javascript

   {
      <update operator>: {
         <field> : {
            ...
         },
         <field> : {
         }
      },
      <update operator>: {
         ...
      }
   }

The top level of an update document contains one or more of the following
update operators:

- ``$set``: replaces the value of a field with a specified one
- ``$inc``: increments or decrements field values
- ``$rename``: renames fields
- ``$unset``: removes fields
- ``$mul``: multiplies a field value by a specified number

See the {+mdb-server+} manual for a :manual:`complete list of update operators
and their usage </reference/operator/update-field/>`.

The update operators apply only to the fields associated with them in your
update document.

.. note:: Aggregation Pipelines in Update Operations

   If you are using MongoDB Version 4.2 or later, you can use aggregation
   pipelines made up of a subset of aggregation stages in update operations. For
   more information on the aggregation stages MongoDB supports in
   aggregation pipelines used in update operations, see our tutorial on building
   :manual:`updates with aggregation pipelines </tutorial/update-documents-with-aggregation-pipeline/>`.

Example
~~~~~~~

Consider a document in the ``myDB.items`` collection with fields
describing an item for sale, its price, and the quantity available:

.. code-block:: javascript

   {
      _id: 465,
      item: "Hand-thrown ceramic plate",
      price: 32.50,
      quantity: 7,
   }

If you apply the ``$set`` update operator with a new value for
``quantity``, you can use the following update document:

.. code-block:: javascript

   const myDB = client.db("myDB");
   const myColl = myDB.collection("items");

   const filter = { _id: 465 };

   // update the value of the 'quantity' field to 5
   const updateDocument = {
      $set: {
         quantity: 5,
      },
   };
   const result = await myColl.updateOne(filter, updateDocument);

The updated document resembles the following, with an updated value in
the ``quantity`` field and all other values unchanged:

.. code-block:: javascript
   :copyable: false

   {
      _id: 465,
      item: "Hand-thrown ceramic plate",
      price: 32.50,
      quantity: 5,
   }

If an update operation fails to match any documents in a collection, it does not
make any changes. Update operations can be configured to perform an :doc:`upsert
</crud/update>` which attempts to perform an update, but if no documents are
matched, inserts a new document with the specified fields and values.

You cannot modify the ``_id`` field of a document nor change a field to
a value that violates a unique index constraint. See the {+mdb-server+} manual
for more information on :manual:`unique indexes </core/index-unique/>`.

.. _node-usage-updateone:

updateOne() Example: Full File
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/crud/example-intro.rst

This example uses the ``$set`` update operator which specifies
update values for document fields. For more information on update operators,
see the :manual:`MongoDB update operator reference documentation
</reference/operator/update/#update-operators>`.

The following code is a complete, standalone file that performs an update one
operation:

.. tabs::

  .. tab:: JavaScript
     :tabid: javascript

     .. literalinclude:: /code-snippets/usage-examples/updateOne.js
        :language: javascript
        :linenos:

  .. tab:: TypeScript
     :tabid: typescript

     .. literalinclude:: /code-snippets/usage-examples/updateOne.ts
        :language: typescript
        :linenos:

Running the preceding example results in the following output:

.. code-block:: none
   :copyable: false

   1 document(s) matched the filter, updated 1 document(s)

.. _node-usage-updatemany:

updateMany() Example: Full File
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/crud/example-intro.rst

The following code is a complete, standalone file that performs an update many
operation:

.. tabs::

   .. tab:: JavaScript
      :tabid: javascript

      .. literalinclude:: /code-snippets/usage-examples/updateMany.js
         :language: javascript
         :linenos:

   .. tab:: TypeScript
      :tabid: typescript

      .. literalinclude:: /code-snippets/usage-examples/updateMany.ts
         :language: typescript
         :linenos:

Running the preceding example, you see an output like the following:

.. code-block:: none
   :copyable: false

   Updated 477 documents

.. _node-update-instruqt-lab:

.. instruqt:: /mongodb-docs/tracks/update-node?token=em_FEr9KfMh4WQ0VosU
   :title: updateMany() Lesson
   :drawer:

API Documentation
-----------------

To learn more about any of the types or methods discussed in this guide, see the
following API documentation:

- `MongoClient <{+api+}/classes/MongoClient.html>`__
- `Db <{+api+}/classes/Db.html>`__
- `Collection <{+api+}/classes/Collection.html>`__
- `updateOne() <{+api+}/classes/Collection.html#updateOne>`__
- `updateMany() <{+api+}/classes/Collection.html#updateMany>`__