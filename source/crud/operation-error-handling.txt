.. _java-operation-errors:

==============================
Write Operation Error Handling
==============================

.. meta::
    :description: Understand how to handle operation errors in the MongoDB Java Sync Driver, including error types like WriteErrror and ConnectionPoolCleared.

.. contents::
    :local:
    :backlinks: none
    :depth: 2
    :class: singlecol

Overview
--------

This page describes write errors you might encounter when
using the {+driver-long+} to perform MongoDB write operations. Once you
understand the types of write operation errors that the driver raises, you can take
appropriate actions to either handle them or correct the error-causing code.

.. note::

   This page addresses only write operation error handling. If you encounter
   any other issues with MongoDB or the driver, visit the following
   resources:
 
    - :ref:`java-connection-troubleshooting` for potential solutions to issues
      you might encounter when connecting to a MongoDB deployment
    - :ref:`java-issues-and-help` page for information about reporting bugs,
      contributing to the driver, and finding more resources
    - :community-forum:`MongoDB Community Forums </tag/java>` for questions,
      discussions, or general technical support

Write Error Types
-----------------

If the driver encounters an error while performing a write operation, it
returns an error of the `WriteError <{+core-api+}/WriteError.html>`__ type.

The ``WriteError`` type contains the following methods: 

    - ``getCode``: returns the code associated with this error
    - ``getMessage``: returns the message associated with this error
    - ``getDetails``: returns a BSON Document with details associated with this
      error, which may be empty
    - ``getCategory``: returns the category of the write error as an
      `ErrorCategory <{+core-api+}/ErrorCategory.html>`__ object

The `BulkWriteError <{+core-api+}/bulk/BulkWriteError.html>`__ type extends
``WriteError`` and inherits the above methods. This type is used for bulk
operations and includes an ``index`` field that identifies the item in the bulk
operation that caused the error. 

The `WriteConcernError <{+core-api+}/bulk/WriteConcernError.html>`__ is not
related to the ``WriteError`` type and details errors relating to the :ref:`write
concern </reference/write-concern/>`. In addition to the ``getCode``, ``getMessage``, and ``getDetails``
methods, ``WriteConcernError`` has the ``getCodeName`` method, which returns the
name associated with the error code. This type does not have the ``getCategory``
method.

.. _java_error_write_errors:

Write Error
~~~~~~~~~~~

The driver raises a ``WriteError`` error for any errors that it
encounters when performing single write operations that are not related to
satisfying the write concern.

For example, the driver raises a ``WriteError`` error if you attempt to insert a
document into a collection with an ObjectId value that already exists in the
collection. Suppose the collection has an existing document with an ``ObjectId`` of `1`. If you attempt to insert another document
where the value of ``ObjectId`` is ``1``, the driver prints the following
error message:

.. code-block:: none
   :copyable: false

   WriteError: { code: 11000, message: "E11000 duplicate key error collection:
   testDB.testCollection index: _id_ dup key: { _id: 1 }", details: Document{{}}} } 

In the preceding error message, the ``message`` field describes the reason for
the error, and the ``details`` field provides specific details about the failing
operation. To address this error, you must revise the document to have a unique
``ObjectId``.

Bulk Write Error
----------------

If the same example were run as a bulk write operation, the `index` field
containing the index of the item with the duplicate ``ObjectId`` would be added
to the message. For example, if the index of the item that produced the error is
`2`, the driver would print the following error message:

.. code-block:: none
   :copyable: false
   :emphasize-lines: 1

   BulkWriteError{ index: 2, code: 11000, message: 'E11000 duplicate key error
   collection: testDB.testCollection index: _id_ dup key: { _id: 1 }',
   details: Document{{}} }

Write Concern Error
~~~~~~~~~~~~~~~~~~~

The driver raises a ``WriteConcernError`` error when you perform a write
operation and the driver cannot satisfy the specified write concern. For
example, if you specify a write concern of ``majority`` for
operations on a replica set with three nodes, the driver returns
this error if the write operation propagates only to one node.

To learn more about write concerns, see :manual:`Write Concern
</reference/write-concern/>` in the Server manual.