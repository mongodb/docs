.. meta::
   :robots: noindex, nosnippet

=======================================
Sync Data Between Devices - Node.js SDK
=======================================

.. toctree::
   :titlesonly:

   Configure & Open a Synced Realm </sdk/node/sync/configure-and-open-a-synced-realm>
   Manage Flexible Sync Subscriptions </sdk/node/sync/flexible-sync>
   Manage a Sync Session </sdk/node/sync/manage-sync-session>
   Handle Sync Errors </sdk/node/sync/handle-sync-errors>
   Manual Client Reset Data Recovery </sdk/node/sync/client-reset-data-recovery>
   Set the Client Log Level </sdk/node/sync/log-level>
   Stream Data to Atlas </sdk/node/sync/stream-data-to-atlas>
   Partition-Based Sync </sdk/node/sync/partition-based-sync>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-realm-sync:

Atlas Device Sync automatically synchronizes data between client applications and 
an :ref:`Atlas App Services backend <realm-cloud>`. When a client 
device is online, Sync asynchronously synchronizes data in a 
background thread between the device and your backend App. 

Device Sync has two sync modes: Flexible Sync and the older Partition-Based
Sync. We recommend using the Flexible Sync mode for new apps. For more 
information on using Partition-Based Sync, refer to :ref:`Partition-Based Sync
- Node.js SDK <node-partition-based-sync>`. 

When you use Sync in your client application, your implementation must match 
the Sync Mode you select in your backend App configuration. You can only use 
one Sync Mode for your application. You cannot mix Partition-Based Sync 
and Flexible Sync within the same App.

.. seealso::

   :ref:`enable-realm-sync`

.. _node-flexible-sync-fundamentals:

Flexible Sync
-------------

When you select :ref:`Flexible Sync <flexible-sync>` for your backend App 
configuration, your client implementation must include subscriptions to 
queries on :ref:`queryable fields <queryable-fields>`. Flexible Sync works 
by synchronizing data that matches query subscriptions you maintain in the 
client application. 

A subscription set contains a set of queries. Realm Flexible Sync returns 
documents matching those queries, where the user has the appropriate 
:ref:`permissions <flexible-sync-rules-and-permissions>` to read and/or 
read and write the documents. If documents match the query, but the client 
does not have the permission to read or write them, they do not sync to 
the client application.

You can form queries using :ref:`Realm Query Language <realm-query-language>`.

.. include:: /includes/note-unsupported-flex-sync-rql-operators.rst

Subscription sets are based on a specific type of :ref:`Realm object <node-object-types>`. 
You might have multiple subscriptions if you have many types of Realm objects.

To use Flexible Sync in your client application, open a synced realm 
with a flexible sync configuration. Then, manage subscriptions
to determine which documents to sync.

Group Updates for Improved Performance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/sync-memory-performance.rst

.. tip::

   Device Sync supports two Sync Modes: Flexible Sync, and the older 
   Partition-Based Sync. If your App Services backend uses Partition-Based 
   Sync, refer to :ref:`node-partition-based-sync`.

   We recommend new apps use Flexible Sync.
