======================
Backup Encryption Keys
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. include:: /includes/fact-groups-projects-synonyms.rst

MongoDB 3.4 Enterprise enables administrators to encrypt backups. Administrators
must integrate with a KMIP server to generate and manage a master key used
to encrypt the head databases during a backup operation. MongoDB recommends
periodically rotating the KMIP master key for increased security.

.. include:: /includes/api/base-api-uri.rst

Endpoints
---------

Rotate the KMIP Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``PUT`` HTTP method with the following
endpoint to rotate the KMIP master key.  Issue one ``PUT`` request
for each shard and another ``PUT`` request for the config server
replica set.

.. code-block:: http

   PUT /groups/{PROJECT-ID}/backupConfigs/CLUSTER-ID/encryptionKey


Retrieve the KMIP Master Key ID
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``GET`` HTTP method with the same endpoint to retrieve the ID of the
current KMIP master key.

.. code-block:: http

   GET /groups/{PROJECT-ID}/backupConfigs/CLUSTER-ID/encryptionKey


Sample Entity
-------------

.. code-block:: json

   {
     "clusterId": "yyy",
     "groupId": "xxx",
     "encryptionKeyUUID: "1234-3456-4567-abcd-def0",
   }

Entity Fields
-------------
.. list-table::
   :widths: 10 10 80
   :header-rows: 1
   :stub-columns: 1

   * - Name
     - Type
     - Description

   * - groupId
     - string
     - Unique identifier of the project that the encryption key belong to.

   * - clusterId
     - string
     - Unique identifier of the cluster that tthe encryption keys belong to.

   * - encryptionKeyUUID
     - string
     - The Unique identifier of the KMIP master key. This key is used to encrypt
       and restore the head databases for an encrypted backup.

Examples
--------

Rotate the KMIP Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~

Request
```````

.. code-block:: sh

   curl --user '{PUBLIC-KEY}:{PRIVATE-KEY}' --digest \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --include \
    --request PUT "https://<ops-manager-host>/api/public/v1.0/groups/{PROJECT-ID}/backupConfigs/5196e5b0e4b0fca9cc88334a/encryptionKey"

Response
````````

.. code-block:: none

   HTTP/1.1 201 Accepted

The new KMIP master key ID is not displayed in the response.  Retrieve the new key with a ``GET`` request to the same endpoint, as shown in the next example.

Retrieve the KMIP Master Key ID
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Request
```````

.. code-block:: sh

   curl --user '{PUBLIC-KEY}:{PRIVATE-KEY}' --digest \
    --header 'Accept: application/json' \
    --include \
    --request GET "https://<ops-manager-host>/api/public/v1.0/groups/{PROJECT-ID}/backupConfigs/5196e5b0e4b0fca9cc88334a/encryptionKey"

Response
````````
Response Header
~~~~~~~~~~~~~~~

.. include:: /includes/api/api-headers/401.rst

.. include:: /includes/api/api-headers/200.rst

Response Body
~~~~~~~~~~~~~

.. code-block:: json

   {
     "clusterId" : "5196e5b0e4b0fca9cc88334a",
     "groupId" : "{PROJECT-ID}",
     "encryptionKeyUUID": "1234-3456-4567-abcd-def0"
   }

