.. _embedding-charts-sdk:

===================================
Embed Charts with the Embedding SDK
===================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/sdk-beta.rst

You can embed a chart into a web application with the Charts Embedding
JavaScript SDK, allowing more flexible adjustments of settings and rendering.

Features of the embedding SDK include:

- Add filters dynamically
- Change the size and style of the chart
- Refresh on demand

The current version of the SDK supports :ref:`unauthenticated chart
embedding <choose-access-level>`. A future version will include support
for authenticated embedded charts.

To embed a chart with the SDK, you need to:

- Enable unauthenticated embedding for the chart.
- Whitelist any document fields which you want to have available for use
  in :ref:`chart filters <embed-options-filter>`.
- Have the chart ID and base URL strings.

To prepare a chart for embedding with the SDK, use the following
procedure.

.. _embed-chart-procedure:

Procedure
---------

.. include:: /includes/steps/embed-chart-sdk-anon.rst

Installation
------------

If you have a simple web app, you can reference the Embedding SDK from a
script tag, and no installation is needed. If you are building a more complex
web app and are using ``npm`` or ``yarn``, you can install the Embedding SDK
so that it can be used directly from your script files.

To install the embedding SDK with ``npm``, use the following command:

.. code-block:: none

   npm install @mongodb-js/charts-embed-dom

To install with ``yarn``:

.. code-block:: none

   yarn add @mongodb-js/charts-embed-dom

Examples
--------

An `example app <https://codesandbox.io/s/charts-embedding-sdk-8i898>`__ using
the embedding SDK can be found at ``codesandbox.io``. The example app
demonstrates some of the interactive features available to the embedding
SDK, including an interactive filter and a manual refresh button.

The example app is configured with a chart ID and base URL which are
particular to the app. Be sure to configure your own apps with the correct
chart ID and base URL.

The example app uses two SDK methods:

.. list-table::
   :header-rows: 1
   :widths: 15 55 15 15

   * - Method
     - Description
     - Args
     - Returns

   * - ``refresh()``
     - Reloads the chart with the latest data from its
       :ref:`data source <data-sources>`.
     - none
     - Promise<void>

   * - ``setFilter()``
     - Filters your embedded chart based on a specified MQL
       :ref:`filter document <query-bar>`.

       .. note::

          Any fields included in the filter must be specified in the Embed
          Chart modal. See :ref:`Filter Embedded Charts with the SDK
          <filter-embedded-sdk>`.

     - :ref:`filter <query-bar>` object
     - Promise<void>

Quick Start with HTML
~~~~~~~~~~~~~~~~~~~~~

If you're just getting started with the embedding SDK and you would
like to confirm that your chart ID and base URL are correct and
try out some of the options, you can use the SDK in a simple HTML
page by including it as part of a header script tag.

.. code-block:: html

   <!DOCTYPE html>
   <html lang="en">
     <head>
       <title>Chart demo</title>
       <meta charset="utf-8">
       <!-- import the embedding sdk -->
       <script src="https://unpkg.com/@mongodb-js/charts-embed-dom@next"></script>
       <script src="https://code.jquery.com/jquery-1.9.1.min.js"></script>
       <script>
         $( document ).ready(function() {
           $("#refresh").on("click", () => {
             chart.refresh();
           });
         });
       </script>
     </head>
     <body>
       <h1>Embedded Chart Demo</h1>
       <button id="refresh">Refresh Chart</button>
       <div id="chart"></div>
       <script>
         const sdk = new ChartsEmbedSDK;
         // when using npm:
         // import ChartsEmbedSDK from '@mongodb-js/charts-embed-dom';

         const chart = sdk
           .createChart({
             baseUrl: '<your-base-url>',
             chartId: '<your-chart-id>',
             width: 500,
             height: 500,
             refreshInterval: 300
           })
           .render(document.getElementById('chart'));
       </script>
     </body>
   </html>

.. _filter-embedded-sdk:

Filter Embedded Charts with the SDK
-----------------------------------

You can add a :ref:`filter <embed-options-filter>` to an embedded chart
with the ``filter`` option. Filtering allows the chart author to only display
data in the embedded chart which matches a specified :abbr:`MQL (MongoDB
Query Language)` filter.

Any fields included in the filter must be specified in the Embed Chart modal.
The Embed Chart modal contains a dropdown menu of fields on
which to allow filtering.

The following uses the ``filter`` option to represent only documents in
which the ``total`` field is greater than ``100``:

.. code-block:: javascript

   createChart({
     baseUrl: '<your-base-url>',
     chartId: '<your-chart-id>',
     width: 500,
     height: 500,
     filter: { "total": { "$gt": 100 } }
   })

   

Option Reference
----------------

The following options are available to the JavaScript ``createChart``
method:

.. list-table::
   :header-rows: 1
   :widths: 10 10 70 10

   * - Option
     - Type
     - Description
     - Required?

   * - ``baseUrl``
     - string
     - Base URL of the chart.
     - yes

   * - ``chartID``
     - string
     - Unique identifier of the chart.
     - yes

   * - ``height``
     - number
     - Height of the chart, in pixels.
     - yes

   * - ``width``
     - number
     - Width of the chart, in pixels.
     - yes

   * - ``filter``
     - object
     - A :ref:`filter <embed-options-filter>` to apply to the chart.
     - no

   * - ``refreshInterval``
     - number
     - How often to refresh the chart, in seconds. The minimum refresh
       interval is 10 seconds. ``autorefresh`` is off by default.
     - no

   * - ``theme``
     - string
     - A :ref:`theme <chart-display-theme>` for the chart to use. Valid
       options are ``light`` and ``dark``. Defaults to ``light``.
     - no

   * - ``showAttribution``
     - boolean
     - Specifies whether or not to display the :guilabel:`MongoDB` logo
       below the chart. Defaults to ``true``.
     - no

