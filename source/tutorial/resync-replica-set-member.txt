================================
Resync a Member of a Replica Set
================================

.. default-domain:: mongodb

A :term:`replica set` member becomes "stale" when its replication
process falls so far behind that the :term:`primary` overwrites oplog
entries the member has not yet replicated. The member cannot catch up
and becomes "stale." When this occurs, you must completely
resynchronize the member by removing its data and performing an
:ref:`initial sync <replica-set-initial-sync>`.

This tutorial addresses both resyncing a stale member and to creating a
new member using seed data from another member. When syncing a member,
choose a time when the system has the bandwidth to move a large amount
of data. Schedule the synchronization during a time of low usage or
during a maintenance window.

MongoDB provides two options for performing an initial sync:

- Restart the :program:`mongod` with an empty data directory and let
  MongoDB's normal initial syncing feature restore the data. This
  is the more simple option but may take longer to replace the data.

  See :ref:`replica-set-auto-resync-stale-member`.

- Restart the machine with a copy of a recent data directory from
  another member in the replica set. This procedure can replace
  the data more quickly but requires more manual steps.

  See :ref:`replica-set-resync-by-copying`.

.. index:: replica set; sync
.. index:: replica set; resync
.. _replica-set-auto-resync-stale-member:

Procedures
----------

Automatically Sync a Member
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. warning:: During initial sync, :program:`mongod` will remove the
   content of the :setting:`~storage.dbPath`.

This procedure relies on MongoDB's regular process for :ref:`initial
sync <replica-set-initial-sync>`. This will store the current data on
the member. For an overview of MongoDB initial sync process, see the
:ref:`replica-set-syncing` section.

If the instance has no data, you can simply follow the
:doc:`/tutorial/expand-replica-set` or
:doc:`/tutorial/replace-replica-set-member` procedure to add a
new member to a replica set.

You can also force a :program:`mongod` that is already a member of the
set to to perform an initial sync by restarting the instance without
the content of the :setting:`~storage.dbPath` as follows:

a. Stop the member's :program:`mongod` instance.
   To ensure a clean shutdown, use the :method:`db.shutdownServer()`
   method from the :program:`mongo` shell or on Linux systems, the
   :option:`mongod --shutdown` option.

#. Delete all data and sub-directories from the member's data
   directory. By removing the data :setting:`~storage.dbPath`, MongoDB will
   perform a complete resync. Consider making a backup first.

At this point, the :program:`mongod` will perform an initial
sync. The length of the initial sync process depends on the
size of the database and network connection between members of the
replica set.

Initial sync operations can impact the other members of the set and
create additional traffic to the primary and can only occur if
another member of the set is accessible and up to date.

.. index:: replica set; resync
.. _replica-set-resync-by-copying:

Sync by Copying Data Files from Another Member
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This approach "seeds" a new or stale member using the data files from
an existing member of the replica set. The data files **must** be
sufficiently recent to allow the new member to catch up with the
:term:`oplog`. Otherwise the member would need to perform an initial
sync.

Copy the Data Files
```````````````````

You can capture the data files as either a snapshot or a direct copy.
However, in most cases you cannot copy data files from a running
:program:`mongod` instance to another because the data files will change
during the file copy operation.

.. important:: If copying data files, you must copy the content of the ``local``
   database.

You *cannot* use a :program:`mongodump` backup for the data files,
**only a snapshot backup**. For approaches to capturing a consistent
snapshot of a running :program:`mongod` instance, see the
:doc:`/core/backups` documentation.

Sync the Member
```````````````

After you have copied the data files from the "seed" source, start the
:program:`mongod` instance and allow it to apply all operations from
the oplog until it reflects the current state of the replica set.
