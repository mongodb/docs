===========================
$changeStream (aggregation)
===========================

.. meta::
   :description: Use `$changeStream` as the first stage in an aggregation pipeline to return a Change Stream cursor for monitoring changes in a collection, database, or cluster.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. pipeline:: $changeStream

   Returns a :ref:`Change Stream <changeStreams>` cursor on a collection, a database,
   or an entire cluster. Must be used as the first stage in an aggregation pipeline.

   The :pipeline:`$changeStream` stage has the following syntax:

   .. code-block:: text

      {
        $changeStream: {
          allChangesForCluster: <boolean>,
          fullDocument: <string>,
          fullDocumentBeforeChange: <string>,
          resumeAfter: <document>
          showExpandedEvents: <boolean>,
          startAfter: <document>
          startAtOperationTime: <timestamp>
        }
      }

   .. list-table::
      :header-rows: 1

      * - Parameter
        - Description

      * - ``allChangesForCluster``
        - Optional: Sets whether the change stream should include all changes
          in the cluster. May only be opened on the ``admin`` database.

      * - ``fullDocument``
        - Optional: Specifies whether change notifications include a copy of the
          full document when modified by ``update`` operations.

          * ``default``: Change notifications do not include the full document
            for ``update`` operations.

          * ``required``: Change notifications includes a copy of the modified
            document as it appeared immediately after the change. If the
            document cannot be found, the change stream throws an error.

            To use this option, you must first use the :dbcommand:`collMod`
            command to enable the ``changeStreamPreAndPostImages`` option.

            .. versionadded:: 6.0
          * ``updateLookup``: Change notifications includes a copy of the
            document modified by the change.  This document is the current
            majority-committed document or ``null`` if it no longer exists.

          * ``whenAvailable``: Change notification includes a copy of the
            modified document as it appeared immediately after the change or
            ``null`` if the document is unavailable.

            To use this option, you must first use the :dbcommand:`collMod`
            command to enable the ``changeStreamPreAndPostImages`` option.

            .. versionadded:: 6.0

          In the case of partial updates, the change notification also
          provides a description of the change.

      * - ``fullDocumentBeforeChange``
        - Include the full document from before the change.
          This field accepts the following values:

          * ``off``: Disables inclusion of the document from before the change.
          * ``whenAvailable``: Includes document from before the change.
            The query does not fail if the unmodified document is not available.
          * ``required``: Includes document from before the change. The query
            fails if the unmodified document is not available.

      * - ``resumeAfter``
        - .. include:: /includes/change-stream/resume-after-description.rst

      * - ``showExpandedEvents``
        - Specifies whether to include additional change events, such as
          such as DDL and index operations.

          .. versionadded:: 6.0

      * - ``startAfter``
        - .. include:: /includes/change-stream/start-after-description.rst

      * - ``startAtOperationTime``
        - Specifies a time as the logical starting point for the change stream.
          Cannot be used with ``resumeAfter`` or ``startAfter`` fields.

Stable API Support
------------------

.. include:: /includes/stable-api/change-stream-support.rst

Examples
--------

.. tabs-drivers::

   .. tab::
      :tabid: shell

      To create a change stream cursor using the aggregation stage, run
      the :dbcommand:`aggregate` command.

      .. code-block:: javascript

         var cur = db.names.aggregate( [
            { $changeStream: {} }
         ] )

      To open the cursor, run ``cur``.

      When the change stream detects a change, the ``next()`` method returns
      a change event notification. For example, after running ``cur.next()``,
      MongoDB returns a document similar to the following:

      .. code-block:: json
         :copyable: false

         {
            "_id": {
               _data: "8262E2EE54000000022B022C0100296E5A100448E5E3DD01364019AE8FE8C6859527E046645F6964006462E2EE54C8756C0D5CF6F0720004"
            },
            "operationType": "insert",
            "clusterTime": Timestamp({ t: 1659039316, i: 2 }),
            "wallTime": ISODate("2022-07-28T20:15:16.148Z"),
            "fullDocument": {
               "_id": ObjectId("62e2ee54c8756c0d5cf6f072"),
               "name": "Walker Percy"
            },
            "ns": {
               "db": "test",
               "coll": "names"
            },
            "documentKey": { _id: ObjectId("62e2ee54c8756c0d5cf6f072") }
         }

   .. tab::
      :tabid: csharp

      .. include:: /includes/driver-examples/aggregation/method-intro.rst

         .. replacement:: stage-name

            ``$changeStream`` 
        
         .. replacement:: method-name-and-link 

            `ChangeStream() <{+csharp-api-docs+}/MongoDB.Driver/MongoDB.Driver.PipelineStageDefinitionBuilder.ChangeStream.html>`__

         .. replacement:: stage-specific-info
         
         .. replacement:: method-description

            returns a change stream cursor:

         .. replacement:: more-method-description

      .. literalinclude:: /includes/driver-examples/aggregation/BuildersExamples.cs
         :start-after: // start changeStream
         :end-before: // end changeStream
         :language: csharp
         :dedent: 8
      
      You can use a `ChangeStreamStageOptions <{+csharp-api-docs+}/MongoDB.Driver/MongoDB.Driver.ChangeStreamStageOptions.html>`__
      object to customize the behavior of the change stream.
      The following example performs the same ``$changeStream`` operation as the previous
      example, but specifies the following options:

      - The ``FullDocument`` option specifies that change notifications don't include a
        copy of the full document when modified by update operations.
      - The ``StartAtOperationTime`` option specifies the logical starting point for the
        change stream.

      .. literalinclude:: /includes/driver-examples/aggregation/BuildersExamples.cs
         :start-after: // start changeStreamOptions
         :end-before: // end changeStreamOptions
         :language: csharp
         :dedent: 8 

      .. note:: Prefer the ``Watch()`` Method

         Where possible, use the ``IMongoCollection<TDocument>.Watch()`` method instead
         of this aggregation stage. Use the ``ChangeStream()`` method
         only if subsequent stages project away the resume token (``_id``) or if you don't
         want the resulting cursor to automatically resume.

For more information on change stream notifications, see :ref:`Change Events
<change-events>`.
