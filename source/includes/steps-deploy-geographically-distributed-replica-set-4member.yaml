stepnum: 1
source:
  file: steps-deploy-replica-set.yaml
  ref: start-mongod
---
stepnum: 2
source:
  file: steps-deploy-replica-set.yaml
  ref: open-shell
---
stepnum: 3
source:
  file: steps-deploy-replica-set.yaml
  ref: initiate-rs
---
stepnum: 4
source:
  file: steps-deploy-replica-set.yaml
  ref: verify-rsconf
---
title: Add the remaining members to the replica set.
stepnum: 5
ref: add-members
action:
  pre: |
    Use :method:`rs.add()` in a :program:`mongo` shell connected to the
    current primary. The commands should resemble the following:
  language: javascript
  code: |
    rs.add("mongodb1.example.net")
    rs.add("mongodb2.example.net")
    rs.add("mongodb3.example.net")
post: |
  When complete, you should have a fully functional replica set. The new
  replica set will elect a :term:`primary`.
---
title: Add the arbiter.
stepnum: 6
ref: add-arbiter
action:
  pre: |
    In the same shell session, issue the following command to add the
    arbiter (e.g. ``mongodb4.example.net``):
  language: javascript
  code: |
    rs.addArb("mongodb4.example.net")
---
title: Configure outside members as :ref:`priority 0 members <replica-set-secondary-only-members>`.
stepnum: 7
ref: verify-priority
pre: |
  Configure each member located outside of Site A (e.g.
  ``mongodb3.example.net``) as a :ref:`priority 0 member
  <replica-set-secondary-only-members>`.
action:
  - pre: |
      .. include:: /includes/fact-distributed-rs-siteB-config.rst
  - pre: |
      After these commands return, you have a geographically redundant
      four-member replica set.
---
stepnum: 8
source:
  file: steps-deploy-replica-set.yaml
  ref: check-status
...
