===================
$sqrt (aggregation)
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $sqrt

   .. versionadded:: 3.2

   Calculates the square root of a positive number and returns the
   result as a double.

   :expression:`$sqrt` has the following syntax:

   .. code-block:: javascript

      { $sqrt: <number> }

   The argument can be any valid :ref:`expression
   <aggregation-expressions>` as long as it resolves to a *non-negative*
   number. For more information
   on expressions, see :ref:`aggregation-expressions`.

Behavior
--------

.. include:: /includes/extracts/agg-expression-null-operand-sqrt.rst

:expression:`$sqrt` errors on negative numbers.

.. list-table::
   :header-rows: 1
   :widths: 85 15

   * - Example
     - Results

   * - ``{ $sqrt: 25 }``
     - ``5``

   * - ``{ $sqrt: 30 }``
     - ``5.477225575051661``

   * - ``{ $sqrt: null }``
     - ``null``

Example
-------

A collection ``points`` contains the following documents:

.. code-block:: javascript

   { _id: 1, p1: { x: 5, y: 8 }, p2: { x: 0, y: 5} }
   { _id: 2, p1: { x: -2, y: 1 }, p2: { x: 1, y: 5} }
   { _id: 3, p1: { x: 4, y: 4 }, p2: { x: 4, y: 0} }

The following example uses :expression:`$sqrt` to calculate the
distance between ``p1`` and ``p2``:

.. code-block:: javascript

   db.points.aggregate([
      {
        $project: {
           distance: {
              $sqrt: { 
                  $add: [
                     { $pow: [ { $subtract: [ "$p2.y", "$p1.y" ] }, 2 ] },
                     { $pow: [ { $subtract: [ "$p2.x", "$p1.x" ] }, 2 ] }
                  ]
              }
           }
        }
      }
   ])

The operation returns the following results:

.. code-block:: javascript

   { "_id" : 1, "distance" : 5.830951894845301 }
   { "_id" : 2, "distance" : 5 }
   { "_id" : 3, "distance" : 4 }
