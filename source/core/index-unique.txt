.. index:: index; unique
.. _index-type-unique:

==============
Unique Indexes
==============

.. default-domain:: mongodb

A unique index causes MongoDB to reject all documents that contain a
duplicate value for the indexed field. 

To create a unique index, use the :method:`db.collection.createIndex()`
method with the ``unique`` option set to ``true``. For example, to
create a unique index on the ``user_id`` field of the ``members``
collection, use the following operation in the :program:`mongo` shell:

.. code-block:: javascript

   db.members.createIndex( { "user_id": 1 }, { unique: true } )

By default, ``unique`` is ``false`` on MongoDB indexes.

If you use the unique constraint on a :ref:`compound index
<index-type-compound>`, then MongoDB will enforce uniqueness on the
*combination* of values rather than the individual value for any or all
values of the key.

Behavior
--------

Unique Constraint Across Separate Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The unique constraint applies to separate documents in the collection.
That is, the unique index prevents *separate* documents from having the
same value for the indexed key, but the index does not prevent a
document from having multiple elements or embedded documents in an
indexed array from having the same value. In the case of a single
document with repeating values, the repeated value is inserted into the
index only once.

For example, a collection has a unique index on ``a.b``:

.. code-block:: javascript

   db.collection.createIndex( { "a.b": 1 }, { unique: true } )

The unique index permits the insertion of the following document into
the collection if no other document in the collection has the ``a.b``
value of ``5``:

.. code-block:: javascript

   db.collection.insert( { a: [ { b: 5 }, { b: 5 } ] } )

.. _unique-index-and-missing-field:

Unique Index and Missing Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If a document does not have a value for the indexed field in a unique
index, the index will store a null value for this document. Because of
the unique constraint, MongoDB will only permit one document that lacks
the indexed field. If there is more than one document without a value
for the indexed field or is missing the indexed field, the index build
will fail with a duplicate key error.

For example, a collection has a unique index on ``x``:

.. code-block:: javascript

   db.collection.createIndex( { "x": 1 }, { unique: true } )

The unique index allows the insertion of a document without the field
``x`` if the collection does not already contain a document missing the
field ``x``:

.. code-block:: javascript

   db.collection.insert( { y: 1 } )

However, the unique index errors on the insertion of a document without
the field ``x`` if the collection already contains a document missing
the field ``x``:

.. code-block:: javascript

   db.collection.insert( { z: 1 } )

The operation fails to insert the document because of the violation of
the unique constraint on the value of the field ``x``:

.. code-block:: javascript

   WriteResult({
      "nInserted" : 0,
      "writeError" : {
         "code" : 11000,
         "errmsg" : "E11000 duplicate key error index: test.collection.$a.b_1 dup key: { : null }"
      }
   })

You can combine the unique constraint with the :ref:`sparse index
<index-type-sparse>` to filter these null values from the unique index
and avoid the error.

Restrictions
~~~~~~~~~~~~

You may not specify a unique constraint on a :ref:`hashed
index <index-type-hashed>`.

.. seealso:: :doc:`/tutorial/create-a-unique-index`
