===========
mongomirror
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. only:: (not man)

.. binary:: mongomirror

   A utility for migrating data from an existing MongoDB replica set
   to a MongoDB |service| replica set. ``mongomirror`` does
   not require you to shut down your existing replica set or
   applications.

.. important::

     :binary:`~bin.mongomirror` does not import user/role data or
     the ``config`` database.

Download ``mongomirror``
------------------------

.. admonition:: Debian 7 End of Life
   :class: note

   Debian 7 reached
   `End of Life <https://www.debian.org/News/2018/20180601>`_ on
   May 31, 2018. ``mongomirror`` 0.3.1 removed support for
   Debian 7 systems.

.. include:: /includes/list-table-mongomirror-downloads.rst

Syntax
------

To run ``mongomirror``, you must specify the source replica
set and the target |service| replica set. For |service|, you must
specify a user in the |service| cluster with
:ref:`appropriate privileges <destination-authorization>` and the
corresponding password. If the source replica set requires
authentication, you must specify a user with
:ref:`appropriate privileges <source-rs-authorization>`.

.. code-block:: sh

   mongomirror --host <sourceReplSet> \
      --destination <atlasCluster> \
      --destinationUsername <atlasAdminUser> \
      --destinationPassword <atlasPassword> \
      [Additional options]

For details on the options, see :ref:`mongomirror-options`.

Migration Process
-----------------

When you start ``mongomirror``:

#. First, ``mongomirror`` performs an initial sync, copying
   collections from the existing MongoDB replica set to the target
   cluster in |service|.

#. After the initial sync, ``mongomirror`` continuously
   tails the replica set's oplog for incoming changes and replays them
   on the target cluster in MongoDB |service|.

Once started, ``mongomirror`` runs continuously until you
shut down the process.

- If you shut down ``mongomirror`` during the initial sync
  stage, either ensure that the target cluster is empty before you
  restart ``mongomirror`` or run ``mongomirror``
  with the :option:`--drop` option.

- If you shut down ``mongomirror`` during the oplog tailing
  stage, you can restart ``mongomirror`` to continue from
  the last oplog record processed. See the
  :mongomirror:option:`--bookmarkFile` option.

Progress Measurement
~~~~~~~~~~~~~~~~~~~~

``mongomirror`` logs its progress to the standard output in
the terminal:

During the initial sync, ``mongomirror`` logs a progress
bar for each collection it copies. For example:

.. code-block:: sh
   :copyable: false

   2016-12-16T17:54:53.638-0800  [#....................]  park.events  2179/34184    (6.4%)
   2016-12-16T17:54:53.638-0800  [#############........]  zoo.animals  29000/49778  (58.3%)

When tailing the oplog, ``mongomirror`` logs the lag time,
in seconds, between the most recent oplog entry on the source and the
last processed oplog entry on the target. For example:

.. code-block:: sh
   :copyable: false

   2016-12-12T16:22:17.027-0800 Current lag from source: 6s

A lag time of 6 seconds means that the last oplog entry
``mongomirror`` processed was 6 seconds behind the most
recent one available on the source.

.. note::

   The amount of time it takes ``mongomirror`` to catch up
   completely may be greater or lesser than 6 seconds, depending on
   how many entries arrive per second.

A lag time of 0 seconds indicates that ``mongomirror`` is
processing entries that arrived less than one second before the latest
oplog entry.

If there are indexes on the source cluster, ``mongomirror`` builds the
same indexes on the target cluster. The progress log shows the start
time and end time of the index building process, but does not display
the iterative progress of the process. To check on the progress
of the index builds, you can either:

- Use the
  :manual:`currentOp </reference/method/db.currentOp/#db.currentOp>`
  command on the primary node of the target cluster. The ``command``
  field shows information about the currently running operation.
  Index building entries look similar to the following:

  .. code-block:: json
     :copyable: false

	 "command" : {
		"createIndexes" : "perfs",
		"indexes" : [
			{
				"key" : {
					"workTitle" : "text"
				},
				"name" : "workTitle_text"
			}
		]...

- Download the :ref:`mongodb logs <mongodb-logs>` for your target
  cluster and check recent entries for index-related lines. Log
  messages related to index building look similar to the following:

  .. code-block:: sh
     :copyable: false

     2018-11-29T16:58:25.018-0800 I INDEX    [conn1] build index on: example.airlines properties: { v: 2, key: { airline: 1.0 }, name: "airline_1", ns: "example.airlines" }

Performance
~~~~~~~~~~~

To avoid contention for network and CPU resources, do not run
``mongomirror`` on the same hosts that provide your replica
set’s mongod instances.

- ``mongomirror`` must have network access to the source
  replica set.

- ``mongomirror`` must have network access to the target
  cluster.

- ``mongomirror`` has approximately the same performance
  impact on your source replica set as a secondary:

  - For the initial sync stage, the load scales with the size of your
    data set.

  - Once an initial sync completes, the load scales with oplog
    gigabytes used per hour.

Considerations
--------------

Source MongoDB Deployment
~~~~~~~~~~~~~~~~~~~~~~~~~

- The source MongoDB deployment must be a replica set. If the source is
  a standalone MongoDB deployment, convert to a replica set first to
  use ``mongomirror``.
  See :manual:`Convert a Standalone to a Replica Set </tutorial/convert-standalone-to-replica-set/>`.

- The source replica set must run MongoDB version 2.6 through 4.0.

- The source MongoDB replica set cannot be an
  ``M0`` (Free Tier) or ``M2/M5`` shared cluster.

- You should not change the ``featureCompatibilityVersion`` flag while
  ``mongomirror`` is running.

- You should not make any namespace changes during the migration
  process, such as using the
  :dbcommand:`renameCollection <dbcmd.renameCollection>` command
  or executing an aggregation pipeline that includes the
  :pipeline:`$out <pipe.out>` aggregation stage.

  Contact MongoDB Support if you believe renaming or dropping
  a collection needs to occur during the migration process. From
  the |service| UI, click :guilabel:`Support` to open a
  support ticket.

Target |service| Cluster
~~~~~~~~~~~~~~~~~~~~~~~~

- The target |service| cluster must be a replica set, but cannot be an
  ``M0`` (Free Tier) or ``M2/M5`` shared cluster.

- The target |service| cluster MongoDB version must be the same as
  or later than the source cluster MongoDB version.

- For the initial sync stage of ``mongomirror``, the target
  |service| cluster should be empty or you should run
  ``mongomirror`` with the :option:`--drop` option.

- The target |service| cluster must include in its whitelist either

  - The public IP address of the server on which
    ``mongomirror`` is running, or

  - If set up for VPC peering, either the peer’s VPC CIDR block (or a
    subset) or the peer VPC’s Security Group.

- ``mongomirror`` automatically connects to MongoDB
  |service| over |tls-ssl|.

- You should not change the ``featureCompatibilityVersion`` flag while
  ``mongomirror`` is running.

.. _source-rs-authorization:

Required Access on Source Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the source replica set requires authentication, you must include
user credentials when running :binary:`~bin.mongomirror`. You must
specify a MongoDB user that has the :authrole:`backup` role. If no
such user exists, create the user in your source MongoDB replica set.
For example, if the source replica set uses SCRAM-SHA1
authentication:

#. Connect a :binary:`mongo <bin.mongo>` shell to the primary.

#. Switch to the ``admin`` database and create a user with the
   :authrole:`backup` role.

   .. code-block:: javascript

      use admin
      db.createUser(
        {
          user: "mySourceUser",
          pwd: "mySourceP@$$word",
          roles: [ "backup" ]
        }
      )

.. _destination-authorization:

Required Access on Destination Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You must specify an |service| MongoDB user with the
:authrole:`Atlas admin` role to run :binary:`~bin.mongomirror`.
See :ref:`add-mongodb-users` for documentation on creating an
|service| MongoDB user.

.. _mongomirror-options:

Options
-------

.. include:: /includes/option/option-mongomirror-host.rst
.. include:: /includes/option/option-mongomirror-username.rst
.. include:: /includes/option/option-mongomirror-password.rst
.. include:: /includes/option/option-mongomirror-authenticationDatabase.rst
.. include:: /includes/option/option-mongomirror-authenticationMechanism.rst
.. include:: /includes/option/option-mongomirror-destination.rst
.. include:: /includes/option/option-mongomirror-destinationUsername.rst
.. include:: /includes/option/option-mongomirror-destinationPassword.rst
.. include:: /includes/option/option-mongomirror-drop.rst
.. include:: /includes/option/option-mongomirror-ssl.rst
.. include:: /includes/option/option-mongomirror-sslPEMKeyFile.rst
.. include:: /includes/option/option-mongomirror-sslPEMKeyPassword.rst
.. include:: /includes/option/option-mongomirror-sslCAFile.rst
.. include:: /includes/option/option-mongomirror-sslCRLFile.rst
.. include:: /includes/option/option-mongomirror-sslAllowInvalidHostnames.rst
.. include:: /includes/option/option-mongomirror-sslAllowInvalidCertificates.rst
.. include:: /includes/option/option-mongomirror-gssapiServiceName.rst
.. include:: /includes/option/option-mongomirror-gssapiHostName.rst
.. include:: /includes/option/option-mongomirror-readPreference.rst
.. include:: /includes/option/option-mongomirror-writeConcern.rst
.. include:: /includes/option/option-mongomirror-numParallelCollections.rst
.. include:: /includes/option/option-mongomirror-bypassDocumentValidation.rst
.. include:: /includes/option/option-mongomirror-bookmarkFile.rst
.. include:: /includes/option/option-mongomirror-forceDump.rst
.. include:: /includes/option/option-mongomirror-oplogPath.rst
.. include:: /includes/option/option-mongomirror-httpStatusPort.rst

Examples
--------

Migrate a Replica Set into Atlas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example migrates from a source replica set that does not
require authentication:

.. code-block:: sh

   mongomirror --host  sourceRS/source-host1:27017,source-host2:27017 \
            --destination myAtlasRS/atlas-host1:27017,atlas-host2:27017 \
            --destinationUsername myAtlasUser \
            --destinationPassword myAtlasPwd

To migrate from a source replica set that does not require
authentication, run ``mongomirror`` with the following
options:

- :mongomirror:option:`--host` <sourceReplSet/seed list of members>
- :mongomirror:option:`--destination` <Atlas Cluster>
- :mongomirror:option:`--destinationUsername` <atlasUser>
- :mongomirror:option:`--destinationPassword` <atlasPassword>

For the destination, specify the replica set name followed by a seed
list of members in the following format:

.. code-block:: shell

   <replicaSetName>/<host1>:<port1>,<host2>:<port2>,<host3>:<port3>,...

The specified Atlas user must have the required privileges for
Atlas. The ``Atlas admin`` role provides the required privileges.

Source Replica Set Uses SCRAM-SHA1 Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example migrates from a source replica set that uses
SCRAM-SHA1 authentication:

.. code-block:: sh

   mongomirror --host sourceRS/source-host1:27017,source-host2:27017,source-host3:27017 \
      --username mySourceUser \
      --password mySourcePassword \
      --authenticationDatabase admin \
      --destination myAtlasRS/atlas-host1:27017,atlas-host2:27017 \
      --destinationUsername myAtlasUser \
      --destinationPassword atlasPassw0Rd

To migrate from a source replica set that does uses SCRAM-SHA1
authentication, run ``mongomirror`` with the following
options:

- :mongomirror:option:`--host` <sourceReplSet/seed list of members>
- :mongomirror:option:`--username` <sourceUser>
- :mongomirror:option:`--password` <sourcePassword>
- :mongomirror:option:`--authenticationDatabase` <sourceDatabase>
- :mongomirror:option:`--destination` <Atlas Cluster>
- :mongomirror:option:`--destinationUsername` <atlasUser>
- :mongomirror:option:`--destinationPassword` <atlasPassword>

The source replica set user must have the required access on source
cluster. The ``backup`` role provides the appropriate privileges.

For the destination, specify the replica set name followed by a seed
list of members in the following format:

.. code-block:: shell

   <replicaSetName>/<replicaMember>,<replicaMember>,<replicaMember>,...

The specified Atlas user must have the required access on Atlas. The
``Atlas admin`` role provides the required privileges.

Source Replica Set Requires X509 Client Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example migrates from a source replica set that uses
X.509 authentication:

.. code-block:: sh

   mongomirror --host sourceRS/source-host1:27017,source-host2:27017,source-host3:27017 \
      --username "CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry" \
      --authenticationDatabase '$external' \
      --authenticationMechanism MONGODB-X509 \
      --ssl \
      --sslPEMKeyFile <path-to-my-client-certificate.pem> \
      --sslCAFile <path-to-my-certificate-authority-certificate.pem> \
      --destination myAtlasRS/atlas-host1:27017,atlas-host2:27017 \
      --destinationUsername myAtlasUser \
      --destinationPassword atlasPassw0Rd

To migrate from a source replica set that uses X.509 authentication,
run ``mongomirror`` with the following options:

- :mongomirror:option:`--host` <sourceReplSet/seed list of members>
- :mongomirror:option:`--username` <subject from the client certificate>
- :mongomirror:option:`--authenticationMechanism` ``MONGODB-X509``
- :mongomirror:option:`--authenticationDatabase` ``'$external'``
- :mongomirror:option:`--ssl`
- :mongomirror:option:`--sslPEMKeyFile` <path-to-my-client-certificate.pem>
- :mongomirror:option:`--sslCAFile` <path to root CA PEM file>
- :mongomirror:option:`--destination` <Atlas Cluster>
- :mongomirror:option:`--destinationUsername` <atlasUser>
- :mongomirror:option:`--destinationPassword` <atlasPassword>

The source replica set user must have the required access on source
cluster. The ``backup`` role provides the appropriate privileges.

For the destination, specify the replica set name followed by a seed
list of members in the following format:

.. code-block:: shell

   <replicaSetName>/<replicaMember>,<replicaMember>,<replicaMember>,...

The specified Atlas user must have the required access on Atlas. The
``Atlas admin`` role provides the required privileges.

Source Replica Set Requires Kerberos/GSSAPI Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example migrates from a source replica set that uses
Kerberos authentication:

.. code-block:: sh

   mongomirror --host sourceRS/source-host1:27017,source-host2:27017,source-host3:27017 \
      --username sourceUser/administrator@MYREALM.COM \
      --authenticationDatabase '$external' \
      --authenticationMechanism GSSAPI \
      --destination myAtlasRS/atlas-host1:27017,atlas-host2:27017,atlas-host3:27017 \
      --destinationUsername atlasUser \
      --destinationPassword atlasPass

To migrate from a source replica set that uses X.509 authentication,
run ``mongomirror`` with the following options:

- :mongomirror:option:`--host` <sourceReplSet/seed list of members>
- :mongomirror:option:`--username` <Kerberos user principal>
- :mongomirror:option:`--authenticationDatabase` ``'$external'``
- :mongomirror:option:`--authenticationMechanism` ``GSSAPI``
- :mongomirror:option:`--destination` <Atlas Cluster>
- :mongomirror:option:`--destinationUsername` <atlasUser>
- :mongomirror:option:`--destinationPassword` <atlasPassword>

The source replica set user must have the required access on source
cluster. The ``backup`` role provides the appropriate privileges.

For the destination, specify the replica set name followed by a seed
list of members in the following format:

.. code-block:: shell

   <replicaSetName>/<replicaMember>,<replicaMember>,<replicaMember>,...

The specified Atlas user must have the required access on Atlas. The
``Atlas admin`` role provides the required privileges.

Release Notes
-------------

``mongomirror`` 0.5.1
~~~~~~~~~~~~~~~~~~~~~

This release fixes a bug regarding bad index hints for
:manual:`capped collections </manual/core/capped-collections/>`.

``mongomirror`` 0.5.0
~~~~~~~~~~~~~~~~~~~~~

This release adds the following features and improvements:

- Support for buffering the oplog to disk during initial sync. This
  ensures that the source oplog will not run out of space during the
  migration process. For more information, see the documentation for
  the new :option:`--oplogPath <--oplogPath>` command line option.

- Use Go-native TLS on Windows (instead of OpenSSL 1.0.2n).

- Upgrade to Go 1.11 (from 1.8).

- ``mongomirror`` now removes the ``background`` flag from all indexes
   it creates. Background indexes created on the source cluster will
   be created as foreground indexes on the destination cluster. For
   more information on foreground index builds, see
   :manual:`Index Build Operations on a Populated Collection
   </core/index-creation>`.

``mongomirror`` 0.4.1
~~~~~~~~~~~~~~~~~~~~~

This release fixes an installation error on some Windows hosts.

``mongomirror`` 0.4.0
~~~~~~~~~~~~~~~~~~~~~

This release adds support for MongoDB 4.0 as both a source
and destination for ``mongomirror``.

``mongomirror`` 0.3.1
~~~~~~~~~~~~~~~~~~~~~

This release adds the following features and improvements:

- Support for MongoDB 4.0 as a destination *only* for ``mongomirror``.
- Support for tolerating elections and network errors on the
  destination during initial sync.
- Support for syncing "system.js" collections.
- Use Go-native TLS on MacOS (instead of OpenSSL 0.9.8).
- ``mongomirror`` should ignore no-ops when reporting the latest oplog
   timestamp.

This release also removes support for Debian 7. Debian 7 is EOL and is
not supported by MongoDB 4.0.
