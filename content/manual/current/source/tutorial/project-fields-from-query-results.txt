.. include:: /includes/java-sync-links.rst
.. include:: /includes/java-async-links.rst

.. _read-operations-projection:
.. _projection:
.. _projections:

===================================
Project Fields to Return from Query
===================================

.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: shell, csharp, go, java, python, php, ruby, scala, javascript/typescript, kotlin

.. meta:: 
   :keywords: motor, java sync, java async, reactive streams, code example, node.js, compass, kotlin coroutine
   :description: Limit the data that MongoDB queries return using projection documents to specify or restrict fields.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1

You can query embedded documents in MongoDB by using the following
methods:

.. |atlas-ref| replace:: :ref:`project-fields-atlas-ui`
.. include:: /includes/fact-methods.rst

.. include:: /includes/language-selector-instructions.rst
  
.. tabs-selector:: drivers

By default, queries in MongoDB return all fields in matching documents.
To limit the amount of data that MongoDB sends to applications, you can
include a :term:`projection` document to specify or restrict fields to
return.

.. |query_operations| replace:: query operations with projection

.. include:: /includes/driver-examples/driver-example-query-intro.rst

.. include:: /includes/driver-examples/driver-example-query-42.rst

Return All Fields in Matching Documents
---------------------------------------

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         If you do not specify a :term:`projection` document, the
         :method:`db.collection.find()` method returns all fields in the
         matching documents.

     - id: compass
       content: |
         If you do not specify a :term:`projection` document, Compass
         returns all fields in the matching documents.

     - id: python
       content: |
         If you do not specify a :term:`projection` document, the
         :py:meth:`~pymongo.collection.Collection.find` method returns
         all fields in the matching documents.

     - id: java-sync
       content: |
         If you do not specify a :term:`projection`, the
         com.mongodb.client.MongoCollection.find_ method returns all
         fields in the matching documents.

     - id: java-async
       content: |
         If you do not specify a :term:`projection`, the `com.mongodb.reactivestreams.client.MongoCollection.find
         <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#find(org.bson.conversions.Bson)>`__
         method returns all fields in the matching documents.

     - id: kotlin-coroutine
       content: |
         If you do not specify a :term:`projection` document, the
         `MongoCollection.find() <{+java-api-docs+}/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/find.html>`__ method returns all
         fields in the matching documents.

     - id: nodejs
       content: |
         If you do not specify a :term:`projection` document, the
         :node-api:`find() <Collection.html#find>` method yields all
         fields in the matching documents.

     - id: php
       content: |
         If you do not specify a :term:`projection` document, the
         :phpmethod:`find() <phpmethod.MongoDB\\Collection::find()>`
         method returns all fields in the matching documents

     - id: ruby
       content: |
         If you do not specify a :term:`projection` document, the
         :ruby-api:`find()<Collection.html#find-instance_method>`
         method returns all fields in the matching documents.

     - id: scala
       content: |
         If you do not specify a :term:`projection`, the
         :scala-api:`collection.find()<find[C](filter:org.mongodb.scala.bson.conversions.Bson)(implicite:org.mongodb.scala.bson.DefaultHelper.DefaultsTo[C,TResult],implicitct:scala.reflect.ClassTag[C]):org.mongodb.scala.FindObservable[C]>`
         method returns all fields in the matching documents.

     - id: csharp
       content: |
         If you do not specify a :term:`projection` filter, the
         :csharp-api:`MongoCollection.Find() <M_MongoDB_Driver_MongoCollection_1_Find>`
         method returns all fields in the matching documents.

The following example returns all fields from all documents in the
``inventory`` collection where the ``status`` equals ``"A"``:

.. include:: /includes/driver-examples/driver-example-query-43.rst

The operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT * from inventory WHERE status = "A"

Return the Specified Fields and the ``_id`` Field Only
------------------------------------------------------

A projection can explicitly include several fields by setting the
``<field>`` to ``1`` in the projection document. The following
operation returns all documents that match the query. In the result
set, only the ``item``, ``status`` and, by default, the ``_id`` fields
return in the matching documents.

.. include:: /includes/driver-examples/driver-example-query-44.rst

The operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT _id, item, status from inventory WHERE status = "A"

Suppress ``_id`` Field
----------------------

You can remove the ``_id`` field from the results by setting it to
``0`` in the projection, as in the following example:

.. include:: /includes/driver-examples/driver-example-query-45.rst

The operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT item, status from inventory WHERE status = "A"

.. note::

   With the exception of the ``_id`` field, you cannot combine inclusion
   and exclusion statements in projection documents.

Return All But the Excluded Fields
----------------------------------

Instead of listing the fields to return in the matching document, you
can use a projection to exclude specific fields. The following example
which returns all fields except for the ``status`` and the ``instock``
fields in the matching documents:

.. include:: /includes/driver-examples/driver-example-query-46.rst

.. note::

   With the exception of the ``_id`` field, you cannot combine inclusion
   and exclusion statements in projection documents.

Return Specific Fields in Embedded Documents
--------------------------------------------

You can return specific fields in an embedded document. Use the
:ref:`dot notation <document-dot-notation>` to refer to the embedded
field and set to ``1`` in the projection document.

The following example returns:

- The ``_id`` field (returned by default),
- The ``item`` field,
- The ``status`` field,
- The ``uom`` field in the ``size`` document.

The ``uom`` field remains embedded in the ``size`` document.

.. include:: /includes/driver-examples/driver-example-query-47.rst

You can also specify embedded fields using the nested form. For example, 
``{ item: 1, status: 1, size: { uom: 1 } }``.

Suppress Specific Fields in Embedded Documents
----------------------------------------------

You can suppress specific fields in an embedded document. Use the
:ref:`dot notation <document-dot-notation>` to refer to the embedded
field in the projection document and set to ``0``.

The following example specifies a projection to exclude the ``uom``
field inside the ``size`` document. All other fields are returned in
the matching documents:

.. include:: /includes/driver-examples/driver-example-query-48.rst

You can also specify embedded fields using the nested form. For example, 
``{ size: { uom: 0 } }``.

Projection on Embedded Documents in an Array
--------------------------------------------

Use :ref:`dot notation <document-dot-notation>` to project specific
fields inside documents embedded in an array.

The following example specifies a projection to return:

- The ``_id`` field (returned by default),
- The ``item`` field,
- The ``status`` field,
- The ``qty`` field in the documents embedded in the ``instock`` array.

.. include:: /includes/driver-examples/driver-example-query-49.rst

.. _project-array-elements-in-returned-array:

Project Specific Array Elements in the Returned Array
-----------------------------------------------------

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* operators that you can use to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``{ "instock.0": 1 }`` projection does *not* project the array
         with the first element.

     - id: compass
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

     - id: python
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* operators that you can use to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``{ "instock.0": 1 }`` projection does *not* project the array
         with the first element.

     - id: java-sync
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* operators that you can use to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``include("instock.0")`` projection does *not* project the array
         with the first element.

     - id: java-async
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* operators that you can use to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``include("instock.0")`` projection does *not* project the array
         with the first element.

     - id: kotlin-coroutine
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* operators that you can use to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``include("instock.0")`` projection does *not* project the array
         with the first element.

     - id: nodejs
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* operators that you can use to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``{ "instock.0": 1 }`` projection does *not* project the array
         with the first element.

     - id: php
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* operators that you can use to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``[ "instock.0" => 1 ]`` projection does *not* project the array
         with the first element.
         
     - id: ruby
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* operators that you can use to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``{ "instock.0" => 1 }`` projection does *not* project the array
         with the first element.

     - id: scala
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* operators that you can use to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``include("instock.0")`` projection does *not* project the array
         with the first element.

     - id: csharp
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* operators that you can use to project specific elements
         to include in the returned array.

         For example, the following operation will not project the array
         with the first element:

         .. code-block:: c#

            Builders<BsonDocument>.Projection.Include("instock.0")

     - id: go
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* operators that you can use to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``include("instock.0")`` projection does *not* project the array
         with the first element.

Project Fields with Aggregation Expressions
-------------------------------------------

You can specify :ref:`aggregation expressions <aggregation-expressions>`
in a query projection. Aggregation expressions let you project new
fields and modify the values of existing fields.

For example, the following operation uses aggregation expressions to
override the value of the ``status`` field, and project new fields
``area`` and ``reportNumber``.

.. note::

   The following example uses MongoDB Shell syntax. For driver examples
   of projection with aggregation, see your :driver:`driver
   documentation </>`.

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript
      
      db.inventory.find(
         { },
         {
            _id: 0,
            item: 1,
            status: {
               $switch: {
                  branches: [
                     {
                        case: { $eq: [ "$status", "A" ] },
                        then: "Available"
                     },
                     {
                        case: { $eq: [ "$status", "D" ] },
                        then: "Discontinued"
                     },
                  ],
                  default: "No status found"
               }
            },
            area: {
               $concat: [
                  { $toString: { $multiply: [ "$size.h", "$size.w" ] } },
                  " ",
                  "$size.uom"
               ]
            },
            reportNumber: { $literal: 1 }
         }
      )

   .. output::
      :language: javascript

      [
         {
            item: 'journal',
            status: 'Available',
            area: '294 cm',
            reportNumber: 1
         },
         {
            item: 'planner',
            status: 'Discontinued',
            area: '685.5 cm',
            reportNumber: 1
         },
         {
            item: 'notebook',
            status: 'Available',
            area: '93.5 in',
            reportNumber: 1
         },
         {
            item: 'paper',
            status: 'Discontinued',
            area: '93.5 in',
            reportNumber: 1
         },
         {
            item: 'postcard',
            status: 'Available',
            area: '152.5 cm',
            reportNumber: 1
         }
      ]

.. _project-fields-atlas-ui:

Project Fields to Return from a Query with {+atlas+}
-------------------------------------------------------------------

The example in this section uses the :atlas:`sample movies dataset 
</sample-data/sample-mflix/>`. To learn how to load the sample dataset 
into your {+atlas+} deployment, see :atlas:`Load Sample Data 
</sample-data/#std-label-load-sample-data>`.

To project fields to return from a query in {+atlas+}, follow these
steps:

.. procedure:: 
   :style: normal

   .. include:: /includes/atlas-nav/steps-db-deployments-page.rst

   .. step:: Navigate to the collection

      .. include:: /includes/steps-nav-atlas-sample-movies.rst

   .. step:: Specify the Filter field
      
      a. Click :guilabel:`More Options` on the right side of the
         :guilabel:`Filter` field.
      #. Specify the query filter.

         .. include:: /includes/steps-specify-query-filter.rst

         .. code-block:: javascript

            { year: 1924 }

   .. step:: Specify the fields to project

      Specify the field(s) to return in the query results.

      Copy the following project document into the :guilabel:`Project`
      bar:

      .. code-block:: javascript

         { title: 1, plot: 1 }

   .. step:: Click Apply

      This query filter returns the following fields for all documents
      in the ``sample_mflix.movies`` collection where the ``year``
      field matches ``1924``:

      - ``_id``
      - ``title``
      - ``plot``

      {+atlas+} returns the ``_id`` field by default. To omit the
      ``_id`` field, copy the following project document
      into the :guilabel:`Project` bar and click :guilabel:`Apply`:

      .. code-block:: javascript

         { title: 1, plot: 1, _id: 0 }

Additional Considerations
-------------------------

MongoDB enforces additional restrictions with regards to projections. 
See :limit:`Projection Restrictions` for details.

.. seealso::

   - :ref:`find-projection`

   - :doc:`/tutorial/query-documents`
