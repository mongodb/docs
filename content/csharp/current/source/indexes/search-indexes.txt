.. _csharp-atlas-search-indexes:
.. _search-indexes:

================================================
MongoDB Search and MongoDB Vector Search Indexes
================================================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, full text, atlas deployment, text search, embeddings

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to create and manage **{+search+} and
{+vector-search+} indexes**. These indexes allow you to use the following
features:

- :ref:`{+search+} <csharp-atlas-search>`: Perform fast, full-text
  searches

- :ref:`{+vector-search+} <csharp-atlas-vector-search>`: Perform
  semantic (similarity) searches on vector embeddings

{+search+} and {+vector-search+} indexes specify which fields to index,
specify how these fields are indexed, and set other optional
configurations.

.. note::

   {+search+} index-management methods run asynchronously. The
   driver methods can return a result before the desired action
   completes on the server.

This guide explains how to perform the following actions to manage your
{+search+} and {+vector-search+} indexes:

- :ref:`csharp-create-model`
- :ref:`csharp-create-search-index`
- :ref:`csharp-create-search-indexes`
- :ref:`csharp-list-search-index`
- :ref:`csharp-update-search-index`
- :ref:`csharp-drop-search-index`

.. note:: Sample Data

   The examples in this guide use the ``embedded_movies`` collection
   in the ``sample_mflix`` database, which is one of the Atlas sample
   datasets. For instructions on importing the Atlas sample data, see
   :atlas:`Load Sample Data </sample-data>` in the Atlas documentation.

.. _csharp-create-model:

Create a Search Index Model
---------------------------

To create a {+search+} or {+vector-search+} index, you must first build a
``CreateSearchIndexModel`` instance that sets your index specifications.

The ``CreateSearchIndexModel`` has the following properties:

.. list-table::
   :header-rows: 1
   :widths: 25 25 50

   * - Property
     - Type
     - Description

   * - ``definition``
     - ``BsonDocument``
     - Specifies the index definition. If you omit this setting, the
       driver creates a {+search+} index with dynamic mappings.

   * - ``name``
     - ``string``
     - Sets the index name. If you omit this setting, the
       driver sets the name to ``default``.

   * - ``type``
     - ``SearchIndexType``
     - Sets the index type. If you omit this setting, the
       driver creates a {+search+} index by default.

To learn more about {+search+} field mappings, see :atlas:`Define Field Mappings
</atlas-search/define-field-mappings/>` in the Atlas documentation.

To learn more about defining {+vector-search+} indexes, see
:atlas:`How to Index Fields for Vector Search
</atlas-vector-search/vector-search-type/>` in the Atlas documentation.

Example Models
~~~~~~~~~~~~~~

The following example creates a ``CreateSearchIndexModel`` instance to provide
specifications for an index named ``search_idx``. The code specifies static
mappings of the ``title`` and ``released`` fields:

.. literalinclude:: /includes/fundamentals/code-examples/SearchIndexes.cs
   :start-after: begin-as-model
   :end-before: end-as-model
   :language: csharp
   :dedent:

The following example creates a ``CreateSearchIndexModel`` instance to provide
specifications for an index named ``vs_idx``. The code specifies the
embedding path as  ``plot_embedding``, indexes ``1536`` dimensions, and
uses the ``"euclidean"`` vector similarity function:

.. literalinclude:: /includes/fundamentals/code-examples/SearchIndexes.cs
   :start-after: begin-avs-model
   :end-before: end-avs-model
   :language: csharp
   :dedent:

.. _csharp-create-search-index:

Create a Search Index
---------------------

You can create a {+search+} or {+vector-search+} index on a collection by
calling the ``SearchIndexes.CreateOne()`` method on an ``IMongoCollection``
instance. This method accepts an index model as a parameter, specified
in a ``CreateSearchIndexModel`` instance.

Example
~~~~~~~

The following example creates a {+search+} index on the
``embedded_movies`` collection. The code creates a ``CreateSearchIndexModel``
that sets the index name and enables dynamic mapping. Then, the code
passes the ``CreateSearchIndexModel`` instance to the ``SearchIndexes.CreateOne()``
method to create the {+search+} index:

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-examples/SearchIndexes.cs
      :start-after: begin-atlas-create-one
      :end-before: end-atlas-create-one
      :language: csharp
      :emphasize-lines: 11
      :dedent:

   .. output::
      :language: console
      :visible: false

      Created {+search+} index:
      "example_index"

.. _csharp-create-search-indexes:

Create Multiple Search Indexes
------------------------------

You can create multiple {+search+} and {+vector-search+} indexes
by calling the ``SearchIndexes.CreateMany()`` method on an ``IMongoCollection``
instance. This method accepts an ``IEnumerable`` of
``CreateSearchIndexModel`` instances as a parameter.

Example
~~~~~~~

This example performs the following actions:

1. Creates a ``CreateSearchIndexModel`` instance that specifies a {+search+} 
   index named ``as_idx``

#. Creates a ``CreateSearchIndexModel`` instance that specifies a {+vector-search+}
   index named ``vs_idx``

#. Passes a ``List`` of both ``CreateSearchIndexModel`` instances to
   the ``SearchIndexes.CreateMany()`` method

#. Creates the {+search+} and {+vector-search+} indexes on the
   ``embedded_movies`` collection

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-examples/SearchIndexes.cs
      :start-after: begin-atlas-create-many
      :end-before: end-atlas-create-many
      :language: csharp
      :emphasize-lines: 31
      :dedent:

   .. output::
      :language: console
      :visible: false

      Created Search indexes:
      as_idx vs_idx

.. _csharp-list-search-index:

List Search Indexes
-------------------

You can access information about a collection's existing {+search+}
and {+vector-search+} indexes by calling the ``SearchIndexes.List()``
method on the collection.

Example
~~~~~~~

The following example accesses information about the {+search+} and
{+vector-search+} indexes created in the :ref:`csharp-create-search-indexes`
section of this page. The code calls the ``SearchIndexes.List()``
method and prints a list of the {+search+} and {+vector-search+} indexes
on the collection:

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-examples/SearchIndexes.cs
      :start-after: begin-atlas-list
      :end-before: end-atlas-list
      :language: csharp
      :dedent:

   .. output::
      :language: console
      :visible: false

      { "id": "...", "name": "as_idx", "status": "READY", "queryable":
      true, "latestDefinitionVersion": {...}, "latestDefinition": {
      "mappings": { "dynamic": true } }, "statusDetail": [...] }

      { "id": "...", "name": "vs_idx", "type": "vectorSearch", "status":
      "READY", "queryable": true, ..., "latestDefinition": { "fields": [{
      "type": "vector", "path": "plot_embedding", "numDimensions": 1536,
      "similarity": "euclidean" }] }, "statusDetail": [...] }

.. _csharp-update-search-index:

Update a Search Index
---------------------

You can update a {+search+} or {+vector-search+} index by calling the
``SearchIndexes.Update()`` method on an ``IMongoCollection`` instance. This
method accepts the following parameters:

- Name of the index to update
- Modified index definition document

Example
~~~~~~~

The following example updates the Vector Search index named ``vs_index``
created in the :ref:`csharp-create-search-indexes` section of this page. The code
creates a new index definition document that instructs the index to use
``"dotProduct"`` as the vector similarity function. Then, the code calls
the ``SearchIndexes.Update()`` method to update the index:

.. literalinclude:: /includes/fundamentals/code-examples/SearchIndexes.cs
   :start-after: begin-atlas-update
   :end-before: end-atlas-update
   :language: csharp
   :emphasize-lines: 16
   :dedent:

.. _csharp-drop-search-index:

Delete a Search Index
---------------------

You can delete a {+search+} or {+vector-search+} index by calling the
``SearchIndexes.DropOne()`` method on an ``IMongoCollection`` instance. This
method accepts the name of the index to delete as a parameter.

Example
~~~~~~~

The following example deletes the {+search+} index named ``example_index``
created in the :ref:`csharp-create-search-index` section of this page. The code
passes the index name to the ``SearchIndexes.DropOne()`` method to delete the index:

.. literalinclude:: /includes/fundamentals/code-examples/SearchIndexes.cs
   :start-after: begin-atlas-drop
   :end-before: end-atlas-drop
   :language: csharp
   :dedent:
   
Additional Information
----------------------

To learn about other indexes you can create by using the {+driver-short+}, see the
:ref:`csharp-indexes` guide.

To learn more about {+search+}, see the following Atlas documentation:

- :atlas:`{+search+} Best Practices </atlas-search/best-practices/>`
- :atlas:`Tune {+search+} Performance </atlas-search/performance/>`
- :atlas:`{+search+} M0, M2, and M5 Limitations </atlas-search/limitations/>`
- :atlas:`FAQ: {+search+} </atlas-search/faq/>`

To learn more about {+vector-search+}, see the following Atlas documentation:

- :atlas:`Improve Vector Search Performance </atlas-vector-search/tune-vector-search/>`
- :atlas:`{+vector-search+} Quick Start </atlas-vector-search/tutorials/vector-search-quick-start/>`
- :atlas:`How to Measure the Accuracy of Your Query Results </atlas-vector-search/evaluate-results/>`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the methods and types mentioned in this
guide, see the following API documentation:

- `CreateSearchIndexModel <{+api-root+}/MongoDB.Driver/MongoDB.Driver.CreateSearchIndexModel.html>`__
- `SearchIndexType <{+api-root+}/MongoDB.Driver/MongoDB.Driver.SearchIndexType.html>`__
- `CreateOne() <{+api-root+}/MongoDB.Driver/MongoDB.Driver.Search.IMongoSearchIndexManager.CreateOne.html>`__
- `CreateMany() <{+api-root+}/MongoDB.Driver/MongoDB.Driver.Search.IMongoSearchIndexManager.CreateMany.html>`__
- `List() <{+api-root+}/MongoDB.Driver/MongoDB.Driver.Search.IMongoSearchIndexManager.List.html>`__
- `Update() <{+api-root+}/MongoDB.Driver/MongoDB.Driver.Search.IMongoSearchIndexManager.Update.html>`__
- `DropOne() <{+api-root+}/MongoDB.Driver/MongoDB.Driver.Search.IMongoSearchIndexManager.DropOne.html>`__
