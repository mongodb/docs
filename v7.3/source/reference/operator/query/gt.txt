===
$gt
===

.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: shell

.. meta::
   :description: Use the $gt operator to select documents where the value of the specified field is greater than (>) the specified value.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. query:: $gt

   :query:`$gt` selects those documents where the value of the
   specified field is greater than (i.e. ``>``) the specified value.

   .. include:: /includes/fact-type-bracketing.rst

Compatibility
-------------

.. |operator-method| replace:: ``$gt``

.. include:: /includes/fact-compatibility.rst

Syntax
------

The :query:`$gt` operator has the following form:

.. code-block:: javascript

   { field: { $gt: value } }

Examples
--------

The following examples use the ``inventory`` collection. Create the
collection:

.. include:: /includes/examples-create-inventory.rst

Match Document Fields
~~~~~~~~~~~~~~~~~~~~~

Select all documents in the ``inventory`` collection where ``quantity``
is greater than ``20``:

.. code-block:: javascript

   db.inventory.find( { quantity: { $gt: 20 } } )

Example output:

.. code-block:: javascript

   {
     _id: ObjectId("61ba25cbfe687fce2f042414"),
     item: 'nuts',
     quantity: 30,
     carrier: { name: 'Shipit', fee: 3 }
   },
   {
     _id: ObjectId("61ba25cbfe687fce2f042415"),
     item: 'bolts',
     quantity: 50,
     carrier: { name: 'Shipit', fee: 4 }
   }

Perform an Update Based on Embedded Document Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example sets the ``price`` field based on a :query:`$gt`
comparison against a field in an embedded document.

.. code-block:: javascript

   db.inventory.updateOne(
      { "carrier.fee": { $gt: 2 } }, { $set: { "price": 9.99 } }
   )

Example output:

.. code-block:: javascript

   {
     _id: ObjectId("61ba3ec9fe687fce2f042417"),
     item: 'nuts',
     quantity: 30,
     carrier: { name: 'Shipit', fee: 3 },
     price: 9.99
   },
   {
     _id: ObjectId("61ba3ec9fe687fce2f042418"),
     item: 'bolts',
     quantity: 50,
     carrier: { name: 'Shipit', fee: 4 }
   },
   {
     _id: ObjectId("61ba3ec9fe687fce2f042419"),
     item: 'washers',
     quantity: 10,
     carrier: { name: 'Shipit', fee: 1 }
   }

This :method:`~db.collection.updateOne()` operation searches for an
embedded document, ``carrier``, with a subfield named ``fee``. It sets
``{ price: 9.99 }`` in the first document it finds where ``fee`` has a
value greater than 2.

To set the value of the ``price`` field in *all* documents where
``carrier.fee`` is greater than 2, use
:method:`~db.collection.updateMany()`.

.. seealso::

   - :method:`~db.collection.find()`
   - :update:`$set`

