# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/sharding-shard-key.txt:10
# 4c1f05a4470a4d78a9bd3d91ef4b2021
msgid "Shard Keys"
msgstr ""

#: ../source/core/sharding-shard-key.txt:14
# 9a852a9626b14756a8697b2baf5204f6
msgid "The shard key determines the distribution of the collection's :term:`documents <document>` among the cluster's :term:`shards <shard>`. The shard key is either an indexed :term:`field` or an indexed compound field that exists in every document in the collection."
msgstr ""

#: ../source/core/sharding-shard-key.txt:20
# 74e9c5dc87a64ee681f51046c2789757
msgid "MongoDB partitions data in the collection using ranges of shard key values. Each range, or :term:`chunk`, defines a non-overlapping range of shard key values. MongoDB distributes the chunks, and their documents, among the shards in the cluster."
msgstr ""

#: ../source/core/sharding-shard-key.txt:27
# 65bbd682ea844599885e454584161d3d
msgid "When a chunk grows beyond the :ref:`chunk size <sharding-chunk-size>`, MongoDB attempts to :term:`split <split>` the chunk into smaller chunks, always based on ranges in the shard key."
msgstr ""

#: ../source/core/sharding-shard-key.txt:32
# b5f46d52eca74c1ca60855f3e45bdfb9
msgid "Considerations"
msgstr ""

#: ../source/core/sharding-shard-key.txt:34
# c89ea7684269400285c59ce1d0d96670
msgid "Shard keys are immutable and cannot be changed after insertion. See the :ref:`system limits for sharded cluster <limits-sharding>` for more information."
msgstr ""

#: ../source/core/sharding-shard-key.txt:38
# 5f230161d79f4d938491754133284f02
msgid "The index on the shard key **cannot** be a :ref:`multikey index <index-type-multikey>`."
msgstr ""

#: ../source/core/sharding-shard-key.txt:44
# fef1e8e8979b4496ad2844a8e38bd57a
msgid "Hashed Shard Keys"
msgstr ""

#: ../source/core/sharding-shard-key.txt:48
# d6cdd4bbfd264cca910cc2b0c7462490
msgid "Hashed shard keys use a :ref:`hashed index <index-hashed-index>` of a single field as the :term:`shard key` to partition data across your sharded cluster."
msgstr ""

#: ../source/core/sharding-shard-key.txt:52
# cc78879bc3c241b6aa096a5b7d721293
msgid "The field you choose as your hashed shard key should have a good cardinality, or large number of different values. Hashed keys work well with fields that increase monotonically like :term:`ObjectId` values or timestamps."
msgstr ""

#: ../source/core/sharding-shard-key.txt:57
# c117bb1df2304811a5b4cc027b480df3
msgid "If you shard an empty collection using a hashed shard key, MongoDB will automatically create and migrate chunks so that each shard has two chunks.  You can control how many chunks MongoDB will create with the ``numInitialChunks`` parameter to :dbcommand:`shardCollection` or by manually creating chunks on the empty collection using the :dbcommand:`split` command."
msgstr ""

#: ../source/core/sharding-shard-key.txt:64
# 3694f8975d3f4f909034e302db579854
msgid "To shard a collection using a hashed shard key, see :doc:`/tutorial/shard-collection-with-a-hashed-shard-key`."
msgstr ""

#: ../source/includes/tip-applications-do-not-need-to-compute-hashes.rst:0
# d1cb1c40d2284cce9ea6fcfc90d7b58a
msgid "Tip"
msgstr ""

#: ../source/includes/tip-applications-do-not-need-to-compute-hashes.rst:3
# 483d382cd55c4d6aa90a193c77834536
msgid "MongoDB automatically computes the hashes when resolving queries using hashed indexes.  Applications do **not** need to compute hashes."
msgstr ""

#: ../source/core/sharding-shard-key.txt:70
# b60f218e576744bb8790988676707d4d
msgid "Impacts of Shard Keys on Cluster Operations"
msgstr ""

#: ../source/core/sharding-shard-key.txt:72
# ca42bcfbcc04454aab00bd92853654c8
msgid "The shard key affects write and query performance by determining how the MongoDB partitions data in the cluster and how effectively the :program:`mongos` instances can direct operations to the cluster. Consider the following operational impacts of shard key selection:"
msgstr ""

#: ../source/core/sharding-shard-key.txt:82
# 7d39ee4334544a75a893baf2aebcfb5b
msgid "Write Scaling"
msgstr ""

#: ../source/core/sharding-shard-key.txt:84
# 2e9ad67bc0114f78a27a5603d7eed954
msgid "Some possible shard keys will allow your application to take advantage of the increased write capacity that the cluster can provide, while others do not. Consider the following example where you shard by the values of the default :term:`_id` field, which is :term:`ObjectId`."
msgstr ""

#: ../source/core/sharding-shard-key.txt:89
# 491463493d604b0792732bd2ad073d4a
msgid "MongoDB generates ``ObjectId`` values upon document creation to produce a unique identifier for the object. However, the most significant bits of data in this value represent a time stamp, which means that they increment in a regular and predictable pattern. Even though this value has :ref:`high cardinality <sharding-shard-key-cardinality>`, when using this, *any date, or other monotonically increasing number* as the shard key, all insert operations will be storing data into a single chunk, and therefore, a single shard. As a result, the write capacity of this shard will define the effective write capacity of the cluster."
msgstr ""

#: ../source/core/sharding-shard-key.txt:100
# 7a1724f9fc474c3e97975de11035493c
msgid "A shard key that increases monotonically will not hinder performance if you have a very low insert rate, or if most of your write operations are :method:`~db.collection.update()` operations distributed through your entire data set. Generally, choose shard keys that have *both* high cardinality and will distribute write operations across the *entire cluster*."
msgstr ""

#: ../source/core/sharding-shard-key.txt:107
# 98db1c88d95143f9ac8c9d53f518c247
msgid "Typically, a computed shard key that has some amount of \"randomness,\" such as ones that include a cryptographic hash (i.e. MD5 or SHA1) of other content in the document, will allow the cluster to scale write operations. However, random shard keys do not typically provide :ref:`query isolation <sharding-shard-key-query-isolation>`, which is another important characteristic of shard keys."
msgstr ""

#: ../source/core/sharding-shard-key.txt:114
# 9748cfbbc7214208a857c22796557f28
msgid "MongoDB makes it possible to shard a collection on a hashed index. This can greatly improve write scaling. See :doc:`/tutorial/shard-collection-with-a-hashed-shard-key`."
msgstr ""

#: ../source/core/sharding-shard-key.txt:122
# e36bbb5c16e442668ea19213c79899b1
msgid "Querying"
msgstr ""

#: ../source/core/sharding-shard-key.txt:124
# 9d0de496422c49ae932bf21e53b51cf7
msgid "The :program:`mongos` provides an interface for applications to interact with sharded clusters that hides the complexity of :term:`data partitioning <partition>`. A :program:`mongos` receives queries from applications, and uses metadata from the :ref:`config server <sharding-config-server>`, to route queries to the :program:`mongod` instances with the appropriate data. While the :program:`mongos` succeeds in making all querying operational in sharded environments, the :term:`shard key` you select can have a profound affect on query performance."
msgstr ""

#: ../source/core/sharding-shard-key.txt:134
# e6f08af534fa4892a36e7812c2239857
msgid "The :doc:`/core/sharded-cluster-query-router` and :ref:`config server <sharding-config-server>` sections for a more general overview of querying in sharded environments."
msgstr ""

#: ../source/core/sharding-shard-key.txt:142
# d13d9b67a5ec48da940107539535a0dd
msgid "Query Isolation"
msgstr ""

#: ../source/core/sharding-shard-key.txt:144
# dba86a504a784d1a8e2546e59557ba7a
msgid "Generally, the fastest queries in a sharded environment are those that :program:`mongos` will route to a single shard, using the :term:`shard key` and the cluster meta data from the :ref:`config server <sharding-config-server>`. For queries that don't include the shard key, :program:`mongos` must query all shards, wait for their responses and then return the result to the application. These \"scatter/gather\" queries can be long running operations."
msgstr ""

#: ../source/core/sharding-shard-key.txt:152
# eb99badc294d4d428f9b00087d368d6f
msgid "If your query includes the first component of a compound shard key [#shard-key-index]_, the :program:`mongos` can route the query directly to a single shard, or a small number of shards, which provides better performance. Even if you query values of the shard key that reside in different chunks, the :program:`mongos` will route queries directly to specific shards."
msgstr ""

#: ../source/core/sharding-shard-key.txt:159
# fb74f9448c53417e974ac00a5b53ada5
msgid "To select a shard key for a collection:"
msgstr ""

#: ../source/core/sharding-shard-key.txt:161
# f747c882b1b34cc4b110c1e87de356fa
msgid "determine the most commonly included fields in queries for a given application"
msgstr ""

#: ../source/core/sharding-shard-key.txt:164
# af012c54dd574f2a8f63004be243a7de
msgid "find which of these operations are most performance dependent."
msgstr ""

#: ../source/core/sharding-shard-key.txt:168
# 8fbfc773fbb9490dbfc21e031df649fb
msgid "If this field has low cardinality (i.e not sufficiently selective) you should add a second field to the shard key making a compound shard key. The data may become more splittable with a compound shard key."
msgstr ""

#: ../source/core/sharding-shard-key.txt:0
# eddbf438ab1f44adb744407c01c4f51a
msgid "See"
msgstr ""

#: ../source/core/sharding-shard-key.txt:176
# 1a79307ee3bf4b73ac1ab224ad0cbb1e
msgid "In many ways, you can think of the shard key a cluster-wide index. However, be aware that sharded systems cannot enforce cluster-wide unique indexes *unless* the unique field is in the shard key. Consider the :doc:`/core/indexes` page for more information on indexes and compound indexes."
msgstr ""

#: ../source/core/sharding-shard-key.txt:183
# bfe52f9373e04f898dda900cc2c9135b
msgid "Sorting"
msgstr ""

#: ../source/core/sharding-shard-key.txt:185
# fffdff7112d14fb3bd9ffd2dc4b370ef
msgid "In sharded systems, the :program:`mongos` performs a merge-sort of all sorted query results from the shards. See :doc:`/core/sharded-cluster-query-router` and :ref:`index-sort` for more information."
msgstr ""

#: ../source/core/sharding-shard-key.txt:191
# 71884a8652364f879fa19bedd45daf6c
msgid "Indivisible Chunks"
msgstr ""

#: ../source/core/sharding-shard-key.txt:193
# 16e6a4626cf94c3b9b622e8f6e7711fc
msgid "An insufficiently granular shard key can result in chunks that are \"unsplittable\". See :ref:`shard-key-selection-divisible` for more information."
msgstr ""

#: ../source/core/sharding-shard-key.txt:198
# 7b0609f471dd454f8741c21fd2d5135e
msgid "Additional Information"
msgstr ""

#: ../source/core/sharding-shard-key.txt:200
# ed79a062366447e8a103d9d0a3782ce7
msgid ":doc:`/tutorial/choose-a-shard-key`"
msgstr ""

#: ../source/core/sharding-shard-key.txt:202
# f9eef48f8e8d4d4e945bea3d39a61fc7
msgid ":doc:`/tutorial/shard-collection-with-a-hashed-shard-key`."
msgstr ""

#: ../source/core/sharding-shard-key.txt:1
#: ../source/core/sharding-shard-key.txt:1
#: ../source/core/sharding-shard-key.txt:78
#: ../source/core/sharding-shard-key.txt:138
# bce7ba3fb2f041dd86241ca4334e01ea
# bce7ba3fb2f041dd86241ca4334e01ea
# fab7be87c9e243b5bf5ca3a2593178bc
# f89fb6684a054753a366bd2d2158518c
msgid "shard key"
msgstr ""

#: ../source/core/sharding-shard-key.txt:1
# bce7ba3fb2f041dd86241ca4334e01ea
msgid "sharding"
msgstr ""

#: ../source/core/sharding-shard-key.txt:78
# fab7be87c9e243b5bf5ca3a2593178bc
msgid "write scaling"
msgstr ""

#: ../source/core/sharding-shard-key.txt:138
# f89fb6684a054753a366bd2d2158518c
msgid "query isolation"
msgstr ""

