===========================
$mergeObjects (aggregation)
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $mergeObjects

   .. versionadded:: 3.6

   Combines multiple documents into a single document.

   - When used as a :pipeline:`$group` stage accumulator,
     :expression:`$mergeObjects` has the following form:

     .. code-block:: javascript

        { $mergeObjects: <document> }

   - When used in other expressions, including in the
     :pipeline:`$group` stage but not as an accumulator:

     .. code-block:: javascript

        { $mergeObjects: [ <document1>, <document2>, ... ] }

   The ``<document>`` can be any valid :ref:`expression
   <aggregation-expressions>` that resolves to a document.

Behavior
--------

- :expression:`$mergeObjects` ignores ``null`` operands. If all the
  operands to :expression:`$mergeObjects` resolves to null,
  :expression:`$mergeObjects` returns an empty document ``{ }``.

- :expression:`$mergeObjects` overwrites the field values as it merges
  the documents. If documents to merge include the same field name, the
  field, in the resulting document, has the value from the last
  document merged for the field.

.. list-table::
   :header-rows: 1
   :widths: 65 35
   :class: border-table

   * - Example
     - Results

   * - .. code-block:: json
          :copyable: false

          { $mergeObjects: [ { a: 1 }, null ] }

     - .. code-block:: json
          :copyable: false

          { a: 1 }

   * - .. code-block:: json
          :copyable: false

          { $mergeObjects: [ null, null ] }

     - .. code-block:: json
          :copyable: false

          { }

   * - .. code-block:: json
          :copyable: false

          {
             $mergeObjects: [ 
                { a: 1 }, 
                { a: 2, b: 2 },
                { a: 3, c: 3 } 
             ] 
          }

     - .. code-block:: json
          :copyable: false

          { a: 3, b: 2, c: 3 }

   * - .. code-block:: json
          :copyable: false

          {
            $mergeObjects: [
              { a: 1 }, 
              { a: 2, b: 2 }, 
              { a: 3, b: null, c: 3 }
            ] 
          }

     - .. code-block:: json
          :copyable: false

          { a: 3, b: null, c: 3 }

Examples
--------

``$mergeObjects``
~~~~~~~~~~~~~~~~~

Create a collection ``orders`` with the following documents:

.. cssclass:: copyable-code

.. code-block:: javascript

   db.orders.insert([
     { "_id" : 1, "item" : "abc", "price" : 12, "ordered" : 2 },
     { "_id" : 2, "item" : "jkl", "price" : 20, "ordered" : 1 }
   ])

Create another collection ``items`` with the following documents:

.. cssclass:: copyable-code

.. code-block:: javascript

   db.items.insert([
     { "_id" : 1, "item" : "abc", description: "product 1", "instock" : 120 },
     { "_id" : 2, "item" : "def", description: "product 2", "instock" : 80 },
     { "_id" : 3, "item" : "jkl", description: "product 3", "instock" : 60 }
   ])

The following operation first uses the :pipeline:`$lookup` stage to
join the two collections by the ``item`` fields and then uses
:expression:`$mergeObjects` in the :pipeline:`$replaceRoot` to merge
the joined documents from ``items`` and ``orders``:

.. cssclass:: copyable-code

.. code-block:: javascript

   db.orders.aggregate([
      {
         $lookup: {
            from: "items",
            localField: "item",    // field in the orders collection
            foreignField: "item",  // field in the items collection
            as: "fromItems"
         }
      },
      {
         $replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: [ "$fromItems", 0 ] }, "$$ROOT" ] } }
      },
      { $project: { fromItems: 0 } }
   ])

The operation returns the following documents:

.. code-block:: javascript

   { "_id" : 1, "item" : "abc", "description" : "product 1", "instock" : 120, "price" : 12, "ordered" : 2 }
   { "_id" : 2, "item" : "jkl", "description" : "product 3", "instock" : 60, "price" : 20, "ordered" : 1 }

``$mergeObjects`` as an Accumulator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create a collection ``sales`` with the following documents:

.. cssclass:: copyable-code

.. code-block:: javascript

   db.sales.insert( [
      { _id: 1, year: 2017, item: "A", quantity: { "2017Q1": 500, "2017Q2": 500 } },
      { _id: 2, year: 2016, item: "A", quantity: { "2016Q1": 400, "2016Q2": 300, "2016Q3": 0, "2016Q4": 0 } } ,
      { _id: 3, year: 2017, item: "B", quantity: { "2017Q1": 300 } },
      { _id: 4, year: 2016, item: "B", quantity: { "2016Q3": 100, "2016Q4": 250 } } 
   ] )

The following operation uses :expression:`$mergeObjects` as a
accumulator in a :pipeline:`$group` stage that groups documents by the
``item`` field:

.. note::

   When used as an accumulator, :expression:`$mergeObjects` operator
   accepts a single operand.

.. cssclass:: copyable-code

.. code-block:: javascript

   db.sales.aggregate( [
      { $group: { _id: "$item", mergedSales: { $mergeObjects: "$quantity" } } }
   ])

The operation returns the following documents:

.. code-block:: javascript

   { "_id" : "B", "mergedSales" : { "2017Q1" : 300, "2016Q3" : 100, "2016Q4" : 250 } }
   { "_id" : "A", "mergedSales" : { "2017Q1" : 500, "2017Q2" : 500, "2016Q1" : 400, "2016Q2" : 300, "2016Q3" : 0, "2016Q4" : 0 } }
   
.. note::

   If the documents to merge include the same field name, the field in
   the resulting document has the value from the last document merged
   for the field.

