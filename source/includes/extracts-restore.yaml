ref: restore-flows
edition: onprem
content: |

   Restore Flows
   -------------

   Regardless of the delivery method and restore type, |onprem|'s restore flow
   follows a consistent pattern: when you request a restore, the |http-service|
   calls out to the Backup Daemon, which prepares the snapshot you will receive,
   then either the user downloads the files from the |http-service|, or
   the Backup Daemon securely copies the files to the destination server.

   The following sections describe the restore flows for both snapshot restores
   and point-in-time restores, for each delivery and file format option.

   HTTP Restore
   ~~~~~~~~~~~~

   Snapshot
   ````````

   .. include:: /images/http-pull-snapshot-restore.rst

   With the HTTP PULL snapshot restore, the Backup Daemon simply creates
   a link to the appropriate snapshot in the Backup Blockstore Database.
   When the user clicks the download link, they download the snapshot from
   the |http-service|, which streams the file out of the
   Backup Blockstore.

   This restore method has the advantage of taking up **no** space on the
   server hosting the Backup Daemon: the file passes directly from the
   Backup Blockstore to the destination server.

   Point-In-Time
   `````````````

   .. include:: /images/http-pull-point-in-time-restore.rst

   The HTTP PULL point-in-time restore follows the same pattern as the HTTP
   PULL snapshot restore, with added steps for applying the oplog. When the
   user requests the restore, the Backup Daemon retrieves the snapshot that
   immediately precedes the point in time and writes that snapshot to
   disk. The Backup Daemon then retrieves oplog entries from the Oplog
   Store Database and applies them, creating a custom snapshot from that point
   in time. The Daemon then writes the snapshot back to the Backup
   Blockstore. Finally, when the user clicks the download link, the user
   downloads the snapshot from the |http-service|, which streams the file
   out of the Backup Blockstore.

   This restore method requires that you have adequate space on the server
   hosting the Backup Daemon for the snapshot files and oplog.

   Archive SCP Restore
   ~~~~~~~~~~~~~~~~~~~

   Snapshot
   ````````

   .. include:: /images/scp-snapshot-archive.rst

   For a snapshot restore, with SCP archive delivery, the Backup Daemon
   simply retrieves the snapshot from the Backup Blockstore and writes it
   to its disk. The Backup Daemon then combines and compresses the snapshot into a
   ``.tar.gz`` archive and securely copies the archive to the destination
   server.

   This restore method requires that you have adequate space on the server
   hosting the Backup Daemon for the snapshot files and archive.

   Point-In-Time
   `````````````

   .. include:: /images/scp-point-in-time-archive.rst

   The point-in-time restore with SCP archive delivery follows the same
   pattern as the snapshot restore, but with added steps for applying the
   oplog. 

   When the user requests the restore, the Backup Daemon retrieves
   the snapshot that immediately precedes the point in time and writes
   that snapshot to disk. The Backup Daemon then retrieves oplog entries
   from the Oplog Store Database and applies them, creating a custom snapshot
   for that point in time. The Backup Daemon then combines and compresses
   the snapshot into a ``tar.gz`` archive and securely copies the archive
   to the destination server.

   This restore method requires that you have adequate space on the server
   hosting the Backup Daemon for the snapshot files, oplog, and archive.

   .. _scp-individual-files:

   Individual Files SCP Restore
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Snapshot
   ````````

   .. include:: /images/scp-snapshot-individual-files.rst

   For a snapshot restore, with SCP individual files delivery, the Backup
   Daemon simply retrieves the snapshot from the Backup Blockstore and
   securely copies the data files to the target directory on the destination server.

   This restore method also has the advantage of taking up no space on the
   server hosting the Backup Daemon: the file passes directly from the
   Backup Blockstore to the destination server. The destination server
   requires only sufficient space for the uncompressed data files. The data
   *is* compressed during transmission.

   Point-In-Time
   `````````````

   .. include:: /images/scp-point-in-time-individual-files.rst

   The point-in-time restore with SCP individual files delivery follows the same
   pattern as the snapshot restore, but with added steps for applying the
   oplog. 

   When the user requests the restore, the Backup Daemon retrieves the
   snapshot that immediately precedes the point in time and writes that
   snapshot to disk. The Backup Daemon then retrieves oplog entries from
   the Oplog Store Database and applies them, creating a custom snapshot for
   that point in time. The Backup Daemon then securely copies the data
   files to the target directory on the destination server

   This restore method also requires that you have adequate space on the
   server hosting the Backup Daemon for the snapshot files and oplog. The
   destination server requires only sufficient space for the uncompressed
   data files. The data *is* compressed during transmission.
---
ref: restore-flows
edition: cloud
content: ""
...
