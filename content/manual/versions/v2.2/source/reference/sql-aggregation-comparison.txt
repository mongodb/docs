================================
SQL to Aggregation Mapping Chart
================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. all of the included table files are built from corresponding .yaml
   files in the includes directory. To change the content of the
   tables, edit those files.

The :doc:`aggregation pipeline </applications/aggregation>` allows
MongoDB to provide native aggregation capabilities that corresponds to
many common data aggregation operations in SQL. If you're new to
MongoDB you might want to consider the :doc:`/faq` section for a
selection of common questions.

The following table provides an overview of common SQL aggregation
terms, functions, and concepts and the corresponding MongoDB
:ref:`aggregation operators <aggregation-pipeline-operator-reference>`:

.. list-table::
   :header-rows: 1

   * - SQL Terms, Functions, and Concepts

     - MongoDB Aggregation Operators

   * - WHERE

     - :pipeline:`$match`

   * - GROUP BY

     - :pipeline:`$group`

   * - HAVING

     - :pipeline:`$match`

   * - SELECT

     - :pipeline:`$project`

   * - ORDER BY

     - :pipeline:`$sort`

   * - LIMIT

     - :pipeline:`$limit`

   * - SUM()

     - :group:`$sum`

   * - COUNT()

     - :group:`$sum`

   * - join

     - No direct corresponding operator; *however*, the
       :pipeline:`$unwind` operator allows for somewhat similar
       functionality, but with fields embedded within the document.

.. seealso:: :doc:`/reference/sql-comparison`

Examples
--------

The following table presents a quick reference of SQL aggregation
statements and the corresponding MongoDB statements. The examples in
the table assume the following conditions:

- The SQL examples assume *two* tables, ``orders`` and
  ``order_lineitem`` that join by the ``order_lineitem.order_id`` and
  the ``orders.id`` columns.

- The MongoDB examples assume *one* collection ``orders`` that contain
  documents of the following prototype:

  .. code-block:: javascript

     {
       cust_id: "abc123",
       ord_date: ISODate("2012-11-02T17:04:11.102Z"),
       status: 'A',
       price: 50,
       items: [ { sku: "xxx", qty: 25, price: 1 },
                { sku: "yyy", qty: 25, price: 1 } ]
     }


- The MongoDB statements prefix the names of the fields from the
  :term:`documents <document>` in the collection ``orders`` with a
  ``$`` character when they appear as operands to the aggregation
  operations.

.. list-table::
   :header-rows: 1
   :class: border-table

   * - SQL Example

     - MongoDB Example

     - Description

   * - .. code-block:: sql
          :copyable: false


          SELECT COUNT(*) AS count
          FROM orders


     - .. code-block:: javascript
          :copyable: false
          :emphasize-lines: 3-6

          db.orders.aggregate( [
             {
               $group: {
                  _id: null,
                  count: { $sum: 1 }
               }
             }
          ] )


     - 
       Count all records
       from ``orders``


   * - .. code-block:: sql
          :copyable: false

          SELECT SUM(price) AS total
          FROM orders


     - .. code-block:: javascript
          :emphasize-lines: 3-6
          :copyable: false

          db.orders.aggregate( [
             {
               $group: {
                  _id: null,
                  total: { $sum: "$price" }
               }
             }
          ] )


     -
       Sum the ``price`` field
       from ``orders``


   * - .. code-block:: sql
          :copyable: false

          SELECT cust_id,
                 SUM(price) AS total
          FROM orders
          GROUP BY cust_id


     - .. code-block:: javascript
          :copyable: false
          :emphasize-lines: 3-6

          db.orders.aggregate( [
             {
               $group: {
                  _id: "$cust_id",
                  total: { $sum: "$price" }
               }
             }
          ] )


     - 
       For each unique ``cust_id``,
       sum the ``price`` field.


   * - .. code-block:: sql
          :copyable: false

          SELECT cust_id,
                 SUM(price) AS total
          FROM orders
          GROUP BY cust_id
          ORDER BY total


     - .. code-block:: javascript
          :emphasize-lines: 3-6,8
          :copyable: false

          db.orders.aggregate( [
             {
               $group: {
                  _id: "$cust_id",
                  total: { $sum: "$price" }
               }
             },
             { $sort: { total: 1 } }
          ] )


     - For each unique ``cust_id``,
       sum the ``price`` field,
       results sorted by sum.


   * - .. code-block:: sql
          :copyable: false

          SELECT cust_id,
                 ord_date,
                 SUM(price) AS total
          FROM orders
          GROUP BY cust_id,
                   ord_date


     - .. code-block:: javascript
          :emphasize-lines: 3-12
          :copyable: false

          db.orders.aggregate( [
             {
               $group: {
                  _id: {
                     cust_id: "$cust_id",
                     ord_date: {
                         month: { $month: "$ord_date" },
                         day: { $dayOfMonth: "$ord_date" },
                         year: { $year: "$ord_date"}
                     }
                  },
                  total: { $sum: "$price" }
               }
             }
          ] )


     - For each unique
       ``cust_id``, ``ord_date`` grouping,
       sum the ``price`` field.
       Excludes the time portion of the date.


   * - .. code-block:: sql
          :copyable: false

          SELECT cust_id,
                 count(*)
          FROM orders
          GROUP BY cust_id
          HAVING count(*) > 1


     - .. code-block:: javascript
          :emphasize-lines: 3-6,8
          :copyable: false

          db.orders.aggregate( [
             {
               $group: {
                  _id: "$cust_id",
                  count: { $sum: 1 }
               }
             },
             { $match: { count: { $gt: 1 } } }
          ] )


     - For ``cust_id`` with multiple records,
       return the ``cust_id`` and
       the corresponding record count.


   * - .. code-block:: sql
          :copyable: false

          SELECT cust_id,
                 ord_date,
                 SUM(price) AS total
          FROM orders
          GROUP BY cust_id,
                   ord_date
          HAVING total > 250


     - .. code-block:: javascript
          :emphasize-lines: 3-12,15
          :copyable: false

          db.orders.aggregate( [
             {
               $group: {
                  _id: {
                     cust_id: "$cust_id",
                     ord_date: {
                        month: { $month: "$ord_date" },
                        day: { $dayOfMonth: "$ord_date" },
                        year: { $year: "$ord_date"}
                     }
                  },
                  total: { $sum: "$price" }
               }
             },
             { $match: { total: { $gt: 250 } } }
          ] )


     - For each unique ``cust_id``, ``ord_date``
       grouping, sum the ``price`` field
       and return only where the
       sum is greater than 250.
       Excludes the time portion of the date.


   * - .. code-block:: sql
          :copyable: false

          SELECT cust_id,
                 SUM(price) as total
          FROM orders
          WHERE status = 'A'
          GROUP BY cust_id


     - .. code-block:: javascript
          :emphasize-lines: 2,4-7
          :copyable: false

          db.orders.aggregate( [
             { $match: { status: 'A' } },
             {
               $group: {
                  _id: "$cust_id",
                  total: { $sum: "$price" }
               }
             }
          ] )


     - For each unique ``cust_id``
       with status ``A``,
       sum the ``price`` field.


   * - .. code-block:: sql
          :copyable: false

          SELECT cust_id,
                 SUM(price) as total
          FROM orders
          WHERE status = 'A'
          GROUP BY cust_id
          HAVING total > 250


     - .. code-block:: javascript
          :emphasize-lines: 2-9
          :copyable: false

          db.orders.aggregate( [
             { $match: { status: 'A' } },
             {
               $group: {
                  _id: "$cust_id",
                  total: { $sum: "$price" }
               }
             },
             { $match: { total: { $gt: 250 } } }
          ] )


     - For each unique ``cust_id``
       with status ``A``,
       sum the ``price`` field and return
       only where the
       sum is greater than 250.


   * - .. code-block:: sql
          :copyable: false

          SELECT cust_id,
                 SUM(li.qty) as qty
          FROM orders o,
               order_lineitem li
          WHERE li.order_id = o.id
          GROUP BY cust_id


     - .. code-block:: javascript
          :emphasize-lines: 2-8
          :copyable: false

          db.orders.aggregate( [
             { $unwind: "$items" },
             {
               $group: {
                  _id: "$cust_id",
                  qty: { $sum: "$items.qty" }
               }
             }
          ] )


     - For each unique ``cust_id``,
       sum the corresponding
       line item ``qty`` fields
       associated with the
       orders.


   * - .. code-block:: sql
          :copyable: false

          SELECT COUNT(*)
          FROM (SELECT cust_id,
                       ord_date
                FROM orders
                GROUP BY cust_id,
                         ord_date)
                as DerivedTable

     - .. code-block:: javascript
          :emphasize-lines: 3-12,15-18
          :copyable: false

          db.orders.aggregate( [
             {
               $group: {
                  _id: {
                     cust_id: "$cust_id",
                     ord_date: {
                        month: { $month: "$ord_date" },
                        day: { $dayOfMonth: "$ord_date" },
                        year: { $year: "$ord_date"}
                     }
                  }
               }
             },
             {
               $group: {
                  _id: null,
                  count: { $sum: 1 }
               }
             }
          ] )


     - Count the number of distinct
       ``cust_id``, ``ord_date`` groupings.
       Excludes the time portion of the date.

.. seealso::

   - :doc:`/reference/sql-comparison`
   - :method:`db.collection.aggregate()`

