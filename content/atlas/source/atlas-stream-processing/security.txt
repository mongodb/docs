.. _atlas-sp-security:

========
Security
========

.. default-domain:: mongodb

.. meta::
   :keywords: atlas stream processing, streaming data, data stream, security, roles, actions
   :description: Learn key concepts of Atlas Stream Processing security

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

|service| provides a system for managing user permissions at the
:ref:`organization, project <user-roles>`, and :ref:`database
<mongodb-users-roles-and-privileges>` levels. {+atlas-sp+} extends
this system with additional roles and privileges specific to stream
processing tasks, as well as the ability to restrict user permissions
to specific {+spw+}s.

Organization and Project Access
-------------------------------

Users manage {+spw+}s and their associated connection registries at
the project level. {+atlas-sp+} provides the :authrole:`Project Stream
Processing Owner` role for this purpose. A user with this role can
perform any :ref:`{+spw+} or connection registry management
<atlas-sp-manage-spi>` action, and manage the
databases and database users within the project. Assign this role to a
user to enable them to perform all the actions necessary to configure
an {+atlas-sp+} project without granting any unnecessary permissions
to features in accordance with the principle of least privilege.

If necessary, you can perform any of the actions authorized by the
``Project Stream Processing Owner`` role as a user with either the
``Project Owner`` or ``Organization Owner`` roles.

{+SPW+} Access
-----------------------------------------------

You can access an existing {+spw+} and :ref:`manage stream processors
<streams-manage-processor>` as a :ref:`database user <mongodb-users>`,
analogous to how you access an |service| {+cluster+}. The roles and
actions assigned to your database users determine which operations
they can perform on stream processors within a {+spw+}. {+atlas-sp+}
provides the following privilege actions:

..
   Comment: Setting up these references to actions as links requires
   a separate PR in Server docs. I will pursue this as part of the
   definition of done for DOCSP-35256, but please review this content
   with the assumption that these will be added to server docs on
   privilege actions.

- ``processStreamProcessor``
- ``createStreamProcessor``
- ``startStreamProcessor``
- ``stopStreamProcessor``
- ``dropStreamProcessor``
- ``listStreamProcessors``
- ``sampleStreamProcessor``
- ``streamProcessorStats``
- ``listConnections``

You can assign exactly those privilege actions to a database user or
:ref:`custom role <mongodb-roles>` that you need. Alternatively, a
database user with the :atlasrole:`atlasAdmin` or
:atlasrole:`readWriteAnyDatabase` can perform all of these actions.

.. _atlas-sp-security-networking:

Networking
~~~~~~~~~~

{+atlas-sp+} supports connections to both {+service+} {+clusters+} and
external streaming data sources such as {+kafka+}. Connections within
{+service+} do not require manual configuration. To connect to an
external streaming data source, you must add {+service+} IP addresses
to your external streaming data source's access list.

To identify the necessary {+service+} IP addresses, run the following
command:

.. code-block:: sh
   :copyable: true

   curl -H 'Accept: application/vnd.atlas.2023-11-15+json' -s \
   'https://cloud.mongodb.com/api/atlas/v2/unauth/controlPlaneIPAddresses'

This returns a list of available {+service+} IP addresses, grouped by
provider and region. Identify all outbound IP addresses for the
provider-region pair in which the target {+spw+} is deployed, and add
these to your external data source's access list. To learn more, see
:ref:`atlas-add-inbound-ips`.

When you configure a connection to an external streaming data source,
you can choose between access over public IP addresses, or over a
:ref:`VPC peering <vpc-peering>` connection. To learn more, see
:ref:`atlas-sp-manage-connection-add`.

Restricting Access to Specific {+spw+}s
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, a user with {+atlas-sp+} privilege actions can perform the
associated operations on all {+spw+}s. You can restrict the
application of these privileges to specific {+spw+}s.

.. procedure::
   :style:normal

   .. include:: /includes/nav/steps-db-access.rst

   .. step:: Click :guilabel:`Edit` in the row of the user whose
      permissions you want to modify.

   .. step:: In the modal window, toggle the switch labeled
      :guilabel:`Restrict Access to Specific Clusters
      /Federated Database Instances/Stream Processing Workspaces` on.

   .. step:: Find the names of the {+spw+}s for which you want to grant
      the user privileges. Check the box next to a name to grant the
      user privileges for that {+spw+}. Uncheck the box to deny the user
      privileges for that {+spw+}

   .. step:: Click :guilabel:`Update User`.

Execution Profiles
------------------

You can configure the database user role that you use when connecting
to an {+service+} database as either a :pipeline:`$source` or a
:pipeline:`$merge` sink. This allows you to prevent
{+atlas-sp+}-specific database users from gaining indirect access to
the cluster hosting that database through the credentials of the
elevated-privilege {+service+} user that configures the {+spw+} and its
connections.

.. note::

   In accordance with the principle of least privilege, define a
   custom role with only those privileges a user needs to perform
   their desired operations.

.. procedure::
   :style:normal

   .. include:: /includes/nav/steps-stream-processing.rst

   .. step:: In the pane of the {+spw+} you want to configure, click
      :guilabel:`Configure`.

   .. step:: Click the :guilabel:`Connection Registry` tab. In the row
      of the {+service+} database connection you want to configure, click
      :icon-fa5:`pencil-alt`.

   .. step:: From the :guilabel:`Execute As` drop-down menu, select the
      role to use when connecting to the database.

   .. step:: Click :guilabel:`Save changes`.

Auditing
--------

{+atlas-sp+} auditing lets administrators track authentication and
entity management events on their {+spw+}s. Each time an auditable
event occurs on a given {+spw+}, {+atlas-sp+} writes that event to the
log for that {+spw+}. A log persists for the lifetime of the {+spw+}
to which it belongs, and {+atlas-sp+} never truncates old events. If
you delete a {+spw+}, the log belonging to that {+spw+} persists for
an additional 30 days.

.. note:

   {+atlas-sp+} audit logs conform to `OCSF schema
   <https://schema.ocsf.io>`__ classes

To download audit logs for your {+spw+}, see :ref:`Download Audit Logs
<atlas-sp-manage-spi-audit>`.

{+atlas-sp+} supports auditing the following authentication events:

.. list-table::
   :widths: 35 65
   :header-rows: 1

   * - Event
     - Description

   * - Successful Authentication
     - Occurs when a user successfully connects to a {+spw+}

   * - Failed Authentication
     - Occurs when a user fails to connect to a {+spw+}

   * - Connection Termination
     - Occurs when a user closes their connection

{+atlas-sp+} supports auditing the following entity management events:

.. list-table::
   :widths: 35 65
   :header-rows: 1

   * - startStreamProcessor
     - Occurs when a user starts a stream processor

   * - createStreamProcessor
     - Occurs when a user creates a stream processor

   * - stopStreamProcessor
     - Occurs when a user stops a stream processor

   * - dropStreamProcessor
     - Occurs when a user deletes a stream processor

   * - .process()
     - Occurs when a user issues a :ref:`.process()
       <atlas-sp-manage-processor-interactive>` call

   * - .sample()
     - Occurs when a user issues a :ref:`.sample()
       <atlas-sp-manage-processor-sample>` call

   * - Audit log accessed
     - Occurs when a user attempts to download the audit log

