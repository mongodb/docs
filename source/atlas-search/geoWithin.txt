.. _geowithin-ref:

=========
geoWithin
=========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Definition
----------

.. expression:: geoWithin

   The ``geoWithin`` operator supports querying geographic points
   within a given geometry. Only points are returned, even if
   ``indexShapes`` value is ``true`` in the
   :ref:`index definition <bson-data-types-geo>`.

   You can query points within a:

   - Circle
   - Bounding box
   - Polygon

   .. include:: /includes/fact-atlas-search-geo-coordinates.rst

.. _geowithin-syntax:

Syntax
------

``geoWithin`` has the following syntax:

.. code-block:: javascript

   {
     "$search": {
        "index": <index name>, // optional, defaults to "default"
        "geoWithin": {
           "path": "<field-to-search>",
           "box | circle | geometry": <object>,
           "score": <score-options>
        }
     }
   }

.. _geowithin-options:

Options
-------

``geoWithin`` uses the following terms to construct a query:

.. list-table::
   :header-rows: 1
   :widths: 10 20 60 10

   * - Field
     - Type
     - Description
     - Necessity

   * - ``box``
     - object
     - Object that specifies the bottom left and top right
       :manual:`GeoJSON </reference/geojson/>` points of a box to
       search within. The object takes the following fields:

       - ``bottomLeft`` - Bottom left GeoJSON :manual:`point
         </reference/geojson/#point>`.
       - ``topRight`` - Top right GeoJSON :manual:`point
         </reference/geojson/#point>`.

       To learn how to specify GeoJSON data inside a GeoJSON object, 
       see :manual:`GeoJSON Objects </reference/geojson/>`.

       Either ``box``, ``circle``, or ``geometry`` is required.

     - conditional

   * - ``circle``
     - object
     - Object that specifies the center point and the radius in meters
       to search within. The object contains the following
       :manual:`GeoJSON </reference/geojson/>` fields:

       - ``center`` - Center of the circle specified as a GeoJSON
         :ref:`point <geojson-point>`.
       - ``radius`` - Radius, which is a number, specified in
         meters. Value must be greater than or equal to ``0``.

       To learn how to specify GeoJSON data inside a GeoJSON object, 
       see :manual:`GeoJSON Objects </reference/geojson/>`.

       Either ``circle``, ``box``, or ``geometry`` is required.
     - conditional

   * - ``geometry``
     - GeoJSON object
     - :manual:`GeoJSON </reference/geojson/>` object that specifies
       the :ref:`MultiPolygon <geojson-multipolygon>` or
       :ref:`Polygon <geojson-polygon>` to search
       within. The polygon must be specified as a closed loop where
       the last position is the same as the first position.

       .. include:: /includes/fact-fts-geo-intersection.rst

       To learn how to specify GeoJSON data inside a GeoJSON object, 
       see :manual:`GeoJSON Objects </reference/geojson/>`.

       Either ``geometry``, ``box``, or ``circle`` is required.
     - conditional

   * - ``path``
     - string or array of strings
     - Indexed :ref:`geo <bson-data-types-geo>` type field or fields to
       search. See :ref:`Path Construction <ref-path>`.
     - yes

   * - ``score``
     - object
     - Score assigned to matching search results. The :ref:`score
       <scoring-ref>` in the results is always ``1``. You can modify
       the score using the following options:

       - ``boost``: multiply the result score by the given number.
       - ``constant``: replace the result score with the given number.

       For information on using ``score`` in your query, see
       :ref:`scoring-ref`.
     - no

.. _geowithin-egs:

Examples
--------

The following examples use the ``listingsAndReviews`` collection in the
``sample_airbnb`` database. If you have the :ref:`sample dataset
<available-sample-datasets>` on your cluster, you can create a custom
|fts| index for :ref:`geo <bson-data-types-geo>` type and run the
example queries on your cluster. 

.. include:: /includes/admonitions/get-started-atlas-search.rst

You can use any of the following :ref:`sample datasets 
<available-sample-datasets>` for running |fts| queries with the 
``geoWithin`` operator:

- :ref:`sample-airbnb`
- :ref:`sample-geospatial`
- :ref:`sample-restaurants`
- :ref:`Sample Training Dataset Trips Collection <training-trips>`

Use the following sample index definition for
indexing the ``address.location`` field in the ``listingsAndReviews``
collection:

.. code-block:: json
   :linenos:

   {
     "mappings": {
       "fields": {
         "address": {
           "fields": {
             "location": {
               "type": "geo"
             }
           },
           "type": "document"
         }
       }
     }
   }

.. _geowithin-box-eg:

``box`` Example
~~~~~~~~~~~~~~~

The following query uses the ``geoWithin`` operator with
the ``box`` field to search for
properties within a bounding box in Australia. 

The query includes a:

- :pipeline:`$limit` stage to limit the output to ``3`` results.
- :pipeline:`$project` stage to exclude all fields except ``name`` and
  ``address``.

.. include:: /includes/fact-fts-index-default.rst

.. code-block:: javascript
   :linenos:

   db.listingsAndReviews.aggregate([
     {
       "$search": {
         "geoWithin": {
           "path": "address.location",
           "box": {
             "bottomLeft": {
               "type": "Point",
               "coordinates": [112.467, -55.050]
             },
             "topRight": {
               "type": "Point",
               "coordinates": [168.000, -9.133]
             }
           }
         }
       }
     },
     {
       $limit: 3
     },
     {
       $project: {
         "_id": 0,
         "name": 1,
         "address": 1
       }
     }
   ])

The query returns the following results:

.. code-block:: json
   :linenos:
   :copyable: false

   {
     "name" : "Surry Hills Studio - Your Perfect Base in Sydney",
     "address" : {
       "street" : "Surry Hills, NSW, Australia",
       "suburb" : "Darlinghurst",
       "government_area" : "Sydney",
       "market" : "Sydney",
       "country" : "Australia",
       "country_code" : "AU",
       "location" : {
         "type" : "Point",
         "coordinates" : [ 151.21554, -33.88029 ],
         "is_location_exact" : true
       }
     }
   }
   {
     "name" : "Sydney Hyde Park City Apartment (checkin from 6am)",
     "address" : {
       "street" : "Darlinghurst, NSW, Australia",
       "suburb" : "Darlinghurst",
       "government_area" : "Sydney",
       "market" : "Sydney",
       "country" : "Australia",
       "country_code" : "AU",
       "location" : {
         "type" : "Point",
         "coordinates" : [ 151.21346, -33.87603 ],
         "is_location_exact" : false
       }
     }
   }
   {
     "name" : "THE Place to See Sydney's FIREWORKS",
     "address" : {
       "street" : "Rozelle, NSW, Australia",
       "suburb" : "Lilyfield/Rozelle",
       "government_area" : "Leichhardt",
       "market" : "Sydney",
       "country" : "Australia",
       "country_code" : "AU",
       "location" : {
         "type" : "Point",
         "coordinates" : [ 151.17956, -33.86296 ],
         "is_location_exact" : true
       }
     }
   }

.. _geowithin-circle-eg:

``circle`` Example
~~~~~~~~~~~~~~~~~~

The following query uses the ``geoWithin`` operator with the ``circle``
field to search for properties within one mile radius of specified 
coordinates in Canada.

The query includes a:

- :pipeline:`$limit` stage to limit the output to ``3`` results
- :pipeline:`$project` stage to exclude all fields except ``name``
  and ``address``.

.. include:: /includes/fact-fts-index-default.rst

.. code-block:: javascript
   :linenos:

   db.listingsAndReviews.aggregate([
     {
       "$search": {
         "geoWithin": {
           "circle": {
             "center": {
               "type": "Point",
               "coordinates": [-73.54, 45.54]
             },
             "radius": 1600
           },
           "path": "address.location"
         }
       }
     },
     {
       $limit: 3
     },
     {
       $project: {
         "_id": 0,
         "name": 1,
         "address": 1
       }
     }
   ])

The query returns the following results:

.. code-block:: json
   :linenos:
   :copyable: false

   {
     "name" : "Ligne verte - à 15 min de métro du centre ville.",
     "address" : {
       "street" : "Montréal, Québec, Canada",
       "suburb" : "Hochelaga-Maisonneuve",
       "government_area" : "Mercier-Hochelaga-Maisonneuve",
       "market" : "Montreal",
       "country" : "Canada",
       "country_code" : "CA",
       "location" : {
         "type" : "Point",
         "coordinates" : [ -73.54949, 45.54548 ],
         "is_location_exact" : false
       }
     }
   }
   {
     "name" : "Belle chambre à côté Metro Papineau",
     "address" : {
       "street" : "Montréal, QC, Canada",
       "suburb" : "Gay Village",
       "government_area" : "Ville-Marie",
       "market" : "Montreal",
       "country" : "Canada",
       "country_code" : "CA",
       "location" : {
         "type" : "Point",
         "coordinates" : [ -73.54985, 45.52797 ],
         "is_location_exact" : false
       }
     }
   }
   {
     "name" : "L'IDÉAL, ( à 2 min du métro Pie-IX ).",
     "address" : {
       "street" : "Montréal, Québec, Canada",
       "suburb" : "Mercier-Hochelaga-Maisonneuve",
       "government_area" : "Mercier-Hochelaga-Maisonneuve",
       "market" : "Montreal",
       "country" : "Canada",
       "country_code" : "CA",
       "location" : {
         "type" : "Point",
         "coordinates" : [ -73.55208, 45.55157 ],
         "is_location_exact" : true
       }
     }
   }

.. _geowithin-geometry-eg:

``geometry`` Examples
~~~~~~~~~~~~~~~~~~~~~

The following examples use the ``geoWithin`` operator with the
``geometry`` field to search for properties in Hawaii. The ``type`` field
specifies whether the area is a GeoJSON :ref:`Polygon <geojson-polygon>` or 
:ref:`MultiPolygon <geojson-multipolygon>`.

The queries include a: 

- :pipeline:`$limit` stage to limit the output to ``3`` results.
- :pipeline:`$project` stage to
  exclude all fields except ``name`` and ``address``.

.. include:: /includes/fact-fts-index-default.rst

.. tabs::

   .. tab:: Polygon Example
      :tabid: polygon

      .. code-block:: javascript
        :linenos:

         db.listingsAndReviews.aggregate([
           {
             "$search": {
               "geoWithin": {
                 "geometry": {
                   "type": "Polygon",
                   "coordinates": [[[ -161.323242, 22.512557 ],
                                  [ -152.446289, 22.065278 ],
                                  [ -156.09375, 17.811456 ],
                                  [ -161.323242, 22.512557 ]]]
                 },
                 "path": "address.location"
               }
             }
           },
           {
             $limit: 3
           },
           {
             $project: {
               "_id": 0,
               "name": 1,
               "address": 1
             }
           }
         ])

      The query returns the following results:

      .. code-block:: json
         :linenos:
         :copyable: false

         {
           "name" : "Ocean View Waikiki Marina w/prkg",
           "address" : {
             "street" : "Honolulu, HI, United States",
             "suburb" : "Oʻahu",
             "government_area" : "Primary Urban Center",
             "market" : "Oahu",
             "country" : "United States",
             "country_code" : "US",
             "location" : {
               "type" : "Point",
               "coordinates" : [ -157.83919, 21.28634 ],
               "is_location_exact" : true
             }
           }
         }
         {
           "name" : "Kailua-Kona, Kona Coast II 2b condo",
           "address" : {
             "street" : "Kailua-Kona, HI, United States",
             "suburb" : "Kailua/Kona",
             "government_area" : "North Kona",
             "market" : "The Big Island",
             "country" : "United States",
             "country_code" : "US",
             "location" : {
               "type" : "Point",
               "coordinates" : [ -155.96445, 19.5702 ],
               "is_location_exact" : true
             }
           }
         }
         {
           "name" : "LAHAINA, MAUI! RESORT/CONDO BEACHFRONT!! SLEEPS 4!",
           "address" : {
             "street" : "Lahaina, HI, United States",
             "suburb" : "Maui",
             "government_area" : "Lahaina",
             "market" : "Maui",
             "country" : "United States",
             "country_code" : "US",
             "location" : {
               "type" : "Point",
               "coordinates" : [ -156.68012, 20.96996 ],
               "is_location_exact" : true
             }
           }
         }

   .. tab:: MultiPolygon Example
      :tabid: multipolygon

      .. code-block:: javascript
         :linenos:

         db.listingsAndReviews.aggregate([
           {
             "$search": {
               "geoWithin": {
                 "geometry": {
                   "type": "MultiPolygon",
                   "coordinates": [
                         [[[-157.8412413882,21.2882235819],
                         [-157.8607925468,21.2962046205],
                         [-157.8646640634,21.3077019651],
                         [-157.862776699,21.320776283],
                         [-157.8341758705,21.3133826738],
                         [-157.8349985678,21.3000822569],
                         [-157.8412413882,21.2882235819]]],
                         [[[-157.852898124,21.301208833],
                         [-157.8580050499,21.3050871833],
                         [-157.8587346108,21.3098050385],
                         [-157.8508811028,21.3119240258],
                         [-157.8454308541,21.30396767],
                         [-157.852898124,21.301208833]]]
                   ]
                 },
                 "path": "address.location"
               }
             }
           },
           {
             $limit: 3
           },
           {
             $project: {
               "_id": 0,
               "name": 1,
               "address": 1
             }
           }
         ])

      The query returns the following results:

      .. code-block:: json
         :linenos:
         :copyable: false

         {
           "name" : "Heart of Honolulu, 2BD gem! Free Garage Parking!",
           "address" : {
             "street" : "Honolulu, HI, United States",
             "suburb" : "Makiki/Lower Punchbowl/Tantalus",
             "government_area" : "Primary Urban Center",
             "market" : "Oahu",
             "country" : "United States",
             "country_code" : "US",
             "location" : {
               "type" : "Point",
               "coordinates" : [ -157.84343, 21.30852 ],
               "is_location_exact" : false
             }
           }
         }
         {
           "name" : "Private Studio closed to town w/ compact parking",
           "address" : {
             "street" : "Honolulu, HI, United States",
             "suburb" : "Oʻahu",
             "government_area" : "Primary Urban Center",
             "market" : "Oahu",
             "country" : "United States",
             "country_code" : "US",
             "location" : {
               "type" : "Point",
               "coordinates" : [ -157.85228, 21.31184 ],
               "is_location_exact" : true
             }
           }
         }
         {
           "name" : "Comfortable Room (2) at Affordable Rates",
           "address" : {
             "street" : "Honolulu, HI, United States",
             "suburb" : "Oʻahu",
             "government_area" : "Primary Urban Center",
             "market" : "Oahu",
             "country" : "United States",
             "country_code" : "US",
             "location" : {
               "type" : "Point",
               "coordinates" : [ -157.83889, 21.29776 ],
               "is_location_exact" : false
             }
           }
         }
