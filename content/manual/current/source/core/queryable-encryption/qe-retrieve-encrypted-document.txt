.. facet::
   :name: programming_language
   :values: csharp, go, java, javascript/typescript, python, shell

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: queryable encryption, in-use encryption, code example, node.js, compass, java sync

.. _qe-query-encrypted-document:

=======================================
Query a Document with Encrypted Fields
=======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This guide shows you how to use a {+qe+}-enabled application to retrieve
a document that has encrypted fields.

After you complete the steps in this guide, you should be able to use
your application to query data in encrypted fields, and to decrypt those 
fields as an authorized user.

Before You Start
----------------

:ref:`Create an encrypted collection and insert documents
<qe-create-encrypted-collection>` before continuing.

.. tabs-selector:: drivers

Procedure
---------

.. procedure::

   .. step:: Query an Encrypted Field with Equality

      If you enabled equality queries on an encrypted field, you can retrieve
      documents that have a specified value in that field.
      
      The following example performs an equality query on an
      encrypted field and prints the decrypted data:

      .. tabs-drivers::

         .. tab::
            :tabid: shell

            .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
               :start-after: start-find-document
               :end-before: end-find-document
               :language: javascript
               :dedent:

         .. tab::
            :tabid: nodejs

            .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-tutorial.js
               :start-after: start-find-document
               :end-before: end-find-document
               :language: javascript
               :dedent:

         .. tab::
            :tabid: python

            .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
               :start-after: start-find-document
               :end-before: end-find-document
               :language: python
               :dedent:

         .. tab::
            :tabid: java-sync

            .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
               :start-after: start-find-document
               :end-before: end-find-document
               :language: java
               :dedent:

         .. tab::
            :tabid: go

            .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
               :start-after: start-find-document
               :end-before: end-find-document
               :language: go
               :dedent:

         .. tab::
            :tabid: csharp

            .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
               :start-after: start-find-document
               :end-before: end-find-document
               :language: csharp
               :dedent:

   .. step:: Query an Encrypted Field with Range
   
      If you enabled range queries on an encrypted field, you can retrieve
      documents where the value of that field is within the range that you specify.
      
      The following example performs a range query on an
      encrypted field and prints the decrypted data:

      .. tabs-drivers::

         .. tab::
            :tabid: shell

            .. literalinclude:: /includes/qe-tutorials/mongosh/range-query.js
               :start-after: start-query-range
               :end-before: end-query-range
               :language: javascript
               :dedent:

         .. tab::
            :tabid: nodejs

            .. literalinclude:: /includes/qe-tutorials/node/range-query.js
               :start-after: start-query-range
               :end-before: end-query-range
               :language: javascript
               :dedent:

         .. tab::
            :tabid: python

            .. literalinclude:: /includes/qe-tutorials/python/range_query.py
               :start-after: start-query-range
               :end-before: end-query-range
               :language: python
               :dedent:

         .. tab::
            :tabid: java-sync

            .. literalinclude:: /includes/qe-tutorials/java/RangeQuery.java
               :start-after: start-query-range
               :end-before: end-query-range
               :language: java
               :dedent:

         .. tab::
            :tabid: go

            .. literalinclude:: /includes/qe-tutorials/go/range_query.go
               :start-after: start-query-range
               :end-before: end-query-range
               :language: go
               :dedent:

         .. tab::
            :tabid: csharp

            .. literalinclude:: /includes/qe-tutorials/csharp/RangeQuery.cs
               :start-after: start-query-range
               :end-before: end-query-range
               :language: csharp
               :dedent:

      Query Result
      ~~~~~~~~~~~~

      The output of the preceding code examples should look similar to the
      following:

      .. literalinclude:: /includes/qe-tutorials/encrypted-document.json
         :language: json
         :copyable: false
         :dedent:

      .. include:: /includes/queryable-encryption/safe-content-warning.rst