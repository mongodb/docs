.. _atlas-aws-eventbridge:

======================================
Send Trigger Events to AWS EventBridge
======================================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :description: Learn how to set up AWS EventBridge to handle Atlas Trigger events.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

MongoDB offers an `AWS Eventbridge <https://aws.amazon.com/eventbridge/>`__
partner event source that lets you send |service| Trigger events to an event bus
instead of calling an |service| Function. You can configure any Trigger type to
send events to EventBridge. Database Triggers also support custom error
handling, to reduce Trigger suspensions due to non-critical errors.

All you need to send Trigger events to EventBridge is an AWS account ID.
This guide walks you through finding your account ID, configuring the
Trigger, associating the Trigger event source with an event bus, and setting
up custom error handling.

.. note:: Official AWS Partner Event Source Guide

   This guide is based on Amazon's :aws-docs:`Receiving Events from a
   SaaS Partner
   </eventbridge/latest/userguide/create-partner-event-bus.html>`
   documentation.

Procedure
---------

.. note::

   Individual entries for an EventBridge Trigger event must be smaller than 256 KB.

   Learn how to reduce the size of your ``PutEvents`` entry in the
   :ref:`Performance Optimization <atlas-send-aws-eventbridge-performance-optimization>`
   section.

.. procedure::

   .. _atlas-setup-eventbridge:

   .. step:: Set Up the MongoDB Partner Event Source

      To send Trigger events to AWS EventBridge, you need the :guilabel:`AWS
      account ID` of the account that should receive the events.

      a. Open the `Amazon EventBridge console
         <https://console.aws.amazon.com/events/>`__ and click
         :guilabel:`Partner event sources` in the navigation menu.

      #. Search for the :guilabel:`MongoDB` partner event source and then click
         :guilabel:`Set up`.

      #. From the :guilabel:`MongoDB` partner event source page, click
         :guilabel:`Copy` to copy your AWS account ID to the clipboard.

   .. step:: Configure the Trigger

      After you have the :guilabel:`AWS account ID`, you can configure a
      :ref:`Database Trigger <atlas-database-trigger>` or :ref:`Scheduled
      Trigger <atlas-scheduled-triggers>` to send events to EventBridge.

      You can configure the Trigger in the {+atlas-ui+} or using the App Services CLI.

      .. tabs::

         .. tab:: {+atlas-ui+}
            :tabid: ui

            In the {+atlas-ui+}, create and configure a new
            :ref:`Database Trigger <atlas-database-trigger>` or
            :ref:`Scheduled Trigger <atlas-scheduled-triggers>` with the
            following settings:

            a. Select :guilabel:`EventBridge` as the event type.

            #. Paste the :guilabel:`AWS Account ID` that you copied from
               EventBridge.

            #. Select an :guilabel:`AWS Region` to send the
               Trigger events to.

               .. note:: Supported AWS Regions

                  For a full list of supported AWS regions, refer to Amazon's
                  :aws-docs:`Receiving Events from a SaaS Partner
                  </eventbridge/latest/userguide/create-partner-event-bus.html>`
                  guide.

            #. *(Optional for Database Triggers Only)* Configure a Function to
               handle Trigger errors.

               For more details, refer to the :ref:`Custom Error Handling
               <atlas-eventbridge-error-handling>` section on this page.

               .. figure:: /images/triggers/eventbridge-trigger-config.png
                  :alt: The EventBridge input boxes in the Trigger configuration.
                  :lightbox:

            #. To enable Extended JSON, toggle the :guilabel:`Enable Extended JSON`
               setting in the :guilabel:`Advanced (Optional)` section.

               By default, Triggers convert the BSON types in event objects into
               standard JSON types.

               Enabling Extended JSON preserves BSON type information by
               serializing event objects into :manual:`Extended JSON format
               </reference/mongodb-extended-json>` instead. This preserves type
               information at the expense of readability and interoperability.

         .. tab:: App Services CLI
            :tabid: cli

            a. Authenticate a MongoDB |service| User

               .. include:: /includes/triggers/app-services/cli-login.rst

            #. Pull Your App's Latest Configuration Files

               .. include:: /includes/triggers/app-services/cli-pull-latest.rst

            #. Create a trigger configuration file
               in your local ``/triggers`` directory. Omit the ``function_name``
               field and define an ``AWS_EVENTBRIDGE`` event processor.

            #. Set the ``account_id`` field to the :guilabel:`AWS Account ID`
               that you copied from EventBridge.

            #. Set the ``region`` field to an AWS Region.

               .. note:: Supported AWS Regions

                  For a full list of supported AWS regions, refer to Amazon's
                  :aws-docs:`Receiving Events from a SaaS Partner
                  </eventbridge/latest/userguide/create-partner-event-bus.html>`
                  guide.

            #. To enable Extended JSON, set the ``extended_json_enabled`` field
               to ``true``.

               By default, Triggers convert the BSON types in event objects into
               standard JSON types.

               Enabling Extended JSON preserves BSON type information by
               serializing event objects into :manual:`Extended JSON format
               </reference/mongodb-extended-json>` instead. This preserves type
               information at the expense of readability and interoperability.

            #. *(Optional for Database Triggers Only)* Configure a Function to
               handle Trigger errors.

               For more details, refer to the :ref:`Custom Error Handling <atlas-eventbridge-error-handling>` section on this page.

            The Trigger configuration file should resemble the following:

            .. code-block:: json

               {
                  "name": "...",
                  "type": "...",
                  "event_processors": {
                     "AWS_EVENTBRIDGE": {
                        "config": {
                           "account_id": "<AWS Account ID>",
                           "region": "<AWS Region>",
                           "extended_json_enabled": <boolean>
                        }
                     }
                  }
               }

   .. step:: Associate the Trigger Event Source with an Event Bus

      Return to the EventBridge console.

      a. Select Partner event sources in the navigation pane.

      #. In the :guilabel:`Partner event sources` table, find and select the
         :guilabel:`Pending` Trigger source, then click :guilabel:`Associate
         with event bus`.

      #. On the :guilabel:`Associate with event bus` screen, define any required
         access permissions for other accounts and organizations, then click
         :guilabel:`Associate`.

      After the association is confirmed, the status of the Trigger event source
      changes from :guilabel:`Pending` to :guilabel:`Active`, and the name of
      the event bus updates to match the event source name. You can now create
      rules that trigger on events from that partner event source.

      For more information, see :aws-docs:`Creating a Rule that Triggers on a
      SaaS Partner Event
      </eventbridge/latest/userguide/create-rule-partner-events.html>`.

.. _atlas-eventbridge-error-handling:

Custom Error Handling
---------------------

.. note:: Only Database Triggers Support Custom Error Handlers

   Currently, only Database Triggers support custom error handling.
   Authentication Triggers and Scheduled Triggers do not support
   custom error handling at this time.

You can create an error handler to execute on a Trigger failure
when retry does not succeed. Custom error handling allows you to determine
whether an error from AWS EventBridge is critical enough to suspend the Trigger,
or if it is acceptable to ignore the error and continue processing other events.

For more information on suspended Database Triggers, refer to
:ref:`Suspended Triggers <atlas-suspended_triggers>`.

Create a New Custom Error Handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can create a new error handler in the {+atlas-ui+}, using the App Services
CLI, or through the App Services Admin API.

.. tabs::

   .. tab:: {+atlas-ui+}
      :tabid: ui

      This procedure walks you through how to create the new Function directly
      in the :guilabel:`Create a Trigger` page.

      You can also create the Function from the :guilabel:`Functions` page. For
      more information on how to define Functions in |service|, refer to
      :ref:`Define a Function <atlas-define-a-function>`.

      .. figure:: /images/triggers/eventbridge-custom-function.png
         :alt: The EventBridge custom error handling configuration in the UI.

      .. procedure::

         .. step:: Create a New Error Handler

            From the :guilabel:`Configure Error Function` section of the
            :guilabel:`Create a Trigger` page, select :guilabel:`+ NewFunction`.

            You can also select an existing Function, if one is already defined,
            from the dropdown.

         .. step:: Name the New Function

            Enter a unique identifying name for the Function in the :guilabel:`Name` field.
            This name must be distinct from all other Functions in the application.

         .. step:: Write the Function Code

            In the :guilabel:`Function` section, write the JavaScript code directly in
            the Function editor. The Function editor contains a default Function that
            you can edit as needed. For more information on creating Functions, refer
            to the :ref:`Functions <atlas-functions>` documentation.

         .. step:: Test the Function

            In the :guilabel:`Testing Console` tab beneath the Function editor, you can
            test the Function by passing in example values to the ``error`` and
            ``changeEvent`` parameters, as shown in the comments of the testing console.

            For more information on these parameters, refer to the
            :ref:`Error Handler Parameters <atlas-eventbridge-error-handler-parameters>`
            section on this page.

            Click :guilabel:`Run` to run the test.

         .. step:: Save the Function

            Once you are satisfied with the custom error handler, click
            :guilabel:`Save`.

   .. tab:: App Services CLI
      :tabid: cli

      You can update your trigger's configuration with an error handler using
      the App Services CLI. For more information, see the :ref:`Update an App  <deploy-cli>`
      procedure.

      .. procedure::

         .. step:: Authenticate a MongoDB |service| User

            .. include:: /includes/triggers/app-services/cli-login.rst

         .. step:: Pull Your App's Latest Configuration Files

            .. include:: /includes/triggers/app-services/cli-pull-latest.rst

         .. step:: Write the Error Handler

            Follow the steps in :ref:`Define a Function <define-a-function>`
            to write your error handler source code and configuration file.

            See the following template error handler as an example:

            .. code-block:: js
               :caption: <functionName>.js

               exports = async function(error, changeEvent) {
                  // This sample function will log additional details if the error is not
                  // a DOCUMENT_TOO_LARGE error
                  if (error.code === 'DOCUMENT_TOO_LARGE') {
                     console.log('Document too large error');

                     // Comment out the line below in order to skip this event and not suspend the Trigger
                     throw new Error('Encountered error: ${error.code}');
                  }

                  console.log('Error sending event to EventBridge');
                  console.log('DB: ${changeEvent.ns.db}');
                  console.log('Collection: ${changeEvent.ns.coll}');
                  console.log('Operation type: ${changeEvent.operationType}');

                  // Throw an error in your Function to suspend the Trigger
                  // and stop processing additional events
                  throw new Error('Encountered error: ${error.message}');
               };

            For more information on creating Functions, see :ref:`Functions
            <atlas-functions>`.

         .. step:: Add the Error Handler to Your Trigger Configuration

            Add an ``error_handler`` attribute to your Trigger configuration
            file in the ``Triggers`` folder.

            The Trigger configuration file should resemble the following:

            .. code-block:: json
               :emphasize-lines: 13-18
               :caption: <triggerName>.json

                     {
                        "name": "...",
                        "type": "DATABASE",
                        "event_processors": {
                           "AWS_EVENTBRIDGE": {
                              "config": {
                                 "account_id": "<AWS Account ID>",
                                 "region": "<AWS Region>",
                                 "extended_json_enabled": <boolean>
                              }
                           }
                        },
                        "error_handler": {
                           "config": {
                              "enabled": <boolean>,
                              "function_name": "<Error Handler Function Name>"
                           }
                        }
                     }

            For more information, see
            :ref:`Trigger Configuration Files <appconfig-triggers>`.

         .. step:: Deploy Your Changes

            .. include:: /includes/triggers/app-services/cli-deploy.rst

   .. tab:: App Services API
      :tabid: api

      .. note::

         This procedure refers to App Services Admin API endpoints. It does
         *not* use {+atlas-admin-api+} endpoints.

      .. procedure::

         .. step:: Authenticate a MongoDB |service| User

            .. include:: /includes/triggers/app-services/api-authenticate-instructions.rst

         .. step:: Create a Deployment Draft (Optional)

            A draft represents a group of application changes that you
            can deploy or discard as a single unit. If you don't create
            a draft, updates automatically deploy individually.

            To create a draft, send a ``POST`` request with no body to
            the :admin-api-endpoint:`Create a Deployment Draft
            <tag/deploy/operation/adminCreateDeploymentDraft>` endpoint:

            .. code-block:: bash

               curl -X POST 'https://services.cloud.mongodb.com/api/admin/v3.0/groups/{groupId}/apps/{appId}/drafts' \
               -H 'Content-Type: application/json' \
               -H 'Authorization: Bearer <access_token>'

         .. step:: Create the Error Handler Function

            Create the Function to handle errors for a failed AWS
            EventBridge Trigger via a ``POST`` request to the
            :admin-api-endpoint:`Create a new
            Function <operation/adminCreateFunction>` endpoint.

            .. code-block:: bash

               curl -X POST \
                  https://services.cloud.mongodb.com/api/admin/v3.0/groups/{groupId}/apps/{appId}/functions \
                  -H 'Authorization: Bearer <access_token>' \
                  -d '{
                        "name": "string",
                        "private": true,
                        "source": "string",
                        "run_as_system": true
                     }'

         .. step:: Create the AWS EventBridge Trigger

            Create the AWS EventBridge Trigger with error handling enabled via a
            ``POST`` request to the
            :admin-api-endpoint:`Create a Trigger <operation/adminCreateTrigger>`
            endpoint.

            .. code-block:: bash

               curl -X POST \
                  https://services.cloud.mongodb.com/api/admin/v3.0/groups/{groupId}/apps/{appId}/triggers \
                  -H 'Authorization: Bearer <access_token>' \
                  -d '{
                        "name": "string",
                        "type": "DATABASE",
                        "config": {
                           "service_id": "string",
                           "database": "string",
                           "collection": "string",
                           "operation_types": {
                              "string"
                           },
                           "match": ,
                           "full_document": false,
                           "full_document_before_change": false,
                           "unordered": true
                        },
                        "event_processors": {
                           "AWS_EVENTBRIDGE": {
                              "account_id": "string",
                              "region": "string",
                              "extended_json_enabled": false
                           },
                        },
                        "error_handler": {
                           "enabled": true,
                           "function_id": "string"
                        }
                     }'

         .. step:: Deploy Your Changes

            If you created a draft, you can deploy all changes in
            the draft by sending a ``POST`` request with no body to the
            :admin-api-endpoint:`Deploy a deployment draft
            <tag/deploy/operation/adminDeployDraft>` endpoint.

            If you did not create a draft as a first step, the
            individual Function and Trigger requests deploy automatically.

            .. code-block:: shell

               curl -X POST \
               'https://services.cloud.mongodb.com/api/admin/v3.0/groups/{groupId}/apps/{appId}/drafts/{draftId}/deployment' \
               --header 'Content-Type: application/json' \
               --header 'Authorization: Bearer <access_token>' \

.. _atlas-eventbridge-error-handler-parameters:

Error Handler Parameters
~~~~~~~~~~~~~~~~~~~~~~~~

The default error handler has two parameters: ``error`` and ``changeEvent``.

``error``
`````````
Has the following two attributes:

- ``code``: The code for the errored EventBridge put request. For a list of
  error codes used by the error handler, refer to the :ref:`Error Codes
  <atlas-eventbridge-error-codes>` section on this page.

- ``message``: The unfiltered error message from an errored EventBridge
  put request.

``changeEvent``
```````````````

The requested change to your data made by EventBridge. For more information
on types of change events and their configurations, see
:ref:`Change Event Types <atlas-database-events>`.

.. _atlas-eventbridge-error-codes:

Error Codes
~~~~~~~~~~~

If an error was received from EventBridge, the event processor will parse the
error as either ``DOCUMENT_TOO_LARGE`` or ``OTHER``. This parsed error is passed
to the error handler Function through the ``error`` parameter.

``DOCUMENT_TOO_LARGE``
``````````````````````
If the entry for an EventBridge Trigger event is larger than 256 KB, EventBridge
will throw an error. The error will contain either:

- `status code: 400 <https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400>`_ and
  ``total size of the entries in the request is over the limit``.

- `status code: 413 <https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413>`_,
  which indicates a too large payload.

For more information on reducing entry size, see :ref:`Performance
Optimization <atlas-send-aws-eventbridge-performance-optimization>`.

``OTHER``
`````````
The default bucket for all other errors.

.. tip:: Optimize Error Handling for Errors with ``OTHER`` Code

   You can make special error handling cases for
   your most common error messages to optimize your error handling for
   errors with an ``OTHER`` code. To determine which errors need
   special cases, we recommended keeping track of
   the most common error messages you receive in ``error.message``.

Error Handler Logs
~~~~~~~~~~~~~~~~~~

You can view :ref:`Trigger Error Handler logs <atlas-logs-trigger-error-handler>` for
your EventBridge Trigger error handler in the application logs.

.. tabs::

   .. tab:: {+atlas-ui+}
      :tabid: ui

      From the ``Triggers`` page of the {+atlas-ui+}, select
      the :guilabel:`Logs` tab.

      All logs display by default. To view only error handler logs,
      click the :guilabel:`Show errors only` toggle.

   .. tab:: App Services CLI
      :tabid: cli

      Pass the ``trigger_error_handler`` value to the ``--type`` flag to
      view all error handler logs.

      .. code-block:: shell

         appservices logs list --type=trigger_error_handler

   .. tab:: App Services API
      :tabid: api

      .. note::

         This procedure refers to App Services Admin API endpoints. It does
         *not* use {+atlas-admin-api+} endpoints.

      Retrieve ``TRIGGER_ERROR_HANDLER`` type logs via a ``GET`` request to
      the :admin-api-endpoint:`Retrieve App Services Logs
      <operation/adminGetLogs>` endpoint:

      .. code-block:: shell

         curl -X GET 'https://services.cloud.mongodb.com/api/admin/v3.0/groups/{groupId}/apps/{appId}/logs' \
            -H 'Content-Type: application/json' \
            -H 'Authorization: Bearer <access_token>'
            -d '{
               "type": "TRIGGER_ERROR_HANDLER"
               }'

To learn more about viewing application logs, see :ref:`View Application Logs <view-logs>`.

.. _atlas-event_processor_example:

Example Event
-------------

The following object configures a Trigger to send events to AWS
EventBridge and handle errors:

.. code-block:: json

   "event_processors": {
      "AWS_EVENTBRIDGE": {
         "config": {
            "account_id": "012345678901",
            "region": "us-east-1"
         }
      }
   },
    "error_handler": {
      "config": {
         "enabled": true,
         "function_name": "myErrorHandler.js"
      }
   }

.. _atlas-send-aws-eventbridge-performance-optimization:

Performance Optimization
------------------------

Individual entries for an EventBridge Trigger event must be smaller than 256 KB.

For more information, see the :aws:`AWS Documentation to calculate Amazon
PutEvents event entry size </eventbridge/latest/userguide/eb-putevents.html#eb-putevent-size>`.
When using Database Triggers, the Project Expression can include only specified
fields, reducing document size before sending messages to EventBridge. For more
details about Project Expression, refer to the
:ref:`Database Trigger Project Expression documentation <atlas-database-triggers-project-expression>`.
