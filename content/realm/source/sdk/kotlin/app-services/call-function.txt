.. meta::
   :robots: noindex, nosnippet

.. _kotlin-call-function:

===================================
Call an Atlas Function - Kotlin SDK
===================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can call an **Atlas Function** from a client application
using the Realm Kotlin SDK.
Functions are serverless JavaScript functions that let you define and execute server-side logic.
These server-side Functions can run in the context
of the authenticated user, and thus honor the rules, roles, and permissions that
you have assigned to your data in Atlas.

.. versionadded:: 1.9.0

You can serialize Function arguments and return values using an EJSON encoder. 
For more information, including examples, refer to :ref:`kotlin-ejson-encoding-for-atlas`.

For more information on configuring and writing Atlas Functions, refer to
:ref:`Atlas Functions <functions>` in the App Services documentation.

Before You Begin
----------------

#. In an App Services App, :ref:`define an Atlas Function <define-a-function>`.
#. In your client project, :ref:`initialize the App client <kotlin-connect-to-backend>`.
#. Then, :ref:`authenticate a user <kotlin-authenticate>`. Functions are accessed 
   through the `User <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-user/index.html>`__ 
   object.

Call a Function
---------------

.. include:: /includes/important-sanitize-client-data-in-functions.rst

To call an Atlas Function from the Kotlin SDK, pass its name and all
arguments to `Functions.call() <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.ext/call.html>`__. 

Consider an Atlas Function running in an App Services App 
named ``sum`` that takes two arguments, adds them, and returns the result: 

.. code-block:: javascript
   :caption: Atlas Function

   // Add two numbers
   exports = function(a, b) {
      return a + b;
   };

To call this Atlas Function from the Kotlin SDK:

.. literalinclude:: /examples/generated/kotlin/FunctionsTest.snippet.call-function.kt
   :language: kotlin

Limitations in Realm Kotlin SDK v1.8.x and Earlier
--------------------------------------------------

.. versionchanged:: 1.9.0

If you are using Kotlin SDK v1.9.0 or later, these limitations no longer apply.

Because the `Kotlin serialization engine <https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/formats.md>`__ does not yet support third-party libraries, 
there are limitations to the types you can pass as arguments and the types 
you can deserialize the results to in a called Function.

You *cannot* pass objects as arguments. 

The following are valid argument value types: 

- Primitives
- Bson
- MutableRealmInt
- RealmUUID
- ObjectId
- RealmInstant
- RealmAny
- Array
- Collection (List or Set)
- Map

The following are valid return value types:

- Primitives
- Bson
- MutableRealmInt
- RealmUUID
- ObjectId
- RealmInstant
- RealmAny
- BsonArray (for Array and Collection argument types)
- BsonDocument (for Map argument types)
