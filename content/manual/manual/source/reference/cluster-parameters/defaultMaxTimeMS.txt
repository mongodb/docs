.. _cluster-param-defaultMaxTimeMS:

================
defaultMaxTimeMS
================

.. facet::
   :name: genre
   :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. |both| replace:: Available for both :binary:`~bin.mongod` and :binary:`~bin.mongos`.

Definition
----------

.. parameter:: defaultMaxTimeMS
   
   .. versionadded:: 8.0
      
   |both|
   
   .. include:: /includes/cluster-parameters/defaultMaxTimeMS.rst

Access Control
--------------

.. include:: /includes/cluster-parameters/access-control.rst

Syntax 
------

To set ``defaultMaxTimeMS`` for your deployment, run the following command on 
the ``admin`` database:

.. code-block:: javascript

   db.adminCommand(
      {
         setClusterParameter: {
            defaultMaxTimeMS: { readOperations: <value> }
         }
      }
   )

To view the current value for ``defaultMaxTimeMS``, run the following
command on the ``admin`` database: 

.. code-block:: javascript

   db.adminCommand( { getClusterParameter: "defaultMaxTimeMS" } )

Behavior
--------

By default, ``defaultMaxTimeMS.readOperations`` is 0, meaning no default
query timeout is set. If there is no default query timeout, the query
runs until it either returns a result or fails.

If a query specifies a :method:`~cursor.maxTimeMS()` option, that value
overrides the ``defaultMaxTimeMS`` value.

Long-Running Queries
~~~~~~~~~~~~~~~~~~~~

If your deployment needs to run long queries, such as :ref:`analytics
node <analytics-nodes-overview>` queries, you must specify a timeout for
those queries at the operation level using
:method:`~cursor.maxTimeMS()`. If you don't specify an operation
timeout, those queries use the ``defaultMaxTimeMS`` timeout, and won't
run for the required amount of time.
   
Example 
-------

The following command sets the default query timeout ``5000``
milliseconds:

.. code-block:: javascript
   
   db.runCommand( {
      setClusterParameter: {
         defaultMaxTimeMS: { readOperations: 5000 }
      }
   } )

To check the value of ``defaultMaxTimeMS``, run the following command:

.. io-code-block::

   .. input::
      :language: javascript

      db.adminCommand( { getClusterParameter: "defaultMaxTimeMS" } )

   .. output::
      :language: javascript
      :emphasize-lines: 6

      {
         "clusterParameters" : [
            {
               "_id" : "defaultMaxTimeMS",
               "clusterParameterTime" : Timestamp(1711564868, 17),
               "readOperations" : NumberLong(5000)
            }
         ],
         "ok" : 1,
         "$clusterTime" : {
            "clusterTime" : Timestamp(1712161244, 1),
            "signature" : {
               "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
               "keyId" : NumberLong(0)
            }
         },
         "operationTime" : Timestamp(1712161244, 1)
      }

Results
~~~~~~~

After you set ``defaultMaxTimeMS`` for your deployment, consider these
queries:

.. code-block:: javascript

   db.test.find( { name: "Carol" } )
   
   db.test.find( { name: "Carol" } ).maxTimeMS( 8000 )

The first query uses the ``defaultMaxTimeMS`` value of 5,000
milliseconds.

The second query specifies :method:`~cursor.maxTimeMS()`, which
overrides the ``defaultMaxTimeMS`` and causes the query to timeout after
8,000 milliseconds.
