======================
MongoDB Backup Methods
======================

.. default-domain:: mongodb

When deploying MongoDB in production, you should have a strategy for
capturing and restoring backups in the case of data loss
events. There are several ways to back up MongoDB clusters:

- :ref:`backup-with-file-copies`
- :ref:`backup-with-mongodump`
- :ref:`backup-with-mms`
- :ref:`backup-with-mms-onprem`

.. _backup-with-file-copies:

Backup by Copying Underlying Data Files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can create a backup by copying MongoDB's underlying data
files.

If the volume where MongoDB stores data files supports point in time
snapshots, you can use these snapshots to create backups of a MongoDB
system at an exact moment in time.

File systems snapshots are an operating system volume manager feature,
and are not specific to MongoDB. The mechanics of snapshots depend on
the underlying storage system. For example, if you use
Amazonâ€™s EBS storage system for EC2 supports snapshots. On
Linux the LVM manager can create a snapshot.

To get a correct snapshot of a running :program:`mongod` process, you
must have journaling enabled and the journal must reside on the same
logical volume as the other MongoDB data files. Without journaling
enabled, there is no guarantee that the snapshot
will be consistent or valid.

To get a consistent snapshot of a sharded system, you must disable the
balancer and capture a snapshot from every shard and a config server at
approximately the same moment in time.

If your storage system does not support snapshots, you can copy the
files directly using ``cp``, ``rsync``, or a similar tool. Since
copying multiple files is not an atomic operation, you must stop all
writes to the :program:`mongod` before copying the files. Otherwise, you will
copy the files in an invalid state.

Backups produced by copying the underlying data do not support point
in time recovery for replica sets and are difficult to manage for
larger sharded clusters. Additionally, these backups are larger
because they include the indexes and duplicate underlying storage
padding and fragmentation. :program:`mongodump`, by contrast, creates
smaller backups.

For more information, see the
:doc:`/tutorial/backup-with-filesystem-snapshots` and
:doc:`/tutorial/backup-sharded-cluster-with-filesystem-snapshots` for
complete instructions on using LVM to create snapshots. Also see
:ecosystem:`Back up and Restore Processes for MongoDB on Amazon EC2
</tutorial/backup-and-restore-mongodb-on-amazon-ec2>`.

.. _backup-with-mongodump:

Backup with ``mongodump``
~~~~~~~~~~~~~~~~~~~~~~~~~

The :program:`mongodump` tool reads data from a MongoDB database and
creates high fidelity BSON files. The :program:`mongorestore`
tool can populate a MongoDB database with the data from these BSON
files. These tools are simple and efficient for backing up small
MongoDB deployments, but are not ideal for capturing backups of larger
systems.

:program:`mongodump` and :program:`mongorestore` can operate against a
running :program:`mongod` process, and can manipulate the underlying
data files directly. By default, :program:`mongodump` does not
capture the contents of the :doc:`local database </reference/local-database>`.

:program:`mongodump` only captures the documents in the database. The
resulting backup is space efficient, but :program:`mongorestore` or
:program:`mongod` must rebuild the indexes after restoring data.

When connected to a MongoDB instance, :program:`mongodump` can
adversely affect :program:`mongod` performance. If your data is larger
than system memory, the queries will push the working set out of
memory.

To mitigate the impact of :program:`mongodump` on the performance of
the replica set, use :program:`mongodump` to capture backups from a
:doc:`secondary </core/replica-set-secondary>` member of a replica set.
Alternatively, you can shut down a secondary and use
:program:`mongodump` with the data files directly. If you shut down a
secondary to capture data with :program:`mongodump` ensure that the
operation can complete before its oplog becomes too stale to continue
replicating.

For replica sets, :program:`mongodump` also supports a point in time
feature with the :option:`--oplog <mongodump --oplog>`
option. Applications may continue modifying data while
:program:`mongodump` captures the output. To restore a point in time
backup created with :option:`--oplog <mongodump --oplog>`, use
:program:`mongorestore` with the :option:`--oplogReplay
<mongorestore --oplogReplay>` option.

If applications modify data while :program:`mongodump` is creating a
backup, :program:`mongodump` will compete for resources with
those applications.

See :doc:`/tutorial/backup-with-mongodump`,
:doc:`/tutorial/backup-small-sharded-cluster-with-mongodump`,
and :doc:`/tutorial/backup-sharded-cluster-with-database-dumps`
for more information.

.. _backup-with-mms:

MongoDB Management Service (MMS) Cloud Backup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The `MongoDB Management Service
<https://mms.10gen.com/?pk_campaign=MongoDB-Org&pk_kwd=Backup-Docs>`_
supports backup and restore for MongoDB deployments.

MMS continually backs up MongoDB replica sets and sharded
systems by reading the oplog data from your MongoDB cluster.

MMS Backup offers point in time recovery of MongoDB replica sets and a
consistent snapshot of sharded systems.

MMS achieves point in time recovery by storing oplog data so that it
can create a restore for any moment in time in the last 24 hours for a
particular replica set.

For sharded systems, MMS does not provide restores for arbitrary moments in
time. MMS does provide periodic consistent snapshots of the entire
sharded cluster. Sharded cluster snapshots are difficult to achieve
with other MongoDB backup methods.

To restore a MongoDB cluster from an MMS Backup snapshot, you download
a compressed archive of your MongoDB data files and distribute those
files before restarting the :program:`mongod` processes.

To get started with MMS Backup `sign up for MMS
<http://mms.mongodb.com>`_, and consider the
complete documentation of MMS see the  :mms:`MMS Manual
</>`.

.. _backup-with-mms-onprem:

MongoDB Management Service (MMS) On Prem Backup Software
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB Subscribers can install and run the same core software that powers
:ref:`backup-with-mms` on their own infrastructure. The On Prem
version of MMS, has similar functionality as the cloud version and is
available with Standard and Enterprise subscriptions.

For more information about On Prem MMS see the `MongoDB subscription
<https://www.mongodb.com/products/subscriptions>`_ page and the `MMS
On Prem Manual <https://mms.mongodb.com/help-hosted/current/>`_.

Further Reading
---------------

.. include:: /includes/toc/dfn-list-administration-backup-and-recovery.rst
