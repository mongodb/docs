===================
setDefaultRWConcern
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. versionadded:: 4.4

.. dbcommand:: setDefaultRWConcern

   The :dbcommand:`setDefaultRWConcern` administrative command sets the
   global default read or write concern configuration for a replica set
   or sharded cluster. :dbcommand:`setDefaultRWConcern` must be run
   against the ``admin`` database.

   - For replica sets, issue the :dbcommand:`setDefaultRWConcern`
     command on the :term:`primary` :binary:`~bin.mongod`.

   - For sharded clusters, issue the :dbcommand:`setDefaultRWConcern`
     on a :binary:`~bin.mongos`.

   :dbcommand:`setDefaultRWConcern` has the following form:

   .. code-block:: javascript

      db.adminCommand(
        {
          setDefaultRWConcern : 1,
          defaultReadConcern: { <read concern> },
          defaultWriteConcern: { <write concern> },
          writeConcern: { <write concern> },
          comment: <any>
        }
      )

   :dbcommand:`setDefaultRWConcern` has the following fields:

   .. list-table::
      :header-rows: 1
      :widths: 20 20 80

      * - Field
   
        - Type
   
        - Description

      * - :ref:`setDefaultRWConcern <setDefaultRWConcern-cmd-setDefaultRWConcern>`
        
        - ``int``
        
        - .. _setDefaultRWConcern-cmd-setDefaultRWConcern:
        
          Set to ``1``.

      * - :ref:`defaultReadConcern <setDefaultRWConcern-cmd-defaultReadConcern>`
        
        - ``object``

        - .. _setDefaultRWConcern-cmd-defaultReadConcern:
        
          Document containing the global read concern configuration.
          Specify a valid :ref:`read concern object 
          <read-concern-option>`. 

          - :dbcommand:`setDefaultRWConcern` supports the 
            following subset of :ref:`level <read-concern-levels>`:

            - :readconcern:`"local"`
            - :readconcern:`"available"`
            - :readconcern:`"majority"`
          
          - To unset the currently configured default read concern,
            specify an empty document ``{}``.

          - :dbcommand:`setDefaultRWConcern` only supports the
            ``levels`` read concern setting.
            You cannot specify any other read concern setting in the 
            default read concern.

          Omit this document to leave the current global read concern
          unmodified. If omitted, :dbcommand:`setDefaultRWConcern` must
          specify :ref:`defaultWriteConcern 
          <setDefaultRWConcern-cmd-defaultWriteConcern>`.

      * - :ref:`defaultWriteConcern <setDefaultRWConcern-cmd-defaultWriteConcern>`

        - ``object``

        - .. _setDefaultRWConcern-cmd-defaultWriteConcern:
        
          Document containing the global default write concern
          configuration. 

          - For the write concern :ref:`w <wc-w>` setting, 
            :dbcommand:`setDefaultRWConcern` supports all 
            write concern values *except* ``w : 0``.

          - For the write concern :ref:`wtimeout <wc-w>` setting,
            :dbcommand:`setDefaultRWConcern` defaults to ``0`` if the
            setting is omitted. Operations block until the requested
            write concern is met. If specifying a global default
            ``wtimeout``, ensure the value is large enough to allow
            write operations to achieve the requested write concern. 

          - To unset the currently configured write concern, specify 
            an empty document ``{}``.

          Omit this document to leave the current global write concern 
          unmodified. If omitted, :dbcommand:`setDefaultRWConcern` must
          specify :ref:`defaultReadConcern 
          <setDefaultRWConcern-cmd-defaultReadConcern>`.

      * - :ref:`writeConcern <setDefaultRWConcern-cmd-writeConcern>`

        - object

        - .. _setDefaultRWConcern-cmd-writeConcern:

          Optional. A document that specifies the 
          :ref:`write concern <write-concern>` to be used by the 
          :dbcommand:`setDefaultRWConcern` command itself. 

          If omitted, :dbcommand:`setDefaultRWConcern` uses the 
          previously set global default write concern *if* one 
          was configured.

      * - ``comment``

        - any

        - .. include:: /includes/extracts/comment-content.rst
       
          .. versionadded:: 4.4

:dbcommand:`setDefaultRWConcern` returns an object that contains the
currently configured global default read and write concern. See
:dbcommand:`getDefaultRWConcern` for more complete documentation on
the returned fields.

Behavior
--------

.. note:: Requires ``featureCompatibilityVersion`` 4.4+


   Each :binary:`~bin.mongod` in the replica set or sharded cluster 
   *must* have :ref:`featureCompatibilityVersion <set-fcv>` set to 
   at least ``4.4`` to use :dbcommand:`setDefaultRWConcern`.

MongoDB only applies the global default read or write concern to
operations which do not explicitly specify a read or write concern. 

If MongoDB applies the global default read or write concern to an
operation, that operation behaves as if that read or write concern were
explicitly specified by the issuing client.

Replica Sets
~~~~~~~~~~~~

Issue :dbcommand:`setDefaultRWConcern` against the replica set
:term:`primary`. The primary replicates the new global default settings
to the remaining members of the replica set. Secondaries which have 
not yet replicated the updated global default settings continue 
using their local 'stale' copy of the defaults.

Issue the :dbcommand:`setDefaultRWConcern` command with a
:ref:`writeConcern <setDefaultRWConcern-cmd-writeConcern>` of
:writeconcern:`w : "majority" <"majority">` to ensure the command only
returns after the changes have propagated to a majority of replica set
members.

Sharded Clusters
~~~~~~~~~~~~~~~~

Issue the :dbcommand:`setDefaultRWConcern` against a
:binary:`~bin.mongos` in the cluster. The :binary:`~bin.mongos` persists
the updated settings to the :ref:`config server replica set (CSRS)
<sharding-config-server>`. Each :binary:`~bin.mongos` periodically
issues a :dbcommand:`getDefaultRWConcern` against the CSRS to refresh
their local copy of the global settings. A :binary:`~bin.mongos` uses
its local 'stale' copy of the global defaults during the time period
between refreshes.

Issue the :dbcommand:`setDefaultRWConcern` command with a
:ref:`writeConcern <setDefaultRWConcern-cmd-writeConcern>` of
:writeconcern:`w : "majority" <"majority">` to ensure the command only
returns after the changes have propagated to a majority of CSRS members.

When an application issues an operation against the 
:binary:`~bin.mongos` without explicitly specifying a read or 
write concern setting, the :binary:`~bin.mongos` applies the 
corresponding global default setting.

The global default settings do *not* propagate to the individual shards.
You cannot run :dbcommand:`setDefaultRWConcern` against a shard.

.. important::

   :dbcommand:`setDefaultRWConcern` requires
   :ref:`featureCompatibilityVersion <set-fcv>` ``4.4+``. If you
   downgrade your deployment's :ref:`featureCompatibilityVersion
   <set-fcv>` from ``4.4`` to ``4.2``, all cluster-wide read and write
   concern defaults are lost, but :binary:`~bin.mongos` instances may
   continue applying the defaults for up to 30 seconds.

Sharding Administrative Commands Override Write Concern Settings
````````````````````````````````````````````````````````````````

Sharding administrative commands that perform write operations on the
:ref:`config server <sharding-config-server>`, such as the
:dbcommand:`enableSharding` or :dbcommand:`addShard` commands, have
specific behavior with global default write concern settings:

- The commands use :writeconcern:`"majority"` regardless of the 
  configured global default write concern.

- The commands use a minimum :ref:`wtimeout <wc-wtimeout>` of ``60000``. 
  The commands only use the global default write concern ``wtimeout`` if
  it is greater than ``60000``.


Access Control
~~~~~~~~~~~~~~

For replica sets or sharded clusters enforcing 
:ref:`authentication`, :dbcommand:`setDefaultRWConcern` requires 
that the authenticated user have the 
:authaction:`setDefaultRWConcern` privilege action. 

The :authrole:`clusterManager` built-in role provides the required 
privileges to run :dbcommand:`setDefaultRWConcern`.

Example
-------

Set Global Default Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation sets the global write concern to the following:

- :writeconcern:`w: "majority" <"majority">`

.. code-block:: javascript

   db.adminCommand({
     "setDefaultRWConcern" : 1,
     "defaultWriteConcern" : {
       "w" : "majority"
     }
   })

The operation returns a document similar to the following:

.. code-block:: javascript
   :copyable: false

   {
     "defaultWriteConcern" : {
      "w" : "majority"
     },
     "updateOpTime" : Timestamp(1586290895, 1),
     "updateWallClockTime" : ISODate("2020-04-07T20:21:41.849Z"),
     "localUpdateWallClockTime" : ISODate("2020-04-07T20:21:41.862Z"),
     "ok" : 1,
     "$clusterTime" : { ... }
     "operationTime" : Timestamp(1586290925, 1)
   }

Set Global Default Read Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation sets the global read concern to 
:readconcern:`"majority"`:

.. code-block:: javascript

   db.adminCommand({
     "setDefaultRWConcern" : 1,
     "defaultReadConcern" : { "level" : "majority" }
   })

The operation returns a document similar to the following:

.. code-block:: javascript
   :copyable: false

   {
     "defaultReadConcern" : {
       "level" : "majority"
     },
     "updateOpTime" : Timestamp(1586290895, 1),
     "updateWallClockTime" : ISODate("2020-04-07T20:21:41.849Z"),
     "localUpdateWallClockTime" : ISODate("2020-04-07T20:21:41.862Z"),
     "ok" : 1,
     "$clusterTime" : { ... }
     "operationTime" : Timestamp(1586290925, 1)
   }

Set Global Default Read and Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation sets the global default read and write concern
to the following:

- :writeconcern:`w: "majority" <"majority">` write concern
- :readconcern:`level: "majority" <"majority">` read concern.

.. code-block:: javascript

   db.adminCommand({
     "setDefaultRWConcern" : 1,
     "defaultWriteConcern" : {
       "w" : "majority"
     },
     "defaultReadConcern" : { "level" : "majority" }
   })

The operation returns a document similar to the following:

.. code-block:: javascript
   :copyable: false

   "defaultWriteConcern" : {
     "w" : "majority"
   },
   "defaultReadConcern" : {
     "level" : "majority"
   }
   

Unset Global Default Read and Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider a deployment with the following default read and write 
concern:


.. code-block:: javascript
   :copyable: false

   {
     "defaultWriteConcern" : {
       "w" : "majority"
     },
     "defaultReadConcern" : {
       "level" : "majority"
     },
     "updateOpTime" : Timestamp(1586290895, 1),
     "updateWallClockTime" : ISODate("2020-04-07T20:21:41.849Z"),
     "localUpdateWallClockTime" : ISODate("2020-04-07T20:21:41.862Z"),
     "ok" : 1,
     "$clusterTime" : { ... }
     "operationTime" : Timestamp(1586290925, 1)
   }

The following operation unsets the global default read and write 
concern settings:

.. code-block:: javascript

   db.adminCommand({
     "setDefaultRWConcern" : 1,
     "defaultReadConcern" : {},
     "defaultWriteConcern" : {}
   })

The operation returns a document similar to the following:

.. code-block:: javascript
   :copyable: false

   {
     "updateOpTime" : Timestamp(1586290895, 1),
     "updateWallClockTime" : ISODate("2020-04-07T20:21:41.849Z"),
     "localUpdateWallClockTime" : ISODate("2020-04-07T20:21:41.862Z"),
     "ok" : 1,
     "$clusterTime" : { ... }
     "operationTime" : Timestamp(1586290925, 1)
   }
