.. _aggregation-pipeline:

====================
Aggregation Pipeline
====================

.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: shell

.. facet::
   :name: genre 
   :values: reference

.. meta:: 
   :description: MongoDB database aggregation pipeline details and syntax examples.
   :keywords: sample dataset

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/aggregation-pipeline-introduction.rst

.. |page-topic| replace:: :atlas:`run aggregation pipelines in the UI </atlas-ui/agg-pipeline>`

.. cta-banner::
   :url: https://www.mongodb.com/docs/atlas/atlas-ui/agg-pipeline
   :icon: Cloud

   .. include:: /includes/fact-atlas-compatible.rst

When you run aggregation pipelines on {+atlas+} deployments in the
{+atlas+} UI, you can preview the results at each stage.

.. _aggregation-pipeline-examples:

Complete Aggregation Pipeline Examples
--------------------------------------

This section shows aggregation pipeline examples that use the following
pizza ``orders`` collection:

.. code-block:: javascript

   db.orders.insertMany( [
      { _id: 0, name: "Pepperoni", size: "small", price: 19,
        quantity: 10, date: ISODate( "2021-03-13T08:14:30Z" ) },
      { _id: 1, name: "Pepperoni", size: "medium", price: 20,
        quantity: 20, date : ISODate( "2021-03-13T09:13:24Z" ) },
      { _id: 2, name: "Pepperoni", size: "large", price: 21,
        quantity: 30, date : ISODate( "2021-03-17T09:22:12Z" ) },
      { _id: 3, name: "Cheese", size: "small", price: 12,
        quantity: 15, date : ISODate( "2021-03-13T11:21:39.736Z" ) },
      { _id: 4, name: "Cheese", size: "medium", price: 13,
        quantity:50, date : ISODate( "2022-01-12T21:23:13.331Z" ) },
      { _id: 5, name: "Cheese", size: "large", price: 14,
        quantity: 10, date : ISODate( "2022-01-12T05:08:13Z" ) },
      { _id: 6, name: "Vegan", size: "small", price: 17,
        quantity: 10, date : ISODate( "2021-01-13T05:08:13Z" ) },
      { _id: 7, name: "Vegan", size: "medium", price: 18,
        quantity: 10, date : ISODate( "2021-01-13T05:10:13Z" ) }
   ] )

Calculate Total Order Quantity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/aggregation-pipeline-example.rst

Example output:

.. code-block:: javascript
   :copyable: false

   [
      { _id: 'Cheese', totalQuantity: 50 },
      { _id: 'Vegan', totalQuantity: 10 },
      { _id: 'Pepperoni', totalQuantity: 20 }
   ]

Calculate Total Order Value and Average Order Quantity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example calculates the total pizza order value and
average order quantity between two dates:

.. code-block:: javascript

   db.orders.aggregate( [

      // Stage 1: Filter pizza order documents by date range
      {
         $match:
         {
            "date": { $gte: new ISODate( "2020-01-30" ), $lt: new ISODate( "2022-01-30" ) }
         }
      },

      // Stage 2: Group remaining documents by date and calculate results
      {
         $group:
         {
            _id: { $dateToString: { format: "%Y-%m-%d", date: "$date" } },
            totalOrderValue: { $sum: { $multiply: [ "$price", "$quantity" ] } },
            averageOrderQuantity: { $avg: "$quantity" }
         }
      },

      // Stage 3: Sort documents by totalOrderValue in descending order
      {
         $sort: { totalOrderValue: -1 }
      }

    ] )

The :pipeline:`$match` stage:

- Filters the pizza order documents to those in a date range specified
  using :expression:`$gte` and :expression:`$lt`.

- Passes the remaining documents to the :pipeline:`$group` stage.

The :pipeline:`$group` stage:

- Groups the documents by date using :expression:`$dateToString`.

- For each group, calculates:

  - Total order value using :group:`$sum` and :expression:`$multiply`.

  - Average order quantity using :group:`$avg`.
  
- Passes the grouped documents to the :pipeline:`$sort` stage.

The :pipeline:`$sort` stage:

- Sorts the documents by the total order value for each group in
  descending order (``-1``).

- Returns the sorted documents.

Example output:

.. code-block:: javascript
   :copyable: false

   [
      { _id: '2022-01-12', totalOrderValue: 790, averageOrderQuantity: 30 },
      { _id: '2021-03-13', totalOrderValue: 770, averageOrderQuantity: 15 },
      { _id: '2021-03-17', totalOrderValue: 630, averageOrderQuantity: 30 },
      { _id: '2021-01-13', totalOrderValue: 350, averageOrderQuantity: 10 }
   ]

.. seealso::

   - :doc:`/tutorial/aggregation-with-user-preference-data`
   - :doc:`/tutorial/aggregation-zip-code-data-set`
   - :doc:`/tutorial/update-documents-with-aggregation-pipeline`

.. _aggregation-pipeline-stages-details:

Additional Aggregation Pipeline Stage Details
---------------------------------------------

An aggregation pipeline consists of one or more :ref:`stages
<aggregation-pipeline-operator-reference>` that process documents:
 
- A stage does not have to output one document for every input
  document. For example, some stages may produce new documents or
  filter out documents.

- The same stage can appear multiple times in the pipeline with these
  stage exceptions: :pipeline:`$out`, :pipeline:`$merge`, and
  :pipeline:`$geoNear`.

- To calculate averages and perform other calculations in a stage, use
  :ref:`aggregation expressions <aggregation-expressions>` that specify
  :ref:`aggregation operators <aggregation-expression-operators>`. You
  will learn more about aggregation expressions in the next section.

For all aggregation stages, see
:ref:`aggregation-pipeline-operator-reference`.

.. _aggregation-pipeline-expressions:

Aggregation Expressions and Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some aggregation pipeline stages accept :term:`expressions
<expression>`. Operators calculate values based on input expressions.

.. include:: /includes/expression-components.rst

.. _agg-quick-ref-field-paths:

Field Paths
~~~~~~~~~~~

:term:`Field path <field path>` expressions are used to access fields in
input documents. To specify a field path, prefix the field name or the
:ref:`dotted field path <document-dot-notation>` (if the field is in an
embedded document) with a dollar sign ``$``. For example, ``"$user"`` to
specify the field path for the ``user`` field or ``"$user.name"`` to
specify the field path to the embedded ``"user.name"`` field.

``"$<field>"`` is equivalent to ``"$$CURRENT.<field>"`` where the
:variable:`CURRENT` is a system variable that defaults to the root of
the current object, unless stated otherwise in specific stages.

For more information and examples, see :ref:`agg-field-paths`. 

Run an Aggregation Pipeline
---------------------------

To run an aggregation pipeline, use:

- :method:`db.collection.aggregate()` or

- :dbcommand:`aggregate`

.. _aggregation-update-documents:

Update Documents Using an Aggregation Pipeline
----------------------------------------------

To update documents with an aggregation pipeline, use:

.. include:: /includes/table-update-with-aggregation-availability.rst

Other Considerations
--------------------

Aggregation Pipeline Limitations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An aggregation pipeline has limitations on the value types and the
result size. See :doc:`/core/aggregation-pipeline-limits`.

Aggregation Pipelines and Sharded Collections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An aggregation pipeline supports operations on sharded collections.
See :ref:`aggregation-pipeline-sharded-collection`.

Aggregation Pipelines as an Alternative to Map-Reduce
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-use-aggregation-not-map-reduce.rst

Learn More
----------

To learn more about aggregation pipelines, see:

- :ref:`aggregation-expression-operators`

- :ref:`aggregation-pipeline-operator-reference`

- `Practical MongoDB Aggregations
  <https://www.practical-mongodb-aggregations.com>`_

.. toctree::
   :titlesonly:
   :hidden:

   Field Paths </core/field-paths>
   Optimization </core/aggregation-pipeline-optimization>
   Limits </core/aggregation-pipeline-limits>
   Sharded Collections </core/aggregation-pipeline-sharded-collections>
   Zip Code Example </tutorial/aggregation-zip-code-data-set>
   User Preference Example </tutorial/aggregation-with-user-preference-data>
