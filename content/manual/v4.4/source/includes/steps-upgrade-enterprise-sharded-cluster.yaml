title: Disable the Balancer.
level: 4
ref: upgrade-enterprise-disable-balancer
content: |

   Connect a :binary:`~bin.mongo` shell to a :binary:`~bin.mongos` instance in
   the sharded cluster, and run :method:`sh.stopBalancer()` to
   disable the balancer:

   .. code-block:: javascript

      sh.stopBalancer()

   .. note::

      If a migration is in progress, the system will complete the
      in-progress migration before stopping the balancer. You can run
      :method:`sh.isBalancerRunning()` to check the balancer's current
      state.

   To verify that the balancer is disabled, run
   :method:`sh.getBalancerState()`, which returns false if the balancer
   is disabled:

   .. code-block:: javascript

      sh.getBalancerState()

   .. include:: /includes/extracts/4.2-changes-stop-balancer-autosplit.rst
  
   For more information on disabling the balancer, see
   :ref:`sharding-balancing-disable-temporarily`.

---
title: "Upgrade the config servers."
level: 4
ref: upgrade-enterprise-config-servers
content: |-
   1. Upgrade the :ref:`secondary <replica-set-secondary-members>`
      members of the replica set one at a time:

      a. Shut down the secondary :binary:`~bin.mongod` instance.

      #. Restart the member with the Enterprise :binary:`~bin.mongod`,
         specifying the same configuration options (e.g. same
         data directory, configuration file, etc.).

      #. Wait for the member to recover to ``SECONDARY`` state before
         upgrading the next secondary member. To check the member's state,
         issue :method:`rs.status()` in the :binary:`~bin.mongo` shell.

      Repeat for each remaining secondary member.

   #. Step down the replica set primary.

      Connect a :binary:`~bin.mongo` shell to the primary and use
      :method:`rs.stepDown()` to step down the primary and force an
      election of a new primary:

      .. code-block:: javascript

         rs.stepDown()

   #. When :method:`rs.status()` shows that the primary has stepped
      down and another member is primary, upgrade the stepped-down
      primary:
      
      a. Shut down the stepped-down primary.

      #. Restart with the Enterprise :binary:`~bin.mongod`,
         specifying the same configuration options (e.g. same
         data directory, configuration file, etc.).

---
title: Upgrade the shards.
level: 4
ref: upgrade-enterprise-shards
content: |-
   Upgrade the shards one at a time.

   For each shard replica set:

   1. Upgrade the :ref:`secondary <replica-set-secondary-members>`
      members of the replica set one at a time:

      a. Shut down the secondary :binary:`~bin.mongod` instance.

      #. Restart the member with the Enterprise :binary:`~bin.mongod`,
         specifying the same configuration options (e.g. same
         data directory, configuration file, etc.).

      #. Wait for the member to recover to ``SECONDARY`` state before
         upgrading the next secondary member. To check the member's state,
         issue :method:`rs.status()` in the :binary:`~bin.mongo` shell.

      Repeat for each remaining secondary member.

   #. Step down the replica set primary.

      Connect a :binary:`~bin.mongo` shell to the primary and use
      :method:`rs.stepDown()` to step down the primary and force an
      election of a new primary:

      .. code-block:: javascript

         rs.stepDown()

   #. When :method:`rs.status()` shows that the primary has stepped
      down and another member is primary, upgrade the stepped-down
      primary:

      a. Shut down the stepped-down primary.

      #. Restart with the Enterprise :binary:`~bin.mongod`,
         specifying the same configuration options (e.g. same
         data directory, configuration file, etc.).
---
title: "Upgrade the ``mongos`` instances."
level: 4
ref: upgrade-enterprise-mongos-instances
content: |-
   For each :binary:`~bin.mongos` instance, shutdown
   :binary:`~bin.mongos` and restart with the Enterprise :binary:`~bin.mongos`,
   specifying the same configuration options.

---
title: "Re-enable the balancer."
level: 4
ref: upgrade-enterprise-reenable-balancer
content: |-

   Using a :binary:`~bin.mongo` shell, connect to a
   :binary:`~bin.mongos` in the cluster and run
   :method:`sh.startBalancer()` to re-enable the balancer:

   .. code-block:: javascript
   
      sh.startBalancer()

   .. include:: /includes/extracts/4.2-changes-start-balancer-autosplit.rst
   
   For more inforamtion on the balancer, see
   :ref:`sharding-balancing-enable`.

...
