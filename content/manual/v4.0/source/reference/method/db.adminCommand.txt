=================
db.adminCommand()
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.adminCommand(command)

   Provides a helper to run specified :doc:`database commands
   </reference/command>` against the ``admin`` database.


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``command``
   
        - document or string
   
        - A :term:`database command`, specified either in :term:`document` form
          or as a string. If specified as a string, the command cannot include
          any arguments.
          
          
   


Behavior
--------

:method:`db.adminCommand` runs commands against the ``admin``
database regardless of the database context in which it runs.
The following commands are equivalent:

.. code-block:: javascript

   db.getSiblingDB("admin").runCommand(<command>)

   db.adminCommand(<command>)

For a list of available administrative database commands, see
:doc:`/reference/command/nav-administration`.

.. note::

   For a :binary:`~bin.mongod` or :binary:`~bin.mongos` running with
   :setting:`~security.authorization`, the authorized user must have
   the appropriate privileges to run the database command. See the
   reference documentation for the command for more information on
   security requirements.

.. _db-adminCommand-response:

Response
--------

The method returns a response document that contains the following
fields:

.. include:: /includes/fact-runCommand-results.rst

.. _admincommand-examples:

Examples
--------

killOp
~~~~~~

The following example uses the :method:`db.adminCommand()`
method to execute a :dbcommand:`killOp` command to terminate an
operation with ``opid 724``. :dbcommand:`killOp` is an administrative
command and must be run against the ``admin`` database.

.. code-block:: javascript

   db.adminCommand( { "killOp": 1, "op": 724 } )

renameCollection
~~~~~~~~~~~~~~~~

The following example uses :method:`db.adminCommand()` to execute
the :dbcommand:`renameCollection` administrative database command
to rename the ``orders`` collection in the ``test`` database to
``orders-2016``.

.. code-block:: javascript

   db.adminCommand(
     {
        renameCollection: "test.orders",
        to: "test.orders-2016"
     }
   )

createUser
~~~~~~~~~~

The following example uses the :method:`db.adminCommand()` method to
create a user named ``bruce`` with the :authrole:`dbOwner` role on the
``admin`` database.

.. code-block:: javascript

   db.adminCommand(
     {
       createUser: "bruce",
       pwd: "bruce123",
       roles: [
         { role: "dbOwner", db: "admin" }
       ]
     }
   )
