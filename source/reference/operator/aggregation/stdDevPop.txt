=========================
$stdDevPop (aggregation)
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. group:: $stdDevPop

   .. versionchanged:: 5.0

   Calculates the population standard deviation of the input values.
   Use if the values encompass the entire population of data you want
   to represent and do not wish to generalize about a larger
   population. :group:`$stdDevPop` ignores non-numeric values.

   If the values represent only a sample of a population of data from
   which to generalize about the population, use :group:`$stdDevSamp`
   instead.

   .. include:: /includes/extracts/fact-aggregation-accumulator-stdDevPop.rst

   When used in the :pipeline:`$group` or :pipeline:`$setWindowFields`
   stage, :group:`$stdDevPop` has the following syntax and respectively
   returns the population standard deviation of the specified
   :ref:`expression <aggregation-expressions>` for:

   - A group of documents that share the same group by key.

   - The documents in a :ref:`window <setWindowFields-window>`.

   .. code-block:: none
      :copyable: false

      { $stdDevPop: <expression> }

   When used in the other supported stages, :group:`$stdDevPop` returns
   the standard deviation of the specified expression or list of
   expressions for each document and has one of two syntaxes:

   - :group:`$stdDevPop` has one specified expression as its operand:

     .. code-block:: none
        :copyable: false

        { $stdDevPop: <expression> }

   - :group:`$stdDevPop` has a list of specified expressions as its
     operand:

     .. code-block:: none
        :copyable: false

        { $stdDevPop: [ <expression1>, <expression2> ... ]  }

   The argument for :group:`$stdDevPop` can be any
   :ref:`expression <aggregation-expressions>` as long as it resolves
   to an array. For more information on expressions, see
   :ref:`aggregation-expressions`.

Behavior
--------

Non-numeric Values
~~~~~~~~~~~~~~~~~~

:group:`$stdDevPop` ignores non-numeric values. If all operands for a
:group:`$stdDevPop` are non-numeric, :group:`$stdDevPop` returns
``null``.

Single Value
~~~~~~~~~~~~

If the sample consists of a single numeric value, :group:`$stdDevPop`
returns ``0``.

Array Operand
~~~~~~~~~~~~~

In the :pipeline:`$group` and :pipeline:`$setWindowFields` stages,
if the expression resolves to an array, :group:`$stdDevPop` treats the
operand as a non-numerical value and has no effect on the calculation.

.. include:: /includes/extracts/fact-agg-accumulator-array-operand-in-project-stdDevPop.rst

Window Values
~~~~~~~~~~~~~

.. include:: /includes/stdDev-behavior.rst

Examples
--------

Use in ``$group`` Stage
~~~~~~~~~~~~~~~~~~~~~~~

A collection named ``users`` contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "name" : "dave123", "quiz" : 1, "score" : 85 }
   { "_id" : 2, "name" : "dave2", "quiz" : 1, "score" : 90 }
   { "_id" : 3, "name" : "ahn", "quiz" : 1, "score" : 71 }
   { "_id" : 4, "name" : "li", "quiz" : 2, "score" : 96 }
   { "_id" : 5, "name" : "annT", "quiz" : 2, "score" : 77 }
   { "_id" : 6, "name" : "ty", "quiz" : 2, "score" : 82 }

The following example calculates the standard deviation of each quiz:

.. code-block:: javascript

   db.users.aggregate([
      { $group: { _id: "$quiz", stdDev: { $stdDevPop: "$score" } } }
   ])

The operation returns the following results:

.. code-block:: javascript
   :copyable: false

   { "_id" : 2, "stdDev" : 8.04155872120988 }
   { "_id" : 1, "stdDev" : 8.04155872120988 }

Use in ``$project`` Stage
~~~~~~~~~~~~~~~~~~~~~~~~~

Create an example collection named ``quizzes`` with the following
documents:

.. code-block:: javascript

   db.quizzes.insertMany([
      {
         "_id" : 1,
         "scores" : [
            { "name" : "dave123", "score" : 85 },
            { "name" : "dave2", "score" : 90 },
            { "name" : "ahn", "score" : 71 }
         ]
      },
      {
         "_id" : 2,
         "scores" : [
            { "name" : "li", "quiz" : 2, "score" : 96 },
            { "name" : "annT", "score" : 77 },
            { "name" : "ty", "score" : 82 }
         ]
      }
   ])

The following example calculates the standard deviation of each quiz:

.. code-block:: javascript

   db.quizzes.aggregate([
      { $project: { stdDev: { $stdDevPop: "$scores.score" } } }
   ])

The operation returns the following results:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "stdDev" : 8.04155872120988 }
   { "_id" : 2, "stdDev" : 8.04155872120988 }

Use in ``$setWindowFields`` Stage
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 5.0

.. include:: /includes/setWindowFields-example-collection.rst

This example uses :group:`$stdDevPop` in the
:pipeline:`$setWindowFields` stage to output the population standard
deviation of the cake sales ``quantity`` for each ``state``:

.. code-block:: javascript

   db.cakeSales.aggregate( [
      {
         $setWindowFields: {
            partitionBy: "$state",
            sortBy: { orderDate: 1 },
            output: {
               stdDevPopQuantityForState: {
                  $stdDevPop: "$quantity",
                  window: {
                     documents: [ "unbounded", "current" ]
                  }         
               }
            }
         }
      }
   ] )

In the example:

.. include:: /includes/setWindowFields-partition-sort-date.rst

- ``output`` sets the ``stdDevPopQuantityForState`` field to the
  ``quantity`` population standard deviation value using
  :group:`$stdDevPop` that is run in a :ref:`documents
  <setWindowFields-documents>` window.

  The :ref:`window <setWindowFields-window>` contains documents between
  an ``unbounded`` lower limit and the ``current`` document in the
  output. This means :group:`$stdDevPop` returns the ``quantity``
  population standard deviation value for the documents between the
  beginning of the partition and the current document.

In this example output, the ``quantity`` population standard deviation
value for ``CA`` and ``WA`` is shown in the
``stdDevPopQuantityForState`` field:

.. code-block:: javascript
   :copyable: false

   { "_id" : 4, "type" : "strawberry", "orderDate" : ISODate("2019-05-18T16:09:01Z"),
     "state" : "CA", "price" : 41, "quantity" : 162, "stdDevPopQuantityForState" : 0 }
   { "_id" : 0, "type" : "chocolate", "orderDate" : ISODate("2020-05-18T14:10:30Z"),
     "state" : "CA", "price" : 13, "quantity" : 120, "stdDevPopQuantityForState" : 21 }
   { "_id" : 2, "type" : "vanilla", "orderDate" : ISODate("2021-01-11T06:31:15Z"),
     "state" : "CA", "price" : 12, "quantity" : 145, "stdDevPopQuantityForState" : 17.249798710580816 }
   { "_id" : 5, "type" : "strawberry", "orderDate" : ISODate("2019-01-08T06:12:03Z"),
     "state" : "WA", "price" : 43, "quantity" : 134, "stdDevPopQuantityForState" : 0 }
   { "_id" : 3, "type" : "vanilla", "orderDate" : ISODate("2020-02-08T13:13:23Z"),
     "state" : "WA", "price" : 13, "quantity" : 104, "stdDevPopQuantityForState" : 15 }
   { "_id" : 1, "type" : "chocolate", "orderDate" : ISODate("2021-03-20T11:30:05Z"),
     "state" : "WA", "price" : 14, "quantity" : 140, "stdDevPopQuantityForState" : 15.748015748023622 }
