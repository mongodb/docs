.. _bson-data-types-token:

==============================================================
How to Index String Fields for Efficient Filtering and Sorting 
==============================================================

.. default-domain:: mongodb

.. meta::
   :keywords: token, token field type, atlas search field type, sort atlas search results, field type for sorting results by string values, field type for querying string values using in operator, field type for querying string values using equals operator, field type for querying string values using range operator, index string for filtering, index string for sorting
   :description: Use the token field type to index string values in fields for sorting and querying using equals, in, and range operators.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. |fts-field-type| replace:: ``token``
.. |sample-collection| replace:: :ref:`sample_mflix.movies <sample-mflix>`
.. |properties-link| replace:: :ref:`Field Properties <fts-field-types-token-options>`

You can use the |fts| ``token`` type to index :manual:`string 
</reference/bson-types/#string>` fields for sorting the |fts| results.
You can then use the :pipeline:`$search` ``sort`` option in your query
to sort the results by the indexed field. To learn more, see
:ref:`sort-ref`. You can also use the |fts| ``token`` type to index
:manual:`string </reference/bson-types/#string>` fields for
pre-filtering the data that the :pipeline:`$vectorSearch`
queries analyze. To learn more, see :ref:`fts-vector-search`.

To run queries against :manual:`string </reference/bson-types/#string>`
fields using the following operators, you must index the field as the
|fts| ``token`` type: 

- :ref:`equals <equals-ref>`
- :ref:`in <in-ref>`
- :ref:`range <range-ref>`

To learn more, see the documentation for each respective :ref:`operator <operators-ref>`.

.. _fts-token-type-limitations:

``token`` Type Limitations 
--------------------------

When you index a field as the ``token`` type, you must index that field
as ``string`` type also to query the text value using operators such as
:ref:`text-ref`, :ref:`phrase-ref`, etc. For the following operators,
you don't need to index the field as ``string`` type also to query the
text value in the field:  

- :ref:`equals <equals-ref>`
- :ref:`in <in-ref>`
- :ref:`range <range-ref>`

Review the Behavior of the |fts-field-type| Type  
------------------------------------------------

When you index a field as ``token`` type, |fts| indexes the terms in
the string as a single token (searchable term) and stores them in a
columnar storage for efficient filtering or sort operations. You
can use a :ref:`normalizer <ref-built-in-normalizers>` to transform the
token. By default, the normalizer is set to ``none`` and so |fts|
indexes strings in their original form. 

The major difference between the |fts| ``string`` and ``token`` types is
that |fts| creates one or more tokens for fields indexed as ``string``
type whereas |fts| creates only a single token for fields indexed as the
``token`` type. 

If a string being indexed as a ``token`` field type exceeds 8181
characters, |fts| truncates it to 8181 characters before indexing.

.. _fts-field-types-string-vib-jsonib:

Define the Index for the |fts-field-type| Type 
----------------------------------------------

.. include:: /includes/fts/extracts/fts-index-definition-intro.rst 

.. tabs:: 

   .. tab:: Visual Editor 
      :tabid: vib

      1. Click :guilabel:`Refine Your Index` to configure your index.  
      #. In the :guilabel:`Field Mappings` section, click :guilabel:`Add 
         Field` to open the :guilabel:`Add Field Mapping` window. 
      #. Click :guilabel:`Customized Configuration`.
      #. Select the field to index from the :guilabel:`Field Name`
         dropdown.  

         .. note:: 

            .. include:: /includes/fts/facts/fact-fts-field-name-restriction.rst

      #. Click the :guilabel:`Data Type` dropdown and select
         :guilabel:`Token`. 
      #. (Optional) Expand and configure the :guilabel:`Token
         Properties` for the field. To learn more, see
         :ref:`fts-field-types-token-options`. 
      #. Click :guilabel:`Add`. 

   .. tab:: JSON Editor 
      :tabid: jsonib

      .. include:: /includes/fts/extracts/fts-jsonib-index-definition.rst  

      .. code-block:: json 
         :emphasize-lines: 6-7

         {
           "mappings": {
             "dynamic": true|false,
             "fields": {
               "<field-name>": {
                 "type": "token",
                 "normalizer": "lowercase | none"
               }
             }
           }
         }

.. _fts-field-types-token-options: 

Configure |fts-field-type| Field Properties  
-------------------------------------------

The |fts| |fts-field-type| type takes the following parameters:

.. list-table::
   :widths: 20 10 10 40 20
   :header-rows: 1

   * - Option
     - Type
     - Necessity
     - Description
     - Default

   * - ``type``
     - string
     - Required
     - Human-readable label that identifies this field type.
       Value must be ``token``.
     - 

   * - ``normalizer``
     - string
     - Optional
     - Type of transformation to perform on the field value. Value can
       be one of the following:  
       
       - ``lowercase`` - to transform text values in string fields to
         lowercase. 
       - ``none`` - to not perform any transformation.

       If you don't set this option explicitly, it defaults to ``none``. 

     - ``none``

.. _fts-field-types-string-egs:

Try an Example for the |fts-field-type| Type  
--------------------------------------------

.. include:: /includes/fts/extracts/fts-index-definition-egs-intro.rst 

.. tabs::  

   .. tab:: Index as token Type Only  
      :tabid: basic 

      The following index definition indexes string values in the  
      ``title`` field as |fts| |fts-field-type| type and converts the
      field value to ``lowercase``, which allows you to do the
      following: 
      
      - Perform case-insensitive sort, as specified by the
        ``normalizer``, on the ``title`` field.
      - Run exact match queries on the ``title`` field using the
        following operators:  

        - :ref:`equals <equals-ref>`
        - :ref:`in <in-ref>`
        - :ref:`range <range-ref>`

      .. tabs::

         .. tab:: Visual Editor 
            :tabid: vib

            a. In the :guilabel:`Add Field Mapping` window, select
               :guilabel:`title` from the :guilabel:`Field Name` 
               dropdown. 
            #. Click the :guilabel:`Data Type` dropdown and select
               :guilabel:`Token`.   
            #. Expand :guilabel:`Token Properties` and select
               ``lowercase`` from the :guilabel:`Normalizer` dropdown.  
            #. Click :guilabel:`Add`.

         .. tab:: JSON Editor 
            :tabid: jsonib

            Replace the default index definition with the following index
            definition.

            .. code-block:: json 
               :emphasize-lines: 6

               {
                 "mappings": {
                   "dynamic": false,
                   "fields": {
                     "title": {
                       "type": "token",
                       "normalizer": "lowercase"
                     }
                   }
                 }
               }

   .. tab:: Index as Multiple Types
      :tabid: multi

      The following index definition indexes the ``genres`` field as  
      ``string`` and ``token`` types to return the following: 
      
      - Search results for queries using |fts| operators like
        :ref:`text-ref`, :ref:`phrase-ref`, and other operators that
        perform text search on the ``genres`` field. 
      - Sorted results for queries using the :pipeline:`$search`
        :ref:`sort <sort-ref>` option on the ``genres`` field.
      - Exact matches for queries using |fts| operators like
        :ref:`equals-ref`, :ref:`in-ref`, and :ref:`range-ref`.  

      .. tabs::

         .. tab:: Visual Editor 
            :tabid: vib

            1. In the :guilabel:`Add Field Mapping` window, select
               :guilabel:`genres` from the :guilabel:`Field
               Name` dropdown. 
            #. Click the :guilabel:`Data Type` dropdown and select
               :guilabel:`Token`.
            #. Click :guilabel:`Add`. 
            #. Repeat step **1** and select :guilabel:`String` from the
               :guilabel:`Data Type` dropdown.
            #. Review the default setting for :guilabel:`String
               Properties` and click :guilabel:`Add`.

         .. tab:: JSON Editor 
            :tabid: jsonib

            Replace the default index definition with the following index
            definition.

            .. code-block:: json
               :copyable: true

               {
                 "mappings": {
                   "dynamic": false,
                   "fields": {
                     "genres": [{
                       "type": "string"
                     },
                     {
                       "type": "token"
                     }]
                   }
                 }
               }
