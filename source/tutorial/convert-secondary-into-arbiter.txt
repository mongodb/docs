=================================
Convert a Secondary to an Arbiter
=================================

.. default-domain:: mongodb

If you have a :term:`secondary` in a :term:`replica set` that no
longer needs to hold data but that needs to remain in the set to
ensure that the set can :ref:`elect a primary
<replica-set-elections>`, you may convert the secondary to an
:ref:`arbiter <replica-set-arbiters>` using either procedure in this
tutorial. Both procedures are operationally equivalent:

- You may operate the arbiter on the same port as the former secondary.
  In this procedure, you must shut down the secondary and remove its
  data before restarting and reconfiguring it as an arbiter.

  For this procedure, see :ref:`replica-set-convert-secondary-to-arbiter-same-port`.

- Run the arbiter on a new port. In this procedure, you can reconfigure
  the server as an arbiter before shutting down the instance running as
  a secondary.

  For this procedure, see :ref:`replica-set-convert-secondary-to-arbiter`.

.. _replica-set-convert-secondary-to-arbiter-same-port:

Convert Secondary to Arbiter and Reuse the Port Number
------------------------------------------------------

#. If your application is connecting directly to the secondary,
   modify the application so that MongoDB queries don't reach
   the secondary.

#. Shut down the secondary.

#. Remove the :term:`secondary` from the :term:`replica set` by calling
   the :method:`rs.remove()` method. Perform this operation while connected to the current
   :term:`primary` in the :program:`mongo` shell:

   .. code-block:: javascript

      rs.remove("<hostname><:port>")

#. Verify that the replica set no longer includes the secondary by
   calling the :method:`rs.conf()` method in the :program:`mongo` shell:

   .. code-block:: javascript

      rs.conf()

#. Move the secondary's data directory to an archive folder. For example:

   .. code-block:: sh

      mv /data/db /data/db-old

   .. optional:: You may remove the data instead.

#. Create a new, empty data directory to point to when restarting the
   :program:`mongod` instance. You can reuse the previous name. For
   example:

   .. code-block:: sh

      mkdir /data/db

#. Restart the :program:`mongod` instance for the secondary, specifying
   the port number, the empty data directory, and the replica set. You
   can use the same port number you used before. Issue a command similar
   to the following:

   .. code-block:: sh

      mongod --port 27021 --dbpath /data/db --replSet rs

#. In the :program:`mongo` shell convert the secondary to an arbiter
   using the :method:`rs.addArb()` method:

   .. code-block:: javascript

      rs.addArb("<hostname><:port>")

#. Verify the arbiter belongs to the replica set by calling the
   :method:`rs.conf()` method in the :program:`mongo` shell.

   .. code-block:: javascript

      rs.conf()

   The arbiter member should include the following:

   .. code-block:: javascript

      "arbiterOnly" : true

.. _replica-set-convert-secondary-to-arbiter:

Convert Secondary to Arbiter Running on a New Port Number
---------------------------------------------------------

#. If your application is connecting directly to the secondary
   or has a connection string referencing the secondary,
   modify the application so that MongoDB queries don't reach
   the secondary.

#. Create a new, empty data directory to be used with the new port
   number. For example:

   .. code-block:: sh

      mkdir /data/db-temp

#. Start a new :program:`mongod` instance on the new port number,
   specifying the new data directory and the existing replica
   set. Issue a command similar to the following:

   .. code-block:: sh

      mongod --port 27021 --dbpath /data/db-temp --replSet rs

#. In the :program:`mongo` shell connected to the current primary,
   convert the new :program:`mongod` instance to an arbiter using the :method:`rs.addArb()`
   method:

   .. code-block:: javascript

      rs.addArb("<hostname><:port>")

#. Verify the arbiter has been added to the replica set by calling the
   :method:`rs.conf()` method in the :program:`mongo` shell.

   .. code-block:: javascript

      rs.conf()

   The arbiter member should include the following:

   .. code-block:: javascript

      "arbiterOnly" : true

#. Shut down the secondary.

#. Remove the :term:`secondary` from the :term:`replica set` by calling
   the :method:`rs.remove()` method in the :program:`mongo` shell:

   .. code-block:: javascript

      rs.remove("<hostname><:port>")

#. Verify that the replica set no longer includes the old secondary by
   calling the :method:`rs.conf()` method in the :program:`mongo` shell:

   .. code-block:: javascript

      rs.conf()

#. Move the secondary's data directory to an archive folder. For example:

   .. code-block:: sh

      mv /data/db /data/db-old

   .. optional:: You may remove the data instead.
