.. meta::
   :robots: noindex, nosnippet

.. _java-manage-email-password-users:

======================================
Manage Email/Password Users - Java SDK
======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

When you have enabled the :ref:`email/password provider
<email-password-authentication>` in your App, you can register a new
account, confirm an email address, and reset a user's password from
client code.

.. _java-register-a-new-user-account:

Register a New User Account
---------------------------

To register a new user, pass a user-provided email and password to the
:java-sdk:`registerUser() <io/realm/mongodb/auth/EmailPasswordAuth.html#registerUser-java.lang.String-java.lang.String->`
or :java-sdk:`registerUserAsync()
<io/realm/mongodb/auth/EmailPasswordAuth.html#registerUserAsync-java.lang.String-java.lang.String-io.realm.mongodb.App.Callback->`
methods of your Realm ``App``'s :java-sdk:`EmailPasswordAuth <io/realm/mongodb/auth/EmailPasswordAuth.html>`
instance:

.. tabs-realm-languages::
   
   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/java/sync/ManageEmailPasswordTest.snippet.register-a-new-user-account.kt
         :language: kotlin
         :copyable: false

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/java/sync/ManageEmailPasswordTest.snippet.register-a-new-user-account.java
         :language: java
         :copyable: false

.. _java-confirm-a-new-users-email-address:

Confirm a New User's Email Address
----------------------------------

To confirm a newly-created user, pass a confirmation ``token`` and
``tokenId`` to the :java-sdk:`confirmUser() <io/realm/mongodb/auth/EmailPasswordAuth.html#confirmUser-java.lang.String-java.lang.String->`
or :java-sdk:`confirmUserAsync() <io/realm/mongodb/auth/EmailPasswordAuth.html#confirmUserAsync-java.lang.String-java.lang.String-io.realm.mongodb.App.Callback->`
methods of your Realm ``App``'s :java-sdk:`EmailPasswordAuth <io/realm/mongodb/auth/EmailPasswordAuth.html>`
instance:

.. tabs-realm-languages::
   
   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/java/sync/ManageEmailPasswordTest.snippet.confirm-a-new-users-email-address.kt
         :language: kotlin
         :copyable: false

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/java/sync/ManageEmailPasswordTest.snippet.confirm-a-new-users-email-address.java
         :language: java
         :copyable: false

.. tip::

   To access the ``token`` and ``tokenId`` values sent in the user
   confirmation email, you can use a :ref:`custom confirmation email subject
   <auth-send-a-confirmation-email>` containing a `deep link
   <https://developer.android.com/training/app-links/deep-linking>`__.

.. _java-reset-a-users-password:

Reset a User's Password
-----------------------

To reset a user password in Sync, you can either:

- Send a password reset email
- Run a password reset function

Select your preferred password reset method by going to:

1. Your App
#. :guilabel:`Authentication`
#. :guilabel:`Authentication Providers`
#. :guilabel:`Email/Password` - and press the :guilabel:`EDIT` button

Send a Password Reset Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To reset a user's password, first send the user a password reset email with
:java-sdk:`sendResetPasswordEmail() <io/realm/mongodb/auth/EmailPasswordAuth.html#sendResetPasswordEmail-java.lang.String->`
or :java-sdk:`sendResetPasswordEmailAsync() <io/realm/mongodb/auth/EmailPasswordAuth.html#sendResetPasswordEmailAsync-java.lang.String-io.realm.mongodb.App.Callback->`:

.. tabs-realm-languages::
   
   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/java/sync/ManageEmailPasswordTest.snippet.send-reset-password-email.kt
         :language: kotlin
         :copyable: false

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/java/sync/ManageEmailPasswordTest.snippet.send-reset-password-email.java
         :language: java
         :copyable: false

Password reset emails contain two values, ``token`` and ``tokenId``.
To complete the password reset flow, prompt the user to enter a new
password and pass the ``token`` and ``tokenId`` values along with the
new password value to your Realm ``App``'s
:java-sdk:`EmailPasswordAuth <io/realm/mongodb/auth/EmailPasswordAuth.html>`
instance's :java-sdk:`resetPassword() <io/realm/mongodb/auth/EmailPasswordAuth.html#resetPassword-java.lang.String-java.lang.String-java.lang.String->`
or :java-sdk:`resetPasswordAsync()
<io/realm/mongodb/auth/EmailPasswordAuth.html#resetPasswordAsync-java.lang.String-java.lang.String-java.lang.String-io.realm.mongodb.App.Callback->`
methods:

.. tabs-realm-languages::
   
   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/java/sync/ManageEmailPasswordTest.snippet.reset-password.kt
         :language: kotlin
         :copyable: false

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/java/sync/ManageEmailPasswordTest.snippet.reset-password.java
         :language: java
         :copyable: false

.. tip::

   To access the ``token`` and ``tokenId`` values sent in the password
   reset email, you can use a :ref:`custom password reset email subject
   <auth-send-a-password-reset-email>` containing a `deep link
   <https://developer.android.com/training/app-links/deep-linking>`__.

Run a Password Reset Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you configure your app to :ref:`run a password reset function 
<auth-run-a-password-reset-function>`, you'll define the function that 
should run when you call :java-sdk:`callResetPasswordFunction() <io/realm/mongodb/auth/EmailPasswordAuth.html#callResetPasswordFunction-java.lang.String-java.lang.String-java.lang.Object...->` 
or :java-sdk:`callResetPasswordFunctionAsync() <io/realm/mongodb/auth/EmailPasswordAuth.html#callResetPasswordFunctionAsync-java.lang.String-java.lang.String-java.lang.Object:A-io.realm.mongodb.App.Callback->`
from the SDK. This function can take a username, a password, and any number 
of additional arguments. You can use these arguments to specify details 
like security question answers or other challenges that the user should 
pass to successfully complete a password reset.

You might prefer to use a custom password reset function when you want to
define your own password reset flows. For example, you might send a custom 
password reset email from a specific domain, or through a service other 
than email.

.. seealso::

   For more information on how to define a custom password reset function
   in your App, see: :ref:`Run a Password Reset Function 
   <auth-run-a-password-reset-function>`.

.. tabs-realm-languages::
   
   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/java/sync/ManageEmailPasswordTest.snippet.run-password-reset-func.kt
         :language: kotlin
         :copyable: false

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/java/sync/ManageEmailPasswordTest.snippet.run-password-reset-func.java
         :language: java
         :copyable: false
