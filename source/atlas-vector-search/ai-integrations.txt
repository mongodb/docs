.. _vector-search-integrations:
.. _ai-integrations:

============================================
Integrate Vector Search with AI Technologies
============================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta::
   :description: Learn how to integrate Atlas Vector Search with our partner AI integrations.
   :keywords: RAG, OpenAI, LangChain, LlamaIndex, {+aws-bedrock+}, integrations, chatbot, vector database, vector search, code example, java, python, node.js, C#

.. dismissible-skills-card::
   :skill: RAG with MongoDB
   :url: https://learn.mongodb.com/skills?openTab=gen+ai

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can use {+avs+} with popular AI providers and |llm|\s through
their standard |api|\s. MongoDB and partners also provide 
specific product integrations to help you leverage {+avs+}
in your :ref:`RAG <avs-rag>` and AI-powered applications. 

This page highlights notable AI integrations 
that MongoDB and partners have developed. For a complete 
list of integrations and partner services, 
see :ref:`explore-ecosystem`.

.. _ai-frameworks:

Frameworks
----------

You can integrate {+avs+} with the following open-source frameworks
to store custom data in |service| and implement |rag| with {+avs+}.

LangChain
~~~~~~~~~

`LangChain <https://langchain.com/>`__ is a framework
that simplifies the creation of |llm| applications
through the use of "chains," which are LangChain-specific
components that can be combined together for a variety of use 
cases, including |rag|.

To get started, see the following resources:

- :ref:`langchain`.
- :ref:`langchain-js`.

LangGraph
~~~~~~~~~

`LangGraph <https://www.langchain.com/langgraph/>`__ is a specialized framework
within the LangChain ecosystem designed for building AI agents and
complex multi-agent workflows. LangGraph's graph-based approach allows 
you to dynamically determine the execution path of your application,
enabling advanced agentic applications and use cases. It also supports 
features like persistence, streaming, and memory.

To get started, see the following resources:

- :ref:`langgraph`
- :ref:`langgraph-js`

LangChainGo
~~~~~~~~~~~

`LangChainGo <https://pkg.go.dev/github.com/tmc/langchaingo>`__ is a framework
that simplifies the creation of |llm| applications in Go. LangChainGo
incorporates the capabilities of LangChain into the Go ecosystem. You can use
LangChainGo for a variety of use cases, including semantic search and |rag|.

To get started, see :ref:`langchaingo`.

LangChain4j
~~~~~~~~~~~

`LangChain4j <https://docs.langchain4j.dev/>`__ is a framework 
that simplifies the creation of |llm| applications in Java. LangChain4j
combines concepts and functionality from LangChain, Haystack,
LlamaIndex, and other sources. You can use LangChain4j for a variety of
use cases, including semantic search and |rag|.

To get started, see :ref:`langchain4j`.

LlamaIndex
~~~~~~~~~~

`LlamaIndex <https://llamaindex.ai/>`__ is a framework 
that simplifies how you connect custom data sources to |llm|\s. 
It provides several tools to help you load and prepare vector embeddings 
for |rag| applications.

To get started, see :ref:`llamaindex`.

Semantic Kernel
~~~~~~~~~~~~~~~

Microsoft `Semantic Kernel 
<https://learn.microsoft.com/en-us/semantic-kernel/overview/>`__
is an SDK that allows you to combine various AI services
with your applications. You can use Semantic Kernel for a variety 
of use cases, including |rag|.

To get started, see the following tutorials:

- :ref:`semantic-kernel-csharp`.
- :ref:`semantic-kernel`.

Haystack
~~~~~~~~

`Haystack <https://haystack.deepset.ai/integrations/mongodb>`__ is a framework 
for building custom applications with |llm|\s, embedding models, 
vector search, and more. It enables use cases
such as question-answering and |rag|.

To get started, see :ref:`haystack`.

Spring AI
~~~~~~~~~

`Spring AI <https://spring.io/projects/spring-ai>`__
is an application framework that allows you to apply Spring
design principles to your AI application. You can use Spring AI for a
variety of use cases, including semantic search and |rag|.

To get started, see :ref:`spring-ai`.

Platforms
---------

You can also integrate {+avs+} with the following enterprise platforms.

{+aws-bedrock+}
~~~~~~~~~~~~~~

`{+aws-bedrock+} <https://aws.amazon.com/bedrock/>`__ is a fully-managed 
platform for building generative AI applications. You can integrate 
{+avs+} as a `knowledge base <https://aws.amazon.com/bedrock/knowledge-bases/>`__
for {+aws-bedrock+} to store custom data in |service| and implement |rag|.

To get started, see :ref:`amazon-bedrock`.

Google Vertex AI
~~~~~~~~~~~~~~~~

`Vertex AI <https://cloud.google.com/vertex-ai>`__ is a platform
from |gcp| for building and deploying AI applications and agents. 
The Vertex AI platform includes several tools and pre-trained 
models from Google that you can use with |service| for |rag| 
and other uses cases such as natural language querying.

To get started, see :ref:`google-vertex-ai`.

.. collapsible:: 
   :heading: API Resources
   :sub_heading: Refer to the following resources as you develop with our integrations.
   :expanded: false

   .. include:: /includes/avs/ai-integrations/api-resources.rst

.. toctree::
   :titlesonly:

   LangChain </atlas-vector-search/ai-integrations/langchain>
   LangChain JS/TS </atlas-vector-search/ai-integrations/langchain-js>
   LangGraph </atlas-vector-search/ai-integrations/langgraph>
   LangGraph.js </atlas-vector-search/ai-integrations/langgraph-js>
   LangChainGo </atlas-vector-search/ai-integrations/langchaingo>
   LangChain4j </atlas-vector-search/ai-integrations/langchain4j>
   LlamaIndex </atlas-vector-search/ai-integrations/llamaindex>
   Semantic Kernel </atlas-vector-search/ai-integrations/semantic-kernel>
   Haystack </atlas-vector-search/ai-integrations/haystack>
   Spring AI </atlas-vector-search/ai-integrations/spring-ai>
   {+aws-bedrock+} </atlas-vector-search/ai-integrations/amazon-bedrock>
   Google Vertex AI </atlas-vector-search/ai-integrations/google-vertex-ai>
   API Resources </atlas-vector-search/ai-integrations/ai-api-resources>
