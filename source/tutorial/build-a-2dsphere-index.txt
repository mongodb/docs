.. _geospatial-indexes-create-2dsphere:

===========================
Create a ``2dsphere`` Index
===========================

.. default-domain:: mongodb

To create a geospatial index for GeoJSON-formatted data, use the
:method:`db.collection.ensureIndex()` method to create a :doc:`2dsphere
index </core/2dsphere>`. In the index specification document for the
:method:`db.collection.ensureIndex()` method, specify the location
field as the index key and specify the string literal ``"2dsphere"`` as
the value:

.. code-block:: javascript

   db.collection.ensureIndex( { <location field> : "2dsphere" } )

The following procedure presents steps to populate a collection with
documents that contain a GeoJSON data field and create :doc:`2dsphere
indexes </core/2dsphere>`. Although the procedure populates the
collection first, you can also create the indexes before populating the
collection.

Procedure
---------

First, populate a collection ``places`` with documents that store
location data as :ref:`GeoJSON Point <geojson-point>` in a field named
``loc``. The coordinate order is longitude, then latitude.

.. code-block:: javascript

   db.places.insert(
      {
         loc : { type: "Point", coordinates: [ -73.97, 40.77 ] },
         name: "Central Park",
         category : "Parks"
      }
   )

   db.places.insert(
      {
         loc : { type: "Point", coordinates: [ -73.88, 40.78 ] },
         name: "La Guardia Airport",
         category : "Airport"
      }
   )

Then, create the :doc:`2dsphere </core/2dsphere>` index.

Create a ``2dsphere`` Index
~~~~~~~~~~~~~~~~~~~~~~~~~~~

For example, the following creates a :doc:`2dsphere </core/2dsphere>`
index on the location field ``loc``:

.. code-block:: javascript

   db.places.ensureIndex( { loc : "2dsphere" } )

Create a Compound Index with ``2dsphere`` Index Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A :ref:`compound index <index-type-compound>` can include a
``2dsphere`` index key in combination with non-geospatial index keys.
For example, the following operation creates a compound index where the
the first key ``loc`` is a ``2dsphere`` index key, and the remaining
keys ``category`` and ``names`` are non-geospatial index keys,
specifically descending (``-1``) and ascending (``1``) keys
respectively.

.. code-block:: javascript

   db.places.ensureIndex( { loc : "2dsphere" , category : -1, name: 1 } )

Unlike the :doc:`2d </core/2d>` index, a compound ``2dsphere`` index
does not require the location field to be the first field indexed. For
example:

.. code-block:: javascript

   db.places.ensureIndex( { category : 1 , loc : "2dsphere" } )

Considerations
--------------

.. |first-geo-index| replace:: ``2dsphere`` index
.. |second-geo-index| replace:: :doc:`2d </core/2d>` index
.. include:: /includes/fact-limitation-one-geo-index-per-collection.rst

As such, although this tutorial creates multiple ``2dsphere``
indexes, to use the :dbcommand:`geoNear` command or the
:pipeline:`$geoNear` pipeline stage against the example collection, you
will need to :method:`drop <db.collection.dropIndex()>` all but one of
the ``2dsphere`` indexes.

To query using the ``2dsphere`` index, see
:doc:`/tutorial/query-a-2dsphere-index`.
