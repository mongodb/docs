.. _workload-external-provider:

=======================================
Configure an External Identity Provider
=======================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

To configure Workload Identity Federation using OAuth 2.0, register your 
OAuth 2.0 application with an external identity provider like Microsoft 
Azure or Google Cloud Platform (GCP). This enables secure authentication 
and streamlines user management.

About this Task
---------------

Workload Identity Federation uses OAuth2.0 access tokens. These tokens 
can be issued by any external identity provider.

The following procedures configure Microsoft Azure Entra 
ID and Google Cloud Platform as external identity providers for 
MongoDB.

Before you Begin
----------------

- To use Microsoft Azure as an identity provider, you must have a `Microsoft 
  Azure account <https://azure.microsoft.com/en-us/get-started/azure-portal>`__.

- To use Google Cloud as an identity provider, you must have a `Google 
  Cloud account <https://cloud.google.com>`__. 

.. 
   NOTE TO WRITERS:
   Material on this page is based on 
   https://github.com/10gen/cloud-docs/blob/master/source/workload-oidc.txt
   or https://www.mongodb.com/docs/atlas/workload-oidc/ 
   on the Atlas Docs site.

   There are some small changes between docs to make them 
   Atlas/self-managed specific.
   
   If you update the procedures on this page, make sure the changes 
   are also made to the source docs.

.. _workload-external-provider-procedure:

Steps
-----

.. tabs::

   .. tab:: Azure
      :tabid: azure-oauth

      In order to access self-managed MongoDB instances with Azure 
      Managed Identities or Azure Service Principals, you need to 
      register an Azure Entra ID application. If you have an existing 
      application registration for :ref:`Workforce <workforce-external-provider>` 
      (human user) access, we recommended that you register a separate 
      application for Workload access.

      .. procedure::
         :style: normal

         .. step:: Register an application

            1. Navigate to :guilabel:`App registrations`.

               a. In your `Azure portal <https://portal.azure.com/>`__ 
                  account, search and click :guilabel:`Microsoft Entra ID`.

               #. In the :guilabel:`Manage` section of the left navigation, 
                  click :guilabel:`App registrations`.
           
            #. Click :guilabel:`New registration`.

            #. Apply the following values.

               .. list-table::
                  :header-rows: 1
                  :widths: 20 40

                  * - Field
                    - Value

                  * - :guilabel:`Name`
                    - :guilabel:`MongoDB - Workload`

                  * - :guilabel:`Supported Account Types`
                    - :guilabel:`Accounts in this organizational 
                      directory only (single tenant)`

                  * - :guilabel:`Redirect URI`
                    - :guilabel:`Web`

         .. step:: (Optional) Add groups claim

            For application access, it is a best practice to use service 
            principal identifiers as MongoDB user identifiers while defining 
            access rights in self-managed MongoDB deployments. If you plan to 
            use this common approach, skip this step. However, if you prefer to 
            use group identifiers such as Azure AD Security Group identifier 
            instead, you can set groups claim in your application registration 
            with below steps.


            1. Navigate to :guilabel:`Token Configuration`.

               In the :guilabel:`Manage` section of the left navigation,
               click :guilabel:`Token Configuration`.

            #. Click :guilabel:`Add groups claim`.

            #. In the :guilabel:`Edit groups claim` modal, select :guilabel:`Security`.

               What groups you select depend on the type of groups you configured
               in your Azure environment. You may need to select a different
               type of group to send the appropriate group information.

            #. In the :guilabel:`Customize token properties by type` section, ensure that 
               you only select :guilabel:`Group ID`.

               When you select :guilabel:`Group ID`, Azure sends the
               security group's Object ID.

            #. Click :guilabel:`Add`.

               To learn more about adding a group claim, see 
               `Azure Documentation <https://learn.microsoft.com/en-us/azure/active-directory/hybrid/connect/how-to-connect-fed-group-claims>`__.

         .. step:: Enable an Application ID URI

            1. Navigate to :guilabel:`Expose an API` 
               in the left sidebar and enable Application ID URI.
            
            #. Enable an Application ID URI.
              
               Keep the default Application ID URI assigned by Azure, 
               which is ``<application_client_id>``. Copy and store this value, 
               as self-managed MongoDB deployments and all MongoDB drivers require 
               this value for Workload Identity Federation configuration.

         .. step:: Update the manifest

            1. In the :guilabel:`Manage` section of the left navigation, click :guilabel:`Manifest`.

            #. Update the :guilabel:`accessTokenAcceptedVersion` from ``null`` to ``2``.

               The number ``2`` represents Version 2 of Microsoft's access
               tokens. Other applications can use this as proof of 
               the Active Directory-managed user's identity.
               Version 2 ensures that the token is a JSON Web Token that
               MongoDB understands.
              
            #. Click :guilabel:`Save`.

            To learn more about adding an optional claim, see `Azure Documentation <https://learn.microsoft.com/en-us/azure/active-directory/develop/reference-app-manifest>`__.

         .. step:: Remember metadata

            1. In the left navigation, click :guilabel:`Overview`.
     
            #. In the top navigation, click :guilabel:`Endpoints`.
                 
               Copy the :guilabel:`OpenID Connect metadata document` value, 
               excluding ``/.well-known/openid-configuration``.

               You can also retrieve this value by following the
               :guilabel:`OpenID Connect metadata document` URL 
               and copying the value for ``issuer``.

            The following table shows what these Microsoft Entra ID UI values 
            map to in the MongoDB :parameter:`oidcIdentityProviders` 
            parameter:
           
            .. list-table::
               :header-rows: 1
               :widths: 50 50
               :stub-columns: 1

               * - Microsoft Entra ID UI 
                 - MongoDB ``oidcIdentityProviders`` Parameter Field

               * - :guilabel:`OpenID Connect metadata document (without /.well-known/openid-configuration)`
                 - ``issuer``


               * - :guilabel:`Application ID URI`
                 - ``audience``


   .. tab:: GCP
      :tabid: gcp-oauth

      You don't need to make any configuration changes in your Google 
      Cloud service account.
