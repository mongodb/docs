.. _kotlin-sync-extended-json:

============================
Work with Extended JSON Data
============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: code examples, bson, relaxed, canonical

.. sharedinclude:: dbx/extended-json.rst

   .. replacement:: driver-specific-text-extended

      To learn more about this format, see `JsonMode.EXTENDED
      <{+api-root+}/bson/org/bson/json/JsonMode.html#EXTENDED>`__
      in the API documentation.

   .. replacement:: driver-specific-text-relaxed

      The {+driver-short+} uses Relaxed mode by default.
      To learn more about this format, see `JsonMode.RELAXED
      <{+api-root+}/bson/org/bson/json/JsonMode.html#RELAXED>`__
      in the API documentation.

   .. replacement:: driver-specific-text-shell

      To learn more about this format, see `JsonMode.SHELL
      <{+api-root+}/bson/org/bson/json/JsonMode.html#SHELL>`__
      in the API documentation.

Read Extended JSON
------------------

This section shows how to read Extended JSON values into {+language+}
objects in the following ways:

- :ref:`kotlin-sync-read-ejson-doc`
- :ref:`kotlin-sync-read-ejson-jsonreader`

.. _kotlin-sync-read-ejson-doc:

Use the Document Classes
~~~~~~~~~~~~~~~~~~~~~~~~

To read a Extended JSON string into a {+language+} document object, call
the ``parse()`` static method from the ``Document`` or ``BsonDocument`` class.
This method parses the Extended JSON string and stores its data in an instance of the specified
document class.

The following example uses the ``parse()`` method to read an Extended JSON string
into a ``Document`` object:

.. io-code-block::
   :copyable:

   .. input:: /includes/data-formats/ext-json.kt
      :language: kotlin
      :start-after: start-read-doc
      :end-before: end-read-doc
      :dedent:

   .. output::
      :visible: false

      Document{{_id=507f1f77bcf86cd799439011, myNumber=4794261}}

.. _kotlin-sync-read-ejson-jsonreader:

Use the JsonReader Class
~~~~~~~~~~~~~~~~~~~~~~~~

To read an Extended JSON string into {+language+} objects without using
the {+driver-short+}'s document classes, use the BSON library's ``JsonReader`` class.
This class contains methods to sequentially parse the fields and values
of the Extended JSON string and return them as {+language+} objects.
The driver's document classes also use this class to parse Extended JSON.

The following code uses methods provided by the ``JsonReader`` class to convert
an Extended JSON string into {+language+} objects:

.. io-code-block::
   :copyable:

   .. input:: /includes/data-formats/ext-json.kt
      :language: kotlin
      :start-after: start-read-bson
      :end-before: end-read-bson
      :dedent:

   .. output::
      :visible: false

      507f1f77bcf86cd799439011 is type: org.bson.types.ObjectId
      4794261 is type: kotlin.Long

Write Extended JSON
-------------------

This section shows how to write Extended JSON values from {+language+}
objects in the following ways:

- :ref:`kotlin-sync-write-ejson-doc`
- :ref:`kotlin-sync-write-ejson-jsonwriter`

.. _kotlin-sync-write-ejson-doc:

Use the Document Classes
~~~~~~~~~~~~~~~~~~~~~~~~

To write an Extended JSON string from a ``Document`` or ``BsonDocument``
object, call the ``toJson()`` method. You can pass this method a
``JsonWriterSettings`` object parameter to specify the Extended JSON format.

The following example writes ``Document`` data as Relaxed mode Extended
JSON:

.. io-code-block::
   :copyable:

   .. input:: /includes/data-formats/ext-json.kt
      :language: kotlin
      :start-after: start-write-doc
      :end-before: end-write-doc
      :dedent:

   .. output::
      :visible: false

      {"_id": {"$oid": "507f1f77bcf86cd799439012"}, "createdAt": {"$date": "2020-09-30T21:00:09Z"}, "myNumber": 4794261}

.. _kotlin-sync-write-ejson-jsonwriter:

Use the JsonWriter Class
~~~~~~~~~~~~~~~~~~~~~~~~

To output an Extended JSON string from data stored in {+language+} objects, you can use
the BSON library's ``JsonWriter`` class. To construct a ``JsonWriter`` object,
pass a subclass of a Java ``Writer`` to specify how you want to output the Extended
JSON. Optionally, you can pass a ``JsonWriterSettings`` instance to specify options,
such as the Extended JSON format. By default, ``JsonWriter`` uses the Relaxed mode
format. The {+driver-short+}'s document classes also use this class to convert BSON
to Extended JSON.

The following example uses a ``JsonWriter`` object to create
Canonical mode Extended JSON string values and output them to ``System.out``:

.. io-code-block::
   :copyable:

   .. input:: /includes/data-formats/ext-json.kt
      :language: kotlin
      :start-after: start-write-bson
      :end-before: end-write-bson
      :dedent:

   .. output::
      :visible: false

      {"_id": {"$oid": "507f1f77bcf86cd799439012"}, "myNumber": {"$numberLong": "11223344"}}

Custom BSON Type Conversion
---------------------------

In addition to specifying the Extended JSON output format, you
can further customize the output by adding converters to your
``JsonWriterSettings`` object. These converter methods specify logic
for handling different data types during the conversion process.

The following example converts the same document as the :ref:`kotlin-sync-write-ejson-doc`
example. However, this example defines the ``objectIdConverter()`` and ``dateTimeConverter()``
converter methods in a ``JsonWriterSettings`` object to simplify the Relaxed mode
Extended JSON output:

.. io-code-block::
   :copyable:

   .. input:: /includes/data-formats/ext-json.kt
      :language: kotlin
      :start-after: start-custom-conversion
      :end-before: end-custom-conversion
      :dedent:

   .. output::
      :visible: false

      {"_id": "507f1f77bcf86cd799439012", "createdAt": "2020-09-30T21:00:09Z", "myNumber": 4794261}

API Documentation
-----------------

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `Document <{+api-root+}/bson/org/bson/Document.html>`__
- `Document.parse() <{+api-root+}/bson/org/bson/Document.html#parse(java.lang.String)>`__
- `JsonReader <{+api-root+}/bson/org/bson/json/JsonReader.html>`__
- `JsonWriter <{+api-root+}/bson/org/bson/json/JsonWriter.html>`__
- `Document.toJson() <{+api-root+}/bson/org/bson/Document.html#toJson()>`__
- `JsonWriterSettings <{+api-root+}/bson/org/bson/json/JsonWriterSettings.html>`__