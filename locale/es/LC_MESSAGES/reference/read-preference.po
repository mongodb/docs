# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 18:44+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# d8c5124728d64da3bf4c6cbf5461168c
#: ../source/reference/read-preference.txt:5
msgid "Read Preference Reference"
msgstr ""

# 71ee68fae05443b7a96e5651a6828285
#: ../source/reference/read-preference.txt
msgid "On this page"
msgstr ""

# 2d7b95680d834772b187d13c0d856f45
#: ../source/includes/introduction-read-preference.rst:1
msgid ""
"Read preference describes how MongoDB clients route read operations to "
"the members of a :term:`replica set`."
msgstr ""

# 04c72341c331499692afdebda59f2815
#: ../source/includes/introduction-read-preference.rst:6
msgid ""
"By default, an application directs its read operations to the "
":term:`primary` member in a :term:`replica set`."
msgstr ""

# 654a55f802724d42bf0eccd8a9095d25
#: ../source/includes/read-preference-modes-table.rst:5
msgid "Read Preference Mode"
msgstr ""

# 783bee5d50f745678a8d7994cd77b2dc
#: ../source/includes/read-preference-modes-table.rst:6
msgid "Description"
msgstr ""

# 598cd24a02894b85a7243229274b0eb0
#: ../source/includes/read-preference-modes-table.rst:7
msgid ":readmode:`primary`"
msgstr ""

# 6db16c2aa97f44f595f66bc03f13c558
#: ../source/includes/read-preference-modes-table.rst:8
msgid ""
"Default mode. All operations read from the current replica set "
":term:`primary`."
msgstr ""

# 245aacc14bc24771a6f954b06015e87a
#: ../source/includes/read-preference-modes-table.rst:10
msgid ":readmode:`primaryPreferred`"
msgstr ""

# 54a04cad8a7b409394eac39c853ee9f1
#: ../source/includes/read-preference-modes-table.rst:11
msgid ""
"In most situations, operations read from the :term:`primary` but if it is"
" unavailable, operations read from :term:`secondary` members."
msgstr ""

# 285164dd41cf48e6ba83ba8f64379eab
#: ../source/includes/read-preference-modes-table.rst:14
msgid ":readmode:`secondary`"
msgstr ""

# 8efd45b6930f4693a46d8cab6f5bbb2e
#: ../source/includes/read-preference-modes-table.rst:15
msgid "All operations read from the :term:`secondary` members of the replica set."
msgstr ""

# 9d3b6a492eb64b21b5793326f69f6c09
#: ../source/includes/read-preference-modes-table.rst:17
msgid ":readmode:`secondaryPreferred`"
msgstr ""

# 75facb47bd324c41bc8075c5fd9c8c43
#: ../source/includes/read-preference-modes-table.rst:18
msgid ""
"In most situations, operations read from :term:`secondary` members but if"
" no :term:`secondary` members are available, operations read from the "
":term:`primary`."
msgstr ""

# 3032c4de362c460da651e8d11658ad1f
#: ../source/includes/read-preference-modes-table.rst:21
msgid ":readmode:`nearest`"
msgstr ""

# 4a19e83f1b2b4b5b87b7c63acb301a43
#: ../source/includes/read-preference-modes-table.rst:22
msgid ""
"Operations read from member of the :term:`replica set` with the least "
"network latency, irrespective of the member's type."
msgstr ""

# 524fcee925cf4a578011fd5f7172450e
#: ../source/reference/read-preference.txt:21
msgid ""
"The read preference does not affect the visibility of data; i.e, clients "
"can see the results of writes before they are made :term:`durable`:"
msgstr ""

# d0231f717b3b4f1bb76d7abef945f355
#: ../source/includes/list-visibility-of-data.rst:1
msgid ""
"Regardless of :doc:`write concern </reference/write-concern>`, other "
"clients using :readconcern:`\"local\"` (i.e. the default) readConcern can"
" see the result of a write operation before the write operation is "
"acknowledged to the issuing client."
msgstr ""

# d0c8726ff6ff4a82a7c6dd9982282a27
#: ../source/includes/list-visibility-of-data.rst:6
msgid ""
"Clients using :readconcern:`\"local\"` (i.e. the default) readConcern can"
" read data which may be subsequently :doc:`rolled back </core/replica-"
"set-rollbacks>`."
msgstr ""

# af30c73b49434411a3f84ad2d42eacb6
#: ../source/reference/read-preference.txt:26
msgid ""
"For more information on read isolation level in MongoDB, see :doc:`/core"
"/read-isolation-consistency-recency`."
msgstr ""

# d87f7dd3e676475f907fa484c2fd4de4
#: ../source/reference/read-preference.txt:35
msgid "Read Preference Modes"
msgstr ""

# 31029dd9033b41c58d91d195a9dc050c
#: ../source/reference/read-preference.txt:39
msgid ""
"All read operations use only the current replica set :term:`primary`. "
"[#edge-cases-2-primaries]_ This is the default read mode. If the primary "
"is unavailable, read operations produce an error or throw an exception."
msgstr ""

# 389368a2148b4b769f9a6be0fdede772
#: ../source/reference/read-preference.txt:44
msgid ""
"The :readmode:`primary` read preference mode is not compatible with read "
"preference modes that use :ref:`tag sets <replica-set-read-preference-"
"tag-sets>`. If you specify a tag set with :readmode:`primary`, the driver"
" will produce an error."
msgstr ""

# b84a5e17873247eeb32883f4ff1fe9e3
#: ../source/reference/read-preference.txt:51
msgid ""
"In most situations, operations read from the :term:`primary` member of "
"the set. However, if the primary is unavailable, as is the case during "
":term:`failover` situations, operations read from secondary members."
msgstr ""

# 9e0e38e8ebd846bfab15c873439fc323
#: ../source/reference/read-preference.txt:56
msgid ""
"When the read preference includes a :ref:`tag set <replica-set-read-"
"preference-tag-sets>`, the client reads first from the primary, if "
"available, and then from :term:`secondaries <secondary>` that match the "
"specified tags. If no secondaries have matching tags, the read operation "
"produces an error."
msgstr ""

# 22bd35e9920f4c72ba9a60b11aafc1a1
#: ../source/reference/read-preference.txt:62
msgid ""
"Since the application may receive data from a secondary, read operations "
"using the :readmode:`primaryPreferred` mode may return stale data in some"
" situations."
msgstr ""

# c1c72344bf274168860b928b1b6bf370
#: ../source/reference/read-preference.txt:68
msgid ""
"Operations read *only* from the :term:`secondary` members of the set. If "
"no secondaries are available, then this read operation produces an error "
"or exception."
msgstr ""

# 814aa04e0bcd48bdb6cd92bee59e2785
#: ../source/reference/read-preference.txt:72
msgid ""
"Most sets have at least one secondary, but there are situations where "
"there may be no available secondary. For example, a set with a primary, a"
" secondary, and an :term:`arbiter` may not have any secondaries if a "
"member is in recovering state or unavailable."
msgstr ""

# b4434ced21c6483382aef46d3e93e02f
#: ../source/reference/read-preference.txt:77
msgid ""
"When the read preference includes a :ref:`tag set <replica-set-read-"
"preference-tag-sets>`, the client attempts to find secondary members that"
" match the specified tag set and directs reads to a random secondary from"
" among the :ref:`nearest group <replica-set-read-preference-behavior-"
"nearest>`. If no secondaries have matching tags, the read operation "
"produces an error. [#capacity-planning]_"
msgstr ""

# 59157d53eaab43399a5ce1f12fae1ff9
#: ../source/reference/read-preference.txt:85
msgid ""
"Read operations using the :readmode:`secondary` mode may return stale "
"data."
msgstr ""

# 4e2f39e7eea04314a9ff676daf6b75f6
#: ../source/reference/read-preference.txt:89
msgid ""
"In most situations, operations read from :term:`secondary` members, but "
"in situations where the set consists of a single :term:`primary` (and no "
"other members), the read operation will use the set's primary."
msgstr ""

# a9d48a55dfd54704993a828aa3fdbf3b
#: ../source/reference/read-preference.txt:94
msgid ""
"When the read preference includes a :ref:`tag set <replica-set-read-"
"preference-tag-sets>`, the client attempts to find a secondary member "
"that matches the specified tag set and directs reads to a random "
"secondary from among the :ref:`nearest group <replica-set-read-"
"preference-behavior-nearest>`. If no secondaries have matching tags, the "
"client ignores tags and reads from the primary."
msgstr ""

# f5f3b766c1bb44009b048d4887c8cd89
#: ../source/reference/read-preference.txt:101
msgid ""
"Read operations using the :readmode:`secondaryPreferred` mode may return "
"stale data."
msgstr ""

# fc23b8a9ac834b4bbbb2aa4c3b5124a3
#: ../source/reference/read-preference.txt:106
msgid ""
"The driver reads from the *nearest* member of the :term:`set <replica "
"set>` according to the :ref:`member selection <replica-set-read-"
"preference-behavior-nearest>` process. Reads in the :readmode:`nearest` "
"mode do not consider the member's *type*. Reads in :readmode:`nearest` "
"mode may read from both primaries and secondaries."
msgstr ""

# 49df507bd5674aa8b773451c7d113f7b
#: ../source/reference/read-preference.txt:113
msgid ""
"Set this mode to minimize the effect of network latency on read "
"operations without preference for current or stale data."
msgstr ""

# f3e64d5a7b6f4f9e9d24ed1b63abc58a
#: ../source/reference/read-preference.txt:116
msgid ""
"If you specify a :ref:`tag set <replica-set-read-preference-tag-sets>`, "
"the client attempts to find a replica set member that matches the "
"specified tag set and directs reads to an arbitrary member from among the"
" :ref:`nearest group <replica-set-read-preference-behavior-nearest>`."
msgstr ""

# d0864c05fe5b44378ce169389718410f
#: ../source/reference/read-preference.txt:122
msgid "Read operations using the :readmode:`nearest` mode may return stale data."
msgstr ""

# 389dfe62dc934ae88895d70cfe1fbf91
#: ../source/reference/read-preference.txt:127
msgid ""
"All operations read from a member of the nearest group of the replica set"
" that matches the specified read preference mode. The :readmode:`nearest`"
" mode prefers low latency reads over a member's :term:`primary` or "
":term:`secondary` status."
msgstr ""

# bb69aa1a47d2481db77b91f97e136ad4
#: ../source/reference/read-preference.txt:132
msgid ""
"For :readmode:`nearest`, the client assembles a list of acceptable hosts "
"based on tag set and then narrows that list to the host with the shortest"
" ping time and all other members of the set that are within the \"local "
"threshold,\" or acceptable latency. See :ref:`replica-set-read-"
"preference-behavior-nearest` for more information."
msgstr ""

# c99b5acbab484cf184fd4710063727cf
#: ../source/reference/read-preference.txt:140
msgid "Use Cases"
msgstr ""

# ed1aba2a5fab4d329888eac59fd7c5d3
#: ../source/reference/read-preference.txt:142
msgid ""
"Depending on the requirements of an application, you can configure "
"different applications to use different read preferences, or use "
"different read preferences for different queries in the same application."
" Consider the following applications for different read preference "
"strategies."
msgstr ""

# 5dc940565f864889a7640e911f529683
#: ../source/reference/read-preference.txt:151
msgid "Maximize Consistency"
msgstr ""

# 76498383ad21450dbdfa570f98c7ba8f
#: ../source/reference/read-preference.txt:153
msgid ""
"To avoid *stale* reads, use :readmode:`primary` read preference and "
":readconcern:`\"majority\"` ``readConcern``. If the primary is "
"unavailable, e.g. during elections or when a majority of the replica set "
"is not accessible, read operations using :readmode:`primary` read "
"preference produce an error or throw an exception."
msgstr ""

# 012a8885a8a4406c9b7ef0ae554ab2af
#: ../source/reference/read-preference.txt:161
msgid ""
"In some circumstances, it may be possible for a replica set to "
"temporarily have two primaries; however, only one primary will be capable"
" of confirming writes with the :writeconcern:`\"majority\"` write "
"concern."
msgstr ""

# dfda3d749c854ca692cedde00e2a522e
#: ../source/reference/read-preference.txt:166
msgid ""
"A partial :term:`network partition` may segregate a primary (``p``\\ "
":sub:`old`) into a partition with a minority of the nodes, while the "
"other side of the partition contains a majority of nodes. The partition "
"with the majority will elect a new primary (``P``\\ :sub:`new`), but for "
"a brief period, the old primary (``p``\\ :sub:`old`) may still continue "
"to serve reads and writes, as it has not yet detected that it can only "
"see a minority of nodes in the replica set. During this period, if the "
"old primary (``p``\\ :sub:`old`) is still visible to clients as a "
"primary, reads from this primary may reflect stale data."
msgstr ""

# 123e251fc2b14ee885cd374adc288298
#: ../source/reference/read-preference.txt:177
msgid ""
"A primary (``p``\\ :sub:`old`) may become unresponsive, which will "
"trigger an election and a new primary (``P``\\ :sub:`new`) can be "
"elected, serving reads and writes. If the unresponsive primary (``p``\\ "
":sub:`old`) starts responding again, two primaries will be visible for a "
"brief period. The brief period will end when ``p``\\ :sub:`old` steps "
"down. However, during the brief period, clients might read from the old "
"primary ``p``\\ :sub:`old`, which can provide stale data."
msgstr ""

# 994e9fe1b34842bf88a2f32b13a5e569
#: ../source/reference/read-preference.txt:186
msgid ""
"To increase consistency, you can disable automatic :term:`failover`; "
"however, disabling automatic failover sacrifices availability."
msgstr ""

# 86e7fb6914ab430bb30423322f12eb5c
#: ../source/reference/read-preference.txt:190
msgid "Maximize Availability"
msgstr ""

# 0a603dfab2d642a2ac81536ad255b2d2
#: ../source/reference/read-preference.txt:192
msgid ""
"To permit read operations when possible, use "
":readmode:`primaryPreferred`. When there's a primary you will get "
"consistent reads [#edge-cases-2-primaries]_, but if there is no primary "
"you can still query :term:`secondaries <secondary>`. However, when using "
"this read mode, consider the situation described in :ref:`caveat-"
"secondaryPreferred`."
msgstr ""

# efb967aa06e64573b99a89ec173a2c44
#: ../source/reference/read-preference.txt:200
msgid "Minimize Latency"
msgstr ""

# ff162911f28947648cb9b80481c9513c
#: ../source/reference/read-preference.txt:202
msgid ""
"To always read from a low-latency node, use :readmode:`nearest`. The "
"driver or :program:`mongos` will read from the nearest member and those "
"no more than 15 milliseconds [#secondary-acceptable-latency]_ further "
"away than the nearest member."
msgstr ""

# 695d7ca35f364f4aa700c4d6765793d5
#: ../source/reference/read-preference.txt:207
msgid ""
":readmode:`nearest` does *not* guarantee consistency. If the nearest "
"member to your application server is a secondary with some replication "
"lag, queries could return stale data. :readmode:`nearest` only reflects "
"network distance and does not reflect I/O or CPU load."
msgstr ""

# f448655e2de84752b723c400810d3c57
#: ../source/reference/read-preference.txt:213
msgid "Query From Geographically Distributed Members"
msgstr ""

# a0c559e1ac214c11bb2dd9397ab4dbe7
#: ../source/reference/read-preference.txt:215
msgid ""
"If the members of a replica set are geographically distributed, you can "
"create replica tags based that reflect the location of the instance and "
"then configure your application to query the members nearby."
msgstr ""

# 3ed3ef00801946b882d84669a03a3819
#: ../source/reference/read-preference.txt:219
msgid ""
"For example, if members in \"east\" and \"west\" data centers are "
":ref:`tagged <replica-set-configuration-tag-sets>` ``{'dc': 'east'}`` and"
" ``{'dc': 'west'}``, your application servers in the east data center can"
" read from nearby members with the following read preference:"
msgstr ""

# d12f04ef412e4dd8a38fb675448c9d92
#: ../source/reference/read-preference.txt:229
msgid ""
"Although :readmode:`nearest` already favors members with low network "
"latency, including the tag makes the choice more predictable."
msgstr ""

# 4d923be7d5904db7aa9a017f846d0081
#: ../source/reference/read-preference.txt:235
msgid "``secondary`` vs ``secondaryPreferred``"
msgstr ""

# a87d069d6cbc4d92b41101ba1013d056
#: ../source/reference/read-preference.txt:237
msgid ""
"For specific dedicated queries (e.g. ETL, reporting), you may shift the "
"read load from the primary by using the :readmode:`secondary` read "
"preference mode. For this use case, the :readmode:`secondary` mode is "
"preferable to the :readmode:`secondaryPreferred` mode because "
":readmode:`secondaryPreferred` risks the following situation: if all "
"secondaries are unavailable and your replica set has enough "
":term:`arbiters <arbiter>` [#arbiter-limit]_ to prevent the primary from "
"stepping down, then the primary will receive all traffic from the "
"clients. If the primary is unable to handle this load, the queries will "
"compete with the writes. For this reason, use read preference "
":readmode:`secondary` to distribute these specific dedicated queries "
"instead of :readmode:`secondaryPreferred`."
msgstr ""

# dd5859cb64ec40c19bd20645666651b5
#: ../source/reference/read-preference.txt:251
msgid "In general, avoid deploying more than one arbiter per replica set."
msgstr ""

# 6e75387c48f94f729d516f00fe989e9c
#: ../source/reference/read-preference.txt:254
msgid "Read Preferences for Database Commands"
msgstr ""

# de2140fac13347c9a1166aa4a0827ac0
#: ../source/reference/read-preference.txt:256
msgid ""
"Because some :term:`database commands <database command>` read and return"
" data from the database, all of the official drivers support full "
":ref:`read preference mode semantics <replica-set-read-preference-modes>`"
" for the following commands:"
msgstr ""

# bf738e16d3a549c2980160c38fab98c5
#: ../source/reference/read-preference.txt:261
msgid ":dbcommand:`group`"
msgstr ""

# daaa936aa1e64b12bfe939dcc2abdb65
#: ../source/reference/read-preference.txt:262
msgid ":dbcommand:`mapReduce` [#inline-map-reduce]_"
msgstr ""

# f26940aae142447482af72ba0f4f6a6b
#: ../source/reference/read-preference.txt:263
msgid ":dbcommand:`aggregate` [#aggregation-out]_"
msgstr ""

# d3ea35de3e3548fdb8f7d0209e2799e0
#: ../source/reference/read-preference.txt:264
msgid ":dbcommand:`collStats`"
msgstr ""

# e00ab0e5b5454f23938e33431b56c361
#: ../source/reference/read-preference.txt:265
msgid ":dbcommand:`dbStats`"
msgstr ""

# 712efbc4a7a44513a7e5561c8c2ae38a
#: ../source/reference/read-preference.txt:266
msgid ":dbcommand:`count`"
msgstr ""

# e982aaee3417448ea64157b4478ec98b
#: ../source/reference/read-preference.txt:267
msgid ":dbcommand:`distinct`"
msgstr ""

# 1c8dc778d5674d21a2648d5bf28fb214
#: ../source/reference/read-preference.txt:268
msgid ":dbcommand:`geoNear`"
msgstr ""

# c4338e07d9bf4ae99266daf941995401
#: ../source/reference/read-preference.txt:269
msgid ":dbcommand:`geoSearch`"
msgstr ""

# acb3d6bc7b754b1ebf95967408a78df5
#: ../source/reference/read-preference.txt:270
msgid ":dbcommand:`parallelCollectionScan`"
msgstr ""

# 465bb4bb0d55483bb6aedf92ad4bbe0e
#: ../source/reference/read-preference.txt:272
msgid ""
":program:`mongos` adds support for routing commands to shards using read "
"preferences. Previously :program:`mongos` sent all commands to shards' "
"primaries."
msgstr ""

# 56d5acef59304b2585d4908bf83f3a7a
#: ../source/reference/read-preference.txt:277
msgid ""
"If your set has more than one secondary, and you use the "
":readmode:`secondary` read preference mode, consider the following "
"effect. If you have a :ref:`three member replica set <replica-set-three-"
"members>` with a primary and two secondaries, and one secondary becomes "
"unavailable, all :readmode:`secondary` queries must target the remaining "
"secondary. This will double the load on this secondary. Plan and provide "
"capacity to support this as needed."
msgstr ""

# 01a836a58cc5445db88ca044a4d67f06
#: ../source/reference/read-preference.txt:286
msgid ""
"This threshold is configurable. See "
":setting:`~replication.localPingThresholdMs` for :program:`mongos` or "
"your driver documentation for the appropriate setting."
msgstr ""

# 7a2a75f669444c3d990cfafacf39b7b1
#: ../source/reference/read-preference.txt:290
msgid ""
"Only \"inline\" :dbcommand:`mapReduce` operations that do not write data "
"support read preference, otherwise these operations must run on the "
":term:`primary` members."
msgstr ""

# 947099dee05f467193e06686a214cfa4
#: ../source/reference/read-preference.txt:295
msgid ""
"Using the ``$out`` pipeline operator forces the aggregation pipeline to "
"run on the primary."
msgstr ""

# ec2f31a6241b4d47b6787641aa31d50f
#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may"
" *transiently* believe that they are the primary, but at most, one of "
"them will be able to complete writes with :writeconcern:`{ w: "
"\"majority\" } <\"majority\">` write concern. The node that can complete "
":writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current "
"primary, and the other node is a former primary that has not yet "
"recognized its demotion, typically due to a :term:`network partition`. "
"When this occurs, clients that connect to the former primary may observe "
"stale data despite having requested read preference :readmode:`primary`, "
"and new writes to the former primary will eventually roll back."
msgstr ""

# 5b4d4de7501e4c62bf672edcf48b2e32
# e969ed316f7d445fb862216c143a94c5
#: ../source/reference/read-preference.txt:29
#: ../source/reference/read-preference.txt:31
msgid "read preference"
msgstr ""

# 5b4d4de7501e4c62bf672edcf48b2e32
#: ../source/reference/read-preference.txt:29
msgid "semantics"
msgstr ""

# e969ed316f7d445fb862216c143a94c5
#: ../source/reference/read-preference.txt:31
msgid "modes"
msgstr ""

#~ msgid ""
#~ "This threshold is configurable. See "
#~ ":setting:`localThreshold` for :program:`mongos` or"
#~ " your driver documentation for the "
#~ "appropriate setting."
#~ msgstr ""

# 04a06b1b4dd846b4b5f0982df57c6dbc
#~ msgid ""
#~ "Read preference describes how MongoDB "
#~ "clients route read operations to members"
#~ " of a :term:`replica set`."
#~ msgstr ""

# 2eddbe3a14ae4f6e95cabbba6ed819bf
#~ msgid ""
#~ "By default, an application directs its"
#~ " read operations to the :term:`primary` "
#~ "member in a :term:`replica set`. Reading"
#~ " from the primary guarantees that "
#~ "read operations reflect the latest "
#~ "version of a document. However, by "
#~ "distributing some or all reads to "
#~ "secondary members of the replica set,"
#~ " you can improve read throughput or"
#~ " reduce latency for an application "
#~ "that does not require fully up-"
#~ "to-date data."
#~ msgstr ""

# 3da14fedc4b44bbb8fb2c61c98d2a61c
#~ msgid ""
#~ "All read operations use only the "
#~ "current replica set :term:`primary`. This "
#~ "is the default. If the primary is"
#~ " unavailable, read operations produce an"
#~ " error or throw an exception."
#~ msgstr ""

# c9bf1c4df8194899bc24532729fe4d2c
#~ msgid ":program:`mongos` added full support for read preferences."
#~ msgstr ""

# 4961637a6dd04f979ef6c7fb1260a9e1
#~ msgid ""
#~ "When connecting to a :program:`mongos` "
#~ "instance older than 2.2, using a "
#~ "client that supports read preference "
#~ "modes, :readmode:`primaryPreferred` will send "
#~ "queries to secondaries."
#~ msgstr ""

# f1c7c7de37e24680bd45c9bd62b54dd2
#~ msgid ""
#~ "If your set has more than one "
#~ "secondary, and you use the "
#~ ":readmode:`secondary` read preference mode, "
#~ "consider the following effect. If you"
#~ " have a :ref:`three member replica "
#~ "set <replica-set-three-members>` with"
#~ " a primary and two secondaries, and"
#~ " if one secondary becomes unavailable, "
#~ "all :readmode:`secondary` queries must target"
#~ " the remaining secondary. This will "
#~ "double the load on this secondary. "
#~ "Plan and provide capacity to support "
#~ "this as needed."
#~ msgstr ""

# 0ae3c1f7536e46afa50cdb83f7153361
#~ msgid ""
#~ "To avoid *stale* reads under all "
#~ "circumstances, use :readmode:`primary`. This "
#~ "prevents all queries when the set "
#~ "has no :term:`primary`, which happens "
#~ "during elections, or when a majority "
#~ "of the replica set is not "
#~ "accessible."
#~ msgstr ""

# 7650042494204ca7a302822773324dc8
#~ msgid ""
#~ "To permit read operations when possible,"
#~ " Use :readmode:`primaryPreferred`. When there's"
#~ " a primary you will get consistent"
#~ " reads, but if there is no "
#~ "primary you can still query "
#~ ":term:`secondaries <secondary>`."
#~ msgstr ""

# b1a1f2d1466d4be2b01ea23075472036
#~ msgid "Reduce load on the primary"
#~ msgstr ""

# 61b0d81de1254a1ea3cd7cd2e48b924a
#~ msgid ""
#~ "To shift read load from the "
#~ "primary, use mode :readmode:`secondary`. "
#~ "Although :readmode:`secondaryPreferred` is tempting"
#~ " for this use case, it carries "
#~ "some risk: if all secondaries are "
#~ "unavailable and your set has enough "
#~ ":term:`arbiters <arbiter>` to prevent the "
#~ "primary from stepping down, then the "
#~ "primary will receive all traffic from"
#~ " clients. If the primary is unable"
#~ " to handle this load, queries will"
#~ " compete with writes. For this "
#~ "reason, use :readmode:`secondary` to "
#~ "distribute read load to replica sets,"
#~ " not :readmode:`secondaryPreferred`."
#~ msgstr ""

# ed278bcfacda48c1a37dcc505acb0e7a
#~ msgid ":dbcommand:`geoWalk`"
#~ msgstr ""

