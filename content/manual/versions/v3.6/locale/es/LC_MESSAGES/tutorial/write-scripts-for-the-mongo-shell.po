# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 18:35+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:3
msgid "Write Scripts for the ``mongo`` Shell"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:13
msgid ""
"You can write scripts for the :binary:`~bin.mongo` shell in JavaScript "
"that manipulate data in MongoDB or perform administrative operation."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:16
msgid ""
"This tutorial provides an introduction to writing JavaScript that uses "
"the :binary:`~bin.mongo` shell to access MongoDB."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:22
msgid "Opening New Connections"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:24
msgid ""
"From the :binary:`~bin.mongo` shell or from a JavaScript file, you can "
"instantiate database connections using the :method:`Mongo()` constructor:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:34
msgid ""
"Consider the following example that instantiates a new connection to the "
"MongoDB instance running on localhost on the default port and sets the "
"global ``db`` variable to ``myDatabase`` using the "
":method:`~Mongo.getDB()` method:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:44
msgid ""
"If connecting to a MongoDB instance that enforces access control, you can"
" use the :method:`db.auth()` method to authenticate."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:47
msgid ""
"Additionally, you can use the :method:`connect()` method to connect to "
"the MongoDB instance. The following example connects to the MongoDB "
"instance that is running on ``localhost`` with the non-default port "
"``27020`` and set the global ``db`` variable:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:56
msgid ":doc:`/reference/method/`"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:59
msgid "Differences Between Interactive and Scripted ``mongo``"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:61
msgid ""
"When writing scripts for the :binary:`~bin.mongo` shell, consider the "
"following:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:64
msgid ""
"To set the ``db`` global variable, use the :method:`~Mongo.getDB()` "
"method or the :method:`connect()` method. You can assign the database "
"reference to a variable other than ``db``."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:68
msgid ""
"Write operations in the :binary:`~bin.mongo` shell use a write concern of"
" :ref:`{ w: 1 } <wc-w>` by default. If performing bulk operations, use "
"the :method:`Bulk()` methods. See :ref:`write-methods-incompatibility` "
"for more information."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:73
msgid ""
"You **cannot** use any shell helper (e.g. ``use <dbname>``, ``show dbs``,"
" etc.) inside the JavaScript file because they are not valid JavaScript."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:77
msgid ""
"The following table maps the most common :binary:`~bin.mongo` shell "
"helpers to their JavaScript equivalents."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:84
msgid "Shell Helpers"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:86
msgid "JavaScript Equivalents"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:88
msgid "``show dbs``, ``show databases``"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:177
msgid ""
"In interactive mode, :binary:`~bin.mongo` prints the results of "
"operations including the content of all cursors. In scripts, either use "
"the JavaScript ``print()`` function or the :binary:`~bin.mongo` specific "
"``printjson()`` function which returns formatted JSON."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:184
msgid ""
"To print all items in a result cursor in :binary:`~bin.mongo` shell "
"scripts, use the following idiom:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:197
msgid "Scripting"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:199
msgid "From the system prompt, use :binary:`~bin.mongo` to evaluate JavaScript."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:202
msgid "``--eval`` option"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:204
msgid ""
"Use the :option:`--eval <mongo --eval>` option to :binary:`~bin.mongo` to"
" pass the shell a JavaScript fragment, as in the following:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:211
msgid ""
"This returns the output of :method:`db.getCollectionNames()` using the "
":binary:`~bin.mongo` shell connected to the :binary:`~bin.mongod` or "
":binary:`~bin.mongos` instance running on port ``27017`` on the "
"``localhost`` interface."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:219
msgid "Execute a JavaScript file"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:221
msgid ""
"You can specify a ``.js`` file to the :binary:`~bin.mongo` shell, and "
":binary:`~bin.mongo` will execute the JavaScript directly. Consider the "
"following example:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:229
msgid ""
"This operation executes the ``myjsfile.js`` script in a "
":binary:`~bin.mongo` shell that connects to the ``test`` :term:`database`"
" on the :binary:`~bin.mongod` instance accessible via the ``localhost`` "
"interface on port ``27017``."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:234
msgid ""
"Alternately, you can specify the mongodb connection parameters inside of "
"the javascript file using the ``Mongo()`` constructor. See :ref:`mongo-"
"shell-new-connections` for more information."
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:1
msgid ""
"You can execute a ``.js`` file from within the :binary:`~bin.mongo` "
"shell, using the :method:`load()` function, as in the following:"
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:8
msgid "This function loads and executes the :file:`myjstest.js` file."
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:10
msgid ""
"The :method:`load()` method accepts relative and absolute paths. If the "
"current working directory of the :binary:`~bin.mongo` shell is "
":file:`/data/db`, and the :file:`myjstest.js` resides in the "
":file:`/data/db/scripts` directory, then the following calls within the "
":binary:`~bin.mongo` shell would be equivalent:"
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:21
msgid ""
"There is no search path for the :method:`load()` function. If the desired"
" script is not in the current working directory or the full specified "
"path, :binary:`~bin.mongo` will not be able to access the file."
msgstr ""

#~ msgid ""
#~ "Inside the script, call "
#~ ":method:`db.getLastError()` explicitly to wait "
#~ "for the result of :doc:`write operations"
#~ " </core/write-operations>`."
#~ msgstr ""

# 228bdbe161024843af99e88d25132d74
#~ msgid ""
#~ "You can write scripts for the "
#~ ":program:`mongo` shell in JavaScript that "
#~ "manipulate data in MongoDB or perform"
#~ " administrative operation. For more "
#~ "information about the :program:`mongo` shell"
#~ " see :doc:`/administration/scripting`, and see"
#~ " the :ref:`running-js-scripts-in-"
#~ "mongo-on-mongod-host` section for "
#~ "more information about using these "
#~ ":program:`mongo` script."
#~ msgstr ""

# c79057e9733547a38106289d9716e4d4
#~ msgid ""
#~ "This tutorial provides an introduction "
#~ "to writing JavaScript that uses the "
#~ ":program:`mongo` shell to access MongoDB."
#~ msgstr ""

# bc000f78f72547b281edb8a9d39c37d2
#~ msgid ""
#~ "From the :program:`mongo` shell or from"
#~ " a JavaScript file, you can "
#~ "instantiate database connections using the "
#~ ":method:`Mongo()` constructor:"
#~ msgstr ""

# 5f106c8b52f64939af2b70e47a452914
#~ msgid ""
#~ "When writing scripts for the "
#~ ":program:`mongo` shell, consider the "
#~ "following:"
#~ msgstr ""

# ef866b4e79494186a0778ef4c104eff6
#~ msgid ""
#~ "The following table maps the most "
#~ "common :program:`mongo` shell helpers to "
#~ "their JavaScript equivalents."
#~ msgstr ""

# 7f2f5c200aed4145aa2a1aa1a7e88b2b
#~ msgid "``use <db>``"
#~ msgstr ""

# bc3deb91a7254ea197b6789e48bda06a
#~ msgid "``show collections``"
#~ msgstr ""

# 83f1f9f62e454125a9fa9e2a83eb5919
#~ msgid "``show users``"
#~ msgstr ""

# 10c4a6d0f2cd4e28883919a6494db503
#~ msgid "``show roles``"
#~ msgstr ""

# 7711316c532d4fddab9377d628d05e67
#~ msgid "``show log <logname>``"
#~ msgstr ""

# 65e565419ea640c29a149d1b2b1c4fe4
#~ msgid "``show logs``"
#~ msgstr ""

# e67c608177b444aba75c004b3269d8b9
#~ msgid "``it``"
#~ msgstr ""

# a3e2935aaf8a4a21a887eb70b6fbb289
#~ msgid ""
#~ "In interactive mode, :program:`mongo` prints"
#~ " the results of operations including "
#~ "the content of all cursors. In "
#~ "scripts, either use the JavaScript "
#~ "``print()`` function or the :program:`mongo`"
#~ " specific ``printjson()`` function which "
#~ "returns formatted JSON."
#~ msgstr ""

# 0242073d75d941c8b13c9e1020baf938
#~ msgid "Example"
#~ msgstr ""

# 601ac060304d495da784f2928b702498
#~ msgid ""
#~ "To print all items in a result "
#~ "cursor in :program:`mongo` shell scripts, "
#~ "use the following idiom:"
#~ msgstr ""

# f321151dffa44235acf575c2723b9e03
#~ msgid "From the system prompt, use :program:`mongo` to evaluate JavaScript."
#~ msgstr ""

# ccbab67232f946809fc7626eebb2dfd8
#~ msgid ""
#~ "Use the :option:`--eval <mongo --eval>` "
#~ "option to :program:`mongo` to pass the"
#~ " shell a JavaScript fragment, as in"
#~ " the following:"
#~ msgstr ""

# 50611e31e2e24abbb36d48478adef51b
#~ msgid ""
#~ "This returns the output of "
#~ ":method:`db.getCollectionNames()` using the "
#~ ":program:`mongo` shell connected to the "
#~ ":program:`mongod` or :program:`mongos` instance "
#~ "running on port ``27017`` on the "
#~ "``localhost`` interface."
#~ msgstr ""

# 34b86e433ea64e1681d877be7c625883
#~ msgid ""
#~ "You can specify a ``.js`` file to"
#~ " the :program:`mongo` shell, and "
#~ ":program:`mongo` will execute the JavaScript"
#~ " directly. Consider the following example:"
#~ msgstr ""

# 458994e72433489c84b83a40476eba43
#~ msgid ""
#~ "This operation executes the ``myjsfile.js``"
#~ " script in a :program:`mongo` shell "
#~ "that connects to the ``test`` "
#~ ":term:`database` on the :program:`mongod` "
#~ "instance accessible via the ``localhost`` "
#~ "interface on port ``27017``."
#~ msgstr ""

# 04fb51d8735040398211b9bfc3b1efb1
#~ msgid ""
#~ "You can execute a ``.js`` file "
#~ "from within the :program:`mongo` shell, "
#~ "using the :method:`load()` function, as "
#~ "in the following:"
#~ msgstr ""

# 5dba97e41e8a4be992b52b764b71faed
#~ msgid ""
#~ "The :method:`load()` method accepts relative"
#~ " and absolute paths. If the current"
#~ " working directory of the :program:`mongo`"
#~ " shell is :file:`/data/db`, and the "
#~ ":file:`myjstest.js` resides in the "
#~ ":file:`/data/db/scripts` directory, then the "
#~ "following calls within the :program:`mongo`"
#~ " shell would be equivalent:"
#~ msgstr ""

# 08d5a349141b4b3aa89c3612f6675d79
#~ msgid ""
#~ "There is no search path for the"
#~ " :method:`load()` function. If the desired"
#~ " script is not in the current "
#~ "working directory or the full specified"
#~ " path, :program:`mongo` will not be "
#~ "able to access the file."
#~ msgstr ""

#~ msgid ""
#~ "Write operations in the :program:`mongo` "
#~ "shell use the \"safe writes\" by "
#~ "default. If performing bulk operations, "
#~ "use the :method:`Bulk()` methods. See "
#~ ":ref:`write-methods-incompatibility` for more"
#~ " information."
#~ msgstr ""

#~ msgid ""
#~ "Before MongoDB 2.6, call "
#~ ":method:`db.getLastError()` explicitly to wait "
#~ "for the result of :doc:`write operations"
#~ " </core/write-operations>`."
#~ msgstr ""

