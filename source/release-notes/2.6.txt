:orphan:

========================================================
Release Notes for MongoDB 2.6 (Development Series 2.5.x)
========================================================

.. default-domain:: mongodb

MongoDB 2.6 is currently in development, as part of the 2.5
development release series. While 2.5-series releases are currently
available, these versions of MongoDB, including the 2.6 release
candidate builds, are for **testing only and
not for production use**.

This document will eventually contain the full release notes for
MongoDB 2.6; before its release this document covers the 2.5
development series as a work-in-progress.

.. contents:: See the :doc:`full index of this page <2.6-changes>` for
              a complete list of changes included in 2.6 (Development
              Series 2.5.x).
   :backlinks: none
   :local:
   :depth: 2

Downloading
-----------

You can download the 2.6 release candidate on the `downloads page`_ in the
:guilabel:`Development Release (Unstable)` section. There are no
distribution packages for development releases, but you can use the
binaries provided for testing purposes. See
:doc:`/tutorial/install-mongodb-on-linux`,
:doc:`/tutorial/install-mongodb-on-windows`, or
:doc:`/tutorial/install-mongodb-on-os-x` for the basic installation
process.

.. _`downloads page`: http://www.mongodb.org/downloads

Compatibility Changes
---------------------

.. important:: The MongoDB 2.5-series, which will become MongoDB 2.6,
   is for testing and development **only**. All identifiers, names,
   interfaces are subject to change. Do **not** use a MongoDB 2.5
   release in production situations.

SNMP Enterprise Identifier Changed
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. DOCS-1696

In 2.5.1, the IANA enterprise identifier for MongoDB changed from
37601 to 34601. Users of SNMP monitoring must modify their SNMP
configuration (i.e. MIB) accordingly.

Default ``bind_ip`` for RPM and DEB Packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the packages provided by 10gen for MongoDB in RPM (Red Hat, CentOS,
Fedora Linux, and derivatives) and DEB (Debian, Ubuntu, and
derivatives,) the default :setting:`bind_ip` value attaches MongoDB
components to the localhost interface *only*. These packages set this
default in the default configuration file
(i.e. ``/etc/mongodb.conf``.)

If you use one of these packages and have *not* modified the default
``/etc/mongodb.conf`` file, you will need to set :setting:`bind_ip`
before or during the upgrade.

There is no default ``bind_ip`` setting in any other 10gen distributions
of MongoDB.

``isMaster`` Comand includes Wire Protocol Versions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.5.2

In order to support changes to the wire protocol both now and in the
future, the output of :dbcommand:`isMaster` now contains two new
fields that report the earliest version of the wire protocol that this
:program:`mongod` instance supports and the highest version of the
wire protocol that this :program:`mongo` instance supports.

.. data:: isMaster.maxWireVersion

   The latest version of the wire protocol that this :program:`mongod`
   or :program:`mongos` instance is capable of using to communicate
   with clients.

.. data:: isMaster.minWireVersion

   The earliest version of the wire protocol that this
   :program:`mongod` or :program:`mongos` instance is capable of using
   to communicate with clients.

Replica Set Vote Configuration Validation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded: 2.5.3

MongoDB now deprecates giving any :term:`replica set` member more than
a single vote. During configuration,
:data:`local.system.replset.members[n].votes` should only have a value
of 1 for voting members and 0 for non-voting members. MongoDB treats
values other than 1 or 0 as a value of 1 and produces a warning message.

.. TODO DOCS-1948 Uncomment when this feature is complete

   MongoDB Refuses to Insert Documents that Cannot be Indexed
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   In 2.5.3, MongoDB will *not* insert documents into collections if
   the content of an indexed field exceeds the :limit:`Maximum Index
   Key Length <Index Key>` and return an error. In previous versions of
   MongoDB, such documents were inserted but not indexed.

Changes
-------

.. important:: The MongoDB 2.5-series, which will become MongoDB 2.6,
   is for testing and development **only**. All identifiers, names,
   interfaces are subject to change. Do **not** use a MongoDB 2.5
   release in production situations.

Aggregation Pipeline Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``$out`` Stage to Write Data to a Collection
````````````````````````````````````````````

.. pipeline:: $out

   In an aggregation pipeline you may specify the name of a collection
   to a :pipeline:`$out` stage, which will write all documents in the
   aggregation pipeline to that collection.

   .. important:: The input collection for the aggregation may be
      sharded; however, you may not specify a sharded collection to
      :pipeline:`$out`.

   :pipeline:`$out` will create a new collection if one does not
   already exist in the current database. This collection is not
   visible until the aggregation completes. If the aggregation fails,
   MongoDB will not create any collection.

   If the output collection already exists, when the aggregation
   completes *successfully*, the :pipeline:`$out` atomically replaces
   the output collection with the new results
   collection. :pipeline:`$out` does not change any indexes that
   existed on the previous collection.

   .. important:: The pipeline will fail to complete if the documents
      produced by the pipeline would violate any unique indexes,
      including the index on the ``_id`` field, that existed on the
      original output collection.

   You may *only* specify :pipeline:`$out` at the end of a pipeline.

With :pipeline:`$out`, the aggregation framework can return result
sets of any size.

.. example::

   The following operation will insert all documents in ``records``
   collection into a collection named ``users``. The inserted
   documents will *only* have the ``_id``, ``uid``, and ``email``
   fields from the source documents:

   .. code-block:: javascript

      db.records.aggregate( { $project: { uid: 1, email: 1 } },
                            { $out: "users" } )

.. [#same-as-replace] When the :pipeline:`$out` operation specifies
   a collection that already exists in the current database,
   :pipeline:`$out` behaves like the replace mode of
   :dbcommand:`mapReduce`.

Aggregation Operation Can Return a Cursor
`````````````````````````````````````````

.. re the above title change - We often use "may" for "can". I think that's fine in the text but
   it's easy to misread in a title, which I actually did.
   May means permission to.
   Can means ability to.
   In general, "can" is the stronger word. "May" has a softness, and I think we want to be bold
   in describing what we can do.

.. There's a few other edits in the content below to make our statements stronger.

.. DOCS-1835

The :dbcommand:`aggregate` may now return a cursor rather than a
result document. To return a cursor object, specify the ``cursor``
operation and an initial batch size as options to the
:dbcommand:`aggregate` command.
In 2.5.2, the *temporary* :program:`mongo` shell helper
``db.collection.aggregateCursor()`` provides access to this
capability.

By returning a cursor, aggregation pipelines can return result sets of
any size. In previous versions, the result of an aggregation operation
could be no larger than 16 megabytes.
Cursors returned from the aggregation command are equivalent to
cursors returned from :method:`~db.collection.find()` queries in every
way.

The following command returns a document that can be used to instantiate
an object. The command sets the ``batchSize`` to ``10`` documents:

.. code-block:: javascript

   db.runCommand(
      { aggregate: "records",
        pipeline: [
           { $project: { name: 1, email: 1, _id: 0 } },
           { $sort: { name: 1 } }
        ],
        cursor: { batchSize: 10 }
      }
   )

The ``{batchSize: 10 }`` document specifies the size of the *initial*
batch size only. Specify subsequent batch sizes to :ref:`OP_GET_MORE
<wire-op-get-more>` operations as with other MongoDB cursors.

The :program:`mongo` shell provides the helper method
``aggregateCursor()``:

.. code-block:: javascript

   db.records.aggregateCursor(
     [
        { $project : { name: 1, email: 1, _id: 0 } },
        { $sort : { name: 1 } }
     ]
   )

A ``batchSize`` of ``0`` means an empty first batch and is useful if you
want to quickly get back a cursor or failure message, without doing
significant server-side work. To specify a ``batchSize`` of ``0``, use
an empty document:

.. code-block:: javascript

   db.runCommand(
      { aggregate: "records",
        pipeline: [
           { $project : { name: 1, email: 1, _id: 0 } },
           { $sort : { name : 1 } }
        ],
        cursor: {}
      }
   )

Improved Sorting
````````````````

.. versionadded:: 2.5.2

The :pipeline:`$sort` and :pipeline:`$group` stages now use a more
efficient sorting system within the :program:`mongod` process. This
improves performance for sorting operations that cannot rely on an
index or that exceed the maximum memory use limit, see
:limit:`Aggregation Sort Operation` for more information.

For large sort operations these "external sort" operations can write
data to the ``_tmp`` directory in the :setting:`dbpath` directory. To
enable external sort use the new ``allowDiskUsage`` argument to the
:dbcommand:`aggregate`, as in the following prototype:

.. code-block:: javascript

   {
     aggregate: "<collection>",
     pipeline: [<pipeline>],
     allowDiskUsage: <boolean>
   }

You can run this pipeline operation, using the following command:

.. code-block:: javascript

   db.runCommand(
      { aggregate: "records",
        pipeline: [
           { $project : { name: 1, email: 1, _id: 0 } },
           { $sort : { name : 1 } }
        ],
        cursor: { batchSize: 10 },
        allowDiskUsage: true
      }
   )

``$redact`` Stage to Provide Filtering for Field-Level Access Control
`````````````````````````````````````````````````````````````````````

.. pipeline:: $redact

   .. versionadded:: 2.5.2

   Provides a method to restrict the content of a returned document on
   a per-field level.

   .. example::

      Given a collection with the following document in a ``test``
      collection:

      .. code-block:: javascript

         { a: {
             level: 1,
             b: {
                 level: 5,
                 c: {
                     level: 1,
                     message: "Hello"
                 }
             },
             d: "World."
         }

      Consider the following aggregation operation:

      .. code-block:: javascript

         db.test.aggregate(
            { $match: {} },
            { $redact: { $cond: [ { $lt: [ '$level', 3 ] },
                                  "$$CONTINUE",
                                  "$$PRUNE" ]
                       }
            }
         )

      This operation evaluates every field at every level for all
      documents in the ``test`` collection, and uses the
      :expression:`$cond` expression and the variables ``$$CONTINUE``
      and ``$$PRUNE`` to specify the redaction of document parts in the
      aggregation pipeline.

      .. important:: ``$$CONTINUE`` will become ``$$DESCEND`` in
         2.5.3.

      Specifically, if the field ``level`` is less than 3, (i.e. ``{
      $lt: [ '$level', 3' ] }``) :pipeline:`$redact` continues (i.e.
      ``$$CONTINUE``) evaluating the fields and sub-documents at this
      level of the input document. If the value of ``level`` is greater
      than ``3``, then :pipeline:`$redact` removes all data at this
      level of the document.

      The result of this aggregation operation is as follows:

      .. code-block:: javascript

         { a: {
             level: 1,
             d: "World."
         }

      You may also specify ``$$KEEP`` as a variable to
      :expression:`$cond`, which returns the entire sub-document
      without transversing, as ``$$CONTINUE``.

      .. START-COMMENT

         In 2.5.3, :expression:`$cond` will accept a document with
         named parameters in addition to the current ordered array of
         parameters.

         In 2.5.3, ``$$CONTINUE`` will become ``$$DESCEND``.

      .. END-COMMENT

      .. see:: :expression:`$cond`.

Set Expression Operations in ``$project``
`````````````````````````````````````````

In 2.5.2, the :pipeline:`$project` aggregation pipeline stage now
supports the following set expressions:

.. important:: Set operators take arrays as their arguments and treat
   these arrays as sets. Except for :expression:`$setDifference`, the
   set operators ignore duplicate entries in an input array and
   produce arrays containing unique entries.

.. expression:: $setIsSubset

   Takes two arrays and returns ``true`` when the first array is a
   subset of the second and ``false`` otherwise.

.. expression:: $setEquals

   Takes two arrays and returns ``true`` when they contain the same
   elements, and ``false`` otherwise.

.. expression:: $setDifference

   Takes two arrays and returns an array containing the elements that
   only exist in the first array. :expression:`$setDifference` may
   produce arrays containing duplicate items in 2.5.2 if the input
   array contains duplicate items.

.. expression:: $setIntersection

   Takes any number of arrays and returns an array that contains the
   elements that appear in every input array.

.. expression:: $setUnion

   Takes any number of arrays and returns an array that containing the
   elements that appear in any input array.

.. expression:: $all

   Takes a single array and returns ``true`` if all its values are
   ``true`` and ``false`` otherwise.

   :expression:`$all` will become ``$allElementsTrue`` in 2.5.3.

.. expression:: $any

   Takes a single expression that returns an array and returns
   ``true`` if any of its values are ``true`` and ``false`` otherwise.

   :expression:`$any` will become ``$anyElementTrue`` in 2.5.3.

``$map`` and ``$let`` Expressions in Aggregation Pipeline Stages
````````````````````````````````````````````````````````````````

.. tip:: For :expression:`$let` and :expression:`$map`, the
   aggregation framework introduces variables. To specify a variable,
   use the name of the variable prefixed by **2** dollar signs
   (i.e. ``$$``) as in: ``$$<name>``.

.. expression:: $let

   :expression:`$let` binds variables for use in sub-expressions. For
   example:

   .. code-block:: javascript

      { $project: { remaining: { $let: {
                                         vars: { tally: 75, count: 50 },
                                         in: { $subtract: [ "$$tally", "$$count" ] }
                                        }
                                }
                  }
      }

   Would return a document with the following:

   .. code-block:: javascript

      { remaining: 25 }

   :expression:`$let` is available the in :pipeline:`$project`,
   :pipeline:`$group`, and :pipeline:`$redact` pipeline stages.

.. expression:: $map

   :expression:`$map` applies a sub-expression to each item in an
   array and returns an array with the result of the sub-expression

   :expression:`$map` is available the in :pipeline:`$project`,
   :pipeline:`$group`, and :pipeline:`$redact` pipeline stages.

   Given an input document that resembles the following:

   .. code-block:: javascript

      { skews: [ 1, 1, 2, 3, 5, 8 ] }

   And the following :pipeline:`$project` statement:

   .. code-block:: javascript

      { $project: { adjustments: { $map: { input: "$skews",
                                           as: "adj",
                                           in: { $add: [ "$$adj", 12 ] } } } } }

   The :expression:`$map` would transform the input document into the
   following output document:

   .. code-block:: javascript

      { adjustments: [ 13, 13, 14, 15, 17, 20 ] }

``$literal`` Expression for Aggregation Pipeline Stages
```````````````````````````````````````````````````````

The new :expression:`$literal` operator allows users to explicitly
specify documents in aggregation operations that the pipeline stage
would otherwise interpret directly. For example, use
:expression:`$literal` to project fields with dollar signs
(e.g. ``$``) in their values.

.. expression:: $literal

   Wraps an expression to prevent the aggregation pipeline from
   interpreting an object directly.

   Consider the following example:

   .. code-block:: javascript

      db.runCommand( { aggregate: "records",
                       pipeline: [  { $project: { costsOneDollar:
                                         { $eq: [ "$price", { $literal: "$1.00" } ] } }
                                    } ] } )

   This projects documents with a field named ``costsOneDollar`` that
   holds a boolean value if the value of the field is the string
   ``$1.00``.

``explain`` Option for the Aggregation Pipeline
```````````````````````````````````````````````

The new ``explain`` option to the :dbcommand:`aggregate` command
provides information about how the command processes the pipeline. The
returned document contains information on each stage of the pipeline.

To use ``explain``, set the ``explain`` field to ``true`` as shown here:

.. code-block:: javascript

   db.runCommand( { aggregate: "<collection>",
                    explain: true,
                    pipeline: [ <pipeline operations> ] } )

.. example::

   Given the following aggregation command with ``explain`` field set to ``true``:

   .. code-block:: javascript

      db.runCommand( {
                       aggregate: "records",
                       explain: true,
                       pipeline: [ { $sort: { name : -1 } },
                                   { $skip: 10 },
                                   { $limit: 5 } ]
                     }

   The returned document provides information on how
   :dbcommand:`aggregate` processed the pipeline. In this example, the
   returned document would show, among other details, that:

   - a :ref:`sequence optimization
     <aggregation-pipeline-sequence-optimization>` occurs where the
     :pipeline:`$limit` moves before the :pipeline:`$skip` and the
     :pipeline:`$limit` amount has increased to the sum of its initial
     value and the :pipeline:`$skip` value, and

   - with the :pipeline:`$sort` now immediately preceding a
     :pipeline:`$limit`, :pipeline:`$sort` operation would only
     maintain the top 15 results (i.e. the new limit amount) as it
     progresses.

The format of the ``explain`` output document is not final for
version 2.6.

``$cond`` Accepts Objects as Arguments
``````````````````````````````````````

The ternary :expression:`$cond` expression can now take either an object
or an array. Previously :expression:`$cond` always took an array.

When :expression:`$cond` takes an object, the object contains the
fields ``if``, ``then``, and ``else`` and uses the following syntax:

.. code-block:: javascript

   { $cond: { if: <boolean-expression>, then: <true-case>, else: <false-case> } }

The ``if`` field takes an expression that evaluates to a Boolean
value.  If the expression evaluates to ``true``, then
:expression:`$cond` evaluates and returns the value of the ``then``
field. Otherwise, :expression:`$cond` evaluates and returns the value
of the ``else`` field.

The expressions in the ``if``, ``then``, and ``else`` fields may be
valid MongoDB :doc:`aggregation expressions
</reference/aggregation/operators>` or document fields. You cannot use
JavaScript in the expressions.

.. example::

   The following aggregation pipeline operation returns a
   ``weightedCount`` for each ``item_id``. The :group:`$sum` operator
   uses the :expression:`$cond` expression to add ``2`` if the value
   stored in the ``level`` field is ``E`` and ``1`` otherwise.

   .. code-block:: javascript

      db.survey.aggregate(
         [
            {
               $group: {
                  _id: "$item_id",
                  weightedCount: { $sum: { $cond: { if: { $eq: [ "$level", "E" ] } ,
                                                    then: 2,
                                                    else: 1
                                                  } } }
               }
            }
         ]
      )

New ``$size`` Operator for the Aggregation Pipeline
```````````````````````````````````````````````````

.. versionadded:: 2.5.3

The new :operator:`$size` operator for the :doc:`aggregation
pipeline </core/aggregation-pipeline>` returns the size of a specified
array.

.. operator:: $size

   Counts and returns the total the number of items in an array.
   Consider the following syntax:

   .. code-block:: javascript

      { <field>: { $size: <array> } }

   .. example::

      Given a ``survey`` collection that records town occupants by
      household, and that includes documents similar to the following:

      .. code-block:: javascript

         {
           "_id" : ObjectId("524d82e535edde4707c684c5"),
           "household" : "Carter",
           "st_num" : 300,
           "street" : "North Bond Street",
           "occupants" : [
               "Amy",
               "Donnel",
               "Jack",
               "James"
           ]
         }

      The following aggregation pipeline operation counts the number of
      residents on each street. The pipeline groups documents according to
      the ``street`` field and uses the :operator:`$size` operator to count
      the entries in each household's ``occupants`` array. The pipeline
      uses :operator:`$sum` to add the number of residents on each street.

      .. code-block:: javascript

         db.survey.aggregate(
            [
               {
                  $group: {
                     _id: "$street",
                     numResidents: { $sum: {$size: "$occupants" } }
                  }
               }
            ]
         )

Write Operation Improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded 2.5.3

MongoDB has updated the wire protocol to include new ``insert``,
``update``, and ``delete`` commands for batch operations. You may
specify a single write concern for each batch of writes. The new
commands support a number of other configuration options including
the ability to proceed if any individual write fails.

MongoDB also introduces new changes to the update language:

``$mul`` Update Operator
````````````````````````

.. operator:: $mul

   The new :operator:`$mul` allows you to multiply the value of a field
   by the specified amount. If the field does not exist in a document,
   :operator:`$mul` sets the field to zero of the same numeric type as
   the multiplier. Consider the following prototype:

   .. example::

      Given a collection named ``records`` with the following
      documents:

      .. code-block:: javascript

         { _id: 1, a: 1, b: 4 }
         { _id: 2, a: 1, b: 3 }
         { _id: 3, a: 1 }

      Consider the following update operation:

      .. code-block:: javascript

         db.records.update( { a: 1 },
                            { $mul: { b: 5 } },
                            { multi: true } )

      Following this operation, the collection would resemble the
      following:

      .. code-block:: javascript

         { _id: 1, a: 1, b: 20 }
         { _id: 2, a: 1, b: 15 }
         { _id: 3, a: 1, b: 0 }

``xor`` operation for ``$bit`` Operator
```````````````````````````````````````

The :operator:`$bit` now supports bitwise updates using a logical
``xor`` operation. See the documentation of :operator:`$bit` for more
information on bitwise updates. Consider the following operation:

.. code-block:: javascript

   db.collection.update( { field: NumberInt(1) }, { $bit: { field: { xor: NumberInt(5) } } } );

``$min`` Update Operator
````````````````````````

.. operator:: $min

   The :operator:`$min` updates the value of the field to a specified
   value *if* the specified value is **less than** the current value of
   the field. If the field does not exists, the :operator:`$min`
   operator sets the field to the specified value. The :operator:`$min`
   operator can compare values of different types, using the :ref:`BSON
   comparison order <faq-dev-compare-order-for-BSON-types>`.

   .. example::

      Consider the following document in the collection ``scores``:

      .. code-block:: javascript

         { _id: 1, highScore: 800, lowScore: 200 }

      The ``lowScore`` for the document currently has the value
      ``200``. The following operation uses :operator:`$min` to compare
      ``200`` to the specified value ``150`` and updates the value of
      ``lowScore`` to ``150`` since ``150`` is less than ``200``:

      .. code-block:: javascript

         db.scores.update( { _id: 1 }, { $min: { lowScore: 150 } } )

      The ``scores`` collection now contains the following modified document:

      .. code-block:: javascript

         { _id: 1, highScore: 800, lowScore: 150 }

      The next operation has no effect since the current value of the
      field ``lowScore``, i.e ``150``, is less than ``200``:

      .. code-block:: javascript

         db.scores.update( { _id: 1 }, { $min: { lowScore: 250 } } )

      The document remains unchanged in the ``scores`` collection:

      .. code-block:: javascript

         { _id: 1, highScore: 800, lowScore: 150 }

   .. example::

      Consider the following document in the collection ``tags``:

      .. code-block:: javascript

         { 
           _id: 1,
           desc: "crafts",
           dateEntered: ISODate("2013-10-01T05:00:00Z"),
           dateExpired: ISODate("2013-10-01T16:38:16.163Z")
         }

      The following operation compares the current value of the
      ``dateEntered`` field, i.e. ``ISODate("2013-10-01T05:00:00Z")``,
      with the specified date ``new Date("9-25-2013")`` to determine
      whether to update the field:

      .. code-block:: javascript

         db.tags.update( { _id: 1 },
                         {
                           $min: { 
                                   dateEntered: new Date("9-25-2013")
                                 }
                          } 
                       )

      The operation updates the ``dateEntered`` field:

      .. code-block:: javascript
         :emphasize-lines: 4

         {
           _id: 1,
           desc: "crafts",
           dateEntered: ISODate("2013-09-25T04:00:00Z"),
           dateExpired: ISODate("2013-10-01T16:38:16.163Z")
         }

``$max`` Update Operator
````````````````````````

.. operator:: $max

   The :operator:`$max` operator updates the value of the field to a
   specified value *if* the specified value is **greater than** the
   current value of the field. If the field does not exists, the
   :operator:`$max` operator sets the field to the specified value. The
   :operator:`$max` operator can compare values of different types,
   using the :ref:`BSON comparison order
   <faq-dev-compare-order-for-BSON-types>`.

   .. example::

      Consider the following document in the collection ``scores``:

      .. code-block:: javascript

         { _id: 1, highScore: 800, lowScore: 200 }

      The ``highScore`` for the document currently has the value
      ``800``. The following operation uses :operator:`$min` to compare
      the ``800`` and the specified value ``950`` and updates the value
      of ``highScore`` to ``950`` since ``950`` is greater than ``800``:

      .. code-block:: javascript

         db.scores.update( { _id: 1 }, { $max: { highScore: 950 } } )

      The ``scores`` collection now contains the following modified document:

      .. code-block:: javascript

         { _id: 1, highScore: 950, lowScore: 200 }

      The next operation has no effect since the current value of the
      field ``highScore``, i.e. ``950``, is greater than ``870``:

      .. code-block:: javascript

         db.scores.update( { _id: 1 }, { $max: { highScore: 870 } } )

      The document remains unchanged in the ``scores`` collection:

      .. code-block:: javascript

         { _id: 1, highScore: 950, lowScore: 200 }

   .. example::

      Consider the following document in the collection ``tags``:

      .. code-block:: javascript

         { 
           _id: 1,
           desc: "crafts",
           dateEntered: ISODate("2013-10-01T05:00:00Z"),
           dateExpired: ISODate("2013-10-01T16:38:16.163Z")
         }


      The following operation compares the current value of the
      ``dateExpired`` field, i.e.
      ``ISODate("2013-10-01T16:38:16.163Z")``, with the specified date
      ``new Date("2013-09-30")`` to determine whether to update the
      field:

      .. code-block:: javascript

         db.tags.update( { _id: 1 },
                         {
                           $max: {
                                   dateExpired: new Date("2013-09-30"),
                                 }
                          } 
                       )

      The operation does *not* updates the ``dateExpired`` field:

      .. code-block:: javascript
         :emphasize-lines: 5

         {
            _id: 1,
            desc: "decorative arts",
            dateEntered: ISODate("2013-10-01T05:00:00Z"),
            dateExpired: ISODate("2013-10-01T16:38:16.163Z")
         }

``$currentDate`` Update Operator
````````````````````````````````

.. operator:: $currentDate

   The :operator:`$currentDate` operator sets the value of a field to
   the current date, either as a :ref:`Date <document-bson-type-date>`
   or a :ref:`timestamp <document-bson-type-timestamp>`. The default
   type is :ref:`date <document-bson-type-date>`. 

   The :operator:`$currentDate` operator can take as its operand either

   - a boolean ``true`` which creates a Date, or 

   - a document which explicitly specifies the type, i.e. ``{ $type:
     "timestamp" }`` or ``{ $type: "date" }``. The operator is
     *case-sensitive* and accepts only the lowercase ``"timestamp"`` or
     the lowercase ``"date"``.

   .. example::

      Consider the following document in the ``users`` collection:

      .. code-block:: javascript

         { _id: 1, status: "a", lastModified: ISODate("2013-10-02T01:11:18.965Z") }

      The following updates the ``lastModified`` field to the current
      date and the ``lastModifiedTS`` field to the current timestamp as
      well as setting the ``status`` field to ``"D"``.

      .. code-block:: javascript

         db.users.update( { _id: 1 },
                          {
                            $currentDate: {
                                            lastModified: true,
                                            lastModifiedTS: { $type: "timestamp" }
                                          },
                            $set: { status: "D" } 
                          }
                        )

      Following this operation, the updated document would resemble:

      .. code-block:: javascript

         {
           _id: 1,
           status: "D",
           lastModified: ISODate("2013-10-02T01:11:53.976Z"),
           lastModifiedTS: Timestamp(1380676313, 1)
         }

Sharding Improvements
~~~~~~~~~~~~~~~~~~~~~

Support for Removing Orphan Data From Shards
````````````````````````````````````````````

.. versionadded:: 2.5.2

The new :dbcommand:`cleanupOrphaned` is available to remove orphaned
data from a sharded cluster. Orphaned data are those documents in a
collection that exist on shards that belong to another shard in the
cluster. Orphaned data are the result of failed migrations or incomplete
migration cleanup due to abnormal shutdown.

.. dbcommand:: cleanupOrphaned

   :dbcommand:`cleanupOrphaned` removes documents from *one* orphaned
   chunk range on shard and runs directly on the shard's
   :program:`mongod` instance, and requires the
   :authrole:`clusterAdmin` for systems running with :setting:`auth`.
   You do **not** need to disable the :term:`balancer` to run
   :dbcommand:`cleanupOrphaned`.

   In the common case, :dbcommand:`cleanupOrphaned` takes the
   following form:

   .. code-block:: javascript

      { cleanupOrphaned: <namespace>, startingFromKey: { } }

   The ``startingFromKey`` field specifies the lowest value of the
   :term:`shard key` to begin searching for orphaned data. The empty
   document (i.e. ``{ }``) is equivalent to the minimum value for the
   shard key (i.e. ``$minValue``).

   The :dbcommand:`cleanupOrphaned` command returns a document that
   contains a field named ``stoppedAtKey`` that you can use to
   construct a loop, as in the following example in the
   :program:`mongo` shell:

   .. code-block:: javascript

      use admin

      var nextKey = {};

      while (
         nextKey = db.runCommand( { cleanupOrphaned : "test.user", startingFromKey : nextKey } ).stoppedAtKey
         ) { printjson(nextKey); }

   This loop removes all orphaned data on the shard.

Ability to Merge Co-located Contiguous Chunks
`````````````````````````````````````````````

.. versionadded:: 2.5.2

The :dbcommand:`mergeChunks` provides the ability for users to combine
contiguous chunks located on a single shard. This makes it possible to
combine chunks in situations where document removal leaves a sharded
collection with too many empty chunks.

.. dbcommand:: mergeChunks

   Combines two contiguous chunks located on the same shard. The
   :dbcommand:`mergeChunks` takes the following form:

   .. code-block:: javascript

      { mergeChunks: <namespace>, bounds: [ <minKey>, <maxKey> ] }

   The ``bounds`` option specified to :dbcommand:`mergeChunks` *must*
   be the boundaries of existing chunks in the collections. See the
   output of :method:`sh.status()` to see the current shard
   boundaries.

   .. important:: Both chunks **must** reside on the same shard.

   .. tip:: In 2.5.2, :dbcommand:`mergeChunks` has the following
      restrictions, which are subject to change in future releases:

      - :dbcommand:`mergeChunks` will only merge two chunks.

      - one chunk **must** not hold any documents (i.e. an "empty
        chunk").

User-Defined Roles
~~~~~~~~~~~~~~~~~~

In version 2.5.3, MongoDB provides global user management, storing all user and role
data in the ``admin`` database and providing a new set of commands for
managing users and roles. MongoDB also lets you create new roles,
giving you greater flexibility in the assignment of privileges to users.

New Schema for User and Role Data
`````````````````````````````````

MongoDB stores all user and role information for a system in one
database, the ``admin`` database, and no longer stores information
separately in each database. MongoDB defines roles in the
:ref:`admin.system.roles <admin-system-roles-collection>` collection and
defines users in the :ref:`admin.system.users
<admin-system-users-collection>` collection.

To manage users and roles, you make changes through a new set of user-
and role-management commands and no longer do so through updates to an
individual database's :doc:`system.users
</reference/privilege-documents>` collection. The :doc:`system.users
</reference/privilege-documents>` collections in non-``admin`` databases
are deprecated.

.. todo: Add this to the RNs when the command is ready:

   For upgrades, MongoDB provides the ``upgradeUsers`` command to
   migrate data from the deprecated collections.

.. todo: When we write the upgrade document, use this info from Andy
   as appropriate:

   Upgrade all of the nodes to 2.6 (including the config servers), and
   then run the upgradeUsers command. When that command returns ok: 1,
   the upgrade is complete. If that command fails to return or returns
   some other value, it is always safe to run again.

   To upgrade a single node, run upgradeUsers on that node. For a
   replicaset, run it on the primary. For a sharded cluster, run it on
   *one* mongos, and then run it on the primary of each shard. In this
   last case, the upgrades are independent. If one fails, you only have
   to rerun that one, not all of them.

.. _admin-system-roles-collection:

System Roles Schema
^^^^^^^^^^^^^^^^^^^

MongoDB stores roles globally in the ``admin.system.roles`` collection
and provides access through the :ref:`role-management commands
<role-management-commands>`. Each role includes both defined privileges
and inherited privileges. A role defines privileges by specifying
resources and permitted actions. A role inherits privileges from other
roles.

Role documents use the following syntax:

.. code-block:: javascript

   { role: "<role name>",
     db: "<database>",
     privileges: [ { resource: { db: "<database>", collection: "<collection>" },
                     actions: [ "<action>", "<action>", ... ] },
                   ...
                 ]
     roles: [ { role: "<role name>", db: "<role db>" }
              ...
            ]
   }

The ``privileges`` and ``roles`` arrays are always present, even if one
or both is empty. When an array is empty the role contains no privileges
from that array.


.. todo: from Spencer: clarify the differnce between a server and a cluster, how the
   cluster is used, and what actions need to be granted to the cluster
   resource vs which get granted to a database or collection. In our list
   of grantable actions we'll need to make that really clear.


Each document in the ``privileges`` array specifies a resource and the
actions permitted on that resource. A resource can be a collection, a
group of collections, a database, or the ``cluster`` resource. The
resource is the whole database, excluding system collections, if the
``resource.collection`` field is an empty string. The resource is all
collections with the same name across databases if ``resource.db`` is an
empty string. The resource is the cluster if the ``resource`` field is
set to the ``{ cluster : true }`` document.

.. note:: When you grant access to a full database, the system
   collections are excluded, unless you name them explicitly. System
   collections include but are not limited to the following:

   - :data:`<database>.system.profile`
   - :data:`<database>.system.namespaces`
   - :data:`<database>.system.indexes`
   - :data:`<database>.system.js`
   - :data:`local.system.replset` 
   - :ref:`admin.system.users <admin-system-users-collection>`
   - :ref:`admin.system.roles <admin-system-roles-collection>`

For a list of applicable actions, see :ref:`security-user-actions`.

The ``roles`` array lists other roles from which this role inherits
privileges.

.. example:: ``appUser`` role

   The ``appUser`` role specifies privileges in the ``privileges`` array
   but inherits no additional privileges from roles. In the
   ``privileges`` array, the privilege grants four actions to
   the ``myApp`` database, while the next two privileges grant
   *additional* actions to certain collections in the database.

   While the first privilege gives database-wide permission for the
   ``find`` action, the action does not apply to ``myApp``'s system
   collections. To give access to two of the system collections in
   ``myApp``, the last two privileges specify those collections
   explicitly.

   .. code-block:: javascript

      { role: "appUser",
        db: "myApp",
        privileges: [
             { resource: { db: "myApp" , collection: "" },
               actions: [ "find", "createCollection", "dbStats", "collectionStats" ] },
             { resource: { db: "myApp", collection: "logs" },
               actions: [ "insert" ] },
             { resource: { db: "myApp", collection: "data" },
               actions: [ "insert", "update", "remove", "compact" ] },
             { resource: { db: "myApp", collection: "system.indexes" },
               actions: [ "find" ] },
             { resource: { db: "myApp", collection: "system.namespaces" },
               actions: [ "find" ] },
        ],
        roles: []
      }

.. example:: ``appAdmin`` role

   The ``appAdmin`` role both defines and inherits privileges. One
   privilege, to perform the ``shutdown`` action, applies to the
   ``cluster`` resource:

   .. code-block:: javascript

      { role: "appAdmin",
        db: "myApp",
        privileges: [
                 { resource: { db: "myApp", collection: "" },
                   actions: [ "indexing", "dbStats", "collectionStats", "compact", "repairDatabase" ] },
                 { resource: { cluster : true },
                   actions: [ "shutdown" ] }
        ],
        roles: [ { role: "replAdmin", db: "admin" },
                 { role: "appUser", db: "myApp" }
        ] }

.. _admin-system-users-collection:

System Users Schema
^^^^^^^^^^^^^^^^^^^

MongoDB stores users globally in the ``admin.system.users`` collection
and provides access through the :ref:`user management commands
<user-management-commands>`. 

Each user is associated with a database, through the ``db`` field in the
user's document, but the user can have privileges in other databases as
well, through roles assigned in the ``role`` array. Each user document
additionally contains the user's authentication credentials and roles,
and any custom information.

MongoDB uses the following schema to define users:

.. code-block:: javascript

   { user: "<name>",
     db: "<database>",
     credentials: { <authentication credentials> },
     roles: [ { role: "<role>", db: "<database>" },
              "<role>",
              ...
            ],
     customData: < custom information >
    }

The ``roles`` array assigns the user roles from the
:ref:`admin.system.roles <admin-system-roles-collection>` collection.

The array can contain both strings and documents. A string is simply the
name of a role. If the role exists in the user's database, the role is
identified simply by its name. When you specify a role in a command, you
can identify the role by its name if you are running the command in the
role's database.

A role document usually specifies a role that exists in another
database. The document includes two fields, one for the role's name and
the other for the role's database:

.. code-block:: javascript

    { role: "<role>", db: "<database>" }

.. example:: System User Schema

   The following document defines a user, ``Kari``, in the ``home``
   database. Kari has two roles on other databases and the ``read`` role
   on her own database.

   .. code-block:: javascript

      { user: "Kari"
        db: "home",
        credentials: { "MONGODB-CR": "<hashed password>" },
        roles: [ { role: "testWriter", db: "test" },
                 { role: "roClusterAdmin", db: "admin" },
                 "read"
               ],
        customData: { zipCode: 64157 }
      }

Role Creation
`````````````

MongoDB 2.5.3 lets you define custom :ref:`user roles <user-roles>` in
addition to the MongoDB built-in roles, to give your organization more
flexibility in assigning privileges. Within a role, define privileges by
defining pairings of resources and actions, and also by assigning child
roles from which the role inherits privileges.

MongoDB scopes each role to the database in which it is created and
uniquely defines each role by the pairing of its name and its database.
When assigned a role, a user receives all the privileges of that role.

Create new roles using the :dbcommand:`createRole` command and the role
format described by the :ref:`system roles schema
<admin-system-roles-collection>`.

.. _role-management-commands:

Role Management Commands
````````````````````````

MongoDB provides the following commands for creating and managing roles.

.. dbcommand:: createRole

   Creates a role and specifies its privileges. The role applies to the
   database on which you run the command. The :dbcommand:`createRole`
   command returns a duplication error if the role already exists in the
   database.

   To create a role, you must have the :authrole:`createRole` action on
   the database. To add a given privilege to the role, you must have the
   :authrole:`grantAnyRole` action on the database the privilege
   targets. If the privilege targets multiple databases or the
   ``cluster`` resource , you must have the :authrole:`grantAnyRole`
   action on the ``admin`` database.

   To grant a child role to the role, you must have the
   :authrole:`grantAnyRole` action on the child role's database.

   The :dbcommand:`createRole` command takes the following form:

   .. code-block:: javascript

      { createRole: "<new role>",
        privileges: [
          { resource: < resource document >, actions: < action array > },
          { resource: < resource document >, actions: < action array > },
          ...
        ],
        roles: [
          { role: "<role>", db: "<database>" },
          { role: "<role>", db: "<database>" },
          ...
        ],
        writeConcern: { w: "majority" , wtimeout: 5000 }
      }

   The ``privileges`` array specifies resources and permitted
   actions. The ``roles`` array specifies roles
   from which this role inherits privileges. The two arrays use the formats
   described in the :ref:`admin-system-roles-collection` section.

   Both the ``privileges`` and ``roles`` arrays must be present. If you
   choose not to specify privileges or roles, you must provide an empty
   array for that field.

   The following is an example :dbcommand:`createRole` command:

   .. code-block:: javascript

      { createRole: "myClusterwideAdmin",
        privileges: [
          { resource: { cluster: true }, actions: [ "addShard" ] },
          { resource: { db: "config", collection: "" }, actions: [ "find", "update", "insert", "remove" ] },
          { resource: { db: "users", collection: "usersCollection" }, actions: [ "update", "insert", "remove" ] },
          { resource: { db: "", collection: "" }, actions: [ "find" ] }
        ],
        roles: [
          { role: "profile", db: "admin" }
        ],
        writeConcern: { w: "majority" , wtimeout: 5000 }
      }

.. dbcommand:: updateRole

   Updates the role on the database on which you run the command. The
   :dbcommand:`updateRole` command sets the ``roles`` array,
   ``privileges`` array, or both arrays to the values provided,
   overriding the previous values. You must provide at least one of the
   two arrays to make changes.

   To run this command you must have the :authrole:`revokeAnyRole`
   action on all databases, as well as the action permissions described
   below.

   .. code-block:: javascript

      { updateRole: "myClusterwideAdmin",
        privileges: [
          { resource: { db: "", collection: "" },
            actions: [ "find" , "update", "insert", "remove" ] ] }
        ],
        roles: [
          { role: "sysAd", db: "admin" }
        ],
        writeConcern: { w: "majority" , wtimeout: 5000 }
      }

   The ``privileges`` array specifies resources and permitted actions.
   The ``roles`` array specifies roles from which this role inherits
   privileges. The arrays use the formats described in the
   :ref:`admin-system-roles-collection` section.

   .. important:: Required action permissions

      If you update the ``roles`` array, you must have
      :authrole:`grantAnyRole` on the database for every role in the
      updated array.

      If you update the ``privileges`` array, you must have
      :authrole:`grantAnyRole` on the resource of each privilege in the
      updated array. If a privilege affects multiple databases or the
      ``cluster`` resource, you just have :authrole:`grantAnyRole` on
      the ``admin`` database.

      To revoke a role you must have the :authrole:`revokeAnyRole`
      action on all databases.

      The following is an example :dbcommand:`updateRole` command. All
      fields are optional, but you must provide at least one:

.. dbcommand:: dropRole

   Deletes the role from the database on which you run the command. To
   run this command you must have the :authrole:`dropRole` action on the
   database. The :dbcommand:`dropRole` command takes the following form:

   .. code-block:: javascript

      { dropRole: "<role>"}

   For example:

   .. code-block:: javascript

      { dropRole: "myReadOnlyRole"}

.. dbcommand:: dropAllRolesFromDatabase

   Deletes all roles from the database on which you run the command.

   .. todo Get more info. This is not currently in the spec.

.. dbcommand:: grantPrivilegesToRole

   Assigns privileges to a role. To grant a privilege, you must have the
   :authrole:`grantAnyRole` action on the database the privilege
   targets. If the privilege targets multiple databases or the
   ``cluster`` resource, you must have the :authrole:`grantAnyRole`
   action on the ``admin`` database.

   The command takes the following form:

   .. code-block:: javascript

      { grantPrivilegesToRole: "<role>",
        privileges: [
          { resource: { <resource> }, actions: [ "<action>", ... ] },
          ...
        ]
      }

   Specify the privileges using the format for the ``resource``
   documents described in the ref:`admin-system-roles-collection`
   section.

   The following is an example of the
   :dbcommand:`grantPrivilegesToRole`:

   .. code-block:: javascript

      { grantPrivilegesToRole: "myRole",
        privileges: [
          { resource: { db: "A" }, actions: [ "find" ] },
          { resource: { db: "", collection: "system.indexes" }, actions: [ "find" ] }
        ]
      }

.. dbcommand:: revokePrivilegesFromRole

   Removes the specified privileges from the role. The command applies
   to the database on which you run the command. To revoke a privilege
   you must have the :authrole:`revokeAnyRole` action on the database
   the privilege targets. If the privilege targets multiple databases,
   you must have the :authrole:`revokeAnyRole` action on the ``admin``
   database.

   Specify the privileges in the ``privileges`` array using the format
   for ``resource`` documents described in the
   ref:`admin-system-roles-collection` section:

   .. code-block:: javascript

      { revokePrivilegesFromRole: "<role>",
        privileges: [
          { resource: { <resource> }, actions: [ "<action>", ... ] },
          ...
        ]
      }

   To remove a privilege from a role you must match the exact resource
   pattern, as explained in the following example.

   .. example:: Resource patterns must match

      If you have a role with the following privilege:

      .. code-block:: javascript

         { resource: { db: "products", collection: "" }, actions: [ "find" ] }

      You cannot remove ``find`` from just one collection in the
      ``products`` database. Trying to remove the following would result in
      no change:

      .. code-block:: javascript

         { resource: { db: "products", collection: "gadgets" }, actions: [ "find" ] }

      To remove ``find`` you must match the resource. When the resource
      is the whole database, it is not necessary to specify the
      ``collection`` field with the
      :dbcommand:`revokePrivilegesFromRole` command:

      .. code-block:: javascript

         { resource: { db: "products" }, actions: [ "find" ] }

   .. example:: ``revokePrivilegesFromRole`` command

      The following example of :dbcommand:`revokePrivilegesFromRole`
      removes ``find`` from the ``products`` database as well as from
      the ``system.indexes`` collections in all databases:

      .. code-block:: javascript

         { revokePrivilegesFromRole: "associate",
           privileges: [
             { resource: { db: "products"}, actions: [ "find" ] },
             { resource: { db: "", collection: "system.indexes" }, actions: [ "find" ] }
           ]
         }

.. dbcommand:: grantRolesToRole

   Specifies roles from which this role inherits privileges. The command
   applies to the role from database on which you run the command. To
   grant a given role, you must have the :authrole:`grantAnyRole` action
   on the role's database.

   Specify the child roles in the ``grantedRoles`` array, using the
   format for ``role`` documents described in the
   ref:`admin-system-roles-collection` section:

   .. code-block:: javascript

      { grantRolesToRole: "AreaderWriter",
        grantedRoles: [
          { role: "Areader", db: "test"}
        ]
      }

.. dbcommand:: revokeRolesFromRole

   Removes child roles from this role. To remove a given role, you must
   have the :authrole:`revokeAnyRole` action on the role's database.

   The command takes the form described here. Specify the roles to
   remove using the format for ``role`` documents described in the
   ref:`admin-system-roles-collection` section:

   .. code-block:: javascript

      { revokeRolesFromRole: "AreaderWriter",
        revokedRoles: [
          { role: "Areader", db: "test"}
        ]
      }

   .. note:: If the role does not have any of the roles being revoked,
      MongoDB does *not* give an error message.

.. dbcommand:: rolesInfo

   Lists the privileges and child roles that a role contains. The
   :dbcommand:`rolesInfo` command applies to the current database. To
   view role information you must have the :authrole:`viewRole` action
   on the role's database or be authenticated as a user explicitly
   granted the role.

   To match a single role, use the following form, where ``<role>`` is a
   role that exists on the database where the command is run:

   .. code-block:: javascript

      { rolesInfo: "<role>" }

   To match a single role on a specific database, use the following
   form, where ``<database>`` is the role's database.

   .. code-block:: javascript

      { rolesInfo: { role: "<role>", db: "<database>" } }

   To view info for several roles, use an array, as in the following
   example that specifies the roles and their databases:

   .. code-block:: javascript

      { rolesInfo: [ 
           { role: "associate", db: "products" }, 
           { role: "manager", db: "resources" }, 
      }

.. _user-management-commands:

User Management Commands
````````````````````````

MongoDB provides the following new commands for managing users and user
roles. You no longer manage users through direct updates to the
:doc:`system.users </reference/privilege-documents>` collection but
instead manage users through the following commands.

.. dbcommand:: createUser

   Creates a new user in the database where the command is run. To
   grant a role, you must have the :authrole:`grantAnyRole` action on
   the role's database. The :dbcommand:`createUser` command returns a
   duplicate-user error if the user exists.

   The following is an example :dbcommand:`createUser` command:

   .. code-block:: javascript

      { createUser: "Carlos",
        pwd: "cleartext password",
        customData: { employeeId: 12345 },
        roles: [
          { role: "clusterAdmin", db: "admin" },
          { role: "ABreader", db: "admin" },
          "readWrite"
        ],
        writeConcern: { w: "majority" , wtimeout: 5000 }
      }

   The ``pwd`` field's password is sent over-the-wire to the server in
   cleartext. Use SSL to encrypt the password. The ``pwd`` field is
   required, *unless* you run :dbcommand:`createUser` on ``$external``.
   Users created on "$external" are assumed to have credentials stored
   externally to MongoDB, as with :doc:`MongoDB Enterprise installations
   that use Kerberos
   </tutorial/control-access-to-mongodb-with-kerberos-authentication>`.

   The ``customData`` field is optional and contains any arbitrary
   information.

   The ``roles`` array uses the formats described in the
   :ref:`admin-system-users-collection` section. The ``roles`` array is
   required. If you choose not to specify roles, you must provide an
   empty ``roles`` array, in which case the user starts with no roles.

.. dbcommand:: updateUser

   Updates the user's profile on the database on which you run the
   command. To update a user, you must specify ``updateUser`` field and
   at least one other field.

   The following is an example :dbcommand:`updateUser` command:

   .. code-block:: javascript

      { updateUser: "Carlos",
        pwd: "displayed password"
        customData: { employeeId: 54321 },
        roles: [
          { role: "Areader", db: "A" }
        ],
        writeConcern: { w: "majority" , wtimeout: 5000 }
      }

   The ``roles`` array uses the formats described in the
   :ref:`admin-system-users-collection` section.

   .. important::

      To change your own password you must have the
      :authrole:`changeOwnPassword` action. To change another user's
      password you must have the :authrole:`changeAnyPassword` action.

      To add a role, you must have the :authrole:`grantAnyRole` action
      for the role's database. To remove a role you must have
      :authrole:`revokeAnyRole` action on all databases.

      To change custom data you must have either the
      :authrole:`changeOwnCustomData` action for your own data or the
      :authrole:`changeAnyCustomData` action for another user's data.

.. dbcommand:: dropUser

   Removes the user from the database on which you run the command. The
   following is an example :dbcommand:`dropUser` command:

   .. code-block:: javascript

      { dropUser: "Carlos" }

.. question: is there a way to drop a user from all databases

.. dbcommand:: grantRolesToUser

   Grants a role and its privileges to a user. To grant a given role,
   you must have the :authrole:`grantAnyRole` action on the role's
   database.

   The following is an example :dbcommand:`grantRolesToUser` command:

   .. code-block:: javascript

      { grantRolesToUser: "Erin",
        roles: [
          { role: "Areader", db: "A"},
          "Breader"
        ],
        writeConcern: { w: "majority" , wtimeout: 5000 }
      }

   The ``roles`` array uses the formats described in the
   :ref:`admin-system-users-collection` section.

.. dbcommand:: revokeRolesFromUser

   Removes a role from a user. To remove a role, you must have the
   :authrole:`revokeAnyRole` action on the role's database.

   The following is an example :dbcommand:`revokeRolesFromUser` command:

   .. code-block:: javascript

      { grantRolesToUser: "Dan",
        roles: [
          { role: "Areader", db: "A"},
          "Breader"
        ],
        writeConcern: { w: "majority" , wtimeout: 5000 }
      }

   The ``roles`` array uses the formats described in the
   :ref:`admin-system-users-collection` section.

.. dbcommand:: usersInfo

   Returns information about the specified users. The command applies to
   the database on which you run it. You can always view your own
   information. To view another user's information, you must have the
   :authrole:`viewUser` action on the user's database.

   The command takes the following form:

   .. code-block:: javascript

      { usersInfo: <username> }

.. Is this below still true? I've commented it out for now:

.. To match users on all databases, run :dbcommand:`usersInfo` on the
   ``admin`` database and set the optional ``anyDB`` argument to
   ``true``. The ``anyDB`` argument is available only on ``admin``.

.. _security-user-actions:

User Actions
````````````

This section lists the actions you can specify when defining a privilege
in a role.

New User Actions
^^^^^^^^^^^^^^^^

MongoDB adds the following new user actions. The actions apply to the
database in which they are assigned, unless otherwise noted:

.. authrole:: createUser

   The user can create new users in the given database.

.. authrole:: createRole

   The user can create new roles in the given database.

.. authrole:: dropUser

   The user can remove any user from the given database.

.. authrole:: dropRole

   The user can delete any role from the given database.

.. authrole:: grantAnyRole

   The user can grant any role in the database to any other user in the database.

.. authrole:: revokeAnyRole

   The user can remove any role from any user in the given database.

.. authrole:: changeOwnPassword

   Users with this role can change their own passwords. This role
   applies to the whole cluster.

.. authrole:: changeAnyPassword

   The user can change the password of any user in the given database.

.. authrole:: changeOwnCustomData

   Users with this role can change their own custom information, as
   stored in the ``customData`` field of the ``admin.system.users``
   collection. This role applies to the whole cluster.

.. authrole:: changeAnyCustomData

   The user can change the custom information of any user in the
   cluster. This role applies to the cluster. Custom information
   is stored in the ``customData`` field of the ``admin.system.users``
   collection.

.. authrole:: viewUser

   The user can view the information of any user in the given database.

.. authrole:: viewRole

   The user can view information about any role in the given database.

Existing Actions
^^^^^^^^^^^^^^^^

.. todo: update for the final 2.6 code, which is expected to have fewer
   actions than those listed here

In addition to the actions new in version 2.6, MongoDB provides the
following user actions:

.. hlist::
   :columns: 3

   * ``_migrateClone``
   * ``_recvChunkAbort``
   * ``_recvChunkCommit``
   * ``_recvChunkStart``
   * ``_recvChunkStatus``
   * ``_transferMods``
   * ``addShard``
   * ``applyOps``
   * ``captrunc``
   * ``clean``
   * ``clone``
   * ``cloneCollectionLocalSource``
   * ``cloneCollectionTarget``
   * ``closeAllDatabases``
   * ``collMod``
   * ``collStats``
   * ``compact``
   * ``connPoolStats``
   * ``connPoolSync``
   * ``convertToCapped``
   * ``copyDbGetNonce``
   * ``copyDbTarget``
   * ``cpuProfiler``
   * ``createCollection``
   * ``cursorInfo``
   * ``dbHash``
   * ``dbStats``
   * ``delete``
   * ``diagLogging``
   * ``dropCollection``
   * ``dropDatabase``
   * ``dropIndexes``
   * ``enableSharding``
   * ``ensureIndex``
   * ``find``
   * ``flushRouterConfig``
   * ``fsync``
   * ``getCmdLineOpts``
   * ``getLog``
   * ``getParameter``
   * ``getShardMap``
   * ``getShardVersion``
   * ``handshake``
   * ``hostInfo``
   * ``indexStats``
   * ``inprog``
   * ``insert``
   * ``killCursors``
   * ``killop``
   * ``listDatabases``
   * ``listShards``
   * ``logRotate``
   * ``moveChunk``
   * ``movePrimary``
   * ``netstat``
   * ``profileEnable``
   * ``reIndex``
   * ``removeShard``
   * ``repairDatabase``
   * ``replSetElect``
   * ``replSetFreeze``
   * ``replSetFresh``
   * ``replSetGetRBID``
   * ``replSetGetStatus``
   * ``replSetHeartbeat``
   * ``replSetInitiate``
   * ``replSetMaintenance``
   * ``replSetReconfig``
   * ``replSetStepDown``
   * ``replSetSyncFrom``
   * ``resync``
   * ``serverStatus``
   * ``setParameter``
   * ``setShardVersion``
   * ``shardCollection``
   * ``shardingState``
   * ``shutdown``
   * ``split``
   * ``splitChunk``
   * ``splitVector``
   * ``storageDetails``
   * ``top``
   * ``touch``
   * ``unlock``
   * ``unsetSharding``
   * ``update``
   * ``userAdmin``
   * ``validate``
   * ``writeBacksQueued``
   * ``writebacklisten``

SSL Improvements
~~~~~~~~~~~~~~~~

Optionally Prompt for SSL Certificate Passphrases at Server Startup
```````````````````````````````````````````````````````````````````

In MongoDB 2.6, a :program:`mongod` or :program:`mongos` can now
interactively prompt the user at startup to enter the passphrase for the
locally encrypted SSL key. This provides an alternative to providing a
cleartext passphrase on the command line or in a configuration file.

The passphrase prompt option is available if you run the MongoDB instance in the
foreground with a connected terminal. The prompt will not work if you run the
process in a non-interactive session (e.g. without a terminal or as a
service on Windows).

To receive the passphrase prompt, start the MongoDB instance with the
``.pem`` file that contains the SSL certificate and key but *do not*
specify the passphrase. MongoDB interactively prompts
for a passphrase.

You can use the passphrase prompt with both the :setting:`sslPEMKeyFile`
option and the new :setting:`sslClusterFile` option (see
:ref:`rn26-new-protocol-and-parameters`).

For the :setting:`sslPEMKeyFile` option, specify the encrypted SSL
private key/certificate ``.pem`` file with :setting:`sslPEMKeyFile` but
do not specify an :setting:`sslPEMKeyPassword`.

For the :setting:`sslClusterFile` option, specify an x.509 certificate-and-key
``.pem`` file with :setting:`sslClusterFile` but do not specify an
:setting:`sslClusterPassword`.

For instructions on configuring SSL see :doc:`/tutorial/configure-ssl`.

MongoDB Allows Only Strong SSL Ciphers
``````````````````````````````````````

.. DOCS-1921

MongoDB's SSL encryption only allows use of strong SSL ciphers, with a minimum
of 128-bit key length for all connections.

The strong-cipher requirement prevents an old or malicious client from forcing
use of a weak cipher.

Support for SSL and non-SSL Connections on the Same Port
````````````````````````````````````````````````````````

.. merge this under the new ~~~ header created by DOCS-1921

.. DOCS-1941

.. draft, waiting for feature complete before sending to technical review

MongoDB supports mixed SSL and non-SSL connections on the same port to
allow upgrades to SSL without forcing downtime. MongoDB provides
a new command-line option and server command that configure a server
port to allow unencrypted internal connections while maintaining
encrypted external connections.

To use such mixed SSL modes on a port, you must restrict access at the
network level. You cannot at this time restrict encryption based on
MongoDB user or role. Outgoing connections from the MongoDB server
cannot choose encryption based on connection target.

You can only increase security level on a server. Changing a server's
listening behavior does not require a restart of the server.

The --sslMode Command-Line Option
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

MongoDB provides the following new server command-line option to handle
mixed SSL mode:

.. code-block:: sh

   --sslMode <parameter>

The value of ``<parameter>`` is one of the following:

- ``noSSL``. The server does not use SSL.

- ``onlySSL``. The server uses only SSL.

- ``acceptSSL``. Outgoing connections do not use SSL. For incoming
  connections, the server accepts both SSL and non-SSL.

- ``sendAcceptSSL``. Outgoing connections use SSL. For incoming
  connections, the server accepts both SSL and non-SSL.

Upgrade a Cluster to Use SSL
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To upgrade from a MongoDB cluster using no SSL encryption to one using
*only* SSL encryption, do the following:

1. Perform a rolling upgrade to MongoDB 2.6 on all nodes, and activate
   mixed-mode SSL by using the ``--sslMode`` command-line option
   with the ``acceptSSL`` parameter:

  .. code-block:: javascript

     --sslMode=acceptSSL

2. Switch all clients to use SSL.

3. Switch all outgoing server connections to use SSL by using the
   ``setSSLMode`` command with the ``sendAcceptSSL`` parameter.

   At this point, all connections should be using SSL.

4. Switch all servers to accept only SSL connections by using the
   ``setSSLMode`` command with the ``onlySSL`` parameter on each server.

The setSSLMode Command
^^^^^^^^^^^^^^^^^^^^^^

MongoDB also provides the new server command ``setSSLMode``. The command
takes the same parameters as the new ``--sslMode`` command-line option.

x.509 Authentication
````````````````````

MongoDB introduces x.509 certificate authentication for use with a
secure :doc:`SSL connection </tutorial/configure-ssl>`.

.. important:: To use SSL, you must either use MongoDB Enterprise or
   build MongoDB locally using ``scons`` with the ``--ssl`` option.

The x.509 authentication allows clients to authenticate to servers with
certificates instead of with username and password.

The x.509 authentication also allows sharded cluster members and
replica set members to use x.509 certificates to verify their
membership to the cluster or the replica set instead of using key
files. The membership authentication is an internal process.

.. _`default distribution of MongoDB`: http://www.mongodb.org/downloads
.. _`MongoDB Enterprise`: http://www.mongodb.com/products/mongodb-enterprise

x.509 Certificate
^^^^^^^^^^^^^^^^^

The x.509 certificate for client authentication and the x.509
certificate for internal authentication have different properties.

The client certificate must have the following
properties:

- A single Certificate Authority (CA) must issue the certificates
  for both the client and the server.

- Client certificates must contain the following fields:

  .. code-block:: none

     keyUsage = digitalSignature
     extendedKeyUsage = clientAuth

The member certificate, used for internal authentication to verify
membership to the sharded cluster or a replica set, must have the
following properties:

- A single Certificate Authority (CA) must issue all the x.509
  certificates for the members of a sharded cluster or a replica set.

- The member certificate's ``subject``, which contains the
  Distinguished Name (``DN``), must match the ``subject`` of the
  certificate on the server, *starting from and including* the
  Organizational Unit (``OU``) of the certificate on the server.

.. _rn26-new-protocol-and-parameters:

New Protocol and Parameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The change for x.509 authentication introduces a new ``MONGODB-X509``
protocol. For internal authentication for membership, the change also
introduces the ``--clusterAuthMode``, ``--sslClusterFile`` and the
``--sslClusterPassword`` options.

Use the ``--clusterAuthMode`` option to enable internal x.509
authentication for membership. The ``--clusterAuthMode`` option can
have one of the following values:

.. list-table::
   :header-rows: 1
   :widths: 20 40

   * - Value

     - Description

   * - ``keyfile``

     - Default value. Use keyfile for authentication.

   * - ``sendKeyfile``

     - For rolling upgrade purposes. Send the keyfile for
       authentication but can accept either keyfile or x.509
       certificate.

   * - ``sendX509``

     - For rolling upgrade purposes. Send the x.509 certificate for
       authentication but can accept either keyfile or x.509
       certificate.

   * - ``x509``

     - Recommended. Send the x.509 certificate for authentication and
       accept **only** x.509 certificate.

For the ``--sslClusterFile`` option, specify the full path to the x.509
certificate and key PEM file for the cluster or set member. If the key
is encrypted, specify the password with the ``--sslClusterPassword``
option.

Configure MongoDB Server to Use x.509
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Configure the MongoDB server from the command line, as in the following
[#additionalOptions]_:

.. code-block:: sh

   mongod --sslOnNormalPorts --sslPEMKeyFile <path to sslCertificate and key PEM file> --sslCAFile <path to root CA PEM file>

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   sslOnNormalPorts = true
   sslPEMKeyFile = <path to sslCertificate and key PEM file>
   sslCAFile = <path to the root CA PEM file>

To specify the x.509 certificate for internal cluster member
authentication, append the additional SSL options ``--clusterAuthMode``
and ``--sslClusterFile``, as in the following example for a member of a
replica set [#additionalOptions]_:

.. code-block:: sh

   mongod --replSet <name> --sslOnNormalPorts --sslPEMKeyFile <path to sslCertificate and key PEM file>  --sslCAFile <path to root CA PEM file>  --clusterAuthMode x509 --sslClusterFile <path to membership certificate and key PEM file>

.. [#additionalOptions] Include any additional options, SSL
   or otherwise, that are required for your specific configuration.

Authenticate with a x.509 Certificate
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To authenticate with a client certificate, you must first add a MongoDB
user that corresponds to the client certificate. See
:ref:`addX509SubjectUser`.

To authenticate, use the :method:`db.auth()` method in the
``$external`` database. For the ``mechanism`` field, specify
``"MONGODB-X509"``, and for the ``user`` field, specify the user, or
the ``subject``, that corresponds to the client certificate.

For example, if using the :program:`mongo` shell,

1. Connect :program:`mongo` shell to the :program:`mongod` set up for
   SSL:

   .. code-block:: sh

      mongo --ssl --sslPEMKeyFile <path to CA signed client PEM file>

#. To perform the authentication, use the :method:`db.auth()` method in the
   ``$external`` database.

   .. code-block:: javascript

      db.getSiblingDB("$external").auth(
                                         {
                                           mechanism: "MONGODB-X509",
                                           user: "CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry"
                                         }
                                       )

.. _addX509SubjectUser:

Add x.509 Certificate ``subject`` as a User
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To authenticate with a client certificate, you must first add the value
of the ``subject`` from the client certificate as a MongoDB user.

#. You can retrieve the ``subject`` from the client certificate with
   the following command:

   .. code-block:: sh

      openssl x509 -in <pathToClient PEM> -inform PEM -subject -nameopt RFC2253

   The command returns the ``subject`` string as well as certificate:

   .. code-block:: sh

      subject= CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry
      -----BEGIN CERTIFICATE-----
      # ...
      -----END CERTIFICATE-----

#. Add the value of the ``subject``, omitting the spaces, from the
   certificate as a user.

   For example, in the :program:`mongo` shell, to add the user with
   both the ``readWrite`` role in the ``test`` database and the
   ``userAdminAnyDatabase`` role which is defined only in the ``admin``
   database:

   .. code-block:: javascript

      use $external
      db.addUser(
                  {
                    name: 'CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry',
                    roles: [
                             { name: 'readWrite', db: 'test' },
                             { name: 'userAdminAnyDatabase', db: 'admin' }
                           ]
                  }
                )

   In the above example, to add the user with the ``readWrite`` role in
   the ``test`` database, the role specification document specified
   ``'test'`` in the ``db`` field. To add ``userAdminAnyDatabase``
   role for the user, the above example specified ``'admin'`` in the
   ``db`` field.

   .. note::
      The following roles are defined only in the ``admin`` database:
      ``clusterAdmin``, ``readAnyDatabase``, ``readWriteAnyDatabase``,
      ``dbAdminAnyDatabase``, and ``userAdminAnyDatabase``. To add the
      user with these privileges, specify ``'admin'`` in the ``db``.

See :doc:`/tutorial/add-user-to-database` for details on adding a user
with roles using :doc:`privilege documents
</reference/privilege-documents>`.

Upgrade Clusters to x.509 Authentication
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To upgrade clusters that are currently using keyfile authentication to
x.509 authentication, use a rolling upgrade process:

1. For each node of a cluster, set ``--clusterAuthMode`` to
   ``sendKeyFile``. With this setting, each node continues to use its
   keyfile to authenticate itself as a member. However, each node can now
   accept either a keyfile or the x.509 certificate from other members to
   authenticate those members. Upgrade all nodes of the cluster to this
   setting.

2. Then, for each node of a cluster, set ``--clusterAuthMode`` to
   ``sendX509`` and set ``--sslClusterFile`` to the appropriate path of
   the node's certificate. [#encryptedKey]_ With this setting, each
   node uses its x.509 certificate to authenticate itself as a member.
   However, each node continues to accept either a keyfile or the x.509
   certificate from other members to authenticate those members.
   Upgrade all nodes of the cluster to this setting.

3. Optional but recommended. Finally, for each node of the cluster, set
   ``--clusterAuthMode`` to ``x509`` to only use the x.509 certificate
   for authentication.

.. [#encryptedKey] If the key is encrypted, set the
   ``--sslClusterPassword`` to the password to decrypt the key.

Index Building Improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Background Index Builds Replicate to Secondaries
````````````````````````````````````````````````

Starting in MongoDB 2.5.0, if you initiate a :ref:`background index
build <index-creation-background>` on a :term:`primary`, the
secondaries will replicate the index build in the background.
In previous versions of MongoDB, secondaries built all indexes in the
foreground, even if the primary built an index in the background.

For all index builds, secondaries will not begin building indexes
until the primary has successfully completed the index build.

``mongod`` Automatically Continues in Progress Index Builds Following Restart
`````````````````````````````````````````````````````````````````````````````

If your :program:`mongod` instance was building an index when it
shutdown or terminated, :program:`mongod` will now continue building
the index when the :program:`mongod` restarts. Previously, the index
build *had* to finish building before :program:`mongod` shutdown.

To disable this behavior the 2.5 series adds a new run time option,
:setting:`noIndexBuildRetry` (or via, ``--noIndexBuildRetry`` on the
command line,) for :program:`mongod`. :setting:`noIndexBuildRetry`
prevents :program:`mongod` from continuing rebuilding indexes that did
not finished building when the :program:`mongod` last shut down.

.. setting:: noIndexBuildRetry

   By default, :program:`mongod` will attempt to rebuild indexes upon
   start-up *if* :program:`mongod` shuts down or stops in the middle
   of an index build. When enabled, this option prevents this
   behavior.

Tool Improvements
~~~~~~~~~~~~~~~~~

Global ``mongorc.js`` File
``````````````````````````

If the file :file:`mongorc.js` exists in the :file:`/etc` directory (or
:file:`%ProgramData%\\MongoDB` directory on Windows), the
:program:`mongo` shell evaluates the contents of this file on start-up.
Then, the :program:`mongo` shell evaluates the user's
:file:`.mongorc.js` file if the file exists in the user's :envvar:`HOME
directory`.

The :option:`--norc` option for :program:`mongo` suppresses only the
user's :file:`.mongorc.js` file.

.. important::
   The :file:`mongorc.js` in :file:`/etc` directory must have read
   permission for the user running the shell.

Support for ``--quiet`` Option for all Tools
````````````````````````````````````````````

.. versionadded:: 2.5.0

All MongoDB :doc:`executable files </reference/program>` now support
the ``--quiet`` option. This option suppresses all logging output
except for error messages.

``mongoimport`` Uses Filename If Collection Name Is Not Specified
`````````````````````````````````````````````````````````````````

.. versionadded:: 2.5.3

When invoked without the ``-c`` or ``--collection`` command-line argument,
the :program:`mongoimport` tool uses the input filename as the name
of the collection. MongoDB omits the extension of the file from the
collection name if the input file has an extension.

.. example::

   The following command imports data from the ``contacts.csv`` file
   into the ``contacts`` collection:

   .. code-block:: none

      mongoimport --db users --type csv --file /opt/backups/contacts.csv

   To specify the collection to import, use the ``-c`` or
   ``--collection`` option:

   .. code-block:: none

      mongoimport --db users --collection contacts --type csv --file /opt/backups/contacts.csv

``mongostat`` Can Support ``--rowcount`` Option with ``--discover`` Option
``````````````````````````````````````````````````````````````````````````

.. versionadded:: 2.5.3

The :program:`mongostat` program now produces the specified
number of lines of output when using :option:`--rowcount` (:option:`-n`)
with the :option:`--discover` option. In earlier versions of
:program:`mongostat`, the :option:`--discover` option would override
:option:`--rowcount`, and would continue to produce output until the
user terminated the program.
   
Limit for ``maxConns`` Removed
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 2.5.0, there is no longer any upward limit for the
:setting:`maxConns`, or :program:`mongod --maxConns` and
:program:`mongos --maxConns` options. Previous versions capped the
maximum possible :setting:`maxConns` setting at ``20,000``
connections.

See :setting:`maxConns`.

Geospatial Enhancements
~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.5.2

MongoDB added support for the following `GeoJSON
<http://geojson.org/geojson-spec.html>`_ object types for use with
:doc:`2dsphere indexes </core/2dsphere>`:

- `MultiPoint <http://geojson.org/geojson-spec.html#id5>`_

- `MultiLineString <http://geojson.org/geojson-spec.html#id6>`_

- `MultiPolygon <http://geojson.org/geojson-spec.html#id7>`_

- `GeometryCollection <http://geojson.org/geojson-spec.html#geometrycollection>`_

C++ Driver Enhancement
~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.5.0

The C++ driver has been updated to monitor :term:`replica set` health with the
:dbcommand:`isMaster` command instead of :dbcommand:`replSetGetStatus`.
This allows the C++ driver to support systems that have access control enabled.

MSI Package for MongoDB Available for Windows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.5.3

MongoDB now distributes MSI packages for Microsoft Windows. This is the
recommended method for MongoDB installation under Windows.

New Replica Set Status Methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB provides two additional methods to provide information
regarding the status of a :term:`replica set`:
:method:`rs.printReplicationInfo()` and
:method:`rs.printSlaveReplicationInfo()`.

The :method:`rs.printReplicationInfo()` method provides a formatted
report of the status of a :term:`replica set` from the perspective of
the primary set member. The output is identical to that of the
:method:`db.printReplicationInfo()` method.

The :method:`rs.printSlaveReplicationInfo()` method provides a
formatted report of the status of a :term:`replica set` from the
perspective of a secondary set member. The output is identical to that
of the :method:`db.printSlaveReplicationInfo()` method.

MongoDB Enterprise Features
---------------------------

Support for Auditing
~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.5.2

MongoDB Enterprise adds features to audit server and client activity
for :program:`mongod` and :program:`mongos` instances.

.. important:: Auditing, like all new features in 2.5.2, is in ongoing
   development. Specifically the interface, output format, audited
   events and the structure of audited events will change
   significantly in the in the 2.5 series before the release of 2.6.

To enable auditing, start :program:`mongod` or :program:`mongos` with
the following argument:

.. code-block:: sh

   --setParameter auditLogPath=<option>

The value of ``<option>`` is one of the following:

- a path. This may be the same as the :setting:`logpath` for MongoDB's
  process log. If you specify the same log file, then the path
  specification must be *exactly* the same as the :setting:`logpath`
  specification.

- the string ``:console`` to output audit log messages to standard
  output.

- the string ``:syslog`` to output audit log messages to the system's
  syslog facility.

.. tip:: As of 2.5.2, auditing does not support filtering of audit
   events.

MongoDB Enterprise for Windows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.5.3

MongoDB Enterprise for Windows is now available. It includes advanced
Kerberos security, SSL, and SNMP support.

.. include:: /includes/admonition-mongodb-enterprise-windows-ldap.rst

SASL Library Change
~~~~~~~~~~~~~~~~~~~

MongoDB Enterprise uses Cyrus SASL instead of GNU SASL (``libgsasl``).
This change has the following SASL2 and Cyrus SASL library and GSSAPI
plugin dependencies:

For Debian or Ubuntu, install the following:

.. code-block:: sh

   sudo apt-get install cyrus-sasl2-dbg cyrus-sasl2-mit-dbg libsasl2-2 libsasl2-dev libsasl2-modules libsasl2-modules-gssapi-mit

For CentOS, Red Hat Enterprise Linux, and Amazon AMI, install the
following:

.. code-block:: sh

   sudo yum install cyrus-sasl cyrus-sasl-lib cyrus-sasl-devel cyrus-sasl-gssapi

For SUSE, install the following:

.. code-block:: sh

   sudo zypper install cyrus-sasl cyrus-sasl-devel cyrus-sasl-gssapi

LDAP Support for Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB Enterprise provides support for proxy authentication of users.  This
change allows administrators to configure a MongoDB cluster to authenticate
users via Linux PAM or by proxying authentication requests to a specified LDAP
service.

.. include:: /includes/admonition-mongodb-enterprise-windows-ldap.rst

.. warning::

   Because this change uses ``SASL PLAIN`` mechanism to transmit the
   user password to the MongoDB server, you should, in general, use
   only on a trusted channel (VPN, SSL, trusted wired network).

Configuration
`````````````

LDAP support for user authentication requires proper configuration of
the ``saslauthd`` daemon process as well as introduces a new server
parameter, ``saslauthdPath``. ``saslauthdPath`` is the path to the Unix
Domain Socket of the ``saslauthd`` instance to use for proxy
authentication.

``saslauthd`` Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^

On systems that configure ``saslauthd`` with a
``/etc/sysconfig/saslauthd`` file, such as Red Hat Enterprise Linux,
Fedora, CentOS, Amazon Linux AMI, set the mechanism ``MECH`` to
``ldap``:

.. code-block:: none

   MECH=ldap

On systems that configure ``saslauthd`` with a
``/etc/default/saslauthd`` file, set the mechanisms option to
``ldap``:

.. code-block:: none

   MECHANISMS="ldap"

To use with *ActiveDirectory*, start ``saslauthd`` with the following
configuration options:

.. code-block:: none

   ldap_servers: <ldap uri, e.g. ldaps://ad.example.net>
   ldap_use_sasl: yes
   ldap_mech: DIGEST-MD5
   ldap_auth_method: fastbind

To connect to an OpenLDAP server, use a test ``saslauthd.conf`` with
the following content:

.. code-block:: none

   ldap_servers: <ldap uri, e.g. ldaps://ad.example.net>
   ldap_search_base: ou=Users,dc=example,dc=com
   ldap_filter: (uid=%u)

To use this sample OpenLDAP configuration, create users with a ``uid``
attribute (login name) and place under the ``Users`` organizational
unit (``ou``).

To test the ``saslauthd`` configuration, use ``testsaslauthd`` utility,
as in the following example:

.. code-block:: sh

   testsaslauthd -u testuser -p testpassword -s mongod -f /var/run/saslauthd/mux

For more information on ``saslauthd`` configuration, see
`<http://www.openldap.org/doc/admin24/guide.html#Configuring saslauthd>`_.

MongoDB Server Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Configure the MongoDB server with the ``authenticationMechanisms``
parameter and the ``saslauthdPath`` parameters using either the command
line option :option:`--setParameter <mongod --setParameter>` or the
:doc:`configuration file </reference/configuration-options>`:

- If ``saslauthd`` has a socket path of ``/<some>/<path>/saslauthd``,
  set the ``saslauthdPath`` parameter to
  ``/<some>/<path>/saslauthd/mux`` and the ``authenticationMechanisms``
  parameter to ``PLAIN``, as in the following command line example:

  .. code-block:: sh

     mongod --setParameter saslauthdPath=/<some>/<path>/saslauthd/mux --setParameter authenticationMechanisms=PLAIN --auth

  Or to set the configuration in the :doc:`configuration file
  </reference/configuration-options>`, add the parameters:

  .. code-block:: sh

     setParameter=saslauthdPath=/<some>/<path>/saslauthd/mux
     setParameter=authenticationMechanisms=PLAIN
     auth=true

- Otherwise, set the ``saslauthdPath`` to the empty string ``""`` to use
  the library's default value and the ``authenticationMechanisms``
  parameter to ``PLAIN``, as in the following command line example:

  .. code-block:: sh

     mongod --setParameter saslauthdPath="" --setParameter authenticationMechanisms=PLAIN --auth

  Or to set the configuration in the :doc:`configuration file
  </reference/configuration-options>`, add the parameters:

  .. code-block:: sh

     setParameter=saslauthdPath=""
     setParameter=authenticationMechanisms=PLAIN
     auth=true

Authenticate in the ``mongo`` Shell
```````````````````````````````````

To use this authentication mechanism in the :program:`mongo` shell, you
**must** pass ``digestPassword: false`` to :method:`db.auth()` when
authenticating on the ``$external`` database, since the server must
receive an undigested password to forward on to ``saslauthd``, as in
the following example:

.. code-block:: javascript

   use $external
   db.auth(
            {
              mechanism: "PLAIN",
              user: "application/reporting@EXAMPLE.NET",
              pwd: "some1nterestingPwd",
              digestPassword: false
            }
          )
