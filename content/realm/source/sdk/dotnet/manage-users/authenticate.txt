.. meta::
   :robots: noindex, nosnippet

.. _dotnet-authenticate:

=============================
Authenticate Users - .NET SDK
=============================

.. meta:: 
  :description: Authenticate users in many ways with the Atlas Device SDK for .NET.

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The SDK provides an API for authenticating users using any enabled
authentication provider. Instantiate a 
:dotnet-sdk:`Credentials <reference/Realms.Sync.Credentials.html>` 
object and pass
it to the  
:dotnet-sdk:`LogInAsync() <reference/Realms.Sync.App.html#Realms_Sync_App_LogInAsync_Realms_Sync_Credentials_>` 
method to authenticate and obtain a :dotnet-sdk:`User <reference/Realms.Sync.User.html>`
instance. The ``Credentials`` class exposes factory methods that correspond to 
each of the authentication providers:

Before you can authenticate a user, ensure you have:

- :ref:`Created an App <create-a-realm-app>`
- Enabled one or more :ref:`authentication providers <authentication-providers>`
- :ref:`Installed the .NET SDK <dotnet-install>`

Log In
------

.. _dotnet-login-anonymous:

Anonymous User
~~~~~~~~~~~~~~

If you have enabled :ref:`Anonymous authentication <anonymous-authentication>` in the
App Services UI, users can immediately log into your app without providing any identifying
information. The following code shows how to do this:

.. literalinclude:: /examples/generated/dotnet/AuthenticationExamples.snippet.logon_anon.cs
   :language: csharp

.. _dotnet-login-email-password:

Email/Password User
~~~~~~~~~~~~~~~~~~~

If you have enabled :ref:`Email/Password authentication <email-password-authentication>`,
you can log in using the following code:

.. literalinclude:: /examples/generated/dotnet/AuthenticationExamples.snippet.logon_EP.cs
   :language: csharp

.. _dotnet-login-api-key:

API Key User
~~~~~~~~~~~~

If you have enabled :ref:`API Key authentication <api-key-authentication>`,
you can log in using the following code:

.. literalinclude:: /examples/generated/dotnet/AuthenticationExamples.snippet.logon_API.cs
   :language: csharp

.. _dotnet-login-custom-jwt:

Custom JWT User
~~~~~~~~~~~~~~~

If you have enabled the :ref:`Custom JWT authentication provider
<custom-jwt-authentication>`, you can log in using the following code:

.. literalinclude:: /examples/generated/dotnet/AuthenticationExamples.snippet.logon_JWT.cs
   :language: csharp

.. _dotnet-login-custom-function:

Custom Function User
~~~~~~~~~~~~~~~~~~~~

If you have enabled the 
:ref:`Custom Function authentication provider <custom-function-authentication>`,
you can log in using the following code:

.. literalinclude:: /examples/generated/dotnet/AuthenticationExamples.snippet.logon_Function.cs
   :language: csharp

.. _dotnet-login-facebook:

Facebook User
~~~~~~~~~~~~~

The :ref:`Facebook <facebook-authentication>` authentication provider allows
you to authenticate users through a Facebook app using their existing Facebook
account.

.. include:: /includes/note-enable-facebook-auth.rst

.. include:: /includes/note-facebook-profile-picture-url.rst

.. literalinclude:: /examples/generated/dotnet/AuthenticationExamples.snippet.logon_fb.cs
   :language: csharp

.. _dotnet-login-google:

Google User
~~~~~~~~~~~

If you have enabled :ref:`Google authentication <google-authentication>`,
you can log in using the following code:

.. literalinclude:: /examples/generated/dotnet/AuthenticationExamples.snippet.logon_google.cs
   :language: csharp

.. _dotnet-login-apple:

Apple User
~~~~~~~~~~

If you have enabled :ref:`Sign-in with Apple authentication <apple-id-authentication>`,
you can log in using the following code:

.. literalinclude:: /examples/generated/dotnet/AuthenticationExamples.snippet.logon_apple.cs
   :language: csharp

.. include:: /includes/authorization-appleidcredential-string.rst


Offline Login
-------------

.. include:: /includes/offline-login.rst

The following example checks if there is a cached User object. If not, it logs 
the user in. Otherwise, it uses the cached credentials:

.. literalinclude:: /examples/generated/dotnet/OpenARealmExamples.snippet.check-if-offline.cs
   :language: csharp

.. _dotnet-logout:

Log a User Out
--------------

Once logged in, you can log out by calling the ``LogOutAsync()`` method:

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.logout.cs
   :language: csharp

.. include:: /includes/log-out-queries-in-progress.rst

.. _dotnet-retrieve-current-user:

Retrieve the Current User
-------------------------

Once you have an authenticated user, you can retrieve the User object with the 
:dotnet-sdk:`App.CurrentUser <reference/Realms.Sync.App.html#Realms_Sync_App_CurrentUser>` 
property. The ``CurrentUser`` object is persisted in local storage, so even if 
the app shuts down after the initial authentication, you do not need to call 
``LoginAsync`` again (unless the user logged out). Instead, use 
:dotnet-sdk:`Realm.GetInstance(config) <reference/Realms.Realm.html#Realms_Realm_GetInstance_Realms_RealmConfigurationBase_>`, 
where ``config`` is a :dotnet-sdk:`PartitionSyncConfiguration <reference/Realms.Sync.PartitionSyncConfiguration.html>` 
object. This approach results in a faster start-up and also enables the user to 
work offline.

Get a User Access Token
~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/user-access-token.rst

.. literalinclude:: /examples/generated/dotnet/AuthenticationExamples.snippet.get_user_token.cs
   :language: csharp

Refresh Token Expiration
------------------------

.. include:: /includes/refresh-token-expiry.rst
   

Observe Authentication Changes
------------------------------

.. versionadded:: v11.6.0

You can observe a flow of authentication change events by calling
:dotnet-sdk:`User.Changed() <reference/Realms.Sync.User.html#Realms_Sync_User_Changed>`
on a valid user object.

Currently, ``User.Changed()`` triggers on all user events and you should add a
handler to ensure your responses to events are idempotent.

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.observe-auth-change.cs
   :language: csharp
