===============================
Collection Statistics Reference
===============================

.. default-domain:: mongodb
.. highlight:: javascript

Synopsis
--------

To fetch collection statistics, call the :func:`db.collection.stats()` method on
a collection object in the :program:`mongo` shell:

.. code-block:: javascript

   db.collection.stats()

You may also use the literal command format:

.. code-block:: javascript

   db.runCommand( { collStats: "collection" } )

Replace ``collection`` in both examples with the name of the
collection you want statistics for. By default, the return values will
appear in terms of bytes. You can, however, enter a ``scale``
argument. For example, you can convert the return values to kilobytes
like so:

.. code-block:: javascript

   db.collection.stats(1024)

Or:

.. code-block:: javascript

   db.runCommand( { collStats: "collection", scale: 1024 } )

.. note::

   The ``scale`` argument rounds values to whole numbers. This can
   produce unpredictable and unexpected results in some situations.

.. seealso:: The documentation of the ":dbcommand:`collStats`" command
   and the ":func:`db.collection.stats()`," method in the :program:`mongo` shell.

Fields
------

.. stats:: ns

   The namepsace of the current collection, which follows the format
   ``[database].[collection]``.

.. stats:: count

   The number of objects or documents in this collection.

.. stats:: size

   The size of the collection. The ``scale`` argument affects this
   value.

.. stats:: avgObjSize

   The average size of an object in the collection. The ``scale``
   argument affects this value.

.. stats:: storageSize

   The total amount of storage allocated to this collection for
   :term:`document` storage.  The ``scale`` argument affects this
   value. The :stats:`storageSize` does not decrease as you remove or
   shrink documents.

   .. sum of all extents (no indexes or the $freelist)
   .. include links to eventual documentation of storage management

.. stats:: numExtents

   The total number of contiguously allocated data file regions.

.. stats:: nindexes

   The number of indexes on the collection. On standard, non-capped
   collections, there is always at least one index on the primary key
   (i.e. :term:`_id`).

.. stats:: lastExtentSize

   The size of the last extent allocated. The ``scale`` argument
   affects this value.

.. stats:: paddingFactor

   The amount of space added to the end of each document at insert
   time. The document padding provides a small amount of extra space
   on disk to allow a document to grow slightly without needing to
   move the document. :program:`mongod` automatically calculates this
   padding factor

.. stats:: flags

   .. versionchanged:: 2.2
      Removed in version 2.2 and replaced with the :stats:`userFlags`
      and :stats:`systemFlags` fields.

   Indicates the number of flags on the current collection. In version
   2.0, the only flag notes the existence of an :term:`index` on the
   :term:`_id` field.

.. stats:: systemFlags

   .. versionadded:: 2.2

   Reports the number of flags on this collection that reflect
   internal server activity. Typically this value is ``1`` and
   reflects the existence of an :term:`index` on the ``_id`` field.

.. stats:: userFlags

   .. versionadded:: 2.2

   Reports the total number of flags on this collection that reflect
   user actions. In version 2.2 the only user collection flag is
   ``usePowerOf2Sizes``. See :dbcommand:`collMod`` for more
   information on setting user flags and :ref:`usePowerOf2Sizes
   <usePowerOf2Sizes>`.

.. stats:: totalIndexSize

   The total size of all indexes. The ``scale`` argument affects this
   value.

.. stats:: indexSizes

   This field specifies the key and size of every existing index on
   the collection. The ``scale`` argument affects this value.
