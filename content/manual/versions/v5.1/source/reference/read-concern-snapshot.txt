.. default-domain:: mongodb

.. class:: hidden

   .. readconcern:: "snapshot"

===========================
Read Concern ``"snapshot"``
===========================

.. meta::
   :description: read concern, snapshot read concern, read isolation, transactions, multi-document transactions
   :keywords: read concern, snapshot read concern, read isolation, transactions, multi-document transactions

.. versionadded:: 4.0
.. versionchanged:: 5.0

Read concern ``"snapshot"`` is available for :doc:`multi-document
transactions </core/transactions>`, and starting in MongoDB 5.0, certain
read operations outside of multi-document transactions.

- If the transaction is not part of a :ref:`causally consistent session
  <sessions>`, upon transaction commit with write concern
  :writeconcern:`"majority"`, the transaction operations are guaranteed
  to have read from a snapshot of majority-committed data.

- If the transaction is part of a :ref:`causally consistent session
  <sessions>`, upon transaction commit with write concern
  :writeconcern:`"majority"`, the transaction operations are guaranteed
  to have read from a snapshot of majority-committed data that provides
  causal consistency with the operation immediately preceding the
  transaction start.

Outside of multi-document transactions, read concern
:readconcern:`"snapshot"` is available on primaries and secondaries for
the following read operations :

- :dbcommand:`find`
- :dbcommand:`aggregate`
- :dbcommand:`distinct` (on unsharded collections)

All other read commands prohibit :readconcern:`"snapshot"`.

Operations
----------

For a list of all operations that accept read concerns, see
:ref:`read-concern-operations`.

Read Concern and Transactions
-----------------------------

Multi-document transactions support read concern
:readconcern:`"snapshot"` as well as :readconcern:`"local"`, and
:readconcern:`"majority"`.

.. note::

   You set the read concern at the transaction level, not at the
   individual operation level. To set the read concern for
   transactions, see :ref:`transactions-read-concern`.

.. _atClusterTime:

Read Concern and ``atClusterTime``
----------------------------------

.. versionadded:: 5.0

Outside of multi-document transaction, reads with read concern
:readconcern:`"snapshot"` support the optional parameter
``atClusterTime``. The parameter ``atClusterTime`` allows you to specify
the timestamp for the read. To satisfy a read request with a specified
``atClusterTime`` of T, the :binary:`~bin.mongod` performs the request
based on the data available at time T.

You can obtain the ``operationTime`` or ``clusterTime`` of an operation
from the response of :doc:`db.runCommand()
</reference/method/db.runCommand/>` or from the :method:`Session`
object.

The following command performs a find operation with read concern
:readconcern:`"snapshot"` and specifies that the operation should read
data from the snapshot at cluster time ``Timestamp(1613577600, 1)``.

.. code-block:: javascript

   db.runCommand( {
       find: "restaurants",
       filter: { _id: 5 },
       readConcern: {
           level: "snapshot",
           atClusterTime: Timestamp(1613577600, 1)
       },
   } )

If the parameter ``atClusterTime`` is not supplied, the
:binary:`~bin.mongos`, or in single member replica sets the
:binary:`~bin.mongod`, selects the timestamp of the latest
majority-committed snapshot as the ``atClusterTime`` and returns it to
the client.

Outside of transactions, :readconcern:`"snapshot"` reads are
guaranteed to read from majority-committed data.

.. note:

   - If you perform a read operation with :readconcern:`"snapshot"`
     against a delayed replica set member, the returned majority-committed
     data could be stale.

   - It is not possible to specify ``atClusterTime`` for
     :readconcern:`"snapshot"` inside of :ref:`causally consistent
     sessions <sessions>`.

Read Concern on Capped Collections
----------------------------------

Starting in version 5.0, you cannot use read concern
:readconcern:`"snapshot"` when reading from a
:doc:`capped </core/capped-collections>` collection.
