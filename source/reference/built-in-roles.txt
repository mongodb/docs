.. _built-in-roles:

==============
Built-In Roles
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB grants access to data and commands through :ref:`role-based
authorization <roles>` and provides built-in roles that provide the different
levels of access commonly needed in a database system. You can additionally
create :ref:`user-defined roles <user-defined-roles>`.

A role grants privileges to perform sets of :ref:`actions
<security-user-actions>` on defined :ref:`resources <resource-document>`. A
given role applies to the database on which it is defined and can grant access
down to a collection level of granularity.

Each of MongoDB's built-in roles defines access at the database level for all
*non*-system collections in the role's database and at the collection level
for all :doc:`system collections </reference/system-collections>`.

MongoDB provides the built-in :ref:`database user <database-user-roles>` and
:ref:`database administration <database-administration-roles>` roles on
*every* database. MongoDB provides all other built-in roles only on the
``admin`` database.

This section describes the privileges for each built-in role. You can also
view the privileges for a built-in role at any time by issuing the
:dbcommand:`rolesInfo` command with the ``showPrivileges`` and
``showBuiltinRoles`` fields both set to ``true``.

.. _database-user-roles:

Database User Roles
-------------------

Every database includes the following client roles:

.. authrole:: read

   .. include:: /includes/extracts/built-in-roles-read.rst

   The role provides read access by granting the following :ref:`actions
   <security-user-actions>`:

   - :authaction:`changeStream`
   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`
   - :authaction:`listIndexes`
   - :authaction:`listCollections`


   .. include:: /includes/extracts/listDatabases-auth-4.0.6.rst

   .. include:: /includes/extracts/listDatabases-auth-4.0.5.rst

   .. include:: /includes/extracts/listDatabases-auth-4.0.0-4.0.4.rst

.. authrole:: readWrite

   .. include:: /includes/extracts/built-in-roles-read-write.rst

   The role provides the following actions on those collections:

   - :authaction:`collStats`
   - :authaction:`convertToCapped`
   - :authaction:`createCollection`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`dropCollection`
   - :authaction:`createIndex`
   - :authaction:`dropIndex`
   - :authaction:`find`
   - :authaction:`insert`
   - :authaction:`killCursors`
   - :authaction:`listIndexes`
   - :authaction:`listCollections`
   - :authaction:`remove`
   - :authaction:`renameCollectionSameDB`
   - :authaction:`update`

.. _database-administration-roles:

Database Administration Roles
-----------------------------

Every database includes the following database administration roles:

.. authrole:: dbAdmin

   .. include:: /includes/extracts/built-in-roles-dbAdmin.rst
   
   Specifically, the role provides the following privileges:

   .. list-table::
      :header-rows: 1
      :widths: 35 65
      
      * - Resource

        - Permitted Actions
      
      * - :data:`system.profile <<database>.system.profile>`
        - .. hlist::
             :columns: 2
             
             - :authaction:`changeStream`
             - :authaction:`collStats`
             - :authaction:`convertToCapped`
             - :authaction:`createCollection`
             - :authaction:`dbHash`
             - :authaction:`dbStats`
             - :authaction:`dropCollection`
             - :authaction:`find`
             - :authaction:`killCursors`
             - :authaction:`listCollections`
             - :authaction:`listIndexes`
             - :authaction:`planCacheRead`

          .. note:: Aside
          
             Starting in version 4.2, MongoDB removes the
             :data:`system.indexes <<database>.system.indexes>` and
             :data:`system.namespaces <<database>.system.namespaces>`
             collections. As such, the :authrole:`dbAdmin` role no
             longer provides privileges to access these collections.
             Direct access to these collections has been deprecated
             since MongoDB 3.0.
         
             In earlier versions, the :authrole:`dbAdmin` role provides
             the aforementioned privilege actions (except
             :authaction:`dropCollection` and
             :authaction:`createCollection`) on :data:`system.indexes
             <<database>.system.indexes>` and :data:`system.namespaces
             <<database>.system.namespaces>` collections, thereby
             allowing direct access to the :data:`system.indexes
             <<database>.system.indexes>` and :data:`system.namespaces
             <<database>.system.namespaces>` collections.

      * - All *non*-system collections (i.e. :ref:`database resource <resource-specific-db>`)

        - .. hlist::
             :columns: 2

             - :authaction:`bypassDocumentValidation`
             - :authaction:`collMod`
             - :authaction:`collStats`
             - :authaction:`compact`
             - :authaction:`convertToCapped`
             - :authaction:`createCollection`
             - :authaction:`createIndex`
             - :authaction:`dbStats`
             - :authaction:`dropCollection`
             - :authaction:`dropDatabase`
             - :authaction:`dropIndex`
             - :authaction:`enableProfiler`
             - :authaction:`listCollections`
             - :authaction:`listIndexes`
             - :authaction:`planCacheIndexFilter`
             - :authaction:`planCacheRead`
             - :authaction:`planCacheWrite`
             - :authaction:`reIndex`
             - :authaction:`renameCollectionSameDB`
             - :authaction:`storageDetails`
             - :authaction:`validate`

          For these collections, :authrole:`dbAdmin` *does not* include
          full read access (i.e. :authaction:`find`).

.. authrole:: dbOwner

   .. include:: /includes/extracts/built-in-roles-dbOwner.rst

.. authrole:: userAdmin

   .. include:: /includes/extracts/built-in-roles-userAdmin.rst

   The :authrole:`userAdmin` role explicitly provides the following actions:

   - :authaction:`changeCustomData`
   - :authaction:`changePassword`
   - :authaction:`createRole`
   - :authaction:`createUser`
   - :authaction:`dropRole`
   - :authaction:`dropUser`
   - :authaction:`grantRole`
   - :authaction:`revokeRole`
   - :authaction:`setAuthenticationRestriction`
   - :authaction:`viewRole`
   - :authaction:`viewUser`

 Â  .. warning::

      It is important to understand the security implications of granting the
      :authrole:`userAdmin` role: a user with this role for a database can
      assign themselves any privilege on that database. Granting the
      :authrole:`userAdmin` role on the ``admin`` database has further
      security implications as this indirectly provides
      :ref:`superuser <superuser>` access to a cluster. With ``admin``
      scope a user with the :authrole:`userAdmin` role can grant cluster-wide
      roles or privileges including :authrole:`userAdminAnyDatabase`.

.. _cluster-admin-roles:
.. _admin-roles:

Cluster Administration Roles
----------------------------

.. include:: /includes/extracts/built-in-roles-cluster-admin-roles.rst

.. authrole:: clusterAdmin

   .. include:: /includes/extracts/built-in-roles-clusterAdmin.rst

.. authrole:: clusterManager

   .. versionchanged:: 3.4

   .. include:: /includes/extracts/built-in-roles-clusterManager.rst

   .. list-table::
      :header-rows: 1
      :widths: 30 70

      * - Resource
        - Actions
   
      * - :ref:`cluster <resource-cluster>`
  
        - .. hlist::
             :columns: 2
             
             - :authaction:`addShard`
             - :authaction:`appendOplogNote`
             - :authaction:`applicationMessage`
             - :authaction:`cleanupOrphaned`
             - :authaction:`flushRouterConfig`
             - :authaction:`getDefaultRWConcern` (New in version 4.4)
             
             - :authaction:`listSessions` (New in version 3.6)
             
             - :authaction:`listShards`
             - :authaction:`removeShard`
             - :authaction:`replSetConfigure`
             - :authaction:`replSetGetConfig`
             - :authaction:`replSetGetStatus`
             - :authaction:`replSetStateChange`
             - :authaction:`resync`
             
             - :authaction:`setDefaultRWConcern` (New in version 4.4)

             - :authaction:`setFeatureCompatibilityVersion`
             - :authaction:`setFreeMonitoring`
                  
      * - *All* :ref:`databases <resource-specific-db>`

        - .. hlist::
             :columns: 1
             
             - :authaction:`clearJumboFlag` (New in 4.2.3 and 4.0.15)
             - :authaction:`enableSharding`
             - :authaction:`refineCollectionShardKey` (New in 4.4)
             - :authaction:`moveChunk`
             - :authaction:`splitChunk`
             - :authaction:`splitVector`
             
          :authrole:`clusterManager` provides additional privileges for the
          ``config`` and ``local`` databases.

   On the ``config`` database, permits the following actions:

   .. list-table::
      :header-rows: 1
      :widths: 40 60

      * - Resource
        - Actions

      * - All non-system collections in the ``config`` database

        - .. hlist::
             :columns: 2
      
             - :authaction:`collStats`
             - :authaction:`dbHash`
             - :authaction:`dbStats`
             - :authaction:`enableSharding`
             - :authaction:`find`
             - :authaction:`insert`
             - :authaction:`killCursors`
             - :authaction:`listCollections`
             - :authaction:`listIndexes`
             - :authaction:`moveChunk`
             - :authaction:`planCacheRead`
             - :authaction:`remove`
             - :authaction:`splitChunk`
             - :authaction:`splitVector`
             - :authaction:`update`

      * - :data:`system.js <<database>.system.js>`

        - .. hlist::
             :columns: 2

             - :authaction:`collStats`
             - :authaction:`dbHash`
             - :authaction:`dbStats`
             - :authaction:`find`
             - :authaction:`killCursors`
             - :authaction:`listCollections`
             - :authaction:`listIndexes`
             - :authaction:`planCacheRead`

          .. note:: Aside
          
             Starting in version 4.2, MongoDB removes the
             :data:`system.indexes <<database>.system.indexes>` and
             :data:`system.namespaces <<database>.system.namespaces>`
             collections. As such, the :authrole:`clusterManager` role no
             longer provides privileges to access these collections.
             Direct access to these collections has been deprecated
             since MongoDB 3.0.

             In earlier versions, the :authrole:`clusterManager` role
             provides the aforementioned privilege actions on the
             :data:`system.indexes <<database>.system.indexes>` and
             :data:`system.namespaces <<database>.system.namespaces>`
             collections, thereby allowing direct access to the
             :data:`system.indexes <<database>.system.indexes>` and
             :data:`system.namespaces <<database>.system.namespaces>`
             collections.
          

   On the ``local`` database, permits the following actions:

   .. list-table::
      :header-rows: 1
      :widths: 40 60

      * - Resource
        - Actions

      * - All non-system collections in the ``local`` database

        - .. hlist::
             :columns: 2
          
             - :authaction:`enableSharding`
             - :authaction:`insert`
             - :authaction:`moveChunk`
             - :authaction:`remove`
             - :authaction:`splitChunk`
             - :authaction:`splitVector`
             - :authaction:`update`

      * - :data:`system.replset <local.system.replset>` collection
        - .. hlist::
             :columns: 2
   
             - :authaction:`collStats`
             - :authaction:`dbHash`
             - :authaction:`dbStats`
             - :authaction:`find`
             - :authaction:`killCursors`
             - :authaction:`listCollections`
             - :authaction:`listIndexes`
             - :authaction:`planCacheRead`
   

.. authrole:: clusterMonitor

   .. versionchanged:: 3.4

   .. include:: /includes/extracts/built-in-roles-clusterMonitor.rst

   Permits the following actions on the cluster as a whole:

   .. hlist::
      :columns: 2

      - :authaction:`checkFreeMonitoringStatus` (New in version 4.0)
      - :authaction:`connPoolStats`
      - :authaction:`getCmdLineOpts`
      - :authaction:`getDefaultRWConcern` (New in version 4.4)
      - :authaction:`getLog`
      - :authaction:`getParameter`
      - :authaction:`getShardMap`
      - :authaction:`hostInfo`
      - :authaction:`inprog`
      - :authaction:`listDatabases`

      - :authaction:`listSessions` (New in version 3.6)

      - :authaction:`listShards`
      - :authaction:`netstat`
      - :authaction:`replSetGetConfig`
      - :authaction:`replSetGetStatus`
      - :authaction:`serverStatus`
      - :authaction:`setFreeMonitoring` (New in version 4.0)

      - :authaction:`shardingState`
      - :authaction:`top`

   Permits the following actions on *all* databases in the cluster:

   - :authaction:`collStats`
   - :authaction:`dbStats`
   - :authaction:`getShardVersion`
   - :authaction:`indexStats`
   - :authaction:`useUUID` (New in version 3.6)

   Permits the :authaction:`find` action on all :data:`system.profile
   <<database>.system.profile>` collections in the cluster.

   On the ``config`` database, permits the following actions:

   .. list-table::
      :header-rows: 1
      :widths: 40 60

      * - Resource
        - Actions

      * - All non-system collections in the ``config`` database
        - | :authaction:`collStats`
          | :authaction:`dbHash`
          | :authaction:`dbStats`
          | :authaction:`find`
          | :authaction:`getShardVersion`
          | :authaction:`indexStats`
          | :authaction:`killCursors`
          | :authaction:`listCollections`
          | :authaction:`listIndexes`
          | :authaction:`planCacheRead`

      * - :data:`system.js <<database>.system.js>` collection
          

        - | :authaction:`collStats`
          | :authaction:`dbHash`
          | :authaction:`dbStats`
          | :authaction:`find`
          | :authaction:`killCursors`
          | :authaction:`listCollections`
          | :authaction:`listIndexes`
          | :authaction:`planCacheRead`
          
          
          .. note::  Aside

             Starting in version 4.2, MongoDB removes the
             :data:`system.indexes <<database>.system.indexes>` and
             :data:`system.namespaces <<database>.system.namespaces>`
             collections. As such, the :authrole:`clusterMonitor` role no
             longer provides privileges to access these collections.
             Direct access to these collections has been deprecated
             since MongoDB 3.0.
      
             In earlier versions, the role provides the aforementioned
             privilege actions on the :data:`system.indexes
             <<database>.system.indexes>` and :data:`system.namespaces
             <<database>.system.namespaces>` collections, thereby allowing
             direct access to the :data:`system.indexes
             <<database>.system.indexes>` and :data:`system.namespaces
             <<database>.system.namespaces>` collections.


   On the ``local`` database, permits the following actions:

   .. list-table::
      :header-rows: 1

      * - Resource
        - Actions

      * - All collections in the ``local`` database
        - | :authaction:`collStats`
          | :authaction:`dbHash`
          | :authaction:`dbStats`
          | :authaction:`find`
          | :authaction:`getShardVersion`
          | :authaction:`indexStats`
          | :authaction:`killCursors`
          | :authaction:`listCollections`
          | :authaction:`listIndexes`
          | :authaction:`planCacheRead`

      * - | :data:`system.js <<database>.system.js>` collection

        - | :authaction:`collStats`
          | :authaction:`dbHash`
          | :authaction:`dbStats`
          | :authaction:`find`
          | :authaction:`killCursors`
          | :authaction:`listCollections`
          | :authaction:`listIndexes`
          | :authaction:`planCacheRead`


          Starting in version 4.2, MongoDB removes the
          :data:`system.indexes <<database>.system.indexes>` and
          :data:`system.namespaces <<database>.system.namespaces>`
          collections. As such, the :authrole:`clusterMonitor` role no
          longer provides privileges to access these collections.
          Direct access to these collections has been deprecated
          since MongoDB 3.0.
      
          In earlier versions, the role provides the aforementioned
          privilege actions on the :data:`system.indexes
          <<database>.system.indexes>` and :data:`system.namespaces
          <<database>.system.namespaces>` collections, thereby allowing
          direct access to the :data:`system.indexes
          <<database>.system.indexes>` and :data:`system.namespaces
          <<database>.system.namespaces>` collections.
              

      * - | :data:`system.replset <<database>.system.replset>`,
          | :data:`system.profile <<database>.system.profile>`,

        - :authaction:`find`
   

.. authrole:: hostManager

   .. include:: /includes/extracts/built-in-roles-hostMonitor.rst

   On the cluster as a whole, provides the following actions:

   .. hlist::
      :columns: 3

      - :authaction:`applicationMessage`
      - :authaction:`closeAllDatabases`
      - :authaction:`connPoolSync`
      - :authaction:`flushRouterConfig`
      - :authaction:`fsync`
      - :authaction:`invalidateUserCache`
      - :authaction:`killAnyCursor` (New in version 4.0)
      - :authaction:`killAnySession` (New in version 3.6)
      - :authaction:`killop`
      - :authaction:`logRotate`
      - :authaction:`resync`
      - :authaction:`setParameter`
      - :authaction:`shutdown`
      - :authaction:`touch`
      - :authaction:`unlock`
      
   .. versionchanged::
   
      Starting in version 4.4, :authrole:`hostManager` no longer
      provides the :authrole:`cpuProfiler` privilege action on the
      cluster.

   On *all* databases in the cluster, provides the following actions:

   - :authaction:`killCursors`

.. _backup-and-restore-roles:

Backup and Restoration Roles
----------------------------

.. include:: /includes/extracts/built-in-roles-backup-roles.rst

.. authrole:: backup

   .. include:: /includes/extracts/built-in-roles-backup.rst

   .. todo: should we document the mms.backup collection in the
            system-collections document?

   Provides the :authaction:`insert` and :authaction:`update` actions
   on the
   ``mms.backup`` collection in the ``admin`` database and on the
   :data:`settings <config.settings>` collection in the ``config`` database.

   On :ref:`anyResource`, provides the

   - :authaction:`listDatabases` action
   - :authaction:`listCollections` action
   - :authaction:`listIndexes` action

   On the :ref:`cluster <resource-cluster>` as a whole, provides the

   - :authaction:`appendOplogNote`
   - :authaction:`getParameter`
   - :authaction:`listDatabases`
   - :authaction:`serverStatus` (Starting in MongoDB 4.2)

   Provides the :authaction:`find` action on the following:

   - all *non*-system collections in the cluster, including those in
     the ``config`` and ``local`` databases

   - The following system collections in the cluster:

     :data:`system.js <<database>.system.js>`, and
     :data:`system.profile <<database>.system.profile>`

   - the :data:`admin.system.users` and :data:`admin.system.roles` collections

   - the :data:`config.settings` collection

   - legacy ``system.users`` collections from versions of MongoDB prior to 2.6

   .. todo: Also provides the :authaction:`find` action on:
             - system.new_users
             - system.backup_users
             - system.version
            Do we want to document these?

   Provides the :authaction:`insert` and :authaction:`update` actions
   on the :data:`config.settings` collection.

   .. include:: /includes/fact-required-access-for-backup-profiling.rst

.. authrole:: restore

   .. include:: /includes/extracts/built-in-roles-restore.rst

   .. include:: /includes/access-mongorestore-collections.rst

   Provides the following action on the cluster as a whole:

   - :authaction:`getParameter`

   Provides the following actions on all *non*-system collections:

   - :authaction:`bypassDocumentValidation`
   - :authaction:`changeCustomData`
   - :authaction:`changePassword`
   - :authaction:`collMod`
   - :authaction:`convertToCapped`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`createRole`
   - :authaction:`createUser`
   - :authaction:`dropCollection`
   - :authaction:`dropRole`
   - :authaction:`dropUser`
   - :authaction:`grantRole`
   - :authaction:`insert`
   - :authaction:`revokeRole`
   - :authaction:`viewRole`
   - :authaction:`viewUser`

   Provides the following actions on :data:`system.js <<database>.system.js>` collection:

   - :authaction:`bypassDocumentValidation`
   - :authaction:`collMod`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dropCollection`
   - :authaction:`insert`

   Provides the following action on :ref:`anyResource`:

   - :authaction:`listCollections`


   Provides the following actions on all non-system collections on the
   ``config`` and the ``local`` databases:

   - :authaction:`bypassDocumentValidation`
   - :authaction:`collMod`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dropCollection`
   - :authaction:`insert`

   Provides the following actions on :data:`admin.system.version`

   - :authaction:`bypassDocumentValidation`
   - :authaction:`collMod`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dropCollection`
   - :authaction:`find`
   - :authaction:`insert`

   Provides the following action on :data:`admin.system.roles`

   - :authaction:`createIndex`

   Provides the following actions on :data:`admin.system.users`
   and legacy ``system.users`` collections:

   - :authaction:`bypassDocumentValidation`
   - :authaction:`collMod`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dropCollection`
   - :authaction:`find`
   - :authaction:`insert`
   - :authaction:`remove`
   - :authaction:`update`

   Although, :authrole:`restore` includes the ability to modify the
   documents in the :data:`admin.system.users` collection using normal
   modification operations, *only* modify these data using the
   :ref:`user management methods <user-management-methods>`.

   .. note:: Aside

      Starting in version 4.2, MongoDB removes the
      :data:`system.namespaces <<database>.system.namespaces>`
      collection. As such, the :authrole:`restore` role no longer
      provides privileges to access these collections. Direct access to
      these collections has been deprecated since MongoDB 3.0.

      In earlier versions, the :authrole:`restore` role provides the
      aforementioned privilege actions on the :data:`system.namespaces
      <<database>.system.namespaces>` collection, thereby allowing
      direct access to the collection.

.. include:: /includes/replacement-mms.rst

.. _auth-any-database-roles:

All-Database Roles
------------------

.. include:: /includes/extracts/built-in-roles-all-database-roles.rst

.. authrole:: readAnyDatabase

   .. include:: /includes/extracts/built-in-roles-readAnyDatabase.rst

   .. versionchanged:: 3.4

      .. include:: /includes/extracts/built-in-roles-readAnyDatabase-prior.rst

      .. include:: /includes/seealso-cluster-manager.rst

.. authrole:: readWriteAnyDatabase

   .. include:: /includes/extracts/built-in-roles-readWriteAnyDatabase.rst

   .. versionchanged:: 3.4

      .. include:: /includes/extracts/built-in-roles-readWriteAnyDatabase-prior.rst

      .. include:: /includes/seealso-cluster-manager.rst

.. authrole:: userAdminAnyDatabase

   .. include:: /includes/extracts/built-in-roles-userAdminAnyDatabase.rst

   :authrole:`userAdminAnyDatabase` also provides the
   following privilege actions on the cluster:

   - :authaction:`authSchemaUpgrade`
   - :authaction:`invalidateUserCache`
   - :authaction:`listDatabases`

   The role also provides the following privilege actions on the
   :data:`system.users` and :data:`system.roles`
   collections on the ``admin`` database, and on legacy
   ``system.users`` collections from versions of MongoDB prior to 2.6:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`
   - :authaction:`planCacheRead`

   .. versionchanged:: 2.6.4
      :authrole:`userAdminAnyDatabase` added the following privilege
      actions on the :data:`admin.system.users` and
      :data:`admin.system.roles` collections:

      - :authaction:`createIndex`
      - :authaction:`dropIndex`

   The :authrole:`userAdminAnyDatabase` role does not restrict the privileges
   that a user can grant. As a result, :authrole:`userAdminAnyDatabase` users
   can grant themselves privileges in excess of their current
   privileges and even can grant themselves *all privileges*, even though the
   role does not explicitly authorize privileges beyond user administration.
   This role is effectively a MongoDB system :ref:`superuser <superuser>`.

   .. versionchanged:: 3.4

      :authrole:`userAdminAnyDatabase` no longer
      applies to the ``local`` and ``config`` databases.

      .. include:: /includes/seealso-cluster-manager.rst

.. authrole:: dbAdminAnyDatabase

   .. include:: /includes/extracts/built-in-roles-dbAdminAnyDatabase.rst

   .. versionchanged:: 3.4

      .. include:: /includes/extracts/built-in-roles-dbAdminAnyDatabase-prior.rst

      .. include:: /includes/seealso-cluster-manager.rst

.. _superuser:

Superuser Roles
---------------

Several roles provide either indirect or direct system-wide superuser access.

The following roles provide the ability to assign any user any privilege on
any database, which means that users with one of these roles can assign
*themselves* any privilege on any database:

- :authrole:`dbOwner` role, when scoped to the ``admin`` database

- :authrole:`userAdmin` role, when scoped to the ``admin`` database

- :authrole:`userAdminAnyDatabase` role

The following role provides full privileges on all resources:

.. authrole:: root

   .. include:: /includes/extracts/built-in-roles-root.rst

   .. versionchanged:: 3.4

      The :authrole:`root` role includes privileges from the
      :authrole:`backup` and :authrole:`restore` roles.

Internal Role
-------------

.. authrole:: __system

   MongoDB assigns this role to user objects that represent cluster members,
   such as replica set members and :binary:`~bin.mongos` instances. The role
   entitles its holder to take any action against any object in the database.

   **Do not** assign this role to user objects representing applications or
   human administrators, other than in exceptional circumstances.

   If you need access to all actions on all resources, for example to
   run :dbcommand:`applyOps` commands, do not assign this role.
   Instead, :ref:`create a user-defined role <create-user-defined-role>` that
   grants :authaction:`anyAction` on :ref:`resource-anyresource` and
   ensure that only the users who need access to these operations have
   this access.
