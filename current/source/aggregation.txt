.. _node-aggregation:
.. _nodejs-aggregation:

======================
Aggregation Operations
======================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: node.js, code example, runnable app

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:
   :maxdepth: 1

   Pipeline Stages </aggregation/pipeline-stages>
   
.. _nodejs-aggregation-overview:

Overview
--------

In this guide, you can learn how to use the {+driver-long+} to perform
**aggregation operations**.

Aggregation operations process data in your MongoDB collections and return
computed results. The MongoDB Aggregation framework is modeled on the concept of
data processing pipelines. Documents enter a pipeline comprised of one or more
stages, and this pipeline transforms the documents into an aggregated result.

To learn more about the aggregation stages supported by the {+driver-short+},
see :ref:`node-aggregation-pipeline-stages`.

.. _node-aggregation-tutorials:

.. sharedinclude:: dbx/agg-tutorials-manual-tip.rst

   .. replacement:: language

      :guilabel:`{+environment+}`

Analogy
~~~~~~~

The aggregation pipeline is similar to an automobile factory assembly line. An
assembly line has stations with specialized tools that are used to perform
specific tasks. For example, when building a car, the assembly line begins with
a frame. As the car frame moves though the assembly line, each station assembles
a separate part. The result is a transformed final product, the finished car.

The *aggregation pipeline* is the assembly line, the *aggregation stages* are
the assembly stations, the *expression operators* are the specialized tools, and
the *aggregated result* is the finished product.

Compare Aggregation and Find Operations
---------------------------------------

The following table lists the different tasks you can perform with find
operations compared to what you can achieve with aggregation operations. The
aggregation framework provides expanded functionality that allows you to
transform and manipulate your data.

.. list-table::
   :header-rows: 1
   :widths: 50 50

   * - Find Operations
     - Aggregation Operations

   * - | Select *certain* documents to return
       | Select *which* fields to return
       | Sort the results
       | Limit the results
       | Count the results
     - | Select *certain* documents to return
       | Select *which* fields to return
       | Sort the results
       | Limit the results
       | Count the results
       | Group the results
       | Rename fields
       | Compute new fields
       | Summarize data
       | Connect and merge data sets

Server Limitations
------------------

Consider the following :manual:`limitations
</core/aggregation-pipeline-limits/>` when performing aggregation operations:

- Returned documents must not violate the :manual:`BSON document size limit
  </reference/limits/#mongodb-limit-BSON-Document-Size>` of 16 megabytes.
- Pipeline stages have a memory limit of 100 megabytes by default. If required,
  you can exceed this limit by enabling the `AllowDiskUse
  <https://mongodb.github.io/node-mongodb-native/6.17/interfaces/AggregateOptions.html#allowDiskUse>`__
  property of the ``AggregateOptions`` object that you pass to the
  ``aggregate()`` method. 

Additional information
----------------------

To view a full list of expression operators, see :manual:`Aggregation Operators
</reference/operator/aggregation/>` in the {+mdb-server+} manual.

To learn about explaining MongoDB aggregation operations, see :manual:`Explain
Results </reference/explain-results/>` and :manual:`Query Plans
</core/query-plans/>` in the {+mdb-server+} manual.
