.. _search-agg-pipeline:

===========
``$search``
===========

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: atlas search, full-text search, $search pipeline stage
   :description: Learn about the Atlas Search $search stage syntax and options.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. pipeline:: $search

   The :pipeline:`$search` stage performs a full-text search on the 
   specified field or fields. The field or fields must be covered by an
   |fts| :ref:`index <ref-index-definitions>`. 

Syntax 
------

A ``$search`` pipeline stage has the following prototype form:

.. code-block:: json

   {
     $search: {
       "index": "<index-name>",
       "<operator-name>"|"<collector-name>": {
         <operator-specification>|<collector-specification>
       },
       "highlight": {
         <highlight-options>
       },
       "concurrent": true | false,
       "count": {
         <count-options>
       },
       "searchAfter"|"searchBefore": "<encoded-token>",
       "scoreDetails": true| false,
       "sort": {
         <fields-to-sort>: 1 | -1
       },
       "returnStoredSource": true | false,
       "tracking": {
         <tracking-option>
       } 
      }
   }

Fields
------

The ``$search`` stage takes a document with the following fields: 

.. list-table:: 
   :header-rows: 1
   :widths: 10 15 15 70

   * - Field 
     - Type 
     - Necessity 
     - Description

   * - ``<collector-name>``
     - object 
     - Conditional
     - Name of the :ref:`collector <collectors-ref>` to use with the 
       query. You can provide a document that contains the 
       collector-specific options as the value for this field. Either 
       this or ``<operator-name>`` is required. 

   * - ``concurrent``
     - boolean 
     - Optional
     - Parallelize search across segments on :ref:`dedicated search
       nodes <what-is-search-node>`. If you don't have separate search
       nodes on your {+cluster+}, |fts| ignores this flag. If omitted,
       defaults to ``false``. To learn more, see :ref:`concurrent-ref`. 

   * - ``count``
     - object 
     - Optional
     - Document that specifies the :ref:`count <count-ref>` options for 
       retrieving a count of the results. To learn more, see 
       :ref:`count-ref`.

   * - ``highlight`` 
     - object 
     - Optional 
     - Document that specifies the :ref:`highlighting <highlight-ref>`
       options for displaying search terms in their original context.

   * - ``index`` 
     - string 
     - Optional 
     - Name of the |fts| index to use. If omitted, defaults to 
       ``default``.

       .. include:: /includes/fts/default-fts-index-name.rst

       |fts| doesn't return results if you misspell the index name or 
       if the specified index doesn't already exist on the cluster.

   * - ``<operator-name>``
     - object 
     - Conditional
     - Name of the :ref:`operator <operators-ref>` to search with. You 
       can provide a document that contains the operator-specific 
       options as the value for this field. Either this or 
       ``<collector-name>`` is required. Use the :ref:`compound-ref`
       operator to run a compound query with multiple operators. 

   * - ``returnStoredSource``
     - boolean 
     - Optional
     - Flag that specifies whether to perform a full document lookup
       on the backend database or return only stored source fields  
       directly from |fts|. If omitted, defaults to ``false``. To learn 
       more, see :ref:`fts-return-stored-source-option`. 

   * - ``searchAfter``
     - string 
     - Optional 
     - Reference point for retrieving results. ``searchAfter`` returns
       documents starting immediately following the specified reference
       point. The reference point must be a Base64-encoded token
       generated by the :expression:`$meta` keyword
       ``searchSequenceToken``. To learn more, see
       :ref:`fts-paginate-results`. This field is mutually exclusive
       with the ``searchBefore`` field. 

   * - ``searchBefore``
     - string 
     - Optional 
     - Reference point for retrieving results. ``searchBefore`` returns
       documents starting immediately before the specified reference
       point. The reference point must be a Base64-encoded token
       generated by the :expression:`$meta` keyword
       ``searchSequenceToken``. To learn more, see
       :ref:`fts-paginate-results`. This field is mutually exclusive
       with the ``searchAfter`` field. 

   * - ``scoreDetails``
     - boolean 
     - Optional
     - Flag that specifies whether to retrieve a detailed breakdown of
       the score for the documents in the results. If omitted, defaults
       to ``false``. To view the details, you must use the :manual:`$meta 
       </reference/operator/aggregation/meta/>` expression in the
       :pipeline:`$project` stage. To learn more, see
       :ref:`fts-score-details`. 

   * - ``sort``
     - object 
     - Optional
     - Document that specifies the fields to sort the |fts| results by
       in ascending or descending order. You can sort by date, number
       (integer, float, and double values), and string values. To learn
       more, see :ref:`sort-ref`.

   * - ``tracking``
     - object 
     - Optional 
     - Document that specifies the :ref:`tracking <fts-tracking-ref>`
       option to retrieve analytics information on the search terms.

Behavior
--------

:pipeline:`$search` must be the first stage of any pipeline it appears 
in. :pipeline:`$search` cannot be used in:

- a :manual:`view definition</core/views>`
- a :pipeline:`$facet` pipeline stage

Aggregation Variable 
--------------------

:pipeline:`$search` returns only the results of your query. The 
metadata results of your :pipeline:`$search` query are saved in the 
``$$SEARCH_META`` aggregation variable. You can use the 
``$$SEARCH_META`` variable to view the metadata results for your 
:pipeline:`$search` query. 

The ``$$SEARCH_META`` aggregation variable 
can be used anywhere after a :pipeline:`$search` stage in any pipeline, 
but it can't be used after the :pipeline:`$lookup` or 
:pipeline:`$unionWith` stage in any pipeline. Starting in MongoDB 6.0, the ``$$SEARCH_META`` 
aggregation variable can't be used in any subsequent stage after a 
:pipeline:`$searchMeta` stage.

.. example::

   Suppose the following index on the ``sample_mflix.movies`` 
   collection.

   .. code-block:: json
     :copyable: true

     {
       "mappings": {
         "dynamic": false,
         "fields": {
           "released": {
             "type": "date"
           }
         }
       }
     }

   The following query searches for movies released near September 
   01, 2011 using the :pipeline:`$search` stage. The query includes 
   a:
    
   - :pipeline:`$project` stage to exclude all fields in the documents 
     except ``title`` and ``released``. 
   - :pipeline:`$facet` stage that outputs a: 
 
     - ``docs`` field with an array of the top ``5`` search results
     - ``meta`` field with the value of ``$$SEARCH_META`` variable

   .. io-code-block::
     :copyable: true

     .. input::
         :language: json

         db.movies.aggregate([
           {
             "$search": {
               "near": {
                 "path": "released",
                 "origin": ISODate("2011-09-01T00:00:00.000+00:00"),
                 "pivot": 7776000000
               }
             }
           },
           {
             $project: {
               "_id": 0,
               "title": 1,
               "released": 1
             }
           },
           { "$limit": 5 },
           { 
             "$facet": {
               "docs": [],
               "meta": [
                 {"$replaceWith": "$$SEARCH_META"}, 
                 {"$limit": 1}
               ] 
             }
           } 
         ])

     .. output::
         :language: json
         :visible: true

         { 
           "docs" : [ 
             { 
               "title" : "Submarino", 
               "released" : ISODate("2011-09-01T00:00:00Z") 
             }, 
             { 
               "title" : "Devil's Playground", 
               "released" : ISODate("2011-09-01T00:00:00Z") 
             }, 
             { 
               "title" : "Bag It", 
               "released" : ISODate("2011-09-01T00:00:00Z") 
             }, 
             { 
               "title" : "Dos", 
               "released" : ISODate("2011-09-01T00:00:00Z") 
             }, 
             { 
               "title" : "We Were Here", 
               "released" : ISODate("2011-09-01T00:00:00Z") 
             }
           ], 
           "meta" : [ 
             { "count" : { "lowerBound" : NumberLong(17373) } } 
           ] 
         }

   To learn more about the ``$$SEARCH_META`` variable and its usage, 
   see: 

   - :ref:`facet <fts-facet-aggregation-variable>`
   - :ref:`count <fts-count-aggregation-variable>`

Troubleshooting
---------------

.. include:: /includes/fts/facts/fact-fts-troubleshooting 
