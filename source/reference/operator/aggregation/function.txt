=======================
$function (aggregation)
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $function

   .. versionadded:: 4.4

   Defines a custom aggregation function or expression in JavaScript.

   You can use the :expression:`$function` operator to define custom
   functions to implement behavior not supported by the MongoDB Query
   Language. See also :group:`$accumulator`.

   .. important::

      Executing JavaScript inside an aggregation expression may
      decrease performance. Only use the :expression:`$function`
      operator if the provided :doc:`pipeline operators
      </reference/operator/aggregation>` cannot fulfill your
      application's needs.

Syntax
------

The :expression:`$function` operator has the following syntax:

.. code-block:: javascript

   { 
     $function: {
       body: <code>,
       args: <array expression>,
       lang: "js"
     }
   }

.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Field
     - Type
     - Description
     

   * - :ref:`body <function-body>`

     - String or Code

     - .. _function-body:

       The function definition. You can specify the function
       definition as either BSON type Code or String. See also
       :ref:`lang <function-lang>`.

       ``function(arg1, arg2, ...) { ... }``

       or

       ``"function(arg1, arg2, ...) { ... }"``


   * - :ref:`args <function-args>`

     - Array

     - .. _function-args:

       Arguments passed to the function :ref:`body <function-body>`.
       If the :ref:`body <function-body>` function does not take an
       argument, you can specify an empty array ``[ ]``.

       The array elements can be any BSON type, including Code. See
       :ref:`function-example-where-alternative`.

   * - :ref:`lang <function-lang>`

     - String

     - .. _function-lang:

       The language used in the :ref:`body <function-body>`. You
       must specify ``lang: "js"``.


Considerations
--------------

Schema Validation Restriction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You cannot use :expression:`$function` as part of schema validation
:ref:`query expression <schema-validation-query-expression>`.

Javascript Enablement
~~~~~~~~~~~~~~~~~~~~~

To use :expression:`$function`, you must have server-side scripting
enabled (default).

If you do not use :expression:`$function` (or :group:`$accumulator`,
:query:`$where`, or :dbcommand:`mapReduce`), disable server-side
scripting: 

- For a :binary:`~bin.mongod` instance, see
  :setting:`security.javascriptEnabled` configuration option or
  :option:`--noscripting <mongod --noscripting>` command-line option.

- For a :binary:`~bin.mongos` instance, see
  :setting:`security.javascriptEnabled` configuration option or the
  :option:`--noscripting <mongos --noscripting>` command-line option
  starting in MongoDB 4.4.
  
  | In earlier versions, MongoDB does not allow JavaScript execution on
    :binary:`~bin.mongos` instances.

See also :ref:`security-checklist-javascript`.

Alternative to ``$where``
~~~~~~~~~~~~~~~~~~~~~~~~~

The query operator :query:`$where` can also be used to specify
JavaScript expression. However:
   
- Starting in MongoDB 3.6, the :query:`$expr` operator allows the use
  of :ref:`aggregation expressions <aggregation-framework>` within the
  query language.
  
- Starting in MongoDB 4.4, the :expression:`$function` and
  :group:`$accumulator` allows users to define custom aggregation
  expressions in JavaScript if the provided :doc:`pipeline operators
  </reference/operator/aggregation>` cannot fulfill your application's
  needs.
   
Given the available aggregation operators:

- The use of :query:`$expr` with aggregation operators that do not use
  JavaScript (i.e. non-:expression:`$function` and
  non-:group:`$accumulator` operators) is faster than :query:`$where`
  because it does not execute JavaScript and should be preferred if
  possible.

- However, if you must create custom expressions,
  :expression:`$function` is preferred over :query:`$where`.


Examples
--------

Example 1: Usage Example
~~~~~~~~~~~~~~~~~~~~~~~~

Create a sample collection named ``players`` with the following
documents:

.. code-block:: javascript

   db.players.insertMany([
      { _id: 1, name: "Miss Cheevous",  scores: [ 10, 5, 10 ] },
      { _id: 2, name: "Miss Ann Thrope", scores: [ 10, 10, 10 ] },
      { _id: 3, name: "Mrs. Eppie Delta ", scores: [ 9, 8, 8 ] }
   ])

The following aggregation operation uses :pipeline:`$addFields` to
add new fields to each document:

- ``isFound`` whose value is determined by the custom
  :expression:`$function` expression that checks whether the MD5
  hash of the name is equal to a specified hash.

- ``message`` whose value is determined by the custom
  :expression:`$function` expression that format a string message
  using a template.

.. code-block:: javascript

   db.players.aggregate( [
      { $addFields:
         {
           isFound:
               { $function:
                  {
                     body: function(name) { 
                        return hex_md5(name) == "15b0a220baa16331e8d80e15367677ad"
                     },
                     args: [ "$name" ],
                     lang: "js"
                  }
               },
            message: 
               { $function:
                  {
                     body: function(name, scores) {
                        let total = Array.sum(scores);
                        return `Hello ${name}.  Your total score is ${total}.`
                     },
                     args: [ "$name", "$scores"],
                     lang: "js"
                  }
               }
          }
       }
   ] )

The operation returns the following documents:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "name" : "Miss Cheevous", "scores" : [ 10, 5, 10 ], "isFound" : false, "message" : "Hello Miss Cheevous.  Your total score is 25." }
   { "_id" : 2, "name" : "Miss Ann Thrope", "scores" : [ 10, 10, 10 ], "isFound" : true, "message" : "Hello Miss Ann Thrope.  Your total score is 30." }
   { "_id" : 3, "name" : "Mrs. Eppie Delta ", "scores" : [ 9, 8, 8 ], "isFound" : false, "message" : "Hello Mrs. Eppie Delta .  Your total score is 25." }

.. _function-example-where-alternative:

Example 2: Alternative to ``$where``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note:: Aggregation Alternatives Preferred over ``$where``


   Starting in MongoDB 3.6, the :query:`$expr` operator allows the use
   of :ref:`aggregation expressions <aggregation-framework>` within the
   query language. And, starting in MongoDB 4.4, the
   :expression:`$function` and :group:`$accumulator` allows users to
   define custom aggregation expressions in JavaScript if the provided
   :doc:`pipeline operators </reference/operator/aggregation>` cannot
   fulfill your application's needs.
   
   Given the available aggregation operators:

   - The use of :query:`$expr` with aggregation operators that do not
     use JavaScript (i.e. non-:expression:`$function` and
     non-:group:`$accumulator` operators) is faster than
     :query:`$where` because it does not execute JavaScript and should
     be preferred if possible.

   - However, if you must create custom expressions,
     :expression:`$function` is preferred over :query:`$where`.

As an alternative to a query that uses the :query:`$where` operator,
you can use :query:`$expr` and :expression:`$function`. For example,
consider the following :query:`$where` example.

.. code-block:: javascript

   db.players.find( { $where: function() { 
      return (hex_md5(this.name) == "15b0a220baa16331e8d80e15367677ad") 
   } } );

The :method:`db.collection.find()` operation returns the following document:

.. code-block:: javascript
   :copyable: false
   
   { "_id" : 2, "name" : "Miss Ann Thrope", "scores" : [ 10, 10, 10 ] }

The example can be expressed using :query:`$expr` and :expression:`$function`:

.. code-block:: javascript

   db.players.find( {$expr: { $function: {
         body: function(name) { return hex_md5(name) == "15b0a220baa16331e8d80e15367677ad"; },
         args: [ "$name" ],
         lang: "js"
   } } } )

