.. meta::
   :robots: noindex, nosnippet

.. _dotnet-sync:
.. _dotnet-realm-sync:

=====================================
Sync Data Between Devices - .NET SDK
=====================================

.. toctree::
   :titlesonly:

   Add Sync to an App </sdk/dotnet/sync/add-sync-to-app>
   Configure & Open a Synced Realm </sdk/dotnet/sync/configure-and-open-a-synced-realm>
   Write to a Synced Realm </sdk/dotnet/sync/write-to-synced-realm/>
   Manage Flexible Sync Subscriptions </sdk/dotnet/sync/flexible-sync>
   Handle Sync Errors and Timeouts </sdk/dotnet/sync/handle-sync-errors>
   Client Resets </sdk/dotnet/sync/client-reset>
   Suspend or Resume a Sync Session </sdk/dotnet/sync/sync-session>
   Check Upload & Download Progress </sdk/dotnet/sync/sync-progress>
   Stream Data to Atlas </sdk/dotnet/sync/asymmetric-sync>
   Partition-Based Sync </sdk/dotnet/sync/partition-based-sync>

Atlas Device Sync automatically synchronizes data between client applications and 
an :ref:`Atlas App Services backend <realm-cloud>`. When a client 
device is online, Sync asynchronously synchronizes data in a 
background thread between the device and your backend App. 

.. _dotnet-flexible-sync-fundamentals:

Flexible Sync
-------------

When you select :ref:`Flexible Sync <flexible-sync>` for your backend App 
configuration, your client implementation must include subscriptions to 
queries on :ref:`queryable fields <queryable-fields>`. Flexible Sync works 
by synchronizing data that matches query subscriptions you maintain in the 
client application. 

A subscription set contains a set of queries. Realm Flexible Sync returns 
documents matching those queries, where the user has the appropriate 
:ref:`permissions <flexible-sync-rules-and-permissions>` to read and/or 
read and write the documents. If documents match the query, but the client 
does not have the permission to read or write them, they do not sync to 
the client application.

You can form queries using :ref:`Realm Query Language <realm-query-language>` or LINQ.

.. include:: /includes/note-unsupported-flex-sync-rql-operators.rst

Subscription sets are based on a specific type of :ref:`Realm object <dotnet-objects>`. 
You can have multiple subscriptions if you have many types of Realm objects.

To use Flexible Sync in your client application, open a synced realm 
with a Flexible Sync configuration. Then, manage subscriptions
to determine which documents to sync.

.. tip::

   Device Sync supports two Sync Modes: Flexible Sync, and the older 
   Partition-Based Sync. If your App Services backend uses Partition-Based 
   Sync, refer to :ref:`dotnet-partition-based-sync`.

   We recommend using Flexible Sync.

Group Updates for Improved Performance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/sync-memory-performance.rst

Unidirectional Sync
-------------------
A special case of Flexible Sync is when you need your app to **send** data to Atlas, 
but not receive any updates.

In this scenario, you can maximize sync performance by using 
:ref:`Data Ingest <dotnet-data-ingest>` to stream 
data from the client application to a Flexible Sync-enabled Atlas App Services
App.


