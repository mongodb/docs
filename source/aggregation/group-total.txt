.. _pymongo-aggregation-group-total:

===============
Group and Total
===============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: code example, python, analyze, aggregation

Introduction
------------

In this tutorial, you can learn how to use {+driver-short+} to
construct an aggregation pipeline, perform the
aggregation on a collection, and print the results by completing and
running a sample app. This aggregation performs the following operations:

- Matches a subset of documents by a field value
- Groups documents by common field values
- Adds computed fields to each result document

Aggregation Task Summary
~~~~~~~~~~~~~~~~~~~~~~~~

This tutorial demonstrates how to group and analyze customer order data. The
results show the list of customers who purchased items in 2020 and
includes each customer's order history for 2020.

This example uses one collection, ``orders``, which contains documents
describing individual product orders. Since each order can correspond to
only one customer, the order documents are grouped by the
``customer_id`` field, which contains customer email addresses.

Before You Get Started
----------------------

.. include:: /includes/aggregation-tutorial-intro.rst

After you set up the app, access the ``orders`` collection by adding the
following code to the application:

.. literalinclude:: /includes/aggregation/group-total.py
   :language: python
   :copyable: true
   :start-after: start-coll
   :end-before: end-coll
   :dedent:

Delete any existing data and insert sample data into
the ``orders`` collection as shown in the following code:

.. literalinclude:: /includes/aggregation/group-total.py
   :language: python
   :copyable: true
   :start-after: start-insert-orders
   :end-before: end-insert-orders
   :dedent:

Tutorial
--------

.. procedure::
   :style: connected

   .. step:: Add a match stage for orders in 2020

      First, add a :manual:`$match
      </reference/operator/aggregation/match>` stage that matches
      orders placed in 2020:

      .. literalinclude:: /includes/aggregation/group-total.py
         :language: python
         :copyable: true
         :start-after: start-match
         :end-before: end-match
         :dedent:

   .. step:: Add a sort stage to sort by order date

      Next, add a :manual:`$sort
      </reference/operator/aggregation/sort>` stage to set an
      ascending sort on the ``orderdate`` field to surface the earliest
      2020 purchase for each customer in the next stage:

      .. literalinclude:: /includes/aggregation/group-total.py
         :language: python
         :copyable: true
         :start-after: start-sort1
         :end-before: end-sort1
         :dedent:

   .. step:: Add a group stage to group by email address

      Add a :manual:`$group
      </reference/operator/aggregation/group>` stage to group
      orders by the value of the ``customer_id`` field. In this
      stage, add aggregation operations that create the
      following fields in the result documents:

      - ``first_purchase_date``: the date of the customer's first purchase
      - ``total_value``: the total value of all the customer's purchases
      - ``total_orders``: the total number of the customer's purchases
      - ``orders``: the list of all the customer's purchases,
        including the date and value of each purchase

      .. literalinclude:: /includes/aggregation/group-total.py
         :language: python
         :copyable: true
         :start-after: start-group
         :end-before: end-group
         :dedent:

   .. step:: Add a sort stage to sort by first order date
            
      Next, add another :manual:`$sort
      </reference/operator/aggregation/sort>` stage to set an
      ascending sort on the ``first_purchase_date`` field:

      .. literalinclude:: /includes/aggregation/group-total.py
         :language: python
         :copyable: true
         :start-after: start-sort2
         :end-before: end-sort2
         :dedent:

   .. step:: Add a set stage to display the email address

      Add a :manual:`$set
      </reference/operator/aggregation/set>` stage to recreate the
      ``customer_id`` field from the values in the ``_id`` field
      that were set during the ``$group`` stage:

      .. literalinclude:: /includes/aggregation/group-total.py
         :language: python
         :copyable: true
         :start-after: start-set
         :end-before: end-set
         :dedent:

   .. step:: Add an unset stage to remove unneeded fields

      Finally, add an :manual:`$unset
      </reference/operator/aggregation/unset>` stage. The
      ``$unset`` stage removes the ``_id`` field from the result
      documents:

      .. literalinclude:: /includes/aggregation/group-total.py
         :language: python
         :copyable: true
         :start-after: start-unset
         :end-before: end-unset
         :dedent:

   .. step:: Run the aggregation pipeline

      Add the following code to the end of your application to perform
      the aggregation on the ``orders`` collection:

      .. literalinclude:: /includes/aggregation/group-total.py
         :language: python
         :copyable: true
         :start-after: start-run-agg
         :end-before: end-run-agg
         :dedent:

      Finally, run the following command in your shell to start your
      application:

      .. code-block:: bash
      
         python3 agg_tutorial.py

   .. step:: Interpret results

      The aggregation returns the following summary of customers' orders
      from 2020:

      .. code-block:: javascript
         :copyable: false
         
         {
           'first_purchase_date': datetime.datetime(2020, 1, 1, 8, 25, 37),
           'total_value': 63,
           'total_orders': 1,
           'orders': [ { 'orderdate': datetime.datetime(2020, 1, 1, 8, 25, 37), 'value': 63 } ],
           'customer_id': 'oranieri@warmmail.com'
         }
         {
           'first_purchase_date': datetime.datetime(2020, 1, 13, 9, 32, 7),
           'total_value': 436,
           'total_orders': 4,
           'orders': [
             { 'orderdate': datetime.datetime(2020, 1, 13, 9, 32, 7), 'value': 99 },
             { 'orderdate': datetime.datetime(2020, 5, 30, 8, 35, 52), 'value': 231 },
             { 'orderdate': datetime.datetime(2020, 10, 3, 13, 49, 44), 'value': 102 },
             { 'orderdate': datetime.datetime(2020, 12, 26, 8, 55, 46), 'value': 4 }
           ],
           'customer_id': 'elise_smith@myemail.com'
         }
         {
           'first_purchase_date': datetime.datetime(2020, 8, 18, 23, 4, 48),
           'total_value': 191,
           'total_orders': 2,
           'orders': [
             { 'orderdate': datetime.datetime(2020, 8, 18, 23, 4, 48), 'value': 4 },
             { 'orderdate': datetime.datetime(2020, 11, 23, 22, 56, 53), 'value': 187 }
           ],
           'customer_id': 'tj@wheresmyemail.com'
         }
      
      The result documents contain details from all the orders from
      a given customer, grouped by the customer's email address.

To view the complete code for this tutorial, see the `Completed Group and Total App
<https://github.com/mongodb/docs-pymongo/tree/master/source/includes/aggregation/group-total.py>`__
on GitHub.
