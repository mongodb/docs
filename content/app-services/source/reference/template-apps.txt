.. meta::
   :robots: noindex, nosnippet

.. _template-apps:

=============
Template Apps
=============

.. meta::
   :description: Quick start your Atlas App Services exploration with a ready-to-use template application.
   :keywords: code example

.. facet::
  :name: genre
  :values: reference

.. contents:: On this page
   :class: singlecol
   :backlinks: none
   :depth: 2
   :local:

You can get up and running with an Atlas App Services App using one of our premade template apps.
Template apps bring together many of the building blocks available in Atlas App Services
and start you off with a prebuilt app that you can customize.

.. button:: Sign-up to Deploy a Template App
   :uri: https://www.mongodb.com/realm/register?tck=docs_CTA_realm_template_apps
  
.. _create-template-app:

Create a Template App
---------------------

You can create a template app using the UI on the Atlas App Services
site, the {+cli+}, or the Admin API. Choose the tab for whichever
option is most convenient for you.

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui

      You can create a template App using the same command as you would
      use to create a blank App. To learn how to create an App Services
      App, see :ref:`Create an App <create-app>` and follow the
      instructions for a template App.

      .. _explore-template-app:

      After you create a template app, the UI includes a
      :guilabel:`Get the Front-End Code for your Template` section that 
      offers client code that you can download as a ``.zip`` file, view on
      GitHub, or get through the {+cli+}.

   .. tab::
      :tabid: cli

      You can create a template App using the same command as you would
      use to create a blank App. To learn how to create an App Services
      App, see :ref:`Create an App <create-app>` and follow the
      instructions for a template App.
      
      The command must include the ``--template`` flag with a valid
      template App ID value:

      .. code-block:: shell
         
         {+cli-bin+} apps create \
           --name "<App Name>" \
           --template "<Template App ID>"

   .. tab::
      :tabid: api

      You can create a template App using the same endpoint as you would
      use to create a blank App. To learn how to create an App Services
      App, see :ref:`Create an App <create-app>` and follow the
      instructions for a template App.

      Your Admin API request must include a valid ``template_id`` value
      in the request body.

      .. code-block:: bash
         :emphasize-lines: 6

         curl -X POST \
           https://services.cloud.mongodb.com/api/admin/v3.0/groups/{groupId}/apps \
           -H 'Authorization: Bearer <access_token>' \
           -d '{
             "name": "<App Name>",
             "template_id": "<Template App ID>",
             "data_source": {
               "name": "mongodb-atlas",
               "type": "mongodb-atlas",
               "config": {
                 "clusterName": "<Atlas Cluster Name>"
               }
             }
           }'

.. _get-template-app-client:

Get a Template App Client
-------------------------

Some of the template apps come with working clients to explore and build 
on when creating your applications. You can access these clients through
the Atlas App Services UI, Realm CLI, or GitHub.

.. tabs::
   
   .. tab:: Atlas App Services UI
      :tabid: ui
      
      When you download client code through the App Services UI, the client 
      code is not pre-populated with your App Services App ID. To use 
      one of these clients, you must :ref:`find your App ID <app-metadata>`
      to use in the client. Follow the :guilabel:`Configuration` and 
      :guilabel:`Download the Client as a Zip File` instructions in the client 
      :file:`README.md` to learn where to insert your App ID.

      **Download the client when you create the template app**

      When you create a template app using the App Services UI, the UI 
      provides you with three options to get the client code immediately 
      after creating the template:

      - Download your preferred client as a ``.zip`` file.
      - Use the {+cli+} to pull your preferred client to a local directory.
      - View and clone the client code from GitHub.

      After selecting your preferred method, follow the on-screen
      instructions or clone the repository to get the client code.
      
      **Download the client at some point after creating the template app**

      If you don't download the client code when you first create the app,
      you can download it later. Your App Services App 
      displays a "Welcome to Your Application" pane on the main dashboard. 
      This pane contains a button labeled :guilabel:`</> Pull front-end code`. 
      When you click this button, you see the same dialogue as when you 
      first create an app, which gives you the options to get the client.

      .. tip::

         The C++ Template App is not yet available to download in the App
         Services UI. Use the CLI or clone the repository from GitHub to get
         the client code.

   .. tab:: {+cli+}
      :tabid: cli

      When you download client code through {+cli+}, the client code is
      pre-populated with your App Services App ID.

      **Download the client when you create the template app**

      When you use {+cli+} to create the template app, it automatically
      creates a directory wherever you run :ref:`the create command 
      <appservices-apps-create>` that contains both the backend and client
      code. Alternately, you can use the ``--local`` option to specify a 
      directory where it should download the app code.
      
      .. code-block:: shell
         
         {+cli-bin+} apps create -n "<App Name>" --template "<Chosen Template App ID>"

      The directory name is the name of your app. Inside this directory,
      you'll see a ``backend`` directory that contains the App Services code,
      and a ``frontend`` directory that contains the client application code.

      **Download the client at some point after creating the template app**

      At any point after creating a template app, you can use the {+cli+}
      to download the client code. Use the :ref:`{+cli+} pull command 
      <appservices-pull>` with the ``--template`` option to specify which
      client template you want to download.

      .. code-block:: shell
         
         {+cli-bin+} pull --remote "<App Name>" --template "<Chosen Template App ID>"

      Use :ref:`the ID of an available template below <template-apps-list>` 
      that offers a client application.

   .. tab:: GitHub
      :tabid: github

      The Device Sync template app clients are available in GitHub. If you
      want just the client code without the backend code, explore the 
      relevant GitHub repository for your preferred framework or language:

      - :github:`C++ Device Sync Client <mongodb/template-app-cpp-todo>`
      - :github:`Flutter Device Sync Client <mongodb/template-app-dart-flutter-todo>`
      - :github:`Kotlin Device Sync Client <mongodb/template-app-kotlin-todo>`
      - :github:`MAUI Device Sync Client <mongodb/template-app-maui-todo>`
      - :github:`React Native Device Sync Client <mongodb/template-app-react-native-todo>`
      - :github:`SwiftUI Device Sync Client <mongodb/template-app-swiftui-todo>`

      If you clone one of these repositories, the client code is not 
      pre-populated with your App Services App ID. To use one of these
      clients, you must :ref:`create a template app <create-template-app>` 
      and :ref:`find your App ID <app-metadata>` to use in the client.
      Follow the :guilabel:`Configuration` and :guilabel:`Cloning from GitHub` 
      instructions in the client :file:`README.md` to learn where to insert 
      your App ID.

.. _template-apps-list:

Template Apps Available
-----------------------

The following templates are available. The {+cli+} accepts the following IDs
to the ``--template`` flag of the :ref:`appservices-apps-create` and
:ref:`appservices-pull` commands.

.. list-table::
   :header-rows: 1
   :widths: 25 20 40 15
   
   * - ID
     - Name
     - Description
     - Client

   * - ``flex-sync-guides.add-collaborators``
     - Flexible Sync Permissions Guide: 'Add Collaborators' Demo
     - Demo with Node.js client and App Services App that implements the
       :ref:`Dynamic Collaboration permissions strategy <dynamic-collaboration>`
       for Device Sync using Flexible Sync.
     - None

   * - ``flex-sync-guides.restricted-feed``
     - Flexible Sync Permissions Guide: 'Restricted Feed' Demo
     - Demo with Node.js client and App Services App that implements the
       :ref:`Restricted News Feed permissions strategy <restricted-news-feed>`
       for Device Sync using Flexible Sync.
     - None

   * - ``flex-sync-guides.tiered``
     - Flexible Sync Permissions Guide: 'Tiered' Demo
     - Demo with Node.js client and App Services App that implements the
       :ref:`Tiered Privileges permissions strategy <tiered-privileges>`
       for Device Sync using Flexible Sync.
     - None

   * - ``cpp.todo.flex``
     - C++ SDK + Atlas Device Sync Starter
     - Terminal GUI to-do list app written in C++ using the :ref:`C++ SDK <cpp-intro>`
       and `FTXUI <https://github.com/ArthurSonzogni/FTXUI>`__. Syncs local
       data to MongoDB Atlas using Device Sync with 
       :ref:`Flexible Sync <flexible-sync>`. 
     - C++

   * - ``flutter.todo.flex``
     - Flutter SDK + Atlas Device Sync Starter
     - Cross-platform to-do list app for Android, iOS, Windows, MacOS, and
       Linux written in Dart using the :ref:`Flutter SDK <flutter-intro>`.
       Syncs local data to MongoDB Atlas using Device Sync with 
       :ref:`Flexible Sync <flexible-sync>`. 
     - Flutter

   * - ``kotlin.todo.flex``
     - Kotlin SDK + Atlas Device Sync Starter
     - Android to-do list app written in Kotlin using the 
       :ref:`Kotlin SDK <kotlin-intro>`. Syncs local data to MongoDB Atlas
       using Device Sync with :ref:`Flexible Sync <flexible-sync>`.
     - Kotlin

   * - ``maui.todo.flex``
     - MAUI + Atlas Device Sync Starter
     - Cross-platform to-do list mobile app using the 
       :ref:`C# SDK <dotnet-intro>`. Syncs local data to MongoDB Atlas using
       Device Sync with :ref:`Flexible Sync <flexible-sync>`.
     - MAUI

   * - ``react-native.todo.flex``
     - React Native + Atlas Device Sync Starter
     - Cross-platform to-do list mobile app using the 
       :ref:`JS SDK <react-native-intro>` and the 
       :npm:`@realm/react <package/@realm/react>` library. Syncs local data to
       MongoDB Atlas using Device Sync with :ref:`Flexible Sync <flexible-sync>`.
     - Realm React

   * - ``swiftui.todo.flex``
     - SwiftUI + Atlas Device Sync Starter
     - iOS to-do list app using SwiftUI and the :ref:`Swift SDK <ios-intro>`.
       Syncs local data to MongoDB Atlas using Device Sync with 
       :ref:`Flexible Sync <flexible-sync>`.
     - SwiftUI

   * - ``sync.todo``
     - Flexible Sync Todo App Backend
     - Backend-only App that contains the configuration used by the ``<Language or Framework>.todo.flex`` template apps.
     - None

   * - ``triggers``
     - Manage Database Views
     - Event-driven :ref:`Database Trigger <database-trigger>` template to update a view in a separate collection.
     - None

   * - ``web.mql.todo``
     - Web SDK + React Starter
     - Hosted to-do list web app using the :ref:`Web SDK <web-intro>`.
     - React/ MQL

   * - ``web.data-api.todo``
     - Atlas Data API + React Starter
     - Hosted to-do list app using the :ref:`Data API <data-api>`.
     - React/ HTTPS
