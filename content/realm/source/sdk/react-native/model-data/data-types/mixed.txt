.. meta::
   :robots: noindex, nosnippet

.. _react-nativedata-types-mixed:

========================
Mixed - React Native SDK
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. versionchanged:: ``realm@12.9.0``

  Mixed properties can contain lists or dictionaries of mixed data.

.. versionadded:: ``realm@10.5.0``

The Mixed data type is a realm property type that can hold any valid Realm data
type except an embedded object or a set.
You can create collections (lists, sets, and dictionaries) of type ``mixed``. Properties using the mixed data type can also hold null values.

The Mixed type is indexable, but you can't use it as a primary key.

Properties using the Mixed type can hold null values and cannot be defined
as optional. All instances of the JavaScript ``Number`` type in a Realm Mixed
type are mapped to the Realm ``double`` type.

Realm Object Models
-------------------

To :ref:`set a property of your object model
<react-native-define-a-realm-object-schema>` as Mixed, set the property's type to
``mixed``.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/react-native/ts/Cat.snippet.ts-cat-schema.ts
         :language: typescript

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/Cat.snippet.js-cat-schema.js
         :language: javascript

.. _react-native-nested-collections-mixed:

Collections as Mixed
~~~~~~~~~~~~~~~~~~~~

In JS SDK v12.9.0 and later, a mixed data type can hold collections (a list or
dictionary, but *not* a set) of mixed elements. You can use mixed collections to
model unstructured or variable data. For more information, refer to
:ref:`<react-native-model-unstructured-data>`.

- You can nest mixed collections up to 100 levels.
- You can query mixed collection properties and
  :ref:`register a listener for changes <react-native-collection-listener>`,
  as you would a normal collection.
- You can find and update individual mixed collection elements
- You *cannot* store sets or embedded objects in mixed collections.

To use mixed collections, define the mixed type property in your data model.
Then, create the list or dictionary collection.

Create an Object With a Mixed Value
-----------------------------------

Create an object with a Mixed value by using the :mdn:`new
<Web/JavaScript/Reference/Operators/new>` operator within a :ref:`write
transaction <react-native-write-transactions>`.

Example
~~~~~~~

In the following ``CreateCatsInput`` example, we create several ``Cat`` realm
objects with a Mixed type for the ``birthDate`` field.

The ``CreateCatsInput`` component does the following:

- Get access to the opened realm instance by calling the ``useRealm()`` hook.
- Use React's `useEffect <https://react.dev/reference/react/useEffect>`__ hook
  to call an anonymous function only once with ``useEffect`` and an
  empty dependency array.
- Within the anonymous function, we create four different ``Cat`` objects by
  using the ``new`` operator to create a new realm object within a write
  transaction. Each of the ``Cat`` objects uses a different data type for the
  ``birthDate`` property.
- Use the ``useQuery()`` hook to retrieve all ``Cat`` objects.
- `Map <https://react.dev/learn/rendering-lists>`__ through the cats to render
  a list of ``Text`` components displaying each cat's ``name`` and ``birthDate``.


.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/react-native/ts/mixed-test.snippet.create-mixed-object.tsx
         :language: typescript
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/mixed-test.snippet.create-mixed-object.jsx
         :language: javascript
         :linenos:

Query for Objects with a Mixed Value
------------------------------------

To query for objects with a Mixed value, run the
:js-sdk:`Collection.filtered() <Realm.Collection.html#filtered>` method and
pass in a :ref:`filter <react-native-filter-queries>` for a non-Mixed field. You can
then print the value of the Mixed property or the entire object itself.

Example
~~~~~~~

In the following ``CatInfoCard`` example, we query for a ``Cat`` object using the
cat's name.

The ``CatInfoCard`` component does the following:

- Get all ``Cat`` objects by passing the ``Cat`` class to the ``useQuery()`` hook, and then use ``filtered()`` to filter the results to receive only the cats whose names match the name passed as a prop. We then get the first matching cat and store it as a const variable.
- Use dot notation to retrieve the Mixed property, ``birthDate``.
- Display the cat's name and birthdate in the render method if Realm finds the cat. If there is no cat that matches the name passed into the component as a prop, we render text that says "Cat not found".

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/react-native/ts/mixed-test.snippet.query-mixed-object.tsx
         :language: typescript
         :emphasize-lines: 6-12
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/mixed-test.snippet.query-mixed-object.jsx
         :language: javascript
         :emphasize-lines: 4-10
         :linenos:

Mixed Properties and Type Checking
----------------------------------

Because Mixed properties can be more than one type, you can't rely on the
property's value being a specific type.

With :js-sdk:`Object.getPropertyType() <Realm.Object.html#getPropertyType>`, you
can get a Mixed property's underlying type. This allows you build your own type
checking.

.. literalinclude:: /examples/generated/react-native/ts/mixed-test.snippet.type-check.tsx
   :language: javascript
   :emphasize-lines: 22-24
