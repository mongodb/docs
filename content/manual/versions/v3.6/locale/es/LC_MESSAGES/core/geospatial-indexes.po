# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 19:31+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/geospatial-indexes.txt:3
msgid "``2d`` Index Internals"
msgstr ""

#: ../source/core/geospatial-indexes.txt:13
msgid ""
"This document provides a more in-depth explanation of the internals of "
"MongoDB's ``2d`` geospatial indexes. This material is not necessary for "
"normal operations or application development but may be useful for "
"troubleshooting and for further understanding."
msgstr ""

#: ../source/core/geospatial-indexes.txt:21
msgid "Calculation of Geohash Values for ``2d`` Indexes"
msgstr ""

#: ../source/core/geospatial-indexes.txt:23
msgid ""
"When you create a geospatial index on :term:`legacy coordinate pairs "
"<legacy coordinate pairs>`, MongoDB computes :term:`geohash` values for "
"the coordinate pairs within the specified :ref:`location range "
"<geospatial-indexes-range>` and then indexes the geohash values."
msgstr ""

#: ../source/core/geospatial-indexes.txt:28
msgid ""
"To calculate a geohash value, recursively divide a two-dimensional map "
"into quadrants. Then assign each quadrant a two-bit value. For example, a"
" two-bit representation of four quadrants would be:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:38
msgid ""
"These two-bit values (``00``, ``01``, ``10``, and ``11``) represent each "
"of the quadrants and all points within each quadrant. For a geohash with "
"two bits of resolution, all points in the bottom left quadrant would have"
" a geohash of ``00``. The top left quadrant would have the geohash of "
"``01``. The bottom right and top right would have a geohash of ``10`` and"
" ``11``, respectively."
msgstr ""

#: ../source/core/geospatial-indexes.txt:45
msgid ""
"To provide additional precision, continue dividing each quadrant into "
"sub-quadrants. Each sub-quadrant would have the geohash value of the "
"containing quadrant concatenated with the value of the sub-quadrant. The "
"geohash for the upper-right quadrant is ``11``, and the geohash for the "
"sub-quadrants would be (clockwise from the top left): ``1101``, ``1111``,"
" ``1110``, and ``1100``, respectively."
msgstr ""

#: ../source/core/geospatial-indexes.txt:62
msgid "Multi-location Documents for ``2d`` Indexes"
msgstr ""

#: ../source/core/geospatial-indexes.txt:65
msgid ""
":doc:`2dsphere </core/2dsphere>` indexes can cover multiple geospatial "
"fields in a document, and can express lists of points using :ref"
":`geojson-multipoint` embedded documents."
msgstr ""

#: ../source/core/geospatial-indexes.txt:69
msgid ""
"While ``2d`` geospatial indexes do not support more than one geospatial "
"field in a document, you can use a :ref:`multi-key index <index-type-"
"multi-key>` to index multiple coordinate pairs in a single document. In "
"the simplest example you may have a field (e.g. ``locs``) that holds an "
"array of coordinates, as in the following example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:84
msgid ""
"The values of the array may be either arrays, as in ``[ 55.5, 42.3 ]``, "
"or embedded documents, as in ``{ lng : 55.5 , lat : 42.3 }``."
msgstr ""

#: ../source/core/geospatial-indexes.txt:87
msgid ""
"You could then create a geospatial index on the ``locs`` field, as in the"
" following:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:94
msgid ""
"You may also model the location data as a field inside of an embedded "
"document. In this case, the document would contain a field (e.g. "
"``addresses``) that holds an array of documents where each document has a"
" field (e.g. ``loc:``) that holds location coordinates. For example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:115
msgid ""
"You could then create the geospatial index on the ``addresses.loc`` field"
" as in the following example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:122
msgid ""
"To include the location field with the distance field in multi-location "
"document queries, specify ``includeLocs: true`` in the "
":dbcommand:`geoNear` command."
msgstr ""

# 4b3c828534374d9eaf98bfb2e19b03fa
#~ msgid "Support for multiple locations in a document."
#~ msgstr ""

# 4869c031f32a4295ac782ee0f40ab383
#~ msgid ""
#~ "While ``2d`` geospatial indexes do not"
#~ " support more than one set of "
#~ "coordinates in a document, you can "
#~ "use a :ref:`multi-key index <index-"
#~ "type-multi-key>` to index multiple "
#~ "coordinate pairs in a single document."
#~ " In the simplest example you may "
#~ "have a field (e.g. ``locs``) that "
#~ "holds an array of coordinates, as "
#~ "in the following example:"
#~ msgstr ""

# 10d66ad532b64f1daa2921c431d823ec
#~ msgid ""
#~ "You may also model the location "
#~ "data as a field inside of a "
#~ "sub-document. In this case, the "
#~ "document would contain a field (e.g. "
#~ "``addresses``) that holds an array of"
#~ " documents where each document has a"
#~ " field (e.g. ``loc:``) that holds "
#~ "location coordinates. For example:"
#~ msgstr ""

