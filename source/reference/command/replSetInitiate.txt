===============
replSetInitiate
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: replSetInitiate

   The :dbcommand:`replSetInitiate` command initializes a new replica set.
   
   .. |command| replace:: ``replSetInitiate``

   .. include:: /includes/fact-dbcommand.rst

   .. note::

      Run the command on only one of the :binary:`~bin.mongod` instances
      for the replica set.

   Use the following syntax:

   .. code-block:: javascript

      { replSetInitiate : <config_document> }

   The ``<config_document>`` is a :term:`document` that specifies
   the replica set's configuration. For instance, here's a config document
   for creating a simple 3-member replica set:

   .. code-block:: javascript

      {
          _id : <setname>,
           members : [
               {_id : 0, host : <host0>},
               {_id : 1, host : <host1>},
               {_id : 2, host : <host2>},
           ]
      }

   .. include:: /includes/tip-hostnames.rst

IP Binding
----------

.. include:: /includes/fact-default-bind-ip.rst

Example
-------

Assign a config document to a variable and then to pass the document to
the :method:`rs.initiate()` helper:

.. code-block:: javascript

   config = {
       _id : "my_replica_set",
        members : [
            {_id : 0, host : "rs1.example.net:27017"},
            {_id : 1, host : "rs2.example.net:27017"},
            {_id : 2, host : "rs3.example.net", arbiterOnly: true},
        ]
   }

   rs.initiate(config)

.. include:: /includes/tip-hostnames.rst

Notice that omitting the port cause the host to use the default port
of 27017. Notice also that you can specify other options in the config
documents such as the ``arbiterOnly`` setting in this example.

.. slave-ok, admin-only

.. seealso::

   :doc:`/reference/replica-configuration`,
   :doc:`/administration/replica-set-deployment`, and :ref:`Replica Set
   Reconfiguration <replica-set-reconfiguration-usage>`.
