.. meta::
   :robots: noindex, nosnippet

.. _node-write-operations:
.. _node-realm-database-writes:
.. _node-write-transactions:
.. _node-read-and-write-data:

==================
CRUD - Node.js SDK
==================

.. toctree::
   :titlesonly:

   Create </sdk/node/crud/create>
   Read </sdk/node/crud/read>
   Update </sdk/node/crud/update>
   Delete </sdk/node/crud/delete>
   Query Data </sdk/node/crud/query-data>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

A write transaction is a function that modifies objects in a realm. Write 
transactions let you create, modify, or delete Realm objects. They handle 
operations in a single, idempotent update. A transaction is 
*all or nothing*. Either:

- All the operations in the transaction succeed, or; 
- If any operation fails, none of the operations complete.

.. important::
   
   Every write operation must occur in a write transaction.
   
Write transactions are callback functions that you pass to a realm
instance. For examples of specific write operations, see 
:ref:`node-write-operations`.

Transaction Lifecycle
---------------------

A given realm only processes one write transaction at a time. When you 
make a write transaction, the realm adds the transaction to a queue. The 
realm evaluates each transaction in the order it arrived.

After processing a transaction, Realm either **commits** it or
**cancels** it:

- After a **commit**, the realm applies all operations in the transaction. 
  Once applied, the realm automatically updates :ref:`live queries
  <node-live-queries>`. It notifies listeners of created, modified, and 
  deleted objects.
  
  .. note::
     
     When using :ref:`Sync <sync>`, the SDK also queues
     the changes to send to Atlas App Services. The SDK sends 
     these changes when a network is available.

- Realm does not apply any operations in a **cancelled**
  transaction. Realm cancels a transaction if an operation 
  fails or is invalid.
