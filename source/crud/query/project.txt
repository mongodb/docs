.. _csharp-project:

========================
Specify Fields To Return
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: read, filter, project, select

Overview
--------

In this guide, you can learn how to specify which fields to return from a read
operation by using a **projection**. A projection is a document that specifies
which fields MongoDB returns from a query.

Sample Data
~~~~~~~~~~~

The examples on this page use the ``sample_mflix.movies`` collection
from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
free MongoDB Atlas cluster and load the sample datasets, see the :ref:`<csharp-get-started>`.

The following class represents the documents in the ``sample_mflix.movies`` collection:

.. literalinclude:: /includes/code-examples/projection/Movie.cs
   :language: csharp

.. note:: ConventionPack for Pascal Case
   
   The properties in the preceding class are named in Pascal case, but the
   field names in the MongoDB collection use camel case. To account for this difference,
   you can use the following code to register a ``ConventionPack`` when your
   application starts:

   .. code-block:: csharp

      var camelCaseConvention = new ConventionPack { new CamelCaseElementNameConvention() };
      ConventionRegistry.Register("CamelCase", camelCaseConvention, type => true);

.. _csharp-projection-methods:

Create a Projection
-------------------

To create a projection, perform the following steps:

1. Use the ``Builders<TDocument>.Projection`` static property to create a
   ``ProjectionDefinitionBuilder<TDocument>`` object, where ``TDocument`` represents the
   C# class that the collection's documents map to. The ``ProjectionDefinitionBuilder`` class
   provides a type-safe interface for defining a projection.

#. Chain projection methods from the ``ProjectionDefinitionBuilder<TDocument>``
   object to specify which fields to include or exclude from the returned documents.

#. Store the resulting ``ProjectionDefinition<TDocument>`` object in a variable.

#. Pass the variable to the ``Project()`` method after performing the find or aggregation
   operation.

The following sections describe the methods that you can chain from your
``ProjectionDefinitionBuilder<TDocument>`` object.

Field Projection Methods
------------------------

The following methods let you specify which fields to include or exclude from the returned
documents.

ElemMatch
~~~~~~~~~

The ``ElemMatch()`` method limits the contents of an array field from the query results to
contain only the first element matching a specified condition. This is equivalent to projecting
an array element by using the ``$elemMatch`` operator in the {+query-api+}.

For a code example that uses the ``ElemMatch()`` method, see
:manual:`$elemMatch </reference/operator/projection/elemMatch/>`
in the {+mdb-server+} manual.

Expression
~~~~~~~~~~

The ``Expression()`` method lets you specify the structure of the returned documents
by using a lambda expression. This is equivalent to specifying the structure of the
returned documents in the ``$project`` aggregation stage in the {+query-api+}.

For a code example that uses the ``Expression()`` method, see
:manual:`$project </reference/operator/aggregation/project/>` in the {+mdb-server+} manual.

.. note:: ``Id`` Field Exclusion

   When you use a lambda expression to create a projection, the output
   automatically excludes the ``Id`` field unless you explicitly include
   it.

Exclude
~~~~~~~

The ``Exclude()`` method lets you specify a field to exclude from the returned documents.
This is equivalent to excluding a field in the ``$project`` aggregation stage in the
{+query-api+}. You cannot combine inclusion and exclusion statements in a single
projection unless you are excluding the ``_id`` field.

For a code example that uses the ``Exclude()`` method, see
:manual:`$project </reference/operator/aggregation/project/>` in the {+mdb-server+} manual.

.. note:: Explicitly Exclude ``_id`` Field

   Returned documents include the ``_id`` field unless you explicitly exclude it. The
   only exception to this is when you use the ``Expression()`` method to create a
   projection.

Include
~~~~~~~

The ``Include()`` method lets you specify a field to include in the returned documents.
This is equivalent to including a field in the ``$project`` aggregation stage in the
{+query-api+}.

For a code example that uses the ``Include()`` method, see
:manual:`$project </reference/operator/aggregation/project/>` in the {+mdb-server+} manual.

Slice
~~~~~

The ``Slice()`` method specifies the number of elements of a list or array to return in the query
result field. This is equivalent to using the ``$slice`` operator in the {+query-api+}.

The following code example uses the ``Slice()`` method to return the first three elements
of the ``Cast`` list in the returned document's ``cast`` array:

.. io-code-block::

   .. input:: /includes/code-examples/projection/SliceExamples.cs
      :language: csharp
      :dedent: 8
      :start-after: // start first three
      :end-before: // end first three

   .. output::
      :visible: false
      :language: json

      {
        "_id": {
          "$oid": "573a1398f29313caabceb500"
        },
        "title": "Back to the Future Part II",
        "cast": [
          "Michael J. Fox",
          "Christopher Lloyd",
          "Lea Thompson"
        ]
      }

To return elements from the end of a collection, pass a negative integer to the ``Slice()``
method. The following code example returns the last three elements of the ``Cast`` list in
the returned document's ``cast`` array:

.. io-code-block::

   .. input:: /includes/code-examples/projection/SliceExamples.cs
      :language: csharp
      :dedent: 8
      :start-after: // start last three
      :end-before: // end last three

   .. output::
      :visible: false
      :language: json

      {
        "_id": {
          "$oid": "573a1398f29313caabceb500"
        },
        "title": "Back to the Future Part II",
        "cast": [
          "Lea Thompson",
          "Thomas F. Wilson"
        ]
      }

To skip a specified number of elements in a collection, pass the number of elements to skip
as the first parameter and the number of elements to return as the second
parameter. The following code example skips the first element in the
``Cast`` list and returns the next three elements in the ``cast`` array:

.. io-code-block::

   .. input:: /includes/code-examples/projection/SliceExamples.cs
      :language: csharp
      :dedent: 8
      :start-after: // start skip first limit three
      :end-before: // end skip first limit three

   .. output::
      :visible: false
      :language: json

      {
        "_id": {
          "$oid": "573a1398f29313caabceb500"
        },
        "title": "Back to the Future Part II",
        "cast": [
          "Christopher Lloyd",
          "Lea Thompson",
          "Thomas F. Wilson"
        ]
      }

To learn more about the ``$slice`` operator, see
:manual:`$slice </reference/operator/projection/slice/>` in the {+mdb-server+} manual.

Metadata Projection Methods
---------------------------

The following methods let you specify which metadata fields to include or exclude
from the returned documents. Metadata fields are hidden by default.

Meta
~~~~

The ``Meta()`` method lets you specify a metadata field to include in the returned
documents. This is equivalent to including a metadata field by using the
:manual:`$meta </reference/operator/aggregation/meta/>` operator in the {+query-api+}.

The following code example adds the ``textScore`` metadata field to the returned
documents as a field named ``score``:

.. io-code-block::

   .. input:: /includes/code-examples/projection/MetaExamples.cs
      :language: csharp
      :dedent: 8
      :start-after: // start meta
      :end-before: // end meta

   .. output::
      :visible: false
      :language: json

      {
        "_id": {
          "$oid": "..."
        },
        "plot": "...",
        "title": "...",
        "score": "..."
      }

MetaSearchHighlights
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/project/atlas-only-note.rst

The ``MetaSearchHighlights()`` includes search highlights
in the returned documents. This is equivalent to projecting search highlights
by using a ``{ "$meta": "searchHighlights" }`` object in the {+query-api+}.
To retrieve search highlights, you must create a ``SearchHighlightOptions`` object that
specifies the search field, and then pass this object to the ``Search()`` method.

The following code example retrieves search highlights for the ``plot`` field, then
includes these highlights in a property named ``Highlights`` in the returned documents:

.. io-code-block::

   .. input:: /includes/code-examples/projection/MetaExamples.cs
      :language: csharp
      :dedent: 8
      :start-after: // start metaSearchHighlights
      :end-before: // end metaSearchHighlights

   .. output::
      :visible: false
      :language: json

      {
        "_id": {
          "$oid": "573a13def29313caabdb5661"
        },
        "plot": "She Can See Her Future, But Can't Escape Her Past.",
        "title": "West",
        "highlights": [
          {
            "score": 1.286744475364685,
            "path": "plot",
            "texts": [
              {
                "value": "She Can See Her ",
                "type": "text"
              },
              {
                "value": "Future",
                "type": "hit"
              },
              {
                "value": ", But Can't Escape Her Past.",
                "type": "text"
              }
            ]
          }
        ]
      }

To learn more about search highlights, see
:atlas:`Highlight Search Terms in Results </atlas-search/highlighting/>`
in the Atlas documentation.

MetaSearchScore
~~~~~~~~~~~~~~~

.. include:: /includes/project/atlas-only-note.rst

The ``MetaSearchScore()`` method includes search scores in the returned
documents. This is equivalent to projecting search scores
by using a ``{ "$meta": "searchScore" }`` object in the {+query-api+}.

The following code example projects each document's search score in a field named
``score``:

.. io-code-block::

   .. input:: /includes/code-examples/projection/MetaExamples.cs
      :language: csharp
      :dedent: 8
      :start-after: // start metaSearchScore
      :end-before: // end metaSearchScore

   .. output::
      :visible: false
      :language: json

      {
        "_id": {
          "$oid": "573a13def29313caabdb5661"
        },
        "plot": "She Can See Her Future, But Can't Escape Her Past.",
        "title": "West",
        "score": 2.8259084224700928
      }

To learn more about search scores, see
:atlas:`Score the Documents in the Returned Documents </atlas-search/scoring/>`.

MetaSearchScoreDetails
~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/project/atlas-only-note.rst

The ``MetaSearchScoreDetails()`` includes details about the search scores
in the returned documents. This is equivalent to projecting search score details
by using a ``{ "$meta": "searchScoreDetails" }`` object in the {+query-api+}.

To retrieve score details, create a ``SearchOptions`` object with its
``ScoreDetails`` property set to ``true``, and then pass this object to the ``Search()`` method.
The following code example shows this process by projecting each document's search score
details in a field named ``searchScoreDetails``:

.. io-code-block::

   .. input:: /includes/code-examples/projection/MetaExamples.cs
      :language: csharp
      :dedent: 8
      :start-after: // start metaSearchScoreDetails
      :end-before: // end metaSearchScoreDetails

   .. output::
      :visible: false
      :language: json

      {
        "_id": {
          "$oid": "573a13def29313caabdb5661"
        },
        ...
        "scoreDetails": {
          "value": 2.8259084224700928,
          "description": "$type:string/plot:future [BM25Similarity], result of:",
          "details": [
            {
              "value": 2.8259084224700928,
              "description": "score(freq=1.0), computed as boost * idf * tf from:",
              "details": [
               ...
      }

To learn more about search score details, see
:atlas:`Return the Score Details </atlas/atlas-search/scoring/>`
in the Atlas documentation.

MetaSearchSequenceToken
~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/project/atlas-only-note.rst

The ``MetaSearchSequenceToken()`` method includes a token in the returned documents
that represents a point in the search sequence. This is equivalent to projecting the search
sequence token by using a ``{ "$meta": "searchSequenceToken" }`` object in the
{+query-api+}. You can use this token to perform additional searches before or after the
specified point.

The following code example projects each document's search sequence token in a property
named ``PaginationToken``:

.. io-code-block::

   .. input:: /includes/code-examples/projection/MetaExamples.cs
      :language: csharp
      :dedent: 8
      :start-after: // start metaSearchSequenceToken
      :end-before: // end metaSearchSequenceToken

   .. output::
      :visible: false
      :language: json

      {
        "_id": {
          "$oid": "573a13def29313caabdb5661"
        },
        "plot": "She Can See Her Future, But Can't Escape Her Past.",
        "title": "West",
        "paginationToken": "CIeaARWv2zRAIg5aDFc6E97ykxPKq9tWYQ=="
      }

To learn more about search sequence tokens, see
:atlas:`Paginate Search Results </atlas-search/paginate-results/>`

MetaTextScore
~~~~~~~~~~~~~

The ``MetaTextScore()`` method includes the ``$text`` search scores in the returned documents.
This is equivalent to projecting the text search score by using a
``{ "$meta": "textScore" }`` object in the {+query-api+}.

For a code example that uses the ``MetaTextScore()`` method, see
:manual:`$meta </reference/operator/aggregation/meta/>`
in the {+mdb-server+} manual.

MetaVectorSearchScore
~~~~~~~~~~~~~~~~~~~~~

.. note:: Atlas Vector Search Only

   This method is available only when projecting the results of an Atlas Vector Search.

The ``MetaVectorSearchScore()`` method includes the Atlas Vector Search scores in the
returned documents. This is equivalent to projecting the Vector Search score by using a
``{ "$meta": "vectorSearchScore" }`` object in the {+query-api+}.

For a code example that uses the ``MetaVectorSearchScore()`` method, see
:ref:`Atlas Vector Search <csharp-atlas-vector-search>`.

To learn more about Atlas Vector Search scores, see
:atlas:`Score the Documents in the Returned Documents </atlas-search/scoring/>`
in the Atlas documentation.

SearchMeta
~~~~~~~~~~

.. include:: /includes/project/atlas-only-note.rst

The ``SearchMeta()`` method includes a metadata results document. The structure of this
document depends on the type of the results. This is equivalent to projecting the
metadata results document by using the ``$searchMeta`` aggregation stage or the
``$$SEARCH_META`` aggregation variable in the {+query-api+}.

For a code example that uses the ``SearchMeta()`` method, see
:atlas:`How to Use Facets with Atlas Search </atlas-search/tutorial/facet-tutorial/>`
in the Atlas documentation.

To learn more about ``$searchMeta`` and ``$$SEARCH_META``, see the following Atlas
documentation:

- :atlas:`$searchMeta </atlas-search/aggregation-stages/searchMeta/>`
- :atlas:`$search with $$SEARCH_META </atlas-search/facet/#std-label-fts-facet-aggregation-variable>`

API Documentation
-----------------

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `Projection <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Builders-1.Projection.html>`_
- `ProjectionDefinitionBuilder <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.html>`__
- `ElemMatch() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.ElemMatch.html>`__
- `Exclude() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.Exclude.html>`__
- `Expression() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.Expression.html>`__
- `Include() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.Include.html>`__
- `Meta() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.Meta.html>`__
- `MetaSearchHighlights <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.MetaSearchHighlights.html>`__
- `MetaSearchScore() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.MetaSearchScore.html>`__
- `MetaSearchScoreDetails() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.MetaSearchScoreDetails.html>`__
- `MetaSearchSequenceToken() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.MetaSearchSequenceToken.html>`__
- `MetaTextScore() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.MetaTextScore.html>`__
- `MetaVectorSearchScore() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.MetaVectorSearchScore.html>`__
- `SearchMeta() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.SearchMeta.html>`__
- `Slice() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ProjectionDefinitionBuilder-1.Slice.html>`__