.. index:: pair: replica set; failover
.. _replica-set-failover-administration:
.. _replica-set-failover:
.. _failover:

=============================
Replica Set High Availability
=============================

.. default-domain:: mongodb

:term:`Replica sets <replica set>` provide high availability through
automatic :term:`failover`. Automatic failover allows a
:term:`secondary` member of the replica set to become the
new :term:`primary` should the primary become inaccessible.

Within a replica set, members hold the same information but are
otherwise autonomous. If the primary becomes inaccessible for any
reason, the replica set automatically holds an :doc:`election
</core/replica-set-elections>` for a new primary. In some situations,
the failover process may also involve :doc:`rollbacks
</core/replica-set-rollbacks>`.

You must configure your replica set correctly for failover to work.
Locate a majority of the replica set's voting members in one data
center. The center should hold all the members that are eligible to
become primary. Choose the facility that contains your core application
systems. Without these design patterns, network partitions might render
some members inaccessible, and the remaining members will not be able to
form a majority.

To be eligible to become primary, a member must have a
:data:`~local.system.replset.settings.members[n].priority` setting
greater than ``0`` and have a state that is fewer than ten seconds
behind the last operation to the replica set. Also, the member usually
must be *more* up-to-date than the voting members.

Failover Processes
------------------

To recover from the loss or inaccessibility of the current primary, the
replica set holds an election. In rare situations, the replica set also
"rolls back" write operations.

.. include:: /includes/dfn-list-replica-set-high-availability.rst

.. include:: /includes/toc-replica-set-high-availability.rst
