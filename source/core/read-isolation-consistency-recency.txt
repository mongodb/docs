========================================
Read Isolation, Consistency, and Recency
========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Isolation Guarantees
--------------------

Read Uncommitted
~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/concurrent-operations-read-uncommitted.rst

Read uncommitted is the default isolation level and applies to
:binary:`~bin.mongod` standalone instances as well as to replica sets and
sharded clusters.

Read Uncommitted And Single Document Atomicity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/concurrent-operations-single-document-write.rst

However, although the readers may not see a *partially* updated
document, read uncommitted means that concurrent readers may still see
the updated document before the changes are :term:`durable`.

Read Uncommitted And Multiple Document Write
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/concurrent-operations-multi-document-writes.rst

Without isolating the multi-document write operations, MongoDB exhibits
the following behavior:

.. include:: /includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst

Starting in version 4.0, for situations that require atomicity for
updates to multiple documents or consistency between reads to multiple
documents, MongoDB provides :doc:`multi-document transactions
</core/transactions>` for replica sets.

.. _faq-developers-isolate-cursors:

Cursor Snapshot
~~~~~~~~~~~~~~~

.. include:: /includes/extracts/isolate-cursor-snapshot.rst


Monotonic Writes
----------------

.. include:: /includes/extracts/monotonic-writes.rst

.. _consistency-linearizable-reads:

Real Time Order
---------------

.. versionadded:: 3.4

For read and write operations on the primary, issuing read operations
with :readconcern:`"linearizable"` read concern and write operations
with :writeconcern:`"majority"` write concern enables multiple threads
to perform reads and writes on a single document as if a single thread
performed these operations in real time; that is, the corresponding
schedule for these reads and writes is considered linearizable.

.. seealso:: :ref:`causal-consistency`

.. _causal-consistency:

Causal Consistency
------------------

.. versionadded:: 3.6

If an operation logically depends on a preceding operation, there is a
causal relationship between the operations. For example, a write
operation that deletes all documents based on a specified condition and
a subsequent read operation that verifies the delete operation have a
causal relationship.

With causal consistency, MongoDB executes causal operations in an order
that respect their causal relationships, and clients observe results
that are consistent with the causal relationships.

.. _sessions:

Client Sessions
~~~~~~~~~~~~~~~

.. important::

   The following discussion refers to client sessions, which are
   separate from server sessions.

   To use client sessions:

   - Clients require MongoDB drivers updated for MongoDB 3.6 or later:

     .. include:: /includes/3.6-drivers.rst

   - ``featureCompatibilityVersion`` must be set to "3.6" or greater. For more
     information, see :ref:`view-fcv` and
     :dbcommand:`setFeatureCompatibilityVersion`.


To provide causal consistency, MongoDB 3.6 enables causal consistency
in client sessions. A causally consistent session denotes that the
associated sequence of read and *acknowledged* write operations have a
causal relationship that is reflected by their ordering. Applications
must ensure that only one thread at a time executes these operations in
a client session.

For causally related operations:

#. A client starts a client session.

#. As the client issues a sequence of read and write operations, the
   client includes the session information with each operation. The
   client uses a read concern to specify that each operation is
   causally related to the previous one in the session.

#. For each read and *acknowledged* write operation associated with the
   session, MongoDB returns the operation time and the cluster time,
   even if the operation errors. The client session keeps track of the
   operation time and the cluster time. 

   .. note::

      MongoDB does not return the operation time and the cluster time
      for *unacknowledged* write operations. Unacknowledged writes do
      not imply any causal relationship.

#. The associated client session tracks these two time fields.

The following table lists the causal consistency guarantees provided by
causally consistent sessions for read and *acknowledged* write
operations. These guarantees hold across all members of the MongoDB
deployment.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Guarantees
     - Description

   * - Read your writes

     - Read operations reflect the results of write
       operations that precede them.

   * - Monotonic reads

     - Read operation do not return results that corresponds to an
       earlier state of the data than a preceding read operation.

       For example, if in a session:

       - write\ :sub:`1` precedes write\ :sub:`2`,

       - read\ :sub:`1` precedes read\ :sub:`2`, and 

       - read\ :sub:`1` returns results that reflect write\ :sub:`2`

       then, read\ :sub:`2` cannot return results of write\ :sub:`1`.

   * - Monotonic writes

     - Write operations that must precede other writes are executed
       before those other writes.

   * - Writes follow reads

     - Write operations that must occur after read operations are
       executed after those read operations.

These guarantees hold across all members of the MongoDB deployment.
   For example, if, for a client session, you issue an acknowledged write
   followed by a read from a secondary, the read operation will reflect
   the state of the database after the write operation. 

   .. note::

      Operations within a client session are not isolated from
      operations outside the session. If a concurrent write operation
      interleaves between the session's write and read operations, the
      session's read operation may return results that reflect a write
      operation that occurred *after* the session's write operation.

Operations can be causally consistent across different sessions.
   MongoDB drivers and the :binary:`~bin.mongo` shell provide the methods
   to advance the operation time and advance the cluster time for a
   client session. So, a client can advance the cluster time and the
   operation time of one client session to be consistent with the operations
   of another client session.

.. _causal-consistency-limitations:

Limitations
~~~~~~~~~~~

The following operations that build in-memory structures are not
causally consistent:

.. list-table::
   :header-rows: 1

   * - Operation
     - Notes

   * - :dbcommand:`collStats`

     - 

   * - :pipeline:`$collStats` with ``latencyStats`` option.

     - 

   * - :pipeline:`$currentOp`

     - Returns an error if the operation is associated with a causally
       consistent client session.

   * - :dbcommand:`dbStats`

     - 

   * - :dbcommand:`getMore`

     - Returns an error if the operation is associated with a causally
       consistent client session.

   * - :pipeline:`$indexStats`

     - 

   * - :dbcommand:`ping`

     - Returns an error if the operation is associated with a causally
       consistent client session.

   * - :dbcommand:`serverStatus`

     - Returns an error if the operation is associated with a causally
       consistent client session.

   * - :dbcommand:`createIndexes` with ``background: true`` option; i.e.
       background index builds

     - 
