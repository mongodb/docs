.. meta::
   :robots: noindex, nosnippet

.. _ios-install:

=================================================
Install the SDK for iOS, macOS, tvOS, and watchOS
=================================================

.. meta::
   :description: Install Atlas Device SDK for Swift using popular package managers, or as a static framework.

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

Atlas Device SDK for Swift enables you to build iOS, macOS, tvOS,
and watchOS applications using either the Swift or Objective-C programming
languages. This page details how to install the SDK in your project and get
started.

Prerequisites
-------------

Before getting started, ensure your development environment
meets the following prerequisites:

- Your project uses an Xcode version and minimum OS version listed in the
  :ref:`swift-os-support` section of this page.
- Reflection is enabled in your project. The Swift SDK uses reflection to
  determine your model's properties. Your project must not set
  ``SWIFT_REFLECTION_METADATA_LEVEL = none``, or the SDK cannot see properties
  in your model. Reflection is enabled by default if your project does
  not specifically set a level for this setting.

Installation
------------

You can use ``SwiftPM``, ``CocoaPods``, or ``Carthage`` to add the
Swift SDK to your project.

.. tip:: Atlas Device SDK and Realm

   The SDK uses Realm Core database for device data persistence. When you
   install the Swift SDK, the package names reflect Realm naming.

.. tabs::

   .. tab:: SwiftPM
      :tabid: swiftpm

      .. procedure::

         .. step:: Add Package Dependency

            In Xcode, select ``File`` > ``Add Packages...``.

         .. step:: Specify the Repository

            Copy and paste the following into the search/input box.

            .. code-block:: sh

               https://github.com/realm/realm-swift.git

         .. step:: Specify Options

            In the options for the ``realm-swift`` package, we recommend setting
            the ``Dependency Rule`` to ``Up to Next Major Version``,
            and enter the `current Realm Swift SDK version
            <https://github.com/realm/realm-swift/releases>`__ . Then, click ``Add Package``.

         .. step:: Select the Package Products

            .. versionchanged:: 10.49.3
               Instead of adding both, only add one package.

            Select either ``RealmSwift`` or ``Realm``, then click ``Add Package``.

            - If you use Swift or Swift and Objective-C APIs, add ``RealmSwift``.
            - If you use *only* Objective-C APIs, add ``Realm``.

         .. step:: (Optional) Build RealmSwift as a Dynamic Framework

            To use the Privacy Manifest supplied by the SDK, build ``RealmSwift``
            as a dynamic framework. If you build ``RealmSwift`` as a static
            framework, you must supply your own Privacy Manifest.

            To build ``RealmSwift`` as a dynamic framework:

            1. In your project :guilabel:`Targets`, select your build target.
            2. Go to the :guilabel:`General` tab.
            3. Expand the :guilabel:`Frameworks and Libraries` element.
            4. For the ``RealmSwift`` framework, change the
               :guilabel:`Embed` option from "Do Not Embed" to "Embed & Sign."

            Now, Xcode builds ``RealmSwift`` dynamically, and can provide the
            SDK-supplied Privacy Manifest.

   .. tab:: CocoaPods
      :tabid: cocoapods

      If you are installing with `CocoaPods <https://guides.cocoapods.org/using/getting-started.html>`__, you need CocoaPods 1.10.1 or later.

      .. procedure::

         .. step:: Update the CocoaPods repositories


            On the command line, run ``pod repo update`` to ensure
            CocoaPods can access the latest available Realm versions.


         .. step:: Initialize CocoaPods for Your Project


            If you do not already have a Podfile for your project,
            run ``pod init`` in the root directory of your project to
            create a Podfile for your project. A Podfile allows you
            to specify project dependencies to CocoaPods.


         .. step:: Add the SDK as a Dependency in Your Podfile


            .. tabs-realm-languages::

              .. tab::
                  :tabid: swift

                  Add the line ``use_frameworks!`` if it is not
                  already there.

                  Add the line ``pod 'RealmSwift', '~>10'`` to your main and test
                  targets.

                  When done, your Podfile should look something like this:

                  .. code-block:: text
                     :emphasize-lines: 8

                     platform :ios, '12.0'

                     target 'MyDeviceSDKProject' do
                       # Comment the next line if you don't want to use dynamic frameworks
                       use_frameworks!

                       # Pods for MyDeviceSDKProject
                       pod 'RealmSwift', '~>10'

                     end

              .. tab::
                  :tabid: objective-c

                  Add the line ``pod 'Realm', '~>10'`` to your main and test
                  targets.

                  Add the line ``use_frameworks!`` as well if it is not
                  already there.

                  When done, your Podfile should look something like this:

                  .. code-block:: text
                     :emphasize-lines: 6, 9, 14

                     # Uncomment the next line to define a global platform for your project
                     # platform :ios, '11.0'

                     target 'MyDeviceSDKProject' do
                     # Comment the next line if you don't want to use dynamic frameworks
                     use_frameworks!

                     # Pods for MyDeviceSDKProject
                     pod 'Realm', '~>10'

                     target 'MyRealmProjectTests' do
                        inherit! :search_paths
                        # Pods for testing
                        pod 'Realm', '~>10'
                     end

                     end


         .. step:: Install the Dependencies


            From the command line, run ``pod install`` to fetch the
            dependencies.


         .. step:: Use the CocoaPods-Generated ``.xcworkspace`` File


            CocoaPods generates an ``.xcworkspace`` file for you. This
            file has all of the dependencies configured. From now on,
            open this file -- not the ``.xcodeproj`` file -- to work
            on your project.

   .. tab:: Carthage
      :tabid: carthage

      If you are installing with `Carthage <https://github.com/Carthage/Carthage#installing-carthage>`__, you need Carthage 0.33 or later.

      .. procedure::

         .. step:: Add the SDK as a Dependency in Your Cartfile


            Add the SDK as a dependency by appending the line ``github
            "realm/realm-swift"`` to your Cartfile.

            You can create a Cartfile or append to an existing one by
            running the following command in your project directory:

            .. code-block:: bash

               echo 'github "realm/realm-swift"' >> Cartfile


         .. step:: Install the Dependencies


            From the command line, run ``carthage update --use-xcframeworks``
            to fetch the dependencies.


         .. step:: Add the Frameworks to Your Project


            Carthage places the built dependencies in the ``Carthage/Build``
            directory.

            Open your project's ``xcodeproj`` file in Xcode. Go to
            the Project Navigator panel and click your application
            name to open the project settings editor. Select the
            :guilabel:`General` tab.

            In Finder, open the ``Carthage/Build/`` directory. Drag the
            ``RealmSwift.xcframework`` and ``Realm.xcframework`` files
            found in that directory to the :guilabel:`Frameworks,
            Libraries, and Embedded Content` section of your
            project's :guilabel:`General` settings.

            .. figure:: /images/carthage-add-frameworks.png
               :alt: Drag the xcframework files into the Xcode project.
               :lightbox:

   .. tab:: Dynamic Framework
      :tabid: dynamic-framework

      .. procedure::

         .. step:: Download and Extract the Framework


            Download the `latest release of the Swift SDK
            <https://github.com/realm/realm-swift/releases>`__ and extract the zip.

         .. step:: Copy Framework(s) Into Your Project

            Drag ``Realm.xcframework`` and ``RealmSwift.xcframework`` (if using)
            to the File Navigator of your Xcode project. Select the
            :guilabel:`Copy items if needed` checkbox and press :guilabel:`Finish`.

      .. tip::

         If using the Objective-C API within a Swift project, we
         recommend you include both Realm Swift and Realm Objective-C in your
         project. Within your Swift files, you can access the Swift API and
         all required wrappers. Using the RealmSwift API in mixed
         Swift/Objective-C projects is possible because the vast majority of
         RealmSwift types are directly aliased from their Objective-C
         counterparts.

Import the SDK
--------------

.. tip:: Atlas Device SDK and Realm

   The SDK uses Realm Core database for device data persistence. When you
   import the Swift SDK, the package names reflect Realm naming.

Add the following line at the top of your source files to use the SDK:

.. tabs-realm-languages::

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/MyRealmApp.snippet.import-realm.m
         :language: objectivec

   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/RealmApp.snippet.import-realm.swift
         :language: swift

.. _ios-app-download-file-size:

App Download File Size
----------------------

The SDK should only add around 5 to 8 MB to your app's download
size. The releases we distribute are significantly larger because they
include support for the iOS, watchOS and tvOS simulators, some debug symbols,
and bitcode, all of which are stripped by the App Store automatically when
apps are downloaded.

Troubleshooting
---------------

If you have build issues after using one of these methods to install
the SDK, see :ref:`our troubleshooting guidelines <ios-resolve-build-issues>`
for information about resolving those issues.

.. _swift-os-support:

OS Support
----------

.. important::

   There are special considerations when using the SDK with
   tvOS. See :ref:`ios-tvos` for more information.

Xcode 15
~~~~~~~~

.. versionchanged:: 10.50.0
   Minimum required Xcode version is 15.1

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :class: index-table

   * - Supported OS
     - Realm
     - Atlas App Services

   * - iOS 12.0+
     - X
     - X

   * - macOS 10.14+
     - X
     - X

   * - tvOS 12.0+
     - X
     - X

   * - watchOS 4.0+
     - X
     -

   * - visionOS 1.0+
     - X
     - X

Xcode 14
~~~~~~~~

.. versionchanged:: 10.50.0
   Removed support for Xcode 14.

Swift SDK version 10.50.0 drops support for Xcode 14. For v10.49.3 and earlier,
these Xcode 14 requirements apply:

- `Xcode <https://developer.apple.com/xcode/>`__ version 14.1 or higher.
- When using Xcode 14, a target of iOS 11.0 or higher, macOS 10.13 or higher, tvOS 11.0 or higher, or watchOS 4.0 or higher.

Swift Concurrency Support
-------------------------

The Swift SDK supports Swift's concurrency-related language features.
For best practices on using the Swift SDK's concurrency features, refer
to the documentation below.

Async/Await Support
~~~~~~~~~~~~~~~~~~~

.. include:: /includes/swift-async-await-support.rst

For more information about async/await support in the Swift SDK, refer
to :ref:`Swift Concurrency: Async/Await APIs <swift-async-await-apis>`.

Actor Support
~~~~~~~~~~~~~

The Swift SDK supports actor-isolated realm instances. For more information,
refer to :ref:`swift-actor-isolated-realm`.

.. _ios-apple-privacy-manifest:

Apple Privacy Manifest
----------------------

.. versionchanged:: 10.49.3
   Build RealmSwift as a dynamic framework to include the Privacy Manifest.

Apple requires apps that use ``RealmSwift`` to provide a privacy manifest
containing details about the SDK's data collection and use practices. The
bundled manifest file must be included when submitting new apps or app updates
to the App Store. For more details about Apple's requirements, refer to
:apple:`Upcoming third-party SDK requirements <support/third-party-SDK-requirements/>`
on the Apple Developer website.

Starting in Swift SDK version 10.46.0, the SDK ships with privacy manifests
for ``Realm`` and ``RealmSwift``. Each package contains its own privacy manifest
with Apple's required API disclosures and the reasons for using those APIs.

You can view the privacy manifests in each package, or in the ``realm-swift``
GitHub repository:

- ``Realm``: `https://github.com/realm/realm-swift/blob/master/Realm/PrivacyInfo.xcprivacy <https://github.com/realm/realm-swift/blob/master/Realm/PrivacyInfo.xcprivacy>`_
- ``RealmSwift``: `https://github.com/realm/realm-swift/blob/master/RealmSwift/PrivacyInfo.xcprivacy <https://github.com/realm/realm-swift/blob/master/RealmSwift/PrivacyInfo.xcprivacy>`_

To include these manifests in a build target that uses ``RealmSwift``, you must
build ``RealmSwift`` as a dynamic framework. For details, refer to the Swift
Package Manager Installation instructions step
**(Optional) Build RealmSwift as a Dynamic Framework**.

The Swift SDK does not include analytics code in builds for the App Store.
The SDK does not log into Atlas on its own behalf.

If you write an app that uses any App Services functionality, such as
:ref:`initializing an App client <ios-init-appclient>` to:

- :ref:`Call an Atlas Function <ios-call-a-function>`
- :ref:`Authenticate and manage users <ios-work-with-users>`
- :ref:`Query MongoDB Atlas <ios-mongodb-remote-access>`
- :ref:`Open a synced database <ios-configure-and-open-a-synced-realm>`

You may need to add additional disclosures to your app's privacy manifest
detailing your data collection and use practices when using these APIs.

For more information, refer to Apple's
:apple:`Privacy manifest files documentation <documentation/bundleresources/privacy_manifest_files>`.
