#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/fundamentals.txt:3
msgid "FAQ: MongoDB Fundamentals"
msgstr "FAQ: MongoDB基础知识"


#: ../source/faq/fundamentals.txt:96
msgid "Does MongoDB support SQL?"

msgstr ""
"假如你没有发现你想要的答案，可以看一下这个页面： :doc:`complete "
"list of FAQs </faq>` 或者把你问题发布到 `MongoDB User Mailing List"
" <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."


#: ../source/faq/fundamentals.txt:105
msgid "Does MongoDB support transactions?"
msgstr ""


#: ../source/faq/fundamentals.txt:107
msgid ""
"MongoDB does not support multi-document transactions. However, MongoDB does "
"provide atomic operations on a single document."
msgstr ""
"MongoDB是一个文档型的数据库。和MySQL类似但是用JSON作为数据模型，而不是关系型表。"
"MongoDB不支持关联或者强事务。但是MongoDB支持二级索引，丰富的查询语法，在文档级别有"
"原子性写操作，读操作有很好的一致性。"

#: ../source/faq/fundamentals.txt:110
msgid ""
"For more details on MongoDB's isolation guarantees and behavior under "
"concurrency, see :doc:`/faq/concurrency`."
msgstr ""
"在部署方面，MongoDB支持Master-Slave的复制方式，支持自动failover和以分布数据"
"方式进行水平扩展。"

#: ../source/faq/fundamentals.txt:116
msgid "Does MongoDB handle caching?"
msgstr ""
"MongoDB使用BSON，一种和JSON类似但是比JSON更高效的二进制对象格式，作为存储方式。"
""


#: ../source/faq/fundamentals.txt:0
msgid "On this page"
msgstr ""


#: ../source/faq/fundamentals.txt:13
msgid "This document answers some common questions about MongoDB."
msgstr ""
"MongoDB数据库用:term:集合 `collections <collection>` 来组织文档，类似于关系型数据库的表。"
"一个集合内可以有一个或多个:term:文档 `documents <document>`。文档的概念类似于关系型数据库的一个行,"
"但是有更完整的信息。每个文档有多个字段，一个字段和关系型的一个列类似。"

#: ../source/faq/fundamentals.txt:16
msgid "What platforms does MongoDB support?"
msgstr ""
"集合和RDBMS的表很不相同。一个集合内的文档可能会有不同的字段和结构。你可以只对某些"
"文档增加一个字段，而不是所有的文档。"


#: ../source/faq/fundamentals.txt:18
msgid ""
"For the list of supported platforms, see :ref:`prod-notes-supported-"
"platforms`."
msgstr ""

#: ../source/faq/fundamentals.txt:22
msgid "How does a collection differ from a table?"
msgstr ""


#: ../source/faq/fundamentals.txt:24
msgid ""
"Instead of tables, a MongoDB database stores its data in :term:`collections "
"<collection>`. A collection holds one or more :ref:`BSON documents <bson-"
"document-format>`. Documents are analogous to records or rows in a "
"relational database table. Each document has :ref:`one or more fields "
"<document-structure>`; fields are similar to the columns in a relational "
"database table."
msgstr ""
"MongoDB使用动态模式。你可以建立一个没有预定义模式的集合。你可以通过直接在文档"
"内增加或删除字段的方式修改文档的结构。文档在一个集合内不需要有相同的字段集。"

#: ../source/faq/fundamentals.txt:31
msgid ":doc:`/reference/sql-comparison`, :doc:`/introduction`"
msgstr ""
"在实际使用中，一般一个集合内的数据多半会有相同或者类似的结构。但是这个不是一个必要的条件。"
"MongoDB灵活的数据模式意味着模式转换和修改非常简单。你很少需要写个脚本来执行 \"alter table\""
"类型的DDL操作。这一点对于敏捷式开发有非常好的帮助。"



#: ../source/faq/fundamentals.txt:34
msgid "How do I create a database and a collection?"
msgstr ""


#: ../source/faq/fundamentals.txt:36
msgid ""
"If a database does not exist, MongoDB creates the database when you first "
"store data for that database."
msgstr ""
"MongoDB支持几乎所有常用的编程语言。参见:ecosystem:`latest list of drivers </drivers>` "


#: ../source/faq/fundamentals.txt:39
msgid ""
"If a collection does not exist, MongoDB creates the collection when you "
"first store data for that collection. [#explicit-creation]_"
msgstr ""


#: ../source/faq/fundamentals.txt:42
msgid ""
"As such, you can switch to a non-existent database (``use <dbname>``) and "
"perform the following operation:"
msgstr ""

#: ../source/faq/fundamentals.txt:52
msgid ""
"The ``insert`` operation creates both the database ``myNewDB`` and the "
"collection ``myNewCollection1`` if they do not already exist."
msgstr ""


#: ../source/faq/fundamentals.txt:55
msgid ""

"The ``createIndex`` operation, which occurs after the ``myNewDB`` has been "
"created, creates the index and the collection ``myNewCollection2`` if the "
"collection does not exist. If ``myNewDb`` did not exist, the ``createIndex``"
" operation would have also created the ``myNewDB``."
msgstr ""


#: ../source/faq/fundamentals.txt:62
msgid ""
"You can also create a collection explicitly using "
":method:`db.createCollection` if you want to specify specific options, such "
"as maximum size or document validation rules."
msgstr ""


#: ../source/faq/fundamentals.txt:69
msgid "How do I define or alter the collection schema?"
msgstr ""


#: ../source/faq/fundamentals.txt:71
msgid ""
"You do not need to specify a schema for a collection in MongoDB. Although it"
" is common for the documents in a collection to have a largely homogeneous "
"structure, it is not a requirement; i.e. documents in a single collection do"
" not need to have the same set of fields. The data type for a field can "
"differ across documents in a collection as well."
msgstr ""
"MongoDB的定位是一种通用型数据库，它可以使用在很多应用场景下面。如内容管理，"
"移动应用，游戏，电商，分析，存档和日志等等"

#: ../source/faq/fundamentals.txt:78
msgid ""
"To change the structure of the documents in a collection, update the "
"documents to the new structure. For instance, add new fields, remove "
"existing ones, or update the value of a field to a new type."
msgstr ""
"MongoDB不适合那些需要使用SQL，关联和多文档事务的应用。"

#: ../source/faq/fundamentals.txt:84
msgid ""
"Starting in MongoDB 3.2, however, you can enforce :doc:`document validation "
"rules </core/document-validation>` for a collection during update and insert"
" operations."
msgstr ""

#: ../source/faq/fundamentals.txt:88
msgid ""
"Some collection properties, such as specifying a maximum size, can be "
"specified during the explicit creation of a collection and be modified. See "
":method:`db.createCollection` and :dbcommand:`collMod`. If you are not "
"specifying these properties, you do not need to explicitly create the "
"collection since MongoDB creates new collections when you first store data "
"for the collections."
msgstr ""
"举例来说，你可以把相关数据内嵌在一个文档的数组字段或者嵌套文档内，对这些"
"数据的更新可以在一个原子操作内完成。在关系型数据库中同样的数据可能分布在"
"不同的表和列内，在那样的情况下需要强事务支持来保证那些数据更新的原子性。"

#: ../source/faq/fundamentals.txt:98
msgid ""
"No. However, MongoDB does support a rich query language of its own. For "
"examples on using MongoDB's query language, see :doc:`/crud`"
msgstr ""
"MongoDB允许客户端读取落盘之前文档的修改，不管你的写安全机制和恢复日志设置如何。"
"正因如此，应用程序可能会观察到两种不同的行为："

#: ../source/faq/fundamentals.txt:102
msgid ":doc:`/reference/sql-comparison`"
msgstr ""
"MongoDB需要很多内存么？"

#: ../source/faq/fundamentals.txt:118
msgid ""
"Yes. MongoDB keeps most recently used data in RAM. If you have created "
"indexes for your queries and your working data set fits in RAM, MongoDB "
"serves all queries from memory."
msgstr ""
"不一定。MongoDB可以在一个内存较小的机器上运行。"

#: ../source/faq/fundamentals.txt:122
msgid ""
"MongoDB does not cache the query results in order to return the cached "
"results for identical queries."
msgstr ""
"MongoDB 会使用系统所有可用内存作为它的缓存。 系统监控会显示MongoDB使用很多内存，但是这些内存的使用"
"是动态的。如果另外一个进程突然需要服务器一半的内存，MongoDB会把内存让给其他进程。"

#: ../source/faq/fundamentals.txt:125
msgid ""
"For more information on MongoDB and memory use, see :ref:`WiredTiger and "
"Memory Use <wiredtiger-RAM>` and :ref:`MMAPv1 and Memory Use <mmapv1-RAM>`."
msgstr ""
"从技术上来说，操作系统的虚拟内存管理模块负责管理MongoDB的内存使用。这意味着MongoDB可以用到"
"系统所有的可用内存，并在必要的时候会使用交换内存。部署的时候尽量要使用足够的内存来装下工作集数据(热数据）。"


#: ../source/faq/fundamentals.txt:132
msgid "How does MongoDB address SQL or Query injection?"
msgstr ""
":doc:`/faq/diagnostics` 更多关于MongoDB内存使用的问题。"

#: ../source/faq/fundamentals.txt:135
msgid "BSON"
msgstr ""

#: ../source/faq/fundamentals.txt:137
msgid ""
"As a client program assembles a query in MongoDB, it builds a BSON object, "
"not a string. Thus traditional SQL injection attacks are not a problem. More"
" details and some nuances are covered below."
msgstr ""
"MongoDB 不支持配置缓存。MongoDB会通过内存映射的技术使用所有可用内存。这一点"
"和操作系统处理文件系统缓存原理是一致的。"

#: ../source/faq/fundamentals.txt:141
msgid ""
"MongoDB represents queries as :term:`BSON` objects. Typically :doc:`client "
"libraries </applications/drivers>` provide a convenient, injection free, "
"process to build these objects. Consider the following C++ example:"
msgstr ""
"在MongoDB里面是否需要为应用程序缓存单独加一个缓存层？"

#: ../source/faq/fundamentals.txt:151
msgid ""
"Here, ``my_query`` then will have a value such as ``{ name : \"Joe\" }``. If"
" ``my_query`` contained special characters, for example ``,``, ``:``, and "
"``{``, the query simply wouldn't match any documents. For example, users "
"cannot hijack a query and convert it to a delete."
msgstr ""
"不需要。在MongoDB里面，一个文档的结构和其在应用程序内存里的结构是相似的。这意味着数据库"
"里存储的已经是一种可以直接使用的格式。这样在应用程序端就不再需要一个单独的缓冲层。"
""


#: ../source/faq/fundamentals.txt:158
msgid "JavaScript"
msgstr ""


#: ../source/includes/fact-disable-javascript-with-noscript.rst:1
msgid ""
"You can disable all server-side execution of JavaScript, by passing the "
":option:`--noscripting <mongod --noscripting>` option on the command line or"
" setting :setting:`security.javascriptEnabled` in a configuration file."
msgstr ""
"是的。MongoDB会把最近所用的数据保持在内存里。如果你的索引数据和你的工作集数据小于内存的大小，"
"那么MongoDB就可以从内存里直接处理你的查询。"

#: ../source/faq/fundamentals.txt:164
msgid ""
"All of the following MongoDB operations permit you to run arbitrary "
"JavaScript expressions directly on the server:"
msgstr ""
"MongoDB 没有查询缓存。MongoDB会直接从索引和数据文件里读取数据来处理查询请求。"


#: ../source/faq/fundamentals.txt:167
msgid ":query:`$where`"
msgstr ""

#: ../source/faq/fundamentals.txt:168
msgid ":dbcommand:`mapReduce`"

msgstr ""
"虽然日志落盘几乎是实时的，但是MongoDB的数据落盘是异步的。MongoDB有可能会等到60秒才把数据"
"写入数据文件。这个不影响数据持久性，因为日志里面有足够的信息用来做宕机时候的恢复动作。数据"
"落盘间隔可以通过 :setting:`~storage.syncPeriodSecs` 设置来调整"


#: ../source/faq/fundamentals.txt:169
msgid ":dbcommand:`group`"
msgstr ""


#: ../source/faq/fundamentals.txt:171
msgid ""

"You must exercise care in these cases to prevent users from submitting "
"malicious JavaScript."
msgstr ""


#: ../source/faq/fundamentals.txt:174
msgid ""
"Fortunately, you can express most queries in MongoDB without JavaScript and "
"for queries that require JavaScript, you can mix JavaScript and non-"
"JavaScript in a single query. Place all the user-supplied fields directly in"
" a :term:`BSON` field and pass JavaScript code to the :query:`$where` field."
msgstr ""

#: ../source/faq/fundamentals.txt:180
msgid ""
"If you need to pass user-supplied values in a :query:`$where` clause, you "
"may escape these values with the ``CodeWScope`` mechanism. When you set "
"user-submitted values as variables in the scope document, you can avoid "
"evaluating them on the database server."
msgstr ""


#~ msgid ""
#~ "This document addresses basic high level questions about MongoDB and its "
#~ "use."
#~ msgstr ""

#~ msgid ""
#~ "If you don't find the answer you're looking for, check the :doc:`complete "
#~ "list of FAQs </faq>` or post your question to the `MongoDB User Mailing List"
#~ " <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
#~ msgstr ""

#~ msgid "What kind of database is MongoDB?"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB is a :term:`document`\\-oriented DBMS. Think of MySQL but with "
#~ ":term:`JSON`-like objects comprising the data model, rather than RDBMS "
#~ "tables. Significantly, MongoDB supports neither joins nor transactions. "
#~ "However, it features secondary indexes, an expressive query language, atomic"
#~ " writes on a per-document level, and fully-consistent reads."
#~ msgstr ""

#~ msgid ""
#~ "Operationally, MongoDB features master-slave replication with automated "
#~ "failover and built-in horizontal scaling via automated range-based "
#~ "partitioning."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB uses :term:`BSON`, a binary object format similar to, but more "
#~ "expressive than :term:`JSON`."
#~ msgstr ""

#~ msgid "Do MongoDB databases have tables?"
#~ msgstr ""

#~ msgid ""
#~ "Instead of tables, a MongoDB database stores its data in :term:`collections "
#~ "<collection>`, which are the rough equivalent of RDBMS tables. A collection "
#~ "holds one or more :term:`documents <document>`, which corresponds to a "
#~ "record or a row in a relational database table, and each document has one or"
#~ " more fields, which corresponds to a column in a relational database table."
#~ msgstr ""

#~ msgid ""
#~ "Collections have important differences from RDBMS tables. Documents in a "
#~ "single collection may have a unique combination and set of fields. Documents"
#~ " need not have identical fields. You can add a field to some documents in a "
#~ "collection without adding that field to all documents in the collection."
#~ msgstr ""

#~ msgid "See"
#~ msgstr ""

#~ msgid "Do MongoDB databases have schemas?"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB uses dynamic schemas. You can create collections without defining "
#~ "the structure, i.e. the fields or the types of their values, of the "
#~ "documents in the collection. You can change the structure of documents "
#~ "simply by adding new fields or deleting existing ones. Documents in a "
#~ "collection need not have an identical set of fields."
#~ msgstr ""

#~ msgid ""
#~ "In practice, it is common for the documents in a collection to have a "
#~ "largely homogeneous structure; however, this is not a requirement. MongoDB's"
#~ " flexible schemas mean that schema migration and augmentation are very easy "
#~ "in practice, and you will rarely, if ever, need to write scripts that "
#~ "perform \"alter table\" type operations, which simplifies and facilitates "
#~ "iterative software development with MongoDB."
#~ msgstr ""

#~ msgid "What languages can I use to work with MongoDB?"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB :term:`client drivers <driver>` exist for all of the most popular "
#~ "programming languages, and many other ones. See the :ecosystem:`latest list "
#~ "of drivers </drivers>` for details."
#~ msgstr ""

#~ msgid ":doc:`/applications/drivers`."
#~ msgstr ""

#~ msgid "No."
#~ msgstr ""

#~ msgid ""
#~ "However, MongoDB does support a rich, ad-hoc query language of its own."
#~ msgstr ""

#~ msgid ":doc:`/reference/operator`"
#~ msgstr ""

#~ msgid "What are typical uses for MongoDB?"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB has a general-purpose design, making it appropriate for a large "
#~ "number of use cases. Examples include content management systems, mobile "
#~ "applications, gaming, e-commerce, analytics, archiving, and logging."
#~ msgstr ""

#~ msgid ""
#~ "Do not use MongoDB for systems that require SQL, joins, and multi-object "
#~ "transactions."
#~ msgstr ""

#~ msgid "Does MongoDB require a lot of RAM?"
#~ msgstr ""

#~ msgid ""
#~ "Not necessarily. It's certainly possible to run MongoDB on a machine with a "
#~ "small amount of free RAM."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB automatically uses all free memory on the machine as its cache. "
#~ "System resource monitors show that MongoDB uses a lot of memory, but its "
#~ "usage is dynamic. If another process suddenly needs half the server's RAM, "
#~ "MongoDB will yield cached memory to the other process."
#~ msgstr ""

#~ msgid ""
#~ "Technically, the operating system's virtual memory subsystem manages "
#~ "MongoDB's memory. This means that MongoDB will use as much free memory as it"
#~ " can, swapping to disk as needed. Deployments with enough memory to fit the "
#~ "application's working data set in RAM will achieve the best performance."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`/faq/diagnostics` for answers to additional questions about MongoDB "
#~ "and Memory use."
#~ msgstr ""

#~ msgid "How do I configure the cache size for MMAPv1?"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB has no configurable cache for MMAPv1 storage engine. MongoDB uses "
#~ "all *free* memory on the system automatically by way of memory-mapped files."
#~ " Operating systems use the same approach with their file system caches."
#~ msgstr ""

#~ msgid ""
#~ "For the WiredTiger storage engine, you can specify the maximum size of the "
#~ "cache that WiredTiger will use for all data. See "
#~ ":setting:`storage.wiredTiger.engineConfig.cacheSizeGB` and "
#~ ":option:`--wiredTigerCacheSizeGB`."
#~ msgstr ""

#~ msgid ""
#~ "Does MongoDB require a separate caching layer for application-level caching?"
#~ msgstr ""

#~ msgid ""
#~ "No. In MongoDB, a document's representation in the database is similar to "
#~ "its representation in application memory. This means the database already "
#~ "stores the usable form of data, making the data usable in both the "
#~ "persistent store and in the application cache. This eliminates the need for "
#~ "a separate caching layer in the application."
#~ msgstr ""

#~ msgid ""
#~ "This differs from relational databases, where caching data is more "
#~ "expensive. Relational databases must transform data into object "
#~ "representations that applications can read and must store the transformed "
#~ "data in a separate cache: if these transformation from data to application "
#~ "objects require joins, this process increases the overhead related to using "
#~ "the database which increases the importance of the caching layer."
#~ msgstr ""

#~ msgid ""
#~ "Yes. MongoDB keeps all of the most recently used data in RAM. If you have "
#~ "created indexes for your queries and your working data set fits in RAM, "
#~ "MongoDB serves all queries from memory."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB does not implement a query cache: MongoDB serves all queries "
#~ "directly from the indexes and/or data files."
#~ msgstr ""

#~ msgid "Are writes written to disk immediately, or lazily?"
#~ msgstr ""

#~ msgid ""
#~ "Writes are physically written to the :doc:`journal </core/journaling>` "
#~ "within 100 milliseconds, by default. At that point, the write is \"durable\""
#~ " in the sense that after a pull-plug-from-wall event, the data will still be"
#~ " recoverable after a hard restart. See "
#~ ":setting:`~storage.journal.commitIntervalMs` for more information on the "
#~ "journal commit window."
#~ msgstr ""

#~ msgid ""
#~ "While the journal commit is nearly instant, MongoDB writes to the data files"
#~ " lazily. MongoDB may wait to write data to the data files for as much as one"
#~ " minute by default. This does not affect durability, as the journal has "
#~ "enough information to ensure crash recovery. To change the interval for "
#~ "writing to the data files, see :setting:`~storage.syncPeriodSecs`."
#~ msgstr ""

#~ msgid "What language is MongoDB written in?"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB is implemented in C++. :term:`Drivers <driver>` and client libraries"
#~ " are typically written in their respective languages, although some drivers "
#~ "use C extensions for better performance."
#~ msgstr ""

#~ msgid "What are the limitations of 32-bit versions of MongoDB?"
#~ msgstr ""

#~ msgid ""
#~ "Commercial support is no longer provided for MongoDB on 32-bit platforms "
#~ "(Linux and Windows). See :ref:`3.0-compatibility-platform-support`."
#~ msgstr ""

#~ msgid ""
#~ "32-bit versions of MongoDB do **not** support the WiredTiger storage engine."
#~ msgstr ""

#~ msgid ""
#~ "When running a 32-bit build of MongoDB, the total storage size for the "
#~ "server, including data and indexes, is 2 gigabytes. For this reason, do not "
#~ "deploy MongoDB to production on 32-bit machines."
#~ msgstr ""

#~ msgid ""
#~ "If you're running a 64-bit build of MongoDB, there's virtually no limit to "
#~ "storage size. For production deployments, 64-bit builds and operating "
#~ "systems are strongly recommended."
#~ msgstr ""

#~ msgid ""
#~ "\"`Blog Post: 32-bit Limitations <http://blog.mongodb.org/post/137788967/32"
#~ "-bit-limitations>`_\""
#~ msgstr ""

#~ msgid ""
#~ "32-bit builds disable :term:`journaling <journal>` by default because "
#~ "journaling further limits the maximum amount of data that the database can "
#~ "store."
#~ msgstr ""

