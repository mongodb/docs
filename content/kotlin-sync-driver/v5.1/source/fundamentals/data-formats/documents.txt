.. _kotlin-document-format:

=========
Documents
=========

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use **documents** in the
MongoDB Kotlin driver.

A MongoDB document is a data structure that contains key/value fields in
binary JSON (BSON) format. You can use documents and the data they contain
in their fields to store data as well as issue commands or queries in
MongoDB.

For more information on the terminology, structure, and limitations of documents,
read our page on :manual:`Documents </core/document>` in the MongoDB manual.

The MongoDB Kotlin driver and BSON library include the following classes that help you
access and manipulate the BSON data in documents:

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 20 20 20 10

   * - Name
     - Package
     - Implements Map
     - Recommended Usage

   * - ``Document``
     - ``org.bson``
     - Yes, implements ``Map<String, Object>``
     - When you want a flexible and concise data representation.

   * - ``BsonDocument``
     - ``org.bson``
     - Yes, implements ``Map<String, BsonValue>``
     - When you need a type-safe API.

   * - ``JsonObject``
     - ``org.bson.json``
     - No
     - When you only want to work with JSON strings.

While you can use any of these classes in your application, we recommend
that you use the ``Document`` class since it can concisely represent
dynamically structured documents of any complexity. It implements the
``Map<String, Object>`` interface which enables it to use loosely-typed
values.

Document
--------

The ``Document`` class offers a flexible representation of a BSON document.
You can access and manipulate fields using Kotlin types from the standard
library with this class. See the following table for mappings between
frequently-used BSON and Kotlin types:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - BSON type
     - Kotlin type
   * - Array
     - ``kotlin.collections.List``
   * - Binary
     - ``org.bson.types.Binary``
   * - Boolean
     - ``kotlin.Boolean``
   * - Date
     - ``java.time.LocalDateTime``
   * - Document
     - ``org.bson.Document``
   * - Double
     - ``kotlin.Double``
   * - Int32
     - ``kotlin.Int``
   * - Int64
     - ``kotlin.Long``
   * - Null
     - ``null``
   * - ObjectId
     - ``org.bson.types.ObjectId``
   * - String
     - ``kotlin.String``

In the following code snippet, we show how to instantiate and build a sample
``Document`` instance representing a document containing several
different field types:

.. literalinclude:: /examples/generated/DocumentsTest.snippet.create-document.kt
   :language: kotlin

To insert this document into a collection, instantiate a collection
using the ``getCollection()`` method and call the :ref:`insertOne
<insert-single-document>` operation as follows:

.. literalinclude:: /examples/generated/DocumentsTest.snippet.insert-document.kt
   :language: kotlin

Once you perform a successful insert, you can retrieve the sample document
data from the collection using the following code:

.. io-code-block::
   :copyable: true

   .. input:: /examples/generated/DocumentsTest.snippet.retrieve-document.kt
      :language:  kotlin

   .. output::
      :language: none

      _id: 5fb5fad05f734e3794741a35, name: Gabriel García Márquez, dateOfDeath: Thu Apr 17 00:00:00 EDT 2014
      title: One Hundred Years of Solitude, yearPublished: 1967
      title: Chronicle of a Death Foretold, yearPublished: 1981
      title: Love in the Time of Cholera, yearPublished: 1985

.. tip::

   The preceding code sample uses helper methods that check the returned type
   and throw an exception if it is unable to cast the field value.
   You can call the ``get()`` method to retrieve values as type
   ``Object`` and to skip type checking.

For more information on retrieving and manipulating MongoDB data, see our
:doc:`CRUD guide </fundamentals/crud>`.

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- `Document <{+api+}/apidocs/bson/org/bson/Document.html>`__
- `getCollection() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-database/get-collection.html>`__
- `get() <{+api+}/apidocs/bson/org/bson/Document.html#get(java.lang.Object)>`__

BsonDocument
------------

The ``BsonDocument`` class provides a type-safe API to access and manipulate
a BSON document. You need to specify the BSON type from the BSON
library for each field. See the following table for mappings between
frequently-used BSON and BSON library types:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - BSON type
     - BSON library type
   * - Array
     - ``org.bson.BsonArray``
   * - Binary
     - ``org.bson.BsonBinary``
   * - Boolean
     - ``org.bson.Boolean``
   * - Date (long value)
     - ``org.bson.BsonDateTime``
   * - Document
     - ``org.bson.BsonDocument``
   * - Double
     - ``org.bson.BsonDouble``
   * - Int32
     - ``org.bson.BsonInt32``
   * - Int64
     - ``org.bson.BsonInt64``
   * - Null
     - ``org.bson.BsonNull``
   * - ObjectId
     - ``org.bson.BsonObjectId``
   * - String
     - ``org.bson.BsonString``

In the following code snippet, we show how to instantiate and build a sample
``BsonDocument`` instance representing a document containing several
different field types:

.. literalinclude:: /examples/generated/DocumentsTest.snippet.create-bson-document.kt
   :language: kotlin

To insert this document into a collection, instantiate a collection
using the ``getCollection()`` method specifying the ``BsonDocument``
class as the ``documentClass`` parameter. Then, call the
:ref:`insertOne <insert-single-document>` operation as follows:

.. literalinclude:: /examples/generated/DocumentsTest.snippet.insert-bson-document.kt
   :language: kotlin

Once you perform a successful insert, you can retrieve the sample document
data from the collection using the following code:

.. io-code-block::
   :copyable: true

   .. input:: /examples/generated/DocumentsTest.snippet.retrieve-bson-document.kt
      :language:  kotlin

   .. output::
      :language: none

      _id: 5fb5fad05f734e3794741a35, name: Gabriel García Márquez, dateOfDeath: 2014-04-17T00:00
      title: One Hundred Years of Solitude, yearPublished: 1967
      title: Chronicle of a Death Foretold, yearPublished: 1981
      title: Love in the Time of Cholera, yearPublished: 1985

.. tip::

   The preceding code sample uses helper methods that check the returned type
   and throw a ``BsonInvalidOperationException`` if it is unable to cast
   the field value. You can call the ``get()`` method to retrieve values as type
   ``BsonValue`` and to skip type checking.

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- `BsonDocument <{+api+}/apidocs/bson/org/bson/BsonDocument.html>`__
- `getCollection() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-database/get-collection.html>`__
- `BsonInvalidOperationException <{+api+}/apidocs/bson/org/bson/BsonInvalidOperationException.html>`__
- `get() <{+api+}/apidocs/bson/org/bson/BsonDocument.html#get(java.lang.Object)>`__
- `BsonValue <{+api+}/apidocs/bson/org/bson/BsonValue.html>`__

JsonObject
----------

The ``JsonObject`` class acts as a wrapper for JSON strings.
If you only want to work with JSON data, you can use ``JsonObject``
to avoid unnecessary data conversion to a ``Map`` object.

By default, ``JsonObject`` stores :manual:`Extended JSON </reference/mongodb-extended-json/>`.
You can customize the format of JSON in ``JsonObject`` by specifying a
``JsonObjectCodec`` and passing it a ``JsonWriterSettings``
object. For more information on JSON formats, see
our :doc:`Extended JSON guide </fundamentals/data-formats/document-data-format-extended-json/>`.

In the following code snippet, we show how to instantiate a sample ``JsonObject``
instance wrapping an Extended JSON string containing different types of key value pairs:

.. literalinclude:: /examples/generated/DocumentsTest.snippet.create-json-object.kt
   :language: kotlin

To insert this document into a collection, instantiate a collection
using the ``getCollection()`` method specifying the ``JsonObject`` class
as the ``documentClass`` parameter. Then, call the
:ref:`insertOne <insert-single-document>` operation as follows:

.. literalinclude:: /examples/generated/DocumentsTest.snippet.insert-json-object.kt
   :language: kotlin

Once you perform a successful insert, you can retrieve the sample JSON data from the
collection. While you can use any class that extends ``Bson`` to specify your query,
here is how to query your data using a ``JsonObject``:

.. io-code-block::
   :copyable: true

   .. input:: /examples/generated/DocumentsTest.snippet.retrieve-json-object.kt
      :language:  kotlin


   .. output::
      :language: none

      query result in extended json format: {"_id": {"$oid": "6035210f35bd203721c3eab8"}, "name": "Gabriel García Márquez", "dateOfDeath": {"$date": "2014-04-17T04:00:00Z"}, "novels": [{"title": "One Hundred Years of Solitude", "yearPublished": 1967}, {"title": "Chronicle of a Death Foretold", "yearPublished": 1981}, {"title": "Love in the Time of Cholera", "yearPublished": 1985}]}

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- `JsonObject <{+api+}/apidocs/bson/org/bson/json/JsonObject.html>`__
- `JsonObjectCodec <{+api+}/apidocs/bson/org/bson/codecs/JsonObjectCodec.html>`__
- `JsonWriterSettings <{+api+}/apidocs/bson/org/bson/json/JsonWriterSettings.html>`__
- `getCollection() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-database/get-collection.html>`__

Summary
-------

In this guide, we covered the following topics on classes you can use to
work with BSON data:

- Described Kotlin classes you can use to work with MongoDB documents and
  why you might prefer one over the other.
- Provided usage examples for each class on building documents containing
  multiple types, inserting them into a collection, and
  retrieving/accessing their typed fields.
