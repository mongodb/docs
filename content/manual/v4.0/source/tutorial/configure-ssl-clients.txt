.. _ssl-clients:

=================================
TLS/SSL Configuration for Clients
=================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Clients must have support for TLS/SSL to connect to a
:binary:`~bin.mongod` or a :binary:`~bin.mongos` instance that require
:doc:`TLS/SSL connections</tutorial/configure-ssl>`.

.. note::

   - The *Linux 64-bit legacy x64* binaries of MongoDB do **not** include
     support for TLS/SSL.

   - .. include:: /includes/fact-tls-1.0.rst

.. important::

   .. include:: /includes/extracts/security-prereq-configure-ssl-clients.rst

.. |binary| replace:: MongoDB

.. _mongo-shell-ssl-connect:

``mongo`` Shell Configuration
-----------------------------

The :binary:`~bin.mongo` shell provides various :ref:`mongo-shell-ssl`
settings, including:

.. list-table::
   :header-rows: 1
   :widths: 30 70 

   * - Option
     - Notes

   * - :option:`--ssl <mongo --ssl>`
     - Enables TLS/SSL connection.

   * - :option:`--sslPEMKeyFile <mongo --sslPEMKeyFile>`

     - Specifies the :file:`.pem` file that contains the
       :binary:`~bin.mongo` shell's certificate and key to present to
       the :binary:`~bin.mongod` or :binary:`~bin.mongos` instance.

   * - :option:`--sslPEMKeyPassword <mongo --sslPEMKeyPassword>`

     - If the :binary:`~bin.mongo` shell's :file:`.pem` file is encrypted.

   * - :option:`--sslCAFile <mongo --sslCAFile>`

     - Specifies the Certificate Authority (CA) :file:`.pem` file for
       verification of the certificate presented by the
       :binary:`~bin.mongod` or the :binary:`~bin.mongos` instance.

   * - :option:`--sslCertificateSelector <mongo --sslCertificateSelector>`
   
     - If running on Windows or macOS, instead of specifying a
       certificate with :option:`--sslPEMKeyFile <mongo
       --sslPEMKeyFile>`, use a certificate from the system certificate
       store. (*New in version 4.0*)

For a complete list of the :binary:`~bin.mongo` shell's TLS/SSL settings, see
:ref:`mongo-shell-ssl`.

For TLS/SSL connections, the :binary:`~bin.mongo` shell validates the
certificate presented by the :binary:`~bin.mongod` or
:binary:`~bin.mongos` instance:

- The :binary:`~bin.mongo` shell verifies that the certificate is from
  the specified Certificate Authority (:option:`--sslCAFile <mongo
  --sslCAFile>`). If the certificate is not from the specified CA, the
  :binary:`~bin.mongo` shell will fail to connect.

- .. include:: /includes/extracts/ssl-facts-mongo-ssl-hostname-verification.rst

  To connect a :binary:`~bin.mongo` shell to a :binary:`~bin.mongod` or
  :binary:`~bin.mongos` that requires TLS/SSL, specify the
  :option:`--host <mongo --host>` option or use a :doc:`connection
  string </reference/connection-string>`.

.. _ssl-client-connection-only:

Connect to MongoDB Instance Using Encryption
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To connect to a :binary:`~bin.mongod` or :binary:`~bin.mongos` instance
that requires :ref:`encrypted communication <ssl-mongod-ssl-cert-key>`,
start :binary:`~bin.mongo` shell with:

- :option:`--ssl <mongo --ssl>`

- :option:`--host <mongo --host>` and :option:`--sslCAFile <mongo
  --sslCAFile>` to validate the server certificate.

For example, consider a :binary:`~bin.mongod` instance running on
``hostname.example.com`` with the following options:

.. code-block:: sh

   mongod --sslMode requireSSL --sslPEMKeyFile <pem> 

To connect to the instance, start a :binary:`~bin.mongo` shell with the
following options:

.. code-block:: sh

   mongo --ssl --host hostname.example.com --sslCAFile /etc/ssl/ca.pem

The :binary:`~bin.mongo` shell verifies the certificate presented by
the :binary:`~bin.mongod` instance against the specified hostname and
the CA file.

.. _mongo-connect-require-client-certificates-ssl:

Connect to MongoDB Instance that Requires Client Certificates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To connect to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that requires
:ref:`CA-signed client certificates
<ssl-mongod-ca-signed-ssl-cert-key>`, start the :binary:`~bin.mongo` shell
with:

- :option:`--ssl <mongo --ssl>`

- :option:`--host <mongo --host>` and the :option:`--sslCAFile <mongo
  --sslCAFile>` to validate the server certificate,

- :option:`--sslPEMKeyFile <mongo --sslPEMKeyFile>` option to specify
  the client certificate to present to the server.

For example, consider a :binary:`~bin.mongod` instance running on
``hostname.example.com`` with the following options:

.. code-block:: sh

   mongod --sslMode requireSSL --sslPEMKeyFile /etc/ssl/mongodb.pem --sslCAFile /etc/ssl/ca.pem

To connect to the instance, start a :binary:`~bin.mongo` shell with the
following options:

.. code-block:: sh

   mongo --ssl --host hostname.example.com --sslPEMKeyFile /etc/ssl/client.pem --sslCAFile /etc/ssl/ca.pem

On Windows and macOS,
   You can also use the :option:`--sslCertificateSelector <mongo
   --sslCertificateSelector>` option to specify the client certificate
   from the system certificate store instead of using
   :option:`--sslPEMKeyFile <mongo --sslPEMKeyFile>`. If the CA file
   is also in the system certificate store, you can omit the
   :option:`--sslCAFile <mongo --sslCAFile>` option as well. For
   example, to use a certificate with the ``CN`` (Common Name) of
   ``my.client.server`` and the CA file from the system certificate
   store on macOS, start a :binary:`~bin.mongo` shell with the
   following options:

   .. code-block:: sh

      mongo --ssl  --host hostname.example.com --sslCertificateSelector subject=my.client.server 

Avoid Use of ``--sslAllowInvalidCertificates`` Option
-----------------------------------------------------

.. include:: /includes/extracts/ssl-facts-invalid-cert-warning-clients.rst

|atlas|, |MMS| and Ops Manager Monitoring Agent
-----------------------------------------------

|atlas| uses TLS/SSL to encrypt the connections to your databases.

The |MMS| and Ops Manager Monitoring agents use encrypted communication
to gather its statistics. Because the agents already encrypt
communications to the |MMS|/Ops Manager servers, this is just a matter
of enabling TLS/SSL support in |MMS|/Ops Manager on a per host basis.

For more information, see:

- `MongoDB Atlas documentation <https://docs.atlas.mongodb.com/setup-cluster-security/>`_

- |mms-docs| 

- :opsmgr:`MongoDB Ops Manager documentation </>`.

.. include:: /includes/replacement-mms.rst

MongoDB Drivers
---------------

The MongoDB Drivers support encrypted communication. See:

- `C Driver <http://api.mongodb.org/c/current/advanced-connections.html>`_
- `C++ Driver <https://mongodb.github.io/mongo-cxx-driver/>`_
- `C# Driver <http://mongodb.github.io/mongo-csharp-driver/2.0/reference/driver/ssl/>`_
- `Java Driver <http://mongodb.github.io/mongo-java-driver/3.0/driver/reference/connecting/ssl/>`_
- `Node.js Driver <http://mongodb.github.io/node-mongodb-native/2.0/tutorials/enterprise_features/>`_
- `Perl Driver <https://metacpan.org/pod/MongoDB::MongoClient#ssl>`_
- `PHP Driver <https://php.net/manual/en/mongodb-driver-manager.construct.php>`_
- `Python Driver <http://api.mongodb.org/python/current/examples/tls.html>`_
- `Ruby Driver <https://docs.mongodb.com/ecosystem/tutorial/ruby-driver-tutorial/#mongodb-x509-mechanism>`_
- `Scala Driver <http://mongodb.github.io/mongo-scala-driver/1.1/reference/connecting/ssl/>`_

.. _mongodb-tools-support-ssl:

MongoDB Tools
-------------

Various MongoDB utility programs support encrypted communication. These tools include:

- :binary:`~bin.mongodump`
- :binary:`~bin.mongoexport`
- :binary:`~bin.mongofiles`
- :binary:`~bin.mongoimport`
- :binary:`~bin.mongorestore`
- :binary:`~bin.mongostat`
- :binary:`~bin.mongotop`

To use encrypted communication with these tools, use the same TLS/SSL options as
the :binary:`~bin.mongo` shell. See :ref:`mongo-shell-ssl-connect`.

.. seealso:: :doc:`/tutorial/configure-ssl`