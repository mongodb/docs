============================
Terminate Running Operations
============================

.. default-domain:: mongodb

Available Procedures
--------------------

``maxTimeMS``
~~~~~~~~~~~~~

.. versionadded:: 2.5.4

The :method:`~cursor.maxTimeMS()` method sets a time limit for an
operation. When the operation reaches the specified time limit,
MongoDB interrupts the operation at the next :term:`interrupt point`.

Terminate a Query
`````````````````

From the :program:`mongo` shell, use the following method to set a time limit of
30 milliseconds for this query:

.. code-block:: javascript

   db.location.find({"town": { "$regex": "(Pine Bush)", "$options": 'i' }}).maxTimeMS(30)

Terminate a Command
```````````````````

Given a query that uses the :method:`~db.runCommand()` command to
return each distinct ``collection`` field that has a ``city`` key:

.. code-block:: javascript

   db.runCommand( { distinct: "collection", key: "city" } )

From the :program:`mongo` shell, add the ``maxTimeMS``
field to set a time limit of 30 milliseconds for the query:

.. code-block:: javascript

   db.runCommand( { distinct: "collection", key: "city", maxTimeMS: 45 } )

Interrupted operations produce an error reportable by
:method:`db.getLastError()`:

.. code-block:: javascript
 
   { "n" : 0, "connectionId" : 1, "err" : "operation exceeded time limit", "ok" : 1 }

``killOp``
~~~~~~~~~~

The :method:`db.killOp()` method interrupts a running operation at
the next :term:`interrupt point`. :method:`db.killOp()` identifies
the target operation by operation ID.

.. code-block:: javascript

   db.killOp(<opId>)

See :method:`db.currentOp()`.

