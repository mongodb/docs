.. _kotlin-sync-builders:

=========================
Use Builders Code Pattern
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::

   Builders & Data Classes </builders/builders-data-classes>

..    /fundamentals/builders/aggregates
..    /fundamentals/builders/filters
..    /fundamentals/builders/indexes
..    /fundamentals/builders/projections
..    /fundamentals/builders/sort
..    /fundamentals/builders/updates

Overview
--------

This page describes how to use the various available builders in your code and describes
benefits of using the provided builders.

The {+driver-short+} provides type-safe builder classes and methods that enable developers to
efficiently build queries and aggregations.

To learn more about the available builder classes and methods, see the
following API documentation sections:

- `Accumulators <{+core-api+}/com/mongodb/client/model/Accumulators.html>`__
- `Aggregates <{+core-api+}/com/mongodb/client/model/Aggregates.html>`__
- `Filters <{+core-api+}/com/mongodb/client/model/Filters.html>`__
- `Indexes <{+core-api+}/com/mongodb/client/model/Indexes.html>`__
- `Projections <{+core-api+}/com/mongodb/client/model/Projections.html>`__
- `Sorts <{+core-api+}/com/mongodb/client/model/Sorts.html>`__
- `Updates <{+core-api+}/com/mongodb/client/model/Updates.html>`__

Why Use Builders?
-----------------

If you use only plain {+language+} to construct BSON query documents, you are not
able to identify syntax errors until runtime. The builders help ensure the corretness of
syntax and can be less verbose than constructing BSON documents.

Example
-------

This section provides three equivalent ways to fetch the ``email`` field values of documents
in the ``users`` collection that meet the following criteria:

- ``gender`` value is ``"female"``
- ``age`` value is greater than ``29``

The following data class models the documents in the ``users`` collection:

.. literalinclude:: /includes/builders/builders.kt
   :start-after: start-user-class
   :end-before: end-user-class
   :language: kotlin
   :copyable:
   :dedent:

The following data class models the results returned by the query:

.. literalinclude:: /includes/builders/builders.kt
   :start-after: start-result-class
   :end-before: end-result-class
   :language: kotlin
   :copyable:
   :dedent:

MongoDB Query API
~~~~~~~~~~~~~~~~~

The following sample performs the query by using the MongoDB Query API:

.. code-block:: js

   collection.find(
       { "gender": "female", "age" : { "$gt": 29 }},
       { "_id": 0, "email": 1 }
   )

Document Class Filter
~~~~~~~~~~~~~~~~~~~~~

The following example performs the query by using the ``Document`` class to construct the
query filter:

.. literalinclude:: /includes/builders/builders.kt
   :start-after: start-find
   :end-before: end-find
   :language: kotlin
   :copyable:
   :dedent:

In this case, you might easily include an error when writing the
``"\$gt"`` operator in the filter, but your IDE returns the relevant
error only at runtime.

Builders API
~~~~~~~~~~~~

The following example performs the query by using the builder helpers:

.. literalinclude:: /includes/builders/builders.kt
   :start-after: start-find-builders
   :end-before: end-find-builders
   :language: kotlin
   :copyable:
   :dedent:

Use Builders with Data Classes
------------------------------

The :ref:`kotlin-sync-builders-data-classes` guide provides examples on
how to use the preceding builders classes directly with data class
properties. This guide might help to make your application more type-safe
and improve {+language+} interoperability.

.. TODO: Uncomment as pages get built

.. Available Builders
.. ------------------

.. The following pages describe how to implement the different classes of builders
.. available in the {+driver-short+}.

.. - :ref:`Aggregates <aggregates-builders>` for building aggregation pipelines.
.. - :ref:`Filters <filters-builders>` for building query filters.
.. - :ref:`Indexes <indexes-builders>` for creating index keys.
.. - :ref:`Projections <projections-builders>` for building projections. 
.. - :ref:`Sorts <sorts-builders>` for building sort criteria.
.. - :ref:`Updates <updates-builders>` for building updates.