====================
System-Defined Roles
====================

.. todo: change title to "Built-In Roles"

.. todo: split this into multiple files ?

.. default-domain:: mongodb

MongoDB grants access to data and commands through :ref:`role-based
authorization <roles>`. MongoDB provides built-in roles to cover the full
range of access levels needed in a database system, as described in this
section. You can further grant and limit access by creating :ref:`user-defined
roles <user-defined-roles>`.

Roles apply at the database level but can define access down to the collection
level. A role grants privileges to perform sets of :ref:`actions
<security-user-actions>` on defined :ref:`resources <resource-document>`.
Built-in roles define access for non-system collections as a whole, at the
database level. As with all roles, built-in roles define access to
:doc:`system collections </reference/system-collections>` at the collection
level, per collection.

MongoDB provides the built-in :ref:`database user <database-user-roles>` and
:ref:`database administration <database-administration-roles>` roles on every
database. MongoDB provides all other built-in roles only on the ``admin``
database.

.. _database-user-roles:

Database User Roles
-------------------

Every database includes the following client roles:

.. authrole:: read

   Provides the ability to read data on all non-system collections and on the
   following system collections: :data:`system.indexes
   <<database>.system.indexes>`, :data:`system.js <<database>.system.js>`, and
   :data:`system.namespaces <<database>.system.namespaces>` collections. The
   role provides read access by granting the following :ref:`actions
   <security-user-actions>`:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`

.. authrole:: readWrite

   Provides all the privileges of the :authrole:`read` role plus ability to
   modify data on all non-system collections and on the :data:`system.js
   <<database>.system.js>` collection. The role provides the following
   :ref:`actions <security-user-actions>` on those collections:

   - :authaction:`collStats`
   - :authaction:`convertToCapped`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`dropCollection`
   - :authaction:`dropIndex`
   - :authaction:`emptycapped`
   - :authaction:`find`
   - :authaction:`insert`
   - :authaction:`killCursors`
   - :authaction:`remove`
   - :authaction:`renameCollectionSameDB`
   - :authaction:`update`

.. _database-administration-roles:

Database Administration Roles
-----------------------------

Every database includes the following database administration roles:

.. authrole:: dbAdmin

   .. todo: Provides administrators what overall function ???

   Provides the following :ref:`actions <security-user-actions>` on the
   database's :data:`system.indexes <<database>.system.indexes>`,
   :data:`system.namespaces <<database>.system.namespaces>`, and
   :data:`system.profile <<database>.system.profile>` collections:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`

   Provides the following *additional* action on :data:`system.profile
   <<database>.system.profile>`:

   - :authaction:`dropCollection`

   Provides the following actions on all non-system collections. This role
   *does not* include full read access on non-system collections:

   - :authaction:`clean`
   - :authaction:`collMod`
   - :authaction:`collStats`
   - :authaction:`compact`
   - :authaction:`convertToCapped`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dbStats`
   - :authaction:`dropCollection`
   - :authaction:`dropDatabase`
   - :authaction:`dropIndex`
   - :authaction:`enableProfiler`
   - :authaction:`indexStats`
   - :authaction:`reIndex`
   - :authaction:`renameCollectionSameDB`
   - :authaction:`repairDatabase`
   - :authaction:`storageDetails`
   - :authaction:`validate`

.. authrole:: dbOwner

   Combines the privileges granted by the :authrole:`readWrite`,
   :authrole:`dbAdmin` and :authrole:`userAdmin` roles.

   .. todo: for what purpose ???

.. authrole:: userAdmin

   Provides the ability to create and modify roles and users on the current
   database.

   The :authrole:`userAdmin` role does not restrict the permissions that a
   user can grant, and as a result a :authrole:`userAdmin` user can grant
   privileges to themselves or other users in excess of the
   :authrole:`userAdmin` users' current privileges. A :authrole:`userAdmin`
   can grant themselves *all privileges*, even though the role does not
   explicitly authorize privileges beyond user administration.

   The :authrole:`userAdmin` role provides the following :ref:`actions
   <security-user-actions>`:

   - :authaction:`changeCustomData`
   - :authaction:`changePassword`
   - :authaction:`createRole`
   - :authaction:`createUser`
   - :authaction:`dropRole`
   - :authaction:`dropUser`
   - :authaction:`grantRole`
   - :authaction:`revokeRole`
   - :authaction:`viewRole`
   - :authaction:`viewUser`

.. _cluster-admin-roles:
.. _admin-roles:

Cluster Administration Roles
----------------------------

The ``admin`` database includes the following roles for administering the
whole system rather than just a single database. These roles include but are
not limited to :term:`replica set` and :term:`sharded cluster` administrative
functions.

.. authrole:: clusterAdmin

   Provides the greatest cluster-management access. This role combines the
   privileges granted by the :authrole:`clusterManager`,
   :authrole:`clusterMonitor`, and :authrole:`hostManager` roles.

   Additionally, the role provides the ability to drop any database by
   providing the following :ref:`action <security-user-actions>`:

   - :authaction:`dropDatabase`

.. authrole:: clusterManager

   Provides management and monitoring :ref:`actions <security-user-actions>`
   on the cluster. A user with this role can access the ``config`` and
   ``local`` databases, which are used in sharding and replication,
   respectively.

   Provides the following actions on the cluster as a whole:

   - :authaction:`addShard`
   - :authaction:`applicationMessage`
   - :authaction:`cleanupOrphaned`
   - :authaction:`flushRouterConfig`
   - :authaction:`listShards`
   - :authaction:`removeShard`
   - :authaction:`replSetConfigure`
   - :authaction:`replSetGetStatus`
   - :authaction:`replSetStateChange`
   - :authaction:`resync`

   Provides the following actions on *all* databases in the cluster:

   - :authaction:`enableSharding`
   - :authaction:`moveChunk`
   - :authaction:`splitChunk`
   - :authaction:`splitVector`

   On the ``config`` database, provides the following actions on the
   :data:`~config.settings` collection:

   - :authaction:`insert`
   - :authaction:`remove`
   - :authaction:`update`

   On the ``config`` database, provides the following actions on all
   configuration collections and on the :data:`system.indexes
   <<database>.system.indexes>`, :data:`system.js <<database>.system.js>`, and
   :data:`system.namespaces <<database>.system.namespaces>` collections:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`

   On the ``local`` database, provides the following actions on the
   :data:`~local.system.replset` collection:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`

.. authrole:: clusterMonitor

   Provides read-only access to monitoring tools, such as the `MongoDB
   Management Service (MMS) <http://mms.mongodb.com/help/>`_ monitoring agent.

   Provides the following :ref:`actions <security-user-actions>` on the
   cluster as a whole:

   - :authaction:`connPoolStats`
   - :authaction:`cursorInfo`
   - :authaction:`getCmdLineOpts`
   - :authaction:`getLog`
   - :authaction:`getParameter`
   - :authaction:`getShardMap`
   - :authaction:`hostInfo`
   - :authaction:`inprog`
   - :authaction:`listDatabases`
   - :authaction:`listShards`
   - :authaction:`netstat`
   - :authaction:`replSetGetStatus`
   - :authaction:`serverStatus`
   - :authaction:`shardingState`
   - :authaction:`top`
   - :authaction:`writeBacksQueued`

   Provides the following actions on *all* databases in the cluster:

   - :authaction:`collStats`
   - :authaction:`dbStats`
   - :authaction:`getShardVersion`

   Provides read access on all :data:`system.profile
   <<database>.system.profile>` collections in the cluster:

   - :authaction:`find`

   On the ``config`` database, provides the following actions on all
   configuration collections and on the :data:`system.indexes
   <<database>.system.indexes>`, :data:`system.js <<database>.system.js>`, and
   :data:`system.namespaces <<database>.system.namespaces>` collections:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`

.. authrole:: hostManager

   Provides the ability to monitor and manager servers.

   Provides the following :ref:`actions <security-user-actions>` on the
   cluster as a whole:

   - :authaction:`applicationMessage`
   - :authaction:`closeAllDatabases`
   - :authaction:`connPoolSync`
   - :authaction:`cpuProfiler`
   - :authaction:`diagLogging`
   - :authaction:`flushRouterConfig`
   - :authaction:`fsync`
   - :authaction:`invalidateUserCache`
   - :authaction:`killop`
   - :authaction:`logRotate`
   - :authaction:`resync`
   - :authaction:`setParameter`
   - :authaction:`shutdown`
   - :authaction:`touch`
   - :authaction:`unlock`

   Provides the following actions on *all* databases in the cluster:

   - :authaction:`killCursors`
   - :authaction:`repairDatabase`

.. _backup-and-restore-roles:

Backup and Restoration Roles
----------------------------

The ``admin`` database includes the following roles for backing up and
restoring data:

.. authrole:: backup

   Provides minimal privileges needed for backing up data.
   This role provides sufficient privileges to use the
   `MongoDB Management Service (MMS) <http://mms.mongodb.com/help/>`_
   backup agent.

.. authrole:: restore

   Provides minimal privileges needed for restoring data from backups.
   This role provides sufficient privileges to use the
   `MongoDB Management Service (MMS) <http://mms.mongodb.com/help/>`_
   backup agent.

.. _auth-any-database-roles:

All-Database Roles
------------------

The ``admin`` database provides the following roles that apply to all
databases in a :program:`mongod` instance and are roughly equivalent to their
single-database equivalents:

.. authrole:: readAnyDatabase

   Provides users with the same read-only
   permissions as :authrole:`read`, except it applies to *all* logical
   databases in the MongoDB environment.

.. authrole:: readWriteAnyDatabase

   Provides users with the same read and
   write permissions as :authrole:`readWrite`, except it applies to *all*
   logical databases in the MongoDB environment.

.. authrole:: userAdminAnyDatabase

   Provides users with the same
   access to user administration operations as :authrole:`userAdmin`,
   except it applies to *all* logical databases in the MongoDB
   environment.

   Because users with :authrole:`userAdminAnyDatabase` and
   :authrole:`userAdmin` have the ability to create and modify permissions in
   addition to their own level of access, this role is *effectively* the
   MongoDB system superuser. However, :authrole:`userAdminAnyDatabase` and
   :authrole:`userAdmin` do not explicitly authorize a user for any privileges
   beyond user administration.

.. authrole:: dbAdminAnyDatabase

   Provides users with the same access
   to database administration operations as :authrole:`dbAdmin`,
   except it applies to *all* logical databases in the MongoDB
   environment.

.. _superuser-roles:

Superuser Roles
---------------

The following role provides full privileges on all resources in the cluster:

.. authrole:: root

   Provides access to all the operations and all the resources of *of all
   other roles combined*. A user with this role is a superuser.

.. todo: does this still apply?

.. :dbcommand:`applyOps`, :dbcommand:`eval`, and :method:`db.eval()` require
   :authrole:`readWriteAnyDatabase`, :authrole:`userAdminAnyDatabase`,
   :authrole:`dbAdminAnyDatabase` and :authrole:`clusterAdmin`.
