:noprevnext:

.. _gst-run-queries:

============================================
Run Queries Against Your {+data-lake-short+}
============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

*Estimated completion time: 5 minutes*

You can run operations using the MongoDB Query Language (MQL) which
includes most, but not all standard server commands. To learn which MQL 
operations are supported, see the :ref:`MQL Support 
<data-lake-mql-support>` documentation. 

.. note:: 

   The {+data-lake+} sample datasets are read-only.

Prerequisites
-------------

To complete this part of the tutorial, you will need to have completed:

- **Part 1:** :doc:`/tutorial/deploy`
- **Part 2:** :doc:`/tutorial/connect`
- **Part 3:** :doc:`/tutorial/configure-database-collections`

You must be :ref:`connected <data-lake-connect>` to your {+dl+} with the
MongoDB Shell before running the following queries. 

Queries
-------

Before running the queries, switch to ``Database0`` database: 

.. code-block:: json 

   use Database0

The following queries use the paths that you added to your {+dl+} 
during :ref:`deployment <gst-deploy-adl>`. If you added all the paths 
to the sample datasets, you can run all the queries in the following 
tabs. If you only added some paths, click and run the queries in the 
appropriate tabs for the sample dataset paths that you added.

.. tabs:: 

   .. tab:: AirBnb 
      :tabid: airbnb

      .. _adl-sample-query1:

      Find the number of AirBnB offerings with ``3`` bedrooms and a 
      high review score:

      .. code-block:: sh

         db.Collection0.aggregate([{$match: {"bedrooms" : 3, "review_scores.review_scores_rating": {$gt: 79}} },{ $count: "numProperties"}])

      .. _adl-sample-query2:

      Find properties with ``3`` bedrooms and sort the returned 
      documents by customer review rating. Limit the number of 
      documents returned to ``5``:

      .. code-block:: sh

         db.Collection0.find({"bedrooms" : 3} ).sort({review_scores_rating: -1}).limit(5)

   .. tab:: Analytics 
      :tabid: analytics

      .. _adl-sample-query3:

      Find users who have purchased ``Commodity`` with a limit of 
      ``10000``. Limit the number of documents returned to ``5``: 

      .. code-block:: sh

         db.Collection0.find({"limit": {$eq: 10000}, "products": "Commodity"}).limit(5)

      .. _adl-sample-query4:

      Find customers whose birthdate is before ``1990-01-01`` and 
      limit the number of documents returned to ``5``: 

      .. code-block:: sh

         db.Collection0.find({"birthdate": {$lt: ISODate("1990-01-01T22:15:34.000+00:00")}}, {"name": 1, "birthdate": 1, "email": 1}).limit(5)

      .. _adl-sample-query5:

      Find transaction details for user whose account ID is ``557378`` 
      and use the :pipeline:`$sort` stage to sort on the 
      ``transactions.symbol`` field:

      .. code-block:: sh

         db.Collection0.aggregate([ { $match: {"account_id": 557378}},{$sort: {"transactions.symbol": -1}} ])

   .. tab:: Mflix 
      :tabid: mflix

      .. _adl-sample-query6:

      Find comments on movies submitted after ``2018-01-01`` and sort 
      the results by the ``_id`` field:

      .. code-block:: sh

         db.Collection0.find({"date": {$gt: ISODate("2018-01-01T23:20:16.000+00:00")}}).sort({"_id": 1})

      .. _adl-sample-query7:
      
      Find all movies between the years 2010 and 2015 and include only 
      the ``_id``, ``title``, and ``year`` fields in the results.
      
      .. code-block:: sh 

         db.Collection0.find({"type": "movie", "year": {$gt: 2010, $lt: 2015} }, {"title": 1, "year": 1 })

      .. _adl-sample-query8:
      
      Find the sessions details for user specified by ID.

      .. code-block:: sh 

         db.Collection0.find({"user_id": "t3qulfeem@kwiv5.6ur"})

      .. _adl-sample-query9:
      
      Find the theater specified by its ``id`` and ``zipcode``.

      .. code-block:: sh 

         db.Collection0.findOne({$and: [{"_id": ObjectId("59a47286cfa9a3a73e51e763")}, {"location.address.zipcode": "93933"}] })

      .. _adl-sample-query10:
      
      Find all users whose last name is ``Lannister`` and limit the 
      number of documents returned to ``10``.

      .. code-block:: sh 

         db.Collection0.find({ name: /Lannister/ }).limit(10)

Summary
-------

Congratulations! You just set up an {+data-lake+}, created a database
and collections from data stored in an S3 bucket, and queried
the data using MQL commands. 

For more information on {+data-lake+}, see :adl:`{+adl+} </>`.

.. figure:: /images/data-lake-getting-started.png
   :figwidth: 775px
   :alt: Screenshot of the {+dl+} after running queries.

.. include:: /includes/fact-data-lake-dynamic-collections.rst
