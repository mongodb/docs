==================================
Backing Up the MongoDB Environment
==================================

.. default-domain:: mongodb

You should have an automated backup system for your MongoDB environment.
The backup system must capture data in a consistent and usable state and
in a way that can be reliably reproduced. The backup system must be
automated and run regularly. And the system must be regularly tested in
practical situations to ensure that your backups are functional. If you
cannot effectively restore your database from the backup, then your
backups are useless. You also should automate tests of backup
restoration.

This page describes the following:

- :ref:`backup-considerations`

- :ref:`backup-approaches`

.. _backup-considerations:

Backup Considerations
---------------------

As you develop a backup strategy for your MongoDB deployment consider
the following factors:

- Geography. Ensure that you move some backups away from the your
  primary database infrastructure.

- System errors. Ensure that your backups can survive situations where
  hardware failures or disk errors impact the integrity or
  availability of your backups.

- Production constraints. Backup operations themselves sometimes require
  substantial system resources. It is important to consider the time of
  the backup schedule relative to peak usage and maintenance windows.

- System capabilities. Some of the block-level snapshot tools requires
  special support on the operating-system or infrastructure level.

- Database configuration. :term:`Replication` and :term:`sharding
  <shard>` can affect the process and impact of the backup
  implementation. See :ref:`sharded-cluster-backups` and
  :ref:`replica-set-backups`.

- Actual requirements. You may be able to save time, effort, and space
  by including only crucial data in the most frequent backups and
  backing up less crucial data less frequently.

.. _sharded-cluster-backups:

Sharded Cluster Backup Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/note-shard-cluster-backup.rst

:term:`Sharded clusters <sharded cluster>` complicate backup operations,
as distributed systems. True point-in-time backups are only possible
when stopping all write activity from the application. To create a
precise moment-in-time snapshot of a cluster, stop all application write
activity to the database, capture a backup, and allow only write
operations to the database after the backup is complete.

However, you can capture a backup of a cluster that **approximates** a
point-in-time backup by capturing a backup from a secondary member of
the replica sets that provide the shards in the cluster at roughly the
same moment. If you decide to use an approximate-point-in-time backup
method, ensure that your application can operate using a copy of the
data that does not reflect a single moment in time.

The following documents describe sharded cluster related backup
procedures:

- :doc:`/tutorial/backup-small-sharded-cluster-with-mongodump`
- :doc:`/tutorial/backup-sharded-cluster-with-filesystem-snapshots`
- :doc:`/tutorial/backup-sharded-cluster-with-database-dumps`
- :doc:`/tutorial/schedule-backup-window-for-sharded-clusters`
- :doc:`/tutorial/restore-single-shard`
- :doc:`/tutorial/restore-sharded-cluster`

.. _replica-set-backups:

Replica Set Backup Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In most cases, backing up data stored in a :term:`replica set` is
similar to backing up data stored in a single instance. It is possible
to lock a single :term:`secondary` database and then create a backup
from that instance. When you unlock the database, the secondary will
catch up with the :term:`primary`. You may also choose to deploy a
dedicated :term:`hidden member` for backup purposes.

If you have a :term:`sharded cluster` where each :term:`shard` is itself
a replica set, you can use this method to create a backup of the entire
cluster without disrupting the operation of the node. In these
situations you should still turn off the balancer when you create
backups.

For any cluster, using a non-primary node to create backups is
particularly advantageous in that the backup operation does not affect
the performance of the primary. Replication itself provides some measure
of redundancy. Nevertheless, keeping point-in time backups of your
cluster to provide for disaster recovery and as an additional layer of
protection is crucial.

.. _backup-approaches:

Approaches to Backing Up the MongoDB Environment
------------------------------------------------

The best option for backing up your MongoDB environment is to use
block-level backups, which provide duplicate images of your device.
Block-level backups, also called snapshots, complete quickly, work
reliably, and typically provide the easiest backup systems to implement.

If block-level backup tools are not available, MongoDB provides the
:program:`mongodump` tool, which performs binary-level backups. The
:program:`mongodump` tool writes the entire contents of your MongoDB
instance to a file in a binary format. If snapshots are not available,
this approach provides the best option for full system database backups.

The following topics provide details and procedures on the two approaches:

- :doc:`/tutorial/backup-databases-with-filesystem-snapshots`.

- :doc:`/tutorial/backup-databases-with-binary-database-dumps`.

In some cases, taking backups is difficult or impossible because of
large data volumes, distributed architectures, and data transmission
speeds. In these situations, increase the amount of replication.
