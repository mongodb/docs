title: "Create a new database on your cluster."
ref: driver-create-db
level: 4
content: |
  We have already established our client connection and stored
  it in a variable called ``client``. Run the following command
  in your Python shell to create a database on your cluster:

  .. code-block:: python

     db = client.gettingStarted

  This command creates a new :manual:`database
  </core/databases-and-collections/#databases>` on your cluster
  called ``gettingStarted``. The variable ``db`` points to your new
  database.
---
title: "Create a collection for your database."
ref: driver-create-coll
level: 4
content: |
  Run the following command in your Python shell to create a new
  collection for your database:

  .. code-block:: python

     people = db.people

  This command creates a new :manual:`collection
  </core/databases-and-collections/#collections>` in your
  ``gettingStarted`` database called ``people``. The variable
  ``people`` points to your new collection.
---
title: "Create a new document to insert into your collection."
ref: driver-create-doc
level: 4
content: |
  In your Python shell, run the following command to create a document
  which will be inserted into your collection:

  .. code-block:: python

     import datetime
     personDocument = {
       "name": { "first": "Alan", "last": "Turing" },
       "birth": datetime.datetime(1912, 6, 23),
       "death": datetime.datetime(1954, 6, 7),
       "contribs": [ "Turing machine", "Turing test", "Turingery" ],
       "views": 1250000
     }

  The document is stored in a variable called ``personDocument``.

  .. note::

     This command does not insert the document into your collection.
     This command only specifies the document. We will insert the
     document in the next step.
---
title: "Insert the document into your collection."
ref: driver-insert-doc
level: 4
content: |
  In your Python shell, run the following command to insert the
  document you created in the previous step into your collection:

  .. code-block:: python

      people.insert_one(personDocument)

  Remember that the ``people`` variable refers to our ``people``
  collection we specified in a previous step of this section, and
  ``personDocument`` contains the document we want to insert.

  If your insert was successful, PyMongo displays a message similar to
  the following:

  .. code-block:: python
     :copyable: false

     <pymongo.results.InsertOneResult object at 0x10950e5f0>

...
