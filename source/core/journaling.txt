.. _journaling-internals:

==========
Journaling
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

To provide durability in the event of a failure, MongoDB uses *write
ahead logging* to on-disk :term:`journal` files.

.. _journaling-wiredTiger:

Journaling and the WiredTiger Storage Engine
--------------------------------------------

.. important::

   The *log* mentioned in this section refers to the WiredTiger
   write-ahead log (i.e. the journal) and not the MongoDB log file.

:doc:`WiredTiger </core/wiredtiger>` uses :ref:`checkpoints
<storage-wiredtiger-checkpoints>` to provide a consistent view of data
on disk and allow MongoDB to recover from the last checkpoint. However,
if MongoDB exits unexpectedly in between checkpoints, journaling is
required to recover information that occurred after the last checkpoint.

.. note::

   .. include:: /includes/wiredtiger-node-nojournal.rst

With journaling, the recovery process:

#. Looks in the data files to find the identifier of the last
   checkpoint.

#. Searches in the journal files for the record that
   matches the identifier of the last checkpoint.

#. Apply the operations in the journal files since the last checkpoint.

.. _journal-process:

Journaling Process
~~~~~~~~~~~~~~~~~~

.. versionchanged:: 3.2

With journaling, WiredTiger creates one journal record for each client
initiated write operation. The journal record includes any internal
write operations caused by the initial write. For example, an update to
a document in a collection may result in modifications to the indexes;
WiredTiger creates a single journal record that includes both the
update operation and its associated index modifications.

MongoDB configures WiredTiger to use in-memory buffering for storing
the journal records. Threads coordinate to allocate and copy
into their portion of the buffer. All journal records up to 128
kB are buffered.



.. include:: /includes/extracts/wt-journal-frequency.rst

.. important::

   In between write operations, while the journal records
   remain in the WiredTiger buffers, updates can be lost following a
   hard shutdown of :binary:`~bin.mongod`.

.. seealso::
   The :dbcommand:`serverStatus` command returns information on the
   WiredTiger journal statistics in the :serverstatus:`wiredTiger.log`
   field.

Journal Files
~~~~~~~~~~~~~

For the journal files, MongoDB creates a subdirectory named ``journal``
under the :setting:`~storage.dbPath` directory. WiredTiger journal
files have names with the following format ``WiredTigerLog.<sequence>``
where ``<sequence>`` is a zero-padded number starting from
``0000000001``.

.. _wt-jouraling-record:

Journal Records
```````````````

Journal files contain a record per each client initiated write operation

- The journal record includes any internal write operations caused by
  the initial write. For example, an update to a document in a
  collection may result in modifications to the indexes; WiredTiger
  creates a single journal record that includes both the update
  operation and its associated index modifications.

- Each record has a unique identifier.

- The minimum journal record size for WiredTiger is 128 bytes.

Compression
```````````

By default, MongoDB configures WiredTiger to use snappy compression for
its journaling data. To specify a different compression algorithm or no
compression, use the
:setting:`storage.wiredTiger.engineConfig.journalCompressor` setting.
For details, see :ref:`manage-journaling-change-wt-journal-compressor`.s

.. note::

   .. include:: /includes/extracts/wt-log-compression-limit.rst

Journal File Size Limit
```````````````````````

WiredTiger journal files for MongoDB have a maximum size limit of
approximately 100 MB.

- Once the file exceeds that limit, WiredTiger creates a new journal
  file.

- WiredTiger automatically removes old journal files to maintain only
  the files needed to recover from last checkpoint.

Pre-Allocation
``````````````

WiredTiger pre-allocates journal files.


.. _journaling-inMemory:

Journaling and the In-Memory Storage Engine
-------------------------------------------

Starting in MongoDB Enterprise version 3.2.6, the :doc:`In-Memory
Storage Engine </core/inmemory>` is part of general availability (GA).
Because its data is kept in memory, there is no separate journal. Write
operations with a write concern of :writeconcern:`j: true <j>` are
immediately acknowledged.

.. include:: /includes/extracts/no-journaling-writeConcernMajorityJournalDefault-false.rst

.. note::

   .. include:: /includes/extracts/4.2-changes-inmem-startup-warning.rst

.. include:: /includes/extracts/no-journaling-rollback.rst

.. seealso::

   :ref:`In-Memory Storage Engine: Durability <inmemory-durability>`

.. toctree::
   :titlesonly:
   :hidden:

   /tutorial/manage-journaling
