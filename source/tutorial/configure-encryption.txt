====================
Configure Encryption
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

This page discusses server configuration to support encryption at rest.
If you use `MongoDB Atlas <https://www.mongodb.com/atlas/database?tck=docs_server>`__,
your data is already encrypted. MongoDB manages Atlas encryption at the
cloud provider level, but you can also use your own key management
solution. See the Atlas `key management documentation
<https://docs.atlas.mongodb.com/security-kms-encryption/>`__ for details.

MongoDB Enterprise 3.2 introduces a native encryption option for the
WiredTiger storage engine. Outside Atlas, encryption is only available
for enterprise installations that use the WiredTiger Storage Engine.

Secure management of the encryption keys is a critical requirement for
storage encryption. MongoDB uses a master key that is not stored with
the MongoDB installation. Only the master key is externally managed,
other keys can be stored with your MongoDB instance.

MongoDB's encrypted storage engine supports two key management options
for the master key:

- Integration with a third party key management appliance via the Key
  Management Interoperability Protocol (KMIP). **Recommended**
- Use of local key management via a keyfile.

.. important::

   MongoDB cannot encrypt existing data. When you enable encryption
   with a new key, the MongoDB instance cannot have any pre-existing
   data. If your MongoDB installation already has existing data, see
   :ref:`encrypt-existing-data` for additional steps.

Key Manager
-----------

MongoDB Enterprise supports secure transfer of keys with compatible key
management appliances. Using a key manager allows for the keys to be
stored in the key manager.

MongoDB Enterprise supports secure transfer of keys with Key Management
Interoperability Protocol (KMIP) compliant key management appliances.

.. include:: /includes/partners-security.rst

.. tip:: Recommended

   Using a key manager meets regulatory key management guidelines, such
   as HIPAA, PCI-DSS, and FERPA, and is recommended over the local key
   management.

Prerequisites
~~~~~~~~~~~~~

- Your key manager must support the KMIP communication protocol.

  .. include:: /includes/reference/fact-kmip-version.rst

- .. include:: /includes/fact-required-kmip-ops.rst

- To authenticate MongoDB to a KMIP server, you must have a valid
  certificate issued by the key management appliance.

.. note:: 

   .. include:: /includes/fact-aes.rst

.. _encrypt-with-new-key:

Encrypt Using a New Key
~~~~~~~~~~~~~~~~~~~~~~~

To create a new key when you connect to the key manager, use the
following options to start ``mongod``:

- :option:`--enableEncryption <mongod --enableEncryption>`
- :option:`--kmipServerName <mongod --kmipServerName>`
- :option:`--kmipPort <mongod --kmipPort>`
- :option:`--kmipServerCAFile <mongod --kmipServerCAFile>`
- :option:`--kmipClientCertificateFile <mongod --kmipClientCertificateFile>`

.. include:: /includes/reference/fact-add-v1-flag.rst

.. include:: /includes/extracts/default-bind-ip-security-additional-command-line.rst

.. |kmip-client-cert-file| replace:: :option:`--kmipClientCertificateFile`
.. |kmip-client-cert-selector| replace:: :option:`--kmipClientCertificateSelector`

.. include:: /includes/enable-KMIP-on-windows.rst

The following operation creates a new master key in your key manager.
``mongod`` uses the master key to encrypt the keys that ``mongod``
generates for each database.

.. code-block:: bash

   mongod --enableEncryption \
          --kmipServerName <KMIP Server HostName> \
          --kmipPort <KMIP server port> \
          --kmipServerCAFile ca.pem \
          --kmipClientCertificateFile client.pem

.. include:: /includes/reference/fact-connection-check.rst

To verify that the key creation and usage was successful, check the log
file. If successful, the process will log the following messages:

.. code-block:: bash

   [initandlisten] Created KMIP key with id: <UID>
   [initandlisten] Encryption key manager initialized using master key with id: <UID>

.. seealso::

   :ref:`encryption-key-management-options`

.. _encrypt-with-existing-key:

Encrypt Using an Existing Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use an existing master key that your KMIP server already
manages. To use an existing key, use these options when you start 
``mongod`` to connect ``mongod`` to the key manager:

- :option:`--enableEncryption <mongod --enableEncryption>`
- :option:`--kmipServerName <mongod --kmipServerName>`
- :option:`--kmipPort <mongod --kmipPort>`
- :option:`--kmipServerCAFile <mongod --kmipServerCAFile>`
- :option:`--kmipClientCertificateFile <mongod --kmipClientCertificateFile>`
- :option:`--kmipKeyIdentifier <mongod --kmipKeyIdentifier>`

.. include:: /includes/reference/fact-add-v1-flag.rst

.. include:: /includes/extracts/default-bind-ip-security-additional-command-line.rst

.. code-block:: bash

   mongod --enableEncryption \
          --kmipServerName <KMIP Server HostName> \
          --kmipPort <KMIP server port> \
          --kmipServerCAFile ca.pem \
          --kmipClientCertificateFile client.pem \
          --kmipKeyIdentifier <UID>

.. include:: /includes/reference/fact-connection-check.rst

.. seealso::

   :ref:`encryption-key-management-options`

.. _encrypt-local-key-mgmt:

Local Key Management
--------------------

.. important::

   Using the keyfile method does not meet most regulatory key
   management guidelines and requires users to securely manage their
   own keys.

   The safe management of the keyfile is critical.

To encrypt using a keyfile, you must have a base64 encoded keyfile that
contains a single 16 or 32 character string. The keyfile must only be
accessible by the owner of the :binary:`~bin.mongod` process.

#. Create the base64 encoded keyfile with the 16 or 32 character
   string. You can generate the encoded keyfile using any method you
   prefer. For example,

   .. code-block:: bash

      openssl rand -base64 32 > mongodb-keyfile

#. Update the file permissions.

   .. code-block:: bash

      chmod 600 mongodb-keyfile

#. To use the key file, start :binary:`~bin.mongod` with the following
   options:

   - ``--enableEncryption``,

   - ``--encryptionKeyFile <path to keyfile>``,

   .. code-block:: bash

      mongod --enableEncryption --encryptionKeyFile  mongodb-keyfile

   .. include:: /includes/extracts/default-bind-ip-security-additional-command-line.rst

#. Verify if the encryption key manager successfully initialized with
   the keyfile. If the operation was successful, the process will log the
   following message:

   .. code-block:: bash

      [initandlisten] Encryption key manager initialized with key file: <path to keyfile>

.. seealso::

   :ref:`encryption-key-management-options`

.. _encrypt-existing-data:

Encrypt Existing Data at Rest
-----------------------------

MongoDB cannot encrypt existing data. When you enable encryption with a
new key, the MongoDB instance cannot have any pre-existing data.

If you are using a replica set that does have existing data, use a
rolling :ref:`initial sync <replica-set-initial-sync>` to encrypt the
data. 

For example, consider a replica set with three members. The replica set
is in use and holds data that you want to encrypt. These are the steps
you would take to encrypt the data at rest:

.. include:: /includes/steps/encrypt-with-rolling-sync.rst
