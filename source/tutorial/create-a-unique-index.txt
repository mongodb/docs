=====================
Create a Unique Index
=====================

.. default-domain:: mongodb

MongoDB allows you to specify a :ref:`unique constraint
<index-type-unique>` on an index. These constraints prevent
applications from inserting :term:`documents <document>` that have
duplicate values for the inserted fields. Additionally, if you want to
create an index on a collection that has existing data that might have
duplicate values for the indexed field, you may choose to combine unique
enforcement with :ref:`duplicate dropping
<index-creation-duplicate-dropping>`.

.. index:: index; unique
.. _index-unique-index:

Unique Indexes
~~~~~~~~~~~~~~

To create a :ref:`unique indexes <index-type-unique>`, consider the
following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 }, { unique: true } )

For example, you may want to create a unique index on the ``"tax-id":``
of the ``accounts`` collection to prevent storing multiple account
records for the same legal entity:

.. code-block:: javascript

   db.accounts.ensureIndex( { "tax-id": 1 }, { unique: true } )

The :ref:`_id index <index-type-id>` is a unique index. In some
situations you may consider using ``_id`` field itself for this kind
of data rather than using a unique index on another field.

In many situations you will want to combine the ``unique`` constraint
with the ``sparse`` option. When MongoDB indexes a field, if a
document does not have a value for a field, the index entry for that
item will be ``null``. Since unique indexes cannot have duplicate
values for a field, without the ``sparse`` option, MongoDB will reject
the second document and all subsequent documents without the indexed
field. Consider the following prototype.

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 }, { unique: true, sparse: true } )

You can also enforce a unique constraint on :ref:`compound indexes
<index-type-compound>`, as in the following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1, b: 1 }, { unique: true } )

These indexes enforce uniqueness for the *combination* of index keys
and *not* for either key individually.

.. index:: index; drop duplicates
.. index:: index; duplicates
.. _index-drop-duplicates:

Drop Duplicates
~~~~~~~~~~~~~~~

To force the creation of a :ref:`unique index <index-type-unique>`
index on a collection with duplicate values in the field you are
indexing you can use the ``dropDups`` option. This will force MongoDB
to create a *unique* index by deleting documents with duplicate values
when building the index. Consider the following prototype invocation
of :method:`~db.collection.ensureIndex()`:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 }, { unique: true, dropDups: true } )

See the full documentation of :ref:`duplicate dropping
<index-creation-duplicate-dropping>` for more information.

.. warning::

   Specifying ``{ dropDups: true }`` may delete data from your
   database. Use with extreme caution.

Refer to the :method:`~db.collection.ensureIndex()`
documentation for additional index creation options.

