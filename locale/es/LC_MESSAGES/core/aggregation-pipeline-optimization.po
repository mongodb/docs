# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 19:25+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 8e9ab8d0f74a47cf97f775a1df08a96e
#: ../source/core/aggregation-pipeline-optimization.txt:3
msgid "Aggregation Pipeline Optimization"
msgstr ""

# 47d87691fa934250afb854f26f667510
#: ../source/core/aggregation-pipeline-optimization.txt
msgid "On this page"
msgstr ""

# 9d30d7cf22794393b31a4096bc91d8f6
#: ../source/core/aggregation-pipeline-optimization.txt:13
msgid ""
"Aggregation pipeline operations have an optimization phase which attempts"
" to reshape the pipeline for improved performance."
msgstr ""

# 0aab6779f25a418bb368e5a77abb22bf
#: ../source/core/aggregation-pipeline-optimization.txt:16
msgid ""
"To see how the optimizer transforms a particular aggregation pipeline, "
"include the :method:`explain <db.collection.aggregate()>` option in the "
":method:`db.collection.aggregate()` method."
msgstr ""

# ff0abe99145e44d783878fc743a94f20
#: ../source/includes/fact-optimizations-subject-to-change.rst:1
msgid "Optimizations are subject to change between releases."
msgstr ""

# 044cf7b99b2f4eb38bbed89932a5cfc4
#: ../source/core/aggregation-pipeline-optimization.txt:25
msgid "Projection Optimization"
msgstr ""

# dc2c274e7ccc4a899b029888c4ab0835
#: ../source/core/aggregation-pipeline-optimization.txt:27
msgid ""
"The aggregation pipeline can determine if it requires only a subset of "
"the fields in the documents to obtain the results. If so, the pipeline "
"will only use those required fields, reducing the amount of data passing "
"through the pipeline."
msgstr ""

# 6344719143c04f9196d14e08e8a16965
#: ../source/core/aggregation-pipeline-optimization.txt:35
msgid "Pipeline Sequence Optimization"
msgstr ""

# f0df7a8213e1416ea182b4701e541005
#: ../source/core/aggregation-pipeline-optimization.txt:40
msgid "``$sort`` + ``$match`` Sequence Optimization"
msgstr ""

# 0d7c74fd00df4cd5bc2a54de2f3c63f9
#: ../source/core/aggregation-pipeline-optimization.txt:42
msgid ""
"When you have a sequence with :pipeline:`$sort` followed by a "
":pipeline:`$match`, the :pipeline:`$match` moves before the "
":pipeline:`$sort` to minimize the number of objects to sort. For example,"
" if the pipeline consists of the following stages:"
msgstr ""

# 0d5868c01a6d4c03bd1c64e1c8966e2a
# d12d5b8c34a14de5b9fd695cca1ecc04
# ef28982d8a7c419ba8e344e916826606
#: ../source/core/aggregation-pipeline-optimization.txt:52
#: ../source/core/aggregation-pipeline-optimization.txt:77
#: ../source/core/aggregation-pipeline-optimization.txt:141
msgid ""
"During the optimization phase, the optimizer transforms the sequence to "
"the following:"
msgstr ""

# fe8e22b627614a478166eccc9fd2e299
#: ../source/core/aggregation-pipeline-optimization.txt:63
msgid "``$skip`` + ``$limit`` Sequence Optimization"
msgstr ""

# c429ed90e70f44d281eb4f65eace7047
#: ../source/core/aggregation-pipeline-optimization.txt:65
msgid ""
"When you have a sequence with :pipeline:`$skip` followed by a "
":pipeline:`$limit`, the :pipeline:`$limit` moves before the "
":pipeline:`$skip`. With the reordering, the :pipeline:`$limit` value "
"increases by the :pipeline:`$skip` amount."
msgstr ""

# 203acfa82c8448b69190b66ed6b293a5
# 2877fe8226644c66a5463709e8770ab2
#: ../source/core/aggregation-pipeline-optimization.txt:70
#: ../source/core/aggregation-pipeline-optimization.txt:107
msgid "For example, if the pipeline consists of the following stages:"
msgstr ""

# 99645fcf88ec42df84bfa0884b32a6a2
#: ../source/core/aggregation-pipeline-optimization.txt:85
msgid ""
"This optimization allows for more opportunities for :ref:`agg-sort-limit-"
"coalescence`, such as with ``$sort`` + ``$skip`` + ``$limit`` sequences. "
"See :ref:`agg-sort-limit-coalescence` for details on the coalescence and "
":ref:`agg-sort-skip-limit-sequence` for an example."
msgstr ""

# b4732ab857924c5caad69881367527ad
#: ../source/core/aggregation-pipeline-optimization.txt:91
msgid ""
"For aggregation operations on :doc:`sharded collections <aggregation-"
"pipeline-sharded-collections>`, this optimization reduces the results "
"returned from each shard."
msgstr ""

# 30f3d51115d04e81a32314705288af9d
#: ../source/core/aggregation-pipeline-optimization.txt:96
msgid "``$redact`` + ``$match`` Sequence Optimization"
msgstr ""

# 54723a96cb81457f96097d82a2a63fc3
#: ../source/core/aggregation-pipeline-optimization.txt:98
msgid ""
"When possible, when the pipeline has the :pipeline:`$redact` stage "
"immediately followed by the :pipeline:`$match` stage, the aggregation can"
" sometimes add a portion of the :pipeline:`$match` stage before the "
":pipeline:`$redact` stage. If the added :pipeline:`$match` stage is at "
"the start of a pipeline, the aggregation can use an index as well as "
"query the collection to limit the number of documents that enter the "
"pipeline. See :ref:`aggregation-pipeline-operators-and-performance` for "
"more information."
msgstr ""

# 9ef4f0e16650405b9c4f529a88df1b77
#: ../source/core/aggregation-pipeline-optimization.txt:114
msgid ""
"The optimizer can add the same :pipeline:`$match` stage before the "
":pipeline:`$redact` stage:"
msgstr ""

# 0c5703440bbe444db1dd054587e57230
#: ../source/core/aggregation-pipeline-optimization.txt:126
msgid "``$project`` + ``$skip`` or ``$limit`` Sequence Optimization"
msgstr ""

# a298c0d4d59f4cfe84848c554b38a7cc
#: ../source/core/aggregation-pipeline-optimization.txt:130
msgid ""
"When you have a sequence with :pipeline:`$project` followed by either "
":pipeline:`$skip` or :pipeline:`$limit`, the :pipeline:`$skip` or "
":pipeline:`$limit` moves before :pipeline:`$project`. For example, if the"
" pipeline consists of the following stages:"
msgstr ""

# 59f3f441856e47c9ade0456711d04502
#: ../source/core/aggregation-pipeline-optimization.txt:150
msgid ""
"This optimization allows for more opportunities for :ref:`agg-sort-limit-"
"coalescence`, such as with ``$sort`` + ``$limit`` sequences. See :ref"
":`agg-sort-limit-coalescence` for details on the coalescence."
msgstr ""

# d2a3f0d9b391415b978fccfc85be7606
#: ../source/core/aggregation-pipeline-optimization.txt:158
msgid "Pipeline Coalescence Optimization"
msgstr ""

# f027103c30aa4a1b8c15f390113f829f
#: ../source/core/aggregation-pipeline-optimization.txt:160
msgid ""
"When possible, the optimization phase coalesces a pipeline stage into its"
" predecessor. Generally, coalescence occurs *after* any sequence "
"reordering optimization."
msgstr ""

# 3328e2dd6c3041d0bd2a15ee7a8cbfd2
#: ../source/core/aggregation-pipeline-optimization.txt:167
msgid "``$sort`` + ``$limit`` Coalescence"
msgstr ""

# dc8cdf3b23f24918b65836b5cc286bfd
#: ../source/core/aggregation-pipeline-optimization.txt:169
msgid ""
"When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit`, the "
"optimizer can coalesce the :pipeline:`$limit` into the :pipeline:`$sort`."
" This allows the sort operation to only maintain the top ``n`` results as"
" it progresses, where ``n`` is the specified limit, and MongoDB only "
"needs to store ``n`` items in memory [#coalescence-allowDiskUse]_. See "
":ref:`sort-and-memory` for more information."
msgstr ""

# fb2fa87a17c8429897e2e06dd3c0ff24
#: ../source/core/aggregation-pipeline-optimization.txt:177
msgid ""
"The optimization will still apply when ``allowDiskUse`` is ``true`` and "
"the ``n`` items exceed the :ref:`aggregation memory limit <agg-memory-"
"restrictions>`."
msgstr ""

# e2a8fd769ffa4de3bc8a06d8a4bf8a2d
#: ../source/core/aggregation-pipeline-optimization.txt:184
msgid "``$limit`` + ``$limit`` Coalescence"
msgstr ""

# 4eb32ce7b9454d66bcdabfd084ab742f
#: ../source/core/aggregation-pipeline-optimization.txt:186
msgid ""
"When a :pipeline:`$limit` immediately follows another :pipeline:`$limit`,"
" the two stages can coalesce into a single :pipeline:`$limit` where the "
"limit amount is the *smaller* of the two initial limit amounts. For "
"example, a pipeline contains the following sequence:"
msgstr ""

# bc0ce741975a4b858c092099465eedbb
#: ../source/core/aggregation-pipeline-optimization.txt:197
msgid ""
"Then the second :pipeline:`$limit` stage can coalesce into the first "
":pipeline:`$limit` stage and result in a single :pipeline:`$limit` stage "
"where the limit amount ``10`` is the minimum of the two initial limits "
"``100`` and ``10``."
msgstr ""

# 8175163b388642e88b2fa005de0e24ad
#: ../source/core/aggregation-pipeline-optimization.txt:209
msgid "``$skip`` + ``$skip`` Coalescence"
msgstr ""

# a3f04c339d5b4b419cfac9e630e57ccd
#: ../source/core/aggregation-pipeline-optimization.txt:211
msgid ""
"When a :pipeline:`$skip` immediately follows another :pipeline:`$skip`, "
"the two stages can coalesce into a single :pipeline:`$skip` where the "
"skip amount is the *sum* of the two initial skip amounts. For example, a "
"pipeline contains the following sequence:"
msgstr ""

# 3c3dcb5fb2b34ecd849e880c25270a52
#: ../source/core/aggregation-pipeline-optimization.txt:221
msgid ""
"Then the second :pipeline:`$skip` stage can coalesce into the first "
":pipeline:`$skip` stage and result in a single :pipeline:`$skip` stage "
"where the skip amount ``7`` is the sum of the two initial limits ``5`` "
"and ``2``."
msgstr ""

# d23bd280ae1b454aa84c34dc3144326b
#: ../source/core/aggregation-pipeline-optimization.txt:233
msgid "``$match`` + ``$match`` Coalescence"
msgstr ""

# 4b5a40c72b604a92863c1be3100700a7
#: ../source/core/aggregation-pipeline-optimization.txt:235
msgid ""
"When a :pipeline:`$match` immediately follows another :pipeline:`$match`,"
" the two stages can coalesce into a single :pipeline:`$match` combining "
"the conditions with an :expression:`$and`. For example, a pipeline "
"contains the following sequence:"
msgstr ""

# dfd928fd77f94492815c4ff46c6c3074
#: ../source/core/aggregation-pipeline-optimization.txt:246
msgid ""
"Then the second :pipeline:`$match` stage can coalesce into the first "
":pipeline:`$match` stage and result in a single :pipeline:`$match` stage"
msgstr ""

# 2b7bb8cd27d54c998f0ddd5610f405f7
#: ../source/core/aggregation-pipeline-optimization.txt:257
msgid "``$lookup`` + ``$unwind`` Coalescence"
msgstr ""

# ddfbc16af2b7410a9215410be7d4004c
#: ../source/core/aggregation-pipeline-optimization.txt:261
msgid ""
"When a :pipeline:`$unwind` immediately follows another "
":pipeline:`$lookup`, and the :pipeline:`$unwind` operates on the ``as`` "
"field of the :pipeline:`$lookup`, the optimizer can coalesce the "
":pipeline:`$unwind` into the :pipeline:`$lookup` stage. This avoids "
"creating large intermediate documents."
msgstr ""

# 46d1d6e745d6415a9fd837cb87b60ef9
#: ../source/core/aggregation-pipeline-optimization.txt:267
msgid "For example, a pipeline contains the following sequence:"
msgstr ""

# 9b3f095d5b004d91882ec35c6d3e7e02
#: ../source/core/aggregation-pipeline-optimization.txt:281
msgid ""
"The optimizer can coalesce the :pipeline:`$unwind` stage into the "
":pipeline:`$lookup` stage. If you run the aggregation with ``explain`` "
"option, the ``explain`` output shows the coalesced stage:"
msgstr ""

# be2f51dbff504f33bd8137bf1eeed4fa
#: ../source/core/aggregation-pipeline-optimization.txt:298
msgid "Examples"
msgstr ""

# 929bd085e11d4a79acc5108ff7882be4
#: ../source/core/aggregation-pipeline-optimization.txt:300
msgid ""
"The following examples are some sequences that can take advantage of both"
" sequence reordering and coalescence. Generally, coalescence occurs "
"*after* any sequence reordering optimization."
msgstr ""

# 72a51aa92adf4d49b84635c00e142541
#: ../source/core/aggregation-pipeline-optimization.txt:307
msgid "``$sort`` + ``$skip`` + ``$limit`` Sequence"
msgstr ""

# 70e20f8cc1464ad093a7c87b3a74f694
#: ../source/core/aggregation-pipeline-optimization.txt:309
msgid ""
"A pipeline contains a sequence of :pipeline:`$sort` followed by a "
":pipeline:`$skip` followed by a :pipeline:`$limit`:"
msgstr ""

# b67f74db70bb4129b7e467b2919d6712
#: ../source/core/aggregation-pipeline-optimization.txt:318
msgid ""
"First, the optimizer performs the :ref:`agg-skip-limit-optimization` to "
"transforms the sequence to the following:"
msgstr ""

# 8ed735c436514badaf85a1646284663a
#: ../source/core/aggregation-pipeline-optimization.txt:327
msgid ""
"The :ref:`agg-skip-limit-optimization` increases the :pipeline:`$limit` "
"amount with the reordering. See :ref:`agg-skip-limit-optimization` for "
"details."
msgstr ""

# 332400d103c84785bb10a8fde34cde9e
#: ../source/core/aggregation-pipeline-optimization.txt:331
msgid ""
"The reordered sequence now has :pipeline:`$sort` immediately preceding "
"the :pipeline:`$limit`, and the pipeline can coalesce the two stages to "
"decrease memory usage during the sort operation. See :ref:`agg-sort-"
"limit-coalescence` for more information."
msgstr ""

# 2f1c40d62b894fc992cb4468b10f6c67
#: ../source/core/aggregation-pipeline-optimization.txt:337
msgid "``$limit`` + ``$skip`` + ``$limit`` + ``$skip`` Sequence"
msgstr ""

# ba8fc2bd8ae449f8a8feefe1dbeed407
#: ../source/core/aggregation-pipeline-optimization.txt:339
msgid ""
"A pipeline contains a sequence of alternating :pipeline:`$limit` and "
":pipeline:`$skip` stages:"
msgstr ""

# 58c486be2b9f42c5b28f0f94194b964a
#: ../source/core/aggregation-pipeline-optimization.txt:349
msgid ""
"The :ref:`agg-skip-limit-optimization` reverses the position of the ``{ "
"$skip: 5 }`` and ``{ $limit: 10 }`` stages and increases the limit "
"amount:"
msgstr ""

# db63d8bdc2074487b3946625fa81c1d2
#: ../source/core/aggregation-pipeline-optimization.txt:360
msgid ""
"The optimizer then coalesces the two :pipeline:`$limit` stages into a "
"single :pipeline:`$limit` stage and the two :pipeline:`$skip` stages into"
" a single :pipeline:`$skip` stage. The resulting sequence is the "
"following:"
msgstr ""

# 560ad31cc7654626b688e23746e901a7
#: ../source/core/aggregation-pipeline-optimization.txt:370
msgid ""
"See :ref:`agg-limit-limit-coalescence` and :ref:`agg-skip-skip-"
"coalescence` for details."
msgstr ""

# b3e04363f10c4ff9b4de38c5ab240830
#: ../source/core/aggregation-pipeline-optimization.txt:374
msgid ""
":method:`explain <db.collection.aggregate()>` option in the "
":method:`db.collection.aggregate()`"
msgstr ""

#~ msgid ""
#~ "Aggregation pipeline operations have an "
#~ "optimization phase which attempts to "
#~ "rearrange the pipeline for improved "
#~ "performance."
#~ msgstr ""

#~ msgid "``$sort`` + ``$skip`` + ``$limit`` Sequence Optimization"
#~ msgstr ""

#~ msgid ""
#~ "When you have a sequence with "
#~ ":pipeline:`$sort` followed by a "
#~ ":pipeline:`$skip` followed by a "
#~ ":pipeline:`$limit`, an optimization occurs "
#~ "that moves the :pipeline:`$limit` operator "
#~ "before the :pipeline:`$skip` operator. For "
#~ "example, if the pipeline consists of "
#~ "the following stages:"
#~ msgstr ""

#~ msgid ""
#~ "The :pipeline:`$limit` value has increased "
#~ "to the sum of the initial value"
#~ " and the :pipeline:`$skip` value."
#~ msgstr ""

#~ msgid ""
#~ "The optimized sequence now has "
#~ ":pipeline:`$sort` immediately preceding the "
#~ ":pipeline:`$limit`. See :pipeline:`$sort` for "
#~ "information on the behavior of the "
#~ ":pipeline:`$sort` operation when it "
#~ "immediately precedes :pipeline:`$limit`."
#~ msgstr ""

#~ msgid "``$limit`` + ``$skip`` + ``$limit`` + ``$skip`` Sequence Optimization"
#~ msgstr ""

#~ msgid ""
#~ "When you have a continuous sequence "
#~ "of a :pipeline:`$limit` pipeline stage "
#~ "followed by a :pipeline:`$skip` pipeline "
#~ "stage, the optimization phase attempts "
#~ "to arrange the pipeline stages to "
#~ "combine the limits and skips. For "
#~ "example, if the pipeline consists of "
#~ "the following stages:"
#~ msgstr ""

#~ msgid ""
#~ "During the intermediate step, the "
#~ "optimizer reverses the position of the"
#~ " :pipeline:`$skip` followed by a "
#~ ":pipeline:`$limit` to :pipeline:`$limit` followed"
#~ " by the :pipeline:`$skip`."
#~ msgstr ""

#~ msgid ""
#~ "The :pipeline:`$limit` value has increased "
#~ "to the sum of the initial value"
#~ " and the :pipeline:`$skip` value. Then, "
#~ "for the final :pipeline:`$limit` value, "
#~ "the optimizer selects the minimum "
#~ "between the adjacent :pipeline:`$limit` "
#~ "values. For the final :pipeline:`$skip` "
#~ "value, the optimizer adds the adjacent"
#~ " :pipeline:`$skip` values, to transform the"
#~ " sequence to the following:"
#~ msgstr ""

