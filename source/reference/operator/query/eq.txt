===
$eq
===

.. default-domain:: mongodb

.. query:: $eq

   .. versionadded:: 3.0

   Specifies equality condition. The :query:`$eq` operator matches
   documents where the value of a field equals the specified value.

   .. code-block:: javascript

      { <field>: { $eq: <value> } }

   The :query:`$eq` expression is equivalent to ``{ field: <value> }``.

Behavior
--------

Comparison Order
~~~~~~~~~~~~~~~~

.. include:: /includes/fact-comparison-order.rst

Match a Document Value
~~~~~~~~~~~~~~~~~~~~~~

If the specified ``<value>`` is a document, the order of the fields in
the document matters.

Match an Array Value
~~~~~~~~~~~~~~~~~~~~

If the specified ``<value>`` is an array, MongoDB matches documents
where the ``<field>`` matches the array exactly or the ``<field>``
contains an element that matches the array exactly. The order of the
elements matters. For an example, see :ref:`eq-match-array-value`.

Examples
--------

The following examples query against the ``inventory`` collection with
the following documents:

.. code-block:: javascript

   { _id: 1, item: { name: "ab", code: "123" }, qty: 15, tags: [ "A", "B", "C" ] }
   { _id: 2, item: { name: "cd", code: "123" }, qty: 20, tags: [ "B" ] }
   { _id: 3, item: { name: "ij", code: "456" }, qty: 25, tags: [ "A", "B" ] }
   { _id: 4, item: { name: "xy", code: "456" }, qty: 30, tags: [ "B", "A" ] }
   { _id: 5, item: { name: "mn", code: "000" }, qty: 20, tags: [ [ "A", "B" ], "C" ] }

Equals a Specified Value
~~~~~~~~~~~~~~~~~~~~~~~~

The following example queries the ``inventory`` collection to select
all documents where the value of the ``qty`` field equals ``20``:

.. code-block:: javascript

   db.inventory.find( { qty: { $eq: 20 } } )

The query is equivalent to:

.. code-block:: javascript

   db.inventory.find( { qty: 20 } )

Both queries match the following documents:

.. code-block:: javascript

   { _id: 2, item: { name: "cd", code: "123" }, qty: 20, tags: [ "B" ] }
   { _id: 5, item: { name: "mn", code: "000" }, qty: 20, tags: [ [ "A", "B" ], "C" ] }

Field in Embedded Document Equals a Value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example queries the ``inventory`` collection to select
all documents where the value of the ``name`` field in the ``item``
document equals ``"ab"``. To specify a condition on a field in an
embedded document, use the :term:`dot notation`.

.. code-block:: javascript

   db.inventory.find( { "item.name": { $eq: "ab" } } )

The query is equivalent to:

.. code-block:: javascript

   db.inventory.find( { "item.name": "ab" } )

Both queries match the following document:

.. code-block:: javascript

   { _id: 1, item: { name: "ab", code: "123" }, qty: 15, tags: [ "A", "B", "C" ] }

.. seealso:: :ref:`Query Embedded Documents <read-operations-embedded-documents>`

Array Element Equals a Value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example queries the ``inventory`` collection to select
all documents where the ``tags`` array contains an element with the
value ``"B"`` [#match-string-value]_:

.. code-block:: javascript

   db.inventory.find( { tags: { $eq: "B" } } )

The query is equivalent to:

.. code-block:: javascript

   db.inventory.find( { tags: "B" } )

Both queries match the following documents:

.. code-block:: javascript

   { _id: 1, item: { name: "ab", code: "123" }, qty: 15, tags: [ "A", "B", "C" ] }
   { _id: 2, item: { name: "cd", code: "123" }, qty: 20, tags: [ "B" ] }
   { _id: 3, item: { name: "ij", code: "456" }, qty: 25, tags: [ "A", "B" ] }
   { _id: 4, item: { name: "xy", code: "456" }, qty: 30, tags: [ "B", "A" ] }

.. seealso:: :query:`$elemMatch`, :ref:`Query Arrays <read-operations-arrays>`

.. [#match-string-value] The query will also match documents where the
   value of the ``tags`` field is the string ``"B"``.

.. _eq-match-array-value:

Equals an Array Value
~~~~~~~~~~~~~~~~~~~~~

The following example queries the ``inventory`` collection to select
all documents where the ``tags`` array equals exactly the specified
array or the ``tags`` array contains an element that equals the array
``[ "A", "B" ]``.

.. code-block:: javascript

   db.inventory.find( { tags: { $eq: [ "A", "B" ] } } )

The query is equivalent to:

.. code-block:: javascript

   db.inventory.find( { tags: [ "A", "B" ] } )

Both queries match the following documents:

.. code-block:: javascript

   { _id: 3, item: { name: "ij", code: "456" }, qty: 25, tags: [ "A", "B" ] }
   { _id: 5, item: { name: "mn", code: "000" }, qty: 20, tags: [ [ "A", "B" ], "C" ] }
