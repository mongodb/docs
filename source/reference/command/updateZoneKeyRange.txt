==================
updateZoneKeyRange
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: updateZoneKeyRange

   .. versionadded:: 3.4

   The :dbcommand:`updateZoneKeyRange` administrative command can either
   create or remove the association between a range of shard key values and a
   :term:`zone`.

   .. |command| replace:: ``updateZoneKeyRange``

   .. include:: /includes/fact-dbcommand.rst

   You must run :dbcommand:`addShardToZone` on the admin database.

   The :dbcommand:`updateZoneKeyRange` command has the following syntax:

   .. code-block:: javascript

    {
      updateZoneKeyRange: <string>,
      min: <document>,
      max: <document>
      zone: <string> | <null>
    }

   The command takes the following fields:

   .. include:: /includes/apiargs/dbcommand-updateZoneKeyRange-field.rst

   If no zone range matches the minimum and maximum bounds passed to
   :dbcommand:`updateZoneKeyRange`, nothing is removed.

   Only issue :dbcommand:`updateZoneKeyRange` when connected to a
   :binary:`~bin.mongos` instance.

   The :binary:`~bin.mongo` shell provides two helper methods:

   - :method:`sh.updateZoneKeyRange()` for adding a range of shard key values to a
     zone.

   - :method:`sh.removeRangeFromZone()` for removing a range of shard key values
     from a zone.

Behavior
--------

You cannot create a range of shard key values whose lower and upper boundaries
overlap with an existing range for the sharded collection. For example, given
an existing range of ``1`` to ``10``, you cannot create a new range of ``5``
to ``20``, as the new range would overlap with the existing range.

A zone can have multiple ranges of data associated with it, but a range
can at most be associated with a single zone.

When removing the association between a range and a zone,
:dbcommand:`updateZoneKeyRange` does not remove the zone. Use the
:dbcommand:`removeShardFromZone` command to remove the association between a 
zone and a shard.

See the :ref:`zone <zone-sharding>` manual page for more information on zones
in sharded clusters.

Balancer
~~~~~~~~

After successfully running :dbcommand:`updateZoneKeyRange`, there may be chunk
migrations during the next balancer round.

After adding a range to a zone, the :ref:`balancer
<sharding-balancing-internals>` must first run in order to migrate any chunks
whose ranges are covered by the zone to shards inside of that zone. Until
balancing completes, some chunks may reside on the wrong shard given the
configured zones for the sharded cluster.

Removing the association between a range and a zone removes the constraints
keeping chunks covered by the range on the shards inside that zone. During the
next balancer round, the balancer may migrate chunks that were previously
covered by the zone.

See the documentation for the :ref:`sharded cluster balancer
<sharding-balancing>` for more information on how migrations work in a sharded
cluster.

Bounds
~~~~~~

.. include:: /includes/fact-shard-ranges-inclusive-exclusive.rst

Dropped Collections
~~~~~~~~~~~~~~~~~~~

If you add a zone range associated to a sharded collection using
:dbcommand:`updateZoneKeyRange` and then later drop the collection or its
database, MongoDB does not remove the range association. If you later create a
new collection with the same name, the old range association applies to the new
collection.

Security
--------

For sharded clusters running with :ref:`authentication <authentication>`, you
must authenticate as a user whose privileges include:

- :authaction:`find` on the ``config.shards`` collection or the ``config``
  database

- :authaction:`find` on the ``config.tags`` collection or the ``config``
  database

- :authaction:`update` on the ``config.tags`` collection or the ``config``
  database

- :authaction:`remove` on the ``config.tags`` collection or the ``config``
  database

The :authrole:`clusterAdmin` or :authrole:`clusterManager` built-in roles have
the appropriate permissions for issuing :dbcommand:`updateZoneKeyRange`. See
the documentation page for :ref:`Role-Based Access Control <authorization>`
for more information.

Example
-------

Given a sharded collection ``exampledb.collection`` with a shard key of ``{ a
: 1 }``, the following operation creates a range with a lower bound of ``1``
and an upper bound of ``10`` on the ``alpha`` zone:

.. code-block:: javascript

   admin = db.getSiblingDB("admin")
   admin.runCommand(
      {
         updateZoneKeyRange : "exampledb.collection",
         min : { a : 1 },
         max : { a : 10 },
         zone : "alpha"
      }
   )

The following operation removes the previously created range by passing
``null`` to the ``zone`` field.

.. code-block:: javascript

   admin = db.getSiblingDB("admin")
   admin.runCommand(
      {
         updateZoneKeyRange : "exampledb.collection",
         min : { a : 1 },
         max : { a : 10 },
         zone : null
      }
   )

The ``min`` and ``max`` must match exactly the bounds of the target range.
The following operation attempts to remove the previously created range, but
specifies ``{ a : 0 }`` as the ``min`` bound:

.. code-block:: javascript

   admin = db.getSiblingDB("admin")
   admin.runCommand(
      {
         updateZoneKeyRange : "exampledb.collection",
         min : { a : 0 },
         max : { a : 10 },
         zone : null
      }
   )

While the range of ``{ a : 0 }`` and ``{ a : 10 }`` encompasses the existing
range, it is not an exact match and therefore :dbcommand:`updateZoneKeyRange`
does not remove anything.

Compound Shard Key
~~~~~~~~~~~~~~~~~~

Given a sharded collection ``exampledb.collection`` with a shard key of ``{ a
: 1, b : 1 }``, the following operation creates a range covering the lower
bound of ``{ a: 1, b : 1 }`` and an upper bound of ``{ a : 10, b : 10}`` and
associates it with the ``alpha`` zone:

.. code-block:: javascript

   admin = db.getSiblingDB("admin")
   admin.runCommand( 
      {
         updateZoneKeyRange : "exampledb.collection",
         min : { a : 1, b : 1 },
         max : { a : 10, b : 10 },
         zone : "alpha"
         
      }
   )
