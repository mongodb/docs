==========================
$strLenBytes (aggregation)
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol
   
Definition
----------

.. expression:: $strLenBytes

   .. versionadded:: 3.4
   
   Returns the number of UTF-8 encoded bytes in the specified string.

   :expression:`$strLenBytes` has the following :ref:`operator
   expression syntax <agg-quick-ref-operator-expressions>`:

   .. code-block:: javascript

      { $strLenBytes: <string expression> }

   The argument can be any valid :ref:`expression
   <aggregation-expressions>` as long as it resolves to a string. For
   more information on expressions, see :ref:`aggregation-expressions`.

   .. include:: /includes/extracts/agg-expression-null-operand-strLenBytes.rst

Behavior
--------

The :expression:`$strLenBytes` operator counts the number of UTF-8
encoded bytes in a string where each character may use between one
and four bytes.

.. include:: /includes/fact-utf8-char-byte-sizes.rst

The :expression:`$strLenBytes` operator differs from 
:expression:`$strLenCP` operator which counts the 
`code points <http://www.unicode.org/glossary/#code_point>`_
in the specified string regardless of how many bytes each character
uses.

.. list-table::
   :header-rows: 1
   :widths: 40 15 45
   :class: border-table

   * - Example
     - Results
     - Notes

   * - .. code-block:: javascript
          :copyable: false

          { $strLenBytes: "abcde" }
     - ``5``
     - Each character is encoded using one byte.
     
   * - .. code-block:: javascript
          :copyable: false

          { $strLenBytes: "Hello World!" }
     - ``12``
     - Each character is encoded using one byte.

   * - .. code-block:: javascript
          :copyable: false

          { $strLenBytes: "cafeteria" }
     - ``9``
     - Each character is encoded using one byte.

   * - .. code-block:: javascript
          :copyable: false

          { $strLenBytes: "cafétéria" }
     - ``11``
     - ``é`` is encoded using two bytes.

   * - .. code-block:: javascript
          :copyable: false

          { $strLenBytes: "" }
     - ``0``
     - Empty strings return 0.
 
   * - .. code-block:: javascript
          :copyable: false

          { $strLenBytes: "$€λG" }
     - ``7``
     - ``€`` is encoded using three bytes.
       ``λ`` is encoded using two bytes.

   * - .. code-block:: javascript
          :copyable: false

          { $strLenBytes: "寿司" }
     - ``6``
     - Each character is encoded using three bytes.

Example
-------

Single-Byte and Multibyte Character Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A collection named ``food`` contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "name" : "apple" }
   { "_id" : 2, "name" : "banana" }
   { "_id" : 3, "name" : "éclair" }
   { "_id" : 4, "name" : "hamburger" }
   { "_id" : 5, "name" : "jalapeño" }
   { "_id" : 6, "name" : "pizza" }
   { "_id" : 7, "name" : "tacos" }
   { "_id" : 8, "name" : "寿司" }

The following operation uses the ``$strLenBytes`` operator to calculate
the ``length`` of each ``name`` value:

.. code-block:: javascript

   db.food.aggregate(
     [
       {
         $project: {
           "name": 1,
           "length": { $strLenBytes: "$name" }
         }
       }
     ]
   )

The operation returns the following results:

.. code-block:: javascript

   { "_id" : 1, "name" : "apple", "length" : 5 }
   { "_id" : 2, "name" : "banana", "length" : 6 }
   { "_id" : 3, "name" : "éclair", "length" : 7 }
   { "_id" : 4, "name" : "hamburger", "length" : 9 }
   { "_id" : 5, "name" : "jalapeño", "length" : 9 }
   { "_id" : 6, "name" : "pizza", "length" : 5 }
   { "_id" : 7, "name" : "tacos", "length" : 5 }
   { "_id" : 8, "name" : "寿司", "length" : 6 }

The documents with ``_id: 3`` and ``_id: 5`` each contain a diacritic
character (``é`` and ``ñ`` respectively) that requires two bytes to
encode. The document with ``_id: 8`` contains two Japanese characters
that are encoded using three bytes each.  This makes the ``length``
greater than the number of characters in ``name`` for the documents
with ``_id: 3``, ``_id: 5`` and ``_id: 8``.

.. seealso::

   - :expression:`$strLenCP`
   - :expression:`$binarySize`
