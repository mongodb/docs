.. _sink-configuration-error-handling:

===================================
Connector Error Handling Properties
===================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: errors, options, configure

Overview
--------

.. _sink-configuration-error-handling-description-start:

Use the following configuration settings to specify how the {+sink-connector+}
handles errors and to configure the dead letter queue.

.. _sink-configuration-error-handling-description-end:

.. include:: /includes/sink-config-link.rst

Settings
--------

.. _sink-configuration-error-handling-table-start:

.. list-table::
   :header-rows: 1
   :widths: 50 50

   * - Name
     - Description

   * - | **mongo.errors.tolerance**
     - | **Type:** string
       |
       | **Description:**
       | Whether to continue processing messages if the connector encounters
         an error. Allows the connector to override  the ``errors.tolerance``
         Kafka cluster setting.
       |
       | When set to ``none``, the connector reports any error and
         blocks further processing of the rest of the messages.
       |
       | When set to ``all``, the connector ignores any problematic messages.
       |
       | When set to ``data``, the connector tolerates only data errors and
         fails on all other errors.
       |
       | To learn more about error handling strategies, see the
         :ref:`<kafka-sink-handle-errors>` page.
       |
       | This property overrides the `errors.tolerance <https://docs.confluent.io/platform/current/installation/configuration/connect/sink-connect-configs.html#errors-tolerance>`__
       | property of the Connect Framework.
       |
       | **Default:** Inherits the value from the ``errors.tolerance``
         setting.
       | **Accepted Values**: ``"none"`` or ``"all"``

   * - | **mongo.errors.log.enable**
     - | **Type:** boolean
       |
       | **Description:**
       | Whether the connector should write details of errors including
         failed operations to the log file. The connector classifies
         errors as "tolerated" or "not tolerated" using the
         ``errors.tolerance`` or ``mongo.errors.tolerance`` settings.
       |
       | When set to ``true``, the connector logs both "tolerated" and
         "not tolerated" errors.
       | When set to ``false``, the connector logs "not tolerated" errors.
       | 
       | This property overrides the `errors.log.enable <https://docs.confluent.io/platform/current/installation/configuration/connect/sink-connect-configs.html#errors-log-enable>`__
       | property of the Connect Framework.
       |
       | **Default:** ``false``
       | **Accepted Values**: ``true`` or ``false``

   * - | **errors.log.include.messages**
     - | **Type:** boolean
       |
       | **Description:**
       | Whether the connector should include the invalid message when
         logging an error. An invalid message includes data such as record
         keys, values, and headers.
       |
       | **Default:** ``false``
       | **Accepted Values**: ``true`` or ``false``

   * - | **errors.deadletterqueue.topic.name**
     - | **Type:** string
       |
       | **Description:**
       | Name of topic to use as the dead letter queue. If blank, the
         connector does not send any invalid messages to the dead letter
         queue.
       |
       | To learn more about the dead letter queue, see the
         :ref:`Dead Letter Queue Configuration Example <sink-dead-letter-queue-configuration-example>`.
       |
       | **Default:** ``""``
       | **Accepted Values**: A valid Kafka topic name

   * - | **errors.deadletterqueue.context.headers.enable**
     - | **Type:** boolean
       |
       | **Description:**
       | Whether the connector should include context headers when it
         writes messages to the dead letter queue.
       |
       | To learn more about the dead letter queue, see the
         :ref:`Dead Letter Queue Configuration Example <sink-dead-letter-queue-configuration-example>`.
       |
       | To learn about the exceptions the connector defines and
         reports through context headers, see
         :ref:`<sink-configuration-error-handling-dlq-errors>`.
       |
       | **Default:** ``false``
       | **Accepted Values**: ``true`` or ``false``

   * - | **errors.deadletterqueue.topic.replication.factor**
     - | **Type:** integer
       |
       | **Description:**
       | The number of nodes on which to replicate the dead letter queue
         topic. If you are running a single-node Kafka cluster, you must
         set this to ``1``.
       |
       | To learn more about the dead letter queue, see the
         :ref:`Dead Letter Queue Configuration Example <sink-dead-letter-queue-configuration-example>`.
       |
       | **Default:** ``3``
       | **Accepted Values**: A valid number of nodes

.. _sink-configuration-error-handling-table-end:

.. _sink-configuration-error-handling-dlq-errors:

Bulk Write Exceptions
---------------------

The connector can report the following exceptions to your dead letter queue
as context headers when performing bulk writes:

.. list-table::
   :header-rows: 1
   :widths: 34 66

   * - Name
     - Description

   * - | ``WriteException``
     - | **Description:**
       | Contains details of a
         `BulkWriteError <{+connector_driver_api_doc_url_base+}apidocs/mongodb-driver-core/com/mongodb/bulk/BulkWriteError.html>`__
         your connector encountered.
       |
       | **Message Format:**

       This class outputs the error in the following format:

       .. code-block:: none

          v=%d, code=%d, message=%s, details=%s

       The fields in the preceding message contain the following information:

       - ``v``: The version of the ``WriteException`` message format.
         This field helps parse the messages produced by this exception.
         For version {+connector_version+} of the connector, the version of the
         message format is {+write-exception-version+}.
       - ``code``: The code associated with the error. To learn more see the
         `getCode() <{+connector_driver_api_doc_url_base+}apidocs/mongodb-driver-core/com/mongodb/WriteError.html#getCode()>`__
         method documentation.
       - ``message``: The message associated with the error. To learn more, see the
         `getMessage() <{+connector_driver_api_doc_url_base+}apidocs/mongodb-driver-core/com/mongodb/WriteError.html#getMessage()>`__
         method documentation.
       - ``details``: The details associated with the error in JSON format. To
         learn more, see the following method documentation:

         - `getDetails() <{+connector_driver_api_doc_url_base+}apidocs/mongodb-driver-core/com/mongodb/WriteError.html#getDetails()>`__
         - `toJson() <{+connector_driver_api_doc_url_base+}apidocs/bson/org/bson/BsonDocument.html#toJson()>`__

   * - | ``WriteConcernException``
     - | **Description:**
       | Contains details of a
         `WriteConcernError <{+connector_driver_api_doc_url_base+}apidocs/mongodb-driver-core/com/mongodb/bulk/WriteConcernError.html>`__
         your connector encountered.
       |
       | **Message Format:**

       This class outputs the error in the following format:

       .. code-block:: none

          v=%d, code=%d, codeName=%d, message=%s, details=%s

       The fields in the preceding message contain the following information:

       - ``v``: The version of the ``WriteConcernException`` message format.
         This field helps parse the messages produced by this exception.
         For version {+connector_version+} of the
         connector, the version of the message format is
         {+write-concern-exception-version+}.
       - ``code``: The code associated with the error. To learn more see the
         `getCode() <{+connector_driver_api_doc_url_base+}apidocs/mongodb-driver-core/com/mongodb/bulk/WriteConcernError.html#getCode()>`__
         method documentation.
       - ``codeName``: The code name associated with the error. To learn more, see the
         `getCodeName() <{+connector_driver_api_doc_url_base+}apidocs/mongodb-driver-core/com/mongodb/bulk/WriteConcernError.html#getCode()>`__
         method documentation.
       - ``message``: The message associated with the error. To learn more, see the
         `getMessage() <{+connector_driver_api_doc_url_base+}apidocs/mongodb-driver-core/com/mongodb/bulk/WriteConcernError.html#getMessage()>`__
         method documentation.
       - ``details``: The details associated with the error in JSON format. To
         learn more, see the following method documentation:

         - `getDetails() <{+connector_driver_api_doc_url_base+}apidocs/mongodb-driver-core/com/mongodb/bulk/WriteConcernError.html#getDetails()>`__
         - `toJson() <{+connector_driver_api_doc_url_base+}apidocs/bson/org/bson/BsonDocument.html#toJson()>`__

   * - | ``WriteSkippedException``
     - | **Description:**
       | Informs that MongoDB did not attempt the write of a ``SinkRecord`` as part of
         the following scenario:

       #. The connector sends an ordered bulk write operation to MongoDB
       #. MongoDB fails to process a write operation in the ordered bulk write
       #. MongoDB does not attempt to perform all subsequent write operations in the ordered bulk write

       | To learn how to set the connector to perform unordered bulk
         write operations, see the :ref:`<sink-configuration-message-processing>` page.
       | **Message Format:**

       This exception produces no message.

To enable bulk write exception reporting to the dead letter queue, use the
following connector configuration:

.. code-block:: properties
   :emphasize-lines: 3

   errors.tolerance=all
   errors.deadletterqueue.topic.name=<name of topic to use as dead letter queue>
   errors.deadletterqueue.context.headers.enable=true

.. _sink-dead-letter-queue-configuration-example:

Dead Letter Queue Configuration Example
---------------------------------------

Apache Kafka version 2.6 added support for handling errant records. The
Kafka connector automatically sends messages that it cannot process to the
**dead letter queue**. Once on the dead letter queue, you can inspect the
errant records, update them, and resubmit them for processing.

The following is an example configuration for enabling the dead letter queue
topic ``example.deadletterqueue``. This configuration specifies that the
dead letter queue and log file should record invalid messages, and that
the dead letter queue messages should include context headers.

.. code-block:: properties

   mongo.errors.tolerance=all
   mongo.errors.log.enable=true
   errors.log.include.messages=true
   errors.deadletterqueue.topic.name=example.deadletterqueue
   errors.deadletterqueue.context.headers.enable=true

To learn more about dead letter queues, see :ref:`<kafka-sink-errors-dlq>`.
