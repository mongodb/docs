.. _php-read-write-pref:

=========================
Configure CRUD Operations
=========================

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :keywords: customize, preferences, replica set, consistency

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to configure **write concern**, **read concern**,
and **read preference** options to modify the way that the {+php-library+} runs create,
read, update, and delete (CRUD) operations on replica sets.

You can set write concern, read concern, and read preference options at the following
levels:

- Client, which sets the *default for all operation executions* unless overridden
- Session
- Transaction
- Database
- Collection

This list also indicates the increasing order of precedence of the option settings. For
example, if you set a read concern level for a transaction, it will override a read
concern level inherited from the client.

These options allow you to customize the causal consistency and availability of the data
in your replica sets. To see a full list of read preference, read concern, and write concern
options, see the following guides in the {+mdb-server+} manual:

- :manual:`Read Preference </core/read-preference/>`
- :manual:`Read Concern </reference/read-concern/>`
- :manual:`Write Concern </reference/write-concern/>`

.. _php-read-write-config:

Configure Read and Write Operations
-----------------------------------

You can control how the library routes read operations by setting a read preference.
You can also control how the library waits for acknowledgment of read and write operations
on a replica set by setting read and write concerns.

This section shows how to configure the read preference, read concern, and write
concern at various levels by passing an options array parameter to any one of the
following methods:

- :ref:`MongoDB\Client::__construct() <php-read-write-client>`: Configures client-level
  settings
- :ref:`MongoDB\Client::startSession() <php-read-write-session>`: Configures session-level
  settings
- :ref:`MongoDB\Driver\Session::startTransaction() <php-read-write-transaction>`:
  Configures transaction-level settings
- :ref:`MongoDB\Client::selectDatabase() <php-read-write-database>`: Configures
  database-level settings
- :ref:`MongoDB\Client::selectCollection() <php-read-write-collection>`: Configures
  collection-level settings

.. _php-read-write-client:

Client Configuration
~~~~~~~~~~~~~~~~~~~~

This example shows how to set the read preference, read concern, and
write concern of a ``MongoDB\Client`` instance by passing an array to
the constructor. The code configures the following settings:

- ``secondary`` read preference: Read operations retrieve data from 
  secondary replica set members
- ``local`` read concern: Read operations return the instance's most recent data 
  without guaranteeing that the data has been written to a majority of the replica
  set members
- ``2`` write concern: The primary and one secondary replica set member
  must acknowledge the write operation

.. literalinclude:: /includes/read-write-pref.php
    :language: php
    :dedent:
    :start-after: start-client-settings
    :end-before: end-client-settings

Alternatively, you can specify the read and write settings in the connection
URI, which is passed as a parameter to the ``MongoDB\Client`` constructor:

.. literalinclude:: /includes/read-write-pref.php
    :language: php
    :dedent:
    :start-after: start-client-settings-uri
    :end-before: end-client-settings-uri

.. note::

   The ``readPreference``, ``readConcernLevel``, and ``w`` client options accept
   string values. When configuring read and write settings at any other level,
   you must assign values of type ``MongoDB\Driver\ReadPreference``,
   ``MongoDB\Driver\ReadConcern``, and ``MongoDB\Driver\WriteConcern`` to the corresponding
   options.

.. _php-read-write-session:

Session Configuration
~~~~~~~~~~~~~~~~~~~~~

This example shows how to set the read preference, read concern, and
write concern of a session by passing an array to the ``startSession()``
method. The code configures the following settings:

- ``PRIMARY_PREFERRED`` read preference: Read operations retrieve data from 
  the primary replica set member, or secondary members if the primary is unavailable
- ``LOCAL`` read concern: Read operations return the instance's most recent data 
  without guaranteeing that the data has been written to a majority of the replica
  set members
- ``MAJORITY`` write concern: The majority of all replica set members
  must acknowledge the write operation

.. literalinclude:: /includes/read-write-pref.php
    :language: php
    :dedent:
    :start-after: start-session-settings
    :end-before: end-session-settings

.. _php-read-write-transaction:

Transaction Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~

This example shows how to set the read preference, read concern, and
write concern of a transaction by passing an array to the ``startTransaction()``
method. The code configures the following settings:

- ``PRIMARY`` read preference: Read operations retrieve data from 
  the primary replica set member
- ``MAJORITY`` read concern: Read operations return the instance's most recent data 
  that has been written to a majority of replica set members
- ``1`` write concern: The primary replica set member must acknowledge the
  write operation

.. literalinclude:: /includes/read-write-pref.php
    :language: php
    :dedent:
    :start-after: start-transaction-settings
    :end-before: end-transaction-settings

.. _php-read-write-database:

Database Configuration
~~~~~~~~~~~~~~~~~~~~~~

This example shows how to set the read preference, read concern, and
write concern of a database called ``test_database`` by passing an options
array to the ``selectDatabase()`` method. The code configures the following settings:

- ``PRIMARY_PREFERRED`` read preference: Read operations retrieve data from 
  the primary replica set member, or secondary members if the primary is unavailable
- ``AVAILABLE`` read concern: Read operations return the instance's most recent data 
  without guaranteeing that the data has been written to a majority of the replica
  set members
- ``MAJORITY`` write concern: The majority of all replica set members
  must acknowledge the write operation

.. literalinclude:: /includes/read-write-pref.php
    :language: php
    :dedent:
    :start-after: start-database-settings
    :end-before: end-database-settings

.. _php-read-write-collection:

Collection Configuration
~~~~~~~~~~~~~~~~~~~~~~~~

This example shows how to set the read preference, read concern, and
write concern of a collection called ``test_collection`` by passing an options
array to the ``selectCollection()`` method. The code configures the following settings:

- ``SECONDARY_PREFERRED`` read preference: Read operations retrieve data from 
  secondary replica set members, or the primary members if no secondaries are available
- ``AVAILABLE`` read concern: Read operations return the instance's most recent data 
  without guaranteeing that the data has been written to a majority of the replica
  set members
- ``0`` write concern: Requests no acknowledgment of the write operation

.. literalinclude:: /includes/read-write-pref.php
    :language: php
    :dedent:
    :start-after: start-collection-settings
    :end-before: end-collection-settings

.. _php-read-write-advanced:

Advanced Read Configurations 
----------------------------

This section shows how to further customize your read operation
settings in the following ways:

- :ref:`Apply a tag set <php-tag-sets>`
- :ref:`Configure load balancing behavior <php-load-balancing>`

.. _php-tag-sets:

Tag Sets
~~~~~~~~

The {+mdb-server+} allows you to apply key-value :manual:`tags
</core/read-preference-tags/>` to replica-set
members according to any criteria you choose. You can then use
those tags to target one or more members for a read operation.

By default, the {+php-library+} ignores tags when choosing a member
to read from. To instruct the {+php-library+} to prefer certain tags,
pass them as a parameter to your ``MongoDB\Driver\ReadPreference`` class
constructor. Then, set the ``MongoDB\Driver\ReadPreference`` object as
the value of the ``readPreference`` database option.

Suppose you are connected to a replica set that contains members hosted
at multiple data centers across the United States. This code example sets
the ``readPreference`` option to a tag set that instructs ``test_database``
to prefer reads from secondary replica set members in the following order:

1. Members from the New York data center (``['dc' => 'ny']``)
#. Members from the San Francisco data center (``['dc' => 'sf']``)
#. Any secondary members (``[]``)

.. literalinclude:: /includes/read-write-pref.php
   :language: php
   :dedent:
   :start-after: start-tag-set
   :end-before: end-tag-set

.. _php-load-balancing:

Load Balancing
~~~~~~~~~~~~~~

When connecting to a sharded cluster or a replica set, the {+library-short+} uses
**load balancing** to handle read and write requests. Load balancing allows the library to
distribute these requests across multiple servers to avoid overwhelming
any one server and ensure optimal performance.

When connecting to a sharded cluster, the {+library-short+} determines the closest ``mongos``
instance by calculating which one has the lowest network round-trip time. Then, the library
determines the latency window by adding this ``mongos``'s average round-trip time to the
:ref:`localThresholdMS value <php-local-threshold>`. The library load balances requests
across up to two random ``mongos`` instances that fall within the latency window. For each request,
the library chooses the server with the lower operation load by determining its ``operationCount``
value.

When connecting to a replica set, the {+library-short+} first selects replica set members
according to your read preference. Then, the library follows the same process as 
described in the preceding paragraph. After calculating the latency window, the library
selects up to two random replica set members that fall within the window and chooses
the member with the lower ``operationCount`` value to receive the request.

.. tip::

   To learn more about load balancing, see :manual:`Sharded Cluster Balancer
   </core/sharding-balancer-administration/>` in the {+mdb-server+} manual.

   To learn how to customize the library's server selection behavior, see
   :ref:`php-selection-discovery-options` in the Specify Connection Options guide.

.. _php-local-threshold:

Local Threshold
```````````````

The {+library-short+} uses the local threshold value to calculate the
latency window for server selection. This value determines the servers
that are eligible to receive read and write requests.

By default, the library uses only ``mongos`` instances or replica set members whose
ping times are within 15 milliseconds of the nearest server. To
distribute reads among servers with higher latencies, pass an options array to
the ``MongoDB\Client`` constructor that sets the ``localThresholdMS`` option.

The following example specifies a local threshold of 35 milliseconds:

.. literalinclude:: /includes/read-write-pref.php
    :language: php
    :dedent:
    :start-after: start-local-threshold
    :end-before: end-local-threshold

In the preceding example, the {+php-library+} distributes reads among matching members
within 35 milliseconds of the closest member's ping time.

.. note::
  
   The {+php-library+} ignores the value of ``localThresholdMS`` when communicating with a
   replica set through a ``mongos`` instance. In this case, use the
   :manual:`localThreshold </reference/program/mongos/#std-option-mongos.--localThreshold>`
   command-line option.

API Documentation
-----------------

To learn more about any of the methods or types discussed in this
guide, see the following library API documentation:

- :phpmethod:`MongoDB\Client::__construct()`
- :phpmethod:`MongoDB\Client::startSession()`
- :phpmethod:`MongoDB\Client::selectDatabase()`
- :phpmethod:`MongoDB\Client::selectCollection()`

To learn more about the ``startTransaction()`` method, see :php:`MongoDB\Driver\Session::startTransaction()
<mongodb-driver-session.starttransaction>` in the extension API documentation.
