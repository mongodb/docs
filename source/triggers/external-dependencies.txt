.. _external-dependencies:

=====================
External Dependencies
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _external-dependencies-overview:

Overview
--------

An external dependency is an external library that includes logic
you'd rather not implement yourself, such as string parsing, convenience
functions for array manipulations, and data structure or algorithm
implementations.

You can upload external dependencies from the `npm repository
<https://www.npmjs.com/>`_ to Stitch and then import those
libraries into your functions using standard JavaScript module
syntax. To get started with external dependencies, check out the
following guides.

.. admonition:: Create Your Own Modules
   :class: note

   Though most npm modules are written by third parties, you can
   create and publish your own npm modules to house logic specific to
   your application. You can make your modules available to the Node.js
   community or reserve them for private use. To learn more, see
   npm's guide on `Contributing packages to the registry
   <https://docs.npmjs.com/packages-and-modules/contributing-packages-to-the-registry>`_.

.. _external-dependencies-upload:

Upload External Dependencies
----------------------------

You can upload npm modules into the Stitch application that houses your
triggers and Stitch Functions. This allows functions in your application
to depend upon external libraries.

To use external dependencies, upload an archive of an npm
``node_modules`` folder via the Stitch UI. Once uploaded, any Stitch
Function can import and use any dependencies listed on the dependencies
page of the Stitch UI.

.. admonition:: External Dependency Size Constraints
   :class: important

   Uploaded zip files are subject to a ``10MB`` size cap.

Procedure
~~~~~~~~~

.. include:: /includes/steps/upload-external-dependencies.rst

.. _external-dependencies-import:

Import External Dependencies
----------------------------

Once uploaded to your application, you can import npm modules listed
on the dependencies page of the Stitch UI into your Stitch Functions.

.. admonition:: Pre-requisites for Import
   :class: note

   You must :ref:`upload dependencies <external-dependencies-upload>`
   before you can import them.

Usage
~~~~~

You can import dependencies into any Stitch function using the
``require`` keyword inside of the ``exports`` function. You cannot use
ES Module ``import`` syntax. You should import dependencies in the style
of a ``node_modules`` module import, since Stitch does not support file
or local module import. To learn more about ``require`` syntax, consult
the `Node.js documentation for the require keyword
<https://nodejs.org/api/modules.html#modules_require_id>`_.

.. admonition:: Where Do I Import Modules?
   :class: important

   Node.js projects commonly place ``require`` statements in the
   global scope of each file, but Stitch does not support this pattern.
   You *must* place Stitch Function ``require`` statements within a
   function scope.

Import a Full Module
~~~~~~~~~~~~~~~~~~~~

Below, you'll find a simple example of a function that uses the
``require`` keyword inside a function to import the ``ramda`` module and
call `ramda <https://ramdajs.com/>`_'s ``map`` method:

.. code-block:: javascript
   :emphasize-lines: 2

   exports = () => {
      const R = require("ramda");
      return R.map(x => x*2, [1,2,3]);
   }

Import a Module Subfolder
~~~~~~~~~~~~~~~~~~~~~~~~~

The following example demonstrates how to use ``require`` to import a
single submodule of an external dependency into a Stitch Function:

.. code-block:: javascript
   :emphasize-lines: 2

   exports = function(arg){
      const cloneDeep = require("lodash/cloneDeep");

      var original = { name: "Deep" };
      var copy = cloneDeep(original);
      copy.name = "John";

      console.log(`original: ${original.name}`);
      console.log(`copy: ${copy.name}`);
      return (original != copy);
   };

.. _external-dependencies-constraints:

Constraints
-----------

External dependencies are subject to the following limitations:

- Require statements *must* appear inside a function declaration, not
  outside it. Stitch does not currently support statements in the global
  scope.

- Stitch currently supports a subset of Node.js built-in modules. For
  a list of supported and unsupported modules, see :stitch:`function
  constraints </functions/#constraints>`.
