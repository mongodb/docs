================================================
Model Tree Structures with an Array of Ancestors
================================================

.. default-domain:: mongodb

Overview
--------

Data in MongoDB has a *flexible schema*. :term:`Collections
<collection>` do not enforce :term:`document` structure. Decisions
that affect how you model data can affect application performance and
database capacity. See :doc:`/core/data-models` for a full high
level overview of data modeling in MongoDB.

This document describes a data model that describes a tree-like
structure in MongoDB documents using :ref:`references
<data-modeling-referencing>` to parent nodes and an array that stores
all ancestors.

Pattern
-------

.. start-model-tree-structures-include-here

The *Array of Ancestors* pattern stores each tree node in a document;
in addition to the tree node, document stores in an array the id(s) of
the node's ancestors or path.

Consider the following hierarchy of categories:

.. include:: /images/data-model-tree.rst

The following example models the tree using *Array of Ancestors*. In
addition to the ``ancestors`` field, these documents also store the
reference to the immediate parent category in the ``parent`` field:

.. code-block:: javascript

   db.categories.insert( { _id: "MongoDB", ancestors: [ "Books", "Programming", "Databases" ], parent: "Databases" } )
   db.categories.insert( { _id: "dbm", ancestors: [ "Books", "Programming", "Databases" ], parent: "Databases" } )
   db.categories.insert( { _id: "Databases", ancestors: [ "Books", "Programming" ], parent: "Programming" } )
   db.categories.insert( { _id: "Languages", ancestors: [ "Books", "Programming" ], parent: "Programming" } )
   db.categories.insert( { _id: "Programming", ancestors: [ "Books" ], parent: "Books" } )
   db.categories.insert( { _id: "Books", ancestors: [ ], parent: null } )

- The query to retrieve the ancestors or path of a node is fast and
  straightforward:

  .. code-block:: javascript

     db.categories.findOne( { _id: "MongoDB" } ).ancestors

- You can create an index on the field ``ancestors`` to enable fast
  search by the ancestors nodes:

  .. code-block:: javascript

     db.categories.ensureIndex( { ancestors: 1 } )

- You can query by the field ``ancestors`` to find all its descendants:

  .. code-block:: javascript

     db.categories.find( { ancestors: "Programming" } )

The *Array of Ancestors* pattern provides a fast and efficient solution
to find the descendants and the ancestors of a node by creating an
index on the elements of the ancestors field. This makes *Array of
Ancestors* a good choice for working with subtrees.

The *Array of Ancestors* pattern is slightly slower than the
:doc:`Materialized Paths
</tutorial/model-tree-structures-with-materialized-paths>` pattern but
is more straightforward to use.
