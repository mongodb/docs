=============================
db.collection.createIndexes()
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.collection.createIndexes( [ keyPatterns ], options )

   .. versionadded:: 3.2

   Creates one or more indexes on a collection.

   .. include:: /includes/apiargs/method-db.collection.createIndexes-param.rst

   The :method:`db.collection.createIndexes()` is a wrapper around the
   :dbcommand:`createIndexes` command.

   To minimize the impact of building an index on replica sets and sharded
   clusters, use a rolling index build procedure
   as described on :doc:`/tutorial/build-indexes-on-replica-sets`.

.. _createIndexes-options:

Options
-------

The ``options`` document contains a set of options that control the
creation of the indexes. Different index types can have additional
options specific for that type.

.. important::
   When you specify options to
   :method:`db.collection.createIndexes()`, the options apply to
   *all* of the specified indexes. For example, if you specify a
   collation option, all of the created indexes will include that
   collation.
   
   :method:`db.collection.createIndexes()` will return an error if you
   attempt to create indexes with incompatible options. Refer to the
   options descriptions for more information.

.. versionchanged:: 3.4

   Added support for :ref:`collation
   <create-indexes-collation>`.

Options for All Index Types
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for all index types unless
otherwise specified:

.. include:: /includes/fact-remove-dropDups-option.rst

.. include:: /includes/apiargs/method-db.collection.createIndexes-options-param.rst

.. _create-indexes-collation:

Option for Collation
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/apiargs/method-db.collection.createIndexes-option-collation.rst

.. include:: /includes/extracts/collation-index-type-restrictions.rst

.. include:: /includes/extracts/collation-index-type-restrictions-addendum.rst

Collation and Index Use
```````````````````````

.. include:: /includes/extracts/collation-index.rst

Options for ``text`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for :doc:`text </core/index-text>`
indexes only:

.. include:: /includes/apiargs/method-db.collection.createIndexes-options-text.rst

Options for ``2dsphere`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following option is available for :doc:`2dsphere </core/2dsphere>`
indexes only:

.. include:: /includes/apiargs/method-db.collection.createIndexes-options-2dsphere.rst

Options for ``2d`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for :doc:`2d </core/2d>` indexes
only:

.. include:: /includes/apiargs/method-db.collection.createIndexes-options-2d.rst

Options for ``geoHaystack`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following option is available for :doc:`geoHaystack </core/geohaystack>`
indexes only:

.. include:: /includes/apiargs/method-db.collection.createIndexes-options-geohaystack.rst

.. _createIndexes-method-wildcard-option:

Options for ``wildcard`` indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following option is available for
:ref:`wildcard <wildcard-index-core>` indexes only:

.. include:: /includes/apiargs/method-db.collection.createIndexes-options-wildcard.rst

Behaviors
---------

The :method:`db.collection.createIndexes()` method has the following
behaviors.

.. warning::

   Foreground index builds block all other operations on the database.

Recreating an Existing Index
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you call :method:`db.collection.createIndexes()` for an index or
indexes that already exist, MongoDB does not recreate the existing
index or indexes.

Index Options
~~~~~~~~~~~~~

Non-Collation Options
``````````````````````

With the exception of the :ref:`collation option
<createIndexes-collation-option>`, if you create an index with one set
of index options and then try to recreate the same index but with
different index options, MongoDB will not change the options nor
recreate the index.

To change these index options, drop the existing index with
:method:`db.collection.dropIndex()` before running
:method:`db.collection.createIndexes()` with the new options.

Collation Option
````````````````

.. include:: /includes/extracts/collation-index-options.rst

Index Key Length Limit
~~~~~~~~~~~~~~~~~~~~~~

For MongoDB 2.6 through MongoDB versions with
:ref:`featureCompatibilityVersion <view-fcv>` (fCV) set to ``"4.0"`` or
earlier, MongoDB will **not** create an index on a collection if the
index entry for an existing document exceeds the |limit|.

.. |limit| replace:: :limit:`Maximum Index Key Length <Index Key Limit>`

.. _createIndexes-method-wildcard-behavior:

Wildcard Indexes
~~~~~~~~~~~~~~~~

.. versionadded:: 4.2

- .. include:: /includes/extracts/wildcard-index-id.rst

- .. include:: /includes/extracts/wildcard-index-fcv.rst

- .. include:: /includes/extracts/wildcard-index-limitations.rst

For examples of wildcard index creation, see
:ref:`createIndexes-method-wildcard-examples`. For complete 
documentation on Wildcard Indexes, see :ref:`wildcard-index-core`.

Example
-------

.. seealso:: :method:`db.collection.createIndex()` for examples of
   various index specifications.

Create Indexes Without Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider a ``restaurants`` collection containing documents that
resemble the following:

.. code-block:: javascript

   {
      location: {
         type: "Point",
         coordinates: [-73.856077, 40.848447]
      },
      name: "Morris Park Bake Shop",
      cuisine: "Cafe",
      borough: "Bronx",
   }

The following example creates two indexes on the ``restaurants``
collection: an ascending index on the ``borough`` field and a
:doc:`2dsphere </core/2dsphere>` index on the ``location`` field.

.. code-block:: sh

   db.restaurants.createIndexes([{"borough": 1}, {"location": "2dsphere"}])

Create Indexes with Collation Specified
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates two indexes on the ``products``
collection: an ascending index on the ``manufacturer`` field and an
ascending index on the ``category`` field. Both indexes use a :ref:`collation
<create-index-collation>` that specifies the locale ``fr`` and
comparison strength ``2``:

.. code-block:: javascript

   db.products.createIndexes( [ { "manufacturer": 1}, { "category": 1 } ],
      { collation: { locale: "fr", strength: 2 } })

For queries or sort operations on the indexed keys that uses the same collation
rules, MongoDB can use the index. For details, see :ref:`createIndex-collation-index-use`.

.. _createIndexes-method-wildcard-examples:

Create a Wildcard Index
~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 4.2

   .. include:: /includes/extracts/wildcard-index-fcv.rst

   For complete documentation on Wildcard Indexes, see
   :ref:`wildcard-index-core`.

The following lists examples of wildcard index creation:

- :ref:`createIndexes-method-onepath`
- :ref:`createIndexes-method-allpaths`
- :ref:`createIndexes-method-inclusion`
- :ref:`createIndexes-method-exclusion`

.. _createIndexes-method-onepath:

Create a Wildcard Index on a Single Field Path
``````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index on the 
``product_attributes`` field and its subfields:

.. code-block:: shell

   use inventory
   db.products_catalog.createIndexes( 
     [ { "product_attributes.$**" : 1 } ] 
   )

The wildcard index can support arbitrary single-field queries on 
``product_attributes`` and any of its subpaths:

.. code-block:: shell

   db.products_catalog.find( { "product_attributes.superFlight" : true } )
   db.products_catalog.find( { "product_attributes.maxSpeed" : { $gt : 20 } } )
   db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )

.. _createIndexes-method-allpaths:

Create a Wildcard Index on All Field Paths
``````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index on all fields and
subfields:

.. code-block:: shell

   use inventory
   db.products_catalog.createIndexes(
     [ { "$**" : 1 } ]
   )

The created index can support queries on any arbitrary field 
within documents in the collection:

.. code-block:: shell

   db.products_catalog.find( { "product_price" : { $lt : 25 } } )
   db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )

.. _createIndexes-method-inclusion:

Include Specific Fields in Wildcard Index Coverage
``````````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index and uses
the ``wildcardProjection`` option to include only the
``product_attributes.elements`` and ``product_attributes.resistance``
fields and their subfields as part of index coverage.

.. code-block:: shell

   use inventory
   db.products_catalog.createIndexes(
     [ { "$**" : 1 } ],
     {
       "wildcardProjection" : {
         "product_attributes.elements" : 1,
         "product_attributes.resistance" : 1
       }
     }
   )

While the key pattern ``"$**"`` covers all fields in the document, the
``wildcardProjection`` field limits the index to only the included
fields. For complete documentation on ``wildcardProjection``, see 
:ref:`createIndexes-method-wildcard-option`.

The created index can support queries on any arbitrary field or subfield
**only if** that field is included by ``wildcardProjection``:

.. code-block:: shell

   db.products_catalog.find( { "product_attributes.elements" : { $eq: "Water" } } )
   db.products_catalog.find( { "product_attributes.resistance" : "Bludgeoning" } )

.. include:: /includes/extracts/wildcard-index-id.rst

.. _createIndexes-method-exclusion:

Omit Specific Fields from Wildcard Index Coverage
`````````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index and uses
the ``wildcardProjection`` document to exclude the 
``product_attributes.elements`` and ``product_attributes.resistance``
fields and their subfields from the wildcard index:

.. code-block:: shell

   use inventory
   db.products_catalog.createIndexes(
     [ { "$**" : 1 } ],
     {
       "wildcardProjection" : {
         "product_attributes.elements" : 0,
         "product_attributes.resistance" : 0
       }
     }
   )

While the key pattern ``"$**"`` covers all fields in the document, the
``wildcardProjection`` field excludes the specified fields from the
index. For complete documentation on ``wildcardProjection``, see 
:ref:`createIndexes-method-wildcard-option`.

The created index can support queries on any arbitrary field and
their subfields
**except** on the excluded fields and their subfields:

.. code-block:: shell

   db.products_catalog.find( { "product_attributes.maxSpeed" : { $gt: 25 } } )
   db.products_catalog.find( { "product_attributes.superStrength" : true } )

.. include:: /includes/extracts/wildcard-index-id-exclusion.rst

Additional Information
----------------------

For additional information about indexes, refer to:

- The :doc:`/indexes` section of this manual for full
  documentation of indexes and indexing in MongoDB.

- :method:`db.collection.getIndexes()` to view the specifications of
  existing indexes for a collection.

- :doc:`/core/index-text` for details on creating ``text``
  indexes.

- :ref:`index-feature-geospatial` and
  :ref:`index-geohaystack-index` for geospatial queries.

- :ref:`index-feature-ttl` for expiration of data.
