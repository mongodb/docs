object:
  name: createUser
  type: dbcommand
field:
  optional: false
  type: field
name: createUser
type: string
position: 1
description: |
  The name of the new user.
---
object:
  name: createUser
  type: dbcommand
field:
  optional: false
  type: field
name: pwd
type: string
position: 2
description: |
  The user's password. The password is sent to the server in cleartext.
  To encrypt the password in transit use SSL. The ``pwd`` field is not
  required if you run :dbcommand:`createUser` on the ``$external``
  database. Users created on ``$external`` are assumed to have
  credentials stored externally to MongoDB, as, for example, with
  :doc:`MongoDB Enterprise installations that use Kerberos
  </tutorial/control-access-to-mongodb-with-kerberos-authentication>`.
---
object:
  name: createUser
  type: dbcommand
field:
  optional: true
  type: any
name: customData
type: document
position: 3
description: |
  Any arbitrary information.
---
object:
  name: createUser
  type: dbcommand
field:
  optional: false
  type: field
name: roles
type: array
position: 4
description: |
  The roles granted to the user. You can specify both :ref:`system roles
  <system-user-roles>` and custom roles created with
  :dbcommand:`createRole`. The array can take both documents and
  strings. Specify a role as a document if the role exists in another
  database. Specify the role as a string name if it exists in the
  current database. To create a user without roles, specify an empty
  ``roles`` array. For more information on specifying a role, see
  the :data:`~admin.system.users.roles` array.
---
object:
  name: createUser
  type: dbcommand
field:
  optional: true
  type: field
name: writeConcern
type: document
position: 5
description: |
  The level of :doc:`write concern </reference/write-concern>` to apply
  to this operation. The ``writeConcern`` document uses the same fields
  as the :dbcommand:`getLastError` command.
...
