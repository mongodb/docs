.. meta::
   :robots: noindex, nosnippet

.. _dotnet-client-sets:

===============
Sets - .NET SDK
===============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 10.2.0

Overview
--------

A Realm set, like the C# 
`HashSet<> <https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1?view=net-5.0>`_, 
is an implementation of   
`ICollection<> <https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icollection-1?view=net-5.0>`_ 
and
`IEnumerable<> <https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1?view=net-5.0>`_. 
It supports values of any 
:ref:`Realm type <dotnet-objects>` except :ref:`collections <dotnet-client-collections>`. 
To define a set, use a getter-only ``ISet<TValue>`` property, where ``TValue`` 
is any of the supported types.

Deleting an object from the database will remove it from any sets 
in which it existed. Therefore, a set of objects will never contain null objects.
However, sets of primitive types can contain null values. If you do not 
want to allow null values in a set, then either use non-nullable types in 
the set declaration (for example, use ``ISet<double>`` instead of 
``ISet<double?>``). If you are using the older schema 
type definition (your classes derive from the ``RealmObject`` base class),
or you do not have nullability enabled, you will need to use the
:ref:`[Required]<dotnet-required-optional-property>` attribute if the set  
contains nullable reference types, such as ``string`` or ``byte[]``. 

.. important:: Not Supported with Sync

   Local-only realms support collections of nullable (optional) values, 
   but ``Sync`` does not.

Set Types
---------
The following code shows examples of set types:

.. literalinclude:: /examples/generated/dotnet/DataTypesSectionExamples.snippet.sets.cs
   :language: csharp

Usage Example
-------------
The following code shows how to create, write to, and read from Sets.

.. literalinclude:: /examples/generated/dotnet/DataTypesSectionExamples.snippet.query-sets.cs
   :language: csharp

Watching For Changes
---------------------

You can use the `INotifyCollectionChanged.CollectionChanged 
<https://learn.microsoft.com/en-us/dotnet/api/system.collections.specialized.inotifycollectionchanged.collectionchanged>`__ 
event on a set to watch for changes to the set, and the 
`INotifyPropertyChanged.PropertyChanged 
<https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifypropertychanged.propertychanged>`__  
event to watch for changes to specific properties in the set. 

In the following code example, we have a class with an 
``ISet<string>`` property named ``StringSet``. We set up event 
handlers for both the ``CollectionChanged`` and ``PropertyChanged`` events:

.. literalinclude:: /examples/generated/dotnet/ProgressNotifications.snippet.notify-set-change.cs
   :language: csharp
