=====================================
Aggregation with User Preference Data
=====================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Data Model
----------

Consider a hypothetical sports club with a database that contains a
``users`` collection that tracks the user's join dates, sport preferences,
and stores these data in documents that resemble the following:

.. code-block:: javascript

   {
     _id : "jane",
     joined : ISODate("2011-03-02"),
     likes : ["golf", "racquetball"]
   }
   {
     _id : "joe",
     joined : ISODate("2012-07-02"),
     likes : ["tennis", "golf", "swimming"]
   }

.. redacting following section, upon request of Mathias.

   Return a Single Field
   ---------------------

   The following operation uses :pipeline:`$project` to return only the
   ``_id`` field and to return it for all documents in the ``users``
   collection:

   .. code-block:: javascript

      db.users.aggregate(
        [
          { $project : { _id:1 } }
        ]
      )

   The operation returns results that resemble the following:

   .. code-block:: javascript

      {
        "_id" : "joe"
      },
      {
        "_id" : "jane"
      },
      {
        "_id" : "jill"
      }

   For basic query and projection operations, standard queries with the
   :method:`find() <db.collection.find()>` method are preferable. This
   operation appears as an hypothetical example only.

.. end-redaction

Normalize and Sort Documents
----------------------------

The following operation returns user names in upper case and in
alphabetical order. The aggregation includes user names for all documents in
the ``users`` collection. You might do this to normalize user names for
processing.

.. code-block:: javascript

   db.users.aggregate(
     [
       { $project : { name:{$toUpper:"$_id"} , _id:0 } },
       { $sort : { name : 1 } }
     ]
   )

All documents from the ``users`` collection pass through the
pipeline, which consists of the following operations:

- The :pipeline:`$project` operator:

  - creates a new field called ``name``.

  - converts the value of the ``_id`` to upper case, with the
    :expression:`$toUpper` operator. Then the
    :pipeline:`$project` creates a new field, named ``name``
    to hold this value.

  - suppresses the ``id`` field. :pipeline:`$project` will pass
    the ``_id`` field by default, unless explicitly suppressed.

- The :pipeline:`$sort` operator orders the results by the
  ``name`` field.

The results of the aggregation would resemble the following:

.. code-block:: javascript

   {
     "name" : "JANE"
   },
   {
     "name" : "JILL"
   },
   {
     "name" : "JOE"
   }

.. todo:: resolve the following commented block:

.. removed the following block until we can get it corrected. It would
   be ok to delete eventually.

   <bg> I think this example needs reworking. I don't think it returns
        the top 4 months that people tend to join the club, just the
        first four in the calendar year. For example, if people joined
        as follows: Jan 1 person, Feb 2, Mar 2, Apr 1, June 100, the
        query would still return Jan, Feb, Mar, Apr.

   <tycho> Agreed, it would need to group by month joined, and then
           sort those documents.

   Determine Most Common Join Month in Collection
   ----------------------------------------------

   .. code-block:: javascript

      db.users.aggregate(
        [
          { $project : { month_joined : { $month : "$joined" } } },
          { $sort : { month_joined : 1 } },
          { $limit : 4 }
        ]
      )

   The pipeline passes all documents in the ``users`` collection through
   the following operations:

   - The :pipeline:`$project` operator creates a new field called ``month_joined``.

   - The :expression:`$month` operator converts the ``joined`` field to
     integer representations of the month. Then the :pipeline:`$project` operator
     assigns the values to the ``month_joined`` field.

   - The :pipeline:`$sort` operator sorts the results by the ``month_joined`` field.

   - The :pipeline:`$limit` operator limits the results to the first 4 result documents.

   The operation returns results that resemble the following:

   .. code-block:: javascript

      {
        "_id" : "ruth",
        "month_joined" : 1
      },
      {
        "_id" : "harold",
        "month_joined" : 1
      },
      {
        "_id" : "kate",
        "month_joined" : 1
      },
      {
        "_id" : "jill",
        "month_joined" : 2
      }

.. end-comment

Return Usernames Ordered by Join Month
--------------------------------------

The following aggregation operation returns user names sorted by the
month they joined. This kind of aggregation could help generate
membership renewal notices.

.. code-block:: javascript

   db.users.aggregate(
     [
       { $project : 
          {
            month_joined : { $month : "$joined" },
            name : "$_id",
            _id : 0
          }
       },
       { $sort : { month_joined : 1 } }
     ]
   )

The pipeline passes all documents in the ``users`` collection through
the following operations:

- The :pipeline:`$project` operator:

  - Creates two new fields: ``month_joined`` and ``name``.

  - Suppresses the ``id`` from the results. The :method:`aggregate()
    <db.collection.aggregate()>` method includes the ``_id``, unless
    explicitly suppressed.

- The :expression:`$month` operator converts the values of the
  ``joined`` field to integer representations of the month. Then the
  :pipeline:`$project` operator assigns those values to the
  ``month_joined`` field.

- The :pipeline:`$sort` operator sorts the results by the
  ``month_joined`` field.

The operation returns results that resemble the following:

.. code-block:: javascript

   {
     "month_joined" : 1,
     "name" : "ruth"
   },
   {
     "month_joined" : 1,
     "name" : "harold"
   },
   {
     "month_joined" : 1,
     "name" : "kate"
   }
   {
     "month_joined" : 2,
     "name" : "jill"
   }

Return Total Number of Joins per Month
--------------------------------------

The following operation shows how many people joined each month of the
year. You might use this aggregated data for recruiting and marketing
strategies.

.. code-block:: javascript

   db.users.aggregate(
     [
       { $project : { month_joined : { $month : "$joined" } } } ,
       { $group : { _id : {month_joined:"$month_joined"} , number : { $sum : 1 } } },
       { $sort : { "_id.month_joined" : 1 } }
     ]
   )

The pipeline passes all documents in the ``users`` collection through
the following operations:

- The :pipeline:`$project` operator creates a new field called
  ``month_joined``.

- The :expression:`$month` operator converts the values of the
  ``joined`` field to integer representations of the month. Then the
  :pipeline:`$project` operator assigns the values to the
  ``month_joined`` field.

- The :pipeline:`$group` operator collects all documents with a
  given ``month_joined`` value and counts how many documents there are
  for that value. Specifically, for each unique value,
  :pipeline:`$group` creates a new "per-month" document with two
  fields:

  - ``_id``, which contains a nested document with the
    ``month_joined`` field and its value.

  - ``number``, which is a generated field. The :group:`$sum`
    operator increments this field by 1 for every document containing
    the given ``month_joined`` value.

- The :pipeline:`$sort` operator sorts the documents created by
  :pipeline:`$group` according to the contents of the
  ``month_joined`` field.

The result of this aggregation operation would resemble the following:

.. code-block:: javascript

   {
     "_id" : {
       "month_joined" : 1
     },
     "number" : 3
   },
   {
     "_id" : {
       "month_joined" : 2
     },
     "number" : 9
   },
   {
     "_id" : {
       "month_joined" : 3
     },
     "number" : 5
   }

Return the Five Most Common "Likes"
-----------------------------------

The following aggregation collects top five most "liked" activities in
the data set. This type of analysis could help inform planning and
future development.

.. code-block:: javascript

   db.users.aggregate(
     [
       { $unwind : "$likes" },
       { $group : { _id : "$likes" , number : { $sum : 1 } } },
       { $sort : { number : -1 } },
       { $limit : 5 }
     ]
   )

The pipeline begins with all documents in the ``users`` collection,
and passes these documents through the following operations:

- The :pipeline:`$unwind` operator separates each value in the
  ``likes`` array, and creates a new version of the source document
  for every element in the array.

  .. example::

     Given the following document from the ``users`` collection:

     .. code-block:: javascript

        {
          _id : "jane",
          joined : ISODate("2011-03-02"),
          likes : ["golf", "racquetball"]
        }

     The :pipeline:`$unwind` operator would create the following
     documents:

     .. code-block:: javascript

        {
          _id : "jane",
          joined : ISODate("2011-03-02"),
          likes : "golf"
        }
        {
          _id : "jane",
          joined : ISODate("2011-03-02"),
          likes : "racquetball"
        }

- The :pipeline:`$group` operator collects all documents with the same
  value for the ``likes`` field and counts each grouping. With this
  information, :pipeline:`$group` creates a new document with two
  fields:

  - ``_id``, which contains the ``likes`` value.

  - ``number``, which is a generated field. The :group:`$sum`
    operator increments this field by 1 for every document containing
    the given ``likes`` value.

- The :pipeline:`$sort` operator sorts these documents by the
  ``number`` field in reverse order.

- The :pipeline:`$limit` operator only includes the first 5 result
  documents.

The results of aggregation would resemble the following:

.. code-block:: javascript

   {
     "_id" : "golf",
     "number" : 33
   },
   {
     "_id" : "racquetball",
     "number" : 31
   },
   {
     "_id" : "swimming",
     "number" : 24
   },
   {
     "_id" : "handball",
     "number" : 19
   },
   {
     "_id" : "tennis",
     "number" : 18
   }
