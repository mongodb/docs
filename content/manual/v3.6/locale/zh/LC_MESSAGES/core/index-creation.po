#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/index-creation.txt:7
msgid "Index Build Operations on a Populated Collection"
msgstr ""

#: ../source/core/index-creation.txt:17
msgid ""
"By default, creating an index on a populated collection blocks all other "
"operations on a database. When building an index on a populated "
"collection, the database that holds the collection is unavailable for "
"read or write operations until the index build completes. Any operation "
"that requires a read or write lock on all databases (e.g. "
":command:`listDatabases`) will wait for the foreground index build to "
"complete."
msgstr ""

#: ../source/core/index-creation.txt:29
msgid "Background Construction"
msgstr ""

#: ../source/core/index-creation.txt:33
msgid ""
"The following section refers to building indexes on a standalone. For a "
"replica set or a sharded cluster, use a rolling index build. See "
":doc:`/tutorial/build-indexes-on-replica-sets` for details."
msgstr ""

#: ../source/core/index-creation.txt:37
msgid ""
"For potentially long running index building operations on standalone "
"deployments, consider the ``background`` option so that the MongoDB "
"database remains available during the index building operation."
msgstr ""

#: ../source/core/index-creation.txt:41
msgid ""
"For example, to create an index in the background of the ``zipcode`` "
"field of the ``people`` collection, issue the following:"
msgstr ""

#: ../source/core/index-creation.txt:48
msgid "By default, ``background`` is ``false`` for building MongoDB indexes."
msgstr ""

#: ../source/core/index-creation.txt:50
msgid ""
"You can combine the background option with other options, as in the "
"following:"
msgstr ""

#: ../source/core/index-creation.txt:58
msgid "Behavior"
msgstr ""

#: ../source/core/index-creation.txt:60
msgid ""
"Background indexing operations run in the background so that other "
"database operations can run while creating the index. However, the "
":binary:`~bin.mongo` shell session or connection where you are creating "
"the index *will* block until the index build is complete. To continue "
"issuing commands to the database, open another connection or "
":binary:`~bin.mongo` instance."
msgstr ""

#: ../source/core/index-creation.txt:67
msgid ""
"Queries will not use partially-built indexes: the index will only be "
"usable once the index build is complete."
msgstr ""

#: ../source/core/index-creation.txt:72
msgid ""
"If MongoDB is building an index in the background, you cannot perform "
"other administrative operations involving that collection, including "
"running :dbcommand:`repairDatabase`, dropping the collection (i.e. "
":method:`db.collection.drop()`), and running :dbcommand:`compact`. These "
"operations will return an error during background index builds."
msgstr ""

#: ../source/core/index-creation.txt:80
msgid "Performance"
msgstr ""

#: ../source/core/index-creation.txt:82
msgid ""
"The background index operation uses an incremental approach that is "
"slower than the normal \"foreground\" index builds. If the index is "
"larger than the available RAM, then the incremental process can take "
"*much* longer than the foreground build."
msgstr ""

#: ../source/core/index-creation.txt:87
msgid ""
"Building an index can have a severe impact on the performance of the "
"database. If possible, build indexes during designated maintenance "
"windows."
msgstr ""

#: ../source/includes/fact-index-build-default-memory-limit.rst:1
msgid ""
"You can build one or more indexes on a collection with the database "
"command :dbcommand:`createIndexes`. The default limit on memory usage for"
" a :dbcommand:`createIndexes` operation is 500 megabytes. You can "
"override this limit by setting the "
":parameter:`maxIndexBuildMemoryUsageMegabytes` server parameter."
msgstr ""

#: ../source/includes/fact-index-build-default-memory-limit.rst:7
msgid ""
":dbcommand:`createIndexes` uses a combination of memory and temporary "
"files on disk to complete index builds. Once the memory limit is reached,"
" :dbcommand:`createIndexes` uses temporary disk files in a subdirectory "
"named ``_tmp`` within the :option:`--dbpath <mongod --dbpath>` directory "
"for additional scratch space. The higher the memory limit is set, the "
"faster the index build can complete, but be careful not to set this limit"
" too high relative to available RAM or your system can run out of free "
"memory."
msgstr ""

#: ../source/core/index-creation.txt:96
msgid "Interrupted Index Builds"
msgstr ""

#: ../source/core/index-creation.txt:98
msgid ""
"If a background index build is in progress when a standalone (i.e. not "
"part of a replica set) :binary:`~bin.mongod` process terminates, when the"
" instance restarts the index build will restart as foreground index "
"build. If the index build encounters any errors, such as a duplicate key "
"error, the :binary:`~bin.mongod` will exit with an error."
msgstr ""

#: ../source/core/index-creation.txt:104
msgid ""
"To start the standalone :binary:`~bin.mongod` after a failed index build,"
" use the :setting:`storage.indexBuildRetry` or "
":option:`--noIndexBuildRetry <mongod --noIndexBuildRetry>` to skip the "
"index build on start up."
msgstr ""

#: ../source/core/index-creation.txt:109
msgid ""
":setting:`storage.indexBuildRetry` and :option:`--noIndexBuildRetry "
"<mongod --noIndexBuildRetry>` do not prevent replicated index builds."
msgstr ""

#: ../source/core/index-creation.txt:115
msgid "Build Indexes on Replica Sets and Sharded Clusters"
msgstr ""

#: ../source/core/index-creation.txt:117
msgid ""
"To minimize the impact of building an index on replica sets and sharded "
"clusters with replica set shards, use a rolling index build procedure as "
"described on :doc:`/tutorial/build-indexes-on-replica-sets`."
msgstr ""

#: ../source/core/index-creation.txt:121
msgid "If not using the rolling index build procedure:"
msgstr ""

#: ../source/core/index-creation.txt:123
msgid ""
"A foreground index build on a :term:`primary` requires a DB lock. It "
"replicates as a foreground index build on :term:`replica set` "
":term:`secondaries <secondary>`, and the replication worker takes a "
"global DB lock that queues reads and writes to all databases on the "
"indexing server."
msgstr ""

#: ../source/core/index-creation.txt:129
msgid ""
"A background index build on a primary replicates as background index "
"builds on secondaries. The replication worker does not take a global DB "
"lock, and secondary reads are not affected."
msgstr ""

#: ../source/core/index-creation.txt:133
msgid ""
"For both foreground and background index builds on the primary, the index"
" operations on replica set secondaries begin after the primary finishes "
"building the index."
msgstr ""

#: ../source/core/index-creation.txt:137
msgid ""
"The amount of time required to build the index on a secondary must be "
"within the window of the :term:`oplog`, so that the secondary can catch "
"up with the primary."
msgstr ""

#: ../source/core/index-creation.txt:141
msgid ""
"See :ref:`index-building-replica-sets` for a complete procedure for "
"building indexes on replica sets and sharded clusters."
msgstr ""

#: ../source/core/index-creation.txt:148
msgid "Index Names"
msgstr ""

#: ../source/core/index-creation.txt:150
msgid ""
"The default name for an index is the concatenation of the indexed keys "
"and each key's direction in the index, 1 or -1."
msgstr ""

#: ../source/core/index-creation.txt:160
msgid "The resulting index is named: ``item_1_quantity_-1``."
msgstr ""

#: ../source/core/index-creation.txt:162
msgid ""
"Optionally, you can specify a name for an index instead of using the "
"default name."
msgstr ""

#: ../source/core/index-creation.txt:172
msgid "The resulting index has the name ``inventory``."
msgstr ""

#: ../source/core/index-creation.txt:174
msgid ""
"To view the name of an index, use the :method:`getIndexes() "
"<db.collection.getIndexes()>` method."
msgstr ""

#: ../source/core/index-creation.txt:178
msgid "View Index Build Operations"
msgstr ""

#: ../source/core/index-creation.txt:180
msgid ""
"To see the status of an index build operation, you can use the "
":method:`db.currentOp()` method in the :binary:`~bin.mongo` shell. To "
"filter the current operations for index creation operations, see :ref"
":`currentOp-index-creation` for an example."
msgstr ""

#: ../source/core/index-creation.txt:185
msgid ""
"The :data:`~currentOp.msg` field will include the percent of the build "
"that is complete."
msgstr ""

#: ../source/core/index-creation.txt:189
msgid "Terminate Index Build Operation"
msgstr ""

#: ../source/core/index-creation.txt:191
msgid ""
"To terminate an ongoing index build, use the :method:`db.killOp()` method"
" in the :binary:`~bin.mongo` shell. For index builds, the effects of "
":method:`db.killOp()` may not be immediate and may occur well after much "
"of the index build operation has completed."
msgstr ""

#: ../source/core/index-creation.txt:196
msgid ""
"You cannot terminate a *replicated* index build on secondary members of a"
" replica set. To minimize the impact of building an index on replica sets"
" and sharded clusters with replica set shards, see :doc:`/tutorial/build-"
"indexes-on-replica-sets`."
msgstr ""

#: ../source/core/index-creation.txt:203
msgid ":method:`db.currentOp()`, :method:`db.killOp()`"
msgstr ""

#~ msgid "Index Creation"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB provides several options that "
#~ "*only* affect the creation of the "
#~ "index. Specify these options in a "
#~ "document as the second argument to "
#~ "the :method:`db.collection.createIndex()` method. "
#~ "This section describes the uses of "
#~ "these creation options and their "
#~ "behavior."
#~ msgstr ""

#~ msgid "Related"
#~ msgstr ""

#~ msgid ""
#~ "Some options that you can specify "
#~ "to :method:`~db.collection.createIndex()` options "
#~ "control the :doc:`properties of the "
#~ "index </core/index-properties>`, which are "
#~ "*not* index creation options. For "
#~ "example, the :doc:`unique </core/index-"
#~ "unique>` option affects the behavior of"
#~ " the index after creation."
#~ msgstr ""

#~ msgid ""
#~ "For a detailed description of MongoDB's"
#~ " index types, see :doc:`/core/index-types`"
#~ " and :doc:`/core/index-properties` for "
#~ "related documentation."
#~ msgstr ""

#~ msgid ""
#~ "Before 2.2, a single :program:`mongod` "
#~ "instance could only build one index "
#~ "at a time."
#~ msgstr ""

#~ msgid ""
#~ "To start the :program:`mongod` after a"
#~ " failed index build, use the "
#~ ":setting:`storage.indexBuildRetry` or "
#~ ":option:`--noIndexBuildRetry <mongod --noIndexBuildRetry>`"
#~ " to skip the index build on "
#~ "start up. .. _index-creation-"
#~ "building-indexes-on-secondaries:"
#~ msgstr ""

#~ msgid ""
#~ "By default, creating an index blocks "
#~ "all other operations on a database. "
#~ "When building an index on a "
#~ "collection, the database that holds the"
#~ " collection is unavailable for read "
#~ "or write operations until the index "
#~ "build completes. Any operation that "
#~ "requires a read or write lock on"
#~ " all databases (e.g. :command:`listDatabases`)"
#~ " will wait for the foreground index"
#~ " build to complete."
#~ msgstr ""

#~ msgid ""
#~ "For potentially long running index "
#~ "building operations, consider the "
#~ "``background`` operation so that the "
#~ "MongoDB database remains available during "
#~ "the index building operation. For "
#~ "example, to create an index in the"
#~ " background of the ``zipcode`` field "
#~ "of the ``people`` collection, issue the"
#~ " following:"
#~ msgstr ""

#~ msgid ""
#~ "As of MongoDB version 2.4, a "
#~ ":program:`mongod` instance can build more "
#~ "than one index in the background "
#~ "concurrently."
#~ msgstr ""

#~ msgid ""
#~ "Before 2.4, a :program:`mongod` instance "
#~ "could only build one background index"
#~ " per database at a time."
#~ msgstr ""

#~ msgid ""
#~ "Background indexing operations run in "
#~ "the background so that other database"
#~ " operations can run while creating "
#~ "the index. However, the :program:`mongo` "
#~ "shell session or connection where you"
#~ " are creating the index *will* block"
#~ " until the index build is complete."
#~ " To continue issuing commands to the"
#~ " database, open another connection or "
#~ ":program:`mongo` instance."
#~ msgstr ""

#~ msgid ""
#~ "If your application includes "
#~ ":method:`~db.collection.createIndex()` operations, and "
#~ "an index *doesn't* exist for other "
#~ "operational concerns, building the index "
#~ "can have a severe impact on the"
#~ " performance of the database."
#~ msgstr ""

#~ msgid ""
#~ "To avoid performance issues, make sure"
#~ " that your application checks for the"
#~ " indexes at start up using the "
#~ ":method:`~db.collection.getIndexes()` method or the"
#~ " :api:`equivalent method for your driver"
#~ " <>` and terminates if the proper "
#~ "indexes do not exist. Always build "
#~ "indexes in production instances using "
#~ "separate application code, during designated"
#~ " maintenance windows."
#~ msgstr ""

#~ msgid ""
#~ "If a background index build is in"
#~ " progress when the :program:`mongod` "
#~ "process terminates, when the instance "
#~ "restarts the index build will restart"
#~ " as foreground index build. If the"
#~ " index build encounters any errors, "
#~ "such as a duplicate key error, the"
#~ " :program:`mongod` will exit with an "
#~ "error."
#~ msgstr ""

#~ msgid "Building Indexes on Secondaries"
#~ msgstr ""

#~ msgid ""
#~ "Secondary members can now build indexes"
#~ " in the background. Previously all "
#~ "index builds on secondaries were in "
#~ "the foreground."
#~ msgstr ""

#~ msgid ""
#~ "Background index operations on a "
#~ ":term:`replica set` :term:`secondaries <secondary>`"
#~ " begin after the :term:`primary` completes"
#~ " building the index. If MongoDB "
#~ "builds an index in the background "
#~ "on the primary, the secondaries will "
#~ "then build that index in the "
#~ "background."
#~ msgstr ""

#~ msgid ""
#~ "To build large indexes on secondaries"
#~ " the best approach is to restart "
#~ "one secondary at a time in "
#~ ":term:`standalone` mode and build the "
#~ "index. After building the index, restart"
#~ " as a member of the replica "
#~ "set, allow it to catch up with "
#~ "the other members of the set, and"
#~ " then build the index on the "
#~ "next secondary. When all the secondaries"
#~ " have the new index, step down "
#~ "the primary, restart it as a "
#~ "standalone, and build the index on "
#~ "the former primary."
#~ msgstr ""

#~ msgid ""
#~ "Indexes on secondary members in "
#~ "\"recovering\" mode are always built in"
#~ " the foreground to allow them to "
#~ "catch up as soon as possible."
#~ msgstr ""

#~ msgid ""
#~ "See :ref:`index-building-replica-sets` "
#~ "for a complete procedure for building"
#~ " indexes on secondaries."
#~ msgstr ""

#~ msgid "Example"
#~ msgstr ""

#~ msgid "index"
#~ msgstr ""

#~ msgid "options"
#~ msgstr ""

#~ msgid "background creation"
#~ msgstr ""

#~ msgid "name"
#~ msgstr ""

#~ msgid "Index Build"
#~ msgstr ""

#~ msgid "On this page"
#~ msgstr ""

#~ msgid ""
#~ "To start the :program:`mongod` after a"
#~ " failed index build, use the "
#~ ":setting:`storage.indexBuildRetry` or "
#~ ":option:`--noIndexBuildRetry <mongod --noIndexBuildRetry>`"
#~ " to skip the index build on "
#~ "start up."
#~ msgstr ""

#~ msgid ""
#~ "To see the status of an index "
#~ "build operation, you can use the "
#~ ":method:`db.currentOp()` method in the "
#~ ":program:`mongo` shell. To filter the "
#~ "current operations for index creation "
#~ "operations, see :ref:`currentOp-index-"
#~ "creation` for an example."
#~ msgstr ""

#~ msgid ""
#~ "To terminate an ongoing index build, "
#~ "use the :method:`db.killOp()` method in "
#~ "the :program:`mongo` shell. For index "
#~ "builds, the effects of :method:`db.killOp()`"
#~ " may not be immediate and may "
#~ "occur well after much of the index"
#~ " build operation has completed."
#~ msgstr ""

#~ msgid ""
#~ "You cannot terminate a *replicated* "
#~ "index build on secondary members of "
#~ "a replica set. To minimize the "
#~ "impact of building an index on "
#~ "replica sets, see :doc:`/tutorial/build-"
#~ "indexes-on-replica-sets`."
#~ msgstr ""

#~ msgid ""
#~ "Before MongoDB 2.4, you could *only* "
#~ "terminate *background* index builds. After "
#~ "2.4, you can terminate both *background*"
#~ " index builds and foreground index "
#~ "builds."
#~ msgstr ""

