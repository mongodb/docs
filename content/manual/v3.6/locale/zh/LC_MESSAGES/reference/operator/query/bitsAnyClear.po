#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/operator/query/bitsAnyClear.txt:3
msgid "$bitsAnyClear"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:17
msgid ""
":query:`$bitsAnyClear` matches documents where *any* of the bit positions"
" given by the query are clear (i.e. ``0``) in ``field``."
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:3
msgid "``{ <field>: { $bitsAnyClear: <numeric bitmask> } }``"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:5
msgid ""
"``{ <field>: { $bitsAnyClear: <`` :bsontype:`BinData <data_binary>` "
"``bitmask> } }``"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:7
msgid "``{ <field>: { $bitsAnyClear: [ <position1>, <position2>, ... ] } }``"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:9
msgid ""
"The ``field`` value must be either numerical or a :bsontype:`BinData "
"<data_binary>` instance. Otherwise, :query:`$bitsAnyClear` will not match"
" the current document."
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:16
msgid "Numeric Bitmask"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:14
msgid ""
"You can provide a numeric bitmask to be matched against the operand "
"field. It must be representable as a non-negative 32-bit signed integer. "
"Otherwise, :query:`$bitsAnyClear` will return an error."
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:20
#: ../source/reference/operator/query/bitsAnyClear.txt:85
msgid "BinData Bitmask"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:19
msgid ""
"You can also use an arbitrarily large :bsontype:`BinData <data_binary>` "
"instance as a bitmask."
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:25
msgid "Position List"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:23
msgid ""
"If querying a list of bit positions, each ``<position>`` must be a non-"
"negative integer. Bit positions start at ``0`` from the least significant"
" bit. For example, the decimal number ``254`` would have the following "
"bit positions:"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:29
msgid "**Bit Value**"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:31
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:33
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:35
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:37
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:39
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:41
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:43
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:61
msgid "1"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:45
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:63
msgid "0"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:47
msgid "**Position**"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:49
msgid "7"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:51
msgid "6"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:53
msgid "5"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:55
msgid "4"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:57
msgid "3"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:59
msgid "2"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:23
msgid "Behavior"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:26
msgid "Indexes"
msgstr ""

#: ../source/includes/extracts/fact-query-bitwise-indexes-bitsAnyClear.rst:1
msgid ""
"Queries cannot use indexes for the :query:`$bitsAnyClear` portion of a "
"query, although the other portions of a query can use indexes, if "
"applicable."
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:31
msgid "Floating Point Values"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-floating-point.rst:1
msgid ""
":query:`$bitsAnyClear` will not match numerical values that cannot be "
"represented as a signed 64-bit integer. This can be the case if a value "
"is either too large or too small to fit in a signed 64-bit integer, or if"
" it has a fractional component."
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:36
msgid "Sign Extension"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-sign-extension.rst:1
msgid ""
"Numbers are sign extended. For example, :query:`$bitsAnyClear` considers "
"bit position ``200`` to be set for the negative number ``-5``, but bit "
"position ``200`` to be clear for the positive number ``+5``."
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-sign-extension.rst:5
msgid ""
"In contrast, :bsontype:`BinData <data_binary>` instances are zero-"
"extended. For example, given the following document:"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-sign-extension.rst:12
msgid ""
":query:`$bitsAnyClear` will consider all bits outside of ``x`` to be "
"clear."
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:41
msgid "Examples"
msgstr ""

#: ../source/includes/extracts/fact-query-bitwise-example-collection.rst:1
msgid "The following examples will use a collection with the following documents:"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:46
msgid "Bit Position Array"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:48
msgid ""
"The following query uses the :query:`$bitsAnyClear` operator to test "
"whether field ``a`` has either bit position ``1`` or bit position ``5`` "
"clear, where the least significant bit is position ``0``."
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:56
#: ../source/reference/operator/query/bitsAnyClear.txt:74
#: ../source/reference/operator/query/bitsAnyClear.txt:94
msgid "The query matches the following documents:"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:64
msgid "Integer Bitmask"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:66
msgid ""
"The following query uses the :query:`$bitsAnyClear` operator to test "
"whether field ``a`` has any bits clear at positions ``0``, ``1``, and "
"``5`` (the binary representation of the bitmask ``35`` is ``00100011``)."
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:86
msgid ""
"The following query uses the :query:`$bitsAnyClear` operator to test "
"whether field ``a`` has any bits clear at positions `4` and `5` (the "
"binary representation of ``BinData(0, \"MC==\")`` is ``00110000``)."
msgstr ""

#~ msgid "On this page"
#~ msgstr ""

#~ msgid ""
#~ ":query:`$bitsAnyClear` will not match "
#~ "numerical values that cannot be "
#~ "represented as a signed 64-bit integer."
#~ " This can be the case if a "
#~ "value is either too large or small"
#~ " to fit in a signed 64-bit "
#~ "integer, or if it has a fractional"
#~ " component."
#~ msgstr ""

#~ msgid ""
#~ "Numbers are sign extended. For example,"
#~ " $bitsAllSet considers bit position ``200``"
#~ " to be set for the negative "
#~ "number ``-5``, but bit position ``200``"
#~ " to be clear for the positive "
#~ "number ``+5``."
#~ msgstr ""

#~ msgid "$bitsAllSet will consider all bits outside of ``x`` to be clear."
#~ msgstr ""

