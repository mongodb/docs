.. _schema-with-views:

=================
Use MongoDB Views
=================

.. meta::
   :description: Use views to control data visibility for BI Connector, allowing field selection, renaming, sorting, and transformations without a .drdl file.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Another way to control the data visible to |bi-short| without using a
:ref:`.drdl file <schema-with-drdl-file>` is to read from a
:manual:`view </core/views/>`. Views allow you to take a source
collection and choose which fields to display, change the names of
fields, sort data, and perform any kind of transformation that the
:manual:`aggregation pipeline </aggregation>` can accomplish.

.. example::

   You can use views to redact sensitive information from a collection
   and direct |bi-short| to read from the view, rather than the source
   collection.

Use the |mongo| shell method
:manual:`createView </reference/method/db.createView>` to define a
view on a collection and then use that view as a specified namespace
when starting |mongosqld|.

Examples
~~~~~~~~

Consider a collection named ``salaries`` in the ``employees`` database.
By creating a view on the ``salaries`` collection that excludes all
personally identifiable information, |bi-short| can safely facilitate
data analysis on the view without compromising the private data in the
source collection.

The following command starts |mongosqld| with data from a view named
``salaries_redacted`` in the ``employees`` database:

.. code-block:: shell

   mongosqld --sampleNamespaces "employees.salaries_redacted"

.. seealso::

   :option:`--sampleNamespaces <mongosqld --sampleNamespaces>`

Another use case for managing your schema with a MongoDB view is if
your working data set includes a sparsely populated but important field
which may be excluded in the |bi-short| sampling process.

Consider a collection named ``sparseCollection`` which contains one
field which occurs in every document and another field which occurs
only occasionally. A portion of the collection might look like this:

.. code-block:: javascript

   { "_id" : 0, "mainField": 247 }
   { "_id" : 1, "mainField": 71 }
   { "_id" : 2, "mainField": 981 }
   { "_id" : 3, "mainField": 712 }
   { "_id" : 4, "mainField": 781, "sparseField": 1000 }
   { "_id" : 5, "mainField": 256 }
   { "_id" : 6, "mainField": 910 }

To ensure that ``sparseField`` is included when |bi-short| creates
its schema, create a view in which ``sparseField`` is populated with
zeroes in every document in which it does not occur.

.. code-block:: javascript

   db.runCommand (
     {
       create: "denseCollection",
       viewOn: "sparseCollection",
       pipeline: [
         {
           $addFields: {
              sparseField: { $ifNull: [ "$sparseField", 0 ] }
           }
         }
       ]
     }
   )

To use the view as a data source when starting
|mongosqld|, specify it with the
:option:`--sampleNamespaces <mongosqld --sampleNamespaces>` option.

.. code-block:: shell

   mongosqld --sampleNamespaces "myDatabase.denseCollection"
