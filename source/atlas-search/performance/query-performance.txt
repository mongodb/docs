.. _query-perf:

=======================
|fts| Query Performance
=======================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: atlas search, view cluster performance, trigger atlas alerts, $match aggregation pipeline stage, $compound operator, stored source fields, return stored source, $sort aggregation pipeline stage, $near operator
   :description: Improve your query performance by understanding how query complexity, operators, and pipeline stages can affect cluster performance.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _query-operators-and-complexity:

Query Operators and Query Complexity
------------------------------------

The complexity level of |fts| queries and the type of :ref:`operators
<fts-operators>` used can affect database performance. Highly
complex queries with :ref:`multiple clauses <compound-ref>` are
resource-intensive, as are queries which use the :ref:`regex
<regex-ref>` (regular expression) operator.

|fts| queries are ranked by :ref:`score <scoring-ref>`. Queries that
return a large number of results are more computationally intensive
because they must keep track of all the scores for the result set.

.. _query-performance-monitoring:

Performance Monitoring
----------------------

You can :ref:`monitor <monitor-cluster-metrics>` your |service|
cluster and view charts with performance statistics on the |service|
:guilabel:`Metrics` tab. These metrics can help you see how |fts|
queries and index building affect your cluster's performance. To learn 
more, see :ref:`review-atlas-search-metrics`.

|service| might trigger some |service| :ref:`alerts <alerts>` when:

- |fts| queries your {+database-deployments+}, which can impact
  |service| performance metrics, such as the :ref:`query targeting 
  <query-targeting-resolution>` metrics.

  .. include:: /includes/fact-query-targeting-mongot.rst

- |fts| replicates data from MongoDB, which contributes to the 
  :ref:`metrics <monitor-cluster-metrics>` measured in |service|, such 
  as the number of :guilabel:`getmore` operations.

.. note::

   If your cluster's resources are stretched or near the
   limits of acceptable performance, consider :doc:`upgrading
   </scale-cluster>` to a larger cluster tier before implementing
   |fts| functionality.

.. _query-match-agg-stage:

``$match`` Aggregation Stage Usage
----------------------------------

Using a :manual:`$match </reference/operator/aggregation/match/>`
aggregation pipeline stage after a :ref:`$search <query-syntax-ref>`
stage can drastically slow down query results. If possible, design
your ``$search`` query so that all necessary filtering occurs in the
``$search`` stage to remove the need for a ``$match`` stage. The |fts| 
:ref:`compound-ref` operator is helpful for queries that require
multiple filtering operations. If you must use the :pipeline:`$match`
stage in your aggregation pipeline, consider using the
:ref:`storedSource <fts-stored-source-definition>` option to store 
only the fields that your :pipeline:`$match` condition needs. You can 
then use the :ref:`returnStoredSource 
<fts-return-stored-source-option>` option to retrieve stored fields. 

.. seealso:: 

   - :ref:`perf-ref-stored-source`
   - :ref:`$match Example <fts-return-stored-source-egs>`

.. _query-sort-agg-stage:

``$sort`` Aggregation Stage Usage 
---------------------------------

Using a :manual:`$sort </reference/operator/aggregation/sort/>` 
aggregation pipeline stage after a :ref:`$search <query-syntax-ref>` 
stage can drastically slow down query results. If possible, design
your ``$search`` query so that all necessary sorting occurs in the 
``$search`` stage to remove the need for a ``$sort`` stage. In 
general, the |fts| :ref:`compound-ref` operator is helpful for queries
that require multiple sorting operations. To sort documents based on a 
numeric, date, or geo field, consider using the |fts| :ref:`near-ref` 
operator. Alternatively, you can use the :ref:`storedSource 
<fts-stored-source-definition>` option to store only the fields that 
you need for :pipeline:`$sort` on |fts| and use the 
:ref:`returnStoredSource <fts-return-stored-source-option>` option 
to retrieve stored fields.

.. seealso:: 

   - :ref:`perf-ref-stored-source`
   - :ref:`$sort Example <fts-return-stored-source-egs>`

Continue Learning 
-----------------

Follow along with this video to learn how to understand, interate, and
improve your |fts| results using :ref:`explain <explain-ref>` and
:ref:`$search score details <fts-score-details>`.

*Duration: 5 Minutes*

.. video:: https://youtu.be/KPrunyBrehc
