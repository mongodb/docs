.. _x509-internal-authentication:

===================================================
Use x.509 Certificate for Membership Authentication
===================================================

.. default-domain:: mongodb

.. versionadded:: 2.6

MongoDB supports x.509 certificate authentication for use with a secure
:doc:`SSL connection </tutorial/configure-ssl>`. Sharded cluster
members and replica set members can use x.509 certificates to
verify their membership to the cluster or the replica set
instead of using :doc:`keyfiles
</core/authentication>`. The membership authentication is an internal
process.

For client authentication with x.509, see
:doc:`configure-x509-client-authentication`.

.. _`default distribution of MongoDB`: http://www.mongodb.org/downloads
.. _`MongoDB Enterprise`: http://www.mongodb.com/products/mongodb-enterprise

.. _x509-member-certificate:

Member x.509 Certificate
------------------------

The member certificate, used for internal authentication to verify
membership to the sharded cluster or a replica set, must have the
following properties:

- A single Certificate Authority (CA) must issue all the x.509
  certificates for the members of a sharded cluster or a replica set.

- The Distinguished Name (``DN``), found in the member certificate's
  ``subject``, must specify a non-empty value for *at least one* of the
  following attributes: Organization (``O``), the Organizational Unit
  (``OU``) or the Domain Component (``DC``).

- The Organization attributes (``O``\'s), the Organizational Unit
  attributes (``OU``\'s), and the Domain Components (``DC``\'s) must match
  those from the certificates for the other cluster members. To match,
  the certificate must match all specifications of these attributes, or
  even the non-specification of these attributes. The order of the
  attributes does not matter.

  In the following example, the two ``DN``\'s contain matching
  specifications for ``O``, ``OU`` as well as the non-specification of
  the ``DC`` attribute.

  .. code-block:: none

     CN=host1,OU=Dept1,O=MongoDB,ST=NY,C=US
     C=US, ST=CA, O=MongoDB, OU=Dept1, CN=host2

  However, the following two ``DN``\'s contain a mismatch for the
  ``OU`` attribute since one contains two ``OU`` specifications and
  the other, only one specification.

  .. code-block:: none

     CN=host1,OU=Dept1,OU=Sales,O=MongoDB
     CN=host2,OU=Dept1,O=MongoDB

- Either the Common Name (``CN``) or one of the Subject Alternative
  Name (``SAN``) entries must match the hostname of the server, used by
  the other members of the cluster.

  For example, the certificates for a cluster could have the following
  subjects:

  .. code-block:: sh

     subject= CN=<myhostname1>,OU=Dept1,O=MongoDB,ST=NY,C=US
     subject= CN=<myhostname2>,OU=Dept1,O=MongoDB,ST=NY,C=US
     subject= CN=<myhostname3>,OU=Dept1,O=MongoDB,ST=NY,C=US

It is possible to use a single x509 certificate for both member
authentication and :doc:`x.509 client authentication </tutorial/configure-x509-client-authentication>`.
To do so, obtain a certificate with both ``clientAuth`` and ``serverAuth``
(i.e. "TLS Web Client Authentication" and "TLS Web Server Authentication")
specified as Extended Key Usage (EKU) values, or simply do not specify any EKU
values. Provide this file as the the :option:`--sslPEMKeyFile
<mongod --sslPEMKeyFile>` and omit the :option:`--sslClusterFile
<mongod --sslClusterFile>` option described below.

Configure Replica Set/Sharded Cluster
-------------------------------------

Use Command-line Options
~~~~~~~~~~~~~~~~~~~~~~~~

To specify the x.509 certificate for internal cluster member
authentication, append the additional SSL options
:option:`--clusterAuthMode` and :option:`--sslClusterFile`, as in the
following example for a member of a replica set:

.. code-block:: sh

   mongod --replSet <name> --sslMode requireSSL --clusterAuthMode x509 --sslClusterFile <path to membership certificate and key PEM file> --sslPEMKeyFile <path to SSL certificate and key PEM file> --sslCAFile <path to root CA PEM file>

Include any additional options, SSL or otherwise, that are required for
your specific configuration. For instance, if the membership key is
encrypted, set the :option:`--sslClusterPassword` to the passphrase to
decrypt the key or have MongoDB prompt for the passphrase. See
:ref:`ssl-certificate-password` for details.

.. warning::

   For security reasons, if the :setting:`--sslCAFile` option and its target
   file are not specified, x.509 member authentication will not function. Any
   :program:`mongod` or :program:`mongos` without this option set
   will not be able to verify any other server process' certificate against the
   trusted certificate authority (CA) that issued it, breaking the
   certificate chain.

   As of version 2.6.4, :program:`mongod` and :program:`mongos` will not
   start with x.509 authentication enabled if the CA file is not specified.

Use Configuration File
~~~~~~~~~~~~~~~~~~~~~~~

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`.

YAML Formatted Configuration File
`````````````````````````````````

Starting in MongoDB 2.6, you can specify the configuration for MongoDB
in :doc:`YAML format </reference/configuration-options>`, as in the
following example:

.. code-block:: yaml

   security:
      clusterAuthMode: x509
   net:
      ssl:
         mode: requireSSL
         PEMKeyFile: <path to SSL certificate and key PEM file>
         CAFile: <path to root CA PEM file>
         clusterFile: <path to x.509 membership certificate and key PEM file>

See :setting:`security.clusterAuthMode`, :setting:`net.ssl.mode`,
:setting:`net.ssl.PEMKeyFile`, :setting:`net.ssl.CAFile`, and
:setting:`net.ssl.clusterFile` for more information on the settings.

v2.4 Configuration File
```````````````````````

For backwards compatibility, you can also specify the configuration
using the :v2.4:`v2.4 configuration file format
</reference/configuration>`, as in the following example:

.. code-block:: ini

   sslMode = requireSSL
   sslPEMKeyFile = <path to SSL certificate and key PEM file>
   sslCAFile = <path to root CA PEM file>
   clusterAuthMode = x509
   sslClusterFile = <path to membership certificate and key PEM file>

.. _upgrade-to-x509-internal-authentication:

Upgrade from Keyfile Authentication to x.509 Authentication
-----------------------------------------------------------

To upgrade clusters that are currently using keyfile authentication to
x.509 authentication, use a rolling upgrade process.

Clusters Currently Using SSL
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For clusters using SSL and keyfile authentication, to upgrade to x.509
cluster authentication, use the following rolling upgrade process:

#. For each node of a cluster, start the node with the option
   :option:`--clusterAuthMode` set to ``sendKeyFile`` and the option
   :option:`--sslClusterFile` set to the appropriate path of the node's
   certificate. Include other :doc:`SSL options
   </tutorial/configure-ssl>` as well as any other options that are
   required for your specific configuration. For example:

   .. code-block:: sh

      mongod --replSet <name> --sslMode requireSSL --clusterAuthMode sendKeyFile --sslClusterFile <path to membership certificate and key PEM file> --sslPEMKeyFile <path to SSL Certificate and key PEM file>  --sslCAFile <path to root CA PEM file>

   With this setting, each node continues to use its keyfile to
   authenticate itself as a member. However, each node can now accept
   either a keyfile or an x.509 certificate from other members to
   authenticate those members. Upgrade all nodes of the cluster to
   this setting.

#. Then, for each node of a cluster, connect to the node and use the
   :dbcommand:`setParameter` command to update the :parameter:`clusterAuthMode`
   to ``sendX509``. [#update-mode-alternative]_ For example,

   .. code-block:: sh

      db.getSiblingDB('admin').runCommand( { setParameter: 1, clusterAuthMode: "sendX509" } )

   With this setting, each node uses its x.509 certificate, specified
   with the :option:`--sslClusterFile` option in the previous step, to
   authenticate itself as a member. However, each node continues to
   accept either a keyfile or an x.509 certificate from other members
   to authenticate those members. Upgrade all nodes of the cluster to
   this setting.

#. Optional but recommended. Finally, for each node of the cluster,
   connect to the node and use the :dbcommand:`setParameter` command to
   update the :parameter:`clusterAuthMode` to ``x509`` to only use the
   x.509 certificate for authentication. [#update-mode-alternative]_
   For example:

   .. code-block:: sh

      db.getSiblingDB('admin').runCommand( { setParameter: 1, clusterAuthMode: "x509" } )

#. After the upgrade of all nodes, edit the :doc:`configuration file
   </reference/configuration-options>` with the appropriate x.509
   settings to ensure that upon subsequent restarts, the cluster uses
   x.509 authentication.

See :option:`--clusterAuthMode` for the various modes and their
descriptions.

Clusters Currently Not Using SSL
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For clusters using keyfile authentication but not SSL, to upgrade to
x.509 authentication, use the following rolling upgrade process:

#. For each node of a cluster, start the node with the option
   :option:`--sslMode` set to ``allowSSL``, the option
   :option:`--clusterAuthMode` set to ``sendKeyFile`` and the option
   :option:`--sslClusterFile` set to the appropriate path of the node's
   certificate. Include other :doc:`SSL options
   </tutorial/configure-ssl>` as well as any other options that are
   required for your specific configuration. For example:

   .. code-block:: sh

      mongod --replSet <name> --sslMode allowSSL --clusterAuthMode sendKeyFile --sslClusterFile <path to membership certificate and key PEM file> --sslPEMKeyFile <path to SSL certificate and key PEM file>  --sslCAFile <path to root CA PEM file>

   The :option:`--sslMode allowSSL <--sslMode>` setting allows the
   node to accept both SSL and non-SSL incoming connections. Its
   outgoing connections do not use SSL.

   The :option:`--clusterAuthMode sendKeyFile <--clusterAuthMode>`
   setting allows each node continues to use its keyfile to
   authenticate itself as a member. However, each node can now accept
   either a keyfile or an x.509 certificate from other members to
   authenticate those members.

   Upgrade all nodes of the cluster to these settings.

#. Then, for each node of a cluster, connect to the node and use the
   :dbcommand:`setParameter` command to update the :parameter:`sslMode`
   to ``preferSSL`` and the :parameter:`clusterAuthMode` to
   ``sendX509``. [#update-mode-alternative]_ For example:

   .. code-block:: sh

      db.getSiblingDB('admin').runCommand( { setParameter: 1, sslMode: "preferSSL", clusterAuthMode: "sendX509" } )

   With the :parameter:`sslMode` set to ``preferSSL``, the node accepts
   both SSL and non-SSL incoming connections, and its outgoing
   connections use SSL.

   With the :parameter:`clusterAuthMode` set to ``sendX509``, each node
   uses its x.509 certificate, specified with the
   :option:`--sslClusterFile` option in the previous step, to
   authenticate itself as a member. However, each node continues to
   accept either a keyfile or an x.509 certificate from other members
   to authenticate those members.

   Upgrade all nodes of the cluster to these settings.

#. Optional but recommended. Finally, for each node of the cluster,
   connect to the node and use the :dbcommand:`setParameter` command to
   update the :parameter:`sslMode` to ``requireSSL`` and the
   :parameter:`clusterAuthMode` to ``x509``. [#update-mode-alternative]_
   For example:

   .. code-block:: sh

      db.getSiblingDB('admin').runCommand( { setParameter: 1, sslMode: "requireSSL", clusterAuthMode: "x509" } )

   With the :parameter:`sslMode` set to ``requireSSL``, the node only uses
   SSL connections.

   With the :parameter:`clusterAuthMode` set to ``x509``, the node only
   uses the x.509 certificate for authentication.

#. After the upgrade of all nodes, edit the :doc:`configuration file
   </reference/configuration-options>` with the appropriate SSL and
   x.509 settings to ensure that upon subsequent restarts, the cluster
   uses x.509 authentication.

See :option:`--clusterAuthMode` for the various modes and their
descriptions.

.. [#update-mode-alternative] As an alternative to using the
   :dbcommand:`setParameter` command, you can also
   restart the nodes with the appropriate SSL and x509 options and
   values.
