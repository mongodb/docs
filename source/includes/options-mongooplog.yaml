# This file borrows content from other files, including
# /includes/options-shared.yaml, which uses
# {{program}} to refer to the tool.
#
program: mongooplog
name: help
inherit:
  name: help
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: verbose
inherit:
  name: verbose
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: quiet
inherit:
  name: quiet
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: version
inherit:
  name: version
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: host
aliases: -h
directive: option
args: <hostname><:port>
description: |
  Specifies a resolvable hostname for the :program:`mongod` instance to
  which :program:`mongooplog` will apply :term:`oplog` operations
  retrieved from the server specified by the :option:`--from <mongooplog
  --from>` option.

  By default {{program}} attempts to connect to a MongoDB instance running
  on the localhost on port number ``27017``.

  To connect to a replica set, specify the replica set seed name and the
  seed list of set members. Use the following format:

  .. code-block:: javascript

     <replica_set_name>/<hostname1><:port>,<hostname2:<port>,...

  You can always connect directly to a single MongoDB instance by
  specifying the host and port number directly.
optional: false
---
program: mongooplog
name: port
directive: option
args: null
description: |
  Specifies the port number of the :program:`mongod` instance where
  :program:`mongooplog` will apply :term:`oplog` entries. Specify
  this option only if the MongoDB instance to connect to is not
  running on the standard port of ``27017``. You may also specify a
  port number using the :option:`--host <mongooplog --host>` command.
optional: true
---
program: mongooplog
name: ipv6
inherit:
  name: ipv6
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: ssl
inherit:
  name: ssl
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: sslCAFile
inherit:
  name: sslCAFile
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: sslPEMKeyFile
inherit:
  name: sslPEMKeyFile
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: sslPEMKeyPassword
inherit:
  name: sslPEMKeyPassword
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: sslCRLFile
inherit:
  name: sslCRLFile
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: sslAllowInvalidCertificates
inherit:
  name: sslAllowInvalidCertificates
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: sslFIPSMode
inherit:
  name: sslFIPSMode
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: username
inherit:
  name: username
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: password
inherit:
  name: password
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: authenticationDatabase
inherit:
  name: authenticationDatabase
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: authenticationMechanism
inherit:
  name: authenticationMechanism
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: dbpath
directive: option
args: <path>
description: |
  Specifies a directory, containing MongoDB data files, to which
  :program:`mongooplog` will apply operations from the :term:`oplog` of
  the database specified with the :option:`--from <mongooplog --from>`
  option.

  When used, the {{role}} option enables :program:`mongo` to
  attach directly to local data files and write data without a running
  :program:`mongod` instance.

  To run with {{role}}, :program:`mongooplog` needs to restrict
  access to the data directory: as a result, no :program:`mongod` can be
  access the same path while the process runs.
optional: true
---
program: mongooplog
name: directoryperdb
inherit:
  name: directoryperdb
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: journal
inherit:
  name: journal
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: db
inherit:
  name: db
  program: _shared
  file: options-shared.yaml
---
program: mongooplog
name: collection
aliases: -c
directive: option
args: <collection>
description: |
  Specifies the collection to export.
optional: true
---
program: mongooplog
name: seconds
aliases: -s
directive: option
args: <number>
description: |
  Specify a number of seconds of operations for :program:`mongooplog` to
  pull from the :option:`remote host <mongooplog --from>`. Unless
  specified the default value is ``86400`` seconds, or 24 hours.
optional: true
---
program: mongooplog
name: from
directive: option
args: <host[:port]>
description: |
  Specify the host for :program:`mongooplog` to retrieve :term:`oplog`
  operations from. :program:`mongooplog` *requires* this option.

  Unless you specify the :option:`--host <mongooplog --host>` option,
  :program:`mongooplog` will apply the operations collected with this
  option to the oplog of the :program:`mongod` instance running on the
  localhost interface connected to port ``27017``.
optional: true
---
program: mongooplog
name: oplogns
directive: option
args: <namespace>
description: |
  Specify a namespace in the :option:`--from <mongooplog --from>` host
  where the oplog resides. The default value is ``local.oplog.rs``, which
  is the where :term:`replica set` members store their operation log.
  However, if you've copied :term:`oplog` entries into another database or
  collection, use this option to copy oplog entries stored in another
  location. Namespaces take the form of ``[database].[collection]``.
optional: true
...
