.. _connections-connection-options:

=========================
Connection String Options
=========================

.. default-domain:: mongodb


.. meta:: 
   :description: Use connection string options to establish connections between MongoDB instances, tools, and applications that use drivers. 

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page lists all connection option for both SRV connection
strings and standard connection strings.

Connection options are pairs in the following form: ``name=value``.

- The option ``name`` is case insensitive when using a driver.

- The option ``name`` is case insensitive when using
  :binary:`~bin.mongosh`.

- The ``value`` is always case sensitive.

Separate options with the ampersand (``&``) character
``name1=value1&name2=value2``. In the following example, a
connection includes the :urioption:`replicaSet` and
:urioption:`connectTimeoutMS` options:

.. code-block:: none

   mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db1.example.net:27017,db2.example.net:2500/?replicaSet=test&connectTimeoutMS=300000

.. note:: Semi-colon separator for connection string arguments

   To provide backwards compatibility, drivers currently accept
   semi-colons (``;``) as option separators.

.. _replica-set-option:

Replica Set Option
------------------

The following connection string connects to a replica set named
``myRepl`` with members running on the specified hosts. It
authenticates as user ``myDatabaseUser`` with the password
``D1fficultP%40ssw0rd``:

.. code-block:: bash

   mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db0.example.com:27017,db1.example.com:27017,db2.example.com:27017/?replicaSet=myRepl

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description

   * - .. urioption:: replicaSet

     - Specifies the name of the :term:`replica set`, if the
       :binary:`~bin.mongod` is a member of a replica set. Set the ``replicaSet``
       connection option to ensure consistent behavior across drivers. 
       

       When connecting to a replica set, provide a :term:`seed list` of 
       the replica set member(s) to the ``host[:port]`` component of the
       uri. For specific details, refer to your :driver:`driver </>` 
       documentation.

   * - .. urioption:: directConnection

     - Specifies whether the client connects directly to the ``host[:port]`` in the
       connection URI:
       
       - ``true``: The client sends operations to only the specified host. It doesn't
         attempt to discover any other members of the replica set.

       - ``false``: The client attempts to discover all servers in the replica set,
         and sends operations to the primary member. This is the default value.

Connection Options
------------------

.. _uri-options-tls:

TLS Options
~~~~~~~~~~~

The following connection string to a replica set includes 
:urioption:`tls=true <tls>` option. It authenticates as user ``myDatabaseUser`` 
with the password ``D1fficultP%40ssw0rd``.

.. code-block:: none

   mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db0.example.com,db1.example.com,db2.example.com/?replicaSet=myRepl&tls=true

Alternatively, you can also use the equivalent :urioption:`ssl=true
<ssl>` option:

.. code-block:: none

   mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db0.example.com,db1.example.com,db2.example.com/?replicaSet=myRepl&ssl=true

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description

   * - .. urioption:: tls

     - Enables or disables TLS/SSL for the connection:

       - ``true``: Initiate the connection with TLS/SSL. Default for
         :ref:`connections-dns-seedlist`.

       - ``false``: Initiate the connection without TLS/SSL. Default for
         :ref:`connections-standard-connection-string-format`.

       The :urioption:`tls` option is equivalent to the
       :urioption:`ssl` option.

       If the :binary:`mongosh` shell specifies additional
       :mongosh:`tls/ssl <mongosh-tls>` options from the
       command-line, use the ``--tls`` command-line option instead.

   * - .. urioption:: ssl

     - A boolean to enable or disable TLS/SSL for the connection:
  
       - ``true``: Initiate the connection with TLS/SSL. Default for
         :ref:`connections-dns-seedlist`.
      
       - ``false``: Initiate the connection without TLS/SSL. Default
         for :ref:`connections-standard-connection-string-format`.

       The :urioption:`ssl` option is equivalent to the
       :urioption:`tls` option.

       If the :binary:`mongosh` shell specifies additional
       :mongosh:`tls/ssl <mongosh-ssl>` options from the
       command-line, use the ``--ssl``
       command-line option instead.

   * - .. urioption:: tlsCertificateKeyFile

     - Specifies the location of a local :file:`.pem` file that
       contains either the client's TLS/SSL X.509 certificate or the
       client's TLS/SSL certificate and key.

       The client presents this file to the
       :binary:`mongod` / :binary:`mongos` instance.

       .. include:: /includes/extracts/4.4-changes-certificate-expiry-warning.rst

       This option is not supported by all drivers. Refer to the
       :driver:`Drivers </>` documentation.
       
       .. include:: /includes/fact-uri-option-availability.rst

   * - .. urioption:: tlsCertificateKeyFilePassword

     - Specifies the password to de-crypt the
       :urioption:`tlsCertificateKeyFile`.

       This option is not supported by all drivers. Refer to the
       :driver:`Drivers </>` documentation.

       .. include:: /includes/fact-uri-option-availability.rst

   * - .. urioption:: tlsCAFile

     - Specifies the location of a local :file:`.pem` file that
       contains the root certificate chain from the Certificate
       Authority. This file is used to validate the certificate
       presented by the :binary:`mongod` / :binary:`mongos`
       instance.

       This option is not supported by all drivers. Refer to the
       :driver:`Drivers </>` documentation.

       .. include:: /includes/fact-uri-option-availability.rst

   * - .. urioption:: tlsAllowInvalidCertificates
   
     - Bypasses validation of the certificates presented by the
       :binary:`mongod` / :binary:`mongos` instance

       Set to ``true`` to connect to MongoDB instances even if the
       server's present invalid certificates.

       This option is not supported by all drivers. Refer to the
       :driver:`Drivers </>` documentation.

       .. include:: /includes/fact-uri-option-availability.rst

       :red:`WARNING:` Disabling certificate validation creates a vulnerability.

   * - .. urioption:: tlsAllowInvalidHostnames

     - Disables hostname validation of the certificate presented by
       the :binary:`mongod` / :binary:`mongos` instance.

       Set to ``true`` to connect to MongoDB instances even if the
       hostname in the server certificates do not match the server's
       host.

       This option is not supported by all drivers. Refer to the
       :driver:`Drivers </>` documentation.

       .. include:: /includes/fact-uri-option-availability.rst

       :red:`WARNING:` Disabling certificate validation creates a vulnerability.


   * - .. urioption:: tlsInsecure

     - Disables various certificate validations. 
     
       Set to ``true`` to disable certificate validations. The exact
       validatations disabled vary by drivers. Refer to the
       :driver:`Drivers </>` documentation.

       .. include:: /includes/fact-uri-option-availability.rst

       :red:`WARNING:` Disabling certificate validation creates a vulnerability.


Timeout Options
~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description

   * - .. urioption:: connectTimeoutMS

     - The time in milliseconds to attempt a connection before timing
       out. The default is 10,000 milliseconds, but specific drivers
       might have a different default. For details, see the
       :driver:`driver </>` documentation.

   * - .. urioption:: socketTimeoutMS

     - The time in milliseconds to attempt a send or receive on a
       socket before the attempt times out. The default is never to
       timeout, though different drivers might vary. See the
       :driver:`driver </>` documentation.

Compression Options
~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description

   * - .. urioption:: compressors

     - Comma-delimited string of compressors to enable
       network compression for communication between this
       client and a :binary:`mongod` / :binary:`mongos`
       instance.

       You can specify the following compressors:	

       - :term:`snappy`

       - :term:`zlib` 

       - :term:`zstd` 

       If you specify multiple compressors, then the order in which you list
       the compressors matter as well as the communication initiator. For
       example, if the client specifies the following network
       compressors ``"zlib,snappy"`` and the :binary:`~bin.mongod` specifies
       ``"snappy,zlib"``, messages between the client and the
       :binary:`~bin.mongod` uses ``zlib``.

       Messages are compressed when both parties enable network
       compression. Otherwise, messages between the parties are
       uncompressed.

       If the parties do not share at least one common compressor,
       messages between the parties are uncompressed.

       :binary:`~bin.mongosh` supports the uri connection string
       option :urioption:`compressors`.

   * - .. urioption:: zlibCompressionLevel

     - An integer that specifies the compression level if using
       :term:`zlib` for :urioption:`network compression <compressors>`.

       You can specify an integer value ranging from ``-1`` to ``9``:

       .. list-table::
          :header-rows: 1
          :widths: 25 75

          * - Value
            - Notes

          * - ``-1``

            - Default compression level, usually level ``6`` compression.

          * - ``0``
            - No compression

          * - ``1`` - ``9``

            - Increasing level of compression but at the cost of speed, with:

              - ``1`` providing the best speed but least compression, and

              - ``9`` providing the best compression but at the slowest speed.

       Supported by :binary:`~bin.mongosh`.

.. _connection-pool-options:

Connection Pool Options
-----------------------

Most drivers implement some kind of connection pool handling.
Some drivers do not support connection
pools. See your :driver:`driver </>` documentation
for more information on the connection pooling implementation. These
options allow applications to configure the connection pool when
connecting to the MongoDB deployment.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description

   * - .. urioption:: maxPoolSize

     - The maximum number of connections in the connection pool. The
       default value is ``100``.

   * - .. urioption:: minPoolSize

     - The minimum number of connections in the connection pool. The
       default value is ``0``.

       The :urioption:`minPoolSize` option is not supported by all
       drivers. For information on your driver, see the
       :driver:`Drivers </>` documentation.

   * - .. urioption:: maxConnecting

     - Maximum number of connections a pool may be establishing
       concurrently. The default value is ``2``.

       ``maxConnecting`` is supported for all drivers **except** the
       :driver:`Rust Driver </rust/current/>`.

       .. include:: /includes/connection-pool/max-connecting-use-case.rst
   
   * - .. urioption:: maxIdleTimeMS

     - The maximum number of milliseconds that a connection can remain
       idle in the pool before being removed and closed.

       This option is not supported by all drivers.

   * - .. urioption:: waitQueueMultiple

     - A number that the driver multiplies the :urioption:`maxPoolSize`
       value to, to provide the maximum number of threads allowed to
       wait for a connection to become available from the pool. For
       default values, see the :driver:`driver </>`
       documentation.

       This option is not supported by all drivers.

   * - .. urioption:: waitQueueTimeoutMS

     - The maximum time in milliseconds that a thread can wait for a
       connection to become available. For default values, see the
       :driver:`driver </>` documentation.

       This option is not supported by all drivers.

.. _connections-write-concern:

Write Concern Options
---------------------

:ref:`Write concern <write-concern>` describes the level of
acknowledgment requested from MongoDB. The write concern option is
supported by the:

- MongoDB drivers

- :binary:`~bin.mongosh`

- :binary:`~bin.mongofiles`

- :binary:`~bin.mongoimport`

- :binary:`~bin.mongorestore`

You can specify the write concern both in the connection string and
as a parameter to methods like ``insert`` or ``update``. If the
write concern is specified in both places, the method parameter
overrides the connection-string setting.

{+atlas+} deployment connection strings use :writeconcern:`"majority"`
by default. If you don't specify write concern for an {+atlas+}
deployment, {+atlas+} enforces :writeconcern:`"majority"`.

The following connection string to a replica set specifies
:writeconcern:`"majority"` write concern and a 5 second
timeout using the :urioption:`wtimeoutMS` write concern parameter:

.. code-block:: none

   mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db0.example.com,db1.example.com,db2.example.com/?replicaSet=myRepl&w=majority&wtimeoutMS=5000

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description

   * - .. urioption:: w

     - Corresponds to the write concern :ref:`wc-w`. The ``w`` option
       requests acknowledgment that the write operation has propagated
       to a specified number of :binary:`~bin.mongod` instances or to
       :binary:`~bin.mongod` instances with specified tags.

       You can specify a :writeconcern:`number <\<number\>>`, the
       string :writeconcern:`majority <"majority">`, or a
       :writeconcern:`tag set <\<custom write concern name\>>`.

       For details, see :ref:`wc-w`.

   * - .. urioption:: wtimeoutMS

     - Corresponds to the write concern :ref:`wc-wtimeout`.
       :urioption:`wtimeoutMS` specifies a time limit, in milliseconds,
       for the write concern.

       When ``wtimeoutMS`` is ``0``, write operations will never time
       out. For more information, see :ref:`wc-wtimeout`.

   * - .. urioption:: journal

     - Corresponds to the write concern :ref:`wc-j` option. The
       :urioption:`journal` option requests acknowledgment from
       MongoDB that the write operation has been written to the
       :ref:`journal <journaling-internals>`. For details, see :ref:`wc-j`.

       If you set :urioption:`journal` to ``true``, and specify a
       :urioption:`w` value less than 1, :urioption:`journal` prevails.

For more information, see :ref:`write-concern`.

readConcern Options
-------------------

For the WiredTiger storage engine, MongoDB introduces the
``readConcern`` option for replica sets and replica set shards.

:doc:`/reference/read-concern` allows clients to choose a level of
isolation for their reads from replica sets.

The following connection string to a replica set specifies
:urioption:`readConcernLevel=majority <readConcernLevel>`:

.. code-block:: none

   mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db0.example.com,db1.example.com,db2.example.com/?replicaSet=myRepl&readConcernLevel=majority

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description

   * - .. urioption:: readConcernLevel

     - The level of isolation. Can accept one of the following values:

       - :readconcern:`local <"local">`
       - :readconcern:`majority <"majority">`
       - :readconcern:`linearizable <"linearizable">`
       - :readconcern:`available <"available">`

       This connection string option is not available for
       :binary:`~bin.mongosh`. Specify the read concern as an
       :ref:`option to the specific operation
       <read-concern-operations>`.

For more information, see :doc:`/reference/read-concern`.

.. _connections-read-preference:

Read Preference Options
-----------------------

:ref:`Read preferences <read-preference>` describe the
behavior of read operations with regards to :term:`replica sets
<replica set>`. These parameters allow you to specify read preferences
on a per-connection basis in the connection string.

For example:

- The following connection string to a replica set specifies
  :readmode:`secondary` read preference mode and a
  :urioption:`maxStalenessSeconds` value of 120 seconds:

  .. code-block:: none

     mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db0.example.com,db1.example.com,db2.example.com/?replicaSet=myRepl&readPreference=secondary&maxStalenessSeconds=120

- The following connection string to a sharded cluster specifies
  :readmode:`secondary` read preference mode and a
  :urioption:`maxStalenessSeconds` value of 120 seconds:

  .. code-block:: none

     mongodb://myDatabaseUser:D1fficultP%40ssw0rd@mongos1.example.com,mongos2.example.com/?readPreference=secondary&maxStalenessSeconds=120

- The following connection string to a sharded cluster specifies
  :readmode:`secondary` read preference mode as well as three
  :urioption:`readPreferenceTags`:

  .. code-block:: none

     mongodb://myDatabaseUser:D1fficultP%40ssw0rd@mongos1.example.com,mongos2.example.com/?readPreference=secondary&readPreferenceTags=dc:ny,rack:r1&readPreferenceTags=dc:ny&readPreferenceTags=

Order matters when using multiple ``readPreferenceTags``. The
``readPreferenceTags`` are tried in order until a match is found. Once
found, that specification is used to find all eligible matching
members and any remaining ``readPreferenceTags``  are ignored.
For details, see :ref:`read-preference-tag-order-matching`.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description

   * - .. urioption:: readPreference

     - Specifies the :ref:`read preferences <read-preference>`
       for this connection. Possible values are:

       - :readmode:`primary` (*Default*)
       - :readmode:`primaryPreferred`
       - :readmode:`secondary`
       - :readmode:`secondaryPreferred`
       - :readmode:`nearest`

       .. include:: /includes/extracts/transactions-read-pref.rst

       This connection string option is not available for the
       :binary:`mongo` shell. See :method:`cursor.readPref()` and
       :method:`Mongo.setReadPref()` instead.

   * - .. urioption:: maxStalenessSeconds

     - Specifies, in seconds, how stale a secondary can be before the client
       stops using it for read operations. For details, see
       :ref:`replica-set-read-preference-max-staleness`.

       By default, there is no maximum staleness and clients will not consider a
       secondary's lag when choosing where to direct a read operation.

       The minimum :urioption:`maxStalenessSeconds` value is 90
       seconds. Specifying a value between 0 and 90 seconds will produce
       an error. MongoDB drivers treat a ``maxStalenessSeconds`` value
       of ``-1`` as "no max staleness", the same as if
       ``maxStalenessSeconds`` is omitted.

   * - .. urioption:: readPreferenceTags

     - Specifies the :ref:`tags document
       <replica-set-read-preference-tag-sets>` as a comma-separated
       list of colon-separated key-value pairs. For example,
       
       - To specify the tags document ``{ "dc": "ny", "rack": "r1" }``,
         use ``readPreferenceTags=dc:ny,rack:r1`` in the connection
         string.
         
       - To specify an empty tags document ``{ }``, use
         ``readPreferenceTags=`` without setting the value.

       To specify a *list* of tag documents, use multiple
       ``readPreferenceTags``. For example,
       ``readPreferenceTags=dc:ny,rack:r1&readPreferenceTags=``.

       Order matters when using multiple ``readPreferenceTags``. The
       ``readPreferenceTags`` are tried in order until a match is
       found. For details, see
       :ref:`read-preference-tag-order-matching`.
       
       This connection string option is not available for the
       :binary:`mongo` shell. See :method:`cursor.readPref()` and
       :method:`Mongo.setReadPref()` instead.

For more information, see :ref:`Read preferences <read-preference>`.

.. _connection-string-auth-options:

Authentication Options
----------------------

The following connection string to a replica set specifies the
:urioption:`authSource` to the ``admin`` database. That is, the user
credentials are authenticated against the ``admin`` database.

.. code-block:: bash

   mongodb://myDatabaseUser:D1fficultP%40ssw0rd@mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/?replicaSet=myRepl&authSource=admin

.. include:: /includes/fact-pct-encode-uri.rst

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description

   * - .. urioption:: authSource

     - Specify the database name associated with the user's
       credentials. If :urioption:`authSource` is unspecified,
       :urioption:`authSource` defaults to the ``defaultauthdb``
       specified in the connection string. If ``defaultauthdb`` is
       unspecified, then :urioption:`authSource` defaults to ``admin``.

       The ``PLAIN`` (LDAP), ``GSSAPI`` (Kerberos), and ``MONGODB-AWS``
       (IAM) authentication mechanisms require that
       :urioption:`authSource` be set to ``$external``, as these
       mechanisms delegate credential storage to external services.

       MongoDB will ignore :urioption:`authSource` values if no username
       is provided, either in the connection string or via the
       ``--username`` parameter.

   * - .. urioption:: authMechanism

       Default: SCRAM-SHA-256
       
     - Specify the authentication mechanism that MongoDB uses to
       authenticate the connection. If you don't specify an
       ``authMechanism`` but provide user credentials, MongoDB attempts
       to use SCRAM-SHA-256. If this fails, it falls back to
       SCRAM-SHA-1.

       - :ref:`SCRAM-SHA-1 <authentication-scram-sha-1>`

       - :ref:`SCRAM-SHA-256 <authentication-scram-sha-256>`

       - :ref:`MONGODB-X509 <security-auth-x509>`

       - ``MONGODB-AWS``

       - :ref:`GSSAPI <security-auth-kerberos>` (Kerberos)

       - :ref:`PLAIN <security-auth-ldap>` (LDAP SASL) 

       - ``MONGODB-OIDC`` (OpenID Connect OIDC), you must also set the
         :urioption:`authMechanismProperties` ``ENVIRONMENT`` variable

       Only MongoDB Enterprise :binary:`~bin.mongod` and
       :binary:`~bin.mongos` instances provide ``GSSAPI`` (Kerberos) and
       ``PLAIN`` (LDAP) mechanisms.
       
       To use ``MONGODB-X509``, you must have TLS/SSL Enabled.

       To use ``MONGODB-AWS``, you must be connecting to a
       `MongoDB Atlas
       <https://www.mongodb.com/atlas/database?tck=docs_server>`__ cluster
       which has been configured to support authentication via
       `AWS IAM credentials
       <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html>`__
       (an AWS access key ID and a secret access key, and
       optionally an `AWS session token
       <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html>`__).
       The ``MONGODB-AWS`` authentication mechanism requires that the
       :urioption:`authSource` be set to ``$external``.

       When using ``MONGODB-AWS``, provide your AWS access key ID as the
       username and the secret access key as the password. If using an
       `AWS session token
       <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html>`__
       as well, provide it with the ``AWS_SESSION_TOKEN``
       :urioption:`authMechanismProperties` value.

       If the AWS access key ID, the secret access key, or the session token
       include the following characters, those characters must be converted using `percent encoding
       <https://tools.ietf.org/html/rfc3986#section-2.1>`__. 

       .. code-block:: none
          :copyable: false

          $ : / ? # [ ] @

       Alternatively, if the AWS access key ID, secret access key, or
       session token are defined on your platform using their respective
       `AWS IAM environment variables
       <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html#envvars-list>`__
       :binary:`~bin.mongosh` will use these environment
       variable values to authenticate; you do not need to specify them
       in the connection string.

       See :ref:`Connect to an Atlas Cluster
       <connections-string-example-mongodb-aws>` for example usage of
       the ``MONGODB-AWS`` authentication mechanism using both a
       connection string and the environment variables method.

       See :doc:`/core/authentication` for more information about the
       authentication system in MongoDB. Also consider
       :doc:`/tutorial/configure-x509-client-authentication` for more
       information on x509 authentication.

   * - .. urioption:: authMechanismProperties

     - Specify properties for the specified :urioption:`authMechanism`
       as a comma-separated list of colon-separated key-value pairs.

       Possible key-value pairs are:

       ``SERVICE_NAME:<string>``
         Set the Kerberos service name when connecting to Kerberized
         MongoDB instances. This value must match the service name set
         on MongoDB instances to which you are connecting. Only valid
         when using the :ref:`GSSAPI<security-auth-kerberos>`
         authentication mechanism.

         ``SERVICE_NAME`` defaults to ``mongodb`` for all clients and
         MongoDB instances. If you change the
         :parameter:`saslServiceName` setting on a MongoDB instance, you
         must set ``SERVICE_NAME`` to match that setting. Only valid
         when using the :ref:`GSSAPI<security-auth-kerberos>`
         authentication mechanism.

       ``CANONICALIZE_HOST_NAME:true|false``
         Canonicalize the hostname of the client host machine when
         connecting to the Kerberos server. This may be required when
         hosts report different hostnames than what is in the Kerberos
         database. Defaults to ``false``. Only valid when using the
         :ref:`GSSAPI<security-auth-kerberos>` authentication
         mechanism.

       ``SERVICE_REALM:<string>``
         Set the Kerberos realm for the MongoDB service. This may be
         necessary to support cross-realm authentication where the user
         exists in one realm and the service in another. Only valid when
         using the :ref:`GSSAPI<security-auth-kerberos>` authentication
         mechanism.

       ``AWS_SESSION_TOKEN:<security_token>``
         Set the AWS session token for authentication with temporary
         credentials when using an `AssumeRole
         <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`__
         request, or when working with AWS resources that specify this
         value such as Lambda. Only valid when using the ``MONGODB-AWS``
         authentication mechanism. You must have an AWS access key ID
         and a secret access key as well. See
         :ref:`Connect to an Atlas Cluster
         <connections-string-example-mongodb-aws>` for example usage.

       ``ENVIRONMENT:<string>``
         Set the OpenID Connect (OIDC) environment. For:

         - Microsoft Azure, set ``ENVIRONMENT:azure``
         - Google Cloud Platform, set ``ENVIRONMENT:gcp``

         You must also set :urioption:`authMechanism` to
         ``MONGODB-OIDC``.

   * - .. urioption:: gssapiServiceName

     - Set the Kerberos service name when connecting to Kerberized
       MongoDB instances. This value must match the service name set on
       MongoDB instances to which you are connecting.

       :urioption:`gssapiServiceName` defaults to ``mongodb`` for all
       clients and MongoDB instances. If you change
       :parameter:`saslServiceName` setting on a MongoDB instance, you
       must set :urioption:`gssapiServiceName` to match that setting.

       :urioption:`gssapiServiceName` is a deprecated aliases for
       :urioption:`authMechanismProperties=SERVICE_NAME:mongodb
       <authMechanismProperties>`. For more information on which
       options your driver supports and their relative priority to each
       other, reference the documentation for your preferred driver
       version.

.. _selection-discovery-options:

Server Selection and Discovery Options
--------------------------------------

MongoDB provides the following options to configure how MongoDB drivers
and :binary:`~bin.mongos` instances select a server to which to direct read
or write operations.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description

   * - .. urioption:: localThresholdMS

     - The size (in milliseconds) of the latency window for selecting
       among multiple suitable MongoDB instances. *Default*: 15
       milliseconds.

       All drivers use :urioption:`localThresholdMS`. Use the
       ``localThreshold`` alias when specifying the latency window size
       to :binary:`~bin.mongos`.

   * - .. urioption:: serverSelectionTimeoutMS

     - Specifies how long (in milliseconds) to block for server
       selection before throwing an exception. *Default*: 30,000
       milliseconds.

   * - .. urioption:: serverSelectionTryOnce

     - **Single-threaded drivers only**. When ``true``, instructs the
       driver to scan the MongoDB deployment exactly once after server
       selection fails and then either select a server or raise an
       error. When ``false``, the driver blocks and searches for a
       server up to the :urioption:`serverSelectionTimeoutMS` value.
       *Default*: ``true``.

       Multi-threaded drivers and :binary:`~bin.mongos` do not support
       :urioption:`serverSelectionTryOnce`.

   * - .. urioption:: heartbeatFrequencyMS

     - :urioption:`heartbeatFrequencyMS` controls when the driver
       checks the state of the MongoDB deployment. Specify the interval
       (in milliseconds) between checks, counted from the end of the
       previous check until the beginning of the next one.

       *Default*:

       - Single-threaded drivers: 60 seconds.
       - Multi-threaded drivers: 10 seconds.

       :binary:`~bin.mongos` does not support changing the frequency of
       the heartbeat checks.

   * - .. urioption:: socketCheckIntervalMS

     - **Single-threaded clients only**. Controls how often the client checks the
       state of the TCP connection to the MongoDB deployment. If you specify a lower
       value, the client detects network issues faster but uses more CPU.
       *Default*: 5 seconds.

       This option is not supported by all drivers. Refer to the
       :driver:`Drivers </>` documentation.

Miscellaneous Configuration
---------------------------

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Connection Option
     - Description

   * - .. urioption:: appName

     - Specify a custom app name. The app name appears in:

       - :binary:`~bin.mongod` and :binary:`~bin.mongos` :ref:`logs
         <log-messages-ref>`
       - the :data:`currentOp.appName` field in the
         :dbcommand:`currentOp` command and :method:`db.currentOp()`
         method output
       - the :data:`system.profile.appName` field in the
         :ref:`database profiler <profiler>` output

       The :urioption:`appName` connection option is available for:

       - :driver:`MongoDB Drivers </>` 
       - :binary:`~bin.mongosh` starting in ``mongosh`` 1.1.9
       - :compass:`MongoDB Compass </>` starting in Compass 1.28.4

   * - .. urioption:: retryReads

     - Enables :ref:`retryable reads <retryable-reads>`.

       Possible values are:

       - ``true``. Enables retryable reads for the connection. 

         Official MongoDB drivers default to ``true``.

       - ``false``. Disables retryable reads for the connection.
       
       :binary:`~bin.mongosh` does not support retryable reads.

   * - .. urioption:: retryWrites

     - Enable :ref:`retryable writes <retryable-writes>`.

       Possible values are:

       - ``true``. Enables retryable writes for the connection. 

         Official MongoDB drivers default to ``true``.

       - ``false``. Disables retryable writes for the connection. 
       
       MongoDB drivers retry 
       :ref:`transaction commit and abort operations <transactions-retry>`
       regardless of the value of :urioption:`retryWrites`. For more 
       information on transaction retryability, see
       :ref:`transactions-retry`. 

   * - .. urioption:: uuidRepresentation

     - Possible values are:

       ``standard``
         The standard binary representation.

       ``csharpLegacy``
         The default representation for the C# driver.

       ``javaLegacy``
         The default representation for the Java driver.

       ``pythonLegacy``
         The default representation for the Python driver.

       For the default, see the :driver:`Drivers </>`
       documentation for your driver.

       Not all drivers support the :urioption:`uuidRepresentation`
       option. For information on your driver, see the :driver:`drivers
       </>` documentation.
   
   * - .. urioption:: loadBalanced 
     
     - Specifies whether the client is connecting to a load balancer. This option is
       ``false`` by default.

       You can set this option to ``true`` only if you meet the following
       requirements:
       
       - You specify only one host name.
       - You aren't connecting to a replica set.
       - The :urioption:`srvMaxHosts` option is unset or has a value of ``0``.
       - The :urioption:`directConnection` option is unset or has a value of ``false``.

   * - .. urioption:: srvMaxHosts

     - Specifies the number of :binary:`~bin.mongos` connections that can be created for
       sharded topologies. Set this option to a non-negative integer.
       ``0`` is the default value and means there is no limit on the number of
       :binary:`~bin.mongos` connections.
