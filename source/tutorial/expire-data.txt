.. _ttl-collections:

===========================================
Expire Data from Collections by Setting TTL
===========================================

.. default-domain:: mongodb

.. contents::
   :backlinks: none
   :local:

.. versionadded:: 2.2

This document provides an introduction to MongoDB's "*time to live*"
or ":term:`TTL`" collection feature. TTL collections make it possible
to store data in MongoDB and have the :program:`mongod` automatically
remove data after a specified number of seconds, or at a specific
clock time.

Data expiration is useful for some classes of information, including
machine generated event data, logs, and session information that only
need to persist for a limited period of time.

A special index type supports the implementation of TTL collections.
TTL relies on a background thread in :program:`mongod` that reads the
date-typed values in the index and removes expired :term:`documents
<document>` from the collection.

Enable TTL for a Collection
---------------------------

To enable TTL for a collection, use the
:method:`~db.collection.ensureIndex()` method to create a TTL index,
as shown in the examples below. MongoDB begins removing expired
documents as soon as the index finishes building.

.. note::

   When the TTL thread is active, you will see a :doc:`delete
   </core/write-operations>` operations in the output of
   :method:`db.currentOp()` or in the data collected by the
   :ref:`database profiler <database-profiler>`.

.. note::

   When enabling TTL on :term:`replica sets <replica set>`, the
   TTL background thread runs *only* on :term:`primary` members.
   :term:`Secondary` members replicate deletion operations
   from the primary.

.. include:: /includes/note-ttl-collection-background-timing.rst

With the exception of the background thread, A TTL index supports
queries in the same way normal indexes do. You can use TTL indexes to
expire documents in one of two ways, either:

- remove documents a certain number of seconds after creation. The
  index will support queries for the creation time of the
  documents. Alternately,

- specify an explicit expiration time. The index will support queries
  for the expiration-time of the document.

Expire after a Certain Number of Seconds
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Begin by creating a TTL index and specify an ``expireAfterSeconds``
value of ``3600``. This sets the an expiration time of 1 hour after
the time specified by the value of the indexed field. The following
example, creates an index on the ``log.events`` collection's
``status`` field:

.. code-block:: javascript

   db.log.events.ensureIndex( { "status": 1 }, { expireAfterSeconds: 3600 } )

To expire documents a certain number of seconds after creation, give
the date field a value corresponding to the insertion time of the
documents.For example, given the index on the ``log.events`` collection
with the ``expireAfterSeconds`` value of ``0``, and a current date of
``July 22, 2013: 13:00:00``, consider the document in the following
:method:`~db.collection.insert()` operation:

.. code-block:: javascript

   db.log.events.insert( {
      "status": new Date('July 22, 2013: 13:00:00'),
      "logEvent": 2,
      "logMessage": "Success!",
   } )

The ``status`` field *must* hold values of BSON date type or an array
of BSON date-typed objects.

MongoDB will automatically delete documents from the ``log.events``
collection when at least one of the values of a document's ``status``
field is a time older than the number of seconds specified in
``expireAfterSeconds``.

Expire at a Certain Clock Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Begin by creating a TTL index and specify an ``expireAfterSeconds``
value of ``0``. The following example, creates an index on the
``log.events`` collection's ``status`` field:

.. code-block:: javascript

   db.log.events.ensureIndex( { "status": 1 }, { expireAfterSeconds: 0 } )

To expire documents at a certain clock time, give the date field a
value corresponding to the time a document should expire, For example,
given the index on the ``log.events`` collection with the
``expireAfterSeconds`` value of ``0``, and a current date of ``July
22, 2013: 13:00:00``, consider the document in the following
:method:`~db.collection.insert()` operation:

.. code-block:: javascript

   db.log.events.insert( {
      "status": new Date('July 22, 2013: 14:00:00'),
      "logEvent": 2,
      "logMessage": "Success!",
   } )

The ``status`` field *must* hold values of BSON date type or an array
of BSON date-typed objects.

MongoDB will automatically delete documents from the ``log.events``
collection when at least one of the values of a document's ``status``
field is a time older than the number of seconds specified in
``expireAfterSeconds``.

Constraints
-----------

- The ``_id`` field does not support TTL indexes.

- You cannot create a TTL index on a field that already has an index.

- A document will not expire if the indexed field does not exist.

- A document will not expire if the indexed field is not a date
  :term:`BSON type <BSON types>` or an array of date :term:`BSON types
  <BSON types>`.

- The TTL index may not be compound (may not have multiple fields).

- If the TTL field holds an array, and there are multiple date-typed
  data in the index, the document will expire when the *lowest* (i.e.
  earliest) date matches the expiration threshold.

- You cannot create a TTL index on a capped collection, because
  MongoDB cannot remove documents from a capped collection.

.. important:: All collections with an index using the
   ``expireAfterSeconds`` option have :collflag:`usePowerOf2Sizes`
   enabled. Users cannot modify this setting. As a result of enabling
   :collflag:`usePowerOf2Sizes`, MongoDB must allocate more disk space
   relative to data size. This approach helps mitigate the possibility
   of storage fragmentation caused by frequent delete operations and
   leads to more predictable storage use patterns.
