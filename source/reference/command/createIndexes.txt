=============
createIndexes
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: createIndexes

   Builds one or more indexes on a collection.

   The :dbcommand:`createIndexes` command takes the following form:

   .. code-block:: javascript

      db.runCommand(
        {
          createIndexes: <collection>,
          indexes: [
              {
                  key: {
                      <key-value_pair>,
                      <key-value_pair>,
                      ...
                  },
                  name: <index_name>,
                  <option1>,
                  <option2>,
                  ...
              },
              { ... },
              { ... }
          ],
          writeConcern: { <write concern> },
          commitQuorum: <int|string>,
          comment: <any>
        }
      )

   The :dbcommand:`createIndexes` command takes the following fields:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``createIndexes``
   
        - string
   
        - The collection for which to create indexes.
          
          
   
      * - ``indexes``
   
        - array
   
        - Specifies the indexes to create. Each document in the array specifies a
          separate index.
          
          
   
      * - ``writeConcern``
   
        - document
   
        - Optional. A document expressing the :doc:`write concern
          </reference/write-concern>`. Omit to use the default write concern.
          
          .. versionadded:: 3.4

      * - :ref:`commitQuorum <createIndexes-cmd-commitQuorum>`

        - integer or string

        - .. _createIndexes-cmd-commitQuorum:
        
          Optional. The minimum number of data-bearing voting replica
          set members (i.e. commit quorum), including the primary, that
          must report a successful :ref:`index build
          <index-operations-replicated-build>` before the primary
          marks the ``indexes`` as ready. A "voting" member is any
          replica set member where :rsconf:`members[n].votes` is greater
          than ``0``.
          
          Supports the following values:

          - ``"votingMembers"`` - all data-bearing voting replica set
            members (*Default*).

          - ``"majority"`` - a simple majority of data-bearing voting
            replica set members.

          - ``<int>`` - a specific number of data-bearing voting 
            replica set members.

          - ``0`` - Disables quorum-voting behavior. Members 
            start the index build simultaneously but do *not* 
            vote or wait for quorum before completing the 
            index build. If you start an index build with 
            a commit quorum of ``0``, you cannot later modify the 
            commit quorum using :dbcommand:`setIndexCommitQuorum`.

          - A replica set :doc:`tag name
            </tutorial/configure-replica-set-tag-sets>`.

          .. versionadded:: 4.4

      * - ``comment``

        - any

        - .. include:: /includes/extracts/comment-content.rst
       
          .. versionadded:: 4.4
   
   .. _createIndexes-options:

   Each document in the ``indexes`` array can take the following fields:

   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``key``
   
        - document
   
        - 
          Specifies the index's fields. For each field, specify a key-value pair
          in which the key is the name of the field to index and the value is
          either the index direction or :ref:`index type <index-types>`. If
          specifying direction, specify ``1`` for ascending or ``-1`` for
          descending.
          
          
          
          MongoDB supports several different index types including
          :ref:`text <index-feature-text>`, :ref:`geospatial
          <index-feature-geospatial>`, and :ref:`hashed
          <index-type-hashed>` indexes. See :ref:`index types <index-types>`
          for more information.
          
          .. versionchanged:: 4.2
          
             MongoDB 4.2 :ref:`wildcard indexes <wildcard-index-core>`
             support workloads where users query against custom fields or a
             large variety of fields in a collection:
          
             - To create a wildcard index on all fields and subfields in a 
               document, specify ``{ "$**" : 1 }`` as the index key. You
               cannot specify a descending index key when creating a wildcard
               index.
          
               You can also either include *or* exclude specific fields and
               their subfields from the index using the optional
               ``wildcardProjection`` parameter.
          
               .. include:: /includes/extracts/wildcard-index-id.rst
          
             - You can create a wildcard index on a specific field
               and its subpaths by specifying the full path to that field as the
               index key and append ``"$**"`` to the path:
          
               ``{ "path.to.field.$**" : 1 }`` 
          
               You cannot specify a descending index key when creating a
               wildcard index.
          
               The path-specific wildcard index syntax is incompatible with the
               ``wildcardProjection`` option. You cannot specify additional
               inclusions or exclusions on the specified path.
          
             The wildcard index key **must** use one of the syntaxes listed
             above. For example, you cannot specify a
             :doc:`compound index key </core/index-compound>`.  For more 
             complete documentation on wildcard indexes, including restrictions 
             on their creation, see :ref:`wildcard-index-restrictions`.
          
             .. include:: /includes/extracts/wildcard-index-fcv.rst
          
          
          
          For examples of wildcard index creation, see 
          :ref:`createIndexes-command-wildcard-examples`.
          
          
          
   
      * - ``name``
   
        - string
   
        - A name that uniquely identifies the index.
          
          
   
      * - ``background``
   
        - boolean
   
        - Optional. *Deprecated in MongoDB 4.2.*
          
          .. include:: /includes/extracts/4.2-index-background.rst
          
          
   
      * - ``unique``
   
        - boolean
   
        - Optional. Creates a unique index so that the collection will not accept
          insertion or update of documents where the index key value matches an existing
          value in the index.
          
          
          Specify ``true`` to create a unique index. The
          default value is ``false``.
          
          The option is *unavailable* for :doc:`hashed </core/index-hashed>`
          indexes.
          
          
          
   
      * - ``partialFilterExpression``
   
        - document
   
        - Optional. If specified, the index only references documents that match the
          filter expression. See :doc:`/core/index-partial` for more information.
          
          
          A filter expression can include:
          
          .. include:: /includes/fact-partial-filter-expression-operators.rst
          
          You can specify a ``partialFilterExpression`` option for all MongoDB
          :ref:`index types <index-types>`.
          
          .. versionadded:: 3.2
          
          
          
   
      * - ``sparse``
   
        - boolean
   
        - Optional. If ``true``, the index only references documents with the specified
          field. These indexes use less space but behave differently in some
          situations (particularly sorts). The default value is ``false``.
          See :doc:`/core/index-sparse` for more information.

          The following index types are sparse by default and ignore
          this option:

          - :doc:`2dsphere </core/2dsphere>`
          - :doc:`2d </core/2d>`
          - :doc:`geoHaystack </core/geohaystack>`
          - :doc:`text </core/index-text>`

          For a compound index that includes ``2dsphere`` index key(s)
          along with keys of other types, only the ``2dsphere`` index
          fields determine whether the index references a document.

          .. versionchanged:: 3.2 

             Starting in MongoDB 3.2, MongoDB provides the option to create
             :ref:`partial indexes <index-type-partial>`. Partial indexes
             offer a superset of the functionality of sparse indexes. If you
             are using MongoDB 3.2 or later, :ref:`partial indexes
             <index-type-partial>` should be preferred over sparse indexes.
   
      * - ``expireAfterSeconds``
   
        - integer
   
        - Optional. Specifies a value, in seconds, as a :term:`TTL` to control how long
          MongoDB retains documents in this collection. See
          :doc:`/tutorial/expire-data` for more information on this
          functionality. This applies only to :term:`TTL` indexes.
     
      * - :ref:`hidden <cmd-createIndexes-hidden>`
          
        - boolean
        
        - .. _cmd-createIndexes-hidden:
        
          Optional. A flag that determines whether the index is
          :doc:`hidden </core/index-hidden>` from the query planner. A
          hidden index is not evaluated as part of query plan
          selection.

          Default is ``false``.

          To use the ``hidden`` option, you must have
          :ref:`featureCompatibilityVersion <view-fcv>` set to ``4.4`` or
          greater. However, once hidden, the index remains hidden even
          with :ref:`featureCompatibilityVersion <view-fcv>` set to
          ``4.2`` on MongoDB 4.4 binaries.

          .. versionadded:: 4.4

      * - ``storageEngine``
   
        - document
   
        - Optional. Allows users to configure the storage engine on a
          per-index basis when creating an index.
          
          
          The ``storageEngine`` option should take the following form:
          
          .. code-block:: javascript
          
             storageEngine: { <storage-engine-name>: <options> }
          
          Storage engine configuration options specified when creating indexes are
          validated and logged to the :term:`oplog` during replication to
          support replica sets with members that use different storage
          engines.
          


      * - ``weights``
   
        - document
   
        - Optional. For :doc:`text </core/index-text>` indexes, a document that contains
          field and weight pairs. The weight is an integer ranging from 1 to
          99,999 and denotes the significance of the field relative to the
          other indexed fields in terms of the score. You can specify weights
          for some or all the indexed fields. See
          :doc:`/tutorial/control-results-of-text-search` to adjust the scores.
          The default value is ``1``.
          
          
   
      * - ``default_language``
   
        - string
   
        - Optional. For :doc:`text </core/index-text>` indexes, the language that
          determines the list of stop words and the rules for the stemmer and
          tokenizer. See :ref:`text-search-languages` for the available
          languages and :doc:`/tutorial/specify-language-for-text-index` for
          more information and examples. The default value is ``english``.
          
          
   
      * - ``language_override``
   
        - string
   
        - Optional. For :doc:`text </core/index-text>` indexes, the name of the field, in
          the collection's documents, that contains the override language for
          the document. The default value is ``language``. See
          :ref:`specify-language-field-text-index-example` for an example.
          
          
   
      * - ``textIndexVersion``
   
        - integer
   
        - Optional. The ``text`` index version number. Users can use this option to
          override the default version number.
          
          For available versions, see :ref:`text-versions`.


      * - ``2dsphereIndexVersion``
   
        - integer
   
        - Optional. The ``2dsphere`` index version number. Users can use this option to
          override the default version number.
          
          For the available versions, see :ref:`2dsphere-v2`.

   
      * - ``bits``
   
        - integer
   
        - Optional. For :doc:`2d </core/2d>` indexes, the number of precision of the
          stored :term:`geohash` value of the location data.
          
          The ``bits`` value ranges from 1 to 32 inclusive. The default value
          is ``26``.
          
          
   
      * - ``min``
   
        - number
   
        - Optional. For :doc:`2d </core/2d>` indexes, the lower inclusive boundary for
          the longitude and latitude values. The default value is ``-180.0``.
          
          
   
      * - ``max``
   
        - number
   
        - Optional. For :doc:`2d </core/2d>` indexes, the upper inclusive boundary for
          the longitude and latitude values. The default value is ``180.0``.
          
          
   
      * - ``bucketSize``
   
        - number
   
        - For :doc:`geoHaystack </core/geohaystack>` indexes, specify the
          number of units within which to group the location values; i.e. group
          in the same bucket those location values that are within the
          specified number of units to each other.
          
          The value must be greater than 0.
          
          
   
      * - ``collation``
   
        - document
   
        - Optional. Specifies the :ref:`collation <collation>` for the index.
          
          .. include:: /includes/extracts/collation-description.rst
          
          .. include:: /includes/extracts/collation-index-collection.rst
          
          .. include:: /includes/extracts/collation-option-specification.rst
          
          .. versionadded:: 3.4
          
          
   
      * - ``wildcardProjection``
   
        - document
   
        - Optional. 

          .. _createIndexes-wildcardProjection-param: 
        
          Allows users to include or exclude specific field paths from
          a :ref:`wildcard index <wildcard-index-core>` using the
          ``{ "$**" : 1}`` key pattern. This option is only 
          valid if creating a :ref:`wildcard index <wildcard-index-core>` on
          all document fields. You cannot specify this option if creating
          a wildcard index on a specific field path and its subfields, e.g.
          ``{ "path.to.field.$**" : 1 }``
          
          
          
          The ``wildcardProjection`` option takes the following form:
          
          .. code-block:: javascript
          
             wildcardProjection: {
               "path.to.field.a" : <value>,
               "path.to.field.b" : <value>
             }
          
          The ``<value>`` can be either of the following:
          
          - ``1`` or ``true`` to include the field in the wildcard index.
          
          - ``0`` or ``false`` to exclude the field from the wildcard index. 
          
          .. include:: /includes/extracts/wildcard-index-id.rst
          
          
          
   


   The :binary:`~bin.mongo` shell provides the methods
   :method:`db.collection.createIndex()` and
   :method:`db.collection.createIndexes()` as wrappers for the
   :dbcommand:`createIndexes` command.

Considerations
--------------

.. versionchanged:: 3.2

   MongoDB disallows the creation of :ref:`version 0
   <3.2-version-0-indexes>` indexes. To upgrade existing version 0
   indexes, see :ref:`3.2-version-0-indexes`.

Index Names
~~~~~~~~~~~

.. note:: Changed in MongoDB 4.2


   .. include:: /includes/extracts/4.2-changes-index-names.rst

Starting in version 4.2, the :dbcommand:`createIndexes` command and
the :binary:`~bin.mongo` shell helpers
:method:`db.collection.createIndex()` and
:method:`db.collection.createIndexes()` report an error if you
create an index with one name, and then try to create the same index
again but with another name.

.. code-block:: javascript

  {
     "ok" : 0,
     "errmsg" : "Index with name: x_1 already exists with a different name",
     "code" : 85,
     "codeName" : "IndexOptionsConflict"
  }

In previous versions, MongoDB did not create the index again, but
would return a response object with ``ok`` value of ``1`` and a note
that implied that the index was not recreated. For example:

.. code-block:: javascript

  {
     "numIndexesBefore" : 2,
     "numIndexesAfter" : 2,
     "note" : "all indexes already exist",
     "ok" : 1
  }

Replica Sets and Sharded Clusters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.4-changes-index-builds-simultaneous-fcv.rst

.. include:: /includes/extracts/4.4-changes-index-builds-simultaneous.rst

To start an index build with a non-default commit quorum, specify the
:ref:`commitQuorum <createIndexes-cmd-commitQuorum>`.

MongoDB 4.4 adds the :dbcommand:`setIndexCommitQuorum` command for 
modifying the commit quorum of an in-progress index build. 

In MongoDB 4.2 and earlier, index builds on a replica set or sharded
cluster build on the primary *first* before replicating to the
secondaries. See :v4.2:`Index Builds In Replicated Environments (4.2)
</core/index-creation>` for the MongoDB 4.2 index build behavior.


To minimize the impact of building an index on replica sets and sharded
clusters, use a rolling index build procedure
as described on :doc:`/tutorial/build-indexes-on-replica-sets`.

Collation and Index Types
~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/collation-index-type-restrictions.rst

.. include:: /includes/extracts/collation-index-type-restrictions-addendum.rst

Behavior
--------

Concurrency
~~~~~~~~~~~

.. versionchanged:: 4.2

.. include:: /includes/extracts/createIndexes-resource-lock.rst

Memory Usage Limit
~~~~~~~~~~~~~~~~~~

.. versionchanged:: 3.4

   .. include:: /includes/fact-index-build-default-memory-limit.rst


Index Options
~~~~~~~~~~~~~

Non-Collation and Non-Hidden Options
````````````````````````````````````

With the exception of the :ref:`collation option
<createIndexes-collation-option>`, if you create an index with one set
of index options and then try to recreate the same index but with
different index options, MongoDB will not change the options nor
recreate the index.

The :ref:`hidden <createIndexes-hidden-option>` option can be changed
without dropping and recreating the index. See
:ref:`createIndexes-hidden-option`.

To change the other index options, drop the existing index with
:method:`db.collection.dropIndex()` before running 
:dbcommand:`createIndexes` with the new options.

.. _createIndexes-collation-option:

Collation Option
````````````````

.. versionadded:: 3.4

.. include:: /includes/extracts/collation-index-options.rst

.. include:: /includes/extracts/collation-index-collection.rst

.. include:: /includes/extracts/collation-index-tip.rst

.. include:: /includes/extracts/collation-index-use.rst

.. _createIndexes-hidden-option:

Hidden Option
``````````````

.. versionadded:: 4.4

.. note::

   To hide an index, you must have :ref:`featureCompatibilityVersion
   <view-fcv>` set to ``4.4`` or greater. However, once hidden, the
   index remains hidden even with :ref:`featureCompatibilityVersion
   <view-fcv>` set to ``4.2`` on MongoDB 4.4 binaries.

To change the ``hidden`` option for existing indexes, you can use the
following :binary:`~bin.mongo` shell methods:

- :method:`db.collection.hideIndex()`

- :method:`db.collection.unhideIndex()`

For example,

- To change the ``hidden`` option for an index to ``true``, use the
  :method:`db.collection.hideIndex()` method:

  .. code-block:: javascript

     db.restaurants.hideIndex( { borough: 1, ratings: 1 } );

- To change the ``hidden`` option for an index to ``false``, use the
  :method:`db.collection.unhideIndex()` method:

  .. code-block:: javascript

     db.restaurants.unhideIndex( { borough: 1, city: 1 } );

.. seealso::

   :doc:`/core/index-hidden`

.. _createIndexes-command-wildcard-behavior:

Wildcard Indexes
~~~~~~~~~~~~~~~~

.. versionadded:: 4.2

- .. include:: /includes/extracts/wildcard-index-id.rst

- .. include:: /includes/extracts/wildcard-index-fcv.rst

- .. include:: /includes/extracts/wildcard-index-restrictions.rst

  For complete documentation on wildcard index restrictions, see 
  :ref:`wildcard-index-restrictions`.

For examples of wildcard index creation, see
:ref:`createIndexes-command-wildcard-examples`.  For complete 
documentation on Wildcard Indexes, see :ref:`wildcard-index-core`.

Transactions
~~~~~~~~~~~~

.. versionchanged:: 4.4

.. include:: /includes/extracts/transactions-explicit-ddl.rst

.. |operation| replace:: :dbcommand:`createIndexes`


Example
-------

The following command builds two indexes on the ``inventory`` collection of
the ``products`` database:

.. code-block:: javascript

   db.getSiblingDB("products").runCommand(
     {
       createIndexes: "inventory",
       indexes: [
           {
               key: {
                   item: 1,
                   manufacturer: 1,
                   model: 1
               },
               name: "item_manufacturer_model",
               unique: true
           },
           {
               key: {
                   item: 1,
                   supplier: 1,
                   model: 1
               },
               name: "item_supplier_model",
               unique: true
           }
       ],
       writeConcern: { w: "majority" }
     }
   )

When the indexes successfully finish building, MongoDB returns a results
document that includes a status of ``"ok" : 1``.

.. _createIndexes-command-wildcard-examples:

Create a Wildcard Index
~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 4.2

   .. include:: /includes/extracts/wildcard-index-fcv.rst

   For complete documentation on Wildcard Indexes, see
   :ref:`wildcard-index-core`.

The following lists examples of wildcard index creation:

- :ref:`createIndexes-command-wildcard-onepath`
- :ref:`createIndexes-command-wildcard-allpaths`
- :ref:`createIndexes-command-wildcard-inclusion`
- :ref:`createIndexes-command-wildcard-exclusion`

.. _createIndexes-command-wildcard-onepath:

Create a Wildcard Index on a Single Field Path
``````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index on the 
``product_attributes`` field:

.. code-block:: shell

   use inventory
   db.runCommand(
     {
       createIndexes: "products_catalog",
       indexes: [
         {
           key: { "product_attributes.$**" : 1 },
           name: "wildcardIndex"
         }
       ]
     }
   )

With this wildcard index, MongoDB indexes all scalar values of
``product_attributes``. If the field is a nested document or array, the
wildcard index recurses into the document/array and indexes all scalar
fields in the document/array.

The wildcard index can support arbitrary single-field queries on 
``product_attributes`` or one of its nested fields:

.. code-block:: shell

   db.products_catalog.find( { "product_attributes.superFlight" : true } )
   db.products_catalog.find( { "product_attributes.maxSpeed" : { $gt : 20 } } )
   db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )

.. |projection-ref| replace:: :ref:`parameter documentation <createIndexes-wildcardProjection-param>`

.. note::

   The path-specific wildcard index syntax is incompatible with the
   ``wildcardProjection`` option. See the |projection-ref| for more
   information.

.. _createIndexes-command-wildcard-allpaths:

Create a Wildcard Index on All Field Paths
``````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index on all scalar fields
(excluding the ``_id`` field):

.. code-block:: shell

   use inventory
   db.runCommand(
     {
       createIndexes: "products_catalog",
       indexes: [
         {
           key: { "$**" : 1 },
           name: "wildcardIndex"
         }
       ]
     }
   )

With this wildcard index, MongoDB indexes all scalar fields for each
document in the collection. If a given field is a nested document or
array, the wildcard index recurses into the document/array and indexes
all scalar fields in the document/array.

The created index can support queries on any arbitrary field 
within documents in the collection:

.. code-block:: shell

   db.products_catalog.find( { "product_price" : { $lt : 25 } } )
   db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )



.. note::

   Wildcard indexes omit the ``_id`` field by default. To include the
   ``_id`` field in the wildcard index, you must explicitly include it
   in the ``wildcardProjection`` document. See |projection-ref| for
   more information.

.. _createIndexes-command-wildcard-inclusion:

Create a Wildcard Index on Multiple Specific Field Paths
````````````````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index and uses
the ``wildcardProjection`` option to include only scalar values of the
``product_attributes.elements`` and ``product_attributes.resistance``
fields in the index. 

.. code-block:: shell

   use inventory
   db.runCommand(
     {
       createIndexes: "products_catalog",
       indexes: [
         {
           key: { "$**" : 1 },
           "wildcardProjection" : {
             "product_attributes.elements" : 1,
             "product_attributes.resistance" : 1
           },
           name: "wildcardIndex"
         }
       ]
     }
   )

While the key pattern ``"$**"`` covers all fields in the document, the
``wildcardProjection`` field limits the index to only the included
fields and their nested fields.

If a field is a nested document or array, the wildcard
index recurses into the document/array and indexes all scalar fields in 
the document/array.

The created index can support queries on any scalar field
included in the ``wildcardProjection``:

.. code-block:: shell

   db.products_catalog.find( { "product_attributes.elements" : { $eq: "Water" } } )
   db.products_catalog.find( { "product_attributes.resistance" : "Bludgeoning" } )

.. note::

   .. include:: /includes/extracts/wildcard-index-inclusion-exclusion.rst

.. _createIndexes-command-wildcard-exclusion:

Create a Wildcard Index that Excludes Multiple Specific Field Paths
```````````````````````````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index and uses
the ``wildcardProjection`` document to index all scalar fields
for each document in the collection, *excluding* the 
``product_attributes.elements`` and ``product_attributes.resistance``
fields:

.. code-block:: shell

   use inventory
   db.runCommand(
     {
       createIndexes: "products_catalog",
       indexes: [
         {
           key: { "$**" : 1 },
           "wildcardProjection" : {
              "product_attributes.elements" : 0,
              "product_attributes.resistance" : 0
           },
           name: "wildcardIndex"
         }
       ]
     }
   )

While the key pattern ``"$**"`` covers all fields in the document, the
``wildcardProjection`` field excludes the specified fields from the
index.

If a field is a nested document or array, the wildcard
index recurses into the document/array and indexes all scalar fields in 
the document/array.

The created index can support queries on any scalar field **except**
those excluded by ``wildcardProjection``:

.. code-block:: shell

   db.products_catalog.find( { "product_attributes.maxSpeed" : { $gt: 25 } } )
   db.products_catalog.find( { "product_attributes.superStrength" : true } )

.. note::

   .. include:: /includes/extracts/wildcard-index-inclusion-exclusion.rst

Create Index With Commit Quorum
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.4-changes-index-builds-simultaneous-fcv.rst

.. include:: /includes/extracts/4.4-changes-index-builds-simultaneous.rst

Specify the :ref:`commitQuorum <createIndexes-cmd-commitQuorum>` option
to the :dbcommand:`createIndexes` operation to set the minimum
number of data-bearing voting members (i.e commit quorum), including the
primary, which must complete the index build before the
primary marks the indexes as ready. The default commit quorum is
``votingMembers``, or all data-bearing voting replica set members.

The following operation creates an index with a :ref:`commit quorum
<createIndexes-cmd-commitQuorum>` of ``"majority"``, or a 
simple majority of data-bearing voting members:

.. code-block:: javascript

   db.getSiblingDB("examples").runCommand(
     { 
       createIndexes: "invoices",
       indexes: [
         { 
           key: { "invoices" : 1 },
           "name" : "invoiceIndex"
         }
       ],
       "commitQuorum" : "majority"
     }
   )

The :term:`primary` marks index build as ready only after a simple
majority of data-bearing voting members "vote" to commit the index
build. For more information on index builds and the voting process, see
:ref:`index-operations-replicated-build`.

Output
------

The :dbcommand:`createIndexes` command returns a document that indicates
the success of the operation. The document contains some but not all of
the following fields, depending on outcome:

.. data:: createIndexes.createdCollectionAutomatically

   If ``true``, then the collection didn't exist and was created in the
   process of creating the index.

.. data:: createIndexes.numIndexesBefore

   The number of indexes at the start of the command.

.. data:: createIndexes.numIndexesAfter

   The number of indexes at the end of the command.

.. data:: createIndexes.ok

   A value of ``1`` indicates the indexes are in place. A value of
   ``0`` indicates an error.

.. data:: createIndexes.note

   This ``note`` is returned if an existing index or indexes already
   exist. This indicates that the index was not created or changed.

.. data:: createIndexes.errmsg

   Returns information about any errors.

.. data:: createIndexes.code

   The error code representing the type of error.
