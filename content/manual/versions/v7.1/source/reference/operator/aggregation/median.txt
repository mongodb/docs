.. _median-aggregation:

=====================
$median (aggregation)
=====================

.. default-domain:: mongodb

.. contents:: On this page
  :local:
  :backlinks: none
  :depth: 1
  :class: singlecol

.. Substitution used in includes and in the body of this text
.. |operatorName| replace:: ``$median``

Definition
----------

.. group:: $median

   .. versionadded:: 7.0

   .. include:: /includes/aggregation/fact-return-median.rst

   You can use |operatorName| as an :ref:`accumulator
   <accumulators-group>` in the :pipeline:`$group <$group>` stage or as
   an :ref:`aggegation expression <aggregation-expressions>`.


Syntax
------

The syntax for |operatorName| is:

.. code-block:: javascript
   :copyable: false

   {
      $median: {
         input: <number>,
         method: <string>
      }
   }

Command Fields
--------------

|operatorName| takes the following fields:

.. list-table::
   :header-rows: 1
   :widths: 15 17 17 51

   * - Field
     - Type
     - Necessity
     - Description

   * - ``input``
     - Expression
     - Required
     - |operatorName| calculates the 50th percentile value of this data.
       ``input`` must be a field name or an expression that evaluates to
       a numeric type. If the expression cannot be converted to a
       numeric type, the |operatorName| calculation ignores it.

   * - ``method``
     - String
     - Required
     - The method that ``mongod`` uses to calculate the 50th percentile
       value. The method must be ``'approximate'``.

Behavior
--------

.. include:: /includes/aggregation/fact-behavior-percent-median.rst

Type of Operation
~~~~~~~~~~~~~~~~~

.. include:: /includes/aggregation/fact-type-of-operation.rst

Calculation Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/aggregation/fact-calc-considerations.rst

Array Input
~~~~~~~~~~~

If you use |operatorName| as an aggregation expression in a
:pipeline:`$project <$project>` stage, you can use an array as input.
|operatorName| ignores non-numeric array values.

The syntax is:

.. code-block:: javascript
   :copyable: false

   {
      $median:
         {
            input: [ <expression1, <expression2>, ..., <expressionN> ], 
            method: <string>
         }
   }

Window Functions
~~~~~~~~~~~~~~~~

.. include:: /includes/aggregation/fact-setwindowfield.rst

Examples
--------

.. include:: /includes/aggregation/example-setup-01.rst

Use |operatorName| as an Accumulator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create an accumulator that calculates the median value:

.. code-block:: javascript

   db.testScores.aggregate( [
      {
         $group: {
            _id: null,
            test01_median: {
               $median: {
                  input: "$test01",
                  method: 'approximate'
               }
            }
         }
      }
   ] )

Output:

.. code-block:: javascript
   :copyable: false

   { _id: null, test01_median: 62 }

The ``_id`` field value is ``null`` so ``$group`` selects all the
documents in the collection.

The |operatorName| accumulator takes its input from the ``test01``
field. |operatorName| calculates the median value for the field, ``62``
in this example.

Use |operatorName| in a ``$project`` Stage
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In a ``$group`` stage, |operatorName| is an accumulator and calculates
a single value for all documents. In a ``$project`` stage,
|operatorName| is an aggregation expression and calculates values for
each document.

You can use a field name or an array as input in a ``$project`` stage.

.. code-block:: javascript

   db.testScores.aggregate( [
      {
         $project: {
            _id: 0,
            studentId: 1,
            testMedians: {
               $median: {
                  input: [ "$test01", "$test02", "$test03" ],
                  method: 'approximate'
               }
            }
         }
      }
   ] )

Output:

.. code-block:: javascript
   :copyable: false

   { studentId: '2345', testMedians: 80 },
   { studentId: '2356', testMedians: 79 },
   { studentId: '2358', testMedians: 78 },
   { studentId: '2367', testMedians: 72 },
   { studentId: '2369', testMedians: 60 }

When |operatorName| is an aggregation expression there is a result for
each ``studentId``.

Use |operatorName| in a ``$setWindowField`` Stage
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To base your percentile values on local data trends, use |operatorName|
in a ``$setWindowField`` aggregation pipeline stage.

This example creates a window to filter scores:

.. code-block:: javascript

   db.testScores.aggregate( [
      {
         $setWindowFields: {
            sortBy: { test01: 1 },
            output: {
               test01_median: {
                  $median: {
                     input: "$test01",
                     method: 'approximate'
                  },
                  window: {
                     range: [ -3, 3 ]
                  }
               }
            }
         }
      },
      {
         $project: {
            _id: 0,
            studentId: 1,
            test01_median: 1
         }
      }
   ] )

Output:

.. code-block:: javascript
   :copyable: false

   { studentId: '2356', test01_median: 60 },
   { studentId: '2369', test01_median: 60 },
   { studentId: '2345', test01_median: 60 },
   { studentId: '2367', test01_median: 64 },
   { studentId: '2358', test01_median: 64 }

In this example, the median calculation for each document also
incorporates data from the three documents before and after it.

Learn More
----------

The :group:`$percentile <$percentile>` operator is a more general
version of the |operatorName| operator that allows you to set one or
more percentile values.

For more information on window functions, see:
:pipeline:`$setWindowFields`.

