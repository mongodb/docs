#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Language: zh\n"
"X-Generator: Poedit 1.6.9\n"

#: ../source/tutorial/build-a-2dsphere-index.txt:5
#: ../source/tutorial/build-a-2dsphere-index.txt:54
msgid "Create a ``2dsphere`` Index"
msgstr "创建 ``2dsphere`` 索引"

#: ../source/tutorial/build-a-2dsphere-index.txt:9
msgid ""
"To create a geospatial index for GeoJSON-formatted data, use the "
":method:`db.collection.createIndex()` method to create a :doc:`2dsphere "
"index </core/2dsphere>`. In the index specification document for the "
":method:`db.collection.createIndex()` method, specify the location field as "
"the index key and specify the string literal ``\"2dsphere\"`` as the value:"
msgstr ""
"如果需要对GeoJSON格式的数据建立地理索引，可以使用 :method:`db.collection."
"ensureIndex()` 方法来创建 :doc:`2dsphere索引 </core/2dsphere>` 。在传递给 :"
"method:`db.collection.ensureIndex()` 方法作参数的索引明细里，将位置数据的键指"
"定为被索引键并将字符串 ``\"2dsphere\"`` 指定为它的值:"

#: ../source/tutorial/build-a-2dsphere-index.txt:20
msgid ""
"The following procedure presents steps to populate a collection with "
"documents that contain a GeoJSON data field and create :doc:`2dsphere "
"indexes </core/2dsphere>`. Although the procedure populates the collection "
"first, you can also create the indexes before populating the collection."
msgstr ""
"如下示例展示了用带有GeoJSON数据的文档来填充集合并创建 :doc:`2dsphere索引 </"
"core/2dsphere>` 的步骤。虽然，例子中是先填充集合，您也可以先创建索引。"

#: ../source/tutorial/build-a-2dsphere-index.txt:27
msgid "Procedure"
msgstr "步骤"

#: ../source/tutorial/build-a-2dsphere-index.txt:29
msgid ""
"First, populate a collection ``places`` with documents that store location "
"data as :ref:`GeoJSON Point <geojson-point>` in a field named ``loc``. The "
"coordinate order is longitude, then latitude."
msgstr ""
"首先，用文档填充集合，文档的 ``loc`` 键上存储着 :ref:`GeoJSON Point <geojson-"
"point>` 形式的位置信息。坐标的顺序是经度，然后纬度。"

#: ../source/tutorial/build-a-2dsphere-index.txt:51
msgid "Then, create the :doc:`2dsphere </core/2dsphere>` index."
msgstr "然后，创建 :doc:`2dsphere </core/2dsphere>` 索引。"

#: ../source/tutorial/build-a-2dsphere-index.txt:56
msgid ""
"For example, the following creates a :doc:`2dsphere </core/2dsphere>` index "
"on the location field ``loc``:"
msgstr ""
"例如，如下命令会在键 ``loc`` 上创建 :doc:`2dsphere </core/2dsphere>` 索引："

#: ../source/tutorial/build-a-2dsphere-index.txt:64
msgid "Create a Compound Index with ``2dsphere`` Index Key"
msgstr "创建带有 ``2dsphere`` 索引键的复合索引"

#: ../source/tutorial/build-a-2dsphere-index.txt:66
msgid ""
"A :ref:`compound index <index-type-compound>` can include a ``2dsphere`` "
"index key in combination with non-geospatial index keys. For example, the "
"following operation creates a compound index where the first key ``loc`` is "
"a ``2dsphere`` index key, and the remaining keys ``category`` and ``names`` "
"are non-geospatial index keys, specifically descending (``-1``) and "
"ascending (``1``) keys respectively."
msgstr ""
"MongoDB中 :ref:`复合索引 <index-type-compound>` 可以包括一个 ``2dsphere`` 索"
"引键和其他非地理索引键。例如如下操作会创建一个复合索引，其中第一个键 ``loc`` "
"是一个  ``2dsphere`` 索引，而剩下的键 ``category`` 和 ``names`` 都是非地理索"
"引键，分别是递减( ``-1`` ) 和 递增( ``1`` ) 的。"

#: ../source/tutorial/build-a-2dsphere-index.txt:78
msgid ""
"Unlike the :doc:`2d </core/2d>` index, a compound ``2dsphere`` index does "
"not require the location field to be the first field indexed. For example:"
msgstr ""
"和 :doc:`2d </core/2d>` 索引不同的是，带有 ``2dsphere`` 索引的复合索引中， "
"``2dsphere`` 的键可以不是第一个键。例如:"

#: ../source/tutorial/build-a-2dsphere-index.txt:87
msgid "Considerations"
msgstr "注意事项"

#: ../source/includes/geo-data-limit-for-2dsphere.rst:1
msgid ""
"Fields with :doc:`2dsphere </core/2dsphere>` indexes must hold geometry data"
" in the form of :term:`coordinate pairs <legacy coordinate pairs>` or "
":term:`GeoJSON` data. If you attempt to insert a document with non-geometry "
"data in a ``2dsphere`` indexed field, or build a ``2dsphere`` index on a "
"collection where the indexed field has non-geometry data, the operation will"
" fail."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:1
msgid ""
"The :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline stage "
"require that a collection have *at most* only one |first-geo-index| and/or "
"only one |second-geo-index| whereas :ref:`geospatial query operators "
"<geospatial-query-selectors>` (e.g. :query:`$near` and :query:`$geoWithin`) "
"permit collections to have multiple geospatial indexes."
msgstr ""
"命令 :dbcommand:`geoNear` 和 :pipeline:`$geoNear` 管道要求集合中最多只能有一"
"个 |first-geo-index| 或者 只能一个 |second-geo-index| ，但是 :ref:`地理查询操"
"作符 <geospatial-query-selectors>` (例如 :query:`$near` 和 :query:`"
"$geoWithin`) 就允许集合拥有多个地理索引。"

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:8
msgid ""
"The geospatial index restriction for the :dbcommand:`geoNear` command and "
"the :pipeline:`$geoNear` pipeline stage exists because neither the "
":dbcommand:`geoNear` command nor the :pipeline:`$geoNear` pipeline stage "
"syntax includes the location field. As such, index selection among multiple "
"``2d`` indexes or ``2dsphere`` indexes is ambiguous."
msgstr ""
"对地理索引的之所以有这样的限制， 是因为 :dbcommand:`geoNear` 命令和 :"
"pipeline:`$geoNear` 管道 的格式里没有包含位置索引键。因此，如何在多个 ``2d`` "
"或者 ``2dsphere`` 索引中做选择这将造成歧义。"

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:14
msgid ""
"No such restriction applies for :ref:`geospatial query operators <geospatial-"
"query-selectors>` since these operators take a location field, eliminating "
"the ambiguity."
msgstr ""
"而对于 :ref:`地理查询操作符 <geospatial-query-selectors>` 没有这样的限制是因"
"为，这些操作符都要求指定一个位置键，消除了歧义。"

#: ../source/tutorial/build-a-2dsphere-index.txt:95
msgid ""
"As such, although this tutorial creates multiple ``2dsphere`` indexes, to "
"use the :dbcommand:`geoNear` command or the :pipeline:`$geoNear` pipeline "
"stage against the example collection, you will need to :method:`drop <db."
"collection.dropIndex()>` all but one of the ``2dsphere`` indexes."
msgstr ""
"因此，虽然在本教程中创建了多个 ``2dsphere`` 索引，当在示例中的集合上使用 :"
"dbcommand:`geoNear` 命令或者 :pipeline:`$geoNear` 管道时，您需要保留一个 "
"``2dsphere`` 索引删除剩余所有。"

#: ../source/tutorial/build-a-2dsphere-index.txt:101
msgid ""
"To query using the ``2dsphere`` index, see :doc:`/tutorial/query-a-2dsphere-"
"index`."
msgstr ""
"参见 :doc:`/tutorial/query-a-2dsphere-index` 查看如何在查询中使用 "
"``2dsphere`` 索引。"
