.. _run-commands:

============
Run Commands
============

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :description: Use run commands in the MongoDB Shell to create or switch databases, terminate a query, or clear the console.
   :keywords: server, atlas

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

To run commands in ``mongosh``, you must first
:ref:`connect to a MongoDB deployment <mdb-shell-connect>`. 

Format Input and Output
-----------------------

.. include:: /includes/links-urls/ejson.rst

``mongosh`` uses the |bsonParseUrl| parser to parse |bsonUrl|
data. You can use the parser's |ejsonUrl| interface to transform your
data when you work with ``mongosh``.

For examples that use EJSON, see: :ref:`<mongosh-ejson>`.

Switch Databases
----------------

To display the database you are using, type ``db``:

.. code-block:: sh

   db

The operation should return ``test``, which is the default database.

To switch databases, issue the ``use <db>`` helper, as in the
following example:

.. code-block:: javascript

   use <database>

To access a different database from the current database without
switching your current database context, see the
:method:`db.getSiblingDB()` method.

To list the databases available to the user, use the helper ``show
dbs``.

Create a New Database and Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To create a new database, issue the ``use <db>`` command with the
database that you would like to create. For example, the following
commands create both the database ``myNewDatabase`` and the
:term:`collection` ``myCollection`` using the
:method:`~db.collection.insertOne()` operation:

.. code-block:: javascript

   use myNewDatabase
   db.myCollection.insertOne( { x: 1 } );

If a collection does not exist, MongoDB creates the collection when you
first store data for that collection.

Terminate a Running Command
---------------------------

To terminate a running command or query in :binary:`~bin.mongosh`,
press ``Ctrl + C``.

When you enter ``Ctrl + C``, :binary:`~bin.mongosh`: 

- interrupts the active command,
- tries to terminate the ongoing, server-side operation, and
- returns a command prompt.

If :binary:`~bin.mongosh` cannot cleanly terminate the running process,
it issues a warning. 

.. note::

   Pressing ``Ctrl + C`` in :binary:`~bin.mongosh` does not terminate
   asynchronous code. Asynchronous operations such as ``setTimeout`` or
   operations like ``fs.readFile`` continue to run.

   There is no way to terminate asynchronous code in
   :binary:`~bin.mongosh`. This is the same behavior as in the Node.js
   `REPL <https://nodejs.org/api/repl.html>`__.

Pressing ``Ctrl + C`` once will not exit :binary:`~bin.mongosh`, press
``Ctrl + C`` twice to  exit :binary:`~bin.mongosh`.

You can also terminate a script from within the script code by calling the 
``exit(<code>)`` command. For more information, refer to 
:ref:`Terminate a Script on Error <mongosh-terminate-script>`.

Command Exceptions
------------------

.. include:: /includes/legacy/legacy-command-exceptions.rst

Clear the ``mongosh`` Console
-----------------------------

The ``cls`` command clears the console. You can also clear the console
with ``Ctrl + L`` and ``console.clear()``.

