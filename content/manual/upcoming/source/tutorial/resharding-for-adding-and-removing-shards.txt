.. _resharding-for-adding-and-removing-shards-tutorial:

=========================================
Resharding for Adding and Removing Shards
=========================================

.. facet::
   :name: genre
   :values: tutorial

.. meta:: 
   :description: Resharding for Adding and Removing Shards Tutorial

About this Task
---------------

You can use resharding to distribute your sharded collections to new 
shards. You can also use it to remove shards faster than chunk 
migrations.

.. include:: /includes/resharding-operation-phases.rst

Before you Begin
----------------

Before you reshard, you must calculate your cluster's 
:ref:`<resharding-storage-req>`, :ref:`<resharding-latency-req>`,
and any :ref:`<resharding-addl-reqs>`.

.. _resharding-storage-req:

Storage Requirements
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/reshard-to-same-key/storage.rst

.. _resharding-latency-req:

Latency Requirements
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/reshard-to-same-key/latency.rst

.. _resharding-addl-reqs:

Additional Resource Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/reshard-to-same-key/addl-resource-reqs.rst

Steps
-----

.. procedure::
   :style: normal
   
   .. step:: Add or remove shards to your cluster.

      To add shards to your cluster, see 
      :ref:`<sharding-procedure-add-shard>`. To remove shards from your
      cluster, see :ref:`<remove-shards-from-cluster-tutorial>`.

   .. step:: Reshard sharded collections one at a time to the same shard key.

      Use the ``reshardCollection`` command with the ``forceRedistribution`` 
      option to redistribute data across the cluster.
      
      .. code-block:: javascript

         db.adminCommand( 
            {
               reshardCollection: "<db>.<collection>",
               key: { "<shardkey>" },
               forceRedistribution: true
            } 
         )

      Resharding with ``forceRedistribution: true`` rewrites the data 
      across all shards in the cluster that are not in a draining state.
      By default, resharding uses ``numInitialChunks: 90``. Resharding 
      creates at least ``numInitialChunks - 1`` chunks in a cluster. If 
      you have more than 90 shards, specify a higher number of 
      ``numInitialChunks`` in the ``reshardCollection`` command.
            
   .. step:: Monitor the resharding operation. 
   
      To monitor the resharding operation, you can use the
      :pipeline:`$currentOp` pipeline stage:
   
      .. code-block:: javascript
   
         db.getSiblingDB("admin").aggregate(
            [
              { $currentOp: { allUsers: true, localOps: false } },
              {
                $match: {
                  type: "op",
                  "originatingCommand.reshardCollection": "<database>.<collection>"
                }
              }
            ]
         )
   
      .. note::
   
         To see updated values, you need to continuously run the
         pipeline.
   
      The :pipeline:`$currentOp` pipeline outputs:
   
      - ``totalOperationTimeElapsedSecs``: elapsed operation time in
        seconds
      - .. include:: /includes/remainingOperationTimeEstimatedSecs-details.rst
   
      .. code-block:: javascript
   
         [
           {
             shard: '<shard>',
             type: 'op',
             desc: 'ReshardingRecipientService | ReshardingDonorService | ReshardingCoordinatorService <reshardingUUID>',
             op: 'command',
             ns: '<database>.<collection>',
             originatingCommand: {
               reshardCollection: '<database>.<collection>',
               key: <shardkey>,
               unique: <boolean>,
               collation: { locale: 'simple' }
             },
             totalOperationTimeElapsedSecs: <number>,
             remainingOperationTimeEstimatedSecs: <number>,
             ...
           },
           ...
         ]
      
      Resharding with ``forceRedistribution: true`` rewrites the 
      collection data to all the relevant shards and drops the old 
      collection. It is the fastest method to move data in a cluster.

Learn More
----------

- :ref:`<reshard-to-same-key>`
- :ref:`<sharding-resharding>`
- :method:`sh.reshardCollection()`
