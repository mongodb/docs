#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/sharded-cluster-high-availability.txt:5
msgid "Sharded Cluster High Availability"
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:15
msgid ""
"A :ref:`production <sharding-production-architecture>` :term:`cluster` has "
"no single point of failure. This section introduces the availability "
"concerns for MongoDB deployments in general and highlights potential failure"
" scenarios and available resolutions."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:21
msgid "Application Servers or :program:`mongos` Instances Become Unavailable"
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:31
msgid "A Single :program:`mongod` Becomes Unavailable in a Shard"
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:33
msgid ""
":doc:`Replica sets </replication>` provide high availability for shards. If "
"the unavailable :program:`mongod` is a :term:`primary`, then the replica set"
" will :ref:`elect <replica-set-elections>` a new primary. If the unavailable"
" :program:`mongod` is a :term:`secondary`, and it disconnects the primary "
"and secondary will continue to hold all data. In a three member replica set,"
" even if a single member of the set experiences catastrophic failure, two "
"other members have full copies of the data. [#recovery-window]_"
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:42
msgid ""
"Always investigate availability interruptions and failures. If a system is "
"unrecoverable, replace it and create a new member of the replica set as soon"
" as possible to replace the lost redundancy."
msgstr ""

#: ../source/includes/note-config-server-startup.rst:3
msgid ""
"All config servers must be running and available when you first initiate a "
":term:`sharded cluster`."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:90
msgid ""
"To avoid downtime when renaming config servers, use DNS names unrelated to "
"physical or virtual hostnames to refer to your :ref:`config servers "
"<sharding-config-server>`."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:94
msgid ""
"Generally, refer to each config server using the DNS alias (e.g. a CNAME "
"record). When specifying the config server connection string to "
":program:`mongos`, use these names. These records make it possible to change"
" the IP address or rename config servers without changing the connection "
"string and without having to restart the entire cluster."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:101
msgid "Shard Keys and Cluster Availability"
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:103
msgid ""
"The most important consideration when choosing a :term:`shard key` are:"
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:106
msgid ""
"to ensure that MongoDB will be able to distribute data evenly among shards, "
"and"
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:109
msgid "to scale writes across the cluster, and"
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:111
msgid ""
"to ensure that :program:`mongos` can isolate most queries to a specific "
":program:`mongod`."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:114
msgid "Furthermore:"
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:116
msgid ""
"Each shard should be a :term:`replica set`, if a specific :program:`mongod` "
"instance fails, the replica set members will elect another to be "
":term:`primary` and continue operation. However, if an entire shard is "
"unreachable or fails for some reason, that data will be unavailable."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:122
msgid ""
"If the shard key allows the :program:`mongos` to isolate most operations to "
"a single shard, then the failure of a single shard will only render *some* "
"data unavailable."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:126
msgid ""
"If your shard key distributes data required for every operation throughout "
"the cluster, then the failure of the entire shard will render the entire "
"cluster unavailable."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:130
msgid ""
"In essence, this concern for reliability simply underscores the importance "
"of choosing a shard key that isolates query operations to a single shard."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:0
msgid "On this page"
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:23
msgid ""
"If each application server has its own :program:`mongos` instance, other "
"application servers can continue to access the database. Furthermore, "
":program:`mongos` instances do not maintain persistent state, and they can "
"restart and become unavailable without losing any state or data. When a "
":program:`mongos` instance starts, it retrieves a copy of the :term:`config "
"database` and can begin routing queries."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:46
msgid ""
"If an unavailable secondary becomes available while it still has current "
"oplog entries, it can catch up to the latest state of the set using the "
"normal :term:`replication process <sync>`; otherwise, it must perform an "
":term:`initial sync`."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:52
msgid "All Members of a Shard Become Unavailable"
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:54
msgid ""
"If all members of a replica set shard are unavailable, all data held in that"
" shard is unavailable. However, the data on all other shards will remain "
"available, and it is possible to read and write data to the other shards. "
"However, your application must be able to deal with partial results, and you"
" should investigate the cause of the interruption and attempt to recover the"
" shard as soon as possible."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:64
msgid "A Config Server Replica Set Member Become Unavailable"
msgstr ""

#: ../source/includes/fact-mirrored-config-servers-deprecated.rst:1
msgid ""
"Starting in MongoDB 3.2, config servers for sharded clusters can be deployed"
" as a :doc:`replica set </core/replication-introduction>`. The replica set "
"config servers must run the :doc:`WiredTiger storage engine "
"</core/wiredtiger>`. MongoDB 3.2 deprecates the use of three mirrored "
":program:`mongod` instances for config servers."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:70
msgid ""
":doc:`Replica sets </replication>` provide high availability for the config "
"servers. If an unavailable config server is a :term:`primary`, then the "
"replica set will :ref:`elect <replica-set-elections>` a new primary."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:75
msgid ""
"If the replica set config server loses its primary and cannot elect a "
"primary, the cluster's metadata becomes *read only*. You can still read and "
"write data from the shards, but no :ref:`chunk migration <sharding-"
"balancing>` or :doc:`chunk splits </tutorial/split-chunks-in-sharded-"
"cluster>` will occur until a primary is available. If all config databases "
"become unavailable, the cluster can become inoperable."
msgstr ""

#: ../source/core/sharded-cluster-high-availability.txt:86
msgid "Renaming Mirrored Config Servers and Cluster Availability"
msgstr ""

#: ../source/includes/fact-rename-config-servers-requires-cluster-restart.rst:1
msgid ""
"If the sharded cluster is using *mirrored* config servers instead of a "
"replica set and the name or address that a sharded cluster uses to connect "
"to a config server changes, you must restart **every** :program:`mongod` and"
" :program:`mongos` instance in the sharded cluster. Avoid downtime by using "
"CNAMEs to identify config servers within the MongoDB deployment."
msgstr ""

#~ msgid ""
#~ "If each application server has its own :program:`mongos` instance, other "
#~ "application servers can continue access the database. Furthermore, "
#~ ":program:`mongos` instances do not maintain persistent state, and they can "
#~ "restart and become unavailable without losing any state or data. When a "
#~ ":program:`mongos` instance starts, it retrieves a copy of the :term:`config "
#~ "database` and can begin routing queries."
#~ msgstr ""

#~ msgid "All Members of a Replica Set Become Unavailable"
#~ msgstr ""

#~ msgid ""
#~ "If all members of a replica set within a shard are unavailable, all data "
#~ "held in that shard is unavailable. However, the data on all other shards "
#~ "will remain available, and it's possible to read and write data to the other"
#~ " shards. However, your application must be able to deal with partial "
#~ "results, and you should investigate the cause of the interruption and "
#~ "attempt to recover the shard as soon as possible."
#~ msgstr ""

#~ msgid "One or Two Config Servers Become Unavailable"
#~ msgstr ""

#~ msgid ""
#~ "Three distinct :program:`mongod` instances provide the :doc:`config servers "
#~ "</core/sharded-cluster-config-servers>`."
#~ msgstr ""

#~ msgid ""
#~ "If one or two config servers become unavailable, the cluster's metadata "
#~ "becomes *read only*. You can still read and write data from the shards, but "
#~ "no :ref:`chunk migration <sharding-balancing>` or :doc:`chunk splits "
#~ "</tutorial/split-chunks-in-sharded-cluster>` will occur until all three "
#~ "servers are available. Replace the config server as soon as possible. If all"
#~ " config databases become unavailable, the cluster can become inoperable."
#~ msgstr ""

#~ msgid ""
#~ "If the config servers are inconsistent, the balancer will not perform any "
#~ ":ref:`chunk migration <sharding-balancing>` nor will the :program:`mongos` "
#~ "perform :doc:`auto-chunk splits </tutorial/split-chunks-in-sharded-"
#~ "cluster>`."
#~ msgstr ""

#~ msgid ""
#~ "If an unavailable secondary becomes available while it still has current "
#~ "oplog entries, it can catch up to the latest state of the set using the "
#~ "normal :term:`replication process <sync>`, otherwise it must perform an "
#~ ":term:`initial sync`."
#~ msgstr ""

#~ msgid "Renaming Config Servers and Cluster Availability"
#~ msgstr ""

#~ msgid ""
#~ "If the name or address that a sharded cluster uses to connect to a config "
#~ "server changes, you must restart **every** :program:`mongod` and "
#~ ":program:`mongos` instance in the sharded cluster. Avoid downtime by using "
#~ "CNAMEs to identify config servers within the MongoDB deployment."
#~ msgstr ""
