=====================
Query Geospatial Data
=====================

.. default-domain:: mongodb

Geospatial data stores location values for documents that can be used to
query documents based on geographic location, such as city, region, or
address. For an introduction to geospatial data, see
:doc:`/core/geospatial-indexes`.

You can query geospatial data using the following approaches:

- Proximity queries, which query based on distance to a given point. See
  :ref:`geospatial-indexes-proximity`.

- Bounded queries, which return documents within a defined area. Bounded
  queries do not sort results and are faster than proximity queries. See
  :ref:`geospatial-indexes-bounded`.

- Query for exact matches using the :method:`find()
  <db.collection.find()>`. Exact geospatial queries have applicability
  for a limited selection of cases. See
  :ref:`geospatial-indexes-exact-match`.

.. index:: geospatial queries; proximity
.. _geospatial-indexes-near:
.. _geospatial-indexes-proximity:

Proximity Queries
-----------------

Proximity queries find the first "N" documents closest to a point. To
perform proximity queries you use either the :method:`find()
<db.collection.find()>` method with the :operator:`$near` operator or
you use the :dbcommand:`geoNear` command.

The :method:`find() <db.collection.find()>` method with the
:operator:`$near` operator returns 100 documents by default and sorts
the results by distance. The :operator:`$near` operator uses the
following form:

.. code-block:: javascript

   db.collection.find( { <location field>: { $near: [ x, y ] } } )

.. example::

   The following query

   .. code-block:: javascript

      db.places.find( { loc: {$near: [-70,40] } })

   returns output similar to the following:

   .. code-block:: javascript

      { "_id" : ObjectId(" ... "), "loc" : [ -73, 40 ] }

The :dbcommand:`geoNear` command provides more information than does the
:operator:`$near` operator but does not sort results. The
:dbcommand:`geoNear` command also offers additional operators, such as
operators to query for :ref:`maximum <geospatial-indexes-distance>` or
:ref:`spherical <geospatial-indexes-spherical>` distance. For a list of
operators, see :dbcommand:`geoNear`.

Without additional operators, the :dbcommand:`geoNear` command uses the
following form:

.. code-block:: javascript

   db.runCommand( {geoNear: "[collection]", near: [ x, y ] } )

.. example:: 

   The following command returns the same results as the
   :operator:`near` in the previous example but with more information:

   .. code-block:: javascript

      db.runCommand( {geoNear: "places", near: [ -74, 40.74 ] } )

   The output is:

    .. code-block:: javascript

      {
         "ns" : "test.places",
         "near" : "0110000111111000000111111000000111111000000111111000",
         "results" : [
            {
               "dis" : 3,
               "obj" : {
                  "_id" : ObjectId(" ... "),
                  "loc" : [
                     -73,
                     40
                  ]
               }
            }
         ],
         "stats" : {
            "time" : 2,
            "btreelocs" : 0,
            "nscanned" : 1,
            "objectsLoaded" : 1,
            "avgDistance" : 3,
            "maxDistance" : 3.0000188685220253
         },
         "ok" : 1
      }

.. index:: geospatial queries; distance limit
.. _geospatial-indexes-distance:

Distance Queries
~~~~~~~~~~~~~~~~

You can limit a proximity query to those documents that fall within a
maximum distance of a point. You specify the maximum distance using the
units specified by the coordinate system. For example, if the coordinate
system uses meters, you specify maximum distance in meters.

To specify distance using the :method:`find() <db.collection.find()>`
method, use :operator:`$maxDistance` operator. Use the following form:

.. code-block:: javascript

   db.collection.find( { <location field>: { $near: [ x, y ] } , $maxDistance : z } )

To specify distance with the :dbcommand:`geoNear` command, use the
``maxDistance`` option. Use the following form:

.. code-block:: javascript

   db.runCommand( { geoNear: "collection", near: [ x, y ], maxDistance: z } )

.. _geospatial-indexes-limit:

Limit the Number of Results
~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, geospatial queries with the :method:`find()
<db.collection.find()>` method return 100 documents, sorted by distance.

To limit the result when using the :method:`find()
<db.collection.find()>` method, use the :method:`limit()
<cursor.limit()>` method. The following is the prototype operation:

.. code-block:: javascript

   db.collection.find( { <location field>: { $near: [ x, y ] } } ).limit(n)

To limit the result set when using the :dbcommand:`geoNear` command, use
the ``num`` option. The following is a prototype of the command:

.. code-block:: javascript

   db.runCommand( { geoNear: "collection", near: [ x, y ], num: z } )

The :method:`limit() <cursor.limit()>` method and ``near`` parameter do
not limit geospatial query results by distance, only the number of
results. To limit geospatial search results by distance, please see
the :ref:`geospatial-indexes-distance` section.

.. note::

   The :method:`limit() <cursor.limit()>` method and ``num`` option have
   different performance characteristics. Geospatial queries using
   :method:`limit() <cursor.limit()>` method are slower than using
   :dbcommand:`geoNear`. 

   Geospatial queries with the :method:`find() <db.collection.find()>`
   method will return 100 documents, sort them, and finally limit the
   result set. Geospatial queries with the :dbcommand:`geoNear` and
   ``num`` option will only return the specified number of unsorted
   documents.

.. TODO double check with greg

.. _geospatial-indexes-within:
.. _geospatial-indexes-bounded:

Bounded Queries
---------------

Bounded queries return documents within a particular shape and use the
:operator:`$within` operator to define the shape.

Bounded queries can use the following shapes:

- :ref:`geospatial-indexes-circles`
- :ref:`geospatial-indexes-rectangles`
- :ref:`geospatial-indexes-polygons`

Bounded queries do not return sorted results and are faster than
:ref:`geospatial-indexes-proximity`.

.. TODO update $near in operator pages

Bounded queries take the following prototype form:

.. code-block:: javascript

   db.collection.find( { <location field> :
                              { "$within" :
                                { <shape> : <shape dimensions> }
                              }
                       } )

The following sections describe how to query based on different shapes.

.. _geospatial-indexes-circles:

Circles
~~~~~~~

To query for documents within a circle, you specify the center and
the radius of the circle using the :operator:`$within` operator and
:operator:`$center` option. Consider the following prototype query:

.. code-block:: javascript

   db.collection.find( { "field": { "$within": { "$center": [ center, radius ] } } } )

The following example query returns all documents that have coordinates
that exist within the circle centered on ``[-74, 40.74]`` and with a
radius of ``10``, using a geospatial index on the ``loc`` field:

.. code-block:: javascript

   db.places.find( { "loc": { "$within":
                               { "$center": [ [-74, 40.74], 10 ] }
                            }
                   } )

The :operator:`$within` operator using :operator:`$center` is similar to
using :operator:`$maxDistance`, but :operator:`$center` has different
performance characteristics. Queries using the :operator:`$within`
operator are not sorted, while :operator:`$near` operator results are
sorted.

.. _geospatial-indexes-rectangles:

Rectangles
~~~~~~~~~~

To query for documents that lie within a rectangle, you specify the
lower-left and upper-right corners of the rectangle using the
:operator:`$within` operator and :operator:`$box` option. Consider the
following prototype query:

.. code-block:: javascript

   db.collection.find( { "field": { "$within": { "$box": [ coordinate0, coordinate1 ] } } } )

The following query returns all documents that have coordinates
that exist within the rectangle where the lower-left corner is at
``[ 0, 0 ]`` and the upper-right corner is at ``[ 3, 3 ]``, using a
geospatial index on the ``loc`` field:

.. code-block:: javascript

   db.places.find( { "loc": { "$within": { "$box": [ [0, 0] , [3, 3] ] } } } )

.. _geospatial-indexes-polygons:

Polygons
~~~~~~~~

.. versionadded:: 1.9

   Support for polygon queries.

To query for documents that lie within a polygon, you specify the points
of the polygon in an array, using the the :operator:`$within` operator
with the :operator:`$polygon` option. MongoDB automatically connects the
last point in the array to the first point. Consider the following
prototype query:

.. code-block:: javascript

   db.places.find({ "loc": { "$within": { "$polygon": [ points ] } } })

The following query returns all documents that have coordinates
that exist within ``[0,0]``, ``[3,3]`` , ``[6,0]``:

.. code-block:: javascript

   db.places.find({ "loc": { "$within": { "$polygon":
                                        [0,0], [3,3], [6,0] } } } )

.. index:: geospatial queries
.. index:: geospatial queries; exact
.. _geospatial-indexes-exact-match:

Query for Exact Matches
-----------------------

You can use the :method:`find() <db.collection.find()>` method to query
for an exact match on a location. These queries have the following form:

.. code-block:: javascript

   db.collection.find( { <location field>: [ x, y ] } )

This query will return any documents with the value of ``[ x, y ]``.

Exact geospatial queries have applicability for a limited selection of
cases, the :ref:`proximity <geospatial-indexes-proximity>` method and
:ref:`bounded <geospatial-indexes-bounded>` method provide more useful
results.

.. _geospatial-indexes-spherical:

Calculate Distances Using Spherical Geometry
--------------------------------------------

When you query location data, MongoDB by default calculates distances using flat
geometry, which models points on a flat surface.

Optionally, you can calculate distances using spherical geometry, which
models points on a spherical surface (i.e. coordinates on Earth).

To calculate distances using spherical geometry, use MongoDB's
spherical operators or options. You can use the:

- :method:`find() <db.collection.find()>` method with the
  :operator:`$nearSphere` operator.

- :method:`find() <db.collection.find()>` method with the
  :operator:`$centerSphere`.

- :dbcommand:`geoNear` command with the ``{ spherical: true }`` option.

.. seealso:: :ref:`geospatial-query-operators`.

For more information on differences between flat and spherical distance
calculation, see :ref:`geospatial-indexes-distance-calculation`.

.. _geospatial-indexes-distance-multiplier:

Distance Multiplier
-------------------

The ``distanceMultiplier`` option multiplies all distances returned by
:dbcommand:`geoNear` command by an assigned value. 

.. note::

   Because ``distanceMultiplier`` is an option to
   :dbcommand:`geoNear`, the multiplication operation occurs on the
   :program:`mongod` process. The operation adds a slight overhead to
   the operation of :dbcommand:`geoNear`.

Using ``distanceMultiplier`` in spherical queries allows one to use
results from the :dbcommand:`geoNear` command without radian to
distance conversion. The following example uses ``distanceMultiplier`` in the
:dbcommand:`geoNear` command with a :ref:`spherical
<geospatial-indexes-spherical>` example:

.. code-block:: javascript

   db.runCommand( { geoNear: "places",
                    near: [ -74, 40.74 ],
                    spherical: true,
                    distanceMultiplier: 3963.192
                  }  )

The output of the above command would be:

.. code-block:: javascript

   {
      // [ ... ]
      "results" : [
         {
            "dis" : 73.46525170413567,
            "obj" : {
               "_id" : ObjectId( ... )
               "loc" : [
                  -73,
                  40
               ]
            }
         }
      ],
      "stats" : {
         // [ ... ]
         "avgDistance" : 0.01853688938212826,
         "maxDistance" : 0.01853714811400047
      },
      "ok" : 1
   }

.. seealso::
   :ref:`Distance operator <geospatial-indexes-distance>`

.. _geospatial-indexes-haystack-queries:

Querying Haystack Indexes
-------------------------

Haystack indexes are a special geospatial index that are optimized for a
small area. To create geospatial indexes see
:ref:`geospatial-indexes-haystack-index`.

To query the haystack index, use the :dbcommand:`geoSearch`
command. You must specify both the coordinate and other field to
:dbcommand:`geoSearch`, which take the following form:

.. code-block:: javascript

   db.runCommand( { geoSearch: <haystack index>, 
                    search: { <field>: <value> } } )

For example, to return all documents with the value ``restaurants`` in
the ``type`` field near the example point, the command would resemble:

.. code-block:: javascript

   db.runCommand( { geoSearch: "places",
                    search: { type: "restaurant" },
                    near: [-74, 40.74] } )

.. note::

   Haystack indexes are not suited to returning the closest documents to
   a particular location, as the closest documents could be far away
   compared to the ``bucketSize``.

.. note::

   :ref:`Spherical queries <geospatial-indexes-spherical>` are
   not currently supported by haystack indexes.

   The :method:`find() <db.collection.find()>` method and
   :dbcommand:`geoNear` command cannot access the haystack index.
