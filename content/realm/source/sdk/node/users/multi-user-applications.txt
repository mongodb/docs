.. meta::
   :robots: noindex, nosnippet

.. _node-multi-user-applications:

=====================================
Multi-User Applications - Node.js SDK
=====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The Realm SDK allows multiple :ref:`users <user-accounts>` to be logged in to an
app simultaneously on a given device. Realm client applications run
in the context of a single active user even if multiple users are logged in
simultaneously. You can quickly switch between authenticated users without
requiring them to log in again.

.. important::
   
   **Any logged in user may become the active user without re-authenticating.**
   Depending on your app, this may be a security vulnerability. For example, a
   user on a shared device may switch to a coworker's logged in account without
   providing their credentials or requiring their explicit permission. If your
   application requires stricter authentication, avoid switching between users
   and prefer to explicitly log the active user out before authenticating
   another user.

User Account States
-------------------

When a user first logs in through a Realm SDK on a given device or
browser, the SDK saves the user's information and keeps track of the user's
state on the device. The user's data remains on the device, even if they log
out, unless you actively :ref:`remove the user <dotnet-remove-user>`.

The following states describe an on-device user at any given time:

- **Authenticated:** any user that has logged in on the device
  and has not logged out or had its session revoked.
  
  - **Active**: a single authenticated user that is currently using the
    app on a given device. The SDK associates this user with outgoing
    requests and Atlas App Services evaluates data access permissions and runs
    functions in this user's context. See :ref:`active user <active-user>` for
    more information.
   
  - **Inactive**: all authenticated users that are not the current
    active user. You can :ref:`switch the active user <dotnet-switch-user>` to a
    currently inactive user at any time.

- **Logged Out:** any user that authenticated on the device but
  has since logged out or had their session revoked.

The following diagram shows how users within an App Services client app
transition between states when certain events occur:

.. figure:: /images/multi-user.png
   :alt: A diagram the outlines the different states a user can be in: logged out, logged in and active, & logged in and inactive.

.. _node-add-a-new-user-to-the-device:

Add a New User to the Device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Realm SDK automatically adds users to a device when they log in
for the first time on that device. When a user logs in, they immediately become
the application's :ref:`active user <active-user>`.

.. example::

   In the example below, a user with the email ``joe@example.com`` logs in and
   becomes the active user. Later, a user with the email
   ``emma@example.com`` logs in and becomes the active user.

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: javascript
         
         .. literalinclude:: /examples/MultiUser/AddUser/AddUser.js
            :language: javascript
      
      .. tab::
         :tabid: typescript
         
         .. literalinclude:: /examples/MultiUser/AddUser/AddUser.ts
            :language: typescript

.. _node-list-all-users-on-the-device:

List All Users on the Device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can access a list of all :ref:`user accounts <user-accounts>` on the device.
This list includes all users that have logged in to the client app on a given
device.

.. example::

   In the example below, a developer prints out all the logged-in users on the
   device by looping through :js-sdk:`Realm.App.allUsers
   <classes/App.html#allUsers>`. 

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: javascript
         
         .. literalinclude:: /examples/MultiUser/ListUsers/ListUsers.js
            :language: javascript
      
      .. tab::
         :tabid: typescript
         
         .. literalinclude:: /examples/MultiUser/ListUsers/ListUsers.ts
            :language: typescript

.. _node-remove-a-user-from-the-device:

Remove a User from the Device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can remove all information about a user from the device and automatically
log the user out.

.. example::

   In the example below, the current user is removed from the device using the
   :js-sdk:`Realm.App.removeUser() <classes/App.html#removeUser>` method. 

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: javascript
         
         .. literalinclude:: /examples/MultiUser/LogoutUser/LogoutUser.js
            :language: javascript
            :emphasize-lines: 3
      
      .. tab::
         :tabid: typescript
         
         .. literalinclude:: /examples/MultiUser/LogoutUser/LogoutUser.ts
            :language: typescript
            :emphasize-lines: 3

.. _node-change-the-active-user:

Change the Active User
~~~~~~~~~~~~~~~~~~~~~~

You can quickly switch an app's active user to another logged-in user at any
time.

.. example::

   In the example below, the active user is initially switched to ``user1``
   using the :js-sdk:`Realm.App.switchUser() <classes/App.html#switchUser>` method.
   Later, the active user is switched to ``user2``.

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: javascript
         
         .. literalinclude:: /examples/MultiUser/SwitchUser/SwitchUser.js
            :language: javascript
      
      .. tab::
         :tabid: typescript
         
         .. literalinclude:: /examples/MultiUser/SwitchUser/SwitchUser.ts
            :language: typescript
