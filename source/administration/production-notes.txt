================
Production Notes
================

.. default-domain:: mongodb

This page details system configurations that affect MongoDB,
especially in production.

.. note::
   `MongoDB Management Service (MMS) <http://mms.mongodb.com>`_ is a hosted monitoring service
   which collects and aggregates diagnostic data to provide insight into
   the performance and operation of MongoDB deployments. See the
   `MMS Website <http://mms.mongodb.com/>`_ and the
   `MMS documentation <http://mms.mongodb.com/help/>`_ for more
   information.

Packages
--------

MongoDB
~~~~~~~

Be sure you have the latest stable release.
All releases are available on the `Downloads
<http://www.mongodb.org/downloads>`_ page. This is a good place to
verify what is current, even if you then choose to install via a
package manager.

Always use 64-bit builds for production. The 32-bit build MongoDB
offers for test and development environments is not suitable for
production deployments as it can store no more than 2GB of data.
See the :ref:`32-bit limitations
<faq-32-bit-limitations>` for more information.

32-bit builds exist to support use on development machines.

Operating Systems
~~~~~~~~~~~~~~~~~

MongoDB distributions are currently available for Mac OS X, Linux,
Windows Server 2008 R2 64bit, Windows 7 (32 bit and 64 bit), Windows
Vista, and Solaris platforms.

.. include:: /includes/note-minimum-glibc.rst

Concurrency
-----------

In earlier versions of MongoDB, all write operations contended for a
single readers-writer lock on the MongoDB instance. As of version 2.2,
each database has a readers-writer lock that allows concurrent reads
access to a database, but gives exclusive access to a single write
operation per database. See the :doc:`Concurrency </faq/concurrency/>`
page for more information.

.. In future, Concurrency should perhaps go with a section detailing bulk
   inserts & write throughput.

Journaling
----------

MongoDB uses *write ahead logging* to an on-disk :term:`journal` to
guarantee that MongoDB is able to quickly recover the
:doc:`write operations </core/write-operations>`
following a crash or other serious failure.

In order to ensure that :program:`mongod` will be able to recover its
data files and keep the data files in a valid state following a crash,
leave journaling enabled. See :doc:`Journaling </core/journaling/>` for
more information.

Networking
----------

Use Trusted Networking Environments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Always run MongoDB in a *trusted environment*, with network rules that
prevent access from *all* unknown machines, systems, and networks. As
with any sensitive system dependent on network access, your MongoDB
deployment should only be accessible to specific systems that require
access, such as application servers, monitoring services, and other MongoDB
components.

.. note::
   By default, :setting:`~security.authorization` is not enabled and
   :program:`mongod` assumes a trusted environment. You can enable
   :doc:`security/auth </core/security>` mode if you need it.

See documents in the :doc:`Security Section </security>` for additional
information, specifically:

- :ref:`security-port-numbers`
- :ref:`security-firewalls`
- :doc:`Network Security Tutorials </administration/security-network>`

For Windows users, consider the `Windows Server Technet Article on TCP
Configuration <http://technet.microsoft.com/en-us/library/dd349797.aspx>`_
when deploying MongoDB on Windows.

Connection Pools
~~~~~~~~~~~~~~~~

To avoid overloading the connection resources of a single
:program:`mongod` or :program:`mongos` instance, ensure that clients
maintain reasonable connection pool sizes.

.. TODO: explain how to maintain reasonable pool sizes

The :dbcommand:`connPoolStats` database
command returns information regarding the number of open connections
to the current database for :program:`mongos` instances and
:program:`mongod` instances in sharded clusters.

Hardware Considerations
-----------------------

MongoDB is designed specifically with commodity hardware in mind and
has few hardware requirements or limitations. MongoDB's core components
run on little-endian hardware, primarily x86/x86_64 processors. Client
libraries (i.e. drivers) can run on big or little endian systems.

Hardware Requirements and Limitations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The hardware for the most effective MongoDB deployments have the
following properties:

Allocate Sufficient RAM and CPU
```````````````````````````````

As with all software, more RAM and a faster CPU clock speed are
important for performance.

In general, databases are not CPU bound. As such, increasing the
number of cores can help, but does not provide significant marginal
return.

Use Solid State Disks (SSDs)
````````````````````````````

MongoDB has good results and a good price-performance ratio with SATA
SSD (Solid State Disk).

Use SSD if available and economical. Spinning disks can be performant, but
SSDs' capacity for random I/O operations works well with the update
model of :program:`mongod`.

Commodity (SATA) spinning drives are often a good option, as the
random I/O performance increase with more expensive spinning drives is not that
dramatic (only on the order of 2x). Using SSDs or increasing RAM may
be more effective in increasing I/O throughput.

Avoid Remote File Systems
`````````````````````````

- Remote file storage can create performance problems in MongoDB. See
  :ref:`production-nfs` for more information about storage and MongoDB.

.. _production-numa:

MongoDB and NUMA Hardware
~~~~~~~~~~~~~~~~~~~~~~~~~

.. important::
   The discussion of NUMA in this section only applies to Linux systems
   with *multiple* physical processors, and therefore does *not affect*
   deployments where :program:`mongod` instances run on other UNIX-like
   systems, on Windows, or on a Linux system with only one physical
   processor.

Running MongoDB on a system with Non-Uniform Access Memory (NUMA) can
cause a number of operational problems, including slow performance for
periods of time or high system process usage.

When running MongoDB on NUMA hardware, you should disable NUMA for
MongoDB and instead set an interleave memory policy.

.. note::

   MongoDB version 2.0 and greater checks these settings on start up
   when deployed on a Linux-based system, and prints a warning if the
   system is NUMA-based.

To disable NUMA for MongoDB and set an interleave memory policy, use
the ``numactl`` command and start :program:`mongod` in the following
manner:

.. code-block:: sh

   numactl --interleave=all /usr/bin/local/mongod

Then, disable *zone reclaim* in the ``proc`` settings using the following
command:

.. code-block:: sh

   echo 0 > /proc/sys/vm/zone_reclaim_mode

To fully disable NUMA, you must perform both operations. For more
information, see the `Documentation for /proc/sys/vm/*
<http://www.kernel.org/doc/Documentation/sysctl/vm.txt>`_.

See `The MySQL "swap insanity" problem and the effects of NUMA
<http://jcole.us/blog/archives/2010/09/28/mysql-swap-insanity-and-the
-nu ma-architecture/>`_ post, which describes the effects of NUMA on
databases. This blog post addresses the impact of NUMA for MySQL,
but the issues for MongoDB are similar. The post introduces NUMA and
its goals, and illustrates how these goals are not compatible with
production databases.

Disk and Storage Systems
~~~~~~~~~~~~~~~~~~~~~~~~

Swap
````

Assign swap space for your systems. Allocating swap space can avoid issues
with memory contention and can prevent the OOM Killer on Linux systems
from killing :program:`mongod`.

The method :program:`mongod` uses to map memory files to memory ensures
that the operating system will never store MongoDB data in swap space.

RAID
````

Most MongoDB deployments should use disks backed by RAID-10.

RAID-5 and RAID-6 do not typically provide sufficient performance to
support a MongoDB deployment.

Avoid RAID-0 with MongoDB deployments. While RAID-0 provides good write
performance, it also provides limited availability and can lead to
reduced performance on read operations, particularly when using
Amazon's EBS volumes.

.. _production-nfs:

Remote Filesystems
``````````````````

The Network File System protocol (NFS) is not recommended for use with
MongoDB as some versions perform poorly.

Performance problems arise when both
the data files and the journal files are hosted on NFS. You may
experience better performance if you place the journal on local or
``iscsi`` volumes. If you must use NFS, add the following NFS options
to your ``/etc/fstab`` file: ``bg``, ``nolock``, and ``noatime``.

Separate Components onto Different Storage Devices
``````````````````````````````````````````````````

For improved performance, consider separating your database's data,
journal, and logs onto different storage devices, based on your application's
access and write pattern.

.. note::
   This will affect your ability to create snapshot-style backups of
   your data, since the files will be on different devices and volumes.

Architecture
------------

Write Concern
~~~~~~~~~~~~~

.. include:: /includes/introduction-write-concern.rst

See the :doc:`Write Concern </core/write-concern>` document for more
information about choosing an appropriate write concern level for your
deployment.

Replica Sets
~~~~~~~~~~~~

See the :doc:`Replica Set Architectures </core/replica-set-architectures>`
document for an overview of architectural considerations for replica
set deployments.

Sharded Clusters
~~~~~~~~~~~~~~~~

See the
:doc:`Sharded Cluster Production Architecture </core/sharded-cluster-architectures-production>`
document for an overview of recommended sharded cluster architectures for production
deployments.

Platforms
---------

MongoDB on Linux
~~~~~~~~~~~~~~~~

.. important:: The following discussion only applies to
   Linux, and therefore does not affect deployments where :program:`mongod`
   instances run other UNIX-like systems or on Windows.

Kernel and File Systems
```````````````````````

When running MongoDB in production on Linux, it is recommended that you use
Linux kernel version 2.6.36 or later.

MongoDB preallocates its database files before using them and
often creates large files. As such, you should
use the Ext4 and XFS file systems:

- In general, if you use the Ext4 file system, use at least version ``2.6.23`` of the
  Linux Kernel.

- In general, if you use the XFS file system, use at least version ``2.6.25`` of the
  Linux Kernel.

- Some Linux distributions require different versions of the kernel to
  support using ext4 and/or xfs:

  .. include:: /includes/table/linux-kernel-version-production.rst

.. important:: MongoDB requires a filesystem that supports ``fsync()``
   *on directories*. For example, HGFS and Virtual Box's shared
   folders do *not* support this operation.

Recommended Configuration
`````````````````````````

- Turn off ``atime`` for the storage volume containing the :term:`database
  files <dbpath>`.

- Set the file descriptor limit, ``-n``, and the user process limit
  (ulimit), ``-u``, above 20,000, according to the suggestions in the
  :doc:`ulimit </reference/ulimit>` document. A low ulimit will affect
  MongoDB when under heavy use and can produce errors and lead to
  failed connections to MongoDB processes and loss of service.

- Disable ``transparent huge pages`` as MongoDB performs
  better with normal (4096 bytes) virtual memory pages.

- Disable NUMA in your BIOS. If that is not possible see 
  :ref:`MongoDB on NUMA Hardware <production-numa>`.

- Ensure that readahead settings for the block devices that store the
  database files are appropriate. For random access use patterns, set
  low readahead values. A readahead of 32 (16kb) often works well.

  For a standard block device, you can run ``sudo blockdev --report``
  to get the readahead settings and ``sudo blockdev --setra <value>
  <device>`` to change the readahead settings. Refer to your specific
  operating system manual for more information.

- Use the Network Time Protocol (NTP) to synchronize time among
  your hosts. This is especially important in sharded clusters.

.. _readahead:

.. TODO update with updated readahead documentation when DOCS-164 closes


.. _production-virtualization:

MongoDB on Virtual Environments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The section describes considerations when running MongoDB in some of the
more common virtual environments.

EC2
```

MongoDB is compatible with EC2 and requires no configuration changes
specific to the environment.

You may alternately choose to obtain a set of
Amazon Machine Images (AMI) that bundle together MongoDB and Amazon's
Provisioned IOPS storage volumes. Provisioned IOPS can greatly increase
MongoDB's performance and ease of use. For more information, see
`this blog post
<http://www.mongodb.com/blog/post/provisioned-iops-aws-marketplace-significantly-boosts-mongodb-performance-ease-use>`_.

VMWare
``````

MongoDB is compatible with VMWare. As some users have
run into issues with VMWare's memory overcommit feature,
disabling the feature is recommended.

It is possible to clone a virtual machine running MongoDB.
You might use this function to
spin up a new virtual host to add as a member of a replica
set. If you clone a VM with journaling enabled, the clone snapshot will
be valid. If not using journaling, first stop :program:`mongod`,
then clone the VM, and finally, restart :program:`mongod`.

OpenVZ
``````

Some users have had issues when running MongoDB on some older version
of OpenVZ due to its handling of virtual memory, as with VMWare.

This issue seems to have been resolved in the more recent versions of
OpenVZ.


Performance Monitoring
----------------------

iostat
~~~~~~

On Linux, use the ``iostat`` command to check if disk I/O is a bottleneck
for your database. Specify a number of seconds when running iostat to
avoid displaying stats covering the time since server boot.

For example, the following command will display extended statistics and
the time for each displayed report, with traffic in MB/s, at one second
intervals:

.. code-block:: bash

   iostat -xmt 1

Key fields from ``iostat``:

- ``%util``: this is the most useful field for a quick check, it
  indicates what percent of the time the device/drive is in use.

- ``avgrq-sz``: average request size. Smaller number for this value
  reflect more random IO operations.

bwm-ng
~~~~~~

`bwm-ng <http://www.gropp.org/?id=projects&sub=bwm-ng>`_ is a
command-line tool for monitoring network use. If you suspect a
network-based bottleneck, you may use ``bwm-ng`` to begin your
diagnostic process.

Backups
-------

To make backups of your MongoDB database, please refer to
:doc:`MongoDB Backup Methods Overview </core/backups>`.
