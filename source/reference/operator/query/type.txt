=====
$type
=====

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. query:: $type

   :query:`$type` selects documents where the *value* of the
   ``field`` is an instance of the specified :term:`BSON` type(s).
   Querying by data type is useful when dealing with highly
   unstructured data where data types are not predictable.

   A :query:`$type` expression for a single :term:`BSON` type has
   the following syntax:

   .. versionchanged:: 3.2

   .. code-block:: javascript

     { field: { $type: <BSON type> } }

   You can specify either the number or alias for the :ref:`BSON
   type<document-type-available-types>`

   The :query:`$type` expression can also accept an array of :term:`BSON`
   types and has the following syntax:

   .. code-block:: javascript

     { field: { $type: [ <BSON type1> , <BSON type2>, ... ] } }

   The above query will match documents where the ``field`` value is
   any of the listed types. The types specified in the array can be
   either numeric or string aliases.

   See :ref:`document-querying-by-multiple-data-types` for an example.

   :ref:`document-type-available-types` describes the BSON types and
   their corresponding numeric and string aliases.

.. seealso::

   

   - :expression:`$isNumber` - checks if the argument is a number. *New in MongoDB 4.4*
   - :expression:`$type (Aggregation) <$type>` - returns the BSON type of the argument.

Behavior
--------

:query:`$type` returns documents where the BSON type of the ``field``
matches the BSON type passed to :query:`$type`. 

Arrays
~~~~~~

For documents where ``field`` is an array, :query:`$type` returns
documents in which at least one array element matches a type passed to
:query:`$type`.

Querying for the Array BSON Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With MongoDB 3.6 and later, querying for ``$type: "array"`` returns
documents where the field itself is an array. Prior to MongoDB 3.6,
``$type: "array"`` returned documents where the field is an array
containing at least one element of type ``array``. For example, given
the following documents:

.. code-block:: javascript

   { "data" : [ "values", [ "values" ] ] }
   { "data" : [ "values" ] }

With MongoDB 3.6 and later, the query 
``find( {"data" : { $type : "array" } } )`` returns both documents.
Prior to MongoDB 3.6, the query returns only the first document.

.. _document-type-available-types:

Available Types
~~~~~~~~~~~~~~~

Starting in MongoDB 3.2, :query:`$type` operator accepts string aliases
for the BSON types in addition to the numbers corresponding to the BSON
types. Previous versions only accepted the numbers corresponding to the
BSON type. [#type0]_

.. include:: /includes/fact-bson-types.rst

:query:`$type` supports the ``number`` alias, which will match against
the following :term:`BSON` types:

- :bsontype:`double <Double>`

- :bsontype:`32-bit integer <Int32>`

- :bsontype:`64-bit integer <Int64>`

- :bsontype:`decimal <Decimal128>`

For examples, see :ref:`query-type-examples`.

.. [#type0]

   .. include:: /includes/extracts/4.2-changes-type-0.rst

.. seealso::

   :expression:`$isNumber` *New in MongoDB 4.4*


MinKey and MaxKey
~~~~~~~~~~~~~~~~~~~~~~~~~~

:doc:`MinKey</reference/bson-types>` and :doc:`MaxKey</reference/bson-types>`
are used in comparison operations and exist primarily for internal use.
For all possible :term:`BSON` element values, ``MinKey`` will always be the
smallest value while ``MaxKey`` will always be the greatest value.

Querying for  ``minKey`` or ``maxKey`` with :query:`$type`
will only return fields that match
the special ``MinKey`` or ``MaxKey`` values.

Suppose that the ``data`` collection has two documents
with ``MinKey`` and ``MaxKey``:

.. code-block:: javascript

   { "_id" : 1, x : { "$minKey" : 1 } }
   { "_id" : 2, y : { "$maxKey" : 1 } }

The following query will return the document with ``_id: 1``:

.. code-block:: javascript

   db.data.find( { x: { $type: "minKey" } } )

The following query will return the document with ``_id: 2``:

.. code-block:: javascript

      db.data.find( { y: { $type: "maxKey" } } )

.. _query-type-examples:

Examples
--------

.. _document-querying-by-data-type:

Querying by Data Type
~~~~~~~~~~~~~~~~~~~~~

The ``addressBook`` contains addresses and zipcodes, where
``zipCode`` has ``string``, ``int``, ``double``, and ``long``
values:

.. code-block:: javascript

   db.addressBook.insertMany(
      [
         { "_id" : 1, address : "2030 Martian Way", zipCode : "90698345" },
         { "_id" : 2, address: "156 Lunar Place", zipCode : 43339374 },
         { "_id" : 3, address : "2324 Pluto Place", zipCode: NumberLong(3921412) },
         { "_id" : 4, address : "55 Saturn Ring" , zipCode : NumberInt(88602117) },
         { "_id" : 5, address : "104 Venus Drive", zipCode : ["834847278", "1893289032"]}
      ]
   )

The following queries return all documents where ``zipCode`` is the
:term:`BSON` type ``string`` *or* is an array containing an element of
the specified type:


.. code-block:: javascript

   db.addressBook.find( { "zipCode" : { $type : 2 } } );
   db.addressBook.find( { "zipCode" : { $type : "string" } } );

These queries return:

.. code-block:: javascript

   { "_id" : 1, "address" : "2030 Martian Way", "zipCode" : "90698345" }
   { "_id" : 5, "address" : "104 Venus Drive", "zipCode" : [ "834847278", "1893289032" ] }

The following queries return all documents where ``zipCode`` is the
:term:`BSON` type ``double`` *or* is an array containing an element of
the specified type:

.. code-block:: javascript

   db.addressBook.find( { "zipCode" : { $type : 1 } } )
   db.addressBook.find( { "zipCode" : { $type : "double" } } )

These queries return:

.. code-block:: javascript

   { "_id" : 2, "address" : "156 Lunar Place", "zipCode" : 43339374 }

The following query uses the ``number`` alias to return documents where
``zipCode`` is the :term:`BSON` type ``double``, ``int``, or ``long``
*or* is an array containing an element of the specified types:

.. code-block:: javascript

   db.addressBook.find( { "zipCode" : { $type : "number" } } )

These queries return:

.. code-block:: javascript

   { "_id" : 2, "address" : "156 Lunar Place", "zipCode" : 43339374 }
   { "_id" : 3, "address" : "2324 Pluto Place", "zipCode" : NumberLong(3921412) }
   { "_id" : 4, "address" : "55 Saturn Ring", "zipCode" : 88602117 }

.. _document-querying-by-multiple-data-types:

Querying by Multiple Data Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``grades`` collection contains names and averages, where
``classAverage`` has ``string``, ``int``, and ``double`` values:

.. code-block:: javascript

   db.grades.insertMany(
      [
         { "_id" : 1, name : "Alice King" , classAverage : 87.333333333333333 },
         { "_id" : 2, name : "Bob Jenkins", classAverage : "83.52" },
         { "_id" : 3, name : "Cathy Hart", classAverage: "94.06" },
         { "_id" : 4, name : "Drew Williams" , classAverage : NumberInt("93") }
      ]
   )

The following queries return all documents where ``classAverage`` is the
:term:`BSON` type ``string`` or ``double`` *or* is an array containing
an element of the  specified types. The first query uses numeric aliases
while the second query uses string aliases.

.. code-block:: javascript

   db.grades.find( { "classAverage" : { $type : [ 2 , 1 ] } } );
   db.grades.find( { "classAverage" : { $type : [ "string" , "double" ] } } );

These queries return the following documents:

.. code-block:: javascript

   { "_id" : 1, "name" : "Alice King", "classAverage" : 87.33333333333333 }
   { "_id" : 2, "name" : "Bob Jenkins", "classAverage" : "83.52" }
   { "_id" : 3, "name" : "Cathy Hart", "classAverage" : "94.06" } 

.. _document-querying-by-MinKey-And-MaxKey:

Querying by MinKey and MaxKey
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``restaurants`` collection uses ``minKey`` for any grade that is a
failing grade:

.. code-block:: javascript

   {
      "_id": 1,
      "address": {
         "building": "230",
         "coord": [ -73.996089, 40.675018 ],
         "street": "Huntington St",
         "zipcode": "11231"
      },
      "borough": "Brooklyn",
      "cuisine": "Bakery",
      "grades": [
         { "date": new Date(1393804800000), "grade": "C", "score": 15 },
         { "date": new Date(1378857600000), "grade": "C", "score": 16 },
         { "date": new Date(1358985600000), "grade": MinKey(), "score": 30 },
         { "date": new Date(1322006400000), "grade": "C", "score": 15 }
      ],
      "name": "Dirty Dan's Donuts",
      "restaurant_id": "30075445"
   }

And ``maxKey`` for any grade that is the highest passing grade:

.. code-block:: javascript

   {
      "_id": 2,
      "address": {
         "building": "1166",
         "coord": [ -73.955184, 40.738589 ],
         "street": "Manhattan Ave",
         "zipcode": "11222"
      },
      "borough": "Brooklyn",
      "cuisine": "Bakery",
      "grades": [
         { "date": new Date(1393804800000), "grade": MaxKey(), "score": 2 },
         { "date": new Date(1378857600000), "grade": "B", "score": 6 },
         { "date": new Date(1358985600000), "grade": MaxKey(), "score": 3 },
         { "date": new Date(1322006400000), "grade": "B", "score": 5 }
      ],
      "name": "Dainty Daisey's Donuts",
      "restaurant_id": "30075449"
   }

The following query returns any restaurant whose ``grades.grade`` field
contains ``minKey`` *or* is an array containing an element of
the specified type:

.. code-block:: javascript

   db.restaurants.find(
      { "grades.grade" : { $type : "minKey" } }
   )

This returns

.. code-block:: javascript

   {
      "_id" : 1,
      "address" : {
         "building" : "230",
         "coord" : [ -73.996089, 40.675018 ],
         "street" : "Huntington St",
         "zipcode" : "11231"
      },
      "borough" : "Brooklyn",
      "cuisine" : "Bakery",
      "grades" : [
         { "date" : ISODate("2014-03-03T00:00:00Z"), "grade" : "C", "score" : 15 },
         { "date" : ISODate("2013-09-11T00:00:00Z"), "grade" : "C", "score" : 16 },
         { "date" : ISODate("2013-01-24T00:00:00Z"), "grade" : { "$minKey" : 1 }, "score" : 30 },
         { "date" : ISODate("2011-11-23T00:00:00Z"), "grade" : "C", "score" : 15 }
      ],
      "name" : "Dirty Dan's Donuts",
      "restaurant_id" : "30075445"
   }

The following query returns any restaurant whose ``grades.grade`` field
contains ``maxKey`` *or* is an array containing an element of
the specified type:


.. code-block:: javascript

   db.restaurants.find(
      { "grades.grade" : { $type : "maxKey" } }
   )

This returns

.. code-block:: javascript

   {
      "_id" : 2,
      "address" : {
         "building" : "1166",
         "coord" : [ -73.955184, 40.738589 ],
         "street" : "Manhattan Ave",
         "zipcode" : "11222"
      },
      "borough" : "Brooklyn",
      "cuisine" : "Bakery",
      "grades" : [
         { "date" : ISODate("2014-03-03T00:00:00Z"), "grade" : { "$maxKey" : 1 }, "score" : 2 },
         { "date" : ISODate("2013-09-11T00:00:00Z"), "grade" : "B", "score" : 6 },
         { "date" : ISODate("2013-01-24T00:00:00Z"), "grade" : { "$maxKey" : 1 }, "score" : 3 },
         { "date" : ISODate("2011-11-23T00:00:00Z"), "grade" : "B", "score" : 5 }
      ],
      "name" : "Dainty Daisey's Donuts",
      "restaurant_id" : "30075449"
   }
   

.. _document-querying-by-array-type:

Querying by Array Type
----------------------

A collection named ``SensorReading`` contains the following documents:

.. code-block:: javascript

   {
      "_id": 1,
      "readings": [
         25,
         23,
         [ "Warn: High Temp!", 55 ],
         [ "ERROR: SYSTEM SHUTDOWN!", 66 ]
      ]
   },
   {
      "_id": 2,
      "readings": [
         25,
         25,
         24,
         23
      ]
   },
   {
      "_id": 3,
      "readings": [
         22,
         24,
         []
      ]
   },
   {
      "_id": 4,
      "readings": []
   },
   {
      "_id": 5,
      "readings": 24
   }

The following query returns any document in which the ``readings``
field is an array, empty or non-empty.

.. code-block:: javascript

   db.SensorReading.find( { "readings" : { $type: "array" } } )

The above query returns the following documents:

.. code-block:: javascript

   {
      "_id": 1,
      "readings": [
         25,
         23,
         [ "Warn: High Temp!", 55 ],
         [ "ERROR: SYSTEM SHUTDOWN!", 66 ]
      ]
   },
   {
      "_id": 2,
      "readings": [
         25,
         25,
         24,
         23
      ]
   },
   {
      "_id": 3,
      "readings": [
         22,
         24,
         []
      ]
   },
   {
      "_id": 4,
      "readings": []
   }

In the documents with ``_id : 1``, ``_id : 2``, ``_id : 3``, and
``_id : 4``, the ``readings`` field is an array.


Additional Information
----------------------

- :doc:`/tutorial/query-for-null-fields`

- :method:`db.collection.find()`

- :doc:`BSON Types </reference/bson-types>`.
