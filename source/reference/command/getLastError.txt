============
getLastError
============

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: getLastError

   Returns the error status of the preceding operation on the *current
   connection*. Clients typically use :dbcommand:`~db.collection.getLastError()` in
   combination with write operations to ensure that the write succeeds.

   .. include:: /reference/command/getLastError-field.rst

   The following is the prototype form:

   .. code-block:: javascript

      { getLastError: 1 }

   .. seealso:: :doc:`Write Concern </core/write-concern>`
      and :ref:`replica-set-write-concern`.

Output
------

Each :dbcommand:`~db.collection.getLastError()` command returns a document containing a
subset of the fields listed below.

.. data:: getLastError.ok

   ``ok`` is ``true`` when the :dbcommand:`~db.collection.getLastError()` command completes
   successfully.

   .. note:: A value of ``true`` does *not* indicate that the preceding
      operation did not produce an error.

.. data:: getLastError.err

   ``err`` is non-null when an error occurs. When non-null, ``err``
   contains a textual description of the error.

.. data:: getLastError.code

   ``code`` has the the preceding operation's error code.

.. data:: getLastError.connectionId

   The identifier of the connection.

.. data:: getLastError.lastOp

   When replication is enabled and the preceding operation was a write
   or update, then ``lastOp`` is the :term:`optime` timestamp of that
   change.

.. data:: getLastError.n

   ``n`` is the number of documents updated or removed, if the preceding
   operation was an update or remove operation.

.. data:: getLastError.wnote

   If set, ``wnote`` indicates that the preceding operation's error
   relates to using the ``w`` input variable.

.. data:: getLastError.wtimeout

   ``wtimeout`` is ``true`` when the preceding operation times out.

.. data:: getLastError.waited

   If the preceding operation timed out, then ``waited`` is set to the
   number of milliseconds it waited.

.. data:: getLastError.wtime

   ``wtime`` is the number of milliseconds spent waiting for the
   preceding operation to complete. If it timed out, ``wtime`` and
   ``waited`` will be equal.

.. _gle-examples:

Examples
--------

Confirm Replication to Two Replica Set Members
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example ensures the operation has replicated to two
members (the primary and one other member):

.. code-block:: javascript

   db.runCommand( { getLastError: 1, w: 2 } )

Confirm Replication to a Majority of a Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example ensures the write operation has replicated to a
majority of the configured members of the set.

.. code-block:: javascript

   db.runCommand( { getLastError: 1, w: "majority" } )

Set a Timeout for a ``getLastError`` Response
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Unless you specify a timeout, a :dbcommand:`~db.collection.getLastError()` command may
block forever if MongoDB cannot satisfy the requested write
concern. To specify a timeout of 5000 milliseconds, use an invocation
that resembles the following:

.. code-block:: javascript

   db.runCommand( { getLastError: 1, w: 2, wtimeout:5000 } )
