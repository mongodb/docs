.. _node-community-authentication-mechanisms:

=========================
Authentication Mechanisms
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

In this guide, you can find sample code for connection to MongoDB with each
authentication mechanism available in the MongoDB Community Edition:
``DEFAULT``, ``SCRAM-SHA-256``, ``SCRAM-SHA-1``, ``MONGODB-CR``,
``MONGODB-AWS``, and ``X.509``.

``DEFAULT``
-----------

The ``DEFAULT`` authentication mechanism is a fallback setting that instructs
the driver to negotiate the first authentication mechanism supported by the
server in the following order of preference:

#. ``SCRAM-SHA-256``
#. ``SCRAM-SHA-1``
#. ``MONGODB-CR``

If the ``DEFAULT`` option is specified, the driver first attempts to
authenticate using ``SCRAM-SHA-256``. If the version of the MongoDB instance
does not support that mechanism, the driver attempts to authenticate using
``SCRAM-SHA-1``. If the instance does not support that mechanism either,
the driver attempts to authenticate using ``MONGODB-CR``.

You can specify this authentication mechanism by setting the ``authMechanism``
parameter to ``DEFAULT`` in the
:manual:`connection string </reference/connection-string/>`, or by omitting
the parameter since it is the default value. Also include your username and
password as shown in the code below.

.. important::
   Always **URI encode** the username and password using the
   ``encodeURIComponent`` method to ensure they are correctly parsed.

.. literalinclude:: /code-snippets/authentication/default.js
   :language: javascript

For more information on the challenge-response (CR) and salted
challenge-response authentication mechanisms (SCRAM) that MongoDB supports,
see the :manual:`SCRAM </core/security-scram/>` section of the manual.

``SCRAM-SHA-256``
-----------------

.. note::

   ``SCRAM-SHA-256`` is the default authentication method for MongoDB starting
   in version 4.0

``SCRAM-SHA-256`` is a salted challenge-response authentication mechanism
(SCRAM) that uses your username and password, encrypted with the ``SHA-256``
algorithm to authenticate your user.

You can specify this authentication mechanism by setting the ``authMechanism``
to the value ``SCRAM-SHA-256`` in the
:manual:`connection string </reference/connection-string/>` as shown in the
following sample code.

.. important::
   Always **URI encode** the username and password using the
   ``encodeURIComponent`` method to ensure they are correctly parsed.

.. literalinclude:: /code-snippets/authentication/sha256.js
   :language: javascript

``SCRAM-SHA-1``
---------------

.. note::
   ``SCRAM-SHA-1`` is the default authentication method for MongoDB versions
   3.0, 3.2, 3.4, and 3.6.

``SCRAM-SHA-1`` is a salted challenge-response mechanism (SCRAM) that uses your
username and password, encrypted with the ``SHA-1`` algorithm to authenticate
your user.

You can specify this authentication mechanism by setting the ``authMechanism``
parameter to the value ``SCRAM-SHA-1`` in the
:manual:`connection string </reference/connection-string/>` as shown
in the following sample code.

.. important::
   Always **URI encode** the username and password using the
   ``encodeURIComponent`` method to ensure they are correctly parsed.

.. literalinclude:: /code-snippets/authentication/sha1.js
   :language: javascript

``MONGODB-CR``
--------------

.. warning::
   MONGODB-CR was deprecated starting in MongoDB 3.6, and is no longer supported as of MongoDB 4.0

``MONGODB-CR`` is a challenge-response authentication mechanism that uses your
username and password to authenticate your user.

You can specify this option by setting the ``authMechanism`` parameter to value
``MONGODB-CR`` in the
:manual:`connection string </reference/connection-string/>` as shown
in the following sample code.

.. important::
   Always **URI encode** the username and password using the
   ``encodeURIComponent`` method to ensure they are correctly parsed.

.. literalinclude:: /code-snippets/authentication/cr.js
   :language: javascript

.. important::
   If you have upgraded the authentication schema from MONGODB-CR to SCRAM, 
   any ``MONGODB-CR`` user authentication requests fail.

.. _mongodb-aws:

``MONGODB-AWS``
---------------

.. note::
   The MONGODB-AWS authentication mechanism is available only in MongoDB
   versions 4.4 and later.

The ``MONGODB-AWS`` authentication mechanism uses your Amazon Web Services
Identity and Access Management (AWS IAM) credentials to authenticate your
user. If you do not already have the `AWS signature library
<https://www.npmjs.com/package/aws4>`__, use the following
``npm`` command to install it:

.. code-block:: bash

   npm install aws4

To connect to a MongoDB instance with ``MONGODB-AWS`` authentication
enabled, specify the ``MONGODB-AWS`` authentication mechanism.

The driver checks for your credentials in the following sources in order:

1. Connection string
#. Environment variables
#. Web identity token file
#. AWS ECS endpoint specified in ``AWS_CONTAINER_CREDENTIALS_RELATIVE_URI``
#. AWS EC2 endpoint. For more information, see `IAM Roles for Tasks
   <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html>`_.

.. important::

   The driver only reads the credentials from the first method that it detects
   in the order as given by the preceding list. For example, if you specify 
   your AWS credentials in the connection string, the driver ignores any 
   credentials that you specified in environment variables.

.. tabs::

   .. tab:: Connection String
      :tabid: connection string

      To connect to your MongoDB instance with a connection string, pass
      your ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY``
      credentials to the driver when you attempt to connect. If your AWS
      login requires a session token, include your ``AWS_SESSION_TOKEN`` as well.

      The following code shows an example of specifying the ``MONGODB-AWS``
      authentication mechanism and credentials with a connection string:

      .. important::

         Always **URI encode** the username and certificate file path using the
         ``encodeURIComponent`` method to ensure they are correctly parsed.

      .. literalinclude:: /code-snippets/authentication/aws.js
         :language: javascript

   .. tab:: Environment Variables
      :tabid: environment variables

      To authenticate to your MongoDB instance using AWS credentials stored in
      environment variables, set the following variables by using
      a shell:

      .. code-block:: bash

         export AWS_ACCESS_KEY_ID=<awsKeyId>
         export AWS_SECRET_ACCESS_KEY=<awsSecretKey>
         export AWS_SESSION_TOKEN=<awsSessionToken>

      .. note::

         Omit the line containing ``AWS_SESSION_TOKEN`` if you don't need an AWS
         session token for that role.
      
      After you've set the preceding environment variables, specify the ``MONGODB-AWS``
      authentication mechanism in your connection string as shown in the following example:

      .. literalinclude:: /code-snippets/authentication/aws-env-variable.js
         :language: javascript
      
   .. tab:: Web Identity Token File
      :tabid: web-identity-token-file

      You can use the OpenID Connect (OIDC) token obtained from a web identity
      provider to authenticate to Amazon Elastic Kubernetes Service (EKS) or
      other services.

      To authenticate with your OIDC token you must first install
      `@aws-sdk/credential-providers
      <https://www.npmjs.com/package/@aws-sdk/credential-providers>`__. You can
      install this dependency using the following ``npm`` command:

      .. code-block:: bash

         npm install @aws-sdk/credential-providers

      Next, create a file that contains your OIDC token. Then 
      set the absolute path to this file in an environment variable by using
      a shell as shown in the following example:

      .. code-block:: bash

         export AWS_WEB_IDENTITY_TOKEN_FILE=<absolute path to file containing your OIDC token>

      AWS recommends using regional AWS STS endpoints instead of global 
      endpoints to reduce latency, build-in redundancy, and increase session token validity.
      To set the AWS region, set `AWS_REGION <https://docs.aws.amazon.com/sdkref/latest/guide/feature-region.html>`__ 
      and `AWS_STS_REGIONAL_ENDPOINTS <https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html>`__
      as environment variables, as shown in the following example: 

      .. code-block:: bash
         
         export AWS_STS_REGIONAL_ENDPOINTS=regional // Enables regional endpoints
         export AWS_REGION=us-east-1 // Sets your AWS region
         
      If both these environment variables aren't set, the default region is 
      ``us-east-1``. For a list of available AWS regions, see the
      `Regional Endpoints <https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints>`__ 
      section of the AWS Service Endpoints reference in the AWS documentation. 

      .. warning:: Consult your SDK's Documentation for Setting an AWS Region

         You cannot set your AWS region with environment variables for all SDKs,
         as in the above example. See your SDK's specific documentation for 
         configuring an AWS region. 

      After you've set the preceding environment variables, specify the ``MONGODB-AWS``
      authentication mechanism in your connection string as shown in the following example:

      .. literalinclude:: /code-snippets/authentication/aws-env-variable.js
         :language: javascript

.. important:: Retrieval of AWS Credentials
   
   Starting in version 4.11, when you install the optional
   ``aws-sdk/credential-providers`` dependency, the driver uses the AWS SDK
   to retrieve credentials from the environment. As a result, if you
   have a shared AWS credentials file or config file, the driver will
   use those credentials by default.
   
   You can override this behavior by performing one of the following
   actions:
   
   - Set ``AWS_SHARED_CREDENTIALS_FILE`` variable in your shell to point
     to your credentials file.
   - Set the equivalent environment variable in your application to point
     to your credentials file.
   - Create an AWS profile for your MongoDB credentials and set the
     ``AWS_PROFILE`` environment variable to that profile name.

``X.509``
---------

.. note::
   The X.509 authentication mechanism is only available in MongoDB versions
   2.6 and later.

The ``X.509`` authentication mechanism uses
:wikipedia:`TLS <Transport_Layer_Security>` with X.509 certificates to
authenticate by retrieving the distinguished name (DN) from the
client certificate.

You can specify this authentication mechanism by setting the following
parameters of your :manual:`connection string </reference/connection-string/>`:

- Set the ``authMechanism`` parameter to ``MONGODB-X509``
- Set the ``tls`` parameter to ``true``

Pass the location of your client certificate file as the value of
``tlsCertificateKeyFile`` as a parameter of the connection URI.

.. important::
   Always **URI encode** the certificate file path using the
   ``encodeURIComponent`` method to ensure it is parsed correctly.

.. literalinclude:: /code-snippets/authentication/x509.js
   :language: javascript

.. tip::
   
   To learn more about enabling TLS on a connection, see
   :ref:`node-connect-tls`.

TLS Options
~~~~~~~~~~~

The following table describes the TLS options that you can set in a
connection URI.

.. list-table::
   :widths: 35 12 10 43
   :header-rows: 1

   * - Parameter Name
     - Type
     - Default Value
     - Description

   * - ``tls``
     - boolean
     - ``false``
     - Specifies whether to enable TLS on the connection.

   * - ``tlsInsecure``
     - boolean
     - ``false``
     -  Specifies whether to allow invalid certificates and mismatched
        hostnames. When set to ``true``, this is equivalent to setting
        ``tlsAllowInvalidCertificates`` and ``tlsAllowInvalidHostnames`` to
        ``true``.

   * - ``tlsCAFile``
     - string
     -
     - Path to file that contains a single or bundle of trusted certificate
       authorities used in a TLS connection.

   * - ``tlsCertificateKeyFile``
     - string
     -
     - Path to the client certificate file or the client private key file. If
       both are required, the two must be concatenated into a single file.

   * - ``tlsCertificateKeyFilePassword``
     - buffer or string
     -
     - String or buffer that contains the password to decrypt the client
       private key.

   * - ``tlsAllowInvalidCertificates``
     - boolean
     - ``false``
     - Specifies whether the driver permits an invalid certificate to be used
       to connect.

   * - ``tlsAllowInvalidHostnames``
     - boolean
     - ``false``
     - Specifies whether the driver raises an error when there is a mismatch between the
       server hostname and TLS certificate hostname.
