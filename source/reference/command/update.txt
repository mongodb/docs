======
update
======

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: update

   .. versionadded:: 2.6

   The :dbcommand:`update` command modifies documents in a collection.
   A single :dbcommand:`update` command can contain multiple update
   statements. The update methods provided by the MongoDB drivers use
   this command internally.

   The :dbcommand:`update` command has the following syntax:

   .. code-block:: javascript

      {
         update: <collection>,
         updates:
            [
               { q: <query>, u: <update>, upsert: <boolean>, multi: <boolean> },
               { q: <query>, u: <update>, upsert: <boolean>, multi: <boolean> },
               { q: <query>, u: <update>, upsert: <boolean>, multi: <boolean> },
               ...
            ],
         ordered: <boolean>,
         writeConcern: { <write concern> }
      }

   The command takes the following fields:

   .. include:: update-field.rst

   Each element of the ``updates`` array contains the following sub-fields:

   .. include:: update-field-updates.rst

   :return:

      A document that contains the status of the operation.
      See :ref:`update-command-output` for details.

.. _update-command-behaviors:

Behaviors
---------

The ``<update>`` document can contain either all :ref:`update operator
<update-operators>` expressions or all ``field:value`` expressions.

Update Operator Expressions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the ``<update>`` document contains all :ref:`update operator
<update-operators>` expressions, as in:

.. code-block:: javascript

   {
     $set: { status: "D" },
     $inc: { quantity: 2 }
   }

Then, the :dbcommand:`update` command updates only the corresponding
fields in the document.

``Field: Value`` Expressions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the ``<update>`` document contains *only* ``field:value``
expressions, as in:

.. code-block:: javascript

   {
     status: "D",
     quantity: 4
   }

Then the :dbcommand:`update` command *replaces* the matching document
with the update document. The :dbcommand:`update` command can only
replace a *single* matching document; i.e. the ``multi`` field cannot
be ``true``. The :dbcommand:`update` command *does not* replace the
``_id`` value.

Limits
~~~~~~

For each update element in the ``updates`` array, the sum of the query
and the update sizes (i.e. ``q`` and ``u`` ) must be less than or equal
to the :limit:`maximum BSON document size <BSON Document Size>`.

The total number of update statements in the ``updates`` array must be
less than or equal to the :limit:`maximum bulk size
<Bulk Operation Size>`.

Examples
--------

Update Specific Fields of One Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use :ref:`update operators <update-operators>` to update only the
specified fields of a document.

For example, given a ``users`` collection, the following command uses
the :update:`$set` and :update:`$inc` operators to modify the ``status``
and the ``points`` fields respectively of a document where the ``user``
equals ``"abc123"``:

.. code-block:: javascript

   db.runCommand(
      {
         update: "users",
         updates: [
            {
              q: { user: "abc123" }, u: { $set: { status: "A" }, $inc: { points: 1 } }
            }
         ],
         ordered: false,
         writeConcern: { w: "majority", wtimeout: 5000 }
      }
   )

Because ``<update>`` document does not specify the optional ``multi``
field, the update only modifies one document, even if more than one
document matches the ``q`` match condition.

The returned document shows that the command found and updated a single
document. See :ref:`update-command-output` for details.

.. code-block:: javascript

   { "ok" : 1, "nModified" : 1, "n" : 1 }

Update Specific Fields of Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use :ref:`update operators <update-operators>` to update only the
specified fields of a document, and include the ``multi`` field set to
``true`` in the update statement.

For example, given a ``users`` collection, the following command uses
the :update:`$set` and :update:`$inc` operators to modify the
``status`` and the ``points`` fields respectively of all documents in
the collection:

.. code-block:: javascript

   db.runCommand(
      {
         update: "users",
         updates: [
            { q: { }, u: { $set: { status: "A" }, $inc: { points: 1 } }, multi: true }
         ],
         ordered: false,
         writeConcern: { w: "majority", wtimeout: 5000 }
      }
   )

The update modifies all documents that match the query specified in the
``q`` field, namely the empty query which matches all documents in the
collection.

The returned document shows that the command found and updated multiple
documents. See :ref:`update-command-output` for details.

.. code-block:: javascript

   { "ok" : 1, "nModified" : 100, "n" : 100 }

Bulk Update
~~~~~~~~~~~

The following example performs multiple update operations on the
``users`` collection:

.. code-block:: javascript

   db.runCommand(
      {
         update: "users",
         updates: [
            { q: { status: "P" }, u: { $set: { status: "D" } }, multi: true },
            { q: { _id: 5 }, u: { _id: 5, name: "abc123", status: "A" }, upsert: true }
         ],
         ordered: false,
         writeConcern: { w: "majority", wtimeout: 5000 }
      }
   )

The returned document shows that the command modified ``10`` documents
and upserted a document with the ``_id`` value ``5``. See
:ref:`update-command-output` for details.

.. code-block:: javascript

   {
      "ok" : 1,
      "nModified" : 10,
      "n" : 11,
      "upserted" : [
         {
            "index" : 1,
            "_id" : 5
         }
      ]
   }

.. _update-command-output:

Output
------

The returned document contains a subset of the following fields:

.. data:: update.ok

   The status of the command.

.. data:: update.n

   The number of documents selected for update. If the update operation
   results in no change to the document, e.g. :update:`$set` expression
   updates the value to the current value, :data:`~update.n` can be
   greater than :data:`~update.nModified`.

.. data:: update.nModified

   The number of documents updated. If the update operation results in
   no change to the document, such as setting the value of the field to
   its current value, :data:`~update.nModified` can be less than
   :data:`~update.n`.

.. data:: update.upserted

   An array of documents that contains information for each upserted
   documents.

   Each document contains the following information:

   .. data:: update.upserted.index

      An integer that identifies the upsert statement in the
      ``updates`` array, which uses a zero-based index.

   .. data:: update.upserted._id

      The ``_id`` value of the upserted document.

.. data:: update.writeErrors

   An array of documents that contains information regarding any error
   encountered during the update operation. The
   :data:`~update.writeErrors` array contains an error document for
   each update statement that errors.

   Each error document contains the following fields:

   .. data:: update.writeErrors.index

      An integer that identifies the update statement in the
      ``updates`` array, which uses a zero-based index.

   .. data:: update.writeErrors.code

      An integer value identifying the error.

   .. data:: update.writeErrors.errmsg

      A description of the error.

.. data:: update.writeConcernError

   Document that describe error related to write concern and contains
   the field:

   .. data:: update.writeConcernError.code

      An integer value identifying the cause of the write concern error.

   .. data:: update.writeConcernError.errmsg

      A description of the cause of the write concern error.

The following is an example document returned for a successful
:dbcommand:`update` command that performed an upsert:

.. code-block:: javascript

   {
      "ok" : 1,
      "nModified" : 0,
      "n" : 1,
      "upserted" : [
         {
            "index" : 0,
            "_id" : ObjectId("52ccb2118908ccd753d65882")
         }
      ]
   }

The following is an example document returned for a bulk update
involving three update statements, where one update statement was
successful and two other update statements encountered errors:

.. code-block:: javascript

   {
      "ok" : 1,
      "nModified" : 1,
      "n" : 1,
      "writeErrors" : [
         {
            "index" : 1,
            "code" : 16837,
            "errmsg" : "The _id field cannot be changed from {_id: 1.0} to {_id: 5.0}."
         },
         {
            "index" : 2,
            "code" : 16837,
            "errmsg" : "The _id field cannot be changed from {_id: 2.0} to {_id: 6.0}."
         },
      ]
   }
