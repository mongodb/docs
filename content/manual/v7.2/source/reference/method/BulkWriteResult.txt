.. _server-bulkwriteresult-method:

=================
BulkWriteResult()
=================

.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: shell

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. method:: BulkWriteResult()

   A wrapper that contains the results of the :method:`Bulk.execute()`
   method.

Properties
----------

``BulkWriteResult`` has the following properties:

.. data:: BulkWriteResult.acknowledged

   Boolean indicating whether or not the bulk write was acknowledged.

.. data:: BulkWriteResult.deletedCount

   Count of deleted documents.

.. data:: BulkWriteResult.insertedCount

   Count of inserted documents.

.. data:: BulkWriteResult.insertedIds

   .. list-table::
      :header-rows: 1
      :widths: 10 45 45

      * - ``mongosh`` Version
        - Description
        - Example

      * - v1.x
        - Array of inserted documents by ``ObjectId``. 
        - ``[ ObjectId(...), ObjectId(...), ObjectId(...) ]``

      * - v2.x
        - Map from each inserted document index to its ``ObjectId``.
        - ``{ 0: ObjectId(...), 1: ObjectId(...), 2: ObjectId(...) }```

.. data:: BulkWriteResult.matchedCount

   Count of matched documents.

.. data:: BulkWriteResult.modifiedCount

   Count of modified documents.

.. data:: BulkWriteResult.upsertedCount

   Count of upserted documents.

.. data:: BulkWriteResult.upsertedIds

   .. list-table::
      :header-rows: 1
      :widths: 10 45 45

      * - ``mongosh`` Version
        - Description
        - Example

      * - v1.x
        - Array of upserted documents by ``ObjectId``. 
        - ``[ ObjectId(...), ObjectId(...), ObjectId(...) ]``

      * - v2.x
        - Map from each upserted document index to its ``ObjectId``.
        - ``{ 0: ObjectId(...), 1: ObjectId(...), 2: ObjectId(...) }```

writeErrors Exception
---------------------

If there is a write error while processing the bulk write,
``mongosh`` raises an exception that contains a ``writeErrors``
property with the following fields:

.. data:: writeErrors

   An array of documents that contains information regarding any error,
   unrelated to write concerns, encountered during the update
   operation. ``writeErrors`` contains an error document for each write 
   operation that errors.

   Each error document contains the following fields:

   .. data:: writeErrors.index

      Integer that identifies the write operation in the bulk
      operations list, which uses a zero-based index. See also
      :method:`Bulk.getOperations()`.

   .. data:: writeErrors.code

      Integer value identifying the error.

   .. data:: writeErrors.errmsg

      Description of the error.

   .. data:: writeErrors.op

      A document identifying the operation that failed. For instance,
      an update or replace operation error will return a document
      specifying the query, the update, the ``multi``, and the
      ``upsert`` options. An insert opertation returns the document
      the operation tried to insert.

writeConcernError Exception
---------------------------

If there is a write concern error while processing the bulk write,
``mongosh`` raises an exception that contains a ``writeConcernError``
property with the following fields:

.. data:: writeConcernError

   Document describing errors that relate to the write concern.

   .. |cmd| replace:: :method:`BulkWriteResult`
   .. include:: /includes/fact-bulk-writeConcernError-mongos

   The ``writeConcernError`` documents contains the following fields:

   .. data:: writeConcernError.code

      Integer value identifying the cause of the write concern error.

   .. data:: writeConcernError.errmsg

      Description of the cause of the write concern error.

   .. data:: writeConcernError.errInfo.writeConcern

      .. include:: /includes/fact-errInfo-wc.rst

      .. data:: writeConcernError.errInfo.writeConcern.provenance

         .. include:: /includes/fact-errInfo-wc-provenance.rst
