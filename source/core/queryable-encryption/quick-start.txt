.. facet::
   :name: programming_language
   :values: csharp, go, java, javascript/typescript, python, shell

.. meta::
   :keywords: code example, node.js, compass, java sync

.. _qe-quick-start:

===========
Quick Start
===========

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This guide shows you how to build an application that implements the MongoDB
{+qe+} feature to automatically encrypt and decrypt document fields.

Select your driver language in the dropdown menu on the right to learn
how to create an application that automatically encrypts and decrypts document fields.

.. include:: /includes/queryable-encryption/quick-start/production-warning.rst

.. _qe-guide-intro:
.. _qe-create-a-master-key:
.. _qe-download-example-qe-project:

Before You Get Started
----------------------

.. include:: /includes/queryable-encryption/set-up-section.rst

Full Application Code
~~~~~~~~~~~~~~~~~~~~~

To see the complete code for the sample application, select your programming
language in the language selector.

.. tabs-drivers::

   .. tab:: mongosh
      :tabid: shell

      `Complete mongosh Application <{+sample-app-url-qe+}/mongosh/>`__

   .. tab:: Node.js
      :tabid: nodejs

      `Complete Node.js Application <{+sample-app-url-qe+}/node/>`__

   .. tab:: Python
      :tabid: python

      `Complete Python Application <{+sample-app-url-qe+}/python/>`__

   .. tab:: Java
      :tabid: java-sync

      `Complete Java Application <{+sample-app-url-qe+}/java/>`__

   .. tab:: Go
      :tabid: go

      `Complete Go Application <{+sample-app-url-qe+}/go/>`__

   .. tab:: C#
      :tabid: csharp

      `Complete C# Application <{+sample-app-url-qe+}/csharp/>`__

.. tabs-selector:: drivers

Procedure
---------

.. procedure::
   :style: normal

   .. _field-level-encryption-data-key-retrieve:

   .. step:: Assign Your Application Variables

      The code samples in this tutorial use the following variables to perform
      the {+qe+} workflow:

      .. tabs-drivers::

         .. tab::
            :tabid: shell

            .. include:: /includes/qe-tutorials/qe-quick-start.rst

            You can declare these variables by using the following code:

            .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
               :start-after: start-setup-application-variables
               :end-before: end-setup-application-variables
               :language: javascript
               :dedent:

         .. tab::
            :tabid: nodejs

            .. include:: /includes/qe-tutorials/qe-quick-start.rst

            You can declare these variables by using the following code:

            .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-tutorial.js
               :start-after: start-setup-application-variables
               :end-before: end-setup-application-variables
               :language: javascript
               :dedent:

         .. tab::
            :tabid: python

            - **kms_provider_name** - The KMS you're using to store your {+cmk-long+}.
              Set this variable to ``"local"`` for this tutorial.
            - **uri** - Your MongoDB deployment connection URI. Set your connection
              URI in the ``MONGODB_URI`` environment variable or replace the value
              directly.
            - **key_vault_database_name** - The database in MongoDB where your data
              encryption keys (DEKs) will be stored. Set this variable
              to ``"encryption"``.
            - **key_vault_collection_name** - The collection in MongoDB where your DEKs
              will be stored. Set this variable to ``"__keyVault"``, which is the 
              convention to help prevent mistaking it for a user collection.
            - **key_vault_namespace** - The namespace in MongoDB where your DEKs will
              be stored. Set this variable to the values of the ``key_vault_database_name``
              and ``key_vault_collection_name`` variables, separated by a period.
            - **encrypted_database_name** - The database in MongoDB where your encrypted
              data will be stored. Set this variable to ``"medicalRecords"``.
            - **encrypted_collection_name** - The collection in MongoDB where your encrypted
              data will be stored. Set this variable to ``"patients"``.

            You can declare these variables by using the following code:

            .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
               :start-after: start-setup-application-variables
               :end-before: end-setup-application-variables
               :language: python
               :dedent:

         .. tab::
            :tabid: java-sync

            .. include:: /includes/qe-tutorials/qe-quick-start.rst

            You can declare these variables by using the following code:

            .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
               :start-after: start-setup-application-variables
               :end-before: end-setup-application-variables
               :language: java
               :dedent:

         .. tab::
            :tabid: go

            .. include:: /includes/qe-tutorials/qe-quick-start.rst

            You can declare these variables by using the following code:

            .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
               :start-after: start-setup-application-variables
               :end-before: end-setup-application-variables
               :language: go
               :dedent:

         .. tab::
            :tabid: csharp

            - **kmsProviderName** - The KMS you're using to store your {+cmk-long+}.
              Set this value to ``"local"`` for this tutorial.
            - **keyVaultDatabaseName** - The database in MongoDB where your data
              encryption keys (DEKs) will be stored. Set the value of ``keyVaultDatabaseName``
              to ``"encryption"``.
            - **keyVaultCollectionName** - The collection in MongoDB where your DEKs
              will be stored. Set this variable to ``"__keyVault"``, which is the 
              convention to help prevent mistaking it for a user collection.
            - **keyVaultNamespace** - The namespace in MongoDB where your DEKs will
              be stored. Set ``keyVaultNamespace`` to a new ``CollectionNamespace`` object whose name
              is the values of the ``keyVaultDatabaseName`` and ``keyVaultCollectionName`` variables,
              separated by a period.
            - **encryptedDatabaseName** - The database in MongoDB where your encrypted
              data will be stored. Set the value of ``encryptedDatabaseName`` to ``"medicalRecords"``.
            - **encryptedCollectionName** - The collection in MongoDB where your encrypted
              data will be stored. Set the value of ``encryptedCollectionName`` to ``"patients"``.
            - **uri** - Your MongoDB deployment connection URI. Set your connection
              URI in the ``appsettings.json`` file or replace the value
              directly.

            You can declare these variables by using the following code:

            .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
               :start-after: start-setup-application-variables
               :end-before: end-setup-application-variables
               :language: csharp
               :dedent:

      .. important:: {+key-vault-long-title+} Namespace Permissions

         .. include:: /includes/note-key-vault-permissions

      .. include:: /includes/queryable-encryption/env-variables.rst

   .. step:: Create your Encrypted Collection

      a. Create a {+cmk-long+}

         .. _fle-create-a-master-key:
         .. _qe-quick-start-create-master-key:

         You must create a {+cmk-long+} ({+cmk-abbr+}) to perform {+qe+}.

         Create a 96-byte {+cmk-long+} and save it to your filesystem as the
         file ``customer-master-key.txt``:

         .. tabs-drivers::

            .. tab::
               :tabid: shell

               .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-helpers.js
                  :start-after: start-generate-local-key
                  :end-before: end-generate-local-key
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: nodejs

               .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-helpers.js
                  :start-after: start-generate-local-key
                  :end-before: end-generate-local-key
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: python

               .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_helpers.py
                  :start-after: start-generate-local-key
                  :end-before: end-generate-local-key
                  :language: python
                  :dedent:

            .. tab::
               :tabid: java-sync

               .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/util/QueryableEncryptionHelpers.java
                  :start-after: start-generate-local-key
                  :end-before: end-generate-local-key
                  :language: java
                  :dedent:

            .. tab::
               :tabid: go

               .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_helpers.go
                  :start-after: start-generate-local-key
                  :end-before: end-generate-local-key
                  :language: go
                  :dedent:

            .. tab::
               :tabid: csharp

               .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionHelpers.cs
                  :start-after: start-generate-local-key
                  :end-before: end-generate-local-key
                  :language: csharp
                  :dedent:

         .. include:: /includes/queryable-encryption/qe-warning-local-keys.rst

         .. include:: /includes/in-use-encryption/cmk-bash.rst

      #. Retrieve the {+cmk-long+} and Specify KMS Provider Settings

         .. _qe-field-level-encryption-data-key-create:
         .. _field-level-encryption-data-key-create:

         Retrieve the contents of the {+cmk-long+} file that you generated
         in the :ref:`Create a {+cmk-long+} <qe-quick-start-create-master-key>` step of this guide.

         Use the {+cmk-abbr+} value in your KMS provider settings. The
         client uses these settings to discover the {+cmk-abbr+}. Set the
         provider name to ``local`` to indicate that you are using a
         Local Key Provider.

         .. tabs-drivers::

            .. tab::
               :tabid: shell

               .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-helpers.js
                  :start-after: start-get-local-key
                  :end-before: end-get-local-key
                  :emphasize-lines: 10-14
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: nodejs

               .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-helpers.js
                  :start-after: start-get-local-key
                  :end-before: end-get-local-key
                  :emphasize-lines: 10-14
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: python

               .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_helpers.py
                  :start-after: start-get-local-key
                  :end-before: end-get-local-key
                  :language: python
                  :emphasize-lines: 6-10
                  :dedent:

            .. tab::
               :tabid: java-sync

               .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/util/QueryableEncryptionHelpers.java
                  :start-after: start-get-local-key
                  :end-before: end-get-local-key
                  :language: java
                  :emphasize-lines: 9-13
                  :dedent:

            .. tab::
               :tabid: go

               .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_helpers.go
                  :start-after: start-get-local-key
                  :end-before: end-get-local-key
                  :language: go
                  :emphasize-lines: 8
                  :dedent:

            .. tab::
               :tabid: csharp

               .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionHelpers.cs
                  :start-after: start-get-local-key
                  :end-before: end-get-local-key
                  :language: csharp
                  :emphasize-lines: 13-18
                  :dedent:

      #. Set Your Automatic Encryption Options

         .. _qe-quick-start-shared-lib:

         .. tabs-drivers::

            .. tab::
               :tabid: shell

               Create an ``autoEncryptionOptions`` object that contains the following
               options:

               - The namespace of your {+key-vault-long+}
               - The ``kmsProviderCredentials`` object, defined in the previous step

               .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-helpers.js
                  :start-after: start-auto-encryption-options
                  :end-before: end-auto-encryption-options
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: nodejs

               Create an ``autoEncryptionOptions`` object that contains the following
               options:

               - The namespace of your {+key-vault-long+}
               - The ``kmsProviders`` object, defined in the previous step
               - The ``sharedLibraryPathOptions`` object, which contains the path to
                  your {+shared-library+}

               .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-helpers.js
                  :start-after: start-auto-encryption-options
                  :end-before: end-auto-encryption-options
                  :emphasize-lines: 5-9
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: python

               Create an ``AutoEncryptionOpts`` object that contains the following
               options:

               - The ``kms_provider_credentials`` object, defined in the previous step
               - The namespace of your {+key-vault-long+}
               - The path to your {+shared-library+}

               .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_helpers.py
                  :start-after: start-auto-encryption-options
                  :end-before: end-auto-encryption-options
                  :language: python
                  :dedent:

            .. tab::
               :tabid: java-sync

               Create an ``AutoEncryptionSettings`` object that contains the following
               options:

               - The namespace of your {+key-vault-long+}
               - The ``kmsProviderCredentials`` object, defined in the previous step
               - The ``extraOptions`` object, which contains the path to
                  your {+shared-library+}

               .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/util/QueryableEncryptionHelpers.java
                  :start-after: start-auto-encryption-options
                  :end-before: end-auto-encryption-options
                  :emphasize-lines: 4-8
                  :language: java
                  :dedent:

            .. tab::
               :tabid: go

               Create an ``AutoEncryption`` object that contains the following
               options:

               - The namespace of your {+key-vault-long+}
               - The ``kmsProviderCredentials`` object, defined in the previous step
               - The ``cryptSharedLibraryPath`` object, which contains the path to
                  your {+shared-library+}

               .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_helpers.go
                  :start-after: start-auto-encryption-options
                  :end-before: end-auto-encryption-options
                  :emphasize-lines: 5-8
                  :language: go
                  :dedent:

            .. tab::
               :tabid: csharp

               Create an ``AutoEncryptionOptions`` object that contains the following
               options:

               - The namespace of your {+key-vault-long+}
               - The ``kmsProviderCredentials`` object, defined in the previous step
               - The ``extraOptions`` object, which contains the path to
                  your {+shared-library+}

               .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionHelpers.cs
                  :start-after: start-auto-encryption-options
                  :end-before: end-auto-encryption-options
                  :emphasize-lines: 6-9
                  :language: csharp
                  :dedent:

         .. include:: /includes/queryable-encryption/shared-lib-learn-more.rst

      #. Create a Client to Set Up an Encrypted Collection

         To create a client used to encrypt and decrypt data in
         your collection, instantiate a new ``MongoClient`` by using your
         connection URI and your automatic encryption options.

         .. tabs-drivers::

            .. tab::
               :tabid: shell

               .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
                  :start-after: start-create-client
                  :end-before: end-create-client
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: nodejs

               .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-tutorial.js
                  :start-after: start-create-client
                  :end-before: end-create-client
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: python

               .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
                  :start-after: start-create-client
                  :end-before: end-create-client
                  :language: python
                  :dedent:

            .. tab::
               :tabid: java-sync

               .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
                  :start-after: start-create-client
                  :end-before: end-create-client
                  :language: java
                  :dedent:

            .. tab::
               :tabid: go

               .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
                  :start-after: start-create-client
                  :end-before: end-create-client
                  :language: go
                  :dedent:

            .. tab::
               :tabid: csharp

               :gold:`IMPORTANT:` If you are using the .NET/C# Driver version 3.0 or later,
               you must add the following code to your application before
               instantiating a new ``MongoClient``:

               .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
                  :start-after: start-create-client
                  :end-before: var clientSettings = MongoClientSettings.FromConnectionString(uri);
                  :language: csharp
                  :dedent:
         
               Instantiate a new ``MongoClient`` by using your
               connection URI and automatic encryption options:
                  
               .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
                  :start-after: MongoClientSettings.Extensions.AddAutoEncryption(); // .NET/C# Driver v3.0 or later only
                  :end-before: end-create-client
                  :language: csharp
                  :dedent:

      #. Specify Fields to Encrypt

         .. _qe-quickstart-encrypted-fields-map:

         To encrypt a field, add it to the {+enc-schema+}.
         To enable queries on a field, add the "queries"
         property. Create the {+enc-schema+} as follows:

         .. tabs-drivers::

            .. tab::
               :tabid: shell

               .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
                  :start-after: start-encrypted-fields-map
                  :end-before: end-encrypted-fields-map
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: nodejs

               .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-tutorial.js
                  :start-after: start-encrypted-fields-map
                  :end-before: end-encrypted-fields-map
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: python

               .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
                  :start-after: start-encrypted-fields-map
                  :end-before: end-encrypted-fields-map
                  :language: python
                  :dedent:

            .. tab::
               :tabid: java-sync

               .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
                  :start-after: start-encrypted-fields-map
                  :end-before: end-encrypted-fields-map
                  :language: java
                  :dedent:

            .. tab::
               :tabid: go

               .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
                  :start-after: start-encrypted-fields-map
                  :end-before: end-encrypted-fields-map
                  :language: go
                  :dedent:

            .. tab::
               :tabid: csharp

               .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
                  :start-after: start-encrypted-fields-map
                  :end-before: end-encrypted-fields-map
                  :language: csharp
                  :dedent:

         .. note::

            In the previous code sample, both the "ssn" and
            "billing" fields are encrypted, but only the "ssn"
            field can be queried.

      #. Create the Collection

         Instantiate ``ClientEncryption`` to access the API for the
         encryption helper methods.

         .. tabs-drivers::

            .. tab::
               :tabid: shell

               .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
                  :start-after: start-client-encryption
                  :end-before: end-client-encryption
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: nodejs

               .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-helpers.js
                  :start-after: start-client-encryption
                  :end-before: end-client-encryption
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: python

               .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_helpers.py
                  :start-after: start-client-encryption
                  :end-before: end-client-encryption
                  :language: python
                  :dedent:

            .. tab::
               :tabid: java-sync

               .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
                  :start-after: start-client-encryption
                  :end-before: end-client-encryption
                  :language: java
                  :dedent:

            .. tab::
               :tabid: go

               .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_helpers.go
                  :start-after: start-client-encryption
                  :end-before: end-client-encryption
                  :language: go
                  :dedent:

            .. tab::
               :tabid: csharp

               .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionHelpers.cs
                  :start-after: start-client-encryption
                  :end-before: end-client-encryption
                  :language: csharp
                  :dedent:

         Because you are using a local {+cmk-long+}, you don't need to
         provide {+cmk-long+} credentials. Create a variable
         containing an empty object to use in place of credentials when you
         create your encrypted collection.

         .. tabs-drivers::

            .. tab::
               :tabid: shell

               .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-helpers.js
                  :start-after: start-kmip-local-cmk-credentials
                  :end-before: end-kmip-local-cmk-credentials
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: nodejs

               .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-helpers.js
                  :start-after: start-kmip-local-cmk-credentials
                  :end-before: end-kmip-local-cmk-credentials
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: python

               .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_helpers.py
                  :start-after: start-kmip-local-cmk-credentials
                  :end-before: end-kmip-local-cmk-credentials
                  :language: python
                  :dedent:

            .. tab::
               :tabid: java-sync

               .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/util/QueryableEncryptionHelpers.java
                  :start-after: start-kmip-local-cmk-credentials
                  :end-before: end-kmip-local-cmk-credentials
                  :language: java
                  :dedent:

            .. tab::
               :tabid: go

               .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_helpers.go
                  :start-after: start-kmip-local-cmk-credentials
                  :end-before: end-kmip-local-cmk-credentials
                  :language: go
                  :dedent:

            .. tab::
               :tabid: csharp

               .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionHelpers.cs
                  :start-after: start-kmip-local-cmk-credentials
                  :end-before: end-kmip-local-cmk-credentials
                  :language: csharp
                  :dedent:

         .. tabs-drivers::

            .. tab::
               :tabid: shell

               Create your encrypted collection by using the encryption
               helper method accessed through the ``ClientEncryption`` class.
               This method automatically generates data encryption keys for your
               encrypted fields and creates the encrypted collection:

               .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
                  :start-after: start-create-encrypted-collection
                  :end-before: end-create-encrypted-collection
                  :language: javascript
                  :dedent:

            .. tab::
               :tabid: nodejs

               Create your encrypted collection by using the encryption
               helper method accessed through the ``ClientEncryption`` class.
               This method automatically generates data encryption keys for your
               encrypted fields and creates the encrypted collection:

               .. include:: /includes/tutorials/automatic/node-include-clientEncryption.rst

               .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-helpers.js
                  :start-after: start-create-encrypted-collection
                  :end-before: end-create-encrypted-collection
                  :language: javascript
                  :dedent:

               The method that creates the encrypted collection requires a reference
               to a database *object* rather than the database *name*. You can
               obtain this reference by using a method on your client object.

            .. tab::
               :tabid: python

               Create your encrypted collection by using the encryption
               helper method accessed through the ``ClientEncryption`` class.
               This method automatically generates data encryption keys for your
               encrypted fields and creates the encrypted collection:

               .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
                  :start-after: start-create-encrypted-collection
                  :end-before: end-create-encrypted-collection
                  :language: python
                  :dedent:

               The method that creates the encrypted collection requires a reference
               to a database *object* rather than the database *name*. You can
               obtain this reference by using a method on your client object.

            .. tab::
               :tabid: java-sync

               Create your encrypted collection by using the encryption
               helper method accessed through the ``ClientEncryption`` class.
               This method automatically generates data encryption keys for your
               encrypted fields and creates the encrypted collection:

               .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
                  :start-after: start-create-encrypted-collection
                  :end-before: end-create-encrypted-collection
                  :language: java
                  :dedent:

               The method that creates the encrypted collection requires a reference
               to a database *object* rather than the database *name*. You can
               obtain this reference by using a method on your client object.

            .. tab::
               :tabid: go

               The Golang version of this tutorial uses data models to
               represent the document structure. Add the following
               structs to your project to represent the data in your
               collection:

               .. literalinclude:: /includes/qe-tutorials/go/models.go
                  :start-after: start-patient-document
                  :end-before: end-patient-document
                  :language: go
                  :dedent:

               .. literalinclude:: /includes/qe-tutorials/go/models.go
                  :start-after: start-patient-record
                  :end-before: end-patient-record
                  :language: go
                  :dedent:

               .. literalinclude:: /includes/qe-tutorials/go/models.go
                  :start-after: start-payment-info
                  :end-before: end-payment-info
                  :language: go
                  :dedent:

               After you've added these classes, create your encrypted
               collection by using the encryption helper method accessed
               through the ``ClientEncryption`` class.
               This method automatically generates data encryption keys for your
               encrypted fields and creates the encrypted collection:

               .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
                  :start-after: start-create-encrypted-collection
                  :end-before: end-create-encrypted-collection
                  :language: go
                  :dedent:

               The method that creates the encrypted collection requires a reference
               to a database *object* rather than the database *name*. You can
               obtain this reference by using a method on your client object.

            .. tab::
               :tabid: csharp

               The C# version of this tutorial uses separate classes as data models
               to represent the document structure.
               Add the following ``Patient``, ``PatientRecord``, and ``PatientBilling``
               classes to your project:

               .. literalinclude:: /includes/qe-tutorials/csharp/Patient.cs
                  :start-after: start-patient
                  :end-before: end-patient
                  :language: csharp
                  :dedent:

               .. literalinclude:: /includes/qe-tutorials/csharp/PatientRecord.cs
                  :start-after: start-patient-record
                  :end-before: end-patient-record
                  :language: csharp
                  :dedent:

               .. literalinclude:: /includes/qe-tutorials/csharp/PatientBilling.cs
                  :start-after: start-patient-billing
                  :end-before: end-patient-billing
                  :language: csharp
                  :dedent:

               After you've added these classes, create your encrypted collection by
               using the encryption helper method accessed through the
               ``ClientEncryption`` class.
               This method automatically generates data encryption keys for your
               encrypted fields and creates the encrypted collection:

               .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
                  :start-after: start-create-encrypted-collection
                  :end-before: end-create-encrypted-collection
                  :language: csharp
                  :dedent:

               The method that creates the encrypted collection requires a reference
               to a database *object* rather than the database *name*. You can
               obtain this reference by using a method on your client object.

   .. step:: Insert a Document with Encrypted Fields

      .. tabs-drivers::

         .. tab::
            :tabid: shell

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 15
               :language: javascript
               :dedent:

         .. tab::
            :tabid: nodejs

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-tutorial.js
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 17
               :language: javascript
               :dedent:

         .. tab::
            :tabid: python

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 15
               :language: python
               :dedent:

         .. tab::
            :tabid: java-sync

            This tutorial uses POJOs as data models
            to represent the document structure. To set up your application to
            use POJOs, add the following code:
            
            .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
               :start-after: start-setup-application-pojo
               :end-before: end-setup-application-pojo
               :language: java
               :dedent:

            To learn more about Java POJOs, see the `Plain Old Java Object
            wikipedia article <https://en.wikipedia.org/wiki/Plain_old_Java_object>`__.
            
            This tutorial uses the following POJOs:
            
            - ``Patient``
            - ``PatientRecord``
            - ``PatientBilling``
            
            You can view these classes in the `models package of the complete Java application
            <{+sample-app-url-qe+}/java/src/main/java/com/mongodb/tutorials/qe/models>`__.

            Add these POJO classes to your application. Then, create an instance
            of a ``Patient`` that describes a patient's personal information. Use
            the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 8
               :language: java
               :dedent: 

         .. tab::
            :tabid: go

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 15
               :language: go
               :dedent:

         .. tab::
            :tabid: csharp

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 20
               :language: csharp
               :dedent:

   .. step:: Query on an Encrypted Field

      The following code sample executes a find query on an encrypted field and
      prints the decrypted data:

      .. tabs-drivers::

         .. tab::
            :tabid: shell

            .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
               :start-after: start-find-document
               :end-before: end-find-document
               :language: javascript
               :dedent:

         .. tab::
            :tabid: nodejs

            .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-tutorial.js
               :start-after: start-find-document
               :end-before: end-find-document
               :language: javascript
               :dedent:

         .. tab::
            :tabid: python

            .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
               :start-after: start-find-document
               :end-before: end-find-document
               :language: python
               :dedent:

         .. tab::
            :tabid: java-sync

            .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
               :start-after: start-find-document
               :end-before: end-find-document
               :language: java
               :dedent:

         .. tab::
            :tabid: go

            .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
               :start-after: start-find-document
               :end-before: end-find-document
               :language: go
               :dedent:

         .. tab::
            :tabid: csharp

            .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
               :start-after: start-find-document
               :end-before: end-find-document
               :language: csharp
               :dedent:

      The output of the preceding code sample should look similar to the
      following:

      .. literalinclude:: /includes/qe-tutorials/encrypted-document.json
         :language: json
         :copyable: false
         :dedent:

      .. include:: /includes/queryable-encryption/safe-content-warning.rst

Learn More
----------

To view a tutorial on production-ready {+qe+} with a remote
KMS, see :ref:`<qe-tutorial-automatic-encryption>`.

To learn how {+qe+} works, see
:ref:`<qe-fundamentals>`.

To learn more about the topics mentioned in this guide, see the
following links:

- Learn more about {+qe+} components on the :ref:`Reference <qe-reference>` page.
- Learn how {+cmk-long+}s and {+dek-long+}s work on the :ref:`<qe-reference-keys-key-vaults>` page.
- See how KMS Providers manage your {+qe+} keys on the :ref:`<qe-fundamentals-kms-providers>` page.
