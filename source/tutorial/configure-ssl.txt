===============================================
Configure ``mongod`` and ``mongos`` for TLS/SSL
===============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

This document helps you to configure a new MongoDB instance to support
TLS/SSL. For instructions on upgrading a cluster currently not using
TLS/SSL to using TLS/SSL, see :doc:`/tutorial/upgrade-cluster-to-ssl`
instead.

.. include:: /includes/fact-tls-libraries.rst

.. note::

   - .. include:: /includes/fact-tls-1.0.rst

   - MongoDB's TLS/SSL encryption only allows use of strong TLS/SSL
     ciphers with a minimum of 128-bit key length for all connections.

   - The *Linux 64-bit legacy x64* builds of MongoDB do **not** include
     support for TLS/SSL.

.. |binary| replace:: MongoDB

Prerequisites
-------------

.. important::

   .. include:: /includes/extracts/security-prereq-configure-ssl.rst

Certificate Authorities
~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-ssl-certificate-authorities.rst

Certificate Key File
~~~~~~~~~~~~~~~~~~~~

When establishing a TLS/SSL connection,
:binary:`~bin.mongod`/:binary:`~bin.mongos` presents a certificate key
file to its clients to establish its identity. [#FIPS]_ The certificate
key file contains a public key certificate and its associated private
key, but only the public component is revealed to the client.

MongoDB can use any valid TLS/SSL certificate issued by a certificate
authority, or a self-signed certificate. If you use a self-signed
certificate, although the communications channel will be encrypted,
there will be *no* validation of server identity. Although such a
situation will prevent eavesdropping on the connection, it leaves you
vulnerable to a man-in-the-middle attack. Using a certificate signed by
a trusted certificate authority will permit MongoDB drivers to verify
the server's identity.

In general, avoid using self-signed certificates unless the network is
trusted.

Additionally, with regards to :ref:`authentication among replica
set/sharded cluster members <inter-process-auth>`, it is advisable to
use different certificates on different servers. This minimizes
exposure of the private key and allow hostname validation.

.. [#FIPS]

   For FIPS mode, ensure that the certificate is FIPS-compliant (i.e
   use of FIPS-compliant algorithms) and the private key meets the
   PKCS#8 standard. If you need to convert a private key to PKCS#8
   format, various conversion tools exist, such as ``openssl pkcs8``
   and others.

Procedures
----------

.. _ssl-mongod-ssl-cert-key:

Set Up ``mongod`` and ``mongos`` with TLS/SSL Certificate and Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following section configures
:binary:`~bin.mongod`/:binary:`~bin.mongos` to use TLS/SSL connections.
With these TLS/SSL settings,
:binary:`~bin.mongod`/:binary:`~bin.mongos` presents its certificate
key file to the client. However, the
:binary:`~bin.mongod`/:binary:`~bin.mongos` does not require a
certificate key file from the client to verify the client's identity.
To require client's certificate key file, see
:ref:`ssl-mongod-ca-signed-ssl-cert-key` instead.
   
To use TLS/SSL connections, include the following TLS/SSL settings in
your :binary:`~bin.mongod`/:binary:`~bin.mongos` instance's
:ref:`configuration file <conf-file>`:

.. tabs::

   tabs:
   
     - id: pem
       name: "PEMKeyFile (Linux/Windows/macOS)"
       content: |
         .. list-table::
            :class: border-table
            :header-rows: 1
            :widths: 30 70
   
            * - Setting
              - Notes

            * - :setting:`net.ssl.mode`

              - Set to ``requireSSL``.

                This setting restricts each server to use only TLS/SSL encrypted
                connections. You can also specify ``allowSSL`` or ``preferSSL``
                to use mixed TLS/SSL modes. See
                :setting:`net.ssl.mode` for details.

            * - :setting:`net.ssl.PEMKeyFile` 

              - Set to the :file:`.pem` file that contains the TLS/SSL
                certificate and key.
  
                The :binary:`~bin.mongod`/:binary:`~bin.mongos` instance
                presents this file to its clients to establish the instance's
                identity.

                If the key is encrypted, specify the passphrase
                (:setting:`net.ssl.PEMKeyPassword`).

         For example, consider the following :ref:`configuration file
         <conf-file>` for a :binary:`~bin.mongod` instance:

         .. code-block:: yaml
            :emphasize-lines: 1-4

            net:
               ssl:
                  mode: requireSSL
                  PEMKeyFile: /etc/ssl/mongodb.pem
            systemLog:
               destination: file
               path: "/var/log/mongodb/mongod.log"
               logAppend: true
            storage:
               dbPath: "/var/lib/mongodb"
            processManagement:
               fork: true
            net:
               bindIp: localhost,mongodb0.example.net
               port: 27017


     - id: certstore
       name: "System SSL Certificate Store(Windows/macOS)"
       content: |
         Starting in MongoDB 4.0, you can use system SSL certificate stores for
         Windows and macOS. To use the system SSL certificate store, specify
         :setting:`net.ssl.certificateSelector` instead of specifying the
         certificate key file.

         .. list-table::
            :class: border-table
            :header-rows: 1
            :widths: 30 70
   
            * - Setting
              - Notes

            * - :setting:`net.ssl.mode`

              - Set to ``requireSSL``.

                This setting restricts each server to use only TLS/SSL encrypted
                connections. You can also specify ``allowSSL`` or ``preferSSL``
                to use mixed TLS/SSL modes. See
                :setting:`net.ssl.mode` for details.

            * - :setting:`net.ssl.certificateSelector` 

              - Set to the property (either ``subject`` or
                ``thumbprint``) and value.

                This setting is used to select the certificate. See
                :setting:`net.ssl.certificateSelector` for details.

         For example, consider the following :ref:`configuration file
         <conf-file>` for a :binary:`~bin.mongod` instance:

         .. code-block:: yaml
            :emphasize-lines: 1-4

            net:
               ssl:
                  mode: requireSSL
                  certificateSelector: subject="<CertificateCommonName>"
            systemLog:
               destination: file
               path: "/var/log/mongodb/mongod.log"
               logAppend: true
            storage:
               dbPath: "/var/lib/mongodb"
            processManagement:
               fork: true
            net:
               bindIp: localhost,mongodb0.example.net
               port: 27017

A :binary:`~bin.mongod` instance that uses the above configuration
can only use TLS/SSL connections:

.. code-block:: sh

   mongod --config <path/to/configuration/file>

That is, clients must specify TLS/SSL connections. See
:ref:`ssl-client-connection-only` for more information on
connecting with TLS/SSL.

.. seealso::

   You can also configure :binary:`~bin.mongod` and :binary:`~bin.mongos`
   using command-line options instead of the configuration file:

   - For :binary:`~bin.mongod`, see: :option:`--sslMode <mongod
     --sslMode>`; :option:`--sslPEMKeyFile <mongod --sslPEMKeyFile>`;
     and :option:`--sslCertificateSelector <mongod --sslCertificateSelector>`.

   - For :binary:`~bin.mongos`, see: :option:`--sslMode <mongos --sslMode>`;
     :option:`--sslPEMKeyFile <mongos --sslPEMKeyFile>`; and
     :option:`--sslCertificateSelector <mongos
     --sslCertificateSelector>`.

.. _ssl-mongod-ca-signed-ssl-cert-key:

Set Up ``mongod`` and ``mongos`` with Client Certificate Validation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following section configures
:binary:`~bin.mongod`/:binary:`~bin.mongos` to use TLS/SSL connections
and perform client certificate validation. With these TLS/SSL settings:

- :binary:`~bin.mongod`/:binary:`~bin.mongos` presents its certificate
  key file to the client for verification.

- :binary:`~bin.mongod`/:binary:`~bin.mongos` requires a certificate
  key file from the client to verify the client's identity.

To use TLS/SSL connections and perform client certificate validation,
include the following :ref:`TLS/SSL settings <net-ssl-conf-options>` in
your :binary:`~bin.mongod`/:binary:`~bin.mongos` instance's
:ref:`configuration file <conf-file>`:

.. note::

   Starting in MongoDB 4.0, you can use system SSL certificate stores for
   Windows and macOS. To use the system SSL certificate store, specify
   :setting:`net.ssl.certificateSelector` instead of specifying the
   certificate key file.

.. list-table::
   :class: border-table
   :header-rows: 1
   :widths: 30 70

   * - Setting
     - Notes

   * - :setting:`net.ssl.mode`

     - Set to ``requireSSL``.

       This setting restricts each server to use only TLS/SSL encrypted
       connections. You can also specify ``allowSSL`` or ``preferSSL``
       to use mixed TLS/SSL modes. See
       :setting:`net.ssl.mode` for details.

   * - :setting:`net.ssl.PEMKeyFile` 

     - Set to the :file:`.pem` file that contains the TLS/SSL
       certificate and key.

       The :binary:`~bin.mongod`/:binary:`~bin.mongos` instance
       presents this file to its clients to establish the instance's
       identity.
       
       If the key is encrypted, specify the passphrase
       (:setting:`net.ssl.PEMKeyPassword`).

   * - :setting:`net.ssl.CAFile`
   
     - Set to the path of the file that contains the
       certificate chain for verifying client certificates.

       The :binary:`~bin.mongod`/:binary:`~bin.mongos`
       instance use this file to verify certificates presented
       by its clients. The certificate chain includes the
       certificate of the root Certificate Authority.

For example, consider the following :ref:`configuration file
<conf-file>` for a :binary:`~bin.mongod` instance:

.. code-block:: yaml
   :emphasize-lines: 1-5

   net:
      ssl:
         mode: requireSSL
         PEMKeyFile: /etc/ssl/mongodb.pem
         CAFile: /etc/ssl/caToValidateClientCertificates.pem
   systemLog:
      destination: file
      path: "/var/log/mongodb/mongod.log"
      logAppend: true
   storage:
      dbPath: "/var/lib/mongodb"
   processManagement:
      fork: true
   net:
      bindIp: localhost,mongodb0.example.net
      port: 27017

A :binary:`~bin.mongod` instance that uses the above configuration
can only use TLS/SSL connections and requires valid certificate from
its clients:

.. code-block:: sh

   mongod --config <path/to/configuration/file>

That is, clients must specify TLS/SSL connections and presents its
certificate key file to the instance. See
:ref:`mongo-connect-require-client-certificates-ssl` for more
information on connecting with TLS/SSL.

.. seealso::
   You can also configure :binary:`~bin.mongod` and
   :binary:`~bin.mongos` using command-line options instead of the
   configuration file:

   - For :binary:`~bin.mongod`, see :option:`--sslMode <mongod --sslMode>`,
     :option:`--sslPEMKeyFile <mongod --sslPEMKeyFile>`, and 
     :option:`--sslCAFile <mongod --sslCAFile>`.

   - For :binary:`~bin.mongos`, see :option:`--sslMode <mongos --sslMode>`,
     :option:`--sslPEMKeyFile <mongos --sslPEMKeyFile>`, and 
     :option:`--sslCAFile <mongos --sslCAFile>`.


Block Revoked Certificates for Clients
``````````````````````````````````````

To prevent clients with revoked certificates from connecting, include
:setting:`net.ssl.CRLFile` set to a file that contains revoked
certificates.

For example:

.. code-block:: yaml
   :emphasize-lines: 6

   net:
     ssl:
       mode: requireSSL
       PEMKeyFile: /etc/ssl/mongodb.pem
       CAFile: /etc/ssl/caToValidateClientCertificates.pem
       CRLFile: /etc/ssl/revokedCertificates.pem

Clients who presents certificates that are listed in the
:file:`/etc/ssl/revokedCertificates.pem` will not be able to connect.

.. seealso::
   You can also configure the revoked certificate list using the command-line option.

   - For :binary:`~bin.mongod`, see :option:`--sslCRLFile <mongod --sslCRLFile>`.
   - For :binary:`~bin.mongos`, see :option:`--sslCRLFile <mongos --sslCRLFile>`.

.. _ssl-mongod-weak-certification:

Validate Only if a Client Presents a Certificate
````````````````````````````````````````````````

In most cases, it is important to ensure that clients present valid
certificates. However, if you have clients that cannot present a client
certificate or are transitioning to using a certificate, you may only
want to validate certificates from clients that present a certificate.

To bypass client certificate validation for clients that do not present
a certificate, include
:setting:`net.ssl.allowConnectionsWithoutCertificates` set to ``true``.

For example:

.. code-block:: yaml
   :emphasize-lines: 6

   net:
     ssl:
       mode: requireSSL
       PEMKeyFile: /etc/ssl/mongodb.pem
       CAFile: /etc/ssl/caToValidateClientCertificates.pem
       allowConnectionsWithoutCertificates: true
   
A :binary:`~bin.mongod`/:binary:`~bin.mongos` running with these
settings allows connection from:

- Clients that do not present a certificate.

- Clients that present a valid certificate.

.. note::

   If the client presents a certificate, the certificate must be a
   valid certificate.

   All connections, including those that have not presented
   certificates, are encrypted using TLS/SSL.

See :ref:`ssl-clients` for more information on TLS/SSL connections for
clients.

.. seealso::

   You can also configure using the command-line options:

   - For :binary:`~bin.mongod`, see :option:`--sslAllowConnectionsWithoutCertificates
     <mongod --sslAllowConnectionsWithoutCertificates>`.

   - For :binary:`~bin.mongos`, see :option:`--sslAllowConnectionsWithoutCertificates
     <mongos --sslAllowConnectionsWithoutCertificates>`.

.. _ssl-disallow-protocols:

Disallow Protocols
~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.0.7

To prevent MongoDB servers from accepting incoming connections that use
specific protocols, include :setting:`net.ssl.disabledProtocols` set to
the disallowed protocols.

For example, the following configuration prevents
:binary:`~bin.mongod`/:binary:`~bin.mongos` from accepting incoming
connections that use either ``TLS1_0`` or ``TLS1_1``

.. code-block:: yaml
   :emphasize-lines: 6

   net:
     ssl:
       mode: requireSSL
       PEMKeyFile: /etc/ssl/mongodb.pem
       CAFile: /etc/ssl/caToValidateClientCertificates.pem
       disabledProtocols: TLS1_0,TLS1_1

.. seealso::

   You can also configure using the command-line options:

   - For :binary:`~bin.mongod`, see :option:`--sslDisabledProtocols
     <mongod --sslDisabledProtocols>`.

   - For :binary:`~bin.mongos`, see :option:`--sslDisabledProtocols
     <mongos --sslDisabledProtocols>`.

.. _ssl-certificate-password:

TLS/SSL Certificate Passphrase
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The PEM files for :setting:`~net.ssl.PEMKeyfile` and
:setting:`~net.ssl.ClusterFile` may be encrypted. With encrypted PEM files,
you must specify the passphrase at startup with a command-line or a
configuration file option or enter the passphrase when prompted.

To specify the passphrase in clear text on the command line or in a
configuration file, use the :setting:`~net.ssl.PEMKeyPassword` and/or the
:setting:`~net.ssl.clusterPassword` option.

To have MongoDB prompt for the passphrase at the start of
:binary:`~bin.mongod` or :binary:`~bin.mongos` and avoid specifying the
passphrase in clear text, omit the :setting:`~net.ssl.PEMKeyPassword` and/or
the :setting:`~net.ssl.clusterPassword` option. MongoDB will prompt for each
passphrase as necessary.

.. important:: The passphrase prompt option is available if you run the
   MongoDB instance in the foreground with a connected terminal. If you
   run :binary:`~bin.mongod` or :binary:`~bin.mongos` in a non-interactive
   session (e.g. without a terminal or as a service on Windows),
   you cannot use the passphrase prompt option.

.. _ssl-run-fips-mode:

Run in FIPS Mode
~~~~~~~~~~~~~~~~

.. include:: /includes/note-fips-is-enterprise-only.rst

See :doc:`/tutorial/configure-fips` for more details.
