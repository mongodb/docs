.. _schema-validation-json:
.. _doc-insert-schema-validation:

==============================
Specify JSON Schema Validation
==============================

.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: json

.. facet::
   :name: genre
   :values: tutorial

.. meta:: 
   :description: Use JSON schema to specify validation rules for your fields in a human-readable format.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

JSON Schema is a vocabulary that allows you to annotate and validate
JSON documents. You can use JSON schema to specify validation rules for
your fields in a human-readable format.

Compatibility
-------------

.. |operator-method| replace:: JSON schema validation

.. include:: /includes/fact-compatibility.rst

Context
-------

.. include:: /includes/schema-validation/json-schema-intro.rst

Restrictions
------------

You can't specify schema validation for:

- Collections in the ``admin``, ``local``, and ``config`` databases

- :ref:`System collections <metadata-system-collections>`

.. include:: /includes/queryable-encryption/qe-csfle-schema-validation.rst

Steps
-----

In this example, you create a ``students`` collection with validation
rules and observe the results after you attempt to insert an invalid
document.

.. procedure::

   .. step:: Connect to your MongoDB deployment.

      To connect to a local MongoDB instance or
      {+atlas+} deployment using :binary:`~bin.mongosh`,
      refer to the steps in :mongosh:`Connect to a Deployment </connect>`
      or :atlas:`Connect via mongosh </mongo-shell-connection/>`.

   .. step:: Create a collection with validation.

      In :binary:`~bin.mongosh`, run the following command to 
      create a ``students`` collection and use the 
      :query:`$jsonSchema` operator to set schema validation rules:

      .. include:: /includes/schema-validation/json-schema-example.rst

      .. tip:: Clarify Rules with Title and Description Fields

         You can use ``title`` and ``description`` fields to provide an
         explanation of validation rules when the rules are not
         immediately clear. When a document fails validation, MongoDB
         includes these fields in the error output.

   .. step:: Confirm that the validation prevents invalid documents.

      Run the following command. The insert operation fails 
      because ``gpa`` is an integer when the ``validator`` requires a 
      ``double``.

      .. io-code-block:: 
         :copyable: true

         .. input::
            :language: javascript
            :emphasize-lines: 5

            db.students.insertOne( {
               name: "Alice",
               year: Int32( 2019 ),
               major: "History",
               gpa: Int32(3),
               address: {
                  city: "NYC",
                  street: "33rd Street"
               }
            } )

         .. output::
            :language: json

            MongoServerError: Document failed validation

            Additional information: {
              failingDocumentId: ObjectId("630d093a931191850b40d0a9"),
              details: {
                operatorName: '$jsonSchema',
                title: 'Student Object Validation',
                schemaRulesNotSatisfied: [
                  {
                    operatorName: 'properties',
                    propertiesNotSatisfied: [
                      {
                        propertyName: 'gpa',
                        description: "'gpa' must be a double if the field exists",
                        details: [
                          {
                            operatorName: 'bsonType',
                            specifiedAs: { bsonType: [ 'double' ] },
                            reason: 'type did not match',
                            consideredValue: 3,
                            consideredType: 'int'
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }

      .. tip:: 

         By default, :binary:`mongosh` prints nested objects up to six
         levels deep. To print all nested objects to their full
         depth, set ``inspectDepth`` to ``Infinity``. 

         .. code-block:: shell
            :copyable: true
            
            config.set("inspectDepth", Infinity)

   .. step:: Insert a valid document.
    
      If you change the ``gpa`` field value to a ``double`` type, the 
      insert operation succeeds. Run the following command to
      insert the valid document:

      .. code-block:: javascript
         :emphasize-lines: 5

         db.students.insertOne( {
            name: "Alice",
            year: NumberInt(2019),
            major: "History",
            gpa: Double(3.0),
            address: {
               city: "NYC",
               street: "33rd Street"
            }
         } )

   .. step:: Query for the valid document.

      To confirm that you've successfully inserted the document, run
      the following command to query the ``students`` collection:

      .. io-code-block::
         :copyable: true

         .. input::
            :language: javascript

            db.students.find()

         .. output:: 
            :language: json

            [
               {
                  _id: ObjectId("62bb413014b92d148400f7a5"),
                  name: 'Alice',
                  year: 2019,
                  major: 'History',
                  gpa: 3,
                  address: { city: 'NYC', street: '33rd Street' }
               }
            ]

      .. tip:: 
          
         If you're connected to an Atlas deployment, you can also 
         :atlas:`view and filter for the document in the Atlas UI 
         </atlas-ui/documents/#view--filter--and-sort-documents>`.

Additional Information
----------------------

You can combine JSON Schema validation with :ref:`query operator
validation <schema-validation-query-expression>`.

.. include:: /includes/schema-validation-combine-validation-types.rst

Learn More 
----------

- To see the complete list of allowed keywords in a JSON schema, see
  :ref:`jsonSchema-keywords`.

- To restrict what values a certain field can contain, see
  :ref:`schema-allowed-field-values`.

- To avoid issues with JSON schema validation, see
  :ref:`json-schema-tips`.

.. toctree::
   :titlesonly:

   Specify Field Values </core/schema-validation/specify-json-schema/specify-allowed-field-values>
   Best Practices </core/schema-validation/specify-json-schema/json-schema-tips>
