.. _mongoexport:

===============
``mongoexport``
===============

.. default-domain:: mongodb
.. |tool-binary| replace:: mongoexport

Synopsis
--------

:program:`mongoexport` is a utility that produces a JSON or CSV export
of data stored in a MongoDB instance. See the
:doc:`/core/import-export` document for a more in depth
usage overview, and the :doc:`mongoimport` document for more
information regarding the :program:`mongoimport` utility, which
provides the inverse "importing" capability.

.. note::

   Do not use :program:`mongoimport` and :program:`mongoexport` for
   full-scale backups because they may not reliably capture data type
   information. Use :program:`mongodump` and :program:`mongorestore` as
   described in :doc:`/core/backups` for this kind of
   functionality.

Options
-------

.. binary:: mongoexport

.. program:: mongoexport

.. include:: /includes/options-mongoexport.rst

.. option:: --skip <number>

   Use :option:`--skip` to control where :program:`mongoexport` begins
   exporting documents.

   See :method:`~cursor.skip()` for information about the underlying
   operation.

.. option:: --limit <number>

   Specifies a maximum number of documents to include in the
   export.

   See :method:`~cursor.limit()` for information about the underlying
   operation.

.. option:: --sort <JSON>

   Specifies an ordering for exported results. If an index does
   **not** exist that can support the sort operation, the results must
   be *less than* 32 megabytes.

   Use :option:`--sort` conjunction with :option:`--skip` and
   :option:`--limit` to limit number of exported documents.

   .. code-block:: sh

      mongoexport -d test -c records --sort '{a: 1}' --limit 100 --out export.0.json
      mongoexport -d test -c records --sort '{a: 1}' --limit 100 --skip 100 --out export.1.json
      mongoexport -d test -c records --sort '{a: 1}' --limit 100 --skip 200 --out export.2.json

   See :method:`~cursor.sort()` for information about the underlying
   operation.

Use
---

In the following example, :program:`mongoexport` exports the
collection ``contacts`` from the ``users`` database from the
:program:`mongod` instance running on the localhost port number
``27017``. This command writes the export data in :term:`CSV` format
into a file located at ``/opt/backups/contacts.csv``.  The
``fields.txt`` file contains a line-separated list of fields to
export.

.. code-block:: sh

   mongoexport --db users --collection contacts --csv --fieldFile fields.txt --out /opt/backups/contacts.csv

The next example creates an export of the collection ``contacts``
from the MongoDB instance running on the localhost port number ``27017``,
with journaling explicitly enabled. This writes the export to the
``contacts.json`` file in :term:`JSON` format.

.. code-block:: sh

   mongoexport --db sales --collection contacts --out contacts.json --journal

The following example exports the collection ``contacts`` from the
``sales`` database located in the MongoDB data files located at
``/srv/mongodb/``. This operation writes the export to standard output
in :term:`JSON` format.

.. code-block:: sh

   mongoexport --db sales --collection contacts --dbpath /srv/mongodb/

.. warning::

   The above example will only succeed if there is no :program:`mongod`
   connected to the data files located in the ``/srv/mongodb/``
   directory.

The final example exports the collection ``contacts`` from the
database ``marketing`` . This data resides on the MongoDB instance
located on the host ``mongodb1.example.net`` running on port
``37017``, which requires the username ``user`` and the password
``pass``.

.. code-block:: sh

   mongoexport --host mongodb1.example.net --port 37017 --username user --password pass --collection contacts --db marketing --out mdb1-examplenet.json
