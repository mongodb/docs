.. _arch-center-hierarchy:

=========================================================
Guidance for {+service+} Orgs, Projects, and {+Clusters+}
=========================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

Organizations, projects, and {+clusters+} are the building blocks
of your {+service+} enterprise estate: 

- At the organization level, you can implement security controls and
  create users that work across one or more projects. 
- Projects offer a more fine-grained security isolation and
  authorization boundary.
- {+Clusters+} are your cloud databases in {+service+}.

Use the foundational guidance on this page to design the layout of your
organizations, projects, and {+clusters+} based on your company's
hierarchy and expected number of {+clusters+} and projects. This
guidance helps you optimize your security and performance from the
start while aligning with your enterprise's billing and access needs.

Features for {+service+} Orgs, Projects, and {+Clusters+}
---------------------------------------------------------

You can use the following levels of hierarchy to define
security settings and governance for your {+service+} enterprise estate:

.. list-table::
   :header-rows: 1
   :widths: 20 40

   * - {+service+} Hierarchy Level
     - Description

   * - (Optional) Paying Organization
     - One organization can be a paying organization for other
       organization(s). A paying organization lets you set up 
       :atlas:`cross-organization billing </billing/#std-label-cross-org-billing>` 
       to share a billing subscription across multiple organizations. 
       To learn more about setting up your paying organization when 
       you establish the |service| subscription, see :atlas:`Manage Billing </billing>`.  
       In order to enable cross-organization billing, the user performing 
       the action must have an Org Owner or Billing Admin role of both 
       organizations that they wish to link. To learn more, see 
       :atlas:`User Roles </reference/user-roles>`.

       A paying organization is common for large enterprises with many
       {+BU+}\s or departments that operate independently but where the
       contract or bill is owned by a central authority.

   * - Organization
     - An organization can contain many projects under it and provides
       a container to apply shared integration and security settings. If 
       you manage multiple {+service+} organizations, the 
       :ref:`Atlas Federation Management Console <atlas-federated-authentication>` 
       allows users with an Org Owner role to manage |idps| for |sso|, 
       then link them to multiple organizations. 
       An organization often maps to a {+BU+} or department within a
       company. The built-in {+service+} Cost Explorer aggregates cloud
       spend at the organization level and breaks out line items at the 
       project-level and {+cluster+} level below it. You can customize further
       by leveraging the billing API.

   * - Project
     - Security configuration for the data plane (including database
       clusters, network security, and other data services) occurs at the 
       project-level. A project often maps to an application and environment 
       (for example: Customer Portal app - Production environment). For each 
       project, based on the selected cloud provider, there is one dedicated 
       VPC or VNet per region in AWS and Azure. 

   * - {+Cluster+}
     - |service| provisions each {+cluster+} within the dedicated 
       VPC/VNet(s) for a project. The security configuration is shared
       among {+clusters+} in the project, except for database user roles and 
       authorization, which you can apply to actions on a {+cluster+},
       database, and collection level.

.. figure:: /includes/images/project-hierarchy.png
   :alt: An image showing org, project, and cluster hierarchy.
   :align: center
   :lightbox:

.. _arch-center-orgs-projects-clusters-recs:

Recommendations for {+service+} Orgs, Projects, and {+Clusters+}
----------------------------------------------------------------

Development, Testing, Staging, and Production Environments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We recommend that you use the following four environments to isolate
your sandbox and test projects and {+clusters+} from your application
projects and {+clusters+}:

.. list-table::
   :header-rows: 1
   :widths: 15 85

   * - Environment
     - Description

   * - Development (Dev)
     - Allow developers to freely try new things in a safe sandbox
       environment.

   * - Testing (Test)
     - Test specific components or functions created in the dev
       environment.
     
   * - Staging
     - Stage all components and
       functions together to make sure the entire application works 
       as expected before deploying to production. Staging is similar to
       the test environment, but ensures that new components work well 
       with existing components.
    
   * - Production (Prod)
     - The back end for your application that is live for your
       end users.

Local {+service+} Deployments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For development and testing purposes, developers can use the {+atlas-cli+} to 
:atlascli:`create a local {+service+} deployment</atlas-cli-deploy-local>`.
By working locally from their machines, developers can cut down on costs
for external development and testing environments. 

Developers can also :atlascli:`run {+atlas-cli+} commands with Docker </atlas-cli-docker>`
to build, run, and manage local {+service+} deployments using containers.
Containers are standardized units that contain all of the software 
needed to run an application. Containerization allows developers to build
local {+service+} deployments in secure, reliable, and portable test 
environments. To learn more, see :atlascli:`Create a Local {+service+} Deployment with Docker </atlas-cli-deploy-docker>`.

Org and Project Hierarchies
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Generally, we recommend a paying organization that is managed
centrally, and one organization for each {+BU+} or department that is
linked to the paying org. Then, create a project with one {+cluster+}
each for your lower (dev or test) and upper environments; you can create 
clusters in these projects. To learn more, see the following information 
for :ref:`<project-hierarchy-1>`.

If you will easily hit the 250 project limit per organization, we
recommend creating one organization per environment, such as one each
for lower and upper environments, or one each for dev, test, staging,
and production. This setup has the benefit of additional isolation. You can also 
increase the limits. To learn more, see 
:atlas:`{+service+} Service Limits </reference/atlas-limits>`.

.. _project-hierarchy-1:

Recommended Hierarchy
`````````````````````

Consider the following hierarchy, which creates fewer |service| organizations, if you have common teams and permissions across the 
{+BU+} and less than the raiseable limit of 250 projects per organization. 

.. figure:: /includes/images/paying-org-hierarchy.svg
   :alt: An image showing a paying organization with other organizations nested beneath it.
   :align: center
   :lightbox:

.. _project-hierarchy-2:

Recommended Hierarchy 2: Decentralized Business Units/Departments
`````````````````````````````````````````````````````````````````

Consider the following hierarchy if your organization is highly
decentralized without a centralized function to serve as the contract
and billing owner. In this hierarchy, each {+BU+},
department, or team has their own {+service+} organization. This
hierarchy is useful if each of your teams is fairly independent, they
don't share people or permissions within the company, or they want to
buy credits themselves through the cloud provider marketplace or
directly with their own contract. There is no paying organization in
this hierarchy.

.. figure:: /includes/images/no-paying-org-hierarchy.svg
   :alt: An image showing multiple organizations without a paying organization above them.
   :align: center
   :lightbox:

.. _deployment-hierarchy:

{+Cluster+} Hierarchy
~~~~~~~~~~~~~~~~~~~~~

To maintain isolation between environments, we recommend that you deploy 
each cluster within its own project, as shown in the following diagram. 
This allows administrators to maintain different project configurations between environments
and uphold the principle of least privilege, which states that users should 
only be granted the least level of access necessary for their role.

However, this hierarchy may make it more complicated to share project-level configurations such as private endpoints and |cmk|\s across clusters.
To learn more, see :ref:`hierarchy-multiple-clusters`. 

.. figure:: /includes/images/deployment-hierarchy.svg
   :alt: An image showing one deployment per project in each organization.
   :align: center
   :lightbox:

.. _hierarchy-multiple-clusters: 

When to Consider Multiple {+Clusters+} Per Project 
``````````````````````````````````````````````````

The following diagram shows an organization whose projects each contain multiple {+service+} {+clusters+}, grouped by environment. 
Deploying multiple {+clusters+} within the same project simplifies administration when one application uses multiple backing clusters, or 
the same team is responsible for multiple applications across environments. 
This eases the setup cost for features such as private endpoints and customer-managed keys, 
because all {+clusters+} in the same project share the same project configuration.

However, this {+cluster+} hierarchy may violate the principle of least privilege.

Deploy multiple {+clusters+} within the same project only if both of the following are true:

- Each team member with access to the project is working on all other
  applications and {+clusters+} in the project. 
- You are creating {+clusters+} for development and testing environments. 
  In staging and production environments, we recommend that {+clusters+} in the same project
  should belong to the same application and be administered by the same team.

.. figure:: /includes/images/alt-deployment-by-environment.svg
   :alt: An image showing deployments grouped by environment.
   :align: center
   :lightbox:

Resource Tagging
~~~~~~~~~~~~~~~~

We recommend that you :atlas:`tag {+clusters+} or projects <database-deployment-tags>` 
with the following details to enable easy parsing for reporting and integrations:

- {+BU+} or Department
- Team name
- Application name
- Environment
- Version
- Email contact
- Criticality (indicates the tier of data stored on the {+cluster+},
  including any sensitive classifications such as {+PII+} or {+PHI+})

To learn more about parsing billing data using tags, see
:ref:`arch-center-billing-data`.

.. _arch-center-cluster-size-guide:

{+service+} {+Cluster+} Size Guide
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In a dedicated deployment ({+cluster+} size ``M10``\+), {+service+}
allocates resources exclusively. We recommend dedicated deployments
for production use cases because they provide higher security and performance than shared
clusters.

The following {+cluster+} size guide uses "t-shirt sizing," a common analogy used in software
development and infrastructure to describe capacity planning in a
simplified manner. Use t-shirt sizing recommendations only as approximate
starting points in your sizing analysis. Sizing a {+cluster+} is an iterative process based on
changing resource needs, performance requirements, workload
characteristics, and growth expectations.

.. important::
   
   This guidance excludes mission-critical applications, high-memory
   workloads, and high-CPU workloads. For these use cases,
   contact |mdb-support| for customized guidance.

You can estimate the {+cluster+} resources that your deployment requires by using your organization's approximate data size and workload:

- **Total Storage Required**: 50% of the
  total raw data size
- **Total RAM Required**: 10% of the total raw data size
- **Total CPU Cores Required**: expected peak read/write database
  operations per second ÷ 4000
- **Total Storage IOPS Required**: expected peak read/write database operations per
  second (min IOPS = 5%, max IOPS = 95%)

Use the following {+cluster+} size guide to select a {+cluster+} tier that ensures performance without over-provisioning. 
This table displays the default storage and performance capabilities for each {+cluster+} tier, as well as 
whether or not the {+cluster+} tier is suitable for staging and production environments. 

.. list-table::
   :header-rows: 1
   :widths: 10 10 20 20 10 10 10 10

   * - T-Shirt Size
     - Cluster Tier
     - Storage Range: AWS/{+gcp+}
     - Storage Range: Azure
     - CPUs (#)
     - Default RAM
     - Default IOPS
     - Suitable For

   * - Small
     - ``M10`` [1]_
     - 10 GB to 128 GB
     - 8 GB to 128 GB
     - 2
     - 2 GB
     - 1000
     - Dev/Test only

   * - Med
     - ``M30``
     - 10 GB to 512 GB
     - 8 GB to 512 GB
     - 2
     - 8 GB
     - 3000
     - Prod

   * - Large
     - ``M50``
     - 10 GB to 4 TB
     - 8 GB to 4 TB
     - 16
     - 32 GB
     - 3000
     - Prod

   * - X-Large
     - ``M80``
     - 10 GB to 4 TB
     - 8 GB to 4 TB
     - 32
     - 128 GB
     - 3000
     - Prod

.. [1] ``M10`` is a shared CPU tier. For highly-regulated industries or sensitive data, your minimum and smallest starting tier should be ``M30``.

To learn more about {+cluster+} tiers and the regions that support
them, see the {+service+} documentation for each cloud provider:

- :atlas:`AWS </reference/amazon-aws/>`
- :atlas:`Azure </reference/microsoft-azure/>`
- :atlas:`{+gcp+} </reference/google-gcp/>`

.. _arch-center-create-hierarchy-example:

Automation Examples: {+service+} Orgs, Projects, and {+Clusters+}
-----------------------------------------------------------------

.. include:: /includes/complete-examples.rst

The following examples create organizations, projects, and {+clusters+}
using |service| :ref:`tools for automation <arch-center-automation>`.

These examples also apply other recommended configurations, including:

.. tabs::

   .. tab:: Dev and Test Environments
      :tabid: devtest

      .. include:: /includes/shared-settings-clusters-devtest.rst

   .. tab:: Staging and Prod Environments
      :tabid: stagingprod

      .. include:: /includes/shared-settings-clusters-stagingprod.rst

.. tabs::

   .. tab:: CLI
      :tabid: cli

      .. note::

         Before you
         can create resources with the {+atlas-cli+}, you must:

         - :atlas:`Create your paying organization 
           </billing/#configure-a-paying-organization>` and :atlas:`create an API key </configure-api-access/>` for the
           paying organization.
         - :atlascli:`Install the {+atlas-cli+} </install-atlas-cli/>` 
         - :atlascli:`Connect from the {+atlas-cli+} 
           </connect-atlas-cli/>` using the steps for :guilabel:`Programmatic Use`.

      Create the Organizations
      ~~~~~~~~~~~~~~~~~~~~~~~~

      Run the following command for each {+BU+}. Change
      the IDs and names to use your actual values:

      .. code-block::

         atlas organizations create ConsumerProducts --ownerId 508bb8f5f11b8e3488a0e99e --apiKeyRole ORG_OWNER --apiKeyDescription consumer-products-key

      For more configuration options and info about this example, 
      see :ref:`atlas-organizations-create`.

      To get the user IDs and organization IDs, see the following
      commands:

      - :ref:`atlas-organizations-list`
      - :ref:`atlas-organizations-users-list`

      Create the Projects
      ~~~~~~~~~~~~~~~~~~~

      Run the following command for each application and environment pair. Change the IDs and names to use your values:

      .. include:: /includes/examples/cli-example-create-projects.rst

      For more configuration options and info about this example, 
      see :ref:`atlas-projects-create`.

      To get the project IDs, see the following command:

      - :ref:`atlas-projects-list`

      Configure Encryption with Customer Key Management
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      .. include:: /includes/encryption-with-cmk-recommendations-short.rst

      You can't use the the {+atlas-cli+} to manage encryption with customer key management.
      Instead, use the following methods:

      - :atlas:`{+atlas-ui+} </security-kms-encryption>`
      - :oas-atlas-tag:`{+atlas-admin-api+} </Encryption-at-Rest-using-Customer-Key-Management>`

      Create One {+Cluster+} Per Project
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      .. tabs::

         .. tab:: Dev and Test Environments
            :tabid: devtest

            For your development and testing environments, run the following command for each project that you created. Change
            the IDs and names to use your values:

            .. include:: /includes/examples/cli-example-create-clusters-devtest.rst

         .. tab:: Staging and Prod Environments
            :tabid: stagingprod

            For your staging and production environments, create the following ``cluster.json`` file for each project that you
            created. Change the IDs and names to use your values:

            .. include:: /includes/examples/cli-json-example-create-clusters.rst

            After you create the ``cluster.json`` file, run the
            following command for each project that you created. The
            command uses the ``cluster.json`` file to create a cluster.

            .. include:: /includes/examples/cli-example-create-clusters-stagingprod.rst 

      For more configuration options and info about this example, 
      see :ref:`atlas-clusters-create`.

   .. tab:: Terraform
      :tabid: tf

      .. note::

         Before you
         can create resources with Terraform, you must:

         - :atlas:`Create your paying organization 
           </billing/#configure-a-paying-organization>` and :atlas:`create an API key </configure-api-access/>` for the
           paying organization. Store your API key as environment
           variables by running the following command in the terminal:

           .. code-block::

              export MONGODB_ATLAS_PUBLIC_KEY="<insert your public key here>"
              export MONGODB_ATLAS_PRIVATE_KEY="<insert your private key here>"

         - `Install Terraform 
           <https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli>`__ 

      Create the Projects and Deployments
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      .. tabs::

         .. tab:: Dev and Test Environments
            :tabid: devtest

            For your development and testing environments, create the
            following files for each application and environment 
            pair. Place the files for each application and environment
            pair in their own directory. Change the IDs and names to use your values:

            main.tf
            ```````

            .. include:: /includes/examples/tf-example-main-devtest.rst 

            variables.tf
            ````````````

            .. include:: /includes/examples/tf-example-variables.rst

            terraform.tfvars
            ````````````````

            .. include:: /includes/examples/tf-example-tfvars-devtest.rst

            provider.tf
            ```````````

            .. include:: /includes/examples/tf-example-provider.rst

         .. tab:: Staging and Prod Environments
            :tabid: stagingprod

            For your staging and production environments, create the
            following files for each application and environment 
            pair. Place the files for each application and environment
            pair in their own directory. Change the IDs and names to use your values:

            main.tf
            ```````

            .. include:: /includes/examples/tf-example-main-stagingprod.rst 

            variables.tf
            ````````````

            .. include:: /includes/examples/tf-example-variables.rst

            terraform.tfvars
            ````````````````

            .. include:: /includes/examples/tf-example-tfvars-stagingprod.rst

            provider.tf
            ```````````

            .. include:: /includes/examples/tf-example-provider.rst
      
      For more configuration options and info about this example, 
      see |service-terraform| and the `MongoDB Terraform Blog Post
      <https://www.mongodb.com/developer/products/atlas/deploy-mongodb-atlas-terraform-aws/>`__.

      After you create the files, navigate to each application and environment pair's directory and run the following
      command to initialize Terraform:

      .. code-block::

         terraform init

      Run the following command to view the Terraform plan:

      .. code-block::

         terraform plan
      
      Run the following command to create one project and one deployment for the application and environment pair. The command uses the files and the |service-terraform| to
      create the projects and clusters:

      .. code-block::

         terraform apply

      When prompted, type ``yes`` and press :kbd:`Enter` to apply
      the configuration. 

Next Steps
----------

After you plan the hierarchy and size for your organizations, projects,
and {+clusters+}, see the following suggested resources or use the left
navigation to find features and best practices for each {+waf+} pillar.

- :ref:`arch-center-monitoring-alerts`
- :ref:`arch-center-network-security`
- :ref:`arch-center-backups`

