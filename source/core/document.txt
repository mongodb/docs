=========
Documents
=========

.. default-domain:: mongodb

MongoDB stores all data in documents, which are JSON-style data
structures composed of field-and-value pairs:

.. code-block:: javascript

   { "item": "pencil", "qty": 500, "type": "no.2" }

Most user-accessible data structures in MongoDB are documents,
including:

- :ref:`Records <documents-records>`. MongoDB stores records in
  :term:`collections <collection>`

- :ref:`Query selectors <documents-query-selectors>`, which define what
  records to select for read, update, and delete operations.

- :ref:`Update actions <documents-update-actions>`, which define what
  fields to modify during an update.

- :ref:`Index specifications <documents-index>`, which define what
  fields to index.

- Arguments to many MongoDB methods and operators, such as the
  :ref:`sort order document <documents-sort-order>` used by the
  :method:`sort() <cursor.sort()>` method.

- Outputted data, such as the output of the :dbcommand:`collStats`
  command.

Document Format
---------------

MongoDB documents are stored on disk in the :term:`BSON` serialization
format. BSON is a binary representation of :term:`JSON` documents,
though contains more data types than does JSON. For the BSON spec, see
`bsonspec.org <http://bsonspec.org/>`_. See also
:doc:`/core/bson-types`.

The :program:`mongo` JavaScript shell and the :doc:`MongoDB language
drivers </applications/drivers>` translate between BSON and the
language-specific document representation.

Document Structure
------------------

MongoDB documents are composed of field-and-value pairs and have the
following structure:

.. code-block:: javascript

   {
      field1: value1,
      field2: value2,
      field3: value3,
      ...
      fieldN: valueN
   }

The value of a field can be any of the BSON :doc:`data types
</core/bson-types>`, including other documents, arrays, and arrays of
documents. The following document contains values of varying types:

.. code-block:: javascript

   var mydoc = {
                  _id: ObjectId("5099803df3f4948bd2f98391"),
                  name: { first: "Alan", last: "Turing" },
                  birth: new Date('Jun 23, 1912'),
                  death: new Date('Jun 07, 1954'),
                  contribs: [ "Turing machine", "Turing test", "Turingery" ],
                  views : NumberLong(1250000)
               }

The above fields have the following data types:

- ``_id`` holds an *ObjectId*.

- ``name`` holds a *subdocument* that contains the fields ``first`` and
  ``last``.

- ``birth`` and ``death`` hold values of the *Date* type.

- ``contribs`` holds an *array of strings*.

- ``views`` holds a value of the *NumberLong* type.

Field Names
-----------

Field names are strings. Field names cannot contain null characters,
dots (``.``) or dollar signs (``$``). See
:ref:`faq-dollar-sign-escaping` for an alternate approach.

BSON documents may have more than one field with the same name.
Most :doc:`MongoDB interfaces </applications/drivers>`, however, represent MongoDB
with a structure (e.g. a hash table) that does not support duplicate
field names. If you need to manipulate documents that have more than one
field with the same name, see the :doc:`driver documentation
</applications/drivers>` for your driver.

Some documents created by internal MongoDB processes may have duplicate
fields, but *no* MongoDB process will *ever* add duplicate fields to an
existing user document.

.. _document-dot-notation:

Dot Notation
------------

.. include:: /includes/fact-dot-notation.rst

.. seealso::

   - :ref:`read-operations-subdocuments` for dot notation examples
     with subdocuments.

   - :ref:`read-operations-arrays` for dot notation examples with
     arrays.

.. class:: hidden

   .. toctree::
      :titlesonly:

      /core/document-type-record
      /core/document-type-query-specification
      /core/document-type-update-specification
      /core/document-type-index-specification
      /core/document-type-sort-order
      /core/bson-types
      /core/document-type-operators
