.. _c-connection-targets:

==========================
Choose a Connection Target
==========================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: connection string, URI, server, settings, client

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use a connection string and a ``mongoc_client_t`` object
to connect to different types of MongoDB deployments.

.. _c-connect-atlas:

Atlas
-----

To connect to a MongoDB deployment on Atlas, include the following elements
in your connection string:

- The URL of your Atlas cluster
- Your MongoDB username
- Your MongoDB password

Then, pass your connection string to the ``mongoc_client_new()`` function.

.. tip::

   Follow the :atlas:`Atlas driver connection guide </driver-connection>`
   to retrieve your connection string.

The following code shows how to use the {+driver-short+} to connect to an Atlas cluster. The
code also uses the ``mongoc_server_api_new()`` function to specify a {+stable-api+} version.

.. literalinclude:: /includes/connect/connection-targets.c
   :language: c
   :start-after: start-connect-stable-api
   :end-before: end-connect-stable-api
   :dedent:

.. tip::

   When you connect to Atlas, we recommend using the {+stable-api+} client option to avoid
   breaking changes when Atlas upgrades to a new version of {+mdb-server+}. To learn more
   about the {+stable-api+}, see the :ref:`c-stable-api` guide.

.. _c-connect-local:

Local Deployments
-----------------

To connect to a local MongoDB deployment, use ``localhost`` as the hostname. By
default, the ``mongod`` process runs on port 27017, though you can customize this for
your deployment.

The following code shows how to use the {+driver-short+} to connect to a local MongoDB
deployment:

.. literalinclude:: /includes/connect/connection-targets.c
   :language: c
   :start-after: start-connect-local
   :end-before: end-connect-local
   :dedent:

.. _c-connect-replica-sets:

Replica Sets
------------

To connect to a replica set, specify the hostnames (or IP addresses) and 
port numbers of the replica-set members.

Instead of providing a full list of hosts in the replica set, you can
specify one or more of the hosts in the replica set and instruct the {+driver-short+} to 
perform automatic discovery to find the others. To instruct the driver to perform
automatic discovery, perform one of the following actions:

- Specify the name of the replica set as the value of the ``replicaSet`` parameter.
- Specify ``false`` as the value of the ``directConnection`` parameter.
- Specify more than one host in the replica set.

The following example uses a sample connection URI to connect to the MongoDB replica
set ``myreplset``, which is running on port ``27017`` of three different hosts:

.. literalinclude:: /includes/connect/connection-targets.c
   :language: c
   :start-after: start-connect-replica
   :end-before: end-connect-replica
   :dedent:

The ``mongoc_client_new()`` function is *non-blocking*.
When you connect to a replica set, the constructor returns immediately while the
client uses background threads to connect to the replica set.
   
If you construct a ``mongoc_client_t`` object and immediately print the string representation
of its ``nodes`` attribute, the list might be empty while the client connects to
the replica-set members.

.. note:: Replica Set in Docker

   .. sharedinclude:: dbx/docker-replica-set.rst

API Documentation
-----------------

For more information about the objects and functions mentioned in this guide, see
the following API documentation: 

- `mongoc_client_t <https://mongoc.org/libmongoc/current/mongoc_client_t.html>`__
- `mongoc_uri_t <https://mongoc.org/libmongoc/current/mongoc_uri_t.html>`__
- `mongoc_server_api_t <https://mongoc.org/libmongoc/current/mongoc_server_api_t.html>`__    