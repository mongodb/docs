.. _fts-field-mappings:

=====================
Define Field Mappings
=====================

.. default-domain:: mongodb

.. meta::
   :keywords: index an array, supported data types, field types, index definition example, mapping example
   :description: Learn how to include specific fields in your search index or how to configure Atlas Search to automatically include all supported field types.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

When you create an |fts| index, you can specify the fields to index using the following methods: 

- **Dynamic mappings**: Enables {+fts+} to automatically index all fields of :ref:`supported types <bson-data-chart>`. 
- **Static mappings**: Enables you to specify which fields to index.

.. _bson-data-types-limitations:

Data Type Limitations
---------------------

By default, |fts| stops replicating changes for indexes larger than 2.1 billion
index objects, on a replica set or single shard, where each indexed document 
or nested ``embeddedDocument`` counts as a single object. This means that your 
index is queryable, but you might get stale results.

If you plan to index fields that might exceed 2.1 billion objects,
use ``numPartitions`` or :ref:`shard your cluster <create-cluster-sharding>`.

.. include:: /includes/fts/facts/fact-fts-field-name-restriction.rst

Syntax
------

.. tabs:: 
   
   .. tab:: Dynamic Mappings
      :tabid: dynamic-mappings-syntax

      To use dynamic mappings, set ``mappings.dynamic`` to ``true`` 
      in your index definition. You can also configure individual fields by specifying the 
      field name, :ref:`data type <bson-data-chart>`, and other configuration options
      for each field that you want to configure in ``mappings.fields``.
      You can specify the fields in any order. 
  
      .. literalinclude:: /includes/fts/syntax/fts-index-definition-syntax-dynamic.json 
         :language: json
         :linenos:
         :emphasize-lines: 3
         :copyable: true

   .. tab:: Static Mappings
      :tabid: static-mappings-syntax

      To use static mappings, set ``mappings.dynamic`` to ``false`` and specify 
      the field name, :ref:`data type <bson-data-chart>`, and other configuration options 
      for each field that you want to index in ``mappings.fields``. 
      You can specify the fields in any order. 

      If you omit the ``mappings.dynamic`` field, it defaults to ``false``. 

      .. literalinclude:: /includes/fts/syntax/fts-index-definition-syntax-static.json
         :language: json
         :linenos:
         :emphasize-lines: 3
         :copyable: true
   
   .. tab:: Index Field as Multiple Data Types
      :tabid: index-field-as-multiple-data-types-syntax

      You can index a field that contains polymorphic data as multiple types by specifying an array of field 
      definitions for the field, one for each data type. 

      .. code-block:: json
         :linenos:
         :emphasize-lines: 5-15
         :caption: Syntax
         :copyable: true

         {
           "mappings": { 
             "dynamic": <boolean>, 
             "fields": { 
               "<field-name>": [
                  {
                    "type": "<field-type>",
                    ...
                  },
                  {
                    "type": "<field-type>",
                    ...
                  },
                  ...
               ],
               ...  
             },
             ... 
           }
         }

.. _static-dynamic-mappings:

Static and Dynamic Mappings 
---------------------------

You can use static and dynamic mappings to specify whether |fts| must
automatically index all the dynamically indexable fields in your
collection.

.. _fts-dynamic-mappings: 

Dynamic Mappings 
~~~~~~~~~~~~~~~~

Use dynamic mapping to automatically index all fields of :ref:`supported types <bson-data-chart>` 
in your collection. We recommend using dynamic mappings only if your schema changes regularly or is unknown, or 
if you're experimenting with |fts|. Dynamically mapped indexes occupy more disk space
than statically mapped indexes and may be less performant.

When you dynamically index a field that contains polymorphic data, |fts| automatically indexes
the field as all of the dynamically indexable field types that correspond to the data.
If the field contains data of a type that |fts| doesn't index automatically, |fts| won't index that data.

|fts| dynamically indexes all fields in a document using the default settings for the detected data type.
|fts| also dynamically indexes all nested documents under the document, unless you explicitly override by setting ``dynamic`` to ``false``.

To learn which data types support dynamic indexing, see the :ref:`bson-data-types` section below. 

.. _fts-static-mappings: 

Static Mappings 
~~~~~~~~~~~~~~~

Use static mapping to configure index options for fields that
you *don't* want indexed dynamically, or to configure a single field 
independently from others in an index. When you use static mapping,
|fts| indexes only the fields that you specify in ``mappings.fields``. 

When you statically index a field containing polymorphic data, |fts| only indexes documents that
correspond to the mapping specified in the index definition for that field. 
|fts| doesn't index documents that don't match the data type specified in the
index definition for that field. 

To define the index for a nested field, you must define the mappings 
for each parent field of that nested field. You can't use the dot notation to statically index nested fields.
For examples, see the :ref:`index-config-example` or :ref:`fts-combined-mapping-example` below. 

.. _bson-data-chart:
.. _bson-data-types:

Data Types
----------

|fts| doesn't support the following :manual:`BSON data types 
</reference/bson-types/>`\:

- Decimal128
- JavaScript code with scope
- Max key
- Min key
- Regular Expression
- Timestamp

|fts| automatically stores fields of type :ref:`string <bson-data-types-string>` on ``mongot``.
You can store fields of all supported :ref:`data types <bson-data-chart>` on |fts| using the 
:ref:`fts-stored-source-definition` option in your index definition.
To learn more about ``mongot`` and |fts| node architecture, see :ref:`fts-deployment-options`. 

The following table enumerates the supported :manual:`BSON data types
</reference/bson-types/>` and the :ref:`{+fts+} field
types <bson-data-types>` that you can use to index the |bson| data types. 
The table also indicates whether the |fts| field type is automatically
included in an |fts| index when you enable :ref:`dynamic mappings
<static-dynamic-mappings>` and lists the 
:ref:`operators and collectors <operators-ref>` that you can use to
query the field value. 

.. list-table::
   :header-rows: 1

   * - BSON Type
     - Atlas Search Field Type
     - Dynamically Indexed
     - Operators and Collectors

   * - :ref:`Array <fts-array-ref>`
     - | :ref:`boolean <boolean-ref>`
       | :ref:`date <bson-data-types-date>` 
       | :ref:`number <bson-data-types-number>` 
       | :ref:`objectId <objectId-ref>` 
       | :ref:`string <bson-data-types-string>` 
       | :ref:`token <bson-data-types-token>`
     - ✓ :icon-fa5:`star`
     - Operators that support the data type in the array. :icon-fa5:`asterisk`

   * - Boolean
     - :ref:`boolean <boolean-ref>`
     - ✓
     - | :ref:`equals <equals-ref>`
       | :ref:`in-ref`

   * - Date
     - :ref:`date <bson-data-types-date>`
     - ✓ 
     - | :ref:`equals <equals-ref>`
       | :ref:`facet <fts-facet-ref>`
       | :ref:`in-ref`
       | :ref:`near <near-ref>`
       | :ref:`range <range-ref>`

   * - Date
     - :ref:`dateFacet <bson-data-types-date-facet>` :icon-fa5:`sun`
     - 
     - :ref:`facet <fts-facet-ref>`

   * - Double
     - :ref:`number <bson-data-types-number>`
     - ✓ 
     - | :ref:`equals <equals-ref>`
       | :ref:`in-ref`
       | :ref:`near <near-ref>`
       | :ref:`range <range-ref>`

   * - Double
     - :ref:`numberFacet <bson-data-types-number-facet>` :icon-fa5:`sun`
     - 
     - :ref:`facet <fts-facet-ref>`

   * - Double
     - :ref:`knnVector <fts-data-types-knn-vector>` :icon-fa5:`sun`
     - 
     - :ref:`knn-beta-ref` 

   * - :manual:`GeoJSON Object </reference/geojson/>`
     - :ref:`geo <bson-data-types-geo>`
     - 
     - | :ref:`geoShape <geoshape-ref>`
       | :ref:`geoWithin <geowithin-ref>`
       | :ref:`near <near-ref>` 

   * - 32-bit integer
     - :ref:`number <bson-data-types-number>`
     - ✓ 
     - | :ref:`equals <equals-ref>`
       | :ref:`in-ref`
       | :ref:`facet <fts-facet-ref>`
       | :ref:`near <near-ref>`
       | :ref:`range <range-ref>`

   * - 32-bit integer
     - :ref:`numberFacet <bson-data-types-number-facet>` :icon-fa5:`sun`
     - 
     - :ref:`facet <fts-facet-ref>`

   * - 64-bit integer
     - :ref:`number <bson-data-types-number>`
     - ✓ 
     - | :ref:`equals <equals-ref>`
       | :ref:`facet <fts-facet-ref>`
       | :ref:`in-ref`
       | :ref:`near <near-ref>`
       | :ref:`range <range-ref>`

   * - 64-bit integer
     - :ref:`numberFacet <bson-data-types-number-facet>` :icon-fa5:`sun`
     - 
     - :ref:`facet <fts-facet-ref>`

   * - Null
     - N/A :icon-fa5:`cog`
     - ✓
     - :ref:`equals <equals-ref>`

   * - Object
     - :ref:`document <bson-data-types-document>`
     - ✓ 
     - All Operators 

   * - Object
     - :ref:`embeddedDocument <bson-data-types-embedded-documents>` 
       (for array of objects)
     - 
     - :ref:`embeddedDocument <embedded-document-ref>`

   * - ObjectId
     - :ref:`objectId <objectId-ref>`
     - ✓
     - | :ref:`equals <equals-ref>`
       | :ref:`in-ref`
       | :ref:`range <range-ref>`

   * - String 
     - :ref:`string <bson-data-types-string>`
     - ✓ 
     - | :ref:`more-like-this-ref` 
       | :ref:`phrase-ref` 
       | :ref:`querystring-ref` 
       | :ref:`regex-ref` 
       | :ref:`span-ref`
       | :ref:`text-ref`
       | :ref:`wildcard-ref`

   * - String 
     - :ref:`stringFacet <bson-data-types-string-facet>`
     - 
     - :ref:`facet <fts-facet-ref>`

   * - String 
     - :ref:`autocomplete <bson-data-types-autocomplete>`
     - 
     - :ref:`autocomplete <autocomplete-ref>`

   * - String 
     - :ref:`token <bson-data-types-token>` 
     - 
     - | :ref:`equals <equals-ref>`
       | :ref:`in <in-ref>`
       | :ref:`range <range-ref>`

   * - :manual:`UUID/BSON Binary Subtype 4 </reference/bson-types/#binary-data>`
     - :ref:`uuid <bson-data-types-uuid>` 
     - ✓
     - | :ref:`equals <equals-ref>`
       | :ref:`in-ref`

:icon-fa5:`star` Some limitations apply. To learn more, see :ref:`fts-array-ref`. 

:icon-fa5:`asterisk` For ``string`` type, the :ref:`more-like-this-ref` and :ref:`querystring-ref` operators don't support an array of strings.

:icon-fa5:`cog` |fts| doesn't include a field type for indexing null values because |fts| automatically indexes null values for both statically and dynamically indexed fields.

:icon-fa5:`sun` Deprecated. 

.. note:: 

   You can store fields of all supported :ref:`data types 
   <bson-data-chart>` on |fts| using the ``storedSource`` :ref:`option 
   <index-definition-options>`.

.. _bson-data-types-indexing:

Index Field as Multiple Data Types 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To index a field as multiple types, define the types in the field 
definition array for the field.  

.. example:: 
   
   The following example shows the field definition for indexing a 
   field as multiple types.

   .. code-block:: json
      :copyable: false 
      :linenos:
      :emphasize-lines: 7-17

      {
        ...
        "mappings": { 
          "dynamic": <boolean>, 
          "fields": { 
            "<field-name>": [
              {
                "type": "<field-type>",
                ...
              },
              {
                "type": "<field-type>",
                ...
              },
              ...
            ],
            ...  
          },
          ... 
        }
      }

.. _index-config-example:

Examples
--------

.. _fts-static-mapping-example: 

Static Mapping Example 
~~~~~~~~~~~~~~~~~~~~~~

The following index definition example uses static mappings.

- The default index analyzer is :ref:`lucene.standard
  <ref-standard-analyzer>`.
- The default search analyzer is :ref:`lucene.standard
  <ref-standard-analyzer>`. You can change the search analyzer 
  if you want the query term to be parsed differently than how it 
  is stored in your |fts| index.
- The index specifies static field mappings (``dynamic``: 
  ``false``), which means fields that are not explicitly 
  mentioned are not indexed. So, the index definition includes:

  - The ``address`` field, which is of type ``document``. It has 
    two embedded sub-fields, ``city`` and ``state``.
    
    The ``city`` sub-field uses the :ref:`lucene.simple
    <ref-simple-analyzer>` analyzer by default for queries.
    It uses the ``ignoreAbove`` option to ignore any string of
    more than 255 bytes in length.
    
    The ``state`` sub-field uses the :ref:`lucene.english
    <ref-language-analyzers>` analyzer by default for queries.

  - The ``company`` field, which is of type ``string``. It uses 
    the :ref:`lucene.whitespace <ref-whitespace-analyzer>` 
    analyzer by default for queries. It has a ``multi`` analyzer 
    named ``mySecondaryAnalyzer`` which uses the 
    :ref:`lucene.french <ref-language-analyzers>` analyzer by 
    default for queries.

  - The ``employees`` field, which is an array of strings. It 
    uses the :ref:`lucene.standard <ref-keyword-analyzer>` 
    analyzer by default for queries. For indexing arrays, |fts| 
    only requires the data type of the array elements. You don't 
    have to specify that the data is contained in an array in the 
    index definition.

.. code-block:: json

   {
     "analyzer": "lucene.standard",
     "searchAnalyzer": "lucene.standard",
     "mappings": {
       "dynamic": false,
       "fields": {
         "address": {
           "type": "document",
           "fields": {
             "city": {
               "type": "string",
               "analyzer": "lucene.simple",
               "ignoreAbove": 255
             },
             "state": {
               "type": "string",
               "analyzer": "lucene.english"
             }
           }
         },
         "company": {
           "type": "string",
           "analyzer": "lucene.whitespace",
           "multi": {
             "mySecondaryAnalyzer": {
               "type": "string",
               "analyzer": "lucene.french"
             }
           }
         },
         "employees": {
           "type": "string", 
           "analyzer": "lucene.standard"
         }
       }
     }
   }

.. _fts-combined-mapping-example:

Combined Mapping Example 
~~~~~~~~~~~~~~~~~~~~~~~~

The following index definition example uses both static 
and dynamic mappings.

- The default index analyzer is :ref:`lucene.standard
  <ref-standard-analyzer>`.
- The default search analyzer is :ref:`lucene.standard
  <ref-standard-analyzer>`. You can change the search analyzer 
  if you want the query term to be parsed differently than how it 
  is stored in your |fts| index.
- The index specifies static field mappings (``dynamic``: 
  ``false``), which means fields that aren't explicitly 
  mentioned aren't indexed. So, the index definition includes:

  - The ``company`` field, which is of type ``string``. It uses 
    the :ref:`lucene.whitespace <ref-whitespace-analyzer>` 
    analyzer by default for queries. It has a ``multi`` analyzer 
    named ``mySecondaryAnalyzer`` which uses the 
    :ref:`lucene.french <ref-language-analyzers>` analyzer by 
    default for queries.
  - The ``employees`` field, which  is an array of strings. It 
    uses the :ref:`lucene.standard <ref-keyword-analyzer>` 
    analyzer by default for queries. 
  - The ``address`` field, which is of type ``document``. It has 
    two embedded sub-fields, ``city`` and ``state``. Instead of 
    explicitly mentioning each nested field in the document, the 
    index definition enables dynamic mapping for all the 
    sub-fields in the document. It uses the :ref:`lucene.standard 
    <ref-keyword-analyzer>` analyzer by default for queries.  

.. code-block:: json

   {
     "analyzer": "lucene.standard",
     "searchAnalyzer": "lucene.standard",
     "mappings": {
       "dynamic": false,
       "fields": {
         "company": {
           "type": "string",
           "analyzer": "lucene.whitespace",
           "multi": {
             "mySecondaryAnalyzer": {
               "type": "string",
               "analyzer": "lucene.french"
             }
           }
         },
         "employees": {
           "type": "string",
           "analyzer": "lucene.standard"
         },
         "address": {
           "type": "document",
           "dynamic": true
         }
       }
     }
   }

.. toctree::
   :titlesonly:

   array </atlas-search/field-types/array-type>
   autocomplete </atlas-search/field-types/autocomplete-type>
   boolean </atlas-search/field-types/boolean-type>
   date </atlas-search/field-types/date-type>
   dateFacet </atlas-search/field-types/date-facet-type>
   document </atlas-search/field-types/document-type>
   embeddedDocuments </atlas-search/field-types/embedded-documents-type>
   geo </atlas-search/field-types/geo-type>
   knnVector </atlas-search/field-types/knn-vector>
   number </atlas-search/field-types/number-type>
   numberFacet </atlas-search/field-types/number-facet-type>
   objectId </atlas-search/field-types/object-id-type>
   string </atlas-search/field-types/string-type>
   stringFacet </atlas-search/field-types/string-facet-type>
   token </atlas-search/field-types/token-type>
   uuid </atlas-search/field-types/uuid-type> 
