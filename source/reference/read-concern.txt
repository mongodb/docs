.. _read-concern:

============
Read Concern
============

.. versionadded:: 3.2

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. versionchanged:: 3.4
   Adds support for :readconcern:`"linearizable"` read concern level.

.. versionchanged:: 3.6
   Adds support for:

   - :readconcern:`"available"` read concern level.

   - :ref:`afterClusterTime` for :readconcern:`"local"` and
     :readconcern:`"majority"` read concern levels.

The ``readConcern`` query option for replica sets and replica set
shards determines which data to return from a query.

.. code-block:: javascript

   readConcern: { level: <"majority"|"local"|"linearizable"|"available"> }
   readConcern: { level: <"majority"|"local"> , afterClusterTime: <Timestamp> }

.. _read-concern-levels:

Read Concern Levels
-------------------

The following read concern levels are available:

.. list-table::
   :header-rows: 1
   :widths: 10 90

   * - ``level``
     - Description

   * - .. readconcern:: "local"

     - Default for reads against primary if ``level`` is unspecified
       and for reads against secondaries if ``level`` is unspecified but
       :ref:`afterClusterTime` is specified.

       The query returns the instance's most recent data. Provides no
       guarantee that the data has been written to a majority of the
       replica set members (i.e. may be rolled back).

   * - .. readconcern:: "available"

     - Default for reads against secondaries when
       :ref:`afterClusterTime` and ``level`` are unspecified. 

       The query returns the instance's most recent data. Provides no
       guarantee that the data has been written to a majority of the
       replica set members (i.e. may be rolled back).

       For unsharded collections (including collections in a standalone
       deployment or a replica set deployment), :readconcern:`"local"`
       and :readconcern:`"available"` read concerns behave identically.

       For a sharded cluster, :readconcern:`"available"` read concern
       provides greater tolerance for partitions since it does not wait
       to ensure consistency guarantees. However, a query with
       :readconcern:`"available"` read concern may return orphan
       documents if the shard is undergoing chunk migrations since the
       :readconcern:`"available"` read concern, unlike
       :readconcern:`"local"` read concern, does not contact the
       shard's primary nor the config servers for updated
       :doc:`metadata </core/sharded-cluster-config-servers>`.

       .. seealso:: :parameter:`orphanCleanupDelaySecs`

       .. versionadded:: 3.6

   * - .. readconcern:: "majority"

     - The query returns the instance's most recent data acknowledged
       as having been written to a majority of members in the replica
       set.

       .. include:: /includes/fact-enable-majority-readConcern.rst

   * - .. readconcern:: "linearizable"

     - The query returns data that reflects all successful 
       majority-acknowledged writes that completed prior to the start
       of the read operation. The query may wait for concurrently
       executing writes to propagate to a majority of replica
       set members before returning results.

       If a majority of your replica set members crash and restart after
       the read operation, documents returned by the read operation are
       durable if :rsconf:`writeConcernMajorityJournalDefault` is set to
       the default state of ``true``.

       .. include:: /includes/extracts/no-journaling-rollback.rst

       You can specify linearizable read concern for read operations on
       the :replstate:`primary <PRIMARY>` only.

       Linearizable read concern guarantees only apply if read
       operations specify a query filter that uniquely identifies a
       single document.

       .. tip::

          Always use ``maxTimeMS`` with linearizable read concern in
          case a majority of data bearing members are unavailable.
          ``maxTimeMS`` ensures that the operation does not block
          indefinitely and instead ensures that the operation returns
          an error if the read concern cannot be fulfilled.

       Linearizable read concern is available for both MMAPv1 and
       WiredTiger. See :ref:`read-concern-storage-engine-drivers`.

       .. versionadded:: 3.4

.. include:: /includes/fact-readConcern-most-recent-data-in-node.rst

.. _afterClusterTime:

``afterClusterTime``
--------------------

.. versionadded:: 3.6

MongoDB introduces the ``afterClusterTime`` option that can be set by
the drivers.

Read operations with a specified ``afterClusterTime``
return data that meet both the :ref:`read concern level <read-concern-levels>` 
requirement and the specified  ``afterClusterTime`` requirement.

.. important::

   Do not manually set the ``afterClusterTime``. MongoDB drivers set
   this value automatically for operations associated with
   causally consistent sessions.

Causally consistent sessions use the ``afterClusterTime`` value to
provide causal consistency.

``afterClusterTime`` is available for :readconcern:`"local"` (default)
and :readconcern:`"majority"` read concern levels:

.. code-block:: javascript

   readConcern: { level: <"majority"|"local"> , afterClusterTime: <Timestamp> }

For read operations not associated with causally consistent sessions,
i.e. where the ``afterClusterTime`` is unset, reads against secondary members
have the default read concern level: :readconcern:`"available"`.

.. _read-concern-storage-engine-drivers:

Storage Engine and Drivers Support
----------------------------------

.. list-table::
   :header-rows: 1
   :widths: 50 30 20

   * - Read Concern
     - WiredTiger
     - MMAPv1
     
   * - :readconcern:`"local"`
     - |checkmark|
     - |checkmark|

   * - :readconcern:`"majority"`
     - |checkmark|
     -

   * - :readconcern:`"linearizable"`
     - |checkmark|
     - |checkmark|

.. tip::

   The :dbcommand:`serverStatus` command returns the
   :serverstatus:`storageEngine.supportsCommittedReads` field which
   indicates whether the storage engine supports ``"majority"`` read
   concern.

MongoDB drivers updated for 3.2 and later versions support specifying
a read concern option.

.. include:: /includes/unicode-checkmark.rst

``readConcern`` Option
----------------------

.. versionchanged:: 3.6

Use the ``readConcern`` option to specify the read concern level [#after-cluster-time]_ :

.. code-block:: javascript

   readConcern: { level: <"majority"|"local"|"linearizable"> }

The ``readConcern`` option is available for the following operations:

- :dbcommand:`find` command

- :dbcommand:`aggregate` command and the
  :method:`db.collection.aggregate()` method

- :dbcommand:`distinct` command

- :dbcommand:`count` command

- :dbcommand:`parallelCollectionScan` command

- :dbcommand:`geoNear` command

- :dbcommand:`geoSearch` command

To specify the read concern level for the :binary:`~bin.mongo` shell method
:method:`db.collection.find()`, use the :method:`cursor.readConcern()`
method.

.. [#after-cluster-time]

   For :ref:`causally consistent sessions <causal-consistency>`,
   MongoDB drivers automatically specifies the :ref:`afterClusterTime`
   value in the read concern.

Considerations
--------------

Read Your Own Writes
~~~~~~~~~~~~~~~~~~~~~

.. versionchanged:: 3.6

.. include:: /includes/fact-read-own-writes.rst

Real Time Order
~~~~~~~~~~~~~~~

Combined with :writeconcern:`"majority"` write concern,
:readconcern:`"linearizable"` read concern enables multiple threads to
perform reads and writes on a single document as if a single thread
performed these operations in real time; that is, the corresponding
schedule for these reads and writes is considered linearizable.

Performance Comparisons
~~~~~~~~~~~~~~~~~~~~~~~

Unlike :readconcern:`"majority"`, :readconcern:`"linearizable"` read
concern confirms with secondary members that the read operation is
reading from a primary that is capable of confirming writes with
:writeconcern:`{ w: "majority" } <"majority">` write concern.
[#edge-cases-2-primaries]_ As such, reads with linearizable read
concern may be significantly slower than reads with
:readconcern:`"majority"` or :readconcern:`"local"` read concerns.

Always use ``maxTimeMS`` with linearizable read concern in case a
majority of data bearing members are unavailable. ``maxTimeMS`` ensures
that the operation does not block indefinitely and instead ensures that
the operation returns an error if the read concern cannot be fulfilled.

For example:

.. code-block:: javascript

   db.restaurants.find( { _id: 5 } ).readConcern("linearizable").maxTimeMS(10000)

   db.runCommand( {
        find: "restaurants",
        filter: { _id: 5 },
        readConcern: { level: "linearizable" },
        maxTimeMS: 10000
   } )

.. [#edge-cases-2-primaries]

   .. include:: /includes/footnote-two-primaries-edge-cases.rst
