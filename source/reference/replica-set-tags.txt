.. _replica-set-tags:

=====================
Tag Your Replica Sets
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/fact-atlas-free-tier-limits.rst

|service| clusters are configured with pre-defined
:manual:`replica set tags </tutorial/configure-replica-set-tag-sets/>`
for different member types in the cluster. You can utilize these
pre-defined replica set tags to direct queries from specific
applications to desired node types and regions. These tags sets allow
you to customize :manual:`read preferences </core/read-preference/>`
for a replica set, thus improving cluster performance and reliability.

To use replica set tags in your connection string and direct queries to
desired nodes, set the tag in your the ``readPreferenceTags`` connection
string option. For examples, see :ref:`repl-set-tag-examples`.

Replica Set Tag Descriptions
----------------------------

The following table describes the pre-defined replica set tags
|service| implements.

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 15 40 40

   * - Tag Name
     - Description
     - Example

   * - Provider
     - Cloud provider on which the node is provisioned.

       Possible values are:

       - ``AWS``
       - ``GCP``
       - ``AZURE``

     - ``{"provider" : "AWS"}``

   * - Region
     - Cloud region in which the node resides.

       For a complete list of possible ``region`` values for each cloud
       provider, refer to the cloud provider's reference page:

       - :ref:`AWS <amazon-aws>`

       - :ref:`GCP <google-gcp>`

       - :ref:`Azure <microsoft-azure>`

     - ``{"region" : "US_EAST_2"}``

   * - Node Type
     - Node type.

       Possible values are:

       - ``ELECTABLE``

       - ``READ_ONLY``

       - ``ANALYTICS``

       For more information, see :ref:`repl-set-node-types`.

     - ``{"nodeType" : "ANALYTICS"}``
   
   * - Workload Type
     - Tag to distribute your workload evenly among your non-analytics 
       (electable or read-only) nodes.

       Possible values are:

       - ``OPERATIONAL``

     - ``{"workloadType" : "OPERATIONAL"}``    

.. _repl-set-node-types:

Node Types
~~~~~~~~~~

The following table describes the possible ``nodeType`` values in your
replica set tags.

.. list-table::
   :widths: 10 40
   :header-rows: 1
   :stub-columns: 1

   * - Node Type
     - Description

   * - ``ELECTABLE``
     - Read from nodes eligible to be elected :term:`primary`.
       ``ELECTABLE`` nodes correspond to
       :guilabel:`Electable nodes for high availability` in the cluster
       creation UI.

   * - ``READ_ONLY``
     - Read from read-only nodes. ``READ_ONLY`` nodes correspond to
       :guilabel:`Read-only nodes for optimal local reads` in the
       cluster creation UI. 

   * - ``ANALYTICS``
     - Read from read-only :term:`analytics nodes <analytics node>`.
       ``ANALYTICS`` nodes correspond to
       :guilabel:`Analytics nodes for workload isolation` in the cluster
       creation UI.

To learn how to configure electable, read-only, and analytics nodes for
your cluster, see :ref:`create-cluster-multi-region`.

.. seealso::

   For details on how these replica set tags correspond to
   |bic| read preferences, refer to the |bic-short| cluster options
   section of the :ref:`Create a Cluster Page <bic-read-preferences>`.

.. _repl-set-tag-examples:

Use Cases and Examples
----------------------

Consider the following scenarios where utilizing pre-defined replica set
tags would be beneficial, and see the corresponding sample connection
strings.

.. note::

   Each of the following example connection strings employ the
   ``readConcernLevel=local`` connection string option. Specifying
   a :manual:`read concern of local </reference/read-concern-local/>`
   ensures that secondary reads on sharded clusters do not
   return :term:`orphaned documents <orphaned document>`. You do not
   need to specify this option when connecting to non-sharded replica sets.

Use Analytics Nodes to Isolate Workloads
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If an application performs complex or long-running operations, such as
:abbr:`ETL (Extract Transform Load)` or reporting, you may want to
isolate the application's queries from the rest of your operational
workload by connecting exclusively to analytics nodes.

Consider the following connection string:

.. code-block:: none

   mongodb+srv://<USERNAME>:<PASSWORD>@foo-q8x1v.mycluster.com/test?readPreference=secondary&readPreferenceTags=nodeType:ANALYTICS&readConcernLevel=local

The connection string options appear in the following order:

- ``readPreference=secondary``
- ``readPreferenceTags=nodeType:ANALYTICS``
- ``readConcernLevel=local``

The :manual:`readPreference </reference/read-preference>` option of
``secondary`` and :manual:`readPreferenceTag
</core/read-preference/#tag-sets>` option of
``{ nodeType : ANALYTICS }`` limit the application connections to
analytic nodes.

Isolate Normal Application Secondary Reads from Analytics Nodes
```````````````````````````````````````````````````````````````

You may want to isolate regular application reads from the workload on 
analytics nodes.

Consider the following connection string:

.. code-block:: none

   mongodb+srv://<USERNAME>:<PASSWORD>@foo-q8x1v.mycluster.com/test?readPreference=secondary&readPreferenceTags=workloadType:OPERATIONAL&readConcernLevel=local

The connection string options appear in the following order:

- ``readPreference=secondary``
- ``readPreferenceTags=workloadType:OPERATIONAL``
- ``readConcernLevel=local``

The specified options prevent your application from reading from
analytics nodes. The application must read from ``operational``, or
non-analytics, nodes.

Target Local Reads for Geographically-Distributed Applications
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can utilize |service| replica set tags to target local reads to
specific regions for globally distributed applications. Prior to the
introduction of these tags, local reads for globally distributed
applications relied on correctly calculating the
:manual:`nearest </reference/read-preference/#nearest>` read
preference. With |service| replica set tags, specifying appropriate
geographic :manual:`tags </core/read-preference/#tag-sets>` in
combination with a read preference mode of ``nearest`` provides more
consistent behavior.

The following connection string prioritizes connections to the
|aws| ``US_EAST_1`` region, followed by the ``US_EAST_2`` region:

.. code-block:: none

   mongodb+srv://<USERNAME>:<PASSWORD>@foo-q8x1v.mycluster.com/test?readPreference=nearest&readPreferenceTags=provider:AWS,region:US_EAST_1&readPreferenceTags=provider:AWS,region:US_EAST_2&readPreferenceTags=&readConcernLevel=local

The connection string options appear in the following order:

- ``readPreference=nearest``
- ``readPreferenceTags=provider:AWS,region:US_EAST_1``
- ``readPreferenceTags=provider:AWS,region:US_EAST_2``
- ``readPreferenceTags=``
- ``readConcernLevel=local``

|service| considers each read preference tag in the order you specify
them. After |service| matches a node to a tag, it finds all eligible
nodes that match that tag. |service| then ignores any following
``readPreferenceTags``. 

In this example, the application first tries to connect to a node in
|aws| region ``US_EAST_1``. If there no nodes in that region are
available, the application tries to connect to a node in |aws| region
``US_EAST_2``.

The final (empty) ``readPreferenceTags=`` provides a fallback option.
With an empty ``readPreferenceTags=`` option, the application can
connect to any available node regardless of provider or region.

These options help ensure that the application connects to the closest
geographic region for reduced latency and improved performance.

.. seealso::

   For additional information and use cases for various read
   preferences, refer to the
   :manual:`Read Preference page in the MongoDB Manual
   </reference/read-preference/#use-cases>`.

.. _built-in-custom-wc:

Built-In Custom Write Concerns
------------------------------

|service| provides built-in custom write concerns for multi-region
clusters. Write concern describes the level of acknowledgment requested
from MongoDB for write operations to a cluster.

|service|'s built-in custom write concerns can help improve
data consistency by ensuring your operations are propagated to a set
number of regions to succeed.

To use a custom write concern, specify the
write concern in the :manual:`write concern document
</reference/write-concern/>` of your operation.

|service| provides the following custom write concerns for multi-region
clusters:

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 30 30 30

   * - Write Concern
     - Tags
     - Description
   * - ``twoRegions``
     - ``{ region: 2 }``
     - Write operations must be acknowledged by at least two regions in
       your cluster.
   * - ``threeRegions``
     - ``{ region: 3 }``
     - Write operations must be acknowledged by at least three regions
       in your cluster.
   * - ``twoProviders``
     - ``{ provider: 2 }``
     - Write operations must be acknowledged by at least two regions in 
       your cluster with distinct cloud providers.

.. example::

   Consider a multi-region cluster across three regions:
   **us-east-1**, **us-east-2**, and **us-west-1**. You want to have
   write operations propagate to all three regions in your cluster
   before |service| accepts them.

   The following operation inserts a document and requires that the
   operation be propagated to all three regions due to the
   ``{ w: "threeRegions" }`` write concern object:

   .. code-block:: javascript

      db.employees.insertOne(
        { name: "Bob Smith", company: "MongoDB" },
        { writeConcern: { w: "threeRegions" } }
      )
