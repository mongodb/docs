======================
$toLower (aggregation)
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $toLower

   Converts a string to lowercase, returning the result.

   :expression:`$toLower` has the following syntax:

   .. code-block:: javascript

      { $toLower: <expression> }

   The argument can be any :ref:`expression <aggregation-expressions>`
   as long as it resolves to a string. For more information on
   expressions, see :ref:`aggregation-expressions`.

   If the argument resolves to null, :expression:`$toLower` returns an
   empty string ``""``.

Behavior
--------

.. |exp-has| replace:: :expression:`$toLower` only has

.. include:: /includes/intro-aggregation-string.rst

Example
-------

Consider a ``inventory`` collection with the following documents:

.. code-block:: javascript

   { "_id" : 1, "item" : "ABC1", quarter: "13Q1", "description" : "PRODUCT 1" }
   { "_id" : 2, "item" : "abc2", quarter: "13Q4", "description" : "Product 2" }
   { "_id" : 3, "item" : "xyz1", quarter: "14Q2", "description" : null }

The following operation uses the :expression:`$toLower` operator return
lowercase ``item`` and lowercase ``description`` value:

.. code-block:: javascript

   db.inventory.aggregate(
      [
        {
          $project:
            {
              item: { $toLower: "$item" },
              description: { $toLower: "$description" }
            }
        }
      ]
   )

The operation returns the following results:

.. code-block:: javascript

   { "_id" : 1, "item" : "abc1", "description" : "product 1" }
   { "_id" : 2, "item" : "abc2", "description" : "product 2" }
   { "_id" : 3, "item" : "xyz1", "description" : "" }
