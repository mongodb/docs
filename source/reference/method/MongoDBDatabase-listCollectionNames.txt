========================================
MongoDB\\Database::listCollectionNames()
========================================

.. versionadded:: 1.7


.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. phpmethod:: MongoDB\Database::listCollectionNames()

   Returns names for all collections in this database.

   .. code-block:: php

      function listCollectionNames(array $options = []): Iterator

Parameters
----------

``$options`` : array
  An array specifying the desired options.

  .. list-table::
     :header-rows: 1
     :widths: 20 20 80

     * - Name
       - Type
       - Description

     * - authorizedCollections
       - boolean
       - A flag that determines which collections are returned based on the user
         privileges when access control is enabled. For more information, see
         the :manual:`listCollections </reference/command/listCollections>`
         command documentation.

         .. versionadded:: 1.12

     * - comment
       - mixed
       - .. include:: /includes/extracts/common-option-comment.rst

         .. include:: /includes/extracts/option-requires-6.0.rst

         .. versionadded:: 1.13

     * - filter
       - array|object
       - A query expression to filter the list of collections.

         You can specify a query expression for collection fields (e.g.
         ``name``, ``options``).

     * - maxTimeMS
       - integer
       - .. include:: /includes/extracts/common-option-maxTimeMS.rst

     * - session
       - :php:`MongoDB\Driver\Session <class.mongodb-driver-session>`
       - .. include:: /includes/extracts/common-option-session.rst

Return Values
-------------

An :php:`Iterator <manual/en/class.iterator.php>`, which provides the
name of each collection in the database.

Example
-------

The following example lists all of the collections in the ``test`` database:

.. code-block:: php

   <?php

   $database = (new MongoDB\Client)->test;

   foreach ($database->listCollectionNames() as $collectionName) {
       var_dump($collectionName);
   }

The output would then resemble:

.. code-block:: none

   string(11) "restaurants"
   string(5) "users"
   string(6) "restos"

The following example lists all collections whose name starts with ``"rest"``
in the ``test`` database:

.. code-block:: php

   <?php

   $database = (new MongoDB\Client)->test;

   $collections = $database->listCollectionNames([
       'filter' => [
           'name' => new MongoDB\BSON\Regex('^rest.*'),
       ],
   ]);

   foreach ($collections as $collectionName) {
       var_dump($collectionName);
   }

The output would then resemble:

.. code-block:: none

   string(11) "restaurants"
   string(6) "restos"

.. note::

   When enumerating collection names, a filter expression can only filter based
   on a collection's name and type. No other fields are available.

See Also
--------

- :phpmethod:`MongoDB\Database::listCollections()`
- :manual:`listCollections </reference/command/listCollections>` command
  reference in the MongoDB manual
- `Enumerating Collections
  <https://github.com/mongodb/specifications/blob/master/source/enumerate-collections/enumerate-collections.md>`_
  specification
