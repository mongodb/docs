ref: agg-stages-db.collection.aggregate
content: |

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Stage
        - Description

      * - :pipeline:`$addFields`

        - Adds new fields to documents. Similar to
          :pipeline:`$project`, :pipeline:`$addFields` reshapes each
          document in the stream; specifically, by adding new fields to
          output documents that contain both the existing fields
          from the input documents and the newly added fields.

          :pipeline:`$set` is an alias for :pipeline:`$addFields`.

      * - :pipeline:`$bucket`

        - Categorizes incoming documents into groups, called buckets,
          based on a specified expression and bucket boundaries.

      * - :pipeline:`$bucketAuto`

        - Categorizes incoming documents into a specific number of
          groups, called buckets, based on a specified expression.
          Bucket boundaries are automatically determined in an attempt
          to evenly distribute the documents into the specified number
          of buckets.

      * - :pipeline:`$collStats`

        - Returns statistics regarding a collection or view.

      * - :pipeline:`$count`

        - Returns a count of the number of documents at this stage of
          the aggregation pipeline.

          Distinct from the :group:`$count` aggregation accumulator.

      * - :pipeline:`$facet`

        - Processes multiple :ref:`aggregation pipelines
          <aggregation-pipeline>` within a single stage on the same set
          of input documents. Enables the creation of multi-faceted
          aggregations capable of characterizing data across multiple
          dimensions, or facets, in a single stage.

      * - :pipeline:`$geoNear`

        - .. include:: /includes/extracts/geoNear-stage-toc-description.rst

      * - :pipeline:`$graphLookup`

        - Performs a recursive search on a collection. To each output
          document, adds a new array field that contains the traversal
          results of the recursive search for that document.

      * - :pipeline:`$group`

        - Groups input documents by a specified identifier expression
          and applies the accumulator expression(s), if specified, to
          each group. Consumes all input documents and outputs one
          document per each distinct group. The output documents only
          contain the identifier field and, if specified, accumulated
          fields.

      * - :pipeline:`$indexStats`

        - Returns statistics regarding the use of each index for the
          collection.

      * - :pipeline:`$limit`

        - Passes the first *n* documents unmodified to the pipeline
          where *n* is the specified limit. For each input document,
          outputs either one document (for the first *n* documents) or
          zero documents (after the first *n* documents).

      * - :pipeline:`$listSessions`

        - Lists all sessions that have been active long enough to
          propagate to the ``system.sessions`` collection.

      * - :pipeline:`$lookup`

        - Performs a left outer join to another collection in the
          *same* database to filter in documents from the "joined"
          collection for processing.

      * - :pipeline:`$match`

        - Filters the document stream to allow only matching documents
          to pass unmodified into the next pipeline stage.
          :pipeline:`$match` uses standard MongoDB queries. For each
          input document, outputs either one document (a match) or zero
          documents (no match).

      * - :pipeline:`$merge`

        - Writes the resulting documents of the aggregation pipeline to
          a collection. The stage can incorporate (insert new
          documents, merge documents, replace documents, keep existing
          documents, fail the operation, process documents with a
          custom update pipeline) the results into an output
          collection. To use the :pipeline:`$merge` stage, it must be
          the last stage in the pipeline.
          
          .. versionadded:: 4.2

      * - :pipeline:`$out`

        - Writes the resulting documents of the aggregation pipeline to
          a collection. To use the :pipeline:`$out` stage, it must be
          the last stage in the pipeline.

      * - :pipeline:`$planCacheStats`

        - Returns :doc:`plan cache </core/query-plans>` information for a
          collection.
         
      * - :pipeline:`$project`

        - Reshapes each document in the stream, such as by adding new
          fields or removing existing fields. For each input document,
          outputs one document.
          
          See also :pipeline:`$unset` for removing existing fields.

      * - :pipeline:`$redact`

        - Reshapes each document in the stream by restricting the
          content for each document based on information stored in the
          documents themselves. Incorporates the functionality of
          :pipeline:`$project` and :pipeline:`$match`. Can be used to
          implement field level redaction. For each input document,
          outputs either one or zero documents.

      * - :pipeline:`$replaceRoot`

        - Replaces a document with the specified embedded document. The
          operation replaces all existing fields in the input document,
          including the ``_id`` field. Specify a document embedded in
          the input document to promote the embedded document to the
          top level.

          :pipeline:`$replaceWith` is an alias for
          :pipeline:`$replaceRoot` stage.

      * - :pipeline:`$replaceWith`

        - Replaces a document with the specified embedded document. The
          operation replaces all existing fields in the input document,
          including the ``_id`` field. Specify a document embedded in
          the input document to promote the embedded document to the
          top level.

          :pipeline:`$replaceWith` is an alias for
          :pipeline:`$replaceRoot` stage.

      * - :pipeline:`$sample`

        - Randomly selects the specified number of documents from its
          input.

      * - :pipeline:`$search`

        - Performs a full-text search of the field or fields in an 
          :atlas:`Atlas </reference/atlas-search/query-syntax/>` 
          collection.

          .. note:: 

             ``$search`` is only available for MongoDB Atlas clusters, 
             and is not available for self-managed deployments.

      * - :pipeline:`$set`

        - Adds new fields to documents. Similar to
          :pipeline:`$project`, :pipeline:`$set` reshapes each
          document in the stream; specifically, by adding new fields to
          output documents that contain both the existing fields
          from the input documents and the newly added fields.
          
          :pipeline:`$set` is an alias for :pipeline:`$addFields` stage.

      * - :pipeline:`$setWindowFields`

        - Groups documents into windows and applies one or more
          operators to the documents in each window.
   
          .. versionadded:: 5.0

      * - :pipeline:`$skip`

        - Skips the first *n* documents where *n* is the specified skip
          number and passes the remaining documents unmodified to the
          pipeline. For each input document, outputs either zero
          documents (for the first *n* documents) or one document (if
          after the first *n* documents).

      * - :pipeline:`$sort`

        - Reorders the document stream by a specified sort key. Only
          the order changes; the documents remain unmodified. For each
          input document, outputs one document.

      * - :pipeline:`$sortByCount`

        - Groups incoming documents based on the value of a specified
          expression, then computes the count of documents in each
          distinct group.

      * - :pipeline:`$unionWith`

        - Performs a union of two collections; i.e. combines
          pipeline results from two collections into a single
          result set.

          .. versionadded:: 4.4

      * - :pipeline:`$unset`

        - Removes/excludes fields from documents.

          :pipeline:`$unset` is an alias for :pipeline:`$project` stage
          that removes fields.

      * - :pipeline:`$unwind`

        - Deconstructs an array field from the input documents to
          output a document for *each* element. Each output document
          replaces the array with an element value. For each input
          document, outputs *n* documents where *n* is the number of
          array elements and can be zero for an empty array.

---
ref: agg-stages-db.aggregate
content: |

   The following stages use the :method:`db.aggregate()` method and not
   the :method:`db.collection.aggregate()` method.

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Stage
        - Description

      * - :pipeline:`$currentOp`
      
        - Returns information on active and/or dormant operations for
          the MongoDB deployment.

      * - :pipeline:`$listLocalSessions`

        - Lists all active sessions recently in use on the currently
          connected :binary:`~bin.mongos` or :binary:`~bin.mongod`
          instance. These sessions may have not yet propagated to the
          ``system.sessions`` collection.
...
