.. index:: balancing; configure

==========================================================
Configure Behavior of Balancer Process in Sharded Clusters
==========================================================

.. default-domain:: mongodb

The balancer is a process that runs on *one* of the :program:`mongos`
instances in a cluster and ensures that :term:`chunks <chunk>` are
evenly distributed throughout a sharded cluster. In most deployments,
the default balancer configuration is sufficient for normal
operation. However, administrators might need to modify balancer
behavior depending on application or operational requirements. If you
encounter a situation where you need to modify the behavior of the
balancer, use the procedures described in this document.

For conceptual information about the balancer, see
:ref:`sharding-balancing` and :ref:`sharding-balancing-internals`.

.. _sharded-cluster-config-balancing-window:

Schedule a Window of Time for Balancing to Occur
------------------------------------------------

You can schedule a window of time during which the balancer can
migrate chunks, as described in the following procedures:

- :ref:`sharding-schedule-balancing-window`

- :ref:`sharding-balancing-remove-window`.

The :program:`mongos` instances user their own local timezones to when
respecting balancer window.

.. _sharded-cluster-config-default-chunk-size:

Configure Default Chunk Size
----------------------------

The default chunk size for a sharded cluster is 64 megabytes. In most
situations, the default size is appropriate for splitting and migrating
chunks. For information on how chunk size affects deployments, see
details, see :ref:`sharding-chunk-size`.

Changing the default chunk size affects chunks that are processes during
migrations and auto-splits but does not retroactively affect all chunks.

To configure default chunk size, see :doc:`modify-chunk-size-in-sharded-cluster`.

.. _sharded-cluster-config-max-shard-size:

Change the Maximum Storage Size for a Given Shard
-------------------------------------------------

The ``maxSize`` field in the :data:`~config.shards` collection in the
:ref:`config database <config-database>` sets the maximum size for a
shard, allowing you to control whether the balancer will migrate chunks
to a shard. If :data:`~serverStatus.mem.mapped` size [#local-limitation]_ is above a shard's
``maxSize``, the balancer will not move chunks to the shard. Also, the
balancer will not move chunks off an overloaded shard. This must happen
manually. The ``maxSize`` value only affects the balancer's selection of
destination shards.

By default, ``maxSize`` is not specified, allowing shards to consume the
total amount of available space on their machines if necessary.

You can set ``maxSize`` both when adding a shard and once a shard is
running.

To set ``maxSize`` when adding a shard, set the :dbcommand:`addShard`
command's ``maxSize`` parameter to the maximum size in megabytes. For
example, the following command run in the :program:`mongo` shell adds a
shard with a maximum size of 125 megabytes:

.. code-block:: javascript

   db.runCommand( { addshard : "example.net:34008", maxSize : 125 } )

To set ``maxSize`` on an existing shard, insert or update the
``maxSize`` field in the :data:`~config.shards` collection in the
:ref:`config database <config-database>`. Set the ``maxSize`` in
megabytes.

.. example::

   Assume you have the following shard without a ``maxSize`` field:

   .. code-block:: javascript

      { "_id" : "shard0000", "host" : "example.net:34001" }

   Run the following sequence of commands in the :program:`mongo` shell
   to insert a ``maxSize`` of 125 megabytes:

   .. code-block:: javascript

      use config
      db.shards.update( { _id : "shard0000" }, { $set : { maxSize : 125 } } )

   To later increase the ``maxSize`` setting to 250 megabytes, run the
   following:

   .. code-block:: javascript

      use config
      db.shards.update( { _id : "shard0000" }, { $set : { maxSize : 250 } } )

.. [#local-limitation] This value includes the mapped size of all data
   files including the``local`` and ``admin`` databases. Account for
   this when setting ``maxSize``.

.. index:: balancing; secondary throttle
.. index:: secondary throttle
.. _sharded-cluster-config-secondary-throttle:

Require Replication before Chunk Migration (Secondary Throttle)
---------------------------------------------------------------

.. versionadded:: 2.2.1
   ``_secondaryThrottle`` became an option to the balancer and to the
   :dbcommand:`moveChunk` command. ``_secondaryThrottle`` requires
   the balancer to have a ``{ w: majority }`` write concern on each
   delete and insert operation. This causes the balancer to wait for
   each chunk migration to replicate to a majority of secondaries
   before initiating a new chunk migration.

Before 2.2.1, chunk migration writes did not wait to replicate to
secondaries before starting the next chunk migration. Replication to a
majority of members occurred only after the balancer wrote all relevant
chunks to the destination shard, but before it deleted those chunks
from the source shard. This had the effect of creating a bottleneck
at the end of the migration operation. A ``_secondaryThrottle``
value of ``true`` smoothes out the load over all chunk migrations,
eliminating the bottleneck.

.. versionchanged:: 2.4
   ``_secondaryThrottle`` became the default mode for all balancer and
   :dbcommand:`moveChunk` operations, though ``_secondaryThrottle``
   is not required by the balancer. To revert to previous behavior,
   set ``_secondaryThrottle`` to ``false``.

.. BACKGROUND NOTES
   Specifically, secondary throttle affects the first and fourth
   phases (informal phases) of chunk migration. Migration can happen during
   the second and third phases (the "steady state"):
   1) copies the documents in the chunk from shardA to shardB
   2) continues to copy over ongoing changes that occurred during the initial copy step,
      as well as current changes to that chunk range
   3) Stop writes, allow shardB to get final changes, commit migration to config server
   4) cleanup now-inactive data on shardA in chunk range (once all cursors are done)

Run the following commands from a :program:`mongo` shell that is
connected to a :program:`mongos` instance to enable or disable
``_secondaryThrottle`` directly in the :data:`~config.settings`
collection of the :ref:`config database <config-database>`:

.. code-block:: javascript

   use config
   db.settings.update( { "_id" : "balancer" } , { $set : { "_secondaryThrottle" : true } } , { upsert : true } )

When changing the value of ``_secondaryThrottle``, the balancer
may not immediately require a ``{ w: majority }`` write concern on
delete and insert operations. To ensure that ``_secondaryThrottle``
takes effect immediately, stop the balancer and restart it with the
selected value of ``_secondaryThrottle``.

