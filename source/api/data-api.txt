
==============================================
Read and Write with the {+data-api+} (Preview)
==============================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   
   {+data-api+} Resources </api/data-api-resources>

Introduction
------------

The MongoDB {+data-api+} lets you read and modify data in MongoDB Atlas
over HTTP. You don't need any additional MongoDB drivers, libraries, or
connection strings; just a standard HTTP client and a valid API key.

The {+data-api+}'s endpoints expose actions that are similar to the
standard query methods available in MongoDB drivers. You can call them
to create, read, update, delete, or aggregate documents in your cluster.

Get Started
-----------

Follow the steps below to set up the {+data-api+} and send your first requests.

.. _enable-data-api:

1. Enable the {+data-api+}
~~~~~~~~~~~~~~~~~~~~~~~~~~

The {+data-api+} is disabled by default. To use the API, you need to
turn it on in the {+atlas-ui+} for one or more clusters.

Click :guilabel:`{+data-api+}` in the left navigation menu. On the
following screen, select one or more clusters that you want to enable
the API on from the dropdown menu and then click :guilabel:`Enable the
{+data-api+}`.

.. note::
   
   You can enable or disable the {+data-api+} for a cluster at any time
   from the :guilabel:`{+data-api+}` screen.

.. _create-data-api-key:

2. Create a {+data-api+} Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The {+data-api+} uses project-level API keys to manage access and
prevent unauthorized requests. Every request must include a valid
{+data-api+} key.

A {+data-api+} key grants full read and write access every collection in
a cluster and can access any enabled cluster in the project.

.. important::
   
   {+data-api+} keys are not the same as the :ref:`programmatic API keys
   <atlas-prog-api-key>` used to access the Atlas and Realm
   Administration APIs.

Click :guilabel:`Create API Key`, enter a unique name for the new key,
and then click :guilabel:`Create API Key`.

You can now see and copy your new API key for the first and only time.
Once you close the modal, Atlas will never expose the value again.

Copy the new API key and store it somewhere safe where you can reference
it later. {+data-api+} keys are sensitive, so make sure not to hardcode
them directly into user-facing apps or commit them to version control. 

.. tip::

   You can delete a {+data-api+} key at any time. Any request that
   includes a deleted key will fail. You might delete a key to prevent
   an existing client from continuing to use the API or if you
   accidentally expose the key and need to replace it.

.. _send-data-api-request:

3. Send a {+data-api+} Request
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You include your {+data-api+} key when you call action endpoints that
read and write documents in MongoDB. For a list of all available actions
& endpoints, see :ref:`data-api-resources`.

You can run the following commands in a shell to make sure everything
works and then start exploring:

.. tip::

   Make sure to replace placeholder values before you run each request:
   
   - ``<{+data-api+} App ID>``: Your {+data-api+} App ID, which you can
     find in the :guilabel:`URL Endpoint` section of the UI.

   - ``<{+data-api+} key>``: The {+data-api+} key you just created.

   - ``<cluster name>``: The name of a cluster with the {+data-api+}
     enabled.

A. Insert a test document:

   .. code-block:: sh
      
      curl --request POST \
        'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/beta/action/insertOne' \
        --header 'Content-Type: application/json' \
        --header 'Access-Control-Request-Headers: *' \
        --header 'api-key: <{+data-api+} Key>' \
        --data-raw '{
            "dataSource": "<cluster name>",
            "database": "learn-data-api",
            "collection": "people",
            "document": {
              "name": "John Sample",
              "age": 42
            }
        }'

B. Then, find the test document that you just inserted:

   .. code-block:: sh
      
      curl --request POST \
        'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/beta/action/findOne' \
        --header 'Content-Type: application/json' \
        --header 'Access-Control-Request-Headers: *' \
        --header 'api-key: <{+data-api+} Key>' \
        --data-raw '{
            "dataSource": "<cluster name>",
            "database": "learn-data-api",
            "collection": "people",
            "filter": { "name": "John Sample" }
        }'

C. Finally, delete the test document:

   .. code-block:: sh
      
      curl --request POST \
        'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/beta/action/deleteOne' \
        --header 'Content-Type: application/json' \
        --header 'Access-Control-Request-Headers: *' \
        --header 'api-key: <{+data-api+} Key>' \
        --data-raw '{
            "dataSource": "<cluster name>",
            "database": "learn-data-api",
            "collection": "people",
            "filter": { "name": "John Sample" }
        }'

.. _data-api-ejson:

Extended JSON
-------------

The {+data-api+} uses canonical :manual:`MongoDB Extended JSON
</reference/mongodb-extended-json/>` to encode BSON data types in
request bodies.

The following sections demonstrate how to define EJSON types in your
requests.

Binary
~~~~~~

To specify a binary value, use ``$binary`` with the value encoded in
Base64 and a `BSON subtype <https://bsonspec.org/spec.html>`_:

.. code-block:: sh
   :emphasize-lines: 11-16
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/beta/action/insertOne' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "<cluster name>",
         "database": "<database name>",
         "collection": "<collection name>",
         "document": {
           "data": {
             "$binary": {
               "base64": "46d989eaf0bde5258029534bc2dc2089",
               "subType": "5"
             }
           }
         }
     }'

Date
~~~~

To specify a date, use ``$date`` with the `UNIX timestamp in
milliseconds <https://currentmillis.com/>`_ as a 64-bit integer:

.. code-block:: sh
   :emphasize-lines: 11
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/beta/action/insertOne' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "<cluster name>",
         "database": "<database name>",
         "collection": "<collection name>",
         "document": {
           "createdAt": { "$date": { "$numberLong": "1638551310749" } }
         }
     }'

Decimal128
~~~~~~~~~~

To specify a 128-bit decimal, use ``$numberDecimal`` with the decimal
value as a string:

.. code-block:: sh
   :emphasize-lines: 11
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/beta/action/insertOne' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "<cluster name>",
         "database": "<database name>",
         "collection": "<collection name>",
         "document": {
           "accountBalance": { "$numberDecimal": "128452.420523" }
         }
     }'

Double
~~~~~~

To specify a 64-bit signed floating point value (commonly referred to as
a "double"), use ``$numberDouble`` with the integer value as a string:

.. code-block:: sh
   :emphasize-lines: 11
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/beta/action/insertOne' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "<cluster name>",
         "database": "<database name>",
         "collection": "<collection name>",
         "document": {
           "temperatureCelsius": { "$numberDouble": "23.847" }
         }
     }'


Int64
~~~~~

To specify a 64-bit signed integer value, use ``$numberLong`` with the
integer value as a string:

.. code-block:: sh
   :emphasize-lines: 11
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/beta/action/insertOne' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "<cluster name>",
         "database": "<database name>",
         "collection": "<collection name>",
         "document": {
           "population": { "$numberLong": "8047923148" }
         }
     }'

Int32
~~~~~

To specify a 32-bit signed integer value, use ``$numberInt`` with the
integer value as a string:

.. code-block:: sh
   :emphasize-lines: 11
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/beta/action/insertOne' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "<cluster name>",
         "database": "<database name>",
         "collection": "<collection name>",
         "document": {
           "coins": { "$numberInt": "2147483647" }
         }
     }'

ObjectId
~~~~~~~~

To specify an ObjectId value, use ``$oid`` with the ID as a byte string:

.. code-block:: sh
   :emphasize-lines: 11
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/beta/action/insertOne' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "<cluster name>",
         "database": "<database name>",
         "collection": "<collection name>",
         "document": {
           "_id": { "$oid": "61f02ea3af3561e283d06b91" }
         }
     }'

Request Logs
------------

The {+data-api+} logs all requests and stores the logs for 30 days.

You can view them on the :guilabel:`Data API` screen in the :guilabel:`Logs` tab.

Request Limitations
-------------------

The {+data-api+} enforces the following limitations on all requests:

- Incoming requests may not exceed 18 MB.
- Response body content may not exceed 16 MB.
- Request processing time may not exceed 90 seconds.

Billing
-------

The {+data-api+} uses the same usage-based pricing as MongoDB Realm
applications. For details, see :realm:`MongoDB Realm Billing
</billing>`.

{+data-api+} usage is billed based on the following dimensions:

- **Requests:** Every action adds one request to your billed total
  regardless of whether or not the action is successful.

- **Compute:** Every action bills for time and memory that the server
  uses to process the action. The exact usage depends on your workload.

- **Data Transfer:** Every action bills for data returned to the caller
  in the response. The response may include the result set of the action
  or metadata that describes the result of the action.
