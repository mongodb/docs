===================
Indexing Strategies
===================

.. default-domain:: mongodb

Synopsis
--------

Indexes allow MongoDB to process and fulfill queries quickly, by
creating an small and efficient representation of the documents in the
collection. Read the ":doc:`/core/indexes`" documentation for more
information on the fundamentals of indexing in MongoDB, and the
":doc:`/administration/indexes`" documentation for operational
guidelines and examples for building and managing indexes.

This document provides an overview of approaches to indexing with
MongoDB and a selection of strategies that you can use as you develop
applications with MongoDB.

Strategies
----------

Use Covered Queries
~~~~~~~~~~~~~~~~~~~

In some cases, MongoDB will be able to fulfill a query using *only*
the index, without needing to scan actual documents from the
database. To use a covered index you must:

- ensure that the index includes all of the fields in the result.

- if any of the indexed fields in any of the documents in the
  collection includes an array, then the index becomes a
  :ref:`multi-key index <index-type-multi-key>` index, and cannot
  support a covered query.

- in the :term:`projection`, explicitly exclude the ``_id`` field from
  the result set, unless the index includes ``_id``.

TODO: the third point seems like part of the first point.

Use the :func:`explain() <cursor.explain()>` to test the query. If
MongoDB was able to use a covered index, then the value of the
``indexOnly`` field will be ``true``.

Covered queries are much faster than other queries, for two reasons:
indexes are typically stored in RAM *or* located sequentially on
disk, and indexes are smaller than the documents they catalog.

Sort Using Indexes
~~~~~~~~~~~~~~~~~~

While the :dbcommand:`sort` database command

TODO: sort database command?  Is "database command" being used in a different
sense here?

 and the :func:`sort()
<cursor.sort()>` helper support in-memory sort operations without the
use of an index, these operations are:

#. Significantly slower than sort operations that use an index.

#. Abort when the sort operation consume 32 megabytes of memory.

For the best result, index the field you want sorted query
results. For example:

- if you have an ``{ username: 1 }`` index, you can use this index to
  return documents sorted by the ``username`` field.

  *MongoDB can return sorted results in either ascending or descending
  order using an index in ascending or descending order,* because
  MongoDB can transverse items in the index in both
  directions. For more information about index order see the section
  on ":ref:`Ascending and Descending Index Order
  <index-ascending-and-descending>`."

- MongoDB can use a compound index ``{ status: 1, username: 1 }`` to
  return a query on the ``status`` field sorted by the ``username``
  field.

When using compound indexes to support sort operations, the sorted
field must be the *last* field in the index.

TODO: not true!  In 2.2, you can use, say, the index above for a query on
username, sort by status, too.

Store Indexes in Memory
~~~~~~~~~~~~~~~~~~~~~~~

For best results, always ensure that your indexes fit entirely in RAM,
so the system doesn't need to read the index from disk to
fulfill a query. If your indexes approach or exceed the total size of
available RAM, they may not fit in memory.

You can check the size of your indexes in the :program:`mongo` shell,
using the :func:`db.collection.totalIndexSize()` helper. You may also
use :dbcommand:`collStats` or :func:`db.collection.stats()` to return
this and :doc:`related information </reference/collection-statistics>`.

:func:`db.collection.totalIndexSize()` returns data in bytes. Consider
the following invocation:

.. code-block:: javascript

   > db.collection.totalIndexSize()
   4294976499

This reports a total index size of roughly 4 gigabytes. Consider this
value in contrast to the total amount of available system RAM and the
rest of the :term:`working set`. Also remember:

- if you have and use multiple collections to consider the size of
  all indexes on all collections.

- there are some :ref:`limited cases where indexes do not need to fit
  in RAM <indexing-right-handed>`.

Considerations
--------------

Above all, when developing your indexing strategy you should have a
deep understanding of:

- the application's queries.

- the relative frequency of each query in the application.

- the current indexes created for your collections.

- which indexes the most common queries use.

MongoDB can only use *one* index to support any given operation.

TODO: trickily put.  I hope you menion $or elsewhere?

Selectivity
~~~~~~~~~~~

Selectivity describes the ability of a query to narrow the result set
using the index. Effective indexes are more selective and allow
MongoDB to use the index for a larger portion of the work associated
with fulfilling the query.

.. example::

   First, consider an index on a field that has three values evenly
   distributed across the collection. If MongoDB uses this index for a
   query, MongoDB will still need to scan a third of the
   :term:`documents <document>` in the collection to fulfill the rest
   of the query.

   Then, consider an index on a field that has many values evenly
   distributed across the collection. If your query selects one of
   these values using the index, MongoDB will only need to scan a very
   small number of documents to fulfill the rest of the query.

TODO: It'd be clearer to use "real" numbers in the second example, too, but I
think you'd have to re-jigger the example to do so.

To ensure optimal performance, use indexes that are maximally
selective relative to your queries.

TODO: the example makes selectivity sound like the uniqueness of the index,
which isn't the whole story.  Having something like {x:{$gt:3}} that matches 60%
of the collection isn't very selective, even if x has a unique index on it.

I think it's important to emphasize that selectivity is whittling down possible
results to as small a % as possible.

TODO: Also, might be worth mentioning that, if you cannot get selectivity low
enough, indexes will actually be slower than table scans.

Insert Throughput
~~~~~~~~~~~~~~~~~

.. TODO insert link to /source/core/write-operations when that page is complete.

.. TODO fact check

MongoDB must update all indexes associated with a collection following
every insert or update operation.

TODO: or delete, too

Every index on a collection adds
some amount of overhead to these operations. In almost every case, the
performance gains that indexes realize for read operations are worth
the insertion penalty; however:

- in some cases, an index to support an infrequent query may incur
  more insert-related costs, than saved read-time.

TODO: rm comma: "insert-related costs than saved read-time"

- in some situations, if you have many indexes on a collection with a
  high insert throughput and a number of very similar indexes, you may
  find better overall results by using a slightly less effective index
  on some queries if it means consolidating the total number of
  indexes.

TODO: do you cover what indexes overlap?

Index Size
~~~~~~~~~~

Indexes require space, both on disk and in RAM. Indexes require less
space in RAM than the full documents in the collection. In theory, if
your queries only match a subset of the documents and can use the
index to locate those documents, MongoDB can maintain a much smaller
:term:`working set`. Ensure that:

- all of your indexes use less space than the documents in the
  collection.

TODO: individually or all together?

- the indexes and a reasonable working set can fit RAM at the same
  time.

TODO: a reasonable working set?

.. _indexing-right-handed:

Indexes do not have to fit *entirely* into RAM in all cases. If the
value of the indexed field grows with every insert, and most queries
select recently added documents; then MongoDB only needs to keep the
parts of the index that hold the most recent or "right-most" values in
RAM. This allows for efficient index use for read and write
operations and minimize the amount of RAM required to support the
index.

.. To determine the size of the index, see DOCS-224
