---
title: "Click :guilabel:`Deployment`, then click the :guilabel:`Processes` tab, and then the :guilabel:`Topology` view."
stepnum: 1
level: 4
ref: select-deployment-topology
---
stepnum: 2
level: 4
title: "Specify the |tls| Settings."
optional: true
content: |

  .. list-table::
     :widths: 30 70
     :header-rows: 1
     :stub-columns: 1

     * - Field
       - Action

     * - MongoDB Deployment Transport Layer Security (TLS)
       - Toggle this slider to :guilabel:`ON`.

     * - TLS CA File Path
       - The |tls| |certauth| file is a ``.pem``-format certificate
         file that contains the root certificate chain from the
         |certauth|. The {+mdbagent+} uses this same |certauth| file
         to connect to every item in your deployment.

         .. include:: /includes/fact-PKCS8-not-supported.rst

         Type the file path to the |tls| |certauth| file on every host
         running a MongoDB process:

         - Type the file path on all Linux hosts in the first box.

         - Type the file path on all Windows hosts in the second box.

         This enables the :setting:`net.tls.CAFile` setting for the
         MongoDB processes in the project.

         Click :guilabel:`Validate` to test that each host in your
         deployment has a |tls| |certauth| at the paths you specified.

     * - Cluster TLS CA File Path
       - The :file:`.pem` file that contains the root certificate chain from the Certificate Authority
         used to validate the certificate presented by a client establishing a connection.
         Specify the file name of the :file:`.pem` file using relative or absolute paths.
         :setting:`net.tls.clusterCAFile` requires that :setting:`net.tls.CAFile` is set.

         If you do not specify the :setting:`net.tls.clusterCAFile`, the cluster uses the :file:`.pem` file specified in the
         :setting:`net.tls.CAFile` option.

         :setting:`net.tls.clusterCAFile` lets you use separate Certificate
         Authorities to verify the client-to-server and server-to-client
         portions of the TLS handshake.

     * - Client Certificate Mode
       - Select if client applications or {+mdbagent+}\s must present a
         |tls| certificate when connecting to a |tls|\-enabled MongoDB
         deployments. Each MongoDB deployment checks for certificates
         from these client hosts when they try to connect. If you
         choose to require the client |tls| certificates, make sure
         they are valid.

         Accepted values are:

         .. list-table::
            :widths: 25 75
            :stub-columns: 1

            * - Optional
              - Every client may present a valid |tls| certificate when
                connecting to MongoDB deployments. {+mdbagent+}\s might
                use |tls| certificates if you *don't* set the |mongod|
                :parameter:`tlsMode` to ``None``.

            * - Required
              - Every MongoDB deployment in this project starts with
                |tls|\-encrypted network connections. All Agents
                must use |tls| to connect to any MongoDB
                deployment.

ref: optional-configure-ssl
---
stepnum: 3
level: 4
title: "Select {{mechanism}}."
replacement:
  mechanism: "the authentication mechanism"
ref: select-auth-type
---
stepnum: 4
level: 4
title: "Configure the Authentication Mechanism for the Agents."
replacement:
  mechanism: "the authentication mechanism"
pre: |

  If you enable more than one authentication mechanism, you must specify which
  one of the authentication mechanisms the |mms| agents should use to connect
  to your deployment.

  a. Select {{mechanism}}.
content: |

  b. |mms| automatically generates the Agents' usernames and passwords.
  
     |mms| creates users for the agents with the required user roles in the
     admin database for each existing deployment in |mms|. When you add a new
     deployment, |mms| creates the required users in the new deployment.

ref: select-configure-auth-mechanism
---
stepnum: 0
level: 4
title: "Create MongoDB Roles for LDAP Groups. (Optional)"
content: |

  After enabling LDAP Authorization, you need to 
  :doc:`create custom MongoDB roles </tutorial/manage-mongodb-roles>` 
  for each LDAP Group you specified for LDAP Authorization.

ref: create-ldap-roles
---
stepnum: 0
level: 4
title: "Configure the LDAP Authorization Settings. (Optional)"
content: |

  .. important::

     Starting with MongoDB 3.4, you can 
     authenticate users using LDAP, Kerberos, or X.509 certificates 
     without requiring local user documents in the ``$external`` 
     database as long as you enable LDAP authorization first. When such a user successfully
     authenticates, MongoDB performs a query against the LDAP server to
     retrieve all groups which that LDAP user possesses and transforms those
     groups into their equivalent MongoDB roles.

  Skip this step if you selected :guilabel:`Saslauthd` in the previous
  step.

  If you selected :guilabel:`Native LDAP Authentication`, complete the following steps:

  a. Provide the following values:

     .. list-table::
        :header-rows: 1
        :widths: 30 70

        * - Setting

          - Value

        * - Server URL

          - Specify the ``hostname:port`` combination of one or more LDAP servers.

        * - Transport Security 

          - Select ``TLS`` to encrypt your LDAP queries. If you do not
            need to encrypt the LDAP queries, select ``None``.

        * - Timeout (ms)  

          - Specify how long an authentication request should wait before timing out.

        * - Bind Method  

          - Select either ``SASL`` or ``Simple``. 

            .. important::

               If you choose the ``Simple`` bind method, select ``TLS``
               from the :guilabel:`Transport Security` because the
               ``Simple`` bind method passes the password in plain text.

        * - SASL Mechanisms  

          - Specify which SASL authentication service MongoDB uses with 
            the LDAP server.

        * - Query User (LDAP Bind DN)

          - Specify the LDAP Distinguished Name to which MongoDB binds when 
            connecting to the LDAP server.

        * - Query Password (LDAP Bind DN)

          - Specify the password with which MongoDB binds when connecting to an 
            LDAP server.

        * - LDAP User Cache Invalidation Interval (s)  

          - Specify how long MongoDB waits to flush the LDAP user cache.
            Defaults to ``30`` seconds.

        * - User to Distinguished Name Mapping

          - Specify an array of JSON documents that provide the ordered
            transformation(s) MongoDB performs on the authenticated MongoDB
            usernames. MongoDB then matches the transformed username 
            against the LDAP DNs.

        * - Validate LDAP Server Config

          - Select ``ON`` to validate the LDAP server configuration
            or ``OFF`` to skip validation.

            If ``ON`` and the configuration is invalid, the MongoDB
            deployment will not start.

  #. In the :guilabel:`LDAP Authorization` section, enter values for the
     following fields:

     .. list-table::
        :header-rows: 1
        :widths: 30 70

        * - Setting

          - Value

        * - :guilabel:`LDAP Authorization`

          - Toggle to :guilabel:`ON` to enable LDAP authorization.

        * - :guilabel:`Authorization Query Template`

          - Specify a template for an LDAP
            query URL to retrieve a list of LDAP groups for an LDAP 
            user.

        * - :guilabel:`User to Distinguished Name Mapping`

          - Specify an array of JSON documents that provide the ordered
            transformation(s) MongoDB performs on the authenticated MongoDB
            usernames. MongoDB then matches the transformed username 
            against the LDAP DNs.

ref: set-ldap-authorization-settings-ldap
---
stepnum: 0
level: 4
title: "Configure the LDAP Authorization Settings."
content: |

  .. important::

     Starting with MongoDB 3.4, you can 
     authenticate users using LDAP, Kerberos, and X.509 certificates 
     without requiring local user documents in the ``$external`` 
     database as long as you enable LDAP authorization first. When such a user successfully
     authenticates, MongoDB performs a query against the LDAP server to
     retrieve all groups which that LDAP user possesses and transforms those
     groups into their equivalent MongoDB roles.

  Skip this step if you don't want to enable LDAP authorization.

  a. Enter values for the following fields:

     .. list-table::
        :header-rows: 1
        :widths: 30 70

        * - Setting

          - Value

        * - :guilabel:`LDAP Authorization`

          - Toggle to :guilabel:`ON` to enable LDAP authorization.

        * - :guilabel:`Authorization Query Template`

          - Specify a template for an LDAP
            query URL to retrieve a list of LDAP groups for an LDAP 
            user.

ref: set-authorization-settings-no-ldap
---
title: "Click :guilabel:`Save Settings`."
level: 4
ref: save-auth-settings
...
