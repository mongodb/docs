==============================
MongoDB Agent Configuration
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This page describes possible settings for {+aagent+}. These
values are set after first launching |mms| and not through manual
editing of these files.

.. warning::

   If you edit these settings through the :guilabel:`Settings` or
   :guilabel:`Deployments`, in the case of authentication or SSL, in
   |mms|, those changes overwrite any changes made manually in this
   configuration file.

.. _automation-agent-config-file-location:

Configuration File Location on Each Platform
--------------------------------------------

The location of the MongoDB Agent configuration file depends on
your platform:

**ADD FILE HERE **

The location of the legacy Agent configuration files also depends on your platform. When you update to the MongoDB Agent, legacy configuration files are invalidated.

.. include:: /includes/list-table-automation-agent-conf-file-locations.rst

.. include:: /includes/list-table-monitoring-agent-conf-file-locations.rst

Settings
--------

|mms| provides default values for many of the Automation Agent
Configuration settings.

.. important::
   You must set the :asetting:`mmsApiKey` value.

.. _automation-agent-connection-settings:

Connection Settings
~~~~~~~~~~~~~~~~~~~

.. asetting:: mmsGroupId

   *Type*: string

   Specifies the ID of your |mms| project. In |mms|, click
   :guilabel:`Settings`, then :guilabel:`Agents` and then click on the
   appropriate operating system under :guilabel:`Agent Downloads`.

   When the :guilabel:`Automation Agent Installation Instructions` box
   appears, these values can be copied directly from this box using the
   :guilabel:`Copy` buttons.

   *Required*.

   .. code-block:: ini

      mmsGroupId=8zvbo2s2asigxvmpnkq5yexf

.. asetting:: mmsApiKey

   *Type*: string

   Specifies the |mms| agent API key of your |mms| project.

   .. include:: /includes/extracts/agent-api-key-specify.rst

   *Required*.

   .. code-block:: ini

      mmsGroupId=8zvbo2s2asigxvmpnkq5yexf

.. _mmsBaseUrl:

.. asetting:: mmsBaseUrl

   *Type*: string

   .. include:: /includes/extracts/automation-agent-configuration-mmsbaseurl.rst

.. asetting:: logFile

   *Type*: string

   Specifies the path to which |mms| should write the Automation Agent's log.

   *By default, this path is*
   ``/var/log/mongodb-mms-automation/automation-agent.log``.

   .. code-block:: ini

      logFile=/path/to/mongodb-mms-automation/automation-agent.log

.. asetting:: mmsConfigBackup

   *Type*:

   Specifies the path to the |mms|
   :ref:`automation configuration <automation-configuration-sample-entity>`
   backup file. This file describes the desired state of the deployment.

   .. code-block:: ini

      mmsConfigBackup=/path/to/mms-cluster-config-backup.json

   .. note::
      When |onprem| is installed, it stores this configuration backup
      file in ``/var/lib/mongodb-mms-automation/``.

.. asetting:: dialTimeoutSeconds

   *Type*: int

   Specifies the number of seconds to wait before a connection times out.
   By default, connections time out after 40 seconds. However, The
   Automation Agent may frequently time out of connections for one or
   more of the following reasons:

   - High network latency

   - High server load

   - Large SSL keys

   - Lack of SSL accelerator

   - Insufficient CPU speed

   MongoDB recommends gradually increasing the value of the
   :setting:`dialTimeoutSeconds` Automation Agent configuration setting
   to prevent frequent premature connection timeouts.

   .. code-block:: ini

      dialTimeoutSeconds=40

   .. note::
      Increasing this value also increases the time required to deploy
      configuration changes to the Automation Agent. Experiment with
      small, incremental increases until you determine the optimum
      value for your deployment.

Logging Settings
~~~~~~~~~~~~~~~~

.. asetting:: logFile

   *Type*: string

   Specifies the absolute path to the log file. If this is not
   specified, the log writes to standard error (``stderr``) on UNIX-
   and Linux-based systems and to the Event Log on Windows systems.

.. asetting:: logLevel

   *Type*: string

   Specifies the level of logging granularity.

   Choose from the following severity levels, from most to least
   verbose:

   - ``DEBUG``
   - ``INFO``
   - ``WARN``
   - ``ERROR``
   - ``FATAL``

   By default, :asetting:`logLevel` is ``INFO``.

   .. code-block:: ini

      logLevel=ROUTINE

   Each level includes the log items included in the succeeding levels.

   .. example::

      - If you choose ``DEBUG``, the Automation Agent logs all
        messages, including ``INFO``, ``WARN``, ``ERROR``
        and ``FATAL``.

      - If you choose ``FATAL``, the Automation Agent only logs
        ``FATAL`` messages.

.. asetting:: maxLogFiles

   *Type*: integer

   Specifies the maximum number of rotated log files to retain.

   By default, :asetting:`maxLogFiles` is ``10``. You can change the
   value to retain a different quantity of rotated log files.

   .. code-block:: ini

      maxLogFiles=15

.. asetting:: maxLogFileSize

   *Type*: integer

   Specifies the maximum size, in bytes, of a log file before the logs
   are rotated. If unspecified, the {+aagent+} does not rotate
   logs based on file size. This is optional.

   .. code-block:: ini

      maxLogFileSize=536870912

.. asetting:: maxLogFileDurationHrs

   *Type*: float

   Specifies the number of hours after which the logs (regular and verbose) are rotated. This is optional.

.. note::
   On UNIX- and Linux-based systems you can manually rotate the
   {+aagent+} logs. Issue a user signal 1 kill command for the
   {+agent+} process:

   .. code-block:: sh

      kill -SIGUSR1 <AgentID>

   This rotates the {+aagent+} regular and verbose logs.


HTTP Proxy Settings
~~~~~~~~~~~~~~~~~~~

.. asetting:: httpProxy

   *Type*: string

   Specifies the URL of an HTTP proxy server the {+aagent+} can use.

   .. code-block:: ini

      httpProxy=http://proxy.example.com:8080

.. _automation-mongodb-kerberos-settings:

MongoDB Kerberos Settings
~~~~~~~~~~~~~~~~~~~~~~~~~

Specify these settings if the {+aagent+} authenticates to hosts
using Kerberos. To configure Kerberos, see
:doc:`/tutorial/configure-monitoring-agent-for-kerberos`.

.. asetting:: krb5ConfigLocation

   *Type*: string

   Specifies an *absolute* path to an non-system-standard location for
   the Kerberos configuration file.

   .. code-block:: ini

      krb5ConfigLocation=/path/to/krb_custom.conf

.. include:: /includes/fact-set-krb5ccname.rst

.. msetting:: krb5Principal

   *Type*: string

   Specifies the Kerberos principal the Monitoring Agent uses.

   .. code-block:: ini

      krb5Principal=mmsagent/myhost@EXAMPLE.COM

.. msetting:: krb5Keytab

   *Type*: string

   Specifies the *absolute* path to Kerberos principal's ``keytab``
   file.

   .. code-block:: ini

      krb5Keytab=/path/to/mms-monitoring-agent.keytab

.. asetting:: backupAgentKrb5CCName

   *Type* string

   Specifies the ``KRB5CC`` environment variable that the Automation
   Agent sets for {+bagent+} process. Used only to authenticate the
   {+bagent+} to your MongoDB deployment when the Automation Agent
   starts the agent.

   .. code-block:: ini

      backupAgentKrb5CCName=/path/to/credentials_cache_file

.. asetting:: monitoringAgentKrb5CCName

   *Type* string

   Specifies the ``KRB5CC`` environment variable that the Automation
   Agent sets for the {+magent+} process. Used only to authenticate
   the {+magent+} to your MongoDB deployment when the Automation
   Agent starts the agent.

   .. code-block:: ini

      monitoringAgentKrb5CCName=/path/to/credentials_cache_file

.. asetting:: gssapiServiceName

   *Type*: string

   Specifies the service name with the :asetting:`gssapiServiceName`
   option.

   *By default, MongoDB uses* ``mongodb`` *as its service name.*

MongoDB SSL Settings
~~~~~~~~~~~~~~~~~~~~

Specify these settings when the Monitoring Agent connects to MongoDB
deployments using SSL. See
:doc:`/tutorial/configure-monitoring-agent-for-ssl` for more
information.

.. msetting:: useSslForAllConnections

   *Type*: boolean

   Specifies whether or not to encrypt **all** connections to MongoDB
   deployments using SSL.

   .. caution::

      Setting this to ``true`` overrides any
      per-host SSL settings configured in the |mms| interface.

.. msetting:: sslClientCertificate

   *Type*: string

   Specifies the *absolute* path to the private key, client
   certificate, and optional intermediate certificates in ``PEM``
   format. The Monitoring Agent uses the client certificate to connect to any
   configured MongoDB deployment that uses SSL and requires a client
   certificate (run with the :option:`--sslCAFile <mongod.--sslCAFile>`
   option).

   .. example::

      If you want to connect to a MongoDB deployment that uses both SSL
      and certificate validation using {+mongosh+}:

      .. code-block:: sh

         mongosh --tls --tlsCertificateKeyFile /path/to/client.pem --tlsCAFile /path/to/ca.pem example.net:27017

      You must set these options in your Monitoring Agent configuration file:

      .. code-block:: ini

         sslTrustedServerCertificates=/path/to/ca.pem
         sslClientCertificate=/path/to/client.pem

.. msetting:: sslClientCertificatePassword

   *Type*: string

   Specifies the password needed to decrypt the private key in
   the ``sslClientCertificate`` file. This setting is
   required when the client certificate ``PEM`` file is
   encrypted.

   .. code-block:: ini

      sslClientCertificatePassword=password

.. msetting:: sslTrustedServerCertificates

   *Type*: string

   Specifies the *absolute* path that contains the trusted CA
   certificates in ``PEM`` format. These certificates verify the server
   certificate returned from any MongoDB deployments running with SSL.

   .. code-block:: ini

      sslTrustedServerCertificates=/path/to/ca.pem

.. msetting:: sslRequireValidServerCertificates

   *Type*: boolean

   Specifies whether the Monitoring Agent should validate the SSL
   certificates presented by the MongoDB databases.

   .. code-block:: ini

      sslRequireValidServerCertificates=true

   .. include:: /includes/extracts/fact-bypass-ssl-certificate.rst

.. _automation-server-ssl-settings:

|mms| Server SSL Settings
~~~~~~~~~~~~~~~~~~~~~~~~~

Specify the settings {+aagent+} uses when communicating with
|mms| using SSL.

.. asetting:: httpsCAFile

   *Type*: string

   Specifies the *absolute* path that contains the trusted CA
   certificates in ``PEM`` format. The absolute path must be used
   because the {+aagent+} may pass this certificate to {+magent+} or {+bagent+}, which may have different paths relative to {+aagent+}. This certificate verifies that the Agent is talking to the
   designated |mms| instance.

   .. code-block:: ini

      httpsCAFile=/path/to/ca.pem

   .. note::

      If you need to have your Automation Agents download their
      MongoDB installers from the Internet while using |tls| and a
      private |certauth| signed your certificates
      (``httpsCAFile`` parameter is set), raise a
      ticket with |mdb-support| to help you configure your
      |application|.

.. asetting:: sslRequireValidMMSServerCertificates

   *Type*: boolean

   Specifies if the Automation Agent should validate SSL certificates
   presented by |mms|.

   .. warning::

      Setting this option to ``false`` disables certificate
      verification and makes connections between the Automation Agent
      and |mms| susceptible to *man-in-the-middle*
      attacks. Setting this option to ``false`` is only recommended for
      testing purposes.

   .. code-block:: ini

      sslRequireValidMMSServerCertificates=true

.. additional settings are in the following extracts file:

.. include:: /includes/extracts/automation-agent-configuration-ssl.rst
