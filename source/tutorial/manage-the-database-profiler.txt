.. _database-profiler:

=================
Database Profiler
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The database profiler collects detailed information about
:ref:`database-commands` executed against a running :binary:`~bin.mongod`
instance. This includes CRUD operations as well as configuration and
administration commands.
The profiler writes all the data it collects to the
:data:`system.profile <<database>.system.profile>` collection, a
:doc:`capped collection </core/capped-collections>` in the ``admin``
database. See :doc:`/reference/database-profiler` for an overview of the
:data:`system.profile <<database>.system.profile>` documents created by
the profiler.

The profiler is ``off`` by default. You can enable the profiler on a
per-database or per-instance basis at one of several :ref:`profiling
levels <database-profiling-level>`.

When enabled, profiling has an effect on database performance and
disk use. See :ref:`Database Profiler Overhead<database-profiling-overhead>` for more information.

This document outlines a number of key administration options for the
database profiler. For additional related information, consider the
following resources:

- :doc:`/reference/database-profiler`
- :doc:`Profile Command </reference/command/profile>`
- :method:`db.currentOp()`

.. _database-profiling-levels:
.. _database-profiling-level:

Profiling Levels
----------------

The following profiling levels are available:

.. include:: /includes/database-profiler-levels.rst

.. _database-profiling-enable-profiling:

Enable and Configure Database Profiling
---------------------------------------

You can enable database profiling for :binary:`~bin.mongod` instances .

This section uses the :binary:`~bin.mongo` shell helper
:method:`db.setProfilingLevel()` helper to enable profiling. For
instructions using the driver, see your :ecosystem:`driver
documentation </drivers>`.

When you enable profiling for a :binary:`~bin.mongod` instance, you set
the :ref:`profiling level <database-profiling-levels>` to a value
greater than 0. The profiler records data in the :data:`system.profile
<<database>.system.profile>` collection. MongoDB creates the
:data:`system.profile <<database>.system.profile>` collection in a
database after you enable profiling for that database.

To enable profiling and set the profiling level, pass the profiling
level to the :method:`db.setProfilingLevel()` helper. For example, to
enable profiling for all database operations, consider the following
operation in the :binary:`~bin.mongo` shell:

.. code-block:: javascript

   db.setProfilingLevel(2)

The shell returns a document showing the *previous* level of profiling.
The ``"ok" : 1`` key-value pair indicates the operation succeeded:

.. code-block:: javascript

   { "was" : 0, "slowms" : 100, "sampleRate" : 1.0, "ok" : 1 }

To verify the new setting, see the
:ref:`database-profiling-view-status` section.

.. _database-profiling-specify-slowms-threshold:

Specify the Threshold for Slow Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, the slow operation threshold is 100 milliseconds. To change
the slow operation threshold, specify the desired threshold value in
one of the following ways:

- Set the value of ``slowms`` using the :dbcommand:`profile` command or
  :method:`db.setProfilingLevel()` shell helper method.

- Set the value of :option:`--slowms <mongod --slowms>` from the command line at startup.

- Set the value of :setting:`~operationProfiling.slowOpThresholdMs` in a
  :ref:`configuration file <configuration-options>`.

For example, the following code sets the profiling level for the
current :binary:`~bin.mongod` instance to ``1`` and sets the slow
operation threshold for the :binary:`~bin.mongod` instance to 20
milliseconds:

.. code-block:: javascript

   db.setProfilingLevel(1, { slowms: 20 })

Profiling level of ``1`` will profile operations slower than the
threshold.

.. important::
   The slow operation threshold applies to all databases in a
   :binary:`~bin.mongod` instance. It is used by both the database profiler
   and the diagnostic log and should be set to the highest useful value to
   avoid performance degradation.

Starting in MongoDB 4.0, you can use :method:`db.setProfilingLevel()`
to configure ``slowms`` and ``sampleRate`` for :binary:`~bin.mongos`.
For the :binary:`~bin.mongos`, the ``slowms`` and ``sampleRate``
configuration settings only affect the diagnostic log and not the
profiler since profiling is not available on :binary:`~bin.mongos`.
[#mongos-systemlog]_

For example, the following sets a :binary:`~bin.mongos` instance's slow
operation threshold for logging slow operations:

.. code-block:: javascript

   db.setProfilingLevel(0, { slowms: 20 })

.. include:: /includes/extracts/4.2-changes-log-query-shapes-plan-cache-key.rst

.. include:: /includes/extracts/4.2-changes-slow-oplog-log-message-footnote.rst
   
Profile a Random Sample of Slow Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.6

To profile only a randomly sampled subset of all *slow* operations ,
specify the desired sample rate in one of the following ways:
[#slow-oplogs]_

- Set the value of ``sampleRate`` using the :dbcommand:`profile` command
  or :method:`db.setProfilingLevel()` shell helper method.

- Set the value of :option:`--slowOpSampleRate <mongod --slowOpSampleRate>` 
  for :binary:`~bin.mongod` or :option:`--slowOpSampleRate <mongos --slowOpSampleRate>`
  for :binary:`~bin.mongos` from the command line at startup.

- Set the value of :setting:`~operationProfiling.slowOpSampleRate` in a
  :ref:`configuration file <configuration-options>`.

By default, ``sampleRate`` is set to ``1.0``, meaning all *slow*
operations are profiled. When ``sampleRate`` is set between 0 and 1,
databases with profiling level ``1`` will only profile a randomly sampled
percentage of *slow* operations according to ``sampleRate``.

For example, the following method sets the profiling level for the
:binary:`~bin.mongod` to ``1`` and sets the profiler to sample 42% of
all *slow* operations:

.. code-block:: javascript

   db.setProfilingLevel(1, { sampleRate: 0.42 })

The modified sample rate value also applies to the system log.

Starting in MongoDB 4.0, you can use :method:`db.setProfilingLevel()`
to configure ``slowms`` and ``sampleRate`` for :binary:`~bin.mongos`.
For the :binary:`~bin.mongos`,  the ``slowms`` and
``sampleRate`` configuration settings only affect the diagnostic log
and not the profiler since profiling is not available on
:binary:`~bin.mongos`. [#mongos-systemlog]_

For example, the following sets a :binary:`~bin.mongos` instance's
sampling rate for logging slow operations:

.. code-block:: javascript

   db.setProfilingLevel(0, { sampleRate: 0.42 })

.. important::

   .. include:: /includes/fact-log-slow-queries.rst

.. [#mongos-systemlog]

   See :ref:`db-profiling-sharding`.

.. _database-profiling-view-status:
.. _database-profiling-check-level:

Check Profiling Level
~~~~~~~~~~~~~~~~~~~~~

To view the :ref:`profiling level <database-profiling-levels>`, issue
the following from the :binary:`~bin.mongo` shell:

.. code-block:: javascript

   db.getProfilingStatus()

The shell returns a document similar to the following:

.. code-block:: javascript

   { "was" : 0, "slowms" : 100, "sampleRate" : 1.0, "ok" : 1 }

The ``was`` field indicates the current profiling level.

The ``slowms`` field indicates operation time threshold, in
milliseconds, beyond which operations are considered *slow*.

The ``sampleRate`` field indicates the percentage of *slow* operations
that should be profiled.

To return only the profiling level, use the
:method:`db.getProfilingLevel()` helper in the :binary:`~bin.mongo` shell as in the following:

.. code-block:: javascript

   db.getProfilingLevel()

Disable Profiling
~~~~~~~~~~~~~~~~~

To disable profiling, use the following helper in the :binary:`~bin.mongo`
shell:

.. code-block:: javascript

   db.setProfilingLevel(0)

Enable Profiling for an Entire ``mongod`` Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For development purposes in testing environments, you can enable
database profiling for an entire :binary:`~bin.mongod` instance. The
profiling level applies to all databases provided by the
:binary:`~bin.mongod` instance.

To enable profiling for a :binary:`~bin.mongod` instance, pass the following
options to :binary:`~bin.mongod` at startup.

.. code-block:: sh

   mongod --profile 1 --slowms 15 --slowOpSampleRate 0.5

Alternatively, you can specify :ref:`operationProfiling
<operation-profiling-configuration-options>` in the :doc:`configuration
file </reference/configuration-options>`.

This sets the profiling level to ``1``, defines slow operations as those
that last longer than ``15`` milliseconds, and specifies that only 50%
of *slow* operations should be profiled. [#slow-oplogs]_

The ``slowms`` and ``slowOpSampleRate`` also affect which operations
are recorded to the diagnostic log when :setting:`~param.logLevel` is
set to ``0``. The ``slowms`` and ``slowOpSampleRate`` are also
available to configure diagnostic logging for :binary:`~bin.mongos`. [#slow-oplogs]_

.. seealso::
   :setting:`~operationProfiling.mode`,
   :setting:`~operationProfiling.slowOpThresholdMs`, and
   :setting:`~operationProfiling.slowOpSampleRate`.

.. _db-profiling-sharding:

Database Profiling and Sharding
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You *cannot* enable profiling on a :binary:`~bin.mongos` instance. To enable
profiling in a sharded cluster, you must enable profiling for each
:binary:`~bin.mongod` instance in the cluster.

However, starting in MongoDB 4.0, you can set the :option:`--slowms
<mongos --slowms>` and :option:`slowOpSampleRate <mongos
--slowOpSampleRate>` on :binary:`~bin.mongos` to configure the diagnostic
log for slow operations.

View Profiler Data
------------------

The database profiler logs information about database operations in the
:data:`system.profile <<database>.system.profile>` collection.

To view profiling information, query the :data:`system.profile
<<database>.system.profile>` collection. To view example queries, see
:ref:`database-profiling-example-queries`. For an explanation of the
output data, see :doc:`/reference/database-profiler`.

.. tip::

   You can use :query:`$comment` to add data to the query predicate to
   make it easier to analyze data from the profiler.


.. _database-profiling-example-queries:

Example Profiler Data Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This section displays example queries to the :data:`system.profile <<database>.system.profile>`
collection. For an explanation of the query output, see
:doc:`/reference/database-profiler`.

To return the most recent 10 log entries in the :data:`system.profile <<database>.system.profile>`
collection, run a query similar to the following:

.. code-block:: javascript

   db.system.profile.find().limit(10).sort( { ts : -1 } ).pretty()

To return all operations except command operations (:term:`$cmd`), run a query
similar to the following:

.. code-block:: javascript

   db.system.profile.find( { op: { $ne : 'command' } } ).pretty()

To return operations for a particular collection, run a query similar to
the following. This example returns operations in the ``mydb`` database's
``test`` collection:

.. code-block:: javascript

   db.system.profile.find( { ns : 'mydb.test' } ).pretty()

To return operations slower than ``5`` milliseconds, run a query
similar to the following:

.. code-block:: javascript

   db.system.profile.find( { millis : { $gt : 5 } } ).pretty()

To return information from a certain time range, run a query similar to
the following:

.. code-block:: javascript

   db.system.profile.find({
     ts : {
       $gt: new ISODate("2012-12-09T03:00:00Z"),
       $lt: new ISODate("2012-12-09T03:40:00Z")
     }
   }).pretty()

The following example looks at the time range, suppresses the ``user``
field from the output to make it easier to read, and sorts the results
by how long each operation took to run:

.. code-block:: javascript

   db.system.profile.find({
     ts : {
       $gt: new ISODate("2011-07-12T03:00:00Z"),
       $lt: new ISODate("2011-07-12T03:40:00Z")
     }
   }, { user: 0 }).sort( { millis: -1 } )

Show the Five Most Recent Events
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

On a database that has profiling enabled, the ``show profile`` helper
in the :binary:`~bin.mongo` shell displays the 5 most recent operations
that took at least 1 millisecond to execute. Issue ``show profile``
from the :binary:`~bin.mongo` shell, as follows:

.. code-block:: javascript

   show profile

.. _database-profiling-overhead:

Profiler Overhead
-----------------

When enabled, profiling has an effect on database performance,
especially when configured with a
:ref:`profiling level<database-profiling-level>` of 2, or when using a
low :ref:`threshold<database-profiling-specify-slowms-threshold>` value
with a profiling level of 1. Profiling also consumes disk space, as it
logs to both the :data:`system.profile <<database>.system.profile>`
collection and also the MongoDB :option:`logfile <mongod --logpath>`.
Carefully consider any performance and security implications before
configuring and enabling the profiler on a production deployment.

The ``system.profile`` Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :data:`system.profile <<database>.system.profile>` collection is a
:term:`capped collection` with a default size of 1 megabyte. A
collection of this size can typically store several thousand profile
documents, but some applications may use more or less profiling data per
operation. If you need to change the size of the
:data:`system.profile <<database>.system.profile>` collection, follow
the steps below.

Change Size of ``system.profile`` Collection on the Primary
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To change the size of the :data:`system.profile
<<database>.system.profile>` collection on the :term:`primary`, you
must:

1. Disable profiling.

#. Drop the :data:`system.profile <<database>.system.profile>`
   collection.

#. Create a new :data:`system.profile <<database>.system.profile>`
   collection.

#. Re-enable profiling.

For example, to create a new :data:`system.profile
<<database>.system.profile>` collection that is ``4000000`` bytes
(4 MB), use the following sequence of operations in the
:binary:`~bin.mongo` shell:

.. code-block:: javascript

   db.setProfilingLevel(0)

   db.system.profile.drop()

   db.createCollection( "system.profile", { capped: true, size:4000000 } )

   db.setProfilingLevel(1)

Change Size of ``system.profile`` Collection on a Secondary
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To change the size of the :data:`system.profile
<<database>.system.profile>` collection on a :term:`secondary`, you must
stop the secondary, run it as a standalone, and then perform the steps
above. When done, restart the standalone as a member of the replica set.
For more information, see :doc:`/tutorial/perform-maintence-on-replica-set-members`.

.. [#slow-oplogs]

   .. include:: /includes/extracts/4.2-changes-slow-oplog-log-message-footnote.rst

.. toctree::
   :titlesonly:
   :hidden:

   /reference/database-profiler
