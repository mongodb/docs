==========================================
Configure a Highly Available |application|
==========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

The |application| provides high availability through
use of multiple |application| servers behind a load balancer
and through use of a :term:`replica set`
to host the :ref:`mms-application-database`.

Multiple |application| Servers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The |application|'s :ref:`components <mms-application-package>` are
stateless between requests. Any |application| server can
handle requests as long as all the servers read from the same |application|
Database. If one |application| becomes unavailable, another
fills requests.

To take advantage of this for high availability, configure a load balancer
to balance between the pool of |application| servers. Use the load
balancer of your choice. The load balancer must not return cached content.
Configure each application serverâ€™s
``conf-mms.properties`` file to point its :setting:`mms.centralUrl` property to
the load balancer. For more information, see :doc:`/reference/configuration`.

The :setting:`mms.remoteIp.header` property should reflect the HTTP header
set by the load balancer that contains the original client's IP address,
i.e. ``X-Forwarded-For``. The load balancer then manages each application
server's :ref:`mms-http-service`.

The |application| uses the client's IP address for auditing,
logging, and white listing for the API.

Replica Set for the |application| Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Deploy a :term:`replica set` rather than a standalone to host the
:ref:`mms-application-database`.
Replica sets have automatic :manual:`failover
</core/replica-set-high-availability>` if the :term:`primary` becomes
unavailable.

If the replica set has members in multiple facilities, ensure
that a single facility has enough votes to elect a :term:`primary` if
needed. Choose the facility that hosts the core application systems. Place
a majority of voting members and all the members that can become primary
in this facility. Otherwise, network partitions could prevent the set from
being able to form a majority. For details on how replica sets elect
primaries, see :manual:`Replica Set Elections
</core/replica-set-elections>`.

You can create backups of the replica set using :manual:`file system
snapshots </tutorial/backup-with-filesystem-snapshots>`. File system
snapshots use system-level tools to create copies of the device that holds
replica set's data files.

To deploy the replica set that hosts the |application| Database, see
:doc:`backing MongoDB instance </tutorial/prepare-backing-mongodb-instances>`.

.. _gen-key:

The ``gen.key`` File
~~~~~~~~~~~~~~~~~~~~

|onprem| requires an identical ``gen.key`` file be stored on each server
hosting |onprem|, including |onprem| instances with activated Backup Daemons.
The ``gen.key`` is a binary file
of 24 random bytes. |onprem| uses the file to encrypt data at rest in the
databases and to encrypt credentials via the :ref:`credentials tool
<encrypt-mongodb-user-credentials>`.

You can create the ``gen.key`` ahead of time and distribute it to each
server, or you can let the |application| create the file for you. If you
choose the latter, you must start one |application| and copy the generated
``gen.key`` to the other servers **before** starting the other
|application|\ s. An |application| will create a ``gen.key`` upon initial
startup if no ``gen.key`` exists.

If you choose to create the ``gen.key`` ahead of time, before starting any
of the |application|\ s, you can use the OpenSSL ``rand`` command. For
example:

.. code-block:: sh

   openssl rand 24 > /etc/mongodb-mms/gen.key

The ``gen.key`` file is located in ``/etc/mongodb-mms/`` for installations
from a package manager and in ``${HOME}/.mongodb-mms/`` for installations
from an archive.

Prerequisites
-------------

Deploy the replica set that hosts the
:ref:`mms-application-database`. To deploy a replica set,
see :manual:`Deploy a Replica Set </tutorial/deploy-replica-set>` in the
MongoDB manual.

Procedure
---------


The following procedure assumes you will let one of the |application|\ s
create the ``gen.key``. If you instead create your own ``gen.key``,
distribute it to the servers before starting any of the |application|\ s.

.. important::

   The load balancer placed in front of the |application| servers must not
   return cached content. The load balancer must have caching turned off.

To configure multiple |application|\ s with load balancing:

.. include:: /includes/steps/configure-application-high-availability.rst

Additional Information
----------------------

For information on making |mms| Backup highly available, see
:doc:`/tutorial/configure-backup-high-availability`.
