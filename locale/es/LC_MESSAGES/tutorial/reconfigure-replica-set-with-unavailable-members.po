# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 16:33+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# ef57289f0ad9445fbf4a3fcc24409b59
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:3
msgid "Reconfigure a Replica Set with Unavailable Members"
msgstr ""

# 4fc429f937424083817df6b103f6f9b9
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt
msgid "On this page"
msgstr ""

# 739fa5c47f914a35a7b9b40827a52a4b
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:13
msgid ""
"To reconfigure a :term:`replica set` when a **majority** of members are "
"available, use the :method:`rs.reconfig()` operation on the current "
":term:`primary`, following the example in the :ref:`Replica Set "
"Reconfiguration Procedure <replica-set-reconfiguration-usage>`."
msgstr ""

# c59f9ef901e34cf59db311fa5fc38ea5
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:20
msgid ""
"This document provides steps for re-configuring a replica set when *only*"
" a **minority** of members are accessible."
msgstr ""

# 564cf826fd354f138421db84553dfb4d
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:23
msgid ""
"You may need to use the procedure, for example, in a geographically "
"distributed replica set, where *no* local group of members can reach a "
"majority. See :ref:`replica-set-elections` for more information on this "
"situation."
msgstr ""

# e2fc6d6d3a4041318061d7e408bbddbe
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:32
msgid "Reconfigure by Forcing the Reconfiguration"
msgstr ""

# be35c95cb8b7456a904132e6ca348566
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:34
msgid ""
"This procedure lets you recover while a majority of :term:`replica set` "
"members are down or unreachable. You connect to any surviving member and "
"use the ``force`` option to the :method:`rs.reconfig()`  method."
msgstr ""

# 5a64aa124ba04d7fb5879d0ba20a35e3
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:38
msgid ""
"The ``force`` option forces a new configuration onto the member. Use this"
" procedure only to recover from catastrophic interruptions. Do not use "
"``force`` every time you reconfigure. Also, do not use the ``force`` "
"option in any automatic scripts and do not use ``force`` when there is "
"still a :term:`primary`."
msgstr ""

# b1600545785c489c943172576d834232
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:43
msgid "To force reconfiguration:"
msgstr ""

# 16f19dd83f49460f956e9644447dccb7
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:45
msgid "Back up a surviving member."
msgstr ""

# 87bb03932a7841bb9be1923417c29cd0
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:47
msgid ""
"Connect to a surviving member and save the current configuration. "
"Consider the following example commands for saving the configuration:"
msgstr ""

# 225df8fbcb094b4eb413b01eb2cd9c36
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:56
msgid ""
"On the same member, remove the down and unreachable members of the "
"replica set from the :rsconf:`members` array by setting the array equal "
"to the surviving members alone. Consider the following example, which "
"uses the ``cfg`` variable created in the previous step:"
msgstr ""

# e0ed7ddbf6da49a881a7caf9995e2393
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:66
msgid ""
"On the same member, reconfigure the set by using the "
":method:`rs.reconfig()` command with the ``force`` option set to "
"``true``:"
msgstr ""

# c8cd098c09b14d4ab408006a226b9d60
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:74
msgid ""
"This operation forces the secondary to use the new configuration. The "
"configuration is then propagated to all the surviving members listed in "
"the ``members`` array. The replica set then elects a new primary."
msgstr ""

# a7dfe74c94f54a7b97569f3563d09659
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:80
msgid ""
"When you use ``force : true``, the version number in the replica set "
"configuration increases significantly, by tens or hundreds of thousands. "
"This is normal and designed to prevent set version collisions if you "
"accidentally force re-configurations on both sides of a network partition"
" and then the network partitioning ends."
msgstr ""

# f13e4ef173624b259e590acbdece2180
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:87
msgid ""
"If the failure or partition was only temporary, shut down or decommission"
" the removed members as soon as possible."
msgstr ""

# f50240f528684eb881a0153ddac81916
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:90
msgid ":doc:`/tutorial/resync-replica-set-member`"
msgstr ""

# 76cce0dbc049430a81659c7827d7fa66
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:28
msgid "replica set"
msgstr ""

# 76cce0dbc049430a81659c7827d7fa66
#: ../source/tutorial/reconfigure-replica-set-with-unavailable-members.txt:28
msgid "reconfiguration"
msgstr ""

#~ msgid ""
#~ "The ``force`` option forces a new "
#~ "configuration onto the. Use this "
#~ "procedure only to recover from "
#~ "catastrophic interruptions. Do not use "
#~ "``force`` every time you reconfigure. "
#~ "Also, do not use the ``force`` "
#~ "option in any automatic scripts and "
#~ "do not use ``force`` when there is"
#~ " still a :term:`primary`."
#~ msgstr ""

# 3a85ab3f70e14e9da8140e4a23932c8c
#~ msgid ""
#~ "To reconfigure a :term:`replica set` "
#~ "when a **minority** of members are "
#~ "unavailable, use the :method:`rs.reconfig()` "
#~ "operation on the current :term:`primary`, "
#~ "following the example in the "
#~ ":ref:`Replica Set Reconfiguration Procedure "
#~ "<replica-set-reconfiguration-usage>`."
#~ msgstr ""

# a86213ffed3746ce9ceae122ccf20300
#~ msgid ""
#~ "This document provides the following "
#~ "options for re-configuring a replica "
#~ "set when a **majority** of members "
#~ "are *not* accessible:"
#~ msgstr ""

# db03fa0e2b7b4f81bf4df35dec914181
#~ msgid ":ref:`replica-set-force-reconfiguration`"
#~ msgstr ""

# d31ab9ecf98343c59fe56ef53911a378
#~ msgid ":ref:`replica-set-reconfigure-by-replacing`"
#~ msgstr ""

# d88bd18fae64472684d8739ffa441209
#~ msgid ""
#~ "You may need to use one of "
#~ "these procedures, for example, in a "
#~ "geographically distributed replica set, where"
#~ " *no* local group of members can "
#~ "reach a majority. See :ref:`replica-"
#~ "set-elections` for more information on "
#~ "this situation."
#~ msgstr ""

# 2f5d2c684c9849648c427c6aba35e261
#~ msgid ""
#~ "On the same member, remove the "
#~ "down and unreachable members of the "
#~ "replica set from the "
#~ ":data:`~local.system.replset.members` array by "
#~ "setting the array equal to the "
#~ "surviving members alone. Consider the "
#~ "following example, which uses the "
#~ "``cfg`` variable created in the previous"
#~ " step:"
#~ msgstr ""

# e443e853aaed4c428dd82099aea52a4b
#~ msgid "Reconfigure by Replacing the Replica Set"
#~ msgstr ""

# dae7b548eb2f448893cae45a54b4b5fb
#~ msgid ""
#~ "Use the following procedure **only** for"
#~ " versions of MongoDB prior to version"
#~ " 2.0. If you're running MongoDB 2.0"
#~ " or later, use the above procedure,"
#~ " :ref:`replica-set-force-reconfiguration`."
#~ msgstr ""

# 2feeb9511a2c4d9ba2f050ec96386071
#~ msgid ""
#~ "These procedures are for situations "
#~ "where a *majority* of the :term:`replica"
#~ " set` members are down or "
#~ "unreachable. If a majority is *running*,"
#~ " then skip these procedures and "
#~ "instead use the :method:`rs.reconfig()` "
#~ "command according to the examples in "
#~ ":ref:`replica-set-reconfiguration-usage`."
#~ msgstr ""

# 727ffc9aecab4392a17089b9892159ac
#~ msgid ""
#~ "If you run a pre-2.0 version and"
#~ " a majority of your replica set "
#~ "is down, you have the two options"
#~ " described here. Both involve replacing "
#~ "the replica set."
#~ msgstr ""

# 0155b95fecc340a4bfc779c1157ab536
#~ msgid "Reconfigure by Turning Off Replication"
#~ msgstr ""

# 198c32e0aadb43d3b9667dfa0b234579
#~ msgid ""
#~ "This option replaces the :term:`replica "
#~ "set` with a :term:`standalone` server."
#~ msgstr ""

# 3693d20dd9eb489dbe0af0190c3721a6
# 5a4d38150b034964b9d3675dc9b636c7
#~ msgid ""
#~ "Stop the surviving :program:`mongod` "
#~ "instances. To ensure a clean shutdown,"
#~ " use an existing :term:`control script` "
#~ "or use the :method:`db.shutdownServer()` "
#~ "method."
#~ msgstr ""

# 53620526dddb46929dda5fd5f88fa01c
# d7d75b9c9ce64ba5bfbdefdb5e3f60be
#~ msgid ""
#~ "For example, to use the "
#~ ":method:`db.shutdownServer()` method, connect to "
#~ "the server using the :program:`mongo` "
#~ "shell and issue the following sequence"
#~ " of commands:"
#~ msgstr ""

# e5da7d13cd214ed78ccb2f955b7fd4ae
#~ msgid ""
#~ "Create a backup of the data "
#~ "directory (i.e. :setting:`~storage.dbPath`) of "
#~ "the surviving members of the set."
#~ msgstr ""

# 6476f28e73f6408792bc9441bebc58b7
#~ msgid "Optional"
#~ msgstr ""

# 0edca1203b5145aaa6ba879e84409655
#~ msgid ""
#~ "Restart one of the :program:`mongod` "
#~ "instances *without* the :option:`--replSet "
#~ "<mongod --replSet>` parameter."
#~ msgstr ""

# e94ebf747f104d64845cc3404de8f6ba
#~ msgid ""
#~ "The data is now accessible and "
#~ "provided by a single server that "
#~ "is not a replica set member. "
#~ "Clients can use this server for "
#~ "both reads and writes."
#~ msgstr ""

# dc7e6742cfd14e86806a33d1f78d6917
#~ msgid ""
#~ "When possible, re-deploy a replica "
#~ "set to provide redundancy and to "
#~ "protect your deployment from operational "
#~ "interruption."
#~ msgstr ""

# fce3d001998f469697b2b13f4fda3f48
#~ msgid "Reconfigure by \"Breaking the Mirror\""
#~ msgstr ""

# b42900db5bd249aa8ebcc5b9d573eb2f
#~ msgid ""
#~ "This option selects a surviving "
#~ ":term:`replica set` member to be the "
#~ "new :term:`primary` and to \"seed\" a"
#~ " new replica set. In the following"
#~ " procedure, the new primary is "
#~ "``db0.example.net``. MongoDB copies the data"
#~ " from ``db0.example.net`` to all the "
#~ "other members."
#~ msgstr ""

# 98b8aa09d2ac4cb6b52a752126489f77
#~ msgid ""
#~ "Move the data directories (i.e. "
#~ ":setting:`~storage.dbPath`) for all the "
#~ "members except ``db0.example.net``, so that"
#~ " all the members except ``db0.example.net``"
#~ " have empty data directories. For "
#~ "example:"
#~ msgstr ""

# 5e90d7a5b1a94ddeb00d82766bd9cbdc
#~ msgid ""
#~ "Move the data files for ``local`` "
#~ "database (i.e. ``local.*``) so that "
#~ "``db0.example.net`` has no local database. "
#~ "For example"
#~ msgstr ""

# 18b531fadd99480caf93a7d9f6dcf784
#~ msgid "Start each member of the replica set normally."
#~ msgstr ""

# ac67056565b9401ab3582c156e24b960
#~ msgid ""
#~ "Connect to ``db0.example.net`` in a "
#~ ":program:`mongo` shell and run "
#~ ":method:`rs.initiate()` to initiate the "
#~ "replica set."
#~ msgstr ""

# 3d99c0a639894217928b8e2b531d277a
#~ msgid ""
#~ "Add the other set members using "
#~ ":method:`rs.add()`. For example, to add "
#~ "a member running on ``db1.example.net`` "
#~ "at port ``27017``, issue the following"
#~ " command:"
#~ msgstr ""

# 46c95b8d6b8749678e4ff7ec70f96fbd
#~ msgid ""
#~ "MongoDB performs an initial sync on "
#~ "the added members by copying all "
#~ "data from ``db0.example.net`` to the "
#~ "added members."
#~ msgstr ""

