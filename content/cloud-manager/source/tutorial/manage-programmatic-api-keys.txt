.. _mms-prog-api-key:

=================================================
Programmatic Access to |mms| with a Service Account
=================================================

.. meta::
   :description: Manage programmatic access to Cloud Manager by creating API keys or service accounts, granting roles, and configuring access lists for secure API requests.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

To grant programmatic access to an organization or project using only
the :doc:`API </reference/api>`, create an |api| key or a service account.
This ensures that the keys and access tokens 
that serve as usernames and passwords are never sent over the network. 
|api| keys and service accounts:

- Can't be used to log into |mms| through the UI.

- Must be granted roles as you would users to make sure the |api| keys
  and sevice accounts can call |api| endpoints without errors.

- Belong to one organization, but can be granted access to
  any number of projects in that organization.

To learn more about these two authentication methods, see :ref:`cm-api-auth`.

Manage Programmatic Access to an Organization
---------------------------------------------

.. note:: Required Permissions

   You can view programmatic access to an organization with any role. 

   To perform any other action, you must have the
   :authrole:`Organization Owner` role.

.. _create-org-app-api-key:

Grant Programmatic Access to an Organization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the following procedures to grant programmatic access to an
organization either through |api| keys or a service account.
To learn more about these two authentication methods, see :ref:`cm-api-auth`.

.. tabs::

   .. tab:: Service Account
      :tabid: serviceaccount
      
      .. include:: /includes/steps-create-service-account-in-org.rst

   .. tab:: API Key
      :tabid: apikey

      .. include:: /includes/steps-create-api-key-in-org.rst

View Programmatic Access to an Organization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can view the details of all |api| keys or service accounts that have access 
to your organization.

.. tabs::

   .. tab:: Service Account
      :tabid: serviceaccount

      .. include:: /includes/steps-view-service-account-details-in-org.rst

   .. tab:: API Key
      :tabid: apikey

      .. include:: /includes/steps-view-api-key-details-in-org.rst

Update Programmatic Access to an Organization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can change the roles, description, or access list of an |api| key or service 
account in an organization. You can also generate a new client secret for a service account.

.. tabs::

   .. tab:: Service Account
      :tabid: serviceaccount

      .. include:: /includes/steps-change-service-account-in-org.rst

   .. tab:: API Key
      :tabid: apikey

      .. include:: /includes/steps-change-api-key-in-org.rst

Revoke Programmatic Access to an Organization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Service Account
      :tabid: serviceaccount

      .. include:: /includes/steps-delete-service-account-from-org.rst   

   .. tab:: API Key
      :tabid: apikey

      .. include:: /includes/steps-delete-api-key-from-org.rst   

Manage Programmatic Access to a Project
---------------------------------------

.. note:: Required Permissions

   You can view programmatic access to a project with any role. 
   
   To perform any other action, you must have the
   :authrole:`Project User Admin` role.

Grant Programmatic Access to a Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the following procedures to grant programmatic access to a project 
either through |api| keys or a service account. 
To learn more about these two authentication methods, see :ref:`cm-api-auth`.

.. tabs::

   .. tab:: Service Account
      :tabid: serviceaccount

      .. include:: /includes/steps-create-service-account-in-project.rst      

   .. tab:: API Key
      :tabid: apikey

      .. include:: /includes/steps-create-api-key-in-project.rst

View Programmatic Access to a Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can view the details of all |api| keys or service accounts that have access 
to your project.

.. tabs::

   .. tab:: Service Account
      :tabid: serviceaccount

      .. include:: /includes/steps-view-service-account-details-in-project.rst 

   .. tab:: |api| Key
      :tabid: apikey

      .. include:: /includes/steps-view-api-key-details-in-project.rst     

Update Programmatic Access to a Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Service Account
      :tabid: serviceaccount

      .. include:: /includes/steps-change-service-account-in-project.rst

   .. tab:: API Key
      :tabid: apikey

      .. include:: /includes/steps-change-api-key-in-project.rst

Revoke Programmatic Access to a Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Service Account
      :tabid: serviceaccount

      .. include:: /includes/steps-delete-service-account-from-project.rst

   .. tab:: API Key
      :tabid: apikey

      .. include:: /includes/steps-delete-api-key-from-project.rst

.. _example-cm-api-request:

Make an |api| Request
---------------------

The |mms| |api| uses one of two authentication methods to authenticate requests:
|api| keys or a service account. You'll need the keys or the secret that you saved when 
:ref:`configuring your preferred authentication method <create-org-app-api-key>` to 
complete the following procedures.

.. tabs::

   .. tab:: Service Account
      :tabid: serviceaccount

      To make an |api| request using a service account, use the service account to generate
      an access token, then use the access token in your request:

      .. procedure::  
         :style: normal 

         .. step:: Retrieve the client secret for your service account.

            Locate the client secret beginning with ``mdb_sa_sk_`` that you saved 
            immediately after :ref:`creating the service account <create-org-app-api-key>`, 
            which was the only time you could view the client secret.
            If you did not save the client secret, you must generate a new client secret.

         .. step:: Base64-encode the client ID and secret.

               For example, run:

               .. code:: sh

                  echo -n {CLIENT-ID}:{CLIENT-SECRET} | base64

         .. step:: Request an access token.

            Replace ``{BASE64-AUTH}`` in the following example with the output from the 
            preceding step, then run:

            .. io-code-block:: 
               :copyable: true 

               .. input:: 
                  :language: sh
                  :linenos: 

                  curl --request POST \
                       --url https://cloud.mongodb.com/api/oauth/token \
                       --header 'accept: application/json' \
                       --header 'cache-control: no-cache' \
                       --header 'authorization: Basic {BASE64-AUTH}' \
                       --header 'content-type: application/x-www-form-urlencoded' \
                       --data 'grant_type=client_credentials'

               .. output::
                  :language: sh

                  {"access_token":"eyJhbGciOiJFUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6ImYyZjE2YmE4LTkwYjUtNDRlZS1iMWYLTRkNWE2OTllYzVhNyJ9eyJpc3MiOiJodHRwczovL2Nsb3VkLWRldi5tb25nb2RiLmNvbSIsImF1ZCI6ImFwaTovL2FkbWluIiwic3ViIjoibWRi3NhX2lkXzY2MjgxYmM2MDNhNzFhNDMwYjkwNmVmNyIsImNpZCI6Im1kYl9zYV9pZF82NjI4MWJjNjAzYTcxYTQzMGI5MZlZjciLCJhY3RvcklkIjoibWRiX3NhX2lkXzY2MjgxYmM2MDNhNzFhNDMwYjkwNmVmNyIsImlhdCI6MTcxMzkwNTM1OSiZXhwIjoxNzEzOTA4OTU5LCJqdGkiOiI4ZTg1MTM3YS0wZGU1LTQ0N2YtYTA0OS1hMmVmNTIwZGJhNTIifQAZSFvhcjwVcJYmvW6E_K5UnDmeiX2sJgL27vo5ElzeBuPawRciKkn6ervZ6IpUTx2HHllGgAAMmhaP9B66NywhfjAXC67X9KcOzm81DTtvDjLrFeRSc_3vFmeGvfUKKXljEdWBnbmwCwtBlO5SJuBxb1V5swAl-Sbq9Ymo4NbyepSnF""expires_in":3600,"token_type":"Bearer"}%

            .. important:: 

               The access token is valid for 1 hour (3600 seconds). You can't refresh an access token.
               When this access token expires, repeat this step to generate a new one.   

         .. step:: Make an |api| call.

            Replace ``{ACCESS-TOKEN}`` in the following example with the output from the 
            preceding step. For example, ``--header 'Authorization: Bearer eyJ...pSnF' \``.

            The following sample ``GET`` request returns all projects for the current user:

            .. code-block:: sh

                  curl --request GET \
                        --url https://cloud.mongodb.com/api/public/v1.0/groups \
                        --header 'Authorization: Bearer {ACCESS-TOKEN}' \
                        --header 'Accept: application/json' \
         
            The following sample ``POST`` request takes a request body and creates a 
            project  named ``MyProject`` in your organization:

            .. code-block:: sh

               curl --header 'Authorization: Bearer {ACCESS-TOKEN}' \
                    --header 'Content-Type: application/json' \
                    --header 'Accept: application/json' \
                    --include \
                    --request POST 'https://cloud.mongodb.com/api/public/v1.0/groups' \
                    --data '
                      {
                        "name": "MyProject",
                        "orgId": "5a0a1e7e0f2912c554080adc"
                      }'

   .. tab:: API Key
      :tabid: apikey

      Your request should resemble the following examples, where 
      ``{PUBLIC-KEY}`` is your |api| public key and ``{PRIVATE-KEY}``
      is the corresponding private key. 

      The following sample ``GET`` request returns all projects for the current user:

      .. code-block:: sh

         curl --user "{PUBLIC-KEY}:{PRIVATE-KEY}" --digest \
              --header "Accept: application/json" \
              --include \
              --request GET "https://cloud.mongodb.com/api/public/v1.0/groups?pretty=true"


      The following sample ``POST`` request takes a request body and
      creates a project named ``MyProject`` in your organization:

      .. code-block:: sh
      
         curl --user "{PUBLIC-KEY}:{PRIVATE-KEY}" --digest \
              --header "Accept: application/json" \
              --header "Content-Type: application/json" \
              --include \
              --request POST "https://cloud.mongodb.com/api/public/v1.0/groups?pretty=true" \
              --data '
                {
                  "name": "MyProject",
                  "orgId": "deffb2031b938da53f16d714"
                }'
 