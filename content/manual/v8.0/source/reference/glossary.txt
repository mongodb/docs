.. _glossary:

========
Glossary
========

.. Link to other glossary terms when possible.
   Reserve the "See" text at the end of the entry to link to topics in the manual.

.. default-domain:: mongodb

.. meta:: 
   :description: A glossary of MongoDB terms including operations and features. 

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. glossary::
   :sorted:

   $cmd
      A virtual :term:`collection` that exposes MongoDB's
      :term:`database commands <database command>`.
      To use database commands, see :ref:`issue-commands`.

   _id
      A field required in every MongoDB :term:`document`. The
      :ref:`_id <document-id-field>` field must have a unique value. You can
      think of the ``_id`` field as the document's :term:`primary key`.
      If you create a new document without an ``_id`` field, MongoDB
      automatically creates the field and assigns a unique
      BSON :term:`ObjectId` to the field.

   absolute system CPU utilization
      System CPU utilization relative to the full amount of CPU available
      to cloud instances that share CPU.

      - When a cloud provider throttles CPU utilization for a cloud instance,
        the instance's absolute system CPU utilization is equal to the
        :term:`baseline CPU utilization` assigned to this instance.
      - When a cloud provider adds CPU above the baseline CPU, such as
        through a bursting mechanism, the sum of normalized kernel CPU
        utilization and user CPU utilization on an instance can exceed
        the instance's baseline CPU. In this case, the sum of the normalized
        kernel CPU utilization and user CPU utilization is still less than
        the full amount of CPU shared by cloud instances. See also
        :term:`relative system CPU utilization`, :term:`baseline CPU utilization`,
        and :term:`burstable instances`.

   accumulator
      An :term:`expression` in an :term:`aggregation pipeline` that
      maintains state between documents in the aggregation
      :term:`pipeline`. For a list of accumulator operations, see
      :pipeline:`$group`.

   action
      An operation the user can perform on a resource. Actions and
      :term:`resources <resource>` combine to create :term:`privileges
      <privilege>`. See :ref:`action <security-user-actions>`.

   admin database
      A privileged database. Users
      must have access to the ``admin`` database to run certain
      administrative commands. For a list of administrative commands,
      see :ref:`admin-commands`.

   Advanced Persistent Threat
      In security, an attacker who gains and maintains long-term access to the 
      network, disk and/or memory  and remains undetected for an extended 
      period.

   aggregation
      An operation that reduces and summarizes large sets of data. For
      more information, see :ref:`aggregation`.

   aggregation pipeline
      Consists of one or more stages that process documents. Aggregation
      pipelines offer rich syntax to express complex queries. For a list
      of stages, see :ref:`aggregation-pipeline-operator-reference`.

   alert
      Notification sent by Atlas when your database operations or
      server usage reach thresholds that affect cluster
      performance. To learn what conditions you can set to trigger
      alerts, see :ref:`alert-conditions`.

      .. seealso::
      
         :ref:`respond-to-alerts`

   analytics node
      Specialized read-only node that can isolate queries which you do
      not want to affect your operational workload. Analytics nodes are
      useful for handling analytic data such as reporting queries
      executed by BI tools. You can host analytics nodes in dedicated
      geographic regions to optimize read performance and reduce
      latency.

   API
      Communication protocol facilitating interaction between the
      client and |service-fullname|. You can use the 
      {+atlas-admin-api+} to
      automate many of the tasks performed in the {+atlas-ui+}.

      .. seealso::
      
         - :ref:`atlas-api`
         - `{+atlas-admin-api+} Specification <https://mongodb.com/docs/atlas/reference/api-resources-spec>`__

   Approximate Nearest Neighbor (ANN) search 
      Computational technique used to quickly find points in a dataset
      that are close to a given query point. Atlas Vector Search uses ANN search
      to find vector embeddings in the data that are closest to the
      vector embeddings in the query without scanning every
      vector. 

      .. seealso::
      
         :ref:`fts-top-ref`

   arbiter
      A :term:`replica set` member that exists just to vote in
      :term:`elections <election>`. Arbiters do not replicate data. An
      arbiter participates in elections for a :term:`primary` but cannot
      become a primary. For more details, see
      :ref:`replica-set-arbiter-configuration`.

   Atlas
      `MongoDB Atlas <https://www.mongodb.com/atlas/database?tck=docs_server>`_
      is a cloud-hosted database-as-a-service.

   Atlas Search
      Fine-grained text indexing enabling advanced text search on your
      data without any additional required management. Atlas Search provides
      options for several kinds of :ref:`text analyzers
      <analyzers-ref>`, score-based results ranking, and a rich
      :ref:`query language <query-syntax-ref>`.

      .. seealso::
      
         :ref:`fts-top-ref`

   Atlas user
      Account used to access the |service| application. You can grant |service|
      users access to |service| organizations, projects, or both, with certain
      permissions defined by :ref:`user roles <user-roles>`. A |service| user is
      different than a :term:`database user`. |service| users
      do not provide access to any MongoDB databases.
      
      .. seealso::
      
         :ref:`atlas_users`

   Atlas user role
      Set of permissions granted to an :term:`Atlas user`. You can grant
      permissions at the :term:`organization` or :term:`project` level.
      
      .. seealso::
      
         :ref:`user-roles`

   Atlas Vector Search
      Feature in |service| that allows you to perform semantic search
      on vector embeddings by comparing query vectors with indexed
      vectors to find the closest match.

   atomic operation
      An atomic operation is a write operation that either completes
      entirely or doesn't complete at all. For
      :ref:`distributed transactions <transactions>`, which
      involve writes to multiple documents, all writes to each document must
      succeed for the transaction to succeed. Atomic operations cannot
      partially complete. See :ref:`transactions-write-atomicity`.

   authentication
      Verification of the user identity. See
      :doc:`/core/authentication`.

   authorization
      Provisioning of access to databases and operations. See
      :doc:`/core/authorization`.

   automatic encryption
      When using :term:`In-Use Encryption`, automatically performing
      encryption and decryption based on your preconfigured
      {+enc-schema+}. The {+shared-library+} translates MongoDB
      Query Language into the correct call, meaning you don't need to
      rewrite your application for specific encrypt and decrypt calls.

   auto-scaling      
      Configurable option to have your cluster automatically increase
      or decrease its cluster tier, storage capacity, or both in
      response to cluster usage.
      
      .. seealso::
      
         :ref:`cluster-autoscaling`

   balancer
      An internal MongoDB process that runs in the context of a
      :term:`sharded cluster` and manages the migration of :term:`chunks
      <chunk>`. Administrators must disable the balancer for all
      maintenance operations on a sharded cluster. See
      :ref:`sharding-balancing`.

   backup      
      Copy of your data that encapsulates the state of your cluster at
      a given time. Backups provide a safety measure in the case of
      data loss events.
      
      |service| provides fully-managed :term:`Cloud Backups <cloud
      backups>`.

   backup cursor
      A :term:`tailable cursor` that points to a list of backup files. 
      Backup cursors are for internal use only.

   baseline CPU utilization
      Fraction of the full amount of CPU available to cloud instances that
      share CPU. A cloud provider assigns a certain amount of baseline CPU
      to each cloud instance, based on the instance's {+cluster+} tier.
      Typically, baseline CPU utilization falls between 20% and 50% of
      :term:`absolute system CPU utilization`. See also :term:`relative system CPU utilization`
      and :term:`burstable instances`.

   big-endian
      A byte order in which the most significant byte (big end) of a 
      multibyte data value is stored at the lowest memory address.

      .. figure:: /images/big-endian.png
         :alt: Big endian example figure
         :figwidth: 400px

   blocking sort
      A sort that must be performed in memory before the output is returned. 
      In-memory sorts may impact performance for large data sets. Use an 
      :term:`indexed sort` to avoid an in-memory sort.
      
   bounded collection scan
      A plan used by the :ref:`query optimizer <read-operations-query-optimization>` that
      excludes documents with specific field value ranges. For
      example, if a range of date field values is outside of a specified
      date range, the documents in that range are excluded from the
      query plan. See :ref:`explain-output-collection-scan`.

   BSON
      A serialization format used to store :term:`documents <document>` and make
      remote procedure calls in MongoDB. "BSON" is a combination of the words
      "binary" and "JSON". Think of BSON as a binary representation
      of JSON (JavaScript Object Notation) documents. See
      :ref:`bson-types` and
      :doc:`/reference/mongodb-extended-json`.

   BSON types
      The set of types supported by the :term:`BSON` serialization
      format. For a list of BSON types, see :ref:`bson-types`.

   burstable instances
      Cloud instance types that share a common physical CPU that, for some
      cloud providers, use a "CPU credit" model. When you use burstable instances,
      portions of shared CPU may either become available to each of the virtual
      instances or may become unavailable, under different demands on the
      instance resources. To learn more, see |aws-burstable-instances|,
      |azure-disk-bursting|, and |gcp-cpu-bursting|. See also
      :term:`baseline CPU utilization`, :term:`absolute system CPU utilization`,
      and :term:`relative system CPU utilization`.

   B-tree
      A data structure commonly used by database management systems to
      store indexes. MongoDB uses B-tree indexes.

   CAP theorem
      Given three properties of computing systems, consistency,
      availability, and partition tolerance, a distributed computing
      system can provide any two of these features, but never all
      three.

   capped collection
      A fixed-sized :term:`collection <collection>` that automatically
      overwrites its oldest entries when the collection reaches its maximum size.
      The MongoDB :term:`oplog` that is used in :term:`replication` is a
      capped collection. See :doc:`/core/capped-collections`.

   cardinality
      The measure of the number of elements within a set of values.
      For example, the set ``A = { 2, 4, 6 }`` contains 3 elements,
      and has a cardinality of 3. See :ref:`shard-key-cardinality`.

   cartesian product
      The result of combining two data sets where the combined set
      contains every possible combination of values. 

   cfq
      Complete Fairness Queueing (cfq) is an I/O operation scheduler
      that allocates bandwidth for incoming request processes.

   checksum
      A calculated value used to ensure data integrity.
      The :term:`md5` algorithm is sometimes used as a checksum.

   chunk
      A contiguous range of :term:`shard key` values within a
      :term:`shard`. Chunk ranges are inclusive of the lower boundary
      and exclusive of the upper boundary. MongoDB splits chunks when
      they grow bigger than the configured chunk size. The default chunk
      size is 128 megabytes. MongoDB migrates chunks when a shard
      contains too many chunks of a collection relative to other shards.
      For more details, see :ref:`sharding-data-partitioning`,
      :ref:`sharding-balancing`, and :ref:`sharded-cluster-balancer`.

   client
      The application layer that uses a database for data persistence
      and storage. :term:`Drivers <driver>` provide the interface
      level between the application layer and the database server.

      A client can also be a single thread or process.

   client affinity
      A consistent client connection to a specified data source.

   cloud backups      
      Localized cluster :term:`backup` storage using the native
      :term:`snapshot` functionality of the cluster's cloud service
      provider.
      
      |service| supports {+Cloud-Backup+}s for clusters served on:
      
      - :ref:`Amazon Web Services (AWS) <amazon-aws>`
      - :ref:`Google Cloud Platform (GCP) <google-gcp>`
      - :ref:`Microsoft Azure <microsoft-azure>`
      
      .. seealso::
      
         :ref:`backup-cloud-provider`

   cluster
      Set of nodes comprising a MongoDB :term:`deployment`. Clusters can
      be :term:`replica sets <replica set>` or :term:`sharded
      deployments<sharded cluster>`.

      .. seealso::
      
         :term:`sharded cluster`

   cluster class     
      *Configurable for M40+ clusters hosted on AWS.*
      
      Storage class of your cluster. Your selected class affects cluster
      storage performance and cluster costs. You can choose one of the
      following classes:
      
      - :guilabel:`Low CPU`
      - :guilabel:`General`
      - :guilabel:`Local NVMe SSD`
      
      .. seealso::
      
         - :ref:`create-cluster-storage`
         - :term:`NVMe storage`

   cluster tier
      Dictates the memory, storage, vCPUs, and |iops| specification for 
      each data-bearing server in the cluster. Cluster storage size and
      overall performance increase as the cluster tier increases.
      
      .. seealso::
      
         - :ref:`create-cluster-instance`
         - :ref:`sizing`

   clustered collection
      A :term:`collection` that stores documents ordered by a
      :ref:`clustered index <db.createCollection.clusteredIndex>` key.
      See :ref:`clustered-collections`.

   cluster-to-cluster sync
      Synchronizes data between :term:`sharded clusters <sharded
      cluster>`. Also known as C2C sync.

   CMK
      Abbreviation of Customer Master Key, see 
      :term:`Customer Master Key`.

   collection
      A grouping of MongoDB :term:`documents <document>`. A collection
      is the equivalent of an :term:`RDBMS` table. A collection is
      in a single :term:`database`. Collections do not enforce a
      schema. Documents in a collection can have different fields.
      Typically, documents in a collection have a similar or related
      purpose. See :ref:`faq-dev-namespace`.

   collection scan
      Collection scans are a query execution strategy where MongoDB must
      inspect every document in a collection to see if it matches the
      query criteria. These queries are very inefficient and don't use
      indexes. See :doc:`/core/query-optimization` for details about
      query execution strategies.

   commit
      Saves data changes made after the start of the
      :dbcommand:`startSession` command. Operations within a
      :term:`transaction` are not permanent until they are committed
      with the :dbcommand:`commitTransaction` command.

   commit quorum
      During an :ref:`index build <index-operations-replicated-build>`
      the :ref:`commit quorum <createIndexes-cmd-commitQuorum>`
      specifies how many secondaries must be ready to commit their local
      index build before the primary node performs the commit.

   compound index
      An :term:`index` consisting of two or more keys. See
      :ref:`index-type-compound`.

   concurrency control
      Concurrency control ensures that database operations can be
      executed concurrently without compromising correctness.
      Pessimistic concurrency control, such as that used in systems
      with :term:`locks <lock>`, blocks any potentially
      conflicting operations even if they may not conflict.
      Optimistic concurrency control, the approach
      used by :ref:`WiredTiger <storage-wiredtiger>`, delays
      checking until after a conflict may have occurred, ending and
      retrying one of the operations in any :term:`write
      conflict`.

   connection storm
      A scenario where a driver attempts to open more connections to a
      deployment than that deployment can handle. When requests for new
      connections fail, the driver requests to establish even more
      connections in response to the deployment slowing down or failing
      to open new connections. These continuous requests can overload
      the deployment and lead to outages.

   config database
      An internal database with metadata for a :term:`sharded cluster`.
      Typically, you don't modify the ``config`` database. For more
      information about the ``config`` database, see
      :doc:`/reference/config-database`.

   config server
      A :binary:`~bin.mongod` instance that stores all the metadata
      associated with a :term:`sharded cluster`.
      See :ref:`sharding-config-server`.

   config shard
      A ``mongod`` instance that stores all the metadata
      associated with a :term:`sharded cluster` and can also store
      application data. See
      :ref:`sharded-cluster-config-server-config-shards`.

   connection pool
     A cache of database connections maintained by the driver. The cached 
     connections are re-used when connections to the database are 
     required, instead of opening new connections.

   container
      A collected set of software and its dependent libraries that are
      packaged together to make transferring between computing
      environments easier. Containers run as compartmentalized processes
      on your operating system, and can be given their own resource
      constraints. Common container technologies are Docker and
      Kubernetes.

   contention factor
      Multiple operations attempting to modify the same resource, such as a
      document field, cause conflicts that delay operations. The
      contention factor is a setting used with {+qe+} to internally
      partition encrypted field/value pairs and optimize operations.
      See :ref:`contention <qe-contention>`.

   cosine similarity 
      Metric that uses the angle between two vectors to determine the
      similarity between those vectors. Cosine similarity is sensitive
      to vector orientation. You can use cosine similarity function when
      indexing your vector embeddings for {+avs+}. If the vectors are
      normalized to unit length, use :term:`dotProduct similarity`
      function instead.  

   CPU steal
      The percentage by which the CPU usage exceeds the guaranteed baseline CPU
      credit accumulation rate. CPU steal is relevant for cloud providers that
      rely on the credit model in their bursting strategy. CPU credits are units
      of CPU utilization that you accumulate. The credits accumulate at a
      constant rate to provide a guaranteed level of performance. You can use
      these credits for additional CPU performance. When the credit balance is
      exhausted, MongoDB only provides the guaranteed baseline of CPU
      performance and displays the amount of excess as steal percent See also
      :term:`relative system CPU utilization`, :term:`baseline CPU utilization`,
      and :term:`burstable instances`.

   CRUD
      An acronym for the fundamental operations of a database: Create,
      Read, Update, and Delete. See :ref:`crud`.

   CSV
      A text data format with comma-separated values.
      CSV files can be used to exchange data between relational
      databases because CSV files have tabular data. You can
      import CSV files using :binary:`~bin.mongoimport`.

   cursor
      A pointer to the result set of a :term:`query`. Clients can
      iterate through a cursor to retrieve results. By default, cursors 
      not opened within a session automatically timeout after 10 
      minutes of inactivity. Cursors opened in a session close with 
      the end or timeout of the session. 
      See :ref:`cursors`.

   Customer Master Key
      A key that encrypts your :term:`Data Encryption Key`. 
      The customer master key must be hosted in a remote key 
      provider.

   custom role
      Custom set of MongoDB :term:`privilege actions <action>` and MongoDB
      :term:`roles <role>` that you can save and assign to a 
      :term:`database user`. Create custom roles when
      |service|'s :ref:`built-in roles
      <atlas-user-privileges>` don't describe your desired set of
      privileges.
      
      .. seealso::
      
         :ref:`mongodb-roles`

   daemon
      A background, non-interactive process.

   data directory
      The file system location where :binary:`~bin.mongod` stores data
      files. :setting:`~storage.dbPath` specifies the data directory.

   Data Encryption Key
      A key you use to encrypt the fields in your MongoDB 
      documents. The **encrypted** Data Encryption Key is stored in your 
      Key Vault collection. The Data Encryption Key is 
      encrypted by the :term:`Customer Master Key`.

   Data Explorer
      Tool within |service| to view and interact with cluster data.
      You can also use the Data Explorer to manage indexes and run
      aggregation pipelines to process your data.
      
      .. seealso::
      
         :ref:`atlas-ui`

   Data Federation
      MongoDB's solution for querying data stored in low-cost S3 
      buckets, |service| clusters, and |http| endpoints using the
      MongoDB Query Language. Analytics applications can use {+adf+} to
      make use of archived data for their data processing needs.
      
      .. seealso::
      
         :ref:`Atlas Data Federation <atlas-data-federation>`

   database exfiltration
      Database exfiltration refers to an authorized party taking data from
      a secured system and either sharing it with an unauthorized party or
      storing it on an unsecured system. This may be malicious or accidental.

   database user
      Credentials used to authenticate a client to access a MongoDB
      {+database-deployment+}. You can assign :ref:`privileges
      <atlas-user-privileges>` to a database user to determine that
      user's access level to a {+database-deployment+}. Database users
      are different from :term:`Atlas users <Atlas user>`. Database
      users have access to MongoDB deployments, not the |service|
      application.

      .. seealso::

         :ref:`mongodb-users`

   data files
      Store document data and indexes. The :setting:`~storage.dbPath`
      option specifies the file system location for the data files. 

   data ingestion pipeline
      Workflow for organizing and transforming data by using |rag| and
      storing it in a vector database such as |service|.

   data partition
      A distributed system architecture that splits data into ranges.
      :term:`Sharding <sharding>` uses partitioning. See
      :ref:`sharding-data-partitioning`.

   data-center awareness
      A property that allows clients to address members in a system
      based on their locations. :term:`Replica sets <replica set>`
      implement data-center awareness using :term:`tagging <tag>`. See
      :doc:`/data-center-awareness`.

   database
      A container for :term:`collections <collection>`.
      Each database has a set of files in the file
      system. One MongoDB server typically has multiple
      databases.

   database command
      A MongoDB operation, other than an insert, update, remove, or
      query. For a list of database commands, see
      :doc:`/reference/command`. To use database commands, see
      :ref:`issue-commands`.

   database profiler
      A tool that, when enabled, keeps a record on all long-running
      operations in a database's ``system.profile`` collection. The
      profiler is most often used to diagnose slow queries. See
      :ref:`database-profiling`.

   dbpath
      The location of MongoDB's data file storage. See
      :setting:`~storage.dbPath`.

   DDL (Data Definition Language)
      DDL includes commands that create and modify collections and
      indexes.

   dead letter queue
      A dead letter queue is a collection within an |service| 
      database that stores documents that throw errors during 
      ingestion. 

   dedicated config server
      A ``mongod`` instance that only stores all the metadata associated 
      with a :term:`sharded cluster`.

   {+dedicated-cluster+}
      Cluster category containing clusters of tier ``M10`` and greater.

      .. list-table::
         :widths: 20 80
         :header-rows: 1
 
         * - Tier
           - Recommended environments

         * - ``M10`` and ``M20``
           - 

             - Development
             - Low-traffic production

         * - ``M30`` and greater
           - Production

   delayed member
      A :term:`replica set` member that cannot become primary and
      applies operations at a specified delay. The delay is useful for
      protecting data from human error (unintentionally deleted
      databases) or updates that have unforeseen effects on the
      production database. See :ref:`replica-set-delayed-members`.

   DEK
      Data Encryption Key. For more details, see 
      :term:`Data Encryption Key`.

   dense vectors 
      Numeric representation of data where most or all of the dimensions
      contain non-zero values. {+avs+} uses dense vectors, which are
      packed with more data, to capture more complex relationships. 

   deployment
      A group of MongoDB servers containing your data.
      |service|-managed {+database-deployments+} are {+clusters+}
      (:term:`replica sets <replica set>` or
      :term:`sharded clusters <sharded cluster>`).

   dimensions 
      Number of components or elements that make up the features or
      attributes of data in multi-dimensional space. {+avs+} supports up
      to ``4096`` dimensions at index-time and query-time.

   document
      A record in a MongoDB :term:`collection` and the basic unit of
      data in MongoDB. Documents are analogous to :term:`JSON` objects
      but exist in the database in a more type-rich format known as
      :term:`BSON`. See :doc:`/core/document`.

   dot notation
      MongoDB uses the dot notation to access the elements of an array
      and to access the fields of an embedded document. See
      :ref:`document-dot-notation`.

   dotProduct similarity
      Measures similarity between two vectors in multi-dimensional
      space and returns a scalar value, which is positive when the
      vectors point in roughly the same direction, negative when the
      vectors point in opposite direction, and zero when the vectors
      have no similarity. {+avs+} supports using ``dotproduct``
      similarity function when searching for nearest neighbors. We
      recommend this similarity function instead of cosine similarity if
      the vectors are normalized to unit length. 

   draining
      The process of removing or "shedding" :term:`chunks <chunk>` from
      one :term:`shard` to another. Administrators must drain shards
      before removing them from the cluster. See
      :doc:`/tutorial/remove-shards-from-cluster`.

   driver
      A client library for interacting with MongoDB in a particular
      computer language. See :driver:`driver </>`.

   durable
      A write operation is durable when it persists after a shutdown (or
      crash) and restart of one or more server processes. For a single
      :binary:`~bin.mongod` server, a write operation is considered
      durable when it has been written to the server's :term:`journal`
      file. For a :doc:`replica set </replication>`, a write operation
      is considered durable after the write operation achieves
      durability on a majority of voting nodes and written to a majority
      of voting nodes' journals.

   electable node
      Node which is eligible to become the :term:`primary` member of
      your :term:`replica set`. |service| prioritizes nodes in the
      :term:`highest priority region` for primary eligibility during
      elections. To ensure reliable elections, the total number of
      electable nodes across an entire region must be 3, 5, or 7.
   
   election
      The process where members of a :term:`replica set` select a
      :term:`primary` on startup and in the event of a failure. See
      :ref:`replica-set-elections`.

   embedding 
      Representation of data such as text, images, audio, video,
      and so on as an array of numbers, which can be interpreted as
      coordinates in multi-dimensional space. |service| supports storing
      embeddings in an |service| {+cluster+} and {+avs+} supports indexing
      and querying vector embeddings of up to ``4096`` dimensions. 

   {+enc-schema+}
      In :ref:`{+qe+} <qe-manual-feature-qe>`, the :ref:`JSON schema <qe-encryption-schema>` 
      that defines which fields are queryable and which query types are 
      permitted on those fields.

   encryption key
      Random string of bits generated specifically to encrypt and
      decrypt data.
      
      |service| :authrole:`Project Owners <Project Owner>` can
      configure an additional layer of encryption on their data in
      addition to the default :ref:`encryption at rest
      <security-kms-encryption>` that |service| provides. Project
      owners can use their |service|-compatible customer key management
      provider with the MongoDB :manual:`encrypted storage engine
      </core/security-encryption-at-rest>`.
      
      |service| supports the following customer key management providers
      when configuring Encryption at Rest:
      
      - :ref:`Amazon Web Services Key Management Service <security-aws-kms>`
      - :ref:`Azure Key Vault <security-azure-kms>`
      - :ref:`Google Cloud Platform Key Management Service <security-gcp-kms>`
      
      .. seealso::
      
         :ref:`security-kms-encryption`

   explicit encryption
      When using :term:`In-Use Encryption`, explicitly specifying the
      encryption or decryption operation, keyID, and
      query type (for {+qe+}) or algorithm (for {+csfle+}) when working
      with encrypted data. Compare to :term:`automatic encryption`.

   unix epoch
      January 1st, 1970 at 00:00:00 UTC. Commonly used in expressing time,
      where the number of seconds or milliseconds since this point is counted.

   endianness
      In computing, endianness refers to the order in which bytes are 
      arranged. This ordering can refer to transmission over a 
      communication medium or more commonly how the bytes are ordered 
      in computer memory, based on their significance and position. 
      For details, see :term:`big-endian` and :term:`little-endian`.

   envelope encryption
      An encryption procedure where data is encrypted using a
      :term:`Data Encryption Key` and the data encryption key is
      encrypted by another key called the :term:`Customer Master Key`.
      The encrypted keys are stored as :term:`BSON` documents in a
      MongoDB collection called the KeyVault.

   euclidean similarity 
      Formula to calculate the similarity by using the distance between
      two vectors in multi-dimensional space. Euclidean distance is
      sensitive to the magnitude of the vectors. {+avs+} supports using
      ``euclidean`` similarity function for indexing vectors and when
      searching for nearest neighbors. 

   eventual consistency
      A property of a distributed system that allows changes to the
      system to propagate gradually. In a database system, this means
      that readable members aren't required to have the latest
      updates.

   expression
      A component of a query that resolves to a value. Expressions are
      stateless, meaning they return a value without mutating any of the
      values used to build the expression.

      .. include:: /includes/expression-components.rst

   failover
      The process that allows a :term:`secondary` member of a
      :term:`replica set` to become :term:`primary` in the event of a
      failure. See :ref:`replication-auto-failover`.

   field
      A name-value pair in a :term:`document <document>`. A document has
      zero or more fields. Fields are analogous to columns in relational
      databases. See :ref:`document-structure`.

   field path
      Path to a field in a document. To specify a field path, use a
      string that prefixes the field name with a dollar sign (``$``).

   firewall
      A system level network filter that restricts access based on
      IP addresses and other parameters. Firewalls are part of a
      secure network. See :ref:`security-firewalls`.

   free tier
      Free-to-use cluster tier that provides a small-scale development
      environment to host your data. {+Free-clusters+} never expire,
      and provide access to a :ref:`subset <atlas-free-tier>` of Atlas
      features and functionality. {+Free-clusters+} might also be
      referred to by their instance size, ``M0``.
      
      .. seealso::
      
         - :ref:`atlas-getting-started`
         - :ref:`atlas-free-tier`

   fsync
      A system call that flushes all dirty, in-memory pages to storage.
      As applications write data, MongoDB records the data in the
      storage layer.

      .. include:: /includes/checkpoints.rst

   geohash
      A geohash value is a binary representation of the location on a
      coordinate grid. See :ref:`geospatial-indexes-geohash`.

   GeoJSON
      A :term:`geospatial` data interchange format based on JavaScript
      Object Notation (:term:`JSON`). GeoJSON is used in
      :ref:`geospatial queries <geospatial-queries>`. For
      supported GeoJSON objects, see :ref:`geo-overview-location-data`.
      For the GeoJSON format specification, see
      `<https://tools.ietf.org/html/rfc7946#section-3.1>`_.

   geospatial
      Relating to geographical location. See :doc:`/geospatial-queries`.

   global cluster
      Clusters with defined geographic zones to support location-aware
      read and write operations for globally distributed application
      instances and clients. You can enable global sharding on clusters
      of tier ``M30`` and greater.
      
      .. seealso::
      
         - :ref:`global-clusters`
         - :ref:`create-new-global-write-cluster`

   global write zone
      Geographic zone representing a subset of your global cluster
      distribution. Each :term:`global cluster` supports up to 9
      distinct global write zones. Each zone consists of one
      :term:`highest priority region` and one or more
      :term:`electable <electable node>`,
      :term:`read-only <read-only node>`, or
      :term:`analytics <analytics node>` regions.

      The available geographic regions depend on the selected cloud
      service provider.

   GridFS
      A convention for storing large files in a MongoDB database. All of
      the official MongoDB drivers support the GridFS convention, as does the
      :binary:`~bin.mongofiles` program. See :doc:`/core/gridfs`.

   group
      See :term:`project`.

   group ID
      See :term:`project ID`.

   hashed shard key
      A type of :term:`shard key` that uses a hash of the value
      in the shard key field to distribute documents among members of
      the :term:`sharded cluster`. See :ref:`index-type-hashed`.

   health manager
     A health manager runs health checks on a :term:`health manager 
     facet` at a specified :ref:`intensity level 
     <health-managers-intensity-levels>`. The health manager checks are run at 
     specified time intervals. A health manager can be configured to 
     move a failing :ref:`mongos <mongos>` out of a cluster 
     automatically.

   health manager facet
      A set of features that a :term:`health
      manager` can be configured to run health checks for. For 
      example, you can configure a health manager to monitor and
      manage DNS or LDAP cluster health issues automatically. See 
      :ref:`health-managers-facets` for details.

   hidden member
      A :term:`replica set` member that cannot become :term:`primary`
      and are invisible to client applications. See
      :ref:`replica-set-hidden-members`.

   high availability
     High availability indicates a system designed for durability,
     redundancy, and automatic failover. Applications
     supported by the system can operate without
     downtime for a long time period. MongoDB
     :ref:`replica sets <replication>` support
     high availability when deployed according to the
     :ref:`best practices <production-checklist-replication>`.

     For guidance on replica set deployment architecture, see
     :ref:`replica-set-architecture`.

   hierarchical navigable small worlds graphs
      Algorithm for performing efficient nearest neighbor search in
      multi-dimensional space. {+avs+} performs |ann| search with
      |hnsw|.

   highest priority region
      Region in a :term:`multi-region cluster` which |service|
      prioritizes for :term:`primary` eligibility during elections.
      
      .. seealso::
      
         :ref:`create-cluster-multi-region`
      
   hybrid search 
      Method of combining different search methods, such as a full-text
      and a semantic search, to take advantage of their respective
      strengths. The results are combined by using a technique such as
      Reciprocal Rank Fusion (RRF).

   idempotent
      An operation produces the same result with the
      same input when run multiple times.

   in-memory sort
      A sort that must be performed in memory before the output is
      returned. In-memory sorts may impact performance for large data sets. Use an 
      :term:`indexed sort` to avoid an in-memory sort.

      See :ref:`sort-index-use` for more information on indexed sort
      operations.

   impact
      Estimated performance improvement of an index that |pa| suggests.
      
      .. seealso::
      
         :ref:`pa-index-ranking`

   index
      A data structure that optimizes queries. See :doc:`/indexes`.

   index bounds
      The range of index values that MongoDB searches when using an
      index to run a query. To learn more, see
      :ref:`multikey-index-bounds`.

   init script
      A shell script used by a Linux platform's
      :term:`init system` to start, restart, or stop a :term:`daemon`
      process. If you installed MongoDB using a package manager, an init
      script is provided for your system as part of the
      installation. See the respective
      :ref:`Installation Guide <tutorial-installation>` for your operating
      system.

   init system
      The init system is the first process started on a Linux platform
      after the kernel starts, and manages all other processes on the
      system. The init system uses an :term:`init script` to start,
      restart, or stop a :term:`daemon` process, such as
      :binary:`~bin.mongod` or :binary:`~bin.mongos`. Recent Linux
      versions typically use the **systemd** init system and the
      ``systemctl`` command. Older Linux versions typically use the
      **System V** init system and the ``service`` command. See
      the Installation Guide for your operating system.

   initial sync
      The :term:`replica set` operation that replicates data from an
      existing replica set member to a new replica set member. See
      :ref:`replica-set-initial-sync`.

   intent lock
      A :term:`lock` on a resource that indicates the lock holder
      will read from (intent shared) or write to (intent
      exclusive) the resource using :term:`concurrency control` at
      a finer granularity than that of the resource with the intent
      lock. Intent locks allow concurrent readers and writers of a
      resource. See :ref:`faq-concurrency-locking`.

   interface endpoint
      |aws| |vpc| endpoint with a private IP address
      that sends traffic to the |service| private endpoint service over |aws| PrivateLink.
      
      .. seealso::
      
         :ref:`private-endpoint-concepts`

   In-Use Encryption
      Encryption that secures data when transmitted, stored, and 
      processed, and enables supported queries on that encrypted data. 
      MongoDB provides two approaches to In-Use Encryption: 
      :ref:`{+qe+} <qe-manual-feature-qe>` and
      :ref:`{+csfle+} <manual-csfle-feature>`.

   IP access list
      List of |ipaddr| addresses and |cidr| blocks with access to {+clusters+}
      within an |service| :term:`project`. For client connections over the
      public Internet, |service| allows connections to a {+cluster+} only
      from entries in the corresponding project's IP access list.
      The access list may have up to 200 entries.

      |service| also allows client connections over nonpublic networking,
      such :ref:`network peering connections <vpc-peering>` or private
      endpoints. These types of connections work irrespective of the
      IP access list. To learn more, see :ref:`vpc-peering` and
      :ref:`private-endpoint-concepts`.

   IPv6
      A revision to the IP (Internet Protocol) standard with a
      large address space to support Internet hosts.

   ISODate
     The international date format used by :binary:`~bin.mongosh`
     to display dates. The format is ``YYYY-MM-DD HH:MM.SS.millis``.

   indexed sort
      A sort where an index provides the sorted result. Sort operations that 
      use an index often have better performance than an :term:`in-memory sort`. 
      See :ref:`Use Indexed to Sort Query Results <sorting-with-indexes>` for 
      more information.

   interrupt point
     A point in an operation when it can
     safely end. MongoDB only ends an operation
     at designated interrupt points. See
     :doc:`/tutorial/terminate-running-operations`.

   JavaScript
      A scripting language. :mongosh:`mongosh </>`, the legacy
      :binary:`mongo <bin.mongo>` shell, and certain server
      functions use a JavaScript interpreter. See
      :doc:`/core/server-side-javascript` for more information.

   journal
      A sequential, binary transaction log used to bring the database
      into a valid state in the event of a hard shutdown.
      Journaling writes data first to the journal and then to the core
      data files. MongoDB enables journaling by default for 64-bit
      builds of MongoDB version 2.0 and newer. Journal files are
      pre-allocated and exist as files in the :term:`data directory`.
      See :doc:`/core/journaling/`.

   JSON
      JavaScript Object Notation. A plain text format
      for expressing structured data with support in many programming
      languages. For more information, see `<http://www.json.org>`_.
      Certain MongoDB tools render an approximation of MongoDB
      :term:`BSON` documents in JSON format. See
      :doc:`/reference/mongodb-extended-json`.

   JSON document
      A :term:`JSON` document is a collection of fields and values in a
      structured format. For sample JSON documents, see
      `<http://json.org/example.html>`_.

   JSONP
      :term:`JSON` with padding. Refers to a method of injecting JSON
      into applications. **Presents potential security concerns**.

   jumbo chunk
      A :term:`chunk` that grows beyond the :ref:`specified chunk size
      <sharding-chunk-size>` and cannot split into smaller chunks. For
      more details, see :ref:`jumbo-chunks`.

   key material
      The random string of bits used by an encryption algorithm to
      encrypt and decrypt data.

   key vault collection
      A MongoDB collection that stores the encrypted 
      :term:`Data Encryption Keys <Data Encryption Key>` as 
      :term:`BSON` documents.

   K-nearest neighbor search
      Given a set of points *P* with a defined similarity function *S*,
      for a query point *q*, finds the set of *k* points in *P* with the
      best values of *S*(*p*, *q*). {+avs+} |enn| search returns the
      exact top *k* points and |ann| search returns *k* points that are
      similar to *q*, but not necessarily the *k* most similar to *q*. 

   LDAP
      Cross-platform protocol used to authenticate users and authorize
      them to access data on a cluster. You can use |service| to manage
      user authentication and authorization from all MongoDB clients
      using your own |ldap| server over |tls|. A single |ldaps|
      configuration applies to all clusters in an |service| project.

   least privilege
      An authorization policy that grants a user only the access
      that is essential to that user's work.

   legacy coordinate pairs
      The format used for :term:`geospatial` data before MongoDB
      version 2.4. This format stores geospatial data as points on a
      planar coordinate system (for example, ``[ x, y ]``). See
      :doc:`/geospatial-queries`.

   little-endian
      A byte order in which the least significant byte (little end) 
      of a multibyte data value is stored at the lowest memory address.

      .. figure:: /images/little-endian.png
         :alt: Little endian example figure
         :figwidth: 400px

   LineString
      A LineString is an array of two or more positions. A
      closed LineString with four or more positions is called a
      LinearRing, as described in the GeoJSON LineString specification:
      `<https://tools.ietf.org/html/rfc7946#section-3.1.4>`_. To use a
      LineString in MongoDB, see
      :ref:`geospatial-indexes-store-geojson`.

   link-token
      String that contains the information necessary to connect from
      |com| to |service| during a live migration from a |com| deployment
      to a cluster in |service|.

   live migration
      Process to seamlessly move an existing source replica set or
      sharded cluster to |service|. During the live migration process,
      |service| keeps the target cluster in sync with the remote source
      until you cut your applications over to the |service| cluster.

      .. seealso::

         :ref:`import-strategies`
   
   lock
      MongoDB uses locks to ensure that :ref:`concurrency <faq-concurrency>`
      does not affect correctness. MongoDB uses :term:`read locks
      <read lock>`, :term:`write locks <write lock>` and
      :term:`intent locks <intent lock>`. For more information, see
      :ref:`faq-concurrency-locking`.

   log files
      Contain server events, such as incoming connections, commands run,
      and issues encountered. For more details, see
      :ref:`log-messages-ref`.

   LVM
      Logical volume manager. LVM is a program that abstracts disk
      images from physical devices and provides a number of raw disk
      manipulation and snapshot capabilities useful for system
      management. For information on LVM and MongoDB, see
      :ref:`lvm-backup-and-restore`.

   maintenance window
      Day and time of the week when |service| should start weekly
      maintenance on your cluster. You can set your maintenance window
      in your :ref:`Project Settings <project-settings>`.
      
      .. important:: Maintenance Window Considerations

         Urgent Maintenance Activities
         Urgent maintenance activities such as security patches cannot
         wait for your chosen window. |service| will start those
         maintenance activities when needed.

         Ongoing Maintenance Operations
         Once maintenance is scheduled for your cluster, you cannot change
         your maintenance window until the current maintenance efforts have
         completed.

         Maintenance Requires Replica Set Elections
         |service| performs maintenance the same way as the maintenance
         procedure described in the
         :manual:`MongoDB Manual
         </tutorial/perform-maintence-on-replica-set-members/>`. This
         procedure requires at least one
         :manual:`replica set election </core/replica-set-elections>`
         during the maintenance window per replica set.

         Maintenance Starts As Close to the Hour As Possible
         Maintenance always begins as close to the scheduled hour as
         possible, but in-progress cluster updates or unexpected system
         issues could delay the start time.
   
   mapping type
      A structure in programming languages that associate keys with
      values. Keys may contain embedded pairs of keys and values
      (for example, dictionaries, hashes, maps, and associative arrays).
      The properties of these structures depend on the language
      specification and implementation. Typically, the order of keys in
      mapping types is arbitrary and not guaranteed.

   map-reduce
      An aggregation process that has a "map"
      phase that selects the data and a "reduce" phase that transforms the
      data. In MongoDB, you can run arbitrary aggregations over data
      using map-reduce. For the map-reduce implementation, see
      :doc:`/core/map-reduce`. For all approaches to aggregation,
      see :ref:`aggregation`.

   md5
      A hashing algorithm that calculates a :term:`checksum` for the
      supplied data. The algorithm returns a unique value
      to identify the data. MongoDB uses md5 to identify chunks of data
      for :term:`GridFS`. See :doc:`/reference/command/filemd5`.

   mean
      Average of a set of numbers.

   median
      In a dataset, the median is the percentile value where 50% of the
      data falls at or below that value.

   member
      An individual :term:`mongod` process. A :term:`replica set` has
      multiple members. A member is also known as a :term:`node`.

   metadata collection
      In :ref:`{+qe+} <qe-manual-feature-qe>`, the internal collections
      MongoDB uses to enable querying on encrypted fields. See
      :ref:`Metadata Collections <qe-metadata-collections>`.

   MIME
      Multipurpose Internet Mail Extensions. A standard set of type and
      encoding definitions used to declare the encoding and type of data
      in multiple data storage, transmission, and email contexts. The
      :binary:`~bin.mongofiles` tool provides an option to specify a MIME
      type to describe a file inserted into :term:`GridFS` storage.

   mode
      Number that occurs most frequently in a set of numbers.

   mongo
      The legacy MongoDB shell. The :binary:`~bin.mongo` process starts
      the legacy shell as a :term:`daemon` connected to either a
      :binary:`~bin.mongod` or :binary:`~bin.mongos` instance. The shell
      has a JavaScript interface.

      Starting in MongoDB v5.0, :binary:`~bin.mongo` is deprecated and
      :mongosh:`mongosh </>` replaces :binary:`~bin.mongo` as the
      client shell. See :mongosh:`mongosh </>`.

   mongod
      The MongoDB database server. The :binary:`~bin.mongod` process
      starts the MongoDB server as a :term:`daemon`. The MongoDB server
      manages data requests and background operations. See
      :doc:`/reference/program/mongod`.

   MongoDB Charts
      Visualization tool for your |service| data. You can launch MongoDB
      Charts from your |service| cluster and view your data with the
      Charts application to begin visualizing your data.
      
      .. seealso::
      
         `MongoDB Charts <https://www.mongodb.com/docs/charts/>`__

   mongos
      The MongoDB sharded cluster query router. The
      :binary:`~bin.mongos` process starts the MongoDB router as a
      :term:`daemon`. The MongoDB router acts as an interface
      between an application and a MongoDB :term:`sharded cluster` and
      handles all routing and load balancing across the cluster. See
      :doc:`/reference/program/mongos`.

   mongosh
      MongoDB Shell. :mongosh:`mongosh </>` provides a shell
      interface to either a :binary:`~bin.mongod` or a
      :binary:`~bin.mongos` instance.

      Starting in MongoDB v5.0, :mongosh:`mongosh </>` replaces
      :binary:`~bin.mongo` as the preferred shell.

   multi-region cluster
      |service| :term:`cluster` spanning multiple geographic regions.
      Multi-region clusters can increase availability and improve
      performance by routing application queries to the most appropriate
      geographic regions.
      
      Multi-region clusters must contain
      :term:`electable nodes <electable node>`.

      Multi-region clusters may contain
      :term:`read-only nodes <read-only node>` and
      :term:`analytics nodes <analytics node>`.

   namespace
      A namespace is a combination of the database name and
      the name of the collection or index:
      ``<database-name>.<collection-or-index-name>``. All documents
      belong to a namespace. See :ref:`faq-dev-namespace`.

   Namespace Insights
      |service| tool that monitors collection-level 
      :manual:`query latency </reference/operator/aggregation/collStats/#latencystats-document>`. You can view query latency metrics and 
      statistics for certain hosts and operation types. Manage pinned 
      namespaces and choose up to five namespaces to show in the 
      corresponding query latency charts.
      
      .. seealso::
      
         :ref:`namespace-insights`

   natural order
      The order ``recordIds`` are created and stored in the 
      :ref:`WiredTiger <storage-wiredTiger>` index. The default sort 
      order for a :term:`collection scan` run on a single instance is 
      natural order.

      In replica sets, natural order is not guaranteed to be consistent 
      and can differ between members.

      In sharded collections, natural order is not defined. However, 
      using :operator:`$natural` still forces each shard to perform a 
      collection scan.

      For details, see :ref:`return-natural-order`.

   network partition
      A network failure that separates a distributed system into
      partitions such that nodes in one partition cannot communicate
      with the nodes in the other partition.

      Sometimes, partitions are partial or asymmetric. An example
      partial partition is the a division of the nodes of a network
      into three sets, where members of the first set cannot
      communicate with members of the second set, and the reverse, but
      all nodes can communicate with members of the third set.
      
      In an
      asymmetric partition, communication may be possible only when it
      originates with certain nodes. For example, nodes on one side of
      the partition can communicate with the other side only if they
      originate the communications channel.

   network peering connection
      Process by which two Internet networks connect and exchange
      traffic. You can directly peer your |vpc| with the |service|
      |vpc| created for your MongoDB clusters. Using network peering,
      your application servers can directly connect to |service| while
      remaining isolated from public networks.
      
      .. seealso::
      
         :ref:`vpc-peering`

   node
      An individual :term:`mongod` process. A :term:`replica set` has
      multiple nodes. A node is also known as a :term:`member`.

   noop
      No Operation (noop), is an I/O operation scheduler that allocates
      I/O bandwidth for incoming processes based on a first in, first out 
      queue.

   NVMe
      NVMe (Non-Volatile Memory Express) is a protocol for accessing
      high-speed storage media. 

   NVMe storage
      *Available for M40+ clusters hosted on AWS*
      
      For applications hosted on |aws| which require low-latency and
      high-throughput IO, you can use the NVMe :term:`cluster class`.
      The NVMe cluster class leverages a unique data protocol to
      greatly improve data access speeds.
      
      NVMe clusters use a :manual:`hidden secondary node
      </core/replica-set-hidden-member/>` consisting of a provisioned
      volume with high throughput and |iops| to facilitate backup.
      
      .. seealso::
      
         :ref:`create-cluster-storage`

   storage order
      See :term:`natural order`.

   ObjectId
      A 12-byte :term:`BSON` type that is unique
      within a :term:`collection`. The ObjectId is generated using the
      timestamp, computer ID, process ID, and a local process incremental
      counter. MongoDB uses ObjectId values as the default values for
      :term:`_id` fields.

   object identifier
      See :term:`ObjectId`.

   operator
      A keyword beginning with ``$`` used to express :abbr:`MQL
      (MongoDB Query Language)` components such as query predicates,
      expressions, and aggregation stages. For example, ``$gt`` is the
      MQL "greater than" operator. For available operators, see
      :ref:`mql-reference`.

   operation log
      See :term:`oplog`.

   operation metadata
      Information about the execution of processes rather than their content,
      such as the number and time of insert, update, and delete operations.

   operation rejection filter
      A rejected :ref:`query shape <query-shapes>`. For more
      details, see :ref:`operation-rejection-filters`.

   operation time
      See :term:`optime`.

   operational node
      Any :term:`electable node` or a :term:`read-only node` in your |service| {+cluster+}.

   oplog
      A :term:`capped collection` that stores an ordered history of
      logical writes to a MongoDB database. The oplog is the
      basic mechanism enabling :term:`replication` in MongoDB.
      See :doc:`/core/replica-set-oplog`.

   oplog buffer collection
      A temporary collection created during :ref:`resharding 
      <sharding-resharding>` operations that stores :term:`oplog` entries from a 
      donor shard. 
      
      Oplog buffer collections ensure that recipient shards
      can access oplog entries when they get deleted from the donor shard.
      Oplog buffer collections are removed when resharding is complete.

   oplog hole
      A temporary gap in the oplog because the oplog writes aren't in
      sequence. Replica set :ref:`primaries <replica-set-primary>` apply
      oplog entries in parallel as a batch operation. As a result,
      temporary gaps in the oplog can occur from entries that aren't
      yet written from a batch.

   oplog window
      .. include:: /includes/replication/fact-oplog-window-definition.rst

   optime
      A reference to a position in the replication :term:`oplog`. The optime
      value is a document that contains:

      .. include:: /includes/fact-optime.rst

   ordered query plan
      A query plan that returns results in the order consistent with the
      :method:`~cursor.sort()` order. See
      :ref:`read-operations-query-optimization`.

   organization
      Logical grouping of |service| :term:`projects <project>`. You can
      leverage an organization to manage billing, users, and security
      settings for the projects it contains.
      
      - Billing happens at the organization level while preserving visibility
        into usage in each project.

      - You can view all projects within an organization.

      - You can use teams to bulk assign organization users to projects within the
        organization.

      .. seealso::
      
         :ref:`organizations`

   organization ID
      Unique 24-digit hexadecimal string used to identify your
      |service| :term:`organization`. The :oas-bump-atlas-op:`Return All 
      Organizations <listorgs>` endpoint returns the ID 
      of all organizations that the authenticated user executing the 
      |api| call can access.

   orphaned document
      In a sharded cluster, orphaned documents are those documents on a
      shard that also exist in chunks on other shards. This is caused by
      a failed migration or an incomplete migration cleanup because of
      an atypical shutdown.

      Orphaned documents are cleaned up automatically after a chunk migration 
      completes. You no longer need to run ``cleanupOrphaned`` to 
      delete orphaned documents.

   orphaned cursor
      A cursor that is not correctly closed or iterated over 
      in your application code. Orphaned cursors can cause performance
      issues in your MongoDB deployment.

   passive member
      A member of a :term:`replica set` that cannot become primary
      because its :rsconf:`members[n].priority` is
      ``0``. See :doc:`/core/replica-set-priority-0-member`.

   per-CPU cache 
      A type of cache that locally stores memory for a specific CPU core. 
      Per-CPU caches are used by the new version of TCMalloc, which is 
      introduced in MongoDB 8.0.
      
   per-thread cache 
      A type of cache that locally stores memory for each application thread. 
      Per-thread caches are used by the legacy version of TCMalloc, which is 
      used in MongoDB 7.0 and earlier.

   percentile
      In a dataset, a percentile is a value where that percentage
      of the data is at or below the specified value. For details, see
      :ref:`percentile-calculation-considerations`.

   Performance Advisor
      |service| tool that monitors slow queries executed on your
      cluster and suggests indexes to improve query performance. Each
      index that the Performance Advisor suggests include an
      :term:`impact` score indicating the potential performance
      improvement that index would bring.
      
      .. seealso::
      
         :ref:`performance-advisor`

   PID
      A process identifier. UNIX-like systems assign a unique-integer
      PID to each running process. You can use a PID to inspect a
      running process and send signals to it. See
      :ref:`proc-file-system`.

   pipe
      A communication channel in UNIX-like systems allowing independent
      processes to send and receive data. In the UNIX shell, piped
      operations allow users to direct the output of one command into
      the input of another.

   pipeline
      A series of operations in an :term:`aggregation`.
      See :ref:`aggregation-pipeline`.

   plan cache query shape
      A combination of query predicate, sort, :ref:`projection
      <projection>`, and :ref:`collation <collation>`. The plan cache
      query shape allows MongoDB to identify equivalent queries and
      analyze their performance.

      For the query predicate, only the predicate structure and field
      names are used. The values in the query predicate aren't used. For
      example, a query predicate ``{ type: 'food' }`` is equivalent to
      ``{ type: 'drink' }``.

      To identify slow queries with the same plan cache query shape,
      each plan cache query shape has a hexadecimal ``planCacheShapeHash``
      value. For more information, see :ref:`query-hash-plan-cache-key`.

      .. include:: /includes/plan-cache-rename.rst

   point
      A single coordinate pair as described in the GeoJSON Point
      specification: `<https://tools.ietf.org/html/rfc7946#section-3.1.2>`_. To
      use a Point in MongoDB, see
      :ref:`geospatial-indexes-store-geojson`.

   polygon
      An array of :term:`LinearRing <LineString>` coordinate arrays, as
      described in the GeoJSON Polygon specification:
      `<https://tools.ietf.org/html/rfc7946#section-3.1.6>`_. For Polygons
      with multiple rings, the first must be the exterior ring and
      any others must be interior rings or holes.

      MongoDB does not permit the exterior ring to self-intersect.
      Interior rings must be fully contained within the outer loop and
      cannot intersect or overlap with each other. See
      :ref:`geospatial-indexes-store-geojson`.

   post-image document
      A document after it was inserted, replaced, or updated. See
      :ref:`db.collection.watch-change-streams-pre-and-post-images-example`.

   powerOf2Sizes
      A setting for each collection that allocates space for each
      :term:`document` to maximize storage reuse and reduce
      fragmentation. ``powerOf2Sizes`` is the default for :ref:`TTL
      Collections <ttl-collections>`. To change collection settings, see
      :dbcommand:`collMod`.

   prefix compression
      Reduces memory and disk consumption by storing any identical index
      key prefixes only once, per page of memory. See:
      :ref:`storage-wiredtiger-compression` for more about WiredTiger's
      compression behavior.

   pre-image document
      A document before it was replaced, updated, or deleted. See
      :ref:`db.collection.watch-change-streams-pre-and-post-images-example`.

   pre-splitting
      An operation performed before inserting data that divides the
      range of possible shard key values into chunks to facilitate easy
      insertion and high write throughput. In some cases pre-splitting
      expedites the initial distribution of documents in :term:`sharded
      cluster` by manually dividing the collection rather than waiting
      for the MongoDB :term:`balancer` to do so. See
      :doc:`/tutorial/create-chunks-in-sharded-cluster`.

   primary
      In a :term:`replica set`, the primary is the member that
      receives all write operations. See
      :ref:`replica-set-primary-member`.

   primary key
      A record's unique immutable identifier. In :term:`RDBMS` software, the primary
      key is typically an integer stored in each row's ``id`` field.
      In MongoDB, the :term:`_id` field stores a document's primary
      key, which is typically a BSON :term:`ObjectId`.

   primary shard
      Each database in a sharded cluster has a primary shard. It is the 
      default shard for all unsharded collections in the database. See
      :ref:`primary-shard`.

   priority
      A configurable value that helps determine which members in
      a :term:`replica set` are most likely to become :term:`primary`.
      See :rsconf:`members[n].priority`.

   privilege
      A combination of specified :term:`resource <resource>` and
      :term:`actions <action>` permitted on the resource. See
      :ref:`privilege <privileges>`.

   project
      Logical grouping of :term:`{+database-deployments+}
      <deployment>`. You can have multiple {+database-deployments+}
      within a single project and multiple projects within a single
      :term:`organization`.
      
      .. note::
      
         Project is synonymous with :term:`group`.

   project ID
      Unique 24-digit hexadecimal string used to identify your
      |service| :term:`project`. The :oas-bump-atlas-op:`Get All Projects 
      <listprojects>` |api| endpoint returns the ID of all 
      projects that the authenticated user executing the API call can 
      access.
      
      .. note::
      
         Project ID is synonymous with group ID.

   projection
      A document supplied to a :term:`query` that specifies the fields
      MongoDB returns in the result set. For more information about
      projections, see :ref:`projection`.

   quantization 
      Method of compressing the value of individual dimensions in a
      vector into a smaller range to reduce resource consumption and
      improve speed. {+avs+} supports indexing and querying quantized
      vectors. 

   query
      A read request. MongoDB uses a :term:`JSON` form of query language
      that includes :term:`query operators <operator>` with
      names that begin with a ``$`` character. In
      :binary:`~bin.mongosh`, you can run queries using the
      :method:`db.collection.find()` and
      :method:`db.collection.findOne()` methods. See
      :ref:`read-operations-queries`.

   query framework
      A combination of the :term:`query optimizer` and query execution engine 
      that processes an operation.

   query operator
      A keyword beginning with ``$`` in a query. For example,
      :query:`$gt` is the "greater than" operator. For a list of
      query operators, see :ref:`query operators <query-selectors>`.

   query optimizer
      A process that generates query plans. For each query, the
      optimizer generates a plan that matches the query to the index
      that returns the results as efficiently as possible. The
      optimizer reuses the query plan each time the query runs. If a
      collection changes significantly, the optimizer creates a new
      query plan. See :ref:`read-operations-query-optimization`.

   query plan
      Most efficient execution plan chosen by the query planner. For
      more details, see :ref:`query-plans-query-optimization`.

   query predicate
      An expression that returns a boolean indicating whether a document
      matches the specified query. For example, ``{ name: { $eq: "Alice"
      } }``, which returns documents that have a field ``"name"`` whose
      value is the string ``"Alice"``.

      Query predicates can contain child expressions and operators for
      more complex matching. To see available query operators, see
      :ref:`query-projection-operators-top`.

   Query Profiler
      |service| tool that diagnoses and monitors performance
      issues in your cluster. The Query Profiler can expose long-running
      queries and their performance statistics. You can filter the data
      returned by the Query Profiler to hone in on specific namespaces
      and operation types.
      
   query shape
      .. include:: /includes/new-query-shape-definition.rst

   range                                                                    
      A contiguous range of :term:`shard key` values within a               
      chunk. Data ranges include the lower boundary and             
      exclude the upper boundary. MongoDB migrates data when a              
      shard contains :ref:`too much data of a collection                    
      <sharding-migration-thresholds>` relative to other shards.            
      See :ref:`sharding-data-partitioning` and                             
      :ref:`sharding-balancing`.  

   read concern
      Specifies a level of isolation for read operations. For example,
      you can use read concern to only read data that has propagated to
      a majority of nodes in a :term:`replica set`. See
      :doc:`/reference/read-concern`.

   read preference
      A setting that determines how clients direct read operations.
      Read preference affects all replica sets, including shard replica
      sets. By default, MongoDB directs reads to :term:`primaries
      <primary>`. However, you may also direct reads to secondaries for
      :term:`eventually consistent <eventual consistency>` reads. See
      :ref:`Read Preference <read-preference>`.

   read lock
      A shared :term:`lock` on a resource such as a collection or
      database that, while held, allows concurrent readers but no
      writers. See :ref:`faq-concurrency-locking`.

   read-only node
      Replica set in a dedicated geographic region that supplements your
      :term:`electable node` regions. You can use read-only nodes to
      localize data where it is most frequently read to improve
      performance.

   Real-Time Performance Panel
      |service| monitoring service that displays current network
      traffic, database operations on your clusters, and hardware
      statistics about your host machines. Use the |rtpp| to visually
      evaluate query execution times, monitor network activity, and
      discover potential replication lag on secondary members of
      replica sets.
      
      .. seealso::
      
         :ref:`real-time-metrics-status-tab`

   recall 
      Measures the fraction of true nearest neighbors that were returned
      by an |ann| search. This measure reflects how close the algorithm
      approximates the results of |enn| search. The notation *Recall@k*
      refers to the measurement of how many of the true nearest
      neighbors were present in the top *k* results returned by {+avs+}. 

   relative system CPU utilization
      The CPU utilization relative to the amount of baseline CPU assigned to
      a cloud instance. You can calculate relative system CPU utilization
      by dividing the :term:`absolute system CPU utilization` by the amount
      of baseline CPU assigned to a cloud instance.

      MongoDB caps relative system CPU utilization at 100%. When a cloud provider
      throttles CPU utilization for a cloud instance, or bursts CPU utilization
      for an instance above the baseline amount of CPU available to that
      instance, the relative system CPU value is 100%.

      See also :term:`absolute system CPU utilization`, and :term:`burstable instances`.

   RDBMS
      Relational Database Management System. A database management
      system based on the relational model, typically using :term:`SQL`
      as the query language.

   recovering
      A :term:`replica set` member status indicating that a member
      is not ready to begin activities of a secondary or primary.
      Recovering members are unavailable for reads.

   replica set
      Group of MongoDB servers that maintain the same data set. Replica
      sets provide redundancy, high availability, and are the basis for
      all production deployments.
      
   replication
      A feature allowing multiple database servers to share the same
      data. Replication ensures data redundancy and enables load
      balancing. See :doc:`/replication`.

   replication lag
      The time period between the last operation in the
      :term:`primary's <primary>` :term:`oplog` and the last operation
      applied to a particular :term:`secondary`. You typically want
      replication lag as short as possible. See :ref:`Replication
      Lag <replica-set-replication-lag>`.

   resident memory
      The subset of an application's memory currently stored in
      physical RAM. Resident memory is a subset of :term:`virtual memory`,
      which includes memory mapped to physical RAM and to storage.

   resource
     A database, collection, set of collections, or cluster. A
     :term:`privilege` permits :term:`actions <action>` on a specified
     resource. See :ref:`resource <resource-document>`.

   role
     A set of privileges that permit :term:`actions <action>` on
     specified :term:`resources <resource>`. Roles assigned to a user
     determine the user's access to resources and operations. See
     :doc:`/security`.

   rollback
      A process that reverts write operations to ensure the consistency
      of all replica set members. See :ref:`replica-set-rollback`.

   rolling restart
      Process that restarts all nodes in the cluster in sequence. To
      maintain cluster availability, |service| restarts one node at a
      time starting with a :term:`secondary <secondary>` node.
      |service| always maintains a primary node until the rolling
      restart completes.

   scalar quantization 
      Scalar quantization involves selecting the minimum and maximum values
      across all indexed vectors within a segment for each dimension,
      and producing equally sized bins between them. The mappings for
      each of these dimensions to the bins yields the new quantized
      values. {+avs+} supports automatic scalar quantization for your
      float32 vectors, and ingestion and indexing of your scalar
      quantized vectors from embedding providers. 

   secondary
      A :term:`replica set` member that replicates the contents of the
      master database. Secondary members may run read requests, but
      only the :term:`primary` members can run write operations. See
      :ref:`replica-set-secondary-members`.

   secondary index
      A database :term:`index` that improves query performance by
      minimizing the amount of work that the query engine must perform
      to run a query. See :doc:`/indexes`.

   secondary member
      See :term:`secondary`. Also known as a secondary node.
   
   self-managed
      A MongoDB instance that is set up and maintained by an 
      individual or organization, and not an external management or 
      third-party services (such as MongoDB Atlas).

   seed list
      A seed list is used by drivers and clients (like
      :binary:`~bin.mongosh`) for initial discovery of the replica 
      set configuration. Seed lists can be provided as a list of 
      ``host:port`` pairs (see :ref:`connections-standard-connection-string-format`
      or through DNS entries.) For more information, 
      see :ref:`connections-dns-seedlist`.

   semantic search 
      Search for values that have a similar meaning to query. Semantic
      search captures the natural relationship between words or phrases
      even when there is no lexical overlap. Semantic search and vector
      search are often used interchangeably. {+avs+} supports semantic
      search on vector data stored in |service| {+clusters+}. 

   set name
      The arbitrary name given to a replica set. All members of a
      replica set must have the same name specified with the
      :setting:`~replication.replSetName` setting or the :option:`--replSet <mongod --replSet>` option.

   shard
      A single :binary:`~bin.mongod` instance or :term:`replica set`
      that stores part of a :term:`sharded cluster's <sharded cluster>`
      total data set. Typically, in a production deployment, ensure all
      shards are part of replica sets. See
      :doc:`/core/sharded-cluster-shards`.

   shard key
      The field MongoDB uses to distribute documents among members of a
      :term:`sharded cluster`. See :ref:`shard-key`.

   sharded cluster
      The set of nodes comprising a :term:`sharded <sharding>` MongoDB
      deployment. A sharded cluster consists of config servers,
      shards, and one or more :binary:`~bin.mongos`
      routing processes. See :doc:`/core/sharded-cluster-components`.

   sharding
      A database architecture that partitions data by key ranges and
      distributes the data among two or more database instances.
      Sharding enables horizontal scaling. See :doc:`/sharding`.
      
   free and flex cluster
      Cluster category containing ``Free`` (:term:`free tier`) tier clusters. 
      Free and Flex clusters are generally used for development and small 
      production workloads.
      
      .. seealso::
      
         :ref:`atlas-free-tier`

   shell helper
      A method in ``mongosh`` that has a concise
      syntax for a :ref:`database command <database-commands>`. Shell helpers
      improve the interactive experience. See
      :doc:`/reference/method`.

   similarity function 
      Measures the similarity between two vectors. {+avs+} supports
      ``euclidean``, ``cosine``, and ``dotProduct`` similarity functions.

   single-master replication
      A :term:`replication` topology where only a single database
      instance accepts writes. Single-master replication ensures
      consistency and is the replication topology used by MongoDB.
      See :doc:`/core/replica-set-primary`.

   snapshot
      .. include:: /includes/snapshot-definition.rst
      
   snappy
      A compression/decompression library to balance
      efficient computation requirements with reasonable compression rates.
      Snappy is the default compression
      library for MongoDB's use of :ref:`WiredTiger
      <storage-wiredtiger>`. See `Snappy
      <https://google.github.io/snappy/>`_ and the :wtdocs-v5.0:`WiredTiger compression
      documentation </compression.html>`
      for more information.

   softIRQ
      The CPU utilization metric that reflects a portion of CPU that a cloud
      instance currently uses to process software interrupt requests.
      On some cloud providers, this metric is useful for tracking CPU
      utilization on :term:`burstable instances`.

   sort key
      The value compared against when sorting fields. To learn how
      MongoDB determines the sort key for non-numeric fields, see
      :ref:`bson-types-comparison-order`.

   split
      The division between :term:`chunks <chunk>` in a :term:`sharded
      cluster`. See :doc:`/core/sharding-data-partitioning`.

   SQL
      Structured Query Language (SQL) is used for interaction with
      relational databases.

   SSD
      Solid State Disk. High-performance storage that uses solid
      state electronics for persistence instead of rotating platters
      and movable read/write heads used by mechanical hard drives.

   stale read
      A stale read refers to when a transaction reads old (stale) data that has 
      been modified by another transaction but not yet committed to the 
      database. 
   
   standalone
      An instance of :binary:`~bin.mongod` 
      that runs as a single server and not as part of a 
      :term:`replica set`. To convert a standalone instance to a 
      replica set, see :ref:`server-replica-set-deploy-convert`.

      .. note::

         A standalone instance is **not** a replica set with only one 
         member.

   stash collection
      A temporary collection created on the recipient shard for
      each donor shard during :ref:`resharding <sharding-resharding>` operations.

      Stash collections temporarily hold documents that cannot be 
      immediately inserted due to operation conflicts. For 
      example, if a document's shard key has been updated, it now belongs 
      to a different shard, and the order of operations applied to this document
      can be ambiguous. The recipient stores these documents in a
      stash collection until it can apply operations
      in the correct order.
      
   step down
      The :term:`primary` member of the replica set removes
      itself as primary and becomes a :term:`secondary` member.

      - If a replica set loses contact with the primary, the
        secondaries elect a new primary.  When the old primary
        learns of the election, it steps down and rejoins the
        replica set as a secondary.

      - If the user runs the :dbcommand:`replSetStepDown`
        command, the primary steps down, forcing the replica set
        to elect a new primary.

   storage engine
      The part of a database that is responsible for managing how data
      is stored and accessed, both in memory and on disk. Different
      storage engines perform better for specific workloads. See
      :doc:`/core/storage-engines` for specific details on the built-in
      storage engines in MongoDB.

   Subject Alternative Name
      Subject Alternative Name (SAN) is an extension of the X.509 
      certificate which allows an array of values such as IP addresses 
      and domain names that specify the resources a single security 
      certificate may secure.

   strict consistency
      A property of a distributed system requiring that all members
      contain the latest changes to the system. In a database
      system, this means that any system that can provide data must
      contain the latest writes.

   sync
      The :term:`replica set` operation where members replicate data
      from the :term:`primary`. Sync first occurs when MongoDB creates
      or restores a member, which is called :term:`initial sync`. Sync
      then occurs continually to keep the member updated with changes to
      the replica set's data. See :doc:`/core/replica-set-sync`.

   syslog
      On UNIX-like systems, a logging process that provides a uniform
      standard for servers and processes to submit logging information.
      MongoDB provides an option to send output to the host's syslog
      system. See :setting:`~systemLog.syslogFacility`.

   tag
     A label applied to a replica set member and used by
     clients to issue data-center-aware operations. For more information
     on using tags with replica sets, see :ref:`replica-set-read-preference-tag-sets`.

     .. note:: 
      
        Sharded cluster :term:`zones <zone>` replace :term:`tags <tag>`.

   tag set
     A document containing zero or more :term:`tags <tag>`.

   tailable cursor
     For a :term:`capped collection`, a tailable cursor is a cursor that
     remains open after the client exhausts the results in the initial
     cursor. As clients insert new documents into the capped collection,
     the tailable cursor continues to retrieve documents.

   team
      Group of :term:`Atlas users <Atlas user>` in the same organization. You can use teams to grant access to
      the same group of Atlas users across multiple
      :term:`projects <project>`. All users in the team share the same
      project access.

   term
      For the members of a replica set, a monotonically increasing
      number that corresponds to an election attempt.

   time series collection
      A :term:`collection <collection>` that efficiently stores
      sequences of measurements over a period of time. See
      :doc:`/core/timeseries-collections`.

   topology
     The state of a deployment of MongoDB instances. Includes:

     - Type of deployment (standalone, replica set, or sharded cluster).
     - Availability of servers.
     - Role of each server (:term:`primary`, :term:`secondary`,
       :term:`config server`, or :binary:`~bin.mongos`).

   transaction
      Group of read or write operations. For details, see
      :ref:`transactions`.

   transaction coordinator
      A component of MongoDB that manages :term:`transactions
      <transaction>` in a :term:`replica set` or a :term:`sharded
      cluster`. It coordinates the execution and completion of
      multi-document transactions across nodes and allows a complex
      operation to be treated as an :term:`atomic operation`.

   TSV
      A text-based data format consisting of tab-separated values.
      This format is commonly used to exchange data between relational
      databases because the format is suited to tabular data. You can
      import TSV files using :binary:`~bin.mongoimport`.

   TTL
      Time-to-live (TTL) is an expiration time or
      period for a given piece of information to remain in a cache or
      other temporary storage before the system deletes it or ages it
      out. MongoDB has a TTL collection feature. See
      :doc:`/tutorial/expire-data`.
   
   unbounded array
     An array that consistently grows larger over time. If a document
     field value is an unbounded array, the array may negatively impact
     performance. In general, design your schema to avoid unbounded
     arrays.

   unique index
      An index that enforces uniqueness for a particular field in
      a single collection. See :ref:`index-type-unique`.

   unordered query plan
      A query plan that returns results in an order inconsistent with the
      :method:`~cursor.sort()` order.
      See :ref:`read-operations-query-optimization`.

   upgrade
      The process of changing a cluster from one version of MongoDB to a
      newer version.
     
   upsert
      An option for update operations. For example:
      :method:`db.collection.updateOne()`,
      :method:`db.collection.findAndModify()`. If upsert is ``true``,
      the update operation either:

      - updates the document(s) matched by the query.
      - or if no documents match, inserts a new document. The new
        document has the field values specified in the update operation.
      
      For more information about upserts, see :ref:`upsert-parameter`.

   vector database 
      System that stores vector embeddings and associated metadata, and
      enables nearest neighbor search on the stored vector embeddings.
      You can use |service| as your vector database and {+avs+} to
      perform vector search on the stored vector embeddings. You can use
      vector database to implement |rag|. 

   vector index 
      Data structure that efficiently processes nearest neighbor search
      queries. {+avs+} supports creating indexes of type ``vector`` to
      index fields for running :pipeline:`$vectorSearch` queries. 

   vector search
      Method of performing *k* nearest neighbor search over a set of
      vectors stored in a vector index. {+avs+} supports |ann| and |enn|
      search for *k* nearest neighbors. 

   virtual memory
      An application's working memory, typically residing on both
      disk and in physical RAM.

   WGS84
      The default reference system and geodetic datum that MongoDB uses
      to calculate geometry over an Earth-like sphere for geospatial
      queries on :term:`GeoJSON` objects. See the
      "EPSG:4326: WGS 84" specification:
      `<http://spatialreference.org/ref/epsg/4326/>`_.

   window operator
      Returns values from a span of documents from a collection. See
      :ref:`window operators <setWindowFields-window-operators>`.

   working set
      The data that MongoDB uses most often.

   write concern
      Specifies whether a write operation has succeeded. Write concern
      allows your application to detect insertion errors or unavailable
      :binary:`~bin.mongod` instances. For :term:`replica sets <replica
      set>`, you can configure write concern to confirm replication to a
      specified number of members. See :doc:`/reference/write-concern`.

   write conflict
      A situation where two concurrent operations, at least one of which
      is a write, try to use a resource that violates the
      constraints for a storage engine that uses optimistic
      :term:`concurrency control`. MongoDB automatically ends and
      retries one of the conflicting write operations.

   write lock
      An exclusive :term:`lock` on a resource such as a collection
      or database. When a process writes to a resource, it takes
      an exclusive write lock to prevent other processes from writing
      to or reading from that resource. For more information on
      locks, see :doc:`/faq/concurrency`.

   zlib
      A data compression library that provides higher compression rates
      at the cost of more CPU, compared to MongoDB's use of
      :term:`snappy`. You can configure :ref:`WiredTiger
      <storage-wiredtiger>` to use zlib as its compression library. See
      http://www.zlib.net and the :wtdocs-v5.0:`WiredTiger compression documentation
      </compression.html>` for more
      information.

   zstd
      A data compression library that provides higher compression rates
      and lower CPU usage when compared to :term:`zlib`.

   zone
      A grouping of documents based on ranges of :term:`shard key` values
      for a given sharded collection. Each shard in the sharded cluster can
      be in one or more zones. In a balanced cluster, MongoDB
      directs reads and writes for a zone only to those shards
      inside that zone. See the :ref:`zone-sharding` manual page for more
      information.
