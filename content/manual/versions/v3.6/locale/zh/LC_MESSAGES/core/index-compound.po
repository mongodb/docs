#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/index-compound.txt:7
msgid "Compound Indexes"
msgstr ""

#: ../source/core/index-compound.txt:17
msgid ""
"MongoDB supports *compound indexes*, where a single index structure holds"
" references to multiple fields [#compound-index-field-limit]_ within a "
"collection's documents. The following diagram illustrates an example of a"
" compound index on two fields:"
msgstr ""

#: ../source/core/index-compound.txt:25
msgid ""
"MongoDB imposes a :limit:`limit of 32 fields for any compound index "
"<Number of Indexed Fields in a Compound Index>`."
msgstr ""

#: ../source/core/index-compound.txt:28
msgid "Compound indexes can support queries that match on multiple fields."
msgstr ""

#: ../source/core/index-compound.txt:31
msgid "Create a Compound Index"
msgstr ""

#: ../source/core/index-compound.txt:33
msgid ""
"To create a :ref:`compound index <index-type-compound>` use an operation "
"that resembles the following prototype:"
msgstr ""

#: ../source/includes/fact-index-specification-field-value.rst:1
msgid ""
"The value of the field in the index specification describes the kind of "
"index for that field. For example, a value of ``1`` specifies an index "
"that orders items in ascending order. A value of ``-1`` specifies an "
"index that orders items in descending order. For additional index types, "
"see :ref:`index types <index-types>`."
msgstr ""

#: ../source/core/index-compound.txt:42
msgid ""
"You may not create compound indexes that have ``hashed`` index type. You "
"will receive an error if you attempt to create a compound index that "
"includes :doc:`a hashed index field </core/index-hashed>`."
msgstr ""

#: ../source/core/index-compound.txt:47
msgid ""
"Consider a collection named ``products`` that holds documents that "
"resemble the following document:"
msgstr ""

#: ../source/core/index-compound.txt:61
msgid ""
"The following operation creates an ascending index on the ``item`` and "
"``stock`` fields:"
msgstr ""

#: ../source/core/index-compound.txt:68
msgid ""
"The order of the fields listed in a compound index is important. The "
"index will contain references to documents sorted first by the values of "
"the ``item`` field and, within each value of the ``item`` field, sorted "
"by values of the stock field. See :ref:`index-ascending-and-descending` "
"for more information."
msgstr ""

#: ../source/core/index-compound.txt:74
msgid ""
"In addition to supporting queries that match on all the index fields, "
"compound indexes can support queries that match on the prefix of the "
"index fields. That is, the index supports queries on the ``item`` field "
"as well as both ``item`` and ``stock`` fields:"
msgstr ""

#: ../source/core/index-compound.txt:84
msgid "For details, see :ref:`compound-index-prefix`."
msgstr ""

#: ../source/core/index-compound.txt:90
msgid "Sort Order"
msgstr ""

#: ../source/core/index-compound.txt:92
msgid ""
"Indexes store references to fields in either ascending (``1``) or "
"descending (``-1``) sort order. For single-field indexes, the sort order "
"of keys doesn't matter because MongoDB can traverse the index in either "
"direction. However, for :ref:`compound indexes <index-type-compound>`, "
"sort order can matter in determining whether the index can support a sort"
" operation."
msgstr ""

#: ../source/core/index-compound.txt:99
msgid ""
"Consider a collection ``events`` that contains documents with the fields "
"``username`` and ``date``. Applications can issue queries that return "
"results sorted first by ascending ``username`` values and then by "
"descending (i.e. more recent to last) ``date`` values, such as:"
msgstr ""

#: ../source/core/index-compound.txt:108
msgid ""
"or queries that return results sorted first by descending ``username`` "
"values and then by ascending ``date`` values, such as:"
msgstr ""

#: ../source/core/index-compound.txt:115
msgid "The following index can support both these sort operations:"
msgstr ""

#: ../source/core/index-compound.txt:121
msgid ""
"However, the above index **cannot** support sorting by ascending "
"``username`` values and then by ascending ``date`` values, such as the "
"following:"
msgstr ""

#: ../source/core/index-compound.txt:129
msgid ""
"For more information on sort order and compound indexes, see "
":doc:`/tutorial/sort-results-with-indexes`."
msgstr ""

#: ../source/core/index-compound.txt:135
msgid "Prefixes"
msgstr ""

#: ../source/core/index-compound.txt:137
msgid ""
"Index prefixes are the *beginning* subsets of indexed fields. For "
"example, consider the following compound index:"
msgstr ""

#: ../source/core/index-compound.txt:144
msgid "The index has the following index prefixes:"
msgstr ""

#: ../source/core/index-compound.txt:146
msgid "``{ item: 1 }``"
msgstr ""

#: ../source/core/index-compound.txt:148
msgid "``{ item: 1, location: 1 }``"
msgstr ""

#: ../source/core/index-compound.txt:150
msgid ""
"For a compound index, MongoDB can use the index to support queries on the"
" index prefixes. As such, MongoDB can use the index for queries on the "
"following fields:"
msgstr ""

#: ../source/core/index-compound.txt:154
msgid "the ``item`` field,"
msgstr ""

#: ../source/core/index-compound.txt:155
msgid "the ``item`` field *and* the ``location`` field,"
msgstr ""

#: ../source/core/index-compound.txt:156
msgid "the ``item`` field *and* the ``location`` field *and* the ``stock`` field."
msgstr ""

#: ../source/core/index-compound.txt:158
msgid ""
"MongoDB can also use the index to support a query on ``item`` and "
"``stock`` fields since ``item`` field corresponds to a prefix. However, "
"the index would not be as efficient in supporting the query as would be "
"an index on only ``item`` and ``stock``."
msgstr ""

#: ../source/core/index-compound.txt:163
msgid ""
"However, MongoDB cannot use the index to support queries that include the"
" following fields since without the ``item`` field, none of the listed "
"fields correspond to a prefix index:"
msgstr ""

#: ../source/core/index-compound.txt:167
msgid "the ``location`` field,"
msgstr ""

#: ../source/core/index-compound.txt:169
msgid "the ``stock`` field, or"
msgstr ""

#: ../source/core/index-compound.txt:171
msgid "the ``location`` and ``stock`` fields."
msgstr ""

#: ../source/core/index-compound.txt:173
msgid ""
"If you have a collection that has both a compound index and an index on "
"its prefix (e.g. ``{ a: 1, b: 1 }`` and ``{ a: 1 }``), if neither index "
"has a sparse or unique constraint, then you can remove the index on the "
"prefix (e.g. ``{ a: 1 }``). MongoDB will use the compound index in all of"
" the situations that it would have used the prefix index."
msgstr ""

#: ../source/core/index-compound.txt:180
msgid "Index Intersection"
msgstr ""

#: ../source/includes/fact-index-intersection-vs-compound-indexes.rst:1
msgid ""
"Starting in version 2.6, MongoDB can use :doc:`index intersection </core"
"/index-intersection>` to fulfill queries. The choice between creating "
"compound indexes that support your queries or relying on index "
"intersection depends on the specifics of your system. See :ref:`index-"
"intersection-compound-indexes` for more details."
msgstr ""

#: ../source/core/index-compound.txt:185
msgid "Additional Considerations"
msgstr ""

#: ../source/includes/index-tutorials-considerations.rst:1
msgid ""
"If your collection holds a large amount of data, and your application "
"needs to be able to access the data while building the index, consider "
"building the index in the background, as described in :ref:`index-"
"creation-background`."
msgstr ""

#: ../source/includes/note-build-indexes-on-replica-sets.rst:1
msgid ""
"To build or rebuild indexes for a :term:`replica set`, see :ref:`index-"
"building-replica-sets`."
msgstr ""

#: ../source/includes/index-tutorials-considerations.rst:8
msgid ""
"Some drivers may specify indexes, using ``NumberLong(1)`` rather than "
"``1`` as the specification. This does not have any affect on the "
"resulting index."
msgstr ""

#~ msgid "Example"
#~ msgstr ""

#~ msgid ""
#~ "If applications query on the ``item``"
#~ " field as well as query on both"
#~ " the ``item`` field and the ``stock``"
#~ " field, you can specify a single "
#~ "compound index to support both of "
#~ "these queries:"
#~ msgstr ""

#~ msgid ""
#~ "You may not create compound indexes "
#~ "that have ``hashed`` index fields. You"
#~ " will receive an error if you "
#~ "attempt to create a compound index "
#~ "that includes :doc:`a hashed index "
#~ "</core/index-hashed>`."
#~ msgstr ""

#~ msgid ""
#~ "The order of the fields in a "
#~ "compound index is very important. In "
#~ "the previous example, the index will "
#~ "contain references to documents sorted "
#~ "first by the values of the "
#~ "``item`` field and, within each value"
#~ " of the ``item`` field, sorted by "
#~ "values of the ``stock`` field. See "
#~ ":ref:`index-ascending-and-descending` for "
#~ "more information."
#~ msgstr ""

#~ msgid ""
#~ "In addition to supporting queries that"
#~ " match on all the index fields, "
#~ "compound indexes can support queries "
#~ "that match on the prefix of the"
#~ " index fields. For details, see :ref"
#~ ":`compound-index-prefix`."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB imposes a :limit:`limit of 31"
#~ " fields for any compound index "
#~ "<Number of Indexed Fields in a "
#~ "Compound Index>`."
#~ msgstr ""

#~ msgid "index"
#~ msgstr ""

#~ msgid "compound"
#~ msgstr ""

#~ msgid "compound index"
#~ msgstr ""

#~ msgid "sort order"
#~ msgstr ""

#~ msgid "On this page"
#~ msgstr ""

