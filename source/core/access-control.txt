==============
Access Control
==============

.. default-domain:: mongodb

MongoDB provides support for authentication and authorization on a
per-database level. Users exist in the context of a single logical
database.

.. _authentication:

Authentication
--------------

MongoDB provisions authentication, or verification of the user
identity, on a per-database level. Authentication disables anonymous
access to the database. For basic authentication, MongoDB stores the
user credentials in the ``admin`` database's :data:`system.users
<admin.system.users>` collection.

Authentication is **disabled** by default. To enable authentication for
a given :program:`mongod` or :program:`mongos` instance, use the
:setting:`auth` and :setting:`keyFile` configuration settings. For
details, see :doc:`/tutorial/enable-authentication`.

.. versionadded:: 2.6

   MongoDB supports x.509 certificate authentication for use with a
   secure SSL connection. See :doc:`/tutorial/configure-x509`.

.. versionadded 2.0: Before 2.0, sharded clusters *had* to run with
   trusted applications and a trusted networking configuration.

For MongoDB Enterprise installations, authentication using a Kerberos
service is available. See
:doc:`/tutorial/control-access-to-mongodb-with-kerberos-authentication`.

.. important::
   You can authenticate as only one user for a given database. If you
   authenticate to a database as one user and later authenticate on the
   same database as a different user, the second authentication
   invalidates the first. You can, however, log into a *different*
   database as a different user and not invalidate your authentication
   on other databases, though this is not a recommended approach.
   Generally we recommend that each client connection be authenticated
   as exactly one user.

.. _authorization:

Authorization
-------------

MongoDB provisions authorization, or access to databases and
operations, on a per-database level. MongoDB uses a role-based approach
to authorization. A role grants privileges to users, where
privileges specify the :doc:`actions </reference/privilege-actions>`
permitted on various :ref:`resources <resource-document>`.

.. _user-defined-roles:

User-Defined Roles
~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.6

In addition to the MongoDB :doc:`system-defined roles
</reference/system-defined-roles>`, MongoDB provides the ability to create
and manage custom roles. To create a role is to define its privileges
by pairing :ref:`resources <resource-document>` (e.g. database,
collection) with :doc:`actions </reference/privilege-actions>` (e.g.
``insert``, ``find``), and/or by specifying other roles from which the
role inherits privileges. 

To create and manage roles, MongoDB provides :ref:`role management
commands <role-management-commands>`. MongoDB scopes each role to the
database in which it is created and uniquely identifies each role by
the pairing of its name and its database. MongoDB stores the
user-defined roles information in the :doc:`system.roles collection
</reference/system-roles-collection>` of the ``admin`` database.

.. seealso:: :dbcommand:`createRole` and :ref:`role-management-commands`.

.. _collection-level-access-control:

Collection-Level Access Control
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.6

MongoDB provides the ability to specify user privileges at a
collection-level granularity. To specify collection-level access
control, create a custom role that pairs its actions to a particular
collection in a specific database in the :ref:`resource document
<resource-document>`. 

The MongoDB :doc:`system-defined roles </reference/system-defined-roles>`
grant privileges at a database-level only, and thus cannot be used to
control privileges at the collection-level.

Role Assignment to Users
~~~~~~~~~~~~~~~~~~~~~~~~

Users can have multiple roles and can have different roles on different
resources. Assigning roles to a user authorizes the user to have only
the privileges granted by the roles. Roles always grant privileges and
never limit access. For example, if a user has both :authrole:`read`
*and* :authrole:`readWriteAnyDatabase` roles on a database, the greater
access prevails. A user's role assignments can include
:ref:`system-defined roles <system-user-roles>` provided by MongoDB or
a :ref:`custom roles <user-defined-roles>` defined by the user.

To assign roles to users, you must be a user with an administrative
role in the database. As such, you must first create an administrative
user. For details, see :doc:`/tutorial/add-user-administrator` and
:doc:`/tutorial/add-user-to-database`.

MongoDB stores each user's role assignments in the ``admin`` database's
:doc:`system.users collection </reference/system-users-collection>`. To
manage data in this collection, MongoDB provides :ref:`user management
commands <user-management-commands>`, which require proper
authorization to use in order to prevent privilege escalation attacks.
