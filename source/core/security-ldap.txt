.. _security-ldap:

=========================
LDAP Proxy Authentication
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

`MongoDB Enterprise
<http://www.mongodb.com/products/mongodb-enterprise?jmp=docs>`_ supports
proxying authentication requests to a Lightweight Directory Access Protocol
(LDAP) service.

MongoDB 3.4 supports simple and SASL binding to LDAP servers via:

- Operating system libraries

  .. versionadded:: 3.4

     MongoDB 3.4 supports binding to an LDAP server via operating system
     libraries. This allows Linux and Windows MongoDB 3.4 servers to use an
     LDAP server for authentication.

- ``saslauthd``

  Linux MongoDB servers supports binding to an LDAP server via the
  ``saslauthd`` daemon.

Previous versions of MongoDB support LDAP authentication using ``saslauthd``.
This restricted LDAP authentication support to Linux MongoDB deployments only.

Previous versions of Microsoft Windows MongoDB cannot connect to LDAP servers.
MongoDB 3.4 on Windows remains incompatible with ``saslauthd``.

Considerations
--------------

A full description of LDAP is beyond the scope of this documentation. This
page assumes prior knowledge of LDAP.

This documentation only describes MongoDB LDAP authentication, and does not
replace other resources on LDAP. We encourage you to thoroughly familiarize
yourself with LDAP and its related subject matter before configuring LDAP
authentication.

MongoDB can provide `professional services
<https://www.mongodb.com/products/mongodb-professional>`_ for optimal
configuration of LDAP authentication for your MongoDB deployment.

Managing LDAP Users on the MongoDB server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

User management requires managing users both on the LDAP server and the
MongoDB server. For each user authenticating via LDAP, MongoDB requires a user
on the ``$external`` database whose name exactly matches the authentication
username. Changes to a user on the LDAP server may require changes to the
corresponding MongoDB ``$external`` user.

.. include:: /includes/extracts/sessions-external-username-limit.rst

.. example::

   A user authenticates as ``sam@dba.example.com``. The MongoDB server
   binds to the LDAP server and authenticates the user, respecting any
   :setting:`username transformations <security.ldap.userToDNMapping>`.
   On successful authentication, the MongoDB server then checks the
   ``$external`` database for a user ``sam@dba.example.com`` and
   grants the authenticated user the roles and privileges associated to
   that user.

To manage users on the MongoDB server, you must authenticate as an LDAP user
whose corresponding MongoDB ``$external`` user has user administrative
privileges on the ``$external`` database, such as those provided by
:authrole:`userAdmin`.

.. important::

   If no ``$external`` users have user administrative privileges on
   ``$external`` database, you cannot perform user management for LDAP
   authentication. This scenario may occur if you configure users prior to
   enabling LDAP authentication, but do not create the appropriate user
   administrators.

Managing existing non-LDAP users
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If there are existing users not on the ``$external`` database, you must meet
the following requirements for each user to ensure continued access:

- User has a corresponding user object on the LDAP server

- User exists on the ``$external`` database with equivalent roles and
  privileges

If you want to continue allowing access by users *not* on the
``$external`` database, you must configure :setting:`setParameter`
:parameter:`authenticationMechanisms` to include ``SCRAM-SHA-1`` and/or
``SCRAM-SHA-256`` as appropriate. Users must then specify
:option:`--authenticationMechanism` ``SCRAM-SHA-1`` or
``SCRAM-SHA-256`` when authenticating.

Deploying LDAP authentication on a replica set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For :term:`replica sets <replica set>`, configure LDAP authentication on
:term:`secondary` and :term:`arbiter` members first before configuring the
:term:`primary`. This also applies to :doc:`shard replica sets
</core/sharded-cluster-shards>`, or :ref:`config server replica sets <csrs>`.
Configure one replica set member at a time to maintain a majority of members
for write availability.

Deploying LDAP authentication on a sharded cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In :term:`sharded clusters <sharded cluster>`, you must configure LDAP
authentication on the :term:`config servers <config server>` and each
:binary:`~bin.mongos` for cluster-level users. You can optionally configure LDAP
authorization on each :term:`shard` for shard-local users.

.. _security-ldap-connect-native:

LDAP Authentication via the Operating System LDAP libraries
-----------------------------------------------------------

.. versionadded:: 3.4

The LDAP authentication via OS libraries process is summarized below:

#. A client authenticates to MongoDB, providing a user's credentials.

#. If the username requires mapping to an LDAP DN prior to binding against the
   LDAP server, MongoDB can apply transformations based on the configured
   :setting:`security.ldap.userToDNMapping` setting.

#. MongoDB binds to an LDAP server specified in
   :setting:`security.ldap.servers` using the provided username or, if a
   transformation was applied, the transformed username.

   MongoDB uses simple binding by default, but can also use ``sasl`` binding
   if configured in :setting:`security.ldap.bind.method` and
   :setting:`security.ldap.bind.saslMechanisms`.

   If a transformation requires querying the LDAP server, or if the LDAP
   server disallows anonymous binds, MongoDB uses the username and password
   specified to :setting:`security.ldap.bind.queryUser` and
   :setting:`security.ldap.bind.queryPassword` to bind to the LDAP server
   before attempting to authenticate the provided user credentials.

#. The LDAP server returns the result of the bind attempt to MongoDB. On
   success, MongoDB attempts to authorize the user.

#. The MongoDB server attempts to map the username to a user on the
   ``$external`` database, assigning the user any roles or privileges
   associated to a matching user. If MongoDB cannot find a matching user,
   authentication fails.

#. The client can perform those actions for which MongoDB granted the
   authenticated user roles or privileges.

To use LDAP for authentication via operating system libraries, specify the
following settings as a part of your :binary:`~bin.mongod` or :binary:`~bin.mongos`
configuration file:

.. list-table::
   :header-rows: 1
   :widths: 30 60 10

   * - option
     - description
     - required

   * - :setting:`security.ldap.servers`
     - Quote-enclosed comma-separated list of LDAP servers in ``host[:port]``
       format.

     - **YES**

   * - :setting:`security.ldap.bind.method`

     - Used to specify the method the :binary:`~bin.mongod` or :binary:`~bin.mongos`
       uses to authenticate, or bind, to the LDAP server. Specify ``sasl`` to
       use one of the SASL protocols defined in
       :setting:`security.ldap.bind.saslMechanisms`.

       Defaults to ``simple``.

     - **NO**, unless using ``sasl`` for binding to the LDAP server.

   * - :setting:`security.ldap.bind.saslMechanisms`

     - Used to specify the SASL mechanisms :binary:`~bin.mongod` or
       :binary:`~bin.mongos` can use when authenticating or binding to the LDAP
       server. MongoDB and the LDAP server must agree on at least one SASL
       mechanism.

       Defaults to ``DIGEST-MD5``.

     - **NO**, unless setting :setting:`~security.ldap.bind.method` to
       ``sasl`` *and* you need different or additional SASL mechanisms.

   * - :setting:`security.ldap.bind.queryUser`
     - The LDAP entity, identified by its distinguished name (DN) or SASL name,
       with which the MongoDB server authenticates, or binds, when connecting
       to an LDAP server.

       Use with :setting:`~security.ldap.bind.queryPassword`.

       The user specified must have the appropriate privileges to execute
       queries on the LDAP server.

     - **NO**, unless specifying a query as part of a
       :setting:`~security.ldap.userToDNMapping` transformation, or if the
       LDAP server's security settings disallow anonymous binds.

   * - :setting:`security.ldap.bind.queryPassword`

     - The password used to authenticate to an LDAP server when using
       :setting:`~security.ldap.bind.queryUser`.

     - **NO**, unless specifying :setting:`~security.ldap.queryUser`

   * - :setting:`security.ldap.bind.useOSDefaults`

     - Windows MongoDB deployments can use the operating system credentials in
       place of :setting:`~security.ldap.queryUser` and
       :setting:`~security.ldap.queryPassword` for authenticating or binding
       as when connecting to the LDAP server.

     - **NO**, unless replacing :setting:`~security.ldap.bind.queryUser` and
       :setting:`~security.ldap.bind.queryPassword`.

   * - :setting:`security.ldap.userToDNMapping`

     - Clients may authenticate using a username whose format is incompatible
       with the format expected by the configured :setting:`bind method
       <~security.ldap.bind.method>`. For example, ``simple`` binding may
       require a full LDAP DN while the username used to authenticate to
       MongoDB might be an e-mail address.

       :setting:`~security.ldap.userToDNMapping` allows MongoDB to transform
       incoming usernames into a format compatible with your LDAP schema.
       MongoDB supports transformations using either a substitution template
       or an LDAP query template.

       If you specify a :setting:`~security.ldap.userToDNMapping`
       transformation that uses LDAP queries as part of the transformation,
       you must also specify a :setting:`~security.ldap.queryUser` with
       the appropriate level of permissions for the LDAP server

     - **NO**, unless client authenticate using usernames that require
       transformation.

LDAP Authentication via ``saslauthd``
-------------------------------------

.. warning::

   .. include:: /includes/admonition-mongodb-enterprise-windows-ldap.rst

Considerations
~~~~~~~~~~~~~~

.. include:: /includes/admonition-saslauthd-ldap-considerations.rst

Configuration
~~~~~~~~~~~~~

To configure the MongoDB server to bind to the LDAP server using via
``saslauthd``, use
the following command line options:

- ``--auth`` to enable access control,

- ``--authenticationMechanisms`` set to ``PLAIN``, and

- ``--saslauthdPath`` parameter set to the path to the Unix-domain Socket
  of the saslauthd instance.

Or, if using the :doc:`YAML configuration file
</reference/configuration-options>`, use the following settings:

- :setting:`security.authorization` set to ``enabled``,

- :setting:`setParameter.authenticationMechanisms <setParameter>` set to ``PLAIN``, and

- :setting:`setParameter.saslauthdPath <setParameter>` set to the path to the
  Unix-domain Socket of the saslauthd instance.

You need to create or update the ``saslauthd.conf`` file with the parameters
appropriate for your LDAP server. Documenting ``saslauthd.conf`` is out
of scope for this documentation. The following tutorials provide basic
information on configuring ``saslauthd.conf`` to work with two popular
LDAP services:

- :doc:`/tutorial/configure-ldap-sasl-openldap`

- :doc:`/tutorial/configure-ldap-sasl-activedirectory`

Please see the documentation for ``saslauthd`` as well as your specific
LDAP service for guidance.

Connect to a MongoDB server via LDAP authentication
---------------------------------------------------

To authenticate to a MongoDB server via LDAP authentication, use
:method:`db.auth()` on the ``$external`` database with the following
parameters:

.. list-table::
   :header-rows:1
   :widths: 20 80

   * - option

     - description

   * - ``username``

     - The username to authenticate as.

   * - ``password``

     - The password to authenticate with.

   * - ``mechanism``

     - Set to ``PLAIN``.

.. toctree::
   :titlesonly:
   :hidden:

   /tutorial/configure-ldap-sasl-activedirectory
   /tutorial/configure-ldap-sasl-openldap
   /tutorial/authenticate-nativeldap-activedirectory
