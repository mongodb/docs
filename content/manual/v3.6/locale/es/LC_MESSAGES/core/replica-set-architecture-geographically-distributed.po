# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2013-12-16 23:47+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/replica-set-architecture-geographically-distributed.txt:5
msgid "Replica Sets Distributed Across Two or More Data Centers"
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:16
msgid "Overview"
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:18
msgid ""
"While :term:`replica sets <replica set>` provide basic protection against"
" single-instance failure, replica sets whose members are all located in a"
" single data center are susceptible to data center failures. Power "
"outages, network interruptions, and natural disasters are all issues that"
" can affect replica sets whose members are located in a single facility."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:25
msgid ""
"Distributing replica set members across geographically distinct data "
"centers adds redundancy and provides fault tolerance if one of the data "
"centers is unavailable."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:30
msgid "Distribution of the Members"
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:32
msgid ""
"To protect your data in case of a data center failure, keep at least one "
"member in an alternate data center. If possible, use an odd number of "
"data centers, and choose a distribution of members that maximizes the "
"likelihood that even with a loss of a data center, the remaining replica "
"set members can form a majority or at minimum, provide a copy of your "
"data."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:40
msgid "Examples"
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:43
msgid "Three-member Replica Set"
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:45
msgid ""
"For example, for a three-member replica set, some possible distributions "
"of members include:"
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:48
msgid ""
"Two data centers: two members to Data Center 1 and one member to Data "
"Center 2. If one of the members of the replica set is an arbiter, "
"distribute the arbiter to Data Center 1 with a data-bearing member."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:52
#: ../source/core/replica-set-architecture-geographically-distributed.txt:75
msgid "If Data Center 1 goes down, the replica set becomes read-only."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:54
msgid ""
"If Data Center 2 goes down, the replica set remains writeable as the "
"members in Data Center 1 can hold an election."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:58
msgid ""
"Three data centers: one members to Data Center 1, one member to Data "
"Center 2, and one member to Data Center 3."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:61
#: ../source/core/replica-set-architecture-geographically-distributed.txt:84
msgid ""
"If any Data Center goes down, the replica set remains writeable as the "
"remaining members can hold an election."
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:3
msgid ""
"Distributing replica set members across two data centers provides benefit"
" over a single data center. In a two data center distribution,"
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:7
msgid ""
"If one of the data centers goes down, the data is still available for "
"reads unlike a single data center distribution."
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:10
msgid ""
"If the data center with a minority of the members goes down, the replica "
"set can still serve write operations as well as read operations."
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:14
msgid ""
"However, if the data center with the majority of the members goes down, "
"the replica set becomes read-only."
msgstr ""

#: ../source/includes/note-csrs-distribution.rst:17
msgid ""
"If possible, distribute members across at least three data centers. For "
"config server replica sets (CSRS), the best practice is to distribute "
"across three (or more depending on the number of members) centers. If the"
" cost of the third data center is prohibitive, one distribution "
"possibility is to evenly distribute the data bearing members across the "
"two data centers and store the remaining member (either a data bearing "
"member or an arbiter to ensure odd number of members) in the cloud if "
"your company policy allows."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:67
msgid "Five-member Replica Set"
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:69
msgid ""
"For a replica set with 5 members, some possible distributions of members "
"include:"
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:72
msgid ""
"Two data centers: three members to Data Center 1 and two members to Data "
"Center 2."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:77
msgid ""
"If Data Center 2 goes down, the replica set remains writeable as the "
"members in Data Center 1 can create a majority."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:81
msgid ""
"Three data centers: two member to Data Center 1, two members to Data "
"Center 2, and one member to site Data Center 3."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:89
msgid ""
"For example, the following 5 member replica set distributes its members "
"across three data centers."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:95
msgid "Electability of Members"
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:97
msgid ""
"Some members of the replica set, such as members that have networking "
"restraint or limited resources, should not be able to become primary in a"
" :term:`failover`. Configure members that should not become primary to "
"have :ref:`priority 0 <replica-set-secondary-only-members>`."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:102
msgid ""
"In some cases, you may prefer that the members in one data center be "
"elected primary before the members in the other data centers. You can "
"modify the :rsconf:`~members[n].priority` of the members such that the "
"members in the one data center has higher :rsconf:`~members[n].priority` "
"than the members in the other data centers."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:109
msgid ""
"In the following example, the replica set members in Data Center 1 have a"
" higher priority than the members in Data Center 2 and 3; the members in "
"Data Center 2 have a higher priority than the member in Data Center 3:"
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:117
msgid "Connectivity"
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:119
msgid ""
"Verify that your network configuration allows communication among all "
"members; i.e. each member must be able to connect to every other member."
msgstr ""

#: ../source/core/replica-set-architecture-geographically-distributed.txt:123
msgid ""
":doc:`/tutorial/deploy-geographically-distributed-replica-set`, "
":doc:`/tutorial/deploy-replica-set`, :doc:`/tutorial/add-replica-set-"
"arbiter`, and :doc:`/tutorial/expand-replica-set`."
msgstr ""

#: ../source/includes/extracts/additional-resources-multi-dc.rst:4
msgid "Additional Resource"
msgstr ""

#: ../source/includes/extracts/additional-resources-multi-dc.rst:6
msgid ""
"`Whitepaper: MongoDB Multi-Data Center Deployments "
"<http://www.mongodb.com/lp/white-paper/multi-dc?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-multi-dc.rst:7
msgid ""
"`Webinar: Multi-Data Center Deployment "
"<https://www.mongodb.com/presentations/webinar-multi-data-center-"
"deployment?jmp=docs>`_"
msgstr ""

# 4d08d1e72bd64be292d0dcfe88a83f91
#~ msgid "Geographically Distributed Replica Sets"
#~ msgstr ""

# 9d4b32359d5141729dc0a0cffe1a4246
#~ msgid ""
#~ "Adding members to a replica set in"
#~ " multiple data centers adds redundancy "
#~ "and provides fault tolerance if one "
#~ "data center is unavailable. Members in"
#~ " additional data centers should have "
#~ "a :doc:`priority of 0 </core/replica-"
#~ "set-priority-0-member>` to prevent them "
#~ "from becoming primary."
#~ msgstr ""

# c6a59b45847f425ea16c954d26279e77
#~ msgid ""
#~ "For example: the architecture of a "
#~ "geographically distributed replica set may "
#~ "be:"
#~ msgstr ""

# 2ed05c841c7543a19785b25f77e7bb1c
#~ msgid "One :term:`primary <primary>` in the main data center."
#~ msgstr ""

# db73223ac2ad45bbbc179ccf8d4ed072
#~ msgid ""
#~ "One :term:`secondary <secondary>` member in"
#~ " the main data center. This member"
#~ " can become primary at any time."
#~ msgstr ""

# c45cac0f42944a2a9de0243656f71ae4
#~ msgid ""
#~ "One :doc:`priority 0 </core/replica-set-"
#~ "priority-0-member>` member in a second "
#~ "data center. This member cannot become"
#~ " primary."
#~ msgstr ""

# f577bf1501034c35ac34457e312435ce
#~ msgid ""
#~ "In the following replica set, the "
#~ "primary and one secondary are in "
#~ "*Data Center 1*, while *Data Center "
#~ "2* has a :doc:`priority 0 </core"
#~ "/replica-set-priority-0-member>` secondary that"
#~ " cannot become a primary."
#~ msgstr ""

# 27dd84f5523b43629a169066ccb48816
#~ msgid ""
#~ "If the primary is unavailable, the "
#~ "replica set will elect a new "
#~ "primary from *Data Center 1*. If "
#~ "the data centers cannot connect to "
#~ "each other, the member in *Data "
#~ "Center 2* will not become the "
#~ "primary."
#~ msgstr ""

# 9586d0735e2a4b41be3694f03dce59af
#~ msgid ""
#~ "If *Data Center 1* becomes unavailable,"
#~ " you can manually recover the data"
#~ " set from *Data Center 2* with "
#~ "minimal downtime. With sufficient :ref:`write"
#~ " concern <write-concern>`, there will "
#~ "be no data loss."
#~ msgstr ""

# b1e08a4eba7b4c1b9364b3cd2cb9e964
#~ msgid ""
#~ "To facilitate elections, the main data"
#~ " center should hold a majority of "
#~ "members. Also ensure that the set "
#~ "has an odd number of members. If"
#~ " adding a member in another data "
#~ "center results in a set with an"
#~ " even number of members, deploy an"
#~ " :ref:`arbiter <replica-set-arbiters>`. For"
#~ " more information on elections, see "
#~ ":doc:`/core/replica-set-elections`."
#~ msgstr ""

# d98452a1c84f4e2db3b684edccae7869
#~ msgid ":doc:`/tutorial/deploy-geographically-distributed-replica-set`."
#~ msgstr ""

