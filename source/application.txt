===================
Functional Overview
===================

.. default-domain:: mongodb

Overview
--------

|mms-full| is a service for managing, monitoring and backing up a MongoDB
infrastructure. |mms| provides the services described here.

.. _monitoring-functional-overview:

Monitoring
----------

|mms| Monitoring provides real-time reporting, visualization, and alerting
on key database and hardware indicators.

**How it Works:** A lightweight Monitoring Agent runs within your infrastructure and
collects statistics from the nodes in your MongoDB deployment. The agent
transmits database statistics back to |mms| to provide real-time
reporting. You can set alerts on indicators you choose.

.. _automation:

Automation
----------

.. only:: onprem

   |mms| Automation provides an interface for configuring MongoDB nodes
   and clusters and for upgrading your MongoDB deployment.

.. only:: cloud

   |mms| Automation provides an interface for provisioning machines,
   configuring MongoDB nodes and clusters, and upgrading your MongoDB
   deployment.

.. image:: /figures/how-it-works.png
   :alt: "Automation coordinates MongoDB instances running in a public cloud, in your private data center, or on your local system."
   :width: 700px
   :align: center

**How it Works:** Automation Agents on each server maintain your deployments. The
Automation Agent also maintains the Monitoring and Backup agents and
starts, restarts, and upgrades the agents as needed.

Automation allows only one agent of each type per machine and will remove
additional agents. For example, when maintaining Backup Agents, automation
will remove a Backup Agent from a machine that has two Backup Agents.

.. _mms-backup-functional-overview:

Backup
------

|mms| Backup provides scheduled snapshots and point-in-time recovery of
your MongoDB :term:`replica sets <replica set>` and :term:`sharded
clusters <sharded cluster>`. Backup can also create snapshots of
:term:`standalones <standalone>` that are run as single-member replica
sets.

**How it Works:** A lightweight Backup Agent runs within your
infrastructure and backs up data from the MongoDB processes you have
specified.

Data Backup
~~~~~~~~~~~

When you start Backup for a MongoDB deployment, the agent performs an
:term:`initial sync` of the deployment's data as if it were creating a
new, "invisible" member of a replica set. For a sharded cluster the agent
performs a sync of each shard's :term:`primary` and of each config server.
The agent ships initial sync and oplog data over HTTPS back to |mms|.

.. only:: onprem

   The Backup Agent then tails each replica set's :term:`oplog` to maintain
   on disk a standalone database, called a *head database*. |mms|
   maintains one head database for each backed-up replica
   set. The head database is consistent with the original primary up to the last
   oplog supplied by the agent.

.. only:: cloud or classic

   The Backup Agent then tails each replica set's :term:`oplog` to
   continually update the backup. The backup is consistent with the
   original primary up to the last oplog supplied by the agent.

Backup performs the initial sync and the tailing of the oplog using
standard MongoDB queries. The production replica set is not aware of the
copy of the backup data.

Backup uses a :program:`mongod` with a version equal to or greater than
the version of the replica set it backs up.

Backup takes and stores snapshots based on a user-defined :ref:`snapshot
retention policy <snapshot-frequency-and-retention>`.
Sharded clusters snapshots temporarily stop the
balancer via the :program:`mongos` so that they can insert a marker
token into all shards and config servers in the cluster. |mms| takes a
snapshot when the marker tokens appear in the backup data.

Compression and block-level de-duplication technology reduce snapshot data
size. The snapshot only stores the differences between successive snapshots.
Snapshots use only a fraction of the disk space required for full snapshots.

.. _restores:

Data Restoration
~~~~~~~~~~~~~~~~

|mms| Backup lets you restore data from a scheduled snapshot or from a
selected point between snapshots. For sharded clusters you can restore
from :ref:`checkpoints <checkpoint>` between snapshots. For replica sets,
you can restore from selected points in time.

When you restore from a snapshot, |mms| reads directly from the Backup
Blockstore database and transfers files either through an HTTPS download link
or by sending them via HTTPS or SCP.

When you restore from a checkpoint or point in time, |mms| first creates a
local restore of a snapshot from the blockstore and then applies stored
oplogs until the specified point is reached. |mms| delivers the backup via
the same HTTPS or SCP mechanisms. To enable checkpoints, see
:ref:`enable-cluster-checkpoints`.

.. only:: onprem

   The amount of oplog to keep per backup is configurable and affects the
   time window available for checkpoint and point-in-time restores.
