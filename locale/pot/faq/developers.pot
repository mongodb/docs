# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/developers.txt:5
# 265801e76ec642ba8486daf7e0d1fc30
msgid "FAQ: MongoDB for Application Developers"
msgstr ""

#: ../source/faq/developers.txt:9
# 62523a69df414b29a2194156c5bd172c
msgid "This document answers common questions about application development using MongoDB."
msgstr ""

#: ../source/faq/developers.txt:12
# 698eb7f3c80b4dcb9725bef341f66149
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/developers.txt:19
# 9d78567ad25340b786ea5c6a56003f41
msgid "What is a namespace in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:21
# 1279475a69204412843928ae9da0458b
msgid "A \"namespace\" is the concatenation of the :term:`database` name and the :term:`collection` names [#indexes-are-namespaces]_ with a period character in between."
msgstr ""

#: ../source/faq/developers.txt:25
# 8289fec9ed864c958c81dab81ed91310
msgid "Collections are containers for documents that share one or more indexes. Databases are groups of collections stored on disk using a single set of data files. [#ns-limit]_"
msgstr ""

#: ../source/faq/developers.txt:29
# f0f3cbccde3e4222967e56959260ec51
msgid "For an example ``acme.users`` namespace, ``acme`` is the database name and ``users`` is the collection name. Period characters **can** occur in collection names, so that ``acme.user.history`` is a valid namespace, with ``acme`` as the database name, and ``user.history`` as the collection name."
msgstr ""

#: ../source/faq/developers.txt:35
# bda15a21bd75491083a495e9e65bde94
msgid "While data models like this appear to support nested collections, the collection namespace is flat, and there is no difference from the perspective of MongoDB between ``acme``, ``acme.users``, and ``acme.records``."
msgstr ""

#: ../source/faq/developers.txt:40
# 63a79fdc061d492b9204e596ff2b580b
msgid "Each index also has its own namespace."
msgstr ""

#: ../source/faq/developers.txt:42
# 9586de3f653449e9b0a82710325370f6
msgid "MongoDB database have a configurable limit on the :limit:`number of namespaces <Number of Namespaces>` in a database."
msgstr ""

#: ../source/faq/developers.txt:46
# 62145d571fc746119431883db38fa2a0
msgid "If you remove a document, does MongoDB remove it from disk?"
msgstr ""

#: ../source/faq/developers.txt:48
#: ../source/faq/developers.txt:125
# 5bf0658d04bc4253b9a4f99465f1be3d
# 7faf6c578ef24e299501a05ae2a5cace
msgid "Yes."
msgstr ""

#: ../source/faq/developers.txt:50
# 2fa1161db05f4a0b8abc27b7829bcda4
msgid "When you use :method:`~db.collection.remove()`, the object will no longer exist in MongoDB's on-disk data storage."
msgstr ""

#: ../source/faq/developers.txt:54
# 37959802fab74936b87d500110c46119
msgid "When does MongoDB write updates to disk?"
msgstr ""

#: ../source/faq/developers.txt:56
# 33ab800276644429b8392497100bd8d3
msgid "MongoDB flushes writes to disk on a regular interval. In the default configuration, MongoDB writes data to the main data files on disk every 60 seconds and commits the :term:`journal` roughly every 100 milliseconds. These values are configurable with the :setting:`~storage.journal.commitIntervalMs` and :setting:`~storage.syncPeriodSecs`."
msgstr ""

#: ../source/faq/developers.txt:62
# 9c9362235e204bcba696a346ce883867
msgid "These values represent the *maximum* amount of time between the completion of a write operation and the point when the write is durable in the journal, if enabled, and when MongoDB flushes data to the disk. In many cases MongoDB and the operating system flush data to disk more frequently, so that the above values represents a theoretical maximum."
msgstr ""

#: ../source/faq/developers.txt:69
# c158327fa819435fb593deab0990b435
msgid "However, by default, MongoDB uses a \"lazy\" strategy to write to disk. This is advantageous in situations where the database receives a thousand increments to an object within one second, MongoDB only needs to flush this data to disk once. In addition to the aforementioned configuration options, you can also use :dbcommand:`fsync` and :doc:`/reference/write-concern` to modify this strategy."
msgstr ""

#: ../source/faq/developers.txt:77
# 518e629fedba4f8fbab8084f9012e4d4
msgid "How do I do transactions and locking in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:79
# 4092fc8e228a4cb6be5e2b07cd6171d2
msgid "MongoDB does not have support for traditional locking or complex transactions with rollback. MongoDB aims to be lightweight, fast, and predictable in its performance. This is similar to the MySQL MyISAM autocommit model. By keeping transaction support extremely simple, MongoDB can provide greater performance especially for :term:`partitioned <partition>` or :term:`replicated <replication>` systems with a number of database server processes."
msgstr ""

#: ../source/faq/developers.txt:87
# b8d85ad541f44fe088bc1e6ff753b3f5
msgid "MongoDB *does* have support for atomic operations *within* a single document. Given the possibilities provided by nested documents, this feature provides support for a large number of use-cases."
msgstr ""

#: ../source/faq/developers.txt:91
# e4675a8f48ab4010b51ab55a088fc1c6
msgid "The :doc:`/core/write-operations-atomicity` page."
msgstr ""

#: ../source/faq/developers.txt:94
# 5ac5ba4990244994a14422e7af4d5702
msgid "How do you aggregate data with MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:96
# 4e778b4a26954fc6bcb62c39514b47ca
msgid "In version 2.1 and later, you can use the new :doc:`aggregation framework </core/aggregation>`, with the :dbcommand:`aggregate` command."
msgstr ""

#: ../source/faq/developers.txt:100
# 9f8516e2ca814689a553af1cd5ae862c
msgid "MongoDB also supports :term:`map-reduce` with the :dbcommand:`mapReduce` command, as well as basic aggregation with the :dbcommand:`group`, :dbcommand:`count`, and :dbcommand:`distinct`. commands."
msgstr ""

#: ../source/faq/developers.txt:105
# bc1c0c50fa284c7ba5255878fcff6327
msgid "The :doc:`/aggregation` page."
msgstr ""

#: ../source/faq/developers.txt:108
# ee659f9c385345638d9a740086e3a172
msgid "Why does MongoDB log so many \"Connection Accepted\" events?"
msgstr ""

#: ../source/faq/developers.txt:110
# 84dd2e4d907245cfba46806f913694a0
msgid "If you see a very large number connection and re-connection messages in your MongoDB log, then clients are frequently connecting and disconnecting to the MongoDB server. This is normal behavior for applications that do not use request pooling, such as CGI. Consider using FastCGI, an Apache Module, or some other kind of persistent application server to decrease the connection overhead."
msgstr ""

#: ../source/faq/developers.txt:117
# 46e7717c811344108fffbbff195f61bb
msgid "If these connections do not impact your performance you can use the run-time :setting:`~systemLog.quiet` option or the command-line option :option:`--quiet <mongod --quiet>` to suppress these messages from the log."
msgstr ""

#: ../source/faq/developers.txt:123
# 991322e4ff514fe5848631c3cb0a40c6
msgid "Does MongoDB run on Amazon EBS?"
msgstr ""

#: ../source/faq/developers.txt:127
# f3522224a2b54fd7a5583569ae78c8c9
msgid "MongoDB users of all sizes have had a great deal of success using MongoDB on the EC2 platform using EBS disks."
msgstr ""

#: ../source/faq/developers.txt:130
# 79a5c250d4e94af4b348fa5cbb065ec4
msgid ":ecosystem:`Amazon EC2 </platforms/amazon-ec2>`"
msgstr ""

#: ../source/faq/developers.txt:133
# 6eb9edf480f9480b8d92c56300318fd5
msgid "Why are MongoDB's data files so large?"
msgstr ""

#: ../source/faq/developers.txt:135
# daceba94b8794c0b848310169ef419d0
msgid "MongoDB aggressively preallocates data files to reserve space and avoid file system fragmentation. You can use the :setting:`storage.smallFiles` setting to modify the file preallocation strategy."
msgstr ""

#: ../source/faq/developers.txt:139
# 00737f4d780448ab858125a6a62e250d
msgid ":ref:`faq-disk-size`"
msgstr ""

#: ../source/faq/developers.txt:144
# a778b7b850f34eae9617281e610a2a1a
msgid "How do I optimize storage use for small documents?"
msgstr ""

#: ../source/faq/developers.txt:146
# 782fd8b700aa400586c6b41ae327baf6
msgid "Each MongoDB document contains a certain amount of overhead. This overhead is normally insignificant but becomes significant if all documents are just a few bytes, as might be the case if the documents in your collection only have one or two fields."
msgstr ""

#: ../source/faq/developers.txt:151
# 208bce65b5b54629ada04e83fb6cf98e
msgid "Consider the following suggestions and strategies for optimizing storage utilization for these collections:"
msgstr ""

#: ../source/faq/developers.txt:154
# c1436d1b4cca4c05b5bff70b006c7deb
msgid "Use the ``_id`` field explicitly."
msgstr ""

#: ../source/faq/developers.txt:156
# 4a2b4e9b45f14ab38f08a19525ac19fe
msgid "MongoDB clients automatically add an ``_id`` field to each document and generate a unique 12-byte :term:`ObjectId` for the ``_id`` field. Furthermore, MongoDB always indexes the ``_id`` field. For smaller documents this may account for a significant amount of space."
msgstr ""

#: ../source/faq/developers.txt:162
# 6050c4be9cfb464f81ffa2964c3b76c4
msgid "To optimize storage use, users can specify a value for the ``_id`` field explicitly when inserting documents into the collection. This strategy allows applications to store a value in the ``_id`` field that would have occupied space in another portion of the document."
msgstr ""

#: ../source/faq/developers.txt:167
# 611e2dcb718b45ada04b3947f55c6e8d
msgid "You can store any value in the ``_id`` field, but because this value serves as a primary key for documents in the collection, it must uniquely identify them. If the field's value is not unique, then it cannot serve as a primary key as there would be collisions in the collection."
msgstr ""

#: ../source/faq/developers.txt:173
# 5111040cde764d008aaa3fbcd70467c1
msgid "Use shorter field names."
msgstr ""

#: ../source/faq/developers.txt:175
# 64241dad85cd4480920f216bdccf6d31
msgid "MongoDB stores all field names in every document. For most documents, this represents a small fraction of the space used by a document; however, for small documents the field names may represent a proportionally large amount of space. Consider a collection of documents that resemble the following:"
msgstr ""

#: ../source/faq/developers.txt:185
# 1ac8c4b5c358438a9e4063e688492155
msgid "If you shorten the field named ``last_name`` to ``lname`` and the field named ``best_score`` to ``score``, as follows, you could save 9 bytes per document."
msgstr ""

#: ../source/faq/developers.txt:193
# e38743809f5842f6b01bba7819cd5464
msgid "Shortening field names reduces expressiveness and does not provide considerable benefit for larger documents and where document overhead is not of significant concern. Shorter field names do not reduce the size of indexes, because indexes have a predefined structure."
msgstr ""

#: ../source/faq/developers.txt:199
# 5be2c38227d24ba4b46f5a46cc2bec06
msgid "In general it is not necessary to use short field names."
msgstr ""

#: ../source/faq/developers.txt:201
# 7acca448a48749708d6e8e1949389ab0
msgid "Embed documents."
msgstr ""

#: ../source/faq/developers.txt:203
# 4d707c3b14ea4456a4014f7991a58ff4
msgid "In some cases you may want to embed documents in other documents and save on the per-document overhead."
msgstr ""

#: ../source/faq/developers.txt:209
# c6e4096b011c4cb6a0a5b84b9bea068e
msgid "When should I use GridFS?"
msgstr ""

#: ../source/faq/developers.txt:211
# 75cb46af4f3c484994b44f7dd577cb64
msgid "For documents in a MongoDB collection, you should always use :term:`GridFS` for storing files larger than 16 MB."
msgstr ""

#: ../source/faq/developers.txt:214
# 320134943eb640fa9ffa3d81cc6f1c23
msgid "In some situations, storing large files may be more efficient in a MongoDB database than on a system-level filesystem."
msgstr ""

#: ../source/faq/developers.txt:217
# 77b6bbf4d3594b2eacb56b386c434aad
msgid "If your filesystem limits the number of files in a directory, you can use GridFS to store as many files as needed."
msgstr ""

#: ../source/faq/developers.txt:220
# f4ee3fb4e87c485993877fcde8dd068a
msgid "When you want to keep your files and metadata automatically synced and deployed across a number of systems and facilities.  When using :ref:`geographically distributed replica sets <replica-set-geographical-distribution>` MongoDB can distribute files and their metadata automatically to a number of :program:`mongod` instances and facilities."
msgstr ""

#: ../source/faq/developers.txt:227
# bbd36b4955ae4e8b929b14cd3fdadaf1
msgid "When you want to access information from portions of large files without having to load whole files into memory, you can use GridFS to recall sections of files without reading the entire file into memory."
msgstr ""

#: ../source/faq/developers.txt:232
# 339165a11be24dd1ab08bf8164bed666
msgid "Do not use GridFS if you need to update the content of the entire file atomically. As an alternative you can store multiple versions of each file and specify the current version of the file in the metadata. You can update the metadata field that indicates \"latest\" status in an atomic update after uploading the new version of the file, and later remove previous versions if needed."
msgstr ""

#: ../source/faq/developers.txt:239
# b2fb23319bdd4c81b0987739eaae4ae8
msgid "Furthermore, if your files are all smaller the 16 MB :limit:`BSON Document Size` limit, consider storing the file manually within a single document. You may use the BinData data type to store the binary data. See your :doc:`drivers </applications/drivers>` documentation for details on using BinData."
msgstr ""

#: ../source/faq/developers.txt:245
# cdd3abb57dd44fd3990e72d9cbbbbbf7
msgid "For more information on GridFS, see :doc:`/core/gridfs`."
msgstr ""

#: ../source/faq/developers.txt:248
# 61724445deee458985882e04937a2ed6
msgid "How does MongoDB address SQL or Query injection?"
msgstr ""

#: ../source/faq/developers.txt:251
# 3ce08b55861344c8b5eb7789cad69c81
msgid "BSON"
msgstr ""

#: ../source/faq/developers.txt:253
# 589e04ea475642fb937209a1961d358e
msgid "As a client program assembles a query in MongoDB, it builds a BSON object, not a string. Thus traditional SQL injection attacks are not a problem. More details and some nuances are covered below."
msgstr ""

#: ../source/faq/developers.txt:257
# 0df7c4916523416b9791a2a261f27d82
msgid "MongoDB represents queries as :term:`BSON` objects. Typically :doc:`client libraries </applications/drivers>` provide a convenient, injection free, process to build these objects. Consider the following C++ example:"
msgstr ""

#: ../source/faq/developers.txt:267
# c627a2c951bc4d36b6a72d992c85fdcd
msgid "Here, ``my_query`` then will have a value such as ``{ name : \"Joe\" }``. If ``my_query`` contained special characters, for example ``,``, ``:``, and ``{``, the query simply wouldn't match any documents. For example, users cannot hijack a query and convert it to a delete."
msgstr ""

#: ../source/faq/developers.txt:274
# 7a64c7f2bb2845d0baf7c36f90889b43
msgid "JavaScript"
msgstr ""

#: ../source/includes/fact-disable-javascript-with-noscript.rst:1
# 9fcadc07a293460f90f910ed1948a4ba
msgid "You can disable all server-side execution of JavaScript, by passing the :option:`--noscripting <mongod --noscripting>` option on the command line or setting :setting:`security.javascriptEnabled` in a configuration file."
msgstr ""

#: ../source/faq/developers.txt:280
# a3e18e47cb58499a9b980c887c62c457
msgid "All of the following MongoDB operations permit you to run arbitrary JavaScript expressions directly on the server:"
msgstr ""

#: ../source/faq/developers.txt:283
# 8d65deed0f3644b9a087b82520a7ce79
msgid ":query:`$where`"
msgstr ""

#: ../source/faq/developers.txt:284
# 28ecb22227fb4db6929b46f86d3a97a4
msgid ":dbcommand:`mapReduce`"
msgstr ""

#: ../source/faq/developers.txt:285
# 8c53b62f69304e669f54e2bb04e74efc
msgid ":dbcommand:`group`"
msgstr ""

#: ../source/faq/developers.txt:287
# 24589bd203dd4df1936bfd1606fa5fbb
msgid "You must exercise care in these cases to prevent users from submitting malicious JavaScript."
msgstr ""

#: ../source/faq/developers.txt:290
# 30e2caabdede4f72b602a03e84f4a27b
msgid "Fortunately, you can express most queries in MongoDB without JavaScript and for queries that require JavaScript, you can mix JavaScript and non-JavaScript in a single query. Place all the user-supplied fields directly in a :term:`BSON` field and pass JavaScript code to the :query:`$where` field."
msgstr ""

#: ../source/faq/developers.txt:296
# e1d8d10860d7442bb751971dcf6509a3
msgid "If you need to pass user-supplied values in a :query:`$where` clause, you may escape these values with the ``CodeWScope`` mechanism. When you set user-submitted values as variables in the scope document, you can avoid evaluating them on the database server."
msgstr ""

#: ../source/faq/developers.txt:304
# b1142df768894816b51da88b5d85c862
msgid "Dollar Sign Operator Escaping"
msgstr ""

#: ../source/faq/developers.txt:306
# bd8e19cad6f244d99b5412495e54dc93
msgid "Field names in MongoDB's query language have semantic meaning. The dollar sign (i.e ``$``) is a reserved character used to represent :doc:`operators </reference/operator>` (i.e. :update:`$inc`.) Thus, you should ensure that your application's users cannot inject operators into their inputs."
msgstr ""

#: ../source/faq/developers.txt:312
# e55fb0032d36407bad2dab82b25d14d5
msgid "In some cases, you may wish to build a BSON object with a user-provided key.  In these situations, keys will need to substitute the reserved ``$`` and ``.`` characters. Any character is sufficient, but consider using the Unicode full width equivalents: ``U+FF04`` (i.e. \"＄\") and ``U+FF0E`` (i.e. \"．\")."
msgstr ""

#: ../source/faq/developers.txt:318
# 396f3e43faa04590b835001a7cb93b42
msgid "Consider the following example:"
msgstr ""

#: ../source/faq/developers.txt:324
# ced4e07ac06a48a89f6df90cc5431651
msgid "The user may have supplied a ``$`` value in the ``a_key`` value. At the same time, ``my_object`` might be ``{ $where : \"things\" }``. Consider the following cases:"
msgstr ""

#: ../source/faq/developers.txt:328
# a84bfe98e50c464ab73a9ea1b553c180
msgid "**Insert**. Inserting this into the database does no harm. The insert process does not evaluate the object as a query."
msgstr ""

#: ../source/faq/developers.txt:333
# 86f582da1e014824964dc759aa754a53
msgid "MongoDB client drivers, if properly implemented, check for reserved characters in keys on inserts."
msgstr ""

#: ../source/faq/developers.txt:336
# a726547616d348ac98744054cd01197c
msgid "**Update**.  The :method:`~db.collection.update()` operation permits ``$`` operators in the update argument but does not support the :query:`$where` operator. Still, some users may be able to inject operators that can manipulate a single document only. Therefore your application should escape keys, as mentioned above, if reserved characters are possible."
msgstr ""

#: ../source/faq/developers.txt:343
# b86b6fe03d9d46b6a65a40b840521140
msgid "**Query** Generally this is not a problem for queries that resemble ``{ x : user_obj }``: dollar signs are not top level and have no effect. Theoretically it may be possible for the user to build a query themselves. But checking the user-submitted content for ``$`` characters in key names may help protect against this kind of injection."
msgstr ""

#: ../source/faq/developers.txt:351
# eee54adf4c9b47e4920fe3029a26a287
msgid "Driver-Specific Issues"
msgstr ""

#: ../source/faq/developers.txt:353
# d5267e0383b44bceb35a7c6b032a81fc
msgid "See the \"`PHP MongoDB Driver Security Notes <http://us.php.net/manual/en/mongo.security.php>`_\" page in the PHP driver documentation for more information"
msgstr ""

#: ../source/faq/developers.txt:360
# 9a48cca6512849f8bae913d14e3d2a22
msgid "How does MongoDB provide concurrency?"
msgstr ""

#: ../source/faq/developers.txt:362
# 4b7acbdedf2f4d0db216ad9e39e90cd7
msgid "MongoDB implements a readers-writer lock. This means that at any one time, only one client may be writing or any number of clients may be reading, but that reading and writing cannot occur simultaneously."
msgstr ""

#: ../source/faq/developers.txt:367
# 385f7ba9525045789dca5695b7960c5a
msgid "In standalone and :term:`replica sets <replica set>` the lock's scope applies to a single :program:`mongod` instance or :term:`primary` instance. In a sharded cluster, locks apply to each individual shard, not to the whole cluster."
msgstr ""

#: ../source/faq/developers.txt:372
# 418e63c6c22a46fd9bfca52e1b68a73d
msgid "For more information, see :doc:`/faq/concurrency`."
msgstr ""

#: ../source/faq/developers.txt:377
# a068a23070b24bb2a1d23e7b7734a4fc
msgid "What is the compare order for BSON types?"
msgstr ""

#: ../source/faq/developers.txt:379
# 7da5f3f274b845b3abc721c12dc98b18
msgid "MongoDB permits documents within a single collection to have fields with different :term:`BSON` types. For instance, the following documents may exist within a single collection."
msgstr ""

#: ../source/includes/fact-sort-order.rst:1
# e7624cf25e0f49a798ac7391a691e0e0
msgid "When comparing values of different :term:`BSON` types, MongoDB uses the following comparison order, from lowest to highest:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:4
# 4d5586d9a42143dbb202c4bb731e511d
msgid "MinKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:5
# 631b22289ac64047b89f2e95c646a4c7
msgid "Null"
msgstr ""

#: ../source/includes/fact-sort-order.rst:6
# caa43fa55a2b479ea4b6220f9b2ac28f
msgid "Numbers (ints, longs, doubles)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:7
# d85d251ac01e479bb5714d7de2a97525
msgid "Symbol, String"
msgstr ""

#: ../source/includes/fact-sort-order.rst:8
# acb2e65a742a4269ba89274f5ddb6f07
msgid "Object"
msgstr ""

#: ../source/includes/fact-sort-order.rst:9
# 0fed48ce74914dfa8772bff62f410ba2
msgid "Array"
msgstr ""

#: ../source/includes/fact-sort-order.rst:10
# 03143222398c4fd1976384e4bedd635d
msgid "BinData"
msgstr ""

#: ../source/includes/fact-sort-order.rst:11
# 201bf682fce341f3b26ad8073f17c337
msgid "ObjectId"
msgstr ""

#: ../source/includes/fact-sort-order.rst:12
# 4edfb99ceeab455ea13a2c651640b3c7
msgid "Boolean"
msgstr ""

#: ../source/includes/fact-sort-order.rst:13
# 7493ef6f8e8347c280b032b463773207
msgid "Date"
msgstr ""

#: ../source/includes/fact-sort-order.rst:14
# c0b2394f83a64151b13f39e43432ff5c
msgid "Timestamp"
msgstr ""

#: ../source/includes/fact-sort-order.rst:15
# 166760a9b54740e28a40b742e5673f83
msgid "Regular Expression"
msgstr ""

#: ../source/includes/fact-sort-order.rst:16
# 6e856d1c159841abade7bcdef396430c
msgid "MaxKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:18
# 075084281587433a989387a08d85263f
msgid "MongoDB treats some types as equivalent for comparison purposes. For instance, numeric types undergo conversion before comparison."
msgstr ""

#: ../source/includes/fact-sort-order.rst:21
# 2e10ab59e53d4223b9ba9e4d77a244d4
msgid "Date objects sort before Timestamp objects. Previously Date and Timestamp objects sorted together."
msgstr ""

#: ../source/includes/fact-sort-order.rst:25
# 269b61fcaa2c48a8abc8bd0d19321ef2
msgid "The comparison treats a non-existent field as it would an empty BSON Object. As such, a sort on the ``a`` field in documents ``{ }`` and ``{ a: null }`` would treat the documents as equivalent in sort order."
msgstr ""

#: ../source/includes/fact-sort-order.rst:29
# 687a76717acf4d68a09f848ba8ff44b7
msgid "With arrays, a less-than comparison or an ascending sort compares the smallest element of arrays, and a greater-than comparison or a descending sort compares the largest element of the arrays. As such, when comparing a field whose value is a single-element array (e.g. ``[ 1 ]``) with non-array fields (e.g. ``2``), the comparison is between ``1`` and ``2``. A comparison of an empty array (e.g. ``[ ]``) treats the empty array as less than ``null`` or a missing field."
msgstr ""

#: ../source/includes/fact-sort-order.rst:37
# c5f1010cbeea4ba793c314a77db15169
msgid "MongoDB sorts ``BinData`` in the following order:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:39
# 9a5c87f3953b46d7b16a9656f489b2cc
msgid "First, the length or size of the data."
msgstr ""

#: ../source/includes/fact-sort-order.rst:41
# f4482e29960241f683494cb838ea7a97
msgid "Then, by the BSON one-byte subtype."
msgstr ""

#: ../source/includes/fact-sort-order.rst:43
# af0902b06f2545198ce0e38f33786c8d
msgid "Finally, by the data, performing a byte-by-byte comparison."
msgstr ""

#: ../source/faq/developers.txt:390
# 359b8e131caa4c27b63c6049677c38d9
msgid "Consider the following :program:`mongo` example:"
msgstr ""

#: ../source/faq/developers.txt:405
# d238fb89788a4f749ab4a6ae71beaa6f
msgid "The :query:`$type` operator provides access to :term:`BSON type <BSON types>` comparison in the MongoDB query syntax. See the documentation on :term:`BSON types` and the :query:`$type` operator for additional information."
msgstr ""

#: ../source/includes/warning-mixing-types.rst:3
# d007b6ebac43438f837e36cbe4d47abb
msgid "Data models that associate a field name with different data types within a collection are *strongly* discouraged."
msgstr ""

#: ../source/includes/warning-mixing-types.rst:6
# 1888d4c53cdd468cb2cef2d463cbf525
msgid "Without internal consistency complicates application code, and can lead to unnecessary complexity for application developers."
msgstr ""

#: ../source/faq/developers.txt:414
# d10e2038591049e2a34893a73858c49a
msgid "The :doc:`Tailable Cursors </tutorial/create-tailable-cursor>` page for an example of a C++ use of ``MinKey``."
msgstr ""

#: ../source/faq/developers.txt:426
# 55835666336642edbe26448802ddd322
msgid "When multiplying values of mixed types, what type conversion rules apply?"
msgstr ""

#: ../source/faq/developers.txt:428
# 6c3f517f00b94c3f87eaaaa01831be3f
msgid "The :update:`$mul` multiplies the numeric value of a field by a number. For multiplication with values of mixed numeric types (32-bit integer, 64-bit integer, float), the following type conversion rules apply:"
msgstr ""

#: ../source/faq/developers.txt:437
# 20114cf9b12a42708af35837c31a88f6
msgid "32-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:438
#: ../source/faq/developers.txt:443
#: ../source/faq/developers.txt:447
#: ../source/faq/developers.txt:448
# 3ea9b7119dd14000b98bd37e77107099
# eefee8553ab541af961a6710686bea27
# 0c34bb983449470dad9b65ae7524be73
# 3843eed7beae4308b626bcac611d9d80
msgid "64-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:439
#: ../source/faq/developers.txt:444
#: ../source/faq/developers.txt:449
#: ../source/faq/developers.txt:452
#: ../source/faq/developers.txt:453
#: ../source/faq/developers.txt:454
# c4218e3c9c2d4aec98ad01c6a8271910
# f74ac78d99d14ced8efe73bd785503a8
# 9c04de646d9a43968d47f3a89d9a2da8
# 940c420221f9415bb192ffd0bce1521f
# 05c6ea175e2843fdaeed8474289052b2
# 1fef2c85648541cab3df7ee61169e97e
msgid "Float"
msgstr ""

#: ../source/faq/developers.txt:441
# 7e6ae693c3814f1fa1a1d41b78e02163
msgid "**32-bit Integer**"
msgstr ""

#: ../source/faq/developers.txt:442
# bf7d5edc75e1498597a204198301334d
msgid "32-bit or 64-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:446
# 07300e237f854595b67e704907f16c4c
msgid "**64-bit Integer**"
msgstr ""

#: ../source/faq/developers.txt:451
# 1ee2b96214c54931b77fd235fc6fc7ef
msgid "**Float**"
msgstr ""

#: ../source/faq/developers.txt:458
# 3e14be274ee14abba2b679038e958577
msgid "If the product of two 32-bit integers exceeds the maximum value for a 32-bit integer, the result is a 64-bit integer."
msgstr ""

#: ../source/faq/developers.txt:461
# 23b4aeaa08d641c6887fbe2147b313f4
msgid "Integer operations of any type that exceed the maximum value for a 64-bit integer produce an error."
msgstr ""

#: ../source/faq/developers.txt:467
# d49d0da18ac74e3a947b3033ea867795
msgid "How do I query for fields that have null values?"
msgstr ""

#: ../source/faq/developers.txt:469
# 41f6a7539f5e4100ab99c29f946110dc
msgid "Different query operators treat ``null`` values differently."
msgstr ""

#: ../source/faq/developers.txt:471
# 167f2badc165418ba4a758a0ce2128b9
msgid "Consider the collection ``test`` with the following documents:"
msgstr ""

#: ../source/faq/developers.txt:481
# b2cf2c012cbc4174a0fb6424f53b0af8
msgid "Comparison with Null"
msgstr ""

#: ../source/faq/developers.txt:483
# 5d7f7213302f41e0925d11179b5330a6
msgid "The ``{ cancelDate : null }`` query matches documents that either contain the ``cancelDate`` field whose value is ``null`` *or* that do not contain the ``cancelDate`` field. If the queried index is :ref:`sparse <index-type-sparse>`, however, then the query will only match ``null`` values, not missing fields."
msgstr ""

#: ../source/faq/developers.txt:489
# 14d6f72838814df0983a571fc6d35e4c
msgid "If using the sparse index results in an incomplete result, MongoDB will not use the index unless a :method:`~cursor.hint()` explicitly specifies the index. See :ref:`index-type-sparse` for more information."
msgstr ""

#: ../source/faq/developers.txt:494
# 4ee56498299c4986888a452ccfe72a95
msgid "Given the following query:"
msgstr ""

#: ../source/faq/developers.txt:500
# f76eea36586e41e0a9f3891d93f1d921
msgid "The query returns both documents:"
msgstr ""

#: ../source/faq/developers.txt:508
# 8abc0524ef7542379d85e89a382a1cec
msgid "Type Check"
msgstr ""

#: ../source/faq/developers.txt:510
# ec7dce1f3b894dd2b456f0c2bbcdfb22
msgid "The ``{ cancelDate : { $type: 10 } }`` query matches documents that contains the ``cancelDate`` field whose value is ``null`` *only*; i.e. the value of the ``cancelDate`` field is of BSON Type ``Null`` (i.e. ``10``) :"
msgstr ""

#: ../source/faq/developers.txt:519
# bd535179e8f14efca0c5169127b0a7eb
msgid "The query returns only the document that contains the ``null`` value:"
msgstr ""

#: ../source/faq/developers.txt:526
# 0b43fcf6371e4f23b4d020e40dab72d7
msgid "Existence Check"
msgstr ""

#: ../source/faq/developers.txt:528
# 8d138ad773a64a82bbc14257b64fea76
msgid "The ``{ cancelDate : { $exists: false } }`` query matches documents that do not contain the ``cancelDate`` field:"
msgstr ""

#: ../source/faq/developers.txt:535
# 899f4e92256e4cfba083b55a6043aba1
msgid "The query returns only the document that does *not* contain the ``cancelDate`` field:"
msgstr ""

#: ../source/faq/developers.txt:542
# b1695e288fde4fe4b147d5c7f092e789
msgid "The reference documentation for the :query:`$type` and :query:`$exists` operators."
msgstr ""

#: ../source/faq/developers.txt:548
# 3dfd04200862410cbb089d8702cddb10
msgid "Are there any restrictions on the names of Collections?"
msgstr ""

#: ../source/faq/developers.txt:550
# e3a954b34f984b1c967124ea9b8f18cc
msgid "Collection names can be any UTF-8 string with the following exceptions:"
msgstr ""

#: ../source/faq/developers.txt:553
# 9b022aaf57404d308a38ff4d62da4830
msgid "A collection name should begin with a letter or an underscore."
msgstr ""

#: ../source/faq/developers.txt:555
# 3e2c372cca0448bda82182571d7e0f1e
msgid "The empty string (``\"\"``) is not a valid collection name."
msgstr ""

#: ../source/faq/developers.txt:557
# 2ab41c2d564940ab83b430f45df6234d
msgid "Collection names cannot contain the ``$`` character. (version 2.2 only)"
msgstr ""

#: ../source/faq/developers.txt:559
# 940275637e93407ba4c5ce5575789c03
msgid "Collection names cannot contain the null character: ``\\0``"
msgstr ""

#: ../source/faq/developers.txt:561
# 3d8883b57c9b46a894583b90e66852e7
msgid "Do not name a collection using the ``system.`` prefix. MongoDB reserves ``system.`` for system collections."
msgstr ""

#: ../source/faq/developers.txt:565
# 2b3e56236ce3479491978c2b08c3152f
msgid "The maximum size of a collection name is 128 characters, including the name of the database. However, for maximum flexibility, collections should have names less than 80 characters."
msgstr ""

#: ../source/faq/developers.txt:569
# 0fd2f2928b6a4291a00cf5e931a6bc78
msgid "If your collection name includes special characters, such as the underscore character, then to access the collection use the :method:`db.getCollection()` method or a :api:`similar method for your driver <>`."
msgstr ""

#: ../source/faq/developers.txt:0
# c767daff5cdc4e9fa05c8562d433a957
msgid "Example"
msgstr ""

#: ../source/faq/developers.txt:581
# f0390b4909b642f49c280c771755d2d5
msgid "To perform a query, use the :method:`~db.collection.find()` method, in as the following:"
msgstr ""

#: ../source/faq/developers.txt:591
# bd6a21c24eaa42c9ac846e08ce10efb0
msgid "How do I isolate cursors from intervening write operations?"
msgstr ""

#: ../source/faq/developers.txt:593
# 2959bfcbe69145b0b5a5f9c467a3ec6e
msgid "MongoDB cursors can return the same document more than once in some situations. [#duplicate-document-in-result-set]_ You can use the :method:`~cursor.snapshot()` method on a cursor to isolate the operation for a very specific case."
msgstr ""

#: ../source/faq/developers.txt:598
# c92ae7805872471a88d362296edd3c8b
msgid ":method:`~cursor.snapshot()` traverses the index on the ``_id`` field and guarantees that the query will return each document (with respect to the value of the ``_id`` field) no more than once. [#id-is-immutable]_"
msgstr ""

#: ../source/faq/developers.txt:602
# af3f3787d39a43d1a1f08b5181a3472e
msgid "The :method:`~cursor.snapshot()` does not guarantee that the data returned by the query will reflect a single moment in time *nor* does it provide isolation from insert or delete operations."
msgstr ""

#: ../source/faq/developers.txt:608
# 6221ba93f5df4a3ea92fcd14a58e5363
msgid "You **cannot** use :method:`~cursor.snapshot()` with :term:`sharded collections <sharding>`."
msgstr ""

#: ../source/faq/developers.txt:611
# e1d26e5d4597467090fac3f42886b30f
msgid "You **cannot** use :method:`~cursor.snapshot()` with :method:`~cursor.sort()` or :method:`~cursor.hint()` cursor methods."
msgstr ""

#: ../source/faq/developers.txt:615
# 524d01959a544faaaecae68499921815
msgid "As an alternative, if your collection has a field or fields that are never modified, you can use a *unique* index on this field or these fields to achieve a similar result as the :method:`~cursor.snapshot()`. Query with :method:`~cursor.hint()` to explicitly force the query to use that index."
msgstr ""

#: ../source/faq/developers.txt:621
# e763a078511f44c38456ac31e948759f
msgid "As a cursor returns documents other operations may interleave with the query: if some of these operations are :doc:`updates </core/write-operations>` that cause the document to move (in the case of a table scan, caused by document growth) or that change the indexed field on the index used by the query; then the cursor will return the same document more than once."
msgstr ""

#: ../source/faq/developers.txt:629
# bb07b7ab01964e4e8dc0d4d380173699
msgid "MongoDB does not permit changes to the value of the ``_id`` field; it is not possible for a cursor that transverses this index to pass the same document more than once."
msgstr ""

#: ../source/faq/developers.txt:636
# 1b15489834af4edb93adfadfda7d60a4
msgid "When should I embed documents within other documents?"
msgstr ""

#: ../source/faq/developers.txt:638
# 6fab4754233f4d90a7075baa5e66b76c
msgid "When :doc:`modeling data in MongoDB </core/data-models>`, embedding is frequently the choice for:"
msgstr ""

#: ../source/faq/developers.txt:641
# f5d01bc3eb2643e3ab25590f9ca4fb26
msgid "\"contains\" relationships between entities."
msgstr ""

#: ../source/faq/developers.txt:643
# 5704869dfca4491baae844b767118262
msgid "one-to-many relationships when the \"many\" objects *always* appear with or are viewed in the context of their parents."
msgstr ""

#: ../source/faq/developers.txt:646
# d796250d5f4e494d822d26cbbf967e58
msgid "You should also consider embedding for performance reasons if you have a collection with a large number of small documents. Nevertheless, if small, separate documents represent the natural model for the data, then you should maintain that model."
msgstr ""

#: ../source/faq/developers.txt:651
# 635b4bdf40a44ac1abadf77fe22b1244
msgid "If, however, you can group these small documents by some logical relationship *and* you frequently retrieve the documents by this grouping, you might consider \"rolling-up\" the small documents into larger documents that contain an array of embedded documents. Keep in mind that if you often only need to retrieve a subset of the documents within the group, then \"rolling-up\" the documents may not provide better performance."
msgstr ""

#: ../source/faq/developers.txt:659
# 58c2982ad791445195a2d98dcb724eea
msgid "\"Rolling up\" these small documents into logical groupings means that queries to retrieve a group of documents involve sequential reads and fewer random disk accesses."
msgstr ""

#: ../source/faq/developers.txt:665
# 523f78be397043c3abd07e7923281e04
msgid "Additionally, \"rolling up\" documents and moving common fields to the larger document benefit the index on these fields. There would be fewer copies of the common fields *and* there would be fewer associated key entries in the corresponding index. See :doc:`/core/indexes` for more information on indexes."
msgstr ""

#: ../source/faq/developers.txt:679
# 2b7115f4516c4976acdf683504fae3f7
msgid "Where can I learn more about data modeling in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:681
# e6e1e009b2474debbfcd635618106266
msgid "Begin by reading the documents in the :doc:`/data-modeling` section. These documents contain a high level introduction to data modeling considerations in addition to practical examples of data models targeted at particular issues."
msgstr ""

#: ../source/faq/developers.txt:686
# 57b30bd3435941d3acae8223536a87ab
msgid "Additionally, consider the following external resources that provide additional examples:"
msgstr ""

#: ../source/faq/developers.txt:697
# e667346b865242dda498daa7f7fe1736
msgid "`Schema Design by Example <http://www.mongodb.com/presentations/mongodb-melbourne-2012/schema-design-example>`_"
msgstr ""

#: ../source/faq/developers.txt:699
# 8bb308d9ccec487e9f18aba35ea0afdd
msgid "`Dynamic Schema Blog Post <http://dmerr.tumblr.com/post/6633338010/schemaless>`_"
msgstr ""

#: ../source/faq/developers.txt:702
# f467118a344f4ca5a2c5f9601370b316
msgid ":ecosystem:`MongoDB Data Modeling and Rails </tutorial/model-data-for-ruby-on-rails/>`"
msgstr ""

#: ../source/faq/developers.txt:705
# a1fa37ce9b714008b18f47531cb03602
msgid "`Ruby Example of Materialized Paths <http://github.com/banker/newsmonger/blob/master/app/models/comment.rb>`_"
msgstr ""

#: ../source/faq/developers.txt:708
# 39263bcb6aed4462bf6b6aeb0ca0b145
msgid "`Sean Cribs Blog Post <http://seancribbs.com/tech/2009/09/28/modeling-a-tree-in-a-document-database>`_ which was the source for much of the :ref:`data-modeling-trees` content."
msgstr ""

#: ../source/faq/developers.txt:716
# f2725b1cb0564498b54c806d930d2642
msgid "Can I manually pad documents to prevent moves during updates?"
msgstr ""

#: ../source/faq/developers.txt:720
# ca831fce2f8c4cf2a0cf967333d5a9cb
msgid "An update can cause a document to move on disk if the document grows in size. To *minimize* document movements, MongoDB uses :term:`padding`."
msgstr ""

#: ../source/faq/developers.txt:724
# 54a4fc5e35de4236a32aeeb76951009e
msgid "You should not have to pad manually because by default, MongoDB uses :ref:`power-of-2-allocation` to add :ref:`padding automatically <record-allocation-strategies>`. The :ref:`power-of-2-allocation` ensures that MongoDB allocates document space in sizes that are powers of 2, which helps ensure that MongoDB can efficiently reuse free space created by document deletion or relocation as well as reduce the occurrences of reallocations in many cases."
msgstr ""

#: ../source/faq/developers.txt:732
# b2fe4ab40bed405f883c7d7ca8a0dcf6
msgid "However, *if you must* pad a document manually, you can add a temporary field to the document and then :update:`$unset` the field, as in the following example."
msgstr ""

#: ../source/faq/developers.txt:736
# 776dc713bf04487586d5889ab311c3c7
msgid "Do not manually pad documents in a capped collection. Applying manual padding to a document in a capped collection can break replication. Also, the padding is not preserved if you re-sync the MongoDB instance."
msgstr ""

#: ../source/faq/developers.txt:760
# d51242c94a9d4134aaefc32e09e777f0
msgid ":ref:`record-allocation-strategies`"
msgstr ""

