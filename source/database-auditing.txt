.. _set-up-database-auditing:

========================
Set Up Database Auditing
========================

.. default-domain:: mongodb

.. meta::
   :keywords: audit

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/fact-atlas-free-tier-limits.rst

.. include:: /includes/serverless-preview-dont-use.rst

Overview
--------

.. note:: **Required Privileges**

   To enable or disable database auditing, you must have the 
   :authrole:`Organization Owner` role or the :authrole:`Project Owner` 
   role for the project that you want to update.

Auditing allows
administrators to track system activity for deployments with multiple
users. |service| administrators can select the actions that they want 
to audit, as well as the database users, |service| roles, and LDAP 
groups whose actions they want audited. |service| supports
:manual:`auditing </core/auditing>` of most of the documented
:ref:`system event actions <audit-action-details-results>`,
with the following limitations:

- When an |service| user performs an action in the |service| UI on a {+cluster+},
  both the audit logs and ``mongodb.log`` file log the ``mms-automation`` 
  database user as the user performing the auditable auction.
  However, the :ref:`Project Activity Feed <view-activity-feed>` 
  logs the actual username of the |service| user
  responsible for the action.

- The |service| audit logs don't track user creation or modification 
  events because |service| performs these operations directly in the 
  ``admin`` database.

.. important:: Performing a Full Database Audit

   Due to these noted limitations, you must 
   use a combination of audit logs, the ``mongodb.log``, 
   and the :ref:`Project Activity Feed <view-activity-feed>` 
   to perform a full audit.

The ``authCheck`` event action logs authorization attempts by users
trying to read from and write to databases in the clusters in your
project. The following specific commands are audited:

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - ``authCheck Reads``
     - ``authCheck Writes``

   * - :manual:`aggregate </reference/command/aggregate>`
     - :manual:`aggregate </reference/command/aggregate>`

   * - :manual:`mapReduce </reference/command/mapReduce>`
     - :manual:`mapReduce </reference/command/mapReduce>`

   * - :manual:`distinct </reference/command/distinct>`
     - :manual:`delete </reference/command/delete>`

   * - :manual:`eval </reference/command/eval>` [1]_
     - :manual:`eval </reference/command/eval>` [1]_

   * - :manual:`count </reference/command/count>`
     - :manual:`findAndModify </reference/command/findAndModify>`

   * - :manual:`geoNear </reference/command/geoNear>`
     - :manual:`insert </reference/command/insert>`

   * - :manual:`geoSearch </reference/command/geoSearch>`
     - :manual:`update </reference/command/update>`

   * - :manual:`group </reference/command/group>`
     - :manual:`resetError </reference/command/resetError>`

   * - :manual:`find </reference/command/find>`
     -

   * - :manual:`getLastError </reference/command/getLastError>`
     -

   * - :manual:`getMore </reference/command/getMore>`
     -

   * - :manual:`getPrevError </reference/command/getPrevError>`
     -

   * - :manual:`parallelCollectionScan </reference/command/parallelCollectionScan>` [1]_
     -

.. [1] MongoDB versions 4.2 and later do not support these commands.

|service| implements the ``authCheck`` event action as the following
four separate actions:

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Event Action
     - Description

   * - ``authChecksReadFailures``
     - The ``authCheck`` event action for all failed reads with the :manual:`auditAuthorizationSuccess
       </reference/parameters/#param.auditAuthorizationSuccess>`
       parameter set to false. This is the default for read-related event actions.

   * - ``authChecksReadAll``
     - The ``authCheck`` event action for all reads, both sucesses and failures.
       Same as ``authChecksReadFailures`` but with the :manual:`auditAuthorizationSuccess </reference/parameters/#param.auditAuthorizationSuccess>`
       parameter set to true.

       .. warning::

          Enabling Audit authorization successes can severely impact cluster performance. Enable this option with caution.

   * - ``authChecksWriteFailures``
     - The ``authCheck`` event action for all failed writes with the :manual:`auditAuthorizationSuccess
       </reference/parameters/#param.auditAuthorizationSuccess>`
       parameter set to false. This is the default for write-related event actions.

   * - ``authChecksWriteAll``
     - The ``authCheck`` event action for all writes, both successes and failures.
       Same as ``authChecksWriteFailures`` but with the :manual:`auditAuthorizationSuccess </reference/parameters/#param.auditAuthorizationSuccess>`
       parameter set to true.

       .. warning::

          Enabling Audit authorization successes can severely impact cluster performance. Enable this option with caution.

To learn about how MongoDB writes audit events to disk, see :manual:`Audit Guarantee </core/auditing/#audit-guarantee>`
in the MongoDB Manual.

.. _enable-auditing-atlas:

Procedure
---------

.. note::

   To learn about best practices for auditing the actions of temporary
   database users, see :ref:`audit-temp-db-users`.

Use the following procedure to set up database auditing:

.. include:: /includes/steps/set-up-database-auditing.rst

To retrieve the audit logs in |service|, see :ref:`MongoDB Logs <mongodb-logs>`.
To retrieve the audit logs using the API, see :doc:`Logs </reference/api/logs>`.

.. _auditing-custom-filter:

Configure a Custom Auditing Filter
----------------------------------

.. include:: /includes/fact-atlas-free-tier-limits.rst

.. include:: /includes/serverless-preview-dont-use.rst

|service| supports specifying a JSON-formatted audit filter
for customizing :manual:`MongoDB Auditing </core/auditing>`. 

Custom audit filters allow users to forgo the managed 
{+atlas-ui+} :doc:`auditing filter builder </database-auditing>`
in favor of hand-tailored granular control of event auditing.
|service| only checks that the custom filter uses valid
JSON syntax, and does not validate or test the filter's functionality.

The audit filter document must resolve to a query that matches one or 
more fields in the 
:manual:`audit event message </reference/audit-message/#audit-message>`.
The filter document can use combinations of 
:manual:`query operators </reference/operator/query/>` and equality 
conditions to match the desired audit messages.

For a selection of example auditing filters, see 
:ref:`auditing-filter-example`. For complete documentation on
configuring MongoDB auditing filters, see 
:manual:`Configure Audit Filter </tutorial/configure-audit-filters>`.

.. important::

   |service| uses a :ref:`rolling upgrade <high-availability>` strategy 
   for enabling or updating audit configuration settings across all 
   clusters in the |service| project. Rolling upgrades require at least 
   one election per replica set. 

   For instructions on testing application resilience to replica set
   elections, see :doc:`/tutorial/test-failover`. For more information
   on how |service| provides high availability, see
   :ref:`Atlas High Availability <high-availability>`. 


Procedure
~~~~~~~~~

.. include:: /includes/steps/custom-auditing-filter.rst

Edit a Custom Auditing Filter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can edit your filter at any time:

1. In the :guilabel:`Security` section of the left navigation, click
   :guilabel:`Advanced`.

#. Under :guilabel:`Database Auditing`:icon-fa5:`arrow-right`
   :guilabel:`Configure Your Auditing Filter`, click
   :guilabel:`Use Custom JSON Filter`. 

#. Make the required changes. 

#. Click :guilabel:`Save`.

.. _auditing-filter-example:

Example Auditing Filters
------------------------

Use the following example auditing filters for guidance in constructing
your own filters.

.. important::

   These examples are not intended for use in
   production environments, nor are they a replacement for familiarity
   with the :manual:`MongoDB Auditing Documentation </core/auditing/>`.

Audit all authentication events for known users
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: json
 
   {
     "atype": "authenticate"
   }

Audit all authentication events for known users and authentication failures for unknown users
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: json

   {
     "$or": [
       {
         "users": []
       },
       {
         "atype": "authenticate"
       } 
     ]
   }

.. note::

   The ``authenticate`` action is required to log authentication
   failures from known and unknown users.

Audit authentication events for the "myClusterAdministrator" user
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: json        

    {
      "atype": "authenticate",
      "param": {
        "user": "myClusterAdministrator",
        "db": "admin",
        "mechanism": "SCRAM-SHA-1"
      }
    }

Audit unauthorized attempts at executing the selected commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: json
   
   {
     "atype": "authCheck",
     "param.command": {
       "$in": [
         "insert",
         "update",
         "delete"
       ]
     }
   }
