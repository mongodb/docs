.. _about-mongosync:

====================
About ``mongosync``
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The :ref:`mongosync <c2c-mongosync>` binary is the primary process used in 
{+c2c-product-name+}. ``mongosync`` migrates data from a source cluster to a 
destination cluster and keeps the clusters in continuous sync until you 
:ref:`finalize <c2c-about-finalizing>` the sync. 

You can use ``mongosync`` to create 
dedicated analytics, development, or testing clusters that mirror your 
production environment. 

``mongosync`` keeps track of its current actions through 
:ref:`states <c2c-states>`. ``mongosync`` enters different states depending on 
the requests it receives. The current ``mongosync`` state determines which API 
operations you can run. 

.. include:: /includes/fact-state-transitions.rst

To view the current state of ``mongosync``, use the :ref:`/progress
<c2c-api-progress>` endpoint.

The following diagram illustrates the relationship between ``mongosync`` states 
and API operations:

.. figure:: /images/mongosync.drawio.bakedsvg.svg
   :alt: Diagram of relationship between ``mongosync`` states and API operations
   :figwidth: 600px

Details
-------

Connect Source and Destination Clusters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You must create an initial connection to the source and destination 
clusters before ``mongosync`` can start to sync data. For more information, see 
:ref:`c2c-connecting`.

When ``mongosync`` connects to the source and destination clusters, the 
synchronization process enters the :ref:`IDLE <c2c-state-idle>` state.  

Start Sync 
~~~~~~~~~~

To start the synchronization process, call the :ref:`start <c2c-api-start>` 
endpoint. 

The ``start`` endpoint begins the ``RUNNING`` state, which is when ``mongosync`` 
syncs data from the source cluster to the destination cluster. If you 
make subsequent writes to the source cluster, ``mongosync`` applies the 
operations to the destination cluster. 

For every source collection that syncs, 
``mongosync`` creates a corresponding collection on the destination. 

``mongosync`` temporarily alters some of the replicated collection
characteristics in the destination cluster. It changes these destination cluster
characteristics back to the source cluster characteristics during the ``COMMIT`` 
state. For more information, see 
:ref:`Collection Characteristic Changes <c2c-collection-changes>`.

The ``RUNNING`` state includes two phases:

- :ref:`Collection copy <c2c-collection-copy>`

- :ref:`Change event application <c2c-cea>`

.. _c2c-collection-copy:

Collection Copy
'''''''''''''''

During the collection copy phase, ``mongosync`` executes the initial data 
transfer from the source cluster to the destination 
cluster. ``mongosync`` performs this data transfer by splitting the 
source collections into partitions and copying the partitions to their 
corresponding destination collections.

.. _c2c-cea:

Change Event Application
''''''''''''''''''''''''

The change event application (CEA) phase starts after the collection copy phase
ends. 

During the CEA phase, ``mongosync`` continuously 
updates the destination cluster when you make changes to the source cluster. 

To make continuous updates to the destination cluster, ``mongosync`` opens a 
:ref:`change stream <changeStreams>` on the source cluster and applies the
:ref:`change events <change-events>` it receives to the destination cluster. 

When the CEA phase begins, ``mongosync`` applies the change events 
that are received during the collection copy phase before processing the 
events that are received during the CEA phase. 

Pause Sync
~~~~~~~~~~

To pause the sync process and enter the :ref:`PAUSED <c2c-state-paused>` state,
call the :ref:`pause <c2c-api-pause>` endpoint. 

To resume a paused sync process and return ``mongosync`` to the 
``RUNNING`` state, call the :ref:`resume <c2c-api-resume>` endpoint. 

.. _c2c-about-finalizing:

Finalize Sync
~~~~~~~~~~~~~

To finalize the sync between the source and destination clusters, 
call the :ref:`commit <c2c-api-commit>` endpoint. 

The ``commit`` endpoint starts the :ref:`COMMITTING <c2c-state-committing>` 
state, which is when ``mongosync`` stops continuous sync between the source and 
destination clusters. 

When the ``COMMITTING`` state begins, ``mongosync`` retrieves the 
commit timestamp, which is the time of the most recent operation on the source 
cluster. 

If there are no errors, ``mongosync`` sends a success message and exits CEA by 
processing events up until the commit timestamp. ``mongosync`` also restores 
collection characteristics that ``mongosync`` temporarily alters during 
synchronization.

When the above process is completed, ``mongosync`` enters the 
:ref:`COMMITTED <c2c-state-committed>` state. The ``COMMITTED`` state indicates 
that the cutover for the sync process is complete.

.. _c2c-about-reversing:

Reverse Sync
~~~~~~~~~~~~

To reverse the direction of a committed sync operation, call the 
:ref:`reverse <c2c-api-reverse>` endpoint. 

The ``reverse`` endpoint starts the :ref:`REVERSING <c2c-state-reversing>` 
state. ``mongosync`` swaps the source and destination clusters and resumes 
applying change events.

If the reverse sync is successful, ``mongosync`` enters the ``RUNNING`` state. 
The synchronization continues in the reverse direction from the original 
sync job. 

Learn More
----------

To learn more about ``mongosync``, see:

- :ref:`c2c-mongosync`
- :ref:`mongosync Behavior <c2c-mongosync-behavior>`
- :ref:`c2c-limitations`