title: Shut down the entire cluster.
stepnum: 1
ref: shutdown-cluster
pre: |
  Stop all :binary:`~bin.mongos` and :binary:`~bin.mongod` processes, including
  all shards *and* all config servers. To stop all members, connect to
  **each** member and issue following operations:
action:
  language: javascript
  code: |
    use admin
    db.shutdownServer()
---
title: Restore the data files.
stepnum: 2
ref: restore
content: |
  On each server, extract the data files to the location where the
  :binary:`~bin.mongod` instance will access them and restore the following:

  - **Data files for each server in each shard.**

    For each shard replica set, restore all the members of the replica
    set. See :doc:`/tutorial/restore-replica-set-from-backup`.

  - **Data files for each config server.**
 
    To restore to the :ref:`config server replica set (CSRS) <csrs>`,
    see :doc:`/tutorial/restore-replica-set-from-backup`.

  .. seealso:: :ref:`backup-restore-snapshot`.
---
title: Restart the config servers.
stepnum: 3
ref: restart-config-servers
content: |
   
   Restart each member of the CSRS.
       
   .. code-block:: sh

      mongod --configsvr --replSet <CSRS name> --dbpath <config dbpath> --port 27019

---
title: "Start **one** :binary:`~bin.mongos` instance."
stepnum: 4
ref: restart-one-mongos
content: |
   Start :binary:`~bin.mongos` with the :option:`--configdb <mongos --configdb>` option set to
   the name of the config server replica set and seed list of the
   members started in {{step}}
replacement:
   step: "the step `Restart the config servers.`_"
---
title: "If shard hostnames have changed, update the config database."
stepnum: 5
ref: shard-hostname
content: |
   If shard hostnames have changed, connect a :binary:`~bin.mongo` shell to
   the :binary:`~bin.mongos` instance and update the :data:`~config.shards`
   collection in the :ref:`config-database` to reflect the new
   hostnames.
---
title: "Clear per-shard sharding recovery information."
stepnum: 6
ref: per-shard-recovery
pre: |
   If the backup data was from a deployment using :ref:`CSRS <csrs>`,
   clear out the no longer applicable recovery information on each shard. For each
   shard:
      
   #. Restart the replica set members for the shard with the
      :parameter:`recoverShardingState` parameter set to ``false``.
      Include additional options as required for your specific
      configuration.

      .. code-block:: sh

         mongod --setParameter=recoverShardingState=false --replSet <replSetName> --shardsvr --port <port>

   #. Connect :binary:`~bin.mongo` shell to the primary of the replica set
      and delete from the ``admin.system.version`` collection the
      document where ``_id`` equals ``minOpTimeRecovery`` id. Use
      write concern ``"majority"``.

      .. code-block:: javascript

         use admin
         db.system.version.remove(
            { _id: "minOpTimeRecovery" },
            { writeConcern: { w: "majority" } }
         )

   #. Shut down the replica set members for the shard.
---
title: "Restart all the shard :binary:`~bin.mongod` instances."
stepnum: 7
ref: restart-shards
content: |
   Do not include the :parameter:`recoverShardingState`  parameter.
   
   .. versionchanged:: 3.4

      Include the :option:`--shardsvr <mongod --shardsvr>` option and, if appropriate, the
      :option:`--port <mongod --port>` option.
      
---
title: "Restart the other :binary:`~bin.mongos` instances."
stepnum: 8
ref: restart-mongos-instances
content: |
   Specify for :option:`--configdb <mongos --configdb>` the
   config server replica set name and a seed list of the CSRS started
   in {{step}}
replacement:
   step: "the step `Restart the config servers.`_"
---
title: "Verify that the cluster is operational."
stepnum: 9
ref: ensure
pre: |
  Connect to a :binary:`~bin.mongos` instance from a :binary:`~bin.mongo` shell
  and use the :method:`db.printShardingStatus()` method to ensure that
  the cluster is operational.
action:
  language: javascript
  code: |
    db.printShardingStatus()
    show collections
...
