.. _pymongo-bulk-write:

=====================
Bulk Write Operations
=====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: insert, update, replace, code example

Overview
--------

In this guide, you can learn how to use {+driver-short+} to
perform **bulk operations**. Bulk operations reduce the number
of calls to the server by performing multiple write operations
in a single method.

The ``Collection`` and ``MongoClient`` classes both provide a ``bulk_write()``
method. When calling ``bulk_write()`` on a ``Collection`` instance, you can
perform multiple write operations on a single collection. When calling
``bulk_write()`` on a ``MongoClient`` instance, you can perform bulk writes across
multiple namespaces. In MongoDB, a namespace consists of the database name and the collection
name in the format ``<database>.<collection>``. 

.. important::

   To perform bulk operations on a ``MongoClient`` instance,
   ensure that your application meets the following
   requirements:

   - Uses {+driver-short+} v4.9 or later 
   - Connects to {+mdb-server+} v8.0 or later

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``sample_restaurants.restaurants`` 
and ``sample_mflix.movies`` collections from the :atlas:`Atlas sample datasets
</sample-data>`. To learn how to create a free MongoDB Atlas cluster
and load the sample datasets, see the :ref:`<pymongo-get-started>` tutorial.

Define the Write Operations
---------------------------

For each write operation you want to perform, create an instance of one of
the following operation classes:

- ``InsertOne``
- ``UpdateOne``
- ``UpdateMany``
- ``ReplaceOne``
- ``DeleteOne``
- ``DeleteMany``

Then, pass a list of these instances to the ``bulk_write()`` method.

.. important::

   Ensure that you import the write operation classes into your application
   file, as shown in the following code:

   .. code-block:: python

      from pymongo import InsertOne, UpdateOne, UpdateMany, ReplaceOne, DeleteOne, DeleteMany

The following sections show how to create instances of the preceding classes,
which you can use to perform collection and client bulk operations.

Insert Operations
~~~~~~~~~~~~~~~~~

To perform an insert operation, create an instance of ``InsertOne`` and specify
the document you want to insert. Pass the following keyword arguments to the 
``InsertOne`` constructor:

- ``namespace``: The namespace in which to insert the document. This argument
  is optional if you perform the bulk operation on a single collection.
- ``document``: The document to insert.

The following example creates an instance of ``InsertOne``:

.. literalinclude:: /includes/write/bulk-write.py
   :start-after: start-bulk-insert-one
   :end-before: end-bulk-insert-one
   :language: python
   :copyable:

You can also create an instance of ``InsertOne`` by passing an instance of a custom class
to the constructor. This provides additional type safety if you're using a type-checking
tool. The instance you pass must inherit from the ``TypedDict`` class.

.. note:: TypedDict in Python 3.7 and Earlier

   .. include:: /includes/type-hints/typeddict-availability.rst

The following example constructs an ``InsertOne`` instance by using a custom
class for added type safety:

.. literalinclude:: /includes/write/bulk-write.py
   :start-after: start-bulk-insert-one-typed
   :end-before: end-bulk-insert-one-typed
   :language: python
   :copyable:

To insert multiple documents, create an instance of ``InsertOne`` for each document.

.. include:: /includes/write/unique-id-note.rst

Update Operations
~~~~~~~~~~~~~~~~~

To update a document, create an instance of ``UpdateOne`` and pass in
the following arguments:

- ``namespace``: The namespace in which to perform the update. This argument is optional if
  you perform the bulk operation on a single collection.
- ``filter``: The **query filter** that specifies the criteria used to match documents in
  your collection.
- ``update``: The update you want to perform. For more information about update
  operations, see the :manual:`Field Update Operators
  </reference/operator/update-field/>` guide in the {+mdb-server+} manual.

``UpdateOne`` updates *the first* document that matches your query filter.

The following example creates an instance of ``UpdateOne``:

.. literalinclude:: /includes/write/bulk-write.py
   :start-after: start-bulk-update-one
   :end-before: end-bulk-update-one
   :language: python
   :copyable:

To update multiple documents, create an instance of ``UpdateMany`` and pass in
the same arguments. ``UpdateMany`` updates *all* documents that match your query
filter.

The following example creates an instance of ``UpdateMany``:

.. literalinclude:: /includes/write/bulk-write.py
   :start-after: start-bulk-update-many
   :end-before: end-bulk-update-many
   :language: python
   :copyable:

Replace Operations
~~~~~~~~~~~~~~~~~~

A replace operation removes all fields and values of a specified document and
replaces them with new ones. To perform a replace operation, create an instance
of ``ReplaceOne`` and pass in the following arguments:

- ``namespace``: The namespace in which to perform the replace operation. This
  argument is optional if you perform the bulk operation on a single collection.
- ``filter``: The **query filter** that specifies the criteria used to match the
  document to replace.
- ``replacement``: The document that includes the new fields and values you want
  to store in the matching document.

The following example creates an instance of ``ReplaceOne``:

.. literalinclude:: /includes/write/bulk-write.py
   :start-after: start-bulk-replace-one
   :end-before: end-bulk-replace-one
   :language: python
   :copyable:

You can also create an instance of ``ReplaceOne`` by passing an instance of a custom class
to the constructor. This provides additional type safety if you're using a type-checking
tool. The instance you pass must inherit from the ``TypedDict`` class.

.. note:: TypedDict in Python 3.7 and Earlier

   .. include:: /includes/type-hints/typeddict-availability.rst

The following example constructs a ``ReplaceOne`` instance by using a custom
class for added type safety:

.. literalinclude:: /includes/write/bulk-write.py
   :start-after: start-bulk-replace-one-typed
   :end-before: end-bulk-replace-one-typed
   :language: python
   :copyable:

To replace multiple documents, you must create an instance of ``ReplaceOne`` for each document.

.. include:: /includes/type-hints/tip-type-checkers.rst

Delete Operations
~~~~~~~~~~~~~~~~~

To delete a document, create an instance of ``DeleteOne`` and pass in
the following arguments:

- ``namespace``: The namespace in which to delete the document. This argument is
  optional if you perform the bulk operation on a single collection.
- ``filter``: The **query filter** that specifies the criteria used to match the
  document to delete.

``DeleteOne`` removes only *the first* document that matches your query filter.

The following example creates an instance of ``DeleteOne``:

.. literalinclude:: /includes/write/bulk-write.py
   :start-after: start-bulk-delete-one
   :end-before: end-bulk-delete-one
   :language: python
   :copyable:

To delete multiple documents, create an instance of ``DeleteMany`` and pass in a
namespace and query filter specifying the document you want to delete. ``DeleteMany`` removes
*all* documents that match your query filter.

The following example creates an instance of ``DeleteMany``:

.. literalinclude:: /includes/write/bulk-write.py
   :start-after: start-bulk-delete-many
   :end-before: end-bulk-delete-many
   :language: python
   :copyable:

.. _pymongo-bulk-write-call:

Call the bulk_write() Method
----------------------------

After you define a class instance for each operation you want to perform,
pass a list of these instances to the ``bulk_write()`` method. Call the
``bulk_write()`` method on a ``Collection`` instance to write to a single
collection or a ``MongoClient`` instance to write to multiple namespaces.

If any of the write operations called on a ``Collection`` fail, {+driver-short+} raises a
``BulkWriteError`` and does not perform any further operations.
``BulkWriteError`` provides a ``details`` attribute that includes the operation
that failed, and details about the exception.

If any of the write operations called on a ``MongoClient`` fail, {+driver-short+} raises a
``ClientBulkWriteException`` and does not perform any further operations.
``ClientBulkWriteException`` provides an ``error`` attribute that includes
information about the exception.

.. note::

   When {+driver-short+} runs a bulk operation, it uses the ``write_concern`` of the
   collection or client on which the operation is running. You can also set
   a write concern for the operation when using the ``MongoClient.bulk_write()``
   method. The driver reports all write concern errors after attempting all operations,
   regardless of execution order. 

   To learn more about write concerns, see :manual:`Write Concern </reference/write-concern/>`
   in the {+mdb-server+} manual.

.. _pymongo-bulk-write-collection-ex:

Collection Bulk Write Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example performs multiple write operations on the 
``restaurants`` collection by using the ``bulk_write()`` method
on a ``Collection`` instance:

.. io-code-block::
   :copyable:

   .. input:: /includes/write/bulk-write.py
      :start-after: start-bulk-write-mixed-collection
      :end-before: end-bulk-write-mixed-collection
      :language: python

   .. output::
      :visible: false
      
      BulkWriteResult({'writeErrors': [], 'writeConcernErrors': [], 'nInserted': 2,
      'nUpserted': 0, 'nMatched': 2, 'nModified': 2, 'nRemoved': 1, 'upserted': []},
      acknowledged=True)

.. _pymongo-bulk-write-client-ex:

Client Bulk Write Example
~~~~~~~~~~~~~~~~~~~~~~~~~

The following example performs multiple write operations on the 
``sample_restaurants.restaurants`` and ``sample_mflix.movies``
namespaces by using the ``bulk_write()`` method on a ``MongoClient``
instance:

.. io-code-block::
   :copyable:

   .. input:: /includes/write/bulk-write.py
      :start-after: start-bulk-write-mixed-client
      :end-before: end-bulk-write-mixed-client
      :language: python

   .. output::
      :visible: false
      
      ClientBulkWriteResult({'anySuccessful': True, 'error': None, 'writeErrors': [],
      'writeConcernErrors': [], 'nInserted': 1, 'nUpserted': 0, 'nMatched': 1,
      'nModified': 1, 'nDeleted': 344, 'insertResults': {}, 'updateResults': {},
      'deleteResults': {}}, acknowledged=True, verbose=False)

Customize Bulk Write Operations
-------------------------------

The ``bulk_write()`` method optionally accepts additional
parameters, which represent options you can use to configure the bulk write
operation.

Collection Bulk Write Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following table describes the options you can pass
to the ``Collection.bulk_write()`` method:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``ordered``
     - | If ``True``, the driver performs the write operations in the order
         provided. If an error occurs, the remaining operations are not
         attempted. 
       |
       | If ``False``, the driver performs the operations in an
         arbitrary order and attempts to perform all operations.
       | Defaults to ``True``.

   * - ``bypass_document_validation``
     - | Specifies whether the operation bypasses document-level validation. For more
         information, see :manual:`Schema
         Validation </core/schema-validation/#schema-validation>` in the MongoDB
         Server manual.
       | Defaults to ``False``.

   * - ``session``
     - | An instance of ``ClientSession``. For more information, see the `API
         documentation <{+api-root+}pymongo/client_session.html#pymongo.client_session.ClientSession>`__.

   * - ``comment``
     - | A comment to attach to the operation. For more information, see the :manual:`delete command
         fields </reference/command/delete/#command-fields>` guide in the
         {+mdb-server+} manual.

   * - ``let``
     - | A map of parameter names and values. Values must be constant or closed
         expressions that don't reference document fields. For more information,
         see the :manual:`let statement
         </reference/command/delete/#std-label-delete-let-syntax>` in the
         {+mdb-server+} manual.

The following example calls the ``bulk_write()`` method from the preceding
:ref:`pymongo-bulk-write-collection-ex` but sets the ``ordered`` option
to ``False``:

.. literalinclude:: /includes/write/bulk-write.py
   :start-after: start-bulk-write-unordered
   :end-before: end-bulk-write-unordered
   :language: python
   :copyable:

If any of the write operations in an unordered bulk write fail, {+driver-short+}
reports the errors only after attempting all operations.

.. note::

   Unordered bulk operations do not guarantee order of execution. The order can
   differ from the way you list them to optimize the runtime.

Client Bulk Write Options
~~~~~~~~~~~~~~~~~~~~~~~~~

The following table describes the options you can pass
to the ``MongoClient.bulk_write()`` method:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``session``
     - | An instance of ``ClientSession``. For more information, see the `API
         documentation <{+api-root+}pymongo/client_session.html#pymongo.client_session.ClientSession>`__.

   * - ``ordered``
     - | If ``True``, the driver performs the write operations in the order
         provided. If an error occurs, the remaining operations are not
         attempted. 
       |
       | If ``False``, the driver performs the operations in an
         arbitrary order and attempts to perform all operations.
       | Defaults to ``True``.

   * - ``verbose_results``
     - | Specifies whether the operation returns detailed results for each
         successful operation.
       | Defaults to ``False``.

   * - ``bypass_document_validation``
     - | Specifies whether the operation bypasses document-level validation. For more
         information, see :manual:`Schema
         Validation </core/schema-validation/#schema-validation>` in the MongoDB
         Server manual.
       | Defaults to ``False``.

   * - ``comment``
     - | A comment to attach to the operation. For more information, see the :manual:`delete command
         fields </reference/command/delete/#command-fields>` guide in the
         {+mdb-server+} manual.

   * - ``let``
     - | A map of parameter names and values. Values must be constant or closed
         expressions that don't reference document fields. For more information,
         see the :manual:`let statement
         </reference/command/delete/#std-label-delete-let-syntax>` in the
         {+mdb-server+} manual.
      
   * - ``write_concern``
     - | Specifies the write concern to use for the bulk operation.
         For more information, see :manual:`Write Concern </reference/write-concern/>`
         in the {+mdb-server+} manual.

The following example calls the ``bulk_write()`` method from the preceding
:ref:`pymongo-bulk-write-client-ex` but sets the ``verbose_results`` option
to ``True``:

.. io-code-block::
   :copyable:

   .. input:: /includes/write/bulk-write.py
      :start-after: start-bulk-write-verbose
      :end-before: end-bulk-write-verbose
      :language: python

   .. output::
      :visible: false
      
      ClientBulkWriteResult({'anySuccessful': True, 'error': None, 'writeErrors': [],
      'writeConcernErrors': [], 'nInserted': 1, 'nUpserted': 0, 'nMatched': 1, 'nModified': 1,
      'nDeleted': 344, 'insertResults': {0: InsertOneResult(ObjectId('...'), 
      acknowledged=True)}, 'updateResults': {1: UpdateResult({'ok': 1.0, 'idx': 1, 'n': 1,
      'nModified': 1}, acknowledged=True)}, 'deleteResults': {2: DeleteResult({'ok': 1.0,
      'idx': 2, 'n': 344}, acknowledged=True)}}, acknowledged=True, verbose=True)

Return Values
-------------

This section describes the return value of the following
bulk operation methods:

- :ref:`Collection.bulk_write() <pymongo-bulk-write-collection-return>`
- :ref:`MongoClient.bulk_write() <pymongo-bulk-write-client-return>`

.. _pymongo-bulk-write-collection-return:

Collection Bulk Write Return Value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``Collection.bulk_write()`` method returns a ``BulkWriteResult`` object. The
``BulkWriteResult`` object contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``acknowledged``
     - | Indicates if the server acknowledged the write operation.

   * - ``bulk_api_result``
     - | The raw bulk API result returned by the server.
         
   * - ``deleted_count``
     - | The number of documents deleted, if any.

   * - ``inserted_count``
     - | The number of documents inserted, if any.

   * - ``matched_count``
     - | The number of documents matched for an update, if applicable.

   * - ``modified_count``
     - | The number of documents modified, if any.

   * - ``upserted_count``
     - | The number of documents upserted, if any.

   * - ``upserted_ids``
     - | A map of the operation's index to the ``_id`` of the upserted documents, if
         applicable.

.. _pymongo-bulk-write-client-return:

Client Bulk Write Return Value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``MongoClient.bulk_write()`` method returns a ``ClientBulkWriteResult`` object. The
``ClientBulkWriteResult`` object contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``acknowledged``
     - | Indicates if the server acknowledged the write operation.

   * - ``bulk_api_result``
     - | The raw bulk API result returned by the server.

   * - ``delete_results``
     - | A map of any successful delete operations and their results.

   * - ``deleted_count``
     - | The number of documents deleted, if any.

   * - ``has_verbose_results``
     - | Indicates whether the returned results are verbose.

   * - ``insert_results``
     - | A map of any successful insert operations and their results.

   * - ``inserted_count``
     - | The number of documents inserted, if any.

   * - ``matched_count``
     - | The number of documents matched for an update, if applicable.

   * - ``modified_count``
     - | The number of documents modified, if any.

   * - ``update_results``
     - | A map of any successful update operations and their results.

   * - ``upserted_count``
     - | The number of documents upserted, if any.

Type Hints
----------  

.. include:: /includes/type-hints/intro.rst

When you use the ``bulk_write()`` method to perform an ``InsertOne`` or ``ReplaceOne``
operation, 
The following code example shows how to insert 
- ``~pymongo.collection.Collection.bulk_write()``

For ``bulk_write()``, both the ``~pymongo.operations.InsertOne()`` and
``~pymongo.operations.ReplaceOne()`` operators are generic.

The following code example shows that the results are the same as the preceding examples
when you call the ``bulk_write()`` method:

.. code-block:: python

   from typing import TypedDict
   from pymongo import MongoClient
   from pymongo.operations import InsertOne
   from pymongo.collection import Collection
   client: MongoClient = MongoClient()
   collection: Collection[Movie] = client.test.test
   inserted = collection.bulk_write([InsertOne(Movie(name="Jurassic Park", year=1993))])
   result = collection.find_one({"name": "Jurassic Park"})
   assert result is not None
   assert result["year"] == 1993

.. include:: /includes/type-hints/tip-more-info.rst

Troubleshooting
---------------

.. include:: /includes/type-hints/troubleshooting-client-type.rst

.. include:: /includes/type-hints/troubleshooting-incompatible-type.rst

Additional Information
----------------------

To learn how to perform individual write operations, see the following guides:

- :ref:`pymongo-write-insert`
- :ref:`pymongo-write-update`
- :ref:`pymongo-write-replace`
- :ref:`pymongo-write-delete`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `Collection.bulk_write() <{+api-root+}pymongo/collection.html#pymongo.collection.Collection.bulk_write>`__
- `MongoClient.bulk_write() <{+api-root+}pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.bulk_write>`__
- `InsertOne <{+api-root+}pymongo/operations.html#pymongo.operations.InsertOne>`__
- `UpdateOne <{+api-root+}pymongo/operations.html#pymongo.operations.UpdateOne>`__
- `UpdateMany <{+api-root+}pymongo/operations.html#pymongo.operations.UpdateMany>`__
- `ReplaceOne <{+api-root+}pymongo/operations.html#pymongo.operations.ReplaceOne>`__
- `DeleteOne <{+api-root+}pymongo/operations.html#pymongo.operations.DeleteOne>`__
- `DeleteMany <{+api-root+}pymongo/operations.html#pymongo.operations.DeleteMany>`__
- `BulkWriteResult <{+api-root+}pymongo/results.html#pymongo.results.BulkWriteResult>`__
- `ClientBulkWriteResult <{+api-root+}pymongo/results.html#pymongo.results.ClientBulkWriteResult>`__
- `BulkWriteError <{+api-root+}pymongo/errors.html#pymongo.errors.BulkWriteError>`__
- `ClientBulkWriteException <{+api-root+}pymongo/errors.html#pymongo.errors.ClientBulkWriteException>`__
