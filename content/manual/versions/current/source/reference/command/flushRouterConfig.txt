=================
flushRouterConfig
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: flushRouterConfig

   :dbcommand:`flushRouterConfig` marks the cached routing table for a 
   sharded cluster as stale, causing the next operation that requests
   the routing table to refresh the cache. Management of the routing
   table cache is handled automatically by the cluster.

.. note::

   Running :dbcommand:`flushRouterConfig` is no longer required after executing 
   :dbcommand:`movePrimary`, :dbcommand:`dropDatabase`, or 
   :method:`db.collection.getShardDistribution()`. These 
   commands now automatically refresh a sharded cluster's routing table as 
   needed when run.

Compatibility
-------------

This command is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-no-serverless.rst

.. include:: /includes/fact-environments-onprem-only.rst

Syntax
------

The :dbcommand:`flushRouterConfig` is available on both
:binary:`~bin.mongos` and :binary:`~bin.mongod` instances, and has the
following syntax:  

- Flush the cache for a specified collection when passed in a
  collection namespace parameter:

  .. code-block:: javascript

     db.adminCommand(
        { 
          flushRouterConfig: "<db.collection>" 
        } 
     )

- Flush the cache for a specified database and all of its collections
  when passed in a database namespace parameter:

  .. code-block:: javascript

     db.adminCommand(
        { 
          flushRouterConfig: "<db>" 
        } 
     ) 

- Flush the cache for all databases and their collections when run
  without a parameter or passed in a non-string scalar value
  (e.g. ``1``):

  .. code-block:: javascript

     db.adminCommand("flushRouterConfig")
     db.adminCommand( 
        { 
          flushRouterConfig: 1 
        } 
     )
