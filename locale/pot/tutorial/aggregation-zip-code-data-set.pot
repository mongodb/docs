# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:3
# 8ebb617a2d7c486bb35ddc7f014d658f
msgid "Aggregation with the Zip Code Data Set"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:7
# 270cd44082474ffa8260e46e8a617e71
msgid "The examples in this document use the ``zipcodes`` collection. This collection is available at: `media.mongodb.org/zips.json <http://media.mongodb.org/zips.json>`_. Use :program:`mongoimport` to load this data set into your :program:`mongod` instance."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:13
# d6eba983891440e2adbaa4ba096ca957
msgid "Data Model"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:15
# bccf5aa00f9c4853af4d7485fee95155
msgid "Each document in the ``zipcodes`` collection has the following form:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:30
# 0d57ea533e004f0caf430cf1aaa0eb84
msgid "The ``_id`` field holds the zip code as a string."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:32
# 754f2f025f434c5780574af56c3f7c55
msgid "The ``city`` field holds the city name. A city can have more than one zip code associated with it as different sections of the city can each have a different zip code."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:36
# 5336516213b042318af44252cf0163a9
msgid "The ``state`` field holds the two letter state abbreviation."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:38
# be73e492cf324353b905c6cf8f8e5110
msgid "The ``pop`` field holds the population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:40
# 58509a97b47a4ca7b1feffebc666f5db
msgid "The ``loc`` field holds the location as a latitude longitude pair."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:43
# cfc30ac55eac425bb6f00f38c4349704
msgid "``aggregate()`` Method"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:45
# bfad8c150d3c40d990e1ea02fda6bddc
msgid "All of the following examples use the :method:`aggregate() <db.collection.aggregate()>` helper in the :program:`mongo` shell."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:48
# e22ee41e24f34fbc8f70aef68aa53754
msgid "The :method:`aggregate() <db.collection.aggregate()>` method uses the :ref:`aggregation pipeline <aggregation-pipeline>` to processes documents into aggregated results. An :ref:`aggregation pipeline <aggregation-pipeline>` consists of :ref:`stages <aggregation-pipeline-operator-reference>` with each stage processing the documents as they pass along the pipeline. Documents pass through the stages in sequence."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:56
# 1d5a2fa984d24f0bab4cd4a000bb2771
msgid "The :method:`aggregate() <db.collection.aggregate()>` method in the :program:`mongo` shell provides a wrapper around the :dbcommand:`aggregate` database command. See the documentation for your :doc:`driver </applications/drivers>` for a more idiomatic interface for data aggregation operations."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:65
# 062c52719cb44691b3309c60b36fed7e
msgid "Return States with Populations above 10 Million"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:67
# 8d47c1b5ab394293bf5c9812a3b303c0
msgid "The following aggregation operation returns all states with total population greater than 10 million:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:77
# 0b2496e133e04a7e8c3028538d76f22d
msgid "In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` consists of the :pipeline:`$group` stage followed by the :pipeline:`$match` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:81
# 6fd029aaa33d42a082c37242c4d39456
msgid "The :pipeline:`$group` stage groups the documents of the ``zipcode`` collection by the ``state`` field, calculates the ``totalPop`` field for each state, and outputs a document for each unique state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:85
# d3081290f92c4fe0a31a87de49fe5111
msgid "The new per-state documents have two fields: the ``_id`` field and the ``totalPop`` field. The ``_id`` field contains the value of the ``state``; i.e. the group by field. The ``totalPop`` field is a calculated field that contains the total population of each state. To calculate the value, :pipeline:`$group` uses the :group:`$sum` operator to add the population field (``pop``) for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:92
# 1f4e913d27d04e29bd2b661335745ad8
msgid "After the :pipeline:`$group` stage, the documents in the pipeline resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:102
# b79239b09e1f4a00b89c56a3a7068530
msgid "The :pipeline:`$match` stage filters these grouped documents to output only those documents whose ``totalPop`` value is greater than or equal to 10 million. The :pipeline:`$match` stage does not alter the matching documents but outputs the matching documents unmodified."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:107
# b1206294421e409580f053957e2c20af
msgid "The equivalent :term:`SQL` for this aggregation operation is:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:116
# fee157383791485babc1d81493ccea72
msgid ":pipeline:`$group`, :pipeline:`$match`, :group:`$sum`"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:119
# 6a5587cafb6d416a8e0acb9592e7dcab
msgid "Return Average City Population by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:121
# c4e7623ca3da49ec80f25058cbc7bf82
msgid "The following aggregation operation returns the average populations for cities in each state:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:131
# 116ef404cfe6405e9da80a7b75195991
msgid "In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` consists of the :pipeline:`$group` stage followed by another :pipeline:`$group` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:135
# aa9db3bb344b40eb9ec0128ff95191c8
msgid "The first :pipeline:`$group` stage groups the documents by the combination of ``city`` and ``state``, uses the :group:`$sum` expression to calculate the population for each combination, and outputs a document for each ``city`` and ``state`` combination. [#multiple-zips-per-city]_"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:141
# 96f3b6ff21704eb480cd65629406eb7a
msgid "After this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:154
# f99a6092330f48c6a90bfdc07a868df4
msgid "A second :pipeline:`$group` stage groups the documents in the pipeline by the ``_id.state`` field (i.e. the ``state`` field inside the ``_id`` document), uses the :group:`$avg` expression to calculate the average city population (``avgCityPop``) for each state, and outputs a document for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:160
# c599c55abe0e4a4b8b465e66ac6aa34f
msgid "The documents that result from this aggregation operation resembles the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:170
# 3a237f32392748a8aa257543530feeb7
msgid ":pipeline:`$group`, :group:`$sum`, :group:`$avg`"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:173
# a46bbc940d88406381f61963135f7c6c
msgid "Return Largest and Smallest Cities by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:175
# 5b19bfc4a5ad41db857153b8450e7fec
msgid "The following aggregation operation returns the smallest and largest cities by population for each state:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:210
# 8f74fad528ae4c60b95f995173d57c7f
msgid "In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` consists of a :pipeline:`$group` stage, a :program:`$sort` stage, another :pipeline:`$group` stage, and a :program:`$project` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:214
# e3b5c1455e914ddd92ebc7f128baee97
msgid "The first :pipeline:`$group` stage groups the documents by the combination of the ``city`` and ``state``, calculates the :group:`sum <$sum>` of the ``pop`` values for each combination, and outputs a document for each ``city`` and ``state`` combination."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:219
# e8f55a8e9bff4423b91ca15fbea18d2d
msgid "At this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:231
# e878d402f4084a10a21a47451c27bdcc
msgid "The :pipeline:`$sort` stage orders the documents in the pipeline by the ``pop`` field value, from smallest to largest; i.e. by increasing order. This operation does not alter the documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:235
# eaa19ee8a39848979f52376e53e63057
msgid "The next :pipeline:`$group` stage groups the now-sorted documents by the ``_id.state`` field (i.e. the ``state`` field inside the ``_id`` document) and outputs a document for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:239
# 20e0769874b641da8f4a6374009736a4
msgid "The stage also calculates the following four fields for each state. Using the :group:`$last` expression, the :pipeline:`$group` operator creates the ``biggestCity`` and ``biggestPop`` fields that store the city with the largest population and that population. Using the :group:`$first` expression, the :pipeline:`$group` operator creates the ``smallestCity`` and ``smallestPop`` fields that store the city with the smallest population and that population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:247
# 1357ac0a39ae4ba0bffc666602746f38
msgid "The documents, at this stage in the pipeline, resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:259
# 6223f0989bbe47eea6d3af1592b887c5
msgid "The final :pipeline:`$project` stage renames the ``_id`` field to ``state`` and moves the ``biggestCity``, ``biggestPop``, ``smallestCity``, and ``smallestPop`` into ``biggestCity`` and ``smallestCity`` embedded documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:264
# 597bec737fe346c9aeeefe2b6700bb80
msgid "The output documents of this aggregation operation resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:280
# 8c8f13dabc9e447abfd84c933b21bd73
msgid "A city can have more than one zip code associated with it as different sections of the city can each have a different zip code."
msgstr ""

