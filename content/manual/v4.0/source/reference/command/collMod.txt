=======
collMod
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: collMod

   :dbcommand:`collMod` makes it possible to add options to a collection
   or to modify view definitions. The command
   takes the following prototype form:

   .. code-block:: javascript

      db.runCommand( { collMod: <collection or view>, <option1>: <value1>, <option2>: <value2> ... } )

   For the ``<collection or view>``, specify the name of a collection
   or view in the current database.

   Use the :data:`~collStats.userFlags` field in the
   :method:`db.collection.stats()` output to check the options enabled
   for a collection.

.. Commenting out the following after DOCS-717, it does take
   a lock but its to cover a very small metadata change.

   This command obtains a write lock on the affected database
   and will block other operations until it has completed.

Options
-------

TTL Collections
~~~~~~~~~~~~~~~

.. index:: expireAfterSeconds
.. collflag:: index

   The :collflag:`index` option changes the expiration time of a
   :doc:`TTL Collection </tutorial/expire-data>`.

   Specify the key or index name, and new expiration time with a document of the form:

   .. code-block:: javascript

      {keyPattern: <index_spec> || name: <index_name>, expireAfterSeconds: <seconds> }

   In this example, ``<index_spec>`` is an existing index in the
   collection. In cases of multiple indexes with the same key pattern, 
   the user is required to specify the index by name. ``seconds`` is the number 
   of seconds to subtract from the current time.

   On success :dbcommand:`collMod` returns a document with fields
   ``expireAfterSeconds_old`` and ``expireAfterSeconds_new`` set to
   their respective values.

   On failure, :dbcommand:`collMod` returns a document with ``no
   expireAfterSeconds field to update`` if there is no existing
   ``expireAfterSeconds`` field or ``cannot find index { **key**:
   1.0 } for ns **namespace**`` if the specified ``keyPattern``
   does not exist.

Record Allocation
~~~~~~~~~~~~~~~~~

.. collflag:: noPadding

   .. versionadded:: 3.0

   :collflag:`noPadding` is available for the MMAPv1 storage
   engine only.

   :collflag:`noPadding` disables record padding for the collection.
   Without padding, the record allocation size corresponds to the
   document size, and any updates that results in document growth will
   require a new allocation.

   .. warning::

      Only set :collflag:`noPadding` to ``true`` for collections whose
      workloads have *no* update operations that cause documents to grow,
      such as for collections with workloads that are insert-only. For
      more information, see :ref:`exact-fit-allocation`.

.. index:: document; space allocation
.. index:: usePowerOf2Sizes
.. _usePowerOf2Sizes:
.. collflag:: usePowerOf2Sizes

   .. deprecated:: 3.0

   :collflag:`usePowerOf2Sizes` is available for the MMAPv1 storage
   engine only.

   :collflag:`usePowerOf2Sizes` has no effect on the allocation
   strategy. MongoDB 3.0 uses the :ref:`power of 2 allocation
   <power-of-2-allocation>` as the default record allocation strategy
   for MMAPv1.

   To disable the :ref:`power of 2 allocation <power-of-2-allocation>`
   for a collection, use the :dbcommand:`collMod` command with the
   :collflag:`noPadding` option or the :method:`db.createCollection()`
   method with the ``noPadding`` option. For more information, see
   :ref:`3.0-mmapv1-padding`.

Document Validation
~~~~~~~~~~~~~~~~~~~

.. collflag:: validator

   .. versionadded:: 3.2

   :collflag:`validator` allows users to specify :doc:`validation rules
   or expressions </core/schema-validation>` for a collection.
   For more information, see :doc:`/core/schema-validation`.

   The ``validator`` option takes a document that specifies the
   validation rules or expressions. You can specify the expressions
   using the same operators as the :ref:`query operators
   <query-selectors>` with the exception of : :query:`$geoNear`,
   :query:`$near`, :query:`$nearSphere`, :query:`$text`, and
   :query:`$where`.

   .. note::

      - Validation occurs during updates and inserts. Existing
        documents do not undergo validation checks until modification.

      - You cannot specify a validator for collections in the ``admin``,
        ``local``, and ``config`` databases.

      - You cannot specify a validator for ``system.*`` collections.

.. collflag:: validationLevel

   .. versionadded:: 3.2

   The :collflag:`validationLevel` determines how strictly MongoDB applies the
   validation rules to existing documents during an update.

   .. include:: /includes/extracts/table-validationLevel-values.rst

.. collflag:: validationAction

   .. versionadded:: 3.2

   The :collflag:`validationAction` option determines whether to ``error`` on
   invalid documents or just ``warn`` about the violations but allow
   invalid documents.

   .. important::

      Validation of documents only applies to those documents as
      determined by the ``validationLevel``.

   .. include:: /includes/extracts/table-validationAction-values.rst

To view the validation specifications for a collection, use the
:method:`db.getCollectionInfos()` method.

Views
~~~~~

.. collflag:: viewOn

   The underlying source collection or view for the :doc:`view
   </core/views>`. The view definition is determined by applying the
   specified :collflag:`pipeline` to this source.

   Required if modifying a view on a MongoDB deployment that is running
   with access control.

.. collflag:: pipeline

   The :ref:`aggregation pipeline <aggregation-pipeline>` that defines
   the :doc:`view </core/views>`.

   Required if modifying a view on a MongoDB deployment that is running
   with access control.

   .. include:: /includes/extracts/views-public-definition.rst

Write Concern
~~~~~~~~~~~~~

Optional. A document expressing the :doc:`write concern
</reference/write-concern>` of the :dbcommand:`drop` command.

Omit to use the default write concern.

Access Control
--------------

If the deployment enforces authentication/authorization, you must have
the following privilege to run the :dbcommand:`collMod` command:

.. list-table::
   :header-rows: 1

   * -

     - Required Privileges

   * - Modify a non-capped collection

     - :authaction:`collMod` in the database

   * - Modify a view

     - :authaction:`collMod` in the database and either:

       - no :authaction:`find` on the view to modify, **or**

       - both :authaction:`find` on the view to modify and
         :authaction:`find` on the source collection/view.

The built-in role :authrole:`dbAdmin` provides the required privileges.

Examples
--------

Change Expiration Value for Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To update the expiration value for a collection
named ``sessions`` indexed on a ``lastAccess`` field from 30
minutes to 60 minutes, use the following operation:

.. code-block:: javascript

   db.runCommand( { collMod: "sessions",
                    index: { keyPattern: { lastAccess: 1 },
                             expireAfterSeconds: 3600
                           }
   })

Which will return the document:

.. code-block:: javascript

   { "expireAfterSeconds_old" : 1800, "expireAfterSeconds_new" : 3600, "ok" : 1 }

Add Document Validation to an Existing Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example adds a validator to an existing collection named
``contacts``.

.. note::

   MongoDB 3.6 adds the :query:`$jsonSchema` operator to support JSON
   Schema validation.

.. code-block:: javascript

   db.runCommand( { collMod: "contacts",
      validator: { $jsonSchema: {
         bsonType: "object",
         required: [ "phone" ],
         properties: {
            phone: {
               bsonType: "string",
               description: "must be a string and is required"
            },
            email: {
               bsonType : "string",
               pattern : "@mongodb\.com$",
               description: "must be a string and match the regular expression pattern"
            },
            status: {
               enum: [ "Unknown", "Incomplete" ],
               description: "can only be one of the enum values"
            }
         }
      } },
      validationLevel: "moderate",
      validationAction: "warn"
   } )

With the ``moderate`` :collflag:`validationLevel`, MongoDB applies
validation rules to insert operations and to update operationss to
existing documents that already fulfill the validation criteria.
Updates to existing documents that do not fulfill the validation
criteria are not checked for validity.
 
With the ``warn`` :collflag:`validationAction`, MongoDB logs any
violations but allows the insertion or update to proceed.

For example, the following insert operation violates the validation rule.

.. code-block:: javascript

   db.contacts.insert( { name: "Amanda", status: "Updated" } )

However, since the ``validationAction`` is ``warn`` only, MongoDB only
logs the validation violation message and allows the operation to
proceed:

.. code-block:: sh

   2017-12-01T12:31:23.738-0500 W STORAGE  [conn1] Document would fail validation collection: example.contacts doc: { _id: ObjectId('5a2191ebacbbfc2bdc4dcffc'), name: "Amanda", status: "Updated" }

For more information, see :doc:`/core/schema-validation`.
