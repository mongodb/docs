.. _java-rs-read:

======================
Read Data From MongoDB
======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :description: Learn how to use the Java Reactive Streams driver to read data from MongoDB.
   :keywords: usage examples, see, crud, access, code example

.. toctree::
    :titlesonly:
    :maxdepth: 1   

    Query </read/specify-a-query>
    Retrieve Data </read/retrieve-data>
    Specify Fields to Return </read/specify-fields-return>
    Specify Documents to Return </read/specify-documents-to-return>
    Count Documents </read/count-documents>
    Distinct Field Values </read/distinct>
    Data Cursors </read/cursors>
    Read Preference </read/read-preference>
    Text Search </read/text-search>
    Geospatial Search </read/geo>
    Monitor Data Changes </read/change-streams>
    
Overview
--------

This page contains copyable code examples of {+driver-short+} methods that you can use to
read data from MongoDB.

.. tip::

  To learn more about any of the methods shown on this page, see the link
  provided in each section.

To use an example from this page, copy the code example into the
:ref:`sample application <java-rs-read-sample>` or your own application.
Be sure to replace all placeholders in the code examples, such as ``<connection string>``, with
the relevant values for your MongoDB deployment.

Project Reactor Implementation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This guide uses the {+pr+} library to consume ``Publisher`` instances returned
by the {+driver-short+} methods. To learn more about the {+pr+} library
and how to use it, see `Getting Started <https://projectreactor.io/docs/core/release/reference/#getting-started>`__
in the Reactor documentation. 

There are also other ways to consume ``Publisher`` instances. You can use one of many alternative libraries such as
`RxJava <https://github.com/ReactiveX/RxJava>`__ or call ``Publisher.subscribe()`` directly and pass your own
implementation of a ``Subscriber``.

The examples in this guide use the ``Flux.blockLast()`` method from Reactor to subscribe to a ``Publisher`` and block the current
thread until the ``Publisher`` reaches its terminal state. To learn more about the Reactive Streams initiative, see `Reactive Streams <https://www.reactive-streams.org/>`__.

.. important:: Publishers Returned are Cold

   All ``Publisher`` instances returned by the {+driver-short+} methods are cold,
   which means that the corresponding operation does not happen unless you
   subscribe to the returned ``Publisher``. We recommend only subscribing to 
   the returned ``Publisher`` once, because subscribing more than once can lead
   to errors. 
   
.. _java-rs-read-sample:

Sample Application
~~~~~~~~~~~~~~~~~~

.. include:: /includes/usage-examples/sample-read-app-intro.rst

.. literalinclude:: /includes/usage-examples/sample-read-application.java
   :language: java
   :copyable:
   :linenos:
   :emphasize-lines: 45-47

Find One
--------

The following example retrieves a document that matches the criteria specified by the
given filter:

.. literalinclude:: /includes/usage-examples/read-code-examples.java
   :start-after: start-find-one
   :end-before: end-find-one
   :language: java
   :copyable:

To learn more about the ``find().first()`` construct, see the :ref:`Retrieve Data <java-rs-retrieve>` guide.

Find Multiple
-------------

The following example retrieves all documents that match the criteria specified by the
given filter:

.. literalinclude:: /includes/usage-examples/read-code-examples.java
   :start-after: start-find-multiple
   :end-before: end-find-multiple
   :language: java
   :copyable:

To learn more about the ``find()`` method, see the :ref:`Retrieve Data <java-rs-retrieve>` guide.

Count Documents in a Collection
-------------------------------

The following example returns the number of documents in the specified collection:

.. literalinclude:: /includes/usage-examples/read-code-examples.java
   :start-after: start-count-collection
   :end-before: end-count-collection
   :language: java
   :copyable:

To learn more about the ``countDocuments()`` method, see the :ref:`Count Documents <java-rs-count>` guide.

Count Documents Returned from a Query
-------------------------------------

The following example returns the number of documents in the specified
collection that match the criteria specified by
the given filter:

.. literalinclude:: /includes/usage-examples/read-code-examples.java
   :start-after: start-count-documents
   :end-before: end-count-documents
   :language: java
   :copyable:

To learn more about the ``countDocuments()`` method, see the :ref:`Count Documents <java-rs-count>` guide.

Estimated Document Count
------------------------

The following example returns an approximate number of documents in the specified
collection based on collection metadata:

.. literalinclude:: /includes/usage-examples/read-code-examples.java
   :start-after: start-estimate-count
   :end-before: end-estimate-count
   :language: java
   :copyable:

To learn more about the ``estimatedDocumentCount()`` method, see the :ref:`Count Documents <java-rs-count>` guide.

Retrieve Distinct Values
------------------------

The following example returns all distinct values of the specified field name in a given
collection:

.. literalinclude:: /includes/usage-examples/read-code-examples.java
   :start-after: start-retrieve-distinct
   :end-before: end-retrieve-distinct
   :language: java
   :copyable:

To learn more about the ``distinct()`` method, see the :ref:`<java-rs-distinct>` guide.

Monitor Data Changes
--------------------

The following example creates a change stream for a given collection and prints out
subsequent change events in that collection:

.. literalinclude:: /includes/usage-examples/read-code-examples.java
   :start-after: start-monitor-changes
   :end-before: end-monitor-changes
   :language: java
   :copyable:

To learn more about the ``watch()`` method, see the :ref:`Monitor Data Changes <java-rs-change-streams>` guide.
