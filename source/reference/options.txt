=======
Options
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Use the following options to view and control various aspects of your
|mdb-shell|.

General Options
---------------

.. program:: mongosh

.. option:: --build-info

   Returns a JSON-formatted document with information about
   your :binary:`~bin.mongosh` build and driver dependencies.

   **Example: View Build Information**

   .. include:: /includes/examples/ex-build-info-flag.rst

.. option:: --eval <javascript>

   Evaluates a JavaScript expression. You can use a single ``--eval``
   argument or multiple ``--eval`` arguments together.

   After ``mongosh`` evaluates the ``--eval`` argument, it prints the
   results to your command line. If you use multiple ``--eval``
   statements, ``mongosh`` only prints the results of the last
   ``--eval``.

   You can use the ``--json`` flag with ``--eval`` to return
   ``mongosh`` results in :manual:`Extended JSON 
   </reference/mongodb-extended-json/>` format. ``mongosh``
   supports both ``--json=canonical`` and ``--json=relaxed`` modes. If
   you omit the mode, ``mongosh`` defaults to the ``canonical``
   mode. The ``--json`` flag is mutually exclusive with ``--shell``.

   **Example: Format Output**

   .. include:: /includes/examples/ex-eval-output.rst

   **Example: Multiple --eval Arguments**

   .. include:: /includes/examples/ex-eval-multi.rst

   **Example: --json Option**

   .. include:: /includes/examples/ex-eval-json.rst

.. option:: --file, -f <javascript>

   Runs a script from the command line without entering the
   |mdb-shell| console.

   For additional details and an example, see
   :ref:`mdb-shell-write-scripts-command-line`.

.. option:: --help, -h

   Returns information on the options and use of the |mdb-shell|.

.. option:: --nodb

   Prevents the shell from connecting to any database instances.

.. option:: --norc

   Prevents the shell from sourcing and evaluating ``~/.mongoshrc.js``
   on startup.

.. option:: --quiet

   Skips all messages during startup (such as welcome messages and startup
   warnings) and goes directly to the prompt.

.. option:: --shell

   Enables the shell interface. If you invoke the :program:`mongosh`
   command and specify a JavaScript file as an argument, or use
   :option:`--eval <--eval>` to specify JavaScript on the command line,
   the :option:`--shell <--shell>` option provides the user with a shell
   prompt after the file finishes executing. The ``--shell`` flag is
   mutually exclusive with ``--json``.  

.. option:: --verbose

   Increases the verbosity of the shell output during the connection
   process and when running commands.

.. option:: --version

   Returns the |mdb-shell| release number.

.. _mongosh-stable-api-options:

Stable API Options
------------------

.. option:: --apiVersion <version number>

   Specifies the :ref:`apiVersion <api-version-desc>`. ``"1"`` is 
   currently the only supported value.

.. option:: --apiStrict

   Specifies that the server will respond with :ref:`APIStrictError 
   <api-strict-resp>` if your application uses a command or behavior 
   outside of the :ref:`Stable API <stable-api>`.
   
   If you specify :option:`--apiStrict`, you must also specify
   :option:`--apiVersion`.

.. option:: --apiDeprecationErrors

   Specifies that the server will respond with :ref:`APIDeprecationError
   <api-deprecation-resp>` if your application uses a command or behavior 
   that is deprecated in the specified ``apiVersion``.

   If you specify :option:`--apiDeprecationErrors`, you must also 
   specify :option:`--apiVersion`.

.. _mongosh-connection-options:

Connection Options
------------------

.. option:: --host <hostname>

   Specifies the name of the host machine where the
   :binary:`~bin.mongod` or :binary:`~bin.mongos` is running. If this is
   not specified, the |mdb-shell| attempts to connect to a MongoDB
   process running on the localhost.

   To connect to a replica set,
     Specify the :setting:`replica set name <~replication.replSetName>`
     and a seed list of set members. Use the following form:

     .. code-block:: none

        <replSetName>/<hostname1><:port>,<hostname2><:port>,<...>

   For TLS/SSL connections (:option:`--tls <--tls>`),
     The |mdb-shell| verifies that the hostname
     (specified in the :option:`--host <--host>` option or the
     connection string) matches the ``SAN`` (or, if ``SAN`` is not
     present, the ``CN``) in the certificate presented by the
     :binary:`~bin.mongod` or :binary:`~bin.mongos`. If ``SAN`` is
     present, the |mdb-shell| does not match against the ``CN``. If
     the hostname does not match the ``SAN`` (or ``CN``), the
     |mdb-shell| shell fails to connect.

   .. _example-connect-mongosh-using-srv:

   For :manual:`DNS seedlist connections </reference/connection-string/#dns-seedlist-connection-format/>`, 
      Specify the connection protocol as ``mongodb+srv``, followed by
      the DNS SRV hostname record and any options. The ``authSource``
      and ``replicaSet`` options, if included in the connection string,
      overrides any corresponding DNS-configured options set in the
      TXT record. Use of the ``mongodb+srv:`` connection string
      implicitly enables |tls-ssl| (normally set with ``tls=true``) for
      the client connection. The |tls| option can be turned off by
      setting ``tls=false`` in the query string.

      .. example::

         .. code-block:: none

            mongodb+srv://server.example.com/?connectionTimeoutMS=3000

.. option:: --port <port>

   Specifies the port where the :binary:`~bin.mongod` or
   :binary:`~bin.mongos` instance is listening. If
   :option:`--port <--port>` is not
   specified, the |mdb-shell| attempts to connect to port ``27017``.

.. _mongosh-tls:
.. _mongosh-ssl:

TLS Options
~~~~~~~~~~~

.. option:: --tls

   Enables connection to a :binary:`~bin.mongod` or
   :binary:`~bin.mongos` that has |tls-ssl| support enabled.

   .. include:: /includes/fact-ssl-see-more.rst

.. option:: --tlsCertificateKeyFile <filename>

   Specifies the :file:`.pem` file that contains both the |tls-ssl|
   certificate and key for ``mongosh``. Specify the
   file name of the :file:`.pem` file using relative or absolute paths.

   This option is required when using the :option:`--tls <--tls>` option to connect to
   a :binary:`~bin.mongod` or :binary:`~bin.mongos` instance that
   requires :ref:`client certificates
   <mongo-connect-require-client-certificates-tls>`. That is, the
   |mdb-shell| presents this certificate to the server.

   .. note::

      .. include:: /includes/fact-certificate-expiry-warning.rst

   .. include:: /includes/fact-ssl-see-more.rst

.. option:: --tlsCertificateKeyFilePassword <value>

   Specifies the password to de-crypt the certificate-key file (i.e.
   :option:`--tlsCertificateKeyFile <--tlsCertificateKeyFile>`).

   Use the
   :option:`--tlsCertificateKeyFilePassword
   <--tlsCertificateKeyFilePassword>` option only if the
   certificate-key file is encrypted. In all cases, the |mdb-shell|
   redacts the password from all logging and reporting output.

   If the private key in the PEM file is encrypted and you do not
   specify the
   :option:`--tlsCertificateKeyFilePassword
   <--tlsCertificateKeyFilePassword>` option; the |mdb-shell| prompts
   for a passphrase.

   See :ref:`ssl-certificate-password`.

   .. include:: /includes/fact-ssl-see-more.rst

.. option:: --tlsCAFile <filename>

   Specifies the :file:`.pem` file that contains the root certificate
   chain from the Certificate Authority. This file is used to validate
   the certificate presented by the
   :binary:`~bin.mongod` / :binary:`~bin.mongos` instance.

   Specify the file name of the :file:`.pem` file using relative or
   absolute paths.

   .. include:: /includes/fact-ssl-see-more.rst

.. option:: --tlsCRLFile <filename>

   Specifies the :file:`.pem` file that contains the Certificate
   Revocation List. Specify the file name of the :file:`.pem` file
   using relative or absolute paths.

   .. include:: /includes/fact-ssl-see-more.rst

.. option:: --tlsAllowInvalidHostnames

   Disables the validation of the hostnames in the certificate presented
   by the :binary:`~bin.mongod` / :binary:`~bin.mongos` instance. Allows
   the |mdb-shell| to connect to MongoDB instances even if the hostname
   in the server certificates do not match the server's host.

   .. include:: /includes/fact-ssl-see-more.rst

.. option:: --tlsAllowInvalidCertificates

   .. versionadded:: 4.2

   Bypasses the validation checks for the certificates presented by the
   :binary:`~bin.mongod` / :binary:`~bin.mongos` instance and allows
   connections to servers that present invalid certificates.

   .. note::

      Starting in MongoDB 4.0, if you specify
      :option:`--tlsAllowInvalidCertificates
      <--tlsAllowInvalidCertificates>` when using x.509
      authentication, an invalid certificate is only sufficient to
      establish a |tls-ssl| connection but is *insufficient* for
      authentication.

   .. warning::

      Although available, avoid using the
      :option:`--tlsAllowInvalidCertificates
      <--tlsAllowInvalidCertificates>` option if possible. If the
      use of :option:`--tlsAllowInvalidCertificates
      <--tlsAllowInvalidCertificates>` is necessary, only
      use the option on systems where intrusion is not possible.

      If the |mdb-shell| shell (and other
      :ref:`mongodb-tools-support-ssl`) runs with the
      :option:`--tlsAllowInvalidCertificates
      <--tlsAllowInvalidCertificates>` option, the shell (and
      other :ref:`mongodb-tools-support-ssl`) do not attempt to validate
      the server certificates. This creates a vulnerability to expired
      :binary:`~bin.mongod` and :binary:`~bin.mongos` certificates as
      well as to foreign processes posing as valid :binary:`~bin.mongod`
      or :binary:`~bin.mongos` instances. If you only need to disable
      the validation of the hostname in the |tls-ssl| certificates, see
      :option:`--tlsAllowInvalidHostnames <--tlsAllowInvalidHostnames>`.

   .. include:: /includes/fact-ssl-see-more.rst

.. option:: --tlsCertificateSelector <parameter>=<value>

   Available on Windows and macOS as an alternative to
   :option:`--tlsCertificateKeyFile <--tlsCertificateKeyFile>`.

   .. important:: Windows and Importing Private Keys

      When you import your private key, you must mark it as exportable.
      The Windows **Certificate Import Wizard** doesn't check this
      option by default.

      .. figure:: /images/certificate-import-wizard.png
         :alt: Microsoft Certificate Import Wizard where the key marked as exportable

   The :option:`--tlsCertificateKeyFile <--tlsCertificateKeyFile>` and
   :option:`--tlsCertificateSelector <--tlsCertificateSelector>`
   options are mutually exclusive. You can only specify one.

   Specifies a certificate property in order to select a matching
   certificate from the operating system's certificate store.

   :option:`--tlsCertificateSelector <--tlsCertificateSelector>`
   accepts an argument of the format ``<property>=<value>`` where the
   property can be one of the following:

   .. list-table::
      :header-rows: 1

      * - Property
        - Value type
        - Description

      * - ``subject``
        - ASCII string
        - Subject name or common name on certificate

      * - ``thumbprint``
        - hex string

        - A sequence of bytes, expressed as hexadecimal, used to
          identify a public key by its SHA-1 digest.

          The ``thumbprint`` is sometimes referred to as a
          ``fingerprint``.

   When using the system SSL certificate store, OCSP (Online
   Certificate Status Protocol) is used to validate the revocation
   status of certificates.

   .. note::

      .. include:: /includes/fact-certificate-expiry-warning.rst

.. option:: --tlsDisabledProtocols <string>

   Disables the specified TLS protocols. The option recognizes the
   following protocols:

   - ``TLS1_0``
   - ``TLS1_1``
   - ``TLS1_2``
   - *(Starting in version 4.0.4, 3.6.9, 3.4.24)* ``TLS1_3``

   - On macOS, you cannot disable ``TLS1_1`` and leave both ``TLS1_0``
     and ``TLS1_2`` enabled. You must also disable at least one of the
     other two; for example, ``TLS1_0,TLS1_1``.

   - To list multiple protocols, specify as a comma separated list of
     protocols. For example ``TLS1_0,TLS1_1``.

   - The specified disabled protocols overrides any default disabled
     protocols.

   Starting in version 4.0, MongoDB disables the use of TLS 1.0 if TLS
   1.1+ is available on the system. To enable the
   disabled TLS 1.0, specify ``none`` to
   :option:`--tlsDisabledProtocols <--tlsDisabledProtocols>`.

.. option:: --tlsUseSystemCA

   Allows ``mongosh`` to load TLS certificates available to the
   operating system's certificate authority. Use this option if you want
   to use TLS certificates already available to your operating system
   without explicitly specifying those certificates to ``mongosh``.

.. _mongosh-authentication-options:

Authentication Options
----------------------

.. option:: --authenticationDatabase <dbname>

   Specifies the authentication database where the specified
   :option:`--username <--username>` has been created. See
   :ref:`user-authentication-database`.


   If you do not specify a value for
   :option:`--authenticationDatabase <--authenticationDatabase>`,
   the |mdb-shell| uses the database specified in the connection
   string.

.. _mongosh-authentication-mechanisms:

.. option:: --authenticationMechanism <name>

   Specifies the authentication mechanism the |mdb-shell| uses to
   authenticate to the :binary:`~bin.mongod` or :binary:`~bin.mongos`. 
   If you don't specify an ``authenticationMechanism`` but provide user
   credentials, the MongoDB Shell and drivers attempt to use
   SCRAM-SHA-256. If this fails, they fall back to SCRAM-SHA-1.

   .. list-table::
      :header-rows: 1
      :widths: 20 40

      * - Value

        - Description

      * - :ref:`SCRAM-SHA-1 <authentication-scram-sha-1>`

        - `RFC 5802 <https://tools.ietf.org/html/rfc5802>`_ standard
          Salted Challenge Response Authentication Mechanism using the
          SHA-1 hash function.

      * - :ref:`SCRAM-SHA-256 <authentication-scram-sha-256>`

        - `RFC 7677 <https://tools.ietf.org/html/rfc7677>`_ standard
          Salted Challenge Response Authentication Mechanism using the
          SHA-256 hash function.

          Requires featureCompatibilityVersion set to ``4.0``.

      * - :ref:`MONGODB-X509 <security-auth-x509>`

        - MongoDB |tls-ssl| certificate authentication.

      * - :ref:`GSSAPI <security-auth-kerberos>` (Kerberos)

        - External authentication using Kerberos. This mechanism is
          available only in `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise-advanced?jmp=docs>`_.

      * - :ref:`PLAIN <security-auth-ldap>` (LDAP SASL)

        - External authentication using LDAP. You can also use ``PLAIN``
          for authenticating in-database users. ``PLAIN`` transmits
          passwords in plain text. This mechanism is
          available in `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise-advanced?jmp=docs>`_
          and `MongoDB Atlas
          <https://www.mongodb.com/atlas/database?tck=docs_server>`_.

      * - :manual:`MONGODB-OIDC </core/security-oidc/>` (OpenID Connect) 

        - External authentication using OpenID Connect. This mechanism is
          available in `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise-advanced?jmp=docs>`_
          and `MongoDB Atlas
          <https://www.mongodb.com/atlas/database?tck=docs_server>`_.

      * - ``MONGODB-AWS`` (AWS IAM) 

        - External authentication using Amazon Web Services Identity and
          Access Management (AWS IAM) credentials. This mechanism is
          available in `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise-advanced?jmp=docs>`_
          and `MongoDB Atlas
          <https://www.mongodb.com/atlas/database?tck=docs_server>`_.

.. option:: --gssapiServiceName

   Specify the name of the service using
   :manual:`GSSAPI/Kerberos </core/kerberos>`. Only required if the service does not use the default name of ``mongodb``.

   This option is available only in MongoDB Enterprise.

.. option:: --sspiHostnameCanonicalization <string>

   Specifies whether or not to use Hostname Canonicalization.

   :option:`--sspiHostnameCanonicalization 
   <--sspiHostnameCanonicalization>` has the same effect as setting the
   ``CANONICALIZE_HOST_NAME:true|false`` key-pair in the 
   :urioption:`authMechanismProperties` portion of the 
   :ref:`connection string <mongodb-uri>`.  

   If :option:`--sspiHostnameCanonicalization 
   <--sspiHostnameCanonicalization>` is set to:

   - ``forwardAndReverse``, performs a forward DNS lookup and then a
     reverse lookup. New in ``mongosh`` 1.3.0.
   - ``forward``, the effect is the same as setting
     ``authMechanismProperties=CANONICALIZE_HOST_NAME:true``.
   - ``none``, the effect is the same as setting
     ``authMechanismProperties=CANONICALIZE_HOST_NAME:false``.

.. option:: --oidcFlows

   Specifies OpenID Connect flows in a comma-separated list. 
   The OpenID Connect flows specify how ``mongosh`` interacts with the identity 
   provider for the authentication process. ``mongosh`` supports the following 
   OpenID Connect flows:

   .. list-table::
      :header-rows: 1
      :widths: 25 75

      * - OpenID Connect Flow
        - Description

      * - ``auth-code``
        - Default. ``mongosh`` opens a browser and redirects you to the identity 
          provider log-in screen.

      * - ``device-auth``
        - ``mongosh`` provides you with a URL and code to finish authentication.
          This is considered a less secure OpenID Connect flow but can be used when 
          ``mongosh`` is run in an environment in which it cannot open a browser.

   To set ``device-auth`` as a fallback option to ``auth-code``, see the following 
   example:

   .. code-block:: bash 

      mongosh 'mongodb://localhost/' --authenticationMechanism MONGODB-OIDC --oidcFlows=auth-code,device-auth

.. option:: --oidcIdTokenAsAccessToken 
   
   Specifies whether ``mongosh`` uses the ID token received from the identity
   provider instead of the access token. Use this option with identity providers 
   that you can't configure to provide :abbr:`JWT (JSON Web Token)` access 
   tokens.

.. option:: --oidcRedirectUri

   Specifies a URI where the identity provider redirects you after authentication.
   The URI must match the configuration of the identity provider.
   The default is ``http://localhost:27097/redirect``.

.. option:: --oidcTrustedEndpoint

   Specifies a connection to a trusted endpoint that is not Atlas or localhost to
   ensure that access tokens are sent to trusted servers. Only use this option when
   connecting to servers that you trust.

.. option:: --browser

   Specifies the browser ``mongosh`` redirects you to when ``MONGODB-OIDC`` 
   is enabled.

   This option is run with the system shell. 

.. option:: --password <password>, -p <password>

   Specifies a password with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the
   :option:`--username <--username>` and
   :option:`--authenticationDatabase <--authenticationDatabase>`
   options.

   To force the |mdb-shell| to prompt for a password, enter the
   :option:`--password <--password>` option as the last option and leave out the
   argument.

.. option:: --username <username>, -u <username>

   Specifies a username with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the
   :option:`--password <--password>` and
   :option:`--authenticationDatabase <--authenticationDatabase>`
   options.

Session Options
---------------

.. option:: --retryWrites

   Enables :ref:`retryable-writes`.
   
   .. include:: /includes/legacy/legacy-retryable-writes.rst

   For more information on sessions, see :ref:`sessions`.

.. disableImplicitSessions

.. _mongosh-client-side-field-level-encryption-options:

Client-Side Field Level Encryption Options
------------------------------------------

.. option:: --awsAccessKeyId <string>

   An `AWS Access Key 
   <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html>`__
   associated with an IAM user who has ``List`` and ``Read`` permissions 
   for the AWS Key Management Service (KMS). :program:`mongosh` uses the 
   specified :option:`--awsAccessKeyId` to access the KMS. 

   :option:`--awsAccessKeyId` is required to enable 
   :ref:`manual-csfle-feature` for the :program:`mongosh` shell session. 
   :option:`--awsAccessKeyId` requires *both* of the following command 
   line options:

   - :option:`--awsSecretAccessKey` 
   - :option:`--keyVaultNamespace`

   If :option:`--awsAccessKeyId` is omitted, use the :method:`Mongo()` 
   constructor within the shell session to enable client-side field 
   level encryption.

   To mitigate the risk of leaking access keys into logs, consider 
   specifying an environmental variable to :option:`--awsAccessKeyId`. 

.. option:: --awsSecretAccessKey <string>

   An `AWS Secret Key 
   <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html>`__
   associated to the specified :option:`--awsAccessKeyId`.

   :option:`--awsSecretAccessKey` is required to enable
   :ref:`manual-csfle-feature` for the :program:`mongosh` session. 
   :option:`--awsSecretAccessKey` requires *both* of the following
   command line options:

   - :option:`--awsAccessKeyId` 
   - :option:`--keyVaultNamespace`

   If :option:`--awsSecretAccessKey` and its supporting options are
   omitted, use :method:`Mongo()` within the shell session to enable
   client-side field level encryption.

   To mitigate the risk of leaking access keys into logs, consider 
   specifying an environmental variable to 
   :option:`--awsSecretAccessKey`. 

.. option:: --awsSessionToken <string>

   An `AWS Session Token 
   <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html>`__
   associated to the specified :option:`--awsAccessKeyId`.

   :option:`--awsSessionToken` is required to enable
   :ref:`manual-csfle-feature` for the :program:`mongosh` shell session. 
   :option:`--awsSessionToken` requires *all* of the following command 
   line options:

   - :option:`--awsAccessKeyId` 
   - :option:`--awsSecretAccessKey`
   - :option:`--keyVaultNamespace`

   If :option:`--awsSessionToken` and its supporting options are 
   omitted, use :method:`Mongo()` within the shell session to enable 
   client-side field level encryption.

   To mitigate the risk of leaking access keys into logs, consider 
   specifying an environmental variable to :option:`--awsSessionToken`. 

.. option:: --keyVaultNamespace <string>

   The full namespace (``<database>.<collection>``) of the collection 
   used as a key vault for :ref:`manual-csfle-feature`. 
   :option:`--keyVaultNamespace` is required for enabling client-side 
   field level encryption for the :program:`mongosh` shell session. 
   :program:`mongosh` creates the specified namespace if it does not
   exist.

   :option:`--keyVaultNamespace` requires *both* of the following 
   command line options:

   - :option:`--awsAccessKeyId` 
   - :option:`--awsSecretAccessKey`

   If :option:`--keyVaultNamespace` and its supporting options are 
   omitted, use the :method:`Mongo()` constructor within the shell 
   session to enable client-side field level encryption.
