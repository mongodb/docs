.. _kotlin-usage-bulkwrite:

=======================
Perform Bulk Operations
=======================

The ``bulkWrite()`` method performs batch write operations against a
*single* collection. This method reduces the number of network round trips from
your application to your MongoDB instance which increases the performance of your
application. Since you only receive the success status after 
all the operations return, we recommend you use this if that meets the 
requirements of your use case.

You can specify one or more of the following write operations in
``bulkWrite()``:

- ``insertOne``
- ``updateOne``
- ``updateMany``
- ``deleteOne``
- ``deleteMany``
- ``replaceOne``

The ``bulkWrite()`` method accepts the following parameters:

- A ``List`` of objects that implement ``WriteModel``: the classes that
  implement ``WriteModel`` correspond to the aforementioned write
  operations. For example, the ``InsertOneModel`` class wraps the ``insertOne`` 
  write operation. See the links to the API documentation at the bottom of this 
  page for more information on each class.
  
- ``BulkWriteOptions``: *optional* object that specifies settings such as
  whether to ensure your MongoDB instance orders your write operations.

.. note::

   Retryable writes run in bulk write operations unless they include one or 
   more instances of ``UpdateManyModel`` or ``DeleteManyModel``.

.. tip::

  By default, MongoDB executes bulk write operations one-by-one in the
  specified order (i.e. serially). During an ordered bulk write, if
  an error occurs during the processing of an operation, MongoDB returns
  without processing the remaining operations in the list. In contrast,
  when you set ``ordered`` to ``false``, MongoDB continues to process remaining
  write operations in the list in the event of an error. Unordered operations
  are theoretically faster since MongoDB can execute them in parallel, but
  you should only use them if your writes do not depend on order.

The ``bulkWrite()`` method returns a ``BulkWriteResult`` object that
contains information about the write operation results including the number
of documents inserted, modified, and deleted.

If one or more of your operations attempts to set a value that violates a
unique index on your collection, an exception is raised that should look
something like this: 

.. code-block:: sh
   :copyable: false

   The bulk write operation failed due to an error: Bulk write operation error on server <hostname>. Write errors: [BulkWriteError{index=0, code=11000, message='E11000 duplicate key error collection: ... }].

Similarly, if you attempt to perform a bulk write against a collection
that uses schema validation and one or more of your write operations
provide an unexpected format, you may encounter exceptions.

Example
-------

The following code sample performs an ordered bulk write operation on the
``movies`` collection in the ``sample_mflix`` database. The example call
to ``bulkWrite()`` includes examples of the ``InsertOneModel``,
``UpdateOneModel``, and ``DeleteOneModel``. 

.. include:: /includes/connect-guide-note.rst

.. io-code-block::

   .. input:: /examples/generated/BulkWrite.snippet.bulk-write-usage-example.kt
      :language: kotlin

   .. output:: 
      :language:  console
      :visible: false

      Result statistics:
      inserted: 3
      updated: 2
      deleted: 1

For additional information on the classes and methods mentioned on this
page, see the following resources:

- :manual:`Unique Index </core/index-unique>` Server Manual Entry
- :manual:`Schema Validation </core/schema-validation>` Server Manual Entry
- `bulkWrite() <{+driver-api+}/-mongo-collection/bulk-write.html>`__ API Documentation
- `BulkWriteOptions <{+core-api+}/client/model/BulkWriteOptions.html>`__ API Documentation
- `BulkWriteResult <{+core-api+}/bulk/BulkWriteResult.html>`__ API Documentation
- `InsertOneModel <{+core-api+}/client/model/InsertOneModel.html>`__ API Documentation
- `UpdateOneModel <{+core-api+}/client/model/UpdateOneModel.html>`__ API Documentation
- `UpdateManyModel <{+core-api+}/client/model/UpdateManyModel.html>`__ API Documentation
- `DeleteOneModel <{+core-api+}/client/model/DeleteOneModel.html>`__ API Documentation
- `DeleteManyModel <{+core-api+}/client/model/DeleteManyModel.html>`__ API Documentation
- `ReplaceOneModel <{+core-api+}/client/model/ReplaceOneModel.html>`__ API Documentation

