.. include:: /includes/templates/tabs.rst

.. _write-op-insert:

================
Insert Documents
================

.. default-domain:: mongodb

.. meta::
   :description: Insert documents using MongoDB. Creates collection upon first insert.
   :keywords: insert documents, create documents, insert into collection, create collection, MongoDB 3.4, version 3.4 

This page provides examples of insert operations in MongoDB.

.. admonition:: Creating a Collection
   :class: note

   If the collection does not currently exist, insert operations will
   create the collection.

.. _write-op-insertOne:

Insert a Single Document
------------------------

.. versionadded:: 3.2

.. tabs::

   tabs:
     - id: shell
       content: |
         :method:`db.collection.insertOne()` inserts a *single*
         :ref:`document<bson-document-format>` into a collection.
         
         The following example inserts a new document into the
         ``inventory`` collection. Since the document does not specify
         an ``_id`` field, MongoDB adds the ``_id`` field with an
         ObjectId value to the new document. See
         :ref:`write-op-insert-behavior`.

     - id: python
       content: |
         :py:meth:`pymongo.collection.Collection.insert_one` inserts a
         *single* :ref:`document<bson-document-format>` into a
         collection.
         
         The following example inserts a new document into the
         ``inventory`` collection. Since the document does not specify
         an ``_id`` field, the PyMongo driver adds the ``_id`` field
         with an ObjectId value to the new document. See
         :ref:`write-op-insert-behavior`.

.. include:: /includes/driver-example-insert-1.rst

.. tabs::

   tabs:
     - id: shell
       content: |
         :method:`~db.collection.insertOne()` returns a document that
         includes the newly inserted document's ``_id`` field value. For
         an example of a return document, see
         :ref:`db.collection.insertOne() reference<insertOne-examples>`.

     - id: python
       content: |
         :py:meth:`~pymongo.collection.Collection.insert_one` returns an
         instance of :py:class:`pymongo.results.InsertOneResult` whose
         ``inserted_id`` field contains the ``_id`` of the newly
         inserted document.

To retrieve the document that you just inserted, :ref:`query the collection
<document-query-filter>`:

.. include:: /includes/driver-example-insert-2.rst

.. _write-op-insertMany:

Insert Multiple Documents
-------------------------

.. versionadded:: 3.2

.. tabs::

   tabs:
     - id: shell
       content: |
         :method:`db.collection.insertMany()` can insert *multiple*
         :ref:`documents <bson-document-format>` into a collection. Pass an
         array of documents to the method.
         
         The following example inserts three new documents into the
         ``inventory`` collection. Since the documents do not specify an
         ``_id`` field, MongoDB adds the ``_id`` field with an ObjectId
         value to each document. See :ref:`write-op-insert-behavior`.

     - id: python
       content: |
         :py:meth:`pymongo.collection.Collection.insert_many` can insert
         *multiple* :ref:`documents <bson-document-format>` into a
         collection. Pass an iterable of documents to the method.
         
         The following example inserts three new documents into the
         ``inventory`` collection. Since the documents do not specify an
         ``_id`` field, the PyMongo driver adds the ``_id`` field with
         an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

.. include:: /includes/driver-example-insert-3.rst

.. tabs::

   tabs:
     - id: shell
       content: |
         :method:`~db.collection.insertMany()` returns a document that includes
         the newly inserted documents ``_id`` field values. See the
         :ref:`reference <insertMany-examples>` for an example.

     - id: python
       content: |
         :py:meth:`~pymongo.collection.Collection.insert_many` returns
         an instance of :py:class:`pymongo.results.InsertManyResult`
         whose ``inserted_ids`` field is a list containing the ``_id``
         of each newly inserted document.

To retrieve the inserted documents, :ref:`query the collection
<read-operations-query-document>`:

.. include:: /includes/driver-example-query-7.rst

.. _write-op-insert-behavior:

Insert Behavior
---------------

Collection Creation
~~~~~~~~~~~~~~~~~~~

If the collection does not currently exist, insert operations will
create the collection.

``_id`` Field
~~~~~~~~~~~~~

.. include:: /includes/fact-id-field.rst

Atomicity
~~~~~~~~~

All write operations in MongoDB are atomic on the level of a single
document. For more information on MongoDB and atomicity, see
:doc:`/core/write-operations-atomicity`

Write Acknowledgement
~~~~~~~~~~~~~~~~~~~~~

With write concerns, you can specify the level of acknowledgement
requested from MongoDB for write operations. For details, see
:doc:`/reference/write-concern`.

.. tabs::

   tabs:
     - id: shell
       content: |
         .. seealso::

            - :method:`db.collection.insertOne()`

            - :method:`db.collection.insertMany()`

            - :ref:`additional-inserts`

     - id: python
       content: |
         .. seealso::

            - :py:meth:`pymongo.collection.Collection.insert_one`

            - :py:meth:`pymongo.collection.Collection.insert_many`

            - :ref:`additional-inserts`

.. class:: hidden

   .. toctree::
      :titlesonly: 

      /reference/insert-methods
