.. meta::
   :keywords: Queryable Encryption, in-use encryption, security, contention, redaction, topology support, supported operations

.. _qe-reference-encryption-limits:

===============================================================================
{+qe+} Limitations
===============================================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------
Consider these limitations and restrictions before enabling {+qe+}. Some
operations are unsupported, and others behave differently.

For compatibility limitations, please read :ref:`<qe-csfle-compatibility>`.

MongoDB Support Limitations
---------------------------

.. include:: /includes/queryable-encryption/qe-supportability.rst

For details, see the :ref:`Redaction <qe-redaction>` section of this page.

Contention Factor
-----------------

Contention factor is a setting that helps tune performance based on the
number of concurrent operations. When unset, contention uses a default value of
``8``, which provides high performance for most workloads.

You can set the contention factor only when specifying a field for encryption.
Once you specify a field for encryption, the contention factor is immutable.

For more information, see :ref:`Configuring contention factor <qe-contention>`.

Manual Metadata Collection Compaction
-------------------------------------

Manually run :ref:`metadata collection compaction <qe-metadata-compaction>`
when your metadata collections exceed 1 GB. Compaction decreases the
size of the metadata collections associated with encrypted fields, and
improves performance.

encryptedFieldsMap Modification
-------------------------------

Do not modify the {+efm+} passed to your ``MongoClient``. Doing so can
result in unexpected and incorrect behavior when querying.

..
  {+qe+} encrypts the set of fields in the  :ref:`encryptedFieldsMap <qe-fundamentals-encrypt-query>`
  configuration that you pass to your ``MongoClient`` constructor. If you
  specify a formerly plaintext field in your {+efm+} configuration that
  exists in the collection documents, you can only query on that field for
  documents inserted after you updated your {+efm+} configuration.

  For example, consider a database in which you have inserted documents
  with a plaintext ``streetAddress`` field. Adding this field to {+efm+}
  and performing subsequent inserts will insert the encrypted value of
  ``streetAddress`` into the database. The driver will send future queries
  for a specific ``streetAddress`` as :bsontype:`BinData<data_binary>`. As
  a result, the plaintext values in the original documents will never match
  future queries.


Read and Write Operation Support
--------------------------------

The :binary:`~bin.mongod` only stores encrypted :bsontype:`BinData
<data_binary>` and applies any aggregation expression or query operator
specifying an encrypted field against the ``BinData`` value. While the
expression or operator may support ``BinData`` fields, the resulting
value may be incorrect or unexpected when compared to issuing that same
expression or operator against the decrypted value. The ``mongod``
throws an error if the expression or operator does not support
``BinData`` values.

.. _qe-redaction:

Redaction
---------

To improve security, {+qe+} redacts fields from some diagnostic commands on encrypted collections, and omits certain operations
from the query log. An encrypted collection is any collection with the
``encryptedFields`` option.

Query Log and Database Profiler Redaction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The CRUD operations below are omitted from the :ref:`slow operations
<log-message-slow-ops>` query log and the :ref:`Database Profiler
<profiler>` ``system.profile`` collection when you run them on an encrypted collection.

* :dbcommand:`aggregate`
* :dbcommand:`count`
* :dbcommand:`delete`
* :dbcommand:`find`
* :dbcommand:`findAndModify`
* :dbcommand:`insert`
* :dbcommand:`update`
* :method:`db.collection.bulkWrite()`
* The ``compactStructuredEncryptionData`` command
* The ``cleanupStructuredEncryptionData`` command

Command and Aggregation Stage Output Redaction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :dbcommand:`collStats` command and :pipeline:`$collStats`
aggregation stage:

* Omit ``"queryExecStats"``
* Omit ``"latencyStats"``
* Redact ``"WiredTiger"``, if present, to include only the ``url`` field.

The :dbcommand:`currentOp` command and :pipeline:`$currentOp` aggregation stage:

* Omit all fields after ``"command"``.
* Redact ``"command"`` to include only the first element, ``$comment``,
  and ``$db``.

The :dbcommand:`top` command only returns the collection name of
encrypted collections.

The :pipeline:`$planCacheStats` aggregation stage omits
operations against encrypted collections, even though the operations are cached as normal.


Topology Support
----------------

- Replica sets and sharded clusters are supported
- Standalone deployments are not supported
- Secondary reads are not supported

Sharding
--------

- Metadata collections must not be sharded
- Shard keys must not be encrypted fields

CRUD
----

- {+qe+} does not support multi-document update operations.
  :method:`db.collection.updateMany()` is not supported.
- {+qe+} does not support multi-statement update or delete operations.
  :method:`db.collection.bulkWrite()` with more than one update or
  delete operation is not supported.

- {+qe+} limits :method:`db.collection.findAndModify()` arguments.

  - ``fields`` is not allowed
  - ``new`` must be false

- When performing an upsert operation, any encrypted fields in the
  filter are excluded from the insert.


Collections
-----------

- You cannot use {+csfle+} with {+qe+} on the same
  collection.

  - {+qe+} does not support migration from collections encrypted with
    {+csfle+}. You must decrypt your documents and insert them
    one-by-one.
  - {+qe+} does not support automatic migration from an unencrypted
    collection. You must insert the documents one-by-one.

- {+qe+} supports new collections only. You cannot add or remove {+qe+}
  to existing collections.
- You cannot rename a collection with encrypted fields.
- You cannot specify ``jsonSchema`` to :method:`db.createCollection()`
  when creating a {+qe+} collection if the ``jsonSchema`` contains the
  ``encrypt`` keyword. 

  - You can specify both ``encryptedFields`` and ``jsonSchema`` to
    :method:`db.createCollection()` as long as your :ref:`jsonSchema <schema-validation-overview>`
    does not contain validation for encrypted fields.

- {+qe+} does not support :ref:`views-landing-page`,
  :ref:`manual-timeseries-collection`, or :ref:`capped collection <manual-capped-collection>`.
- {+qe+} does not support :ref:`index-feature-ttl` or :ref:`index-type-unique`.
- You cannot disable ``jsonSchema`` validation.
- When a collection uses the ``encryptedFields`` option:
  
  - You cannot set ``validationLevel`` to ``none``.
  - You cannot set ``validationAction`` to ``warn``.

Drop Collection
~~~~~~~~~~~~~~~

- Dropping collections from a ``MongoClient`` that is not configured for {+qe+}
  doesn't drop the associated metadata collections. ``mongod`` logs a
  warning if you drop a collection with encrypted fields before dropping
  the metadata collections.

.. tip::

   When dropping a collection with a ``MongoClient`` configured for
   {+qe+}, compatible drivers drop the associated metadata
   collections as well.


Create Collection
~~~~~~~~~~~~~~~~~

Always explicitly create any collections that use {+qe+}. Implicit collection creation doesn't create the necessary indexes and
metadata collections, resulting in poor query performance.

Query Types
-----------

The query type you specify for a field when creating the collection in
{+efm+} is immutable. You cannot add new query types to an existing field,
and you cannot change the existing query type.

Encrypted Field Names
---------------------

Encrypted field names are immutable. For example, if you specify ``ssn``
as a field to encrypt, you cannot :update:`$rename` the field name to
``taxPayerID``.


Views
-----
Applications cannot rely on the automatic encryption
validation to prevent unsupported queries against views on
collections with encrypted fields.

Queries against :ref:`views <views-landing-page>` on collections
containing values encrypted with {+qe+} may return
unexpected or incorrect results if either the underlying view
aggregation pipeline *or* the query references encrypted fields. If
creating a view on a collection containing values encrypted with {+qe+},
avoid operating on encrypted fields to mitigate the
risk of unexpected or incorrect results.

For more information on views, see :ref:`views <views-landing-page>`.

Collation
---------

{+qe+} ignores user-specified collations or collection default collations.
Encryption obscures the field value and prevents normal collation
behavior. Collation-sensitive queries against encrypted fields may
return unexpected or incorrect results.

For more information on collations, see :ref:`collation-document-fields`.

{+qe+}-compatible drivers have a list of :ref:`supported operations for automatic encryption
<qe-reference-automatic-encryption-supported-operations>`. For unsupported read and write operations, the underlying support library
cannot introspect the collection catalog to identify the default
collation. Applications therefore cannot rely on the {+qe+}
validation to prevent querying on encrypted fields with
collation defaults.

Unique Indexes
--------------

:ref:`Unique indexes <index-type-unique>` can't guarantee
uniqueness if the index key specifies any encrypted fields.

{+qe+} always outputs a different encrypted value, even for the same input. The server considers each encrypted value unique, even though the
decrypted value may not be. This means that even if a collection uses an
index-enforced unique constraint on fields, the collection can still
contain multiple documents with duplicate plaintext values for that 
field.

{+qe+} compatible drivers configured for automatic encryption
:ref:`support some operations for automatic encryption
<qe-reference-automatic-encryption-supported-operations>`.
For unsupported read and write operations, the underlying
library can't introspect the index catalog to identify a given field as
unique. Applications can't rely on automatic encryption validation to
prevent unique constraint violations on randomly-encrypted fields.

The _id Field
-------------

You cannot configure {+qe+} to encrypt the ``_id`` field because it relies on
the value auto-generated by MongoDB.

Read/Write Query Support
------------------------

Automatic encryption supports a subset of commands, query operators,
update operators, aggregation stages, and aggregation expressions. For
the list of supported operations, see :ref:`Supported Operations for Automatic Encryption <qe-reference-automatic-encryption-supported-operations>`.
