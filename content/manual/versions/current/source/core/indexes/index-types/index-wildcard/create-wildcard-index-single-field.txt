.. _create-wildcard-index-single-field:
.. _wildcard-index-single:

=========================================
Create a Wildcard Index on a Single Field
=========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Wildcard indexes on a single field support queries on any subfield of
the indexed field. Use wildcard indexes to support queries on field
names that you don't know in advance or vary between documents.

To create a wildcard index on a single field, use the
:method:`db.collection.createIndex()` method and include the wildcard
specifier (``$**``) in the index key:

.. code-block:: javascript

   db.collection.createIndex( { "<field>.$**": <sortOrder> } )

About this Task
---------------

.. include:: /includes/indexes/wildcard-use-case-warning.rst

Before You Begin
----------------

Create a ``products`` collection that contains the following documents:

.. code-block:: javascript

   db.products.insertMany( [
      {
         "product_name" : "Spy Coat",
         "attributes" : {
            "material" : [ "Tweed", "Wool", "Leather" ],
            "size" : {
               "length" : 72,
               "units" : "inches"
            }
         }
      },
      {
         "product_name" : "Spy Pen",
         "attributes" : {
            "colors" : [ "Blue", "Black" ],
            "secret_feature" : {
               "name" : "laser",
               "power" : "1000",
               "units" : "watts",
            }
         }
      }
   ] )

Procedure
---------

The following operation creates a wildcard index on the ``attributes``
field:

.. code-block:: javascript

   db.products.createIndex( { "attributes.$**" : 1 } )

Results
-------

The wildcard index supports single-field queries on ``attributes`` or
its embedded fields. For example, the index supports the following
queries:

- Query:

  .. code-block:: javascript
 
     db.products.find( { "attributes.size.length" : { $gt : 60 } } )

  Output:

  .. code-block:: javascript
     :copyable: false

     [
       {
         _id: ObjectId("63472196b1fac2ee2e957ef6"),
         product_name: 'Spy Coat',
         attributes: {
           material: [ 'Tweed', 'Wool', 'Leather' ],
           size: { length: 72, units: 'inches' }
         }
       }
     ]

- Query:

  .. code-block:: javascript     

     db.products.find( { "attributes.material" : "Leather" } )

  Output:

  .. code-block:: javascript
     :copyable: false

     [
       {
         _id: ObjectId("63472196b1fac2ee2e957ef6"),
         product_name: 'Spy Coat',
         attributes: {
           material: [ 'Tweed', 'Wool', 'Leather' ],
           size: { length: 72, units: 'inches' }
         }
       }
     ]

- Query:

  .. code-block:: javascript
   
     db.products.find(
        { "attributes.secret_feature.name" : "laser" },
        { "_id": 0, "product_name": 1, "attributes.colors": 1 }
     )

  Output:

  .. code-block:: javascript
     :copyable: false

     [
       {
         product_name: 'Spy Pen',
         attributes: { colors: [ 'Blue', 'Black' ] }
       }
     ]
   
Wildcard indexes have specific behavior when the indexed field contains
an embedded object (for example, ``attributes.secret_feature``). For
more information, see :ref:`wildcard-index-embedded-object-behavior`.

Learn More
----------

To learn more about behaviors and use cases for wildcard indexes, see:

- :ref:`create-wildcard-index-all-fields`

- :ref:`create-wildcard-index-multiple-fields`

- :ref:`wildcard-index-compound`

- :ref:`wildcard-index-restrictions`
