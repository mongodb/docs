ref: cluster-option-clusterProviderRegionOnly
content: |

  To deploy a cross-region cluster, toggle 
  :guilabel:`Configure clusters across multiple regions (M10 and up)`
  to :guilabel:`Yes`.
       
  .. admonition:: AWS Only
     :class: note
      
     If this is the first ``M10+`` dedicated paid cluster for the selected
     region or regions *and* you plan on creating one or more :abbr:`VPC
     peering connections`, please review the documentation on :doc:`VPC
     Peering Connections </security-vpc-peering>` before continuing.

  The following options are available when configuring cross-region 
  clusters:

  :guilabel:`Deploy across multiple regions`
     Click :guilabel:`Add a node` to add a new row for region selection 
     and select the region from the dropdown. Specify the desired 
     number of :guilabel:`Nodes` for the region.

     The first row lists the :guilabel:`Preferred Region`. |service|
     prioritizes nodes in the preferred region for primary elegibility.

     .. admonition:: Backup Data Center Location
        :class: note

        If this is the first cluster in the project *and* you 
        intend to enable 
        :ref:`continuous snapshot backups <create-cluster-backups>`,
        |service| selects the backup data center location for the 
        project based on the geographical location of the 
        cluster's :guilabel:`Preferred Region`. See 
        :doc:`Backup a Cluster </backup-cluster>` for more information.

     When selecting a :guilabel:`Region`, regions marked as 
     :guilabel:`Recommended` provide higher availability compared to 
     other regions. For more information, see: 

     - :ref:`AWS Recommended Regions <amazon-aws-availability-zones>`.          
     - :ref:`GCP Recommended Regions <google-gcp-availability-zones>`.          
     - :ref:`Azure Recommended Regions <microsoft-azure-availability-zones>`.
     
     Each node in the selected regions can participate in 
     :term:`elections <election>`, and can become the :term:`primary` 
     as long as the majority of nodes in the replica set are available. 
     The total number of electable nodes across all regions, excluding 
     read-only regions, must be 3, 5, or 7.
     
     You can also use this option to increase the replication factor of
     single-region clusters by modifying the number of :guilabel:`Nodes` for
     your :guilabel:`Preferred Region` only. You do not have to add additional
     regions to modify the replication factor of your :guilabel:`Preferred
     Region`.
     
     To remove a region, click the :guilabel:`X` next to that region. 
     You cannot remove the :guilabel:`Preferred Region`.  
     
     |service| provides checks for whether your selected cross-regional
     configuration provides availability during partial or whole regional
     outages.

  :guilabel:`Deploy read-only replicas`
     Click :guilabel:`Add a node` to deploy read-only nodes to the
     selected region.
     
     Each node in the region cannot participate in :term:`elections
     <election>`, and cannot become the :term:`primary`. Read-only regions do
     not provide high availability.
     
     To remove a read-only region, click the :guilabel:`X` next to that region.

  .. note::
    
     Having a large number of regions or having nodes spread across
     long distances may lead to long election times or replication lag.
  
  .. important::
  
     .. include:: /includes/fact-cross-region-limits.rst
  
---
ref: cluster-option-clusterProviderRegion
content: |

  The cloud provider and region, or physical location, of your MongoDB
  cluster. The choice of cloud provider and region affects the configuration
  options for the available instance sizes, network latency for clients
  accessing your cluster, and the :doc:`cost of running the cluster
  </billing>`.
  
  .. include:: /includes/extracts/cluster-option-clusterProviderRegionOnly.rst

---
ref: cluster-option-clusterInstance
content: |

  Select your preferred cluster instance size. The selected instance
  size dictates the  memory, storage, and IOPS specification for each
  data-bearing server [#data-bearing]_ in the cluster.
  
  |service| categorizes the instance sizes into tiers as follows:

  :guilabel:`Shared Clusters`
    Sandbox replica set clusters for getting started with MongoDB. 
    These instances deploy to a shared environment with access to a
    subset of |service| features and functionality. For complete 
    documentation on shared cluster limits and restrictions, 
    see :ref:`atlas-free-tier`.
    
    |service| provides an option to deploy 
    one ``M0`` Free Tier replica set per project. You can 
    :doc:`upgrade </scale-cluster>` an ``M0`` Free Tier cluster to an 
    ``M2+`` paid cluster at any time.

    ``M2`` and ``M5`` instances are low-cost shared starter clusters
    with the same features as and functionality as ``M0``, but with
    increased storage and the ability to deploy into a subset of regions
    on  Amazon Web Service (AWS), Google Cloud Platform (GCP), and
    Microsoft Azure.

    .. admonition:: Beta
       :class: alert-info

       Support for ``M2`` and ``M5`` clusters is available as a Beta 
       feature. These clusters do not yet support backups.

    |service| supports shared cluster deployment in a subset of
    Cloud Providers and Regions. |service| greys out any
    shared cluster instance sizes not supported by the selected
    cloud service provider and region. For a complete list of
    regions that support shared cluster deployments, see:

    - :ref:`Amazon Web Services (AWS) <amazon-aws>`
    - :ref:`Google Cloud Platform (GCP) <google-gcp>`
    - :ref:`Microsoft Azure <microsoft-azure>`

  :guilabel:`Dedicated Development Clusters`
    Instances that support development environments and low-traffic
    applications.

    These instances support replica set deployments only, but otherwise
    provide full access to |service| features and functionality.

  :guilabel:`Dedicated Production Clusters`
    Instances that support production environments with high traffic
    applications and large datasets. 

    These instances support replica set and sharded cluster
    deployments with full access to |service| features and functionality.

    Some instances have variants, denoted by the |angle| character. 
    When you select these instances, |service| lists the variants 
    and tags each instance to distinguish their key characteristics.

    .. |angle| unicode:: U+276F

  .. include:: /includes/fact-free-tier-paid-tier.rst

---
ref: cluster-option-customizeStorage
content: |

  Each cluster tier comes with a default set of resources. 
  Select your preferred storage customizations under the
  :guilabel:`Customize Your Storage` heading.

  |service| can provide the following storage configuration options,
  depending on the selected cloud provider and instance size.

  - :guilabel:`Storage Capacity`
    The size of the server root volume. To change this, either:

    - Move the slide bar until the text box displays your preferred
      disk size, *or*

    - Specify the exact disk size in the text box.

    Changes to storage capacity affects :ref:`cost <instance-size-costs>`.

  - :guilabel:`Storage Speed` 
    The input/output operations per second (IOPS) the system can 
    perform. Changes to storage speed affect
    :ref:`cost <instance-size-costs>`.

  .. include:: /includes/fact-auto-expand-storage.rst

  .. _configuration-storage-considerations:

  .. important::

     |service| enforces a 50:1 ratio of disk storage to RAM to
     facilitate consistent performance of clusters with large
     datasets. For example, to support 1 TB of disk storage you must
     select a cluster tier with at least 32 GB of RAM (M50 or higher).

     |service| has a 4 TB disk storage limit on all replica sets and
     shards, regardless of cluster tier. To expand total cluster
     storage beyond 4 TB, enable :ref:`sharding
     <cluster-option-sharding>`.

     For clusters with :guilabel:`Auto-Expand Storage` enabled,
     |service| respects the calculated maximum storage for the
     selected cluster tier. Users whose disk storage reaches the
     allowable limit receive notification by email.

  For more information on the default resources and available configuration
  options for each cloud service provider, see:

  - :ref:`AWS Configuration Options <amazon-aws-configuration-options>`
  - :ref:`GCP Configuration Options <google-gcp-configuration-options>`
  - :ref:`Azure Configuration Options
    <microsoft-azure-configuration-options>`.

  .. seealso:: :ref:`connection-limits`

---
ref: cluster-option-clusterSharding
content: |
  .. _cluster-option-sharding:

  To deploy your cluster as a :term:`sharded cluster <sharded cluster>`,
  toggle :guilabel:`Shard your cluster (M30 and up)` to ``Yes``.

  :term:`Sharded clusters <sharded cluster>` support horizontal scaling and
  consist of :manual:`shards </core/sharded-cluster-shards>`, 
  :ref:`config servers <sharding-config-server>` and
  :term:`mongos <mongos>` routers:

  .. include:: /includes/list-sharded-cluster-components.rst

  For details on how the number of server instances affect cost, see
  :ref:`server-number-costs`.

  For more information on sharded clusters, see :manual:`Sharding </sharding>`
  in the MongoDB manual.

---
ref: cluster-option-clusterShardingNum
content: |

  This field is visible only if the deployment is a sharded cluster.
  
  You can set the number of shards to deploy with the sharded cluster. 
  You can have no fewer than 2 shards and no more than 24 shards.

---
ref: cluster-option-clusterBackup
content: |

  .. include:: /includes/extracts/backup-selection-continuous.rst

  To enable backups for the |service| cluster, toggle 
  :guilabel:`Turn on Backup (M10 and up)` to ``Yes``.
  If enabled, |service| takes snapshots of your databases at 
  regular intervals and retains them according to your project's 
  :ref:`retention policy <retention-policy>`.

  The backup option chosen for the first cluster in a project
  dictates the backup option for all other subsequent clusters in the
  project. See :doc:`/backup-cluster` for more information.

  |service| provides the following backup options:

  .. list-table::
     :widths: 30 70
     :header-rows: 1

     * - Backup Option
       - Description

     * - :doc:`/backup/continuous-backups` 
       
       - |service| takes incremental snapshots of data in your cluster
         and allows you to :doc:`restore </restore-cluster>` from stored
         snapshots or from a selected point in time within the last 24
         hours. You can also 
         :doc:`query a continuous backup snapshot </query-backup>`. 

         Each project has *one* backup data center location dictated by
         the *first* backup-enabled cluster created in that project. See
         :ref:`continuous-snapshot-storage-location` for more
         information.

     * - :doc:`/backup/cloud-provider-snapshots`

       - **Azure and AWS Replica Set Clusters Only**

         |service| takes full copy snapshots of data in your cluster 
         and allows you to restore from those snapshots. |service|
         stores snapshots in the same cloud provider region as the 
         replica set member targeted for snapshots.

---
ref: cluster-option-bi
content: |

   To enable the |bic| for this cluster, toggle 
   :guilabel:`Enable Business Intelligence Connector (M10 and up)` 
   to :guilabel:`Yes`.

   If enabled, select the node type from which the |bic|
   should read. For high traffic production environments, the secondary
   node may be preferable to the primary node.

   .. include:: /includes/extracts/cluster-option-bi-cluster-requirements.rst

---
ref: cluster-option-clusterSecurity
content: |

  |service| only allows client connections to the cluster from
  entries in the project :ref:`IP whitelist <whitelist>`. Clients
  must also authenticate as a 
  :ref:`MongoDB database user <mongodb-users>` associated to the 
  project.

  If you have not configured the project IP whitelist or MongoDB users,
  follow the prompts in the |service| :guilabel:`Clusters` view
  to configure basic project security.

  When creating your first MongoDB database user, select the
  :authrole:`Atlas admin` role from the user configuration
  dialog to create an administrative user. See
  :ref:`atlas-user-privileges` for more information on 
  MongoDB user privileges.

  If you need to modify your existing project security settings,
  click the :guilabel:`Security` tab from the :guilabel:`Clusters` view.
  See :doc:`/setup-cluster-security` for complete documentation on
  |service| project security settings.

---
ref: cluster-option-bi-cluster-requirements
content: |

   The |bic| is only available for M10+ clusters.
---
ref: cluster-option-encryption-at-rest
content: |
  
  .. admonition:: Configure Encryption at Rest for your |service| Project
     :class: note

     You must configure Encryption at Rest for your |service| project
     before enabling the feature for your |service| clusters. 
     |service| supports using :abbr:`AWS (Amazon Web Services)`
     Key Management Service (KMS) for |service| Encryption at Rest. 
     
     When configuring |service| Encryption at Rest, you must provide:
     
     - an :abbr:`AWS (Amazon Web Services)` Identity and Access 
       Management (IAM) access key ID, 
     - the secret access key associated with the provided 
       :abbr:`IAM (Identity and Access Management)` user,
     - the ID of an :abbr:`AWS (Amazon Web Service)` 
       Customer Master Key (CMK) to which the provided
       :abbr:`IAM (Identity and Access Management)` user has access, and 
     - the :abbr:`AWS (Amazon Web Service)` region in which the 
       :abbr:`CMK (Customer Master Key)` was created. 

     For complete documentation on configuring |service| Encryption at
     Rest with :abbr:`AWS (Amazon Web Services)` 
     :abbr:`KMS (Key Management Service)`, see :doc:`/security-aws-kms`.

  |service| Encryption at Rest adds enterprise data encryption to the
  existing |service| cluster storage volume encryption.
  When you enable Encryption at Rest for a cluster, MongoDB uses the
  :abbr:`CMK (Customer Master Key)` to encrypt the MongoDB master
  keys, which in turn encrypt the database keys. |service| never 
  stores the :abbr:`CMK (Customer Master Key)` or its ID to disk. For 
  more complete documentation on MongoDB Encryption at Rest, 
  see :manual:`Encryption at Rest 
  </core/security-encryption-at-rest/#encryption-process>`.

  To enable |service| Encryption at Rest for this cluster,
  toggle :guilabel:`Encryption At Rest with WiredTiger Encrypted Storage Engine (M10 and up)`
  to :guilabel:`Yes`.

  |service| Encryption at Rest supports ``M10`` or greater replica set
  clusters backed by :abbr:`AWS (Amazon Web Services)` or
  :abbr:`Azure (Microsoft Azure)` only. |service| Encryption
  at Rest supports encrypting :ref:`backup-cloud-provider` **only**.
  You cannot enable Encryption at Rest on a cluster using
  :ref:`backup-continuous`.

  |service| clusters using Encryption at Rest incur an increase to
  their hourly run cost. For more information on |service| billing
  for advanced security features, see :ref:`advanced-security`.

  .. important::

     Exercise extreme caution before deleting or disabling a 
     :abbr:`CMK (Customer Master Key)` used by |service|. If
     |service| cannot access the :abbr:`CMK (Customer Master Key)` 
     used to encrypt a cluster, then that cluster becomes inaccessible. 
     Exercise similar caution when modifying the permissions of the 
     |service| project's :abbr:`IAM (Identity and Access Management)` 
     user.
---
ref: cluster-option-more-configuration-options
content: |

  

  You can configure the following :binary:`~bin.mongod` runtime options
  on ``M10+`` paid tier clusters:

  .. _set-oplog-size:

  :guilabel:`Set Oplog Size` :icon:`asterisk`
    Modify the :term:`oplog` size of the cluster. For sharded 
    cluster deployments, this modifies the oplog size of each
    shard in the cluster. This option corresponds to modifying
    the :setting:`replication.oplogSizeMB <replication.oplogSizeMB>`
    configuration file option for each :binary:`~bin.mongod` in the 
    cluster.

    You can check the oplog size by connecting to your cluster
    via the :binary:`~bin.mongo` shell and authenticating as a user
    with the :authrole:`Atlas admin` role. Run the
    :method:`rs.printReplicationInfo() <rs.printReplicationInfo>` method
    to view the current oplog size and time.

    .. warning::

       Reducing the size of the oplog requires removing data from the 
       oplog. |service| cannot access or restore any oplog
       entries removed as a result of oplog reduction. Consider the
       ramifications of this data loss before reducing the oplog.

  :guilabel:`Enforce Index Key Limit`
    Enable or disable enforcement of the 1024-byte index key limit. 
    Documents can only be updated or inserted it, for all
    indexed fields on the target collection, the corresponding index
    entries do not exceed 1024 bytes. If disabled, 
    :binary:`~bin.mongod` writes documents that breach the limit
    but does *not* index them. This option corresponds to 
    modifying the
    :parameter:`failIndexKeyTooLong <param.failIndexKeyTooLong>` 
    parameter via the :dbcommand:`setParameter` command for each 
    :binary:`~bin.mongod` in the cluster.

  :guilabel:`Allow Server-Side JavaScript`
    Enable or disable execution of operations that perform server-side
    execution of JavaScript. This option corresponds to modifying
    the :setting:`security.javascriptEnabled` configuration file option
    for each :binary:`~bin.mongod` in the cluster.

  :guilabel:`Set Minimum TLS Protocol Version` :icon:`asterisk`
    Sets the minimum TLS version the cluster accepts for incoming
    connections. This option corresponds to configuring the
    :setting:`net.ssl.disabledProtocols` configuration file option
    for each :binary:`~bin.mongod` in the cluster.

    .. admonition:: TLS 1.0 Deprecation
       :class: note

       For users considering this option as a method for enabling the
       deprecated Transport Layer Security (TLS) 1.0 protocol version in
       clusters running MongoDB 3.6 or earlier, please read 
       :ref:`faq-tls-1.0-deprecation` before proceeding. |service| 
       deprecation of TLS 1.0 improves your security of data-in-transit 
       and aligns with industry best practices. Enabling TLS 1.0 for any
       |service| cluster carries security risks. Consider enabling TLS 
       1.0 only for as long as required to update your application stack
       to support TLS 1.1 or later.

  :guilabel:`Require Indexes for All Queries`
    Enable or disable the execution of queries that require a collection
    scan to return results. This option corresponds to modifying the
    :parameter:`notablescan <param.notablescan>` parameter via the
    :dbcommand:`setParameter` command for each :binary:`~bin.mongod` in 
    the cluster.

  :icon:`asterisk` |service| performs uses a rolling deployment process
  to apply modifications to these options. For sharded clusters,
  this involves a rolling restart of all shards and the config
  server replica set. To learn more about how |service| supports
  high availability during maintenance operations, see
  :ref:`high-availability`. 
...