# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 18:38+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 15d3279ff06a45648a9578486df31ff6
#: ../source/tutorial/aggregation-zip-code-data-set.txt:3
msgid "Aggregation with the Zip Code Data Set"
msgstr ""

# b0d751822d1f4b39b025c7ee1c476e7e
#: ../source/tutorial/aggregation-zip-code-data-set.txt
msgid "On this page"
msgstr ""

# c1fe3eb0f681434a85726fe4bae58517
#: ../source/tutorial/aggregation-zip-code-data-set.txt:13
msgid ""
"The examples in this document use the ``zipcodes`` collection. This "
"collection is available at: `media.mongodb.org/zips.json "
"<http://media.mongodb.org/zips.json>`_. Use :program:`mongoimport` to "
"load this data set into your :program:`mongod` instance."
msgstr ""

# 04b5d1a3ab98486f97a9504c77ae8202
#: ../source/tutorial/aggregation-zip-code-data-set.txt:19
msgid "Data Model"
msgstr ""

# b55050ca06cc4183910bd5de0fefa397
#: ../source/tutorial/aggregation-zip-code-data-set.txt:21
msgid "Each document in the ``zipcodes`` collection has the following form:"
msgstr ""

# de72a40eac084f38ba53c3f25c1a0b85
#: ../source/tutorial/aggregation-zip-code-data-set.txt:36
msgid "The ``_id`` field holds the zip code as a string."
msgstr ""

# 16e77e5e0c174bbf82517bf80da35091
#: ../source/tutorial/aggregation-zip-code-data-set.txt:38
msgid ""
"The ``city`` field holds the city name. A city can have more than one zip"
" code associated with it as different sections of the city can each have "
"a different zip code."
msgstr ""

# b76db6e53352460b9ee430b3cfa8c6a9
#: ../source/tutorial/aggregation-zip-code-data-set.txt:42
msgid "The ``state`` field holds the two letter state abbreviation."
msgstr ""

# e58c71dde30f4482bc49951726e2fb61
#: ../source/tutorial/aggregation-zip-code-data-set.txt:44
msgid "The ``pop`` field holds the population."
msgstr ""

# d98655fa37814a7182b604bb11808cfc
#: ../source/tutorial/aggregation-zip-code-data-set.txt:46
msgid "The ``loc`` field holds the location as a latitude longitude pair."
msgstr ""

# 344114d446f944e896ea58396eff38ab
#: ../source/tutorial/aggregation-zip-code-data-set.txt:49
msgid "``aggregate()`` Method"
msgstr ""

# b3bc160aee75423ebf974e674707f077
#: ../source/tutorial/aggregation-zip-code-data-set.txt:51
msgid ""
"All of the following examples use the :method:`aggregate() "
"<db.collection.aggregate()>` helper in the :program:`mongo` shell."
msgstr ""

# 427a9852714744feae9c10224f441bc7
#: ../source/tutorial/aggregation-zip-code-data-set.txt:54
msgid ""
"The :method:`aggregate() <db.collection.aggregate()>` method uses the "
":ref:`aggregation pipeline <aggregation-pipeline>` to processes documents"
" into aggregated results. An :ref:`aggregation pipeline <aggregation-"
"pipeline>` consists of :ref:`stages <aggregation-pipeline-operator-"
"reference>` with each stage processing the documents as they pass along "
"the pipeline. Documents pass through the stages in sequence."
msgstr ""

# 03582f2c135c4ffb9df0ea6984ef7306
#: ../source/tutorial/aggregation-zip-code-data-set.txt:62
msgid ""
"The :method:`aggregate() <db.collection.aggregate()>` method in the "
":program:`mongo` shell provides a wrapper around the "
":dbcommand:`aggregate` database command. See the documentation for your "
":doc:`driver </applications/drivers>` for a more idiomatic interface for "
"data aggregation operations."
msgstr ""

# 0a53853e7650438d8882341c7cfc44d0
#: ../source/tutorial/aggregation-zip-code-data-set.txt:71
msgid "Return States with Populations above 10 Million"
msgstr ""

# 398eae1c54d44174823d6b7611a911b8
#: ../source/tutorial/aggregation-zip-code-data-set.txt:73
msgid ""
"The following aggregation operation returns all states with total "
"population greater than 10 million:"
msgstr ""

# ddc9c0582e3141e9b9726d20b7579cdb
#: ../source/tutorial/aggregation-zip-code-data-set.txt:83
msgid ""
"In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` "
"consists of the :pipeline:`$group` stage followed by the "
":pipeline:`$match` stage:"
msgstr ""

# 6165ec7593744db7a6b901747fa8e381
#: ../source/tutorial/aggregation-zip-code-data-set.txt:87
msgid ""
"The :pipeline:`$group` stage groups the documents of the ``zipcode`` "
"collection by the ``state`` field, calculates the ``totalPop`` field for "
"each state, and outputs a document for each unique state."
msgstr ""

# c81314a4000f40e5959ee5bf92d9a3b6
#: ../source/tutorial/aggregation-zip-code-data-set.txt:91
msgid ""
"The new per-state documents have two fields: the ``_id`` field and the "
"``totalPop`` field. The ``_id`` field contains the value of the "
"``state``; i.e. the group by field. The ``totalPop`` field is a "
"calculated field that contains the total population of each state. To "
"calculate the value, :pipeline:`$group` uses the :group:`$sum` operator "
"to add the population field (``pop``) for each state."
msgstr ""

# e9243ac195cf4200b5f5c3d53f260956
#: ../source/tutorial/aggregation-zip-code-data-set.txt:98
msgid ""
"After the :pipeline:`$group` stage, the documents in the pipeline "
"resemble the following:"
msgstr ""

# 0379fd4b9ed4494299b4c6ab866fe604
#: ../source/tutorial/aggregation-zip-code-data-set.txt:108
msgid ""
"The :pipeline:`$match` stage filters these grouped documents to output "
"only those documents whose ``totalPop`` value is greater than or equal to"
" 10 million. The :pipeline:`$match` stage does not alter the matching "
"documents but outputs the matching documents unmodified."
msgstr ""

# caef37c32dee4e5ebe61c0d5f34dd15d
#: ../source/tutorial/aggregation-zip-code-data-set.txt:113
msgid "The equivalent :term:`SQL` for this aggregation operation is:"
msgstr ""

# 6bbabec970fd4260a6dba4f6b21fbff7
#: ../source/tutorial/aggregation-zip-code-data-set.txt:122
msgid ":pipeline:`$group`, :pipeline:`$match`, :group:`$sum`"
msgstr ""

# a5d799fef04c4841839fc368eff2f2d5
#: ../source/tutorial/aggregation-zip-code-data-set.txt:125
msgid "Return Average City Population by State"
msgstr ""

# 6e25693ac7bf4b5eabbb6c7f65754d35
#: ../source/tutorial/aggregation-zip-code-data-set.txt:127
msgid ""
"The following aggregation operation returns the average populations for "
"cities in each state:"
msgstr ""

# d0d2103d620d487db32afb749dd1da3f
#: ../source/tutorial/aggregation-zip-code-data-set.txt:137
msgid ""
"In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` "
"consists of the :pipeline:`$group` stage followed by another "
":pipeline:`$group` stage:"
msgstr ""

# 3dfae30499c14011940634691b59dbd0
#: ../source/tutorial/aggregation-zip-code-data-set.txt:141
msgid ""
"The first :pipeline:`$group` stage groups the documents by the "
"combination of ``city`` and ``state``, uses the :group:`$sum` expression "
"to calculate the population for each combination, and outputs a document "
"for each ``city`` and ``state`` combination. [#multiple-zips-per-city]_"
msgstr ""

# 2723da3583a24b5681388e5bcc41ced7
#: ../source/tutorial/aggregation-zip-code-data-set.txt:147
msgid "After this stage in the pipeline, the documents resemble the following:"
msgstr ""

# d383ad067c2c4733afdd264b2eb5ccc5
#: ../source/tutorial/aggregation-zip-code-data-set.txt:160
msgid ""
"A second :pipeline:`$group` stage groups the documents in the pipeline by"
" the ``_id.state`` field (i.e. the ``state`` field inside the ``_id`` "
"document), uses the :group:`$avg` expression to calculate the average "
"city population (``avgCityPop``) for each state, and outputs a document "
"for each state."
msgstr ""

# d94e684253624446bf5b9c43b65077b8
#: ../source/tutorial/aggregation-zip-code-data-set.txt:166
msgid ""
"The documents that result from this aggregation operation resembles the "
"following:"
msgstr ""

# f7e70d60a9c745b6ae4132b1efc9e634
#: ../source/tutorial/aggregation-zip-code-data-set.txt:176
msgid ":pipeline:`$group`, :group:`$sum`, :group:`$avg`"
msgstr ""

# 478d2241d2f14497badf2ed421605c2a
#: ../source/tutorial/aggregation-zip-code-data-set.txt:179
msgid "Return Largest and Smallest Cities by State"
msgstr ""

# 8661ce9933ab410abeb5355327435507
#: ../source/tutorial/aggregation-zip-code-data-set.txt:181
msgid ""
"The following aggregation operation returns the smallest and largest "
"cities by population for each state:"
msgstr ""

# c92919889c82476d9a777ce147a20781
#: ../source/tutorial/aggregation-zip-code-data-set.txt:216
msgid ""
"In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` "
"consists of a :pipeline:`$group` stage, a :program:`$sort` stage, another"
" :pipeline:`$group` stage, and a :program:`$project` stage:"
msgstr ""

# ce6c240981944774ad69cce26c6bf758
#: ../source/tutorial/aggregation-zip-code-data-set.txt:220
msgid ""
"The first :pipeline:`$group` stage groups the documents by the "
"combination of the ``city`` and ``state``, calculates the :group:`sum "
"<$sum>` of the ``pop`` values for each combination, and outputs a "
"document for each ``city`` and ``state`` combination."
msgstr ""

# d301e52b4c254eeead1a3bb5894cc819
#: ../source/tutorial/aggregation-zip-code-data-set.txt:225
msgid "At this stage in the pipeline, the documents resemble the following:"
msgstr ""

# 3f0476238ef5471486c4cae926591bc8
#: ../source/tutorial/aggregation-zip-code-data-set.txt:237
msgid ""
"The :pipeline:`$sort` stage orders the documents in the pipeline by the "
"``pop`` field value, from smallest to largest; i.e. by increasing order. "
"This operation does not alter the documents."
msgstr ""

# ccc4d0d31a444b0f98af70f21a046ec7
#: ../source/tutorial/aggregation-zip-code-data-set.txt:241
msgid ""
"The next :pipeline:`$group` stage groups the now-sorted documents by the "
"``_id.state`` field (i.e. the ``state`` field inside the ``_id`` "
"document) and outputs a document for each state."
msgstr ""

# 95413496ae6e4892b3eb9b928b2c5c2a
#: ../source/tutorial/aggregation-zip-code-data-set.txt:245
msgid ""
"The stage also calculates the following four fields for each state. Using"
" the :group:`$last` expression, the :pipeline:`$group` operator creates "
"the ``biggestCity`` and ``biggestPop`` fields that store the city with "
"the largest population and that population. Using the :group:`$first` "
"expression, the :pipeline:`$group` operator creates the ``smallestCity`` "
"and ``smallestPop`` fields that store the city with the smallest "
"population and that population."
msgstr ""

# adb5f81ea86c4ee48a907bf9f2496427
#: ../source/tutorial/aggregation-zip-code-data-set.txt:253
msgid "The documents, at this stage in the pipeline, resemble the following:"
msgstr ""

# 9f7cc928129644fc8283686be72870b5
#: ../source/tutorial/aggregation-zip-code-data-set.txt:265
msgid ""
"The final :pipeline:`$project` stage renames the ``_id`` field to "
"``state`` and moves the ``biggestCity``, ``biggestPop``, "
"``smallestCity``, and ``smallestPop`` into ``biggestCity`` and "
"``smallestCity`` embedded documents."
msgstr ""

# 5250ad0940494d33aa4dbd5ffc4c6131
#: ../source/tutorial/aggregation-zip-code-data-set.txt:270
msgid "The output documents of this aggregation operation resemble the following:"
msgstr ""

# 37133a07a6974b67bc8bc695670ebdd2
#: ../source/tutorial/aggregation-zip-code-data-set.txt:286
msgid ""
"A city can have more than one zip code associated with it as different "
"sections of the city can each have a different zip code."
msgstr ""

#~ msgid "The ``city`` field holds the city."
#~ msgstr ""

#~ msgid ""
#~ "the :pipeline:`$group` operator collects all"
#~ " documents and creates new documents "
#~ "for every combination of the ``city``"
#~ " and ``state`` fields in the source"
#~ " document."
#~ msgstr ""

#~ msgid ""
#~ ":pipeline:`$sort` operator orders the "
#~ "documents in the pipeline based on "
#~ "the vale of the ``pop`` field from"
#~ " largest to smallest. This operation "
#~ "does not alter the documents."
#~ msgstr ""

# a0be0d0054954447aedb6ffcf2286394
#~ msgid ""
#~ "The examples in this document use "
#~ "the ``zipcode`` collection. This collection"
#~ " is available at: `media.mongodb.org/zips.json"
#~ " <http://media.mongodb.org/zips.json>`_. Use "
#~ ":program:`mongoimport` to load this data "
#~ "set into your :program:`mongod` instance."
#~ msgstr ""

# 8a0b1ec0df19416f867a87be3c930ea5
#~ msgid "Each document in the ``zipcode`` collection has the following form:"
#~ msgstr ""

# 710810ece5ae49b5b70246bb5fc8c95c
#~ msgid ""
#~ "All of the following examples use "
#~ "the :method:`aggregate() <db.collection.aggregate()>` "
#~ "helper in the :program:`mongo` shell. "
#~ ":method:`aggregate() <db.collection.aggregate()>` provides"
#~ " a wrapper around the "
#~ ":dbcommand:`aggregate` database command. See "
#~ "the documentation for your :doc:`driver "
#~ "</applications/drivers>` for a more idiomatic"
#~ " interface for data aggregation operations."
#~ msgstr ""

# a2704525b1a84939aa3953e3c21f097f
#~ msgid ""
#~ "To return all states with a "
#~ "population greater than 10 million, use"
#~ " the following aggregation operation:"
#~ msgstr ""

# 5cdd1f260851456a9846136ab7188e34
#~ msgid ""
#~ "Aggregations operations using the "
#~ ":method:`aggregate() <db.collection.aggregate()>` helper"
#~ " process all documents in the "
#~ "``zipcodes`` collection. :method:`aggregate() "
#~ "<db.collection.aggregate()>` connects a number "
#~ "of :ref:`pipeline <aggregation-pipeline>` "
#~ "operators, which define the aggregation "
#~ "process."
#~ msgstr ""

# f03d111121f84cb2a838541a3796f074
# ab85437b112f4e84aeac57203d0a8239
#~ msgid ""
#~ "In this example, the pipeline passes "
#~ "all documents in the ``zipcodes`` "
#~ "collection through the following steps:"
#~ msgstr ""

# 0f01929d3ff24a66a20f53905505b13c
#~ msgid ""
#~ "the :pipeline:`$group` operator collects all"
#~ " documents and creates documents for "
#~ "each state."
#~ msgstr ""

# d292e8879efa4f2193b6842be1f1668e
#~ msgid ""
#~ "These new per-state documents have "
#~ "one field in addition to the "
#~ "``_id`` field: ``totalPop`` which is a"
#~ " generated field using the :group:`$sum`"
#~ " operation to calculate the total "
#~ "value of all ``pop`` fields in the"
#~ " source documents."
#~ msgstr ""

# caf611256e6c41bd861bc5c85b56754d
#~ msgid ""
#~ "After the :pipeline:`$group` operation the "
#~ "documents in the pipeline resemble the"
#~ " following:"
#~ msgstr ""

# d857ef6cebb54cc48eb82faf7e00f39e
#~ msgid ""
#~ "the :pipeline:`$match` operation filters these"
#~ " documents so that the only documents"
#~ " that remain are those where the "
#~ "value of ``totalPop`` is greater than"
#~ " or equal to 10 million."
#~ msgstr ""

# 2a714f59b249456798c25d1e6afe4684
#~ msgid ""
#~ "The :pipeline:`$match` operation does not "
#~ "alter the documents, which have the "
#~ "same format as the documents output "
#~ "by :pipeline:`$group`."
#~ msgstr ""

# e172e6b3619d43a09f8198f8a8081212
#~ msgid "The equivalent :term:`SQL` for this operation is:"
#~ msgstr ""

# decbec20e19746c78b7580a2424fd531
#~ msgid ""
#~ "To return the average populations for"
#~ " cities in each state, use the "
#~ "following aggregation operation:"
#~ msgstr ""

# b364966ef50849eb8469904e6d7e5e86
#~ msgid ""
#~ "Aggregations operations using the "
#~ ":method:`aggregate() <db.collection.aggregate()>` helper"
#~ " process all documents in the "
#~ "``zipcodes`` collection. :method:`aggregate() "
#~ "<db.collection.aggregate()>`  connects a number "
#~ "of :ref:`pipeline <aggregation-pipeline>` "
#~ "operators that define the aggregation "
#~ "process."
#~ msgstr ""

# ffc823b80152467e9ee2de252e294ffa
#~ msgid ""
#~ "the second :pipeline:`$group` operator "
#~ "collects documents by the ``state`` "
#~ "field and use the :group:`$avg` "
#~ "expression to compute a value for "
#~ "the ``avgCityPop`` field."
#~ msgstr ""

# 4b5b81ebeece4b43b96b8adfaa48a59d
#~ msgid "The final output of this aggregation operation is:"
#~ msgstr ""

# f7d287c2f0ed4537a855a129fb8ccde5
#~ msgid ""
#~ "To return the smallest and largest "
#~ "cities by population for each state, "
#~ "use the following aggregation operation:"
#~ msgstr ""

# 547a8cafb266439eaf068ebf372e92d6
#~ msgid ""
#~ "Aggregation operations using the "
#~ ":method:`aggregate() <db.collection.aggregate()>` helper"
#~ " process all documents in the "
#~ "``zipcodes`` collection. :method:`aggregate() "
#~ "<db.collection.aggregate()>` combines a number "
#~ "of :ref:`pipeline <aggregation-pipeline>` "
#~ "operators that define the aggregation "
#~ "process."
#~ msgstr ""

# 9ff0fbfd0e4545919ca1838fc11c5858
#~ msgid ""
#~ "All documents from the ``zipcodes`` "
#~ "collection pass into the pipeline, which"
#~ " consists of the following steps:"
#~ msgstr ""

# 1bc27fb90cb54b57b734d7fce417b3c1
#~ msgid ""
#~ "the :pipeline:`$group` operator collects all"
#~ " documents and creates new documents "
#~ "for every combination of the ``city``"
#~ " and ``state`` fields in the source"
#~ " documents."
#~ msgstr ""

# cdce025d69a04443a823d17f90251df1
#~ msgid ""
#~ "By specifying the value of ``_id`` "
#~ "as a sub-document that contains "
#~ "both fields, the operation preserves the"
#~ " ``state`` field for use later in "
#~ "the pipeline. The documents produced by"
#~ " this stage of the pipeline have "
#~ "a second field, ``pop``, which uses "
#~ "the :group:`$sum` operator to provide "
#~ "the total of the ``pop`` fields in"
#~ " the source document."
#~ msgstr ""

# 4e15401aef084d8a868475c53c432fd9
#~ msgid ""
#~ "the second :pipeline:`$group` operator "
#~ "collects the documents in the pipeline"
#~ " by the ``state`` field, which is "
#~ "a field inside the nested ``_id`` "
#~ "document."
#~ msgstr ""

# 08580918b389464c895548dd1142bf56
#~ msgid ""
#~ "Within each per-state document this "
#~ ":pipeline:`$group` operator specifies four "
#~ "fields: Using the :group:`$last` expression,"
#~ " the :pipeline:`$group` operator creates "
#~ "the ``biggestcity`` and ``biggestpop`` fields"
#~ " that store the city with the "
#~ "largest population and that population. "
#~ "Using the :group:`$first` expression, the "
#~ ":pipeline:`$group` operator creates the "
#~ "``smallestcity`` and ``smallestpop`` fields "
#~ "that store the city with the "
#~ "smallest population and that population."
#~ msgstr ""

# c439317a4bc24a709b327f55c273c6cb
#~ msgid "The documents, at this stage in the pipeline resemble the following:"
#~ msgstr ""

# fcbb3c7ed4394843ad819e2390485dd6
#~ msgid ""
#~ "The final operation is :pipeline:`$project`,"
#~ " which renames the ``_id`` field to"
#~ " ``state`` and moves the ``biggestCity``,"
#~ " ``biggestPop``, ``smallestCity``, and "
#~ "``smallestPop`` into ``biggestCity`` and "
#~ "``smallestCity`` sub-documents."
#~ msgstr ""

# c3b77af3e94e4943b70bb718feeda23c
#~ msgid "The output of this aggregation operation is:"
#~ msgstr ""

#~ msgid ""
#~ "the :pipeline:`$group` operator collects all"
#~ " documents and creates new documents "
#~ "for every combination of the ``city``"
#~ " and ``state`` fields in the source"
#~ " document. A city can have more "
#~ "than one zip code associated with "
#~ "it as different sections of the "
#~ "city can each have a different zip"
#~ " code."
#~ msgstr ""

#~ msgid ""
#~ ":pipeline:`$sort` operator orders the "
#~ "documents in the pipeline based on "
#~ "the value of the ``pop`` field "
#~ "from largest to smallest. This operation"
#~ " does not alter the documents."
#~ msgstr ""

