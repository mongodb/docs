=============
createIndexes
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Definition
----------

.. dbcommand:: createIndexes

   Builds one or more indexes on a collection.

   .. |method| replace:: :method:`db.collection.createIndex()` and
      :method:`db.collection.createIndexes()` helper methods.
   .. include:: /includes/fact-dbcommand-tip

Compatibility
-------------

This command is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-all.rst

.. include:: /includes/fact-environments-onprem-only.rst

Syntax
------

The :dbcommand:`createIndexes` command takes the following form:

.. code-block:: javascript

   db.runCommand(
      {
        createIndexes: <collection>,
        indexes: [
            {
                key: {
                    <key-value_pair>,
                    <key-value_pair>,
                    ...
                },
                name: <index_name>,
                <option1>,
                <option2>,
                ...
            },
            { ... },
            { ... }
        ],
        writeConcern: { <write concern> },
        commitQuorum: <int|string>,
        comment: <any>
      }
    )
 
Command Fields
~~~~~~~~~~~~~~

The :dbcommand:`createIndexes` command takes the following fields:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80
 
   * - Field
 
     - Type
 
     - Description
 
   * - ``createIndexes``
 
     - string
 
     - The collection for which to create indexes.
       
       
 
   * - ``indexes``
 
     - array
 
     - Specifies the indexes to create. Each document in the array specifies a
       separate index.
       
       
 
   * - ``writeConcern``
 
     - document
 
     - Optional. A document expressing the :doc:`write concern
       </reference/write-concern>`. Omit to use the default write concern.
 
   * - ``commitQuorum``
 
     - integer or string
 
     - .. _createIndexes-cmd-commitQuorum:
     
       Optional. The minimum number of data-bearing replica
       set members (i.e. commit quorum), including the primary, that
       must report a successful :ref:`index build
       <index-operations-replicated-build>` before the primary
       marks the ``indexes`` as ready. 
 
       Starting in MongoDB v5.0, you can resume some
       :ref:`interrupted index builds<index-operations-build-failure>`
       when the :dbcommand:`commit quorum is set<setIndexCommitQuorum>` 
       to ``"votingMembers"``. 
 
       Replica set nodes in a commit quorum must have :rsconf:`members[n].buildIndexes` 
       set to ``true``. If any voting nodes have 
       ``members[n].buildIndexes`` set to ``false``, you can't use the 
       default ``"votingMembers"`` commit quorum. Either configure all 
       nodes with ``members[n].buildIndexes`` set to ``true``, or 
       select a different commit quorum.  
 
       Supports the following values:
 
       - ``"votingMembers"`` - all data-bearing voting replica set
         members (*Default*). A "voting" member is any replica set member 
         where :rsconf:`members[n].votes` is greater than ``0``.
 
       - ``"majority"`` - a simple majority of data-bearing replica set members.
 
       - ``<int>`` - a specific number of data-bearing replica set members.
 
       - ``0`` - Disables quorum-voting behavior. Members 
         start the index build simultaneously but do *not* 
         vote or wait for quorum before completing the 
         index build. If you start an index build with 
         a commit quorum of ``0``, you cannot later modify the 
         commit quorum using :dbcommand:`setIndexCommitQuorum`.
 
       - A replica set :doc:`tag name
         </tutorial/configure-replica-set-tag-sets>`.

   * - ``comment``
 
     - any
 
     - .. include:: /includes/extracts/comment-content.rst

.. _createIndexes-options:

Each document in the ``indexes`` array can take the following fields:

.. list-table::
   :header-rows: 1
   :widths: 20 20 80
 
   * - Field
 
     - Type
 
     - Description
 
   * - ``key``
 
     - document
 
     - Specifies the index's fields. For each field, specify a 
       key-value pair in which the key is the name of the field to 
       index and the value is either the index direction or :ref:`index 
       type <index-types>`. If specifying direction, specify ``1`` for 
       ascending or ``-1`` for descending.

       .. include:: /includes/indexes/wildcard-use-wc-methods.rst

   * - ``name``
 
     - string
 
     - A name that uniquely identifies the index.
       
 
   * - ``unique``
 
     - boolean
 
     - Optional. Creates a unique index so that the collection will not accept
       insertion or update of documents where the index key value matches an existing
       value in the index.
       
       
       Specify ``true`` to create a unique index. The
       default value is ``false``.
       
       The option is *unavailable* for :ref:`hashed <index-hashed-index>`
       indexes.
       
       
       
 
   * - ``partialFilterExpression``
 
     - document
 
     - Optional. If specified, the index only references documents that match the
       filter expression. See :doc:`/core/index-partial` for more information.
       
       
       A filter expression can include:
       
       .. include:: /includes/fact-partial-filter-expression-operators.rst
       
       .. include:: /includes/queryable-encryption/qe-csfle-partial-filter-disclaimer.rst

       You can specify a ``partialFilterExpression`` option for all MongoDB
       :ref:`index types <index-types>`.
       
       
       
 
   * - ``sparse``
 
     - boolean
 
     - Optional. If ``true``, the index only references documents with the specified
       field. These indexes use less space but behave differently in some
       situations (particularly sorts). The default value is ``false``.
       See :doc:`/core/index-sparse` for more information.
 
       The following index types are sparse by default and ignore
       this option:
 
       - :ref:`2dsphere <2dsphere-index>`
       - :ref:`2d <2d-index>`
       - :ref:`Text <index-type-text>`
 
       For a compound index that includes ``2dsphere`` index key(s)
       along with keys of other types, only the ``2dsphere`` index
       fields determine whether the index references a document.
 
 
       MongoDB provides the option to create
       :ref:`partial indexes <index-type-partial>`. These
       offer a superset of the functionality of sparse indexes
       and are preferred instead.
 
   * - ``expireAfterSeconds``
 
     - integer

     - .. include:: /includes/indexes/expireAfterSeconds-config-option.rst
       
       .. include:: /includes/indexes/expireAfterSeconds-warning.rst

       .. include:: includes/expireAfterSeconds-range.rst

   * - :ref:`hidden <cmd-createIndexes-hidden>`
       
     - boolean
     
     - .. _cmd-createIndexes-hidden:
     
       Optional. A flag that determines whether the index is
       :ref:`hidden <index-type-hidden>` from the query planner. A
       hidden index is not evaluated as part of query plan
       selection.
 
       Default is ``false``.

   * - ``storageEngine``
 
     - document
 
     - Optional. Allows users to configure the storage engine on a
       per-index basis when creating an index.
       
       
       The ``storageEngine`` option should take the following form:
       
       .. code-block:: javascript
       
          storageEngine: { <storage-engine-name>: <options> }
       
       Storage engine configuration options specified when creating indexes are
       validated and logged to the :term:`oplog` during replication to
       support replica sets with members that use different storage
       engines.
       
 
 
   * - ``weights``
 
     - document
 
     - Optional. For :ref:`text <index-type-text>` indexes, a document that contains
       field and weight pairs. The weight is an integer ranging from 1 to
       99,999 and denotes the significance of the field relative to the
       other indexed fields in terms of the score. You can specify weights
       for some or all the indexed fields. See
       :ref:`control-text-search-results` to adjust the scores.
       The default value is ``1``.
       

   * - ``default_language``
 
     - string
 
     - .. _createIndexes-default-language:

       Optional. For :ref:`text <index-type-text>` indexes, the language that
       determines the list of stop words and the rules for the stemmer and
       tokenizer. See :ref:`text-search-languages` for the available
       languages and 
       :doc:`/core/indexes/index-types/index-text/specify-text-index-language` 
       for more information and examples. The default value is ``english``.
       
       
 
   * - ``language_override``
 
     - string
 
     - Optional. For :ref:`text <index-type-text>` indexes, the name of the field, in
       the collection's documents, that contains the override language for
       the document. The default value is ``language``. See
       :ref:`specify-language-field-text-index-example` for an example.
       
       
 
   * - ``textIndexVersion``
 
     - integer
 
     - Optional. The ``text`` index version number. Users can use this option to
       override the default version number.
       
       For available versions, see :ref:`text-index-versions`.
 
 
   * - ``2dsphereIndexVersion``
 
     - integer
 
     - Optional. The ``2dsphere`` index version number. Users can use this option to
       override the default version number.
       
       For the available versions, see :ref:`2dsphere-v2`.
 
 
   * - ``bits``
 
     - integer
 
     - Optional. For :ref:`2d <2d-index>` indexes, the number of precision of the
       stored :term:`geohash` value of the location data.
       
       The ``bits`` value ranges from 1 to 32 inclusive. The default value
       is ``26``.
       
       
 
   * - ``min``
 
     - number
 
     - Optional. For :ref:`2d <2d-index>` indexes, the lower inclusive boundary for
       the longitude and latitude values. The default value is ``-180.0``.
       
       
 
   * - ``max``
 
     - number
 
     - Optional. For :ref:`2d <2d-index>` indexes, the upper inclusive boundary for
       the longitude and latitude values. The default value is
       ``180.0``.

       
       
 
   * - ``collation``
 
     - document
 
     - Optional. Specifies the :ref:`collation <collation>` for the index.
       
       .. include:: /includes/extracts/collation-description.rst
       
       .. include:: /includes/extracts/collation-index-collection.rst
       
       .. include:: /includes/extracts/collation-option-specification.rst
       
       
 
   * - ``wildcardProjection``
 
     - document
 
     - Optional. 
 
       .. _createIndexes-wildcardProjection-param: 
     
       Allows users to include or exclude specific field paths from
       a :ref:`wildcard index <wildcard-index-core>` using the
       ``{ "$**" : 1}`` key pattern. This option is only 
       valid if creating a :ref:`wildcard index <wildcard-index-core>` on
       all document fields. You cannot specify this option if creating
       a wildcard index on a specific field path and its subfields, e.g.
       ``{ "path.to.field.$**" : 1 }``
       
       
       
       The ``wildcardProjection`` option takes the following form:
       
       .. code-block:: javascript
       
          wildcardProjection: {
            "path.to.field.a" : <value>,
            "path.to.field.b" : <value>
          }
       
       The ``<value>`` can be either of the following:
       
       - ``1`` or ``true`` to include the field in the wildcard index.
       
       - ``0`` or ``false`` to exclude the field from the wildcard index. 
       
       .. include:: /includes/extracts/wildcard-index-id.rst
       
       
       



:binary:`~bin.mongosh` provides the methods
:method:`db.collection.createIndex()` and
:method:`db.collection.createIndexes()` as wrappers for the
:dbcommand:`createIndexes` command.

Considerations
--------------

MongoDB disallows the creation of version 0 indexes. 

Index Names
~~~~~~~~~~~

The :dbcommand:`createIndexes` command and
:binary:`~bin.mongosh` helpers
:method:`db.collection.createIndex()` and
:method:`db.collection.createIndexes()` report an error if you
create an index with one name, and then try to create the same index
again but with another name.

.. code-block:: javascript

  {
     "ok" : 0,
     "errmsg" : "Index with name: x_1 already exists with a different name",
     "code" : 85,
     "codeName" : "IndexOptionsConflict"
  }

In previous versions, MongoDB did not create the index again, but
would return a response object with ``ok`` value of ``1`` and a note
that implied that the index was not recreated. For example:

.. code-block:: javascript

  {
     "numIndexesBefore" : 2,
     "numIndexesAfter" : 2,
     "note" : "all indexes already exist",
     "ok" : 1
  }

Replica Sets and Sharded Clusters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.4-changes-index-builds-simultaneous-fcv.rst

.. include:: /includes/extracts/4.4-changes-index-builds-simultaneous.rst

To start an index build with a non-default commit quorum, specify the
:ref:`commitQuorum <createIndexes-cmd-commitQuorum>`.

Use the :dbcommand:`setIndexCommitQuorum` command to modify the commit quorum 
of an in-progress index build. 

To minimize the impact of building an index on replica sets and sharded
clusters, use a rolling index build procedure
as described on :doc:`/tutorial/build-indexes-on-replica-sets`.

Collation and Index Types
~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/collation-index-type-restrictions.rst

.. include:: /includes/extracts/collation-index-type-restrictions-addendum.rst

.. _create-indexes-stable-api:

Stable API
~~~~~~~~~~

.. include:: /includes/create-indexes-stable-api-compatibility.rst

.. |paramName| replace:: ``indexes`` array

Behavior
--------

Concurrency
~~~~~~~~~~~

.. include:: /includes/extracts/createIndexes-resource-lock.rst

.. include:: /includes/unreachable-node-default-quorum-index-builds.rst 

Memory Usage Limit
~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-index-build-default-memory-limit.rst


Index Options
~~~~~~~~~~~~~

Non-Hidden Option
`````````````````

The :ref:`hidden <createIndexes-hidden-option>` option can be changed
without dropping and recreating the index. See
:ref:`createIndexes-hidden-option`.

Changing Index Options
``````````````````````

Collation options on an existing index can be updated. To change other 
index options, drop the existing index with 
:method:`db.collection.dropIndex()` then run :dbcommand:`createIndexes`
with the new options.

.. _createIndexes-collation-option:

Collation Option
````````````````

.. include:: /includes/extracts/collation-index-options.rst

.. include:: /includes/extracts/collation-index-collection.rst

.. include:: /includes/extracts/collation-index-tip.rst

.. include:: /includes/extracts/collation-index-use.rst

.. _createIndexes-hidden-option:

Hidden Option
``````````````

To change the ``hidden`` option for existing indexes, you can use the
following :binary:`~bin.mongosh` methods:

- :method:`db.collection.hideIndex()`

- :method:`db.collection.unhideIndex()`

For example,

- To change the ``hidden`` option for an index to ``true``, use the
  :method:`db.collection.hideIndex()` method:

  .. code-block:: javascript

     db.restaurants.hideIndex( { borough: 1, ratings: 1 } );

- To change the ``hidden`` option for an index to ``false``, use the
  :method:`db.collection.unhideIndex()` method:

  .. code-block:: javascript

     db.restaurants.unhideIndex( { borough: 1, city: 1 } );

.. seealso::

   :doc:`/core/index-hidden`

.. _createIndexes-command-wildcard-behavior:

Wildcard Indexes
~~~~~~~~~~~~~~~~

- .. include:: /includes/extracts/wildcard-index-id.rst

- .. include:: /includes/indexes/wildcard-restrictions.rst

To learn more, see:

- :ref:`About Wildcard Indexes <wildcard-index-core>`
- :ref:`Wildcard Index Examples <createIndexes-command-wildcard-examples>`
- :ref:`Wildcard Index Restrictions <wildcard-index-restrictions>`

Transactions
~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-explicit-ddl.rst

.. |operation| replace:: :dbcommand:`createIndexes`


Commit Quorum Contrasted with Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/indexes/commit-quorum-vs-write-concern.rst

Example
-------

The following command builds two indexes on the ``inventory`` collection of
the ``products`` database:

.. code-block:: javascript

   db.getSiblingDB("products").runCommand(
     {
       createIndexes: "inventory",
       indexes: [
           {
               key: {
                   item: 1,
                   manufacturer: 1,
                   model: 1
               },
               name: "item_manufacturer_model",
               unique: true
           },
           {
               key: {
                   item: 1,
                   supplier: 1,
                   model: 1
               },
               name: "item_supplier_model",
               unique: true
           }
       ],
       writeConcern: { w: "majority" }
     }
   )

When the indexes successfully finish building, MongoDB returns a results
document that includes a status of ``"ok" : 1``.

.. _createIndexes-command-wildcard-examples:

Create a Wildcard Index
~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   For complete documentation on Wildcard Indexes, see
   :ref:`wildcard-index-core`.

The following lists examples of wildcard index creation:

- :ref:`createIndexes-command-wildcard-onepath`
- :ref:`createIndexes-command-wildcard-allpaths`
- :ref:`createIndexes-command-wildcard-inclusion`
- :ref:`createIndexes-command-wildcard-exclusion`

.. _createIndexes-command-wildcard-onepath:

Create a Wildcard Index on a Single Field Path
``````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index on the 
``product_attributes`` field:

.. code-block:: bash

   use inventory
   db.runCommand(
     {
       createIndexes: "products_catalog",
       indexes: [
         {
           key: { "product_attributes.$**" : 1 },
           name: "wildcardIndex"
         }
       ]
     }
   )

With this wildcard index, MongoDB indexes all scalar values of
``product_attributes``. If the field is a nested document or array, the
wildcard index recurses into the document/array and indexes all scalar
fields in the document/array.

The wildcard index can support arbitrary single-field queries on 
``product_attributes`` or one of its nested fields:

.. code-block:: bash

   db.products_catalog.find( { "product_attributes.superFlight" : true } )
   db.products_catalog.find( { "product_attributes.maxSpeed" : { $gt : 20 } } )
   db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )

.. |projection-ref| replace:: :ref:`parameter documentation <createIndexes-wildcardProjection-param>`

.. note::

   The path-specific wildcard index syntax is incompatible with the
   ``wildcardProjection`` option. See the |projection-ref| for more
   information.

.. _createIndexes-command-wildcard-allpaths:

Create a Wildcard Index on All Field Paths
``````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index on all scalar fields
(excluding the ``_id`` field):

.. code-block:: bash

   use inventory
   db.runCommand(
     {
       createIndexes: "products_catalog",
       indexes: [
         {
           key: { "$**" : 1 },
           name: "wildcardIndex"
         }
       ]
     }
   )

With this wildcard index, MongoDB indexes all scalar fields for each
document in the collection. If a given field is a nested document or
array, the wildcard index recurses into the document/array and indexes
all scalar fields in the document/array.

The created index can support queries on any arbitrary field 
within documents in the collection:

.. code-block:: bash

   db.products_catalog.find( { "product_price" : { $lt : 25 } } )
   db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )



.. note::

   Wildcard indexes omit the ``_id`` field by default. To include the
   ``_id`` field in the wildcard index, you must explicitly include it
   in the ``wildcardProjection`` document. See |projection-ref| for
   more information.

.. _createIndexes-command-wildcard-inclusion:

Create a Wildcard Index on Multiple Specific Field Paths
````````````````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index and uses
the ``wildcardProjection`` option to include only scalar values of the
``product_attributes.elements`` and ``product_attributes.resistance``
fields in the index. 

.. code-block:: bash

   use inventory
   db.runCommand(
     {
       createIndexes: "products_catalog",
       indexes: [
         {
           key: { "$**" : 1 },
           "wildcardProjection" : {
             "product_attributes.elements" : 1,
             "product_attributes.resistance" : 1
           },
           name: "wildcardIndex"
         }
       ]
     }
   )

While the key pattern ``"$**"`` covers all fields in the document, the
``wildcardProjection`` field limits the index to only the included
fields and their nested fields.

If a field is a nested document or array, the wildcard
index recurses into the document/array and indexes all scalar fields in 
the document/array.

The created index can support queries on any scalar field
included in the ``wildcardProjection``:

.. code-block:: bash

   db.products_catalog.find( { "product_attributes.elements" : { $eq: "Water" } } )
   db.products_catalog.find( { "product_attributes.resistance" : "Bludgeoning" } )

.. note::

   .. include:: /includes/extracts/wildcard-index-inclusion-exclusion.rst

.. _createIndexes-command-wildcard-exclusion:

Create a Wildcard Index that Excludes Multiple Specific Field Paths
```````````````````````````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index and uses
the ``wildcardProjection`` document to index all scalar fields
for each document in the collection, *excluding* the 
``product_attributes.elements`` and ``product_attributes.resistance``
fields:

.. code-block:: bash

   use inventory
   db.runCommand(
     {
       createIndexes: "products_catalog",
       indexes: [
         {
           key: { "$**" : 1 },
           "wildcardProjection" : {
              "product_attributes.elements" : 0,
              "product_attributes.resistance" : 0
           },
           name: "wildcardIndex"
         }
       ]
     }
   )

While the key pattern ``"$**"`` covers all fields in the document, the
``wildcardProjection`` field excludes the specified fields from the
index.

If a field is a nested document or array, the wildcard
index recurses into the document/array and indexes all scalar fields in 
the document/array.

The created index can support queries on any scalar field **except**
those excluded by ``wildcardProjection``:

.. code-block:: bash

   db.products_catalog.find( { "product_attributes.maxSpeed" : { $gt: 25 } } )
   db.products_catalog.find( { "product_attributes.superStrength" : true } )

.. note::

   .. include:: /includes/extracts/wildcard-index-inclusion-exclusion.rst

Create Index With Commit Quorum
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.4-changes-index-builds-simultaneous-fcv.rst

.. include:: /includes/extracts/4.4-changes-index-builds-simultaneous.rst

.. |updateMethod-name| replace::  :dbcommand:`createIndexes`
.. include:: /includes/indexes/template-commit-quorum-intro.rst

The following operation creates an index with a :ref:`commit quorum
<createIndexes-cmd-commitQuorum>` of ``"majority"``, or a 
simple majority of data-bearing members:

.. code-block:: javascript

   db.getSiblingDB("examples").runCommand(
     { 
       createIndexes: "invoices",
       indexes: [
         { 
           key: { "invoices" : 1 },
           "name" : "invoiceIndex"
         }
       ],
       "commitQuorum" : "majority"
     }
   )

The :term:`primary` marks index build as ready only after a simple
majority of data-bearing voting members "vote" to commit the index
build. For more information on index builds and the voting process, see
:ref:`index-operations-replicated-build`.

Output
------

The :dbcommand:`createIndexes` command returns a document that indicates
the success of the operation. The document contains some but not all of
the following fields, depending on outcome:

.. data:: createIndexes.createdCollectionAutomatically

   If ``true``, then the collection didn't exist and was created in the
   process of creating the index.

.. data:: createIndexes.numIndexesBefore

   The number of indexes at the start of the command.

.. data:: createIndexes.numIndexesAfter

   The number of indexes at the end of the command.

.. data:: createIndexes.ok

   A value of ``1`` indicates the indexes are in place. A value of
   ``0`` indicates an error.

.. data:: createIndexes.note

   This ``note`` is returned if an existing index or indexes already
   exist. This indicates that the index was not created or changed.

.. data:: createIndexes.errmsg

   Returns information about any errors.

.. data:: createIndexes.code

   The error code representing the type of error.
