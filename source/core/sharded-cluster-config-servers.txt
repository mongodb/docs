.. index:: sharding; config servers
.. index:: config servers
.. _sharding-config-server:
.. _sharded-cluster-config-server:

==============
Config Servers
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Config servers store the metadata for a :term:`sharded cluster`. The metadata
reflects state and organization for all data and components within the
sharded cluster. The metadata includes the list of chunks on every shard and
the ranges that define the chunks.

In MongoDB 3.2+, you can deploy config servers as a :term:`replica set` (CSRS).
See :ref:`Replica Set Config Servers <csrs>`.

The :program:`mongos` instances cache this
data and use it to route read and write operations to the correct shards.
:program:`mongos` updates the cache when there are metadata changes for the
cluster, such as :ref:`sharding-chunk-splits` or
:doc:`adding a shard</tutorial/add-shards-to-shard-cluster>`.

The config servers store :doc:`authentication` configuration information such
as :doc:`Role-Based Access Control</core/authorization>` or :doc:`internal
authentication</core/security-internal-authentication>` settings for the
cluster.

A single :term:`sharded cluster` must have *exclusive* use of its :ref:`config
servers <sharding-config-server>`. If you have multiple sharded clusters, each
cluster must have its own CSRS.


.. warning::

   Administrative operations conducted on config servers may have significant
   impact on sharded cluster performance and availability. Depending on the
   number of config servers impacted, the cluster may be read-only or
   offline for a period of time.

MongoDB also uses the config servers to manage distributed locks.


.. _csrs:
.. _replset-config-servers:

Replica Set Config Servers
--------------------------

.. versionchanged:: 3.2

   .. include:: /includes/fact-csrs-versionchanged.rst

.. include:: /includes/fact-config-server-replica-set-restrictions.rst

Earlier versions of MongoDB required *exactly three* mirrored
:program:`mongod` instances to act as the config servers. If you are using
*mirrored* config servers, each server's system clock must be within 30
seconds of each other server for the distributed lock manager to work
properly. With *mirrored* config servers, minimize clock skew by running the
network time protocol (NTP) ``ntpd`` on your servers. MongoDB 3.2 deprecates
the use of three mirrored :program:`mongod` instances for config servers.

With replica set config servers, clock skew does not affect distributed lock
management.

Each sharded cluster must have its own config servers. Do not use the
same config servers for different sharded clusters.

.. index:: config databases
.. index:: database, config

.. _config-server-read-write-ops:

Read and Write Operations on Config Servers
-------------------------------------------

Config servers store the cluster's metadata in the :doc:`config
database </reference/config-database>`. The :program:`mongos` instances
cache this data and use it to route reads and writes to shards.

MongoDB only writes data to the config servers when the metadata changes,
such as

- after a :doc:`chunk migration </core/sharding-balancer-administration>`, or

- after a :doc:`chunk split </core/sharding-data-partitioning>`.

When writing to a replica set config server deployment, MongoDB uses a
:ref:`write concern <wc-w>` of ``"majority"``.

MongoDB reads data from the config server in the following cases:

- A new :program:`mongos` starts for the first time, or an existing
  :program:`mongos` restarts.

- After change in the cluster metadata, such as after a chunk
  migration.

When reading from the replica set config servers, MongoDB uses a
:doc:`/reference/read-concern` level of :readconcern:`"majority"`.

.. _config-server-availability:

Config Server Availability
--------------------------

If the config server replica set loses its primary and cannot elect a
primary, the cluster's metadata becomes *read only*. You can still read
and write data from the shards, but no chunk migration or chunk splits
will occur until the replica set can elect a primary. If all config
databases become unavailable, the cluster can become inoperable.

The :program:`mongos` instances cache the metadata from the config
servers. As such, if all config server members become unavailable, you
can still use the cluster if you do not restart the :program:`mongos`
instances until after the config servers are accessible again. If you
restart the :program:`mongos` instances before the config servers are
available, the :program:`mongos` cannot route reads and writes.

Clusters become inoperable without the cluster metadata. To ensure that
the config servers remain available and intact, backups of config
servers are critical. The data on the config server is small compared
to the data stored in a cluster, and the config server has a relatively
low activity load.

See :ref:`sharding-config-servers-and-availability` for more
information.

.. _sharding-internals-config-database:

Sharded Cluster Metadata
------------------------

Config servers store metadata in the :doc:`/reference/config-database`.

.. important:: Always back up the ``config`` database before doing any
   maintenance on the config server.

To access the ``config`` database, issue the following command from the
:program:`mongo` shell:

.. code-block:: javascript

   use config

In general, you should *never* edit the content of the ``config``
database directly. The ``config`` database contains the following
collections:

- :data:`~config.changelog`
- :data:`~config.chunks`
- :data:`~config.collections`
- :data:`~config.databases`
- :data:`~config.lockpings`
- :data:`~config.locks`
- :data:`~config.mongos`
- :data:`~config.settings`
- :data:`~config.shards`
- :data:`~config.version`

For more information on these collections and their role in sharded
clusters, see :doc:`/reference/config-database`. See
:ref:`config-server-read-write-ops` for more information about reads
and updates to the metadata.

Sharded Cluster Security
------------------------

Use :doc:`/core/security-internal-authentication` to enforce intra-cluster
security and prevent unauthorized cluster components from accessing the
cluster. You must start each :program:`mongod` in the cluster with the
appropriate security settings in order to enforce internal authentication.

See :doc:`/tutorial/deploy-sharded-cluster-with-keyfile-access-control` for a
tutorial on deploying a secured sharded cluster.
