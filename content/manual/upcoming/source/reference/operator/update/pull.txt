=====
$pull
=====

.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: shell

.. meta::
   :description: Use the $pull operator to remove all instances of the a value or values from an array that match a specified condition.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. update:: $pull

   The :update:`$pull` operator removes from an existing array all
   instances of a value or values that match a specified condition.

Compatibility
-------------

.. |operator-method| replace:: ``$pull``

.. include:: /includes/fact-compatibility.rst

Syntax
------

The :update:`$pull` operator has the following form:

.. code-block:: javascript

   { $pull: { <field1>: <value|condition>, <field2>: <value|condition>, ... } }

.. include:: /includes/use-dot-notation.rst

Behavior
--------

.. include:: /includes/fact-update-operator-processing-order.rst

If you specify a ``<condition>`` and the array elements are embedded
documents, :update:`$pull` operator applies the ``<condition>`` as if each
array element were a document in a collection. See
:ref:`pull-array-of-documents` for an example.

If the specified ``<value>`` to remove is an array, :update:`$pull`
removes only the elements in the array that match the specified
``<value>`` exactly, including order.

If the specified ``<value>`` to remove is a document, :update:`$pull`
removes only the elements in the array that have the exact same fields
and values. The ordering of the fields can differ.

.. include:: /includes/extracts/update-operation-empty-operand-expressions-pull.rst

Examples
--------

Remove All Items That Equal a Specified Value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create the ``stores`` collection:

.. code-block:: javascript

   db.stores.insertMany( [
      {
         _id: 1,
         fruits: [ "apples", "pears", "oranges", "grapes", "bananas" ],
         vegetables: [ "carrots", "celery", "squash", "carrots" ]
      },
      {
         _id: 2,
         fruits: [ "plums", "kiwis", "oranges", "bananas", "apples" ],
         vegetables: [ "broccoli", "zucchini", "carrots", "onions" ]
      }
   ] )

The following operation removes

- ``"apples"`` and ``"oranges"`` from the ``fruits`` array
- ``"carrots"`` from the ``vegetables`` array

.. code-block:: javascript

   db.stores.updateMany(
       { },
       { $pull: { fruits: { $in: [ "apples", "oranges" ] }, vegetables: "carrots" } }
   )

Confirm the result with :method:`db.collection.find()`:

.. code-block:: javascript

  {
    _id: 1,
    fruits: [ 'pears', 'grapes', 'bananas' ],
    vegetables: [ 'celery', 'squash' ]
  },
  {
    _id: 2,
    fruits: [ 'plums', 'kiwis', 'bananas' ],
    vegetables: [ 'broccoli', 'zucchini', 'onions' ]
  }


Remove All Items That Match a Specified ``$pull`` Condition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create the ``profiles`` collection:

.. code-block:: javascript

   db.profiles.insertOne( { _id: 1, votes: [ 3, 5, 6, 7, 7, 8 ] } )

The following operation will remove all items from the ``votes`` array
that are greater than or equal to ( :query:`$gte` ) ``6``:

.. code-block:: javascript

   db.profiles.updateOne( { _id: 1 }, { $pull: { votes: { $gte: 6 } } } )

After the update operation, the document only has values less than 6:

.. code-block:: javascript

   { _id: 1, votes: [  3,  5 ] }

.. _pull-array-of-documents:

Remove All Items That Match a Specified ``$pull`` Condition With :method:`~db.collection.bulkWrite()`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following :method:`db.collection.bulkWrite()` operation:

- Creates the ``profilesBulkWrite`` collection.

- Removes all items from the ``votes`` array
  that are greater than or equal to ( :query:`$gte` ) ``6``.

- Removes all items from the ``votes`` array
  that are less than or equal to ( :query:`$lte` ) ``3``.


.. code-block:: javascript

   try {
      db.profilesBulkWrite.bulkWrite( [
         {
            insertOne: {
               "document": { _id: 1, votes: [ 3, 5, 6, 7, 7, 8 ] }
            }
         },
         {
            updateOne: {
               "filter": { _id: 1 }, 
               "update": { $pull: { votes: { $gte: 6 } } }
            }
         },
         {
            updateOne: {
               "filter": {_id: 1}, 
               "update": { $pull: { votes: { $lte: 3 } } }
            }
         }
      ] );
   } catch (e) {
      print(e);
   }

.. note:: ``bulkWrite()``

   The :method:`db.collection.bulkWrite()` method executes multiple 
   write operations listed in an array. In this example, the 
   :method:`db.collection.bulkWrite()` performs multiple operations
   on the ``profiles`` collection. 

After the :method:`db.collection.bulkWrite()` operation, 
you can confirm the document only has values less than 
6 and greater than 3 using the following 
operation: 

.. code-block:: javascript
   
   db.profilesBulkWrite.find()

The operation returns the following:

.. code-block:: javascript
   :copyable: false

   [ { _id: 1, votes: [ 5 ] } ]


Remove Items from an Array of Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create the ``survey`` collection:

.. _ex-create-survey-collection:

.. code-block:: javascript

   db.survey.insertMany([
      {
         _id: 1,
         results: [
            { item: "A", score: 5 },
            { item: "B", score: 8 }
         ]
      },
      {
         _id: 2,
         results: [
            { item: "C", score: 8 },
            { item: "B", score: 4 }
         ]
      }
   ] )

The following operation removes all elements from the ``results`` array
that contain both a ``score`` field equal to ``8`` and an ``item``
field equal to ``"B"``:

.. code-block:: javascript

   db.survey.updateMany(
     { },
     { $pull: { results: { score: 8 , item: "B" } } }
   )

The :update:`$pull` expression applies the condition to each element of
the ``results`` array as though it were a top-level document.

After the operation, the ``results`` array contains no documents that
contain both a ``score`` field equal to ``8`` and an ``item`` field
equal to ``"B"``.

.. code-block:: javascript

  { _id: 1, results: [ { item: 'A', score: 5 } ] },
  {
    _id: 2,
    results: [ { item: 'C', score: 8 }, { item: 'B', score: 4 } ]
  }

The :update:`$pull` operator treats each element as a top-level object.
The query is applied to each element. The expression does not need to
use :query:`$elemMatch` to specify match conditions. 

On the contrary, the following operation does not :update:`$pull` any
elements from the original collection:

.. code-block:: javascript

   db.survey.updateMany(
     { },
     { $pull: { results: { $elemMatch: { score: 8 , item: "B" } } } }
   )

.. note::

   Drop the ``survey`` collection with:
   
   .. code-block:  javascript
   
      db.survey.drop()
      
   Then :ref:`recreate it <ex-create-survey-collection>` to run this
   example.

Remove Documents from Nested Arrays
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create a new ``survey`` collection with documents that are embedded in
nested arrays.

.. code-block:: javascript
   :emphasize-lines: 10, 15, 25, 30

   db.survey.drop()

   db.survey.insertMany( [
      {
         _id: 1,
         results: [
            {
               item: "A", 
               score: 5, 
               answers: [ { q: 1, a: 4 }, { q: 2, a: 6 } ]
            },
            {
               item: "B",
               score: 8,
               answers: [ { q: 1, a: 8 }, { q: 2, a: 9 } ]
            }
         ]
      },
      {
         _id: 2,
         results: [
            {
               item: "C",
               score: 8,
               answers: [ { q: 1, a: 8 }, { q: 2, a: 7 } ]
            },
            {
               item: "B",
               score: 4,
               answers: [ { q: 1, a: 0 }, { q: 2, a: 8 } ]
            }
         ]
      }
   ] )

Then you can specify multiple conditions on the elements of the
``answers`` array with :query:`$elemMatch`:

.. code-block:: javascript
   :emphasize-lines: 8

   db.survey.updateMany(
     { },
     {
        $pull:
           {
              results:
                 {
                    answers: { $elemMatch: { q: 2, a: { $gte: 8 } } }
                 }
           }
     }
   )

The operation updated the ``results`` array in each document it
matched. :method:`db.collection.updateMany()` removed documents from
``results`` when an element of the embedded ``answers`` array matched
the selection conditions in the highlighted line. 

.. code-block:: javascript

   {
     _id: 1,
     results: [
       {
         item: 'A',
         score: 5,
         answers: [ { q: 1, a: 4 }, { q: 2, a: 6 } ]
       }
     ]
   },
   {
     _id: 2,
     results: [
       {
         item: 'C',
         score: 8,
         answers: [ { q: 1, a: 8 }, { q: 2, a: 7 } ]
       }
     ]
   }

.. seealso::

   - :method:`db.collection.updateMany()`
   - :method:`db.collection.findAndModify()`

