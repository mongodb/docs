=====================
db.grantRolesToUser()
=====================

.. default-domain:: mongodb

Definition
----------

.. method:: db.grantRolesToUser ( username, roles, writeConcern )

   Grants additional roles to a user.

   The :method:`grantRolesToUser` method uses the following syntax:

   .. code-block:: javascript

      db.grantRolesToUser( "<username>", [ <roles> ], { <writeConcern> } )

   The :method:`grantRolesToUser` method takes the following arguments:

   .. include:: /reference/method/db.grantRolesToUser-param.rst

   .. |local-cmd-name| replace:: :method:`db.grantRolesToUser()`
   .. include:: /includes/fact-roles-array-contents.rst

   The :method:`db.grantRolesToUser()` method wraps the
   :dbcommand:`grantRolesToUser` command.

Required Access
---------------

.. include:: /includes/access-grant-roles.rst

Example
-------

Given a user ``accountUser01`` in the ``products`` database with the following
roles:

.. code-block:: javascript

   "roles" : [
       { "role" : "assetsReader",
         "db" : "assets"
       }
   ]

The following :method:`grantRolesToUser()` operation gives ``accountUser01``
the :authrole:`readWrite` role on the ``products`` database and the
:authrole:`read` role on the ``stock`` database.

.. code-block:: javascript

   use products
   db.grantRolesToUser( 
      "accountUser01",
      [ "readWrite" , { role: "read", db: "stock" } ],
      { w: "majority" , wtimeout: 4000 }
   )

The user ``accountUser01`` in the ``products`` database now has the following
roles:

.. code-block:: javascript

   "roles" : [
       { "role" : "assetsReader",
         "db" : "assets"
       },
       { "role" : "read",
         "db" : "stock"
       },
       { "role" : "readWrite",
         "db" : "products"
       }
   ]
