collection: "inventory"
options:
  show_title: False
  show_collection: False
content:
  source:
    file: example/example-gs-query-all.yaml
    ref: 0
---
title:
  text: "Remove All Documents That Match a Condition"
  level: 2
ref: 1
pre : |
  The following removes from the ``inventory`` collection all documents
  with ``"category"`` field equal to ``"hat"``.
operation:
  language: javascript
  code: |
    db.inventory.remove( { "category": "hat" } )
post: |
  The remove operation returns a :method:`WriteResult` object which
  contains the status of the operation. Successful operation should
  return the following:
results: |
   WriteResult({ "nRemoved" : 2 })
final: |
  :data:`~WriteResult.nRemoved` field specifies the number of documents
  removed, in this case ``2``.
---
title:
  text: Use the ``justOne`` Option
  level: 2
ref: 2
pre: |
  By default, the :method:`~db.collection.remove()` method removes all
  documents that match the remove condition. Use the ``justOne`` option
  to limit the remove operation to only one of the matching documents.
operation:
  - pre: |
      For example, multiple documents have ``category`` field equal to
      ``"gloves"``. The following operation only removes a single
      document even though multiple documents match.
    language: javascript
    code: |
      db.inventory.remove( { "category": "gloves" },  { justOne: true } )
post: |
  Successful operation should return the following
  :method:`WriteResult` object.
results: |
  WriteResult({ "nRemoved" : 1 })
final: |
  :data:`~WriteResult.nRemoved` field specifies the number of documents
  removed, in this case ``1``.
---
title:
  text: "Remove All Documents"
  level: 2
ref: 3
pre: |
  To remove all documents from a collection, pass an empty
  conditions document ``{}`` to the
  :method:`~db.collection.remove()` method.
operation:
  language: javascript
  code: |
    db.inventory.remove( { } )
post: |
  Successful operation should return the following
  :method:`WriteResult` object.
results: |
  WriteResult({ "nRemoved" : 2 })
final: |
  :data:`~WriteResult.nRemoved` field specifies the number of documents
  removed, in this case ``2``.
---
title:
  text: "Drop a Collection"
  level: 2
ref: 4
pre: |  
  The remove all operation only removes the documents from the
  collection. The collection itself, as well as any indexes for the
  collection, remain.
 
  To remove all documents from a collection, it may be more efficient
  to drop the entire collection, including the indexes, and then
  recreate the collection and rebuild the indexes.
operation:
  pre: |
    Use the :method:`~db.collection.drop()` method to drop a collection,
    including any indexes. For example, the following drops the
    ``inventory`` collection. 
  language: javascript
  code: |
     db.inventory.drop()
post: |
   Upon successful drop of the collection, the operation returns
   ``true``.
results:
  - 'true'
final: |
  If the collection to drop does not exist, the operation
  will return ``false``.
...