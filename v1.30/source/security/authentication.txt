.. _c-auth:

Authentication Mechanisms
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: authorize, ecs, amazon

Overview
--------

This guide describes the mechanisms you can use in the {+driver-short+} to authenticate
users to MongoDB.

.. important:: Percent-Encoding

   You must :wikipedia:`percent-encode <Percent-encoding>` a username and password before
   you include them in a MongoDB URI.

.. _c-scram-sha-256:

SCRAM-SHA-256
-------------

SCRAM-SHA-256, as defined by `RFC 7677 <https://www.rfc-editor.org/rfc/rfc7677>`__,
is the default authentication mechanism on MongoDB deployments
running MongoDB v4.0 or later.

To authenticate by using SCRAM-SHA-256, set the following connection options:

- ``username``: The username to authenticate. Percent-encode this value before including
  it in the connection URI.
- ``password``: The password to authenticate. Percent-encode this value before including
  it in the connection URI.
- ``authSource``: The MongoDB database to authenticate against. By default,
  the {+driver-short+} authenticates against the database in the connection
  URI, if you include one. If you don't specify an authentication database, it
  authenticates against the ``admin`` database.
- ``authMechanism``: Set to ``SCRAM-SHA-256``.

You can set these options by using parameters in your connection string, as shown
in the following code example:

.. literalinclude:: /includes/security/authentication.c
   :language: c
   :copyable: true
   :start-after: // start-scram-sha-256
   :end-before: // end-scram-sha-256

.. _c-scram-sha-1:

SCRAM-SHA-1
-----------

SCRAM-SHA-1, as defined by `RFC 5802 <https://www.rfc-editor.org/rfc/rfc5802>`__,
is the default authentication mechanism on MongoDB deployments
running MongoDB v3.6.

To authenticate with this mechanism, set the following connection options:

- ``username``: The username to authenticate. Percent-encode this value before including
  it in the connection URI.
- ``password``: The password to authenticate. Percent-encode this value before including
  it in the connection URI.
- ``authSource``: The MongoDB database to authenticate against. By default,
  the {+driver-short+} authenticates against the ``admin`` database.
- ``authMechanism``: Set to ``"SCRAM-SHA-1"``.

You can set these options by using parameters in your connection string, as shown
in the following code example:

.. literalinclude:: /includes/security/authentication.c
   :language: c
   :copyable: true
   :start-after: // start-scram-sha-1
   :end-before: // end-scram-sha-1

.. _c-mongodb-x509:

MONGODB-X509
------------

If you compile the {+driver-short+} with TLS support, the {+driver-short+} can present
an X.509 client certificate to MongoDB to prove its identity during the TLS handshake. The
MONGODB-X509 authentication mechanism uses this certificate to authenticate the client.

To authenticate with this mechanism, perform the following steps:

1. Create a ``mongoc_ssl_opt_t`` structure. On this structure, set the ``pem_file`` field
   to the file path of the ``.pem`` file that contains your client certificate and private key.

#. In your connection URI, set the ``authMechanism`` connection option to ``"MONGODB-X509"``.

The following code example shows how to create a MongoDB client that authenticates by
using the MONGODB-X509 mechanism:

.. literalinclude:: /includes/security/authentication.c
   :language: c
   :copyable: true
   :start-after: // start-x509
   :end-before: // end-x509

.. _c-mongodb-aws:

MONGODB-AWS
-----------

.. important::

   The MONGODB-AWS authentication mechanism requires MongoDB v4.4 or later.

The ``MONGODB-AWS`` authentication mechanism uses AWS IAM (Amazon Web Services Identity and
Access Management) or AWS Lambda credentials to authenticate your application.
To use this mechanism to authenticate your application, first create a user with an
associated Amazon Resource Name (ARN) on the ``$external`` database. Then, specify the
``MONGODB-AWS`` authMechanism in the connection URI.

When you use the ``MONGODB-AWS`` mechanism, the {+driver-short+} attempts to
retrieve your AWS credentials from the following sources, in the order listed:

1. Named parameters passed to the connection URI
#. Environment variables
#. AWS EKS AssumeRoleWithWebIdentity request
#. ECS container metadata
#. EC2 instance metadata

The following sections describe how to use the {+driver-short+} to retrieve credentials from
these sources and use them to authenticate your application.

.. _c-mongo-aws-connection-uri:

Connection URI
~~~~~~~~~~~~~~

First, the {+driver-short+} checks whether you passed AWS credentials to the
``mongoc_client_t`` constructor as part of the connection
URI. To pass your credentials in the connection URI, set the following connection
options:

- ``username``: The AWS IAM access key ID to authenticate.
- ``password``: The AWS IAM secret access key.
- ``authMechanism``: Set to ``"MONGODB-AWS"``.

You can set these options in the connection URI, as shown in the following example:

.. literalinclude:: /includes/security/authentication.c
   :language: c
   :copyable: true
   :start-after: // start-aws-connection-uri
   :end-before: // end-aws-connection-uri

You can also include an AWS session token by passing it into the
``authMechanismProperties`` parameter:

.. literalinclude:: /includes/security/authentication.c
   :language: cpp
   :copyable: true
   :start-after: // start-aws-connection-uri-session
   :end-before: // end-aws-connection-uri-session

.. _c-mongo-aws-environment:

Environment Variables
~~~~~~~~~~~~~~~~~~~~~

If you don't include a username and password in your connection URI,
the {+driver-short+} tries to retrieve AWS credentials from the following
environment variables:

- ``AWS_ACCESS_KEY_ID``
- ``AWS_SECRET_ACCESS_KEY``
- ``AWS_SESSION_TOKEN`` (optional)

To use these environment variables to authenticate your application, first set them to the
AWS IAM values needed for authentication, as shown in the following code
example:

.. code-block:: sh

   export AWS_ACCESS_KEY_ID=<AWS IAM access key ID>
   export AWS_SECRET_ACCESS_KEY=<AWS IAM secret access key>
   export AWS_SESSION_TOKEN=<AWS session token>

After you set these environment variables, set the ``authMechanism``
parameter in your connection URI to ``"MONGODB-AWS"``, as shown in the
following example:

.. literalinclude:: /includes/security/authentication.c
   :language: c
   :copyable: true
   :start-after: // start-aws-environment
   :end-before: // end-aws-environment

.. _c-mongo-aws-ecs:

ECS Metadata
~~~~~~~~~~~~

If your application runs in an Elastic Container Service (ECS) container,
the {+driver-short+} can automatically retrieve temporary AWS credentials from an
ECS endpoint. To do so, specify the URI of the ECS endpoint in an environment variable called
``AWS_CONTAINER_CREDENTIALS_RELATIVE_URI``, as shown in the following example:

.. code-block:: sh

   export AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=<URI of the ECS endpoint>

After you set the environment variable, set the ``authMechanism``
parameter in your connection URI to ``"MONGODB-AWS"``, as shown in the
following example:

.. literalinclude:: /includes/security/authentication.c
   :language: c
   :copyable: true
   :start-after: // start-aws-environment
   :end-before: // end-aws-environment

.. _c-mongo-aws-ec2:

EC2 Instance Metadata
~~~~~~~~~~~~~~~~~~~~~

The {+driver-short+} can automatically retrieve temporary AWS credentials from an
Amazon Elastic Cloud Compute (EC2) instance. To use temporary credentials from
within an EC2 instance, set the ``authMechanism`` parameter in your connection
URI to ``"MONGODB-AWS"``, as shown in the following example:

.. literalinclude:: /includes/security/authentication.c
   :language: c
   :copyable: true
   :start-after: // start-aws-environment
   :end-before: // end-aws-environment

.. note::

   If you set any of the environment variables from the preceding AWS authentication
   methods, the {+driver-short+} attempts to retrieve credentials by using those
   methods before attempting to retrieve them from an EC2 instance. To attempt
   to retrieve credentials only from an EC2 instance, ensure that the
   environment variables are not set.

API Documentation
-----------------

To learn more about authenticating your application in the {+driver-short+},
see the following API documentation:

- `mongoc_client_t <{+api-libmongoc+}/mongoc_client_t.html>`__
- `mongoc_uri_t <{+api-libmongoc+}/mongoc_uri_t.html>`__