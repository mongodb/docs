#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/rotate-log-files.txt:3
msgid "Rotate Log Files"
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:14
msgid "Overview"
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:16
msgid ""
"When used with the ``--logpath`` option or :setting:`systemLog.path` "
"setting, :binary:`~bin.mongod` and :binary:`~bin.mongos` instances report"
" a live account of all activity and operations to a log file. When "
"reporting activity data to a log file, by default, MongoDB only rotates "
"logs in response to the :dbcommand:`logRotate` command, or when the "
":binary:`~bin.mongod` or :binary:`~bin.mongos` process receives a "
"``SIGUSR1`` signal from the operating system."
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:24
msgid ""
"MongoDB's standard log rotation approach archives the current log file "
"and starts a new one. To do this, the :binary:`~bin.mongod` or "
":binary:`~bin.mongos` instance renames the current log file by appending "
"a UTC timestamp to the filename, in :term:`ISODate` format. It then opens"
" a new log file, closes the old log file, and sends all new log entries "
"to the new log file."
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:31
msgid ""
"You can also configure MongoDB to support the Linux/Unix logrotate "
"utility by setting :setting:`systemLog.logRotate` or ``--logRotate`` to "
"``reopen``. With ``reopen``, :binary:`~bin.mongod` or "
":binary:`~bin.mongos` closes the log file, and then reopens a log file "
"with the same name, expecting that another process renamed the file prior"
" to rotation."
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:39
msgid ""
"Finally, you can configure :binary:`~bin.mongod` to send log data to the "
"``syslog``. using the :option:`--syslog <mongod --syslog>` option. In "
"this case, you can take advantage of alternate logrotation tools."
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:43
msgid ""
"For information on logging, see the :ref:`monitoring-standard-loggging` "
"section."
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:47
msgid "Default Log Rotation Behavior"
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:49
msgid ""
"By default, MongoDB uses the ``--logRotate rename`` behavior. With "
"``rename``, :binary:`~bin.mongod` or :binary:`~bin.mongos` renames the "
"current log file by appending a UTC timestamp to the filename, opens a "
"new log file, closes the old log file, and sends all new log entries to "
"the new log file."
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:8
msgid "Start a :binary:`~bin.mongod` instance."
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:15
#: ../source/includes/steps/log-rotate-rename.rst:33
msgid ""
"You can also explicitly specify :option:`logRotate --rename <mongod "
"--logRotate>`."
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:26
msgid "Step 1: Start a :binary:`~bin.mongod` instance."
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:44
#: ../source/includes/steps/log-rotate-reopen.rst:44
msgid "List the log files"
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:46
#: ../source/includes/steps/log-rotate-rename.rst:66
#: ../source/includes/steps/log-rotate-reopen.rst:46
#: ../source/includes/steps/log-rotate-reopen.rst:66
msgid "In a separate terminal, list the matching files:"
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:54
#: ../source/includes/steps/log-rotate-rename.rst:74
#: ../source/includes/steps/log-rotate-reopen.rst:54
#: ../source/includes/steps/log-rotate-reopen.rst:74
msgid "The results should include one log file, ``server1.log``."
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:64
#: ../source/includes/steps/log-rotate-reopen.rst:64
msgid "Step 2: List the log files"
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:84
#: ../source/includes/steps/log-rotate-reopen.rst:84
msgid "Rotate the log file."
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:86
#: ../source/includes/steps/log-rotate-rename.rst:104
#: ../source/includes/steps/log-rotate-reopen.rst:86
#: ../source/includes/steps/log-rotate-reopen.rst:108
msgid ""
"Rotate the log file by issuing the :dbcommand:`logRotate` command from "
"the ``admin`` database in a :binary:`~bin.mongo` shell:"
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:102
#: ../source/includes/steps/log-rotate-reopen.rst:106
msgid "Step 3: Rotate the log file."
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:120
msgid "View the new log files"
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:122
#: ../source/includes/steps/log-rotate-rename.rst:150
msgid "List the new log files to view the newly-created log:"
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:130
#: ../source/includes/steps/log-rotate-rename.rst:158
msgid ""
"There should be two log files listed: ``server1.log``, which is the log "
"file that :binary:`~bin.mongod` or :binary:`~bin.mongos` made when it "
"reopened  the log file, and ``server1.log.<timestamp>``, the renamed "
"original log file."
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:135
#: ../source/includes/steps/log-rotate-rename.rst:163
msgid ""
"Rotating log files does not modify the \"old\" rotated log files. When "
"you rotate a log, you rename the ``server1.log`` file to include the "
"timestamp, and a new, empty ``server1.log`` file receives all new log "
"input."
msgstr ""

#: ../source/includes/steps/log-rotate-rename.rst:148
msgid "Step 4: View the new log files"
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:59
msgid "Log Rotation with ``--logRotate reopen``"
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:63
msgid ""
"Log rotation with ``--logRotate reopen`` closes and opens the log file "
"following the typical Linux/Unix log rotate behavior."
msgstr ""

#: ../source/includes/steps/log-rotate-reopen.rst:8
msgid ""
"Start a :binary:`~bin.mongod` instance, specifying the ``reopen`` "
":option:`--logRotate <mongod --logRotate>` behavior."
msgstr ""

#: ../source/includes/steps/log-rotate-reopen.rst:15
#: ../source/includes/steps/log-rotate-reopen.rst:33
msgid ""
"You must use the :option:`--logappend <mongod --logappend>` option with "
":option:`--logRotate reopen <mongod --logRotate>`."
msgstr ""

#: ../source/includes/steps/log-rotate-reopen.rst:26
msgid ""
"Step 1: Start a :binary:`~bin.mongod` instance, specifying the ``reopen``"
" :option:`--logRotate <mongod --logRotate>` behavior."
msgstr ""

#: ../source/includes/steps/log-rotate-reopen.rst:95
#: ../source/includes/steps/log-rotate-reopen.rst:117
msgid ""
"You should rename the log file using an external process, following the "
"typical Linux/Unix log rotate behavior."
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:69
msgid "Syslog Log Rotation"
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:71
msgid ""
"With syslog log rotation, :binary:`~bin.mongod` sends log data to the "
"syslog rather than writing it to a file."
msgstr ""

#: ../source/includes/steps/log-rotate-syslog.rst:8
msgid ""
"Start a :binary:`~bin.mongod` instance with the :option:`--syslog <mongod"
" --syslog>` option"
msgstr ""

#: ../source/includes/steps/log-rotate-syslog.rst:15
#: ../source/includes/steps/log-rotate-syslog.rst:38
msgid ""
"Do not include :option:`--logpath <mongod --logpath>`. Since "
":option:`--syslog <mongod --syslog>` tells :binary:`~bin.mongod` to send "
"log data to the syslog, specifying a :option:`--logpath <mongod "
"--logpath>` will causes an error."
msgstr ""

#: ../source/includes/steps/log-rotate-syslog.rst:19
#: ../source/includes/steps/log-rotate-syslog.rst:42
msgid ""
"To specify the facility level used when logging messages to the syslog, "
"use the :option:`--syslogFacility <mongod --syslogFacility>` option or "
":setting:`systemLog.syslogFacility` configuration setting."
msgstr ""

#: ../source/includes/steps/log-rotate-syslog.rst:31
msgid ""
"Step 1: Start a :binary:`~bin.mongod` instance with the :option:`--syslog"
" <mongod --syslog>` option"
msgstr ""

#: ../source/includes/steps/log-rotate-syslog.rst:54
msgid "Rotate the log."
msgstr ""

#: ../source/includes/steps/log-rotate-syslog.rst:56
#: ../source/includes/steps/log-rotate-syslog.rst:69
msgid ""
"Store and rotate the log output using your systems default log rotation "
"mechanism."
msgstr ""

#: ../source/includes/steps/log-rotate-syslog.rst:67
msgid "Step 2: Rotate the log."
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:77
msgid "Forcing a Log Rotation with ``SIGUSR1``"
msgstr ""

#: ../source/tutorial/rotate-log-files.txt:79
msgid ""
"For Linux and Unix-based systems, you can use the ``SIGUSR1`` signal to "
"rotate the logs for a single process, as in the following:"
msgstr ""

#~ msgid ""
#~ "When used with the :option:`--logpath` "
#~ "option or :setting:`systemLog.path` setting, "
#~ ":program:`mongod` and :program:`mongos` instances"
#~ " report a live account of all "
#~ "activity and operations to a log "
#~ "file. When reporting activity data to"
#~ " a log file, by default, MongoDB "
#~ "only rotates logs in response to "
#~ "the :dbcommand:`logRotate` command, or when"
#~ " the :program:`mongod` or :program:`mongos` "
#~ "process receives a ``SIGUSR1`` signal "
#~ "from the operating system."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB's standard log rotation approach "
#~ "archives the current log file and "
#~ "starts a new one. To do this, "
#~ "the :program:`mongod` or :program:`mongos` "
#~ "instance renames the current log file"
#~ " by appending a UTC timestamp to "
#~ "the filename, in :term:`ISODate` format. "
#~ "It then opens a new log file, "
#~ "closes the old log file, and sends"
#~ " all new log entries to the new"
#~ " log file."
#~ msgstr ""

#~ msgid ""
#~ "You can also configure MongoDB to "
#~ "support the Linux/Unix logrotate utility "
#~ "by setting :setting:`systemLog.logRotate` or "
#~ ":option:`--logRotate` to ``reopen``. With "
#~ "``reopen``, :program:`mongod` or :program:`mongos`"
#~ " closes the log file, and then "
#~ "reopens a log file with the same"
#~ " name, expecting that another process "
#~ "renamed the file prior to rotation."
#~ msgstr ""

#~ msgid ""
#~ "Finally, you can configure :program:`mongod`"
#~ " to send log data to the "
#~ "``syslog``. using the :option:`--syslog` "
#~ "option. In this case, you can take"
#~ " advantage of alternate logrotation tools."
#~ msgstr ""

#~ msgid ""
#~ "By default, MongoDB uses the "
#~ ":option:`--logRotate rename <--logRotate>` behavior."
#~ " With ``rename``, :program:`mongod` or "
#~ ":program:`mongos` renames the current log "
#~ "file by appending a UTC timestamp "
#~ "to the filename, opens a new log"
#~ " file, closes the old log file, "
#~ "and sends all new log entries to"
#~ " the new log file."
#~ msgstr ""

#~ msgid ""
#~ "Log rotation with :option:`--logRotate reopen"
#~ " <--logRotate>` closes and opens the "
#~ "log file following the typical "
#~ "Linux/Unix log rotate behavior."
#~ msgstr ""

#~ msgid ""
#~ "With syslog log rotation, :program:`mongod`"
#~ " sends log data to the syslog "
#~ "rather than writing it to a file."
#~ msgstr ""

#~ msgid "On this page"
#~ msgstr ""

