===============
cleanupOrphaned
===============

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: cleanupOrphaned

   .. versionadded:: 2.5.3

   :dbcommand:`cleanupOrphaned` is an admin command that incrementally
   deletes :term:`orphaned data <orphaned document>`, or those
   documents on a shard that have shard key values that do not
   fall within the ranges of the :term:`chunks <chunk>` owned by
   that shard. Each delete operation uses a :term:`write concern`
   of ``w: 1`` by default, or ``w: 2`` when ``secondaryThrottle`` is
   ``true``. After all delete operations, :dbcommand:`cleanupOrphaned`
   has a write concern of ``w: majority`` to ensure that deletes
   propagate to all members of the replica set.

   :dbcommand:`cleanupOrphaned` has the following prototype form:

   .. code-block:: javascript

      db.runCommand( {
         cleanupOrphaned: "<database>.<collection>",
         "startingAtKey": <minimumShardKeyValue>,
         "secondaryThrottle": <boolean>
      } )

   :dbcommand:`cleanupOrphaned` has the following fields:

   .. include:: /reference/command/cleanupOrphaned-field.rst

Required Access
---------------

On systems running with :setting:`auth`, you must have
:authrole:`clusterAdmin` privileges to run
:dbcommand:`cleanupOrphaned`.

Behavior
--------

You do not need to disable the balancer before running
:dbcommand:`cleanupOrphaned`.

Run :dbcommand:`cleanupOrphaned` on the ``admin`` database of the
:program:`mongod` that is the primary replica set member of the
shard to be cleaned. Do not run :dbcommand:`cleanupOrphaned` on a
:program:`mongos` instance.

Output
------

Return Document
~~~~~~~~~~~~~~~

Each :dbcommand:`cleanupOrphaned` command returns a document containing
a subset of the following fields:

.. data:: cleanupOrphaned.ok

   Equal to ``1`` on success.

   A value of ``1`` indicates that :dbcommand:`cleanupOrphaned` scanned
   the specified shard key range, deleted any orphaned documents
   found in that range, and confirmed that all deletes replicated to a
   majority of the members of that shard's replica set. If confirmation
   does not arrive within 1 hour, :dbcommand:`cleanupOrphaned`
   times out.

   A value of ``0`` could indicate either of two cases:

   - :dbcommand:`cleanupOrphaned` found orphaned documents on the
     shard but could not delete them.

   - :dbcommand:`cleanupOrphaned` found and deleted orphaned
     documents, but could not confirm replication before the 1
     hour timeout. In this case, replication does occur, but only
     after :dbcommand:`cleanupOrphaned` returns.

.. data:: cleanupOrphaned.startingAtKey

   :dbcommand:`cleanupOrphaned` examines documents from a single
   contiguous range of shard keys that do not correspond to any chunks
   on a given shard, and deletes all documents found within that range.

   :dbcommand:`cleanupOrphaned` selects the next range containing
   the :data:`~cleanupOrphaned.startingAtKey` that is not in the range
   of any chunk on the shard. :data:`~cleanupOrphaned.startingAtKey`
   defaults to ``MinKey``.

.. data:: cleanupOrphaned.stoppedAtKey

   The upper bound of the cleaned range of shard keys. Corresponds to
   the lower bound of the next chunk on the shard. It does not indicate
   that :dbcommand:`cleanupOrphaned` found or deleted any documents.

Log Files
~~~~~~~~~

The :dbcommand:`cleanupOrphaned` command prints the number of deleted
documents to the :program:`mongod` log. Relevant output lines resemble
the following:

.. code-block:: none

   m30000| 2013-10-31T15:17:28.972-0400 [conn1] Deleter starting delete for: foo.bar from { _id: -35.0 } -> { _id: -10.0 }, with opId: 128
   m30000| 2013-10-31T15:17:28.972-0400 [conn1] rangeDeleter deleted 0 documents for foo.bar from { _id: -35.0 } -> { _id: -10.0 } { "stoppedAtKey": { "_id": -10 }, "ok": 1 }

.. _cleanuporphaned-examples:

Examples
--------

Remove Orphaned Ranges from a Shard
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the output of the :dbcommand:`cleanupOrphaned` in a loop to
remove orphaned documents from all sharded key index ranges on a shard:

Run the following code in the :program:`mongo` shell:

.. code-block:: javascript

   use admin
   var nextKey = { };
   while (
            nextKey = db.runCommand( { cleanupOrphaned: "test.user",
                                       startingFromKey: nextKey } ).stoppedAtKey
         ) { printjson(nextKey); }

Specify a Different Initial Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For a sharded collection ``info`` in the ``test`` database, a shard
owns a single chunk with the following range:

.. code-block:: javascript
   
   { x: 1 } => { x: 10 }

The shard also contains documents whose shard keys fall in two ranges
*not* owned by the shard:

.. code-block:: javascript

   { x: MinKey } => { x: 1 } 
   { x: 10 } => { x: MaxKey } 

From the ``admin`` database, run the :dbcommand:`cleanupOrphaned`
command to clean up the orphaned documents.

To clean up the range ``{ x: MinKey } => { x: 1 }``, use one of
the following commands:

.. code-block:: javascript

   use admin
   db.runCommand( {
      "cleanupOrphaned": "test.info",
      "startingAtKey": { x: 0 },
      "secondaryThrottle": true
   } )

.. code-block:: javascript

   use admin
   db.runCommand( {
      "cleanupOrphaned": "test.info",
      "secondaryThrottle": true
   } )

To clean up the range ``{ x: 10 } => { x: MaxKey }``,  use the following
command:

.. code-block:: javascript

   use admin
   db.runCommand( {
      "cleanupOrphaned": "test.info",
      "startingAtKey": { x: 10 },
      "secondaryThrottle": true
   } )

.. admin-only

