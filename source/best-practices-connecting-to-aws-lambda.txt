=========================================
Best Practices Connecting from AWS Lambda
=========================================

.. default-domain:: mongodb

.. meta::
   :keywords: aws lambda connection

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB recommends the following best practices to optimize connection times
between `AWS Lambda <https://docs.aws.amazon.com/lambda/latest/dg/welcome.html>`_
and |service|:

* Define the MongoDB client connection to the MongoDB server outside
  the `AWS Lambda handler function <https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-handler.html>`_.

  This makes the database connection available between invocations
  of the AWS Lambda function for the duration of the lifecycle of
  the function.

* Set the ``callbackWaitsForEmptyEventLoop`` on the AWS `Context <https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html#nodejs-prog-model-context-properties>`_
  object to ``false``.

  By default, the callback waits until the runtime event loop is empty
  before freezing the process and returning the results to the caller.
  Setting this property to false requests that AWS Lambda freeze the
  process soon after the callback is invoked, even if there are events
  in the event loop. AWS Lambda will freeze the process, any state
  data, and the events in the event loop. Any remaining events in the
  event loop are processed when the Lambda function is next invoked, if
  AWS Lambda chooses to use the frozen process.

* Set up a :doc:`Network Peering Connection </security-vpc-peering>` between
  your |service| cluster and your |aws| Lambda function.

  .. note::

     If you do not set up a Network Peering connection, you must
     :doc:`add </security/ip-access-list>` 0.0.0.0/0 to the access list
     for your |service| cluster. In addition, you will be charged for
     communication between |service| and |aws|.

Consideration
-------------

Lambda has made major strides such that even cold starts where the
Lambda function is invoked for the first time today typically happen in
under 1 second. Subsequent connections will be significantly faster for
the duration of the lifecycle of the Lambda function.

Example
-------

The following Node.js example demonstrates these best practices:

.. First line of code renders off to the left unless it is pushed to the right.  Caused by quotation marks?

.. literalinclude:: includes/connect-aws-lambda.js
   :emphasize-lines: 7-20, 34

For more information, see `Optimizing AWS Lambda performance with MongoDB Atlas and Node.js <https://www.mongodb.com/blog/post/optimizing-aws-lambda-performance-with-mongodb-atlas-and-nodejs>`_.
