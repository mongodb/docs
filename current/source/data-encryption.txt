.. _arch-center-data-encryption:

========================================
Guidance for {+service+} Data Encryption 
========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

|service| offers several encryption features to protect data 
while in transit, at rest, and in use to safeguard data through 
its full lifecycle.

Features for {+service+} Data Encryption
----------------------------------------

Encryption in Transit
~~~~~~~~~~~~~~~~~~~~~

Encryption in transit secures data during transmission between 
clients and servers, ensuring that your data cannot be inspected 
while in motion. In |service|, all network traffic to {+clusters+} is 
protected by Transport Layer Security (TLS), which is enabled by default 
and cannot be disabled. Data transmitted to and between nodes is encrypted 
in transit using TLS, ensuring secure communication throughout.

You can select which TLS version to use in |service|. 
TLS 1.2 and a minimum key length of 128 bits are the recommended default settings.
All encryption in transit is supported by the 
OpenSSL :abbr:`FIPS (Federal Information Processing Standards)` Object Module.

.. figure:: /includes/images/encryption-in-transit.svg
   :figwidth: 750px
   :alt: An image showing encryption in transit with TLS between client applications and MongoDB Atlas.

.. _arch-center-encryption-at-rest:

Encryption at Rest
~~~~~~~~~~~~~~~~~~

Encryption at rest ensures that all data on disk is encrypted
and only visible once decrypted by an authorized process or
application. In |service|, customer data is automatically encrypted 
at rest using AES-256. This process utilizes your cloud provider's 
disk encryption, with the provider managing the encryption keys. 
This process cannot be disabled.

By default, Encryption at Rest is volume-level encryption.

Additionally, you can enable database-level encryption by bringing your own
customer-managed key (CMK) with a key management service (KMS) 
such as AWS KMS, Google Cloud KMS, or Azure Key Vault. This feature 
provides file-level encryption and is equivalent to Transparent Data Encryption (TDE), 
meeting enterprise TDE requirements. Encryption with customer key management 
adds another layer of security for additional confidentiality and data segmentation.

To learn more, see :ref:`security-kms-encryption`.

.. figure:: /includes/images/encryption-with-cmk.svg
   :figwidth: 750px
   :alt: An image showing encryption at rest with an additional customer-managed key.

Encryption in Use
~~~~~~~~~~~~~~~~~

Encryption in use secures data while it's being processed.
MongoDB has two features for encryption in use to meet your data protection 
needs: Client-Side Field-Level Encryption and Queryable Encryption.

Client-Side Field-Level Encryption
``````````````````````````````````

:ref:`Client-Side Field-Level Encryption <manual-csfle-feature>` (CSFLE) 
is an in-use encryption capability that enables a client application to encrypt 
sensitive data before storing it in the MongoDB database. Sensitive data is 
transparently encrypted, remains encrypted throughout its lifecycle, and is 
only decrypted on the client side.

You can selectively encrypt individual fields within a document, 
multiple fields within the document, or the entire document. You can optionally
secure each field with its own key and decrypt them seamlessly 
on the client by using a MongoDB driver. CSFLE uses AES-256 in 
authenticated CBC mode to encrypt data.

Additionally, you can select :manual:`randomized encryption 
</core/csfle/fundamentals/encryption-algorithms/#randomized-encryption>`, 
which is not queryable, but might be required for certain security requirements.

The following diagram demonstrates a CSFLE workflow where user records 
are stored in a MongoDB database and queried by the client. The user's 
social security number (SSN) is encrypted before being stored in the 
database. When the application submits a basic equality query on the field, 
the MongoDB driver uses the key to encrypt the query on the client side and
sends the encrypted query to the server. The server returns the encrypted 
results to the client, which then decrypts the results before returning them 
to the authenticated client as readable plaintext.

CSFLE supports all major cloud and on-premises key management services. 

.. figure:: /includes/images/csfle-encryption.svg
   :figwidth: 750px
   :alt: An image showing an example client-side field-level encryption (CSFLE) workflow.

Queryable Encryption
````````````````````

:ref:`Queryable Encryption <qe-manual-feature-qe>` helps organizations 
protect sensitive data when it is queried. Like CSFLE, it allows applications 
to encrypt your data on the client side before storing it in the MongoDB database. 
It also enables applications to perform expressive queries such as equality queries 
directly on the encrypted data by using an encrypted search algorithm. Queryable Encryption ensures 
protection for sensitive information without sacrificing the ability to perform queries 
on it. Queryable Encryption always uses non-deterministic encryption.

To learn about the algorithms used in Queryable Encryption, see 
:website:`Queryable Encryption White Paper </resources/products/capabilities/queryable-encryption-technical-paper>`.

The following diagram demonstrates a Queryable Encryption workflow where 
user records are stored in a MongoDB database and queried by the client. 
The user's date of birth (DOB) is encrypted before being stored in the 
database. When the application submits an expressive range query on the field, 
the MongoDB driver uses the key to encrypt the query and passes a cryptographic token 
with it to the MongoDB server. The server uses the encrypted search algorithm 
to process the query without knowing the actual data. Finally, the driver uses the 
key to decrypt the query results and returns them to the authenticated 
client as readable plaintext.

.. figure:: /includes/images/queryable-encryption.svg
   :figwidth: 750px
   :alt: An image showing an example Queryable Encryption workflow.

.. _arch-center-data-encryption-recs:

Recommendations for {+service+} Data Encryption
-----------------------------------------------

Consider the following security recommendations when 
provisioning your {+clusters+}.

.. _arch-center-cmk:

Encryption with Customer Key Management
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/encryption-with-cmk-recommendations.rst

Use the following methods to enable encryption with customer key management:

- :atlas:`{+atlas-ui+} </security-kms-encryption>`
- :oas-atlas-tag:`{+atlas-admin-api+} </Encryption-at-Rest-using-Customer-Key-Management>`
- `Terraform <https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/resources/encryption_at_rest>`__

To learn how to configure encryption with customer key management
when provisioning a new |service| organization, project, and {+cluster+},
see :ref:`arch-center-create-hierarchy-example`.

Data Classification
~~~~~~~~~~~~~~~~~~~

During the provisioning process, we also recommend assessing the 
sensitivity of certain fields in your data and classifying
them to determine which data requires encryption and what global 
restrictions to apply to these groups. As a general guideline, we recommend
that you apply Queryable Encryption on all sensitive fields, in addition 
to following :manual:`data modeling </data-modeling/>` best practices.

Consider the following data classification levels as a starting point:

- **Public Data**: Data that represents little to no
  risk to the company if unauthorized disclosure, alteration, 
  or destruction of data occurs. While confidentiality is 
  less of a concern, you should still apply authorization controls to 
  prevent unauthorized modification or destruction of public data.
  
  Examples: Products, Brochures, Training Information

- **Private Data**: Data that represents a moderate
  risk to the company if unauthorized disclosure, alteration, 
  or destruction of data occurs. By default, all 
  institutional data that is not explicitly classified as restricted or 
  public data should be treated as private data. 
  Apply CSFLE or Queryable Encryption on any fields that 
  carry private data such as {+PII+}.
  
  Examples: Customer Information, Contracts, Product Costs

- **Restricted Data**: Data that represents significant
  risk to the company if unauthorized disclosure, alteration, 
  or destruction of data occurs. Apply the highest 
  level of security controls to restricted data, including
  CSFLE or Queryable Encryption on all fields and
  encryption with customer key management for additional security.
  
  Examples: Revenue information, Payroll, Security Risks

Automation Examples: {+service+} Data Encryption
------------------------------------------------

.. include:: /includes/complete-examples.rst

The following examples configure encryption with customer key management
using |service| :ref:`tools for automation <arch-center-automation>`.

Before you configure encryption with customer key management, you must
create your organizations, projects, and {+clusters+}. To learn more,
see :ref:`arch-center-create-hierarchy-example`. 

Configure Encryption with Customer Key Management
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Dev and Test Environments
      :tabid: devtest

      For your development and testing environments, consider skipping encryption 
      with customer key management to save costs, unless you're in a highly-regulated industry
      or storing sensitive data. To learn more, see :ref:`arch-center-orgs-projects-clusters-recs`.

   .. tab:: Staging and Prod Environments
      :tabid: stagingprod

      For your staging and production environments, we
      recommend that you enable encryption with customer key management when you provision your {+clusters+}.
      To learn more, see :ref:`arch-center-orgs-projects-clusters-recs`.

To enable encryption with customer key management with Terraform, 
create the following resources. Change the IDs and names to use your values:

.. tabs::
   
   .. tab:: AWS
      :tabid: aws

      .. tip:: 

         For a complete configuration example, see
         :github:`Atlas Terraform Provider Example <mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest/aws/atlas-cluster>`.

         Alternatively, to simplify the configuration process, you can use the
         `encryption at rest Terraform module <https://registry.terraform.io/modules/terraform-mongodbatlas-modules/encryption-at-rest/mongodbatlas/latest>`__.

      .. include:: /includes/examples/tf-example-aws-kms.rst
   
   .. tab:: Azure
      :tabid: azure

      .. tip:: 

         For a complete configuration example, see
         :github:`Atlas Terraform Provider Example <mongodb/terraform-provider-mongodbatlas/tree/master/examples/mongodbatlas_encryption_at_rest/azure>`.

      .. include:: /includes/examples/tf-example-azure-key-vault.rst
   
   .. tab:: GCP
      :tabid: gcp

      .. include:: /includes/examples/tf-example-gcp-kms.rst

For more configuration options and info about this example, 
see `Terraform documentation 
<https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/resources/encryption_at_rest>`__.
