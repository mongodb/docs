.. _mongorestore:

================
``mongorestore``
================

.. default-domain:: mongodb
.. |tool-binary| replace:: mongorestore

Synopsis
--------

The :program:`mongorestore` program writes data from a binary database
dump created by :program:`mongodump` to a MongoDB
instance. :program:`mongorestore` can create a new database or add
data to an existing database.

:program:`mongorestore` can write data to either `mongod` or :program:`mongos`
instances, in addition to writing directly to MongoDB data files
without an active :program:`mongod`.

Behavior
--------

If you restore to an existing database, :program:`mongorestore` will
only insert into the existing database, and does not perform updates
of any kind. If existing documents have the same value ``_id`` field
in the target database and collection,
:program:`mongorestore` will *not* overwrite those documents.

Remember the following properties of :program:`mongorestore` behavior:

- :program:`mongorestore` recreates indexes recorded by
  :program:`mongodump`.

- all operations are inserts, not updates.

- :program:`mongorestore` does not wait for a response from a
  :program:`mongod` to ensure that the MongoDB process has received or
  recorded the operation.

  The :program:`mongod` will record any errors to its log that occur
  during a restore operation, but :program:`mongorestore` will not
  receive errors.

.. include:: /includes/warning-mongodump-compatibility-2.2.rst

Required Access to Restore User Data
------------------------------------

.. include:: /includes/access-mongorestore.rst

Options
-------

.. binary:: mongorestore

.. program:: mongorestore

.. option:: --help

   Returns a basic help and usage text.

.. option:: --verbose, -v

   Increases the amount of internal reporting returned on the command
   line. Increase the verbosity with the ``-v`` form by including
   the option multiple times (e.g. ``-vvvvv``).

.. option:: --version

   Returns the version of the :program:`mongorestore` tool.

.. option:: --host <hostname><:port>

   Specifies a resolvable hostname for the :program:`mongod` to which
   you want to restore the database. By default
   :program:`mongorestore` will attempt to connect to a MongoDB
   process running on the localhost port number ``27017``. For an
   example of :option:`--host`, see :ref:`backup-restore-dump`.

   Optionally, specify a port number to connect a MongoDB instance
   running on a port other than ``27017``.

   .. include:: /includes/fact-multiple-hosts.rst

.. option:: --port <port>

   Specifies the port number, if the MongoDB instance is not running
   on the standard port (i.e. ``27017``). You may also specify a port
   number using the :option:`--host` command. For
   an example of :option:`--port`, see :ref:`backup-restore-dump`.

.. option:: --ipv6

   Enables IPv6 support that allows :program:`mongorestore` to connect
   to the MongoDB instance using an IPv6 network. All MongoDB programs
   and processes, including :program:`mongorestore`, disable IPv6
   support by default.

.. include:: /includes/manpage-options-ssl-tools.rst

.. option:: --username <username>, -u <username>

   Specifies a username to authenticate to the MongoDB instance, if
   your database requires authentication. Use in conjunction with the
   :option:`--password` option to supply a
   password. For an example of :option:`--username`, see
   :ref:`backup-restore-dump`.

.. option:: --password <password>, -p <password>

   Specifies a password to authenticate to the MongoDB instance. Use
   in conjunction with the :option:`--username` option to
   supply a username. For an example of :option:`--password`, see
   :ref:`backup-restore-dump`.

   If you specify a :option:`--username` and do not pass an argument
   to :option:`--password`, :program:`mongorestore` will prompt for a
   password interactively. If you do not specify a password on the
   command line, :option:`--password` must be the last argument
   specified.

.. |binary-name| replace:: :program:`mongorestore`
.. include:: /includes/manpage-options-auth.rst

.. option:: --dbpath <path>

   Specifies the directory of the MongoDB data files. If used, the
   :option:`--dbpath` option enables :program:`mongorestore` to attach
   directly to local data files and insert the data without the
   :program:`mongod`. To run with :option:`--dbpath`,
   :program:`mongorestore` needs to lock access to the data directory:
   as a result, no :program:`mongod` can access the same path while the
   process runs. For an example of :option:`--dbpath`, see
   :ref:`backup-restore-dbpath`.

.. option:: --directoryperdb

   Use the :option:`--directoryperdb` in conjunction with the
   corresponding option to :program:`mongod`, which allows
   :program:`mongorestore` to import data into MongoDB instances that
   have every database's files saved in discrete directories on the
   disk. This option is only relevant when specifying the
   :option:`--dbpath` option.

.. option:: --journal

   Allows :program:`mongorestore` to write to the durability
   :term:`journal` to ensure that the data files will remain
   valid during the write process. This option is only
   relevant when specifying the :option:`--dbpath` option. For an
   example of :option:`--journal`, see :ref:`backup-restore-dbpath`.

.. option:: --db <db>, -d <db>

   Use the :option:`--db` option to specify a database for
   :program:`mongorestore` to restore data *into*. If the database
   doesn't exist, :program:`mongorestore` will create the specified
   database.  If you do not specify a ``<db>``,
   :program:`mongorestore` creates new databases that correspond to
   the databases where data originated and data may be
   overwritten. Use this option to restore data into a MongoDB
   instance that already has data.

   :option:`--db` does *not* control which :term:`BSON` files
   :program:`mongorestore` restores. You must use the
   :program:`mongorestore` :ref:`path option
   <mongorestore-path-option>` to limit that restored data.

.. option:: --collection <collection>, -c <collection>

   Use the :option:`--collection` option to specify a single collection
   for :program:`mongorestore` to restore. :program:`mongorestore` will
   restore only that single collection.

   If you do not specify :option:`--collection`, :program:`mongorestore`
   takes the collection name from the input filename. MongoDB omits the
   extension of the file from the collection name, if the input file has
   an extension.

.. option:: --objcheck

   Forces the :program:`mongorestore` to validate all requests from
   clients upon receipt to ensure that clients never insert invalid
   documents into the database. For objects with a high degree of
   sub-document nesting, :option:`--objcheck` can have a small impact
   on performance. You can set :option:`--noobjcheck` to disable
   object checking at run-time.

   .. versionchanged:: 2.4
      MongoDB enables :option:`--objcheck` by default, to prevent any
      client from inserting malformed or invalid BSON into a MongoDB
      database.

.. option:: --noobjcheck

   .. versionadded:: 2.4

   Disables the default document validation that MongoDB performs on all
   incoming BSON documents.

.. option:: --filter '<JSON>'

   Limits the documents that :program:`mongorestore` imports to only
   those documents that match the JSON document specified as
   ``'<JSON>'``. Be sure to include the document in single quotes to
   avoid interaction with your system's shell environment. For an
   example of :option:`--filter`, see :ref:`backup-restore-filter`.

.. option:: --drop

   Modifies the restoration procedure to drop every collection from
   the target database before restoring the collection from the dumped
   backup.

.. option:: --oplogReplay

   Replays the :term:`oplog` after restoring the dump to ensure that the current
   state of the database reflects the point-in-time backup captured with
   the ":option:`mongodump --oplog`" command. For an example of
   :option:`--oplogReplay`, see :ref:`backup-restore-oplogreplay`.

.. option:: --keepIndexVersion

   Prevents :program:`mongorestore` from upgrading the index to the latest
   version during the restoration process.

.. option:: --w <number of replicas per write>

   .. versionadded:: 2.2

   Specifies the :term:`write concern` for each write operation that
   :program:`mongorestore` writes to the target database. By default,
   :program:`mongorestore` does not wait for a response for
   :ref:`write acknowledgment <write-concern-acknowledged>`.

.. option:: --noOptionsRestore

   .. versionadded:: 2.2

   Prevents :program:`mongorestore` from setting the collection
   options, such as those specified by the :dbcommand:`collMod`
   :term:`database command`, on restored collections.

.. option:: --noIndexRestore

   .. versionadded:: 2.2

   Prevents :program:`mongorestore` from restoring and building
   indexes as specified in the corresponding :program:`mongodump`
   output.

.. option:: --oplogLimit <timestamp>

   .. versionadded:: 2.2

   Prevents :program:`mongorestore` from applying :term:`oplog` entries newer
   than the ``<timestamp>``. Specify ``<timestamp>`` values in the
   form of ``<time_t>:<ordinal>``, where ``<time_t>`` is the seconds
   since the UNIX epoch, and ``<ordinal>`` represents a counter of
   operations in the oplog that occurred in the specified second.

   You must use :option:`--oplogLimit` in conjunction with the
   :option:`--oplogReplay` option.

.. _mongorestore-path-option:

.. option::  <path>

   The final argument of the :program:`mongorestore` command is a
   directory path. This argument specifies the location of the
   database dump from which to restore.

Usage
-----

See :doc:`/tutorial/backup-and-restore-with-binary-database-dumps`
for a larger overview of :program:`mongorestore`
usage. Also see the :doc:`mongodump` document for an overview of the
:program:`mongodump`, which provides the related inverse
functionality.

Consider the following example:

.. code-block:: sh

   mongorestore --collection people --db accounts dump/accounts/people.bson

Here, :program:`mongorestore` reads the database dump in the ``dump/``
sub-directory of the current directory, and restores *only* the
documents in the collection named ``people`` from the database named
``accounts``. :program:`mongorestore` restores data to the instance
running on the localhost interface on port ``27017``.

In the next example, :program:`mongorestore` restores a backup of the
database instance located in ``dump`` to a database instance stored
in the ``/srv/mongodb`` on the local machine. This requires that there
are no active :program:`mongod` instances attached to ``/srv/mongodb``
data directory.

.. code-block:: sh

   mongorestore --dbpath /srv/mongodb

In the final example, :program:`mongorestore` restores a database
dump located at ``/opt/backup/mongodump-2011-10-24``, to a database
running on port ``37017`` on the host
``mongodb1.example.net``. The :program:`mongorestore` command authenticates to
the MongoDB instance using the username ``user`` and the
password ``pass``, as follows:

.. code-block:: sh

   mongorestore --host mongodb1.example.net --port 37017 --username user --password pass /opt/backup/mongodump-2011-10-24
