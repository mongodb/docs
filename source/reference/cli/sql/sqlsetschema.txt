.. _sqlsetschema-cmd:

================
``sqlSetSchema``
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/extracts/fact-sql-beta-message.rst

The ``sqlSetSchema`` command sets or deletes the schema for a collection 
or view. The command uses the provided schema to create the relational 
schema. The command does not validate the schema provided with the command 
against the data in the collection.

.. _sqlsetschema-syntax:

Syntax 
------

.. tabs:: 

   .. tab:: Set Schema 
      :tabid: setschema

      .. code-block:: sh 

         db.runCommand({sqlSetSchema: "<collection-name>|<view-name>", schema: {"version": 1, "jsonSchema": <jsonSchema>})

   .. tab:: Delete Schema 
      :tabid: deleteschema

      .. code-block:: sh 

         db.runCommand({sqlSetSchema: "<collection-name>|<view-name>", schema: {} })

.. _sqlsetschema-params:

Parameters 
----------

.. list-table:: 
   :header-rows: 1
   :widths: 20 10 60 10

   * - Parameter
     - Type
     - Description
     - Necessity

   * - ``<collection-name>``
     - string 
     - Name of the collection for which to set the schema. Either 
       the collection name or view name is required.
     - Conditional

   * - ``<view-name>``
     - string 
     - Name of the view for which to set the schema. Either the 
       view name or collection name is required.
     - Conditional

   * - ``schema``
     - document
     - The format version of the schema and the |json| schema to set 
       the schema for the collection or view or an empty document to 
       remove the schema for the collection or view. 

       .. note:: 

          You can provide a single document or an array of documents 
          in the ``items`` field. When you retrieve the schema, 
          ``items`` shows the form that you used to set the schema.

     - Required

.. _sqlsetschema-output:

Output 
------

The command returns the following output if the command succeeds.

.. code-block:: sh 
   :copyable: false

   { "ok" : 1 }

You can verify that the command succeeded by running the 
``sqlGetSchema`` command. The ``sqlGetSchema`` command 
``metadata.description`` should contain the following value: 

.. code-block:: json 
   :copyable: false 

   "set using sqlSetSchema"

.. _sqlsetschema-egs:

Examples 
--------

.. include:: /includes/command-example-collection.rst

The examples below use the ``sqlSetSchema`` command to set 
and remove schema for the above collection.

Set Schema Example 
~~~~~~~~~~~~~~~~~~

The following ``sqlSetSchema`` command sets the schema for 
the ``egData`` collection.

.. code-block:: sh 

   db.runCommand({sqlSetSchema : "egData", "schema" : { "version" : NumberLong(1), "jsonSchema" : { "bsonType" : [ "object" ], "properties" : { "a" : { "bsonType" : [ "object" ], "properties" : { "b" : { "bsonType" : [ "object", "array" ], "properties" : { "c" : { "bsonType" : [ "array", "string", "object", "null" ], "properties" : { "d" : { "bsonType" : [ "int" ] } }, "items" : { "bsonType" : [ "int" ] } } }, "items" : { "bsonType" : [ "int" ] } } } }, "s" : { "bsonType" : [ "int", "object" ], "properties" : { "b" : { "bsonType" : [ "object" ], "properties" : { "c" : { "bsonType" : [ "object" ], "properties" : { "d" : { "bsonType" : [ "array" ], "items" : { "bsonType" : [ "string" ] } } } } } } } } } } }})

The previous command returns the following output.

.. code-block:: json 
   :copyable: false 

   { "ok" : 1 }

Delete Schema Example 
~~~~~~~~~~~~~~~~~~~~~

The following ``sqlSetSchema`` command removes the schema 
for the ``egData`` collection.

.. code-block:: sh 

   db.runCommand({sqlSetSchema: "egData", schema: {} })

The previous command returns the following output.

.. code-block:: json 
   :copyable: false 

   { "ok" : 1 }

