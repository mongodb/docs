======
insert
======

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: insert

   The :dbcommand:`insert` command inserts one or more documents and returns a
   document containing the status of all inserts.

   The command has the following syntax:

   .. code-block:: javascript

      {
         insert: <collection>,
         documents: [ <document>, <document>, <document>, ... ],
         ordered: <boolean>,
         writeConcern: { <write concern> }
      }

   The :dbcommand:`insert` command takes the following fields:

   .. include:: insert-field.rst

   The top-level ``writeConcern`` field specifies the write concern for
   all inserts. See :doc:`/reference/write-concern` for an explanation
   of write concern syntax.

Output
------

On success, :dbcommand:`insert` returns a document similar to the
following:

.. code-block:: javascript

   { ok: 1, n: 1 }

On failure, :dbcommand:`insert` returns a document similar to the
following:

.. code-block:: javascript

   {
      ok: 0,
      n: 1,
      code: 104,
      errInfo: {
                  writtenTo: [
                                { _id: 0, host: "foo:27017" },
                                { _id: 1, host: "bar:27017" }
                             ]
               },
      errmsg: "Could not replicate operation within requested timeout"
   }

The returned document contains a subset of the following fields:

.. data:: insert.ok

   The status of the command.

.. data:: insert.n

   The number of documents inserted.

.. data:: insert.code

   An integer value identifying the cause of failure.

.. data:: insert.errInfo

   Structured data about the error, that is both human- and
   machine-readable.

.. data:: insert.errmsg

   A human-readable description of the cause of failure.

Examples
--------

Single Insert
~~~~~~~~~~~~~

.. example::

   Given a ``people`` collection, insert another person into the collection:

   .. code-block:: javascript

      db.runCommand(
         {
            insert: "people",
            documents: [ { name: "Sam", state: "active" } ],
            ordered: false,
            writeConcern: { w: 1 }
         }
      ) 

   The returned document:

   .. code-block:: javascript

      { "ok" : 1, "n" : 1 }

Bulk Insert
~~~~~~~~~~~

.. example::

   Now bulk-insert three more people into the collection:

   .. code-block:: javascript

      db.runCommand(
         {
            insert: "people",
            documents: [ { name: "Kay", state: "active" },
                         { name: "Bob", state: "active" },
                         { name: "Zack", state: "active" } ],
            ordered: false,
            writeConcern: { w: 1 }
         }
      ) 

   The returned document:

   .. code-block:: javascript

      { "ok" : 1, "n" : 3 }


