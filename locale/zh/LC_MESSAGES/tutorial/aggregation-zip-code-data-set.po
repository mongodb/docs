#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:3
msgid "Aggregation with the Zip Code Data Set"
msgstr "邮政编码数据集的聚合"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:13
msgid ""
"The examples in this document use the ``zipcodes`` collection. This "
"collection is available at: `media.mongodb.org/zips.json "
"<http://media.mongodb.org/zips.json>`_. Use :program:`mongoimport` to load "
"this data set into your :program:`mongod` instance."
msgstr ""
"本章节的例子使用了名为 ``zipcode`` 的集合。这个集合位于 `media.mongodb.org/"
"zips.json <http://media.mongodb.org/zips.json>`_. 可以使用 :program:"
"`mongoimport` 将这个集合的数据导入到你的 :program:`mongod` 实例中。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:19
msgid "Data Model"
msgstr "数据模型"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:21
msgid "Each document in the ``zipcodes`` collection has the following form:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:36
msgid "The ``_id`` field holds the zip code as a string."
msgstr "``_id`` 字段保存邮政编码，使用字符串格式。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:38
msgid ""
"The ``city`` field holds the city name. A city can have more than one zip "
"code associated with it as different sections of the city can each have a "
"different zip code."
msgstr ""
"``city`` 字段保存城市名称。一个城市对应多个邮编：不同的区使用不同的邮政编"
"码。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:42
msgid "The ``state`` field holds the two letter state abbreviation."
msgstr "``state`` 字段保存州名称的简称（使用了两个字母）。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:44
msgid "The ``pop`` field holds the population."
msgstr "``pop`` 字段保存了人口总数。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:46
msgid "The ``loc`` field holds the location as a latitude longitude pair."
msgstr "``loc`` 字段使用经纬度对保存位置信息。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:49
msgid "``aggregate()`` Method"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:51
msgid ""
"All of the following examples use the :method:`aggregate() "
"<db.collection.aggregate()>` helper in the :program:`mongo` shell."
msgstr ""
"所有的例子都是使用 :program:`mongo` 的 :method:`aggregate() <db.collection."
"aggregate()>` 方法。 :method:`aggregate() <db.collection.aggregate()>` 封装"
"了 :dbcommand:`aggregate` 命令。具体的接口说明可以查看对应你使用的 :doc:"
"`driver </applications/drivers>` 的文档。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:54
msgid ""
"The :method:`aggregate() <db.collection.aggregate()>` method uses the "
":ref:`aggregation pipeline <aggregation-pipeline>` to processes documents "
"into aggregated results. An :ref:`aggregation pipeline <aggregation-"
"pipeline>` consists of :ref:`stages <aggregation-pipeline-operator-"
"reference>` with each stage processing the documents as they pass along the "
"pipeline. Documents pass through the stages in sequence."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:62
msgid ""
"The :method:`aggregate() <db.collection.aggregate()>` method in the "
":program:`mongo` shell provides a wrapper around the :dbcommand:`aggregate` "
"database command. See the documentation for your :doc:`driver "
"</applications/drivers>` for a more idiomatic interface for data aggregation"
" operations."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:71
msgid "Return States with Populations above 10 Million"
msgstr ""
":method:`aggregate() <db.collection.aggregate()>` 方法会读取集合 "
"``zipcodes`` 中所有的文档。  :method:`aggregate() <db.collection."
"aggregate()>`  方法的聚合过程由多个 :ref:`pipeline <aggregation-pipeline>` 操"
"作符联接而成。"


#: ../source/tutorial/aggregation-zip-code-data-set.txt:73
msgid ""
"The following aggregation operation returns all states with total population"
" greater than 10 million:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:83
msgid ""
"In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` "
"consists of the :pipeline:`$group` stage followed by the :pipeline:`$match` "
"stage:"
msgstr ""
":pipeline:`$group` 操作会读取集合中所有的文档，并为每个州创建一个文档保存输"
"出结果。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:87
msgid ""
"The :pipeline:`$group` stage groups the documents of the ``zipcode`` "
"collection by the ``state`` field, calculates the ``totalPop`` field for "
"each state, and outputs a document for each unique state."
msgstr ""
"新生成的关于州的文档包含了两个字段： ``_id`` 和 ``totalPop`` 。 ``totalPop`` "
"字段保存了使用 :group:`$sum` 命令对源文档中 ``pop`` 字段进行求和的值。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:91
msgid ""
"The new per-state documents have two fields: the ``_id`` field and the "
"``totalPop`` field. The ``_id`` field contains the value of the ``state``; "
"i.e. the group by field. The ``totalPop`` field is a calculated field that "
"contains the total population of each state. To calculate the value, "
":pipeline:`$group` uses the :group:`$sum` operator to add the population "
"field (``pop``) for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:98
msgid ""
"After the :pipeline:`$group` stage, the documents in the pipeline resemble "
"the following:"
msgstr ""
":pipeline:`$match` 操作会对输出结果进行过滤，仅保留 ``totalPop`` 值大于等于"
"1000万的记录。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:108
msgid ""
"The :pipeline:`$match` stage filters these grouped documents to output only "
"those documents whose ``totalPop`` value is greater than or equal to 10 "
"million. The :pipeline:`$match` stage does not alter the matching documents "
"but outputs the matching documents unmodified."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:113
msgid "The equivalent :term:`SQL` for this aggregation operation is:"
msgstr ""
":pipeline:`$match` 操作不会对文档做任何修改，它的输出仍然是 :pipeline:`"
"$group` 输出的文档内容。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:122
msgid ":pipeline:`$group`, :pipeline:`$match`, :group:`$sum`"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:125
msgid "Return Average City Population by State"
msgstr "计算所有州的城市人口平均值"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:127
msgid ""
"The following aggregation operation returns the average populations for "
"cities in each state:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:137
msgid ""
"In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` "
"consists of the :pipeline:`$group` stage followed by another "
":pipeline:`$group` stage:"
msgstr ""
":method:`aggregate() <db.collection.aggregate()>` 方法会读取集合 "
"``zipcodes`` 中的所有文档。  :method:`aggregate() <db.collection."
"aggregate()>`  方法的聚合过程由多个 :ref:`pipeline <aggregation-pipeline>` 操"
"作符联接而成。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:141
msgid ""
"The first :pipeline:`$group` stage groups the documents by the combination "
"of ``city`` and ``state``, uses the :group:`$sum` expression to calculate "
"the population for each combination, and outputs a document for each "
"``city`` and ``state`` combination. [#multiple-zips-per-city]_"
msgstr ""
":pipeline:`$group` 操作读取所有的文档，并使用每个源文档的 ``city`` 和 "
"``state`` 字段来创建一个新的文档。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:147
msgid ""
"After this stage in the pipeline, the documents resemble the following:"
msgstr "这个步骤完成后，得到的文档应该是："

#: ../source/tutorial/aggregation-zip-code-data-set.txt:160
msgid ""
"A second :pipeline:`$group` stage groups the documents in the pipeline by "
"the ``_id.state`` field (i.e. the ``state`` field inside the ``_id`` "
"document), uses the :group:`$avg` expression to calculate the average city "
"population (``avgCityPop``) for each state, and outputs a document for each "
"state."
msgstr ""
"第二步的 :pipeline:`$group` 操作会读取所有文档中的 ``state`` 字段的值，并使"
"用 :group:`$avg` 来计算出 ``avgCityPop`` 字段的值。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:166
msgid ""
"The documents that result from this aggregation operation resembles the "
"following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:176
msgid ":pipeline:`$group`, :group:`$sum`, :group:`$avg`"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:179
msgid "Return Largest and Smallest Cities by State"
msgstr ""
":method:`aggregate() <db.collection.aggregate()>` 方法会读取集合 "
"``zipcodes`` 中的所有文档。  :method:`aggregate() <db.collection."
"aggregate()>`  方法的聚合过程由多个 :ref:`pipeline <aggregation-pipeline>` 操"
"作符联接而成。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:181
msgid ""
"The following aggregation operation returns the smallest and largest cities "
"by population for each state:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:216
msgid ""
"In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` "
"consists of a :pipeline:`$group` stage, a :program:`$sort` stage, another "
":pipeline:`$group` stage, and a :program:`$project` stage:"
msgstr ""
":pipeline:`$group` 操作读取所有的文档，并使用每个源文档的 ``city`` 和 "
"``state`` 字段来创建一个新的文档。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:220
msgid ""
"The first :pipeline:`$group` stage groups the documents by the combination "
"of the ``city`` and ``state``, calculates the :group:`sum <$sum>` of the "
"``pop`` values for each combination, and outputs a document for each "
"``city`` and ``state`` combination."
msgstr ""
"通过设置 ``_id`` 字段为一个包含了 ``state`` 和 ``city`` 字段的子文档，这样就可以保留 ``state`` 字段方便后面的操作使用。"
"这个步骤输出的文档还有一个字段 ``pop`` ，它的值是使用 :group:`$sum` 操作符累加源文档中 ``pop`` 字段的值而来。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:225
msgid "At this stage in the pipeline, the documents resemble the following:"
msgstr "完成这步后，输出的文档是这样的："

#: ../source/tutorial/aggregation-zip-code-data-set.txt:237
msgid ""
"The :pipeline:`$sort` stage orders the documents in the pipeline by the "
"``pop`` field value, from smallest to largest; i.e. by increasing order. "
"This operation does not alter the documents."
msgstr ""
":pipeline:`$sort` 操作会对文档按 ``pop`` 字段值从大到小进行排序，排序操作不会修改文档。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:241
msgid ""
"The next :pipeline:`$group` stage groups the now-sorted documents by the "
"``_id.state`` field (i.e. the ``state`` field inside the ``_id`` document) "
"and outputs a document for each state."
msgstr ""
"第二步的 :pipeline:`$group` 操作会根据文档中 ``_id`` 内嵌文档的 ``state`` 字段值，来对前面的输出文档进行分组。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:245
msgid ""
"The stage also calculates the following four fields for each state. Using "
"the :group:`$last` expression, the :pipeline:`$group` operator creates the "
"``biggestCity`` and ``biggestPop`` fields that store the city with the "
"largest population and that population. Using the :group:`$first` "
"expression, the :pipeline:`$group` operator creates the ``smallestCity`` and"
" ``smallestPop`` fields that store the city with the smallest population and"
" that population."
msgstr ""
":pipeline:`$group` 操作输出的每个州的文档中包含了4个字段：使用 :group:`$last` 表达式"
"计算出的 ``biggestcity`` 和 ``biggestpop`` 字段，代表了本州中人口最多的城市名和该城市人口总数；"
"使用 :group:`$first` 表达式计算出的 ``smallestcity`` 和 ``smallestpop`` 字段，代表了本州中人口最少的城市名和该城市人口总数；"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:253
msgid "The documents, at this stage in the pipeline, resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:265
msgid ""
"The final :pipeline:`$project` stage renames the ``_id`` field to ``state`` "
"and moves the ``biggestCity``, ``biggestPop``, ``smallestCity``, and "
"``smallestPop`` into ``biggestCity`` and ``smallestCity`` embedded "
"documents."
msgstr ""
"最后的步骤是 :pipeline:`$project`，它会把 ``_id`` 字段名重新命名为 ``state`` ，"
"并把 ``biggestCity`` , ``biggestPop`` 移动到子文档 ``biggestCity`` 中，"
"把 ``smallestCity`` , ``smallestPop`` 移动到子文档 ``smallestCity`` 中。"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:270
msgid ""
"The output documents of this aggregation operation resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:286
msgid ""
"A city can have more than one zip code associated with it as different "
"sections of the city can each have a different zip code."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:0
msgid "On this page"
msgstr ""
