.. index:: balancing; operations
.. index:: balancing; configure

===============================
Manage Sharded Cluster Balancer
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This page describes common administrative procedures related
to balancing. For an introduction to balancing, see
:ref:`sharding-balancing`. For lower level information on balancing, see
:ref:`sharding-balancing-internals`.

Check the Balancer State
------------------------

:method:`sh.getBalancerState()` checks if the balancer is enabled (i.e. that the
balancer is permitted to run). :method:`sh.getBalancerState()` does not check if the balancer
is actively balancing chunks.

To see if the balancer is enabled in your :term:`sharded cluster`,
issue the following command, which returns a boolean:

.. code-block:: javascript

   sh.getBalancerState()

.. versionadded:: 3.0.0
   You can also see if the balancer is enabled using
   :method:`sh.status()`. The
   :data:`~sh.status.balancer.currently-enabled` field indicates whether
   the balancer is enabled, while the
   :data:`~sh.status.balancer.currently-running` field indicates if
   the balancer is currently running.   

.. _sharding-balancing-check-lock:

Check the Balancer Lock
-----------------------

To see if the balancer process is active in your :term:`cluster
<sharded cluster>`, do the following:

#. Connect to any :program:`mongos` in the cluster using the
   :program:`mongo` shell.

#. Issue the following command to switch to the :ref:`config-database`:

   .. code-block:: javascript

      use config

#. Use the following query to return the balancer lock:

   .. code-block:: javascript

      db.locks.find( { _id : "balancer" } ).pretty()

   When this command returns, you will see output like the following:
   
   .. code-block:: javascript
   
      {   "_id" : "balancer",
      "process" : "mongos0.example.net:1292810611:1804289383",
        "state" : 2,
           "ts" : ObjectId("4d0f872630c42d1978be8a2e"),
         "when" : "Mon Dec 20 2010 11:41:10 GMT-0500 (EST)",
          "who" : "mongos0.example.net:1292810611:1804289383:Balancer:846930886",
          "why" : "doing balance round" }
   
   This output confirms that:
   
   - The balancer originates from the :program:`mongos` running on the
     system with the hostname ``mongos0.example.net``.
   
   - The value in the ``state`` field indicates that a :program:`mongos`
     has the lock. For version 2.0 and later, the value of an active lock
     is ``2``; for earlier versions the value is ``1``.

.. _sharded-cluster-config-default-chunk-size:

Configure Default Chunk Size
----------------------------

The default chunk size for a sharded cluster is 64 megabytes. In most
situations, the default size is appropriate for splitting and migrating
chunks. For information on how chunk size affects deployments, see
details, see :ref:`sharding-chunk-size`.

Changing the default chunk size affects chunks that are processes during
migrations and auto-splits but does not retroactively affect all chunks.

To configure default chunk size, see
:doc:`modify-chunk-size-in-sharded-cluster`.


.. _sharding-schedule-balancing-window:
.. _sharded-cluster-config-balancing-window:

Schedule the Balancing Window
-----------------------------

In some situations, particularly when your data set grows slowly and a
migration can impact performance, it is useful to ensure
that the balancer is active only at certain times. The following
procedure specifies the ``activeWindow``, 
which is the timeframe during which the :term:`balancer` will
be able to migrate chunks:

.. include:: /includes/steps/schedule-balancer-window.rst

.. _sharding-balancing-remove-window:

Remove a Balancing Window Schedule
----------------------------------

If you have :ref:`set the balancing window
<sharding-schedule-balancing-window>` and wish to remove the schedule
so that the balancer is always running, use :update:`$unset` to clear
the ``activeWindow``, as in the following:

.. code-block:: javascript

   use config
   db.settings.update({ _id : "balancer" }, { $unset : { activeWindow : true } })

.. _sharding-balancing-disable-temporally:
.. _sharding-balancing-disable-temporarily:

Disable the Balancer
--------------------

By default, the balancer may run at any time and only moves chunks as
needed. To disable the balancer for a short period of time and prevent
all migration, use the following procedure:

#. Connect to any :program:`mongos` in the cluster using the
   :program:`mongo` shell.

#. Issue the following operation to disable the balancer:

   .. code-block:: javascript

      sh.stopBalancer()

   If a migration is in progress, the system will complete the
   in-progress migration before stopping.

#. To verify that the balancer will not start, issue the following command,
   which returns ``false`` if the balancer is disabled:

   .. code-block:: javascript

      sh.getBalancerState()

   Optionally, to verify no migrations are in progress after disabling,
   issue the following operation in the :program:`mongo` shell:

   .. code-block:: javascript

      use config
      while( sh.isBalancerRunning() ) {
                print("waiting...");
                sleep(1000);
      }

.. note::

   To disable the balancer from a driver that does not have the
   :method:`sh.stopBalancer()` or :method:`sh.setBalancerState()` helpers,
   issue the following command from the ``config`` database:

   .. code-block:: javascript

      db.settings.update( { _id: "balancer" }, { $set : { stopped: true } } ,  { upsert: true } )

.. _sharding-balancing-re-enable:
.. _sharding-balancing-enable:

Enable the Balancer
-------------------

Use this procedure if you have disabled the balancer and are ready to
re-enable it:

#. Connect to any :program:`mongos` in the cluster using the
   :program:`mongo` shell.

#. Issue one of the following operations to enable the balancer:

   From the :program:`mongo` shell, issue:

   .. code-block:: javascript

      sh.setBalancerState(true)

   From a driver that does not have the :method:`sh.startBalancer()` helper,
   issue the following from the ``config`` database:

   .. code-block:: javascript

      db.settings.update( { _id: "balancer" }, { $set : { stopped: false } } , { upsert: true } )

Disable Balancing During Backups
--------------------------------

If MongoDB migrates a :term:`chunk` during a :doc:`backup
</core/backups>`, you can end with an inconsistent snapshot
of your :term:`sharded cluster`. Never run a backup while the balancer is
active. To ensure that the balancer is inactive during your backup
operation:

- Set the :ref:`balancing window <sharding-schedule-balancing-window>`
  so that the balancer is inactive during the backup. Ensure that the
  backup can complete while you have the balancer disabled.

- :ref:`manually disable the balancer <sharding-balancing-disable-temporarily>`
  for the duration of the backup procedure.

If you turn the balancer off while it is in the middle of a balancing round,
the shut down is not instantaneous. The balancer completes the chunk
move in-progress and then ceases all further balancing rounds.

Before starting a backup operation, confirm that the balancer is not
active. You can use the following command to determine if the balancer
is active:

.. code-block:: javascript

   !sh.getBalancerState() && !sh.isBalancerRunning()

When the backup procedure is complete you can reactivate
the balancer process.

Disable Balancing on a Collection
---------------------------------

You can disable balancing for a specific collection with the
:method:`sh.disableBalancing()` method. You may want to disable the
balancer for a specific collection to support maintenance operations or
atypical workloads, for example, during data ingestions or data exports.

When you disable balancing on a collection, MongoDB will not interrupt in
progress migrations.

To disable balancing on a collection, connect to a :program:`mongos`
with the :program:`mongo` shell and call the
:method:`sh.disableBalancing()` method.

For example:

.. code-block:: javascript

   sh.disableBalancing("students.grades")

The :method:`sh.disableBalancing()` method accepts as its parameter the
full :term:`namespace` of the collection.

Enable Balancing on a Collection
--------------------------------

You can enable balancing for a specific collection with the
:method:`sh.enableBalancing()` method.

When you enable balancing for a collection, MongoDB will not *immediately*
begin balancing data. However, if the data in your sharded collection is
not balanced, MongoDB will be able to begin distributing the data more
evenly.

To enable balancing on a collection, connect to a :program:`mongos`
with the :program:`mongo` shell and call the
:method:`sh.enableBalancing()` method.

For example:

.. code-block:: javascript

   sh.enableBalancing("students.grades")

The :method:`sh.enableBalancing()` method accepts as its parameter the
full :term:`namespace` of the collection.

Confirm Balancing is Enabled or Disabled
----------------------------------------

To confirm whether balancing for a collection is enabled or disabled,
query the ``collections`` collection in the ``config`` database for the
collection :term:`namespace` and check the ``noBalance`` field. For
example:

.. code-block:: javascript

   db.getSiblingDB("config").collections.findOne({_id : "students.grades"}).noBalance;

This operation will return a null error, ``true``, ``false``, or no output:

- A null error indicates the collection namespace is incorrect.

- If the result is ``true``, balancing is disabled.

- If the result is ``false``, balancing is enabled currently but has been
  disabled in the past for the collection. Balancing of this collection
  will begin the next time the balancer runs.

- If the operation returns no output, balancing is enabled currently and
  has never been disabled in the past for this collection. Balancing of
  this collection will begin the next time the balancer runs.

.. versionadded:: 3.0.0
   You can also see if the balancer is enabled using
   :method:`sh.status()`. The
   :data:`~sh.status.balancer.currently-enabled` field indicates if the
   balancer is enabled.

.. index:: balancing; secondary throttle
.. index:: secondary throttle
.. _sharded-cluster-config-secondary-throttle:

Change Replication Behavior for Chunk Migration
-----------------------------------------------

Secondary Throttle
~~~~~~~~~~~~~~~~~~

.. versionchanged:: 3.0.0
   The balancer configuration document added configurable
   ``writeConcern`` to control the semantics of the
   ``_secondaryThrottle`` option.

The ``_secondaryThrottle`` parameter of the balancer and the
:dbcommand:`moveChunk` command affects the replication behavior during
:ref:`chunk migration <chunk-migration-replication>`. By default,
``_secondaryThrottle`` is ``true``, which means each document move
during chunk migration propagates to at least one secondary before the
balancer proceeds with the next document: this is equivalent to a write
concern of ``{ w: 2 }``.

You can also configure the ``writeConcern`` for the
``_secondaryThrottle`` operation, to configure how migrations will
wait for replication to complete.  For more information on the
replication behavior during various steps of chunk migration,
see :ref:`chunk-migration-replication`.

To change the balancer's ``_secondaryThrottle`` and ``writeConcern``
values, connect to a :program:`mongos` instance and directly update
the ``_secondaryThrottle`` value in the :data:`~config.settings`
collection of the :ref:`config database <config-database>`. For
example, from a :program:`mongo` shell connected to a
:program:`mongos`, issue the following command:

.. code-block:: javascript

   use config
   db.settings.update(
      { "_id" : "balancer" },
      { $set : { "_secondaryThrottle" : false ,
                 "writeConcern": { "w": "majority" } } },
      { upsert : true }
   )

The effects of changing the ``_secondaryThrottle`` and
``writeConcern`` value may not be
immediate. To ensure an immediate effect, stop and restart the balancer
to enable the selected value of ``_secondaryThrottle``. See
:doc:`/tutorial/manage-sharded-cluster-balancer` for details.

.. _wait-for-delete-setting:

Wait for Delete
~~~~~~~~~~~~~~~

The ``_waitForDelete`` setting of the balancer and the
:dbcommand:`moveChunk` command affects how the balancer migrates
multiple chunks from a shard. By default, the balancer does not wait
for the on-going migration's delete phase to complete before starting
the next chunk migration. To have the delete phase **block** the start
of the next chunk migration, you can set the ``_waitForDelete`` to
true.

For details on chunk migration, see :ref:`sharding-chunk-migration`.
For details on the chunk migration queuing behavior, see
:ref:`chunk-migration-queuing`.

The ``_waitForDelete`` is generally for internal testing purposes. To
change the balancer's ``_waitForDelete`` value:

#. Connect to a :program:`mongos` instance.

#. Update the ``_waitForDelete`` value in the :data:`~config.settings`
   collection of the :ref:`config database <config-database>`. For
   example:

   .. code-block:: javascript

      use config
      db.settings.update(
         { "_id" : "balancer" },
         { $set : { "_waitForDelete" : true } },
         { upsert : true }
      )

Once set to ``true``, to revert to the default behavior:

#. Connect to a :program:`mongos` instance.

#. Update or unset the ``_waitForDelete`` field in the
   :data:`~config.settings` collection of the :ref:`config database
   <config-database>`:

   .. code-block:: javascript

      use config
      db.settings.update(
         { "_id" : "balancer", "_waitForDelete": true },
         { $unset : { "_waitForDelete" : "" } }
      )

.. _sharded-cluster-config-max-shard-size:

Change the Maximum Storage Size for a Given Shard
-------------------------------------------------

By default shards have no constraints in storage size. However, you can set a
maximum storage size for a given shard in the sharded cluster. When 
selecting potential destination shards, the balancer ignores shards 
where a migration would exceed the configured maximum storage size.

The :data:`~config.shards` collection in the :ref:`config
database<config-database>` stores configuration data related to shards. 

.. code-block:: javascript

   { "_id" : "shard0000", "host" : "shard1.example.com:27100" }
   { "_id" : "shard0001", "host" : "shard2.example.com:27200" }
   
To limit the storage size for a given shard, use the
:method:`db.collection.updateOne()` method with the :update:`$set` operator to
create the ``maxSize`` field and assign it an ``integer`` value. The
``maxSize`` field represents the maximum storage size for the shard in
``megabytes``.

The following operation sets a maximum size on a shard of ``1024 megabytes``:

.. code-block:: javascript

   config = db.getSiblingDB("config")
   config.shards.updateOne( { "_id" : "<shard>"}, { $set : { "maxSize" : 1024 } } )

This value includes the mapped size of *all* data files on the
shard, including the ``local`` and ``admin`` databases.

By default, ``maxSize`` is not specified, allowing shards to consume the
total amount of available space on their machines if necessary.

You can also set ``maxSize`` when adding a shard.

To set ``maxSize`` when adding a shard, set the :dbcommand:`addShard`
command's ``maxSize`` parameter to the maximum size in ``megabytes``. The
following command run in the :program:`mongo` shell adds a shard with a
maximum size of 125 megabytes:

.. code-block:: javascript

   config = db.getSiblingDB("config")
   config.runCommand( { addshard : "example.net:34008", maxSize : 125 } )
