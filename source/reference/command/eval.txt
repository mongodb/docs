====
eval
====

.. Edits to this page should be carried over to the method db.eval.txt
   file.

.. default-domain:: mongodb

.. dbcommand:: eval

   The :dbcommand:`eval` command evaluates JavaScript functions on the
   database server and has the following form:

   .. code-block:: none

      {
        eval: <function>,
        args: [ <arg1>, <arg2> ... ],
        nolock: <boolean>
      }

   The command contains the following fields:
   
   :field function eval:
      .. include:: /includes/parameters-eval.rst
         :start-after: eval-param-function
         :end-before: eval-param-argument

   :field array args:

      .. |list| replace:: An array
      .. include:: /includes/parameters-eval.rst
         :start-after: eval-param-argument
         :end-before: eval-param-nolock

   :field boolean nolock:

      .. include:: /includes/parameters-eval.rst
         :start-after: eval-param-nolock

   Consider the following example which uses :dbcommand:`eval` to
   perform an increment and calculate the average on the server:

      .. include:: /includes/examples-eval.rst
         :start-after: eval-command-example
         :end-before: .. eval-method-example

   The ``db`` in the function refers to the current database.

   The :program:`mongo` shell provides a helper method
   :method:`db.eval()` [#eval-shell-helper]_, so you can express the
   above as follows:

   .. include:: /includes/examples-eval.rst
      :start-after: .. eval-method-example

   If you want to use the server's interpreter, you must run
   :dbcommand:`eval`. Otherwise, the :program:`mongo` shell's
   JavaScript interpreter evaluates functions entered directly into the
   shell.

   If an error occurs, :dbcommand:`eval` throws an exception. Consider
   the following invalid function that uses the variable ``x`` without
   declaring it as an argument:

   .. code-block:: javascript

      db.runCommand(
                     {
                       eval: function() { return x + x; },
                       args: [ 3 ]
                     }
                   )

   The statement will result in the following exception:

   .. code-block:: javascript

      {
         "errmsg" : "exception: JavaScript execution failed: ReferenceError: x is not defined near '{ return x + x; }' ",
         "code" : 16722,
         "ok" : 0
      }

   .. \|object| defined in included parameters-eval .. 
   .. \|nolockobject| defined in included parameters-eval ..
   .. include:: /includes/admonitions-eval.rst

   .. seealso:: :doc:`/core/server-side-javascript`

   .. [#eval-shell-helper] 
      .. include:: /includes/fact-eval-helper-method.rst
