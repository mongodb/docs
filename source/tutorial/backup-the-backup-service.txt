================
Back Up |onprem|
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Deploying the |onprem| Backup Blockstore and Application databases as
:term:`replica sets <replica set>` is key to protect the databases from failure.

Ensure you configure and deploy your replica sets for
failover and redundancy. See :manual:`Replica Set High Availability
</core/replica-set-high-availability>` and :manual:`Replica Set
Deployment Architectures </core/replica-set-architectures>` for more
about replica set architecture.

Beyond using MongoDB's replication capabilities, you can create
backups for the Backup Blockstore database and Application database,
both for longterm storage of snapshots, and for backing
up |onprem| for disaster recovery purposes.

To restore |onprem|, you only need backups of the Application database
and the Backup Blockstore database. |onprem|'s other components are
stateless: you can rebuild them from the installation package if need
be.

.. important::

   Your Backup installation cannot back up |onprem|. If you wish to
   use |onprem| to back up |onprem|, you will need *two* |onprem|
   installations: one to back up your MongoDB deployment,
   and another to back up your |onprem| databases.

Back Up with the Public API
---------------------------

The |mms| Public API provides the ability to programmatically restore
snapshots on your desired schedule, and store them offline. Ideally,
you should save the backups to a tape drive, appending the new
snapshots daily until the drive is full, and then store the drive offsite.

Programmatically restoring snapshots has the same impact on the Backup
Blockstore database as a typical restore.

You can then :doc:`restore your MongoDB instance from the stored
snapshots </tutorial/nav/backup-restore-deployments>`. 

This method backs up the snapshots only: you **cannot** use the
backups to restore |onprem| in the event that the Blockstore 
is lost.

Shut Down and Back Up
---------------------

To perform a full backup of all snapshots contained in |onprem|,
including the point-in-time restores:

1. Shut down the |onprem| application service
2. Shut down the |onprem| application databases
3. Shut down the |onprem| backup databases.
4. Back up the file systems that store the application and backup
   databases (and/or files) while they are offline.

   .. note:: 
      This would cover both the blockstore- and file system-based
      backups as the entire file system would be backed up.

The 'Shut Down and Back Up' approach has the advantage of providing all
of |onprem|'s backup snapshots *and* the point-in-time restores that it
stores. However, the process involves significant downtime and during
the shut down, |onprem| is completely unavailable. As such, if a
failure occurs in one of your MongoDB instances, you may lose the data
that |onprem| did not back up prior to shutdown.

Online Backup
-------------

Online backup is the riskiest option, as it involves backing up the
databases while |onprem| is running. If done correctly, this provides
you with all of the backup snapshots contained in |onprem|, as well as
the point-in-time restores for the period leading up to the backup.

However, the process is complex and there is high potential for errors.
To perform the online backup for databases using either the **MMAPv1**
or **WiredTiger** (starting with MongoDB 3.2 or later) storage engines,
you must run ``db.fsyncLock()`` on each :program:`mongod` process that
is part of the Application and Backup Blockstore replica sets in the
correct order, back up the underlying file system, and then call
``db.fsyncUnlock()``. If you forget to call ``db.fsyncUnlock()`` on a
:program:`mongod` instance, you risk significant long-term problems and
failures.

.. note::

   In previous MongoDB versions, db.fsyncLock() could not guarantee a consistent set of files for low-level backups (e.g. via file copy cp, scp, tar) for the **WiredTiger** storage engine. See
   :manual:`db.fsyncLock() </reference/method/db.fsyncLock>` in the
   MongoDB manual.
