.. facet::
   :name: genre
   :values: tutorial

.. facet::
   :name: programming_language
   :values: javascript/typescript

.. meta::
   :keywords: queryable encryption, code example, node.js

.. _qe-create-encryption-schema:

========================================================================
Create an {+enc-schema-title+}
========================================================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

About this Task
---------------

To make encrypted fields queryable, create an :term:`{+enc-schema+}`. 
This schema defines which fields are queryable, and which
query types are permitted. For more information, see
:ref:`qe-fundamentals-encrypt-query`.

.. important::

   {+qe+} supports equality and range queries. You can configure a
   field for only one query type.

Before you Begin
----------------

When you make encrypted fields queryable, consider performance and
security. For details on how each configuration option affects these,
see :ref:`qe-field-configuration`.

.. _qe-specify-fields-for-encryption:

Steps
-----

.. procedure::
   :style: normal

   .. step:: Create a JSON {+enc-schema+} document.

      Include an ``encryptedFieldsObject`` with a nested ``fields`` array:

      .. code-block:: javascript

         const encryptedFieldsObject = {
            fields: []
         }
   
   .. step:: Specify fields to encrypt.

      a. Add the ``path`` and ``bsonType`` strings to a document
         within the fields array:

         .. code-block:: javascript
            :emphasize-lines: 4, 5

            const encryptedFieldsObject = {
               fields: [
                  {
                     path: "myDocumentField",
                     bsonType: "int"
                  }
               ]
            }

         .. important::

            You can specify any field for encryption except the
            ``_id`` field.

      #. If you are using :ref:`{+manual-enc+}
         <qe-fundamentals-manual-encryption>`, add a ``keyId`` field
         with the {+dek-abbr+} ID:

         .. code-block:: javascript
            :emphasize-lines: 4

            {
               path: "myDocumentField",
               bsonType: "int",
               keyId: "<unique data encryption key>"
            }

         .. tip::
         
            With Automatic Encryption, MongoDB creates encryption keys for
            each field. You configure ``AutoEncryptionSettings`` on the
            client, then use the ``createEncryptedCollection`` helper method
            to create your collections.

   .. step:: Enable equality queries on desired fields.
      
      This enables querying with the :query:`$eq`, :query:`$ne`, :query:`$in`, 
      and :query:`$nin` operators.

      .. _qe-enable-queries:

      Add the ``queries`` object and set ``queryType`` to ``"equality"``:

      .. code-block:: javascript
         :emphasize-lines: 4

         {
            path: "myDocumentField",
            bsonType: "int",
            queries: { queryType: "equality" }
         }

   .. step:: Enable range queries on desired fields.
      
      This enables querying with the :query:`$lt`, :query:`$lte`, :query:`$gt`, and :query:`$gte` operators.

      For details on how the following options affect security and performance, see :ref:`qe-field-configuration`.

      a. Add the ``queries`` object and set ``queryType`` to ``"range"``:
            
         .. code-block:: javascript
            :emphasize-lines: 4

            {
               path: "myDocumentRangeField",
               bsonType: "int",
               queries: { queryType: "range" }
            }
      
      #. Set the following fields:
      
         .. list-table::
            :header-rows: 1
            :widths: 20 30 50

            * - Field
              - Type
              - Description
            
            * - :ref:`min and max <qe-field-min-max>`
              - Same as field ``bsonType``
              - Required if ``bsonType`` is ``decimal`` or
                ``double``. Optional but highly recommended if it is ``int``,
                ``long``, or ``date``. Defaults to the minimum and maximum
                values of the ``bsonType``.
                
                When possible, specifying bounds on a query improves 
                performance. If querying values outside of these inclusive 
                bounds, MongoDB returns an error.
         
         .. code-block:: javascript
            :emphasize-lines: 5-6

            {
               path: "myDocumentRangeField",
               bsonType: "int",
               queries: { queryType: "range",
                          min: 0,
                          max: 1200
               }
            }

Example
-------

This example shows how to create an {+enc-schema+} for hospital data.

Consider the following document that contains personally identifiable information
(PII), credit card information, and sensitive medical information:

.. code-block:: json

   {
      "firstName": "Jon",
      "lastName": "Snow",
      "patientId": 12345187,
      "address": "123 Cherry Ave",
      "medications": [
         "Adderall",
         "Lipitor"
      ],
      "patientInfo": {
         "ssn": "921-12-1234",
         "billing": {
               "type": "visa",
               "number": "1234-1234-1234-1234"
         }
      }
   }

To ensure the PII and sensitive medical information stays secure, this 
{+enc-schema+} adds the relevant fields:

.. code-block:: javascript

   const encryptedFieldsObject = {
      fields: [
         {
            path: "patientId",
            bsonType: "int"
         },
         {
            path: "patientInfo.ssn",
            bsonType: "string"
         },
         {
            path: "medications",
            bsonType: "array"
         },
         {
            path: "patientInfo.billing",
            bsonType: "object"
         }
      ]
   }

Adding the ``queries`` property makes the ``patientId`` and
``patientInfo.ssn`` fields queryable. This example enables equality queries:

.. code-block:: javascript
   :emphasize-lines: 6, 11

   const encryptedFieldsObject = {
      fields: [
         {
            path: "patientId",
            bsonType: "int",
            queries: { queryType: "equality" }
         },
         {
            path: "patientInfo.ssn",
            bsonType: "string",
            queries: { queryType: "equality" }
         },
         {
            path: "medications",
            bsonType: "array"
         },
         {
            path: "patientInfo.billing",
            bsonType: "object"
         },
      ]
   }
