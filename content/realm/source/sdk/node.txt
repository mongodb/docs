.. meta::
   :robots: noindex, nosnippet

:template: product-landing
:hidefeedback: header
:noprevnext:

.. _node-intro:
.. _node-realm-database:

=================
Atlas Device SDK for Node.js
=================

.. meta::
   :description: Use the Atlas Device SDK for Node.js to build server applications, desktop applications, CLIs, IoT programs and more in JavaScript or TypeScript.

.. toctree::
   :titlesonly:
   :hidden:

   Realm Files </sdk/node/realm-files>
   Model Data </sdk/node/model-data>
   CRUD </sdk/node/crud>
   React to Changes </sdk/node/react-to-changes>
   Atlas App Services </sdk/node/app-services>
   Manage Users </sdk/node/manage-users>
   Sync Data </sdk/node/sync>
   Logging </sdk/node/logging>
   SDK Telemetry </sdk/node/telemetry>
   API Reference <https://www.mongodb.com/docs/realm-sdks/js/latest/>
   Release Notes <https://github.com/realm/realm-js/releases>

Use the Atlas Device SDK for Node.js to build for server applications, desktop 
applications, CLIs, IoT programs, and more in JavaScript or TypeScript.

The Node.js SDK does not support applications written for web browsers.
For Web apps, use the :ref:`Web SDK <web-intro>`.
For React Native development, use the :ref:`React Native SDK <react-native-intro>`.

To get started with the Node.js SDK, see :ref:`Quick Start <node-client-quick-start>`.

.. kicker:: What You Can Do

Develop Apps with the SDK
-------------------------

Use the SDK's open-source database - Realm - as an object store on the device. 
Use Device Sync to keep data in sync with your MongoDB Atlas cluster and 
other clients.

.. tabs::

  .. tab:: Store Data with the SDK
      :tabid: device-persistence

      .. procedure::

         .. step:: Install the Node.js SDK

            To get started, :ref:`install the Node.js SDK <node-install>`.

         .. step:: Define an Object Schema

            Use JavaScript to idiomatically :ref:`define an object schema <node-define-a-realm-object-schema>`.

         .. step:: Configure & Open a Database

            You can configure your database to do things
            like populate initial data on load, use an encryption key to 
            secure data, and more. To begin working with your data,
            :ref:`configure and open a database <node-open-close-realm>`.

         .. step:: Read and Write Data

            You can :ref:`create, read, update, and delete objects <node-read-and-write-data>`
            from the device database. Construct complex queries to 
            :ref:`filter data <node-query-data>`.

         .. step:: React to Changes

            Live objects mean that your data is always up-to-date.
            Register a change listener to :ref:`react to changes <node-react-to-changes>` 
            and perform logic like updating your UI.

      .. image:: /images/illustrations/2024_branding/Technical_SOFTWARE_Connect(2)_Spot.png
         :alt: Atlas Device SDK Mobile Illustration

  .. tab:: Sync Data Across Devices
      :tabid: device-sync

      .. procedure::

         .. step:: Connect to an Atlas App Services App

            Configure :ref:`Device Sync in an App Services App <realm-sync-get-started>`.
            Define data access rules or use Development Mode to infer a schema
            from your client's data model.
            Then, :ref:`connect to the backend App from your Node.js client <node-connect-to-mongodb-realm-backend-app>`.

         .. step:: Authenticate a User

            App Services provides access to custom JWT authentication,
            our built-in email/password provider, anonymous
            authentication, and popular
            authentication providers like Apple, Google, and Facebook.
            Use these providers to :ref:`authenticate a user in your client <node-authenticate-users>`.

         .. step:: Open a Synced Database

            To get started syncing data, :ref:`open a synced database <node-open-a-synced-realm>`.
            To determine what data a synced database can read and write,
            :ref:`subscribe to a query <node-sync-subscribe-to-queryable-fields>`.

         .. step:: Read and Write Synced Data

            The :ref:`APIs for reading and writing data <node-read-and-write-data>`
            are the same for both synced and non-synced databases.
            Data that you read and write on the device is automatically kept
            in sync with your Atlas cluster and other clients.
            Apps keep working offline and sync changes when a network connection
            is available.

      .. image:: /images/illustrations/2024_branding/Technical_SOFTWARE_Sync(2)_Spot.png
         :alt: Device Sync Illustration

  .. tab:: Build with Atlas App Services
      :tabid: app-services

      .. container::

         Use Atlas App Services in your Node.js application with the Realm SDK.

         Call Serverless Functions
         ~~~~~~~~~~~~~~~~~~~~~~~~~

         To invoke serverless backend logic from your Node.js client,
         :ref:`call Atlas Functions <node-call-a-function>`.

         Query MongoDB Atlas
         ~~~~~~~~~~~~~~~~~~~

         Query data stored in MongoDB directly from your client application code
         with :ref:`MongoDB Data Access <node-mongodb-remote-access>`.

         Authenticate Users
         ~~~~~~~~~~~~~~~~~~

         Authenticate users with built-in and third-party :ref:`authentication providers <node-authenticate-users>`.
         Access App Services with authenticated users.

      .. image:: /images/illustrations/2024_branding/Technical_ACTION_WrenchSettings_Spot.png
         :alt: App Services Illustration

.. kicker:: Essential Documentation

Recommended Reading
-------------------

.. card-group::
   :columns: 2
   :style: extra-compact

   .. card::
      :headline: JavaScript API Reference
      :cta: Node.js Reference
      :url: https://www.mongodb.com/docs/realm-sdks/js/latest/
      :icon: general_action_best_practices
      :icon-alt: Atlas Device SDK Icon

      Explore generated reference docs for the Node.js SDK.

Example Projects
----------------

Explore engineering and expert-provided example projects to learn best 
practices and common development patterns using the Node.js SDK. Check out the 
:ref:`<realm-example-projects-table>` page for more Node.js sample apps.

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: Vehicle Simulator and Controller
      :cta: Example project
      :url: https://github.com/mongodb-industry-solutions/Vehicle-Digital-Twin-Feedback-Loop 
      :icon: mdb_vector_search
      :icon-alt: Virtual Space Icon

      Build a connected platform to monitor vehicle analytics using MongoDB Atlas and the AWS ecosystem.
   
   .. card::
      :headline: Offline Login and Database Access
      :cta: Example project
      :url: https://github.com/realm/realm-js/tree/main/examples/node-connection-and-error
      :icon: realm_offline
      :icon-alt: Atlas Device SDK Offline Icon

      Log in a Device Sync user and open a synced database offline.

   .. card::
      :headline: User's Online State
      :cta: Example project
      :url: https://github.com/realm/realm-kotlin-samples/tree/main/AppServicesUsageSamples/apps/presence-detection
      :icon: general_content_users
      :icon-alt: Users Icon

      Detect connectivity and activity of users and devices. 
   
   .. card::
      :headline: Connection State Change & Error Handling
      :cta: Example project
      :url: https://github.com/realm/realm-js/tree/main/examples/node-connection-and-error
      :icon: cloud_mobility
      :icon-alt: Cloud Mobile Transfer Icon

      Learn best practices around handling Sync errors and client reset 
      strategies.

