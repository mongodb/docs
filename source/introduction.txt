=======================
Introduction to MongoDB
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB is an open-source document database that provides high
performance, high availability, and automatic scaling.

Document Database
-----------------

A record in MongoDB is a document, which is a data structure composed
of field and value pairs. MongoDB documents are similar to JSON
objects. The values of fields may include other documents, arrays,
and arrays of documents.

.. include:: /images/crud-annotated-document.rst

The advantages of using documents are:

- Documents (i.e. objects) correspond to native data types in
  many programming languages.

- Embedded documents and arrays reduce need for expensive joins.

- Dynamic schema supports fluent polymorphism.

Key Features
------------

High Performance
~~~~~~~~~~~~~~~~

MongoDB provides high performance data persistence. In particular,

- Support for embedded data models reduces I/O activity on database
  system.

- Indexes support faster queries and can include keys from embedded
  documents and arrays.

Rich Query Language
~~~~~~~~~~~~~~~~~~~

MongoDB supports a rich query language to support :doc:`read and write
operations (CRUD) </crud>` as well as:

- :doc:`Data Aggregation </core/aggregation-pipeline>`

- :doc:`Text Search </text-search>` and :doc:`Geospatial Queries
  </tutorial/geospatial-tutorial>`.

High Availability
~~~~~~~~~~~~~~~~~

MongoDB's replication facility, called :doc:`replica set
</replication>`, provides:

- *automatic* failover and

- data redundancy.

A :doc:`replica set </replication>` is a group of
MongoDB servers that maintain the same data set, providing redundancy
and increasing data availability.

Horizontal Scalability
~~~~~~~~~~~~~~~~~~~~~~

MongoDB provides horizontal scalability as part of its *core*
functionality:

- :ref:`Sharding <sharding-introduction>` distributes data across a
  cluster of machines.

- Starting in 3.4, MongoDB supports creating :ref:`zones
  <zone-sharding>` of data based on the :term:`shard key`. In a
  balanced cluster, MongoDB directs reads and writes covered by a zone
  only to those shards inside the zone. See the :ref:`zone-sharding`
  manual page for more information.


Support for Multiple Storage Engines
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB supports :doc:`multiple storage engines
</core/storage-engines>`:

- :doc:`/core/wiredtiger` (including support for
  :doc:`/core/security-encryption-at-rest`)

- :doc:`/core/inmemory`

- :doc:`/core/mmapv1` (*Deprecated in MongoDB 4.0*)

In addition, MongoDB provides pluggable storage engine API that allows
third parties to develop storage engines for MongoDB.

.. class:: hidden

   .. toctree::
      :titlesonly: 

      /tutorial/getting-started
      /tutorial/atlas-free-tier-setup
      /core/databases-and-collections
      /core/document
      /reference/bson-types
      /reference/bson-type-comparison-order.txt
      /reference/mongodb-extended-json

