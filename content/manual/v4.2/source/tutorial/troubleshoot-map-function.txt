=============================
Troubleshoot the Map Function
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The ``map`` function is a JavaScript function that associates or “maps”
a value with a key and emits the key and value pair during a
:doc:`map-reduce </core/map-reduce>` operation.

.. note::

   Starting in version 4.2.1, MongoDB deprecates the use of BSON type
   JavaScript code with scope (:doc:`BSON type 15
   </reference/bson-types/>`) for the ``map``, ``reduce``, and
   ``finalize`` functions. Using JavaScript code with scope with these
   functions will print a warning to the log. Instead, use BSON type
   String (:doc:`BSON type 2 </reference/bson-types/>`) or BSON type
   JavaScript (:doc:`BSON type 13 </reference/bson-types/>`). To pass
   constant values which will be accessible in the ``map``, ``reduce``,
   and ``finalize`` functions, use the ``scope`` parameter.

Verify Key and Value Pairs
--------------------------

To verify the ``key`` and ``value`` pairs emitted by the ``map``
function, write your own ``emit`` function.

Consider a collection ``orders`` that contains documents of the
following prototype:

.. code-block:: javascript

   {
        _id: ObjectId("50a8240b927d5d8b5891743c"),
        cust_id: "abc123",
        ord_date: new Date("Oct 04, 2012"),
        status: 'A',
        price: 250,
        items: [ { sku: "mmm", qty: 5, price: 2.5 },
                 { sku: "nnn", qty: 5, price: 2.5 } ]
   }

#. Define the ``map`` function that maps the ``price`` to the
   ``cust_id`` for each document and emits the ``cust_id`` and ``price``
   pair:

   .. code-block:: javascript

      var map = function() {
          emit(this.cust_id, this.price);
      };

#. Define the ``emit`` function to print the key and value:

   .. code-block:: javascript

      var emit = function(key, value) {
          print("emit");
          print("key: " + key + "  value: " + tojson(value));
      }

#. Invoke the ``map`` function with a single document from the ``orders``
   collection:

   .. code-block:: javascript

      var myDoc = db.orders.findOne( { _id: ObjectId("50a8240b927d5d8b5891743c") } );
      map.apply(myDoc);

#. Verify the key and value pair is as you expected.

   .. code-block:: javascript

      emit
      key: abc123 value:250

#. Invoke the ``map`` function with multiple documents from the ``orders``
   collection:

   .. code-block:: javascript

      var myCursor = db.orders.find( { cust_id: "abc123" } );

      while (myCursor.hasNext()) {
          var doc = myCursor.next();
          print ("document _id= " + tojson(doc._id));
          map.apply(doc);
          print();
      }

#. Verify the key and value pairs are as you expected.

.. seealso::

   The ``map`` function must meet various requirements. For a list of all
   the requirements for the ``map`` function, see :dbcommand:`mapReduce`,
   or the :binary:`~bin.mongo` shell helper method
   :method:`db.collection.mapReduce()`.
