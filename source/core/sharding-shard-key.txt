.. index:: shard key
   single: sharding; shard key

.. _sharding-shard-key:
.. _shard-key:
.. _sharding-internals-shard-keys:

==========
Shard Keys
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The shard key determines the distribution of the collection's :term:`documents
<document>` among the cluster's :term:`shards <shard>`. The shard key is
either an indexed :term:`field` or indexed :term:`compound <compound index>`
fields that exists in every document in the collection.

MongoDB :term:`partitions <data partition>` data in the collection using ranges
of shard key values. Each range defines a non-overlapping range of shard key
values and is associated with a :term:`chunk`.

MongoDB attempts to distribute chunks evenly among the shards in the cluster.
The shard key has a direct relationship to the effectiveness of chunk
distribution. See :ref:`sharding-shard-key-selection`.

.. include:: /images/sharding-range-based.rst

.. important::

   .. include:: /includes/limits-sharding-shardkey-document-immutable.rst

.. TODO:: Split this include out into an actual tutorial
   .. include:: /includes/limits-sharding-shardkey-immutable.rst

.. _sharding-shard-key-creation:

Creating a Shard Key
--------------------

The :method:`sh.shardCollection()` method shards the target collection 
based on the indexed fields passed to the ``key`` parameter.

.. code-block:: javascript

   sh.shardCollection( namespace, key )

The ``namespace`` parameter consists of a string ``<database>.<collection>`` 
specifying the full :term:`namespace` of the target collection.
The ``key`` parameter consists of a document containing a field and the 
traversal direction for that field. 
   
If the collection is empty, :method:`sh.shardCollection()` creates indexes
based on the specified fields and the traversal direction. If the collection
is *not* empty, create the indexes first using
:method:`db.collection.createIndex()`. The fields and travesal directions
passed to ``key`` must match the target indexes.

You cannot create a shard key using non-indexed field or fields. 

See :ref:`sharding-shard-key-indexes` for information on restrictions 
and requirements related to shard key indexes.

For instructions specific to sharding a collection using the
:ref:`hashed sharding <sharding-hashed>` strategy, see
:ref:`deploy-hashed-sharded-cluster-shard-collection`

For instructions specific to sharding a collection using the 
:ref:`ranged sharding <sharding-ranged>` strategy, see
:ref:`deploy-ranged-sharded-cluster-shard-collection`.

.. _sharding-shard-key-requirements:

Shard Key Requirements
----------------------

Key Size
~~~~~~~~

.. include:: /includes/limits-sharding-keysize.rst

When sharding an existing collection, the shard key can constrain the 
maximum supported collection size for the initial sharding operation only. 
See :limit:`Sharding Existing Collection Data Size`. 

.. important::

   A sharded collection can grow to any size after successful sharding

.. ToDo: Pending DOCS-7145, include a table showing split points at a few
   byte sizes.

.. _sharding-internals-shard-key-indexes:
.. _sharding-shard-key-indexes:

Shard Key Indexes
~~~~~~~~~~~~~~~~~

.. include:: /includes/limits-sharding-index-type.rst

All sharded collections **must** have an index that starts with the
:term:`shard key`; i.e. the index can be an index on the shard key or a
:term:`compound index` where the shard key is a prefix of the index.

The index on the shard key **cannot** be a :ref:`multikey index
<index-type-multikey>`.

If you shard a collection without any documents and
*without* such an index, :method:`sh.shardCollection()`
creates the index on the shard key. If the collection already has
documents, you must create the index before using
:method:`sh.shardCollection()`.

If you drop the last valid index for the shard key, recover by
recreating an index on just the shard key.

For restrictions on shard key indexes, see :ref:`limits-shard-keys`.

Unique Indexes
~~~~~~~~~~~~~~

Sharded collections cannot enforce :ref:`unique indexes
<limit-sharding-unique-indexes>`. MongoDB does *not* support creating
new unique indexes and does *not* allow sharding collections with unique
indexes on fields other than ``_id``.

MongoDB *can* enforce uniqueness on the :term:`shard key`. MongoDB
enforces uniqueness on the *entire* key combination, and not specific
components of the shard key. You cannot specify a unique constraint
on a :ref:`hashed index <index-type-hashed>`. To enforce uniqueness
on the shard key, pass the ``unique`` parameter as ``true`` to the
:method:`sh.shardCollection()` method.

The best way to ensure a field has unique values is to generate
universally unique identifiers (UUID,) such as MongoDB's '``ObjectId``
values.

For collections where ``_id`` is *not* part of the shard key, the
application is responsible for ensuring that the ``_id`` field is
unique.

See :ref:`shard-key-arbitrary-uniqueness` if enforcing uniqueness
on an arbitrary field is necessary.

.. index:: shard key; cardinality

.. _shard-key-selection-divisible:
.. _sharding-internals-operations-and-reliability:
.. _sharding-shard-key-selection:
.. _sharding-internals-choose-shard-key:

Choosing a Shard Key
--------------------

The choice of shard key affects how the :term:`sharded cluster`
:term:`balancer` creates and distributes :term:`chunks<chunk>` across the
available :term:`shards <shard>`. This affects the overall efficiency and
performance of operations within the sharded cluster.

The shard key affects the performance and efficiency of the
:ref:`sharding strategy <sharding-strategy>` used by the sharded cluster.

The ideal shard key allows MongoDB to distribute documents evenly throughout
the cluster.

.. include:: /images/sharded-cluster-ranged-distribution-good.rst

At minimum, consider the consequences of the
:ref:`cardinality<shard-key-range>`, :ref:`frequency<shard-key-frequency>`, and
rate of :ref:`change<shard-key-monotonic>` of a potential shard key.

.. _shard-key-range:
.. _sharding-shard-key-cardinality:
.. _shard-key-cardinality:

Shard Key Cardinality
~~~~~~~~~~~~~~~~~~~~~

The :term:`cardinality` of a shard key determines the maximum number of chunks
the balancer can create. This can reduce or remove the effectiveness of 
horizontal scaling in the cluster.

A unique shard key value can exist on no more than a single chunk at any 
given time. If a shard key has a cardinality of ``4``, then there can 
be no more than ``4`` chunks within the sharded cluster, each storing 
one unique shard key value. This constrains the number of effective 
shards in the cluster to ``4`` as well - adding additional shards would 
not provide any benefit.

The following image illustrates a sharded cluster using the field
``X`` as the shard key. If ``X`` has low cardinality, the distribution of
inserts may look similar to the following:

.. include:: /images/sharded-cluster-ranged-distribution-low-cardinal.rst

The cluster in this example would *not* scale horizontally, as incoming writes
would only route to a subset of shards.

A shard key with high cardinality does not guarantee even distribution of data
across the sharded cluster, though it does better facilitate horizontal
scaling. The :ref:`frequency <shard-key-frequency>` and :ref:`rate of
change <shard-key-monotonic>` of the shard key also contributes to data
distribution. Consider each factor when choosing a shard key.

If your data model requires sharding on a key that has low cardinality,
consider using a :term:`compound index` using a field that
has higher relative cardinality.

.. _shard-key-frequency:

Shard Key Frequency
~~~~~~~~~~~~~~~~~~~

Consider a set representing the range of shard key values - the ``frequency``
of the shard key represents how often a given value occurs in the data. If the
majority of documents contain only a subset of those values, then the chunks
storing those documents become a bottleneck within the cluster. Furthermore,
as those chunks grow, they may become :ref:`indivisible chunks <jumbo-chunks>`
as they cannot be split any further. This reduces or removes the effectiveness
of horizontal scaling within the cluster.

The following image illustrates a sharded cluster using the field ``X`` as the
shard key. If a subset of values for ``X`` occur with high frequency, the
distribution of inserts may look similar to the following:

.. include:: /images/sharded-cluster-ranged-distribution-frequency.rst

A shard key with low frequency does not guarantee even distribution of data
across the sharded cluster. The :ref:`cardinality <shard-key-cardinality>` and
:ref:`rate of change <shard-key-monotonic>` of the shard key also contributes
to data distribution. Consider each factor when choosing a shard key.

If your data model requires sharding on a key that has high frequency
values, consider using a :term:`compound index` using a unique or
low frequency value.

.. _shard-key-monotonic:

Monotonically Changing Shard Keys
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A shard key on a value that increases or decreases monotonically is more
likely to distribute inserts to a single shard within the cluster.

This occurs because every cluster has a chunk that captures a range with an
upper bound of :bsontype:`maxKey<data_maxkey>`. ``maxKey`` always
compares as higher than all other values. Similarly, there is a chunk that
captures a range with a lower bound of :bsontype:`minKey<data_minkey>`.
``minKey`` always compares as lower than all other values.

If the shard key value is always increasing, all new inserts are routed to the
chunk with ``maxKey`` as the upper bound. If the shard key value is always
decreasing, all new inserts are routed to the chunk with ``minKey`` as the
lower bound. The shard containing that chunk becomes the bottleneck for write
operations.

The following image illustrates a sharded cluster using the field ``X``
as the shard key. If the values for ``X`` are monotonically increasing, the
distribution of inserts may look similar to the following:

.. include:: /images/sharded-cluster-monotonic-distribution.rst

If the shard key value was monotonically decreasing, then all inserts would
route to ``Chunk A`` instead.

A shard key that does not change monotonically does not guarantee even
distribution of data across the sharded cluster. The
:ref:`cardinality<shard-key-cardinality>` and
:ref:`frequency<shard-key-frequency>` of the shard key also contributes to
data distribution. Consider each factor when choosing a shard key.

If your data model requires sharding on a key that changes
monotonically, consider using :doc:`/core/hashed-sharding`.

.. _shard-key-arbitrary-uniqueness:

Unique Constraints on Arbitrary Fields
--------------------------------------

If you cannot use a unique field as the shard key or if you need to
enforce uniqueness over multiple fields, you must create another
:term:`collection` to act as a "proxy collection". This collection
must contain both a reference to the original document (i.e. its
``ObjectId``) and the unique key.

Consider a collection ``records`` that stores user information. The
field ``email`` is not the shard key, but needs to be unique.

The ``proxy`` collection then would contain the following:

.. code-block:: javascript

   {
     "_id" : ObjectId("...")
     "parent_id" : "<ID>"
     "email" : "<string>"
   }

Use the following command to create a unique index on the ``email`` field:

.. code-block:: javascript

   db.proxy.createIndex( { "email" : 1 }, { unique : true } )

The following example first attempts to insert a document containing the
target field and a generated Unique ID into the ``proxy`` collection. If the
operation is successful, then it inserts the full document into the
``records`` collection.

.. code-block:: javascript

   records = db.getSiblingDB('records');
   proxy = db.getSiblingDB('proxy');

   var primary_id = ObjectId();

   proxy.insertOne({
      "_id" : primary_id
      "email" : "example@example.net"
   })

   // if: the above operation returns successfully,
   // then continue:

   records.insertOne({
      "_id" : primary_id
      "email": "example@example.net"
      // additional information...
   })

Note that this methodology requires creating a unique ID for the
``primary_id`` field rather than letting MongoDB automatically create
it on document insertion.

If you need to enforce uniqueness on multiple fields, then
each field would require its own proxy collection.

.. see:: The full documentation of: :method:`~db.collection.createIndex()`
   and :dbcommand:`shardCollection`.

Considerations
~~~~~~~~~~~~~~

- Your application must catch errors when inserting documents into the
  "proxy" collection and must enforce consistency between the two
  collections.

- If the proxy collection requires sharding, you must shard on the
  single field on which you want to enforce uniqueness.

- To enforce uniqueness on more than one field using sharded proxy
  collections, you must have *one* proxy collection for *every* field
  for which to enforce uniqueness. If you create multiple unique
  indexes on a single proxy collection, you *cannot* be able to
  shard proxy collections.

