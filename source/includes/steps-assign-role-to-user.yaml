title: Connect with the Privilege to Grant Roles
stepnum: 1
ref: connect-with-grant-role-privileges
pre: |
  Connect to the :program:`mongod` or :program:`mongos` as a user with the
  :authaction:`grantRole` actions on the role's database.
action:
  pre: |
    The following example operation connects to the MongoDB instance as a user
    named ``roleManager``:
  language: javascript
  code: |
    mongo --port 27017 -u roleManager -p 12345678 --authenticationDatabase admin
---
title: Verify Your Privileges
stepnum: 2
ref: verify-grant-role-privileges
pre: |
  Verify that the user you are connected as has the :authaction:`grantRole`
  actions on the ``admin`` database.
action:
  pre: |
    The following example operation checks privileges for the user connected
    as ``roleManager``:
    language: javascript
    code: |
      db.runCommand(
         {
           usersInfo:"roleManager",
           showPrivileges:true
         }
      )
  post: |
    The resulting ``users`` document displays the privileges granted to the user.
---
source:
  file: steps-change-user-privileges.yaml
  ref: collect-roles
---
source:
  file: steps-change-user-privileges.yaml
  ref: identify-privileges
---
source:
  file: steps-change-user-privileges.yaml
  ref: select-roles-to-modify
---
title: Grant the Role to the User
stepnum: 6
ref: grant-role-to-user
pre: |
  Grant the user the role using the :method:`db.grantRolesToUser()` method.
pre: |
  For example:
action:
  language: javascript
  code: |
    use admin
    db.grantRolesToUser(
      "accountAdmin01",
      [
        { 
          role: "readWrite", db: "products"
        },
        {
          role: "readAnyDatabase", db:"admin"
        }
      ]
    )
...
