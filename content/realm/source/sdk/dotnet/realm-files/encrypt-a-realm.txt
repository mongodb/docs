.. meta::
   :robots: noindex, nosnippet

.. _dotnet-encrypt-a-realm:
.. _dotnet-realm-encryption:

==========================
Encrypt a Realm - .NET SDK
==========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can encrypt your realms to ensure that the data stored to disk can't be 
read outside of your application. You encrypt the realm file on 
disk with AES-256 + SHA-2 by supplying a 64-byte encryption key when 
:ref:`opening the realm <dotnet-open-a-realm>`.

Realm transparently encrypts and decrypts data with standard
:wikipedia:`AES-256 encryption <Advanced_Encryption_Standard>` using the
first 256 bits of the given 512-bit encryption key. Realm
uses the other 256 bits of the 512-bit encryption key to validate
integrity using a :wikipedia:`hash-based message authentication code
(HMAC) <HMAC>`.

.. include:: /includes/encrypt-use-strong-cryptographic-hash.rst

.. note:: Cannot Encrypt an Existing Unencrypted Realm

    You must encrypt a realm the first time you open it. 
    If you try to open an existing unencrypted realm using a configuration
    that contains an encryption key, Realm throws an error.

    .. update with writeCopy API when available

Considerations
--------------

The following are key impacts to consider when encrypting a realm.

Storing & Reusing Keys
~~~~~~~~~~~~~~~~~~~~~~

You **must** pass the same encryption key every time you open the encrypted realm. 
If you don't provide a key or specify the wrong key for an encrypted
realm, the Realm SDK throws an error.

Apps should store the encryption key securely, typically in the target 
platform's secure key/value storage, so that other apps cannot read the key.
For example, you can use 
:maui:`MAUI Secure Storage <platform-integration/storage/secure-storage>` or    
:xamarin:`Xamarin Secure Storage <essentials/secure-storage>` to 
simplify the access to underlying storage. Ultimately, it is the developer's 
responsibility to ensure that attackers cannot access the key.

Performance Impact
~~~~~~~~~~~~~~~~~~

Reads and writes on encrypted realms can be up to 10% slower than unencrypted realms.

.. important::

   The same encryption key must be supplied every time you obtain a Realm instance.
   If you don't provide a key, or specify the wrong key, for an encrypted 
   Realm, you will get a 
   :dotnet-sdk:`RealmFileAccessErrorException <reference/Realms.Exceptions.RealmFileAccessErrorException.html>` 
   when you call ``GetInstance``.

Encryption and Atlas Device Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can encrypt a :ref:`synced realm <dotnet-sync>`. 

If you need unique keys for each user of your application, you can use an OAuth 
provider (such as :maui:`MAUI.Auth <platform-integration/communication/authentication>`) and 
:xamarin:`Xamarin.Auth <essentials/web-authenticator>`), or use one of the 
:ref:`Realm Authentication providers <users-and-authentication>` and an 
:ref:`Authentication Trigger<authentication-triggers>` 
to create a 64-bit key and store that key in :ref:`a user object <user-objects>`.

Accessing an Encrypted Realm from Multiple Process
--------------------------------------------------

.. versionchanged:: 11.0.0

Starting with Realm .NET SDK version 11.0.0, Realm supports opening
the same encrypted realm in multiple processes. 

In earlier versions of the Realm .NET SDK, you cannot open the same 
encrypted realm from multiple processes. Attempting to do so throws the error:
"Encrypted interprocess sharing is currently unsupported."


Example
-------

.. include:: /includes/encrypt-use-strong-cryptographic-hash.rst

The following code demonstrates how to generate an encryption key and
open an encrypted realm:

.. literalinclude:: /examples/generated/dotnet/EncryptionExamples.snippet.encrypt_a_realm.cs
   :language: csharp
