.. _golang-mongoclient:

====================
Create a MongoClient
====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: connection string, URI, Atlas, code example

Overview
--------

In this guide, you can learn how to connect to a `MongoDB Atlas deployment
<https://www.mongodb.com/docs/atlas>`__, a MongoDB instance, or a replica set
using the {+driver-short+}.

To connect to a MongoDB deployment, you need the following two things:

- **Connection URI**, also known as a *connection string*, which tells the {+driver-short+}
  which MongoDB deployment to connect to.

- **MongoClient** object, which creates the connection to and performs operations
  on the MongoDB deployment.

You can use ``options.Client()`` to customize the way the {+driver-short+}
behaves while connected to MongoDB.

Connection URI
--------------

A standard connection string includes the following components:

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Component
     - Description

   * - ``mongodb://``

     - Required. A prefix that identifies this as a string in the
       standard connection format.

   * - ``username:password``

     - Optional. Authentication credentials. If you include these, the client
       authenticates the user against the database specified in ``authSource``.
       For more information about the ``authSource`` connection option, 
       see the :ref:`golang-connection-troubleshooting` guide.

   * - ``host[:port]``

     - Required. The host and optional port number where MongoDB is running. If you don't
       include the port number, the driver uses the default port, ``27017``.

   * - ``/defaultauthdb``
     
     - Optional. The authentication database to use if the
       connection string includes ``username:password@``
       authentication credentials but not the ``authSource`` option.  
       When you call ``client.db()`` with no argument, this is the database that is used. If you don't include 
       this component, the client authenticates the user against the ``admin`` database.

   * - ``?<options>``

     - Optional. A query string that specifies connection-specific
       options as ``<name>=<value>`` pairs. See
       :ref:`golang-connection-options` for a full description of
       these options.

.. tip::

   To retrieve a connection string for an Atlas deployment, follow the
   :ref:`Quick Start guide <golang-connect-to-your-cluster>`.

For more information about creating a connection string, see :manual:`Connection
Strings </reference/connection-string>` in the MongoDB Server documentation.

.. _golang-usage-examples-env-variable:

Environment Variable
~~~~~~~~~~~~~~~~~~~~

You can access your connection string as an environment variable
by using the following code: 

.. code-block:: go

   uri := os.Getenv("MONGODB_URI")

You can use `GoDotEnv <https://github.com/joho/godotenv>`__ to define
your environment variable.

Add the following application configuration in your ``.env`` file at the
root of your project, replacing the placeholders with the values for your
deployment's connection string. To learn more, see the
`GoDotEnv documentation <https://github.com/joho/godotenv#usage>`__.

.. code-block::

   MONGODB_URI=mongodb+srv://<db_username>:<db_password>@<cluster-url>?retryWrites=true&w=majority

Create a Client to Connect to MongoDB Atlas 
-------------------------------------------

To connect to MongoDB, you must create a client. A client manages your
connections and runs database commands.

You can create a client that uses your connection string and other client
options by passing a ``ClientOptions`` object to the ``Connect()`` method.

To specify your connection URI, pass it to the ``ApplyURI()`` method, which
returns a new ``ClientOptions`` instance. To set any other options, call the
relevant helper method from the options package.

.. tip:: Reuse Your Client with Connection Pools

   We recommend that you reuse your client across sessions and operations by
   using a connection pool. You can use the same ``Client`` instance to perform
   multiple tasks, instead of creating a new one each time. The ``Client`` type
   is safe for concurrent use by multiple `goroutines
   <https://go.dev/tour/concurrency/1>`__. To learn more about how connection
   pools work in the driver, see the :ref:`golang-connection-pools` guide.

To learn more about connection options, see the :ref:`Connection Options
<golang-connection-options>` section. To learn more about creating a client, see
the API documentation for `Client <{+api+}/mongo#Client>`__ and `Connect()
<{+api+}/mongo#Connect>`__.

You can set the {+stable-api+} version as an option to avoid breaking changes
when you upgrade to a new server version. To learn more about the {+stable-api+}
feature, see the :ref:`{+stable-api+} page <golang-stable-api>`.

.. _go-connection-example-code:

Example
~~~~~~~

The following code shows how you can create a client that uses an Atlas
connection string and the {+stable-api+} version, connects to MongoDB, and verifies
that the connection is successful:

.. literalinclude:: /includes/fundamentals/code-snippets/srv.go
   :language: go
   :copyable:
   :dedent:

Additional Resources
--------------------

For more information about the concepts in this guide, see the following
documentation:

- :manual:`Connection Strings </reference/connection-string>` in the Server
  manual
- :manual:`Connection String Options </reference/connection-string>` in the
  Server manual
- :atlas:`Driver Connection </driver-connection/>` guide in the Atlas documentation
  and select :guilabel:`Go` from the language dropdown

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the methods and types discussed in this guide, see the
following API Documentation:

- `Client <{+api+}/mongo#Client>`__
- `ClientOptions <{+api+}/mongo/options#ClientOptions>`__
