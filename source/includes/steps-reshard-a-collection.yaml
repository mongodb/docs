title: Start the resharding operation.
level: 4
ref: resharding-start
content: |

   While connected to the :binary:`~bin.mongos`, issue a
   :dbcommand:`reshardCollection` command that specifies the collection
   to be resharded and the new shard key:

   .. code-block:: javascript

      db.adminCommand({
        reshardCollection: "<database>.<collection>",
        key: <shardkey>
      })

   MongoDB sets the max number of seconds to block writes to two seconds
   and begins the resharding operation.
---
title: Monitor the resharding operation.
level: 4
ref: resharding-monitor
content: |

   To monitor the resharding operation, you can use the
   :pipeline:`$currentOp` pipeline stage:

   .. code-block:: javascript

      db.getSiblingDB("admin").aggregate([
        { $currentOp: { localOps: false } },
        {
          $match: {
            type: "op",
            "originatingCommand.reshardCollection": "<database>.<collection>"
          }
        }
      ])

   .. note::

      To see updated values, you need to continuously run the
      preceeding pipeline.

   The :pipeline:`$currentOp` pipeline outputs:

   - ``totalOperationTimeElapsedSecs``: elapsed operation time in
     seconds
   - ``remainingOperationTimeEstimatedSecs``: estimate of the remaining
     time to complete the resharding operation

   .. code-block:: javascript

      [
        {
          shard: '<shard>',
          type: 'op',
          desc: 'ReshardingRecipientService | ReshardingDonorService | ReshardingCoordinatorService <reshardingUUID>',
          op: 'command',
          ns: '<database>.<collection>',
          originatingCommand: {
            reshardCollection: '<database>.<collection>',
            key: <shardkey>,
            unique: <boolean>,
            collation: { locale: 'simple' }
          },
          totalOperationTimeElapsedSecs: <number>,
          remainingOperationTimeEstimatedSecs: <number>,
          ...
        },
        ...
      ]

---
title: Finish the resharding operation.
level: 4
ref: resharding-finish
content: |

   Throughout the resharding process, the estimated time to complete the
   resharding operation (``remainingOperationTimeEstimatedSecs``)
   decreases. When the estimated time is below **two seconds**, MongoDB
   blocks writes and completes the resharding operation. Until the
   estimated time to complete the resharing operation is below two
   seconds, the resharding operation does not block writes by default.
   During the time period where writes are blocked your application
   experiences an increase in latency.

   Once the resharding process has completed, the resharding command
   returns ``ok: 1``.

   .. code-block:: javascript

      {
        ok: 1,
        '$clusterTime': {
          clusterTime: <timestamp>,
          signature: {
            hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
            keyId: <number>
          }
        },
        operationTime: <timestamp>
      }

   To see whether the resharding operation completed successfully, check
   the output of the :method:`sh.status()` method:

   .. code-block:: javascript

      sh.status()

   The :method:`sh.status()` method output contains a subsection for the
   ``databases``. If resharding has completed successfully, the output
   lists the new shard key for the collection:

   .. code-block:: javascript

      databases
      [
        {
           database: {
           _id: '<database>',
           primary: '<shard>',
           partitioned: true,
           version: {
             uuid: <uuid>,
             timestamp: <timestamp>,
             lastMod: <number>
           }
         },
         collections: {
           '<database>.<collection>': {
             shardKey: <shardkey>,
             unique: <boolean>,
             balancing: <boolean>,
             chunks: [],
             tags: []
           }
         }
        }
        ...
      ]

   .. note::

      If the resharded collection uses :atlas:`Atlas Search
      </atlas-search>`, the search index will become unavailable when
      the resharding operation completes. You need to manually rebuild
      the search index once the resharding operation completes.

   Block writes early to force resharding to complete
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   You can manually force the resharding operation to complete by
   issuing the :dbcommand:`commitReshardCollection` command. This is
   useful if the current time estimate to complete the resharding
   operation is an acceptable duration for your collection to block
   writes. The :dbcommand:`commitReshardCollection` command blocks
   writes early and forces the resharding operation to complete. The
   command has the following syntax:

   .. code-block:: javascript

      db.adminCommand({
        commitReshardCollection: "<database>.<collection>"
      })

   Abort resharding operation
   ~~~~~~~~~~~~~~~~~~~~~~~~~~

   You can abort the resharding operation during any stage of the
   resharding operation, even after running the
   :dbcommand:`commitReshardCollection`, until shards have fully caught
   up.

   For example, if the write unavailability duration estimate does not
   decrease, you can abort the resharding operation with the
   :dbcommand:`abortReshardCollection` command:

   .. code-block:: javascript

      db.adminCommand({
        abortReshardCollection: "<database>.<collection>"
      })

   After canceling the operation, you can retry the resharding
   operation during a time window with lower write volume. If this is
   not possible, :ref:`add more shards <sharding-procedure-add-shard>`
   before retrying.

...
