# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/write-operations-introduction.txt:6
msgid "Write Operations Overview"
msgstr ""

#: ../source/core/write-operations-introduction.txt:10
msgid ""
"A write operation is any operation that creates or modifies data in the "
"MongoDB instance. In MongoDB, write operations target a single "
":term:`collection`. All write operations in MongoDB are atomic on the level "
"of a single :term:`document`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:15
msgid ""
"There are three classes of write operations in MongoDB: :ref:`insert <write-"
"op-insert>`, :ref:`update <write-op-update>`, and :ref:`remove <write-op-"
"remove>`. Insert operations add new data to a collection. Update operations "
"modify existing data, and remove operations delete data from a collection. "
"No insert, update, or remove can affect more than one document atomically."
msgstr ""

#: ../source/core/write-operations-introduction.txt:22
msgid ""
"For the update and remove operations, you can specify criteria, or "
"conditions, that identify the documents to update or remove. These "
"operations use the same query syntax to specify the criteria as :doc:`read "
"operations </core/read-operations>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:27
msgid ""
"MongoDB allows applications to determine the acceptable level of "
"acknowledgement required of write operations. See :doc:`/core/write-concern`"
" for more information."
msgstr ""

#: ../source/core/write-operations-introduction.txt:34
msgid "Insert"
msgstr ""

#: ../source/core/write-operations-introduction.txt:36
msgid ""
"In MongoDB, the :method:`db.collection.insert()` method adds new "
":term:`documents <document>` to a collection."
msgstr ""

#: ../source/core/write-operations-introduction.txt:39
msgid ""
"The following diagram highlights the components of a MongoDB insert "
"operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:44
#: ../source/core/write-operations-introduction.txt:109
#: ../source/core/write-operations-introduction.txt:188
msgid "The following diagram shows the same query in SQL:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:0
#: ../source/core/write-operations-introduction.txt:0
#: ../source/core/write-operations-introduction.txt:0
msgid "Example"
msgstr ""

#: ../source/core/write-operations-introduction.txt:50
msgid ""
"The following operation inserts a new document into the ``users`` "
"collection. The new document has four fields ``name``, ``age``, and "
"``status``, and an ``_id`` field. MongoDB always adds the ``_id`` field to "
"the new document if that field does not exist."
msgstr ""

#: ../source/core/write-operations-introduction.txt:65
msgid ""
"For more information and examples, see :method:`db.collection.insert()`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:68
msgid "Insert Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:70
msgid ""
"If you add a new document *without* the :term:`_id` field, the client "
"library or the :program:`mongod` instance adds an ``_id`` field and "
"populates the field with a unique :term:`ObjectId <objectid>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:74
msgid ""
"If you specify the ``_id`` field, the value must be unique within the "
"collection. For operations with :ref:`write concern <write-concern>`, if you"
" try to create a document with a duplicate ``_id`` value, :program:`mongod` "
"returns a duplicate key exception."
msgstr ""

#: ../source/core/write-operations-introduction.txt:80
msgid "Other Methods to Add Documents"
msgstr ""

#: ../source/core/write-operations-introduction.txt:82
msgid ""
"You can also add new documents to a collection using methods that have an "
":ref:`upsert <write-operations-upsert-behavior>` option. If the option is "
"set to ``true``, these methods will either modify existing documents or add "
"a new document when no matching documents exist for the query. For more "
"information, see :ref:`write-operations-upsert-behavior`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:91
msgid "Update"
msgstr ""

#: ../source/core/write-operations-introduction.txt:93
msgid ""
"In MongoDB, the :method:`db.collection.update()` method modifies existing "
":term:`documents <document>` in a :term:`collection`. The "
":method:`db.collection.update()` method can accept query criteria to "
"determine which documents to update as well as an options document that "
"affects its behavior, such as the ``multi`` option to update multiple "
"documents."
msgstr ""

#: ../source/core/write-operations-introduction.txt:100
msgid ""
"Operations performed by an update are atomic within a single document. For "
"example, you can safely use the :update:`$inc` and :update:`$mul` operators "
"to modify frequently-changed fields in concurrent applications."
msgstr ""

#: ../source/core/write-operations-introduction.txt:104
msgid ""
"The following diagram highlights the components of a MongoDB update "
"operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:123
msgid ""
"This update operation on the ``users`` collection sets the ``status`` field "
"to ``A`` for the documents that match the criteria of ``age`` greater than "
"``18``."
msgstr ""

#: ../source/core/write-operations-introduction.txt:127
msgid ""
"For more information, see :method:`db.collection.update()` and "
":ref:`update() Examples <update-method-examples>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:133
msgid "Default Update Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:135
msgid ""
"By default, the :method:`db.collection.update()` method updates a **single**"
" document. However, with the ``multi`` option, "
":method:`~db.collection.update()` can update all documents in a collection "
"that match a query."
msgstr ""

#: ../source/core/write-operations-introduction.txt:140
msgid ""
"The :method:`db.collection.update()` method either updates specific fields "
"in the existing document or replaces the document. See "
":method:`db.collection.update()` for details as well as examples."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:1
msgid ""
"When performing update operations that increase the document size beyond the"
" allocated space for that document, the update operation relocates the "
"document on disk."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:7
msgid ""
"MongoDB preserves the order of the document fields following write "
"operations *except* for the following cases:"
msgstr ""

#: ../source/includes/fact-update-field-order.rst:10
msgid "The ``_id`` field is always the first field in the document."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:12
msgid ""
"Updates that include :update:`renaming <$rename>` of field names may result "
"in the reordering of fields in the document."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:17
msgid ""
"Starting in version 2.6, MongoDB actively attempts to preserve the field "
"order in a document. Before version 2.6, MongoDB did not actively preserve "
"the order of the fields in a document."
msgstr ""

#: ../source/core/write-operations-introduction.txt:149
msgid "Update Behavior with the ``upsert`` Option"
msgstr ""

#: ../source/core/write-operations-introduction.txt:151
msgid ""
"If the :method:`~db.collection.update()` method includes :ref:`upsert: true "
"<upsert-parameter>` *and* no documents match the query portion of the update"
" operation, then the update operation creates a new document. If there are "
"matching documents, then the update operation with the :ref:`upsert: true "
"<upsert-parameter>` modifies the matching document or documents."
msgstr ""

#: ../source/core/write-operations-introduction.txt:158
msgid ""
"By specifying :term:`upsert: true <upsert>`, applications can indicate, in a"
" *single* operation, that if no matching documents are found for the update,"
" an insert should be performed. See :method:`~db.collection.update()` for "
"details on performing an :ref:`upsert <upsert-parameter>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:166
msgid ""
"In 2.6, the new :method:`Bulk()` methods and the underlying "
":dbcommand:`update` command allow you to perform many updates with ``upsert:"
" true`` operations in a single call."
msgstr ""

#: ../source/core/write-operations-introduction.txt:170
msgid ""
"If you create documents using the ``upsert`` option to "
":method:`~db.collection.update()` consider using a :ref:`a unique index "
"<update-with-unique-indexes>` to prevent duplicated operations."
msgstr ""

#: ../source/core/write-operations-introduction.txt:177
msgid "Remove"
msgstr ""

#: ../source/core/write-operations-introduction.txt:179
msgid ""
"In MongoDB, the :method:`db.collection.remove()` method deletes documents "
"from a collection. The :method:`db.collection.remove()` method accepts a "
"query criteria to determine which documents to remove."
msgstr ""

#: ../source/core/write-operations-introduction.txt:183
msgid ""
"The following diagram highlights the components of a MongoDB remove "
"operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:200
msgid ""
"This delete operation on the ``users`` collection removes all documents that"
" match the criteria of ``status`` equal to ``D``."
msgstr ""

#: ../source/core/write-operations-introduction.txt:203
msgid ""
"For more information, see :method:`db.collection.remove()` method and "
":doc:`/tutorial/remove-documents`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:207
msgid "Remove Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:209
msgid ""
"By default, :method:`db.collection.remove()` method removes all documents "
"that match its query. However, the method can accept a flag to limit the "
"delete operation to a single document."
msgstr ""

#: ../source/core/write-operations-introduction.txt:216
msgid "Isolation of Write Operations"
msgstr ""

#: ../source/core/write-operations-introduction.txt:218
msgid ""
"The modification of a single document is always atomic, even if the write "
"operation modifies multiple embedded documents *within* that document. No "
"other operations are atomic."
msgstr ""

#: ../source/core/write-operations-introduction.txt:222
msgid ""
"If a write operation modifies multiple documents, the operation as a whole "
"is not atomic, and other operations may interleave. You can, however, "
"attempt to isolate a write operation that affects multiple documents using "
"the :doc:`isolation operator </reference/operator/update/isolated>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:228
msgid "For more information :doc:`/core/write-operations-atomicity`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:231
msgid "Additional Methods"
msgstr ""

#: ../source/core/write-operations-introduction.txt:233
msgid ""
"The :method:`db.collection.save()` method can either update an existing "
"document or insert a document if the document cannot be found by the ``_id``"
" field. See :method:`db.collection.save()` for more information and "
"examples."
msgstr ""

#: ../source/core/write-operations-introduction.txt:238
msgid ""
"MongoDB also provides methods to perform write operations in bulk. See "
":method:`Bulk()` for more information."
msgstr ""

#: ../source/core/write-operations-introduction.txt:1
#: ../source/core/write-operations-introduction.txt:2
msgid "write operations"
msgstr ""

#: ../source/core/write-operations-introduction.txt:2
msgid "crud"
msgstr ""
