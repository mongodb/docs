===================
revokeRolesFromUser
===================

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: revokeRolesFromUser

   Removes a one or more roles from a user, on the database where the
   roles exist. The :dbcommand:`revokeRolesFromUser` command uses the
   following syntax:

   .. code-block:: javascript

      { revokeRolesFromUser: "<user>",
        roles: [
          { role: "<role>", db: "<database>" } | "<role>",
          ...
        ],
        writeConcern: { <write concern> }
      }

   The command has the following fields:

   .. include:: /reference/command/revokeRolesFromUser-field.rst

.. TODO rename section (or something)

Considerations
--------------

.. |local-cmd-name| replace:: :dbcommand:`revokeRolesFromUser`
.. include:: /includes/fact-roles-array-contents.rst

Required Access
---------------

.. include:: /includes/access-revoke-role-from-user.rst

Example
-------

Given a user ``Erin`` in the ``products`` database with the following
roles:

.. code-block:: javascript

   "roles" : [
       { "role" : "assetsReader",
         "db" : "assets"
       },
       { "role" : "read",
         "db" : "stock"
       },
       { "role" : "readWrite",
         "db" : "products"
       }
   ]

The following :dbcommand:`revokeRolesFromUser` command removes the
:authrole:`read` role on the ``stock`` database and the
:authrole:`readWrite` role from the ``products`` database, where the
command runs:

.. code-block:: javascript

   use products
   db.runCommand( { revokeRolesFromUser: "Erin",
                    roles: [
                             { role: "read", db: "stock" },
                             { role: "readWrite", db: "products" }
                    ],
                    writeConcern: { w: "majority" }
                } )

The user ``Erin`` in the ``products`` database  now has only one role:

.. code-block:: javascript

   "roles" : [
       { "role" : "assetsReader",
         "db" : "assets"
       }
   ]
