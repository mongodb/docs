#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/journaling.txt:5
msgid "Journaling"
msgstr ""

#: ../source/core/journaling.txt:15
msgid ""
"To provide durability in the event of a failure, MongoDB uses *write "
"ahead logging* to on-disk :term:`journal` files."
msgstr ""

#: ../source/core/journaling.txt:21
msgid "Journaling and the WiredTiger Storage Engine"
msgstr ""

#: ../source/core/journaling.txt:25
msgid ""
"The *log* mentioned in this section refers to the WiredTiger write-ahead "
"log (i.e. the journal) and not the MongoDB log file."
msgstr ""

#: ../source/core/journaling.txt:28
msgid ""
":doc:`WiredTiger </core/wiredtiger>` uses :ref:`checkpoints <storage-"
"wiredtiger-checkpoints>` to provide a consistent view of data on disk and"
" allow MongoDB to recover from the last checkpoint. However, if MongoDB "
"exits unexpectedly in between checkpoints, journaling is required to "
"recover information that occurred after the last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:34
msgid "With journaling, the recovery process:"
msgstr ""

#: ../source/core/journaling.txt:36
msgid "Looks in the data files to find the identifier of the last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:39
msgid ""
"Searches in the journal files for the record that matches the identifier "
"of the last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:42
msgid "Apply the operations in the journal files since the last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:47 ../source/core/journaling.txt:121
msgid "Journaling Process"
msgstr ""

#: ../source/core/journaling.txt:51
msgid ""
"With journaling, WiredTiger creates one journal record for each client "
"initiated write operation. The journal record includes any internal write"
" operations caused by the initial write. For example, an update to a "
"document in a collection may result in modifications to the indexes; "
"WiredTiger creates a single journal record that includes both the update "
"operation and its associated index modifications."
msgstr ""

#: ../source/core/journaling.txt:58
msgid ""
"MongoDB configures WiredTiger to use in-memory buffering for storing the "
"journal records. Threads coordinate to allocate and copy into their "
"portion of the buffer. All journal records up to 128 kB are buffered."
msgstr ""

#: ../source/core/journaling.txt:63
msgid ""
"WiredTiger syncs the buffered journal records to disk according to the "
"following intervals or conditions:"
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:1
msgid "Every 50 milliseconds."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:4
msgid ""
"MongoDB sets checkpoints to occur in WiredTiger on user data at an "
"interval of 60 seconds."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:8
msgid ""
"If the write operation includes a write concern of :writeconcern:`j: true"
" <j>`, WiredTiger forces a sync of the WiredTiger journal files."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:11
msgid ""
"Because MongoDB uses a journal file size limit of 100 MB, WiredTiger "
"creates a new journal file approximately every 100 MB of data. When "
"WiredTiger creates a new journal file, WiredTiger syncs the previous "
"journal file."
msgstr ""

#: ../source/core/journaling.txt:70
msgid ""
"In between write operations, while the journal records remain in the "
"WiredTiger buffers, updates can be lost following a hard shutdown of "
":binary:`~bin.mongod`."
msgstr ""

#: ../source/core/journaling.txt:75
msgid ""
"The :dbcommand:`serverStatus` command returns information on the "
"WiredTiger journal statistics in the :data:`wiredTiger.log <data:: "
"serverStatus.wiredTiger.log>` field."
msgstr ""

#: ../source/core/journaling.txt:80 ../source/core/journaling.txt:179
msgid "Journal Files"
msgstr ""

#: ../source/core/journaling.txt:82
msgid ""
"For the journal files, MongoDB creates a subdirectory named ``journal`` "
"under the :setting:`~storage.dbPath` directory. WiredTiger journal files "
"have names with the following format ``WiredTigerLog.<sequence>`` where "
"``<sequence>`` is a zero-padded number starting from ``0000000001``."
msgstr ""

#: ../source/core/journaling.txt:88
msgid ""
"Journal files contain a record per each write operation. Each record has "
"a unique identifier."
msgstr ""

#: ../source/core/journaling.txt:91
msgid ""
"MongoDB configures WiredTiger to use snappy compression for the "
"journaling data."
msgstr ""

#: ../source/includes/fact-wiredtiger-log-compression-limit.rst:1
msgid ""
"Minimum log record size for WiredTiger is 128 bytes. If a log record is "
"128 bytes or smaller, WiredTiger does not compress that record."
msgstr ""

#: ../source/core/journaling.txt:96
msgid ""
"WiredTiger journal files for MongoDB have a maximum size limit of "
"approximately 100 MB. Once the file exceeds that limit, WiredTiger "
"creates a new journal file."
msgstr ""

#: ../source/core/journaling.txt:100
msgid ""
"WiredTiger automatically removes old journal files to maintain only the "
"files needed to recover from last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:103
msgid "WiredTiger will pre-allocate journal files."
msgstr ""

#: ../source/core/journaling.txt:108
msgid "Journaling and the MMAPv1 Storage Engine"
msgstr ""

#: ../source/core/journaling.txt:110
msgid ""
"With :doc:`MMAPv1 </core/mmapv1>`, when a write operation occurs, MongoDB"
" updates the in-memory view. With journaling enabled, MongoDB writes the "
"in-memory changes first to on-disk journal files. If MongoDB should "
"terminate or encounter an error before committing the changes to the data"
" files, MongoDB can use the journal files to apply the write operation to"
" the data files and maintain a consistent state."
msgstr ""

#: ../source/core/journaling.txt:123
msgid ""
"With journaling, MongoDB's storage layer has two internal views of the "
"data set: the *private view*, used to write to the journal files, and the"
" *shared view*, used to write to the data files:"
msgstr ""

#: ../source/core/journaling.txt:127
msgid "MongoDB first applies write operations to the private view."
msgstr ""

#: ../source/core/journaling.txt:129
msgid ""
"MongoDB then applies the changes in the private view to the on-disk "
":ref:`journal files <journaling-journal-files>` in the ``journal`` "
"directory roughly every 100 milliseconds. MongoDB records the write "
"operations to the on-disk journal files in batches called *group "
"commits*. Grouping the commits help minimize the performance impact of "
"journaling since these commits must block all writers during the commit. "
"Writes to the journal are atomic, ensuring the consistency of the on-disk"
" journal files. For information on the frequency of the commit interval, "
"see :setting:`storage.journal.commitIntervalMs`."
msgstr ""

#: ../source/core/journaling.txt:140
msgid ""
"Upon a journal commit, MongoDB applies the changes from the journal to "
"the shared view."
msgstr ""

#: ../source/core/journaling.txt:143
msgid ""
"Finally, MongoDB applies the changes in the shared view to the data "
"files. More precisely, at default intervals of 60 seconds, MongoDB asks "
"the operating system to flush the shared view to the data files. The "
"operating system may choose to flush the shared view to disk at a higher "
"frequency than 60 seconds, particularly if the system is low on free "
"memory. To change the interval for writing to the data files, use the "
":setting:`storage.syncPeriodSecs` setting."
msgstr ""

#: ../source/core/journaling.txt:151
msgid ""
"If the :binary:`~bin.mongod` instance were to crash without having "
"applied the writes to the data files, the journal could replay the writes"
" to the shared view for eventual write to the data files."
msgstr ""

#: ../source/core/journaling.txt:155
msgid ""
"When MongoDB flushes write operations to the data files, MongoDB notes "
"which journal writes have been flushed. Once a journal file contains only"
" flushed writes, it is no longer needed for recovery and MongoDB can "
"recycle it for a new journal file."
msgstr ""

#: ../source/core/journaling.txt:160
msgid ""
"Once the journal operations have been applied to the shared view and "
"flushed to disk (i.e. pages in the shared view and  private view are in "
"sync), MongoDB asks the operating system to remap the shared view to the "
"private view in order to save physical RAM. MongoDB routinely asks the "
"operating system to remap the shared view to the private view in order to"
" save physical RAM. Upon a new remapping, the operating system knows that"
" physical memory pages can be shared between the shared view and the "
"private view mappings."
msgstr ""

#: ../source/core/journaling.txt:171
msgid ""
"The interaction between the shared view and the on-disk data files is "
"similar to how MongoDB works *without* journaling. Without journaling, "
"MongoDB asks the operating system to flush in-memory changes to the data "
"files every 60 seconds."
msgstr ""

#: ../source/core/journaling.txt:181
msgid ""
"With journaling enabled, MongoDB creates a subdirectory named ``journal``"
" under the :setting:`~storage.dbPath` directory. The ``journal`` "
"directory contains journal files named ``j._<sequence>`` where "
"``<sequence>`` is an integer starting from ``0`` and a \"last sequence "
"number\" file ``lsn``."
msgstr ""

#: ../source/core/journaling.txt:187
msgid ""
"Journal files contain the write ahead logs; each journal entry describes "
"the bytes the write operation changed in the data files. Journal files "
"are append-only files. When a journal file holds 1 gigabyte of data, "
"MongoDB creates a new journal file. If you use the "
":setting:`storage.smallFiles` option when starting :binary:`~bin.mongod`,"
" you limit the size of each journal file to 128 megabytes."
msgstr ""

#: ../source/core/journaling.txt:194
msgid ""
"The ``lsn`` file contains the last time MongoDB flushed the changes to "
"the data files."
msgstr ""

#: ../source/core/journaling.txt:197
msgid ""
"Once MongoDB applies all the write operations in a particular journal "
"file to the data files, MongoDB can recycle it for a new journal file."
msgstr ""

#: ../source/core/journaling.txt:200
msgid ""
"Unless you write *many* bytes of data per second, the ``journal`` "
"directory should contain only two or three journal files."
msgstr ""

#: ../source/core/journaling.txt:203
msgid ""
"A clean shutdown removes all the files in the journal directory. A dirty "
"shutdown (crash) leaves files in the journal directory; these are used to"
" automatically recover the database to a consistent state when the mongod"
" process is restarted."
msgstr ""

#: ../source/core/journaling.txt:209
msgid "Journal Directory"
msgstr ""

#: ../source/core/journaling.txt:211
msgid ""
"To speed the frequent sequential writes that occur to the current journal"
" file, you can ensure that the journal directory is on a different "
"filesystem from the database data files."
msgstr ""

#: ../source/core/journaling.txt:217
msgid ""
"If you place the journal on a different filesystem from your data files, "
"you *cannot* use a filesystem snapshot alone to capture valid backups of "
"a :setting:`~storage.dbPath` directory. In this case, use "
":method:`~db.fsyncLock()` to ensure that database files are consistent "
"before the snapshot and :method:`~db.fsyncUnlock()` once the snapshot is "
"complete."
msgstr ""

#: ../source/core/journaling.txt:225
msgid "Preallocation Lag"
msgstr ""

#: ../source/core/journaling.txt:227
msgid ""
"MongoDB may preallocate journal files if the :binary:`~bin.mongod` "
"process determines that it is more efficient to preallocate journal files"
" than create new journal files as needed."
msgstr ""

#: ../source/core/journaling.txt:231
msgid ""
"Depending on your filesystem, you might experience a preallocation lag "
"the first time you start a :binary:`~bin.mongod` instance with journaling"
" enabled. The amount of time required to pre-allocate files might last "
"several minutes; during this time, you will not be able to connect to the"
" database. This is a one-time preallocation and does not occur with "
"future invocations."
msgstr ""

#: ../source/core/journaling.txt:238
msgid "To avoid preallocation lag, see :ref:`journaling-avoid-preallocation-lag`."
msgstr ""

#: ../source/core/journaling.txt:243
msgid "Journaling and the In-Memory Storage Engine"
msgstr ""

#: ../source/core/journaling.txt:245
msgid ""
"Starting in MongoDB Enterprise version 3.2.6, the :doc:`In-Memory Storage"
" Engine </core/inmemory>` is part of general availability (GA). Because "
"its data is kept in memory, there is no separate journal. Write "
"operations with a write concern of :writeconcern:`j: true <j>` are "
"immediately acknowledged."
msgstr ""

#: ../source/includes/extracts/no-journaling-writeConcernMajorityJournalDefault-false.rst:2
msgid ""
"If any voting member of a replica set runs without :ref:`journaling "
"<journaling-internals>` (i.e. either runs an :ref:`in-memory storage "
"engine<storage-inmemory>` or runs with journaling disabled), you must set"
" :rsconf:`writeConcernMajorityJournalDefault` to ``false``."
msgstr ""

#: ../source/includes/extracts/no-journaling-rollback.rst:2
msgid ""
"With :rsconf:`writeConcernMajorityJournalDefault` set to ``false``, "
"MongoDB does not wait for :writeconcern:`w: \"majority\" <\"majority\">` "
"writes to be written to the on-disk journal before acknowledging the "
"writes. As such, :writeconcern:`majority` write operations could possibly"
" roll back in the event of a transient loss (e.g. crash and restart) of a"
" majority of nodes in a given replica set."
msgstr ""

#: ../source/core/journaling.txt:255
msgid ":ref:`In-Memory Storage Engine: Durability <inmemory-durability>`"
msgstr ""

#~ msgid "Journaling Mechanics"
#~ msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "Storage Views used in Journaling"
#~ msgstr ""

#~ msgid "How Journaling Records Write Operations"
#~ msgstr ""

#~ msgid "document insertion/updates"
#~ msgstr ""

#~ msgid "index modifications"
#~ msgstr ""

#~ msgid "metadata changes to the namespace files"
#~ msgstr ""

#~ msgid "creation and dropping of databases and their associated data files"
#~ msgstr ""

# 75cde65ef88e49868cce1985b2c2dd24
#~ msgid "On this page"
#~ msgstr ""

# f5dac2090194473bb5dc7a0d8f02b8bf
#~ msgid ""
#~ "MongoDB sets checkpoints to occur in "
#~ "WiredTiger on user data at an "
#~ "interval of 60 seconds or when 2"
#~ " GB of journal data has been "
#~ "written, whichever occurs first."
#~ msgstr ""

# ab79d0b17fd246f598c540fb0160e03a
#~ msgid ""
#~ "In between write operations, while the"
#~ " journal records remain in the "
#~ "WiredTiger buffers, updates can be lost"
#~ " following a hard shutdown of "
#~ ":program:`mongod`."
#~ msgstr ""

# ff270d6dea344299bf7444a411055564
#~ msgid ""
#~ "If the :program:`mongod` instance were "
#~ "to crash without having applied the "
#~ "writes to the data files, the "
#~ "journal could replay the writes to "
#~ "the shared view for eventual write "
#~ "to the data files."
#~ msgstr ""

# 37d818e71358490e80bc394f5057e20c
#~ msgid ""
#~ "Journal files contain the write ahead"
#~ " logs; each journal entry describes "
#~ "the bytes the write operation changed"
#~ " in the data files. Journal files "
#~ "are append-only files. When a "
#~ "journal file holds 1 gigabyte of "
#~ "data, MongoDB creates a new journal "
#~ "file. If you use the "
#~ ":setting:`storage.smallFiles` option when starting"
#~ " :program:`mongod`, you limit the size "
#~ "of each journal file to 128 "
#~ "megabytes."
#~ msgstr ""

# 69d3a6974e7a45a49700c66e4eaf2dbc
#~ msgid ""
#~ "MongoDB may preallocate journal files if"
#~ " the :program:`mongod` process determines "
#~ "that it is more efficient to "
#~ "preallocate journal files than create "
#~ "new journal files as needed."
#~ msgstr ""

# 87e1166c23674fb0aacaa918343062de
#~ msgid ""
#~ "Depending on your filesystem, you might"
#~ " experience a preallocation lag the "
#~ "first time you start a :program:`mongod`"
#~ " instance with journaling enabled. The "
#~ "amount of time required to pre-"
#~ "allocate files might last several "
#~ "minutes; during this time, you will "
#~ "not be able to connect to the "
#~ "database. This is a one-time "
#~ "preallocation and does not occur with"
#~ " future invocations."
#~ msgstr ""

# f9e88894223441819aa563712fe305b8
#~ msgid ""
#~ "With :rsconf:`writeConcernMajorityJournalDefault` set "
#~ "to ``false``, MongoDB will not wait "
#~ "for :writeconcern:`w: \"majority\" <\"majority\">`"
#~ " writes to be durable before "
#~ "acknowledging the writes. As such, "
#~ ":writeconcern:`\"majority\"` write operations could"
#~ " possibly roll back in the event "
#~ "of a loss of a replica set "
#~ "member."
#~ msgstr ""

