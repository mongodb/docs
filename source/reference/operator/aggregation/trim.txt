=====================
$trim (aggregation)
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $trim

   .. versionadded:: 4.0

   Removes whitespace characters, including null, or the specified
   characters from the beginning and end of a string.

   :expression:`$trim` has the following syntax:

   .. code-block:: javascript

      { $trim: { input: <string>,  chars: <string> } }


   The :expression:`$trim` takes a document with the following fields:

   .. list-table::
      :widths: 20 80
      :header-rows: 1

      * - Field
        - Description

      * - ``input``

        - The string to trim. The argument can be any valid
          :ref:`expression <aggregation-expressions>` that resolves to
          a string. For more information on expressions, see
          :ref:`aggregation-expressions`.

      * - ``chars``

        - Optional. The character(s) to trim from ``input``.

          The argument can be any valid :ref:`expression
          <aggregation-expressions>` that resolves to a string. The
          :expression:`$trim` operator breaks down the string into
          individual UTF `code point
          <http://www.unicode.org/glossary/#code_point>`_ to trim from
          ``input``.

          If unspecified, :expression:`$trim` removes whitespace
          characters, including the null character. For the list of
          whitespace characters, see :ref:`trim-white-space`.

   .. seealso::

   :expression:`$ltrim` and :expression:`$rtrim`

Behavior
--------

- By default, :expression:`$trim` removes whitespace characters,
  including the null character:

  .. list-table::
     :header-rows: 1
     :widths: 60 20 20

     * - Example
       -
       - Results

     * - ``{ $trim: { input: "  \n good  bye \t  " } }``
       -
       - ``"good  bye"``

- You can override the default characters to trim using the ``chars``
  field.

  For example, the following trims any ``g`` and ``e`` from the start and end of the input. Since the input starts with a
  whitespace, neither character can be trimmed from the start of the
  string.

  .. list-table::
     :header-rows: 1
     :widths: 87 15

     * - Example
       - Results

     * - ``{ $trim: { input: " ggggoodbyeeeee", chars: "ge" } }``
       - ``" ggggoodby"``

- If overriding the default characters to trim, you can explicitly
  include the whitespace character(s) to trim in the ``chars`` field.

  For example, the following trims any space, ``g``, ``e`` from the
  start and end of the input.

  .. list-table::
     :header-rows: 1
     :widths: 90 10

     * - Example
       - Results

     * - ``{ $trim: { input: "    ggggoodbyeeeee", chars: " ge" } }``
       - ``"oodby"``

.. _trim-white-space:

Whitespace Characters
~~~~~~~~~~~~~~~~~~~~~

By default, :expression:`$trim` removes the following whitespaces,
including the null character:

.. include:: /includes/list-table-trim-white-space.rst

Example
-------

Consider an ``inventory`` collection with the following documents:

.. code-block:: javascript

   { "_id" : 1, "item" : "ABC1", quarter: "13Q1", "description" : " product 1" }
   { "_id" : 2, "item" : "ABC2", quarter: "13Q4", "description" : "product 2 \n The product is in stock.  \n\n  " }
   { "_id" : 3, "item" : "XYZ1", quarter: "14Q2", "description" : null }

The following operation uses the :expression:`$trim` operator to remove
leading and trailing whitespaces from the ``description`` field:

.. code-block:: javascript

   db.inventory.aggregate([
      { $project: { item: 1, description: { $trim: { input: "$description" } } } }
   ])

The operation returns the following results:

.. code-block:: javascript

   { "_id" : 1, "item" : "ABC1", "description" : "product 1" }
   { "_id" : 3, "item" : "XYZ1", "description" : null }
   { "_id" : 2, "item" : "ABC2", "description" : "product 2 \n The product is in stock." }
