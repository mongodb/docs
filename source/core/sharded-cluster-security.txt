.. _sharding-security:

========================
Sharded Cluster Security
========================

.. default-domain:: mongodb

In most respects, security for sharded cluster is similar to other
MongoDB deployments. A sharded cluster uses the same :doc:`keyfile
</core/inter-process-authentication>` and :doc:`access control
</core/access-control>` as all MongoDB deployments. However, there are
additional considerations when using authentication with sharded
clusters.

.. important:: In addition to the mechanisms described in this
   section, always run sharded clusters in a trusted networking
   environment. Ensure that the network only permits trusted traffic
   to reach :program:`mongos` and :program:`mongod` instances.

.. seealso:: :doc:`/tutorial/enable-authentication-in-sharded-cluster`.

Access Control Privileges in Sharded Clusters
---------------------------------------------

In sharded clusters, MongoDB provides separate administrative
privileges for the sharded cluster and for each shard.

**Sharded Cluster Authentication.**
   When connected to a :program:`mongos`, you can grant access to the
   sharded cluster's ``admin`` database.
   [#auth-user-dbs-ins-sharded-clusters]_ These credentials
   reside on the config servers.

   Users can access to the cluster according to their
   :doc:`permissions </reference/user-privileges>`. To receive
   privileges for the cluster, you must authenticate while connected
   to a :program:`mongos` instance.

**Shard Server Authentication.**
   To allow administrators to connect and authenticate directly to
   specific shards, create users in the ``admin`` database on the
   :program:`mongod` instance, or :term:`replica set`, that provide
   each shard.

   These users only have access to *a single shard* and are
   *completely* distinct from the cluster-wide credentials.

.. important:: Always connect and authenticate to sharded clusters via
   a :program:`mongos` instance.

Beyond these proprieties, privileges for sharded clusters are
functionally the same as any other MongoDB deployment. See
:doc:`/core/access-control` for more information.

.. [#auth-user-dbs-ins-sharded-clusters] Credentials for databases
   *other* than the ``admin`` database reside in the :program:`mongod`
   instance (or replica set) that is the :ref:`primary shard
   <primary-shard>` for that database.

Access a Sharded Cluster with Authentication
--------------------------------------------

To access a sharded cluster as an authenticated user, from the command
line, use the authentication options when connecting to a
:program:`mongos`. Or, you can connect first and then authenticate with
the :dbcommand:`authenticate` command or the :method:`db.auth()` method.

To close an authenticated session, see the :dbcommand:`logout`
command.

.. index:: sharding; localhost
.. _sharding-localhost:

Restriction on ``localhost`` Interface
--------------------------------------

Sharded clusters have restrictions on the use of ``localhost``
interface. If the host identifier for a MongoDB instance is either
``localhost`` or "``127.0.0.1``", then you must use "localhost" or
"``127.0.0.1``" to identify *all* MongoDB instances in a
deployment.This applies to the ``host`` argument to the
:dbcommand:`addShard` command as well as to the :option:`--configdb`
option for the :program:`mongos`. If you mix localhost addresses with
remote host address, sharded clusters will not function correctly.
