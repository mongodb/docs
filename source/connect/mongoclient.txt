.. _pymongo-mongoclient:

====================
Create a MongoClient
====================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: connection string, URI, server, Atlas, settings, client

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

To connect to a MongoDB deployment, you need two things:

- A **connection URI**, also known as a *connection string*, which tells {+driver-short+}
  which MongoDB deployment to connect to.
- A **MongoClient** object, which creates the connection to the MongoDB deployment
  and lets you perform operations on it.

You can also use either of these components to customize the way {+driver-short+} behaves
while connected to MongoDB.

This guide shows you how to create a connection string and use a ``MongoClient`` object
to connect to MongoDB.

.. _pymongo_connection_uri:

Connection URI
--------------

A standard connection string includes the following components:

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Component
     - Description

   * - ``mongodb://``

     - Required. A prefix that identifies this as a string in the
       standard connection format.

   * - ``username:password``

     - Optional. Authentication credentials. If you include these, the client
       authenticates the user against the database specified in ``authSource``.
       For more information about the ``authSource`` connection option, see
       :ref:`pymongo-auth`. 

   * - ``host[:port]``

     - Required. The host and optional port number where MongoDB is running. If you don't
       include the port number, the driver uses the default port, ``27017``.

   * - ``/defaultauthdb``
     
     - Optional. The authentication database to use if the
       connection string includes ``username:password@``
       authentication credentials but not the ``authSource`` option. If you don't include 
       this component, the client authenticates the user against the ``admin`` database.

   * - ``?<options>``

     - Optional. A query string that specifies connection-specific
       options as ``<name>=<value>`` pairs. See
       :ref:`pymongo-connection-options` for a full description of
       these options.

For more information about creating a connection string, see
:manual:`Connection Strings </reference/connection-string?tck=docs_driver_python>` in the
MongoDB Server documentation.

MongoClient
-----------

To create a connection to MongoDB, pass a connection URI as a string to the
``MongoClient`` constructor. In the 
following example, the driver uses a sample connection URI to connect to a MongoDB 
instance on port ``27017`` of ``localhost``: 

.. code-block:: python

   from pymongo import MongoClient
   
   uri = "mongodb://localhost:27017/"
   client = MongoClient(uri)

The following table describes the positional parameters that the ``MongoClient()``
constructor accepts. All parameters are optional.

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Parameter
     - Description

   * - ``host``
     - The hostname, IP address, or Unix domain socket path of the MongoDB deployment.
       If your application connects to a replica set or sharded cluster, you can specify
       multiple hostnames or IP addresses in a Python list.
       
       If you pass a literal IPv6 address, you must enclose the address in square brackets
       (``[ ]``). For example, pass the value ``[::1]`` to connect to localhost.

       {+driver-short+} doesn't support :wikipedia:`multihomed <Multihoming>` and
       :wikipedia:`round-robin DNS <Round-robin_DNS>` addresses.

       **Data type:** ``Union[str, Sequence[str]]``
       **Default value:** ``"localhost"``

   * - ``port``
     - The port number {+mdb-server+} is running on.

       You can include the port number in the ``host`` argument
       instead of using this parameter.

       **Data type:** ``int``
       **Default value:** ``27017``

   * - ``document_class``
     - The default class that the client uses to decode BSON documents returned by queries.
       This parameter supports the ``bson.raw_bson.RawBSONDocument`` type, as well as
       subclasses of the ``collections.abc.Mapping`` type, such as ``bson.son.SON``.
       
       If you specify ``bson.son.SON`` as the document class, you must also specify types
       for the key and value.

       **Data type:** ``Type[_DocumentType]``

   * - ``tz_aware``
     - If this parameter is ``True``, the client treats ``datetime`` values as aware.
       Otherwise, it treats them as naive.

       For more information about aware and naive ``datetime`` values, see
       `datetime <https://docs.python.org/3/library/datetime.html>`__ in the Python
       documentation.

       **Data type:** ``bool``

   * - ``connect``
     - If this parameter is ``True``, the client begins connecting to MongoDB
       in the background immediately after you create it. If this parameter is ``False``,
       the client connects to MongoDB when it performs the first database operation.
       
       If your application is running in a
       :wikipedia:`function-as-a-service (FaaS) <Function_as_a_service>`
       environment, the default value is ``False``. Otherwise, the default value is ``True``.

       **Data type:** ``bool``

   * - ``type_registry``
     - An instance of the ``TypeRegistry`` class to enable encoding and decoding of
       custom types. For more information about encoding and decoding custom types,
       see :ref:`pymongo-custom-types`.

       **Data type:** `TypeRegistry <{+api-root+}bson/codec_options.html#bson.codec_options.TypeRegistry>`__

Concurrent Execution
--------------------

The following sections describe {+driver-short+}'s support for concurrent execution
mechanisms.

Multithreading
~~~~~~~~~~~~~~

{+driver-short+} is thread-safe and provides built-in connection pooling
for threaded applications. 
Because each ``MongoClient`` object represents a pool of connections to the
database, most applications require only a single instance of
``MongoClient``, even across multiple requests.

.. _pymongo-forks:

Multiple Forks
~~~~~~~~~~~~~~~

{+driver-short+} supports calling the ``fork()`` method to create a new process. 
However, if you fork a process, you must create a new ``MongoClient`` instance in the
child process.

.. important:: Don't Pass a MongoClient to a Child Process

   If you use the ``fork()`` method to create a new process, don't pass an instance
   of the ``MongoClient`` class from the parent process to the child process. This creates
   a high probability of deadlock among ``MongoClient`` instances in the child process.
   {+driver-short+} tries to issue a warning if this deadlock might occur.

Multiprocessing
~~~~~~~~~~~~~~~

{+driver-short+} supports the Python ``multiprocessing`` module.
However, on Unix systems, the multiprocessing module spawns processes by using
the ``fork()`` method. This carries the same risks described in :ref:`<pymongo-forks>`

To use multiprocessing with {+driver-short+}, write code similar to the following example:

.. code-block:: python

   # Each process creates its own instance of MongoClient.
   def func():
       db = pymongo.MongoClient().mydb
       # Do something with db.

   proc = multiprocessing.Process(target=func)
   proc.start()

.. important::
   
   Do not copy an instance of the ``MongoClient`` class from the parent process to a child
   process.

Type Hints
----------

If you're using Python v3.5 or later, you can add type hints to your Python code.

The following code example shows how to declare a type hint for a ``MongoClient``
object:

.. code-block:: python

   client: MongoClient = MongoClient()

In the previous example, the code doesn't specify a type for the documents that the
``MongoClient`` object will work with. To specify a document type,
include the ``Dict[str, Any]`` type when you
create the ``MongoClient`` object, as shown in the following example:

.. code-block:: python

   from typing import Any, Dict
   client: MongoClient[Dict[str, Any]] = MongoClient()

API Documentation
-----------------

To learn more about creating a ``MongoClient`` object in {+driver-short+},
see the following API documentation:

- `MongoClient <{+api-root+}pymongo/mongo_client.html#pymongo.mongo_client.MongoClient>`__ 