.. _method-createIndex:

===========================
db.collection.createIndex()
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.collection.createIndex(keys, options)

   Creates indexes on collections.

   .. versionchanged:: 3.2

      MongoDB disallows the creation of :ref:`version 0
      <3.2-version-0-indexes>` indexes. To upgrade existing version 0
      indexes, see :ref:`3.2-version-0-indexes`.

   .. include:: /includes/apiargs/method-db.collection.createIndex-param.rst

   The :method:`db.collection.createIndex()` is a wrapper around the
   :dbcommand:`createIndexes` command.

   To minimize the impact of building an index on replica sets and
   sharded clusters, use a rolling index build procedure as described
   on :doc:`/tutorial/build-indexes-on-replica-sets`.

.. _ensureIndex-options:
.. _createIndex-options:

Options
-------

The ``options`` document contains a set of options that controls the
creation of the index. Different index types can have additional
options specific for that type.

.. versionchanged:: 3.4

   Added support for :ref:`collation option
   <create-index-collation>`.

Options for All Index Types
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for all index types unless
otherwise specified:

.. include:: /includes/fact-remove-dropDups-option.rst

.. include:: /includes/apiargs/method-db.collection.createIndex-options-param.rst

.. _create-index-collation:

Option for Collation
~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.4

.. warning::

   Collation is not supported in MongoDB 3.2 and earlier versions. In
   MongoDB 3.2 and earlier versions, do not create indexes with the
   unsupported collation option as this will block the upgrade to 3.4,
   which enforces a :ref:`stricter validation of index options
   <3.4-index-validation>`.

.. include:: /includes/apiargs/method-db.collection.createIndex-option-collation.rst

.. include:: /includes/extracts/collation-index-type-restrictions.rst

.. include:: /includes/extracts/collation-index-type-restrictions-addendum.rst

.. _createIndex-collation-index-use:

Collation and Index Use
```````````````````````

.. include:: /includes/extracts/collation-index.rst

Options for ``text`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for :doc:`text </core/index-text>`
indexes only:

.. include:: /includes/apiargs/method-db.collection.createIndex-options-text.rst

Options for ``2dsphere`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following option is available for :doc:`2dsphere </core/2dsphere>`
indexes only:

.. include:: /includes/apiargs/method-db.collection.createIndex-options-2dsphere.rst

Options for ``2d`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for :doc:`2d </core/2d>` indexes
only:

.. include:: /includes/apiargs/method-db.collection.createIndex-options-2d.rst

Options for ``geoHaystack`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following option is available for :doc:`geoHaystack </core/geohaystack>`
indexes only:

.. include:: /includes/apiargs/method-db.collection.createIndex-options-geohaystack.rst

.. _createIndex-method-wildcard-option:

Options for ``wildcard`` indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following option is available for
:ref:`wildcard <wildcard-index-core>` indexes only:

.. include:: /includes/apiargs/method-db.collection.createIndex-options-wildcard.rst

.. _create-index-behaviors:

Behaviors
---------

The :method:`db.collection.createIndex()` method has the behaviors
described here.

.. warning::

   Foreground index builds block all other operations on the database.

Recreating an Existing Index
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you call :method:`db.collection.createIndex()` for an index that
already exists, MongoDB does not recreate the index.

Index Options
~~~~~~~~~~~~~

Non-Collation Options
``````````````````````

With the exception of the :ref:`collation option
<createIndexes-collation-option>`, if you create an index with one set
of index options and then try to recreate the same index but with
different index options, MongoDB will not change the options nor
recreate the index.

To change these index options, drop the existing index with
:method:`db.collection.dropIndex()` before running 
:method:`db.collection.createIndex()` with the new options.

Collation Option
````````````````

.. include:: /includes/extracts/collation-index-options.rst

Index Key Length Limit
~~~~~~~~~~~~~~~~~~~~~~

For MongoDB 2.6 through MongoDB versions with
:ref:`featureCompatibilityVersion <view-fcv>` (fCV) set to ``"4.0"`` or
earlier, MongoDB will **not** create an index on a collection if the
index entry for an existing document exceeds the |limit|.

.. |limit| replace:: :limit:`Maximum Index Key Length <Index Key Limit>`

.. _createIndex-method-wildcard-behavior:

Wildcard Indexes
~~~~~~~~~~~~~~~~

.. versionadded:: 4.2

- .. include:: /includes/extracts/wildcard-index-id.rst

- .. include:: /includes/extracts/wildcard-index-fcv.rst

- .. include:: /includes/extracts/wildcard-index-limitations.rst

For examples of wildcard index creation, see
:ref:`createIndex-method-wildcard-examples`.  For complete 
documentation on Wildcard Indexes, see :ref:`wildcard-index-core`.

Examples
--------

Create an Ascending Index on a Single Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates an ascending index on the field
``orderDate``.

.. code-block:: javascript

   db.collection.createIndex( { orderDate: 1 } )

If the ``keys`` document specifies more than one field, then
:method:`~db.collection.createIndex()` creates a :term:`compound
index`.

Create an Index on a Multiple Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates a compound index on the
``orderDate`` field (in ascending order) and the ``zipcode``
field (in descending order.)

.. code-block:: javascript

   db.collection.createIndex( { orderDate: 1, zipcode: -1 } )

A compound index cannot include a :ref:`hashed index <index-type-hashed>`
component.

.. note::

   The order of an index is important for supporting
   :method:`~cursor.sort()` operations using the index.

Create Indexes with Collation Specified
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.4

The following example creates an index named ``category_fr``. The
example creates the index with the :ref:`collation
<create-index-collation>` that specifies the locale ``fr`` and
comparison strength ``2``:

.. code-block:: javascript

   db.collection.createIndex(
      { category: 1 },
      { name: "category_fr", collation: { locale: "fr", strength: 2 } }
   )

The following example creates a compound index named
``date_category_fr`` with a :ref:`collation <create-index-collation>`.
The collation applies only to the index keys with string values.

.. code-block:: javascript

   db.collection.createIndex(
      { orderDate: 1, category: 1 },
      { name: "date_category_fr", collation: { locale: "fr", strength: 2 } }
   )

The collation applies to the indexed keys whose values are string.

For queries or sort operations on the indexed keys that uses the same collation
rules, MongoDB can use the index. For details, see :ref:`createIndex-collation-index-use`.

.. _createIndex-method-wildcard-examples:

Create a Wildcard Index
~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 4.2

   .. include:: /includes/extracts/wildcard-index-fcv.rst

   For complete documentation on Wildcard Indexes, see
   :ref:`wildcard-index-core`.

The following lists examples of wildcard index creation:

- :ref:`createIndex-method-wildcard-onepath`
- :ref:`createIndex-method-wildcard-allpaths`
- :ref:`createIndex-method-wildcard-inclusion`
- :ref:`createIndex-method-wildcard-exclusion`

.. _createIndex-method-wildcard-onepath:

Create a Wildcard Index on a Single Field Path
``````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index on the 
``product_attributes`` field and its subfields:

.. code-block:: shell

   use inventory
   db.products_catalog.createIndex( { "product_attributes.$**" : 1 } )

The wildcard index can support arbitrary single-field queries on 
``product_attributes`` and any of its subpaths:

.. code-block:: shell

   db.products_catalog.find( { "product_attributes.superFlight" : true } )
   db.products_catalog.find( { "product_attributes.maxSpeed" : { $gt : 20 } } )
   db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )

.. _createIndex-method-wildcard-allpaths:

Create a Wildcard Index on All Field Paths
``````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index on all fields and
subfields:

.. code-block:: shell

   use inventory
   db.products_catalog.createIndex( { "$**" : 1 } )

The created index can support queries on any arbitrary field 
within documents in the collection:

.. code-block:: shell

   db.products_catalog.find( { "product_price" : { $lt : 25 } } )
   db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )

.. _createIndex-method-wildcard-inclusion:

Include Specific Fields in Wildcard Index Coverage
``````````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index and uses
the ``wildcardProjection`` option to include only the
``product_attributes.elements`` and ``product_attributes.resistance``
fields and their subfields as part of index coverage.

.. code-block:: shell

   use inventory
   db.products_catalog.createIndex(
     { "$**" : 1 },
     {
       "wildcardProjection" : {
         "product_attributes.elements" : 1,
         "product_attributes.resistance" : 1
       }
     }
   )

While the key pattern ``"$**"`` covers all fields in the document, the
``wildcardProjection`` field limits the index to only the included
fields. For complete documentation on ``wildcardProjection``, see 
:ref:`createIndex-method-wildcard-option`.

The created index can support queries on any arbitrary field or subfield
**only if** that field is included by ``wildcardProjection``:

.. code-block:: shell

   db.products_catalog.find( { "product_attributes.elements" : { $eq: "Water" } } )
   db.products_catalog.find( { "product_attributes.resistance" : "Bludgeoning" } )

.. include:: /includes/extracts/wildcard-index-id.rst

.. _createIndex-method-wildcard-exclusion:

Omit Specific Fields from Wildcard Index Coverage
`````````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index and uses
the ``wildcardProjection`` document to exclude the 
``product_attributes.elements`` and ``product_attributes.resistance``
fields and their subfields from the wildcard index:

.. code-block:: shell

   use inventory
   db.products_catalog.createIndex(
     { "$**" : 1 },
     {
       "wildcardProjection" : {
         "product_attributes.elements" : 0,
         "product_attributes.resistance" : 0
       }
     }
   )

While the key pattern ``"$**"`` covers all fields in the document, the
``wildcardProjection`` field excludes the specified fields from the
index. For complete documentation on ``wildcardProjection``, see 
:ref:`createIndex-method-wildcard-option`.

The created index can support queries on any arbitrary field or
subfield **except** those excluded by ``wildcardProjection``:

.. code-block:: shell

   db.products_catalog.find( { "product_attributes.maxSpeed" : { $gt: 25 } } )
   db.products_catalog.find( { "product_attributes.superStrength" : true } )

.. include:: /includes/extracts/wildcard-index-id-exclusion.rst

Additional Information
----------------------

- The :doc:`/indexes` section of this manual for full
  documentation of indexes and indexing in MongoDB.

- :method:`db.collection.getIndexes()` to view the specifications of
  existing indexes for a collection.

- :doc:`/core/index-text` for details on creating ``text``
  indexes.

- :ref:`index-feature-geospatial` and
  :ref:`index-geohaystack-index` for geospatial queries.

- :ref:`index-feature-ttl` for expiration of data.
