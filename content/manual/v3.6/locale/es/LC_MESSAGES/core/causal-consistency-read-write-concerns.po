# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/causal-consistency-read-write-concerns.txt:3
msgid "Causal Consistency and Read and Write Concerns"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:7
msgid ""
"With MongoDB's :ref:`causally consistent client sessions <sessions>`, "
"different combinations of read and write concerns provide different "
":ref:`causal consistency guarantees <causal-consistency-guarantees>`. "
"When causal consistency is defined to imply durability, then the "
"following table lists the specific guarantees provided by the various "
"combinations:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:16
msgid "Read Concern"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:17
msgid "Write Concern"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:18
msgid "Read own writes"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:19
msgid "Monotonic reads"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:20
msgid "Monotonic writes"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:21
msgid "Writes follow reads"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:23
#: ../source/core/causal-consistency-read-write-concerns.txt:30
msgid ":readconcern:`\"majority\"`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:24
#: ../source/core/causal-consistency-read-write-concerns.txt:45
msgid ":writeconcern:`\"majority\"`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:25
#: ../source/core/causal-consistency-read-write-concerns.txt:26
#: ../source/core/causal-consistency-read-write-concerns.txt:27
#: ../source/core/causal-consistency-read-write-concerns.txt:28
#: ../source/core/causal-consistency-read-write-concerns.txt:33
#: ../source/core/causal-consistency-read-write-concerns.txt:35
#: ../source/core/causal-consistency-read-write-concerns.txt:48
msgid "|checkmark|"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:31
#: ../source/core/causal-consistency-read-write-concerns.txt:38
msgid ":writeconcern:`{ w: 1 } <\\<number\\>>`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:37
#: ../source/core/causal-consistency-read-write-concerns.txt:44
msgid ":readconcern:`\"local\"`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:51
msgid ""
"If causal consistency implies durability, then, as seen from the table, "
"only read operations with :readconcern:`\"majority\"` read concern and "
"write operations with :writeconcern:`\"majority\"` write concern can "
"guarantee all four causal consistency guarantees. That is, :ref:`causally"
" consistent client sessions <sessions>` can only guarantee causal "
"consistency for:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:58
msgid ""
"Read operations with :readconcern:`\"majority\"` read concern; i.e. the "
"read operations that return data that has been acknowledged by a majority"
" of the replica set members and is durable."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:62
msgid ""
"Write operations with :writeconcern:`\"majority\"` write concern; i.e. "
"the write operations that request acknowledgement that the operation has "
"been applied to a majority of the replica set's voting members."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:66
msgid ""
"If causal consistency does not imply durability (i.e. writes may be "
"rolled back), then write operations with :writeconcern:`{ w: 1 } "
"<\\<number\\>>` write concern can also provide causal consistency."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:72
msgid ""
"The other combinations of read and write concerns may also satisfy all "
"four causal consistency guarantees in some situations, but not "
"necessarily in all situations."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:76
msgid ""
"The read concern :readconcern:`\"majority\"` and write concern "
":writeconcern:`\"majority\"` ensure that the four causal consistency "
"guarantees hold even in :ref:`circumstances (such as with a network "
"partition) <edge-cases>` where two members in a replica set *transiently*"
" believe that they are the primary. And while both primaries can complete"
" writes with :writeconcern:`{ w: 1 } <\\<number\\>>` write concern, only "
"one primary will be able to complete writes with "
":writeconcern:`\"majority\"` write concern."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:85
msgid ""
"For example, consider a situation where a network partition divides a "
"five member replica set:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:92
msgid "With the above partition"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:95
msgid ""
"Writes with :writeconcern:`\"majority\"` write concern can complete on "
"``P``\\ :sub:`new` but cannot complete on ``P``\\ :sub:`old`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:98
msgid ""
"Writes with :writeconcern:`{ w: 1 } <\\<number\\>>` write concern can "
"complete on either ``P``\\ :sub:`old` or ``P``\\ :sub:`new`. However, the"
" writes to ``P``\\ :sub:`old` (as well as the writes replicated to "
"``S``\\ :sub:`1`) roll back once these members regain communication with "
"the rest of the replica set."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:104
msgid ""
"After a successful write with :writeconcern:`\"majority\"` write concern "
"on ``P``\\ :sub:`new`, causally consistent reads with "
":readconcern:`\"majority\"` read concern can observe the write on ``P``\\"
" :sub:`new`, ``S``\\ :sub:`2`,and ``S``\\ :sub:`3`. The reads can also "
"observe the write on ``P``\\ :sub:`old` and ``S``\\ :sub:`1` once they "
"can communicate with the rest of the replica set and sync from the other "
"members of the replica set. Any writes made to ``P``\\ :sub:`old` and/or "
"replicated to ``S``\\ :sub:`1` during the partition are rolled back."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:115
msgid "Scenarios"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:117
msgid ""
"To illustrate the read and write concern requirements, the following "
"scenarios have a client issue a sequence of operations with various "
"combination of read and write concerns to the replica set:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:121
msgid ":ref:`causal-rc-majority-wc-majority`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:123
msgid ":ref:`causal-rc-majority-wc-1`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:125
msgid ":ref:`causal-rc-local-wc-majority`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:127
msgid ":ref:`causal-rc-local-wc-1`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:132
msgid "Read Concern ``\"majority\"`` and Write concern ``\"majority\"``"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:134
msgid ""
"The use of read concern :readconcern:`\"majority\"` and write concern "
":writeconcern:`\"majority\"` in a causally consistent session provides "
"the following causal consistency guarantees:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:138
#: ../source/core/causal-consistency-read-write-concerns.txt:273
msgid ""
"|checkmark| Read own writes  |checkmark| Monotonic reads  |checkmark| "
"Monotonic writes  |checkmark| Writes follow reads"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:142
msgid ""
"During the transient period with two primaries, because only ``P``\\ "
":sub:`new` can fulfill writes with :writeconcern:`{ w: \"majority\" } "
"<\"majority\">` write concern, a client session can issue the following "
"sequence of operations successfully:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:151
#: ../source/core/causal-consistency-read-write-concerns.txt:205
#: ../source/core/causal-consistency-read-write-concerns.txt:288
#: ../source/core/causal-consistency-read-write-concerns.txt:384
#: ../source/core/causal-consistency-read-write-concerns.txt:491
#: ../source/core/causal-consistency-read-write-concerns.txt:560
msgid "Sequence"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:153
#: ../source/core/causal-consistency-read-write-concerns.txt:207
#: ../source/core/causal-consistency-read-write-concerns.txt:290
#: ../source/core/causal-consistency-read-write-concerns.txt:386
#: ../source/core/causal-consistency-read-write-concerns.txt:493
#: ../source/core/causal-consistency-read-write-concerns.txt:562
msgid "Example"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"1. Write\\ :sub:`1` with write concern :writeconcern:`\"majority\"`  to  "
"``P``\\ :sub:`new`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"2. Read\\ :sub:`1` with read concern :readconcern:`\"majority\"` to "
"``S``\\ :sub:`2`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"3. Write\\ :sub:`2` with write concern :writeconcern:`\"majority\"` to "
"``P``\\ :sub:`new`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"4. Read\\ :sub:`2` with read concern :readconcern:`\"majority\"` to "
"``S``\\ :sub:`3`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid "For item ``A``, update ``qty`` to ``50``."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid "Read item ``A``."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid "For items with ``qty`` less than ``50``, update ``reorder`` to ``true``."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:173
#: ../source/core/causal-consistency-read-write-concerns.txt:232
#: ../source/core/causal-consistency-read-write-concerns.txt:351
#: ../source/core/causal-consistency-read-write-concerns.txt:444
msgid "|checkmark| **Read own writes**"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"Read\\ :sub:`1` reads data from ``S``\\ :sub:`2` that reflects a state "
"after Write\\ :sub:`1`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"Read\\ :sub:`2` reads data from ``S``\\ :sub:`1` that reflects a state "
"after Write1\\ :sub:`1` followed by Write\\ :sub:`2`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:180
#: ../source/core/causal-consistency-read-write-concerns.txt:243
#: ../source/core/causal-consistency-read-write-concerns.txt:327
#: ../source/core/causal-consistency-read-write-concerns.txt:357
#: ../source/core/causal-consistency-read-write-concerns.txt:419
#: ../source/core/causal-consistency-read-write-concerns.txt:449
msgid "|checkmark| **Monotonic reads**"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:182
msgid ""
"Read\\ :sub:`2` reads data from ``S``\\ :sub:`3` that reflects a state "
"after Read\\ :sub:`1`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:185
#: ../source/core/causal-consistency-read-write-concerns.txt:249
#: ../source/core/causal-consistency-read-write-concerns.txt:363
#: ../source/core/causal-consistency-read-write-concerns.txt:455
msgid "|checkmark| **Monotonic writes**"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:187
#: ../source/core/causal-consistency-read-write-concerns.txt:251
#: ../source/core/causal-consistency-read-write-concerns.txt:595
msgid ""
"Write\\ :sub:`2` updates data on ``P``\\ :sub:`new` that reflects a state"
" after Write\\ :sub:`1`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:190
#: ../source/core/causal-consistency-read-write-concerns.txt:254
#: ../source/core/causal-consistency-read-write-concerns.txt:338
#: ../source/core/causal-consistency-read-write-concerns.txt:369
#: ../source/core/causal-consistency-read-write-concerns.txt:432
#: ../source/core/causal-consistency-read-write-concerns.txt:461
msgid "|checkmark| **Writes follow reads**"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:192
#: ../source/core/causal-consistency-read-write-concerns.txt:256
msgid ""
"Write\\ :sub:`2` updates data on ``P``\\ :sub:`new` that reflects a state"
" of the data after Read\\ :sub:`1` (i.e. an earlier state reflects the "
"data read by Read\\ :sub:`1`)."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:198
#: ../source/core/causal-consistency-read-write-concerns.txt:378
msgid ""
"Consider an alternative sequence where Read\\ :sub:`1` with read concern "
":readconcern:`\"majority\"` routes to ``S``\\ :sub:`1`:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"2. Read\\ :sub:`1` with read concern :readconcern:`\"majority\"` to "
"``S``\\ :sub:`1`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"4. Read\\ :sub:`2` with with read concern :readconcern:`\"majority\"` to "
"``S``\\ :sub:`3`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:220
msgid ""
"In this sequence, Read\\ :sub:`1` cannot not return until the majority "
"commit point has advanced on ``P``\\ :sub:`old`. This cannot occur until "
"``P``\\ :sub:`old` and ``S``\\ :sub:`1` can communicate with the rest of "
"the replica set; at which time, ``P``\\ :sub:`old` has stepped down (if "
"not already), and the two members sync (including includes Write\\ "
":sub:`1`) from the other members of the replica set."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"Read\\ :sub:`1` reflects a state of data after Write1\\ :sub:`1`, albeit "
"after the network partition has healed and the member has sync'ed from "
"the other members of the replica set."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"Read\\ :sub:`2` reads data from ``S``\\ :sub:`3` that reflects a state "
"after Write1\\ :sub:`1` followed by Write\\ :sub:`2`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:245
#: ../source/core/causal-consistency-read-write-concerns.txt:329
#: ../source/core/causal-consistency-read-write-concerns.txt:359
msgid ""
"Read\\ :sub:`2` reads data from ``S``\\ :sub:`3` that reflects a state "
"after Read\\ :sub:`1` (i.e. an earlier state is reflected in the data "
"read by Read\\ :sub:`1`)."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:263
msgid "Read Concern ``\"majority\"`` and Write concern ``{w: 1}``"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:265
msgid ""
"The use of read concern :readconcern:`\"majority\"` and write concern "
":writeconcern:`{ w: 1 } <\\<number\\>>` in a causally consistent session "
"provides the following causal consistency guarantees *if causal "
"consistency implies durability*:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:269
msgid ""
"|xmark| Read own writes  |checkmark| Monotonic reads  |xmark| Monotonic "
"writes  |checkmark| Writes follow reads"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:271
msgid "*If causal consistency does not imply durability*:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:277
msgid ""
"During the transient period with two primaries, because both ``P``\\ "
":sub:`old` and ``P``\\ :sub:`new` can fulfill writes with "
":writeconcern:`{ w: 1 } <\\<number\\>>` write concern, a client session "
"could issue the following sequence of operations successfully but not be "
"causally consistent **if causal consistency implies durability**:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"1. Write\\ :sub:`1` with write concern :writeconcern:`{ w: 1 } "
"<\\<number\\>>`  to  ``P``\\ :sub:`old`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"3. Write\\ :sub:`2` with write concern :writeconcern:`{ w: 1 } "
"<\\<number\\>>` to ``P``\\ :sub:`new`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:306
msgid "In this sequence,"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:308
msgid ""
"Read\\ :sub:`1` cannot not return until the majority commit point has "
"advanced on ``P``\\ :sub:`new` past the time of Write\\ :sub:`1`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:311
msgid ""
"Read\\ :sub:`2` cannot not return until the majority commit point has "
"advanced on ``P``\\ :sub:`new` past the time of Write\\ :sub:`2`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:314
msgid "Write\\ :sub:`1` will roll back when the network partition is healed."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:316
#: ../source/core/causal-consistency-read-write-concerns.txt:408
msgid "|arrow| *If causal consistency implies durability*"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:322
#: ../source/core/causal-consistency-read-write-concerns.txt:414
msgid "|xmark| **Read own writes**"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:324
msgid ""
"Read\\ :sub:`1` reads data from ``S``\\ :sub:`2` that does not reflect a "
"state after Write\\ :sub:`1`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:333
#: ../source/core/causal-consistency-read-write-concerns.txt:426
msgid "|xmark| **Monotonic writes**"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:335
#: ../source/core/causal-consistency-read-write-concerns.txt:527
msgid ""
"Write\\ :sub:`2` updates data on ``P``\\ :sub:`new` that does not reflect"
" a state after Write\\ :sub:`1`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:340
#: ../source/core/causal-consistency-read-write-concerns.txt:463
msgid ""
"Write\\ :sub:`2` updates data on ``P``\\ :sub:`new` that reflects a state"
" after Read\\ :sub:`1` (i.e. an earlier state reflects the data read by "
"Read\\ :sub:`1`)."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:345
#: ../source/core/causal-consistency-read-write-concerns.txt:438
msgid "|arrow| *If causal consistency does not imply durability*"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:353
msgid ""
"Read\\ :sub:`1` reads data from ``S``\\ :sub:`2` returns data that "
"reflects a state equivalent to Write\\ :sub:`1` followed by rollback of "
"Write\\ :sub:`1`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:365
#: ../source/core/causal-consistency-read-write-concerns.txt:457
msgid ""
"Write\\ :sub:`2` updates data on ``P``\\ :sub:`new` that is equivalent to"
" after Write\\ :sub:`1` followed by rollback of Write\\ :sub:`1`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:371
#: ../source/core/causal-consistency-read-write-concerns.txt:434
msgid ""
"Write\\ :sub:`2` updates data on ``P``\\ :sub:`new` that reflects a state"
" after Read\\ :sub:`1` (i.e. whose earlier state reflects the data read "
"by Read\\ :sub:`1`)."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"Write\\ :sub:`1` with write concern :writeconcern:`{ w: 1 } "
"<\\<number\\>>`  to  ``P``\\ :sub:`old`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"Read\\ :sub:`1` with read concern :readconcern:`\"majority\"` to ``S``\\ "
":sub:`1`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"Write\\ :sub:`2` with write concern :writeconcern:`{ w: 1 } "
"<\\<number\\>>` to ``P``\\ :sub:`new`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"Read\\ :sub:`2` with with read concern :readconcern:`\"majority\"` to "
"``S``\\ :sub:`3`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:398
msgid "In this sequence:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:400
msgid ""
"Read\\ :sub:`1` cannot not return until the majority commit point has "
"advanced on ``S``\\ :sub:`1`. This cannot occur until ``P``\\ :sub:`old` "
"and ``S``\\ :sub:`1` can communicate with the rest of the replica set. At"
" which time, ``P``\\ :sub:`old` has stepped down (if not already), "
"Write\\ :sub:`1` is rolled back from ``P``\\ :sub:`old` and ``S``\\ "
":sub:`1`, and the two members sync from the other members of the replica "
"set."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:416
msgid ""
"The data read by Read\\ :sub:`1` does not reflect the results of Write\\ "
":sub:`1`, which has rolled back."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:421
msgid ""
"Read\\ :sub:`2` reads data from ``S``\\ :sub:`3` that reflects a state "
"after Read\\ :sub:`1` (i.e. whose earlier state reflects the data read by"
" Read\\ :sub:`1`)."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:428
msgid ""
"Write\\ :sub:`2` updates data on ``P``\\ :sub:`new` that does not reflect"
" a state after Write\\ :sub:`1`, which had preceded Write\\ :sub:`2` but "
"has rolled back."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:446
msgid ""
"Read\\ :sub:`1` returns data that reflects the final result of Write\\ "
":sub:`1` since Write\\ :sub:`1` ultimately rolls back."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:451
msgid ""
"Read\\ :sub:`2` reads data from ``S``\\ :sub:`3` that reflects a state "
"after Read\\ :sub:`1` (i.e. an earlier state reflects the data read by "
"Read\\ :sub:`1`)."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:470
msgid "Read Concern ``\"local\"`` and Write concern ``{w: 1}``"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:472
msgid ""
"The use of read concern :readconcern:`\"local\"` and write concern "
":writeconcern:`{ w: 1 } <\\<number\\>>` in a causally consistent session "
"cannot guarantee causal consistency."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:476
msgid ""
"|xmark| Read own writes  |xmark| Monotonic reads  |xmark| Monotonic "
"writes  |xmark| Writes follow reads"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:478
#: ../source/core/causal-consistency-read-write-concerns.txt:547
msgid ""
"This combination may satisfy all four causal consistency guarantees in "
"some situations, but not necessarily in all situations."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:483
msgid ""
"During this transient period, because both ``P``\\ :sub:`old` and ``P``\\"
" :sub:`new` can fulfill writes with :writeconcern:`{ w: 1 } "
"<\\<number\\>>` write concern, a client session could issue the following"
" sequence of operations successfully but not be causally consistent:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"2. Read\\ :sub:`1` with read concern :readconcern:`\"local\"` to ``S``\\ "
":sub:`1`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"4. Read\\ :sub:`2` with read concern :readconcern:`\"local\"` to ``S``\\ "
":sub:`3`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:513
msgid "|xmark| Read own writes"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:515
msgid ""
"Read\\ :sub:`2` reads data from ``S``\\ :sub:`3` that only reflects a "
"state after Write\\ :sub:`2` and not Write\\ :sub:`1` followed by Write\\"
" :sub:`2`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:519
msgid "|xmark| Monotonic reads"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:521
#: ../source/core/causal-consistency-read-write-concerns.txt:589
msgid ""
"Read\\ :sub:`2` reads data from ``S``\\ :sub:`3` that does not reflect a "
"state after Read\\ :sub:`1` (i.e. an earlier state does not reflect the "
"data read by Read\\ :sub:`1`)."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:525
msgid "|xmark| Monotonic writes"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:530
msgid "|xmark| Write follow read"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:532
#: ../source/core/causal-consistency-read-write-concerns.txt:600
msgid ""
"Write\\ :sub:`2` updates data on ``P``\\ :sub:`new` that does not reflect"
" a state after Read\\ :sub:`1` (i.e. an earlier state does not reflect "
"the data read by Read\\ :sub:`1`)."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:539
msgid "Read Concern ``\"local\"`` and Write concern ``\"majority\"``"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:541
msgid ""
"The use of read concern :readconcern:`\"local\"` and write concern "
":writeconcern:`\"majority\"` in a causally consistent session provides "
"the following causal consistency guarantees:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:545
msgid ""
"|xmark| Read own writes  |xmark| Monotonic reads  |checkmark| Monotonic "
"writes  |xmark| Writes follow reads"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:552
msgid ""
"During this transient period, because only ``P``\\ :sub:`new` can fulfill"
" writes with  :writeconcern:`{ w: \"majority\" } <\"majority\">` write "
"concern, a client session could issue the following sequence of "
"operations successfully but not be causally consistent:"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt
msgid ""
"3. Write\\ :sub:`2` with write concern :writeconcern:`\"majority\"`  to "
"``P``\\ :sub:`new`"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:582
msgid "|xmark| Read own writes."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:584
msgid ""
"Read\\ :sub:`1` reads data from ``S``\\ :sub:`1` that does not reflect a "
"state after Write1\\ :sub:`1`."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:587
msgid "|xmark| Monotonic reads."
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:593
msgid "|checkmark| Monotonic writes"
msgstr ""

#: ../source/core/causal-consistency-read-write-concerns.txt:598
msgid "|xmark| Write follow read."
msgstr ""

