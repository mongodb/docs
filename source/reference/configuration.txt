============================
|onprem| Configuration Files
============================

.. default-domain:: mongodb

Overview
--------

The |application| and the Backup Daemon use the :ref:`conf-mms.properties`
and :ref:`conf-daemon.properties` configuration files respectively. This
document describes all available settings between the two files. Each
configuration file uses a subset of the settings described here.

.. _conf-mms.properties:

conf-mms.properties
~~~~~~~~~~~~~~~~~~~

The |application| uses the ``conf-mms.properties`` configuration file.
If you installed |onprem| using an ``rpm`` or ``deb`` package, the
file's location is::

/opt/mongodb/mms/conf/

If you installed using a ``tar.gz`` file, the configuration file's
location is::

<install-directory>/conf/

If you installed on Windows, the file's location is::

<install-folder>\Server\Config

.. _conf-daemon.properties:

conf-daemon.properties
~~~~~~~~~~~~~~~~~~~~~~

The Backup Daemon uses the ``conf-daemon.properties`` configuration
file. If you installed |onprem| using an ``rpm`` or ``deb`` package, the
file's location is::

/opt/mongodb/mms-backup-daemon/conf/

If you installed using a ``tar.gz`` file, the configuration file's
location is::

<install-directory>/conf/

If you installed on Windows, the configuration file's location is::

<install-folder>\BackupDaemon\Config

Mandatory Settings
~~~~~~~~~~~~~~~~~~

To start the |application|, you must configure the
:ref:`application-url-settings` and :ref:`email-address-settings`
in the ``conf-mms.properties`` file.

Security
~~~~~~~~

For configuration settings that store credentials, you can either store the
credentials in plain text or use the |onprem| ``credentialstool`` to encrypt
the credentials, as described in :ref:`encrypt-mongodb-user-credentials`.

If you choose to store credentials in plain text, reduce the permissions on the
configuration file. For example:

.. code-block:: sh

   sudo chmod 600 <install_dir>/conf/conf-mms.properties

Settings
--------

.. _application-url-settings:

|application| URL Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~

The following two settings are mandatory for the |application|.

.. setting:: mms.centralUrl

   *Type*: string

   Required. Fully qualified URL, including the port number, of the
   |application|. For example,

   .. code-block:: ini

      mms.centralUrl=http://mms.example.com:8080

.. setting:: mms.backupCentralUrl

   *Type*: string

   Required. The hostname and port of the Backup Daemon. For example,

   .. code-block:: ini

      mms.backupCentralUrl=http://mms.example.com:8081

   You must set :setting:`mms.backupCentralUrl`, even if you are only
   using |mms| Monitoring and not |mms| Backup.

Load Balancer
~~~~~~~~~~~~~

Set the following when using a load balancer with the |application|.

.. setting:: mms.remoteIp.header

   *Type*: string

   Specify the name of the header that the load balancer will use to
   specify the original client's IP address to the application server.

   See :doc:`/tutorial/configure-application-high-availability` for
   more information.

   When you specify :setting:`mms.remoteIp.header`, do not allow
   clients to connect directly to any application server.

.. _https-settings:

|application| HTTPS Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can configure the |application|'s application servers to use HTTPS to
encrypt connections between the |application|, the agents, and the web
interface.

The default port for HTTPS access to the |application| is ``8443``, as set in
``<install_dir>/conf/mms.conf`` file. If you change this default, change the
ports specified in the :setting:`mms.centralUrl` and
:setting:`mms.backupCentralUrl` settings.

.. setting:: mms.https.PEMKeyFile

   *Type*: string

   Specify the PEM file that contains the application's valid certificate and
   private key.

.. setting:: mms.https.PEMKeyFilePassword

   *Type*: string

   Required if the PEM file contains an encrypted private key. Specify the
   password for PEM file. You can encrypt the specified password using the
   |onprem| ``credentialstool``. See :ref:`encrypt-mongodb-user-credentials`.

Email Settings
~~~~~~~~~~~~~~

.. _email-address-settings:

Email Address Settings
``````````````````````

The following email address settings are mandatory. You **must** define
them before the |monitoring| instance will start.

.. setting:: mms.fromEmailAddr

   *Type*: string

   Required. The email address used for sending the general emails,
   such as |mms| alerts. You can include an alias with the email address.
   For example:

   .. code-block:: ini

      mms.fromEmailAddr=|mms| Alerts <mms-alerts@example.com>

.. setting:: mms.replyToEmailAddr

   *Type*: string

   Required. The email address to send replies to general emails. For
   example:

   .. code-block:: ini

      mms.replyToEmailAddr=mms-no-reply@example.com

.. setting:: mms.adminFromEmailAddr

   *Type*: string

   Required. The email address to send messages from the |mms| admin. You
   can include an alias with the email address. For example:

   .. code-block:: ini

      mms.adminFromEmailAddr=|mms| Admin <mms-admin@example.com>

.. setting:: mms.adminEmailAddr

   *Type*: string

   Required. The email address to send messages or replies to the |mms|
   admin. You can include an alias with the email address. For example:

   .. code-block:: ini

      mms.adminEmailAddr=mms-admin@example.com

.. setting:: mms.bounceEmailAddr

   *Type*: string

   Required. The email address to send bounce messages, i.e. messages
   of non-delivery of alerts or messages from |mms| admin. For example:

   .. code-block:: ini

      mms.bounceEmailAddr=bounce@example.com

Email Service Settings
``````````````````````

.. setting:: mms.emailDaoClass

   *Type*: string

   The email interface to use. For AWS Simple Email Service,
   specify ``com.xgen.svc.core.dao.email.AwsEmailDao``, as in:

   .. code-block:: ini

      mms.emailDaoClass=com.xgen.svc.core.dao.email.AwsEmailDao

   For AWS Simple Email Service, see also :setting:`aws.accesskey` and
   :setting:`aws.secretkey`.

   For JavaEmailDao, specify
   ``com.xgen.svc.core.dao.email.JavaEmailDao``, as in:

   .. code-block:: ini

      mms.emailDaoClass=com.xgen.svc.core.dao.email.JavaEmailDao

.. setting:: mms.mail.transport

   *Type*: string

   *Default*: smtp

   Transfer protocol ``smtp`` or ``smtps`` as specified by your email
   provider. For example:

   .. code-block:: ini

      mms.mail.transport=smtp

.. setting:: mms.mail.hostname

   *Type*: string

   *Default*: localhost

   Email hostname as specified by your email provider. For example:

   .. code-block:: ini

      mms.mail.hostname=mail.example.com

.. setting:: mms.mail.port

   *Type*: number

   *Default*: 25

   Port number for the transfer protocol as specified by your email
   provider. For example:

   .. code-block:: ini

      mms.mail.port=25

.. setting:: mms.mail.tls

   *Type*: boolean

   *Default*: false

   Indicator of whether the transfer protocol runs on top of TLS. For
   example:

   .. code-block:: ini

      mms.mail.tls=false

.. setting:: mms.mail.username

   *Type*: string

   User name of the email account. If unset, defaults to disabled SMTP
   authentication.

   .. code-block:: ini

       mms.mail.username=

.. setting:: mms.mail.password

   *Type*: string

   Password for the email account. If unset, defaults to disabled SMTP
   authentication.

   .. code-block:: ini

      mms.mail.password=emailPassword

.. setting:: aws.accesskey

   *Type*: string

   Required if using AWS Simple Email Service. The access key ID for AWS.

   .. code-block:: ini

      aws.accesskey=EXAMPLEAccessKeyID

.. setting:: aws.secretkey

   *Type*: string

   Required if using AWS Simple Email Service. The secret access key
   for AWS.

   .. code-block:: ini

      aws.secretkey=eXampLe/aCcESs/KEY

.. _twilio-sms-configure:
.. _twilio-sms-alert-settings:

Twilio SMS Alert Settings
~~~~~~~~~~~~~~~~~~~~~~~~~

To receive alert notifications via SMS, you must have a `Twilio
<http://www.twilio.com/docs/quickstart>`_ account and specify your
Twilio account information in the configuration file.

.. setting:: twilio.account.sid

   *Type*: string

   Twilio account ID.

.. setting:: twilio.auth.token

   *Type*: string

   Twilio API token.

.. setting:: twilio.from.num

   *Type*: string

   Twilio phone number.

MongoDB Settings
~~~~~~~~~~~~~~~~

The following settings configure the |onprem| connections to the :doc:`backing
MongoDB instances </tutorial/prepare-backing-mongodb-instances>`
that host the :ref:`mms-application-database` and
:ref:`mms-backup-blockstore-database`.

Connection String
`````````````````

.. setting:: mongo.mongoUri

   *Type*: string

   Required. The :manual:`connection string </reference/connection-string/>`
   used to access the :doc:`backing MongoDB instance
   </tutorial/prepare-backing-mongodb-instances>`. The ``conf-mms.properties``
   file can contain multiple :setting:`mongo.mongoUri` settings. The following
   example specifies connection to a :term:`replica set`:

   .. code-block:: ini

      mongo.mongoUri=mongodb://db1.example.net:40000,db2.example.net:40000,db3.example.net:40000

   If you omit the port number, |onprem| uses the default ``27017`` port for
   all hosts.

   For a MongoDB instance with **access control**, the connection string
   must include authentication credentials.
   The following examples show the formats to use for the different
   :parameter:`authentication mechanisms <authenticationMechanisms>`.

   For a MongoDB instance using the default challenge-response mechanism,
   prefix the hostname with the MongoDB username and password in the form
   ``<username>:<password>@``:

   .. code-block:: ini

      mongo.mongoUri=mongodb://mongodbuser1:password@mydb1.example.net:40000

   For a MongoDB instance using ``MONGODB-X509`` authentication, you must
   first add the value of the **subject** from the client certificate as a
   MongoDB user, as described in :manual:`Use x.509 Certificates to
   Authenticate Clients </tutorial/configure-x509-client-authentication>` in
   the MongoDB manual. The client certificate is contained in the PEM file
   you specify in the :setting:`mongodb.ssl.PEMKeyFile` setting. Once you
   have created the user, prefix the host specified in
   :setting:`mongo.mongoUri` with the name of the new user and append
   ``authMechanism=MONGODB-X509`` after the specified port:

   .. code-block:: ini

      mongo.mongoUri=mongodb://<new_mongodb_user>@mydb1.example.net:40000/?authMechanism=MONGODB-X509

   For a MongoDB instance using LDAP, prefix the hostname with the MongoDB
   username and password in the form ``<username>:<password>@``, and append
   the ``authMechanism=PLAIN&authSource=$external`` options after the port:

   .. code-block:: ini

      mongo.mongoUri=mongodb://mongodbuser1:password@mydb1.example.net:40000/?authMechanism=PLAIN&authSource=$external

   For a MongoDB instance using Kerberos, prefix the hostname with the MongoDB
   username and password in the form ``<username>:<password>@``, and append
   the ``authMechanism=GSSAPI`` option after the port. To enable Kerberos
   authentication between the |application| and the
   :ref:`mms-backup-blockstore-database`, see
   :ref:`configuration-kerberos-settings`. See also :data:`~uri.authMechanism`
   and :data:`~uri.authSource`.

   The following is an example of Kerberos authentication:

   .. code-block:: ini

      mongo.mongoUri=mongodb://mongodbuser1:password@mydb1.example.net:40000/?authMechanism=GSSAPI

.. _mongodb-ssl-settings:

MongoDB SSL Settings
````````````````````

The following settings in ``conf-mms.properties`` and
``conf-daemon.propeties`` configure |onprem| to use SSL to encrypt connections
to the :doc:`backing MongoDB instances
</tutorial/prepare-backing-mongodb-instances>` that host the
:ref:`mms-application-database`
and :ref:`mms-backup-blockstore-database`.

.. setting:: mongo.ssl

   *Type*: boolean

   Enables SSL connection to the :ref:`mms-application-database` when set to
   ``true``.

.. setting:: mongodb.ssl.CAFile

   *Type*: string

   The name of the PEM file that contains the root certificate chain from the
   Certificate Authority that signed the MongoDB server certificate.

.. setting:: mongodb.ssl.PEMKeyFile

   *Type*: string

   The name of the PEM file that contains the X509 certificate and private key.
   Required if the MongoDB instance is running with the :option:`--sslCAFile
   <mongod --sslCAFile>` option. For more information on the option, see
   :setting:`net.ssl.CAFile` in the MongoDB manual.

   If you authenticate using the ``MONGODB-X509`` authentication mechanism,
   you also enter this as the name of the user in the :setting:`mongoUri`
   connection string.

.. setting:: mongodb.ssl.PEMKeyFilePassword

   *Type*: string

   Required if the PEM file contains an encrypted private key. Specify the
   password for PEM file. You can encrypt the specified password using the
   |onprem| ``credentialstool``. See :ref:`encrypt-mongodb-user-credentials`.

Encrypted Credentials
`````````````````````

.. setting:: mongo.encryptedCredentials

   *Type*: boolean

   Add this property and set it to ``true`` if :setting:`mongo.mongoUri`
   contains the
   encrypted username and password:

   .. code-block:: ini

      mongo.encryptedCredentials=true

   You must encrypt the username and password in :setting:`mongo.mongoUri`
   using the |monitoring| ``credentialstool``. See
   :ref:`encrypt-mongodb-user-credentials`.

   .. important::
      The ``conf-mms.properties`` file can contain multiple
      :setting:`mongo.mongoUri` settings. If
      :setting:`mongo.encryptedCredentials` is ``true``, you must encrypt
      all user credentials found in the various :setting:`mongo.mongoUri`
      settings.

.. _automation-versions-settings:

Automation Versions Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following settings in the ``conf-daemon.properties`` file determine
how |onprem| knows what MongoDB releases exist and from what servers the
Automation Agent downloads the binaries for a MongoDB release.

.. setting:: automation.versions.source

   *Type*: string

   *Default*: mongodb

   Selects whether the Automation Agents retrieve MongoDB binaries over
   the internet from MongoDB Inc. or locally from the |application|
   server. Set this to ``mongodb`` if the Automation Agents have internet
   access to retrieve the binaries from MongoDB Inc. Set this to ``local``
   if your Automation Agents cannot reach the internet. If you specify
   ``local``, you must set the :setting:`automation.versions.directory`
   and place ``.tgz`` archive files for the MongoDB binaries in the
   specified directory. You must also provide the MongoDB version
   manifest. For details, see :doc:`/tutorial/configure-local-mode`.

.. setting:: automation.versions.directory

   *Type*: string

   *Default*: 

   When :setting:`automation.versions.source` is set to ``local``, this
   specifies the directory on the |application| server from which the
   Automation Agents accesses MongoDB binaries when installing a new
   deployment or changing the MongoDB version of an existing deployment.
   You must download the desired MongoDB binaries as ``.tgz`` archive
   files and place the ``.tgz`` files in the specified directory.

|mms| Backup Daemon Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

These settings are found only in the ``conf-daemon.properties`` file and are
necessary only if you are using |mms| Backup.

.. setting:: rootDirectory

   *Type*: string

   The disk partition used by the Backup Daemon to dynamically create and
   maintain the :term:`replica set` HEAD directories. For more information
   on HEADs, see the :ref:`Backup functional overview
   <mms-backup-functional-overview>`.

   This directory must be writable
   by the mongodb-mms user and must end in a trailing slash.  It is critical
   that this partition is sized appropriately.

   .. important::
      Data in this directory is dynamically created, maintained and destroyed by the
      Backup Daemon. This partition should not be used for any other purpose.
      This partition should *not* overlap with the partition used for the Backup
      Blockstore database.

.. setting:: numWorkers

   *Type*: number

   The number of replica sets that should be processed at a time.

.. setting:: mongodb.release.directory

   *Type*: string

   Specifies the full path to the directory that contains every MongoDB
   release needed by the Backup Daemon. When backing up a replica set, The
   Backup Daemon must use a :program:`mongod` that matches the version of
   the replica set being backed up.

   .. warning::

      If you use :term:`MongoDB Enterprise`, you must **pre-install** the
      :ref:`MongoDB Enterprise dependencies
      <mongodb-enterprise-dependencies>` to all servers that run MongoDB
      Enterprise.

   If you set :setting:`mongodb.release.autoDownload` to ``false``, you
   must download the MongoDB releases manually. For each version needed,
   you must download the archive for that version and extract it into this
   directory. The extracted archive creates a subdirectory that uses the
   following naming convention:
   ``mongodb-<platform>-<architecture>-<version>``.

   Adhere to the following rules for populating the release directory:

   - The release directory can contain versions from either the MongoDB
     Community edition or the MongoDB Enterprise but not from both.

   - For the MongoDB 3.0 Community edition, do not use platform-specific
     archives. Instead, for all platforms that run MongoDB 3.0 Community,
     use the ``Linux 64-bit legacy`` archive from
     `<http://www.mongodb.org/downloads>`_.

   .. important::

      If you are backing up MongoDB custom builds, you must manually place
      a matching binary distribution for each custom build in this
      directory.

   Beginning in |onprem| version 1.5, the Backup Daemon uses the following
   rules to match the MongoDB version of the replica set being backed up:

   - If the MongoDB version uses the MongoDB standard ``A.B.C`` version
     format, the daemon looks for a folder named
     ``mongodb-<platform>-<architecture>-A.B.x``, where ``x`` is greater
     than or equal to ``C``.

   - If the MongoDB version does not use the standard format, the daemon
     looks for a folder named
     ``mongodb-<platform>-<architecture>-<version>``, where ``<version>``
     ends with the MongoDB instance's version. For example, if the source
     version is ``2.4.10-abc``, the daemon would match on
     ``mongodb-linux-x86_64-production-2.4.10-abc``.

.. setting:: mongodb.release.autoDownload

   *Type*: boolean

   If you set this to ``true``, Backup automatically downloads the latest
   release of MongoDB from `mongodb.org/downloads
   <http://www.mongodb.org/downloads>`_ and stores it in the directory
   specified by the :setting:`mongodb.release.directory` setting. Backup's
   ``mongodb-fetch`` utility, located in the
   ``/opt/mongodb/backup-daemon/bin`` directory, runs once an hour to
   perform the downloads.

   If you set this to ``false``, you must manually download and install
   the needed MongoDB releases to the directory specified in the
   :setting:`mongodb.release.directory` setting. Downloads must adhere to
   the rules described in the :setting:`mongodb.release.directory`
   entry above.

.. _advanced-backup-restore-settings:

Advanced Backup Restore Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded 1.5.4, 1.6.1

These settings affect |mms| Backup restore behaviors. They are are found
only in the ``conf-daemon.properties`` file.

.. setting:: mms.backup.restore.linkExpirationHours

   *Type*: number

   *Default*: 1

   The amount of time in hours that a restore link is available.

.. setting:: mms.backup.restore.linkUnlimitedUses

   *Type*: boolean

   *Default*: false

   Sets whether the link to a restored point-in-time snapshot can be used
   more than once. By default, when you create a point-in-time snapshot,
   the link to download the snapshot can be used just once. To allow
   multiple downloads of the snapshot, set this value to ``true``.

.. setting:: mms.backup.restore.snapshotPITExpirationHours

   *Type*: number

   *Default*: 24

   The length of time in hours that a link to a restored point-in-time
   snapshot is available. By default, the link is available for 24 hours
   after creation of the point-in-time snapshot.

Session Management Setting
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. setting:: mms.session.maxHours

   *Type*: number

   The number of hours before a session on the |mms| website expires.

.. setting:: mms.monitoring.agent.session.timeoutMillis

   .. versionadded 1.5.4, 1.6.1

   *Type*: number

   *Default*: 300000

   *Minimum*: 90000

   The Monitoring Agent failover time, in milliseconds. If |mms| does not
   receive a deployment status from the primary Monitoring Agent in the
   time specified, |mms| will make a standby Monitoring Agent the new
   primary. Configuring the timeout below `90000` (90 seconds) will cause
   |mms| to fail at startup with a configuration error.

Password Policy Settings
~~~~~~~~~~~~~~~~~~~~~~~~

You can configure the password policy for |mms| user accounts with the
following settings:

.. setting:: mms.password.minChangesBeforeReuse

   *Type*: number

   The number of previous passwords to remember. You cannot reuse a
   remembered password as a new password.

.. setting:: mms.password.maxFailedAttemptsBeforeAccountLock

   *Type*: number

   The number of failed login attempts before an account becomes
   locked. Only an an |mms| Administrator can unlock a locked account.

.. setting:: mms.password.maxDaysInactiveBeforeAccountLock

   *Type*: number

   The maximum number of days with no visits to the |mms| website before
   |mms| locks an account.

.. setting:: mms.password.maxDaysBeforeChangeRequired

   *Type*: number

   The number of days a password is valid before the password expires.

.. setting:: mms.multiFactorAuth.require

   *Type*: boolean

   *Default*: false

   When ``true``, |mms| will require two-factor authentication for
   users to log in or to perform certain destructive operations within the
   application.

   If you configure :ref:`Twilio integration <twilio-sms-alert-settings>`,
   users may obtain their second factor tokens via Google Authenticator, SMS,
   or voice calls. Otherwise, the only mechanism to provide two-factor authentication is
   Google Authenticator.

.. setting:: mms.multiFactorAuth.allowReset

   *Type*: boolean

   *Default*: false

   When ``true``, |mms| will allow users to reset their two-factor
   authentication settings via email in an analogous fashion to resetting their
   passwords.

   To reset two-factor authentication, a user must:

   - be able to receive email at the address associated with the user account
   - know the user account's password
   - know the Agent API key for any |mms| Group of which the user is a member

.. setting:: mms.multiFactorAuth.issuer

   *Type*: string

   If Google Authenticator provides two-factor authentication, this
   string is the ``issuer`` in the Google Authenticator app. If
   left blank, the ``issuer`` is the domain name of the |mms|
   installation.

Public API
~~~~~~~~~~

You can modify certain default behaviors of the :doc:`Public API </core/api>`.

.. setting:: mms.publicApi.ignoreEnabledForGlobalRoles

   *Type*: boolean

   By default, a user with a :ref:`global role <global-roles>` can access any
   |onprem| group through the :doc:`Public API </core/api>`, whether or not
   the Public API is enabled for that group.

   To prevent access when a group's Public API is disabled, add
   :setting:`mms.publicApi.ignoreEnabledForGlobalRoles` to
   ``conf-mms.properties`` and set its value to ``false``:

   .. code-block:: ini

      mms.publicApi.ignoreEnabledForGlobalRoles=false

.. setting:: mms.publicApi.whitelistEnabled

   *Type*: boolean

   Certain API calls require that requests originate from a whitelisted IP
   address. To turn off this requirement, add
   :setting:`mms.publicApi.whitelistEnabled` to ``conf-mms.properties`` and
   set its value to ``false``:

   .. code-block:: ini

      mms.publicApi.whitelistEnabled=false

.. _snmp-heartbeat-configure:

SNMP Heartbeat Settings
~~~~~~~~~~~~~~~~~~~~~~~

You can configure the |application| to send a periodic heartbeat
trap notification (v2c) that contain an internal health assessment of
the |application|. The |application| can send traps to one or more endpoints
on the standard SNMP UDP port 162.

To configure the |application| to send trap notifications,
download the Management Information Base (MIB) file at
`<http://downloads.mongodb.com/on-prem-monitoring/MMS-MONGODB-MIB.txt>`_
and configure the following settings:

.. setting:: snmp.default.hosts

   *Type*: string

   *Default*: blank

   Comma-separated list of hosts where 'heartbeat' traps will be sent
   on the standard UDP port 162.
   You must set :setting:`snmp.default.hosts` to enable the SNMP
   heartbeat functionality; otherwise, leaving the setting blank
   disables the SNMP heartbeat functionality.

.. setting:: snmp.listen.port

   *Type*: number

   *Default*: 11611

   Listening UDP port for SNMP. Setting to a number less than 1024 will
   require running the |application| with root privileges.

.. setting:: snmp.default.heartbeat.interval

   *Type*: number

   *Default*: 300

   Number of seconds between heartbeat notifications.

reCaptcha Settings
~~~~~~~~~~~~~~~~~~

To enable `reCaptcha anti-spam test
<https://www.google.com/recaptcha>`_ on new user
registration, you must have a `reCaptcha account
<https://www.google.com/recaptcha/admin>`_ and specify the API
information in the configuration file.

.. setting:: reCaptcha.enabled

   *Type*: boolean

   Set to ``true`` to require `reCaptcha
   <https://www.google.com/recaptcha/admin>`_ validation when a new user
   registers.

.. setting:: reCaptcha.public.key

   *Type*: string

   The reCaptcha public key associated with your account.

.. setting:: reCaptcha.private.key

   *Type*: string

   The reCaptcha private key associated with your account.

.. _ldap-settings:

LDAP Settings
~~~~~~~~~~~~~

To configure |onprem| for LDAP, you must start with a new installation or reset
your installation to a clean state. Your |onprem| installation cannot have
existing users, groups, or hosts. For assistance, contact your MongoDB account
manager.

LDAP Server Setting
```````````````````

.. setting:: mms.userSvcClass

   *Type*: string

   The LDAP service class ``com.xgen.svc.mms.svc.user.UserSvcLdap``; i.e.

   .. code-block:: ini

      mms.userSvcClass=com.xgen.svc.mms.svc.user.UserSvcLdap

.. _ldap-user-settings:

LDAP User Settings
``````````````````

These settings configure |mms| to use an LDAP server for authentication. If you
use LDAP authentication, users must belong to an LDAP group to log into |mms|.
You must create LDAP groups for each |mms| :doc:`user role
</reference/user-roles>`.

.. setting:: mms.ldap.url

   *Type*: string

   The URI for the LDAP server. For example:

   .. code-block:: ini

      mms.ldap.url=ldap://acme-dc1.acme.example.net:3890

.. setting:: mms.ldap.bindDn

   *Type*: string

   The LDAP user used to execute searches for other users. For example:

   .. code-block:: ini

      mms.ldap.bindDn=authUser@acme.example.net

.. setting:: mms.ldap.bindPassword

   *Type*: string

   The credentials for the search user. For example:

   .. code-block:: ini

      mms.ldap.bindPassword=<user-password>

.. setting:: mms.ldap.user.baseDn

   *Type*: string

   The base Distinguished Name (DN) that |mms| uses to search for users. Escape
   the ``=`` sign with ``\``. For example:

   .. code-block:: ini

      mms.ldap.user.baseDn=DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.user.searchAttribute

   *Type*: string

   The LDAP field used for the LDAP search. This is typically a username
   or email address.

   The value of this field is also used as the |mms| username.

   Example:

   .. code-block:: ini

      mms.ldap.user.searchAttribute=mail

.. setting:: mms.ldap.user.group

   *Type*: string

   The LDAP user attribute that contains the list of LDAP groups the user
   belongs to. The LDAP attribute can use any format to list the groups,
   including Common Name (``cn``) or Distinguished Name (``dn``). All |mms|
   settings in this configuration file that specify groups must match the
   chosen format.

   Example:

   .. code-block:: ini

      mms.ldap.user.group=memberOf

.. setting:: mms.ldap.global.role.owner

   *Type*: string

   The LDAP group that has full privileges for the |mms| deployment, including
   full access to all |mms| :doc:`groups </tutorial/create-group>` and all
   administrative permissions. Users in the specified LDAP group receive the
   :ref:`global owner <global-owner-role>` role in |mms|. Specify the group
   using the format that is used by the LDAP attribute specified in the
   :setting:`mms.ldap.user.group` setting.

   Example:

   .. code-block:: ini

      mms.ldap.global.role.owner=CN\=MMSGlobalOwner,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.user.firstName

   *Type*: string

   The LDAP user attribute that contains the user's first name. After
   successful LDAP authentication, |mms| synchronizes the specified LDAP
   attribute with the first name from the |mms| user record.

   For example:

   .. code-block:: ini

      mms.ldap.user.firstName=givenName

.. setting:: mms.ldap.user.lastName

   *Type*: string

   The LDAP user attribute that contains the user's last name. After
   successful LDAP authentication, |mms| synchronizes the specified LDAP
   attribute with the last name from the |mms| user record.

   For example:

   .. code-block:: ini

      mms.ldap.user.lastName=sn

.. setting:: mms.ldap.user.email

   *Type*: string

   The LDAP user attribute that contains the user's email address. After
   successful LDAP authentication, |mms| synchronizes the specified LDAP
   attribute with the email address from the |mms| user record.

   For example:

   .. code-block:: ini

      mms.ldap.user.email=mail

.. _default-ldap-separator:

.. _ldap-global-role-settings:

LDAP Global Role Settings
`````````````````````````

These settings assign |mms| :ref:`global roles <global-roles>` to the members of
the specified LDAP groups. Specify groups using the format used by the LDAP
attribute specified in the :setting:`mms.ldap.user.group` setting. You can
specify multiple groups using the ``;;`` delimiter. To change the default
delimiter, use the :setting:`mms.ldap.group.separator` setting.

Each |mms| global role provides its level of access to all the |mms| :doc:`groups
</tutorial/create-group>` in the deployment. To provide access to specific
groups, use :ref:`group-level roles <global-roles>`.

.. setting:: mms.ldap.global.role.automationAdmin

   *Type*: string

   The LDAP group whose members have the :ref:`global automation admin
   role <global-automation-admin-role>` in |mms|. For example:

   .. code-block:: ini

      mms.ldap.global.role.automationAdmin=CN\=MMS-AutomationAdmin,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.global.role.backupAdmin

   *Type*: string

   The LDAP group whose members have the :ref:`global backup admin role
   <global-backup-admin-role>` in |mms|. For example:

   .. code-block:: ini

      mms.ldap.global.role.backupAdmin=CN\=MMS-BackupAdmin,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.global.role.monitoringAdmin

   *Type*: string

   The LDAP group whose members have the :ref:`global monitoring admin
   role <global-monitoring-admin-role>` in |mms|. For example:

   .. code-block:: ini

      mms.ldap.global.role.monitoringAdmin=CN\=MMS-MonitoringAdmin,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.global.role.userAdmin

   *Type*: string

   The LDAP group whose members have the :ref:`global user admin role
   <global-user-admin-role>` in |mms|. For example:

   .. code-block:: ini

      mms.ldap.global.role.userAdmin=CN\=MMS-UserAdmin,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.global.role.readOnly

   *Type*: string

   The LDAP group whose members have the :ref:`global read-only role
   <global-read-only-role>` in |mms|. For example:

   .. code-block:: ini

      mms.ldap.global.role.readOnly=CN\=MMS-ReadOnly,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.group.separator

   *Type*: string

   Each of the global role values can take a delimited list of groups: for
   example ``"dbas,sysadmins"``.

   If a group value contains the delimiter, the
   delimiter must be set to another value. For example, if you
   have the group value ``"CN\=foo,DN\=bar"`` and the delimiter is ``,`` then
   |mms| parses ``"CN\=foo,DN\=bar"`` as two elements rather than as the
   description for a single group. Change the delimiter by adding the
   :setting:`mms.ldap.group.separator` setting to the configuration file
   and specifying a different delimiter.

   Starting with |mms| 1.5, the default delimiter is ``;;``.

.. _configuration-kerberos-settings:

Kerberos Settings
~~~~~~~~~~~~~~~~~

To enable Kerberos authentication between the |application| and the
:ref:`mms-application-database`,
configure the following settings. You must configure
all required Kerberos settings to enable Kerberos authentication.

.. setting:: jvm.java.security.krb5.kdc

   *Type*: string

   Required if using Kerberos. The IP/FQDN (Fully Qualified Domain Name) of
   the KDC server. The value will be set to JVM's java.security.krb5.kdc.

   .. code-block:: properties

      jvm.java.security.krb5.kdc=kdc.example.com

.. setting:: jvm.java.security.krb5.realm

   *Type*: string

   Required if using Kerberos. This is the default REALM for Kerberos. It is
   being used for JVM's java.security.krb5.realm.

   .. code-block:: properties

      jvm.java.security.krb5.realm=EXAMPLE.COM

.. setting:: mms.kerberos.principal

   *Type*: string

   Required if using Kerberos. The principal used to authenticate with
   MongoDB. This should be the exact same user on the
   :setting:`mongo.mongoUri` above.

   .. code-block:: properties

      mms.kerberos.principal=mms/mmsweb.example.com@EXAMPLE.COM

.. setting:: mms.kerberos.keyTab

   *Type*: string

   Required if using Kerberos. The absolute path to the keytab file for the
   principal.

   .. code-block:: properties

      mms.kerberos.keyTab=/path/to/mms.keytab

.. setting:: mms.kerberos.debug

   *Type*: boolean

   The debug flag to output more information on Kerberos
   authentication process.

   .. code-block:: properties

      mms.kerberos.debug=false

.. _encrypt-mongodb-user-credentials:

Encrypt MongoDB User Credentials
--------------------------------

If you do not want to store credentials in plain text, |monitoring|
provides a tool to encrypt the MongoDB credentials. To encrypt
authentication credentials:

#. Issue the following command to create an encrypted credential pair,
   replacing ``<username>`` with your username:

   .. code-block:: sh

      sudo <install_dir>/bin/credentialstool --username <username> --password

   This will prompt you to enter the password and will output the
   encrypted credential pair.

   ``credentialstool`` requires root privileges, (i.e. ``sudo``) when
   installed with ``rpm`` or ``deb`` packages, because it modifies the
   ``/etc/mongodb-mms/gen.key`` file.

#. Use the encrypted credential pair in the :setting:`mongo.mongoUri`
   settings where needed, and add the
   :setting:`mongo.encryptedCredentials = true
   <mongo.encryptedCredentials>` setting. For example:

   .. code-block:: sh

      mongo.mongoUri=mongodb://da83ex3s:a4fbcf3a1@mydb1.example.net:40000/admin
      mongo.encryptedCredentials=true

.. important::
   The ``conf-mms.properties`` file can contain multiple
   :setting:`mongo.mongoUri` settings. If
   :setting:`mongo.encryptedCredentials` is ``true``, you must encrypt
   all user credentials found in the various :setting:`mongo.mongoUri`
   settings.

.. NOTE: Do NOT document these settings:
   increment.gle.freq
   increment.offer.time
   increment.queue.size
   increment.thread.count
   ping.queue.size
   ping.thread.count
