==============
Access Control
==============

.. default-domain:: mongodb

MongoDB provides support for authentication and authorization on a
per-database level. Users exist in the context of a single logical
database.

.. _authentication:

Authentication
--------------

MongoDB provisions authentication, or verification of the user
identity, on a per-database level. Authentication disables anonymous
access to the database. For basic authentication, MongoDB stores the
user credentials in the ``admin`` database's :data:`system.users
<admin.system.users>` collection.

Authentication is **disabled** by default. To enable authentication for
a given :program:`mongod` or :program:`mongos` instance, use the
:setting:`auth` and :setting:`keyFile` configuration settings. For
details, see :doc:`/tutorial/enable-authentication`.

.. versionadded:: 2.6

   MongoDB supports x.509 certificate authentication for use with a
   secure SSL connection. See :doc:`/tutorial/configure-x509`.

.. versionadded 2.0: Before 2.0, sharded clusters *had* to run with
   trusted applications and a trusted networking configuration.

For MongoDB Enterprise installations, authentication
using a Kerberos service is available. For Linux, see
:doc:`/tutorial/control-access-to-mongodb-with-kerberos-authentication`.

.. important::

   You can authenticate as only one user for a given database. If you
   authenticate to a database as one user and later authenticate on the
   same database as a different user, the second authentication
   invalidates the first. You can, however, log into a *different*
   database as a different user and not invalidate your authentication
   on other databases, though this is not a recommended approach.

   Each client connection should authenticate as exactly one
   user.

.. _authorization:

Authorization
-------------

MongoDB uses a role-based approach to authorization. A user's access to
resources and operations depends on the user's roles.

.. _roles:

Roles
~~~~~

Roles contain the :ref:`privileges <privileges>` that allow users to perform
:doc:`actions </reference/privilege-actions>` on database :ref:`resources
<resource-document>`. A user assigned a role receives all the privileges of
that role.

A role can consist of both privileges and other roles. A role :ref:`inherits
<inheritance>` the privileges of any contained roles.

MongoDB provides both :doc:`system-defined roles
</reference/system-defined-roles>` and the ability to create new
:ref:`user-defined roles <user-defined-roles>`.

.. _privileges:

Privileges
``````````

A privilege is a set of permitted :doc:`actions
</reference/privilege-actions>` on a defined :ref:`resource
<resource-document>`.

For example, a privilege might permit the ``update`` action on the ``products``
database, allowing a user to change data in *existing* documents on that
database. To instead create a *new* document on the ``products`` database
the user would need a privilege that permits the ``insert`` action on the
database.

.. include:: /includes/fact-roles-privileges.rst

.. _inheritance:

Inheritance
```````````

A role can include one or more existing roles in its definition, in which case
the role inherits the privileges of the included roles. The role inherits
*all* the privileges of an included role.

.. include:: /includes/fact-roles-inheritance.rst

.. _user-defined-roles:

User-Defined Roles
~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.6

MongoDB provides the ability to create
and manage custom roles. To create a role is to define its privileges
by pairing :ref:`resources <resource-document>` (e.g. database,
collection) with :doc:`actions </reference/privilege-actions>` (e.g.
``insert``, ``find``), and/or by specifying other roles from which the
role inherits privileges.

To create and manage roles, MongoDB provides :ref:`role management
commands <role-management-commands>`. MongoDB scopes each role to the
database in which it is created and uniquely identifies each role by
the pairing of its name and its database. MongoDB stores the
user-defined roles information in the :doc:`system.roles collection
</reference/system-roles-collection>` of the ``admin`` database.

User-defined roles provide the ability to specify privileges at the
collection level. To configure collection-level access, create
privileges that pair actions to a particular collection.

Role Assignment to Users
~~~~~~~~~~~~~~~~~~~~~~~~

Users can have multiple roles and can have different roles on different
databases. Assigning roles to a user authorizes the user to have only
the privileges granted by the roles. Roles always grant privileges and
never limit access. For example, if a user has both :authrole:`read`
*and* :authrole:`readWriteAnyDatabase` roles on a database, the greater
access prevails. A user's role assignments can include
:ref:`built-in roles <built-in-roles>` provided by MongoDB or
a :ref:`custom roles <user-defined-roles>` defined by the user.

To assign roles to users, you must be a user with an administrative
role in the database. As such, you must first create an administrative
user. For details, see :doc:`/tutorial/add-user-administrator` and
:doc:`/tutorial/add-user-to-database`.

MongoDB stores each user's role assignments in the ``admin`` database's
:doc:`system.users collection </reference/system-users-collection>`. To
manage data in this collection, MongoDB provides :ref:`user management
commands <user-management-commands>`.
