=========================
Production Considerations
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

The following page lists some production considerations for running
transactions. These apply whether you run transactions on replica sets
or sharded clusters. For running transactions on sharded clusters, see
also the :doc:`/core/transactions-sharded-clusters` for additional
considerations that are specific to sharded clusters.

Availability
------------

- **Starting in version 4.0**, MongoDB provides the ability to perform
  multi-document transactions for replica sets. 

- **Starting in version 4.2**, MongoDB provides the ability to perform
  multi-document transactions for sharded clusters.

  .. include:: /includes/extracts/transactions-beta.rst

Feature Compatibility
---------------------

To use transactions, the :ref:`featureCompatibilityVersion <view-fcv>`
for all members of the deployment must be at least:

.. list-table::
   :header-rows: 1

   * - Deployment
     - Minimum ``featureCompatibilityVersion``
     
   * - Replica Set
     - ``4.0`` 
     
   * - Sharded Cluster
     - ``4.2``

To check the fCV for a member, connect to the member and run the
following command:

.. code-block:: javascript

   db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

For more information, see the
:dbcommand:`setFeatureCompatibilityVersion` reference page.

.. _transaction-limit:

Runtime Limit
-------------

By default, a transaction must have a runtime of less than one minute.
You can modify this limit using
:parameter:`transactionLifetimeLimitSeconds`. Transactions that exceeds
this limit are considered expired and will be aborted by a periodic
cleanup process.

Oplog Size Limit
----------------

When the transaction commits, a single :doc:`oplog (operations log)
</core/replica-set-oplog>` entry is created if the transaction contains
any write operations. That is, the individual operations in the
transactions do not have a corresponding oplog entry. Instead, a single
oplog entry contains all of the write operations within a transaction.
The oplog entry for the transaction must be within the BSON document
size limit of 16MB.

WiredTiger Cache
----------------

To prevent storage cache pressure from negatively impacting the
performance:

- When you abandon a transaction, abort the transaction.

- When you encounter an error during individual operation in the
  transaction, abort and retry the transaction.

The :parameter:`transactionLifetimeLimitSeconds` also ensures that
expired transactions are aborted periodically to relieve storage cache
pressure.



Transactions and Security
-------------------------

- If running with :doc:`access control </core/authorization>`, you must
  have :doc:`privileges </reference/built-in-roles>` for the
  :ref:`operations in the transaction <transactions-operations>`.

- If running with :doc:`auditing </core/auditing>`, operations in an
  aborted transaction are still audited. However, there is no audit
  event that indicates that the transaction aborted.

Sharded Clusters and Arbiters
-----------------------------

On a sharded cluster, transactions that span multiple shards will error
and abort if any involved shard contains an arbiter.

.. _transactions-psa:

3-Member Primary-Secondary-Arbiter Architecture
-----------------------------------------------
  
For a three-member replica set with a primary-secondary-arbiter (PSA)
architecture or a sharded cluster with a three-member PSA shards, you
may have :ref:`disabled read concern "majority"
<disable-read-concern-majority>` to avoid cache pressure.

- **For a sharded clusters**, disabling read concern
  :readconcern:`"majority"` affects support for transactions.

  - Specifically, a transaction with read concern ``snapshot`` errors
    if the transaction involves a shard with read concern
    ``"majority"`` disabled.

  - Specifically, a transaction that spans multiple shards errors if
    the transaction involves a shard with read concern ``"majority"``
    disabled. 

- **For a replica set**, disabling read concern :readconcern:`"majority"`
  does not affect transactions; i.e. you can specify read concern
  :readconcern:`"majority"` for transactions even if read concern
  :readconcern:`"majority"` is disabled.

To check if read concern "majority" is disabled, you can run
:method:`db.serverStatus()` and check the
:serverstatus:`storageEngine.supportsCommittedReads` field. If
``false``, read concern "majority" is disabled.
 
.. seealso::

   - :option:`--enableMajorityReadConcern false <mongod
     --enableMajorityReadConcern>`

   - :setting:`replication.enableMajorityReadConcern: false
     <replication.enableMajorityReadConcern>`.
  
.. _txns-locks:

Acquiring Locks
---------------

By default, transactions wait up to ``5`` milliseconds to acquire locks
required by the operations in the transaction. If the transaction
cannot acquire its required locks within the ``5`` milliseconds, the
transaction aborts.

Transactions release all locks upon abort or commit.

.. include:: /includes/extracts/transactions-operations-catalog-tip.rst

Lock Request Timeout
~~~~~~~~~~~~~~~~~~~~

You can use the :parameter:`maxTransactionLockRequestTimeoutMillis`
parameter to adjust how long transactions wait to acquire locks.
Increasing :parameter:`maxTransactionLockRequestTimeoutMillis` allows
operations in the transactions to wait the specified time to acquire
the required locks. This can help obviate transaction aborts on
momentary concurrent lock acquisitions, like fast-running metadata
operations. However, this could possibly delay the abort of deadlocked
transaction operations.

You can also use operation-specific timeout by setting
:parameter:`maxTransactionLockRequestTimeoutMillis` to ``-1``.

.. _txn-prod-considerations-ddl:

Pending DDL Operations and Transactions
---------------------------------------

If a multi-document transaction is in progress, new DDL operations that
affect the same database(s) wait behind the transaction. While these
pending DDL operations exist, new transactions that access the same
database as the pending DDL operations cannot obtain the required locks
and will abort after waiting
:parameter:`maxTransactionLockRequestTimeoutMillis`. In addition, new
non-transaction operations that access the same database will block
until they reach their ``maxTimeMS`` limit.

To illustrate, compare the following two situations:

Consider a situation where an in-progress transaction performs various
CRUD operations on the ``employees`` collection in the ``hr`` database.
While that transaction is in progress, a separate transaction that
accesses the ``foobar`` collection in the ``hr`` database can start and
complete.

However, consider a situation where an in-progress transaction performs
various CRUD operations on the ``employees`` collection in the ``hr``
database and a separate DDL operation is issued to create an index on
the ``fluffy`` collection in the ``hr`` database. The DDL operation
waits for the transaction to finish.

While the DDL operation is pending, a new transaction attempts to
access the ``foobar`` collection in the ``hr`` database. If the DDL
operation remains pending for
:parameter:`maxTransactionLockRequestTimeoutMillis`, the new
transaction aborts.

.. seealso:: 

   - :ref:`transactions-write-conflicts`
   
   - :ref:`transactions-stale-reads`

.. _transactions-write-conflicts:

In-progress Transactions and Write Conflicts
--------------------------------------------

.. include:: /includes/extracts/transactions-write-conflict.rst

.. seealso::

   - :ref:`txns-locks`
   - :ref:`txn-prod-considerations-ddl`

.. _transactions-stale-reads:

In-progress Transactions and Stale Reads
----------------------------------------

.. include:: /includes/extracts/transactions-stale-reads.rst

In-progress Transactions and Chunk Migration
--------------------------------------------

.. include:: /includes/extracts/transactions-chunk-migration.rst

Errors
------

Sharded Transactions and MongoDB 4.0 drivers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For transactions on MongoDB 4.2 deployments, clients require MongoDB
drivers updated for MongoDB 4.2.

On sharded clusters with multiple :binary:`~bin.mongos` instances,
performing transactions with drivers updated for MongoDB 4.0 (instead
of MongoDB 4.2) will fail and can result in errors, including:

.. note::

   Your driver may return a different error. Refer to your driver's
   documentation for details.


.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Error Code
     - Error Message

   * - 251
     - ``cannot continue txnId -1 for session ... with txnId 1``

   * - 50940
     - ``cannot commit with no participants``

Additional Information
----------------------

.. seealso:: :doc:`/core/transactions-sharded-clusters`

