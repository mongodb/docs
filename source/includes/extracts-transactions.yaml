ref: transactions-read-pref
content: |

   :ref:`Distributed transactions <transactions>` that contain
   read operations must use read preference :readmode:`primary`. All
   operations in a given transaction must route to the same member.

---
ref: transactions-usage
content: |

   .. important::

      In most cases, a distributed transaction incurs a greater
      performance cost over single document writes, and the
      availability of distributed transactions should not be a
      replacement for effective schema design. For many scenarios, the
      :ref:`denormalized data model (embedded documents and arrays)
      <data-modeling-embedding>` will continue to be optimal for your
      data and use cases. That is, for many scenarios, modeling your data
      appropriately will minimize the need for distributed
      transactions. 
      
      For additional transactions usage considerations
      (such as runtime limit and oplog size limit), see also
      :ref:`<production-considerations>`.

---
ref: transactions-intro
content: |
   .. include:: /includes/extracts/transactions-intro-blurb.rst

   .. include:: /includes/extracts/transactions-usage.rst
---
ref: transactions-intro-blurb
content: |

   .. include:: /includes/transactions/distributed-transaction-repl-shard-support.rst

   For more information, see :ref:`transactions <transactions>`

---
ref: transactions-faq
content: |
   Because a single document can contain related data that would otherwise
   be modeled across separate parent-child tables in a relational schema,
   MongoDB's atomic single-document operations already provide transaction
   semantics that meet the data integrity needs of the majority of
   applications. One or more fields may be written in a single operation,
   including updates to multiple sub-documents and elements of an array.
   The guarantees provided by MongoDB ensure complete isolation as a
   document is updated; any errors cause the operation to roll back so
   that clients receive a consistent view of the document.

   .. include:: /includes/transactions/distributed-transaction-repl-shard-support.rst

   For more information, see :ref:`transactions <transactions>`.

---
ref: transactions-operations-restrictions
content: |

   The following operations are not allowed in transactions:
 
   - Creating new collections in cross-shard write transactions. For
     example, if you write to an existing collection in one shard and
     implicitly create a collection in a different shard, MongoDB cannot
     perform both operations in the same transaction.

   - :ref:`Explicit creation of collections
     <transactions-operations-ddl-explicit>`, e.g.
     :method:`db.createCollection()` method, and indexes, e.g.
     :method:`db.collection.createIndexes()` and
     :method:`db.collection.createIndex()` methods, when using a read
     concern level other than :readconcern:`"local"`.

   - The :dbcommand:`listCollections` and :dbcommand:`listIndexes`
     commands and their helper methods.

   - Other non-CRUD and non-informational operations, such as
     :dbcommand:`createUser`, :dbcommand:`getParameter`,
     :dbcommand:`count`, etc. and their helpers.

---
ref: transactions-operations-restrictions-info
content: |

   Informational commands, such as :dbcommand:`hello`,
   :dbcommand:`buildInfo`, :dbcommand:`connectionStatus` (and their
   helper methods) are allowed in transactions; however, they cannot be
   the first operation in the transaction.

---
ref: transactions-operations-crud
content: |

   - You can create collections and indexes in transactions. For
     details, see :ref:`transactions-create-collections-indexes`
   
   - The collections used in a transaction can be in different
     databases.

     .. note::
      
        .. include:: /includes/extracts/transactions-cross-shard-collection-restriction.rst

   - You cannot write to :ref:`capped <manual-capped-collection>`
     collections.

   - You cannot use read concern :readconcern:`"snapshot"` when reading
     from a :ref:`capped <manual-capped-collection>` collection.
     (Starting in MongoDB 5.0)

   - You cannot read/write to collections in the ``config``, ``admin``,
     or ``local`` databases.

   - You cannot write to ``system.*`` collections.

   - You cannot return the supported operation's query plan using 
     ``explain`` or similar commands.

   .. include:: /includes/extracts/transactions-operations-getMore.rst

   - .. include:: /includes/extracts/transactions-killop-change.rst

---
ref: transactions-cross-shard-collection-restriction
content: |

   You cannot create new collections in cross-shard write transactions.
   For example, if you write to an existing collection in one shard and
   implicitly create a collection in a different shard, MongoDB cannot
   perform both operations in the same transaction.
---
ref: transactions-operations-catalog-tip
content: |

   .. tip:: 

      When creating or dropping a collection immediately before
      starting a transaction, if the collection is accessed within the
      transaction, issue the create or drop operation with write
      concern :writeconcern:`"majority"` to ensure that the transaction
      can acquire the required locks.

---
ref: transactions-operations-getMore
content: |

   - For cursors created outside of a transaction, you cannot call
     :dbcommand:`getMore` inside the transaction.

   - For cursors created in a transaction, you cannot call
     :dbcommand:`getMore` outside the transaction.

---
ref: transactions-supported-operation
content: |

   |operation| can be used inside :ref:`distributed transactions <transactions>`.

---
ref: transactions-distinct-support
content: |

   To perform a distinct operation within a transaction:
      
   - For unsharded collections, you can use the
     :method:`db.collection.distinct()` method/the
     :dbcommand:`distinct` command as well as the aggregation pipeline
     with the :pipeline:`$group` stage.
  
   - For sharded collections, you cannot use the
     :method:`db.collection.distinct()` method or the
     :dbcommand:`distinct` command.
     
     To find the distinct values for a sharded collection, use the
     aggregation pipeline with the :pipeline:`$group` stage instead.
     See :ref:`transactions-operations-distinct` for details.

### A fleshed out version (transactions-distinct) of this extract is included in transaction pages

---
ref: transactions-operations-write-concern
content: |

   Do not explicitly set the write concern for the operation if run in
   a transaction. To use write concern with transactions, see
   :ref:`transactions-write-concern`.

---
ref: transactions-write-conflict
content: |

   If a transaction is in progress and a write
   outside the transaction modifies a document that an operation in the
   transaction later tries to modify, the transaction aborts because of
   a write conflict.

   If a transaction is in progress and has taken a lock
   to modify a document, when a write outside the transaction tries to
   modify the same document, the write waits until the transaction ends.

---
ref: transactions-stale-reads
content: |

   Read operations inside a transaction can return old data, which is known as a
   :term:`stale read`. Read operations inside a transaction are not guaranteed 
   to see writes performed by other committed transactions or
   non-transactional writes. For example, consider the following sequence: 
   
   #. A transaction is in-progress.
   
   #. A write outside the transaction deletes a document. 
   
   #. A read operation inside the transaction can read the now-deleted document 
      since the operation uses a snapshot from before the write operation.

   To avoid stale reads inside transactions for a single document, you
   can use the :method:`db.collection.findOneAndUpdate()` method. The following 
   :binary:`~bin.mongosh` example demonstrates how you can use 
   ``db.collection.findOneAndUpdate()`` to take a :term:`write lock` and ensure 
   that your reads are up to date:

   .. procedure::
        :style: normal

        .. step:: Insert a document into the ``employees`` collection
           
           .. code-block:: javascript
              :copyable: true 
           
              db.getSiblingDB("hr").employees.insertOne(
                 { _id: 1, status: "Active" }
              )

        .. step:: Start a session

           .. code-block:: javascript
              :copyable: true 
              
              session = db.getMongo().startSession( { readPreference: { mode: "primary" } } )

        .. step:: Start a transaction 
         
           .. code-block:: javascript
              :copyable: true 
             
              session.startTransaction( { readConcern: { level: "snapshot" }, writeConcern: { w: "majority" } } )
             
              employeesCollection = session.getDatabase("hr").employees

        .. step:: Use ``db.collection.findOneAndUpdate()`` inside the transaction
         
           .. code-block:: javascript
              :copyable: true 
             
              employeeDoc = employeesCollection.findOneAndUpdate( 
                 { _id: 1, status: "Active" },
                 { $set: { lockId: ObjectId() } },
                 { returnNewDocument: true }
              )

           Note that inside the transaction, the ``findOneAndUpdate`` operation 
           sets a new ``lockId`` field. You can set ``lockId`` field to any 
           value, as long as it modifies the document. By updating the 
           document, the transaction acquires a lock.
           
           If an operation outside of the transaction attempts to modify the 
           document before you commit the transaction, MongoDB returns a write 
           conflict error to the external operation.

        .. step:: Commit the transaction
        
           .. code-block:: javascript
              :copyable: true         
              
              session.commitTransaction()

           After you commit the transaction, MongoDB releases the lock.
           
           .. note:: 
           
              If any operation in the transaction fails, the transaction 
              aborts and all data changes made in the transaction are discarded
              without ever becoming visible in the collection.

---
ref: transactions-read-concern-majority
content: |
   Disabling :readconcern:`"majority"` read concern affects support for
   :ref:`transactions <transactions>` on sharded clusters. Specifically:

   - A transaction cannot use read concern :readconcern:`"snapshot"` if
     the transaction involves a shard that has :ref:`disabled read
     concern "majority" <disable-read-concern-majority>`.

   - A transaction that writes to multiple shards errors if any of the
     transaction's read or write operations involves a shard that has
     disabled read concern :readconcern:`"majority"`.

   However, it does not affect :ref:`transactions <transactions>`
   on replica sets. For transactions on replica sets, you can specify
   read concern :readconcern:`"majority"` (or :readconcern:`"snapshot"`
   or :readconcern:`"local"` ) for distributed transactions even if
   read concern :readconcern:`"majority"` is disabled.
   
# This is included in pages talking more about disabling rc majority and its effects.

# Separate includes (see below) for transactions pages where the transactions leads as the subject
---
ref: transactions-read-concern-majority-replica-set
content: |  

   On a replica set, you can specify read concern :readconcern:`"local"`
   or :readconcern:`"majority"` or :readconcern:`"snapshot"` even if the
   replica set has :ref:`disabled read concern "majority"
   <disable-read-concern-majority>`.
   
   However, if you are planning to transition to a sharded cluster with
   disabled read concern majority shards, avoid using read concern ``"snapshot"``.

---
ref: transactions-chunk-migration
content: |
   :ref:`Chunk migration <chunk-migration-procedure>` acquires
   exclusive collection locks during certain stages.

   If an ongoing transaction has a lock on a collection and a chunk
   migration that involves that collection starts, these migration stages
   must wait for the transaction to release the locks on the collection,
   thereby impacting the performance of chunk migrations.

   If a chunk migration interleaves with a transaction (for instance, if a
   transaction starts while a chunk migration is already in progress and
   the migration completes before the transaction takes a lock on the
   collection), the transaction errors during the commit and aborts.

   Depending on how the two operations interleave, some sample errors
   include (the error messages have been abbreviated):

   - ``an error from cluster data placement change ... migration commit in progress for <namespace>``

   - ``Cannot find shardId the chunk belonged to at cluster time ...``

---
ref: transactions-count
content: |

   To perform a count operation within a transaction, use the
   :pipeline:`$count` aggregation stage or the :pipeline:`$group` (with a
   :group:`$sum` expression) aggregation stage.

   MongoDB drivers provide a collection-level API
   ``countDocuments(filter, options)`` as a helper method that uses the
   :pipeline:`$group` with a :group:`$sum` expression
   to perform a count. 

   :binary:`~bin.mongosh` provides the
   :method:`db.collection.countDocuments()` helper method that uses the
   :pipeline:`$group` with a :group:`$sum` expression to perform a
   count.

---
ref: transactions-distinct
content: |

   To perform a distinct operation within a transaction:
      
   - For unsharded collections, you can use the
     :method:`db.collection.distinct()` method/the
     :dbcommand:`distinct` command as well as the aggregation pipeline
     with the :pipeline:`$group` stage.
  
   - For sharded collections, you cannot use the
     :method:`db.collection.distinct()` method or the
     :dbcommand:`distinct` command.

     To find the distinct values for a sharded collection, use the
     aggregation pipeline with the :pipeline:`$group` stage instead.
     For example:

     - Instead of ``db.coll.distinct("x")``, use
     
       .. code-block:: javascript
     
          db.coll.aggregate([ 
             { $group: { _id: null, distinctValues: { $addToSet: "$x" } } }, 
             { $project: { _id: 0 } } 
          ])
     
     - Instead of ``db.coll.distinct("x", { status: "A" })``, use:
     
       .. code-block:: javascript
     
          db.coll.aggregate([ 
             { $match: { status: "A" } },
             { $group: { _id: null, distinctValues: { $addToSet: "$x" } } }, 
             { $project: { _id: 0 } } 
          ])

     The pipeline returns a cursor to a document:

     .. code-block:: javascript
        :copyable: false

        { "distinctValues" : [ 2, 3, 1 ] }

     Iterate the cursor to access the results document.

### A shorter version (transactions-distinct-support) of this extract is included in the distinct command/method pages.
---
ref: transactions-shards-wcmajority-disabled
content: |

   You cannot run transactions on a sharded cluster that has a shard
   with :rsconf:`writeConcernMajorityJournalDefault` set to ``false``
   (such as a shard with a voting member that uses the :ref:`in-memory
   storage engine <storage-inmemory>`).

---
ref: transactions-killop-change
content: |

   You cannot specify the :dbcommand:`killCursors` command as
   the first operation in a :ref:`transaction <transactions>`.

   Additionally, if you run the ``killCursors`` command within a
   transaction, the server immediately stops the specified
   cursors. It does **not** wait for the transaction to commit.

---
ref: transactions-capped-collection-change
content: |

   You cannot write to :ref:`capped 
   <manual-capped-collection>` collections in :ref:`transactions
   <transactions>`.

---
ref: transactions-capped-collection-read-change
content: |

   Starting in MongoDB 5.0, you cannot use read concern
   :readconcern:`"snapshot"` when reading from a
   :ref:`capped <manual-capped-collection>` collection.

---
ref: transactions-arbiters
content: |

   You cannot change a :term:`shard key <shard key>` using a transaction
   if the replica set has an arbiter. Arbiters cannot participate in the
   data operations required for multi-shard transactions.

   Transactions whose write operations span multiple shards will error
   and abort if any transaction operation reads from or writes to a
   shard that contains an arbiter.

---
ref: transactions-committed-visibility
content: |
   
   Until a transaction commits, the data changes made in the
   transaction are not visible outside the transaction.

   However, when a transaction writes to multiple shards, not all
   outside read operations need to wait for the result of the committed
   transaction to be visible across the shards. For example, if a
   transaction is committed and write 1 is visible on shard A but write
   2 is not yet visible on shard B, an outside read at read concern
   :readconcern:`"local"` can read the results of write 1 without
   seeing write 2.

---
ref: transactions-multi-shard-block-external-reads
content: |
   
   During the commit for a transaction, outside read operations may try
   to read the same documents that will be modified by the transaction.
   If the transaction writes to multiple shards, then during the commit
   attempt across the shards:
   
   - Outside reads that use read concern :readconcern:`"snapshot"` or
     :readconcern:`"linearizable"` wait until all writes of a transaction 
     are visible.
     
   - Outside reads that are part of causally consistent
     sessions (those that include 
     :ref:`afterClusterTime <afterClusterTime>`) wait until all writes
     of a transaction are visible.

   - Outside reads using other read concerns do not wait until all writes
     of a transaction are visible, but instead read the 
     before-transaction version of the documents.

---
ref: transactions-inmemory-txn-page
content: |

   :ref:`distributed transactions
   <transactions>` are supported on replica sets and sharded
   clusters where:

   - the primary uses the WiredTiger storage engine, and

   - the secondary members use either the WiredTiger storage engine or 
     the :ref:`in-memory <storage-inmemory>` storage engines.

   .. note:: 

      You cannot run transactions on a sharded cluster that has a shard
      with :rsconf:`writeConcernMajorityJournalDefault` set to
      ``false``, such as a shard with a voting member that uses the
      in-memory storage engine.

---
ref: transactions-inmemory-storage-page
content: |
   
   Transactions are supported on replica sets
   and sharded clusters where:

   - the primary uses the :ref:`WiredTiger <storage-wiredtiger>` storage
     engine, and

   - the secondary members use either the WiredTiger storage engine or the
     :ref:`in-memory <storage-inmemory>` storage engines.

   .. note:: 

      You cannot run transactions on a sharded cluster that has a shard
      with :rsconf:`writeConcernMajorityJournalDefault` set to
      ``false``, such as a shard with a voting member that uses the
      :ref:`in-memory storage engine <storage-inmemory>`.
---
ref: transactions-sharded-clusters-commit-writeconcern
content: |
   Regardless of the :ref:`write concern specified for the
   transaction<transactions-write-concern>`, the commit operation for a
   sharded cluster transaction includes some parts that use ``{w:
   "majority", j: true}`` write concern.
---
ref: transactions-create-collections-read-concern
content: |

   You can :ref:`create collections and indexes
   <transactions-create-collections-indexes>` inside a transaction. If
   :ref:`explicitly <transactions-operations-ddl-explicit>` creating a
   collection or an index, the transaction must use read concern
   :readconcern:`"local"`. If you :ref:`implicitly
   <transactions-operations-ddl-implicit>` create a collection, you can
   use any of the read concerns available for transactions.
   
---
ref: transactions-example-note
content: |
   
   .. important::

      - Use the MongoDB driver for your MongoDB version.

      - When using drivers, each operation in the transaction must pass
        the session to each operation.

      - Operations in a transaction use :ref:`transaction-level read
        concern <transactions-read-concern>`, :ref:`transaction-level
        write concern <transactions-write-concern>`, and
        :ref:`transaction-level read preference
        <transactions-read-preference>`.

      - You can create collections in transactions implicitly or 
        explicitly. See :ref:`transactions-create-collections-indexes`.

---
ref: transactions-upsert-availability
content: |

   .. include:: /includes/transactions/create-collections-indexes-in-transaction.rst
   
   |operation| with ``upsert: true`` can be run on an existing
   collection or a non-existing collection. If run on a non-existing
   collection, the operation creates the collection.

   .. seealso::

      :ref:`transactions-create-collections-indexes`
---
ref: transactions-insert-implicit-collection-creation
content: |

   .. include:: /includes/transactions/create-collections-indexes-in-transaction.rst

   If you specify an insert on a non-existing collection
   in a transaction, MongoDB creates the collection implicitly.

   .. seealso::

      :ref:`transactions-create-collections-indexes`

---
ref: transactions-explicit-ddl
content: |
   .. include:: /includes/transactions/create-collections-indexes-in-transaction.rst

   To use |operation| in a transaction, the transaction must use read
   concern :readconcern:`"local"`. If you specify a read concern level
   other than :readconcern:`"local"`, the transaction fails.

   .. seealso::

      :ref:`transactions-create-collections-indexes`
   
...
