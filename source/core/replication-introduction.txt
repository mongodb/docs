========================
Replication Introduction
========================

.. default-domain:: mongodb

Replication maintains identical copies of an entire database instance on
multiple distinct systems.
With multiple copies of the data, replication
makes the deployment resilient with regards to the loss of any particular copy
or instance.
In MongoDB, production
deployments use replication.

Replication also guarantees that *changes* to data are never lost
by keeping a list of changes in all replicated locations.
Replication increases theoretical throughput. With replication, if
applications do not need to write data they can read data from secondary
databases, which increases read capacity.

MongoDB provides replication by storing the database in one
location, called a *primary*, and copying the database to multiple
additional locations, called *secondaries*. This
configuration is called a ``replica set``. Each replica set has a
:term:`primary` and one or more :term:`secondaries <secondary>`.

When a user adds or modifies data in the database, MongoDB applies the changes on
the primary in the order the user made the changes. This keeps the data
on the primary consistent. The replication process is asynchronous.
Secondaries replicate operations after the operations are applied to the
primary.

Replica Set Architecture
------------------------

A replica set consists of at least three :program:`mongod` instances: a
:term:`primary` and either two :term:`secondaries <secondary>` or a
secondary and an :term:`arbiter`. The primary accepts all writes for the
set. All members accept reads. Secondaries replicate from the primary by
asynchronously reading and applying the writes.

Failover and Recovery
---------------------

Replica sets provide automatic failover in the event of an outage. If a
primary becomes unavailable, the replica set automatically promotes a
secondary to become the new primary, without user intervention.
The data on the new primary is now the most current in the set. When the
original primary becomes available, it will rejoin the set as a
secondary.

For More Information
--------------------

For more information about replica sets, see :doc:`/replication`.
