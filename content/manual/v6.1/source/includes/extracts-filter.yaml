ref: filter-equality
content: |

   .. tabs-drivers::

      tabs:
        - id: shell
          content: |
            To specify equality conditions, use ``<field>:<value>``
            expressions in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: javascript

               { <field1>: <value1>, ... }

        - id: compass
          content: |
            To specify equality conditions, use ``<field>:<value>``
            expressions in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: javascript

               { <field1>: <value1>, ... }

        - id: python
          content: |
            To specify equality conditions, use ``<field>:<value>``
            expressions in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: python

               { <field1>: <value1>, ... }

        - id: motor
          content: |
            To specify equality conditions, use ``<field>:<value>``
            expressions in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: python

               { <field1>: <value1>, ... }

        - id: java-sync
          content: |
            To specify equality conditions, use the
            ``com.mongodb.client.model.Filters.eq_`` method to create the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: java

               and(eq( <field1>, <value1>), eq( <field2>, <value2>) ...)

        - id: java-async
          content: |
            To specify equality conditions, use the
            com.mongodb.client.model.Filters.eq_ method to create the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: java

               and(eq( <field1>, <value1>), eq( <field2>, <value2>) ...)

        - id: nodejs
          content: |
            To specify equality conditions, use ``<field>:<value>``
            expressions in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: javascript

               { <field1>: <value1>, ... }

        - id: php
          content: |
            To specify equality conditions, use ``<field> => <value>``
            expressions in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: php

               [ <field1> => <value1>, ... ]

        - id: perl
          content: |
            To specify equality conditions, use ``<field> => <value>``
            expressions in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: perl

               { <field1> => <value1>, ... }

        - id: ruby
          content: |
            To specify equality conditions, use ``<field> => <value>``
            expressions in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: ruby

               { <field1> => <value1>, ... }

        - id: scala
          content: |
            To specify equality conditions, use the
            ``com.mongodb.client.model.Filters.eq_`` method to create the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: scala

               and(equal(<field1>, <value1>), equal(<field2>, <value2>) ...)

        - id: csharp
          content: |
            To specify equality conditions, construct a filter using the
            :csharp-api:`Eq
            <Overload_MongoDB_Driver_FilterDefinitionBuilder_1_Eq>` method:

            .. code-block:: c#

               Builders<BsonDocument>.Filter.Eq(<field>, <value>);
---
ref: filter-equality-embedded
content: |

   .. tabs-drivers::

      tabs:
        - id: shell
          content: |
            To specify an equality condition on a field that is an
            embedded/nested document, use the
            :ref:`query filter document <document-query-filter>`
            ``{ <field>: <value> }`` where ``<value>`` is the document
            to match.

        - id: compass
          content: |
            To specify an equality condition on a field that is an
            embedded/nested document, use the
            :ref:`query filter document <document-query-filter>`
            ``{ <field>: <value> }`` where ``<value>`` is the document
            to match.

        - id: python
          content: |
            To specify an equality condition on a field that is an
            embedded/nested document, use the
            :ref:`query filter document <document-query-filter>`
            ``{ <field>: <value> }`` where ``<value>`` is the document
            to match.

        - id: motor
          content: |
            To specify an equality condition on a field that is an
            embedded/nested document, use the
            :ref:`query filter document <document-query-filter>`
            ``{ <field>: <value> }`` where ``<value>`` is the document
            to match.

        - id: java-sync
          content: |
            To specify an equality condition on a field that is an
            embedded/nested document, use the filter document
            ``eq( <field1>, <value>)`` where ``<value>`` is the document
            to match.

        - id: java-async
          content: |
            To specify an equality condition on a field that is an
            embedded/nested document, use the filter document
            ``eq( <field1>, <value>)`` where ``<value>`` is the document
            to match.

        - id: nodejs
          content: |
            To specify an equality condition on a field that is an
            embedded/nested document, use the
            :ref:`query filter document <document-query-filter>`
            ``{ <field>: <value> }`` where ``<value>`` is the document
            to match.

        - id: php
          content: |
            To specify an equality condition on a field that is an
            embedded/nested document, use the
            :ref:`query filter document <document-query-filter>`
            ``[ <field> => <value> ]`` where ``<value>`` is the document
            to match.

        - id: perl
          content: |
            To specify an equality condition on a field that is an
            embedded/nested document, use the
            :ref:`query filter document <document-query-filter>`
            ``{ <field> => <value> }`` where ``<value>`` is the document
            to match.

        - id: ruby
          content: |
            To specify an equality condition on a field that is an
            embedded/nested document, use the
            :ref:`query filter document <document-query-filter>`
            ``{ <field> => <value> }`` where ``<value>`` is the document
            to match.

        - id: scala
          content: |
            To specify an equality condition on a field that is an
            embedded/nested document, use the filter document
            ``equal( <field1>, <value> )`` where ``<value>`` is the document
            to match.

        - id: csharp
          content: |
            To specify an equality condition on a field that is an
            embedded/nested document, construct a filter using the
            :csharp-api:`Eq
            <Overload_MongoDB_Driver_FilterDefinitionBuilder_1_Eq>`
            method:

            .. code-block:: c#

               Builders<BsonDocument>.Filter.Eq(<field>, <value>)

            ``<value>`` is the document to match.
---
ref: filter-equality-array
content: |

   .. tabs-drivers::

      tabs:
        - id: shell
          content: |
            To specify equality condition on an array, use the query
            document ``{ <field>: <value> }`` where ``<value>`` is the
            exact array to match, including the order of the elements.

        - id: compass
          content: |
            To specify equality condition on an array, use the query
            document ``{ <field>: <value> }`` where ``<value>`` is the
            exact array to match, including the order of the elements.

        - id: python
          content: |
            To specify equality condition on an array, use the query
            document ``{ <field>: <value> }`` where ``<value>`` is the
            exact array to match, including the order of the elements.

        - id: motor
          content: |
            To specify equality condition on an array, use the query
            document ``{ <field>: <value> }`` where ``<value>`` is the
            exact array to match, including the order of the elements.

        - id: java-sync
          content: |
            To specify equality condition on an array, use the query
            document ``eq( <field>, <value>)`` where ``<value>`` is
            the exact array to match, including the order of the
            elements.

        - id: java-async
          content: |
            To specify equality condition on an array, use the query
            document ``eq( <field>, <value>)`` where ``<value>`` is
            the exact array to match, including the order of the
            elements.

        - id: nodejs
          content: |
            To specify equality condition on an array, use the query
            document ``{ <field>: <value> }`` where ``<value>`` is the
            exact array to match, including the order of the elements.

        - id: php
          content: |
            To specify equality condition on an array, use the query
            document ``[ <field> => <value> ]`` where ``<value>`` is the
            exact array to match, including the order of the elements.

        - id: perl
          content: |
            To specify equality condition on an array, use the query
            document ``{ <field> => <value> }`` where ``<value>`` is the
            exact array to match, including the order of the elements.

        - id: ruby
          content: |
            To specify equality condition on an array, use the query
            document ``{ <field> => <value> }`` where ``<value>`` is the
            exact array to match, including the order of the elements.

        - id: scala
          content: |
            To specify equality condition on an array, use the query
            document ``equal( <field>, <value> )`` where ``<value>`` is
            the exact array to match, including the order of the
            elements.

        - id: csharp
          content: |
            To specify equality condition on an array, construct a filter
            using the :csharp-api:`Eq
            <Overload_MongoDB_Driver_FilterDefinitionBuilder_1_Eq>` method:

            .. code-block:: c#

               Builders<BsonDocument>.Filter.Eq(<field>, <value>)

            ``<value>`` is the exact array to match, including the
            order of the elements.
---
ref: filter-equality-array-element
content: |

   .. tabs-drivers::

      tabs:
        - id: shell
          content: |
            To query if the array field contains at least *one* element
            with the specified value, use the filter
            ``{ <field>: <value> }`` where ``<value>`` is the element value.

        - id: python
          content: |
            To query if the array field contains at least *one* element
            with the specified value, use the filter
            ``{ <field>: <value> }`` where ``<value>`` is the element value.

        - id: motor
          content: |
            To query if the array field contains at least *one* element
            with the specified value, use the filter
            ``{ <field>: <value> }`` where ``<value>`` is the element value.

        - id: java-sync
          content: |

            To query if the array field contains at least *one* element
            with the specified value, use the filter
            ``eq( <field>, <value>)`` where ``<value>`` is the element value.

        - id: java-async
          content: |

            To query if the array field contains at least *one* element
            with the specified value, use the filter
            ``eq( <field>, <value>)`` where value is the element value.

        - id: nodejs
          content: |
            To query if the array field contains at least *one* element
            with the specified value, use the filter
            ``{ <field>: <value> }`` where ``<value>`` is the element value.

        - id: php
          content: |
            To query if the array field contains at least *one* element
            with the specified value, use the filter
            ``[ <field> => <value> ]`` where ``<value>`` is the element value.

        - id: perl
          content: |
            To query if the array field contains at least *one* element
            with the specified value, use the filter

            ``{ <field> => <value> }`` where value is the element value.

        - id: ruby
          content: |
            To query if the array field contains at least *one* element
            with the specified value, use the filter
            ``{ <field> => <value> }`` where ``<value>`` is the element value.

        - id: scala
          content: |

            To query if the array field contains at least *one* element
            with the specified value, use the filter
            ``equal( <field>, <value> )`` where ``<value>`` is the element value.

        - id: csharp
          content: |
            To query if the array field contains at least *one* element
            with the specified value, construct a filter using the
            :csharp-api:`Eq
            <Overload_MongoDB_Driver_FilterDefinitionBuilder_1_Eq>` method:

            .. code-block:: c#

               Builders<BsonDocument>.Filter.Eq(<field>, <value>)

            ``<value>`` is the element value to match.
---
ref: filter-query-operators
content: |

   .. tabs-drivers::

      tabs:
        - id: shell
          content: |
            A :ref:`query filter document <document-query-filter>` can
            use the :ref:`query operators <query-selectors>` to specify
            conditions in the following form:

            .. code-block:: javascript

               { <field1>: { <operator1>: <value1> }, ... }

        - id: compass
          content: |
            A :ref:`query filter document <document-query-filter>` can
            use the :ref:`query operators <query-selectors>` to specify
            conditions in the following form:

            .. code-block:: javascript

               { <field1>: { <operator1>: <value1> }, ... }

        - id: python
          content: |
            A :ref:`query filter document <document-query-filter>` can
            use the :ref:`query operators <query-selectors>` to specify
            conditions in the following form:

            .. code-block:: python

               { <field1>: { <operator1>: <value1> }, ... }

        - id: motor
          content: |
            A :ref:`query filter document <document-query-filter>` can
            use the :ref:`query operators <query-selectors>` to specify
            conditions in the following form:

            .. code-block:: python

               { <field1>: { <operator1>: <value1> }, ... }

        - id: java-sync
          content: |

            In addition to the equality condition, MongoDB provides
            various :ref:`query operators <query-selectors>` to specify
            filter conditions. Use the
            com.mongodb.client.model.Filters_ helper methods to
            facilitate the creation of filter documents. For example:

            .. code-block:: java

               and(gte(<field1>, <value1>), lt(<field2>, <value2>), eq(<field3>, <value3>))

        - id: java-async
          content: |

            In addition to the equality condition, MongoDB provides
            various :ref:`query operators <query-selectors>` to specify
            filter conditions. Use the
            com.mongodb.client.model.Filters_ helper methods to
            facilitate the creation of filter documents. For example:

            .. code-block:: java

               and(gte(<field1>, <value1>), lt(<field2>, <value2>), eq(<field3>, <value3>))

        - id: nodejs
          content: |
            A :ref:`query filter document <document-query-filter>` can
            use the :ref:`query operators <query-selectors>` to specify
            conditions in the following form:

            .. code-block:: javascript

               { <field1>: { <operator1>: <value1> }, ... }

        - id: php
          content: |
            A :ref:`query filter document <document-query-filter>` can
            use the :ref:`query operators <query-selectors>` to specify
            conditions in the following form:

            .. code-block:: php

               [ <field1> => [ <operator1> => <value1> ], ... ]

        - id: perl
          content: |
            A :ref:`query filter document <document-query-filter>` can
            use the :ref:`query operators <query-selectors>` to specify
            conditions in the following form:

            .. code-block:: perl

               { <field1> => { <operator1> => <value1> }, ... }

        - id: ruby
          content: |
            A :ref:`query filter document <document-query-filter>` can
            use the :ref:`query operators <query-selectors>` to specify
            conditions in the following form:

            .. code-block:: ruby

               { <field1> => { <operator1> => <value1> }, ... }

        - id: scala
          content: |

            In addition to the equality condition, MongoDB provides
            various :ref:`query operators <query-selectors>` to specify
            filter conditions. Use the
            ``com.mongodb.client.model.Filters_`` helper methods to
            facilitate the creation of filter documents. For example:

            .. code-block:: scala

               and(gte(<field1>, <value1>), lt(<field2>, <value2>), equal(<field3>, <value3>))

        - id: csharp
          content: |
            In addition to the equality filter, MongoDB provides
            various :ref:`query operators <query-selectors>` to specify
            filter conditions. Use the
            :csharp-api:`FilterDefinitionBuilder <T_MongoDB_Driver_FilterDefinitionBuilder_1>`
            methods to create a filter document. For example:

            .. code-block:: c#

               var builder = Builders<BsonDocument>.Filter;
               builder.And(builder.Eq(<field1>, <value1>), builder.Lt(<field2>, <value2>));
---
ref: filter-query-operators-array
content: |

   .. tabs-drivers::

      tabs:
        - id: shell
          content: |
            To specify conditions on the elements in the array field,
            use :ref:`query operators <query-selectors>` in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: javascript

               { <array field>: { <operator1>: <value1>, ... } }

        - id: compass
          content: |
            To specify conditions on the elements in the array field,
            use :ref:`query operators <query-selectors>` in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: javascript

               { <array field>: { <operator1>: <value1>, ... } }

        - id: python
          content: |
            To specify conditions on the elements in the array field,
            use :ref:`query operators <query-selectors>` in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: python

               { <array field>: { <operator1>: <value1>, ... } }

        - id: motor
          content: |
            To specify conditions on the elements in the array field,
            use :ref:`query operators <query-selectors>` in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: python

               { <array field>: { <operator1>: <value1>, ... } }

        - id: java-sync
          content: |
            To specify conditions on the elements in the array field,
            use :ref:`query operators <query-selectors>` in the
            :ref:`query filter document <document-query-filter>`. For example:

            .. code-block:: java

               and(gte(<array field>, <value1>), lt(<array field>, <value2>) ...)

        - id: java-async
          content: |
            To specify conditions on the elements in the array field,
            use :ref:`query operators <query-selectors>` in the
            :ref:`query filter document <document-query-filter>`. For example:

            .. code-block:: java

               and(gte(<array field>, <value1>), lt(<array field>, <value2>) ...)

        - id: nodejs
          content: |
            To specify conditions on the elements in the array field,
            use :ref:`query operators <query-selectors>` in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: javascript

               { <array field>: { <operator1>: <value1>, ... } }

        - id: php
          content: |
            To specify conditions on the elements in the array field,
            use :ref:`query operators <query-selectors>` in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: php

               [ <array field> => [ <operator1> => <value1>, ... ] ]

        - id: perl
          content: |
            To specify conditions on the elements in the array field,
            use :ref:`query operators <query-selectors>` in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: perl

               { <array field> => { <operator1> => <value1>, ... } }

        - id: ruby
          content: |
            To specify conditions on the elements in the array field,
            use :ref:`query operators <query-selectors>` in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: ruby

               { <array field> => { <operator1> => <value1>, ... } }

        - id: scala
          content: |
            To specify conditions on the elements in the array field,
            use :ref:`query operators <query-selectors>` in the
            :ref:`query filter document <document-query-filter>`:

            .. code-block:: scala

               and(gte(<array field>, <value1>), lt(<array field>, <value2>) ...)

        - id: csharp
          content: |
            To specify conditions on the elements in the array field,
            use :ref:`query operators <query-selectors>` in the
            :ref:`query filter document <document-query-filter>`. For example:

            .. code-block:: c#

               var builder = Builders<BsonDocument>.Filter;
               builder.And(builder.Eq(<array field>, <value1>), builder.Lt(<array field>, <value2>));
...
