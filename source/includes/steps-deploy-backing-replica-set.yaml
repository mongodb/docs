title: Create a data directory on each server.
stepnum: 1
ref: data-directories
action:
  pre: |
   Create a data directory on each server and set ``mongod`` as the
   directory's owner. For example:
  language: sh
  code: |
    sudo mkdir -p /data
    sudo chown mongod:mongod /data
---
title: Start each MongoDB process.
stepnum: 2
ref: start-mongod-instance
pre: |
  For each replica set member, start the :program:`mongod` process and
  specify ``mongod`` as the user. Start each process on its own dedicated
  port and point to the data directory you created in the
  previous step. Specify the same replica set for all three members.
action:
  pre: |
    The following command starts a MongoDB process as part of a replica
    set named ``operations`` and specifies the ``/data`` directory.
  language: sh
  code: |
    sudo -u mongod mongod --port 27017 --dbpath /data --replSet operations --logpath /data/mongodb.log --fork
---
title: "Connect to the MongoDB process on the server that will initially host the database's primary."
stepnum: 3
ref: connect
action:
  pre: |
    For example, the following command connects on port ``27017`` to a
    MongoDB process running on ``mongodb1.example.net``:
  language: none
  code: |
    mongo --host mongodb1.example.net --port 27017
post: |
  When you connect, the MongoDB shell displays its version as well as
  the database to which you are connected.
---
title: Initiate the replica set.
stepnum: 4
ref: initiate
action:
  - pre: |
      To initiate the replica set, issue the following command:
    language: none
    code: |
      rs.initiate()
    post: |
      MongoDB returns ``1`` upon successful completion, and creates a
      replica set with the current :program:`mongod` as the initial member.
post: |
  The server on which you initiate the replica set becomes the initial
  :term:`primary`. The :program:`mongo` shell displays the replica set
  member's state in the prompt.
  
  MongoDB supports :manual:`automatic failover
  <core/replica-set-high-availability/>`, so this :program:`mongod` may
  not always be the primary.
---
title: Add the remaining members to the replica set.
stepnum: 5
ref: add-members
action:
  pre: |
    In a :program:`mongo` shell connected to the primary,
    use the :manual:`rs.add()
    </reference/method/rs.add>` method to add the other two replica set
    members. For example, the following adds the :program:`mongod` instances
    running on ``mongodb2.example.net:27017`` and ``mongodb3.example.net:27017``
    to the replica set:
  language: javascript
  code: |
    rs.add('mongodb2.example.net:27017')
    rs.add('mongodb3.example.net:27017')
---
title: Verify the replica set configuration.
stepnum: 6
ref: verify
action:
  - pre: |
      To verify that the configuration includes the three members, issue
      :manual:`rs.conf() </reference/method/rs.conf>`:
    language: javascript
    code: |
      rs.conf()
  - pre: |
      The method returns output similiar to the following.
    language: javascript
    code: |
      {
          "_id" : "operations",
          "version" : 3,
          "members" : [
              {
                  "_id" : 0,
                  "host" : "mongodb1.example.net:27017"
              },
              {
                  "_id" : 1,
                  "host" : "mongodb2.example.net:27017"
              },
              {
                  "_id" : 2,
                  "host" : "mongodb3.example.net:27017",
              }
          ]
      }
  - pre: |
      Optionally, run :manual:`rs.status() </reference/method/rs.status`
      to verify the status of the replica set and see the state of
      each replica set member.
post: |
  For more information on deploying replica sets, see :manual:`Deploy a
  Replica Set </tutorial/deploy-replica-set>` in the MongoDB manual.
...
