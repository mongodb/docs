.. facet::
   :name: programming_language
   :values: csharp, go, java, javascript/typescript, kotlin, python, shell

.. _compound-query-custom-score-tutorial:

======================================================
How to Run |fts| Compound Queries with Weighted Fields
======================================================

.. default-domain:: mongodb

.. meta::
   :keywords: compound operator, must clause, should clause, range operator, text operator, search scoring, alter search score, constant scoring, boost scoring, multiply score, function scoring, highlight term, code example
   :description: In this tutorial, learn how to alter the relevance score to boost or bury documents in your results.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This tutorial demonstrates how to add weights to your search fields to
boost or bury the documents in the results or a category of results. It
demonstrates how to assign one or more values to a field to return
results with a higher or lower score. 

Specifically, the tutorial shows how to create an index with dynamic
mapping on the ``sample_mflix.movies`` collection. It shows how to run
compound queries and alter the score using :ref:`scoring-constant`,
:ref:`scoring-function`, and :ref:`scoring-boost`. It takes you through
the following steps:

1. Set up an |fts| index with dynamic mapping for the 
   ``sample_mflix.movies`` collection.
#. Run the following |fts| queries: 

   - Query the ``year`` field and alter the score using specific a word
     in the ``title`` field to boost the document in the results. 
   - Query the ``title`` and ``plot`` fields and alter the score based
     on a specific genre in the ``genres`` field to bury results in that
     genre.  

Before you begin, ensure that your |service| cluster meets the 
requirements described in the :ref:`fts-tutorials-prereqs`.

.. include:: /includes/atlas-roles/create-search-index.rst

Create the |fts| Index With Dynamic Mapping 
-------------------------------------------

In this section, you will create an |fts| index that uses dynamic 
mapping to index the fields in the ``sample_mflix.movies`` collection. 

.. |search-type| replace:: :guilabel:`Atlas Search`
.. |index-name| replace:: ``compound-query-custom-score-tutorial``
.. |database-name| replace:: ``sample_mflix`` database
.. |collection-name| replace:: ``movies`` collection
   
.. include:: /includes/steps-fts-tutorial-create-dynamic-index.rst

Run Compound Queries 
--------------------

You use the :ref:`compound-ref` operator to combine two or more 
operators into a single query. |fts| assigns a score based on
relevance, in order from highest score to lowest, to every document that
it returns for your query. The queries demonstrate how to boost or bury
the documents in the results.

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu to set the 
language of the examples in this section.

----------

.. tabs-selector:: drivers

.. tip:: 
   
   |fts| provides a sample compound query template with guidance. To 
   learn more, see :ref:`query-guidance-template`.

Run a Compound Query to Boost Results 
-------------------------------------

In this section, you connect to your |service| {+cluster+} and run
the sample queries using the :ref:`compound-ref` operator against the
``title`` and ``year`` fields in the ``sample_mflix.movies`` collection.
The sample queries use custom scoring to alter the relevance score
returned by |fts| for movie titles that contain the term ``snow``. 

.. tabs-drivers::

   .. tab::
      :tabid: atlas-ui

      .. include:: /includes/steps-fts-compound-score-tutorial-run-query-atlas-ui.rst

   .. tab::
      :tabid: shell

      .. include:: /includes/steps/fts-score-tutorial-run-queries.rst

   .. tab::
      :tabid: compass

      .. include:: /includes/steps/fts-compound-score-tutorial-run-query-compass.rst

   .. tab::
      :tabid: csharp

      .. include:: /includes/steps/fts-compound-score-tutorial-run-query-cs.rst

   .. tab:: 
      :tabid: go

      .. include:: /includes/steps/fts-compound-score-tutorial-run-query-go.rst

   .. tab:: 
      :tabid: java-sync 

      .. include:: /includes/steps/fts-compound-score-tutorial-run-query-java.rst

   .. tab:: 
      :tabid: kotlin-coroutine

      .. include:: /includes/steps/fts-compound-score-tutorial-run-query-kotlin.rst

   .. tab::
      :tabid: nodejs

      .. include:: /includes/steps/fts-compound-score-tutorial-run-query-nodejs.rst

   .. tab::
      :tabid: python

      .. include:: /includes/steps/fts-compound-score-tutorial-run-query-python.rst

Run a Compound Query to Bury Results 
------------------------------------

In this section, you connect to your |service| {+cluster+} and run
the sample queries against the ``title``, ``plot``, and ``genres``
fields in the ``movies`` collection in the ``sample_mflix`` database.
The sample queries use nested :ref:`compound-ref` operator clauses to
perform the following searches:

- Search for all movies containing the word "ghost", but reduce the
  score of comedy movies by 50%. 
- Search for all movies containing the word "ghost", but reduce the
  score of movies with specified ObjectIds by 50%. 

.. tabs-drivers::

   .. tab::
      :tabid: atlas-ui

      .. include:: /includes/steps-fts-tutorial-bury-results-query-atlas-ui.rst

   .. tab::
      :tabid: shell

      .. include:: /includes/steps-fts-tutorial-bury-results-query-mongosh.rst

   .. tab::
      :tabid: compass

      .. include:: /includes/steps-fts-tutorial-bury-results-query-compass.rst

   .. tab::
      :tabid: csharp

      .. include:: /includes/steps-fts-tutorial-bury-results-query-cs.rst

   .. tab:: 
      :tabid: go

      .. include:: /includes/steps-fts-tutorial-bury-results-query-go.rst

   .. tab:: 
      :tabid: java-sync 

      .. include:: /includes/steps-fts-tutorial-bury-results-query-java.rst

   .. tab:: 
      :tabid: kotlin-coroutine

      .. include:: /includes/steps-fts-tutorial-bury-results-query-kotlin.rst

   .. tab::
      :tabid: nodejs

      .. include:: /includes/steps-fts-tutorial-bury-results-query-nodejs.rst

   .. tab::
      :tabid: python

      .. include:: /includes/steps-fts-tutorial-bury-results-query-python.rst

Continue Learning 
-----------------

To learn more about compound queries using |fts|, take 
Unit 9 of the :mdbu-course:`Intro To MongoDB Course on MongoDB University
</courses/mongodb-atlas-search>`. The 1.5
hour unit includes an overview of |fts| and lessons on creating |fts|
indexes, running :pipeline:`$search` queries using compound operators,
and grouping results using :ref:`fts-facet-ref`.  
