title: "Restore the snapshot data files to the destination host."
stepnum: 1
ref: copy
content: |

  Extract the snapshot archive to a temporary location where a
  temporary :program:`mongod` instance can access the archive contents.
  Use a different data directory than any other database running on the
  host.

  .. example::

     .. code-block:: sh

        tar -xvf {backupRestoreName}.tar.gz
        mv {backupRestoreName} {temp-database-path}

---
title: "Start a new, temporary MongoDB instance."
ref: start-with-new-path
content: | 

  This temporary instance must be on a new port using the extracted
  backup snapshot as the :setting:`dbpath`.

  Ensure the user executing the :program:`mongod` can read, write and
  execute code in the directory specified with :setting:`dbpath`.

  .. example::

     .. code-block:: sh

        mongod --port 27018 --dbpath {temp-database-path} \
          --logpath {temp-database-path}/mongodb.log --fork

---
title: "Run the MongoDB Backup Restore Utility (Point-in-Time Restore Only)."
ref: mbru-binary
content: | 

  a. Download the MongoDB Backup Restore Utility to your host.

     .. note::

        If you closed the restore panel, click :guilabel:`Backup`, then
        :guilabel:`More` and then 
        :guilabel:`Download MongoDB Backup Restore Utility`.

  b. Run the MongoDB Backup Restore Utility on your destination host.

     .. only:: onprem

        .. class:: copyable-code
        .. code-block:: sh

           ./mongodb-backup-restore-util --https --host {targetHost} \
             --port {targetPort} \
             --opStart {opLogStartTimeStamp} \
             --opEnd {opLogEndTimeStamp} \
             --logFile pitLog.log \
             --oplogSourceAddr {opsManagerHost}:{port} \
             --apiKey {apiKey}

        The ``mongodb-backup-restore-util`` command uses the following
        options:

        .. list-table::
           :widths: 25 15 60 
           :header-rows: 1

           * - Option
             - Required
             - Description

           * - ``--https``
             - Optional
             - Use if you need TLS/SSL to connect to the
               ``--oplogSourceAddr``.
 
           * - ``--host``
             - Required
             - Provide the hostname or IP address for the host that
               serves :program:`mongod` to which the :term:`oplog`
               should be applied.
 
           * - ``--port``
             - Required
             - Provide the port for the host that serves
               :program:`mongod` to which the :term:`oplog` should be
               applied.

           * - ``--opStart``
             - Required
             - Provide the timestamp for the first Oplog entry you want
               to include in the restore.
 
           * - ``--opEnd``
             - Required
             - Provide the timestamp for the last Oplog entry you want
               to include in the restore.
 
           * - ``--logFile``
             - Required
             - Provide a path, including file name, where the log is
               written.
 
           * - ``--oplogSourceAddr``
             - Required
             - Provide the URL for the :term:`Oplog <Oplog Store Database>`.
 
           * - ``--apiKey``
             - Required
             - Provide your |mms| Agent 
               :doc:`API Key </tutorial/view-agent-api-key>`.


     .. only:: cloud

        .. class:: copyable-code
        .. code-block:: sh

           ./mongodb-backup-restore-util --https --host {targetHost} \
             --port {targetPort} \
             --opStart {opLogStartTimeStamp} \
             --opEnd {opLogEndTimeStamp} \
             --logFile pitLog.log \
             --oplogSourceAddr api-backup-dev.mongodb.com \
             --apiKey {apiKey}

        The ``mongodb-backup-restore-util`` command uses the following
        options:

        .. list-table::
           :widths: 25 15 60 
           :header-rows: 1

           * - Option
             - Required
             - Description

           * - ``--https``
             - Optional
             - Use if you need TLS/SSL to connect to the
               ``--oplogSourceAddr``.
 
           * - ``--host``
             - Required
             - Provide the hostname or IP address for the host that
               serves :program:`mongod` to which the :term:`oplog`
               should be applied.
 
           * - ``--port``
             - Required
             - Provide the port for the host that serves
               :program:`mongod` to which the :term:`oplog` should be
               applied.
 
           * - ``--opStart``
             - Required
             - Provide the timestamp for the first Oplog entry you want
               to include in the restore.
 
           * - ``--opEnd``
             - Required
             - Provide the timestamp for the last Oplog entry you want
               to include in the restore.
 
           * - ``--logFile``
             - Required
             - Provide a path, including file name, where the log is
               written.
 
           * - ``--oplogSourceAddr``
             - Required
             - Provide the URL for the :term:`Oplog <Oplog Store Database>`.
               This is ``api-backup-dev.mongodb.com`` for |mms|.
 
           * - ``--apiKey``
             - Required
             - Provide your |mms| Agent 
               :doc:`API Key </tutorial/view-agent-api-key>`.
          
---
title: Use the ``mongodump`` command to export a single database or collection from the temporary running ``mongod`` instance.
ref: dump-database
content: |

  Specify the single database name using :option:`--db <mongodump
  --db>` and, if needed, a :option:`--collection <mongodump
  --collection>` for a single collection.

  The :option:`--out <mongodump --out>` option specifies where the
  :program:`mongodump` extracts the target database. Choose an empty
  directory the user executing :program:`mongodump` can access.

  .. code-block:: sh

     mongodump --port 27018 --db {single-database} \
       --out {new-database-path}

  You can export only a single collection as well:

  .. code-block:: sh

     mongodump --port 27018 --db {single-database} \
       --collection {collection-name} --out {new-database-path}

---
title: "Use the ``mongorestore`` command to import the single database or collection."
ref: import-database
content: |
  Restore the single database to the desired instance using this 
  :program:`mongorestore` command:

  .. code-block:: sh

     mongorestore --port 27017 --db {single-database} \
       {temp-database-path} --drop

  If you are restoring a single collection, be sure to designate the
  collection:

  .. code-block:: sh

     mongorestore --port 27017 --db {single-database} \
       --collection {collection-name} {temp-database-path} --drop

  Any existing databases matching the name given for the :option:`--db`
  option should be dropped using the :option:`--drop` option. If you
  choose not to use the :option:`--drop <mongorestore --drop>` option,
  the restore may produce errors for any documents with duplicate `_id`
  fields.

---
title: "Shut down the temporary MongoDB instance and remove the temporary database."
ref: clean-temp-database
content: |

  a. Start the ``mongo`` shell.

     .. code-block:: sh

        mongo {port}

  b. Drop the database and shut down the :program:`mongod` instance.

     .. code-block:: javascript

        admin = db.getSiblingDB("admin")
        admin.shutdownServer()
        exit

  c. Delete the temporary database directory

     .. code-block:: sh

        rm -rf {temp-database-path}
...
