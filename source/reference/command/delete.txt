======
delete
======

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: delete

   The :dbcommand:`delete` command deletes one or more documents and returns a
   document containing the status of all deletes.

   The command has the following syntax:

   .. code-block:: javascript

      {
         delete: <collection>,
         deletes: [ { q : <query>, limit : <integer> },
                    { q : <query>, limit : <integer> },
                    { q : <query>, limit : <integer> },
                    ...
                  ],
         ordered: <boolean>,
         writeConcern: { <write concern> }
      }

   The :dbcommand:`delete` command takes the following fields:

   .. include:: delete-field.rst

   Each element of the ``deletes`` array contains the following sub-fields:

   .. include:: delete-field-deletes.rst

   The top-level ``writeConcern`` field specifies the write concern for
   all deletes. See :doc:`/reference/write-concern` for an explanation
   of write concern syntax.

Output
------

On success, :dbcommand:`delete` returns a document similar to the
following:

.. code-block:: javascript

   { ok: 1, n: 1 }

On failure, :dbcommand:`delete` returns a document similar to the
following:

.. code-block:: javascript

   {
      ok: 0,
      n: 1,
      code: 104,
      errmsg: "Could not replicate operation within requested timeout"
   }

The returned document contains a subset of the following fields:

.. data:: delete.ok

   The return status of the command.

.. data:: delete.n

   The number of documents deleted.

.. data:: delete.code

   An integer value identifying the cause of failure.

.. data:: delete.errInfo

   Structured data about the error, that is both human- and
   machine-readable.

.. data:: delete.errmsg

   A human-readable description of the cause of failure.

Examples
--------

Single Delete
~~~~~~~~~~~~~

.. example::

   Given a ``people`` collection, delete a person in the collection:

   .. code-block:: javascript

      db.runCommand(
         {
            delete: "people",
            deletes: [ { q: { name: "Sam" }, limit: 1 } ],
            ordered: false,
            writeConcern: { w: 1 }
         }
      ) 

   The returned document:

   .. code-block:: javascript

      { "ok" : 1, "n" : 0 }

Bulk Delete
~~~~~~~~~~~

.. example::

   Now bulk-delete three more people in the collection:

   .. code-block:: javascript

      db.runCommand(
         {
            delete: "people",
            deletes: [ { q: { name: "Kay" }, limit: 1 },
                       { q: { name: "Bob" }, limit: 1 },
                       { q: { name: "Zack" }, limit: 1 }
                     ],
            ordered: false,
            writeConcern: { w: 1 }
         }
      ) 

   The returned document:

   .. code-block:: javascript

      { "ok" : 1, "n" : 3 }

