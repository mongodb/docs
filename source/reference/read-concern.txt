.. _read-concern:

============
Read Concern
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The ``readConcern`` option allows you to control the recency,
consistency, and isolation properties of the data read from replica
sets and replica set shards.

Through the effective use of :doc:`write concerns
</reference/write-concern>` and read concerns, you can adjust the level
of consistency and availability guarantees as appropriate, such as
waiting for stronger consistency guarantees, or loosening consistency
requirements to provide higher availability.


MongoDB drivers updated for MongoDB 3.2 or later support specifying
read concern.

.. _read-concern-levels:

Read Concern Levels
-------------------

The following read concern levels are available:

.. list-table::
   :header-rows: 1
   :widths: 10 90

   * - ``level``
     - Description

   * - :readconcern:`"local"`

     - The query returns data from the instance with no guarantee that
       the data has been written to a majority of the replica set
       members (i.e. may be rolled back).

       Default for:
          - reads against primary

          - reads against secondaries if the reads are
            associated with :ref:`causally consistent sessions <sessions>`.

       Read concern :readconcern:`local` is available for use with
       causally consistent sessions.

       For more information, see the :readconcern:`"local"` reference
       page.

   * - :readconcern:`"available"`

     - The query returns data from the instance with no guarantee
       that the data has been written to a majority of the replica set
       members (i.e. may be rolled back).

       Default for reads against secondaries if the reads are not
       associated with :ref:`causally consistent sessions <sessions>`.

       For sharded collections, :readconcern:`"available"` read concern
       provides the lowest latency reads possible among the various read
       concerns but at the expense of consistency as 
       :readconcern:`"available"` read concern can return orphan
       documents.

       Read concern :readconcern:`available` is unavailable for use
       with causally consistent sessions.

       For more information, see the :readconcern:`"available"`
       reference page.

       .. versionadded:: 3.6

   * - :readconcern:`"majority"`

     - The query returns data that has been acknowledged by a
       majority of the replica set members. The documents returned by
       the read operation are durable, even in the event of failure.

       .. include:: /includes/fact-enable-majority-readConcern.rst

       Read concern :readconcern:`majority` is available for use with
       causally consistent sessions.

       For more information, see the :readconcern:`"majority"`
       reference page.

   * - :readconcern:`"linearizable"`

     - The query returns data that reflects all successful 
       majority-acknowledged writes that completed prior to the start
       of the read operation. The query may wait for concurrently
       executing writes to propagate to a majority of replica
       set members before returning results.

       If a majority of your replica set members crash and restart after
       the read operation, documents returned by the read operation are
       durable if :rsconf:`writeConcernMajorityJournalDefault` is set to
       the default state of ``true``.

       .. include:: /includes/extracts/no-journaling-rollback.rst

       You can specify linearizable read concern for read operations on
       the :replstate:`primary <PRIMARY>` only.

       Read concern :readconcern:`linearizable` is unavailable for use
       with causally consistent sessions.

       Linearizable read concern guarantees only apply if read
       operations specify a query filter that uniquely identifies a
       single document.

       .. tip::

          Always use ``maxTimeMS`` with linearizable read concern in
          case a majority of data bearing members are unavailable.
          ``maxTimeMS`` ensures that the operation does not block
          indefinitely and instead ensures that the operation returns
          an error if the read concern cannot be fulfilled.

       For more information, see the :readconcern:`"linearizable"`
       reference page.

.. include:: /includes/fact-readConcern-most-recent-data-in-node.rst

For more information on each read concern level, see:

.. toctree::
   :titlesonly:

   /reference/read-concern-local
   /reference/read-concern-available
   /reference/read-concern-majority
   /reference/read-concern-linearizable

``readConcern`` Syntax
----------------------

You can specify a ``readConcern`` level [#after-cluster-time]_ as an
option:

.. code-block:: javascript

   readConcern: { level: <"majority"|"local"|"linearizable"|"available"> }

.. note::

   For operations in a :ref:`causally consistent session
   <causal-consistency>`, :readconcern:`"local"` and
   :readconcern:`"majority"` levels are available. However, to guarantee
   causal consistency, you must use :readconcern:`"majority"`. For
   details, see :ref:`causal-consistency`.

The following operations support the ``readConcern`` option:

- :dbcommand:`find` command

- :dbcommand:`aggregate` command and the
  :method:`db.collection.aggregate()` method

- :dbcommand:`distinct` command

- :dbcommand:`count` command

- :dbcommand:`parallelCollectionScan` command

- :dbcommand:`geoNear` command

- :dbcommand:`geoSearch` command

- :dbcommand:`group` command

To specify the read concern level for the :binary:`~bin.mongo` shell method
:method:`db.collection.find()`, use the :method:`cursor.readConcern()`
method:

.. code-block:: javascript

   db.collection.find().readConcern(<"majority"|"local"|"linearizable"|"available">)

.. [#after-cluster-time]

   For :ref:`causally consistent sessions <causal-consistency>`,
   MongoDB drivers automatically specifies the :ref:`afterClusterTime
   <afterClusterTime>` value in the read concern.

Considerations
--------------

Read Your Own Writes
~~~~~~~~~~~~~~~~~~~~~

.. versionchanged:: 3.6

.. include:: /includes/fact-read-own-writes.rst

Real Time Order
~~~~~~~~~~~~~~~

Combined with :writeconcern:`"majority"` write concern,
:readconcern:`"linearizable"` read concern enables multiple threads to
perform reads and writes on a single document as if a single thread
performed these operations in real time; that is, the corresponding
schedule for these reads and writes is considered linearizable.

Performance Comparisons
~~~~~~~~~~~~~~~~~~~~~~~

Unlike :readconcern:`"majority"`, :readconcern:`"linearizable"` read
concern confirms with secondary members that the read operation is
reading from a primary that is capable of confirming writes with
:writeconcern:`{ w: "majority" } <"majority">` write concern.
[#edge-cases-2-primaries]_ As such, reads with linearizable read
concern may be significantly slower than reads with
:readconcern:`"majority"` or :readconcern:`"local"` read concerns.

Always use ``maxTimeMS`` with linearizable read concern in case a
majority of data bearing members are unavailable. ``maxTimeMS`` ensures
that the operation does not block indefinitely and instead ensures that
the operation returns an error if the read concern cannot be fulfilled.

For example:

.. code-block:: javascript

   db.restaurants.find( { _id: 5 } ).readConcern("linearizable").maxTimeMS(10000)

   db.runCommand( {
        find: "restaurants",
        filter: { _id: 5 },
        readConcern: { level: "linearizable" },
        maxTimeMS: 10000
   } )

.. [#edge-cases-2-primaries]

   .. include:: /includes/footnote-two-primaries-edge-cases.rst

.. _afterClusterTime:

Read Operations and Causally Consistent Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.6

MongoDB 3.6 introduces support for :ref:`causally consistent sessions
<sessions>`. For read operations associated with causally consistent
session, MongoDB 3.6 introduces the ``afterClusterTime`` read concern
option to be set automatically by the drivers for operations associated
with causally consistent sessions.

The ``afterClusterTime`` read concern option is available for
:readconcern:`"local"` and :readconcern:`"majority"` read
concern levels:

.. important::

   Do not manually set ``afterClusterTime``. MongoDB drivers set
   this value automatically for operations associated with
   causally consistent sessions.

.. code-block:: javascript

   readConcern: { level: <"majority"|"local"> , afterClusterTime: <Timestamp> }

To satisfy a read request with an ``afterClusterTime`` value of ``T``,
a :binary:`~bin.mongod` must perform the request after its oplog
reaches time ``T``. If its oplog has not reached time ``T``, the
:binary:`~bin.mongod` must wait to service the request.

Read operations with a specified ``afterClusterTime`` return data that
meet both the :ref:`read concern level <read-concern-levels>`
requirement and the specified ``afterClusterTime`` requirement.

For read operations not associated with causally consistent sessions,
``afterClusterTime`` is unset.
