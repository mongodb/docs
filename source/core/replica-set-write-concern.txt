==============================
Write Concern for Replica Sets
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can use :ref:`write concern <write-concern>` to set the minimum 
number of data-bearing replica set members that must acknowledge 
receiving and applying a write operation before returning success. 

For replica sets, the default write concern of ``w: 1`` requires
that only the primary receive and acknowledge the write. Write 
operations with write concern ``w`` greater than ``1`` require 
acknowledgment from the primary and as many data-bearing 
:doc:`secondaries </core/replica-set-secondary>` as required to meet 
the requested write concern. Write operations with write concern
``w : majority`` apply an additional criteria where only voting
secondaries can acknowledge the write. For complete documentation on 
member acknowledgment behavior, see 
:ref:`Replica Set Acknowledgment Behavior <wc-replica-ack-behavior>`.

The following diagram illustrates a write operation issued with a
write concern of ``w: 2``. The operation blocks until the primary
and at least one secondary acknowledge the write operation. Secondaries 
can return write acknowledgment no earlier than after the primary 
receives, applies, and replicates that write.

.. include:: /images/crud-write-concern-w2.rst

The more data-bearing members that acknowledge a write as successful, 
the less likely that data will be rolled back if the
:ref:`primary fails <replication-auto-failover>`. However, the write 
operation must wait until it receives the requested level of 
acknowledgment. With higher values of write concern, users trade
a more reliable promise of data durability for write speed. With
lower values of write concern, users trade fast writes for the promise
of data durability.

Selecting the ideal write concern for any given write operation depends
on your application's performance goals and data durability 
requirements.

Verify Write Operations to Replica Sets
---------------------------------------

For write operations that support user-specified write concern, set
the :ref:`write concern <wc-w>` based on the number of data-bearing
replica set members you want to acknowledge the write before
returning success. The exact syntax for specifying write concern
depends on the write operation. Refer to the documentation for that
write operation for instructions on syntax and use.

For example, the :method:`db.collection.insert()` method
supports a ``writeConcern`` document as an option. In the following
operation, the ``writeConcern`` document specifies ``w : 2``, which 
corresponds to requiring acknowledgment from the primary and at least 
one data-bearing secondary. This can include hidden or delayed 
secondaries:

.. code-block:: javascript

   db.products.insert(
      { item: "envelopes", qty : 100, type: "Clasp" },
      { writeConcern: { w: 2 } }
   )

With the specified write concern, the write operation blocks until the 
primary and at least one secondary acknowledge the write. You can set
an additional timeout parameter using :ref:`wc-wtimeout`. The following
operation times out after 5 seconds, returning a write concern error
on timeout:

.. code-block:: javascript

   db.products.insert(
      { item: "envelopes", qty : 100, type: "Clasp" },
      { writeConcern: { w: 2 , , wtimeout: 5000 } }
   )

A write operation that times out waiting for the specified write concern 
does not indicate write failure. It only indicates that the ``w`` 
number of replica set members did not acknowledge the write 
operation in the ``wtimeout`` time period.

.. seealso::
   :ref:`write-methods-incompatibility`

.. _repl-set-modify-default-write-concern:

Modify Default Write Concern
----------------------------

.. TODO need to remove most of this section and rewrite what's left.
   Post 2.6 though.

You can modify the default write concern for a replica set by setting
the :rsconf:`settings.getLastErrorDefaults` setting
in the :doc:`replica set configuration
</reference/replica-configuration>`. The following sequence of commands
creates a configuration that waits for the write operation to complete
on a majority of the voting members before returning:

.. code-block:: javascript

   cfg = rs.conf()
   cfg.settings.getLastErrorDefaults = { w: "majority", wtimeout: 5000 }
   rs.reconfig(cfg)

If you issue a write operation with a specific write concern, the write
operation uses its own write concern instead of the default.

.. seealso:: :doc:`/reference/write-concern`

Custom Write Concerns
---------------------

You can :doc:`tag </tutorial/configure-replica-set-tag-sets>` the
members of replica sets and use the resulting tag sets to create custom write
concerns. See :doc:`/tutorial/configure-replica-set-tag-sets` for
information on configuring custom write concerns using tag sets.
