# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/aggregation-pipeline.txt:3
msgid "Aggregation Pipeline"
msgstr ""

#: ../source/core/aggregation-pipeline.txt:13
msgid "The aggregation pipeline is a framework for data aggregation modeled on the concept of data processing pipelines. Documents enter a multi-stage pipeline that transforms the documents into aggregated results."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:20
msgid "The aggregation pipeline provides an alternative to :term:`map-reduce` and may be the preferred solution for aggregation tasks where the complexity of map-reduce may be unwarranted."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:24
msgid "Aggregation pipeline have some limitations on value types and result size. See :doc:`/core/aggregation-pipeline-limits` for details on limits and restrictions on the aggregation pipeline."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:31
msgid "Pipeline"
msgstr ""

#: ../source/core/aggregation-pipeline.txt:33
msgid "The MongoDB aggregation pipeline consists of :ref:`stages <aggregation-pipeline-operator-reference>`. Each stage transforms the documents as they pass through the pipeline. Pipeline stages do not need to produce one output document for every input document; e.g., some stages may generate new documents or filter out documents. Pipeline stages can appear multiple times in the pipeline."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:40
msgid "MongoDB provides the :method:`db.collection.aggregate()` method in the :binary:`~bin.mongo` shell and the :dbcommand:`aggregate` command for aggregation pipeline. See :ref:`aggregation-pipeline-operator-reference` for the available stages."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:45
msgid "For example usage of the aggregation pipeline, consider :doc:`/tutorial/aggregation-with-user-preference-data` and :doc:`/tutorial/aggregation-zip-code-data-set`."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:52
msgid "Pipeline Expressions"
msgstr ""

#: ../source/core/aggregation-pipeline.txt:54
msgid "Some pipeline stages take a pipeline expression as the operand. Pipeline expressions specify the transformation to apply to the input documents. Expressions have a :doc:`document </core/document>` structure and can contain other :ref:`expression <aggregation-expressions>`."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:60
msgid "Pipeline expressions can only operate on the current document in the pipeline and cannot refer to data from other documents: expression operations provide in-memory transformation of documents."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:64
msgid "Generally, expressions are stateless and are only evaluated when seen by the aggregation process with one exception: :ref:`accumulator <aggregation-accumulator-operators>` expressions."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:68
msgid "The accumulators, used in the :pipeline:`$group` stage, maintain their state (e.g. totals, maximums, minimums, and related data) as documents progress through the pipeline."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:74
msgid "Some accumulators are available in the :pipeline:`$project` stage; however, when used in the :pipeline:`$project` stage, the accumulators do not maintain their state across documents."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:78
msgid "For more information on expressions, see :ref:`aggregation-expressions`."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:84
msgid "Aggregation Pipeline Behavior"
msgstr ""

#: ../source/core/aggregation-pipeline.txt:86
msgid "In MongoDB, the :dbcommand:`aggregate` command operates on a single collection, logically passing the *entire* collection into the aggregation pipeline. To optimize the operation, wherever possible, use the following strategies to avoid scanning the entire collection."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:94
msgid "Pipeline Operators and Indexes"
msgstr ""

#: ../source/core/aggregation-pipeline.txt:96
msgid "The :pipeline:`$match` and :pipeline:`$sort` pipeline operators can take advantage of an index when they occur at the **beginning** of the pipeline."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:100
msgid "The :pipeline:`$geoNear` pipeline operator takes advantage of a geospatial index. When using :pipeline:`$geoNear`, the :pipeline:`$geoNear` pipeline operation must appear as the first stage in an aggregation pipeline."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:107
msgid "Starting in MongoDB 3.2, indexes can :ref:`cover <read-operations-covered-query>` an aggregation pipeline. In MongoDB 2.6 and 3.0, indexes could not cover an aggregation pipeline since even when the pipeline uses an index, aggregation still requires access to the actual documents."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:114
msgid "Early Filtering"
msgstr ""

#: ../source/core/aggregation-pipeline.txt:116
msgid "If your aggregation operation requires only a subset of the data in a collection, use the :pipeline:`$match`, :pipeline:`$limit`, and :pipeline:`$skip` stages to restrict the documents that enter at the beginning of the pipeline. When placed at the beginning of a pipeline, :pipeline:`$match` operations use suitable indexes to scan only the matching documents in a collection."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:123
msgid "Placing a :pipeline:`$match` pipeline stage followed by a :pipeline:`$sort` stage at the start of the pipeline is logically equivalent to a single query with a sort and can use an index. When possible, place :pipeline:`$match` operators at the beginning of the pipeline."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:130
msgid "Additional Features"
msgstr ""

#: ../source/core/aggregation-pipeline.txt:132
msgid "The aggregation pipeline has an internal optimization phase that provides improved performance for certain sequences of operators. For details, see :doc:`/core/aggregation-pipeline-optimization`."
msgstr ""

#: ../source/core/aggregation-pipeline.txt:136
msgid "The aggregation pipeline supports operations on sharded collections. See :ref:`aggregation-pipeline-sharded-collection`."
msgstr ""

#: ../source/includes/extracts/additional-resources-aggregation.rst:4
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-aggregation.rst:6
msgid "`MongoDB Analytics: Learn Aggregation by Example: Exploratory Analytics and Visualization Using Flight Data <http://www.mongodb.com/presentations/mongodb-analytics-learn-aggregation-example-exploratory-analytics-and-visualization?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-aggregation.rst:7
msgid "`MongoDB for Time Series Data: Analyzing Time Series Data Using the Aggregation Framework and Hadoop <http://www.mongodb.com/presentations/mongodb-time-series-data-part-2-analyzing-time-series-data-using-aggregation-framework?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-aggregation.rst:8
msgid "`The Aggregation Framework <https://www.mongodb.com/presentations/aggregation-framework-0?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-aggregation.rst:9
msgid "`Webinar: Exploring the Aggregation Framework <https://www.mongodb.com/webinar/exploring-the-aggregation-framework?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-aggregation.rst:10
msgid "`Quick Reference Cards <https://www.mongodb.com/lp/misc/quick-reference-cards?jmp=docs>`_"
msgstr ""

