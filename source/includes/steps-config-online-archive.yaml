level: 4
ref: oa-config-step1
stepnum: 1
inherit: 
  file: steps-source-project-nav.yaml
  ref: project-nav-clusters-page
--- 
level: 4
ref: oa-config-step2
stepnum: 2
inherit: 
  file: steps-online-archive-nav.yaml
  ref: oa-tab
---
level: 4
stepnum: 3
title: "Start configuring online archive for your collection."   
ref: oa-config-button
content: | 
  To configure an online archive for your collection, click: 

  - :guilabel:`Configure Online Archive` button the first time.
  - :guilabel:`Add Archive` button subsequently. 

---
level: 4
stepnum: 4
title: "Review the :guilabel:`Online Archive Overview` and click 
       :guilabel:`Next` to proceed."   
ref: oa-config-overview
---
level: 4
stepnum: 5
title: "Create an :guilabel:`Archiving Rule` by providing the following 
       information."   
ref: oa-config-archiving-rule
content: |

  a. Specify the collection namespace, which includes the database 
     name, the dot (``.``) separator, and the collection name (that is, 
     ``<database>.<collection>``), in the :guilabel:`Namespace` field. 

     You can't modify the :manual:`namespace 
     </reference/limits/#faq-dev-namespace>` once the online archive is 
     created. 

  #. Specify the criteria for selecting documents to archive under the 
     :guilabel:`Date Match` or :guilabel:`Custom Filter` tab. 

     .. list-table:: 
        :widths: 20 80 

        * - :guilabel:`Date Match`
          - To select documents from the collection using a combination 
            of a date field and number of days:
            
            - Specify an already indexed date field from the documents 
              in the collection. To specify a nested field, use the 
              :manual:`dot notation </core/document/#dot-notation>`. 
              You can't modify the date field once the online archive 
              is created.
            - Specify the number of days to keep the data in the 
              |service| cluster.
            - Choose the date format of the specified date field. 
            
            You can't modify the date field once the online archive is 
            created.

        * - :guilabel:`Custom Filter`
          - To select documents from the collection using a custom 
            filter, specify a valid |json| filter to run. |service| 
            uses the specified custom filter with the 
            :manual:`db.collection.find(filter) 
            </reference/method/db.collection.find/>` command. You can't 
            use the empty document argument (``{}``) to return all 
            documents. You can use |service-fullname| 
            :manual:`operators </reference/operator/query/>` such as 
            :manual:`$expr 
            </reference/operator/query/expr/#mongodb-query-op.-expr>` 
            take advantage of all of the aggregation operators as shown 
            in the following examples. 

            .. example:: 

               In this custom filter example, when the current date 
               exceeds the date in the ``bucket_end_date`` field in the 
               documents, |service| subtracts thirty days (specified in 
               milliseconds) from the current date and then archives 
               data after that many days, hours, and minutes.

               .. code-block:: json 

                  { 
                    "$expr": { "$lte": [ 
                      "$bucket_end_date", 
                      { "$subtract": [ "$$NOW", 2592000000 ] } 
                    ] } 
                  }

               In this custom filter example, when the current date 
               exceeds the date inside an ``objectId``, |service| 
               subtracts thirty days (specified in milliseconds) from 
               the current date and then archives data after that many 
               days, hours, and minutes.
               
               .. code-block:: json

                  {
                    "$expr": {
                      "$lte": [
                        {"$toDate": "$_id"},
                        { "$subtract": [ "$$NOW", 2592000000 ] }  
                      ]  
                    }
                  }

---
level: 4
stepnum: 6
title: "Click :guilabel:`Next` to specify the most commonly queried 
       fields."   
ref: oa-config-query
---
level: 4
stepnum: 7
title: "(Optional) Specify the two most frequently queried fields in 
       your collection to create partitions in your online archive."   
ref: oa-config-additional-fields  
content: |
  Enter up to two most commonly queried fields from the collection in 
  the :guilabel:`Second most commonly queried field` and 
  :guilabel:`Third most commonly queried field` fields respectively. To 
  specify nested fields, use the :manual:`dot notation 
  </core/document/#dot-notation>`. Do not include quotes (``""``) 
  around nested fields that you specify using :manual:`dot notation 
  </core/document/#dot-notation>`.

  The specified fields are used to partition your archived data. 
  Partitions are similar to folders. The date field is in the first 
  position of the partition by default. You can move another field 
  to the first position of the partition if you frequently query by 
  that field. 

  The order of fields listed in the path is important in the same way 
  as it is in :manual:`Compound Indexes </core/index-compound/>`. 
  Data in the specified path is partitioned first by the value of the 
  first field, and then by the value of the next field, and so on. 
  |service| supports queries on the specified fields using the 
  partitions. 
  
  For example, suppose you are configuring the online archive for the 
  ``movies`` collection in the ``sample_mflix`` database. If your 
  archived field is the ``released`` date field, which you moved to the 
  third position, your first queried field is ``title``, and your 
  second queried field is ``plot``, your partition will look similar to 
  the following: 

  .. code-block:: sh 
     :copyable: false 

     /title/plot/released

  |service| creates partitions first for the ``title`` field, followed 
  by  the ``plot`` field, and then the ``released`` field. |service| 
  uses the partitions for queries on the following fields:

  - the ``title`` field,
  - the ``title`` field and the ``plot`` field,
  - the ``title`` field and the ``plot`` field and the ``released`` 
    field.

  |service| can also use the partitions to support a query on the
  ``title`` and ``released`` fields. However, in this case, |service| 
  would not be as efficient in supporting the query as it would be if 
  the query were on the ``title`` and ``plot`` fields only. Partitions 
  are parsed in order; if a query omits a particular partition, 
  |service| is less efficient in making use of any partitions that 
  follow that. Since a query on ``title`` and ``released`` omits 
  ``plot``, |service| uses the ``title`` partition more efficiently 
  than the ``released`` partition to support this query. 
  
  |service| can't use the partitions to support queries on fields not 
  specified here. Also, |service| can't use the partitions to support 
  queries that include the following fields without the ``title`` field:

  - the ``plot`` field,
  - the ``released`` field, or
  - the ``plot`` and ``released`` fields.

  .. include:: /includes/fact-online-archive-partition-field-length.rst

  - Choose fields that do not contain polymorphic data. |service| 
    determines the data type of a partition field by sampling 10 
    documents from the collection. |service| will not archive a 
    document if the specified field value in a document does not match 
    values in other documents in the same collection. 
  - Choose query fields that do not have a large number of possible 
    values unless you always use those fields in your queries. Query 
    fields, such as ``_id``, with possibly large number of values can 
    cause operations such as ``count`` to open all partitions resulting 
    in high latency.
  - Choose fields that you query frequently and order them from the 
    most frequently queried in the first position to the least queried 
    field in the last position. For example, if you frequently query on 
    the date field, then leave the date field in the first position. 
    But if you frequently query on another field, then that field 
    should be in the first position. 

  .. note:: 

     For fields of type ``string`` with high cardinality, |service| 
     creates a large number of partitions. MongoDB doesn't recommend 
     ``string`` type fields with high cardinality as a query field. 

  |service| supports the following partition attribute types: 

  - ``date`` 
  - ``int``
  - ``long``
  - ``objectId``
  - ``string`` 
  - ``uuid``

    .. note:: 
  
       Partition fields of type `UUID 
       <http://bsonspec.org/spec.html>`__ must be of binary subtype 4. 
       |service| skips partition fields of type UUID with subtype 3. 
  
  To learn more about the supported partition attribute types, see 
  :adl:`Partition Attribute Types 
  </supported-unsupported/supported-partition-attributes>`.

  While partitions improve query performance, queries that don't 
  contain these fields require a full collection scan of all archived 
  documents, which will take longer and increase your costs. To learn 
  more about how partitions improve your query performance in Data 
  Lake, see `Data Structure in S3 <https://docs.mongodb.com/datalake/admin/optimize-query-performance#data-structure-in-s3>`__.

---
level: 4
stepnum: 8
title: "Click :guilabel:`Next` to verify and confirm the online archive 
       settings."   
ref: oa-config-review
---
level: 4
stepnum: 9
title: "Copy and run the displayed query in your {+mongosh+} 
       shell to see the documents that match the criteria in the rule 
       you defined in step 5." 
ref: oa-config-verify-query
content: |
  You can run :manual:`explain </reference/method/cursor.explain/>` on 
  the query to check whether it uses an index. Proceed to the next step 
  to create the index if the fields are not indexed. If the fields are 
  already indexed, skip to step 11.
---
level: 4
stepnum: 10
title: "(Optional) Copy and run the displayed query in your 
       {+mongosh+} to create the required index. This 
       ensures that your data is indexed for optimal performance."   
ref: oa-config-create-index
---
level: 4
stepnum: 11
title: "Verify and confirm your archiving rule."   
ref: oa-config-confirm-rule
content: | 
  
  a. Click :guilabel:`Begin Archiving` in the :guilabel:`Confirm an 
     online archive` tab.
  
  b. Click :guilabel:`Confirm` in the :guilabel:`Begin Archiving` 
     window.

  .. note:: 

     Once your document is queued for archiving, you can no longer edit 
     the document. You must use :binary:`~bin.mongodump` or 
     :binary:`mongoexport <bin.mongoexport>` to move archived data back 
     into the live |service| cluster delete the archive to remove the 
     data from the archive.
...
