.. _kotlin-usage-count:

===============
Count Documents
===============

There are two instance methods in the ``MongoCollection`` class that you can
call to count the number of documents in a collection:

- ``countDocuments()`` returns an **accurate** count of the number of documents 
  in the collection that match a specified query. If you specify an empty query 
  filter, the method returns the total number of documents in the collection.

- ``estimatedDocumentCount()`` returns an **estimation** of the number of
  documents in the collection based on the collection metadata. You cannot
  specify a query when using this method.

The ``estimatedDocumentCount()`` method returns more quickly than the
``countDocuments()`` method because it uses the collection's metadata rather
than scanning the entire collection. The ``countDocuments()`` method returns
an accurate count of the number of documents and supports specifying
a filter.

.. tip::

   When using ``countDocuments()`` to return the total number of documents in a
   collection, you can improve performance by avoiding a collection scan. To do
   this, use a :manual:`hint </reference/method/cursor.hint>` to take advantage
   of the built-in index on the ``_id`` field. Use this technique only when
   calling ``countDocuments()`` with an empty query parameter:

   .. literalinclude:: /examples/generated/CountTest.snippet.hint.kt
      :language:  kotlin
   
When you call the ``countDocuments()`` method, you can optionally pass a
**query filter** parameter. You cannot pass any parameters when you call
``estimatedDocumentCount()``.

You can also pass an optional parameter to either of these methods to
specify the behavior of the call:

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 17 20 10

   * - Method
     - Optional Parameter Class
     - Description

   * - ``countDocuments()``
     - ``CountOptions``
     - You can set the following options:

       - ``collation()``: Sets the collation
       - ``comment()``: Sets the comment
       - ``hint()``: Sets the index to use
       - ``hintString()``: Sets the index to use
       - ``limit()``: Limits the documents to count
       - ``skip()``: Skips the specified number of documents before counting

   * - ``estimatedDocumentCount()``
     - ``EstimatedDocumentCountOptions``
     - You can set a comment by using the ``comment()`` method.

Both methods return the number of matching documents as a ``Long`` primitive.

Example
-------

The following example estimates the number of documents in the
``movies`` collection in the ``sample_mflix`` database, and then returns
an accurate count of the number of documents in the ``movies``
collection with ``Spain`` in the ``countries`` field.
If you run the preceding sample code, you should see output that looks something
like this (exact numbers may vary depending on your data):

.. include:: /includes/connect-guide-note.rst

.. io-code-block::

   .. input:: /examples/generated/Count.snippet.count-usage-example.kt
      :language:  kotlin

   .. output:: 
      :language:  console
      :visible: false

      Estimated number of documents in the movies collection: 23541
      Number of movies from Spain: 755

For additional information on the classes and methods mentioned on this
page, see the following API Documentation:

- `countDocuments() <{+driver-api+}/-mongo-collection/count-documents.html>`__
- `estimatedDocumentCount() <{+driver-api+}/-mongo-collection/estimated-document-count.html>`__
- `CountOptions <{+core-api+}/client/model/CountOptions.html>`__
- `EstimatedDocumentCountOptions <{+core-api+}/client/model/EstimatedDocumentCountOptions.html>`__
