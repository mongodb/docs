===========
removeShard
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: removeShard

   Removes a shard from a :term:`sharded cluster`. When you run
   :dbcommand:`removeShard`, MongoDB drains the shard by moving the shard's
   chunks to other shards in the cluster. Once the shard is drained, MongoDB
   removes the shard from the cluster.
   
   .. |command| replace:: ``removeShard``

   .. include:: /includes/fact-dbcommand.rst

Behavior
--------

You can only remove one shard at a time.
:dbcommand:`removeShard` returns an error if an existing
:dbcommand:`removeShard` operation is in progress.

Access Requirements
~~~~~~~~~~~~~~~~~~~

You *must* run :dbcommand:`removeShard` while connected to a
:program:`mongos`. Issue the command against the ``admin`` database or
use the :method:`sh._adminCommand()` helper.

If you have :setting:`~security.authorization` enabled, you must have the
:authrole:`clusterManager` role or any role that
includes the :authaction:`removeShard` action.

Database Migration Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each database in a sharded cluster has a primary shard. If the shard you
want to remove is also the primary of one of the cluster's databases, then
you must manually move the databases to a new shard after migrating
all data from the shard. See the :dbcommand:`movePrimary` command and
the :doc:`/tutorial/remove-shards-from-cluster` for more information.

Example
-------

From the :program:`mongo` shell, the :dbcommand:`removeShard`
operation resembles the following:

.. code-block:: javascript

   use admin
   db.runCommand( { removeShard : "bristol01" } )

Replace ``bristol01`` with the name of the shard to remove. When you
run :dbcommand:`removeShard`, the command returns immediately,
with the following message:

.. code-block:: javascript

   {
       "msg" : "draining started successfully",
       "state" : "started",
       "shard" : "bristol01",
       "ok" : 1
   }

The balancer begins migrating chunks from the shard named
``bristol01`` to other shards in the cluster. These migrations happens
slowly to avoid placing undue load on the overall cluster.

If you run the command again, :dbcommand:`removeShard` returns the
following progress output:

.. code-block:: javascript

   {
       "msg" : "draining ongoing",
       "state" : "ongoing",
       "remaining" : {
           "chunks" : 23,
           "dbs" : 1
       },
       "ok" : 1
   }

The ``remaining`` :term:`document` specifies how many chunks and databases
remain on the shard. Use :method:`db.printShardingStatus()` to list the
databases that you must move from the shard. Use the
:dbcommand:`movePrimary` to move databases.

After removing all chunks and databases from the shard, you can issue
:dbcommand:`removeShard` again see the following:

.. code-block:: javascript

   {
       "msg" : "removeshard completed successfully",
       "state" : "completed",
       "shard" : "bristol01",
       "ok" : 1
   }
