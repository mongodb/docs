name: :pipeline:`$addFields`
file: /reference/operator/aggregation/addFields
description: |
   Adds new fields to documents. Outputs documents that
   contain all existing fields from the input documents and newly
   added fields.
---
name: :pipeline:`$bucket`
file: /reference/operator/aggregation/bucket
description: |
   Categorizes incoming documents into groups, called buckets, based on
   a specified expression and bucket boundaries.
---
name: :pipeline:`$bucketAuto`
file: /reference/operator/aggregation/bucketAuto
description: |
   Categorizes incoming documents into a specific number of groups,
   called buckets, based on a specified expression. Bucket 
   boundaries are automatically determined in an attempt to evenly
   distribute the documents into the specified number of buckets.
---
name: :pipeline:`$collStats`
file: /reference/operator/aggregation/collStats
description: |
   Returns statistics regarding a collection or view.
---
name: :pipeline:`$count`
file: /reference/operator/aggregation/count
description: |
  Returns a count of the number of documents at this stage of the
  aggregation pipeline.
---
name: :pipeline:`$currentOp`
file: /reference/operator/aggregation/currentOp
description: |
  Returns information on active and/or dormant operations for the
  MongoDB deployment. To run, use the :method:`db.aggregate()` method.
---
name: :pipeline:`$facet`
file: /reference/operator/aggregation/facet
description: |
   Processes multiple :ref:`aggregation pipelines
   <aggregation-pipeline>` within a single stage on the same set of
   input documents. Enables the creation of multi-faceted
   aggregations capable of characterizing data across multiple 
   dimensions, or facets, in a single stage.
---
name: :pipeline:`$geoNear`
file: /reference/operator/aggregation/geoNear
description: |
   .. include:: /includes/extracts/geoNear-stage-toc-description.rst
---
name: :pipeline:`$graphLookup`
file: /reference/operator/aggregation/graphLookup
description: |
  Performs a recursive search on a collection. To each output document,
  adds a new array field that contains the traversal results of the
  recursive search for that document.
---
name: :pipeline:`$group`
file: /reference/operator/aggregation/group
description: |
  Groups input documents by a specified identifier expression and
  applies the accumulator expression(s), if specified, to each group.
  Consumes all input documents and outputs one document per each
  distinct group. The output documents only contain the identifier
  field and, if specified, accumulated fields.
---
name: :pipeline:`$indexStats`
file: /reference/operator/aggregation/indexStats
description: |
   Returns statistics regarding the use of each index for the
   collection.
---
name: :pipeline:`$limit`
file: /reference/operator/aggregation/limit
description: |
  Passes the first *n* documents unmodified to the pipeline
  where *n* is the specified limit. For each input document, outputs
  either one document (for the first *n* documents) or zero documents
  (after the first *n* documents).
---
name: :pipeline:`$listLocalSessions`
file: /reference/operator/aggregation/listLocalSessions
description: |
  Lists all active sessions recently in use on the currently connected
  :binary:`~bin.mongos` or :binary:`~bin.mongod` instance. These sessions may
  have not yet propagated to the ``system.sessions`` collection.
---
name: :pipeline:`$listSessions`
file: /reference/operator/aggregation/listSessions
description: |
  Lists all sessions that have been active long enough to propagate to
  the ``system.sessions`` collection.
---
name: :pipeline:`$lookup`
file: /reference/operator/aggregation/lookup
description: |
  Performs a left outer join to another collection in the *same*
  database to filter in documents from the "joined" collection for
  processing.
---
name: :pipeline:`$match`
file: /reference/operator/aggregation/match
description: |
  Filters the document stream to allow only matching documents
  to pass unmodified into the next pipeline stage. :pipeline:`$match`
  uses standard MongoDB queries. For each input document, outputs
  either one document (a match) or zero documents (no match).
---
name: :pipeline:`$out`
file: /reference/operator/aggregation/out
description: |
   Writes the resulting documents of the aggregation pipeline to a
   collection. To use the :pipeline:`$out` stage, it must be the last
   stage in the pipeline.
---
name: :pipeline:`$project`
file: /reference/operator/aggregation/project
description: |
  Reshapes each document in the stream, such as by adding new fields or
  removing existing fields. For each input document, outputs one
  document.
---
name: :pipeline:`$redact`
file: /reference/operator/aggregation/redact
description: |
  Reshapes each document in the stream by restricting the content for
  each document based on information stored in the documents
  themselves. Incorporates the functionality of :pipeline:`$project`
  and :pipeline:`$match`. Can be used to implement field level
  redaction. For each input document, outputs either one or zero
  documents.
---
name: :pipeline:`$replaceRoot`
file: /reference/operator/aggregation/replaceRoot
description: |
  Replaces a document with the specified embedded document. The
  operation replaces all existing fields in the input document,
  including the ``_id`` field. Specify a document embedded in the
  input document to promote the embedded document to the top level.
---
name: :pipeline:`$sample`
file: /reference/operator/aggregation/sample
description: |
  Randomly selects the specified number of documents from its input.
---
name: :pipeline:`$skip`
file: /reference/operator/aggregation/skip
description: |
  Skips the first *n* documents where *n* is the specified skip number
  and passes the remaining documents unmodified to the pipeline. For
  each input document, outputs either zero documents (for the first *n*
  documents) or one document (if after the first *n* documents).
---
name: :pipeline:`$sort`
file: /reference/operator/aggregation/sort
description: |
  Reorders the document stream by a specified sort key. Only the order
  changes; the documents remain unmodified. For each input document,
  outputs one document.
---
name: :pipeline:`$sortByCount`
file: /reference/operator/aggregation/sortByCount
description: |
   Groups incoming documents based on the value of a specified
   expression, then computes the count of documents in each distinct
   group.
---
name: :pipeline:`$unwind`
file: /reference/operator/aggregation/unwind
description: |
  Deconstructs an array field from the input documents to output a
  document for *each* element. Each output document replaces the array
  with an element value. For each input document, outputs *n* documents
  where *n* is the number of array elements and can be zero for an
  empty array.
...
