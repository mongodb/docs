.. index:: sharding; architecture
.. index:: architectures; sharding
.. _sharding-architecture:

===========================
Shard Cluster Architectures
===========================

.. default-domain:: mongodb

This document describes the organization and design of :term:`shard
cluster` deployments.

.. seealso:: The :doc:`/administration/sharding` document, the
   ":ref:`Sharding Requirements <sharding-requirements>`" section,
   and the ":ref:`Sharding Tutorials <sharding-tutorials>`" for more
   information on deploying and maintaining a :term:`shard cluster`.

Deploying a Test Cluster
------------------------

.. warning:: Use this architecture for testing and development only.

You can deploy a very minimal :term:`shard cluster` for testing
and development. Such a cluster will have the following components:

- 1 :ref:`config server <sharding-config-server>`.

- At least one :program:`mongod` instance (either :term:`replica sets <replica set>`
  or as a standalone node.)

- 1 :program:`mongos` instance.

.. _sharding-production-architecture:

Deploying a Production Cluster
------------------------------

When deploying a shard cluster to production, you must ensure that the
data is redundant and that your systems are highly available. To that
end, a production-level shard cluster must have the following
components:

- 3 :ref:`config servers <sharding-config-server>`, each residing on a
  discrete system.

  .. note::

     A single :term:`shard cluster` must have exclusive use of its
     :ref:`config servers <sharding-config-server>`. If you have
     multiple shards, you will need to have a group of config servers
     for each cluster.

- 2 or more :term:`replica sets <replica set>`, for the :term:`shards
  <shard>`.

  .. see:: ":doc:`/administration/replication-architectures`"
     and ":doc:`/replication`" for more information on replica sets.

- :program:`mongos` instances. Typically, you will deploy a single
  :program:`mongos` instance on each application server. Alternatively,
  you may deploy several `mongos` nodes and let your application connect
  to these via a load balancer.

.. seealso:: The ":ref:`sharding-procedure-add-shard`" and
   ":ref:`sharding-procedure-remove-shard`" procedures for more
   information.

Sharded and Non-Sharded Data
----------------------------

Sharding operates on the collection level. You can shard multiple
collections within a database, or have multiple databases with
sharding enabled. [#sharding-databases]_ However, in production
deployments some databases and collections will use sharding, while
other databases and collections will only reside on a single database
instance or replica set (i.e. a :term:`shard`.)

.. note::

   Regardless of the data architecture of your :term:`shard cluster`,
   ensure that all queries and operations use the :term:`mongos`
   router to access the data cluster. Use the :program:`mongos` even
   for operations that do not impact the sharded data.

Every database has a "primary" [#overloaded-primary-term]_ shard that
holds all un-sharded collections in that database. All collections
that *are not* sharded reside on the primary for their database. Use
the :dbcommand:`moveprimary` command to change the primary shard for a
database. Use the :dbcommand:`printShardingStatus` command or the
:method:`sh.status()` to see an overview of the cluster, which contains
information about the chunk and database distribution within the
cluster.

.. warning::

   The :dbcommand:`moveprimary` command can be expensive because
   it copies all non-sharded data to the new shard, during which
   that data will be unavailable for other operations.

When you deploy a new :term:`shard cluster`, the "first shard" becomes
the primary for all databases before enabling sharding. Databases
created subsequently, may reside on any shard in the cluster.

.. [#sharding-databases] As you configure sharding, you will use the
   :dbcommand:`enablesharding` command to enable sharding for a
   database. This simply makes it possible to use the
   :dbcommand:`shardcollection` on a collection within that database.

.. [#overloaded-primary-term] The term "primary" in the context of
   databases and sharding, has nothing to do with the term
   :term:`primary` in the context of :term:`replica sets <replica set>`.

.. _sharding-high-availability:

High Availability and MongoDB
-----------------------------

A :ref:`production <sharding-production-architecture>` :term:`shard
cluster` has no single point of failure. This section introduces the
availability concerns for MongoDB deployments, and highlights
potential failure scenarios and available resolutions:

- Application servers or :program:`mongos` instances become unavailable.

  If each application server has its own :program:`mongos` instance,
  other application servers can continue access the
  database. Furthermore, :program:`mongos` instances do not maintain
  persistent state, and they can restart and become unavailable
  without loosing any state or data. When a :program:`mongos` instance
  starts, it retrieves a copy of the :term:`config database` and can
  begin routing queries.

- A single :program:`mongod` becomes unavailable in a shard.

  :doc:`Replica sets </replication>` provide high availability for
  shards. If the unavailable :program:`mongod` is a :term:`primary`,
  then the replica set will :ref:`elect <replica-set-elections>` a new
  primary. If the unavailable :program:`mongod` is a
  :term:`secondary`, and it connects within its :ref:`recovery window
  <replica-set-oplog-sizing>`. In a three member replica set, even if
  a single member of the set experiences catastrophic failure, two
  other members have full copies of the data.

  Always investigate availability interruptions and failures. If a
  system is unrecoverable, replace it and create a new member of the
  replica set as soon as possible to replace the lost redundancy.

- All members of a replica set become unavailable.

  If all members of a replica set within a shard are unavailable, all
  data held in on that shard is unavailable. However, the data on all
  other shards will remain available, and it's possible to read and
  write data to the other shards. However, your application must be
  able to deal with partial results, and you should investigate the
  cause of the interruption and attempt to recover the shard as soon
  as possible.

- One or two :term:`config database` become unavailable.

  Three distinct :program:`mongod` instances provide the :term:`config
  database` using a special two-phase commits to maintain consistent
  state between these :program:`mongod` instances. Shard cluster
  operation will continue as normal but :ref:`chunk migration
  <sharding-balancing>` and the cluster can create no new :ref:`chunk
  splits <sharding-procedure-create-split>`. Replace the config server
  as soon as possible. If all multiple config databases become
  unavailable, the cluster can become inoperable.
  
  .. note::
     
     All config servers must be running when you first set up a shard cluster.
