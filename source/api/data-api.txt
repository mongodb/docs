
====================================
Read and Write with the {+data-api+}
====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   
   {+data-api+} Resources </api/data-api-resources>
   {+data-api+} Examples </api/data-api-examples>

The |service-fullname| {+data-api+} lets you read and write data in
|service| with standard HTTPS requests. To use the {+data-api+}, all you
need is an HTTPS client and a valid API key.

Clients send requests to specific endpoints, which each represent a
MongoDB operation. The API includes endpoints that create, read, update,
delete, and aggregate documents in your cluster. Requests specify a
collection and include operation-specific parameters like a query filter
or update description. Additionally, all incoming requests must include
a {+data-api+} key to authenticate the calling user.

For each request, the {+data-api+} authenticates the user and checks the
cluster's read/write permissions. If the user's request is authorized,
then the API validates the request, runs the corresponding database
operation, and returns the result in an HTTPS response.

For example, this :mdn:`POST <Web/HTTP/Methods/POST>` request stores a
document in |service| by calling the ``insertOne`` endpoint:

.. io-code-block::
   
   .. input::
      :language: bash
      
      curl --request POST \
        'https://data.mongodb-api.com/app/data-abcde/endpoint/data/v1/action/insertOne' \
        --header 'Content-Type: application/json' \
        --header 'api-key: TpqAKQgvhZE4r6AOzpVydJ9a3tB1BLMrgDzLlBLbihKNDzSJWTAHMVbsMoIOpnM6' \
        --data-raw '{
            "dataSource": "Cluster0",
            "database": "learn-data-api",
            "collection": "hello",
            "document": {
              "text": "Hello from the {+data-api+}!",
            }
        }'
   
   .. output::
      :language: json
      :visible: true
      
      {"insertedId":"5f1a785e1536b6e6992fd588"}

When to Use the {+data-api+}
----------------------------

You can use the {+data-api+} to integrate |service| into any apps and
services that support HTTPS requests. For example, you might:

- call the API from a serverless edge function
- access test data and log events in a CI/CD workflow
- integrate Atlas into a federated API gateway
- connect from an environment not currently supported via a MongoDB
  Driver or {+Realm+} SDK

An operation called through an API endpoint will likely take longer than
the corresponding MongoDB operation called through a connected MongoDB
Driver. For high-load use-cases and latency sensitive applications, we
recommend connecting directly to your database with a MongoDB driver. To
learn more, visit the :driver:`MongoDB Drivers </>` documentation.

How the {+data-api+} Works
--------------------------

The {+data-api+} is not a direct connection to your database. Instead,
it routes requests through a fully-managed middleware layer, called
|service| App Services, that sits between your cluster and client apps.
This layer handles user authentication and enforces data access rules to
ensure that your data is secure.

You can :ref:`quickly set up and access <data-api-get-started>` the
{+data-api+} through |service|, which creates and manages an App
Services app for you. |service| supports API key authentication with
several basic permissions models.

You can also define more complex API access permissions and custom
endpoints by accessing the managed |service| {+data-api+} app directly
or enabling the API in your own app.

To learn more about App Services and how the {+data-api+} works, see
:appservices:`{+data-api+} (App Services) </data-api>`.

.. _data-api-get-started:

Get Started
-----------

Follow the steps below to set up the {+data-api+} and send your first requests.

.. _enable-data-api:

1. Enable the {+data-api+}
~~~~~~~~~~~~~~~~~~~~~~~~~~

The {+data-api+} is disabled by default. To use the API, you need to
turn it on in the {+atlas-ui+} for one or more clusters.

Click :guilabel:`{+data-api+}` in the left navigation menu. On the
following screen, select one or more clusters that you want to enable
the API on from the dropdown menu and then click :guilabel:`Enable the
{+data-api+}`.

.. note::
   
   You can enable or disable the {+data-api+} for a cluster at any time
   from the :guilabel:`{+data-api+}` screen.

.. _create-data-api-key:

2. Create a {+data-api+} Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The {+data-api+} uses project-level API keys to manage access and
prevent unauthorized requests. Every request must include a valid
{+data-api+} key.

A {+data-api+} key grants full read and write access every collection in
a cluster and can access any enabled cluster in the project.

.. important::
   
   {+data-api+} keys are not the same as the :ref:`programmatic API keys
   <atlas-prog-api-key>` used to access the |service| and {+app-services+}
   Administration APIs.

Click :guilabel:`Create API Key`, enter a unique name for the new key,
and then click :guilabel:`Create API Key`.

You can now see and copy your new API key for the first and only time.
Once you close the modal, |service| will never expose the value again.

Copy the new API key and store it somewhere safe where you can reference
it later. {+data-api+} keys are sensitive, so make sure not to hardcode
them directly into user-facing apps or commit them to version control. 

.. tip::

   You can delete a {+data-api+} key at any time. Any request that
   includes a deleted key will fail. You might delete a key to prevent
   an existing client from continuing to use the API or if you
   accidentally expose the key and need to replace it.

.. _send-data-api-request:

3. Send a {+data-api+} Request
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You include your {+data-api+} key when you call action endpoints that
read and write documents in MongoDB. For a list of all available actions
& endpoints, see :ref:`data-api-resources`.

You can run the following commands in a shell to make sure everything
works and then start exploring:

.. tip::

   Make sure to replace placeholder values before you run each request:
   
   - ``<{+data-api+} App ID>``: Your {+data-api+} App ID, which you can
     find in the :guilabel:`URL Endpoint` section of the UI.

   - ``<{+data-api+} key>``: The {+data-api+} key you just created.

   - ``<cluster name>``: The name of a cluster with the {+data-api+}
     enabled.

A. Insert a test document:

   .. code-block:: bash
      
      curl --request POST \
        'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/insertOne' \
        --header 'Content-Type: application/json' \
        --header 'api-key: <{+data-api+} Key>' \
        --data-raw '{
            "dataSource": "<cluster name>",
            "database": "learn-data-api",
            "collection": "people",
            "document": {
              "name": "John Sample",
              "age": 42
            }
        }'

B. Then, find the test document that you just inserted:

   .. code-block:: bash
      
      curl --request POST \
        'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/findOne' \
        --header 'Content-Type: application/json' \
        --header 'api-key: <{+data-api+} Key>' \
        --data-raw '{
            "dataSource": "<cluster name>",
            "database": "learn-data-api",
            "collection": "people",
            "filter": { "name": "John Sample" }
        }'

C. Finally, delete the test document:

   .. code-block:: bash
      
      curl --request POST \
        'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/deleteOne' \
        --header 'Content-Type: application/json' \
        --header 'api-key: <{+data-api+} Key>' \
        --data-raw '{
            "dataSource": "<cluster name>",
            "database": "learn-data-api",
            "collection": "people",
            "filter": { "name": "John Sample" }
        }'

Configure the {+data-api+}
--------------------------

You can configure your API deployment and how users interact with the
API.

.. _data-api-versions:

API Versions
~~~~~~~~~~~~

The {+data-api+} uses a built-in versioning scheme to upgrade endpoints over
time while maintaining backwards compatibility. Incoming requests can
specify which version of an endpoint to use in the request URL and the
{+data-api+} can serve any version that you have enabled.

You must enable a new version before users can call endpoints with that
version. You can always enable the most recent {+data-api+} version.
However, you cannot enable an older version after a newer version has
been released.

The following versions are currently supported:

- ``beta``
- ``v1``

.. _data-api-permissions:

Data Access Permissions
~~~~~~~~~~~~~~~~~~~~~~~

The |service| {+data-api+} allows you to define cluster-level read/write
permissions that apply to all incoming requests. You can define one of the
following for each cluster:

- **Read and Write**: Requests can read all data and can insert, modify,
  or delete data in any collection.
- **Read Only**: Requests can read all data in any collection but cannot write any data.
- **No Access**: Requests can't read or write any data in any collection.

For more complex permissions, you can define custom :appservices:`data
access rules </data-api/generated-endpoints/#access-permissions>` in
the managed |service| {+data-api+} app.

.. _data-api-authentication:

Authentication and API Keys
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The |service| {+data-api+} supports user authentication with API keys.
Incoming requests must include an API key in a request header. You can
create up to 100 {+data-api+} keys.

To allow users to authenticate requests with another method, like a
username and password or a JSON web token, you can enable additional
:appservices:`authentication providers
</data-api/generated-endpoints/#authentication-and-api-keys>` in the
managed |service| {+data-api+} app.

.. _data-api-deployment-regions:

Deployment Models & Regions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The App Services layer that runs the {+data-api+} processes requests on
managed servers hosted in deployment regions around the world. You can
control where you deploy your {+data-api+} and process requests using
one of two deployment models:

- **Global** deployment hosts your API on servers in every supported
  region across the world. The API automatically routes and processes
  incoming requests to the server that's nearest to the requesting user.

- **Local** deployment hosts your API servers in one specific deployment
  region. The API routes and processes all incoming requests to a server
  in the local region.

.. _data-api-response-type:

Response Type
~~~~~~~~~~~~~

Endpoints can return data in one of two :ref:`data formats
<data-api-data-formats>`, either JSON or EJSON.

By default, endpoints return JSON, which is a standard data format that
is widely supported modern langauges and platforms. However, JSON cannot
represent every data type that you can store in MongoDB and loses type
information for some data types.

You can also configure endpoints to return EJSON, which uses structured
JSON objects to fully represent the types that MongoDB supports. This
preserves type information in responses but requires that your
application understands how to parse and use EJSON.

.. tip::
   
   The official MongoDB drivers include methods for working with EJSON.
   You can also download a standalone parser like :npm:`bson
   <package/bson>` on npm.

Call a {+data-api+} Endpoint
----------------------------

You can call a {+data-api+} endpoint from any standard HTTP client. Each
request can include configuration headers and arguments in the request
body.

Specify the Request Data Format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+data-api+} requests must include a ``Content-Type`` header to specify
the :ref:`data format <data-api-data-formats>` used in the request body.

- Use ``Content-Type: application/json`` to represent standard JSON
  types in a {+data-api+} request body.

- Use ``Content-Type: application/ejson`` to represent standard JSON
  types *and* additional EJSON types in a {+data-api+} request body.

.. tabs::
   
   .. tab:: EJSON
      :tabid: ejson
      
      .. io-code-block::
         
         .. input::
            :language: bash
            :emphasize-lines: 4
            
            curl -X GET \
              https://data.mongodb-api.com/app/data-abcde/endpoint/data/v1/action/insertOne \
              -H 'api-key: <API Key>' \
              -H 'Content-Type: application/ejson' \
              -H 'Accept: application/ejson' \
              --data-raw '{
                  "dataSource": "mongodb-atlas",
                  "database": "learn-data-api",
                  "collection": "hello",
                  "document": {
                    "_id": { "$oid": "629971c0d71aad65bd59c595" },
                    "greeting": "Hello, EJSON!",
                    "date": { "$date": { "$numberLong": "1654589430998" } }
                  }
              }'
         
         .. output::
            :language: json
            
            { "insertedId": { "$oid": "629971c0d71aad65bd59c595" } }
   
   .. tab:: JSON
      :tabid: json
      
      .. io-code-block::
         
         .. input::
            :language: bash
            :emphasize-lines: 4
            
            curl -X POST \
              https://data.mongodb-api.com/app/data-abcde/endpoint/data/v1/action/updateOne \
              -H 'api-key: <API Key>' \
              -H 'Content-Type: application/json' \
              --data-raw '{
                 "dataSource": "mongodb-atlas",
                 "database": "learn-data-api",
                 "collection": "hello",
                 "filter": { "greeting": "Hello, world!" },
                 "update": {
                     "$set": { "greeting": "Hello, universe!" }
                 }
              }'
         
         .. output::
            :language: json
            :visible: false
            
            { "matchedCount": 1, "modifiedCount": 1 }

Choose a Response Data Format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A request can include an ``Accept`` header to request a specific data
format for the response body, either JSON or EJSON. If a request does
not include a valid ``Accept`` header, the response uses the data format
specified in your :ref:`Data API configuration
<data-api-response-type>`.

.. tabs::
   
   .. tab:: EJSON
      :tabid: ejson
      
      .. io-code-block::
         
         .. input::
            :language: bash
            :emphasize-lines: 5
            
            curl -X GET \
              https://data.mongodb-api.com/app/data-abcde/endpoint/data/v1/action/findOne \
              -H 'api-key: <API Key>' \
              -H 'Content-Type: application/json' \
              -H 'Accept: application/ejson' \
              --data-raw '{
                 "dataSource": "mongodb-atlas",
                 "database": "learn-data-api",
                 "collection": "hello",
                 "projection": { "greeting": 1, "date": 1 }
              }'
         
         .. output::
            :language: json
            
            {
              "_id": { "$oid": "629971c0d71aad65bd59c545"},
              "greeting": "Hello, Leafie!",
              "date": { "$date": { "$numberLong": "1654589430998" } }
            }
   
   .. tab:: JSON
      :tabid: json
      
      .. io-code-block::
         
         .. input::
            :language: bash
            :emphasize-lines: 5
            
            curl -X POST \
              https://data.mongodb-api.com/app/data-abcde/endpoint/data/v1/action/findOne \
              -H 'api-key: <API Key>' \
              -H 'Content-Type: application/json' \
              -H 'Accept: application/json' \
              --data-raw '{
                 "dataSource": "mongodb-atlas",
                 "database": "learn-data-api",
                 "collection": "hello",
                 "projection": { "greeting": 1, "date": 1 }
              }'
         
         .. output::
            :language: json
            
            {
              "_id": "629971c0d71aad65bd59c545",
              "greeting": "Hello, Leafie!",
              "date": "2022-06-07T08:10:30.998Z"
            }

.. _data-api-authenticate:

Authenticate the Request
~~~~~~~~~~~~~~~~~~~~~~~~

To keep your data secure and correct, generated {+data-api+} endpoints
always run in the context of a specific, registered user and
automatically enforce your app's :ref:`rules <rules>` and :ref:`schemas
<schemas>`. Incoming requests must include one or more headers that
contain valid user credentials for one of the following enabled
authentication providers:

- :ref:`Email/Password <email-password-authentication>`
- :ref:`API Key <api-key-authentication>`
- :ref:`Custom JWT <custom-jwt-authentication>`

.. tabs-realm-auth-providers::
   
   .. tab::
      :tabid: local-userpass

      .. code-block:: bash
         :emphasize-lines: 3-4
         
         curl -X POST \
           https://data.mongodb-api.com/app/data-abcde/endpoint/data/v1/action/findOne \
           -H 'email: <Email Address>' \
           -H 'password: <Password>' \
           -H 'Content-Type: application/json' \
           --data-raw '{
             "dataSource": "mongodb-atlas",
             "database": "learn-data-api",
             "collection": "hello",
           }'
   
   .. tab::
      :tabid: api-key

      .. code-block:: bash
         :emphasize-lines: 3
         
         curl -X POST \
           https://data.mongodb-api.com/app/data-abcde/endpoint/data/v1/action/findOne \
           -H 'api-key: <API Key>' \
           -H 'Content-Type: application/json' \
           --data-raw '{
             "dataSource": "mongodb-atlas",
             "database": "learn-data-api",
             "collection": "hello",
           }'
   
   .. tab::
      :tabid: custom-token

      .. code-block:: bash
         :emphasize-lines: 3
         
         curl -X POST \
           https://data.mongodb-api.com/app/data-abcde/endpoint/data/v1/action/findOne \
           -H 'jwtTokenString: <Custom JSON Web Token>' \
           -H 'Content-Type: application/json' \
           --data-raw '{
             "dataSource": "mongodb-atlas",
             "database": "learn-data-api",
             "collection": "hello",
           }'

.. _data-api-data-formats:

Data Formats
------------

MongoDB stores data in a format called BSON, which is similar to a JSON
object in structure but supports additional data types and uses a binary
encoding. BSON is efficient for computers but is not human readable so
you can't work with it directly.

Instead, the {+data-api+} uses two formats to represent data in requests
and responses:

- The **JSON** format uses standard types that any tool can parse and
  understand. However, JSON cannot represent all BSON types so JSON
  responses may lose type information for some fields. For example, BSON
  has distinct types for 32-bit integers and 64-bit floats but a JSON
  response represents both as a ``number``.

- The **EJSON** format, short for :manual:`MongoDB Extended JSON
  </reference/mongodb-extended-json/>`, is a superset of standard JSON
  that uses structured fields to represent BSON data that don't have
  corresponding JSON types. This fully represents your data but requires
  your client to understand how to work with EJSON.

.. example::
   
   The following document shows BSON types represented in JSON and EJSON:
   
   .. tabs::
       
       .. tab:: EJSON
          :tabid: ejson
          
          .. code-block:: json
             
             {
                "Name": "Mango",
                "Year": { "$numberLong": "2022" },
                "Weight": { "$numberDecimal": "9823.1297" },
                "Date": { "$date": { "$numberLong": "1641954803067" } }
             }
       
       .. tab:: JSON
          :tabid: json
          
          .. code-block:: json
             
             {
                "Name": "Mango",
                "Year": 2022,
                "Weight": "9823.1297",
                "Date": "2022-01-12T02:33:23.067Z"
             }

The following table compares the JSON and EJSON representations of each
supported type:

.. list-table::
   :header-rows: 1
   :widths: 15 42 42
   
   * - Type
     - EJSON
     - JSON
   
   * - ``Array``
     
     - .. code-block:: json
          :copyable: false

          [ <elements> ]
     
     - .. code-block:: json
          :copyable: false

          [ <elements> ]

   * - ``Binary``
     
     - .. code-block:: json
          :copyable: false

          {
             "$binary": {
                "base64": "e67803a39588be8a95731a21e27d7391",
                "subType": "05"
             }
          }
     
     - .. code-block:: json
          :copyable: false

          {
             "Subtype": 5,
             "Data": "e67803a39588be8a95731a21e27d7391"
          }

   * - ``Date``
     
     - .. code-block:: json
          :copyable: false

          {
             "$date": {
                "$numberLong": "1641954803067"
             }
          }
     
     - .. code-block:: json
          :copyable: false

          "2022-01-12T02:33:23.067Z"

   * - ``Decimal128``
     
     - .. code-block:: json
          :copyable: false

          { "$numberDecimal": "9823.1297" }
     
     - .. code-block:: json
          :copyable: false

          "9823.1297"

   * - ``Document``
     
     - .. code-block:: json
          :copyable: false

          { <content> }
     
     - .. code-block::
          :copyable: false

          { <content> }

   * - ``Double``
     
     - .. code-block:: json
          :copyable: false

          {
             "$numberDouble": "10.5"
          }
     
     - .. code-block:: json
          :copyable: false

          10.5
   
   * - ``Int32``
     
     - .. code-block:: json
          :copyable: false

          {"$numberInt":"10"}
     
     - .. code-block:: json
          :copyable: false

          10
   
   * - ``Int64``
     
     - .. code-block:: json
          :copyable: false

          {"$numberLong":"50"}
     
     - .. code-block:: json
          :copyable: false

          50
   
   * - ``MaxKey``
     
     - .. code-block:: json
          :copyable: false

          { "$maxKey": 1 }
     
     - .. code-block:: json
          :copyable: false

          {}
       
       *No JSON equivalent*

   * - ``MinKey``
     
     - .. code-block:: json
          :copyable: false

          { "$minKey": 1 }
     
     - .. code-block:: json
          :copyable: false

          {}
       
       *No JSON equivalent*

   * - ``ObjectId``
     
     - .. code-block:: json
          :copyable: false

          {
             "$oid":"5d505646cf6d4fe581014ab2"
          }
     
     - .. code-block:: json
          :copyable: false

          "5d505646cf6d4fe581014ab2"

   * - ``Regular Expression``
     
     - .. code-block:: json
          :copyable: false

          {
             "$regularExpression": {
                "pattern":"^H",
                "options":"i"
             }
          }
     
     - .. code-block:: json
          :copyable: false

          {
             "Pattern": "^H",
             "Options": "i"
          }

   * - ``Timestamp``
     
     - .. code-block:: json
          :copyable: false

          {
             "$timestamp": {
                "t":1565545664,
                "i":1
              }
          }
     
     - .. code-block:: json
          :copyable: false

          {
             "T": 1565545664,
             "I": 1
          }

Request Logs
------------

The {+data-api+} logs all requests and stores the logs for 30 days.

You can view them on the :guilabel:`{+data-api+}` screen in the :guilabel:`Logs` tab.

Request Limitations
-------------------

The {+data-api+} enforces the following limitations on all requests:

- Incoming requests may not exceed 18 MB.
- Response body content may not exceed 16 MB.
- Request processing time may not exceed 90 seconds.

Request Traffic
---------------

The {+data-api+} limits request traffic to 5,000 concurrent requests. Any 
requests made beyond this limit return an HTTP response status code of 
`429 - Too Many Requests <https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429>`_.
You can request a higher limit by `filing a support ticket
<https://support.mongodb.com/welcome>`__.

Billing
-------

The {+data-api+} has usage-based pricing measured by the underlying
{+app-services+} application. For details, see
:appservices:`{+app-services+} Billing </billing>`.

{+data-api+} usage is billed based on the following dimensions:

- **Requests:** Every action adds one request to your billed total
  regardless of whether or not the action is successful.

- **Compute:** Every action bills for time and memory that the server
  uses to process the action. The exact usage depends on your workload.

- **Data Transfer:** Every action bills for data returned to the caller
  in the response. The response may include the result set of the action
  or metadata that describes the result of the action.
