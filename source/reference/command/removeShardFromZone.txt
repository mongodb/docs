===================
removeShardFromZone
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: removeShardFromZone

   .. versionadded:: 3.4

   The :dbcommand:`removeShardFromZone` administrative command removes the
   association between a shard and a :term:`zone`.

   .. |command| replace:: ``removeShardFromZone``

   .. include:: /includes/fact-dbcommand.rst

   You must run :dbcommand:`removeShardFromZone` on the admin database.

   The :dbcommand:`removeShardFromZone` command has the following syntax:

   .. code-block:: javascript

    {
      removeShardFromZone: <string>,
      zone: <string>
    }

   The command takes the following fields:

   .. include:: /includes/apiargs/dbcommand-removeShardFromZone-field.rst

   Only issue :dbcommand:`removeShardFromZone` when connected to a
   :binary:`~bin.mongos` instance. 

   The :binary:`~bin.mongo` shell provides the helper method
   :method:`sh.removeShardFromZone()`

Behavior
--------

:dbcommand:`removeShardFromZone` does not remove ranges associated with the
zone.

To completely remove a zone from the cluster, you must run 
:dbcommand:`removeShardFromZone` on each shard associated with the zone.

If the shard specified is the last shard associated with the zone, you must
ensure there are no remaining shard key ranges associated with the zone. Use
:dbcommand:`updateZoneKeyRange` to remove any existing ranges associated with
the zone before running :dbcommand:`removeShardFromZone`.

See the :ref:`zone <zone-sharding>` manual page for more information on zones
in sharded clusters.

Security
~~~~~~~~

For sharded clusters running with :ref:`authentication <authentication>`, you
must authenticate as a user whose privileges include:

- :authaction:`update` on the ``config.shards`` collection or the ``config``
  database

- :authaction:`find` on the ``config.tags`` collection or the ``config``
  database

The :authrole:`clusterAdmin` or :authrole:`clusterManager` built-in roles have
the appropriate permissions for issuing :dbcommand:`removeShardFromZone`. See
the :ref:`Role-Based Access Control <authorization>` manual page for more
information.

Example
-------

The following example removes the association between ``shard0000`` and zone
``NYC``:

.. code-block:: javascript

   admin = db.getSiblingDB("admin")
   admin.runCommand( { removeShardFromZone : "shard0000" , zone : "NYC" } )
