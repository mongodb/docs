.. _golang-change-document:
.. _golang-update:
.. _golang-update-documents:

================
Update Documents
================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, write operation, change data
   :description: Learn how to modify MongoDB documents using update and replace operations, including methods like updateOne(), updateMany(), and replaceOne().
   
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :caption: Update Documents

   Replace Documents </crud/update/replace>
   Update Arrays </crud/update/embedded-arrays>
   Upsert </crud/update/upsert>

Overview
--------

In this guide, you can learn how to update documents in MongoDB by using
**update** operations.

Update operations change the fields that you specify while leaving other
fields and values unchanged.

In MongoDB, all methods to modify documents follow the same pattern:

.. figure:: /includes/figures/change_diagram.png
   :alt: Change method signature

.. note:: Placeholder

   ``changeX`` is a placeholder and not a real method.

The pattern expects you to:

* Specify a query filter to match one or more documents to modify.
* Specify the field and value changes.
* Specify options, if you must modify the method behavior.

The driver provides the following methods to update documents:

* ``UpdateByID()``: Updates a single document based on its ``_id``.
* ``UpdateOne()``: Updates a single document.
* ``UpdateMany()``: Updates multiple documents.

A Note About _id
~~~~~~~~~~~~~~~~~

Each document in a MongoDB collection has a unique and immutable ``_id``
field. You cannot use update operations to change the
``_id`` field. If you attempt to change this field, the update
methods return a ``WriteError``.

.. _golang-update-document:

Parameters
----------

Each method takes an **update document** that includes at least one **update operator**.
The update operator specifies the type of update to perform. The update
document also includes the fields and values that describe the change.
Update documents use the following format:

.. code-block:: go

   bson.D{{"<update operator>", bson.D{{"<field>", <value>},
                                       {"<field>", <value>}, ... }},
          {"<update operator>", ... }, ... }

See the MongoDB server manual for a :manual:`complete list of update operators
and descriptions </reference/operator/update-field/>`.

.. tip::
   
   ``UpdateOne()`` updates the first document that matches the query filter
   you provide. To ensure that you update the correct document, you can use the ``sort``
   option to specify the order in which the operation finds documents. To learn more,
   see the `UpdateOneOptions <{+api+}/mongo/options#UpdateOneOptions>`__ API documentation.

.. note:: Aggregation Pipelines in Update Operations

   You can use aggregation pipelines made up of a subset of aggregation 
   stages in update operations. To learn more about 
   the aggregation stages MongoDB supports in
   aggregation pipelines, see the tutorial on performing
   :manual:`Updates with Aggregation Pipeline
   </tutorial/update-documents-with-aggregation-pipeline/>`
   tutorial in the Server Manual.

Return Values
-------------

``UpdateOne()``, ``UpdateByID()``, and ``UpdateMany()`` return an
``UpdateResult`` type that contains information about the update
operation if the operation is successful. The ``UpdateResult`` type
contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``MatchedCount``
     - The number of documents matched by the filter

   * - ``ModifiedCount``
     - The number of documents modified by the operation
   
   * - ``UpsertedCount`` 
     - The number of documents upserted by the operation

   * - ``UpsertedID`` 
     - The ``_id`` of the upserted document, or ``nil`` if there is none

If multiple documents match the query filter passed to ``UpdateOne()``,
the method selects and updates the first matched document. If no
documents match the query filter, the update operation makes no
changes. 

See the :ref:`upsert guide <golang-upsert-guide>`
to learn how to insert a new document if no documents match the query filter.

UpdateOne() Example
-------------------

The following example uses the ``listingsAndReviews`` collection in the 
``sample_airbnb`` dataset from the :atlas:`Atlas sample datasets </sample-data/sample-airbnb>`.
The following document describes an airbnb listing:

.. code-block:: json
   :copyable: false

   {
       "_id": "10006546",
      "listing_url": "https://www.airbnb.com/rooms/10006546",
      "name": "Ribeira Charming Duplex",
      "summary": "Fantastic duplex apartment with three bedrooms, located in the historic area of Porto, Ribeira (Cube)...",
      ...
      "minimum_nights": "2",
      "maximum_nights": "30",
      ...
       "accommodates": 8,
      ...
   }

The following example uses the ``UpdateOne()`` method to:

- Match the document where the ``_id`` value is ``"10006546"``.
- Set the ``name`` field to ``"Ribiera River View Duplex"``.
- Increment the value of the ``accommodates`` field by ``1``.

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      filter := bson.D{{"_id", "10006546"}}
      update := bson.D{{"$set", bson.D{{"name", "Ribiera River View Duplex"}}},
         {"$inc", bson.D{{"accomodates", 1}}}}

      result, err := collection.UpdateOne(context.TODO(), filter, update)
      fmt.Printf("Documents matched: %v\n", result.MatchedCount)
      fmt.Printf("Documents updated: %v\n", result.ModifiedCount)

   .. output::
      :language: none
      :visible: false

      Documents matched: 1
      Documents updated: 1

The following shows the updated document resulting from the preceding update operation:

.. code-block:: json
   :copyable: false

   {
       "_id": "10006546",
      "listing_url": "https://www.airbnb.com/rooms/10006546",
      "name": "Ribeira River View Duplex",
      "summary": "Fantastic duplex apartment with three bedrooms, located in the historic area of Porto, Ribeira (Cube)...",
      ...
      "minimum_nights": "2",
      "maximum_nights": "30",
      ...
       "accommodates": 9,
      ...
   }

UpdateOne() Example: Full File
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/usage-examples/example-intro.rst

The following example is a fully runnable file that performs the following
actions on the ``restaurants`` collection:

- Finds a document with a specific ``_id``
- Updates the ``avg_rating`` field value of the matched document

.. io-code-block::
   :copyable: true

   .. input:: /includes/usage-examples/code-snippets/updateOne.go
      :language: go
      :dedent:

   .. output::
      :language: none
      :visible: false

      Documents updated: 1

UpdateMany() Example: Full File
-------------------------------

.. include:: /includes/usage-examples/example-intro.rst

The following example is a fully runnable file that performs the following
actions on the ``restaurants`` collection:

- Finds documents with the ``cuisine`` field value of ``"Pizza"`` and the
  ``borough`` field value of ``"Brooklyn"``
- Updates the ``avg_rating`` field value of the matched documents

.. io-code-block::
   :copyable: true

   .. input:: /includes/usage-examples/code-snippets/updateMany.go
      :language: go
      :dedent:

   .. output::
      :language: none
      :visible: false

      Documents updated: 296

Additional Information
----------------------

To learn more about the operations mentioned, see the following
guides:

- :ref:`golang-query-document`
- :ref:`golang-retrieve`
- :ref:`golang-compound-operations`
- :manual:`Update Operators </reference/operator/update/#update-operators>`

To learn more about updating array elements, see :ref:`golang-update-arrays`.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `WriteError <{+api+}/mongo#WriteError>`__
- `UpdateOne() <{+api+}/mongo#Collection.UpdateOne>`__
- `UpdateByID() <{+api+}/mongo#Collection.UpdateByID>`__
- `UpdateMany() <{+api+}/mongo#Collection.UpdateMany>`__
- `UpdateResult <{+api+}/mongo#UpdateResult>`__
