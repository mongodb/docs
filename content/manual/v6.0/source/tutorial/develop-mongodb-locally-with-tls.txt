.. _develop-mongodb-locally-with-tls:

===================================
Developing MongoDB Locally with TLS
===================================

.. meta::
   :description: Learn how to configure and run MongoDB locally with TLS/SSL for secure, encrypted development and testing environments.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB Atlas provides valid TLS certificates for development environments, but
you may need to implement an on-premises deployment with customized security 
configurations. This guide provides instructions for setting up TLS encryption 
for a local MongoDB deployment, allowing you to create a secure 
testing environment that closely resembles production infrastructure.

Using either :ref:`Community Edition <install-mdb-community-edition>` or 
:ref:`Enterprise <install-mdb-enterprise>` MongoDB locally with TLS encryption provides 
a realistic environment for development, testing, and validating your application's 
security behaviors before deployment.

Self-Signed Certificate Chains for Local TLS
--------------------------------------------

In production environments, MongoDB servers use certificates signed by trusted 
certificate authorities, or CAs. For local development, you can use any of the following options:

- **Commercial or Public CA Certificates**: If you have registered a domain name, 
  you can obtain a certificate from a recognized certificate authority.
- **Enterprise CA Certificates**: If your organization maintains a private certificate 
  authority like `EJBCA <https://www.ejbca.org/>`__ or `TinyCert <https://www.tinycert.org/>`__, 
  you can request certificates through your IT department.
- **Free CA Certificates**: If you have a registered domain name, services like 
  `Let's Encrypt <https://letsencrypt.org/>`__ provide free certificate authority-signed 
  certificates.
- **Self-Signed Certificates**: For isolated local development environments, 
  self-signed certificate chains provide a practical solution when other options 
  aren't available.

You can implement self-signed certificate chain for local MongoDB deployments using the 
following steps. By creating your own certificate authority and server certificates, you 
can simulate TLS-encrypted connections without the need for external services.

.. important::

   Only use self-signed certificate chains in isolated development
   environments. Self-signed certificate chains do not contain the 
   trust verification mechanisms of properly issued certificates 
   and may present security vulnerabilities. Never use self-signed 
   certificates in production or when working with sensitive data.

Server Certificates in TLS Communications
-----------------------------------------

In secure communications, server certificates prove the server's identity to 
connecting clients, preventing man-in-the-middle attacks, and facilitate secure 
key exchange for encrypted communications.

In a typical TLS handshake, the client verifies the server certificate by checking
whether:

- The certificate is signed by a trusted certificate authority
- The certificate is valid, not expired or revoked
- The server name in the certificate matches the server being connected to

The client accepts root and intermediate CA certificates only if they are present in 
the client's local trust store. For properly issued certificates, only the issuing
authority can access the root certificate's private key, never with the server.

Self-Signed Certificate Chain Layout
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For your local MongoDB TLS setup with self-signed certificates, you need to create 
and manage several certificate files that serve different purposes in the TLS handshake.

Server Requirements:

- A self-signed certificate authority (CA) certificate, which acts as your own trusted root.
- The private key of the self-signed CA certificate, which is used to sign server certificates.
- A server certificate signed by your self-signed CA, which identifies your MongoDB server.
- The private key for the server certificate, which is used for TLS encryption.

Client Requirements:

- The self-signed root CA certificate, which is needed to verify the server's certificate.
- Client certificates and their private keys, which is optional and used for mutual TLS.

When you configure MongoDB, specify paths to these certificate files in your
server and client configurations to establish secure TLS connections.

.. important::

   In a production environment with certificates from a recognized CA, you do not
   have access to the private key for the root certificate authority. This is a 
   special exception for self-signed certificate chains in development environments.

Create a Self-Signed Certificate Chain
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following code uses the ``openssl`` command-line tool to create a complete 
self-signed certificate chain for your MongoDB deployment. This process creates 
all necessary certificates and keys, formatted for use with MongoDB.

.. code-block:: bash

   # Creating self-signed CA cert and SAN cert for localhost  
   # aka mdbinstance.mydevelopment.net  
   #=====================================================================================  
   openssl req -x509 -nodes -sha256 -days 1825 -newkey rsa:4096 \  
    -keyout rootCA.key -out rootCA.crt -subj="/CN=ca.mydevelopment.net"  
   openssl req -newkey rsa:4096 -keyout server.key -nodes \  
    -out domain.csr -subj "/CN=server.mydevelopment.net"  
   openssl req -x509 -nodes -CA rootCA.crt -CAkey rootCA.key -in domain.csr \  
    -out mdbinstance.mydevelopment.net.crt -days 3560 -nodes \  
    -subj '/CN=<mdbinstance_mydevelopment_net>' -extensions san -config <( \  
      echo '[req]'; \  
      echo 'distinguished_name=req'; \  
      echo '[san]'; \  
      echo 'subjectAltName=DNS:localhost,DNS:mdbinstance.mydevelopment.net')  
   cat rootCA.key rootCA.crt >rootCAcombined.pem  
   cat server.key mdbinstance.mydevelopment.net.crt >serverCert.pem

The previous commands perform the following actions:

1. Creates a root CA certificate, ``rootCA.crt``, and its private key, ``rootCA.key``
#. Generates a certificate signing request, or a CSR, for your server
#. Creates a server certificate with Subject Alternative Names, or SANs, for both ``localhost`` 
   and ``mdbinstance.mydevelopment.net``
#. Combines the certificates and keys into the PEM files needed for MongoDB

The commands above produce the following files.

For MongoDB Server Configuration:

- ``rootCAcombined.pem``: Combined CA certificate and private key
- ``serverCert.pem``: Combined server certificate and private key

For Client Applications:

- ``rootCA.crt``: The CA certificate, used to trust the server certificate
- ``serverCert.pem``: The server certificate with its private key, used for TLS connection

MongoDB Server TLS Configuration
--------------------------------

Once you have generated your certificates, configure your MongoDB server 
to use them. The configuration below shows the ``net`` section of the ``mongod.conf`` 
file, focusing on the TLS settings.

.. code-block:: yaml

   # network interfaces
   net:
     port: 27017  
     bindIp: 0.0.0.0  # Binds to all network interfaces - use only in secure networks
     tls:  
       mode: requireTLS  # Forces all connections to use TLS
       certificateKeyFile: /path/to/serverCert.pem  # Server certificate with private key
       CAFile: /path/to/rootCAcombined.pem  # CA certificate with private key

The configuration above includes:

- ``port``: Standard MongoDB port 27017
- ``bindIp``: Set to 0.0.0.0 to allow connections from any IP address, appropriate only 
  for development environments on secure private networks
- ``tls.mode``: Set to ``requireTLS`` to ensure all connections use TLS encryption
- ``certificateKeyFile``: Path to your server certificate with its private key
- ``CAFile``: Path to your CA certificate with its private key

After updating the configuration file, restart your MongoDB server to apply the 
TLS settings. Your MongoDB instance then requires TLS for all connections.

Connecting to MongoDB with TLS
------------------------------

The following examples demonstrate how to establish connections to your MongoDB 
server configured for TLS. 

.. tabs-drivers:: 

   .. tab:: PHP
      :tabid: php

      .. code-block:: php

         $mongodb_client = new MongoDB\Client($mongodb_uri,  
            [  
               'tls' => true,  # Enable TLS for the connection
               'tlsCAFile' => $mongodb_ca_cert_path,  # Path to your CA certificate
               'tlsCertificateKeyFile' => $mongodb_cert_path  # Path to your client certificate
            ]  
         );  

   .. tab:: mongosh
      :tabid: shell

      .. code-block:: bash

         mongosh --tls --tlsCAFile /path/to/rootCA.crt --tlsCertificateKeyFile \
         /path/to/serverCert.pem 'mongodb://userid:password@hostname.domain'

   .. tab:: Compass
      :tabid: compass

      For MongoDB Compass connections, URL-encode the certificate paths 
      in your connection string. For example, convert forward-slashes (/) to %2F:

      .. code-block:: none

         mongodb://userid:password@hostname.domain/?directConnection=true&tls=true&tlsCAFile=%2Fpath%2Fto%2FrootCA.crt&tlsCertificateKeyFile=%2Fpath%2Fto%2Fserver_certificate.pem

For all clients, you need to provide:

1. The option to enable TLS
#. The path to your CA certificate to trust the server
#. Optionally, for mutual TLS, the path to a client certificate

Testing your connection confirms that your TLS setup is working correctly. If the 
connection succeeds, your MongoDB deployment is secured with TLS encryption.

Using Trusted Certificate Authorities
-------------------------------------

Although self-signed certificates work for development, production environments should 
use certificates from trusted certificate authorities. If you have a registered domain 
name, Let's Encrypt offers free certificates that are widely trusted.

When using certificates from recognized CAs, ensure that the CA's root and intermediate 
certificates are part of the operating system's trust store on both the server and clients. 

In production deployments with trusted certificates, configure your MongoDB 
server settings using the following code:

.. code-block:: yaml

   net:
      tls:  
         mode: requireTLS  
         certificateKeyFile: /etc/ssl/mongodb.pem  # Your trusted certificate with private key

In the previous configuration, ``mongodb.pem`` contains your server's certificate, signed by a 
trusted CA, and its private key. Because the CA is already trusted by the operating system, 
you don't need to specify the ``CAFile`` parameter.

For more details on configuring MongoDB with trusted certificates, see 
:ref:`configure-mongod-mongos-for-tls-ssl`.