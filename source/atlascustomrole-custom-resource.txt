.. _ak8so-configure-custom-database-roles:
.. _atlascustomrole-custom-resource:

=======================================
``AtlasCustomRole`` Custom Resource
=======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The ``AtlasCustomRole`` custom resource defines a :ref:`custom
database role <mongodb-roles>` to allocate privileges to your
:ref:`database users <mongodb-users>`.

To create this custom role within a given project, you must either:

- Reference the :ref:`atlasproject-custom-resource` name in the
  ``AtlasCustomRole`` custom resource, for projects you manage with
  |ak8so|
- Reference the :atlas:`project ID </api/atlas-admin-api-ref/#project-id>` of your |service|
  project in the ``AtlasCustomRole`` custom resource, for projects you
  don't manage with |ak8so|

.. include:: /includes/fact-ak8so-crds.rst

|ak8so| does one of the following actions using the |service|
:oas-atlas-tag:`Custom Database Role API Resource
</Custom-Database-Roles>`:
   
- Creates a new custom database role.
- Updates an existing custom database role.

Examples
---------

.. _atlascustomrole-example-basic:

Basic Example
~~~~~~~~~~~~~

The following example shows an ``AtlasCustomRole`` custom resource
that defines the ``shard-operator`` custom role, with privileges
for backing up and monitoring sharded {+clusters+} within the
``my-project`` project.

.. code-block::

   apiVersion: atlas.mongodb.com/v1
   kind: AtlasCustomRole
   metadata:
     name: shard-operator-role
     namespace: mongodb-atlas-system
     labels:
       mongodb.com/atlas-reconciliation-policy: keep
   spec:
     projectRef:
       name: my-project
       namespace: my-operator-namespace
     role:
       name: my-role
	 actions:
	 - name: getShardMap
	   resources:
	     cluster: true
	 - name: shardingState
	   resources:
	     cluster: true
	 - name: connPoolStats
	   resources:
   	     cluster: true
	 - name: getLog
	   resources:
	     cluster: true
         inheritedRoles:
	 - name: operator-role-1
	   role: backup

.. _atlascustomrole-example-independent:

Independent CRD Example
~~~~~~~~~~~~~~~~~~~~~~~

The following example shows an ``AtlasCustomRole`` :ref:`independent
CRD <ak8so-independent-crd>` that defines the same ``shard-operator``
custom role defined in the :ref:`Basic Example
<atlascustomrole-example-basic>`. This custom resource definition
allows you to create this role in a project you don't manage in the
same instance of |ak8so| with which you define this resource. To
enable independent operation, you must use an ``externalProjectRef``
instead of a ``projectRef``, and you must supply a
``connectionSecret`` directly since this resource can't inherit API
credentials from its parent project.

.. code-block::

   apiVersion: atlas.mongodb.com/v1
   kind: AtlasCustomRole
   metadata:
     name: shard-operator-role
     namespace: mongodb-atlas-system
     labels:
       mongodb.com/atlas-reconciliation-policy: keep
   spec:
     externalProjectRef:
       id: 671998971c8520583f24f411
     connectionSecret:
       name: my-atlas-key
     role:
       name: my-role
	 actions:
	 - name: getShardMap
	   resources:
	     cluster: true
	 - name: shardingState
	   resources:
	     cluster: true
	 - name: connPoolStats
	   resources:
   	     cluster: true
	 - name: getLog
	   resources:
	     cluster: true
         inheritedRoles:
	 - name: operator-role-1
	   role: backup

Parameters
----------

This section describes the ``AtlasTeam`` custom resource parameters available. 

``metadata.name``
   *Type*: string

   *Required*

   Name that the :ref:`atlasproject-custom-resource` uses to add this team to a project.

.. setting:: metadata.namespace

   *Type*: string

   *Optional*

   Namespace other than ``default`` that you want to contain the ``atlasTeam`` 
   custom resource. If you define a custom namespace, you must add it to the 
   :ref:`atlasproject-custom-resource` in the :setting:`spec.teams.teamRef.namespace` 
   field.

.. setting:: spec.connectionSecret.name

   *Type*: string

   *Conditional*

   Name of the opaque |k8s-secret| that contains the organization ID
   and :ref:`API keys <about-org-api-keys>` that |ak8so| uses to
   :ref:`connect <ak8so-access-to-atlas-ref>` to |service|.  If
   unspecified, |ak8so| falls back to either:

   - The ``spec.connectionSecretRef.name`` parameter of the parent
     ``atlasProject``
   - The default ``global`` secret, if ``spec.connectionSecretRef.name``
     is undefined for the parent ``atlasProject``

   This parameter is mandatory for :ref:`independent CRDs
   <ak8so-independent-crd>`.
   
   .. include:: /includes/fact-ak8so-label-secret.rst

.. setting:: spec.externalProjectRef.id

   *Type*: string

   *Conditional*

   ID of the project to which the custom role belongs. You must
   specify the project ID of an existing :ref:`Atlas Project
   <manage-projects>`. This parameter is required for custom roles
   that belong to projects managed by either:

   - A different instance of |ak8so|
   - Tooling other than |ak8so|

   For custom roles that belong to projects managed by
   the same instance of |ak8so|, use ``spec.projectRef.name`` if you
   do not use ``spec.externalProjectRef.id``.

   A custom role can only belong to one project. To define the same
   custom role for multiple projects, create custom resource
   definitions for each project.

.. setting:: spec.projectRef.name

   *Type*: string

   *Conditional*

   Name of the project to which the custom role belongs. You must
   specify an existing :ref:`atlasproject-custom-resource`. This
   parameter applies only to custom roles that belong to projects
   managed by the same instance |ak8so|.

   For custom roles that belong to projects managed by either:

   - a different instance of |ak8so|
   - tooling other than |ak8so|

   use ``spec.externalProjectRef.id``.

   A custom role can only belong to one project. To define the same
   custom role for multiple projects, create custom resource
   definitions for each project.

.. setting:: spec.projectRef.namespace

   *Type*: string

   *Conditional*

   Namespace in which the :ref:`atlasproject-custom-resource`
   specified in ``spec.projectRef.name`` exists.

   For custom roles that belong to projects managed by either:

   - a different instance of |ak8so|
   - tooling other than |ak8so|

   do not set this parameter.

.. setting:: spec.role.actions

   *Type*: array

   *Optional*
 
   List of objects that represents the individual
   :manual:`privilege actions </reference/privilege-actions/>`
   that the role grants.

.. setting:: spec.role.actions.name

   *Type*: string

   *Optional*

   Label that identifies the privilege action. For a complete list of
   actions available in the {+atlas-admin-api+}, see
   :atlas:`/reference/custom-role-actions`.

.. setting:: spec.role.actions.resources

   *Type*: array

   *Optional*

   List of objects that indicate a database and collection
   on which the action is granted, or indicates that the
   action is granted on the :manual:`cluster resource
   </reference/resource-document/#cluster-resource>`.

.. setting:: spec.role.actions.resources.cluster

   *Type*: boolean

   *Optional*

   Flag that indicates that the action is granted on the 
   :manual:`cluster resource 
   </reference/resource-document/#cluster-resource>`.

   .. note::

      This parameter is mutually exclusive with the
      :setting:`spec.role.actions.resources.collection` and
      :setting:`spec.role.actions.resources.database` parameters.

.. setting:: spec.role.actions.resources.collection

   *Type*: string

   *Optional*

   Human-readable label that identifies the collection on which the 
   action is granted. If this value is an empty string, the action is 
   granted on all collections within the database specified in the 
   :setting:`spec.role.actions.resources.database` parameter.

   .. note::

      This parameter is mutually exclusive with the
      :setting:`spec.role.actions.resources.cluster` parameter.

.. setting:: spec.role.actions.resources.database

   *Type*: string

   *Optional*

   Human-readable label that indentifies the database on which the 
   action is granted.

   .. note::

      This parameter is mutually exclusive with the
      :setting:`spec.role.actions.resources.cluster` parameter.

.. setting:: spec.role.inheritedRoles

   *Type*: array

   *Optional*

   List of objects that represent key-value pairs that 
   indicate the inherited role and the database on which the role is 
   granted.

.. setting:: spec.role.inheritedRoles.database

   *Type*: string

   *Optional*

   Human-readable label that identifies the database on which the 
   inherited role is granted.

   .. note::

      This value should be ``admin`` for all roles except
      :manual:`read </reference/built-in-roles/#read>` and
      :manual:`readWrite </reference/built-in-roles/#readWrite>`.

.. setting:: spec.role.inheritedRoles.name

   *Type*: string

   *Optional*

   Label that uniquely identifies the inherited role. You can 
   specify another custom role or a :manual:`built-in role 
   </reference/built-in-roles/>`.

