# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: 2014-04-08 16:25+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# d43434eb188f4ea198e5cd52ed01d5cd
#: ../source/faq/developers.txt:5
msgid "FAQ: MongoDB for Application Developers"
msgstr ""

# 5bf4d11f22874b388162e2e868c4a762
#: ../source/faq/developers.txt:9
msgid ""
"This document answers common questions about application development "
"using MongoDB."
msgstr ""

# 14ee89bd9f1f4d97a9b5a131aadaa269
#: ../source/faq/developers.txt:12
msgid ""
"If you don't find the answer you're looking for, check the :doc:`complete"
" list of FAQs </faq>` or post your question to the `MongoDB User Mailing "
"List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

# 68267ad91e6d439597439598c7532980
#: ../source/faq/developers.txt:19
msgid "What is a namespace in MongoDB?"
msgstr ""

# d9903bec44af47079b55f4dfc1e66769
#: ../source/faq/developers.txt:21
msgid ""
"A \"namespace\" is the concatenation of the :term:`database` name and the"
" :term:`collection` names [#indexes-are-namespaces]_ with a period "
"character in between."
msgstr ""

# df79455d1d6044d3b33e133d4ae6d9f2
#: ../source/faq/developers.txt:25
msgid ""
"Collections are containers for documents that share one or more indexes. "
"Databases are groups of collections stored on disk using a single set of "
"data files. [#ns-limit]_"
msgstr ""

# c13fc43ce349470c9705cf535a09c2ff
#: ../source/faq/developers.txt:29
msgid ""
"For an example ``acme.users`` namespace, ``acme`` is the database name "
"and ``users`` is the collection name. Period characters **can** occur in "
"collection names, so that ``acme.user.history`` is a valid namespace, "
"with ``acme`` as the database name, and ``user.history`` as the "
"collection name."
msgstr ""

# 10d82cc940634dfbb6a821566082f7f8
#: ../source/faq/developers.txt:35
msgid ""
"While data models like this appear to support nested collections, the "
"collection namespace is flat, and there is no difference from the "
"perspective of MongoDB between ``acme``, ``acme.users``, and "
"``acme.records``."
msgstr ""

# cdc655e095cc4fcd876a43cb61eb3308
#: ../source/faq/developers.txt:40
msgid "Each index also has its own namespace."
msgstr ""

# bcc75114f9a34c09983862e1c7ff2aea
#: ../source/faq/developers.txt:42
msgid ""
"MongoDB database have a configurable limit on the :limit:`number of "
"namespaces <Number of Namespaces>` in a database."
msgstr ""

# d98b564bb3344afb954369d6b8215dc6
#: ../source/faq/developers.txt:46
msgid "If you remove a document, does MongoDB remove it from disk?"
msgstr ""

# 0a9afc01e6084ec49526b7405d0246f6
# 356efca4bedb4982824c4444feaac3df
#: ../source/faq/developers.txt:48 ../source/faq/developers.txt:125
msgid "Yes."
msgstr ""

# 9b68bbf916584ca0bf465016bd82564e
#: ../source/faq/developers.txt:50
msgid ""
"When you use :method:`~db.collection.remove()`, the object will no longer"
" exist in MongoDB's on-disk data storage."
msgstr ""

# 1578393abb514abd916516bbfa3ede54
#: ../source/faq/developers.txt:54
msgid "When does MongoDB write updates to disk?"
msgstr ""

# 0768c3957f9245ed8a8f520fcdb28d7b
#: ../source/faq/developers.txt:56
msgid ""
"MongoDB flushes writes to disk on a regular interval. In the default "
"configuration, MongoDB writes data to the main data files on disk every "
"60 seconds and commits the :term:`journal` roughly every 100 "
"milliseconds. These values are configurable with the "
":setting:`~storage.journal.commitIntervalMs` and "
":setting:`~storage.syncPeriodSecs`."
msgstr ""

# 2fb2e391da16473abf39a318bfa680d2
#: ../source/faq/developers.txt:62
msgid ""
"These values represent the *maximum* amount of time between the "
"completion of a write operation and the point when the write is durable "
"in the journal, if enabled, and when MongoDB flushes data to the disk. In"
" many cases MongoDB and the operating system flush data to disk more "
"frequently, so that the above values represents a theoretical maximum."
msgstr ""

# c06c726a4a304b02ba4f0d8244e2cc23
#: ../source/faq/developers.txt:69
msgid ""
"However, by default, MongoDB uses a \"lazy\" strategy to write to disk. "
"This is advantageous in situations where the database receives a thousand"
" increments to an object within one second, MongoDB only needs to flush "
"this data to disk once. In addition to the aforementioned configuration "
"options, you can also use :dbcommand:`fsync` and :doc:`/reference/write-"
"concern` to modify this strategy."
msgstr ""

# 9a3b1a1a43ac4163b595fdd6654cefdb
#: ../source/faq/developers.txt:77
msgid "How do I do transactions and locking in MongoDB?"
msgstr ""

# bf1f12ab8e264e3a9efb3a6cc17bb7ea
#: ../source/faq/developers.txt:79
msgid ""
"MongoDB does not have support for traditional locking or complex "
"transactions with rollback. MongoDB aims to be lightweight, fast, and "
"predictable in its performance. This is similar to the MySQL MyISAM "
"autocommit model. By keeping transaction support extremely simple, "
"MongoDB can provide greater performance especially for :term:`partitioned"
" <partition>` or :term:`replicated <replication>` systems with a number "
"of database server processes."
msgstr ""

# 8a4be507c755432580082608ae93ac33
#: ../source/faq/developers.txt:87
msgid ""
"MongoDB *does* have support for atomic operations *within* a single "
"document. Given the possibilities provided by nested documents, this "
"feature provides support for a large number of use-cases."
msgstr ""

# c86c2b42bc454ae491fd5ea08bbb0b85
#: ../source/faq/developers.txt:91
msgid "The :doc:`/core/write-operations-atomicity` page."
msgstr ""

# 27db0867d23d4acd8f33236bc33492cf
#: ../source/faq/developers.txt:94
msgid "How do you aggregate data with MongoDB?"
msgstr ""

# 18a42706e6734ebd829b7fe86a38da7f
#: ../source/faq/developers.txt:96
msgid ""
"In version 2.1 and later, you can use the new :doc:`aggregation framework"
" </core/aggregation>`, with the :dbcommand:`aggregate` command."
msgstr ""

# 24d96d119ef4451b91a52fc7f3b49b26
#: ../source/faq/developers.txt:100
msgid ""
"MongoDB also supports :term:`map-reduce` with the :dbcommand:`mapReduce` "
"command, as well as basic aggregation with the :dbcommand:`group`, "
":dbcommand:`count`, and :dbcommand:`distinct`. commands."
msgstr ""

# 2d9fda175fb24747b1ec48a0b68ad594
#: ../source/faq/developers.txt:105
msgid "The :doc:`/aggregation` page."
msgstr ""

# 09faa9a0d10a4029a9229ff92d82dae4
#: ../source/faq/developers.txt:108
msgid "Why does MongoDB log so many \"Connection Accepted\" events?"
msgstr ""

# 5b81e7c13a7f4340a24a80de5a411b64
#: ../source/faq/developers.txt:110
msgid ""
"If you see a very large number connection and re-connection messages in "
"your MongoDB log, then clients are frequently connecting and "
"disconnecting to the MongoDB server. This is normal behavior for "
"applications that do not use request pooling, such as CGI. Consider using"
" FastCGI, an Apache Module, or some other kind of persistent application "
"server to decrease the connection overhead."
msgstr ""

# 94de096428a04c3abe99798b5d5a20cc
#: ../source/faq/developers.txt:117
msgid ""
"If these connections do not impact your performance you can use the run-"
"time :setting:`~systemLog.quiet` option or the command-line option "
":option:`--quiet <mongod --quiet>` to suppress these messages from the "
"log."
msgstr ""

# 1787ca7c5b5f4932b0a0eb6bc52db5ee
#: ../source/faq/developers.txt:123
msgid "Does MongoDB run on Amazon EBS?"
msgstr ""

# 1d9803d99ce94e5190a338a8c1e3d6d8
#: ../source/faq/developers.txt:127
msgid ""
"MongoDB users of all sizes have had a great deal of success using MongoDB"
" on the EC2 platform using EBS disks."
msgstr ""

# 50605b29c54a4814bd3cdd2077e76871
#: ../source/faq/developers.txt:130
msgid ":ecosystem:`Amazon EC2 </platforms/amazon-ec2>`"
msgstr ""

# e8ea1bdc303e4fd68a03358696af2560
#: ../source/faq/developers.txt:133
msgid "Why are MongoDB's data files so large?"
msgstr ""

# 8aaaff38bdb0463ab99c67f0b11e256e
#: ../source/faq/developers.txt:135
msgid ""
"MongoDB aggressively preallocates data files to reserve space and avoid "
"file system fragmentation. You can use the :setting:`storage.smallFiles` "
"setting to modify the file preallocation strategy."
msgstr ""

# b66740989681494fa41c9bab33314b6f
#: ../source/faq/developers.txt:139
msgid ":ref:`faq-disk-size`"
msgstr ""

# b6480ddf539041388ad4fe1933b9f50c
#: ../source/faq/developers.txt:144
msgid "How do I optimize storage use for small documents?"
msgstr ""

# 4bf159cd814a4543b007e1783ab76392
#: ../source/faq/developers.txt:146
msgid ""
"Each MongoDB document contains a certain amount of overhead. This "
"overhead is normally insignificant but becomes significant if all "
"documents are just a few bytes, as might be the case if the documents in "
"your collection only have one or two fields."
msgstr ""

# aa1604c3b06343b2b5c37d9a9c82dc9a
#: ../source/faq/developers.txt:151
msgid ""
"Consider the following suggestions and strategies for optimizing storage "
"utilization for these collections:"
msgstr ""

# 7b2251a0955e4199a45bd597b4c14fb5
#: ../source/faq/developers.txt:154
msgid "Use the ``_id`` field explicitly."
msgstr ""

# 06512f072c894efe9428cc1872add338
#: ../source/faq/developers.txt:156
msgid ""
"MongoDB clients automatically add an ``_id`` field to each document and "
"generate a unique 12-byte :term:`ObjectId` for the ``_id`` field. "
"Furthermore, MongoDB always indexes the ``_id`` field. For smaller "
"documents this may account for a significant amount of space."
msgstr ""

# f9a575b70c3e4229a6d5bbd735c14491
#: ../source/faq/developers.txt:162
msgid ""
"To optimize storage use, users can specify a value for the ``_id`` field "
"explicitly when inserting documents into the collection. This strategy "
"allows applications to store a value in the ``_id`` field that would have"
" occupied space in another portion of the document."
msgstr ""

# 70b031fd3afa42c3894ef041101db24d
#: ../source/faq/developers.txt:167
msgid ""
"You can store any value in the ``_id`` field, but because this value "
"serves as a primary key for documents in the collection, it must uniquely"
" identify them. If the field's value is not unique, then it cannot serve "
"as a primary key as there would be collisions in the collection."
msgstr ""

# 351d6929b49049a88a4a311f98004476
#: ../source/faq/developers.txt:173
msgid "Use shorter field names."
msgstr ""

# efba5b74e5ce4efabe134fd542cb3f0d
#: ../source/faq/developers.txt:175
msgid ""
"MongoDB stores all field names in every document. For most documents, "
"this represents a small fraction of the space used by a document; "
"however, for small documents the field names may represent a "
"proportionally large amount of space. Consider a collection of documents "
"that resemble the following:"
msgstr ""

# 4336d6cbc5b0475c81ace557c47e941f
#: ../source/faq/developers.txt:185
msgid ""
"If you shorten the field named ``last_name`` to ``lname`` and the field "
"named ``best_score`` to ``score``, as follows, you could save 9 bytes per"
" document."
msgstr ""

# fb85d78c34e94fd393fbb88d726beb9f
#: ../source/faq/developers.txt:193
msgid ""
"Shortening field names reduces expressiveness and does not provide "
"considerable benefit for larger documents and where document overhead is "
"not of significant concern. Shorter field names do not reduce the size of"
" indexes, because indexes have a predefined structure."
msgstr ""

# 4969ffd83d4a4e4bba1b6ddc43b39e38
#: ../source/faq/developers.txt:199
msgid "In general it is not necessary to use short field names."
msgstr ""

# 0d616bff55ce4a249f11e6ad257cacc2
#: ../source/faq/developers.txt:201
msgid "Embed documents."
msgstr ""

# 0517b111cc494b46a8681aa955ec6534
#: ../source/faq/developers.txt:203
msgid ""
"In some cases you may want to embed documents in other documents and save"
" on the per-document overhead."
msgstr ""

# fd4ed903970642feac940f5761ee1877
#: ../source/faq/developers.txt:209
msgid "When should I use GridFS?"
msgstr ""

# 6c6907a82376418e8c1e0e6f5fce82c9
#: ../source/faq/developers.txt:211
msgid ""
"For documents in a MongoDB collection, you should always use "
":term:`GridFS` for storing files larger than 16 MB."
msgstr ""

# 1bc7529b208748fca37c81cc4e1a7035
#: ../source/faq/developers.txt:214
msgid ""
"In some situations, storing large files may be more efficient in a "
"MongoDB database than on a system-level filesystem."
msgstr ""

# 22f71242d9354cef8ee21d147bc07095
#: ../source/faq/developers.txt:217
msgid ""
"If your filesystem limits the number of files in a directory, you can use"
" GridFS to store as many files as needed."
msgstr ""

# ea2b5e19ffd74a4cbc832794d454bc88
#: ../source/faq/developers.txt:220
msgid ""
"When you want to keep your files and metadata automatically synced and "
"deployed across a number of systems and facilities.  When using "
":ref:`geographically distributed replica sets <replica-set-geographical-"
"distribution>` MongoDB can distribute files and their metadata "
"automatically to a number of :program:`mongod` instances and facilities."
msgstr ""

# 07902e62152645688b0583db4279b760
#: ../source/faq/developers.txt:227
msgid ""
"When you want to access information from portions of large files without "
"having to load whole files into memory, you can use GridFS to recall "
"sections of files without reading the entire file into memory."
msgstr ""

# fdfa8fb3fdb2450faa8861b19600f5ac
#: ../source/faq/developers.txt:232
msgid ""
"Do not use GridFS if you need to update the content of the entire file "
"atomically. As an alternative you can store multiple versions of each "
"file and specify the current version of the file in the metadata. You can"
" update the metadata field that indicates \"latest\" status in an atomic "
"update after uploading the new version of the file, and later remove "
"previous versions if needed."
msgstr ""

# 087c20a9a13943629850740d53fe8f60
#: ../source/faq/developers.txt:239
msgid ""
"Furthermore, if your files are all smaller the 16 MB :limit:`BSON "
"Document Size` limit, consider storing the file manually within a single "
"document. You may use the BinData data type to store the binary data. See"
" your :doc:`drivers </applications/drivers>` documentation for details on"
" using BinData."
msgstr ""

# 289d010c1b2a4c53a26d429eb0c7d0f3
#: ../source/faq/developers.txt:245
msgid "For more information on GridFS, see :doc:`/core/gridfs`."
msgstr ""

# 8fdd5e6e6c4d438eab166e084bbce084
#: ../source/faq/developers.txt:248
msgid "How does MongoDB address SQL or Query injection?"
msgstr ""

# f69d6f5a935040c1910931c2ad81c803
#: ../source/faq/developers.txt:251
msgid "BSON"
msgstr ""

# 21035c618c4a4b408219d0ee4e5216c0
#: ../source/faq/developers.txt:253
msgid ""
"As a client program assembles a query in MongoDB, it builds a BSON "
"object, not a string. Thus traditional SQL injection attacks are not a "
"problem. More details and some nuances are covered below."
msgstr ""

# 27977d0b96334b82b2e776c6f14a0388
#: ../source/faq/developers.txt:257
msgid ""
"MongoDB represents queries as :term:`BSON` objects. Typically "
":doc:`client libraries </applications/drivers>` provide a convenient, "
"injection free, process to build these objects. Consider the following "
"C++ example:"
msgstr ""

# 88822f3166d14c6ab42579da0e726a80
#: ../source/faq/developers.txt:267
msgid ""
"Here, ``my_query`` then will have a value such as ``{ name : \"Joe\" }``."
" If ``my_query`` contained special characters, for example ``,``, ``:``, "
"and ``{``, the query simply wouldn't match any documents. For example, "
"users cannot hijack a query and convert it to a delete."
msgstr ""

# 5d25a60a163045f29128d1c301de647b
#: ../source/faq/developers.txt:274
msgid "JavaScript"
msgstr ""

# 1c143d807784460fbebc1b55083f81b8
#: ../source/includes/fact-disable-javascript-with-noscript.rst:1
msgid ""
"You can disable all server-side execution of JavaScript, by passing the "
":option:`--noscripting <mongod --noscripting>` option on the command line"
" or setting :setting:`security.javascriptEnabled` in a configuration "
"file."
msgstr ""

# 199ce09a628b49d382fad4da22d99c05
#: ../source/faq/developers.txt:280
msgid ""
"All of the following MongoDB operations permit you to run arbitrary "
"JavaScript expressions directly on the server:"
msgstr ""

# 8fb9ae9152074cc5be28eb6421bc2269
#: ../source/faq/developers.txt:283
msgid ":query:`$where`"
msgstr ""

# 72618ae085b74519af7d0d384837f066
#: ../source/faq/developers.txt:284
msgid ":dbcommand:`mapReduce`"
msgstr ""

# a562a4513115480b9d96dab9aeed754f
#: ../source/faq/developers.txt:285
msgid ":dbcommand:`group`"
msgstr ""

# aef3b74f97674e63813832ccd1f91ae7
#: ../source/faq/developers.txt:287
msgid ""
"You must exercise care in these cases to prevent users from submitting "
"malicious JavaScript."
msgstr ""

# a4d4cb3f8db24c89a836befa51973b63
#: ../source/faq/developers.txt:290
msgid ""
"Fortunately, you can express most queries in MongoDB without JavaScript "
"and for queries that require JavaScript, you can mix JavaScript and non-"
"JavaScript in a single query. Place all the user-supplied fields directly"
" in a :term:`BSON` field and pass JavaScript code to the :query:`$where` "
"field."
msgstr ""

# b905d60eabb941ee92871d959a3a444f
#: ../source/faq/developers.txt:296
msgid ""
"If you need to pass user-supplied values in a :query:`$where` clause, you"
" may escape these values with the ``CodeWScope`` mechanism. When you set "
"user-submitted values as variables in the scope document, you can avoid "
"evaluating them on the database server."
msgstr ""

# 130476d7ec404a2589fb748d1090abe2
#: ../source/faq/developers.txt:304
msgid "Dollar Sign Operator Escaping"
msgstr ""

# b1acfcfc807a49f59d306a2655f54a9d
#: ../source/faq/developers.txt:306
msgid ""
"Field names in MongoDB's query language have semantic meaning. The dollar"
" sign (i.e ``$``) is a reserved character used to represent "
":doc:`operators </reference/operator>` (i.e. :update:`$inc`.) Thus, you "
"should ensure that your application's users cannot inject operators into "
"their inputs."
msgstr ""

# bea29e5384ff4ad7b86da8a83fd9c98f
#: ../source/faq/developers.txt:312
msgid ""
"In some cases, you may wish to build a BSON object with a user-provided "
"key.  In these situations, keys will need to substitute the reserved "
"``$`` and ``.`` characters. Any character is sufficient, but consider "
"using the Unicode full width equivalents: ``U+FF04`` (i.e. \"＄\") and "
"``U+FF0E`` (i.e. \"．\")."
msgstr ""

# 4381152660824800a47a60f915542022
#: ../source/faq/developers.txt:318
msgid "Consider the following example:"
msgstr ""

# c51c9ac3555d4113beb44a1b8be6fe3a
#: ../source/faq/developers.txt:324
msgid ""
"The user may have supplied a ``$`` value in the ``a_key`` value. At the "
"same time, ``my_object`` might be ``{ $where : \"things\" }``. Consider "
"the following cases:"
msgstr ""

# fa2d2bf614784a358810c930842b20e2
#: ../source/faq/developers.txt:328
msgid ""
"**Insert**. Inserting this into the database does no harm. The insert "
"process does not evaluate the object as a query."
msgstr ""

# 548a4f268ece4ed3aab524fe94ccbd23
#: ../source/faq/developers.txt:333
msgid ""
"MongoDB client drivers, if properly implemented, check for reserved "
"characters in keys on inserts."
msgstr ""

# 024cf42087024dbfb20010cc3c2a7c50
#: ../source/faq/developers.txt:336
msgid ""
"**Update**.  The :method:`~db.collection.update()` operation permits "
"``$`` operators in the update argument but does not support the "
":query:`$where` operator. Still, some users may be able to inject "
"operators that can manipulate a single document only. Therefore your "
"application should escape keys, as mentioned above, if reserved "
"characters are possible."
msgstr ""

# 79682fe23c4349beac427866e36fb3c6
#: ../source/faq/developers.txt:343
msgid ""
"**Query** Generally this is not a problem for queries that resemble ``{ x"
" : user_obj }``: dollar signs are not top level and have no effect. "
"Theoretically it may be possible for the user to build a query "
"themselves. But checking the user-submitted content for ``$`` characters "
"in key names may help protect against this kind of injection."
msgstr ""

# 11ac464988614485873d8e3c9ef11d48
#: ../source/faq/developers.txt:351
msgid "Driver-Specific Issues"
msgstr ""

# 2447009fc3054dc68dbc299024205998
#: ../source/faq/developers.txt:353
msgid ""
"See the \"`PHP MongoDB Driver Security Notes "
"<http://us.php.net/manual/en/mongo.security.php>`_\" page in the PHP "
"driver documentation for more information"
msgstr ""

# 36b87ca1c2d54778a4b2f39777402cf0
#: ../source/faq/developers.txt:360
msgid "How does MongoDB provide concurrency?"
msgstr ""

# 22a3d6c60db04dc5ac13defbb1a4ecdc
#: ../source/faq/developers.txt:362
msgid ""
"MongoDB implements a readers-writer lock. This means that at any one "
"time, only one client may be writing or any number of clients may be "
"reading, but that reading and writing cannot occur simultaneously."
msgstr ""

# 48456cb1047049b8b45a01b2af920f6c
#: ../source/faq/developers.txt:367
msgid ""
"In standalone and :term:`replica sets <replica set>` the lock's scope "
"applies to a single :program:`mongod` instance or :term:`primary` "
"instance. In a sharded cluster, locks apply to each individual shard, not"
" to the whole cluster."
msgstr ""

# cd770947829f4fa7b3e1c0ff7f06a0aa
#: ../source/faq/developers.txt:372
msgid "For more information, see :doc:`/faq/concurrency`."
msgstr ""

# eec25096e7904753a64e6f5071b7c34a
#: ../source/faq/developers.txt:377
msgid "What is the compare order for BSON types?"
msgstr ""

# 0662c084d9694e299631f39f7e380e10
#: ../source/faq/developers.txt:379
msgid ""
"MongoDB permits documents within a single collection to have fields with "
"different :term:`BSON` types. For instance, the following documents may "
"exist within a single collection."
msgstr ""

# b577281e9a824ddb84a38ae434de50f2
#: ../source/includes/fact-sort-order.rst:1
msgid ""
"When comparing values of different :term:`BSON` types, MongoDB uses the "
"following comparison order, from lowest to highest:"
msgstr ""

# a76dbf0c1f424b5c87fbccce9406ef63
#: ../source/includes/fact-sort-order.rst:4
msgid "MinKey (internal type)"
msgstr ""

# 2725d6a881774f6ab990e8d5e528877a
#: ../source/includes/fact-sort-order.rst:5
msgid "Null"
msgstr ""

# 1e7dc4daab9c443e956a4180c1a6a550
#: ../source/includes/fact-sort-order.rst:6
msgid "Numbers (ints, longs, doubles)"
msgstr ""

# a92c78ef548d47b69605554b453a7263
#: ../source/includes/fact-sort-order.rst:7
msgid "Symbol, String"
msgstr ""

# 5d43ad63ac654c7c9dfba4d8e9ce8148
#: ../source/includes/fact-sort-order.rst:8
msgid "Object"
msgstr ""

# 397135a6f5234af99652b9d675c636a8
#: ../source/includes/fact-sort-order.rst:9
msgid "Array"
msgstr ""

# ff1894ebcccf4fc3948cf0befa7ca6c2
#: ../source/includes/fact-sort-order.rst:10
msgid "BinData"
msgstr ""

# 00745a31e07a45da8ffe760dc534632a
#: ../source/includes/fact-sort-order.rst:11
msgid "ObjectId"
msgstr ""

# ef11a6e1f5d54b209ad929f9405320c8
#: ../source/includes/fact-sort-order.rst:12
msgid "Boolean"
msgstr ""

# 15cf56d0c1ba4619880374c9df086202
#: ../source/includes/fact-sort-order.rst:13
msgid "Date"
msgstr ""

# ac3245ab51af4e89ab7d2f967bdb0c93
#: ../source/includes/fact-sort-order.rst:14
msgid "Timestamp"
msgstr ""

# 1616b25600b349f990c63b45afe32fed
#: ../source/includes/fact-sort-order.rst:15
msgid "Regular Expression"
msgstr ""

# 6a7742e04350486b8105e431d247a10e
#: ../source/includes/fact-sort-order.rst:16
msgid "MaxKey (internal type)"
msgstr ""

# 7bf96d2cf97849799240b274e054bca0
#: ../source/includes/fact-sort-order.rst:18
msgid ""
"MongoDB treats some types as equivalent for comparison purposes. For "
"instance, numeric types undergo conversion before comparison."
msgstr ""

# 566b750312e8484289a2de20c09f06a2
#: ../source/includes/fact-sort-order.rst:21
msgid ""
"Date objects sort before Timestamp objects. Previously Date and Timestamp"
" objects sorted together."
msgstr ""

# 64ab459cd3184407be5db4d6f4b36537
#: ../source/includes/fact-sort-order.rst:25
msgid ""
"The comparison treats a non-existent field as it would an empty BSON "
"Object. As such, a sort on the ``a`` field in documents ``{ }`` and ``{ "
"a: null }`` would treat the documents as equivalent in sort order."
msgstr ""

# a1145f5878044299bc6d79ae260fd2ef
#: ../source/includes/fact-sort-order.rst:29
msgid ""
"With arrays, a less-than comparison or an ascending sort compares the "
"smallest element of arrays, and a greater-than comparison or a descending"
" sort compares the largest element of the arrays. As such, when comparing"
" a field whose value is a single-element array (e.g. ``[ 1 ]``) with non-"
"array fields (e.g. ``2``), the comparison is between ``1`` and ``2``. A "
"comparison of an empty array (e.g. ``[ ]``) treats the empty array as "
"less than ``null`` or a missing field."
msgstr ""

# d53f5affbd184d61b8b3081145162c7f
#: ../source/includes/fact-sort-order.rst:37
msgid "MongoDB sorts ``BinData`` in the following order:"
msgstr ""

# 00d19fd42a034cd2a16d0ec9bfd61cc7
#: ../source/includes/fact-sort-order.rst:39
msgid "First, the length or size of the data."
msgstr ""

# faba3c8ef9374724acfa70020d746f1c
#: ../source/includes/fact-sort-order.rst:41
msgid "Then, by the BSON one-byte subtype."
msgstr ""

# 8b63b322775d4c2ab49dd5d3b779a1ac
#: ../source/includes/fact-sort-order.rst:43
msgid "Finally, by the data, performing a byte-by-byte comparison."
msgstr ""

# 75c40286b054459ba9a3ab866dcdde2f
#: ../source/faq/developers.txt:390
msgid "Consider the following :program:`mongo` example:"
msgstr ""

# 79ee149c20c34d6389481446f02034cf
#: ../source/faq/developers.txt:405
msgid ""
"The :query:`$type` operator provides access to :term:`BSON type <BSON "
"types>` comparison in the MongoDB query syntax. See the documentation on "
":term:`BSON types` and the :query:`$type` operator for additional "
"information."
msgstr ""

# 1b694241726a4a228f7dcd7a9e2ce099
#: ../source/includes/warning-mixing-types.rst:3
msgid ""
"Data models that associate a field name with different data types within "
"a collection are *strongly* discouraged."
msgstr ""

# c20dc64821f242e3b726fb40f6918110
#: ../source/includes/warning-mixing-types.rst:6
msgid ""
"Without internal consistency complicates application code, and can lead "
"to unnecessary complexity for application developers."
msgstr ""

# 77934bcb7e3b41c1bb4bead87b164305
#: ../source/faq/developers.txt:414
msgid ""
"The :doc:`Tailable Cursors </tutorial/create-tailable-cursor>` page for "
"an example of a C++ use of ``MinKey``."
msgstr ""

# 80dd354f1a434a15b5288d0c48e71461
#: ../source/faq/developers.txt:426
msgid "When multiplying values of mixed types, what type conversion rules apply?"
msgstr ""

# dba4ece880be442895f33b3b518ac3b0
#: ../source/faq/developers.txt:428
msgid ""
"The :update:`$mul` multiplies the numeric value of a field by a number. "
"For multiplication with values of mixed numeric types (32-bit integer, "
"64-bit integer, float), the following type conversion rules apply:"
msgstr ""

# b4093b613d1e4284a835d68b487a79b6
#: ../source/faq/developers.txt:437
msgid "32-bit Integer"
msgstr ""

# 5877041e5f0241008603b7aa6c260dc4
# 068fd1eb14064fcc9273829574563715
# 32e80d01994246329cdf5797f9485edc
# e8cc19b9d5b141d9a561787e5c7956c0
#: ../source/faq/developers.txt:438 ../source/faq/developers.txt:443
#: ../source/faq/developers.txt:447 ../source/faq/developers.txt:448
msgid "64-bit Integer"
msgstr ""

# e00bdb61ade0461eb9c218f4e8617928
# f163fb8ee8b44571b1550677ab54797b
# 7999ed83f3dd41a1b4cd85441c20f15f
# a9e7b8bf6a914a1a8293bdb2e3336ded
# a08eee4ea115404cac349b61e7286b93
# 625808d036c74471867c679e2a5810c9
#: ../source/faq/developers.txt:439 ../source/faq/developers.txt:444
#: ../source/faq/developers.txt:449 ../source/faq/developers.txt:452
#: ../source/faq/developers.txt:453 ../source/faq/developers.txt:454
msgid "Float"
msgstr ""

# 917efdaf3763482489ff72fc24c4268f
#: ../source/faq/developers.txt:441
msgid "**32-bit Integer**"
msgstr ""

# 94bc2fc23ea04a278286bc6aacddb828
#: ../source/faq/developers.txt:442
msgid "32-bit or 64-bit Integer"
msgstr ""

# a09e5260164e47aab74dfed213b840ed
#: ../source/faq/developers.txt:446
msgid "**64-bit Integer**"
msgstr ""

# 91470227f88b4f70b684ad7a70a34051
#: ../source/faq/developers.txt:451
msgid "**Float**"
msgstr ""

# 5d0372da668544ee8e3f38eb68a31c7b
#: ../source/faq/developers.txt:458
msgid ""
"If the product of two 32-bit integers exceeds the maximum value for a "
"32-bit integer, the result is a 64-bit integer."
msgstr ""

# 357457b738244df2a1d738e99de0dbc3
#: ../source/faq/developers.txt:461
msgid ""
"Integer operations of any type that exceed the maximum value for a 64-bit"
" integer produce an error."
msgstr ""

# db6b72bbafbb49eb93d527d2df08e4fe
#: ../source/faq/developers.txt:467
msgid "How do I query for fields that have null values?"
msgstr ""

# 8f18efe9a0f843fba2caf2dc4cf2a6e2
#: ../source/faq/developers.txt:469
msgid "Different query operators treat ``null`` values differently."
msgstr ""

# deac92e5070346cd9133df28fcb34fbc
#: ../source/faq/developers.txt:471
msgid "Consider the collection ``test`` with the following documents:"
msgstr ""

# 37629e375efe4157a36940cc9ad1f7e4
#: ../source/faq/developers.txt:481
msgid "Comparison with Null"
msgstr ""

# ee58d4ad03bd48a6990736b55b1e0e0d
#: ../source/faq/developers.txt:483
msgid ""
"The ``{ cancelDate : null }`` query matches documents that either contain"
" the ``cancelDate`` field whose value is ``null`` *or* that do not "
"contain the ``cancelDate`` field. If the queried index is :ref:`sparse "
"<index-type-sparse>`, however, then the query will only match ``null`` "
"values, not missing fields."
msgstr ""

# 73643d04ad034e75afeaf3c8fb943c7c
#: ../source/faq/developers.txt:489
msgid ""
"If using the sparse index results in an incomplete result, MongoDB will "
"not use the index unless a :method:`~cursor.hint()` explicitly specifies "
"the index. See :ref:`index-type-sparse` for more information."
msgstr ""

# 51fac6bcb1344690b587ed7266e0ca07
#: ../source/faq/developers.txt:494
msgid "Given the following query:"
msgstr ""

# f7a9224a2c0c40a7bb74aa37c4fe8c6f
#: ../source/faq/developers.txt:500
msgid "The query returns both documents:"
msgstr ""

# f007585457b945fdb6f4b557c7b30c1d
#: ../source/faq/developers.txt:508
msgid "Type Check"
msgstr ""

# a7e6e5d0abd14ab4b35c5e978cd9f88c
#: ../source/faq/developers.txt:510
msgid ""
"The ``{ cancelDate : { $type: 10 } }`` query matches documents that "
"contains the ``cancelDate`` field whose value is ``null`` *only*; i.e. "
"the value of the ``cancelDate`` field is of BSON Type ``Null`` (i.e. "
"``10``) :"
msgstr ""

# e80fc0a692f7490284c4b09d140981d6
#: ../source/faq/developers.txt:519
msgid "The query returns only the document that contains the ``null`` value:"
msgstr ""

# 1ebdd858c33f4a12a9b15d68baaee850
#: ../source/faq/developers.txt:526
msgid "Existence Check"
msgstr ""

# 2a0f1120749d447aae73fe81fd10e697
#: ../source/faq/developers.txt:528
msgid ""
"The ``{ cancelDate : { $exists: false } }`` query matches documents that "
"do not contain the ``cancelDate`` field:"
msgstr ""

# bc1aed978461440595f90e94cae552f9
#: ../source/faq/developers.txt:535
msgid ""
"The query returns only the document that does *not* contain the "
"``cancelDate`` field:"
msgstr ""

# 1d41954ae56e414b9b7d51f2fc65dd57
#: ../source/faq/developers.txt:542
msgid ""
"The reference documentation for the :query:`$type` and :query:`$exists` "
"operators."
msgstr ""

# 0792c3d6bfaa4330a53d7af4dcd417f7
#: ../source/faq/developers.txt:548
msgid "Are there any restrictions on the names of Collections?"
msgstr ""

# 2002886ead514c4b82e31cd3a90a6f59
#: ../source/faq/developers.txt:550
msgid "Collection names can be any UTF-8 string with the following exceptions:"
msgstr ""

# f64d41000cf4460abc032b890b932836
#: ../source/faq/developers.txt:553
msgid "A collection name should begin with a letter or an underscore."
msgstr ""

# f31b5dc22d6e4807ae412b8573db2886
#: ../source/faq/developers.txt:555
msgid "The empty string (``\"\"``) is not a valid collection name."
msgstr ""

# 23985310bb6b482987262b671e524742
#: ../source/faq/developers.txt:557
msgid "Collection names cannot contain the ``$`` character. (version 2.2 only)"
msgstr ""

# 3f67ba51bdb246cc9890076d5b6a4af5
#: ../source/faq/developers.txt:559
msgid "Collection names cannot contain the null character: ``\\0``"
msgstr ""

# 7a5d9deed66c4d8fb33b867e6bdd4694
#: ../source/faq/developers.txt:561
msgid ""
"Do not name a collection using the ``system.`` prefix. MongoDB reserves "
"``system.`` for system collections."
msgstr ""

# 0b4f24570b454de6992e6266cd742c29
#: ../source/includes/fact-collection-namespace-limit.rst:1
msgid ""
"The maximum length of the collection namespace, which includes the "
"database name, the dot (``.``) separator, and the collection name (i.e. "
"``<database>.<collection>``), is 120 bytes."
msgstr ""

# bebd3cf859074652bf8cf45f3bb42af2
#: ../source/faq/developers.txt:567
msgid ""
"However, for maximum flexibility, collections should have names less than"
" 80 characters."
msgstr ""

# 59f7435d712142b38dbc15c6fc74a0e0
#: ../source/faq/developers.txt:570
msgid ""
"If your collection name includes special characters, such as the "
"underscore character, then to access the collection use the "
":method:`db.getCollection()` method or a :api:`similar method for your "
"driver <>`."
msgstr ""

# 4e4953857692435c9d5436a383e10f78
#: ../source/faq/developers.txt
msgid "Example"
msgstr ""

# 125642574d1140829b8bb2b05e2d6c7c
#: ../source/faq/developers.txt:582
msgid ""
"To perform a query, use the :method:`~db.collection.find()` method, in as"
" the following:"
msgstr ""

# 1ccf6ff6aea54427b517098844739d30
#: ../source/faq/developers.txt:592
msgid "How do I isolate cursors from intervening write operations?"
msgstr ""

# a57f63c19e8e4559a4b14afe80dcd502
#: ../source/faq/developers.txt:594
msgid ""
"MongoDB cursors can return the same document more than once in some "
"situations. [#duplicate-document-in-result-set]_ You can use the "
":method:`~cursor.snapshot()` method on a cursor to isolate the operation "
"for a very specific case."
msgstr ""

# c1a6949557b848dda316615c095f7477
#: ../source/faq/developers.txt:599
msgid ""
":method:`~cursor.snapshot()` traverses the index on the ``_id`` field and"
" guarantees that the query will return each document (with respect to the"
" value of the ``_id`` field) no more than once. [#id-is-immutable]_"
msgstr ""

# 4a431b82f2d94453bbcc8238caa35c85
#: ../source/faq/developers.txt:603
msgid ""
"The :method:`~cursor.snapshot()` does not guarantee that the data "
"returned by the query will reflect a single moment in time *nor* does it "
"provide isolation from insert or delete operations."
msgstr ""

# 7380a2dc0c404f688e67e13ec5422c33
#: ../source/faq/developers.txt:609
msgid ""
"You **cannot** use :method:`~cursor.snapshot()` with :term:`sharded "
"collections <sharding>`."
msgstr ""

# de7988e804c8411285ca8d0befdea756
#: ../source/faq/developers.txt:612
msgid ""
"You **cannot** use :method:`~cursor.snapshot()` with "
":method:`~cursor.sort()` or :method:`~cursor.hint()` cursor methods."
msgstr ""

# dea1555b9eda495498b5af83cf79b207
#: ../source/faq/developers.txt:616
msgid ""
"As an alternative, if your collection has a field or fields that are "
"never modified, you can use a *unique* index on this field or these "
"fields to achieve a similar result as the :method:`~cursor.snapshot()`. "
"Query with :method:`~cursor.hint()` to explicitly force the query to use "
"that index."
msgstr ""

# 9eb2b69e99f9417c85635e9ed40a7c27
#: ../source/faq/developers.txt:622
msgid ""
"As a cursor returns documents other operations may interleave with the "
"query: if some of these operations are :doc:`updates </core/write-"
"operations>` that cause the document to move (in the case of a table "
"scan, caused by document growth) or that change the indexed field on the "
"index used by the query; then the cursor will return the same document "
"more than once."
msgstr ""

# 83c76c5694ba44d98a2d3c2b1d99831e
#: ../source/faq/developers.txt:630
msgid ""
"MongoDB does not permit changes to the value of the ``_id`` field; it is "
"not possible for a cursor that transverses this index to pass the same "
"document more than once."
msgstr ""

# 34ef6a0ca2174c5f8764cdcd27c702c4
#: ../source/faq/developers.txt:637
msgid "When should I embed documents within other documents?"
msgstr ""

# 0b7d3a08618f4f5c9ce8853e54925167
#: ../source/faq/developers.txt:639
msgid ""
"When :doc:`modeling data in MongoDB </core/data-models>`, embedding is "
"frequently the choice for:"
msgstr ""

# e97e698e15b5414ea0dc37bba0f97b6b
#: ../source/faq/developers.txt:642
msgid "\"contains\" relationships between entities."
msgstr ""

# e1b64e6b7bf0427f9aea5e8b859ad3fb
#: ../source/faq/developers.txt:644
msgid ""
"one-to-many relationships when the \"many\" objects *always* appear with "
"or are viewed in the context of their parents."
msgstr ""

# c19859c85a0542158218facc105e3e42
#: ../source/faq/developers.txt:647
msgid ""
"You should also consider embedding for performance reasons if you have a "
"collection with a large number of small documents. Nevertheless, if "
"small, separate documents represent the natural model for the data, then "
"you should maintain that model."
msgstr ""

# 2ffe34356eda45a0acbfabe9de3dfe13
#: ../source/faq/developers.txt:652
msgid ""
"If, however, you can group these small documents by some logical "
"relationship *and* you frequently retrieve the documents by this "
"grouping, you might consider \"rolling-up\" the small documents into "
"larger documents that contain an array of embedded documents. Keep in "
"mind that if you often only need to retrieve a subset of the documents "
"within the group, then \"rolling-up\" the documents may not provide "
"better performance."
msgstr ""

# 672b1d9dec244feab81af2bb98968725
#: ../source/faq/developers.txt:660
msgid ""
"\"Rolling up\" these small documents into logical groupings means that "
"queries to retrieve a group of documents involve sequential reads and "
"fewer random disk accesses."
msgstr ""

# 28a5b3ef9c3a45cb9d7b3a2187ef36df
#: ../source/faq/developers.txt:666
msgid ""
"Additionally, \"rolling up\" documents and moving common fields to the "
"larger document benefit the index on these fields. There would be fewer "
"copies of the common fields *and* there would be fewer associated key "
"entries in the corresponding index. See :doc:`/core/indexes` for more "
"information on indexes."
msgstr ""

# 4696a264653948cfb81adfb66c423ef4
#: ../source/faq/developers.txt:680
msgid "Where can I learn more about data modeling in MongoDB?"
msgstr ""

# 476930b7b24a4c5296d14a48df12e749
#: ../source/faq/developers.txt:682
msgid ""
"Begin by reading the documents in the :doc:`/data-modeling` section. "
"These documents contain a high level introduction to data modeling "
"considerations in addition to practical examples of data models targeted "
"at particular issues."
msgstr ""

# 0f7166872a63434dbcc32cc068b5806a
#: ../source/faq/developers.txt:687
msgid ""
"Additionally, consider the following external resources that provide "
"additional examples:"
msgstr ""

# 9055c4785da947dfb79171cffea81a17
#: ../source/faq/developers.txt:698
msgid ""
"`Schema Design by Example <http://www.mongodb.com/presentations/mongodb-"
"melbourne-2012/schema-design-example>`_"
msgstr ""

# a4d3cb876cc94e19931086b05347bdef
#: ../source/faq/developers.txt:700
msgid ""
"`Dynamic Schema Blog Post "
"<http://dmerr.tumblr.com/post/6633338010/schemaless>`_"
msgstr ""

# 571ed68d1b904f5c90053151d237e74e
#: ../source/faq/developers.txt:703
msgid ""
":ecosystem:`MongoDB Data Modeling and Rails </tutorial/model-data-for-"
"ruby-on-rails/>`"
msgstr ""

# 5a78a170d41342efa036da04eee43e11
#: ../source/faq/developers.txt:706
msgid ""
"`Ruby Example of Materialized Paths "
"<http://github.com/banker/newsmonger/blob/master/app/models/comment.rb>`_"
msgstr ""

# dfeff2acd7164a4abef1f62d97531a97
#: ../source/faq/developers.txt:709
msgid ""
"`Sean Cribs Blog Post <http://seancribbs.com/tech/2009/09/28/modeling-a"
"-tree-in-a-document-database>`_ which was the source for much of the :ref"
":`data-modeling-trees` content."
msgstr ""

# 21bc98413d254fd3b30a14117c36c065
#: ../source/faq/developers.txt:717
msgid "Can I manually pad documents to prevent moves during updates?"
msgstr ""

# 769a27d9c37945b886c32b5e02774d6d
#: ../source/faq/developers.txt:721
msgid ""
"An update can cause a document to move on disk if the document grows in "
"size. To *minimize* document movements, MongoDB uses :term:`padding`."
msgstr ""

# 01dc79f52bed44ddb72c35f43741aa21
#: ../source/faq/developers.txt:725
msgid ""
"You should not have to pad manually because by default, MongoDB uses :ref"
":`power-of-2-allocation` to add :ref:`padding automatically <record-"
"allocation-strategies>`. The :ref:`power-of-2-allocation` ensures that "
"MongoDB allocates document space in sizes that are powers of 2, which "
"helps ensure that MongoDB can efficiently reuse free space created by "
"document deletion or relocation as well as reduce the occurrences of "
"reallocations in many cases."
msgstr ""

# e8006cf9f871442e9245c9ed8d168f6a
#: ../source/faq/developers.txt:733
msgid ""
"However, *if you must* pad a document manually, you can add a temporary "
"field to the document and then :update:`$unset` the field, as in the "
"following example."
msgstr ""

# 2065f3bd5f754138a50af02a0c04da40
#: ../source/faq/developers.txt:737
msgid ""
"Do not manually pad documents in a capped collection. Applying manual "
"padding to a document in a capped collection can break replication. Also,"
" the padding is not preserved if you re-sync the MongoDB instance."
msgstr ""

# 2e82db1c5e6840389e6c3657752c48ee
#: ../source/faq/developers.txt:761
msgid ":ref:`record-allocation-strategies`"
msgstr ""

#~ msgid ""
#~ "However, by default, MongoDB uses a "
#~ "\"lazy\" strategy to write to disk. "
#~ "This is advantageous in situations where"
#~ " the database receives a thousand "
#~ "increments to an object within one "
#~ "second, MongoDB only needs to flush "
#~ "this data to disk once. In "
#~ "addition to the aforementioned configuration"
#~ " options, you can also use "
#~ ":dbcommand:`fsync` and :dbcommand:`getLastError` to"
#~ " modify this strategy."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB aggressively preallocates data files"
#~ " to reserve space and avoid file "
#~ "system fragmentation. You can use the"
#~ " :setting:`smallfiles` setting to modify "
#~ "the file preallocation strategy."
#~ msgstr ""

#~ msgid ""
#~ "If you shorten the filed named "
#~ "``last_name`` to ``lname`` and the field"
#~ " name ``best_score`` to ``score``, as "
#~ "follows, you could save 9 bytes "
#~ "per document."
#~ msgstr ""

#~ msgid ""
#~ "Shortening field names reduces expressiveness"
#~ " and does not provide considerable "
#~ "benefit on for larger documents and "
#~ "where document overhead is not "
#~ "significant concern. Shorter field names "
#~ "do not reduce the size of indexes,"
#~ " because indexes have a predefined "
#~ "structure."
#~ msgstr ""

#~ msgid ""
#~ "You can disable all server-side "
#~ "execution of JavaScript, by passing the"
#~ " :option:`--noscripting <mongod --noscripting>` "
#~ "option on the command line or "
#~ "setting :setting:`noscripting` in a "
#~ "configuration file."
#~ msgstr ""

#~ msgid ""
#~ "You should not have to pad "
#~ "manually because MongoDB adds :ref:`padding"
#~ " automatically <record-allocation-stratgies>` "
#~ "and can adaptively adjust the amount "
#~ "of padding added to documents to "
#~ "prevent document relocations following "
#~ "updates. You can change the default "
#~ ":data:`~collStats.paddingFactor` calculation by "
#~ "using the :dbcommand:`collMod` command with"
#~ " the :collflag:`usePowerOf2Sizes` flag. The "
#~ ":collflag:`usePowerOf2Sizes` flag ensures that "
#~ "MongoDB allocates document space in "
#~ "sizes that are powers of 2, which"
#~ " helps ensure that MongoDB can "
#~ "efficiently reuse free space created by"
#~ " document deletion or relocation."
#~ msgstr ""

#~ msgid ":ref:`record-allocation-stratgies`"
#~ msgstr ""

# 1da1d0f72cdf4eb29ba06bb6408ae896
#~ msgid "How do you copy all objects from one collection to another?"
#~ msgstr ""

# 502eebf04fab438d9a5fc7850ac37a0f
#~ msgid ""
#~ "In the :program:`mongo` shell, you can"
#~ " use the following operation to "
#~ "duplicate the entire collection:"
#~ msgstr ""

# 63f1a26284e343d4a337415068d5fc9b
#~ msgid ""
#~ "When using :method:`db.collection.copyTo()` check"
#~ " field types to ensure that the "
#~ "operation does not remove type "
#~ "information from documents during the "
#~ "translation from :term:`BSON` to :term:`JSON`."
#~ " Consider using :method:`~db.cloneCollection()` "
#~ "to maintain type fidelity."
#~ msgstr ""

# 2d61f3a76fd049c4bc51640140e2cbb6
#~ msgid ""
#~ "Also consider the :dbcommand:`cloneCollection` "
#~ ":term:`command <database command>` that may"
#~ " provide some of this functionality."
#~ msgstr ""

# 05cd47de477d491a8d21ac16842563eb
#~ msgid "The :doc:`/tutorial/isolate-sequence-of-operations` page."
#~ msgstr ""

# b66b535267164c8caf1459e78d4d876b
#~ msgid ":method:`db.eval()`"
#~ msgstr ""

# 84e481fd58154de4803ad6de316cf3a5
#~ msgid ""
#~ "If you need to pass user-supplied"
#~ " values in a :query:`$where` clause, "
#~ "you may escape these values with "
#~ "the ``CodeWScope`` mechanism. When you "
#~ "set user-submitted values as variables"
#~ " in the scope document,  you can "
#~ "avoid evaluating them on the database"
#~ " server."
#~ msgstr ""

# 37c7249322b043afa35705d2a60be42d
#~ msgid ""
#~ "If you need to use :method:`db.eval()`"
#~ " with user supplied values, you can"
#~ " either use a ``CodeWScope`` or you"
#~ " can supply extra arguments to your"
#~ " function. For instance:"
#~ msgstr ""

# 143376cd7f834583ac582780d1a78549
#~ msgid ""
#~ "This will ensure that your application"
#~ " sends ``user_value`` to the database "
#~ "server as data rather than code."
#~ msgstr ""

# df3cf93e494740469d96ff3f364653a9
#~ msgid "Date, Timestamp"
#~ msgstr ""

# eb0572f555614fada74d4d16e0587809
#~ msgid ""
#~ "Storing values of the different types"
#~ " in the same field in a "
#~ "collection is *strongly* discouraged."
#~ msgstr ""

# b539861d5d684ce5985bd5d80a0e8e1a
#~ msgid ""
#~ "Fields in a document may store "
#~ "``null`` values, as in a notional "
#~ "collection, ``test``, with the following "
#~ "documents:"
#~ msgstr ""

# 26c6747402b445d69692400e81691a3b
#~ msgid "Different query operators treat ``null`` values differently:"
#~ msgstr ""

# e1baa499742841ff8d3ab6b8cd649008
#~ msgid ""
#~ "The ``{ cancelDate : null }`` "
#~ "query matches documents that either "
#~ "contains the ``cancelDate`` field whose "
#~ "value is ``null`` *or* that do not"
#~ " contain the ``cancelDate`` field:"
#~ msgstr ""

# 74c72e183d4649cb93010262b320f678
#~ msgid ""
#~ "Do not name a collection using the"
#~ " ``system.`` prefix. MongoDB reserves "
#~ "``system.`` for system collections, such "
#~ "as the ``system.indexes`` collection."
#~ msgstr ""

# 482bbc73478743e0a36f4b50d1b339c0
#~ msgid ""
#~ "The maximum size of a collection "
#~ "name is 128 characters, including the"
#~ " name of the database. However, for"
#~ " maximum flexibility, collections should "
#~ "have names less than 80 characters."
#~ msgstr ""

# d7ac8a1d844349a5ba229f1d1e2ebf33
#~ msgid ""
#~ "If, however, you can group these "
#~ "small documents by some logical "
#~ "relationship *and* you frequently retrieve "
#~ "the documents by this grouping, you "
#~ "might consider \"rolling-up\" the small"
#~ " documents into larger documents that "
#~ "contain an array of subdocuments. Keep"
#~ " in mind that if you often only"
#~ " need to retrieve a subset of "
#~ "the documents within the group, then "
#~ "\"rolling-up\" the documents may not "
#~ "provide better performance."
#~ msgstr ""

# 35a33513f00e4bf2b88039a951e5de3c
#~ msgid ""
#~ "`Schema Design by Example "
#~ "<http://www.10gen.com/presentations/mongodb-melbourne-2012"
#~ "/schema-design-example>`_"
#~ msgstr ""

#~ msgid ""
#~ "The :method:`db.collection.copyTo()` method uses "
#~ "the :dbcommand:`eval` command internally. As"
#~ " a result, the :method:`db.collection.copyTo()`"
#~ " operation takes a global lock that"
#~ " blocks all other read and write "
#~ "operations until the "
#~ ":method:`db.collection.copyTo()` completes."
#~ msgstr ""

#~ msgid ""
#~ "You should not have to pad "
#~ "manually because MongoDB adds :ref:`padding"
#~ " automatically <record-allocation-strategies>`"
#~ " and can adaptively adjust the amount"
#~ " of padding added to documents to "
#~ "prevent document relocations following "
#~ "updates. You can change the default "
#~ ":data:`~collStats.paddingFactor` calculation by "
#~ "using the :dbcommand:`collMod` command with"
#~ " the :collflag:`usePowerOf2Sizes` flag. The "
#~ ":collflag:`usePowerOf2Sizes` flag ensures that "
#~ "MongoDB allocates document space in "
#~ "sizes that are powers of 2, which"
#~ " helps ensure that MongoDB can "
#~ "efficiently reuse free space created by"
#~ " document deletion or relocation."
#~ msgstr ""

