.. _kotlin-fundamentals-transactions:

============
Transactions
============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: modify, customize

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to perform 
**transactions**. :manual:`Transactions </core/transactions/>` allow
you to run a series of operations that do not change any data until the
transaction is committed. If any operation in the transaction returns an
error, the driver cancels the transaction and discards all data changes
before they ever become visible.

In MongoDB, transactions run within logical **sessions**. A
:manual:`session </reference/server-sessions/>` is a grouping of related
read or write operations that you intend to run sequentially. Sessions
enable :manual:`causal consistency
</core/read-isolation-consistency-recency/#causal-consistency>` for a
group of operations or allow you to execute operations in an
:website:`ACID transaction </basics/acid-transactions>`. MongoDB
guarantees that the data involved in your transaction operations remains
consistent, even if the operations encounter unexpected errors.

When using the {+driver-short+}, you can create a new session from a 
``MongoClient`` instance as a ``ClientSession``. We recommend that you reuse
your client for multiple sessions and transactions instead of
instantiating a new client each time.

.. warning::

   Use a ``ClientSession`` only with the ``MongoClient`` (or associated
   ``MongoDatabase`` or ``MongoCollection``) that created it. Using a
   ``ClientSession`` with a different ``MongoClient`` results in operation
   errors.

Methods
-------

Create a ``ClientSession`` by using the ``startSession()`` method on your
``Client`` instance. You can then modify the session state by using the
following methods:

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Method
     - Description

   * - ``startTransaction()``
     - | Starts a new transaction for this session with the
         default transaction options. You cannot start a
         transaction if there's already an active transaction
         on the session.
       |
       | To set transaction options, use ``startTransaction(transactionOptions: TransactionOptions)``.

   * - ``abortTransaction()``
     - | Ends the active transaction for this session. Returns an error 
         if there is no active transaction for the
         session or the transaction was previously ended.

   * - ``commitTransaction()``
     - | Commits the active transaction for this session. Returns an
         error if there is no active transaction for the session or if the
         transaction was ended.

A ``ClientSession`` also has methods to retrieve session properties and modify
mutable session properties. View the `API documentation <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-client-session/index.html>`__
to learn more about these methods.

Example
-------

This example uses the following {+language+} data class to model its documents:

.. literalinclude:: /examples/generated/TransactionsTest.snippet.data-class.kt
   :language: kotlin

The following example demonstrates how you can create a session, create a transaction,
and commit changes to existing documents:

1. Create a session from the client using the ``startSession()`` method.
#. Use the ``startTransaction()`` method to start a transaction.
#. Update the specified documents, then use the ``commitTransaction()`` method if all
   operations succeed, or ``abortTransaction()`` if any operations fail.

.. literalinclude:: /examples/generated/TransactionsTest.snippet.transaction-function.kt
   :language: kotlin

Additional Information
----------------------

To learn more about the concepts mentioned in this guide, see the following pages in 
the Server manual:

- :manual:`Transactions </core/transactions/>`
- :manual:`Server Sessions </reference/server-sessions>`
- :manual:`Read Isolation, Consistency, and Recency </core/read-isolation-consistency-recency/#causal-consistency>`

To learn more about ACID compliance, see the :website:`What are ACID
Properties in Database Management Systems? </basics/acid-transactions>`
article on the MongoDB website.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the types or methods discussed in this
guide, see the following API Documentation:

- `ClientSession <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-client-session/index.html>`__
- `startTransaction <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-client-session/start-transaction.html>`__
- `commitTransaction <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-client-session/commit-transaction.html>`__
- `abortTransaction <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-client-session/abort-transaction.html>`__
