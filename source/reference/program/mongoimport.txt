.. _mongoimport:

===============
``mongoimport``
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol
.. |tool-binary| replace:: mongoimport

.. include:: /includes/admonition-mac-osx-sierra-restriction.rst

Synopsis
--------

The :binary:`~bin.mongoimport` tool imports content from an
:doc:`Extended JSON </reference/mongodb-extended-json>`, CSV, or TSV export
created by :binary:`~bin.mongoexport`, or potentially, another third-party export
tool.

See the :doc:`mongoexport` document for more information regarding
:binary:`~bin.mongoexport`, which provides the inverse "exporting"
capability.

.. include:: /includes/extracts/require-cmd-line-mongoimport.rst

Behavior
--------

.. include:: /includes/fact-type-fidelity-loss.rst

JSON Format
~~~~~~~~~~~

Starting in MongoDB 4.2, :binary:`~bin.mongoimport` expects import data
to be in Extended JSON v2.0 (either Relaxed or Canonical mode)
by default. To recognize data that is in Extended JSON v1.0 format, see
:option:`--legacy <mongoimport --legacy>`.

In earlier versions, :binary:`~bin.mongoimport` expects data in
:doc:`/reference/mongodb-extended-json-v1` format.

.. tip::

   In general, the versions of :binary:`~bin.mongoexport` and
   :binary:`~bin.mongoimport` should match. That is, to import data
   created from :binary:`~bin.mongoexport`, you should use the
   corresponding version of :binary:`~bin.mongoimport`.

Encoding
~~~~~~~~

:binary:`~bin.mongoimport` only supports data files that are UTF-8 encoded.
Using other encodings will produce errors.

FIPS
~~~~

.. include:: /includes/extracts/4.2-changes-fips-program.rst

Write Concern
~~~~~~~~~~~~~

Starting in version 4.2, if you specify write concern in both the
:option:`--writeConcern <mongoimport --writeConcern>` option and the
:option:`--uri connection string <mongoimport --uri>` option, the
:option:`--writeConcern <mongoimport --writeConcern>` value overrides
the write concern specified in the URI string.

In earlier versions, the two options are incompatible.

Batches
~~~~~~~

Starting in MongoDB 4.2, :binary:`~bin.mongoimport` uses maximum batch
size of 100,000 to perform bulk insert/upsert operations.

Required Access
---------------

In order to connect to a :binary:`~bin.mongod` that enforces authorization
with the :option:`--auth <mongod --auth>` option, you must use the
:option:`--username <mongoexport --username>` and :option:`--password
<mongoexport --password>` options. The connecting user must
possess, at a minimum, the :authrole:`readWrite` role on the database
into which they are importing data.

Options
-------

.. include:: /includes/extracts/fact-3.0-tools-drop-dbpath-support-mongoimport.rst

.. binary:: mongoimport

.. program:: mongoimport

.. include:: /includes/option/option-mongoimport-help.rst

.. include:: /includes/option/option-mongoimport-verbose.rst

.. include:: /includes/option/option-mongoimport-quiet.rst

.. include:: /includes/option/option-mongoimport-version.rst

.. include:: /includes/option/option-mongoimport-uri.rst

.. include:: /includes/option/option-mongoimport-host.rst

.. include:: /includes/option/option-mongoimport-port.rst

.. include:: /includes/option/option-mongoimport-ipv6.rst

.. include:: /includes/option/option-mongoimport-ssl.rst

.. include:: /includes/option/option-mongoimport-sslCAFile.rst

.. include:: /includes/option/option-mongoimport-sslPEMKeyFile.rst

.. include:: /includes/option/option-mongoimport-sslPEMKeyPassword.rst

.. include:: /includes/option/option-mongoimport-sslCRLFile.rst

.. include:: /includes/option/option-mongoimport-sslAllowInvalidCertificates.rst

.. include:: /includes/option/option-mongoimport-sslAllowInvalidHostnames.rst

.. include:: /includes/option/option-mongoimport-username.rst

.. include:: /includes/option/option-mongoimport-password.rst

.. include:: /includes/option/option-mongoimport-authenticationDatabase.rst

.. include:: /includes/option/option-mongoimport-authenticationMechanism.rst

.. include:: /includes/option/option-mongoimport-gssapiServiceName.rst

.. include:: /includes/option/option-mongoimport-gssapiHostName.rst

.. include:: /includes/option/option-mongoimport-db.rst

.. include:: /includes/option/option-mongoimport-collection.rst

.. include:: /includes/option/option-mongoimport-fields.rst

.. include:: /includes/option/option-mongoimport-fieldFile.rst

.. include:: /includes/option/option-mongoimport-ignoreBlanks.rst

.. include:: /includes/option/option-mongoimport-type.rst

.. include:: /includes/option/option-mongoimport-file.rst

.. include:: /includes/option/option-mongoimport-drop.rst

.. include:: /includes/option/option-mongoimport-headerline.rst

.. include:: /includes/option/option-mongoimport-mode.rst

.. include:: /includes/option/option-mongoimport-upsertFields.rst

.. include:: /includes/option/option-mongoimport-stopOnError.rst

.. include:: /includes/option/option-mongoimport-jsonArray.rst

.. option:: --legacy

   Indicates that the import data is in :doc:`Extended JSON v1 format
   </reference/mongodb-extended-json-v1>` instead of the default
   :doc:`Extended JSON v2 format </reference/mongodb-extended-json>`.

   .. tip::

      In general, the versions of :binary:`~bin.mongoexport` and
      :binary:`~bin.mongoimport` should match. That is, to import
      data created from :binary:`~bin.mongoexport`, you should use
      the corresponding version of :binary:`~bin.mongoimport`.

   For example, if the import data is in v1 format:
   
   .. code-block:: javascript

      {"_id":1.0,"myregfield":{"$regex":"foo","$options":"i"}}
   
   Import without the :option:`--legacy <mongoimport --legacy>` option results in
   the following document in the collection:
   
   .. code-block:: javascript
   
      { "_id" : 1, "myregfield" : { "$regex" : "foo", "$options" : "i" } }

   Import with the :option:`--legacy <mongoimport --legacy>` results in
   the following document in the collection:

   .. code-block:: javascript

      { "_id" : 1, "myregfield" : { "$regularExpression" : { "pattern" : "foo", "options" : "i" } } }

   .. versionadded:: 4.2

.. include:: /includes/option/option-mongoimport-maintainInsertionOrder.rst

.. include:: /includes/option/option-mongoimport-numInsertionWorkers.rst

.. include:: /includes/option/option-mongoimport-writeConcern.rst

.. include:: /includes/option/option-mongoimport-bypassDocumentValidation.rst

.. include:: /includes/option/option-mongoimport-columnsHaveTypes.rst

.. include:: /includes/option/option-mongoimport-parseGrace.rst

Examples
--------

Simple Import
~~~~~~~~~~~~~

:binary:`~bin.mongoimport` restores a database from a backup taken with
:binary:`~bin.mongoexport`. Most of the arguments to :binary:`~bin.mongoexport` also
exist for :binary:`~bin.mongoimport`.

In the following example, :binary:`~bin.mongoimport` imports
the :term:`JSON` data from the ``contacts.json`` file into the collection
``contacts`` in the ``users`` database.

.. code-block:: sh

   mongoimport --db users --collection contacts --file contacts.json

.. _ex-mongoimport-upsert:

Replace Matching Documents during Import
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionchanged:: 3.4
   In MongoDB 3.4, :option:`--mode upsert <mongoimport --mode>` replaces the
   deprecated ``--upsert`` option.

With :option:`--mode <mongoimport --mode>` ``upsert``, :binary:`~bin.mongoimport` replaces
existing documents in the database that match a document in the
import file with the document from the import file.
Documents that do not match an existing document in the database are
inserted as usual. By default :binary:`~bin.mongoimport` matches documents
based on the ``_id`` field. Use :option:`--upsertFields <mongoimport --upsertFields>` to specify
the fields to match against.

Consider the following document in the ``people`` collection in the
``example`` database:

.. code-block:: javascript

   {
      "_id" : ObjectId("580100f4da893943d393e909"),
      "name" : "Crystal Duncan",
      "region" : "United States",
      "email" : "crystal@example.com"
   }

The following document exists in a ``people-20160927.json`` JSON file.
The ``_id`` field of the JSON object matches the ``_id`` field of the
document in the ``people`` collection.

.. code-block:: javascript

   {
      "_id" : ObjectId("580100f4da893943d393e909"),
      "username" : "crystal",
      "likes" : [ "running", "pandas", "software development" ]
   }

To import the ``people-20160927.json`` file and replace documents in
the database that match the documents in the import file, specify :option:`--mode`
``upsert``, as in the following:

.. code-block:: sh

   mongoimport -c people -d example --mode upsert --file people-20160927.json

The document in the ``people`` collection would then contain only
the fields from the imported document, as in the following:

.. code-block:: javascript

   {
      "_id" : ObjectId("580100f4da893943d393e909"),
      "username" : "crystal",
      "likes" : [ "running", "pandas", "software development" ]
   }

.. _ex-mongoimport-merge:

Merge Matching Documents during Import
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.4

With :option:`--mode <mongoimport --mode>` ``merge``, :binary:`~bin.mongoimport` enables you to
merge fields from a new record with an existing document in the
database. Documents that do not match an existing document in the
database are inserted as usual. By default :binary:`~bin.mongoimport`
matches documents based on the ``_id`` field. Use
:option:`--upsertFields <mongoimport --upsertFields>` to specify the fields to match against.

The ``people`` collection in the ``example`` database contains the
following document:

.. code-block:: javascript

 {
    "_id" : ObjectId("580100f4da893943d393e909"),
    "name" : "Crystal Duncan",
    "region" : "United States",
    "email" : "crystal@example.com"
 }

The following document exists in a ``people-20160927.json`` JSON file.
The ``_id`` field of the JSON object matches the ``_id`` field of the
document in the ``people`` collection.

.. code-block:: javascript

   {
      "_id" : ObjectId("580100f4da893943d393e909"),
      "username" : "crystal",
      "email": "crystal.duncan@example.com",
      "likes" : [ "running", "pandas", "software development" ]
   }

To import the ``people-20160927.json`` file and merge documents from
the import file with matching documents in the database, specify
:option:`--mode <mongoimport --mode>` ``merge``, as in the following:

.. code-block:: sh

   mongoimport -c people -d example --mode merge --file people-20160927.json

The import operation combines the fields from the JSON file with the
original document in the database,
matching the documents based on the ``_id`` field.
During the import process, :binary:`~bin.mongoimport` adds the new ``username`` and
``likes`` fields to the document and updates the ``email`` field with
the value from the imported document, as in the following:

.. code-block:: javascript

   {
      "_id" : ObjectId("580100f4da893943d393e909"),
      "name" : "Crystal Duncan",
      "region" : "United States",
      "email" : "crystal.duncan@example.com",
      "username" : "crystal",
      "likes" : [
         "running",
         "pandas",
         "software development"
      ]
   }

Import ``JSON`` to Remote Host Running with Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following example, :binary:`~bin.mongoimport` imports data from the
file ``/opt/backups/mdb1-examplenet.json`` into the ``contacts`` collection
within the database ``marketing`` on a remote MongoDB
database with authentication enabled.

:binary:`~bin.mongoimport` connects to the :binary:`~bin.mongod` instance running on
the host ``mongodb1.example.net`` over port ``37017``. It authenticates with the
username ``user`` and the password ``pass``.

.. code-block:: sh

   mongoimport --host mongodb1.example.net --port 37017 --username user --password "pass" --collection contacts --db marketing --file /opt/backups/mdb1-examplenet.json

``CSV`` Import
~~~~~~~~~~~~~~

General CSV Import
``````````````````

In the following example, :binary:`~bin.mongoimport` imports the :term:`csv`
formatted data in the ``/opt/backups/contacts.csv`` file into the
collection ``contacts`` in the ``users`` database on the MongoDB
instance running on the localhost port numbered
``27017``.

Specifying :option:`--headerline <mongoimport --headerline>` instructs
:binary:`~bin.mongoimport` to determine the name of the fields using the first
line in the CSV file.

.. code-block:: sh

   mongoimport --db users --collection contacts --type csv --headerline --file /opt/backups/contacts.csv

:binary:`~bin.mongoimport` uses the input file name, without the
extension, as the collection name if ``-c`` or ``--collection`` is
unspecified. The following example is therefore equivalent:

.. code-block:: none

   mongoimport --db users --type csv --headerline --file /opt/backups/contacts.csv

.. _example-csv-import-types:

Import CSV with Specified Field Types
`````````````````````````````````````

.. versionadded:: 3.4

Specify field names and interpreted data types in the form 
``<colName>.<type>(<arg>)``
using :option:`--columnsHaveTypes <mongoimport --columnsHaveTypes>` and
:option:`--fields <mongoimport --fields>`,
:option:`--fieldFile <mongoimport --fieldFile>`, or
:option:`--headerline <mongoimport --headerline>`.

Consider the following CSV data:

.. code-block:: none

   Katherine Gray, 1996-02-03, false, 1235, TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFtY28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuIER1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtLg==
   Albert Gilbert, 1992-04-24, true, 13, Q3VwY2FrZSBpcHN1bSBkb2xvciBzaXQgYW1ldCB0b290c2llIHJvbGwgYm9uYm9uIHRvZmZlZS4gQ2FuZHkgY2FuZXMgcGllIGNyb2lzc2FudCBjaG9jb2xhdGUgYmFyIGxvbGxpcG9wIGJlYXIgY2xhdyBtYWNhcm9vbi4gU3dlZXQgcm9sbCBjdXBjYWtlIGNoZWVzZWNha2Ugc291ZmZsw6kgYnJvd25pZSBpY2UgY3JlYW0uIEp1anViZXMgY2FrZSBjdXBjYWtlIG1hY2Fyb29uIGRhbmlzaCBqZWxseS1vIHNvdWZmbMOpLiBDYWtlIGFwcGxlIHBpZSBnaW5nZXJicmVhZCBjaG9jb2xhdGUgc3VnYXIgcGx1bS4gU3dlZXQgY2hvY29sYXRlIGNha2UgY2hvY29sYXRlIGNha2UganVqdWJlcyB0aXJhbWlzdSBvYXQgY2FrZS4gU3dlZXQgc291ZmZsw6kgY2hvY29sYXRlLiBMaXF1b3JpY2UgY290dG9uIGNhbmR5IGNob2NvbGF0ZSBtYXJzaG1hbGxvdy4gSmVsbHkgY29va2llIGNha2UgamVsbHkgYm==

The following operation uses :binary:`~bin.mongoimport` with the
:option:`--fields <mongoimport --fields>` and
:option:`--columnsHaveTypes <mongoimport --columnsHaveTypes>` option
to specify both the field names and the BSON types of the imported CSV
data.

.. code-block:: sh
   :emphasize-lines: 5-6
   
   mongoimport \
      --db users \
      --collection contacts \
      --type csv \
      --columnsHaveTypes \
      --fields \
   "name.string(),\
   birthdate.date(2006-01-02),\
   contacted.boolean(),\
   followerCount.int32(),\
   thumbnail.binary(base64)" \
      --file /example/file.csv

Ignore Blank Fields
```````````````````

Use the :option:`--ignoreBlanks <mongoimport --ignoreBlanks>` option
to ignore blank fields. For :term:`CSV` and :term:`TSV` imports, this
option provides the desired functionality in most cases because it avoids
inserting fields with null values into your collection.

The following example imports the data from ``data.csv``, skipping
any blank fields:

.. code-block:: sh

   mongoimport --db users --collection contacts --type csv --file /example/data.csv --ignoreBlanks

