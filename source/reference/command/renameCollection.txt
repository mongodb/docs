================
renameCollection
================

.. default-domain:: mongodb

.. dbcommand:: renameCollection( source-namespace, to: target-namespace [, dropTarget=>true])

   The :dbcommand:`renameCollection` command is an administrative command which
   changes the name of an existing collection.
   If the ``target-namespace`` specifies a collection in a different database, the
   ``source-namespace`` collection will be copied to the new database and then dropped.
   You must issue the
   :dbcommand:`renameCollection`
   command against the :term:`admin database` in the form:

   .. code-block:: javascript

      { renameCollection: <source-namespace>, to: <target-namespace> }

   You must specify the complete :term:`namespace` (i.e., database name
   and collection name).
   
   :var source-namespace:
   
      Specifies the complete namespace of the collection to be renamed.
      
   :param string to: 
   
      Specifies the new namespace of the collection.
      
   :param boolean,optional dropTarget: If ``true``, :program:`mongod` will drop the `target` of :dbcommand:`renameCollection` prior to renaming the collection.
      
   :exception 10026:
   
      Raised if the ``source`` namespace does not exist.
      
   :exception 10027:
   
      Raised if the ``target`` namespace exists
      and ``dropTarget`` is either ``false`` or unspecified.
      
   :exception 15967:
   
      Raised if the ``target`` namespace is an invalid collection name.   

   You may safely use :dbcommand:`renameCollection` in production
   environments.

   .. warning::

      :dbcommand:`renameCollection` will fail if 
      `target` is the name of an existing collection
      and you do not specify ``dropTarget: true``.
   
      You cannot use :dbcommand:`renameCollection` with
      sharded collections.
   
      If :dbcommand:`renameCollection` is interrupted prior to completion,
      the ``target`` collection and indexes will be left in an inconsistent
      state requiring manual intervention to clean up.
      
      A copy of a database across collections will impact performance for
      the duration of the copy.
      
      You should not initiate :dbcommand:`renameCollection` while the 
      source database is being written to. 

   The shell helper :method:`db.collection.renameCollection()` provides a
   simpler interface to using this command within a database.
   The following is equivalent to the previous example:

   .. code-block:: javascript

      db.source-namespace.renameCollection( "target" )
   
   

