.. _kotlin-builders-data-classes:

==============================
Use Builders with Data Classes
==============================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, data format, modeling, interoperability

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use your data class properties
directly with the builder classes available in
the {+driver-short+}.

The {+driver-short+} implements extensions that allow you to reference
your data class properties when using builder methods instead of using
string field names. You can structure your code in this way to make your
code more type-safe and improve your applications {+language+}
interoperability.

The extensions library also allows you to construct
queries, update documents, and write other statements by using infix
notation. To learn more about this notation, see `Infix notation
<{+kotlin-docs+}/docs/functions.html#infix-notation>`__ in the
{+language+} reference documentation.

.. note::

   This page provides a limited number of code
   examples to demonstrate this functionality. To view examples for all
   the builder classes, see the :ref:`kotlin-builders-landing` guides.

Add {+language+} Extensions to Your Project
-------------------------------------

To implement this functionality, you must add the
``mongodb-driver-kotlin-extensions`` dependency to your dependencies
list.

Select from the following tabs to see how to add the extension
dependency to your project by using the :guilabel:`Gradle` and
:guilabel:`Maven` package managers:

.. tabs::

   .. tab::
      :tabid: Gradle

      If you are using `Gradle <https://gradle.org/>`__ to manage your 
      dependencies, add the following to your ``build.gradle.kts`` dependencies list:

      .. code-block:: kotlin
         :caption: build.gradle.kts
 
         implementation("org.mongodb:mongodb-driver-kotlin-extensions:{+full-version+}")

   .. tab::
      :tabid: Maven

      If you are using `Maven <https://maven.apache.org/>`__ to manage your 
      dependencies, add the following to your ``pom.xml`` dependencies list:

      .. code-block:: xml
         :caption: pom.xml
    
         <dependency>
             <groupId>org.mongodb</groupId>
             <artifactId>mongodb-driver-kotlin-extensions</artifactId>
             <version>{+full-version+}</version>
         </dependency>

After you install the extensions dependency, you can use the extension
methods by importing classes and methods from the
``com.mongodb.kotlin.client.model`` path. You can mix usage of these methods and
the standard builder methods in the same application, as shown in the
:ref:`kotlin-data-class-aggregates` example in this guide.

Builders Examples
-----------------

This section contains examples that demonstrate how to use data class
properties directly with builder class methods from the extensions
package.

.. tip:: Data Class Annotations

   When you the extension builder class methods data
   classes, the methods respect your data class annotations from the
   ``bson-kotlin`` and ``bson-kotlinx`` packages. To learn more about
   annotations, see the :ref:`fundamentals-data-class-annotations`
   section of the Document Data Format: Data Classes guide and the
   :ref:`kotlin-data-class-annotation` section in the {+language+}
   Serialization guide.

Sample Data
~~~~~~~~~~~

The examples in this section use documents in the ``students``
collection that describe students at a school. Documents in the
``students`` collection are modeled by the following {+language+} data
class:

.. literalinclude:: /examples/generated/BuildersDataClassTest.snippet.data-class.kt
    :language: kotlin

.. _kotlin-data-class-filters:

Filters
~~~~~~~

You can use helpers from the ``Filters`` builders class to query on data
class properties. To learn more about this class, see the
:ref:`filters-builders` guide.

The following code shows different ways to use ``Filters`` extension
methods to perform queries on the ``Student`` data class:

.. code-block:: kotlin
   
   import com.mongodb.kotlin.client.model.Filters.eq
   import com.mongodb.kotlin.client.model.Filters.all

.. literalinclude:: /examples/generated/BuildersDataClassTest.snippet.filters-data-class.kt
   :language: kotlin

.. _kotlin-data-class-indexes:

Indexes
~~~~~~~

You can use helpers from the ``Indexes`` builders class to create
indexes on data class properties. To learn more about this class, see the
:ref:`indexes-builders` guide.

The following code shows different ways to use ``Indexes`` extension
methods to create indexes on the ``Student`` data class:

.. code-block:: kotlin
   
   import com.mongodb.kotlin.client.model.Indexes.ascending
   import com.mongodb.kotlin.client.model.Indexes.descending

.. literalinclude:: /examples/generated/BuildersDataClassTest.snippet.indexes-data-class.kt
   :language: kotlin

.. _kotlin-data-class-projections:

Projections
~~~~~~~~~~~

You can use helpers from the ``Projections`` builders class to create
projections for data class properties. To learn more about this class, see the
:ref:`projections-builders` guide.

The following code shows how to use ``Projections`` extension
methods to create a projection on the ``Student`` data class:

.. code-block:: kotlin
   
   import com.mongodb.kotlin.client.model.Projections.excludeId
   import com.mongodb.kotlin.client.model.Projections.fields
   import com.mongodb.kotlin.client.model.Projections.include

.. literalinclude:: /examples/generated/BuildersDataClassTest.snippet.projections-data-class.kt
   :language: kotlin

.. _kotlin-data-class-sorts:

Sorts
~~~~~

You can use helpers from the ``Sorts`` builders class to sort
on your data class properties. To learn more about this class, see the
:ref:`sorts-builders` guide.

The following code shows how to use ``Sorts`` extension
methods to create different sorts on the ``Student`` data class:

.. code-block:: kotlin
   
   import com.mongodb.client.model.Sorts.orderBy
   import com.mongodb.kotlin.client.model.Sorts
   
.. literalinclude:: /examples/generated/BuildersDataClassTest.snippet.sorts-data-class.kt
   :language: kotlin

.. _kotlin-data-class-updates:

Updates
~~~~~~~

You can use helpers from the ``Updates`` builders class to perform
updates by using your data class properties. To learn more about this
class, see the :ref:`updates-builders` guide.

The following code shows how to use ``Sorts`` extension
methods to create different sorts on the ``Student`` data class:

.. code-block:: kotlin
   
   import com.mongodb.kotlin.client.model.Filters.gte
   import com.mongodb.kotlin.client.model.Updates.addToSet
   import com.mongodb.kotlin.client.model.Updates.combine
   import com.mongodb.kotlin.client.model.Updates.max
   
.. literalinclude:: /examples/generated/BuildersDataClassTest.snippet.updates-data-class.kt
   :language: kotlin

.. _kotlin-data-class-aggregates:

Aggregates
~~~~~~~~~~

You can use helpers from the ``Aggregates`` and ``Accumulators``
builders classes to perform aggregations by using you data class
properties. To learn more about these classes, see the
:ref:`aggregates-builders` guide.

The following code shows how to use ``Accumulators`` extension
methods and ``Aggregates`` helper methods to perform an aggregation on
the ``Student`` data class:

.. code-block:: kotlin
   
   import com.mongodb.client.model.Aggregates.group
   import com.mongodb.client.model.Aggregates.limit
   import com.mongodb.client.model.Aggregates.sort
   import com.mongodb.kotlin.client.model.Accumulators.avg
   
.. literalinclude:: /examples/generated/BuildersDataClassTest.snippet.aggregates-data-class.kt
   :language: kotlin

API Documentation
-----------------

- `{+driver-short+} Extensions
  <{+api+}/apidocs/mongodb-driver-kotlin-extensions/index.html>`__
