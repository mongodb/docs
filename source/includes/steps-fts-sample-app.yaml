title: Spin up an Atlas Free Tier cluster.
ref: atlas-cluster-setup
content: |
  If you haven't already, sign up for an Atlas account and spin up a 
  Free Tier cluster. For detailed instructions, see :doc:`Create and 
  Manage a MongoDB Account </cloud/account>`.
---
title: Load the sample dataset.
ref: load-sample-dataset
content: |
  To load the sample dataset into your cluster, navigate to the Atlas UI
  and click the ellipse (...) button in your cluster's panel. Select
  :guilabel:`Load Sample Dataset` from the dropdown menu.

  .. figure:: /images/load-sample-dataset.png
     :alt: Load a sample dataset
     :figwidth: 650
---
title: Examine the ``movies`` collection.
ref: movies-collection
content: |
  You can examine documents in your cluster's collections with the
  Atlas Data Explorer.
  
  #. Click the :guilabel:`Collections` button in your cluster's
     panel in the Atlas UI.

  #. Select :guilabel:`sample_mflix` from the :guilabel:`Namespaces`
     panel on the left side.

  #. Select the :guilabel:`movies` collection.

  #. The first 20 documents appear in the panel on the right. The
     ``fullplot`` field contains text which we will make searchable
     for our application.
---
title: Create an Atlas Search index.
ref: create-fts-index
content: |
  Next we'll create an Atlas Search index on the ``movies`` collection.

  #. Select :guilabel:`Search` in the right-side panel.

  #. Click the :guilabel:`Create Search Index` button.

  #. The :guilabel:`Configure Search Index` modal window is where
     you can create a custom :atlas:`index definition
     </reference/atlas-search/index-definitions/>`.
     For now we'll use the default index definition, which indexes
     all available fields. Click the :guilabel:`Create Index` button.

  #. The index takes a few minutes to build. When it's done, move on
     to the next step.
---
title: Write an aggregation pipeline query. (Optional)
ref: write-agg
content: |
  Full-text search queries use the :atlas:`$searchBeta
  </reference/atlas-search/query-syntax>` aggregation pipeline
  stage. If you'd like to learn more about constructing a full-text
  search query, proceed with the following steps. If you'd rather get
  right to the Stitch part of the tutorial, you can skip to the next step.

  #. The :manual:`Aggregation Pipeline Builder </compass/beta/aggregation-pipeline-builder/>` 
     feature of :manual:`MongoDB Compass </compass/current/>` is a helpful
     tool for creating aggregation pipeline queries. We'll use it for this
     portion of the tutorial.
     
  #. Open Compass and connect to your Atlas cluster. For detailed connection
     instructions, see the :manual:`Compass documentation
     </compass/current/connect/>`.
     
  #. Navigate to the ``sample_mflix.movies`` collection.

  #. Select the :guilabel:`Aggregations` tab in the top navigation.

  #. Select :guilabel:`$searchBeta` in the dropdown menu for the first
     aggregation stage.

  #. We'll use the :atlas:`search </reference/atlas-search/search/>`
     and :atlas:`highlight </reference/atlas-search/highlighting/>`
     operators to look for the search terms ``vampires and werewolves``
     in the ``fullplot`` field of our ``movies`` collection.

     Enter the following text in the ``$searchBeta`` stage of your
     pipeline:

      .. code-block:: none

        {
          search: {
            query: 'vampires and werewolves',
            path: 'fullplot'
          },
          highlight: {
            path: 'fullplot'
          }
        }

  #. Click the :guilabel:`Add Stage` button.

  #. In our next stage we'll use a :manual:`$project
     </reference/operator/aggregation/project/>` stage to narrow down
     our return output to just a few of the fields in the ``movies``
     collection documents. Select ``$project`` from the dropdown menu of
     the second stage.

  #. We'll return the fields ``title``, ``year``, and ``fullplot``.
     We'll suppress the ``_id`` field and add two new fields,
     ``searchScore`` and ``searchHighlights``.

     Enter the following text the ``$project`` stage of your pipeline:

     .. code-block:: none

        {
          title: 1,
          year: 1,
          fullplot: 1,
          _id: 0,
          score: {
            $meta: 'searchScore'
          },
          highlight: {
            $meta: 'searchHighlights'
          }
        }

  #. Lastly, we'll add a :manual:`$limit
     </reference/operator/aggregation/limit/>` stage to limit our results
     to 10 documents. Select ``$limit`` from the dropdown menu of the third
     stage and enter ``10`` in the text box.

  #. In the output preview to the right you should see a few movies
     dealing with vampires and werewolves. If you don't, go back and
     check that all your pipeline stages have valid syntax.

---
title: Create a Stitch application.
ref: create-stitch
content: |
  Now we have a dataset and an aggregation pipeline to query it. Next,
  we'll use Stitch to create a RESTful API backend to accept incoming
  data requests.

  #. Go back to the Atlas web UI and select :guilabel:`Stitch` from the
     left-side navigation.

  #. Click the :guilabel:`Create New Application` button.

  #. Enter ``AtlasSearchDemo`` in the :guilabel:`Application Name` text box.

  #. Select the cluster with your ``sample_mflix`` database in the
     :guilabel:`Link to Cluster` dropdown menu.

  #. Leave the other modal window settings where they are and click
     :guilabel:`Create`.

  #. After Atlas finishes linking your cluster to your new Stitch app,
     you'll see the Stitch app configuration UI. Select :guilabel:`3rd
     Party Services` from the left-side navigation.

  #. Click the :guilabel:`Add a Service` button.

  #. Select :guilabel:`HTTP` and enter ``getMovies`` in the
     :guilabel:`Service Name` text box, then click the :guilabel:`Add
     Service` button.

  #. Click the :guilabel:`Add Incoming Webhook` button.

  #. Scroll down to the :guilabel:`HTTP Method` dropdown menu and select
     ``GET``.
  
  #. Leave the other webhook settings as they are and click the
     :guilabel:`Save` button in the lower right corner.
  
  #. Next we'll create a Javascript function for our webhook to invoke
     when it receives a data request. This function contains our aggregation
     pipeline query, which the function executes with search terms entered by the
     user.

     Replace all the text in the :guilabel:`Function Editor` panel with
     the following:

     .. code-block:: javascript

        exports = function(payload) {
          const collection = context.services
                                    .get("mongodb-atlas")
                                    .db("sample_mflix")
                                    .collection("movies");
          let arg = payload.query.arg;
          return collection.aggregate([
          	  { 
                $searchBeta: {
                  search: {
                     query: arg,
                     path:'fullplot',
                   },
                   highlight: { path: 'fullplot' }
                }
              }, 
              { 
                $project: {
                  title: 1,
                  _id:0,
                  year:1,
                  fullplot:1,
                  score: { $meta: 'searchScore'},
                  highlight: {$meta: 'searchHighlights'}
                }
              }, 
              { 
                $limit: 10
              }
           ]).toArray();    
        };

---
title: Test your function.
ref: test function
content: |
  Use the Console in the Stitch UI to test your function.
  
  #. Select the :guilabel:`Console` tab just below the Function Editor.
  
  #. Find the ``exports`` line and replace it with the following:

     .. code-block:: none
    
        exports({query: {arg: 'vampires and werewolves'}})
  
  #. Click the :guilabel:`Run` button.

  #. You should see data results in the :guilabel:`Result` panel. If not,
     go back and check your function in the Function Editor and make
     sure your ``exports`` line reads correctly.

     If your function runs correctly and retrieves the expected data,
     click :guilabel:`Save` in the upper right
     corner and then :guilabel:`Review and Deploy` at the top.
  
  #. Click the :guilabel:`Deploy` button at the bottom of the screen.
---
title: Create an HTML front end for your application.
ref: create-html
content: |
  The last step is to create a web-based UI for your application.

  #. Download this `HTML file
     <https://developer-advocacy-public.s3-eu-west-1.amazonaws.com/full-text-search-demo/index.html>`__
     by right-clicking the link and selecting ``Save Link As...``

  #. Open the HTML file in a text editor.

  #. Go to line 82 and replace the webhook URL with the webhook URL from
     your Stitch app. To find your webhook URL:
    
     #. Click :guilabel:`3rd Party Services` in the left-side navigation
        of the Stitch UI.

     #. Click the ``getMovies`` service.

     #. Click your webhook.

     #. Click the :guilabel:`Settings` tab.

     #. Copy your webhook URL from the :guilabel:`Webhook Settings`
        section of the screen.
    
  #. Save your file.

  #. Open the HTML file in a web browser.

  #. Try it out!

     .. figure:: /images/fts-sample-results.gif

...