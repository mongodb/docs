.. meta::
   :robots: noindex, nosnippet

.. _dotnet-client-dictionaries:

=======================
Dictionaries - .NET SDK
=======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 10.2.0

Overview
--------
A Realm dictionary is an implementation of   
`IDictionary <https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.idictionary-2?view=net-5.0>`_ 
that has keys of type ``String`` and supports values of any 
:ref:`Realm type <dotnet-objects>` except 
:ref:`collections <dotnet-client-collections>`. 
To define a dictionary, use 
a getter-only ``IDictionary<string, TValue>`` property, where ``TValue`` is any 
of the supported types.

Dictionary Types
----------------

A dictionary of objects can contain null objects. Likewise, dictionaries 
of primitive types can also contain null values. If you do not 
want to allow null values in a dictionary, then either use non-nullable types in 
the dictionary declaration (for example, use ``IDictionary<string, double>`` 
instead of ``IDictionary<string, double?>``). If you are using the older schema 
type definition (your classes derive from the ``RealmObject`` base class),
or you do not have nullability enabled, use the
:ref:`[Required]<dotnet-required-optional-property>` attribute if the dictionary  
contains nullable reference types, such as ``string`` or ``byte[]``.

.. include:: /includes/map-key-string-limitations.rst

.. important:: Nullable Values Not Supported with Sync

   Local-only realms support collections of nullable (optional) values, 
   but ``Sync`` does not.

The following code shows examples of dictionary types:

.. literalinclude:: /examples/generated/dotnet/DataTypesSectionExamples.snippet.dictionaries.cs
   :language: csharp

Usage Example
-------------
The following code shows how to create, write to, and read from Dictionaries  
using either a string query (:ref:`RQL <dotnet-realm-query-language>`) or LINQ.

.. literalinclude:: /examples/generated/dotnet/DataTypesSectionExamples.snippet.query-dictionaries.cs
   :language: csharp


Watching For Changes
---------------------

You can use the `INotifyCollectionChanged.CollectionChanged 
<https://learn.microsoft.com/en-us/dotnet/api/system.collections.specialized.inotifycollectionchanged.collectionchanged>`__ 
event on a dictionary to watch for changes to the collection, and the 
`INotifyPropertyChanged.PropertyChanged 
<https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifypropertychanged.propertychanged>`__  
event to watch for changes to specific properties in the dictionary. 

In the following code example, we have a class with an ``IDictionary<string, int>`` 
property named ``IntDictionary``. We set up event 
handlers for both the ``CollectionChanged`` and ``PropertyChanged`` events:

.. literalinclude:: /examples/generated/dotnet/ProgressNotifications.snippet.notify-dictionary-change.cs
   :language: csharp
