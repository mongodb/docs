---
stepnum: 1
level: 4
ref: clone-k8s-repo-kind
title: "Clone the :github:`MongoDB Enterprise Kubernetes Operator repository </mongodb/mongodb-enterprise-kubernetes>`."
content: |

  .. code-block:: sh

     git clone https://github.com/mongodb/mongodb-enterprise-kubernetes.git

---
stepnum: 2
level: 4
ref: create-k8s-ns-kind
title: "Create a |k8s-ns| for your |k8s| deployment."
content: |

  By default, The |k8s-op-short| uses the ``mongodb`` namespace. To
  simplify your installation, consider creating a namespace labeled
  ``mongodb`` using the following |kubectl| command:

  .. code-block:: sh

     kubectl create namespace mongodb

---
stepnum: 3
level: 4
ref: configure-kubectl-configmap-kind
title: "Configure ``kubectl`` to default to your namespace."
content: |

  If you have not already, run the following command to execute all 
  ``kubectl`` commands in the namespace you created:

  .. code-block:: sh

     kubectl config set-context $(kubectl config current-context) --namespace=mongodb

---
stepnum: 4
level: 4
title: "Install the |k8s-op-full|"
ref: install-kubectl-kind
content: |

  1. Change to the directory in which you cloned the repository.

  #. Install the |k8s-crds| for MongoDB deployments using the 
     following |kubectl| command:

     .. code-block:: sh

        kubectl apply -f crds.yaml
  
  #. Install the |k8s-op-short| using the following |kubectl| command:
  
     .. code-block:: sh

        kubectl apply -f mongodb-enterprise.yaml

---
stepnum: 5
title: "Create credentials and store them as a secret."
ref: create-k8s-credentials-kind
content: |

  Run the following command:

  .. note::

     Provide your Public and Private Key values for the following 
     parameters. To learn more, see :ref:`create-k8s-credentials`.  

  .. code-block:: sh

     kubectl -n mongodb \
       create secret generic ops-manager-admin-key \
       --from-literal="user=<publicKey>" \
       --from-literal="publicApiKey=<privateKey>"
  
---
stepnum: 6
level: 4
title: "Invoke the following command to create a ConfigMap."
ref: copy-k8s-configmap-kind
content: |

  .. note::

     Provide your values for the following parameters. To learn more, 
     see the :doc:`parameter descriptions 
     </tutorial/create-project-using-configmap>`.

  .. code-block:: sh

     kubectl create configmap myconfigmap \
       --from-literal="baseUrl=<myOpsManagerURL>" \
       --from-literal="projectName=<myOpsManagerProjectName>" \ #Optional
       --from-literal="orgId=<orgID>" #Required for Global API Keys

---
stepnum: 7
level: 4
title: "Deploy the :term:`replica set` resource."
ref: deploy-replica-set-kind
content: |

  Run the following command:

  .. code-block:: sh

     cat <<EOF | kubectl apply -f -
     apiVersion: mongodb.com/v1
     kind: MongoDB
     metadata:
       name: demo-mongodb-cluster-1
       namespace: mongodb
     spec:
       members: 3
       version: 4.4.5-ent
       type: ReplicaSet
       authentication:
         enabled: true
         modes: ["SHA"]
       opsManager:
         configMapRef:
           name: myconfigmap
       credentials: ops-manager-admin-key
       persistent: true
       podSpec:
         podTemplate:
           spec:
             containers:
             - name: mongodb-enterprise-database
               resources:
                 limits:
                   cpu: 2
                   memory: 1.5G
                 requests:
                   cpu: 1
                   memory: 1G 
                 persistence:
                   single:
                     storage: 10Gi
     EOF

---
stepnum: 8
level: 4
title: "Create a secret with your database user password"
ref: create-k8s-user-secret-kind
content: |

  You can choose to use a cleartext password or a Base64-encoded 
  password. Plaintext passwords use ``stringData.password`` and 
  Base64-encoded passwords use ``data.password``.

  .. note::

     Provide your values for the following parameters. To learn more, 
     see the :doc:`parameter descriptions 
     </tutorial/manage-database-users-scram>`.

  For a cleartext password, create and save the following YAML file:

  .. code-block:: sh

     apiVersion: v1
     kind: Secret
     metadata:
       name: mms-user-1-password
       # corresponds to user.spec.passwordSecretKeyRef.name
     type: Opaque
     stringData:
       password: <my-plain-text-password>
       # corresponds to user.spec.passwordSecretKeyRef.key
  
  For a Base64-encoded password, create and save the following YAML 
  file:

  .. code-block:: sh

     apiVersion: v1
     kind: Secret
     metadata:
       name: mms-user-1-password
       # corresponds to user.spec.passwordSecretKeyRef.name
     type: Opaque
     data:
       password: <base-64-encoded-password>
       # corresponds to user.spec.passwordSecretKeyRef.key

---
stepnum: 9
level: 4
title: "Create a database user."
ref: add-k8s-user-configmap-kind
content: |

  Run the following command:

  .. code-block:: sh

     cat <<EOF | kubectl apply -f -
     apiVersion: mongodb.com/v1
       kind: MongoDBUser
       metadata:
         name: mms-scram-user-1
       spec:
         passwordSecretKeyRef:
           name: mms-user-1-password
           # Match to metadata.name of the User Secret
           key: password
         username: "mms-scram-user-1"
         db: "admin" #
         mongodbResourceRef:
           name: "demo-mongodb-cluster-1"
           # Match to MongoDB resource using authenticaiton
         roles:
         - db: "admin"
           name: "clusterAdmin"
         - db: "admin"
           name: "userAdminAnyDatabase"
         - db: "admin"
           name: "readWrite"
         - db: "admin"
           name: "userAdminAnyDatabase"
     EOF

---
stepnum: 10
level: 4
ref: view-k8s-user-kind
optional: true
source:
  file: steps-add-database-user-scram.yaml
  ref: view-k8s-user

---
stepnum: 11
level: 4
title: "Connect to the :term:`replica set`."
ref: connect-k8s-rs-kind
content: |

  Perform the following steps in the |mms| or
  `Cloud Manager <docs.cloudmanager.com/current/>`__
  application, depending on where your clusters are hosted:

  1. Click :guilabel:`Deployment` in the left navigation.

  #. Click :icon-mms:`ellipsis` for the deployment to which you want
     to connect.
  
  #. Click :guilabel:`Connect to this instance`.

  #. Run the connection command in a terminal to connect to the
     deployment.

...
