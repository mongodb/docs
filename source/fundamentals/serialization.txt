.. _csharp-serialization:

=============
Serialization
=============

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: class, map, poco, polymorphism, guid, deserialize

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol
   
.. toctree::
   :caption: Serialization

   Class Mapping </fundamentals/serialization/class-mapping>
   POCOs </fundamentals/serialization/poco>
   Polymorphic Objects </fundamentals/serialization/polymorphic-objects>
   GUIDs </fundamentals/serialization/guid-serialization>

Overview
--------

In this guide, you can learn how to use the {+driver-long+} to perform
serialization. Serialization is the process of mapping a C# object to a BSON
document for storage in MongoDB.

.. tip:: Serialization

   To learn more about serialization, see the :wikipedia:`Serialization <Serialization>`
   article on Wikipedia.

Serializers
-----------

Serializers are classes that handle the translation of C# objects to and
from BSON documents. Serializers implement the ``IBsonSerializer``
interface. The {+driver-short+} has many built-in serializers made to handle
primitive types, collection types, and custom classes.

For a full list of available serializers, see the
`Serializers namespace API documentation <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Serializers.html>`__.

Serializer Registry
-------------------

The serializer registry contains all registered serializers that are available
to your application. Many of the built-in serializers are automatically
registered to the serializer registry during startup of your application.
However, before you can use a custom serializer, you must add it to the
serializer registry, as shown in the following example:

.. code-block:: csharp

   BsonSerializer.RegisterSerializer(new CustomTypeSerializer()); 

To access the serializer registry, use the ``SerializerRegistry`` property
of the ``BsonSerializer`` class as follows:

.. code-block:: csharp

   var intSerializer = BsonSerializer.SerializerRegistry.GetSerializer<int>();

.. important::

   The serializer registry is a global registry. This means that you cannot use
   multiple registries in a single application.

Custom Serializers
~~~~~~~~~~~~~~~~~~

In some cases, you might need to create a custom serializer. When creating a
custom serializer, implement the ``SerializerBase<T>`` abstract base class and
override the ``Deserialize()`` and ``Serialize()`` methods.

The following code example shows a custom ``BsonRegularExpression`` serializer:

.. code-block:: csharp

   class CustomRegularExpressionSerializer : SerializerBase<Regex>
   {
       public override Regex Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args)
     {
         var type = context.Reader.GetCurrentBsonType();
         switch (type)
         {
             case BsonType.RegularExpression:
                 return context.Reader.ReadRegularExpression().AsRegex;
             case BsonType.String:
                 var pattern = context.Reader.ReadString();
                 return new Regex(pattern);
             default:
                 throw new NotSupportedException($"Cannot convert a {type} to a RegularExpression.");
         }
     }

     public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, Regex value)
     {
         context.Writer.WriteRegularExpression(value);
     }
   }

Opt-in Interfaces
-----------------

The {+driver-short+} has several optional interfaces that your custom serializer
class can implement, depending on the type of data the serializer handles.

IBsonIdProvider
~~~~~~~~~~~~~~~

The `IBsonIdProvider
<{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.IBsonIdProvider.html>`__
interface provides the ``GetDocumentId()`` and ``SetDocumentId()``
methods, and is useful if the object you are serializing uses an ``_id`` type other than ``ObjectId``.

IBsonDocumentSerializer
~~~~~~~~~~~~~~~~~~~~~~~

Implementing the `IBsonDocumentSerializer
<{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.IBsonDocumentSerializer.html>`__
interface enables the driver to access the member
information of the object you are serializing. This allows the driver to
properly construct type-safe queries when using a custom serializer.

IBsonArraySerializer
~~~~~~~~~~~~~~~~~~~~

Implementing the `IBsonArraySerializer
<{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.IBsonArraySerializer.html>`__
interface enables the driver to access serialization information for individual
items in an array.

.. _csharp-array-serialization:

Improve Array Serialization Performance
---------------------------------------

You can improve your application's performance by representing
arrays of primitives as `Memory<T> <https://learn.microsoft.com/en-us/dotnet/api/system.memory-1?view=net-8.0>`__
and `ReadOnlyMemory<T> <https://learn.microsoft.com/en-us/dotnet/api/system.readonlymemory-1?view=net-8.0>`__
structs instead of by using types such as standard {+language+} arrays or
``BsonArray`` objects. The driver implements fast serialization and
deserialization paths for ``Memory<T>`` and ``ReadOnlyMemory<T>``, which
enhances speed and reduces memory usage.

.. note::

   Truncation and overflow checks are not supported for ``Memory<T>`` or
   ``ReadOnlyMemory<T>``, but these checks are implemented for standard
   arrays.

You can effect these performance improvements by storing the following
primitive types in ``Memory<T>`` or ``ReadOnlyMemory<T>`` structs:

- ``bool``
- ``sbyte``
- ``byte``
- ``char``
- ``short``
- ``ushort``
- ``int``
- ``uint``
- ``long``
- ``ulong``
- ``float``
- ``double``
- ``decimal``

The following example defines a ``Line`` POCO that contains array fields
modeled by ``Memory`` and ``ReadOnlyMemory`` structs:

.. literalinclude:: /includes/fundamentals/code-examples/MemorySerialization.cs
   :start-after: start-line-class
   :end-before: end-line-class
   :language: csharp
   :dedent:

The following document represents how a sample ``Line`` object is
represented in MongoDB:

.. code-block:: json

   {
     "_id": ...,
     "X": [ 1, 2, 3, 4, 5 ],
     "Y": [ 1, 1.409999966621399, 1.7300000190734863, 2, 2.240000009536743 ]
   }

Additional Information
----------------------

To learn more about using the {+driver-short+} to serialize {+language+} objects, 
see the following pages:

- :ref:`csharp-class-mapping`
- :ref:`csharp-poco`
- :ref:`csharp-polymorphism`
- :ref:`csharp-guids`

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `SerializerRegistry <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.BsonSerializer.SerializerRegistry.html>`__
- `BsonSerializer <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.BsonSerializer.html>`__
- `IBsonSerializer <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.IBsonSerializer.html>`__
- `SerializerBase<T> <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.Serialization.Serializers.SerializerBase-1.html>`__
