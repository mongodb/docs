=========
Documents
=========

.. default-domain:: mongodb

The document structure in MongoDB refer to the data structure of:

- the :ref:`records <documents-records>` stored in :term:`collections
  <collection>`
  
- the :ref:`query selectors <documents-query-selectors>` that determine
  which records to select for read, update, and delete operations

- the :ref:`update actions <documents-update-actions>` that specifies
  the particular field updates to perform during an update operation

- the :ref:`index <documents-index>` on a collection

- the various other arguments to MongoDB methods and operators, such as:

  - :ref:`sort order <documents-sort-order>` for the :method:`sort()
    <cursor.sort()>` method.

Structure
---------

The document structure in MongoDB are :term:`BSON` objects with support
for the full range of :term:`BSON types`; however, conceptually,
documents may be viewed as :term:`JSON` objects with the following
structure:

.. code-block:: javascript

   {
      field1: value1,
      field2: value2,
      field3: value3,
      ...
      fieldN: valueN
   }

Having support for the full range of :term:`BSON types`, MongoDB
documents may contain ``field:value`` pairs where the value can be
another document, an array, an array of documents as well
as the basic types such as ``Double``, ``String``, or ``Date``.

.. _documents-records:

Document as records
-------------------

For documents that specify records to be stored in a collection, the
following restrictions apply:

- .. include:: /includes/fact-document-max-size.rst

- .. include:: /includes/fact-document-field-name-restrictions.rst

.. include:: /includes/note-insert-id-field.rst

The following document specifies a record in a collection:

  .. code-block:: javascript

     {
       _id: 1,
       name: { first: 'John', last: 'Backus' },
       birth: new Date('Dec 03, 1924'),
       death: new Date('Mar 17, 2007'),
       contribs: [ 'Fortran', 'ALGOL', 'Backus-Naur Form', 'FP' ],
       awards: [
                 { award: 'National Medal of Science',
                   year: '1975',
                   by: 'National Science Foundation' },
                 { award: 'Turing Award',
                   year: '1977',
                   by: 'ACM' }
               ]
     }

The document contains the following fields:

- field ``_id`` whose value must be unique

- field ``name`` whose value is another *Document* that contains the
  fields ``first`` and ``last``
  
- fields ``birth`` and ``death`` whose value is a *Date*

- field ``contribs`` whose value is an *array of Strings*

- field ``awards`` whose value is an *array of Documents* 

.. _documents-query-selectors:

Document as query selectors
---------------------------

Query selector documents may contain any or all of the following:

- Simple ``field:value`` pair(s) to specify the equality condition.

- :doc:`Query operator </reference/operators>` expressions to specify
  other conditions.

Consider the following examples of query selector documents:

- The following document specifies the query criteria where ``_id`` is
  equal to ``1``:

  .. code-block:: javascript

     { _id: 1 }

- The following document specifies the query criteria where ``_id`` is
  greater than ``3``:

  .. code-block:: javascript

     { _id: { $gt: 3 } }

- The following document specifies the compound query criteria where
  ``_id`` is equal to ``1`` **and** the ``name`` field equals the
  document ``{ first: 'John', last: 'Backus' }``:

  .. code-block:: javascript

     { _id: 1, name: { first: 'John', last: 'Backus' } }

- The following document specifies the compound query criteria where
  ``_id`` is equal to ``1`` **or** the ``name`` field equals the
  document ``{ first: 'John', last: 'Backus' }``:

  .. code-block:: javascript

     { $or: [ { _id: 1 }, { name: { first: 'John', last: 'Backus' } } ] }

When passed as an argument to methods such as the :method:`find()
<db.collection.find()>` method, the :method:`remove()
<db.collection.remove()>` method, or the :method:`update()
<db.collection.update()>` method, the query selector document
determines which records are returned, removed, or updated:

.. code-block:: javascript

   db.csbios.find( { _id: 1 } )
   db.csbios.remove( { _id: { $gt: 3 } } )
   db.csbios.update( { _id: 1, name: { first: 'John', last: 'Backus' } }, 
                       ... )

.. _documents-update-actions:

Document as update actions
-------------------------- 

The update actions documents contain :ref:`update operators
<update-operators>` expressions.

Consider the following example of an update actions document:

.. code-block:: javascript

   { $set: { 'name.middle': 'Warner' },
     $push: { awards: { award: 'IBM Fellow',
                        year: '1963',
                        by: 'IBM' }

When passed as an argument to the :method:`update()
<db.collection.update()>` method, the update actions document:

- Modifies the field ``name`` whose value is another document.
  Specifically, the :operator:`$set` operator updates the ``middle``
  field in the ``name`` subdocument.

- Adds an element to the field ``awards`` whose value is an array.
  Specifically, the :operator:`$push` operator adds another document as
  element to the field ``awards``.

.. code-block:: javascript

   db.csbios.update( { _id: 1 },
                     { $set: { 'name.middle': 'Warner' },
                       $push: { awards: { award: 'IBM Fellow',
                                          year: '1963',
                                          by: 'IBM' } } } 
                   )

.. _documents-index:

Document as index
----------------- 

The index documents contain ``field:value`` pairs where: 

- the ``field`` is the field to index on

- the ``value`` is either 1 for ascending or -1 for descending.

The following document specifies the multi-key index on the ``_id``
field and the ``last`` field contained in the subdocument ``name``
field:

.. code-block:: javascript

   { _id:1, 'name.last': 1 }

When passed as an argument to the :method:`ensureIndex()
<db.collection.ensureIndex()>` method, the index documents specifies
the index to create:

.. code-block:: javascript

   db.csbios.ensureIndex( { _id: 1, 'name.last': 1 } )

.. _documents-sort-order:

Document as sort order
---------------------- 

The sort order documents contain ``field:value`` pairs where: 

- the ``field`` is the field to sort

- the ``value`` is either 1 for ascending or -1 for descending.

The following document specifies the sort order using the fields from a
subdocument ``name``: first sort by the ``last`` field ascending, then
by the ``first`` field also ascending:

.. code-block:: javascript

   { 'name.last': 1, 'name.first':1 }

When passed as an argument to the :method:`sort() <cursor.sort()>`
method, the sort order document sorts the results of the
:method:`find() <db.collection.find()>` method:

.. code-block:: javascript

   db.csbios.find().sort( { 'name.last': 1, 'name.first': 1 } )

