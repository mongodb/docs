.. include:: /includes/java-sync-links.rst
.. include:: /includes/java-async-links.rst

.. _read-operations-projection:
.. _projection:
.. _projections:

===================================
Project Fields to Return from Query
===================================

.. default-domain:: mongodb

This page provides examples in:

.. tabs-pillstrip:: languages

By default, queries in MongoDB return all fields in matching documents.
To limit the amount of data that MongoDB sends to applications, you can
include a :term:`projection` document to specify or restrict fields to
return.

.. |query_operations| replace:: query operations with projection

.. include:: /includes/driver-examples/driver-example-query-intro.rst

.. include:: /includes/driver-examples/driver-example-query-42.rst

Return All Fields in Matching Documents
---------------------------------------

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         If you do not specify a :term:`projection` document, the
         :method:`db.collection.find()` method returns all fields in the
         matching documents.

     - id: compass
       content: |
         If you do not specify a :term:`projection` document, Compass
         returns all fields in the matching documents.

     - id: python
       content: |
         If you do not specify a :term:`projection` document, the
         :py:meth:`~pymongo.collection.Collection.find` method returns
         all fields in the matching documents.

     - id: java-sync
       content: |
         If you do not specify a :term:`projection`, the
         com.mongodb.client.MongoCollection.find_ method returns all
         fields in the matching documents.

     - id: java-async
       content: |
         If you do not specify a :term:`projection`, the `com.mongodb.reactivestreams.client.MongoCollection.find
         <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#find(org.bson.conversions.Bson)>`__
         method returns all fields in the matching documents.

     - id: nodejs
       content: |
         If you do not specify a :term:`projection` document, the
         :node-api:`find() <Collection.html#find>` method yields all
         fields in the matching documents.

     - id: php
       content: |
         If you do not specify a :term:`projection` document, the
         :phpmethod:`find() <phpmethod.MongoDB\\Collection::find>`
         method returns all fields in the matching documents.

     - id: perl
       content: |
         If you do not specify a :term:`projection` document, the
         :perl-api:`find()<Collection#find>`
         method returns all fields in the matching documents.

     - id: ruby
       content: |
         If you do not specify a :term:`projection` document, the
         :ruby-api:`find()<Collection.html#find-instance_method>`
         method returns all fields in the matching documents.

     - id: scala
       content: |
         If you do not specify a :term:`projection`, the
         :scala-api:`collection.find()<find[C](filter:org.mongodb.scala.bson.conversions.Bson)(implicite:org.mongodb.scala.bson.DefaultHelper.DefaultsTo[C,TResult],implicitct:scala.reflect.ClassTag[C]):org.mongodb.scala.FindObservable[C]>`
         method returns all fields in the matching documents.

     - id: csharp
       content: |
         If you do not specify a :term:`projection` filter, the
         :csharp-api:`MongoCollection.Find() <M_MongoDB_Driver_MongoCollection_1_Find>`
         method returns all fields in the matching documents.

The following example returns all fields from all documents in the
``inventory`` collection where the ``status`` equals ``"A"``:

.. include:: /includes/driver-examples/driver-example-query-43.rst

The operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT * from inventory WHERE status = "A"

Return the Specified Fields and the ``_id`` Field Only
------------------------------------------------------

A projection can explicitly include several fields by setting the
``<field>`` to ``1`` in the projection document. The following
operation returns all documents that match the query. In the result
set, only the ``item``, ``status`` and, by default, the ``_id`` fields
return in the matching documents.

.. include:: /includes/driver-examples/driver-example-query-44.rst

The operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT _id, item, status from inventory WHERE status = "A"

Suppress ``_id`` Field
----------------------

You can remove the ``_id`` field from the results by setting it to
``0`` in the projection, as in the following example:

.. include:: /includes/driver-examples/driver-example-query-45.rst

The operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT item, status from inventory WHERE status = "A"

.. note::

   With the exception of the ``_id`` field, you cannot combine inclusion
   and exclusion statements in projection documents.

Return All But the Excluded Fields
----------------------------------

Instead of listing the fields to return in the matching document, you
can use a projection to exclude specific fields. The following example
which returns all fields except for the ``status`` and the ``instock``
fields in the matching documents:

.. include:: /includes/driver-examples/driver-example-query-46.rst

.. note::

   With the exception of the ``_id`` field, you cannot combine inclusion
   and exclusion statements in projection documents.

Return Specific Fields in Embedded Documents
--------------------------------------------

You can return specific fields in an embedded document. Use the
:ref:`dot notation <document-dot-notation>` to refer to the embedded
field and set to ``1`` in the projection document.

The following example returns:

- The ``_id`` field (returned by default),
- The ``item`` field,
- The ``status`` field,
- The ``uom`` field in the ``size`` document.

The ``uom`` field remains embedded in the ``size`` document.

.. include:: /includes/driver-examples/driver-example-query-47.rst

Starting in MongoDB 4.4, you can also specify embedded fields using the
nested form, e.g. ``{ item: 1, status: 1, size: { uom: 1 } }``.

Suppress Specific Fields in Embedded Documents
----------------------------------------------

You can suppress specific fields in an embedded document. Use the
:ref:`dot notation <document-dot-notation>` to refer to the embedded
field in the projection document and set to ``0``.

The following example specifies a projection to exclude the ``uom``
field inside the ``size`` document. All other fields are returned in
the matching documents:

.. include:: /includes/driver-examples/driver-example-query-48.rst

Starting in MongoDB 4.4, you can also specify embedded fields using the
nested form, e.g. ``{ size: { uom: 0 } }``.

Projection on Embedded Documents in an Array
--------------------------------------------

Use :ref:`dot notation <document-dot-notation>` to project specific
fields inside documents embedded in an array.

The following example specifies a projection to return:

- The ``_id`` field (returned by default),
- The ``item`` field,
- The ``status`` field,
- The ``qty`` field in the documents embedded in the ``instock`` array.

.. include:: /includes/driver-examples/driver-example-query-49.rst

Project Specific Array Elements in the Returned Array
-----------------------------------------------------

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* way to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``{ "instock.0": 1 }`` projection will *not* project the array
         with the first element.

     - id: compass
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

     - id: python
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* way to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``{ "instock.0": 1 }`` projection will *not* project the array
         with the first element.

     - id: java-sync
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* way to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``include("instock.0")`` projection will *not* project the array
         with the first element.

     - id: java-async
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* way to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``include("instock.0")`` projection will *not* project the array
         with the first element.

     - id: nodejs
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* way to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``{ "instock.0": 1 }`` projection will *not* project the array
         with the first element.

     - id: php
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* way to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``[ "instock.0" => 1 ]`` projection will *not* project the array
         with the first element.

     - id: perl
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* way to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``{ "instock.0" => 1 }`` projection will *not* project the array
         with the first element.

     - id: ruby
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* way to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``{ "instock.0" => 1 }`` projection will *not* project the array
         with the first element.

     - id: scala
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* way to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``include("instock.0")`` projection will *not* project the array
         with the first element.

     - id: csharp
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* way to project specific elements
         to include in the returned array.

         For example, the following operation will not project the array
         with the first element:

         .. code-block:: c#

            Builders<BsonDocument>.Projection.Include("instock.0")

     - id: go
       content: |
         .. include:: /includes/fact-projection-ops.rst

         .. include:: /includes/fact-projection-slice-example.rst

         .. include:: /includes/driver-examples/driver-example-query-50.rst

         :projection:`$elemMatch`, :projection:`$slice`, and
         :projection:`$` are the *only* way to project specific elements
         to include in the returned array. For instance, you *cannot*
         project specific array elements using the array index; e.g.
         ``include("instock.0")`` projection will *not* project the array
         with the first element.

Additional Considerations
-------------------------

Starting in MongoDB 4.4, MongoDB enforces additional restrictions with
regards to projections. See :limit:`Projection Restrictions` for
details.


.. seealso::

   

   - :ref:`find-projection`

   - :doc:`/tutorial/query-documents`
