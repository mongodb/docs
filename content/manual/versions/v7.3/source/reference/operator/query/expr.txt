=====
$expr
=====

.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: shell

.. meta::
   :description: Use the $expr operator to use aggregation expressions in queries. $expr allows for advanced filtering and comparison based on document fields.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. versionchanged:: 5.0

.. query:: $expr

   Allows the use of :ref:`expressions <aggregation-expressions>` within
   a :term:`query predicate`.

Compatibility
-------------

.. |operator-method| replace:: ``$expr``

.. include:: /includes/fact-compatibility.rst

Syntax
------

.. code-block:: javascript

   { $expr: { <expression> } }

The argument can be any valid expression.

Behavior
--------

$expr in $lookup Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~

When ``$expr`` appears in a :pipeline:`$match` stage that is part of a
:pipeline:`$lookup` subpipeline, ``$expr`` can refer to ``let``
variables defined by the ``$lookup`` stage. For an example, see
:ref:`lookup-multiple-joins`.

.. include:: /includes/expr-operators-and-indexes.rst

Examples
--------

.. _expr-reference-single-document-example:

Compare Two Fields from a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/use-expr-in-find-query.rst

Use $expr With Conditional Statements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some queries require the ability to execute conditional logic when 
defining a query filter. The aggregation pipeline provides the
:expression:`$cond` operator to express conditional statements. By using
``$expr`` with the :expression:`$cond` operator, you can
specify a conditional filter for your query statement.

Create a sample ``supplies`` collection with the following documents:

.. code-block:: javascript

   db.supplies.insertMany( [
      { _id : 1, item : "binder", qty : NumberInt("100"), price : NumberDecimal("12") },
      { _id : 2, item : "notebook", qty : NumberInt("200"), price : NumberDecimal("8") },
      { _id : 3, item : "pencil", qty : NumberInt("50"), price : NumberDecimal("6") },
      { _id : 4, item : "eraser", qty : NumberInt("150"), price : NumberDecimal("3") },
      { _id : 5, item : "legal pad", qty : NumberInt("42"), price : NumberDecimal("10") }
   ] )

Assume that for an upcoming sale next month, you want to discount the
prices such that:

- If ``qty`` is greater than or equal to 100, the discounted price will
  be 0.5 of the ``price``.

- If ``qty`` is less than 100, the discounted price is 0.75 of the
  ``price``.

Before applying the discounts, you would like to know which items in the
``supplies`` collection have a discounted price of less than ``5``.

The following example uses ``$expr`` with :expression:`$cond` to
calculate the discounted price based on the ``qty`` and 
:expression:`$lt` to return documents whose calculated discount price
is less than ``NumberDecimal("5")``:

.. code-block:: javascript

   // Aggregation expression to calculate discounted price 

   let discountedPrice = { 
      $cond: { 
         if: { $gte: ["$qty", 100] }, 
         then: { $multiply: ["$price", NumberDecimal("0.50")] }, 
         else: { $multiply: ["$price", NumberDecimal("0.75")] } 
      } 
   };

   // Query the supplies collection using the aggregation expression

   db.supplies.find( { $expr: { $lt:[ discountedPrice,  NumberDecimal("5") ] } });


The following table shows the discounted price for each document and
whether discounted price is less than ``NumberDecimal("5")`` (i.e.
whether the document meets the query condition).

.. list-table::
 :header-rows: 1
 :widths: 80 20 30

 * - Document
   - Discounted Price
   - < NumberDecimal("5")
 * - {"_id": 1, "item": "binder", "qty": 100, "price": NumberDecimal("12") }
   - NumberDecimal("6.00")
   - ``false``
 * - {"_id": 2, "item": "notebook", "qty": 200, "price": NumberDecimal("8") }
   - NumberDecimal("4.00")
   - ``true``
 * - {"_id": 3, "item": "pencil", "qty": 50, "price": NumberDecimal("6") }
   - NumberDecimal("4.50")
   - ``true``  
 * - {"_id": 4, "item": "eraser", "qty": 150, "price": NumberDecimal("3") }
   - NumberDecimal("1.50")
   - ``true``
 * - {"_id": 5, "item": "legal pad", "qty": 42, "price": NumberDecimal("10") }
   - NumberDecimal("7.50")
   - ``false``  

The :method:`db.collection.find()` operation returns the documents whose
calculated discount price is less than ``NumberDecimal("5")``:

.. code-block:: javascript
   :copyable: false

   { _id : 2, item : "notebook", qty : 200 , price : NumberDecimal("8") }
   { _id : 3, item : "pencil", qty : 50 , price : NumberDecimal("6") }
   { _id : 4, item : "eraser", qty : 150 , price : NumberDecimal("3") }

Even though :expression:`$cond` calculates an effective discounted
price, that price is not reflected in the returned documents. Instead,
the returned documents represent the matching documents in their
original state. The find operation did not return the ``binder``
or ``legal pad`` documents, as their discounted price was greater than
``5``.
