================
FAQ: Concurrency
================

.. default-domain:: mongodb

.. versionchanged:: 2.2

MongoDB allows multiple clients to read and write a single corpus of
data using a locking system to ensure that all clients receive the
same view of the data *and* to prevent multiple applications
from modifying the exact same pieces of data at the same time. Locks
help guarantee that all writes to a single document occur either in
full or not at all.

.. seealso:: `Presentation on Concurrency and Internals in 2.2 <http://www.mongodb.com/presentations/concurrency-internals-mongodb-2-2>`_

.. _faq-concurrency-locking:

What type of locking does MongoDB use?
--------------------------------------

MongoDB uses a readers-writer [#multi-reader-lock-names]_ lock that
allows concurrent reads access to a database but gives exclusive
access to a single write operation.

When a read lock exists, many read operations may use this lock. However, when
a write lock exists, a single write operation holds the lock
exclusively, and no other read *or* write operations may share the lock.

Locks are "writer greedy," which means write locks have preference
over reads. When both a read and write are waiting for a lock, MongoDB
grants the lock to the write.

.. [#multi-reader-lock-names] You may be familiar with a
   "readers-writer" lock as "multi-reader" or "shared exclusive"
   lock. See the Wikipedia page on `Readers-Writer Locks
   <http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock>`_ for
   more information.

How granular are locks in MongoDB?
----------------------------------

.. versionchanged:: 2.2

Beginning with version 2.2, MongoDB implements locks on a per-database
basis for most read and write operations. Some global operations,
typically short lived operations involving multiple databases, still
require a global "instance" wide lock. Before 2.2, there is only one
"global" lock per :program:`mongod` instance.

For example, if you have six databases and one takes a database-level
write lock, the other five are still available for read and write. A
global lock makes all six databases unavailable during the operation.

How do I see the status of locks on my :program:`mongod` instances?
-------------------------------------------------------------------

For reporting on lock utilization information on locks, use any of the
following methods:

- :method:`db.serverStatus()`,
- :method:`db.currentOp()`,
- :doc:`mongotop </reference/program/mongotop>`,
- :doc:`mongostat </reference/program/mongostat>`, and/or
- the `MongoDB Management Service (MMS) <http://mms.mongodb.com/>`_

Specifically, the :data:`~serverStatus.locks` document in the :doc:`output of
serverStatus </reference/command/serverStatus>`, or the :data:`~currentOp.locks` field
in the :doc:`current operation reporting </reference/method/db.currentOp>`
provides insight into the type of locks and amount of lock
contention in your :program:`mongod` instance.

To terminate an operation, use :method:`db.killOp()`.

.. _faq-concurrency-yielding:

Does a read or write operation ever yield the lock?
---------------------------------------------------

In some situations, read and write operations can yield their locks.

Long running read and write operations, such as queries, updates, and
deletes, yield under many conditions. MongoDB uses an adaptive
algorithms to allow operations to yield locks based on predicted disk
access patterns (i.e. page faults.)

MongoDB operations can also yield locks between individual document
modification in write operations that affect multiple documents like
:method:`~db.collection.update()` with the ``multi`` parameter.

MongoDB uses heuristics based on its access pattern to predict whether
data is likely in physical memory before performing a read. If MongoDB
*predicts* that the data is not in physical memory an operation will
yield its lock while MongoDB loads the data to memory. Once data is
available in memory, the operation will reacquire the lock to complete
the operation.

.. versionchanged:: 2.6
   MongoDB does not yield locks when scanning an index even if it
   predicts that the index is not in memory.

.. _faq-concurrency-operations-locks:

Which operations lock the database?
-----------------------------------

.. versionchanged:: 2.2

The following table lists common database operations and the types of
locks they use.

.. todo In the table below (in the include), the issue of blocked
   JavaScript might no longer apply in version 2.4, which will use V8.

.. include:: /includes/table/lock-behavior-per-operation.rst

Which administrative commands lock the database?
------------------------------------------------

Certain administrative commands can exclusively lock the database for
extended periods of time. In some deployments, for large databases,
you may consider taking the :program:`mongod` instance offline so that
clients are not affected. For example, if a :program:`mongod` is part
of a :term:`replica set`, take the :program:`mongod` offline and let
other members of the set service load while maintenance is in progress.

The following administrative operations require an exclusive
(i.e. write) lock on the database for extended periods:

- :method:`db.collection.ensureIndex()`, when issued
  *without* setting ``background`` to ``true``,
- :dbcommand:`reIndex`,
- :dbcommand:`compact`,
- :method:`db.repairDatabase()`,
- :method:`db.createCollection()`, when creating a very large
  (i.e. many gigabytes) capped collection,
- :method:`db.collection.validate()`, and
- :method:`db.copyDatabase()`. This operation may lock all
  databases. See :ref:`faq-concurrency-lock-multiple-dbs`.

The following administrative commands lock the database but only hold
the lock for a very short time:

- :method:`db.collection.dropIndex()`,
- :method:`db.getLastError()`,
- :method:`db.isMaster()`,
- :method:`rs.status()` (i.e. :dbcommand:`replSetGetStatus`),
- :method:`db.serverStatus()`,
- :method:`db.auth()`, and
- :method:`db.addUser()`.

.. _faq-concurrency-lock-multiple-dbs:

Does a MongoDB operation ever lock more than one database?
----------------------------------------------------------

The following MongoDB operations lock multiple databases:

- :method:`db.copyDatabase()` must lock the entire :program:`mongod`
  instance at once.

- :method:`db.repairDatabase()` obtains a global write lock and will block
  other operations until it completes.

- :term:`Journaling <journal>`, which is an internal operation, locks
  all databases for short intervals. All databases share a single
  journal.

- :doc:`User authentication </core/authentication>` requires a read
  lock on the ``admin`` database for deployments using :ref:`2.6 user
  credentials <admin-system-users-collection>`. For deployments using
  the 2.4 schema for user credentials, authentication locks the
  ``admin`` database as well as the database the user is accessing.

- All writes to a replica set's :term:`primary` lock both the database
  receiving the writes and then the ``local`` database for a short
  time. The lock for the ``local`` database allows the
  :program:`mongod` to write to the primary's :term:`oplog` and
  accounts for a small portion of the total time of the operation.

How does sharding affect concurrency?
-------------------------------------

:term:`Sharding <sharding>` improves concurrency by distributing
collections over multiple :program:`mongod` instances, allowing shard
servers (i.e. :program:`mongos` processes) to perform any number of
operations concurrently to the various downstream :program:`mongod`
instances.

Each :program:`mongod` instance is independent of the others in the
shard cluster and uses the MongoDB :ref:`readers-writer lock
<faq-concurrency-locking>`. The operations on one :program:`mongod`
instance do not block the operations on any others.

.. _faq-concurrency-replication:

How does concurrency affect a replica set primary?
--------------------------------------------------

In :term:`replication`, when MongoDB writes to a collection on the
:term:`primary`, MongoDB also writes to the primary's :term:`oplog`,
which is a special collection in the ``local`` database.  Therefore,
MongoDB must lock both the collection's database and the ``local``
database. The :program:`mongod` must lock both databases at the same
time to keep the database consistent and ensure that write operations, even
with replication, are "all-or-nothing" operations.

How does concurrency affect secondaries?
----------------------------------------

In :term:`replication`, MongoDB does not apply writes serially to
:term:`secondaries <secondary>`. Secondaries collect oplog entries in
batches and then apply those batches in parallel. Secondaries do not
allow reads while applying the write operations, and apply write
operations in the order that they appear in the oplog.

MongoDB can apply several writes in parallel on replica set
secondaries, in two phases:

1. During the first *prefer* phase, under a read lock, the
   :program:`mongod` ensures that all documents affected by the
   operations are in memory. During this phase, other clients may
   execute queries against this member.

2. A thread pool using write locks applies all write operations in the
   batch as part of a coordinated write phase.

What kind of concurrency does MongoDB provide for JavaScript operations?
------------------------------------------------------------------------

.. versionchanged:: 2.4
   The V8 JavaScript engine added in 2.4 allows multiple JavaScript
   operations to run at the same time. Prior to 2.4, a single
   :program:`mongod` could only run a *single* JavaScript operation at
   once.
