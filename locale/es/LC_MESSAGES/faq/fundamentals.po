# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 16:24+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 2b44a977f1964647b2a21c18e3232583
#: ../source/faq/fundamentals.txt:3
msgid "FAQ: MongoDB Fundamentals"
msgstr ""

# 199a2b9dfab744ff91f2d040e4629609
#: ../source/faq/fundamentals.txt
msgid "On this page"
msgstr ""

# 55cad076a6ce4042b01564d4b8e1c232
#: ../source/faq/fundamentals.txt:13
msgid "This document answers some common questions about MongoDB."
msgstr ""

# e18b5fee330e4512b08eeef443b1c703
#: ../source/faq/fundamentals.txt:16
msgid "What platforms does MongoDB support?"
msgstr ""

# 0461e20fbfc645f18f207de493cfb5da
#: ../source/faq/fundamentals.txt:18
msgid ""
"For the list of supported platforms, see :ref:`prod-notes-supported-"
"platforms`."
msgstr ""

# 0fc4b9fcf90045fc80ce6693c9ee3014
#: ../source/faq/fundamentals.txt:22
msgid "How does a collection differ from a table?"
msgstr ""

# bbbb1d2112f54023b2823fa3acee0ec2
#: ../source/faq/fundamentals.txt:24
msgid ""
"Instead of tables, a MongoDB database stores its data in "
":term:`collections <collection>`. A collection holds one or more "
":ref:`BSON documents <bson-document-format>`. Documents are analogous to "
"records or rows in a relational database table. Each document has "
":ref:`one or more fields <document-structure>`; fields are similar to the"
" columns in a relational database table."
msgstr ""

# d276f39bad114c59bfa8e1c2cb0afcd3
#: ../source/faq/fundamentals.txt:31
msgid ":doc:`/reference/sql-comparison`, :doc:`/introduction`"
msgstr ""

# 3fc817fa0b8d4c0499a9d68d725a46cb
#: ../source/faq/fundamentals.txt:34
msgid "How do I create a database and a collection?"
msgstr ""

# 41493713f423471397d41b27f4201012
#: ../source/faq/fundamentals.txt:36
msgid ""
"If a database does not exist, MongoDB creates the database when you first"
" store data for that database."
msgstr ""

# 89ce3d9c3a1c42d49d6c36d247c6aef3
#: ../source/faq/fundamentals.txt:39
msgid ""
"If a collection does not exist, MongoDB creates the collection when you "
"first store data for that collection. [#explicit-creation]_"
msgstr ""

# 3a57a2f8547347158daa5c7b33f51d63
#: ../source/faq/fundamentals.txt:42
msgid ""
"As such, you can switch to a non-existent database (``use <dbname>``) and"
" perform the following operation:"
msgstr ""

# 53eb323bc41c4f92ad6fb6e2fc8ee814
#: ../source/faq/fundamentals.txt:52
msgid ""
"The ``insert`` operation creates both the database ``myNewDB`` and the "
"collection ``myNewCollection1`` if they do not already exist."
msgstr ""

# 869502cac3d04ebcb279e480ab0fd542
#: ../source/faq/fundamentals.txt:55
msgid ""
"The ``createIndex`` operation, which occurs after the ``myNewDB`` has "
"been created, creates the index and the collection ``myNewCollection2`` "
"if the collection does not exist. If ``myNewDb`` did not exist, the "
"``createIndex`` operation would have also created the ``myNewDB``."
msgstr ""

# ab946b56bbbd46e8b91b1ceaf4a0ebab
#: ../source/faq/fundamentals.txt:62
msgid ""
"You can also create a collection explicitly using "
":method:`db.createCollection` if you want to specify specific options, "
"such as maximum size or document validation rules."
msgstr ""

# 212b311c64564107b449f8c719fa6345
#: ../source/faq/fundamentals.txt:69
msgid "How do I define or alter the collection schema?"
msgstr ""

# d17de30c46494bb7a26a94c94638b528
#: ../source/faq/fundamentals.txt:71
msgid ""
"You do not need to specify a schema for a collection in MongoDB. Although"
" it is common for the documents in a collection to have a largely "
"homogeneous structure, it is not a requirement; i.e. documents in a "
"single collection do not need to have the same set of fields. The data "
"type for a field can differ across documents in a collection as well."
msgstr ""

# f985a1db790b484f80e249176b37b71b
#: ../source/faq/fundamentals.txt:78
msgid ""
"To change the structure of the documents in a collection, update the "
"documents to the new structure. For instance, add new fields, remove "
"existing ones, or update the value of a field to a new type."
msgstr ""

# 4814f15ff72447f58d91d76115325e43
#: ../source/faq/fundamentals.txt:84
msgid ""
"Starting in MongoDB 3.2, however, you can enforce :doc:`document "
"validation rules </core/document-validation>` for a collection during "
"update and insert operations."
msgstr ""

# 3c399f2595704646a116f523381a93a4
#: ../source/faq/fundamentals.txt:88
msgid ""
"Some collection properties, such as specifying a maximum size, can be "
"specified during the explicit creation of a collection and be modified. "
"See :method:`db.createCollection` and :dbcommand:`collMod`. If you are "
"not specifying these properties, you do not need to explicitly create the"
" collection since MongoDB creates new collections when you first store "
"data for the collections."
msgstr ""

# 2c9dae4381eb49ceb1300cc3920787c4
#: ../source/faq/fundamentals.txt:96
msgid "Does MongoDB support SQL?"
msgstr ""

# 0cd0fc983e794aa783897017dfa6b89c
#: ../source/faq/fundamentals.txt:98
msgid ""
"No. However, MongoDB does support a rich query language of its own. For "
"examples on using MongoDB's query language, see :doc:`/crud`"
msgstr ""

# 4ca61c9ed2354a4a8430b2715c88c15a
#: ../source/faq/fundamentals.txt:102
msgid ":doc:`/reference/sql-comparison`"
msgstr ""

# ca17579553ad453b9b5cb3a2ccb110ed
#: ../source/faq/fundamentals.txt:105
msgid "Does MongoDB support transactions?"
msgstr ""

# 3cae79d3f82445d1afd4c4990cda9774
#: ../source/faq/fundamentals.txt:107
msgid ""
"MongoDB does not support multi-document transactions. However, MongoDB "
"does provide atomic operations on a single document."
msgstr ""

# c6c166bf73a243d2ab9f4a19e7c8b76a
#: ../source/faq/fundamentals.txt:110
msgid ""
"For more details on MongoDB's isolation guarantees and behavior under "
"concurrency, see :doc:`/faq/concurrency`."
msgstr ""

# d2a1f9771f1240cd92f1f75b58a1fc46
#: ../source/faq/fundamentals.txt:116
msgid "Does MongoDB handle caching?"
msgstr ""

# e3214821e27d4da68575e9b4d451031c
#: ../source/faq/fundamentals.txt:118
msgid ""
"Yes. MongoDB keeps most recently used data in RAM. If you have created "
"indexes for your queries and your working data set fits in RAM, MongoDB "
"serves all queries from memory."
msgstr ""

# e94280fe1f8d4693a52bb1c7c686dd26
#: ../source/faq/fundamentals.txt:122
msgid ""
"MongoDB does not cache the query results in order to return the cached "
"results for identical queries."
msgstr ""

# 429e195e8cbb40c0813c64cc9e15c9c4
#: ../source/faq/fundamentals.txt:125
msgid ""
"For more information on MongoDB and memory use, see :ref:`WiredTiger and "
"Memory Use <wiredtiger-RAM>` and :ref:`MMAPv1 and Memory Use "
"<mmapv1-RAM>`."
msgstr ""

# af12c9e063d24cdda925980f8a8acc74
#: ../source/faq/fundamentals.txt:132
msgid "How does MongoDB address SQL or Query injection?"
msgstr ""

# 70e908a495fb45a59bd7db9976d9851f
#: ../source/faq/fundamentals.txt:135
msgid "BSON"
msgstr ""

# cbe06244c79347dcb21796e5677411a8
#: ../source/faq/fundamentals.txt:137
msgid ""
"As a client program assembles a query in MongoDB, it builds a BSON "
"object, not a string. Thus traditional SQL injection attacks are not a "
"problem. More details and some nuances are covered below."
msgstr ""

# 1136669f9d1d497daef02fc3e5a3c3d8
#: ../source/faq/fundamentals.txt:141
msgid ""
"MongoDB represents queries as :term:`BSON` objects. Typically "
":doc:`client libraries </applications/drivers>` provide a convenient, "
"injection free, process to build these objects. Consider the following "
"C++ example:"
msgstr ""

# 38cd7f5f8eb14f4982ef66b8efe19bee
#: ../source/faq/fundamentals.txt:151
msgid ""
"Here, ``my_query`` then will have a value such as ``{ name : \"Joe\" }``."
" If ``my_query`` contained special characters, for example ``,``, ``:``, "
"and ``{``, the query simply wouldn't match any documents. For example, "
"users cannot hijack a query and convert it to a delete."
msgstr ""

# 069d8fc694f94825b3d8806d6d6ecb95
#: ../source/faq/fundamentals.txt:158
msgid "JavaScript"
msgstr ""

# 392af4e364df40e2bfacbaa357de54e2
#: ../source/includes/fact-disable-javascript-with-noscript.rst:1
msgid ""
"You can disable all server-side execution of JavaScript, by passing the "
":option:`--noscripting <mongod --noscripting>` option on the command line"
" or setting :setting:`security.javascriptEnabled` in a configuration "
"file."
msgstr ""

# 6bafcbd169754f32b05b55d8dd3b3d7d
#: ../source/faq/fundamentals.txt:164
msgid ""
"All of the following MongoDB operations permit you to run arbitrary "
"JavaScript expressions directly on the server:"
msgstr ""

# f957eec589ee4408b65d7ad303c8806a
#: ../source/faq/fundamentals.txt:167
msgid ":query:`$where`"
msgstr ""

# 84fc7888903643b19f0f503f98ebf5e9
#: ../source/faq/fundamentals.txt:168
msgid ":dbcommand:`mapReduce`"
msgstr ""

# eb786afd24494a9dae11d0a1fe61d51f
#: ../source/faq/fundamentals.txt:169
msgid ":dbcommand:`group`"
msgstr ""

# 33d809e4c1564cfcb904ef6c0f633f56
#: ../source/faq/fundamentals.txt:171
msgid ""
"You must exercise care in these cases to prevent users from submitting "
"malicious JavaScript."
msgstr ""

# 666ba55abac74971ab84875a28ae43b6
#: ../source/faq/fundamentals.txt:174
msgid ""
"Fortunately, you can express most queries in MongoDB without JavaScript "
"and for queries that require JavaScript, you can mix JavaScript and non-"
"JavaScript in a single query. Place all the user-supplied fields directly"
" in a :term:`BSON` field and pass JavaScript code to the :query:`$where` "
"field."
msgstr ""

# 9b4d33786a794a10930f6fc0296d675c
#: ../source/faq/fundamentals.txt:180
msgid ""
"If you need to pass user-supplied values in a :query:`$where` clause, you"
" may escape these values with the ``CodeWScope`` mechanism. When you set "
"user-submitted values as variables in the scope document, you can avoid "
"evaluating them on the database server."
msgstr ""

#~ msgid ""
#~ "32-bit builds disable :term:`journaling "
#~ "<journal>` by default because journaling "
#~ "further limits the maximum amount of "
#~ "data that the database can"
#~ msgstr ""

# c5d07d9d71574a9d85ef60eadb576eda
#~ msgid ""
#~ "This document addresses basic high level"
#~ " questions about MongoDB and its use."
#~ msgstr ""

# c8bed7b7c95c4a8db73bbf120f274371
#~ msgid ""
#~ "If you don't find the answer "
#~ "you're looking for, check the "
#~ ":doc:`complete list of FAQs </faq>` or"
#~ " post your question to the `MongoDB"
#~ " User Mailing List "
#~ "<https://groups.google.com/forum/?fromgroups#!forum/mongodb-"
#~ "user>`_."
#~ msgstr ""

# b18e7ebc66fa4d3fbadb2af1dd681eac
#~ msgid "What kind of database is MongoDB?"
#~ msgstr ""

# 07d62fb9ba5443e996a6630bb862d148
#~ msgid ""
#~ "MongoDB is a :term:`document`\\-oriented DBMS."
#~ " Think of MySQL but with "
#~ ":term:`JSON`-like objects comprising the data"
#~ " model, rather than RDBMS tables. "
#~ "Significantly, MongoDB supports neither joins"
#~ " nor transactions. However, it features "
#~ "secondary indexes, an expressive query "
#~ "language, atomic writes on a per-"
#~ "document level, and fully-consistent "
#~ "reads."
#~ msgstr ""

# 622cf55c66724156b1f44cf8454e1ac0
#~ msgid ""
#~ "Operationally, MongoDB features master-slave"
#~ " replication with automated failover and"
#~ " built-in horizontal scaling via "
#~ "automated range-based partitioning."
#~ msgstr ""

# 22305e81413d40d5be53d3d1c4f3e10f
#~ msgid ""
#~ "MongoDB uses :term:`BSON`, a binary "
#~ "object format similar to, but more "
#~ "expressive than :term:`JSON`."
#~ msgstr ""

# d239e91b345b431c943a99cae7399040
#~ msgid "Do MongoDB databases have tables?"
#~ msgstr ""

# c7a62b8ee552481bac1b349362805a1f
#~ msgid ""
#~ "Instead of tables, a MongoDB database"
#~ " stores its data in :term:`collections "
#~ "<collection>`, which are the rough "
#~ "equivalent of RDBMS tables. A collection"
#~ " holds one or more :term:`documents "
#~ "<document>`, which corresponds to a "
#~ "record or a row in a relational"
#~ " database table, and each document "
#~ "has one or more fields, which "
#~ "corresponds to a column in a "
#~ "relational database table."
#~ msgstr ""

# 8eed337891b94bd2aee7b42f63748e3d
#~ msgid ""
#~ "Collections have important differences from"
#~ " RDBMS tables. Documents in a single"
#~ " collection may have a unique "
#~ "combination and set of fields. Documents"
#~ " need not have identical fields. You"
#~ " can add a field to some "
#~ "documents in a collection without adding"
#~ " that field to all documents in "
#~ "the collection."
#~ msgstr ""

# 85c4ab2ec12441e5be97b5d998324fb8
# 9277643fa6ec4c0eaca5bf70ec4889d1
#~ msgid "See"
#~ msgstr ""

# cbda7d23d02f454dafb1a24ea9a5b5bd
#~ msgid "Do MongoDB databases have schemas?"
#~ msgstr ""

# 5cce3a433f0e44159b8db0f72d7ead3c
#~ msgid ""
#~ "MongoDB uses dynamic schemas. You can"
#~ " create collections without defining the"
#~ " structure, i.e. the fields or the"
#~ " types of their values, of the "
#~ "documents in the collection. You can "
#~ "change the structure of documents simply"
#~ " by adding new fields or deleting "
#~ "existing ones. Documents in a collection"
#~ " need not have an identical set "
#~ "of fields."
#~ msgstr ""

# 7de239dfb23e4706bf1ed4948b0649d8
#~ msgid ""
#~ "In practice, it is common for the"
#~ " documents in a collection to have"
#~ " a largely homogeneous structure; however,"
#~ " this is not a requirement. MongoDB's"
#~ " flexible schemas mean that schema "
#~ "migration and augmentation are very easy"
#~ " in practice, and you will rarely,"
#~ " if ever, need to write scripts "
#~ "that perform \"alter table\" type "
#~ "operations, which simplifies and facilitates"
#~ " iterative software development with "
#~ "MongoDB."
#~ msgstr ""

# 13dcfec0aafe41c3959c5b8db66c5a89
#~ msgid "What languages can I use to work with MongoDB?"
#~ msgstr ""

# b3c853c40d4549c1b527b349a01e6f58
#~ msgid ""
#~ "MongoDB :term:`client drivers <driver>` exist"
#~ " for all of the most popular "
#~ "programming languages, and many other "
#~ "ones. See the :ecosystem:`latest list of"
#~ " drivers </drivers>` for details."
#~ msgstr ""

# ab856e67101f4746ae359f4e3af98343
#~ msgid ":doc:`/applications/drivers`."
#~ msgstr ""

# b1f5fa59a0614d66aee062461176f335
#~ msgid "No."
#~ msgstr ""

# 1ab2a18b46da43e886e382cc5623258a
#~ msgid "However, MongoDB does support a rich, ad-hoc query language of its own."
#~ msgstr ""

# f481a742892242b0b96fbd81100aadec
#~ msgid ":doc:`/reference/operator`"
#~ msgstr ""

# efdc70c7d8c849ff86f209d76d4ec6e3
#~ msgid "What are typical uses for MongoDB?"
#~ msgstr ""

# 1803aa4e12a04668bc3999fabd87b6ee
#~ msgid ""
#~ "MongoDB has a general-purpose design,"
#~ " making it appropriate for a large"
#~ " number of use cases. Examples "
#~ "include content management systems, mobile "
#~ "applications, gaming, e-commerce, analytics, "
#~ "archiving, and logging."
#~ msgstr ""

# e310ff1ce6594e1bbc6e5cf09ff9c254
#~ msgid ""
#~ "Do not use MongoDB for systems "
#~ "that require SQL, joins, and multi-"
#~ "object transactions."
#~ msgstr ""

# b91ee329a3754d6c94fb4626374ef9c4
#~ msgid "Does MongoDB support ACID transactions?"
#~ msgstr ""

# be0030d4510a449da674f9f0883b8d20
#~ msgid "MongoDB does not support multi-document transactions."
#~ msgstr ""

# 833476475b4c408d8ba60da2fc8cf51d
#~ msgid ""
#~ "However, MongoDB does provide atomic "
#~ "operations on a single document. Often"
#~ " these document-level atomic operations "
#~ "are sufficient to solve problems that"
#~ " would require ACID transactions in a"
#~ " relational database."
#~ msgstr ""

# 9e5bad14d34145ef9c876e6ac182e6d4
#~ msgid ""
#~ "For example, in MongoDB, you can "
#~ "embed related data in nested arrays "
#~ "or nested documents within a single "
#~ "document and update the entire document"
#~ " in a single atomic operation. "
#~ "Relational databases might represent the "
#~ "same kind of data with multiple "
#~ "tables and rows, which would require "
#~ "transaction support to update the data"
#~ " atomically."
#~ msgstr ""

# 49a551f3548643df838dfa5ae918b9e5
#~ msgid ""
#~ "MongoDB allows clients to read documents"
#~ " inserted or modified before it "
#~ "commits these modifications to disk, "
#~ "regardless of write concern level or "
#~ "journaling configuration. As a result, "
#~ "applications may observe two classes of"
#~ " behaviors:"
#~ msgstr ""

# e33ca67cb08540d289f1ae8daa663be8
#~ msgid ""
#~ "For systems with multiple concurrent "
#~ "readers and writers, MongoDB will allow"
#~ " clients to read the results of "
#~ "a write operation before the write "
#~ "operation returns."
#~ msgstr ""

# 0de84b7ff1bd4f6db7cf2e7a1699945d
#~ msgid ""
#~ "If the :program:`mongod` terminates before "
#~ "the journal commits, even if a "
#~ "write returns successfully, queries may "
#~ "have read data that will not exist"
#~ " after the :program:`mongod` restarts."
#~ msgstr ""

# fd673f8ccbc944b687363e07d8df9911
#~ msgid ""
#~ "Other database systems refer to these"
#~ " isolation semantics as *read uncommitted*."
#~ " For all inserts and updates, MongoDB"
#~ " modifies each document in isolation: "
#~ "clients never see documents in "
#~ "intermediate states. For multi-document "
#~ "operations, MongoDB does not provide any"
#~ " multi-document transactions or isolation."
#~ msgstr ""

# 38130baca98f404ea8e50f0dabf46a04
#~ msgid ""
#~ "When :program:`mongod` returns a successful"
#~ " *journaled write concern*, the data "
#~ "is fully committed to disk and "
#~ "will be available after :program:`mongod` "
#~ "restarts."
#~ msgstr ""

# aad05a677bb44b9b99006fd41c64f5f7
#~ msgid ""
#~ "For replica sets, write operations are"
#~ " durable only after a write "
#~ "replicates and commits to the journal"
#~ " of a majority of the members "
#~ "of the set. MongoDB regularly commits"
#~ " data to the journal regardless of"
#~ " journaled write concern: use the "
#~ ":setting:`~storage.journal.commitIntervalMs` to control"
#~ " how often a :program:`mongod` commits "
#~ "the journal."
#~ msgstr ""

# 46f83f0726cd41538c4d97cd2871a98d
#~ msgid "Does MongoDB require a lot of RAM?"
#~ msgstr ""

# ebef304f2d504d5595cb63cc14e4306e
#~ msgid ""
#~ "Not necessarily. It's certainly possible "
#~ "to run MongoDB on a machine with"
#~ " a small amount of free RAM."
#~ msgstr ""

# 3964806195d24a6c9a59b1ebb5191374
#~ msgid ""
#~ "MongoDB automatically uses all free "
#~ "memory on the machine as its "
#~ "cache. System resource monitors show "
#~ "that MongoDB uses a lot of memory,"
#~ " but its usage is dynamic. If "
#~ "another process suddenly needs half the"
#~ " server's RAM, MongoDB will yield "
#~ "cached memory to the other process."
#~ msgstr ""

# 736ecf19de5d4a7999f8350a1e63a850
#~ msgid ""
#~ "Technically, the operating system's virtual"
#~ " memory subsystem manages MongoDB's memory."
#~ " This means that MongoDB will use "
#~ "as much free memory as it can, "
#~ "swapping to disk as needed. Deployments"
#~ " with enough memory to fit the "
#~ "application's working data set in RAM"
#~ " will achieve the best performance."
#~ msgstr ""

# 77558a6e4f22430fb94d03c425a13dcb
#~ msgid ""
#~ ":doc:`/faq/diagnostics` for answers to "
#~ "additional questions about MongoDB and "
#~ "Memory use."
#~ msgstr ""

# d6979cbf11394159929146d631256e17
#~ msgid "How do I configure the cache size?"
#~ msgstr ""

# fae06b5ef1d14233b4beb2818652e832
#~ msgid ""
#~ "MongoDB has no configurable cache. "
#~ "MongoDB uses all *free* memory on "
#~ "the system automatically by way of "
#~ "memory-mapped files. Operating systems "
#~ "use the same approach with their "
#~ "file system caches."
#~ msgstr ""

# 147adc21df8c40fab1a50cd3290037f0
#~ msgid ""
#~ "Does MongoDB require a separate caching"
#~ " layer for application-level caching?"
#~ msgstr ""

# 567d8dccb5d14ed4b633fc8f747bdf8d
#~ msgid ""
#~ "No. In MongoDB, a document's "
#~ "representation in the database is "
#~ "similar to its representation in "
#~ "application memory. This means the "
#~ "database already stores the usable form"
#~ " of data, making the data usable "
#~ "in both the persistent store and "
#~ "in the application cache. This "
#~ "eliminates the need for a separate "
#~ "caching layer in the application."
#~ msgstr ""

# 98caac6a2bc144f29a9b36b839556a3f
#~ msgid ""
#~ "This differs from relational databases, "
#~ "where caching data is more expensive."
#~ " Relational databases must transform data"
#~ " into object representations that "
#~ "applications can read and must store "
#~ "the transformed data in a separate "
#~ "cache: if these transformation from data"
#~ " to application objects require joins, "
#~ "this process increases the overhead "
#~ "related to using the database which "
#~ "increases the importance of the caching"
#~ " layer."
#~ msgstr ""

# 1d7215e378b649e5b24d8c99e08b1e6b
#~ msgid ""
#~ "Yes. MongoDB keeps all of the most"
#~ " recently used data in RAM. If "
#~ "you have created indexes for your "
#~ "queries and your working data set "
#~ "fits in RAM, MongoDB serves all "
#~ "queries from memory."
#~ msgstr ""

# 8ea3747e62704f41bea83f7f48a7050f
#~ msgid ""
#~ "MongoDB does not implement a query "
#~ "cache: MongoDB serves all queries "
#~ "directly from the indexes and/or data"
#~ " files."
#~ msgstr ""

# 75b2053cf859467d8ee6e4bf6a3c0164
#~ msgid "Are writes written to disk immediately, or lazily?"
#~ msgstr ""

# 87d6b9cd961c48b0a62ea5b4e95c7ef1
#~ msgid ""
#~ "Writes are physically written to the "
#~ ":doc:`journal </core/journaling>` within 100 "
#~ "milliseconds, by default. At that point,"
#~ " the write is \"durable\" in the "
#~ "sense that after a pull-plug-"
#~ "from-wall event, the data will still"
#~ " be recoverable after a hard restart."
#~ " See :setting:`~storage.journal.commitIntervalMs` for"
#~ " more information on the journal "
#~ "commit window."
#~ msgstr ""

# 7f8a347fdc6d4692abfeca290a309a75
#~ msgid ""
#~ "While the journal commit is nearly "
#~ "instant, MongoDB writes to the data "
#~ "files lazily. MongoDB may wait to "
#~ "write data to the data files for"
#~ " as much as one minute by "
#~ "default. This does not affect "
#~ "durability, as the journal has enough"
#~ " information to ensure crash recovery. "
#~ "To change the interval for writing "
#~ "to the data files, see "
#~ ":setting:`~storage.syncPeriodSecs`."
#~ msgstr ""

# 072a3ca955814bf2a28bb34fde3e177a
#~ msgid "What language is MongoDB written in?"
#~ msgstr ""

# 32415053f38240ae9eee22eb88ca8848
#~ msgid ""
#~ "MongoDB is implemented in C++. "
#~ ":term:`Drivers <driver>` and client libraries"
#~ " are typically written in their "
#~ "respective languages, although some drivers"
#~ " use C extensions for better "
#~ "performance."
#~ msgstr ""

# 1471850977d74f1b8dccf61d78785c72
#~ msgid "What are the limitations of 32-bit versions of MongoDB?"
#~ msgstr ""

# 219f8a4551ab40b0ad8c726916057826
#~ msgid ""
#~ "MongoDB uses :ref:`memory-mapped files "
#~ "<faq-storage-memory-mapped-files>`. When"
#~ " running a 32-bit build of MongoDB,"
#~ " the total storage size for the "
#~ "server, including data and indexes, is"
#~ " 2 gigabytes. For this reason, do "
#~ "not deploy MongoDB to production on "
#~ "32-bit machines."
#~ msgstr ""

# 716087f18ab74c348b956d6477f9c7c3
#~ msgid ""
#~ "If you're running a 64-bit build "
#~ "of MongoDB, there's virtually no limit"
#~ " to storage size. For production "
#~ "deployments, 64-bit builds and operating "
#~ "systems are strongly recommended."
#~ msgstr ""

# cf12bffc8da640689003fef335fb756e
#~ msgid ""
#~ "\"`Blog Post: 32-bit Limitations "
#~ "<http://blog.mongodb.org/post/137788967/32-bit-limitations>`_\""
#~ msgstr ""

#~ msgid ""
#~ "32-bit builds disable :term:`journaling "
#~ "<journal>` by default because journaling "
#~ "further limits the maximum amount of "
#~ "data that the database can store."
#~ msgstr ""

