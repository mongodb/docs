.. _jndi:
.. _java-sync-jndi:

=============================================
Connect to MongoDB by Using a JNDI Datasource
=============================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: code example, wildfly, tomcat

Overview
--------

In this guide, you can learn how to connect the MongoDB Java driver
to your MongoDB instance by using a Java Naming and Directory Interface
(JNDI) Datasource.

MongoClientFactory includes a `JNDI
<https://docs.oracle.com/javase/8/docs/technotes/guides/jndi/index.html>`__
``ObjectFactory`` implementation that returns ``MongoClient`` instances
based on a :ref:`connection URI <connection-uri>`. Consult the following
guides to learn how to configure your application to connect using a
JNDI Datasource.

.. tabs::

   .. tab:: Wildfly (formerly JBoss)
      :tabid: wildfly

      1. In a `Wildfly <https://wildfly.org/>`__ installation, create a new module
         for MongoDB at ``modules/system/layers/base/org/mongodb/main``. Copy
         the following jar files into the module:

         - ``mongodb-driver-sync-{+full-version+}.jar``
         - ``mongodb-driver-core-{+full-version+}.jar``
         - ``bson-{+full-version+}.jar``
         - ``bson-record-codec-{+full-version+}.jar``
         
         Add the following ``module.xml`` file into the module:

         .. include:: /includes/fundamentals/code-snippets/wildfly-module-with-version.rst

      #. Add a binding to the naming subsystem configuration that references the
         preceding module, the ``MongoClientFactory`` class, and the
         :ref:`connection string <connection-uri>` for the MongoDB cluster.

         .. code-block:: xml

            <subsystem xmlns="urn:jboss:domain:naming:2.0">
               <bindings>
                  <object-factory name="java:global/MyMongoClient" module="org.mongodb" class="com.mongodb.client.MongoClientFactory">
                     <environment>
                        <property name="connectionString" value="<connection string uri>"/>
                     </environment>
                  </object-factory>
               </bindings>
               <remote-naming/>
            </subsystem>

         .. note::

            Replace the placeholder connection value in the ``property`` tag
            with a value that points to your MongoDB installation.

      This makes a MongoClient instance discoverable through the JNDI name
      ``MyMongoClient`` in the ``java:global`` context.

   .. tab:: Tomcat
      :tabid: tomcat

      1. Copy the following jar files into the ``lib`` directory
         of your `Tomcat <https://tomcat.apache.org/>`__ installation:

         - ``mongodb-driver-sync-{+full-version+}.jar``
         - ``mongodb-driver-core-{+full-version+}.jar``
         - ``bson-{+full-version+}.jar``
         - ``bson-record-codec-{+full-version+}.jar``

      #. In the ``context.xml`` file of your application, add a resource that references
         the ``MongoClientFactory`` class and the :ref:`connection string
         <connection-uri>` for the MongoDB cluster:

         .. code-block:: xml

            <Resource name="mongodb/MyMongoClient"
               auth="Container"
               type="com.mongodb.client.MongoClient"
               closeMethod="close"
               factory="com.mongodb.client.MongoClientFactory"
               singleton="true"
               connectionString="<connection string uri>"/>

         .. note::

            Replace the placeholder URI in the ``connectionString``
            attribute with a value that points to your MongoDB installation.

      #. In ``web.xml`` of your application, add a reference to the
         ``MongoClientFactory`` resource defined in the previous step:

         .. code-block:: xml

            <resource-ref>
              <res-ref-name>
                mongodb/MyMongoClient
              </res-ref-name>
              <res-type>
                com.mongodb.MongoClient
              </res-type>
              <res-auth>
                Container
              </res-auth>
            </resource-ref>

      This makes a ``MongoClient`` instance discoverable through the JNDI name
      ``mongodb/MyMongoClient`` in the ``java:comp/env`` context.

.. seealso::

   For JNDI implementations other than those listed here, you can create
   your own ``Factory`` wrapper based on the driver's built-in
   `MongoClientFactory
   <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoClientFactory.html>`__
   implementation.
