:noprevnext:

====================================
Insert and View Data in Your Cluster
====================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Insert and View Data
--------------------

*Estimated completion time: 5 minutes*

The steps in this tutorial show you how to insert data into
your cluster using one of the supported :driver:`MongoDB Drivers </>`.
MongoDB drivers allow you to interact with your
databases programmatically using a supported programming language.

Select the appropriate tab based on the programming language you use:

.. tabs::

   .. tab:: PyMongo Driver
      :tabid: python
 
      Insert Data into your Atlas Cluster with the PyMongo Driver
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         
      *Estimated completion time: 5 minutes*
         
      In the :ref:`previous section <gswa-connect>` you used
      the PyMongo driver to connect to your |service| cluster.
      In this section, you'll create a new collection, add data to
      it, and read the new data.
         
      .. include:: /includes/steps/gswa-driver-insert.rst
         
      View Your Cluster Data
      ^^^^^^^^^^^^^^^^^^^^^^
         
      Now that you have successfully inserted a document into
      your |service| cluster using the PyMongo driver, you can try
      reading that data with the PyMongo ``find_one()`` method.
         
      The following command returns one document from the 
      ``people`` collection that has a ``name.last`` value 
      of ``Turing``:

      .. code-block:: python

         people.find_one({ "name.last": "Turing" })

      This command returns the following output. This example 
      has been broken into multiple lines for readability.

      .. code-block:: python
         :copyable: false

         { 
           '_id': ObjectId('5ecd43aa2600f51da704b35f'), 
            'name': { 
               'first': 'Alan', 
               'last': 'Turing' 
           }, 
           'birth': datetime.datetime(1912, 6, 23, 0, 0), 
           'death': datetime.datetime(1954, 6, 7, 0, 0), 
           'contribs': [
               'Turing machine', 
               'Turing test', 
               'Turingery'
           ], 
           'views': 1250000 
         }

      .. note::
         
         You may see a different value for
         :manual:`ObjectId </reference/bson-types/#objectid>`,
         because it is a system-generated value.
         
      .. seealso::
         
         To learn more about querying data with PyMongo, see
         the :driver:`PyMongo documentation </python/>`.
         
      Summary
      ^^^^^^^

      Congratulations! You've used the PyMongo driver to interact with
      data in your |service| cluster.

   .. tab:: Node.js Driver
      :tabid: nodejs

      Insert Data into your Atlas Cluster with the Node.js Driver
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

      *Estimated completion time: 5 minutes*

      In the :ref:`previous section <gswa-connect>` you used
      the Node.js driver to connect to your |service| cluster.
      In this section you'll create a new collection, add data to
      it, and read the new data.

      The following sample application adds a document to a collection
      called ``people`` in the ``test`` database. To try it out, copy
      the following code into a file called ``insert-data.js``.

      .. note::

         Replace the placeholders on line 4 with your |service| connection
         string.

      .. literalinclude:: /includes/insert-data.js
         :language: javascript
         :linenos:
         :emphasize-lines: 4

      To run the sample application, use the following command:
     
      .. code-block:: shell
     
         node insert-data.js

      .. seealso::

         To learn more about querying data with Node.js, see
         the :driver:`Node.js documentation </node/>`.

      Summary
      ^^^^^^^
                  
      Congratulations! You've used the Node.js driver to interact with
      data in your |service| cluster.

   .. tab:: MongoDB Shell
      :tabid: shell

      Insert Data Into Your Cluster Using the Shell
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

      *Estimated completion time: 1 minute* 

      Now that you have successfully connected to your |service|
      cluster using {+mongosh+}, let's insert a
      document into your cluster.

      .. include:: /includes/steps/getting-started-shell-insert.rst

      View Data Using the Shell
      ^^^^^^^^^^^^^^^^^^^^^^^^^

      *Estimated completion time: 1 minute* 

      Read the data you just inserted into your
      cluster.

      The following command searches the ``people`` collection for
      documents that have a ``name.last`` value of ``Turing``:

      .. code-block:: none

         db.people.find({ "name.last": "Turing" })

      When you run this command, you should see the following
      output:

      .. code-block:: none
         :copyable: false

         {
           "_id" : ObjectId("5c9bca3c5345268c98ac7abc"),
           "name" : {
             "first" : "Alan",
             "last" : "Turing"
           },
           "birth" : ISODate("1912-06-23T04:00:00Z"),
           "death" : ISODate("1954-06-07T04:00:00Z"),
           "contribs" : [
             "Turing machine",
             "Turing test",
             "Turingery"
           ],
           "views" : NumberLong(1250000)
         }

      .. note::

         You may see a different value for
         :manual:`ObjectId </reference/bson-types/#objectid>`,
         because it is a system-generated value.

      .. seealso::

         To learn more about querying data in MongoDB, see
         :manual:`Query Documents </tutorial/query-documents/>`.

      Summary
      ^^^^^^^
         
      Congratulations! You've just set up an |service| cluster to
      host your data, and used {+mongosh+} to
      write and read data to and from your cluster.

   .. tab:: Atlas Console
      :tabid: atlas-gui

      Insert Data Using the Atlas Console
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

      |service| provides a :abbr:`GUI (Graphical user interface)`
      to interact with data in your cluster, called the
      :guilabel:`Data Explorer`. You can use the
      :guilabel:`Data Explorer` to import
      :ref:`sample data <sample-data>` provided by |service| into
      your cluster.

      To import sample data into your cluster using the
      :guilabel:`Data Explorer`:
         
      .. include:: /includes/steps/getting-started-explorer-import.rst

      .. seealso::

         To learn more about Data Explorer in |service|, see
         :doc:`/data-explorer`.

      View and Edit Your Cluster Data
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

      *Estimated completion time: 2 minutes*

      Now that you have imported some data into your cluster, you
      can try viewing and modifying it.

      .. include:: /includes/steps/getting-started-explorer-edit.rst

      Summary
      ^^^^^^^

      Congratulations! You have just set up an |service| cluster to
      host your data, populated that cluster with sample data, and
      learned how to interact with that data using the |service|
      :guilabel:`Data Explorer`.

Next Steps
----------

If you continue to grow your cluster, consider
:doc:`scaling your cluster </scale-cluster/>` to support more
users and operations.
