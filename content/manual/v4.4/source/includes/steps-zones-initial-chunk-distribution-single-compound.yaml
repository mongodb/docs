title: "Create the Zones"
level: 4
ref: initial-chunk-distribution-create-zones
content: |

   Use :method:`sh.addShardToZone()` to create the zones:

   .. code-block:: javascript

      sh.addShardToZone("shardA", "DC1")
      sh.addShardToZone("shardB", "DC2")
---
title: "Create the Zone Ranges"
level: 4
ref: initial-chunk-distribution-create-zones-ranges
content: |

   Use :method:`sh.updateZoneKeyRange()` to create the ranges
   for the empty ``contacts`` collection in the ``exampledb``
   database:

   .. code-block:: javascript

      sh.updateZoneKeyRange( 
          "exampledb.contacts",
          { zip: 10001 },
          { zip: 10090 },
          "DC1"
      );

      sh.updateZoneKeyRange( 
          "exampledb.contacts",
          { zip: 90001 },
          { zip: 96054 },
          "DC2"
      );

---
title: "Enable Sharding for the Database"
level: 4
optional: true
ref: initial-chunk-distribution-create-zones-enable-sharding
content: |

   Skip this step if you already enabled sharding on the database.

   Use :method:`sh.enableSharding()` to enable sharding for the
   database:

   .. code-block:: javascript

      sh.enableSharding("exampledb")

---
title: "Shard the Collection"
level: 4
ref: initial-chunk-distribution-create-zones-shard-collection
content: |

   .. note::
   
      If the collection does not exist, the sharding operation creates
      the collection.

      If the collection is empty and no index exists to support the 
      shard key, the sharding operation creates the index.

   Use :method:`sh.shardCollection()` to shard the collection ``contacts``:

   .. code-block:: javascript

      sh.shardCollection("exampledb.contacts",  { zip: 1 } );

---
title: "Review the Created Chunks and Distribution"
level: 4
ref: initial-chunk-distribution-create-zones-review
content: |

   To see the created chunks and distribution, run the
   :method:`sh.status()` operation:

   .. code-block:: javascript

      sh.status()

   The method returns:

   .. code-block:: javascript
     :emphasize-lines: 19-20, 28-30, 32,34,36-37

     --- Sharding Status --- 
       sharding version: {
         "_id" : 1,
         "minCompatibleVersion" : 5,
         "currentVersion" : 6,
         "clusterId" : ObjectId("5b80c06d35a961fd0ae1986d")
       }
       shards:
             {  "_id" : "shardA",  "host" : "shardA/mongodb0.example.net:27018,mongodb1.example.net:27018,mongodb2.example.net:27018",  "state" : 1,  "tags" : [ "DC1" ] }
             {  "_id" : "shardB",  "host" : "shardB/mongodb3.example.net:27018,mongodb4.example.net:27018,mongodb5.example.net:27018",  "state" : 1,  "tags" : [ "DC2" ] }
       active mongoses:
             "4.2.0" : 2
       autosplit:
             Currently enabled: yes
       balancer:
             Currently enabled:  yes
             Currently running:  no
             Failed balancer rounds in last 5 attempts:  0
             Migration Results for the last 24 hours: 
                     No recent migrations
       databases:
             {  "_id" : "config",  "primary" : "config",  "partitioned" : true }
             {  "_id" : "exampledb",  "primary" : "shardA",  "partitioned" : true,  "version" : {  "uuid" : UUID("6c351bcf-acd2-4fd9-82d8-9f6bd7321558"),  "lastMod" : 1 } }
                     exampledb.contacts
                             shard key: { "zip" : 1 }
                             unique: false
                             balancing: true
                             chunks:
                                     shardA   3
                                     shardB   2
                             { "zip" : { "$minKey" : 1 } } -->> { "zip" : 10001 } on : shardA Timestamp(1, 0) 
                             { "zip" : 10001 } -->> { "zip" : 10090 } on : shardA Timestamp(1, 1) 
                             { "zip" : 10090 } -->> { "zip" : 90001 } on : shardB Timestamp(1, 2) 
                             { "zip" : 90001 } -->> { "zip" : 96054 } on : shardB Timestamp(1, 3) 
                             { "zip" : 96054 } -->> { "zip" : { "$maxKey" : 1 } } on : shardA Timestamp(1, 4) 
                               tag: DC1  { "zip" : 10001 } -->> { "zip" : 10090 }
                               tag: DC2  { "zip" : 90001 } -->> { "zip" : 96054 }

   For the collection, sharding operation created 5 chunks (two chunks
   that correspond to the zone ranges and the other three to cover all
   other values) across shardA and shardB.


...