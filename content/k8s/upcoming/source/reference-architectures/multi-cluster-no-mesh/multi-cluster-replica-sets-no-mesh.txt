.. _reference-architectures-multi-cluster-replica-set-no-mesh:

================================================
Multi-Cluster ReplicaSets Without a Service Mesh
================================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

|Multi-clusters| allow you to add MongoDB instances in global clusters
that span multiple geographic regions for increased availability and
global distribution of data.

Prerequisites
-------------

Before you begin the following procedure, perform the following actions:

- Install ``kubectl``.
- Install `Mongosh <https://www.mongodb.com/docs/mongodb-shell/install/>`__
- Complete the :ref:`GKE Clusters procedure <reference-architectures-gke-clusters-no-mesh>` or the equivalent.
- Complete the :ref:`External DNS procedure <reference-architectures-external-dns-no-mesh>` or the equivalent.
- Complete the :ref:`TLS Certificates procedure <reference-architectures-ca-certs-no-mesh>` or the equivalent.
- Complete the :ref:`Deploy the MongoDB Operator <reference-architectures-deploy-operator-no-mesh>` procedure.
- Complete the :ref:`Multi-Cluster Ops Manager procedure <reference-architectures-multi-cluster-ops-manager-no-mesh>` procedure.
  You can skip this step if you use Cloud Manager instead of |onprem|.
- Set the required environment variables as follows:

.. literalinclude:: /includes/code-examples/reference-architectures/mongodb-replicaset-mc-no-mesh/env_variables.sh
   :language: bash

Source Code
-----------

You can find all included source code in the :github:`MongoDB Kubernetes Operator repository </mongodb/mongodb-enterprise-kubernetes/tree/{+github-branch+}/architectures/mongodb-replicaset-multi-cluster>`.

Procedure
----------

.. procedure::
   :style: normal

   .. step:: Create a CA certificate. 

      Run the following script to create the required |ca-cert| with your 
      :ref:`certificate issuer <reference-architectures-ca-certs>`. 

      .. literalinclude:: /includes/code-examples/reference-architectures/mongodb-replicaset-mc-no-mesh/code_snippets/1050_generate_certs.sh
         :language: bash
         :linenos:
      
   .. step:: Deploy the |mongodb-multi|.

      Set :setting:`spec.credentials`, :setting:`spec.opsManager.configMapRef.name`, 
      which you defined in the :ref:`reference-architectures-multi-cluster-ops-manager-no-mesh` procedure;
      define your :ref:`security settings <security-settings>` and deploy the |mongodb-multi|.
     
      .. literalinclude:: /includes/code-examples/reference-architectures/mongodb-replicaset-mc-no-mesh/code_snippets/1100_mongodb_replicaset_multi_cluster.sh
         :language: bash
         :linenos:

   .. step:: Verify that the |mongodb-multi| is running.

      Run the following command to confirm that the |mongodb-multi| is running. 
     
      .. literalinclude:: /includes/code-examples/reference-architectures/mongodb-replicaset-mc-no-mesh/code_snippets/1110_mongodb_replicaset_multi_cluster_wait_for_running_state.sh
         :language: bash
         :linenos:

   .. step:: Create a MongoDB user and password.

      Run the following command to create a MongoDB user and password. Please use strong passwords for your deployments.
     
      .. literalinclude:: /includes/code-examples/reference-architectures/mongodb-replicaset-mc-no-mesh/code_snippets/1200_create_mongodb_user.sh
         :language: bash
         :linenos:

   .. step:: Verify connectivity.

      Run the ``mongosh`` following command to ensure that you can access your running MongoDB instance.

      .. io-code-block:: 
         :copyable: true
     
         .. input:: /includes/code-examples/reference-architectures/mongodb-replicaset-mc-no-mesh/code_snippets/1210_verify_mongosh_connection.sh
            :language: bash
            :linenos:

         .. output:: /includes/code-examples/reference-architectures/mongodb-replicaset-mc-no-mesh/output/1210_verify_mongosh_connection.out
