.. _mongodb-roles:

===============================
Configure Custom Database Roles
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can create custom roles in |service| when the 
:ref:`built-in roles <atlas-user-privileges>` don't include your
desired set of privileges. |service| applies each database user's custom
roles together with:

- Any :ref:`built-in roles <atlas-user-privileges>` you
  assign when you :ref:`add a database user <add-mongodb-users>` or
  :ref:`modify a database user <modify-mongodb-users>`.
- Any :manual:`specific privileges </reference/privilege-actions/>` you
  assign when you :ref:`add a database user <add-mongodb-users>` or
  :ref:`modify a database user <modify-mongodb-users>`.

You can assign multiple custom roles to each database user.

.. include:: /includes/fact-role-subset.rst

.. note:: {+Free-Cluster+} and {+Shared-Cluster+} Limitation

   Changes to :doc:`custom roles </security-add-mongodb-roles>`
   might take up to 30 seconds to deploy in ``M0`` {+free-clusters+} and
   ``M2/M5`` {+shared-clusters+}.

.. _add-mongodb-roles:

Add Custom Roles
----------------

The following procedure shows how to create a custom role through the
{+atlas-ui+}. To create custom roles through the {+atlas-admin-api+}, 
see :doc:`/reference/api/custom-roles-create-a-role`.

.. include:: /includes/steps/add-roles.rst

Modify Custom Roles
-------------------

The following procedure shows how to modify custom roles through the
{+atlas-ui+}. To modify custom roles through the {+atlas-admin-api+}, 
see :doc:`/reference/api/custom-roles-update-a-role`.

1. In the :guilabel:`Security` section of the left navigation, click
   :guilabel:`Database Access`. The :guilabel:`Custom Roles` tab
   displays.

#. Click :icon-fa5:`pencil-alt` :guilabel:`Edit` next to the role you
   want to modify. You can modify the following components of the role:

   - The action(s)/role(s) the custom role inherits.

   - The database(s)/collection(s) on which those privileges
     apply.

#. Click :guilabel:`Update Custom Role` to save the changes.

Delete Custom Roles
-------------------

The following procedure shows how to delete custom roles through the
{+atlas-ui+}. To delete custom roles through the {+atlas-admin-api+}, 
see :doc:`/reference/api/custom-roles-delete-a-role`.

1. In the :guilabel:`Security` section of the left navigation, click
   :guilabel:`Database Access`. The :guilabel:`Custom Roles` tab
   displays.

#. Click :icon-fa4:`trash-o` :guilabel:`Delete` next to the role you
   want to delete.

#. Click :guilabel:`Delete` in the dialog to confirm deletion.

.. include:: /includes/fact-delete-custom-role-scenarios.rst

Assign Custom Roles
-------------------

You can assign custom roles in the {+atlas-ui+} when you :ref:`add a database
user <add-mongodb-users>` or :ref:`modify a database user
<modify-mongodb-users>`. To assign custom roles through the {+atlas-admin-api+}, 
see :doc:`Create a Database User </reference/api/database-users-create-a-user>`
or :doc:`Update a Database User </reference/api/database-users-update-a-user>`.

Considerations
--------------

- You can assign up to 20 custom roles to a single :ref:`database user <mongodb-users>` 
  and can create up to 100 custom roles per project. If you require more custom
  roles per database user or per project,
  contact `Atlas support <https://cloud.mongodb.com/support>`_.

- |service| rolls back any role modifications not made through the UI
  or :doc:`custom roles API </reference/api/custom-roles>`. You must use
  the {+atlas-ui+} or API to add, modify, or delete custom roles on
  |service| {+database-deployment+}s.

- .. include:: /includes/fact-role-auditing.rst

- If you assign multiple roles to a user and those roles grant
  conflicting permissions for an object, |service| honors the highest
  permissions within any role.

  .. example::

     You create two custom roles and assign both to User A:

     - The first custom role grants only ``read`` privileges on your database.
       It also grants :manual:`bypassDocumentValidation </reference/privilege-actions/#mongodb-authaction-bypassDocumentValidation>`
       on your database.
     - The second role grants ``dbAdmin`` privileges on your database. It
       doesn't grant :manual:`bypassDocumentValidation </reference/privilege-actions/#mongodb-authaction-bypassDocumentValidation>`,
       which is an implicit denial of bypass permissions.

     User A would have all of the ``dbAdmin`` privileges for your database,
     since ``dbAdmin`` is the higher database access permission. User A would
     also have :manual:`bypassDocumentValidation </reference/privilege-actions/#mongodb-authaction-bypassDocumentValidation>`,
     since :manual:`bypassDocumentValidation </reference/privilege-actions/#mongodb-authaction-bypassDocumentValidation>`
     is the higher bypass permission.