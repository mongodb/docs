=================
Manage Journaling
=================

.. default-domain:: mongodb

MongoDB uses *write ahead logging* to an on-disk :term:`journal` to
guarantee :doc:`write operation </core/write-operations>` durability
and to provide crash resiliency. Before applying a change to the data
files, MongoDB writes the change operation to the journal. If MongoDB
should terminate or encounter an error before it can write the changes
from the journal to the data files, MongoDB can re-apply the write
operation and maintain a consistent state.

*Without* a journal, if :program:`mongod` exits unexpectedly, you must
assume your data is in an inconsistent state, and you must run either
:doc:`repair </tutorial/recover-data-following-unexpected-shutdown>`
or, preferably, :doc:`resync </tutorial/resync-replica-set-member>`
from a clean member of the replica set.

With journaling enabled, if :program:`mongod` stops unexpectedly,
the program can recover everything written to the journal, and the
data remains in a consistent state. By default, the greatest extent of lost
writes, i.e., those not made to the journal, are those made in the last
100 milliseconds. See :setting:`journalCommitInterval` for more
information on the default.

With journaling, if you want a data set to reside entirely in RAM, you
need enough RAM to hold the data set plus the "write working set." The
"write working set" is the amount of unique data you expect to see
written between re-mappings of the private view. For information on
views, see :ref:`journaling-storage-views`.

.. important::

   .. versionchanged:: 2.0
      For 64-bit builds of :program:`mongod`, journaling is enabled by
      default.  For other platforms, see :setting:`journal`.

Procedures
----------

Enable Journaling
~~~~~~~~~~~~~~~~~

.. versionchanged:: 2.0
   For 64-bit builds of :program:`mongod`, journaling is enabled by default.

To enable journaling, start :program:`mongod` with the
:option:`--journal <mongod --journal>` command line option.

If no journal files exist, when :program:`mongod` starts, it must
preallocate new journal files. During this operation, the
:program:`mongod` is not listening for connections until preallocation
completes: for some systems this may take a several minutes. During
this period your applications and the :program:`mongo` shell are not
available.

Disable Journaling
~~~~~~~~~~~~~~~~~~

.. warning::

   Do not disable journaling on production systems. If your
   :program:`mongod` instance stops without shutting down cleanly
   unexpectedly for any reason, (e.g. power failure) and you are
   not running with journaling, then you must recover from an
   unaffected :term:`replica set` member or backup, as described in
   :doc:`repair  </tutorial/recover-data-following-unexpected-shutdown>`.

To disable journaling, start :program:`mongod` with the
:option:`--nojournal <mongod --nojournal>` command line option.

Get Commit Acknowledgment
~~~~~~~~~~~~~~~~~~~~~~~~~

You can get commit acknowledgment with the
:dbcommand:`getLastError` command and the ``j`` option. For details, see
:ref:`write-concern-operation`.

.. _journaling-avoid-preallocation-lag:

Avoid Preallocation Lag
~~~~~~~~~~~~~~~~~~~~~~~

To avoid :ref:`preallocation lag <journaling-journal-files>`, you can
preallocate files in the journal directory by copying them from another
instance of :program:`mongod`.

Preallocated files do not contain data. It is safe to later remove them.
But if you restart :program:`mongod` with journaling, :program:`mongod`
will create them again.

.. example:: The following sequence preallocates journal files for an
   instance of :program:`mongod` running on port ``27017`` with a database
   path of ``/data/db``.

   For demonstration purposes, the sequence starts by creating a set of
   journal files in the usual way.

   1. Create a temporary directory into which to create a set of journal
      files:

      .. code-block:: sh

         mkdir ~/tmpDbpath

   #. Create a set of journal files by staring a :program:`mongod`
      instance that uses the temporary directory:

      .. code-block:: sh

         mongod --port 10000 --dbpath ~/tmpDbpath --journal

   #. When you see the following log output, indicating
      :program:`mongod` has the files, press CONTROL+C to stop the
      :program:`mongod` instance:

      .. code-block:: sh

         [initandlisten] waiting for connections on port 10000

   #. Preallocate journal files for the new instance of
      :program:`mongod` by moving the journal files from the data directory
      of the existing instance to the data directory of the new instance:

      .. code-block:: sh

         mv ~/tmpDbpath/journal /data/db/

   #. Start the new :program:`mongod` instance:

      .. code-block:: sh

         mongod --port 27017 --dbpath /data/db --journal

Monitor Journal Status
~~~~~~~~~~~~~~~~~~~~~~

Use the following commands and methods to monitor journal status:

- :dbcommand:`serverStatus`

  The :dbcommand:`serverStatus` command returns database status
  information that is useful for assessing performance.

- :dbcommand:`journalLatencyTest`

  Use :dbcommand:`journalLatencyTest` to measure how long it takes on
  your volume to write to the disk in an append-only fashion. You can
  run this command on an idle system to get a baseline sync time for
  journaling. You can also run this command on a busy system to see the
  sync time on a busy system, which may be higher if the journal
  directory is on the same volume as the data files.

  The :dbcommand:`journalLatencyTest` command also provides a way to
  check if your disk drive is buffering writes in its local cache. If
  the number is very low (i.e., less than 2 milliseconds) and the drive
  is non-SSD, the drive is probably buffering writes. In that case,
  enable cache write-through for the device in your operating system,
  unless you have a disk controller card with battery backed RAM.

.. _journaling-journal-commit-interval:

Change the Group Commit Interval
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionchanged:: 2.0

You can set the group commit interval using the
:option:`--journalCommitInterval <mongod --journalCommitInterval>`
command line option. The allowed range is ``2`` to ``300`` milliseconds.

Lower values increase the durability of the journal at the expense of
disk performance.

Recover Data After Unexpected Shutdown
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

On a restart after a crash, MongoDB replays all journal files in the
journal directory before the server becomes available. If MongoDB must
replay journal files, :program:`mongod` notes these events in the log
output.

There is no reason to run :dbcommand:`repairDatabase` in these
situations.
