.. _adf-create-collection-views-cmd:

==========
``create``
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The ``create`` command creates a collection for existing ``stores`` or 
a :manual:`view </core/views/>` on a collection in the {+fdi+} storage 
configuration. 

The wildcard ``"*"`` can be used with the ``create`` command in two 
ways:

- As the name of the collection to dynamically create collections that 
  maps to files and folders in the specified ``stores`` {+fdi+} store.
- In the ``path`` parameter to create a collection that maps to 
  multiple files and folders in the specified file path on the 
  ``stores`` {+fdi+} store.

Click on the tab to learn more about creating a collection or a view.

.. tabs:: 

   .. tab:: Collection 
      :tabid: coll

      This tab contains the syntax and parameters for creating a 
      collection. Choose the tab for your {+fdi+} store to learn 
      more about the syntax and parameters for that {+fdi+} store.

      .. tabs::
      
         .. tab:: S3  
            :tabid: s3 

            This tab contains the syntax and parameters for creating a 
            collection for |s3| {+fdi+} store.

         .. tab:: Atlas Cluster 
            :tabid: atlas

            This tab contains the syntax and parameters for creating a 
            collection for {+fdi+} store.

         .. tab:: HTTP 
            :tabid: http

            This tab contains the syntax and parameters for creating a 
            collection for a |http| {+fdi+} store.

            .. include:: /includes/extracts/fact-http-beta-message.rst

         .. tab:: Atlas Data Lake 
            :tabid: adl

            This tab contains the syntax and parameters for creating a 
            collection for an {+adl+} {+fdi+} store.

   .. tab:: Views 
      :tabid: views 

      This tab contains the syntax and parameters for creating a view 
      for a collection.

.. _dl-collections-views-create-cmd-syntax:

Syntax 
------

.. tabs:: 
   :hidden:

   .. tab:: Collection 
      :tabid: coll

      .. tabs::
         :hidden:
      
         .. tab:: S3  
            :tabid: s3

            .. code-block:: sh 
               :copyable: true

               db.runCommand({ "create" : "<collection-name>|*", "dataSources" : [{ "storeName" : "<store-name>", "path" : "<path-to-files-or-folders>", "defaultFormat" :  "<file-extension>" }]})

         .. tab:: Atlas Cluster
            :tabid: atlas

            .. code-block:: sh 
               :copyable: true

               db.runCommand({ "create" : "<collection-name>"|"*", "dataSources" : [{ "storeName" : "<store-name>", "database" : "<atlas-database-name>", "collection" :  "<atlas-collection-name>" | "collectionRegex": "<regex-pattern>" }]})

         .. tab:: HTTP 
            :tabid: http

            .. code-block:: sh 
               :copyable: true

               db.runCommand({ "create" : "<collection-name>", "dataSources" : [{ "storeName" : "<store-name>", "allowInsecure" : true|false, "urls" : [ "<url>" ], "defaultFormat" :  "<file-extension>" }]})

         .. tab:: Atlas Data Lake 
            :tabid: adl

            .. code-block:: sh 
               :copyable: true

               db.runCommand({ "create" : "<collection-name>|*", "dataSources" : [{ "storeName" : "<store-name>", "datasetName" : "<data-lake-dataset-name>", "datasetPrefix": "<prefix-name>", "trimLevel" :  <trim-number>, "maxDatasets": <maximum-number-of-datasets> }]})

   .. tab:: Views 
      :tabid: views

      .. code-block:: sh

         db.runCommand({ "create" : "<view-name>", "viewOn" :" <collection-name>", "pipeline" : ["<stage1>","<stage2>",...] })

.. _dl-collections-views-create-cmd-params:

Parameters  
----------

.. tabs:: 
   :hidden:

   .. tab:: Collection
      :tabid: coll

      .. tabs:: 
         :hidden: 

         .. tab:: S3 Configuration 
            :tabid: s3

            .. list-table::
               :header-rows: 1
               :widths: 20 15 50 15 

               * - Parameter 
                 - Type 
                 - Description 
                 - Necessity

               * - ``<collection-name>|*``
                 - string
                 - .. include:: /includes/extracts/cli-param-collection-name.rst

                   You can generate collection names dynamically from 
                   file paths by  specifying ``*`` for the collection 
                   name and the ``collectionName()`` function in the 
                   ``dataSources.collection`` field. By default, 
                   {+adf+} creates up to ``100`` wildcard collections. 
                   You can customize the maximum number of wildcard 
                   collections that {+adf+} automatically generates 
                   using the :datalakeconf-aws:`databases.[n].maxWildcardCollections` 
                   parameter. Note that each wildcard collection can 
                   contain only one ``dataSource``.
                 - Required

               * - ``dataSources``
                 - object 
                 - .. include:: /includes/extracts/cli-param-data-sources.rst
                 - Required

               * - ``dataSources.storeName``
                 - string
                 - .. include:: /includes/extracts/cli-param-data-sources-store-name.rst
                 - Required

               * - ``dataSources.path``
                 - string
                 - The path to the files and folders. Specify ``/`` to 
                   capture all files and folders from the ``prefix`` 
                   path. See :ref:`adf-path-syntax` for more 
                   information. 
                 - Required

               * - ``dataSources.defaultFormat`` 
                 - string 
                 - .. include:: /includes/extracts/cli-param-default-format.rst
                 - Optional

         .. tab:: Atlas Configuration 
            :tabid: atlas

            .. list-table::
               :header-rows: 1
               :widths: 20 15 50 15 

               * - Parameter 
                 - Type 
                 - Description 
                 - Necessity

               * - ``<collection-name>|*``
                 - string
                 - .. include:: /includes/extracts/cli-param-collection-name.rst

                   You can generate collection names dynamically by 
                   specifying ``*`` for the collection name and 
                   omitting the ``dataSources.collection`` parameter. 

                   For dynamically generated databases, you can 
                   generate wildcard collections by specifying ``*`` 
                   for the collection name and by omitting the 
                   following parameters: 
                   
                   - ``dataSources.collection`` 
                   - ``dataSources.database``

                   For wildcard (``*``) collections, you can use the 
                   ``dataSources.collectionRegex`` parameter to 
                   generate collections with names that match a regex 
                   pattern.
                 - Required

               * - ``dataSources``
                 - object 
                 - .. include:: /includes/extracts/cli-param-data-sources.rst
                 - Required

               * - ``dataSources.storeName``
                 - string
                 - .. include:: /includes/extracts/cli-param-data-sources-store-name.rst
                 - Required

               * - ``dataSources.database`` 
                 - string 
                 - Name of the database that contains the collection in 
                   the |service| cluster. You must omit this parameter 
                   to generate wildcard (``*``) collections for 
                   dynamically generated databases.
                 - Conditional 

               * - ``dataSources.collection``
                 - string
                 - Name of the collection in the |service| database. 
                   For creating a wildcard (``*``) collection, you 
                   must omit this parameter.
                 - Conditional

               * - ``dataSources.collectionRegex``
                 - string
                 - Regex pattern to use for creating the wildcard 
                   (``*``) collection. To learn more about the regex 
                   syntax, see `Go programming language 
                   <https://golang.org/pkg/regexp/>`__.

                   To use regex patterns for wildcard (``*``) 
                   collection names, you must not specify the 
                   ``dataSources.collection`` parameter.
                 - Optional

         .. tab:: HTTP Configuration 
            :tabid: http 

            .. list-table::
               :header-rows: 1
               :widths: 20 15 50 15

               * - Parameter 
                 - Type 
                 - Description 
                 - Necessity
  
               * - ``<collection-name>``
                 - string
                 - The name of the collection to which {+adf+} maps 
                   the data contained in the {+fdi+} store. You 
                   can't generate collection names dynamically by 
                   specifying ``*``.
                 - Required

               * - ``dataSources``
                 - object 
                 - .. include:: /includes/extracts/cli-param-data-sources.rst
                 - Required

               * - ``dataSources.storeName``
                 - string
                 - .. include:: /includes/extracts/cli-param-data-sources-store-name.rst
                 - Required

               * - ``dataSources.allowInsecure``
                 - boolean
                 - .. include:: /includes/extracts/cli-param-allow-insecure.rst
                 - Optional

               * - ``dataSources.urls``
                 - array of strings or empty array
                 - The |url|\s of the publicly accessible data files. 
                   You can't specify |url|\s that require 
                   authentication. {+adf+} creates a partition for each 
                   |url|. If empty or omitted, {+adf+} uses the |url|\s 
                   from the store specified in the 
                   ``dataSources.storeName`` parameter.
                 - Required

               * - ``dataSources.defaultFormat`` 
                 - string 
                 - .. include:: /includes/extracts/cli-param-default-format.rst

                   If included, the specified format only applies to 
                   the |url|\s in the ``dataSource``.
                 - Optional

         .. tab:: ADL Configuration 
            :tabid: adl 

            .. list-table::
               :header-rows: 1
               :widths: 20 15 50 15

               * - Parameter 
                 - Type 
                 - Description 
                 - Necessity

               * - ``<collection-name>``
                 - string
                 - The name of the collection to which {+adf+} maps 
                   the data contained in the {+fdi+} store. To dynamically
                   generate collection names, you must do the following:
                   
                   - Set the value of the ``<collection-name>`` field to ``*``.
                   - Provide values for the ``datasetPrefix`` and ``trimLevel``
                     fields.
                   - Omit the ``datasetName`` field.
                 - Required

               * - ``dataSources``
                 - object 
                 - .. include:: /includes/extracts/cli-param-data-sources.rst

                   You can specify multiple ``dataSources`` for a 
                   wildcard collection only if all the ``dataSources`` 
                   for the collection map to {+adl+} dataset stores.
                 - Required

               * - ``dataSources.storeName``
                 - string
                 - .. include:: /includes/extracts/cli-param-data-sources-store-name.rst
                 - Required

               * - ``datasetName``
                 - string
                 - Name of the {+adl+} dataset to map with the 
                   collection. The {+adl+} ``datasetName`` is in the 
                   following format:

                   .. code-block:: 

                      <version>$<type>$<subtype>$<clusterName>$<dbName>$<collectionName>$<snapshotId>

                   You can't specify the ``datasetName`` for wildcard 
                   collections. You can't specify the ``datasetName`` for
                   non-wildcard collections if you specify
                   ``datasetPrefix``. 

                 - Conditional

               * - ``datasetPrefix``
                 - string
                 - *Required for wildcard collections only. Optional for
                   non-wildcard collection.*
                 
                   Dataset name prefix to match against {+adl+} dataset 
                   names. 
                   
                   If you specify this parameter for wildcard
                   collections, {+adf+} maps collections to only the 
                   dataset names whose prefix match the ``datasetPrefix`` that you specify. 

                   If you specify this parameter for non-wildcard collections,
                   {+adf+} maps the latest dataset (for the most
                   recently captured snapshot) to the collection. You
                   must omit ``datasetName`` to specify this parameter
                   for non-wildcard collections.

                 - Conditional
                 
               * - ``maxDatasets``
                 - int
                 - *For wildcard collections only.*
                   
                   Maximum number of datasets from which to dynamically
                   generate collections for the data source. Value must
                   be greater than ``0``. {+adf+} returns datasets in
                   reverse alphabetical order. 
                 - Optional
               
               * - ``trimLevel``
                 - int
                 - *For wildcard collections only.* 
                   
                   Number of characters to trim from the left of the 
                   dataset name before mapping the remaining fields to 
                   a wildcard collection name. Value must be greater 
                   than ``0``. If omitted, defaults to ``0``. 
                   
                   You can set this setting for wildcard collections 
                   only.
                 - Optional     

   .. tab:: Views
      :tabid: views 

      .. list-table::
         :header-rows: 1
         :widths: 20 10 60 10 

         * - Parameter 
           - Type 
           - Description 
           - Necessity

         * - ``<view-name>``
           - string
           - The name of the :manual:`view </core/views/>`. A view name 
             **must** be unique. It cannot be the same as a collection 
             name or any other view name in the same database.
           - Required

         * - ``viewOn``
           - string 
           - The name of the source collection on which to create the 
             view.
           - Required

         * - ``pipeline``
           - array of :manual:`stages </core/aggregation-pipeline/#id1>`
           - The array of :manual:`aggregation pipeline stages 
             </core/aggregation-pipeline/#id1>` to use to create the 
             view.

             The view definition pipeline cannot include the 
             :manual:`$out 
             </reference/operator/aggregation/out/#pipe._S_out>` or the 
             :manual:`$merge 
             </reference/operator/aggregation/merge/#pipe._S_merge>` 
             stage, even inside nested pipeline stages like 
             :manual:`$lookup 
             </reference/operator/aggregation/lookup/#pipe._S_lookup>` 
             or 
             :manual:`$facet 
             </reference/operator/aggregation/facet/#pipe._S_facet>`.
           - Required

.. _dl-collections-views-create-cmd-output:

Output 
------

The command returns the following output if it succeeds. You can verify 
the results by running the commands in 
:ref:`dl-collections-views-create-cmd-verify`. If it fails, see 
:ref:`dl-collections-views-create-cmd-errors` below for recommended 
solutions.

.. code-block:: shell 
   :copyable: false

   { ok: 1 }

.. _adf-collections-views-create-cmd-egs:

Examples 
--------

.. tabs:: 
   :hidden:

   .. tab:: Create Collections Examples
      :tabid: coll

      .. tabs:: 
         :hidden:

         .. tab:: S3 Example 
            :tabid: s3

            The following examples use the sample ``airbnb`` data on an
            |aws| |s3| store with the following settings:

            .. list-table:: 
               :stub-columns: 1
               :widths: 20 80

               * - **Store Name** 
                 - ``egS3Store``

               * - **Region**
                 - ``us-east-2``

               * - **Bucket**
                 - ``test-data-federation``

               * - **Prefix**
                 - ``json``

               * - **Delimiter**
                 - ``/``

               * - **Sample Dataset**
                 - ``airbnb``

         .. tab:: Atlas Example 
            :tabid: atlas 

            The following examples use the 
            ``sample_airbnb.listingsAndReviews`` collection from the 
            :atlas:`sample dataset </sample-data/sample-airbnb/>` 
            on the |service| cluster with the following settings: 

            .. list-table:: 
               :stub-columns: 1
               :widths: 20 80

               * - **Store Name** 
                 - ``egAtlasStore``

               * - **Sample Dataset**
                 - ``sample_airbnb.listingsAndReviews``

            Review :atlas:`Load Sample Data into Your Atlas Cluster 
            </sample-data/>` to load the sample dataset in your 
            |service| cluster.

         .. tab:: HTTP Example 
            :tabid: http 

            The following examples use the following |url|\s:

            - ``https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json`` 
            - ``https://atlas-data-lake.s3.amazonaws.com/json/sample_weatherdata/data.json`` 

         .. tab:: Atlas Data Lake Example 
            :tabid: adl 

            The following examples use an {+adl+} dataset with the 
            following settings: 

            .. list-table:: 
               :stub-columns: 1
               :widths: 20 80

               * - Store Name
                 - ``adlStore``

               * - {+adl+} Dataset Name
                 - ``v1$atlas$snapshot$testCluster$sample_airbnb$listingsAndReviews``

      .. _dl-create-collection-cmd-basic-eg:

      Basic Example 
      ~~~~~~~~~~~~~

      The following command creates a collection named ``airbnb`` in 
      the ``sampleDB`` database in the storage configuration. 

      .. tabs:: 
         :hidden:

         .. tab:: S3 Example 
            :tabid: s3
      
            The ``airbnb`` collection maps to the ``airbnb`` sample 
            dataset in the ``json`` folder in the |s3| store named 
            ``egS3Store``.

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript

                  use sampleDB
                  db.runCommand({ "create" : "airbnb", "dataSources" : [{ "storeName" : "egS3Store", "path" : "/json/airbnb", "defaultFormat" : ".json" }]})

               .. output::
                  :language: json

                  { "ok" : 1 }

            The following commands show that the collection was 
            successfully created: 

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript 

                  show collections

               .. output::
                  :language: javascript

                  airbnb

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript

                  db.runCommand({"storageGetConfig" : 1 })

               .. output::
                  :language: json

                  {
	                  "ok" : 1,
	                  "storage" : {
		                  "stores" : [{
				                "name" : "egS3Store",
				                "provider" : "s3",
				                "region" : "us-east-2",
				                "bucket" : "test-data-federation",
				                "delimiter" : "/",
				                "prefix" : ""
		                  }],
		                  "databases" : [{
			                  "name" : "sampleDB",
			                  "collections" : [{
				                  "name" : "airbnb",
				                  "dataSources" : [{
					                  "storeName" : "egS3Store",
					                  "path" : "/json/airbnb",
					                  "defaultFormat" : ".json"
				                  }]
			                  }]
		                  }]
	                  }
                  }

         .. tab:: Atlas Example 
            :tabid: atlas
      
            The ``airbnb`` collection maps to the 
            ``listingsAndReviews`` sample collection in the 
            ``sample_airbnb`` database on the |service| cluser.

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript 

                  use sampleDB
                  db.runCommand({ "create" : "airbnb", "dataSources" : [{ "storeName" : "egAtlasStore", "database" : "sample_airbnb", "collection" : "listingsAndReviews" }]})

               .. output::
                  :language: json

                  { "ok" : 1 }

            The following commands show that the collection was 
            successfully created: 

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript 

                  show collections

               .. output::
                  :language: javascript

                  airbnb

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript

                  db.runCommand({"storageGetConfig":1})

               .. output::
                  :language: json

                  {
	                 "ok" : 1,
	                 "storage" : {
		                "stores" : [{
				            "name" : "egAtlasStore",
				            "provider" : "atlas",
				            "clusterName" : "myTestCluster",
				            "projectId" : "<project-id>"
			             }],
		                "databases" : [{
			               "name" : "sampleDB",
			               "collections" : [{
				              "name" : "airbnb",
				              "dataSources" : [{
	   				          "storeName" : "egAtlasStore",
					             "database" : "sample_airbnb",
					             "collection" : "listingsAndReview"
				              }]
			               }]
		                }]
	                 }
                  }

         .. tab:: HTTP Example 
            :tabid: http
      
            The ``airbnb`` collection includes a partition for 
            each |url| in the collection. The ``allowInsecure`` flag is 
            not set and defaults to ``false``.

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript

                  use sampleDB
                  db.runCommand({ "create" : "airbnb", "dataSources" : [{ "storeName" : "http-store", "urls": ["https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json","https://atlas-data-lake.s3.amazonaws.com/json/sample_weatherdata/data.json"], "defaultFormat" : ".json" }]})

               .. output::
                  :language: json

                  { "ok" : 1 }

            The following commands show that the collection was 
            successfully created: 

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript 

                  show collections

               .. output::
                  :language: javascript

                  airbnb

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript

                  db.runCommand({"storageGetConfig":1})

               .. output::
                  :language: json

                  {
   	              "ok" : 1,
	                 "storage" : {
		                "stores" : [
			               {
				              "name" : "http-store",
				              "provider" : "http",
				              "urls" : [
					             "https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json",
					             "https://atlas-data-lake.s3.amazonaws.com/json/sample_weatherdata/data.json"
				              ],
				              "defaultFormat" : ".json"
			               }
		                ],
		                "databases" : [
			               {
				              "name" : "sampleDb",
				              "collections" : [
					             {
						            "name" : "airbnb",
						            "dataSources" : [
							           {
								           "storeName" : "http-store",
								           "defaultFormat" : ".json",
								           "urls" : [
									          "https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json",
									          "https://atlas-data-lake.s3.amazonaws.com/json/sample_weatherdata/data.json"
								           ]
							           }
						            ]
					             }
				              ]
			               }
		                ]
	                 }
                  }

         .. tab:: Atlas Data Lake Example 
            :tabid: adl 

            The ``airbnb`` collection maps to the {+adl+} datasets in 
            the ``sample_airbnb.listingsAndReviews`` pipeline.

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript 

                  use sampleDB
                  db.runCommand({ "create" : "airbnb", "dataSources" : [{ "storeName" : "adlStore", "datasetName" : "v1$atlas$snapshot$testCluster$sample_airbnb$listingsAndReviews" }]})

               .. output::
                  :language: json 

                  { "ok" : 1 }

      .. _dl-create-collection-cmd-wildcard-eg:

      Wildcard Usage Examples
      ~~~~~~~~~~~~~~~~~~~~~~~

      .. tabs:: 
         :hidden:

         .. tab:: S3 Example 
            :tabid: s3

            These examples show how the wildcard ``"*"`` can be 
            specified with the ``create`` command.

            .. tabs:: 

               .. tab:: Collection Name Example
                  :tabid: collnameeg
            
                  The following example uses the ``create`` command to 
                  dynamically create collections.

                  The following example uses the ``create`` command to 
                  dynamically create collections for the files in the 
                  path ``/json/`` in the ``egS3Store`` {+fdi+} store. 
                  It uses the ``collectionName()`` function to name the 
                  collections after the filenames in the specified path.

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript 
         
                        use sampleDB 
                        db.runCommand({ "create" : "*", "dataSources" : [{ "storeName" : "egS3Store", "path": "/json/{collectionName()}"}]})

                     .. output::
                        :language: json 

                        { "ok" : 1 }
      
                  The following commands show that the collection was 
                  successfully created:

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript 

                        show collections
                    
                     .. output::
                        :language: javascript

                        airbnb

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript

                        db.runCommand({"storageGetConfig" : 1 })

                     .. output::
                        :language: json

                        {
                          "ok" : 1,
                          "storage" : {
                            "stores" : [{
                              "name" : "egS3Store",
                              "provider" : "s3",
                              "region" : "us-east-2",
                              "bucket" : "test-data-federation",
                              "delimiter" : "/",
                              "prefix" : ""
                            }],
                            "databases" : [{
                              "name" : "sampleDB",
                              "collections" : [{
                                "name" : "*",
                                "dataSources" : [{
                                  "storeName" : "egS3Store",
                                  "path" : "/json/{collectionName()}"
                                }]
                              }]
                            }]
                          }
                        }

               .. tab:: Path Glob Example
                  :tabid: pathglobeg

                  The following example uses the ``create`` command to 
                  create a collection named ``egCollection`` that maps 
                  to a {+adf+} store named ``egS3Store``. The 
                  ``egS3Store`` contains the sample dataset, ``airbnb``, in a folder named ``json``. 

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript  
      
                        use sampleDB
                        db.runCommand({ "create" : "egCollection", "dataSources" : [{ "storeName" : "egS3Store", "path": "/json/*"}]}})

                     .. output::
                        :language: json 

                        { "ok" : 1 }

                  The following commands show that the collection was 
                  successfully created: 

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript 

                        show collections

                     .. output::
                        :language: javascript

                        egCollection

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript

                        db.runCommand({"storageGetConfig" : 1 })

                     .. output::
                        :language: json

                        {
	                       "ok" : 1,
	                       "storage" : {
		                      "stores" : [{
		                        "name" : "egS3Store",
		                        "provider" : "s3",
		                        "region" : "us-east-2",
		                        "bucket" : "test-data-federation",
		                        "delimiter" : "/",
		                        "prefix" : ""
		                      }],
		                      "databases" : [{
		                        "name" : "sample",
		                        "collections" : [{
			                       "name" : "egCollection",
			                       "dataSources" : [{
				                      "storeName" : "egS3Store",
				                      "path" : "/json/*"
				                    }]
			                     }]
		                      }]
	                       }
                        }
         
         .. tab:: Atlas Example 
            :tabid: atlas

            These examples show how the wildcard ``"*"`` can be 
            specified with the ``create`` command.

            .. tabs:: 

               .. tab:: Basic Example 
                  :tabid: basic
            
                  The following example uses the ``create`` command to 
                  dynamically create collections for the documents in 
                  the ``sample_airbnb`` database on the |service| 
                  cluster name ``myTestCluster``. 

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript 
    
                        use sampleDB 
                        db.runCommand({ "create" : "*", "dataSources" : [{ "storeName" : "egAtlasStore", "database": "sample_airbnb"}]})

                     .. output::
                        :language: json

                        { "ok" : 1 }
            
                  The following commands show that the collection was 
                  successfully created:

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript

                        db.runCommand({storageGetConfig:1})

                     .. output::
                        :language: json

                        {
                          "ok" : 1,
                          "storage" : {
                            "stores" : [{
                              "name" : "egAtlasStore",
                              "provider" : "atlas",
                              "clusterName" : "myTestCluster",
                              "projectId" : "<project-id>"
                            }],
                            "databases" : [{
                              "name" : "sampleDB",
                              "collections" : [{
                                "name" : "*",
                                "dataSources" : [{
                                  "storeName" : "egAtlasStore",
                                  "database" : "sample_airbnb"
                                }]
                              }]
                            }]
                          }
                        }

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript

                        show collections 

                     .. output::
                        :language: json
                     
                        listingsAndReviews

               .. tab:: Regex Example 
                  :tabid: regex

                  The following example uses the ``create`` command to 
                  dynamically create collections whose names match a 
                  specified regex pattern in the ``sample_airbnb`` 
                  database on the |service| cluster named 
                  ``myTestCluster``.

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript  
    
                        use sampleDB 
                        db.runCommand({ "create" : "*", "dataSources" : [{ "storeName" : "egAtlasStore", "database": "sample_airbnb", "collectionRegex" : "^list" }]})

                     .. output::
                        :language: json

                        { "ok" : 1 }
            
                  The following commands show that the collection was 
                  successfully created:

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript 

                        db.runCommand({storageGetConfig:1})

                     .. output::
                        :language: json

                        {
                          "ok" : 1,
                          "storage" : {
                            "stores" : [
                              {
                                "name" : "egAtlasStore",
                                "provider" : "atlas",
                                "clusterName" : "myTestCluster",
                                "projectId" : "<project-id>"
                              }
                            ],
                            "databases" : [
                              {
                                "name" : "sbxDb",
                                "collections" : [
                                  {
                                    "name" : "*",
                                    "dataSources" : [
                                      {
                                        "storeName" : "egAtlasStore",
                                        "database" : "sample_airbnb",
                                        "collectionRegex" : "^list"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        }

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript 

                        show collections

                     .. output::
                        :language: javascript

                        listingsAndReviews

               .. tab:: Wildcard Databases Example 
                  :tabid: wildcarddb  

                  The following example uses the ``create`` command to 
                  dynamically create collections for dynamically 
                  created databases.

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript  
    
                        use * 
                        db.runCommand({ "create" : "*", "dataSources" : [{ "storeName" : "egAtlasStore" }]})

                     .. output::
                        :language: json 

                        { "ok" : 1 }
            
                  The following command shows that the collection was 
                  successfully created:

                  .. io-code-block::
                     :copyable: true 
   
                     .. input::
                        :language: javascript 

                        db.runCommand({storageGetConfig:1})

                     .. output::
                        :language: json 

                        {
                          "ok" : 1,
                          "storage" : {
                            "stores" : [
                              {
                                "name" : "egAtlasStore",
                                "provider" : "atlas",
                                "clusterName" : "myTestCluster",
                                "projectId" : "<project-id>"
                              }
                            ],
                            "databases" : [
                              {
                                "name" : "*",
                                "collections" : [
                                  {
                                    "name" : "*",
                                    "dataSources" : [
                                      {
                                        "storeName" : "egAtlasStore"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        }


         .. tab:: HTTP Example 
            :tabid: http

            Wildcard ``"*"`` collections are not supported on this 
            data store.

         .. tab:: Atlas Data Lake Example 
            :tabid: adl

            The following example uses the ``create`` command to 
            dynamically create collections whose names match a 
            specified prefix name for the {+adl+} dataset.

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript 

                  use sample 
                  db.runCommand({ "create" : "*", "dataSources" : [{ "storeName" : "adlStore", "datasetPrefix": "v1$atlas$snapshot$testCluster$sample_airbnb$listingsAndReviews", "trimLevel": 4 }]})

               .. output::
                  :language: json

                  { ok: 1 }

            The following command shows that the collection was 
            successfully created:

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript 

                  show collections

               .. output::
                  :language: javascript

                  sample_airbnb_listingsAndReviews_20220602T124437Z
                  sample_airbnb_listingsAndReviews_20220603T124603Z
                  sample_airbnb_listingsAndReviews_20220604T124420Z
                  sample_airbnb_listingsAndReviews_20220605T124454Z
                  sample_airbnb_listingsAndReviews_20220606T124419Z
                  sample_airbnb_listingsAndReviews_20220607T124515Z

      .. _dl-create-collection-cmd-multi-eg:

      Multiple Data Sources Example 
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      The following command creates a collection named ``egCollection`` 
      in the ``sampleDB`` database in the storage configuration. The 
      ``egCollection`` collection maps to the following sample 
      datasets: 

      - ``airbnb`` dataset in the ``json`` folder in the |s3| store 
        named ``egS3Store``
      - ``airbnb`` dataset in the ``sample_airbnb.listingsAndReviews`` 
        collection on the |service| cluster named ``myTestCluster``
      - ``airbnb`` dataset in the |url| ``https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json``

      .. io-code-block::
         :copyable: true 
   
         .. input::
            :language: javascript

            use sampleDB
            db.runCommand({ "create" : "egCollection", "dataSources" : [{ "storeName" : "egS3Store", "path" : "/json/airbnb" },{ "storeName" : "egAtlasStore", "database": "sample_airbnb", "collection": "listingsAndReviews" },{"storeName" : "egHttpStore", "urls": ["https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json"]}]})

         .. output::
            :language: json

            { "ok" : 1 }

      The following commands show that the collection was successfully 
      created: 

      .. io-code-block::
         :copyable: true 
   
         .. input::
            :language: javascript

            show collections

         .. output::
            :language: javascript

            egCollection

      .. io-code-block::
         :copyable: true 

         .. input::
            :language: javascript

            db.runCommand({"storageGetConfig":1})

         .. output::
            :language: json

            {
	           "ok" : 1,
	           "storage" : {
		          "stores" : [
			         {
				        "name" : "egS3Store",
				        "provider" : "s3",
	   			     "region" : "us-east-2",
				        "bucket" : "test-data-federation",
				        "delimiter" : "/",
				        "prefix" : ""
			         },
			         {
				        "name" : "egAtlasStore",
				        "provider" : "atlas",
			   	     "clusterName" : "myTestCluster",
				        "projectId" : "<project-id>"
			         },
			         {
				        "name" : "egHttpStore",
				        "provider" : "http",
				        "urls" : ["https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json"]                   
			         }
		          ],
		          "databases" : [
			         {
			           "name" : "sampleDB",
			           "collections" : [{
			   	       "name" : "egCollection",
				          "dataSources" : [
					         {
					           "storeName" : "egS3Store",
					           "path" : "json/airbnb"
					         },
					         {
					           "storeName" : "egAtlasStore",
					           "database" : "sample_airbnb",
					           "collection" : "listingsAndReviews"
					         },
					         {
					           "storeName" : "egHttpStore",
					           "urls" : ["https://atlas-data-lake.s3.amazonaws.com/json/sample_airbnb/listingsAndReviews.json"]
					         }
				           ]
			           }]
			         }
		          ]
	           }
            }

   .. tab:: Create Views Example
      :tabid: views

      The following command creates a view named ``listings`` on the 
      ``airbnb`` collection in the ``sample`` database with the 
      ``name`` and ``property_type`` fields:

      .. io-code-block::
         :copyable: true 
   
         .. input::
            :language: javascript 

            use sampleDB
            db.runCommand({ "create" : "listings", "viewOn" : "airbnb", "pipeline" : [{$project: {"property_type":1, "name": 1}}] })

         .. output::
            :language: json 

            { "ok" : 1 }

      The ``listCollections`` and ``storageGetConfig`` commands return 
      the following output: 

      .. tabs:: 

         .. tab:: listCollections
            :tabid: listCollections

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript

                  db.runCommand({"listCollections":1})

               .. output::
                  :language: json

                  {
	                 "ok" : 1,
	                 "cursor" : {
		                "firstBatch" : [
			               {
				              "name" : "airbnb",
				              "type" : "collection",
				              "info" : {
					             "readOnly" : true
				              }
			               },
			               {
				              "name" : "listings",
				              "type" : "view",
				              "info" : {
					             "readOnly" : true
				              }
		   	            }
		                ],
		                "id" : NumberLong(0),
		                "ns" : "egS3Store.$cmd.listCollections"
	                 }
                  }

         .. tab:: storageGetConfig
            :tabid: storageGetConfig

            .. io-code-block::
               :copyable: true 
   
               .. input::
                  :language: javascript 

                  db.runCommand({"storageGetConfig":1})

               .. output::
                  :language: json

                  {
	                  "ok" : 1,
	                  "storage" : {
		                 "stores" : [
			                {
				               "name" : "egS3Store",
				               "provider" : "s3",
				               "region" : "us-east-2",
				               "bucket" : "test-data-federation",
	  			               "delimiter" : "/"
			                }
		                  ],
		                  "databases" : [
			                 {
				                "name" : "sample",
				                "collections" : [
					               {
						              "name" : "airbnb",
					   	           "dataSources" : [
						   	          {
								            "storeName" : "egS3Store",
								            "path" : "json/airbnb/*"
							             }
						              ]
					               },
					               {
						              "name" : "*",
						              "dataSources" : [
							             {
								            "storeName" : "egS3Store",
								            "path" : "json/{collectionName()}"
				   			          }
						              ]
					               }
				                ],
				                "views" : [
					               {
						              "name" : "listings",
	  					              "source" : "airbnb",
						              "pipeline" : "[{\"$project\":{\"property_type\":{\"$numberInt\":\"1\"},\"name{\"$numberInt\":\"1\"}}}]"
					               }
			   	             ]
			                 }
		                  ]
	                  }
                  }

.. _dl-collections-views-create-cmd-verify:

Verify Collection 
-----------------

You can verify that the command successfully created the 
collection or view by running one of the following commands: 

.. code-block:: shell

   show collections 
   db.runCommand({ "storageGetConfig" : 1 })
   db.runCommand({ "listCollections" : 1 })

.. _dl-collections-views-create-cmd-errors:

Troubleshoot Errors 
-------------------

.. tabs:: 
   :hidden:

   .. tab:: Collection 
      :tabid: coll

      If the command fails, it returns one of the following errors:

      **Store Name Does Not Exist**

      .. code-block:: json 
         :copyable: false 

         {
	         "ok" : 0,
	         "errmsg" : "store name does not exist",
	         "code" : 9,
	         "codeName" : "FailedToParse"
         }

      **Solution:** Ensure that the specified ``storeName`` matches the 
      name of a store in the ``stores`` array. You can run the 
      ``listStores`` command to retrieve the list of stores in your 
      {+fdi+} storage configuration.

      **Collection Name Already Exists**

      .. code-block:: json 
         :copyable: false 

         {
	         "ok" : 0,
	         "errmsg" : "collection name already exists in the database",
	         "code" : 9,
	         "codeName" : "FailedToParse"
         }

      **Solution:** Ensure that the collection ``name`` is unique. You 
      can run the ``show collections`` command to retrieve the list of 
      existing collections.

   .. tab:: Views 
      :tabid: views 

      If the command fails, it returns the following error:

      **View Name Exists**

      .. code-block:: json 
         :copyable: false 

         {
	         "ok" : 0,
	         "errmsg" : "a view '<database>.<view>' already exists, correlationID = <1603aaffdbc91ba93de6364a>",
	         "code" : 48,
	         "codeName" : "NamespaceExists"
         }

      **Solution:** Ensure that the view name is unique. You can run 
      the ``listCollections`` command to retrieve the list of existing 
      views on a collection.
      