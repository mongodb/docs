=========================
Linux ``ulimit`` Settings
=========================

The Linux kernel provides a system to limit and control the number of
threads, connections, and open files on a per-process and per-user
basis. These limits prevent renegade processes from using too many
system resources. Sometimes, these limits, as configured by the
distribution developers, are too low for MongoDB and can cause a
number of issues in the course of normal MongoDB operation.

Resource Utilization
--------------------

:program:`mongod` and :program:`mongos` each use threads and file
descriptors to track connections and manage internal operations. This
section outlines the general resource utilization patterns for MongoDB.
Use these figures in combination with the actual information about your
deployment and its use to determine ideal ``ulimit`` settings.

``mongod``
~~~~~~~~~~

- 1 thread for each incoming connection from a client and for
  each incoming connection from a :program:`mongod` instance in a
  :term:`replica set <replica set>`.

- 1 thread for each outgoing connection to a :program:`mongod`
  in a replica set.

- 1 file descriptor for each incoming connection.

- 1 file descriptor for each data file in used by the
  :program:`mongod` instance.

- 1 file descriptor for each journal file used by the
  :program:`mongod` instance when :setting:`journal` is ``true``.

:program:`mongod` uses threads for a number of internal processes,
including :ref:`TTL collections <ttl-collections>` and replication,
which may require a small number of additional resources.

``mongos``
~~~~~~~~~~

- 1 thread for each incoming connection from a client.

- 1 file descriptor for each incoming connection.

- 1 file descriptor for each connection to each member of each
  shard.

For :program:`mongos`, consider the following behaviors:

- :program:`mongos` instances maintain a connection pool to each shard
  so that the :program:`mongos` can reuse connections and quickly
  fulfill requests without needing to create new connections.

- The size of the connection pool is configurable with the
  :setting:`maxConns` runtime options:

  ..code-block:: javascript

    :option:`--maxConns <mongos --maxConns>`

Review and Set Resource Limits
------------------------------

``ulimit``
~~~~~~~~~~

You can use the ``ulimit`` command at the system prompt to check
system limits, as in the following example:

.. code-block:: sh

   $ ulimit -a
   -t: cpu time (seconds)         unlimited
   -f: file size (blocks)         unlimited
   -d: data seg size (kbytes)     unlimited
   -s: stack size (kbytes)        8192
   -c: core file size (blocks)    0
   -m: resident set size (kbytes) unlimited
   -u: processes                  192276
   -n: file descriptors           21000
   -l: locked-in-memory size (kb) 40000
   -v: address space (kb)         unlimited
   -x: file locks                 unlimited
   -i: pending signals            192276
   -q: bytes in POSIX msg queues  819200
   -e: max nice                   30
   -r: max rt priority            65
   -N 15:                         unlimited

``ulimit`` refers to the per-*user* limitations for various
resources. Therefore, if your :program:`mongod` instance executes as a
user that is also running other processes, you might see some contention
for these resources. Also, be aware that the ``processes`` value
(i.e. ``-u``) refers to the combined number of distinct processes and
sub-process threads.

You can change ``ulimit`` settings by issuing a command in the
following form:

.. code-block:: sh

   ulimit -n <value>

Substitute the ``-n`` option for any possible value in the output of
``ulimit -a``.

.. note::

   After changing the ``ulimit`` settings, you *must* restart the
   process to take advantage of the modified settings. You can use the
   ``/proc`` file system to see the current limitations on a running
   process.

``/proc`` File System
~~~~~~~~~~~~~~~~~~~~~

.. note:: 

   This section applies only to Linux operating systems.

The ``/proc`` file-system stores the per-process limits in the
file system object located at ``/proc/<pid>/limits``, where ``<pid>``
is the processes :term:`PID` or process identifier. You can use the
following ``bash`` function to return the content of the ``limits``
object for a process or processes with a given name:

.. code-block:: sh

   return-limits(){

        for process in $@; do
             process_pids=`ps -C $process -o pid --no-headers | cut -d " " -f 2`

             if [ -z $@ ]; then
                echo "[no $process running]"
             else
                for pid in $process_pids; do
                      echo "[$process #$pid -- limits]"
                      cat /proc/$pid/limits
                done
             fi

        done

   }

You can copy and paste this function into a current shell session or
load it as part of a script. Call the function with one the following
invocations:

.. code-block:: sh

   return-limits mongod
   return-limits mongos
   return-limits mongod mongos

The output of the first command may resemble the following:

.. code-block:: sh

   [mongod #6809 -- limits]
   Limit                     Soft Limit           Hard Limit           Units
   Max cpu time              unlimited            unlimited            seconds
   Max file size             unlimited            unlimited            bytes
   Max data size             unlimited            unlimited            bytes
   Max stack size            8720000              unlimited            bytes
   Max core file size        0                    unlimited            bytes
   Max resident set          unlimited            unlimited            bytes
   Max processes             192276               192276               processes
   Max open files            1024                 4096                 files
   Max locked memory         40960000             40960000             bytes
   Max address space         unlimited            unlimited            bytes
   Max file locks            unlimited            unlimited            locks
   Max pending signals       192276               192276               signals
   Max msgqueue size         819200               819200               bytes
   Max nice priority         30                   30
   Max realtime priority     65                   65
   Max realtime timeout      unlimited            unlimited            us

Recommended Settings
--------------------

Every deployment may have unique requirements and settings; however,
the following thresholds and settings are particularly important for
:program:`mongod` and :program:`mongos` deployments:

- ``-f`` (file size): ``unlimited``
- ``-t`` (cpu time): ``unlimited``
- ``-v`` (virtual memory): ``unlimited``
- ``-n`` (open files): ``21000``
- ``-m`` (memory size): ``unlimited``
- ``-u`` (processes/threads): ``32000``

Always remember to restart your :program:`mongod` and
:program:`mongos` instances after changing the ``ulimit`` settings to
make sure that the settings change takes effect.
