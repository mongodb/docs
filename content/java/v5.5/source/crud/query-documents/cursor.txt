.. _java-fundamentals-cursor:

=========================
Access Data From a Cursor
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to access data by using a **cursor** in
the {+driver-short+}.

A cursor is a mechanism that allows an application to iterate over database
results while only holding a subset of them in memory at a given time. The
driver uses cursors in read operations that match multiple documents to return
matched documents in batches as opposed to returning them all at once.

This page uses an initiating method, ``find()`` to show how to access
data from a `FindIterable
<{+driver-api+}/FindIterable.html>`__.

.. note::

   The following ways to access and store data apply to
   other iterables such as an `AggregateIterable
   <{+driver-api+}/AggregateIterable.html>`__.

The ``find()`` method creates and returns an instance of a
``FindIterable``. A ``FindIterable`` allows you to browse the documents
matched by your search criteria and to further specify which documents
to see by setting parameters through methods.

.. tip:: Cursor Timeout

   You can set a timeout on your cursor to return query results.
   To learn more, see the :ref:`java-csot-cursor` section of the Limit
   Server Execution Time guide.

Terminal Methods
----------------

Terminal methods execute an operation on the MongoDB deployment after
configuring all parameters of an ``Iterable`` instance controlling the
operation.

First
~~~~~

Use the ``first()`` method to retrieve the first document in your query
results:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin firstExample
   :end-before: end firstExample

This method is often used when your query filter will match one
document, such as when filtering by a unique index.

Number of Results
~~~~~~~~~~~~~~~~~

Use the ``available()`` method to retrieve the number of results
locally present without blocking:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin availableExample
   :end-before: end availableExample

The method returns ``0`` if the application has already iterated through
all the documents in the cursor or if the cursor is closed.

Into
~~~~

Use the ``into()`` method to store your query results in a ``List``:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin intoExample
   :end-before: end intoExample

This method is often used when your query filter returns a small number
of documents that can fit into available memory.

Cursor
~~~~~~

Use the ``cursor()`` method to iterate through fetched documents and
ensure that the cursor closes if there is an early termination:

.. code-block:: java
   :copyable: true

   MongoCursor<Document> cursor = collection.find().cursor();

For more information about how to ensure a cursor closes, see the :ref:`cursor cleanup section <cursor_cleanup>`.

Explain
~~~~~~~

Use the ``explain()`` method to view information about how MongoDB
executes your operation.

The ``explain()`` method returns **execution plans** and performance
statistics. An execution plan is a potential way MongoDB
can complete an operation. The ``explain()`` method provides both the
winning plan (the plan MongoDB executed) and rejected plans.

.. include:: /includes/fundamentals/explain-verbosity.rst

The following example prints the JSON representation of the
winning plan for aggregation stages that produce execution plans:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin explainExample
   :end-before: end explainExample

The preceding code snippet produces the following output:

.. code-block:: none
   :copyable: false

   { "stage": "COLLSCAN", "direction": "forward" }

For more information about the explain operation, see the following
Server Manual Entries:

- :manual:`Explain Output </reference/explain-results/>`
- :manual:`Query Plans </core/query-plans/>`

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- `first() <{+driver-api+}/MongoIterable.html#first()>`__
- `available() <{+driver-api+}/MongoCursor.html#available()>`__
- `into() <{+driver-api+}/MongoIterable.html#into(A)>`__
- `cursor() <{+driver-api+}/MongoIterable.html#cursor()>`__
- `explain() <{+driver-api+}/FindIterable.html#explain()>`__
- `ExplainVerbosity <{+core-api+}/ExplainVerbosity>`__

Usage Patterns
--------------

A ``MongoCursor`` and ``FindIterable`` allow you to access query results
one document at a time, abstracting away network and caching logic.

Functional Iteration
~~~~~~~~~~~~~~~~~~~~~

Pass a function to the ``forEach()`` method of a ``FindIterable`` to
iterate through results in a functional style:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin forEachIteration
   :end-before: end forEachIteration

.. important::

   Initiating methods return objects that implement the ``Iterable`` interface which allows you
   to iterate through them using iterator methods. Sometimes, we use an enhanced
   for-each loop to iterate through results:

   .. code-block:: java

      for (Document cursor : collection.find()) {
         ...
      }

   Iterating this way is not preferable because if an exception is
   thrown before the loop completes, the cursor will not close. Using a
   ``MongoCursor`` allows us to ensure the cursor closes as shown in the
   :ref:`cursor cleanup section <cursor_cleanup>`.

.. _java-fundamentals-cursor-conditional-iteration:

Conditional Iteration
~~~~~~~~~~~~~~~~~~~~~

Use the ``hasNext()`` method to check if there are any documents
available in the cursor, and then use the ``next()`` method to retrieve
the next available document from the cursor:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin manualIteration
   :end-before: end manualIteration

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- `forEach() <https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Iterable.html?is-external=true#forEach(java.util.function.Consumer)>`__
- `hasNext() <{+driver-api+}/MongoCursor.html#hasNext()>`__
- `next() <{+driver-api+}/MongoCursor.html#next()>`__

.. _cursor_cleanup:

Cursor Cleanup
--------------

Close
~~~~~

Use the ``close()`` method in a ``finally`` block to free up a cursor's
consumption of resources in both the client application and the MongoDB
deployment:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin closeExample
   :end-before: end closeExample

Try with Resources Statement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use a try-with-resources statement
to automatically free up a cursor's consumption of resources in both the
client application and the MongoDB deployment:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin tryWithResourcesExample
   :end-before: end tryWithResourcesExample

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- `close() <{+driver-api+}/MongoCursor.html#close()>`__
- `try-with-resources statement <https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html>`__
