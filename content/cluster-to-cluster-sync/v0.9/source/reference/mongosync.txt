.. _c2c-mongosync:

=============
``mongosync``
=============

.. include:: /includes/preview-warning

.. default-domain:: mongodb

.. program:: mongosync

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Description
-----------

The ``mongosync`` binary is the primary process used in
{+c2c-product-name+}. ``mongosync`` migrates data from one cluster to
another and can keep the clusters in continuous sync. 

This document provides a complete overview of the ``mongosync`` command
line options.

.. note::

   - Both the source cluster and destination cluster must use MongoDB
     6.0 or later.
   - ``mongosync`` supports replica sets and sharded clusters.
   - Standalone MongoDB instances are not supported. :ref:`Convert the
     standalone instance <server-replica-set-deploy-convert>` to a
     replica set before using {+c2c-product-name+}. 

.. _c2c-cli-options:

Options
-------

.. |opt-term| replace:: option

Global Options
~~~~~~~~~~~~~~

.. option:: --cluster0 <URI>

   .. include:: /includes/opts/cluster0.rst

   To set the ``--cluster0`` option from a configuration file,
   see the :setting:`cluster0` setting.


.. option:: --cluster1 <URI>

   .. include:: /includes/opts/cluster0.rst

   To set the ``--cluster1`` option from a configuration file,
   see the :setting:`cluster1` setting.


.. option:: --config <filename>

   Sets the path to the configuration file.

   For more information, see :ref:`c2c-mongosync-config`.


.. option:: --help, -h

   Prints usage information to stdout.


.. option:: --id <ID>

   .. include:: /includes/opts/id.rst

   To set the ``--id`` option from a configuration file,
   see the :setting:`id` setting.

.. option:: --logPath <DIR>

   .. include:: /includes/opts/logPath.rst

   To set the ``--logPath`` option from a configuration file,
   see the :setting:`logPath` setting.

.. option:: --port

   .. include:: /includes/opts/port.rst


   To set the ``--port`` option from a configuration file,
   see the :setting:`port` setting.


.. option:: --verbosity <level>

   .. |verbosity-opt-type| replace:: option
   .. |verbosity-opt| replace:: ``--verbosity``

   .. include:: /includes/opts/verbosity.rst

   To set the ``--verbosity`` option from a configuration file,
   see the :setting:`verbosity` setting.
   
.. option:: --version, -v

   Prints ``mongosync`` version information to stdout.

Behavior
--------

.. _c2c-mongosync-config:

Cluster Independence
~~~~~~~~~~~~~~~~~~~~

``mongosync`` synchronizes collection data between a source cluster and
destination cluster. ``mongosync`` does not synchronize :ref:`users
<users>` or :ref:`roles <built-in-roles>`. As a result, you can create
users with different access permissions on each cluster.

Configuration File
~~~~~~~~~~~~~~~~~~

Options for ``mongosync`` can be set in a YAML configuration file. Use
the :option:`--config` option. For example:

.. code-block:: console

   $ mongosync --config /etc/mongosync.conf

For information on available settings, see :ref:`Configuration <c2c-config>`.


Consistency
~~~~~~~~~~~

``mongosync`` supports :term:`eventual consistency` on the destination
cluster. Read Consistency is not guaranteed on the destination cluster,
the source and destination clusters may differ at a given point in
time. However, if new writes are halted on the source cluster, the
source and destination clusters will eventually hold the same data.

Individual writes may be reordered or combined as they are relayed from
source to destination. For a given document, the total number of writes
may differ between source and destination.

Transactions may appear non-atomically on the destination cluster.
Retryable writes may not be retryable on the destination cluster.

Profiling
~~~~~~~~~

If profiling is enabled on a source database, MongoDB creates a special
collection named ``<db>.system.profile``. After synchronization is
complete, {+c2c-product-name+} will not drop the
``<db>.system.profile`` collection from the destination even if the
source database is dropped at a later time. The ``<db>.system.profile``
collection will not change the accuracy of user data on the
destination.

Sharded Clusters
~~~~~~~~~~~~~~~~

{+c2c-product-name+} supports replication between sharded clusters.
Individual shards are replicated in parallel from the source cluster to
the destination cluster, however a :ref:`chunk migration
<sharding-chunk-migration>` or similar source update could move
documents to a new source shard during replication.

Even if documents move between source shards during replication,
{+c2c-product-name+} maintains the :term:`eventual consistency`
guarantee on the destination cluster.

Views
~~~~~

If a database with views is dropped on the source, the destination may
show an empty ``system.views`` collection in that database. The empty
``system.views`` collection will not change the accuracy of user
data on the destination.

Write Blocking
~~~~~~~~~~~~~~

By default, write-blocking is not enabled during synchronization. When
write-blocking is enabled, ``mongosync`` blocks writes:

- On the destination cluster during replication
- On the source cluster while committing

To enable write-blocking, use the :ref:`start API <c2c-api-start>`
to set ``enableUserWriteBlocking`` to ``true``.

:ref:`Reverse synchronization <c2c-api-reverse>` requires
write-blocking. To enable reverse synchronization between the source
and destination clusters, use the ``start API`` to initiate replication
with ``reversible`` and ``enableUserWriteBlocking`` set to ``true``.
The options must be set when replication begins, they cannot be updated
later.

.. include:: /includes/fact-write-blocking-requirement.rst

Examples
--------

#. Deploy a source and a destination cluster.

#. Initialize Cluster-to-Cluster Sync:

   .. code-block:: bash

      mongosync \
           --cluster0 'mongodb://192.0.2.10:27017,192.0.2.11:27017,192.0.2.12:27017' \
           --cluster1 'mongodb://192.0.2.20:27017,192.0.2.21:27017,192.0.2.22:27017'

   Use the appropriate connection strings for the :option:`--cluster0`
   and :option:`--cluster1` options so that they can connect to your
   replica sets.

#. To start the synchronization process, use an HTTP client such as
   cURL to send the ``start`` command to ``mongosync``:

   .. code-block:: bash

      curl localhost:27182/api/v1/start -X POST \
            --data '{ "source": "cluster0", "destination": "cluster1" }'

   Example Output:

   .. code-block:: json
      :copyable: false

      { "success": true }

