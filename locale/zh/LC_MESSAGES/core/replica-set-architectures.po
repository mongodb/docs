#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replica-set-architectures.txt:6
msgid "Replica Set Deployment Architectures"
msgstr "复制集架构"

#: ../source/core/replica-set-architectures.txt:16
msgid ""
"The architecture of a :term:`replica set <replica set>` affects the set's "
"capacity and capability. This document provides strategies for replica set "
"deployments and describes common architectures."
msgstr ""
" :term:`复制集 <replica set>` 的架构决定了复制集的承载能力与性能。本文旨在为"
"复制集的架构策略提供通用性的建议。"

#: ../source/core/replica-set-architectures.txt:20
msgid ""
"The standard replica set deployment for production system is a three-member "
"replica set. These sets provide redundancy and fault tolerance. Avoid "
"complexity when possible, but let your application requirements dictate the "
"architecture."
msgstr ""
"最基础的复制集架构是由三个成员组成的。这样的架构为复制集提供了冗余与故障切换"
"的余地。根据应用的需求来设计复制集的架构，尽量避免不必要的复杂化。"

#: ../source/core/replica-set-architectures.txt:26
msgid "Strategies"
msgstr "策略"

#: ../source/core/replica-set-architectures.txt:29
msgid "Determine the Number of Members"
msgstr "决定复制集的成员个数"

#: ../source/core/replica-set-architectures.txt:31
msgid "Add members in a replica set according to these strategies."
msgstr "请根据以下的策略来考量复制集的成员数"

#: ../source/core/replica-set-architectures.txt:44
msgid "Deploy an Odd Number of Members"
msgstr "复制集应含有奇数个成员"


#: ../source/core/replica-set-architectures.txt:65

msgid "Consider Fault Tolerance"
msgstr "故障容错的考量"


#: ../source/core/replica-set-architectures.txt:85
#: ../source/core/replica-set-architectures.txt:93
#: ../source/core/replica-set-architectures.txt:99

msgid "3"
msgstr "3"

#: ../source/core/replica-set-architectures.txt:87
#: ../source/core/replica-set-architectures.txt:101
#: ../source/core/replica-set-architectures.txt:107
msgid "2"
msgstr "2"

#: ../source/core/replica-set-architectures.txt:89
#: ../source/core/replica-set-architectures.txt:95
msgid "1"
msgstr "1"

#: ../source/core/replica-set-architectures.txt:91
#: ../source/core/replica-set-architectures.txt:105
msgid "4"
msgstr "4"

#: ../source/core/replica-set-architectures.txt:97
msgid "5"
msgstr "5"

#: ../source/core/replica-set-architectures.txt:103
msgid "6"
msgstr "6"

#: ../source/core/replica-set-architectures.txt:109
msgid ""
"Adding a member to the replica set does not *always* increase the fault "
"tolerance. However, in these cases, additional members can provide support "
"for dedicated functions, such as backups or reporting."
msgstr ""
"为复制集新增节点 *不一定* 能够复制集的故障容错能力，但是却可以为一些专用的功"
"能提供服务，比如备份或是报表。"

#: ../source/core/replica-set-architectures.txt:114
msgid "Use Hidden and Delayed Members for Dedicated Functions"
msgstr "为特殊需求使用隐藏节点和延时节点。"

#: ../source/core/replica-set-architectures.txt:116
msgid ""
"Add :ref:`hidden <replica-set-hidden-members>` or :ref:`delayed <replica-set-"
"delayed-members>` members to support dedicated functions, such as backup or "
"reporting."
msgstr ""
"新增 :ref:`隐藏节点 <replica-set-hidden-members>` 或是 :ref:`延时节点 "
"<replica-set-delayed-members>` 来为特殊需求提供服务，比如备份或是报表。"

#: ../source/core/replica-set-architectures.txt:121
msgid "Load Balance on Read-Heavy Deployments"
msgstr "以读为主的架构的负载均衡"

#: ../source/core/replica-set-architectures.txt:123
msgid ""
"In a deployment with *very* high read traffic, you can improve read "
"throughput by distributing reads to secondary members. As your deployment "
"grows, add or move members to alternate data centers to improve redundancy "
"and availability."
msgstr ""
"若业务带来的 *大量* 的读请求，我们可以通过做读写分离来提升复制集的读能力。随"
"着业务的扩展，我们可以通过在其他数据中心新增从节点的方式来提高冗余能力与可用"
"性。"

#: ../source/core/replica-set-architectures.txt:128
msgid "Always ensure that the main facility is able to elect a primary."
msgstr "为了能够选举出主节点，请保证复制集中多数节点的可用性。"

#: ../source/core/replica-set-architectures.txt:131
msgid "Add Capacity Ahead of Demand"
msgstr "不要在负载饱和时才想到来提高性能与承载能力。"

#: ../source/core/replica-set-architectures.txt:133
msgid ""
"The existing members of a replica set must have spare capacity to support "
"adding a new member. Always add new members before the current demand "
"saturates the capacity of the set."
msgstr ""
"请保证复制集拥有足够的备用容量来新增节点。不要在复制集负载饱和的时候才想到新"
"增节点来提高承载能力，应有前瞻性。"


#: ../source/core/replica-set-architectures.txt:140
msgid "Distribute Members Geographically"
msgstr ""

#: ../source/core/replica-set-architectures.txt:158
msgid "Target Operations with Tag Sets"
msgstr ""


#: ../source/core/replica-set-architectures.txt:164
msgid ""
":doc:`/data-center-awareness` and :doc:`/core/operational-segregation`."
msgstr ""
"在其他数据中心拥有至少一个复制集节点可以很好地在主数据中心出问题时为数据提供"
"安全性保障。将这类节点的 :data:`~local.system.replset.members[n].priority` 设"
"置为0，以防其升职为主节点。"


#: ../source/core/replica-set-architectures.txt:168
msgid "Use Journaling to Protect Against Power Failures"
msgstr ""


#: ../source/core/replica-set-architectures.txt:175
msgid "Replica Set Naming"
msgstr ""
"当复制集在多个数据中心拥有节点，且各数据中心网络隔离时，为了保证数据的复制与"
"传输，各节点之间需要能够正常沟通。"

#: ../source/includes/fact-unique-replica-set-names.rst:1
msgid ""
"If your application connects to more than one replica set, each set should "
"have a distinct name. Some drivers group replica set connections by replica "
"set name."
msgstr ""
"在选举中，各节点需要能够互相沟通来保证其多数性。为了保证复制集节点能够保持多"
"数且能够正常的选举出主节点，我们需要保证一个数据中心拥有复制集中的多数节点。"

#: ../source/core/replica-set-architectures.txt:180
msgid "Deployment Patterns"
msgstr ""

#: ../source/core/replica-set-architectures.txt:182
msgid ""
"The following documents describe common replica set deployment patterns. "
"Other patterns are possible and effective depending on the application's "
"requirements. If needed, combine features of each architecture in your own "
"deployment:"
msgstr ""

#: ../source/includes/toc/dfn-list-replica-set-architectures.rst:5
msgid ":doc:`/core/replica-set-architecture-three-members`"
msgstr ""
"通过 :ref:`复制集标签 <replica-set-configuration-tag-sets>` 来确保操作能够复"
"制到指定的数据中心。我们也能通过标签来将读操作发送到指定的节点。"


#: ../source/includes/toc/dfn-list-replica-set-architectures.rst:4
msgid ""
"Three-member replica sets provide the minimum recommended architecture for a"
" replica set."

msgstr ""
" :doc:`/data-center-awareness` 和 :doc:`/core/operational-segregation` 。"


#: ../source/includes/toc/dfn-list-replica-set-architectures.rst:9
msgid ":doc:`/core/replica-set-architecture-geographically-distributed`"
msgstr ""


#: ../source/includes/toc/dfn-list-replica-set-architectures.rst:8
msgid ""

"Geographically distributed sets include members in multiple locations to "
"protect against facility-specific failures, such as power outages."
msgstr ""

#: ../source/core/replica-set-architectures.txt:0
msgid "On this page"
msgstr ""

#: ../source/core/replica-set-architectures.txt:34
msgid "Maximum Number of Voting Members"

msgstr ""
"我们可以通过开启journaling功能个来在服务意外关闭或是掉电时保护数据。如果没有"
"开启journaling功能，MongoDB将无法在服务意外关闭或是掉电后恢复数据。"

#: ../source/core/replica-set-architectures.txt:36
msgid ""

"A replica set can have up to :limit:`50 members <Number of Members of a "
"Replica Set>`, but only :limit:`7 voting members <Number of Voting Members "
"of a Replica Set>`. [#master-slave]_ If the replica set already has 7 voting"
" members, additional members must be :ref:`non-voting members <replica-set-"
"non-voting-members>`."
msgstr ""

#: ../source/core/replica-set-architectures.txt:46
msgid ""
"Ensure that the replica set has an odd number of voting members. If you have"
" an *even* number of voting members, deploy an :ref:`arbiter <replica-set-"
"arbiters>` so that the set has an odd number of voting members."
msgstr ""


#: ../source/core/replica-set-architectures.txt:51
msgid ""
"An :term:`arbiter <arbiter>` does not store a copy of the data and requires "
"fewer resources. As a result, you may run an arbiter on an application "
"server or other shared process. With no copy of the data, it may be possible"
" to place an arbiter into environments that you would not place other "
"members of the replica set. Consult your security policies."
msgstr ""
"如果应用程序需要连接多个复制集，那么每个复制集需要有独立的名字。驱动通过复制"
"集名来进行数据库连接。"


#: ../source/core/replica-set-architectures.txt:60
msgid "In general, avoid deploying more than one arbiter per replica set."
msgstr ""


#: ../source/core/replica-set-architectures.txt:67
msgid ""
"*Fault tolerance* for a replica set is the number of members that can become"
" unavailable and still leave enough members in the set to elect a primary. "
"In other words, it is the difference between the number of members in the "
"set and the majority of voting members needed to elect a primary. Without a "
"primary, a replica set cannot accept write operations. Fault tolerance is an"
" effect of replica set size, but the relationship is not direct. See the "
"following table:"
msgstr ""


#: ../source/core/replica-set-architectures.txt:79
msgid "Number of Members"
msgstr ""


#: ../source/core/replica-set-architectures.txt:81
msgid "Majority Required to Elect a New Primary"
msgstr ""

#: ../source/core/replica-set-architectures.txt:83
msgid "Fault Tolerance"
msgstr ""

#: ../source/core/replica-set-architectures.txt:142
msgid ""

"To protect your data in case of a data center failure, keep at least one "
"member in an alternate data center. If possible, use an odd number of data "
"centers, and choose a distribution of members that maximizes the likelihood "
"that even with a loss of a data center, the remaining replica set members "
"can form a majority or at minimum, provide a copy of your data."
msgstr ""

#: ../source/core/replica-set-architectures.txt:149
msgid ""
"To ensure that the members in your main data center be elected primary "
"before the members in the alternate data center, set the "
":rsconf:`members[n].priority` of the members in the alternate data center to"
" be lower than that of the members in the primary data center."
msgstr ""


#: ../source/core/replica-set-architectures.txt:154
msgid ""
"For more information, see :doc:`/core/replica-set-architecture-"
"geographically-distributed`"
msgstr ""
"拥有四个或四个以上节点的复制集可以为读操作提供更广的分布结构，且可以将某些节"
"点用于某些专用功能。"


#: ../source/core/replica-set-architectures.txt:160
msgid ""
"Use :ref:`replica set tag sets <replica-set-configuration-tag-sets>` to "
"target read operations to specific members or to customize write concern to "
"request acknowledgement from specific members."
msgstr ""


#: ../source/core/replica-set-architectures.txt:170
msgid ""
"MongoDB enables :doc:`journaling </core/journaling>` by default. Journaling "
"protects against data loss in the event of service interruptions, such as "
"power failures and unexpected reboots."
msgstr ""

#: ../source/includes/fact-master-slave-workaround.rst:1
msgid ""
"While replica sets are the recommended solution for production, a replica "
"set can support up to :limit:`50 members <Number of Members of a Replica "
"Set>` in total. If your deployment requires more than 50 members, you’ll "
"need to use :doc:`master-slave </core/master-slave>` replication. However, "
"master-slave replication lacks the automatic failover capabilities."
msgstr ""

#~ msgid ""
#~ "An odd number of members ensures that the replica set is always able to "
#~ "elect a primary. If you have an even number of members, add an arbiter to "
#~ "get an odd number. :term:`Arbiters <arbiter>` do not store a copy of the "
#~ "data and require fewer resources. As a result, you may run an arbiter on an "
#~ "application server or other shared process."
#~ msgstr ""

#~ msgid ""
#~ "*Fault tolerance* for a replica set is the number of members that can become"
#~ " unavailable and still leave enough members in the set to elect a primary. "
#~ "In other words, it is the difference between the number of members in the "
#~ "set and the majority needed to elect a primary. Without a primary, a replica"
#~ " set cannot accept write operations. Fault tolerance is an effect of replica"
#~ " set size, but the relationship is not direct. See the following table:"
#~ msgstr ""

#~ msgid "Number of Members."
#~ msgstr ""

#~ msgid "Majority Required to Elect a New Primary."
#~ msgstr ""

#~ msgid "Fault Tolerance."
#~ msgstr ""

#~ msgid "Determine the Distribution of Members"
#~ msgstr ""

#~ msgid ""
#~ "To protect your data if your main data center fails, keep at least one "
#~ "member in an alternate data center. Set these members' "
#~ ":data:`~replSetGetConfig.members[n].priority` to 0 to prevent them from "
#~ "becoming primary."
#~ msgstr ""

#~ msgid "Keep a Majority of Members in One Location"
#~ msgstr ""

#~ msgid ""
#~ "When a replica set has members in multiple data centers, network partitions "
#~ "can prevent communication between data centers. To replicate data, members "
#~ "must be able to communicate to other members."
#~ msgstr ""

#~ msgid ""
#~ "In an election, members must see each other to create a majority. To ensure "
#~ "that the replica set members can confirm a majority and elect a primary, "
#~ "keep a majority of the set’s members in one location."
#~ msgstr ""

#~ msgid ""
#~ "Use :ref:`replica set tag sets <replica-set-configuration-tag-sets>` to "
#~ "ensure that operations replicate to specific data centers. Tag sets also "
#~ "allow the routing of read operations to specific machines."
#~ msgstr ""

#~ msgid ""
#~ "Enable journaling to protect data against service interruptions. Without "
#~ "journaling MongoDB cannot recover data after unexpected shutdowns, including"
#~ " power failures and unexpected reboots."
#~ msgstr ""

#~ msgid ""
#~ "All 64-bit versions of MongoDB after version 2.0 have journaling enabled by "
#~ "default."
#~ msgstr ""

#~ msgid ":doc:`/core/replica-set-architecture-four-members`"
#~ msgstr ""

#~ msgid ""
#~ "Four or more member replica sets provide greater redundancy and can support "
#~ "greater distribution of read operations and dedicated functionality."
#~ msgstr ""
