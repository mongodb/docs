.. meta::
   :robots: noindex, nosnippet

.. _react-native-user-provider:

===========================
UserProvider (@realm/react)
===========================

.. facet::
  :name: genre
  :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

.. code:: typescript
   :copyable: false
   :caption: Type signature

   UserProvider(props): null | ReactElement<any, any>

Components nested within ``UserProvider`` can access the logged-in user object
and use the ``UserProvider`` hooks.

Props
-----

- ``fallback?: React.ComponentType<unknown> | React.ReactElement | null | undefined``
  The fallback component to render if there is no authorized user. This can be
  used to render a log in screen or otherwise handle authentication.

Configure UserProvider
----------------------

Components wrapped by :realm-react-sdk:`AppProvider <functions/AppProvider.html>`
can access the :realm-react-sdk:`useApp <functions/useApp.html>` and
:realm-react-sdk:`useAuth <functions/useAuth.html>` hooks. These components only
render if ``AppProvider`` successfully connects to your App Services backend.

Components wrapped by :realm-react-sdk:`UserProvider <functions/UserProvider.html>`
can access authenticated users with the :realm-react-sdk:`useUser 
<functions/useUser.html>` hook. These components only render if your app has an
authenticated user.

To configure user authentication:

#. Wrap all components that need to access App Services in ``AppProvider``.
#. Inside of ``AppProvider``, wrap all components that you want to have access
   to an authenticated user with ``UserProvider``.
#. In ``UserProvider``, include a ``fallback`` prop with a component
   that logs a user in. The app renders this component if there
   is no authenticated user.

.. include:: /examples/generated/react-native/v12/RealmWrapper.snippet.configure-user-provider.tsx.rst

UserProvider Hooks
------------------

.. _react-native-use-user-hook:

useUser()
~~~~~~~~~

.. code:: typescript
   :copyable: false
   :caption: Type signature

   useUser<FunctionsFactoryType, CustomDataType, UserProfileDataType>(): Realm.User<FunctionsFactoryType, CustomDataType, UserProfileDataType>

The ``useUser()`` hook provides access to the logged-in user. For example,
you can use ``useUser()`` to log the current user out.

When changes to the user object happen, this hook will rerender its parent
component. For example, if you call ``user.refreshCustomData`` to get updated
custom user data, the ``useUser()`` parent component will rerender.

.. include:: /examples/generated/react-native/v12/RealmWrapper.snippet.log-user-out.tsx.rst

*Returns*

- ``Realm.User``
  An instance of the currently-authenticated Realm user.
