.. meta::
   :robots: nosnippet

.. _realm-cli:
.. _realm-cli-quickstart:

=============================
``realm-cli`` v2 [Deprecated]
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/realm-cli-deprecation.rst

Overview
--------

.. program:: realm-cli
.. binary:: realm-cli

The MongoDB Realm Command Line Interface (``realm-cli``)
allows you to programmatically manage your Apps.
With ``realm-cli``, you can create or update
Apps from a local directory as well as export
existing applications to a local directory.

.. important:: Check your CLI version
   
   This page is a quickstart for version 2 of ``realm-cli``. If you need 
   documentation for version 1 of ``realm-cli``, see: :ref:`Realm CLI v1 <realm-cli-v1>`.
   To check your CLI version, use: ``realm-cli --version``.
   To upgrade your global install to the latest version, use: ``npm upgrade -g mongodb-realm-cli``.

.. _install-realm-cli:

Installation
------------

.. include:: /includes/install-realm-cli-v2.rst

.. _realm-cli-auth-with-api-token:

Authentication
--------------

To use ``realm-cli``, you must authenticate. To authenticate, you must generate an
API Key.

Generate an API Key
~~~~~~~~~~~~~~~~~~~

.. procedure::

   .. step:: Navigate to MongoDB Cloud Access Manager

      The :mms-docs:`MongoDB Cloud Access Manager </tutorial/manage-users>`
      allows you to manage access to your project for users, teams, and API
      Keys. Use the Project Access Manager by clicking the
      :guilabel:`Project Access` tab on the :guilabel:`access manager
      dropdown` on your screen's top left-hand side.

      .. figure:: /images/click-access-manager.png
         :alt: Click Access Manager
         :lightbox:


   .. step:: Create an API Key

      Project Users can log in using ``realm-cli`` tool with a Project API
      Key. Create a project API Key by clicking the grey :guilabel:`Create
      API Key` button on the right-hand side of the Project Access Manager.

      .. figure:: /images/access-manager-create-api-key-button.png
         :alt: Click Access Manager
         :lightbox:

      Clicking this button navigates you to the "Create API Key" screen. Set a
      description for your key.

      For write access, the CLI requires an API key with "Project Owner"
      permissions. For read-only access, you can use "Project Read Only". Use the
      :guilabel:`Project Permissions` dropdown to select the appropriate permissions
      for your use case.

      Copy the public key to use later in order to log in. Click :guilabel:`next` to
      continue configuring your key details.

      .. figure:: /images/configure-api-key.png
         :alt: Click Access Manager
         :lightbox:


   .. step:: Configure Your API Access List

      Copy your Private Key to a safe location for later use. For security,
      the Private Key will not be visible again after initialization.
      Another security feature is the API Access List. Creating an API
      Access List entry ensures that API calls originate from permitted IPs.

      The IP Address of the user who will be using the API Key is required
      to use the key. Click the :guilabel:`Add Access List Entry` button.
      Type in the IP Address or click the :guilabel:`Use Current IP Address`
      buttton and click save.  Finally, click the done button on your screen's
      lower right-hand to finish setting up your API key.

      .. figure:: /images/add-access-list-entry.png
         :alt: Click Access Manager
         :lightbox:

Authenticate with an API Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. procedure::

   .. step:: Authenticate a CLI User

      Using your newly created public and private key, log in by running the
      command below.

      .. code-block:: shell

         realm-cli login --api-key="<my api key>" --private-api-key="<my private api key>"

      You should see the following result:

      .. code-block:: shell

         you have successfully logged in as <your public key>

Options
-------

Use "realm-cli [command] --help" for information on a specific command

.. list-table::
   :header-rows: 1
   :widths: 20 10 10 60

   * - Name
     - Type
     - Required
     - Description
   * - --profile
     - string
     - no
     - Specify your profile (Default value: "default") (default "default")
   * - --telemetry
     - string
     - no
     - Enable/Disable CLI usage tracking for your current profile (Default value: "on"; Allowed values: "on", "off")
   * - -o, --output-target
     - string
     - no
     - Write CLI output to the specified filepath
   * - -f, --output-format
     - string
     - no
     - Set the CLI output format (Default value: <blank>; Allowed values: <blank>, "json")
   * - --disable-colors
     - 
     - no
     - Disable all CLI output styling (e.g. colors, font styles, etc.)
   * - -y, --yes
     - 
     - no
     - Automatically proceed through CLI commands by agreeing to any required user prompts
   * - -h, --help
     - 
     - false
     - help for realm-cli

Commands
--------

* :ref:`realm-cli-accessList` - Manage allowed IP addresses and CIDR blocks
* :ref:`realm-cli-apps` - Manage the App Services apps associated with the current user (alias: app)
* :ref:`realm-cli-function` - Interact with the Functions of your App (alias: functions)
* :ref:`realm-cli-login` - Log the CLI into App Services using a MongoDB Cloud API key
* :ref:`realm-cli-logout` - Log the CLI out of App Services
* :ref:`realm-cli-logs` - Interact with the Logs of your App (alias: log)
* :ref:`realm-cli-pull` - Exports the latest version of your App into your local directory (alias: export)
* :ref:`realm-cli-push` - Imports and deploys changes from your local directory to your App (alias: import)
* :ref:`realm-cli-schema` - Manage the Schemas of your App (alias: schemas)
* :ref:`realm-cli-secrets` - Manage the Secrets of your App (alias: secret)
* :ref:`realm-cli-users` - Manage the Users of your App (alias: user)
* :ref:`realm-cli-whoami` - Display information about the current user

.. toctree::
   :titlesonly:
   :hidden:

   accessList </realm-cli/v2/realm-cli-accessList>
   apps </realm-cli/v2/realm-cli-apps>
   function </realm-cli/v2/realm-cli-function>
   login </realm-cli/v2/realm-cli-login>
   logout </realm-cli/v2/realm-cli-logout>
   logs </realm-cli/v2/realm-cli-logs>
   pull </realm-cli/v2/realm-cli-pull>
   push </realm-cli/v2/realm-cli-push>
   schema </realm-cli/v2/realm-cli-schema>
   secrets </realm-cli/v2/realm-cli-secrets>
   users </realm-cli/v2/realm-cli-users>
   whoami </realm-cli/v2/realm-cli-whoami>
