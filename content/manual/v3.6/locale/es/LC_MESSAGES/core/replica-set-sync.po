# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 19:30+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/replica-set-sync.txt:5
msgid "Replica Set Data Synchronization"
msgstr ""

#: ../source/core/replica-set-sync.txt:15
msgid ""
"In order to maintain up-to-date copies of the shared data set, secondary "
"members of a replica set :term:`sync` or replicate data from other "
"members. MongoDB uses two forms of data synchronization: initial sync to "
"populate new members with the full data set, and replication to apply "
"ongoing changes to the entire data set."
msgstr ""

#: ../source/core/replica-set-sync.txt:25
msgid "Initial Sync"
msgstr ""

#: ../source/core/replica-set-sync.txt:27
msgid ""
"Initial sync copies all the data from one member of the replica set to "
"another member."
msgstr ""

#: ../source/core/replica-set-sync.txt:31
msgid "Process"
msgstr ""

#: ../source/core/replica-set-sync.txt:33
msgid "When you perform an initial sync, MongoDB:"
msgstr ""

#: ../source/core/replica-set-sync.txt:35
msgid ""
"Clones all databases except the :ref:`local <replica-set-local-database>`"
" database. To clone, the :binary:`~bin.mongod` scans every collection in "
"each source database and inserts all data into its own copies of these "
"collections."
msgstr ""

#: ../source/core/replica-set-sync.txt:40
msgid ""
"Initial sync builds all collection indexes as the documents are copied "
"for each collection. In earlier versions of MongoDB, only the ``_id`` "
"indexes are built during this stage."
msgstr ""

#: ../source/core/replica-set-sync.txt:45
msgid ""
"Initial sync pulls newly added oplog records during the data copy. Ensure"
" that the target member has enough disk space in the ``local`` database "
"to temporarily store these oplog records for the duration of this data "
"copy stage."
msgstr ""

#: ../source/core/replica-set-sync.txt:51
msgid ""
"Applies all changes to the data set. Using the oplog from the source, the"
" :binary:`~bin.mongod` updates its data set to reflect the current state "
"of the replica set."
msgstr ""

#: ../source/core/replica-set-sync.txt:55
msgid ""
"When the initial sync finishes, the member transitions from "
":replstate:`STARTUP2` to :replstate:`SECONDARY`."
msgstr ""

#: ../source/core/replica-set-sync.txt:58
msgid ""
"To perform an initial sync, see :doc:`/tutorial/resync-replica-set-"
"member`."
msgstr ""

#: ../source/core/replica-set-sync.txt:64
msgid "Fault Tolerance"
msgstr ""

#: ../source/core/replica-set-sync.txt:66
msgid ""
"To recover from transient network or operation failures, initial sync has"
" built-in retry logic."
msgstr ""

#: ../source/core/replica-set-sync.txt:71
msgid ""
"MongoDB 3.4 improves the initial sync retry logic to be more resilient to"
" intermittent failures on the network."
msgstr ""

#: ../source/core/replica-set-sync.txt:78
msgid "Replication"
msgstr ""

#: ../source/core/replica-set-sync.txt:80
msgid ""
"Secondary members replicate data continuously after the initial sync. "
"Secondary members copy the :doc:`oplog </core/replica-set-oplog>` from "
"their *sync from* source and apply these operations in an asynchronous "
"process. [#slow-oplogs]_"
msgstr ""

#: ../source/core/replica-set-sync.txt:85
msgid ""
"Secondaries may automatically change their *sync from* source as needed "
"based on changes in the ping time and state of other members' "
"replication."
msgstr ""

#: ../source/includes/fact-voting-node-sync-incompatibility.rst:1
msgid ""
"MongoDB 3.2 replica set members with :rsconf:`1 vote <members[n].votes>` "
"cannot sync from members with  :rsconf:`0 votes <members[n].votes>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:93
msgid ""
"Secondaries avoid syncing from :ref:`delayed members <replica-set-"
"delayed-members>` and :ref:`hidden members <replica-set-hidden-members>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:97
msgid ""
"If a secondary member has :rsconf:`members[n].buildIndexes` set to "
"``true``, it can only sync from other members where "
":rsconf:`~members[n].buildIndexes` is ``true``. Members where "
":rsconf:`~members[n].buildIndexes` is ``false`` can sync from any other "
"member, barring other sync restrictions. "
":rsconf:`~members[n].buildIndexes` is ``true`` by default."
msgstr ""

#: ../source/includes/fact-slow-oplog-log-message-footnote.rst:1
msgid ""
"For MongoDB 3.6 deployments, starting in version 3.6.11, secondary "
"members of a replica set now :ref:`log oplog entries <slow-oplog>` that "
"take longer than the slow operation threshold to apply. These slow oplog "
"messages are logged for the secondaries in the :option:`diagnostic log "
"<mongod --logpath>` under the :data:`REPL` component with the text "
"``applied op: <oplog entry> took <num>ms``. These slow oplog entries "
"depend only on the slow operation threshold. They do not depend on the "
"log levels (either at the system or component level), or the profiling "
"level, or the slow operation sample rate. The profiler does not capture "
"slow oplog entries."
msgstr ""

#: ../source/core/replica-set-sync.txt:110
msgid "Multithreaded Replication"
msgstr ""

#: ../source/core/replica-set-sync.txt:112
msgid ""
"MongoDB applies write operations in batches using multiple threads to "
"improve concurrency. MongoDB groups batches by namespace (:ref:`MMAPv1 "
"<storage-mmapv1>`) or by document id (:ref:`WiredTiger <storage-"
"wiredtiger>`) and simultaneously applies each group of operations using a"
" different thread. MongoDB always applies write operations to a given "
"document in their original write order."
msgstr ""

#: ../source/core/replica-set-sync.txt:119
msgid ""
"While applying a batch, MongoDB blocks all read operations. As a result, "
"secondary read queries can never return data that reflect a state that "
"never existed on the primary."
msgstr ""

#: ../source/core/replica-set-sync.txt:124
msgid "Pre-Fetching Indexes to Improve Replication Throughput"
msgstr ""

#: ../source/core/replica-set-sync.txt:127
msgid "Applies to MMAPv1 only."
msgstr ""

#: ../source/core/replica-set-sync.txt:129
msgid ""
"With the :ref:`MMAPv1 <storage-mmapv1>` storage engine, MongoDB fetches "
"memory pages that hold affected data and indexes to help improve the "
"performance of applying oplog entries. This *pre-fetch* stage minimizes "
"the amount of time MongoDB holds write locks while applying oplog "
"entries. By default, secondaries will pre-fetch all :ref:`indexes`."
msgstr ""

#: ../source/core/replica-set-sync.txt:135
msgid ""
"Optionally, you can disable all pre-fetching or only pre-fetch the index "
"on the ``_id`` field. See the "
":setting:`~replication.secondaryIndexPrefetch` setting for more "
"information."
msgstr ""

#~ msgid ""
#~ "Optionally, you can disable all pre-"
#~ "fetching or only pre-fetch the "
#~ "index on the ``_id`` field. See "
#~ "the :setting:`replIndexPrefetch` setting for "
#~ "more information."
#~ msgstr ""

# 6c1d2b01334a497c8d6d55c8ebcdea5c
#~ msgid ""
#~ "In order to maintain up-to-date"
#~ " copies of the shared data set, "
#~ "members of a replica set :term:`sync`"
#~ " or replicate data from other "
#~ "members. MongoDB uses two forms of "
#~ "data synchronization: :ref:`initial sync "
#~ "<replica-set-initial-sync>` to populate "
#~ "new members with the full data "
#~ "set, and replication to apply ongoing"
#~ " changes to the entire data set."
#~ msgstr ""

# ae9475ae33bb44d0a5c0c56646630c90
#~ msgid ""
#~ "Initial sync copies all the data "
#~ "from one member of the replica set"
#~ " to another member. A member uses "
#~ "initial sync when the member has "
#~ "no data, such as when the member"
#~ " is new, or when the member has"
#~ " data but is missing a history "
#~ "of the set's replication."
#~ msgstr ""

# c9c035c96a804a5c94f6ec7fad477a3f
#~ msgid "When you perform an initial sync, MongoDB does the following:"
#~ msgstr ""

# 47eb1f515ee74441b35acf5c86be41c0
#~ msgid ""
#~ "Clones all databases. To clone, the "
#~ ":program:`mongod` queries every collection in"
#~ " each source database and inserts all"
#~ " data into its own copies of "
#~ "these collections.  At this time, _id"
#~ " indexes are also built."
#~ msgstr ""

# 86891f9b0e434b999397635ab132c823
#~ msgid ""
#~ "Applies all changes to the data "
#~ "set. Using the oplog from the "
#~ "source, the :program:`mongod` updates its "
#~ "data set to reflect the current "
#~ "state of the replica set."
#~ msgstr ""

# f20b5adb13054590be56c1a04b9d9e5a
#~ msgid ""
#~ "Builds all indexes on all collections"
#~ " (except _id indexes, which were "
#~ "already completed)."
#~ msgstr ""

# 0e503734c7a84d65ae0c85da99433bc9
#~ msgid ""
#~ "When the :program:`mongod` finishes building"
#~ " all index builds, the member can "
#~ "transition to a normal state, i.e. "
#~ ":term:`secondary`."
#~ msgstr ""

# c6abe39e9e694b299cd23dec02940389
#~ msgid ""
#~ "Replica set members replicate data "
#~ "continuously after the initial sync. "
#~ "This process keeps the members up "
#~ "to date with all changes to the"
#~ " replica set's data. In most cases,"
#~ " secondaries synchronize from the primary."
#~ " Secondaries may automatically change their"
#~ " *sync targets* if needed based on"
#~ " changes in the ping time and "
#~ "state of other members' replication."
#~ msgstr ""

# 3d29360e4687422c97a0cea54915782d
#~ msgid ""
#~ "For a member to sync from another,"
#~ " the :data:`~local.system.replset.members[n].buildIndexes`"
#~ " setting for both members must have"
#~ " the same value/ "
#~ ":data:`~local.system.replset.members[n].buildIndexes` must "
#~ "be either ``true`` or ``false`` for "
#~ "both members."
#~ msgstr ""

# 4f6513faa01a4c519f93c45018bf6d69
#~ msgid ""
#~ "Beginning in version 2.2, secondaries "
#~ "avoid syncing from :ref:`delayed members "
#~ "<replica-set-delayed-members>` and "
#~ ":ref:`hidden members <replica-set-hidden-"
#~ "members>`."
#~ msgstr ""

# 2c2fee22bc7c497eb55b344241ae39f7
#~ msgid "Validity and Durability"
#~ msgstr ""

# 4270f0da2ffd4614b2455c58de60118e
#~ msgid ""
#~ "In a replica set, only the primary"
#~ " can accept write operations. Writing "
#~ "only to the primary provides "
#~ ":term:`strict consistency` among members."
#~ msgstr ""

# 9118f00f5c9249d3b0b9776d41281b53
#~ msgid ""
#~ ":term:`Journaling <journal>` provides single-"
#~ "instance write durability. Without journaling,"
#~ " if a MongoDB instance terminates "
#~ "ungracefully, you must assume that the"
#~ " database is in an invalid state."
#~ msgstr ""

# 9ada275d884a4666aaed1013473d05d2
#~ msgid ""
#~ "MongoDB applies write operations in "
#~ "batches using multiple threads to "
#~ "improve concurrency. MongoDB groups batches"
#~ " by namespace and applies operations "
#~ "using a group of threads, but "
#~ "always applies the write operations to"
#~ " a namespace in order."
#~ msgstr ""

# 7adfddb69ca84e5a809b1ced7615d681
#~ msgid ""
#~ "While applying a batch, MongoDB blocks"
#~ " all reads. As a result, secondaries"
#~ " can never return data that reflects"
#~ " a state that never existed on "
#~ "the primary."
#~ msgstr ""

# e0220aeda42f4994b9db109241d7c39a
#~ msgid ""
#~ "To help improve the performance of "
#~ "applying oplog entries, MongoDB fetches "
#~ "memory pages that hold affected data "
#~ "and indexes. This *pre-fetch* stage "
#~ "minimizes the amount of time MongoDB "
#~ "holds the write lock while applying "
#~ "oplog entries. By default, secondaries "
#~ "will pre-fetch all :ref:`indexes`."
#~ msgstr ""

