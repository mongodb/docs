.. meta::
   :robots: noindex, nosnippet

.. _cpp-encrypt-a-realm:

=========================
Encrypt a Realm - C++ SDK
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can encrypt the realm file on disk with AES-256 +
SHA-2 by supplying a 64-byte encryption key when :ref:`opening a
realm <cpp-configure-and-open-a-realm>`.

Realm transparently encrypts and decrypts data with standard
:wikipedia:`AES-256 encryption <Advanced_Encryption_Standard>` using the
first 256 bits of the given 512-bit encryption key. Realm
uses the other 256 bits of the 512-bit encryption key to validate
integrity using a :wikipedia:`hash-based message authentication code
(HMAC) <HMAC>`.

.. include:: /includes/encrypt-use-strong-cryptographic-hash.rst

Encrypt a realm by calling the ``set_encryption_key()`` function on
your :cpp-sdk:`db_config <structrealm_1_1internal_1_1bridge_1_1realm_1_1config.html>`:

.. literalinclude:: /examples/generated/cpp/realm-files.snippet.open-encrypted-realm.cpp
   :language: cpp
   :emphasize-lines: 16-17

.. tip:: You cannot encrypt a realm that already exists on device

   The C++ SDK does not yet support encrypting a realm that already 
   exists on device. You must encrypt the realm the first time you open it.

Store & Reuse Keys
------------------

You **must** pass the same encryption key every time you open the encrypted realm. 
If you don't provide a key or specify the wrong key for an encrypted
realm, the Realm SDK throws an error.

Apps should store the encryption key securely on the device so that other 
apps cannot read the key.

Performance Impact
------------------

Reads and writes on encrypted realms can be up to 10% slower than unencrypted realms.

Encryption and Atlas Device Sync
--------------------------------

Encrypt a Synced Realm
~~~~~~~~~~~~~~~~~~~~~~

You can encrypt a :ref:`synced realm <cpp-open-synced-realm>`. 

.. include:: /includes/encrypt-atlas-device-sync.rst

If you need unique keys for each user of your application, you can use an OAuth provider or
use one of the :ref:`Realm authentication providers <users-and-authentication>` 
and an :ref:`authentication trigger<authentication-triggers>`
to create a 64-bit key and store that key in a :ref:`user object <user-objects>`.

Encrypt Metadata
~~~~~~~~~~~~~~~~

You can encrypt the metadata that Realm stores on the device. For more 
information, refer to :ref:`cpp-encrypt-app-metadata`.
