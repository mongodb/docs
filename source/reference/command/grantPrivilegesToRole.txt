=====================
grantPrivilegesToRole
=====================

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: grantPrivilegesToRole

   Assigns additional :ref:`privileges <privileges>` to a :ref:`user-defined
   <user-defined-roles>` role defined on the database on which the
   command is run. The :dbcommand:`grantPrivilegesToRole` command uses
   the following syntax:

   .. code-block:: javascript

      { 
        grantPrivilegesToRole: "<role>",
        privileges: [
            {
              resource: { <resource> }, actions: [ "<action>", ... ]
            },
            ...
        ],
        writeConcern: { <write concern> }
      }

   The :dbcommand:`grantPrivilegesToRole` command has the following
   fields:

   .. include:: /reference/command/grantPrivilegesToRole-field.rst

Behavior
--------

A role's privileges apply to the database where the role is created. A
role created on the ``admin`` database can include privileges that apply
to all databases or to the :ref:`cluster <resource-cluster>`.

Required Access
---------------

.. include:: /includes/access-grant-privileges.rst

Example
-------

The following :dbcommand:`grantPrivilegesToRole` command grants two
additional privileges to the ``service`` role that exists in the
``products`` database:

.. code-block:: javascript

   use products
   db.runCommand(
      {
        grantPrivilegesToRole: "service",
        privileges: [
            {
              resource: { db: "products", collection: "" }, actions: [ "find" ]
            },
            {
              resource: { db: "products", collection: "system.indexes" }, actions: [ "find" ]
            }
        ],
        writeConcern: { w: "majority" , wtimeout: 5000 }
      }
   )

The first privilege in the ``privileges`` array allows the user to
search on all non-system collections in the ``products`` database. The
privilege does not allow searches on :doc:`system collections
</reference/system-collections>`, such as the :data:`system.indexes
<<database>.system.indexes>` collection. To grant access to these
system collections, explicitly provision access in the ``privileges``
array. See :doc:`/reference/resource-document`.

The second privilege explicitly allows the :authaction:`find` action on
:data:`system.indexes <<database>.system.indexes>` collections on all
databases.
