====
Read
====

.. default-domain:: mongodb

Of the four basic database operations (i.e. CRUD), read operation are
those that retrieve records or or :term:`documents <document>` from a
:term:`collection` in MongoDB. For general information about read
operations and the factors that affect their performance, see
:doc:`/core/read-operations`; for documentation of the other CRUD
operations, see the :doc:`/crud` page.

Overview
--------

You can retrieve documents from MongoDB using either of the following
methods:

- :ref:`find <crud-read-find>`

- :ref:`findOne <crud-read-findOne>`

.. _crud-read-find:

Find
----

The :method:`find() <db.collection.find()>` method is the primary
method to select documents from a collection. The :method:`find()
<db.collection.find()>` method returns a cursor that contains a number
of documents. Most :doc:`drivers </applications/drivers>` provide
application developers with a native iterable interface for handling
cursors and accessing documents.
The :method:`find() <db.collection.find()>` method has the following
syntax:

.. code-block:: javascript

   db.collection.find( <query>, <projection> )

.. admonition:: Corresponding Operation in SQL

   The :method:`find() <db.collection.find()>` method is analogous to
   the ``SELECT`` statement, while:

   - the ``<query>`` argument corresponds to the ``WHERE`` statement,
     and

   - the ``<projection>`` argument corresponds to the list of fields
     to select from the result set.

Consider the following examples that illustrate the use of the
:method:`find() <db.collection.find()>` method:

.. pull-quote:: The examples refer to a collection named ``bios``
   that contains documents with the following prototype:

   .. code-block:: javascript

      {
        "_id" : 1,
        "name" : {
                   "first" : "John",
                   "last" :"Backus"
                 },
        "birth" : ISODate("1924-12-03T05:00:00Z"),
        "death" : ISODate("2007-03-17T04:00:00Z"),
        "contribs" : [ "Fortran", "ALGOL", "Backus-Naur Form", "FP" ],
        "awards" : [
                    {
                      "award" : "W.W. McDowellAward",
                      "year" : 1967,
                      "by" : "IEEE Computer Society"
                    },
                    {
                      "award" : "National Medal of Science",
                      "year" : 1975,
                      "by" : "National Science Foundation"
                    },
                    {
                      "award" : "Turing Award",
                      "year" : 1977,
                      "by" : "ACM"
                    },
                    {
                      "award" : "Draper Prize",
                      "year" : 1993,
                      "by" : "National Academy of Engineering"
                    }
        ]
      }

.. note::

   In the :program:`mongo` shell, you can format the output by adding
   ``.pretty()`` to the :method:`find() <db.collection.find()>` method
   call.

- If there is no ``<query>`` argument, the :method:`find()
  <db.collection.find()>` method selects all documents from a collection.

  - The following operation returns all documents (or more
    precisely, a cursor to all documents) in the ``bios``
    collection:

    .. code-block:: javascript

       db.bios.find()

- If there is a ``<query>`` argument, the :method:`find()
  <db.collection.find()>` method selects all documents from a
  collection that satisfies the criteria of the query:

  - The following operation returns all documents in the ``bios``
    collection where the field ``_id`` equals ``5`` or
    ``ObjectId("507c35dd8fada716c89d0013")``:

    .. code-block:: javascript

       db.bios.find(
          {
            _id: { $in: [ 5,  ObjectId("507c35dd8fada716c89d0013") ] }
          }
       )

  *Arrays*

  - The following operation returns all documents in the ``bios``
    collection where the array field ``contribs`` contains the element
    ``'UNIX'``:

    .. code-block:: javascript

       db.bios.find(
          {
            contribs: 'UNIX'
          }
       )
       
  - The following operation returns all documents in the ``bios``
    collection where ``awards`` array contains a subdocument element
    that contains the ``award`` field equal to ``'Turing Award'`` and the
    ``year`` field greater than 1980:

    .. code-block:: javascript

       db.bios.find(
          {
            awards: {
                      $elemMatch: {
                           award: 'Turing Award',
                           year: { $gt: 1980 }
                      }
            }
          }
       )

    For more examples on accessing arrays, see :ref:`query documents
    for arrays <document-query-arrays>` and :ref:`read operations
    <read-operations-dot-notation-arrays>`.

  *Subdocuments*

  - The following operation returns all documents in the ``bios``
    collection where the subdocument ``name`` contains a field
    ``first`` with the value ``'Yukihiro'`` and a field ``last`` with
    the value ``'Matsumoto'``; the query uses :term:`dot-notation` to
    access fields in a subdocument:

    .. code-block:: javascript

       db.bios.find(
          {
            'name.first': 'Yukihiro',
            'name.last': 'Matsumoto'
          }
       )

    The query matches the document where the ``name`` field contains a
    subdocument with the field ``first`` with the value ``'Yukihiro'``
    and a field ``last`` with the value ``'Matsumoto'``. For instance,
    the query would match documents with ``name`` fields that
    held either of the following values:

    .. code-block:: javascript

       {
         first: 'Yukihiro',
         aka: 'Matz',
         last: 'Matsumoto'
       }

       {
         last: 'Matsumoto',
         first: 'Yukihiro'
       }

  - The following operation returns all documents in the ``bios``
    collection where the subdocument ``name`` is *exactly* ``{ first:
    'Yukihiro', last: 'Matsumoto' }``, including the order:

    .. code-block:: javascript

       db.bios.find(
          {
            name: {
                    first: 'Yukihiro',
                    last: 'Matsumoto'
            }
          }
       )

    The ``name`` field must match the sub-document exactly, including
    order. For instance, the query would **not** match documents with
    ``name`` fields that held either of the following values:

    .. code-block:: javascript

       {
         first: 'Yukihiro',
         aka: 'Matz',
         last: 'Matsumoto'
       }

       {
         last: 'Matsumoto',
         first: 'Yukihiro'
       }

    For more examples on accessing subdocuments, see :ref:`query
    documents for subdocuments <document-query-subdocuments>` and
    :ref:`read operations <read-operations-dot-notation-subdocuments>`.

  *Compound Query Criteria*
  
  - The following operation returns all documents in the ``bios``
    collection where either the field ``first`` in the sub-document
    ``name`` starts with the letter ``G`` **or** where the field
    ``birth`` is less than ``new Date('01/01/1945')``:

    .. code-block:: javascript

       db.bios.find(
          { $or: [
                   { 'name.first' : /^G/ },
                   { birth: { $lt: new Date('01/01/1945') } }
                 ]
          }
       )

  - The following operation returns all documents in the ``bios``
    collection where the field ``first`` in the subdocument ``name``
    starts with the letter ``K`` **and** the array field ``contribs``
    contains the element ``UNIX``:

    .. code-block:: javascript

       db.bios.find(
          {
            'name.first': /^K/,
            contribs: 'UNIX'
          }
       )

- If there is a ``<projection>`` argument, the :method:`find()
  <db.collection.find()>` method returns only those fields as specified
  in the ``<projection>`` argument to include or exclude:

  .. note:: The ``_id`` field is implicitly included in the
    ``<projection>`` argument. In projections that explicitly include
    fields, ``_id`` is the only field that you can explicitly exclude.
    Otherwise, you cannot mix include field and exclude field
    specifications.

  - The following operation finds all documents in the ``bios``
    collection and returns only the ``name`` field, the ``contribs``
    field, and the ``_id`` field:

    .. code-block:: javascript

       db.bios.find(
          { },
          { name: 1, contribs: 1 }
       )

  - The following operation finds all documents in the ``bios``
    collection and returns only the ``name`` field and the ``contribs``
    field:

    .. code-block:: javascript

       db.bios.find(
          { },
          { name: 1, contribs: 1, _id: 0 }
       )

  - The following operation finds the documents in the ``bios``
    collection where the ``contribs`` field contains the element
    ``'OOP'`` and returns all fields *except* the ``_id`` field, the
    ``first`` field in the ``name`` subdocument, and the ``birth``
    field from the matching documents:

    .. code-block:: javascript

       db.bios.find(
          { contribs: 'OOP' },
          { _id: 0, 'name.first': 0, birth: 0 }
      )

  - The following operation finds all documents in the ``bios``
    collection and returns the the ``last`` field in the ``name``
    subdocument and the first two elements in the ``contribs`` field:

    .. code-block:: javascript

       db.bios.find(
          { },
          {
            _id: 0,
            'name.last': 1,
            contribs: { $slice: 2 }
          }
       )

Cursor
~~~~~~

:method:`find() <db.collection.find()>` returns a :term:`cursor`;
however, in the :program:`mongo` shell, the cursor is automatically
iterated up to 20 times to print the documents referenced by the
cursor. To access the documents, you must explicitly handle the
cursor, as in the following example:

.. code-block:: javascript

   var myCursor = db.bios.find( { _id: 1 } );

   var myDocument = myCursor.hasNext() ? myCursor.next() : null;

   if (myDocument) {
      var myName = myDocument.name;

      print (tojson(myName));
   }

See the :method:`cursor.forEach()`, :method:`cursor.hasNext()`,
:method:`cursor.next()` documentation for more information on cursor
handling.

In addition to the ``<query>`` and the ``<projection>`` arguments, the
:program:`mongo` shell and the :doc:`drivers </applications/drivers>`
provide several cursor methods that you can call on the *cursor*
returned by :method:`find() <db.collection.find()>` method to modify
its behavior, such as:

- :method:`sort <cursor.sort()>`, which orders the documents in the
  result set according to the field or fields specified to the method.

  The following operation returns all documents (or more precisely, a
  cursor to all documents) in the ``bios`` collection ordered by the
  ``name`` field ascending:

  .. code-block:: javascript

     db.bios.find().sort( { name: 1 } )

  :method:`sort() <cursor.sort()>` corresponds to the ``ORDER BY``
  statement in SQL.

- The :method:`limit() <cursor.limit()>` method limits the number of
  documents in the result set.

  The following operation returns at most ``5`` documents (or more
  precisely, a cursor to at most 5 documents) in the ``bios``
  collection:

  .. code-block:: javascript

     db.bios.find().limit( 5 )

  :method:`limit() <cursor.limit()>` corresponds to the ``LIMIT``
  statement in SQL.

- The :method:`skip() <cursor.skip()>` method controls the starting
  point of the results set.

  The following operation returns all documents, skipping the first
  ``5`` documents in the ``bios`` collection:

  .. code-block:: javascript

     db.bios.find().skip( 5 )

You may chain these cursor methods; however, the :method:`limit()
<cursor.limit()>` method is always applied after the :method:`sort()
<cursor.sort()>` even if you chain the methods in the reverse order:

  .. code-block:: javascript

     db.bios.find().limit( 5 ).sort( { name: 1 } )

.. _crud-read-findOne:
.. _crud-read-find-one:

Find One
--------

The :method:`findOne() <db.collection.findOne()>` method selects and
returns a single document from a collection and returns that
document. :method:`findOne() <db.collection.findOne()>` does *not*
return a cursor.

The :method:`findOne() <db.collection.findOne()>` method has the following
syntax:

.. code-block:: javascript

   db.collection.findOne( <query>, <projection> )

Except for the return value, :method:`findOne()
<db.collection.findOne()>` method is quite similar to the
:method:`find() <db.collection.find()>` method; in fact, internally,
the :method:`findOne() <db.collection.findOne()>` method is the
:method:`find() <db.collection.find()>` method with a limit of 1.

Consider the following examples that illustrate the use of the
:method:`findOne() <db.collection.findOne()>` method:

- If there is no ``<query>`` argument, the :method:`findOne()
  <db.collection.findOne()>` method selects just one document from a
  collection.

  - The following operation returns a single document from the
    ``bios`` collection:

    .. code-block:: javascript

       db.bios.findOne()

- If there is a ``<query>`` argument, the :method:`findOne()
  <db.collection.findOne()>` method selects the first document from a
  collection that meets the ``<query>`` argument:

  - The following operation returns the first matching document from
    the ``bios`` collection where either the field ``first`` in the
    subdocument ``name`` starts with the letter ``G`` **or** where the
    field ``birth`` is less than ``new Date('01/01/1945')``:

    .. code-block:: javascript

       db.bios.findOne(
          {
            $or: [
                   { 'name.first' : /^G/ },
                   { birth: { $lt: new Date('01/01/1945') } }
                 ]
          }
       )

- You can pass a ``<projection>`` argument to :method:`findOne()
  <db.collection.findOne()>` to control the fields included in the
  result set:

  - The following operation finds a document in the ``bios``
    collection and returns only the ``name`` field, the ``contribs``
    field, and the ``_id`` field:

    .. code-block:: javascript

       db.bios.findOne(
          { },
          { name: 1, contribs: 1 }
       )

  - The following operation returns a document in the ``bios``
    collection where the ``contribs`` field contains the element
    ``OOP`` and returns all fields *except* the ``_id`` field, the
    ``first`` field in the ``name`` subdocument, and the ``birth``
    field from the matching documents:

    .. code-block:: javascript

       db.bios.findOne(
          { contribs: 'OOP' },
          { _id: 0, 'name.first': 0, birth: 0 }
       )

Although similar to the :method:`find() <db.collection.find()>` method,
because the :method:`findOne() <db.collection.findOne()>` method
returns a document rather than a cursor, you cannot apply the cursor
methods such as :method:`limit() <cursor.limit()>`, :method:`sort()
<cursor.sort()>`, and :method:`skip() <cursor.skip()>` to the result of
the :method:`findOne() <db.collection.findOne()>` method. However, you
can access the document directly, as in the following example:

.. code-block:: javascript

   var myDocument = db.bios.findOne();

   if (myDocument) {
      var myName = myDocument.name;

      print (tojson(myName));
   }
