.. _mongoexport:

===============
``mongoexport``
===============

.. default-domain:: mongodb
.. |tool-binary| replace:: mongoexport

Synopsis
--------

:program:`mongoexport` is a utility that produces a JSON or CSV export
of data stored in a MongoDB instance. See the
:doc:`/core/import-export` document for a more in depth
usage overview, and the :doc:`mongoimport` document for more
information regarding the :program:`mongoimport` utility, which
provides the inverse "importing" capability.

Considerations
--------------

Do not use :program:`mongoimport` and :program:`mongoexport` for
full-scale production backups because they may not reliably capture
data type information. Use :program:`mongodump` and
:program:`mongorestore` as described in :doc:`/core/backups` for this
kind of functionality.

Required Access
---------------

In order to connect to a :program:`mongod` that enforces authorization
with the :option:`--auth <mongod --auth>` option, you must use the
:option:`--username <mongoexport --username>` and :option:`--password
<mongoexport --password>` options. The connecting user must possess at a
minimum, the :authrole:`read` role on the database that they are exporting.

Options
-------

.. include:: /includes/extracts/fact-3.0-tools-drop-dbpath-support-mongoexport.rst

.. include:: /includes/fact-3.0-mongoexport-drop-csv-option.rst

.. binary:: mongoexport

.. program:: mongoexport

.. include:: /includes/option/option-mongoexport-help.rst

.. include:: /includes/option/option-mongoexport-verbose.rst

.. include:: /includes/option/option-mongoexport-quiet.rst

.. include:: /includes/option/option-mongoexport-version.rst

.. include:: /includes/option/option-mongoexport-host.rst

.. include:: /includes/option/option-mongoexport-port.rst

.. include:: /includes/option/option-mongoexport-ipv6.rst

.. include:: /includes/option/option-mongoexport-ssl.rst

.. include:: /includes/option/option-mongoexport-sslCAFile.rst

.. include:: /includes/option/option-mongoexport-sslPEMKeyFile.rst

.. include:: /includes/option/option-mongoexport-sslPEMKeyPassword.rst

.. include:: /includes/option/option-mongoexport-sslCRLFile.rst

.. include:: /includes/option/option-mongoexport-sslAllowInvalidCertificates.rst

.. include:: /includes/option/option-mongoexport-sslAllowInvalidHostnames.rst

.. include:: /includes/option/option-mongoexport-sslFIPSMode.rst

.. include:: /includes/option/option-mongoexport-username.rst

.. include:: /includes/option/option-mongoexport-password.rst

.. include:: /includes/option/option-mongoexport-authenticationDatabase.rst

.. include:: /includes/option/option-mongoexport-authenticationMechanism.rst

.. include:: /includes/option/option-mongoexport-gssapiServiceName.rst

.. include:: /includes/option/option-mongoexport-gssapiHostName.rst

.. include:: /includes/option/option-mongoexport-db.rst

.. include:: /includes/option/option-mongoexport-collection.rst

.. include:: /includes/option/option-mongoexport-fields.rst

.. include:: /includes/option/option-mongoexport-fieldFile.rst

.. include:: /includes/option/option-mongoexport-query.rst

.. include:: /includes/option/option-mongoexport-type.rst

.. include:: /includes/option/option-mongoexport-out.rst

.. include:: /includes/option/option-mongoexport-jsonArray.rst

.. include:: /includes/option/option-mongoexport-pretty.rst

.. include:: /includes/option/option-mongoexport-slaveOk.rst

.. include:: /includes/option/option-mongoexport-forceTableScan.rst

.. include:: /includes/option/option-mongoexport-skip.rst

.. include:: /includes/option/option-mongoexport-limit.rst

.. include:: /includes/option/option-mongoexport-sort.rst

Use
---

Export in CSV Format
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-3.0-mongoexport-drop-csv-option.rst

In the following example, :program:`mongoexport` exports data from the
collection ``contacts`` in the ``users`` database in :term:`CSV` format
to the file ``/opt/backups/contacts.csv``. The :program:`mongod`
instance that :program:`mongoexport` connects to is running on the
localhost port number ``27017``.

To export in CSV format, you must specify the fields in the documents
to export. The operation specifies the ``name`` and ``address`` fields
to export.

.. code-block:: sh

   mongoexport --db users --collection contacts --type=csv --fields name,address --out /opt/backups/contacts.csv

For CSV exports only, you can also specify the fields in a file
containing the line-separated list of fields to export. The file must
have only one field per line.

For example, you can specify the ``name`` and ``address`` fields in a
file ``fields.txt``:

.. code-block:: none

   name
   address

Then, by using the :option:`--fieldFile`
option, you can specify the fields to export with the file:

.. code-block:: sh

   mongoexport --db users --collection contacts --type=csv --fieldFile fields.txt --out /opt/backups/contacts.csv

Export in JSON Format
~~~~~~~~~~~~~~~~~~~~~

The next example creates an export of the collection ``contacts``
from the MongoDB instance running on the localhost port number ``27017``,
with journaling explicitly enabled. This writes the export to the
``contacts.json`` file in :term:`JSON` format.

.. code-block:: sh

   mongoexport --db sales --collection contacts --out contacts.json --journal

Export from Remote Host Running with Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example exports the collection ``contacts`` from the
database ``marketing`` . This data resides on the MongoDB instance
located on the host ``mongodb1.example.net`` running on port ``37017``,
which requires the username ``user`` and the password ``pass``.

.. code-block:: sh

   mongoexport --host mongodb1.example.net --port 37017 --username user --password pass --collection contacts --db marketing --out mdb1-examplenet.json

.. _mongoexport-type-fidelity:

Type Fidelity
-------------

.. include:: /includes/warning-type-fidelity-loss.rst

JSON can only represent a subset of the types supported by BSON. To
preserve type information, :program:`mongoexport` uses the :doc:`strict
mode representation </reference/mongodb-extended-json>` for certain
types.

For example, the following insert operation in the :program:`mongo`
shell uses the :doc:`mongoShell mode representation
</reference/mongodb-extended-json>` for the BSON types
:bsontype:`data_date` and :bsontype:`data_numberlong`:

.. code-block:: javascript

   use test
   db.traffic.insert( { _id: 1, volume: NumberLong("2980000"), date: new Date() } )

Use :program:`mongoexport` to export the data:

.. code-block:: none

   mongoexport --db test --collection traffic --out traffic.json

The exported data is in :doc:`strict mode representation
</reference/mongodb-extended-json>` to preserve type information:

.. code-block:: javascript

   { "_id" : 1, "volume" : { "$numberLong" : "2980000" }, "date" : { "$date" : "2014-03-13T13:47:42.483-0400" } }

See :doc:`/reference/mongodb-extended-json` for a complete list of
these types and the representations used.
