================
Filters Builders
================



.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _filters-builders:

Overview 
--------

In this guide, you can learn how to use **builders** to specify
**filters** for your queries in the MongoDB Java driver.

Builders are classes provided by the MongoDB Java driver that help you
construct :ref:`BSON <bson>` objects. To learn more, see our :doc:`guide
on builders </builders/>`. 

Filters are the operations MongoDB uses to limit your results to what
you want to see. 

Some places we use filters are:

- ``find()``
- match stage of aggregation
- ``deleteOne()``/``deleteMany()``
- ``updateOne()``/``updateMany()``

Some examples of results from queries with filters are: 

- Items that cost $0 to $25
- A hotel with amenities that include an indoor swimming pool and free parking
- A food critic review that mentions "spicy" 

This guide shows you how to use builders with examples of the following
types of operators: 

- :ref:`Comparison <comparison>`
- :ref:`Logical <logical>`
- :ref:`Arrays <arrays>`
- :ref:`Elements <elements>`
- :ref:`Evaluation <evaluation>`
- :ref:`Bitwise <bitwise>`
- :ref:`Geospatial <geospatial>`

The ``Filters`` class provides static factory methods for all the MongoDB query
operators. Each method returns an instance of the :ref:`BSON <bson>`
type, which you can pass to any method that expects a query filter. 

.. tip::

   For brevity, you can choose to import all methods of the
   `Filters <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html>`__
   class statically: 

   .. code-block:: java

      import static com.mongodb.client.model.Filters.*;

   The following examples assume this static import.

The Filter examples in this guide use the following sample collections:

Collection: ``paint_purchases``

.. code-block:: json

   { "_id": 1, "color": "red", "qty": 5, "vendor": ["A"] }
   { "_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"] }
   { "_id": 3, "color": "blue", "qty": 8, "vendor": ["B", "A"] }
   { "_id": 4, "color": "white", "qty": 6, "vendor": ["D"] }
   { "_id": 5, "color": "yellow", "qty": 11, "vendor": ["A", "B"] }
   { "_id": 6, "color": "pink", "qty": 5, "vendor": ["C"] }
   { "_id": 7, "color": "green", "qty": 8,"vendor": ["B", "C"] }
   { "_id": 8, "color": "orange", "qty": 7, "vendor": ["A", "D"] }

Collection: ``binary_numbers``

.. code-block:: json

   { "_id": 9, "a": 54, "binaryValue": "00110110" }
   { "_id": 10, "a": 20, "binaryValue": "00010100" }
   { "_id": 11, "a": 68, "binaryValue": "1000100" }
   { "_id": 12, "a": 102, "binaryValue": "01100110" }

Collection: ``geo_points``

.. code-block:: json

   { "_id": 13, "coordinates": { "type": "Point", "coordinates": [2.0, 2.0] } }
   { "_id": 14, "coordinates": { "type": "Point", "coordinates": [5.0, 6.0] } }
   { "_id": 15, "coordinates": { "type": "Point", "coordinates": [1.0, 3.0] } }
   { "_id": 16, "coordinates": { "type": "Point", "coordinates": [4.0, 7.0] } }

.. _comparison:

Comparison 
----------

The comparison filters include all operators that compare the value in a
document to a specified value. 

The comparison operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Comparison Method
     - Matches
      
   * - `eq() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#eq(java.lang.String,TItem)>`__
     - values equal to a specified value.

   * - `gt() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#gt(java.lang.String,TItem)>`__
     - values greater than a specified value.
      
   * - `gte() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#gte(java.lang.String,TItem)>`__
     - values greater than or equal to a specified value.

   * - `lt() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#lt(java.lang.String,TItem)>`__
     - values less than a specified value.

   * - `lte() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#lte(java.lang.String,TItem)>`__
     - values less than or equal to a specified value.

   * - `ne() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#ne(java.lang.String,TItem)>`__
     - values not equal to a specified value.

   * - `in() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#in(java.lang.String,java.lang.Iterable)>`__
     - any of the values specified in an array.

   * - `nin() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#nin(java.lang.String,java.lang.Iterable)>`__
     - none of the values specified in an array.

   * - `empty() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#empty()>`__
     - all the documents.

The following example creates a filter that matches all documents where
the value of the ``qty`` field equals "5" in the ``paint_purchases`` collection:

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin equalComparison
   :end-before: end equalComparison

The following shows the output of the preceding query:

.. code-block:: json
   :copyable: false
   
   { "_id": 1, "color": "red", "qty": 5, "vendor": ["A"] }
   { "_id": 6, "color": "pink", "qty": 5, "vendor": ["C"] }

The following example creates a filter that matches all documents where
the value of the ``qty`` field is greater than or equal to "10" in the
``paint_purchases`` collection: 

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin gteComparison
   :end-before: end gteComparison

The following shows the output of the preceding query:

.. code-block:: json
   :copyable: false
   
   { "_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"] }
   { "_id": 5, "color": "yellow", "qty": 11, "vendor": ["A", "B"] }

The following example creates a filter that matches all documents in
the ``paint_purchases`` collection because the predicate is empty: 

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin emptyComparison
   :end-before: end emptyComparison

The output of the preceding query consists of
all the documents in the collection.

.. code-block:: json
   :copyable: false
      
   { "_id": 1, "color": "red", "qty": 5, "vendor": ["A"] }
   { "_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"] }
   { "_id": 3, "color": "blue", "qty": 8, "vendor": ["B", "A"] } 
   ...

.. _logical:

Logical
-------
The logical operators perform logical operations based on the conditions of the specified method.

The logical operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Logical Method
     - Matches
      
   * - `and() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#and(java.lang.Iterable)>`__
     - documents with the conditions of all the filters. This operator joins filters with a logical ``AND``.

   * - `or() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#or(org.bson.conversions.Bson...)>`__
     - documents with the conditions of either filter. This operator joins filters with a logical ``OR``.
      
   * - `not() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#not(org.bson.conversions.Bson)>`__
     - documents that do not match the filter.
     
   * - `nor() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#nor(org.bson.conversions.Bson...)>`__
     - documents that fail to match both filters. This operator joins filters with a logical ``NOR``.

The following example creates a filter that matches documents where
the value of the ``qty`` field is greater than "8" or the value
of the ``color`` field equals "pink" in the ``paint_purchases`` collection: 

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin orComparison
   :end-before: end orComparison

The following shows the output of the preceding query:
   
.. code-block:: json
   :copyable: false
      
   { "_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"] }
   { "_id": 5, "color": "yellow", "qty": 11, "vendor": ["A", "B"] }
   { "_id": 6, "color": "pink", "qty": 5, "vendor": ["C"] }

.. _arrays:

Arrays
------

The array operators evaluate the array field in a document.

The array operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Array Method
     - Matches
      
   * - `all() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#all(java.lang.String,java.lang.Iterable)>`__
     - documents if the array field contains every element specified in the query.

   * - `elemMatch() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#elemMatch(java.lang.String,org.bson.conversions.Bson)>`__
     - documents if an element in the array field matches all the specified conditions.
      
   * - `size() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#size(java.lang.String,int)>`__
     - documents if the array field is a specified number of elements.

The following example matches documents with a ``vendors`` array
containing both "A" and "D" in the ``paint_purchases`` collection: 

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin allComparison
   :end-before: end allComparison

The following shows the output of the preceding query:
   
.. code-block:: json
   :copyable: false
      
   { "_id": 8, "color": "orange", "qty": 7, "vendor": ["A", "D"] }

.. _elements:

Elements
--------

The elements operators evaluate the nature of a specified field.

The elements operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Elements Method
     - Matches
      
   * - `exists() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#exists(java.lang.String)>`__
     - documents that have the specified field.

   * - `type() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#type(java.lang.String,java.lang.String)>`__
     - documents if a field is of the specified type.

The following example matches documents that have a ``qty`` field and
its value does not equal "5" or "8" in the ``paint_purchases`` collection:

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin existsComparison
   :end-before: end existsComparison

The following shows the output of the preceding query:
   
.. code-block:: json
   :copyable: false
      
   { "_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"] }
   { "_id": 4, "color": "white", "qty": 6, "vendor": ["D"]}
   { "_id": 5, "color": "yellow", "qty": 11, "vendor": ["A", "B"] }
   { "_id": 8, "color": "orange", "qty": 7, "vendor": ["A", "D"] }

.. _evaluation:

Evaluation
----------

The evaluation operators evaluate the value of any field in a document.

The evaluation operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Evaluation Method
     - Matches
      
   * - `mod() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#mod(java.lang.String,long,long)>`__
     - documents where a modulo operation on a field value produces a specified result.

   * - `regex() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#regex(java.lang.String,java.lang.String)>`__
     - documents where values contain a specified regular expression.
      
   * - `text() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#text(java.lang.String)>`__
     - documents which contain a specified full-text search expression.
     
   * - `where() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#where(java.lang.String)>`__
     - documents which contain a specified JavaScript expression.

The following example matches documents that have a ``color`` field
starting with the letter "p" in the ``paint_purchases`` collection:

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin regexComparison
   :end-before: end regexComparison

The following shows the output of the preceding query:
   
.. code-block:: json
   :copyable: false
      
   { "_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"] }
   { "_id": 6, "color": "pink", "qty": 5, "vendor": ["C"] }

.. _bitwise:

Bitwise
-------

The bitwise operators convert a number into its binary value to
evaluate its bits.

The bitwise operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Bitwise Method
     - Matches
      
   * - `bitsAllSet() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#bitsAllSet(java.lang.String,long)>`__
     - documents where the specified bits of a field are set (i.e. "1").

   * - `bitsAllClear() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#bitsAllClear(java.lang.String,long)>`__
     - documents where the specified bits of a field are clear (i.e. "0").
      
   * - `bitsAnySet() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#bitsAnySet(java.lang.String,long)>`__
     - documents where at least one of the specified bits of a field are set (i.e. "1").
     
   * - `bitsAnyClear() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#bitsAnyClear(java.lang.String,long)>`__
     - documents where at least one of the specified bits of a field are clear (i.e. "0").

The following example matches documents that have a ``bitField`` field
with bits set at positions of the corresponding bitmask "34" (i.e.
"00100010") in the ``binary_numbers`` collection: 

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin bitsComparison
   :end-before: end bitsComparison

The following shows the output of the preceding query:
   
.. code-block:: json
   :copyable: false
      
   { "_id": 9, "a": 54, "binaryValue": "00110110" }
   { "_id": 12, "a": 102, "binaryValue": "01100110" }

.. _geospatial:

Geospatial
----------

The geospatial operators evaluate a specified coordinate and its
relation to a shape or location. 

The geospatial operator methods include:

.. list-table::
   :widths: 30, 70
   :header-rows: 1
   :stub-columns: 1

   * - Geospatial Method 
     - Matches
      
   * - `geoWithin() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#geoWithin(java.lang.String,org.bson.conversions.Bson)>`__
     - documents containing a GeoJSON geometry value that falls within a bounding GeoJSON geometry.

   * - `geoWithinBox() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#geoWithinBox(java.lang.String,double,double,double,double)>`__
     - documents containing a coordinates value that exist within the specified box.
      
   * - `geoWithinPolygon() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#geoWithinPolygon(java.lang.String,java.util.List)>`__
     - documents containing a coordinates value that exist within the specified polygon.

   * - `geoWithinCenter() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#geoWithinCenter(java.lang.String,double,double,double)>`__
     - documents containing a coordinates value that exist within the specified circle.

   * - `geoWithinCenterSphere() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#geoWithinCenterSphere(java.lang.String,double,double,double)>`__
     - geometries containing a geospatial data value (GeoJSON or legacy coordinate pairs) that exist within the specified circle, using spherical geometry.

   * - `geoIntersects() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#geoIntersects(java.lang.String,org.bson.conversions.Bson)>`__
     - geometries that intersect with a GeoJSON geometry. The ``2dsphere`` index supports ``$geoIntersects``.

   * - `near() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#near(java.lang.String,org.bson.conversions.Bson,java.lang.Double,java.lang.Double)>`__
     - geospatial objects in proximity to a point. Requires a geospatial index. The ``2dsphere`` and ``2d`` indexes support ``$near``.

   * - `nearSphere() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#nearSphere(java.lang.String,org.bson.conversions.Bson,java.lang.Double,java.lang.Double)>`__
     - geospatial objects in proximity to a point on a sphere. Requires a geospatial index. The ``2dsphere`` and ``2d`` indexes support ``$nearSphere``.

The following example creates a filter that matches documents in which
the ``point`` field contains a GeoJSON geometry that falls within
the given :manual:`Polygon </reference/geojson/#polygon>` 
in the ``geo_points`` collection:

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin geoWithinComparison
   :end-before: end geoWithinComparison

The following shows the output of the preceding query:
   
.. code-block:: json
   :copyable: false

   { "_id": 13, "coordinates": {"type": "Point", "coordinates": [2.0, 2.0]} }
   { "_id": 15, "coordinates": {"type": "Point", "coordinates": [1.0, 3.0]} }
