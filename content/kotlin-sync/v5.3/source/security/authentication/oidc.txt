.. _kotlin-sync-auth-oidc:

===================
OIDC Authentication
===================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: oidc, openid, identity federation, authentication

Overview
--------

The OpenID Connect (OIDC) authentication mechanism allows you to authenticate to
MongoDB by using a third-party identity provider, such as Azure or Google Cloud
Platform (GCP).

You can use this mechanism only when authenticating to MongoDB Atlas or MongoDB
Enterprise Advanced, and only when authenticating to MongoDB v7.0 or later.

.. important::

   The ``MONGODB-OIDC`` authentication mechanism requires {+mdb-server+} v7.0 or later running
   on a Linux platform.

.. tip:: OIDC Authentication

   For more information about the ``MONGODB-OIDC`` authentication mechanism, see
   :manual:`OpenID Connect Authentication </core/security-oidc/>` and
   :manual:`MongoDB Server Parameters </reference/parameters/#mongodb-parameter-param.oidcIdentityProviders>`
   in the {+mdb-server+} manual.

Specify OIDC Authentication
---------------------------

The following sections describe how to use OIDC authentication to
authenticate from different platforms. The code examples use the following placeholders:

- ``<OIDC principal>``: The client ID or application ID of the Azure managed identity or
  enterprise application, if authenticating against Azure IMDS.
- ``<hostname>``: The network address of your MongoDB deployment.
- ``<port>``: The port number of your MongoDB deployment. If you omit this parameter,
  the driver uses the default port number (``27017``). You don't need to specify a port
  when connecting to a MongoDB Atlas cluster.

.. _kotlin-mongodb-oidc-azure-imds:

Azure IMDS
~~~~~~~~~~

If your application runs on an Azure VM, or otherwise uses the
`Azure Instance Metadata Service <https://learn.microsoft.com/en-us/azure/virtual-machines/instance-metadata-service>`__
(IMDS), you can authenticate to MongoDB by using the {+driver-short+}'s built-in Azure
support.

You can specify Azure IMDS OIDC authentication either by 
using a ``MongoCredential`` instance or by specifying your credentials
in the connection string.

Select from the :guilabel:`Connection String` or :guilabel:`MongoCredential` tabs to
see the corresponding syntax.

.. tabs::

   .. tab:: Connection String
      :tabid: connection-string
    
      Replace the ``<percent-encoded audience>`` placeholder in the
      following code with the percent-encoded value of the audience server
      parameter configured on your MongoDB deployment.

      The comma (``,``) character and its encoding (``%2C``) are
      reserved, and using these characters in a value causes the
      driver to interpret commas as delimiters of key-value pairs.
      You must specify values that contain commas in a ``MongoCredential`` instance, as
      demonstrated in the :guilabel:`MongoCredential` tab.

      .. literalinclude:: /includes/security/enterprise-auth.kt
         :language: kotlin
         :dedent:
         :start-after: start-oidc-azure-connect-str  
         :end-before: end-oidc-azure-connect-str

   .. tab:: MongoCredential
      :tabid: mongo-credential

      Replace the ``<audience>`` placeholder with the value of the
      ``audience`` server parameter configured on your MongoDB deployment.
      
      .. literalinclude:: /includes/security/enterprise-auth.kt
         :language: kotlin
         :dedent:
         :start-after: start-oidc-azure-mongo-cred
         :end-before: end-oidc-azure-mongo-cred

.. _kotlin-mongodb-oidc-gcp-imds:

GCP IMDS
~~~~~~~~

If your application runs on a Google Compute Engine VM, or otherwise uses the
`GCP Instance Metadata Service <https://cloud.google.com/compute/docs/metadata/querying-metadata>`__,
you can authenticate to MongoDB by using the {+driver-short+}'s built-in GCP
support.

You can specify GCP IMDS OIDC authentication either by 
using a ``MongoCredential`` instance or by specifying your credentials
in the connection string.

Select from the :guilabel:`Connection String` or :guilabel:`MongoCredential` tabs to
see the corresponding syntax.

.. tabs::

   .. tab:: Connection String
      :tabid: connection-string
    
      Replace the ``<percent-encoded audience>`` placeholder in the
      following code with the percent-encoded value of the audience server
      parameter configured on your MongoDB deployment.

      The comma (``,``) character and its encoding (``%2C``) are
      reserved, and using these characters in a value causes the
      driver to interpret commas as delimiters of key-value pairs.
      You must specify values that contain commas in a ``MongoCredential`` instance, as
      demonstrated in the :guilabel:`MongoCredential` tab.
     
      .. literalinclude:: /includes/security/enterprise-auth.kt
         :language: kotlin
         :dedent:
         :start-after: start-oidc-gcp-connect-str
         :end-before: end-oidc-gcp-connect-str

   .. tab:: MongoCredential
      :tabid: mongo-credential

      Replace the ``<audience>`` placeholder with the value of the
      ``audience`` server parameter configured on your MongoDB deployment.
      
      .. literalinclude:: /includes/security/enterprise-auth.kt
         :language: kotlin
         :dedent:
         :start-after: start-oidc-gcp-mongo-cred
         :end-before: end-oidc-gcp-mongo-cred

Custom Callback
~~~~~~~~~~~~~~~

The {+driver-short+} doesn't offer built-in support for all platforms, including
Azure Functions and Azure Kubernetes Service (AKS). Instead, you
must define a custom callback to use OIDC to authenticate from these platforms.
To do so, use the ``"OIDC_CALLBACK"`` authentication property, as shown in the following
code example:

.. literalinclude:: /includes/security/enterprise-auth.kt
   :language: kotlin
   :dedent:
   :start-after: start-oidc-custom-callback
   :end-before: end-oidc-custom-callback

The value of the ``"OIDC_CALLBACK"`` property must be a lambda or other implementation
of the ``OidcCallback`` functional interface that accepts an ``OidcCallbackContext``
as a parameter and returns an ``OidcCallbackResult``.

The following example uses a sample callback to retrieve an OIDC token from a file
named ``"access-token.dat"`` in the local file system:

.. literalinclude:: /includes/security/enterprise-auth.kt
   :language: kotlin
   :dedent:
   :start-after: start-oidc-custom-callback-ex
   :end-before: end-oidc-custom-callback-ex

Additional Information
----------------------

To learn more about authenticating to MongoDB, see
:manual:`Authentication </core/authentication/>` in the {+mdb-server+} manual.

To learn more about creating a ``MongoClient`` object by using the
{+driver-short+}, see the :ref:`kotlin-sync-mongoclient` guide.

API Documentation
-----------------

To learn more about the classes and methods for authenticating your application 
with {+driver-short+}, see the following API documentation:

- `MongoClient.create() <{+driver-api+}/-mongo-client/-factory/index.html>`__
- `MongoClient <{+driver-api+}/-mongo-client/index.html>`__
- `MongoClientSettings.Builder <{+core-api+}/MongoClientSettings.Builder.html>`__
- `MongoCredential <{+core-api+}/MongoCredential.html>`__
