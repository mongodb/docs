.. _java-driver-methods-introspection:

========================================
Java Driver Methods to Generate Insights
========================================

.. facet:: 
   :name: genre
   :values: reference

.. facet:: 
   :name: programming_language
   :values: java

.. meta::
   :keywords: code example, java sync, java async, mongosh
   :description: Java driver methods that support generated insights by the IntelliJ Plugin.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

When you use the following Java Driver method calls in your queries,
the {+intellij-full+} generates insights for your workspace, including 
insights regarding index warnings, type validation, or database reference validation.
If your query contains a combination of methods the {+intellij-short+} can generate 
insights from and methods that the {+intellij-short+} cannot generate 
insights from, the {+intellij-short+} does not generate any insights.

Query Operation Methods
-----------------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - `MongoCollection.find() <{+driver-api+}/client/MongoCollection.html#find()>`__

     - Finds all documents in the collection.

   * - `MongoCollection.aggregate() <{+driver-api+}/MongoCollection.html#aggregate(java.util.List)>`__

     - Aggregates documents according to the specified aggregation pipeline.

Filtering Methods
-----------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - `Filters.eq() <{+core-api+}/client/model/Filters.html#eq(java.lang.String,TItem)>`__

     - Creates a filter that matches all documents where the value of the field name equals the specified value. 

   * - `Filters.gt() <{+core-api+}/client/model/Filters.html#gt(java.lang.String,TItem)>`__

     - Creates a filter that matches all documents where the value of the given field is greater than the specified value.

   * - `Filters.gte() <{+core-api+}/client/model/Filters.html#gte(java.lang.String,TItem)>`__

     - Creates a filter that matches all documents where the value of the given field is greater than or equal to the specified value.

   * - `Filters.lt() <{+core-api+}/client/model/Filters.html#lt(java.lang.String,TItem)>`__

     - Creates a filter that matches all documents where the value of the given field is less than the specified value.

   * - `Filters.lte() <{+core-api+}/client/model/Filters.html#lte(java.lang.String,TItem)>`__

     - Creates a filter that matches all documents where the value of the given field is less than or equal to the specified value.

   * - `Filters.ne() <{+core-api+}/client/model/Filters.html#ne(java.lang.String,TItem)>`__

     - Creates a filter that matches all documents where the value of the field name does not equal the specified value.

   * - `Filters.in() <{+core-api+}/client/model/Filters.html#in(java.lang.String,java.lang.Iterable)>`__

     - Creates a filter that matches all documents where the value of a field equals any value in the list of specified values.

   * - `Filters.nin() <{+core-api+}/client/model/Filters.html#nin(java.lang.String,java.lang.Iterable)>`__

     - Creates a filter that matches all documents where the value of a field does not equal any of the specified values or does not exist.

   * - `Filters.and() <{+core-api+}/client/model/Filters.html#and(java.lang.Iterable)>`__

     - Creates a filter that performs a logical AND of the provided list of filters.

   * - `Filters.or() <{+core-api+}/client/model/Filters.html#or(org.bson.conversions.Bson...)>`__

     - Creates a filter that preforms a logical OR of the provided list of filters.

   * - `Filters.nor() <{+core-api+}/client/model/Filters.html#nor(org.bson.conversions.Bson...)>`__

     - Creates a filter that performs a logical NOR operation on all the specified filters.

   * - `Filters.not() <{+core-api+}/client/model/Filters.html#not(org.bson.conversions.Bson)>`__

     - Creates a filter that matches all documents that do not match the passed in filter.

   * - `Filters.exists() <{+core-api+}/client/model/Filters.html#exists(java.lang.String)>`__

     - Creates a filter that matches all documents that contain the given field.

Aggregation Stage Methods
-------------------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - `Aggregates.match() <{+core-api+}/client/model/Aggregates.html#match(int)>`__

     - Creates a :manual:`$match </reference/operator/aggregation/match/>`
       pipeline stage that matches incoming documents against the specified
       query filter, filtering out documents that do not match.

   * - `Aggregates.project() <{+core-api+}/client/model/Aggregates.html#project(int)>`__

     - Creates a :manual:`$project </reference/operator/aggregation/project/>`
       pipeline stage that project specified document fields.

   * - `Aggregates.sort() <{+core-api+}/client/model/Aggregates.html#sort(int)>`__

     - Creates a :manual:`$sort </reference/operator/aggregation/sort/>`
       pipeline stage to sort by the specified criteria.

   * - `Aggregates.group() <{+core-api+}/client/model/Aggregates.html#group(int)>`__

     - Creates a :manual:`$group </reference/operator/aggregation/group/>`
       pipeline stage to group documents by a specified expression and output a document
       for each distinct grouping.

   * - `Aggregates.addFields() <{+core-api+}/client/model/Aggregates.html#addFields(int)>`__

     - Creates an :manual:`$addFields </reference/operator/aggregation/addFields/>`
       pipeline stage that adds new fields to documents.

   * - `Aggregates.unwind() <{+core-api+}/client/model/Aggregates.html#unwind(int)>`__

     - Creates an :manual:`$unwind </reference/operator/aggregation/unwind/>`
       pipeline stage to deconstruct an array field from input documents, creating
       an output document for each array element.

   * - `Aggregates.limit() <{+core-api+}/client/model/Aggregates.html#limit(int)>`__

     - Creates a :manual:`$limit </reference/operator/aggregation/limit/>` 
       pipeline stage for the specified filter.

Accumulator Methods
-------------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - `Accumulators.sum() <{+core-api+}/client/model/Accumulators.html#sum(java.lang.String,TExpression)>`__

     - Gets a field name for a :manual:`$group </reference/operator/aggregation/group/>` operation representing the sum of the values of 
       the given expression when applied to all members of the group.

   * - `Accumulators.avg() <{+core-api+}/client/model/Accumulators.html#avg(java.lang.String,TExpression)>`__

     - Gets a field name for a :manual:`$group </reference/operator/aggregation/group/>` operation representing the average of the 
       values of the given expression when applied to all members of the group.

   * - `Accumulators.first() <{+core-api+}/client/model/Accumulators.html#first(java.lang.String,TExpression)>`__

     - Gets a field name for a :manual:`$group </reference/operator/aggregation/group/>` operation representing the value of
       the given expression when applied to the first member of the group.

   * - `Accumulators.last() <{+core-api+}/client/model/Accumulators.html#last(java.lang.String,TExpression)>`__

     - Gets a field name for a :manual:`$group </reference/operator/aggregation/group/>` operation representing the value of 
       the given expression when applied to the last member of the group.

   * - `Accumulators.top() <{+core-api+}/client/model/Accumulators.html#top(java.lang.String,org.bson.conversions.Bson,OutExpression)>`__

     - Returns a combination of a computed field and an accumulator that 
       produces a value of the given outExpression computed for the top element 
       within a group sorted according to the provided sortBy specification.

   * - `Accumulators.topN() <{+core-api+}/client/model/Accumulators.html#topN(java.lang.String,org.bson.conversions.Bson,OutExpression,NExpression)>`__

     - Returns a combination of a computed field and an accumulator that 
       produces a BSON Array of values of the given ``outExpression`` computed
       for the top N elements within a group sorted according to the provided 
       ``sortBy`` specification, where N is the positive integral value of the ``nExpression``.

   * - `Accumulators.bottom() <{+core-api+}/client/model/Accumulators.html#bottom(java.lang.String,org.bson.conversions.Bson,OutExpression)>`__

     - Returns a combination of a computed field and an accumulator that produces 
       a value of the given ``outExpression`` computed for the bottom element within 
       a group sorted according to the provided ``sortBy`` specification.

   * - `Accumulators.bottomN() <{+core-api+}/client/model/Accumulators.html#bottomN(java.lang.String,org.bson.conversions.Bson,OutExpression,NExpression)>`__

     - Returns a combination of a computed field and an accumulator that produces a BSON
       Array of values of the given ``outExpression`` computed for the bottom N elements within 
       a group sorted according to the provided ``sortBy`` specification, where N is the 
       positive integral value of the ``nExpression``.

   * - `Accumulators.max() <{+core-api+}/client/model/Accumulators.html#max(java.lang.String,TExpression)>`__

     - Gets a field name for a :manual:`$group </reference/operator/aggregation/group/>` operation representing the maximum of 
       the values of the given expression when applied to all members of the group.

   * - `Accumulators.min() <{+core-api+}/client/model/Accumulators.html#min(java.lang.String,TExpression)>`__

     - Gets a field name for a :manual:`$group </reference/operator/aggregation/group/>` operation representing the minimum 
       of the values of the given expression when applied to all members of the group.

   * - `Accumulators.push() <{+core-api+}/client/model/Accumulators.html#push(java.lang.String,TExpression)>`__

     - Gets a field name for a :manual:`$group </reference/operator/aggregation/group/>` operation representing an array 
       of all values that results from applying an expression to each 
       document in a group of documents that share the same group by key.

   * - `Accumulators.addToSet() <{+core-api+}/client/model/Accumulators.html#addToSet(java.lang.String,TExpression)>`__

     - Gets a field name for a :manual:`$group </reference/operator/aggregation/group/>` operation representing all unique 
       values that results from applying the given expression to each document 
       in a group of documents that share the same group by key.

Projection Methods
------------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - `Projections.include() <{+core-api+}/client/model/Projections.html#include(java.util.List)>`__

     - Creates a projection that includes all of the given fields.

   * - `Projections.exclude() <{+core-api+}/client/model/Projections.html#exclude(java.util.List)>`__

     - Creates a projection that excludes all of the given fields.

   * - `Projections.fields() <{+core-api+}/client/model/Projections.html#fields(java.util.List)>`__

     - Creates a projection that combines the list of projections into 
       a single one. If there are duplicate keys, the last one takes precedence.

Sorting Methods
---------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - `Sorts.ascending() <{+core-api+}/client/model/Sorts.html#ascending(java.util.List)>`__

     - Create a sort specification for an ascending sort on the given fields.

   * - `Sorts.descending() <{+core-api+}/client/model/Sorts.html#descending(java.util.List)>`__

     - Create a sort specification for a descending sort on the given fields.

   * - `Sorts.orderBy() <{+core-api+}/client/model/Sorts.html#orderBy(java.util.List)>`__

     - Combine multiple sort specifications. If any field names are repeated, the last one takes precedence.

Learn More 
----------

- :ref:`IntelliJ Insights <intellij-insights>`