.. meta::
   :robots: noindex, nosnippet

.. _kotlin-read-objects:
.. _kotlin-filter-data:

===============================
Read Realm Objects - Kotlin SDK
===============================

.. meta:: 
  :keywords: code example, android, kmm, kmp, ios
  :description: Find, filter, and sort query results to read objects from a synced or non-synced database using the Atlas Device SDK for Kotlin.

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

This page describes how to query and lazily read objects persisted in a database 
with the Atlas Device SDK for Kotlin. This lazy evaluation enables code 
efficiency and performance when handling large data sets and complex queries. 

Read Operations
---------------

A read operation consists of querying database objects, then running the query 
when you're ready to access the results. The syntax for read operations is the 
same for synced and non-synced databases.

All queries are based on :ref:`object type <kotlin-object-type>`. 
You can query any object, including :ref:`embedded objects <kotlin-embedded-objects>`, 
that persist to the database and whose type is included in your 
:ref:`database schema <kotlin-realm-schema>`. 

Construct queries using the SDK's query builder 
`RealmQuery <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/index.html>`__, 
passing the object type as the type parameter. You can query objects on a 
``Realm`` or ``MutableRealm`` instance, a ``RealmResults`` collection, or a 
``RealmList`` collection. 

A basic ``RealmQuery`` returns all objects of the specified type: 

.. code:: kotlin

   // Finds all objects of type <T>
   .query<T>()

You can refine your query with additional filters and conditions (for example, 
sorting, aggregating, limiting results). You can refine results by one or 
more property using  **Realm Query Language (RQL)**, a string-based query 
language, in combination with built-in Kotlin extension functions and 
helper methods provided by the SDK. 

.. code:: kotlin

   // Finds all objects of type <T> that meet the filter conditions
   // and returns them in the specified sort order
   .query<T>(filter).sort(sort) 

You can also **chain queries** together using additional 
`query() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/query.html>`__ 
methods. Each appended ``query()`` acts as an ``AND`` query condition. 
And because of the SDK's lazy evaluation, successive queries do not require 
separate trips to the database.

.. code:: kotlin

   // Finds all objects of type <T> that meet the first filter conditions
   // AND the subsequent filter conditions
   .query<T>(filter).query(filter)

When you're ready to access the data and work with the returned results, 
run the query:  

- Use `find() <{+kotlin-local-prefix+}io.realm.kotlin.query/find.html>`__ 
  to perform a **synchronous query**. The SDK lazily returns a 
  `RealmResults <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-results/index.html>`__ 
  collection, which represents all database objects that match the query 
  conditions. In general, you can can work with a results collection like any 
  other `Kotlin Collection <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/>`__.

- Use `asFlow() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-element-query/as-flow.html>`__ 
  to perform an **asynchronous query**. The SDK lazily subscribes to a 
  `Kotlin Coroutine Flow <https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/>`__ 
  that you can collect and iterate over or listen to for changes. You *cannot*
  call ``asFlow()`` on a ``MutableRealm.query``.

Note that any retrieved results don't actually hold matching database objects 
in memory. Instead, the database uses **direct references**, or pointers. 
Database objects in a results collection or flow reference the matched 
objects, which map directly to data in the database file. This also means 
that you can traverse your graph of an object's 
:ref:`relationships <kotlin-relationships>` directly through the results 
of a query. 

.. example:: Run the Query

   .. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.synchronous-query.kt
      :language: kotlin

Frozen and Live Results
~~~~~~~~~~~~~~~~~~~~~~~

Unlike other Atlas Device SDKs, which always return live results, 
results with the Kotlin SDK can be frozen or live. For more information on the 
Kotlin SDK's frozen architecture, refer to :ref:`kotlin-frozen-architecture`.

To access **frozen results**, run a query on a 
`Realm <{+kotlin-local-prefix+}io.realm.kotlin/-realm/query.html>`__. Frozen 
results cannot be modified and do not reflect the latest changes to the 
database. A ``Realm.query()`` does not require a write transaction. 

To access **live results**, run a query on a 
`MutableRealm <{+kotlin-local-prefix+}io.realm.kotlin/-mutable-realm/index.html>`__ 
instance in a write transaction. A ``MutableRealm`` represents a writeable 
state of a database and is *only* accessible through a write transaction. 
Results from a  
`MutableRealm.query <{+kotlin-local-prefix+}io.realm.kotlin/-mutable-realm/query.html>`__ 
are live, but are only valid on the calling thread and are frozen once the 
write transaction completes. 
For more information on write transactions and accessing a ``MutableRealm``, 
refer to :ref:`<kotlin-write-transactions>`.

You can also access live objects from frozen results by calling 
`MutableRealm.findLatest() <{+kotlin-local-prefix+}io.realm.kotlin/-mutable-realm/find-latest.html>`__ . 
For more information, refer to the :ref:`kotlin-find-latest-version` section 
on this page. 

.. example:: Access Live Results

   .. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.frozen-vs-live-results.kt
      :language: kotlin

Find Database Objects
---------------------

To find objects stored within a database:

1. Pass the object type as a type parameter to 
   `query() <{+kotlin-local-prefix+}io.realm.kotlin.ext/query.html>`__. 
   The object type must already be included in your database schema. 

#. Optionally, pass any query conditions to further refine the results: 
   
   -  Specify a filter to only return objects that meet the condition. If 
      you don't specify a filter, the SDK returns all objects of the specified 
      type. 
      
      You can chain filters by appending additional 
      `query() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/query.html>`__ 
      methods to the ``RealmQuery``. 
   -  Specify the sort order for the results. 
      Because the database is unordered, if you don't include a sort order, 
      the SDK cannot guarantee the query returns objects in any specific order.

#. Execute the query using either: 

   -  `find() <{+kotlin-local-prefix+}io.realm.kotlin.query/find.html>`__ 
      for synchronous queries. Returns a collection of results.  
   -  `asFlow() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-element-query/as-flow.html>`__ 
      for asynchronous queries. Subscribes to a ``Flow`` of results changes. 

   .. tip:: Prefer ``asFlow()`` for Large Data Sets 
      
      ``find()`` runs a synchronous query on the thread it is called from. 
      As a result, avoid using ``find()`` for large data sets on the UI thread or in logic that 
      could delay the UI thread. 
      
      Prefer ``asFlow()`` to prevent negative performance or UI impact.

#. Work with the results. Objects may be frozen or live, depending on the
   type of query you ran. 

.. example:: Read Operation

   .. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.read-realm-object.kt
      :language: kotlin

.. _kotlin-find-latest-version:

Find Latest Version of an Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Because of the SDK's frozen architecture, you aren't always working 
with the latest version of an object or collection. 

To get a version of an object or collection that reflects the latest changes to 
the database, you can call 
`findLatest() <{+kotlin-local-prefix+}io.realm.kotlin/-mutable-realm/find-latest.html>`__ 
from a ``MutableRealm`` instance. 
Like a ``MutableRealm.query()``, the results are live *but* are only valid on 
the calling thread and are frozen once the write transaction completes.

In the following example, we pass an existing ``frozenFrogs`` query's 
``RealmResults`` to ``findLatest()`` to get the latest live copy of the 
collection. We then modify the now-live objects within the write transaction:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.find-latest-version.kt
   :language: kotlin
   :emphasize-lines: 7

.. tip:: 

   You can check if an object is frozen with the 
   `isFrozen() <{+kotlin-local-prefix+}io.realm.kotlin.ext/is-frozen.html>`__ 
   method.

   .. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.check-frozen.kt
      :language: kotlin

.. _kotlin-query-all-objects-of-type:

Query All Objects of a Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To query all objects of a specific type, pass the ``RealmObject`` or 
``EmbeddedRealmObject`` object type as a type parameter to 
`query() <{+kotlin-local-prefix+}io.realm.kotlin.ext/query.html>`__
without any query arguments. The SDK returns all objects of the specified type.

.. note:: Cannot Read Asymmetric Objects
   
   You *cannot* read asymmetric objects because they are special 
   write-only objects that do not persist to the database. For information on 
   how to use asymmetric objects in your application, refer to 
   :ref:`kotlin-stream-data-to-atlas`.

In the following example, we query all ``RealmObject`` objects of type ``Frog``:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.query-by-object-type.kt
   :language: kotlin

In the following example, we query all ``EmbeddedRealmObject`` objects of type 
``EmbeddedAddress``:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.find-embedded-object.kt 
    :language: kotlin

You can also query an embedded object through its parent object. For more 
information, refer to the :ref:`kotlin-query-embedded-object-property` section 
on this page.

.. tip:: 

   Once you find an embedded object, you can use the 
   `EmbeddedRealmObject.parent() <{+kotlin-local-prefix+}io.realm.kotlin.ext/parent.html>`__ 
   method to access its parent:

   .. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.get-parent.kt 
      :language: kotlin
   
Query a Single Object
~~~~~~~~~~~~~~~~~~~~~

To find a single object of a specific object type, call 
`first() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/first.html>`__ 
on the query. When you run the query, the SDK returns the first object that 
matches the conditions or ``null``.

In the following example, we query a ``Frog`` object type and return the first
object:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.query-single-object.kt
   :language: kotlin

Filter By Property 
~~~~~~~~~~~~~~~~~~

You can filter a query by any property in the object type that persists in the 
database. This includes child properties, which you can refer to using dot 
notation.

To filter by property, you can pass Realm Query Language (RQL) filters and 
operators, use Kotlin's built-in extension methods or the SDK's convenience 
methods, or use a combination. For information on all currently supported RQL 
operators and syntax, refer to the :ref:`Realm Query Language <rql>` reference 
documentation.

In the following example, we query a ``Frog`` object type and filter by the 
``name`` property:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.query-by-property.kt
   :language: kotlin

.. _kotlin-find-by-primary-key:

Filter By Primary Key
`````````````````````

:ref:`Primary keys <kotlin-primary-keys>` are unique identifiers for objects 
in a database, which makes them useful for querying specific objects. 

To filter by a specific primary key, pass the object type as a type 
parameter and query the primary key field for the desired value.

In the following example, we query a ``Frog`` object and filter by the primary 
key property ``_id``:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.find-by-primary-key.kt
   :language: kotlin

.. tip:: Device Sync Always Uses _id as Primary Key
   
   If you use Atlas Device Sync, you can always query by the primary key 
   field ``_id``. This is because the Device Sync data model requires 
   objects have a primary key named ``_id``. For more information, refer to 
   :ref:`<kotlin-model-data-device-sync>`. 

.. _kotlin-query-embedded-object-property:

Filter By Embedded Object Property
``````````````````````````````````

:ref:`Embedded objects <kotlin-embedded-objects>` act as nested data inside of 
a single specific parent object. You can query an embedded object directly or 
as a property on its parent object. For information on querying an embedded 
object directly, refer to the :ref:`kotlin-query-all-objects-of-type` section 
on this page.

To find an embedded object through its parent object, pass the parent object 
type as a type parameter and filter by the embedded object property using dot 
notation. 

In the following example, we have a ``Contact`` parent object that contains an 
embedded object property called ``address``. We query the ``Contact`` object 
type against the embedded object's ``address.street`` property:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.query-embedded-object-property.kt
   :language: kotlin

.. _kotlin-query-realmany:

Filter By RealmAny (Mixed) Property
```````````````````````````````````

A :ref:`kotlin-realmany` property represents a polymorphic value that can 
hold any one of its supported data types at a particular moment. You can query 
a ``RealmAny`` property the same way you would any property. 

In the following example, we query a ``RealmAny`` property called 
``favoriteThing`` for a frog with a favorite thing of type ``Int``:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.query-realmany-property.kt
   :language: kotlin

Unlike other properties, you must extract a ``RealmAny`` property's stored 
value before you can work with it. To extract the value, use 
the SDK's getter method for the stored type. If you use the wrong getter for 
the type, the SDK throws an exception. 

A best practice is to use a conditional expression to get the currently stored 
type with `RealmAny.type() <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-any/type.html>`__, 
then extract the value based on the type. For a full list of getter 
methods, refer to the 
`RealmAny <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-any/index.html>`__ 
API reference.

In the following example, we extract the value using
`RealmAny.asInt() <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-any/as-int.html>`__ 
since we know the returned frog's favorite thing is an ``Int`` type value:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.get-realmany-property.kt
   :language: kotlin

.. tip:: Handle Polymorphism with Conditional Expressions

   Use a conditional ``when`` expression to handle the possible inner value 
   class of a given ``RealmAny`` property:

   .. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.polymorphism.kt
      :language: kotlin

Once you have the currently stored value, you can work with it the same way you 
would another value of that type. 

.. note:: 
   
   ``Byte``, ``Char``, ``Int``, ``Long``, and ``Short`` values are converted 
   internally to ``int64_t`` values. Keep this in mind when comparing, 
   sorting, or aggregating ``RealmAny`` values of these types.

Filter By Remapped Property
```````````````````````````

If your data model includes 
:ref:`remapped property names <kotlin-remap-a-property>`, you can filter by 
both the Kotlin property name used in your code and the remapped property 
name that's persisted in the database. 

In the following example, the ``Frog`` object has a property named ``species`` 
in the code that is remapped to ``latin_name`` in the database:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-persisted-name.kt
   :language: kotlin

In the database, we can filter by either property name and return the same 
results:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.query-remapped-property.kt
   :language: kotlin

.. _kotlin-filter-fts:

Filter By Full-Text Search (FTS) Property
`````````````````````````````````````````

.. versionchanged:: 1.11.0
   Support for prefix wildcard searches

If your data model includes a :ref:`Full-Text Search (FTS) <kotlin-fts-index>` 
index property, you can filter by the property with the ``TEXT`` predicate. 
Words in the query are converted to tokens by a tokenizer using the following 
rules:

- Tokens can only consist of characters from ASCII and the Latin-1 
  supplement (western languages). All other characters are considered whitespace. 
- Words split by a hyphen (``-``) are split into two tokens. For example, 
  ``full-text`` splits into ``full`` and ``text``.
- Tokens are diacritics- and case-insensitive. 

You can search for an entire word or phrase, or limit your results with the 
following characters: 

- Exclude results for a word by placing the ``-`` character in front of the 
  word. For example, ``fiction -science`` would include all search results 
  for ``fiction`` and exclude those that include the word ``science``.
- In Kotlin SDK version 1.11.0 and later, you can specify prefixes by placing 
  the ``*`` character at the end of a word. For example, ``fict*`` would include 
  all search results for ``fiction`` and ``fictitious``. (The Kotlin SDK 
  does *not* currently support suffix searches.)

The SDK returns a Boolean match for the specified query, instead of a 
relevance-based match. 

In the following example, the ``Frog`` object type has an FTS index property  
called ``physicalDescription`` that we can filter by to find different types of frogs:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.query-fts-property.kt
  :language: kotlin

Filter By Collection (List, Set, Dictionary) Property
`````````````````````````````````````````````````````

Depending on how you define your object type, you might have properties that 
are defined as one of the following supported :ref:`<kotlin-collection-types>`:

- ``RealmList``
- ``RealmSet``
- ``RealmDictionary`` 

You can query these collection properties the same way you would any other 
property using RQL. You can also use Kotlin's built-in collection functions
to filter, sort, and iterate over the results.

RealmList
+++++++++

You can query and iterate through a :ref:`RealmList<kotlin-realm-list>` 
property as you would a  
`Kotlin List <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/#kotlin.collections.List>`__.

In the following example, we query a ``RealmList`` property called 
``favoritePonds``:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.read-realm-list.kt
   :language: kotlin

RealmSet
++++++++

You can query and iterate through a :ref:`RealmSet <kotlin-realm-set>` property 
as you would a 
`Kotlin Set <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/#kotlin.collections.Set>`__.

In the following example, we query a ``RealmSet`` property called 
``favoriteSnacks``:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.read-realm-set.kt
   :language: kotlin

RealmDictionary
+++++++++++++++

You can query and iterate through a :ref:`RealmDictionary <kotlin-realm-dictionary>` 
property as you would a  
`Kotlin Map <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/#kotlin.collections.Map>`__.

In the following example, we query a ``RealmDictionary`` property called 
``favoritePondsByForest``, which maps a ``String`` key (forest) to a 
``String`` value (pond):

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.read-realm-dictionary.kt
   :language: kotlin

Filter By Relationship Property 
```````````````````````````````

Depending on how you define your object type, you might have properties that 
reference another database object. This can be a to-one, to-many, or inverse 
:ref:`relationship <kotlin-relationships>`.

For information on filtering by relationship properties that reference an 
:ref:`embedded object <kotlin-embedded-relationship>`, refer to the 
:ref:`<kotlin-query-embedded-object-property>` section on this page.

To-One Relationships
++++++++++++++++++++

A :ref:`to-one relationship <kotlin-to-one-relationship>` property maps to 
a single instance of another object type. You can filter by the relationship 
property using dot notation, the same way you would a nested object.

In the following example, the ``Frog`` object type has a property called 
``favoritePond`` of type ``Pond``: 

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.query-to-one-relationship.kt
   :language: kotlin

To-Many Relationships
+++++++++++++++++++++

:ref:`To-many relationships <kotlin-to-many-relationship>` properties are 
collections (a :ref:`RealmList <kotlin-realm-list>` or 
:ref:`RealmSet <kotlin-realm-set>`) of another object type. You can filter by 
and iterate through the relationship property the same way you would any other 
collection property.

In the following example, the ``Forest`` object type has a property called  
``nearbyPonds`` that is a ``RealmList`` of type ``Pond``:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.query-to-many-relationship.kt
   :language: kotlin

.. _kotlin-query-inverse-relationship:

Inverse Relationships
+++++++++++++++++++++

Unlike to-one and to-many relationships, an inverse relationship automatically 
creates a backlink between parent and child objects. This means that you can 
always query against both the parent and child. You can also use RQL-specific 
syntax to query the backlink (for more information, refer to :ref:`rql-backlinks`).

In the following example, a parent object of type ``User`` has an inverse 
relationship to a child object of type ``Post``. We can query the parent 
object's ``User.posts`` relationship ("User has many Posts") as well 
as the inverse ``Post.user`` relationship ("Post belongs to User"):

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.query-inverse-relationship.kt
   :language: kotlin

.. important:: Querying Inverse Relationship by Remapped Class Names
   
   If the inverse relationship property is an object type with a 
   remapped (persisted) class name, you *must* use the remapped class 
   name in the raw RQL query.
   
   .. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.persisted-name-inverse.kt
      :language: kotlin
      :emphasize-lines: 1
   
   .. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.query-inverse-persisted-name.kt
      :language: kotlin
      :emphasize-lines: 4

Query Geospatial Data
~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 1.11.0

Kotlin SDK version 1.11.0 and later adds experimental geospatial APIs that 
support querying with geospatial data. 

.. note:: 

   To persist geospatial data, you must define a custom GeoJSON-compatible 
   embedded class in your data model. For more information on the requirements, 
   refer to :ref:`<kotlin-persist-geopoint>`.

Geospatial data is persisted as latitude/longitude pair in a custom
embedded object's ``coordinates`` property. A geospatial query checks 
whether the point defined by the ``coordinates`` property is contained within
the boundary of a defined geospatial shape.

The SDK supports the following geospatial shapes:

- ``GeoCircle``: defined by a center ``GeoPoint`` and a radius ``Distance``
- ``GeoBox``: defined by two ``GeoPoint`` coordinates that represent the 
  southwest and northeast corners of the box
- ``GeoPolygon``: defined by a set of at least 4 ``GeoPoint`` coordinates that 
  represent a closed shape. This shape can contain holes that represent 
  exclusive boundaries within the confines of the defined polygon.

For more information on geospatial shapes and how to define them, refer to 
:ref:`kotlin-geospatial`.

To query geospatial data: 

1. Create an object containing the embedded geospatial data. 
#. Define the geospatial shape to set the boundary for the query. 
#. Query using the ``GEOWITHIN`` RQL operator. This method takes the 
   ``coordinates`` property of your GeoJSON-compatible embedded object 
   and checks if that point is contained within the boundary of a defined 
   shape. The syntax is the same, regardless of the geospatial shape.

In the following example, we want to query for geospatial data persisted in 
a ``Company`` object through its embedded ``location`` property. We create 
two ``GeoCircle`` objects to set our query boundary: 

.. literalinclude:: /examples/generated/kotlin/Geospatial.snippet.geocircle.kt
   :language: kotlin

We then query for any ``Company`` objects with a ``location`` contained within 
the defined ``GeoCircle`` boundaries:

.. io-code-block::

   .. input:: /examples/generated/kotlin/Geospatial.snippet.geocircle-query.kt
    :language: kotlin

   .. output:: 

        Companies in large circle: 1
        Companies in small circle: 0

.. figure:: /images/geocircles-query.png
   :alt: Querying a GeoCircle example
   :width: 150
   :lightbox:

.. _kotlin-sort-queries:

Sort and Limit Results
----------------------

To ensure results are returned as expected, you can specify a 
sort order and limit conditions using 
:ref:`RQL Sort, Limit, and Distinct operators <rql-sort-distinct-limit>`, 
one of the following SDK convenience methods, or a combination of both: 

- `sort() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/sort.html>`__ 
- `limit() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/limit.html>`__ 
- `distinct() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/distinct.html>`__ 

.. important:: Order Matters
   
   Regardless of whether you use RQL or convenience methods, the SDK executes 
   each request in the order it's added to the query. This can impact the 
   results returned. For example, sorting a query before limiting it can 
   return very different results than sorting *after* limiting it.

In the following example, we sort and limit using convenience methods only, 
RQL only, and then a combination of both to return the same results:
 
.. io-code-block::

   .. input:: /examples/generated/kotlin/ReadTest.snippet.sort-results.kt
      :language: kotlin
      :emphasize-lines: 7-9, 16, 23-25

   .. output:: 

      Method sort: Kermit, Sr. is 100
      Method sort: Kermit is 42
      RQL sort: Kermit, Sr. is 100
      RQL sort: Kermit is 42
      Combined sort: Kermit, Sr. is 100
      Combined sort: Kermit is 42

.. include:: /includes/string-sort-and-query-limitations-note.rst

.. _kotlin-aggregate-results:

Aggregate Results
-----------------

You can also aggregate results, which reduces results to a single value 
based on a specified numerical property or collection. You can use 
:ref:`RQL aggregate operators <rql-aggregate-operators>`, one of the 
following convenience methods, or a combination of both:

- `max() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/max.html>`__ 
- `min() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/min.html>`__ 
- `sum() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/sum.html>`__ 
- `count() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/count.html>`__ 

In the following example, we aggregate the ``age`` property of a ``Frog`` 
object type:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.aggregate-results.kt
   :language: kotlin

.. _kotlin-iteration:

Iterate Results using Flow
--------------------------

You can iterate through results using a 
`Kotlin Coroutine Flow <https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/>`__. 

To convert query results into an asynchronous ``Flow``, call 
`asFlow() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-element-query/as-flow.html>`__ 
on the query. The SDK returns a `ResultsChange <{+kotlin-local-prefix+}io.realm.kotlin.notifications/-results-change/index.html>`__ 
``Flow`` that you can iterate through with 
`flow.collect() <https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html>`__.

In the following example, we iterate through a ``Flow`` of ``Frog`` objects:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.iteration.kt
   :language: kotlin

.. tip:: Subscribe to Flows to Listen for Changes
   
   After generating a ``Flow`` from a query, you can register a notification 
   handler to listen for changes to the ``ResultsChanges``. For more information, 
   refer to :ref:`kotlin-react-to-changes`.
