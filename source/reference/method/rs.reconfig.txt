=============
rs.reconfig()
=============

.. default-domain:: mongodb

Definition
----------

.. method:: rs.reconfig(configuration, force)

   Reconfigures an existing replica set, overwriting the existing
   replica set configuration. To run the method, you must connect to
   the :term:`primary` of the replica set.

   .. include:: /includes/apiargs/method-rs.reconfig-param.rst

   To reconfigure an existing replica set, first retrieve the
   current configuration with :method:`rs.conf()`, modify the
   configuration document as needed, and then pass the modified
   document to :method:`rs.reconfig()`.

   :method:`rs.reconfig()` provides a wrapper around the
   :dbcommand:`replSetReconfig` command.
   
   The ``force`` parameter allows a reconfiguration command to be issued
   to a non-primary node.

Behavior
--------

The :method:`rs.reconfig()` shell method can trigger the current primary
to step down in some situations. When the
primary steps down, it forcibly closes all client connections. This is
by design. Since it may take a period of time to elect a new primary, 
schedule reconfiguration changes during maintenance periods to minimize loss of write availability.

.. warning::

   Using :method:`rs.reconfig()` with ``{ force: true }`` can lead to
   :term:`rollback` of committed writes. Exercise caution when using this option.

.. _replica-set-reconfiguration-usage:

Examples
--------

A replica set named ``rs0`` has the following configuration:

.. code-block:: javascript

   {
       "_id" : "rs0",
       "version" : 1,
       "members" : [
            {
               "_id" : 0,
               "host" : "mongodb0.example.net:27017"
            },
            {
               "_id" : 1,
               "host" : "mongodb1.example.net:27017"
            },
            {
               "_id" : 2,
               "host" : "mongodb2.example.net:27017"
            }
        ]
   }

The following sequence of operations updates the
:data:`~replSetGetConfig.members[n].priority` of the second member.
The operations are issued through a :program:`mongo` shell connected to
the primary.

.. code-block:: javascript

   cfg = rs.conf();
   cfg.members[1].priority = 2;
   rs.reconfig(cfg);

#. The first statement uses the :method:`rs.conf()` method to retrieve
   a document containing the current :doc:`configuration
   </reference/replica-configuration>` for the replica set and sets the
   document to the local variable ``cfg``.

#. The second statement sets a
   :data:`~replSetGetConfig.members[n].priority` value to the
   second document in the :data:`~replSetGetConfig.members` array.
   For additional settings, see :ref:`replica set configuration settings
   <replica-set-configuration-settings>`.

   To access the member configuration document in the array, the
   statement uses the array index and **not** the replica set member's
   :data:`~replSetGetConfig.members[n]._id` field.

#. The last statement calls the :method:`rs.reconfig()` method with the
   modified ``cfg`` to initialize this new configuration. Upon
   successful reconfiguration, the replica set configuration will
   resemble the following:

.. code-block:: javascript

   {
       "_id" : "rs0",
       "version" : 2,
       "members" : [
            {
               "_id" : 0,
               "host" : "mongodb0.example.net:27017"
            },
            {
               "_id" : 1,
               "host" : "mongodb1.example.net:27017",
               "priority" : 2
            },
            {
               "_id" : 2,
               "host" : "mongodb2.example.net:27017"
            }
        ]
   }

.. seealso:: :method:`rs.conf()`,
   :ref:`replSetGetConfig-output` and
   :doc:`/administration/replica-sets`.
