.. meta:: 
   :description: Explore monitoring strategies and tools for self-managed MongoDB deployments, including utilities, commands, and hosted services.

.. _query-performance:

=================
Query Performance
=================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Optimize your MongoDB queries to ensure the best possible
performance for your application. This can occur both during
development and later, as your data usage and demand changes. As
collections grow, a periodic review of query performance can
help determine when clusters need to scale up or scale out.

Behavior
--------

When you send a query to MongoDB, the server interprets the
query, builds a query plan to determine how best to retrieve the
data, executes the plan, then returns the results to the client.

To improve query performance, consider how MongoDB builds and
executes the plan for your specific queries and identify problem
areas, such as fields that would benefit from an index,
inefficient filters, and issues at scale.

Indexes
~~~~~~~

Indexes store values from individual fields or sets of fields
from a collection in a separate data structure. In read
operations, they allow MongoDB to search in the index to
identify relevant documents instead of the entire collection. In
write operations, MongoDB must both write the change to the
collection and update the index.

In many cases the use of indexes can speed up your query. This
improvement depends on which fields are indexed and what your
queries use for filters. For example, if a query applies no
projections or filters, a collection scan can be more efficient
than an index scan.

For more information, see :ref:`indexes`.


Tasks
-----

Troubleshooting
~~~~~~~~~~~~~~~

- :ref:`manual-find-slow-queries-with-database-profiler`

- :ref:`manual-explain-slow-queries`

Solutions
~~~~~~~~~

- :ref:`manual-create-an-index`

Details
-------

.. _manual-qp-atlas-query-profiler:

Atlas Query Profiler
~~~~~~~~~~~~~~~~~~~~

The Atlas Query Profiler helps diagnose and monitor slow-running
queries using log data from your cluster. It aggregates,
filters, and visualizes performance statistics in a scatterplot
chart through the Query Insights interface.

You may find this visualization more convenient in identifying
slow queries and performance outliers than the
:ref:`manual-qp-database-profiler`.

With the Query Profiler, you get a macro view of your
application load. This can help you identify which queries are
slow and provide some insights into how you can improve their
performance, such as:

- How long the query takes to run

- The number of documents examined by the query

- Whether the query uses an index

For more information, see :ref:`query-profiler`.

.. _manual-qp-database-profiler:

Database Profiler
~~~~~~~~~~~~~~~~~

The database profiler collects detailed information about the
queries that run on MongoDB, which it stores in the
capped :data:`system.profile <<database>.system.profile>` collection.

.. important::

   The database profiler can affect database performance and
   disk usage. Consider the performance and storage implications
   before enabling it on a production deployment.

   For more information, see :ref:`database-profiling-overhead`.

With the database profiler, you get a micro view of slow queries
in the current application load. This can provide some insights
into how you can improve query performance, such as:

- How long the query takes to run

- The number of documents examined by the query

- Whether the query uses an index

For more information, see :ref:`profiler`.

Explain
~~~~~~~

The :method:`~db.collection.explain` method retrieves query plan
information and execution statistics on queries and aggregation
pipelines. It is available for use with these query
methods:

.. include:: /includes/fact-explain-methods-support

The :method:`~db.collection.explain` method can help you to
identify potential issues with specific queries, such as:

- Inefficient filters

- Ineffective index usage

- Potential performance issues at scale

For more information, see :ref:`manual-explain-slow-queries`.

Collection Stats
~~~~~~~~~~~~~~~~

The :pipeline:`$collStats` aggregation stage provides
statistical information on specific collections and their usage.
You may find this useful in identifying index and performance
issues.

This can provide useful information, such as:

- Storage usage for the collection and its indexes

- The average size of documents

Index Stats
~~~~~~~~~~~

The :pipeline:`$indexStats` aggregation stage provides
statistical information on index usage by a collection. This can
help you identify specific index usage issues, such as:

- Whether queries use the index and how often

- Whether an index is redundant

Learn More
----------
- :ref:`Atlas Query Profiler <query-profiler>`

- :ref:`profiler`

- :ref:`indexes`

- :method:`db.collection.explain`

- :pipeline:`$collStats`

- :pipeline:`$indexStats`
