=========================
Maintain Valid Data Files
=========================

.. default-domain:: mongodb

.. contents::
   :backlinks: none
   :local:

Overview
--------

Use these recommendations to help ensure data file validity, especially
after hardware failure or improper shutdown.

See also :doc:`/core/backups` and :doc:`/administration/backup`
for more information on preventing data loss. Also see
:doc:`/faq/replica-sets`, :doc:`/core/journaling`, and
:doc:`/tutorial/manage-journaling` for information on how to set up
a robust deployment.

Recommendations
---------------

Use Journaling
~~~~~~~~~~~~~~

Always use :ref:`durability journaling <setting-journal>`. The journal
stores recent data changes, with the primary aim of recovering from
database invalidity. By default, MongoDB updates its journal ten
times per second. In the worst case, with journaling enabled, only
``1/10`` of a second of data may be lost.

If a :program:`mongod` instance without journaling shuts down
unexpectedly for *any* reason, always assume that your database is
in an invalid state.

Run all Deployments as Replica Sets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Certain recovery options are much simpler if the :program:`mongod`
instance runs as a member of a replica set. The primary goal of
replica sets in MongoDB is to prevent data loss and ensure availability. In
the event of database invalidity, recovery may be as simple as syncing
from a fellow replica set member.

Shut down Cleanly
~~~~~~~~~~~~~~~~~

A clean shutdown means that all ongoing MongoDB operations are
complete, and :program:`mongod` has flushed and closed all data files.

An unclean shutdown can leave the database in an invalid state.

To ensure a clean shutdown, use one of the shutdown procedures
described in :doc:`/tutorial/manage-mongodb-processes`.

