.. _atlas-sp-tutorial:

========================================
Get Started with {+atlas-sp+}
========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol
   
.. include:: includes/atlas-stream-processing/public-preview.rst

This tutorial takes you through the steps of setting up {+atlas-sp+}
and running your first stream processor.

.. _atlas-sp-tutorial-prereqs:

Prerequisites
-------------

To complete this tutorial you need:

- An |service| project
- {+mongosh+} version 2.0 or higher
- An |service| user with the  :authrole:`Project Owner` or
  the :authrole:`Project Stream Processing Owner` role to manage a
  {+SPI+} and Connection Registry
- A database user with the  :atlasrole:`atlasAdmin` role to create
  and run stream processors
- An |service| {+cluster+}

.. _atlas-sp-tutorial-procedure:

Procedure
---------

.. procedure::
   :style: normal

   .. include:: /includes/nav/steps-stream-processing.rst

   .. step:: Create a {+SPI+}.

      a. Click :guilabel:`Get Started` in the lower-right corner.
         |service| provides a brief explanation of core {+atlas-sp+}
         components.

      #. Click the :guilabel:`Create instance` button.

      #. On the :guilabel:`Create a stream processing instance` 
         page, configure your instance as follows:

         - :guilabel:`Tier`: ``SP30``
         - :guilabel:`Provider`: ``AWS``
         - :guilabel:`Region`: ``us-east-1``
         - :guilabel:`Instance Name`: ``tutorialInstance``

      #. Click :guilabel:`Create`.
	 
   .. step:: Get the {+spi+} connection string.

      a. Locate the overview panel of your 
         {+spi+} and click :guilabel:`Connect`. 
            
      #. Select :guilabel:`I have the MongoDB shell installed`.

      #. From the :guilabel:`Select your mongo shell version` dropdown
         menu, select the latest version of {+mongosh+}.

      #. Copy the connection string provided under 
         :guilabel:`Run your connection string in your command line`.
         You will need this in a later step.

      #. Click :guilabel:`Close`.

   .. step:: Add the sample stream connection to the connection registry.

      This connection serves as your streaming data source.

      a. In the pane for your {+spi+}, click :guilabel:`Configure`.

      #. Click :guilabel:`Add sample connection.` This 
         creates a ``sample_stream_solar`` connection of type 
         ``Sample Stream``. Click on the 
         :guilabel:`Connection Registry` tab to verify that the
         connection exists.

   .. step:: Add a MongoDB |service| connection to the connection registry.

      This connection serves as our streaming data sink.

      a. In the pane for your {+spi+}, click :guilabel:`Configure`.

      #. In the :guilabel:`Connection Registry` tab, click
         :guilabel:`+ Add Connection` in the upper right.

      #. Click :guilabel:`Atlas Database`. In the 
         :guilabel:`Connection Name` field, enter ``mongodb1``.
         From the :guilabel:`Atlas Cluster` drop down, select an
         |service| {+cluster+} without any data stored on it.

      #. Click :guilabel:`Add connection`.

   .. step:: Verify that your streaming data source emits messages.

      To do this, create a minimal stream processor.

      a. Open a terminal application of your choice.

      #. Connect to your {+spi+} with {+mongosh+}.
            
         Paste the {+mongosh+} connection string that you copied
         in a previous step into your terminal, where 
         ``<atlas-stream-processing-url>`` is the URL of your {+spi+}
         and ``<username>`` is a user with the 
         :atlasrole:`atlasAdmin` role.
            
         .. code-block:: sh

            mongosh "mongodb://<atlas-stream-processing-url>/" 
            --tls --authenticationDatabase admin --username <username>

         Enter your password when prompted.

      #. Create the stream processor.
         
         Copy the following code into your {+mongosh+} prompt:

         .. code-block::
            :copyable: true

            sp.process([{"$source": {
               "connectionName": "sample_stream_solar"
            }}])

         Verify that data from the ``sample_stream_solar`` 
         connection displays to the console, and terminate 
         the process.

         Stream processors you create with ``sp.process()`` don't
         persist after you terminate them.

   .. step:: Create a persistent stream processor.
      
      Copy the following code into your {+mongosh+} prompt:

      .. code-block:: sh
         :copyable: true

         let s = {
            $source: {
               connectionName: "sample_stream_solar",
               timeField: {
                  $dateFromString: {
                     dateString: '$timestamp'
                  }
               }
            }
         }

         let u = {
            $unwind: {
               path: "$obs"
            }
         }

         let g = {
            $group: {
               _id: "$group_id",
               max: {
                  $max: "$obs.watts"
               },
               avg: {
                  $avg: "$obs.watts"
               }
            }
         }

         let t = {
            $tumblingWindow: {
               interval: {
                  size: NumberInt(1),
                  unit: "second"
               },
               pipeline: [u, g]
            }
         }

         let m = {
            $merge: {
               into: {
                  connectionName: "mongodb1",
                  db: "MySolar",
                  coll: "solar"
               }
            }
         }

         sp.createStreamProcessor("avgWatts", [s, t, m])

      This creates a stream processor named ``avgWatts`` that
      applies the previously defined query and writes the 
      processed data to the ``solar`` collection of the 
      ``MySolar`` database on the {+cluster+} you connected to.
      It returns the average and peak wattage of all 
      observed solar panels over 1 hour intervals.

      To learn more about how {+atlas-sp+} writes to at-rest
      databases, see :ref:`<streams-agg-pipeline-merge>`.

   .. step:: Start the stream processor. 

      Run the following command in {+mongosh+}:

      .. code-block:: sh

         sp.avgWatts.start()

   .. step:: Verify the output of the stream processor.

      To verify that the processor is active, run the following
      command in {+mongosh+}:

      .. code-block:: sh

         sp.avgWatts.stats()

      This command reports operational statistics of the 
      ``avgWatts`` stream processor.

      To verify that the stream processor is writing data to your
      |service| {+cluster+}, navigate to the :guilabel:`Collections`
      tab of the {+cluster+} and view the ``MySolar`` collection.
      
   .. step:: Drop the stream processor.

      Run the following command in {+mongosh+}:

      .. code-block:: shell
         :copyable: true

         sp.avgWatts.drop()

      To confirm that you have dropped ``avgWatts``, list
      all your available stream processors:

      .. code-block:: shell
         :copyable: true

         sp.listStreamProcessors()

Next Steps
----------

Learn how to:

- :ref:`streams-manage-processor`
- :ref:`manage-spi`
