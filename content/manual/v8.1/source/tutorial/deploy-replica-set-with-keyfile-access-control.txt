.. meta::
   :robots: noindex, nosnippet 

.. _deploy-repl-set-with-keyfile:
.. _deploy-repl-set-with-auth:

===========================================================
Deploy Self-Managed Replica Set With Keyfile Authentication
===========================================================

.. default-domain:: mongodb

.. meta::
   :keywords: on-prem
   :description: Deploy a self-managed replica set with keyfile authentication, ensuring secure internal and client access control.
                    
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

Enforcing access control on a :term:`replica set` requires configuring:

- Security between members of the replica set using
  :ref:`Internal Authentication<replica-set-security>`, and

- Security between connecting clients and the replica set using
  :doc:`/core/authorization`.

For this tutorial, each member of the replica set uses the same internal
authentication mechanism and settings.

Enforcing internal authentication also enforces user access control. To
connect to the replica set, clients like :binary:`~bin.mongosh` need to
use a :ref:`user account<authorization>`. See
:ref:`security-repSetDeploy-access-control`.

Cloud Manager and Ops Manager
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you are currently using or are planning to use Cloud Manager or Ops
Manager, see the :mms-docs:`Cloud Manager manual
</tutorial/edit-host-authentication-credentials>` or the :opsmgr:`Ops
Manager manual </tutorial/edit-host-authentication-credentials>` for
enforcing access control.

Considerations
--------------

.. include:: /includes/important-hostnames.rst

IP Binding
~~~~~~~~~~~

.. include:: /includes/extracts/default-bind-ip-security.rst

Operating System
~~~~~~~~~~~~~~~~

This tutorial primarily refers to the :binary:`~bin.mongod` process.
Windows users should use the :binary:`mongod.exe` program instead.

Keyfile Security
~~~~~~~~~~~~~~~~

We recommend keyfiles only for testing and development environments, due to 
their limitations in manageability and cryptographic strength. For production 
environments, we strongly advise using :ref:`X.509 certificates<security-auth-x509>`. While keyfiles can be secure in specific, controlled scenarios, 
they present scalability and management challenges in complex deployments. 
X.509 certificates offer more robust security features, enable better key 
management, support individual authentication, and adhere to industry standards 
for sensitive data protection.

.. _security-repSetDeploy-access-control:

Users and Authentication Mechanisms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/internal-authentication-tutorials-access-control-consideration.rst

.. _security-replica-deploy-with-access-control:

Deploy New Replica Set with Keyfile Access Control
--------------------------------------------------

.. include:: /includes/important-hostnames.rst

.. include:: /includes/steps/deploy-replica-set-with-auth.rst

X.509 Internal Authentication
-----------------------------

For details on using X.509 for internal authentication, see
:doc:`/tutorial/configure-x509-member-authentication`.

To upgrade from keyfile internal authentication to X.509 internal
authentication, see
:doc:`/tutorial/upgrade-keyfile-to-x509`.
