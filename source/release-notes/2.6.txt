:orphan:

========================================================
Release Notes for MongoDB 2.6 (Development Series 2.5.x)
========================================================

.. default-domain:: mongodb

MongoDB 2.6 is currently in development, as part of the 2.5
development release series. While 2.5-series releases are currently
available, these versions of MongoDB, including the 2.6 release 
candidate builds, are for **testing only and
not for production use**.

This document will eventually contain the full release notes for
MongoDB 2.6; before its release this document covers the 2.5
development series as a work-in-progress.

.. contents:: See the :doc:`full index of this page <2.6-changes>` for
              a complete list of changes included in 2.6 (Development
              Series 2.5.x).
   :backlinks: none
   :local:
   :depth: 2

Downloading
-----------

You can download the 2.6 release candidate on the `downloads page`_ in the
:guilabel:`Development Release (Unstable)` section. There are no
distribution packages for development releases, but you can use the
binaries provided for testing purposes. See
:doc:`/tutorial/install-mongodb-on-linux`,
:doc:`/tutorial/install-mongodb-on-windows`, or
:doc:`/tutorial/install-mongodb-on-os-x` for the basic installation
process.

.. _`downloads page`: http://www.mongodb.org/downloads

Changes
-------

SASL Library Change
~~~~~~~~~~~~~~~~~~~

MongoDB Enterprise uses Cyrus SASL instead of GNU SASL (``libgsasl``).
This change has the following SASL2 and Cyrus SASL library and GSSAPI
plugin dependencies:

For Debian or Ubuntu, install the following: 

.. code-block:: sh

   sudo apt-get install cyrus-sasl2-dbg cyrus-sasl2-mit-dbg libsasl2-2 libsasl2-dev libsasl2-modules libsasl2-modules-gssapi-mit


For CentOS, Red Hat Enterprise Linux, and Amazon AMI, install the
following:

.. code-block:: sh

   sudo yum install cyrus-sasl cyrus-sasl-lib cyrus-sasl-devel cyrus-sasl-gssapi

For SUSE, install the following: 

.. code-block:: sh

   sudo zypper install cyrus-sasl cyrus-sasl-devel cyrus-sasl-gssapi

LDAP Support for Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB Enterprise provides support for proxy authentication of users.  This
change allows administrators to configure a MongoDB cluster to authenticate
users via Linux PAM or by proxying authentication requests to a specified LDAP
service.

.. warning::

   Because this change uses ``SASL PLAIN`` mechanism to transmit the
   user password to the MongoDB server, you should, in general, use
   only on a trusted channel (VPN, SSL, trusted wired network).

Configuration
`````````````

LDAP support for user authentication requires proper configuration of
the ``saslauthd`` daemon process as well as introduces a new server
parameter, ``saslauthdPath``. ``saslauthdPath`` is the path to the Unix
Domain Socket of the ``saslauthd`` instance to use for proxy
authentication.

``saslauthd`` Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^

On systems that configure ``saslauthd`` with a
``/etc/sysconfig/saslauthd`` file, such as Red Hat Enterprise Linux,
Fedora, CentOS, Amazon Linux AMI, set the mechanism ``MECH`` to
``ldap``:

.. code-block:: none

   MECH=ldap

On systems that configure ``saslauthd`` with a
``/etc/default/saslauthd`` file, set the mechanisms option to
``ldap``:

.. code-block:: none

   MECHANISMS="ldap"

To use with *ActiveDirectory*, start ``saslauthd`` with the following
configuration options:

.. code-block:: none

   ldap_servers: <ldap uri, e.g. ldaps://ad.example.net>
   ldap_use_sasl: yes
   ldap_mech: DIGEST-MD5
   ldap_auth_method: fastbind

To connect to an OpenLDAP server, use a test ``saslauthd.conf`` with
the following content:

.. code-block:: none

   ldap_servers: <ldap uri, e.g. ldaps://ad.example.net>
   ldap_search_base: ou=Users,dc=example,dc=com
   ldap_filter: (uid=%u)

To use this sample OpenLDAP configuration, create users with a ``uid``
attribute (login name) and place under the ``Users`` organizational
unit (``ou``).

To test the ``saslauthd`` configuration, use ``testsaslauthd`` utility,
as in the following example:

.. code-block:: sh

   testsaslauthd -u testuser -p testpassword -s mongod -f /var/run/saslauthd/mux

For more information on ``saslauthd`` configuration, see
`<http://www.openldap.org/doc/admin24/guide.html#Configuring saslauthd>`_.

MongoDB Server Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Configure the MongoDB server with the ``authenticationMechanisms``
parameter and the ``saslauthdPath`` parameters using either the command
line option :option:`--setParameter <mongod --setParameter>` or the
:doc:`configuration file </reference/configuration-options>`:

- If ``saslauthd`` has a socket path of ``/<some>/<path>/saslauthd``,
  set the ``saslauthdPath`` parameter to
  ``/<some>/<path>/saslauthd/mux`` and the ``authenticationMechanisms``
  parameter to ``PLAIN``, as in the following command line example:

  .. code-block:: sh

     mongod --setParameter saslauthdPath=/<some>/<path>/saslauthd/mux --setParameter authenticationMechanisms=PLAIN

  Or to set the configuration in the :doc:`configuration file
  </reference/configuration-options>`, add the parameters:

  .. code-block:: sh

     setParameter=saslauthdPath=/<some>/<path>/saslauthd/mux
     setParameter=authenticationMechanisms=PLAIN

- Otherwise, set the ``saslauthdPath`` to the empty string ``""`` to use
  the library's default value and the ``authenticationMechanisms``
  parameter to ``PLAIN``, as in the following command line example:

  .. code-block:: sh

     mongod --setParameter saslauthdPath="" --setParameter authenticationMechanisms=PLAIN

  Or to set the configuration in the :doc:`configuration file
  </reference/configuration-options>`, add the parameters:

  .. code-block:: sh

     setParameter=saslauthdPath=""
     setParameter=authenticationMechanisms=PLAIN

Authenticate in the ``mongo`` Shell
```````````````````````````````````

To use this authentication mechanism in the :program:`mongo` shell, you
**must** pass ``digestPassword: false`` to :method:`db.auth()` when
authenticating on the ``$external`` database, since the server must
receive an undigested password to forward on to ``saslauthd``, as in
the following example:

.. code-block:: javascript

   use $external
   db.auth(
            {
              mechanism: "PLAIN", 
              user: "application/reporting@EXAMPLE.NET",
              pwd: "some1nterestingPwd",
              digestPassword: false
            } 
          )

x.509 Authentication
~~~~~~~~~~~~~~~~~~~~

MongoDB introduces x.509 certificate authentication for use with a
secure :doc:`SSL connection </tutorial/configure-ssl>`.

.. important:: To use SSL, you must either use MongoDB Enterprise or
   build MongoDB locally using ``scons`` with the ``--ssl`` option.

The x.509 authentication allows clients to authenticate to servers with
certificates instead of with username and password. 

The x.509 authentication also allows sharded cluster members and
replica set members to use x.509 certificates to verify their
membership to the cluster or the replica set instead of using key
files. The membership authentication is an internal process.

.. _`default distribution of MongoDB`: http://www.mongodb.org/downloads
.. _`MongoDB Enterprise`: http://www.10gen.com/products/mongodb-enterprise

x.509 Certificate
`````````````````

The x.509 certificate for client authentication and the x.509
certificate for internal authentication have different properties.

The client certificate must have the following
properties:

- A single Certificate Authority (CA) must issue the certificates
  for both the client and the server.

- Client certificates must contain the following fields:

  .. code-block:: none

     keyUsage = digitalSignature
     extendedKeyUsage = clientAuth

The member certificate, used for internal authentication to verify
membership to the sharded cluster or a replica set, must have the
following properties:

- A single Certificate Authority (CA) must issue all the x.509
  certificates for the members of a sharded cluster or a replica set.

- The member certificate's ``subject``, which contains the
  Distinguished Name (``DN``), must match the ``subject`` of the
  certificate on the server, *starting from and including* the
  Organizational Unit (``OU``) of the certificate on the server.

New Protocol and Parameters
```````````````````````````

The change for x.509 authentication introduces a new ``MONGODB-X509``
protocol. For internal authentication for membership, the change also
introduces the ``--clusterAuthMode``, ``--sslClusterFile`` and the
``--sslClusterPassword`` options.

Use the ``--clusterAuthMode`` option to enable internal x.509
authentication for membership. The ``--clusterAuthMode`` option can
have one of the following values:

.. list-table::
   :header-rows: 1
   :widths: 20 40

   * - Value

     - Description

   * - ``keyfile``

     - Default value. Use keyfile for authentication.

   * - ``sendKeyfile`` 

     - For rolling upgrade purposes. Send the keyfile for
       authentication but can accept either keyfile or x.509
       certificate.

   * - ``sendX509``

     - For rolling upgrade purposes. Send the x.509 certificate for
       authentication but can accept either keyfile or x.509
       certificate.

   * - ``x509``

     - Recommended. Send the x.509 certificate for authentication and
       accept **only** x.509 certificate.

For the ``--sslClusterFile`` option, specify the full path to the x.509
certificate and key PEM file for the cluster or set member. If the key
is encrypted, specify the password with the ``--sslClusterPassword``
option.

Configure MongoDB Server to Use x.509
`````````````````````````````````````

Configure the MongoDB server from the command line, as in the following
[#additionalOptions]_:

.. code-block:: sh

   mongod --sslOnNormalPorts --sslPEMKeyFile <path to sslCertificate and key PEM file> --sslCAFile <path to root CA PEM file>

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   sslOnNormalPorts = true
   sslPEMKeyFile = <path to sslCertificate and key PEM file>
   sslCAFile = <path to the root CA PEM file>

To specify the x.509 certificate for internal cluster member
authentication, append the additional SSL options ``--clusterAuthMode``
and ``--sslClusterFile``, as in the following example for a member of a
replica set [#additionalOptions]_:

.. code-block:: sh

   mongod --replSet <name> --sslOnNormalPorts --sslPEMKeyFile <path to sslCertificate and key PEM file>  --sslCAFile <path to root CA PEM file>  --clusterAuthMode x509 --sslClusterFile <path to membership certificate and key PEM file>

.. [#additionalOptions] Include any additional options, SSL
   or otherwise, that are required for your specific configuration.

Authenticate with a x.509 Certificate
`````````````````````````````````````

To authenticate with a client certificate, you must first add a MongoDB
user that corresponds to the client certificate. See
:ref:`addX509SubjectUser`.

To authenticate, use the :method:`db.auth()` method in the
``$external`` database. For the ``mechanism`` field, specify
``"MONGODB-X509"``, and for the ``user`` field, specify the user, or
the ``subject``, that corresponds to the client certificate.

For example, if using the :program:`mongo` shell,

1. Connect :program:`mongo` shell to the :program:`mongod` set up for
   SSL:

   .. code-block:: sh

      mongo --ssl --sslPEMKeyFile <path to CA signed client PEM file>

#. To perform the authentication, use the :method:`db.auth()` method in the
   ``$external`` database.

   .. code-block:: javascript

      db.getSiblingDB("$external").auth(
                                         { 
                                           mechanism: "MONGODB-X509",
                                           user: "CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry"
                                         } 
                                       )

.. _addX509SubjectUser:

Add x.509 Certificate ``subject`` as a User
```````````````````````````````````````````

To authenticate with a client certificate, you must first add the value
of the ``subject`` from the client certificate as a MongoDB user.

1. You can retrieve the ``subject`` from the client certificate with
   the following command:

   .. code-block:: sh

      openssl x509 -in <pathToClient PEM> -inform PEM -subject -nameopt RFC2253

   The command returns the ``subject`` string as well as certificate:

   .. code-block:: sh

      subject= CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----

2. Add the value of the ``subject``, omitting the spaces, from the
   certificate as a user. For example, in the :program:`mongo`
   shell, to add the user to the ``test`` database:

   .. code-block:: javascript

      use test
      db.addUser({
                  user: "CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry", 
                  userSource: '$external', 
                  roles: ['readAnyDatabase', 'readWriteAnyDatabase']
                })

See :doc:`/tutorial/add-user-to-database` for details on adding a user
with roles using :doc:`privilege documents
</reference/privilege-documents>`.

Upgrade Clusters to x.509 Authentication
````````````````````````````````````````

To upgrade clusters that are currently using keyfile authentication to
x.509 authentication, use a rolling upgrade process:

1. For each node of a cluster, set ``--clusterAuthMode`` to
   ``sendKeyFile``. With this setting, each node continues to use its
   keyfile to authenticate itself as a member. However, each node can now
   accept either a keyfile or the x.509 certificate from other members to
   authenticate those members. Upgrade all nodes of the cluster to this
   setting.

2. Then, for each node of a cluster, set ``--clusterAuthMode`` to
   ``sendX509`` and set ``--sslClusterFile`` to the appropriate path of
   the node's certificate. [#encryptedKey]_ With this setting, each
   node uses its x.509 certificate to authenticate itself as a member.
   However, each node continues to accept either a keyfile or the x.509
   certificate from other members to authenticate those members.
   Upgrade all nodes of the cluster to this setting.

3. Optional but recommended. Finally, for each node of the cluster, set
   ``--clusterAuthMode`` to ``x509`` to only use the x.509 certificate
   for authentication.

.. [#encryptedKey] If the key is encrypted, set the
   ``--sslClusterPassword`` to the password to decrypt the key.

Background Index Builds Replicate to Secondaries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 2.5.0, if you initiate a :ref:`background index
build <index-creation-background>` on a :term:`primary`, the
secondaries will replicate the index build in the background.
In previous versions of MongoDB, secondaries built all indexes in the
foreground, even if the primary built an index in the background.

For all index builds, secondaries will not begin building indexes
until the primary has successfully completed the index build.

``mongod`` Automatically Continues in Progress Index Builds Following Restart
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
If your :program:`mongod` instance was building an index when it
shutdown or terminated, :program:`mongod` will now continue building
the index when the :program:`mongod` restarts. Previously, the index
build *had* to finish building before :program:`mongod` shutdown.
 
To disable this behavior the 2.5 series adds a new run time option,
:setting:`noIndexBuildRetry` (or via, ``--noIndexBuildRetry`` on the
command line,) for :program:`mongod`. :setting:`noIndexBuildRetry`
prevents :program:`mongod` from continuing rebuilding indexes that did
not finished building when the :program:`mongod` last shut down.
 
.. setting:: noIndexBuildRetry
 
   By default, :program:`mongod` will attempt to rebuild indexes upon
   start-up *if* :program:`mongod` shuts down or stops in the middle
   of an index build. When enabled, this option prevents this
   behavior.
