.. meta::
   :robots: noindex, nosnippet

.. _node-open-close-realm:

================================================
Configure, Open, and Close a Realm - Node.js SDK
================================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-open-a-local-realm:

Open a Realm
------------

To open a local (non-synced) realm, pass a :js-sdk:`Realm.Configuration
<Realm.html#~Configuration>` object to the asynchronous method :js-sdk:`Realm.open()
<Realm.html#.open>`.

.. note:: Accessing the Default Realm Path

   If you do not specify a ``path`` property in your ``Configuration`` object,
   the SDK creates a realm at the default path. You can access and change 
   the default realm path using the ``Realm.defaultPath`` global property.

.. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.open-local.ts
   :language: typescript

Open a Realm Without Providing a Schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After you create a realm on a device, you can omit the schema when you
access the same realm by calling ``new Realm()``. The SDK derives the 
realm's schema from the existing realm file at ``Realm.defaultPath``.

Accessing a realm without providing a schema only works for local realms. You
must always pass a schema when using a Synced realm.

.. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.no-schema.ts
   :language: typescript

.. _node-open-an-in-memory-realm:

Open an In-Memory Realm
~~~~~~~~~~~~~~~~~~~~~~~

To create a realm that runs entirely in memory without being written to a file,
add ``inMemory: true`` to your :js-sdk:`Realm.Configuration
<Realm.html#~Configuration>` object:

.. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.open-in-memory.ts
   :language: typescript

.. note:: 

   In-memory realms may use disk space if memory is running low, but files
   created by an in-memory realm are deleted when you close the realm.

.. _node-open-existing-realm-different-configuration:
.. _node-copy-data-and-open-new-realm:

Copy Data and Open a New Realm
------------------------------

.. versionadded:: 10.14.0

To copy data from an existing realm to a new realm with different
configuration options, pass the new configuration the
:js-sdk:`Realm.writeCopyTo() <Realm.html#writeCopyTo>` method.

In the new realm's configuration, you *must* specify the ``path``. 

If you write the copied realm to a realm file that already exists, the data is written object by object.
The copy operation replaces objects if there already exists objects for given primary keys.
The schemas of the realm you copy and the realm you are writing to must be 
compatible for the copy operation to succeed.
Only objects in the schemas of both configurations are copied over.

The configuration change can include modifications to :js-sdk:`SyncConfiguration
<Realm.App.Sync.html#~SyncConfiguration>`: 

- Local realm to synced realm
- Synced Realm to local realm
- Synced Realm to a Synced Realm for a different user

.. include:: /includes/note-writecopy-local-to-sync.rst

.. include:: /includes/note-writecopy-same-type-sync-only.rst

The configuration change can also include changes to ``encryptionKey`` 
property of the ``Configuration``: 

- Encrypted realm to unencrypted realm
- Unencrypted realm to encrypted realm

.. example:: Convert Local Realm to Synced Realm

   .. tabs-realm-languages::

      .. tab::
         :tabid: typescript

         .. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.open-local-as-synced.ts
            :language: typescript

      .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.open-local-as-synced.js
            :language: javascript

You can also combine changes to configuration. For example, you can open a
local encrypted realm as a synced unencrypted realm or a unencrypted synced realm
as an encrypted synced realm.

.. example:: Convert Synced Encrypted to Local Unencrypted Realm

   .. tabs-realm-languages::

      .. tab::
         :tabid: typescript

         .. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.sync-encrypted-to-local-unencrypted.ts
            :language: typescript

      .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.sync-encrypted-to-local-unencrypted.js
            :language: javascript

.. seealso:: 

   - :ref:`Open a Flexible Synced Realm - Node.js SDK <node-flexible-sync-open-realm>`
   - :ref:`Open a Partition-Based Synced Realm - Node.js SDK <node-partition-based-sync>`
   - :ref:`Encrypt a Realm - Node.js SDK <node-partition-sync-open-realm>`

.. _node-close-a-realm:

Close a Realm
-------------

.. include:: /includes/js-close-a-realm.rst

Use an HTTP Proxy
-----------------

The Realm Node.js SDK has limited support for running behind an HTTP proxy.

Requirements
~~~~~~~~~~~~

- Realm Node.js SDK v10.3.0 or later.
- NPM CLI v6.9.0 or later is required.

Limitations
~~~~~~~~~~~

- You must install the `fetch-with-proxy 
  <https://www.npmjs.com/package/fetch-with-proxy>`__ package manually.
- HTTPS connections from the client to the proxy server are not supported.
  The URL specified in ``HTTPS_PROXY`` must start with ``http://``.
- You must set an ``HTTPS_PROXY`` environment variable. The proxy can't
  be set at runtime or on a per-app basis.


Install fetch-with-proxy
~~~~~~~~~~~~~~~~~~~~~~~~

A manual step is required to switch out the ``node-fetch`` package used by the
network transport layer.

After installing the Realm Node.js SDK, run the following command to install a
different package into the Network Transport package:

.. code-block:: sh

   npm install node-fetch@npm:fetch-with-proxy --prefix node_modules/realm-network-transport

Set HTTPS_PROXY and Run a Script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can run an arbitrary script file while routing all of Realm JS's requests
through an HTTP proxy.

On a Unix system, you can prefix the assignment of an environment variable before
the command:

.. code-block:: sh

   HTTPS_PROXY=http://127.0.0.1:3128 node index.js
