#  This file borrows content from:
#    /includes/options-shared.yaml
#    /includes/options-mongod.yaml
#    /includes/options-mongos.yaml
#
#  The {{program}} variable is generated by the system.
#
program: conf
name: systemLog.verbosity
type: integer
directive: setting
inherit:
  name: verbose
  program: _shared
  file: options-shared.yaml
default: 0
description: |
  .. versionchanged:: 3.0

  The default :doc:`log message </reference/log-messages>`
  verbosity level for :ref:`components <log-message-components>`. The
  verbosity level determines the amount of :ref:`Informational and
  Debug <log-severity-levels>` messages MongoDB outputs.

  .. include:: /includes/log-verbosity-levels.rst

  To use a different verbosity level for a named component, use the
  component's verbosity setting. For example, use the
  :setting:`systemLog.component.accessControl.verbosity` to set the
  verbosity level specifically for :data:`ACCESS` components.

  See the ``systemLog.component.<name>.verbosity`` settings for
  specific component verbosity settings.

  For various ways to set the log verbosity level, see
  :ref:`log-messages-configure-verbosity`.

optional: true
---
program: conf
name: systemLog.component.accessControl.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "access control"
  component_data: ":data:`ACCESS`"
  version: ".. versionadded:: 3.0"
---
program: conf
name: systemLog.component.command.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "commands"
  component_data: ":data:`COMMAND`"
  version: ".. versionadded:: 3.0"
---
program: conf
name: systemLog.component.control.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "control operations"
  component_data: ":data:`CONTROL`"
  version: ".. versionadded:: 3.0"
---
program: conf
name: systemLog.component.ftdc.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "diagnostic data collection operations"
  component_data: ":data:`FTDC`"
  version: ".. versionadded:: 3.2"
---
program: conf
name: systemLog.component.geo.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "geospatial parsing operations"
  component_data: ":data:`GEO`"
  version: ".. versionadded:: 3.0"
---
program: conf
name: systemLog.component.index.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "indexing operations"
  component_data: ":data:`INDEX`"
  version: ".. versionadded:: 3.0"
---
program: conf
name: systemLog.component.network.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "networking operations"
  component_data: ":data:`NETWORK`"
  version: ".. versionadded:: 3.0"
---
program: conf
name: systemLog.component.query.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "query operations"
  component_data: ":data:`QUERY`"
  version: ".. versionadded:: 3.0"
---
program: conf
name: systemLog.component.replication.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "replication"
  component_data: ":data:`REPL`"
  version: ".. versionadded:: 3.0"
---
program: conf
name: systemLog.component.replication.heartbeats.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "heartbeats"
  component_data: ":data:`REPL_HB`"
  version: ".. versionadded:: 3.6"
---
program: conf
name: systemLog.component.replication.rollback.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "rollback"
  component_data: ":data:`ROLLBACK`"
  version: ".. versionadded:: 3.6"
---
program: conf
name: systemLog.component.sharding.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "sharding"
  component_data: ":data:`SHARDING`"
  version: ".. versionadded:: 3.0"
---
program: conf
name: systemLog.component.storage.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "storage"
  component_data: ":data:`STORAGE`"
  version: ".. versionadded:: 3.0"
post: |
  If :setting:`systemLog.component.storage.journal.verbosity` is unset,
  :setting:`systemLog.component.storage.verbosity` level also applies to
  journaling components.

  .. include:: /includes/log-verbosity-levels.rst
---
program: conf
name: systemLog.component.storage.journal.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "journaling"
  component_data: ":data:`JOURNAL`"
  version: ".. versionadded:: 3.0"
post: |
  If :setting:`systemLog.component.storage.journal.verbosity` is
  unset, the journaling components have the same verbosity level as the
  parent storage components: i.e. either the
  :setting:`systemLog.component.storage.verbosity` level if
  set or the default verbosity level.

  .. include:: /includes/log-verbosity-levels.rst
---
program: conf
name: systemLog.component.storage.recovery.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "recovery"
  component_data: ":data:`RECOVERY`"
  version: ".. versionadded:: 4.0"
post: |
  If :setting:`systemLog.component.storage.recovery.verbosity` is unset,
  :setting:`systemLog.component.storage.verbosity` level also applies to
  recovery components.

  .. include:: /includes/log-verbosity-levels.rst
---
program: conf
name: systemLog.component.transaction.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "transaction"
  component_data: ":data:`TXN`"
  version: ".. versionadded:: 4.0.2"
post: |
   .. include:: /includes/log-verbosity-levels.rst
   
---
program: conf
name: systemLog.component.write.verbosity
inherit:
  name: systemLog.component.name.verbosity
  program: _shared
  file: options-shared.yaml
replacement:
  component_type: "write operations"
  component_data: ":data:`WRITE`"
  version: ".. versionadded:: 3.0"
---
program: conf
name: systemLog.quiet
type: boolean
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  directive: "setting"
  verb: "Run"
inherit:
  name: quiet
  program: _shared
  file: options-shared.yaml
post: |
  {{role}} is **not** recommended for production systems as it may make
  tracking problems during particular connections much more difficult.
---
program: conf
name: systemLog.traceAllExceptions
type: boolean
directive: setting
description: |
  Print verbose information for debugging. Use for additional logging for
  support-related troubleshooting.
---
program: conf
name: systemLog.syslogFacility
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  verb: "The"
  option: "set :setting:`systemLog.destination` to ``syslog``."

inherit:
  name: syslogFacility
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: systemLog.path
type: string
directive: setting
description: |
  The path of the log file to which {{program}} should send all diagnostic
  logging information, rather than the standard output or the host's
  :term:`syslog`. MongoDB creates the log file at the specified path.
replacement:
  program: ":binary:`~bin.mongod` or :binary:`~bin.mongos`"
inherit:
    program: mongod
    name: logpath
    file: options-mongod.yaml
post: |
  .. include:: /includes/extracts/linux-config-expectations-systemlog-path.rst
---
program: conf
name: systemLog.logAppend
type: boolean
default: false
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "When ``true``, {{program}} appends"
inherit:
  name: logappend
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: systemLog.destination
type: string
directive: setting
description: |
  The destination to which MongoDB sends all log output. Specify either
  ``file`` or ``syslog``. If you specify ``file``, you must also specify
  :setting:`systemLog.path`.

  If you do not specify :setting:`systemLog.destination`, MongoDB sends
  all log output to standard output.

  .. warning::

     The ``syslog`` daemon generates timestamps when it logs a message, not
     when MongoDB issues the message. This can lead to misleading timestamps
     for log entries, especially when the system is under heavy load. We
     recommend using the ``file`` option for production systems to ensure
     accurate timestamps.
---
program: conf
name: systemLog.timeStampFormat
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
inherit:
  name: timeStampFormat
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: systemLog.logRotate
type: string
directive: setting
inherit:
  name: logRotate
  program: mongod
  file: options-mongod.yaml
replacement:
   intro: "The"
   logappend: "set :setting:`systemLog.logAppend` to ``true``"
---
program: conf
name: processManagement.pidFilePath
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  verb: "The"
  option: ":setting:`processManagement.fork` setting"
inherit:
  name: pidfilepath
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: processManagement.fork
type: boolean
default: false
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  verb: "Enable"
inherit:
  name: fork
  program: mongod
  file: options-mongod.yaml
post: |
  .. include:: /includes/extracts/linux-config-expectations-processmanagement-fork.rst
---
program: conf
name: processManagement.timeZoneInfo
type: string
directive: setting
description: |
  .. include:: /includes/fact-timeZoneInfo.rst
---
program: conf
name: processManagement.windowsService.serviceName
type: string
default: "MongoDB"
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  verb: "The"
  install: "``--install``"
  remove: "``--remove``"
inherit:
  name: serviceName
  program: mongod.exe
  file: options-mongod.exe.yaml
---
program: conf
name: processManagement.windowsService.displayName
type: string
default: "MongoDB"
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  verb: "The"
inherit:
  name: serviceDisplayName
  program: mongod.exe
  file: options-mongod.exe.yaml
---
program: conf
name: processManagement.windowsService.description
type: string
default:  "MongoDB Server"
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  verb: "Run"
  option: "``--install``"
inherit:
  name: serviceDescription
  program: mongod.exe
  file: options-mongod.exe.yaml
---
program: conf
name: processManagement.windowsService.serviceUser
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  verb: "The"
  option: "``--install``"
inherit:
  name: serviceUser
  program: mongod.exe
  file: options-mongod.exe.yaml
---
program: conf
name: processManagement.windowsService.servicePassword
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  verb: "The"
  serviceUser: ":setting:`processManagement.windowsService.serviceUser`"
  install: "``--install``"

inherit:
  name: servicePassword
  program: mongod.exe
  file: options-mongod.exe.yaml
---
program: conf
name: net.port
type: integer
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
inherit:
  name: port
  program: _shared
  file: options-shared.yaml
---
program: conf
name: net.bindIp
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` and :binary:`~bin.mongod`"
  intro: "The"
inherit:
  name: bind_ip
  program: mongod
  file: options-mongod.yaml
post: |
  To bind to all IPv4 addresses, enter ``0.0.0.0``.

  To bind to all IPv4 and IPv6 addresses, enter ``::,0.0.0.0``
  or alternatively, use the :setting:`net.bindIpAll` setting.

  .. note::

     :setting:`net.bindIp` and :setting:`net.bindIpAll` are mutually
     exclusive. That is, you can specify one or the other, but not both.
---
program: conf
name: net.bindIpAll
type: boolean
default: false
directive: setting
replacement:
  program: ":binary:`~bin.mongos` and :binary:`~bin.mongod`"
  condition: "true"
inherit:
  name: bind_ip_all
  program: mongod
  file: options-mongod.yaml
post: |

   Alternatively, set the :setting:`net.bindIp` setting to
   ``::,0.0.0.0`` to bind to all IP addresses.

   .. note::

      :setting:`net.bindIp` and :setting:`net.bindIpAll` are mutually
      exclusive. That is, you can specify one or the other, but not both.

---
program: conf
name: net.maxIncomingConnections
type: integer
default: 65536
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
inherit:
  name: maxConns
  program: mongod
  file: options-mongod.yaml
post: |
  .. include:: /includes/fact-maxconns-mongos.rst

---
program: conf
name: net.wireObjectCheck
type: boolean
default: true
directive: setting
description: |
  When ``true``, the :binary:`~bin.mongod` or :binary:`~bin.mongos` instance  validates
  all requests from clients upon receipt to prevent clients from inserting
  malformed or invalid BSON into a MongoDB database.

  For objects with a high degree of sub-document nesting, {{role}} can
  have a small impact on performance.
---
program: conf
name: net.unixDomainSocket.enabled
type: boolean
default: true
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "Enable or disable"
inherit:
  name: nounixsocket
  program: mongod
  file: options-mongod.yaml
post: |
  When {{role}} is ``true``, {{program}} listens on the UNIX socket.

  The {{program}} process always listens on the UNIX socket unless
  one of the following is true:

  - {{role}} is ``false``

  - ``--nounixsocket`` is set. The command
    line option takes precedence over the configuration file setting.

  - :setting:`net.bindIp` is not set

  - :setting:`net.bindIp` does not specify ``localhost`` or its associated IP address

  .. |mongodb-package| replace:: {{program}}

  .. include:: /includes/note-deb-and-rpm-default-to-localhost.rst
---
program: conf
name: net.unixDomainSocket.pathPrefix
type: string
default: /tmp
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  option: "``--nounixsocket``"
inherit:
  name: unixSocketPrefix
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.unixDomainSocket.filePermissions
type: int
directive: setting
inherit:
  name: filePermissions
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ipv6
type: boolean
default: false
directive: setting
description: |

   Enables or disables IPv6 support. :binary:`~bin.mongos` or
   :binary:`~bin.mongod` disables IPv6 support by default.

---
program: conf
name: net.tls.mode
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  verb: "Enables"
  directive: "setting"
inherit:
  name: tlsMode
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.certificateSelector
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  directive: "setting"
  file: ":setting:`net.tls.PEMKeyFile`"
inherit:
  name: tlsCertificateSelector
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.clusterCertificateSelector
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  directive: "setting"
  file: ":setting:`net.tls.clusterFile`"
inherit:
  name: tlsClusterCertificateSelector
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.PEMKeyFile
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  selector: ":setting:`net.tls.certificateSelector`"
  
inherit:
  name: tlsPEMKeyFile
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.PEMKeyPassword
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  pemKeyOption: ":setting:`~net.tls.PEMKeyFile`"
  selector: ":setting:`net.tls.certificateSelector`"
inherit:
  name: tlsPEMKeyPassword
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.clusterFile
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  pemKeyOption: ":setting:`~net.tls.PEMKeyFile`"
  intro: "The"
  directive: "setting"
  selector: ":setting:`net.tls.clusterCertificateSelector`"
  serverselector: ":setting:`net.tls.certificateSelector`"
  
inherit:
  name: tlsClusterFile
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.clusterPassword
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  selector: ":setting:`net.tls.clusterCertificateSelector`"
inherit:
  name: tlsClusterPassword
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.CAFile
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  selector: ":setting:`net.tls.certificateSelector`"
  
inherit:
  name: tlsCAFile
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.clusterCAFile
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  selector: ":setting:`net.tls.clusterCertificateSelector`"
  cafile: ":setting:`net.tls.CAFile`"
inherit:
  name: tlsClusterCAFile
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.CRLFile
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  selector: ":setting:`net.tls.certificateSelector`"
inherit:
  name: tlsCRLFile
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.allowConnectionsWithoutCertificates
type: boolean
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  old_name: "``net.tls.weakCertificateValidation``"
  verb: "Enable or disable"
  tlsCA_option: ":setting:`~net.tls.CAFile`"
inherit:
  name: tlsAllowConnectionsWithoutCertificates
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.allowInvalidCertificates
type: boolean
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  verb: "Enable or disable"
  setting: "``allowInvalidCertificates: true``"
inherit:
  name: tlsAllowInvalidCertificates
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.disabledProtocols
type: string
directive: setting
inherit:
  name: tlsDisabledProtocols
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.FIPSMode
type: boolean
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "Enable or disable the use of"
  setting_continuation: " for the {{program}}"
inherit:
  name: tlsFIPSMode
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.tls.allowInvalidHostnames
directive: setting
type: boolean
default: false
description: |
  .. versionadded:: 3.0

  When {{role}} is ``true``, MongoDB disables the validation of the
  hostnames in TLS certificates, allowing {{program}} to connect to
  MongoDB instances if the hostname their certificates do not match the
  specified hostname.

  .. include:: /includes/extracts/tls-facts-see-more.rst

replacement:
  program: ":binary:`~bin.mongod`"
optional: true
---
program: conf
name: net.ssl.sslOnNormalPorts
type: boolean
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  verb: "Enable or disable"
  alternative: ":setting:`net.tls.mode: requireTLS <net.tls.mode>`"
  option: ":setting:`net.port`"
inherit:
  name: sslOnNormalPorts
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.mode
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  verb: "Enables"
  directive: "setting"
  alternative: ":setting:`net.tls.mode`"
inherit:
  name: sslMode
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.certificateSelector
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  directive: "setting"
  file: ":setting:`net.ssl.PEMKeyFile`"
  alternative: ":setting:`net.tls.certificateSelector`"
inherit:
  name: sslCertificateSelector
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.clusterCertificateSelector
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  directive: "setting"
  file: ":setting:`net.ssl.clusterFile`"
  alternative: ":setting:`net.tls.clusterCertificateSelector`"
inherit:
  name: sslClusterCertificateSelector
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.PEMKeyFile
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  selector: ":setting:`net.ssl.certificateSelector`"
  alternative: ":setting:`net.tls.PEMKeyFile`"
inherit:
  name: sslPEMKeyFile
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.PEMKeyPassword
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  pemKeyOption: ":setting:`~net.ssl.PEMKeyFile`"
  selector: ":setting:`net.ssl.certificateSelector`"
  alternative: ":setting:`net.tls.PEMKeyPassword`"
inherit:
  name: sslPEMKeyPassword
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.clusterFile
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  pemKeyOption: ":setting:`~net.ssl.PEMKeyFile`"
  intro: "The"
  directive: "setting"
  selector: ":setting:`net.ssl.clusterCertificateSelector`"
  serverselector: ":setting:`net.ssl.certificateSelector`"
  alternative: ":setting:`net.tls.clusterFile`"
inherit:
  name: sslClusterFile
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.clusterPassword
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  selector: ":setting:`net.ssl.clusterCertificateSelector`"
  alternative: ":setting:`net.tls.clusterPassword`"
inherit:
  name: sslClusterPassword
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.CAFile
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  selector: ":setting:`net.ssl.certificateSelector`"
  alternative: ":setting:`net.tls.CAFile`"
inherit:
  name: sslCAFile
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.clusterCAFile
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  selector: ":setting:`net.ssl.clusterCertificateSelector`"
  cafile: ":setting:`net.ssl.CAFile`"
  alternative: ":setting:`net.tls.clusterCAFile`"
inherit:
  name: sslClusterCAFile
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.CRLFile
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  selector: ":setting:`net.ssl.certificateSelector`"
  alternative: ":setting:`net.tls.CRLFile`"
inherit:
  name: sslCRLFile
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.allowConnectionsWithoutCertificates
type: boolean
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  old_name: "``net.ssl.weakCertificateValidation``"
  verb: "Enable or disable"
  sslCA_option: ":setting:`~net.ssl.CAFile`"
  alternative: ":setting:`net.tls.allowConnectionsWithoutCertificates`"
inherit:
  name: sslAllowConnectionsWithoutCertificates
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.allowInvalidCertificates
type: boolean
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  verb: "Enable or disable"
  setting: "``allowInvalidCertificates: true``"
  alternative: ":setting:`net.tls.allowInvalidCertificates`"
inherit:
  name: sslAllowInvalidCertificates
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.disabledProtocols
type: string
directive: setting
replacement:
  alternative: ":setting:`net.tls.disabledProtocols`"
inherit:
  name: sslDisabledProtocols
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.FIPSMode
type: boolean
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "Enable or disable the use of"
  setting_continuation: " for the {{program}}"
  alternative: ":setting:`net.tls.FIPSMode`"
inherit:
  name: sslFIPSMode
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.compression.compressors
type: <string>
directive: setting
description: |

   .. versionadded:: 3.4

   .. versionchanged:: 3.6

      - Add support for :term:`zlib` compressor.

      - Enabled by default. To disable, set to ``disabled``.

   Enables network compression for communication between this
   :binary:`~bin.mongod` or :binary:`~bin.mongos` instance and:

   - other members in the deployment, if a member of a replica set or a
     sharded cluster

   - a :binary:`~bin.mongo` shell

   - drivers that support the ``OP_COMPRESSED`` message format.

   .. include:: /includes/fact-networkMessageCompressors.rst
---
program: conf
name: net.serviceExecutor
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
inherit:
  name: serviceExecutor
  program: _shared
  file: options-shared.yaml
---
program: conf
name: setParameter
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
inherit:
  name: setParameter
  program: mongod
  file: options-mongod.yaml
description: |
  Set MongoDB parameter or parameters described in
  :doc:`/reference/parameters`

  To set parameters in the YAML configuration file, use the following
  format:

  .. code-block:: yaml

     setParameter:
        <parameter1>: <value1>
        <parameter2>: <value2>

  For example, to specify the :parameter:`enableLocalhostAuthBypass` in
  the configuration file:

  .. code-block:: yaml

     setParameter:
        enableLocalhostAuthBypass: false
---
program: conf
name: security.keyFile
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  auth_option: ":setting:`security.authorization`"
  role: ":setting:`~security.keyFile`"
  intro: "The"
inherit:
  name: keyFile
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: security.clusterAuthMode
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
inherit:
  name: clusterAuthMode
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: security.authorization
type: string
default: disabled
directive: setting
description: |
  Enable or disable Role-Based Access Control (RBAC) to govern each
  user's access to database resources and operations.

  Set this option to one of the following:

  .. list-table::
     :header-rows: 1
     :widths: 20 40

     * - Value

       - Description

     * - ``enabled``

       - A user can access only the database resources and actions for
         which they have been granted privileges.

     * - ``disabled``

       - A user can access any database and perform any action.

  See :doc:`/core/authorization` for more information.
post: |
  The {{role}} setting is available only for :binary:`~bin.mongod`.

---
program: conf
name: security.enableLocalhostAuthBypass
# the equivalent command-line option is set via setParameter.
type: string
default: enabled
directive: setting
description: |
  .. versionadded:: 2.6

  Enable or disable localhost authentication bypass.

  Specify ``0`` to disable localhost authentication bypass.
post: |
  The {{role}} setting is available only for :binary:`~bin.mongod`.
---
program: conf
name: security.supportCompatibilityFormPrivilegeDocuments
# the equivalent command-line option is set via setParameter.
type: string
directive: setting
description: |
  Enable or disable backwards compatibility with the MongoDB 2.2 access control
  roles.

  To disable backwards compatibility, set {{role}} to ``0``. In
  general, you should set this option if your deployment does not need to
  support legacy user documents. Typically legacy user documents are only
  useful during the upgrade process and while you migrate applications to
  the updated privilege document form.
post: |
  The {{role}} setting is available only for :binary:`~bin.mongod`.
---
program: conf
name: security.authSchemaVersion
# todo This option currently exists in the code but has no function. When
# a function is written, update this content.
type: string
directive: setting
description: |
  This option is currently not used.
---
program: conf
name: security.sasl.hostName
type: string
directive: setting
description: |
  A fully qualified server domain name for the purpose of configuring SASL
  and Kerberos authentication. The SASL hostname overrides the hostname
  only for the configuration of SASL and Kerberos.

  For :binary:`~bin.mongo` shell and other MongoDB tools to connect to
  the new :setting:`~security.sasl.hostName`, see the
  ``gssapiHostName`` option in the :binary:`~bin.mongo` shell and other
  tools.
---
program: conf
name: security.sasl.serviceName
type: string
directive: setting
description: |
  Registered name of the service using SASL. This option allows you to
  override the default :doc:`Kerberos
  </tutorial/control-access-to-mongodb-with-kerberos-authentication>`
  service name component of the :doc:`Kerberos
  </tutorial/control-access-to-mongodb-with-kerberos-authentication>`
  principal name, on a per-instance basis. If unspecified, the default
  value is ``mongodb``.

  MongoDB permits setting this option only at startup. The
  :dbcommand:`setParameter` can not change this setting.

  This option is available only in MongoDB Enterprise.

  .. important:: Ensure that your driver supports alternate service names.
     For :binary:`~bin.mongo` shell and other MongoDB tools to connect to the
     new :setting:`~security.sasl.serviceName`, see the
     ``gssapiServiceName`` option.
---
program: conf
name: security.sasl.saslauthdSocketPath
type: string
directive: setting
description: |
  The path to the UNIX domain socket file for ``saslauthd``.
---
program: conf
name: security.javascriptEnabled
type: boolean
default: true
directive: setting
description: |
  Enables or disables the :doc:`server-side JavaScript execution
  </core/server-side-javascript>`. When disabled, you cannot use
  operations that perform server-side execution of JavaScript code,
  such as the :query:`$where` query operator, :dbcommand:`mapReduce`
  command and the :method:`db.collection.mapReduce()` method.
---
program: conf
name: operationProfiling.mode
type: string
default: "``off``"
directive: setting
description: |
  Specifies which operations should be :doc:`profiled
  </tutorial/manage-the-database-profiler>`.
  The following profiler levels are available:

  .. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Level
     - Description

   * - ``off``
     - The profiler is off and does not collect any data.
       This is the default profiler level.

   * - ``slowOp``
     - The profiler collects data for operations that take longer
       than the value of ``slowms``.

   * - ``all``
     - The profiler collects data for all operations.

  .. include:: /includes/warning-profiler-performance.rst

---
program: conf
name: operationProfiling.slowOpThresholdMs
type: integer
default: 100
directive: setting
inherit:
  name: slowms
  program: mongod
  file: options-mongod.yaml
post: |
  
  .. versionchanged:: 4.0

     The :setting:`~operationProfiling.slowOpThresholdMs` setting is
     available for :binary:`~bin.mongod` and :binary:`~bin.mongos`. In
     earlier versions, :setting:`~operationProfiling.slowOpThresholdMs`
     is available for :binary:`~bin.mongod` only.

     - For :binary:`~bin.mongod` instances, the setting affects both
       the diagnostic log and, if enabled, the profiler.

     - For :binary:`~bin.mongos` instances, the setting affects the
       diagnostic log only and not the profiler since profiling is not
       available on :binary:`~bin.mongos`.

---
program: conf
name: operationProfiling.slowOpSampleRate
type: double
default: 1.0
directive: setting
inherit:
  name: slowOpSampleRate
  program: mongod
  file: options-mongod.yaml
post: |
  
   .. versionchanged:: 4.0

      The :setting:`~operationProfiling.slowOpSampleRate` setting is
      available for :binary:`~bin.mongod` and :binary:`~bin.mongos`. In
      earlier versions, :setting:`~operationProfiling.slowOpSampleRate`
      is available for :binary:`~bin.mongod` only.

      - For :binary:`~bin.mongod` instances, the setting affects both
        the diagnostic log and, if enabled, the profiler.

      - For :binary:`~bin.mongos` instances, the setting affects the
        diagnostic log only and not the profiler since profiling is not
        available on :binary:`~bin.mongos`.

---
program: conf
name: storage.dbPath
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
  storage_engine: :setting:`~storage.engine`
inherit:
  name: dbpath
  program: mongod
  file: options-mongod.yaml
post: |
  The {{role}} setting is available only for :binary:`~bin.mongod`.

  .. include:: /includes/extracts/linux-config-expectations-storage-dbpath.rst
---
program: conf
name: storage.directoryPerDB
type: boolean
default: false
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
  intro: "When ``true``, MongoDB uses"
  dbpath: :setting:`storage.dbPath`
  newdbpath: :setting:`storage.dbPath` value
inherit:
  name: directoryperdb
  program: mongod
  file: options-mongod.yaml
post: |
  The {{role}} setting is available only for :binary:`~bin.mongod`.

  .. include:: /includes/not-available-for-inmemory-storage-engine.rst

---
program: conf
name: storage.indexBuildRetry
type: boolean
default: true
directive: setting
description: |
  Specifies whether :binary:`~bin.mongod` rebuilds incomplete indexes on the
  next start up. This applies in cases where :binary:`~bin.mongod` restarts
  after it has shut down or stopped in the middle of an index build. In
  such cases, :binary:`~bin.mongod` always removes any incomplete indexes,
  and then, by default, attempts to rebuild them. To stop :binary:`~bin.mongod`
  from rebuilding indexes, set this option to ``false``.

  .. versionchanged:: 4.0

     The setting {{role}} cannot be used in conjunction with
     :setting:`replication.replSetName`.

post: |
  The {{role}} setting is available only for :binary:`~bin.mongod`.

  .. include:: /includes/not-available-for-inmemory-storage-engine.rst

---
program: conf
name: storage.syncPeriodSecs
type: number
default: 60
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
  intro: "The amount of time that"
inherit:
  name: syncdelay
  program: mongod
  file: options-mongod.yaml
post: |
  The {{role}} setting is available only for :binary:`~bin.mongod`.

  .. include:: /includes/not-available-for-inmemory-storage-engine.rst


---
program: conf
name: storage.journal.enabled
type: boolean
default: |
  ``true`` on 64-bit systems, ``false`` on 32-bit systems
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
  intro: "Enable or disable"
  option: ":setting:`storage.dbPath` setting"
inherit:
  name: journal
  program: _shared
  file: options-shared.yaml
post: |
  The {{role}} setting is available only for :binary:`~bin.mongod`.

  .. include:: /includes/not-available-for-inmemory-storage-engine.rst

  .. include:: /includes/wiredtiger-node-nojournal.rst

---
program: conf
name: storage.journal.commitIntervalMs
type: number
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
  versiondirective: ".. versionadded:: 3.2"
inherit:
  name: journalCommitInterval
  program: mongod
  file: options-mongod.yaml
post: |
  The {{role}} setting is available only for :binary:`~bin.mongod`.

  .. include:: /includes/not-available-for-inmemory-storage-engine.rst

---
program: conf
name: replication.oplogSizeMB
type: integer
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
  intro: "The"
inherit:
  name: oplogSize
  program: mongod
  file: options-mongod.yaml
post: |
  The {{role}} setting is available only for :binary:`~bin.mongod`.
---
program: conf
name: replication.replSetName
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
inherit:
  name: replSet
  program: mongod
  file: options-mongod.yaml
description: |
  The name of the replica set that the {{program}} is part of. All hosts
  in the replica set must have the same set name.

  .. include:: /includes/fact-unique-replica-set-names.rst
post: |
  The {{role}} setting is available only for :binary:`~bin.mongod`.

  Starting in MongoDB 4.0:

  - The setting {{role}} cannot be used in conjunction with
    :setting:`storage.indexBuildRetry`.

  - For the WiredTiger storage engine,
    :setting:`storage.journal.enabled: false
    <storage.journal.enabled>` cannot be used in conjunction with
    :setting:`replication.replSetName`.


---
program: conf
name: sharding.clusterRole
type: string
directive: setting
description: |
  The role that the :binary:`~bin.mongod` instance has in the sharded
  cluster. Set this setting to one of the following:

  .. list-table::
     :header-rows: 1
     :widths: 20 40

     * - Value

       - Description

     * - ``configsvr``

       - Start this instance as a :term:`config server`. The instance
         starts on port ``27019`` by default.

     * - ``shardsvr``

       - Start this instance as a :term:`shard`. The instance starts
         on port ``27018`` by default.
post: |
  .. note::

     Setting ``sharding.clusterRole`` requires the :binary:`~bin.mongod`
     instance to be running with replication. To deploy the instance as
     a replica set member, use the :setting:`~replication.replSetName`
     setting and specify the name of the replica set.

  The {{role}} setting is available only for :binary:`~bin.mongod`.
---
program: conf
name: sharding.archiveMovedChunks
type: boolean
directive: setting
inherit:
  name: noMoveParanoia
  program: mongod
  file: options-mongod.yaml
replacement:
   dbpath: ":setting:`storage.dbPath`"
   defaultParanoia: "``false``"
---
program: conf
name: auditLog.destination
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  optionpath: ":setting:`auditLog.path`"
  optionformat: ":setting:`auditLog.format`"
inherit:
  name: auditDestination
  program: mongod
  file: options-mongod.yaml
pre: |
  .. versionadded:: 2.6

  When set, {{role}} enables :doc:`auditing </core/auditing>` and
  specifies where {{program}} sends all audit events.
---
program: conf
name: auditLog.format
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  destination: ":setting:`~auditLog.destination`"
  path:  ":setting:`auditLog.path`"
inherit:
  name: auditFormat
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: auditLog.path
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
  destination: ":setting:`~auditLog.destination`"
inherit:
  name: auditPath
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: auditLog.filter
type: string representation of a document
directive: setting
replacement:
  program: ":binary:`~bin.mongos` or :binary:`~bin.mongod`"
  intro: "The"
inherit:
  name: auditFilter
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: snmp.subagent
type: boolean
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
  intro: "When {{role}} is ``true``, SNMP runs"
inherit:
  name: snmp-subagent
  program: mongod
  file: options-mongod.yaml
post: |
  The {{role}} setting is available only for :binary:`~bin.mongod`.
---
program: conf
name: snmp.master
type: boolean
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
  intro: "When {{role}} is ``true``, SNMP runs"
inherit:
  name: snmp-master
  program: mongod
  file: options-mongod.yaml
post: |
  The {{role}} setting is available only for :binary:`~bin.mongod`.
---
program: conf
name: replication.localPingThresholdMs
type: integer
directive: setting
replacement:
  program: ":binary:`~bin.mongos`"
  intro: "The"
inherit:
  name: localThreshold
  program: mongos
  file: options-mongos.yaml
---
program: conf
name: sharding.configDB
type: string
directive: setting
replacement:
  program: ":binary:`~bin.mongos`"
  intro: "The"
inherit:
  name: configdb
  program: mongos
  file: options-mongos.yaml
---
program: conf
name: storage.wiredTiger.engineConfig.configString
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
inherit:
  name: wiredTigerEngineConfigString
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: storage.wiredTiger.collectionConfig.configString
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
  intro: "The"
inherit:
  name: wiredTigerCollectionConfigString
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: storage.wiredTiger.indexConfig.configString
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
  intro: "The"
inherit:
  name: wiredTigerIndexConfigString
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: storage.wiredTiger.engineConfig.directoryForIndexes
directive: setting
default: "false"
type: "boolean"
replacement:
  program: ":binary:`~bin.mongod`"
  intro: "When {{role}} is ``true``"
  dbpath: ":setting:`storage.dbPath`"
inherit:
  name: wiredTigerDirectoryForIndexes
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: storage.wiredTiger.engineConfig.cacheSizeGB
directive: setting
type: "float"
replacement:
  program: ":binary:`~bin.mongod`"
  intro: "The"
inherit:
  name: wiredTigerCacheSizeGB
  program: mongod
  file: options-mongod.yaml
post: |
  .. include:: /includes/extracts/wt-cache-additional-constraints-mongod-config.rst
---
program: conf
name: storage.wiredTiger.engineConfig.journalCompressor
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
  intro: "The"
inherit:
  name: wiredTigerJournalCompressor
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: storage.wiredTiger.collectionConfig.blockCompressor
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
  intro: "The"
inherit:
  name: wiredTigerCollectionBlockCompressor
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: storage.wiredTiger.indexConfig.prefixCompression
directive: setting
default: "true"
replacement:
  program: ":binary:`~bin.mongod`"
inherit:
  name: wiredTigerIndexPrefixCompression
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: storage.engine
directive: setting
replacement:
  program: ":binary:`~bin.mongod`"
  intro: "The"
  dbpath: ":setting:`storage.dbPath`"
inherit:
  name: storageEngine
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: net.ssl.allowInvalidHostnames
directive: setting
type: boolean
default: false
description: |
  ..deprecated:: 4.2

  Use {{alternative}} instead.

  .. versionadded:: 3.0

  When {{role}} is ``true``, MongoDB disables the validation of the
  hostnames in TLS/SSL certificates, allowing {{program}} to connect to
  MongoDB instances if the hostname their certificates do not match the
  specified hostname.

  .. include:: /includes/extracts/ssl-facts-see-more.rst

replacement:
  program: ":binary:`~bin.mongod`"
  alternative: ":setting:`net.tls.allowInvalidHostnames`"
optional: true

---
program: conf
name: security.enableEncryption
directive: setting
type:  boolean
default:  false
description: |

  .. versionadded:: 3.2

   Enables encryption for the WiredTiger storage engine. You must set
   to ``true`` to pass in encryption keys and configurations.

  .. include:: /includes/fact-enterprise-only-admonition.rst
---
program: conf
name: security.transitionToAuth
directive: setting
type: boolean
default: false
inherit:
  name: transitionToAuth
  program: mongod
  file: options-mongod.yaml
replacement:
  program: ":binary:`~bin.mongod` or :binary:`~bin.mongos`"
  option: ":setting:`security.keyFile`"

---
program: conf
name: security.encryptionCipherMode
directive: setting
type:  string
default:  "``AES256-CBC``"
description: |

   .. versionadded:: 3.2

   The cipher mode to use for encryption at rest:

   .. list-table::
      :header-rows: 1
      :widths: 35 65

      * - Mode
        - Description

      * - ``AES256-CBC``
        - 256-bit Advanced Encryption Standard in Cipher Block Chaining
          Mode

      * - ``AES256-GCM``

        - 256-bit Advanced Encryption Standard in Galois/Counter Mode

          Available only on Linux.

          .. versionchanged:: 4.0

             .. include:: /includes/fact-aes.rst


   .. include:: /includes/fact-enterprise-only-admonition.rst
---
program: conf
name: security.encryptionKeyFile
directive: setting
type:  string
description: |

   .. versionadded:: 3.2

   The path to the local keyfile when managing keys via process *other
   than* KMIP. Only set when managing keys via process other than KMIP.
   If data is already encrypted using KMIP, MongoDB will throw an error.

   Requires :setting:`security.enableEncryption` to be ``true``.

   .. include:: /includes/fact-enterprise-only-admonition.rst

---
program: conf
name: security.kmip.clientCertificateSelector
directive: setting
type:  string
inherit:
  name: kmipClientCertificateSelector
  program: mongod
  file: options-mongod.yaml
replacement:
   file: ":setting:`security.kmip.clientCertificateFile`"
---
program: conf
name: security.kmip.keyIdentifier
directive: setting
type:  string
description: |

   .. versionadded:: 3.2

   Unique KMIP identifier for an existing key within the KMIP server.
   Include to use the key associated with the identifier as the system
   key. You can only use the setting the first time you enable
   encryption for the :binary:`~bin.mongod` instance. Requires
   :setting:`security.enableEncryption` to be true.

   If unspecified, MongoDB will request that the KMIP server create a
   new key to utilize as the system key.

   If the KMIP server cannot locate a key with the specified identifier
   or the data is already encrypted with a key, MongoDB will throw an
   error.

   .. include:: /includes/fact-enterprise-only-admonition.rst

---
program: conf
name: security.kmip.rotateMasterKey
directive: setting
type:  boolean
default:  false
description: |

   .. versionadded:: 3.2

   If true, rotate the master key and re-encrypt the internal
   keystore.

   .. include:: /includes/fact-enterprise-only-admonition.rst

   .. seealso:: :ref:`kmip-master-key-rotation`
---
program: conf
name: security.kmip.serverName
directive: setting
type:  string
description: |

   .. versionadded:: 3.2

   Hostname or IP address of key management solution running a KMIP
   server. Requires :setting:`security.enableEncryption` to be true.

   .. include:: /includes/fact-enterprise-only-admonition.rst
---
program: conf
name: security.kmip.port
directive: setting
type:  string
default:  5696
description: |

   .. versionadded:: 3.2

   Port number the KMIP server is listening on. Requires that a
   :setting:`security.kmip.serverName` be provided. Requires
   :setting:`security.enableEncryption` to be true.

   .. include:: /includes/fact-enterprise-only-admonition.rst
---
program: conf
name: security.kmip.clientCertificateFile
directive: setting
type:  string
description: |

   .. versionadded:: 3.2

   String containing the path to the client certificate used for
   authenticating MongoDB to the KMIP server. Requires that a
   :setting:`security.kmip.serverName` be provided.

   .. note::
      
      Starting in 4.0, on macOS or Windows, you can use a certificate
      from the operating system's secure store instead of a PEM key
      file. See {{selector}}.

   .. include:: /includes/fact-enterprise-only-admonition.rst
replacement:
   selector: ":setting:`security.kmip.clientCertificateSelector`"

---
program: conf
name: security.kmip.clientCertificatePassword
directive: setting
type:  string
description: |

   .. versionadded:: 3.2

   The password to decrypt the client certificate (i.e.
   :setting:`security.kmip.clientCertificateFile`), used to
   authenticate MongoDB to the KMIP server. Use the option only if the
   certificate is encrypted.

   .. include:: /includes/fact-enterprise-only-admonition.rst
---
program: conf
name: security.kmip.serverCAFile
directive: setting
type:  string
description: |

   .. versionadded:: 3.2

   Path to CA File. Used for validating secure client connection to
   KMIP server.
   
   .. note::
      
      Starting in 4.0, on macOS or Windows, you can use a certificate
      from the operating system's secure store instead of a PEM key
      file. See {{selector}}. When using the secure store, you do not
      need to, but can, also specify the {{role}}.
   
   .. include:: /includes/fact-enterprise-only-admonition.rst
replacement:
  selector: ":setting:`security.kmip.clientCertificateSelector`"
---
program: conf
name: replication.enableMajorityReadConcern
directive: setting
inherit:
  name: enableMajorityReadConcern
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: sharding.configsvrMode
type: string
directive: setting
inherit:
  name: configsvrMode
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: storage.inMemory.engineConfig.inMemorySizeGB
type: float
directive: setting
inherit:
  name: inMemorySizeGB
  program: mongod
  file: options-mongod.yaml
---
program: conf
name: security.redactClientLogData
type: boolean
directive: setting
inherit:
  name: redactClientLogData
  program: mongod
  file: options-mongod.yaml
replacement:
  program: ":binary:`~bin.mongod` or :binary:`~bin.mongos`"
---
program: conf
name: security.ldap.servers
type: string
directive: setting
inherit:
  name: ldapServers
  program: mongod
  file: options-mongod.yaml
replacement:
  program: ":binary:`~bin.mongod` or :binary:`~bin.mongos`"
---
program: conf
name: security.ldap.bind.queryUser
type: string
directive: setting
inherit:
  name: ldapQueryUser
  program: mongod
  file: options-mongod.yaml
replacement:
  program: ":binary:`~bin.mongod` or :binary:`~bin.mongos`"
  queryPassword: ":setting:`~security.ldap.bind.queryPassword`"
  bindWithOSDefaults: ":setting:`~security.ldap.bindWithOSDefaults`"
  role: ":setting:`~security.ldap.bind.queryUser`"
  transform: :setting:`security.ldap.userToDNMapping`
---
program: conf
name: security.ldap.bind.queryPassword
type: string
directive: setting
inherit:
  name: ldapQueryPassword
  program: mongod
  file: options-mongod.yaml
replacement:
  program: ":binary:`~bin.mongod` or :binary:`~bin.mongos`"
  queryUser: ":setting:`~security.ldap.bind.queryUser`"
  role: ":setting:`~security.ldap.bind.queryPassword`"
  queryPassword: ":setting:`~security.ldap.bind.queryPassword`"
  bindWithOSDefaults: ":setting:`~security.ldap.bindWithOSDefaults`"

---
program: conf
name: security.ldap.bind.useOSDefaults
type: boolean
directive: setting
inherit:
  name: ldapBindWithOSDefaults
  program: mongod
  file: options-mongod.yaml
replacement:
  program: ":binary:`~bin.mongod` or :binary:`~bin.mongos`"
  queryUser: ":setting:`~security.ldap.bind.queryUser`"
  queryPassword: ":setting:`~security.ldap.bind.queryPassword`"
  role: ":setting:`~security.ldap.bind.useOSDefaults`"
  userMapping: ":setting:`username transformation <security.ldap.userToDNMapping>`"
---
program: conf
name: security.ldap.bind.method
type: string
directive: setting
inherit:
  name: ldapBindMethod
  program: mongod
  file: options-mongod.yaml
replacement:
  program: ":binary:`~bin.mongod` or :binary:`~bin.mongos`"
  queryUser: ":setting:`~security.ldap.queryUser`"
  queryPassword: ":setting:`~security.ldap.queryPassword`"
  role: ":setting:`~security.ldap.bind.method`"
  bindSASLMech: ":setting:`security.ldap.bind.saslMechanisms`"
---
program: conf
name: security.ldap.bind.saslMechanisms
type: string
directive: setting
inherit:
  name: ldapBindSASLMechanisms
  program: mongod
  file: options-mongod.yaml
replacement:
  program: ":binary:`~bin.mongod` or :binary:`~bin.mongos`"
  bindMethod: :setting:`~security.ldap.bind.method`
  useOSDefaults: :setting:`~security.ldap.bind.useOSDefaults`
---
program: conf
name: security.ldap.transportSecurity
type: string
directive: setting
inherit:
  name: ldapTransportSecurity
  program: mongod
  file: options-mongod.yaml
replacement:
  program: ":binary:`~bin.mongod` or :binary:`~bin.mongos`"
  role: ":setting:`~security.ldap.transportSecurity`"
---
program: conf
name: security.ldap.timeoutMS
type: int
directive: setting
inherit:
  name: ldapTimeoutMS
  program: mongod
  file: options-mongod.yaml
replacement:
  program: ":binary:`~bin.mongod` or :binary:`~bin.mongos`"
  role: ":setting:`~security.ldap.timeoutMS`"
---
program: conf
name: security.ldap.userToDNMapping
type: string
directive: setting
inherit:
  name: ldapUserToDNMapping
  program: mongod
  file: options-mongod.yaml
replacement:
  program: ":binary:`~bin.mongod` or :binary:`~bin.mongos`"
  role: ":setting:`~security.ldap.userToDNMapping`"
---
program: conf
name: security.ldap.authz.queryTemplate
type: string
directive: setting
inherit:
  name: ldapAuthzQueryTemplate
  program: mongod
  file: options-mongod.yaml
replacement:
  program: ":binary:`~bin.mongod`"
  mapping: :setting:`~security.ldap.userToDNMapping`
  ldapServers: ":setting:`security.ldap.servers`"

---
program: conf
name: setParameter.ldapUserCacheInvalidationInterval
type: int
directive: setting
default: 30
pre: |
  For use with {{program}} servers using :ref:`security-ldap-external`.

  The interval (in seconds) {{program}} waits
  between external user cache flushes. After {{program}} flushes the external
  user cache, the next operation an LDAP-authorized user, MongoDB
  reacquires authorization data from the LDAP server.

  Increasing the value specified increases the amount of time
  {{program}} and the LDAP server can be out of sync, but reduces the load on
  the LDAP server. Conversely, decreasing the value specified
  decreases the time {{program}} and the LDAP server can be out of sync while
  increasing the load on the LDAP server.
replacement:
  program: ":binary:`~bin.mongod` or :binary:`~bin.mongos`"
---
program: conf
name:  cloud.monitoring.free.state
type: string
directive: setting
inherit:
  name: enableFreeMonitoring
  program: mongod
  file: options-mongod.yaml
post: |

   For the corresponding command-line option, see
   :option:`--enableFreeMonitoring <mongod --enableFreeMonitoring>`.

---
program: conf
name:  cloud.monitoring.free.tag
type: string
directive: setting
inherit:
  name: enableFreeMonitoringTag
  program: mongod
  file: options-mongod.yaml
post: |

   For the corresponding command-line option, see
   :option:`--enableFreeMonitoringTag <mongod --enableFreeMonitoringTag>`.

...
