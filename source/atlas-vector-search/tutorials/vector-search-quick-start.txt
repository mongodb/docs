.. facet::
   :name: programming_language
   :values: csharp, java, javascript/typescript, python, shell, php, go

.. _vector-search-quick-start:

===============================
{+avs+} Quick Start
===============================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :description: Learn how to create and manage an Atlas Vector Search index for vector embeddings and perform vector search on the indexed field.
   :keywords: code example, sample dataset, Node.js, MongoDB Shell, search tester, MongoDB Atlas, C#, Java (Sync), Atlas CLI, Python, JSON, java sync, atlas ui, node.js, php, go

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This quick start describes how to load sample documents that contain
vector embeddings into an |service| {+cluster+} or local |service| deployment,
create an {+avs+} index on those embeddings, and then perform
semantic search to return documents that are similar to your query.

*Time required: 15 minutes*

Create a Vector Search Index
----------------------------

In this section, you create an {+avs+} index on sample data
that you load into an |service| {+cluster+} or a
deployment hosted on your local computer:

.. tabs::

   .. tab:: {+service+} {+Cluster+}
      :tabid: cloud

      .. include:: /includes/steps-avs-quick-start-create-index-atlas.rst

   .. tab:: Local Deployment
      :tabid: local

      .. include:: /includes/steps-avs-quick-start-create-index-local.rst

Run a Vector Search Query
--------------------------

In this section, you run a sample vector search query
on your indexed embeddings.

----------

.. |arrow| unicode:: U+27A4

|arrow| To set the client you use to run the examples in this section, use
the **Select your language** drop-down menu in the right navigation pane of
this page.

----------

.. tabs-selector:: drivers

.. tabs-drivers::

   .. tab::
      :tabid: atlas-ui

      .. include:: /includes/steps-avs-quick-start-run-query-atlas-ui.rst

   .. tab::
      :tabid: shell

      .. include:: /includes/steps-avs-quick-start-run-queries-mongosh.rst

   .. tab::
      :tabid: csharp

      .. include:: /includes/steps-avs-quick-start-run-queries-csharp.rst

   .. tab::
      :tabid: go

      .. include:: /includes/steps-avs-quick-start-run-queries-go.rst

   .. tab::
      :tabid: java-sync

      .. include:: /includes/steps-avs-quick-start-run-queries-java.rst

   .. tab::
      :tabid: nodejs

      .. include:: /includes/steps-avs-quick-start-run-queries-nodejs.rst

   .. tab::
      :tabid: php

      .. include:: /includes/steps-avs-quick-start-run-queries-php.rst

   .. tab::
      :tabid: python

      .. include:: /includes/steps-avs-quick-start-run-queries-python.rst


Learning Summary
----------------

This quick start focused on retrieving documents from your |service| cluster
that contain text that is semantically related to a provided query. However,
you can create a vector search index on embeddings that represent any type of
data that you might write to an |service| {+cluster+}, such as images or videos.

.. _vector-search-quickstart-sample-data:

Sample Data
~~~~~~~~~~~

This quick start uses the ``sample_mflix.embedded_movies`` collection which
contains details about movies. In each document in the collection, the
``plot_embedding`` field contains a vector embedding that represents the string
in the ``plot`` field. For more information on the schema of the documents in
the collection, see :ref:`Sample Mflix Dataset <mflix-embedded_movies>`.

By storing your source data and its corresponding vector embeddings in the
same document, you can leverage both fields for complex queries or
:ref:`hybrid search <avs-reciprocal-rank-fusion>`. You can even store vector
embeddings generated from different :ref:`embedding models <avs-key-concepts>`
in the same document to streamline your workflow as you test the performance
of different vector embedding models for your specific use case.

Vector Embeddings
~~~~~~~~~~~~~~~~~~

The vector embeddings in the ``sample_mflix.embedded_movies`` collection
and in the example query were created using the OpenAI ``text-embedding-ada-002``
embedding model. Your choice of embedding model informs the vector dimensions
and vector similarity function you use in your vector search index. You can use
any :ref:`embedding model <avs-key-concepts>` you like, and it is worth
experimenting with different models as accuracy can vary from model to model
depending on your specific use case.

To learn how to create vector embeddings of your own data, see
:ref:`How to Create Vector Embeddings <create-vector-embeddings>`.

.. _vector-search-quickstart-vector-index-definition:

Vector Index Definition
~~~~~~~~~~~~~~~~~~~~~~~~

An `index <https://www.mongodb.com/docs/manual/indexes/>`__ is a data structure
that holds a subset of data from a collection's documents that improves database
performance for specific queries. A :ref:`vector search index <avs-types-vector-search>`
points to the fields that contain your vector embeddings and includes the
dimensions of your vectors as well as the function used to measure similarity
between vectors of queries and vectors stored in the database.

Because the ``text-embedding-ada-002`` embedding model used in this quick start
converts data into vector embeddings with 1536 dimensions and supports the
``cosine`` function, this vector search index specifies the same number of
vector dimensions and similarity function.

Vector Search Query
~~~~~~~~~~~~~~~~~~~~

The query you ran in this quick start is an `aggregation pipeline <https://www.mongodb.com/docs/manual/core/aggregation-pipeline>`__,
in which the ``$vectorSearch`` stage performs an :ref:`Approximate Nearest Neighbor (ANN) <vectorSearch-ann>`
search followed by a ``$project`` stage that refines the results.
To see all the options for a vector search query, including using :ref:`Exact Nearest Neighbor (ENN) <vectorSearch-enn>` or how
to narrow the scope of your vector search with the ``filter`` option,
see :ref:`Run Vector Search Queries <return-vector-search-results>`.

Next Steps
-----------

- To create embeddings of your own data and load them into |service|, see :ref:`Create Embeddings <create-vector-embeddings>`.
- To leverage {+avs+} in your generative AI and |rag| applications, see :ref:`ai-integrations`.
- To build production ready AI chatbots using {+avs+}, see the `MongoDB Chatbot Framework <https://mongodb.github.io/chatbot/>`__.
- To learn how implement |rag| without the need for |api| keys or credits, see :ref:`local-rag`.
