.. _reduce-document-size-anti-pattern:

==================================
Reduce the Size of Large Documents
==================================

.. meta::
   :description: Optimize performance by restructuring your schema to reduce document size, using references to additional collections, and hosting images externally.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

Storing large documents in your database can lead to excessive RAM and 
bandwidth usage. MongoDB keeps frequently accessed data, referred to as 
the :manual:`working set </reference/glossary/#term-working-set>`, in 
RAM. When the working set grows beyond the RAM allotment, performance 
is degraded as data must be retrieved from disk instead.

If your most frequent queries are for documents that contain much more 
information than you need for that query, consider restructuring your 
schema with smaller documents using 
:manual:`references </core/data-model-design/#data-modeling-referencing>` 
to additional collections. By breaking up your data into more 
collections and using smaller documents for frequently accessed data, 
you reduce the overall size of the working set and improve performance.

.. note::

   Your hardware configuration can affect the size of documents that 
   your system can support. The 
   :limit:`BSON Document Size` limit is 16 megabytes.

Example
-------

Consider a movie catalog website that displays a list of the 50 
most recently released movie titles and their poster images on the home 
page. From the home page, a user can click on a movie to see 
additional details.

The website stores information about movies in a ``movies`` collection. 
Each movie document contains all of the information available for that 
movie:

.. code-block:: javascript
   :copyable: false

   // movies collection

   {
       "_id": 123,
       "title": "2001: A Space Odyssey",
       "poster": <url>,
       "director": "Stanley Kubrick",
       "release_year": 1968,
       "box_office_usd": 146000000,
       "countries_released": [
           "United States",
           ...
       ],
       "cast": [
           "Keir Dullea",
           ...
       ],
       "crew": [
            "Ray Lovejoy",
            ...
       ],
       ...

   }

.. note::
    
   Whenever possible, you should host images outside of your MongoDB 
   deployment and reference them with URLs. If you store images in 
   your database, you are much more likely to reach the document size 
   limit.

In this example, the most frequent query the website performs is to 
find the 50 most recent movies' ``title`` and ``poster``. Instead of 
querying for all movie information, consider breaking up the ``movie`` 
collection into two separate collections, ``movies`` and 
``movie_metadata``. The collections are linked with the ``_id`` of 
``movie`` documents:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 4

   // movies collection

   {
       "_id": 123,
       "title": "2001: A Space Odyssey",
       "poster": <url>
   }

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 5 

   // movie_metadata collection

   {
       "_id": <object_id>,
       "movie_id": 123, // reference to a movies document
       "director": "Stanley Kubrick",
       "release_year": 1968,
       "box_office_usd": 146000000,
       "countries_released": [
           "United States",
           ...
       ],
       "cast": [
           "Keir Dullea",
           ...
       ],
       "crew": [
            "Ray Lovejoy",
            ...
       ],
       ...

   }

This way, when the website queries for the 50 most recent movies 
and their posters, it only loads information that it needs. If a user 
clicks on a movie, the site performs another query to find the 
``movie_metadata`` document associated with that movie. This new schema 
is more performant than the original because the most frequent query 
returns much smaller documents.

Consider your use case, especially the operations you most frequently 
perform, and design a schema that efficiently uses your working set.

Learn More
----------

- To learn more about Data Modeling in MongoDB and the flexible schema
  model, see :manual:`Data Modeling Introduction
  </core/data-modeling-introduction/>`.

- To learn more about using references to model your schema, see 
  :manual:`Model One-to-Many Relationships with Document References </tutorial/model-referenced-one-to-many-relationships-between-documents/>`.

- MongoDB also offers a free MongoDB University Course on Data Modeling:
  `Data Modeling for MongoDB <https://learn.mongodb.com/learning-paths/data-modeling-for-mongodb>`__


Design Patterns
~~~~~~~~~~~~~~~

.. include:: /includes/fact-document-size-design-patterns.rst

MongoDB.live 2020 Presentations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-mongodb-live-2020-data-model-methodology.rst
