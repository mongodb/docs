.. meta::
   :robots: noindex, nosnippet


.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol



Class User
^^^^^^^^^^

.. _io_realm_mongodb_User:



io.realm.mongodb
================


 | `java.lang.Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ 
 | 		io.realm.mongodb.User


A *user* holds the user's meta data and tokens for accessing Realm App functionality.The user is used to configure Synchronized Realms and gives access to calling Realm App *Functions* through :ref:`Functions <io_realm_mongodb_functions_Functions>`  and accessing remote Realm App 

*Mongo Databases* through a :ref:`MongoClient <io_realm_mongodb_mongo_MongoClient>` .






.. seealso::


   
   - :ref:`App.login(Credentials) <io_realm_mongodb_App_login_Credentials_>` 
      
      
      
   - **io.realm.mongodb.sync.SyncConfiguration.Builder.Builder(User, String)**
      
      
      
   
   
   



Nested Class Summary
====================

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Class and Description
   
   * - ``public static final`` 
     - :ref:`User.State <io_realm_mongodb_User_State>` 
       
   
   


Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public **boolean**
     - | :ref:`equals <io_realm_mongodb_User_equals>` (
       |  `Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__  o
       | )
       
       
       Two Users are considered equal if they have the same user identity and are associated with the same app.
       
       
       
   
   * - public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ 
     - | :ref:`getAccessToken <io_realm_mongodb_User_getAccessToken>` ()
       | 
       
       
       Returns the current access token for the user.
       
       
       
   
   * - public synchronized :ref:`ApiKeyAuth <io_realm_mongodb_auth_ApiKeyAuth>` 
     - | :ref:`getApiKeys <io_realm_mongodb_User_getApiKeys>` ()
       | 
       
       
       Returns a wrapper for managing API keys controlled by the current user.
       
       
       
   
   * - public :ref:`App <io_realm_mongodb_App>` 
     - | :ref:`getApp <io_realm_mongodb_User_getApp>` ()
       | 
       
       
       Returns the :ref:`App <io_realm_mongodb_App>`  this user is associated with.
       
       
       
       
       
   
   * - public **Document**
     - | :ref:`getCustomData <io_realm_mongodb_User_getCustomData>` ()
       | 
       
       
       Return the custom user data associated with the user in the Realm App.
       
       
       
   
   * - public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ 
     - | :ref:`getDeviceId <io_realm_mongodb_User_getDeviceId>` ()
       | 
       
       
       Returns a unique identifier for the device the user logged in to.
       
       
       
   
   * - public :ref:`Functions <io_realm_mongodb_functions_Functions>` 
     - | :ref:`getFunctions <io_realm_mongodb_User_getFunctions>` (
       |  **CodecRegistry** codecRegistry
       | )
       
       
       Returns a *functions* manager for invoking Realm Functions with custom codec registry for encoding and decoding arguments and results.
       
       
       
   
   * - public synchronized :ref:`Functions <io_realm_mongodb_functions_Functions>` 
     - | :ref:`getFunctions <io_realm_mongodb_User_getFunctions>` ()
       | 
       
       
       Returns a *functions* manager for invoking MongoDB Realm Functions.
       
       
       
   
   * - public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ 
     - | :ref:`getId <io_realm_mongodb_User_getId>` ()
       | 
       
       
       Returns the server id of the user.
       
       
       
   
   * - public `List <https://docs.oracle.com/javase/7/docs/api/java/util/List.html>`__ 
     - | :ref:`getIdentities <io_realm_mongodb_User_getIdentities>` ()
       | 
       
       
       Returns a new list of the user's identities.
       
       
       
   
   * - public synchronized :ref:`MongoClient <io_realm_mongodb_mongo_MongoClient>` 
     - | :ref:`getMongoClient <io_realm_mongodb_User_getMongoClient>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  serviceName
       | )
       
       
       Returns a :ref:`MongoClient <io_realm_mongodb_mongo_MongoClient>`  instance for accessing documents in the database.
       
       
       
       
       
   
   * - public :ref:`UserProfile <io_realm_mongodb_UserProfile>` 
     - | :ref:`getProfile <io_realm_mongodb_User_getProfile>` ()
       | 
       
       
       Returns the profile for this user.
       
       
       
   
   * - public :ref:`Credentials.Provider <io_realm_mongodb_Credentials_Provider>` 
     - | :ref:`getProviderType <io_realm_mongodb_User_getProviderType>` ()
       | 
       
       
       Returns the provider type used to log the user
       
       
       
   
   * - public synchronized :ref:`Push <io_realm_mongodb_push_Push>` 
     - | :ref:`getPush <io_realm_mongodb_User_getPush>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  serviceName
       | )
       
       
       Returns the :ref:`Push <io_realm_mongodb_push_Push>`  instance for managing push notification registrations.
       
       
       
       
       
   
   * - public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ 
     - | :ref:`getRefreshToken <io_realm_mongodb_User_getRefreshToken>` ()
       | 
       
       
       Returns the current refresh token for the user.
       
       
       
   
   * - public :ref:`User.State <io_realm_mongodb_User_State>` 
     - | :ref:`getState <io_realm_mongodb_User_getState>` ()
       | 
       
       
       Returns the :ref:`State <io_realm_mongodb_User_State>`  the user is in.
       
       
       
       
       
   
   * - public **int**
     - | :ref:`hashCode <io_realm_mongodb_User_hashCode>` ()
       | 
       
       
       
       
       
       
   
   * - public **boolean**
     - | :ref:`isLoggedIn <io_realm_mongodb_User_isLoggedIn>` ()
       | 
       
       
       Returns true if the user is currently logged in.
       
       
       
   
   * - public :ref:`User <io_realm_mongodb_User>` 
     - | :ref:`linkCredentials <io_realm_mongodb_User_linkCredentials>` (
       |  :ref:`Credentials <io_realm_mongodb_Credentials>`  credentials
       | )
       
       
       Links the current user with a new user identity represented by the given credentials.
       
       
       
   
   * - public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>` 
     - | :ref:`linkCredentialsAsync <io_realm_mongodb_User_linkCredentialsAsync>` (
       |  :ref:`Credentials <io_realm_mongodb_Credentials>`  credentials, 
       |  :ref:`io.realm.mongodb.App.Callback\<io.realm.mongodb.User> <io_realm_mongodb_App_Callback>`  callback
       | )
       
       
       Links the current user with a new user identity represented by the given credentials.
       
       
       
   
   * - public **void**
     - | :ref:`logOut <io_realm_mongodb_User_logOut>` ()
       | 
       
       
       Log the user out of the Realm App.
       
       
       
   
   * - public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>` 
     - | :ref:`logOutAsync <io_realm_mongodb_User_logOutAsync>` (
       |  :ref:`io.realm.mongodb.App.Callback\<io.realm.mongodb.User> <io_realm_mongodb_App_Callback>`  callback
       | )
       
       
       Log the user out of the Realm App asynchronously.
       
       
       
   
   * - public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>` 
     - | :ref:`refreshCustomData <io_realm_mongodb_User_refreshCustomData>` (
       |  :ref:`io.realm.mongodb.App.Callback\<Document> <io_realm_mongodb_App_Callback>`  callback
       | )
       
       
       Re-fetch custom user data from the Realm App asynchronously.
       
       
       
   
   * - public **Document**
     - | :ref:`refreshCustomData <io_realm_mongodb_User_refreshCustomData>` ()
       | 
       
       
       Re-fetch custom user data from the Realm App.
       
       
       
   
   * - public :ref:`User <io_realm_mongodb_User>` 
     - | :ref:`remove <io_realm_mongodb_User_remove>` ()
       | 
       
       
       Calling this will remove the user and any Realms the user has from the device.
       
       
       
   
   * - public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>` 
     - | :ref:`removeAsync <io_realm_mongodb_User_removeAsync>` (
       |  :ref:`io.realm.mongodb.App.Callback\<io.realm.mongodb.User> <io_realm_mongodb_App_Callback>`  callback
       | )
       
       
       Calling this will asynchronously remove the user and any Realms the user has from the device.
       
       
       
   
   


Inherited Methods
=================



- Methods inherited from class `java.lang.Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ : ``getClass`` , ``hashCode`` , ``equals`` , ``clone`` , ``toString`` , ``notify`` , ``notifyAll`` , ``wait`` , ``wait`` , ``wait`` , ``finalize`` 




Method Detail
=============

.. _equals:

.. _equals__:

.. _User_equals:

.. _User_equals__:

.. _io_realm_mongodb_User_equals:

.. _io_realm_mongodb_User_equals__:



equals
------

.. _io_realm_mongodb_User_equals_java_lang_Object_:

.. _io_realm_mongodb_User_equals_Object_:

.. _equals_java_lang_Object_:

.. _equals_Object_:

.. _User_equals_java_lang_Object_:

.. _User_equals_Object_:

.. list-table::
   :header-rows: 1
   
   * - | public **boolean** :ref:`equals <io_realm_mongodb_User_equals>` (
       |  `Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__  o
       | )
       
       
       
   
   * - Two Users are considered equal if they have the same user identity and are associated with the same app.
       
       
       
       
       
       
       
       
       
       
       **Overrides**
       
       ``equals`` in class `Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ 
       
       
   
   


.. _getAccessToken:

.. _getAccessToken__:

.. _User_getAccessToken:

.. _User_getAccessToken__:

.. _io_realm_mongodb_User_getAccessToken:

.. _io_realm_mongodb_User_getAccessToken__:



getAccessToken
--------------

.. list-table::
   :header-rows: 1
   
   * - | public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  :ref:`getAccessToken <io_realm_mongodb_User_getAccessToken>` ()
       | 
       
       
       
   
   * - Returns the current access token for the user.
       
       
       
       
       
       
       **Returns**
       
       the current access token.
       
       
       
       
       
       
       
   
   


.. _getApiKeys:

.. _getApiKeys__:

.. _User_getApiKeys:

.. _User_getApiKeys__:

.. _io_realm_mongodb_User_getApiKeys:

.. _io_realm_mongodb_User_getApiKeys__:



getApiKeys
----------

.. list-table::
   :header-rows: 1
   
   * - | public synchronized :ref:`ApiKeyAuth <io_realm_mongodb_auth_ApiKeyAuth>`  :ref:`getApiKeys <io_realm_mongodb_User_getApiKeys>` ()
       | 
       
       
       
   
   * - Returns a wrapper for managing API keys controlled by the current user.
       
       
       
       
       
       
       **Returns**
       
       wrapper for managing API keys controlled by the current user.
       
       
       
       
       **Throws**
       
       - `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if no user is currently logged in.
          
          
          
       
       
       
       
       
   
   


.. _getApp:

.. _getApp__:

.. _User_getApp:

.. _User_getApp__:

.. _io_realm_mongodb_User_getApp:

.. _io_realm_mongodb_User_getApp__:



getApp
------

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`App <io_realm_mongodb_App>`  :ref:`getApp <io_realm_mongodb_User_getApp>` ()
       | 
       
       
       
   
   * - Returns the :ref:`App <io_realm_mongodb_App>`  this user is associated with.
       
       
       
       
       
       
       
       
       **Returns**
       
       the :ref:`App <io_realm_mongodb_App>`  this user is associated with.
       
       
       
       
       
       
       
       
       
   
   


.. _getCustomData:

.. _getCustomData__:

.. _User_getCustomData:

.. _User_getCustomData__:

.. _io_realm_mongodb_User_getCustomData:

.. _io_realm_mongodb_User_getCustomData__:



getCustomData
-------------

.. list-table::
   :header-rows: 1
   
   * - | public **Document** :ref:`getCustomData <io_realm_mongodb_User_getCustomData>` ()
       | 
       
       
       
   
   * - Return the custom user data associated with the user in the Realm App.The data is only refreshed when the user's access token is refreshed or when explicitly calling :ref:`refreshCustomData() <io_realm_mongodb_User_refreshCustomData__>` .
       
       
       
       
       
       
       
       
       
       
       **Returns**
       
       The custom user data associated with the user.
       
       
       
       
       
       
       
   
   


.. _getDeviceId:

.. _getDeviceId__:

.. _User_getDeviceId:

.. _User_getDeviceId__:

.. _io_realm_mongodb_User_getDeviceId:

.. _io_realm_mongodb_User_getDeviceId__:



getDeviceId
-----------

.. list-table::
   :header-rows: 1
   
   * - | public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  :ref:`getDeviceId <io_realm_mongodb_User_getDeviceId>` ()
       | 
       
       
       
   
   * - Returns a unique identifier for the device the user logged in to.
       
       
       
       
       
       
       **Returns**
       
       a unique device identifier for the user.
       
       
       
       
       
       
       
   
   


.. _getFunctions:

.. _getFunctions__:

.. _User_getFunctions:

.. _User_getFunctions__:

.. _io_realm_mongodb_User_getFunctions:

.. _io_realm_mongodb_User_getFunctions__:



getFunctions
------------

.. _io_realm_mongodb_User_getFunctions_CodecRegistry_:

.. _getFunctions_CodecRegistry_:

.. _User_getFunctions_CodecRegistry_:

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`Functions <io_realm_mongodb_functions_Functions>`  :ref:`getFunctions <io_realm_mongodb_User_getFunctions>` (
       |  **CodecRegistry** codecRegistry
       | )
       
       
       
   
   * - Returns a *functions* manager for invoking Realm Functions with custom codec registry for encoding and decoding arguments and results.
       
       
       
       
       **Parameters**
       
       - ``codecRegistry`` - The codec registry to use for encoding and decoding arguments and results towards the remote Realm App.
          
          
          
       
       
       
       
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`Functions <io_realm_mongodb_functions_Functions>` 
             
             
             
          
          
          
       
       
   
   
.. list-table::
   :header-rows: 1
   
   * - | public synchronized :ref:`Functions <io_realm_mongodb_functions_Functions>`  :ref:`getFunctions <io_realm_mongodb_User_getFunctions>` ()
       | 
       
       
       
   
   * - Returns a *functions* manager for invoking MongoDB Realm Functions.This will use the associated app's default codec registry to encode and decode arguments and results.
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`Functions <io_realm_mongodb_functions_Functions>` 
             
             
             
          
          
          
       
       
   
   


.. _getId:

.. _getId__:

.. _User_getId:

.. _User_getId__:

.. _io_realm_mongodb_User_getId:

.. _io_realm_mongodb_User_getId__:



getId
-----

.. list-table::
   :header-rows: 1
   
   * - | public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  :ref:`getId <io_realm_mongodb_User_getId>` ()
       | 
       
       
       
   
   * - Returns the server id of the user.
       
       
       
       
       
       
       **Returns**
       
       the server id of the user.
       
       
       
       
       
       
       
   
   


.. _getIdentities:

.. _getIdentities__:

.. _User_getIdentities:

.. _User_getIdentities__:

.. _io_realm_mongodb_User_getIdentities:

.. _io_realm_mongodb_User_getIdentities__:



getIdentities
-------------

.. list-table::
   :header-rows: 1
   
   * - | public `List <https://docs.oracle.com/javase/7/docs/api/java/util/List.html>`__  :ref:`getIdentities <io_realm_mongodb_User_getIdentities>` ()
       | 
       
       
       
   
   * - Returns a new list of the user's identities.
       
       
       
       
       
       
       **Returns**
       
       the list of identities.
       
       
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`UserIdentity <io_realm_mongodb_UserIdentity>` 
             
             
             
          
          
          
       
       
   
   


.. _getMongoClient:

.. _getMongoClient__:

.. _User_getMongoClient:

.. _User_getMongoClient__:

.. _io_realm_mongodb_User_getMongoClient:

.. _io_realm_mongodb_User_getMongoClient__:



getMongoClient
--------------

.. _io_realm_mongodb_User_getMongoClient_java_lang_String_:

.. _io_realm_mongodb_User_getMongoClient_String_:

.. _getMongoClient_java_lang_String_:

.. _getMongoClient_String_:

.. _User_getMongoClient_java_lang_String_:

.. _User_getMongoClient_String_:

.. list-table::
   :header-rows: 1
   
   * - | public synchronized :ref:`MongoClient <io_realm_mongodb_mongo_MongoClient>`  :ref:`getMongoClient <io_realm_mongodb_User_getMongoClient>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  serviceName
       | )
       
       
       
   
   * - Returns a :ref:`MongoClient <io_realm_mongodb_mongo_MongoClient>`  instance for accessing documents in the database.
       
       
       
       
       
       
       **Parameters**
       
       - ``serviceName`` - the service name used to connect to the server.
          
          
          
       
       
       
       
       
       
       
       
       
   
   


.. _getProfile:

.. _getProfile__:

.. _User_getProfile:

.. _User_getProfile__:

.. _io_realm_mongodb_User_getProfile:

.. _io_realm_mongodb_User_getProfile__:



getProfile
----------

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`UserProfile <io_realm_mongodb_UserProfile>`  :ref:`getProfile <io_realm_mongodb_User_getProfile>` ()
       | 
       
       
       
   
   * - Returns the profile for this user.
       
       
       
       
       
       
       **Returns**
       
       the profile for this user
       
       
       
       
       
       
       
   
   


.. _getProviderType:

.. _getProviderType__:

.. _User_getProviderType:

.. _User_getProviderType__:

.. _io_realm_mongodb_User_getProviderType:

.. _io_realm_mongodb_User_getProviderType__:



getProviderType
---------------

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`Credentials.Provider <io_realm_mongodb_Credentials_Provider>`  :ref:`getProviderType <io_realm_mongodb_User_getProviderType>` ()
       | 
       
       
       
   
   * - Returns the provider type used to log the user
       
       
       
       
       
       
       **Returns**
       
       the provider type of the user
       
       
       
       
       
       
       
   
   


.. _getPush:

.. _getPush__:

.. _User_getPush:

.. _User_getPush__:

.. _io_realm_mongodb_User_getPush:

.. _io_realm_mongodb_User_getPush__:



getPush
-------

.. _io_realm_mongodb_User_getPush_java_lang_String_:

.. _io_realm_mongodb_User_getPush_String_:

.. _getPush_java_lang_String_:

.. _getPush_String_:

.. _User_getPush_java_lang_String_:

.. _User_getPush_String_:

.. list-table::
   :header-rows: 1
   
   * - | public synchronized :ref:`Push <io_realm_mongodb_push_Push>`  :ref:`getPush <io_realm_mongodb_User_getPush>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  serviceName
       | )
       
       
       
   
   * - Returns the :ref:`Push <io_realm_mongodb_push_Push>`  instance for managing push notification registrations.
       
       
       
       
       
       
       **Parameters**
       
       - ``serviceName`` - the service name used to connect to the server.
          
          
          
       
       
       
       
       
       
       
       
       
   
   


.. _getRefreshToken:

.. _getRefreshToken__:

.. _User_getRefreshToken:

.. _User_getRefreshToken__:

.. _io_realm_mongodb_User_getRefreshToken:

.. _io_realm_mongodb_User_getRefreshToken__:



getRefreshToken
---------------

.. list-table::
   :header-rows: 1
   
   * - | public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  :ref:`getRefreshToken <io_realm_mongodb_User_getRefreshToken>` ()
       | 
       
       
       
   
   * - Returns the current refresh token for the user.
       
       
       
       
       
       
       **Returns**
       
       the current refresh token.
       
       
       
       
       
       
       
   
   


.. _getState:

.. _getState__:

.. _User_getState:

.. _User_getState__:

.. _io_realm_mongodb_User_getState:

.. _io_realm_mongodb_User_getState__:



getState
--------

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`User.State <io_realm_mongodb_User_State>`  :ref:`getState <io_realm_mongodb_User_getState>` ()
       | 
       
       
       
   
   * - Returns the :ref:`State <io_realm_mongodb_User_State>`  the user is in.
       
       
       
       
       
       
       
       
       **Returns**
       
       the :ref:`State <io_realm_mongodb_User_State>`  of the user.
       
       
       
       
       
       
       
       
       
   
   


.. _hashCode:

.. _hashCode__:

.. _User_hashCode:

.. _User_hashCode__:

.. _io_realm_mongodb_User_hashCode:

.. _io_realm_mongodb_User_hashCode__:



hashCode
--------

.. list-table::
   :header-rows: 1
   
   * - | public **int** :ref:`hashCode <io_realm_mongodb_User_hashCode>` ()
       | 
       
       
       
   
   * - 
       
       
       
       
       
       
       
       
       
       
       **Overrides**
       
       ``hashCode`` in class `Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ 
       
       
   
   


.. _isLoggedIn:

.. _isLoggedIn__:

.. _User_isLoggedIn:

.. _User_isLoggedIn__:

.. _io_realm_mongodb_User_isLoggedIn:

.. _io_realm_mongodb_User_isLoggedIn__:



isLoggedIn
----------

.. list-table::
   :header-rows: 1
   
   * - | public **boolean** :ref:`isLoggedIn <io_realm_mongodb_User_isLoggedIn>` ()
       | 
       
       
       
   
   * - Returns true if the user is currently logged in. Returns whether or not this user is still logged into the MongoDB Realm App.
       
       
       
       
       
       
       **Returns**
       
       ``true``  if still logged in, ``false``  if not.
       
       
       
       
       
       
       
       
       
   
   


.. _linkCredentials:

.. _linkCredentials__:

.. _User_linkCredentials:

.. _User_linkCredentials__:

.. _io_realm_mongodb_User_linkCredentials:

.. _io_realm_mongodb_User_linkCredentials__:



linkCredentials
---------------

.. _io_realm_mongodb_User_linkCredentials_io_realm_mongodb_Credentials_:

.. _io_realm_mongodb_User_linkCredentials_Credentials_:

.. _linkCredentials_io_realm_mongodb_Credentials_:

.. _linkCredentials_Credentials_:

.. _User_linkCredentials_io_realm_mongodb_Credentials_:

.. _User_linkCredentials_Credentials_:

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`User <io_realm_mongodb_User>`  :ref:`linkCredentials <io_realm_mongodb_User_linkCredentials>` (
       |  :ref:`Credentials <io_realm_mongodb_Credentials>`  credentials
       | )
       
       
       
   
   * - Links the current user with a new user identity represented by the given credentials.Linking a user with more credentials, mean the user can login either of these credentials. It also makes it possible to "upgrade" an anonymous user by linking it with e.g. Email/Password credentials.
       
        
       
       .. code-block:: java
       
          
           // Example
           App app = new App("app-id")
           User user = app.login(Credentials.anonymous());
           user.linkCredentials(Credentials.emailPassword("email", "password"));
           
       
       
        
       
       Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials must not have been used by another user.
       
       
       
       
       
       
       **Parameters**
       
       - ``credentials`` - the credentials to link with the current user.
          
          
          
       
       
       
       
       **Returns**
       
       the :ref:`User <io_realm_mongodb_User>`  the credentials were linked to.
       
       
       
       
       
       
       **Throws**
       
       - `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if no user is currently logged in.
          
          
          
       
       
       
       
       
   
   


.. _linkCredentialsAsync:

.. _linkCredentialsAsync__:

.. _User_linkCredentialsAsync:

.. _User_linkCredentialsAsync__:

.. _io_realm_mongodb_User_linkCredentialsAsync:

.. _io_realm_mongodb_User_linkCredentialsAsync__:



linkCredentialsAsync
--------------------

.. _io_realm_mongodb_User_linkCredentialsAsync_io_realm_mongodb_Credentials_io_realm_mongodb_App_Callback_:

.. _io_realm_mongodb_User_linkCredentialsAsync_io_realm_mongodb_Credentials__io_realm_mongodb_App_Callback_:

.. _io_realm_mongodb_User_linkCredentialsAsync_io_realm_mongodb_Credentials_Callback_:

.. _io_realm_mongodb_User_linkCredentialsAsync_io_realm_mongodb_Credentials__Callback_:

.. _io_realm_mongodb_User_linkCredentialsAsync_io_realm_mongodb_Credentials_App_Callback_:

.. _io_realm_mongodb_User_linkCredentialsAsync_io_realm_mongodb_Credentials__App_Callback_:

.. _io_realm_mongodb_User_linkCredentialsAsync_Credentials_io_realm_mongodb_App_Callback_:

.. _io_realm_mongodb_User_linkCredentialsAsync_Credentials__io_realm_mongodb_App_Callback_:

.. _io_realm_mongodb_User_linkCredentialsAsync_Credentials_Callback_:

.. _io_realm_mongodb_User_linkCredentialsAsync_Credentials__Callback_:

.. _io_realm_mongodb_User_linkCredentialsAsync_Credentials_App_Callback_:

.. _io_realm_mongodb_User_linkCredentialsAsync_Credentials__App_Callback_:

.. _linkCredentialsAsync_io_realm_mongodb_Credentials_io_realm_mongodb_App_Callback_:

.. _linkCredentialsAsync_io_realm_mongodb_Credentials__io_realm_mongodb_App_Callback_:

.. _linkCredentialsAsync_io_realm_mongodb_Credentials_Callback_:

.. _linkCredentialsAsync_io_realm_mongodb_Credentials__Callback_:

.. _linkCredentialsAsync_io_realm_mongodb_Credentials_App_Callback_:

.. _linkCredentialsAsync_io_realm_mongodb_Credentials__App_Callback_:

.. _linkCredentialsAsync_Credentials_io_realm_mongodb_App_Callback_:

.. _linkCredentialsAsync_Credentials__io_realm_mongodb_App_Callback_:

.. _linkCredentialsAsync_Credentials_Callback_:

.. _linkCredentialsAsync_Credentials__Callback_:

.. _linkCredentialsAsync_Credentials_App_Callback_:

.. _linkCredentialsAsync_Credentials__App_Callback_:

.. _User_linkCredentialsAsync_io_realm_mongodb_Credentials_io_realm_mongodb_App_Callback_:

.. _User_linkCredentialsAsync_io_realm_mongodb_Credentials__io_realm_mongodb_App_Callback_:

.. _User_linkCredentialsAsync_io_realm_mongodb_Credentials_Callback_:

.. _User_linkCredentialsAsync_io_realm_mongodb_Credentials__Callback_:

.. _User_linkCredentialsAsync_io_realm_mongodb_Credentials_App_Callback_:

.. _User_linkCredentialsAsync_io_realm_mongodb_Credentials__App_Callback_:

.. _User_linkCredentialsAsync_Credentials_io_realm_mongodb_App_Callback_:

.. _User_linkCredentialsAsync_Credentials__io_realm_mongodb_App_Callback_:

.. _User_linkCredentialsAsync_Credentials_Callback_:

.. _User_linkCredentialsAsync_Credentials__Callback_:

.. _User_linkCredentialsAsync_Credentials_App_Callback_:

.. _User_linkCredentialsAsync_Credentials__App_Callback_:

.. _io_realm_mongodb_User_linkCredentialsAsync_Credentials__App_Callback_User__:

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>`  :ref:`linkCredentialsAsync <io_realm_mongodb_User_linkCredentialsAsync>` (
       |  :ref:`Credentials <io_realm_mongodb_Credentials>`  credentials, 
       |  :ref:`io.realm.mongodb.App.Callback\<io.realm.mongodb.User> <io_realm_mongodb_App_Callback>`  callback
       | )
       
       
       
   
   * - Links the current user with a new user identity represented by the given credentials.Linking a user with more credentials, mean the user can login either of these credentials. It also makes it possible to "upgrade" an anonymous user by linking it with e.g. Email/Password credentials.
       
        
       
       .. code-block:: java
       
          
           // Example
           App app = new App("app-id")
           User user = app.login(Credentials.anonymous());
           user.linkCredentials(Credentials.emailPassword("email", "password"));
           
       
       
        
       
       Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials must not have been used by another user.
       
       
       
       
       
       
       **Parameters**
       
       - ``credentials`` - the credentials to link with the current user.
          
          
          
       - ``callback`` - callback when user identities has been linked or it failed. The callback will always happen on the same thread as this method is called on.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if called from a non-looper thread.
          
          
          
       
       
       
       
       
   
   


.. _logOut:

.. _logOut__:

.. _User_logOut:

.. _User_logOut__:

.. _io_realm_mongodb_User_logOut:

.. _io_realm_mongodb_User_logOut__:



logOut
------

.. list-table::
   :header-rows: 1
   
   * - | public **void** :ref:`logOut <io_realm_mongodb_User_logOut>` ()
       | 
       
       
       
   
   * - Log the user out of the Realm App. This will unregister them on the device and stop any synchronization to and from the users' Realms. Any Realms owned by the user will not be deleted from the device before :ref:`User.remove() <io_realm_mongodb_User_remove__>`  is called.
       
       Once the Realm App has confirmed the logout any registered :ref:`AuthenticationListener <io_realm_mongodb_AuthenticationListener>`  will be notified and user credentials will be deleted from this device.
       
       
       
       Logging out anonymous users will remove them immediately instead of marking them as :ref:`User.State.LOGGED_OUT <io_realm_mongodb_User_State_LOGGED_OUT>` .
       
       
       
       All other users will be marked as :ref:`User.State.LOGGED_OUT <io_realm_mongodb_User_State_LOGGED_OUT>`  and will still be returned by :ref:`App.allUsers() <io_realm_mongodb_App_allUsers__>` . They can be removed completely by calling :ref:`User.remove() <io_realm_mongodb_User_remove__>` .
       
       
       
       
       
       
       
       
       
       
       
       
       **Throws**
       
       - :ref:`AppException <io_realm_mongodb_AppException>`  - if an error occurred while trying to log the user out of the Realm App.
          
          
          
       
       
       
       
       
   
   


.. _logOutAsync:

.. _logOutAsync__:

.. _User_logOutAsync:

.. _User_logOutAsync__:

.. _io_realm_mongodb_User_logOutAsync:

.. _io_realm_mongodb_User_logOutAsync__:



logOutAsync
-----------

.. _io_realm_mongodb_User_logOutAsync_io_realm_mongodb_App_Callback_:

.. _io_realm_mongodb_User_logOutAsync_Callback_:

.. _io_realm_mongodb_User_logOutAsync_App_Callback_:

.. _logOutAsync_io_realm_mongodb_App_Callback_:

.. _logOutAsync_Callback_:

.. _logOutAsync_App_Callback_:

.. _User_logOutAsync_io_realm_mongodb_App_Callback_:

.. _User_logOutAsync_Callback_:

.. _User_logOutAsync_App_Callback_:

.. _io_realm_mongodb_User_logOutAsync_App_Callback_User__:

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>`  :ref:`logOutAsync <io_realm_mongodb_User_logOutAsync>` (
       |  :ref:`io.realm.mongodb.App.Callback\<io.realm.mongodb.User> <io_realm_mongodb_App_Callback>`  callback
       | )
       
       
       
   
   * - Log the user out of the Realm App asynchronously. This will unregister them on the device and stop any synchronization to and from the users' Realms. Any Realms owned by the user will not be deleted from the device before :ref:`User.remove() <io_realm_mongodb_User_remove__>`  is called.
       
       Once the Realm App has confirmed the logout any registered :ref:`AuthenticationListener <io_realm_mongodb_AuthenticationListener>`  will be notified and user credentials will be deleted from this device.
       
       
       
       Logging out anonymous users will remove them immediately instead of marking them as :ref:`User.State.LOGGED_OUT <io_realm_mongodb_User_State_LOGGED_OUT>` .
       
       
       
       All other users will be marked as :ref:`User.State.LOGGED_OUT <io_realm_mongodb_User_State_LOGGED_OUT>`  and will still be returned by :ref:`App.allUsers() <io_realm_mongodb_App_allUsers__>` . They can be removed completely by calling :ref:`User.remove() <io_realm_mongodb_User_remove__>` .
       
       
       
       
       
       
       
       
       **Parameters**
       
       - ``callback`` - callback when logging out has completed or failed. The callback will always happen on the same thread as this method is called on.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if called from a non-looper thread.
          
          
          
       
       
       
       
       
   
   


.. _refreshCustomData:

.. _refreshCustomData__:

.. _User_refreshCustomData:

.. _User_refreshCustomData__:

.. _io_realm_mongodb_User_refreshCustomData:

.. _io_realm_mongodb_User_refreshCustomData__:



refreshCustomData
-----------------

.. _io_realm_mongodb_User_refreshCustomData_io_realm_mongodb_App_Callback_:

.. _io_realm_mongodb_User_refreshCustomData_Callback_:

.. _io_realm_mongodb_User_refreshCustomData_App_Callback_:

.. _refreshCustomData_io_realm_mongodb_App_Callback_:

.. _refreshCustomData_Callback_:

.. _refreshCustomData_App_Callback_:

.. _User_refreshCustomData_io_realm_mongodb_App_Callback_:

.. _User_refreshCustomData_Callback_:

.. _User_refreshCustomData_App_Callback_:

.. _io_realm_mongodb_User_refreshCustomData_App_Callback_Document__:

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>`  :ref:`refreshCustomData <io_realm_mongodb_User_refreshCustomData>` (
       |  :ref:`io.realm.mongodb.App.Callback\<Document> <io_realm_mongodb_App_Callback>`  callback
       | )
       
       
       
   
   * - Re-fetch custom user data from the Realm App asynchronously.This is the asynchronous variant of :ref:`refreshCustomData() <io_realm_mongodb_User_refreshCustomData__>` .
       
       
       
       
       
       
       
       
       **Parameters**
       
       - ``callback`` - The callback that will receive the result or any errors from the request.
          
          
          
       
       
       
       
       **Returns**
       
       The task representing the ongoing operation.
       
       
       
       
       **Throws**
       
       - `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if not called on a looper thread.
          
          
          
       
       
       
       
       
   
   
.. list-table::
   :header-rows: 1
   
   * - | public **Document** :ref:`refreshCustomData <io_realm_mongodb_User_refreshCustomData>` ()
       | 
       
       
       
   
   * - Re-fetch custom user data from the Realm App.
       
       
       
       
       
       
       **Returns**
       
       The updated custom user data associated with the user.
       
       
       
       
       **Throws**
       
       - :ref:`AppException <io_realm_mongodb_AppException>`  - if the request failed in some way.
          
          
          
       
       
       
       
       
   
   


.. _remove:

.. _remove__:

.. _User_remove:

.. _User_remove__:

.. _io_realm_mongodb_User_remove:

.. _io_realm_mongodb_User_remove__:



remove
------

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`User <io_realm_mongodb_User>`  :ref:`remove <io_realm_mongodb_User_remove>` ()
       | 
       
       
       
   
   * - Calling this will remove the user and any Realms the user has from the device. No data is removed from the server. If the user is logged in when calling this method, the user is logged out before any data is deleted.
       
       
       
       
       
       
       **Returns**
       
       the user that was removed.
       
       
       
       
       **Throws**
       
       - :ref:`AppException <io_realm_mongodb_AppException>`  - if an error occurred while trying to remove the user.
          
          
          
       
       
       
       
       
   
   


.. _removeAsync:

.. _removeAsync__:

.. _User_removeAsync:

.. _User_removeAsync__:

.. _io_realm_mongodb_User_removeAsync:

.. _io_realm_mongodb_User_removeAsync__:



removeAsync
-----------

.. _io_realm_mongodb_User_removeAsync_io_realm_mongodb_App_Callback_:

.. _io_realm_mongodb_User_removeAsync_Callback_:

.. _io_realm_mongodb_User_removeAsync_App_Callback_:

.. _removeAsync_io_realm_mongodb_App_Callback_:

.. _removeAsync_Callback_:

.. _removeAsync_App_Callback_:

.. _User_removeAsync_io_realm_mongodb_App_Callback_:

.. _User_removeAsync_Callback_:

.. _User_removeAsync_App_Callback_:

.. _io_realm_mongodb_User_removeAsync_App_Callback_User__:

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>`  :ref:`removeAsync <io_realm_mongodb_User_removeAsync>` (
       |  :ref:`io.realm.mongodb.App.Callback\<io.realm.mongodb.User> <io_realm_mongodb_App_Callback>`  callback
       | )
       
       
       
   
   * - Calling this will asynchronously remove the user and any Realms the user has from the device. No data is removed from the server. If the user is logged in when calling this method, the user is logged out before any data is deleted.
       
       
       
       
       **Parameters**
       
       - ``callback`` - callback when removing the user has completed or failed. The callback will always happen on the same thread as this method is called on.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if called from a non-looper thread.
          
          
          
       
       
       
       
       
   
   



