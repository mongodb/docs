.. _atlas-sp-manage-vpc-peering:

==============================
Manage VPC Peering Connections
==============================

.. default-domain:: mongodb

.. meta::
   :keywords: atlas stream processing, atlas stream processing overview, streaming data, data stream, real time, data processing, apache kafka, kafka, vpc peering
   :description: Learn how to create, update, and delete outgoing and incoming VPC Peering connections to your Stream Processing Instance.

.. facet::
   :name: genre
   :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/unavailable-flex-serverless-m0-m2-m5-clusters.rst

.. include:: /includes/fact-network-peering.rst

.. warning::

   |service| does not support Network Peering between clusters 
   deployed in a single region on different cloud providers.
   For example, you cannot set up Network Peering between 
   an |service| cluster hosted in a single region on AWS and an 
   application hosted in a single region on GCP.

The procedures on this page walk you through creating an outbound |vpc| 
connection, as well as creating, accepting, rejecting, and deleting an 
inbound |vpc| peering connection to your {+spi+} instances. 

Prerequisites
-------------

To create and configure connections, you must have the following:

- An |service| :ref:`project <manage-projects>`
- An |service| user with the :authrole:`Project Owner` or
  the :authrole:`Project Stream Processing Owner` role to manage a
  connection registry

  .. note::
     
     The :authrole:`Project Owner` role allows you to create database 
     deployments, manage project access and project settings, manage 
     IP Access List entries, and more.

     The :authrole:`Project Stream Processing Owner` role enables {+atlas-sp+} 
     actions such as viewing, creating, deleting, and editing stream 
     processing instances, and creating, updating, and deleting 
     VPC Peering connections in the connection registry. 

     See :ref:`Project Roles <project-roles>` to learn more about the 
     differences between the two roles.

- An |service| {+cluster+}

.. _atlas-sp-manage-outbound-vpc-peering-connection-create:

Create Outbound VPC Peering Connections
---------------------------------------

To create outbound |vpc| peering connections to your {+spi+}:

.. tabs:: 

   .. tab:: {+atlas-ui+}
      :tabid: ui

      To create outbound |vpc| peering connections from your {+spi+}
      to your cloud provider |vpc| using the {+atlas-ui+}, 
      see :ref:`Add an Atlas Stream Processing Connection
      <atlas-sp-add-connection>` and select :guilabel:`Apache Kafka`
      as your connection type, and :guilabel:`Atlas UI` as your interface.

   .. tab:: {+atlas-admin-api+}
      :tabid: api

      To create outbound |vpc| peering connections to your {+spi+} using the API, see 
      :oas-atlas-tag:`Return All Network Peering Connections in One Project </Network-Peering/operation/listPeeringConnections>`.

.. _generate-incoming-vpc-peering-connection-from-confluent:
.. _atlas-sp-generate-incoming-vpc-peering-connection-from-confluent:

Generate an Incoming VPC Peering Connection Request from Confluent
------------------------------------------------------------------

To set up and configure an |AWS| |vpc| peering connection initiated from a Confluent 
account:

.. procedure::
   :style: normal

   .. step:: Generate an API key to use the |service| Cloud API.

      a. In |service|, go to the :guilabel:`Project Access Manager` page.

      #. If it's not already displayed, select your desired organization
         from the :icon-mms:`office` :guilabel:`Organizations` menu in the
         navigation bar.
      
      #. If it's not already displayed, select your desired project
         from the :guilabel:`Projects` menu in the navigation bar.
      
      #. Do one of the following steps:

         - Select :guilabel:`Project Access` from the 
           :guilabel:`Access Manager` menu in the navigation bar.

         - Next to the :guilabel:`Projects` menu, expand the
           :icon-fa5:`ellipsis-v` :guilabel:`Options` menu, click 
           :guilabel:`Project Settings`, and click 
           :guilabel:`Access Manager` in the sidebar.

         The `Project Access Manager <https://cloud.mongodb.com/go?l=https%3A%2F%2Fcloud.mongodb.com%2Fv2%2F%3Cproject%3E%23%2Faccess>`__ page displays.
      
      #. Click :guilabel:`Applications`.

      #. Click :guilabel:`Create API Key`.

      #. On the :guilabel:`Create API Key` page, enter your API Key information.

      #. Save your API Key information.

      #. Click :guilabel:`Done`.  

   .. step:: Retrieve the |service| Cloud |AWS| Account ID, the |vpc| ID, and the |cidr| block.

      A sample API request resembles the following: 

      .. code-block:: sh

         curl \
         -s --user "ajarafoc:a98a3a67-7400-4d6f-94b2-20a64118524d" \
         --digest \
         --header 'Accept: application/vnd.atlas.2024-11-13+json' \
         --header 'Content-Type: application/json' \
         --request GET \ "https://cloud.mongodb.com/api/atlas/v2/groups/671a86f4cfc9da7d7c31b14f/streams/accountDetails?cloudProvider=aws&regionName=US_EAST_1"

      Note the following example parameter values:

      .. list-table::
         :widths: 45 55
         :header-rows: 1

         * - Parameter values
           - Description
         * - ajarafoc:a98a3a67-7400-4d6f-94b2-20a64118524d
           - The API public key and private key
         * - 671a86f4cfc9da7d7c31b14f
           - The |service| project Id
         * - |aws|
           - The Cloud provider
         * - US_EAST_1
           - The |aws| region name

      A sample output resembles the following:

      .. code-block:: sh

         {
            "awsAccountId": "974404375205",
            "cidrBlock": "192.168.248.0/21",
            "vpcId": "vpc-0ef7efa5ceca36e2f"
         }

   .. step:: Configure a network configuration.
   
      A Confluent Network Configuration that supports |vpc| peering is required before you create a |vpc| peering connection. 
      If a network configuration doesn't yet exist in your account, then select |AWS| as your cloud provider and select a region from the 
      :guilabel:`Add Network Configuration` field in Confluent Cloud. 

      .. note::
                
         If a Confluent |vpc| Peering Network Configuration already exists in your account, then proceed to **Step 7**.

   .. step:: Click :guilabel:`Continue` and select :guilabel:`VPC Peering` in the next page.

      Select three different :guilabel:`Zones` and the |cidr| block for the Confluent |AWS| |vpc|.

   .. step:: Click :guilabel:`Add Network Connection`.

   .. step:: Open the Confluent |vpc| Peering Network Configuration, and click :guilabel:`VPC Peering`.

   .. step:: Provide the connection with a name, an |service| |AWS| Account ID, a |vpc| ID, and the |cidr| block from **Step 2**, and click :guilabel:`Add`. 

   .. step:: The |vpc| peering connection request displays in |service| after a potential delay. 

      To see your pending request in your |service| account, execute an API request similar to:

      .. code-block:: sh

         curl \
         -s --user "ojarafoc:1ecf4c70-98ea-4168-8e44-fd67dba0f3ba" \
         --digest \
         --header 'Accept: application/vnd.atlas.2023-02-01+json' \
         --header 'Content-Type: application/json' \
         --request GET \
         "https://cloud.mongodb.com/api/atlas/v2/groups/671a86f4cfc9da7d7c31b14f/streams/vpcPeeringConnections?requesterAccountId=417601102659"

      Note the following example parameter values:

      .. list-table::
         :widths: 45 55
         :header-rows: 1

         * - Parameter values
           - Description
         * - ajarafoc:a98a3a67-7400-4d6f-94b2-20a64118524d
           - The API public key and private key
         * - 671a86f4cfc9da7d7c31b14f
           - The |service| project Id
         * - 417601102659
           - The Confluent |AWS| Account ID obtained in **Step 7**

      A sample output resembles the following:

      .. code-block:: sh

         {
            "links": [
               {
                  "href": "https://cloud.mongodb.com/api/atlas/v2/groups/671a86f4cfc9da7d7c31b14f/streams/vpcPeeringConnections?requesterAccountId=417601102659&pageNum=1&itemsPerPage=100",
                  "rel": "self"
               }
            ],
            "results": [
               {
                  "_id": "6759e61aa6cf0a5476e233d1",
                  "accepterAccountId": "974404375205",
                  "accepterVpcId": "vpc-0ddfd37072cc5ed61",
                  "cloudStatus": "pending-acceptance",
                  "expirationTime": "2024-12-18T19:20:37Z",
                  "groupId": "671a86f4cfc9da7d7c31b14f",
                  "localStatus": "NONE",
                  "name": "pcx-09277e1e81d0751c1",
                  "requesterAccountId": "417601102659",
                  "requesterCidr": "10.0.0.0/16",
                  "requesterVpcId": "vpc-0d13eb6a2f0377854"
               }
            ],
            "totalCount": 1
         }

   .. step:: Accept the incoming |vpc| Peering connection request. 
      
      Note that the ``cloudStatus`` value is ``pending-acceptance``. 
      
      Execute the following API request:

      .. code-block:: sh

         curl \
         -s --user "ojarafoc:1ecf4c70-98ea-4168-8e44-fd67dba0f3ba" \
         --digest \
         --header 'Accept: application/vnd.atlas.2023-02-01+json' \
         --header 'Content-Type: application/json' \
         -d '{"requesterVpcId": "vpc-0d13eb6a2f0377854", "requesterAccountId":"417601102659"}' \
         --request POST \
         "https://cloud.mongodb.com/api/atlas/v2/groups/671a86f4cfc9da7d7c31b14f/streams/vpcPeeringConnections/pcx-09277e1e81d0751c1:accept"

      Note the following example parameter values:

      .. list-table::
         :widths: 45 55
         :header-rows: 1

         * - Parameter values
           - Description
         * - ajarafoc:a98a3a67-7400-4d6f-94b2-20a64118524d
           - The API public key and private key
         * - {"requesterVpcId": "vpc-0d13eb6a2f0377854", "requesterAccountId":"417601102659"}
           - This is the POST payload containing the “requester”s |vpc| ID, and the “requester”s |AWS| Account ID. In this case, the “requester” is Confluent.
         * - 671a86f4cfc9da7d7c31b14f
           - The |service| project Id
         * - pcx-09277e1e81d0751c1
           - The incoming |vpc| connection name obtained from the previous step
      
   .. step:: Verify that the connection was accepted. 
   
      To do this, repeat **Step 9** and observe the ``cloudStatus`` field value. When the connection is finally accepted, the value should return ``active``. 

.. _get-aws-account-id-and-vpc-id:
.. _atlas-sp-get-aws-account-id-and-vpc-id:

Get AWS Account ID and VPC ID for a Project
-------------------------------------------

If you want to create inbound |vpc| peering connections to your {+spi+}, 
you first need to retrieve the |aws| account ID, the |aws| |vpc| ID, and 
the |cidr| block associated with your {+service+} project to initiate a |vpc| 
peering request from an external cloud environment.  

To retrieve the |aws| account ID, the |aws| |vpc| ID, and the |cidr| block for an 
{+service+} project using the {+atlas-admin-api+}, see 
:oas-atlas-tag:`Returns the Account ID, and the VPC ID for the group and region specified </Streams/operation/getAccountDetails>`.

.. _manage-inbound-vpc-peering-connection-list:
.. _atlas-sp-manage-inbound-vpc-peering-connection-list:

List Inbound VPC Peering Connections
--------------------------------------

To list all inbound |vpc| peering connections to your {+spi+} using the {+atlas-admin-api+}, 
see :oas-atlas-tag:`Return All VPC Peering Connections </Streams/operation/getVpcPeeringConnections>`.

.. _manage-inbound-vpc-peering-connection-accept:
.. _atlas-sp-manage-inbound-vpc-peering-connection-accept:

Accept an Inbound VPC Peering Connection
----------------------------------------

To accept an inbound |vpc| peering connection to your {+spi+} using the {+atlas-admin-api+}, 
see :oas-atlas-tag:`Requests the acceptance of an incoming VPC Peering connection </Streams/operation/acceptVpcPeeringConnection>`.

A sample API request resembles the following: 

.. code-block:: sh

   curl \
   -s --user "ojarafoc:1ecf4c70-98ea-4168-8e44-fd67dba0f3ba" \
   --digest \
   --header 'Accept: application/vnd.atlas.2023-02-01+json' \
   --header 'Content-Type: application/json' \
   -d '{"requesterVpcId": "vpc-0d13eb6a2f0377854", "requesterAccountId":"417601102659"}' \
   --request POST \
   "https://cloud.mongodb.com/api/atlas/v2/groups/671a86f4cfc9da7d7c31b14f/streams/vpcPeeringConnections/pcx-09277e1e81d0751c1:accept"

Note the following example parameter values:

.. list-table::
   :widths: 45 55
   :header-rows: 1

   * - Parameter values
     - Description
   * - ajarafoc:a98a3a67-7400-4d6f-94b2-20a64118524d
     - The API public key and private key
   * - {"requesterVpcId": "vpc-0d13eb6a2f0377854", "requesterAccountId":"417601102659"}
     - The POST payload containing the request's |vpc| ID and |aws| Account ID
   * - 671a86f4cfc9da7d7c31b14f
     - The {+service+} project Id
   * - pcx-09277e1e81d0751c1
     - The incoming |vpc| connection name obtained from :ref:`listing inbound VPC peering connections <manage-inbound-vpc-peering-connection-list>`

.. _manage-inbound-vpc-peering-connection-reject:
.. _atlas-sp-manage-inbound-vpc-peering-connection-reject:

Reject an Inbound VPC Peering Connection
----------------------------------------

To reject an inbound |vpc| peering connection to your {+spi+} using the {+atlas-admin-api+}, 
see :oas-atlas-tag:`Requests the rejection of an incoming VPC Peering connection </Streams/operation/rejectVpcPeeringConnection>`.

.. _manage-inbound-vpc-peering-connection-delete:
.. _atlas-sp-manage-inbound-vpc-peering-connection-delete:

Delete an Inbound VPC Peering Connection
----------------------------------------

To delete an inbound |vpc| peering connection to your {+spi+} using the {+atlas-admin-api+}, 
see :oas-atlas-tag:`Deletes an incoming VPC Peering connection </Streams/operation/deleteVpcPeeringConnection>`.
