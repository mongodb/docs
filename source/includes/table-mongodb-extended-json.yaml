# table structure. all content symbolic.
section: layout
header: [ meta.header1, meta.header2, meta.header3, meta.header4, meta.header5 ]
rows:
  - 1: [ content.bson_bin, content.strict_bin, content.js_bin, content.mongo_bin, content.notes_bin ]
  - 2: [ content.bson_date, content.strict_date, content.js_date, content.mongo_date, content.notes_date ]
  - 3: [ content.bson_ts, content.strict_ts, content.js_ts, content.mongo_ts, content.notes_ts ]
  - 4: [ content.bson_regex, content.strict_regex, content.js_regex, content.mongo_regex, content.notes_regex ]
  - 5: [ content.bson_oid, content.strict_oid, content.js_oid, content.mongo_oid, content.notes_oid ]
  - 6: [ content.bson_ref, content.strict_ref, content.js_ref, content.mongo_ref, content.notes_ref ]
  - 7: [ content.bson_undef, content.strict_undef, content.js_undef, content.mongo_undef, content.notes_undef ]
  - 8: [ content.bson_minkey, content.strict_minkey, content.js_minkey, content.mongo_minkey, content.notes_minkey ]
  - 9: [ content.bson_maxkey, content.strict_maxkey, content.js_maxkey, content.mongo_maxkey, content.notes_maxkey ]
---
# table metadata, as meta.<key>
section: meta
header1: "BSON Data Type"
header2: "Strict Mode"
header3: "JavaScript Mode (via JSONP)"
header4: "mongo Shell Mode"
header5: "Notes"
---
# table content, as content.<key>
section: content
bson_bin: ".. bsontype:: data_binary"
strict_bin: |
            .. code-block:: javascript

               {
                 "$binary": "<bindata>",
                 "$type": "<t>"
               }
js_bin: |
        .. code-block:: javascript

           {
             "$binary": "<bindata>",
             "$type": "<t>"
           }
mongo_bin: |
            .. code-block:: javascript

               BinData ( <t>, <bindata> )
notes_bin: |
           ``<bindata>`` is the base64 representation of a binary
           string.

           ``<t>`` is the hexadecimal representation of a single byte
           that indicates the data type.
bson_date: ".. bsontype:: data_date"
strict_date: |
             .. code-block:: javascript

                {
                  "$date": <date>
                }
js_date: |
         .. code-block:: javascript

            new Date( <date> )
mongo_date: |
            .. code-block:: javascript

               new Date ( <date> )
notes_date: |
            ``<date>`` is the JSON representation of a 64-bit signed
            integer for milliseconds since epoch UTC (unsigned before
            version 1.9.1).
bson_ts: ".. bsontype:: data_timestamp"
strict_ts: |
             .. code-block:: javascript

                {
                  "$timestamp":
                       {
                         "t": <t>,
                         "i": <i>
                       }
                }
js_ts: |
       .. code-block:: javascript

          {
            "$timestamp":
                 {
                   "t": <t>,
                   "i": <i>
                 }
          }
mongo_ts: |
          .. code-block:: javascript

             Timestamp( <t>, <i> )
notes_ts: |
          ``<t>`` is the JSON representation
          of a 32-bit unsigned integer
          for seconds since epoch.

          ``<i>`` is a 32-bit unsigned
          integer for the increment.
bson_regex: ".. bsontype:: data_regex"
strict_regex: |
              .. code-block:: javascript

                 {
                   "$regex": "<sRegex>",
                   "$options": "<sOptions>"
                 }
js_regex: |
          .. code-block:: javascript

             /<jRegex>/<jOptions>
mongo_regex: |
             .. code-block:: javascript

                /<jRegex>/<jOptions>
notes_regex: |
             ``<sRegex>`` is a string of valid JSON characters.

             ``<jRegex>`` is a string that may contain valid JSON
             characters and unescaped double quote (``"``) characters, but may not
             contain unescaped forward slash (``/``) characters.

             ``<sOptions>`` is a string containing the regex options
             represented by the letters of the alphabet.

             ``<jOptions>`` is a string that may contain only the
             characters 'g', 'i', 'm' and 's' (added in v1.9). Because
             the ``JavaScript`` and ``mongo Shell`` representations
             support a limited range of options, any nonconforming
             options will be dropped when converting to this
             representation.
bson_oid: ".. bsontype:: data_oid"
strict_oid: |
              .. code-block:: javascript

                 {
                   "$oid": "<id>"
                 }
js_oid: |
          .. code-block:: javascript

             {
               "$oid": "<id>"
             }
mongo_oid: |
             .. code-block:: javascript

                ObjectId( "<id>" )
notes_oid: |
           ``<id>`` is a 24-character hexadecimal string.
bson_ref: ".. bsontype:: data_ref"
strict_ref: |
              .. code-block:: javascript

                 {
                   "$ref": "<name>",
                   "$id": "<id>"
                 }
js_ref: |
          .. code-block:: javascript

             {
               "$ref" : "<name>",
               "$id" : "<id>"
             }
mongo_ref: |
             .. code-block:: javascript

                DBRef("<name>", "<id>")
notes_ref: |
           ``<name>`` is a string of valid JSON characters.

           ``<id>`` is any valid extended JSON type.

bson_undef: ".. bsontype:: data_undefined"
strict_undef: |
              .. code-block:: javascript

                 {
                   "$undefined": true
                 }
js_undef: |
          .. code-block:: javascript

             undefined

mongo_undef: |
             .. code-block:: javascript

                undefined
notes_undef: |
             The representation for the JavaScript/BSON undefined type.
bson_minkey: ".. bsontype:: data_minkey"
strict_minkey: |
              .. code-block:: javascript

                 {
                   "$minKey": 1
                 }
js_minkey: |
          .. code-block:: javascript

             {
               "$minKey": 1
             }
mongo_minkey: |
             .. code-block:: javascript

                MinKey
notes_minkey: |
              The representation of the MinKey BSON data type that
              compares lower than all other types. See
              :ref:`faq-dev-compare-order-for-BSON-types` for more
              information on comparison order for BSON types.

bson_maxkey: ".. bsontype:: data_maxkey"
strict_maxkey: |
              .. code-block:: javascript

                 {
                   "$maxKey": 1
                 }
js_maxkey: |
          .. code-block:: javascript

             {
               "$maxKey": 1
             }
mongo_maxkey: |
             .. code-block:: javascript

                MaxKey
notes_maxkey: |
              The representation of the MaxKey BSON data type that
              compares higher than all other types. See
              :ref:`faq-dev-compare-order-for-BSON-types` for more
              information on comparison order for BSON types.
...
