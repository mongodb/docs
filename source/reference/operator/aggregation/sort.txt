===================
$sort (aggregation)
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. pipeline:: $sort

   Sorts all input documents and returns them to the pipeline in sorted
   order.

   The :pipeline:`$sort` stage has the following prototype form:

   .. code-block:: javascript

      { $sort: { <field1>: <sort order>, <field2>: <sort order> ... } }

   :pipeline:`$sort` takes a document that specifies the field(s) to
   sort by and the respective sort order. ``<sort order>`` can have one
   of the following values:

   .. container::

      .. list-table::
         :header-rows: 1
         :widths: 35 65

         * - Value
           - Description

         * - ``1``
           - Sort ascending.

         * - ``-1``
           - Sort descending.

         * - ``{ $meta: "textScore" }``
           - Sort by the computed ``textScore`` metadata in descending
             order. See :ref:`sort-pipeline-metadata` for an example.

   If sorting on multiple fields, sort order is evaluated from left to
   right. For example, in the form above, documents are first sorted by
   ``<field1>``. Then documents with the same ``<field1>`` values are
   further sorted by ``<field2>``.

Examples
--------

.. _sort-pipeline-asc-desc:

Ascending/Descending Sort
~~~~~~~~~~~~~~~~~~~~~~~~~

For the field or fields to sort by, set the sort order to ``1`` or ``-1`` to
specify an ascending or descending sort respectively, as in the following example:

.. code-block:: javascript

   db.users.aggregate(
      [
        { $sort : { age : -1, posts: 1 } }
      ]
   )

This operation sorts the documents in the ``users`` collection,
in descending order according by the ``age`` field and then in
ascending order according to the value in the ``posts`` field.

.. include:: /includes/fact-sort-order.rst

For details on the comparison/sort order for specific types, see
:ref:`bson-types-comparison-order`.

.. _sort-pipeline-metadata:

Metadata Sort
~~~~~~~~~~~~~

Specify in the ``{ <sort-key> }`` document, a new field name for the
computed metadata and specify the :expression:`$meta` expression as its
value, as in the following example:

.. code-block:: javascript

   db.users.aggregate(
      [
        { $match: { $text: { $search: "operating" } } },
        { $sort: { score: { $meta: "textScore" }, posts: -1 } }
      ]
   )

This operation uses the :query:`$text` operator to match the documents,
and then sorts first by the ``"textScore"`` metadata and then by
descending order of the ``posts`` field. The specified metadata
determines the sort order. For example, the ``"textScore"`` metadata
sorts in descending order. See :expression:`$meta` for more information
on metadata.

.. _sort-and-memory:

``$sort`` Operator and Memory
-----------------------------

.. _sort-limit-sequence:

``$sort`` + ``$limit`` Memory Optimization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-agg-sort-limit.rst

.. include:: /includes/fact-optimizations-subject-to-change.rst

.. _sort-memory-limit:

``$sort`` and Memory Restrictions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :pipeline:`$sort` stage has a limit of 100 megabytes of RAM for
in-memory sorts. By default, if the stage exceeds this limit,
:pipeline:`$sort` produces an error. To allow pipeline processing to
take up more space, use the :ref:`allowDiskUse
<cmd-aggregate-allowDiskUse>` option to enable aggregation pipeline
stages to write data to temporary files.

.. seealso::

   :doc:`/core/aggregation-pipeline-limits`

``$sort`` Operator and Performance
----------------------------------

The :pipeline:`$sort` operator can take advantage of an index if it's
used in the first stage of a pipeline or if it's only preceeded by a
:pipeline:`$match` stage.

When you use the :pipeline:`$sort` on a sharded cluster, each shard
sorts its result documents using an index where available. Then the
:binary:`~bin.mongos` or one of the shards performs a streamed merge
sort.

.. seealso:: 
   :doc:`/tutorial/aggregation-zip-code-data-set`,
   :doc:`/tutorial/aggregation-with-user-preference-data`
