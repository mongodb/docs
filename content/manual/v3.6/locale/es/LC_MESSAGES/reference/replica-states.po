# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2013-12-16 22:52+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/replica-states.txt:3
msgid "Replica Set Member States"
msgstr ""

#: ../source/reference/replica-states.txt:7
msgid "Each member of a replica set has a state."
msgstr ""

#: ../source/includes/replica-states.rst:5
msgid "Number"
msgstr ""

#: ../source/includes/replica-states.rst:6
msgid "Name"
msgstr ""

#: ../source/includes/replica-states.rst:7
msgid "State Description"
msgstr ""

#: ../source/includes/replica-states.rst:9
msgid "0"
msgstr ""

#: ../source/includes/replica-states.rst:10
msgid ":replstate:`STARTUP`"
msgstr ""

#: ../source/includes/replica-states.rst:12
msgid ""
"Not yet an active member of any set. All members start up in this state. "
"The :binary:`~bin.mongod` parses the :doc:`replica set configuration "
"document </administration/replica-set-member-configuration>` while in "
":replstate:`STARTUP`."
msgstr ""

#: ../source/includes/replica-states.rst:18
msgid "1"
msgstr ""

#: ../source/includes/replica-states.rst:19
msgid ":replstate:`PRIMARY`"
msgstr ""

#: ../source/includes/replica-states.rst:21
msgid ""
"The member in state :doc:`primary </core/replica-set-primary>` is the "
"only member that can accept write operations. Eligible to vote."
msgstr ""

#: ../source/includes/replica-states.rst:25
msgid "2"
msgstr ""

#: ../source/includes/replica-states.rst:26
msgid ":replstate:`SECONDARY`"
msgstr ""

#: ../source/includes/replica-states.rst:28
msgid ""
"A member in state :doc:`secondary </core/replica-set-secondary>` is "
"replicating the data store. Eligible to vote."
msgstr ""

#: ../source/includes/replica-states.rst:31
msgid "3"
msgstr ""

#: ../source/includes/replica-states.rst:32
msgid ":replstate:`RECOVERING`"
msgstr ""

#: ../source/includes/replica-states.rst:34
msgid ""
"Members either perform startup self-checks, or transition from completing"
" a :doc:`rollback </core/replica-set-rollbacks>` or :doc:`resync "
"</tutorial/resync-replica-set-member>`. Eligible to vote."
msgstr ""

#: ../source/includes/replica-states.rst:39
msgid "5"
msgstr ""

#: ../source/includes/replica-states.rst:40
msgid ":replstate:`STARTUP2`"
msgstr ""

#: ../source/includes/replica-states.rst:41
msgid ""
"The member has joined the set and is running an initial sync. Eligible to"
" vote."
msgstr ""

#: ../source/includes/replica-states.rst:44
msgid "6"
msgstr ""

#: ../source/includes/replica-states.rst:45
msgid ":replstate:`UNKNOWN`"
msgstr ""

#: ../source/includes/replica-states.rst:46
msgid ""
"The member's state, as seen from another member of the set, is not yet "
"known."
msgstr ""

#: ../source/includes/replica-states.rst:48
msgid "7"
msgstr ""

#: ../source/includes/replica-states.rst:49
msgid ":replstate:`ARBITER`"
msgstr ""

#: ../source/includes/replica-states.rst:50
msgid ""
":ref:`Arbiters <replica-set-arbiters>` do not replicate data and exist "
"solely to participate in elections. Eligible to vote."
msgstr ""

#: ../source/includes/replica-states.rst:52
msgid "8"
msgstr ""

#: ../source/includes/replica-states.rst:53
msgid ":replstate:`DOWN`"
msgstr ""

#: ../source/includes/replica-states.rst:54
msgid "The member, as seen from another member of the set, is unreachable."
msgstr ""

#: ../source/includes/replica-states.rst:56
msgid "9"
msgstr ""

#: ../source/includes/replica-states.rst:57
msgid ":replstate:`ROLLBACK`"
msgstr ""

#: ../source/includes/replica-states.rst:58
msgid ""
"This member is actively performing a :doc:`rollback </core/replica-set-"
"rollbacks>`.  Eligible to vote. Data is not available for reads from this"
" member."
msgstr ""

#: ../source/includes/replica-states.rst:61
msgid "10"
msgstr ""

#: ../source/includes/replica-states.rst:62
msgid ":replstate:`REMOVED`"
msgstr ""

#: ../source/includes/replica-states.rst:63
msgid "This member was once in a replica set but was subsequently removed."
msgstr ""

#: ../source/reference/replica-states.txt:12
msgid "States"
msgstr ""

#: ../source/reference/replica-states.txt:15
msgid "Core States"
msgstr ""

#: ../source/reference/replica-states.txt:19
msgid ""
"Members in :replstate:`PRIMARY` state accept write operations. A replica "
"set has at most one primary at a time. [#edge-cases-2-primaries]_ A "
":replstate:`SECONDARY` member becomes primary after an :ref:`election "
"<replica-set-elections>`. Members in the :replstate:`PRIMARY` state are "
"eligible to vote."
msgstr ""

#: ../source/reference/replica-states.txt:26
msgid ""
"Members in :replstate:`SECONDARY` state replicate the primary's data set "
"and can be configured to accept read operations. Secondaries are eligible"
" to vote in elections, and may be elected to the :replstate:`PRIMARY` "
"state if the primary becomes unavailable."
msgstr ""

#: ../source/reference/replica-states.txt:33
msgid ""
"Members in :replstate:`ARBITER` state do not replicate data or accept "
"write operations. They are eligible to vote, and exist solely to break a "
"tie during elections. Replica sets should only have a member in the "
":replstate:`ARBITER` state if the set would otherwise have an even number"
" of members, and could suffer from tied elections. There should only be "
"at most one arbiter configured in any replica set."
msgstr ""

#: ../source/reference/replica-states.txt:40
msgid "See :doc:`/core/replica-set-members` for more information on core states."
msgstr ""

#: ../source/reference/replica-states.txt:43
msgid "Other States"
msgstr ""

#: ../source/reference/replica-states.txt:47
msgid ""
"Each member of a replica set starts up in :replstate:`STARTUP` state. "
":binary:`~bin.mongod` then loads that member's replica set configuration,"
" and transitions the member's state to :replstate:`STARTUP2`. Members in "
":replstate:`STARTUP` are not eligible to vote, as they are not yet a "
"recognized member of any replica set."
msgstr ""

#: ../source/reference/replica-states.txt:54
msgid ""
"Each member of a replica set enters the :replstate:`STARTUP2` state as "
"soon as :binary:`~bin.mongod` finishes loading that member's "
"configuration, at which time it becomes an active member of the replica "
"set and is eligible to vote. The member then decides whether or not to "
"undertake an initial sync. If a member begins an initial sync, the member"
" remains in :replstate:`STARTUP2` until all data is copied and all "
"indexes are built.  Afterwards, the member transitions to "
":replstate:`RECOVERING`."
msgstr ""

#: ../source/reference/replica-states.txt:64
msgid ""
"A member of a replica set enters :replstate:`RECOVERING` state when it is"
" not ready to accept reads. The :replstate:`RECOVERING` state can occur "
"during normal operation, and doesn't necessarily reflect an error "
"condition.  Members in the :replstate:`RECOVERING` state are eligible to "
"vote in elections, but are not eligible to enter the :replstate:`PRIMARY`"
" state."
msgstr ""

#: ../source/reference/replica-states.txt:71
msgid ""
"A member transitions from :replstate:`RECOVERING` to "
":replstate:`SECONDARY` after replicating enough data to guarantee a "
"consistent view of the data for client reads.  The only difference "
"between :replstate:`RECOVERING` and :replstate:`SECONDARY` states is that"
" :replstate:`RECOVERING` prohibits client reads and "
":replstate:`SECONDARY` permits them. :replstate:`SECONDARY` state does "
"not guarantee anything about the staleness of the data with respect to "
"the primary."
msgstr ""

#: ../source/reference/replica-states.txt:79
msgid ""
"Due to overload, a :term:`secondary` may fall far enough behind the other"
" members of the replica set such that it may need to :doc:`resync "
"</tutorial/resync-replica-set-member>` with the rest of the set. When "
"this happens, the member enters the :replstate:`RECOVERING` state and "
"requires manual intervention."
msgstr ""

#: ../source/reference/replica-states.txt:86
msgid "Error States"
msgstr ""

#: ../source/reference/replica-states.txt:88
msgid "Members in any error state can't vote."
msgstr ""

#: ../source/reference/replica-states.txt:92
msgid ""
"Members that have never communicated status information to the replica "
"set are in the :replstate:`UNKNOWN` state."
msgstr ""

#: ../source/reference/replica-states.txt:97
msgid ""
"Members that lose their connection to the replica set are seen as "
":replstate:`DOWN` by the remaining members of the set."
msgstr ""

#: ../source/reference/replica-states.txt:101
msgid ""
"Members that are removed from the replica set enter the "
":replstate:`REMOVED` state. When members enter the :replstate:`REMOVED` "
"state, the logs will mark this event with a ``replSet REMOVED`` message "
"entry."
msgstr ""

#: ../source/reference/replica-states.txt:108
msgid ""
"Whenever the replica set replaces a :term:`primary` in an election, the "
"old primary may contain documents that did not replicate to the "
":term:`secondary` members. In this case, the old primary member reverts "
"those writes. During :doc:`rollback </core/replica-set-rollbacks>`, the "
"member will have :replstate:`ROLLBACK` state. Members in the "
":replstate:`ROLLBACK` state are eligible to vote in elections."
msgstr ""

#: ../source/reference/replica-states.txt:118
msgid ""
"*Removed in version 3.0:* A member in :replstate:`FATAL` encountered an "
"unrecoverable error.  The member must be shut down and restarted; a "
"resync may be required as well."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may"
" *transiently* believe that they are the primary, but at most, one of "
"them will be able to complete writes with :writeconcern:`{ w: "
"\"majority\" } <\"majority\">` write concern. The node that can complete "
":writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current "
"primary, and the other node is a former primary that has not yet "
"recognized its demotion, typically due to a :term:`network partition`. "
"When this occurs, clients that connect to the former primary may observe "
"stale data despite having requested read preference :readmode:`primary`, "
"and new writes to the former primary will eventually roll back."
msgstr ""

#~ msgid ":replstate:`SHUNNED`"
#~ msgstr ""

#~ msgid ""
#~ "Members that are removed from the "
#~ "replica set enter the :replstate:`SHUNNED` "
#~ "state."
#~ msgstr ""

# 846cc263e9154cd99094c4da7abec8d3
#~ msgid ""
#~ "Members of replica sets have states "
#~ "that reflect the startup process, basic"
#~ " operations, and potential error states."
#~ msgstr ""

# 21953399b3ac450598d76261174da25c
#~ msgid "**Number**"
#~ msgstr ""

# 6efff089efc840e298875915f5e047f7
#~ msgid "**Name**"
#~ msgstr ""

# a9c123e60c2b41d2baa305b2534dc16e
#~ msgid "**State Description**"
#~ msgstr ""

# d844ed2c6974467e884b4f55590b7fa3
#~ msgid ""
#~ "Cannot vote. All members start up "
#~ "in this state. The :program:`mongod` "
#~ "parses the :doc:`replica set configuration "
#~ "document </administration/replica-set-member-"
#~ "configuration>` while in :replstate:`STARTUP`."
#~ msgstr ""

# a5868c0b5c484c129cfc5b400b3db921
#~ msgid ""
#~ "Can vote. The :doc:`primary </core/replica-"
#~ "set-primary>` is the only member "
#~ "to accept write operations."
#~ msgstr ""

# ef392bb0c2684286844141dbcb2f69ef
#~ msgid ""
#~ "Can vote. The :doc:`secondary </core"
#~ "/replica-set-secondary>` replicates the "
#~ "data store."
#~ msgstr ""

# b14980e2537b4b5bb75e668efe7b2309
#~ msgid ""
#~ "Can vote. Members either perform startup"
#~ " self-checks, or transition from "
#~ "completing a :doc:`rollback </core/replica-"
#~ "set-rollbacks>` or :doc:`resync </tutorial"
#~ "/resync-replica-set-member>`."
#~ msgstr ""

# 4033e8f085d0445e80d6289d3409e350
#~ msgid "4"
#~ msgstr ""

# ead47b67e77842e4bcc90bab2e0bdcf9
#~ msgid ":replstate:`FATAL`"
#~ msgstr ""

# a0ec364ef1be4bdfaaf7aae6788c6802
#~ msgid "Cannot vote. Has encountered an unrecoverable error."
#~ msgstr ""

# e3fe3014611f4d358483b48767fa4a50
#~ msgid ""
#~ "Cannot vote. Forks replication and "
#~ "election threads before becoming a "
#~ "secondary."
#~ msgstr ""

# c28fa52f51c64b79a4977da6321528c9
#~ msgid "Cannot vote. Has never connected to the replica set."
#~ msgstr ""

# fbbd566c25154ce2ab19d5e9a3ff16ac
#~ msgid ""
#~ "Can vote. :ref:`Arbiters <replica-set-"
#~ "arbiters>` do not replicate data and "
#~ "exist solely to participate in "
#~ "elections."
#~ msgstr ""

# f23ed17ef93840a8b8d1bcb3248c6315
#~ msgid "Cannot vote. Is not accessible to the set."
#~ msgstr ""

# cd9293adefd244988650f5021c38c6d1
#~ msgid "Can vote. Performs a :doc:`rollback </core/replica-set-rollbacks>`."
#~ msgstr ""

# a5b8a1e9bd5044f4a02a3f99a0848531
#~ msgid "Cannot vote. Was once in the replica set but has now been removed."
#~ msgstr ""

# 1d958aed442d485e8ac8063471a44b62
#~ msgid ""
#~ "Members in :replstate:`PRIMARY` state accept"
#~ " write operations. A replica set has"
#~ " only one primary at a time. A"
#~ " :replstate:`SECONDARY` member becomes primary"
#~ " after an :ref:`election <replica-set-"
#~ "elections>`. Members in the "
#~ ":replstate:`PRIMARY` state are eligible to "
#~ "vote."
#~ msgstr ""

# 7cfe54c68c6744fc945ad6d703ffaef2
#~ msgid ""
#~ "Members in :replstate:`ARBITER` state do "
#~ "not replicate data or accept write "
#~ "operations. They are eligible to vote,"
#~ " and exist solely to break a "
#~ "tie during elections. Replica sets "
#~ "should only have a member in the"
#~ " :replstate:`ARBITER` state if the set "
#~ "would otherwise have an even number "
#~ "of members, and could suffer from "
#~ "tied elections. Like primaries, there "
#~ "should only be at most one arbiter"
#~ " in any replica set."
#~ msgstr ""

# 46620b13c9054cbf8e02179358e4b6ec
#~ msgid "Initialization States"
#~ msgstr ""

# 2f9c52b4e0574cc08d264c7a4efc7842
#~ msgid ""
#~ "Each member of a replica set "
#~ "starts up in :replstate:`STARTUP` state. "
#~ ":program:`mongod` then loads that member's "
#~ "replica set configuration, and transitions "
#~ "the member's state to :replstate:`STARTUP2`."
#~ " Members in :replstate:`STARTUP` are not"
#~ " eligible to vote."
#~ msgstr ""

# 8f70a1d6cb6d49b28e839aefeeb61bb7
#~ msgid ""
#~ "Each member of a replica set "
#~ "enters the :replstate:`STARTUP2` state as "
#~ "soon as :program:`mongod` finishes loading "
#~ "that member's configuration. While in "
#~ "the :replstate:`STARTUP2` state, the member"
#~ " creates threads to handle internal "
#~ "replication operations. Members are in "
#~ "the :replstate:`STARTUP2` state for a "
#~ "short period of time before entering "
#~ "the :replstate:`RECOVERING` state. Members in"
#~ " the :replstate:`STARTUP2` state are not"
#~ " eligible to vote."
#~ msgstr ""

# e6f838bf5fe64ebf886ba777e3f54645
#~ msgid ""
#~ "A member of a replica set enters"
#~ " :replstate:`RECOVERING` state when it is"
#~ " not ready to accept reads. The "
#~ ":replstate:`RECOVERING` state can occur during"
#~ " normal operation, and doesn't necessarily"
#~ " reflect an error condition.  Members "
#~ "in the :replstate:`RECOVERING` state are "
#~ "eligible to vote in elections, but "
#~ "is not eligible to enter the "
#~ ":replstate:`PRIMARY` state."
#~ msgstr ""

# 75f24bafca9146eca98f2dc38ff45744
#~ msgid ""
#~ "During startup, members transition through "
#~ ":replstate:`RECOVERING` after :replstate:`STARTUP2` "
#~ "and before becoming :replstate:`SECONDARY`."
#~ msgstr ""

# e8745428b91e4b06975266b610ccb70d
#~ msgid ""
#~ "During normal operation, if a "
#~ ":term:`secondary` falls behind the other "
#~ "members of the replica set, it may"
#~ " need to :doc:`resync </tutorial/resync-"
#~ "replica-set-member>` with the rest of"
#~ " the set. While resyncing, the member"
#~ " enters the :replstate:`RECOVERING` state."
#~ msgstr ""

# 5a93d29da69f44888e7fb3c32510bb88
#~ msgid ""
#~ "Whenever the replica set replaces a "
#~ ":term:`primary` in an election, the old"
#~ " primary's data collection may contain "
#~ "documents that did not have time "
#~ "to replicate to the :term:`secondary` "
#~ "members. In this case the member "
#~ "rolls back those writes. During "
#~ ":doc:`rollback </core/replica-set-rollbacks>`, "
#~ "the member will have :replstate:`RECOVERING`"
#~ " state."
#~ msgstr ""

# 62751929f2f7461298f16aeaa374a9f9
#~ msgid ""
#~ "On secondaries, the :dbcommand:`compact` and"
#~ " :dbcommand:`replSetMaintenance` commands force "
#~ "the secondary to enter :replstate:`RECOVERING`"
#~ " state. This prevents clients from "
#~ "reading during those operations."
#~ msgstr ""

# b5b19b1102c84605a31793195cca6ef1
#~ msgid ""
#~ "Members that encounter an unrecoverable "
#~ "error enter the :replstate:`FATAL` state. "
#~ "Members in this state requires "
#~ "administrator intervention."
#~ msgstr ""

# b65cdf5f8e554aa98003025b49718361
#~ msgid ""
#~ "Members that lose their connection to"
#~ " the replica set enter the "
#~ ":replstate:`DOWN` state."
#~ msgstr ""

# 87e195c1dc8a4bc3801ef0ac66d5425b
#~ msgid ""
#~ "When a :replstate:`SECONDARY` rolls back "
#~ "a write operation after transitioning "
#~ "from :replstate:`PRIMARY`, it enters the "
#~ ":replstate:`ROLLBACK` state. See :doc:`/core"
#~ "/replica-set-rollbacks`."
#~ msgstr ""

