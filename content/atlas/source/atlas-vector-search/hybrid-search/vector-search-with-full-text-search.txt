.. _avs-reciprocal-rank-fusion:

===================================================================
Perform Hybrid Search with {+avs+} and |fts|
===================================================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. facet::
   :name: programming_language
   :values: javascript/typescript, shell

.. meta::
   :keywords: MongoDB vector search, vector search, $vectorSearch, $vectorSearch pipeline stage, MongoDB vector search pipeline stage, MongoDB vector search query, MongoDB vector search index, $vectorSearch filter examples, $vectorSearch query examples, $vectorSearch pipeline stage examples, approximate nearest neighbor search, sematic search, $search, MongoDB search, $unionWith
   :description: Learn how to perform a hybrid search on your vector embeddings that combines full-text and semantic search to return relevant results from your Atlas cluster.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol
   
.. |prereq-link| replace:: :ref:`common prerequisites <avs-tutorials-prereqs>` 

This tutorial demonstrates a hybrid search that is an aggregation of
full-text and semantic search for the same query criteria. While
full-text is effective in finding exact matches for query terms,
semantic search provides the added benefit of identifying semantically
similar documents even if the documents don't contain the exact query
term. This ensures that synonymous and contextually similar matches are
also included in the combined results of both methods of search.

Conversely, if you have tokens for proper nouns or specific keywords in
your dataset that you don't expect to be considered in the training of
an embedding model in the same context that they are used in your
dataset, your vector search might benefit from being combined with a
full-text search.   

You can also set weights for each method of search per query. Based on
whether full-text or semantic search results are most relevant and
appropriate for a query, you can increase the weight for that search
method per query. 

About the Tutorial 
------------------

This tutorial demonstrates how to run a hybrid search combining {+avs+}
and |fts| queries on the ``sample_mflix.embedded_movies`` collection,
which contains details about movies, for unified search results.
Specifically, this tutorial takes you through the following steps: 

1. Create a {+avs+} index on the ``plot_embedding_voyage_3_large``
   field. This field contains vector embeddings that represent the
   summary of a movie's plot. 
#. Create a |fts| index on the ``title`` field in the
   ``sample_mflix.embedded_movies`` collection. This field contains the 
   movie's name as a text string. 
#. Run a query that uses reciprocal rank fusion to combine the results
   from a :pipeline:`$vectorSearch` query against the
   ``plot_embedding_voyage_3_large`` field and a :pipeline:`$search`
   query against the ``title`` field.

Prerequisites 
~~~~~~~~~~~~~

Before you begin, complete the |prereq-link|. You must have the
:authrole:`Project Data Access Admin` access to the project to create
{+avs+} and |fts| indexes.

Create the {+avs+} and {+fts+} Indexes 
-----------------------------------------------------------

This section demonstrates how to create the following indexes on the
fields in the ``sample_mflix.embedded_movies`` collection: 

- a {+avs+} index on the ``plot_embedding_voyage_3_large`` field for
  running vector queries against that field. 
- a |fts| index on the ``title`` field for running full-text search
  against that field.

Procedure
~~~~~~~~~

.. include:: /includes/avs/rrf-tutorial/steps-avs-rrf-tutorial-create-index-mongosh.rst

Run a Combined Semantic Search and Full-Text Search Query Using ``$rankFusion`` 
-------------------------------------------------------------------------------

This section demonstrates how to query the data in the
``sample_mflix.embedded_movies`` collection for *star wars* in the
``plot_embedding_voyage_3_large`` and ``title`` fields by using the
:pipeline:`$vectorSearch` and :pipeline:`$search` pipeline stages inside
the ``$rankFusion`` stage to re-sort the documents in the
results. The ``$rankFusion`` stage ensures that documents appearing in
both searches appear at the top of the combined results.  

Procedure 
~~~~~~~~~

.. include:: /includes/avs/rrf-tutorial/steps-avs-rrf-shell-query.rst

About the Query 
~~~~~~~~~~~~~~~

.. include:: /includes/search-shared/extracts/rrf-query-intro.rst 

Query Weights
`````````````

.. include:: /includes/search-shared/extracts/rrf-query-variables.rst 

Query Stages
````````````

.. include:: /includes/search-shared/extracts/rrf-query-stages.rst 
   
Run a Combined Semantic Search and Full-Text Search Query Using ``$scoreFusion`` 
--------------------------------------------------------------------------------

This section demonstrates how to query the data in the
``sample_mflix.embedded_movies`` collection for *star wars* in the
``plot_embedding_voyage_3_large`` and ``title`` fields by using the
:pipeline:`$vectorSearch` and :pipeline:`$search` pipeline stages inside
the ``$scoreFusion`` stage to re-sort the documents in the
results based on their combined scores. The ``$scoreFusion`` stage
uses mathematical expressions to combine the scores of a document and
influence the position of the document in the results.  

Procedure 
~~~~~~~~~

.. include:: /includes/avs/score-fusion-tutorial/steps-mongosh-query.rst

About the Query 
~~~~~~~~~~~~~~~

.. include:: /includes/search-shared/extracts/score-fusion-query-intro.rst 

Query Weights
`````````````

.. include:: /includes/search-shared/extracts/score-fusion-query-variables.rst 

Query Stages
````````````

.. include:: /includes/search-shared/extracts/score-fusion-query-stages.rst 
