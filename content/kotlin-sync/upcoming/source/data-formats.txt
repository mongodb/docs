.. _kotlin-sync-data-formats:

========================
Specialized Data Formats
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: bson, data, class, date, time 

.. toctree::
   :titlesonly:
   :maxdepth: 1

   Data Classes </data-formats/data-format-data-class>
   Kotlin Serialization </data-formats/serialization>
   Codecs </data-formats/codecs>
   BSON </data-formats/bson>
   Time Series </data-formats/time-series>

..     TODO: /data-formats/extended-json

Overview
--------

The {+driver-short+} supports the ``kotlinx.serialization`` library for
serializing and deserializing {+language+} objects. You can use this
library to convert between MongoDB documents and different data formats
in your application. To learn more about serialization, see the
:ref:`kotlin-sync-serialization` guide.

As an alternative to using {+language+} serialization, you can define
and implement custom ``Codec`` types to support encoding and decoding of
your {+language+} objects. To learn more, see the :ref:`kotlin-sync-codecs` guide.

You can use several types of specialized document data formats in your
application. To learn how to work with these data formats, see the following
sections:

- Learn how to model your documents as {+language+} data classes in the
  :ref:`kotlin-sync-data-format-data-classes` guide.
- Learn how to work with the BSON data format in the :ref:`kotlin-sync-bson` guide.
- Learn how to store and interact with time series data in the :ref:`kotlin-sync-time-series` guide.

.. TODO: Uncomment these as pages get built
.. - Learn how to use the Extended JSON format in the :ref:`kotlin-sync-extended-json` guide.
