# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replication-introduction.txt:5
# f6898de1089444cd925e8f698a6c4e36
msgid "Replication Introduction"
msgstr ""

#: ../source/core/replication-introduction.txt:0
# 911539ad063d4e52914583214b8f855c
msgid "On this page"
msgstr ""

#: ../source/core/replication-introduction.txt:15
# f62b865957944ba8992880fa565215cb
msgid "Replication is the process of synchronizing data across multiple servers."
msgstr ""

#: ../source/core/replication-introduction.txt:19
# 4522e83b2da3410eb247ddf956afd9b6
msgid "Redundancy and Data Availability"
msgstr ""

#: ../source/core/replication-introduction.txt:21
# f7843b3e14314ea4aeab6a57a6b61acf
msgid "Replication provides redundancy and increases data availability. With multiple copies of data on different database servers, replication provides a level of fault tolerance against the loss of a single database server."
msgstr ""

#: ../source/core/replication-introduction.txt:26
# bff43105046944f4812f592ac6822f9b
msgid "In some cases, replication can provide increased read capacity as clients can send read operations to different servers. Maintaining copies of data in different data centers can increase data locality and availability for distributed applications. You can also maintain additional copies for dedicated purposes, such as disaster recovery, reporting, or backup."
msgstr ""

#: ../source/core/replication-introduction.txt:34
# 235d753035b44f278743f3a21231a6f3
msgid "Replication in MongoDB"
msgstr ""

#: ../source/core/replication-introduction.txt:36
# d2f63b70942244c99957dc3d6c4b406d
msgid "A replica set is a group of :program:`mongod` instances that maintain the same data set. A replica set contains several data bearing nodes and optionally one arbiter node. Of the data bearing nodes, one and only one member is deemed the primary node, while the other nodes are deemed secondary nodes."
msgstr ""

#: ../source/core/replication-introduction.txt:42
# 24f92ce9eb6b47cc99e43fa48b10ba41
msgid "The :doc:`primary node </core/replica-set-primary>` receives all write operations. A replica set can have only one primary capable of confirming writes with :writeconcern:`{ w: \"majority\" } <\"majority\">` write concern; although in some circumstances, another mongod instance may transiently believe itself to also be primary. [#edge-cases-2-primaries]_ The primary records all changes to its data sets in its operation log, i.e. :doc:`oplog </core/replica-set-oplog>`. For more information on primary node operation, see :doc:`/core/replica-set-primary`."
msgstr ""

#: ../source/core/replication-introduction.txt:54
# c33990fd71ca45998b70c4b8b0fbafb7
msgid "The :doc:`secondaries </core/replica-set-secondary>` replicate the primary's oplog and apply the operations to their data sets such that the secondaries' data sets reflect the primary's data set. If the primary is unavailable, an eligible secondary will hold an election to elect itself the new primary. For more information on secondary members, see :doc:`/core/replica-set-secondary`."
msgstr ""

#: ../source/core/replication-introduction.txt:63
# b53bba2b224e434faffd213e0c4ba3de
msgid "You may add an extra :program:`mongod` instance to a replica set as an :doc:`arbiter </core/replica-set-arbiter>`. Arbiters do not maintain a data set. The purpose of an arbiter is to maintain a quorum in a replica set by responding to heartbeat and election requests by other replica set members. Because they do not store a data set, arbiters can be a good way to provide replica set quorum functionality with a cheaper resource cost than a fully functional replica set member with a data set. If your replica set has an even number of members, add an arbiter to obtain a majority of votes in an election for primary. Arbiters do not require dedicated hardware. For more information on arbiters, see :doc:`/core/replica-set-arbiter`."
msgstr ""

#: ../source/core/replication-introduction.txt:77
# 5cde2c287f5c4d2f971a476d556aa248
msgid "An :doc:`arbiter </core/replica-set-arbiter>` will always be an arbiter whereas a :doc:`primary </core/replica-set-primary>` may step down and become a :doc:`secondary </core/replica-set-secondary>` and a :doc:`secondary </core/replica-set-secondary>` may become the primary during an election."
msgstr ""

#: ../source/core/replication-introduction.txt:86
# 3d77860c70b342748bd090faad8033d0
msgid "Asynchronous Replication"
msgstr ""

#: ../source/core/replication-introduction.txt:88
# 5287d1fcb09f4e85ac65081cb785f3a0
msgid "Secondaries apply operations from the primary asynchronously. By applying operations after the primary, sets can continue to function despite the failure of one or more members. For more information on replication mechanics, see :ref:`replica-set-oplog` and :ref:`replica-set-sync`."
msgstr ""

#: ../source/core/replication-introduction.txt:95
# b20122a93bc7457dbd086aa4f09e8153
msgid "Automatic Failover"
msgstr ""

#: ../source/core/replication-introduction.txt:97
# 689cd2c280ca4fa6ae8503f163fe8ce7
msgid "When a primary does not communicate with the other members of the set for more than 10 seconds, an eligible secondary will hold an election to elect itself the new primary. The first secondary to hold an election and receive a majority of the members' votes becomes primary."
msgstr ""

#: ../source/includes/fact-replica-set-protocolVersion1.rst:3
# eb583da02e774db29bcda64a68a23f0e
msgid "MongoDB introduces a version 1 of the replication protocol (:rsconf:`protocolVersion: 1 <protocolVersion>`) to reduce replica set failover time and accelerates the detection of multiple simultaneous primaries. New replica sets will, by default, use :rsconf:`protocolVersion: 1 <protocolVersion>`. Previous versions of MongoDB use version 0 of the protocol."
msgstr ""

#: ../source/core/replication-introduction.txt:106
# 7150ab70441749a7a081175a36aedde5
msgid "See :ref:`replica-set-elections` and :ref:`replica-set-rollbacks` for more information."
msgstr ""

#: ../source/core/replication-introduction.txt:110
# 208987a22aa147abbabb7ebbf4ddf4b8
msgid "Read Operations"
msgstr ""

#: ../source/core/replication-introduction.txt:112
# 70222abfae6540eaa1bf87ad3b46119b
msgid "By default, clients read from the primary [#edge-cases-2-primaries]_; however, clients can specify a :doc:`read preference </core/read-preference>` to send read operations to secondaries. :ref:`Asynchronous replication <asynchronous-replication>` to secondaries means that reads from secondaries may return data that does not reflect the state of the data on the primary. For information on reading from replica sets, see :doc:`/core/read-preference`."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-read-uncommitted.rst:1
# bd8df0205c6e43d481c0db49d2b35879
msgid "In MongoDB, clients can see the results of writes before the writes are :term:`durable`:"
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
# fa51c7f76ebe44d9b70a84e90b0f8a17
msgid "Regardless of :doc:`write concern </reference/write-concern>`, other clients using :readconcern:`\"local\"` (i.e. the default) readConcern can see the result of a write operation before the write operation is acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:6
# 57530d4d1c604b30ad2d1eb034a9f612
msgid "Clients using :readconcern:`\"local\"` (i.e. the default) readConcern can read data which may be subsequently :doc:`rolled back </core/replica-set-rollbacks>`."
msgstr ""

#: ../source/core/replication-introduction.txt:122
# 5009fee8937a411c807e3db8761474ea
msgid "For more information on read isolations, consistency and recency for MongoDB, see :doc:`/core/read-isolation-consistency-recency`."
msgstr ""

#: ../source/core/replication-introduction.txt:126
# 34ee4436e1e141ea96ebd1b928ec6022
msgid "Additional Features"
msgstr ""

#: ../source/core/replication-introduction.txt:128
# 2a93dd098c1f4f9188d4b4681702577d
msgid "Replica sets provide a number of options to support application needs. For example, you may deploy a replica set with :doc:`members in multiple data centers </core/replica-set-architecture-geographically-distributed>`, or control the outcome of elections by adjusting the :rsconf:`members[n].priority` of some members. Replica sets also support dedicated members for reporting, disaster recovery, or backup functions."
msgstr ""

#: ../source/core/replication-introduction.txt:137
# 8b61f148ba47434cb5c1bf424641d4eb
msgid "See :ref:`replica-set-secondary-only-members`, :ref:`replica-set-hidden-members` and :ref:`replica-set-delayed-members` for more information."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
# 7f253d7d9bc04a2ba1c5920fffc699fc
msgid "In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may *transiently* believe that they are the primary, but at most, one of them will be able to complete writes with :writeconcern:`{ w: \"majority\" } <\"majority\">` write concern. The node that can complete :writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current primary, and the other node is a former primary that has not yet recognized its demotion, typically due to a :term:`network partition`. When this occurs, clients that connect to the former primary may observe stale data despite having requested read preference :readmode:`primary`, and new writes to the former primary will eventually roll back."
msgstr ""

#: ../source/includes/extracts/additional-resources-replication-introduction.rst:4
# 5b4a94698d5d4feb8e6559ea6a662335
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-replication-introduction.rst:6
# 2121829089644ac4aa3054986842555f
msgid "`Quick Reference Cards <https://www.mongodb.com/lp/misc/quick-reference-cards?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-replication-introduction.rst:7
# d178c395a34240adb8faafbc37a7c9b2
msgid "`Webinar: Managing Your Mission Critical App - Ensuring Zero Downtime <http://www.mongodb.com/webinar/managing-mission-critical-app-downtime?jmp=docs>`_"
msgstr ""

