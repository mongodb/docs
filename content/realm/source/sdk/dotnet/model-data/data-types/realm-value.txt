.. meta::
   :robots: noindex, nosnippet

.. _realmvalue:

=====================
RealmValue - .NET SDK
=====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionchanged:: 12.2.0

   ``RealmValue`` can hold lists and dictionaries of mixed data.

The ``RealmValue`` data type is a mixed data type, and can represent any
other valid Realm data type except an embedded object or a set. You can create collections
(lists, sets, and dictionaries) of type ``RealmValue``:

.. literalinclude:: /examples/generated/dotnet/DataTypesSectionExamples.snippet.realmValues.cs
   :language: csharp

.. note::

   You cannot create a nullable ``RealmValue``. However, if you want a
   ``RealmValue`` property to contain a null value, you can
   use the special ``RealmValue.Null`` property.

Create a RealmValue Property
----------------------------

The following code demonstrates creating a ``RealmValue`` property in a class
that inherits from ``IRealmObject`` and then setting and getting the value of
that property:

.. literalinclude:: /examples/generated/dotnet/DataTypesSectionExamples.snippet.realmvalue.cs
   :language: csharp

.. _dotnet-nested-collections-realm-value:

Collections as Mixed
--------------------

In version 12.2.0 and later, a ``RealmValue`` data type can hold collections
(a list or dictionary, but *not* a set) of ``RealmValue`` elements. You can use
mixed collections to model unstructured or variable data. For more information,
refer to :ref:`<dotnet-model-unstructured-data>`.

- You can nest mixed collections up to 100 levels.
- You can query mixed collection properties and
  :ref:`register a listener for changes <dotnet-collection-notifications>`,
  as you would a normal collection.
- You can find and update individual mixed collection elements
- You *cannot* store sets or embedded objects in mixed collections.

To use mixed collections, define the ``RealmValue`` type property in your data model.
Then, set the property as a list or dictionary.
