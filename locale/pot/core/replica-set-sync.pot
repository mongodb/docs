# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replica-set-sync.txt:5
# 188eae71665a45d6ac06363ecc4b1113
msgid "Replica Set Data Synchronization"
msgstr ""

#: ../source/core/replica-set-sync.txt:9
# 3a16616360e2469bb909e7079a1618e4
msgid "In order to maintain up-to-date copies of the shared data set, members of a replica set :term:`sync` or replicate data from other members. MongoDB uses two forms of data synchronization: :ref:`initial sync <replica-set-initial-sync>` to populate new members with the full data set, and replication to apply ongoing changes to the entire data set."
msgstr ""

#: ../source/core/replica-set-sync.txt:19
# d709bb0dfbe44871a63ffd7fb92a8a0b
msgid "Initial Sync"
msgstr ""

#: ../source/core/replica-set-sync.txt:21
# 30c228b44c0a48b1a8ae41d7cdafa453
msgid "Initial sync copies all the data from one member of the replica set to another member. A member uses initial sync when the member has no data, such as when the member is new, or when the member has data but is missing a history of the set's replication."
msgstr ""

#: ../source/core/replica-set-sync.txt:26
# 7a971739c5fa47eaaae9a8bbbb805863
msgid "When you perform an initial sync, MongoDB:"
msgstr ""

#: ../source/core/replica-set-sync.txt:28
# fee5de3984ed428b9d2469a6fc6fb69b
msgid "Clones all databases. To clone, the :program:`mongod` queries every collection in each source database and inserts all data into its own copies of these collections.  At this time, ``_id`` indexes are also built. The clone process only copies valid data, omitting invalid documents."
msgstr ""

#: ../source/core/replica-set-sync.txt:34
# 14c04ff68b0540dda6664a356489092a
msgid "Applies all changes to the data set. Using the oplog from the source, the :program:`mongod` updates its data set to reflect the current state of the replica set."
msgstr ""

#: ../source/core/replica-set-sync.txt:38
# 450061b53fd34656b2898d002a110f63
msgid "Builds all indexes on all collections (except ``_id`` indexes, which were already completed)."
msgstr ""

#: ../source/core/replica-set-sync.txt:41
# 52446cfbe11344bfafa9d22dfec7feb4
msgid "When the :program:`mongod` finishes building all index builds, the member can transition to a normal state, i.e. :term:`secondary`."
msgstr ""

#: ../source/core/replica-set-sync.txt:44
# 502ffdc3f8104acabe4a3120c0927147
msgid "When the clone process omits an invalid document from the sync, MongoDB writes a message to the logs that begins with ``Cloner: found corrupt document in <collection>``."
msgstr ""

#: ../source/core/replica-set-sync.txt:49
# c03946b5fd0a4501867eda0ef7f87a91
msgid "To perform an initial sync, see :doc:`/tutorial/resync-replica-set-member`."
msgstr ""

#: ../source/core/replica-set-sync.txt:55
# f73f063cae594b9dbae6b1f946a8a21c
msgid "Replication"
msgstr ""

#: ../source/core/replica-set-sync.txt:57
# 6a7a04c53ec240a98e385246a5c34716
msgid "Replica set members replicate data continuously after the initial sync. This process keeps the members up to date with all changes to the replica set's data. In most cases, secondaries synchronize from the primary. Secondaries may automatically change their *sync targets* if needed based on changes in the ping time and state of other members' replication."
msgstr ""

#: ../source/core/replica-set-sync.txt:89
# 36d69f77e7974451ab8dd79fdee5b9d2
msgid "For a member to sync from another, both members must have the same value for the :data:`~replSetGetConfig.members[n].buildIndexes` setting."
msgstr ""

#: ../source/core/replica-set-sync.txt:93
# 16f4b0e48a474d8a853913409d5bb270
msgid "Beginning in version 2.2, secondaries avoid syncing from :ref:`delayed members <replica-set-delayed-members>` and :ref:`hidden members <replica-set-hidden-members>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:98
# 1efd7dfa4bc442aaa53a50c884262674
msgid "Validity and Durability"
msgstr ""

#: ../source/core/replica-set-sync.txt:102
# b943e97e84584dc09be649051cdd2eb5
msgid "In a replica set, only the primary can accept write operations. Writing only to the primary provides :term:`strict consistency` among members."
msgstr ""

#: ../source/core/replica-set-sync.txt:105
# c43b7fda3ab244aeb19efc1736292c60
msgid ":term:`Journaling <journal>` provides single-instance write durability. Without journaling, if a MongoDB instance terminates ungracefully, you must assume that the database is in an invalid state."
msgstr ""

#: ../source/core/replica-set-sync.txt:112
# 109b6b49a9184116a9192fd7581700e6
msgid "Multithreaded Replication"
msgstr ""

#: ../source/core/replica-set-sync.txt:114
# 8388c23521f24d7fb18756a54cdaca5c
msgid "MongoDB applies write operations in batches using multiple threads to improve concurrency. MongoDB groups batches by namespace and applies operations using a group of threads, but always applies the write operations to a namespace in order."
msgstr ""

#: ../source/core/replica-set-sync.txt:119
# 25960c48e16e4444b7865ae2230dacdb
msgid "While applying a batch, MongoDB blocks all reads. As a result, secondaries can never return data that reflects a state that never existed on the primary."
msgstr ""

#: ../source/core/replica-set-sync.txt:124
# 42c965a22c6a489da6d4ab3f05608e01
msgid "Pre-Fetching Indexes to Improve Replication Throughput"
msgstr ""

#: ../source/core/replica-set-sync.txt:126
# a0f0169457bf4d94a01f33e871e0fee3
msgid "To help improve the performance of applying oplog entries, MongoDB fetches memory pages that hold affected data and indexes. This *pre-fetch* stage minimizes the amount of time MongoDB holds the write lock while applying oplog entries. By default, secondaries will pre-fetch all :ref:`indexes`."
msgstr ""

#: ../source/core/replica-set-sync.txt:132
# fd6e3d7cf02643e7ad3693487444dbd2
msgid "Optionally, you can disable all pre-fetching or only pre-fetch the index on the ``_id`` field. See the :setting:`~replication.secondaryIndexPrefetch` setting for more information."
msgstr ""

