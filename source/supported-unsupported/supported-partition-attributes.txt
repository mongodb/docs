.. _datalake-path-attribute-types:

===================================
Supported Partition Attribute Types
===================================

.. default-domain:: mongodb

.. include:: /includes/fact-data-lake-beta.rst

The following table lists the supported data types for partition attributes 
in the :datalakeconf:`~databases.[n].collections.[n].dataSources.[n].path` and 
an example :datalakeconf:`~databases.[n].collections.[n].dataSources.[n].path` 
for each data type:

.. list-table::
   :header-rows: 1
   :widths: 10 30 60

   * - Key
     - Data Type
     - Example

   * - ``string``
     - Parses the filename as a string. This is the default data type. 
       If a data type is not specified for a partition attribute, 
       {+data-lake-short+} interprets the partition attribute as a string.
     - filename: ``/employees/949-555-0195.json``

       path: ``/employees/{phone string}``

       OR

       path: ``employees/{phone}``

       In the above ``path`` examples, ``phone`` is interpreted 
       as a string.

   * - ``int``
     - Parses the filename as an integer.
     - filename: ``/zipcodes/90210.json``

       path: ``/zipcodes/{zipcode int}``

       In the above example, ``zipcode`` is interpreted 
       as an integer.

   * - ``isodate``
     - Parses the filename in `RFC 3339 <https://tools.ietf.org/html/rfc3339>`_ 
       format as an ISO-8601 format date. 

     - filename: ``/metrics/2019-01-03T00:00:00Z.json``

       path: ``/metrics/{startTimestamp isodate}``

       In the above example, ``startTimestamp`` is interpreted 
       as an :manual:`ISODate </reference/glossary/#term-isodate>`. 
       Partitions with the following date formats are also supported 
       by the :manual:`ISODate </reference/glossary/#term-isodate>` 
       attribute: 

       .. code-block:: none 
          :copyable: false

          "2020-01-02T15:04:05Z07:00"
          "2020-01-02T15:04:05.000000Z07:00"
          "2020-01-02"
          "2020-01-02T15:04:05.000000-0700"
          "2020-01-02T15:04:05-0700"
          "2020-01-02T15:04Z07:00"
          "2020-01-02T15:04-0700"
          "2020-01-02Z07:00"
          "2020-01-02-0700"
          "20200102T15:04:05.000000Z07:00"
          "20200102T15:04:05.000000-0700"
          "20200102T15:04:05Z07:00"
          "20200102T15:04:05-0700"
          "20200102T15:04Z07:00"
          "20200102T15:04-0700"
          "20200102Z07:00"
          "20200102-0700"
          "20200102"

   * - ``epoch_secs``
     - Parses the filename as a Unix timestamp in seconds.
     - filename: ``/metrics/1549046112.json``

       path: ``/metrics/{startTimestamp epoch_secs}``

       In the above example, ``startTimestamp`` is interpreted 
       as a Unix timestamp in seconds.

   * - ``epoch_millis``
     - Parses the filename as a Unix timestamp in milliseconds.
     - filename: ``/metrics/1549046112000.json``

       path: ``/metrics/{startTimestamp epoch_millis}``

       In the above example, ``startTimestamp`` is interpreted 
       as a Unix timestamp in milliseconds.

   * - ``objectid``
     - Parses the filename as an 
       :manual:`ObjectId </reference/method/ObjectId/>`. 
     - filename: ``/metrics/507f1f77bcf86cd799439011.json``

       path: ``/metrics/{objid objectid}``

       In the above example, ``objid``  is interpreted 
       as an :manual:`ObjectId </reference/method/ObjectId/>`.

   * - ``uuid`` 
     - Parses the filename as a `UUID of binary subtype 
       4 <http://bsonspec.org/spec.html>`__.
     - filename: ``/metrics/3b241101-e2bb-4255-8caf-4136c566a962.json``

       path: ``/metrics/{myUuid uuid}``

       In the above example, ``myUuid``  is interpreted 
       as a `UUID <http://bsonspec.org/spec.html>`__ of binary subtype 4.

.. note:: 

   {+adl+} supports the `Package Syntax 
   <https://golang.org/pkg/regexp/syntax/>`__ for regular expressions 
   in the path to the filename.
