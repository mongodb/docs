# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/operator/aggregation/sort.txt:3
# 4059023aebcc4f63966a8d4364cdaaea
msgid "$sort (aggregation)"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:8
# e9e11c5c7f3f4a5abe96fc350505225f
msgid "Definition"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:12
# 443cad0f06a8427fb91d69e35a00ada0
msgid "Sorts all input documents and returns them to the pipeline in sorted order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:15
# 9576cd203da44d7ba25c7b3e22ba30a7
msgid "The :pipeline:`$sort` stage has the following prototype form:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:21
# aef14b4818e045e8a6228b914dd2bd4a
msgid ":pipeline:`$sort` takes a document that specifies the field(s) to sort by and the respective sort order. ``<sort order>`` can have one of the following values:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:25
# 2564d35c58fc4753a3cb4cdea15f84a6
msgid "``1`` to specify ascending order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:27
# b07b2f80001843b08ee039fe130d9519
msgid "``-1`` to specify descending order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:29
# b57d5d20d21c4abfb084d1d686771a26
msgid "``{ $meta: \"textScore\" }`` to sort by the computed ``textScore`` metadata in descending order. See :ref:`sort-pipeline-metadata` for an example."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:34
# dd96e62c58c649d5b19ced84b49f1f28
msgid "Examples"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:39
# ce4e183cf05c479da817dd0446478c17
msgid "Ascending/Descending Sort"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:41
# 37d74fb9e3cd4bf69cc6f203e11b272f
msgid "To  ascending order for a field or fields to sort by and a value of ``1`` or ``-1`` to specify an ascending or descending sort respectively, as in the following example:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:53
# 775650d904504c1dafa5efc79e5a4a42
msgid "This operation sorts the documents in the ``users`` collection, in descending order according by the ``age`` field and then in ascending order according to the value in the ``posts`` field."
msgstr ""

#: ../source/includes/fact-sort-order.rst:1
# 87ababf11bac470a82e8314909684f96
msgid "When comparing values of different :term:`BSON` types, MongoDB uses the following comparison order, from lowest to highest:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:4
# 009b119e6c5447628eb757915ccc5370
msgid "MinKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:5
# d790543c447a43f7b21aa5324767a59b
msgid "Null"
msgstr ""

#: ../source/includes/fact-sort-order.rst:6
# b26ac0cdee884f3b8195b6a0f35059f9
msgid "Numbers (ints, longs, doubles)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:7
# e8afd6916403413b86f3f585880c791e
msgid "Symbol, String"
msgstr ""

#: ../source/includes/fact-sort-order.rst:8
# 02ac1808cdf640c0b78b3c015218d227
msgid "Object"
msgstr ""

#: ../source/includes/fact-sort-order.rst:9
# fd0b89543c8c4176b22cb3e5a260ae64
msgid "Array"
msgstr ""

#: ../source/includes/fact-sort-order.rst:10
# d9606844752043baaf80acda2878e9fb
msgid "BinData"
msgstr ""

#: ../source/includes/fact-sort-order.rst:11
# 7308b99e923c4dcfa365bd9320a74834
msgid "ObjectId"
msgstr ""

#: ../source/includes/fact-sort-order.rst:12
# a6968bca6b8a4cc795cd5939969f8f5c
msgid "Boolean"
msgstr ""

#: ../source/includes/fact-sort-order.rst:13
# 54e99d600fc341448b38a2e70cdf3593
msgid "Date"
msgstr ""

#: ../source/includes/fact-sort-order.rst:14
# deb85cce04b34fcaa29c00bb11877e0a
msgid "Timestamp"
msgstr ""

#: ../source/includes/fact-sort-order.rst:15
# f6ddd18acfaa49e9aa020883259225b2
msgid "Regular Expression"
msgstr ""

#: ../source/includes/fact-sort-order.rst:16
# c103f01334fc4a448558ea1ad08bbfb0
msgid "MaxKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:18
# ede496b4f9a3473594f600b1622f621c
msgid "MongoDB treats some types as equivalent for comparison purposes. For instance, numeric types undergo conversion before comparison."
msgstr ""

#: ../source/includes/fact-sort-order.rst:21
# 23a0004efbe847dbb7e0b455acda8af5
msgid "Date objects sort before Timestamp objects. Previously Date and Timestamp objects sorted together."
msgstr ""

#: ../source/includes/fact-sort-order.rst:25
# 0548927a7df048c19bcd2fac643bcf77
msgid "The comparison treats a non-existent field as it would an empty BSON Object. As such, a sort on the ``a`` field in documents ``{ }`` and ``{ a: null }`` would treat the documents as equivalent in sort order."
msgstr ""

#: ../source/includes/fact-sort-order.rst:29
# d956329007964cd485c73a8f2e286c64
msgid "With arrays, a less-than comparison or an ascending sort compares the smallest element of arrays, and a greater-than comparison or a descending sort compares the largest element of the arrays. As such, when comparing a field whose value is a single-element array (e.g. ``[ 1 ]``) with non-array fields (e.g. ``2``), the comparison is between ``1`` and ``2``. A comparison of an empty array (e.g. ``[ ]``) treats the empty array as less than ``null`` or a missing field."
msgstr ""

#: ../source/includes/fact-sort-order.rst:37
# 755ecc3d5ef4483d9d720e38b42ccbd6
msgid "MongoDB sorts ``BinData`` in the following order:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:39
# b45c4576c04741f299eb7fbab499e82f
msgid "First, the length or size of the data."
msgstr ""

#: ../source/includes/fact-sort-order.rst:41
# 44196facb30640fb8506f431654eca53
msgid "Then, by the BSON one-byte subtype."
msgstr ""

#: ../source/includes/fact-sort-order.rst:43
# 6a8d06a79c564630bc0c34cd4022d71d
msgid "Finally, by the data, performing a byte-by-byte comparison."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:62
# 1bfe4b2ff2494402879dc1c63621aabe
msgid "Metadata Sort"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:64
# 8c1c03ff528e4d5b89669a3e6795e3ee
msgid "Specify in the ``{ <sort-key> }`` document, a new field name for the computed metadata and specify the :expression:`$meta` expression as its value, as in the following example:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:77
# 28a69f2e6093455182a372010ad66a19
msgid "This operation uses the :query:`$text` operator to match the documents, and then sorts first by the ``\"textScore\"`` metadata and then by descending order of the ``posts`` field. The specified metadata determines the sort order. For example, the ``\"textScore\"`` metadata sorts in descending order. See :expression:`$meta` for more information on metadata."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:87
# 4c47c7bbc12b4c11bb64e50527d1ff4f
msgid "``$sort`` Operator and Memory"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:92
# 229945ec414949e2a4c43ef10a14aa13
msgid "``$sort`` + ``$limit`` Memory Optimization"
msgstr ""

#: ../source/includes/fact-agg-sort-limit.rst:1
# 02a3a764d66a4633838166547fedd59f
msgid "When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit` in the pipeline, the :pipeline:`$sort` operation only maintains the top ``n`` results as it progresses, where ``n`` is the specified limit, and MongoDB only needs to store ``n`` items in memory. This optimization still applies when ``allowDiskUse`` is ``true`` and the ``n`` items exceed the :ref:`aggregation memory limit <agg-memory-restrictions>`."
msgstr ""

#: ../source/includes/fact-agg-sort-limit.rst:8
# 25af5c6564294d2b9fd49b262f5a0c89
msgid "Before MongoDB 2.4, :pipeline:`$sort` would sort all the results in memory, and then limit the results to n results."
msgstr ""

#: ../source/includes/fact-optimizations-subject-to-change.rst:1
# 7ea7c730da61476cb5e43449ed78d578
msgid "Optimizations are subject to change between releases."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:101
# a763bdbc2c7d4717be88728019f5e38a
msgid "``$sort`` and Memory Restrictions"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:103
# b365556dde334c59a2a886d4951c894a
msgid "The :pipeline:`$sort` stage has a limit of 100 megabytes of RAM. By default, if the stage exceeds this limit, :pipeline:`$sort` will produce an error. To allow for the handling of large datasets, set the ``allowDiskUse`` option to ``true`` to enable :pipeline:`$sort` operations to write to temporary files. See the ``allowDiskUse`` option in :method:`db.collection.aggregate()` method and the :dbcommand:`aggregate` command for details."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:111
# 9ba1106e7afe4f2aabd9b09dcd475990
msgid "The memory limit for :pipeline:`$sort` changed from 10 percent of RAM to 100 megabytes of RAM."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:116
# 1600f371fbb345d48ab5430528388257
msgid "``$sort`` Operator and Performance"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:118
# c3a1b8e8c31e4d85871abdcc0b95acb5
msgid ":pipeline:`$sort` operator can take advantage of an index when placed at the **beginning** of the pipeline or placed **before** the :pipeline:`$project`, :pipeline:`$unwind`, and :pipeline:`$group` aggregation operators. If :pipeline:`$project`, :pipeline:`$unwind`, or :pipeline:`$group` occur prior to the :pipeline:`$sort` operation, :pipeline:`$sort` cannot use any indexes."
msgstr ""

