ref: built-in-roles-read
content: |
  Provides the ability to read data on all *non*-system collections and 
  the :data:`system.js <<database>.system.js>` collection.
  
  .. note::
  
     Starting in MongoDB 4.2, the role no longer provides privileges to
     access the :data:`system.namespaces
     <<database>.system.namespaces>` collection directly. Direct access
     to the collection has been deprecated since MongoDB 3.0.
          
     In earlier versions, the role provided the aforementioned
     privilege actions on the :data:`system.namespaces
     <<database>.system.namespaces>` collection, thereby allowing
     direct access.
     
---
ref: built-in-roles-read-write
content: |
  Provides all the privileges of the :authrole:`read` role plus ability to
  modify data on all *non*-system collections and the :data:`system.js
  <<database>.system.js>` collection.
---
ref: built-in-roles-dbAdmin
content: |
  Provides the ability to perform administrative tasks such as
  schema-related tasks, indexing, and gathering statistics. This role
  does not grant privileges for user and role management.
---
ref: built-in-roles-dbOwner
content: |
  The database owner can perform any administrative action on the database.
  This role combines the privileges granted by the :authrole:`readWrite`,
  :authrole:`dbAdmin` and :authrole:`userAdmin` roles.
---
ref: built-in-roles-userAdmin
content: |
  Provides the ability to create and modify roles and users on the
  current database. Since the :authrole:`userAdmin` role allows
  users to grant any privilege to any user, including themselves,
  the role also indirectly provides :ref:`superuser <superuser>`
  access to either the database or, if scoped to the ``admin``
  database, the cluster.
---
ref: built-in-roles-cluster-admin-roles
content: |
  The ``admin`` database includes the following roles for administering the
  whole system rather than just a single database. These roles include but are
  not limited to :term:`replica set` and :term:`sharded cluster` administrative
  functions.
---
ref: built-in-roles-clusterAdmin
content: |
  Provides the greatest cluster-management access. This role combines the
  privileges granted by the :authrole:`clusterManager`,
  :authrole:`clusterMonitor`, and :authrole:`hostManager` roles.
  Additionally, the role provides the :authaction:`dropDatabase` action.
---
ref: built-in-roles-clusterManager
content: |
  Provides management and monitoring actions on the cluster. A
  user with this role can access the ``config`` and ``local``
  databases, which are used in sharding and replication,
  respectively.
---
ref: built-in-roles-clusterMonitor
content: |
  Provides read-only access to monitoring tools, such as the |mms-home|
  and :opsmgr:`Ops Manager </>` monitoring agent.
---
ref: built-in-roles-hostMonitor
content: |
  Provides the ability to monitor and manage servers.
---
ref: built-in-roles-backup-roles
content: |
  The ``admin`` database includes the following roles for backing up and
  restoring data:
---
ref: built-in-roles-backup
content: |
  Provides minimal privileges needed for backing up data. This role
  provides sufficient privileges to use the |mms-home| backup agent,
  :opsmgr:`Ops Manager </>` backup agent, or to use
  :binary:`~bin.mongodump` to back up an entire :binary:`~bin.mongod` instance.
---
ref: built-in-roles-restore
content: |
  .. versionchanged:: 3.6

     Provides :authaction:`convertToCapped` on non-system collections.
 
  Provides the necessary privileges to restore data from backups *if* the data
  does not include :data:`system.profile <<database>.system.profile>` collection
  data and you run :binary:`~bin.mongorestore` without the :option:`--oplogReplay
  <mongorestore.--oplogReplay>` option.
  
---
ref: built-in-roles-all-database-roles
content: |
  .. versionchanged:: 3.4

  The following roles are available on the ``admin`` database and provide
  privileges which apply to all databases except ``local`` and
  ``config``:
---
ref: built-in-roles-readAnyDatabase
content: |
  Provides the same read-only privileges as :authrole:`read` on all databases
  except ``local`` and ``config``. The role also provides the
  :authaction:`listDatabases` action on the cluster as a whole.
---
ref: built-in-roles-readAnyDatabase-prior
content: |
  Prior to 3.4, :authrole:`readAnyDatabase` includes ``local`` and
  ``config`` databases. To provide ``read`` privileges on the
  ``local`` database, create a user in the ``admin`` database with
  :authrole:`read` role in the ``local`` database.
---
ref: built-in-roles-readWriteAnyDatabase
content: |
  Provides the same privileges as :authrole:`readWrite` on
  all databases except ``local`` and ``config``. The role also
  provides the :authaction:`listDatabases` action on the cluster as a
  whole.
---
ref: built-in-roles-readWriteAnyDatabase-prior
content: |
  Prior to 3.4, :authrole:`readWriteAnyDatabase` includes ``local``
  and ``config`` databases. To provide ``readWrite`` privileges on
  the ``local`` database, create a user in the ``admin`` database
  with :authrole:`readWrite` role in the ``local`` database.
---
ref: built-in-roles-dbAdminAnyDatabase
content: |
  Provides the same privileges as :authrole:`dbAdmin` on
  all databases except ``local`` and ``config``. The role also
  provides the :authaction:`listDatabases` action on the cluster as
  a whole.
---
ref: built-in-roles-dbAdminAnyDatabase-prior
content: |
  Prior to 3.4, :authrole:`dbAdminAnyDatabase` includes ``local``
  and ``config`` databases. To provide ``dbAdmin`` privileges on
  the ``local`` database, create a user in the ``admin`` database
  with :authrole:`dbAdmin` role in the ``local`` database.
---
ref: built-in-roles-userAdminAnyDatabase
content: |
  Provides the same access to user administration operations as
  :authrole:`userAdmin` on all databases except ``local`` and
  ``config``.
---
ref: built-in-roles-root
content: |
  Provides access to the operations and all the resources of the
  following roles *combined*:

  - :authrole:`readWriteAnyDatabase`
  - :authrole:`dbAdminAnyDatabase`
  - :authrole:`userAdminAnyDatabase`
  - :authrole:`clusterAdmin`
  - :authrole:`restore`
  - :authrole:`backup`
  
  Also provides the :authaction:`validate`
  privilege action on ``system.`` collections.
...