===========================
db.collection.ensureIndex()
===========================

.. default-domain:: mongodb

Definition
----------

.. method:: db.collection.ensureIndex(keys, options)

   Creates an index on the specified field if the index does not
   already exist.

   The :method:`db.collection.ensureIndex()` method has the following fields:

   .. include:: /reference/method/db.collection.ensureIndex-param.rst

   .. warning:: Index names, including their full namespace
      (i.e. ``database.collection``) cannot be longer than 128
      characters. See the :method:`db.collection.getIndexes()` field
      :data:`~system.indexes.name` for the names of existing indexes.

   The ``options`` document has one or more of the following fields:

   .. include:: /reference/method/db.collection.ensureIndex-options-param.rst

Examples
--------

Create an Ascending Index on a Single Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates an ascending index on the field
``orderDate``.

.. code-block:: javascript

   db.collection.ensureIndex( { orderDate: 1 } )

If the ``keys`` document specifies more than one field, then
:method:`db.collection.ensureIndex()` creates a :term:`compound
index`.

Create an Index on a Multiple Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates a compound index on the
``orderDate`` field (in ascending order) and the ``zipcode``
field (in descending order.)

.. code-block:: javascript

   db.collection.ensureIndex( { orderDate: 1, zipcode: -1 } )

A compound index cannot include a :ref:`hashed index <index-type-hashed>`
component.

.. note::

   The order of an index is important for supporting
   :method:`cursor.sort()` operations using the index.

.. seealso::

   - The :doc:`/indexes` section of this manual for full
     documentation of indexes and indexing in MongoDB.

   - The :ref:`create-text-index` section for more information and
     examples on creating ``text`` indexes.

Behaviors
---------

The :method:`~db.collection.ensureIndex()` method has the behaviors
described here.

- To add or change index options you must drop the index using the
  :method:`~db.collection.dropIndex()` method and issue another
  :method:`~db.collection.ensureIndex()` operation
  with the new options.

  If you create an index with one set of options, and then issue
  the :method:`~db.collection.ensureIndex()` method
  with the same index fields and different options without
  first dropping the index,
  :method:`~db.collection.ensureIndex()` will *not* rebuild the existing
  index with the new options.

- If you call multiple :method:`ensureIndex() <db.collection.ensureIndex()>`
  methods with the same index specification at the same time, only
  the first operation will succeed, all other operations will have
  no effect.

- Non-background indexing operations will block all other
  operations on a database.

.. seealso::

   In addition to the ascending/descending indexes, MongoDB provides
   the following index types to provide additional functionalities:
   
   - :ref:`index-feature-ttl` to support expiration of data,

   - :ref:`index-feature-geospatial` and
     :ref:`index-geohaystack-index` to support geospatial queries,
     and

   - :ref:`index-feature-text` to support text searches.
