.. _return-vector-search-results:

=========================
Run Vector Search Queries 
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

{+avs+} queries take the form of an 
:manual:`aggregation pipeline stage </aggregation>`. For the
:pipeline:`$vectorSearch` queries, {+avs+} returns the results of your
semantic search.

.. _vectorSearch-agg-pipeline:

Definition
----------

The :pipeline:`$vectorSearch` stage performs an |ann| search on a vector
in the specified field. The field that you want to search must be
indexed as {+avs+} :ref:`vector <avs-types-vector>` type inside a
:ref:`vectorSearch <avs-types-vector-search>` index type. 

.. pipeline:: $vectorSearch

   A ``$vectorSearch`` pipeline has the following prototype form: 

   .. code-block:: json 

      {
        "$vectorSearch": {
          "index": "<index-name>",
          "path": "<field-to-search>",
          "queryVector": [<array-of-numbers>],
          "numCandidates": <number-of-candidates>,
          "limit": <number-of-results>,
          "filter": {<filter-specification>}
        }
      }

.. _vectorSearch-agg-pipeline-options:

Fields 
------

The ``$vectorSearch`` stage takes a document with the following fields: 

.. list-table:: 
   :header-rows: 1
   :widths: 10 15 15 70

   * - Field 
     - Type 
     - Necessity 
     - Description

   * - ``filter``
     - document
     - Optional
     - Any :abbr:`MQL (MongoDB Query Language)` match expression that
       compares an indexed field with a boolean, number (not decimals),
       or string to use as a prefilter. You can use any of the following
       :manual:`comparison query
       </reference/operator/query-comparison/>` and :manual:`aggregation 
       pipeline </reference/operator/aggregation/>` operators in your
       filter: 

       - :query:`$gt`
       - :query:`$lt`
       - :query:`$gte`
       - :query:`$lte`
       - :query:`$ne`
       - :query:`$in`
       - :query:`$nin`
       - :expression:`$and`
       - :expression:`$or`

       To learn more, see :ref:`vectorSearch-agg-pipeline-filter`.

   * - ``index`` 
     - string 
     - Required 
     - Name of the {+avs+} index to use.
       
       {+avs+} doesn't return results if you misspell the index name or 
       if the specified index doesn't already exist on the {+cluster+}.

   * - ``limit`` 
     - number 
     - Required 
     - Number (of type ``int`` only) of documents to return in the
       results. Value can't exceed the value of ``numCandidates``.

   * - ``numCandidates``
     - number 
     - Required 
     - Number of nearest neighbors to use during the search. Value must 
       be less than or equal to (``<=``) ``10000``. You can't specify a
       number less than the number of documents to return (``limit``).
       
       We recommend that you specify a number higher than the number of
       documents to return (``limit``) to increase accuracy although
       this might impact latency. For example, we recommend a ratio of 
       ten to twenty nearest neighbors for a limit of only one document.
       This overrequest pattern is the recommended way to trade off
       latency and recall in your |ann| searches, and we recommend
       tuning this on your specific dataset. 

   * - ``path``
     - string 
     - Required 
     - Indexed :ref:`vectorEmbedding <fts-data-types-knn-vector>`
       type field to search. To learn more, see :ref:`Path Construction <ref-path>`.

   * - ``queryVector``
     - array of numbers 
     - Required 
     - Array of numbers of the |bson| ``double`` type that represent the
       query vector. The array size must match the number of vector
       ``dimensions`` specified in the :ref:`index definition
       <fts-data-types-knn-vector>` for the field. 

       .. note:: 

          You must embed your query with the same model that you used to
          embed the data.

.. _vectorSearch-agg-pipeline-behavior:

Behavior 
--------

:pipeline:`$vectorSearch` must be the first stage of any pipeline where it
appears. 

.. _vectorSearch-agg-pipeline-index:

{+avs+} Index
~~~~~~~~~~~~~~~~~~~~~~~~~

You must index the fields to search using the :pipeline:`$vectorSearch`
stage inside a :ref:`vectorSearch <avs-types-vector-search>` type index
definition. You can index the following types of fields in an {+avs+}
:ref:`vectorSearch <avs-types-vector-search>` type index definition: 

- Fields that contain vector embeddings as :ref:`vector
  <avs-types-vector-search>` type.  
- Fields that contain boolean, numeric, and string values as
  :ref:`filter <avs-types-vector-search>` type to enable vector search
  on pre-filtered data. 

To learn more about these 
{+avs+} field types, see :ref:`avs-types-vector-search`. 

.. _vectorSearch-agg-pipeline-score:

{+avs+} Score
~~~~~~~~~~~~~~~~~~~~~~~~~

{+avs+} assigns a score, in a fixed range from ``0`` to ``1`` only, to
every document that it returns. For ``cosine`` and ``dotProduct``
:ref:`similarities <fts-knn-vector-type-options>`, {+avs+} normalizes
the score using the following algorithm: 

.. code-block:: shell 
   :copyable: false 

   score = (1 + cosine/dot_product(v1,v2)) / 2

The score assigned to a returned document is part of the document's
metadata. To include each returned document's score along with the
result set, use a :pipeline:`$project` stage in your aggregation
pipeline. 

To retrieve the score of your {+avs+} query results, use
``vectorSearchScore`` as the value in the :manual:`$meta 
</reference/operator/aggregation/meta/>` expression. That is, after the
:pipeline:`$vectorSearch` stage, in the :pipeline:`$project` stage, the
``score`` field takes the :manual:`$meta
</reference/operator/aggregation/meta/>` expression. The expression
requires the ``vectorSearchScore`` value to return the score of
documents for the vector search. 

.. example:: 

   .. code-block:: javascript
      :copyable: false
      :linenos:
      :emphasize-lines: 11

      db.<collection>.aggregate([
        {
          "$vectorSearch": {
            <query-syntax>
          }
        },
        {
          "$project": {
            "<field-to-include>": 1,
            "<field-to-exclude>": 0,
            "score": { "$meta": "vectorSearchScore" }
          }
        }
      ]) 

.. include:: /includes/fact-avs-pre-filtering-score-impact.rst

.. _vectorSearch-agg-pipeline-filter:

{+avs+} Pre-Filter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :pipeline:`$vectorSearch` ``filter`` option matches only |bson|
boolean, string, and numeric values. You **must** index the fields that
you want to filter your data by as the :ref:`filter
<avs-types-vector-search>` type in a :ref:`vectorSearch
<avs-types-vector-search>` type index definition. Filtering your data is 
useful to narrow the scope of your semantic search and ensure that not
all vectors are considered for comparison. 

The :pipeline:`$vectorSearch` ``filter`` option supports only the following
:manual:`comparison query </reference/operator/query-comparison/>`
operators:  

- :query:`$gt`
- :query:`$lt`
- :query:`$gte`
- :query:`$lte`
- :query:`$eq` :icon-fa5:`star`

  .. note:: 

     {+avs+} also supports the short form of ``$eq``. In the short
     form, you don't need to specify ``$eq`` in the query. For example,
     consider the following ``$eq`` query: 

     .. code-block:: js 
        :copyable: false 

        { "genres": { "$eq": "Comedy" } }

     You can run the preceding query using the short form of ``$eq`` the
     following way: 

     .. code-block:: js 
        :copyable: false 

        { "genres": "Comedy"  }

- :query:`$ne` :icon-fa5:`star`
- :query:`$in`
- :query:`$nin`

:icon-fa5:`star` Only matches a single value and doesn't support an
array of values. 

The :pipeline:`$vectorSearch` ``filter`` option supports only the following 
:manual:`aggregation pipeline </reference/operator/aggregation/>`
operators: 

- :expression:`$and`
- :expression:`$or`

.. note:: 

   The :pipeline:`$vectorSearch` ``filter`` option doesn't support other
   :manual:`comparison query </reference/operator/query-comparison/>`
   and :manual:`aggregation pipeline </reference/operator/aggregation/>`
   operators.    

.. _vectorSearch-agg-pipeline-limitations:

Limitations 
~~~~~~~~~~~

:pipeline:`$vectorSearch` is supported only on |service| {+clusters+}
running the following MongoDB versions: 

- v6.0.11
- v7.0.2 and later (including :abbr:`RCs (Release Candidates)`). 

:pipeline:`$vectorSearch` can't be used in 
:manual:`view definition </core/views/>` and the following pipeline
stages:  

- :pipeline:`$lookup` sub-pipeline :icon-fa5:`star`
- :pipeline:`$unionWith` sub-pipeline :icon-fa5:`star`
- :pipeline:`$facet` pipeline stage

:icon-fa5:`star` You can pass the results of :pipeline:`$vectorSearch`
to this stage.

.. _vectorSearch-agg-pipeline-clients:

Supported Clients
~~~~~~~~~~~~~~~~~

You can run :pipeline:`$vectorSearch` queries using the |service|
:guilabel:`Data Explorer`, {+mongosh+}, and the following drivers: 

- :driver:`C# </csharp/current/>`
- :driver:`Java </java-drivers/>`
- :driver:`Node </node/current/>`
- :driver:`Pymongo </pymongo/>`

You can also use {+avs+} with local |service| deployments that you
create with the {+atlas-cli+}. To learn more, see :atlascli:`Create a
Local Atlas Deployment </atlas-cli-deploy-local>`. 

.. _vectorSearch-agg-pipeline-egs:
 
Examples 
--------

The following queries search the sample ``sample_mflix.embedded_movies``
collection using the :pipeline:`$vectorSearch` stage. The queries search
the ``plot_embedding`` field, which contains embeddings created using
OpenAI's ``text-embedding-ada-002`` embeddings model. If you added the
:ref:`sample collection <mflix-embedded_movies>` to your |service|
{+cluster+} and created the :ref:`sample indexes <knn-vector-egs>` for
the collection, you can run the following queries against the
collection. 

.. tabs-selector:: drivers

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu to set the
language of the examples in this page.

----------

.. tabs-drivers::

   .. tab::
      :tabid: shell 

      .. tabs:: 

         .. tab:: Basic Example 
            :tabid: basic 

            .. include:: /includes/extracts/avs-basic-query-desc.rst

            .. note:: 

               Pasting the ``queryVector`` in the sample code into your
               terminal might take a while depending on your machine. 

            .. io-code-block::
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/basic-query.sh
                  :language: json
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/basic-query-shell-output.js
                  :language: js
                  :linenos: 

         .. tab:: Filter Example 
            :tabid: filter 

            .. include:: /includes/extracts/avs-filter-query-desc.rst

            .. io-code-block:: 
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/filter-query.sh
                  :language: json
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/filter-query-shell-output.js 
                  :language: js
                  :linenos: 

            .. include:: /includes/extracts/avs-filter-query-results.rst          

   .. tab::
      :tabid: csharp 

      .. tabs:: 

         .. tab:: Basic Example 
            :tabid: basic 

            .. include:: /includes/extracts/avs-basic-query-desc.rst

            .. io-code-block::
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/basic-query.cs
                  :language: csharp
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/basic-query-csharp-output.js
                  :language: js
                  :linenos: 

         .. tab:: Filter Example 
            :tabid: filter 

            .. include:: /includes/extracts/avs-filter-query-desc.rst

            .. io-code-block:: 
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/filter-query.cs 
                  :language: csharp
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/filter-query-csharp-output.js  
                  :language: js
                  :linenos: 

            .. include:: /includes/extracts/avs-filter-query-results.rst    

   .. tab:: 
      :tabid: java-sync 

      .. tabs:: 

         .. tab:: Basic Example 
            :tabid: basic 

            .. include:: /includes/extracts/avs-basic-query-desc.rst

            .. io-code-block::
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/basic-query.java
                  :language: java
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/basic-query-java-output.js 
                  :language: js
                  :linenos: 

         .. tab:: Filter Example 
            :tabid: filter 

            .. include:: /includes/extracts/avs-filter-query-desc.rst

            .. io-code-block:: 
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/filter-query.java 
                  :language: java
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/filter-query-java-output.js  
                  :language: js
                  :linenos: 

            .. include:: /includes/extracts/avs-filter-query-results.rst    


   .. tab::
      :tabid: nodejs

      .. tabs:: 

         .. tab:: Basic Example 
            :tabid: basic 

            .. include:: /includes/extracts/avs-basic-query-desc.rst

            .. io-code-block::
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/basic-query.js
                  :language: js
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/basic-query-nodejs-output.js 
                  :language: js
                  :linenos: 

         .. tab:: Filter Example 
            :tabid: filter 

            .. include:: /includes/extracts/avs-filter-query-desc.rst

            .. io-code-block:: 
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/filter-query.js 
                  :language: js
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/filter-query-nodejs-output.js  
                  :language: js
                  :linenos: 

            .. include:: /includes/extracts/avs-filter-query-results.rst    


   .. tab::
      :tabid: python

      .. tabs:: 

         .. tab:: Basic Example 
            :tabid: basic 

            .. include:: /includes/extracts/avs-basic-query-desc.rst

            .. io-code-block::
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/basic-query.py 
                  :language: python
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/basic-query-python-output.js
                  :language: js
                  :linenos: 

         .. tab:: Filter Example 
            :tabid: filter 

            .. include:: /includes/extracts/avs-filter-query-desc.rst

            .. io-code-block:: 
               :copyable: true 

               .. input:: /includes/avs-examples/pipeline-stage-examples/filter-query.py 
                  :language: python
                  :linenos: 

               .. output:: /includes/avs-examples/pipeline-stage-examples/filter-query-python-output.js  
                  :language: js
                  :linenos: 

            .. include:: /includes/extracts/avs-filter-query-results.rst    

