.. _line-area-chart-ref:

====================
Line and Area Charts
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Line charts and area charts display information as a series of data
points connected by straight line segments. In area charts, the
space beneath the line segments is filled in with color, whereas in
line charts only the line segments are rendered with no additional
coloring or shading. These charts facilitate visualizing data over a
period of time (using time series data) and identifying trends and 
patterns across the entire data range. Line and area charts support 
visualizing both :ref:`discrete <discrete-charts>` and :ref:`continuous
<continuous-charts>` data.

.. _discrete-charts:

Discrete Line and Area Charts
-----------------------------

Discrete line and area charts visualize categorical or :ref:`binned
<charts-bin-data>` data with some form of logical ordering, such as
time. |charts| always :ref:`aggregates <building-charts-aggregation>`
values in discrete charts such that any number of documents can
supply values to a given plotted point. A discrete chart would be
useful to visualize a store's average annual sales over time.

Discrete Chart Encoding Channels
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Discrete line and area charts provide the following
:ref:`encoding channels <encoding-channels>`:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Encoding Channel
     - Description

   * - X Axis
     - The :guilabel:`category` encoding channel. |charts| renders a
       data point for each unique value from the field assigned to this
       encoding channel.

   * - Y Axis
     - The :guilabel:`aggregation` encoding channel. This channel
       dictates which field to aggregate on and the type of aggregation
       to perform. This ultimately dictates the position of each
       category's data point on the chart. Categories are defined by
       the :guilabel:`X Axis` encoding channel.

       .. note::

          You can aggregate upon multiple fields in your dataset to
          create multi-series charts. For more information, see
          :ref:`Multiple Field Mappings <multiple-field-mappings>`.

   * - Series
     - (*Optional*) Adds an additional :guilabel:`category` encoding
       channel to the visualization. When utilized, |charts| adds
       an additional line to the visualization for each unique
       value in this field. Use this field to map additional
       discrete categorical fields in your data, rather than multiple
       aggregated fields.

       .. note::

          This option is only available when there is a *single* field
          mapped to the :guilabel:`Y Axis aggregation`
          :ref:`encoding channel <encoding-channels>`.

.. _one-hundred-stacked-area:

100% Stacked Area Charts
~~~~~~~~~~~~~~~~~~~~~~~~

100% stacked area charts are a subtype of discrete area charts. In 100%
stacked area charts, the total area shown is normalized to 100% and
split into segments based on the category in the :guilabel:`Series`
|enc-channel|. Each series is shown as a percentage of the whole.

When using a traditional stacked area chart, it can be difficult to
compare the proportions of each series to the whole if the total
value of the chart segments greatly differ. 100% stacked charts
make it easier to compare proportions of each series to the whole by
showing relative percentages.

For a detailed example, see the :ref:`100% Stacked Area Chart Example
<one-hundred-stacked-area-example>`.

.. _continuous-charts:

Continuous Line and Area Charts
-------------------------------

In continuous line and area charts, every data point comes from a
distinct document in the :doc:`data source </data-sources>`.
Continuous charts do not support aggregation or binning. A continuous
chart would be useful to visualize stock closing prices over time,
assuming each closing price comes from a distinct document in the
dataset.


Continuous Chart Encoding Channels
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Continuous line and area charts provide the following
:ref:`encoding channels <encoding-channels>`:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Encoding Channel
     - Description

   * - X Axis
     - |charts| renders a data point for the values in this field
       from each document in the collection.

   * - Y Axis
     - For each document in the data source, |charts| compares the
       value of this field against the :guilabel:`X Axis`
       field and plots the resulting value.

       .. note::

          You can add multiple :guilabel:`value` encoding channels to
          the chart's :guilabel:`Y Axis` to create multi-series charts.
          For more information, see :ref:`Multiple Field Mappings
          <multiple-field-mappings>`.

   * - Series
     - (*Optional*) Adds an additional :guilabel:`category` encoding
       channel to the visualization. When utilized, this field adds
       an additional line to the visualization for each unique
       value in this field.

       .. note::

          This option is only available when there is a *single* field
          mapped to the :guilabel:`Y Axis aggregation`
          :ref:`encoding channel <encoding-channels>`.

.. _smart-labels-dates:

Smart Date Labels for Continuous Line and Area Charts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/smart-labels.rst

Discrete Area Versus Continuous Area Charts Display
---------------------------------------------------

Discrete area charts are *stacked*, meaning |charts| plots each
series above or below the others in the visualization. The chart shows
the total aggregated value of all of the series, so you can easily see
the proportion of each series in relation to the total.

Continuous area charts are *overlaid*, meaning |charts| plots each
series directly on top of one another in the visualization.

.. _line-area-use-cases:

Use Cases
---------

Line charts and area charts are closely related and are both useful
for depicting time series data and data with logical ordering. However,
there are scenarios when it may be beneficial to use one chart type
over the other.

- Consider using a line chart when creating :ref:`multi-series charts
  <multi-series-charts>` where each series represents an isolated
  field. |charts| stacks multi-series area charts, as shown in
  this :ref:`example <area-chart-multi-series-example>`, which results
  in a chart where the stacked totals appear to share a relationship
  contributing to a larger summed value. This may not be desireable
  depending on the specific relationships within the data fields.

  - The line chart displays the data from each series in-line with one
    another without stacking, which may provide a more accurate
    representation of the data as shown in the
    :ref:`discrete line chart <discrete-line-chart-example>`.

- Area charts are useful for showing an overall trend while also
  highlighting relative performances of individual components of
  that sum.

  - Consider using a discrete area chart when illustrating a
    part-to-whole relationship, such as tracking data metrics over
    time. An example of this might be showing ``revenue`` compared with
    ``expenses`` over the course of a year.

  - A continuous area chart would work in this scenario if you were
    less concerned with the summation of the two fields and instead
    wanted a more direct comparison of the fields against one another.

.. tip::

   When your data does not have a logical order, consider instead using
   a :ref:`bar or column chart <column-bar-chart-ref>` to visualize
   your data. When the order of the data is not important, a bar or
   column chart can quickly highlight the highest and lowest values in
   the visualization, which may be more beneficial than suggesting the
   viewer read the chart from left to right as in a line or area chart.

Customization Options
---------------------

The following customization options are specific to line and area
charts. To see all available customization options, see
:ref:`customize-charts`.

Show or Hide Data Markers
~~~~~~~~~~~~~~~~~~~~~~~~~

On line and area charts, you can dictate whether |charts-short| displays
visible data markers that represent individual data points. Enabling
this option makes it easier to see exactly where your data points lie
along a line. Hovering over these markers shows the exact data values in
a tooltip, making it easier to view precise measurements.

To set this option:

1. Open the :ref:`Customize <customize-charts>` pane for your chart.

#. In the :guilabel:`General Customization` section, set the
   :guilabel:`Data Markers` toggle switch to the desired setting.

To customize the formatting of the number in the data marker tooltip,
modify the :ref:`Number Formatting <customize-number-formats>`
settings for the relevant field.

Set Distinct Dash Style per Series on Line Charts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

On discrete and continuous line charts, you can opt to display each
series in the chart with a distinct dash style. This option can help
make your chart more accessible by distinguishing between
series beyond color.

To set this option:

1. Open the :ref:`Customize <customize-charts>` pane for your chart.

#. In the :guilabel:`General Customization` section, set the
   :guilabel:`Dash Styles per Series` toggle switch to the desired
   setting.

Show or Hide Data Value Labels
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/customization/show-hide-data-labels.rst

Add a Trendline
~~~~~~~~~~~~~~~

.. include:: /includes/customization/trendline.rst

Examples
--------

.. _area-chart-multi-series-example:

Discrete Area Chart with Multiple Series
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following chart visualizes sales data from a mock office supply
store. Each document in the collection represents an individual sale
with information on the item(s) sold and the customer
conducting the purchase. This discrete area chart shows the
distribution of customer ages throughout sales in the collection:

.. figure:: /images/charts/discrete-area-example.png
   :figwidth: 720px
   :alt: Discrete area example

The :guilabel:`X Axis` field of ``customer.age`` plots the ages of the
customers along the X axis. We direct to |charts-short| to :ref:`bin
<charts-bin-data>` the ages into groups of 5.

The :guilabel:`Y Axis` field of ``customer.age`` and
:guilabel:`aggregate` option of :guilabel:`count` counts the
occurrences of each age in the corresponding bin.

Lastly, we apply the ``item.name`` field to the
:guilabel:`Series` encoding channel to split the age area into
segments displaying the count of each age group purchasing each
store item.

.. note::

   For more information on multi-series charts, see
   :ref:`Multi-Series Charts <multi-series-charts>`.

.. _one-hundred-stacked-area-example:

100% Stacked Area Chart
~~~~~~~~~~~~~~~~~~~~~~~

The following chart visualizes data from a mock office supply
store. Each document in the collection represents an individual sale
with information on the item(s) sold and the customer
conducting the purchase. This 100% stacked area chart shows the
relative percentages of items sold on each date of the month:

.. figure:: /images/charts/100-area-example.png
   :figwidth: 720px
   :alt: Discrete area example

The :guilabel:`X Axis` field of ``saleDate`` plots each sale
according to its date. The :ref:`Binning <charts-bin-data>` and
:ref:`Periodic <periodic-setting>` settings are enabled, so
|charts-short| groups the dates into bins based on each date of the
month.

.. note::

   For more information on binning dates and the periodic setting,
   refer to the :ref:`Bin Data <charts-bin-data>` page.

The :guilabel:`Y Axis` field of ``_id`` runs a :manual:`count
</reference/operator/aggregation/count/>` aggregation to calculate the
total number of sales that happened each day of the month. Since this
is a 100% stacked chart, these values are all normalized to 100%, and
are segmented by the :guilabel:`Series` |enc-channel|.

The :guilabel:`Series` field of ``item.name`` segments the total chart
area based on the name of the item sold. Since there may
be multiple items in a single document, we :guilabel:`Unwind` this
array to add each item to the visualization. This provides a clear
picture of the relative percentages of items sold based on the
date of the month.

.. _discrete-line-chart-example:

Discrete Line Chart with Multiple Aggregated Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following chart visualizes data pertaining to movies. Each
document in the collection represents a movie and contains general
information about the film and ratings from various rating
aggregators. This discrete line chart compares average
`Rotten Tomatoes <https://www.rottentomatoes.com/>`_
``tomato.meter`` ratings and average `Metacritic
<http://www.metacritic.com/>`_ ratings of films over time. Both ratings
are on a scale from ``0`` - ``100``:

.. figure:: /images/charts/discrete-line-example.png
   :figwidth: 720px
   :alt: Discrete line example

The :guilabel:`X Axis` field of ``year`` plots each film according to
its release year. We direct to |charts-short| to :ref:`bin
<charts-bin-data>` the years into groups of 5.

The :guilabel:`Y Axis` fields of ``tomato.meter`` and ``metacritic``
along with the :guilabel:`aggregate` option of :guilabel:`mean`
calculate and plot the average ratings of films from each
group of 5 years.

.. note::

   For more information on creating charts with multiple aggregated
   fields, see :ref:`Multiple Field Mappings
   <multiple-field-mappings>`.

Continuous Line Chart Using Time Series Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following chart visualizes data pertaining to the usage of a
solar-powered house battery. This continuous line graph shows the
battery level over time:

.. figure:: /images/charts/continuous-line-example-2.png
   :figwidth: 720px
   :alt: Continuous line example

The :guilabel:`X Axis` field of ``timestamp`` plots each timestamp in
the data source. The :guilabel:`Y Axis` fields of ``energy_left`` and
``total_pack_energy`` each plot a series in the chart; the amount of
energy the battery has left and the total amount of energy the battery
holds. This comparison shows how close the battery is to a full charge.

.. note::

   A continuous chart works better than a discrete chart in this case
   because our :guilabel:`X Axis` field, ``timestamp`` is not a
   discrete, categorical variable, and is instead a continuous value
   along a range.  We want to plot each ``timestamp`` as an individual
   point, rather than show an aggregated value from many data values.

Limitations
-----------

- The maximum document limit for discrete line and area charts is 5000
  documents. 

- The maximum document limit for continuous line and area charts is
  50000 documents.
