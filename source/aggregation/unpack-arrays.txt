.. _node-aggregation-arrays:

=======================
Unpack Arrays and Group
=======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: code example, node.js, analyze, array

Introduction
------------

In this tutorial, you can learn how to use the {+driver-short+} to
construct an aggregation pipeline, perform the
aggregation on a collection, and print the results by completing and
running a sample app. This aggregation performs the following operations:

- Unwinds an array field into separate documents
- Matches a subset of documents by a field value
- Groups documents by common field values
- Adds computed fields to each result document

Aggregation Task Summary
~~~~~~~~~~~~~~~~~~~~~~~~
 
This tutorial demonstrates how to create insights from customer order
data. The results show the list of products ordered that cost more than
$15, and each document contains the number of units sold and the total
sale value for each product.

This example uses one collection, ``orders``, which contains documents
describing product orders. Since each order contains multiple products,
the first step of the aggregation is unpacking the ``products`` array
into individual product order documents.

Before You Get Started
----------------------

Before you start this tutorial, complete the
:ref:`node-agg-tutorial-template-app` instructions to set up a working
Node.js application.

After you set up the app, access the ``orders`` collection by adding the
following code to the application:

.. literalinclude:: /includes/aggregation/unpack-arrays.js
   :language: javascript
   :copyable: true
   :start-after: start-coll
   :end-before: end-coll
   :dedent:

Delete any existing data and insert sample data into
the ``orders`` collection as shown in the following code:

.. literalinclude:: /includes/aggregation/unpack-arrays.js
   :language: javascript
   :copyable: true
   :start-after: start-insert-orders
   :end-before: end-insert-orders
   :dedent:

Tutorial
--------

.. procedure::
   :style: connected

   .. step:: Add an unwind stage to unpack the array of product orders

      First, add an :manual:`$unwind
      </reference/operator/aggregation/unwind>` stage to separate the
      entries in the ``products`` array into individual documents:

      .. literalinclude:: /includes/aggregation/unpack-arrays.js
         :language: javascript
         :copyable: true
         :start-after: start-unwind
         :end-before: end-unwind
         :dedent:

   .. step:: Add a match stage for products that cost more than $15

      Next, add a :manual:`$match
      </reference/operator/aggregation/match>` stage that matches
      products with a ``products.price`` value greater than ``15``:

      .. literalinclude:: /includes/aggregation/unpack-arrays.js
         :language: javascript
         :copyable: true
         :start-after: start-match
         :end-before: end-match
         :dedent:

   .. step:: Add a group stage to group by product type

      Add a :manual:`$group
      </reference/operator/aggregation/group>` stage to group
      orders by the value of the ``prod_id`` field. In this
      stage, add aggregation operations that create the
      following fields in the result documents:

      - ``product``: the product name
      - ``total_value``: the total value of all the sales of the product
      - ``quantity``: the number of orders for the product

      .. literalinclude:: /includes/aggregation/unpack-arrays.js
         :language: javascript
         :copyable: true
         :start-after: start-group
         :end-before: end-group
         :dedent:

   .. step:: Add a set stage to display the product ID

      Add a :manual:`$set
      </reference/operator/aggregation/set>` stage to recreate the
      ``product_id`` field from the values in the ``_id`` field
      that were set during the ``$group`` stage:

      .. literalinclude:: /includes/aggregation/unpack-arrays.js
         :language: javascript
         :copyable: true
         :start-after: start-set
         :end-before: end-set
         :dedent:

   .. step:: Add an unset stage to remove unneeded fields

      Finally, add an :manual:`$unset
      </reference/operator/aggregation/unset>` stage. The
      ``$unset`` stage removes the ``_id`` field from the result
      documents:
            
      .. literalinclude:: /includes/aggregation/unpack-arrays.js
         :language: javascript
         :copyable: true
         :start-after: start-unset
         :end-before: end-unset
         :dedent:

   .. step:: Run the aggregation pipeline

      Add the following code to the end of your application to perform
      the aggregation on the ``orders`` collection:

      .. literalinclude:: /includes/aggregation/unpack-arrays.js
         :language: javascript
         :copyable: true
         :start-after: start-run-agg
         :end-before: end-run-agg
         :dedent:

      Finally, run the following command in your shell to start your
      application:

      .. code-block:: bash
      
         node agg_tutorial.js

   .. step:: Interpret results

      The aggregation returns the following summary of customers' orders
      from 2020:

      .. code-block:: javascript
         :copyable: false
         
         {
           product: 'Asus Laptop',
           total_value: 860,
           quantity: 2,
           product_id: 'abc12345'
         }
         {
           product: 'Morphy Richards Food Mixer',
           total_value: 431,
           quantity: 1,
           product_id: 'pqr88223'
         }
         {
           product: 'Russell Hobbs Chrome Kettle',
           total_value: 16,
           quantity: 1,
           product_id: 'xyz11228'
         }
         {
           product: 'Karcher Hose Set',
           total_value: 66,
           quantity: 3,
           product_id: 'def45678'
         }
         
      The result documents contain details about the total value and
      quantity of orders for products that cost more than $15.

To view the complete code for this tutorial, see the `Completed Unpack Arrays App
<https://github.com/mongodb/docs-node/tree/master/source/includes/aggregation/unpack-arrays.js>`__
on GitHub.
