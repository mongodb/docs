.. _node-usage-find:

=======================
Find Multiple Documents
=======================

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :description: Learn how to retrieve multiple documents from MongoDB by using the Node.js driver.
   :keywords: code example, node.js, sample dataset

You can query for multiple documents in a collection with
``collection.find()``. The ``find()`` method uses a query document that you
provide to match the subset of the documents in the collection that match the
query. If you don't provide a query document (or if you provide an empty
document), MongoDB returns all documents in the collection. For more
information on querying MongoDB, see our
:doc:`documentation on query documents </fundamentals/crud/query-document>`.

You can also define more query options such as
:doc:`sort </fundamentals/crud/read-operations/sort>`
and
:doc:`projection </fundamentals/crud/read-operations/project>`
to configure the result set. You can specify these in the options
parameter in your ``find()`` method call in ``sort`` and ``projection``
objects. See `collection.find() <{+api+}/classes/Collection.html#find>`__ for more
information on the parameters you can pass to the method.

The ``find()`` method returns a `FindCursor <{+api+}/classes/FindCursor.html>`__ that
manages the results of your query. You can iterate through the matching
documents using the ``for await...of`` syntax, or one of the following 
:ref:`cursor methods <cursor-methods>`:

- ``next()``
- ``toArray()``

If no documents match the query, ``find()`` returns an empty cursor.

Compatibility
-------------

.. |page-topic| replace:: use the ``find()`` method
.. |link-topic-ing| replace:: finding documents in the Atlas UI

.. |atlas-url| replace:: :atlas:`Create, View, Update, and Delete Documents </atlas-ui/documents/#view--filter--and-sort-documents>`

.. include:: /includes/fact-atlas-compatible.rst
.. include:: /includes/fact-atlas-link.rst

Example
-------

The following snippet finds documents from the ``movies`` collection. It
uses the following parameters:

- A **query document** that configures the query to return only
  movies with a runtime of less than 15 minutes.

- A **sort** that organizes returned documents in ascending order by
  title (alphabetical order in which "A" comes before "Z" and "1" before
  "9").

- A **projection** that explicitly excludes the ``_id`` field from
  returned documents and explicitly includes only the ``title`` and
  ``imdb`` object (and its embedded fields).

.. include:: /includes/connect-guide-note.rst

.. _node-driver-find-usage-example-code-snippet:

.. tabs::

  .. tab:: JavaScript
     :tabid: javascript

     .. literalinclude:: /code-snippets/usage-examples/find.js
        :language: javascript
        :linenos:

  .. tab:: TypeScript
     :tabid: typescript

     .. literalinclude:: /code-snippets/usage-examples/find.ts
        :language: typescript
        :linenos:

Running the preceding example, you see the following output:

.. code-block:: javascript
   :copyable: false

   { title: '10 Minutes', imdb: { rating: 7.9, votes: 743, id: 339976 } }
   { title: '3x3', imdb: { rating: 6.9, votes: 206, id: 1654725 } }
   { title: '7:35 in the Morning', imdb: { rating: 7.3, votes: 1555, id: 406501 } }
   { title: '8', imdb: { rating: 7.8, votes: 883, id: 1592502 } }
   ...

The ``sort`` and ``projection`` options can also be specified as methods
(``sort()`` and ``project()``) chained to the ``find()`` method.
The following two commands are equivalent:

.. code-block:: javascript

   movies.find({ runtime: { $lt: 15 } }, { sort: { title: 1 }, projection: { _id: 0, title: 1, imdb: 1 }});
   movies.find({ runtime: { $lt: 15 } }).sort({ title: 1}).project({ _id: 0, title: 1, imdb: 1 });
