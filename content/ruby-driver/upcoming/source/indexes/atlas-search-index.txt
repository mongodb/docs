.. _ruby-atlas-search-index:

================================================
MongoDB Search and MongoDB Vector Search Indexes
================================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: index, query, optimization, efficiency, code example

Overview
--------

In this guide, you can learn how to programmatically manage your {+search+}
and {+vector-search+} indexes by using the {+driver-short+}.

The {+search+} feature enables you to perform full-text searches on
collections hosted on MongoDB Atlas. To learn more about {+search+},
see the :atlas:`{+search+} Overview </atlas-search/atlas-search-overview/>`.

{+vector-search+} enables you to perform semantic searches on vector
embeddings stored in MongoDB Atlas. To learn more about {+vector-search+},
see the :atlas:`{+vector-search+} Overview </atlas-vector-search/vector-search-overview/>`.

You can call the following methods to manage your {+search+} and {+vector-search+}
indexes:

- ``search_indexes#create_one``
- ``search_indexes#create_many``
- ``search_indexes#update_one``
- ``search_indexes#drop_one``

.. note:: {+search+} and {+vector-search+} Index Management is Asynchronous

   The {+driver-short+} manages {+search+} and {+vector-search+} indexes
   asynchronously. The methods described in the following
   sections return the server response immediately, but the changes to
   your Search indexes take place in the background and might not
   complete until some time later.

The following sections provide code examples that demonstrate how to use
each of the preceding commands.

.. _ruby-atlas-search-index-create:

Create a Search Index
---------------------

To create a single {+search+} or {+vector-search+} index, use the
``search_indexes#create_one`` method. To create multiple indexes, use the
``search_indexes#create_many`` method. Both methods return immediately,
while the indexes are asynchronously created in the background.

The following code example shows how to create a {+search+} index by
providing an index definition and an optional name for the index:

.. literalinclude:: /includes/indexes/atlas-search-index.rb
   :language: ruby
   :start-after: start-create-search-index
   :end-before: end-create-search-index
   :emphasize-lines: 15

.. note::

   By default, the driver creates a {+search+} index if you do not
   pass a ``type`` parameter. To create a {+vector-search+} index, you must
   set the ``type`` parameter to ``'vectorSearch'`` when calling
   ``create_one``.

You can use ``search_indexes#create_many`` to create multiple {+search+}
or {+vector-search+} indexes by providing an array of index
specifications. Each index specification should include the following
components:

- ``definition`` parameter: Defines the index
- ``name`` parameter: Specifies the index name
- ``type`` parameter: Specifies the type of index (``'search'`` or ``'vectorSearch'``)

The following code example shows how to create both {+search+} and {+vector-search+}
indexes in one call:

.. literalinclude:: /includes/indexes/atlas-search-index.rb
   :language: ruby
   :start-after: start-create-multiple-search-indexes
   :end-before: end-create-multiple-search-indexes
   :emphasize-lines: 29

For longer index definitions, it is helpful to define the index definitions outside 
of the method call. To learn more about the syntax of index definitions, see the 
:atlas:`Review {+search+} Index Syntax </atlas-search/index-definitions>` 
or the :atlas:`How to Index Fields for {+vector-search+} </atlas-vector-search/vector-search-type>` 
guides in the Atlas manual.

Update a Search Index
---------------------

To update a {+search+} or {+vector-search+} index, use the
``search_indexes#update_one`` method.

To update an index, you must provide a new index definition. You must specify
the index you want to update by using either the ``name`` or ``id`` of the index. 
The following code shows how to update a {+search+} index:

.. literalinclude:: /includes/indexes/atlas-search-index.rb
   :language: ruby
   :start-after: start-update-search-indexes
   :end-before: end-update-search-indexes

Delete a Search Index
---------------------

To delete a {+search+} or {+vector-search+} index, use the
``search_indexes#drop_one`` method.

To delete an index, you must provide the ``id`` or ``name`` of the
index. The following code shows how to delete a search index from a
collection:

.. literalinclude:: /includes/indexes/atlas-search-index.rb
   :language: ruby
   :start-after: start-drop-search-index
   :end-before: end-drop-search-index

List Search Indexes
-------------------

You can use the ``search_indexes`` object to list the entire index
specification of each {+search+} and {+vector-search+} index on a
collection:

.. literalinclude:: /includes/indexes/atlas-search-index.rb
   :language: ruby
   :start-after: start-list-entire-spec
   :end-before: end-list-entire-spec

To list individual fields in the index specification for each index, iterate
over the ``search_indexes`` object:

.. literalinclude:: /includes/indexes/atlas-search-index.rb
   :language: ruby
   :start-after: start-list-certain-elements
   :end-before: end-list-certain-elements

Additional Information
----------------------

To learn more about {+search+}, see the 
:atlas:`{+search+} </atlas-search/atlas-search-overview/>` documentation.

To learn more about {+vector-search+}, see the {+driver-short+}'s 
:ref:`ruby-atlas-vector-search` guide or the 
:atlas:`{+vector-search+} <atlas-vector-search/vector-search-overview/>` 
documentation. 

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods discussed in this guide, see the
following API documentation:

- `search_indexes <{+api-root+}/Mongo/Collection.html#search_indexes-instance_method>`__
- `SearchIndex <{+api-root+}/Mongo/SearchIndex/View.html>`__
