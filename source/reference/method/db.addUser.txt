============
db.addUser()
============

.. default-domain:: mongodb


.. method:: db.addUser()

   Use :method:`db.addUser()` to add privilege documents to the
   :data:`system.users <<database>.system.users>` collection in a
   database, which creates database credentials in MongoDB.

   .. versionchanged:: 2.4
      The schema of :data:`system.users <<database>.system.users>`
      changed in 2.4 to accommodate a more :doc:`sophisticated
      privilege model </reference/user-privileges>`. In 2.4
      :method:`db.addUser()` supports both forms of privilege
      documents.

   In MongoDB 2.4 you must pass :method:`db.addUser()` a document that
   contains the user parameters. You cannot pass the parameters
   directly. In MongoDB 2.2 and earlier you can pass the parameters
   directly, or pass a well-formed :data:`system.users
   <<database>.system.users>` document. See
   :doc:`/reference/privilege-documents` for more information about the
   form of these documents. Consider the following prototype form for
   a :method:`db.addUser()` operation: 

   .. code-block:: javascript

      db.addUser( { user: "<user>", userSource: "<database>", roles: [<roles>] } )

   .. example:: 

      To create and add a 2.4-style privilege document to
      :data:`system.users <<database>.system.users>` to grant
      :authrole:`readWrite` privileges to a user named "author" with
      privileges, use the following operation: 

      .. code-block:: javascript

         db.addUser( { user: "author", pwd: "pass", roles: [ "readWrite" ] } )

   .. seealso:: :doc:`/reference/user-privileges`, and
     :doc:`/reference/privilege-documents`. 

   To create legacy (2.2. and earlier) privilege documents,
   :method:`db.addUser` provides accepts the following parameters:

   :param string user: Specifies the username.

   :param string password: Specifies the corresponding password.

   :param boolean readOnly: 

      Optional. Defaults to ``false``. Grants users a restricted
      privilege set that only allows the user to read the this
      database.

   Consider the following syntax:

   .. code-block:: javascript

      db.addUser( "<username>", "<password>", { readOnly: <boolean> } )

   .. example:: 

      To create and add a legacy (2.2. and earlier) privilege
      document, to great a user named ``guest`` with the password
      ``pass`` that has only ``readOnly`` privileges, use the
      following operation:

      .. code-block:: javascript

         db.addUser( "guest", "pass", { readOnly: true } )

   .. note:: The :program:`mongo` shell excludes all
     :method:`db.addUser()` operations from the saved history.

   .. deprecated:: 2.4
      The ``roles`` parameter replaces the ``readOnly`` parameter for
      :method:`db.addUser()`. 2.4 also adds the ``otherDBRoles``
      and ``userSource`` fields to documents in the :data:`system.users
      <<database>.system.users>` collection.
