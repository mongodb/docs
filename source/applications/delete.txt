======
Delete
======

.. default-domain:: mongodb

Of the four basic database operations (i.e. CRUD), *delete* operations
are those that remove documents from a :term:`collection` in MongoDB.

For general information about write operations and the factors that affect
their performance, see :doc:`/core/write-operations`; for documentation
of other CRUD operations, see the :doc:`/crud` page.

Overview
--------

The :ref:`remove() <crud-delete-remove>` method in the :program:`mongo`
shell provides this operation, as do corresponding methods in the
:doc:`drivers </applications/drivers>`.

.. note::

   .. include:: /includes/fact-write-concern.rst

.. _crud-delete-remove:

Remove
------

Use the :method:`remove() <db.collection.remove()>` method to delete
documents from a collection; this action does not remove the indexes.
[#drop]_

The :method:`remove() <db.collection.remove()>` method has the
following syntax:

.. code-block:: javascript

   db.collection.remove( <query>, <justOne> )

.. admonition:: Corresponding operation in SQL

   The :method:`remove() <db.collection.remove()>` method is analogous to
   the ``DELETE`` statement, and:

   - the ``<query>`` argument corresponds to the ``WHERE`` statement, and

   - the ``<justOne>`` argument has the same affect as ``LIMIT 1``.

Consider the following examples that illustrate the use of the
:method:`remove() <db.collection.remove()>`:

- If there is a ``<query>`` argument, the :method:`remove()
  <db.collection.remove()>` method deletes from the collection all
  documents that match the argument.

  The following operation deletes all documents from the ``bios``
  collection where the subdocument ``name`` contains a field ``first``
  whose value starts with ``G``:

  .. code-block:: javascript

     db.bios.remove( { 'name.first' : /^G/ } )

- If there is a ``<query>`` argument and you specify the ``<justOne>``
  argument as ``true`` or ``1``, :method:`remove()
  <db.collection.remove()>` only deletes a single document from the
  collection that matches the query.

  The following operation deletes a single document from the ``bios``
  collection where the ``turing`` field equals ``true``:

  .. code-block:: javascript

     db.bios.remove( { turing: true }, 1 )

- If there is no ``<query>`` argument, the :method:`remove()
  <db.collection.remove()>` method deletes all documents from a
  collection. The following operation deletes all documents from the
  ``bios`` collection:

  .. code-block:: javascript

     db.bios.remove()

  .. note::

     This operation is not equivalent to the :method:`drop()
     <db.collection.drop()>` method.

.. [#drop] To remove all documents from a collection, it may be faster
   to use the :method:`drop() <db.collection.drop()>` method to drop the
   entire collection, including the indexes, and then recreate the
   collection and rebuild the indexes.

.. _crud-delete-remove-isolation:

Capped Collection
~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-remove-capped-collection-restriction.rst

Isolation
~~~~~~~~~

If the ``<query>`` argument to the :method:`remove()
<db.collection.remove()>` method matches multiple documents in the
collection, the delete operation may interleave with other write
operations to that collection. For an unsharded collection, you have
the option to override this behavior with the :operator:`$atomic`
isolation operator, effectively isolating the delete operation from
other write operations. To isolate the operation, include ``$atomic:
1`` in the ``<query>`` parameter as in the following example:

.. code-block:: javascript

   db.bios.remove( { turing: true, $atomic: 1 } )
