======================
db.collection.update()
======================

.. default-domain:: mongodb

.. method:: db.collection.update(query, update, [options])

   The :method:`update() <db.collection.update()>` method modifies an
   existing document or documents in a collection. By default the
   :method:`update() <db.collection.update()>` method updates a single
   document. To update all documents in the collection that match the
   update query criteria, specify the ``multi`` option. To insert a
   document if no document matches the update query criteria, specify
   the ``upsert`` option.
   
   .. versionchanged:: 2.2 
      The :program:`mongo` shell provides an updated interface that
      accepts the options parameter in a document format to specify
      ``multi`` and ``upsert`` options.

   Prior to version 2.2, in the :program:`mongo` shell, ``upsert`` and
   ``multi`` were positional boolean options:

   .. code-block:: javascript

      db.collection.update(query, update, <upsert,> <multi>)

   The :method:`update() <db.collection.update()>` method takes the following
   parameters:

   :param document query:

          A document that specifies the selection criteria for the
          update. The ``query`` parameter employs the same :ref:`query
          selectors <query-selectors>` as used in the
          :method:`db.collection.find()` method.

   :param document update:

          A document that specifies the modifications to apply.

          **If** the ``update`` parameter contains any :ref:`update
          operators <update-operators>` expressions such as the
          :operator:`$set` operator expression, then:

          - the ``update`` parameter must contain only ``update
            operators`` expressions.

          - the :method:`update() <db.collection.update()>` method updates only
            the corresponding fields in the document.

          **If** the ``update`` parameter consists only of ``field:
          value`` expressions, then:

          - the :method:`update() <db.collection.update()>` method
            *replaces* the document with the ``updates`` document. If
            the ``updates`` document is missing the :term:`_id` field,
            MongoDB will add the ``_id`` field and assign to it a
            unique :term:`objectid` .

          - the :method:`update() <db.collection.update()>` method updates cannot
            update multiple documents.

   :param document options: 

          .. versionadded:: 2.2

          Optional. A document that specifies whether to perform an
          :term:`upsert` and/or a multiple update. You can use the
          ``options`` parameter instead of the individual ``upsert``
          and ``multi`` parameters.

   :param boolean upsert: 

          Optional. A boolean that specifies whether to perform
          an :term:`upsert`.

          The default value is ``false``. When
          ``true``, the :method:`update() <db.collection.update()>` method will
          update an existing document that matches the ``query``
          selection criteria **or** if no document matches the
          criteria, insert a new document with the fields and values of
          the ``query`` and ``update`` arguments.

          In version 2.2 of the :program:`mongo` shell, you may also
          specify ``upsert`` in the ``options`` parameter.

          .. note::

             An upsert operation affects only *one* document, and
             cannot update multiple documents.

   :param boolean multi:

          Optional. A boolean that specifies whether to update multiple
          documents that meet the query criteria.

          When not specified, the default value is ``false`` and the
          :method:`update() <db.collection.update()>` method updates a single
          document that meet the ``query`` criteria.
         
          When ``true``, the :method:`update() <db.collection.update()>` method
          updates all documents that meet the ``query`` criteria.
         
          In version 2.2 of the :program:`mongo` shell, you may also
          specify ``multi`` in the ``options`` parameter.


   Although the update operation may apply mostly to updating the
   values of the fields, the :method:`update()
   <db.collection.update()>` method can also modify the name of the
   ``field`` in a document using the :operator:`$rename` operator.

   .. examples-begin

   Consider the following examples of the :method:`update()
   <db.collection.update()>` method. These examples all use the 2.2
   interface to specify options in the document form. 

   - To update specific fields in a single document, you can call the
     :method:`update() <db.collection.update()>` method with the ``update``
     parameter consisting of :ref:`update operators <update-operators>`
     expressions, as in the following:

     .. code-block:: javascript

        db.products.update( { item: "book", qty: { $gt: 5 } }, { $set: { x: 6 }, $inc: { y: 5} } )

     This query will update in the ``products`` collection a single
     document that matches the query criteria and set the value of
     the field ``x`` to ``6`` and increment the value of the field
     ``y`` by ``5``. All other fields of the modified document will
     remain the same.

   - To replace all the fields in a single document with the fields in
     the ``update`` parameter, call the :method:`update()
     <db.collection.update()>` method with an ``update`` parameter
     that consists of ``key: value`` expressions, as in the following:

     .. code-block:: javascript

        db.products.update( { item: "book", qty: { $gt: 5 } }, { x: 6, y: 15 } )

     This query will update in the ``products`` collection a single
     document that matches the query criteria and set the value of
     the field ``x`` to ``6`` and set the value of the field ``y`` to
     ``15``. All other fields of the modified document will be
     **removed** other than the :term:`_id` field.

   - To update multiple documents, call the
     :method:`update() <db.collection.update()>` method and specify the
     ``multi`` option in the ``options`` argument, as in the following:

     .. code-block:: javascript
                 
        db.products.update( { item: "book", qty: { $gt: 5 } }, { $set: { x: 6, y: 15 } }, { multi: true } )

     This operation will update **all** documents in the ``products``
     collection that match the query criteria, setting the value
     of the field ``x`` to ``6`` and the value of the field ``y`` to
     ``15``. All other fields in the updated documents remain unchanged.

     You can perform the same operation by calling the
     :method:`update() <db.collection.update()>` method with the ``multi``
     parameter:

     .. code-block:: javascript

        db.products.update( { item: "book", qty: { $gt: 5 } }, { $set: { x: 6, y: 15 } }, false, true )

   - To update a single document or to insert a new document if no
     document matches the query criteria, you can call the
     :method:`update() <db.collection.update()>` and specify the
     ``upsert`` option in the the ``options`` argument, as in the
     following:

     .. code-block:: javascript
                 
        db.products.update( { item: "magazine", qty: { $gt: 5 } }, { $set: { x: 25, y: 50 } }, { upsert: true } )

     This query will either:

     - update a single document in the ``products`` collection that
       matches the query criteria, setting the value of the field
       ``x`` to ``25`` and the value of the field ``y`` to ``50``, *or*

     - if no matching document exists, insert a document in the
       ``products`` collection, with the field ``item`` set to
       ``magazine``, the field ``x`` set to ``25``, and the field ``y``
       set to ``50``.

     You can also perform the same update by calling the
     :method:`update() <db.collection.update()>` method with the ``upsert``
     parameter:

     .. code-block:: javascript

        db.products.update( { item: "magazine", qty: { $gt: 5 } }, { $set: { x: 25, y: 50 } }, true )

   .. examples-end
