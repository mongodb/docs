============================
Upgrade a Cluster to Use SSL
============================

.. default-domain:: mongodb

.. note::

   .. include:: /includes/ssl-supported-in-enterprise-only.rst

.. versionchanged:: 2.5.3

The MongoDB server supports listening for both SSL encrypted and
unencrypted connections on the same TCP port. This allows upgrades of
MongoDB clusters to use SSL encrypted connections. To upgrade from a
MongoDB cluster using no SSL encryption to one using *only* SSL
encryption, use the following rolling upgrade process:

#. For each node of a cluster, start the node with the option
   :option:`--sslMode` set to ``allowSSL``. The :option:`--sslMode
   allowSSL <--sslMode>` setting allows the node to accept both SSL
   and non-SSL incoming connections. Its connections to other servers
   do not use SSL. Include other :doc:`SSL options
   </tutorial/configure-ssl>` as well as any other options that are
   required for your specific configuration. For example:

   .. code-block:: sh

      mongod --replSet <name> --sslMode allowSSL --sslPEMKeyFile <path to SSL Certificate and key PEM file> --sslCAFile <path to root CA PEM file>

   Upgrade all nodes of the cluster to these settings.

   .. note::
      You may also specify these options in the :doc:`configuration file
      </reference/configuration-options>`, as in the following example:

      .. code-block:: ini

         sslMode = <disabled|allowSSL|preferSSL|requireSSL>
         sslPEMKeyFile = <path to SSL certificate and key PEM file>
         sslCAFile = <path to root CA PEM file>

#. Switch all clients to use SSL. See :ref:`ssl-clients`.

#. For each node of a cluster, use the :dbcommand:`setParameter`
   command to update the :parameter:`sslMode` to ``preferSSL``.
   [#update-mode-alternative]_ With ``preferSSL`` as its
   :setting:`sslMode`, the node accepts both SSL and non-SSL incoming
   connections, and its connections to other servers use SSL. For
   example:

   .. code-block:: sh

      db.getSiblingDB('admin').runCommand( { setParameter: 1, sslMode: "preferSSL" } )

   Upgrade all nodes of the cluster to these settings. 

   At this point, all connections should be using SSL.

#. For each node of the cluster, use the
   :dbcommand:`setParameter` command to update the :parameter:`sslMode`
   to ``requireSSL``. [#update-mode-alternative]_ With ``requireSSL``
   as its :setting:`sslMode`, the node will reject any non-SSL
   connections. For example:

   .. code-block:: sh

      db.getSiblingDB('admin').runCommand( { setParameter: 1, sslMode: "requireSSL" } )

#. After the upgrade of all nodes, edit the :doc:`configuration file
   </reference/configuration-options>` with the appropriate SSL
   settings to ensure that upon subsequent restarts, the cluster uses
   SSL.

.. [#update-mode-alternative] As an alternative to using the
   :dbcommand:`setParameter` command, you can also
   restart the nodes with the appropriate SSL options and values.
