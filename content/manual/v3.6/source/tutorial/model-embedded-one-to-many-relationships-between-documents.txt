.. _data-modeling-example-one-to-many:

=======================================================
Model One-to-Many Relationships with Embedded Documents
=======================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

Data in MongoDB has a *flexible schema*. :term:`Collections
<collection>` do not enforce :term:`document` structure. Decisions
that affect how you model data can affect application performance and
database capacity. See :doc:`/core/data-models` for a full high
level overview of data modeling in MongoDB.

This document describes a data model that uses :ref:`embedded
<data-modeling-embedding>` documents to describe relationships between
connected data.

Pattern
-------

Consider the following example that maps patron and multiple address
relationships. The example illustrates the advantage of embedding over
referencing if you need to view many data entities in context of
another. In this one-to-many relationship between ``patron`` and
``address`` data, the ``patron`` has multiple ``address`` entities.

In the normalized data model, the ``address`` documents contain a
reference to the ``patron`` document.

.. code-block:: javascript

   {
      _id: "joe",
      name: "Joe Bookreader"
   }

   {
      patron_id: "joe",
      street: "123 Fake Street",
      city: "Faketon",
      state: "MA",
      zip: "12345"
   }

   {
      patron_id: "joe",
      street: "1 Some Other Street",
      city: "Boston",
      state: "MA",
      zip: "12345"
   }

If your application frequently retrieves the ``address`` data with the
``name`` information, then your application needs to issue multiple
queries to resolve the references. A more optimal schema would be to
embed the ``address`` data entities in the ``patron`` data, as in the
following document:

.. code-block:: javascript

   {
      _id: "joe",
      name: "Joe Bookreader",
      addresses: [
                   {
                     street: "123 Fake Street",
                     city: "Faketon",
                     state: "MA",
                     zip: "12345"
                   },
                   {
                     street: "1 Some Other Street",
                     city: "Boston",
                     state: "MA",
                     zip: "12345"
                   }
                 ]
    }

With the embedded data model, your application can retrieve the
complete patron information with one query.
