=============
cursor.sort()
=============

.. default-domain:: mongodb

Definition
----------

.. method:: cursor.sort(sort)

   Controls the order that the query returns matching documents. For
   each field in the sort document, if the field's corresponding value
   is positive, then :method:`~cursor.sort()` returns query
   results in ascending order for that attribute. If the field's
   corresponding value is negative, then :method:`~cursor.sort()` returns query results in descending order.

   The :method:`~cursor.sort()` method has the following parameter:

   .. include:: /reference/method/cursor.sort-param.rst

   The ``sort`` parameter contains field and value pairs, in the
   following form:

   .. code-block:: javascript

      { field: value }

   - ``field`` is the field by which to sort documents.

   - ``value`` is either 1 for ascending or -1 for descending.

   .. note::

      You must apply :method:`~cursor.sort()` to the cursor before
      retrieving any documents from the database.
      
      .. todo: verify "must," seems a bit strong.

Examples
--------

The following query returns all documents in ``collection`` sorted by
the ``age`` field in descending order.

.. code-block:: javascript

   db.collection.find().sort( { age: -1 } );

The following query specifies the sort order using the fields from a
sub-document ``name``. The query sorts first by the ``last`` field and
then by the ``first`` field. The query sorts both fields in ascending
order:

.. code-block:: javascript

   db.bios.find().sort( { 'name.last': 1, 'name.first': 1 } )

Limit Results
-------------

Unless you have an index for the specified key pattern, use
:method:`~cursor.sort()` in conjunction with :method:`~cursor.limit()` to avoid
requiring MongoDB to perform a large, in-memory
sort. :method:`~cursor.limit()` increases the speed and reduces the amount
of memory required to return this query by way of an optimized
algorithm.

.. warning::

   The sort function requires that the entire sort be able to
   complete within 32 megabytes. When the sort option consumes more
   than 32 megabytes, MongoDB will return an error. Use
   :method:`~cursor.limit()`, or create an index on the field that you're
   sorting to avoid this error.
   The entire document is used by the sort function. Thus, the bigger the
   documents the lower the limit if an index can't be used for the sort.

Return Natural Order
--------------------

The :operator:`$natural` parameter returns items according to their
order on disk. Consider the following query: 

.. code-block:: javascript

   db.collection.find().sort( { $natural: -1 } )

This will return documents in the reverse of the order on
disk. Typically, the order of documents on disks reflects insertion
order, *except* when documents move internal because of document
growth due to update operations.

.. include:: /includes/fact-sort-order.rst
