.. meta::
   :robots: noindex, nosnippet

.. _flutter-sync:

=========================
Device Sync - Flutter SDK
=========================

.. toctree::
   :titlesonly:

   Add Sync to an App </sdk/flutter/sync/add-sync-to-app>
   Open Synced Realm </sdk/flutter/sync/open-synced-realm>
   Manage Subscriptions </sdk/flutter/sync/manage-sync-subscriptions>
   Write Data to a Synced Realm </sdk/flutter/sync/write-to-synced-realm>
   Manage Sync Session </sdk/flutter/sync/manage-sync-session>
   Sync Multiple Processes </sdk/flutter/sync/sync-multiple-processes>
   Handle Sync Errors </sdk/flutter/sync/handle-sync-errors>
   Set Sync Log Level </sdk/flutter/sync/log-level>
   Stream Data to Atlas </sdk/flutter/sync/stream-data-to-atlas>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Device Sync automatically synchronizes data between client applications and
an :ref:`Atlas App Services backend application <realm-cloud>`. When a client
device is online, Sync asynchronously synchronizes data in the
background between the device and your App Services backend.

The Flutter SDK only supports Flexible Sync. You must configure your App Services backend
to use :ref:`Flexible Sync <flexible-sync>`.

.. note::

   The Flutter SDK does not support :ref:`Partition-Based Sync <partition-based-sync>`.

.. _flutter-synced-realm:

Synced Realms
-------------

You can configure a realm to automatically synchronize data between many devices
that each have their own local copy of the data. Synced realms use a different
configuration than local-only realms and require an Atlas App Services
backend to handle the synchronization process.

Applications can always create, modify, and delete synced realm objects locally,
even when offline. Whenever a network connection is available, the Realm Flutter SDK
opens a connection to an application server and syncs changes to and from other
clients. The :ref:`Atlas Device Sync protocol <sync-protocol>` and server-side
operational transforms guarantee that all fully synced instances of a realm see
exactly the same data, even if some changes occurred offline and/or were
received out of order.

Synced Realms vs. Non-Synced Realms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Synced realms differ from non-synced local Realm in a couple of ways:

- Synced realms attempt to sync changes with your backend App Services App,
  whereas non-synced realms do not.
- Synced realms can be accessed by authenticated users, while non-synced
  realms have no concept of users or authentication.

You can copy data from a non-synced realm to a synced realm,
and vice versa, but you cannot sync a non-synced realm. To convert a non-synced 
realm to a synced realm, you can follow the process 
described in :ref:`Migrate a Local-Only App to a Sync-Enabled App <realm-sync-local-to-sync>`. 

.. _flutter-flexible-sync-fundamentals:

What is Flexible Sync?
----------------------

When you select :ref:`Flexible Sync <flexible-sync>` for your App Services backend
configuration, your client implementation must include subscriptions to
queries on :ref:`queryable fields <queryable-fields>`. Flexible Sync works
by synchronizing data that matches query subscriptions you maintain in the
client application.

A subscription set contains a set of queries. Flexible Sync returns
documents matching those queries, where the user has the appropriate
:ref:`permissions <flexible-sync-rules-and-permissions>` to read or
write the documents. If documents match the query, but the client
does not have the permission to read or write them, they do not sync to
the client application.

You can form Flexible Sync queries using a limited subset of :ref:`Realm Query Language
<realm-query-language>`. To learn more about which fields you can query, refer to
the :ref:`Queryable Fields documentation <queryable-fields>`.

Subscription sets are based on a specific type of :ref:`Realm object
<flutter-define-realm-object-schema>`.
To sync data for many types of Realm objects, you must have multiple subscriptions.

To use Device Sync in your client application, open a synced realm
with a Flexible Sync configuration. Then, manage subscriptions
to determine which documents to sync.

Enable Flexible Sync on the Backend
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Before you can start syncing data from your client application using the SDK,
you must enable Flexible Sync in the App Services backend.

To begin, refer to the :ref:`backend documentation on enabling Device Sync <enable-realm-sync>`.

Group Updates for Improved Performance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/sync-memory-performance.rst

How Device Sync Works
---------------------

.. include:: /includes/sync-internals.rst
