=====
fsync
=====

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: fsync

   Forces the :program:`mongod` process to flush all pending writes
   from the storage layer to disk. Optionally, you can use
   :dbcommand:`fsync` to lock the :program:`mongod` instance and block
   write operations for the purpose of capturing backups.

   As applications write data, MongoDB records the data in the storage
   layer and then writes the data to disk within the :setting:`syncdelay`
   interval, which is 60 seconds by default. Run :dbcommand:`fsync` when
   you want to flush writes to disk ahead of that interval.

   The :dbcommand:`fsync` command has the following syntax:

   .. code-block:: javascript

      { fsync: 1, async: <Boolean>, lock: <Boolean> }

   The :dbcommand:`fsync` command has the following fields:

   .. include:: fsync-field.rst

Behavior
--------

An :dbcommand:`fsync` lock is only possible on *individual* nodes within a
sharded cluster, not on the entire cluster. To backup an entire sharded
cluster, please see :doc:`/administration/backup-sharded-clusters` for
more information.

If your :program:`mongod` has :term:`journaling <journal>` enabled,
consider using :ref:`another method <backup-with-journaling>` to create a
back up of the data set.

After :dbcommand:`fsync` with lock has been run on a :program:`mongod`,
all write operations will block until a subsequent unlock. Read opertions may also
block as well, though this is not deterministic. For this reason, :dbcommand:`fsync`
with lock should not be construed as a reliable mechanism for making
a :program:`mongod` operate in a read-only mode.

.. include:: /includes/note-disable-profiling-fsynclock.rst

Examples
--------

Run Asynchronously
~~~~~~~~~~~~~~~~~~

The :dbcommand:`fsync` operation is synchronous by default To run
:dbcommand:`fsync` asynchronously, use the ``async`` field set to
``true``:

.. code-block:: javascript

   { fsync: 1, async: true }

The operation returns immediately. To view the status of the
:dbcommand:`fsync` operation, check the output of
:method:`db.currentOp()`.

Lock ``mongod`` Instance
~~~~~~~~~~~~~~~~~~~~~~~~

The primary use of :dbcommand:`fsync` is to lock the :program:`mongod` 
instance in order to back up the files withing :program:`mongod`'s dbpath.
The operation flushes all data to the storage layer and
blocks all write operations until you unlock the :program:`mongod` instance.

To lock the database, use the ``lock`` field set to ``true``:

.. code-block:: javascript

   { fsync: 1, lock: true }

You may continue to perform read operations on a :program:`mongod` instance that has a
:dbcommand:`fsync` lock. However, after the first write operation all
subsequent read operations wait until you unlock the :program:`mongod` instance.

Check Lock Status
~~~~~~~~~~~~~~~~~

To check the state of the fsync lock, use :method:`db.currentOp()`. Use
the following JavaScript function in the shell to test if :program:`mongod` instance is
currently locked:

.. code-block:: javascript

   serverIsLocked = function () {
                        var co = db.currentOp();
                        if (co && co.fsyncLock) {
                            return true;
                        }
                        return false;
                    }

After loading this function into your :program:`mongo` shell session
call it, with the following syntax:

.. code-block:: javascript

   serverIsLocked()

This function will return ``true`` if the :program:`mongod` instance is
currently locked and ``false`` if the :program:`mongod` is not locked. To
unlock the :program:`mongod`, make a request for an unlock using the
following operation:

.. code-block:: javascript

   db.getSiblingDB("admin").$cmd.sys.unlock.findOne();

Unlock ``mongod`` Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~

To unlock the :program:`mongod` instance, use :method:`db.fsyncUnlock()`:

.. code-block:: javascript

   db.fsyncUnlock();
