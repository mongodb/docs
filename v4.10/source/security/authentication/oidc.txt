.. _pymongo-mongodb-oidc:

===================================
OIDC (Workload Identity Federation)
===================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: authorize, code example

Overview
--------

The OpenID Connect (OIDC) authentication mechanism allows you to authenticate to
MongoDB by using a third-party identity provider, such as Azure or Google Cloud
Platform (GCP). 

You can use this mechanism only when authenticating to MongoDB Atlas or MongoDB
Enterprise Advanced, and only when authenticating to MongoDB v7.0 or later.

.. tip:: OIDC Authentication

   To learn more about configuring MongoDB Atlas for OIDC authentication, see
   :atlas:`Set up Workforce Identity Federation with OIDC </workforce-oidc/#std-label-oidc-authentication-workforce>`
   in the Atlas documentation.
   
   For more information about using OIDC authentication with MongoDB, see
   :manual:`OpenID Connect Authentication </core/security-oidc/>` and
   :manual:`MongoDB Server Parameters </reference/parameters/#mongodb-parameter-param.oidcIdentityProviders>`
   in the {+mdb-server+} manual.

Code Placeholders 
~~~~~~~~~~~~~~~~~

The code examples on this page use the following placeholders:

- ``+srv``: Include this option in your connection string prefix only if you are connecting
  to a MongoDB Atlas cluster. To learn more about the ``+srv`` option, see
  :manual:`Connection String Formats </reference/connection-string/#connection-string-formats>`
  in the {+mdb-server+} manual.
- ``<Azure ID>``: The client ID or application ID of the Azure managed identity or
  enterprise application, if authenticating against Azure IMDS.
- ``<hostname>``: The network address of your MongoDB deployment.
- ``<port>``: The port number of your MongoDB deployment. If you omit this parameter,
  the driver uses the default port number (``27017``). You don't need to specify a port
  when connecting to a MongoDB Atlas cluster.
- ``<audience>``: The value of the ``audience`` parameter configured on your MongoDB deployment.

To use the code examples on this page, replace these placeholders with your own values.

.. include:: /includes/authentication/percent-encoding.rst

Using OIDC Authentication in Your Application
---------------------------------------------

The following sections describe how to use the MONGODB-OIDC authentication mechanism to
authenticate to various platforms.

.. note:: 

   Because Python's Standard Library doesn't support asynchronous HTTP requests,
   all OIDC requests from {+driver-short+} are synchronous and block the ``asyncio`` loop.

.. _pymongo-mongodb-oidc-azure-imds:

Azure IMDS
~~~~~~~~~~

If your application runs on an Azure VM, or otherwise uses the
`Azure Instance Metadata Service <https://learn.microsoft.com/en-us/azure/virtual-machines/instance-metadata-service>`__
(IMDS), you can authenticate to MongoDB by using {+driver-short+}'s built-in Azure
support.

You can configure OIDC for Azure IMDS in two ways: by passing arguments to the
``MongoClient`` constructor or through parameters in your connection string.

.. include:: /includes/authentication/auth-properties-commas.rst

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      First, create a Python dictionary for your authentication mechanism properties, as shown
      in the following example:
      
      .. literalinclude:: /includes/authentication/azure-imds-mongoclient.py
         :language: python
         :copyable: true
         :start-after: # define properties and MongoClient
         :end-before: client = MongoClient(

      Then, set the following connection options:

      - ``username``: If you're using an Azure managed identity, set this to the client ID
        of the managed identity. If you're using a service principal to represent an
        enterprise application, set this to the application ID of the service principal. 
      - ``authMechanism``: Set to ``"MONGODB-OIDC"``.
      - ``authMechanismProperties``: Set to the ``properties`` dictionary that you
        created in the previous step.

      The following code example shows how to set these options when creating a
      ``MongoClient``:

      .. literalinclude:: /includes/authentication/azure-imds-mongoclient.py
            :language: python
            :copyable: true
            :emphasize-lines: 5-10

   .. tab:: Connection String
      :tabid: connectionstring

      Include the following connection options in your connection string:

      - ``username``: If you're using an Azure managed identity, set this to the client ID
        of the managed identity. If you're using a service principal to represent an
        enterprise application, set this to the application ID of the service principal. 
      - ``authMechanism``: Set to ``MONGODB-OIDC``.
      - ``authMechanismProperties``: Set to
        ``ENVIRONMENT:azure,TOKEN_RESOURCE:<audience>``.
        
        The following code example shows how to set these options in your connection string:
      
      .. literalinclude:: /includes/authentication/azure-imds-connection-string.py
            :language: python
            :copyable: true
            :emphasize-lines: 4-7

.. tip::
   
   If your application is running on an Azure VM, and only one managed identity is
   associated with the VM, you can omit the ``username`` connection option.

.. _pymongo-mongodb-oidc-gcp-imds:

GCP IMDS
~~~~~~~~

If your application runs on a Google Compute Engine VM, or otherwise uses the
`GCP Instance Metadata Service <https://cloud.google.com/compute/docs/metadata/querying-metadata>`__,
you can authenticate to MongoDB by using {+driver-short+}'s built-in GCP
support.

You can configure OIDC for GCP IMDS in two ways: by passing arguments to the
``MongoClient`` constructor or through parameters in your connection string.

.. include:: /includes/authentication/auth-properties-commas.rst
   
.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      First, create a Python dictionary for your authentication mechanism properties, as shown
      in the following example.

      .. literalinclude:: /includes/authentication/gcp-imds-mongoclient.py
         :language: python
         :copyable: true
         :start-after: # define properties and MongoClient
         :end-before: client = MongoClient(

      Then, set the following connection options:

      - ``authMechanism``: Set to ``"MONGODB-OIDC"``.
      - ``authMechanismProperties``: Set to the ``properties`` dictionary that you
        created in the previous step.

      The following code example shows how to set these options when creating a
      ``MongoClient``:

      .. literalinclude:: /includes/authentication/gcp-imds-mongoclient.py
            :language: python
            :copyable: true
            :emphasize-lines: 5-9

   .. tab:: Connection String
      :tabid: connectionstring

      Include the following connection options in your connection string:

      - ``authMechanism``: Set to ``MONGODB-OIDC``.
      - ``authMechanismProperties``: Set to
        ``ENVIRONMENT:gcp,TOKEN_RESOURCE:<audience>``.

      The following code example shows how to set these options in your connection string:
      
      .. literalinclude:: /includes/authentication/gcp-imds-connection-string.py
            :language: python
            :copyable: true
            :emphasize-lines: 4-6

.. _pymongo-mongodb-oidc-azure-envs:

Other Azure Environments
~~~~~~~~~~~~~~~~~~~~~~~~

If your application runs on Azure Functions, App Service Environment (ASE), or Azure
Kubernetes Service (AKS), you can use the
`azure-identity <https://pypi.org/project/azure-identity/>`__ package to fetch
authentication credentials.

First, use pip to install the ``azure-identity`` library, as shown in the
following example:

.. code-block:: sh

   python3 -m pip install azure-identity

Next, define a class that inherits from the ``OIDCCallback`` class. This class must
implement a ``fetch()`` method, which returns the OIDC token in the form of an
``OIDCCallbackResult`` object.

The following example shows how to define a callback class named ``MyCallback``. This class
includes a ``fetch()`` method that retrieves an OIDC token from a file in the standard
service-account token-file location.

.. literalinclude:: /includes/authentication/azure-envs-mongoclient.py
   :language: python
   :copyable: true
   :start-after: # define callback, properties, and MongoClient
   :end-before: properties = {"OIDC_CALLBACK": MyCallback()}

After you define your callback class, create a Python dictionary that contains one key,
``"OIDC_CALLBACK"``, whose value is an instance of your custom callback class:

.. literalinclude:: /includes/authentication/azure-envs-mongoclient.py
   :language: python
   :copyable: true
   :start-after: return OIDCCallbackResult(access_token=token)
   :end-before: client = MongoClient(

Finally, set the following connection options by passing arguments to the ``MongoClient``
constructor:

- ``authMechanism``: Set to ``"MONGODB-OIDC"``.
- ``authMechanismProperties``: Set to the ``properties`` dictionary that you created in the
  previous step.

.. literalinclude:: /includes/authentication/azure-envs-mongoclient.py
      :language: python
      :copyable: true
      :emphasize-lines: 14-18

.. _pymongo-mongodb-oidc-gcp-gke:

GCP GKE
~~~~~~~

If your application runs on a GCP Google Kubernetes Engine (GKE) cluster with a
`configured service account <https://cloud.google.com/kubernetes-engine/docs/how-to/service-accounts>`__,
you can read the OIDC token from the standard service-account token-file location.

First, define a class that inherits from the ``OIDCCallback`` class. This class must
implement a ``fetch()`` method, which returns the OIDC token in the form of an
``OIDCCallbackResult`` object.

The following example shows how to define a callback class named ``MyCallback``. This class
includes a ``fetch()`` method that retrieves an OIDC token from a file in the standard
service-account token-file location.

.. literalinclude:: /includes/authentication/gcp-gke-mongoclient.py
   :language: python
   :copyable: true
   :start-after: # define callback, properties, and MongoClient
   :end-before: properties = {"OIDC_CALLBACK": MyCallback()}

After you define your callback class, create a Python dictionary that contains one key,
``"OIDC_CALLBACK"``, whose value is an instance of your custom callback class:

.. literalinclude:: /includes/authentication/gcp-gke-mongoclient.py
   :language: python
   :copyable: true
   :start-after: return OIDCCallbackResult(access_token=token)
   :end-before: client = MongoClient(

Finally, set the following connection options by passing arguments to the ``MongoClient``
constructor:

- ``authMechanism``: Set to ``"MONGODB-OIDC"``.
- ``authMechanismProperties``: Set to the ``properties`` dictionary that you created
  in the previous step.

.. literalinclude:: /includes/authentication/gcp-gke-mongoclient.py
      :language: python
      :copyable: true
      :emphasize-lines: 11-15

.. _pymongo-mongodb-oidc-kubernetes:

Kubernetes
~~~~~~~~~~

If your application runs on a Kubernetes cluster, you can authenticate to MongoDB by using
{+driver-short+}'s built-in Kubernetes support.

You can configure OIDC for Kubernetes in two ways: by passing arguments to the
``MongoClient`` constructor or through parameters in your connection string. Select from
the following tabs to see how to enable Kubernetes authentication for your application:

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. literalinclude:: /includes/authentication/kubernetes-mongoclient.py
         :language: python
         :copyable: true
         :start-after: start-kubernetes-mongoclient
         :end-before: end-kubernetes-mongoclient
   
   .. tab:: Connection String
      :tabid: connectionstring

      .. literalinclude:: /includes/authentication/kubernetes-connection-string.py
         :language: python
         :copyable: true
         :start-after: start-kubernetes-connection-string
         :end-before: end-kubernetes-connection-string
