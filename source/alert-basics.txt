.. _alert-basics:

============
Alert Basics
============

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

|service| provides built-in tools, alerts, charts, integrations, and 
logs to help you monitor your {+database-deployments+}. |service| 
provides alerts to help you monitor your {+database-deployments+} 
and improve performance in the following ways:

1. A variety of :ref:`conditions <alert-conditions>` can trigger 
   an alert.

#. You can :ref:`configure alerts settings <configure-alerts>` based on 
   specific conditions for your databases, users, accounts, and more.

#. When you :ref:`resolve alerts <respond-to-alerts>`, you can fix the 
   immediate problem, implement a long-term solution, and monitor your 
   progress.

.. include:: /includes/fact-alert-intro.rst

Useful Metrics and Alert Conditions
-----------------------------------

When you configure alerts, you specify alert conditions and thresholds. 
Review the possible :ref:`alert conditions <alert-conditions>` for 
which you can trigger alerts related to your {+database-deployments+}.

.. include:: /includes/fact-free-shared-alerts.rst

Consistently monitor metrics to help ensure efficient
{+database-deployments+}.

Tickets Available
~~~~~~~~~~~~~~~~~

These alert conditions help you monitor the number of concurrent read 
or write operations that can occur. When all tickets are claimed, 
operations must wait and enter the queue.

You can view these metrics on the :guilabel:`Tickets Available` chart, 
accessed through :doc:`cluster monitoring </monitor-cluster-metrics>`.

To learn more, see the :ref:`Tickets Available alert conditions 
<wt-storage-engine>`.

Queues
~~~~~~

These alert conditions measure operations waiting on locks.

You can view these metrics on the :guilabel:`Queues` chart, accessed 
through :doc:`cluster monitoring </monitor-cluster-metrics>`.

To learn more, see the :ref:`Queues alert conditions <queues>`.

CPU Steal
~~~~~~~~~

AWS EC2 clusters that support :aws:`Burstable Performance 
</AWSEC2/latest/UserGuide/burstable-performance-instances.html>` might 
experience CPU steal when using shared CPU cores. This alert condition 
measures the percentage by which the CPU usage exceeds the guaranteed 
baseline CPU credit accumulation rate.

CPU credits are units of CPU utilization that you accumulate. The 
credits accumulate at a constant rate to provide a guaranteed level of 
performance. These credits can be used for additional CPU performance. 
When the credit balance is exhausted, only the guaranteed baseline of 
CPU performance is provided, and the amount of excess is shown as 
steal percent.

You can view CPU usage on the :guilabel:`Normalized System CPU` chart, 
accessed through :doc:`cluster monitoring </monitor-cluster-metrics>`.

To learn more, see the :alert:`System: CPU (Steal) % is` alert 
condition.

Query Targeting
~~~~~~~~~~~~~~~

Properly configured indexes can significantly improve query 
performance. These alert conditions help identify inefficient queries. 
Too many indexes can impact write performance.

You can view these metrics on the :guilabel:`Query Targeting` chart, 
accessed through :doc:`cluster monitoring </monitor-cluster-metrics>`.

To learn more, see the :ref:`Query Targeting alert conditions 
<query-targeting-alerts>`.

Connection Limits
~~~~~~~~~~~~~~~~~

Each |service| instance has a connection limit. These alert 
conditions help you proactively address scaling needs or potential 
issues related to connection availability.

You can view these metrics on the :guilabel:`Connections` chart, 
accessed through :doc:`cluster monitoring </monitor-cluster-metrics>`.

To learn more, see the :ref:`Connection alert conditions 
<alert-conditions-connections>`.

Configure Alerts
----------------

To set which conditions trigger alerts and how users are notified, 
:doc:`/configure-alerts`. You can configure alerts at the organization 
or project level. |service| provides default alerts at the project 
level. You can clone existing alerts and configure maintenance window 
alerts.

Experiment with alert condition values based on your specific 
requirements. Periodically reassess these values for optimal 
performance.

Tickets Available
~~~~~~~~~~~~~~~~~

Configure the alert settings to send an alert if these metrics drop 
below 30 for at least a few minutes. You want to avoid false positives 
triggered by relatively harmless short-term drops, but catch issues 
when these metrics stay low for a while.

To configure these alert conditions, see :doc:`/configure-alerts`.

Queues
~~~~~~

Configure the alert settings to send an alert if these metrics rise 
above 100 for a minute. You want to avoid false positives triggered by 
relatively harmless short-term spikes, but catch issues when these 
metrics stay elevated for a while.

To configure these alert conditions, see :doc:`/configure-alerts`.

CPU Steal
~~~~~~~~~

Configure the alert settings to send an alert if this metric rises 
above 10%.

To configure this alert condition, see :doc:`/configure-alerts`.

Query Targeting
~~~~~~~~~~~~~~~

Configure the alert settings to send an alert if this metric rises 
above 50 or 100.

To configure these alert conditions, see :doc:`/configure-alerts`.

Connection Limits
~~~~~~~~~~~~~~~~~

Configure the alert settings to send an alert if the Connection % of 
the configured limit rises above 80% or 90%.

To configure these alert conditions, see :doc:`/configure-alerts`.

Resolve Alerts
--------------

When a condition triggers an alert, |service| displays a warning symbol 
on the cluster and sends alert notifications. Resolve these
alerts and work to prevent alert conditions from occurring in the 
future. To learn how to fix the immediate problem, implement a 
long-term solution, and monitor your progress, see 
:doc:`/alert-resolutions`.

Tickets Available
~~~~~~~~~~~~~~~~~

:ref:`Tickets Available alerts <wt-storage-engine>` can help you detect 
queries that took a little longer than expected due to load. 

Increasing your instance size, or sometimes disk speed, can help these 
metrics. 

Queues
~~~~~~

:ref:`Queues alerts <queues>` can help you detect queries that took a 
little longer than expected due to load. 

Increasing your instance size, or sometimes disk speed, can help these 
metrics. 

CPU Steal
~~~~~~~~~

The :alert:`System: CPU (Steal) % is` alert occurs when the CPU usage 
exceeds the guaranteed baseline CPU credit accumulation rate by the 
specified threshold.

To learn more, see :ref:`system-cpu`.

Query Targeting
~~~~~~~~~~~~~~~

:ref:`Query Targeting alerts <query-targeting-alerts>` often indicate 
inefficient queries.

To learn more, see :ref:`query-targeting-resolution`.

Connection Limits
~~~~~~~~~~~~~~~~~

:ref:`Connection alerts <alert-conditions-connections>` typically
occur when the maximum number of allowable connections to a MongoDB
process has been exceeded. Once the limit is exceeded, no new
connections can be opened until the number of open connections drops
down below the limit.

To learn more, see :ref:`connection-alerts`.

Alerts Workflow
---------------

When an :ref:`alert condition <alert-conditions>` is met, the alert 
lifecycle begins.

To learn more, see the :ref:`Alerts Workflow 
<alerts-workflow>`.
