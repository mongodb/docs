.. meta::
   :robots: noindex, nosnippet

.. _react-native-data-types-sets:

=======================
Sets - React Native SDK
=======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. versionadded:: ``realm@10.5.0``

A Realm Set is a special object that allows you to store a
collection of unique values. Realm Sets are based on JavaScript
:mdn:`sets <Web/JavaScript/Reference/Global_Objects/Set>`, but can only contain
values of a single type and can only be modified within a write transaction.
Sets allow you to perform math operations such as finding the union,
intersection, or difference between two Sets. To learn more about performing
these operations, see the MDN docs for :mdn:`Implementing basic set operations
<Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations>`.
   
.. _react-native-define-set-objects:

Realm Object Models
-------------------

You can define a Realm object model property type as a Realm Set, in a
two ways:

- Specify the data type the Set will contain, followed by ``<>``.
- Use object notation and the ``type`` field for more complicated properties.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/Character.snippet.ts-character-schema.ts
         :language: typescript
         :emphasize-lines: 4, 5, 13, 15
         :linenos:

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/Character.snippet.js-character-schema.js
         :language: javascript
         :emphasize-lines: 8, 10
         :linenos:

.. _react-native-create-set-objects:

Create an Object With a Set
---------------------------

To create an object with a Realm Set property, you must create
the object within a write transaction. When defining your Realm
object, initialize the Realm Set by passing an empty array or an
array with your initial values.

Example
~~~~~~~

In the following example of a ``CreateInitialCharacters`` component, we create
``Character`` objects with Set properties.

The ``CreateInitialCharacters`` component does the following:

- Gets access to an opened realm instance by calling the ``useRealm()`` hook
  within the component. 
- Uses React's `useEffect <https://react.dev/reference/react/useEffect>`__ hook
  to call an anonymous function only once with ``useEffect`` and an
  empty dependency array. Within the anonymous function, we create two different
  ``Character`` objects within a write transaction. We set each character's
  ``inventory`` and ``levelsCompleted`` sets as an array with initial values.
- Retrieves all characters in the realm instance by passing the ``Character``
  class to the ``useQuery()`` hook.
- Displays each character's name in the UI as a ``Text`` element.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/sets-test.snippet.create-set-object.tsx
         :language: typescript
         :emphasize-lines: 8-9, 17-18
         :linenos:

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/sets-test.snippet.create-set-object.jsx
         :language: javascript
         :emphasize-lines: 8-9, 16-17
         :linenos:

.. _react-native-add-items-to-set:

Add Items to a Set
------------------

To add an item to a Set, pass the new value to the :js-sdk:`Realm.Set.add() 
<Realm.Set.html#add>` method method within a write transaction.

Example
~~~~~~~

In the following example of a ``AddInventoryToCharacter`` component, we add new
Set elements to the character's inventory.

The ``AddInventoryToCharacter`` component does the following:

- Gets access to an opened realm instance by calling the ``useRealm()`` hook
  within the component. 
- Creates a `state variable <https://react.dev/reference/react/Component#state>`__
  called "inventoryItem" that represents the new inventory item to add to the
  inventory Set.
- Retrieves the character by passing the ``Character`` class to the
  ``useQuery()`` hook and running the :js-sdk:`Collection.filtered() 
  <Realm.Collection.html#filtered>` method on the result to filter for
  characters with the name matching the ``characterName``
  `prop <https://react.dev/learn/passing-props-to-a-component>`__. Then we set
  the variable ``character`` to the first matching result.
- Creates a component method ``addInventoryItem()`` that performs a write
  transaction that adds an inventory item to the character's inventory by passing
  the ``inventoryItem`` state variable to ``Realm.Set.add()``.
- Renders a ``TextInput`` that changes the ``inventoryItem`` state variable,
  and a ``Button`` that calls the ``addInventoryItem()`` method.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/sets-test.snippet.add-items-to-set.tsx
         :language: typescript
         :emphasize-lines: 17-19
         :linenos:

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/sets-test.snippet.add-items-to-set.jsx
         :language: javascript
         :emphasize-lines: 13-15
         :linenos:

.. _react-native-check-if-set-has-items:
.. _react-native-check-set-size:
.. _react-native-check-set-size-and-has-items:

Check if a Set has Specific Items and Check the Size of a Set
-------------------------------------------------------------

You may want to check for information about your Set, such as its size or
if it contains specific item.

To determine if a Set contains a particular value, pass the value to the
:js-sdk:`Realm.Set.has() <Realm.Set.html#has>` method. This method will return
``true`` if the Set contains the value specified.

To discover how many items are in a Set, you can check its ``size`` property.

Example
~~~~~~~

In the following example of a ``QueryCharacterInventory`` component, we check
the character's inventory size and if it has a specific item.

The ``QueryCharacterInventory`` component does the following:

- Creates a `state variable <https://react.dev/reference/react/Component#state>`__
  called "inventoryItem" that represents the inventory item that you want to
  search the character's inventory for.
- Uses the ``useQuery`` hook to perform a query for all characters, and filter
  the results to only include the characters with the name matching the
  ``characterName`` passed to the component as a `prop 
  <https://react.dev/learn/passing-props-to-a-component>`__. Then we get the first
  matching result.
- Retrieves the character by passing the ``Character`` class to the ``useQuery()``
  hook and running the :js-sdk:`Collection.filtered() <Realm.Collection.html#filtered>`
  method on the result to filter for characters with the name matching the 
  ``characterName`` prop.
  Then we set the variable ``character`` to the first matching result.
- Creates a component method ``queryCharacterInventory`` that passes the
  ``inventoryItem`` state variable to ``Realm.Set.has()`` to check if the
  character's inventory contains the item. If the character's inventory contains
  the item, the method `alerts <https://reactnative.dev/docs/alert>`__ that the
  character has the item. If the character's inventory does not contain the item,
  the method alerts that the character does not have the item.
- Renders the character's name, and renders the inventory size using the ``size``
  property of the character's inventory. It also renders a ``TextInput`` that
  changes the ``inventoryItem`` state variable, and a ``Button`` that calls the
  ``queryCharacterInventory`` method.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/sets-test.snippet.check-set-items-and-size.tsx
         :language: typescript
         :emphasize-lines: 16-17
         :linenos:

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/sets-test.snippet.check-set-items-and-size.jsx
         :language: javascript
         :emphasize-lines: 12
         :linenos:

.. _react-native-remove-specific-item-from-set:
.. _react-native-remove-all-items-from-set:
.. _react-native-remove-set-info:

Remove Set Information
----------------------

You may want to remove a specific item or all items from a Set.

To remove a specific value from a Set, pass the value to the
:js-sdk:`Realm.Set.delete() <Realm.Set.html#delete>` method within a write
transaction.

To clear the Set, run the :js-sdk:`Realm.Set.clear() <Realm.Set.html#clear>`
method within a write transaction.

Example
~~~~~~~

In the following example of a ``RemoveInventoryFromCharacter`` component, we
remove a specific item from the Set and clear the Set of all items.

The ``RemoveInventoryFromCharacter`` component does the following:

- Gets access to an opened realm instance by calling the ``useRealm()`` hook
  within the component. 
- Creates a `state variable <https://react.dev/reference/react/Component#state>`__
  called "inventoryItem" that represents the inventory item to remove from the
  inventory Set.
- Creates a component method ``removeInventoryItem`` that passes the
  ``inventoryItem`` state variable to ``Realm.Set.delete()`` to remove the
  item from the character's inventory.
- Creates a component method ``removeAllInventory`` that calls ``Realm.Set.clear()``
  to remove all items from the character's inventory.
- Renders a ``TextInput`` that changes the ``inventoryItem`` state variable, and
  two ``Button`` components that call the ``removeInventoryItem`` and
  ``removeAllInventory`` methods, respectively. 

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/sets-test.snippet.remove-items-from-set.tsx
         :language: typescript
         :emphasize-lines: 17-19, 22-24
         :linenos:

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/sets-test.snippet.remove-items-from-set.jsx
         :language: javascript
         :emphasize-lines: 13-15, 18-20
         :linenos:

.. _react-native-traverse-set:

Traverse a Set
--------------

You can traverse a Set to access each item in the Set. To traverse a
Set, use the ``Set.map()`` method or alternative :mdn:`iteration
method <Web/JavaScript/Reference/Global_Objects/Set#iteration_methods>`. 

However, by default the order of the items in a Set is not guaranteed. To
traverse a Set in order, you can store the Set's items in a `state variable
<https://react.dev/reference/react/Component#state>`__ and update that state variable
when you add new items to the Set.

Example
~~~~~~~

In the following example of a ``TraverseCharacterInventory`` component, a
character starts with no inventory items. When the user adds items to the
inventory Set, the component displays each item in the Set in both an
ordered and unordered list.

The ``TraverseCharacterInventory`` component does the following:

- Gets access to an opened realm instance by calling the ``useRealm()`` hook
  within the component. 
- Creates a state variable called "inventoryItem" that represents the new
  inventory item to add to the inventory Set.
- Creates a state variable called "inventory" that will hold the character's
  inventory items in order of insertion.
- Retrieves the character by passing the ``Character`` class to the ``useQuery()``
  hook and running the :js-sdk:`Collection.filtered() <Realm.Collection.html#filtered>`
  method on the result to filter for characters with the name matching the
  ``characterName`` `prop <https://react.dev/learn/passing-props-to-a-component>`__.
  Then we set the variable ``character`` to the first matching result.
- Creates a component method ``addInventoryItem()`` that performs a write
  transaction that adds an inventory item to the character's inventory by passing
  the ``inventoryItem`` state variable to the :js-sdk:`Realm.Set.add() 
  <Realm.Set.html#add>` method. After the write transaction, the method adds the
  ``inventoryItem`` to the ``inventory`` array state variable.
- Renders a ``TextInput`` that changes the ``inventoryItem`` state variable, and
  a ``Button`` that calls the ``addInventoryItem()`` method.
- Renders a list of the character's inventory items in the order they were added
  to the Set by iterating through the ``inventory`` array state variable.
- Renders a unordered list of the character's inventory by iterating through
  ``character.inventory``.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/sets-test.snippet.traverse-a-set.tsx
         :language: typescript
         :emphasize-lines: 19-22
         :linenos:

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/sets-test.snippet.traverse-a-set.jsx
         :language: javascript
         :emphasize-lines: 15-18
         :linenos:
