arg_name: field
description: |
  To create a :term:`capped collection`,
  specify ``true``. If you specify ``true``, you must also set a maximum
  size in the ``size`` field.
interface: method
name: capped
operation: db.createCollection
optional: true
type: boolean
---
arg_name: field
description: |
  Specify ``false`` to disable the automatic creation of an index on the
  ``_id`` field.

  .. important::

     Starting in MongoDB 4.0, you cannot set the option ``autoIndexId``
     to ``false`` when creating collections in databases other than the
     ``local`` database.

  .. deprecated:: 3.2

interface: method
name: autoIndexId
operation: db.createCollection
optional: true
type: boolean
---
arg_name: field
description: |
  Specify a maximum size in bytes for a capped collection. Once a
  capped collection reaches its maximum size, MongoDB removes the older
  documents to make space for the new documents. The ``size`` field is
  required for capped collections and ignored for other collections.
interface: method
name: size
operation: db.createCollection
optional: true
type: number
---
arg_name: field
description: |
  The maximum number of documents allowed in the capped collection. The
  ``size`` limit takes precedence over this limit. If a capped
  collection reaches the ``size`` limit before it reaches the maximum
  number of documents, MongoDB removes old documents. If you prefer to
  use the ``max`` limit, ensure that the ``size`` limit, which is
  required for a capped collection, is sufficient to contain the
  maximum number of documents.
interface: method
name: max
operation: db.createCollection
optional: true
type: number
---
arg_name: field
description: |2
  Available for the WiredTiger storage engine only.

  .. versionadded:: 3.0

  Allows users to specify configuration to the storage engine on a
  per-collection basis when creating a collection. The value of the
  ``storageEngine`` option should take the following form:

  .. code-block:: javascript

     { <storage-engine-name>: <options> }

  Storage engine configuration specified when creating collections are
  validated and logged to the :term:`oplog` during replication to
  support replica sets with members that use different storage
  engines.
interface: method
name: storageEngine
operation: db.createCollection
optional: true
type: document
---
arg_name: field
description: |
  Allows users to specify :doc:`validation rules or expressions
  </core/schema-validation>` for the collection. For more information,
  see :doc:`/core/schema-validation`.

  .. versionadded:: 3.2

  The ``validator`` option takes a document that specifies the
  validation rules or expressions. You can specify the expressions using
  the same operators as the :ref:`query operators <query-selectors>`
  with the exception of :query:`$geoNear`, :query:`$near`,
  :query:`$nearSphere`, :query:`$text`, and :query:`$where`.

  .. note::

     - Validation occurs during updates and inserts. Existing
       documents do not undergo validation checks until modification.

     - You cannot specify a validator for collections in the ``admin``,
       ``local``, and ``config`` databases.

     - You cannot specify a validator for ``system.*`` collections.

interface: method
name: validator
operation: db.createCollection
optional: true
type: document
---
arg_name: field
description: |
   Determines how strictly MongoDB applies the
   validation rules to existing documents during an update.

   .. versionadded:: 3.2

   .. include:: /includes/extracts/table-validationLevel-values.rst

interface: method
name: validationLevel
operation: db.createCollection
optional: true
type: string
---
arg_name: field
description: |
   Determines whether to ``error`` on invalid documents or just ``warn``
   about the violations but allow invalid documents to be inserted.

   .. versionadded:: 3.2

   .. important::

      Validation of documents only applies to those documents as
      determined by the ``validationLevel``.

   .. include:: /includes/extracts/table-validationAction-values.rst

interface: method
name: validationAction
operation: db.createCollection
optional: true
type: string
---
name: indexOptionDefaults
arg_name: field
description: |
  Allows users to specify a default configuration for indexes when
  creating a collection.

  The ``indexOptionDefaults`` option accepts a ``storageEngine``
  document, which should take the following form:

  .. code-block:: javascript

     { <storage-engine-name>: <options> }

  Storage engine configuration specified when creating indexes are
  validated and logged to the :term:`oplog` during replication to
  support replica sets with members that use different storage
  engines.

  .. versionadded:: 3.2

interface: method
operation: db.createCollection
optional: true
type: document
---
name: viewOn
source:
   file: apiargs-method-db.createView-param.yaml
   ref: source
arg_name: field
interface: dbcommand
operation: create
post: |
   See also :method:`db.createView()`.

   .. versionadded:: 3.4
---
name: pipeline
source:
   file: apiargs-method-db.createView-param.yaml
   ref: pipeline
arg_name: field
interface: dbcommand
operation: create
replacement:
   source: "``viewOn`` collection or view"
post: |
   See also :method:`db.createView()`.

   .. versionadded:: 3.4
---
name: collation
arg_name: field
type: document
interface: dbcommand
operation: create
description: |
   Specifies the default :ref:`collation <collation>` for the collection.
   
   .. include:: /includes/extracts/collation-description.rst

   .. include:: /includes/extracts/collation-option-specification.rst

   .. include:: /includes/extracts/collation-collection-level.rst

   .. include:: /includes/extracts/collation-unspecified.rst

   For a collection, you can only specify the collation during the
   collection creation. Once set, you cannot modify the collection's
   default collation.

   For an example, see {{example}}.

   .. versionadded:: 3.4

replacement:
   example: ":ref:`createCollection-collation-example`"
---
name: writeConcern
description: |
  A document that expresses the :doc:`write concern </reference/write-concern>`
  for the operation. Omit to use the default write
  concern.

  .. include:: /includes/extracts/mongos-operations-wc-create.rst

optional: true
type: document
interface: method
operation: db.createCollection
arg_name: field
...
