.. _php-aggregation:

====================================
Transform Your Data with Aggregation
====================================

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: code example, transform, computed, pipeline
   :description: Learn how to use the PHP library to perform aggregation operations.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:
   :maxdepth: 1

   Atlas Search </aggregation/atlas-search>
   Atlas Vector Search </aggregation/vector-search>

Overview
--------

In this guide, you can learn how to use the {+php-library+} to perform
**aggregation operations**.

Aggregation operations process data in your MongoDB collections and
return computed results. The MongoDB Aggregation framework, which is
part of the Query API, is modeled on the concept of data processing
pipelines. Documents enter a pipeline that contains one or more stages,
and this pipeline transforms the documents into an aggregated result.

An aggregation operation is similar to a car factory. A car factory has
an assembly line, which contains assembly stations with specialized
tools to do specific jobs, like drills and welders. Raw parts enter the
factory, and then the assembly line transforms and assembles them into a
finished product.

The **aggregation pipeline** is the assembly line, **aggregation stages** are the
assembly stations, and **operator expressions** are the
specialized tools.

Compare Aggregation and Find Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use find operations to perform the following actions:

- Select which documents to return
- Select which fields to return
- Sort the results

You can use aggregation operations to perform the following actions:

- Run find operations
- Rename fields
- Calculate fields
- Summarize data
- Group values

Limitations
~~~~~~~~~~~

Consider the following limitations when performing aggregation operations:

- Returned documents cannot violate the
  :manual:`BSON document size limit </reference/limits/#mongodb-limit-BSON-Document-Size>`
  of 16 megabytes.

- Pipeline stages have a memory limit of 100 megabytes by default. You can exceed this
  limit by creating an options array that sets the ``allowDiskUse`` option to ``true``
  and passing the array to the ``MongoDB\Collection::aggregate()`` method.

  .. important:: $graphLookup Exception

     The :manual:`$graphLookup
     </reference/operator/aggregation/graphLookup/>` stage has a strict
     memory limit of 100 megabytes and ignores the ``allowDiskUse`` option.

Aggregation APIs
----------------

The {+library-short+} provides the following APIs to create aggregation
pipelines:

- :ref:`php-aggregation-array-api`: Create aggregation pipelines by
  passing arrays that specify the aggregation stages.
- :ref:`php-aggregation-builder-api`: Create aggregation pipelines by
  using factory methods to make your application more type-safe and debuggable.

The following sections describe each API and provide examples for
creating aggregation pipelines.

.. _php-aggregation-array-api:

Array API
---------

To perform an aggregation, pass an array containing the pipeline stages
as BSON documents to the ``MongoDB\Collection::aggregate()`` method, as
shown in the following code:

.. code-block:: php
    
   $pipeline = [
       ['<stage>' => <parameters>],
       ['<stage>' => <parameters>],
       // ...
   ];
   
   $cursor = $collection->aggregate($pipeline);
  
The examples in this section use the ``restaurants`` collection in the ``sample_restaurants``
database from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
free MongoDB Atlas cluster and load the sample datasets, see the :atlas:`Get Started with Atlas
</getting-started>` guide.

Filter and Group Example
~~~~~~~~~~~~~~~~~~~~~~~~

The following code example produces a count of the number of bakeries in each borough
of New York. To do so, it uses an aggregation pipeline that contains the following stages:

1. :manual:`$match </reference/operator/aggregation/match/>` stage to filter for documents
   in which the ``cuisine`` field contains the value ``'Bakery'``

#. :manual:`$group </reference/operator/aggregation/group/>` stage to group the matching
   documents by the ``borough`` field, accumulating a count of documents for each distinct
   value

.. io-code-block::
   :copyable:

   .. input:: /includes/aggregation/aggregation.php
      :start-after: start-array-match-group
      :end-before: end-array-match-group
      :language: php
      :dedent:

   .. output:: 
      :visible: false

      {"_id":"Brooklyn","count":173}
      {"_id":"Queens","count":204}
      {"_id":"Bronx","count":71}
      {"_id":"Staten Island","count":20}
      {"_id":"Missing","count":2}
      {"_id":"Manhattan","count":221}

Explain an Aggregation
~~~~~~~~~~~~~~~~~~~~~~

To view information about how MongoDB executes your operation, you can
instruct the MongoDB query planner to **explain** it. When MongoDB explains
an operation, it returns **execution plans** and performance statistics.
An execution plan is a potential way in which MongoDB can complete an operation.
When you instruct MongoDB to explain an operation, it returns both the
plan MongoDB executed and any rejected execution plans.

To explain an aggregation operation, construct a ``MongoDB\Operation\Aggregate`` object
and pass the database, collection, and pipeline stages as parameters. Then, pass the
``MongoDB\Operation\Aggregate`` object to the ``MongoDB\Collection::explain()`` method.

The following example instructs MongoDB to explain the aggregation operation
from the preceding section:

.. io-code-block::
   :copyable:

   .. input:: /includes/aggregation/aggregation.php
      :start-after: start-array-explain
      :end-before: end-array-explain
      :language: php
      :dedent:

   .. output::
      :visible: false

      {"explainVersion":"2","queryPlanner":{"namespace":"sample_restaurants.restaurants",
      "indexFilterSet":false,"parsedQuery":{"cuisine":{"$eq":"Bakery"}},"queryHash":"865F14C3",
      "planCacheKey":"D56D6F10","optimizedPipeline":true,"maxIndexedOrSolutionsReached":false,
      "maxIndexedAndSolutionsReached":false,"maxScansToExplodeReached":false,"winningPlan":{
      ... }

.. _php-aggregation-builder-api:

Aggregation Builder
-------------------

To create an aggregation pipeline by using the Aggregation Builder,
perform the following actions:

1. Create a ``MongoDB\Builder\Pipeline`` instance to store the pipeline stages.

#. For each stage, call the a factory method from the
   ``Stage`` that shares the same name as your desired aggregation
   stage. For example, to create an ``$unwind`` stage, call the
   ``Stage::unwind()`` method.

#. Within the body of the ``Stage`` method, use methods from other
   builder classes such as ``Query``, ``Expression``, or ``Accumulator``
   to express your aggregation specifications.

The following code demonstrates the template for constructing
aggregation pipelines:

.. code-block:: php

   $pipeline = new Pipeline(
       Stage::<factory method>(
           <stage specification>
       ),
       Stage::<factory method>(
           <stage specification>
       ),
       // ...
   );
   
   $cursor = $collection->aggregate($pipeline);

The examples in this section are adapted from the {+mdb-server+} manual.
Each example provides a link to the sample data that you can insert into
your database to test the aggregation operation.

.. tip:: Operations with Builders
    
   You can use builders to support non-aggregation operations such as
   find and update operations. To learn more, see the :ref:`php-builders`
   guide.

Filter and Group Example
~~~~~~~~~~~~~~~~~~~~~~~~

This example uses the sample data given in the :manual:`Calculate Count,
Sum, and Average </reference/operator/aggregation/group/#calculate-count--sum--and-average>`
section of the ``$group`` stage reference in the Server manual.

The following code example calculates the total sales amount, average
sales quantity, and sale count for each day in the year 2014. To do so,
it uses an aggregation pipeline that contains the following stages:

1. :manual:`$match </reference/operator/aggregation/match/>` stage to
   filter for documents that contain a ``date`` field in which the year is
   2014

#. :manual:`$group </reference/operator/aggregation/group/>` stage to
   group the documents by date and calculate the total sales amount,
   average sales quantity, and sale count for each group
  
#. :manual:`$sort </reference/operator/aggregation/sort/>` stage to
   sort the results by the total sale amount for each group in descending
   order
  
.. io-code-block::
   :copyable:

   .. input:: /includes/aggregation/aggregation.php
      :start-after: start-builder-match-group
      :end-before: end-builder-match-group
      :language: php
      :dedent:

   .. output:: 
      :visible: false

      {"_id":"2014-04-04","totalSaleAmount":{"$numberDecimal":"200"},"averageQuantity":15,"count":2}
      {"_id":"2014-03-15","totalSaleAmount":{"$numberDecimal":"50"},"averageQuantity":10,"count":1}
      {"_id":"2014-03-01","totalSaleAmount":{"$numberDecimal":"40"},"averageQuantity":1.5,"count":2}

Unwind Embedded Arrays Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example uses the sample data given in the :manual:`Unwind Embedded Arrays
</reference/operator/aggregation/unwind/#unwind-embedded-arrays>`
section of the ``$unwind`` stage reference in the Server manual.

The following code example groups sold items by their tags and
calculates the total sales amount for each tag. To do so,
it uses an aggregation pipeline that contains the following stages:

1. :manual:`$unwind </reference/operator/aggregation/unwind/>` stage to
   output a separate document for each element in the ``items`` array

#. :manual:`$unwind </reference/operator/aggregation/unwind/>` stage to
   output a separate document for each element in the ``items.tags`` arrays
  
#. :manual:`$group </reference/operator/aggregation/group/>` stage to
   group the documents by the tag value and calculate the total sales
   amount of items that have each tag
  
.. io-code-block::
   :copyable:

   .. input:: /includes/aggregation/aggregation.php
      :start-after: start-builder-unwind
      :end-before: end-builder-unwind
      :language: php
      :dedent:

   .. output:: 
      :visible: false

      {"_id":"office","totalSalesAmount":{"$numberDecimal":"1019.60"}}
      {"_id":"school","totalSalesAmount":{"$numberDecimal":"104.85"}}
      {"_id":"stationary","totalSalesAmount":{"$numberDecimal":"264.45"}}
      {"_id":"electronics","totalSalesAmount":{"$numberDecimal":"800.00"}}
      {"_id":"writing","totalSalesAmount":{"$numberDecimal":"60.00"}}

Single Equality Join Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example uses the sample data given in the :manual:`Perform a Single
Equality Join with $lookup
</reference/operator/aggregation/lookup/#perform-a-single-equality-join-with--lookup>`
section of the ``$lookup`` stage reference in the Server manual.

The following code example joins the documents from the ``orders``
collection with the documents from the ``inventory`` collection by using
the ``item`` field from the ``orders`` collection and the ``sku`` field
from the ``inventory`` collection.

To do so, the example uses an aggregation pipeline that contains a 
:manual:`$lookup </reference/operator/aggregation/lookup/>` stage that
specifies the collection to retrieve data from and the local and
foreign field names.

.. io-code-block::
   :copyable:

   .. input:: /includes/aggregation/aggregation.php
      :start-after: start-builder-lookup
      :end-before: end-builder-lookup
      :language: php
      :dedent:

   .. output:: 
      :visible: false

      {"_id":1,"item":"almonds","price":12,"quantity":2,"inventory_docs":[{"_id":1,"sku":"almonds","description":"product 1","instock":120}]}
      {"_id":2,"item":"pecans","price":20,"quantity":1,"inventory_docs":[{"_id":4,"sku":"pecans","description":"product 4","instock":70}]}
      {"_id":3,"inventory_docs":[{"_id":5,"sku":null,"description":"Incomplete"},{"_id":6}]}

Additional Information
----------------------

To view a tutorial that uses the {+php-library+} to create complex aggregation
pipelines, see `Complex Aggregation Pipelines with Vanilla PHP and MongoDB 
<https://www.mongodb.com/developer/products/mongodb/aggregations-php-mongodb/>`__
in the MongoDB Developer Center.

To view more examples of aggregation pipelines built by using the Aggregation
Builder, see the :github:`Stage class test suite
<mongodb/mongo-php-library/tree/{+source-gh-branch+}/tests/Builder/Stage>` in the
{+library-short+} source code on GitHub.

MongoDB Server Manual
~~~~~~~~~~~~~~~~~~~~~

To learn more about the topics discussed in this guide, see the following
pages in the {+mdb-server+} manual:

- To view a full list of expression operators, see :manual:`Aggregation
  Operators </reference/operator/aggregation/>`.

- To learn about assembling an aggregation pipeline and to view examples, see
  :manual:`Aggregation Pipeline </core/aggregation-pipeline/>`.

- To learn more about creating pipeline stages, see :manual:`Aggregation
  Stages </reference/operator/aggregation-pipeline/>`.

- To learn more about explaining MongoDB operations, see
  :manual:`Explain Output </reference/explain-results/>` and
  :manual:`Query Plans </core/query-plans/>`.

Atlas Search and Vector Search
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can perform full-text searches by using the Atlas Search feature. To
learn more, see the :ref:`php-atlas-search` guide.

You can perform similarity searches on vector embeddings by using the
Atlas Vector Search feature. To learn more, see the :ref:`php-vector-search` guide.

.. TODO:
 Aggregation Tutorials
 ~~~~~~~~~~~~~~~~~~~~~

.. To view step-by-step explanations of common aggregation tasks, see
.. :ref:`php-aggregation-tutorials-landing`.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the methods discussed in this guide, see the
following API documentation:

- :phpmethod:`MongoDB\Collection::aggregate()`
- :phpmethod:`MongoDB\Collection::explain()`
