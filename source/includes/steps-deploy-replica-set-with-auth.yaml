title: Create the key file to be used by each member of the replica set.
level: 4
stepnum: 1
ref: generate-keyfile
source:
  file: steps-generate-key-file.yaml
  ref: generate
---
title: Copy the key file to each member of the replica set.
level: 4
stepnum: 2
ref: copy-key-file
content: |

  Copy the ``mongodb-keyfile`` to all hosts where the replica set
  members run.
  
  On UNIX systems, the keyfile must not have group or world
  permissions:
     
  - Ensure that the user running the :program:`mongod` is the owner of
    the file.

  - Set the permissions of these files to ``400`` so that only the
    *owner* of the file can read this file.

---
title: Start each member of the replica set with the appropriate options.
level: 4
stepnum: 3
ref: start-mongod
pre: |
  For each member, start a :binary:`~bin.mongod` and specify the key file and
  the name of the replica set. Also specify other parameters as needed for
  your deployment. For replication-specific parameters, see
  :ref:`cli-mongod-replica-set` required by your deployment.

  .. include:: /includes/fact-unique-replica-set-names.rst
action:
  - pre: |
      The following example specifies parameters through the :option:`--keyFile <mongod --keyFile>`
      and :option:`--replSet <mongod --replSet>` command-line options:
    language: javascript
    code: |
      mongod --keyFile /mysecretdirectory/mongodb-keyfile --replSet "rs0"
  - pre: |
      If using a configuration file, set the :setting:`security.keyFile` option
      to the keyfile's path, and the :setting:`replication.replSetName` option
      to the replica set name:

      .. code-block:: yaml

         security:
           keyFile: /mysecretdirectory/mongodb-keyfile
         replication:
           replSetName: "rs0"

      Start the :binary:`~bin.mongod` using the configuration file:
    language: shell
    code: |
      mongod --config <path-to-config-file>
    post: |
      For more information on the configuration file, see
      :doc:`configuration options</reference/configuration-options>`.
---
stepnum: 4
title: Initiate the replica set. 
level: 4
ref: initiate-rs
pre: |
    Connect a :program:`mongo` shell to one member of the replica set and run
    :method:`rs.initiate()` method initiates the replica set.

    For example:

    .. code-block:: javascript

       rs.initiate( {
           _id : "rs0",
           members: [
             { _id : 0, host : "mongo1.example.net:27017" },
             { _id : 1, host : "mongo2.example.net:27017" },
             { _id : 2, host : "mongo3.example.net:27017" }
           ]
        })

    The :rsconf:`_id` *must* match the ``--replSet`` parameter or the
    :setting:`replication.replSetName` specified during startup.

---
stepnum: 5
title: Create administrative users.
level: 4
ref: create-administrative-users
pre: |

  Connected to the primary, create a root user (``siteRootAdmin``)
  that you will use to complete the remainder of the tutorial: 
action:
  language: javascript
  code: |
    use admin
    db.createUser( {
       user: "siteRootAdmin",
       pwd: "<password>",
       roles: [ { role: "root", db: "admin" } ]
    });
---
title: "Authenticate as the newly created user."
level: 4
stepnum: 6
ref: connect-and-auth
pre: |

action:
  language: javascript
  code: |
    use admin
    db.auth("siteRootAdmin", "<password>");
---
title: Create additional users to address operational requirements.
level: 4
stepnum: 7
ref: create-records-db-owner
pre: |
  You can use :doc:`built-in roles </reference/built-in-roles>` to create
  common types of database users, such as the :authrole:`dbOwner` role to
  create a database administrator, the :authrole:`readWrite` role to
  create a user who can update data, or the :authrole:`read` role to
  create user who can search data but no more. You also can define
  :ref:`custom roles <user-defined-roles>`.
action:
  pre: |
    For example, the following creates a database administrator for the
    ``products`` database:
  language: javascript
  code: |
    use products
    db.createUser(
      {
        user: "productsDBAdmin",
        pwd: "password",
        roles:
        [
          {
            role: "dbOwner",
            db: "products"
          }
        ]
      }
    )
post: |
  For an overview of roles and privileges, see :ref:`authorization`. For
  more information on adding users, see
  :doc:`/tutorial/manage-users-and-roles`.
...
