.. meta::
   :robots: noindex, nosnippet

.. _cpp-manage-users:

======================
Manage Users - C++ SDK
======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:

   Authenticate Users </sdk/cpp/users/authenticate-users>
   Manage Email/Password Users </sdk/cpp/users/manage-email-password-users>
   Custom User Data </sdk/cpp/users/custom-user-data>

When you use Atlas App Services to back your client app, you get access to a
:ref:`user object <user-objects>`. Use C++ SDK methods with this user 
object to conveniently:

- Create and delete users
- Log users in and out
- Create and update custom user data

.. _cpp-creating-and-deleting-users:

Create and Delete Users
-----------------------

For all authentication providers other than email/password authentication,
App Services automatically creates a user object the first time a user 
authenticates. With email/password authentication, your app must manually
register a user.

The C++ SDK does not yet have the ability to delete users through 
the SDK. You can delete users from the server using the :ref:`App Services 
Admin API <admin-api>` ``delete a user`` endpoints. You could optionally 
create an :ref:`Atlas Function <functions>` that uses the Admin API to 
delete a user, and :ref:`call the function from the SDK <cpp-call-a-function>`.

.. _cpp-access-the-app-client:

Log Users In and Out
--------------------

Use one or more :ref:`authentication providers <auth-providers>` to :ref:`log 
users in and out <cpp-authenticate-users>` of your client app. You can: 

- Log users in with an existing social account, such as Apple, Facebook,
  or Google. 
- Create new user accounts with App Services email/password management,
  or your own custom function or custom JWT user management.
- Enable anonymous users to let users access your App Services App without persisting
  user data.

When you have a logged-in user, SDK methods enable you to:

- :ref:`Open a synced realm <cpp-open-synced-realm>` with the user's 
  configuration object
- :ref:`Run a backend function <cpp-call-a-function>` as the logged-in user
- :ref:`Log the user out <cpp-logout>`

On successful login, the C++ SDK caches credentials on the device. You 
can bypass the login flow and access the cached user. Use this to open a 
realm or call a function upon subsequent app opens. 

User Sessions
~~~~~~~~~~~~~

.. include:: /includes/manage-user-sessions.rst

.. _cpp-app-work-with-custom-user-data:

Read and Update Custom User Data
--------------------------------

You can :ref:`associate custom data <custom-user-data>` with a user object, 
such as a preferred language or local timezone, and read it from your client 
application. A user object has a ``customData`` property that you can use 
to :ref:`access custom user data <cpp-read-a-users-custom-data>`. 

To :ref:`create <cpp-create-a-users-custom-data-document>` and :ref:`update 
<cpp-update-a-users-custom-data>` custom user data, you must access 
your MongoDB data source directly. App Services does not offer a SDK 
method to create or update this custom user data; it's a read-only property.
