.. _live-import-sharded:

====================================================
Live Migrate (Pull) a Sharded {+Cluster+} into Atlas
====================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

|service| can pull a source sharded {+cluster+} to an |service| {+cluster+}
using the live migration process. |service| syncs from the source to the
destination {+cluster+} until you cut your applications over to the
destination |service| {+cluster+}.

Once you reach the cutover step in the following procedure, stop writes
to the source {+cluster+} by stopping your application instances,
pointing them to the |service| {+cluster+}, and restarting them.

Restrictions
------------

- You can't migrate your sharded {+cluster+} to MongoDB v6.0 or later.
- You can't use a :doc:`Global Cluster </global-clusters>` as the
  destination for live migration.
- Live migration doesn't support :ref:`VPC peering <vpc-peering>` or
  :ref:`private endpoints <private-endpoint>` for either the source or
  destination {+cluster+}.
- .. include:: /includes/fact-live-migration-host-alerts.rst

To live migrate a replica set, see
:doc:`Live Migrate (Pull) a Replica Set into Atlas </import/live-import>`.

Prerequisites
-------------

- .. include:: /includes/fact-migrate-drop-geoHaystack.rst
- If the source {+cluster+} runs with authentication, specify a user to
  |service| that exists on every shard *and* the config server
  replica set. The user must have permissions to:

  - Stop or start the sharded {+cluster+} balancer.
  - Read all databases and collections on the host.
  - Read the oplog on the host.

To learn more, see :ref:`live-import-sharded-security`.

.. include:: /includes/note-source-cluster-readiness.rst

.. _live-import-sharded-upgrade-path:

Migration Path
~~~~~~~~~~~~~~

|service| live migration (pull) supports the following migration paths:

.. include:: /includes/list-tables/mongomirror-upgrade-path-sharded.rst

.. note::

   You can't migrate your sharded {+cluster+} to MongoDB v6.0 or later using
   this procedure.

   For sharded {+clusters+}, the major MongoDB versions on the source and
   destination {+clusters+} must be exactly the same. The major MongoDB version
   in the full **4.4.x** version is **4.4**.

.. _live-import-sharded-ip-access-list:

Network Access
~~~~~~~~~~~~~~~

.. include:: /includes/import/network-access.rst

.. _live-import-sharded-migration-validation:

Pre-Migration Validation
~~~~~~~~~~~~~~~~~~~~~~~~

|service| performs a number of validation checks on the source
and destination {+clusters+} before starting the live migration procedure.

- The source {+cluster+} must be a sharded {+cluster+}.

  If the source is replica set {+cluster+}, use
  :doc:`pull-type live migration </import/live-import>` to
  migrate the {+cluster+} to a |service| replica set first, then
  :doc:`scale your cluster </scale-cluster>` to a sharded {+cluster+}.

  If the source is a standalone,
  :manual:`convert the standalone to a replica set first </tutorial/convert-standalone-to-replica-set>`
  before using :doc:`pull-type live migration </import/live-import>`. Then
  :doc:`scale your cluster </scale-cluster>` to a sharded {+cluster+}.

- The source {+cluster+} must use CSRS (Config Server Replica Sets).
  See :ref:`replset-config-servers`.

- |service| must have connectivity to the hostname and port of each node
  in the source {+cluster+}.

- |service| must be able to stop and start the
  :ref:`sharding-balancing` on the source {+cluster+}.

- The source {+cluster+} has the same feature compatibility version
  *and* major MongoDB version as the destination {+cluster+}. The major
  MongoDB version in the full **4.4.x** version is **4.4**.

  To check the feature compatibility version of a host in the
  source {+cluster+}, run the following command from
  {+mongosh+}:

  .. code-block:: javascript

     db.runCommand( { getParameter : 1, "featureCompatibilityVersion" : 1 } )

  Use the :manual:`setFeatureCompatibilityVersion </reference/command/setFeatureCompatibilityVersion>`
  database command to set the ``featureCompatibilityVersion`` flag
  as needed.

- The destination |service| sharded {+cluster+} must have the same number of
  :term:`shards <shard>` as the source sharded {+cluster+}.

  .. _live-import-sharded-security:

Source {+Cluster+} Security
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/source-cluster-security.rst

Index Key Limits
~~~~~~~~~~~~~~~~

.. include:: /includes/fact-failIndexKeyTooLong-import.rst

Considerations
--------------

.. include:: /includes/fact-network-encryption-pull-migration.rst

Database Users and Roles
~~~~~~~~~~~~~~~~~~~~~~~~

|service| doesn't migrate any user or role data to the destination {+cluster+}.

.. include:: /includes/fact-create-atlas-user.rst

If the source {+cluster+} enforces authentication, you must recreate the
credentials that your applications use on the destination |service| {+cluster+}.
|service| uses :ref:`SCRAM <authentication-scram>` for user authentication.
To learn how to create database users in |service|, see :doc:`/security-add-mongodb-users`.

.. include:: /includes/fact-scram-pull-live-migration.rst

Source {+Cluster+} Balancer
~~~~~~~~~~~~~~~~~~~~~~~~~~~

|service| live migration stops the :manual:`sharded cluster balancer
</core/sharding-balancer-administration/>` on the source {+cluster+} at
the start of the procedure, and starts the balancer at the end of the
procedure.

If you cancel live migration, |service| restarts the balancer on the
source {+cluster+}.

.. note::

   Under some circumstances |service| can't restart the balancer on the
   source {+cluster+} at the end of a live migration process. If the balancer
   fails to restart, the live migration still succeeds but a warning banner
   indicates that you must
   :manual:`manually restart </tutorial/manage-sharded-cluster-balancer/>`
   the source {+cluster+} balancer.

Destination {+Cluster+} Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you configure the destination |service| {+cluster+}, consider the
following:

.. include:: /includes/fact-live-migration-destination-cluster.rst

- You can't target  a :doc:`Global Cluster </global-clusters>` as the
  destination for live migration.

  .. important::

     Once you start the live migration process, you can't modify the
     destination |service| {+cluster+}. To scale up the destination {+cluster+},
     :ref:`cancel <live-import-sharded-cancel>` the live migration process,
     scale up the {+cluster+}, and restart the live migration process.

Destination {+Cluster+} Network Access
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-target-cluster-nw-access.rst

Avoid Workloads on the Destination {+Cluster+}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-mongomirror-no-workloads-target-cluster.rst

Avoid Cloud Backups
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-avoid-backups.rst

Avoid Namespace Changes
~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-mongomirror-namespace-changes.rst

Avoid Elections
~~~~~~~~~~~~~~~

.. include:: /includes/fact-avoid-elections.rst


Rolling Restarts
~~~~~~~~~~~~~~~~

.. include:: /includes/live-import-rolling-restarts.rst


.. _live-import-sharded-cancel:

Canceling Live Migration
~~~~~~~~~~~~~~~~~~~~~~~~

You can cancel the process at any time by clicking :guilabel:`Cancel`.
|service| displays the
:guilabel:`Sharded Cluster Live Import in Progress`
message for the destination {+cluster+} until the {+cluster+} is ready for
normal access.

If you cancel the live migration process before it completes, |service|
doesn't remove any data migrated up to that point. If you restart the
live migration process using the same |service| {+cluster+} as the
destination {+cluster+}, |service| wipes all data from the {+cluster+}.

Testing the Destination {+Cluster+}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider migrating data to your destination {+cluster+}, then stopping the
migration process and testing your destination {+cluster+} while leaving the
source {+cluster+} running and serving data to your applications.

To test your destination {+cluster+} with production data, follow the
:ref:`migration procedure <live-migrate-sharded-procedure>` all the way
to the testing step. When you're ready to perform the complete migration
process, skip the testing step and proceed to the cutover step.

Migrate Your Sharded {+Cluster+}
--------------------------------

.. note:: Staging and Production Migrations

   Consider running a partial live migration procedure first to create
   a staging environment before repeating the procedure to create your
   production environment. The following procedure includes a callout for
   the appropriate time to cancel the procedure and create a staging environment.

   Use the staging environment to test application behavior and
   performance using the latest :driver:`driver version </driver-compatibility-reference>` 
   that supports the MongoDB version of the destination |service| {+cluster+}.
   Then, repeat the live migration procedure in full to transition your
   applications from your source {+cluster+} to the |service| destination
   {+cluster+}.

.. important::

   Avoid making changes to the source {+cluster+} configuration while the
   live migration procedure runs, such as removing replica set members
   or modifying :binary:`mongod <bin.mongod>` runtime settings,
   such as ``featureCompatibilityVersion``.

.. include:: /includes/pre-migration-checklist.rst

.. _live-migrate-sharded-procedure:

Procedure
~~~~~~~~~

.. include:: /includes/steps/atlas-live-import-sharded.rst

Migration Support
-----------------

.. _live-migration-sharded-support:

.. include:: /includes/live-migration-support.rst
