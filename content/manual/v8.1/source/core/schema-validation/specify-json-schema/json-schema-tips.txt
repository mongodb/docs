.. _json-schema-tips:

===============================
Tips for JSON Schema Validation
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This page describes best practices for JSON schema validation to help
avoid common issues.

``_id`` Field and ``additionalProperties: false``
-------------------------------------------------

When you specify ``additionalProperties: false`` in your JSON schema,
MongoDB rejects documents that contain fields not included in your
schema's ``properties`` object.

Because all objects contain an automatically-generated ``_id`` field,
when you set ``additionalProperties: false``, you must include the
``_id`` field in your ``properties`` object. If you don't, all documents
are rejected.

For example, with this validation, no documents are valid:

.. code-block:: javascript

   {
     "$jsonSchema": {
       "required": [ "_id", "storeLocation" ],
       "properties": {
         "storeLocation": { "bsonType": "string" }
       },
       "additionalProperties": false
     }
   }

This validation ensures that ``storeLocation`` is a string. However, the
``properties`` object does not contain an ``_id`` field.

To allow documents in the collection, you must update the ``properties``
object to include an ``_id`` field:

.. code-block:: javascript
   :emphasize-lines: 5

   {
     "$jsonSchema": {
       "required": [ "_id", "storeLocation" ],
       "properties": {
         "_id": { "bsonType": "objectId" },
         "storeLocation": { "bsonType": "string" }
       },
       "additionalProperties": false
     }
   }

Validation for ``null`` Field Values
------------------------------------

Your application may be configured to set missing field values to
``null``, instead of not including those fields in the object sent to
the collection. 

If your schema validates data types for a field, to insert documents
with a ``null`` value for that field, you must explicitly allow ``null``
as a valid BSON type.

For example, this schema validation does not allow documents where
``storeLocation`` is ``null``:

.. code-block:: javascript

   db.createCollection("sales",
      {
         validator:
            {
               "$jsonSchema": {
                  "properties": {
                     "storeLocation": { "bsonType": "string" }
                  }
               }
            }
       }
    )

With the preceding validation, this document is rejected:

.. code-block:: javascript

   db.store.insertOne( { storeLocation: null } )

Alternatively, this schema validation allows ``null`` values for
``storeLocation``:

.. code-block:: javascript

   db.createCollection("store",
      {
         validator:
            {
               "$jsonSchema": {
                  "properties": {
                     "storeLocation": { "bsonType": [ "null", "string" ] }
                  }
               }
            }
       }
    )

With the preceding validation, this document is allowed:

.. code-block:: javascript

   db.store.insertOne( { storeLocation: null } )

.. note:: ``null`` Fields Compared with Missing Fields

   ``null`` field values are not the same as missing fields. If a field
   is missing from a document, MongoDB does not validate that field.


Validation with Encrypted Fields
--------------------------------

.. include:: /includes/queryable-encryption/qe-csfle-schema-validation.rst