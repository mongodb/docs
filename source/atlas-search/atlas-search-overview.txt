.. _what-is-fts:

==============
|fts| Overview
==============

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: advanced search capabilities, search architecture, apache lucene
   :description: Learn how MongoDB Atlas can perform advanced text searches in your application using Atlas Search aggregation pipeline stages, MongoDB aggregation pipeline stages, and score-based results ranking.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

MongoDB's |fts| allows fine-grained text indexing and querying of data 
on your |service| cluster. It enables advanced search functionality for 
your applications without any additional management or separate search 
system alongside your database. |fts| provides options for several 
kinds of :ref:`text analyzers <analyzers-ref>`, a rich :ref:`query 
language <query-syntax-ref>` that uses |fts| aggregation pipeline 
stages like :pipeline:`$search` and :pipeline:`$searchMeta` in 
conjunction with other MongoDB aggregation pipeline stages, and 
score-based results ranking.

.. tip::

   Quickly try |fts| without needing an |service| account, {+cluster+}, or collection, 
   with `the {+playground+} <https://search-playground.mongodb.com/>`__. To learn more, 
   see :ref:`the documentation <fts-playground>`.

|fts| Fundamentals
------------------

The following concepts form the basis of |fts| and are essential to
optimize your application. 

Indexing
~~~~~~~~

In the context of search, an *index* is a data structure that
categorizes data in an easily searchable format. Search indexes enable
faster retrieval of documents that contain a given term without having
to scan the entire collection. While both |fts| indexes and
:manual:`MongoDB Indexes </indexes>` make data retrieval faster, note
that they are not the same. Like the index in the back of a book, a
search index is a mapping between terms and the documents that contain
those terms. Search indexes also contain other relevant metadata, such
as the positions of terms in documents. 

Creating at least one search index is usually required in any search
application. For more information, see :ref:`fts-about-indexing`.

Tokenization
~~~~~~~~~~~~

When creating a search index, data must first be transformed into a
sequence of *tokens* or *terms*. An *analyzer* facilitates this process
through steps including: 

- *Tokenization*: Breaking up words in a string into indexable tokens.
  For example, dividing a sentence by whitespace and punctuation.
- *Normalization*: Organizing data so that it is consistently
  represented and easier to analyze. For example, transforming text to
  lower case or removing unwanted words called *stop words*. 
- *Stemming*: Reducing words to their root form. For example, ignoring
  suffixes, prefixes, and plural word forms. 

The specifics of tokenization are language-specific and can require
making additional choices. Which analyzer to use depends on your data
and application. For more information, see :ref:`analyzers-ref`.

Querying
~~~~~~~~

Search queries consult the index to return a set of results. Search
queries are different than traditional database queries, as they are
intended to meet more general information needs. Where a database query
must follow a strict syntax, search queries can be for simple text
matching, but can also look for similar phrases, number or date ranges,
or use regular expressions or wildcards. 

For more information, see :ref:`fts-about-queries`.

Scoring
~~~~~~~

Each document receives a relevancy score that enables query results to
be returned in order from the highest relevance to the lowest. In the
simplest form of scoring, documents score higher if the query term
appears frequently in a document and lower if the query term appears
across many documents in the collection. Scoring can also be customized.
Tailoring search to a specific domain often means customizing the
relevance-based default score by boosting, decaying, or modifying it in
other ways. 

For more information, see :ref:`Score Documents <scoring-ref>`.

.. _fts-architecture:

|fts| Architecture 
------------------

The |fts| ``mongot`` process, built on `Apache Lucene 
<https://lucene.apache.org/>`__, interfaces with the ``mongod`` database
process to create and manage your full-text and vector search indexes
and queries. 

.. _about-mongot:

About the ``mongot`` Process
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``mongot`` process performs the following tasks: 

1. Creates |fts| indexes based on the rules in the :ref:`index 
   definition <ref-index-definitions>` for the collection.
#. Monitors :manual:`change streams </changeStreams/>` for the current 
   state of the documents and indexes for the collections for which you
   defined |fts| indexes.
#. Processes |fts| queries and returns the document IDs and other search
   metadata for the matching documents to ``mongod``, which then does a
   full document lookup and returns the results to the client.

You can choose a deployment model where the |fts| ``mongot`` process
runs alongside the ``mongod`` process on each node in the |service| 
{+cluster+} or where the ``mongot`` process runs on separate search
nodes. For testing your search queries and prototyping your application,
you can choose the default deployment model where both the ``mongot``
and ``mongod`` processes run on the same node. However, for
production-ready applications, deploy ``mongot`` on separate search
nodes to avoid any resource contention between the ``mongot`` and
``mongod`` processes in your production environment.

For guidance on choosing a deployment type for pre-production and
production environments, see :ref:`Atlas Search Deployment Options 
<fts-deployment-options>` and :ref:`{+avs+} Deployment Options
<avs-deployment-options>`.

.. toctree::
   :titlesonly:

   /atlas-search/about/deployment-options 
   /atlas-search/about/feature-compatibility
