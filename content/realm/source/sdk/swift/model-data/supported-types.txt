.. meta::
   :robots: noindex, nosnippet

.. _swift-supported-types:

===========================
Supported Types - Swift SDK
===========================

.. meta::
   :description: Atlas Device SDK for Swift supports a range of primitive data types, as well as collections and geospatial data.
   :keywords: code example

.. facet::
  :name: genre
  :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

.. _ios-client-collections:

Collection Types
----------------

Realm has several types to represent groups of objects,
which we call **collections**. A collection is an object that contains
zero or more instances of one :ref:`Realm type
<ios-realm-objects>`. Realm collections are **homogenous**:
all objects in a collection are of the same type.

You can filter and sort any collection using Realm's
:ref:`query engine <ios-client-query-engine>`. Collections are
:ref:`live <ios-live-object>`, so they always reflect the current state
of the realm instance on the current thread. You can also
listen for changes in the collection by subscribing to :ref:`collection
notifications <ios-register-a-collection-change-listener>`.

All collection types conform to the :swift-sdk:`RealmCollection
<Protocols/RealmCollection.html>` protocol. This protocol inherits from
:apple:`CollectionType <documentation/swift/collection>`, so you can use
a Realm collection as you would any other standard library
collections.

Using the RealmCollection protocol, you can write generic code that can
operate on any Realm collection:

.. literalinclude:: /examples/generated/code/start/ObjectModels.snippet.generic-collection.swift
   :language: swift

.. _ios-results-collections:

Results and Sectioned Results
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Swift SDK :swift-sdk:`Results <Structs/Results.html>` collection is
a class representing objects retrieved from queries. A
:swift-sdk:`Results <Structs/Results.html>` collection represents the
lazily-evaluated results of a query operation. Results are immutable:
you cannot add or remove elements to or from the results collection.
Results have an associated query that determines their contents.

The Swift SDK also provides :swift-sdk:`SectionedResults <Structs/SectionedResults.html>`,
a type-safe collection which holds ``ResultsSection`` as its elements.
Each :swift-sdk:`ResultSection <Structs/ResultsSection.html>` is a results
collection that contains only objects that belong to a given section key.

For example, an app that includes a contact list might use SectionedResults
to display a list of contacts divided into sections, where each section
contains all the contacts whose first name starts with the given letter.
The ``ResultsSection`` whose key is "L" would contain "Larry", "Liam",
and "Lisa".

.. seealso::

   :ref:`Reads <ios-realm-database-reads>`

Collections as Properties
~~~~~~~~~~~~~~~~~~~~~~~~~

The Swift SDK also offers several collection types you can use as properties
in your data model:

#. :swift-sdk:`List <Classes/List.html>`, a class representing
   :ref:`to-many relationships <ios-to-many-relationship>` in models.
#. :swift-sdk:`LinkingObjects <Structs/LinkingObjects.html>`, a class
   representing :ref:`inverse relationships <ios-inverse-relationship>` in models.
#. :ref:`MutableSet <ios-mutableset-data-type>`, a class representing
   a :ref:`to-many relationship <ios-to-many-relationship>`.
#. :ref:`Map <ios-map>`, a class representing an associative array of key-value
   pairs with unique keys.
#. :swift-sdk:`AnyRealmCollection <Structs/AnyRealmCollection.html>`, a :wikipedia:`type-erased <Type_erasure>` class that can forward calls to a concrete Realm collection like Results, List or LinkingObjects.

.. _ios-live-collections:

Collections are Live
~~~~~~~~~~~~~~~~~~~~

Like :ref:`live objects <ios-live-object>`, Realm collections
are usually **live**:

- Live results collections always reflect the current results of the associated query.
- Live lists always reflect the current state of the relationship on the realm instance.

There are two cases when a collection is **not** live:

- The collection is unmanaged. For example, a List property of
  a Realm object that has not been added to a realm yet
  or that has been copied from a realm is not live.
- The collection is :ref:`frozen <ios-frozen-objects>`.

Combined with :ref:`collection notifications
<ios-register-a-collection-change-listener>`, live collections enable
clean, reactive code. For example, suppose your view displays the
results of a query. You can keep a reference to the results collection
in your view class, then read the results collection as needed without
having to refresh it or validate that it is up-to-date.

.. important:: Results indexes may change

   Since results update themselves automatically, do not
   store the positional index of an object in the collection
   or the count of objects in a collection. The stored index
   or count value could be outdated by the time you use
   it.

.. _ios-supported-property-types:
.. _swift-supported-property-types:

Supported Property Types
------------------------

You can use the following types to define your object model
properties.

.. include:: /includes/map-to-bson-type.rst

See also :ref:`<swift-model-data-device-sync>`.

Property Cheat Sheet
~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Swift
      :tabid: swift

      .. versionchanged:: 10.10.0
         ``@Persisted`` property declaration syntax

      .. list-table::
         :header-rows: 1
         :stub-columns: 1
         :widths: 20 40 40

         * - Type
           - Required
           - Optional
         * - Bool
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.bool-required.swift
                :language: swift
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.bool-opt.swift
                :language: swift
                :copyable: false
         * - Int, Int8, Int16, Int32, Int64
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.int-required.swift
                :language: swift
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.int-opt.swift
                :language: swift
                :copyable: false
         * - Float
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.float-required.swift
                :language: swift
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.float-opt.swift
                :language: swift
                :copyable: false
         * - Double
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.double-required.swift
                :language: swift
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.double-opt.swift
                :language: swift
                :copyable: false
         * - String
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.string-required.swift
                :language: swift
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.string-opt.swift
                :language: swift
                :copyable: false
         * - Data
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.data-required.swift
                :language: swift
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.data-opt.swift
                :language: swift
                :copyable: false
         * - Date
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.date-required.swift
                :language: swift
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.date-opt.swift
                :language: swift
                :copyable: false
         * - Decimal128
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.decimal128-required.swift
                :language: swift
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.decimal128-opt.swift
                :language: swift
                :copyable: false
         * - :swift-sdk:`UUID <Extensions.html#/s:10Foundation4UUIDV>`
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.uuid-required.swift
                :language: swift
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.uuid-opt.swift
                :language: swift
                :copyable: false
         * - :swift-sdk:`ObjectId <Classes/ObjectId.html>`
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.objectId-required.swift
                :language: swift
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.objectId-opt.swift
                :language: swift
                :copyable: false
         * - :swift-sdk:`List <Classes/List.html>`
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.list-required.swift
                :language: swift
                :copyable: false
           - N/A
         * - :ref:`MutableSet <ios-mutableset-data-type>`
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.mutableSet-required.swift
                :language: swift
                :copyable: false
           - N/A
         * - :ref:`Map <ios-map>`
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.map-required.swift
                :language: swift
                :copyable: false
           - N/A
         * - :ref:`AnyRealmValue <ios-anyrealmvalue-data-type>`
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.anyRealmValue-required.swift
                :language: swift
                :copyable: false
           - N/A
         * - User-defined :swift-sdk:`Object <Extensions/Object.html>`
           - N/A
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.custom-object-opt.swift
                :language: swift
                :copyable: false
         * - User-defined :swift-sdk:`EmbeddedObject <Extensions/EmbeddedObject.html>`
           - N/A
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.embedded-object-opt.swift
                :language: swift
                :copyable: false
         * - User-defined :swift-sdk:`Enums <Protocols.html#/s:10RealmSwift15PersistableEnumP>`
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.enum-required.swift
                :language: swift
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.enum-opt.swift
                :language: swift
                :copyable: false

      ``CGFloat`` properties are discouraged, as the type is not
      platform independent.

      To use Key-Value Coding with a user-defined object in the ``@Persisted``
      syntax, add the ``@objc`` attribute: ``@Persisted @objc var myObject: MyClass?``

      Setting Default Values
      ``````````````````````

      With the ``@Persisted`` property declaration syntax, you may see a
      performance impact when setting default values for:

      - ``List``
      - ``MutableSet``
      - ``Dictionary``
      - ``Decimal128``
      - ``UUID``
      - ``ObjectId``

      ``@Persisted var listProperty: List<Int>`` and ``@Persisted var
      listProperty = List<Int>()`` are both valid, and are functionally
      equivalent. However, the second declaration will result in poorer
      performance.

      This is because the List is created when the parent object is
      created, rather than lazily as needed. For most types, this is
      a difference so small you can't measure it. For the types listed
      here, you may see a performance impact when using the second
      declaration style.

   .. tab:: Objective-C
      :tabid: objective-c

      .. list-table::
         :header-rows: 1
         :stub-columns: 1
         :widths: 20 40 40

         * - Type
           - Required
           - Optional
         * - Boolean
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.bool-required.m
                :language: objectivec
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.bool-opt.m
                :language: objectivec
                :copyable: false
         * - Integer
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.int-required.m
                :language: objectivec
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.int-opt.m
                :language: objectivec
                :copyable: false
         * - Float
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.float-required.m
                :language: objectivec
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.float-opt.m
                :language: objectivec
                :copyable: false
         * - Double
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.double-required.m
                :language: objectivec
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.double-opt.m
                :language: objectivec
                :copyable: false
         * - String
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.string-required.m
                :language: objectivec
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.string-opt.m
                :language: objectivec
                :copyable: false
         * - Data
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.data-required.m
                :language: objectivec
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.data-opt.m
                :language: objectivec
                :copyable: false
         * - Date
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.date-required.m
                :language: objectivec
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.date-opt.m
                :language: objectivec
                :copyable: false
         * - Decimal128
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.decimal128-required.m
                :language: objectivec
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.decimal128-opt.m
                :language: objectivec
                :copyable: false
         * - NSUUID
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.uuid-required.m
                :language: objectivec
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.uuid-opt.m
                :language: objectivec
                :copyable: false
         * - :objc-sdk:`RLMObjectId <Classes/RLMObjectId.html>`
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.objectId-required.m
                :language: objectivec
                :copyable: false
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.objectId-opt.m
                :language: objectivec
                :copyable: false
         * - :objc-sdk:`RLMArray <Classes/RLMArray.html>`
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.list-required.m
                :language: objectivec
                :copyable: false
           - N/A
         * - :objc-sdk:`RLMSet <Classes/RLMSet.html>`
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.set-required.m
                :language: objectivec
                :copyable: false
           - N/A
         * - :objc-sdk:`RLMDictionary <Classes/RLMDictionary.html>`
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.dictionary-required.m
                :language: objectivec
                :copyable: false
           - N/A
         * - User-defined :objc-sdk:`RLMObject<Classes/RLMObject.html>`
           - N/A
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.custom-object-opt.m
                :language: objectivec
                :copyable: false
         * - User-defined :objc-sdk:`RLMEmbeddedObject<Classes/RLMEmbeddedObject.html>`
           - N/A
           - .. literalinclude:: /examples/generated/code/start/SupportedTypes.snippet.embedded-object-opt.m
                :language: objectivec
                :copyable: false

      Additionally:

      - Integral types ``int``, ``NSInteger``, ``long``, ``long long``

      ``CGFloat`` properties are discouraged, as the type is not
      platform independent.

   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      .. versionchanged:: 10.8.0
         ``RealmProperty`` replaces ``RealmOptional``

      .. list-table::
         :header-rows: 1
         :stub-columns: 1
         :widths: 20 40 40

         * - Type
           - Required
           - Optional
         * - Bool
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var value = false
           - .. code-block:: swift
                :copyable: false

                let value = RealmProperty<Bool?>()
         * - Int, Int8, Int16, Int32, Int64
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var value = 0
           - .. code-block:: swift
                :copyable: false

                let value = RealmProperty<Int?>()
         * - Float
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var value: Float = 0.0
           - .. code-block:: swift
                :copyable: false

                let value = RealmProperty<Float?>()
         * - Double
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var value: Double = 0.0
           - .. code-block:: swift
                :copyable: false

                let value = RealmProperty<Double?>()
         * - String
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var value = ""
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var value: String? = nil
         * - Data
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var value = Data()
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var value: Data? = nil
         * - Date
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var value = Date()
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var value: Date? = nil
         * - Decimal128
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var decimal: Decimal128 = 0
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var decimal: Decimal128?
         * - :swift-sdk:`UUID <Extensions.html#/s:10Foundation4UUIDV>`
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var uuid = UUID()
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var uuidOpt: UUID?
         * - :swift-sdk:`ObjectId <Classes/ObjectId.html>`
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var objectId = ObjectId.generate()
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var objectId: ObjectId?
         * - :swift-sdk:`List <Classes/List.html>`
           - .. code-block:: swift
                :copyable: false

                let value = List<Type>()
           -
         * - :ref:`MutableSet <ios-mutableset-data-type>`
           - .. code-block:: swift
                :copyable: false

                let value = MutableSet<Type>()
           -
         * - :ref:`Map <ios-map>`
           - .. code-block:: swift
                :copyable: false

                let value = Map<String, String>()
           -
         * - :ref:`AnyRealmValue <ios-anyrealmvalue-data-type>`
           - .. code-block:: swift
                :copyable: false

                let value = RealmProperty<AnyRealmValue>()
           - N/A
         * - User-defined :swift-sdk:`Object <Extensions/Object.html>`
           - N/A
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var value: MyClass?

      Additionally:

      - :swift-sdk:`EmbeddedObject <Extensions/EmbeddedObject.html>`-derived types
      - :swift-sdk:`Enum <Protocols.html#/s:10RealmSwift0A4EnumP>`

      You can use ``RealmProperty <T?>`` to
      represent integers, doubles, and other types as optional.

      ``CGFloat`` properties are discouraged, as the type is not
      platform independent.

Unique Identifiers
~~~~~~~~~~~~~~~~~~

.. versionadded:: 10.8.0
   ``UUID`` type

``ObjectId`` is a MongoDB-specific 12-byte unique value. ``UUID`` is a
16-byte globally-unique value. You can :ref:`index <ios-index-a-property>`
both types, and use either as a :ref:`primary key <ios-specify-a-primary-key>`.

.. note::

   When declaring default values for ``@Persisted`` UUID or ObjectId property
   attributes, both of these syntax types are valid:

   - ``@Persisted var value: UUID``
   - ``@Persisted var value = UUID()``

   However, the second will result in poorer performance. This is because the
   latter creates a new identifier that is never used any time an object is
   read from the realm, while the former only creates them when needed.

   ``@Persisted var id: ObjectId`` has equivalent behavior to ``@objc dynamic
   var _id = ObjectId.generate()``. They both make random ObjectIds.

   ``@Persisted var _id = ObjectId()`` has equivalent behavior to ``@objc
   dynamic var _id = ObjectId()``. They both make zero-initialized ObjectIds.

.. _ios-size-limitations:

Size Limitations
~~~~~~~~~~~~~~~~

Data and string properties cannot hold more than 16MB. To store
larger amounts of data, either:

- Break the data into 16MB chunks, or
- Store data directly on the file system and store paths to the files in the realm.

Realm throws a runtime exception if your app attempts to
store more than 16MB in a single property.

To avoid size limitations and a performance impact, it is best not to
store large blobs, such as image and video files, directly in a
realm. Instead, save the file to a file store and keep only the
location of the file and any relevant metadata in the realm.

AnyRealmCollection
~~~~~~~~~~~~~~~~~~

To store a collection as a property or variable without needing to know
the concrete collection type, Swift's type system requires a type-erased
wrapper like :swift-sdk:`AnyRealmCollection
<Structs/AnyRealmCollection.html>`:

.. literalinclude:: /examples/generated/code/start/ObjectModels.snippet.any-realm-collection.swift
   :language: swift

.. _ios-mutableset-data-type:

Mutable Set
~~~~~~~~~~~

.. versionadded:: 10.8.0

A :swift-sdk:`MutableSet <Classes/MutableSet.html>`
collection represents a :ref:`to-many relationship <ios-to-many-relationship>`
containing distinct values. A ``MutableSet`` supports the following types
(and their optional versions):

- Bool
- Data
- Date
- Decimal128
- Double
- Float
- Int
- Int8
- Int16
- Int32
- Int64
- Object
- ObjectId
- String
- UUID

Like Swift's :apple:`Set <documentation/swift/set>`, ``MutableSet`` is a
generic type that is parameterized on the type it stores. Unlike
:apple:`native Swift collections <documentation/swift/swift_standard_library/collections>`,
Realm mutable sets are reference types, as opposed to value
types (structs).

You can only call the ``MutableSets`` mutation methods during a write
transaction. As a result, ``MutableSets`` are immutable if you open the
managing realm as a read-only realm.

You can filter and sort a ``MutableSet`` with the :ref:`same predicates
<ios-filter-data>` as :ref:`Results <ios-results-collections>`. Like other
Realm collections, you can :ref:`register a change listener
<ios-register-a-collection-change-listener>` on a ``MutableSet``.

For example, a ``Dog`` class model might contain a ``MutableSet`` for
``citiesVisited``:

.. code-block:: swift
   :copyable: false

   class Dog: Object {
       @Persisted var name = ""
       @Persisted var currentCity = ""
       @Persisted var citiesVisited: MutableSet<String>
   }

.. note::

   When declaring default values for ``@Persisted`` MutableSet property attributes,
   both of these syntax types is valid:

   - ``@Persisted var value: MutableSet<String>``
   - ``@Persisted var value = MutableSet<String>()``

   However, the second will result in significantly worse performance. This is
   because the MutableSet is created when the parent object is created, rather than
   lazily as needed.

.. _ios-map:

Map/Dictionary
~~~~~~~~~~~~~~

.. versionadded:: 10.8.0

The :swift-sdk:`Map <Classes/Map.html>` is an associative array that
contains key-value pairs with unique keys.

Like Swift's :apple:`Dictionary <documentation/swift/dictionary>`,
``Map`` is a generic type that is parameterized on its key and value
types. Unlike :apple:`native Swift collections
<documentation/swift/swift_standard_library/collections>`,
Realm Maps are reference types (classes), as opposed to
value types (structs).

You can declare a Map as a property of an object:

.. code-block:: swift
   :copyable: false

   class Dog: Object {
       @Persisted var name = ""
       @Persisted var currentCity = ""

       // Map of city name -> favorite park in that city
       @Persisted var favoriteParksByCity: Map<String, String>
   }

.. include:: /includes/map-key-string-limitations.rst

.. literalinclude:: /examples/generated/code/start/CreateRealmObjects.snippet.percent-encode-disallowed-map-keys.swift

.. note::

   When declaring default values for ``@Persisted`` Map property attributes, both
   of these syntax types is valid:

   - ``@Persisted var value: Map<String, String>``
   - ``@Persisted var value = Map<String, String>()``

   However, the second will result in significantly worse performance. This is
   because the Map is created when the parent object is created, rather than
   lazily as needed.

.. _ios-mixed-data-type:
.. _ios-anyrealmvalue-data-type:

AnyRealmValue
~~~~~~~~~~~~~

.. versionchanged:: 10.51.0

   ``AnyRealmValue`` properties can hold lists or maps of mixed data.

.. versionadded:: 10.8.0

``AnyRealmValue`` is a Realm property type that can hold different
data types. Supported ``AnyRealmValue`` data types include:

- Int
- Float
- Double
- Decimal128
- ObjectID
- UUID
- Bool
- Date
- Data
- String
- List
- Map
- Object

``AnyRealmValue`` *cannot* hold a ``MutableSet`` or embedded object.

This :swift-sdk:`mixed data type <Enums/AnyRealmValue.html>`
is :ref:`indexable <ios-index-a-property>`, but you can't use it as a
:ref:`primary key <ios-specify-a-primary-key>`. Because ``null`` is a
permitted value, you can't declare an ``AnyRealmValue`` as optional.

.. code-block:: swift
   :copyable: false

   class Dog: Object {
       @Persisted var name = ""
       @Persisted var currentCity = ""

       @Persisted var companion: AnyRealmValue
   }

.. _ios-nested-collections-realmanyvalue:

Collections as Mixed
````````````````````

In version 10.51.0 and later, a ``AnyRealmValue`` data type can
contain collections (a list or map, but *not* a set) of ``AnyRealmValue``
elements. You can use mixed collections to
model unstructured or variable data. For more information, refer to
:ref:`<ios-model-unstructured-data>`.

- You can nest mixed collections up to 100 levels.
- You can query mixed collection properties and
  :ref:`register a listener for changes <ios-react-to-changes>`,
  as you would a normal collection.
- You can find and update individual mixed collection elements
- You *cannot* store sets or embedded objects in mixed collections.

To use mixed collections in your app, define the ``AnyRealmValue`` type
property in your data model.
Then, you can create the list or map collections like any other mixed data value.

.. _swift-geospatial-data-type:

Geospatial Data
~~~~~~~~~~~~~~~

.. versionadded:: 10.47.0

Geospatial data, or "geodata", specifies points and geometric objects on
the Earth's surface.

If you want to persist geospatial data, it must conform to the
`GeoJSON spec <https://datatracker.ietf.org/doc/html/rfc7946>`__.

To persist geospatial data with the Swift SDK, create a GeoJSON-compatible
embedded class that you can use in your data model.

Your custom embedded object must contain the two fields required by the
GeoJSON spec:

- A field of type ``String`` property that maps to a ``type`` property with
  the value of ``"Point"``: ``@Persisted var type: String = "Point"``

- A field of type ``List<Double>`` that maps to a ``coordinates``
  property containing a latitude/longitude pair:
  ``@Persisted private var coordinates: List<Double>``

.. literalinclude:: /examples/generated/code/start/Geospatial.snippet.custom-geopoint.swift
   :language: swift
   :emphasize-lines: 2-3

.. _ios-type-projection:

Map Unsupported Types to Supported Types
----------------------------------------

.. versionadded:: 10.20.0

You can use Type Projection to persist unsupported types as supported types
in Realm. This enables you to work with Swift types that Realm
does not support, but store them as types that Realm does support. You could
store a URL as a ``String``, for example, but read it from
Realm and use it in your application as though it were a URL.

Declare Type Projections
~~~~~~~~~~~~~~~~~~~~~~~~

To use type projection with Realm:

1. Use one of Realm's custom type protocols to map an unsupported data type
   to a type that Realm supports
#. Use the projected types as @Persisted properties in the Realm object
   model

.. _ios-conform-to-type-projection-protocol:

Conform to the Type Projection Protocol
```````````````````````````````````````

You can map an unsupported data type to a :ref:`type that Realm supports
<ios-supported-property-types>` using one of the Realm type projection protocols.

The Swift SDK provides two type projection protocols:

- CustomPersistable
- FailableCustomPersistable

Use :swift-sdk:`CustomPersistable <Protocols/CustomPersistable.html>`
when there is no chance the conversion can fail.

Use :swift-sdk:`FailableCustomPersistable <Protocols/FailableCustomPersistable.html>`
when it is possible for the conversion to fail.

.. literalinclude:: /examples/generated/code/start/TypeProjection.snippet.custom-persistable-protocols.swift
   :language: swift

.. seealso::

   These are protocols modeled after Swift's built-in :apple:`RawRepresentable
   <documentation/swift/rawrepresentable>`.

.. _ios-persisted-types:

Supported PersistedTypes
++++++++++++++++++++++++

The ``PersistedType`` can use any of the primitive types that the
:ref:`Swift SDK supports <ios-supported-property-types>`. It can also be
an :ref:`Embedded Object <ios-embedded-objects>`.

``PersistedType`` cannot be an optional or a :ref:`collection
<ios-client-collections>`. However you can use the mapped type as an
optional or collection property in your object model.

.. code-block:: swift
   :copyable: false

   extension URL: FailableCustomPersistable {
      // The `PersistedType` cannot be an optional, so this is not a valid
      // conformance to the FailableCustomPersistable protocol.
      public typealias PersistedType = String?
      ...
   }

   class Club: Object {
      @Persisted var id: ObjectId
      @Persisted var name: String
      // Although the `PersistedType` cannot be optional, you can use the
      // custom-mapped type as an optional in your object model.
      @Persisted var url: URL?
   }

.. _ios-use-type-projection-in-the-model:

Use Type Projection in the Model
````````````````````````````````

A type that conforms to one of the type projection protocols can be used with
the ``@Persisted`` property declaration syntax introduced in Swift SDK
version 10.10.0. It does not work with the ``@objc dynamic`` syntax.

You can use projected types for:

- Top-level types
- Optional versions of the type
- The types for a collection

When using a ``FailableCustomPersistable`` as a property, define it as an
optional property. When it is optional, the ``FailableCustomPersistable``
protocol maps invalid values to ``nil``. When it is a required property, it is
force-unwrapped. If you have a value that can't be converted to the projected
type, reading that property throws an unwrapped fail exception.

.. literalinclude:: /examples/generated/code/start/TypeProjection.snippet.use-type-projection-in-objects.swift
   :language: swift

When your model contains projected types, you can :ref:`create the object
<ios-create-a-new-object>` with values using the persisted type, or
by assigning to the field properties of an initialized object using the
projected types.

.. literalinclude:: /examples/generated/code/start/TypeProjection.snippet.create-objects-with-type-projection.swift
   :language: swift

Type Projection in the Schema
+++++++++++++++++++++++++++++

When you declare your type as conforming to a type projection protocol, you
specify the type that should be persisted in realm. For example, if
you map a custom type ``URL`` to a persisted type of ``String``, a ``URL``
property appears as a ``String`` in the schema, and dynamic access to the
property acts on strings.

The schema does not directly represent mapped types. Changing a property
from its persisted type to its mapped type, or vice versa, does not require
a migration.

.. figure:: /images/projected-types-persisted-types-in-schema.png
   :alt: Realm Studio screenshot showing the field types using persisted types.
