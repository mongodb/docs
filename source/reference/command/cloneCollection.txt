===============
cloneCollection
===============

.. default-domain:: mongodb

.. dbcommand:: cloneCollection

   The :dbcommand:`cloneCollection` command copies a collection from a
   remote server to the server where you run the command.

   :param from: Specify a resolvable hostname, and optional port number
                of the remote server where the specified collection resides.

   :param query: Optional. A query document, in the form of a
		 :term:`document`, that filters the documents
		 in the remote collection that
		 :dbcommand:`cloneCollection` will copy to the
                 current database. See :method:`db.collection.find()`.

   :param Boolean copyIndexes: Optional. ``true`` by default. When set
                               to ``false`` the indexes on the
                               originating server are *not* copied with
                               the documents in the collection.

   Consider the following example:

   .. code-block:: javascript

      { cloneCollection: "users", from: "db.example.net:27017", query: { active: true }, copyIndexes: false }

   This operation copies the "users" collection from the current
   database on the server at ``db.example.net``. The operation only
   copies documents that satisfy the query ``{ active: true }`` and
   does not copy indexes. :dbcommand:`cloneCollection` copies indexes
   by default, but you can disable this behavior by setting ``{
   copyIndexes: false }``. The ``query`` and ``copyIndexes``
   arguments are optional.

   :dbcommand:`cloneCollection` creates a collection on the current
   database with the same name as the origin collection. If, in the
   above example, the ``users`` collection already exists, then
   MongoDB appends documents in the remote collection to the
   destination collection.
