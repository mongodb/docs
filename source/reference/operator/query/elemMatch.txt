==================
$elemMatch (query)
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. seealso::

   :doc:`/reference/operator/projection/elemMatch`

Definition
----------

.. query:: $elemMatch

   The :query:`$elemMatch` operator matches documents that
   contain an array field with at least one element that matches all the
   specified query criteria.

   .. code-block:: javascript

      { <field>: { $elemMatch: { <query1>, <query2>, ... } } }

   If you specify only a single ``<query>`` condition in the
   :query:`$elemMatch` expression, and are not using the :query:`$not`
   or :query:`$ne` operators inside of :query:`$elemMatch`,
   :query:`$elemMatch` can be omitted. See
   :ref:`elemmatch-single-query-condition`.

Behavior
--------

- You cannot specify a :query:`$where` expression in an
  :query:`$elemMatch`.

- You cannot specify a :query:`$text` query expression in an
  :query:`$elemMatch`.

Examples
--------

Element Match
~~~~~~~~~~~~~

Given the following documents in the ``scores`` collection:

.. code-block:: javascript

   { _id: 1, results: [ 82, 85, 88 ] }
   { _id: 2, results: [ 75, 88, 89 ] }

The following query matches only those documents where the ``results``
array contains at least one element that is both greater than or equal
to ``80`` and is less than ``85``:

.. code-block:: javascript

   db.scores.find(
      { results: { $elemMatch: { $gte: 80, $lt: 85 } } }
   )

The query returns the following document since the element ``82`` is
both greater than or equal to ``80`` and is less than ``85``:

.. code-block:: javascript

   { "_id" : 1, "results" : [ 82, 85, 88 ] }

For more information on specifying multiple criteria on array
elements, see :ref:`specify-multiple-criteria-for-array-elements`.

Array of Embedded Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~

This statement inserts documents into the ``survey`` collection:

.. code-block:: javascript

   db.survey.insertMany( [
      { "_id": 1, "results": [ { "product": "abc", "score": 10 },
                               { "product": "xyz", "score": 5 } ] },
      { "_id": 2, "results": [ { "product": "abc", "score": 8 },
                               { "product": "xyz", "score": 7 } ] },
      { "_id": 3, "results": [ { "product": "abc", "score": 7 },
                               { "product": "xyz", "score": 8 } ] },
      { "_id": 4, "results": [ { "product": "abc", "score": 7 },
                               { "product": "def", "score": 8 } ] }
   ] )

The following query matches only those documents where the ``results``
array contains at least one element with both ``product`` equal to
``"xyz"`` and ``score`` greater than or equal to ``8``:

.. code-block:: javascript

   db.survey.find(
      { results: { $elemMatch: { product: "xyz", score: { $gte: 8 } } } }
   )

Specifically, the query matches the following document:

.. code-block:: javascript
   :copyable: false

   { "_id" : 3, "results" : [ { "product" : "abc", "score" : 7 },
                              { "product" : "xyz", "score" : 8 } ] }

.. _elemmatch-single-query-condition:

Single Query Condition
~~~~~~~~~~~~~~~~~~~~~~

If you specify a single query predicate in the :query:`$elemMatch`
expression, and are not using the :query:`$not` or :query:`$ne`
operators inside of :query:`$elemMatch`, :query:`$elemMatch` can be
omitted.

The following examples return the same documents.

With :query:`$elemMatch`:

.. code-block:: javascript

   db.survey.find(
      { results: { $elemMatch: { product: "xyz" } } }
   )

Without :query:`$elemMatch`:

.. code-block:: javascript

   db.survey.find(
      { "results.product": "xyz" }
   )

However, if your :query:`$elemMatch` expression contains the
:query:`$not` or :query:`$ne` operators then omitting the
:query:`$elemMatch` expression changes the documents returned.

The following examples return different documents.

With :query:`$elemMatch`:

.. code-block:: javascript

   db.survey.find(
      { "results": { $elemMatch: { product: { $ne: "xyz" } } } }
   )

Without :query:`$elemMatch`:

.. code-block:: javascript

   db.survey.find(
      { "results.product": { $ne: "xyz" } }
   )

With :query:`$elemMatch`, the first query returns these documents:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "results" : [ { "product" : "abc", "score" : 10 },
                              { "product" : "xyz", "score" : 5 } ] }
   { "_id" : 2, "results" : [ { "product" : "abc", "score" : 8 },
                              { "product" : "xyz", "score" : 7 } ] }
   { "_id" : 3, "results" : [ { "product" : "abc", "score" : 7 },
                              { "product" : "xyz", "score" : 8 } ] }
   { "_id" : 4, "results" : [ { "product" : "abc", "score" : 7 },
                              { "product" : "def", "score" : 8 } ] }

Without :query:`$elemMatch`, the second query returns this
document:

.. code-block:: javascript
   :copyable: false

   { "_id" : 4, "results" : [ { "product" : "abc", "score" : 7 },
                              { "product" : "def", "score" : 8 } ] }

The first query returns the documents where any product in the
``results`` array is not ``"xyz"``. The second query returns the
documents where all of the products in the ``results`` array are not
``"xyz"``.

Additional Examples
-------------------

.. include:: /includes/extracts/additional-examples-arrays.rst

.. seealso::

   :method:`db.collection.find()`

