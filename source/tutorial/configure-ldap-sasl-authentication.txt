================================
Authenticate Using SASL and LDAP
================================

.. default-domain:: mongodb

MongoDB Enterprise provides support for proxy authentication of users.
This allows administrators to configure a MongoDB cluster to
authenticate users via Linux PAM or by proxying authentication requests
to a specified Lightweight Directory Access Protocol (LDAP) service.

.. include:: /includes/admonition-mongodb-enterprise-windows-ldap.rst

.. warning::

   Because the transmission of the user password to the MongoDB server
   uses ``SASL PLAIN`` mechanism, you should, in general, use only on a
   trusted channel (VPN, SSL, trusted wired network).

Configure ``saslauthd`` 
-----------------------

LDAP support for user authentication requires proper configuration of
the ``saslauthd`` daemon process as well as the MongoDB server.

On systems that configure ``saslauthd`` with a
``/etc/sysconfig/saslauthd`` file, such as Red Hat Enterprise Linux,
Fedora, CentOS, Amazon Linux AMI, set the mechanism ``MECH`` to
``ldap``:

.. code-block:: none

   MECH=ldap

On systems that configure ``saslauthd`` with a
``/etc/default/saslauthd`` file, set the ``MECHANISMS`` option to
``ldap``:

.. code-block:: none

   MECHANISMS="ldap"

To use with *ActiveDirectory*, start ``saslauthd`` with the following
configuration options:

.. code-block:: none

   ldap_servers: <ldap uri, e.g. ldaps://ad.example.net>
   ldap_use_sasl: yes
   ldap_mech: DIGEST-MD5
   ldap_auth_method: fastbind

To connect to an OpenLDAP server, update the ``saslauthd.conf`` file
with the following configuration options:

.. code-block:: none

   ldap_servers: <ldap uri, e.g. ldaps://ad.example.net>
   ldap_search_base: <search base, e.g. ou=Users,dc=example,dc=com>
   ldap_filter: <filter, e.g. (uid=%u)>

The ``ldap_servers`` specifies the uri of the LDAP server used for
authentication. The ``ldap_search_base`` specifies distinguished name to
which the search is relative. The search includes the base or objects
below. The ``ldap_filter`` specifies the search filter.

For example, a sample ``saslauthd.conf`` file may have the following
content:

.. code-block:: none

   ldap_servers: ldaps://ad.example.net
   ldap_search_base: ou=Users,dc=example,dc=com
   ldap_filter: (uid=%u)

The values for these configuration options should correspond to the
values specific for your test. For example, to filter on email, specify
``ldap_filter: (mail=%n)`` instead.

.. tip:: For OpenLDAP installed on the local machine, you can specify for
   ``ldap_servers`` the value ``ldap://localhost:389``.

To use this sample OpenLDAP configuration, create users with a ``uid``
attribute (login name) and place under the ``Users`` organizational
unit (``ou``) under the domain components (``dc``) ``example`` and
``com``.

Test ``saslauthd`` Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To test the ``saslauthd`` configuration, use ``testsaslauthd`` utility,
as in the following example:

.. code-block:: sh

   testsaslauthd -u testuser -p testpassword -f /var/run/saslauthd/mux

For more information on ``saslauthd`` configuration, see
`<http://www.openldap.org/doc/admin24/guide.html#Configuring saslauthd>`_.

Configure MongoDB Server
------------------------

To configure the MongoDB server to use the ``saslauthd`` instance for
proxy authentication, enable :option:`--auth` and set the
:parameter:`saslauthdPath` parameter to the path to the Unix-domain
Socket of the ``saslauthd`` instance and the
:parameter:`authenticationMechanisms` parameter to ``PLAIN``.

Configure the MongoDB server using either the command line option
:doc:`--setParameter </reference/parameters>` or the :doc:`configuration
file </reference/configuration-options>`:

- If ``saslauthd`` has a socket path of ``/<some>/<path>/saslauthd``,
  set the :parameter:`saslauthdPath` parameter to
  ``/<some>/<path>/saslauthd/mux`` and the
  :parameter:`authenticationMechanisms` parameter to ``PLAIN``, as in
  the following command line example:

  .. code-block:: sh

     mongod --auth --setParameter saslauthdPath=/<some>/<path>/saslauthd/mux --setParameter authenticationMechanisms=PLAIN

  Or if using a :doc:`configuration file
  </reference/configuration-options>`, add the parameters:

  .. code-block:: sh

     auth=true
     setParameter=saslauthdPath=/<some>/<path>/saslauthd/mux
     setParameter=authenticationMechanisms=PLAIN

- To use the default Unix-domain socket path, set the
  :parameter:`saslauthdPath` to the empty string ``""``
  and the :parameter:`authenticationMechanisms` parameter to ``PLAIN``,
  as in the following command line example:

  .. code-block:: sh

     mongod  --auth --setParameter saslauthdPath="" --setParameter authenticationMechanisms=PLAIN

  Or if using a :doc:`configuration file
  </reference/configuration-options>`, add the parameters:

  .. code-block:: sh

     setParameter=saslauthdPath=""
     setParameter=authenticationMechanisms=PLAIN
     auth=true

Authenticate in the ``mongo`` Shell
-----------------------------------

To perform the authentication in the :program:`mongo` shell, use the
:method:`db.auth()` method in the ``$external`` database. 

Specify the value ``"PLAIN"`` in the ``mechanism`` field, the user and
password in the ``user`` and ``pwd`` fields respectively, and the value
``false`` in the ``digestPassword`` field. You **must** specify
``false`` for ``digestPassword`` since the server must receive an
undigested password to forward on to ``saslauthd``, as in the following
example:

.. code-block:: javascript
   :emphasize-lines: 7

   db.getSiblingDB("$external").auth(
                                      {
                                        mechanism: "PLAIN",
                                        user: "application/reporting@EXAMPLE.NET",
                                        pwd: "some1nterestingPwd",
                                        digestPassword: false
                                      }
                                     )
