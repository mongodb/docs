=====================
Using Geospatial Data
=====================

.. default-domain:: mongodb

MongoDB provides functionality to store and query geospatial data with
specialized operators. This document introduces geospatial data
modeling, indexing operations, and provides example queries using the
:ref:`geospatial query operators <geospatial-query-operators>`. For
more information about geospatial indexes and operations see the
:doc:`/core/geospatial-indexes` document.

.. _geospatial-coordinates:

.. This include inserts an introduction to geospatial modeling.
   "Representing Coordinate Data"
.. include:: /includes/geospatial-coordinates.rst

.. index:: geospatial queries
.. _geospatial-queries:
.. _geospatial-querying:

Queries
-------

There are two operators to query geospatial data in MongoDB,
the general :method:`find() <db.collection.find()>` method and the
specialized :dbcommand:`geoNear` command.

You may query geospatial data using the :method:`find()
<db.collection.find()>`, this is the same as querying other types of
data in MongoDB. Another way is to use the :dbcommand:`geoNear`
command, this is the same as running database commands.

The :dbcommand:`geoNear` command is more specialized as it returns
detailed geospatial information for each result such as distance and
overall query performance. This provides additional benefits when only
working with geospatial data.

.. TODO does it make sense to have this here??

.. note::

   By default, MongoDB calculates distances using flat geometry.

   MongoDB can also calculate distances based on :ref:`spherical
   geometry <geospatial-spherical-representation>` by using
   :ref:`spherical query operators <geospatial-spherical-queries>`.

.. index:: geospatial queries; exact

.. _geospatial-query-exact:

Exact
~~~~~

You can use the :method:`find() <db.collection.find()>` method to query
for an exact match on a location. These queries have the prototypical
form:

.. code-block:: javascript

   db.collection.find( { <location field>: [ x, y ] } )

This query will return any documents with the value of ``[ x, y ]``.

Exact geospatial queries have applicability for a limited selection of
cases, the :ref:`proximity <geospatial-query-proximity>` method and :ref:`bounded
<geospatial-query-bounded>` method provide more useful results.

.. index:: geospatial queries; proximity
.. _geospatial-query-near:
.. _geospatial-query-proximity:

Proximity
~~~~~~~~~

To find all documents that are within a proximity of a point, use the
:operator:`$near` operator with the :method:`find()
<db.collection.find()>` method. By default, the :operator:`$near` will
return 100 points sorted by distance.

The prototype form for the :operator:`$near` operator is:

.. code-block:: javascript

   db.collection.find( { <location field>: { $near: [ x, y ] } } )

For example, 

.. code-block:: javascript

   db.places.find( { loc: {$near: [-70,40] } })

and the output is:

.. code-block:: javascript

   { "_id" : ObjectId(" ... "), "loc" : [ -73, 40 ] }

The :dbcommand:`geoNear` command provides the equivalent functionality
to the :operator:`$near` operator but does not sort the results,
returns more information for each document found, and provides
additional operators.

In its most simple form, the :dbcommand:`geoNear` command has the
following prototypical form:

.. code-block:: javascript

   db.runCommand( {geoNear: "[collection]", near: [ x, y ] } )

The following command returns the same results as the :operator:`near`
in the previous example:

.. code-block:: javascript

   db.runCommand( {geoNear: "places", near: [ -74, 40.74 ] } )

and the output is:

.. code-block:: javascript

   {
      "ns" : "test.places",
      "near" : "0110000111111000000111111000000111111000000111111000",
      "results" : [
         {
            "dis" : 3,
            "obj" : {
               "_id" : ObjectId(" ... "),
               "loc" : [
                  -73,
                  40
               ]
            }
         }
      ],
      "stats" : {
         "time" : 2,
         "btreelocs" : 0,
         "nscanned" : 1,
         "objectsLoaded" : 1,
         "avgDistance" : 3,
         "maxDistance" : 3.0000188685220253
      },
      "ok" : 1
   }


.. seealso::

   :ref:`geospatial-query-exact`

.. _geospatial-query-limit:

Limit
`````
The :method:`limit() <cursor.limit()>` method can be used with
:method:`find() <db.collection.find()>` to limit the number of results.
By default, geospatial queries with the :method:`find()
<db.collection.find()>` method  return 100 documents sorted by
distance. The following is the prototype operation:

.. code-block:: javascript

   db.collection.find( { <location field>: { $near: [ x, y ] } } ).limit(n)

To limit the result set using the :dbcommand:`geoNear` command, use
the ``num`` option to limit results. The following is a prototype of
the command:

.. code-block:: javascript

   db.runCommand( { geoNear: "collection", near: [ x, y ], num: z } )

The :method:`limit() <cursor.limit()>` method and ``near`` parameter do
not limit geospatial query results by distance, only the number of
results. To limit geospatial search results by distance, please see
the :ref:`geospatial-query-distance` section.

.. note::

   The :method:`limit() <cursor.limit()>` method and ``num`` option have
   different performance characteristics. Geospatial queries using
   :method:`limit() <cursor.limit()>` method are slower than using
   :dbcommand:`geoNear`. 

   Geospatial queries with the :method:`find() <db.collection.find()>`
   method will return 100 documents, sort them, and finally limit the
   result set. Geospatial queries with the :dbcommand:`geoNear` and
   ``num`` option will only return the specified number of unsorted
   documents.

.. TODO double check with greg...

.. index:: geospatial queries; distance limit

.. _geospatial-query-distance:

Distance
````````

To query geospatial data by distance, use the :operator:`$maxDistance`
operator with :method:`find() <db.collection.find()>`, the function
prototype is:

.. code-block:: javascript

   db.collection.find( { <location field>: { $near: [ x, y ] } , $maxDistance : z } )

The equivalent :dbcommand:`geoNear` option is ``maxDistance``, the
prototype is:

.. code-block:: javascript

   db.runCommand( { geoNear: "collection", near: [ x, y ], maxDistance: z } )

Specify the distance in the ``maxDistance`` option using the same units
as the coordinate system specified. For example, if the indexed
location data is in meters, the distance units are also in meters.

See the :ref:`geospatial-query-limit` section to limit geospatial
query results by the number of returned :term:`documents <document>`.

.. _geospatial-within:
.. _geospatial-query-bounded:

Bounded
~~~~~~~

Bounded queries return documents within a particular shape and use the
:operator:`$within` operator to specify various shapes.

The following is a list of acceptable shapes for bounded queries using
the :operator:`$within` operator:

- circles,
- rectangles,
- polygons.

Bounded queries do not return sorted results and are faster than
:ref:`proximity queries <geospatial-query-proximity>`

.. TODO update $near in operator pages

Bounded queries take the following prototype form:

.. code-block:: javascript

   db.collection.find( { <location field> :
                              { "$within" :
                                { <shape> : <shape dimensions> }
                              }
                       } )

The following sections provide examples of bounded queries using the
:operator:`$within` operator.

Circles
```````

To query for documents within a circle, you must specify the center and the
radius of the circle, using the :operator:`$within` operator and the
:operator:`$center` option. Consider the following prototype query:

.. code-block:: javascript

   db.collection.find( { "field": { "$within": { "$center": [ center, radius ] } } } )

The following example query will return all documents that have
coordinates that exist within the circle centered on ``[-74, 40.74]``
with a radius of ``10``, using a geospatial index on the ``loc`` field:

.. code-block:: javascript

   db.places.find( { "loc": { "$within":
                               { "$center": [ [-74, 40.74], 10 ] }
                            }
                   } )

The :operator:`$within` operator using :operator:`$center` may be
equivalent to using :operator:`$maxDistance`, but :operator:`$center`
has different performance characteristics. Queries using the
:operator:`$within` operator are not sorted, while :operator:`$near`
operator results are sorted.

Boxes
`````

To query for documents that lie within a rectangle, you must specify only
the lower-left and upper-right corners for the :operator:`$box` option
using the :operator:`$within` operator. Consider the following
prototype query:

.. code-block:: javascript

   db.collection.find( { "field": { "$within": { "$box": [ coordinate0, coordinate1 ] } } } )

The following query will return all documents that have coordinates
that exist within the rectangle, where the lower-left corner is at ``[
0, 0 ]`` and the upper-right corner is at ``[ 3, 3 ]`` using a
geospatial index on the ``loc`` field:

.. code-block:: javascript

   db.places.find( { "loc": { "$within": { "$box": [ [0, 0] , [3, 3] ] } } } )

Polygons
````````

.. versionadded:: 1.9
   Support for polygon queries.

To query for documents that lie within a polygon, you must specify the
points of the polygon in an array, and use the :operator:`$polygon`
option with the :operator:`$within` operator. The last point in the
array will automatically be connected to the first point. Consider the following
prototype query:

.. code-block:: javascript

   db.places.find({ "loc": { "$within": { "$polygon": [ points ] } } })

The following query will return all documents that have coordinates
that exist within ``[0,0]``, ``[3,3]`` , ``[6,0]``. The following is
an example:

.. code-block:: javascript

   db.places.find({ "loc": { "$within": { "$polygon":
                                        [0,0], [3,3], [6,0] } } } )

See the :ref:`geospatial-query-distance` section to perform geospatial
queries for a particular distance around a certain point.

.. _geospatial-query-spherical:

Spherical
~~~~~~~~~

By default, MongoDB uses flat geometry to calculate distances between
points. MongoDB also supports distance calculations using spherical
geometry to provide accurate distances for geospatial information
based on a sphere or earth.

To calculate distances between points using spherical geometry instead
of flat geometry use the following spherical query operators, shown
with their flat geometry equivalents:

========================== ===================
 Spherical                  Flat
-------------------------- -------------------
:operator:`$nearSphere`    :operator:`$near`
:operator:`$centerSphere`  :operator:`$center`
========================== ===================

The equivalent :dbcommand:`geoNear` option to calculate using
spherical geometry is the ``{ spherical: true }`` option.

.. admonition:: Spherical Queries Use Radians for Distance

   For spherical operators to function properly, you must convert
   distances to radians, and convert from radians to distances units
   for your application.

   To convert:

   - *distance to radians*: divide the distance by the radius of the
     sphere (e.g. the Earth) in the same units as the distance
     measurement.

   - *radians to distance*: multiply the rad ian measure by the radius
     of the sphere (e.g. the Earth) in the units system that you want to
     convert the distance to.

   The radius of the Earth is approximately ``3963.192`` miles or
   ``6378.137`` kilometers.

The following query would return documents from the ``places``
collection, within the circle described by the center ``[ -74, 40.74 ]``
with a radius of ``100`` miles:

.. code-block:: javascript

   db.places.find( { loc: { $centerSphere: [ [ -74, 40.74 ] ,
                                           100 / 3963.192 ] } } )

You may also use the ``distanceMultiplier`` option to the
:dbcommand:`geoNear` to convert radians in the :program:`mongod`
process, rather than in your application code. Please see the
:ref:`distance multiplier <geospatial-distance-multiplier>` section.

The following spherical query, returns all documents in the collection
``places`` within ``100`` miles from the point ``[ -74, 40.74 ]``.

.. code-block:: javascript

   db.runCommand( { geoNear: "places",
                    near: [ -74, 40.74 ],
                    spherical: true
                  }  )

The output of the above command would be:

.. code-block:: javascript

   {
      // [ ... ]
      "results" : [
         {
            "dis" : 0.01853688938212826,
            "obj" : {
               "_id" : ObjectId( ... )
               "loc" : [
                  -73,
                  40
               ]
            }
         }
      ],
      "stats" : {
         // [ ... ]
         "avgDistance" : 0.01853688938212826,
         "maxDistance" : 0.01853714811400047
      },
      "ok" : 1
   }

.. warning::

   Spherical queries that wrap around the poles or at the transition
   from ``-180`` to ``180`` longitude raise an error.

.. note::

   While the default Earth-like bounds for geospatial indexes are
   between ``-180`` inclusive, and ``180``, valid values for latitude
   are between ``-90`` and ``90``.

.. _geospatial-distance-multiplier:

Distance Multiplier
~~~~~~~~~~~~~~~~~~~

The ``distanceMultiplier`` option multiplies all distances returned by
:dbcommand:`geoNear` command by an assigned value. 

.. note::

   Because ``distanceMultiplier`` is an option to
   :dbcommand:`geoNear`, the multiplication operation occurs on the
   :program:`mongod` process. The operation adds a slight overhead to
   the operation of :dbcommand:`geoNear`.

Using ``distanceMultiplier`` in spherical queries allows one to use
results from the :dbcommand:`geoNear` command without radian to
distance conversion. The following example uses ``distanceMultiplier`` in the
:dbcommand:`geoNear` command with a :ref:`spherical
<geospatial-query-spherical>` example:

.. code-block:: javascript

   db.runCommand( { geoNear: "places",
                    near: [ -74, 40.74 ],
                    spherical: true,
                    distanceMultiplier: 3963.192
                  }  )

The output of the above command would be:

.. code-block:: javascript

   {
      // [ ... ]
      "results" : [
         {
            "dis" : 73.46525170413567,
            "obj" : {
               "_id" : ObjectId( ... )
               "loc" : [
                  -73,
                  40
               ]
            }
         }
      ],
      "stats" : {
         // [ ... ]
         "avgDistance" : 0.01853688938212826,
         "maxDistance" : 0.01853714811400047
      },
      "ok" : 1
   }

.. seealso::
   :ref:`Distance operator <geospatial-query-distance>`

.. _geospatial-haystack-queries:

Querying Haystack Indexes
-------------------------

Geospatial haystack indexes are a special index that is optimized for
a small area. To create geospatial indexes with the haystack option
and a particular ``bucketSize``, please see: :ref:`Haystack Index
<geospatial-haystack-index>`

.. note::

   Haystack indexes are not suited to returning the closest documents to
   a particular location, as the closest documents could be far away
   compared to the ``bucketSize``.

To query the haystack index, use the :dbcommand:`geoSearch`
command. You must specify both the coordinate and other field to
:dbcommand:`geoSearch`, which take the following prototypical form:

.. code-block:: javascript

   db.runCommand( { geoSearch: <haystack index>, 
                    search: { <field>: <value> } } )

For example, to return all documents with the value ``restaurants`` in
the ``type`` field near the example point, the command would resemble:

.. code-block:: javascript

   db.runCommand( { geoSearch: "places",
                    search: { type: "restaurant" },
                    near: [-74, 40.74] } )

.. note::

   :ref:`Spherical queries <geospatial-spherical-representation>` are
   not currently supported by haystack indexes.

   The :method:`find() <db.collection.find()>` method and
   :dbcommand:`geoNear` command cannot access the haystack index.

.. _geospatial-multi-location:

Multi-location Documents
------------------------

.. versionadded:: 2.0
   Support for multiple locations in a document.

In general, MongoDB cannot support more than one set of coordinates in
a document; however, using :ref:`multi-key indexes <index-type-multi-key>`,
you *can* index multiple coordinates in a single document. In the
simplest example, you may have a field (e.g. ``locs``) that holds an
array of geospatial coordinates, as in the following prototype data
model:

.. code-block:: javascript

   {
    "_id": ObjectId(...),
    "locs": [
              [ 55.5, 42.3 ],
              [ -74, 44.74 ],
              { "lat": 55.3, "long": 40.2 }
            ]
   }

The values of the array may either be arrays holding coordinates, as
in ``[ 55.5, 42.3 ]`` or embedded documents as in ``{ "lat": 55.3,
"long": 40.2 }``.

You could then create a geospatial index on the ``locs`` field, as in
the following example:

.. code-block:: javascript

   db.places.ensureIndex( { "locs": "2d" } )

You may also model the location data as a field inside of a
sub-document. In this case, the document would contain field
(e.g. ``addresses``) that held an array of documents where each
document has a field (e.g. ``loc:``) that holds location
coordinates. Consider the following prototype data model:

.. code-block:: javascript

   {
    "_id": ObjectId(...),
    "name": "...",
    "addresses": [
                   {
                    "context": "home",
                    "loc": [ 55.5, 42.3 ]
                   },
                   {
                    "context": "home",
                    "loc": [ -74, 44.74 ]
                   }
                 ]
   }

Then, create the geospatial index on the ``addresses.loc`` field as
in the following example:

.. code-block:: javascript

   db.records.ensureIndex( { "addresses.loc": "2d" } )

For documents with multiple locations, results may have the same
document many times because of multiple matches. 

To include the location field with the distance field in
multi-location document queries, specify ``includeLocs: true``
in the :dbcommand:`geoNear` command.

.. the following is a section about the limitations of geospatial
   indexes in sharding:

.. includes:: /includes/geospatial-sharding.rst
