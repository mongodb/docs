================================
$first (aggregation accumulator)
================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. group:: $first
   
.. versionchanged:: 5.0

Returns the value that results from applying an :ref:`expression
<aggregation-expressions>` to the first document in a group of
documents. Only meaningful when documents are in a defined order.

.. include:: /includes/extracts/fact-aggregation-accumulator-first.rst

.. admonition:: Disambiguation
   :class: note

   This page describes the :group:`$first` aggregation accumulator. For
   the :expression:`$first` array operator, see :expression:`$first
   (array operator) <$first>`.

When used in the :pipeline:`$group` or :pipeline:`$setWindowFields`
stage, :group:`$first` respectively returns the value that results from
applying an expression to the first document in a group of documents
that:

- Share the same group by key. For an example, see
  :ref:`first-accumulator-group-example`.

- Are in the same :ref:`window <setWindowFields-window>`. For an
  example, see :ref:`first-accumulator-window-example`.

Syntax
------

:group:`$first` has the following syntax:

.. code-block:: javascript

   { $first: <expression> }

For more information on expressions, see :ref:`aggregation-expressions`.

Behavior
--------

.. |method| replace:: :group:`$first`

.. include:: /includes/note-group-and-window-behavior.rst

Examples
--------

.. _first-accumulator-group-example:

Use in ``$group`` Stage
~~~~~~~~~~~~~~~~~~~~~~~

Consider a ``sales`` collection with the following documents:

.. code-block:: javascript

   { "_id" : 1, "item" : "abc", "price" : 10, "quantity" : 2, "date" : ISODate("2014-01-01T08:00:00Z") }
   { "_id" : 2, "item" : "jkl", "price" : 20, "quantity" : 1, "date" : ISODate("2014-02-03T09:00:00Z") }
   { "_id" : 3, "item" : "xyz", "price" : 5, "quantity" : 5, "date" : ISODate("2014-02-03T09:05:00Z") }
   { "_id" : 4, "item" : "abc", "price" : 10, "quantity" : 10, "date" : ISODate("2014-02-15T08:00:00Z") }
   { "_id" : 5, "item" : "xyz", "price" : 5, "quantity" : 10, "date" : ISODate("2014-02-15T09:05:00Z") }
   { "_id" : 6, "item" : "xyz", "price" : 5, "quantity" : 5, "date" : ISODate("2014-02-15T12:05:10Z") }
   { "_id" : 7, "item" : "xyz", "price" : 5, "quantity" : 10, "date" : ISODate("2014-02-15T14:12:12Z") }

Grouping the documents by the ``item`` field, the following operation
uses the :group:`$first` accumulator to compute the first sales date for
each item:

.. code-block:: javascript

   db.sales.aggregate(
      [
        { $sort: { item: 1, date: 1 } },
        {
          $group:
            {
              _id: "$item",
              firstSalesDate: { $first: "$date" }
            }
        }
      ]
   )

The operation returns the following results:

.. code-block:: javascript

   { "_id" : "xyz", "firstSalesDate" : ISODate("2014-02-03T09:05:00Z") }
   { "_id" : "jkl", "firstSalesDate" : ISODate("2014-02-03T09:00:00Z") }
   { "_id" : "abc", "firstSalesDate" : ISODate("2014-01-01T08:00:00Z") }

.. _first-accumulator-window-example:

Use in ``$setWindowFields`` Stage
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 5.0

.. include:: /includes/setWindowFields-example-collection.rst

This example uses :group:`$first` in the :pipeline:`$setWindowFields`
stage to output the first cake sales order ``type`` for each ``state``:

.. code-block:: javascript

   db.cakeSales.aggregate( [
      {
         $setWindowFields: {
            partitionBy: "$state",
            sortBy: { orderDate: 1 },
            output: {
               firstOrderTypeForState: {
                  $first: "$type",
                  window: {
                     documents: [ "unbounded", "current" ]
                  }         
               }
            }
         }
      }
   ] )

In the example:

.. include:: /includes/setWindowFields-partition-sort-date.rst

- ``output`` sets the ``firstOrderTypeForState`` field to the first
  order ``type`` from the :ref:`documents <setWindowFields-documents>`
  window.
  
  The :ref:`window <setWindowFields-window>` contains documents between
  an ``unbounded`` lower limit and the ``current`` document in the
  output. This means :group:`$first` returns the first order ``type``
  for the documents between the beginning of the partition and the
  current document.

In this output, the first order ``type`` value for ``CA`` and ``WA`` is
shown in the ``firstOrderTypeForState`` field:

.. code-block:: javascript
   :copyable: false

   { "_id" : 4, "type" : "strawberry", "orderDate" : ISODate("2019-05-18T16:09:01Z"),
     "state" : "CA", "price" : 41, "quantity" : 162, "firstOrderTypeForState" : "strawberry" }
   { "_id" : 0, "type" : "chocolate", "orderDate" : ISODate("2020-05-18T14:10:30Z"),
     "state" : "CA", "price" : 13, "quantity" : 120, "firstOrderTypeForState" : "strawberry" }
   { "_id" : 2, "type" : "vanilla", "orderDate" : ISODate("2021-01-11T06:31:15Z"),
     "state" : "CA", "price" : 12, "quantity" : 145, "firstOrderTypeForState" : "strawberry" }
   { "_id" : 5, "type" : "strawberry", "orderDate" : ISODate("2019-01-08T06:12:03Z"),
     "state" : "WA", "price" : 43, "quantity" : 134, "firstOrderTypeForState" : "strawberry" }
   { "_id" : 3, "type" : "vanilla", "orderDate" : ISODate("2020-02-08T13:13:23Z"),
     "state" : "WA", "price" : 13, "quantity" : 104, "firstOrderTypeForState" : "strawberry" }
   { "_id" : 1, "type" : "chocolate", "orderDate" : ISODate("2021-03-20T11:30:05Z"),
     "state" : "WA", "price" : 14, "quantity" : 140, "firstOrderTypeForState" : "strawberry" }
