.. meta::
   :robots: noindex, nosnippet

.. _dotnet-data-ingest:

=====================================
Unidirectional Data Ingest - .NET SDK
=====================================

.. meta:: 
  :keywords: code example

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 10.17.0

.. include:: /includes/data-ingest-overview.rst

.. important::

   You cannot query, modify, or delete Asymmetric objects from a client app. 
   Because AsymmetricObject can not be modified by the client, the compiler 
   will not let you add a subscription to an AsymmetricObject.

The .NET SDK allows you to work with Asymmetric objects and standard Realm objects 
within the same realm. 

Sync Data Unidirectionally from a Client Application
----------------------------------------------------

.. versionchanged:: 11.6.0

Before you set up Data Ingest, you need to understand the following rules:

- The C# objects that you will sync with Atlas must implement the 
  :dotnet-sdk:`IAsymmetricObject <reference/Realms.IAsymmetricObject.html>`
  interface or derive from the 
  :dotnet-sdk:`AsymmetricObject <reference/Realms.AsymmetricObject.html>` class.

- Starting in .NET SDK version 11.6.0 and later, an object that implements 
  ``IAsymmetricObject`` can contain
  :dotnet-sdk:`IEmbeddedObject <reference/Realms.IEmbeddedObject.html>` types, 
  and links to ``IRealmObject`` types. In .NET SDK versions 11.5.0 and earlier, 
  an object that implements ``IAsymmetricObject`` can only contain
  :dotnet-sdk:`IEmbeddedObject <reference/Realms.IEmbeddedObject.html>` types - 
  it does not support links to ``IRealmObject`` types or other 
  ``IAsymmetricObject`` types. 

- ``IRealmObject`` and ``IEmbeddedObject`` types cannot contain ``IAsymmetricObject``
  types as properties. 

- Unidirectional Sync requires :ref:`Flexible Sync <dotnet-flexible-sync>`.

The process for syncing data asymmetrically is the same as 
standard :ref:`bi-directional sync <dotnet-client-quick-start>`, as long as the 
rules above are followed. The following code shows creating an Asymmetric object 
and syncing it with the backend. It also shows to queries that generate errors. 

.. literalinclude:: /examples/generated/dotnet/Asymmetrics.snippet.asymmetry.cs
   :language: csharp

Atlas Device Sync completely manages the lifecycle of this data. 
It is maintained on the device until Data Ingest synchronization is 
complete, and then removed from the device.
