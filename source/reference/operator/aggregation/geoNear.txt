======================
$geoNear (aggregation)
======================

.. default-domain:: mongodb

Definition
----------

.. pipeline:: $geoNear

   .. versionadded:: 2.4

   :pipeline:`$geoNear` returns documents in order of nearest to
   farthest from a specified point and pass the documents
   through the aggregation :term:`pipeline`.

   The :pipeline:`$geoNear` operator accepts a :term:`document` that
   contains the following fields. Specify all distances in the same
   unites as the document coordinate system:

   .. include:: /reference/operator/aggregation/geoNear-field.rst

Behavior
--------

When using :pipeline:`$geoNear`, consider that:

- You can only use :pipeline:`$geoNear` as the first stage of a
  pipeline.

- You must include the ``distanceField`` option. The
  ``distanceField`` option specifies the field that will contain
  the calculated distance.

- The collection must have a :doc:`geospatial index
  </core/geospatial-indexes>`.

- The :pipeline:`$geoNear` requires that a collection have *at most*
  only one :doc:`2d index </core/2d>` and/or only one
  :doc:`2dsphere index </core/2dsphere>`.

Generally, the options for :pipeline:`$geoNear` are similar to the
:dbcommand:`geoNear` command with the following exceptions:

- ``distanceField`` is a mandatory field for the
  :pipeline:`$geoNear` pipeline operator; the option does not exist
  in the :dbcommand:`geoNear` command.

- ``includeLocs`` accepts a ``string`` in the :pipeline:`$geoNear`
  pipeline operator and a ``boolean`` in the :dbcommand:`geoNear`
  command.

Example
-------

The following aggregation finds at most ``5`` unique documents
with a location at most .008 from the center ``[40.72, -73.99]``
and have ``type`` equal to ``public``:

.. code-block:: javascript

   db.places.aggregate([
                         {
                           $geoNear: {
                                       near: [40.724, -73.997],
                                       distanceField: "dist.calculated",
                                       maxDistance: 0.008,
                                       query: { type: "public" },
                                       includeLocs: "dist.location",
                                       num: 5
                                     }
                         }
                      ])

The aggregation returns the following:

.. code-block:: javascript

   {
     "result" : [
                  { "_id" : 7,
                    "name" : "Washington Square",
                    "type" : "public",
                    "location" : [
                                   [ 40.731, -73.999 ],
                                   [ 40.732, -73.998 ],
                                   [ 40.730, -73.995 ],
                                   [ 40.729, -73.996 ]
                                 ],
                    "dist" : {
                               "calculated" : 0.0050990195135962296,
                               "location" : [ 40.729, -73.996 ]
                             }
                  },
                  { "_id" : 8,
                    "name" : "Sara D. Roosevelt Park",
                    "type" : "public",
                    "location" : [
                                   [ 40.723, -73.991 ],
                                   [ 40.723, -73.990 ],
                                   [ 40.715, -73.994 ],
                                   [ 40.715, -73.994 ]
                                 ],
                    "dist" : {
                               "calculated" : 0.006082762530298062,
                               "location" : [ 40.723, -73.991 ]
                             }
                  }
                ],
     "ok" : 1
   }

The matching documents in the ``result`` field contain two new fields:

- ``dist.calculated`` field that contains the calculated distance, and

- ``dist.location`` field that contains the location used in the
  calculation.
