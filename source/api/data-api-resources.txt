.. _data-api-resources:
.. _data-api-endpoints:

======================
{+data-api+} Resources
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1

.. include:: /includes/fact-apis-different-keys.rst

.. _data-api-base-url:

Base URL
--------

All {+data-api+} endpoints have the following base URL, where
``<{+data-api+} App ID>`` is a unique ID specific to each cluster:

.. code-block:: text
   
   https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1

Regional Requests
~~~~~~~~~~~~~~~~~

You can use a region-specific base URL to force requests to execute in
that region:

.. code-block:: text
   
   https://<region>.aws.data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1

The {+data-api+} supports the following regions:

- ``us-east-1`` (Virginia)
- ``us-west-2`` (Oregon)
- ``eu-west-1`` (Ireland)
- ``ap-southeast-2`` (Sydney)

.. _data-api-findOne:

Find a Single Document
----------------------

Endpoint
~~~~~~~~

.. code-block:: text
   
   POST /action/findOne

Example
~~~~~~~

.. code-block:: sh
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/findOne' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "Cluster0",
         "database": "todo",
         "collection": "tasks",
         "filter": {
           "text": "Do the dishes"
         }
     }'

Request Body
~~~~~~~~~~~~

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": <query filter>,
     "projection": <projection>
   }

.. include:: /includes/api/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Optional
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`.
       The ``findOne`` action returns the first document in the
       collection that matches this filter.
       
       If you do not specify a ``filter``, the action matches all
       document in the collection.

     - ``{}``

   * - projection
     - object
     - Optional
     - A :manual:`MongoDB Query Projection </tutorial/project-fields-from-query-results/>`.
       Depending on the projection, the returned document will either
       omit specific fields or include only specified fields or values
     - ``{}``

Response
~~~~~~~~

The ``findOne`` action returns the matched document in the ``document``
field:

.. code-block:: json
   
   { "document": { "_id": "6193504e1be4ab27791c8133", "test": "foo" } }

If the action does not match any documents, the ``document`` field is
``null``:

.. code-block:: json
   
   { "document": null }

.. _data-api-find:

Find Multiple Documents
-----------------------

Endpoint
~~~~~~~~

.. code-block:: text
   
   POST /action/find

Example
~~~~~~~

.. code-block:: sh
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/find' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "Cluster0",
         "database": "todo",
         "collection": "tasks",
         "filter": {
           "status": "complete"
         },
         "sort": { "completedAt": 1 },
         "limit": 10
     }'

Request Body
~~~~~~~~~~~~

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": <query filter>,
     "projection": <projection>,
     "sort": <sort expression>,
     "limit": <number>,
     "skip": <number>
   }

.. include:: /includes/api/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Optional
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`. The
       ``find`` action returns documents in the collection that match
       this filter. 
       
       If you do not specify a ``filter``, the action matches all
       document in the collection.

       If the filter matches more documents than the specified
       ``limit``, the action only returns a subset of them. You can use
       ``skip`` in subsequent queries to return later documents in the
       result set.
     
     - ``{}``

   * - projection
     - object
     - Optional
     - A :manual:`MongoDB Query Projection </tutorial/project-fields-from-query-results/>`.
       Depending on the projection, the returned documents either omit
       specific fields or include only specified fields and values.
     - ``{}``

   * - sort
     - object
     - Optional
     - A :manual:`MongoDB Sort Expression </reference/operator/aggregation/sort/>`.
       Matched documents are returned in ascending or descending order
       of the fields specified in the expression.
     - ``{}``

   * - limit
     - number
     - Optional
     - The maximum number of matched documents to include in the
       returned result set. Each request may return up to 50,000
       documents.
     - 1000

   * - skip
     - number
     - Optional
     - The number of matched documents to skip before adding matched
       documents to the result set.
     - 0


Response
~~~~~~~~

The ``find`` action returns an array of matched document in the
``documents`` field:

.. code-block:: json
   
   {
     "documents": [
       { "_id": "6193504e1be4ab27791c8133", ... },
       { "_id": "6194604e1d38dc33792d8257", ... }
     ]
   }

If the action does not match any documents, the ``documents`` field is
an empty array:

.. code-block:: json
   
   { "documents": [] }

.. _data-api-insertOne:

Insert a Single Document
------------------------

Endpoint
~~~~~~~~

.. code-block:: text
   
   POST /action/insertOne

Example
~~~~~~~

.. code-block:: sh
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/insertOne' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "Cluster0",
         "database": "todo",
         "collection": "tasks",
         "document": {
           "status": "open",
           "text": "Do the dishes"
         }
     }'

Request Body
~~~~~~~~~~~~

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "document": { ... },
   }

.. include:: /includes/api/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - document
     - object
     - Required
     - An :manual:`EJSON <reference/mongodb-extended-json/>` document
       to insert into the collection.
     - 

Response
~~~~~~~~

The ``insertOne`` action returns the ``_id`` value of the inserted
document as a string in the ``insertedId`` field:

.. code-block:: json
   
   { "insertedId": "6193504e1be4ab27791c8133" }

.. _data-api-insertMany:

Insert Multiple Documents
-------------------------

Endpoint
~~~~~~~~

.. code-block:: text
   
   POST /action/insertMany

Example
~~~~~~~

.. code-block:: sh
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/insertMany' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "Cluster0",
         "database": "todo",
         "collection": "tasks",
         "documents": [
           { "status": "open", "text": "Mop the floor" },
           { "status": "open", "text": "Clean the windows" }
         ]
     }'

Request Body
~~~~~~~~~~~~

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "documents": [{ ... }, ...]
   }

.. include:: /includes/api/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - documents
     - array of objects
     - Required
     - An array of one or more :manual:`EJSON <reference/mongodb-extended-json/>`
       documents to insert into the collection.
     - 

Response
~~~~~~~~

The ``insertMany`` action returns the ``_id`` values of all inserted
documents as an array of strings in the ``insertedIds`` field:

.. code-block:: json
   
   { "insertedIds": ["61935189ec53247016a623c9", "61935189ec53247016a623ca"] }

.. _data-api-updateOne:

Update a Single Document
------------------------

Endpoint
~~~~~~~~

.. code-block:: text
   
   POST /action/updateOne

Example
~~~~~~~

.. code-block:: sh
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/updateOne' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "Cluster0",
         "database": "todo",
         "collection": "tasks",
         "filter": { "_id": { "$oid": "6193ebd53821e5ec5b4f6c3b" } },
         "update": {
             "$set": {
                 "status": "complete",
                 "completedAt": { "$date": { "$numberLong": "1637083942954" } }
             }
         }
     }'

Request Body
~~~~~~~~~~~~

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": { ... },
     "update": { ... },
     "upsert": true|false
   }

.. include:: /includes/api/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Required
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`.
       The ``updateOne`` action modifies the first document in the
       collection that matches this filter.
     - 

   * - update
     - object
     - Required
     - A :manual:`MongoDB Update Expression </tutorial/update-documents/>`
       that specifies how to modify the matched document.
     - 

   * - upsert
     - boolean
     - Optional
     - The ``upsert`` flag only applies if no documents match the
       specified ``filter``. If ``true``, the ``updateOne`` action
       inserts a new document that matches the filter with the specified
       ``update`` applied to it.
     - false

Response
~~~~~~~~

The ``updateOne`` action returns:

- the number of documents that the filter matched in the ``matchedCount`` field
- the number of matching documents that were updated in the ``modifiedCount`` field

.. code-block:: json
   
   { "matchedCount": 1, "modifiedCount": 1 }

If ``upsert`` is set to ``true`` and no documents match the filter, the
action returns the ``_id`` value of the inserted document as a string in
the ``upsertedId`` field:

.. code-block:: json
   
   { "matchedCount": 0, "modifiedCount": 0, "upsertedId": "619353593821e5ec5b0f8944" }

.. _data-api-updateMany:

Update Multiple Documents
-------------------------

Endpoint
~~~~~~~~

.. code-block:: text
   
   POST /action/updateMany

Example
~~~~~~~

.. code-block:: sh
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/updateMany' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "Cluster0",
         "database": "todo",
         "collection": "tasks",
         "filter": { "status": "open" },
         "update": {
             "$set": {
                 "status": "complete",
                 "completedAt": { "$date": { "$numberLong": "1637083942954" } }
             }
         }
     }'

Request Body
~~~~~~~~~~~~

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": { ... },
     "update": { ... },
     "upsert": true|false
   }

.. include:: /includes/api/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Required
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`.
       The ``updateMany`` action modifies all documents in the
       collection that match this filter.
     - 

   * - update
     - object
     - Required
     - A :manual:`MongoDB Update Expression </tutorial/update-documents/>`
       that specifies how to modify matched documents.
     - 

   * - upsert
     - boolean
     - Optional
     - The ``upsert`` flag only applies if no documents match the
       specified ``filter``. If ``true``, the ``updateMany`` action
       inserts a new document that matches the filter with the specified
       ``update`` applied to it.
     - false

Response
~~~~~~~~

The ``updateMany`` action returns:

- the number of documents that the filter matched in the ``matchedCount`` field
- the number of matching documents that were updated in the ``modifiedCount`` field

.. code-block:: json
   
   { "matchedCount": 12, "modifiedCount": 12 }

If ``upsert`` is set to ``true`` and no documents match the filter, the
action returns the ``_id`` value of the inserted document as a string in
the ``upsertedId`` field:

.. code-block:: json
   
   { "matchedCount": 0, "modifiedCount": 0, "upsertedId": "619353593821e5ec5b0f8944" }

.. _data-api-replaceOne:

Replace a Single Document
-------------------------

Endpoint
~~~~~~~~

.. code-block:: text
   
   POST /action/replaceOne

Example
~~~~~~~

.. code-block:: sh
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/replaceOne' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "Cluster0",
         "database": "todo",
         "collection": "tasks",
         "filter": { "text": "Call Jessica" },
         "replacement": {
           "status": "open",
           "text": "Call Amy"
         }
     }'

Request Body
~~~~~~~~~~~~

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": { ... },
     "replacement": { ... },
     "upsert": true|false
   }

.. include:: /includes/api/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Required
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`.
       The ``replaceOne`` action overwrites the first document in the
       collection that matches this filter.
     - 

   * - replacement
     - object
     - Required
     - An :manual:`EJSON <reference/mongodb-extended-json/>` document
       that overwrites the matched document.
     - 

   * - upsert
     - boolean
     - Optional
     - The ``upsert`` flag only applies if no documents match the
       specified ``filter``. If ``true``, the ``replaceOne`` action
       inserts the ``replacement`` document.
     - false

Response
~~~~~~~~

The ``replaceOne`` action returns:

- the number of documents that the filter matched in the ``matchedCount`` field
- the number of matching documents that were replaced in the ``modifiedCount`` field

.. code-block:: json
   
   { "matchedCount": 1, "modifiedCount": 1 }

If ``upsert`` is set to ``true`` and no documents match the filter, the
action returns the ``_id`` value of the inserted document as a string in
the ``upsertedId`` field:

.. code-block:: json
   
   { "matchedCount": 0, "modifiedCount": 0, "upsertedId": "619353593821e5ec5b0f8944" }

.. _data-api-deleteOne:

Delete a Single Document
------------------------

Endpoint
~~~~~~~~

.. code-block:: text
   
   POST /action/deleteOne

Example
~~~~~~~

.. code-block:: sh
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/deleteOne' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "Cluster0",
         "database": "todo",
         "collection": "tasks",
         "filter": { "_id": { "$oid": "6193ebd53821e5ec5b4f6c3b" } }
     }'

Request Body
~~~~~~~~~~~~

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": { ... }
   }

.. include:: /includes/api/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Required
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`.
       The ``deleteOne`` action deletes the first document in the
       collection that matches this filter.
     - 

Response
~~~~~~~~

The ``deleteOne`` action returns the number of deleted documents in the
``deletedCount`` field:

.. code-block:: json
   
   { "deletedCount": 1 }

.. _data-api-deleteMany:

Delete Multiple Documents
-------------------------

Endpoint
~~~~~~~~

.. code-block:: text
   
   POST /action/deleteMany

Example
~~~~~~~

.. code-block:: sh
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/deleteMany' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "Cluster0",
         "database": "todo",
         "collection": "tasks",
         "filter": { "status": "complete" }
     }'

Request Body
~~~~~~~~~~~~

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "filter": { ... }
   }

.. include:: /includes/api/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - filter
     - object
     - Required
     - A :manual:`MongoDB Query Filter </tutorial/query-documents/>`.
       The ``deleteMany`` action deletes all documents in the collection
       that match this filter.
     - 

Response
~~~~~~~~

The ``deleteMany`` action returns the number of deleted documents in the
``deletedCount`` field:

.. code-block:: json
   
   { "deletedCount": 42 }

.. _data-api-aggregate:

Run an Aggregation Pipeline
---------------------------

Endpoint
~~~~~~~~

.. code-block:: text
   
   POST /action/aggregate

Example
~~~~~~~

.. code-block:: sh
   
   curl --request POST \
     'https://data.mongodb-api.com/app/<{+data-api+} App ID>/endpoint/data/v1/action/aggregate' \
     --header 'Content-Type: application/json' \
     --header 'Access-Control-Request-Headers: *' \
     --header 'api-key: <{+data-api+} Key>' \
     --data-raw '{
         "dataSource": "Cluster0",
         "database": "todo",
         "collection": "tasks",
         "pipeline": [
           {
             "$group": {
               "_id": "$status",
               "count": { "$sum": 1 },
               "text": { "$push": "$text" }
             }
           },
           { "$sort": { "count": 1 } }
         ]
     }'

Request Body
~~~~~~~~~~~~

.. code-block:: json
   
   {
     "dataSource": "<data source name>",
     "database": "<database name>",
     "collection": "<collection name>",
     "pipeline": [<aggregation pipeline>]
   }

.. include:: /includes/api/data-api-body-params-common.rst

.. list-table::
   :stub-columns: 1
   :widths: 20 14 11 45 10

   * - pipeline
     - array of objects
     - Required
     - A :manual:`MongoDB Aggregation Pipeline </core/aggregation-pipeline/>`.
     - 

Response
~~~~~~~~

The ``aggregate`` action returns the result set of the final stage of
the pipeline as an array of documents in the ``documents`` field:

.. code-block:: json
   
   { "documents": [{ ... }, ...] }

.. _data-api-error-codes:

Error Codes
-----------

.. list-table::
   :header-rows: 1

   * - Code
     - Description
       
   * - 400
     - Bad request
       
       The request was invalid. This might mean:
       
       - A request header is missing.
       - The request body is malformed or improperly encoded.
       - A field has a value with an invalid type.
       - The specified data source is disabled or does not exist.
       - The specified database or collection does not exist.
       
   * - 401
     - Unauthorized
       
       The request did not include an authorized and enabled
       {+data-api+} Key. Ensure that your {+data-api+} Key is enabled
       for the cluster.
       
   * - 404
     - Not found
       
       The request was sent to an endpoint that does not exist.
       
   * - 500s 
     - Server errors
       
       The {+data-api+} encountered an internal error and could not
       complete the request.
