#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/faq/fundamentals.txt:3
msgid "FAQ: MongoDB Fundamentals"
msgstr ""

#: ../source/faq/fundamentals.txt:13
msgid "This document answers some common questions about MongoDB."
msgstr ""

#: ../source/faq/fundamentals.txt:16
msgid "What platforms does MongoDB support?"
msgstr ""

#: ../source/faq/fundamentals.txt:18
msgid ""
"For the list of supported platforms, see :ref:`prod-notes-supported-"
"platforms`."
msgstr ""

#: ../source/faq/fundamentals.txt:22
msgid "Is MongoDB offered as a hosted service?"
msgstr ""

#: ../source/faq/fundamentals.txt:24
msgid ""
"Yes. `MongoDB Atlas <https://www.mongodb.com/cloud/atlas?jmp=docs>`_ is a"
" cloud-hosted database-as-a-service. For more information, please visit "
"the `MongoDB Atlas docs <https://www.mongodb.com/cloud/atlas?jmp=docs>`_."
msgstr ""

#: ../source/faq/fundamentals.txt:30
msgid "How does a collection differ from a table?"
msgstr ""

#: ../source/faq/fundamentals.txt:32
msgid ""
"Instead of tables, a MongoDB database stores its data in "
":term:`collections <collection>`. A collection holds one or more "
":ref:`BSON documents <bson-document-format>`. Documents are analogous to "
"records or rows in a relational database table. Each document has "
":ref:`one or more fields <document-structure>`; fields are similar to the"
" columns in a relational database table."
msgstr ""

#: ../source/faq/fundamentals.txt:39
msgid ":doc:`/reference/sql-comparison`, :doc:`/introduction`"
msgstr ""

#: ../source/faq/fundamentals.txt:42
msgid "How do I create a database and a collection?"
msgstr ""

#: ../source/faq/fundamentals.txt:44
msgid ""
"If a database does not exist, MongoDB creates the database when you first"
" store data for that database."
msgstr ""

#: ../source/faq/fundamentals.txt:47
msgid ""
"If a collection does not exist, MongoDB creates the collection when you "
"first store data for that collection. [#explicit-creation]_"
msgstr ""

#: ../source/faq/fundamentals.txt:50
msgid ""
"As such, you can switch to a non-existent database (``use <dbname>``) and"
" perform the following operation:"
msgstr ""

#: ../source/faq/fundamentals.txt:60
msgid ""
"The ``insert`` operation creates both the database ``myNewDB`` and the "
"collection ``myNewCollection1`` if they do not already exist."
msgstr ""

#: ../source/faq/fundamentals.txt:63
msgid ""
"The ``createIndex`` operation, which occurs after the ``myNewDB`` has "
"been created, creates the index and the collection ``myNewCollection2`` "
"if the collection does not exist. If ``myNewDb`` did not exist, the "
"``createIndex`` operation would have also created the ``myNewDB``."
msgstr ""

#: ../source/faq/fundamentals.txt:70
msgid ""
"You can also create a collection explicitly using "
":method:`db.createCollection` if you want to specify specific options, "
"such as maximum size or document validation rules."
msgstr ""

#: ../source/faq/fundamentals.txt:77
msgid "How do I define or alter the collection schema?"
msgstr ""

#: ../source/faq/fundamentals.txt:79
msgid ""
"You do not need to specify a schema for a collection in MongoDB. Although"
" it is common for the documents in a collection to have a largely "
"homogeneous structure, it is not a requirement; i.e. documents in a "
"single collection do not need to have the same set of fields. The data "
"type for a field can differ across documents in a collection as well."
msgstr ""

#: ../source/faq/fundamentals.txt:86
msgid ""
"To change the structure of the documents in a collection, update the "
"documents to the new structure. For instance, add new fields, remove "
"existing ones, or update the value of a field to a new type."
msgstr ""

#: ../source/faq/fundamentals.txt:92
msgid ""
"Starting in MongoDB 3.2, however, you can enforce :doc:`document "
"validation rules </core/schema-validation>` for a collection during "
"update and insert operations."
msgstr ""

#: ../source/faq/fundamentals.txt:96
msgid ""
"Some collection properties, such as specifying a maximum size, can be "
"specified during the explicit creation of a collection and be modified. "
"See :method:`db.createCollection` and :dbcommand:`collMod`. If you are "
"not specifying these properties, you do not need to explicitly create the"
" collection since MongoDB creates new collections when you first store "
"data for the collections."
msgstr ""

#: ../source/faq/fundamentals.txt:104
msgid "Does MongoDB support SQL?"
msgstr ""

#: ../source/faq/fundamentals.txt:106
msgid ""
"Not directly, no. However, MongoDB does support a rich query language of "
"its own. For examples on using MongoDB's query language, see :doc:`/crud`"
msgstr ""

#: ../source/faq/fundamentals.txt:110
msgid ""
"You can also use the `MongoDB Connector for BI "
"<https://www.mongodb.com/products/bi-connector>`_ to query MongoDB "
"collections with SQL."
msgstr ""

#: ../source/faq/fundamentals.txt:114
msgid ":doc:`/reference/sql-comparison`"
msgstr ""

#: ../source/faq/fundamentals.txt:117
msgid "Does MongoDB support transactions?"
msgstr ""

#: ../source/includes/extracts/transactions-faq.rst:1
msgid ""
"Because a single document can contain related data that would otherwise "
"be modeled across separate parent-child tables in a relational schema, "
"MongoDB's atomic single-document operations already provide transaction "
"semantics that meet the data integrity needs of the majority of "
"applications. One or more fields may be written in a single operation, "
"including updates to multiple sub-documents and elements of an array. The"
" guarantees provided by MongoDB ensure complete isolation as a document "
"is updated; any errors cause the operation to roll back so that clients "
"receive a consistent view of the document."
msgstr ""

#: ../source/includes/extracts/transactions-faq.rst:11
msgid ""
"Starting in version 4.0, for situations that require atomicity for "
"updates to multiple documents or consistency between reads to multiple "
"documents, MongoDB provides :manual:`multi-document transactions "
"</core/transactions>` for replica sets, and transactions for sharded "
"clusters are scheduled for MongoDB 4.2."
msgstr ""

#: ../source/includes/extracts/transactions-usage.rst:2
msgid ""
"In most cases, multi-document transaction incurs a greater performance "
"cost over single document writes, and the availability of multi-document "
"transaction should not be a replacement for effective schema design. For "
"many scenarios, the :ref:`denormalized data model (embedded documents and"
" arrays) <data-modeling-embedding>` will continue to be optimal for your "
"data and use cases. That is, for many scenarios, modeling your data "
"appropriately will minimize the need for multi-document transactions."
msgstr ""

#: ../source/includes/fact-upcoming.rst:1
msgid ""
"The development, release, and timing of any features or functionality "
"described for our products remains at our sole discretion. This "
"information is merely intended to outline our general product direction "
"and it should not be relied on in making a purchasing decision nor is "
"this a commitment, promise or legal obligation to deliver any material, "
"code, or functionality."
msgstr ""

#: ../source/faq/fundamentals.txt:131
msgid "Does MongoDB handle caching?"
msgstr ""

#: ../source/faq/fundamentals.txt:133
msgid ""
"Yes. MongoDB keeps most recently used data in RAM. If you have created "
"indexes for your queries and your working data set fits in RAM, MongoDB "
"serves all queries from memory."
msgstr ""

#: ../source/faq/fundamentals.txt:137
msgid ""
"MongoDB does not cache the query results in order to return the cached "
"results for identical queries."
msgstr ""

#: ../source/faq/fundamentals.txt:140
msgid ""
"For more information on MongoDB and memory use, see :ref:`WiredTiger and "
"Memory Use <wiredtiger-RAM>` and :ref:`MMAPv1 and Memory Use "
"<mmapv1-RAM>`."
msgstr ""

#: ../source/faq/fundamentals.txt:145
msgid "How does MongoDB address SQL or Query injection?"
msgstr ""

#: ../source/faq/fundamentals.txt:148
msgid "BSON"
msgstr ""

#: ../source/faq/fundamentals.txt:150
msgid ""
"As a client program assembles a query in MongoDB, it builds a BSON "
"object, not a string. Thus traditional SQL injection attacks are not a "
"problem. More details and some nuances are covered below."
msgstr ""

#: ../source/faq/fundamentals.txt:154
msgid ""
"MongoDB represents queries as :term:`BSON` objects. Typically "
":ecosystem:`client libraries </drivers>` provide a convenient, injection "
"free, process to build these objects. Consider the following C++ example:"
msgstr ""

#: ../source/faq/fundamentals.txt:164
msgid ""
"Here, ``my_query`` then will have a value such as ``{ name : \"Joe\" }``."
" If ``my_query`` contained special characters, for example ``,``, ``:``, "
"and ``{``, the query simply wouldn't match any documents. For example, "
"users cannot hijack a query and convert it to a delete."
msgstr ""

#: ../source/faq/fundamentals.txt:171
msgid "JavaScript"
msgstr ""

#: ../source/includes/fact-disable-javascript-with-noscript.rst:1
msgid ""
"You can disable all server-side execution of JavaScript, by passing the "
":option:`--noscripting <mongod --noscripting>` option on the command line"
" or setting :setting:`security.javascriptEnabled` in a configuration "
"file."
msgstr ""

#: ../source/faq/fundamentals.txt:177
msgid ""
"All of the following MongoDB operations permit you to run arbitrary "
"JavaScript expressions directly on the server:"
msgstr ""

#: ../source/faq/fundamentals.txt:180
msgid ":query:`$where`"
msgstr ""

#: ../source/faq/fundamentals.txt:181
msgid ":dbcommand:`mapReduce`"
msgstr ""

#: ../source/faq/fundamentals.txt:182
msgid ":dbcommand:`group`"
msgstr ""

#: ../source/faq/fundamentals.txt:184
msgid ""
"You must exercise care in these cases to prevent users from submitting "
"malicious JavaScript."
msgstr ""

#: ../source/faq/fundamentals.txt:187
msgid ""
"Fortunately, you can express most queries in MongoDB without JavaScript "
"and for queries that require JavaScript, you can mix JavaScript and non-"
"JavaScript in a single query. Place all the user-supplied fields directly"
" in a :term:`BSON` field and pass JavaScript code to the :query:`$where` "
"field."
msgstr ""

#: ../source/faq/fundamentals.txt:193
msgid ""
"If you need to pass user-supplied values in a :query:`$where` clause, you"
" may escape these values with the ``CodeWScope`` mechanism. When you set "
"user-submitted values as variables in the scope document, you can avoid "
"evaluating them on the database server."
msgstr ""

#~ msgid ""
#~ "This document addresses basic high level"
#~ " questions about MongoDB and its use."
#~ msgstr ""

#~ msgid ""
#~ "If you don't find the answer "
#~ "you're looking for, check the "
#~ ":doc:`complete list of FAQs </faq>` or"
#~ " post your question to the `MongoDB"
#~ " User Mailing List "
#~ "<https://groups.google.com/forum/?fromgroups#!forum/mongodb-"
#~ "user>`_."
#~ msgstr ""

#~ msgid "What kind of database is MongoDB?"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB is a :term:`document`\\-oriented DBMS."
#~ " Think of MySQL but with "
#~ ":term:`JSON`-like objects comprising the data"
#~ " model, rather than RDBMS tables. "
#~ "Significantly, MongoDB supports neither joins"
#~ " nor transactions. However, it features "
#~ "secondary indexes, an expressive query "
#~ "language, atomic writes on a per-"
#~ "document level, and fully-consistent "
#~ "reads."
#~ msgstr ""

#~ msgid ""
#~ "Operationally, MongoDB features master-slave"
#~ " replication with automated failover and"
#~ " built-in horizontal scaling via "
#~ "automated range-based partitioning."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB uses :term:`BSON`, a binary "
#~ "object format similar to, but more "
#~ "expressive than :term:`JSON`."
#~ msgstr ""

#~ msgid "Do MongoDB databases have tables?"
#~ msgstr ""

#~ msgid ""
#~ "Instead of tables, a MongoDB database"
#~ " stores its data in :term:`collections "
#~ "<collection>`, which are the rough "
#~ "equivalent of RDBMS tables. A collection"
#~ " holds one or more :term:`documents "
#~ "<document>`, which corresponds to a "
#~ "record or a row in a relational"
#~ " database table, and each document "
#~ "has one or more fields, which "
#~ "corresponds to a column in a "
#~ "relational database table."
#~ msgstr ""

#~ msgid ""
#~ "Collections have important differences from"
#~ " RDBMS tables. Documents in a single"
#~ " collection may have a unique "
#~ "combination and set of fields. Documents"
#~ " need not have identical fields. You"
#~ " can add a field to some "
#~ "documents in a collection without adding"
#~ " that field to all documents in "
#~ "the collection."
#~ msgstr ""

#~ msgid "See"
#~ msgstr ""

#~ msgid "Do MongoDB databases have schemas?"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB uses dynamic schemas. You can"
#~ " create collections without defining the"
#~ " structure, i.e. the fields or the"
#~ " types of their values, of the "
#~ "documents in the collection. You can "
#~ "change the structure of documents simply"
#~ " by adding new fields or deleting "
#~ "existing ones. Documents in a collection"
#~ " need not have an identical set "
#~ "of fields."
#~ msgstr ""

#~ msgid ""
#~ "In practice, it is common for the"
#~ " documents in a collection to have"
#~ " a largely homogeneous structure; however,"
#~ " this is not a requirement. MongoDB's"
#~ " flexible schemas mean that schema "
#~ "migration and augmentation are very easy"
#~ " in practice, and you will rarely,"
#~ " if ever, need to write scripts "
#~ "that perform \"alter table\" type "
#~ "operations, which simplifies and facilitates"
#~ " iterative software development with "
#~ "MongoDB."
#~ msgstr ""

#~ msgid "What languages can I use to work with MongoDB?"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB :term:`client drivers <driver>` exist"
#~ " for all of the most popular "
#~ "programming languages, and many other "
#~ "ones. See the :ecosystem:`latest list of"
#~ " drivers </drivers>` for details."
#~ msgstr ""

#~ msgid ":doc:`/applications/drivers`."
#~ msgstr ""

#~ msgid "No."
#~ msgstr ""

#~ msgid "However, MongoDB does support a rich, ad-hoc query language of its own."
#~ msgstr ""

#~ msgid ":doc:`/reference/operator`"
#~ msgstr ""

#~ msgid "What are typical uses for MongoDB?"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB has a general-purpose design,"
#~ " making it appropriate for a large"
#~ " number of use cases. Examples "
#~ "include content management systems, mobile "
#~ "applications, gaming, e-commerce, analytics, "
#~ "archiving, and logging."
#~ msgstr ""

#~ msgid ""
#~ "Do not use MongoDB for systems "
#~ "that require SQL, joins, and multi-"
#~ "object transactions."
#~ msgstr ""

#~ msgid "Does MongoDB require a lot of RAM?"
#~ msgstr ""

#~ msgid ""
#~ "Not necessarily. It's certainly possible "
#~ "to run MongoDB on a machine with"
#~ " a small amount of free RAM."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB automatically uses all free "
#~ "memory on the machine as its "
#~ "cache. System resource monitors show "
#~ "that MongoDB uses a lot of memory,"
#~ " but its usage is dynamic. If "
#~ "another process suddenly needs half the"
#~ " server's RAM, MongoDB will yield "
#~ "cached memory to the other process."
#~ msgstr ""

#~ msgid ""
#~ "Technically, the operating system's virtual"
#~ " memory subsystem manages MongoDB's memory."
#~ " This means that MongoDB will use "
#~ "as much free memory as it can, "
#~ "swapping to disk as needed. Deployments"
#~ " with enough memory to fit the "
#~ "application's working data set in RAM"
#~ " will achieve the best performance."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`/faq/diagnostics` for answers to "
#~ "additional questions about MongoDB and "
#~ "Memory use."
#~ msgstr ""

#~ msgid "How do I configure the cache size for MMAPv1?"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB has no configurable cache for"
#~ " MMAPv1 storage engine. MongoDB uses "
#~ "all *free* memory on the system "
#~ "automatically by way of memory-mapped"
#~ " files. Operating systems use the "
#~ "same approach with their file system "
#~ "caches."
#~ msgstr ""

#~ msgid ""
#~ "For the WiredTiger storage engine, you"
#~ " can specify the maximum size of "
#~ "the cache that WiredTiger will use "
#~ "for all data. See "
#~ ":setting:`storage.wiredTiger.engineConfig.cacheSizeGB` and "
#~ ":option:`--wiredTigerCacheSizeGB`."
#~ msgstr ""

#~ msgid ""
#~ "Does MongoDB require a separate caching"
#~ " layer for application-level caching?"
#~ msgstr ""

#~ msgid ""
#~ "No. In MongoDB, a document's "
#~ "representation in the database is "
#~ "similar to its representation in "
#~ "application memory. This means the "
#~ "database already stores the usable form"
#~ " of data, making the data usable "
#~ "in both the persistent store and "
#~ "in the application cache. This "
#~ "eliminates the need for a separate "
#~ "caching layer in the application."
#~ msgstr ""

#~ msgid ""
#~ "This differs from relational databases, "
#~ "where caching data is more expensive."
#~ " Relational databases must transform data"
#~ " into object representations that "
#~ "applications can read and must store "
#~ "the transformed data in a separate "
#~ "cache: if these transformation from data"
#~ " to application objects require joins, "
#~ "this process increases the overhead "
#~ "related to using the database which "
#~ "increases the importance of the caching"
#~ " layer."
#~ msgstr ""

#~ msgid ""
#~ "Yes. MongoDB keeps all of the most"
#~ " recently used data in RAM. If "
#~ "you have created indexes for your "
#~ "queries and your working data set "
#~ "fits in RAM, MongoDB serves all "
#~ "queries from memory."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB does not implement a query "
#~ "cache: MongoDB serves all queries "
#~ "directly from the indexes and/or data"
#~ " files."
#~ msgstr ""

#~ msgid "Are writes written to disk immediately, or lazily?"
#~ msgstr ""

#~ msgid ""
#~ "Writes are physically written to the "
#~ ":doc:`journal </core/journaling>` within 100 "
#~ "milliseconds, by default. At that point,"
#~ " the write is \"durable\" in the "
#~ "sense that after a pull-plug-"
#~ "from-wall event, the data will still"
#~ " be recoverable after a hard restart."
#~ " See :setting:`~storage.journal.commitIntervalMs` for"
#~ " more information on the journal "
#~ "commit window."
#~ msgstr ""

#~ msgid ""
#~ "While the journal commit is nearly "
#~ "instant, MongoDB writes to the data "
#~ "files lazily. MongoDB may wait to "
#~ "write data to the data files for"
#~ " as much as one minute by "
#~ "default. This does not affect "
#~ "durability, as the journal has enough"
#~ " information to ensure crash recovery. "
#~ "To change the interval for writing "
#~ "to the data files, see "
#~ ":setting:`~storage.syncPeriodSecs`."
#~ msgstr ""

#~ msgid "What language is MongoDB written in?"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB is implemented in C++. "
#~ ":term:`Drivers <driver>` and client libraries"
#~ " are typically written in their "
#~ "respective languages, although some drivers"
#~ " use C extensions for better "
#~ "performance."
#~ msgstr ""

#~ msgid "What are the limitations of 32-bit versions of MongoDB?"
#~ msgstr ""

#~ msgid ""
#~ "Commercial support is no longer provided"
#~ " for MongoDB on 32-bit platforms "
#~ "(Linux and Windows). See :ref:`3.0"
#~ "-compatibility-platform-support`."
#~ msgstr ""

#~ msgid ""
#~ "32-bit versions of MongoDB do **not**"
#~ " support the WiredTiger storage engine."
#~ msgstr ""

#~ msgid ""
#~ "When running a 32-bit build of "
#~ "MongoDB, the total storage size for "
#~ "the server, including data and indexes,"
#~ " is 2 gigabytes. For this reason, "
#~ "do not deploy MongoDB to production "
#~ "on 32-bit machines."
#~ msgstr ""

#~ msgid ""
#~ "If you're running a 64-bit build "
#~ "of MongoDB, there's virtually no limit"
#~ " to storage size. For production "
#~ "deployments, 64-bit builds and operating "
#~ "systems are strongly recommended."
#~ msgstr ""

#~ msgid ""
#~ "\"`Blog Post: 32-bit Limitations "
#~ "<http://blog.mongodb.org/post/137788967/32-bit-limitations>`_\""
#~ msgstr ""

#~ msgid ""
#~ "32-bit builds disable :term:`journaling "
#~ "<journal>` by default because journaling "
#~ "further limits the maximum amount of "
#~ "data that the database can store."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB does not support multi-document"
#~ " transactions. However, MongoDB does "
#~ "provide atomic operations on a single"
#~ " document."
#~ msgstr ""

#~ msgid ""
#~ "For more details on MongoDB's isolation"
#~ " guarantees and behavior under concurrency,"
#~ " see :doc:`/faq/concurrency`."
#~ msgstr ""

#~ msgid "On this page"
#~ msgstr ""

#~ msgid ""
#~ "Starting in MongoDB 3.2, however, you"
#~ " can enforce :doc:`document validation "
#~ "rules </core/document-validation>` for a "
#~ "collection during update and insert "
#~ "operations."
#~ msgstr ""

#~ msgid ""
#~ "No. However, MongoDB does support a "
#~ "rich query language of its own. "
#~ "For examples on using MongoDB's query"
#~ " language, see :doc:`/crud`"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB represents queries as :term:`BSON` "
#~ "objects. Typically :doc:`client libraries "
#~ "</applications/drivers>` provide a convenient, "
#~ "injection free, process to build these"
#~ " objects. Consider the following C++ "
#~ "example:"
#~ msgstr ""

