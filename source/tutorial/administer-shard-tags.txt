=================
Manage Shard Tags
=================

.. default-domain:: mongodb

In a sharded cluster, you can use tags to associate specific ranges of
a :term:`shard key` with a specific :term:`shard` or subset of shards.

Tag a Shard
-----------

Associate tags with a particular shard using the
:method:`sh.addShardTag()` method when connected to a :program:`mongos`
instance. A single shard may have multiple tags, and multiple shards
may also have the same tag.

.. example::

   The following example adds the tag ``NYC`` to two shards, and the tags
   ``SFO`` and ``NRT`` to a third shard:

   .. code-block:: javascript

      sh.addShardTag("shard0000", "NYC")
      sh.addShardTag("shard0001", "NYC")
      sh.addShardTag("shard0002", "SFO")
      sh.addShardTag("shard0002", "NRT")

You may remove tags from a particular shard using the
:method:`sh.removeShardTag()` method when connected to a
:program:`mongos` instance, as in the following example, which removes
the ``NRT`` tag from a shard:

.. code-block:: javascript

   sh.removeShardTag("shard0002", "NRT")

Tag a Shard Key Range
---------------------

To assign a tag to a range of shard keys use the
:method:`sh.addTagRange()` method when connected to a
:program:`mongos` instance. Any given shard key range may only have
*one* assigned tag. You cannot overlap defined ranges, or tag the same
range more than once.

.. example::

   Given a collection named ``users`` in the ``records`` database,
   sharded by the ``zipcode`` field. The following operations assign:

   - two ranges of zip codes in Manhattan and Brooklyn the ``NYC`` tag

   - one range of zip codes in San Francisco the ``SFO`` tag

   .. code-block:: javascript

      sh.addTagRange("records.users", { zipcode: "10001" }, { zipcode: "10281" }, "NYC")
      sh.addTagRange("records.users", { zipcode: "11201" }, { zipcode: "11240" }, "NYC")
      sh.addTagRange("records.users", { zipcode: "94102" }, { zipcode: "94135" }, "SFO")

.. note::

   Shard ranges are always inclusive of the lower value and exclusive
   of the upper boundary.

Remove a Tag From a Shard Key Range
-----------------------------------

The :program:`mongod` does not provide a helper for removing a tag
range. You may delete tag assignment from a shard key range by removing
the corresponding document from the :data:`~config.tags` collection of
the ``config`` database.

Each document in the :data:`~config.tags` holds the :term:`namespace`
of the sharded collection and a minimum shard key value.

.. example::

   The following example removes the ``NYC`` tag assignment for the
   range of zip codes within Manhattan:

   .. code-block:: javascript

      use config
      db.tags.remove({ _id: { ns: "records.users", min: { zipcode: "10001" }}, tag: "NYC" })

View Existing Shard Tags
------------------------

The output from :method:`sh.status()` lists tags associated with a
shard, if any, for each shard. A shard's tags exist in the shard's
document in the :data:`~config.shards` collection of the ``config``
database. To return all shards with a specific tag, use a sequence of
operations that resemble the following, which will return only those
shards tagged with ``NYC``:

.. code-block:: javascript

   use config
   db.shards.find({ tags: "NYC" })

You can find tag ranges for all :term:`namespaces <namespace>` in the
:data:`~config.tags` collection of the ``config`` database. The output
of :method:`sh.status()` displays all tag ranges. To return all shard
key ranges tagged with ``NYC``, use the following sequence of
operations:

.. code-block:: javascript

   use config
   db.tags.find({ tags: "NYC" })
