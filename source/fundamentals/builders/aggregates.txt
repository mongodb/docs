.. _aggregates-builders:

===================
Aggregates Builders
===================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, data insights, compute, atlas

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::

   Atlas Vector Search </fundamentals/builders/vector-search>

Overview
--------

In this guide, you can learn how to use the `Aggregates <{+core-api+}/client/model/Aggregates>`__
class which provides static factory methods that build :manual:`aggregation pipeline
stages </meta/aggregation-quick-reference/#stages>` in the MongoDB Kotlin driver.

For a more thorough introduction to Aggregation, see our :ref:`Aggregation guide <kotlin-aggregation>`.

The examples on this page assume imports for methods of the following classes:

- ``Aggregates``
- ``Filters``
- ``Projections``
- ``Sorts``
- ``Accumulators``

.. code-block:: kotlin

   import com.mongodb.client.model.Aggregates
   import com.mongodb.client.model.Filters
   import com.mongodb.client.model.Projections
   import com.mongodb.client.model.Sorts
   import com.mongodb.client.model.Accumulators

Use these methods to construct pipeline stages and specify them in your
aggregation as a list:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.methods-example.kt
   :language: kotlin

Many ``Aggregation`` examples in this guide use the :atlas:`Atlas sample_mflix.movies dataset </sample-data/sample-mflix>`. The documents in this collection are
modeled by the following ``Movie`` data class for use with the Kotlin driver: 

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.movie-data-class.kt
   :language: kotlin

.. include:: /includes/fundamentals/builders-dataclass.rst

Match
-----

Use the ``match()`` method to create a :manual:`$match </reference/operator/aggregation/match/>`
pipeline stage that matches incoming documents against the specified
query filter, filtering out documents that do not match.

.. tip::

   The filter can be an instance of any class that implements ``Bson``, but it's
   convenient to combine with use of the :ref:`Filters <filters-builders>` class.
   class.

The following example creates a pipeline stage that matches all documents 
in the ``movies`` collection where the
``title`` field is equal to "The Shawshank Redemption":

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.match.kt
   :language: kotlin

Project
-------

Use the ``project()`` method to create a :manual:`$project </reference/operator/aggregation/project/>`
pipeline stage that project specified document fields. Field projection
in aggregation follows the same rules as :doc:`field projection in queries </fundamentals/crud/read-operations/project>`.

.. tip::

   Though the projection can be an instance of any class that implements ``Bson``,
   it's convenient to combine with use of :ref:`Projections <projections-builders>`.


The following example creates a pipeline stage that includes the ``title`` and 
``plot`` fields but excludes the ``_id`` field:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.project.kt
   :language: kotlin

Projecting Computed Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``$project`` stage can project computed fields as well.

The following example creates a pipeline stage that projects the ``rated`` field
into a new field called ``rating``, effectively renaming the field:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.project-computed.kt
   :language: kotlin

Documents
---------

Use the ``documents()`` method to create a
:manual:`$documents </reference/operator/aggregation/documents/>`
pipeline stage that returns literal documents from input values.

.. important::

   If you use a ``$documents`` stage in an aggregation pipeline, it must be the first 
   stage in the pipeline.

The following example creates a pipeline stage that creates 
sample documents in the ``movies`` collection with a ``title`` field: 

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.documents.kt
   :language: kotlin

.. important::

   If you use the ``documents()`` method to provide the input to an aggregation pipeline, 
   you must call the ``aggregate()`` method on a database instead of on a 
   collection.

   .. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.doc-important.kt
      :language: kotlin

Sample
------

Use the ``sample()`` method to create a :manual:`$sample </reference/operator/aggregation/sample/>`
pipeline stage to randomly select documents from input.

The following example creates a pipeline stage that randomly selects 5 documents
from the ``movies`` collection:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.sample.kt
   :language: kotlin

Sort
----

Use the ``sort()`` method to create a  :manual:`$sort </reference/operator/aggregation/sort/>`
pipeline stage to sort by the specified criteria.

.. tip::

   Though the sort criteria can be an instance of any class that
   implements ``Bson``, it's convenient to combine with use of 
   :ref:`Sorts <sorts-builders>`. 

The following example creates a pipeline stage that sorts in descending order according
to the value of the ``year`` field and then in ascending order according to the
value of the ``title`` field:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.sort.kt
   :language: kotlin

Skip
----

Use the ``skip()`` method to create a :manual:`$skip </reference/operator/aggregation/skip/>`
pipeline stage to skip over the specified number of documents before
passing documents into the next stage.

The following example creates a pipeline stage that skips the first ``5`` documents
in the ``movies`` collection:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.skip.kt
   :language: kotlin

Limit
-----

Use the :manual:`$limit </reference/operator/aggregation/limit/>` pipeline stage
to limit the number of documents passed to the next stage.

The following example creates a pipeline stage that limits the number of documents 
returned from the ``movies`` collection to ``4``:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.limit.kt
   :language: kotlin

Lookup
------

Use the ``lookup()`` method to create a :manual:`$lookup </reference/operator/aggregation/lookup/>`
pipeline stage to perform joins and uncorrelated subqueries between two collections.

Left Outer Join
~~~~~~~~~~~~~~~

The following example creates a pipeline stage that performs a left outer
join between the ``movies`` and ``comments`` collections in the sample ``mflix`` 
database:

#. It joins the ``_id`` field from ``movies`` to the ``movie_id`` field in ``comments``
#. It outputs the results in the ``joined_comments`` field

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.lookup.kt
   :language: kotlin

Full Join and Uncorrelated Subqueries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example uses the fictional ``orders`` and ``warehouses`` collections. 
The data is modeled using the following Kotlin data classes: 

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.lookup-data-classes.kt
   :language: kotlin

The example creates a pipeline stage that joins the two collections by the item 
and whether the available quantity in ``inStock`` field is enough to fulfill 
the ``ordered`` quantity:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.lookup-full-join.kt
   :language: kotlin

Group
-----

Use the ``group()`` method to create a :manual:`$group </reference/operator/aggregation/group/>`
pipeline stage to group documents by a specified expression and output a document
for each distinct grouping.

.. tip::

   The driver includes the `Accumulators <{+core-api+}/client/model/Accumulators.html>`__
   class with static factory methods for each of the supported accumulators.

The following example creates a pipeline stage that groups documents 
in the ``orders`` collection by the value of the ``customerId`` field. 
Each group accumulates the sum and average
of the values of the ``ordered`` field into the ``totalQuantity`` and
``averageQuantity`` fields:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.group.kt
   :language: kotlin

Learn more about accumulator operators from the Server manual section
on :manual:`Accumulators </reference/operator/aggregation/#std-label-agg-operators-group-accumulators>`.

.. _kotlin_aggregates_pick_n:

Pick-N Accumulators
-------------------

The pick-n accumulators are aggregation accumulation operators that return
the top and bottom elements given a specific ordering. Use one of the
following builders to create an aggregation accumulation operator:

- :ref:`minN() <kotlin_aggregates_min_n>`
- :ref:`maxN() <kotlin_aggregates_max_n>`
- :ref:`firstN() <kotlin_aggregates_first_n>`
- :ref:`lastN() <kotlin_aggregates_last_n>`
- :ref:`top() <kotlin_aggregates_top>`
- :ref:`topN() <kotlin_aggregates_top_n>`
- :ref:`bottom() <kotlin_aggregates_bottom>`
- :ref:`bottomN() <kotlin_aggregates_bottom_n>`

.. tip::

   You can only perform aggregation operations with these pick-n accumulators
   when running MongoDB v5.2 or later.

Learn which aggregation pipeline stages you can use accumulator operators with
from the Server manual section on
:manual:`Accumulators </reference/operator/aggregation/#std-label-agg-operators-group-accumulators>`.

The pick-n accumulator examples use documents from the ``movies`` collection 
in the ``sample-mflix`` database.

.. _kotlin_aggregates_min_n:

MinN
~~~~

The ``minN()`` builder creates the :manual:`$minN </reference/operator/aggregation/minN/>`
accumulator which returns data from documents that contain the ``n`` lowest
values of a grouping.

.. tip::

   The ``$minN`` and ``$bottomN`` accumulators can perform similar tasks.
   See
   :manual:`Comparison of $minN and $bottomN Accumulators </reference/operator/aggregation/minN/#comparison-of--minn-and--bottomn-accumulators>`
   for recommended usage of each.

The following example demonstrates how to use the ``minN()`` method to return
the lowest three ``imdb.rating`` values for movies, grouped by ``year``:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.minN.kt
   :language: kotlin

See the `minN() API documentation <{+core-api+}/client/model/Accumulators.html#minN(java.lang.String,InExpression,NExpression)>`__
for more information.

.. _kotlin_aggregates_max_n:

MaxN
~~~~

The ``maxN()`` accumulator returns data from documents that contain the ``n``
highest values of a grouping.

The following example demonstrates how to use the ``maxN()`` method to
return the highest two ``imdb.rating`` values for movies, grouped by ``year``:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.maxN.kt
   :language: kotlin

See the `maxN() API documentation <{+core-api+}/client/model/Accumulators.html#maxN(java.lang.String,InExpression,NExpression)>`__
for more information.

.. _kotlin_aggregates_first_n:

FirstN
~~~~~~

The ``firstN()`` accumulator returns data from the first ``n`` documents in
each grouping for the specified sort order.

.. tip::

   The ``$firstN`` and ``$topN`` accumulators can perform similar tasks.
   See
   :manual:`Comparison of $firstN and $topN Accumulators </reference/operator/aggregation/firstN/#comparison-of--firstn-and--topn-accumulators>`
   for recommended usage of each.

The following example demonstrates how to use the ``firstN()`` method to
return the first two movie ``title`` values, based on the order they came
into the stage, grouped by ``year``:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.firstN.kt
   :language: kotlin

See the `firstN() API documentation <{+core-api+}/client/model/Accumulators.html#firstN(java.lang.String,InExpression,NExpression)>`__
for more information.

.. _kotlin_aggregates_last_n:

LastN
~~~~~

The ``lastN()`` accumulator returns data from the last ``n`` documents in
each grouping for the specified sort order.

The following example demonstrates how to use the ``lastN()`` method to show
the last three movie ``title`` values, based on the the order they came into
the stage, grouped by ``year``:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.lastN.kt
   :language: kotlin

See the `lastN() API documentation <{+core-api+}/client/model/Accumulators.html#lastN(java.lang.String,InExpression,NExpression)>`__
for more information.

.. _kotlin_aggregates_top:

Top
~~~

The ``top()`` accumulator returns data from the first document in a group
based on the specified sort order.

The following example demonstrates how to use the ``top()`` method to return
the ``title`` and ``imdb.rating`` values for the top rated movies based on the
``imdb.rating``, grouped by ``year``.

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.top.kt
   :language: kotlin

See the `top() API documentation <{+core-api+}/client/model/Accumulators.html#top(java.lang.String,org.bson.conversions.Bson,OutExpression)>`__
for more information.

.. _kotlin_aggregates_top_n:

TopN
~~~~

The ``topN()`` accumulator returns data from documents that contain the
highest ``n`` values for the specified field.

.. tip::

   The ``$firstN`` and ``$topN`` accumulators can perform similar tasks.
   See
   :manual:`Comparison of $firstN and $topN Accumulators </reference/operator/aggregation/firstN/#comparison-of--firstn-and--topn-accumulators>`
   for recommended usage of each.

The following example demonstrates how to use the ``topN()`` method to return
the ``title`` and ``runtime`` values of the three longest movies based on the
``runtime`` values, grouped by ``year``.

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.topN.kt
   :language: kotlin

See the `topN() API documentation <{+core-api+}/client/model/Accumulators.html#topN(java.lang.String,org.bson.conversions.Bson,OutExpression,NExpression)>`__
for more information.

.. _kotlin_aggregates_bottom:

Bottom
~~~~~~

The ``bottom()`` accumulator returns data from the last document in a group
based on the specified sort order.

The following example demonstrates how to use the ``bottom()`` method to
return the ``title`` and ``runtime`` values of the shortest movie based on the
``runtime`` value, grouped by ``year``.

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.bottom.kt
   :language: kotlin

See the `bottom() API documentation <{+core-api+}/client/model/Accumulators.html#bottom(java.lang.String,org.bson.conversions.Bson,OutExpression)>`__
for more information.

.. _kotlin_aggregates_bottom_n:

BottomN
~~~~~~~

The ``bottomN()`` accumulator returns data from documents that contain the
lowest ``n`` values for the specified field.

.. tip::

   The ``$minN`` and ``$bottomN`` accumulators can perform similar tasks.
   See :manual:`Comparison of $minN and $bottomN Accumulators </reference/operator/aggregation/minN/#comparison-of--minn-and--bottomn-accumulators>`
   for recommended usage of each.

The following example demonstrates how to use the ``bottomN()`` method to
return the ``title`` and ``imdb.rating`` values of the two lowest rated movies
based on the ``imdb.rating`` value, grouped by ``year``:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.bottomN.kt
   :language: kotlin

See the `bottomN() API documentation <{+core-api+}/client/model/Accumulators.html#bottomN(java.lang.String,org.bson.conversions.Bson,OutExpression,NExpression)>`__
for more information.

Unwind
------

Use the ``unwind()`` method to create an :manual:`$unwind </reference/operator/aggregation/unwind/>`
pipeline stage to deconstruct an array field from input documents, creating
an output document for each array element.

The following example creates a document for each element in the ``lowestRatedTwoMovies`` array:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.unwind.kt
   :language: kotlin

To preserve documents that have missing or ``null``
values for the array field, or where array is empty:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.unwind-options.kt
   :language: kotlin

To include the array index (in this example, in a field called ``"position"``):

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.unwind-options-array.kt
   :language: kotlin

Out
---

Use the ``out()`` method to create an :manual:`$out </reference/operator/aggregation/out/>`
pipeline stage that writes all documents to the specified collection in
the same database.

.. important::

   The ``$out`` stage must be the last stage in any aggregation pipeline.

The following example writes the results of the pipeline to the ``classic_movies``
collection:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.out.kt
   :language: kotlin

Merge
-----

Use the ``merge()`` method to create a :manual:`$merge </reference/operator/aggregation/merge/>`
pipeline stage that merges all documents into the specified collection.

.. important::

   The ``$merge`` stage must be the last stage in any aggregation pipeline.

The following example merges the pipeline into the ``nineties_movies`` collection 
using the default options:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.merge.kt
   :language: kotlin

The following example merges the pipeline into the ``movie_ratings`` collection 
in the ``aggregation`` database using some non-default options that specify to 
replace the document if both ``year`` and ``title`` match, otherwise insert the
document:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.merge-options.kt
   :language: kotlin

GraphLookup
-----------

Use the ``graphLookup()`` method to create a :manual:`$graphLookup </reference/operator/aggregation/graphLookup/>`
pipeline stage that performs a recursive search on a specified collection to match
a specified field in one document to a specified field of another document.

The following example uses the ``contacts`` collection. The data is modeled
using the following Kotlin data class: 

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.graph-data-class.kt
   :language: kotlin

The example computes the reporting graph for users in the
``contact`` collection, recursively matching the value in the ``friends`` field
to the ``name`` field:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.graph-lookup.kt
   :language: kotlin

Using ``GraphLookupOptions``, you can specify the depth to recurse and
the name of the depth field, if desired. In this example, ``$graphLookup`` will
recurse up to two times, and create a field called ``degrees`` with the
recursion depth information for every document.

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.graph-lookup-depth.kt
   :language: kotlin

Using ``GraphLookupOptions``, you can specify a filter that documents must match
in order for MongoDB to include them in your search. In this
example, only links with "golf" in their ``hobbies`` field will be included:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.graph-lookup-options.kt
   :language: kotlin

SortByCount
-----------

Use the ``sortByCount()`` method to create a :manual:`$sortByCount </reference/operator/aggregation/sortByCount/>`
pipeline stage that groups documents by a given expression and then sorts
these groups by count in descending order.

.. tip::

   The ``$sortByCount`` stage is identical to a ``$group`` stage with a
   ``$sum`` accumulator followed by a ``$sort`` stage.

   .. code-block:: json

      [
          { "$group": { "_id": <expression to group on>, "count": { "$sum": 1 } } },
          { "$sort": { "count": -1 } }
      ]

The following example groups documents in the ``movies`` collection by the  
``genres`` field and computes the count for each distinct value:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.sort-by-count.kt
   :language: kotlin

ReplaceRoot
-----------

Use the ``replaceRoot()`` method to create a :manual:`$replaceRoot </reference/operator/aggregation/replaceRoot/>`
pipeline stage that replaces each input document with the specified document.

The following example uses a fictional ``books`` collection that contains data 
modeled using the following Kotlin data class: 

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.replace-root-data-class.kt
   :language: kotlin

Each input document is replaced by the nested document in the 
``spanishTranslation`` field:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.replace-root.kt
   :language: kotlin

AddFields
---------

Use the ``addFields()`` method to create an :manual:`$addFields </reference/operator/aggregation/addFields/>`
pipeline stage that adds new fields to documents.

.. tip::

   Use ``$addFields`` when you do not want to project field inclusion
   or exclusion.

The following example adds two new fields, ``watched`` and ``type``, to the 
input documents in the ``movie`` collection:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.add-fields.kt
   :language: kotlin

Count
-----

Use the ``count()`` method to create a :manual:`$count </reference/operator/aggregation/count/>`
pipeline stage that counts the number of documents that enter the stage, and assigns
that value to a specified field name. If you do not specify a field,
``count()`` defaults the field name to "count".

.. tip::

   The ``$count`` stage is syntactic sugar for:

   .. code-block:: json

      { "$group":{ "_id": 0, "count": { "$sum" : 1 } } }

The following example creates a pipeline stage that outputs the count of incoming
documents in a field called "total":

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.count.kt
   :language: kotlin

Bucket
------

Use the ``bucket()`` method to create a :manual:`$bucket </reference/operator/aggregation/bucket/>`
pipeline stage that automates the bucketing of data around predefined boundary
values.

The following examples use data modeled with the following Kotlin data class:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.bucket-data-class.kt
   :language: kotlin

This example creates a pipeline stage that groups incoming documents based
on the value of their ``screenSize`` field, inclusive of the lower boundary
and exclusive of the upper boundary:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.bucket.kt
   :language: kotlin

Use the ``BucketOptions`` class to specify a default bucket for values
outside of the specified boundaries, and to specify additional accumulators.

The following example creates a pipeline stage that groups incoming documents based
on the value of their ``screenSize`` field, counting the number of documents
that fall within each bucket, pushing the value of ``screenSize`` into a
field called ``matches``, and capturing any screen sizes greater than "70"
into a bucket called "monster" for monstrously large screen sizes:

.. tip::

   The driver includes the `Accumulators <{+core-api+}/client/model/Accumulators.html>`__
   class with static factory methods for each of the supported accumulators.

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.bucket-options.kt
   :language: kotlin

BucketAuto
----------

Use the ``bucketAuto()`` method to create a :manual:`$bucketAuto </reference/operator/aggregation/bucketAuto/>`
pipeline stage that automatically determines the boundaries of each bucket
in its attempt to distribute the documents evenly into a specified number of buckets.

The following examples use data modeled with the following Kotlin data class:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.bucket-data-class.kt
   :language: kotlin

This example creates a pipeline stage that will attempt to create and evenly
distribute documents into 5 buckets using the value of their ``price`` field:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.bucket-auto.kt
   :language: kotlin

Use the ``BucketAutoOptions`` class to specify a :wikipedia:`preferred number <Preferred_number>`
based scheme to set boundary values, and specify additional accumulators.

The following example creates a pipeline stage that will attempt to create and evenly
distribute documents into 5 buckets using the value of their ``price`` field,
setting the bucket boundaries at powers of 2 (2, 4, 8, 16, ...). It also counts
the number of documents in each bucket, and calculates their average ``price``
in a new field called ``avgPrice``:

.. tip::

   The driver includes the `Accumulators <{+core-api+}/client/model/Accumulators.html>`__
   class with static factory methods for each of the supported accumulators.

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.bucket-auto-options.kt
   :language: kotlin

Facet
-----

Use the ``facet()`` method to create a :manual:`$facet </reference/operator/aggregation/facet/>`
pipeline stage that allows for the definition of parallel pipelines.

The following examples use data modeled with the following Kotlin data class:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.bucket-data-class.kt
   :language: kotlin

This example creates a pipeline stage that executes two parallel aggregations:

- The first aggregation distributes incoming documents into 5 groups according to
  their ``screenSize`` field.

- The second aggregation counts all manufacturers and returns their count, limited
  to the top 5.

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.facet.kt
   :language: kotlin

.. _builders-aggregates-setWindowFields:

SetWindowFields
---------------

Use the ``setWindowFields()`` method to create a :manual:`$setWindowFields </reference/operator/aggregation/setWindowFields/>`
pipeline stage that allows using window operators to perform operations
on a specified span of documents in a collection.

.. tip:: Window Functions

   The driver includes the `Windows <{+core-api+}/client/model/Windows.html>`__
   class with static factory methods for building windowed computations.

The following example uses a fictional ``weather`` collection using data modeled 
with the following Kotlin data class: 

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.window-data-class.kt
   :language: kotlin

The example creates a pipeline stage that computes the
accumulated rainfall and the average temperature over the past month for
each locality from more fine-grained measurements presented in the ``rainfall``
and ``temperature`` fields:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.window.kt
   :language: kotlin

Densify
-------

Use the ``densify()`` method to create a
`$densify <https://www.mongodb.com/docs/rapid/reference/operator/aggregation/densify/>`__
pipeline stage that generates a sequence of documents to span a specified
interval.

.. tip::

   You can use the ``$densify()`` aggregation stage only when running
   MongoDB v5.1 or later.

Consider the following documents retrieved from the :atlas:`Atlas sample weather dataset </sample-data/sample-weather>`
that contain measurements for a similar ``position`` field, spaced one hour
apart:

.. code-block:: none
   :copyable: false

   Document{{ _id=5553a..., position=Document{{type=Point, coordinates=[-47.9, 47.6]}}, ts=Mon Mar 05 08:00:00 EST 1984, ... }}
   Document{{ _id=5553b..., position=Document{{type=Point, coordinates=[-47.9, 47.6]}}, ts=Mon Mar 05 09:00:00 EST 1984, ... }}

These documents are modeled using the following Kotlin data class:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.densify-data-class.kt
   :language: kotlin

Suppose you needed to create a pipeline stage that performs the following
actions on these documents:

- Add a document at every 15-minute interval for which a ``ts`` value does not
  already exist.
- Group the documents by the ``position`` field.

The call to the ``densify()`` aggregation stage builder that accomplishes
these actions should resemble the following:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.densify.kt
   :language: kotlin

The following output highlights the documents generated by the aggregate stage
which contain ``ts`` values every 15 minutes between the existing documents:

.. code-block:: none
   :emphasize-lines: 2-4
   :copyable: false

   Document{{ _id=5553a..., position=Document{{type=Point, coordinates=[-47.9, 47.6]}}, ts=Mon Mar 05 08:00:00 EST 1984, ... }}
   Document{{ position=Document{{coordinates=[-47.9, 47.6]}}, ts=Mon Mar 05 08:15:00 EST 1984 }}
   Document{{ position=Document{{coordinates=[-47.9, 47.6]}}, ts=Mon Mar 05 08:30:00 EST 1984 }}
   Document{{ position=Document{{coordinates=[-47.9, 47.6]}}, ts=Mon Mar 05 08:45:00 EST 1984 }}
   Document{{ _id=5553b..., position=Document{{type=Point, coordinates=[-47.9, 47.6]}}, ts=Mon Mar 05 09:00:00 EST 1984, ... }}

See the `densify package API documentation <{+core-api+}/client/model/densify/package-summary.html>`__
for more information.

Fill
----

Use the ``fill()`` method to create a
`$fill <https://www.mongodb.com/docs/upcoming/reference/operator/aggregation/fill/>`__
pipeline stage that populates ``null`` and missing field values.

.. tip::

   You can use the ``$fill()`` aggregation stage only when running
   MongoDB v5.3 or later.

Consider the following documents that contain temperature and air pressure
measurements at an hourly interval:

.. code-block:: none
   :copyable: false

   Document{{_id=6308a..., hour=1, temperature=23C, air_pressure=29.74}}
   Document{{_id=6308b..., hour=2, temperature=23.5C}}
   Document{{_id=6308c..., hour=3, temperature=null, air_pressure=29.76}}

These documents are modeled using the following Kotlin data class:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.fill-data-class.kt
   :language: kotlin

Suppose you needed to populate missing temperature and air pressure
data points in the documents as follows:

- Populate the ``air_pressure`` field for hour "2" using linear interpolation
  to calculate the value.
- Set the missing ``temperature`` value to "23.6C" for hour "3".

The call to the ``fill()`` aggregation stage builder that accomplishes
these actions resembles the following:

.. io-code-block::

   .. input:: /examples/generated/AggregatesBuilderTest.snippet.fill.kt
      :language:  kotlin

   .. output:: 
      :language:  console
      :emphasize-lines: 2-3

      Weather(id=6308a..., hour=1, temperature=23C, air_pressure=29.74)
      Weather(id=6308b..., hour=2, temperature=23.5C, air_pressure=29.75)
      Weather(id=6308b..., hour=3, temperature=23.6C, air_pressure=29.76)

See the `fill package API documentation <{+core-api+}/client/model/fill/package-summary.html>`__
for more information.

Atlas Full-Text Search
----------------------

Use the ``search()`` method to create a :manual:`$search </reference/operator/aggregation/search/>`
pipeline stage that specifies a full-text search of one or more fields.

.. tip:: Only Available on Atlas for MongoDB v4.2 and later

   This aggregation pipeline operator is only available for collections hosted
   on :atlas:`MongoDB Atlas </>` clusters running v4.2 or later that are
   covered by an :atlas:`Atlas search index </reference/atlas-search/index-definitions/>`.
   Learn more about the required setup and the functionality of this operator
   from the :ref:`Atlas Search <fts-top-ref>` documentation.

The following example creates a pipeline stage that searches the ``title``
field in the ``movies`` collection for text that contains the word "Future":

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.full-text-search.kt
   :language: kotlin

Learn more about the builders from the
`search package API documentation <{+core-api+}/client/model/search/package-summary.html>`__.

Atlas Search Metadata
---------------------

Use the ``searchMeta()`` method to create a
:manual:`$searchMeta </reference/operator/aggregation/searchMeta/>`
pipeline stage which returns only the metadata part of the results from
Atlas full-text search queries.

.. tip:: Only Available on Atlas for MongoDB v4.4.11 and later

   This aggregation pipeline operator is only available
   on :atlas:`MongoDB Atlas </>` clusters running v4.4.11 and later. For a
   detailed list of version availability, see the MongoDB Atlas documentation
   on :atlas:`$searchMeta </atlas-search/query-syntax/#-searchmeta>`.

The following example shows the ``count`` metadata for an Atlas search
aggregation stage:

.. literalinclude:: /examples/generated/AggregatesBuilderTest.snippet.search-meta.kt
   :language: kotlin

Learn more about this helper from the
`searchMeta() API documentation <{+core-api+}/client/model/Aggregates.html#searchMeta(com.mongodb.client.model.search.SearchCollector)>`__.
