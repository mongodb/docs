======================
db.collection.update()
======================

.. default-domain:: mongodb

Definition
----------

.. method:: db.collection.update(query, update, options)

   Modifies an existing document or documents in a collection. By
   default, the :method:`~db.collection.update()` method updates a
   **single** document. If the ``multi`` option is set to ``true``, the
   method updates all documents that match the query criteria.

   .. versionchanged:: 2.2
      The :method:`~db.collection.update()` method has the following form:

   .. code-block:: javascript

      db.collection.update(
         <query>,
         <update>,
         { upsert: <boolean>, multi: <boolean> }
      )

   Prior to version 2.2, the :method:`~db.collection.update()` method
   has the following form:

   .. code-block:: javascript

      db.collection.update( <query>, <update>, <upsert>, <multi> )

   The :method:`~db.collection.update()` method takes the following
   parameters:

   .. include:: /reference/method/db.collection.update-param.rst

   The :method:`~db.collection.update()` method either updates specific
   fields in the existing document or replaces the document. The method
   updates specific fields if the ``<update>`` parameter contains only
   :ref:`update operator <update-operators>` expressions, such as a
   :update:`$set` operator expression. Otherwise the method replaces
   the existing document.

   To update fields in subdocuments, use :term:`dot notation`.

   The :method:`~db.collection.update()` method can modify the
   name of a ``field`` using the :update:`$rename` operator.

.. _update-parameter:

Update Parameter
~~~~~~~~~~~~~~~~

If the ``<update>`` document contains :ref:`update operator
<update-operators>` expressions, such those using the
:update:`$set` operator, then:

- The ``<update>`` document must contain *only* :ref:`update operator
  <update-operators>` expressions.

- The :method:`~db.collection.update()` method updates only the
  corresponding fields in the document. For an example, see
  :ref:`example-update-specific-fields`.

If the ``<update>`` document contains *only* ``field:value``
expressions, then:

- The :method:`~db.collection.update()` method *replaces* the matching
  document with the ``<update>`` document. The
  :method:`~db.collection.update()` method *does not* replace the
  ``_id`` value. For an example, see
  :ref:`example-update-replace-fields`.

- :method:`~db.collection.update()` *cannot* :ref:`update multiple
  documents <multi-parameter>`.

.. _upsert-parameter:

Upsert Parameter
~~~~~~~~~~~~~~~~

In MongoDB versions 2.2 and later, the *upsert* parameter has the
following form:

.. code-block:: javascript

   upsert : true|false

Prior to version 2.2, the ``upsert`` parameter is a positional boolean.
To enable, specify ``true`` as the third parameter to
:method:`~db.collection.update()`.

Upsert Use
``````````

If ``upsert`` is ``true`` and if no document matches the query
criteria, :method:`~db.collection.update()` inserts a *single* document.
The *upsert* creates the new document with either:

- The fields and values of the ``<update>`` parameter, or

- The fields and values of the both the ``<query>`` and ``<update>``
  parameters. The *upsert* creates a document with data from both
  ``<query>`` and ``<update>`` if the ``<update>`` parameter contains
  *only* :ref:`update operator <update-operators>` expressions.

Use Unique Indexes
``````````````````

.. warning:: To avoid inserting the same document more than once,
   only use ``upsert: true`` if the ``query`` field is uniquely
   indexed.

Given a collection named ``people`` where no documents have a
``name`` field that holds the value ``Andy``. Consider when multiple
clients issue the following *update* operation at the same time. The
following operation becomes an ``insert`` because the ``upsert``
flag is ``true``.:

.. code-block:: javascript

   db.people.update(
      { name: "Andy" },
      {
         name: "Andy",
         rating: 1,
         score: 1
      },
      { upsert: true }
   )

If all :method:`~db.collection.update()` operations complete the
``query`` portion before any client successfully inserts data,
**and** there is no unique index on the ``name`` field, then each update
operation may perform an insert.

To prevent MongoDB from inserting the same document more than once,
create a :ref:`unique index <index-type-unique>` on the ``name``
field. With a unique index, if an applications issues a group of upsert
operations, *Exactly one* :method:`~db.collection.update()` would
successfully insert a new document. 

The remaining operations would either: 

- update the newly inserted document, or

- fail when they attempted to insert a duplicate.
  
  If the operation fails because of a duplicate index key error,
  applications may retry the operation which will succeed as an update
  operation.

.. _multi-parameter:

Multi Parameter
~~~~~~~~~~~~~~~

In MongoDB versions 2.2 and later, the ``multi`` parameter has the
following form:

.. code-block:: javascript

   multi : true|false

Prior to version 2.2, the ``multi`` parameter is a positional boolean.
To enable the multiple updates, specify ``true`` as the fourth parameter
to :method:`~db.collection.update()`.

If ``multi`` is set to ``true``, the :method:`~db.collection.update()`
method updates all documents that meet the ``<query>`` criteria. The
``multi`` update operation may interleave with other write operations.
For unsharded collections, you can override this behavior with the
:update:`$isolated` isolation operator, which isolates the update
operation and blocks other write operations during the update.

If the :ref:`\<update\> <update-parameter>` document contains *only*
``field:value`` expressions, then :method:`~db.collection.update()`
*cannot* update multiple documents.

For an example, see :ref:`example-update-multi`.

Examples
--------

The following examples use the **MongoDB version 2.2 interface** to
specify options in the document form.

.. _example-update-specific-fields:

Update Specific Fields
~~~~~~~~~~~~~~~~~~~~~~

To update specific fields in a document, use :ref:`update operators
<update-operators>` in the ``<update>`` parameter. For example, given a
``books`` collection with the following document:

.. code-block:: javascript

   { "_id" : 11, "item" : "Divine Comedy", "stock" : 2 }

The following operation uses the :update:`$set` and :update:`$inc`
operators to add a ``price`` field and to increment ``stock`` by ``5``.

.. code-block:: javascript

   db.books.update(
      { item: "Divine Comedy" },
      {
         $set: { price: 18 },
         $inc: { stock: 5 }
      }
   )

The updated document is now the following:

.. code-block:: javascript

   { "_id" : 11, "item" : "Divine Comedy", "price" : 18, "stock" : 7 }

Update Specific Fields in Subdocuments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use :term:`dot notation` to update values in subdocuments. The following
example, which uses the :doc:`bios collection
</reference/bios-example-collection>`, queries for the document with
``_id`` equal to ``1`` and updates the value of the field ``middle`` in
the subdocument ``name``:

.. code-block:: javascript

   db.bios.update( { _id: 1 }, { $set: { "name.middle": "Warner" } } )

Add New Fields
~~~~~~~~~~~~~~

If the ``<update>`` parameter contains fields not currently in the
document, the :method:`~db.collection.update()` method adds the new
fields to the document. The following operation adds two new fields:
``mbranch`` and ``aka``. The operation adds ``aka`` in the subdocument
``name``:

.. code-block:: javascript

   db.bios.update(
      { _id: 3 },
      { $set: {
            mbranch: "Navy",
            "name.aka": "Amazing Grace"
         }
      }
   )

Remove Fields
~~~~~~~~~~~~~

The following operation uses the :update:`$unset` operator to remove
the ``birth`` field from the document that has ``_id`` equal to ``3``:

.. code-block:: javascript

   db.bios.update( { _id: 3 }, { $unset: { birth: 1 } } )

.. _example-update-replace-fields:

Replace All Fields
~~~~~~~~~~~~~~~~~~

Given the following document in the ``books`` collection:

.. code-block:: javascript

   {
       "_id" : 22,
       "item" : "The Banquet",
       "author" : "Dante",
       "price" : 20,
       "stock" : 4
   }

The following operation passes an ``<update>`` document that contains
only field and value pairs, which means the document replaces all the
fields in the original document. The operation *does not* replace the
``_id`` value. The operation contains the same value for the ``item``
field in both the ``<query>`` and ``<update>`` documents, which means
the field does not change:

.. code-block:: javascript

   db.books.update(
      { item: "The Banquet" },
      { item: "The Banquet", price: 19 , stock: 3 }
   )

The operation creates the following new document. The operation removed
the ``author`` field and changed the values of the ``price`` and
``stock`` fields:

.. code-block:: javascript

   {
       "_id" : 22,
       "item" : "The Banquet",
       "price" : 19,
       "stock" : 3
   }

In the next example, which uses the :doc:`bios collection
</reference/bios-example-collection>`, the operation changes all values
for the document *including the value used to locate the document*. The
operation locates a document by querying for ``name`` set to ``{ first:
"John", last: "McCarthy" }`` and then issues a replacement document that
includes the ``name`` field set to ``{ first: "Ken", last: "Iverson"
}``.

.. code-block:: javascript

   db.bios.update(
      { name: { first: "John", last: "McCarthy" } },
      {
        name: { first: "Ken", last: "Iverson" },
        birth: new Date("Dec 17, 1941"),
        died: new Date("Oct 19, 2004"),
        contribs: [ "APL", "J" ],
        awards: [
                  { award: "Turing Award",
                    year: 1979,
                    by: "ACM" },
                  { award: "Harry H. Goode Memorial Award",
                    year: 1975,
                    by: "IEEE Computer Society" },
                  { award: "IBM Fellow",
                    year: 1970,
                    by: "IBM" }
            ]
      }
   )

.. _example-update-upsert:

Insert a New Document if No Match Exists (Upsert)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following command sets the *upsert* option to ``true``
[#previous-versions-upsert]_ so that :method:`~db.collection.update()`
creates a new document in the ``books`` collection if no document
matches the ``<query>`` parameter:

.. code-block:: javascript

   db.books.update( { item: "The New Life" },
                    { item: "The New Life",
                      author: "Dante",
                      price: 15 },
                    { upsert: true }
                  )

If no document matches the ``<query>`` parameter, the *upsert* inserts
a document with the fields and values of the ``<update>`` parameter and
a new unique ``ObjectId`` for the ``_id`` field:

.. code-block:: javascript

   {
       "_id" : ObjectId("51e5990c95098ed69d4a89f2"),
       "author" : "Dante",
       "item" : "The New Life",
       "price" : 15
   }

In the next example, the ``<update>`` parameter includes only
:ref:`update operators <update-operators>`. If no document matches the
``<query>`` parameter, the *upsert* inserts a document with the fields
and values of the both the ``<query>`` and ``<update>`` parameters:

.. code-block:: javascript

   db.bios.update(
      {
         _id: 7,
         name: { first: "Ken", last: "Thompson" }
      },
      {
         $set: {
            birth: new Date("Feb 04, 1943"),
            contribs: [ "UNIX", "C", "B", "UTF-8" ],
            awards: [
               {
                  award: "Turing Award",
                  year: 1983,
                  by: "ACM"
               },
               {
                  award: "IEEE Richard W. Hamming Medal",
                  year: 1990,
                  by: "IEEE"
               },
               {
                  award: "National Medal of Technology",
                  year: 1998,
                  by: "United States"
               },
               {
                  award: "Tsutomu Kanai Award",
                  year: 1999,
                  by: "IEEE"
               },
               {
                  award: "Japan Prize",
                  year: 2011,
                  by: "The Japan Prize Foundation"
               }
            ]  // end of awards
         } // end of $set
      }, // end of update document
      { upsert: true }
   )

.. [#previous-versions-upsert]
   .. include:: /includes/fact-upsert-multi-options.rst

.. _example-update-multi:

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

To update multiple documents, set the ``multi`` option to ``true``
[#previous-versions-multi]_. The following example queries the
:doc:`bios collection </reference/bios-example-collection>` for all
documents where ``awards.award`` is set to ``Turing``. The update sets
the ``turing`` field to ``true``:

.. code-block:: javascript

   db.bios.update(
      { "awards.award": "Turing" },
      { $set: { turing: true } },
      { multi: true }
   )

.. [#previous-versions-multi]
   .. include:: /includes/fact-upsert-multi-options.rst

Combine the Upsert and Multi Parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Given a ``books`` collection that includes the following documents:

.. code-block:: javascript

   {
       "_id" : 11,
       "author" : "Dante",
       "item" : "Divine Comedy",
       "price" : 18 }
   {
       "_id" : 22,
       "author" : "Dante",
       "item" : "The Banquet",
       "price" : 19 }
   {
       "_id" : 33,
       "author" : "Dante",
       "item" : "Monarchia",
       "price" : 14
   }

The following command uses the ``multi`` parameter to update all
documents where ``author`` is ``"Dante"`` and uses the *upsert*
parameter to create a new document if no such documents are found
[#previous-versions-upsert-multi]_:

.. code-block:: javascript

   db.books.update( { author: "Dante" },
                    { $set: { born: "Florence", died: "Ravenna" } },
                    { upsert: true, multi: true }
                  )

The operation results in the following:

.. code-block:: javascript

   {
       "_id" : 11,
       "author" : "Dante",
       "born" : "Florence",
       "died" : "Ravenna",
       "item" : "Divine Comedy",
       "price" : 18
   }
   {
       "_id" : 22,
       "author" : "Dante",
       "born" : "Florence",
       "died" : "Ravenna",
       "item" : "The Banquet",
       "price" : 19
   }
   {
       "_id" : 33,
       "author" : "Dante",
       "born" : "Florence",
       "died" : "Ravenna",
       "item" : "Monarchia",
       "price" : 14
   }

.. [#previous-versions-upsert-multi]
   .. include:: /includes/fact-upsert-multi-options.rst

Update Arrays
~~~~~~~~~~~~~

Update an Element by Position
`````````````````````````````

If the update operation requires an update of an element in an array
field, the :method:`~db.collection.update()` method can
perform the update using the position of the element and :term:`dot
notation`. Arrays in MongoDB are zero-based.

The following operation queries the :doc:`bios collection
</reference/bios-example-collection>` for the first document with
``_id`` field equal to ``1`` and updates the second element in the
``contribs`` array:

.. code-block:: javascript

   db.bios.update(
      { _id: 1 },
      { $set: { "contribs.1": "ALGOL 58" } }
   )

Update an Element if Position is Unknown
````````````````````````````````````````

If the position in the array is not known, the
:method:`~db.collection.update()` method can perform the update using
the :operator:`$` positional operator. The array field must appear in
the ``<query>`` parameter in order to determine which array element to
update.

The following operation queries the :doc:`bios collection
</reference/bios-example-collection>` for the first document where the
``_id`` field equals ``3`` and the ``contribs`` array contains an
element equal to ``compiler``. If found, the
:method:`~db.collection.update()` method updates the first matching
element in the array to ``A compiler`` in the document:

.. code-block:: javascript

   db.bios.update(
      { _id: 3, "contribs": "compiler" },
      { $set: { "contribs.$": "A compiler" } }
   )

Update a Document Element
`````````````````````````

The :method:`~db.collection.update()` method can perform the
update of an array that contains subdocuments by using the positional
operator (i.e. :operator:`$`) and the :term:`dot notation`.

The following operation queries the :doc:`bios collection
</reference/bios-example-collection>` for the first document where the
``_id`` field equals ``6`` and the ``awards`` array contains a
subdocument element with the ``by`` field equal to ``ACM``. If found,
the :method:`~db.collection.update()` method updates the ``by`` field in
the first matching subdocument:

.. code-block:: javascript

   db.bios.update(
      { _id: 6, "awards.by": "ACM"  } ,
      { $set: { "awards.$.by": "Association for Computing Machinery" } }
   )

Add an Element
``````````````

The following operation queries the :doc:`bios collection
</reference/bios-example-collection>` for the first document that has an
``_id`` field equal to ``1`` and adds a new element to the ``awards``
field:

.. code-block:: javascript

   db.bios.update(
      { _id: 1 },
      {
        $push: { awards: { award: "IBM Fellow", year: 1963, by: "IBM" } }
      }
   )

In the next example, the :update:`$set` operator uses :ref:`dot
notation <document-dot-notation>` to access the ``middle`` field in the
``name`` subdocument. The :update:`$push`
operator adds another document as element to the field ``awards``.

Consider the following operation:

.. code-block:: javascript

   db.bios.update(
      { _id: 1 },
      {
         $set: { "name.middle": "Warner" },
         $push: { awards: {
            award: "IBM Fellow",
               year: "1963",
               by: "IBM"
            }
         }
      }
   )

This :method:`~db.collection.update()` operation:

- Modifies the field ``name`` whose value is another document.
  Specifically, the :update:`$set` operator updates the ``middle``
  field in the ``name`` subdocument. The document uses :ref:`dot
  notation <document-dot-notation>` to access a field in a subdocument.

- Adds an element to the field ``awards``, whose value is an array.
  Specifically, the :update:`$push` operator adds another document as
  element to the field ``awards``.
