==================
Scale Your Cluster
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Introduction
------------

You can reconfigure your cluster to meet changing demands. As your databases
grow, you can scale your cluster by increasing server capacity or enabling
:term:`sharding`, which distributes your databases over multiple servers,
called shards. If you've already enabled sharding, you can scale by increasing
the number of shards.

In addition to scaling, you can also reconfigure your cluster's replication
factor and enable cluster backups.

When making changes, you can both increase and decrease resources, with the
exception of disabling sharding directly. Instead, you can decrease the number
of shards to ``1``.

You can also modify security settings, which apply to all clusters. You can
edit your whitelist and can add and edit users. See
:doc:`/setup-cluster-security`.

Scaling
-------

Your cluster's :doc:`metrics </monitor-cluster-metrics>` will tell if the
cluster is reaching capacity and needs scaling. You can choose to scale either
vertically or horizontally. |service| lets you make modifications and see the
costs before applying the changes.

Vertical Scaling
~~~~~~~~~~~~~~~~

Vertical scaling adds capacity to your existing servers by changing RAM,
storage, or speed. In some cases, this can be more expensive than scaling
horizontally. For example, adding large amounts of RAM to existing servers can
be disproportionately more expensive than adding shards. You can experiment
with different configurations and view the costs before applying changes.

Horizontal Scaling
~~~~~~~~~~~~~~~~~~

Horizontal scaling adds capacity by dividing your data set and distributing it
across additional sets of servers. MongoDB does this by deploying your cluster
as a :term:`sharded <sharded cluster>` cluster. Each shard is an independent
database that contains a subset of your data records. Collectively, the shards
make up a single logical database. Each shard is also a replica set, providing
high availability and data consistency just as a non-sharded cluster does.

Sharding provides higher throughput and allows you to store larger data sets.
Sharding does so by:

- Reducing the number of operations each shard handles. For example, an
  operation to modify an email address need access only the shard that
  contains that data.

- Reducing the amount of data each shard must store. For example, if a
  database has a 1 terabyte data set and four shards, each shard might hold
  only 256 GB of data. If there are 40 shards, then each shard might hold only
  25 GB of data.

Enabling sharding creates a new connection string for accessing MongoDB.
|service| displays the new string once the changes are applied. You must
update your applications to use the new string.

For more information on MongoDB sharding, see :manual:`Sharding Introduction
</core/sharding-introduction>` in the MongoDB manual.

Modify Your Cluster
-------------------

.. include:: /includes/steps/scale-cluster.rst

.. _shard-collection:

Shard a Collection
------------------

.. TODO: This section is  will change if the interface provides a way to determine shard key
         and shard collections.

If you enable sharding, you must then specify which collections to shard. You must:

.. include:: /includes/steps/shard-collection.rst
