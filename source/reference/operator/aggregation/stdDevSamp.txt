=========================
$stdDevSamp (aggregation)
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. group:: $stdDevSamp

   .. versionchanged:: 5.0

   Calculates the sample standard deviation of the input values. Use if
   the values encompass a sample of a population of data from which
   to generalize about the population. :group:`$stdDevSamp` ignores
   non-numeric values. 

   If the values represent the entire population of data or you do not
   wish to generalize about a larger population, use
   :group:`$stdDevPop` instead.

   .. include:: /includes/extracts/fact-aggregation-accumulator-stdDevSamp.rst

   When used in the :pipeline:`$group` or :pipeline:`$setWindowFields`
   stage, :group:`$stdDevSamp` has the following syntax and respectively
   returns the sample standard deviation of the specified
   :ref:`expression <aggregation-expressions>` for the documents in a:

   - Group of documents that share the same group by key.

   - Set of documents defined by a :ref:`window
     <setWindowFields-window>`.

   .. code-block:: none
      :copyable: false

      { $stdDevSamp: <expression> }

   When used in the other supported stages,
   :group:`$stdDevSamp` returns the sample standard deviation of
   the specified expression or list of expressions for each document
   and has one of two syntaxes:

   - :group:`$stdDevSamp` has one specified expression as its operand:

     .. code-block:: none
        :copyable: false

        { $stdDevSamp: <expression> }

   - :group:`$stdDevSamp` has a list of specified expressions as its
     operand:

     .. code-block:: none
        :copyable: false

        { $stdDevSamp: [ <expression1>, <expression2> ... ]  }

   The argument for :group:`$stdDevSamp` can be any
   :ref:`expression <aggregation-expressions>` as long as it resolves
   to an array. For more information on expressions, see
   :ref:`aggregation-expressions`.

Behavior
--------

Non-numeric Values
~~~~~~~~~~~~~~~~~~

:group:`$stdDevSamp` ignores non-numeric values. If all operands for a
sum are non-numeric, :group:`$stdDevSamp` returns ``null``.

Single Value
~~~~~~~~~~~~

If the sample consists of a single numeric value, :group:`$stdDevSamp`
returns ``null``.

Array Operand
~~~~~~~~~~~~~

In the :pipeline:`$group` and :pipeline:`$setWindowFields` stages,
if the expression resolves to an array, :group:`$stdDevSamp` treats the
operand as a non-numerical value.

.. include:: /includes/extracts/fact-agg-accumulator-array-operand-in-project-stdDevSamp.rst

Window Values
~~~~~~~~~~~~~

.. include:: /includes/stdDev-behavior.rst

Examples
--------

Use in ``$group`` Stage
~~~~~~~~~~~~~~~~~~~~~~~

A collection ``users`` contains documents with the following fields:

.. code-block:: javascript
   :copyable: false

   {_id: 0, username: "user0", age: 20}
   {_id: 1, username: "user1", age: 42}
   {_id: 2, username: "user2", age: 28}
   ...

To calculate the standard deviation of a sample of users, following
aggregation operation first uses the :pipeline:`$sample` pipeline to
sample 100 users, and then uses :group:`$stdDevSamp` calculates the
standard deviation for the sampled users.

.. code-block:: javascript

   db.users.aggregate(
      [
         { $sample: { size: 100 } },
         { $group: { _id: null, ageStdDev: { $stdDevSamp: "$age" } } }
      ]
   )

The operation returns a result like the following:

.. code-block:: javascript
   :copyable: false

   { "_id" : null, "ageStdDev" : 7.811258386185771 }

Use in ``$setWindowFields`` Stage
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 5.0

.. include:: /includes/setWindowFields-example-collection.rst

This example uses :group:`$stdDevSamp` in the
:pipeline:`$setWindowFields` stage to output the sample standard
deviation of the ``quantity`` values of the cake sales for each
``state``:

.. code-block:: javascript

   db.cakeSales.aggregate( [
      {
         $setWindowFields: {
            partitionBy: "$state",
            sortBy: { orderDate: 1 },
            output: {
               stdDevSampQuantityForState: {
                  $stdDevSamp: "$quantity",
                  window: {
                     documents: [ "unbounded", "current" ]
                  }         
               }
            }
         }
      }
   ] )

In the example:

.. include:: /includes/setWindowFields-partition-sort-date.rst

- ``output`` sets the ``stdDevSampQuantityForState`` field to the sample
  standard deviation of the ``quantity`` values using
  :group:`$stdDevSamp` that is run in a :ref:`documents
  <setWindowFields-documents>` window.
  
  The :ref:`window <setWindowFields-window>` contains documents between
  an ``unbounded`` lower limit and the ``current`` document in the
  output. This means :group:`$stdDevSamp` returns the sample standard
  deviation of the ``quantity`` values for the documents between the
  beginning of the partition and the current document.

In this output, the sample standard deviation ``quantity`` value for
``CA`` and ``WA`` is shown in the ``stdDevSampQuantityForState`` field:

.. code-block:: javascript
   :copyable: false

   { "_id" : 4, "type" : "strawberry", "orderDate" : ISODate("2019-05-18T16:09:01Z"),
     "state" : "CA", "price" : 41, "quantity" : 162, "stdDevSampQuantityForState" : null }
   { "_id" : 0, "type" : "chocolate", "orderDate" : ISODate("2020-05-18T14:10:30Z"),
     "state" : "CA", "price" : 13, "quantity" : 120, "stdDevSampQuantityForState" : 29.698484809834994 }
   { "_id" : 2, "type" : "vanilla", "orderDate" : ISODate("2021-01-11T06:31:15Z"),
     "state" : "CA", "price" : 12, "quantity" : 145, "stdDevSampQuantityForState" : 21.1266025033211 }
   { "_id" : 5, "type" : "strawberry", "orderDate" : ISODate("2019-01-08T06:12:03Z"),
     "state" : "WA", "price" : 43, "quantity" : 134, "stdDevSampQuantityForState" : null }
   { "_id" : 3, "type" : "vanilla", "orderDate" : ISODate("2020-02-08T13:13:23Z"),
     "state" : "WA", "price" : 13, "quantity" : 104, "stdDevSampQuantityForState" : 21.213203435596427 }
   { "_id" : 1, "type" : "chocolate", "orderDate" : ISODate("2021-03-20T11:30:05Z"),
     "state" : "WA", "price" : 14, "quantity" : 140, "stdDevSampQuantityForState" : 19.28730152198591 }
