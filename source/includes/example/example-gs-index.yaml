collection: "inventory"
options:
  show_title: False
  show_collection: False
content:
  source:
    file: example/example-gs-query-all.yaml
    ref: 0
---
title:
  text: Create a Single-Field Index
  level: 2
ref: 1
pre: |
  Create an ascending index on the ``"item"`` field of the
  ``inventory`` collection.
operation:
  language: javascript
  code: |
    db.inventory.ensureIndex( { "item": 1 } )
post: |
  The method returns a document with the status of the operation.
results: |
      {
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
      }
final: |
  Upon successful index creation, the ``"numIndexesAfter"`` value is
  one greater than the ``"numIndexesBefore"`` value. For a description
  of the output, see :ref:`gs-ensureIndex-output`.
---
title: 
  text: Create a compound index.
  level: 2
ref: 2
pre: |
  MongoDB supports :ref:`compound indexes <index-type-compound>` which
  are indexes on multiple fields. The order of the fields determine how
  the index stores its keys.
post: |
operation:
  - pre: |
      For example, the following operation creates a compound index on
      the ``"category"`` field and the ``"details.model"`` field.

      The index orders its entries first by ascending ``"category"``
      values, and then, within each ``"category"``, by descending
      ``"details.model"`` values.
    language: javascript
    code: |
      db.inventory.ensureIndex( { "category": 1, "details.model": -1 } )
post: |
  The method returns a document with the status of the operation.
results: |
  {
     "createdCollectionAutomatically" : false,
     "numIndexesBefore" : 2,
     "numIndexesAfter" : 3,
     "ok" : 1
  }
final: |
  Upon successful index creation, the ``"numIndexesAfter"`` value is
  one greater than the ``"numIndexesBefore"`` value.

  For a description of the output, see :ref:`gs-ensureIndex-output`.
...