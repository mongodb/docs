.. _golang-struct-tags-usage-example:

===============
Use Struct Tags
===============

.. meta::
   :description: Learn how to use struct tags in Go to control BSON field names when inserting documents with the MongoDB Go Driver.

You can specify the way that the Go Driver converts Go
structs to :manual:`BSON </reference/bson-types/>` by using struct tags.

Example: Full File
------------------

.. include:: /includes/usage-examples/example-intro.rst

This example declares a struct of type ``Restaurant`` with the
following struct tags:

- A struct tag that maps the ``RestaurantId`` field to the BSON
  field name ``restaurant_id``. By default, the driver marshals the other
  fields as the lowercase of the struct field name.

- The ``omitempty`` struct tag omits the corresponding field from the 
  inserted document when left empty.

The following code shows the ``Restaurant`` struct used in the example:

.. literalinclude:: /includes/usage-examples/code-snippets/structTagStruct.go
   :language: go

The following example creates a ``Restaurant`` instance and inserts it
into the ``restaurants`` collection. During the insert operation, the driver
interprets the struct tags to marshal the ``RestaurantId``
struct field as ``restaurant_id`` and omits fields that are left empty in the 
sample document:

.. io-code-block::
   :copyable: true

   .. input:: /includes/usage-examples/code-snippets/structTag.go
      :language: go
      :dedent:

   .. output::
      :language: none
      :visible: false

      Document inserted with ID: ObjectID("...")

Expected Result
---------------

After you run the full example, you can find the following document
in the ``restaurants`` collection:

.. code-block:: json
   :copyable: false

   {
       "_id" : ObjectId("..."),
       "name" : "Amazing Pizza",
       "restaurant_id" : "123456789",
       "cuisine" : "American
   }

For an example on how to find a document, see the :ref:`golang-find-one` guide.

Additional Information
----------------------

To learn more about using struct tags, converting to/from BSON, and
handling potential errors, see the :ref:`Work with BSON <golang-bson>` guide.

API Documentation
~~~~~~~~~~~~~~~~~

- `Structs and Struct Tags <{+api+}@{+full-version+}/bson#hdr-Structs>`__
- `InsertOne() <{+api+}/mongo#Collection.InsertOne>`__
- `FindOne() <{+api+}/mongo#Collection.FindOne>`__
