# table structure. all content symbolic.
section: layout
header: [ meta.header1, meta.header2, meta.header3 ]
rows:
  - 1: [ content.sql1, content.mongo1, content.desc1 ]
  - 2: [ content.sql2, content.mongo2, content.desc2 ]
  - 3: [ content.sql3, content.mongo3, content.desc3 ]
  - 4: [ content.sql4, content.mongo4, content.desc4 ]
  - 5: [ content.sql5, content.mongo5, content.desc5 ]
  - 6: [ content.sql6, content.mongo6, content.desc6 ]
  - 7: [ content.sql7, content.mongo7, content.desc7 ]
  - 8: [ content.sql8, content.mongo8, content.desc8 ]
  - 9: [ content.sql9, content.mongo9, content.desc9 ]
  - 10: [ content.sql10, content.mongo10, content.desc10 ]
  - 11: [ content.sql11, content.mongo11, content.desc11 ]
---
# table metadata, as meta.<key>
section: meta
header1: "SQL Example"
header2: "MongoDB Example"
header3: "Description"
---
# table content, as content.<key>
section: content
desc1: |
        Count all records
        from ``orders``
sql1: |
      .. code-block:: sql

         SELECT COUNT(*) AS count
         FROM orders
mongo1: |
        .. code-block:: javascript
           :emphasize-lines: 2-3

           db.orders.aggregate( [
              { $group: { _id: null,
                          count: { $sum: 1 } } }
           ] )
desc2: |
        Sum the ``price`` field
        from ``orders``
sql2: |
      .. code-block:: sql

         SELECT SUM(price) AS total
         FROM orders
mongo2: |
        .. code-block:: javascript
           :emphasize-lines: 2-3

           db.orders.aggregate( [
              { $group: { _id: null,
                          total: { $sum: "$price" } } }
           ] )
desc3: |
        For each unique ``cust_id``,
        sum the ``price`` field.
sql3: |
      .. code-block:: sql

         SELECT cust_id,
                SUM(price) AS total
         FROM orders
         GROUP BY cust_id
mongo3: |
        .. code-block:: javascript
           :emphasize-lines: 2-3

           db.orders.aggregate( [
              { $group: { _id: "$cust_id",
                          total: { $sum: "$price" } } }
           ] )
desc4: |
        For each unique ``cust_id``,
        sum the ``price`` field,
        results sorted by sum.
sql4: |
      .. code-block:: sql

         SELECT cust_id,
                SUM(price) AS total
         FROM orders
         GROUP BY cust_id
         ORDER BY total
mongo4: |
        .. code-block:: javascript
           :emphasize-lines: 2-4

           db.orders.aggregate( [
              { $group: { _id: "$cust_id",
                          total: { $sum: "$price" } } },
              { $sort: { total: 1 } }
           ] )
desc5: |
        For each unique
        ``cust_id``, ``ord_date`` grouping,
        sum the ``price`` field.
sql5: |
      .. code-block:: sql

         SELECT cust_id,
                ord_date,
                SUM(price) AS total
         FROM orders
         GROUP BY cust_id, ord_date
mongo5: |
        .. code-block:: javascript
           :emphasize-lines: 2-4

           db.orders.aggregate( [
              { $group: { _id: { cust_id: "$cust_id",
                                 ord_date: "$ord_date" },
                          total: { $sum: "$price" } } }
           ] )
desc6: |
        For ``cust_id`` with multiple records,
        return the ``cust_id`` and
        the corresponding record count.
sql6: |
      .. code-block:: sql

         SELECT cust_id, count(*)
         FROM orders
         GROUP BY cust_id
         HAVING count(*) > 1
mongo6: |
        .. code-block:: javascript
           :emphasize-lines: 2-4

           db.orders.aggregate( [
              { $group: { _id: "$cust_id",
                          count: { $sum: 1 } } },
              { $match: { count: { $gt: 1 } } }
           ] )
desc7: |
        For each unique ``cust_id``, ``ord_date``
        grouping, sum the ``price`` field
        and return only where the
        sum is greater than 250.
sql7: |
      .. code-block:: sql

         SELECT cust_id,
                ord_date,
                SUM(price) AS total
         FROM orders
         GROUP BY cust_id, ord_date
         HAVING total > 250
mongo7: |
        .. code-block:: javascript
           :emphasize-lines: 2-5

           db.orders.aggregate( [
              { $group: { _id: { cust_id: "$cust_id",
                                 ord_date: "$ord_date" },
                          total: { $sum: "$price" } } },
              { $match: { total: { $gt: 250 } } }
           ] )
desc8: |
        For each unique ``cust_id``
        with status ``A``,
        sum the ``price`` field.
sql8: |
      .. code-block:: sql

         SELECT cust_id,
                SUM(price) as total
         FROM orders
         WHERE status = 'A'
         GROUP BY cust_id
mongo8: |
        .. code-block:: javascript
           :emphasize-lines: 2-4

           db.orders.aggregate( [
              { $match: { status: 'A' } },
              { $group: { _id: "$cust_id",
                          total: { $sum: "$price" } } }
           ] )
desc9: |
        For each unique ``cust_id``
        with status ``A``,
        sum the ``price`` field and return
        only where the
        sum is greater than 250.
sql9: |
      .. code-block:: sql

         SELECT cust_id,
                SUM(price) as total
         FROM orders
         WHERE status = 'A'
         GROUP BY cust_id
         HAVING total > 250
mongo9: |
        .. code-block:: javascript
           :emphasize-lines: 2-5

           db.orders.aggregate( [
              { $match: { status: 'A' } },
              { $group: { _id: "$cust_id",
                          total: { $sum: "$price" } } },
              { $match: { total: { $gt: 250 } } }
           ] )
desc10: |
        For each unique ``cust_id``,
        sum the corresponding
        line item ``qty`` fields
        associated with the
        orders.
sql10: |
       .. code-block:: sql

          SELECT cust_id,
                 SUM(li.qty) as qty
          FROM orders o,
               order_lineitem li
          WHERE li.order_id = o.id
          GROUP BY cust_id
mongo10: |
         .. code-block:: javascript
            :emphasize-lines: 2-5

            db.orders.aggregate( [
               { $unwind: "$items" },
               { $group: { _id: "$cust_id",
                           qty: { $sum: "$items.qty" } } }
            ] )
desc11: |
        Count the number of distinct 
        ``cust_id``, ``ord_date`` groupings.
sql11: |
       .. code-block:: sql

          SELECT COUNT(*)
          FROM (SELECT cust_id, ord_date 
                FROM orders 
                GROUP BY cust_id, ord_date) as DerivedTable
mongo11: |
         .. code-block:: javascript
            :emphasize-lines: 2-4

            db.orders.aggregate( [
               { $group: { _id: { cust_id: "$cust_id",
                                  ord_date: "$ord_date" } } },
               { $group: { _id: null, count: { $sum: 1 } } }
            ] )
...
