.. meta::
   :robots: noindex, nosnippet 

===================
$skip (aggregation)
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. pipeline:: $skip

   Skips over the specified number of :term:`documents <document>` that
   pass into the stage and passes the remaining documents to the next
   stage in the :term:`pipeline`.

   The :pipeline:`$skip` stage has the following prototype form:

   .. code-block:: javascript

      { $skip: <positive 64-bit integer> }

   :pipeline:`$skip` takes a positive integer that specifies the
   maximum number of documents to skip.

   .. note::

      Starting in MongoDB 5.0, the :pipeline:`$skip` pipeline aggregation
      has a 64-bit integer limit. Values passed to the pipeline which
      exceed this limit will return a invalid argument error.

Behavior
--------

Using $skip with Sorted Results
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If using the :pipeline:`$skip` stage with any of:

- the :pipeline:`$sort` aggregation stage,
- the :method:`~cursor.sort()` method, or
- the ``sort`` field to the :dbcommand:`findAndModify` command or the
  :method:`~db.collection.findAndModify()` shell method,

be sure to include at least one field in your sort that contains
unique values, before passing results to the :pipeline:`$skip` stage.

Sorting on fields that contain duplicate values may return a different
sort order for those duplicate fields over multiple executions,
especially when the collection is actively receiving writes.

The easiest way to guarantee sort consistency is to include the
``_id`` field in your sort query.

See the following for more information on each:

- :ref:`Consistent sorting with $sort (aggregation)
  <sort-aggregation-consistent-sorting>`
- :ref:`Consistent sorting with the sort() shell method
  <sort-cursor-consistent-sorting>`
- :ref:`Consistent sorting with the findAndModify command
  <findandmodify-command-consistent-sorting>`
- :ref:`Consistent sorting with the findAndModify() shell method
  <findandmodify-method-consistent-sorting>`

Examples
--------

.. tabs-drivers::

   .. tab::
      :tabid: shell

      Consider the following example:

      .. code-block:: javascript

         db.article.aggregate([
             { $skip : 5 }
         ]);

      This operation skips the first 5 documents passed to it by the
      pipeline. :pipeline:`$skip` has no effect on the content of the
      documents it passes along the pipeline.

   .. tab::
      :tabid: csharp

      .. include:: /includes/driver-examples/csharp/aggregation/method-intro.rst

         .. replacement:: stage-name

            ``$skip`` 

         .. replacement:: method-name-and-link 

            `Skip() <{+csharp-api-docs+}/MongoDB.Driver/MongoDB.Driver.PipelineStageDefinitionBuilder.Skip.html>`__

         .. replacement:: stage-specific-info
         
         .. replacement:: method-description

            skips the first five documents in the input and passes
            the remaining documents to the next stage in the pipeline:

         .. replacement:: more-method-description

      .. literalinclude:: /includes/driver-examples/csharp/aggregation/BuildersExamples.cs
         :start-after: // start skip
         :end-before: // end skip
         :language: csharp
         :dedent: 8

   .. tab::
      :tabid: nodejs

      .. include:: /includes/driver-examples/node/aggregation/stage-intro.rst

         .. replacement:: stage-name

            ``$skip`` 

         .. replacement:: stage-specific-info
         
         .. replacement:: method-description

            skips the first five documents in the input collection and passes
            the remaining documents to the next stage in the pipeline

         .. replacement:: more-method-description

      .. literalinclude:: /includes/driver-examples/node/aggregation/examples.js
         :start-after: //start skip
         :end-before: //end skip
         :language: javascript
         :dedent: 2

Learn More
----------

To see full aggregation examples that use the :pipeline:`$skip` stage, see the
:ref:`aggregation-complete-examples`.
