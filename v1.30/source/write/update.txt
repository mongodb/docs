.. _c-write-update:

================
Update Documents
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: modify, change, bulk, code example

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to update
documents in a MongoDB collection. You can call the ``mongoc_collection_update_one()``
function to update a single document or the ``mongoc_collection_update_many()``
function to update multiple documents.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``restaurants`` collection in the ``sample_restaurants``
database from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
free MongoDB Atlas cluster and load the sample datasets, see the
:atlas:`Get Started with Atlas </getting-started>` guide.

Update Operations
-----------------

You can perform update operations in MongoDB by using the following functions:

- ``mongoc_collection_update_one()``, which updates *the first document* that
  matches the search criteria
- ``mongoc_collection_update_many()``, which updates *all documents* that match
  the search criteria

Each update function accepts the following parameters:

- **Collection**: Specifies the collection to update.

- **Query filter document**: Specifies which collection documents to update. For
  more information about query filters, see the 
  :manual:`Query Filter Documents section </core/document/#query-filter-documents>` in
  the {+mdb-server+} manual.

- **Update document**: Specifies the **update operator**, or the kind of update to
  perform, and the fields and values to change. For a list of update operators
  and their usage, see the :manual:`Field Update Operators guide
  </reference/operator/update-field/>` in the {+mdb-server+} manual.

- **Options document**: Specifies options to customize the operation, or ``NULL``.

- **Results location**: Specifies a pointer to overwritable storage that will contain
  operation results, or ``NULL``.

- **Error location**: Specifies a location for an error value, or ``NULL``.

Update One Document
~~~~~~~~~~~~~~~~~~~

The following example uses the ``mongoc_collection_update_one()`` function to
update the ``name`` value of a document in the ``restaurants`` collection from
``"Bagels N Buns"`` to ``"2 Bagels 2 Buns"``:

.. literalinclude:: /includes/write/update.c
   :start-after: start-update-one
   :end-before: end-update-one
   :language: c
   :dedent:

Update Many Documents
~~~~~~~~~~~~~~~~~~~~~

The following example uses the ``mongoc_collection_update_many()`` function to update
all documents that have a ``cuisine`` value of ``"Pizza"``. After the update, the
documents have a ``cuisine`` value of ``"Pasta"``.

.. literalinclude:: /includes/write/update.c
   :start-after: start-update-many
   :end-before: end-update-many
   :language: c
   :dedent:

Customize the Update Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can modify the behavior of the ``mongoc_collection_update_one()`` and
``mongoc_collection_update_many()`` functions by passing a BSON document that
specifies option values. The following table describes some options
you can set in the document:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Option
     - Description

   * - ``bypassDocumentValidation``
     - | If set to ``true``, allows the write operation to opt out of
         :manual:`document-level validation </core/schema-validation>`. 
       | Defaults to ``false``.
       | **Type**: ``bool``

   * - ``writeConcern``
     - | Sets the write concern for the operation.
       | Defaults to the write concern of the namespace.
       | **Type**: ``mongoc_write_concern_t``

   * - ``collation``
     - | Specifies the kind of language collation to use when comparing
         text. For more information, see :manual:`Collation </reference/collation/#std-label-collation>`
         in the {+mdb-server+} manual.
       | **Type**: ``bson_t``

   * - ``comment``
     - | A comment to attach to the operation. For more information, see the :manual:`insert command
         fields </reference/command/insert/#command-fields>` guide in the
         {+mdb-server+} manual.
       | **Type**: ``bson_value_t``

   * - ``upsert``
     - | A comment to attach to the operation. For more information, see the :manual:`insert command
         fields </reference/command/insert/#command-fields>` guide in the
         {+mdb-server+} manual.
       | **Type**: ``bson_value_t``

The following example uses the ``mongoc_collection_update_many()`` function to find all
documents that have ``borough`` value of ``"Manhattan"``. It then updates the ``borough``
value in these documents to ``"Manhattan (north)"``. Because the ``upsert`` option is
set to ``true``, the {+driver-short+} inserts a new document if the query filter doesn't 
match any existing documents.

.. literalinclude:: /includes/write/update.c
   :start-after: start-update-options
   :end-before: end-update-options
   :language: c
   :dedent:

Additional Information 
----------------------

To learn more about creating query filters, see the :ref:`c-specify-query` guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the functions discussed in this
guide, see the following API documentation:

- `mongoc_collection_update_one() <{+api-libmongoc+}/mongoc_collection_update_one.html>`__
- `mongoc_collection_update_many() <{+api-libmongoc+}/mongoc_collection_update_many.html>`__