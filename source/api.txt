.. _atlas-api:
.. _data-api-overview:
.. _graphql-api-overview:

=============================
|service| Programmatic Access
=============================

.. facet::
   :name: genre 
   :values: reference

.. meta:: 
   :keywords: atlas app services

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can interact with |service| programmatically using 
the following resources. 

APIs
----

To manage your |service| deployments and {+app-services+}, you can use 
the :doc:`{+atlas-admin-api+} </api/atlas-admin-api>` or 
:appservices:`{+atlas-app-services+} Admin API </admin/api/v3/>`.

Each |service| |api| has its own resources and requires initial
setup. To configure access for each |api|, use these resources:

- :doc:`/configure-api-access`
- :appservices:`{+app-services+} Administration API docs 
  </admin/api/v3/>`

.. _atlas-admin-api-overview:

{+atlas-admin-api+}
~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-atlas-admin-api-definition.rst

.. card-group::
   :columns: 2
   :style: compact

   .. card::
      :cta: Learn about the Atlas Admin API
      :url: https://www.mongodb.com/docs/atlas/api/atlas-admin-api/

   .. card::
      :cta: See the Atlas Admin API Specification
      :url: https://mongodb.com/docs/atlas/reference/api-resources-spec/v2

{+atlas-go-sdk+}
`````````````````````````````````````````````````

The {+atlas-go-sdk+} provides platform-specific and Go language-specific
tools, libraries, and documentation to help you build applications that
interact with |service| quickly and easily using the {+atlas-admin-api+}. 

To learn more, see `Atlas Go SDK <https://www.mongodb.com/docs/atlas/sdk/>`__.

.. _realm-admin-api-overview:

{+app-services+} Admin API
~~~~~~~~~~~~~~~~~~~~~~~~~~

Programmatically perform administrative tasks outside of the {+app-services+} UI
with the {+app-services+} Admin API. This includes tasks such as modifying
authentication providers, creating rules, and defining functions.

.. card-group::
   :columns: 2
   :style: compact

   .. card::
      :cta: Learn about the {+app-services+} API
      :url: https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/

   .. card::
      :cta: See the {+app-services+} Resources
      :url: https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#resources

.. _atlas-programmatic-access-cli-overview:

{+atlas-cli+} 
-------------

The {+atlas-cli+} is a command-line interface built specifically for
|service-fullname|. You can use {+atlas-cli+} to interact with |service|
from the terminal with short and intuitive commands and accomplish
complex operational tasks such as creating a cluster or setting up an
access list interactively and programmatically.  

.. card-group::
   :columns: 2
   :style: compact

   .. card::
      :cta: Learn more about the {+atlas-cli+}
      :url: https://www.mongodb.com/docs/atlas/cli/stable/

   .. card::
      :cta: Get Started with the {+atlas-cli+}
      :url: https://www.mongodb.com/docs/atlas/cli/stable/atlas-cli-getting-started/

.. _atlas-programmatic-access-terraform-overview:

HashiCorp Terraform MongoDB Atlas Provider
------------------------------------------

HashiCorp Terraform MongoDB |service| Provider provides refined
programmatic access and management of |service-fullname| resources. You
can define your environment using the HashiCorp Configuration Language (HCL)
and deploy, update, and manage |service| infrastructure as code through
HashiCorp Terraform. This allows you to integrate |service| into your
continuous delivery workflows. 

.. card-group::
   :columns: 2
   :style: compact

   .. card::
      :cta: Learn more about MongoDB Atlas and HashiCorp Terraform
      :url: https://www.mongodb.com/atlas/hashicorp-terraform

   .. card::
      :cta: Managing IaC with MongoDB Atlas and HashiCorp Terraform (Video Walkthrough)
      :url: https://www.youtube.com/watch?v=zoMB6mlq46k 

Cloud Development Kit for Terraform 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:abbr:`CDK (Cloud Development Kit)` for Terraform leverages the
|service-fullname| {+atlas-admin-api+} to enable provisioning across
popular programming languages such as JavaScript, TypeScript, Python,
Java, Go, and C#. Utilizing the powerful capabilities of Terraform,
with :abbr:`CDKTF (Cloud Development Kit for Terraform)` you can now 
create, manage, and update your |service| resources with ease and deploy 
them seamlessly in the cloud without context switching from the native
programming language of choice. 

To learn more, see the following resources:

- `MongoDB Cloud Development Kit for Terraform <https://constructs.dev/search?q=&cdk=cdktf&keywords=terraform&offset=0>`__
- `Managing IaC with MongoDB Atlas and the Terraform CDK
  <https://www.youtube.com/watch?v=9f0WghCYsEw>`__ (video walkthrough)

.. _atlas-programmatic-access-cloudformation-overview:

MongoDB Atlas AWS CloudFormation Resources
------------------------------------------

|service| CloudFormation Resources helps you to manage
|service-fullname|. It simplifies provisioning and management of
|service| features on |aws|. You can create YAML- or JSON-based templates
for the service or application architectures you want and have |aws|
CloudFormation use those templates for quick and reliable provisioning
of the services or applications (called “stacks”). You can also easily
update or replicate the stacks as needed. 

.. card-group::
   :columns: 2
   :style: compact

   .. card::
      :cta: Learn more about Atlas CloudFormation Resources
      :url: https://www.mongodb.com/atlas/aws-cloudformation

   .. card::
      :cta: Deploy MongoDB Atlas with AWS CloudFormation
      :url: https://www.mongodb.com/developer/products/atlas/deploy-mongodb-atlas-aws-cloudformation/

AWS Partner Solutions
~~~~~~~~~~~~~~~~~~~~~

|aws| Partner Solutions provide pre-built CloudFormation templates to
help you provision a group of |service| resources for specific use cases
instead of deploying them one by one. Partner Solutions help you deploy
popular technologies to |aws| according to |aws| best practices. 

To learn more, see `AWS Quick Starts <https://aws.amazon.com/quickstart/?solutions-all.sort-by=item.additionalFields.sortDate&solutions-all.sort-order=desc&awsf.filter-content-type=*all&awsf.filter-tech-category=*all&awsf.filter-industry=*all&solutions-all.q=mongodb&solutions-all.q_operator=AND>`__.

AWS Cloud Development Kit 
~~~~~~~~~~~~~~~~~~~~~~~~~

If you prefer using familiar programming languages like JavaScript,
TypeScript, Python, Java, C#, and Go rather than using YAML or |json|,
you can use the |aws| :abbr:`CDK (Cloud Development Kit)` to deploy
|service| resources. When you execute your |aws| :abbr:`CDK (Cloud 
Development Kit)` applications, they automatically generate
CloudFormation templates, which in turn utilize the |aws| CloudFormation
service for resource provisioning. This way, you benefit from the
abstraction and flexibility provided by |aws| :abbr:`CDK (Cloud
Development Kit)` and take advantage of the robustness of CloudFormation
for infrastructure management, while still using the programming
language of your choice.  

To learn more, see the following resources:

- `Atlas AWS Cloud Development Kit <https://github.com/mongodb/awscdk-resources-mongodbatlas/blob/main/examples/README.md>`__
- `How to Deploy Atlas with AWS CDK <https://www.mongodb.com/developer/products/atlas/deploy-mongodb-atlas-aws-cdk-typescript/>`__

.. _atlas-programmatic-access-ak8so-overview:

|ak8so| 
-------

The |ak8so| enables you to manage |service| resources through custom resources that 
you apply in |k8s|. This allows an infrastructure as code approach to manage 
declarative configuration for |service| using a GitOps workflow, allowing developers 
to configure |service| resources using the same process and tooling that they use to 
deploy application components into |k8s|. The automatic creation of a |k8s| secret 
containing the connection string for a database user simplifies the process of 
connecting an application to the database.

.. card-group::
   :columns: 2
   :style: compact

   .. card::
      :cta: Learn more about the Atlas Kubernetes Operator
      :url: https://www.mongodb.com/docs/atlas/atlas-operator/

   .. card::
      :cta: Quick Start Tutorial
      :url: https://www.mongodb.com/docs/atlas/atlas-operator/stable/ak8so-quick-start/

Access Your Data
----------------

The best way to programmatically create, read, update, and delete data
stored in |service| is to :ref:`connect with drivers
<connect-via-driver>`. Drivers interact with |service| through the
MongoDB data plane using wire protocol. To learn more, see
:driver:`Start Developing with MongoDB </>`.


.. toctree::

   {+atlas-admin-api+} </api/atlas-admin-api>
   {+app-services+} Admin API <https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/>
   Infrastructure as Code </infrastructure>
