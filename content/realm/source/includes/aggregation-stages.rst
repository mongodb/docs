Filter Documents
~~~~~~~~~~~~~~~~

You can use the :manual:`$match
</reference/operator/aggregation/match/>` stage to filter
documents according to standard MongoDB :manual:`query syntax
</tutorial/query-documents>`.

.. code-block:: javascript

   {
     "$match": {
       "<Field Name>": <Query Expression>,
       ...
     }
   }

.. example::

   The following ``$match`` stage filters documents to include
   only those where the ``type`` field has a value equal to "perennial":

   .. io-code-block::
      :copyable: true

      .. input:: /examples/generated/node/mongodb.snippet.filter-documents.js
         :language: js

      .. output:: /examples/generated/node/mongodb.snippet.filter-documents-result.js
         :language: js
         :visible: false

Group Documents
~~~~~~~~~~~~~~~

You can use the :manual:`$group
</reference/operator/aggregation/group/>` stage to aggregate summary
data for one or more documents. MongoDB groups documents based
on the expression defined in the ``_id`` field of the ``$group`` stage.
You can reference a specific document field by prefixing the field name
with a ``$``.

.. code-block:: javascript

   {
     "$group": {
       "_id": <Group By Expression>,
       "<Field Name>": <Aggregation Expression>,
       ...
     }
   }

.. example::

   The following ``$group`` stage arranges documents by the value of their
   ``type`` field and calculates the number of plant documents
   that each unique ``type`` value appears in.


   .. io-code-block::
      :copyable: true

      .. input:: /examples/generated/node/mongodb.snippet.group-documents.js
         :language: js

      .. output:: /examples/generated/node/mongodb.snippet.group-documents-result.js
         :language: js
         :visible: false

Paginate Documents
~~~~~~~~~~~~~~~~~~

To paginate results, you can use range aggregation queries with the ``$match``,
``$sort``, and ``$limit`` operators. To learn more about paginating documents,
refer to :manual:`Using Range Queries </reference/method/cursor.skip/#pagination-example>`
in the MongoDB Server documentation.

.. example::

   The following example paginates through a collection of documents in ascending
   order.

   .. literalinclude:: /examples/generated/node/mongodb.snippet.paginate.js
      :language: javascript

Project Document Fields
~~~~~~~~~~~~~~~~~~~~~~~

You can use the :manual:`$project
</reference/operator/aggregation/project/>` stage to include or omit
specific fields from documents or to calculate new fields using
:manual:`aggregation operators </reference/operator/aggregation>`.
Projections work in two ways:

- Explicitly include fields with a value of 1. This has the side-effect
  of implicitly excluding all unspecified fields.

- Implicitly exclude fields with a value of 0. This has the side-effect
  of implicitly including all unspecified fields.

These two methods of projection are mutually exclusive: if you
explicitly include fields, you cannot explicitly exclude fields, and
vice versa.

.. note::

   The ``_id`` field is a special case: it is always included in every
   query unless explicitly specified otherwise. For this reason, you
   *can* exclude the ``_id`` field with a ``0`` value while simultaneously
   including other fields, like ``_partition``, with a ``1``. Only the
   special case of exclusion of the ``_id`` field allows both exclusion
   and inclusion in one ``$project`` stage.

.. code-block:: javascript

   {
     "$project": {
       "<Field Name>": <0 | 1 | Expression>,
       ...
     }
   }

.. example::

   The following ``$project`` stage omits the ``_id`` field, includes
   the ``name`` field, and creates a new field named ``storeNumber``.
   The ``storeNumber`` is generated using two aggregation operators:

   1. ``$split`` separates the ``_partition`` value into two string
      segments surrounding the space character. For example, the value
      "Store 42" split in this way returns an array with two elements:
      "Store" and "42".

   2. ``$arrayElemAt`` selects a specific element from an array based
      on the second argument. In this case, the value ``1`` selects the
      second element from the array generated by the ``$split`` operator
      since arrays index from ``0``. For example, the value ["Store", "42"]
      passed to this operation would return a value of "42".

   .. io-code-block::
      :copyable: true

      .. input:: /examples/generated/node/mongodb.snippet.project-document-fields.js
         :language: js

      .. output:: /examples/generated/node/mongodb.snippet.project-document-fields-result.js
         :language: js
         :visible: false

Add Fields to Documents
~~~~~~~~~~~~~~~~~~~~~~~

You can use the :manual:`$addFields
</reference/operator/aggregation/addFields/>` stage to add new fields
with calculated values using :manual:`aggregation operators
</reference/operator/aggregation>`.

.. code-block:: javascript

   { $addFields: { <newField>: <expression>, ... } }

.. note::

   ``$addFields`` is similar to :manual:`$project
   </reference/operator/aggregation/project/>` but does not allow you to
   include or omit fields.

.. example::

   The following ``$addFields`` stage creates a new field named
   ``storeNumber`` where the value is the output of two aggregate operators
   that transform the value of the ``_partition`` field.

   .. io-code-block::
      :copyable: true

      .. input:: /examples/generated/node/mongodb.snippet.add-fields-to-documents.js
         :language: js

      .. output:: /examples/generated/node/mongodb.snippet.add-fields-to-documents-result.js
         :language: js
         :visible: false

Unwind Array Values
~~~~~~~~~~~~~~~~~~~

You can use the :manual:`$unwind
</reference/operator/aggregation/unwind/>` stage to transform a single
document containing an array into multiple documents containing individual
values from that array. When you unwind an array field,
MongoDB copies each document once for each element of the array field
but replaces the array value with the array element in each copy.

.. code-block:: javascript

   {
     $unwind: {
       path: <Array Field Path>,
       includeArrayIndex: <string>,
       preserveNullAndEmptyArrays: <boolean>
     }
   }

.. example::

   The following example uses the ``$unwind`` stage for each object's ``type`` and ``color``
   combination. The aggregation pipeline has the following steps: 

   #. Use ``$group`` stage with ``$addToSet`` to create new documents
      for each ``type`` with a new field ``colors`` that contains an array 
      of all the the colors for that flower type that occur in the collection.
   #. Use ``$unwind`` stage to create separate documents for each combination of 
      type and color.
   #. Use ``$sort`` stage to sort the results in alphabetical order.

   .. io-code-block::
      :copyable: true

      .. input:: /examples/generated/node/mongodb.snippet.unwind-array-values.js
         :language: js

      .. output:: /examples/generated/node/mongodb.snippet.unwind-array-values-result.js
         :language: js
         :visible: false
