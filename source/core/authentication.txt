.. _authentication:

==============
Authentication
==============

.. default-domain:: mongodb

Authentication is the process of verifying the identity of a client.
When access control, i.e. :doc:`authorization </core/authorization>`,
is enabled, MongoDB requires all clients to authenticate themselves
first in order to determine the access for the client.

Although authentication and :doc:`authorization </core/authorization>`
are closely connected, authentication is distinct from authorization.
Authentication verifies the identity of a user; authorization
determines the verified user's access to resources and operations.

MongoDB supports a number of :ref:`authentication mechanisms
<security-authentication-mechanisms>` that clients can use to verify
their identity. These mechanisms allow MongoDB to integrate into your
existing authentication system. See
:ref:`security-authentication-mechanisms` for details.

In addition to verifying the identity of a client, MongoDB can require
members of replica sets and sharded clusters to :ref:`authenticate
their membership <inter-process-auth>` to their respective
replica set or sharded cluster. See :ref:`inter-process-auth`
for more information.

Client Users
------------

To authenticate a client in MongoDB, you must add a corresponding user
to MongoDB. When adding a user, you create the user in a specific
database. Together, the user's name and database serve as a unique
identifier for that user. That is, if two users have the same name but
are created in different databases, they are two separate users. To
authenticate, the client must authenticate the user against the user's
database. For instance, if using the :program:`mongo` shell as a
client, you can specify the database for the user with the
:ref:`--authenticationDatabase <mongo-shell-authentication-options>`
option.

To add and manage user information, MongoDB provides the
:method:`db.createUser()` method as well as other :ref:`user management
methods <user-management-methods>`. For an example of adding a user to
MongoDB, see :doc:`/tutorial/add-user-to-database`.

MongoDB stores all user information, including :data:`name
<admin.system.users.user>`, :data:`password
<admin.system.users.credentials>`, and the :data:`user's database
<admin.system.users.db>`, in the :doc:`system.users
</reference/system-users-collection>` collection in the ``admin``
database.

.. _security-authentication-mechanisms:

Authentication Mechanisms
-------------------------

MongoDB supports multiple authentication mechanisms. MongoDB's default
authentication method is a :ref:`challenge and response mechanism
(MONGODB-CR) <authentication-mongodb-cr>`. MongoDB also supports
:ref:`x509 certificate authentication <security-auth-x509>`, :ref:`LDAP
proxy authentication <security-auth-ldap>`, and :ref:`Kerberos
authentication <security-auth-kerberos>`.

This section introduces the mechanisms available in MongoDB.

To specify the authentication mechanism to use, see
:parameter:`authenticationMechanisms`.

.. _authentication-mongodb-cr:

``MONGODB-CR`` Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``MONGODB-CR`` is a challenge-response mechanism that authenticates
users through passwords. ``MONGODB-CR`` is the default mechanism.

When you use ``MONGODB-CR`` authentication, ``MONGODB-CR`` verifies the
user against the user's :data:`name <admin.system.users.user>`,
:data:`password <admin.system.users.credentials>` and :data:`database
<admin.system.users.db>`. The user's database is the database where the
user was created, and the user's database and the user's name together
serves to identify the user.

Using :setting:`key files <security.keyFile>`, you can also use
``MONGODB-CR`` authentication for the :ref:`internal member
authentication <inter-process-auth>` of replica set members and sharded
cluster members. The contents of the key files serve as the shared
password for the members. You must store the key file on each
:program:`mongod` or :program:`mongos` instance for that replica set or
sharded cluster. The content of the key file is arbitrary but must be
the same on all :program:`mongod` and :program:`mongos` instances that
connect to each other.

See :doc:`/tutorial/generate-key-file` for instructions on generating a
key file and turning on key file authentication for members.

.. _security-auth-x509:

x.509 Certificate Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.6

MongoDB supports x.509 certificate authentication for use with a secure
:doc:`SSL connection </tutorial/configure-ssl>`.

To authenticate to servers, clients can use x.509 certificates instead
of usernames and passwords. See :ref:`x509-client-authentication` for
more information.

For membership authentication, members of sharded clusters and replica
sets can use x.509 certificates instead of key files. See
:ref:`x509-internal-authentication` for more information.

.. _security-auth-kerberos:

Kerberos Authentication
~~~~~~~~~~~~~~~~~~~~~~~

`MongoDB Enterprise <http://www.mongodb.com/products/mongodb-enterprise>`_
supports authentication using a Kerberos service. Kerberos is an industry
standard authentication protocol for large client/server systems.

To use MongoDB with Kerberos, you must have a properly configured
Kerberos deployment, configured :ref:`Kerberos service principals
<kerberos-service-principal>` for MongoDB, and added :ref:`Kerberos
user principal <kerberos-user-principal>` to MongoDB.

See :doc:`/core/kerberos` for more information on Kerberos and MongoDB.
To configure MongoDB to use Kerberos authentication, see
:doc:`/tutorial/control-access-to-mongodb-with-kerberos-authentication`
and
:doc:`/tutorial/control-access-to-mongodb-windows-with-kerberos-authentication`.

.. _security-auth-ldap:

LDAP Proxy Authority Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`MongoDB Enterprise <http://www.mongodb.com/products/mongodb-enterprise>`_
supports proxy authentication through a Lightweight Directory Access
Protocol (LDAP) service. See
:doc:`/tutorial/configure-ldap-sasl-openldap` and
:doc:`/tutorial/configure-ldap-sasl-activedirectory`.

.. include:: /includes/admonition-mongodb-enterprise-windows-ldap.rst

MongoDB does **not** support LDAP authentication in mixed sharded cluster
deployments that contain both version 2.4 and version 2.6 shards.

Authentication Behavior
-----------------------

.. _client-authentication:

Client Authentication
~~~~~~~~~~~~~~~~~~~~~

Clients can authenticate using the :ref:`challenge and response
<authentication-mongodb-cr>`, :ref:`x.509 <security-auth-x509>`,
:ref:`LDAP Proxy <security-auth-ldap>` and :ref:`Kerberos
<security-auth-kerberos>` mechanisms.

Each client connection should authenticate as exactly one user. If a
client authenticates to a database as one user and later authenticates
to the same database as a different user, the second authentication
invalidates the first. While clients can authenticate as multiple users
if the users are defined on different databases, we recommend
authenticating as one user at a time, providing the user with
appropriate privileges on the databases required by the user.

See :doc:`/tutorial/authenticate-as-client` for more information.

.. _inter-process-auth:

Authentication Between MongoDB Instances
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can authenticate members of :term:`replica sets <replica set>` and
:term:`sharded clusters <sharded cluster>`. To authenticate members of
a single MongoDB deployment to each other, MongoDB can use the
:setting:`~security.keyFile` and :ref:`x.509 <security-auth-x509>`
mechanisms. Using :setting:`~security.keyFile` authentication for
members also enables authorization.

.. Not sure if the following need to go into the security-checklist
   with a link, because the content seems more best practices
   rather than intro to concepts -- not to mention, the content
   goes from replica sets/sharded clusters, then include clients, and then
   specify to keyFile when we state above you can
   use both keyfile and x509.

Always run replica sets and sharded clusters in a trusted networking
environment. Ensure that the network permits only trusted traffic to reach
each :program:`mongod` and :program:`mongos` instance.

Use your environment's firewall and network routing to ensure that traffic
*only* from clients and other members can reach your :program:`mongod` and
:program:`mongos` instances. If needed, use virtual private networks
(VPNs) to ensure secure connections over wide area networks (WANs).

Always ensure that:

- Your network configuration will allow every member of the replica set or
  sharded cluster to contact every other member.

- If you use MongoDB's authentication system to limit access to your
  infrastructure, ensure that you configure a :setting:`~security.keyFile` on all
  members to permit authentication.

See :doc:`/tutorial/generate-key-file` for instructions on generating a
key file and turning on key file authentication for members. For an
example of using key files for sharded cluster authentication, see
:doc:`/tutorial/enable-authentication-in-sharded-cluster`.

.. index:: sharding; localhost
.. _sharding-localhost:
.. _sharding-security:

Authentication on Sharded Clusters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In sharded clusters, applications authenticate to directly to
:program:`mongos` instances, using credentials stored in the ``admin``
database of the the
:term:`config servers <config server>`. The shards in the sharded
cluster also have credentials, and clients can authenticate directly
to the shards to perform maintenance directly on the shards. In
general, applications and clients should connect to the
sharded cluster through the :program:`mongos`.

.. versionchanged:: 2.6
   Previously, the credentials for authenticating to a database on a
   cluster resided on the :ref:`primary shard <primary-shard>` for that
   database.

Some maintenance operations, such as :dbcommand:`cleanupOrphaned`,
:dbcommand:`compact`, :method:`rs.reconfig()`, require direct
connections to specific shards in a sharded cluster. To perform these
operations with authentication enabled, you must connect directly to
the shard and authenticate as a *shard local* administrative user. To
create a *shard local* administrative user, connect directly to the
shard and create the user. MongoDB stores *shard local* users in the
``admin`` database of the shard itself. These *shard local* users are
completely independent from the users added to the sharded cluster via
:program:`mongos`. *Shard local* users are local to the shard and are
inaccessible by :program:`mongos`. Direct connections to a shard should
only be for shard-specific maintenance and configuration.

.. _localhost-exception:

Localhost Exception
~~~~~~~~~~~~~~~~~~~

The localhost exception allows you to enable authorization before
creating the first user in the system. When active, the localhost
exception allows all connections from the localhost interface to have
full access to that instance. The exception applies only when there are
no users created in the MongoDB instance.

If you use the localhost exception when deploying a new MongoDB system,
the first user you create must be in the ``admin`` database with
privileges to create other users, such as a user with the
:authrole:`userAdmin` or :authrole:`userAdminAnyDatabase` role. See
:doc:`/tutorial/enable-authentication` and
:doc:`/tutorial/add-user-administrator` for more information.

In the case of a sharded cluster, the localhost exception can apply to
the cluster as a whole or separately to each shard. The localhost
exception can apply to the cluster as a whole if there are no user
information stored on the config servers *and* clients access via
:program:`mongos` instances.

The localhost exception can apply separately to each shard if there is
no user information stored on the shard itself and clients connect to
the shard directly.

To prevent unauthorized access to a cluster's shards, you must either
create an administrator on each shard or disable the localhost exception.
To disable the localhost exception, use :setting:`setParameter` to set the
:parameter:`enableLocalhostAuthBypass` parameter to ``0`` during startup.
