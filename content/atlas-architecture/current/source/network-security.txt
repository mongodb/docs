.. _arch-center-network-security:

=========================================
Guidance for {+service+} Network Security 
=========================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta::
   :description: Learn about the network security configurations that Atlas supports.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

{+service+} provides secure network configuration defaults for your
database deployments, such as:

- Mandatory |tls-ssl| connection encryption
- {+vpc+}\s for all projects with one-or-more {+Dedicated-clusters+}
- Authentication that uses {+ip-access-list+}s and only accepts database connections
  from sources you explicitly declare

You can further configure these protections to meet your unique security
needs and preferences.

Use the recommendations on this page to plan for the network security
configuration of your {+clusters+}.

Features for {+service+} Network Security
-----------------------------------------

{+service+} enforces |tls-ssl| encryption for all connections to your
databases.

We recommend using M10+ dedicated {+clusters+} because all {+service+} projects with 
one or more M10+ dedicated {+clusters+} receive their own dedicated: 

- |vpc| on {+aws+} or {+gcp+}. 
- {+vnet+} on |azure|.

{+service+} deploys all dedicated clusters inside this |vpc| or {+vnet+}.

By default, all access to your {+clusters+} is blocked. You must explicitly allow 
an inbound connection by one of the following methods:

- Add private endpoints, which {+service+} adds automatically to your {+ip-access-list+}. 
  No other access is automatically added.
- Use |vpc| / {+vnet+} peering to add private IP addresses.
- Add public IP addresses to your {+ip-access-list+}.

You can also use multiple methods together for added security.

|tls|
~~~~~~~~~~~~~~

{+service+} enforces mandatory |tls| encryption of connections to your
databases. |tls| 1.2 is the default protocol. To learn more, see the
:guilabel:`Set Minimum TLS Protocol Version` section of
:ref:`Configure Additional Settings
<create-cluster-additional-settings>`.

{+ip-access-list+}s
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As an |service| administrator, you can:

You can configure {+ip-access-list+}s to limit which IP addresses can
attempt authentication to your database.

Your {+service+} {+clusters+} allow access only from the IP addresses
and |cidr| block IP ranges that you add to your {+ip-access-list+}.
Application servers and other clients can't access your {+service+}
{+clusters+} if their IP addresses aren't included in your {+ip-access-list+}.

You can configure :atlas:`temporary access list entries
</security/ip-access-list/#add-ip-access-list-entries>`
that expire automatically after a user-defined period.

Firewall Configuration
~~~~~~~~~~~~~~~~~~~~~~

When connecting from your client application servers to {+service+} and passing 
through a firewall that blocks outbound network connections, you must also configure 
your firewall to allow your applications to make outbound connections to TCP traffic 
on {+service+} hosts. This grants your applications access to your {+clusters+}.

{+service+} {+cluster+} public IPs remain the same in the majority of
cases of {+cluster+} changes such as :ref:`vertical scaling
<sizing-auto-scaling>`,
:atlas:`topology </reference/glossary/#std-term-topology>` changes, or
:ref:`maintenance events <configure-maintenance-window>`. However,
certain topology changes, such as a :ref:`conversion from replica set
to sharded cluster <scale-cluster-sharding>`, the
:ref:`addition of shards <scale-cluster-shardNum>`, or a :ref:`region
change <scale-cluster-region>` require that you use new IP addresses. 

In the case of converting from a replica set to a sharded cluster, the 
failure to reconnect the application clients might cause your application 
to suffer from data outages. If you use a |dns| seed list 
connection string, your application automatically connects to the |mongos| 
for your sharded cluster. If you use a standard connection string, 
you must update your connection string to reflect your new cluster topology.

In the case of adding new shards, the failure to reconnect the application 
clients may cause your application to suffer from a data outage.

Private Endpoints
~~~~~~~~~~~~~~~~~

A private endpoint facilitates a one-way connection from your own |vpc|
to your {+service+} |vpc|, without permitting {+service+} to initiate a
reciprocal connection. This allows you to make use of secure connections
to {+service+} without extending your network trust boundary. The following
private endpoints are available:

- {+aws+} :aws:`PrivateLink </vpc/latest/userguide/endpoint-services-overview.html>`,
  for connections from {+aws+} |vpc|\s
- {+azure+} :azure:`Private Link </private-link/private-link-overview>`,
  for connections from {+azure+} {+vnet+}s
- :gcp:`Private Service Connect </vpc/docs/private-service-connect>`,
  for connections from {+gcp+} |vpc|\s

.. figure:: /includes/images/private-link.svg
   :alt: "An image representing how MongoDB Atlas private endpoints work."
   :figwidth: 750px

VPC/{+vnet+} Peering
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Network peering allows you to connect your own |vpc|\s with |a-service|
|vpc| to route traffic privately and isolate your data flow from the
public Internet. {+service+} maps |vpc|\s one-to-one to {+service+} projects.

Most operations performed over a |vpc| connection originate from your
application environment, minimizing the need for {+service+} to make
outbound access requests to peer |vpc|\s. However, if you configure {+service+}
to use |ldap| authentication, you must enable {+service+} to
connect outbound to the authentication endpoint of your peer |vpc| over the |ldap|
protocol. Note that |ldap| authentication is deprecated on {+service+} with 8.0. 
We recommend that you use {+wif+} and |workload| instead.

You can choose your {+service+} |cidr| block with the |vpc| peering wizard
before you deploy your first {+cluster+}. The {+service+} |vpc| |cidr|
block must not overlap with the |cidr| block of any |vpc| you intend to
peer to. {+service+} limits the number of MongoDB instances per |vpc|
based on the |cidr| block. For example, a project with a |cidr| block of
``/24`` is limited to the equivalent of 27 3-node replica sets.

.. figure:: /includes/images/vpc-vnet-peering.svg
   :alt: "An image representing how MongoDB Atlas VPC/VNet peering works."
   :figwidth: 750px

.. _arch-center-network-security-recs:

Recommendations for {+service+} Network Security
------------------------------------------------

Private Endpoints
~~~~~~~~~~~~~~~~~

We recommend that you set up private endpoints for all new staging and production projects to limit the extension of your network trust
boundary.

In general, we recommend using private endpoints for every {+service+} project 
because it provides the most granular security and eases the administrative burden 
that can come from managing {+ip-access-list+}\s and large blocks of IP addresses 
as your cloud network scales. There is a cost associated with each endpoint, so you 
might consider not requiring private endpoints in lower environments but you should 
leverage them in higher environments to limit the extension of your network trust 
boundary.

To learn more about private endpoints
in {+service+}, including limitations and considerations, see :atlas:`Learn About Private Endpoints in {+service+} </security-private-endpoint/>`. To learn how to set up private
endpoints for your {+clusters+}, see
:atlas:`Set Up a Private Endpoint for a Dedicated Cluster </security-cluster-private-endpoint/>`.

IP Access Lists
~~~~~~~~~~~~~~~

We recommend that you configure an {+ip-access-list+} for your API keys and programmatic 
access to allow access only from trusted IP addresses such as your CI/CD pipeline 
or orchestration system. These {+ip-access-list+}\s are set on the {+service+} 
control plane upon provisioning a service account and are separate from {+ip-access-list+}\s
which can be set on the {+service+} project data plane for connections to the {+clusters+}. 

When you configure your {+ip-access-list+}, we recommend that you:

- Use temporary access list entries in situations where team members
  require access to your environment from temporary work locations or during 
  break-glass scenarios where production access to humans is required to resolve 
  a production-down scenario. We recommend that you build an automation script to 
  quickly add temporary access to prepare for these incidents.
- Define {+ip-access-list+} entries covering the smallest network segments
  possible. To do this, favor individual IP addresses where possible,
  and avoid large |cidr| blocks.

VPC/{+vnet+} Peering
~~~~~~~~~~~~~~~~~~~~

If you configure |vpc| or {+vnet+} peering, we recommend that you:

- To maintain tight network trust boundaries, configure security groups
  and :aws:`network ACLs </vpc/latest/userguide/vpc-network-acls.html>`
  to prevent inbound access to systems inside your application |vpc|\s
  from the {+service+}-side |vpc|.
  
- Create new |vpc|\s to act as intermediaries between sensitive
  application infrastructure and your {+service+} |vpc|\s. |vpc|\s are
  intransitive, allowing you to only expose those components of your
  application that need access to {+service+}.

Automation Examples: {+service+} Network Security
-------------------------------------------------

.. include:: /includes/complete-examples.rst

The following examples configure connections between your application
environment and your {+service+} {+clusters+} using {+ip-access-list+}s,
|vpc| Peering, and Private Endpoints.

These examples also apply other recommended configurations, including:

.. tabs::

   .. tab:: Dev and Test Environments
      :tabid: devtest

      .. include:: /includes/shared-settings-clusters-devtest.rst

   .. tab:: Staging and Prod Environments
      :tabid: stagingprod

      .. include:: /includes/shared-settings-clusters-stagingprod.rst

.. tabs::

   .. tab:: CLI
      :tabid: cli

      .. note::

         Before you can configure connections with the {+atlas-cli+},
         you must:

         - :atlas:`Create your paying organization 
           </billing/#configure-a-paying-organization>` and
           :atlas:`create an API key </configure-api-access/>` for the
           paying organization.
         - :atlascli:`Install the {+atlas-cli+} </install-atlas-cli/>` 
         - :atlascli:`Connect from the {+atlas-cli+}
           </connect-atlas-cli/>` using the steps for
           :guilabel:`Programmatic Use`.

      Create an {+ip-access-list+} Entry
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      Run the following command for each connection you want to
      allow. Change the entries to use the appropriate options and
      your actual values:

      .. code-block::
         :copyable: true

         atlas accessList create 192.0.2.15 --type ipAddress --projectId 5e2211c17a3e5a48f5497de3 --comment "IP address for app server 2" --output json

      For more configuration options and information about this
      example, see :ref:`atlas-accessLists-create`.

      For information on how to create an {+ip-access-list+} entry
      with |aws|, |gcp| and |azure|, see
      :atlas:`Set Up a Private Endpoint for a Dedicated Cluster
      </security-cluster-private-endpoint/#follow-these-steps>`

      Create a VPC Peering Connection
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      Run the following command for each |vpc| you want to peer to your
      {+service+} |vpc|. Replace ``aws`` with ``azure`` or ``gcp`` as
      appropriate, and change the options and values to the
      appropriate ones for your |vpc| or {+vnet+}:

      .. code-block::
         :copyable: true

	 atlas networking peering create aws --accountId 854333054055 --atlasCidrBlock 192.168.0.0/24 --region us-east-1 --routeTableCidrBlock 10.0.0.0/24 --vpcId vpc-078ac381aa90e1e63

      For more configuration options and information about this example, see:

      - :ref:`atlas-networking-peering-create-aws`, for {+aws+} |vpc|\s
      - :ref:`atlas-networking-peering-create-azure`, for {+azure+} {+vnet+}s
      - :ref:`atlas-networking-peering-create-gcp`, for {+gcp+} |vpc|\s

      Create a Private Endpoint
      ~~~~~~~~~~~~~~~~~~~~~~~~~

      Run the following command for each private endpoint you want to
      create. Replace ``aws`` with ``azure`` or ``gcp`` as
      appropriate, and change the options and values to the
      appropriate ones for your |vpc| or {+vnet+}:

      .. code-block::
         :copyable: true

         atlas privateEndpoints aws create --region us-east-1 --projectId 5e2211c17a3e5a48f5497de3 --output json

      For more configuration options and information about this example, see:

      - :ref:`atlas-privateEndpoints-aws-create`, for connections from {+aws+} |vpc|\s
      - :ref:`atlas-privateEndpoints-azure-create`, for connections from {+azure+} {+vnet+}s
      - :ref:`atlas-privateEndpoints-gcp-create`, for connections from {+gcp-psc+}


   .. tab:: Terraform
      :tabid: Terraform

      .. note::

         Before you can create resources with Terraform, you must:

         - :atlas:`Create your paying organization 
           </billing/#configure-a-paying-organization>` and :atlas:`create an API key </configure-api-access/>` for the
           paying organization. Store your API key as environment
           variables by running the following command in the terminal:

           .. code-block::

              export MONGODB_ATLAS_PUBLIC_KEY="<insert your public key here>"
              export MONGODB_ATLAS_PRIVATE_KEY="<insert your private key here>"

         - `Install Terraform 
           <https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli>`__
         
         We also suggest `creating a workspace for your enviornment
         <https://developer.hashicorp.com/terraform/cloud-docs/recommended-practices/part1#one-workspace-per-environment-per-terraform-configuration>`__.  

      Create an {+ip-access-list+} Entry
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      To add an entry to your {+ip-access-list+}, create the following
      file and place it in the directory of the project you want to
      grant access to. Change the IDs and names to use your values:

      accessEntryForAddress1.tf
      `````````````````````````````

      .. include:: /includes/examples/tf-example-access-entry-for-add-1.rst

      After you create the files, navigate to your project directory
      and run the following command to initialize Terraform:

      .. code-block::

         terraform init

      Run the following command to view the Terraform plan:

      .. code-block::

         terraform plan

      Run the following command to add one entry to the {+ip-access-list+}
      for your project. The command uses the file and the
      |service-terraform| to add the entry.

      .. code-block::

         terraform apply

      When prompted, type ``yes`` and press :kbd:`Enter` to apply
      the configuration.

      Create a VPC Peering Connection
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      To create a peering connection between your application |vpc| and
      your {+service+} |vpc|, create the following file and place it in
      the directory of the project you want to grant access to. Change
      the IDs and names to use your values:

      vpcConnection.tf
      ````````````````

      .. include:: /includes/examples/tf-example-vpc-connection.rst

      After you create the file, navigate to your project directory
      and run the following command to initialize Terraform:

      .. code-block::

          terraform init

      Run the following command to view the Terraform plan:

      .. code-block::

         terraform plan

      Run the following command to add a |vpc| peering connection from
      your application to your project. The command uses the file and
      the |service-terraform| to add the entry.

      .. code-block::

         terraform apply

      When prompted, type ``yes`` and press :kbd:`Enter` to apply
      the configuration.

      Create a Private Link
      ~~~~~~~~~~~~~~~~~~~~~

      To create a PrivateLink from your application |vpc| to
      your {+service+} |vpc|, create the following file and place it in
      the directory of the project you want to connect to. Change
      the IDs and names to use your values:

      privateLink.tf
      ``````````````

      .. include:: /includes/examples/tf-example-private-link.rst

      After you create the file, navigate to your project directory
      and run the following command to initialize Terraform:

      .. code-block::

         terraform init

      Run the following command to view the Terraform plan:

      .. code-block::

         terraform plan

      Run the following command to add a PrivateLink endpoint from
      your application to your project. The command uses the file and
      the |service-terraform| to add the entry.

      .. code-block::

         terraform apply

      When prompted, type ``yes`` and press :kbd:`Enter` to apply
      the configuration.

