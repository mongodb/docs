.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: code example, node.js

.. meta::
   :keywords: queryable encryption, contention

.. _qe-fundamentals-encrypt-query:
.. _qe-encryption-schema:

====================================
Encrypted Fields and Enabled Queries
====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

When you use {+qe+}, you define encrypted fields at the collection level 
using an {+enc-schema+}. Encrypting a field and enabling queries
increases storage requirements and impacts query performance. You can 
configure an encrypted field for either equality or range queries,
but not both. Configure fields for the expected query type.

For instructions on creating an {+enc-schema+} and configuring
querying, see :ref:`qe-create-encryption-schema`.


.. _qe-query-types:

Supported Query Types and Behavior
----------------------------------

For a list of supported query operators and behavior with encrypted fields, see :ref:`qe-supported-query-operators`.


Client and Server Schema Validation
-----------------------------------

.. content copied from source/core/csfle/fundamentals/automatic-encryption.txt

MongoDB supports using :ref:`schema validation <schema-validation-overview>`
to enforce encryption of specific fields in a collection. Clients using
automatic {+qe+} behave differently depending on the database connection configuration:

- If the connection ``encryptedFieldsMap`` object contains a key for the
  specified collection, the client uses that object to perform
  automatic {+qe+}, rather than using the remote schema. At minimum, 
  the local rules must encrypt all fields that the remote schema does.

- If the connection ``encryptedFieldsMap`` object doesn't contain a
  key for the specified collection, the client downloads the
  server-side remote schema for the collection and uses it instead.

  .. important:: Remote Schema Behavior

     When using a remote schema:

     - The client trusts that the server has a valid schema
     
     - The client uses the remote schema to perform automatic {+qe+} 
       only. The client does not enforce any other validation rules 
       specified in the schema.


Considerations when Enabling Querying
-------------------------------------

You can make an encrypted field queryable. To change which fields are encrypted
or queryable, rebuild the collection's {+enc-schema+} and re-create the
collection.

If you don't need to query an encrypted field, you may not need to enable
querying on that field. You can still retrieve the document by querying other
fields that are queryable or unencrypted. 

For every encrypted collection, MongoDB creates :ref:`two metadata
collections <qe-metadata-collections>`, increasing storage space. MongoDB
creates an index for each encrypted field, which increases the duration of
write operations on that field. When a write operation updates an indexed 
field, MongoDB updates the related index.


.. _qe-field-configuration:

Configure Encrypted Fields for Optimal Search and Storage
---------------------------------------------------------

MongoDB provides the following parameters to facilitate debugging 
and performance tuning:

.. |equality| replace:: Equality queries only.
.. |range| replace:: Range queries only.
.. |both| replace:: Equality and range queries.

.. _qe-field-min-max:

.. parameter:: min, max

   *Query Type*: |range|

   *Type*: Must match the field's ``bsonType``.

   Required if ``bsonType`` is ``decimal`` or ``double``. Optional
   but highly recommended if it is ``int``, ``long``, or ``date``. Defaults to
   the ``bsonType`` min and max values.
   
   Specify minimum and maximum (inclusive) queryable values for a
   field when possible, as smaller bounds improve query efficiency. If querying
   values outside of these bounds, MongoDB returns an error.

.. important::
   
   The :ref:`sparsity<qe-field-sparsity>`, 
   :ref:`precision<qe-field-precision>`, 
   :ref:`trimFactor<qe-field-trimfactor>`, 
   and :ref:`contention<qe-contention>` 
   parameters are intended for advanced users only. The 
   default values for these options are suitable for the majority
   of use cases, and should only be modified if your use case 
   requires it.

.. _qe-field-sparsity:

.. parameter:: sparsity

   *Query Type*: |range|

   *Type*: Integer from ``1``-``4``.

   Optional. Defaults to ``2``.

   Affects how thoroughly MongoDB indexes range values. Low sparsity (dense
   indexing) improves query performance, but stores more documents in the
   encrypted metadata collections for each insert or update operation, causing 
   greater storage overhead. High sparsity does the opposite.

.. _qe-field-precision:

.. parameter:: precision

   *Query Type*: |range|

   *Type*: Integer.
   
   Optional. Allowed only if ``bsonType`` is ``double`` or ``decimal``. 
   If unset, MongoDB uses the same maximum precision as the ``bsonType``, 
   either ``double`` or ``decimal``.
   
   Determines how many digits are taken into account when querying a 
   ``double`` or ``decimal`` field. Every additional digit increases storage
   overhead, and has a high impact on searchable range and index generation.
   This parameter bounds the precision of range queries. Different 
   ``precision`` values affect the query output, though encrypted values are 
   still stored with full precision.

.. _qe-field-trimfactor:

.. parameter:: trimFactor

   *Query Type*: |range|

   *Type*: Integer.

   Optional. Defaults to ``6``.
   
   The ``trimFactor`` controls the throughput of concurrent inserts and updates.
   A higher ``trimFactor`` increases the throughput of concurrent insert and 
   updates at the cost of slowing down some range read operations. A lower 
   ``trimFactor`` does the opposite. 

.. _qe-contention:

.. parameter:: contention

   *Query Type*: |both|

   *Type*: Integer.

   Optional. Defaults to ``8``.

   .. include:: /includes/queryable-encryption/qe-csfle-contention.rst

   You can optionally include ``contention`` on queryable fields to change the
   value from its default of ``8``. 

   For more thorough information on contention factor and its cryptographic 
   implications, see "Section 9: Guidelines" in MongoDB's 
   `Queryable Encryption Technical Paper <https://www.mongodb.com/resources/products/capabilities/queryable-encryption-technical-paper>`_.