=========================
db.collection.aggregate()
=========================

.. default-domain:: mongodb

.. versionadded:: 2.2

Definition
----------

.. method:: db.collection.aggregate(pipeline, options)

   Calculates aggregate values for the data in a collection.

   .. include:: /reference/method/db.collection.aggregate-param.rst

   The ``options`` document can contain the following fields and values:

   .. include:: /reference/method/db.collection.aggregate-options.rst

   :returns:
      A :term:`cursor` to the documents produced by the final stage of
      the aggregation pipeline operation, or if you include the
      ``explain`` option, the document that provides
      details on the processing of the aggregation operation.

      If the pipeline includes the :pipeline:`$out` operator,
      :method:`~db.collection.aggregate()` returns an empty cursor. See
      :pipeline:`$out` for more information.

      .. include:: /includes/fact-agg-helper-returns-cursor.rst

.. include:: /includes/fact-agg-helper-exception.rst

.. seealso:: For more information, see
   :doc:`/core/aggregation-pipeline`, :doc:`/reference/aggregation`,
   :doc:`/core/aggregation-pipeline-limits`, and :dbcommand:`aggregate`.

Cursor Behavior
---------------

In the :program:`mongo` shell, if the cursor returned from the
:method:`db.collection.aggregate()` is not assigned to a variable using
the ``var`` keyword, then the :program:`mongo` shell automatically
iterates the cursor up to 20 times. See :doc:`/core/cursors` for cursor
behavior in the :program:`mongo` shell and
:doc:`/tutorial/iterate-a-cursor` for handling cursors in the
:program:`mongo` shell.

Cursors returned from aggregation only supports cursor methods that
operate on evaluated cursors (i.e. cursors whose first batch has been
retrieved), such as the following methods:

.. hlist::
   :columns: 2

   * :method:`cursor.hasNext()`
   * :method:`cursor.next()`
   * :method:`cursor.toArray()`
   * :method:`cursor.forEach()`
   * :method:`cursor.map()`
   * :method:`cursor.objsLeftInBatch()`
   * :method:`cursor.itcount()`
   * :method:`cursor.pretty()`

Examples
--------

The examples in this section use the
:method:`db.collection.aggregate()` helper provided in the 2.6 version
of the :program:`mongo` shell.

The following examples use the collection ``orders`` that contains the
following documents:

.. code-block:: javascript

   { _id: 1, cust_id: "abc1", ord_date: ISODate("2012-11-02T17:04:11.102Z"), status: "A", amount: 50 }
   { _id: 2, cust_id: "xyz1", ord_date: ISODate("2013-10-01T17:04:11.102Z"), status: "A", amount: 100 }
   { _id: 3, cust_id: "xyz1", ord_date: ISODate("2013-10-12T17:04:11.102Z"), status: "D", amount: 25 }
   { _id: 4, cust_id: "xyz1", ord_date: ISODate("2013-10-11T17:04:11.102Z"), status: "D", amount: 125 }
   { _id: 5, cust_id: "abc1", ord_date: ISODate("2013-11-12T17:04:11.102Z"), status: "A", amount: 25 }

Group by and Calculate a Sum
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following aggregation operation selects documents with status equal
to ``"A"``, groups the matching documents by the ``cust_id`` field and
calculates the ``total`` for each ``cust_id`` field from the sum of the
``amount`` field, and sorts the results by the ``total`` field in
descending order:

.. code-block:: javascript

   db.orders.aggregate([
                        { $match: { status: "A" } },
                        { $group: { _id: "$cust_id", total: { $sum: "$amount" } } },
                        { $sort: { total: -1 } }
                      ])

The operation returns a cursor with the following documents:

.. code-block:: javascript

   { "_id" : "xyz1", "total" : 100 }
   { "_id" : "abc1", "total" : 75 }

.. include:: /includes/note-mongo-shell-automatically-iterates-cursor.rst

.. _example-aggregate-method-explain-option:

Return Information on Aggregation Pipeline Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following aggregation operation sets the option ``explain`` to
``true`` to return information about the aggregation operation.

.. code-block:: javascript

   db.orders.aggregate(
                        [
                          { $match: { status: "A" } },
                          { $group: { _id: "$cust_id", total: { $sum: "$amount" } } },
                          { $sort: { total: -1 } }
                        ],
                        {
                          explain: true
                        }
                      )

The operation returns a cursor with the document that contains detailed
information regarding the processing of the aggregation pipeline. For
example, the document may show, among other details, which index, if
any, the operation used. [#agg-index-filters]_ If the ``orders`` collection
is a sharded collection, the document would also show the division of
labor between the shards and the merge operation, and for targeted
queries, the targeted shards.

.. note:: The intended readers of the ``explain`` output document are humans, and
   not machines, and the output format is subject to change between
   releases.

.. include:: /includes/note-mongo-shell-automatically-iterates-cursor.rst

.. _example-aggregate-method-external-sort:

Perform Large Sort Operation with External Sort
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Aggregation pipeline stages have :ref:`maximum memory use limit
<agg-memory-restrictions>`. To handle large datasets, set
``allowDiskUse`` option to ``true`` to enable writing data to
temporary files, as in the following example:

.. code-block:: javascript

   var results = db.stocks.aggregate(
                                      [
                                        { $project : { cusip: 1, date: 1, price: 1, _id: 0 } },
                                        { $sort : { cusip : 1, date: 1 } }
                                      ],
                                      {
                                        allowDiskUse: true
                                      }
                                    )

.. _example-aggregate-method-initial-batch-size:

Specify an Initial Batch Size
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To specify an initial batch size for the cursor, use the following
syntax for the ``cursor`` option:

.. code-block:: javascript

   cursor: { batchSize: <int> }

For example, the following aggregation operation specifies the
*initial* batch size of ``0`` for the cursor:

.. code-block:: javascript

   db.orders.aggregate(
                        [
                          { $match: { status: "A" } },
                          { $group: { _id: "$cust_id", total: { $sum: "$amount" } } },
                          { $sort: { total: -1 } },
                          { $limit: 2 }
                        ],
                        {
                          cursor: { batchSize: 0 }
                        }
                      )

A ``batchSize`` of ``0`` means an empty
first batch and is useful for quickly returning a cursor or failure
message without doing significant server-side work. Specify subsequent
batch sizes to :ref:`OP_GET_MORE <wire-op-get-more>` operations as with
other MongoDB cursors.

.. include:: /includes/note-mongo-shell-automatically-iterates-cursor.rst

.. [#agg-index-filters] :ref:`index-filters` can affect the choice of index
   used. See :ref:`index-filters` for details.
