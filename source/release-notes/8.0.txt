.. _release-notes-8.0:

=============================
Release Notes for MongoDB 8.0
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

This page describes changes and new features introduced in MongoDB 8.0.

MongoDB 8.0 is a |lts| Release, which means that it is supported for
both MongoDB Atlas and on-premises deployments. MongoDB 8.0 includes
changes introduced in MongoDB Rapid Releases 7.1, 7.2, and 7.3. This page 
describes changes introduced in those Rapid Releases and MongoDB 8.0.

To learn more about the differences between |lts| and Rapid releases,
see :ref:`release-version-numbers`. 

Patch Releases
--------------

.. _8.0.4-release-notes:

8.0.4 - Dec 9, 2024
~~~~~~~~~~~~~~~~~~~

- :issue:`SERVER-73641` Time series filtering can miss extended-range
  events when sharded
- :issue:`SERVER-82037` Memory used by sorter spills can grow without
  bound
- :issue:`SERVER-94559` Time series measurement deletes update the
  minTime of a bucket
- :issue:`SERVER-95067` Time series inserts can generate multiple
  batches referencing the same bucket
- :issue:`SERVER-95724` ReshardingOplogSessionApplication clones
  retryable applyOps session info with admin.$cmd as affectedNamespace
- `All Jira issues closed in 8.0.4
  <https://jira.mongodb.org/issues/?jql=project%20in%20(SERVER%2CTOOLS%2CWT)%20AND%20resolution%3D%27Fixed%27%20and%20fixversion%3D8.0.4>`__
- :ref:`8.0.4-changelog`

.. _8.0.3-release-notes:

8.0.3 - Oct 24, 2024
~~~~~~~~~~~~~~~~~~~~

.. |cve-version-list| replace:: MongoDB 8.0 and 8.0.1

.. include:: /includes/security/cve-null-bytes.rst

Issues fixed: 

- :issue:`SERVER-96419` Improper neutralization of null bytes may lead 
  to buffer over-reads in MongoDB Server
- `All Jira issues closed in 8.0.3 
  <https://jira.mongodb.org/issues/?jql=project%20in%20(SERVER%2CTOOLS%2CWT)%20AND%20resolution%3D%27Fixed%27%20and%20fixversion%20in%20(8.0.2,%208.0.3)>`__
- :ref:`8.0.3-changelog`

.. _8.0.1-release-notes:

8.0.1 - Oct 9, 2024
~~~~~~~~~~~~~~~~~~~

Issues fixed: 

- :issue:`SERVER-76883` Reduce chattiness of "Role does not exist" logs
  for externally sourced users
- :issue:`SERVER-82221` listCollections and listIndexes should include
  commit-pending namespaces
- :issue:`SERVER-94635` Make session refresh parameters configurable
- :issue:`SERVER-95244` Upsert statements which result in an insert may
  fail with tassert 9146500 when client connects directly to shard
- :issue:`WT-13409` One ret in __txn_checkpoint is not handled
- `All Jira issues closed in 8.0.1
  <https://jira.mongodb.org/issues/?jql=project%20in%20(SERVER%2CTOOLS%2CWT)%20AND%20resolution%3D%27Fixed%27%20and%20fixversion%3D8.0.1>`__
- :ref:`8.0.1-changelog`

.. _8.0.0-release-notes:

8.0.0 - Oct 2, 2024
~~~~~~~~~~~~~~~~~~~

The rest of this page describes changes and new features introduced in MongoDB 
8.0.

Platform Support Updates
------------------------

.. include:: includes/platform-support-updates.rst

Logging
-------

Starting in MongoDB 8.0, you can configure the Database Profiler to log
slow operations based on the time that MongoDB spends working on that
operation, rather than the total latency for the operation. This means
that factors such as waiting for locks and flow control do not affect
whether an operation exceeds the slow operation threshold.

This change provides the following improvements for logging and query
analysis:

- Slow queries are logged more accurately based on the time MongoDB
  spends processing the query.

- Query analysis tools such as the Query Profiler, Performance Advisor,
  and Search Query Telemetry report slow operations based on
  ``workingMillis`` instead of ``durationMillis``. This change provides
  a more accurate view of problematic queries.

- :ref:`Slow query logs <log-message-json-examples-slow-op>` include a
  metric for the time queued on execution tickets,
  ``queues.execution.totalTimeQueuedMicros``. This metric helps identify
  whether an operation is slow because of the time it takes to complete,
  or the time it spends waiting to start. 

For more information, see :method:`db.setProfilingLevel()`.

Database Profiler
~~~~~~~~~~~~~~~~~

When you specify a :ref:`filter <set-profiling-level-options-filter>`
for the database profiler, you can log operations based on the new
``workingMillis`` metric. You can log operations based on both
``workingMillis`` and ``durationMillis`` and set each metric to a
different threshold.

Aggregation
-----------

BinData Conversion
~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you can use the :expression:`$convert` operator
to perform the following conversions:

- String values to binData values
- binData values to string values

MongoDB 8.0 also includes a new helper expression,
:expression:`$toUUID`, which provides simplified syntax for converting
strings to :abbr:`UUID (Universally unique identifier)` values.

$queryStats 
~~~~~~~~~~~

Starting in MongoDB 7.1, the :pipeline:`$queryStats` stage returns statistics 
for recorded queries. 

Change Stream Improvements
``````````````````````````

Starting in MongoDB 8.0, :pipeline:`$queryStats` improves tracking and
reporting metrics for change streams. For more information, see
:ref:`$queryStats Change Streams Behavior
<queryStats-change-stream-behavior>`.

$rank and $denseRank Behavior
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-8-0-rank-dense-rank-fix.rst

.. _8.0-security-changes:

Security
--------

{+qe+} Range Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, :ref:`Queryable Encryption <qe-manual-feature-qe>`
supports range queries on encrypted fields using the :query:`$lt`,
:query:`$lte`, :query:`$gt`, and :query:`$gte` operators. For details, see
:ref:`qe-reference-automatic-encryption-supported-operations`. To enable range
queries on encrypted fields, see :ref:`qe-create-encryption-schema`.

OCSF Schema for Log Messages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you can specify the {+ocsf+} schema for audit
log messages. The OCSF schema provides logs in a standardized format
compatible with log processors.

To set the schema used for log messages, use the
:setting:`auditLog.schema` configuration file option.

For example log messages in OCSF format, see
:ref:`event-audit-messages-ocsf`.

Ingress Queue
~~~~~~~~~~~~~

MongoDB 8.0 introduces a new queue for ingress admission control. 
Operations that wait for entry into the database from the network 
enter the ingress queue. By default, the queue is unrestricted, 
meaning that MongoDB allows all operations to execute through this 
stage without any queueing. Setting the queue maximum to a specific 
value allows you to queue operations at this stage if the number of 
oncurrent operations reaches the specified limit.

Sharding
--------

Starting in MongoDB 8.0, you can unshard collections and move unsharded 
collections between shards on sharded clusters.

Moving a Collection
~~~~~~~~~~~~~~~~~~~

.. include:: /includes/moveable-collections-intro.rst

For details, see :ref:`moveable-collections`. To get started, see 
:ref:`task-move-a-collection`.

Moving Collections that have Change Streams
```````````````````````````````````````````

.. include:: /includes/movePrimary-change-streams.rst

For details, see :ref:`movePrimary-change-streams`.

Unsharding a Collection
~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you can unshard existing sharded collections with the
:dbcommand:`unshardCollection` command or the :method:`sh.unshardCollection`
method. This operation moves all documents in the collection onto a specified
shard or the shard with the least amount of data.

For details, see :ref:`unsharded-collections-concept`. To get started,
see :ref:`unshard-collection-task`.

Config Shards
~~~~~~~~~~~~~

.. include:: /includes/config-shard-intro.rst

To configure a dedicated config server to run as a config shard, run the
:dbcommand:`transitionFromDedicatedConfigServer` command. 

To configure a config shard to run as a dedicated config server, run the
:dbcommand:`transitionToDedicatedConfigServer` command.

For details, see :ref:`<config-shard-concept>`. To get started, see
:ref:`start-a-sharded-cluster-with-config-shard`. To convert a replica set 
to a sharded cluster with a config shard, see 
:ref:`convert-replica-set-to-embedded-config-server`.

New Database Commands
~~~~~~~~~~~~~~~~~~~~~

- :dbcommand:`abortMoveCollection`
- :dbcommand:`abortUnshardCollection`
- :dbcommand:`moveCollection`
- :dbcommand:`transitionFromDedicatedConfigServer`
- :dbcommand:`transitionToDedicatedConfigServer`
- :dbcommand:`unshardCollection`

New mongosh Methods
~~~~~~~~~~~~~~~~~~~

- :method:`sh.abortMoveCollection()`
- :method:`sh.abortUnshardCollection()`
- :method:`sh.moveCollection()`
- :method:`sh.shardAndDistributeCollection()`
- :method:`sh.unshardCollection()`

serverStatus Metrics 
~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, :dbcommand:`serverStatus` includes the following new 
``shardingStatistics`` fields in its output:

- :serverstatus:`shardingStatistics.countTransitionToDedicatedConfigServerStarted`
- :serverstatus:`shardingStatistics.countTransitionToDedicatedConfigServerCompleted`
- :serverstatus:`shardingStatistics.countTransitionFromDedicatedConfigServerCompleted`
- :serverstatus:`shardingStatistics.configServerInShardCache`

MongoDB 7.1 includes the following new sharding statistics for chunk
migrations:

- :serverstatus:`shardingStatistics.countDonorMoveChunkCommitted`
- :serverstatus:`shardingStatistics.countDonorMoveChunkAborted`
- :serverstatus:`shardingStatistics.totalDonorMoveChunkTimeMillis`
- :serverstatus:`shardingStatistics.countBytesClonedOnRecipient`
- :serverstatus:`shardingStatistics.countDocsClonedOnCatchUpOnRecipient`
- :serverstatus:`shardingStatistics.countBytesClonedOnCatchUpOnRecipient`

Default Chunks Per Shard
~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 7.2, when you :ref:`shard an empty collection
<shard-empty-collection>` with a hashed shard key, the operation
creates one chunk per shard by default. Previously, the operation
created two chunks by default.

directShardOperations Role
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/dSO-role-intro.rst

.. include:: /includes/dSO-warning.rst

Exhaust Cursors Enabled for Sharded Clusters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 7.1, :binary:`~bin.mongos` supports exhaust cursors 
when a client's :ref:`getMore <manual-reference-commands-getMore>` request sets 
the :ref:`exhaustAllowed <wire-msg-flags>`  flag. This can improve query 
performance on sharded clusters when the client receives multiple replies 
from the database server for a single request.

mongos Port Range
~~~~~~~~~~~~~~~~~

Starting in MongoDB 7.1, :binary:`~bin.mongos` accepts :option:`--port <mongos --port>` values 
from [0, 65535]. For more information, see :option:`--port <mongos --port>`. 

Query with Partial Shard Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 7.1, :dbcommand:`findAndModify` and :method:`~db.collection.deleteOne()` 
can use a partial shard key to query on a sharded collection.

Resharding Improvements
~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 7.2 introduces significant performance improvements in reshard
collection operations, substantially reducing the amount of time the 
operation takes to run.

Additionally, if your application and cluster meet the necessary
:ref:`requirements <reshard-requirements>` and :ref:`limitations
<resharding-limitations>`, you can reshard the collection on the same key using
the :dbcommand:`reshardCollection` command to redistribute your collection,
which is much faster than alternative :ref:`range migration procedure
<range-migration-procedure>`.

The following options are added to the command:

.. list-table::
   :header-rows: 1

   * - Field
     - Description

   * - ``forceRedistribution``
     - Enables same-key resharding.

For examples, see :ref:`reshardCollection-redistribute-data`.

Self-Managed Backups of Sharded Clusters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/release-notes/fsync-fsyncUnlock

UpdateOne upsert Behavior on Sharded Collections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-7-1-sharded-upsert-release-comp-note.rst
  
$lookup Stage in Transactions with Sharded Collections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you can use the :pipeline:`$lookup` stage within 
a transaction while targeting a sharded collection.

Replication
-----------

Majority Write Concern
~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/8.0-write-concern-majority-reads

If your application reads from a secondary immediately after
receiving an acknowledgment from a ``{ w: "majority" }`` write
operation (without a :ref:`causally consistent <causal-consistency>`
session), the query may return results that don't include
changes from the write.

New replSetGetStatus Metrics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, the following metrics are available when using the
:dbcommand:`replSetGetStatus` command:

- :data:`replSetGetStatus.electionCandidateMetrics.lastSeenWrittenOpTimeAtElection`
- :data:`replSetGetStatus.electionParticipantMetrics.lastWrittenOpTimeAtElection`
- :data:`replSetGetStatus.electionParticipantMetrics.maxWrittenOpTimeInSet`
- :data:`replSetGetStatus.members[n].optimeWritten`
- :data:`replSetGetStatus.members[n].optimeWrittenDate`
- :data:`replSetGetStatus.members[n].lastWrittenWallTime`
- :data:`replSetGetStatus.optimeWritten`
- :data:`replSetGetStatus.optimeWrittenDate`
- :data:`replSetGetStatus.optimes.lastWrittenWallTime`
- :data:`replSetGetStatus.optimes.writtenOpTime`

Oplog Buffers
~~~~~~~~~~~~~

Starting in MongoDB 8.0, secondaries write and apply oplog entries for each batch
in parallel. A writer thread reads new entries from the primary and writes them
to the local oplog. An applier thread asynchronously applies these changes to the
local database. This changes increases replication throughput for secondaries.

This introduces a breaking change for :serverstatus:`metrics.repl.buffer`, as it
now provides metrics on two buffers instead of one.

MongoDB 8.0 deprecates the following server status metrics:

- :serverstatus:`metrics.repl.buffer.count`
- :serverstatus:`metrics.repl.buffer.maxSizeBytes`
- :serverstatus:`metrics.repl.buffer.sizeBytes`

MongoDB 8.0 adds the following server status metrics:

- :serverstatus:`metrics.repl.buffer.apply`
- :serverstatus:`metrics.repl.buffer.apply.count`
- :serverstatus:`metrics.repl.buffer.apply.maxCount`
- :serverstatus:`metrics.repl.buffer.apply.maxSizeBytes`
- :serverstatus:`metrics.repl.buffer.apply.sizeBytes`
- :serverstatus:`metrics.repl.buffer.write`
- :serverstatus:`metrics.repl.buffer.write.count`
- :serverstatus:`metrics.repl.buffer.write.maxSizeBytes`
- :serverstatus:`metrics.repl.buffer.write.sizeBytes`
- :serverstatus:`metrics.repl.write`
- :serverstatus:`metrics.repl.write.batchSize`
- :serverstatus:`metrics.repl.write.batches`
- :serverstatus:`metrics.repl.write.batches.num`
- :serverstatus:`metrics.repl.write.batches.totalMillis`

.. _8.0-tcmalloc-upgrade:

Upgraded TCMalloc 
-----------------

.. include:: /includes/8.0-tcmalloc-intro.rst

The new TCMalloc version directly impacts previous production 
recommendations for Transparent Huge Pages. To learn more, see 
:ref:`tcmalloc-performance`.

serverStatus Metrics 
~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, the following new :dbcommand:`serverStatus` metrics 
report information about ``tcmalloc`` usage:

- :serverstatus:`tcmalloc.usingPerCPUCaches`
- :serverstatus:`tcmalloc.generic.peak_memory_usage`
- :serverstatus:`tcmalloc.tcmalloc.cpu_free`
- :serverstatus:`tcmalloc.tcmalloc.total_bytes_held`
- :serverstatus:`tcmalloc.tcmalloc.cpuCache`
- :serverstatus:`tcmalloc.tcmalloc.cpuCache.N.overflows`
- :serverstatus:`tcmalloc.tcmalloc.cpuCache.N.underflows`
- :serverstatus:`tcmalloc.tcmalloc_derived.total_free_bytes`

General Changes
---------------

Shutdown Performance
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-8-0-shutdown-speed.rst

Store Application Data on Config Shards
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you can configure a config server to store
application data in addition to the usual sharded cluster metadata. The
config server is then known as a *config shard*. For details, see
:ref:`sharded-cluster-config-server-config-shards`.


Compaction Improvements
~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 7.3, the :dbcommand:`compact` command includes a new 
``freeSpaceTargetMB`` option to specify the minimum amount of storage space, in 
megabytes, that must be recoverable for compaction to proceed.

Background Compaction
`````````````````````

Starting in MongoDB 8.0, you can use the new :dbcommand:`autoCompact` command 
to perform background compaction. If enabled, the server attempts to keep free 
space within each collection and index below the specified the 
``freeSpaceTargetMB`` value.

dryRun Option 
`````````````

.. include:: /includes/fact-compact-dryrun.rst 

Concurrent DDL Operations 
~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 7.1, when you run multiple :term:`DDL operations
<DDL (Data Definition Language)>` that target different collections from the 
same database, MongoDB runs those operations concurrently.

This change adds two new types to the ``serverStatus`` :serverstatus:`locks` 
field and :data:`currentOp.locks` output: 

- ``DDLDatabase``
- ``DDLCollection``

Database Validation on mongos Aggregation Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-mongos-db-agg-validation.rst

DDL Operations
~~~~~~~~~~~~~~

In MongoDB 8.0, if you add or remove a shard while your cluster executes
a DDL operation (operation that modifies a collection such as
:dbcommand:`reshardCollection`), any operation that adds or removes a
shard only executes after the concurrent DDL operation finishes. 

Error Codes for Exceeding Pipeline Size Limit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 7.1, an aggregation command will throw an error when a pipeline 
exceeds the pipeline stage limit. For more details, see :ref:`stage-restrictions`.  

getField Field Supports All Strings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 7.2, you can specify any valid :ref:`expression 
<aggregation-expressions>` that resolves to a string for the ``field``
input of the :expression:`$getField` operator. In earlier versions,
``field`` accepts only string constants.

Improved Index Builds
~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/index-build-introduction.rst

The following new index build metrics were added:

- :serverstatus:`indexBuilds.killedDueToInsufficientDiskSpace`
- :serverstatus:`indexBuilds.failedDueToDataCorruption`

For full details, see :ref:`create-index-builds`.

New Parameters
~~~~~~~~~~~~~~

auditConfig Parameter 
`````````````````````

MongoDB 7.1 adds the :parameter:`auditConfig` cluster parameter, which contains 
information on audit configurations from :binary:`~bin.mongod` and 
:binary:`~bin.mongos` server instances. 

defaultMaxTimeMS Parameter
``````````````````````````

Starting in MongoDB 8.0, you can use the :parameter:`defaultMaxTimeMS`
cluster parameter to specify a default time limit for individual read
operations to complete.

indexBuildMinAvailableDiskSpaceMB Parameter
```````````````````````````````````````````

MongoDB 7.1 adds the :parameter:`indexBuildMinAvailableDiskSpaceMB`
parameter, which allows you to set the minimum available disk space
required for index builds.

tcmallocEnableBackgroundThread Parameter
````````````````````````````````````````

Starting in MongoDB 8.0, the :parameter:`tcmallocEnableBackgroundThread` is 
enabled by default. This allows MongoDB to periodically release memory back to 
the operating system.

New Bulk Write Command
~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/bulkWrite-introduction.rst

New Query Shape and Query Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 8.0 introduces a new :ref:`query shape <query-shapes>`. The
pre-existing query shape is renamed as the :term:`plan cache query
shape`.

Starting in MongoDB 8.0, you can add query settings for the new query
shape. The :term:`query optimizer` uses the query settings as an
additional input during query planning, which affects the plan selected
to run a query that has a matching query shape.

Query settings have improved functionality compared to :ref:`index
filters <index-filters>`. Index filters are also deprecated starting in
MongoDB 8.0, and you should avoid using them.

- To add query settings, use the :dbcommand:`setQuerySettings` command.
- To delete query settings, use the :dbcommand:`removeQuerySettings`
  command.
- To retrieve query settings, use a :pipeline:`$querySettings` stage in
  an aggregation pipeline.
- To block a query shape, see :ref:`operation rejection filters
  <operation-rejection-filters>`.

Starting in MongoDB 8.0, ``queryShapeHash`` is included in the following
output:

- :dbcommand:`explain` command in the :data:`explain.queryShapeHash`
  field
- :ref:`database profiler <database-profiler>` in
  the :data:`system.profile.queryShapeHash` field
- :ref:`$currentOp aggregation pipeline stage <current-op-agg>` in
  the :data:`$currentOp.queryShapeHash` field
- :ref:`slow query log <log-message-slow-ops>`

.. include:: /includes/plan-cache-rename.rst

Parameter Filtering
~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, the :dbcommand:`getParameter` command
accepts a ``setAt`` field. You can use this field to filter the
``allParameters: true`` return document to show only those
parameters that you can set at 
:ref:`startup <getParameters-startup>` or 
:ref:`runtime <getParameters-runtime>`.

Read Concern on Capped Collections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/snapshot-capped-collections.rst

serverStatus Output Change 
~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 7.1, the :dbcommand:`serverStatus` command output includes 
the following new metrics:

- :serverstatus:`changeStreamPreImages.expireAfterSeconds`
- :serverstatus:`metrics.changeStreams.showExpandedEvents`
- :serverstatus:`queryStats` 

Starting in MongoDB 7.2, the :dbcommand:`serverStatus` command output includes 
the following new metrics:

- :serverstatus:`metrics.operation.killedDueToMaxTimeMSExpired`
- :serverstatus:`readPreferenceCounters`

Starting in MongoDB 7.3, the :dbcommand:`serverStatus` command output 
includes the following new metrics:

- :serverstatus:`metrics.repl.stateTransition.totalOperationsRunning`
- :serverstatus:`metrics.repl.stateTransition.totalOperationsKilled`
- :serverstatus:`metrics.repl.waiters.replication`
- :serverstatus:`metrics.repl.waiters.opTime`
- :serverstatus:`planCache.classic.skipped`
- :serverstatus:`planCache.sbe.skipped`

Starting in MongoDB 8.0, the :dbcommand:`serverStatus` command output 
includes the following new metrics:

- :serverstatus:`opWorkingTime`
- :serverstatus:`opWorkingTime.commands`
- :serverstatus:`opWorkingTime.reads`
- :serverstatus:`opWorkingTime.writes`
- :serverstatus:`opWorkingTime.transactions`

Sort Support for updateOne
~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, the :method:`~db.collection.updateOne` method supports
a ``sort`` option. This controls how MongoDB orders the document before it selects
the document to receive the update.

Previous releases use the :method:`~db.collection.findAndModify` and
:method:`~db.collection.findOneAndUpdate` methods to update
the first document in a user-specified sort order. Support for retryable writes
requires these methods to copy the entire document to a special side
collection for each node, which is a more expensive operation than the ``updateOne()``
method with the new ``sort`` option.

Specify Query Index Hints for distinct Commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 7.1, the ``hint`` field is available in the 
:dbcommand:`distinct` command, allowing you to specify the query's index. 

TTL Indexes 
~~~~~~~~~~~

Starting in MongoDB 7.1, you can create :ref:`TTL indexes <index-feature-ttl>` 
on :ref:`capped collections <manual-capped-collection>`.

Query Planning and Execution
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Block Processing
````````````````

.. include:: /includes/fact-block-processing.rst

To see if your time series query uses block processing, check the  
:data:`explain.queryPlanner.winningPlan.slotBasedPlan.stages` field in the 
explain plan output.

To learn more, see :ref:`timeseries-querying-block-processing`.


Express Query Stages
````````````````````

Starting in MongoDB 8.0, a limited set of queries (including ``_id``
equality matches) skip regular query planning and execution. Instead,
these queries use an optimized index scan plan consisting of one of
these plan stages:

- ``EXPRESS_CLUSTERED_IXSCAN`` 
- ``EXPRESS_DELETE``
- ``EXPRESS_IXSCAN`` 
- ``EXPRESS_UPDATE``

For more information on query plans, see :ref:`explain-results`.

Rejected Query Plan Output
``````````````````````````

.. include:: /includes/explain-results/8.0-rejected-query-plan-changes.rst

This change also ensures that ``executionStats`` for rejected plans are
non-zero. As a result, you can now see statistics such as how many
documents or keys a rejected plan examined. 

For more information on rejected query plans, see
:data:`explain.queryPlanner.rejectedPlans`.

Batch Multi-Document Insert Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, insert operations for 
:ref:`multi-document transactions <transactions>` no longer produce 
individual ``oplog`` entries. Instead, multi-document inserts are batched 
as a single entry. The change stream :data:`insert` event for each document
has the same ``clusterTime``.

This change increases performance of multi-document insert operations 
and eliminates possible replication lag caused by multiple ``oplog`` writes.

OIDC Identity Providers Can Share an Issuer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-oidc-multiple-config-for-same-issuer.rst

Namespaces in Subpipelines
~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, namespaces in subpipelines inside
:pipeline:`$lookup` and :pipeline:`$unionWith` are validated to ensure
the correct use of ``from`` and ``coll`` fields.

For details, see :ref:`$lookup subpipelines
<lookup-example-namespaces-in-subpipelines>` and :ref:`$unionWith
subpipelines <unionWith-example-namespaces-in-subpipelines>`.

Query Planner Optimization Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :method:`~db.collection.explain` method now returns
information on query planner optimization time. The
:data:`queryPlanner.optimizationTimeMillis
<explain.queryPlanner.optimizationTimeMillis>` status shows the
time in milliseconds that the query planner spent on
optimizations.

.. _8.0-known-issues:

Known Issues
------------

This section describes known issues in MongoDB 8.0 and their resolution
status.

.. list-table::
   :header-rows: 1
   :widths: 10 40 40
   
   * - In Version
     - Issue
     - Status

   * - 8.0.0
     - :issue:`SERVER-94741`: When multiple indexes are usable by
       ``$or`` queries that include top-level ``$and`` clauses
       (including implicit ``$and`` clauses), the query may use less
       efficient indexes because the most efficient indexes have been
       incorrectly removed from consideration during the new "index
       pruning" phase of query planning in MongoDB 8.0.
     - Unresolved. Planned to be mitigated in 8.0.1 by disabling the
       index pruning feature in :issue:`SERVER-94738`.

   * - 8.0.0
     - :issue:`SERVER-95244`: Upsert operations on single-shard sharded clusters
       may fail more often when all of the following are true: 

       - The operation is issued directly to a shard and not to ``mongos``.
       - The upsert operation is exclusively an insert.
       - The namespace is not receiving operations from ``mongos`` routers.
       - The namespace is not receiving any other operations.

       The recommended process for transitioning to a sharded cluster requires
       shifting clients to connect to ``mongos`` routers. Writes issued to
       ``mongos`` routers are not affected. 
     - This issue is planned to be fixed in 8.0.1.

.. _8.0-upgrade:

Upgrade Procedures
------------------

.. important:: Feature Compatibility Version

   To upgrade to MongoDB 8.0 from a 7.0 deployment, the 7.0 deployment
   must have ``featureCompatibilityVersion`` set to ``7.0``. To check
   the version:

   .. code-block:: javascript

      db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

To upgrade to MongoDB 8.0, refer to the upgrade instructions specific to
your MongoDB deployment:

- :ref:`<8.0-upgrade-standalone>`

- :ref:`<8.0-upgrade-replica-set>`

- :ref:`<8.0-upgrade-sharded-cluster>`

If you need guidance on upgrading to 8.0, MongoDB professional services
offer major version upgrade support to help ensure a smooth transition
without interruption to your MongoDB application. To learn more, see
:products:`MongoDB Consulting </consulting?tck=docs_server>`.

.. _8.0-download:

Download
--------

To download MongoDB 8.0, go to the `MongoDB Download Center
<https://www.mongodb.com/try/download/community-edition?tck=docs_server>`__.

.. toctree::
   :titlesonly:
   :hidden:

   Compatibility Changes </release-notes/8.0-compatibility>
   Upgrade 7.0 to 8.0 </release-notes/8.0-upgrade>
   Downgrade 8.0 to 7.0 </release-notes/8.0-downgrade>
   Changelog </release-notes/8.0-changelog>
