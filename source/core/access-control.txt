==============
Access Control
==============

.. default-domain:: mongodb

MongoDB provides support for authentication and authorization by storing
a user's credentials and privileges in a database's :data:`system.users
<<database>.system.users>` collection. MongoDB provisions authentication
and access on a per-database level. Users exist in the context of a
single logical database.

For MongoDB Enterprise installations, MongoDB also provides support for
authentication using a Kerberos service. See
:doc:`/tutorial/control-access-to-mongodb-with-kerberos-authentication`.

Authentication
--------------

MongoDB provides support for basic authentication by:

- storing user credentials in a database's :data:`system.users
  <<database>.system.users>` collection, and

- providing the :setting:`auth` and :setting:`keyFile` configuration
  settings to enable authentication for a given :program:`mongod` or
  :program:`mongos` instance.

Authentication is **disabled** by default.

.. versionadded 2.0: Before 2.0 sharded clusters *had* to run with
   trusted applications and a trusted networking configuration.

To enable authentication, see the following:

- :doc:`/tutorial/enable-authentication`

- :doc:`/tutorial/control-access-to-mongodb-with-kerberos-authentication`

Authorization
-------------

MongoDB supports role-based access to databases and database operations
by storing each user's roles in a :doc:`privilege document
</reference/user-privileges>` in the :data:`system.users
<<database>.system.users>` collection. For a description of privilege
documents and of available roles, see :doc:`/reference/user-privileges`.

.. versionchanged:: 2.4 The schema of :data:`system.users
   <<database>.system.users>` changed to accommodate a more
   sophisticated user privilege model, as defined in :doc:`privilege
   documents </reference/user-privileges>`.

The :data:`system.users <<database>.system.users>` collection is
protected to prevent privilege escalation attacks. To access the
collection, you must have the :authrole:`userAdmin` or
:authrole:`userAdminAnyDatabase` role.

To assign user roles, you must first create an admin user in the
database. Then you create additional users, assigning them appropriate
user roles.

To assign user roles, see the following:

- :doc:`/tutorial/add-user-administrator`

- :doc:`/tutorial/add-user-to-database`

User Roles in the admin Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``admin`` database provides roles not available in other databases,
including a role that effectively makes a user a MongoDB system
superuser. See :ref:`database-admin-roles` and :ref:`admin-roles`.

Authentication to One Database at a Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can log in as only one user for a given database, including
the ``admin`` database. If you authenticate to a database as one user
and later authenticate on the same database as a different user, the
second authentication invalidates the first. Logging into a *different*
database, however, does not invalidate authentication on other
databases.
