.. _enterprise-authentication-mechanisms:

====================================
Enterprise Authentication Mechanisms
====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to authenticate with MongoDB using each
**authentication mechanism** available exclusively in the MongoDB Enterprise
Edition.

You can use the following mechanisms with the latest version of MongoDB
Enterprise Edition:

- :ref:`Kerberos (GSSAPI) <gssapi-auth-mechanism>`
- :ref:`LDAP (PLAIN) <plain-auth-mechanism>`

To authenticate using another mechanism, see the
:doc:`Authentication Mechanisms guide </fundamentals/auth>`. For more
information on establishing a connection to your MongoDB cluster, read our
:doc:`Connection Guide </fundamentals/connection>`.


Specify an Authentication Mechanism
-----------------------------------

.. include:: /includes/fundamentals/auth-specify.rst

Mechanisms
----------

.. _gssapi-auth-mechanism:

Kerberos (GSSAPI)
~~~~~~~~~~~~~~~~~~~~~~

The Generic Security Services API (``GSSAPI``) authentication mechanism
allows the user to authenticate to a Kerberos service using the user's
principal name.

.. note::

   The method refers to the ``GSSAPI`` authentication mechanism instead
   of ``Kerberos`` because the driver authenticates using the
   `GSSAPI RFC-4652 <https://tools.ietf.org/html/rfc4752>`_  SASL
   mechanism.

The following code snippets show how to specify the authentication mechanism,
using the following placeholders:

- ``username``: your URL-encoded principal name, such as ``"username%40REALM.ME"``
- ``hostname``: network address of your MongoDB deployment that your
  client can access
- ``port``: port number of your MongoDB deployment

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the GSSAPI authentication mechanism using a connection
      string:

      - Assign the ``authMechanism`` URL parameter to the value ``GSSAPI``
      - (*optional*) Assign the ``authSource`` URL parameter to the value ``$external``

      .. note::

         If you specify the ``GSSAPI`` mechanism, you cannot assign
         ``authSource`` to any value other than ``$external``.

      The code to instantiate a ``MongoClient`` resembles the following:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("<db_username>@<hostname>:<port>/?authSource=$external&authMechanism=GSSAPI");

   .. tab::
      :tabid: MongoCredential

      To specify the GSSAPI authentication mechanism using the
      ``MongoCredential`` class, use the ``createGSSAPICredential()``
      method. The code to instantiate a ``MongoClient`` resembles
      the following:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-gssapi.rst


In order to acquire a
`Kerberos ticket <https://docs.oracle.com/en/java/javase/11/docs/api/java.security.jgss/javax/security/auth/kerberos/KerberosTicket.html>`__,
the GSSAPI Java libraries require you to specify the realm and Key Distribution
Center (KDC) system properties. See the sample settings in the following example:

.. code-block:: none

   java.security.krb5.realm=MYREALM.ME
   java.security.krb5.kdc=mykdc.myrealm.me

You might need to specify one or more of the following additional
``MongoCredential`` mechanism properties depending on your Kerberos setup:

- ``SERVICE_NAME``
- ``CANONICALIZE_HOST_NAME``
- ``JAVA_SUBJECT``
- ``JAVA_SASL_CLIENT_PROPERTIES``
- ``JAVA_SUBJECT_PROVIDER``

.. tabs::
   :hidden:

   .. tab::
      :tabid: Connection String

      .. important::

         You can only specify the following GSSAPI properties using the
         ``MongoCredential``:

         - ``JAVA_SUBJECT``
         - ``JAVA_SASL_CLIENT_PROPERTIES``
         - ``JAVA_SUBJECT_PROVIDER``

         Select the :guilabel:`MongoCredential` tab to see how to specify
         them.

      To specify one of the GSSAPI additional properties, include it in the
      connection string as a URL parameter using the format:
      ``<PROPERTY_NAME>:<value>``.

      Your code to instantiate a ``MongoClient`` using GSSAPI and additional
      properties might resemble the following:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("<db_username>@<hostname>:<port>/?authSource=$external&authMechanism=GSSAPI&authMechanismProperties=SERVICE_NAME:myService");

   .. tab::
      :tabid: MongoCredential

      To specify one of the GSSAPI additional properties, call the
      ``withMechanismProperty()`` method on your ``MongoCredential``
      instance and pass the property name and value as parameters. Use the
      property name constants defined in the ``MongoCredential`` class:

      - `SERVICE_NAME_KEY <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#SERVICE_NAME_KEY>`__
      - `CANONICALIZE_HOST_NAME_KEY <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#CANONICALIZE_HOST_NAME_KEY>`__
      - `JAVA_SUBJECT_KEY <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#JAVA_SUBJECT_KEY>`__
      - `JAVA_SASL_CLIENT_PROPERTIES_KEY <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#JAVA_SASL_CLIENT_PROPERTIES_KEY>`__
      - `JAVA_SUBJECT_PROVIDER_KEY <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#JAVA_SUBJECT_PROVIDER_KEY>`__

      Select the **SERVICE_NAME_KEY** or **JAVA_SUBJECT_KEY** tab to
      see sample code to instantiate a ``MongoCredential`` that uses GSSAPI and
      the selected property:

      .. tabs::

         .. tab::
            :tabid: SERVICE_NAME_KEY

            .. include:: /includes/fundamentals/code-snippets/auth-credentials-gssapi-properties.rst

         .. tab::
            :tabid: JAVA_SUBJECT_KEY

            .. include:: /includes/fundamentals/code-snippets/auth-credentials-gssapi-subject-key.rst

By default, the Java driver caches Kerberos tickets by ``MongoClient`` instance.
If your deployment needs to frequently create and destroy ``MongoClient`` instances,
you can change the default Kerberos ticket caching behavior to cache by process
to improve performance.

.. tabs::
   :hidden:

   .. tab::
      :tabid: Connection String

      To cache Kerberos tickets by process, you must use the ``MongoCredential`` authentication
      mechanism, as the connection string authentication mechanism does not support the ``JAVA_SUBJECT_PROVIDER``
      mechanism property. If you would like to cache Kerberos tickets by process, select the :guilabel:`MongoCredential`
      tab to learn how to accomplish this.

   .. tab::
      :tabid: MongoCredential

      To cache Kerberos tickets by process, you must specify the ``JAVA_SUBJECT_PROVIDER``
      mechanism property and provide a
      `KerberosSubjectProvider <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/mongodb-driver-core/com/mongodb/KerberosSubjectProvider.html#%3Cinit%3E()>`__
      in your ``MongoCredential`` instance. The code to configure the Java driver to cache Kerberos tickets
      by process resembles the following:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-gssapi-ticket-cache.rst


.. note::

   On Windows, Oracleâ€™s JRE uses `LSA <https://docs.microsoft.com/en-us/windows/win32/secauthn/lsa-authentication>`__
   rather than `SSPI <https://docs.microsoft.com/en-us/windows/win32/secauthn/sspi>`__
   in its implementation of GSSAPI which limits interoperability with
   Windows Active Directory and implementations of single sign-on. See the
   following articles for more information:

   - `JDK-8054026 <https://bugs.openjdk.java.net/browse/JDK-8054026>`__
   - `JDK-6722928 <https://bugs.openjdk.java.net/browse/JDK-6722928>`__
   - `SO 23427343 <https://stackoverflow.com/questions/23427343/cannot-retrieve-tgt-despite-allowtgtsessionkey-registry-entry>`__


.. _plain-auth-mechanism:

LDAP (PLAIN)
~~~~~~~~~~~~

*Available in MongoDB Enterprise Edition 3.4 and later.*

You can authenticate to a Lightweight Directory Access Protocol (LDAP)
server using your directory server username and password.

.. tip::

   The authentication mechanism is named ``PLAIN`` instead of ``LDAP`` since it
   authenticates using the `PLAIN Simple Authentication and Security Layer
   (SASL) defined in RFC-4616 <https://tools.ietf.org/html/rfc4616>`_.

You can specify this authentication mechanism by setting the ``authMechanism``
parameter to ``PLAIN`` and including your LDAP username and password in the
:manual:`connection string </reference/connection-string/>`.

The following code snippets show how to specify the authentication mechanism,
using the following placeholders:

- ``username``: your LDAP username
- ``password``: your LDAP user's password
- ``hostname``: network address of your MongoDB deployment that your
  client can access
- ``port``: port number of your MongoDB deployment

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the LDAP (PLAIN) authentication mechanism using a connection
      string:

      - Assign the ``authMechanism`` URL parameter to the value ``PLAIN``
      - (*optional*) Assign the ``authSource`` URL parameter to the value ``$external``

      .. note::

         If you specify the ``PLAIN`` mechanism, you cannot assign
         ``authSource`` to any value other than ``$external``.

      The code to instantiate a ``MongoClient`` resembles the following:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("<db_username>:<db_password>@<hostname>:<port>/?authSource=$external&authMechanism=PLAIN");

   .. tab::
      :tabid: MongoCredential

      To specify the LDAP (PLAIN) authentication mechanism using the
      ``MongoCredential`` class, use the ``createPlainCredential()``
      method. The code to instantiate a ``MongoClient`` resembles the following:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-ldap.rst
