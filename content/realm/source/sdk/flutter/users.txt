.. meta::
   :robots: noindex, nosnippet

.. _flutter-work-with-users:

=============================
User Management - Flutter SDK
=============================

.. toctree::
   :titlesonly:

   Authenticate Users </sdk/flutter/users/authenticate>
   Email/Password Users </sdk/flutter/users/email-password-users>
   Work with Multiple Users </sdk/flutter/users/multiple-users>
   Link User Identities </sdk/flutter/users/link-user-identities>
   Custom User Data </sdk/flutter/users/custom-user-data>
   User Metadata </sdk/flutter/users/user-metadata>
   Delete a User </sdk/flutter/users/delete-user>
   Get an Access Token </sdk/flutter/users/access-token>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

To access Atlas App Services and use Atlas Device Sync with the Realm Flutter SDK,
you must first authenticate a user with an App Services authentication provider.

For more information on configuring App Services Authentication,
refer to :ref:`App Services Authentication <users-and-authentication>` in the
Atlas App Services documentation.

.. _flutter-creating-and-deleting-users:

Create and Delete Users
-----------------------

For all authentication providers other than email/password authentication,
App Services automatically :ref:`registers a user <flutter-register>`
the first time a user authenticates.
When using the email/password authentication provider, you must
:ref:`manually register a user <flutter-manage-email-password-users>`.
If a user authenticates via more than one method,
you can :ref:`link these user identities <flutter-link-user-identities>`
to a single user object.

You can also :ref:`delete users <flutter-delete-user>`. Deleting a user
removes metadata attached to the user from App Services, but does not delete user-entered
data from the backend.

.. include:: /includes/apple-account-deletion-requirements.rst

.. _flutter-log-users-in-and-out:

Log Users In and Out
--------------------

Use one or more :ref:`authentication providers <auth-providers>` to :ref:`log
users in and out <flutter-authenticate>` of your client app. You can:

- Log users in with an existing social account, such as Apple, Facebook,
  or Google.
- Create new user accounts with App Services email/password management,
  or your own custom function or custom JWT user management.
- Enable anonymous users to let users access your App Services App without persisting
  user data.

When you have a logged-in user, you can:

- :ref:`Open a synced realm <flutter-open-synced-realm>` with the user's
  configuration object
- :ref:`Run a backend function <flutter-call-function>` as the logged-in user
- :ref:`Log the user out <flutter-logout>`
- :ref:`Change the active user <flutter-change-active-user>` in a multi-user
  application
- :ref:`Remove a user <flutter-remove-user>` from the device
- :ref:`Delete a user <flutter-delete-user>`

On successful login, the Flutter SDK caches credentials on the device. You
can bypass the login flow and access the cached user. Use this to open a
realm or call an Atlas Function upon subsequent app opens.

User Object
~~~~~~~~~~~

.. include:: /includes/manage-user-sessions.rst

Some authentication providers enable developers to access user metadata, such
as full name or email address. When you configure these metadata fields on
the App Services application, you can read this metadata from your client app.

To learn more about the user object that App Services provides the Flutter SDK,
refer to the following documentation:

- :ref:`User Objects <user-objects>` in the App Services documentation.
- :ref:`User Metadata <flutter-user-metadata>` in the Flutter SDK documentation.
- :flutter-sdk:`User <realm/User-class.html>` in Flutter SDK reference documentation.

Listen for User Changes
-----------------------

You can listen for and react to changes to a user instance. For
example, receive notifications when a user state changes or a user
access token is updated.

For more information, refer to
:ref:`Register a User Instance Change Listener <flutter-user-change-listener>`.

.. _flutter-app-work-with-custom-user-data:

Custom User Data
----------------

You can associate custom data with a user, such as a preferred language
or local timezone, and read it from your client application.
For more information on working with custom user data,
refer to :ref:`Custom User Data <flutter-custom-user-data>`.
