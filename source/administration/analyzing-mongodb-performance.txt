===================
MongoDB Performance
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

As you develop and operate applications with MongoDB, you may need to
analyze the performance of the application and its database.
When you encounter degraded performance, it is often a function of database
access strategies, hardware availability, and the number of open database
connections.

Some users may experience performance limitations as a result of inadequate
or inappropriate indexing strategies, or as a consequence of poor schema
design patterns. :ref:`analyzing-performance-locks` discusses how these can
impact MongoDB's internal locking.

Performance issues may indicate that the database is operating at capacity
and that it is time to add additional capacity to the database. In particular,
the application's :term:`working set` should fit in the available physical
memory. See :ref:`analyzing-memory-mmapv1` for more information on the working
set.

In some cases performance issues may be temporary and related to
abnormal traffic load. As discussed in :ref:`number-of-connections`, scaling
can help relax excessive traffic.

:ref:`database-profiling` can help you to understand what operations are causing
degradation.

.. _analyzing-performance-locks:

Locking Performance
-------------------

MongoDB uses a locking system to ensure data set consistency. If
certain operations are long-running or a queue forms, performance
will degrade as requests and operations wait for the lock.

Lock-related slowdowns can be intermittent. To see if the lock has been
affecting your performance, refer to the :ref:`server-status-locks`
section and the :ref:`globalLock` section of the
:dbcommand:`serverStatus` output.

Dividing :serverstatus:`locks.timeAcquiringMicros` by
:serverstatus:`locks.acquireWaitCount`
can give an approximate average wait time for a particular lock mode.

:serverstatus:`locks.deadlockCount` provide
the number of times the lock acquisitions encountered deadlocks.

If :serverstatus:`globalLock.currentQueue.total` is consistently high,
then there is a chance that a large number of requests are waiting for
a lock. This indicates a possible concurrency issue that may be affecting
performance.

If :serverstatus:`globalLock.totalTime` is
high relative to :serverstatus:`uptime`, the database has
existed in a lock state for a significant amount of time.

Long queries can result from ineffective use of indexes;
non-optimal schema design; poor query structure; system architecture issues; or
insufficient RAM resulting in
:ref:`page faults <administration-monitoring-page-faults>` and disk reads.

.. _analyzing-memory-mmapv1:

Memory and the MMAPv1 Storage Engine
------------------------------------

.. admonition:: Deprecated
   :class: warning

   .. include:: /includes/fact-4.0-mmapv1-deprecated.rst

Memory Use
~~~~~~~~~~

With the :ref:`MMAPv1 <storage-mmapv1>` storage engine, MongoDB uses
memory-mapped files to store data. Given a data set of sufficient size,
the :binary:`~bin.mongod` process will allocate all available memory on the system
for its use.

While this is intentional and aids performance, the memory mapped files make it
difficult to determine if the amount of RAM is sufficient for the data set.

The :ref:`memory usage statuses <memory-status>` metrics of the
:dbcommand:`serverStatus` output can provide insight into MongoDB's
memory use.

The :serverstatus:`mem.resident` field provides the
amount of resident memory in use. If this exceeds the amount of system
memory *and* there is a significant amount of data on disk that isn't in RAM,
you may have exceeded the capacity of your system.

You can inspect :serverstatus:`mem.mapped` to check the
amount of mapped memory that :binary:`~bin.mongod` is using. If this value is
greater than the amount of system memory, some operations will require a
:term:`page faults <page fault>` to read data from disk.


.. _administration-monitoring-page-faults:

Page Faults
~~~~~~~~~~~

.. include:: /includes/fact-page-fault.rst

MongoDB reports its triggered page faults as the total number of
:term:`page faults <page fault>` in one second. To check for page faults, see
the :serverstatus:`extra_info.page_faults` value
in the :dbcommand:`serverStatus` output.

Rapid increases in the MongoDB page fault counter may indicate that the server
has too little physical memory. Page faults also can occur while accessing
large data sets or scanning an entire collection.

A single page fault completes quickly and is not problematic. However, in
aggregate, large volumes of page faults typically indicate that MongoDB
is reading too much data from disk.

MongoDB can often "yield" read locks after a page fault, allowing other database
processes to read while :binary:`~bin.mongod` loads the next page into memory.
Yielding the read lock following a page fault improves concurrency, and also
improves overall throughput in high volume systems.

Increasing the amount of RAM accessible to MongoDB may help reduce the
frequency of page faults. If this is not possible, you may want to consider
deploying a :term:`sharded cluster` or adding :term:`shards <shard>`
to your deployment to distribute load among :binary:`~bin.mongod` instances.

See :ref:`faq-storage-page-faults` for more information.

.. _number-of-connections:

Number of Connections
---------------------

In some cases, the number of connections between the applications and the
database can overwhelm the ability of the server to handle requests. The
following fields in the :dbcommand:`serverStatus` document can provide insight:

- :serverstatus:`connections` is a container for the following
  two fields:

  - :serverstatus:`connections.current` the total number of
    current clients connected to the database instance.

  - :serverstatus:`connections.available` the total number of
    unused connections available for new clients.

If there are numerous concurrent application requests, the database may have
trouble keeping up with demand. If this is the case, then you will need to
increase the capacity of your deployment.

For read-heavy applications, increase the size of your :term:`replica set` and
distribute read operations to :term:`secondary` members.

For write-heavy applications, deploy :term:`sharding` and add one or more
:term:`shards <shard>` to a :term:`sharded cluster` to distribute load among
:binary:`~bin.mongod` instances.

Spikes in the number of connections can also be the result of
application or driver errors. All of the officially supported MongoDB
drivers implement connection pooling, which allows clients to use and
reuse connections more efficiently. Extremely high numbers of
connections, particularly without corresponding workload is often
indicative of a driver or other configuration error.

Unless constrained by system-wide limits, MongoDB has no limit on
incoming connections. On Unix-based systems, you can modify system limits
using the ``ulimit`` command, or by editing your system's
``/etc/sysctl`` file. See :doc:`/reference/ulimit` for more
information.

.. _database-profiling:

Database Profiling
------------------

The :doc:`/tutorial/manage-the-database-profiler` collects detailed
information about operations run against a mongod instance. The
profiler's output can help to identify inefficient queries and
operations.

You can enable and configure profiling for individual databases or for
all databases on a :binary:`~bin.mongod` instance.
Profiler settings affect only a single :binary:`~bin.mongod` instance and
will not propagate across a :term:`replica set` or :term:`sharded
cluster`.

See :doc:`/tutorial/manage-the-database-profiler` for information on
enabling and configuring the profiler.

The following profiling levels are available:

.. include:: /includes/database-profiler-levels.rst

.. include:: /includes/warning-profiler-performance.rst

.. note::
   .. include:: /includes/fact-log-slow-queries.rst

.. class:: hidden

   .. toctree::
      :titlesonly:
      
      /tutorial/manage-the-database-profiler
      /tutorial/transparent-huge-pages
      /reference/ulimit
