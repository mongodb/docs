# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# fb98b1578bb549caaa438cb7cf395d05
#: ../source/core/mmapv1.txt:5
msgid "MMAPv1 Storage Engine"
msgstr ""

# 694ca5d648f14aa8be17dc48bd500eb4
#: ../source/core/mmapv1.txt
msgid "On this page"
msgstr ""

# 0a7ebf23ed77466e89b7ad5aa58ccaa1
#: ../source/core/mmapv1.txt:15
msgid ""
"MMAPv1 is MongoDB's original storage engine based on memory mapped files."
" It excels at workloads with high volume inserts, reads, and in-place "
"updates."
msgstr ""

# 60fb210151344502b927830b3cdcd996
#: ../source/core/mmapv1.txt:21
msgid ""
"Starting in MongoDB 3.2, the MMAPv1 is no longer the default storage "
"engine; instead, the :doc:`WiredTiger </core/wiredtiger>` storage engine "
"is the default storage engine . See :ref:`3.2-storage-engine-"
"compatibility`."
msgstr ""

# 53afab12c22a45dcbabc7495ea995b54
#: ../source/core/mmapv1.txt:27
msgid "Journal"
msgstr ""

# 1cc988655cf6465cacb8a41e45d17441
#: ../source/core/mmapv1.txt:29
msgid ""
"In order to ensure that all modifications to a MongoDB data set are "
"durably written to disk, MongoDB, by default, records all modifications "
"to an on-disk journal. MongoDB writes more frequently to the journal than"
" it writes the data files."
msgstr ""

# 13f9aaa8c0ee415f9056da60c2c991dd
#: ../source/includes/fact-mmapv1-write-to-disk.rst:1
msgid ""
"In the default configuration for the :doc:`MMAPv1 storage engine "
"</core/mmapv1>`, MongoDB writes to the data files on disk every 60 "
"seconds and writes to the :term:`journal` files roughly every 100 "
"milliseconds."
msgstr ""

# 58dfd6869cfc49e49de85174ea7a2cf2
#: ../source/includes/fact-mmapv1-write-to-disk.rst:6
msgid ""
"To change the interval for writing to the data files, use the "
":setting:`storage.syncPeriodSecs` setting. For the journal files, see "
":setting:`storage.journal.commitIntervalMs` setting."
msgstr ""

# 9f916bac82d24f38b5d81a30ecef8727
#: ../source/includes/fact-mmapv1-write-to-disk.rst:10
msgid ""
"These values represent the *maximum* amount of time between the "
"completion of a write operation and when MongoDB writes to the data files"
" or to the journal files. In many cases MongoDB and the operating system "
"flush data to disk more frequently, so that the above values represents a"
" theoretical maximum."
msgstr ""

# 3a06f36ca7d840efb4fd7baef1591c71
#: ../source/core/mmapv1.txt:36
msgid ""
"The journal allows MongoDB to successfully recover data from data files "
"after a :program:`mongod` instance exits without flushing all changes. "
"See :doc:`/core/journaling` for more information about the journal in "
"MongoDB."
msgstr ""

# cd9712b17e3a4c4c8940cd3d416f3864
#: ../source/core/mmapv1.txt:42
msgid "Record Storage Characteristics"
msgstr ""

# f2dac4bd09d54cefa09858f796cf130e
#: ../source/core/mmapv1.txt:44
msgid ""
"All records are contiguously located on disk, and when a document becomes"
" larger than the allocated record, MongoDB must allocate a new record. "
"New allocations require MongoDB to move a document and update all indexes"
" that refer to the document, which takes more time than in-place updates "
"and leads to storage fragmentation."
msgstr ""

# 7dc82d0c757046a69aee3f8089aea4c0
#: ../source/core/mmapv1.txt:53
msgid ""
"By default, MongoDB uses :ref:`power-of-2-allocation` so that every "
"document in MongoDB is stored in a *record* which contains the document "
"itself and extra space, or :term:`padding`. Padding allows the document "
"to grow as the result of updates while minimizing the likelihood of "
"reallocations."
msgstr ""

# 683436ec40344fc6bc6a2a6dcafafca7
#: ../source/core/mmapv1.txt:62
msgid "Record Allocation Strategies"
msgstr ""

# be4f042bfdce43a2bbfe09aacaeb3f7c
#: ../source/core/mmapv1.txt:64
msgid ""
"MongoDB supports multiple record allocation strategies that determine how"
" :program:`mongod` adds padding to a document when creating a record. "
"Because documents in MongoDB may grow after insertion and all records are"
" contiguous on disk, the padding can reduce the need to relocate "
"documents on disk following updates. Relocations are less efficient than "
"in-place updates and can lead to storage fragmentation. As a result, all "
"padding strategies trade additional space for increased efficiency and "
"decreased fragmentation."
msgstr ""

# f5962dbe48644b47ac8b87144e5b9b9d
#: ../source/core/mmapv1.txt:73
msgid ""
"Different allocation strategies support different kinds of workloads: the"
" :ref:`power of 2 allocations <power-of-2-allocation>` are more efficient"
" for insert/update/delete workloads; while :ref:`exact fit allocations "
"<exact-fit-allocation>` is ideal for collections *without* update and "
"delete workloads."
msgstr ""

# cbe5fabc01f74c159b35e334cd82c8de
#: ../source/core/mmapv1.txt:82
msgid "Power of 2 Sized Allocations"
msgstr ""

# a75da3b1cc754fcdb5ab4976f3fc92ab
#: ../source/core/mmapv1.txt:86
msgid ""
"MongoDB 3.0 uses the power of 2 sizes allocation as the default record "
"allocation strategy for MMAPv1. With the power of 2 sizes allocation "
"strategy, each record has a size in bytes that is a power of 2 (e.g. 32, "
"64, 128, 256, 512 ... 2 MB). For documents larger than 2 MB, the "
"allocation is rounded up to the nearest multiple of 2 MB."
msgstr ""

# 444e9fc7c8e54dcca41e4bed416556e1
#: ../source/core/mmapv1.txt:92
msgid "The power of 2 sizes allocation strategy has the following key properties:"
msgstr ""

# c4eb582d441e4ce7b3d22914d585b042
#: ../source/core/mmapv1.txt:95
msgid ""
"Can efficiently reuse freed records to reduce fragmentation. Quantizing "
"record allocation sizes into a fixed set of sizes increases the "
"probability that an insert will fit into the free space created by an "
"earlier document deletion or relocation."
msgstr ""

# 03f34aab36a5414582696ecdb4c54ea0
#: ../source/core/mmapv1.txt:100
msgid ""
"Can reduce moves. The added padding space gives a document room to grow "
"without requiring a move. In addition to saving the cost of moving, this "
"results in less updates to indexes. Although the power of 2 sizes "
"strategy can minimize moves, it does not eliminate them entirely."
msgstr ""

# d4455305e73249db9918e16d12cf539a
#: ../source/core/mmapv1.txt:109
msgid "No Padding Allocation Strategy"
msgstr ""

# 85cd14f5a69c4c0e8f382bc7e00a68ed
#: ../source/core/mmapv1.txt:113
msgid ""
"For collections whose workloads do not change the document sizes, such as"
" workloads that consist of insert-only operations or update operations "
"that do not increase document size (such as incrementing a counter), you "
"can disable the :ref:`power of 2 allocation <power-of-2-allocation>` "
"using the :dbcommand:`collMod` command with the :collflag:`noPadding` "
"flag or the :method:`db.createCollection()` method with the ``noPadding``"
" option."
msgstr ""

# b568d6a264c549549f95fffb08965649
#: ../source/core/mmapv1.txt:121
msgid ""
"Prior to version 3.0.0, MongoDB used an allocation strategy that included"
" a dynamically calculated :data:`padding <collStats.paddingFactor>` as a "
"factor of the document size."
msgstr ""

# b6edb38c89e647ceb9cb25619c5ef5b8
#: ../source/core/mmapv1.txt:128
msgid "Memory Use"
msgstr ""

# a5b598d98bfe4fe7a60be0651f08a511
#: ../source/core/mmapv1.txt:130
msgid ""
"With MMAPv1, MongoDB automatically uses all free memory on the machine as"
" its cache. System resource monitors show that MongoDB uses a lot of "
"memory, but its usage is dynamic. If another process suddenly needs half "
"the server's RAM, MongoDB will yield cached memory to the other process."
msgstr ""

# 50be5d0726344f589cf20aa917b281f4
#: ../source/core/mmapv1.txt:136
msgid ""
"Technically, the operating system's virtual memory subsystem manages "
"MongoDB's memory. This means that MongoDB will use as much free memory as"
" it can, swapping to disk as needed. Deployments with enough memory to "
"fit the application's working data set in RAM will achieve the best "
"performance."
msgstr ""

