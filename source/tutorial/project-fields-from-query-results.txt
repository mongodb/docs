.. _read-operations-projection:
.. _projection:
.. _projections:

===================================
Project Fields to Return from Query
===================================

.. default-domain:: mongodb

By default, queries in MongoDB return all fields in matching documents.
To limit the amount of data that MongoDB sends to applications, you can
include a :term:`projection` document to specify or restrict fields to
return. This page provides examples of how to use projection in
MongoDB. The examples on this page use the inventory collection. To
populate the inventory collection, run the following in the mongo shell:

.. class:: copyable-code
.. code-block:: javascript

   db.inventory.insertMany( [
     { item: "journal", status: "A", size: { h: 14, w: 21, uom: "cm" }, instock: [ { warehouse: "A", qty: 5 } ] },
     { item: "notebook", status: "A",  size: { h: 8.5, w: 11, uom: "in" }, instock: [ { warehouse: "C", qty: 5 } ] },
     { item: "paper", status: "D", size: { h: 8.5, w: 11, uom: "in" }, instock: [ { warehouse: "A", qty: 60 } ] },
     { item: "planner", status: "D", size: { h: 22.85, w: 30, uom: "cm" }, instock: [ { warehouse: "A", qty: 40 } ] },
     { item: "postcard", status: "A", size: { h: 10, w: 15.25, uom: "cm" }, instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
   ]);

.. only:: website

   You can run the operation in the web shell below:

   .. include:: /includes/fact-mws.rst

Return All Fields in Matching Documents
---------------------------------------

If you specify no projection, the :method:`db.collection.find()` method
returns all fields in the matching documents.

The following example returns all fields from all documents in the
``inventory`` collection where the ``status`` equals ``"A"``:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find( { status: "A" } )

The operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT * from inventory WHERE status = "A"

Return the Specified Fields and the ``_id`` Field Only
------------------------------------------------------

A projection can explicitly include several fields by specifying
``<field>: 1`` in the projection document. The following operation
returns all documents that match the query. In the result set, only the
``item``, ``status`` and, by default, the ``_id`` fields return in the
matching documents.

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find( { status: "A" }, { item: 1, status: 1 } )

The operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT _id, item, status from inventory WHERE status = "A"

Suppress ``_id`` Field
----------------------

You can remove the ``_id`` field from the results by specifying its
exclusion ``<field>: 0`` in the projection, as in the following example:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find( { status: "A" }, { item: 1, status: 1, _id: 0 } )

The operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT item, status from inventory WHERE status = "A"

Return All But the Excluded Fields
----------------------------------

Instead of listing the fields to return in the matching document, you
can use a projection to exclude specific fields. The following example
which returns all fields except for the ``status`` and the ``instock``
fields in the matching documents:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find( { status: "A" }, { status: 0, instock: 0 } )

With the exception of the ``_id`` field, you cannot combine inclusion
and exclusion statements in projection documents.

Return Specific Fields in Embedded Documents
--------------------------------------------

You can return specific fields in an embedded document. Use the
:ref:`dot notation <document-dot-notation>` to refer to the embedded
field and set to ``1`` in the projection document.

The following example returns: the ``_id`` field (returned by default),
``item`` field, ``status`` field, and the ``uom`` field in the ``size``
document; the ``uom`` field remains embedded in the ``size`` document.

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find(
      { status: "A" },
      { item: 1, status: 1, "size.uom": 1 }
   )

Suppress Specific Fields in Embedded Documents
----------------------------------------------

You can suppress specific fields in an embedded document. Use the
:ref:`dot notation <document-dot-notation>` to refer to the embedded
field in the projection document and set to ``0``.

The following example specifies a projection to exclude the ``uom``
field inside the ``size`` document. All other fields are returned in
the matching documents:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find(
      { status: "A" },
      { "size.uom": 0 }
   )

Projection on Embedded Documents in an Array
--------------------------------------------

Use :ref:`dot notation <document-dot-notation>` to project specific
fields inside documents embedded in an array.

The following example specifies a projection to return the ``item``
field, the ``status`` field, and the ``qty`` field in the documents
embedded in the ``instock`` array. The ``_id`` field is returned by
default.

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find( { status: "A" }, { item: 1, status: 1, "instock.qty": 1 } )


Project Specific Array Elements in the Returned Array
-----------------------------------------------------

For fields that contain arrays, MongoDB provides the following
projection operators: :projection:`$elemMatch`, :projection:`$slice`,
and :projection:`$`.

The following example uses the :projection:`$slice` projection operator
to return just the last element in the ``instock`` array.

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find( { status: "A" }, { name: 1, status: 1, instock: { $slice: -1 } } )

:projection:`$elemMatch`, :projection:`$slice`, and :projection:`$` are
the *only* way to project specific elements to include in the returned
array. For instance, you *cannot* project specific array elements using
the array index; e.g. ``{ "instock.0": 1 }`` projection will *not*
project the array with the first element.

.. seealso:: :doc:`/tutorial/query-documents`

.. include:: /includes/footnote-set-shell-batch-size.rst
