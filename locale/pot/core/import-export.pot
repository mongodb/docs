# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/import-export.txt:3
# 69f5295a7d04406d91a668dacaf26322
msgid "Import and Export MongoDB Data"
msgstr ""

#: ../source/core/import-export.txt:10
# 8d3ff9050d514e19b3ae4cab2b1b5675
msgid "This document provides an overview of the import and export programs included in the MongoDB distribution. These tools are useful when you want to backup or export a portion of your data without capturing the state of the entire database, or for simple data ingestion cases. For more complex data migration tasks, you may want to write your own import and export scripts using a client :term:`driver` to interact with the database itself. For disaster recovery protection and routine database backup operation, use full :doc:`database instance backups </core/backups>`."
msgstr ""

#: ../source/core/import-export.txt:22
# 500ed27e90264972811c77471afc739c
msgid "Because these tools primarily operate by interacting with a running :program:`mongod` instance, they can impact the performance of your running database."
msgstr ""

#: ../source/core/import-export.txt:26
# e76db21ab5bf4d3b805cc3195a8b1735
msgid "Not only do these processes create traffic for a running database instance, they also force the database to read all data through memory. When MongoDB reads infrequently used data, it can supplant more frequently accessed data, causing a deterioration in performance for the database's regular workload."
msgstr ""

#: ../source/core/import-export.txt:32
# d0be2309596444559e090c9338545eff
msgid ":doc:`/core/backups` or :mms:`MMS Backup Manual </tutorial/nav/backup-use/>` for more information on backing up MongoDB instances. Additionally, consider the following references for the MongoDB import/export tools:"
msgstr ""

#: ../source/core/import-export.txt:37
# b379d13a409245448f5733433db83525
msgid ":program:`mongoimport`"
msgstr ""

#: ../source/core/import-export.txt:38
# a17ad96a264d4140a59ec2b6fe7f9bb5
msgid ":program:`mongoexport`"
msgstr ""

#: ../source/core/import-export.txt:39
# 1f4a3259ceb24722af498f3060be2509
msgid ":program:`mongorestore`"
msgstr ""

#: ../source/core/import-export.txt:40
# 1dc65b5276ad47e6b211cef526ced02e
msgid ":program:`mongodump`"
msgstr ""

#: ../source/core/import-export.txt:43
# 4e18b8dffc9145a49aa9981f1e5cb2bb
msgid "Data Import, Export, and Backup Operations"
msgstr ""

#: ../source/core/import-export.txt:45
# 8a103214acf64dc1b5a5488650481d35
msgid "For resilient and non-disruptive backups, use a file system or block-level disk snapshot function, such as the methods described in the :doc:`/core/backups` document. The tools and operations discussed provide functionality that is useful in the context of providing some kinds of backups."
msgstr ""

#: ../source/core/import-export.txt:51
# 3ac91dcddd064c4d8b1ecf59fae8ab3b
msgid "In contrast, use import and export tools to backup a small subset of your data or to move data to or from a third party system. These backups may capture a small crucial set of data or a frequently modified section of data for extra insurance, or for ease of access."
msgstr ""

#: ../source/includes/warning-type-fidelity-loss.rst:3
#: ../source/includes/warning-type-fidelity-loss.rst:3
#: ../source/includes/warning-type-fidelity-loss.rst:3
# 8ca07d29591940c09348fc1be738900d
# 4872ddf10eea4c79a45f3e229b070f2a
# 1a4c1961561e4fbd8589c575894439ad
msgid ":program:`mongoimport` and :program:`mongoexport` do not reliably preserve all rich :term:`BSON` data types because :term:`JSON` can only represent a subset of the types supported by BSON. As a result, data exported or imported with these tools may lose some measure of fidelity. See the :doc:`Extended JSON </reference/mongodb-extended-json>` reference for more information."
msgstr ""

#: ../source/core/import-export.txt:58
# bc65fc0591f048f7aa618634315d7025
msgid "No matter how you decide to import or export your data, consider the following guidelines:"
msgstr ""

#: ../source/core/import-export.txt:61
# a2930629ab994bf29e545da8a322e414
msgid "Label files so that you can identify the contents of the export or backup as well as the point in time the export/backup reflect."
msgstr ""

#: ../source/core/import-export.txt:64
# d57e8d75a6ae4c1ba0ca689c30fed121
msgid "Do not create or apply exports if the backup process itself will have an adverse effect on a production system."
msgstr ""

#: ../source/core/import-export.txt:67
# d0998bb81be54cebab25d5f303f83b94
msgid "Make sure that they reflect a consistent data state. Export or backup processes can impact data integrity (i.e. type fidelity) and consistency if updates continue during the backup process."
msgstr ""

#: ../source/core/import-export.txt:71
# c7faf6077b54446e8aa4801e67d1f88a
msgid "Test backups and exports by restoring and importing to ensure that the backups are useful."
msgstr ""

#: ../source/core/import-export.txt:75
# b9598cc531a94c529cdb8643ecf7550b
msgid "Human Intelligible Import/Export Formats"
msgstr ""

#: ../source/core/import-export.txt:77
# f5c4b2b6c5c14190b7faf926833f0bea
msgid "This section describes a process to import/export a collection to a file in a :term:`JSON` or :term:`CSV` format."
msgstr ""

#: ../source/core/import-export.txt:80
# 071a2d49d6f94e68834c61358761f97b
msgid "The examples in this section use the MongoDB tools :program:`mongoimport` and :program:`mongoexport`. These tools may also be useful for importing data into a MongoDB database from third party applications."
msgstr ""

#: ../source/core/import-export.txt:86
# 2feb6c09c23644e6954be59375fa0c92
msgid "If you want to simply copy a database or collection from one instance to another, consider using the :dbcommand:`copydb`, :dbcommand:`clone`, or :dbcommand:`cloneCollection` commands, which may be more suited to this task. The :program:`mongo` shell provides the :method:`db.copyDatabase()` method."
msgstr ""

#: ../source/core/import-export.txt:93
# de09f72f154d4c0ead226d7a1f2e53d5
msgid "Collection Export with :program:`mongoexport`"
msgstr ""

#: ../source/core/import-export.txt:95
# 47281ea46d444c498318719b782eb5c0
msgid "You can use the :program:`mongoexport` utility you can create a backup file."
msgstr ""

#: ../source/core/import-export.txt:100
# 0d5b139270b4451f92c71631e8c48270
msgid "In the most simple invocation, the command takes the following form:"
msgstr ""

#: ../source/core/import-export.txt:107
# 0a8cc03852d142bfa2b9e2c2a26f35fb
msgid "This will export all documents in the collection named ``collection`` into the file ``collection.json``. Without the output specification (i.e. \":option:`--out collection.json <mongoexport --out>`\"), :program:`mongoexport` writes output to standard output (i.e. \"stdout\"). You can further narrow the results by supplying a query filter using the \":option:`--query <mongoexport --query>`\" and limit results to a single database using the \":option:`--db <mongoexport --db>`\" option. For instance:"
msgstr ""

#: ../source/core/import-export.txt:120
# 27f6c5b42e5249f8b1fce0495f5d12bc
msgid "This command returns all documents in the ``sales`` database's ``contacts`` collection, with a field named ``field`` with a value of ``1``. Enclose the query in single quotes (e.g. ``'``) to ensure that it does not interact with your shell environment. The resulting documents will return on standard output."
msgstr ""

#: ../source/core/import-export.txt:126
# 31e35116a6194cd9a5e6a8b46b8fd10b
msgid "By default, :program:`mongoexport` returns one :term:`JSON document` per MongoDB document. Specify the \":option:`--jsonArray <mongoexport --jsonArray>`\" argument to return the export as a single :term:`JSON` array. Use the \":option:`--type=csv <--type>`\" file to return the result in CSV (comma separated values) format."
msgstr ""

#: ../source/core/import-export.txt:133
# 1a95fdfce5a34c1e89219ef08073b0c1
msgid ":program:`mongoexport` removed the ``--csv`` option and replaced with the :option:`--type` option."
msgstr ""

#: ../source/core/import-export.txt:137
# fbee073eb2714e37b812dfc7ebf762da
msgid "If your :program:`mongod` instance is not running, you can use the \":option:`--dbpath <mongoexport --dbpath>`\" option to specify the location to your MongoDB instance's database files. See the following example:"
msgstr ""

#: ../source/core/import-export.txt:146
# 3243e9fafb3c4c26846e240cfaef5a38
msgid "This reads the data files directly. This locks the data directory to prevent conflicting writes. The :program:`mongod` process must *not* be running or attached to these data files when you run :program:`mongoexport` in this configuration."
msgstr ""

#: ../source/core/import-export.txt:151
# c0d7d9b51cad4d20abd15af688d93209
msgid "The \":option:`--host <mongoexport --host>`\" and \":option:`--port <mongoexport --port>`\" options allow you to specify a non-local host to connect to capture the export. Consider the following example:"
msgstr ""

#: ../source/core/import-export.txt:159
# 354dc55d044a4a1fa64b16b520b9d847
msgid "On any :program:`mongoexport` command you may, as above specify username and password credentials as above."
msgstr ""

#: ../source/core/import-export.txt:163
# ce14b64bf682434fa8ea5a803c518644
msgid "Collection Import with :program:`mongoimport`"
msgstr ""

#: ../source/core/import-export.txt:165
# a00e4bf183104012afddc226529a0381
msgid "To restore a backup taken with :program:`mongoexport`. Most of the arguments to :program:`mongoexport` also exist for :program:`mongoimport`."
msgstr ""

#: ../source/core/import-export.txt:171
# 8eb4f0c9a3894c4cab1b3d9291574fe3
msgid "Consider the following command:"
msgstr ""

#: ../source/core/import-export.txt:177
# 24f9e0c5043a425f9f25a9c4026bae2a
msgid "This imports the contents of the file ``collection.json`` into the collection named ``collection``. If you do not specify a file with the \":option:`--file <mongoimport --file>`\" option, :program:`mongoimport` accepts input over standard input (e.g. \"stdin.\")"
msgstr ""

#: ../source/core/import-export.txt:183
# 31a55dc94bad4af2bfbdc28c0335e868
msgid "If you specify the \":option:`--upsert <mongoimport --upsert>`\" option, all of :program:`mongoimport` operations will attempt to update existing documents in the database and insert other documents. This option will cause some performance impact depending on your configuration."
msgstr ""

#: ../source/core/import-export.txt:189
# fe0284cd82724d018864b36a1156c673
msgid "You can specify the database option :option:`--db <mongoimport --db>` to import these documents to a particular database. If your MongoDB instance is not running, use the \":option:`--dbpath <mongoimport --dbpath>`\" option to specify the location of your MongoDB instance's database files. Consider using the \":option:`--journal <mongoimport --journal>`\" option to ensure that :program:`mongoimport` records its operations in the journal. The ``mongod`` process must *not* be running or attached to these data files when you run :program:`mongoimport` in this configuration."
msgstr ""

#: ../source/core/import-export.txt:199
# 045e832fb7c44c069ca31d4e3a9ce1fc
msgid "Use the \":option:`--ignoreBlanks <mongoimport --ignoreBlanks>`\" option to ignore blank fields. For :term:`CSV` and :term:`TSV` imports, this option provides the desired functionality in most cases: it avoids inserting blank fields in MongoDB documents."
msgstr ""

