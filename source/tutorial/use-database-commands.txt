=====================
Use Database Commands
=====================

.. default-domain:: mongodb

The MongoDB command interface provides access to all :term:`non CRUD
<crud>` database operations. Fetching server stats, initializing a
replica set, and running a map-reduce job are all accomplished with
commands.

See :doc:`/reference/command` for list of all commands sorted by
function, and :doc:`/reference/command` for a list of all commands
sorted alphabetically.

Database Command Form
---------------------

You specify a command first by constructing a standard :term:`BSON`
document whose first key is the name of the command. For example,
specify the :dbcommand:`isMaster` command using the following
:term:`BSON` document:

.. code-block:: javascript

   { isMaster: 1 }

.. _issue-commands:

Issue Commands
--------------

The :program:`mongo` shell provides a helper method for running
commands called :method:`db.runCommand()`. The following operation in
:program:`mongo` runs the above command:

.. code-block:: javascript

   db.runCommand( { isMaster: 1 } )

Many :doc:`drivers </applications/drivers>` provide an equivalent for
the :method:`db.runCommand()` method. Internally, running commands
with :method:`db.runCommand()` is equivalent to a special query
against the :term:`$cmd` collection.

Many common commands have their own shell helpers or wrappers in the
:program:`mongo` shell and drivers, such as the
:method:`db.isMaster()` method in the :program:`mongo` JavaScript
shell.

You can use the ``maxTimeMS`` option to specify a time limit for the
execution of a command, see :ref:`terminate-long-running-commands` for
more information on operation termination.

.. _admin-command:

``admin`` Database Commands
---------------------------

You must run some commands on the :term:`admin database`. Normally,
these operations resemble the followings:

.. code-block:: javascript

   use admin
   db.runCommand( {buildInfo: 1} )

However, there's also a command helper that automatically runs the
command in the context of the ``admin`` database:

.. code-block:: javascript

   db._adminCommand( {buildInfo: 1} )

Command Responses
-----------------

All commands return, at minimum, a document with an ``ok`` field
indicating whether the command has succeeded:

.. code-block:: javascript

   { 'ok': 1 }

Failed commands return the ``ok`` field with a value of ``0``.
