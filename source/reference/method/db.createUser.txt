===============
db.createUser()
===============

.. default-domain:: mongodb

.. versionchanged:: 2.5.3

Definition
----------

.. method:: db.createUser( userDocument, writeConcern )

   Adds a new user on the database where the method runs. The
   :method:`db.createUser()` method returns a *duplicate user* error if the
   user already exists.

   The :method:`db.createUser()` method takes a ``userDocument`` and a
   :doc:`writeConcern </reference/write-concern>` document as its arguments.
   The ``userDocument`` has the following form:

   .. code-block:: javascript

      {
        user: "<username>",
        pwd: "<cleartext password>",
        customData: { <any information> },
        roles:
          [
            <role>,
            ...
          ]
      }

   The ``userDocument`` has the following fields:

   .. include:: /reference/method/db.createUser-param.rst

   :method:`db.createUser()` sends password to the MongoDB instance as
   cleartext. To encrypt the password in transit use :doc:`SSL
   </tutorial/configure-ssl>`.

   Users created on the ``$external`` database should have credentials
   stored externally to MongoDB, as, for example, with :doc:`MongoDB
   Enterprise installations that use Kerberos
   </tutorial/control-access-to-mongodb-with-kerberos-authentication>`.

   The ``writeConcern`` document specifies the level of :doc:`write concern
   </reference/write-concern>` for the creation operation. The
   ``writeConcern`` document takes the same fields as the
   :dbcommand:`getLastError` command.

   .. |local-cmd-name| replace:: :method:`db.createUser()`
   .. include:: /includes/fact-roles-array-contents.rst

Example
-------

The following :method:`db.createUser()` method adds the user
``accountAdmin01`` to the database where the command runs. The command gives
``accountAdmin01`` the ``clusterAdmin`` and ``readAnyDatabase`` roles on the
``admin`` database and the ``readWrite`` role on the current database:

.. code-block:: javascript

   db.createUser(
     {
       user: "accountAdmin01",
       pwd: "cleartext password",
       customData: { employeeId: 12345 },
       roles:
         [
           { role: "clusterAdmin", db: "admin" },
           { role: "readAnyDatabase", db: "admin" },
           "readWrite"
         ],
       writeConcern: { w: "majority" , wtimeout: 5000 }
     }
   )
