=========================
Install MongoDB on Debian
=========================

.. default-domain:: mongodb

Synopsis
--------

This tutorial outlines the basic installation process for installing
:term:`MongoDB` on Debian systems. This tutorial uses
``.deb`` packages as the basis of the installation. 10gen publishes
packages of the MongoDB releases as ``.deb`` packages for easy
installation and management for users of Debian systems. While some of
these distributions include their own MongoDB packages, the 10gen
packages are generally more up to date.

This tutorial includes: an overview of the available packages,
instructions for configuring the package manager, the process
for installing packages from the 10gen repository, and preliminary MongoDB
configuration and operation.

.. note::

   This tutorial applies to both Debian systems and versions of Ubuntu 
   Linux prior to 9.10 "Karmic" which do not use Upstart. Other Ubuntu 
   users will want to follow the :doc:`/tutorial/install-mongodb-on-ubuntu` 
   tutorial.

.. see:: Additional installation tutorials:

   - :doc:`/tutorial/install-mongodb-on-red-hat-centos-or-fedora-linux`
   - :doc:`/tutorial/install-mongodb-on-ubuntu`
   - :doc:`/tutorial/install-mongodb-on-linux`
   - :doc:`/tutorial/install-mongodb-on-os-x`
   - :doc:`/tutorial/install-mongodb-on-windows`

   .. Documentation for getting started with MongoDB:

   .. - :doc:`/getting-started`
   .. - :doc:`/tutorial/insert-test-data-into-a-mongodb-database`

Package Options
---------------

The 10gen repository provides the ``mongodb-10gen`` package,
which contains the latest **stable** release. Additionally you can 
:ref:`install previous releases <install-debian-version-pinning>` of MongoDB.

You cannot install this package concurrently with the ``mongodb``,
``mongodb-server``, or ``mongodb-clients`` packages that 
your release of Debian may include.

Install MongoDB
---------------

Configure Package Management System (APT)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Debian package management tool (i.e. ``dpkg`` and ``apt``) ensure
package consistency and authenticity by requiring that distributors
sign packages with GPG keys. Issue the following command to import the
`10gen public GPG Key <http://docs.mongodb.org/10gen-gpg-key.asc>`_:

.. code-block:: sh

   sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10

Create the ``/etc/apt/sources.list.d/10gen.list`` file and include
the following line for the 10gen repository.

.. code-block:: sources.list

   deb http://downloads-distro.mongodb.org/repo/debian-sysvinit dist 10gen

Now issue the following command to reload your repository:

.. code-block:: sh

   sudo apt-get update

Install Packages
~~~~~~~~~~~~~~~~

Issue the following command to install the latest stable version of
MongoDB:

.. code-block:: sh

   sudo apt-get install mongodb-10gen

When this command completes, you have successfully installed MongoDB!

.. _install-debian-version-pinning:

Manage Installed Versions
~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the ``mongodb-10gen`` package to install previous versions
of MongoDB. To install a specific release, append the version number
to the package name, as in the following example:

.. code-block:: sh

   apt-get install mongodb-10gen=2.2.3

This will install the ``2.2.3`` release of MongoDB. You can specify
any available version of MongoDB; however ``apt-get`` **will** upgrade
the ``mongodb-10gen`` package when a newer version becomes available. Use
the following *pinning* procedure to prevent unintended upgrades.

To pin a package, issue the following command at the system prompt to
*pin* the version of MongoDB at the currently installed version:

.. code-block:: sh

   echo "mongodb-10gen hold" | dpkg --set-selections

Configure MongoDB
-----------------

These packages configure MongoDB using the ``/etc/mongodb.conf`` file
in conjunction with the :term:`control script`.  You can find the
control script at ``/etc/init.d/mongodb``.

This MongoDB instance will store its data files in the
``/var/lib/mongodb`` and its log files in ``/var/log/mongodb``, and
run using the ``mongodb`` user account.

.. note::

   If you change the user that runs the MongoDB process, you will need
   to modify the access control rights to the ``/var/lib/mongodb`` and
   ``/var/log/mongodb`` directories.

Controlling MongoDB
-------------------

Starting MongoDB
~~~~~~~~~~~~~~~~

Issue the following command to start :program:`mongod`:

.. code-block:: sh

   sudo /etc/init.d/mongodb start

You can verify that :program:`mongod` has started successfully by checking the
contents of the log file at ``/var/log/mongodb/mongodb.log``.

Stopping MongoDB
~~~~~~~~~~~~~~~~

Issue the following command to stop :program:`mongod`:

.. code-block:: sh

   sudo /etc/init.d/mongodb stop

Restarting MongoDB
~~~~~~~~~~~~~~~~~~

Issue the following command to restart :program:`mongod`:

.. code-block:: sh

   sudo /etc/init.d/mongodb restart

Controlling :program:`mongos`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As of the current release, there are no :term:`control scripts
<control script>` for :program:`mongos`. :program:`mongos` is only
used in sharding deployments and typically do not run on the same
systems where :program:`mongod` runs. You can use the ``mongodb``
script referenced above to derive your own :program:`mongos` control
script.

Using MongoDB
-------------

Among the tools included with the MongoDB package, is the
:program:`mongo` shell. You can connect to your MongoDB instance by
issuing the following command at the system prompt:

.. code-block:: sh

   mongo

This will connect to the database running on the localhost interface
by default. At the :program:`mongo` prompt, issue the following two
commands to insert a record in the "test" :term:`collection` of the
(default) "test" database.

.. code-block:: javascript

   > db.test.save( { a: 1 } )
   > db.test.find()

.. seealso:: ":program:`mongo`" and ":doc:`/reference/javascript`"
