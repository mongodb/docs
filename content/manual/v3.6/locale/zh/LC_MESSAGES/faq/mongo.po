# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/mongo.txt:3
msgid "FAQ: The ``mongo`` Shell"
msgstr ""

#: ../source/faq/mongo.txt:10
msgid "How can I enter multi-line operations in the ``mongo`` shell?"
msgstr ""

#: ../source/faq/mongo.txt:12
msgid ""
"If you end a line with an open parenthesis (``'('``), an open brace "
"(``'{'``), or an open bracket (``'['``), then the subsequent lines start "
"with ellipsis (``\"...\"``) until you enter the corresponding closing "
"parenthesis (``')'``), the closing brace (``'}'``) or the closing bracket "
"(``']'``). The :program:`mongo` shell waits for the closing parenthesis, "
"closing brace, or the closing bracket before evaluating the code, as in the "
"following example:"
msgstr ""

#: ../source/faq/mongo.txt:27
msgid ""
"You can exit the line continuation mode if you enter two blank lines, as in "
"the following example:"
msgstr ""

#: ../source/faq/mongo.txt:40
msgid "How can I access different databases temporarily?"
msgstr ""

#: ../source/faq/mongo.txt:42
msgid ""
"You can use :method:`db.getSiblingDB()` method to access another database "
"without switching databases, as in the following example which first "
"switches to the ``test`` database and then accesses the ``sampleDB`` "
"database from the ``test`` database:"
msgstr ""

#: ../source/faq/mongo.txt:56
msgid ""
"Does the ``mongo`` shell support tab completion and other keyboard "
"shortcuts?"
msgstr ""

#: ../source/faq/mongo.txt:58
msgid "The :program:`mongo` shell supports keyboard shortcuts. For example,"
msgstr ""

#: ../source/faq/mongo.txt:60
msgid ""
"Use the up/down arrow keys to scroll through command history. See "
":ref:`.dbshell <mongo-dbshell-file>` documentation for more information on "
"the ``.dbshell`` file."
msgstr ""

#: ../source/faq/mongo.txt:64
msgid ""
"Use ``<Tab>`` to autocomplete or to list the completion possibilities, as in"
" the following example which uses ``<Tab>`` to complete the method name "
"starting with the letter ``'c'``:"
msgstr ""

#: ../source/faq/mongo.txt:72
msgid ""
"Because there are many collection methods starting with the letter ``'c'``, "
"the ``<Tab>`` will list the various methods that start with ``'c'``."
msgstr ""

#: ../source/faq/mongo.txt:76
msgid ""
"For a full list of the shortcuts, see :ref:`Shell Keyboard Shortcuts <mongo-"
"keyboard-shortcuts>`"
msgstr ""

#: ../source/faq/mongo.txt:79
msgid "How can I customize the ``mongo`` shell prompt?"
msgstr ""

#: ../source/faq/mongo.txt:83
msgid ""
"You can change the :program:`mongo` shell prompt by setting the ``prompt`` "
"variable. This makes it possible to display additional information in the "
"prompt."
msgstr ""

#: ../source/faq/mongo.txt:87
msgid ""
"Set ``prompt`` to any string or arbitrary JavaScript code that returns a "
"string, consider the following examples:"
msgstr ""

#: ../source/faq/mongo.txt:90
msgid "Set the shell prompt to display the hostname and the database issued:"
msgstr ""

#: ../source/faq/mongo.txt:97 ../source/faq/mongo.txt:111
msgid "The :program:`mongo` shell prompt should now reflect the new prompt:"
msgstr ""

#: ../source/faq/mongo.txt:103
msgid "Set the shell prompt to display the database statistics:"
msgstr ""

#: ../source/faq/mongo.txt:117
msgid ""
"You can add the logic for the prompt in the :ref:`.mongorc.js <mongo-"
"mongorc-file>` file to set the prompt each time you start up the "
":program:`mongo` shell."
msgstr ""

#: ../source/faq/mongo.txt:122
msgid "Can I edit long shell operations with an external text editor?"
msgstr ""

#: ../source/faq/mongo.txt:126
msgid ""
"You can use your own editor in the :program:`mongo` shell by setting the "
":envvar:`EDITOR` environment variable before starting the :program:`mongo` "
"shell. Once in the :program:`mongo` shell, you can edit with the specified "
"editor by typing ``edit <variable>`` or ``edit <function>``, as in the "
"following example:"
msgstr ""

#: ../source/faq/mongo.txt:132
msgid "Set the :envvar:`EDITOR` variable from the command line prompt:"
msgstr ""

#: ../source/faq/mongo.txt:138
msgid "Start the :program:`mongo` shell:"
msgstr ""

#: ../source/faq/mongo.txt:144
msgid "Define a function ``myFunction``:"
msgstr ""

#: ../source/faq/mongo.txt:150
msgid "Edit the function using your editor:"
msgstr ""

#: ../source/faq/mongo.txt:156
msgid ""
"The command should open the ``vim`` edit session. Remember to save your "
"changes."
msgstr ""

#: ../source/faq/mongo.txt:159
msgid "Type ``myFunction`` to see the function definition:"
msgstr ""

#: ../source/faq/mongo.txt:165
msgid "The result should be the changes from your saved edit:"
msgstr ""
