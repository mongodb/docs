# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 19:31+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# ba89e8a3767048f981460b1ddd514fdd
#: ../source/core/shell-types.txt:3
msgid "Data Types in the ``mongo`` Shell"
msgstr ""

# 1ad4bdde964849ec9ed4e7f69d2bc33c
#: ../source/core/shell-types.txt
msgid "On this page"
msgstr ""

# f00b783b07464ff3a82e6e9707ccfb7d
#: ../source/core/shell-types.txt:13
msgid ""
"MongoDB :term:`BSON` provides support for additional data types than "
":term:`JSON`. :doc:`Drivers </applications/drivers>` provide native "
"support for these data types in host languages and the :program:`mongo` "
"shell also provides several helper classes to support the use of these "
"data types in the :program:`mongo` JavaScript shell. See the "
":doc:`Extended JSON </reference/mongodb-extended-json>` reference for "
"additional information."
msgstr ""

# b9cb1a8584914127b432ba10697493eb
#: ../source/core/shell-types.txt:24
msgid "Types"
msgstr ""

# e80007bcad014499a137f2c7012b0965
#: ../source/core/shell-types.txt:29
msgid "Date"
msgstr ""

# ec7c01ce34c94f5e88a15494513f113c
#: ../source/core/shell-types.txt:31
msgid ""
"The :program:`mongo` shell provides various methods to return the date, "
"either as a string or as a ``Date`` object:"
msgstr ""

# 87b9ad00854f443c9d7b628b3f611433
#: ../source/core/shell-types.txt:34
msgid "``Date()`` method which returns the current date as a string."
msgstr ""

# 54a0bee9cceb4fbe81fad442460a258d
#: ../source/core/shell-types.txt:36
msgid ""
"``new Date()`` constructor which returns a ``Date`` object using the "
"``ISODate()`` wrapper."
msgstr ""

# c0d02563dfca4784ac452957d2577a76
#: ../source/core/shell-types.txt:39
msgid ""
"``ISODate()`` constructor which returns a ``Date`` object using the "
"``ISODate()`` wrapper."
msgstr ""

# 7f5f87cbfd3c4c4b84cf63bc607b0b45
#: ../source/includes/fact-bson-date-internals.rst:1
msgid ""
"Internally, :ref:`document-bson-type-date` objects are stored as a 64 bit"
" integer representing the number of milliseconds since the Unix epoch "
"(Jan 1, 1970), which results in a representable date range of about 290 "
"millions years into the past and future."
msgstr ""

# 8158bf1e12b14cdab632c9eac4dcb9f2
#: ../source/core/shell-types.txt:45
msgid "Return Date as a String"
msgstr ""

# aaf445d12db645018098041482bc4499
#: ../source/core/shell-types.txt:47
msgid ""
"To return the date as a string, use the ``Date()`` method, as in the "
"following example:"
msgstr ""

# df7281d4698e4e09b76db14771fc2093
# 3040aacc89534eaab465e92d03b99316
#: ../source/core/shell-types.txt:54 ../source/core/shell-types.txt:92
msgid ""
"To print the value of the variable, type the variable name in the shell, "
"as in the following:"
msgstr ""

# 50e49c0155ad4862b937173628faefc3
#: ../source/core/shell-types.txt:61
msgid "The result is the value of ``myDateString``:"
msgstr ""

# eaa88650fc7f42d39ab2a017230b904c
#: ../source/core/shell-types.txt:67
msgid "To verify the type, use the ``typeof`` operator, as in the following:"
msgstr ""

# 1cc708954d7c42e790f9146ab6b52f86
#: ../source/core/shell-types.txt:73
msgid "The operation returns ``string``."
msgstr ""

# 5a562a0a0f15472089cdf71e2583a153
#: ../source/core/shell-types.txt:76
msgid "Return ``Date``"
msgstr ""

# 3e37023f370d4207b8e2021503da2a59
#: ../source/core/shell-types.txt:78
msgid ""
"The :program:`mongo` shell wraps objects of ``Date`` type with the "
"``ISODate`` helper; however, the objects remain of type ``Date``."
msgstr ""

# d98c2119b085484284c356f7c0dbb8e5
#: ../source/core/shell-types.txt:81
msgid ""
"The following example uses both the ``new Date()`` constructor and the "
"``ISODate()`` constructor to return ``Date`` objects."
msgstr ""

# 7f63ade6ce5c48bbb6a9d7c930008e28
#: ../source/core/shell-types.txt:89
msgid ""
"You can use the ``new`` operator with the ``ISODate()`` constructor as "
"well."
msgstr ""

# 2fb94a23a8c84b3e9fdb1975aaf2239a
#: ../source/core/shell-types.txt:99
msgid ""
"The result is the ``Date`` value of ``myDate`` wrapped in the "
"``ISODate()`` helper:"
msgstr ""

# 9b650950b69546c9af15af5980ef6bd2
#: ../source/core/shell-types.txt:106
msgid "To verify the type, use the ``instanceof`` operator, as in the following:"
msgstr ""

# 4c59f32e2e8e4ecfbe63022002256014
#: ../source/core/shell-types.txt:114
msgid "The operation returns ``true`` for both."
msgstr ""

# a978871250484752b5aeaebeafab89a0
#: ../source/core/shell-types.txt:117
msgid "ObjectId"
msgstr ""

# 09f99c369ea440379d97f0df34028a20
#: ../source/core/shell-types.txt:119
msgid ""
"The :program:`mongo` shell provides the ``ObjectId()`` wrapper class "
"around the :ref:`objectid` data type. To generate a new ObjectId, use the"
" following operation in the :program:`mongo` shell:"
msgstr ""

# c72c121c427344d98e3a8793386aab6a
#: ../source/core/shell-types.txt
msgid "See"
msgstr ""

# 84a26a207ebb4529b33cb24b119650c0
#: ../source/core/shell-types.txt:132
msgid "NumberLong"
msgstr ""

# 10ffea8c07614c75a058c3627e6c2fae
#: ../source/core/shell-types.txt:134
msgid ""
"The :program:`mongo` shell treats all numbers as floating-point values by"
" default. The :program:`mongo` shell provides the ``NumberLong()`` "
"wrapper to handle 64-bit integers."
msgstr ""

# 44d68b818eda4ced829d669b45430621
#: ../source/core/shell-types.txt:138
msgid "The ``NumberLong()`` wrapper accepts the long as a string:"
msgstr ""

# b3d4fa26f8af4921ad09aab901321e30
#: ../source/core/shell-types.txt:144
msgid ""
"The following examples use the ``NumberLong()`` wrapper to write to the "
"collection:"
msgstr ""

# d764b7a6a4644933b92afc23272d3e6d
#: ../source/core/shell-types.txt:155
msgid "Retrieve the document to verify:"
msgstr ""

# ae7479e8d0b84feb9f80e77652da7615
#: ../source/core/shell-types.txt:161
msgid ""
"In the returned document, the ``calc`` field contains a ``NumberLong`` "
"object:"
msgstr ""

# 47678edbdd15407bbf7628bd7d797a8a
#: ../source/core/shell-types.txt:168
msgid ""
"If you use the :update:`$inc` to increment the value of a field that "
"contains a ``NumberLong`` object by a **float**, the data type changes to"
" a floating point value, as in the following example:"
msgstr ""

# 6106ab0883bd4514beb729b24175c218
#: ../source/core/shell-types.txt:172
msgid ""
"Use :update:`$inc` to increment the ``calc`` field by ``5``, which the "
":program:`mongo` shell treats as a float:"
msgstr ""

# 281b7457755b4a1c9a4ab89f9a472d4c
#: ../source/core/shell-types.txt:180
msgid "Retrieve the updated document:"
msgstr ""

# 0c711c41677149ff825985152bb5e6f3
#: ../source/core/shell-types.txt:186
msgid ""
"In the updated document, the ``calc`` field contains a floating point "
"value:"
msgstr ""

# c718bde15d344e15b0602f000d42521f
#: ../source/core/shell-types.txt:196
msgid "NumberInt"
msgstr ""

# 3197da676b35455a91f7543ecbf1b515
#: ../source/core/shell-types.txt:198
msgid ""
"The :program:`mongo` shell treats all numbers as floating-point values by"
" default. The :program:`mongo` shell provides the ``NumberInt()`` "
"constructor to explicitly specify 32-bit integers."
msgstr ""

# 5a4cae625dd6404a9532b89ea8473916
#: ../source/core/shell-types.txt:205
msgid "NumberDecimal"
msgstr ""

# db2db5cf3d00417abafa3060ebb349c4
#: ../source/core/shell-types.txt:209
msgid ""
"The :program:`mongo` shell treats all numbers as 64-bit floating-point "
"``double`` values by default. The :program:`mongo` shell provides the "
"``NumberDecimal()`` constructor to explicitly specify 128-bit decimal-"
"based floating-point values capable of emulating decimal rounding with "
"exact precision. This functionality is intended for applications that "
"handle :doc:`monetary data </tutorial/model-monetary-data>`, such as "
"financial, tax, and scientific computations."
msgstr ""

# e84ab950faec4ba7879bddc15a5fcf2b
#: ../source/core/shell-types.txt:218
msgid ""
"The ``decimal`` :doc:`BSON type </reference/bson-types>` uses the IEEE "
"754 decimal128 floating-point numbering format which supports 34 decimal "
"digits (i.e. significant digits) and an exponent range of âˆ’6143 to +6144."
msgstr ""

# a545359f6fd644eb8bf4143d6933b7e8
#: ../source/core/shell-types.txt:223
msgid ""
"The ``NumberDecimal()`` constructor accepts the ``decimal`` value as a "
"string:"
msgstr ""

# 35f4ce69983248bb8a66f0acf0ffa5dc
# 2ab314421eff4e70a464ce7511810689
# 8780d7ece1e344008ec6e3c83ead8408
#: ../source/core/shell-types.txt:230 ../source/core/shell-types.txt:249
#: ../source/core/shell-types.txt:262
msgid "The value is stored in the database as follows:"
msgstr ""

# f05dae8e98de4091b8102d56cd3bc364
#: ../source/core/shell-types.txt:236
msgid ""
"The ``NumberDecimal()`` constructor also accepts ``double`` values from "
"the :program:`mongo` shell (i.e. without quotes), although this is not "
"recommended due to the risk of losing precision. The constructor creates "
"a binary-based ``double`` precision representation of the decimal-based "
"parameter (potentially losing precision), then converts that value to a "
"``decimal`` value with a precision of 15 digits. The following example "
"passes the value implicitly as a ``double`` and shows how it is created "
"with a precision of 15 digits:"
msgstr ""

# ee411699d4c943d6af80b85cc12178f3
#: ../source/core/shell-types.txt:255
msgid ""
"The following example passes the value implicitly as a ``double`` and "
"shows how a loss of precision can occur:"
msgstr ""

# ce862bb69ebb464992e64ad3c7f8ceb8
#: ../source/core/shell-types.txt:269
msgid ""
"To use the ``decimal`` data type with a :ecosystem:`MongoDB driver "
"</drivers/>`, be sure to use a driver version that supports it."
msgstr ""

# 99c1941f16794acd8eb79f52838fe2ce
#: ../source/core/shell-types.txt:274
msgid "Equality and Sort Order"
msgstr ""

# 5cb1b0abdf5e4a678efb923827f728b8
#: ../source/core/shell-types.txt:276
msgid ""
"Values of the ``decimal`` type are compared and sorted with other numeric"
" types based on their actual numeric value.  Numeric values of the "
"binary-based ``double`` type generally have approximate representations "
"of decimal-based values and may not be exactly equal to their ``decimal``"
" representations, so use the ``NumberDecimal()`` constructor when "
"checking the equality of ``decimal`` values. Consider the following "
"examples with the following documents in the ``numbers`` collection:"
msgstr ""

# 2ddddd4adf1a40178778f5df1dd07269
#: ../source/core/shell-types.txt:293
msgid ""
"When the queries from the table below are plugged into the "
"``db.numbers.find(<query>)`` method, the following results are returned:"
msgstr ""

# 92719e6f80694ac5a4807e046191dc48
#: ../source/core/shell-types.txt:301
msgid "Query"
msgstr ""

# e1d9895c30bb447d9a395fe879c19dda
#: ../source/core/shell-types.txt:302
msgid "Results"
msgstr ""

# 8882d5420be44e1d860535bd4ad46b23
#: ../source/core/shell-types.txt:304
msgid "**{ \"val\": 9.99 }**"
msgstr ""

# e2733f30c7d34b06a5456c68511d3982
#: ../source/core/shell-types.txt:305
msgid "**{ \"_id\": 2, \"val\": 9.99, \"description\": \"Double\" }**"
msgstr ""

# 4a8c5a0ef3314cc4b3fe562238957331
#: ../source/core/shell-types.txt:307
msgid "**{ \"val\": NumberDecimal( \"9.99\" ) }**"
msgstr ""

# b6b1bec91642408ca8f58152a66ddea7
#: ../source/core/shell-types.txt:308
msgid ""
"**{ \"_id\": 1, \"val\": NumberDecimal( \"9.99\" ), \"description\": "
"\"Decimal\" }**"
msgstr ""

# 722ad80702fc46cab328ba6d4d1b3396
#: ../source/core/shell-types.txt:310
msgid "**{ val: 10 }**"
msgstr ""

# 31ee6e489e2a4e7d8e386f0b5f589cdd
# e4ce455d62e2457f9b89ac624af65d52
#: ../source/core/shell-types.txt
msgid "**{ \"_id\": 3, \"val\": 10, \"description\": \"Double\" }**"
msgstr ""

# f8b85d75c6a3478194ce35442039645d
# c81e05b765c24328947704740e50db97
#: ../source/core/shell-types.txt
msgid "**{ \"_id\": 4, \"val\": NumberLong(10), \"description\": \"Long\" }**"
msgstr ""

# ab21017323084e99872376073657b201
# 49df4410cd244a9a8a90f62ad2cd5aa4
#: ../source/core/shell-types.txt
msgid ""
"**{ \"_id\": 5, \"val\": NumberDecimal( \"10.0\" ), \"description\": "
"\"Decimal\" }**"
msgstr ""

# 219f66f83dd84012b16bcc70b36028c9
#: ../source/core/shell-types.txt:315
msgid "**{ val: NumberDecimal( \"10\" ) }**"
msgstr ""

# 75a62bd36a1a455ea52f45d16ba7c420
#: ../source/core/shell-types.txt:321
msgid ""
"The first query, ``{ \"val\": 9.99 }``, implicitly searches for the "
"``double`` representation of ``9.99`` which is not equal to the "
"``decimal`` representation of the value."
msgstr ""

# 72ba1f85db114960ad4b8bf8580b82d8
#: ../source/core/shell-types.txt:325
msgid ""
"The ``NumberDecimal()`` constructor is used to query for the document "
"with the ``decimal`` representation of ``9.99``. Values of the ``double``"
" type are excluded because they do not match the exact value of the "
"``decimal`` representation of ``9.99``."
msgstr ""

# 7dfe279441f245bbb99f2a2330135eff
#: ../source/core/shell-types.txt:330
msgid ""
"Matching values of all numeric types are returned when querying for whole"
" numbers. For example, querying for a ``double`` representation of ``10``"
" will include a ``decimal`` representation of ``10.0`` in the results and"
" vice versa."
msgstr ""

# 6c5d1720833e45a193e720ca0821e3af
#: ../source/core/shell-types.txt:336
msgid "Checking for ``decimal`` Type"
msgstr ""

# c3046ede67954cf7aa4f34a01b31a11c
#: ../source/core/shell-types.txt:338
msgid ""
"To test for ``decimal`` type, use the :query:`$type` operator with the "
"string alias ``\"decimal\"`` or ``19``, the numeric code for the "
"``decimal`` type."
msgstr ""

# 729ce3f2d2944c0e98ab07e07eacfba3
#: ../source/core/shell-types.txt:349
msgid "Check Types in the ``mongo`` Shell"
msgstr ""

# 49ca1270e4424cd8afc5f336a1f08327
#: ../source/core/shell-types.txt:351
msgid ""
"To determine the type of fields, the :program:`mongo` shell provides the "
"``instanceof`` and ``typeof`` operators."
msgstr ""

# 97f0238bb6d04899b1a85ed625d3034d
#: ../source/core/shell-types.txt:356
msgid "``instanceof``"
msgstr ""

# dc5b967c20774938b78d612a8e00a615
#: ../source/core/shell-types.txt:358
msgid ""
"``instanceof`` returns a boolean to test if a value is an instance of "
"some type."
msgstr ""

# 4ead2c40b3e948d79ae36c3e073a44ee
#: ../source/core/shell-types.txt:361
msgid ""
"For example, the following operation tests whether the ``_id`` field is "
"an instance of type ``ObjectId``:"
msgstr ""

# 4492d2e585334a258bd9773c79edd149
#: ../source/core/shell-types.txt:368
msgid "The operation returns ``true``."
msgstr ""

# fc9c9474eec24e2791acacd1d37201c5
#: ../source/core/shell-types.txt:371
msgid "``typeof``"
msgstr ""

# a705c97bbe6b40dbb4d3a81e145668c9
#: ../source/core/shell-types.txt:373
msgid "``typeof`` returns the type of a field."
msgstr ""

# 620b02f8a7e648a8940b00cd35fa649e
#: ../source/core/shell-types.txt:375
msgid ""
"For example, the following operation returns the type of the ``_id`` "
"field:"
msgstr ""

# 743a3d6148b8462ebf2403d40f907412
#: ../source/core/shell-types.txt:382
msgid ""
"In this case ``typeof`` will return the more generic ``object`` type "
"rather than ``ObjectId`` type."
msgstr ""

#~ msgid ""
#~ "The :program:`mongo` shell provides various"
#~ " options to return the date, either"
#~ " as a string or as an object:"
#~ msgstr ""

#~ msgid ""
#~ "``Date()`` constructor which returns an "
#~ "``ISODate`` object when used with the"
#~ " ``new`` operator."
#~ msgstr ""

#~ msgid ""
#~ "``ISODate()`` constructor which returns an "
#~ "``ISODate`` object when used with *or*"
#~ " without the ``new`` operator."
#~ msgstr ""

#~ msgid "Consider the following examples:"
#~ msgstr ""

#~ msgid ""
#~ "To get the date as an ``ISODate``"
#~ " object, instantiate a new instance "
#~ "using the ``Date()`` constructor with "
#~ "the ``new`` operator, as in the "
#~ "following example:"
#~ msgstr ""

#~ msgid "The result is the value of ``myDateObject``:"
#~ msgstr ""

#~ msgid "The operation returns ``object``."
#~ msgstr ""

#~ msgid ""
#~ "To get the date as an ``ISODate``"
#~ " object, instantiate a new instance "
#~ "using the ``ISODate()`` constructor *without*"
#~ " the ``new`` operator, as in the "
#~ "following example:"
#~ msgstr ""

#~ msgid "The result is the value of ``myDateObject2``:"
#~ msgstr ""

#~ msgid ""
#~ "The :program:`mongo` shell provides the "
#~ "``ObjectId()`` wrapper class around "
#~ ":term:`ObjectId` data types. To generate "
#~ "a new ObjectId, use the following "
#~ "operation in the :program:`mongo` shell:"
#~ msgstr ""

#~ msgid ""
#~ "By default, the :program:`mongo` shell "
#~ "treats all numbers as floating-point "
#~ "values. The :program:`mongo` shell provides"
#~ " the ``NumberLong()`` class to handle "
#~ "64-bit integers."
#~ msgstr ""

#~ msgid "The ``NumberLong()`` constructor accepts the long as a string:"
#~ msgstr ""

#~ msgid ""
#~ "The following examples use the "
#~ "``NumberLong()`` class to write to the"
#~ " collection:"
#~ msgstr ""

#~ msgid ""
#~ "To determine the type of fields, "
#~ "the :program:`mongo` shell provides the "
#~ "following operators:"
#~ msgstr ""

#~ msgid ""
#~ "``instanceof`` returns a boolean to test"
#~ " if a value has a specific "
#~ "type."
#~ msgstr ""

#~ msgid "Example"
#~ msgstr ""

#~ msgid "Consider the following operations using ``instanceof`` and ``typeof``:"
#~ msgstr ""

#~ msgid ""
#~ "The following operation tests whether "
#~ "the ``_id`` field is of type "
#~ "``ObjectId``:"
#~ msgstr ""

#~ msgid "The following operation returns the type of the ``_id`` field:"
#~ msgstr ""

# 8a6c10a0cf3a4abd828f3debeaa0c596
#~ msgid ""
#~ "MongoDB :term:`BSON` provides support for "
#~ "additional data types than :term:`JSON`. "
#~ ":doc:`Drivers </applications/drivers>` provide "
#~ "native support for these data types "
#~ "in host languages and the "
#~ ":program:`mongo` shell also provides several"
#~ " helper classes to support the use"
#~ " of these data types in the "
#~ ":program:`mongo` JavaScript shell. See "
#~ ":doc:`/reference/mongodb-extended-json` for "
#~ "additional information."
#~ msgstr ""

# 8fe6e470ce9d4a81840953d513a8b94d
#~ msgid ""
#~ "By default, the :program:`mongo` shell "
#~ "treats all numbers as floating-point "
#~ "values. The :program:`mongo` shell provides"
#~ " the ``NumberInt()`` constructor to "
#~ "explicitly specify 32-bit integers."
#~ msgstr ""

#~ msgid ""
#~ "Internally, ``Date`` objects are stored "
#~ "as a 64 bit integer representing "
#~ "the number of milliseconds since the "
#~ "Unix epoch (Jan 1, 1970), which "
#~ "results in a representable date range"
#~ " of about 290 millions years into "
#~ "the past and future."
#~ msgstr ""

#~ msgid ""
#~ "The :program:`mongo` shell wrap objects "
#~ "of ``Date`` type with the ``ISODate``"
#~ " helper; however, the objects remain "
#~ "of type ``Date``."
#~ msgstr ""

#~ msgid ""
#~ "The :program:`mongo` shell provides the "
#~ "``ObjectId()`` wrapper class around the "
#~ ":term:`ObjectId` data type. To generate "
#~ "a new ObjectId, use the following "
#~ "operation in the :program:`mongo` shell:"
#~ msgstr ""

#~ msgid ""
#~ "By default, the :program:`mongo` shell "
#~ "treats all numbers as floating-point "
#~ "values. The :program:`mongo` shell provides"
#~ " the ``NumberLong()`` wrapper to handle "
#~ "64-bit integers."
#~ msgstr ""

