=========================
Install MongoDB on Ubuntu
=========================

.. default-domain:: mongodb

Synopsis
--------

This tutorial outlines the basic installation process for installing
:term:`MongoDB` on Ubuntu Linux systems. This tutorial uses
``.deb`` packages as the basis of the installation. 10gen publishes
packages of the MongoDB releases as ``.deb`` packages for easy
installation and management for users of Ubuntu systems. Ubuntu does
include MongoDB packages, the 10gen
packages are generally more up to date.

This tutorial includes: an overview of the available packages,
instructions for configuring the package manager, the process for installing
packages from the 10gen repository, and preliminary MongoDB
configuration and operation.

.. note:: 
   
   If you use an older Ubuntu that does **not** use Upstart, (i.e. any
   since version 9.10 "Karmic,") please follow the instructions on the
   :doc:`install-mongodb-on-debian` tutorial.

.. seealso:: The documentation of following related processes and
   concepts.

   Other installation tutorials:

   - :doc:`/tutorial/install-mongodb-on-redhat-centos-or-fedora-linux`
   - :doc:`/tutorial/install-mongodb-on-debian`
   - :doc:`/tutorial/install-mongodb-on-linux`
   - :doc:`/tutorial/install-mongodb-on-os-x`
   - :doc:`/tutorial/install-mongodb-on-windows`

   .. Documentation for getting started with MongoDB:

   .. STUB - :doc:`/getting-started`
   .. STUB - :doc:`/tutorial/insert-test-data-into-a-mongodb-database`

Package Options
---------------

The 10gen repository contains three packages:

- ``mongodb-10gen``

  This package contains the latest **stable** release. Use this for
  production deployments.

- ``mongodb20-10gen``

  This package contains the stable release of v2.0 branch.

- ``mongodb18-10gen``

  This package contains the stable release of v1.8 branch.

You cannot install these packages concurrently with each other or with
the ``mongodb`` package that your release of Ubuntu may include.

10gen also provides packages for "unstable" or development versions of
MongoDB. Use the ``mongodb-10gen-unstable`` package to test the latest
development release of MongoDB, but do not use this version in
production.

Installing MongoDB
------------------

Configure Package Management System (APT)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Ubuntu package management tool (i.e. ``dpkg`` and ``apt``)
ensure package consistency and authenticity by requiring that
distributors sign packages with GPG keys. Issue the following command
to import the `10gen public GPG Key <http://docs.mongodb.org/10gen-gpg-key.asc>`_:

.. code-block:: sh

   sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10

Create a the ``/etc/apt/sources.list.d/10gen.list`` file and include
the most appropriate version of the following lines for the 10gen
repository.

.. code-block:: sources.list

   deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen

Now issue the following command to reload your repository:

.. code-block:: sh

   sudo apt-get update

Install Packages
~~~~~~~~~~~~~~~~

Issue the following command to install the latest stable version of
MongoDB:

.. code-block:: sh

   sudo apt-get install mongodb-10gen

When this command completes, you have successfully installed MongoDB!
Continue for configuration and start-up suggestions.

Configure MongoDB
-----------------

These packages configure MongoDB using the ``/etc/mongodb.conf`` file
in conjunction with the :term:`control script`.  You will find the
control script is at ``/etc/init.d/mongodb.conf``.

This MongoDB instance will store its data files in the
``/var/lib/mongodb`` and its log files in ``/var/log/mongodb``, and
run using the ``mongodb`` user account.

.. note::

   If you change the user that runs the MongoDB process, you will need
   to modify the access control rights to the ``/var/lib/mongodb`` and
   ``/var/log/mongodb`` directories.

Controlling MongoDB
-------------------

Starting MongoDB
~~~~~~~~~~~~~~~~

You can start the :program:`mongod` process by issuing the following
command:

.. code-block:: sh

   sudo service mongodb start

You can verify that :program:`mongod` has started successfully by checking the
contents of the log file at ``/var/log/mongodb/mongodb.log``.

Stopping MongoDB
~~~~~~~~~~~~~~~~

As needed, you may stop the :program:`mongod` process by issuing the
following command:

.. code-block:: sh

   sudo service mongodb stop

Restarting MongoDB
~~~~~~~~~~~~~~~~~~

You may restart the :program:`mongod` process by issuing the
following command:

.. code-block:: sh

   sudo service mongodb restart

Controlling :program:`mongos`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As of the current release, there are no :term:`control scripts
<control script>` for :program:`mongos`. :program:`mongos` is only
used in sharding deployments and typically do not run on the same
systems where :program:`mongod` runs. You can use the ``mongodb``
script referenced above to derive your own :program:`mongos` control
script.

Using MongoDB
-------------

Among the tools included with the MongoDB package, is the
:program:`mongo` shell. You can connect to your MongoDB instance by
issuing the following command at the system prompt:

.. code-block:: sh

   mongo

This will connect to the database running on the localhost interface
by default. At the :program:`mongo` prompt, issue the following two
commands to insert a record in the "test" :term:`collection` of the
(default) "test" database.

.. code-block:: javascript

   > db.test.save( { a: 1 } )
   > db.test.find()

.. seealso:: ":program:`mongo`" and ":doc:`/reference/javascript`"
