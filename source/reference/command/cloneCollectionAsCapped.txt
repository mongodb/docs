=======================
cloneCollectionAsCapped
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: cloneCollectionAsCapped

   The :dbcommand:`cloneCollectionAsCapped` command creates a new
   :term:`capped collection` from an existing, non-capped collection
   within the same database. The operation does not affect the
   original non-capped collection.

   The command has the following syntax:

   .. code-block:: javascript

      { cloneCollectionAsCapped: <existing collection>, toCollection: <capped collection>, size: <capped size>, writeConcern: <document>} 

   The command takes the following fields:

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Field
        - Description

      * - cloneCollectionAsCapped
        - The name of the existing collection to copy.

      * - toCollection
        - The name of the new capped collection to create.

          The name of the new capped collection must be
          distinct and cannot be the same as that of the original existing
          collection.

      * - size
        - The maximum size,in bytes,  for the capped collection.

      * - writeConcern

        - Optional. A document expressing the :doc:`write concern
          </reference/write-concern>` of the :dbcommand:`drop` command.
          Omit to use the default write concern.
            
   The command copies an ``existing collection`` and creates a new
   ``capped collection`` with a maximum size specified by the ``capped
   size`` in bytes.  

   To replace the original non-capped collection with a
   capped collection, use the :dbcommand:`convertToCapped` command.

Behavior
--------

If the ``capped size`` is less than the size of the source collection,
then not all documents in the source collection will exist in the destination
capped collection.

.. include:: /includes/fact-database-lock.rst
