.. _avs-playground:

===================================================
Chatbot Demo Builder in |service| Search Playground
===================================================

.. default-domain:: mongodb

.. meta::
   :keywords: hands-on, sandbox, sample dataset
   :description: Try |service| Vector Search and Voyage AI out by building a chatbot on your data without an Atlas account.

.. facet::
   :name: genre
   :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Quickly try {+avs+} in the {+playground+} by using a :ref:`RAG <avs-rag>` 
chatbot that answers questions on your data with vector search.
The `Chatbot Demo Builder <https://search-playground.mongodb.com/tools/chatbot-demo-builder/snapshots/new>`__ 
in the {+playground+} allows you to bring your own data, try different chunking strategies, 
generate embeddings using Voyage AI embedding models, and ask questions about the data without an 
|service| account, {+cluster+}, or collection. You can also share a link to a snapshot of your 
{+playground+} with others. 

.. _stages-chatbot-demo-builder:

Stages Used
-----------

The Chatbot Demo Builder uses two aggregation pipeline stages, :pipeline:`$vectorSearch` and :pipeline:`$project`. 

Considerations 
--------------

This is a generative AI chatbot. All information should be 
verified prior to use. Do not upload sensitive data. 
MongoDB logs your workload data for monitoring the system health and to help troubleshoot any
issues in the Chatbot Demo Builder. 

.. _chatbot-demo-builder-limitations:

Chatbot Demo Builder Limitations
--------------------------------

- The Chatbot Demo Builder processes the imported PDF file or copy-pasted text
  as a single, unified knowledge source. You cannot define or combine separate
  data collections within the builder.

- The Chatbot Demo Builder uses a pre-configured vector search index that is not
  editable. The query is generated based on the specified retrieval settings and
  cannot be directly edited using the code editor.

- The Chatbot Demo Builder environment does not persist. To save an
  environment, use the :guilabel:`Share` button to generate a snapshot
  |url| that persists for 30 days. 

- The Chatbot Demo Builder only supports text-based embeddings. If your PDF file
  contains images, the chatbot will not be able to process or answer questions
  about the content within those images.

- The Chatbot Demo Builder has the following data limitations:

  - You cannot import files larger than 100 MB.  
  
  - The total character count cannot exceed 100,000 characters.

  - You cannot bring your own vector embeddings or API credentials for embedding solutions. 


Try the Chatbot Demo Builder
----------------------------

.. procedure::
   :style: normal

   .. step:: Access the Chatbot Demo Builder.

      Navigate to `https://search-playground.mongodb.com/tools/chatbot-demo-builder/
      <https://search-playground.mongodb.com/tools/chatbot-demo-builder/snapshots/new>`__.

   .. step:: Select your data source.

      The Chatbot Demo Builder provides three data source options. 

      .. list-table:: 
         :widths: 20 80 

         * - :guilabel:`Upload PDF`
           - Upload a PDF file from your local device with a maximum
             size of 100 MB.  If the character count exceeds 100,000, you must
             use only the first 100,000 characters or upload a file with less
             characters. You can preview the text with :guilabel:`SEE TEXT`.

         * - :guilabel:`Copy & Paste Text`
           - Copy and paste text up to 100,000 characters. If the
             character count exceeds 100,000, you must use only the first
             100,000 characters or reduce the text size. 
        
         * - :guilabel:`Sample Data`
           - Use sample data provided by MongoDB, which is a PDF about a fictional park.

      Chatbot Demo Builder is a public demo. Do not upload sensitive data. 

   
   .. step :: Configure data processing. 

      Customize your chunking settings and embedding model.

      .. list-table::
         :widths: 20 80

         * - :guilabel:`Chunking strategy`
           - Choose either :guilabel:`Recursive Chunking` (default option) or
             :guilabel:`Fixed Token Count with Overlap`.

         * - :guilabel:`Chunk size`
           - Define the number of tokens per chunk. The number of tokens must be
             at least double the amount of chunk overlap.

             - Minimum: 40 tokens
             - Maximum: 1500 tokens

         * - :guilabel:`Chunk overlap`
           - Specify the size of the overlap of tokens between adjacent chunks.
             The overlap size must be at most half of the chunk size.
            
             - Minimum: 0 tokens
             - Maximum: 750 tokens

         * - :guilabel:`Embedding model`
           - Select one of the following embedding models:

             - voyage-3-large (default option)
             - voyage-finance-2
             - voyage-law-2

      To modify these options after creating embeddings, use the side panel
      :guilabel:`DATA SETTINGS`. Changing the settings clears previous chat
      history.
   
   .. step :: Ask questions about your data and edit retrieval settings. 
      
      Each question and answer pair is independent, with no reliance on previous interactions. 
      When you select :guilabel:`Share`, the playground saves your data configurations and retrieval settings. 
      Question and answer history is neither saved nor can be shared.

      For every question that you ask, the Chatbot Demo Builder shows the following settings: 

      .. list-table:: Retrieval Outputs and Settings
         :widths: 20 20 60
         :header-rows: 1

         * - Setting or Output
           - Location on Page
           - Description
         * - :guilabel:`Search Query`
           - Linked in chat box with answer
           - View the {+avs+} query syntax.
         * - :guilabel:`[number] DOCUMENTS`
           - Linked in chat box with answer
           - View the documents retrieved from running the search query and how the results are scored.
         * - :guilabel:`Data to Evaluate (numCandidates)`
           - Right side panel
           - Adjust the number of potential matches the system reviews to select
             the best result. To exhaustively search all indexed vector
             embeddings, click the :guilabel:`Evaluate all [number] documents (ENN)` check box. This may impact query latency. 
         * - :guilabel:`Data to Retrieve (limit)`
           - Right side panel
           - Adjust the number of documents (chunks) returned.
         * - :guilabel:`Data Source`
           - Bottom panel tab
           - View your data as :guilabel:`MongoDB Documents` or :guilabel:`Full Extracted Text`. 
         * - :guilabel:`Index Definition`
           - Bottom panel tab
           - View the generated {+avs} index definition. 
         * - :guilabel:`Search Query`
           - Bottom panel tab
           - View the {+avs+} query syntax used for the most recent question and answer. 
         * - :guilabel:`LLM & Prompt`
           - Bottom panel tab
           - View the Large Language Model (LLM) used. 
  
   .. step :: Share your demo. 
      
      Use the :guilabel:`Share` button to generate a snapshot |url| that persists for 30 days. 

      Use the :guilabel:`Get Code` button to access a GitHub repository with starter code on how to build a similar chatbot yourself. 

.. note::

   The Chatbot Demo Builder performance might differ from production performance.

Learn more
----------

To learn more about vector search queries, see :ref:`return-vector-search-results`.
To learn more about Retrieval-Augmented Generation (RAG), see :ref:`avs-rag`.
