.. _atlasthirdpartyintegration-custom-resource:

==============================================
``AtlasThirdPartyIntegration`` Custom Resource
==============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The ``AtlasThirdPartyIntegration`` custom resource configures third
party integrations in an |service| project. These resources allow you
to manage :atlas:`third-party integrations
</tutorial/third-party-service-integration>` with various monitoring
services to collect and analyze the performance of your |service|
deployment.

.. include:: /includes/fact-ak8so-crds.rst

|ak8so| takes one of the following actions using the |service|
:oas-bump-atlas-tag:`Third-Party Service Integration API Resource
<third-party-integrations>`:

- Creates a new third-party service integration.
- Updates an existing third-party service integration.

Examples
--------

.. _atlasthirdpartyintegration-example-basic:

Basic Example
~~~~~~~~~~~~~

The following example shows an ``AtlasThirdPartyIntegration`` custom
resource that defines a Datadog integration within the ``my-project``
project.

.. code-block::

   apiVersion: atlas.mongodb.com/v1
   kind: AtlasThirdPartyIntegration
   metadata:
     name: my-atlas-integ
   spec:
     projectRef:
       name: my-project
       namespace: my-operator-namespace
     type: DATADOG
     datadog:
       apiKeySecretRef:
         name: datadog-secret
       region: US
       sendCollectionLatencyMetrics: enabled
       sendDatabaseMetrics: enabled

.. _atlasthirdpartyintegration-example-independent:

Independent CRD Example
~~~~~~~~~~~~~~~~~~~~~~~

The following example shows an ``AtlasThirdPartyIntegration``
:ref:`independent CRD <ak8so-independent-crd>` that defines the same
Datadog integration defined in the :ref:`Basic Example
<atlasthirdpartyintegration-example-basic>`. This custom resource
definition allows you to create this third-party integration in a
project you don't manage in the same instance of |ak8so| with which
you define this resource. To enable independent operation, you must
use an ``externalProjectRef`` instead of a ``projectRef``, and you
must supply a ``connectionSecret`` directly since this resource can't
inherit API credentials from its parent project.

.. code-block::

   apiVersion: atlas.mongodb.com/v1
   kind: AtlasThirdPartyIntegration
   metadata:
     name: my-atlas-integ
   spec:
     externalProjectRef:
       projectID: 66e2f2b621571b7e69a89b66
     connectionSecret:
       name: atlas-connection-secret
     type: DATADOG
     datadog:
       apiKeySecretRef:
         name: datadog-secret
       region: US
       sendCollectionLatencyMetrics: enabled
       sendDatabaseMetrics: enabled

Parameters
----------

This section describes the ``AtlasThirdPartyIntegration`` custom
resource parameters available.

.. setting:: metadata.name

   *Type*: string

   *Required*

   Name that the :ref:`atlasthirdpartyintegration-custom-resource` uses to
   add this third-party integration to a project.

.. setting:: metadata.namespace

   *Type*: string

   *Optional*

   Namespace that you want to contain the ``AtlasThirdPartyIntegration``
   custom resource. If unspecified, |ak8so| uses the current namespace
   set by ``kubectl``.

.. setting:: spec.connectionSecret

   *Type*: string

   *Conditional*

   Name of the opaque |k8s-secret| that contains the organization ID
   and :ref:`API keys <about-org-api-keys>` that |ak8so| uses to
   :ref:`connect <ak8so-access-to-atlas-ref>` to |service|.  If
   unspecified, |ak8so| falls back to either:

   - The ``spec.connectionSecretRef.name`` parameter of the parent
     ``atlasProject``
   - The default ``global`` secret, if ``spec.connectionSecretRef.name``
     is undefined for the parent ``atlasProject``

   This parameter is mandatory for :ref:`independent CRDs
   <ak8so-independent-crd>`.
   
   .. include:: /includes/fact-ak8so-label-secret.rst

.. setting:: spec.externalProjectRef

   *Type*: string

   *Conditional*

   ID of the project to which the third-party integration belongs. You
   must specify the project ID of an existing :ref:`Atlas Project
   <manage-projects>`. This parameter is required for third-party
   integrations that belong to projects managed by either:

   - A different instance of |ak8so|
   - Tooling other than |ak8so|

   For deployments who belong to projects managed by the same instance
   of |ak8so|, use ``spec.projectRef.name`` if you do not use
   ``spec.externalProjectRef.id``.

   A third-party integration can only belong to one project. To define
   the same third-party integration for multiple projects, create
   custom resource definitions for each project.

.. setting:: spec.projectRef.name

   *Type*: string

   *Conditional*

   Name of the project to which the third-party integration
   belongs. You must specify an existing
   :ref:`atlasproject-custom-resource`. This parameter applies only to
   third-party integrations that belong to projects managed by the
   same instance |ak8so|.

   For third-party integrations that belong to projects managed by
   either:

   - a different instance of |ak8so|
   - tooling other than |ak8so|

   use ``spec.externalProjectRef.id``.

   A third-party integration can only belong to one project. To define
   the same third-party integration for multiple projects, create
   custom resource definitions for each project.

.. setting:: spec.type

   *Type*: string

   *Required*

   Name of the third-party service to integrate with |service|. This
   value must be one of the following:

   - ``DATADOG``
   - ``MICROSOFT_TEAMS``
   - ``NEW_RELIC``
   - ``OPS_GENIE``
   - ``PAGER_DUTY``
   - ``PROMETHEUS``
   - ``SLACK``
   - ``VICTOR_OPS``
   - ``WEBHOOK``

   Each integration ``type`` requires a distinct set of configuration
   fields. For example, if you set ``type`` to ``DATADOG``, you must
   configure only the ``spec.datadog`` document and its subfields.

   To define multiple third-party integrations within the same
   project, you must create a separated CRD for each. You can define
   only one instance of each integration type within a given
   project. This applies both to this CRD and to the
   ``spec.integrations`` parameter of your ``AtlasProject`` CRD.

.. setting:: spec.datadog

   *Type*: document

   *Conditional*

   Document declaring configuration parameters for a Datadog
   third-party service integration.

   You must declare this parameter if you set a ``spec.type`` value of
   ``DATADOG``.

.. setting:: spec.datadog.apiKeySecretRef.name

   *Type*: string

   *Conditional*

   Secret containing your Datadog API key.

   You must declare this parameter if you set a ``spec.type`` value of
   ``DATADOG``.

.. setting:: spec.datadog.region

   *Type*: string

   *Conditional*

   Geographic region in which your Datadog service is hosted.

   You must declare this parameter if you set a ``spec.type`` value of
   ``DATADOG``.

.. setting:: spec.datadog.sendCollectionLatencyMetrics

   *Type*: string

   *Conditional*

   Toggle that controls whether or not to send collection latency
   metrics to Datadog. Must be either ``enabled`` or ``disabled``.

   You must declare this parameter if you set a ``spec.type`` value of
   ``DATADOG``.

.. setting:: spec.datadog.sendDatabaseMetrics

   *Type*: string

   *Conditional*

   Toggle that controls whether or not to send database metrics to
   Datadog. Must be either ``enabled`` or ``disabled``.

   You must declare this parameter if you set a ``spec.type`` value of
   ``DATADOG``.

.. setting:: spec.microsoftTeams.urlSecretRef.name

   *Type*: string

   *Conditional*

   Secret containing your Microsoft Teams secret URL. Must contain a
   ``webhookURL`` value.

   You must declare this parameter if you set a ``spec.type`` value of
   ``MICROSOFT_TEAMS``.

.. setting:: spec.newRelic.credentialsSecretRef.name

   *Type*: string

   *Conditional*

   Secret containing your New Relic credentials. This must include the
   following:

   - New Relic account ID
   - New Relic license key
   - New Relic read and write tokens

   You must declare this parameter if you set a ``spec.type`` value of
   ``NEW_RELIC``.

.. setting:: spec.opsGenie

   *Type*: document

   *Conditional*

   Document declaring configuration parameters for an Ops Genie
   third-party service integration.

   You must declare this parameter if you set a ``spec.type`` value of
   ``OPS_GENIE``.

.. setting:: spec.opsGenie.apiKeySecretRef.name

   *Type*: string

   *Conditional*

   Secret containing your Ops Genie API key.

   You must declare this parameter if you set a ``spec.type`` value of
   ``OPS_GENIE``.

.. setting:: spec.opsGenie.region

   *Type*: string

   *Conditional*

   Geographic region in which your Ops Genie service is hosted.

   You must declare this parameter if you set a ``spec.type`` value of
   ``OPS_GENIE``.

.. setting:: spec.pagerDuty

   *Type*: document

   *Conditional*

   Document declaring configuration parameters for a Pager Duty
   third-party service integration.

   You must declare this parameter if you set a ``spec.type`` value of
   ``PAGER_DUTY``.

.. setting:: spec.pagerDuty.serviceKeySecretRef.name

   *Type*: string

   *Conditional*

   Secret containing your Pager Duty service key.

.. setting:: spec.pagerDuty.region

   *Type*: string

   *Conditional*

   Geographic region in which your Ops Genie service is hosted.

   You must declare this parameter if you set a ``spec.type`` value of
   ``OPS_GENIE``.

.. setting:: spec.prometheus

   *Type*: document

   *Conditional*

   Document declaring configuration parameters for a Prometheus
   third-party service integration.

   You must declare this parameter if you set a ``spec.type`` value of
   ``PROMETHEUS``.

.. setting:: spec.prometheus.enabled

   *Type*: string

   *Conditional*

   Toggle that enables Prometheus data collection. Must be either
   ``enabled`` or ``disabled``.

   You must declare this parameter if you set a ``spec.type`` value of
   ``PROMETHEUS``.

.. setting:: spec.prometheus.serviceDiscovery

   *Type*: string

   *Conditional*

   Toggle that determines how Prometheus discovers services. Must be
   set to either ``http`` or ``file``.

   You must declare this parameter if you set a ``spec.type`` value of
   ``PROMETHEUS``.

.. setting:: spec.prometheus.prometheusCredentialsSecretRef.name

   *Type*: string

   *Conditional*

   Secret containing your Prometheus username and password.

   You must declare this parameter if you set a ``spec.type`` value of
   ``PROMETHEUS``.

.. setting:: spec.slack

   *Type*: document

   *Conditional*

   Document declaring configuration parameters for a Slack third-party
   service integration.

   You must declare this parameter if you set a ``spec.type`` value of
   ``SLACK``.

.. setting:: spec.slack.apiTokenSecretRef.name

   *Type*: string

   *Conditional*

   Secret containing your Slack API token.

   You must declare this parameter if you set a ``spec.type`` value of
   ``SLACK``.

.. setting:: spec.slack.channelName

   *Type*: string

   *Conditional*

   Name of the Slack channel to integrate with |service|.

   You must declare this parameter if you set a ``spec.type`` value of
   ``SLACK``.

.. setting:: spec.slack.teamName

   *Type*: string

   *Conditional*

   Name of the Slack team to which the ``spec.slack.channelName``
   belongs.

   You must declare this parameter if you set a ``spec.type`` value of
   ``SLACK``.

.. setting:: spec.victorOps

   *Type*: document

   *Conditional*

   Document declaring configuration parameters for a Victor Ops
   third-party service integration.

   You must declare this parameter if you set a ``spec.type`` value of
   ``VICTOR_OPS``.

.. setting:: spec.victorOps.apiKeySecretRef.name

   *Type*: string

   *Conditional*

   Secret containing Victor Ops' API key.

   You must declare this parameter if you set a ``spec.type`` value of
   ``VICTOR_OPS``.

.. setting:: spec.victorOps.routingKey

   *Type*: string

   *Conditional*

   Victor Ops routing key.

   You must declare this parameter if you set a ``spec.type`` value of
   ``VICTOR_OPS``.

.. setting:: spec.webhook.urlSecretRef.name

   *Type*: string

   *Conditional*

   Secret containing your webhook URL and secret.
