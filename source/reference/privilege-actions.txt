.. _security-user-actions:

=================
Privilege Actions
=================

.. default-domain:: mongodb

Privilege actions, or simply "actions," are used to define the privileges
found in roles.

MongoDB uses role-based authorization to give users access to data and
commands. Roles provide privileges to users, where privileges specify
the actions permitted on a :ref:`resource <resource-document>`. This
page lists the actions available for defining
:data:`~admin.system.roles.privileges`.

Actions For User and Role Management Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.5.3

MongoDB provides :ref:`user and role management commands
<user-management-commands>`, which require proper authorization to use
in order to prevent privilege escalation attacks. 

.. TODO rewrite following sentence which is currently a placeholder to
   make some distinction between these actions and the list at the end.

The following actions relate to privileges needed to perform :ref:`user
and role management commands <user-management-commands>`:

.. authaction:: createUser

   The user can create new users in the given database.

.. authaction:: createRole

   The user can create new roles in the given database.

.. authaction:: dropUser

   The user can remove any user from the given database.

.. authaction:: dropRole

   The user can delete any role from the given database.

.. authaction:: grantRole

   The user can grant any role in the database to any user from any
   database in the system.

.. authaction:: revokeRole

   The user can remove any role from any user from any database in the
   system.

.. authaction:: changeOwnPassword

   Users with this action can change their own passwords.
   Grant :authaction:`changeOwnPassword` on the ``cluster`` resource.

.. authaction:: changeAnyPassword

   The user can change the password of any user in the given database.

.. authaction:: changeOwnCustomData

   Users with this action can change their own custom information, as
   stored in the ``customData`` field of documents in the :data:`admin.system.users`
   collection. Grant :authaction:`changeOwnCustomData` on the ``cluster``
   resource.

.. authaction:: changeAnyCustomData

   The user can change the custom information of any user in the given
   database. MongoDB stores custom information in the ``customData`` field of
   the documents in :data:`admin.system.users` collection.

.. authaction:: viewUser

   The user can view the information of any user in the given database.

.. authaction:: viewRole

   The user can view information about any role in the given database.

Actions For Database Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. TODO FOR 2.6 - Update the actions the final 2.6 code, which is expected to have
   fewer actions than those listed here. For each action, indicate the types of
   resources it acts on. -BG

.. TODO rewrite the following placeholder. Also, not only should these
   actions

The following actions relate to privileges needed to perform various
database operations:

.. hlist::
   :columns: 3

   * _migrateClone
   * _recvChunkAbort
   * _recvChunkCommit
   * _recvChunkStart
   * _recvChunkStatus
   * _transferMods
   * addShard
   * captrunc
   * clean
   * clone
   * cloneCollectionLocalSource
   * cloneCollectionTarget
   * closeAllDatabases
   * collMod
   * collStats
   * compact
   * connPoolStats
   * connPoolSync
   * convertToCapped
   * cpuProfiler
   * createCollection
   * cursorInfo
   * dbHash
   * dbStats
   * delete
   * diagLogging
   * dropCollection
   * dropDatabase
   * enableSharding
   * find
   * flushRouterConfig
   * fsync
   * getCmdLineOpts
   * getLog
   * getParameter
   * getShardMap
   * getShardVersion
   * handshake
   * hostInfo
   * indexStats
   * inprog
   * insert
   * killCursors
   * killop
   * listDatabases
   * listShards
   * logRotate
   * moveChunk
   * movePrimary
   * netstat
   * profileEnable
   * reIndex
   * removeShard
   * repairDatabase
   * replSetElect
   * replSetFreeze
   * replSetFresh
   * replSetGetRBID
   * replSetGetStatus
   * replSetHeartbeat
   * replSetInitiate
   * replSetMaintenance
   * replSetReconfig
   * replSetStepDown
   * replSetSyncFrom
   * resync
   * serverStatus
   * setParameter
   * setShardVersion
   * shardCollection
   * shardingState
   * shutdown
   * split
   * splitChunk
   * splitVector
   * storageDetails
   * top
   * touch
   * unlock
   * unsetSharding
   * update
   * userAdmin
   * validate
   * writeBacksQueued
   * writebacklisten
