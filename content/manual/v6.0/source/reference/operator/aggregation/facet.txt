.. meta::
   :robots: noindex, nosnippet 

============================
$facet (expression operator)
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. pipeline:: $facet

   Processes multiple :ref:`aggregation pipelines
   <aggregation-pipeline>` within a single stage on the same set of
   input documents. Each sub-pipeline has its own field in the output
   document where its results are stored as an array of documents.

   The ``$facet`` stage allows you to create multi-faceted aggregations
   which characterize data across multiple dimensions, or facets,
   within a single aggregation stage. Multi-faceted aggregations
   provide multiple filters and categorizations to guide data browsing
   and analysis. Retailers commonly use faceting to narrow search results
   by creating filters on product price, manufacturer, size, etc.

   Input documents are passed to the ``$facet`` stage only once.
   ``$facet`` enables various aggregations on the same set of input
   documents, without needing to retrieve the input documents multiple
   times.

Compatibility
-------------

.. |operator-method| replace:: ``$facet``

.. include:: /includes/fact-compatibility.rst

Syntax
------

The ``$facet`` stage has the following form:

.. code-block:: javascript

   { $facet:
       {
         <outputField1>: [ <stage1>, <stage2>, ... ],
         <outputField2>: [ <stage1>, <stage2>, ... ],
         ...

       }
   }

Specify the output field name for each specified pipeline.

Considerations
--------------

As each stage in a ``$facet`` executes, the resulting document is
limited to 100 megabytes. Note the :ref:`allowDiskUse
<aggregate-cmd-allowDiskUse>` flag doesn't affect the 100 megabyte size
limit, since ``$facet`` can't spill to disk.

The final output document is subject to the 16 mebibyte :limit:`BSON
document size limit <BSON Document Size>`. If it exceeds 16 mebibytes,
the aggregation produces an error.

.. seealso::

   :ref:`agg-pipeline-limits`

Behavior
--------

Facet-related aggregation stages categorize and group incoming
documents. Specify any of the following facet-related stages within
different ``$facet`` sub-pipeline's ``<stage>`` to perform a
multi-faceted aggregation:

- :pipeline:`$bucket`
- :pipeline:`$bucketAuto`
- :pipeline:`$sortByCount`

Other
:ref:`aggregation stages <aggregation-pipeline-operator-reference>` can
also be used with ``$facet`` with the following exceptions:

- :pipeline:`$collStats`
- ``$facet``
- :pipeline:`$geoNear`
- :pipeline:`$indexStats`
- :pipeline:`$out`
- :pipeline:`$merge`
- :pipeline:`$planCacheStats`
- :pipeline:`$search`
- :pipeline:`$searchMeta`
- :pipeline:`$vectorSearch`

Each sub-pipeline within ``$facet`` is passed the exact same set of
input documents. These sub-pipelines are completely independent of one
another and the document array output by each is stored in separate
fields in the output document. The output of one sub-pipeline can not
be used as the input for a different sub-pipeline within the same
``$facet`` stage. If further aggregations are required, add additional
stages after ``$facet`` and specify the field name, ``<outputField>``,
of the desired sub-pipeline output.

Index Use
~~~~~~~~~

Pipeline order determines how the ``$facet`` stage uses indexes.

- If the ``$facet`` stage is the first stage in a pipeline, the stage
  will perform a ``COLLSCAN``. The ``$facet`` stage does not make use of
  indexes if it is the first stage in the pipeline.

- If the ``$facet`` stage comes later in the pipeline and earlier stages
  have used indexes, ``$facet`` will not trigger a ``COLLSCAN`` during
  execution.

For example, :pipeline:`$match` or :pipeline:`$sort` stages that come
before a ``$facet`` stage can make use of indexes and the ``$facet``
will not trigger a ``COLLSCAN``.

For optimization suggestions, see: :ref:`agg-pipeline-optimization`.

Examples
--------

.. tabs-drivers::
   
   .. tab::
      :tabid: shell

      Consider an online store whose inventory is stored in the following
      ``artwork`` collection:

      .. code-block:: javascript

         { "_id" : 1, "title" : "The Pillars of Society", "artist" : "Grosz", "year" : 1926,
           "price" : Decimal128("199.99"),
           "tags" : [ "painting", "satire", "Expressionism", "caricature" ] }
         { "_id" : 2, "title" : "Melancholy III", "artist" : "Munch", "year" : 1902,
           "price" : Decimal128("280.00"),
           "tags" : [ "woodcut", "Expressionism" ] }
         { "_id" : 3, "title" : "Dancer", "artist" : "Miro", "year" : 1925,
           "price" : Decimal128("76.04"),
           "tags" : [ "oil", "Surrealism", "painting" ] }
         { "_id" : 4, "title" : "The Great Wave off Kanagawa", "artist" : "Hokusai",
           "price" : Decimal128("167.30"),
           "tags" : [ "woodblock", "ukiyo-e" ] }
         { "_id" : 5, "title" : "The Persistence of Memory", "artist" : "Dali", "year" : 1931,
           "price" : Decimal128("483.00"),
           "tags" : [ "Surrealism", "painting", "oil" ] }
         { "_id" : 6, "title" : "Composition VII", "artist" : "Kandinsky", "year" : 1913,
          "price" : Decimal128("385.00"),
           "tags" : [ "oil", "painting", "abstract" ] }
         { "_id" : 7, "title" : "The Scream", "artist" : "Munch", "year" : 1893,
           "tags" : [ "Expressionism", "painting", "oil" ] }
         { "_id" : 8, "title" : "Blue Flower", "artist" : "O'Keefe", "year" : 1918,
           "price" : Decimal128("118.42"),
           "tags" : [ "abstract", "painting" ] }

      The following operation uses MongoDB's faceting features to provide
      customers with the store's inventory categorized across multiple
      dimensions such as tags, price, and year created. This
      ``$facet`` stage has three sub-pipelines that use
      :pipeline:`$sortByCount`, :pipeline:`$bucket`, or
      :pipeline:`$bucketAuto` to perform this multi-faceted aggregation.
      The input documents from ``artwork`` are fetched from the database only
      once, at the beginning of the operation:

      .. code-block:: javascript

         db.artwork.aggregate( [
          {
            $facet: {
              "categorizedByTags": [
                { $unwind: "$tags" },
                { $sortByCount: "$tags" }
              ],
              "categorizedByPrice": [
                // Filter out documents without a price e.g., _id: 7
                { $match: { price: { $exists: 1 } } },
                {
                  $bucket: {
                    groupBy: "$price",
                    boundaries: [  0, 150, 200, 300, 400 ],
                    default: "Other",
                    output: {
                      "count": { $sum: 1 },
                      "titles": { $push: "$title" }
                    }
                  }
                }
              ],
              "categorizedByYears(Auto)": [
                {
                  $bucketAuto: {
                    groupBy: "$year",
                    buckets: 4
                  }
                }
              ]
            }
          }
         ])

      The operation returns the following document:

      .. code-block:: javascript

         {
          "categorizedByYears(Auto)" : [
            // First bucket includes the document without a year, e.g., _id: 4
            { "_id" : { "min" : null, "max" : 1902 }, "count" : 2 },
            { "_id" : { "min" : 1902, "max" : 1918 }, "count" : 2 },
            { "_id" : { "min" : 1918, "max" : 1926 }, "count" : 2 },
            { "_id" : { "min" : 1926, "max" : 1931 }, "count" : 2 }
          ],
          "categorizedByPrice" : [
            {
              "_id" : 0,
              "count" : 2,
              "titles" : [
                "Dancer",
                "Blue Flower"
              ]
            },
            {
              "_id" : 150,
              "count" : 2,
              "titles" : [
                "The Pillars of Society",
                "The Great Wave off Kanagawa"
              ]
            },
            {
              "_id" : 200,
              "count" : 1,
              "titles" : [
                "Melancholy III"
              ]
            },
            {
              "_id" : 300,
              "count" : 1,
              "titles" : [
                "Composition VII"
              ]
            },
            {
              // Includes document price outside of bucket boundaries, e.g., _id: 5
              "_id" : "Other",
              "count" : 1,
              "titles" : [
                "The Persistence of Memory"
              ]
            }
          ],
          "categorizedByTags" : [
            { "_id" : "painting", "count" : 6 },
            { "_id" : "oil", "count" : 4 },
            { "_id" : "Expressionism", "count" : 3 },
            { "_id" : "Surrealism", "count" : 2 },
            { "_id" : "abstract", "count" : 2 },
            { "_id" : "woodblock", "count" : 1 },
            { "_id" : "woodcut", "count" : 1 },
            { "_id" : "ukiyo-e", "count" : 1 },
            { "_id" : "satire", "count" : 1 },
            { "_id" : "caricature", "count" : 1 }
          ]
         }

   .. tab::
      :tabid: csharp

      .. include:: /includes/driver-examples/csharp/aggregation/sample-data-movie.rst
      
      .. include:: /includes/driver-examples/csharp/aggregation/method-intro.rst

         .. replacement:: stage-name

            ``$facet`` 
        
         .. replacement:: method-name-and-link 

            `Facet() <{+csharp-api-docs+}/MongoDB.Driver/MongoDB.Driver.PipelineStageDefinitionBuilder.Facet.html>`__

         .. replacement:: stage-specific-info

         .. replacement:: method-description

            executes two parallel aggregations. The first aggregation distributes incoming
            documents into five groups by the value of their ``Runtime`` field. The second
            aggregation counts each value in the ``Rated`` field and returns the
            count for each value, limited to the top five values.

         .. replacement:: more-method-description

      .. literalinclude:: /includes/driver-examples/csharp/aggregation/BuildersExamples.cs
         :start-after: // start facet
         :end-before: // end facet
         :language: csharp
         :dedent: 8

   .. tab::
      :tabid: nodejs

      .. include:: /includes/driver-examples/node/aggregation/sample-mflix.rst

      .. include:: /includes/driver-examples/node/aggregation/stage-intro.rst

         .. replacement:: stage-name

            ``$facet``

         .. replacement:: stage-specific-info

         .. replacement:: method-description

            executes two parallel aggregations. The first aggregation distributes
            incoming documents into five groups by the value of their ``runtime``
            field by using the :pipeline:`$bucketAuto` stage. The second
            aggregation counts each value in the ``rated`` field and returns the
            count of the top five values by using the :pipeline:`$sortByCount`
            and :pipeline:`$limit` stages

         .. replacement:: more-method-description
  
      .. literalinclude:: /includes/driver-examples/node/aggregation/examples.js
         :start-after: //start facet
         :end-before: //end facet
         :language: javascript
         :dedent: 2

Learn More
----------

To learn more about related pipeline stages, see the :pipeline:`$bucketAuto`,
:pipeline:`$sortByCount`, and :pipeline:`$limit` guides. 

