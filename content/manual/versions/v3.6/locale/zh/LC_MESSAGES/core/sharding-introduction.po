#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/sharding-introduction.txt:5
msgid "Sharding Introduction"
msgstr ""

#: ../source/core/sharding-introduction.txt:17
msgid ""
"Sharding is a method for storing data across multiple machines. MongoDB uses"
" sharding to support deployments with very large data sets and high "
"throughput operations."
msgstr ""

#: ../source/core/sharding-introduction.txt:22
msgid "Purpose of Sharding"
msgstr ""

#: ../source/core/sharding-introduction.txt:24
msgid ""
"Database systems with large data sets and high throughput applications can "
"challenge the capacity of a single server. High query rates can exhaust the "
"CPU capacity of the server. Larger data sets exceed the storage capacity of "
"a single machine. Finally, working set sizes larger than the system's RAM "
"stress the I/O capacity of disk drives."
msgstr ""

#: ../source/core/sharding-introduction.txt:30
msgid ""
"To address these issues of scales, database systems have two basic "
"approaches: **vertical scaling** and **sharding**."
msgstr ""

#: ../source/core/sharding-introduction.txt:33
msgid ""
"**Vertical scaling** adds more CPU and storage resources to increase "
"capacity. Scaling by adding capacity has limitations: high performance "
"systems with large numbers of CPUs and large amount of RAM are "
"disproportionately *more expensive* than smaller systems. Additionally, "
"cloud-based providers may only allow users to provision smaller instances.  "
"As a result there is a *practical maximum* capability for vertical scaling."
msgstr ""

#: ../source/core/sharding-introduction.txt:41
msgid ""
"**Sharding**, or *horizontal scaling*, by contrast, divides the data set and"
" distributes the data over multiple servers, or **shards**. Each shard is an"
" independent database, and collectively, the shards make up a single logical"
" database."
msgstr ""

#: ../source/core/sharding-introduction.txt:48
msgid ""
"Sharding addresses the challenge of scaling to support high throughput and "
"large data sets:"
msgstr ""

#: ../source/core/sharding-introduction.txt:51
msgid ""
"Sharding reduces the number of operations each shard handles. Each shard "
"processes fewer operations as the cluster grows. As a result, a cluster can "
"increase capacity and throughput *horizontally*."
msgstr ""

#: ../source/core/sharding-introduction.txt:55
msgid ""
"For example, to insert data, the application only needs to access the shard "
"responsible for that record."
msgstr ""

#: ../source/core/sharding-introduction.txt:58
msgid ""
"Sharding reduces the amount of data that each server needs to store. Each "
"shard stores less data as the cluster grows."
msgstr ""

#: ../source/core/sharding-introduction.txt:66
msgid "Sharding in MongoDB"
msgstr ""

#: ../source/core/sharding-introduction.txt:68
msgid ""
"MongoDB supports sharding through the configuration of a :term:`sharded "
"clusters <sharded cluster>`."
msgstr ""

#: ../source/core/sharding-introduction.txt:73
msgid ""
"Sharded cluster has the following components: :term:`shards <shard>`, "
":term:`query routers <mongos>` and :term:`config servers <config server>`."
msgstr ""

#: ../source/core/sharding-introduction.txt:76
msgid ""
"**Shards** store the data. To provide high availability and data "
"consistency, in a production sharded cluster, each shard is a :term:`replica"
" set` [#dev-only-shard-deployment]_. For more information on replica sets, "
"see :doc:`Replica Sets </core/replication>`."
msgstr ""

#: ../source/core/sharding-introduction.txt:105
msgid "Data Partitioning"
msgstr ""

#: ../source/core/sharding-introduction.txt:107
msgid ""
"MongoDB distributes data, or shards, at the collection level. Sharding "
"partitions a collection's data by the **shard key**."
msgstr ""

#: ../source/core/sharding-introduction.txt:111
msgid "Shard Keys"
msgstr ""

#: ../source/core/sharding-introduction.txt:113
msgid ""
"To shard a collection, you need to select a **shard key**. A :term:`shard "
"key` is either an indexed field or an indexed compound field that exists in "
"every document in the collection. MongoDB divides the shard key values into "
"**chunks** and distributes the :term:`chunks <chunk>` evenly across the "
"shards. To divide the shard key values into chunks, MongoDB uses either "
"**range based partitioning** or **hash based partitioning**. See the "
":doc:`Shard Key </core/sharding-shard-key>` documentation for more "
"information."
msgstr ""

#: ../source/core/sharding-introduction.txt:123
msgid "Range Based Sharding"
msgstr ""

#: ../source/core/sharding-introduction.txt:125
msgid ""
"For *range-based sharding*, MongoDB divides the data set into ranges "
"determined by the shard key values to provide **range based partitioning**. "
"Consider a numeric shard key: If you visualize a number line that goes from "
"negative infinity to positive infinity, each value of the shard key falls at"
" some point on that line. MongoDB partitions this line into smaller, non-"
"overlapping ranges called **chunks** where a chunk is range of values from "
"some minimum value to some maximum value."
msgstr ""

#: ../source/core/sharding-introduction.txt:134
msgid ""
"Given a range based partitioning system, documents with \"close\" shard key "
"values are likely to be in the same chunk, and therefore on the same shard."
msgstr ""

#: ../source/core/sharding-introduction.txt:141
msgid "Hash Based Sharding"
msgstr ""

#: ../source/core/sharding-introduction.txt:143
msgid ""
"For *hash based partitioning*, MongoDB computes a hash of a field's value, "
"and then uses these hashes to create chunks."
msgstr ""

#: ../source/core/sharding-introduction.txt:146
msgid ""
"With hash based partitioning, two documents with \"close\" shard key values "
"are *unlikely* to be part of the same chunk. This ensures a more random "
"distribution of a collection in the cluster."
msgstr ""

#: ../source/core/sharding-introduction.txt:153
msgid "Performance Distinctions between Range and Hash Based Partitioning"
msgstr ""

#: ../source/core/sharding-introduction.txt:155
msgid ""
"Range based partitioning supports more efficient range queries. Given a "
"range query on the shard key, the query router can easily determine which "
"chunks overlap that range and route the query to only those shards that "
"contain these chunks."
msgstr ""

#: ../source/core/sharding-introduction.txt:160
msgid ""
"However, range based partitioning can result in an uneven distribution of "
"data, which may negate some of the benefits of sharding. For example, if the"
" shard key is a linearly increasing field, such as time, then all requests "
"for a given time range will map to the same chunk, and thus the same shard. "
"In this situation, a small set of shards may receive the majority of "
"requests and the system would not scale very well."
msgstr ""

#: ../source/core/sharding-introduction.txt:168
msgid ""
"Hash based partitioning, by contrast, ensures an even distribution of data "
"at the expense of efficient range queries. Hashed key values results in "
"random distribution of data across chunks and therefore shards. But random "
"distribution makes it more likely that a range query on the shard key will "
"not be able to target a few shards but would more likely query every shard "
"in order to return a result."
msgstr ""

#: ../source/core/sharding-introduction.txt:176
msgid "Customized Data Distribution with Tag Aware Sharding"
msgstr ""

#: ../source/core/sharding-introduction.txt:178
msgid ""
"MongoDB allows administrators to direct the balancing policy using **tag "
"aware sharding**. Administrators create and associate tags with ranges of "
"the shard key, and then assign those tags to the shards. Then, the balancer "
"migrates tagged data to the appropriate shards and ensures that the cluster "
"always enforces the distribution of data that the tags describe."
msgstr ""

#: ../source/core/sharding-introduction.txt:185
msgid ""
"Tags are the primary mechanism to control the behavior of the balancer and "
"the distribution of chunks in a cluster.  Most commonly, tag aware sharding "
"serves to improve the locality of data for sharded clusters that span "
"multiple data centers."
msgstr ""

#: ../source/core/sharding-introduction.txt:190
msgid "See :doc:`/core/tag-aware-sharding` for more information."
msgstr ""

#: ../source/core/sharding-introduction.txt:193
msgid "Maintaining a Balanced Data Distribution"
msgstr ""

#: ../source/core/sharding-introduction.txt:195
msgid ""
"The addition of new data or the addition of new servers can result in data "
"distribution imbalances within the cluster, such as a particular shard "
"contains significantly more chunks than another shard or a size of a chunk "
"is significantly greater than other chunk sizes."
msgstr ""

#: ../source/core/sharding-introduction.txt:200
msgid ""
"MongoDB ensures a balanced cluster using two background process: splitting "
"and the balancer."
msgstr ""

#: ../source/core/sharding-introduction.txt:204
msgid "Splitting"
msgstr ""

#: ../source/core/sharding-introduction.txt:206
msgid ""
"Splitting is a background process that keeps chunks from growing too large. "
"When a chunk grows beyond a :ref:`specified chunk size <sharding-chunk-"
"size>`, MongoDB splits the chunk in half. Inserts and updates triggers "
"splits. Splits are an efficient meta-data change. To create splits, MongoDB "
"does *not* migrate any data or affect the shards."
msgstr ""

#: ../source/core/sharding-introduction.txt:216
msgid "Balancing"
msgstr ""

#: ../source/core/sharding-introduction.txt:222
msgid ""
"When the distribution of a sharded collection in a cluster is uneven, the "
"balancer process migrates chunks from the shard that has the largest number "
"of chunks to the shard with the least number of chunks until the collection "
"balances. For example: if collection ``users`` has 100 chunks on *shard 1* "
"and 50 chunks on *shard 2*, the balancer will migrate chunks from *shard 1* "
"to *shard 2* until the collection achieves balance."
msgstr ""

#: ../source/core/sharding-introduction.txt:230
msgid ""
"The shards manage *chunk migrations* as a background operation between an "
"*origin shard* and a *destination shard*.  During a chunk migration, the "
"*destination shard* is sent all the current documents in the chunk from the "
"*origin shard*. Next, the destination shard captures and applies all changes"
" made to the data during the migration process. Finally, the metadata "
"regarding the location of the chunk on *config server* is updated."
msgstr ""

#: ../source/core/sharding-introduction.txt:238
msgid ""
"If there's an error during the migration, the balancer aborts the process "
"leaving the chunk unchanged on the origin shard. MongoDB removes the chunk's"
" data from the origin shard **after** the migration completes successfully."
msgstr ""

#: ../source/core/sharding-introduction.txt:246
msgid "Adding and Removing Shards from the Cluster"
msgstr ""

#: ../source/core/sharding-introduction.txt:248
msgid ""
"Adding a shard to a cluster creates an imbalance  since the new shard has no"
" chunks. While MongoDB begins migrating data to the new shard immediately, "
"it can take some time before the cluster balances."
msgstr ""

#: ../source/core/sharding-introduction.txt:252
msgid ""
"When removing a shard, the balancer migrates all chunks from a shard to "
"other shards. After migrating all data and updating the meta data, you can "
"safely remove the shard."
msgstr ""

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:4
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:6
msgid ""
"`Sharding Methods for MongoDB (Presentation) "
"<http://www.mongodb.com/presentations/webinar-sharding-methods-"
"mongodb?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:7
msgid ""
"`Everything You Need to Know About Sharding (Presentation) "
"<http://www.mongodb.com/presentations/webinar-everything-you-need-know-"
"about-sharding?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:8
msgid ""
"`MongoDB for Time Series Data: Sharding "
"<http://www.mongodb.com/presentations/mongodb-time-series-data-"
"part-3-sharding?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:9
msgid ""
"`MongoDB Operations Best Practices White Paper <http://www.mongodb.com/lp"
"/white-paper/ops-best-practices?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:10
msgid ""
"`Talk to a MongoDB Expert About Scaling <http://www.mongodb.com/lp/contact"
"/planning-for-scale?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:11
msgid ""
"`MongoDB Consulting Package "
"<https://www.mongodb.com/products/consulting?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:12
msgid ""
"`Quick Reference Cards <https://www.mongodb.com/lp/misc/quick-reference-"
"cards?jmp=docs>`_"
msgstr ""

#: ../source/core/sharding-introduction.txt:0
msgid "On this page"
msgstr ""

#: ../source/core/sharding-introduction.txt:61
msgid ""
"For example, if a database has a 1 terabyte data set, and there are 4 "
"shards, then each shard might hold only 256 GB of data. If there are 40 "
"shards, then each shard might hold only 25 GB of data."
msgstr ""

#: ../source/core/sharding-introduction.txt:82
msgid ""
"**Query Routers**, or :program:`mongos` instances, interface with client "
"applications and direct operations to the appropriate shard or shards. A "
"client sends requests to a :program:`mongos`, which then routes the "
"operations to the shards and returns the results to the clients. A sharded "
"cluster can contain more than one :program:`mongos` to divide the client "
"request load, and most sharded clusters have more than one :program:`mongos`"
" for this reason."
msgstr ""

#: ../source/core/sharding-introduction.txt:90
msgid ""
"**Config servers** store the cluster's metadata. This data contains a "
"mapping of the cluster's data set to the shards. The query router uses this "
"metadata to target operations to specific shards."
msgstr ""

#: ../source/includes/fact-mirrored-config-servers-deprecated.rst:1
msgid ""
"Starting in MongoDB 3.2, config servers for sharded clusters can be deployed"
" as a :doc:`replica set </core/replication-introduction>`. The replica set "
"config servers must run the :doc:`WiredTiger storage engine "
"</core/wiredtiger>`. MongoDB 3.2 deprecates the use of three mirrored "
":program:`mongod` instances for config servers."
msgstr ""

#: ../source/core/sharding-introduction.txt:98
msgid ""
"For development and testing purposes only, each **shard** can be a single "
":program:`mongod` instead of a replica set."
msgstr ""

#: ../source/core/sharding-introduction.txt:218
msgid ""
"The :ref:`balancer <sharding-balancing-internals>` is a background process "
"that manages chunk migrations. The balancer can run from any of the "
":program:`mongos` instances in a cluster."
msgstr ""

#~ msgid ""
#~ "For example, if a database has a 1 terabyte data set, and there are 4 "
#~ "shards, then each shard might hold only 256GB of data. If there are 40 "
#~ "shards, then each shard might hold only 25GB of data."
#~ msgstr ""

#~ msgid ""
#~ "**Query Routers**, or :program:`mongos` instances, interface with client "
#~ "applications and direct operations to the appropriate shard or shards. The "
#~ "query router processes and targets operations to shards and then returns "
#~ "results to the clients. A sharded cluster can contain more than one query "
#~ "router to divide the client request load. A client sends requests to one "
#~ "query router. Most sharded clusters have many query routers."
#~ msgstr ""

#~ msgid ""
#~ "**Config servers** store the cluster's metadata. This data contains a "
#~ "mapping of the cluster's data set to the shards. The query router uses this "
#~ "metadata to target operations to specific shards. Production sharded "
#~ "clusters have *exactly* 3 config servers."
#~ msgstr ""

#~ msgid ""
#~ "For development and testing purposes only, each **shard** can be a single "
#~ ":program:`mongod` instead of a replica set. Do **not** deploy production "
#~ "clusters without 3 config servers."
#~ msgstr ""

#~ msgid ""
#~ "The :ref:`balancer <sharding-balancing-internals>` is a background process "
#~ "that manages chunk migrations. The balancer can run from any of the query "
#~ "routers in a cluster."
#~ msgstr ""
