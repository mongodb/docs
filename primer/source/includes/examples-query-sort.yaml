collection: "restaurants"
options:
  show_title: False
  show_collection: False
edition:
  - shell
  - python
  - node
  - cpp
ref: collection-example
---
source:
  file: examples-query-sort-base.yaml
  ref: _sort
ref: sort
edition: shell
operation:
  pre: |
    For example, the following operation returns all documents in the
    ``restaurants`` collection, sorted first by the ``borough`` field in
    ascending order, and then, within each borough, by the ``"address.zipcode"``
    field in ascending order
  language: javascript
  code: |
    db.restaurants.find().sort( { "borough": 1, "address.zipcode": 1 } )
replacement:
  sortMethod: ":method:`~cursor.sort()`"
  ascKey: "``1``"
  descKey: "``-1``"
---
source:
  file: examples-query-sort-base.yaml
  ref: _sort
ref: sort
edition: python
operation:
  - pre: |
      To sort by multiple keys, pass a list of keys and sort type pairs.
      For example, the following operation returns all documents in the
      ``restaurants`` collection, sorted first by the ``borough`` field in
      ascending order, and then, within each borough, by the ``"address.zipcode"``
      field in ascending order:
    language: python
    code: |
      import pymongo
      cursor = db.restaurants.find().sort([
          ("borough", pymongo.ASCENDING),
          ("address.zipcode", pymongo.DESCENDING)
      ])
  - pre: |
      Iterate the cursor and print the matching documents.
    language: python
    code: |
      for document in cursor:
          print(document)
replacement:
  sortMethod: ":py:meth:`~pymongo.cursor.Cursor.sort()`"
  ascKey: "``pymongo.ASCENDING``"
  descKey: "``pymongo.DESCENDING``"
---
source:
  file: examples-query-sort-base.yaml
  ref: _sort
ref: sort
edition: node
operation:
  - pre: |
      Define a ``findRestaurants`` function to retrieve all documents
      in the ``restaurants`` collection, sorted first by the
      ``borough`` field in ascending order, and then, within each
      borough, by the ``"address.zipcode"`` field in ascending order.
    language: javascript
    code: |
      var findRestaurants = function(db, callback) {
         var cursor =db.collection('restaurants').find().sort( { "borough": 1, "address.zipcode": 1 } );
         cursor.each(function(err, doc) {
            assert.equal(err, null);
            if (doc != null) {
               console.dir(doc);
            } else {
               callback();
            }
         });
      };
  - pre: |
      Call the ``findRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);

        findRestaurants(db, function() {
            db.close();
        });
      });
replacement:
  sortMethod: "`sort() <http://mongodb.github.io/node-mongodb-native/2.0/api/Cursor.html#sort>`_"
  ascKey: "``1``"
  descKey: "``-1``"
---
source:
  file: examples-query-sort-base.yaml
  ref: _sort
ref: sort
edition: cpp
pre: |
  To specify an order for the result set, pass to the find_ method
  a sort option to specify the sort order. The sort options
  take a document that contains the field(s) to sort by and the
  corresponding sort type, e.g. {{ascKey}} for ascending and
  {{descKey}} for descending.
operation:
  pre: |
    For example, the following operation returns all documents in the
    ``restaurants`` collection, sorted first by the ``borough`` field in
    ascending order, and then, within each borough, by the ``"address.zipcode"``
    field in ascending order
  literalinclude: includes/example-cpp-query-sort.cpp
  language: cpp
replacement:
  ascKey: "``1``"
  descKey: "``-1``"
...
