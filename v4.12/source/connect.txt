.. _pymongo-connect:

==================
Connect to MongoDB
==================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :description: Learn how to use {+driver-short+} to connect to MongoDB.
   :keywords: client, ssl

.. toctree::
   :titlesonly:
   :maxdepth: 1

   Create a MongoClient </connect/mongoclient>
   Choose a Connection Target </connect/connection-targets>
   Specify Connection Options </connect/connection-options>

Overview
--------

This page contains code examples that show how to connect your Python application
to MongoDB with various settings.

.. tip::

  To learn more about the connection options on this page, see the link
  provided in each section.

To use a connection example from this page, copy the code example into the
:ref:`sample application <pymongo-connect-sample>` or your own application.
Be sure to replace all placeholders in the code examples, such as ``<hostname>``, with
the relevant values for your MongoDB deployment.

.. _pymongo-connect-sample:

.. include:: /includes/usage-examples/sample-app-intro.rst

Select the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding
code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. literalinclude:: /includes/usage-examples/connect-sample-app.py
         :language: python
         :copyable: true
         :linenos:
         :emphasize-lines: 4-6

   .. tab:: Asynchronous
      :tabid: async

      .. literalinclude:: /includes/usage-examples/connect-sample-app-async.py
         :language: python
         :copyable: true
         :linenos:
         :emphasize-lines: 6-8

Connection
----------

The following sections describe how to connect to different targets, such as a local
instance of MongoDB or a cloud-hosted instance on Atlas.

Local Deployment
~~~~~~~~~~~~~~~~

The following code shows how to connect  the connection string to connect to a local
MongoDB deployment. Select the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to 
see the corresponding code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python

         uri = "mongodb://localhost:27017/"
         client = MongoClient(uri)

   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python

         uri = "mongodb://localhost:27017/"
         client = AsyncMongoClient(uri)

Atlas
~~~~~

The following code shows the connection string to connect to a deployment hosted on
Atlas. Select the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the
corresponding code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python

         uri = "<Atlas connection string>"
         client = MongoClient(uri, server_api=pymongo.server_api.ServerApi(
            version="1", strict=True, deprecation_errors=True))

   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python

         uri = "<Atlas connection string>"
         client = AsyncMongoClient(uri, server_api=pymongo.server_api.ServerApi(
            version="1", strict=True, deprecation_errors=True))

Replica Set
~~~~~~~~~~~

The following code shows the connection string to connect to a replica set. Select the
:guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding
code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python

         uri = "mongodb://<replica set member>:<port>/?replicaSet=<replica set name>"
         client = MongoClient(uri)
   
   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python

         uri = "mongodb://<replica set member>:<port>/?replicaSet=<replica set name>"
         client = AsyncMongoClient(uri)

Network Compression
-------------------

The following sections describe how to connect to MongoDB while specifying network
compression algorithms.

Compression Algorithms
~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/connect/compression-tabs.rst

To learn more about specifying compression algorithms, see
:ref:`pymongo-enable-compression` in the Network Compression guide.

zlib Compression Level
~~~~~~~~~~~~~~~~~~~~~~

The following tabs demonstrate how to specify a compression level for the ``zlib`` compressor:

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<db_username>:<db_password>@<hostname>:<port>",
            compressors = "zlib",
            zlibCompressionLevel=<zlib compression level>)

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<db_username>:<db_password>@<hostname>:<port>/?"
                "compressors=zlib"
                "zlibCompressionLevel=<zlib compression level>")
         client = pymongo.MongoClient(uri)

   .. tab:: MongoClient (Asynchronous)
      :tabid: mongoclient-async

      .. code-block:: python

         client = pymongo.AsyncMongoClient("mongodb://<db_username>:<db_password>@<hostname>:<port>",
            compressors = "zlib",
            zlibCompressionLevel=<zlib compression level>)

   .. tab:: Connection String (Asynchronous)
      :tabid: connectionstring-async

      .. code-block:: python

         uri = ("mongodb://<db_username>:<db_password>@<hostname>:<port>/?"
            "compressors=zlib"
            "zlibCompressionLevel=<zlib compression level>")
         client = pymongo.AsyncMongoClient(uri)

To learn more about setting the zlib compression level, see
:ref:`pymongo-enable-compression` in the Network Compression guide.

Server Selection
----------------

The following code shows a connection string that specifies a server selection function.
Select the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding
code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<db_username>:<db_password>@<hostname>:<port>",
            server_selector=<selector function>)

   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python

         client = pymongo.AsyncMongoClient("mongodb://<db_username>:<db_password>@<hostname>:<port>",
            server_selector=<selector function>)

To learn more about customizing server selection, see
:ref:`pymongo-server-selection`.

{+stable-api+}
--------------

The following code shows how to specify {+stable-api+} settings for a connection.Select the
:guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding
code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python

         from pymongo.server_api import ServerApi

         client = pymongo.MongoClient("mongodb://<db_username>:<db_password>@<hostname:<port>",
            server_api=ServerApi("<{+stable-api+} version>"))

   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python

         from pymongo.server_api import ServerApi

         client = pymongo.AsyncMongoClient("mongodb://<db_username>:<db_password>@<hostname:<port>",
            server_api=ServerApi("<{+stable-api+} version>"))

To learn more about the {+stable-api+}, see :ref:`pymongo-stable-api`.

Limit Server Execution Time
---------------------------

timeout Block
~~~~~~~~~~~~~

The following code shows how to set a client-side timeout by using the ``timeout()`` method:

.. code-block:: python

   with pymongo.timeout(<timeout length>):
      # perform operations here

To learn more about client-side timeouts, see :ref:`pymongo-csot`.

timeoutMS Connection Option
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following tabs demonstrate how to set a client-side timeout by using the ``timeoutMS``
connection option:

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<db_username>:<db_password>@<hostname@:<port>",
            timeoutMS=<timeout length>)

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = "mongodb://<db_username>:<db_password>@<hostname:<port>/?timeoutMS=<timeout length>"
         client = pymongo.MongoClient(uri)

   .. tab:: MongoClient (Asynchronous)
      :tabid: mongoclient-async

      .. code-block:: python

         client = pymongo.AsyncMongoClient("mongodb://<db_username>:<db_password>@<hostname@:<port>",
            timeoutMS=<timeout length>)

   .. tab:: Connection String (Asynchronous)
      :tabid: connectionstring-async

      .. code-block:: python

         uri = "mongodb://<db_username>:<db_password>@<hostname:<port>/?timeoutMS=<timeout length>"
         client = pymongo.AsyncMongoClient(uri)

To learn more about client-side timeouts, see :ref:`pymongo-csot`.
