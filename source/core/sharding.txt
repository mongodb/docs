.. index:: fundamentals; sharding
.. _sharding-fundamentals:

=================
Sharding Overview
=================

.. default-domain:: mongodb

Sharding is MongoDBâ€™s approach to scaling out. Sharding partitions a
collection and stores the different portions on different machines. When
a database's collections become too large for existing storage, you need only add a
new machine. Sharding automatically distributes collection data to
the new server.

Sharding automatically balances data and load across machines. Sharding
provides additional write capacity by distributing the write load over a
number of :program:`mongod` instances. Sharding allows users to increase
the potential amount of data in the :term:`working set`.

.. index:: shard key
   single: sharding; shard key

How Sharding Works
------------------

To run sharding, you set up a sharded cluster. For a description of
sharded clusters, see :doc:`/administration/sharded-clusters`.

Within a sharded cluster, you enable sharding on a per-database basis.
Once a database is enabled for sharding, you choose which collections to
shard. For each sharded collection, you specify a :term:`shard key`.

The shard key determines the distribution of the collection's
:term:`documents <document>` among the cluster's :term:`shards <shard>`.
The shard key is a :term:`field` that exists in every document in the
collection. MongoDB distributes documents according to ranges of values
in the shard key. A given shard holds documents for which the shard key
falls within a specific range of values. Shard keys, like :term:`indexes
<index>`, can be either a single field or multiple fields.

Within a shard, MongoDB further partitions documents into :term:`chunks
<chunk>`. Each chunk represents a smaller range of values within the
shard's range. When a chunk grows beyond the :ref:`chunk size
<sharding-chunk-size>`, MongoDB :term:`splits <split>` the chunk into
smaller chunks, always based on ranges in the shard key.

.. _sharding-shard-key-selection:
.. _sharding-shard-key:
.. _shard-key:

Shard Key Selection
-------------------

Choosing the correct shard key can have a great impact on the
performance, capability, and functioning of your database and cluster.
Appropriate shard key choice depends on the schema of your data and the
way that your application queries and writes data to the database.

The ideal shard key:

- is easily divisible which makes it easy for MongoDB to distribute
  content among the shards. Shard keys that have a limited number of
  possible values are not ideal as they can result in some chunks that
  are "unsplitable." See the :ref:`sharding-shard-key-cardinality`
  section for more information.

- will distribute write operations among the cluster, to prevent any
  single shard from becoming a bottleneck. Shard keys that have a high
  correlation with insert time are poor choices for this reason;
  however, shard keys that have higher "randomness" satisfy this
  requirement better. See the :ref:`sharding-shard-key-write-scaling`
  section for additional background.

- will make it possible for the :program:`mongos` to return most query
  operations directly from a single *specific* :program:`mongod`
  instance. Your shard key should be the primary field used by your
  queries, and fields with a high degree of "randomness" are poor
  choices for this reason. See the :ref:`sharding-shard-key-query-isolation`
  section for specific examples.

The challenge when selecting a shard key is that there is not always
an obvious choice. Often, an existing field in your collection may not be
the optimal key. In those situations, computing a special purpose
shard key into an additional field or using a compound shard key may
help produce one that is more ideal.

.. index:: balancing
.. _sharding-balancing:

Shard Balancing
---------------

Balancing is the process MongoDB uses to redistribute data within a
:term:`sharded cluster`. When a :term:`shard` has a too many:
term:`chunks <chunk>` when compared to other shards, MongoDB
automatically balances the shards. MongoDB balances the shards without
intervention from the application layer.

The balancing process attempts to minimize the impact that balancing can
have on the cluster, by:

- Moving only one chunk at a time.

- Only initiating a balancing round when the difference in number of
  chunks between the shard with the greatest and the shard with the
  least number of chunks exceeds the :ref:`migration threshold
  <sharding-migration-thresholds>`.

You may disable the balancer on a temporary basis for
maintenance and limit the window during which it runs to prevent the
balancing process from impacting production traffic.

.. seealso:: :ref:`sharding-balancing-operations` and
   :ref:`sharding-balancing-internals`.

.. note::

   The balancing procedure for :term:`sharded clusters <sharded cluster>`
   is entirely transparent to the user and application layer. This
   documentation is only included for your edification and possible
   troubleshooting purposes.
