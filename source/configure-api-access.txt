.. meta::
   :keywords: atlas ui, atlas cli

.. _atlas-admin-api-access:

====================================================
Get Started with the {+atlas-admin-api+}
====================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. important::

   Each {+atlas-admin-api+} has its own resources and requires initial
   setup.

   You can access the {+atlas-admin-api+} servers through the public 
   internet only. The {+atlas-admin-api+} is not available over 
   connections that use :ref:`network peering <vpc-peering>` or 
   :ref:`private endpoints <private-endpoint>`.

   To learn more, see :doc:`/api`.

The {+atlas-admin-api+} follows the principles of the |rest| 
architectural style to expose a number of internal resources which 
enable programmatic access to |service|'s features. To learn more, see 
:ref:`atlas-admin-api-ref`.

.. _programmatic-access:

Grant Programmatic Access to |service|
--------------------------------------

To grant programmatic access to an organization or project using only
the :doc:`API </api>`, create an |api| key.

- |api| keys have two parts: a Public Key and a Private Key. These 
  two parts serve the same function as a username and a personal |api| 
  key when you make |api| requests to |service|.

- You can't use an |api| key to log into |service| through the user 
  interface.

- You must grant roles to |api| keys as you would for users to ensure 
  the |api| keys can call |api| endpoints without errors.

- All |api| keys belong to the organization. You can give an |api| key
  access to a project. To add the new |api| key to a project, 
  :ref:`invite-org-app-api-keys`.

- Each |api| key belongs to only one organization, but you can grant 
  an |api| key access to any number of projects in that 
  organization.

.. _atlas-prog-api-key:

Required for All Resources: Generate an Organization API Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To access the {+atlas-admin-api+}, :ref:`create-org-api-key`.

All |api| keys belong to the organization. You can give an |api| key
access to a project. To add the new |api| key to a project, 
:ref:`invite-org-app-api-keys`.

To learn more about managing |api| keys for your organization or 
project, see :ref:`programmatic-access`. For usage details, 
see :ref:`prog-access-usage`.

.. _enable-api-access-list:
.. _atlas-require-api-access-list:

Optional: Require an IP Access List for the {+atlas-admin-api+}
-------------------------------------------------------------------------

|service| allows your {+atlas-admin-api+} keys to make requests from
any address on the internet unless you require an IP access list for
the {+atlas-admin-api+}. If you require an IP access list, your |api|
keys can make |api| requests only from the location-based IP or |cidr|
addresses that you specify in the IP access list. 

Each |api| key has its own IP access list. If you require an IP
access list for all {+atlas-admin-api+} requests, you must define at
least one IP access list entry for an |api| key before you can use the 
|api| key. 

When you create a new organization using the {+atlas-ui+}, |service|
enables the |api| access list requirement by default. To disable the IP
access list requirement when you :ref:`create an organization
<create-organization>`, toggle 
:guilabel:`Require IP Access List for the {+atlas-admin-api+}` to
:guilabel:`OFF`.

To set your organization to require IP access lists for every 
{+atlas-admin-api+} key after organization creation, follow these steps:

.. include:: /includes/steps-require-ip-access-list.rst

.. _atlas-require-all-api-access-list:

Require an API Access List for All Requests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can require *all* |api| requests from an |api| key to come from an
entry on its |api| access list. If you require |api| access lists, API
keys can't make any |api| requests until you define at least one |api|
access list entry.

Procedure
`````````

To set your organization to require API access lists for every API key:

.. include:: /includes/steps-require-ip-access-list.rst

.. _see-org-api-keys:
.. _about-org-api-keys:

Grant Programmatic Access to an Organization
--------------------------------------------

Use the following procedures to grant programmatic access to an 
organization. To learn more, see :ref:`atlas-admin-api-access-org`.

Required Access
~~~~~~~~~~~~~~~

To perform the following actions, you must have
:authrole:`Organization Owner` access to |service|.

.. _create-org-api-key:

Create an |api| Key in an Organization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: {+atlas-cli+}
      :tabid: atlascli

      Create an |api| Key
      ```````````````````

      .. include:: /includes/extracts/atlas-organizations-apiKeys-create.rst

      Add an |api| Access List Entry for the |api| Key
      ````````````````````````````````````````````````

      .. include:: /includes/extracts/atlas-organizations-apiKeys-accessLists-create.rst

   .. tab:: {+atlas-ui+}
      :tabid: ui

      .. include:: /includes/steps-app-api-key-create-in-org.rst

.. _about-project-api-keys:

Grant Programmatic Access to a Project
--------------------------------------

Use the following procedures to grant programmatic access to a 
project. To learn more, see :ref:`atlas-admin-api-access-project`.

Required Access
~~~~~~~~~~~~~~~

To perform any of the following actions, you must have
:authrole:`Project Owner` access to the project.

.. _invite-org-app-api-keys:

Invite an Organization |api| Key to a Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: {+atlas-cli+}
      :tabid: atlascli

      .. include:: /includes/extracts/atlas-projects-apiKeys-assign.rst

   .. tab:: {+atlas-ui+}
      :tabid: ui

      To invite an organization |api| key to a project using the 
      {+atlas-ui+}:

      .. include:: /includes/steps-app-api-key-invite-to-project.rst


.. _create-project-api-key:

Create an |api| Key for a Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. tabs::

   .. tab:: {+atlas-cli+}
      :tabid: atlascli

      .. include:: /includes/extracts/atlas-projects-apiKeys-create.rst

      After you create the |api| key for your project, use the 
      {+atlas-ui+} to add an |api| access list entry. You can't use the
      |api| key for the project until you set up the |api| access list.

      .. note:: {+atlas-cli+} Limitation

         You can't edit the |api| access list for a project |api| key
         using the {+atlas-cli+}.

      To add an |api| access list entry using the {+atlas-ui+}:

      .. include:: /includes/steps/add-project-api-key-to-access-list.rst 

   .. tab:: {+atlas-ui+}
      :tabid: ui

      To create an |api| key for a project using the {+atlas-ui+}:

      .. include:: /includes/steps-app-api-key-create-in-project.rst

.. _prog-access-usage:

Make an |api| Request
---------------------

.. include:: /includes/api-requirements.rst

All {+atlas-admin-api+} endpoints have the following base URL:

.. include:: /includes/api-base-url.rst

.. _example-api-request:

Example |api| Request
---------------------

Your request should resemble the following examples, where 
``{PUBLIC-KEY}`` is your |api| public key and ``{PRIVATE-KEY}``
is the corresponding private key. To explore the available endpoints
through the {+atlas-admin-api+}, you can use MongoDB's 
`Postman workspace <https://www.postman.com/mongodb-devrel/workspace/mongodb-atlas-administration-apis/overview>`__.

The following sample ``GET`` request 
:oas-atlas-op:`returns all projects </listProjects>` in your organization:

.. code-block:: sh

   curl --user "{PUBLIC-KEY}:{PRIVATE-KEY}" --digest \
         --header "Content-Type: application/json" \
         --header "Accept: application/vnd.atlas.2023-02-01+json" \
         --include \
         --request GET "https://cloud.mongodb.com/api/atlas/v2/groups"

The following sample ``POST`` request takes a request body and
:oas-atlas-op:`creates a project </createProject>` named 
``MyProject`` in your organization:

.. code-block:: sh

   curl --user "{PUBLIC-KEY}:{PRIVATE-KEY}" --digest \
         --header "Content-Type: application/json" \
         --header "Accept: application/vnd.atlas.2023-02-01+json" \
         --include \
         --request POST "https://cloud.mongodb.com/api/atlas/v2/groups" \
         --data '
            {
               "name": "MyProject",
               "orgId": "5a0a1e7e0f2912c554080adc"
            }'

.. seealso::
   
   - `{+atlas-admin-api+} Specification <https://mongodb.com/docs/atlas/reference/api-resources-spec>`_
   - :ref:`atlas-api-error-codes`
   
Alternatively, you can use any tool that supports `OpenAPI v3
specification <https://spec.openapis.org/oas/v3.0.1>`__ to generate code
samples or mock servers. For example, you can import 
the :atlas:`Atlas Admin API Specification </reference/api-resources-spec>`
into `Postman <https://www.postman.com/>`__ to generate ``curl``
commands. To use Postman to generate ``curl`` commands: 

.. procedure:: 
   :style: normal 

   .. step:: In the MongoDB |service| Administration API :atlas:`documentation </reference/api-resources-spec/>`, right-click the **Download** button and copy the link.
   
   .. step:: Open Postman and click **File**, then **Import**.

      The **Import** window displays.

   .. step:: In the **Import** window, click **Link** and paste the download link that you copied in step 1.

   .. step:: Click **Continue**, then **Import**.

   .. step:: For the request for which you want to generate a ``curl`` command, click **</>** on the right and select **cURL** from the **Code snippet** dropdown.

Next Steps
----------

To learn more about the {+atlas-admin-api+}, see 
:ref:`atlas-admin-api-ref`.

To manage programmatic access to the {+atlas-admin-api+}, see any of 
the following procedures:

- :ref:`atlas-admin-api-access-org`.

- :ref:`prog-access-mult-orgs`.

- :ref:`atlas-admin-api-access-project`.

.. toctree::
   
   Organization Access </configure-api-access-org>
   Multiple Organizations </configure-api-access-mult-org>
   Project Access </configure-api-access-project>
   