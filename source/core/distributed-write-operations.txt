============================
Distributed Write Operations
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _write-operations-sharded-clusters:

Write Operations on Sharded Clusters
------------------------------------

For sharded collections in a :term:`sharded cluster`, the
:program:`mongos` directs write operations from applications to the
shards that are responsible for the specific *portion* of the data
set. The :program:`mongos` uses the cluster metadata from the
:ref:`config database <sharding-config-server>` to route the write
operation to the appropriate shards.

.. include:: /images/sharded-cluster.rst

MongoDB partitions data in a sharded collection into *ranges* based on
the values of the :term:`shard key`. Then, MongoDB distributes these
chunks to shards. The shard key determines the distribution of chunks to
shards. This can affect the performance of write operations in the
cluster.

.. include:: /images/sharding-range-based.rst

.. important:: Update operations that affect a *single* document
   **must** include the :term:`shard key` or the ``_id``
   field. Updates that affect multiple documents are more efficient in
   some situations if they have the :term:`shard key`, but can be
   broadcast to all shards.

If the value of the shard key increases or decreases with every
insert, all insert operations target a single shard. As a result, the
capacity of a single shard becomes the limit for the insert capacity
of the sharded cluster.

For more information, see :doc:`/sharding` and
:doc:`/core/bulk-write-operations`.

.. _write-operations-replica-sets:

Write Operations on Replica Sets
--------------------------------

In :term:`replica sets <replica set>`, all write operations go to the
set's :term:`primary`. The primary applies the write operation and
records the operations on the primary's operation log or :term:`oplog`.
The oplog is a reproducible sequence of operations to the data set.
:term:`Secondary` members of the set continuously replicate the oplog
and apply the operations to themselves in an asynchronous process.

.. include:: /images/replica-set-read-write-operations-primary.rst

For more information on replica sets and write operations, see
:doc:`/replication` and
:doc:`/reference/write-concern`.
