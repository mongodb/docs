=====================
grantPrivilegesToRole
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: grantPrivilegesToRole

   Assigns additional :ref:`privileges <privileges>` to a :ref:`user-defined
   <user-defined-roles>` role defined on the database on which the
   command is run. 
   
   .. |method| replace:: :method:`db.grantPrivilegesToRole` helper method
   .. include:: /includes/fact-dbcommand-tip

   The :dbcommand:`grantPrivilegesToRole` command uses the following syntax:

.. code-block:: javascript

   db.runCommand(
      {
        grantPrivilegesToRole: "<role>",
        privileges: [
          {
            resource: { <resource> }, actions: [ "<action>", ... ]
          },
          ...
        ],
        writeConcern: { <write concern> },
        comment: <any>
      }
   )

Compatibility
-------------

This command is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-no-free.rst

.. include:: /includes/fact-environments-onprem-only.rst
   
Command Fields
--------------

The command has the following fields:

.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Field
     - Type
     - Description

   * - ``grantPrivilegesToRole``
     - string
     - The name of the user-defined role to grant privileges to.

   * - ``privileges``
     - array
     - The privileges to add to the role. For the format of a privilege, see
       :data:`~admin.system.roles.privileges`.

   * - ``writeConcern``
     - document
     - .. include:: /includes/fact-write-concern-spec-link.rst

   * - ``comment``
     - any
     - .. include:: /includes/extracts/comment-content.rst

Behavior
--------

A role's privileges apply to the database where the role is created. A
role created on the ``admin`` database can include privileges that apply
to all databases or to the :ref:`cluster <resource-cluster>`.

Required Access
---------------

.. include:: /includes/access-grant-privileges.rst

Example
-------

The following :dbcommand:`grantPrivilegesToRole` command grants two
additional privileges to the ``service`` role that exists in the
``products`` database:

.. code-block:: javascript

   use products
   db.runCommand(
      {
        grantPrivilegesToRole: "service",
        privileges: [
            {
              resource: { db: "products", collection: "" }, actions: [ "find" ]
            },
            {
              resource: { db: "products", collection: "system.js" }, actions: [ "find" ]
            }
        ],
        writeConcern: { w: "majority" , wtimeout: 5000 }
      }
   )

The first privilege in the ``privileges`` array allows the user to
search on all non-system collections in the ``products`` database. The
privilege does not allow queries on :doc:`system collections
</reference/system-collections>`, such as the :data:`system.js
<<database>.system.js>` collection. To grant access to these
system collections, explicitly provision access in the ``privileges``
array. See :doc:`/reference/resource-document`.

The second privilege explicitly allows the :authaction:`find` action on
:data:`system.js <<database>.system.js>` collections on all
databases.
