.. meta::
   :robots: noindex, nosnippet


.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol



Annotation Type Required
^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_annotations_Required:



io.realm.annotations
====================

**Implemented interfaces:**



- `java.lang.annotation.Annotation <https://docs.oracle.com/javase/7/docs/api/java/lang/annotation/Annotation.html>`__ 


This annotation will mark the field or the element in ``io.realm.RealmList``  as not nullable.

When a field of type ``Boolean, Byte, Short, Integer, Long, Float, Double, String, byte[], Date``  is annotated with :ref:`Required <io_realm_annotations_Required>` , it cannot be set to ``null``  and Realm will throw an exception if it happens.



Fields with primitive types are implicitly required. Note, ``String``  is not a primitive type, so in Java it is default nullable unless it is marked ``@Required`` . In Kotlin the reverse is true, so a ``String``  is non-null. To specify a nullable String in Kotlin you should use ``String?`` .



If this annotation is used on a ``RealmList`` , the annotation is applied to the elements inside the list and not the list itself. The list itself is always non-null. This means that a list marked with this annotation are never allowed to hold ``null``  values even if the datatype would otherwise allow it. Realm will throw an exception if you attempt to store null values into a list marked ``@Required`` .



This annotation cannot be used on a ``RealmAny`` , as the inner value of a RealmAny field is always nullable. Realm will throw an exception if you attempt mark a ``RealmAny``  as ``@Required`` .



Compiling will fail if the :ref:`Required <io_realm_annotations_Required>`  annotation is put an a ``RealmList``  containing references to other Realm objects.





