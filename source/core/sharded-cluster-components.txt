.. index:: sharding; shards
.. index:: shards
.. _sharding-shards:
.. _sharding-production-architecture:


==========================
Sharded Cluster Components
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

A MongoDB :term:`sharded cluster` consists of the following components:

* :doc:`shard </core/sharded-cluster-shards>`: Each shard contains a
  subset of the sharded data. Each shard can be deployed as a :term:`replica
  set`.

* :doc:`/core/sharded-cluster-query-router`: The ``mongos`` acts as a
  query router, providing an interface between client applications and the
  sharded cluster.

* :doc:`config servers </core/sharded-cluster-config-servers>`: Config
  servers store metadata and configuration settings for the cluster. As
  of MongoDB 3.4, config servers must be deployed as a replica set (CSRS).

.. _sc-production-configuration:

Production Configuration
------------------------

In a production cluster, ensure that data is redundant and
that your systems are highly available. Consider the following
for a production sharded cluster deployment:

- Deploy Config Servers as a 3 member :term:`replica set`
- Deploy each Shard as a 3 member :term:`replica set`
- Deploy one or more :binary:`~bin.mongos` routers

Where possible, consider deploying one member of each replica set 
in a site suitable for being a disaster recovery location.

Sharding requires at least two shards to distribute sharded data. Single 
shard sharded clusters may be useful if you plan on enabling sharding in the 
near future, but do not need to at the time of deployment.

Deploying multiple :binary:`~bin.mongos` routers supports high availability
and scalability. A common pattern is to place a :binary:`~bin.mongos` on
each application server. Deploying one :binary:`~bin.mongos` router on each
application server reduces network latency between the application and
the router.

Alternatively, you can place a :binary:`~bin.mongos` router on each shard
primary. This approach also reduces network latency between the
application and the router: applications use a :doc:`connection
string </reference/connection-string>` listing all the hostnames of each shard primary. The MongoDB
driver then determines the network latency for each :binary:`~bin.mongos`
and load balances randomly across the routers that fall within a set
:ref:`latency window <selection-discovery-options>`. Ensure that the
server hosting the shard primary and :binary:`~bin.mongos` router has
sufficient capacity to accommodate the extra CPU and memory
requirements.

There is no limit to the number of :binary:`~bin.mongos` routers you can
have in a deployment. However, as :binary:`~bin.mongos` routers communicate
frequently with your config servers, monitor config server performance
closely as you increase the number of routers. If you see performance
degradation, it may be beneficial to cap the number of
:binary:`~bin.mongos` routers in your deployment.

.. include:: /images/sharded-cluster-production-architecture.rst

Development Configuration
-------------------------

For testing and development, you can deploy a sharded cluster with a
minimum number of components. These **non-production** clusters have the
following components:

- A replica set :ref:`config server <sharding-config-server>` with one
  member.

- At least one shard as a single-member :term:`replica set`.

- One :binary:`~bin.mongos` instance.

.. include:: /images/sharded-cluster-test-architecture.rst

.. warning:: Use the test cluster architecture for testing and
   development only.

.. seealso:: :doc:`/tutorial/deploy-shard-cluster/`

.. class:: hidden

   .. include:: /includes/toc/sharded-cluster-components.rst
