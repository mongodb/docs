.. _arch-center-is-predictive-maintenance:

====================================================
Predictive Maintenance Excellence with MongoDB Atlas
====================================================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: predictive maintenance, manufacturing, gen AI
   :description: Read how MongoDB Atlas powers predictive maintenance
                 with AI/ML, real-time equipment monitoring, failure prediction, and
                 automated repair plan generation.
   
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Transform equipment maintenance with AI-powered analytics that help
predict failures, generate repair plans, and reduce downtime.

**Use cases:** `App-Driven Analytics
<https://www.mongodb.com/resources/solutions/use-cases/application-driven-intelligence>`__,
`Gen AI <https://www.mongodb.com/use-cases/artificial-intelligence>`__,
`IoT <https://www.mongodb.com/solutions/use-cases/internet-of-things>`__,
`Single View <https://www.mongodb.com/solutions/use-cases/single-view>`__

**Industries:** `Manufacturing & Mobility
<https://www.mongodb.com/solutions/industries/manufacturing>`__,
Aerospace & Defense, Energy & Environmental

**Products:** `MongoDB Atlas <http://mongodb.com/atlas>`__, 
`MongoDB Atlas Charts <https://www.mongodb.com/products/platform/atlas-charts>`__,
`MongoDB Atlas Stream Processing <https://www.mongodb.com/products/platform/atlas-stream-processing>`__,
`MongoDB Atlas Vector Search <https://www.mongodb.com/products/platform/atlas-vector-search>`__

**Partners:** `Cohere <https://cloud.mongodb.com/ecosystem/cohere>`__, 
`LangChain <https://cloud.mongodb.com/ecosystem/langchain>`__ 

Solution Overview
-----------------

Predictive maintenance solutions can allow organizations to achieve significant
operational achievements, such as reducing downtime by 15-20%, increasing 
labor productivity by 5-20%, and cutting maintenance costs by 30-60%, according
to `Deloitte <https://www2.deloitte.com/content/dam/Deloitte/us/Documents/process-and-operations/us-predictive-maintenance.pdf>`__.

This solution uses MongoDB Atlas to build an end-to-end predictive maintenance
system that helps manufacturers prevent equipment failures and optimize
maintenance operations. The solution has four stages:

1. **Machine prioritization and criticality analysis:** Uses :abbr:`ML (Machine Learning`
   and :abbr:`RAG (Retrieval-Augmented Generation)`-based analysis to 
   determine equipment to prioritize for predictive
   maintenance.

#. **Failure prediction:** Uses `Atlas Stream Processing
   <https://www.mongodb.com/products/platform/atlas-stream-processing>`__
   to process real-time sensor data and detect potential failures before
   they occur.

#. **Maintenance plan generation:** Uses :abbr:`LLMs (Large Language Models)` trained
   on maintenance manuals, inventory data, and resource information to automatically
   generate detailed work orders for failure situations.

#. **Maintenance guidance generation:** Generates enhanced maintenance
   guidance and uses :ref:`Change Streams <changeStreams>`
   to deliver instructions directly to technicians' mobile devices.

.. figure:: /includes/images/industry-solutions/predictive-maintenance-demo.svg
   :figwidth: 1200px
   :alt: Predictive maintenance workflow stages
   
   Figure 1. Four stages of predictive maintenance workflow

.. video:: https://www.youtube.com/watch?v=YwTWpUl3QS8

Reference Architectures
-----------------------

This section guides you through the architecture of each stage in this
solution.

Machine Prioritization and Criticality Analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. figure:: /includes/images/industry-solutions/predictive-maintenance-system-diagram.svg
   :figwidth: 1200px
   :alt: AI system diagram to prioritize machine maintenance
   
   Figure 2. AI system diagram for machine prioritization recommendations

This stage uses RAG to determine
which machines require predictive maintenance. The system processes
two types of input data: 

- **Structured data**, such as production parameters and machine breakdown
  frequency. 

- **Unstructured data**, such as institutional knowledge stored in PDF documents. 

The workflow aggregates and operationalizes both data types as vector
embeddings in MongoDB Atlas, then uses Vector Search to semantically
search the database. The results of the search provide relevant context
to an LLM, via Amazon Bedrock or Cohere, which generates responses to
prioritization queries. This helps maintenance teams make data-driven 
decisions about which machines need attention first.

Failure Prediction
~~~~~~~~~~~~~~~~~~

.. figure:: /includes/images/industry-solutions/predictive-maintenance-real-time-sensor.svg
   :figwidth: 1200px
   :alt: Real-time sensor monitoring diagram
   
   Figure 3. Real-time sensor monitoring with MongoDB Atlas

This stage processes real-time machine sensor data for failure prediction 
through six key stages: 

1. **Data collection:** A prioritized machine captures metrics such as
   product type, temperature, speed, and tool wear.

#. **Stream processing:** The system transforms the raw sensor data.

#. **Data storage:** The data is stored in MongoDB Atlas.

#. **Change detection:** Change streams monitor the data for significant
   changes.

#. **ML inference:** A trained model predicts potential failures.

#. **Dual output:** Atlas Charts visualizes the data, and
   Change Streams enable mobile notifications.

Maintenance Plan Generation
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. figure:: /includes/images/industry-solutions/predictive-maintenance-work-order.svg
   :figwidth: 1200px
   :alt: Work order generator diagram with artificial intelligence
   
   Figure 4. AI-powered work order generation system diagram

This stage automates maintenance work order creation through the following
architecture:

1. **Document processing:** The solution splits machine manuals and old work
   orders into chunks and converts them to vectors using Cohere embedding
   models.

#. **Vector storage:** The solution stores embeddings in MongoDB Atlas. 

#. **Work order generation:** A specialized app uses LLMs to generate
   work order templates, pulls inventory and resource information through
   an aggregation pipeline, and creates detailed repair plans.

Maintenance Guidance Generation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. figure:: /includes/images/industry-solutions/predictive-maintenance-rag.svg
   :figwidth: 1200px
   :alt: RAG workflow diagram
   
   Figure 5. RAG workflow enhances technician repair instructions

This stage uses RAG to enhance operator instructions with the following 
architecture:

1. **Service note processing:** Converts multilingual PDF service notes
   to text.

#. **Translation:** Processes non-English content through translation models. 

#. **Instruction generation:** Uses LLMs to combine translated service notes with
   original repair plans.

#. **Delivery:** Provides updated maintenance instructions to technicians
   through a mobile app.

Build the Solution
------------------

For complete implementation details, including code samples,
configuration files, and tutorial videos, visit this solution's
`GitHub repository <https://github.com/mongodb-industry-solutions/Leafy-Predictive-Maintenance?tab=readme-ov-file#step-1-create-a-mongodb-atlas-instance>`__. 

This repository provides a production-ready template for implementing
predictive maintenance. Follow the instructions in the repository's ``README``, 
which guides you through the following steps.

.. procedure::
   :style: normal

   .. step:: Set up your MongoDB Atlas environment

      a. Configure your cluster, database, and collections for the stages
         in this solution's architecture.

      #. Set up MongoDB Atlas Search and Vector Search indexes for the 
         ``repair_manuals`` and ``maintenance_history`` collections. Use the
         following document when setting up your :ref:`search index <create-fts-index>`.

         .. code-block:: javascript  
            :copyable: true  
  
            {  
               "fields": [  
                   {  
                       "numDimensions": 1024,  
                       "path": "embeddings",  
                       "similarity": "euclidean",  
                       "type": "vector"  
                   }  
               ]  
            }  

      #. Configure Atlas Stream Processing.

      #. Create Atlas Charts dashboards for monitoring and visualization.

   .. step:: Configure your AI services integration

      Select one of the following services for your LLM implementation:

      - **Amazon Bedrock:** Configure access to Cohere models, such as 
        ``cohere.embed-english-v3`` or ``cohere.command-r-10``,
        for embeddings and completions.

      - **Direct API access:** Integrate a third-party provider of 
        your choice for embeddings and completions.

      Additionally, set up Google Cloud Translation API for multilingual support.

   .. step:: Set up your application

      a. Configure your environment variables such as your MongoDB connection
         strings, database settings, and required API credentials.
      
      #. Deploy the inference script for continuous system monitoring.

      #. Install and configure the alerts application.

      #. Launch the main demo application.

      #. Perform system testing and validation to ensure proper data flow
         and functionality.

Key Learnings 
-------------

- **MongoDB's flexibility enables predictive maintenance:** MongoDB Atlas
  combines structured sensor data and unstructured maintenance documents,
  providing both real-time monitoring and AI-powered analysis in one
  architecture.

- **MongoDB's features power end-to-end predictive systems:** The solution
  integrates multiple MongoDB features, such as Atlas Stream Processing 
  for real-time data, Vector Search for semantic analysis, and Change 
  Streams for mobile alerts.

- **AI enables automation:** This solution combines multiple AI technologies
  with MongoDB's developer data platform capabilities to create an
  automated maintenance workflow, from machine prioritization to mobile
  repair guidance delivery.

Authors
-------

- Dr. Humza Akhtar, MongoDB
- Rami Pinto, MongoDB
- Sebastian Rojas Arbulu, MongoDB

Learn More
----------

- :ref:`arch-center-is-agentic-predictive-maintenance`
- :ref:`arch-center-is-car-assistant`
- :ref:`arch-center-is-framework-rapid-agent-deployment`