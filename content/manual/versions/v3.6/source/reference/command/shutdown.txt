========
shutdown
========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: shutdown

   The :dbcommand:`shutdown` command cleans up all database resources
   and then terminates the process.  You must issue
   the :dbcommand:`shutdown` command against the :term:`admin database`
   in the form:

   .. code-block:: javascript

      db.adminCommand({ shutdown: 1 })

   .. note::

      Run the :dbcommand:`shutdown` against the :term:`admin database`. When
      using :dbcommand:`shutdown`, the connection must originate from
      localhost **or** use an authenticated connection.

   If the node you're trying to shut down is a :doc:`replica set </replication>`
   primary, then the command will succeed only if there exists a secondary node
   whose oplog data is within 10 seconds of the primary. You can override this protection
   using the ``force`` option:

   .. code-block:: javascript

      db.adminCommand({ shutdown: 1, force: true })

   Alternatively, the :dbcommand:`shutdown` command also supports a ``timeoutSecs`` argument
   which allows you to specify a number of seconds to wait for other
   members of the replica set to catch up:

   .. code-block:: javascript

      db.adminCommand({ shutdown: 1, timeoutSecs: 60 })

   The equivalent :binary:`~bin.mongo` shell helper syntax looks like this:

   .. code-block:: javascript

      db.shutdownServer({timeoutSecs: 60});
