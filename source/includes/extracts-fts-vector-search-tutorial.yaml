ref: fts-vector-search-tutorial-queries-desc
content: |
  The following queries use the :pipeline:`$vectorSearch` pipeline stage
  to search for movies that match the specified vector embeddings. Note
  that the queries use ``ada-002-text`` embedding, which is the same as
  the vector embedding in the ``plot_embedding`` field. The queries
  specify a search for up to ``100`` nearest neighbors and limit the
  results to ``10`` documents only. The queries also specify a 
  :pipeline:`$project` stage to perform the following actions: 

  - Exclude the ``_id`` field and include only the ``title``,
    ``genres``, ``plot``, and ``year`` fields in the results.
  - Add a field named ``score`` that shows the vector search score for
    each document in the results.

---
ref: fts-vector-search-tutorial-simple-query-desc
content: |
  The following query searches the ``plot_embedding`` field using the
  vector embeddings for the string *historical heist*. The query uses
  ``ada-002-text`` embedding, which is the same as the vector 
  embedding in the ``plot_embedding`` field. It specifies multiple
  comparison query operators per field to pre-filter the documents
  against which to perform the semantic search. 
  
  The filter uses the :query:`$and` aggregation pipeline operator to find
  movie documents that match both the following criteria:  

  - Filter by the ``genres`` field to find movies that aren't in the
    ``drama``, ``western``, or ``crime`` genre, but in the ``action``,
    ``adventure``, or ``family`` genre.  
  - Filter by the ``year`` field to find movies that were released
    between the years ``1960`` and ``2000``, both inclusive. 

---
ref: fts-vector-search-tutorial-advanced-query-desc
content: |
  The following query searches the ``plot_embedding`` field using the 
  vector embeddings for the string *martial arts*. The query uses
  ``ada-002-text`` embedding, which is the same as the vector embedding
  in the ``plot_embedding`` field. It specifies aggregation pipeline and
  comparison query operators to demonstrate a combined use of the
  operators to filter the data. 
  
  The filter uses the :query:`$or` aggregation pipeline operator to find
  movie documents that match either one of the following criteria: 

  - Filter by the ``genres`` field to find movies that aren't in the
    ``crime`` genre.
  - Filter by the ``year`` field to find movies that were released in or
    before the year ``2015`` *and* by the ``genres`` field to find
    movies in the ``action`` genre.  

...
