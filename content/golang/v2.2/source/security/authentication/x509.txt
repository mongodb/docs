.. _golang-x509:
.. _golang-authentication-x509:

==============================
X.509 Authentication Mechanism
==============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: certificate, code example

Overview
--------

Overview
--------

In the **X.509** authentication mechanism, the server and client use the
:wikipedia:`TLS <Transport_Layer_Security>` protocol to exchange X.509 public-key
certificates. You can use this mechanism to authenticate to MongoDB Atlas, MongoDB
Enterprise Advanced, and MongoDB Community Edition.

.. tip:: X.509 Mechanism

   To learn how to use TLS/SSL with the {+driver-short+},
   see the :ref:`golang-tls` guide.

   For more information about X.509 certificates, see
   :manual:`Use x.509 Certificates to Authenticate Clients on Self-Managed Deployments
   </tutorial/configure-x509-client-authentication/>` in the {+mdb-server+} manual.

Code Placeholders 
~~~~~~~~~~~~~~~~~

The code examples on this page use the following placeholders:

* ``hostname``: Your MongoDB servers network address, accessible by
  your client
* ``port``: Your MongoDB servers port number
- ``cafile_path``: The path to your CA File for your connection string
- ``client_certificate_path``: The path to your client certificate file or the client private key file

Specify X.509 Authentication
----------------------------

To specify the ``X.509`` authentication mechanism, perform the
following:

- Assign the ``tlsCAFile`` the path to its file in the connection string
- Assign the ``tlsCertificateKeyFile`` the path to its file in the connection string
- Assign the ``AuthMechanism`` option the value ``"MONGODB-X509"``

The following code example shows how to specify the ``X.509`` authentication mechanism:

.. code-block:: go
   :emphasize-lines: 4-5, 7

   caFilePath := "<cafile_path>"
   certificateKeyFilePath := "<client_certificate_path>"

   uri := "mongodb://<hostname>:<port>/?tlsCAFile=%s&tlsCertificateKeyFile=%s"
   uri = fmt.Sprintf(uri, caFilePath, certificateKeyFilePath)
   credential := options.Credential{
      AuthMechanism: "MONGODB-X509",
   }

   clientOpts := options.Client().ApplyURI(uri).SetAuth(credential)

.. TODO
  To learn more about configuring your application to use
  certificates and TLS/SSL options, see
  :ref:`golang-tls-ssl-guide`.

API Documentation
-----------------

To learn more about any of the methods or types discussed on this
page, see the following API documentation:

- `Client <{+api+}/mongo#Client>`__
- `Credential <{+api+}/mongo/options#Credential>`__
- `SetAuth() <{+api+}/mongo/options#ClientOptions.SetAuth>`__
- `ClientOptions <{+api+}/mongo/options#ClientOptions>`__
