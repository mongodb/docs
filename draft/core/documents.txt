=========
Documents
=========

.. default-domain:: mongodb

Documents in MongoDB refer to the data structure of the records stored
in :term:`collections <collection>`, the query criteria, the update actions, and
other arguments to MongoDB methods and operators.

Documents in MongoDB are :term:`BSON` objects with support for the full
range of :term:`BSON types`; however, conceptually, documents may be
viewed as :term:`JSON` objects with the following structure:

.. code-block:: javascript

   {
      field1: value1,
      field2: value2,
      field3: value3,
      ...
      fieldN: valueN
   }

Having support for the full range of :term:`BSON types`, MongoDB
documents may contain ``field:value`` pairs where the value can be
another document, an array, an array of documents as well as the basic
types such as ``Double``, ``String``, or ``Date``.

Consider the following examples of MongoDB documents:

- The following document specifies a record in a collection. Documents
  in a collection contain a unique ``_id`` field:

  .. code-block:: javascript

     {
       _id: 1,
       name: { first: 'John', last: 'Backus' },
       birth: new Date('Dec 03, 1924'),
       death: new Date('Mar 17, 2007'),
       contribs: [ 'Fortran', 'ALGOL', 'Backus-Naur Form', 'FP' ],
       awards: [
                 { award: 'National Medal of Science',
                   year: '1975',
                   by: 'National Science Foundation' },
                 { award: 'Turing Award',
                   year: '1977',
                   by: 'ACM' }
               ]
     }

  .. include:: /includes/note-insert-id-field.rst
  
- The following documents specify the query criteria:

  - The following document specifies the query criteria where ``_id``
    is equal to ``1``:

    .. code-block:: javascript

       { _id: 1 }

  - The following document specifies the query criteria where ``_id``
    is greater to ``3``:

    .. code-block:: javascript

       { _id: { $gt: 3 } }

  - The following document specifies the query criteria where ``_id``
    is equal to ``1`` and the ``name`` field equals the document ``{
    first: 'John', last: 'Backus' }``:

    .. code-block:: javascript

       { _id: 1, name: { first: 'John', last: 'Backus' } }

  When passed as an argument to methods such as the :method:`find()
  <db.collection.find()>` method or the :method:`update()
  <db.collection.update()>` method, the query document limits the
  records returned or updated:

  .. code-block:: javascript

     db.csbios.find( { _id: 1 } )
     db.csbios.find( { _id: { $gt: 3 } } )
     db.csbios.find( { _id: 1, name: { first: 'John', last: 'Backus' } } )
     
- The following document specifies the update actions:

  .. code-block:: javascript

     { $set: { 'name.middle': 'Warner' },
       $push: { awards: { award: 'IBM Fellow',
                          year: '1963',
                          by: 'IBM' }

  When passed as an argument to the :method:`update()
  <db.collection.update()>` method, the document specifies the update
  actions to perform on the document:

  .. code-block:: javascript

     db.csbios.update( { _id: 1 },
                       { $set: { 'name.middle': 'Warner' },
                         $push: { awards: { award: 'IBM Fellow',
                                            year: '1963',
                                            by: 'IBM' } } } 
                     )

- The following document specifies the sort order:

  .. code-block:: javascript
  
     {  'name.last': 1  }

  When passed as an argument to the :method:`sort() <cursor.sort()>`
  method, the document specifies the sort order:

  .. code-block:: javascript
  
     db.csbios.find().sort( { 'name.last': 1 } )

  When passed as an argument to the :method:`ensureIndex() <db.collection.ensureIndex()>`
  method, the document specifies the index to create:

  .. code-block:: javascript

     db.csbios.ensureIndex( { 'name.last': 1 } )
