===========================
$regexMatch (aggregation)
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $regexMatch

   .. versionadded:: 4.2

   Performs a regular expression (regex) pattern matching and returns:

   - ``true``  if a match exists.

   - ``false`` if a match doesn't exist.

   MongoDB uses Perl compatible regular expressions (i.e. "PCRE" )
   version 8.41 with UTF-8 support.

   Prior to MongoDB 4.2, aggregation pipeline can only use the query
   operator :query:`$regex` in the :pipeline:`$match` stage. For more
   information on using regex in a query, see :query:`$regex`.

Syntax
------

The :expression:`$regexMatch` operator has the following syntax:

.. code-block:: javascript

   { $regexMatch: { input: <expression> , regex: <expression>, options: <expression> } }

.. |regexpattern| replace:: :ref:`regex pattern <regexMatch-regex>`

.. |regexoptions| replace:: :ref:`options <regexMatch-options>`

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Field
     - Description

   * - :ref:`input <regexMatch-input>`

     - .. _regexMatch-input:

       .. include:: /includes/extracts/agg-regex-input.rst

   * - :ref:`regex <regexMatch-regex>`

     - .. _regexMatch-regex:

       .. include:: /includes/extracts/agg-regex-pattern.rst

   * - :ref:`options <regexMatch-options>`

     - .. _regexMatch-options:
     
       .. include:: /includes/extracts/agg-regex-options.rst

Returns
~~~~~~~

The operator returns a boolean:

- ``true`` if a match exists.

- ``false`` if a match doesn't exist.

.. seealso::

   - :expression:`$regexFind`

   - :expression:`$regexFindAll`

Behavior
--------

``$regexMatch`` and Collation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:expression:`$regexMatch` ignores the collation specified for the
collection, :method:`db.collection.aggregate()`, and the index, if used.

For example, the create a sample collection with collation strength
``1`` (i.e. compare base character only and ignore other differences
such as case and diacritics):

.. code-block:: javascript

   db.createCollection( "myColl", { collation: { locale: "fr", strength: 1 } } )

Insert the following documents:

.. code-block:: javascript

   db.myColl.insertMany([
      { _id: 1, category: "café" },
      { _id: 2, category: "cafe" },
      { _id: 3, category: "cafE" }
   ])

Using the collection's collation, the following operation performs a
case-insensitive and diacritic-insensitive match:

.. code-block:: javascript

   db.myColl.aggregate( [ { $match: { category: "cafe" } } ] )

The operation returns the following 3 documents:

.. code-block:: javascript

   { "_id" : 1, "category" : "café" }
   { "_id" : 2, "category" : "cafe" }
   { "_id" : 3, "category" : "cafE" }

However, the aggregation expression :expression:`$regexMatch` ignores
collation; that is, the following regular expression pattern matching examples
are case-sensitive and diacritic sensitive:

.. code-block:: javascript

   db.myColl.aggregate( [ { $addFields: { results: { $regexMatch: { input: "$category", regex: /cafe/ }  } } } ] )
   db.myColl.aggregate( 
      [ { $addFields: { results: { $regexMatch: { input: "$category", regex: /cafe/ }  } } } ], 
      { collation: { locale: "fr", strength: 1 } }       // Ignored in the $regexMatch
   )

Both operations return the following:

.. code-block:: javascript

   { "_id" : 1, "category" : "café", "results" : false }
   { "_id" : 2, "category" : "cafe", "results" : true }
   { "_id" : 3, "category" : "cafE", "results" : false }

To perform a case-insensitive regex pattern matching, use the
:ref:`regexMatch-example-i-options` instead. See
:ref:`regexMatch-example-i-options` for an example.

Examples
--------

``$regexMatch`` and Its Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To illustrate the behavior of the :expression:`$regexMatch` operator as
discussed in this example, create a sample collection ``products`` with
the following documents:

.. code-block:: javascript

   db.products.insertMany([
      { _id: 1, description: "Single LINE description." },
      { _id: 2, description: "First lines\nsecond line" },
      { _id: 3, description: "Many spaces before     line" },
      { _id: 4, description: "Multiple\nline descriptions" },
      { _id: 5, description: "anchors, links and hyperlinks" },
      { _id: 6, description: "métier work vocation" }
   ])

By default, :expression:`$regexMatch` performs a case-sensitive match.
For example, the following aggregation performs a case-*sensitive*
:expression:`$regexMatch` on the ``description`` field. The regex
pattern ``/line/`` does not specify any grouping:

.. code-block:: javascript

   db.products.aggregate([
      { $addFields: { result: { $regexMatch: { input: "$description", regex: /line/ } } } }
   ])

The operation returns the following:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "description" : "Single LINE description.", "result" : false }
   { "_id" : 2, "description" : "First lines\nsecond line", "result" : true }
   { "_id" : 3, "description" : "Many spaces before     line", "result" : true }
   { "_id" : 4, "description" : "Multiple\nline descriptions", "result" : true }
   { "_id" : 5, "description" : "anchors, links and hyperlinks", "result" : false }
   { "_id" : 6, "description" : "métier work vocation", "result" : false }
   

The following regex pattern ``/lin(e|k)/`` specifies a grouping
``(e|k)`` in the pattern:

.. code-block:: javascript

   db.products.aggregate([
      { $addFields: { result: { $regexMatch: { input: "$description", regex: /lin(e|k)/ } } } }
   ])

The operation returns the following:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "description" : "Single LINE description.", "result" : false }
   { "_id" : 2, "description" : "First lines\nsecond line", "result" : true }
   { "_id" : 3, "description" : "Many spaces before     line", "result" : true }
   { "_id" : 4, "description" : "Multiple\nline descriptions", "result" : true }
   { "_id" : 5, "description" : "anchors, links and hyperlinks", "result" : true }
   { "_id" : 6, "description" : "métier work vocation", "result" : false }

.. _regexMatch-example-i-options:

``i`` Option
````````````

.. include:: /includes/extracts/agg-regex-options-one-place-only.rst

To perform case-*insensitive* pattern matching, include the :ref:`i
<regexMatch-options>` option as part of the :ref:`regex
<regexMatch-regex>` field or in the :ref:`options <regexMatch-options>`
field:

.. code-block:: javascript
  :copyable: false

  // Specify i as part of the regex field
  { $regexMatch: { input: "$description", regex: /line/i } }

  // Specify i in the options field
  { $regexMatch: { input: "$description", regex: /line/, options: "i" } }
  { $regexMatch: { input: "$description", regex: "line", options: "i" } }

For example, the following aggregation performs a case-*insensitive*
:expression:`$regexMatch` on the ``description`` field. The regex
pattern ``/line/`` does not specify any grouping:

.. code-block:: javascript

   db.products.aggregate([
      { $addFields: { result: { $regexMatch: { input: "$description", regex: /line/i } } } }
   ])

The operation returns the following documents:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "description" : "Single LINE description.", "result" : true }
   { "_id" : 2, "description" : "First lines\nsecond line", "result" : true }
   { "_id" : 3, "description" : "Many spaces before     line", "result" : true }
   { "_id" : 4, "description" : "Multiple\nline descriptions", "result" : true }
   { "_id" : 5, "description" : "anchors, links and hyperlinks", "result" : false }
   { "_id" : 6, "description" : "métier work vocation", "result" : false }

``m`` Option
````````````

.. include:: /includes/extracts/agg-regex-options-one-place-only.rst

To match the specified anchors (e.g. ``^``, ``$``) for each line of a
multiline string, include the :ref:`m <regexMatch-options>` option
as part of the :ref:`regex <regexMatch-regex>` field or in the
:ref:`options <regexMatch-options>` field:

.. code-block:: javascript
  :copyable: false

  // Specify m as part of the regex field
  { $regexMatch: { input: "$description", regex: /line/m } }

  // Specify m in the options field
  { $regexMatch: { input: "$description", regex: /line/, options: "m" } }
  { $regexMatch: { input: "$description", regex: "line", options: "m" } }

The following example includes both the ``i`` and the ``m`` options to
match lines starting with either the letter ``s`` or ``S`` for
multiline strings:

.. code-block:: javascript

   db.products.aggregate([
      { $addFields: { result: { $regexMatch: { input: "$description", regex: /^s/im } } } }
   ])

The operation returns the following:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "description" : "Single LINE description.", "result" : true }
   { "_id" : 2, "description" : "First lines\nsecond line", "result" : true }
   { "_id" : 3, "description" : "Many spaces before     line", "result" : false }
   { "_id" : 4, "description" : "Multiple\nline descriptions", "result" : false }
   { "_id" : 5, "description" : "anchors, links and hyperlinks", "result" : false }
   { "_id" : 6, "description" : "métier work vocation", "result" : false }


``x`` Option
````````````

.. include:: /includes/extracts/agg-regex-options-one-place-only.rst

To ignore all unescaped white space characters and comments (denoted by
the un-escaped hash ``#`` character and the next new-line character) in
the pattern, include the :ref:`s <regexMatch-options>` option in the
:ref:`options <regexMatch-options>` field:

.. code-block:: javascript
  :copyable: false

  // Specify x in the options field
  { $regexMatch: { input: "$description", regex: /line/, options: "x" } }
  { $regexMatch: { input: "$description", regex: "line", options: "x" } }


The following example includes the ``x`` option to skip unescaped white
spaces and comments:

.. code-block:: javascript

   db.products.aggregate([
      { $addFields: { returns: { $regexMatch: { input: "$description", regex: /lin(e|k) # matches line or link/, options:"x" } } } }
   ])

The operation returns the following:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "description" : "Single LINE description.", "returns" : false }
   { "_id" : 2, "description" : "First lines\nsecond line", "returns" : true }
   { "_id" : 3, "description" : "Many spaces before     line", "returns" : true }
   { "_id" : 4, "description" : "Multiple\nline descriptions", "returns" : true }
   { "_id" : 5, "description" : "anchors, links and hyperlinks", "returns" : true }
   { "_id" : 6, "description" : "métier work vocation", "returns" : false }

``s`` Option
````````````

.. include:: /includes/extracts/agg-regex-options-one-place-only.rst

To allow the dot character (i.e. ``.``) in the pattern to match all
characters including the new line character, include the :ref:`s
<regexMatch-options>` option in the :ref:`options
<regexMatch-options>` field:

.. code-block:: javascript
  :copyable: false

  // Specify s in the options field
  { $regexMatch: { input: "$description", regex: /m.*line/, options: "s" } }
  { $regexMatch: { input: "$description", regex: "m.*line", options: "s" } }

The following example includes the ``s`` option to allow the dot
character (i.e. .) to match all characters including new line as well
as the ``i`` option to perform a case-insensitive match:

.. code-block:: javascript

   db.products.aggregate([
      { $addFields: { returns: { $regexMatch: { input: "$description", regex:/m.*line/, options: "si"  } } } }
   ])

The operation returns the following:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "description" : "Single LINE description.", "returns" : false }
   { "_id" : 2, "description" : "First lines\nsecond line", "returns" : false }
   { "_id" : 3, "description" : "Many spaces before     line", "returns" : true }
   { "_id" : 4, "description" : "Multiple\nline descriptions", "returns" : true }
   { "_id" : 5, "description" : "anchors, links and hyperlinks", "returns" : false }
   { "_id" : 6, "description" : "métier work vocation", "returns" : false }

Use ``$regexMatch`` to Check Email Address
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create a sample collection ``feedback`` with the following documents:

.. code-block:: javascript

   db.feedback.insertMany([
      { "_id" : 1, comment: "Hi, I'm just reading about MongoDB -- aunt.arc.tica@example.com"  },
      { "_id" : 2, comment: "I wanted to concatenate a string" },
      { "_id" : 3, comment: "How do I convert a date to string? Contact me at either cam@mongodb.com or c.dia@mongodb.com" },
      { "_id" : 4, comment: "It's just me. I'm testing.  fred@MongoDB.com" }
   ])
   
The following aggregation uses the :expression:`$regexMatch` to check
if the ``comment`` field contains an email address with
``@mongodb.com`` and categorize the feedback as ``Employee`` or
``External``.

.. code-block:: javascript

   db.feedback.aggregate( [ 
       { $addFields: { 
          "category": { $cond: { if:  { $regexMatch: { input: "$comment", regex: /[a-z0-9_.+-]+@mongodb.com/i } },
                                 then: "Employee",
                                 else: "External" } }
       } },

The operation returns the following documents:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "comment" : "Hi, I'm just reading about MongoDB -- aunt.arc.tica@example.com", "category" : "External" }
   { "_id" : 2, "comment" : "I wanted to concatenate a string", "category" : "External" }
   { "_id" : 3, "comment" : "How do I convert a date to string? Contact me at either cam@mongodb.com or c.dia@mongodb.com", "category" : "Employee" }
   { "_id" : 4, "comment" : "It's just me. I'm testing.  fred@MongoDB.com", "category" : "Employee" }

