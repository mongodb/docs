title:
  text: Use the ``$set`` operator to change a field value.
  character: "`"
stepnum: 1
pre: |
  Update one of the documents that has ``cust_id`` equal to
  ``"ijk021"`` by using the :update:`$set` operator to change
  the ``status`` field value to ``"P"``.
ref: ""
action:
  language: javascript
  code: |
     db.orders.update( { cust_id: "ijk021" }, { $set: { status: "P" } } )
post: |
  Although multiple documents have ``cust_id`` equal to ``"ijk021"``,
  the default behavior of the :method:`~db.collection.update()` method is
  to find a single matching document and update that document.
---
title:
  text: Review the returned object.
  character: "`"
stepnum: 2
ref: ""
pre: |
  The update operation returns a :method:`WriteResult` object which
  contains the status of the operation. A successful update of the
  document returns the following object:
action:
  language: javascript
  code: |
     WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
post: |
  The :data:`~WriteResult.nMatched` field specifies the number of
  existing documents matched for the update, and
  :data:`~WriteResult.nModified` specifies the number of
  existing documents modified.
 
  If the operation encounters an error, the :method:`WriteResult`
  object will contain the error information.
---
title:
  text: Verify the update operation.
  character: "`"
ref: ""
stepnum: 3
pre: |
  To verify the update, query the ``orders``
  collection using ``{ cust_id: "ijk021" }`` as the query condition.
action:
  language: javascript
  code: |
     db.orders.find( { cust_id: "ijk021" } )
post: |
  The query will match all documents that have ``cust_id`` equal to ``"ijk021"``.
---
title:
  text: Review the documents.
  character: "`"
ref: ""
stepnum: 4
pre: |
   Of the multiple documents that match the query condition, only one
   document has a ``status`` field equal to ``"P"``.
action:
   language: javascript
   code: |
      { "_id" : ObjectId("53742e42718e9881bfc64bc2"), "cust_id" : "ijk021", "ord_date" : ISODate("2014-04-15T04:00:00Z"), "status" : "P", "items" : [ { "sku" : "wxy", "qty" : 10, "price" : 15 }, { "sku" : "xyz", "qty" : 5, "price" : 10 } ], "shipping" : { "location" : "Warehouse1", "mode" : "airfreight" } }
      { "_id" : ObjectId("53742e42718e9881bfc64bc4"), "cust_id" : "ijk021", "ord_date" : ISODate("2014-04-27T04:00:00Z"), "status" : "A", "items" : [ { "sku" : "zzz", "qty" : 20, "price" : 25 }, { "sku" : "yyy", "qty" : 15, "price" : 20 } ], "shipping" : { "location" : "Warehouse2", "mode" : "train" } }
      { "_id" : ObjectId("53742e42718e9881bfc64bcc"), "cust_id" : "ijk021", "ord_date" : ISODate("2014-04-15T04:00:00Z"), "status" : "A", "items" : [ { "sku" : "qqq", "qty" : 10, "price" : 10 } ], "shipping" : { "location" : "Warehouse3", "mode" : "airfreight" } }
      { "_id" : ObjectId("53742e42718e9881bfc64bcd"), "cust_id" : "ijk021", "ord_date" : ISODate("2014-04-15T04:00:00Z"), "status" : "A", "items" : [ { "sku" : "yyy", "qty" : 10, "price" : 10 } ], "shipping" : { "location" : "Warehouse3", "mode" : "airfreight" } }
      { "_id" : ObjectId("53742e42718e9881bfc64bce"), "cust_id" : "ijk021", "ord_date" : ISODate("2014-04-15T04:00:00Z"), "status" : "A", "items" : [ { "sku" : "zzz", "qty" : 10, "price" : 10 } ], "shipping" : { "location" : "Warehouse3", "mode" : "airfreight" } }
---
title:
  text: Update multiple documents.
  character: "`"
stepnum: 5
pre: |
  To update multiple documents, use the ``multi`` option in the
  :method:`~db.collection.update()` method.

  The following updates the ``status`` field for all the documents that
  have ``cust_id`` equal to ``"ijk021"``.
ref: ""
action:
  language: javascript
  code: |
     db.orders.update( 
        { cust_id: "ijk021" },
        { $set: { status: "P" } },
        { multi: true }
     )
---
title:
  text: Review the returned object.
  character: "`"
stepnum: 6
ref: ""
pre: |
  The update operation returns a :method:`WriteResult` object which
  contains the status of the operation. A successful update of the
  document returns the following object:
action:
  language: javascript
  code: |
     WriteResult({ "nMatched" : 5, "nUpserted" : 0, "nModified" : 4 })
post: |
  The result shows that although the update condition matched ``5``
  documents, the update operation modified only ``4`` documents. This
  is because one of the matching documents already had a ``status`` of
  ``"P"``, and so, the update operation did not result in a
  change to that document.

  If the operation encounters an error, the :method:`WriteResult`
  object will contain the error information.
---
title:
  text: Verify the update operation.
  character: "`"
ref: ""
stepnum: 7
pre: |
  To verify the update, query the ``orders``
  collection using ``{ cust_id: "ijk021" }`` as the query condition.
action:
  language: javascript
  code: |
     db.orders.find( { cust_id: "ijk021" } )
post: |
  The query will match all documents that have ``cust_id`` equal to
  ``"ijk021"``.
---
title:
  text: Review the documents.
  character: "`"
ref: ""
stepnum: 8
pre: |
   All the matching documents have a ``status`` field equal to ``"P"``.
action:
   language: javascript
   code: |
      { "_id" : ObjectId("5373befbc9f811cde82d54d1"), "cust_id" : "ijk021", "ord_date" : ISODate("2014-04-15T04:00:00Z"), "status" : "P", "items" : [ { "sku" : "wxy", "qty" : 10, "price" : 15 }, { "sku" : "xyz", "qty" : 5, "price" : 10 } ], "shipping" : { "location" : "Warehouse2", "mode" : "airfreight" } }
      { "_id" : ObjectId("5373befbc9f811cde82d54d3"), "cust_id" : "ijk021", "ord_date" : ISODate("2014-04-27T04:00:00Z"), "status" : "P", "items" : [ { "sku" : "zzz", "qty" : 20, "price" : 25 }, { "sku" : "yyy", "qty" : 15, "price" : 20 } ], "shipping" : { "location" : "Warehouse2", "mode" : "train" } }
      { "_id" : ObjectId("5373bf8bc9f811cde82d54db"), "cust_id" : "ijk021", "ord_date" : ISODate("2014-04-15T04:00:00Z"), "status" : "P", "items" : [ { "sku" : "qqq", "qty" : 10, "price" : 10 } ], "shipping" : { "location" : "Warehouse1", "mode" : "airfreight" } }
      { "_id" : ObjectId("5373bf8bc9f811cde82d54dc"), "cust_id" : "ijk021", "ord_date" : ISODate("2014-04-15T04:00:00Z"), "status" : "P", "items" : [ { "sku" : "yyy", "qty" : 10, "price" : 10 } ], "shipping" : { "location" : "Warehouse1", "mode" : "airfreight" } }
      { "_id" : ObjectId("5373bf8bc9f811cde82d54dd"), "cust_id" : "ijk021", "ord_date" : ISODate("2014-04-15T04:00:00Z"), "status" : "P", "items" : [ { "sku" : "zzz", "qty" : 10, "price" : 10 } ], "shipping" : { "location" : "Warehouse1", "mode" : "airfreight" } }
---
title:
  text: Update an embedded field.
  character: "`"
stepnum: 9
pre: |
  To update a field within an embedded document, use the :term:`dot
  notation`. When using the dot notation, enclose the whole dotted
  field name in quotes.

  The following updates the ``location`` field within the embedded
  ``shipping`` document using the :update:`$set` operator.
ref: ""
action:
  language: javascript
  code: |
     db.orders.update(
        { cust_id: "ijk021", ord_date: ISODate("2014-04-15T04:00:00Z") },
        { $set: { "shipping.location": "Warehouse2" } }
     )
post: |
  Although the update condition matches multiple documents in the
  ``orders`` collection, the default behavior of the
  :method:`~db.collection.update()` method is to find a single matching
  document and update that document.
---
title:
  text: Review the returned object.
  character: "`"
stepnum: 10
ref: ""
pre: |
  The update operation returns a :method:`WriteResult` object which
  contains the status of the operation. A successful update of the
  document returns the following object:
action:
  language: javascript
  code: |
     WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
post: |
  If the operation encounters an error, the :method:`WriteResult`
  object will contain the error information.
...