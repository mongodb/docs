.. _golang-quick-reference:

===============
Quick Reference
===============

.. meta::
   :keywords: code example, summary, copyable
   :description: See simple code examples for how to perform a variety of operations in the Go driver.

This page shows the driver syntax for several MongoDB operations in the
{+driver-short+} and provides links to related reference and API
documentation.

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Operation
     - Syntax

   * - | **Find a Document**
       |
       | `API Documentation <{+api+}/mongo#Collection.FindOne>`__
       | :ref:`Find Documents Guide <golang-retrieve>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             err = coll.FindOne(context.TODO(), bson.D{{"firstName", Mike}}).Decode(&result)

          .. output::
             :language: go
             :visible: false 

             [{firstName Mike}, {lastName Smith} ...]

   * - | **Find Multiple Documents**
       |
       | `API Documentation <{+api+}/mongo#Collection.Find>`__
       | :ref:`Find Documents Guide <golang-retrieve>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             cursor, err := coll.Find(context.TODO(), bson.D{{"age", bson.D{{"$gte", 46}}}})

          .. output::
             :language: go
             :visible: false 

             [{firstName Kyle}, {age 51}, ... ]
             [{firstName Omar}, {age 47}, ... ]

   * - | **Insert a Document**
       |
       | `API Documentation <{+api+}/mongo#Collection.InsertOne>`__
       | :ref:`Insert Documents Guide <golang-insert-guide>`

     - .. code-block:: go
          :copyable: true

          result, err := coll.InsertOne(
              context.TODO(), 
              bson.D{
                  {"firstName", "Aliya"}, 
                  {"lastName", "Sanders"} 
              }
          )

   * - | **Insert Multiple Documents**
       |
       | `API Documentation <{+api+}/mongo#Collection.InsertMany>`__
       | :ref:`Insert Documents Guide <golang-insert-guide>`

     - .. code-block:: go
          :copyable: true

          docs := []interface{} {
              bson.D{{"firstName", "Erik"}, {"age", 27}},
              bson.D{{"firstName", "Mohammad"}, {"lastName", "Ahmad"}, {"age", 10}},
              bson.D{{"firstName", "Todd"}},
              bson.D{{"firstName", "Juan"}, {"lastName", "Pablo"}}
           }

          result, err := coll.InsertMany(context.TODO(), docs)

   * - | **Update a Document**
       |
       | `API Documentation <{+api+}/mongo#Collection.UpdateOne>`__
       | :ref:`Update Documents Guide <golang-update-documents>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             result, err := coll.UpdateOne(
                 context.TODO(), 
                 bson.D{{"firstName", "Erik"}}, 
                 bson.D{{"$set", bson.D{{"age", 28}}}}
             )
             fmt.Printf("Number of modified documents: %d\n", result.ModifiedCount)
		
          .. output::
             :language: go
             :visible: false 

             Number of modified documents: 1

   * - | **Update Multiple Documents**
       |
       | `API Documentation <{+api+}/mongo#Collection.UpdateMany>`__
       | :ref:`Update Documents Guide <golang-update-documents>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             result, err := coll.UpdateMany(
                 context.TODO(), 
                 bson.D{{"age", bson.D{{"$gte", 65}}}}, 
                 bson.D{{"$set", bson.D{{"classification", "senior"}}}}
             )
             fmt.Printf("Number of modified documents: %d\n", result.ModifiedCount)

          .. output::
             :language: go
             :visible: false 

             Number of modified documents: 4

   * - | **Update Arrays in Documents**
       |
       | `API Documentation <{+api+}/mongo#Collection.UpdateMany>`__
       | :ref:`Update Arrays Guide <golang-update-arrays>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             result, err := coll.UpdateMany(
                 context.TODO(), 
                 bson.D{}, 
                 bson.D{{"$push", bson.D{{"hobbies", "painting"}}}}
             )

          .. output::
             :language: go
             :visible: false

             [{firstName Xiao}, {hobbies ["painting"]}, ... ]
             [{firstName Omar}, {hobbies ["kayaking", "painting"]}, ... ]
             ...

   * - | **Replace a Document**
       |
       | `API Documentation <{+api+}/mongo#Collection.ReplaceOne>`__
       | :ref:`Replace Documents Guide <golang-replacement-document>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             result, err := coll.ReplaceOne(
                 context.TODO(), 
                 bson.D{{"firstName", "Mick"}, {"lastName", "Salazar"}}, 
                 bson.D{{"firstName", "Michael"}, {"lastName", "Salazar Jr."}}
             )

          .. output::
             :language: go
             :visible: false 

             [{{firstName Michael}, {lastName Salazar Jr.} }]

   * - | **Delete a Document**
       |
       | `API Documentation <{+api+}/mongo#Collection.DeleteOne>`__
       | :ref:`Delete Documents Guide <golang-delete-guide>`

     - .. code-block:: go
          :copyable: true

          result, err := coll.DeleteOne(
              context.TODO(), 
              bson.D{{"firstName", "Xiao"}}
          )

   * - | **Delete Multiple Documents**
       |
       | `API Documentation <{+api+}/mongo#Collection.DeleteMany>`__
       | :ref:`Delete Documents Guide <golang-delete-guide>`

     - .. code-block:: go
          :copyable: true

          results, err := coll.DeleteMany(
              context.TODO(), 
              bson.D{{"age", bson.D{{"$lte", 12}}}}
          )

   * - | **Bulk Write**
       |
       | `API Documentation <{+api+}/mongo#Collection.BulkWrite>`__
       | :ref:`Bulk Operations Guide <golang-bulk>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go 

             models := []mongo.WriteModel{
                 mongo.NewInsertOneModel().SetDocument(bson.D{{"firstName", "John"}, {"age", 5}}),
                 mongo.NewUpdateOneModel().SetFilter(bson.D{{"firstName", "Juan"}}).
                     SetUpdate(bson.D{{"$set", bson.D{{"age", 12}}}}),
             }
             opts := options.BulkWrite().SetOrdered(true)

             results, err := coll.BulkWrite(context.TODO(), models, opts)

          .. output::
             :language: go
             :visible: false

             [{firstName John}, {age 5} ... ]
             [{firstName Juan}, {age 12} ... ]

   * - | **Monitor Data Changes**
       |
       | `API Documentation <{+api+}/mongo#Collection.Watch>`__
       | :ref:`Change Streams Guide <golang-watch-changes>`

     - .. code-block:: go
          :copyable: true

          pipeline := mongo.Pipeline{bson.D{{"$match", bson.D{{"operationType", "insert"}}}}}
          cs, err := coll.Watch(context.TODO(), pipeline)

   * - | **Access Data from a Cursor Iteratively**
       |
       | `API Documentation <{+api+}/mongo#Cursor.Next>`__
       | :ref:`Retrieve Documents Individually Reference <golang-individual-documents>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             cursor, err := coll.Find(context.TODO(), bson.D{})

             for cursor.Next(context.TODO()) {
                 var result bson.D
                 if err := cursor.Decode(&result); err != nil {
                     log.Fatal(err)
                 }
                 fmt.Println(result)
             }

          .. output::
             :language: go
             :visible: false 

             [{firstName Doug} ... ]
             [{firstName Erik} ...]
             [{firstName Oleg} ...]
             ...

   * - | **Access Data from a Cursor as an Array**
       |
       | `API Documentation <{+api+}/mongo#Cursor.All>`__
       | :ref:`Retrieve All Documents Reference <golang-all-documents>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             cursor, err := coll.Find(context.TODO(), bson.D{})

             var results []bson.D
             if err = cursor.All(context.TODO(), &results); err != nil {
                 panic(err)
             }

          .. output::
             :language: go
             :visible: false 

             [{firstName Mike} ... ]
             [{firstName Edgar} ...]
             [{firstName Freddie} ...]
             ...

   * - | **Count Documents**
       |
       | `API Documentation <{+api+}/mongo#Collection.CountDocuments>`__
       | :ref:`Count Documents Guide <golang-count-documents>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             count, err := coll.CountDocuments(context.TODO(), bson.D{})

          .. output::
             :language: go
             :visible: false 

             17

   * - | **List Distinct Field Values**
       |
       | `API Documentation <{+api+}/mongo#Collection.Distinct>`__
       | :ref:`Distinct Values Guide <golang-retrieve-distinct>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             var results []string
             err = coll.Distinct(context.TODO(), "firstName", bson.D{}).Decode(&results)

          .. output::
             :language: go
             :visible: false 
             
             [Mike Xiao Sandy ...]

   * - | **Limit the Number of Documents Retrieved**
       |
       | `API Documentation <{+api+}/mongo/options#FindOptionsBuilder.SetLimit>`__
       | :ref:`Limit Documents Reference <golang-limit>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             cursor, err := coll.Find(context.TODO(), bson.D{}, options.Find().SetLimit(2))

          .. output::
             :language: go
             :visible: false 

             [{firstName Xiao} ... ]
             [{firstName Oleg} ...]

   * - | **Skip Retrieved Documents**
       |
       | `API Documentation <{+api+}/mongo/options#FindOptionsBuilder.SetSkip>`__
       | :ref:`Skip Documents Reference <golang-skip>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go
             
             // the collection has 6 documents
             cursor, err := coll.Find(context.TODO(), bson.D{}, options.Find().SetSkip(4))

          .. output::
             :language: go
             :visible: false 

             [{firstName Sandy} ... ]
             [{firstName Michael} ...]

   * - | **Sort Retrieved Documents**
       |
       | `API Documentation <{+api+}/mongo/options#FindOptionsBuilder.SetSort>`__
       | :ref:`Sort Documents Reference <golang-sort-results>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             cursor, err := coll.Find(context.TODO(), bson.D{}, options.Find().SetSort(bson.D{{"age", 1}}))

          .. output::
             :language: go
             :visible: false 

             [{firstName Dev} {age 5} ... ]
             [{firstName Jose} {age 7} ... ]
             [{firstName Om} {age 8} ... ]

   * - | **Project Document Fields in Results**
       |
       | `API Documentation <{+api+}/mongo/options#FindOptionsBuilder.SetProjection>`__
       | :ref:`Projection Guide <golang-project>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             cursor, err := coll.Find(
                 context.TODO(), 
                 bson.D{},
                 options.Find().SetProjection(
                     bson.D{{"age", 0}, {"_id",0}}
                 )
             )

          .. output::
             :language: go
             :visible: false 

             [{firstName Lester} {lastName Franklin}]
             [{firstName Wendall} {lastName Griffin}]
             ...

   * - | **Create an Index**
       |
       | `API Documentation <{+api+}/mongo#IndexView.CreateOne>`__
       | :ref:`Indexes Guide <golang-indexes>`

     - .. code-block:: go
          :copyable: true

          model := mongo.IndexModel{Keys: bson.D{{"firstName", 1}, {"lastName", -1}}}
          name, err := coll.Indexes().CreateOne(context.TODO(), model)

   * - | **Search Text**
       |
       | `API Documentation <{+api+}/mongo#Collection.Find>`__
       | :ref:`Search Text Guide <golang-search-text>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: go

             // Only searches on fields covered by text indexes
             cursor, err := coll.Find(context.TODO(), bson.D{{"$text", bson.D{{"$search", "arts"}}}})

          .. output::
             :language: go
             :visible: false 

             [{"firstName": "Emily" , "biography": "I am involved with arts and culture in my community."} ... ]
             [{"firstName": "Juan" , "biography": "I attended the School of Arts for cello performance."} ... ]
