stepnum: 1
title: "Register for an |service| account or log in."
ref: register-or-log-in-ak8so
content: |
  
  :ref:`atlas-register-account` or :ref:`atlas-account-login`.

---

stepnum: 2
title: "Create API keys for your organization."
ref: create-api-keys-ak8so
content: |

  .. note::
  
     You need the following public API key, private API key, and the 
     organization ID information to configure |ak8so| access to 
     |service|.

  :ref:`create-org-api-key` and configure the :guilabel:`API 
  Access List`.

  .. include:: /includes/fact-ak8so-api-key-permission.rst

---

stepnum: 3
title: "Deploy |ak8so|."
ref: deploy-ak8so
content: |

  In one of the following scenarios, replace ``<version>`` with the 
  latest :ref:`release number <ak8so-changelog>`:
  
  - If you want |ak8so| to watch all the |k8s-nss| in the |k8s| 
    cluster, run the following command:

    .. code-block:: sh

       kubectl apply -f https://raw.githubusercontent.com/mongodb/mongodb-atlas-kubernetes/<version>/deploy/all-in-one.yaml
  
  - If you want |ak8so| to watch only its |k8s-ns|, you must install 
    the configuration files from the ``deploy/namespaced`` directory:

    .. code-block:: sh

       kubectl apply -f https://raw.githubusercontent.com/mongodb/mongodb-atlas-kubernetes/<version>/deploy/namespaced/crds.yaml

    .. code-block:: sh

       kubectl apply -f https://raw.githubusercontent.com/mongodb/mongodb-atlas-kubernetes/<version>/deploy/namespaced/namespaced-config.yaml

---

stepnum: 4
title: "Create a secret with your API keys and organization ID."
ref: create-ak8so-api-key-secret
content: |

  To create and label a |k8s-secret|, run the following commands with 
  your API keys and organization ID:
  
  .. code-block:: sh

     kubectl create secret generic mongodb-atlas-operator-api-key \
         --from-literal="orgId=<atlas_organization_id>" \
         --from-literal="publicApiKey=<atlas_api_public_key>" \
         --from-literal="privateApiKey=<atlas_api_private_key>" \
         -n mongodb-atlas-system

  .. code-block:: sh

     kubectl label secret mongodb-atlas-operator-api-key atlas.mongodb.com/type=credentials -n mongodb-atlas-system

  .. include:: /includes/fact-use-secret-storage.rst

---

stepnum: 5
title: "Create the ``AtlasProject`` custom resource."
ref: create-atlasproject
content: |

  Run the following command to create the 
  :ref:`atlasproject-custom-resource`:
  
  .. note::

     The following example does not specify 
     :setting:`spec.connectionSecretRef.name`. If unspecified, |ak8so| 
     uses the default connection |k8s-secret| previously set with your 
     API keys and organization ID.
    
    Deploy the |ak8so| custom resource.
  
  .. code-block:: sh

     cat <<EOF | kubectl apply -f -
     apiVersion: atlas.mongodb.com/v1
     kind: AtlasProject
     metadata:
       name: my-project
       labels:
         app.kubernetes.io/version: 1.6.0
     spec:
       name: Test Atlas Operator Project
       projectIpAccessList:
         - ipAddress: <your-ip-address-range>
           comment: "Adding your IP to Atlas access list"
     EOF
---     
stepnum: 6
title: "Create the ``AtlasDeployment`` custom resource."
ref: create-atlasdeployment
content: |

  Run the following command to create an 
  :ref:`atlasdeployment-custom-resource` and create a {+cluster+}:
  
  .. code-block:: sh

     cat <<EOF | kubectl apply -f -
     apiVersion: atlas.mongodb.com/v1
     kind: AtlasDeployment
     metadata:
       name: my-atlas-cluster
       labels:
         app.kubernetes.io/version: 1.6.0
     spec:
       projectRef:
         name: my-project
       deploymentSpec:
         clusterType: REPLICASET
         name: "Test-cluster"
         tags: 
          - key: "environment",
            value: "production"
         providerSettings:
           instanceSizeName: M10
           providerName: AWS
           regionName: US_EAST_1
     EOF

  To create a {+serverless-instance+}, see the
  :ref:`{+serverless-instance+} example <ak8so-serverless-instance>`.

---     
stepnum: 7
title: "Create a secret with a password to log into the |service| cluster database."
ref: create-ak8so-password-secret
content: |

  Replace ``P@@ssword%`` with your password and run the following 
  commands:
  
  .. code-block:: sh

     kubectl create secret generic the-user-password --from-literal="password=P@@sword%"

  .. code-block:: sh

     kubectl label secret the-user-password atlas.mongodb.com/type=credentials

  .. include:: /includes/fact-use-secret-storage.rst
     
---

stepnum: 8
title: "Create the ``AtlasDatabaseUser`` custom resource."
ref: create-atlasdatabaseuser
content: |

  Run the following command to create the 
  :ref:`atlasdatabaseuser-custom-resource`:
  
  .. note::

     :setting:`spec.passwordSecretRef` must reference the password that 
     you created previously.
  
  .. code-block:: sh

     cat <<EOF | kubectl apply -f -
     apiVersion: atlas.mongodb.com/v1
     kind: AtlasDatabaseUser
     metadata:
       name: my-database-user
       labels:
         app.kubernetes.io/version: 1.6.0
     spec:
       roles:
         - roleName: "readWriteAnyDatabase"
           databaseName: "admin"
       projectRef:
         name: my-project
       username: theuser
       passwordSecretRef:
         name: the-user-password
     EOF

---
stepnum: 9
title: "Check the status of your database user."
ref: check-database-user-status
content: |

  Run the following command until you recieve a ``True`` response, 
  which indicates the database user is ready:
  
  .. note::

     The :ref:`atlasdatabaseuser-custom-resource` waits until the 
     cluster is ready. Creating a new cluster can take up to 10 minutes.
  
  .. code-block:: sh

     kubectl get atlasdatabaseusers my-database-user -o=jsonpath='{.status.conditions[?(@.type=="Ready")].status}'

---
stepnum: 10
title: "Retrieve the secret that |ak8so| created to connect to the cluster."
ref: retrieve-ak8so-secret
content: |

  a. Copy the following command:
  
     .. important::
     
        The following command requires ``jq`` 1.6 or higher.
  
     .. code-block:: sh

        kubectl get secret {my-project}-{my-atlas-cluster}-{my-database-user} -o json | jq -r '.data | with_entries(.value |= @base64d)';

  #. Replace the following placeholders with the details for your 
     custom resources:

     .. list-table::
        :widths: 20 80

        * - ``my-project``
          - Specify the value of the ``metadata`` field of your  
            :ref:`atlasproject-custom-resource`.

        * - ``my-atlas-cluster``
          - Specify the value of the ``metadata`` field of your 
            :ref:`atlasdeployment-custom-resource`.

        * - ``my-database-user``
          - Specify the value of the ``metadata`` field of your 
            :ref:`atlasdatabaseuser-custom-resource`.

  #. Run the command.

     .. note::
     
        Your connection strings will differ from the following example.

     .. code-block:: sh

        {
           "connectionStringStandard": "mongodb://theuser:P%40%40sword%25@test-cluster-shard-00-00.peqtm.mongodb.net:27017,test-cluster-shard-00-01.peqtm.mongodb.net:27017,test-cluster-shard-00-02.peqtm.mongodb.net:27017/?ssl=true&authSource=admin&replicaSet=atlas-pk82fl-shard-0",
           "connectionStringStandardSrv": "mongodb+srv://theuser:P%40%40sword%25@test-cluster.peqtm.mongodb.net",
           "password": "P@@sword%",
           "username": "theuser"
         }

     You can use this |k8s-secret| in your application:

     .. code-block:: sh

        containers:
         - name: test-app
           env:
            - name: "CONNECTION_STRING"
              valueFrom:
                secretKeyRef:
                  name: test-atlas-operator-project-test-cluster-theuser
                  key: connectionStringStandardSrv

...