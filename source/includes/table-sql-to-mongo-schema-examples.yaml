# table structure. all content symbolic.
section: layout
header: [ meta.header1, meta.header2 ]
rows:
  - 1: [ content.sql1, content.mongo1 ]
  - 2: [ content.sql2, content.mongo2 ]
  - 3: [ content.sql3, content.mongo3 ]
  - 4: [ content.sql4, content.mongo4 ]
  - 5: [ content.sql5, content.mongo5 ]
  - 6: [ content.sql6, content.mongo6 ]
---
# table metadata, as meta.<key>
section: meta
header1: "SQL Schema Statements"
header2: "MongoDB Schema Statements"
header3: "Reference"
---
# table content, as content.<key>
section: content
sql1: |
      .. code-block:: sql

         CREATE TABLE people (
             id MEDIUMINT NOT NULL
                 AUTO_INCREMENT,
             user_id Varchar(30),
             age Number,
             status char(1),
             PRIMARY KEY (id)
         )
mongo1: |
  Implicitly created on first :method:`~db.collection.insertOne()` or
  :method:`~db.collection.insertMany()` operation. The primary key
  ``_id`` is automatically added if ``_id`` field is not specified.

  .. code-block:: javascript
     :emphasize-lines: 1-5

     db.people.insertOne( {
         user_id: "abc123",
         age: 55,
         status: "A"
      } )

  However, you can also explicitly create a collection:

  .. code-block:: javascript
     :emphasize-lines: 1

     db.createCollection("people")
ref1: |
      See
      :method:`~db.collection.insertOne()`,
      :method:`~db.collection.insertMany()`, and
      :method:`db.createCollection()` for more information.
sql2: |
      .. code-block:: sql

         ALTER TABLE people
         ADD join_date DATETIME
mongo2: |
  Collections do not describe or enforce the structure of its
  documents; i.e. there is no structural alteration at the
  collection level.

  However, at the document level, :method:`~db.collection.updateMany()`
  operations can add fields to existing documents using the
  :update:`$set` operator.


  .. code-block:: javascript
     :emphasize-lines: 1-4

     db.people.updateMany(
         { },
         { $set: { join_date: new Date() } }
     )
ref2: |
  See the :doc:`/core/data-models`,
  :method:`~db.collection.updateMany()`, and :update:`$set` for more
  information on changing the structure of documents in a collection.

sql3: |
  .. code-block:: sql

     ALTER TABLE people
     DROP COLUMN join_date
mongo3: |
  Collections do not describe or enforce the structure of its
  documents; i.e. there is no structural alteration at the collection
  level.

  However, at the document level, :method:`~db.collection.updateMany()`
  operations can remove fields from documents using the
  :update:`$unset` operator.

  .. code-block:: javascript
     :emphasize-lines: 1-4

     db.people.updateMany(
         { },
         { $unset: { "join_date": "" } }
     )
ref3: |

  See :doc:`/core/data-models`, :method:`~db.collection.updateMany()`,
  and :update:`$unset` for more information on changing the structure of
  documents in a collection.


sql4: |
      .. code-block:: sql

         CREATE INDEX idx_user_id_asc
         ON people(user_id)
mongo4: |
        .. code-block:: javascript
           :emphasize-lines: 1

           db.people.createIndex( { user_id: 1 } )
ref4: |
      See :method:`~db.collection.createIndex()`
      and :doc:`indexes </core/indexes>` for more information.
sql5: |
      .. code-block:: sql

         CREATE INDEX
                idx_user_id_asc_age_desc
         ON people(user_id, age DESC)
mongo5: |
        .. code-block:: javascript
           :emphasize-lines: 1

           db.people.createIndex( { user_id: 1, age: -1 } )
sql6: |
      .. code-block:: sql

         DROP TABLE people
mongo6: |
        .. code-block:: javascript
           :emphasize-lines: 1

           db.people.drop()
ref6: |
      See :method:`~db.collection.drop()` for
      more information.
...
