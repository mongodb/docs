==============================
Isolate Sequence of Operations
==============================

.. default-domain:: mongodb

Overview
--------

Write operations are atomic on the level of a single document: no
single write operation can atomically affect more than one document or
more than one collection.

When a single write operation modifies multiple documents, the
operation as a whole is not atomic, and other operations may
interleave. The modification of a single document is always atomic, even if
the write operation modifies multiple sub-documents *within* the single record.

No other operations are atomic. However, you can *isolate* a
single write operation that affects multiple documents using the
:doc:`isolation operator </reference/operator/update/isolated>`. Using this
operator, you can update a set of documents without allowing other processes
to update in between your writes.

It is important to understand that this is *not* true atomicity, because a
failed write will not roll back the preceding writes. Additionally, this
operator does *not* work on sharded clusters.

Approaches
----------

``findAndModify()``
~~~~~~~~~~~~~~~~~~~

The :method:`~db.collection.findAndModify()` method provides an isolated
update-and-return operation. This allows you to update a document and get back
the updated state, without having to worry about another process having mutated
it.

Two Phase Commit
~~~~~~~~~~~~~~~~

:doc:`Two Phase Commit </tutorial/perform-two-phase-commits>` is a general
protocol for multi-document transactions that you may implement in your
application logic.

Unique Indexes
~~~~~~~~~~~~~~

Create a :ref:`unique index <index-type-unique>` to ensure that each document
has a distinct value for a specific field. In situations where you assign a
value that does not already exist in a collection, this prevents a second
process from assigning the same value elsewhere at the same time.

Update if Current
~~~~~~~~~~~~~~~~~

:doc:`Update if Current </tutorial/update-if-current>` is a pattern for
changing a document without potentially overwriting the changes of other
processes.
