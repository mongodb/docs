.. meta::
   :robots: noindex, nosnippet

.. _kotlin-supported-types:
.. _kotlin-additional-types:

============================
Supported Types - Kotlin SDK
============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page describes the supported data types that you can use to define
properties in your object model. For more information on how to define
your object model, refer to :ref:`Define an Object Model <kotlin-define-object-model>`.

.. include:: /includes/map-to-bson-type.rst

.. _kotlin-data-types:

Supported Data Types List
-------------------------

The Kotlin SDK supports the following `Kotlin types
<https://kotlinlang.org/docs/basic-types.html>`__,
`BSON <https://bsonspec.org/>`__ types, and
Realm-specific types, which you can use for unique
identifiers, timestamps, counters, and collections.

The Kotlin SDK does *not* natively support:

- user-defined enumeration properties. Refer to the :ref:`Enums <kotlin-enums>`
  section for more information on how to use enums in your Realm objects.
- Kotlin's built-in ``Date`` or ``Instant``. Refer to the
  :ref:`RealmInstant <kotlin-timestamps>` section for more information on
  how to use timestamps in your Realm objects.


.. _kotlin-optional:

Realm object properties *must* be mutable and initialized when declared.
The Kotlin SDK does not currently support abstract properties. You
can declare properties optional (nullable) using the built-in
``?`` Kotlin operator, or you can assign a default value to a property
when you declare it.

.. note::

   Realm stores all non-decimal numeric types as ``Long``
   values and all decimal numeric types as ``Double`` values.

.. _kotlin-types-table:

**Kotlin Data Types**

The following table lists the supported Kotlin data types and examples of
how to declare them as required or optional properties in your object model.

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 20 40 40

   * - Kotlin Data Type
     - Required
     - Optional

   * - ``String``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.string-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.string-optional.kt
         :language: kotlin

   * - ``Byte``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.byte-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.byte-optional.kt
         :language: kotlin

   * - ``Short``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.short-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.short-optional.kt
         :language: kotlin

   * - ``Int``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.int-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.int-optional.kt
         :language: kotlin

   * - ``Long``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.long-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.long-optional.kt
         :language: kotlin

   * - ``Float``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.float-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.float-optional.kt
         :language: kotlin

   * - ``Double``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.double-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.double-optional.kt
         :language: kotlin

   * - ``Boolean``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.bool-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.bool-optional.kt
         :language: kotlin

   * - ``Char``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.char-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.char-optional.kt
         :language: kotlin

.. _kotlin-bson-types-table:

**MongoDB BSON Types**

The following table lists the supported MongoDB BSON data types and examples
of how to declare them as required or optional properties in your object model.
To use these types, you must import them from the
:github:`org.mongodb.kbson <mongodb/kbson>` package.

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 20 40 40

   * - MongoDB BSON Type
     - Required
     - Optional

   * - :ref:`ObjectId <kotlin-objectid>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.objectId-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.objectId-optional.kt
         :language: kotlin

   * - ``Decimal128``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.decimal128-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.decimal128-optional.kt
         :language: kotlin

.. _kotlin-realm-specific-types-table:

**Realm-Specific Types**

The following table lists the supported Realm-specific data types and
examples of how to declare them as required or optional properties in
your object model.

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 20 40 40

   * - Realm-Specific Type
     - Required
     - Optional

   * - :ref:`RealmUUID <kotlin-uuid>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.uuid-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.uuid-optional.kt
         :language: kotlin

   * - :ref:`RealmInstant <kotlin-timestamps>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.realmInstant-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.realmInstant-optional.kt
         :language: kotlin

   * - :ref:`RealmAny <kotlin-realmany>`
     -       N/A
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.realmAny-optional.kt
         :language: kotlin

   * - :ref:`MutableRealmInt <kotlin-mutablerealmint>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.mutableRealmInt-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.mutableRealmInt-optional.kt
         :language: kotlin

   * - :ref:`RealmList <kotlin-realm-list>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.list-required.kt
         :language: kotlin
     -       N/A

   * - :ref:`RealmSet <kotlin-realm-set>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.set-required.kt
         :language: kotlin
     -       N/A

   * - :ref:`RealmDictionary <kotlin-realm-dictionary>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.dictionary-required.kt
         :language: kotlin
     -       N/A

   * - :ref:`RealmObject <kotlin-realm-objects-as-properties>`
     -       N/A
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.realm-object-optional.kt
         :language: kotlin

   * - :ref:`EmbeddedRealmObject <kotlin-embedded-objects-as-properties>`
     -       N/A
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.embedded-object-optional.kt
         :language: kotlin

Unique Identifiers
------------------

The Kotlin SDK supports :wikipedia:`UUID <Universally_unique_identifier>`
and ``ObjectId`` as unique identifiers for Realm objects.

.. include:: /includes/note-using-uuid-instead-of-objectid.rst

.. _kotlin-objectid:

ObjectId
~~~~~~~~

``ObjectId`` is a MongoDB-specific BSON type. It is a
12-byte, globally unique value that you can use as an identifier for objects.
It is nullable, :ref:`indexable <kotlin-indices>`, and can
be used as a :ref:`primary key <kotlin-primary-keys>`.

You can initialize an ``ObjectId`` using ``ObjectId()``.

.. important:: io.realm.kotlin.types.ObjectId Deprecated in v1.5.0

   In Realm Kotlin SDK version 1.5.0 and newer,
   `io.realm.kotlin.types.ObjectId
   <{+kotlin-local-prefix+}io.realm.kotlin.types/-object-id/index.html>`__
   is deprecated. You must import ``ObjectId`` from
   :github:`org.mongodb.kbson.ObjectId <mongodb/kbson>` instead.

.. _kotlin-uuid:

RealmUUID
~~~~~~~~~

``UUID`` (Universal Unique Identifier) is a 16-byte unique value
that you can use as an identifier for objects. It is nullable,
:ref:`indexable <kotlin-indices>`, and can be used as a :ref:`primary key <kotlin-primary-keys>`.

Realm creates UUIDs with the `RealmUUID
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-u-u-i-d/index.html>`__
type that conform to `RFC 4122 version 4 <https://www.rfc-editor.org/info/rfc4122>`_
and are created with random bytes.

You can generate a random ``RealmUUID`` using `RealmUUID.random()
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-u-u-i-d/-companion/random.html>`__
or pass a UUID-formatted string to `RealmUUID.from()
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-u-u-i-d/-companion/from.html>`__:

.. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.create-uuid.kt
   :language: kotlin

.. _kotlin-mutablerealmint:

MutableRealmInt (Counter)
-------------------------

The Kotlin SDK offers `MutableRealmInt
<{+kotlin-local-prefix+}io.realm.kotlin.types/-mutable-realm-int/index.html>`__
as a special integer type that you can use as a logical counter to accurately
synchronize numeric changes across multiple distributed clients.
It behaves like a ``Long`` but also supports ``increment`` and ``decrement``
methods that implement a
:wikipedia:`conflict-free replicated data type <Conflict-free_replicated_data_type>`.
This ensures that numeric updates can be executed regardless of order to
converge to the same value.

A ``MutableRealmInt`` property:

- *cannot* be used as a :ref:`primary key <kotlin-primary-keys>`
- *cannot* store null values, but it can be declared nullable
  (``MutableRealmInt?``)

Additionally, ``MutableRealmInt`` fields:

- are backed by Kotlin's
  `numeric types <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/>`__,
  so no migration is required when changing a numeric field to ``MutableRealmInt``.
- can use operators and infix functions similar to those provided by ``Long``.
  However, note that any operations *other than* ``set``, ``increment``, and
  ``decrement`` do not mutate the instance on which they are executed. Instead,
  they create a new, unmanaged ``MutableRealmInt`` instance with the updated
  value.

Learn how to :ref:`<kotlin-create-mutablerealmint>` and
:ref:`<kotlin-update-mutablerealm>`.

.. _kotlin-timestamps:

RealmInstant (Timestamp)
------------------------

You cannot store Kotlin's built-in ``Date`` or ``Instant`` types in Realm.

Instead, the Kotlin SDK uses the `RealmInstant
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-instant/index.html>`__
type to store time information as a :wikipedia:`Unix epoch <Unix_time>`
timestamp.

If you need timestamp data in a form other than ``RealmInstant``, you
can add conversion code to your model class based on the following
example:

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.timestamp-workaround.kt
   :language: kotlin

.. _kotlin-realmany:

RealmAny (Mixed)
----------------

.. versionchanged:: 2.0.0

  ``RealmAny`` can hold lists and dictionaries of mixed data.

`RealmAny <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-any/index.html>`__
represents a non-nullable mixed data type. It behaves like the value type
that it contains. ``RealmAny`` can hold:

- :ref:`supported Kotlin data types <kotlin-types-table>` (note that
  ``Byte``, ``Char``, ``Int``, ``Long``, and ``Short`` values are converted
  internally to ``int64_t`` values)
- :ref:`supported BSON types <kotlin-bson-types-table>`
- ``RealmList`` and ``RealmDictionary`` collections of mixed data
- the following Realm-specific types:

  - RealmInstant
  - RealmUUID
  - RealmObject (holds a reference to the object, not a copy of it)

``RealmAny`` *cannot* hold ``EmbeddedRealmObject`` types, ``RealmSet``, or
another ``RealmAny``.

``RealmAny`` properties:

- are :ref:`indexable <kotlin-indices>` but *cannot* be used as a
  :ref:`primary key <kotlin-primary-keys>`
- must be declared nullable (``RealmAny?``), but they *cannot* store null values
- can be :ref:`aggregated <kotlin-aggregate-results>` with
  `RealmQuery.max <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/max.html>`__,
  `RealmQuery.min <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/min.html>`__,
  and
  `RealmQuery.sum <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/sum.html>`__.
- can be :ref:`sorted <kotlin-sort-queries>`. Sort order from highest to lowest:

  #. ``Boolean``
  #. ``Byte``, ``Double``, ``Decimal128``, ``Int``, ``Float``, ``Long``, ``Short``
  #. ``byte[]``, ``String``
  #. ``Date``
  #. ``ObjectId``
  #. ``UUID``
  #. ``RealmObject``

You can store multiple ``RealmAny`` instances in ``RealmList``,
``RealmDictionary``, or ``RealmSet`` fields.

.. tip:: Handle Polymorphism with Conditional Expressions

   Because you must know the stored type to extract its value, we
   recommend using a ``when`` expression to handle the
   ``RealmAny`` type and its possible inner value class.

.. _kotlin-nested-collections-realmany:

Collections as Mixed
~~~~~~~~~~~~~~~~~~~~

In version 2.0.0 and later, a ``RealmAny`` data type can
hold collections (a list or dictionary, but *not* a set) of ``RealmAny``
elements. You can use mixed collections to
model unstructured or variable data. For more information, refer to
:ref:`<kotlin-model-unstructured-data>`.

- You can nest mixed collections up to 100 levels.
- You can query mixed collection properties and
  :ref:`register a listener for changes <kotlin-realm-list-change-listener>`,
  as you would a normal collection.
- You can find and update individual mixed collection elements
- You *cannot* store sets or embedded objects in mixed collections.

To use mixed collections in your app, define the mixed type
property in your data model the same way you would any other ``RealmAny`` type.
Then, create the list or dictionary collections using ``RealmAny.create()``.

.. _kotlin-collection-types:

Collection Types
----------------

The Kotlin SDK offers several collection types that you can use as
properties in your data model. A collection is an object
that contains zero or more instances of one supported data type.
Realm collections are homogenous (all objects in a collection are of the
same type) and are backed by their corresponding built-in Kotlin classes.

Collection types are non-null. When you define a collection property, you must
initialize it.
For more information, refer to :ref:`Create a Collection <kotlin-create-a-collection>`.

.. _kotlin-realm-list:

RealmList
~~~~~~~~~

The `RealmList <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-list/index.html>`__
type implements Kotlin's
`List <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/>`__
interface. :ref:`Unmanaged <kotlin-managed-vs-unmanaged-objects>` lists
behave like Kotlin's `MutableList
<https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/>`__.

A ``RealmList`` represents a :ref:`to-many relationship <kotlin-to-many-relationship>`
containing:

- any of the :ref:`supported Kotlin data types <kotlin-types-table>`
- any of the :ref:`supported BSON types <kotlin-bson-types-table>`
- a `RealmObject
  <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__
- an `EmbeddedRealmObject
  <{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__

``RealmList<E>`` is a non-null type, where:

- lists of ``RealmObject`` or ``EmbeddedRealmObject`` elements *cannot*
  be nullable
- lists of any other supported elements can be nullable (``RealmList<E?>``)

.. _kotlin-realm-set:

RealmSet
~~~~~~~~

The `RealmSet
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html>`__
type implements Kotlin's
`Set <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/>`__
interface. :ref:`Unmanaged <kotlin-managed-vs-unmanaged-objects>` sets behave
like Kotlin's `MutableSet
<https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-set/>`__.

A ``RealmSet`` represents a :ref:`to-many relationship <kotlin-to-many-relationship>`
containing distinct values of:

- any of the :ref:`supported Kotlin data types <kotlin-types-table>`
- any of the :ref:`supported BSON types <kotlin-bson-types-table>`
- a `RealmObject
  <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__

You cannot use ``EmbeddedRealmObject`` elements in a ``RealmSet``.

``RealmSet<E>`` is a non-null type, where:

- sets of ``RealmObject`` elements *cannot* be nullable
- sets of any other supported elements can be nullable (``RealmSet<E?>``)

.. _kotlin-realm-dictionary:

RealmMap/RealmDictionary
~~~~~~~~~~~~~~~~~~~~~~~~

The `RealmMap <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-map/index.html>`__
type implements Kotlin's `Map
<https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/>`__
interface and is an associative array that contains key-value ``String`` pairs
with unique keys.
`RealmDictionary
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-dictionary/index.html>`__
is a specialized ``RealmMap`` that accepts a ``String`` key and non-string values.
:ref:`Unmanaged <kotlin-managed-vs-unmanaged-objects>` dictionaries behave
like Kotlin's `LinkedHashMap
<https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-linked-hash-map/>`__.

``RealmDictionary`` values can be:

- any of the :ref:`supported Kotlin data types <kotlin-types-table>`
- any of the :ref:`supported BSON types <kotlin-bson-types-table>`
- a `RealmObject <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__
- an `EmbeddedRealmObject
  <{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__

``RealmDictionary<K, V>`` is a non-null type, where:

- keys must be strings
- ``RealmObject`` or ``EmbeddedRealmObject`` values *must* be nullable
  (``RealmDictionary<K, V?>``)
- any other supported element values can be nullable

.. _kotlin-realm-objects-as-properties:

RealmObjects as Properties
--------------------------

You can use ``RealmObject`` and any subclasses, *except*
``AsymmetricRealmObject`` as properties in your object model.

.. important::

    ``AsymmetricRealmObject`` *cannot* be used as properties.
    For more information, refer to :ref:`Asymmetric Objects
    <kotlin-asymmetric-objects>`.

RealmObjects
~~~~~~~~~~~~

A `RealmObject
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__
type represents a custom object that you can use as a property.

``RealmObject`` properties:

- must be declared nullable
- can be used as elements in collections
- can be held as a ``RealmAny`` value
- *cannot* be used as a :ref:`primary key <kotlin-primary-keys>`

You can also reference one or more Realm objects from another through
to-one and to-many relationships.
For more information, refer to the :ref:`Relationships <kotlin-relationships>`
page.

Backlinks
~~~~~~~~~

A backlink represents an inverse, to-many relationship between a
``RealmObject`` and one or more ``RealmObject`` or between a ``RealmObject``
and an ``EmbeddedRealmObject``. Backlinks cannot be null.

Backlinks implement:

- the `BacklinksDelegate
  <{+kotlin-local-prefix+}io.realm.kotlin.types/-backlinks-delegate/index.html>`__
  type for ``RealmObject`` backlinks
- the `EmbeddedBacklinksDelegate
  <{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-backlinks-delegate/index.html>`__
  type for ``EmbeddedRealmObject`` backlinks

For more information, refer to :ref:`Inverse Relationships
<kotlin-inverse-relationships>`.

.. _kotlin-embedded-objects-as-properties:

EmbeddedRealmObject
~~~~~~~~~~~~~~~~~~~

An `EmbeddedRealmObject
<{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__
is a special type of ``RealmObject``.

``EmbeddedRealmObject`` properties:

- must be nullable objects within the parent object
- must be nullable values within a dictionary
- *cannot* be nullable elements within a list
- *cannot* be used as a :ref:`primary key <kotlin-primary-keys>`
- can be properties within an asymmetric object

For more information, refer to :ref:`Embedded Objects <kotlin-embedded-objects>`.

Geospatial Types
----------------

.. versionadded:: 1.11.0


The Kotlin SDK supports geospatial queries using the following data types:

- `GeoPoint <{+kotlin-local-prefix+}io.realm.kotlin.types.geo/-geo-point/index.html>`__
- `GeoCircle <{+kotlin-local-prefix+}io.realm.kotlin.types.geo/-geo-circle/index.html>`__
- `GeoBox <{+kotlin-local-prefix+}io.realm.kotlin.types.geo/-geo-box/index.html>`__
- `GeoPolygon <{+kotlin-local-prefix+}io.realm.kotlin.types.geo/-geo-polygon/index.html>`__

.. important:: Cannot Persist Geospatial Data Types

   Currently, geospatial data types *cannot* be persisted. For example, you can't
   declare a property that is of type ``GeoBox``.

   These types can only be used as arguments for geospatial queries.

For more information on querying with geospatial data, refer to
:ref:`Geospatial Data <kotlin-geospatial>`.

.. _kotlin-enums:

Enums
-----

The Kotlin SDK does not natively support enumerations, or enums. To use
enums in a Realm object class, define a field with a type matching the
underlying data type of your enum.

Then, create getters and setters for the field that convert the field
value between the underlying value and the enum type.

.. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.enum-workaround.kt
   :language: kotlin
