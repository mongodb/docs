.. _users:
.. _authentication-client-users:

=================================
Users in Self-Managed Deployments
=================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol
   
To authenticate a client in MongoDB, you must add a corresponding user
to MongoDB.

User Management
---------------

You can add a user with the :method:`db.createUser()` method using
:binary:`~bin.mongosh`. The first user you create must have privileges
to create other users. The :authrole:`userAdmin` or
:authrole:`userAdminAnyDatabase` role both confer the privilege to
create other users.

.. seealso::

   :doc:`/tutorial/create-users`

You can grant a user privileges by assigning :doc:`roles
</core/authorization>` to the user when you create the user. You can
also grant or revoke roles, as well as update passwords, by updating
existing users. For a full list of user management methods, see
:ref:`user-management-methods`.

.. seealso::

   :doc:`/tutorial/manage-users-and-roles`

A user is uniquely identified by the user's name and associated
:ref:`authentication database <authentication-database>`. MongoDB
associates a user with a unique ``userId`` upon creation in MongoDB.

LDAP Managed Users
~~~~~~~~~~~~~~~~~~

:ref:`LDAP managed users <security-ldap>` created on an LDAP
server do not have an associated document in the :doc:`system.users
</reference/system-users-collection>` collection, and therefore don't
have a :data:`~admin.system.users.userId` field associated with them.


.. _authentication-database:
.. _user-authentication-database:

Authentication Database
-----------------------

When you add a user, you create the user in a specific database. The
database you create the user in is the authentication database for the
user.

However, a user's privileges are not limited to their authentication
database. Therefore, a user can have privileges across different
databases. For more information on roles, see
:doc:`/core/authorization`.

A user's name and authentication database serve as a unique identifier
for that user. MongoDB associates a user with a unique ``userId`` upon
creation in MongoDB. However, :ref:`LDAP managed users <security-ldap>`
created on an LDAP server do not have an associated document in the
:ref:`system.users <system-users>` collection, and
therefore don't have a :data:`~admin.system.users.userId` field
associated with them.

If two users have the same name but are created in different databases,
they are two separate users. If you want to have a single user with
permissions on multiple databases, create a single user with a role for
each applicable database.

Centralized User Data
---------------------

For users created in MongoDB, MongoDB stores all user information,
including :data:`name <admin.system.users.user>`, :data:`password
<admin.system.users.credentials>`, and the user's :data:`authentication
database <admin.system.users.db>`, in the :doc:`system.users
</reference/system-users-collection>` collection in the ``admin``
database.

Do not modify this collection directly. To manage users, use the
designated :ref:`user management commands <user-management-commands>`.

.. _sharding-localhost:
.. _sharding-security:

Sharded Cluster Users
---------------------

To create users for a sharded cluster, connect to a
:binary:`~bin.mongos` instance and add the users. To authenticate as a
user created on a :binary:`~bin.mongos` instance, you must authenticate
through a :binary:`~bin.mongos` instance.

In sharded clusters, MongoDB stores user configuration data in the
``admin`` database of the :term:`config servers <config server>`.

.. _shard-local-users:

Shard Local Users
~~~~~~~~~~~~~~~~~

Some maintenance operations, such as :dbcommand:`compact` or 
:method:`rs.reconfig()`, require direct connections to specific shards in a 
sharded cluster. To perform these operations, you must connect directly to the 
shard and authenticate as a *shard local* administrative user.

To create a *shard local* administrative user, connect directly to the
primary of the shard and create the user. For instructions on how to
create a shard local user administrator see the
:doc:`/tutorial/deploy-sharded-cluster-with-keyfile-access-control`
tutorial.

MongoDB stores *shard local* users in the ``admin`` database of the
shard itself. These *shard local* users are independent from
the users added to the sharded cluster through a :binary:`~bin.mongos`.
*Shard local* users are local to the shard and are inaccessible by
:binary:`~bin.mongos`.

.. include:: /includes/dSO-role-intro.rst

Direct connections to a shard should only be used for shard-specific
maintenance and configuration. In general, clients should connect to the sharded 
cluster through the :binary:`~bin.mongos`.

.. include:: /includes/dSO-warning.rst

.. toctree::
   :titlesonly:
   :hidden:

   Create </tutorial/create-users>
   Authenticate </tutorial/authenticate-a-user>
   List </tutorial/list-users>
