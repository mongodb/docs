.. index:: connections

===========
Connections
===========

.. default-domain:: mongodb

This document describes the URI :ref:`format
<connections-standard-connection-string-format>` and :ref:`options
<connections-connection-options>` for creating a connection to a MongoDB
database server.

When you connect to a MongoDB database server, MongoDB creates a
connection object that is instantiated once and then reused for every
operation during the lifetime of the connection. The connection object
uses the connection options you specify when creating the connection.
MongoDB's reuse of the connection object saves on the costs of setup and
teardown on connections.

You connect to a MongoDB database server by starting a :program:`mongod`
instance through a MongoDB :doc:`driver </applications/drivers>` or
through the :program:`mongo` shell.

Upon connection to the server, :program:`mongod` displays logging
information and then displays that it is waiting for a client
connections, as shown in the following example.

.. code-block:: sh

   Wed Nov 21 12:56:58 [websvr] admin web console waiting for connections on port 28017
   Wed Nov 21 12:56:58 [initandlisten] waiting for connections on port 27017

By default, MongoDB waits for connections on port 27017. The
:program:`mongod` program runs in either the foreground or background.

.. note:: You *cannot* create a connection through HTTP on port 27017.
   Specifically, you *cannot* connect to MongoDB by going to
   ``http://localhost:27017`` in your web browser.

.. index:: connections; connection string format
.. _connections-standard-connection-string-format:

Standard Connection String Format
---------------------------------

This section describes the standard format of the MongoDB connection URI
used to connect to a MongoDB database server. The format is the same for
all official MongoDB drivers. For a list of drivers and links to driver
documentation, see :doc:`/applications/drivers`.

The following is the standard URI connection scheme:

.. code-block:: sh

   mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]

- ``mongodb:// `` is a required prefix to identify that this is a string
  in the standard connection format.

- ``username:password@`` are optional. If they are given,
  :program:`mongod` attempts to log in to a specific database after
  connecting to a database server.

- ``host1`` is the only required part of the URI. It identifies a server
  address to connect to. It identifies either a hostname, IP address, or
  UNIX domain socket.

- ``:port1`` is optional and defaults to ``:27017`` if not provided.

- ``hostX`` is optional. You can specify as many hosts as necessary. You
  would specify multiple hosts, for example, for connections to replica
  sets.

- ``:portX`` is optional and defaults to ``:27017`` if not provided.

- ``/database`` is the name of the database to log in to. This is
  relevant only if the ``username:password@`` syntax is used. If
  ``/database`` is not specified, the ``admin`` database is used by
  default.

- ``?options`` are connection options, as described in
  :ref:`connections-connection-options`.

  If the ``database`` string is absent you must still have a ``/``
  between the last ``hostN`` and the ``?`` introducing the options.

  Options are name=value pairs. The pairs are separated by "&". For
  backwards compatibility, ``;`` is accepted as a separator but should
  be considered as deprecated.

.. index:: connections; options
.. _connections-connection-options:

Connection Options
------------------

The connection options used in the
:ref:`connections-standard-connection-string-format` are listed in this
section. The options are not case-sensitive:

Replica Set Options
~~~~~~~~~~~~~~~~~~~

.. data:: replicaSet=<name>

   If the :program:`mongod` is a member of a :term:`replica set`, the
   name of the replica set.

Connection Options
~~~~~~~~~~~~~~~~~~

.. data:: ssl=<true,false,prefer>

   ``true``: Initiate the connection with SSL.

   ``false``: Initiate the connection without SSL.

   ``prefer``: Initiate the connection with SSL, but if that fails initiate without SSL.

   The default value is ``false``.

.. data:: connectTimeoutMS=<milliseconds>

   The time in milliseconds to attempt a connection before timing out.
   The default is never to timeout, though different drivers might vary.
   See the :doc:`/applications/drivers` documentation.

.. data:: socketTimeoutMS=<milliseconds>

   The time in milliseconds to attempt a send or receive on a socket
   before the attempt times out. The default is never to timeout, though
   different drivers might vary. See the :doc:`/applications/drivers`
   documentation.

Connection Pool Options
~~~~~~~~~~~~~~~~~~~~~~~

The server uses one thread per TCP connection, therefore it is highly
recommended that your application use some sort of connection pooling.
Most drivers handle this for you behind the scenes. Some drivers do not
support connection pools. See the :doc:`/applications/drivers`
documentation.

.. data:: maxPoolSize=<number>

   The maximum number of connections in the connection pool. The default
   value is ``100``.

.. data:: minPoolSize=<number>

   The minimum number of connections in the connection pool The default
   value is ``0``.

.. data:: maxIdleTimeMS=<milliseconds>

   The maximum number of milliseconds that a connection can remain idle
   in the pool before being removed and closed.

.. data:: waitQueueMultiple=<milliseconds>

   This is a multiplier number that is multiplied with the
   ``maxPoolSize`` setting to give the maximum number of threads allowed
   to wait for a connection to become available from the pool. For
   default values, see the :doc:`/applications/drivers` documentation.

.. data:: waitQueueTimeoutMS=<milliseconds>

   The maximum time in milliseconds that a thread is allowed to wait for
   a connection to become available. For
   default values, see the :doc:`/applications/drivers` documentation.

Write Concern Options
~~~~~~~~~~~~~~~~~~~~~

.. data:: fireAndForget=<true|false>

   ``false``: Sends a :dbcommand:`getLastError` command after
   every update to ensure that the update succeeded (see also ``w`` and
   ``wtimeoutMS``).

   ``true``: Does not send a :dbcommand:`getLastError` command after
   every update.

   Default value depends on the connection class. For the new
   MongoClient classes, the default is ``false``.

.. data:: w=<number or string>

   This option is used by the :dbcommand:`getLastError` command either
   to configure write concern on members of :term:`replica sets <replica
   set>` *or* to disable write concern entirely.

   ``0``: Disables write concern. If you disable write concern but
   enable the :dbcommand:`getLastError` command's journal option, the
   journal option prevails. Write concern is enabled with journaling.

   ``1``: Enables write concern on a standalone :program:`mongod` or the
    :term:`primary` in a replica set. *This is the default setting.*

   *A number greater than 1*: Confirms that write operations have
   replicated to the specified number of replica set members, including
   the primary. If you set ``w`` to a number that is greater than the
   number of set members that hold data, MongoDB waits for the
   non-existent members become available, which means MongoDB blocks
   indefinitely.

   ``majority``: Confirms that write operations have replicated to the
   majority of set members.

   ``-1``: Turns off reporting of network errors.
