====
$nor
====

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. query:: $nor

   :query:`$nor` performs a logical ``NOR`` operation on an array
   of one or more query expression and selects the documents that **fail**
   all the query expressions in the array. The :query:`$nor` has
   the following syntax:

   .. code-block:: javascript

      { $nor: [ { <expression1> }, { <expression2> }, ...  { <expressionN> } ] }

.. seealso::

   :method:`~db.collection.find()`, :method:`~db.collection.update()`,
   :query:`$or`, :update:`$set`, and :query:`$exists`.

Examples
--------

``$nor`` Query with Two Expressions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider the following query which uses only the :query:`$nor` operator:

.. code-block:: javascript

   db.inventory.find( { $nor: [ { price: 1.99 }, { sale: true } ]  } )

This query will return all documents that:

- contain the ``price`` field whose value is *not* equal to ``1.99``
  and contain the ``sale`` field whose value *is not* equal to
  ``true`` **or**

- contain the ``price`` field whose value is *not* equal to ``1.99``
  *but* do *not* contain the ``sale`` field **or**

- do *not* contain the ``price`` field *but* contain the ``sale``
  field whose value *is not* equal to ``true`` **or**
- do *not* contain the ``price`` field *and* do *not* contain the
  ``sale`` field

``$nor`` and Additional Comparisons
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider the following query:

.. code-block:: javascript

   db.inventory.find( { $nor: [ { price: 1.99 }, { qty: { $lt: 20 } }, { sale: true } ] } )

This query will select all documents in the ``inventory`` collection
where:

- the ``price`` field value does *not* equal ``1.99`` **and**
- the ``qty`` field value is *not* less than ``20`` **and**
- the ``sale`` field value is *not* equal to ``true``

including those documents that do not contain these field(s).

The exception in returning documents that do not contain the field
in the :query:`$nor` expression is when the :query:`$nor` operator is
used with the :query:`$exists` operator.

``$nor`` and ``$exists``
~~~~~~~~~~~~~~~~~~~~~~~~

Compare that with the following query which uses the
:query:`$nor` operator with the :query:`$exists` operator:

.. code-block:: javascript

   db.inventory.find( { $nor: [ { price: 1.99 }, { price: { $exists: false } },
                                { sale: true }, { sale: { $exists: false } } ] } )

This query will return all documents that:

- contain the ``price`` field whose value is *not* equal to ``1.99``
  and contain the ``sale`` field whose value *is not* equal to
  ``true``
