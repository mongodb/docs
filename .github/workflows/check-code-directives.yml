name: Check Code Example Directives

on:
  pull_request:
    paths:
      - "**/content/cluster-to-cluster-sync/**"
    branches:
      - main

env:
  CONTAINS_AUTOMATED_CONTENT: ""

jobs:
  search_code_directives:
    runs-on: ubuntu-latest
    steps:
      - name: Check out content from PR
        uses: actions/checkout@v3
        with:  
          fetch-depth: 0

      - name: Fetch base branch  
        run: git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1

      - name: Check PR body for automated content checkbox
        shell: bash {0}
        run: |
          # Get the PR body
          pr_body="${{ github.event.pull_request.body }}"
        
          # Define the checkbox item you're looking for
          checkbox_text="This PR contains automated content generated from external sources"
        
          # Check if the checkbox is present and is unchecked (i.e., it should be listed as '- [ ]' not '- [x]')  
          if echo "$pr_body" | grep -q "\- \[ \] $checkbox_text"; then
            echo "PR does not contain automatically generated content. Searching for deprecated code block directives."
            echo "CONTAINS_AUTOMATED_CONTENT=false" >> $GITHUB_ENV
          else
            echo "PR contains automated content. Skipping check for code-block and code directives."  
            echo "CONTAINS_AUTOMATED_CONTENT=true" >> $GITHUB_ENV
          fi

      - name: Search for deprecated directives
        shell: bash {0}
        if: ${{ env.CONTAINS_AUTOMATED_CONTENT == 'false' }}
        run: |

          errors=""

          diff_lines=$(git diff origin/${{ github.event.pull_request.base.ref }}...${{ github.sha }})

          current_filename=""
          code_block_counter=0
          code_counter=0

          # Process the captured diffs line by line
          while IFS= read -r line; do

            # Detect filename lines, which start with '+++ b/'
            if [[ "$line" =~ ^\+\+\+ ]]; then
              # Extract the current filename
              current_filename=$(echo "$line" | sed "s/^+++ b\///")

              # Check if the filename contains '/source/' and reset counters if true
              if [[ "$current_filename" == */source/* ]]; then
                # If the current file has counts from previous file, print the errors before resetting
                if [ "$current_filename" != "" ] && ([ $code_block_counter -gt 0 ] || [ $code_counter -gt 0 ]); then
                  errors="yes"
                  echo "'$current_filename' contains deprecated code block directives"
                  if [ $code_block_counter -gt 0 ]; then
                    echo "- the deprecated '.. code-block::' directive appears $code_block_counter times in this file"
                  fi
                  if [ $code_counter -gt 0 ]; then
                    echo "- the deprecated '.. code::' directive appears $code_counter times in this file"
                  fi
                fi
                # Reset counters
                code_block_counter=0
                code_counter=0
              else
                # Set filename empty to skip processing unrelated directories
                current_filename=""
              fi
            fi

            # When filename is valid and contains '/source/', check the diff changes
            if [[ "$current_filename" == */source/* ]] && [[ "$line" =~ ^\+ && ! "$line" =~ ^\+\+\+ ]]; then
              if echo "$line" | grep -q '.. code-block::'; then
                ((code_block_counter++))
              fi
              if echo "$line" | grep -q '.. code::'; then
                ((code_counter++))
              fi
            fi
          done <<< "$diff_lines"

          # After processing all lines, check and print the final file's error if necessary
          if [[ "$current_filename" == */source/* ]] && ([ $code_block_counter -gt 0 ] || [ $code_counter -gt 0 ]); then
            errors="yes"
            echo "$current_filename contains unsupported code block directives"
            if [ $code_block_counter -gt 0 ]; then
              echo "- the deprecated '.. code-block::' directive appears $code_block_counter times in this file"
            fi
            if [ $code_counter -gt 0 ]; then
              echo "- the deprecated '.. code::' directive appears $code_counter times in this file"
            fi
          fi

          # Provide a summary based on errors found
          if [ "$errors" == "yes" ]; then
            echo "Please replace these directives with '.. literalinclude::' or '.. io-code-block::'"
            exit 1
          else
            echo "No errors found."
          fi