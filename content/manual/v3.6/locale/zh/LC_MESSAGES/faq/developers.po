# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/developers.txt:5
msgid "FAQ: MongoDB for Application Developers"
msgstr ""

#: ../source/faq/developers.txt:9
msgid ""
"This document answers common questions about application development using "
"MongoDB."
msgstr ""

#: ../source/faq/developers.txt:12
msgid ""
"If you don't find the answer you're looking for, check the :doc:`complete "
"list of FAQs </faq>` or post your question to the `MongoDB User Mailing List"
" <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/developers.txt:19
msgid "What is a namespace in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:21
msgid ""
"A \"namespace\" is the concatenation of the :term:`database` name and the "
":term:`collection` names [#indexes-are-namespaces]_ with a period character "
"in between."
msgstr ""

#: ../source/faq/developers.txt:25
msgid ""
"Collections are containers for documents that share one or more indexes. "
"Databases are groups of collections stored on disk using a single set of "
"data files. [#ns-limit]_"
msgstr ""

#: ../source/faq/developers.txt:29
msgid ""
"For an example ``acme.users`` namespace, ``acme`` is the database name and "
"``users`` is the collection name. Period characters **can** occur in "
"collection names, so that ``acme.user.history`` is a valid namespace, with "
"``acme`` as the database name, and ``user.history`` as the collection name."
msgstr ""

#: ../source/faq/developers.txt:35
msgid ""
"While data models like this appear to support nested collections, the "
"collection namespace is flat, and there is no difference from the "
"perspective of MongoDB between ``acme``, ``acme.users``, and "
"``acme.records``."
msgstr ""

#: ../source/faq/developers.txt:40
msgid "Each index also has its own namespace."
msgstr ""

#: ../source/faq/developers.txt:42
msgid ""
"MongoDB database have a configurable limit on the :limit:`number of "
"namespaces <Number of Namespaces>` in a database."
msgstr ""

#: ../source/faq/developers.txt:46
msgid "If you remove a document, does MongoDB remove it from disk?"
msgstr ""

#: ../source/faq/developers.txt:48 ../source/faq/developers.txt:125
msgid "Yes."
msgstr ""

#: ../source/faq/developers.txt:50
msgid ""
"When you use :method:`~db.collection.remove()`, the object will no longer "
"exist in MongoDB's on-disk data storage."
msgstr ""

#: ../source/faq/developers.txt:54
msgid "When does MongoDB write updates to disk?"
msgstr ""

#: ../source/faq/developers.txt:56
msgid ""
"MongoDB flushes writes to disk on a regular interval. In the default "
"configuration, MongoDB writes data to the main data files on disk every 60 "
"seconds and commits the :term:`journal` roughly every 100 milliseconds. "
"These values are configurable with the "
":setting:`~storage.journal.commitIntervalMs` and "
":setting:`~storage.syncPeriodSecs`."
msgstr ""

#: ../source/faq/developers.txt:62
msgid ""
"These values represent the *maximum* amount of time between the completion "
"of a write operation and the point when the write is durable in the journal,"
" if enabled, and when MongoDB flushes data to the disk. In many cases "
"MongoDB and the operating system flush data to disk more frequently, so that"
" the above values represents a theoretical maximum."
msgstr ""

#: ../source/faq/developers.txt:69
msgid ""
"However, by default, MongoDB uses a \"lazy\" strategy to write to disk. This"
" is advantageous in situations where the database receives a thousand "
"increments to an object within one second, MongoDB only needs to flush this "
"data to disk once. In addition to the aforementioned configuration options, "
"you can also use :dbcommand:`fsync` and :doc:`/reference/write-concern` to "
"modify this strategy."
msgstr ""

#: ../source/faq/developers.txt:77
msgid "How do I do transactions and locking in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:79
msgid ""
"MongoDB does not have support for traditional locking or complex "
"transactions with rollback. MongoDB aims to be lightweight, fast, and "
"predictable in its performance. This is similar to the MySQL MyISAM "
"autocommit model. By keeping transaction support extremely simple, MongoDB "
"can provide greater performance especially for :term:`partitioned "
"<partition>` or :term:`replicated <replication>` systems with a number of "
"database server processes."
msgstr ""

#: ../source/faq/developers.txt:87
msgid ""
"MongoDB *does* have support for atomic operations *within* a single "
"document. Given the possibilities provided by nested documents, this feature"
" provides support for a large number of use-cases."
msgstr ""

#: ../source/faq/developers.txt:91
msgid "The :doc:`/core/write-operations-atomicity` page."
msgstr ""

#: ../source/faq/developers.txt:94
msgid "How do you aggregate data with MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:96
msgid ""
"In version 2.1 and later, you can use the new :doc:`aggregation framework "
"</core/aggregation>`, with the :dbcommand:`aggregate` command."
msgstr ""

#: ../source/faq/developers.txt:100
msgid ""
"MongoDB also supports :term:`map-reduce` with the :dbcommand:`mapReduce` "
"command, as well as basic aggregation with the :dbcommand:`group`, "
":dbcommand:`count`, and :dbcommand:`distinct`. commands."
msgstr ""

#: ../source/faq/developers.txt:105
msgid "The :doc:`/aggregation` page."
msgstr ""

#: ../source/faq/developers.txt:108
msgid "Why does MongoDB log so many \"Connection Accepted\" events?"
msgstr ""

#: ../source/faq/developers.txt:110
msgid ""
"If you see a very large number connection and re-connection messages in your"
" MongoDB log, then clients are frequently connecting and disconnecting to "
"the MongoDB server. This is normal behavior for applications that do not use"
" request pooling, such as CGI. Consider using FastCGI, an Apache Module, or "
"some other kind of persistent application server to decrease the connection "
"overhead."
msgstr ""

#: ../source/faq/developers.txt:117
msgid ""
"If these connections do not impact your performance you can use the run-time"
" :setting:`~systemLog.quiet` option or the command-line option "
":option:`--quiet <mongod --quiet>` to suppress these messages from the log."
msgstr ""

#: ../source/faq/developers.txt:123
msgid "Does MongoDB run on Amazon EBS?"
msgstr ""

#: ../source/faq/developers.txt:127
msgid ""
"MongoDB users of all sizes have had a great deal of success using MongoDB on"
" the EC2 platform using EBS disks."
msgstr ""

#: ../source/faq/developers.txt:130
msgid ":ecosystem:`Amazon EC2 </platforms/amazon-ec2>`"
msgstr ""

#: ../source/faq/developers.txt:133
msgid "Why are MongoDB's data files so large?"
msgstr ""

#: ../source/faq/developers.txt:135
msgid ""
"MongoDB aggressively preallocates data files to reserve space and avoid file"
" system fragmentation. You can use the :setting:`storage.smallFiles` setting"
" to modify the file preallocation strategy."
msgstr ""

#: ../source/faq/developers.txt:139
msgid ":ref:`faq-disk-size`"
msgstr ""

#: ../source/faq/developers.txt:144
msgid "How do I optimize storage use for small documents?"
msgstr ""

#: ../source/faq/developers.txt:146
msgid ""
"Each MongoDB document contains a certain amount of overhead. This overhead "
"is normally insignificant but becomes significant if all documents are just "
"a few bytes, as might be the case if the documents in your collection only "
"have one or two fields."
msgstr ""

#: ../source/faq/developers.txt:151
msgid ""
"Consider the following suggestions and strategies for optimizing storage "
"utilization for these collections:"
msgstr ""

#: ../source/faq/developers.txt:154
msgid "Use the ``_id`` field explicitly."
msgstr ""

#: ../source/faq/developers.txt:156
msgid ""
"MongoDB clients automatically add an ``_id`` field to each document and "
"generate a unique 12-byte :term:`ObjectId` for the ``_id`` field. "
"Furthermore, MongoDB always indexes the ``_id`` field. For smaller documents"
" this may account for a significant amount of space."
msgstr ""

#: ../source/faq/developers.txt:162
msgid ""
"To optimize storage use, users can specify a value for the ``_id`` field "
"explicitly when inserting documents into the collection. This strategy "
"allows applications to store a value in the ``_id`` field that would have "
"occupied space in another portion of the document."
msgstr ""

#: ../source/faq/developers.txt:167
msgid ""
"You can store any value in the ``_id`` field, but because this value serves "
"as a primary key for documents in the collection, it must uniquely identify "
"them. If the field's value is not unique, then it cannot serve as a primary "
"key as there would be collisions in the collection."
msgstr ""

#: ../source/faq/developers.txt:173
msgid "Use shorter field names."
msgstr ""

#: ../source/faq/developers.txt:175
msgid ""
"MongoDB stores all field names in every document. For most documents, this "
"represents a small fraction of the space used by a document; however, for "
"small documents the field names may represent a proportionally large amount "
"of space. Consider a collection of documents that resemble the following:"
msgstr ""

#: ../source/faq/developers.txt:185
msgid ""
"If you shorten the field named ``last_name`` to ``lname`` and the field "
"named ``best_score`` to ``score``, as follows, you could save 9 bytes per "
"document."
msgstr ""

#: ../source/faq/developers.txt:193
msgid ""
"Shortening field names reduces expressiveness and does not provide "
"considerable benefit for larger documents and where document overhead is not"
" of significant concern. Shorter field names do not reduce the size of "
"indexes, because indexes have a predefined structure."
msgstr ""

#: ../source/faq/developers.txt:199
msgid "In general it is not necessary to use short field names."
msgstr ""

#: ../source/faq/developers.txt:201
msgid "Embed documents."
msgstr ""

#: ../source/faq/developers.txt:203
msgid ""
"In some cases you may want to embed documents in other documents and save on"
" the per-document overhead."
msgstr ""

#: ../source/faq/developers.txt:209
msgid "When should I use GridFS?"
msgstr ""

#: ../source/faq/developers.txt:211
msgid ""
"For documents in a MongoDB collection, you should always use :term:`GridFS` "
"for storing files larger than 16 MB."
msgstr ""

#: ../source/faq/developers.txt:214
msgid ""
"In some situations, storing large files may be more efficient in a MongoDB "
"database than on a system-level filesystem."
msgstr ""

#: ../source/faq/developers.txt:217
msgid ""
"If your filesystem limits the number of files in a directory, you can use "
"GridFS to store as many files as needed."
msgstr ""

#: ../source/faq/developers.txt:220
msgid ""
"When you want to keep your files and metadata automatically synced and "
"deployed across a number of systems and facilities.  When using "
":ref:`geographically distributed replica sets <replica-set-geographical-"
"distribution>` MongoDB can distribute files and their metadata automatically"
" to a number of :program:`mongod` instances and facilities."
msgstr ""

#: ../source/faq/developers.txt:227
msgid ""
"When you want to access information from portions of large files without "
"having to load whole files into memory, you can use GridFS to recall "
"sections of files without reading the entire file into memory."
msgstr ""

#: ../source/faq/developers.txt:232
msgid ""
"Do not use GridFS if you need to update the content of the entire file "
"atomically. As an alternative you can store multiple versions of each file "
"and specify the current version of the file in the metadata. You can update "
"the metadata field that indicates \"latest\" status in an atomic update "
"after uploading the new version of the file, and later remove previous "
"versions if needed."
msgstr ""

#: ../source/faq/developers.txt:239
msgid ""
"Furthermore, if your files are all smaller the 16 MB :limit:`BSON Document "
"Size` limit, consider storing the file manually within a single document. "
"You may use the BinData data type to store the binary data. See your "
":doc:`drivers </applications/drivers>` documentation for details on using "
"BinData."
msgstr ""

#: ../source/faq/developers.txt:245
msgid "For more information on GridFS, see :doc:`/core/gridfs`."
msgstr ""

#: ../source/faq/developers.txt:248
msgid "How does MongoDB address SQL or Query injection?"
msgstr ""

#: ../source/faq/developers.txt:251
msgid "BSON"
msgstr ""

#: ../source/faq/developers.txt:253
msgid ""
"As a client program assembles a query in MongoDB, it builds a BSON object, "
"not a string. Thus traditional SQL injection attacks are not a problem. More"
" details and some nuances are covered below."
msgstr ""

#: ../source/faq/developers.txt:257
msgid ""
"MongoDB represents queries as :term:`BSON` objects. Typically :doc:`client "
"libraries </applications/drivers>` provide a convenient, injection free, "
"process to build these objects. Consider the following C++ example:"
msgstr ""

#: ../source/faq/developers.txt:267
msgid ""
"Here, ``my_query`` then will have a value such as ``{ name : \"Joe\" }``. If"
" ``my_query`` contained special characters, for example ``,``, ``:``, and "
"``{``, the query simply wouldn't match any documents. For example, users "
"cannot hijack a query and convert it to a delete."
msgstr ""

#: ../source/faq/developers.txt:274
msgid "JavaScript"
msgstr ""

#: ../source/includes/fact-disable-javascript-with-noscript.rst:1
msgid ""
"You can disable all server-side execution of JavaScript, by passing the "
":option:`--noscripting <mongod --noscripting>` option on the command line or"
" setting :setting:`security.javascriptEnabled` in a configuration file."
msgstr ""

#: ../source/faq/developers.txt:280
msgid ""
"All of the following MongoDB operations permit you to run arbitrary "
"JavaScript expressions directly on the server:"
msgstr ""

#: ../source/faq/developers.txt:283
msgid ":query:`$where`"
msgstr ""

#: ../source/faq/developers.txt:284
msgid ":dbcommand:`mapReduce`"
msgstr ""

#: ../source/faq/developers.txt:285
msgid ":dbcommand:`group`"
msgstr ""

#: ../source/faq/developers.txt:287
msgid ""
"You must exercise care in these cases to prevent users from submitting "
"malicious JavaScript."
msgstr ""

#: ../source/faq/developers.txt:290
msgid ""
"Fortunately, you can express most queries in MongoDB without JavaScript and "
"for queries that require JavaScript, you can mix JavaScript and non-"
"JavaScript in a single query. Place all the user-supplied fields directly in"
" a :term:`BSON` field and pass JavaScript code to the :query:`$where` field."
msgstr ""

#: ../source/faq/developers.txt:296
msgid ""
"If you need to pass user-supplied values in a :query:`$where` clause, you "
"may escape these values with the ``CodeWScope`` mechanism. When you set "
"user-submitted values as variables in the scope document, you can avoid "
"evaluating them on the database server."
msgstr ""

#: ../source/faq/developers.txt:304
msgid "Dollar Sign Operator Escaping"
msgstr ""

#: ../source/faq/developers.txt:306
msgid ""
"Field names in MongoDB's query language have semantic meaning. The dollar "
"sign (i.e ``$``) is a reserved character used to represent :doc:`operators "
"</reference/operator>` (i.e. :update:`$inc`.) Thus, you should ensure that "
"your application's users cannot inject operators into their inputs."
msgstr ""

#: ../source/faq/developers.txt:312
msgid ""
"In some cases, you may wish to build a BSON object with a user-provided key."
"  In these situations, keys will need to substitute the reserved ``$`` and "
"``.`` characters. Any character is sufficient, but consider using the "
"Unicode full width equivalents: ``U+FF04`` (i.e. \"＄\") and ``U+FF0E`` (i.e."
" \"．\")."
msgstr ""

#: ../source/faq/developers.txt:318
msgid "Consider the following example:"
msgstr ""

#: ../source/faq/developers.txt:324
msgid ""
"The user may have supplied a ``$`` value in the ``a_key`` value. At the same"
" time, ``my_object`` might be ``{ $where : \"things\" }``. Consider the "
"following cases:"
msgstr ""

#: ../source/faq/developers.txt:328
msgid ""
"**Insert**. Inserting this into the database does no harm. The insert "
"process does not evaluate the object as a query."
msgstr ""

#: ../source/faq/developers.txt:333
msgid ""
"MongoDB client drivers, if properly implemented, check for reserved "
"characters in keys on inserts."
msgstr ""

#: ../source/faq/developers.txt:336
msgid ""
"**Update**.  The :method:`~db.collection.update()` operation permits ``$`` "
"operators in the update argument but does not support the :query:`$where` "
"operator. Still, some users may be able to inject operators that can "
"manipulate a single document only. Therefore your application should escape "
"keys, as mentioned above, if reserved characters are possible."
msgstr ""

#: ../source/faq/developers.txt:343
msgid ""
"**Query** Generally this is not a problem for queries that resemble ``{ x : "
"user_obj }``: dollar signs are not top level and have no effect. "
"Theoretically it may be possible for the user to build a query themselves. "
"But checking the user-submitted content for ``$`` characters in key names "
"may help protect against this kind of injection."
msgstr ""

#: ../source/faq/developers.txt:351
msgid "Driver-Specific Issues"
msgstr ""

#: ../source/faq/developers.txt:353
msgid ""
"See the \"`PHP MongoDB Driver Security Notes "
"<http://us.php.net/manual/en/mongo.security.php>`_\" page in the PHP driver "
"documentation for more information"
msgstr ""

#: ../source/faq/developers.txt:360
msgid "How does MongoDB provide concurrency?"
msgstr ""

#: ../source/faq/developers.txt:362
msgid ""
"MongoDB implements a readers-writer lock. This means that at any one time, "
"only one client may be writing or any number of clients may be reading, but "
"that reading and writing cannot occur simultaneously."
msgstr ""

#: ../source/faq/developers.txt:367
msgid ""
"In standalone and :term:`replica sets <replica set>` the lock's scope "
"applies to a single :program:`mongod` instance or :term:`primary` instance. "
"In a sharded cluster, locks apply to each individual shard, not to the whole"
" cluster."
msgstr ""

#: ../source/faq/developers.txt:372
msgid "For more information, see :doc:`/faq/concurrency`."
msgstr ""

#: ../source/faq/developers.txt:377
msgid "What is the compare order for BSON types?"
msgstr ""

#: ../source/faq/developers.txt:379
msgid ""
"MongoDB permits documents within a single collection to have fields with "
"different :term:`BSON` types. For instance, the following documents may "
"exist within a single collection."
msgstr ""

#: ../source/includes/fact-sort-order.rst:1
msgid ""
"When comparing values of different :term:`BSON` types, MongoDB uses the "
"following comparison order, from lowest to highest:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:4
msgid "MinKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:5
msgid "Null"
msgstr ""

#: ../source/includes/fact-sort-order.rst:6
msgid "Numbers (ints, longs, doubles)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:7
msgid "Symbol, String"
msgstr ""

#: ../source/includes/fact-sort-order.rst:8
msgid "Object"
msgstr ""

#: ../source/includes/fact-sort-order.rst:9
msgid "Array"
msgstr ""

#: ../source/includes/fact-sort-order.rst:10
msgid "BinData"
msgstr ""

#: ../source/includes/fact-sort-order.rst:11
msgid "ObjectId"
msgstr ""

#: ../source/includes/fact-sort-order.rst:12
msgid "Boolean"
msgstr ""

#: ../source/includes/fact-sort-order.rst:13
msgid "Date"
msgstr ""

#: ../source/includes/fact-sort-order.rst:14
msgid "Timestamp"
msgstr ""

#: ../source/includes/fact-sort-order.rst:15
msgid "Regular Expression"
msgstr ""

#: ../source/includes/fact-sort-order.rst:16
msgid "MaxKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:18
msgid ""
"MongoDB treats some types as equivalent for comparison purposes. For "
"instance, numeric types undergo conversion before comparison."
msgstr ""

#: ../source/includes/fact-sort-order.rst:21
msgid ""
"Date objects sort before Timestamp objects. Previously Date and Timestamp "
"objects sorted together."
msgstr ""

#: ../source/includes/fact-sort-order.rst:25
msgid ""
"The comparison treats a non-existent field as it would an empty BSON Object."
" As such, a sort on the ``a`` field in documents ``{ }`` and ``{ a: null }``"
" would treat the documents as equivalent in sort order."
msgstr ""

#: ../source/includes/fact-sort-order.rst:29
msgid ""
"With arrays, a less-than comparison or an ascending sort compares the "
"smallest element of arrays, and a greater-than comparison or a descending "
"sort compares the largest element of the arrays. As such, when comparing a "
"field whose value is a single-element array (e.g. ``[ 1 ]``) with non-array "
"fields (e.g. ``2``), the comparison is between ``1`` and ``2``. A comparison"
" of an empty array (e.g. ``[ ]``) treats the empty array as less than "
"``null`` or a missing field."
msgstr ""

#: ../source/includes/fact-sort-order.rst:37
msgid "MongoDB sorts ``BinData`` in the following order:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:39
msgid "First, the length or size of the data."
msgstr ""

#: ../source/includes/fact-sort-order.rst:41
msgid "Then, by the BSON one-byte subtype."
msgstr ""

#: ../source/includes/fact-sort-order.rst:43
msgid "Finally, by the data, performing a byte-by-byte comparison."
msgstr ""

#: ../source/faq/developers.txt:390
msgid "Consider the following :program:`mongo` example:"
msgstr ""

#: ../source/faq/developers.txt:405
msgid ""
"The :query:`$type` operator provides access to :term:`BSON type <BSON "
"types>` comparison in the MongoDB query syntax. See the documentation on "
":term:`BSON types` and the :query:`$type` operator for additional "
"information."
msgstr ""

#: ../source/includes/warning-mixing-types.rst:3
msgid ""
"Data models that associate a field name with different data types within a "
"collection are *strongly* discouraged."
msgstr ""

#: ../source/includes/warning-mixing-types.rst:6
msgid ""
"Without internal consistency complicates application code, and can lead to "
"unnecessary complexity for application developers."
msgstr ""

#: ../source/faq/developers.txt:414
msgid ""
"The :doc:`Tailable Cursors </tutorial/create-tailable-cursor>` page for an "
"example of a C++ use of ``MinKey``."
msgstr ""

#: ../source/faq/developers.txt:426
msgid ""
"When multiplying values of mixed types, what type conversion rules apply?"
msgstr ""

#: ../source/faq/developers.txt:428
msgid ""
"The :update:`$mul` multiplies the numeric value of a field by a number. For "
"multiplication with values of mixed numeric types (32-bit integer, 64-bit "
"integer, float), the following type conversion rules apply:"
msgstr ""

#: ../source/faq/developers.txt:437
msgid "32-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:438 ../source/faq/developers.txt:443
#: ../source/faq/developers.txt:447 ../source/faq/developers.txt:448
msgid "64-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:439 ../source/faq/developers.txt:444
#: ../source/faq/developers.txt:449 ../source/faq/developers.txt:452
#: ../source/faq/developers.txt:453 ../source/faq/developers.txt:454
msgid "Float"
msgstr ""

#: ../source/faq/developers.txt:441
msgid "**32-bit Integer**"
msgstr ""

#: ../source/faq/developers.txt:442
msgid "32-bit or 64-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:446
msgid "**64-bit Integer**"
msgstr ""

#: ../source/faq/developers.txt:451
msgid "**Float**"
msgstr ""

#: ../source/faq/developers.txt:458
msgid ""
"If the product of two 32-bit integers exceeds the maximum value for a 32-bit"
" integer, the result is a 64-bit integer."
msgstr ""

#: ../source/faq/developers.txt:461
msgid ""
"Integer operations of any type that exceed the maximum value for a 64-bit "
"integer produce an error."
msgstr ""

#: ../source/faq/developers.txt:467
msgid "How do I query for fields that have null values?"
msgstr ""

#: ../source/faq/developers.txt:469
msgid "Different query operators treat ``null`` values differently."
msgstr ""

#: ../source/faq/developers.txt:471
msgid "Consider the collection ``test`` with the following documents:"
msgstr ""

#: ../source/faq/developers.txt:481
msgid "Comparison with Null"
msgstr ""

#: ../source/faq/developers.txt:483
msgid ""
"The ``{ cancelDate : null }`` query matches documents that either contain "
"the ``cancelDate`` field whose value is ``null`` *or* that do not contain "
"the ``cancelDate`` field. If the queried index is :ref:`sparse <index-type-"
"sparse>`, however, then the query will only match ``null`` values, not "
"missing fields."
msgstr ""

#: ../source/faq/developers.txt:489
msgid ""
"If using the sparse index results in an incomplete result, MongoDB will not "
"use the index unless a :method:`~cursor.hint()` explicitly specifies the "
"index. See :ref:`index-type-sparse` for more information."
msgstr ""

#: ../source/faq/developers.txt:494
msgid "Given the following query:"
msgstr ""

#: ../source/faq/developers.txt:500
msgid "The query returns both documents:"
msgstr ""

#: ../source/faq/developers.txt:508
msgid "Type Check"
msgstr ""

#: ../source/faq/developers.txt:510
msgid ""
"The ``{ cancelDate : { $type: 10 } }`` query matches documents that contains"
" the ``cancelDate`` field whose value is ``null`` *only*; i.e. the value of "
"the ``cancelDate`` field is of BSON Type ``Null`` (i.e. ``10``) :"
msgstr ""

#: ../source/faq/developers.txt:519
msgid "The query returns only the document that contains the ``null`` value:"
msgstr ""

#: ../source/faq/developers.txt:526
msgid "Existence Check"
msgstr ""

#: ../source/faq/developers.txt:528
msgid ""
"The ``{ cancelDate : { $exists: false } }`` query matches documents that do "
"not contain the ``cancelDate`` field:"
msgstr ""

#: ../source/faq/developers.txt:535
msgid ""
"The query returns only the document that does *not* contain the "
"``cancelDate`` field:"
msgstr ""

#: ../source/faq/developers.txt:542
msgid ""
"The reference documentation for the :query:`$type` and :query:`$exists` "
"operators."
msgstr ""

#: ../source/faq/developers.txt:548
msgid "Are there any restrictions on the names of Collections?"
msgstr ""

#: ../source/faq/developers.txt:550
msgid ""
"Collection names can be any UTF-8 string with the following exceptions:"
msgstr ""

#: ../source/faq/developers.txt:553
msgid "A collection name should begin with a letter or an underscore."
msgstr ""

#: ../source/faq/developers.txt:555
msgid "The empty string (``\"\"``) is not a valid collection name."
msgstr ""

#: ../source/faq/developers.txt:557
msgid ""
"Collection names cannot contain the ``$`` character. (version 2.2 only)"
msgstr ""

#: ../source/faq/developers.txt:559
msgid "Collection names cannot contain the null character: ``\\0``"
msgstr ""

#: ../source/faq/developers.txt:561
msgid ""
"Do not name a collection using the ``system.`` prefix. MongoDB reserves "
"``system.`` for system collections."
msgstr ""

#: ../source/includes/fact-collection-namespace-limit.rst:1
msgid ""
"The maximum length of the collection namespace, which includes the database "
"name, the dot (``.``) separator, and the collection name (i.e. "
"``<database>.<collection>``), is 120 bytes."
msgstr ""

#: ../source/faq/developers.txt:567
msgid ""
"However, for maximum flexibility, collections should have names less than 80"
" characters."
msgstr ""

#: ../source/faq/developers.txt:570
msgid ""
"If your collection name includes special characters, such as the underscore "
"character, then to access the collection use the "
":method:`db.getCollection()` method or a :api:`similar method for your "
"driver <>`."
msgstr ""

#: ../source/faq/developers.txt:0
msgid "Example"
msgstr ""

#: ../source/faq/developers.txt:582
msgid ""
"To perform a query, use the :method:`~db.collection.find()` method, in as "
"the following:"
msgstr ""

#: ../source/faq/developers.txt:592
msgid "How do I isolate cursors from intervening write operations?"
msgstr ""

#: ../source/faq/developers.txt:594
msgid ""
"MongoDB cursors can return the same document more than once in some "
"situations. [#duplicate-document-in-result-set]_ You can use the "
":method:`~cursor.snapshot()` method on a cursor to isolate the operation for"
" a very specific case."
msgstr ""

#: ../source/faq/developers.txt:599
msgid ""
":method:`~cursor.snapshot()` traverses the index on the ``_id`` field and "
"guarantees that the query will return each document (with respect to the "
"value of the ``_id`` field) no more than once. [#id-is-immutable]_"
msgstr ""

#: ../source/faq/developers.txt:603
msgid ""
"The :method:`~cursor.snapshot()` does not guarantee that the data returned "
"by the query will reflect a single moment in time *nor* does it provide "
"isolation from insert or delete operations."
msgstr ""

#: ../source/faq/developers.txt:609
msgid ""
"You **cannot** use :method:`~cursor.snapshot()` with :term:`sharded "
"collections <sharding>`."
msgstr ""

#: ../source/faq/developers.txt:612
msgid ""
"You **cannot** use :method:`~cursor.snapshot()` with "
":method:`~cursor.sort()` or :method:`~cursor.hint()` cursor methods."
msgstr ""

#: ../source/faq/developers.txt:616
msgid ""
"As an alternative, if your collection has a field or fields that are never "
"modified, you can use a *unique* index on this field or these fields to "
"achieve a similar result as the :method:`~cursor.snapshot()`. Query with "
":method:`~cursor.hint()` to explicitly force the query to use that index."
msgstr ""

#: ../source/faq/developers.txt:622
msgid ""
"As a cursor returns documents other operations may interleave with the "
"query: if some of these operations are :doc:`updates </core/write-"
"operations>` that cause the document to move (in the case of a table scan, "
"caused by document growth) or that change the indexed field on the index "
"used by the query; then the cursor will return the same document more than "
"once."
msgstr ""

#: ../source/faq/developers.txt:630
msgid ""
"MongoDB does not permit changes to the value of the ``_id`` field; it is not"
" possible for a cursor that transverses this index to pass the same document"
" more than once."
msgstr ""

#: ../source/faq/developers.txt:637
msgid "When should I embed documents within other documents?"
msgstr ""

#: ../source/faq/developers.txt:639
msgid ""
"When :doc:`modeling data in MongoDB </core/data-models>`, embedding is "
"frequently the choice for:"
msgstr ""

#: ../source/faq/developers.txt:642
msgid "\"contains\" relationships between entities."
msgstr ""

#: ../source/faq/developers.txt:644
msgid ""
"one-to-many relationships when the \"many\" objects *always* appear with or "
"are viewed in the context of their parents."
msgstr ""

#: ../source/faq/developers.txt:647
msgid ""
"You should also consider embedding for performance reasons if you have a "
"collection with a large number of small documents. Nevertheless, if small, "
"separate documents represent the natural model for the data, then you should"
" maintain that model."
msgstr ""

#: ../source/faq/developers.txt:652
msgid ""
"If, however, you can group these small documents by some logical "
"relationship *and* you frequently retrieve the documents by this grouping, "
"you might consider \"rolling-up\" the small documents into larger documents "
"that contain an array of embedded documents. Keep in mind that if you often "
"only need to retrieve a subset of the documents within the group, then "
"\"rolling-up\" the documents may not provide better performance."
msgstr ""

#: ../source/faq/developers.txt:660
msgid ""
"\"Rolling up\" these small documents into logical groupings means that "
"queries to retrieve a group of documents involve sequential reads and fewer "
"random disk accesses."
msgstr ""

#: ../source/faq/developers.txt:666
msgid ""
"Additionally, \"rolling up\" documents and moving common fields to the "
"larger document benefit the index on these fields. There would be fewer "
"copies of the common fields *and* there would be fewer associated key "
"entries in the corresponding index. See :doc:`/core/indexes` for more "
"information on indexes."
msgstr ""

#: ../source/faq/developers.txt:680
msgid "Where can I learn more about data modeling in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:682
msgid ""
"Begin by reading the documents in the :doc:`/data-modeling` section. These "
"documents contain a high level introduction to data modeling considerations "
"in addition to practical examples of data models targeted at particular "
"issues."
msgstr ""

#: ../source/faq/developers.txt:687
msgid ""
"Additionally, consider the following external resources that provide "
"additional examples:"
msgstr ""

#: ../source/faq/developers.txt:698
msgid ""
"`Schema Design by Example <http://www.mongodb.com/presentations/mongodb-"
"melbourne-2012/schema-design-example>`_"
msgstr ""

#: ../source/faq/developers.txt:700
msgid ""
"`Dynamic Schema Blog Post "
"<http://dmerr.tumblr.com/post/6633338010/schemaless>`_"
msgstr ""

#: ../source/faq/developers.txt:703
msgid ""
":ecosystem:`MongoDB Data Modeling and Rails </tutorial/model-data-for-ruby-"
"on-rails/>`"
msgstr ""

#: ../source/faq/developers.txt:706
msgid ""
"`Ruby Example of Materialized Paths "
"<http://github.com/banker/newsmonger/blob/master/app/models/comment.rb>`_"
msgstr ""

#: ../source/faq/developers.txt:709
msgid ""
"`Sean Cribs Blog Post <http://seancribbs.com/tech/2009/09/28/modeling-a"
"-tree-in-a-document-database>`_ which was the source for much of the :ref"
":`data-modeling-trees` content."
msgstr ""

#: ../source/faq/developers.txt:717
msgid "Can I manually pad documents to prevent moves during updates?"
msgstr ""

#: ../source/faq/developers.txt:721
msgid ""
"An update can cause a document to move on disk if the document grows in "
"size. To *minimize* document movements, MongoDB uses :term:`padding`."
msgstr ""

#: ../source/faq/developers.txt:725
msgid ""
"You should not have to pad manually because by default, MongoDB uses :ref"
":`power-of-2-allocation` to add :ref:`padding automatically <record-"
"allocation-strategies>`. The :ref:`power-of-2-allocation` ensures that "
"MongoDB allocates document space in sizes that are powers of 2, which helps "
"ensure that MongoDB can efficiently reuse free space created by document "
"deletion or relocation as well as reduce the occurrences of reallocations in"
" many cases."
msgstr ""

#: ../source/faq/developers.txt:733
msgid ""
"However, *if you must* pad a document manually, you can add a temporary "
"field to the document and then :update:`$unset` the field, as in the "
"following example."
msgstr ""

#: ../source/faq/developers.txt:737
msgid ""
"Do not manually pad documents in a capped collection. Applying manual "
"padding to a document in a capped collection can break replication. Also, "
"the padding is not preserved if you re-sync the MongoDB instance."
msgstr ""

#: ../source/faq/developers.txt:761
msgid ":ref:`record-allocation-strategies`"
msgstr ""
