

=============
Change Events
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _change-stream-output:

Change Events
-------------

The following document represents all possible fields that a change
stream response document can have.

.. code-block:: json

   {
      _id : { <BSON Object> },
      "operationType" : "<operation>",
      "fullDocument" : { <document> },
      "ns" : {
         "db" : "<database>",
         "coll" : "<collection>"
      },
      "to" : {
         "db" : "<database>",
         "coll" : "<collection>"
      },
      "documentKey" : { "_id" : <value> },
      "updateDescription" : {
         "updatedFields" : { <document> },
         "removedFields" : [ "<field>", ... ]
      }
      "clusterTime" : <Timestamp>,
      "txnNumber" : <NumberLong>,
      "lsid" : {
         "id" : <UUID>,
         "uid" : <BinData>
      }
   }

Some fields are only available for certain operations, such as updates. The
following table describes each field in the change stream response document:

.. list-table::
   :header-rows: 1
   :widths: 20 20 60

   * - Field
     - Type
     - Description

   * - :ref:`_id <change-stream-event-id>`
     - document
     - .. _change-stream-event-id:

       A :term:`BSON` object which serves as an identifier for the
       change stream event. This value is used as the ``resumeToken``
       for the ``resumeAfter`` parameter when resuming a change stream.
       The ``_id`` object has the following form:

       .. code-block:: none

          {
             "_data" : <BinData|hex string>
          }

       The ``_data`` type depends on the MongoDB versions
       and, in some cases, the :ref:`feature compatibility version (fCV)
       <view-fcv>` at the time of the change stream's
       opening/resumption. See :ref:`change-stream-resume-token` for the
       full list of ``_data`` types.
       
       See :ref:`change-stream-resume` for an example of resuming a
       change stream by ``resumeToken``.

   * - ``operationType``
     - string
     - The type of operation that occurred. Can be any of the following
       values:

       - ``insert``
       - ``delete``
       - ``replace``
       - ``update``
       - ``drop``
       - ``rename``
       - ``dropDatabase``
       - ``invalidate``

   * - ``fullDocument``
     - document
     - The document created or modified by the ``insert``, ``replace``,
       ``delete``, ``update`` operations (i.e. CRUD operations).

       For ``insert`` and ``replace`` operations, this represents the new
       document created by the operation.

       For ``delete`` operations, this field is omitted as the document no
       longer exists.

       For ``update`` operations, this field only appears if you configured
       the change stream with ``fullDocument`` set to ``updateLookup``. This
       field then represents the most current majority-committed version of
       the document modified by the update operation. This
       document may differ from the changes described in ``updateDescription``
       if other majority-committed operations modified the document between
       the original update operation and the full document lookup.

   * - ``ns``
     - document
     - The namespace (database and or collection) affected by the event.

   * - ``ns.db``
     - string
     - The name of the database.

   * - ``ns.coll``
     - string
     - The name of the collection.

       For ``dropDatabase`` operations, this field is omitted.

   * - ``to``
     - document
     - When ``operationType : rename``, this document displays the new name for
       the ``ns`` collection. This document is omitted for all other
       values of ``operationType``.

   * - ``to.db``
     - string
     - The new name of the database.

   * - ``to.coll``
     - string
     - The new name of the collection.

   * - ``documentKey``
     - document
     - A document that contains the ``_id`` of the document created or modified by the ``insert``,
       ``replace``, ``delete``, ``update`` operations  (i.e. CRUD operations).
       For sharded collections, also displays the full shard key for the
       document. The ``_id`` field is not repeated if it is already a
       part of the shard key.

   * - ``updateDescription``
     - document
     - A document describing the fields that were updated or removed
       by the update operation.

       This document and its fields only appears if the ``operationType`` is
       ``update``.

   * - ``updateDescription.updatedFields``
     - document
     - A document whose keys correspond to the fields that were modified by the
       update operation. The value of each field corresponds to the new
       value of those fields, rather than the operation that resulted in the
       new value.

   * - ``updateDescription.removedFields``
     - array
     - An array of fields that were removed by the update operation.

   * - ``clusterTime``

     - Timestamp

     - The timestamp from the oplog entry associated with the event.

       For events that happened as part of a :doc:`multi-document
       transaction </core/transactions>`, the associated change stream
       notifications will have the same ``clusterTime`` value, namely
       the time when the transaction was committed.
       
       On a sharded cluster, events that occur on different shards can
       have the same ``clusterTime`` but be associated with different
       transactions or even not be associcated with any transaction. To
       identify events for a single transaction, you can use the
       combination of ``lsid`` and ``txnNumber`` in the change stream
       event document.

       .. versionadded:: 4.0

   * - ``txnNumber`` 
     - NumberLong

     - The transaction number.

       Only present if the operation is part of a :doc:`multi-document
       transaction </core/transactions>`.

       .. versionadded:: 4.0

   * - ``lsid``

     - Document

     - The identifier for the session associated with the transaction.

       Only present if the operation is part of a :doc:`multi-document
       transaction </core/transactions>`.

       .. versionadded:: 4.0

``insert`` Event
----------------

The following example illustrates an ``insert`` event:

.. code-block:: none

   {
      _id: { < Resume Token > },
      operationType: 'insert',
      clusterTime: <Timestamp>,
      ns: {
         db: 'engineering', 
         coll: 'users'
      },
      documentKey: {
         userName: 'alice123', 
         _id: ObjectId("599af247bb69cd89961c986d")
      },
      fullDocument: {
         _id: ObjectId("599af247bb69cd89961c986d"), 
         userName: 'alice123',
         name: 'Alice'
      }
   }

The ``documentKey`` field includes both the ``_id`` and the ``userName``
field. This indicates that the ``engineering.users`` collection is sharded,
with a shard key on ``userName`` and ``_id``.

The ``fullDocument`` document represents the version of the document at the
time of the insert.

.. _change-streams-update-event:

``update`` Event
----------------

The following example illustrates an ``update`` event:

.. code-block:: none

   {
      _id: { < Resume Token > },
      operationType: 'update',
      clusterTime: <Timestamp>,
      ns: { 
         db: 'engineering', 
         coll: 'users'
      },
      documentKey: {
         _id: ObjectId("58a4eb4a30c75625e00d2820")
      },
      updateDescription: {
         updatedFields: {
            email: 'alice@10gen.com'
         },
         removedFields: ['phoneNumber']
      }
   }
   
The following example illustrates an ``update`` event for change streams
opened with the ``fullDocument : updateLookup`` option:

.. code-block:: none

   {
      _id: { < Resume Token > },
      operationType: 'update',
      clusterTime: <Timestamp>,
      ns: { 
         db: 'engineering', 
         coll: 'users'
      },
      documentKey: {
         _id: ObjectId("58a4eb4a30c75625e00d2820")
      },
      updateDescription: {
         updatedFields: {
            email: 'alice@10gen.com'
         },
         removedFields: ['phoneNumber']
      },
      fullDocument: { 
         _id: ObjectId("58a4eb4a30c75625e00d2820"),
         name: 'Alice',
         userName: 'alice123',
         email: 'alice@10gen.com',
         team: 'replication'
      }
   }

The ``fullDocument`` document represents the most current majority-committed
version of the updated document. The ``fullDocument`` document may vary from
the document at the time of the update operation depending on the number of
interleaving majority-committed operations that occur between the update
operation and the document lookup.

``replace`` Event
-----------------

The following example illustrates a ``replace`` event:

.. code-block:: none

   {
      _id: { < Resume Token > },
      operationType: 'replace',
      clusterTime: <Timestamp>,
      ns: {
         db: 'engineering', 
         coll: 'users'
      },
      documentKey: { 
         _id: ObjectId("599af247bb69cd89961c986d")
      },
      fullDocument: {
         _id: ObjectId("599af247bb69cd89961c986d"), 
         userName: 'alice123',
         name: 'Alice'
      }
   }
   
A ``replace`` operation uses the update command, and consists of two stages:

- Delete the original document with the ``documentKey`` and
- Insert the new document using the same ``documentkey``

The ``fullDocument`` of a ``replace`` event represents the document after the
insert of the replacement document.

``delete`` Event
----------------

The following example illustrates a ``delete`` event:

.. code-block:: none

   {
      _id: { < Resume Token > },
      operationType: 'delete',
      clusterTime: <Timestamp>,
      ns: {
         db: 'engineering',
         coll: 'users'
      },
      documentKey: {
         _id: ObjectId("599af247bb69cd89961c986d")
      }
   }

The ``fullDocument`` document is omitted as the document no longer exists at the
time the change stream cursor sends the ``delete`` event to the client.

.. _change-streams-drop-event:

``drop`` Event
----------------

.. versionadded:: 4.0.1

A ``drop`` event occurs when a collection is dropped from a database. The
following example illustrates a ``drop`` event:

.. code-block:: none

   {
      _id: { < Resume Token > },
      operationType: 'drop',
      clusterTime: <Timestamp>,
      ns: {
         db: 'engineering',
         coll: 'users'
      }
   }

A ``drop`` event leads to an :ref:`invalidate event <change-event-invalidate>`
for change streams opened against its ``ns`` collection.

.. _change-streams-rename-event:

``rename`` Event
----------------

.. versionadded:: 4.0.1

A ``rename`` event occurs when a collection is renamed. The following example
illustrates a ``rename`` event:

.. code-block:: none

   {
      _id: { < Resume Token > },
      operationType: 'rename',
      clusterTime: <Timestamp>,
      ns: {
         db: 'engineering',
         coll: 'users'
      },
      to: {
         db: 'engineering',
         coll: 'people'
      }
   }

A ``rename`` event leads to an
:ref:`invalidate event <change-event-invalidate>` for change streams opened
against its ``ns`` collection or ``to`` collection.

.. _change-streams-dropDatabase-event:

``dropDatabase`` Event
----------------------

.. versionadded:: 4.0.1

A ``dropDatabase`` event occurs when a database is dropped. The following
example illustrates a ``dropDatabase`` event:

.. code-block:: none

   {
      _id: { < Resume Token > },
      operationType: 'dropDatabase',
      clusterTime: <Timestamp>,
      ns: {
         db: 'engineering'
      }
   }

A :dbcommand:`dropDatabase` command generates a
:ref:`drop event <change-streams-drop-event>` for each collection in
the database before generating a ``dropDatabase`` event for the database.

A ``dropDatabase`` event leads to an
:ref:`invalidate event <change-event-invalidate>` for change streams opened
against its ``ns.db`` database.

.. _change-event-invalidate:

``invalidate`` Event
--------------------

The following example illustrates an ``invalidate`` event:

.. code-block:: none

   {
      _id: { < Resume Token > },
      operationType: 'invalidate',
      clusterTime: <Timestamp>
   }

For change streams opened up against a collection, a
:ref:`drop event <change-streams-drop-event>`,
:ref:`rename event <change-streams-rename-event>`, or
:ref:`dropDatabase event <change-streams-dropDatabase-event>` that affects the
watched collection leads to an
:ref:`invalidate event <change-event-invalidate>`.

For change streams opened up against a database, a
:ref:`dropDatabase event <change-streams-dropDatabase-event>` that affects the
watched database leads to an
:ref:`invalidate event <change-event-invalidate>`.

``invalidate`` events close the change stream cursor.

.. include:: /includes/extracts/changestream-invalid-events.rst

