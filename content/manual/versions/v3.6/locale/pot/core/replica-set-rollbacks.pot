# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replica-set-rollbacks.txt:10
msgid "Rollbacks During Replica Set Failover"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:20
msgid "A rollback reverts write operations on a former :term:`primary` when the member rejoins its :term:`replica set` after a :term:`failover`. A rollback is necessary only if the primary had accepted write operations that the :term:`secondaries <secondary>` had **not** successfully replicated before the primary stepped down. When the primary rejoins the set as a secondary, it reverts, or \"rolls back,\" its write operations to maintain database consistency with the other members."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:29
msgid "MongoDB attempts to avoid rollbacks, which should be rare. When a rollback does occur, it is often the result of a network partition. Secondaries that can not keep up with the throughput of operations on the former primary, increase the size and impact of the rollback."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:35
msgid "A rollback does *not* occur if the write operations replicate to another member of the replica set before the primary steps down *and* if that member remains available and accessible to a majority of the replica set."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:41
msgid "Collect Rollback Data"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:43
msgid "When a rollback does occur, MongoDB writes the rollback data to :term:`BSON` files in the ``rollback/`` folder under the database's :setting:`~storage.dbPath` directory. The names of rollback files have the following form:"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:52
msgid "For example:"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:58
msgid "To read the contents of the rollback files, use :doc:`bsondump </reference/program/bsondump>`. Based on the content and the knowledge of their applications, administrators can decide the next course of action to take."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:66
msgid "Avoid Replica Set Rollbacks"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:68
msgid "For replica sets, the default :doc:`write concern {w: 1} </reference/write-concern>` only provides acknowledgement of write operations on the primary. With the default write concern, data may be rolled back if the primary steps down before the write operations have replicated to any of the secondaries."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:74
msgid "To prevent rollbacks of data that have been acknowledged to the client, run all voting members with journaling enabled and use :ref:`w: majority write concern <wc-w>` to guarantee that the write operations propagate to a majority of the replica set nodes before returning with acknowledgement to the issuing client."
msgstr ""

#: ../source/includes/extracts/no-journaling-rollback.rst:2
msgid "With :rsconf:`writeConcernMajorityJournalDefault` set to ``false``, MongoDB does not wait for :writeconcern:`w: \"majority\" <\"majority\">` writes to be written to the on-disk journal before acknowledging the writes. As such, :writeconcern:`majority` write operations could possibly roll back in the event of a transient loss (e.g. crash and restart) of a majority of nodes in a given replica set."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
msgid "Regardless of :doc:`write concern </reference/write-concern>`, other clients using :readconcern:`\"local\"` or :readconcern:`\"available\"` readConcern can see the result of a write operation before the write operation is acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:6
msgid "Clients using :readconcern:`\"local\"` or :readconcern:`\"available\"` readConcern can read data which may be subsequently :doc:`rolled back </core/replica-set-rollbacks>`."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:87
msgid "Rollback Limitations"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:89
msgid "A :binary:`~bin.mongod` instance will not rollback more than 300 megabytes of data. If your system must rollback more than 300 megabytes, you must manually intervene to recover the data. If this is the case, the following line will appear in your :binary:`~bin.mongod` log:"
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:99
msgid "In this situation, save the data directly or force the member to perform an initial sync. To force initial sync, sync from a \"current\" member of the set by deleting the content of the :setting:`~storage.dbPath` directory for the member that requires a larger rollback."
msgstr ""

#: ../source/core/replica-set-rollbacks.txt:104
msgid ":doc:`/core/replica-set-high-availability` and :doc:`/core/replica-set-elections`."
msgstr ""

