.. _java-whats-new:

==========
What's New
==========

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: java sync, backwards compatibility, update, version

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Learn what's new in:

* :ref:`Version 5.0 <version-5.0>`
* :ref:`Version 4.11 <version-4.11>`
* :ref:`Version 4.10 <version-4.10>`
* :ref:`Version 4.9 <version-4.9>`
* :ref:`Version 4.8 <version-4.8>`
* :ref:`Version 4.7.1 <version-4.7.1>`
* :ref:`Version 4.7.0 <version-4.7.0>`
* :ref:`Version 4.6 <version-4.6>`
* :ref:`Version 4.5.1 <version-4.5.1>`
* :ref:`Version 4.5 <version-4.5>`
* :ref:`Version 4.4 <version-4.4>`
* :ref:`Version 4.3 <version-4.3>`
* :ref:`Version 4.2 <version-4.2>`
* :ref:`Version 4.1 <version-4.1>`
* :ref:`Version 4.0 <version-4.0>`

.. _version-5.0:

What's New in 5.0
-----------------

.. warning:: Breaking changes in this release

  This driver version introduces breaking changes. For a list of these changes, see 
  the :ref:`Version 5.0 Breaking Changes section <java-breaking-changes-v5.0>` in the 
  Upgrade guide.

.. warning:: Deprecations in this release

   To avoid breaking changes in future major releases of the driver,
   replace any application code that depends on deprecated program elements.

This section includes the following information:

- :ref:`java-deprecations-5.0`
- :ref:`java-behavioral-changes-5.0`
- :ref:`java-new-features-5.0`

.. _java-deprecations-5.0:

Deprecations in 5.0
~~~~~~~~~~~~~~~~~~~

- The ``org.mongodb.scala.Observable.completeWithUnit()`` method is deprecated.
  This method is not useful anymore because
  the driver now exposes ``org.mongodb.scala.Observable[Unit]``
  instead of ``org.mongodb.scala.Observable[Void]``.
  This relates to a :ref:`breaking change about Observables in this release
  <java-breaking-changes-v5.0-observables>`.

.. _java-behavioral-changes-5.0:

Behavioral changes in 5.0
~~~~~~~~~~~~~~~~~~~~~~~~~

- The ``getElapsedTime()`` method on ``com.mongodb.event.ConnectionReadyEvent``
  includes the time taken to deliver the ``ConnectionCreatedEvent``. That is,
  the time returned includes the duration of the
  ``com.mongodb.event.ConnectionPoolListener.connectionCreated()`` method.

  The ``getElapsedTime()`` methods on
  ``com.mongodb.event.ConnectionCheckedOutFailedEvent`` and
  ``com.mongodb.event.ConnectionCheckedOutEvent`` include the time taken to
  deliver the ``com.mongodb.event.ConnectionCheckOutStartedEvent``. That is, the
  time returned includes the duration of the
  ``com.mongodb.eventConnectionPoolListener.connectionCheckOutStarted()`` method.

.. _java-new-features-5.0:

New features in 5.0
~~~~~~~~~~~~~~~~~~~

The 5.0 driver release introduces the following features:

- Adds support for the ``authorizedCollection`` option of
  the ``listCollections`` command. This was done by changing the
  ``com.mongodb.client.MongoDatabase.listCollectionNames()`` methods.
  The return type is now ``com.mongodb.client.ListCollectionNamesIterable``,
  while previously it was a ``MongoIterable<String>``.
  This change allows the return value to be
  configured using the ``ListCollectionNamesIterable.authorizedCollections()``
  method and specifying the ``authorizedCollections`` option. Equivalent changes
  were made to following classes and interfaces:

  - ``com.mongodb.reactivestreams.client.MongoDatabase``
  - ``org.mongodb.scala.MongoDatabase``
  - ``com.mongodb.kotlin.client.MongoDatabase``
  - ``com.mongodb.kotlin.client.coroutine.MongoDatabase``

  These changes introduce a :ref:`binary breaking change to the listCollectionsNames()
  method <java-breaking-changes-v5.0-list-collections>`. For more information
  about the ``MongoDatabase.listCollectionNames()`` method and the
  ``authorizedCollections`` option, see the
  :manual:`listCollections </reference/command/listCollections/>` Server manual
  page or :ref:`java-collection-names`.
  
.. _version-4.11:

What's New in 4.11
------------------

This section includes the following information:

- :ref:`java-deprecations-4.11`
- :ref:`java-new-features-4.11`

.. _java-deprecations-4.11:

Deprecations in 4.11
~~~~~~~~~~~~~~~~~~~~

.. warning:: Deprecations in this release

   To avoid breaking changes in future major releases of the driver,
   replace any application code that depends on deprecated methods and types.

The 4.11 driver release deprecates the following items:

- The ``getStats()`` and ``isCapped()`` instance methods of the
  ``DBCollection`` class are deprecated. The corresponding server
  commands are deprecated in MongoDB v6.2 and later. Use the ``$collStats``
  aggregation pipeline stage to retrieve the information provided by these
  methods instead. You can run the aggregation as shown in the following code
  example:

  .. code-block:: java

     Cursor cursor = collection.aggregate(Arrays.asList(
             new BasicDBObject("$collStats",
                     new BasicDBObject("storageStats", new BasicDBObject()))),
             AggregationOptions.builder().build()
     );

  To determine whether a collection is a capped collection, access the value
  of the ``storageStats.capped`` field returned by ``Cursor`` instance in the
  preceding example aggregation.

  To learn more about the ``$collStats`` aggregation operator, see the
  :manual:`$collStats (aggregation) </reference/operator/aggregation/collStats/>`
  Server manual entry.

- The following network address-related methods are deprecated and will be removed
  in v5.0:

  - The `ServerAddress <{+api+}/apidocs/mongodb-driver-core/com/mongodb/ServerAddress.html>`__
    methods ``getSocketAddress()`` and ``getSocketAddresses()``.

    Instead of ``getSocketAddress()``, use the ``getByName()`` instance
    method of ``java.net.InetAddress``.

    Instead of ``getSocketAddresses()``, use the ``getAllByName()`` instance
    method of ``java.net.InetAddress``.

  - The `UnixServerAddress <{+api+}/apidocs/mongodb-driver-core/com/mongodb/UnixServerAddress.html>`__
    method ``getUnixSocketAddress()``.

    Instead of ``getUnixSocketAddress()``, construct an instance of
    ``jnr.unixsocket.UnixSocketAddress``. Pass the full path of the UNIX
    socket file to the constructor. By default, MongoDB creates a UNIX
    socket file located at ``"/tmp/mongodb-27017.sock"``. To learn more
    about the ``UnixSocketAddress``, see the `UnixSocketAddress <https://www.javadoc.io/doc/com.github.jnr/jnr-unixsocket/latest/jnr/unixsocket/UnixSocketAddress.html>`__ API documentation.

- The following methods and types related to the
  `StreamFactory <https://mongodb.github.io/mongo-java-driver/4.10/apidocs/mongodb-driver-core/com/mongodb/connection/StreamFactory.html>`__
  interface are deprecated and scheduled for removal in v5.0:

  - ``streamFactoryFactory()`` method from ``MongoClientSettings.Builder``
  - ``getStreamFactoryFactory()`` method from ``MongoClientSettings``
  - ``NettyStreamFactoryFactory`` class
  - ``NettyStreamFactory`` class
  - ``AsynchronousSocketChannelStreamFactory`` class
  - ``AsynchronousSocketChannelStreamFactoryFactory`` class
  - ``BufferProvider`` class
  - ``SocketStreamFactory`` class
  - ``Stream`` class
  - ``StreamFactory`` class
  - ``StreamFactoryFactory`` class
  - ``TlsChannelStreamFactoryFactory`` class

  If you configure Netty by using
  ``MongoClientSettings.Builder.streamFactoryFactory()``, your code might resemble
  the following:

  .. code-block:: java
     :emphasize-lines: 6
     :copyable: false

     import com.mongodb.connection.netty.NettyStreamFactoryFactory;

     // ...

     MongoClientSettings settings = MongoClientSettings.builder()
             .streamFactoryFactory(NettyStreamFactoryFactory.builder().build())
             .build();

  Replace this code with the `TransportSettings.nettyBuilder() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/connection/TransportSettings.html>`__
  as shown in the following example:

  .. code-block:: java
     :emphasize-lines: 6

     import com.mongodb.connection.TransportSettings;

     // ...

     MongoClientSettings settings = MongoClientSettings.builder()
             .transportSettings(TransportSettings.nettyBuilder().build())
             .build();

.. _java-new-features-4.11:

New Features in 4.11
~~~~~~~~~~~~~~~~~~~~

New features of the 4.11 driver release include:

- Support for connecting to MongoDB by using a SOCKS5 proxy. To learn more
  see :ref:`java-connect-socks`.

- Fixed an issue related to how domain names are validated when you use proxy
  functionality, allowing you to use domain names with more than
  six characters in the top-level domain.

- Added the ``getSplitEvent()`` method to the ``ChangeStreamDocument`` class
  to identify fragments of a change stream event that exceeds 16MB. You must
  use the aggregation stage ``$changeStreamSplitLargeEvent`` in your change
  stream to handle events that exceed 16MB. To learn more, see :ref:`java-split-change-stream-events`.

- Added an aggregation stage builder for ``$vectorSearch``. To learn more, see :ref:`Atlas Vector Search <java-atlas-vector-search>`.

- Added Atlas Search index management helpers. To learn more, see :ref:`Atlas Search Indexes <search-indexes>`.

- Updated Snappy and Zstd compression library dependency versions. To learn
  more about the current dependency versions, see :ref:`network-compression`.
- Added ``getElapsedTime()`` methods to the following classes to monitor the
  duration of connection pool events:

  - `ConnectionCheckOutFailedEvent <{+api+}/apidocs/mongodb-driver-core/com/mongodb/event/ConnectionCheckOutFailedEvent.html>`__
  - `ConnectionCheckedOutEvent <{+api+}/apidocs/mongodb-driver-core/com/mongodb/event/ConnectionCheckedOutEvent.html>`__
  - `ConnectionReadyEvent <{+api+}/apidocs/mongodb-driver-core/com/mongodb/event/ConnectionReadyEvent.html>`__

- Support for Java 21 virtual threads and structured concurrency. The driver
  internals were updated to avoid unnecessary pinning of virtual threads
  and to preserve interrupted status of a thread, as the latter matters for
  structured concurrency where it is used for cancellation.

  To learn more about virtual threads, see the `Virtual Threads <https://openjdk.org/jeps/444>`__
  JDK enhancement proposal. To learn more about structured concurrency, see the
  `Structured Concurrency <https://openjdk.org/jeps/453>`__
  JDK enhancement proposal.

- Updated API documentation for the following types:

  - `ClusterListener <{+api+}/apidocs/mongodb-driver-core/com/mongodb/event/ClusterListener.html>`__
  - `ServerListener <{+api+}/apidocs/mongodb-driver-core/com/mongodb/event/ServerListener.html>`__
  - `ServerMonitorListener <{+api+}/apidocs/mongodb-driver-core/com/mongodb/event/ServerMonitorListener.html>`__

.. _version-4.10:

What's New in 4.10
------------------

New features of the 4.10 driver release include:

- Implementation of the ``Accumulators.percentile()`` and
  ``Accumulators.median()`` methods for statistical aggregations.
- Interfaces in the ``com.mongodb.client.model.search`` package are now
  marked as ``@Sealed`` instead of ``@Evolving``. Sealed interfaces must
  not be extended or implemented by consumers of the library.
- Resolved an issue where the driver emitted duplicate log messages for
  retry operations. The driver now correctly emits one log message for
  each retry operation.
- The ``org.bson.codecs.Parameterizable`` interface is deprecated. Instead of
  implementing this interface on a custom ``Codec`` type,
  override the ``CodecProvider.get()`` method on the
  codec's ``CodecProvider`` if the codec is intended for a parameterized
  type.
- Support for custom DNS resolvers.
- Support for :ref:`qe-manual-feature-qe` (QE). To learn
  more about the requirements for using the QE feature, see the
  :ref:`Queryable Encryption Driver Compatibility Table
  <qe-compatibility-reference>`.

.. _version-4.9:

What's New in 4.9
-----------------

.. important:: Aggregation Expression Operations Are in Beta

   This driver version introduces an API for creating
   :ref:`aggregation expressions <java-aggregation-expression-operations>`.
   This feature is in beta phase.

New features of the 4.9 driver release include:

- Added a new exception to identify when a constructor annotated by
  ``BsonCreator`` contains parameters with annotations other than
  ``BsonProperty`` or ``BsonId``.
- Changed the log message format for command monitoring messages reported
  by the ``org.mongodb.driver.protocol.command`` package.
- Added support for the ``$documents`` aggregation pipeline stage to the
  `Aggregates <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Aggregates#documents(java.util.List)>`__
  helper class.
- Added `MongoClientSettings.Builder.applyToLoggerSettings() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.Builder.html#applyToLoggerSettings(com.mongodb.Block)>`__
  and `LoggerSettings.Builder.maxDocumentLength() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/LoggerSettings.Builder.html#maxDocumentLength(int)>`__
  methods that let you specify a maximum length for the extended JSON representation of a
  BSON document in a log message.

.. _version-4.8:

What's New in 4.8
-----------------

.. warning:: Breaking Changes in v4.8

   The v4.8 driver contains breaking changes. See :ref:`<java-breaking-changes-v4.8>`
   and :ref:`<java-server-release-change-v4.8>` for more information.

.. important:: Deprecation Notice

   The ``MapCodec`` and ``IterableCodec`` classes are deprecated.
   Instead of ``MapCodec``, use ``MapCodecProvider``. Instead of ``IterableCodec``,
   use ``CollectionCodecProvider``, or ``IterableCodecProvider`` for ``Iterable``
   types that aren't ``Collection`` types.

Behavioral changes with the 4.8 driver release include:

- Requirement that you add an explicit dependency on the ``org.bson.codecs.record``
  module if your application deploys the driver in an OSGi container and
  relies on the driver for encoding and decoding Java records.
- Logging of new connection messages at the ``DEBUG`` level instead
  of at ``INFO``.

New features of the 4.8 driver release include:

- Support for authentication with AWS. The driver takes an
  optional dependency on both AWS SDK version 1 and version 2.
- Support for obtaining credentials from the environment for both GCP
  and Azure for in-use encryption.
- Support for deserialization of records containing components with
  generic parameters.
- Support for deserialization of records containing components with more
  specific container types, such as ``SortedSet``, ``NavigableMap``, ``LinkedList``,
  or ``TreeSet``.
- Support for recursive record types, records whose type
  definitions contain cycles.
- Inclusion of the ``disambiguatedPaths`` field in change stream update events
  when the ``showExpandedEvents`` server feature is enabled on MongoDB v6.1
  and later. Learn more about this field from the `getDisambiguatedPaths() <https://mongodb.github.io/mongo-java-driver/4.8/apidocs/mongodb-driver-core/com/mongodb/client/model/changestream/UpdateDescription.html#getDisambiguatedPaths()>`__
  API documentation. Learn more about the ``showExpandedEvents`` setting from
  the :manual:`Expanded Events </reference/change-events/#expanded-events>`
  server documentation.

.. _version-4.7.1:
.. _version-4.7:

What's New in 4.7.1
-------------------

The 4.7.1 driver patches a bug that affects
Client-Side Field Level Encryption and Queryable Encryption.
The bug can cause data corruption when rotating :ref:`Data Encryption Keys <csfle-key-architecture>`
(DEKs) encrypted with a :ref:`Customer Master Key <csfle-key-architecture>`
hosted on Google Cloud Key Management Service or Azure
Key Vault. The bug was present in version 4.7.0 of the driver
in the ``RewrapManyDataKey`` method and causes the
loss of your DEKs.

.. important:: Back Up your Key Vault Collection

   Always back up your :ref:`Key Vault Collection <csfle-reference-key-vault>`
   before you rotate your DEKs. If you lose your DEKs, you lose access to all
   the data encrypted with those keys.

.. _version-4.7.0:

What's New in 4.7
-----------------

.. warning:: Breaking Changes in v4.7

   The v4.7 driver contains breaking changes. See :ref:`<java-breaking-changes-v4.7>`
   for more information.

New features of the 4.7 driver release include:

- Added full support for MongoDB 6.0.

- Added the following change stream support improvements:

  - Enhanced pre-image and post-image support for :ref:`change streams <java-usage-watch>`.
    Change stream watch helpers now accept ``whenAvailable`` and ``required``
    for the ``fullDocument`` option. See the :manual:`change stream </changeStreams/#change-streams-with-document-pre--and-post-images>`
    reference documentation for more information.
  - Added a new ``fullDocumentBeforeChange`` option, which accepts
    ``whenAvailable`` and ``required``.
  - Change events now include a ``fullDocumentBeforeChange``  field
    when configured for display on your MongoDB collection.
  - Added ``showExpandedEvents`` support for change streams.
  - Added ``wallTime`` support to the ``ChangeStreamDocument`` class.

- Added :ref:`clustered index <java-clustered-indexes>` creation support.
- Support for new features related to :ref:`qe-manual-feature-qe`,
  including support for automatic encryption (MongoDB v6.0 Enterprise or later
  is required) and manual encryption.

  - Support for the new Queryable Encryption shared library, which removes the need
    for the ``mongocryptd`` process. The queryable encryption shared library requires
    `org.mongodb:mongodb-crypt <https://mvnrepository.com/artifact/org.mongodb/mongodb-crypt>`__
    version ``1.5.1.1`` or later.

- Added a new API for encryption key management.

- Added builder API methods for more aggregation stages
  including :pipeline:`$search`/:pipeline:`$searchMeta` (Atlas only),
  :pipeline:`$densify`, and :pipeline:`$fill`. Learn more about these
  methods on the :ref:`Aggregates Builder <aggregates-builders>` page.

- Added the ``BsonExtraElements`` annotation that can be used with POJO encoding
  and decoding. ``BsonExtraElements`` enables decoding objects that might receive
  new fields in the future without requiring developers to explicitly map
  those new fields.

- Performance optimizations including:

  - Lock-free implementations of the server session pool and the buffer pool.
  - A new cleanup implementation of ``DBCursor`` that uses Java's
    Cleaner API instead of finalization, available in Java 9 or later.

- The :ref:`setWindowFields <builders-aggregates-setWindowFields>` builder API
  is no longer a beta feature. Changes in the API break both binary and source
  compatibility. See :ref:`<java-breaking-changes-v4.7>` for more information.

.. _version-4.6:

What's New in 4.6
-----------------

New features of the 4.6 Java driver release include:

- The buffer pool is now shared across all ``MongoClient`` instances. The
  buffer pool prunes buffers that have been idle for one minute.
- Added an API to specify suppliers for AWS KMS credentials for
  Client-Side Field Level Encryption (CSFLE). See the
  `AutoEncryptionSettings.Builder.kmsProviderPropertySuppliers() <https://mongodb.github.io/mongo-java-driver/4.6/apidocs/mongodb-driver-core/com/mongodb/AutoEncryptionSettings.Builder.html#kmsProviderPropertySuppliers(java.util.Map)>`__
  and the `ClientEncryptionSettings.Builder.kmsProviderPropertySuppliers() <https://mongodb.github.io/mongo-java-driver/4.6/apidocs/mongodb-driver-core/com/mongodb/ClientEncryptionSettings.html#getKmsProviderPropertySuppliers()>`__
  API documentation for more information.
- Added compatibility to ``org.mongodb:mongodb-crypt``, a dependency for
  CSFLE, for Apple M1 ARM-based hardware.
- Added a service provider interface (SPI) to allow the driver to specify
  a custom DNS client. See the `DnsClient <https://mongodb.github.io/mongo-java-driver/4.6/apidocs/mongodb-driver-core/com/mongodb/spi/dns/DnsClient.html>`__
  and the `DnsClientProvider <https://mongodb.github.io/mongo-java-driver/4.6/apidocs/mongodb-driver-core/com/mongodb/spi/dns/DnsClientProvider.html>`__
  interface API documentation for more information.
- Added driver support for encoding and decoding between `Java records <https://docs.oracle.com/en/java/javase/17/language/records.html>`__
  and BSON documents, which is enabled by default. See :ref:`<fundamentals-records>`
  for more information.

.. _version-4.5:
.. _version-4.5.1:

What's New in 4.5.1
-------------------

If the DNS server returns an NXDomain error,
indicating a non-existent domain, the 4.5.1
driver no longer throws an exception.

.. _version-4.5.0:

What's New in 4.5
-----------------

New features of the 4.5 Java driver release include:

- Added support for specifying custom service names of SRV resource
  records. See the ``srvServiceName`` setting in the :ref:`Connection
  Options <connection-options>` guide for more information.
- Added support to customize UUID representation in a codec registry using
  the ``CodecRegistries.withUuidRepresentation()`` method.
- Added support for overriding listener settings in ``ClusterSettings``,
  ``ServerSettings`` and ``ConnectionPoolSettings`` builders.
- All events received by ``ClusterListener``, ``ServerListener``, and
  ``ServerMonitorListener`` are now totally ordered using
  a happens-before relationship when the listeners are not shared by
  different MongoClient instances. To learn more about the happens-before
  ordering, see `Happens-before Order <https://docs.oracle.com/javase/specs/jls/se17/html/jls-17.html#jls-17.4.5>`__
  in the Java Language Specification.
- Added ``EnumCodec`` and ``EnumCodecProvider`` classes to separate codec
  support for ``enum`` types from the ``PojoCodec`` class. The default
  codec registries, which you can access from the ``MongoClientSettings`` and the ``Bson``
  interfaces, now include the ``enum`` codec classes. If your application uses
  a custom enumeration codec and one of the default registries, ensure
  you order them as described in the section on :ref:`overriding codecs <codecs-override>`.
- Resolved performance issues that impacted versions 4.4 and 4.3 of the
  driver. Performance in this version is similar to performance in 4.2.
- Resolved an issue in which errors originating from retrieving the cluster
  description weren't passed to the ``onError`` Subscriber callback
- Resolved an issue with releasing ``ByteBuf`` instances when you connect
  with compression enabled.
- Removed an unnecessary dependency on the ``javax.annotation.*`` packages
  from the ``org.mongodb.driver-core`` OSGi bundle.

.. _version-4.4:

What's New in 4.4
-----------------

New features of the 4.4 Java driver release include:

- Compatibility with MongoDB 5.1 and support for Java 17
- Added support for index hints in an ``AggregateIterable``
- Added support for the ``$merge`` and ``$out`` aggregation stages on secondaries
- Use of the ``mergeObjects()`` method in the ``Updates`` builder
- ``DocumentCodec`` does not ignore a :ref:`CodecRegistry <codecs-codecregistry>` when writing to an ``Iterable`` or a ``Map`` instance

.. _version-4.3:

What's New in 4.3
-----------------

New features of the 4.3 Java driver release include:

- Added support for the MongoDB {+stable-api+}. For more information, see our
  :ref:`{+stable-api+} guide <stable-api-java>`.

  .. note::

     Starting from February 2022, the **Versioned API** is known the
     **{+stable-api+}**. All concepts and features remain the same with this
     naming change.

- Added support for connection to
  `MongoDB Atlas Serverless Instances <https://www.mongodb.com/use-cases/serverless>`__.
  For more information about setup, see our documentation on how to
  :atlas:`Create a New Serverless Instance </tutorial/create-new-serverless-instance/?jmp=docs_driver_java>`
- Added a builder API for the ``setWindowFields`` pipeline stage to allow the use of window operators
- Added support for setting Netty `io.netty.handler.ssl.SslContext <https://netty.io/4.1/api/io/netty/handler/ssl/SslContext.html>`__
- Added support for snapshot reads to ``ClientSession``
- Limited the rate of establishing new connections per connection pool
- Removed most restrictions on allowed characters in the field names of documents you insert or replace. This is a behavioral change for any application that is relying on client-side enforcement of these restrictions.

The following table shows the restriction status on allowed characters
in the field names of documents:

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 15 25 60

   * - Character
     - Operation
     - Description

   * - **.**
     - Insert and Replace
     - Removed restrictions on field names containing this character.

   * - **$**
     - Insert
     - Removed restrictions on field names starting with this character.

   * - **$**
     - Replace
     - Removed restrictions in nested documents on field names containing this character.

   * - **$**
     - Replace
     - Kept restrictions in top-level documents on field names starting with this character. This prevents accidental use of a replace operation when the intention was to use an update operation.

.. note::

   Unacknowledged writes using dollar-prefixed or dotted keys might
   be silently rejected by pre-5.0 servers, where some restrictions on
   field names are still enforced in the server.

.. _version-4.2:

What's New in 4.2
-----------------

.. warning:: Breaking Changes in v4.2

   The v4.2 driver contains breaking changes. See :ref:`<java-breaking-changes-v4.2>`
   for more information.

New features of the 4.2 Java driver release include:

- Added Azure and GCP key stores to client-side field level encryption
- Added Kerberos caching tickets for reuse in multiple authentication requests
- Added `MongoClients <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/mongodb-driver-sync/com/mongodb/client/MongoClients.html>`_ instances with ``MongoClientSettings`` or ``ConnectionString`` as the configuration
- Use of the ``explain()`` method on `find <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#explain()>`_ and `aggregate <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/mongodb-driver-sync/com/mongodb/client/AggregateIterable.html#explain()>`_ commands
- Added a `JsonObject <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/bson/org/bson/json/JsonObject.html>`_ class to make encoding from and decoding to JSON more efficient by avoiding an intermediate Map representation
- Added a `BsonRepresentation <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/bson/org/bson/codecs/pojo/annotations/BsonRepresentation.html>`_ annotation that allows you to represent the ``ObjectId`` BSON values as a ``String`` in `POJO <https://en.wikipedia.org/wiki/Plain_old_Java_object>`_ classes
- Added a `Filters.empty() <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html#empty()>`_ method

.. _version-4.1:

What's New in 4.1
-----------------

New features of the 4.1 Java driver release include:

- Significant reduction in client-perceived failover times during planned maintenance events
- The `update() <https://mongodb.github.io/mongo-java-driver/4.1/apidocs/mongodb-driver-core/com/mongodb/client/model/UpdateOptions.html#hint(org.bson.conversions.Bson)>`_ and `delete() <https://mongodb.github.io/mongo-java-driver/4.1/apidocs/mongodb-driver-core/com/mongodb/client/model/DeleteOptions.html#hint(org.bson.conversions.Bson)>`_ methods now support index hints
- The ``find()`` method supports `allowDiskUse() <https://mongodb.github.io/mongo-java-driver/4.1/apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#allowDiskUse(java.lang.Boolean)>`_ for sorts that require too much memory to execute in RAM
- Added support for the MONGODB-AWS authentication mechanism using Amazon Web Services (AWS) Identity and Access Management (IAM) credentials
- Authentication requires fewer round trips to the server, resulting in faster connection setup

.. _version-4.0:

What's New in 4.0
-----------------

.. warning:: Breaking Changes in v4.0

   The v4.0 driver contains breaking changes. See :ref:`<java-breaking-changes-v4.0>`
   for more information.

This release adds no new features.
