collection: "restaurants"
options:
  show_title: False
  show_collection: False
content:
  source:
    file: example-query-all.yaml
    ref: restaurant-data
ref: restaurant-index-example-coll
edition:
  - shell
  - python
  - node
  - cpp
---
source:
  file: examples-index-base.yaml
  ref: _single-field-index
ref: single-field-index
edition: shell
operation:
  - language: javascript
    code: |
      db.restaurants.createIndex( { "cuisine": 1 } )
results: |
  {
    "createdCollectionAutomatically" : false,
    "numIndexesBefore" : 1,
    "numIndexesAfter" : 2,
    "ok" : 1
  }
post: |
  The method returns a document with the status of the operation.
final: |
  Upon successful index creation, the ``"numIndexesAfter"`` value is
  one greater than the ``"numIndexesBefore"`` value.
---
source:
  file: examples-index-base.yaml
  ref: _create-compound-index
ref: create-compound-index
edition: shell
operation:
  - language: javascript
    code: |
      db.restaurants.createIndex( { "cuisine": 1, "address.zipcode": -1 } )
results: |
  {
     "createdCollectionAutomatically" : false,
     "numIndexesBefore" : 2,
     "numIndexesAfter" : 3,
     "ok" : 1
  }
post: |
  The method returns a document with the status of the operation.
final: |
  Upon successful index creation, the ``"numIndexesAfter"`` value is
  one greater than the ``"numIndexesBefore"`` value.
---
source:
  file: examples-index-base.yaml
  ref: _single-field-index
ref: single-field-index
edition: python
operation:
  language: python
  code: |
    import pymongo
    db.restaurants.create_index([("cuisine", pymongo.ASCENDING)])
results: |
  "u'cuisine_1'"
post: |
  The method returns the name of the created index.
---
source:
  file: examples-index-base.yaml
  ref: _create-compound-index
ref: create-compound-index
edition: python
operation:
  language: python
  code: |
    import pymongo
    db.restaurants.create_index([
        ("cuisine", pymongo.ASCENDING),
        ("address.zipcode", pymongo.DESCENDING)
    ])
results: |
  "u'cuisine_1_address.zipcode_-1'"
post: |
  The method returns the name of the created index.
---
source:
  file: examples-index-base.yaml
  ref: _single-field-index
ref: single-field-index
edition: node
operation:
  - pre: |
      Define an ``indexRestaurants`` function as follows:
    language: javascript
    code: |
      var indexRestaurants = function(db, callback) {
         db.collection('restaurants').createIndex( 
            { "cuisine": 1 },
            null,
            function(err, results) {
               console.log(results);
               callback();
            }
         );
      };
  - pre: |
      Call the ``indexRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);
        indexRestaurants(db, function() {
            db.close();
        });
      });
post: |
  The method returns the name of the created index ``cuisine_1``.
---
source:
  file: examples-index-base.yaml
  ref: _create-compound-index
ref: create-compound-index
edition: node
operation:
  - pre: |
      Define an ``indexRestaurants`` function as follows:
    language: javascript
    code: |
      var indexRestaurants = function(db, callback) {
         db.collection('restaurants').createIndex( 
            { "cuisine": 1, "address.zipcode": -1 },
            null,
            function(err, results) {
               console.log(results);
               callback();
            }
         );
      };
  - pre: |
      Call the ``indexRestaurants`` function.
    language: javascript
    code: |
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);
        indexRestaurants(db, function() {
            db.close();
        });
      });
post: |
  The method returns the name of the created index ``cuisine_1_address.zipcode_-1``.
---
source:
  file: examples-index-base.yaml
  ref: _single-field-index
ref: single-field-index
edition: cpp
operation:
  literalinclude: includes/example-cpp-single-field-index.cpp
  language: cpp
---
source:
  file: examples-index-base.yaml
  ref: _create-compound-index
ref: create-compound-index
edition: cpp
operation:
  literalinclude: includes/example-cpp-create-compound-index.cpp
  language: cpp
...
