================
grantRolesToRole
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: grantRolesToRole

   Grants roles to a :ref:`user-defined role <user-defined-roles>`.

   The :dbcommand:`grantRolesToRole` command affects roles on the
   database where the command runs. :dbcommand:`grantRolesToRole` has
   the following syntax:

   .. code-block:: javascript

      { grantRolesToRole: "<role>",
        roles: [
                   { role: "<role>", db: "<database>" },
                   ...
               ],
        writeConcern: { <write concern> }
      }

   The :dbcommand:`grantRolesToRole` command has the following fields:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``grantRolesToRole``
   
        - string
   
        - The name of a role to add subsidiary roles.
          
          
   
      * - ``roles``
   
        - array
   
        - An array of roles from which to inherit.
          
          
   
      * - ``writeConcern``
   
        - document
   
        - Optional. The level of :doc:`write concern </reference/write-concern>` for the
          modification. The ``writeConcern`` document takes the same
          fields as the :dbcommand:`getLastError` command.
          
          
   


   .. |local-cmd-name| replace:: :dbcommand:`grantRolesToRole`
   .. include:: /includes/fact-roles-array-contents.rst

Behavior
--------

A role can inherit privileges from other roles in its database. A role
created on the ``admin`` database can inherit privileges from roles in
any database.

Required Access
---------------

.. include:: /includes/access-grant-roles.rst

Example
-------


The following :dbcommand:`grantRolesToRole` command updates the
``productsReaderWriter`` role in the ``products`` database to :ref:`inherit
<inheritance>` the :ref:`privileges <privileges>` of the ``productsReader``
role in the ``products`` database:

.. code-block:: javascript

   use products
   db.runCommand(
      { grantRolesToRole: "productsReaderWriter",
        roles: [
                 "productsReader"
        ],
        writeConcern: { w: "majority" , wtimeout: 5000 }
      }
   )
