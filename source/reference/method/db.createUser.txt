===============
db.createUser()
===============

.. default-domain:: mongodb

Definition
----------

.. method:: db.createUser ( user, writeConcern )

   Creates a new user for the database where the method runs. :method:`db.createUser()`
   returns a *duplicate user* error if the user already exists on the database.

   The :method:`db.createUser()` method has the following syntax:

   .. include:: /reference/method/db.createUser-param.rst

   The ``user`` document defines the user and has the following form:

   .. code-block:: javascript

      { user: "<name>",
        pwd: "<cleartext password>",
        customData: { <any information> },
        roles: [
          { role: "<role>", db: "<database>" } | "<role>",
          ...
        ]
      }

   The ``user`` document has the following fields:

   .. |local-cmd-name| replace:: :method:`db.createUser()`
   .. include:: /reference/method/db.createUser-user-doc-param.rst

   .. include:: /includes/fact-roles-array-contents.rst

   The :method:`db.createUser()` method wraps the :dbcommand:`createUser`
   command.

Behavior
--------

Encryption
~~~~~~~~~~

:method:`db.createUser()` sends password to the MongoDB instance
*without* encryption. To encrypt the password during transmission,
use :doc:`SSL </tutorial/configure-ssl>`.

External Credentials
~~~~~~~~~~~~~~~~~~~~

Users created on the ``$external`` database should have credentials
stored externally to MongoDB, as, for example, with :doc:`MongoDB
Enterprise installations that use Kerberos
</tutorial/control-access-to-mongodb-with-kerberos-authentication>`.

Required Access
---------------

.. include:: /includes/access-create-user.rst

Example
-------

The following :method:`db.createUser()` operation creates the
``accountAdmin01`` user on the ``products`` database.

.. code-block:: javascript

   use products
   db.createUser( { "user" : "accountAdmin01",
                    "pwd": "cleartext password",
                    "customData" : { employeeId: 12345 },
                    "roles" : [ { role: "clusterAdmin", db: "admin" },
                                { role: "readAnyDatabase", db: "admin" },
                                "readWrite"
                                ] },
                  { w: "majority" , wtimeout: 5000 } )

The operation gives ``accountAdmin01`` the following roles:

- the ``clusterAdmin`` and ``readAnyDatabase`` roles on the ``admin``
  database

- the ``readWrite`` role on the ``products`` database
