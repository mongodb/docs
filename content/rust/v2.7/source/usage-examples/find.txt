.. _rust-find-usage:

=======================
Find Multiple Documents
=======================

You can query for multiple documents in a collection by calling the
`find() <{+api+}/struct.Collection.html#method.find>`__ method on a
``Collection`` instance.

Pass a query filter to the ``find()`` method to return documents in the collection
that match the filter. If you do not include a filter, MongoDB returns all the
documents in the collection.

.. tip::

   To learn more about retrieving documents,
   see the :ref:`rust-retrieve-guide` guide, and to learn more about
   creating query filters, see the :ref:`rust-query-guide` guide.

The ``find()`` method returns a `Cursor <{+api+}/struct.Cursor.html>`__
type, which you can iterate through to retrieve individual documents. To
learn more about using cursors, see the :ref:`rust-cursor-guide` guide.

Example
-------

This example retrieves documents that match a query filter from the ``restaurants``
collection in the ``sample_restaurants`` database. The example populates
instances of the ``Restaurant`` struct with data from the retrieved
documents.

The following code uses a query filter that matches documents in which the value
of the ``cuisine`` field is ``"French"``.

Select the :guilabel:`Asynchronous` or :guilabel:`Synchronous` tab to
see the corresponding code for each runtime:

.. tabs::

   .. tab:: Asynchronous
      :tabid: find-async

      .. io-code-block::
         :copyable: true

         .. input:: /includes/usage-examples/code-snippets/find-async.rs
            :language: rust
            :dedent:

         .. output::
            :language: console
            :visible: false

            // Results truncated
            ...
            Restaurant { name: "Cafe Un Deux Trois", cuisine: "French" }
            Restaurant { name: "Calliope", cuisine: "French" }
            ...

   .. tab:: Synchronous
      :tabid: find-sync

      .. io-code-block::
         :copyable: true

         .. input:: /includes/usage-examples/code-snippets/find-sync.rs
            :language: rust
            :dedent:

         .. output::
            :language: console
            :visible: false

            // Results truncated
            ...
            Restaurant { name: "Cafe Un Deux Trois", cuisine: "French" }
            Restaurant { name: "Calliope", cuisine: "French" }
            ...
