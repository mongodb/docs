ref: agg-operators-trigonometry
content: |

   .. include:: /includes/intro-aggregation-trigonometry.rst

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$sin`
        - Returns the sine of a value that is measured in radians.

      * - :expression:`$cos`
        - Returns the cosine of a value that is measured in radians.

      * - :expression:`$tan`
        - Returns the tangent of a value that is measured in radians.

      * - :expression:`$asin`
        - Returns the inverse sin (arc sine) of a value in radians.

      * - :expression:`$acos`
        - Returns the inverse cosine (arc cosine) of a value in radians.

      * - :expression:`$atan`
        - Returns the inverse tangent (arc tangent) of a value in 
          radians.

      * - :expression:`$atan2`
        - Returns the inverse tangent (arc tangent) of ``y / x`` in
          radians, where ``y`` and ``x`` are the first and second 
          values passed to the expression respectively.

      * - :expression:`$asinh`
        - Returns the inverse hyperbolic sine (hyperbolic arc sine) of a 
          value in radians.

      * - :expression:`$acosh`
        - Returns the inverse hyperbolic cosine (hyperbolic arc cosine)
          of a value in radians.

      * - :expression:`$atanh`
        - Returns the inverse hyperbolic tangent (hyperbolic arc
          tangent) of a value in radians.

      * - :expression:`$sinh`
        - Returns the hyperbolic sine of a value that is measured in
          radians.

      * - :expression:`$cosh`
        - Returns the hyperbolic cosine of a value that is measured in
          radians.

      * - :expression:`$tanh`
        - Returns the hyperbolic tangent of a value that is measured in
          radians.

      * - :expression:`$degreesToRadians`
        - Converts a value from degrees to radians.

      * - :expression:`$radiansToDegrees`
        - Converts a value from radians to degrees.

---
ref: agg-operators-arithmetic
content: |

   .. include:: /includes/intro-aggregation-arithmetic.rst

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description
        
      * - :expression:`$abs`
        - Returns the absolute value of a number.

      * - :expression:`$add`

        - Adds numbers to return the sum, or adds numbers and a date to
          return a new date. If adding numbers and a date, treats the
          numbers as milliseconds. Accepts any number of argument
          expressions, but at most, one expression can resolve to a
          date.

      * - :expression:`$ceil`
        - Returns the smallest integer greater than or equal to the specified number.

      * - :expression:`$divide`

        - Returns the result of dividing the first number by the
          second. Accepts two argument expressions.

      * - :expression:`$exp`
        - Raises *e* to the specified exponent.

      * - :expression:`$floor`

        - Returns the largest integer less than or equal to the
          specified number.

      * - :expression:`$ln`
        - Calculates the natural log of a number.

      * - :expression:`$log`
        - Calculates the log of a number in the specified base.

      * - :expression:`$log10`
        - Calculates the log base 10 of a number.

      * - :expression:`$mod`

        - Returns the remainder of the first number divided by the
          second. Accepts two argument expressions.

      * - :expression:`$multiply`

        - Multiplies numbers to return the product. Accepts any number
          of argument expressions.

      * - :expression:`$pow`
        - Raises a number to the specified exponent.

      * - :expression:`$round`
        - Rounds a number to to a whole integer *or* to a specified
          decimal place.

      * - :expression:`$sqrt`

        - Calculates the square root.

      * - :expression:`$subtract`

        - Returns the result of subtracting the second value from the
          first. If the two values are numbers, return the difference.
          If the two values are dates, return the difference in
          milliseconds. If the two values are a date and a number in
          milliseconds, return the resulting date. Accepts two argument
          expressions. If the two values are a date and a number,
          specify the date argument first as it is not meaningful to
          subtract a date from a number.

      * - :expression:`$trunc`
        - Truncates a number to a whole integer *or* to a specified 
          decimal place.

---
ref: agg-operators-array
content: |

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$arrayElemAt`

        - Returns the element at the specified array index.
  
      * - :expression:`$arrayToObject`

        - Converts an array of key value pairs to a document.

      * - :expression:`$concatArrays`

        - Concatenates arrays to return the concatenated array.

      * - :expression:`$filter`

        - Selects a subset of the array to return an array with only
          the elements that match the filter condition.

      * - :expression:`$first`

        - Returns the first array element. Distinct from :group:`$first` accumulator.
  
      * - :expression:`$in`

        - Returns a boolean indicating whether a specified value is in
          an array.

      * - :expression:`$indexOfArray`

        - Searches an array for an occurrence of a specified value and
          returns the array index of the first occurrence. If the
          substring is not found, returns ``-1``.

      * - :expression:`$isArray`

        - Determines if the operand is an array. Returns a boolean.

      * - :expression:`$last`

        - Returns the last array element. Distinct from :group:`$last` accumulator.

      * - :expression:`$map`

        - Applies a subexpression to each element of an array and
          returns the array of resulting values in order. Accepts named
          parameters.

      * - :expression:`$objectToArray`

        - Converts a document to an array of documents representing
          key-value pairs.

      * - :expression:`$range`

        - Outputs an array containing a sequence of integers according
          to user-defined inputs.

      * - :expression:`$reduce`

        - Applies an expression to each element in an array and
          combines them into a single value.

      * - :expression:`$reverseArray`

        - Returns an array with the elements in reverse order.

      * - :expression:`$size`

        - Returns the number of elements in the array. Accepts a single
          expression as argument.

      * - :expression:`$slice`

        - Returns a subset of an array.

      * - :expression:`$zip`

        - Merge two arrays together.

---
ref: agg-operators-comparison
content: |

   .. include:: /includes/intro-aggregation-comparison.rst

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$cmp`

        - Returns ``0`` if the two values are equivalent, ``1`` if the
          first value is greater than the second, and ``-1`` if the
          first value is less than the second.

      * - :expression:`$eq`

        - Returns ``true`` if the values are equivalent.

      * - :expression:`$gt`

        - Returns ``true`` if the first value is greater than the
          second.

      * - :expression:`$gte`

        - Returns ``true`` if the first value is greater than or equal
          to the second.

      * - :expression:`$lt`

        - Returns ``true`` if the first value is less than the second.

      * - :expression:`$lte`

        - Returns ``true`` if the first value is less than or equal to
          the second.

      * - :expression:`$ne`

        - Returns ``true`` if the values are *not* equivalent.

---
ref: agg-operators-boolean
content: |

   .. include:: /includes/intro-aggregation-boolean.rst

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$and`

        - Returns ``true`` only when *all* its expressions evaluate to
          ``true``. Accepts any number of argument expressions.

      * - :expression:`$not`

        - Returns the boolean value that is the opposite of its
          argument expression. Accepts a single argument expression.

      * - :expression:`$or`

        - Returns ``true`` when *any* of its expressions evaluates to
          ``true``. Accepts any number of argument expressions.

---
ref: agg-operators-conditional
content: |

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$cond`

        - A ternary operator that evaluates one expression, and
          depending on the result, returns the value of one of the
          other two expressions. Accepts either three expressions in an
          ordered list or three named parameters.

      * - :expression:`$ifNull`

        - Returns either the non-null result of the first expression or
          the result of the second expression if the first expression
          results in a null result. Null result encompasses instances
          of undefined values or missing fields. Accepts two
          expressions as arguments. The result of the second expression
          can be null.

      * - :expression:`$switch`

        - Evaluates a series of case expressions. When it finds an
          expression which evaluates to ``true``, ``$switch`` executes
          a specified expression and breaks out of the control flow.
---
ref: agg-operators-data-size
content: |

   The following operators return the size of a data element:

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$binarySize`
        - Returns the size of a given string or binary data value's
          content in bytes.

      * - :expression:`$bsonSize`
        - Returns the size in bytes of a given document (i.e. bsontype
          ``Object``) when encoded as :term:`BSON`.

---
ref: agg-operators-date
content: |

   The following operators returns date objects or components of a date
   object:

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$dateAdd`

        - Adds a number of time units to a date object.

      * - :expression:`$dateDiff`

        - Returns the difference between two dates.

      * - :expression:`$dateFromParts`

        - Constructs a BSON Date object given the date's constituent
          parts.

      * - :expression:`$dateFromString`

        - Converts a date/time string to a date object.

      * - :expression:`$dateSubtract`

        - Subtracts a number of time units from a date object.

      * - :expression:`$dateToParts`

        - Returns a document containing the constituent parts of a date.

      * - :expression:`$dateToString`

        - Returns the date as a formatted string.

      * - :expression:`$dayOfMonth`

        - Returns the day of the month for a date as a number between 1
          and 31.

      * - :expression:`$dayOfWeek`

        - Returns the day of the week for a date as a number between 1
          (Sunday) and 7 (Saturday).

      * - :expression:`$dayOfYear`

        - Returns the day of the year for a date as a number between 1
          and 366 (leap year).

      * - :expression:`$hour`

        - Returns the hour for a date as a number between 0 and 23.

      * - :expression:`$isoDayOfWeek`

        - Returns the weekday number in ISO 8601 format, ranging from
          ``1`` (for Monday) to ``7`` (for Sunday).

      * - :expression:`$isoWeek`

        - Returns the week number in ISO 8601 format, ranging from
          ``1`` to ``53``. Week numbers start at ``1`` with the week
          (Monday through Sunday) that contains the year's first
          Thursday.

      * - :expression:`$isoWeekYear`

        - Returns the year number in ISO 8601 format. The year starts
          with the Monday of week 1 (ISO 8601) and ends with the Sunday
          of the last week (ISO 8601).

      * - :expression:`$millisecond`

        - Returns the milliseconds of a date as a number between 0 and
          999.

      * - :expression:`$minute`

        - Returns the minute for a date as a number between 0 and 59.

      * - :expression:`$month`

        - Returns the month for a date as a number between 1 (January)
          and 12 (December).

      * - :expression:`$second`

        - Returns the seconds for a date as a number between 0 and 60
          (leap seconds).

      * - :expression:`$toDate`

        - Converts value to a Date.

          .. versionadded:: 4.0

      * - :expression:`$week`

        - Returns the week number for a date as a number between 0 (the
          partial week that precedes the first Sunday of the year) and
          53 (leap year).

      * - :expression:`$year`

        - Returns the year for a date as a number (e.g. 2014).



   The following arithmetic operators can take date operands:

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$add`

        - Adds numbers and a date to return a new date. If adding
          numbers and a date, treats the numbers as milliseconds.
          Accepts any number of argument expressions, but at most, one
          expression can resolve to a date.

      * - :expression:`$subtract`

        - Returns the result of subtracting the second value from the
          first. If the two values are dates, return the difference in
          milliseconds. If the two values are a date and a number in
          milliseconds, return the resulting date. Accepts two argument
          expressions. If the two values are a date and a number,
          specify the date argument first as it is not meaningful to
          subtract a date from a number.

---
ref: agg-operators-miscellaneous
content: |

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$rand`
        - Returns a random float between 0 and 1

      * - :expression:`$sampleRate`

        - Randomly select documents at a given rate. Although the exact
          number of documents selected varies on each run, the quantity
          chosen approximates the sample rate expressed as a percentage
          of the total number of documents.

---
ref: agg-operators-objects
content: |

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$mergeObjects`

        - Combines multiple documents into a single document.

          .. versionadded:: 3.6

      * - :expression:`$objectToArray`

        - Converts a document to an array of documents representing
          key-value pairs.

          .. versionadded:: 3.6

---
ref: agg-operators-set
content: |

   .. include:: /includes/intro-aggregation-set.rst

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$allElementsTrue`

        - Returns ``true`` if *no* element of a set evaluates to
          ``false``, otherwise, returns ``false``. Accepts a single
          argument expression.

      * - :expression:`$anyElementTrue`

        - Returns ``true`` if *any* elements of a set evaluate to
          ``true``; otherwise, returns ``false``. Accepts a single
          argument expression.

      * - :expression:`$setDifference`

        - Returns a set with elements that appear in the first set
          but not in the second set; i.e. performs a `relative
          complement
          <http://en.wikipedia.org/wiki/Complement_(set_theory)>`_
          of the second set relative to the first. Accepts exactly
          two argument expressions.


      * - :expression:`$setEquals`

        - Returns ``true`` if the input sets have the same distinct
          elements. Accepts two or more argument expressions.

      * - :expression:`$setIntersection`

        - Returns a set with elements that appear in *all* of the
          input sets. Accepts any number of argument expressions.

      * - :expression:`$setIsSubset`

        - Returns ``true`` if all elements of the first set appear
          in the second set, including when the first set equals the
          second set; i.e. not a `strict subset
          <http://en.wikipedia.org/wiki/Subset>`_. Accepts exactly
          two argument expressions.

      * - :expression:`$setUnion`

        - Returns a set with elements that appear in *any* of the
          input sets.

---
ref: agg-operators-string
content: |

   .. |exp-has| replace:: String expressions, with the exception of
      :expression:`$concat`, only have

   .. include:: /includes/intro-aggregation-string.rst

   :expression:`$concat` behavior is well-defined regardless of
   the characters used.

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$concat`

        - Concatenates any number of strings.

      * - :expression:`$dateFromString`

        - Converts a date/time string to a date object.


      * - :expression:`$dateToString`

        - Returns the date as a formatted string.
            
      * - :expression:`$indexOfBytes`

        - Searches a string for an occurrence of a substring and returns
          the UTF-8 byte index of the first occurrence. If the substring
          is not found, returns ``-1``.

      * - :expression:`$indexOfCP`

        - Searches a string for an occurrence of a substring and returns
          the UTF-8 code point index of the first occurrence. If the
          substring is not found, returns ``-1``

      * - :expression:`$ltrim`

        - Removes whitespace or the specified characters from the
          beginning of a string.

          .. versionadded:: 4.0

      * - :expression:`$regexFind`

        - Applies a regular expression (regex) to a string and returns
          information on the *first* matched substring.

          .. versionadded:: 4.2

      * - :expression:`$regexFindAll`

        - Applies a regular expression (regex) to a string and returns
          information on the all matched substrings.

          .. versionadded:: 4.2

      * - :expression:`$regexMatch`

        - Applies a regular expression (regex) to a string and returns
          a boolean that indicates if a match is found or not.

          .. versionadded:: 4.2

      * - :expression:`$replaceOne`

        - Replaces the first instance of a matched string in a given
          input.

          .. versionadded:: 4.4

      * - :expression:`$replaceAll`

        - Replaces all instances of a matched string in a given input.

          .. versionadded:: 4.4

      * - :expression:`$rtrim`

        - Removes whitespace or the specified characters from the
          end of a string.

          .. versionadded:: 4.0

      * - :expression:`$split`

        - Splits a string into substrings based on a delimiter. Returns
          an array of substrings. If the delimiter is not found within
          the string, returns an array containing the original string.

      * - :expression:`$strLenBytes`

        - Returns the number of UTF-8 encoded bytes in a string.

      * - :expression:`$strLenCP`

        - Returns the number of UTF-8 `code points
          <http://www.unicode.org/glossary/#code_point>`_ in a string.

      * - :expression:`$strcasecmp`

        - Performs case-insensitive string comparison and returns:
          ``0`` if two strings are equivalent, ``1`` if the first
          string is greater than the second, and ``-1`` if the first
          string is less than the second.

      * - :expression:`$substr`

        - Deprecated. Use :expression:`$substrBytes` or
          :expression:`$substrCP`.

      * - :expression:`$substrBytes`

        - Returns the substring of a string. Starts with the character
          at the specified UTF-8 byte index (zero-based) in the string
          and continues for the specified number of bytes.

      * - :expression:`$substrCP`

        - Returns the substring of a string. Starts with the character
          at the specified UTF-8 `code point (CP)
          <http://www.unicode.org/glossary/#code_point>`_ index
          (zero-based) in the string and continues for the number of
          code points specified.

      * - :expression:`$toLower`

        - Converts a string to lowercase. Accepts a single argument
          expression.

      * - :expression:`$toString`

        - Converts value to a string.

          .. versionadded:: 4.0

      * - :expression:`$trim`

        - Removes whitespace or the specified characters from the
          beginning and end of a string.

          .. versionadded:: 4.0

      * - :expression:`$toUpper`

        - Converts a string to uppercase. Accepts a single argument
          expression.

---
ref: agg-operators-text
content: |

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$meta`

        - Access available per-document metadata related to the
          aggregation operation.
        
---
ref: agg-operators-variable-project
content: |

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$let`

        - Defines variables for use within the scope of a subexpression
          and returns the result of the subexpression. Accepts named
          parameters.

          Accepts any number of argument expressions.
  
---
ref: agg-operators-literal
content: |

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$literal`

        - Return a value without parsing. Use for values that the
          aggregation pipeline may interpret as an expression. For
          example, use a :expression:`$literal` expression to a string
          that starts with a ``$`` to avoid parsing as a field path.

---
ref: agg-operators-custom-aggregation
content: |


   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :group:`$accumulator`

        - Defines a custom accumulator function.

          .. versionadded:: 4.4

      * - :expression:`$function`

        - Defines a custom function.

          .. versionadded:: 4.4

---
ref: agg-operators-type
content: |

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :expression:`$convert`

        - Converts a value to a specified type.

          .. versionadded:: 4.0

      * - :expression:`$isNumber`
        
        - Returns boolean ``true`` if the specified expression resolves
          to an :bsontype:`integer <Int32>`, :bsontype:`decimal
          <Decimal128>`, :bsontype:`double <Double>`, or :bsontype:`long
          <Int64>`.  

          Returns boolean ``false`` if the expression resolves to any
          other :doc:`BSON type </reference/mongodb-extended-json>`,
          ``null``, or a missing field.

          .. versionadded:: 4.4

      * - :expression:`$toBool`

        - Converts value to a boolean.

          .. versionadded:: 4.0

      * - :expression:`$toDate`

        - Converts value to a Date.

          .. versionadded:: 4.0

      * - :expression:`$toDecimal`

        - Converts value to a Decimal128.

          .. versionadded:: 4.0

      * - :expression:`$toDouble`

        - Converts value to a double.

          .. versionadded:: 4.0

      * - :expression:`$toInt`

        - Converts value to an integer.

          .. versionadded:: 4.0

      * - :expression:`$toLong`

        - Converts value to a long.

          .. versionadded:: 4.0

      * - :expression:`$toObjectId`

        - Converts value to an ObjectId.

          .. versionadded:: 4.0

      * - :expression:`$toString`

        - Converts value to a string.

          .. versionadded:: 4.0

      * - :expression:`$type`

        - Return the BSON data type of the field.

---
ref: agg-operators-accumulators-group
content: |

   .. versionchanged:: 5.0

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :group:`$accumulator`

        - Returns the result of a user-defined accumulator function.

      * - :group:`$addToSet`

        - Returns an array of *unique* expression values for each group.
          Order of the array elements is undefined.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$avg`

        - Returns an average of numerical values. Ignores non-numeric values.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$count`

        - Returns the number of documents in a group.

          Distinct from the :pipeline:`$count` pipeline stage.

          .. versionadded:: 5.0

             Available in :pipeline:`$group` and
             :pipeline:`$setWindowFields` stages.

      * - :group:`$first`

        - Returns a value from the first document for each group. Order
          is only defined if the documents are sorted.
          
          Distinct from the :expression:`$first` array operator.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$last`

        - Returns a value from the last document for each group. Order
          is only defined if the documents are sorted.
          
          Distinct from the :expression:`$last` array operator.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$max`

        - Returns the highest expression value for each group.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :expression:`$mergeObjects`

        - Returns a document created by combining the input documents
          for each group.
  
      * - :group:`$min`

        - Returns the lowest expression value for each group.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$push`

        - Returns an array of expression values for documents in each
          group.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$stdDevPop`

        - Returns the population standard deviation of the input values.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$stdDevSamp`

        - Returns the sample standard deviation of the input values.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$sum`

        - Returns a sum of numerical values. Ignores non-numeric values.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

---
ref: agg-operators-accumulators-project
content: |

   .. versionchanged:: 5.0

   The following accumulator operators are also available in the
   :pipeline:`$project`, :pipeline:`$addFields`, :pipeline:`$set`, and,
   starting in MongoDB 5.0, the :pipeline:`$setWindowFields` stages.

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :group:`$avg`

        - Returns an average of the specified expression or list of
          expressions for each document. Ignores non-numeric values.

      * - :group:`$max`

        - Returns the maximum of the specified expression or list of
          expressions for each document

      * - :group:`$min`

        - Returns the minimum of the specified expression or list of
          expressions for each document

      * - :group:`$stdDevPop`

        - Returns the population standard deviation of the input values.

      * - :group:`$stdDevSamp`

        - Returns the sample standard deviation of the input values.

      * - :group:`$sum`

        - Returns a sum of numerical values. Ignores non-numeric values.

---
ref: agg-operators-window
content: |

   .. versionadded:: 5.0

   Window operators return values from a defined span of documents from
   a collection, known as a *window*. A :ref:`window
   <setWindowFields-window>` is defined in the
   :pipeline:`$setWindowFields` stage, available starting in MongoDB
   5.0.

   The following window operators are available in the
   :pipeline:`$setWindowFields` stage.

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Name
        - Description

      * - :group:`$addToSet`

        - Returns an array of all unique values that results from
          applying an :ref:`expression <aggregation-expressions>` to
          each document.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$avg`

        - Returns the average for the specified :ref:`expression
          <aggregation-expressions>`. Ignores non-numeric values.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$count`

        - Returns the number of documents in the group or window.

          Distinct from the :pipeline:`$count` pipeline stage.

          .. versionadded:: 5.0

      * - :group:`$covariancePop`

        - Returns the population covariance of two numeric
          :ref:`expressions <aggregation-expressions>`.

          .. versionadded:: 5.0

      * - :group:`$covarianceSamp`

        - Returns the sample covariance of two numeric
          :ref:`expressions <aggregation-expressions>`.

          .. versionadded:: 5.0

      * - :group:`$denseRank`

        - Returns the document position (known as the rank) relative to
          other documents in the :pipeline:`$setWindowFields` stage
          :ref:`partition <setWindowFields-partitionBy>`. There are no
          gaps in the ranks. Ties receive the same rank.

          .. versionadded:: 5.0

      * - :group:`$derivative`

        - Returns the mathematical derivative of the numeric
          :ref:`expression <aggregation-expressions>`. 

          .. versionadded:: 5.0

      * - :group:`$documentNumber`

        - Returns the position of a document (known as the document
          number) in the :pipeline:`$setWindowFields` stage
          :ref:`partition <setWindowFields-partitionBy>`. Ties result in
          different adjacent document numbers.

          .. versionadded:: 5.0

      * - :group:`$expMovingAvg`

        - Returns the exponential moving average for the numeric
          :ref:`expression <aggregation-expressions>`.

          .. versionadded:: 5.0

      * - :group:`$first`

        - Returns the value that results from applying an
          :ref:`expression <aggregation-expressions>` to the first
          document in a group or :ref:`window <setWindowFields-window>`.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$integral`

        - Returns the mathematical integral of the numeric
          :ref:`expression <aggregation-expressions>`.

          .. versionadded:: 5.0

      * - :group:`$last`

        - Returns the value that results from applying an
          :ref:`expression <aggregation-expressions>` to the last
          document in a group or :ref:`window <setWindowFields-window>`.
        
          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$max`

        - Returns the maximum value that results from applying an
          :ref:`expression <aggregation-expressions>` to each document.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$min`

        - Returns the minimum value that results from applying an
          :ref:`expression <aggregation-expressions>` to each document.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$push`

        - Returns an array of values that result from applying an
          :ref:`expression <aggregation-expressions>` to each document.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$rank`

        - Returns the document position (known as the rank) relative to
          other documents in the :pipeline:`$setWindowFields` stage
          :ref:`partition <setWindowFields-partitionBy>`.

          .. versionadded:: 5.0

      * - :group:`$shift`

        - Returns the value from an :ref:`expression
          <aggregation-expressions>` applied to a document in a
          specified position relative to the current document in the
          :pipeline:`$setWindowFields` stage :ref:`partition
          <setWindowFields-partitionBy>`.

          .. versionadded:: 5.0

      * - :group:`$stdDevPop`

        - Returns the population standard deviation that results from
          applying a numeric :ref:`expression <aggregation-expressions>`
          to each document.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$stdDevSamp`

        - Returns the sample standard deviation that results from
          applying a numeric :ref:`expression <aggregation-expressions>`
          to each document.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

      * - :group:`$sum`

        - Returns the sum that results from applying a numeric
          :ref:`expression <aggregation-expressions>` to each document.

          .. versionchanged:: 5.0

             Available in :pipeline:`$setWindowFields` stage.

...
