.. index:: internals; config database
.. index:: sharding; config database
.. _config-database:

========================
Config Database Contents
========================

.. default-domain:: mongodb

The ``config`` database supports :term:`sharded cluster`
operation. See the :doc:`/sharding` section of this manual for full
documentation of sharded clusters.

To access a the ``config`` database, connect to a :program:`mongos`
instance in a sharded cluster, and issue the following command:

.. code-block:: javascript

   use config

You can return a list of the databases, by issuing the following
command:

.. code-block:: javascript

   show collections

Collections
-----------

.. if we add a collection to the config database here, also update the
   list on the sharding-internals page.

.. data:: changelog

   The :data:`changelog` collection stores a document for each change to
   the metadata of a sharded collection.

   Each document contains the following fields:

      .. data:: changeID

         hostname-time-increment

      .. data:: server

         hostname

      .. data:: clientAddr

         hostname:port of client causing change

      .. data:: time

         time change occurred

      .. data:: what

         Type of change:

            * dropCollection
            * dropCollection.start
            * dropDatabase
            * dropDatabase.start
            * moveChunk.start
            * moveChunk.commit
            * split
            * multi-split

      .. data:: ns

         Namespace change affected.

      .. data:: details

         A BSON document of additional details, the contents vary
         depending on the type of the change.


.. example::

   The following example displays a single record of a chunk split
   from a ``config.changelog`` collection:

   .. code-block:: javascript

      {
      "_id" : "d.local-2012-12-11T14:09:21-0",
      "server" : "d.local",
      "clientAddr" : "127.0.0.1:63381",
      "time" : ISODate("2012-12-11T14:09:21.039Z"),
      "what" : "split",
      "ns" : "snps.elegans",
      "details" : {
         "before" : {
            "min" : {
               "snp" : { $minKey : 1 }
            },
            "max" : {
               "snp" : { $maxKey : 1 }
            },
            "lastmod" : Timestamp(1000, 0),
            "lastmodEpoch" : ObjectId("000000000000000000000000")
         },
         "left" : {
            "min" : {
               "snp" : { $minKey : 1 }
            },
            "max" : {
               "snp" : "haw54524"
            },
            "lastmod" : Timestamp(1000, 1),
            "lastmodEpoch" : ObjectId("50c73e0bca6554d8d3b19a83")
         },
         "right" : {
            "min" : {
               "snp" : "haw54524"
            },
            "max" : {
               "snp" : { $maxKey : 1 }
            },
            "lastmod" : Timestamp(1000, 2),
            "lastmodEpoch" : ObjectId("50c73e0bca6554d8d3b19a83")
            }
         }
      }


.. data:: chunks

   The :data:`chunks` collection stores a document for each chunk in
   the cluster.  Consider the following example of a document for a
   chunk named ``records.pets-animal_\"cat\"``:

   .. code-block:: javascript

      {
         "_id" : "mydb.foo-a_\"cat\"",
         "lastmod" : Timestamp(1000, 3),
         "lastmodEpoch" : ObjectId("5078407bd58b175c5c225fdc"),
         "ns" : "mydb.foo",
         "min" : {
               "animal" : "cat"
         },
         "max" : {
               "animal" : "dog"
         },
         "shard" : "shard0004"
      }

   These documents store the range of values for the shard key that
   describe the chunk in the ``min`` and ``max`` fields. Additionally
   the ``shard`` field identifies the shard in the cluster that "owns"
   the chunk.

.. data:: collections

   The :data:`collections` collection stores a document for each sharded collection
   in the cluster. Given a collection named ``pets``
   in the ``records`` database, a document in the :data:`collections`
   collection would resemble the following:

   .. code-block:: javascript

      {
         "_id" : "records.pets",
         "lastmod" : ISODate("1970-01-16T15:00:58.107Z"),
         "dropped" : false,
         "key" : {
               "a" : 1
         },
         "unique" : false,
         "lastmodEpoch" : ObjectId("5078407bd58b175c5c225fdc")
      }

.. data:: databases

   The :data:`databases` collection stores a document for each
   database in the cluster, and tracks if the database has sharding
   enabled. :data:`databases` represents each database in a
   distinct document. When a databases have sharding enabled, the
   ``primary`` field holds the name of the :term:`primary shard`.

   .. code-block:: javascript

      { "_id" : "admin", "partitioned" : false, "primary" : "config" }
      { "_id" : "mydb", "partitioned" : true, "primary" : "shard0000" }

.. data:: lockpings

   The :data:`lockpings` collection keeps track of the active components
   in the sharded cluster. Given a cluster with a :program:`mongos`
   running on ``example.com:30000``, the document in the
   :data:`lockpings` collection would resemble:

   .. code-block:: javascript

      { "_id" : "example.com:30000:1350047994:16807", "ping" : ISODate("2012-10-12T18:32:54.892Z") }

.. data:: locks

   The :data:`locks` collection stores a distributed lock. This
   ensures that only one :program:`mongos` instance can perform
   administrative tasks on the cluster at once. The :program:`mongos`
   acting as :term:`balancer` takes a lock by inserting a document
   resembling the following into the ``locks`` collection.

   .. code-block:: javascript

      {
          "_id" : "balancer",
          "process" : "example.net:40000:1350402818:16807",
          "state" : 2,
          "ts" : ObjectId("507daeedf40e1879df62e5f3"),
          "when" : ISODate("2012-10-16T19:01:01.593Z"),
          "who" : "example.net:40000:1350402818:16807:Balancer:282475249",
          "why" : "doing balance round"
      }

   If a :program:`mongos` holds the balancer lock, the ``state`` field
   has a value of ``2``, which means that balancer is active. The ``when`` field
   indicates when the balancer began the current operation.

   .. versionchanged:: 2.0
      The value of the ``state`` field was ``1`` before MongoDB 2.0.

.. data:: mongos

   The :data:`mongos` collection stores a document for each
   :program:`mongos` instance affiliated with the
   cluster. :program:`mongos` instances send pings to all members of
   the cluster every 30 seconds so the cluster can verify that the
   :program:`mongos` is active. The ``ping`` field shows the time of
   the last ping. The cluster maintains this collection for reporting
   purposes.

   The following document shows the status of the :program:`mongos`
   running on ``example.com:30000``.

   .. code-block:: javascript

      { "_id" : "example.com:30000", "ping" : ISODate("2012-10-12T17:08:13.538Z"), "up" : 13699, "waiting" : true }

.. data:: settings

   The :data:`settings` collection holds the following sharding configuration settings:

   - Chunk size. To change chunk size, see :ref:`sharding-balancing-modify-chunk-size`.

   - Balancer status. To change status, see :ref:`sharding-balancing-disable-temporally`.

   The following is an example ``settings`` collection:

   .. code-block:: javascript

      { "_id" : "chunksize", "value" : 64 }
      { "_id" : "balancer", "stopped" : false }

.. data:: shards

   The :data:`shards` collection represents each shard in the cluster
   in a separate document. If the shard is a replica set, the
   ``host`` field displays the name of the replica set, then a slash, then
   the hostname, as in the following example:

   .. code-block:: javascript

      { "_id" : "shard0000", "host" : "shard1/localhost:30000" }

.. data:: version

   The :data:`version` collection holds the current metadata version number. This
   collection contains only one document:

   To access the :data:`version` collection you must use the
   :method:`db.getCollection()` method. For example, to display the
   collection's document:

   .. code-block:: javascript

      mongos> db.getCollection("version").find()
      { "_id" : 1, "version" : 3 }

.. note::

   Like all databases in MongoDB, the ``config`` database contains a
   :data:`system.indexes` collection contains metadata for all indexes
   in the database for information on indexes, see :doc:`/indexes`.
