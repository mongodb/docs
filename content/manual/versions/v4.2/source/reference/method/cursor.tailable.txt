=================
cursor.tailable()
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: cursor.tailable()


   .. include:: /includes/fact-mongo-shell-method.rst


   .. versionadded:: 3.2

   Marks the cursor as tailable. 
   
   For use against a :term:`capped collection` only. Using 
   :method:`~cursor.tailable` against a non-capped collection will return 
   an error.
   
   :method:`cursor.tailable()` uses the following syntax:
   
   .. code-block:: javascript
   
      cursor.tailable( { awaitData : <boolean> } )
      
   :method:`~cursor.tailable()` has the following parameter:
   

   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``awaitData``
   
        - boolean
   
        - Optional. When ``true``, enables ``awaitData``.
          
          ``awaitData`` is ``false`` by default.
          
          
   

   
   :returns:
      The :term:`cursor` that :method:`~cursor.tailable()` is attached to.
      
Behavior
--------

A tailable cursor performs a collection scan over a :term:`capped collection`. 
It remains open even after reaching the end of the collection. 
Applications can continue to iterate the tailable cursor as 
new data is inserted into the collection.

If ``awaitData`` is set to ``true``, when the cursor reaches the end of 
the capped collection, :term:`MongoDB <mongod>` blocks the query thread 
for a period of time waiting for new data to arrive. When new data is inserted 
into the capped collection, the blocked thread is signaled to wake up and 
return the next batch to the client.

See :doc:`/core/tailable-cursors`.

