.. meta::
   :robots: noindex, nosnippet

:template: product-landing
:hidefeedback: header
:noprevnext:

.. _react-native-intro:
.. _react-native-realm-database:
.. _react-native-realm-database_overview:

=================================
Atlas Device SDK for React Native
=================================

.. facet::
   :name: programming_language
   :values: javascript/typescript

.. meta:: 
   :description: Use Atlas Device SDK for React Native SDK to develop iOS and Android apps with JavaScript or TypeScript.

.. toctree::
   :titlesonly:
   :hidden:

   Realm Files </sdk/react-native/realm-files>
   Model Data </sdk/react-native/model-data>
   CRUD </sdk/react-native/crud>
   React to Changes </sdk/react-native/react-to-changes>
   Atlas App Services </sdk/react-native/app-services>
   Manage Users </sdk/react-native/manage-users>
   Sync Data </sdk/react-native/sync-data>
   Integration Guides </sdk/react-native/integrations>
   Test & Debug </sdk/react-native/test-and-debug/>
   Logging </sdk/react-native/logging>
   SDK Telemetry </sdk/react-native/telemetry>
   API Reference </sdk/react-native/api-reference>
   Release Notes <https://github.com/realm/realm-js/releases>

Use Atlas Device SDK for React Native to develop iOS and Android apps with
JavaScript or TypeScript.

.. kicker:: Learning Paths

Get Started with Realm React Native
-----------------------------------

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: Quick Start
      :cta: See Code Examples
      :url: https://www.mongodb.com/docs/realm/sdk/react-native/quick-start/
      :icon: atlas_functions
      :icon-alt: Functions Icon

      Minimal-explanation code examples of how to work with the SDK.
      Write to the device database, and sync with other devices.

   .. card::
      :headline: Working Example App
      :cta: Explore an Example App
      :url: https://www.mongodb.com/docs/atlas/app-services/template-apps/
      :icon: realm_mobile
      :icon-alt: Atlas Device SDK Mobile Icon

      Learn from example by dissecting a working React Native client app that
      uses the React Native SDK.

   .. card::
      :headline: Guided Tutorial
      :cta: Follow the Tutorial
      :url: https://mongodb.com/docs/atlas/app-services/tutorial/react-native/
      :icon: general_content_tutorial
      :icon-alt: Tutorial Icon

      Follow a guided tutorial to learn how to adapt the example app to
      create your own working app.

.. kicker:: What You Can Do

Develop Apps with the SDK
-------------------------

Use the SDK's open-source database - Realm - to store data on a device. Use 
Device Sync to keep data in sync with your MongoDB Atlas cluster and other
clients.

.. tabs::

  .. tab:: Store Data with the SDK
      :tabid: device-persistence

      .. procedure::

         .. step:: Install the React Native SDK

            Set up your project with React Native and the SDK.
            To get started, :ref:`install the React Native SDK <react-native-install>`.

         .. step:: Define an Object Schema

            Use JavaScript to idiomatically :ref:`define an object schema <react-native-define-a-realm-object-schema>`.

         .. step:: Configure & Open a Database

            You can configure your database to do things
            like populate initial data on load, use an encryption key to 
            secure data, and more. To begin working with your data,
            :ref:`configure and open a database <react-native-configure-realm>`.

         .. step:: Read and Write Data

            You can :ref:`create <react-native-create-objects>`, :ref:`read
            <react-native-read-objects>`, :ref:`update
            <react-native-update-objects>`, and :ref:`delete
            <react-native-delete-objects>` objects from the device database. 
            Construct complex queries to :ref:`filter data <react-native-query-data>`.

         .. step:: React to Changes

            Live objects mean that your data is always up-to-date.
            Register a change listener to :ref:`react to changes <react-native-react-to-changes>`
            and perform logic like updating your UI.

      .. image:: /images/illustrations/2024_branding/Technical_SOFTWARE_Connect(2)_Spot.png
         :alt: Atlas Device SDK Mobile Illustration

  .. tab:: Sync Data Across Devices
      :tabid: device-sync

      .. procedure::

         .. step:: Connect to an Atlas App Services App

            Configure :ref:`Device Sync in an App Services App <realm-sync-get-started>`.
            Define data access rules or use Development Mode to infer a schema
            from your client's data model.
            Then, :ref:`connect to the backend App from your React Native App <react-native-connect-to-mongodb-realm-backend-app>`.

         .. step:: Authenticate a User

            App Services provides access to custom JWT authentication,
            our built-in email/password provider, anonymous
            authentication, and popular
            authentication providers like Apple, Google, and Facebook.
            Use these providers to :ref:`authenticate a user in your client <react-native-authenticate-users>`.

         .. step:: Open a Synced Database

            To get started syncing data, :ref:`open a synced database <react-native-open-a-synced-realm>`.
            To determine what data a synced database can read and write,
            :ref:`subscribe to a query <react-native-sync-subscribe-to-queryable-fields>`.

         .. step:: Read and Write Synced Data

            The APIs for reading and writing data
            are the same for both synced and non-synced databases.
            Data that you read and write to the device is automatically kept
            in sync with your Atlas cluster and other clients.
            Apps keep working offline and sync changes when a network connection
            is available.

      .. image:: /images/illustrations/2024_branding/Technical_SOFTWARE_Sync(2)_Spot.png
         :alt: Device Sync Illustration

  .. tab:: Build with Atlas App Services
      :tabid: app-services

      .. container::

         Use Atlas App Services in your React Native application with the Realm SDK.

         Call Serverless Functions
         ~~~~~~~~~~~~~~~~~~~~~~~~~

         To invoke serverless backend logic from your React Native client,
         :ref:`call Atlas Functions <react-native-call-a-function>`.

         Query MongoDB Atlas
         ~~~~~~~~~~~~~~~~~~~

         Query data stored in MongoDB directly from your client application code
         with :ref:`MongoDB Data Access <react-native-mongodb-remote-access>`.

         Authenticate Users
         ~~~~~~~~~~~~~~~~~~

         Authenticate users with built-in and third-party :ref:`authentication providers <react-native-authenticate-users>`.
         Access App Services with authenticated users.

      .. image:: /images/illustrations/2024_branding/Technical_ACTION_WrenchSettings_Spot.png
         :alt: App Services Illustration

  .. tab:: Use @realm/react
      :tabid: realm-react

      .. container::

         ``@realm/react`` is an npm package that provides an easy-to-use API to
         perform common SDK operations in your React Native app,
         such as querying or writing to a database and listening for changes to
         objects. ``@realm/react`` includes React context, providers, and hooks
         for working with the SDK.

         Use ``@realm/react`` to manage the database, Atlas App Services,
         and Atlas Device Sync.

      .. image:: /images/illustrations/2024_branding/Technical_SOFTWARE_GearSettings_Spot.png
         :alt: Atlas Device SDK Mobile Illustration

.. kicker:: Essential Documentation

Recommended Reading
-------------------

.. card-group::
   :columns: 2
   :style: extra-compact

   .. card::
      :headline: JavaScript API Reference
      :cta: React Native Reference
      :url: https://www.mongodb.com/docs/realm-sdks/js/latest/
      :icon: general_action_best_practices
      :icon-alt: Atlas Device SDK Icon

      Explore generated reference docs for the React Native SDK.

   .. card::
      :headline: React Native Quick Start with Expo
      :cta: Explore the Quick Start
      :url: https://www.mongodb.com/docs/realm/sdk/react-native/quick-start-expo/
      :icon: /images/icons/expo_logo.svg
      :icon-alt: Expo Icon

      Build and deploy a React Native application quickly using an
      Expo template application with ``@realm/react``.

Example Projects
----------------

Explore engineering and expert-provided example projects to learn best 
practices and common development patterns using the React Native SDK. Check 
out the :ref:`<realm-example-projects-table>` page for more React Native 
sample apps.

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card:: 
      :headline: Netflix-like Movie App 
      :cta: Example project
      :url: https://github.com/realm/realm-js/tree/main/examples/rn-multiple-realms
      :icon: realm_mobile
      :icon-alt: Mobile Database Icon

      Build a Netflix-like app for browsing movies from MongoDB's Mflix sample 
      dataset. Use multiple databases to allow users to sync and manage movies 
      in their own private lists.
   
   .. card::
      :headline: Offline Login and Database Access
      :cta: Example project
      :url: https://github.com/realm/realm-js/tree/main/examples/rn-todo-list
      :icon: realm_offline
      :icon-alt: Realm Offline Icon

      Log in a Device Sync user and open a synced database offline.

   .. card::
      :headline: User's Online State
      :cta: Example project
      :url: https://github.com/realm/realm-kotlin-samples/tree/main/AppServicesUsageSamples/apps/presence-detection
      :icon: general_content_users
      :icon-alt: Users Icon

      Detect connectivity and activity of users and devices. 
   
   .. card::
      :headline: Connection State Change & Error Handling
      :cta: Example project
      :url: https://github.com/realm/realm-js/tree/main/examples/rn-connection-and-error
      :icon: cloud_mobility
      :icon-alt: Cloud Mobile Transfer Icon

      Learn best practices around handling Sync errors and client reset 
      strategies.
