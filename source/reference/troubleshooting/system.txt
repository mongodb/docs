===========
Host Issues
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Logs Display OutOfMemoryError
-----------------------------

If your logs display ``OutOfMemoryError``, ensure you are running
with sufficient user limits and RAM.

Increase User Limits
--------------------

For the recommended User Limit (``ulimit``) setting, see the |faq|
on :ref:`open-file-limits`.

|mms| infers the host's ``ulimit`` setting using the total number of
available and current connections. To learn more about ``ulimit``
in MongoDB, see the 
:manual:`UNIX ulimit Settings </reference/ulimit/>`
reference page in the MongoDB manual.

Ensure Sufficient RAM for All Components
----------------------------------------

Ensure that each server has enough RAM for the components it runs.
If a server runs multiple components, its RAM must be at least the
sum of the required amount of RAM for *each* component.

For the individual RAM requirements for the |application| server,
|application| Database, Backup Daemon server, and Backup Database,
see :doc:`/core/requirements`.

Obsolete Config Settings
------------------------

|mms| fails to start if there are obsolete configuration settings
set in the 
:doc:`conf-mms.properties </reference/configuration>` file. If
there is an obsolete setting, the log lists an
:guilabel:`Obsolete Setting` error as in the following:

.. warning::

   [OBSOLETE SETTING] Remove ``mms.multiFactorAuth.require`` or
   replace ``mms.multiFactorAuth.require`` with
   ``mms.multiFactorAuth.level``.

You will need to remove or replace the obsolete property in the
``conf-mms.properties`` file before you can start |mms|.

Logs Display ``java.lang.OutOfMemoryError``
-------------------------------------------

If your logs display ``java.lang.OutOfMemoryError: Java heap 
space``, you can adjust the Java Heap memory settings. Repeat the 
following steps for every host running |a-mms| instance except 
dedicated Backup Daemon hosts.

.. tabs::

   tabs:
     - id: linux
       name: Linux Hosts
       content: |

         1. Open ``mms.conf`` in your preferred text editor.
         2. Find this line:

            .. code-block:: ini

               JAVA_MMS_UI_OPTS="${JAVA_MMS_UI_OPTS} -Xss228k -Xmx4352m -Xms4352m -XX:NewSize=600m -Xmn1500m -XX:ReservedCodeCacheSize=128m -XX:-OmitStackTraceInFastThrow"

            The key values in this line are:

            .. list-table::
               :widths: 40 60
               :stub-columns: 1

               * - ``-Xmx``
                 - Java Heap Maximum Memory
               * - ``-Xms``
                 - Java Heap Starting Memory

            By default, these values are both set to 
            4,352 :abbr:`MB (Megabytes)` (``4352m``).

            .. admonition:: Do not change other Java options
               :class: warning

               Changing any option values other than ``-Xmx`` and 
               ``-Xms`` could have an unexpected impact on the 
               |application|. Do not change other values without 
               consulting MongoDB Support.

         3. Change the ``-Xmx`` and ``-Xms`` values to a larger 
            value. Both parameters should be set to the same value 
            to remove any performance impact from the VM constantly 
            reclaiming memory from the heap.

            The value is specified as ``#k|m|g``: a number followed 
            by 

            - ``k`` (kilobytes),
            - ``m`` (megabytes), or 
            - ``g`` (gigabytes)

            .. example::

               To set the Java heap to 10 :abbr:`GB (Gigabytes)`, 
               set this value to: ``-Xmx10g -Xms10g``

     - id: windows
       name: Windows Hosts
       content: |

         a. Click :guilabel:`Run` from the :guilabel:`Start` menu.
         b. Type ``regedit``.
         c. Click :guilabel:`OK`.
         d. If User Access Control asks :guilabel:`Do you want to 
            allow this app to make changes to your device?`, click 
            :guilabel:`Yes`. 
         e. Edit the following registry value:
           
            .. code-block:: registry

               HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Apache Software Foundation\Procrun 2.0\MMS\Parameters\Java\Options

         f. Change the ``-Xmx`` and ``-Xms`` values  in the 
            :guilabel:`Options` multi-line registry key to a larger 
            value. Both parameters should be set to the same value
            to remove any performance impact from the VM constantly
            reclaiming memory from the heap. The value of the 
            :guilabel:`Options` key should include the following:

            .. code-block:: ini
               :copyable: false

               -d64
               -Xss228k
               -Xmx4352m
               -Xms4352m
               -XX:NewSize=600m
               -Xmn1500m
               -XX:ReservedCodeCacheSize=128m
               -XX:-OmitStackTraceInFastThrow"

            The key values in this block are:

            .. list-table::
               :widths: 40 60
               :stub-columns: 1

               * - ``-Xmx``
                 - Java Heap Maximum Memory
               * - ``-Xms``
                 - Java Heap Starting Memory

            By default, these values are both set to 
            4,352 :abbr:`MB (Megabytes)` (``4352m``).

            .. admonition:: Do not change other Java options
               :class: warning

               Changing any option values other than ``-Xmx`` and 
               ``-Xms`` could have an unexpected impact on the 
               |application|. Do not change other values without 
               consulting MongoDB Support.

            The value is specified as ``#k|m|g``: a number followed 
            by 

            - ``k`` (kilobytes),
            - ``m`` (megabytes), or 
            - ``g`` (gigabytes)

            .. example::

               To set the Java heap to 10 :abbr:`GB (Gigabytes)`, 
               set this value to: ``-Xmx10g -Xms10g``

The optimal value for your |onprem| installation depends upon your
|onprem| hosts' architecture: platform, physical memory, etc.
The goal of heap tuning is to balance the time the
:abbr:`JVM (Java Virtual Machine)` spends reclaiming memory from
objects that are no longer running, also known as garbage 
collection, and the frequency of garbage collection.

- Large heap sizes mean less frequent and slower garbage collection.

- Small heap sizes mean more frequent and faster garbage collection.

.. important::

   Your Java heap size must not be set to a value greater than the
   amount of physical memory in the |onprem| host or less than the
   default value of ``4352m`` (4,352 :abbr:`MB (Megabytes)`).
