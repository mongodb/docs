.. _spring-criteria-methods-introspection:

============================================
Spring Criteria Methods to Generate Insights
============================================

.. facet:: 
   :name: genre
   :values: reference

.. facet:: 
   :name: programming_language
   :values: java

.. meta::
   :keywords: code example, java sync, java async, mongosh
   :description: Spring Criteria methods that support generated insights by the IntelliJ Plugin.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

When you use the following Spring Criteria method calls in your queries,
the {+intellij-full+} generates insights for your workspace, including 
insights regarding index warnings, type validation, or database reference validation.
If your query contains a combination of methods the {+intellij-short+} can generate 
insights from and methods that the {+intellij-short+} cannot generate 
insights from, the {+intellij-short+} does not generate any insights.

Query Operation Methods
-----------------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - `MongoTemplate.count() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoTemplate.html#count(org.springframework.data.mongodb.core.query.Query,java.lang.String)>`__
     
     - Returns the number of documents for the given Query querying the given collection. 

   * - `MongoTemplate.find() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoTemplate.html#find(org.springframework.data.mongodb.core.query.Query,java.lang.Class)>`__

     - Maps the results of an ad-hoc query on the collection for the entity class to a List of the specified type.

   * - `MongoTemplate.findAll() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoTemplate.html#findAll(java.lang.Class)>`__

     - Query for a list of objects of type ``T`` from the collection used by the entity class.

   * - `MongoTemplate.findOne() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoTemplate.html#findOne(org.springframework.data.mongodb.core.query.Query,java.lang.Class)>`__

     - Map the results of an ad-hoc query on the collection for the entity class to a single instance of an object of the specified type.

   * - `MongoTemplate.aggregate() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoTemplate.html#aggregate(org.springframework.data.mongodb.core.aggregation.Aggregation,java.lang.Class,java.lang.Class)>`__

     - Execute an aggregation operation. The raw results will be mapped to the given entity class.

   * - `MongoTemplate.aggregateStream() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoTemplate.html#aggregateStream(org.springframework.data.mongodb.core.aggregation.Aggregation,java.lang.Class,java.lang.Class)>`__

     - Execute an aggregation operation backed by a MongoDB ``AggregateIterable``.


Filtering Methods
-----------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - `Query.with() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/query/Query.html#with(org.springframework.data.domain.KeysetScrollPosition)>`__

     - Sets the given cursor position on the Query instance.

   * - `Query.query() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/query/Query.html#%3Cinit%3E()>`__

     - Creates a new Query using the given ``CriteriaDefinition``.

   * - `Query.of() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/query/Query.html#of(org.springframework.data.mongodb.core.query.Query)>`__

     - Create an independent copy of the given Query. The resulting Query is not a binary equal 
       to the given source but semantically equal in terms of creating the same result when executed.

   * - `Criteria.where() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/query/Criteria.html#where(java.lang.String)>`__

     - Static factory method to create a Criteria using the provided key.

   * - `Criteria.in() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/query/Criteria.html#in(java.util.Collection)>`__

     - Creates a criterion using the :query:`$in`  operator.

   * - `Criteria.nin() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/query/Criteria.html#nin(java.util.Collection)>`__

     - Creates a criterion using the :query:`$nin` operator.

   * - `Criteria.not() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/query/Criteria.html#not()>`__

     - Creates a criterion using the :query:`$not` meta operator which affects the clause directly following

   * - `Criteria.is() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/query/Criteria.html#is(java.lang.Object)>`__

     - Creates a criterion using equality.


Aggregation Methods
-------------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - `Aggregation.match() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/aggregation/Aggregation.html#match(org.springframework.data.mongodb.core.aggregation.AggregationExpression)>`__

     - Creates a new ``MatchOperation`` using the given ``AggregationExpression``.

   * - `Aggregation.project() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/aggregation/Aggregation.html#project(java.lang.Class)>`__

     - Creates a new ``ProjectionOperation`` including all top level fields of the given given ``Class``.

   * - `Aggregation.sort() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/aggregation/Aggregation.html#sort(org.springframework.data.domain.Sort)>`__

     - Factory method to create a new ``SortOperation`` for the given ``Sort``.

   * - `Aggregation.group() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/aggregation/Aggregation.html#group(org.springframework.data.mongodb.core.aggregation.Fields)>`__

     - Creates a new ``GroupOperation`` for the given ``Fields``.

   * - `Aggregation.addFields() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/aggregation/Aggregation.html#addFields()>`__

     - Obtain a ``builder`` instance to create a new ``AddFieldsOperation``.
       MongoDB adds a new aggregation pipeline stage :pipeline:`$set` that is an alias for :pipeline:`$addFields`.

   * - `Aggregation.unwind() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/aggregation/Aggregation.html#unwind(java.lang.String)>`__

     - Factory method to create a new ``UnwindOperation`` for the field with the given name.

   * - `Aggregation.limit() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/aggregation/Aggregation.html#limit(long)>`__

     - Limits the result to the given number of elements.

   * - `Projection.andInclude() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/aggregation/ProjectionOperation.html#andInclude(org.springframework.data.mongodb.core.aggregation.Fields)>`__

     - Includes the given fields into the projection.

   * - `Fields.fields() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/aggregation/Fields.html#fields(java.lang.String...)>`__

     - Creates a new ``Fields`` instance for ``Fields`` with the given names.

   * - `Fields.field() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/aggregation/Fields.html#field(java.lang.String)>`__ 

     - Creates a ``Field`` with the given name.

   * - `Fields.from() <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/aggregation/Fields.html#from(org.springframework.data.mongodb.core.aggregation.Field...)>`__

     - Creates a new ``Fields`` instance from the given ``Fields``.

   * - `Sorts.ascending() <{+core-api+}/client/model/Sorts.html#ascending(java.util.List)>`__

     - Create a sort specification for an ascending sort on the given fields.

   * - `Sorts.descending() <{+core-api+}/client/model/Sorts.html#descending(java.util.List)>`__

     - Create a sort specification for a descending sort on the given fields.

   * - `Sorts.orderBy() <{+core-api+}/client/model/Sorts.html#orderBy(java.util.List)>`__

     - Combine multiple sort specifications. If any field names are repeated, the last one takes precedence.

Learn More 
----------

- :ref:`IntelliJ Insights <intellij-insights>`