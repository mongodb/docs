.. _authorization:

=========================
Role-Based Access Control
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB employs Role-Based Access Control (RBAC) to govern access to a
MongoDB system. A user is granted one or more :ref:`roles <roles>` that
determine the user's access to database resources and operations. Outside

Enable Access Control
---------------------

Access control is not enabled by default in MongoDB. You can enable
authorization using :option:`--auth` or the
:setting:`security.authorization` setting. Enabling :doc:`internal
authentication </core/security-internal-authentication>` also enables
client authorization.

Once access control is enabled, users must be :doc:`authenticated
</core/authentication>`.

.. _roles:

Roles
-----

Roles grant privileges to perform :ref:`actions
<security-user-actions>` on :doc:`resources
</reference/resource-document>`. Privileges are either specified
explicitly in the role, inherited from another role, or both.

.. _privileges:

Privileges
~~~~~~~~~~

A privilege consists of a single resource and the actions permitted on that
resource.

A :doc:`resource </reference/resource-document>` is a database, 
collection, set of collections, or cluster. For clusters, the affiliated 
actions affect the system state rather than a specific database 
or collection. For information on resource documents, 
see :doc:`/reference/resource-document`.

An :doc:`action </reference/privilege-actions>` is an operation that can be used
on a resource. For available actions see :doc:`/reference/privilege-actions`.

.. _inheritance:

Inherited Privileges
~~~~~~~~~~~~~~~~~~~~

A role can include one or more pre-existing roles from its database in its definition. Roles inherit 
all privileges from their included roles. A role created on the ``admin``
database can inherit privileges from roles in any database.

View Role's Privileges
~~~~~~~~~~~~~~~~~~~~~~

You can view the privileges for a role by issuing the :dbcommand:`rolesInfo`
command with the ``showPrivileges`` and ``showBuiltinRoles`` fields both set to
``true``.

Users and Roles
---------------

Roles can be assigned to users during user creation. An administrator can also
update existing users to grant or revoke roles. For a full list of user
management methods, see :ref:`user-management-methods`

Users assigned a role receive all privileges associated with that role. A user
can have multiple roles. By assigning a user roles in various databases, a 
user created in one database can have permission to perform actions on
another database.

.. note::

   The first user created in the database should be a user administrator
   who has the privileges to manage other users. See
   :doc:`/tutorial/enable-authentication`.

Built-In Roles and User-Defined Roles
-------------------------------------

MongoDB provides :doc:`built-in roles </core/security-built-in-roles>` that
define privileges commonly needed in a database system.

If these built-in-roles cannot provide the desired set of privileges,
MongoDB provides methods to create and modify :doc:`user-defined roles
</core/security-user-defined-roles>`.

.. class:: hidden

   .. toctree::
      :titlesonly:

      /tutorial/enable-authentication
      /core/security-built-in-roles
      /core/security-user-defined-roles
      /tutorial/manage-users-and-roles
      /tutorial/change-own-password-and-custom-data
      /core/collection-level-access-control
