=============================================
Model Tree Structures with Materialized Paths
=============================================

.. default-domain:: mongodb

Overview
--------

Data in MongoDB has a *flexible schema*. :term:`Collections
<collection>` do not enforce :term:`document` structure. Decisions
that affect how you model data can affect application performance and
database capacity. See :doc:`/core/data-models` for a full high
level overview of data modeling in MongoDB.

This document describes a data model that describes a tree-like
structure in MongoDB documents by storing full relationship paths
between documents.

Pattern
-------

.. start-model-tree-structures-include-here

The *Materialized Paths* pattern stores each tree node in a document;
in addition to the tree node, document stores as a string the id(s) of
the node's ancestors or path. Although the *Materialized Paths* pattern
requires additional steps of working with strings and regular
expressions, the pattern also provides more flexibility in working with
the path, such as finding nodes by partial paths.


Consider the following hierarchy of categories:

.. include:: /images/data-model-tree.rst

The following example models the tree using *Materialized Paths*,
storing the path in the field ``path``; the path string uses the comma
``,`` as a delimiter:

.. code-block:: javascript

   db.categories.insert( { _id: "Books", path: null } )
   db.categories.insert( { _id: "Programming", path: ",Books," } )
   db.categories.insert( { _id: "Databases", path: ",Books,Programming," } )
   db.categories.insert( { _id: "Languages", path: ",Books,Programming," } )
   db.categories.insert( { _id: "MongoDB", path: ",Books,Programming,Databases," } )
   db.categories.insert( { _id: "dbm", path: ",Books,Programming,Databases," } )

- You can query to retrieve the whole tree, sorting by the field
  ``path``:

  .. code-block:: javascript

     db.categories.find().sort( { path: 1 } )

- You can use regular expressions on the ``path`` field to find the
  descendants of ``Programming``:

  .. code-block:: javascript

     db.categories.find( { path: /,Programming,/ } )

- You can also retrieve the descendants of ``Books`` where the
  ``Books`` is also at the topmost level of the hierarchy:

  .. code-block:: javascript

     db.categories.find( { path: /^,Books,/ } )

- To create an index on the field ``path`` use the following
  invocation:

  .. code-block:: javascript

     db.categories.ensureIndex( { path: 1 } )

  This index may improve performance depending on the query:

  - For queries of the ``Books`` sub-tree (e.g. ``/^,Books,/``) an
    index on the ``path`` field improves the query performance
    significantly.

  - For queries of the ``Programming`` sub-tree
    (e.g. ``/,Programming,/``), or similar queries of sub-tress, where
    the node might be in the middle of the indexed string, the query
    must inspect the entire index.

    For these queries an index *may* provide some performance
    improvement *if* the index is significantly smaller than the
    entire collection.
