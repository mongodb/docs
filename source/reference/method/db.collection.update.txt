======================
db.collection.update()
======================

.. default-domain:: mongodb

Definition
----------

.. method:: db.collection.update(query, update, options)

   Modifies an existing document or documents in a collection. The
   method can modify specific fields of an existing document or documents
   or replace an existing document entirely, depending on the
   :ref:`update parameter <update-parameter>`.

   By default, the :method:`~db.collection.update()` method updates a
   **single** document. Set the :ref:`multi-parameter` to update all
   documents that match the query criteria.

   The :method:`~db.collection.update()` method has the following form:

   .. versionchanged:: 2.6

   .. code-block:: javascript

      db.collection.update(
         <query>,
         <update>,
         {
           upsert: <boolean>,
           multi: <boolean>,
           writeConcern: <document>
         }
      )

   The :method:`~db.collection.update()` method takes the following
   parameters:

   .. include:: /reference/method/db.collection.update-param.rst

   .. versionchanged:: 2.6
      The :method:`~db.collection.update()` method returns an object that
      contains the status of the operation.

   :returns: A :ref:`writeresults-update` object that contains the
      status of the operation.

Behavior
--------

.. _update-safe-writes:

Safe Writes
~~~~~~~~~~~

.. versionchanged:: 2.6

The :method:`~db.collection.update()` method uses the
:dbcommand:`update` command, which uses the default write concern. To
specify a different write concern, include the ``writeConcern`` option
in the options parameter. See :ref:`example-update-write-concern` for
an example.

.. _update-parameter:

Update Parameter
~~~~~~~~~~~~~~~~

The :method:`~db.collection.update()` method either modifies specific
fields in existing documents or replaces an existing document entirely.

Update Specific Fields
``````````````````````

If the ``<update>`` document contains :ref:`update operator
<update-operators>` modifiers, such as those using the
:update:`$set` modifier, then:

- The ``<update>`` document must contain *only* :ref:`update operator
  <update-operators>` expressions.

- The :method:`~db.collection.update()` method updates only the
  corresponding fields in the document. For an example, see
  :ref:`example-update-specific-fields`.

Replace a Document Entirely
```````````````````````````

If the ``<update>`` document contains *only* ``field:value``
expressions, then:

- The :method:`~db.collection.update()` method *replaces* the matching
  document with the ``<update>`` document. The
  :method:`~db.collection.update()` method *does not* replace the
  ``_id`` value. For an example, see
  :ref:`example-update-replace-fields`.

- :method:`~db.collection.update()` *cannot* :ref:`update multiple
  documents <multi-parameter>`.

.. _upsert-parameter:

Upsert Parameter
~~~~~~~~~~~~~~~~

Upsert Behavior
```````````````

If ``upsert`` is ``true`` and no document matches the query
criteria, :method:`~db.collection.update()` inserts a *single* document.
The update creates the new document with either:

- The fields and values of the ``<update>`` parameter, or

- The fields and values of both the ``<query>`` and ``<update>``
  parameters if the ``<update>`` parameter contains *only* :ref:`update
  operator <update-operators>` expressions. The update creates a base
  document from the equality clauses in the ``<query>`` parameter, and
  then applies the update expressions from the ``<update>`` parameter.

If ``upsert`` is ``true`` and there are documents that match the query
criteria, :method:`~db.collection.update()` performs an update.

Use Unique Indexes
``````````````````

.. warning:: To avoid inserting the same document more than once,
   only use ``upsert: true`` if the ``query`` field is uniquely
   indexed.

Given a collection named ``people`` where no documents have a ``name``
field that holds the value ``Andy``. Consider when multiple clients
issue the following *update* with an ``upsert`` parameter at the same
time:

.. code-block:: javascript

   db.people.update(
      { name: "Andy" },
      {
         name: "Andy",
         rating: 1,
         score: 1
      },
      { upsert: true }
   )

If all :method:`~db.collection.update()` operations complete the
``query`` portion before any client successfully inserts data, **and**
there is no unique index on the ``name`` field, then each update
operation may result in an insert.

To prevent MongoDB from inserting the same document more than once,
create a :ref:`unique index <index-type-unique>` on the ``name``
field. With a unique index, if an applications issues a group of upsert
operations, *exactly one* :method:`~db.collection.update()` would
successfully insert a new document.

The remaining operations would either:

- update the newly inserted document, or

- fail when they attempted to insert a duplicate.

  If the operation fails because of a duplicate index key error,
  applications may retry the operation which will succeed as an update
  operation.

.. _multi-parameter:

Multi Parameter
~~~~~~~~~~~~~~~

If ``multi`` is set to ``true``, the :method:`~db.collection.update()`
method updates all documents that meet the ``<query>`` criteria. The
``multi`` update operation may interleave with other operations, both
read and/or write operations. For unsharded collections, you can
override this behavior with the :update:`$isolated` operator, which
isolates the update operation and disallows yielding during the
operation. This isolates the update so that no client can see the
updated documents until they are all processed, or an error stops the
update operation.

If the :ref:`\<update\> <update-parameter>` document contains *only*
``field:value`` expressions, then :method:`~db.collection.update()`
*cannot* update multiple documents.

For an example, see :ref:`example-update-multi`.

Sharded Collections
~~~~~~~~~~~~~~~~~~~

.. |single-modification-operation-names| replace:: :method:`~db.collection.update()`

.. |single-modification-operation-option| replace:: ``multi: false``

.. include:: /includes/fact-single-modification-in-sharded-collections.rst

.. seealso:: :method:`~db.collection.findAndModify()`

Examples
--------

.. _example-update-specific-fields:

Update Specific Fields
~~~~~~~~~~~~~~~~~~~~~~

To update specific fields in a document, use :ref:`update operators
<update-operators>` in the ``<update>`` parameter. If the ``<update>``
parameter refers to non-existent fields in the current document, the
:method:`~db.collection.update()` method adds the fields to the
document.

For example, given a ``books`` collection with the following document:

.. code-block:: javascript

   { "_id" : 11, "item" : "Divine Comedy", "stock" : 2 }

The following operation adds a ``price`` field to the document and
increments the ``stock`` field by ``5``.

.. code-block:: javascript

   db.books.update(
      { item: "Divine Comedy" },
      {
         $set: { price: 18 },
         $inc: { stock: 5 }
      }
   )

The updated document is now the following:

.. code-block:: javascript

   { "_id" : 11, "item" : "Divine Comedy", "price" : 18, "stock" : 7 }

.. seealso:: :update:`$set`, :update:`$inc`, :doc:`/reference/operator/update`


Update Specific Fields in Embedded Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use :term:`dot notation` to update specific fields in embedded
documents.

For example, given a ``books`` collection with the following document:

.. code-block:: javascript

   { _id: 50, item: "TDB", stock: 0, isbn: { group: 11, publisher: 1111, title: 11, digit: 1 } }

The following example updates the ``publisher`` field and the ``digit``
field in the ``isbn`` embedded document:

.. code-block:: javascript

   db.books.update(
      { _id: 50 },
      { $set: { "isbn.publisher": 2222, "isbn.digit": 0 } }
   )

Remove Fields
~~~~~~~~~~~~~

The following operation uses the :update:`$unset` operator to remove
the ``stock`` field:

.. code-block:: javascript

   db.books.update( { _id: 11 }, { $unset: { stock: 1 } } )

.. seealso:: :update:`$unset`, :update:`$rename`, :doc:`/reference/operator/update`

.. _example-update-replace-fields:

Replace All Fields
~~~~~~~~~~~~~~~~~~

Given the following document in the ``books`` collection:

.. code-block:: javascript

   {
       "_id" : 22,
       "item" : "The Banquet",
       "author" : "Dante",
       "price" : 20,
       "stock" : 4
   }

The following operation passes an ``<update>`` document that contains
only field and value pairs, which means the document replaces all the
fields in the original document. The operation *does not* replace the
``_id`` value. The operation contains the same value for the ``item``
field in both the ``<query>`` and ``<update>`` documents, which means
the field does not change:

.. code-block:: javascript

   db.books.update(
      { item: "The Banquet" },
      { item: "The Banquet", price: 19 , stock: 3 }
   )

The operation creates the following new document. The operation removed
the ``author`` field and changed the values of the ``price`` and
``stock`` fields:

.. code-block:: javascript

   {
       "_id" : 22,
       "item" : "The Banquet",
       "price" : 19,
       "stock" : 3
   }

.. _example-update-upsert:

Insert a New Document if No Match Exists (Upsert)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following command sets the *upsert* option to ``true`` so that
:method:`~db.collection.update()` creates a new document in the
``books`` collection if no document matches the ``<query>`` parameter:

.. code-block:: javascript

   db.books.update(
      { item: "The New Life" },
      { item: "The New Life", author: "Dante", price: 15 },
      { upsert: true }
   )

If no document matches the ``<query>`` parameter, the update operation
inserts a document with the fields and values of the ``<update>``
parameter and a new unique ``ObjectId`` for the ``_id`` field:

.. code-block:: javascript

   {
       "_id" : ObjectId("51e5990c95098ed69d4a89f2"),
       "author" : "Dante",
       "item" : "The New Life",
       "price" : 15
   }

.. _example-update-multi:

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

To update multiple documents, set the ``multi`` option to ``true``. For
example, the following operation updates all documents where ``stock``
is less than ``5``:

.. code-block:: javascript

   db.books.update(
      { stock: { $lt: 5 } },
      { $set: { reorder: true } },
      { multi: true }
   )

.. _example-update-write-concern:

Override Default Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation on a replica set specifies a :doc:`write
concern </reference/write-concern>` of ``"w: majority"`` with a
``wtimeout`` of 5000 milliseconds such that the method returns after
the write propagates to a majority of the replica set members or the
method times out after 5 seconds.

.. code-block:: javascript

   db.books.update(
      { stock: { $lt: 5 } },
      { $set: { reorder: true } },
      {
        multi: true,
        writeConcern: { w: "majority", wtimeout: 5000 }
      }
   )

Combine the Upsert and Multi Parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Given a ``books`` collection that includes the following documents:

.. code-block:: javascript

   { _id: 11, author: "Dante", item: "Divine Comedy", price: 18, translatedBy: "abc123" }
   { _id: 12, author: "Dante", item: "Divine Comedy", price: 21, translatedBy: "jkl123" }
   { _id: 13, author: "Dante", item: "Divine Comedy", price: 15, translatedBy: "xyz123" }

The following command specifies the ``multi`` parameter to update all
documents where ``item`` is ``"Divine Comedy"`` and the ``author`` is
``"Dante"`` and specifies the ``upsert`` parameter to create a new
document if no matching documents are found:

.. code-block:: javascript

   db.books.update(
      { item: "Divine Comedy", author: "Dante" },
      { $set: { reorder: false, price: 10 } },
      { upsert: true, multi: true }
   )

The operation updates all three matching documents and results in the
following:

.. code-block:: javascript

   { _id: 11, author: "Dante", item: "Divine Comedy", price: 10, translatedBy: "abc123", reorder: false }
   { _id: 12, author: "Dante", item: "Divine Comedy", price: 10, translatedBy: "jkl123", reorder: false }
   { _id: 13, author: "Dante", item: "Divine Comedy", price: 10, translatedBy: "xyz123", reorder: false }

If the collection had *no* matching document, the operation would
result in the insertion of a document:

.. code-block:: javascript

   { _id: ObjectId("536aa66422363a21bc16bfd7"), author: "Dante", item: "Divine Comedy", reorder: false, price: 10 }

.. TODO need to just replace the below section with a little behavior
   blurb or move it somewhere else instead of trying to give
   examples for various array update use cases.

Update Arrays
~~~~~~~~~~~~~

Update an Element by Position
`````````````````````````````

If the update operation requires an update of an element in an array
field, the :method:`~db.collection.update()` method can
perform the update using the position of the element and :term:`dot
notation`. Arrays in MongoDB are zero-based.

The following operation queries the :doc:`bios collection
</reference/bios-example-collection>` for the first document with the
``_id`` field equal to ``1`` and updates the second element in the
``contribs`` array:

.. code-block:: javascript

   db.bios.update(
      { _id: 1 },
      { $set: { "contribs.1": "ALGOL 58" } }
   )

Update an Element if Position is Unknown
````````````````````````````````````````

If the position in the array is not known, the
:method:`~db.collection.update()` method can perform the update using
the :operator:`$` positional operator. The array field must appear in
the ``<query>`` parameter in order to determine which array element to
update.

The following operation queries the :doc:`bios collection
</reference/bios-example-collection>` for the first document where the
``_id`` field equals ``3`` and the ``contribs`` array contains an
element equal to ``compiler``. If found, the
:method:`~db.collection.update()` method updates the first matching
element in the array to ``A compiler`` in the document:

.. code-block:: javascript

   db.bios.update(
      { _id: 3, "contribs": "compiler" },
      { $set: { "contribs.$": "A compiler" } }
   )

Update a Document Element
`````````````````````````

The :method:`~db.collection.update()` method can perform the update of
an array that contains embedded documents by using the positional
operator (i.e. :operator:`$`) and the :term:`dot notation`.

The following example queries the :doc:`bios collection
</reference/bios-example-collection>` for the first document where the
``_id`` field equals ``4`` and the ``awards`` array contains an
embedded document where the ``by`` field equals ``ACM``. If found, the
:method:`~db.collection.update()` method updates the ``by`` field in
the first matching embedded document:

.. code-block:: javascript

   db.bios.update(
      { _id: 4, "awards.by": "ACM"  } ,
      { $set: { "awards.$.by": "Association for Computing Machinery" } }
   )

Add an Element
``````````````

The following operation queries the :doc:`bios collection
</reference/bios-example-collection>` for the first document that has an
``_id`` field equal to ``1`` and adds a new element to the ``awards``
field:

.. code-block:: javascript

   db.bios.update(
      { _id: 1 },
      {
        $push: { awards: { award: "IBM Fellow", year: 1963, by: "IBM" } }
      }
   )

In the next example, the :update:`$set` operator uses :ref:`dot
notation <document-dot-notation>` to access the ``middle`` field in the
``name`` embedded document. The :update:`$push` operator adds an
embedded document to the ``awards`` array.

Consider the following operation:

.. code-block:: javascript

   db.bios.update(
      { _id: 1 },
      {
         $set: { "name.middle": "Warner" },
         $push: { awards: {
            award: "IBM Fellow",
               year: "1963",
               by: "IBM"
            }
         }
      }
   )

This :method:`~db.collection.update()` operation:

- Modifies the field ``name`` whose value is another document.
  Specifically, the :update:`$set` operator updates the ``middle``
  field in the ``name`` document. The document uses :ref:`dot notation
  <document-dot-notation>` to access a field in an embedded document.

- Adds an element to the field ``awards``, whose value is an array.
  Specifically, the :update:`$push` operator adds another document as
  an element to the field ``awards``.

.. _writeresults-update:

WriteResult
-----------

.. versionchanged:: 2.6

Successful Results
~~~~~~~~~~~~~~~~~~

The :method:`~db.collection.update()` method returns a :method:`WriteResult`
object that contains the status of the operation. Upon success, the
:method:`WriteResult` object contains the number of
documents that matched the query condition, the number of documents
inserted via an ``upsert``, and the number of documents modified:

.. code-block:: javascript

   WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

.. see:: :data:`WriteResult.nMatched`, :data:`WriteResult.nUpserted`,
   :data:`WriteResult.nModified`

Write Concern Errors
~~~~~~~~~~~~~~~~~~~~

If the :method:`~db.collection.update()` method encounters write
concern errors, the results include the
:data:`WriteResult.writeConcernError` field:

.. code-block:: javascript

   WriteResult({
      "nMatched" : 1,
      "nUpserted" : 0,
      "nModified" : 1,
      "writeConcernError" : {
         "code" : 64,
         "errmsg" : "waiting for replication timed out at shard-a"
      }
   })

.. seealso:: :method:`WriteResult.hasWriteConcernError()`

Errors Unrelated to Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the :method:`~db.collection.update()` method encounters a non-write
concern error, the results include the :data:`WriteResult.writeError`
field:

.. code-block:: javascript

   WriteResult({
      "nMatched" : 0,
      "nUpserted" : 0,
      "nModified" : 0,
      "writeError" : {
         "code" : 7,
         "errmsg" : "could not contact primary for replica set shard-a"
      }
   })

.. seealso:: :method:`WriteResult.hasWriteError()`
