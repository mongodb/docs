.. default-domain:: mongodb
.. _mongos:

==========
``mongos``
==========


Synopsis
--------

:program:`mongos` for "MongoDB Shard," is a routing service for
MongoDB shard configurations that processes queries from the
application layer, and determines the location of this data in the
:term:`sharded cluster`, in order to complete these operations.
From the perspective of the application, a
:program:`mongos` instance behaves identically to any other MongoDB
instance.

.. note::

   .. versionchanged:: 2.1

   Some aggregation operations using the :dbcommand:`aggregate` will
   cause :program:`mongos` instances to require more CPU resources
   than in previous versions. This modified performance profile may
   dictate alternate architecture decisions if you use the
   :term:`aggregation framework` extensively in a sharded environment.

.. seealso:: :doc:`/sharding` and :doc:`/core/sharding-introduction`.

Options
-------

.. binary:: mongos

.. program:: mongos

.. option:: --help, -h

   Returns a basic help and usage text.

.. option:: --version

   Returns the version of the :program:`mongos` daemon.

.. option:: --config <filename>, -f <filename>

   Specifies a configuration file, that you can use to specify
   runtime-configurations. While the options are equivalent and
   accessible via the other command line arguments, the configuration
   file is the preferred method for runtime configuration of
   :program:`mongos`. See the :doc:`/reference/configuration-options`
   document for more information about these options.

   Not all configuration options for :program:`mongod` make sense in
   the context of :program:`mongos`.

   .. include:: /includes/note-configuration-file-must-be-ascii.rst

.. option:: --verbose, -v

   Increases the amount of internal reporting returned on standard
   output or in the log file specified by :option:`--logpath`. Use the
   ``-v`` form to control the level of verbosity by including the
   option multiple times, (e.g. ``-vvvvv``.)

.. option:: --quiet

   Runs the :program:`mongos` instance in a quiet mode that attempts to limit
   the amount of output.

.. option:: --port <port>

   Specifies a TCP port for the :program:`mongos` to listen for client
   connections. By default :program:`mongos` listens for connections on
   port 27017.

   UNIX-like systems require root access to access ports with numbers
   lower than 1024.

.. option:: --bind_ip <ip address>

   The IP address that the :program:`mongos` process will bind to and
   listen for connections. By default :program:`mongos` listens for
   connections all interfaces. You may attach :program:`mongos` to any
   interface; however, when attaching :program:`mongos` to a publicly
   accessible interface ensure that you have implemented proper
   authentication and/or firewall restrictions to protect the
   integrity of your database.

.. option:: --maxConns <number>

   Specifies the maximum number of simultaneous connections that
   :program:`mongos` will accept. This setting will have no effect if
   the value of this setting is higher than your operating system's
   configured maximum connection tracking threshold.

   This is particularly useful for :program:`mongos` if you have a
   client that creates a number of collections but allows them to
   timeout rather than close the collections. When you set
   :setting:`maxConns`, ensure the value is slightly higher than the
   size of the connection pool or the total number of connections to
   prevent erroneous connection spikes from propagating to the members
   of a :term:`sharded cluster`.

   .. include:: /includes/note-max-conns-max.rst

.. option:: --objcheck

   Forces the :program:`mongos` to validate all requests from clients
   upon receipt to ensure that invalid objects are never inserted into
   the database. This option has a performance impact, and is not
   enabled by default.

.. option:: --logpath <path>

   Specify a path for the log file that will hold all diagnostic
   logging information.

   Unless specified, :program:`mongos` will output all log information
   to the standard output. Additionally, unless you also specify
   :option:`--logappend`, the logfile will be overwritten when the
   process restarts.

.. option:: --logappend

   Specify to ensure that :program:`mongos` appends additional logging
   data to the end of the logfile rather than overwriting the content
   of the log when the process restarts.

.. option:: --setParameter <options>

   .. versionadded:: 2.4

   Specifies an option to configure on startup.  Specify multiple
   options with multiple :option:`--setParameter` options.  See
   :doc:`/reference/parameters` for full documentation of these
   parameters. The :dbcommand:`setParameter` database command provides
   access to many of these parameters. :option:`--setParameter` supports the
   following options:

   .. include:: /includes/list-set-parameters-mongos.rst

.. option:: --syslog

   .. versionadded:: 2.1.0

   Sends all logging output to the host's :term:`syslog` system rather
   than to standard output or a log file as with :option:`--logpath`.

   .. important:: You cannot use :option:`--syslog` with :option:`--logpath`.

.. option:: --pidfilepath <path>

   Specify a file location to hold the :term:`PID` or process ID of the
   :program:`mongos` process. Useful for tracking the :program:`mongos` process in
   combination with the :option:`mongos --fork` option.

   Without a specified :option:`--pidfilepath` option,
   :program:`mongos` creates no PID file.

.. option:: --keyFile <file>

   Specify the path to a key file to store authentication
   information. This option is used for interprocess authentication
   among the components of the :term:`sharded cluster`, including
   all :program:`mongos` and :program:`mongod` instances in the cluster.

   .. seealso:: :ref:`sharding-security`

.. option:: --nounixsocket

   Disables listening on the UNIX socket. :program:`mongos` always
   listens on the UNIX socket, unless :option:`--nounixsocket` is set,
   :setting:`bind_ip` is *not* set, or :setting:`bind_ip` does *not*
   specify ``127.0.0.1``.

   .. |mongodb-package| replace:: :program:`mongos`

   .. include:: /includes/note-deb-and-rpm-default-to-localhost.rst

.. option:: --unixSocketPrefix <path>

   Specifies a path for the UNIX socket. Unless this option has a
   value :program:`mongos` creates a socket with ``/tmp`` as a prefix.

   MongoDB will *always* create and listen on a UNIX socket, unless
   :option:`--nounixsocket` is set, :setting:`bind_ip` is *not* set,
   or :setting:`bind_ip` specifies ``127.0.0.1``.

.. option:: --fork

   Enables a :term:`daemon` mode for :program:`mongos` which forces the
   process to the background. This is the normal mode of operation, in
   production and production-like environments, but may *not* be
   desirable for testing.

.. option:: saslServiceName

   .. versionadded:: 2.4.6
      Overrides the default :doc:`Kerberos
      </tutorial/control-access-to-mongodb-with-kerberos-authentication>`
      service name component of the :doc:`Kerberos
      </tutorial/control-access-to-mongodb-with-kerberos-authentication>`
      principal name, on a per-instance basis.

      Only available on :doc:`MongoDB Enterprise
      </tutorial/install-mongodb-enterprise>`.

   .. important::

      Ensure that your driver supports alternate service name
      components.

.. option:: --configdb <config1>,<config2><:port>,<config3>

   Set this option to specify a configuration database
   (i.e. :term:`config database`) for the :term:`sharded cluster`. You must
   specify either 1 configuration server or 3 configuration servers,
   in a comma separated list.

   .. note::

      :program:`mongos` instances read from the first :term:`config
      server <config database>` in the list provided. All
      :program:`mongos` instances **must** specify the hosts to the
      :option:`--configdb` setting in the same order.

      If your configuration databases reside in more that one data
      center, order the hosts in the :option:`--configdb` argument so
      that the config database that is closest to the majority of your
      :program:`mongos` instances is first servers in the list.

   .. warning::

      Never remove a config server from the :option:`--configdb` parameter, even if
      the config server or servers are not available, or offline.

.. option:: --test

   This option is for internal testing use only, and runs unit tests
   without starting a :program:`mongos` instance.

.. option:: --upgrade

   This option updates the meta data format used by the
   :term:`config database`.

.. option:: --chunkSize <value>

   The value of the :option:`--chunkSize` determines the size of each
   :term:`chunk`, *in megabytes*, of data distributed around the
   :term:`sharded cluster`. The default value is 64 megabytes, which
   is the ideal size for chunks in most deployments: larger chunk size
   can lead to uneven data distribution, smaller chunk size often
   leads to inefficient movement of chunks between nodes. However, in
   some circumstances it may be necessary to set a different chunk
   size.

   This option *only* sets the chunk size when initializing the
   cluster for the first time. If you modify the run-time option
   later, the new value will have no effect. See the
   :doc:`/tutorial/modify-chunk-size-in-sharded-cluster` procedure if you
   need to change the chunk size on an existing sharded cluster.

.. option:: --ipv6

   Enables IPv6 support to allow clients to connect to :program:`mongos`
   using IPv6 networks. MongoDB disables IPv6 support by default in
   :program:`mongos` and all utilities.

.. option:: --jsonp

   Permits :term:`JSONP` access via an HTTP interface. Consider the
   security implications of allowing this activity before enabling this
   option. If the HTTP interface is disabled, the :option:`--jsonp`
   also enables the HTTP interface.

   .. seealso:: :option:`--httpinterface` to enable the HTTP interface.

.. option:: --noscripting

   Disables the scripting engine.

.. option:: --nohttpinterface

   .. deprecated:: 2.6
      MongoDB disables the HTTP interface by default.

   Disables the HTTP interface.

   Do not use in conjunction with :option:`--jsonp`.

.. option:: --httpinterface

   .. versionadded:: 2.6

   Enables the HTTP interface. Enabling the interface can increase
   network exposure.

   Leave the HTTP interface *disabled* for production deployments. If
   you *do* enable this interface, you should only allow trusted
   clients to access this port. See :ref:`security-firewalls`.

   .. include:: /includes/note-kerberos-unsupported-in-http-console.rst

.. option:: --localThreshold

   .. versionadded:: 2.2

   :option:`--localThreshold` affects the logic that :program:`mongos`
   uses when selecting :term:`replica set` members to pass read
   operations to from clients. Specify a value to
   :option:`--localThreshold` in milliseconds. The default value is
   ``15``, which corresponds to the default value in all of the client
   :doc:`drivers </applications/drivers>`.

   When :program:`mongos` receives a request that permits reads to
   :term:`secondary` members, the :program:`mongos` will:

   - find the member of the set with the lowest ping time.

   - construct a list of replica set members that is within a ping time
     of 15 milliseconds of the nearest suitable member of the set.

     If you specify a value for :option:`--localThreshold`,
     :program:`mongos` will construct the list of replica members
     that are within the latency allowed by this value.

   - The :program:`mongos` will select a member to read from at random
     from this list.

   The ping time used for a set member compared by the
   :option:`--localThreshold` setting is a moving average of recent
   ping times, calculated, at most, every 10 seconds. As a result, some queries
   may reach members above the threshold until the :program:`mongos`
   recalculates the average.

   See the :ref:`replica-set-read-preference-behavior-member-selection`
   section of the :doc:`read preference </core/read-preference>`
   documentation for more information.

.. option:: --noAutoSplit

   .. versionadded:: 2.0.7

   :option:`--noAutoSplit` prevents :program:`mongos` from
   automatically inserting metadata splits in a :term:`sharded
   collection <sharding>`. If set on all :program:`mongos`, this will prevent
   MongoDB from creating new chunks as the data in a collection
   grows.

   Because any :program:`mongos` in a cluster can create a split,
   to totally disable splitting in a cluster you must
   set :option:`--noAutoSplit` on all :program:`mongos`.

   .. warning::

      With :option:`--noAutoSplit` enabled, the data in your sharded
      cluster may become imbalanced over time. Enable with caution.

SSL Options
~~~~~~~~~~~

.. see:: :doc:`/tutorial/configure-ssl` for full
   documentation of MongoDB's support.

.. |binary-name| replace:: :program:`mongos`

.. include:: /includes/manpage-options-ssl.rst

Audit Options
~~~~~~~~~~~~~

.. include:: /includes/manpage-options-audit.rst
