===================
removeShardFromZone
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: removeShardFromZone

   The :dbcommand:`removeShardFromZone` administrative command removes the
   association between a shard and a :term:`zone`.


   .. |method| replace:: :method:`sh.removeShardFromZone` 
      helper method
   .. include:: /includes/fact-dbcommand-tip

   .. |command| replace:: ``removeShardFromZone``

Compatibility
-------------

This command is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-no-serverless.rst

.. include:: /includes/fact-environments-onprem-only.rst

Syntax
------

You can only run :dbcommand:`removeShardFromZone` on the ``admin`` database
from a :binary:`~bin.mongos` instance.

The command has the following syntax:

.. code-block:: javascript

   db.adminCommand(
      {
        removeShardFromZone: <string>,
        zone: <string>
      }
   )

Command Fields
--------------

The command takes the following fields:

.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Field
     - Type
     - Description

   * - :ref:`removeShardFromZone <cmd-removeShardFromZone-shard>`
     - string
     - .. _cmd-removeShardFromZone-shard:
     
       The name of the shard from which to remove the :ref:`zone
       <cmd-removeShardFromZone-zone>` association.
       
   * - :ref:`zone <cmd-removeShardFromZone-zone>`
     - string
     - .. _cmd-removeShardFromZone-zone:
     
       The name of the zone whose association with the :ref:`shard
       <cmd-removeShardFromZone-shard>` you want to remove.
       
:binary:`~bin.mongosh` provides the helper method
:method:`sh.removeShardFromZone()`.

Behavior
--------

:dbcommand:`removeShardFromZone` does not remove ranges associated with the
zone.

To completely remove a zone from the cluster, you must run 
:dbcommand:`removeShardFromZone` on each shard associated with the zone.

If the shard specified is the last shard associated with the zone, you must
ensure there are no remaining shard key ranges associated with the zone. Use
:dbcommand:`updateZoneKeyRange` to remove any existing ranges associated with
the zone before running :dbcommand:`removeShardFromZone`.

See the :ref:`zone <zone-sharding>` manual page for more information on zones
in sharded clusters.

Security
~~~~~~~~

For sharded clusters that enforce :doc:`access control
</tutorial/enable-authentication>`, you must authenticate either as:

- a user whose privileges include:

  - :authaction:`update` on the ``shards`` collection in the ``config``
    database, and

  - :authaction:`find` on the ``tags`` collection in the ``config``
    database;
    
  or, alternatively

- a user whose privileges include :authaction:`enableSharding` on the
  :ref:`cluster <resource-specific-collection>` resource.

The :authrole:`clusterAdmin` or :authrole:`clusterManager` built-in roles have
the appropriate permissions for issuing :dbcommand:`removeShardFromZone`. See
the :ref:`Role-Based Access Control <authorization>` manual page for more
information.

Example
-------

The following example removes the association between ``shard0000`` and zone
``NYC``:

.. code-block:: javascript

   db.adminCommand( { removeShardFromZone : "shard0000" , zone : "NYC" } )
