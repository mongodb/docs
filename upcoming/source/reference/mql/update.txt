.. _update-operators-ref:

================
Update Operators
================

.. default-domain:: mongodb

.. meta::
   :description: Use update operators to modify MongoDB documents. You can set field values, manipulate arrays, and more.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _update-operators-top-level:

The following modifiers are available for use in update operations such
as :method:`db.collection.updateMany()` and
:method:`db.collection.findAndModify()`.

Compatibility
-------------

.. |operator-method| replace:: update operators

.. include:: /includes/fact-compatibility.rst

Syntax
------

Specify update operators in the following form:

.. code-block:: javascript

   {
      <operator1>: { <field1>: <value1>, ... },
      <operator2>: { <field2>: <value2>, ... },
      ...
   }

.. _update-operators:

Update Operators
----------------

.. _update-operators-processing-order:

Behavior
~~~~~~~~

Starting in MongoDB 5.0, update operators process document fields with
string-based names in lexicographic order. Fields with numeric names are
processed in numeric order. 

Consider this example :update:`$set` command:

.. code-block:: javascript
 
  { $set: { "a.2": <new value>, "a.10": <new value>, } }

In MongoDB 5.0 and later, ``"a.2"`` is processed before ``"a.10"`` 
because ``2`` comes before ``10`` in numeric order. 

Fields
~~~~~~

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :update:`$currentDate`

     - Sets the value of a field to current date, either as a Date or a Timestamp.

   * - :update:`$inc`

     - Increments the value of the field by the specified amount.

   * - :update:`$min`

     - Only updates the field if the specified value is less than the existing field value.

   * - :update:`$max`

     - Only updates the field if the specified value is greater than the existing field value.

   * - :update:`$mul`

     - Multiplies the value of the field by the specified amount.

   * - :update:`$rename`

     - Renames a field.

   * - :update:`$set`

     - Sets the value of a field in a document.

   * - :update:`$setOnInsert`

     - Sets the value of a field if an update results in an insert of a document. Has no effect on update operations that modify existing documents.

   * - :update:`$unset`

     - Removes the specified field from a document.

   

Array
~~~~~

Operators
`````````

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :update:`$`

     - Acts as a placeholder to update the first element that matches the query condition.

   * - :update:`$[]`

     - Acts as a placeholder to update all elements in an array for the documents that match the query condition.

   * - :update:`$[\<identifier\>]`

     - Acts as a placeholder to update all elements that match the ``arrayFilters`` condition for the documents that match the query condition.

   * - :update:`$addToSet`

     - Adds elements to an array only if they do not already exist in the set.

   * - :update:`$pop`

     - Removes the first or last item of an array.

   * - :update:`$pull`

     - Removes all array elements that match a specified query.

   * - :update:`$push`

     - Adds an item to an array.

   * - :update:`$pullAll`

     - Removes all matching values from an array.


Modifiers
`````````

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :update:`$each`

     - Modifies the :update:`$push` and :update:`$addToSet` operators to append multiple items for array updates.

   * - :update:`$position`

     - Modifies the :update:`$push` operator to specify the position in the array to add elements.

   * - :update:`$slice`

     - Modifies the :update:`$push` operator to limit the size of updated arrays.

   * - :update:`$sort`

     - Modifies the :update:`$push` operator to reorder documents stored in an array.

Bitwise
~~~~~~~

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :update:`$bit`

     - Performs bitwise ``AND``, ``OR``, and ``XOR`` updates of integer values.


.. toctree::
   :titlesonly:

   Arrays </reference/operator/update-array>
   Bitwise </reference/operator/update-bitwise>
   Fields </reference/operator/update-field>

Updates with Aggregation Pipeline
---------------------------------

To create expressive update statements, such as conditional updates
based on current field values or single-field updates that use the value
of another field, you can perform updates with an aggregation pipeline.

For syntax and examples, see :ref:`updates-agg-pipeline`.
