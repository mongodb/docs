=========================
db.collection.deleteOne()
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.collection.deleteOne()


   .. include:: /includes/fact-mongo-shell-method.rst


   Removes a single document from a collection.

   .. code-block:: javascript

      db.collection.deleteOne(
         <filter>,
         {
            writeConcern: <document>,
            collation: <document>,
            hint: <document|string>        // Available starting in MongoDB 4.4
         }
      )


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - :ref:`filter <deleteOne-filter>`
   
        - document
   
        - .. _deleteOne-filter:
        
          Specifies deletion criteria using :doc:`query operators
          </reference/operator>`. 
          
          Specify an empty document ``{ }`` to delete the first document returned in 
          the collection.
          
          
   
      * - :ref:`writeConcern <deleteOne-wc>`
   
        - document
   
        - .. _deleteOne-wc:
        
          Optional. A document expressing the :doc:`write concern
          </reference/write-concern>`. Omit to use the default write concern.
          
          .. include:: /includes/extracts/transactions-operations-write-concern.rst
          
          
   
      * - :ref:`collation <deleteOne-collation>`
   
        - document
   
        - .. _deleteOne-collation:
        
          Optional. 
          
          .. include:: /includes/extracts/collation-option.rst
          
          
      * - :ref:`hint <deleteOne-hint>`

        - document

        - .. _deleteOne-hint:

          Optional. A document or string that specifies the :doc:`index
          </indexes>` to use to support the :ref:`query predicate
          <deleteOne-filter>`.
          
          The option can take an index specification document or the
          index name string.
          
          If you specify an index that does not exist, the operation
          errors.

          For an example, see :ref:`ex-deleteOne-hint`.

          .. versionadded:: 4.4

   :returns:
      
      A document containing:
      
      - A boolean ``acknowledged`` as ``true`` if the operation ran with 
        :term:`write concern` or ``false`` if write concern was disabled
       
      - ``deletedCount`` containing the number of deleted documents

Behavior
--------

.. _deleteOne-deletion-order:

Deletion Order
~~~~~~~~~~~~~~

:method:`db.collection.deleteOne` deletes the first document that matches 
the filter. Use a field that is part of a :term:`unique index` such as ``_id`` 
for precise deletions.

.. _deleteOne-capped-collection:

Capped Collections
~~~~~~~~~~~~~~~~~~

:method:`db.collection.deleteOne()` throws a ``WriteError`` exception 
if used on a :term:`capped collection`. To remove documents from a capped 
collection, use :method:`db.collection.drop()` instead.

Sharded Collections
~~~~~~~~~~~~~~~~~~~

:method:`db.collection.deleteOne()` operations on a sharded collection
must include the :term:`shard key` *or* the ``_id`` field in the query
specification. :method:`db.collection.deleteOne()` operations in a
sharded collection which do not contain either the :term:`shard key` or
the ``_id`` field return an error.

Transactions
~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-supported-operation.rst

.. include:: /includes/extracts/transactions-operations-write-concern.rst

.. include:: /includes/extracts/transactions-usage.rst

.. |operation| replace:: :method:`db.collection.deleteOne()`

Examples
--------

.. _deleteOne-example-delete-single-document:

Delete a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

The ``orders`` collection has documents with the following structure:

.. code-block:: javascript

   {
      _id: ObjectId("563237a41a4d68582c2509da"),
      stock: "Brent Crude Futures",
      qty: 250,
      type: "buy-limit",
      limit: 48.90,
      creationts: ISODate("2015-11-01T12:30:15Z"),
      expiryts: ISODate("2015-11-01T12:35:15Z"),
      client: "Crude Traders Inc."
   }
   
The following operation deletes the order with ``_id: 
ObjectId("563237a41a4d68582c2509da")`` : 

.. code-block:: javascript

   try {
      db.orders.deleteOne( { "_id" : ObjectId("563237a41a4d68582c2509da") } );
   } catch (e) {
      print(e);
   }
   
The operation returns:

.. code-block:: javascript

   { "acknowledged" : true, "deletedCount" : 1 }
   
The following operation deletes the first document with ``expiryts`` greater 
than ``ISODate("2015-11-01T12:40:15Z")``

.. code-block:: javascript

   try {
      db.orders.deleteOne( { "expiryts" : { $lt: ISODate("2015-11-01T12:40:15Z") } } );
   } catch (e) {
      print(e);
   }

The operation returns:

.. code-block:: javascript

   { "acknowledged" : true, "deletedCount" : 1 }
   
.. _deleteOne-example-update-with-write-concern:

deleteOne() with Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Given a three member replica set, the following operation specifies a 
``w`` of ``majority``, ``wtimeout`` of ``100``:

.. code-block:: javascript

   try {
      db.orders.deleteOne(
          { "_id" : ObjectId("563237a41a4d68582c2509da") },
          { w : "majority", wtimeout : 100 }
      );
   } catch (e) {
      print (e);
   }

If the acknowledgement takes longer than the ``wtimeout`` limit, the following 
exception is thrown:

.. code-block:: javascript

   WriteConcernError({
      "code" : 64,
      "errmsg" : "waiting for replication timed out",
      "errInfo" : {
        "wtimeout" : true,
        "writeConcern" : {    // Added in MongoDB 4.4
          "w" : "majority",
          "wtimeout" : 100,
          "provenance" : "getLastErrorDefaults"
        }
      }
   })

.. seealso::

   :data:`WriteResult.writeConcernError`

Specify Collation
~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/collation-versionadded.rst

A collection ``myColl`` has the following documents:

.. code-block:: javascript

   { _id: 1, category: "caf√©", status: "A" }
   { _id: 2, category: "cafe", status: "a" }
   { _id: 3, category: "cafE", status: "a" }

The following operation includes the :ref:`collation <collation>`
option:

.. code-block:: javascript

   db.myColl.deleteOne( 
      { category: "cafe", status: "A" }, 
      { collation: { locale: "fr", strength: 1 } }
   )

.. _ex-deleteOne-hint:

Specify ``hint`` for Delete Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 4.4

From the :binary:`~bin.mongo` shell, create a ``members`` collection
with the following documents:

.. code-block:: javascript

   db.members.insertMany([
      { "_id" : 1, "member" : "abc123", "status" : "P", "points" :  0,  "misc1" : null, "misc2" : null },
      { "_id" : 2, "member" : "xyz123", "status" : "A", "points" : 60,  "misc1" : "reminder: ping me at 100pts", "misc2" : "Some random comment" },
      { "_id" : 3, "member" : "lmn123", "status" : "P", "points" :  0,  "misc1" : null, "misc2" : null },
      { "_id" : 4, "member" : "pqr123", "status" : "D", "points" : 20,  "misc1" : "Deactivated", "misc2" : null },
      { "_id" : 5, "member" : "ijk123", "status" : "P", "points" :  0,  "misc1" : null, "misc2" : null },
      { "_id" : 6, "member" : "cde123", "status" : "A", "points" : 86,  "misc1" : "reminder: ping me at 100pts", "misc2" : "Some random comment" }
   ])

Create the following indexes on the collection:

.. code-block:: javascript

   db.members.createIndex( { status: 1 } )
   db.members.createIndex( { points: 1 } )

The following delete operation explicitly hints to use the index
``{ status: 1 }``:

.. code-block:: javascript

   db.members.deleteOne(
      { "points": { $lte: 20 }, "status": "P" }, 
      { hint: { status: 1 } }
   )

.. note::
   
   If you specify an index that does not exist, the operation errors.

The delete command returns the following:

.. code-block:: javascript

   { "acknowledged" : true, "deletedCount" : 1 }

To view the indexes used, you can use the :pipeline:`$indexStats` pipeline:

.. code-block:: javascript

   db.members.aggregate( [ { $indexStats: { } }, { $sort: { name: 1 } } ] )

The ``accesses.ops`` field in the :pipeline:`$indexStats` output
indicates the number of operations that used the index.

.. seealso::

   To delete multiple documents, see 
   :method:`db.collection.deleteMany()`
