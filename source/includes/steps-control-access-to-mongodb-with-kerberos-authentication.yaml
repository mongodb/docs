title: Start ``mongod`` without Kerberos.
stepnum: 1
ref: start-mongod-without-kerberos-support
pre: |
   For the initial addition of Kerberos users, start :binary:`~bin.mongod`
   without Kerberos support.
post: |
   If a Kerberos user is already in MongoDB and has the
   :ref:`privileges required to create a user
   <createUser-required-access>`, you can start
   :binary:`~bin.mongod` with Kerberos support.

   Include additional settings as appropriate to your deployment.

   .. note::

      .. include:: /includes/extracts/default-bind-ip-security.rst

---
title: Connect to ``mongod``.
stepnum: 2
ref: connect-to-mongod
pre: |
   Connect via the :binary:`~bin.mongo` shell to the :binary:`~bin.mongod`
   instance. If :binary:`~bin.mongod` has :option:`--auth <mongod --auth>` enabled, ensure
   you connect with the :ref:`privileges required to create a user
   <createUser-required-access>`.
---
title: Add Kerberos Principal(s) to MongoDB.
stepnum: 3
ref: add-kerberos-principals
pre: |
   Add a Kerberos principal, ``<username>@<KERBEROS REALM>`` or
   ``<username>/<instance>@<KERBEROS REALM>``, to MongoDB in the
   ``$external`` database. Specify the Kerberos realm in all uppercase.
   The ``$external`` database allows :binary:`~bin.mongod` to consult an
   external source (e.g. Kerberos) to authenticate. To specify the
   user's privileges, assign :doc:`roles </core/authorization>` to the
   user.
   
   .. include:: /includes/extracts/sessions-external-username-limit.rst
action:
   pre: |
     The following example adds the Kerberos principal
     ``application/reporting@EXAMPLE.NET`` with read-only access to the
     ``records`` database:
   language: javascript
   code: |
      use $external
      db.createUser(
         {
           user: "application/reporting@EXAMPLE.NET",
           roles: [ { role: "read", db: "records" } ]
         }
      )
post: |
   Add additional principals as needed. For every user you want to
   authenticate using Kerberos, you must create a corresponding user in
   MongoDB.
   For more
   information about creating and managing users, see
   :doc:`/reference/command/nav-user-management`.
---
title: Start ``mongod`` with Kerberos support.
stepnum: 4
ref: start-mongod-with-kerberos-support
action:
  - pre: |
       To start :binary:`~bin.mongod` with Kerberos support, set the
       environmental variable ``KRB5_KTNAME`` to the path of the keytab
       file and the :binary:`~bin.mongod` parameter
       :parameter:`authenticationMechanisms` to ``GSSAPI`` in the
       following form:
    language: sh
    code: |
       env KRB5_KTNAME=<path to keytab file> \
       mongod \
       --setParameter authenticationMechanisms=GSSAPI \
       <additional mongod options>
    post: |

       .. include:: /includes/extracts/default-bind-ip-security-additional-command-line.rst

  - pre: |
       For example, the following starts a standalone :binary:`~bin.mongod`
       instance with Kerberos support:
    language: sh
    code: |
       env KRB5_KTNAME=/opt/mongodb/mongod.keytab \
       /opt/mongodb/bin/mongod --auth \
       --setParameter authenticationMechanisms=GSSAPI \
       --dbpath /opt/mongodb/data --bind_ip localhost,<ip address>
post: |
   The path to your :binary:`~bin.mongod` as well as your :ref:`keytab file
   <keytab-files>` may differ. The :ref:`keytab file <keytab-files>`
   must be only accessible to the owner of the :binary:`~bin.mongod`
   process.

   With the official ``.deb`` or ``.rpm`` packages, you can set the
   ``KRB5_KTNAME`` in a environment settings file. See
   :ref:`setting-krb5_ktname` for details.
---
title: Connect ``mongo`` shell to ``mongod`` and authenticate.
stepnum: 5
ref: invoke-an-authenticated-mongo-shell
pre: |
   Connect the :binary:`~bin.mongo` shell client as the Kerberos principal
   ``application/reporting@EXAMPLE.NET``. Before connecting, you
   must have used Kerberos's ``kinit`` program to get credentials for
   ``application/reporting@EXAMPLE.NET``.
action:
  - pre: You can connect and authenticate from the command line.
    language: sh
    code: |
       mongo --host hostname.example.net --authenticationMechanism=GSSAPI --authenticationDatabase='$external' --username application/reporting@EXAMPLE.NET
    post: |
       If you are connecting to a system whose hostname matches the
       Kerberos name, ensure that you specify the fully qualified
       domain name (FQDN) for the ``--host``
       option, rather than an IP address or unqualified hostname.

       If you are connecting to a system whose hostname does not
       match the Kerberos name, use :option:`--gssapiHostName <mongo --gssapiHostName>`
       to specify the Kerberos FQDN that it responds to.
  - pre: |
       Alternatively, you can first connect :binary:`~bin.mongo` to the
       :binary:`~bin.mongod`, and then from the :binary:`~bin.mongo` shell, use
       the :method:`db.auth()` method to authenticate in the
       ``$external`` database.
    language: javascript
    code: |
       use $external
       db.auth( { mechanism: "GSSAPI", user: "application/reporting@EXAMPLE.NET" } )
...
