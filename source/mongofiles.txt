.. default-domain:: mongodb

.. binary:: mongofiles

.. program:: mongofiles

.. _mongofiles:

==============
``mongofiles``
==============

.. meta::
   :description: Use `mongofiles` to manipulate files in GridFS from the command line, supporting various MongoDB versions and platforms with options for authentication and TLS/SSL configurations.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. |arrow| unicode:: U+27A4
.. |tool-binary| replace:: :binary:`~bin.mongofiles`
.. |mongodb-aws-example| replace:: :ref:`mongofiles-example-connect-using-aws-iam`

Synopsis
--------

The :binary:`~bin.mongofiles` utility makes it possible to manipulate files
stored in your MongoDB instance in :term:`GridFS` objects from the
command line. It is particularly useful as it provides an interface
between objects stored in your file system and GridFS.

.. include:: /includes/extracts/require-cmd-line-mongofiles.rst

Versioning
~~~~~~~~~~

.. include:: /includes/extracts/dbtools-version-single.rst

.. note:: Quick links to older documentation

   - :v4.2:`MongoDB 4.2 mongofiles </reference/program/mongofiles>`
   - :v4.0:`MongoDB 4.0 mongofiles </reference/program/mongofiles>`

This documentation is for version ``{+release+}`` of |tool-binary|. 

Compatibility
-------------

MongoDB Server Compatibility
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/dbtools-compatibility-single.rst

Platform Support
~~~~~~~~~~~~~~~~

|tool-binary| version ``{+release+}`` is supported on the following
platforms:

.. include:: /includes/fact-platform-support.rst

Installation
------------

.. include:: /includes/fact-see-install-guide.rst

Syntax
------

The :binary:`~bin.mongofiles` command has the following form:

.. code-block:: sh

   mongofiles <options> <connection-string> <command> <filename or _id>

.. include:: /includes/extracts/require-cmd-line-mongofiles.rst

The components of the :binary:`~bin.mongofiles` command are:

1. :ref:`Options <mongofiles-options>`. You may use one or more of
   these options to control the behavior of :binary:`~bin.mongofiles`.

2. :option:`Connection String <mongofiles --uri>`. The connection string
   of the :binary:`~bin.mongod` / :binary:`~bin.mongos` to connect to
   with :binary:`~bin.mongofiles`.

3. :ref:`Command <mongofiles-commands>`. Use one of these commands to
   determine the action of :binary:`~bin.mongofiles`.

4. An identifier which is either: the name of a file on your local file
   system, or a GridFS object.

.. important:: 

   For :term:`replica sets <replica set>`,
   :binary:`~bin.mongofiles` can only read from the set's
   :term:`primary`.

Required Access
---------------

In order to connect to a :binary:`~bin.mongod` that enforces authorization
with the :option:`--auth <mongod.--auth>` option, you must use the
:option:`--username <mongofiles --username>` and :option:`--password
<mongofiles --password>` options. The connecting user must possess, at a
minimum:

- the :authrole:`read` role for the accessed database when using the
  ``list``, ``search`` or ``get`` commands,

- the :authrole:`readWrite` role for the accessed database when using
  the ``put`` or ``delete`` commands.

Behavior
--------

FIPS
~~~~

:binary:`~bin.mongofiles` automatically creates FIPS-compliant
connections to a :binary:`~bin.mongod`/:binary:`~bin.mongos` that is
:manual:`configured to use FIPS mode </tutorial/configure-fips>`.

Read Preference
~~~~~~~~~~~~~~~

By default, :binary:`~bin.mongofiles` uses read preference
:readmode:`primary`. To override the default, you can specify the
:ref:`read preference <replica-set-read-preference>` in the
:option:`--readPreference <mongofiles --readPreference>` command line
option or in the :option:`--uri connection string <mongofiles --uri>`.

If you specify read preference in the URI
string and the :option:`--readPreference <mongofiles --readPreference>`,
the :option:`--readPreference <mongofiles --readPreference>` value
overrides the read preference specified in the URI string.

Write Concern
~~~~~~~~~~~~~

You can specify both the
:option:`--writeConcern <mongofiles --writeConcern>` and the
:option:`--uri connection string <mongofiles --uri>` option. If write
concern is specified using both options, the
:option:`--writeConcern <mongofiles --writeConcern>` value overrides
the write concern specified in the URI string.

.. _mongofiles-options:

Options
-------

.. option:: --help

   Returns information on the options and use of :program:`mongofiles`.


.. option:: --verbose, -v

   Increases the amount of internal reporting returned on standard output
   or in log files. Increase the verbosity with the ``-v`` form by
   including the option multiple times, (e.g. ``-vvvvv``.)
   


.. option:: --quiet

   Runs :program:`mongofiles` in a quiet mode that attempts to limit the amount
   of output.

   This option suppresses:
   
   - output from :term:`database commands <database command>`
   
   - replication activity
   
   - connection accepted events
   
   - connection closed events


.. option:: --version

   Returns the :program:`mongofiles` release number.


.. option:: --config=<filename>


   .. versionadded:: 100.3.0

   .. include:: /includes/fact-config-file-option.rst


.. option:: --uri=<connectionString>
   
   Specifies the resolvable :manual:`URI connection string
   </reference/connection-string/>` of the MongoDB deployment, enclosed
   in quotes:
   
   .. code-block:: none
   
      --uri="mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]"
   
   .. include:: /includes/extracts/uri-positional-mongofiles.rst

   For information on the components of the connection string, see
   the :manual:`Connection String URI Format
   </reference/connection-string/>` documentation. 

   .. include:: /includes/fact-uri-with-conflicting-info.rst         

   .. include:: /includes/fact-ubuntu-dns-error.rst

   .. include:: /includes/fact-warning-uri-config.rst


.. option:: --host=<hostname><:port>

   Specifies a resolvable hostname for the :binary:`~bin.mongod` that holds
   your GridFS system. By default :binary:`~bin.mongofiles` attempts to connect
   to a MongoDB process running on the localhost port number ``27017``.
   
   Optionally, specify a port number to connect a MongoDB instance running
   on a port other than 27017.
   
   .. include:: /includes/extracts/uri-used-with-host.rst
   


.. option:: --port=<port>

   *Default*: 27017

   Specifies the TCP port on which the MongoDB instance listens for
   client connections.
   
   .. include:: /includes/extracts/uri-used-with-port.rst



.. option:: --ssl

   Enables connection to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   TLS/SSL support enabled.
   
   .. include:: /includes/extracts/uri-used-with-ssl.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslCAFile=<filename>

   Specifies the :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   :file:`.pem` file using relative or absolute paths.
   
   .. include:: /includes/extracts/uri-used-with-sslcafile.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --sslPEMKeyFile=<filename>

   Specifies the :file:`.pem` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the :file:`.pem` file using relative
   or absolute paths.
   
   This option is required when using the :option:`--ssl` option to connect
   to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   :setting:`~net.tls.CAFile` enabled *without*
   :setting:`~net.tls.allowConnectionsWithoutCertificates`.
   
   .. include:: /includes/extracts/uri-used-with-sslpemkeyfile.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslPEMKeyPassword=<value>

   Specifies the password to de-crypt the certificate-key file (i.e.
   :option:`--sslPEMKeyFile`). Use the :option:`--sslPEMKeyPassword` option only if the
   certificate-key file is encrypted. In all cases, the :program:`mongofiles` will
   redact the password from all logging and reporting output.
   
   If the private key in the PEM file is encrypted and you do not specify
   the :option:`--sslPEMKeyPassword` option, the :program:`mongofiles` will prompt for a passphrase. See
   :ref:`ssl-certificate-password`.
   
   .. include:: /includes/extracts/uri-used-with-sslpemkeypassword.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst

   .. include:: /includes/fact-warning-sslpemkeypassword-config.rst


.. option:: --sslCRLFile=<filename>

   Specifies the :file:`.pem` file that contains the Certificate Revocation
   List. Specify the file name of the :file:`.pem` file using relative or
   absolute paths.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslAllowInvalidCertificates

   Bypasses the validation checks for server certificates and allows
   the use of invalid certificates. When using the
   :setting:`~net.tls.allowInvalidCertificates` setting, MongoDB logs as a
   warning the use of the invalid certificate.
   
   .. include:: /includes/extracts/ssl-facts-invalid-cert-warning-clients.rst
   
   .. include:: /includes/extracts/uri-used-with-sslallowinvalidcertificates.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslAllowInvalidHostnames

   Disables the validation of the hostnames in TLS/SSL certificates. Allows
   :program:`mongofiles` to connect to MongoDB instances even if the hostname in their
   certificates do not match the specified hostname.
   
   .. include:: /includes/extracts/uri-used-with-sslallowinvalidhostnames.rst
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --username=<username>, -u=<username>

   Specifies a username with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the :option:`--password <mongofiles --password>` and
   :option:`--authenticationDatabase <mongofiles --authenticationDatabase>` options.

   .. include:: /includes/extracts/uri-used-with-username.rst

   .. include:: /includes/extracts/mongodb-aws-username-mongofiles.rst


.. option:: --password=<password>, -p=<password>

   Specifies a password with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the :option:`--username <mongofiles --username>` and
   :option:`--authenticationDatabase <mongofiles --authenticationDatabase>` options.

   To prompt the user for the password, pass the :option:`--username <mongofiles --username>`
   option without :option:`--password <mongofiles --password>` or specify an empty string as the
   :option:`--password <mongofiles --password>` value, as in ``--password ""`` .

   .. include:: /includes/extracts/uri-used-with-password.rst

   .. include:: /includes/extracts/mongodb-aws-password-mongofiles.rst

   .. include:: /includes/fact-warning-password-config.rst


.. option:: --awsSessionToken=<AWS Session Token>

   .. include:: /includes/extracts/mongodb-aws-session-token-mongofiles.rst


.. option:: --authenticationDatabase=<dbname>

   Specifies the authentication database where the specified :option:`--username <mongofiles --username>` has been created.
   See :ref:`user-authentication-database`.

   .. include:: /includes/fact-auth-database-use-external.rst
   
   .. include:: /includes/extracts/uri-used-with-authenticationDatabase.rst


.. option:: --authenticationMechanism=<name>

   *Default*: SCRAM-SHA-1

   Specifies the authentication mechanism the :program:`mongofiles` instance uses to
   authenticate to the :binary:`~bin.mongod` or :binary:`~bin.mongos`.

   .. versionchanged:: 100.1.0
   
      Starting in version ``100.1.0``, :program:`mongofiles` adds support
      for the ``MONGODB-AWS`` authentication mechanism when connecting
      to a :atlas:`MongoDB Atlas <?tck=docs_server>` cluster.

   .. include:: /includes/list-table-auth-mechanisms.rst
   
   .. include:: /includes/extracts/uri-used-with-authenticationMechanism.rst


.. option:: --gssapiServiceName=<serviceName>

   Specify the name of the service using :manual:`GSSAPI/Kerberos
   </core/kerberos>`. Only required if the service does not use the
   default name of ``mongodb``.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --gssapiHostName=<hostname>

   Specify the hostname of a service using :manual:`GSSAPI/Kerberos
   </core/kerberos>`. *Only* required if the hostname of a machine does
   not match the hostname resolved by DNS.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --db=<database>, -d=<database>

   Specifies the name of the database on which to run the :program:`mongofiles`.
   
   .. include:: /includes/extracts/uri-used-with-db.rst


.. option:: --local=<filename>, -l=<filename>

   Specifies the local filesystem name of a file for get and put
   operations.
   
   In the :command:`mongofiles put` and :command:`mongofiles get` commands,
   the required ``<filename>`` modifier refers to the name the object will
   have in GridFS. :binary:`~bin.mongofiles` assumes that this reflects the
   file's name on the local file system. This setting overrides this
   default.
   


.. option:: --type=<MIME>

   Provides the ability to specify a :term:`MIME` type to describe the file
   inserted into GridFS storage. :binary:`~bin.mongofiles` omits this option in
   the default operation.
   
   Use only with :command:`mongofiles put` operations.
   


.. option:: --replace, -r

   Alters the behavior of :command:`mongofiles put` to replace existing
   GridFS objects with the specified local file, rather than adding an
   additional object with the same name.
   
   In the default operation, files will not be overwritten by a
   :command:`mongofiles put` option.
   


.. option:: --prefix=<string>

   *Default*: fs

   GridFS prefix to use.
   


.. option:: --writeConcern=<document>

   *Default*: majority

   Specifies the :term:`write concern` for each write operation that :program:`mongofiles`
   performs.
   
   Specify the write concern as a document with :ref:`w options <wc-w>`:
      
   .. code-block:: sh
   
      --writeConcern="{w:'majority'}"

   
   If the write concern is also included in the :option:`--uri
   connection string <--uri>`, the command-line
   :option:`--writeConcern` overrides the write concern specified in
   the URI string.


.. option:: --readPreference=<string|document>

   *Default*: :readmode:`primary`

   Specifies the :ref:`read preference<replica-set-read-preference>` for
   :program:`mongofiles`. The :option:`--readPreference` option can take:
   
   - A string if specifying only the read preference mode:
   
     .. code-block:: sh
   
        --readPreference=secondary
   
   - A quote-enclosed document to specify the mode, the optional
     :ref:`read preference tag sets <configure-read-pref-tags>`, and the
     optional :ref:`maxStalenessSeconds
     <replica-set-read-preference-max-staleness>`:
   
     .. code-block:: sh
   
        --readPreference='{mode: "secondary", tagSets: [ { "region": "east" } ], maxStalenessSeconds: 120}'
   
     If specifying the :ref:`maxStalenessSeconds
     <replica-set-read-preference-max-staleness>`, the value must be greater than or equal to 90.
   
   :program:`mongofiles` defaults to :readmode:`primary`
   :ref:`read preference <replica-set-read-preference>`.
   
   If the read preference is also included in the
   :option:`--uri connection string <--uri>`, the command-line
   :option:`--readPreference` overrides the read preference specified in
   the URI string.

.. _mongofiles-commands:

Commands
--------

.. describe:: list <prefix>

   Lists the files in the GridFS store. The characters specified after
   ``list`` (e.g. ``<prefix>``) optionally limit the list of
   returned items to files that begin with that string of characters.

.. describe:: search <string>

   Lists the files in the GridFS store with names that match any
   portion of ``<string>``.

.. describe:: put <filename1[ filename2] ...>

   Copy the specified file or files from the local file system into
   GridFS storage. Multiple files can be specified as a space-separated 
   list.

   Each specified filename refers to the name the object will have in
   GridFS, and :binary:`~bin.mongofiles` assumes that this reflects the
   name the file has on the local file system. If the local filename is
   different, use the :option:`mongofiles --local` option.

.. describe:: get <filename1[ filename2] ...>

   Copy the specified file or files from GridFS storage to the local
   file system.

   Each specified filename refers to the name the object has in
   GridFS, and :binary:`~bin.mongofiles` will use this filename when
   writing to the local file system.
   
   If specifying *only one* ``filename`` to the ``get`` command, you can
   use the :option:`--local <mongofiles --local>` option to specify a
   different local filename to write to, if desired. The
   :option:`--local <mongofiles --local>` option **cannot** be used if
   specifying *more than one* ``filename`` to the ``get`` command.

   .. note::

      To copy files from GridFS storage that match a regular expression,
      use the ``get_regex`` command instead.

.. describe:: get_id "<_id>"

   Copy the file, specified by its ``<_id>``, from GridFS storage to the
   local file system. ``<_id>`` refers to the extended JSON ``_id`` of
   the object in GridFS. ``get_id`` can accept either ObjectId values or
   non-ObjectId values for ``<_id>``.
   
   :binary:`~bin.mongofiles` writes the file to the local
   file system using the file's filename in GridFS. To choose a
   different location for the file on the local file system, use the
   :option:`--local <mongofiles --local>` option.

.. describe:: get_regex <regex> --regexOptions <regex-options>

   Copy the file or files, matched by the specified ``<regex>``
   expression, from GridFS storage to the local file system. The
   ``get_regex`` command uses Perl compatible regular expressions
   ("PCRE") version 8.42 with UTF-8 support.

   You may optionally specify one or more ``<regex-options>`` using the
   ``--regexOptions`` flag. These can be any of the
   :ref:`options supported by the $regex operator
   <regex-query-options>`, which include settings such as
   case-insensitivity. Multiple options should be provided together
   without separators, e.g. ``--regexOptions si``

   :binary:`~bin.mongofiles` writes the file or files to the local
   file system using each file's matched filename in GridFS. You
   **cannot** use the :option:`--local <mongofiles --local>` option with
   the ``get_regex`` command.

.. describe:: delete <filename>

   Delete the specified file from GridFS storage.

.. describe:: delete_id "<_id>"

   Delete the file, specified by its ``<_id>``, from GridFS storage.
   ``delete_id`` can accept either ObjectId values or non-ObjectId
   values for ``<_id>``. 

Examples
--------

.. include:: /includes/extracts/require-cmd-line-mongofiles.rst

To return a list of all files in a :term:`GridFS` collection in the
``records`` database, use the following invocation at the system shell:

.. code-block:: sh

   mongofiles -d=records list

This :binary:`~bin.mongofiles` instance will connect to the
:binary:`~bin.mongod` instance running on the ``27017`` localhost
interface to specify the same operation on a different port or
hostname, and issue a command that resembles one of the following:

.. code-block:: sh

   mongofiles --port=37017 -d=records list
   mongofiles --host=db1.example.net -d=records list
   mongofiles --host=db1.example.net --port=37017 -d=records list

Modify any of the following commands as needed if you're connecting
the :binary:`~bin.mongod` instances on different ports or hosts.

To upload a file named ``32-corinth.lp`` to the GridFS collection in
the ``records`` database, you can use the following command:

.. code-block:: sh

   mongofiles -d=records put 32-corinth.lp

To delete the ``32-corinth.lp`` file from this GridFS collection in
the ``records`` database, you can use the following command:

.. code-block:: sh

   mongofiles -d=records delete 32-corinth.lp

To search for files in the GridFS collection in the ``records``
database that have the string ``corinth`` in their names, you can use
following command:

.. code-block:: sh

   mongofiles -d=records search corinth

To list all files in the GridFS collection in the ``records`` database
with names that begin with the string ``32``, you can use the following
command:

.. code-block:: sh

   mongofiles -d=records list 32

To fetch the file from the GridFS collection in the ``records``
database named ``32-corinth.lp``, you can use the following command:

.. code-block:: sh

   mongofiles -d=records get 32-corinth.lp

To fetch all files from the GridFS collection in the ``records``
database with names beginning with the string ``32`` and ending with the
string ``.lp``, you can use the following command:

.. code-block:: sh

   mongofiles -d=records get_regex 32*.lp

To fetch the file from the GridFS collection in the ``records`` database
with ``_id: ObjectId("56feac751f417d0357e7140f")``, you can use the
following command:

.. code-block:: sh

   mongofiles -d=records get_id '{"$oid": "56feac751f417d0357e7140f"}'

You must include quotation marks around the ``_id``.

.. _mongofiles-example-connect-using-aws-iam:

Connect to a MongoDB Atlas Cluster using AWS IAM Credentials
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 100.1.0

To connect to a :atlas:`MongoDB Atlas <?tck=docs_server>` cluster which
has been configured to support authentication via `AWS IAM credentials
<https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html>`__,
provide a :option:`connection string <mongofiles --uri>` to
|tool-binary| similar to the following:

.. code-block:: none

   mongofiles 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' <other options>

Connecting to Atlas using AWS IAM credentials in this manner uses the
``MONGODB-AWS`` :urioption:`authentication mechanism <authMechanism>`
and the ``$external`` :urioption:`authSource`, as shown in this example.

If using an `AWS session token
<https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html>`__,
as well, provide it with the ``AWS_SESSION_TOKEN``
:urioption:`authMechanismProperties` value, as follows:

.. code-block:: none

   mongofiles 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<aws session token>' <other options>

.. include:: /includes/fact-pct-encode-uri.rst

Alternatively, the AWS access key ID, secret access key, and optionally
session token can each be provided outside of the connection string
using the :option:`--username <mongofiles --username>`, :option:`--password <mongofiles --password>`, and
:option:`--awsSessionToken` options instead, like so:

.. code-block:: none

   mongofiles 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' --username <aws access key id> --password <aws secret access key> --awsSessionToken <aws session token> <other options>

When provided as command line parameters, these three options do not
require percent encoding.

You may also set these credentials on your platform using standard
`AWS IAM environment variables
<https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html#envvars-list>`__.
|tool-binary| checks for the following environment variables when you
use the ``MONGODB-AWS``
:urioption:`authentication mechanism <authMechanism>`:

- ``AWS_ACCESS_KEY_ID``
- ``AWS_SECRET_ACCESS_KEY``
- ``AWS_SESSION_TOKEN``

If set, these credentials do not need to be specified in the connection
string or via their explicit options.

.. note::

   If you chose to use the AWS environment variables to specify these
   values, you cannot mix and match with the corresponding explicit or 
   connection string options for these credentials. Either use the
   environment variables for access key ID *and* secret access key
   (*and* session token if used), **or** specify each of these using the
   explicit or connection string options instead.

The following example sets these environment variables in the ``bash``
shell:

.. code-block:: none

   export AWS_ACCESS_KEY_ID='<aws access key id>'
   export AWS_SECRET_ACCESS_KEY='<aws secret access key>'
   export AWS_SESSION_TOKEN='<aws session token>'

Syntax for setting environment variables in other shells will be
different. Consult the documentation for your platform for more
information.

You can verify that these environment variables have been set with the
following command:

.. code-block:: none

   env | grep AWS

Once set, the following example connects to a MongoDB Atlas cluster
using these environment variables:

.. code-block:: none

   mongofiles 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS'  <other options>
