.. _replica-set-deployment-overview:
.. _replica-set-architecture:

====================================
Replica Set Deployment Architectures
====================================

.. default-domain:: mongodb

The architecture of a :term:`replica set <replica set>` affects the
set's operations. This section provides strategies for replica-set
deployments and describes common architectures.

The standard deployment for a production system is a three-member
replica set in which any member can become :term:`primary`. When
deploying a replica set, let your application requirements dictate the
architecture you choose. Avoid unnecessary complexity.

Determine the Number of Members
-------------------------------

Add members in a replica set according to these strategies.

Run an Odd Number of Members to Ensure Successful Elections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An odd number of members ensures that the replica set is always able to
elect a primary. If you have an even number of members, you can create
an odd number without increasing storage needs by running an
:term:`arbiter` on an application server.

.. _replica-set-architectures-consider-fault-tolerance:

Use Fault Tolerance to Help Decide How Many Members
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The "fault tolerance" level is the number of members that can be offline
without blocking the set's ability to elect a primary. Fault tolerance
is a factor of replica-set size, as shown in the following table.

Adding a member to the replica set does not *always* increase the fault
tolerance. In such cases, however, having an additional member can
provide support for dedicated functions, such as backups or reporting.

.. list-table::
   :header-rows: 1
   :widths: 15 25 15

   * - Number of Members

     - Majority Required to Elect a New Primary

     - Fault Tolerance

   * - 3

     - 2

     - 1

   * - 4

     - 3

     - 1

   * - 5

     - 3

     - 2

   * - 6

     - 4

     - 2

Add Hidden and Delayed Members for Dedicated Functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Add :ref:`hidden <replica-set-hidden-members>` or :ref:`delayed
<replica-set-delayed-members>` members to support dedicated functions,
such as backup, reporting, or testing.

Add Members to Load Balance on Read-Heavy Deployments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In a deployment with high read traffic, you can improve read throughput
by distributing reads to secondary members. As your deployment grows,
add or move members to secondary data centers to improve redundancy and
availability.

Always ensure that your main facility contains the quorum of members
needed to elect a primary.

Add New Members Ahead of Demand
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Add new members to existing replica sets well before the current demand
saturates the existing members.

Determine the Distribution of Members
-------------------------------------

Distribute members in a replica set according to these strategies.

Geographically Distribute Members to Provide Data Recovery
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To provide data recovery if your data center fails, keep at least one
member in an off-site data center. Set the member's
:data:`~local.system.replset.members[n].priority` to 0 to prevent it
from becoming primary.

Keep a Majority of Members in One Location to Ensure Successful Elections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When a replica set is distributed over different locations, network
partitions can prevent members in one center from seeing those in
another. In an election, members must see each other to create a
majority. To ensure that the replica set members can confirm a majority and
elect a primary, keep a majority of the setâ€™s members in one location.

Use Tags to Ensure Write Operations Propagate Efficiently
---------------------------------------------------------

Use :ref:`replica set tags <replica-set-configuration-tag-sets>` to
ensure that operations propagate to specific data centers or to machines
with specific functions.

Use Journaling to Protect Against Power Failures
------------------------------------------------

Enable journaling as protection against power failures, especially if
your replica set resides in a single data center or power circuit.

64-bit versions of MongoDB after version 2.0 have journaling enabled by
default.

Architectures
-------------

The following are common deployment patterns for replica sets. These are
neither exclusive nor exhaustive. You can combine features of each
architecture in your own deployment.

.. include:: /includes/dfn-list-replica-set-architectures.rst

.. include:: /includes/toc-replica-set-architectures.rst
