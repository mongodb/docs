.. _schema-validation-overview:
.. _schema-validation-document:

=================
Schema Validation
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Schema validation lets you create validation rules for your fields, such
as allowed data types and value ranges.

MongoDB uses a flexible schema model, which means that documents in a
collection do not need to have the same fields or data types by default.
Once you've established an application schema, you can use schema
validation to ensure there are no unintended schema changes or improper
data types.

When to Use Schema Validation
-----------------------------

Your schema validation needs depend on how users use your application.
When your application is in the early stages of development, schema
validation may impose unhelpful restrictions because you don't know how
you want to organize your data. Specifically, the fields in your
collections may change over time.

Schema validation is most useful for an established application where
you have a good sense of how to organize your data. You can use schema
validation in the following scenarios:

- For a users collection, ensure that the ``password`` field is only
  stored as a string. This validation prevents users from saving their
  password as an unexpected data type, like an image.

- For a sales collection, ensure that the ``item`` field belongs to a
  list of items that your store sells. This validation prevents a user
  from accidentally misspelling an item name when entering sales data.

- For a students collection, ensure that the ``gpa`` field is always a
  positive number. This validation catches typos during data entry.

When MongoDB Checks Validation
------------------------------

When you create a new collection with schema validation, MongoDB checks
validation during updates and inserts in that collection.

When you add validation to an existing, non-empty collection:

- Newly inserted documents are checked for validation.

- Documents already existing in your collection are not checked for
  validation until they are modified. Specific behavior for existing
  documents depends on your chosen validation level. To learn more, see
  :ref:`schema-specify-validation-level`.

Adding validation to an existing collection does not enforce validation
on existing documents. To check a collection for invalid documents, use
the :dbcommand:`validate` command.

What Happens When a Document Fails Validation
---------------------------------------------

By default, when an insert or update operation would result in an
invalid document, MongoDB rejects the operation and does not write the
document to the collection.

Alternatively, you can configure MongoDB to allow invalid documents and
log warnings when schema violations occur.

To learn more, see :ref:`schema-validation-handle-invalid-docs`.

Tasks
-----

For common tasks involving schema validation, see the following pages:

- :ref:`schema-validation-json`
- :ref:`schema-validation-query-expression`
- :ref:`schema-allowed-field-values`
- :ref:`schema-view-validation-rules`
- :ref:`schema-update-validation`
- :ref:`use-json-schema-query-conditions`
- :ref:`schema-bypass-document-validation`

Learn More
----------

To learn about MongoDB's flexible schema model, see
:ref:`manual-data-modeling-intro`.

.. toctree::
   :titlesonly:

   /core/schema-validation/specify-json-schema
   /core/schema-validation/specify-query-expression-rules
   /core/schema-validation/view-existing-validation-rules
   /core/schema-validation/update-schema-validation
   /core/schema-validation/specify-validation-level
   /core/schema-validation/handle-invalid-documents
   /core/schema-validation/use-json-schema-query-conditions
   /core/schema-validation/bypass-document-validation
