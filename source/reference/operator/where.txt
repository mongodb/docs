======
$where
======

.. default-domain:: mongodb

.. operator:: $where

   Use the :operator:`$where` operator to pass either a string
   containing a JavaScript expression or a full JavaScript function to
   the query system. The :operator:`$where` provides greater
   flexibility, but requires that the database processes the JavaScript
   expression or function for *each* document in the collection. In the
   JavaScript expression or function, the document is referenced by
   either ``this`` or ``obj`` .

   .. warning::

      - Do not write to the database within the :operator:`$where`
        JavaScript function.

      - :operator:`$where` evaluates JavaScript and cannot take
        advantage of indexes. Therefore, query performance improves
        when you express your query using the standard MongoDB
        operators (e.g., :operator:`$gt`, :operator:`$in`).

      - In general, you should use :operator:`$where` only when you
        can't express your query using another operator. If you must
        use :operator:`$where`, try to include at least one other
        standard query operator to filter the result set. Using
        :operator:`$where` alone requires a table scan.
         
   Consider the following examples:

   .. code-block:: javascript

      db.myCollection.find( { $where: "this.credits == this.debits" } );
      db.myCollection.find( { $where: "obj.credits == obj.debits" } );

      db.myCollection.find( { $where: function() { return (this.credits == this.debits) } } );
      db.myCollection.find( { $where: function() { return obj.credits == obj.debits; } } );

   Additionally, if the query consists only of the :operator:`$where`
   operator, you can pass in just the JavaScript expression or
   JavaScript functions, as in the following examples:

   .. code-block:: javascript

      db.myCollection.find( "this.credits == this.debits || this.credits > this.debits" );

      db.myCollection.find( function() { return (this.credits == this.debits || this.credits > this.debits ) } );

   You can include both the standard MongoDB operators and the
   :operator:`$where` operator in your query, as in the following
   examples:

   .. code-block:: javascript

      db.myCollection.find( { active: true, $where: "this.credits - this.debits < 0" } );
      db.myCollection.find( { active: true, $where: function() { return obj.credits - obj.debits < 0; } } );

   Including the standard MongoDB operator expression provides the following performance advantages:

   - The standard MongoDB operator expression will be evaluated first.
     If there is no match based on the standard operator expression, no
     further evaluation is required.

   - The standard operator expression can take advantage
     of an index.
