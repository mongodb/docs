.. index:: replica set members; arbiters
.. _replica-set-arbiter-configuration:

===================
Replica Set Arbiter
===================

.. default-domain:: mongodb

.. start-content

An arbiter does **not** have a copy of data set and **cannot** become
a primary. Replica sets may have arbiters to add a vote in
:ref:`elections of for primary <replica-set-elections>`.  Arbiters
allow replica sets to have an uneven number of members, without the
overhead of a member that replicates data.

.. important:: Do not run an arbiter on systems that also host the
   primary or the secondary members of the replica set.

Only add an arbiter to sets with even numbers of members. If you add
an arbiter to a set with an odd number of members, the set may suffer
from tied :term:`elections <election>`. To add an arbiter, see
:doc:`/tutorial/add-replica-set-arbiter`.

.. end-content

Example
-------

.. start-content-even-votes-example

For example, in the following replica set, an arbiter allows the set
to have an odd number of votes for elections:

.. include:: /images/replica-set-four-members-add-arbiter.rst

.. end-content-even-votes-example

Security
--------

Authentication
~~~~~~~~~~~~~~

When running with :setting:`~security.authorization`, arbiters exchange credentials with
other members of the set to authenticate. MongoDB encrypts the
authentication process. The MongoDB authentication exchange is
cryptographically secure.

Arbiters, use :setting:`keyfiles <keyfile>` to authenticate to the
replica set.

Communication
~~~~~~~~~~~~~

The only communication between arbiters and other set members are:
votes during elections, heartbeats, and configuration data. These
exchanges are not encrypted.

**However**, if your MongoDB deployment uses SSL, MongoDB will encrypt
*all* communication between replica set members. See
:doc:`/tutorial/configure-ssl` for more information.

As with all MongoDB components, run arbiters on in trusted network
environments.
