stepnum: 1
title: Disable the Balancer (Optional)
level: 4
ref: sharding_tiered_storage_stop_balancer
pre: |
  To reduce performance impacts, the balancer may be disabled on the collection
  to ensure no migrations take place while configuring the new zones or removing
  the old ones.
action:
  - pre: |
      Use :method:`sh.disableBalancing()`, specifying the namespace of the
      collection, to stop the balancer
    language: javascript
    code: |
      sh.disableBalancing("chat.messages")
post: |
  Use :method:`sh.isBalancerRunning()` to check if the balancer process 
  is currently running. Wait until any current balancing rounds have completed
  before proceeding.
---
stepnum: 2
title: Add the new ``UK`` zone
level: 4
ref: sharding-tag-location-add-zone
action:
  - pre: |
      Add each shard in the ``UK`` data center to the ``UK`` zone.
    language: javascript
    code: |
      sh.addShardTag("<shard name>", "UK")
post: |
  You can review the zones assigned to any given shard by running 
  :method:`sh.status()`.
---
stepnum: 3
title: Remove the old zone range
level: 4
ref: sharding-tag-location-remove-old-zone
action:
  - pre: |
      Remove the old zone range associated to the ``UK`` country using the 
      :method:`sh.removeTagRange()` method. This method requires:
      
      * The full namespace of the target collection. 
      * The inclusive lower bound of the range. 
      * The exclusive upper bound of the range. 
      * The name of the zone.
      
    language: javascript
    code: |
      sh.removeTagRange(
        "chat.messages",
        { "country" : "UK", "userid" : MinKey },
        { "country" : "UK", "userid" : MaxKey }
        "EU"
      )
---
stepnum: 4
title: Add new zone ranges
level: 4
ref: sharding-tag-location-add-new-zone
action:
  - pre: |
      For shard key values where ``country : UK``, define a shard key range
      and associate it to the ``UK`` zone using the :method:`sh.addTagRange()`
      method. This method requires:
      
      * The full namespace of the target collection. 
      * The inclusive lower bound of the range. 
      * The exclusive upper bound of the range. 
      * The name of the zone.
      
    language: javascript
    code: |
      sh.addTagRange( 
        "chat.message",
        { "country" : "UK", "userid" : MinKey },
        { "country" : "UK", "userid" : MaxKey }, 
        "UK"
      )
  - pre: |
      For shard key values where ``country : MX``, define a shard key range
      and associate it to the ``NA`` zone using the :method:`sh.addTagRange()`
      method. This method requires:
      
      * The full namespace of the target collection. 
      * The inclusive lower bound of the range. 
      * The exclusive upper bound of the range. 
      * The name of the zone.
      
    language: javascript
    code: |
      sh.addTagRange( 
        "chat.messages",
        { "country" : "MX", "userid" : MinKey },
        { "country" : "MX", "userid" : MaxKey }, 
        "NA"
      )
post: |
  The :bsontype:`MinKey` and :bsontype:`MaxKey` values are reserved special values
  for comparisons. :bsontype:`MinKey` always compares as lower than every other
  possible value, while :bsontype:`MaxKey` always compares as higher than
  every other possible value. This ensures the two ranges captures the 
  entire possible value space of ``creation_date``. 
---
stepnum: 5
title: Enable the Balancer (Optional)
level: 4
ref: sharding_tiered_storage_start_balancer
pre: |
  If the balancer was disabled in previous steps, re-enable the balancer at
  the completion of this procedure to rebalance the cluster.
action:
  - pre: |
      Use :method:`sh.enableBalancing()`, specifying the namespace of the
      collection, to start the balancer
    language: javascript
    code: |
      sh.enableBalancing("chat.messages")
post: |
  Use :method:`sh.isBalancerRunning()` to check if the balancer process 
  is currently running. 
---
stepnum: 6
title: Review the changes
level: 4
ref: sharding_tiered_storage_review
pre: |
  The next time the :ref:`balancer <sharding-balancing>` runs, it 
  :ref:`splits <sharding-chunk-split>` chunks where necessary and
  :ref:`migrates <sharding-chunk-migration>` chunks across the 
  shards respecting the configured zones.
  
  Before balancing:

  - shards in the ``EU`` zone only contain documents where
    ``country : DE`` or ``country : UK``, and
  - documents where ``country : MX`` could be stored on any shard in
    the sharded cluster.
  
  After balancing:

  - shards in the ``EU`` zone only contain documents where
    ``country : DE``,
  - shards in the ``UK`` zone only contain documents where
    ``country : UK``, and
  - shards in the ``NA`` zone only contain documents where
    ``country : US`` or ``country : MX``.
  
  A document with a value for ``country`` other than ``US``, ``MX``,
  ``UK``, or ``DE`` can reside on any shard in the cluster.
  
  To confirm the chunk distribution, run :method:`sh.status()`.
...
