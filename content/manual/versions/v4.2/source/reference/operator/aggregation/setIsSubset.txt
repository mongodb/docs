==========================
$setIsSubset (aggregation)
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $setIsSubset

   Takes two arrays and returns ``true`` when the first array is a
   subset of the second, including when the first array equals the
   second array, and ``false`` otherwise.

   :expression:`$setIsSubset` has the following syntax:

   .. code-block:: javascript

      { $setIsSubset: [ <expression1>, <expression2> ] }

   The arguments can be any valid :ref:`expression
   <aggregation-expressions>` as long as they each resolve to an array.
   For more information on expressions, see
   :ref:`aggregation-expressions`.

Behavior
--------

.. |set-operator-name| replace:: :expression:`$setIsSubset`

.. include:: /includes/important-set-operator-semantics.rst
   :end-before: .. set-output

.. include:: /includes/extracts/fact-agg-top-level-expressions-setIsSubset.rst

.. list-table::
   :header-rows: 1
   :widths: 70 30
   :class: border-table

   * - Example

     - Result

   * - .. code-block:: javascript
          :copyable: false

          { $setIsSubset: [ [ "a", "b", "a" ], [ "b", "a" ] ] }

     - ``true``

   * - .. code-block:: javascript
          :copyable: false

          { $setIsSubset: [ [ "a", "b" ], [ [ "a", "b" ] ] ] }

     - ``false``

Example
-------

Consider an ``experiments`` collection with the following documents:

.. code-block:: javascript

   { "_id" : 1, "A" : [ "red", "blue" ], "B" : [ "red", "blue" ] }
   { "_id" : 2, "A" : [ "red", "blue" ], "B" : [ "blue", "red", "blue" ] }
   { "_id" : 3, "A" : [ "red", "blue" ], "B" : [ "red", "blue", "green" ] }
   { "_id" : 4, "A" : [ "red", "blue" ], "B" : [ "green", "red" ] }
   { "_id" : 5, "A" : [ "red", "blue" ], "B" : [ ] }
   { "_id" : 6, "A" : [ "red", "blue" ], "B" : [ [ "red" ], [ "blue" ] ] }
   { "_id" : 7, "A" : [ "red", "blue" ], "B" : [ [ "red", "blue" ] ] }
   { "_id" : 8, "A" : [ ], "B" : [ ] }
   { "_id" : 9, "A" : [ ], "B" : [ "red" ] }

The following operation uses the :expression:`$setIsSubset` operator to
determine if the ``A`` array is a subset of the ``B``
array:

.. code-block:: javascript

   db.experiments.aggregate(
      [
        { $project: { A:1, B: 1, AisSubset: { $setIsSubset: [ "$A", "$B" ] }, _id:0 } }
      ]
   )

The operation returns the following results:

.. code-block:: javascript

   { "A" : [ "red", "blue" ], "B" : [ "red", "blue" ], "AisSubset" : true }
   { "A" : [ "red", "blue" ], "B" : [ "blue", "red", "blue" ], "AisSubset" : true }
   { "A" : [ "red", "blue" ], "B" : [ "red", "blue", "green" ], "AisSubset" : true }
   { "A" : [ "red", "blue" ], "B" : [ "green", "red" ], "AisSubset" : false }
   { "A" : [ "red", "blue" ], "B" : [ ], "AisSubset" : false }
   { "A" : [ "red", "blue" ], "B" : [ [ "red" ], [ "blue" ] ], "AisSubset" : false }
   { "A" : [ "red", "blue" ], "B" : [ [ "red", "blue" ] ], "AisSubset" : false }
   { "A" : [ ], "B" : [ ], "AisSubset" : true }
   { "A" : [ ], "B" : [ "red" ], "AisSubset" : true }
