ref: fts-sort-by-string-desc
content: | 

  The following query shows how to query and sort the results by a
  string field. It searches for titles that begin with ``Prance`` or
  ``Prince`` and sorts the results by the ``title`` field in ascending
  order. 

---
ref: fts-sort-by-string-stage
content: | 

  The query uses the following pipeline stages:
  
  - :pipeline:`$search` to search the ``title`` field
    using the ``should`` clause with the :ref:`wildcard-ref` operator to
    search for titles that begin with ``Prance`` and ``Prince``.
    The query also specifies that results must be sorted by the ``title``
    field in ascending order.
  - :pipeline:`$limit` stage to limit the output to ``5`` results.
  - :pipeline:`$project` stage to:
    
    - Exclude all fields except ``title``.
    - Add a field named ``score``.

---
ref: fts-sort-by-string-results
content: | 

  The |fts| results contain documents with movie titles that begin with
  ``Prance`` and ``Prince``. |fts| returns titles with ``Prance``
  followed by ``Prince`` because |fts| sorts documents by the ``title``
  field in ascending order. 

---
ref: fts-sort-by-numbers-constant-desc
content: | 

  The following query shows how to sort the results by a numeric field.
  It uses the :ref:`range-ref` operator to search for movies that have
  won 10 or more awards and then sorts the results by the numeric field
  value in descending order.

---
ref: fts-sort-by-numbers-stage
content: | 

  The query uses the following pipeline stages:
  
  - :pipeline:`$search` stage to search the ``awards.wins`` field and
    sort the results in descending order.
  - :pipeline:`$limit` stage to limit the output to ``5`` results.
  - :pipeline:`$project` stage to exclude all fields except ``title``
    and ``awards.wins``. 

---
ref: fts-sort-by-date-constant-desc
content: | 

  The following query shows how to run a :ref:`compound-ref` query and
  sort the results by a date field. It uses the following operators:  
  
  - :ref:`wildcard-ref` operator to search for movie titles that begin
    with ``Summer``.

  - :ref:`near-ref` operator to search for movies that were released in
    and about five months before or after April 18, 2014.

    .. note::
  
       When you use ``pivot`` on a date field, its unit of measure is
       in milliseconds. |fts| calculates a score for each document based
       on how close the date field is to the specified date. To learn
       more, see :ref:`near-ref`.

---
ref: fts-sort-by-date-stage
content: | 

  The query uses the following pipeline stages:
  
  - :pipeline:`$search` stage to search the ``title`` and ``released``
    fields and then sort the results by the ``released`` field in
    descending order. 
  - :pipeline:`$limit` stage to limit the output to ``5`` results.
  - :pipeline:`$project` stage to:
    
    - Exclude all fields except ``title`` and ``released``.
    - Add a field named ``score``.

---
ref: fts-normalized-sort-query-desc
content: |

   The following query shows how to sort the results regardless of the
   letter case. It uses the :ref:`text-ref` operator to search for
   movies that have the term ``train`` in the ``title`` field and then
   sorts the results by the ``title`` field value in ascending order.

---
ref: fts-normalized-sort-query-stages 
content: | 

  The query specifies a :pipeline:`$limit` stage to limit the documents
  in the results to ``5`` and a :pipeline:`$project` stage to do the
  following: 
  
  - Include only the ``_id``, ``title``, and ``awards`` fields in the
    results.
  - Add a field named :ref:`score <scoring-ref>` in the results. 

---
ref: fts-normalized-sort-query-results 
content: | 

  The results contain documents sorted regardless of the letter case.
  However, if you set ``normalizer`` to ``none``, |fts| returns the
  following results: 

---
ref: fts-normalized-sort-query-run-query 
content: | 

  To sort your results without normalizing the letter case, set the
  ``normalizer`` option to ``none`` (on line 7) in your index
  definition, save the index definition, and rerun the query. 

...
