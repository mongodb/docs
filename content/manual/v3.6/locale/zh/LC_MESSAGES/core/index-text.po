#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/index-text.txt:5
msgid "Text Indexes"
msgstr ""

#: ../source/core/index-text.txt:17
msgid "Overview"
msgstr ""

#: ../source/includes/fact-text-index.rst:1
msgid ""
"MongoDB provides :ref:`text indexes <index-feature-text>` to support text"
" search queries on string content. ``text`` indexes can include any field"
" whose value is a string or an array of string elements."
msgstr ""

#: ../source/core/index-text.txt:24
msgid "Versions"
msgstr ""

#: ../source/core/index-text.txt:30
msgid "``text`` Index Version"
msgstr ""

#: ../source/core/index-text.txt:31
msgid "Description"
msgstr ""

#: ../source/core/index-text.txt:33
msgid "Version 3"
msgstr ""

#: ../source/core/index-text.txt:35
msgid ""
"MongoDB introduces a version 3 of the ``text`` index. Version 3 is the "
"default version of ``text`` indexes created in MongoDB 3.2 and later."
msgstr ""

#: ../source/core/index-text.txt:39
msgid "Version 2"
msgstr ""

#: ../source/core/index-text.txt:41
msgid ""
"MongoDB 2.6 introduces a version 2 of the ``text`` index. Version 2 is "
"the default version of ``text`` indexes created in MongoDB 2.6 and 3.0 "
"series."
msgstr ""

#: ../source/core/index-text.txt:45
msgid "Version 1"
msgstr ""

#: ../source/core/index-text.txt:47
msgid ""
"MongoDB 2.4 introduces a version 1 of the ``text`` index. MongoDB 2.4 can"
" only support version ``1``."
msgstr ""

#: ../source/core/index-text.txt:50
msgid ""
"To override the default version and specify a different version, include "
"the option ``{ \"textIndexVersion\": <version> }`` when creating the "
"index."
msgstr ""

#: ../source/core/index-text.txt:57
msgid "Create Text Index"
msgstr ""

#: ../source/includes/fact-text-index-limit-one.rst:1
msgid "A collection can have at most **one** ``text`` index."
msgstr ""

#: ../source/core/index-text.txt:63
msgid ""
"To create a ``text`` index, use the :method:`db.collection.createIndex()`"
" method. To index a field that contains a string or an array of string "
"elements, include the field and specify the string literal ``\"text\"`` "
"in the index document, as in the following example:"
msgstr ""

#: ../source/core/index-text.txt:73
msgid ""
"You can index multiple fields for the ``text`` index. The following "
"example creates a ``text`` index on the fields ``subject`` and "
"``comments``:"
msgstr ""

#: ../source/core/index-text.txt:86
msgid ""
"A :doc:`compound index </core/index-compound>` can include ``text`` index"
" keys in combination with ascending/descending index keys. For more "
"information, see :ref:`text-index-compound`."
msgstr ""

#: ../source/core/index-text.txt:90
msgid ""
"In order to drop a ``text`` index, use the index name. See :ref:`drop-"
"text-index` for more information."
msgstr ""

#: ../source/core/index-text.txt:94
msgid "Specify Weights"
msgstr ""

#: ../source/includes/fact-text-index-weight.rst:1
msgid ""
"For a ``text`` index, the *weight* of an indexed field denotes the "
"significance of the field relative to the other indexed fields in terms "
"of the text search score."
msgstr ""

#: ../source/includes/fact-text-index-weight.rst:5
msgid ""
"For each indexed field in the document, MongoDB multiplies the number of "
"matches by the weight and sums the results. Using this sum, MongoDB then "
"calculates the score for the document. See :projection:`$meta` operator "
"for details on returning and sorting by text scores."
msgstr ""

#: ../source/includes/fact-text-index-weight.rst:10
msgid ""
"The default weight is 1 for the indexed fields. To adjust the weights for"
" the indexed fields, include the ``weights`` option in the "
":method:`db.collection.createIndex()` method."
msgstr ""

#: ../source/core/index-text.txt:98
msgid ""
"For more information using weights to control the results of a text "
"search, see :doc:`/tutorial/control-results-of-text-search`."
msgstr ""

#: ../source/core/index-text.txt:104
msgid "Wildcard Text Indexes"
msgstr ""

#: ../source/core/index-text.txt:106
msgid ""
"When creating a ``text`` index on multiple fields, you can also use the "
"wildcard specifier (``$**``). With a wildcard text index, MongoDB indexes"
" every field that contains string data for each document in the "
"collection. The following example creates a text index using the wildcard"
" specifier:"
msgstr ""

#: ../source/core/index-text.txt:116
msgid ""
"This index allows for text search on all fields with string content. Such"
" an index can be useful with highly unstructured data if it is unclear "
"which fields to include in the text index or for ad-hoc querying."
msgstr ""

#: ../source/core/index-text.txt:121
msgid ""
"Wildcard text indexes are ``text`` indexes on multiple fields. As such, "
"you can assign weights to specific fields during index creation to "
"control the ranking of the results. For more information using weights to"
" control the results of a text search, see :doc:`/tutorial/control-"
"results-of-text-search`."
msgstr ""

#: ../source/core/index-text.txt:127
msgid ""
"Wildcard text indexes, as with all text indexes, can be part of a "
"compound indexes. For example, the following creates a compound index on "
"the field ``a`` as well as the wildcard specifier:"
msgstr ""

#: ../source/core/index-text.txt:135
msgid ""
"As with all :ref:`compound text indexes <text-index-compound>`, since the"
" ``a`` precedes the text index key, in order to perform a :query:`$text` "
"search with this index, the query predicate must include an equality "
"match conditions ``a``. For information on compound text indexes, see "
":ref:`Compound Text Indexes <text-index-compound>`."
msgstr ""

#: ../source/core/index-text.txt:144
msgid "Case Insensitivity"
msgstr ""

#: ../source/core/index-text.txt:148
msgid ""
"The version 3 ``text`` index supports the common ``C``, simple ``S``, and"
" for Turkish languages, the special ``T`` case foldings as specified in "
"`Unicode 8.0 Character Database Case Folding "
"<http://www.unicode.org/Public/8.0.0/ucd/CaseFolding.txt>`_."
msgstr ""

#: ../source/core/index-text.txt:155
msgid ""
"The case foldings expands the case insensitivity of the ``text`` index to"
" include characters with diacritics, such as ``é`` and ``É``, and "
"characters from non-Latin alphabets, such as \"И\" and \"и\" in the "
"Cyrillic alphabet."
msgstr ""

#: ../source/core/index-text.txt:162
msgid ""
"The case foldings expands the case insensitivity of the ``text`` index to"
" include characters with diacritics, such as ``é`` and ``É``, and "
"characters from non-Latin alphabets, such as characters from Cyrillic "
"alphabet."
msgstr ""

#: ../source/core/index-text.txt:167
msgid ""
"Version 3 of the ``text`` index is also :ref:`diacritic insensitive "
"<text-index-diacritic-insensitivity>`. As such, the index also does not "
"distinguish between ``é``, ``É``, ``e``, and ``E``."
msgstr ""

#: ../source/core/index-text.txt:171
msgid ""
"Previous versions of the ``text`` index are case insensitive for "
"``[A-z]`` only; i.e. case insensitive for non-diacritics Latin characters"
" only . For all other characters, earlier versions of the text index "
"treat them as distinct."
msgstr ""

#: ../source/core/index-text.txt:179
msgid "Diacritic Insensitivity"
msgstr ""

#: ../source/core/index-text.txt:183
msgid ""
"With version 3, ``text`` index is diacritic insensitive. That is, the "
"index does not distinguish between characters that contain diacritical "
"marks and their non-marked counterpart, such as ``é``, ``ê``, and ``e``. "
"More specifically, the ``text`` index strips the characters categorized "
"as diacritics in `Unicode 8.0 Character Database Prop List "
"<http://www.unicode.org/Public/8.0.0/ucd/PropList.txt>`_."
msgstr ""

#: ../source/core/index-text.txt:190
msgid ""
"Version 3 of the ``text`` index is also :ref:`case insensitive <text-"
"index-case-insensitivity>` to characters with diacritics. As such, the "
"index also does not distinguish between ``é``, ``É``, ``e``, and ``E``."
msgstr ""

#: ../source/core/index-text.txt:195
msgid ""
"Previous versions of the ``text`` index treat characters with diacritics "
"as distinct."
msgstr ""

#: ../source/core/index-text.txt:201
msgid "Tokenization Delimiters"
msgstr ""

#: ../source/core/index-text.txt:205
msgid ""
"For tokenization, version 3 ``text`` index uses the delimiters "
"categorized under ``Dash``, ``Hyphen``, ``Pattern_Syntax``, "
"``Quotation_Mark``, ``Terminal_Punctuation``, and ``White_Space`` in "
"`Unicode 8.0 Character Database Prop List "
"<http://www.unicode.org/Public/8.0.0/ucd/PropList.txt>`_."
msgstr ""

#: ../source/core/index-text.txt:211
msgid ""
"For example, if given a string ``\"Il a dit qu'il «était le meilleur "
"joueur du monde»\"``, the ``text`` index treats ``«``, ``»``, and spaces "
"as delimiters."
msgstr ""

#: ../source/core/index-text.txt:215
msgid ""
"Previous versions of the index treat ``«`` as part of the term "
"``\"«était\"`` and ``»`` as part of the term ``\"monde»\"``."
msgstr ""

#: ../source/core/index-text.txt:219
msgid "Index Entries"
msgstr ""

#: ../source/core/index-text.txt:221
msgid ""
"``text`` index tokenizes and stems the terms in the indexed fields for "
"the index entries. ``text`` index stores one index entry for each unique "
"stemmed term in each indexed field for each document in the collection. "
"The index uses simple :ref:`language-specific <text-index-supported-"
"languages>` suffix stemming."
msgstr ""

#: ../source/core/index-text.txt:230
msgid "Supported Languages and Stop Words"
msgstr ""

#: ../source/core/index-text.txt:232
msgid ""
"MongoDB supports text search for various languages. ``text`` indexes drop"
" language-specific stop words (e.g. in English, ``the``, ``an``, ``a``, "
"``and``, etc.) and use simple language-specific suffix stemming. For a "
"list of the supported languages, see :ref:`text-search-languages`."
msgstr ""

#: ../source/includes/fact-text-search-language-none.rst:3
msgid ""
"If you specify a language value of ``\"none\"``, then the |text-obj| uses"
" simple tokenization with no list of stop words and no stemming."
msgstr ""

#: ../source/core/index-text.txt:241
msgid ""
"To specify a language for the ``text`` index, see :doc:`/tutorial"
"/specify-language-for-text-index`."
msgstr ""

#: ../source/core/index-text.txt:245
msgid "``sparse`` Property"
msgstr ""

#: ../source/core/index-text.txt:247
msgid ""
"``text`` indexes are always :doc:`sparse </core/index-sparse>` and ignore"
" the :doc:`sparse  </core/index-sparse>` option. If a document lacks a "
"``text`` index field (or the field is ``null`` or an empty array), "
"MongoDB does not add an entry for the document to the ``text`` index. For"
" inserts, MongoDB inserts the document but does not add to the ``text`` "
"index."
msgstr ""

#: ../source/core/index-text.txt:253
msgid ""
"For a compound index that includes a ``text`` index key along with keys "
"of other types, only the ``text`` index field determines whether the "
"index references a document. The other keys do not determine whether the "
"index references the documents or not."
msgstr ""

#: ../source/core/index-text.txt:259
msgid "Restrictions"
msgstr ""

#: ../source/core/index-text.txt:262
msgid "One Text Index Per Collection"
msgstr ""

#: ../source/core/index-text.txt:267
msgid "Text Search and Hints"
msgstr ""

#: ../source/includes/fact-hint-text-query-restriction.rst:3
msgid ""
"You cannot use :method:`~cursor.hint()` if the query includes a "
":query:`$text` query expression."
msgstr ""

#: ../source/core/index-text.txt:274
msgid "Text Index and Sort"
msgstr ""

#: ../source/core/index-text.txt:276
msgid ""
"Sort operations cannot obtain sort order from a ``text`` index, even from"
" a :ref:`compound text index <text-index-compound>`; i.e. sort operations"
" cannot use the ordering in the text index."
msgstr ""

#: ../source/core/index-text.txt:283
msgid "Compound Index"
msgstr ""

#: ../source/core/index-text.txt:285
msgid ""
"A :doc:`compound index </core/index-compound>` can include a ``text`` "
"index key in combination with ascending/descending index keys. However, "
"these compound indexes have the following restrictions:"
msgstr ""

#: ../source/includes/fact-compound-index-with-text-restrictions.rst:1
msgid ""
"A compound ``text`` index cannot include any other special index types, "
"such as :ref:`multi-key <index-type-multi-key>` or :ref:`geospatial "
"<index-feature-geospatial>` index fields."
msgstr ""

#: ../source/includes/fact-compound-index-with-text-restrictions.rst:5
msgid ""
"If the compound ``text`` index includes keys **preceding** the ``text`` "
"index key, to perform a :query:`$text` search, the query predicate must "
"include **equality match conditions** on the preceding keys."
msgstr ""

#: ../source/includes/fact-compound-index-with-text-restrictions.rst:10
msgid ""
"When creating a compound ``text`` index, all ``text`` index keys must be "
"listed adjacently in the index specification document."
msgstr ""

#: ../source/core/index-text.txt:291
msgid "See also :ref:`text-index-and-sort` for additional limitations."
msgstr ""

#: ../source/core/index-text.txt:293
msgid ""
"For an example of a compound text index, see :doc:`/tutorial/limit-"
"number-of-items-scanned-for-text-search`."
msgstr ""

#: ../source/core/index-text.txt:299
msgid "Drop a Text Index"
msgstr ""

#: ../source/core/index-text.txt:301
msgid ""
"To drop a ``text`` index, pass the *name* of the index to the "
":method:`db.collection.dropIndex()` method. To get the name of the index,"
" run the :method:`db.collection.getIndexes()` method."
msgstr ""

#: ../source/core/index-text.txt:305
msgid ""
"For information on the default naming scheme for ``text`` indexes as well"
" as overriding the default name, see :doc:`/tutorial/avoid-text-index-"
"name-limit`."
msgstr ""

#: ../source/core/index-text.txt:310
msgid "Collation Option"
msgstr ""

#: ../source/core/index-text.txt:312
msgid ""
"``text`` indexes only support simple binary comparison and do not support"
" :ref:`collation <collation>`."
msgstr ""

#: ../source/core/index-text.txt:315
msgid ""
"To create a ``text`` index on a a collection that has a non-simple "
"collation, you must explicitly specify ``{collation: {locale: \"simple\"}"
" }`` when creating the index."
msgstr ""

#: ../source/core/index-text.txt:320
msgid "Storage Requirements and Performance Costs"
msgstr ""

#: ../source/core/index-text.txt:322
msgid ""
"``text`` indexes have the following storage requirements and performance "
"costs:"
msgstr ""

#: ../source/core/index-text.txt:325
msgid ""
"``text`` indexes can be large. They contain one index entry for each "
"unique post-stemmed word in each indexed field for each document "
"inserted."
msgstr ""

#: ../source/core/index-text.txt:329
msgid ""
"Building a ``text`` index is very similar to building a large multi-key "
"index and will take longer than building a simple ordered (scalar) index "
"on the same data."
msgstr ""

#: ../source/core/index-text.txt:333
msgid ""
"When building a large ``text`` index on an existing collection, ensure "
"that you have a sufficiently high limit on open file descriptors. See the"
" :doc:`recommended settings </reference/ulimit>`."
msgstr ""

#: ../source/core/index-text.txt:337
msgid ""
"``text`` indexes will impact insertion throughput because MongoDB must "
"add an index entry for each unique post-stemmed word in each indexed "
"field of each new source document."
msgstr ""

#: ../source/core/index-text.txt:341
msgid ""
"Additionally, ``text`` indexes do not store phrases or information about "
"the proximity of words in the documents. As a result, phrase queries will"
" run much more effectively when the entire collection fits in RAM."
msgstr ""

#: ../source/core/index-text.txt:347
msgid "Text Search Support"
msgstr ""

#: ../source/core/index-text.txt:349
msgid ""
"The ``text`` index supports :query:`$text` query operations. For examples"
" of text search, see the :query:`$text reference page <$text>`. For "
"examples of :query:`$text` operations in aggregation pipelines, see "
":doc:`/tutorial/text-search-in-aggregation`."
msgstr ""

#~ msgid ""
#~ "MongoDB provides ``text`` indexes to "
#~ "support text search of string content"
#~ " in documents of a collection."
#~ msgstr ""

#~ msgid ""
#~ "``text`` indexes can include any field"
#~ " whose value is a string or an"
#~ " array of string elements. To perform"
#~ " queries that access the ``text`` "
#~ "index, use the :query:`$text` query "
#~ "operator."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB enables the text search feature"
#~ " by default. In MongoDB 2.4, you "
#~ "need to enable the text search "
#~ "feature manually to create ``text`` "
#~ "indexes and perform :ref:`text search "
#~ "<index-text-text-search>`."
#~ msgstr ""

#~ msgid ""
#~ "However, you can specify multiple fields"
#~ " for the ``text`` index. For examples"
#~ " of creating ``text`` indexes on "
#~ "multiple fields, see :doc:`/tutorial/create-"
#~ "text-index-on-multiple-fields` and "
#~ ":ref:`text-index-wildcard`."
#~ msgstr ""

#~ msgid ""
#~ "To allow for text search on all"
#~ " fields with string content, use the"
#~ " wildcard specifier (``$**``) to index "
#~ "all fields in the collection that "
#~ "contain string content. Such an index"
#~ " can be useful with highly "
#~ "unstructured data if it is unclear "
#~ "which fields to include in the "
#~ "text index or for ad-hoc querying."
#~ msgstr ""

#~ msgid ""
#~ "With a wildcard text index, MongoDB "
#~ "indexes every field that contains string"
#~ " data for each document in the "
#~ "collection. The following example creates "
#~ "a text index using the wildcard "
#~ "specifier:"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB supports text search for various"
#~ " languages. ``text`` indexes drop "
#~ "language-specific stop words (e.g. in "
#~ "English, \"the\", \"an\", \"a\", \"and\", "
#~ "etc.) and uses simple language-specific"
#~ " suffix stemming. For a list of "
#~ "the supported languages, see :ref:`text-"
#~ "search-languages`."
#~ msgstr ""

#~ msgid ""
#~ "For the Latin alphabet, ``text`` indexes"
#~ " are case insensitive for non-"
#~ "diacritics; i.e. case insensitive for "
#~ "``[A-z]``. For all other characters, "
#~ "text indexes treat them as distinct."
#~ msgstr ""

#~ msgid ""
#~ "``text`` indexes are :doc:`sparse </core"
#~ "/index-sparse>` by default and ignores "
#~ "the :doc:`sparse: true </core/index-sparse>`"
#~ " option. If a document lacks a "
#~ "``text`` index field (or the field "
#~ "is ``null`` or an empty array), "
#~ "MongoDB does not add an entry for"
#~ " the document to the ``text`` index."
#~ " For inserts, MongoDB inserts the "
#~ "document but does not add to the"
#~ " ``text`` index."
#~ msgstr ""

#~ msgid ""
#~ "For a compound index that includes "
#~ "a ``text`` index key along with "
#~ "keys of other types, only the "
#~ "``text`` index field determine whether "
#~ "the index references a document. The "
#~ "other keys do not determine whether "
#~ "the index references the documents or"
#~ " not."
#~ msgstr ""

#~ msgid ""
#~ "To drop a ``text`` index, pass the"
#~ " name of the index to the "
#~ ":method:`db.collection.dropIndex()` method. To get"
#~ " the name of the index, run the"
#~ " :method:`~db.collection.getIndexes()` method."
#~ msgstr ""

#~ msgid "Text Search"
#~ msgstr ""

#~ msgid ""
#~ "Text search supports the search of "
#~ "string content in documents of a "
#~ "collection. MongoDB provides the "
#~ ":query:`$text` operator to perform text "
#~ "search in queries and in "
#~ ":doc:`aggregation pipelines </tutorial/text-"
#~ "search-in-aggregation>`."
#~ msgstr ""

#~ msgid "The text search process:"
#~ msgstr ""

#~ msgid ""
#~ "tokenizes and stems the search term(s)"
#~ " during both the index creation and"
#~ " the text command execution."
#~ msgstr ""

#~ msgid ""
#~ "assigns a score to each document "
#~ "that contains the search term in "
#~ "the indexed fields. The score determines"
#~ " the relevance of a document to "
#~ "a given search query."
#~ msgstr ""

#~ msgid ""
#~ "The :query:`$text` operator can search "
#~ "for words and phrases. The query "
#~ "matches on the complete stemmed words."
#~ " For example, if a document field "
#~ "contains the word ``blueberry``, a "
#~ "search on the term ``blue`` will "
#~ "not match the document. However, a "
#~ "search on either ``blueberry`` or "
#~ "``blueberries`` will match."
#~ msgstr ""

#~ msgid ""
#~ "For information and examples on various"
#~ " text search patterns, see the "
#~ ":query:`$text` query operator. For examples"
#~ " of text search in aggregation "
#~ "pipeline, see :doc:`/tutorial/text-search-"
#~ "in-aggregation`."
#~ msgstr ""

#~ msgid "On this page"
#~ msgstr ""

#~ msgid ""
#~ "Starting in MongoDB 3.2, MongoDB "
#~ "introduces a version 3 of the "
#~ "``text`` index. Key features of the "
#~ "new version of the index are:"
#~ msgstr ""

#~ msgid "Improved :ref:`case insensitivity <text-index-case-insensitivity>`"
#~ msgstr ""

#~ msgid ":ref:`Diacritic insensitivity <text-index-diacritic-insensitivity>`"
#~ msgstr ""

#~ msgid ""
#~ "Additional :ref:`delimiters for tokenization "
#~ "<text-index-tokenization-delimiters>`"
#~ msgstr ""

#~ msgid ""
#~ "Starting in MongoDB 3.2, version 3 "
#~ "is the default version for new "
#~ "``text`` indexes."
#~ msgstr ""

#~ msgid ""
#~ "``text`` indexes are :doc:`sparse </core"
#~ "/index-sparse>` by default and ignore "
#~ "the :doc:`sparse: true </core/index-sparse>`"
#~ " option. If a document lacks a "
#~ "``text`` index field (or the field "
#~ "is ``null`` or an empty array), "
#~ "MongoDB does not add an entry for"
#~ " the document to the ``text`` index."
#~ " For inserts, MongoDB inserts the "
#~ "document but does not add to the"
#~ " ``text`` index."
#~ msgstr ""

