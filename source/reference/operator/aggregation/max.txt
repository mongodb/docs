==================
$max (aggregation)
==================

.. default-domain:: mongodb

Definition
----------

.. group:: $max

   Returns the highest value that results from applying an expression to
   each document in a group of documents that share the same group by
   key.

   .. include:: /includes/extracts/fact-aggregation-accumulator-max.rst

   :expression:`$max` has the following syntax:

   .. code-block:: javascript

      { $max: <expression> }

   For more information on expressions, see
   :ref:`aggregation-expressions`.

Example
-------

Consider a ``sales`` collection with the following documents:

.. code-block:: javascript

   { "_id" : 1, "item" : "abc", "price" : 10, "quantity" : 2, "date" : ISODate("2014-01-01T08:00:00Z") }
   { "_id" : 2, "item" : "jkl", "price" : 20, "quantity" : 1, "date" : ISODate("2014-02-03T09:00:00Z") }
   { "_id" : 3, "item" : "xyz", "price" : 5, "quantity" : 5, "date" : ISODate("2014-02-03T09:05:00Z") }
   { "_id" : 4, "item" : "abc", "price" : 10, "quantity" : 10, "date" : ISODate("2014-02-15T08:00:00Z") }
   { "_id" : 5, "item" : "xyz", "price" : 5, "quantity" : 10, "date" : ISODate("2014-02-15T09:05:00Z") }

Grouping the documents by the ``item`` field, the following operation
uses the :group:`$max` accumulator to compute the maximum total amount and
maximum quantity for each group of documents.

.. code-block:: javascript

   db.sales.aggregate(
      [
        {
          $group:
            {
              _id: "$item",
              maxTotalAmount: { $max: { $multiply: [ "$price", "$quantity" ] } },
              maxQuantity: { $max: "$quantity" }
            }
        }
      ]
   )

The operation returns the following results:

.. code-block:: javascript

   { "_id" : "xyz", "maxTotalAmount" : 50, "maxQuantity" : 10 }
   { "_id" : "jkl", "maxTotalAmount" : 20, "maxQuantity" : 1 }
   { "_id" : "abc", "maxTotalAmount" : 100, "maxQuantity" : 10 }
