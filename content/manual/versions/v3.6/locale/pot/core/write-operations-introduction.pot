# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/write-operations-introduction.txt:6
# e00ce2c96c084dfcaf323ba81a5b5e64
msgid "Write Operations Overview"
msgstr ""

#: ../source/core/write-operations-introduction.txt:10
# 21c67bb475c7468fb38952734b063b3e
msgid "A write operation is any operation that creates or modifies data in the MongoDB instance. In MongoDB, write operations target a single :term:`collection`. All write operations in MongoDB are atomic on the level of a single :term:`document`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:15
# cadad7acd9f541f3b055b1e74b639514
msgid "There are three classes of write operations in MongoDB: :ref:`insert <write-op-insert>`, :ref:`update <write-op-update>`, and :ref:`remove <write-op-remove>`. Insert operations add new data to a collection. Update operations modify existing data, and remove operations delete data from a collection. No insert, update, or remove can affect more than one document atomically."
msgstr ""

#: ../source/core/write-operations-introduction.txt:22
# 76b9e7475dad426f960cc2c1dc2fad8a
msgid "For the update and remove operations, you can specify criteria, or conditions, that identify the documents to update or remove. These operations use the same query syntax to specify the criteria as :doc:`read operations </core/read-operations>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:27
# 0f029a70040e46b692d68cd0c58538db
msgid "MongoDB allows applications to determine the acceptable level of acknowledgement required of write operations. See :doc:`/core/write-concern` for more information."
msgstr ""

#: ../source/core/write-operations-introduction.txt:34
# 3e7a91e956d8476681769501f143e77b
msgid "Insert"
msgstr ""

#: ../source/core/write-operations-introduction.txt:36
# 32ec8a1bfb8647f69b7ed9a5fdd65bd7
msgid "In MongoDB, the :method:`db.collection.insert()` method adds new :term:`documents <document>` to a collection."
msgstr ""

#: ../source/core/write-operations-introduction.txt:39
# f5c5ed730e294cb29cee5939b41d9695
msgid "The following diagram highlights the components of a MongoDB insert operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:44
#: ../source/core/write-operations-introduction.txt:109
#: ../source/core/write-operations-introduction.txt:188
# e8e51fcc522a4eeaa62e44bb3ab737cb
# f7cc961f76234debb7622a30c7f0c5dd
# d63d1a1e12a44ff2a397867c5be3c9c2
msgid "The following diagram shows the same query in SQL:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:0
#: ../source/core/write-operations-introduction.txt:0
#: ../source/core/write-operations-introduction.txt:0
# a5180a75970f4086a41734e9f14813c0
# 09dabbfe32f149f5a26ac0cfbb89af1b
# 25866f45457542fa96c9d86a077e598a
msgid "Example"
msgstr ""

#: ../source/core/write-operations-introduction.txt:50
# e928539c292e4177b01a1524dcd6abd9
msgid "The following operation inserts a new document into the ``users`` collection. The new document has four fields ``name``, ``age``, and ``status``, and an ``_id`` field. MongoDB always adds the ``_id`` field to the new document if that field does not exist."
msgstr ""

#: ../source/core/write-operations-introduction.txt:65
# 4f7228a93a724b948801f47b4c3437df
msgid "For more information and examples, see :method:`db.collection.insert()`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:68
# c2334b5eca904fc797146d57b6ac2ff8
msgid "Insert Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:70
# b63eca541db048e1bc753c4ed6820945
msgid "If you add a new document *without* the :term:`_id` field, the client library or the :program:`mongod` instance adds an ``_id`` field and populates the field with a unique :term:`ObjectId <objectid>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:74
# 8f8e9d2dc531404792c3c11a38d8a52d
msgid "If you specify the ``_id`` field, the value must be unique within the collection. For operations with :ref:`write concern <write-concern>`, if you try to create a document with a duplicate ``_id`` value, :program:`mongod` returns a duplicate key exception."
msgstr ""

#: ../source/core/write-operations-introduction.txt:80
# d8f9b5e327e14d74a057078cad59d444
msgid "Other Methods to Add Documents"
msgstr ""

#: ../source/core/write-operations-introduction.txt:82
# 475ee87be0264a04bf897ad5e3ded75d
msgid "You can also add new documents to a collection using methods that have an :ref:`upsert <write-operations-upsert-behavior>` option. If the option is set to ``true``, these methods will either modify existing documents or add a new document when no matching documents exist for the query. For more information, see :ref:`write-operations-upsert-behavior`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:91
# 2c72827e293d4891b486ae61c8aa4954
msgid "Update"
msgstr ""

#: ../source/core/write-operations-introduction.txt:93
# 5085fe500eb84ff591204a7a41102131
msgid "In MongoDB, the :method:`db.collection.update()` method modifies existing :term:`documents <document>` in a :term:`collection`. The :method:`db.collection.update()` method can accept query criteria to determine which documents to update as well as an options document that affects its behavior, such as the ``multi`` option to update multiple documents."
msgstr ""

#: ../source/core/write-operations-introduction.txt:100
# bcbdc82458134867b20b8642ea452086
msgid "Operations performed by an update are atomic within a single document. For example, you can safely use the :update:`$inc` and :update:`$mul` operators to modify frequently-changed fields in concurrent applications."
msgstr ""

#: ../source/core/write-operations-introduction.txt:104
# 781da6d7340a491082335089e5b4e465
msgid "The following diagram highlights the components of a MongoDB update operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:123
# 3ce45d3a21434dc49b48d3e1ee67a73e
msgid "This update operation on the ``users`` collection sets the ``status`` field to ``A`` for the documents that match the criteria of ``age`` greater than ``18``."
msgstr ""

#: ../source/core/write-operations-introduction.txt:127
# d7673cb960d14349b57ab9d37749413c
msgid "For more information, see :method:`db.collection.update()` and :ref:`update() Examples <update-method-examples>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:133
# b4a76f5df442400d9196d6835a9a1edc
msgid "Default Update Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:135
# 873c9fbaa3ff42c69d01e50fa7d69b8c
msgid "By default, the :method:`db.collection.update()` method updates a **single** document. However, with the ``multi`` option, :method:`~db.collection.update()` can update all documents in a collection that match a query."
msgstr ""

#: ../source/core/write-operations-introduction.txt:140
# c418f21f4ab541578708e8d3dc4b9ba3
msgid "The :method:`db.collection.update()` method either updates specific fields in the existing document or replaces the document. See :method:`db.collection.update()` for details as well as examples."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:1
# 916f2ff098054bbe93463c1201d1c8af
msgid "When performing update operations that increase the document size beyond the allocated space for that document, the update operation relocates the document on disk."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:7
# e8a7b4a5f86c43d5af7ad6d4b8584596
msgid "MongoDB preserves the order of the document fields following write operations *except* for the following cases:"
msgstr ""

#: ../source/includes/fact-update-field-order.rst:10
# d74a8d43260e4955a9472628aa2cbc45
msgid "The ``_id`` field is always the first field in the document."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:12
# 960aada784d64082a8bb516b998f23e8
msgid "Updates that include :update:`renaming <$rename>` of field names may result in the reordering of fields in the document."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:17
# 3daafce6d7b14d7d8d78670bb90fec2f
msgid "Starting in version 2.6, MongoDB actively attempts to preserve the field order in a document. Before version 2.6, MongoDB did not actively preserve the order of the fields in a document."
msgstr ""

#: ../source/core/write-operations-introduction.txt:149
# 10930ca1c52242b7abf4ab7142192d43
msgid "Update Behavior with the ``upsert`` Option"
msgstr ""

#: ../source/core/write-operations-introduction.txt:151
# feab81aceedd48dfaf0c71d9657d7c35
msgid "If the :method:`~db.collection.update()` method includes :ref:`upsert: true <upsert-parameter>` *and* no documents match the query portion of the update operation, then the update operation creates a new document. If there are matching documents, then the update operation with the :ref:`upsert: true <upsert-parameter>` modifies the matching document or documents."
msgstr ""

#: ../source/core/write-operations-introduction.txt:158
# 9aa4e03607d84f488299277595e54030
msgid "By specifying :term:`upsert: true <upsert>`, applications can indicate, in a *single* operation, that if no matching documents are found for the update, an insert should be performed. See :method:`~db.collection.update()` for details on performing an :ref:`upsert <upsert-parameter>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:166
# 93d6c93b09f24af281978a4685451848
msgid "In 2.6, the new :method:`Bulk()` methods and the underlying :dbcommand:`update` command allow you to perform many updates with ``upsert: true`` operations in a single call."
msgstr ""

#: ../source/core/write-operations-introduction.txt:170
# ac7c553579344a39bde3a5935172a4cd
msgid "If you create documents using the ``upsert`` option to :method:`~db.collection.update()` consider using a :ref:`a unique index <update-with-unique-indexes>` to prevent duplicated operations."
msgstr ""

#: ../source/core/write-operations-introduction.txt:177
# a3ea5f6fdcd6459abc2ecdcb2c488058
msgid "Remove"
msgstr ""

#: ../source/core/write-operations-introduction.txt:179
# fb1e0330c8944dc09d8b0ebfbdb765cc
msgid "In MongoDB, the :method:`db.collection.remove()` method deletes documents from a collection. The :method:`db.collection.remove()` method accepts a query criteria to determine which documents to remove."
msgstr ""

#: ../source/core/write-operations-introduction.txt:183
# 92d756cb33db4c35add79d49bf2a6f46
msgid "The following diagram highlights the components of a MongoDB remove operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:200
# fb81be1b9a004ab7a9de945dd051948a
msgid "This delete operation on the ``users`` collection removes all documents that match the criteria of ``status`` equal to ``D``."
msgstr ""

#: ../source/core/write-operations-introduction.txt:203
# 4f89a0f262bb4ffeaa360694853fa1ca
msgid "For more information, see :method:`db.collection.remove()` method and :doc:`/tutorial/remove-documents`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:207
# 25c0870b29774195ae09c9a97f7ab3c5
msgid "Remove Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:209
# a79c5dedf8bb47268649c5b31021692d
msgid "By default, :method:`db.collection.remove()` method removes all documents that match its query. However, the method can accept a flag to limit the delete operation to a single document."
msgstr ""

#: ../source/core/write-operations-introduction.txt:216
# c2a3d2217eda424e8c323ad3a354b305
msgid "Isolation of Write Operations"
msgstr ""

#: ../source/core/write-operations-introduction.txt:218
# c6cf13b619934a8eaf97522a723471dc
msgid "The modification of a single document is always atomic, even if the write operation modifies multiple embedded documents *within* that document. No other operations are atomic."
msgstr ""

#: ../source/core/write-operations-introduction.txt:222
# ecc55b03fa5c46eeae88ab457b81a932
msgid "If a write operation modifies multiple documents, the operation as a whole is not atomic, and other operations may interleave. You can, however, attempt to isolate a write operation that affects multiple documents using the :doc:`isolation operator </reference/operator/update/isolated>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:228
# 518a1ca940d94330ae65f9e1c5817e76
msgid "For more information :doc:`/core/write-operations-atomicity`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:231
# 62151a59234f431a94cbc4a50cc08ffe
msgid "Additional Methods"
msgstr ""

#: ../source/core/write-operations-introduction.txt:233
# a5bc5e9dbfb442528ebf054b0ebb36d2
msgid "The :method:`db.collection.save()` method can either update an existing document or insert a document if the document cannot be found by the ``_id`` field. See :method:`db.collection.save()` for more information and examples."
msgstr ""

#: ../source/core/write-operations-introduction.txt:238
# f925edd1a1a34caaad1d2cdc70d86fc8
msgid "MongoDB also provides methods to perform write operations in bulk. See :method:`Bulk()` for more information."
msgstr ""

#: ../source/core/write-operations-introduction.txt:1
#: ../source/core/write-operations-introduction.txt:2
# 33d657001bbf4daba3a46b062b3fcc7e
# 5d2b8146236047ec82e614591f78c24c
msgid "write operations"
msgstr ""

#: ../source/core/write-operations-introduction.txt:2
# 5d2b8146236047ec82e614591f78c24c
msgid "crud"
msgstr ""

