.. _qe-fundamentals-manual-encryption:

====================
{+manual-enc-title+}
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Learn how to use the **{+manual-enc+}** mechanism of {+qe+}.

.. include:: /includes/fact-manual-enc-definition.rst

{+manual-enc-first+} is available in the following MongoDB products
using version 6.0 or later:

- MongoDB Community Server
- MongoDB Enterprise Advanced
- MongoDB Atlas

Use {+manual-enc-title+}
------------------------

The following sections provide an overview of using {+manual-enc+} in 
your {+qe+}-enabled application:

- :ref:`qe-fundamentals-manual-encryption-client-enc`
- :ref:`qe-fundamentals-manual-encryption-update-operations`
- :ref:`qe-fundamentals-manual-encryption-automatic-decryption`

.. _qe-fundamentals-manual-encryption-client-enc:

Create a ``ClientEncryption`` Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``ClientEncryption`` is an abstraction used across drivers and
:binary:`~bin.mongosh` that encapsulates the {+key-vault-long+}
and {+kms-abbr+} operations involved in {+manual-enc+}.

To create a ``ClientEncryption`` instance, specify:

- A ``kmsProviders`` object configured with access to the
  {+kms-abbr+} hosting your {+cmk-long+}
- The namespace of your {+key-vault-long+}
- If you use MongoDB Community Server, set the ``bypassQueryAnalysis``
  option to ``True``
- A ``MongoClient`` instance with access to your {+key-vault-long+}

For more ``ClientEncryption`` options, see :ref:`qe-reference-mongo-client`. 

.. note::

   Code examples are not currently available but are coming soon.

.. _qe-fundamentals-manual-encryption-update-operations:

Encrypt Fields in Read and Write Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You must update read and write operations throughout your application
such that your application encrypts fields before performing
read and write operations.

To encrypt fields, use the ``encrypt`` method of your ``ClientEncryption``
instance. Specify the following:

- The value to be encrypted
- The algorithm used, either ``Indexed`` or ``Unindexed``
- The ID of the {+dek-long+}
- The contention factor (if you are using the ``Indexed`` algorithm)
- If performing a read operation, set the query type defined for your 
  field (if you are using the ``Indexed`` algorithm)

.. note:: Query Types

   The query type only applies to read operations.

   To learn more about query types, see :ref:`qe-query-types`. 

.. _qe-fundadmentals-man-enc-algorithm-choice:

Algorithm Choice
````````````````

Use the ``Indexed`` algorithm if you specify a ``queryType`` on the 
field.

``Indexed`` supports equality queries. ``Indexed`` fields require an 
index on the server. The index is created by specifying the 
``encryptedFields`` option in :method:`db.createCollection()`. 

.. _qe-fundamentals-manual-encryption-automatic-decryption:

Automatic Decryption
~~~~~~~~~~~~~~~~~~~~

To decrypt your fields automatically, you must configure your
``MongoClient`` instance as follows:

- Specify a ``kmsProviders`` object
- Specify your {+key-vault-long+}
- If you use MongoDB Community Server, set the ``bypassQueryAnalysis``
  option to ``True``

.. note:: Automatic Decryption is Available in MongoDB Community Server

   Although automatic encryption requires MongoDB Enterprise or MongoDB
   Atlas, automatic decryption is available in the following MongoDB
   products using version 6.0 or later:

   - MongoDB Community Server
   - MongoDB Enterprise Advanced
   - MongoDB Atlas

.. _qe-fundamentals-manual-encryption-server-side-schema:

Server-Side Field Level Encryption Enforcement
----------------------------------------------

:ref:`qe-specify-fields-for-encryption` to enforce 
encryption of specific fields in a collection.

``Indexed`` fields require an index on the server. The index is created 
by specifying the ``encryptedFields`` option in 
:method:`db.createCollection()`.

A client performing {+qe+} with the {+manual-enc+}
mechanism on a MongoDB instance configured to enforce encryption
of certain fields must encrypt those fields as specified on
the MongoDB instance.

To learn how to set up server-side {+qe+}
enforcement, see :ref:`qe-fundamentals-encrypt-query`.

Learn More
----------

To learn more about {+key-vault-long+}s, {+dek-long+}s, and {+cmk-long+}s,
see :ref:`csfle-reference-keys-key-vaults`.

To learn more about {+kms-abbr+} providers and ``kmsProviders`` objects,
see :ref:`csfle-reference-kms-providers`.
