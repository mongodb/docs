# This file borrows content from /includes/options-shared.yaml, which uses
# {{program}} to refer to the tool.
#
program: mongodump
name: help
inherit:
  name: help
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: verbose
inherit:
  name: verbose
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: quiet
inherit:
  name: quiet
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: version
inherit:
  name: version
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: uri
inherit:
  name: uri
  program: _shared
  file: options-shared.yaml
replacement:
  program: ":binary:`~bin.mongodump`"
---
program: mongodump
name: host
inherit:
  name: host
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: port
inherit:
  name: port
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: ipv6
inherit:
  name: ipv6
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: ssl
inherit:
  name: ssl
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: sslCAFile
inherit:
  name: sslCAFile
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: sslPEMKeyFile
inherit:
  name: sslPEMKeyFile
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: sslPEMKeyPassword
inherit:
  name: sslPEMKeyPassword
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: sslCRLFile
inherit:
  name: sslCRLFile
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: sslAllowInvalidCertificates
inherit:
  name: sslAllowInvalidCertificates
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: sslAllowInvalidHostnames
inherit:
  name: sslAllowInvalidHostnames
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: sslFIPSMode
inherit:
  name: sslFIPSMode
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: username
inherit:
  name: username
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: password
inherit:
  name: password
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: authenticationDatabase
inherit:
  name: authenticationDatabase
  program: mongoexport
  file: options-mongoexport.yaml
post: |
  If you do not specify an authentication database or a database to
  export, {{program}} assumes the ``admin`` database holds the user's
  credentials.
---
program: mongodump
name: authenticationMechanism
inherit:
  name: authenticationMechanism
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: gssapiServiceName
inherit:
  name: gssapiServiceName
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: gssapiHostName
inherit:
  name: gssapiHostName
  program: _shared
  file: options-shared.yaml
---
program: mongodump
name: db
aliases: -d
directive: option
args:  <database>
description: |
  Specifies a database to backup. If you do not specify a database,
  :binary:`~bin.mongodump` copies all databases in this instance into the dump
  files.
optional: true
---
program: mongodump
name: collection
aliases: -c
directive: option
args: <collection>
description: |
  Specifies a collection to backup. If you do not specify a collection,
  this option copies all collections in the specified database or instance
  to the dump files.
optional: true
---
program: mongodump
name: out
aliases: -o
directive: option
args: <path>
description: |
  Specifies the directory where :binary:`~bin.mongodump` will write
  :term:`BSON` files for the dumped databases. By default,
  :binary:`~bin.mongodump` saves output files in a directory named
  ``dump`` in the current working directory.

  To send the database dump to standard output, specify "``-``" instead of
  a path. Write to standard output if you want process the output before
  saving it, such as to use ``gzip`` to compress the dump. When writing
  standard output, :binary:`~bin.mongodump` does not write the metadata that
  writes in a ``<dbname>.metadata.json`` file when writing to files
  directly.

  You cannot use the ``--archive`` option with the
  :option:`--out` option.

optional: true
---
program: mongodump
name: query
aliases: -q
directive: option
args: <json>
description: |
  Provides a :term:`JSON document` as a query that optionally limits the
  documents included in the output of :binary:`~bin.mongodump`.

  .. include:: /includes/fact-quote-command-line-query.rst

optional: true
---
program: mongodump
name: queryFile
directive: option
args: <path>
description: |
  .. versionadded:: 3.2

  Specifies the path to a file containing a JSON document as a query
  filter that limits the documents included in the output of
  :binary:`~bin.mongodump`. {{role}} enables you to create query filters that
  are too large to fit in your terminal's buffer.
optional: true
---
program: mongodump
name: oplog
directive: option
args: null
description: |
  Creates a file named :file:`oplog.bson` as part of the
  :binary:`~bin.mongodump` output. The :file:`oplog.bson` file, located in
  the top level of the output directory, contains oplog entries that
  occur during the :binary:`~bin.mongodump` operation. This file provides
  an effective point-in-time snapshot of the state of a
  :binary:`~bin.mongod` instance. To restore to a specific point-in-time
  backup, use the output created with this option in conjunction with
  :option:`mongorestore --oplogReplay`.

  Without {{role}}, if there are write operations during the dump
  operation, the dump will not reflect a single moment in time. Changes
  made to the database during the update process can affect the output of
  the backup.

  {{role}} has no effect when running :binary:`~bin.mongodump`
  against a :binary:`~bin.mongos` instance to dump the entire contents of a
  sharded cluster. However, you can use {{role}} to dump
  individual shards.

  {{role}} only works against nodes that maintain an
  :term:`oplog`. This includes all members of a replica set.

  {{role}} does not dump the oplog collection.

  .. note::

     To use :binary:`~bin.mongodump` with {{role}}, you must create a full dump of
     a :term:`replica set` member. :binary:`~bin.mongodump` with  {{role}} fails
     if you use any of the following options to limit the data to be dumped:

     - :option:`--db`
     - :option:`--collection`

  .. seealso:: :option:`mongorestore --oplogReplay`

optional: true
---
program: mongodump
name: repair
directive: option
args: null
description: |
  .. filler to prevent giza bug
  .. note::

     When repairing a database, you should use :option:`mongod --repair`
     rather than this option. For instructions on repairing a database,
     refer to
     :doc:`/tutorial/recover-data-following-unexpected-shutdown`.

  Changes the behavior of {{program}} to only write valid data and
  exclude data that may be in an invalid state as a result of an
  improper shutdown or :program:`mongod` crash.


  {{role}} is different from :option:`mongod --repair`, and may produce
  a large amount of duplicate documents. It is only available for use
  against :binary:`~bin.mongod` instances using the ``mmapv1`` storage
  engine. You cannot run {{role}} against :binary:`~bin.mongos`, or against
  :binary:`~bin.mongod` instances that use the ``wiredTiger`` storage
  engine.

  For instructions on repairing a database, refer to
  :doc:`/tutorial/recover-data-following-unexpected-shutdown`.
optional: true
---
program: mongodump
name: forceTableScan
directive: option
args: null
description: |
  Forces :binary:`~bin.mongodump` to scan the data store directly: typically,
  :binary:`~bin.mongodump` saves entries as they appear in the index of
  the ``_id`` field. If you specify a query :option:`--query`,
  {{program}} will use the most appropriate index to support that query.

  Use {{role}} to skip the index and scan the data directly. Typically
  there are two cases where this behavior is preferable to the
  default:

  1. If you have key sizes over 800 bytes that would not be present in the
     ``_id`` index.

  2. Your database uses a custom ``_id`` field.

  When you run with {{role}}, the dump produced by
  :binary:`~bin.mongodump` can reflect the state of the database at many
  different points in time.

  .. important:: Use {{role}} with extreme caution and
     consideration.
optional: true
---
program: mongodump
name: dumpDbUsersAndRoles
directive: option
args: null
description: |
  Includes user and role definitions in the database's dump directory
  when performing :binary:`~bin.mongodump` on a specific database. This
  option applies only when you specify a database in the
  :option:`--db` option. MongoDB always includes user and role
  definitions when :binary:`~bin.mongodump` applies to an entire instance
  and not just a specific database.
optional: true
---
program: mongodump
name: excludeCollection
directive: option
args: string
description: |
  .. versionadded:: 3.0

  Excludes the specified collection from the {{program}} output.
  To exclude multiple collections, specify the {{role}} multiple times.

optional: true
---
program: mongodump
name: excludeCollectionsWithPrefix
directive: option
args: string
description: |
  .. versionadded:: 3.0

  Excludes all collections with a specified prefix from the {{program}}
  outputs. To specify multiple prefixes, specify the {{role}} multiple
  times.

optional: true
---
program: mongodump
name: archive
directive: option
args: <file or null>
description: |
  .. versionadded:: 3.2

  Writes the output to a single archive file or to the standard output
  (``stdout``).

  To output the dump to an archive file, run :binary:`~bin.mongodump` with the new
  ``--archive`` option and the archive filename.

  To output the dump to the standard output stream in order to pipe to
  another process, run :binary:`~bin.mongodump` with the ``archive`` option
  but *omit* the filename.

  You cannot use the ``--archive`` option with the
  :option:`--out` option.
optional: true
---
program: mongodump
name: gzip
directive: option
args: null
description: |
  .. versionadded:: 3.2

  Compresses the output. If :binary:`~bin.mongodump` outputs to the dump
  directory, the new feature compresses the individual files. The files
  have the suffix ``.gz``.

  If :binary:`~bin.mongodump` outputs to an archive file or the standard
  out stream, the new feature compresses the archive file or the data
  output to the stream.
optional: true
---
program: mongodump
name: numParallelCollections
inherit:
  name: numParallelCollections
  program: _shared
  file: options-shared.yaml
replacement:
  verb: export
---
program: mongodump
name: readPreference
inherit:
  name: readPreference
  program: mongoexport
  file: options-mongoexport.yaml
post: |
  See :ref:`mongodump-read-preference`.
---
program: mongodump
name: viewsAsCollections
directive: option
args: null
pre: |
  .. versionadded:: 3.4
description: |
  When specified, {{program}} exports :doc:`read-only views
  </core/views>` as collections. For each view, {{program}} will
  produce a BSON file containing the documents in the view. If you
  :binary:`~bin.mongorestore` the produced BSON file, the view will be
  restored as a :term:`collection`.

  If you do *not* include {{role}},
  {{program}} captures each view's metadata. If you include a
  view's metadata file in a :binary:`~bin.mongorestore` operation, the view
  is recreated.
...
