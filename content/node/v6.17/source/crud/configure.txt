.. _node-configure:

=========================
Configure CRUD Operations
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: insert, update, replace, delete, options, code example

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to configure read
and write operations.

Read and Write Settings
-----------------------

You can control how the driver routes read operations by setting a **read preference**.
You can also control how the driver handles data consistency and durability by setting
a **read concern** or **write concern**. Read concerns specify the level of durability
required for the data when performing read operations, and write concerns specify
how the driver waits for acknowledgment of write operations on a replica set.

You can set write concern, read concern, and read preference options at the following
levels:

- Client, which sets the *default for all operation executions* unless overridden
- Transaction
- Database
- Collection

The preceding list also indicates the increasing order of precedence of the option settings. For
example, if you set a read concern level for a transaction, it will override a read
concern level set for the client.

.. tip::

    To learn more about the read and write settings, see the following guides in the
    {+mdb-server+} manual:

    - :manual:`Read Preference </core/read-preference/>`
    - :manual:`Read Concern </reference/read-concern/>`
    - :manual:`Write Concern </reference/write-concern/>`

This section shows how to configure your read and write settings at each level.

Client Configuration
~~~~~~~~~~~~~~~~~~~~

This example shows how to set the read preference, read concern, and
write concern of a ``MongoClient`` instance by passing a ``MongoClientOptions``
object to the constructor. The code configures the following settings:

- ``SECONDARY`` read preference: Read operations retrieve data from 
  secondary replica set members
- ``local`` read concern: Read operations return the instance's most recent data 
  without guaranteeing that the data has been written to a majority of the replica
  set members
- ``2`` write concern: The primary and one secondary replica set member
  must acknowledge the write operation

.. literalinclude:: /includes/fundamentals/configure.js
    :language: javascript
    :dedent:
    :start-after: start-client-settings
    :end-before: end-client-settings

Alternatively, you can specify the read and write settings in the connection
URI, which is passed as a parameter to the ``MongoClient`` constructor:

.. literalinclude:: /includes/fundamentals/configure.js
    :language: javascript
    :dedent:
    :start-after: start-client-settings-uri
    :end-before: end-client-settings-uri

.. _node-read-write-transaction:

Transaction Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~

This example shows how to set the read preference, read concern, and
write concern of a transaction by passing a ``TransactionOptions`` object
to the ``startTransaction()`` method. The code configures the following settings:

- ``PRIMARY`` read preference: Read operations retrieve data from 
  the primary replica set member
- ``majority`` read concern: Read operations return the instance's most recent data 
  that has been written to a majority of replica set members
- ``1`` write concern: The primary replica set member must acknowledge the
  write operation

.. literalinclude:: /includes/fundamentals/configure.js
    :language: javascript
    :dedent:
    :start-after: start-transaction-settings
    :end-before: end-transaction-settings

.. _node-read-write-database:

Database Configuration
~~~~~~~~~~~~~~~~~~~~~~

This example shows how to set the read preference, read concern, and
write concern of a database called ``test_database`` by passing a ``DbOptions``
object to the ``db()`` method. The code configures the following settings:

- ``PRIMARY_PREFERRED`` read preference: Read operations retrieve data from 
  the primary replica set member, or secondary members if the primary is unavailable
- ``available`` read concern: Read operations return the instance's most recent data 
  without guaranteeing that the data has been written to a majority of the replica
  set members
- ``majority`` write concern: The majority of all replica set members
  must acknowledge the write operation

.. literalinclude:: /includes/fundamentals/configure.js
    :language: javascript
    :dedent:
    :start-after: start-database-settings
    :end-before: end-database-settings

.. _node-read-write-collection:

Collection Configuration
~~~~~~~~~~~~~~~~~~~~~~~~

This example shows how to set the read preference, read concern, and
write concern of a collection called ``test_collection`` by passing a ``CollectionOptions``
object to the ``collection()`` method. The code configures the following settings:

- ``SECONDARY_PREFERRED`` read preference: Read operations retrieve data from 
  secondary replica set members, or the primary members if no secondaries are available
- ``available`` read concern: Read operations return the instance's most recent data 
  without guaranteeing that the data has been written to a majority of the replica
  set members
- ``0`` write concern: Does not request acknowledgment of the write operation

.. literalinclude:: /includes/fundamentals/configure.js
    :language: javascript
    :dedent:
    :start-after: start-collection-settings
    :end-before: end-collection-settings

Tag Sets
--------

In {+mdb-server+}, you can apply key-value :manual:`tags
</core/read-preference-tags/>` to replica-set
members according to any criteria you choose. You can then use
those tags to target one or more members for a read operation.

By default, the {+driver-short+} ignores tags when choosing a member
to read from. To instruct the {+driver-short+} to prefer certain tags,
pass them as a parameter to your read preference class
constructor. 

This code example sets the ``readPreference`` option to a tag set that
instructs ``test_database`` to prefer reads from secondary replica set
members in the following order:

1. Members from the New York data center (``{ dc: 'ny' }``)
#. Members from the San Francisco data center (``{ dc: 'sf' }``)
#. Any secondary members (``{}``)

.. literalinclude:: /includes/fundamentals/configure.js
    :language: javascript
    :dedent:
    :start-after: start-tag-set
    :end-before: end-tag-set

Local Threshold
---------------

If multiple replica-set members match the read preference and tag sets you specify,
the {+driver-short+} reads from the nearest replica set members, chosen according to
their ping time.

By default, the driver uses only those members whose ping times are within 15 milliseconds
of the nearest member for queries. To distribute reads between members with
higher latencies, pass the ``localThresholdMS`` option to the ``MongoClient()`` constructor.

The following example specifies a local threshold of 35 milliseconds:

.. literalinclude:: /includes/fundamentals/configure.js
    :language: javascript
    :dedent:
    :start-after: start-local-threshold
    :end-before: end-local-threshold

In the preceding example, the {+driver-short+} distributes reads between matching members
within 35 milliseconds of the closest member's ping time.

.. note::
  
   The {+driver-short+} ignores the value of ``localThresholdMS`` when communicating with a
   replica set through a ``mongos`` instance. In this case, use the
   :manual:`localThreshold </reference/program/mongos/#std-option-mongos.--localThreshold>`
   command-line option.

.. _node-fundamentals-collations:
.. _node-collations:

Collation
---------

You can specify a **collation** to modify the behavior of read
and write operations. A collation is a set of language-specific rules for string
comparison, such as for letter case and accent marks.

MongoDB sorts strings using *binary collation* by default. This default
collation uses the `ASCII standard <https://en.wikipedia.org/wiki/ASCII>`_
character values to compare and order strings. Languages and locales
have specific character ordering conventions that differ from the ASCII
standard, and you can choose to apply a different set of collation rules
to your operation.

You can specify a collation at the following levels:

- Collection: Sets the default collation for operations on the collection.
  You cannot define a collation for an existing collection.

- Index: Sets the collation for operations that use the index.

- Operation: Sets the operation's collation and overrides any inherited collations.

.. _node-configure-collation-fields:

Collation Fields
~~~~~~~~~~~~~~~~

The collation object contains the following fields:

.. code-block:: javascript

   collation: {
     locale: <string>,
     caseLevel: <bool>,
     caseFirst: <string>,
     strength: <int>,
     numericOrdering: <bool>,
     alternate: <string>,
     maxVariable: <string>,
     backwards: <bool>
   }

When setting the ``collation`` option, you must specify the ``locale`` field.
All other fields are optional. For a complete list of supported locales and the default values
for the ``locale`` fields, see :manual:`Supported Languages and Locales
</reference/collation-locales-defaults/#supported-languages-and-locales>`
in the {+mdb-server+} manual.

.. _node-configure-collation-exs:

Collation Examples
~~~~~~~~~~~~~~~~~~

To specify a collation, create a ``collation`` object and set its
``locale`` field to the language collation you want to use. Then,
pass this object as an options parameter to the method corresponding
to the target collation level.

This section includes examples that set collations at the collection,
index, and operation levels.

.. _node-configure-collation-coll-index:

Set Collection and Index Collations
```````````````````````````````````

The following example creates a new collection named ``names``
and sets its default collation to the ``"fr_CA"`` locale:

.. literalinclude:: /includes/fundamentals/configure.js
    :language: javascript
    :dedent:
    :start-after: start-collection-collation
    :end-before: end-collection-collation

You can create an index on the ``names`` collection that specifies a different
collation, as shown in the following example:

.. literalinclude:: /includes/fundamentals/configure.js
    :language: javascript
    :dedent:
    :start-after: start-index-collation
    :end-before: end-index-collation

Set an Operation Collation
``````````````````````````

You can run an operation on the ``names`` collection, created in
the :ref:`preceding section <node-configure-collation-coll-index>`, that overrides
the default collation.

The ``names`` collection contains the following documents:

.. code-block:: none

   { "_id" : 1, "first_name" : "Hans", "last_name" : "Muller" }
   { "_id" : 2, "first_name" : "Gunter", "last_name" : "Braun" }
   { "_id" : 3, "first_name" : "Günter", "last_name" : "Krause" }
   { "_id" : 4, "first_name" : "Jürgen", "last_name" : "Weber" }

This example calls the ``findOneAndUpdate()`` method to update
the first matching document that has a ``first_name`` value of ``"Gunter"``.
The code applies a collation with the ``"de"`` locale and the ``"phonebook"``
locale variant:

.. literalinclude:: /includes/fundamentals/configure.js
    :language: javascript
    :dedent:
    :start-after: start-operation-collation
    :end-before: end-operation-collation

In the preceding example, the ``phonebook`` locale variant instructs
the driver to sort characters with umlauts before the same characters without
umlauts. As a result, the operation matches the document that has
a ``first_name`` value of ``"Günter"``, with an umlaut, and returns
the following update information:

.. code-block:: none
   :copyable: false

   { lastErrorObject: { updatedExisting: true, n: 1 },
     value: { _id: 3, first_name: 'Günter', last_name: 'Krause' },
     ok: 1 }

.. tip::

   To learn more about locale variants, see :manual:`Local Variants </reference/collation/#local-variants>`
   in the {+mdb-server+} manual.

API Documentation
-----------------

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `MongoClient <{+api+}/classes/MongoClient.html>`__
- `Db <{+api+}/classes/Db.html>`__
- `Collection <{+api+}/classes/Collection.html>`__
- `MongoClientOptions <{+api+}/interfaces/MongoClientOptions.html>`__
- `ClientSessionOptions <{+api+}/interfaces/ClientSessionOptions.html>`__
- `TransactionOptions <{+api+}/interfaces/TransactionOptions.html>`__
- `DbOptions <{+api+}/interfaces/DbOptions.html>`__
- `CollectionOptions <{+api+}/interfaces/CollectionOptions.html>`__
- `collation <{+api+}/interfaces/CreateCollectionOptions.html#collation>`__