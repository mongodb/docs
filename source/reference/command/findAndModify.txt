=============
findAndModify
=============

.. default-domain:: mongodb

.. EDITS to findAndModify.txt must be carried over (possibly w
   modifications) to the method db.collection.findAndModify.txt and
   vice versa

Definition
----------

.. dbcommand:: findAndModify

   The :dbcommand:`findAndModify` command modifies and returns a single
   document. By default, the returned document does not include the
   modifications made on the update. To return the document with the
   modifications made on the update, use the ``new`` option.

   The command has the following syntax:

   .. code-block:: javascript

      {
        findAndModify: <string>,
        query: <document>,
        sort: <document>,
        remove: <boolean>,
        update: <document>,
        new: <boolean>,
        fields: <document>,
        upsert: <boolean>
      }

   The :dbcommand:`findAndModify` command takes the following
   fields:

   .. |operation| replace:: :dbcommand:`findAndModify`

   .. include:: /reference/command/findAndModify-field.rst

Output
------

The return document contains the following fields:

- The ``lastErrorObject`` field that returns the details of the
  command:

  - The ``updatedExisting`` field **only** appears if the command
    specifies an ``update`` or an ``update`` with the ``upsert``
    option; i.e. the field does not appear for a ``remove``.

  - The ``upserted`` field **only** appears if the ``update`` with the
    ``upsert`` operation results in an insertion.

- The ``value`` field that returns either:

  - the original (i.e. pre-modification) document if ``new`` is
    false, or

  - the modified or inserted document if ``new: true``.

- The ``ok`` field that returns the status of the command.

.. note::

   If the :dbcommand:`findAndModify` finds no matching document,
   then:

   - for ``update`` or ``remove`` operations, ``lastErrorObject`` does
     not appear in the return document and the ``value`` field holds a
     ``null``.

     .. code-block:: javascript

        { "value" : null, "ok" : 1 }

   - for ``update`` with an ``upsert`` operation that results in an
     insertion, if the command also specifies ``new`` is ``false``
     **and** specifies a ``sort``, the return document has a
     ``lastErrorObject``, ``value``, and ``ok`` fields, but the
     ``value`` field holds an empty document ``{}``.

   - for ``update`` with an ``upsert`` operation that results in an
     insertion, if the command also specifies ``new`` is ``false`` but
     does **not** specify a ``sort``, the return document has a
     ``lastErrorObject``, ``value``, and ``ok`` fields, but the
     ``value`` field holds a ``null``.

Behavior
--------

When the :dbcommand:`findAndModify` command includes the ``upsert:
true`` option **and** the query field(s) is not uniquely indexed, the
command could insert a document multiple times in certain circumstances.
For instance, if multiple clients issue the :dbcommand:`findAndModify`
command and these commands complete the ``find`` phase before any one
starts the ``modify`` phase, these commands could insert the same
document.

Consider an example where no document with the name ``Andy`` exists and
multiple clients issue the following command:

.. code-block:: javascript

   db.runCommand(
      {
        findAndModify: "people",
        query: { name: "Andy" },
        sort: { rating: 1 },
        update: { $inc: { score: 1 } },
        upsert: true
      }
    )

If all the commands finish the ``query`` phase before any command
starts the ``modify`` phase, **and** there is no unique index on the
``name`` field, the commands may all perform an upsert. To prevent
this condition, create a :ref:`unique index <index-type-unique>` on
the ``name`` field. With the unique index in place, then the multiple
:dbcommand:`findAndModify` commands would observe one of the
following behaviors:

- Exactly one :dbcommand:`findAndModify` would successfully insert a
  new document.

- Zero or more :dbcommand:`findAndModify` commands would update the
  newly inserted document.

- Zero or more :dbcommand:`findAndModify` commands would fail when
  they attempted to insert a duplicate. If the command fails due to
  a unique index constraint violation, you can retry the command.
  Absent a delete of the document, the retry should not fail.

Sharded Collections
~~~~~~~~~~~~~~~~~~~

When using :dbcommand:`findAndModify` in a :term:`sharded
<sharding>` environment, the ``query`` must contain the
:term:`shard key` for all operations against the shard
cluster. :dbcommand:`findAndModify` operations issued against
:program:`mongos` instances for non-sharded collections function
normally.

Concurrency
~~~~~~~~~~~

This command obtains a write lock on the affected database and
will block other operations until it has completed; however,
typically the write lock is short lived and equivalent to other
similar :method:`~db.collection.update()` operations.

Differences with ``update`` Method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Both :dbcommand:`findAndModify` and :method:`~db.collection.update()`
atomically update a single document. See
:doc:`/tutorial/isolate-sequence-of-operations` for more details about
interactions and order of operations.

The :dbcommand:`findAndModify` command and :method:`~db.collection.update()` method operate
differently:

- By default, both operations modify a single document. However, the
  :method:`~db.collection.update()` method with its ``multi`` option can
  modify more than one document.

- If multiple documents match the update criteria, for
  :dbcommand:`findAndModify`, you can specify a ``sort`` to provide some
  measure of control on which document to update. 
  
  With the default behavior of the :method:`~db.collection.update()`
  method, you cannot specify which single document to update when multiple documents match.
 
- By default, the returned document from the :dbcommand:`findAndModify`
  command is an object that contains the pre-modified version of the
  document, as well as the status of the operation. To return the updated
  document in a return object, use the ``new`` option.
  
  The :method:`~db.collection.update()` method returns a
  :method:`WriteResult` object that contains the status of the operation.
  To return the updated document, use the :method:`~db.collection.find()`
  method. However, other updates may have modified the document between
  your update and the document retrieval. Also, if the update modified
  only a single document but multiple documents matched, you will need to
  use additional logic to identify the updated document.

Examples
--------

Update and Return
~~~~~~~~~~~~~~~~~

The following command updates an existing document in the ``people``
collection where the document matches the ``query`` criteria:

.. code-block:: javascript

   db.runCommand(
      {
        findAndModify: "people",
        query: { name: "Tom", state: "active", rating: { $gt: 10 } },
        sort: { rating: 1 },
        update: { $inc: { score: 1 } }
      }
   )

This command performs the following actions:

#. The ``query`` finds a document in the ``people`` collection where the
   ``name`` field has the value ``Tom``, the ``state`` field has
   the value ``active`` and the ``rating`` field has a value
   :operator:`greater than <$gt>` 10.

#. The ``sort`` orders the results of the query in ascending order.
   If multiple documents meet the ``query`` condition, the command will
   select for modification the first document as ordered by this
   ``sort``.

#. The ``update`` :operator:`increments <$inc>` the value of the
   ``score`` field by 1.

#. The command returns a document with the following fields:

   - The ``lastErrorObject`` field that contains the details of the
     command, including the field ``updatedExisting`` which is
     ``true``, and

   - The ``value`` field that contains the original (i.e.
     pre-modification) document selected for this update:

     .. code-block:: javascript

        {
          "lastErrorObject" : {
             "updatedExisting" : true,
             "n" : 1,
             "connectionId" : 1,
             "err" : null,
             "ok" : 1
          },
          "value" : {
             "_id" : ObjectId("50f1d54e9beb36a0f45c6452"),
             "name" : "Tom",
             "state" : "active",
             "rating" : 100,
             "score" : 5
          },
          "ok" : 1
        }

To return the modified document in the ``value`` field, add the
``new:true`` option to the command.

If no document match the ``query`` condition, the command
returns a document that contains ``null`` in the ``value``
field:

.. code-block:: javascript

  { "value" : null, "ok" : 1 }

The :program:`mongo` shell and many :term:`drivers <driver>`
provide a :method:`~db.collection.findAndModify()` helper method.
Using the shell helper, this previous operation can take the
following form:

.. code-block:: javascript

  db.people.findAndModify( {
     query: { name: "Tom", state: "active", rating: { $gt: 10 } },
     sort: { rating: 1 },
     update: { $inc: { score: 1 } }
  } );

However, the :method:`~db.collection.findAndModify()` shell helper
method returns only the unmodified document, or if ``new`` is
``true``, the modified document.

.. code-block:: javascript

  {
     "_id" : ObjectId("50f1d54e9beb36a0f45c6452"),
     "name" : "Tom",
     "state" : "active",
     "rating" : 100,
     "score" : 5
  }

Upsert
~~~~~~

The following :dbcommand:`findAndModify` command includes the ``upsert:
true`` option for the ``update`` operation to either update a matching
document or, if no matching document exists, create a new document:

.. code-block:: javascript

  db.runCommand(
                 {
                   findAndModify: "people",
                   query: { name: "Gus", state: "active", rating: 100 },
                   sort: { rating: 1 },
                   update: { $inc: { score: 1 } },
                   upsert: true
                 }
               )

If the command finds a matching document, the command performs an update.

If the command does **not** find a matching document, the ``update``
with :term:`upsert` operation results in an insertion and returns a
document with the following fields:

- The ``lastErrorObject`` field that contains the details of the
  command, including the field ``upserted`` that contains the
  ``ObjectId`` of the newly inserted document, and

- The ``value`` field that contains an empty document ``{}`` as the
  original document because the command included the ``sort`` option:

.. code-block:: sh

   {
     "lastErrorObject" : {
        "updatedExisting" : false,
        "upserted" : ObjectId("50f2329d0092b46dae1dc98e"),
        "n" : 1,
        "connectionId" : 1,
        "err" : null,
        "ok" : 1
     },
     "value" : {

     },
     "ok" : 1
   }

If the command did **not** include the ``sort`` option, the ``value`` field
would contain ``null``:

.. code-block:: sh

   {
     "value" : null,
     "lastErrorObject" : {
        "updatedExisting" : false,
        "n" : 1,
        "upserted" : ObjectId("5102f7540cb5c8be998c2e99")
     },
     "ok" : 1
   }

Return New Document
~~~~~~~~~~~~~~~~~~~

The following :dbcommand:`findAndModify` command includes both
``upsert: true`` option and the ``new:true`` option. The command either
updates a matching document and returns the updated document or, if no
matching document exists, inserts a document and returns the newly
inserted document in the ``value`` field.

In the following example, no document in the ``people`` collection
matches the ``query`` condition:

.. code-block:: javascript

   db.runCommand(
      {
        findAndModify: "people",
        query: { name: "Pascal", state: "active", rating: 25 },
        sort: { rating: 1 },
        update: { $inc: { score: 1 } },
        upsert: true,
        new: true
      }
   )

The command returns the newly inserted document in the ``value`` field:

.. code-block:: sh

   {
     "lastErrorObject" : {
        "updatedExisting" : false,
        "upserted" : ObjectId("50f47909444c11ac2448a5ce"),
        "n" : 1,
        "connectionId" : 1,
        "err" : null,
        "ok" : 1
     },
     "value" : {
        "_id" : ObjectId("50f47909444c11ac2448a5ce"),
        "name" : "Pascal",
        "rating" : 25,
        "score" : 1,
        "state" : "active"
     },
     "ok" : 1
   }
