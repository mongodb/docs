#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/manage-journaling.txt:3
msgid "Manage Journaling"
msgstr ""

#: ../source/includes/extracts/journaling-intro.rst:1
msgid ""
"MongoDB uses *write ahead logging* to an on-disk :term:`journal` to "
"guarantee :doc:`write operation </crud>` durability. The MMAPv1 storage "
"engine also requires the `journal` in order to provide crash resiliency."
msgstr ""

#: ../source/includes/extracts/journaling-intro.rst:6
msgid ""
"The WiredTiger storage engine does not require journaling to guarantee a "
"consistent state after a crash. The database will be restored to the last"
" consistent :ref:`checkpoint <storage-wiredtiger-checkpoints>` during "
"recovery.  However, if MongoDB exits unexpectedly in between checkpoints,"
" journaling is required to recover writes that occurred after the last "
"checkpoint."
msgstr ""

#: ../source/includes/extracts/journaling-intro.rst:13
msgid ""
"With journaling enabled, if :binary:`~bin.mongod` stops unexpectedly, the"
" program can recover everything written to the journal. MongoDB will re-"
"apply the write operations on restart and maintain a consistent state. By"
" default, the greatest extent of lost writes, i.e., those not made to the"
" journal, are those made in the last 100 milliseconds, plus the time it "
"takes to perform the actual journal writes. See "
":setting:`~storage.journal.commitIntervalMs` for more information on the "
"default."
msgstr ""

#: ../source/tutorial/manage-journaling.txt:16
msgid "Procedures"
msgstr ""

#: ../source/includes/extracts/journaling-disable-journaling.rst:2
msgid "Disable Journaling"
msgstr ""

#: ../source/includes/extracts/journaling-disable-journaling.rst:6
msgid ""
"Do not disable journaling on production systems. When using the MMAPv1 "
"storage engine *without* a journal, if your :binary:`~bin.mongod` "
"instance stops without shutting down cleanly unexpectedly for any reason,"
" (e.g. power failure) and you are not running with journaling, then you "
"must recover from an unaffected :term:`replica set` member or backup, as "
"described in :doc:`repair </tutorial/recover-data-following-unexpected-"
"shutdown>`."
msgstr ""

#: ../source/includes/wiredtiger-node-nojournal.rst:1
msgid ""
"In version 3.6, the :option:`--nojournal <mongod --nojournal>` option is "
"deprecated for :doc:`replica set members </core/replica-set-members/>` "
"using the :doc:`WiredTiger storage engine </core/wiredtiger/>`."
msgstr ""

#: ../source/includes/wiredtiger-node-nojournal.rst:5
msgid ""
":doc:`Replica set members </core/replica-set-members/>` which use the "
"WiredTiger :doc:`storage engine </core/storage-engines/>` should not use "
"the :option:`--nojournal <mongod --nojournal>` option. For more "
"information about journaling, see :doc:`/tutorial/manage-journaling`."
msgstr ""

#: ../source/includes/extracts/journaling-disable-journaling.rst:16
msgid ""
"To disable journaling, start :binary:`~bin.mongod` with the "
":option:`--nojournal <mongod --nojournal>` command line option."
msgstr ""

#: ../source/includes/extracts/journaling-get-commit-acknowledgement.rst:2
msgid "Get Commit Acknowledgement"
msgstr ""

#: ../source/includes/extracts/journaling-get-commit-acknowledgement.rst:4
msgid ""
"You can get commit acknowledgement with the :ref:`write-concern` and the "
":writeconcern:`j` option. For details, see :ref:`write-concern-"
"operation`."
msgstr ""

#: ../source/includes/extracts/journaling-avoid-preallocation-lag-mmapv1.rst:2
msgid "Avoid Preallocation Lag for MMAPv1"
msgstr ""

#: ../source/includes/extracts/journaling-avoid-preallocation-lag-mmapv1.rst:4
msgid ""
"With the :doc:`MMAPv1 storage engine </core/mmapv1>`, MongoDB may "
"preallocate journal files if the :binary:`~bin.mongod` process determines"
" that it is more efficient to preallocate journal files than create new "
"journal files as needed."
msgstr ""

#: ../source/includes/extracts/journaling-avoid-preallocation-lag-mmapv1.rst:9
msgid ""
"Depending on your filesystem, you might experience a preallocation lag "
"the first time you start a :binary:`~bin.mongod` instance with journaling"
" enabled. The amount of time required to pre-allocate files might last "
"several minutes; during this time, you will not be able to connect to the"
" database. This is a one-time preallocation and does not occur with "
"future invocations."
msgstr ""

#: ../source/includes/extracts/journaling-avoid-preallocation-lag-mmapv1.rst:16
msgid ""
"To avoid :ref:`preallocation lag <journaling-journal-files>`, you can "
"preallocate files in the journal directory by copying them from another "
"instance of :binary:`~bin.mongod`."
msgstr ""

#: ../source/includes/extracts/journaling-avoid-preallocation-lag-mmapv1.rst:20
msgid ""
"Preallocated files do not contain data. It is safe to later remove them."
"  But if you restart :binary:`~bin.mongod` with journaling, "
":binary:`~bin.mongod` will create them again."
msgstr ""

#: ../source/includes/extracts/journaling-avoid-preallocation-lag-mmapv1.rst:28
msgid ""
"For demonstration purposes, the sequence starts by creating a set of "
"journal files in the usual way."
msgstr ""

#: ../source/includes/extracts/journaling-avoid-preallocation-lag-mmapv1.rst:31
msgid "Create a temporary directory into which to create a set of journal files:"
msgstr ""

#: ../source/includes/extracts/journaling-avoid-preallocation-lag-mmapv1.rst:38
msgid ""
"Create a set of journal files by starting a :binary:`~bin.mongod` "
"instance that uses the temporary directory. For example:"
msgstr ""

#: ../source/includes/warning-bind-ip-security-considerations.rst:3
msgid ""
"Before binding to a non-localhost (e.g. publicly accessible) IP address, "
"ensure you have secured your cluster from unauthorized access. For a "
"complete list of security recommendations, see :doc:`/administration"
"/security-checklist`. At minimum, consider :ref:`enabling authentication "
"<checklist-auth>` and :doc:`hardening network infrastructure </core"
"/security-network>`."
msgstr ""

#: ../source/includes/extracts/journaling-avoid-preallocation-lag-mmapv1.rst:47
msgid ""
"When you see the following log output, indicating :binary:`~bin.mongod` "
"has the files, press CONTROL+C to stop the :binary:`~bin.mongod` "
"instance:"
msgstr ""

#: ../source/includes/extracts/journaling-avoid-preallocation-lag-mmapv1.rst:55
msgid ""
"Preallocate journal files for the new instance of :binary:`~bin.mongod` "
"by moving the journal files from the data directory of the existing "
"instance to the data directory of the new instance:"
msgstr ""

#: ../source/includes/extracts/journaling-avoid-preallocation-lag-mmapv1.rst:64
msgid "Start the new :binary:`~bin.mongod` instance. For example:"
msgstr ""

#: ../source/includes/extracts/journaling-monitor-journal-status.rst:2
msgid "Monitor Journal Status"
msgstr ""

#: ../source/includes/extracts/journaling-monitor-journal-status.rst:4
msgid "Use the following command to monitor journal status:"
msgstr ""

#: ../source/includes/extracts/journaling-monitor-journal-status.rst:6
msgid ":dbcommand:`serverStatus`"
msgstr ""

#: ../source/includes/extracts/journaling-monitor-journal-status.rst:8
msgid ""
"The :dbcommand:`serverStatus` command returns database status information"
" that is useful for assessing performance."
msgstr ""

#: ../source/includes/extracts/journaling-change-group-commit-interval-mmapv1.rst:2
msgid "Change the Group Commit Interval for MMAPv1"
msgstr ""

#: ../source/includes/extracts/journaling-change-group-commit-interval-mmapv1.rst:4
msgid ""
"For the :doc:`MMAPv1 storage engine </core/mmapv1>`, you can set the "
"group commit interval using the :option:`--journalCommitInterval <mongod "
"--journalCommitInterval>` command line option. The allowed range is ``2``"
" to ``300`` milliseconds."
msgstr ""

#: ../source/includes/extracts/journaling-change-group-commit-interval-mmapv1.rst:9
msgid ""
"Lower values increase the durability of the journal at the expense of "
"disk performance."
msgstr ""

#: ../source/includes/extracts/journaling-recover-data-unexpected-shutdown.rst:2
msgid "Recover Data After Unexpected Shutdown"
msgstr ""

#: ../source/includes/extracts/journaling-recover-data-unexpected-shutdown.rst:4
msgid ""
"On a restart after a crash, MongoDB replays all journal files in the "
"journal directory before the server becomes available. If MongoDB must "
"replay journal files, :binary:`~bin.mongod` notes these events in the log"
" output."
msgstr ""

#: ../source/includes/extracts/journaling-recover-data-unexpected-shutdown.rst:9
msgid "There is no reason to run :dbcommand:`repairDatabase` in these situations."
msgstr ""

#~ msgid ""
#~ "MongoDB uses *write ahead logging* to"
#~ " an on-disk :term:`journal` to "
#~ "guarantee :doc:`write operation </core/write-"
#~ "operations>` durability and to provide "
#~ "crash resiliency. Before applying a "
#~ "change to the data files, MongoDB "
#~ "writes the change operation to the "
#~ "journal. If MongoDB should terminate or"
#~ " encounter an error before it can "
#~ "write the changes from the journal "
#~ "to the data files, MongoDB can "
#~ "re-apply the write operation and "
#~ "maintain a consistent state."
#~ msgstr ""

#~ msgid ""
#~ "*Without* a journal, if :program:`mongod` "
#~ "exits unexpectedly, you must assume your"
#~ " data is in an inconsistent state,"
#~ " and you must run either :doc:`repair"
#~ " </tutorial/recover-data-following-unexpected-"
#~ "shutdown>` or, preferably, :doc:`resync "
#~ "</tutorial/resync-replica-set-member>` from"
#~ " a clean member of the replica "
#~ "set."
#~ msgstr ""

#~ msgid ""
#~ "With journaling enabled, if :program:`mongod`"
#~ " stops unexpectedly, the program can "
#~ "recover everything written to the "
#~ "journal, and the data remains in a"
#~ " consistent state. By default, the "
#~ "greatest extent of lost writes, i.e.,"
#~ " those not made to the journal, "
#~ "are those made in the last 100 "
#~ "milliseconds. See "
#~ ":setting:`~storage.journal.commitIntervalMs` for more "
#~ "information on the default."
#~ msgstr ""

#~ msgid ""
#~ "With journaling, if you want a "
#~ "data set to reside entirely in "
#~ "RAM, you need enough RAM to hold"
#~ " the data set plus the \"write "
#~ "working set.\" The \"write working set\""
#~ " is the amount of unique data "
#~ "you expect to see written between "
#~ "re-mappings of the private view. For"
#~ " information on views, see :ref"
#~ ":`journaling-storage-views`."
#~ msgstr ""

#~ msgid ""
#~ "For 64-bit builds of :program:`mongod`, "
#~ "journaling is enabled by default.  For"
#~ " other platforms, see "
#~ ":setting:`storage.journal.enabled`."
#~ msgstr ""

#~ msgid ""
#~ "If no journal files exist, when "
#~ ":program:`mongod` starts, it must preallocate"
#~ " new journal files. During this "
#~ "operation, the :program:`mongod` is not "
#~ "listening for connections until preallocation"
#~ " completes: for some systems this may"
#~ " take a several minutes. During this"
#~ " period your applications and the "
#~ ":program:`mongo` shell are not available."
#~ msgstr ""

#~ msgid ""
#~ "Do not disable journaling on production"
#~ " systems. If your :program:`mongod` "
#~ "instance stops without shutting down "
#~ "cleanly unexpectedly for any reason, "
#~ "(e.g. power failure) and you are "
#~ "not running with journaling, then you"
#~ " must recover from an unaffected "
#~ ":term:`replica set` member or backup, as"
#~ " described in :doc:`repair  </tutorial"
#~ "/recover-data-following-unexpected-shutdown>`."
#~ msgstr ""

#~ msgid ""
#~ "You can get commit acknowledgment with"
#~ " the :ref:`write-concern` and the "
#~ "``j`` option. For details, see :ref"
#~ ":`write-concern-operation`."
#~ msgstr ""

#~ msgid "Avoid Preallocation Lag"
#~ msgstr ""

#~ msgid ""
#~ "Preallocated files do not contain data."
#~ " It is safe to later remove "
#~ "them. But if you restart "
#~ ":program:`mongod` with journaling, :program:`mongod`"
#~ " will create them again."
#~ msgstr ""

#~ msgid ""
#~ "Create a set of journal files by"
#~ " staring a :program:`mongod` instance that"
#~ " uses the temporary directory:"
#~ msgstr ""

#~ msgid "Change the Group Commit Interval"
#~ msgstr ""

#~ msgid ""
#~ "You can set the group commit "
#~ "interval using the :option:`--journalCommitInterval"
#~ " <mongod --journalCommitInterval>` command line"
#~ " option. The allowed range is ``2``"
#~ " to ``300`` milliseconds."
#~ msgstr ""

#~ msgid "Enable Journaling"
#~ msgstr ""

#~ msgid ""
#~ "For 64-bit builds of :program:`mongod`, "
#~ "journaling is enabled by default."
#~ msgstr ""

#~ msgid ""
#~ "To enable journaling, start :program:`mongod`"
#~ " with the :option:`--journal <mongod "
#~ "--journal>` command line option."
#~ msgstr ""

#~ msgid ""
#~ "To disable journaling, start :program:`mongod`"
#~ " with the :option:`--nojournal <mongod "
#~ "--nojournal>` command line option."
#~ msgstr ""

#~ msgid "Get Commit Acknowledgment"
#~ msgstr ""

#~ msgid ""
#~ "To avoid :ref:`preallocation lag "
#~ "<journaling-journal-files>`, you can "
#~ "preallocate files in the journal "
#~ "directory by copying them from another"
#~ " instance of :program:`mongod`."
#~ msgstr ""

#~ msgid "Example"
#~ msgstr ""

#~ msgid ""
#~ "When you see the following log "
#~ "output, indicating :program:`mongod` has the"
#~ " files, press CONTROL+C to stop the"
#~ " :program:`mongod` instance:"
#~ msgstr ""

#~ msgid ""
#~ "Preallocate journal files for the new"
#~ " instance of :program:`mongod` by moving"
#~ " the journal files from the data "
#~ "directory of the existing instance to"
#~ " the data directory of the new "
#~ "instance:"
#~ msgstr ""

#~ msgid "Start the new :program:`mongod` instance:"
#~ msgstr ""

#~ msgid "Use the following commands and methods to monitor journal status:"
#~ msgstr ""

#~ msgid ":dbcommand:`journalLatencyTest`"
#~ msgstr ""

#~ msgid ""
#~ "Use :dbcommand:`journalLatencyTest` to measure "
#~ "how long it takes on your volume"
#~ " to write to the disk in an "
#~ "append-only fashion. You can run "
#~ "this command on an idle system to"
#~ " get a baseline sync time for "
#~ "journaling. You can also run this "
#~ "command on a busy system to see"
#~ " the sync time on a busy "
#~ "system, which may be higher if the"
#~ " journal directory is on the same "
#~ "volume as the data files."
#~ msgstr ""

#~ msgid ""
#~ "The :dbcommand:`journalLatencyTest` command also "
#~ "provides a way to check if your"
#~ " disk drive is buffering writes in"
#~ " its local cache. If the number "
#~ "is very low (i.e., less than 2 "
#~ "milliseconds) and the drive is non-"
#~ "SSD, the drive is probably buffering "
#~ "writes. In that case, enable cache "
#~ "write-through for the device in "
#~ "your operating system, unless you have"
#~ " a disk controller card with battery"
#~ " backed RAM."
#~ msgstr ""

#~ msgid ""
#~ "On a restart after a crash, "
#~ "MongoDB replays all journal files in "
#~ "the journal directory before the server"
#~ " becomes available. If MongoDB must "
#~ "replay journal files, :program:`mongod` notes"
#~ " these events in the log output."
#~ msgstr ""

#~ msgid "On this page"
#~ msgstr ""

#~ msgid ""
#~ "With journaling enabled, if :program:`mongod`"
#~ " stops unexpectedly, the program can "
#~ "recover everything written to the "
#~ "journal. MongoDB will re-apply the "
#~ "write operations on restart and maintain"
#~ " a consistent state. By default, the"
#~ " greatest extent of lost writes, "
#~ "i.e., those not made to the "
#~ "journal, are those made in the "
#~ "last 100 milliseconds, plus the time "
#~ "it takes to perform the actual "
#~ "journal writes. See "
#~ ":setting:`~storage.journal.commitIntervalMs` for more "
#~ "information on the default."
#~ msgstr ""

#~ msgid ""
#~ "Do not disable journaling on production"
#~ " systems. When using the MMAPv1 "
#~ "storage engine *without* a journal, if"
#~ " your :program:`mongod` instance stops "
#~ "without shutting down cleanly unexpectedly "
#~ "for any reason, (e.g. power failure) "
#~ "and you are not running with "
#~ "journaling, then you must recover from"
#~ " an unaffected :term:`replica set` member"
#~ " or backup, as described in "
#~ ":doc:`repair </tutorial/recover-data-following-"
#~ "unexpected-shutdown>`."
#~ msgstr ""

#~ msgid ""
#~ "You can get commit acknowledgment with"
#~ " the :ref:`write-concern` and the "
#~ ":writeconcern:`j` option. For details, see "
#~ ":ref:`write-concern-operation`."
#~ msgstr ""

#~ msgid ""
#~ "With the :doc:`MMAPv1 storage engine "
#~ "</core/mmapv1>`, MongoDB may preallocate "
#~ "journal files if the :program:`mongod` "
#~ "process determines that it is more "
#~ "efficient to preallocate journal files "
#~ "than create new journal files as "
#~ "needed."
#~ msgstr ""

#~ msgid ""
#~ "Depending on your filesystem, you might"
#~ " experience a preallocation lag the "
#~ "first time you start a :program:`mongod`"
#~ " instance with journaling enabled. The "
#~ "amount of time required to pre-"
#~ "allocate files might last several "
#~ "minutes; during this time, you will "
#~ "not be able to connect to the "
#~ "database. This is a one-time "
#~ "preallocation and does not occur with"
#~ " future invocations."
#~ msgstr ""

#~ msgid ""
#~ "Preallocated files do not contain data."
#~ " It is safe to later remove "
#~ "them.  But if you restart "
#~ ":program:`mongod` with journaling, :program:`mongod`"
#~ " will create them again."
#~ msgstr ""

#~ msgid ""
#~ "Create a set of journal files by"
#~ " starting a :program:`mongod` instance that"
#~ " uses the temporary directory:"
#~ msgstr ""

