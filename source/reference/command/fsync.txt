=====
fsync
=====

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: fsync

   Forces the :program:`mongod` process to flush all pending writes
   from the storage layer to disk. Optionally, you can use
   :dbcommand:`fsync` to lock the :program:`mongod` instance and block
   write operations for the purpose of capturing backups.

   As applications write data, MongoDB records the data in the storage
   layer and then writes the data to disk within the :setting:`~storage.syncPeriodSecs`
   interval, which is 60 seconds by default. Run :dbcommand:`fsync` when
   you want to flush writes to disk ahead of that interval.

   The :dbcommand:`fsync` command has the following syntax:

   .. code-block:: javascript

      { fsync: 1, async: <Boolean>, lock: <Boolean> }

   The :dbcommand:`fsync` command has the following fields:

   .. include:: /includes/apiargs/dbcommand-fsync-field.rst

Considerations
--------------

Wired Tiger Compatibility
~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/wt-fsync-lock-compatibility-command.rst

Impact on Larger Deployments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An :dbcommand:`fsync` lock is only possible on *individual*
:program:`mongod` instances of a
sharded cluster, not on the entire cluster. To back up an entire sharded
cluster, please see :doc:`/administration/backup-sharded-clusters` for
more information.

Alternatives with Journaling
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If your :program:`mongod` has :term:`journaling <journal>` enabled,
please use :ref:`file system or volume/block level snapshot tool <backup-with-journaling>` to create a
backup of the data set and the journal together as a single unit.

Impact on Read Operations
~~~~~~~~~~~~~~~~~~~~~~~~~

After :dbcommand:`fsync` with the ``lock`` option runs on a
:program:`mongod`, all write operations will block until a subsequent
unlock. Read operations *may* also block. As a result, :dbcommand:`fsync`
with lock is not a reliable mechanism for making a :program:`mongod`
instance operate in a read-only mode.

.. important::

   Blocked read operations prevent verification of authentication.
   Such reads are necessary to establish new connections
   to a :program:`mongod` that enforces authorization checks.

.. warning::

   When calling :dbcommand:`fsync` with the ``lock`` option, ensure that
   the connection remains open to allow a subsequent call to
   :method:`db.fsyncUnlock()`.

   Closing the connection may make it difficult to release the lock.

Examples
--------

Run Asynchronously
~~~~~~~~~~~~~~~~~~

The :dbcommand:`fsync` operation is synchronous by default. To run
:dbcommand:`fsync` asynchronously, use the ``async`` field set to
``true``:

.. code-block:: javascript

   { fsync: 1, async: true }

The operation returns immediately. To view the status of the
:dbcommand:`fsync` operation, check the output of
:method:`db.currentOp()`.

Lock ``mongod`` Instance
~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   .. include:: /includes/extracts/wt-fsync-lock-compatibility-command.rst

The primary use of :dbcommand:`fsync` is to lock the :program:`mongod`
instance in order to back up the files within :program:`mongod`\ 's :setting:`~storage.dbPath`.
The operation flushes all data to the storage layer and
blocks all write operations until you unlock the :program:`mongod` instance.

To lock the database, use the ``lock`` field set to ``true``:

.. code-block:: javascript

   { fsync: 1, lock: true }

You may continue to perform read operations on a :program:`mongod` instance that has a
:dbcommand:`fsync` lock. However, after the first write operation all
subsequent read operations wait until you unlock the :program:`mongod` instance.

Unlock ``mongod`` Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~

To unlock the :program:`mongod`, use :method:`db.fsyncUnlock()`:

.. code-block:: javascript

   db.fsyncUnlock();


Check Lock Status
~~~~~~~~~~~~~~~~~

To check the state of the fsync lock, use :method:`db.currentOp()`. Use
the following JavaScript function in the shell to test if :program:`mongod` instance is
currently locked:

.. code-block:: javascript

   serverIsLocked = function () {
                        var co = db.currentOp();
                        if (co && co.fsyncLock) {
                            return true;
                        }
                        return false;
                    }

After loading this function into your :program:`mongo` shell session
call it, with the following syntax:

.. code-block:: javascript

   serverIsLocked()

This function will return ``true`` if the :program:`mongod` instance is
currently locked and ``false`` if the :program:`mongod` is not locked.
