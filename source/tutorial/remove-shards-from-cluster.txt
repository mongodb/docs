============================================
Remove Shards from an Existing Shard Cluster
============================================

.. default-domain:: mongodb

Synopsis
--------

This procedure describes the procedure for migrating data from a
shard safely, when you need to decommission a shard. You may also need
to remove shards as part of hardware reorganization and data
migration.

*Do not* use this procedure to migrate an entire shard cluster to new
hardware. To migrate an entire shard to new hardware, migrate
individual shards as if they were independent replica sets.

.. DOCS-94 will lead to a tutorial about cluster migrations. In the
   mean time the above section will necessarily lack links.

To remove a shard, you will:

- Move :term:`chunks <chunk>` off of the shard.

- Ensure that this shard is not the "primary" shard for any databases
  in the cluster. If it is, move the "primary" status for these
  databases to other shards.

- Remove the shard from the cluster's configuration.

Procedure
---------

Complete this procedure by connecting to any :program:`mongos` in the
cluster using the :program:`mongo` shell.

You can only remove a shard by its shard name. To discover or
confirm the name of a shard, use the :dbcommand:`listShards` command,
:dbcommand:`printShardingStatus` command, or :method:`sh.status()` shell helper.

The example commands in this document remove a shard named ``mongodb0``.

.. note::

   To successfully migrate data from a shard, the :term:`balancer`
   process **must** be active. Check the balancer state using the
   :method:`sh.getBalancerState()` helper in the :program:`mongo`
   shell. For more information, see the section on :ref:`balancer operations
   <sharding-balancing-disable-temporally>`.

Remove Chunks from the Shard
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Start by running the :dbcommand:`removeShard` command. This
begins "draining" chunks from the shard you are removing.

.. code-block:: javascript

   db.runCommand( { removeshard: "mongodb0" } )

This operation returns immediately, with the following response:

.. code-block:: javascript

   { msg : "draining started successfully" , state: "started" , shard :"mongodb0" , ok : 1 }

Depending on your network capacity and the amount of data in your
cluster, this operation can take from a few minutes to
several days to complete.

Check the Status of the Migration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To check the progress of the migration,
run :dbcommand:`removeShard` again at any stage of the
process, as follows:

.. code-block:: javascript

   db.runCommand( { removeshard: "mongodb0" } )

The output resembles the following document:

.. code-block:: javascript

   { msg: "draining ongoing" , state: "ongoing" , remaining: { chunks: 42, dbs : 1 }, ok: 1 }

In the ``remaining`` sub document, a counter displays the remaining number
of chunks that MongoDB must migrate to other shards and the number of
MongoDB databases that have "primary" status on this shard.

Continue checking the status of the `removeshard` command until the
number of chunks remaining is 0. Then proceed to the next step.

Move Unsharded Databases
~~~~~~~~~~~~~~~~~~~~~~~~

Databases with non-sharded collections store those collections on a
single shard known as the "primary" shard for that database. The
following step is necessary only when the shard to remove is
also the "primary" shard for one or more databases.

Issue the following command at the :program:`mongo` shell:

.. code-block:: javascript

   db.runCommand( { movePrimary: "myapp", to: "mongodb1" })

This command migrates all remaining non-sharded data in the
database named ``myapp`` to the shard named ``mongodb1``.

.. warning::

   Do not run the :dbcommand:`movePrimary` until you have *finished*
   draining the shard.

This command will not return until MongoDB completes moving all data,
which may take a long time. The response from this command will
resemble the following:

.. code-block:: javascript

   { "primary" : "mongodb1", "ok" : 1 }

Finalize the Migration
~~~~~~~~~~~~~~~~~~~~~~

Run :dbcommand:`removeShard` again to clean up all metadata
information and finalize the removal, as follows:

.. code-block:: javascript

   db.runCommand( { removeshard: "mongodb0" } )

A success message appears at completion:

.. code-block:: javascript

   { msg: "remove shard completed successfully" , stage: "completed", host: "mongodb0", ok : 1 }

When the value of "state" is "completed", you may safely stop the
``mongodb0`` shard.
