.. meta::
   :robots: noindex, nosnippet

.. _cpp-client-quick-start:
.. _cpp-client-quick-start-with-sync:

=====================
Quick Start - C++ SDK
=====================

.. meta:: 
   :keywords: code example
   :description: Learn how to quickly get started with Atlas Device SDK for C++.

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This Quick Start demonstrates how to use Realm with the Realm C++ SDK. 
Before you begin, ensure you have :ref:`Installed the C++ SDK <cpp-install>`.

Import Realm
------------

Make the Realm C++ SDK available in your code by including the
``cpprealm/sdk.hpp`` header in the translation unit where you want to use it:

.. literalinclude:: /examples/generated/cpp/quick-start.snippet.include-header.cpp
   :language: cpp

Define Your Object Model
------------------------

For a local-only realm you can define your :ref:`object model
<cpp-object-models>` directly in code. In this quick start, you can remove
``ownerId`` unless you want to add the optional Device Sync.

.. literalinclude:: /examples/generated/cpp/quick-start.snippet.model.cpp
   :language: cpp

Open a Realm
------------

When you open a realm, you must specify a :cpp-sdk:`db_config 
<structrealm_1_1internal_1_1bridge_1_1realm_1_1config.html>`. You can 
optionally open a realm at a specific path, or provide a ``sync_config`` 
to open a synced realm.

.. literalinclude:: /examples/generated/cpp/quick-start.snippet.realm-open.cpp
   :language: cpp

For more information, see: :ref:`Configure and Open a Realm 
<cpp-configure-and-open-a-realm>`.

Create, Read, Update, and Delete Objects
----------------------------------------

Once you have opened a realm, you can modify it and its :ref:`objects 
<cpp-realm-objects>` in a :ref:`write transaction <cpp-write-transactions>` 
block.

To instantiate a new Todo object and add it to the realm in a write block:

.. literalinclude:: /examples/generated/cpp/quick-start.snippet.create-todo.cpp
   :language: cpp

You can retrieve a live :ref:`results collection <cpp-read-operations>` of 
all todos in the realm:

.. literalinclude:: /examples/generated/cpp/quick-start.snippet.get-all-todos.cpp
   :language: cpp

You can also filter that collection using :ref:`where <cpp-client-query-engine>`:

.. literalinclude:: /examples/generated/cpp/quick-start.snippet.filter.cpp
   :language: cpp

To modify a todo, update its properties in a write transaction block:

.. literalinclude:: /examples/generated/cpp/quick-start.snippet.modify-write-block.cpp
   :language: cpp

Finally, you can delete a todo:

.. literalinclude:: /examples/generated/cpp/quick-start.snippet.delete.cpp
   :language: cpp

Watch for Changes
-----------------

You can watch an :ref:`object for changes
<cpp-react-to-changes>` with the ``observe`` method.

.. literalinclude:: /examples/generated/cpp/quick-start.snippet.watch-for-changes.cpp
   :language: cpp

Close a Realm
-------------

To close a realm and release all underlying resources, call ``db::close()``.
Closing the database invalidates any remaining objects.

.. literalinclude:: /examples/generated/cpp/close-realm.snippet.close-realm.cpp
   :language: cpp

Add Device Sync (Optional)
--------------------------

If you want to sync Realm data across devices, you can set up an Atlas 
App Services App and enable Device Sync. For more information on what 
you can do with App Services, see: :ref:`cpp-application-services`.

Prerequisites
~~~~~~~~~~~~~

Before you can sync Realm data, you must:

- :ref:`Create an App Services App <create-a-realm-app>`
- :ref:`Enable anonymous authentication <anonymous-authentication>`
- :ref:`Enable Flexible Sync <enable-flexible-sync>` with  :ref:`Development Mode 
  <development-mode>` toggled to ``On``. This example requires an ``ownerId`` 
  field in your Device Sync :guilabel:`Queryable Fields` section.

.. _cpp-quick-start-init-app:

Initialize the App
~~~~~~~~~~~~~~~~~~

.. include:: /includes/access-app-id.rst

.. literalinclude:: /examples/generated/cpp/quick-start.snippet.connect-to-backend.cpp
   :language: cpp

.. _cpp-quick-start-authenticate:

Authenticate a User
~~~~~~~~~~~~~~~~~~~

In this quick start, you use :ref:`anonymous authentication <anonymous-authentication>`
to log in users without requiring them to provide any identifying information.
After authenticating the user, you can open a realm for that user.

.. literalinclude:: /examples/generated/cpp/quick-start.snippet.authenticate-user.cpp
   :language: cpp

The Realm C++ SDK provides many additional ways to authenticate, register, and link users.
For other authentication providers, see: :ref:`cpp-authenticate-users`

Open a Realm
~~~~~~~~~~~~

Once you have enabled Device Sync and authenticated a user, you can create
a :cpp-sdk:`sync_configuration 
<structrealm_1_1internal_1_1bridge_1_1realm_1_1sync__config.html>` object and 
open the realm. You can then add a :ref:`Flexible Sync
subscription <cpp-manage-flexible-sync-subscriptions>` that determines 
what data the realm can read and write.

.. literalinclude:: /examples/generated/cpp/quick-start.snippet.open-synced-realm.cpp
   :language: cpp

Read, Write, and React to Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The syntax to :ref:`read <cpp-crud-read>`, :ref:`write
<cpp-write-transactions>`, and :ref:`watch for changes <cpp-react-to-changes>` on a
synced realm is identical to the syntax for non-synced realms above. 

The only difference here is that this example stores the ``user.identifier()`` 
of the logged-in user in the ``ownerId`` property of the ``Todo`` item. 
This lets us query for only the user's todos in the subscription, and set 
Sync permissions to :guilabel:`Users can only read and write their own data`. 

For more information about Sync permissions, refer to :ref:`sync-permissions`.

.. literalinclude:: /examples/generated/cpp/quick-start.snippet.write-to-synced-realm.cpp
   :language: cpp

While you work with local data, a background thread efficiently integrates, 
uploads, and downloads changesets. 

.. include:: /includes/sync-memory-performance.rst
