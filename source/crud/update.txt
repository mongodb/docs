.. _pymongo-write-update:
.. _pymongo-update:

================
Update Documents
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: modify, change, bulk, code example

Overview
--------

In this guide, you can learn how to use {+driver-short+} to update
documents in a MongoDB collection by using the ``update_one()`` or
``update_many()`` methods.

.. .. tip:: Interactive Lab
   
..    This page includes a short interactive lab that demonstrates how to
..    modify data by using the ``update_many()`` method. You can complete this
..    lab directly in your browser window without installing MongoDB or a code editor.

..    To start the lab, click the :guilabel:`Open Interactive Tutorial` button at the
..    top of the page. To expand the lab to a full-screen format, click the
..    full-screen button (:guilabel:`â›¶`) in the top-right corner of the lab pane.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``sample_restaurants.restaurants`` collection
from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
free MongoDB Atlas cluster and load the sample datasets, see the
:ref:`<pymongo-get-started>` tutorial.

Update Operations
-----------------

You can perform update operations in MongoDB by using the following methods:

- ``update_one()``, which updates *the first document* that matches the search criteria
- ``update_many()``, which updates *all documents* that match the search criteria

Each update method requires the following parameters:

- A **query filter** document, which determines which documents to update. For
  more information about query filters, see the 
  :manual:`Query Filter Documents section </core/document/#query-filter-documents>` in
  the {+mdb-server+} manual.
- An **update** document, which specifies the **update operator** (the kind of update to
  perform) and the fields and values that should change. For a list of update
  operators and their usage, see the 
  :manual:`Field Update Operators guide page</reference/operator/update-field/>`
  in the {+mdb-server+} manual.

Update One Document
~~~~~~~~~~~~~~~~~~~

The following example uses the ``update_one()`` method to update the ``name`` value of a
document named ``"Bagels N Buns"`` in the ``restaurants`` collection. Select the
:guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. literalinclude:: /includes/write/update.py
         :start-after: start-update-one
         :end-before: end-update-one
         :language: python
         :copyable:
   
   .. tab:: Asynchronous
      :tabid: async

      .. literalinclude:: /includes/write/update-async.py
         :start-after: start-update-one
         :end-before: end-update-one
         :language: python
         :copyable:

Update Many Documents
~~~~~~~~~~~~~~~~~~~~~

The following example uses the ``update_many()`` method to update all documents
with a ``cuisine`` value of ``"Pizza"``. After the update, the documents have a
``cuisine`` value of ``"Pasta"``. Select the :guilabel:`Synchronous` or :guilabel:`Asynchronous`
tab to see the corresponding code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. literalinclude:: /includes/write/update.py
         :start-after: start-update-many
         :end-before: end-update-many
         :language: python
         :copyable:

   .. tab:: Asynchronous
      :tabid: async

      .. literalinclude:: /includes/write/update-async.py
         :start-after: start-update-many
         :end-before: end-update-many
         :language: python
         :copyable:

Customize the Update Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``update_one()`` and ``update_many()`` methods optionally accept additional
parameters, which represent options you can use to configure the update
operation. If you don't specify any additional options, the driver does not customize
the update operation.

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``upsert``
     - | Specifies whether the update operation performs an upsert operation if no 
         documents match the query filter. For more information, see the :manual:`upsert
         statement </reference/command/update/#std-label-update-command-upsert>`
         in the {+mdb-server+} manual.
       | Defaults to ``False``

   * - ``bypass_document_validation``
     - | Specifies whether the update operation bypasses document validation. This lets you 
         update documents that don't meet the schema validation requirements, if any 
         exist. For more information about schema validation, see :manual:`Schema
         Validation </core/schema-validation/#schema-validation>` in the MongoDB
         Server manual.
       | Defaults to ``False``.

   * - ``collation``
     - | Specifies the kind of language collation to use when sorting
         results. See :ref:`pymongo-update-collation` for more information. 

   * - ``array_filters``
     - | A list of filters that specifies which array elements an update applies
         to.

   * - ``hint``
     - | Gets or sets the index to scan for documents. 
         For more information, see the :manual:`hint statement </reference/command/update/#std-label-update-command-hint>`
         in the {+mdb-server+} manual.

   * - ``session``
     - | An instance of ``ClientSession``.

   * - ``let``
     - | A Map of parameter names and values. Values must be constant or closed
         expressions that don't reference document fields. For more information,
         see the :manual:`let statement
         </reference/command/update/#std-label-update-let-syntax>` in the
         {+mdb-server+} manual.

   * - ``comment``
     - | A comment to attach to the operation. For more information, see the :manual:`insert command
         fields </reference/command/insert/#command-fields>` guide in the
         {+mdb-server+} manual for more information.

The following code uses the ``update_many()`` method to find all documents where the 
``borough`` field has the value ``"Manhattan"``. It then updates the ``borough``
value in these documents to ``"Manhattan (north)"``. Because the ``upsert`` option is
set to ``True``, {+driver-short+} inserts a new document if the query filter doesn't 
match any existing documents. Select the :guilabel:`Synchronous` or :guilabel:`Asynchronous`
tab to see the corresponding code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. literalinclude:: /includes/write/update.py
         :start-after: start-update-options
         :end-before: end-update-options
         :language: python
         :copyable:

   .. tab:: Asynchronous
      :tabid: async

      .. literalinclude:: /includes/write/update-async.py
         :start-after: start-update-options
         :end-before: end-update-options
         :language: python
         :copyable:

.. _pymongo-update-collation:

Collation
`````````

When you perform an update operation, you can specify a **collation** for the driver to
use.

.. include:: /includes/collation-description.rst

The following example performs the same update operation as the previous example,
but with a default collation of ``fr_CA``. Select the :guilabel:`Synchronous` or
:guilabel:`Asynchronous` tab to see the corresponding code:

.. tabs::

   .. tab:: Synchronous
     :tabid: sync

     .. literalinclude:: /includes/write/update.py
        :start-after: start-update-many-collation
        :end-before: end-update-many-collation
        :language: python
        :copyable:

   .. tab:: Asynchronous
      :tabid: async

      .. literalinclude:: /includes/write/update-async.py
         :start-after: start-update-many-collation
         :end-before: end-update-many-collation
         :language: python
         :copyable:

.. include:: /includes/collation-override-note.rst

Return Value
~~~~~~~~~~~~

The ``update_one()`` and ``update_many()`` methods each return an ``UpdateResult`` 
object. The ``UpdateResult`` type contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``matched_count``
     - | The number of documents that matched the query filter, regardless of
         how many were updated.

   * - ``modified_count``
     - | The number of documents modified by the update operation. If an updated
         document is identical to the original, it is not included in this
         count.
         
   * - ``raw_result``
     - | The raw result document returned by the server.

   * - ``upserted_id``
     - | The ID of the document that was upserted in the database, if the driver
         performed an upsert. Otherwise ``None``.

Additional Information 
----------------------

To learn more about creating query filters, see the :ref:`pymongo-specify-query` guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `update_one() <{+api-root+}pymongo/collection.html#pymongo.collection.Collection.update_one>`__
- `update_many() <{+api-root+}pymongo/collection.html#pymongo.collection.Collection.update_many>`__
- `UpdateResult <{+api-root+}pymongo/results.html#pymongo.results.UpdateResult>`__

.. .. _pymongo-update-instruqt-lab:

.. .. instruqt:: /mongodb-docs/tracks/update-a-document---c-net-driver?token=em_69t_l-j0BC_en7Uy
..    :title: update_many() Lesson
..    :drawer: