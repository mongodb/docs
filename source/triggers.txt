.. _triggers:

--------
Triggers
--------

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :caption: Reference
   :titlesonly:
   :includehidden:
   :hidden:

   Trigger Configuration </triggers/trigger-configuration>
   Send Trigger Events to AWS EventBridge </triggers/eventbridge>
   CRON Expressions </triggers/cron-expressions>
   External Dependencies </triggers/external-dependencies>

**Triggers** allow you to execute server-side logic in response
to database events or according to a schedule. |service| provides
two kinds of Triggers: **Database** and **Scheduled** triggers.

.. note::

   Triggers are only available for MongoDB |service| clusters that are
   running MongoDB version 3.6 or newer.

.. figure:: /images/triggers-arch.png
   :alt: Triggers in the MongoDB architecture
   :width: 750px
   :lightbox:

.. _database-triggers:

Database Triggers
~~~~~~~~~~~~~~~~~

Database triggers allow you to execute server-side logic whenever a
document is added, updated, or removed in a linked cluster.

Use database triggers to implement complex data interactions,
including updating information in one document when a related document
changes or interacting with an :realm:`external service </services>`
when a new document is inserted.

Database triggers use MongoDB :manual:`change streams </changeStreams>`
to listen for changes in watched collections and map them to
:ref:`database events <database-events>`.

.. note::

   MongoDB Atlas performs a ``replace`` command rather than an
   ``update`` command when executing an update via :guilabel:`Data
   Explorer`. Database triggers will only recognize this update via
   :guilabel:`Data Explorer` if you have marked the :guilabel:`replace`
   :ref:`database event <database-events>` for the trigger.

.. _scheduled-triggers:

Scheduled Triggers
~~~~~~~~~~~~~~~~~~

Scheduled triggers allow you to execute server-side logic on a
regular schedule that you define using
:doc:`CRON expressions </triggers/cron-expressions>`.
Use scheduled triggers to do work that happens on a periodic
basis, such as updating a document every minute, generating a nightly
report, or sending an automated weekly email newsletter.


.. _server-side-logic:

MongoDB Realm Functions Provide Server-side Logic
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Triggers execute a :realm:`{+MongoDB-Realm+} Function </functions>`
that you specify. Each trigger is associated with exactly one
{+MongoDB-Realm+} Function.

When you create a trigger, you will see a Function editor where you can
write the JavaScript code to be executed by the trigger. This Function
exists in a shared :realm:`{+MongoDB-Realm+} </>` app called
:guilabel:`Triggers_{+Realm+}App`, which |service| creates
automatically for you.

To find this app, click :guilabel:`{+MongoDB-Realm+}` in the
navigation and select the :guilabel:`Triggers_{+Realm+}App` app:

.. figure:: /images/triggers-realmapp.png
   :alt: Click MongoDB Realm in the navigation and select the Triggers_RealmApp app
   :width: 750px
   :lightbox:

.. include:: /includes/admonitions/notes/note-trigger-names.rst

Create a Trigger
~~~~~~~~~~~~~~~~

To create a new database or scheduled trigger:

1. Click the :guilabel:`Atlas` tab in the top navigation of your screen
   if you have not already navigated to Atlas.

2. Click :guilabel:`Triggers` in the left-hand navigation.

3. On the :guilabel:`Overview` tab of the :guilabel:`Triggers` page,
   click :guilabel:`Add Trigger` to open the trigger configuration page.

4. Enter :ref:`configuration values <database-trigger-configuration>`
   for the trigger and click :guilabel:`Save` at the bottom of
   the page.

.. figure:: /images/realm-database-trigger-config.png
   :alt: On the Overview tab of the Triggers page, click Add Trigger.
   :width: 750px
   :lightbox:


Restart a Suspended Trigger
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Triggers may enter a :guilabel:`suspended` state in response to an
event that prevents the trigger's change stream from continuing, such
as a network disruption. When a trigger is suspended, it does not
receive change events and will not fire.

.. note::

   In the event of a failed trigger, {+MongoDB-Realm+} sends an email
   notification to the project owner, alerting them of the issue.

To restart a suspended trigger:

.. include:: /includes/steps/restart-a-trigger.rst

External Dependencies
~~~~~~~~~~~~~~~~~~~~~

An external dependency is an external library that includes logic you'd
rather not implement yourself, such as string parsing, convenience
functions for array manipulations, and data structure or algorithm
implementations.

You can upload external dependencies from the `npm repository
<https://www.npmjs.com/>`_ to {+MongoDB-Realm+} and then import those libraries
into your functions using standard JavaScript module syntax. To use
external dependencies in the functions run by your triggers, see
:ref:`External Dependencies <external-dependencies>`.


Configure a Trigger
~~~~~~~~~~~~~~~~~~~

To configure a Database trigger, see
:ref:`Database Trigger Configuration <database-trigger-configuration>`.

To configure a Scheduled trigger, see
:ref:`Scheduled Trigger Configuration <scheduled-trigger-configuration>`.
