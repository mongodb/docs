.. _vsce-playgrounds:

==================================
Explore Your Data with Playgrounds
==================================

.. meta::
   :description: Explore and prototype MongoDB queries and commands using Playgrounds in VS Code, with features like syntax highlighting, autocomplete, and result editing.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB Playgrounds are JavaScript environments where you can prototype
queries, aggregations, and MongoDB commands with helpful syntax
highlighting.

MongoDB Playgrounds provide intelligent autocomplete for:

- The Mongo Shell |api|
- MongoDB keywords, operators, aggregation stages, database, collection, 
  and field names.
- Any JavaScript variables or keywords.

You can save playgrounds in your workspace and use them to
document how your application interacts with MongoDB. |vsce| interprets
files with the ``.mongodb.js`` extension as playgrounds.

Starting in version ``0.11.0`` the default file extension
for MongoDB Playgrounds files is ``.mongodb.js``. Previous versions 
of MongoDB Playgrounds use the default file extension 
``.mongodb``. MongoDB Playgrounds support both file extensions.

.. include:: /includes/admonitions/note-playgrounds.rst

|vsce| splits your Playground window to display your
:guilabel:`Playground Result` in the right-side pane. You can perform
one of two actions on the result depending on the query you ran in
the Playground.

- You may save *any* :guilabel:`Playground Result` to a file.

- You may edit any |json| document that |vsce| returns in the
  :guilabel:`Playground Result` from a
  :doc:`findOne or find query </read-document-playground>`.

  |vsce| returns these results in |json| format with |json| syntax
  highlighting. Each |json| document has an :guilabel:`Edit Document`
  link at its top.

  1. Click :guilabel:`Edit Document` at the top of the document you
     want to edit.

     |vsce| opens this one |json| document in a new window as an
     editable document.

  2. Make any changes you need.

  3. Press :kbd:`Ctrl+S` (:kbd:`Cmd+S` on macOS) to save those changes
     in the database.


Prerequisite
------------

To run a playground, you must connect to a MongoDB deployment using
|vsce|. To learn how to connect to a deployment, see either:

- :ref:`vsce-connect`

- :ref:`playground-connect-to-deployment`

Open a Playground
-----------------

Create a New Playground
~~~~~~~~~~~~~~~~~~~~~~~

You can create a new playground from the :guilabel:`Playgrounds`
panel, the |vsce| *Overview* page, or the |vscode| Command Pallette.

.. tabs::

   .. tab:: Playgrounds Panel
      :tabid: playground-panel

      If you have no saved playgrounds in your |vscode-short| workspace,
      in the :guilabel:`Playgrounds` panel of |vsce|, click
      :guilabel:`Create New Playground`.

      .. figure:: /images/vsce-create-new-playground.png
         :figwidth: 400px
         :alt: Image of Create New Playground button

      If you have saved playgrounds in your |vscode| workspace, click
      the :guilabel:`...` menu icon of the :guilabel:`Playgrounds` panel
      and select :guilabel:`Create MongoDB Playground`.

   .. tab:: Overview Page 
      :tabid: mdboverview

      1. In |vscode-short|, press one of the following key combinations:

         - :guilabel:`Control + Shift + P` on Windows or Linux.
         - :guilabel:`Command + Shift + P` on macOS.

         The :guilabel:`Command Palette` provides quick access to 
         commands and keyboard shortcuts.
        
      #. Find and run the :guilabel:`MongoDB: Open Overview Page` 
         command.

         .. include:: /includes/admonitions/tip-mongodb-command-palette.rst

      #. Click :guilabel:`Create Playground` to open a |vsce| 
         playground pre-configured with a few commands.

   .. tab:: VSCode Command Palette
      :tabid: command-palette

      .. include:: /includes/steps/open-new-playground.rst

.. note::

   .. include:: /includes/playground-require-copilot.rst

Open a Saved Playground
~~~~~~~~~~~~~~~~~~~~~~~

If you have files in your |vscode-short| workspace with the ``.mongodb.js`` 
or ``.mongodb`` extension, |vsce| displays these files in the 
:guilabel:`Playgrounds` panel.

Double click a file to open that playground.

Run a Playground
----------------

To run a playground, click the :guilabel:`Play Button` in VS Code's top
navigation bar. Your playground runs against the deployment specified in
your :ref:`active connection <vsce-connect>`.

.. _playground-connect-to-deployment:

Connect to a Deployment from a Playground
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If |vsce| is not connected to a MongoDB deployment, you can
specify a connection string for the deployment you want to run your
playground against.

If you have a playground file open in |vscode-short| and do not have
an active connection, |vsce| displays
:guilabel:`Click here to add connection` at the top of your playground.

.. procedure::
   :style: normal
   
   .. step:: Select :guilabel:`Click here to add connection` 

      After you click :guilabel:`Click here to add connection`, |vsce| displays 
      the connection string drop-down menu.

      .. figure:: /images/vsce-playground-add-connection-btn.png
         :figwidth: 700px
         :alt: Link to add connection from playground

   .. step:: Click :guilabel:`Add new connection`

      In the connection string drop-down menu, select 
      :guilabel:`Add new connection` to enter a new connection string. If you 
      have previously connected to the playground with another deployment, the 
      connection string will appear as an option under the drop-down menu. 

   .. step:: Enter your connection string
      
      Enter the :manual:`connection string </reference/connection-string/>` to 
      connect to your deployment.

      .. note:: 
         
         If the connection string specifies a database the playground runs 
         against that database by default. To switch databases,   
         call ``use('<database_name>')``.

         If you are connected to a default database, the playground 
         autocompletes only for collection names available on that 
         database. 
         
   .. step:: Press Enter

      After you enter your connection string, a `CodeLens <https://code.visualstudio.com/blogs/2017/02/12/code-lens-roundup>`_
      replaces the :guilabel:`Click here to add connection` link. The 
      CodeLens includes information on the connected deployment and, if 
      applicable, the current database. 
      
   .. step:: Run your playground

.. note::

   When you connect to a deployment through the playground connection
   dialog, that connection is added to your |vsce|
   :guilabel:`Connections` list.

Run Selected Lines of a Playground
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you select a section of your playground, you may optionally run only
the selected portion. You may run either a single line or multiple lines
of your playground.

|vsce| shows the :guilabel:`Run Selected Lines from Playground` link
immediately above your selected section. Click this link to test and
troubleshoot specific lines or sections of your playground.

Code Formatting and Linting Tools
---------------------------------

MongoDB Playgrounds are JavaScript files and can work with popular
|vscode-short| formatting and linting extensions like
`Prettier <https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode>`_ 
and `ESLint <https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint>`_.

If you use a code formatting extension, MongoDB Playgrounds 
suggest autocompletion and linting hints for:

- System variables such as ``$$ROOT`` and ``$$NOW``
- ``use`` and ``db`` commands
- Collection names, in bracketed notation such as ``db["collection"].find({})``
- Alternative commands for shell commands not supported in MongoDB Playgrounds 
  such as ``show users``

For a full list of autocompletion and linting improvements, see the 
`v0.11.1 release notes <https://github.com/mongodb-js/vscode/releases/tag/v0.11.1>`_.

Log to Console from a Playground
--------------------------------

|vsce| supports the following methods to log messages to the console.
Logged messages appear in the :guilabel:`Output` panel in VSCode.

- ``console.log()``
- ``print()``
- ``printjson()``

Logging to the console can be useful to track the output of certain
commands in your playground, such as results after a particular query or
aggregation.

Tutorials
---------

- To learn how to use MongoDB Playgrounds for CRUD operations, see
  :ref:`vsce-crud`.

- To learn how to use MongoDB Playgrounds to run aggregation
  pipelines, see :ref:`vsce-aggregation`.

Consideration for Authentication
--------------------------------

.. include:: /includes/fact-required-roles.rst

.. toctree::
   :titlesonly:

   Create Databases & Collections </playground-databases>
   Perform CRUD Operations </crud-ops>
   Run Aggregation Pipelines </run-agg-pipelines>
   Enable Autocomplete </enable-autocomplete-for-string-literals>
   Export to Language </export-to-language>
   Test Driver Queries </copilot-export-test>
   Use require() </require-playgrounds>
