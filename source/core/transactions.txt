============
Transactions
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. meta::
   :description: MongoDB transactions, MongoDB multi-document transactions, MongoDB multi-statement transactions, java transaction examples, python transaction examples, node transaction examples, php transaction examples, scala transaction examples, csharp transaction examples, perl transaction examples, ruby transaction examples
   :keywords: MongoDB, transactions, MongoDB multi-document transactions, MongoDB multi-statement transactions, java transaction examples, python transaction examples, node transaction examples, php transaction examples, scala transaction examples, csharp transaction examples, perl transaction examples, ruby transaction examples

In MongoDB, an operation on a single document is atomic. Because you can
use embedded documents and arrays to capture relationships between data
in a single document structure instead of normalizing across multiple
documents and collections, this single-document atomicity obviates the
need for multi-document transactions for many practical use cases.

For situations that require atomicity of reads and writes to multiple
documents (in a single or multiple collections):

- **Starting in version 4.0**, MongoDB provides the ability to perform
  multi-document transactions for replica sets.

- **Starting in version 4.2**, MongoDB provides the ability to perform
  multi-document transactions for sharded clusters. For transactions on
  MongoDB 4.2 deployments(replica sets and sharded clusters), clients require MongoDB
  drivers updated for MongoDB 4.2.

  .. include:: /includes/extracts/transactions-beta.rst

Multi-document transactions can be used across multiple
operations, collections, databases, documents, and shards.

.. include:: /includes/extracts/transactions-usage.rst

Transactions API
----------------

The API for using transactions is the same whether for a replica set or
a sharded cluster.

The following example highlights the key components
of the transactions API:

.. tabs::

   tabs:

     - id: pythontxn
       name: Python

       content: |

          .. note::

             The example uses the new callback API for working with
             transactions. The new callback API incorporates retry
             logic for ``TransientTransactionError`` or
             ``UnknownTransactionCommitResult`` commit errors.

          .. code-block:: python

             # For a replica set, include the replica set name and a seedlist of the members in the URI string; e.g.
             # uriString = 'mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017/admin?replicaSet=myRepl'
             # For a sharded cluster, connect to the mongos instances; e.g.
             # uriString = 'mongodb://mongos0.example.com:27017,mongos1.example.com:27017/admin'

             client = MongoClient(uriString)
             
             my_write_concern_majority = WriteConcern('majority', wtimeout=1000)

             # Prereq: Create collections. CRUD operations in transactions must be on existing collections.

             client.get_database(
                 'mydb1',
                 write_concern=my_write_concern_majority).foo.insert_one({'abc': 0})
             client.get_database(
                 'mydb2',
                 write_concern=my_write_concern_majority).bar.insert_one({'xyz': 0})

             def callback(my_session):
                 collection_one = my_session.client.mydb1.foo
                 collection_two = my_session.client.mydb2.bar
                 collection_one.insert_one({'abc': 1}, session=my_session)
                 collection_two.insert_one({'xyz': 999}, session=my_session)

             with client.start_session() as session:
                 session.with_transaction(callback,
                                          read_concern=ReadConcern('local'),
                                          write_concern=my_write_concern_majority,
                                          read_preference=ReadPreference.PRIMARY)


     - id: javatxn
       name: Java

       content: |

          .. note::

             The example uses the new callback API for working with
             transactions. The new callback API incorporates retry
             logic for ``TransientTransactionError`` or
             ``UnknownTransactionCommitResult`` commit errors.

          .. code-block:: java

             /*
               For a replica set, include the replica set name and a seedlist of the members in the URI string; e.g.
               String uri = "mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017/admin?replicaSet=myRepl";
               For a sharded cluster, connect to the mongos instances; e.g.
               String uri = "mongodb://mongos0.example.com:27017,mongos1.example.com:27017:27017/admin";
              */

             final MongoClient client = MongoClients.create(uri);

             /*
                 Prereq: Create collections. CRUD operations in transactions must be on existing collections.
              */

             client.getDatabase("mydb1").getCollection("foo")
                     .withWriteConcern(WriteConcern.MAJORITY).insertOne( new Document("abc", 0));
             client.getDatabase("mydb2").getCollection("bar")
                     .withWriteConcern(WriteConcern.MAJORITY).insertOne( new Document("xyz", 0));

             final ClientSession clientSession = client.startSession();

             TransactionOptions txnOptions = TransactionOptions.builder()
                     .readPreference(ReadPreference.primary())
                     .readConcern(ReadConcern.LOCAL)
                     .writeConcern(WriteConcern.MAJORITY)
                     .build();

             TransactionBody txnBody = new TransactionBody<String>() {
                 public String execute() {
                     MongoCollection<Document> coll1 = client.getDatabase("mydb1").getCollection("foo");
                     MongoCollection<Document> coll2 = client.getDatabase("mydb2").getCollection("bar");

                     coll1.insertOne(new Document("abc", 1));
                     coll2.insertOne(new Document("xyz", 999));

                     return "Inserted into collections in different databases";
                 }
             };
             try {
                 clientSession.withTransaction(txnOptions, txnBody);
             } catch (RuntimeException e) {
                 // some error handling
             } finally {
                 clientSession.close();
             }

     - id: mongoshell
       name: mongo Shell

       content: |

           .. note::

              The :binary:`~bin.mongo` shell example omits retry logic
              and robust error handling for simplicity's sake. For a
              more practical example of incorporating transactions in
              applications, see :ref:`transactions-retry` instead.

           .. code-block:: javascript
              :copyable: false

              // Prereq: Create collections. CRUD operations in transactions must be on existing collections.
              db.getSiblingDB("mydb1").foo.insert( {abc: 0}, { writeConcern: { w: "majority", wtimeout: 2000 } } );
              db.getSiblingDB("mydb2").bar.insert( {xyz: 0}, { writeConcern: { w: "majority", wtimeout: 2000 } } );
              
              // Start a session.
              session = db.getMongo().startSession( { readPreference: { mode: "primary" } } );

              coll1 = session.getDatabase("mydb1").foo;
              coll2 = session.getDatabase("mydb2").bar;

              // Start a transaction
              session.startTransaction( { readConcern: { level: "local" }, writeConcern: { w: "majority" } } );

              // Operations inside the transaction
              try {
                 coll1.insertOne( { abc: 1 } );
                 coll2.insertOne( { xyz: 999 } );
              } catch (error) {
                 // Abort transaction on error
                 session.abortTransaction();
                 throw error;
              }

              // Commit the transaction using write concern set at transaction start
              session.commitTransaction();

              session.endSession();

.. seealso::

   - :ref:`transactions-read-concern`
   - :ref:`transactions-read-preference`
   - :ref:`transactions-write-concern`

Transactions and Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~

- Transactions are associated with a session; i.e. you start a
  transaction for a session.

- At any given time, you can have at most one open transaction for a
  session.

- When using the drivers, each operation in the transaction must be
  associated with the session. Depending on the driver, the new
  callback API either requires you to explicitly pass the session to
  each operation or uses lexical scoping to implicitly pass the session
  to each operation for you. Refer to your driver specific
  documentation for details.

- If a session ends and it has an open transaction, the transaction
  aborts.

.. _transactions-drivers:

Transactions and MongoDB Drivers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

|arrow| *For transactions on MongoDB 4.2 deployments*, clients require
MongoDB drivers updated for MongoDB 4.2. 

.. topic:: Sharded Transactions and MongoDB 4.0 drivers

   On sharded clusters with multiple :binary:`~bin.mongos` instances,
   performing transactions with drivers updated for MongoDB 4.0
   (instead of MongoDB 4.2) will fail and can result in errors,
   including:

   .. note::

      Your driver may return a different error. Refer to your driver's
      documentation for details.

   .. list-table::
      :header-rows: 1
      :widths: 20 80
   
      * - Error Code
        - Error Message
   
      * - 251
        - ``cannot continue txnId -1 for session ... with txnId 1``

      * - 50940
        - ``cannot commit with no participants``


|arrow| *For transactions on MongoDB 4.0 replica sets*, clients require
MongoDB drivers updated for MongoDB 4.0 or later.

.. include:: /includes/list-4.0-drivers.rst

Transactions and the ``mongo`` Shell
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following :binary:`~bin.mongo` shell methods are available for
transactions:

- :method:`Session.startTransaction()`

- :method:`Session.commitTransaction()`

- :method:`Session.abortTransaction()`

Transactions and Atomicity
--------------------------

Multi-document transactions are atomic (i.e. provide an
"all-or-nothing" proposition)

- When a transaction commits, all data changes made in the transaction
  are saved and visible outside the transaction. Until a transaction
  commits, the data changes made in the transaction are not visible
  outside the transaction.

- When a transaction aborts, all data changes made in the transaction
  are discarded without ever becoming visible. For example, if any
  operation in the transaction fails, the transaction aborts and all
  data changes made in the transaction are discarded without ever
  becoming visible.

.. _transactions-operations:

Transactions and Operations
---------------------------

Multi-document transactions can be used across multiple
operations, collections, databases, and documents.

For transactions:

.. include:: /includes/extracts/transactions-operations-crud.rst

Operations that affect the database catalog, such as creating or
dropping a collection or an index, are not allowed in multi-document
transactions. For example, a multi-document transaction cannot include
an insert operation that would result in the creation of a new
collection. See :ref:`transactions-ops-restricted`.

.. include:: /includes/extracts/transactions-operations-catalog-tip.rst

.. seealso::

   - :doc:`Transactions and Operations Reference </core/transactions-operations>`

.. _transactions-ops-count:

Count Operation
~~~~~~~~~~~~~~~

To perform a count operation within a transaction, use the
:pipeline:`$count` aggregation stage or the :pipeline:`$group` (with a
:group:`$sum` expression) aggregation stage.

MongoDB drivers compatible with the 4.0 features provide a
collection-level API ``countDocuments(filter, options)`` as a helper
method that uses the :pipeline:`$group` with a :group:`$sum` expression
to perform a count. The 4.0 drivers have deprecated the ``count()`` API.

Starting in MongoDB 4.0.3, the :binary:`~bin.mongo` shell provides the
:method:`db.collection.countDocuments()` helper method that uses the
:pipeline:`$group` with a :group:`$sum` expression to perform a count.

.. _transactions-ops-info:

Informational Operations
~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-operations-restrictions-info.rst

.. _transactions-ops-restricted:

Restricted Operations
~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-operations-restrictions.rst

.. seealso::

   - :ref:`txn-prod-considerations-ddl`

   - :doc:`Transactions and Operations Reference </core/transactions-operations>`


.. _transaction-options:

Read Concern/Write Concern/Read Preference
------------------------------------------

.. _transactions-read-preference:

Transactions and Read Preference
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Operations in a transaction use the transaction-level :doc:`read
preference </reference/read-preference>`.

Using the drivers, you can set the transaction-level :doc:`read
preference </reference/read-preference>` at the transaction start:

- If the transaction-level read preference is unset, the transaction
  uses the session-level read preference.

- If transaction-level and the session-level read preference are unset,
  the transaction uses the client-level read preference. By default,
  the client-level read preference is :readmode:`primary`.

.. include:: /includes/extracts/transactions-read-pref.rst

.. _transactions-read-concern:

Transactions and Read Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Operations in a transaction use the transaction-level :doc:`read
concern </reference/read-concern>`. That is, any read concern set at
the collection and database level is ignored inside the transaction.

You can set the transaction-level :doc:`read concern
</reference/read-concern>` at the transaction start.

- If the transaction-level read concern is unset, the transaction-level
  read concern defaults to the session-level read concern.

- If transaction-level and the session-level read concern are unset,
  the transaction-level read concern defaults to the client-level read
  concern. By default, client-level read concern is
  :readconcern:`"local"` for reads against the primary. See also
  :ref:`transactions-read-preference`.

Multi-document transactions support the following read concern levels:

``"local"``
```````````

.. container::

   - Read concern :readconcern:`"local"` returns the most recent data
     available from the node but can be rolled back.

   - For transactions on sharded cluster, :readconcern:`"local"` read
     concern cannot guarantee that the data is from the same snapshot
     view across the shards. If snapshot isolation is required, use
     :ref:`transactions-read-concern-snapshot` read concern.

``"majority"``
``````````````

.. container::

   - Read concern :readconcern:`"majority"` returns data that has been
     acknowledged by a majority of the replica set members (i.e. data
     cannot be rolled back) **if** the transaction commits with
     :ref:`write concern "majority" <transactions-write-concern>`.

   - If the transaction does not use :ref:`write concern "majority"
     <transactions-write-concern>` for the commit, the
     :readconcern:`"majority"` read concern provides **no** guarantees that
     read operations read majority-committed data.

   - For transactions on sharded cluster, :readconcern:`"majority"` read
     concern cannot guarantee that the data is from the same snapshot
     view across the shards. If snapshot isolation is required, use
     :ref:`transactions-read-concern-snapshot` read concern.

.. _transactions-read-concern-snapshot:

``"snapshot"``
``````````````

.. container::

   - Read concern :readconcern:`"snapshot"` returns data from a
     snapshot of majority committed data **if** the transaction commits
     with :ref:`write concern "majority" <transactions-write-concern>`.

   - If the transaction does not use :ref:`write concern "majority"
     <transactions-write-concern>` for the commit, the
     :readconcern:`"snapshot"` read concern provides **no** guarantee that
     read operations used a snapshot of majority-committed data.

   - For transactions on sharded clusters, the
     :readconcern:`"snapshot"` view of the data **is** synchronized
     across shards.

.. _transactions-write-concern:

Transactions and Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Transactions use the transaction-level :doc:`write concern
</reference/write-concern>` to commit the write operations. Write
operations inside transactions must be issued without explicit write
concern specification and use the default write concern. At commit
time, the writes are then commited using the transaction-level write
concern.

.. tip::

   Do not explicitly set the write concern for the individual write
   operations inside a transaction. Setting write concerns for the
   individual write operations inside a transaction results in an error.

You can set the transaction-level :doc:`write concern
</reference/write-concern>` at the transaction start:

- If the transaction-level write concern is unset, the
  transaction-level write concern defaults to the session-level write
  concern for the commit.

- If the transaction-level write concern and the session-level write
  concern are unset, transaction-level write concern defaults to the
  client-level write concern. By default, client-level write concern
  is :writeconcern:`w: 1 <\<number\>>`.

Multi-document transactions support all write concern :ref:`w <wc-w>`
values, including:

``w: 1``
````````

.. container::

   - Write concern :writeconcern:`w: 1 <\<number\>>` returns
     acknowledgement after the commit has been applied to the primary.

     .. important::

        When you commit with :writeconcern:`w: 1 <\<number\>>`, your
        transaction can be :doc:`rolled back if there is a failover
        </core/replica-set-rollbacks>`.

   - When you commit with :writeconcern:`w: 1 <\<number\>>` write
     concern, transaction-level :readconcern:`"majority"` read concern
     provides **no** guarantees that read operations in the transaction
     read majority-committed data.

   - When you commit with :writeconcern:`w: 1 <\<number\>>` write
     concern, transaction-level :readconcern:`"snapshot"` read concern
     provides **no** guarantee that read operations in the transaction
     used a snapshot of majority-committed data.

``w: "majority"``
`````````````````

.. container::

   - Write concern :writeconcern:`w: "majority" <"majority">` returns
     acknowledgement after the commit has been applied to a majority
     (M) of voting members; i.e. the commit has been applied to the
     primary and (M-1) voting secondaries.

   - When you commit with :writeconcern:`w: "majority" <"majority">`
     write concern, transaction-level :readconcern:`"majority"` read
     concern guarantees that operations have read majority-committed
     data. For transactions on sharded clusters, this view of the
     majority-committed data is not synchronized across shards.

   - When you commit with :writeconcern:`w: "majority" <"majority">`
     write concern, transaction-level :readconcern:`"snapshot"` read
     concern guarantees that operations have from a synchronized
     snapshot of majority-committed data.


General Information
-------------------

Production Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~

For various production considerations with using transactions, see
:doc:`/core/transactions-production-consideration`. In addition, or sharded
clusters, see also :doc:`/core/transactions-sharded-clusters`.

Arbiters
~~~~~~~~

Transactions on deployments with arbiters have the following limitation:

- On a sharded cluster, transactions that span multiple shards will
  error and abort if any involved shard contains an arbiter. Single
  shard transactions that involve the shard containing the arbiter are
  not affected unless :ref:`read concern majority is disabled
  <transactions-disabled-rc-majority>`.

.. _transactions-disabled-rc-majority:

Disabled Read Concern Majority
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Deployments may have disabled read concern majority
(:option:`--enableMajorityReadConcern false <mongod
--enableMajorityReadConcern>` or
:setting:`replication.enableMajorityReadConcern: false
<replication.enableMajorityReadConcern>`); for example, a 3-member PSA
(Primary-Secondary-Arbiter) replica set or a sharded cluster with
3-member PSA shards may have disabled read concern majority.

On sharded clusters with a shard that has :ref:`disabled read concern
"majority" <disable-read-concern-majority>`:

- You cannot run transactions with read concern ``snapshot`` if the
  transaction involves that shard. The transaction with read concern
  ``snapshot`` errors and aborts.

  .. code-block:: none

     'atClusterTime' is not supported when enableMajorityReadConcern=false

- You cannot run transactions that span multiple shards if the
  transaction involves that shard. The transaction errors during the
  commit and aborts.

To check if read concern "majority" is disabled, you can run
:method:`db.serverStatus()` on the :binary:`~bin.mongod` instances and
check the :serverstatus:`storageEngine.supportsCommittedReads` field.
If ``false``, read concern "majority" is disabled.
 
For more information, see :ref:`transactions-psa` and
:ref:`transactions-sharded-clusters-psa`.

Diagnostics
~~~~~~~~~~~

MongoDB provides various transactions metrics:

- The :method:`db.serverStatus()` method/:dbcommand:`serverStatus`
  command returns :ref:`server-status-transactions` metrics.
  
- The :pipeline:`$currentOp` aggregation pipeline returns
  :data:`$currentOp.transaction` information for an operation if that
  operation is part of a transaction.

..  _transactions-fcv:

Feature Compatibility Version (FCV)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To use transactions, the :ref:`featureCompatibilityVersion <view-fcv>`
for all members of the deployment must be at least:

.. list-table::
   :header-rows: 1

   * - Deployment
     - Minimum ``featureCompatibilityVersion``

   * - Replica Set
     - ``4.0``

   * - Sharded Cluster
     - ``4.2``

To check the fCV for a member, connect to the member and run the
following command:

.. code-block:: javascript

   db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

For more information, see the
:dbcommand:`setFeatureCompatibilityVersion` reference page.

.. _transactions-storage-engines:

Storage Engines
~~~~~~~~~~~~~~~

Multi-document transactions are only available for deployments that use
WiredTiger storage engine. They are not available for deployments that
use in-memory storage engine.

.. toctree::
   :hidden:
   :titlesonly:
   
   /core/transactions-in-applications
   /core/transactions-production-consideration
   /core/transactions-sharded-clusters
   /core/transactions-operations

.. |arrow| unicode:: U+27A4
