.. _kotlin-aggregation:

===========
Aggregation
===========

.. meta::
   :description: Learn to use aggregation operations in the MongoDB Kotlin driver to process data and return computed results using the aggregation pipeline.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use **aggregation operations** in the MongoDB Kotlin driver.

Aggregation operations process data in your MongoDB collections and return computed results. MongoDB's Aggregation
pipeline, part of the Query API, is modeled on the concept of data processing pipelines. Documents enter a multi-staged pipeline that
transforms the documents into an aggregated result.

Another way to think of aggregation is like a car factory. Within the car factory is an assembly line, along which
are assembly stations with specialized tools to do a specific job, like drills and welders. Raw parts enter the factory,
which are then transformed and assembled into a finished product.

The **aggregation pipeline** is the assembly line, **aggregation stages** are the assembly stations, and
**operator expressions** are the specialized tools.

Aggregation and Find Operations Compared
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using ``find`` operations, you can:

- select *what* documents to return
- select *what* fields to return
- sort the results

Using ``aggregation`` operations, you can:

- perform all ``find`` operations
- rename fields
- calculate fields
- summarize data
- group values

Aggregation operations have some :manual:`limitations </core/aggregation-pipeline-limits/>` you must keep in mind:

- Returned documents must not violate the :manual:`BSON document size limit </reference/limits/#mongodb-limit-BSON-Document-Size>`
  of 16 megabytes.

- Pipeline stages have a memory limit of 100 megabytes by default. If required,
  you may exceed this limit by using the
  `allowDiskUse <{+driver-api+}/-aggregate-flow/allow-disk-use.html>`__
  method.

  .. important:: ``$graphLookup`` exception

     The :manual:`$graphLookup </reference/operator/aggregation/graphLookup/>` stage has a strict memory limit of 100 megabytes
     and will ignore ``allowDiskUse``.

Useful References
~~~~~~~~~~~~~~~~~

- :manual:`Aggregation pipeline </core/aggregation-pipeline/>`
- :manual:`Aggregation stages </meta/aggregation-quick-reference/#stages>`
- :manual:`Operator expressions </meta/aggregation-quick-reference/#operator-expressions>`
- :ref:`Aggregation Builders <aggregates-builders>`

Example Data
------------

The examples use a collection of the following data in MongoDB:

.. code-block:: json

   [
      {"name": "Sun Bakery Trattoria", "contact": {"phone": "386-555-0189", "email": "SunBakeryTrattoria@example.org", "location": [-74.0056649, 40.7452371]}, "stars": 4, "categories": ["Pizza", "Pasta", "Italian", "Coffee", "Sandwiches"]},
      {"name": "Blue Bagels Grill", "contact": {"phone": "786-555-0102", "email": "BlueBagelsGrill@example.com", "location": [-73.92506, 40.8275556]}, "stars": 3, "categories": ["Bagels", "Cookies", "Sandwiches"]},
      {"name": "XYZ Bagels Restaurant", "contact": {"phone": "435-555-0190", "email": "XYZBagelsRestaurant@example.net", "location": [-74.0707363, 40.59321569999999]}, "stars": 4, "categories": ["Bagels", "Sandwiches", "Coffee"]},
      {"name": "Hot Bakery Cafe", "contact": {"phone": "264-555-0171", "email": "HotBakeryCafe@example.net", "location": [-73.96485799999999, 40.761899]}, "stars": 4, "categories": ["Bakery", "Cafe", "Coffee", "Dessert"]},
      {"name": "Green Feast Pizzeria", "contact": {"phone": "840-555-0102", "email": "GreenFeastPizzeria@example.com", "location": [-74.1220973, 40.6129407]}, "stars": 2, "categories": ["Pizza", "Italian"]},
      {"name": "ZZZ Pasta Buffet", "contact": {"phone": "769-555-0152", "email": "ZZZPastaBuffet@example.com", "location": [-73.9446421, 40.7253944]}, "stars": 0, "categories": ["Pasta", "Italian", "Buffet", "Cafeteria"]},
      {"name": "XYZ Coffee Bar", "contact": {"phone": "644-555-0193", "email": "XYZCoffeeBar@example.net", "location": [-74.0166091, 40.6284767]}, "stars": 5, "categories": ["Coffee", "Cafe", "Bakery", "Chocolates"]},
      {"name": "456 Steak Restaurant", "contact": {"phone": "990-555-0165", "email": "456SteakRestaurant@example.com", "location": [-73.9365108, 40.8497077]}, "stars": 0, "categories": ["Steak", "Seafood"]},
      {"name": "456 Cookies Shop", "contact": {"phone": "604-555-0149", "email": "456CookiesShop@example.org", "location": [-73.8850023, 40.7494272]}, "stars": 4, "categories": ["Bakery", "Cookies", "Cake", "Coffee"]},
      {"name": "XYZ Steak Buffet", "contact": {"phone": "229-555-0197", "email": "XYZSteakBuffet@example.org", "location": [-73.9799932, 40.7660886]}, "stars": 3, "categories": ["Steak", "Salad", "Chinese"]}
   ]

The data in the collection is modeled by the following ``Restaurant`` data class:

.. literalinclude:: /examples/generated/AggregationTest.snippet.aggregation-data-classes.kt
   :language: kotlin

Basic Aggregation
-----------------

To perform an aggregation, pass a list of aggregation stages to the
``MongoCollection.aggregate()`` method.

The Kotlin driver provides the
`Aggregates <{+core-api+}/client/model/Aggregates.html>`__
helper class that contains builders for aggregation stages.

In the following example, the aggregation pipeline:

- Uses a :manual:`$match </reference/operator/aggregation/match/>` stage to filter for documents whose
  ``categories`` array field contains the element ``Bakery``. The example uses
  ``Aggregates.match`` to build the ``$match`` stage.

- Uses a :manual:`$group </reference/operator/aggregation/group/>` stage to group the matching documents by the ``stars``
  field, accumulating a count of documents for each distinct value of ``stars``.

.. seealso::

   You can build the expressions used in this example using the :ref:`aggregation builders <aggregates-builders>`.

.. io-code-block::

   .. input:: /examples/generated/AggregationTest.snippet.basic-aggregation.kt
      :language: kotlin

   .. output::

      Results(id=4, count=2)
      Results(id=5, count=1)

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- `MongoCollection.aggregate() <{+driver-api+}/-mongo-collection/aggregate.html>`__
- `Aggregates.match <{+core-api+}/client/model/Aggregates.html#match(org.bson.conversions.Bson)>`__

Explain Aggregation
-------------------

To view information about how MongoDB executes your operation, use the
``explain()`` method of the ``AggregateFlow`` class. The ``explain()``
method returns **execution plans** and performance statistics. An execution
plan is a potential way MongoDB can complete an operation.
The ``explain()`` method provides both the winning plan (the plan MongoDB
executed) and rejected plans.

.. include:: /includes/fundamentals/explain-verbosity.rst

In the following example, we print the JSON representation of the
winning plans for aggregation stages that produce execution plans:

.. io-code-block::

   .. input:: /examples/generated/AggregationTest.snippet.explain-aggregation.kt
      :language: kotlin

   .. output::
      :language: javascript

      {
         "explainVersion": "2",
         "queryPlanner": {
            // ...
         },
         "command": {
            // ...
         },
         // ...
      }

For more information about the topics mentioned in this section, see the
following resources:

- :manual:`Explain Output </reference/explain-results/>` Server Manual Entry
- :manual:`Query Plans </core/query-plans/>` Server Manual Entry
- `ExplainVerbosity <{+core-api+}/ExplainVerbosity>`__ API Documentation
- `explain() <{+driver-api+}/-aggregate-flow/explain.html>`__ API Documentation
- `AggregateFlow <{+driver-api+}/-aggregate-flow/index.html>`__ API Documentation

Aggregation Expressions
~~~~~~~~~~~~~~~~~~~~~~~

The Kotlin driver provides builders for accumulator expressions for use with
``$group``. You must declare all other expressions in JSON format or
compatible document format.

.. tip::

   The syntax in either of the following examples will define an :manual:`$arrayElemAt </reference/operator/aggregation/arrayElemAt/>`
   expression.

   The ``$`` in front of "categories" tells MongoDB that this is a :manual:`field path </meta/aggregation-quick-reference/#expressions>`,
   using the "categories" field from the input document.

   .. literalinclude:: /examples/generated/AggregationTest.snippet.build-documents-tip.kt
      :language: kotlin

In the following example, the aggregation pipeline uses a
``$project`` stage and various ``Projections`` to return the ``name``
field and the calculated field ``firstCategory`` whose value is the
first element in the ``categories`` field.

.. io-code-block::

   .. input:: /examples/generated/AggregationTest.snippet.aggregation-expressions.kt
      :language: kotlin

   .. output::
      :language: console

      Results(name=Sun Bakery Trattoria, firstCategory=Pizza)
      Results(name=Blue Bagels Grill, firstCategory=Bagels)
      Results(name=XYZ Bagels Restaurant, firstCategory=Bagels)
      Results(name=Hot Bakery Cafe, firstCategory=Bakery)
      Results(name=Green Feast Pizzeria, firstCategory=Pizza)
      Results(name=ZZZ Pasta Buffet, firstCategory=Pasta)
      Results(name=XYZ Coffee Bar, firstCategory=Coffee)
      Results(name=456 Steak Restaurant, firstCategory=Steak)
      Results(name=456 Cookies Shop, firstCategory=Bakery)
      Results(name=XYZ Steak Buffet, firstCategory=Steak)

API Documentation
-----------------

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- `Accumulators <{+core-api+}/client/model/Accumulators.html>`__
- `$group <{+core-api+}/client/model/Aggregates.html#group(TExpression,java.util.List)>`__
- `$project <{+core-api+}/client/model/Aggregates.html#project(org.bson.conversions.Bson)>`__
- `Projections <{+core-api+}/client/model/Projections.html>`__
