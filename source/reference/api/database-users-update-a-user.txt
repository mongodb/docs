======================
Update a Database User
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/fact-groups-projects-synonyms.rst

.. include:: /includes/api-base-url.rst

.. include:: /includes/extracts/fact-api-requirements-owner.rst

Syntax
------

You can update a user's roles and password. You cannot update the user's name
or :ref:`authentication database <authentication-database>`, which is ``admin``.

Send only those fields where you will change the value.

.. code-block:: none

   PATCH /api/atlas/v1.0/groups/{GROUP-ID}/databaseUsers/admin/{USERNAME}

Request Path Parameters
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1

   * - Parameter
     - Required/Optional
     - Description

   * - ``GROUP-ID``

     - Required.

     - The unique identifier for the :ref:`group <group-id>`.

   * - ``USERNAME``

     - Required.

     - The username to update

Request Query Parameters
~~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1

   * - Field
     - Required/Optional
     - Description

   * - ``envelope``

     - Optional.

     - A boolean that specifies whether or not to wrap the response in an
       :ref:`envelope <api-envelope>`.

   * - ``pretty``

     - Optional

     - A boolean that specifies whether or not to return a "pretty-printed"
       JSON document. 
       
       Defaults to ``false``.

Request Body Parameters
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1

   * - Name
     - Description

   * - ``roles``
     - An array of the user's roles and the database on which the user has
       each role. A role allows the user to perform particular actions on the
       specified database. A role on the ``admin`` database can include
       privileges that apply to the other databases as well.

   * - ``roles.databaseName``
     - The database on which the user has the specified role. A role on the
       ``admin`` database can include privileges that apply to the other
       databases.

   * - ``roles.collectionName``
     - The collection for which the role applies.

   * - ``roles.roleName``
     - The name of the role. 
     
       The following possible values of ``role`` are restricted to the
       ``admin`` database:
       
       - :atlasrole:`atlasAdmin <Atlas admin>`
       - :authrole:`readWriteAnyDatabase`
       - :authrole:`readAnyDatabase`
       - :authrole:`clusterMonitor`
       - :authrole:`backup`
       - :authrole:`dbAdminAnyDatabase`
       - ``enableSharding``

         This role is specific to MongoDB databases managed by |service|. The
         role allows the user to enable sharding on a database and to shard a
         collection.
       
       The following possible values of ``role`` can be applied to any
       database:

       - :authrole:`dbAdmin`
       - :authrole:`read`
       - :authrole:`readWrite`

       The following values of ``role`` can be applied to a specific
       collection:

       - :authrole:`read`
       - :authrole:`readWrite`

   * - ``password``
     - The user's password. This field is NOT included in the entity returned
       from the server.

Response Elements
~~~~~~~~~~~~~~~~~

If you set the query element ``envelope`` to ``true``, the response is wrapped
by the ``content`` object.

.. list-table::
   :header-rows: 1

   * - Name
     - Description

   * - ``links``
     - One or more :ref:`links <api-linking>` to sub-resources and/or 
       related resources.

   * - ``databaseName``
     - The user's :ref:`authentication database <authentication-database>`. A
       user must provide both a username and authentication database to log
       into MongoDB. In |service| deployments of MongoDB, the authentication
       database is always the ``admin`` database.

   * - ``groupId``
     - ID of the |service| group the user belongs to.

   * - ``username``
     - The username for authenticating to MongoDB.

   * - ``roles``
     - An array of the user's roles and the database on which the user has
       each role. A role allows the user to perform particular actions on the
       specified database. A role on the ``admin`` database can include
       privileges that apply to the other databases as well.

   * - ``roles.databaseName``
     - The database on which the user has the specified role. A role on the
       ``admin`` database can include privileges that apply to the other
       databases.

   * - ``roles.roleName``
     - The name of the role. The possible values are:
     
       - :atlasrole:`atlasAdmin <Atlas admin>`
       - :authrole:`readWriteAnyDatabase`
       - :authrole:`readAnyDatabase`
       - :authrole:`backup`
       - :authrole:`clusterMonitor`
       - :authrole:`dbAdmin`
       - :authrole:`dbAdminAnyDatabase`

       - ``enableSharding``

         This role is specific to MongoDB databases managed by |service|. The role
         allows the user to enable sharding on a database and to shard a collection.

       - :authrole:`read`
       - :authrole:`readWrite`

   * - ``roles.collectionName``

     - The collection for which the role applies.

Example Request
---------------

Request
~~~~~~~

.. include:: /includes/extracts/fact-api-requirements-modify.rst

.. class:: copyable-code

.. code-block:: none

   curl -i -u "username:apiKey" --digest -H "Content-Type: application/json" -X PATCH "https://cloud.mongodb.com/api/atlas/v1.0/groups/5356823b3794dee37132bb7b/databaseUsers/admin/david" --data '
   {
     "roles" : [ {
       "databaseName" : "service",
       "roleName" : "read"
     } ]
   }'

Response
~~~~~~~~

.. code-block:: none

   HTTP/1.1 200 OK

   {
     "databaseName" : "admin",
     "groupId" : "5356823b3794dee37132bb7b",
     "links" : [ ... ],
     "roles" : [ {
       "databaseName" : "service",
       "roleName" : "read"
     } ],
     "username" : "david"


