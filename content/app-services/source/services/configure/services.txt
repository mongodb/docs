.. meta::
   :robots: noindex, nosnippet

===========================================
Configure Third-Party Services [Deprecated]
===========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/note-third-party-services-deprecation.rst

Overview
--------

You can create and configure interfaces for all :doc:`external service
</reference/services>` from the App Services UI or by :ref:`importing
<deploy-cli>` a service configuration
directory. Select the tab below that corresponds to the method you want
to use.

.. _services-procedure:

Procedure
---------

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      .. procedure::

         .. step:: Create a New Service

            A. Click :guilabel:`Services` in the left navigation menu.

            B. Click :guilabel:`Add a Service`.


         .. step:: Enter Configuration Values

            A. Select the type of service you wish to create from the list.

            B. Enter a :guilabel:`Service Name` that uniquely identifies the
               service.

            C. Enter additional configuration values specific to the type of
               service you are creating. Some Service configuration values are
               private and require you to create and reference a :ref:`Secret
               <app-secret>` that contains the configuration value.

               Refer to the individual service reference pages for details on the
               configuration parameters for each type of service.

            D. Click :guilabel:`Add Service` to save the service.

            .. figure:: /images/service-configuration-realm-ui.png
               :alt: An example service configuration in the UI
   
   .. tab::
      :tabid: cli
      
      .. procedure::

         .. step:: Authenticate a MongoDB Atlas User

            .. include:: /includes/cli-login.rst

         .. step:: Pull the Latest Version of Your App

            .. include:: /includes/cli-pull-latest.rst

         .. step:: Create a Service Configuration Directory

            Create a new subdirectory in the ``/services`` folder of the
            application directory that you exported. The name of the subdirectory
            should match the configured name of the service.

            .. code-block:: shell

               mkdir -p services/myService


         .. step:: Add a Service Configuration File

            Add a file named ``config.json`` to the new service directory.
            The configuration file should have the following form:

            .. code-block:: javascript

               {
                 "type": <boolean>,
                 "name": <string>,
                 "config": <document>
               }

            .. list-table::
               :header-rows: 1
               :widths: 10 30

               * - Configuration Value
                 - Description

               * - :guilabel:`Service Type`

                   | *type*

                 - Required. The type of the configured service.

               * - :guilabel:`Service Name`

                   | *name*

                 - Required. The name of the configured service.

                   .. note::

                      Each service interface in your application must have a
                      unique name.

               * - :guilabel:`Configuration`

                   | *config*

                 - Required. A document that contains configuration values
                   specific to the type of the service you are configuring. To
                   find the configuration values for a specific service, refer to
                   that service's reference page.


         .. step:: Import the Service

            Once you have added the appropriate configuration files to the service
            subdirectory, you can import the service into your application.

            Navigate to the root of the application directory and run the
            following command:

            .. code-block:: shell

               realm-cli import
