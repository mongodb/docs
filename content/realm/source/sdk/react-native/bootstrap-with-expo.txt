.. meta::
   :robots: noindex, nosnippet

.. _react-native-client-bootstrap-with-expo:

======================================
Bootstrap with Expo - React Native SDK
======================================

.. meta::
  :description: Create a React Native Expo app that uses the Atlas Device SDK.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The :npm:`Atlas Device SDK Expo template <package/@realm/expo-template>`
provides a fully working React Native application that you can use to bootstrap
your app development project with Atlas Device SDK. This guide covers
how to initialize and work with the template.

The Expo template uses:

- `Expo <https://docs.expo.dev/>`_: a framework for developing, building and
  deploying React Native applications.
- :npm:`@realm/react <package/@realm/react>`: an npm package that provides an
  easy-to-use API to perform common Realm operations, such as querying or
  writing to a database and listening to database objects.

Prerequisites
-------------
- `Node.js version 12 LTS or later <https://nodejs.org/en/about/previous-releases>`_
- Expo SDK v48 or later

Check out the `compatibility chart 
<https://github.com/realm/realm-js/blob/master/COMPATIBILITY.md>`__
to determine which version of the Expo SDK is compatible with specific
React Native SDK versions.

Initialize the Template
-----------------------

To initialize the template application, use ``create-expo-app``. Pass the flag
``--template @realm/expo-template`` to initialize a React Native application
based on the Device SDK template.

Run the following command in your terminal: 

.. code-block:: shell

   npx create-expo-app AtlasDeviceSdkApp --template @realm/expo-template

Install app dependencies:

.. code-block:: shell

   npm install

Explore the File Structure
--------------------------

The relevant files are as follows:

.. cssclass:: config-table
.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - File
     - Purpose

   * - Task.ts
     - A typescript file that defines a Task :ref:`object schema
       <react-native-object-schemas>` and returns a ``RealmProvider`` and the hooks.
      
   * - App.ts
     - The entry point to the application, which contains methods to create,
       update, and delete tasks. The ``RealmProvider`` component wraps around
       the ``App`` component, providing your entire application with access to
       the realm.

   * - TaskList.tsx
     - A React component that gets a list of Task objects from the database and
       renders each object as a ``TaskItem``  component.

   * - TaskItem.tsx
     - A React component that displays the task's description, a checkbox to
       toggle the task's completion status, and a button to delete the task.

Build and Run the Application
-----------------------------

To run your application on an :android:`Android emulator <studio/run/emulator>`,
run the following command from your application root:

.. code-block:: shell
   
   npx expo run:android

To run your application on an :apple:`iOS simulator
<documentation/xcode/running-your-app-in-simulator-or-on-a-device>`, run the
following command from your application root:

.. code-block:: shell
   
   npx expo run:ios

When you run the commands above, the Expo `dev-client
<https://docs.expo.dev/develop/development-builds/introduction/>`__ will start 
automatically. If you close your Expo ``dev-client`` and want to restart it 
without waiting for the native build process again, you can simply run: 

.. code-block:: shell
   
   npx expo start --dev-client

However, if you made any `changes to the native code
<https://docs.expo.dev/workflow/customizing/>`_, you will have to re-run ``npx 
expo run:ios`` or ``npx expo run:android`` to rebuild your native iOS/Android
app.

Deploying Your Application
--------------------------
To deploy your application, we recommend using the `Expo Application Services (EAS)
<https://docs.expo.dev/eas/>`_, a suite of deeply integrated cloud services for
Expo and React Native apps. EAS allows you to compile and :wikipedia:`sign
<Code_signing>` your App, upload your app to the Apple App Store or Google
Play Store with a single CLI command, and push bug fixes or small changes
directly to app users. 

Alternatively, read the `Expo Distribution Overview
<https://docs.expo.dev/distribution/introduction/>`_ guide to learn how to
create native builds, deploy to app stores, avoid common app store rejections, and
manage different release environments.
