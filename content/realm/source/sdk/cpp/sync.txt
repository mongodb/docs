.. meta::
   :robots: noindex, nosnippet

.. _cpp-sync:
.. _cpp-realm-sync:

===================================
Sync Data Between Devices - C++ SDK
===================================

.. toctree::
   :titlesonly:

   Manage Sync Subscriptions </sdk/cpp/sync/sync-subscriptions>
   Write to a Synced Realm</sdk/cpp/sync/write-to-synced-realm>
   Manage Sync Sessions </sdk/cpp/sync/manage-sync-session>
   Handle Sync Errors </sdk/cpp/sync/handle-sync-errors>
   Set the Sync Client Log Level </sdk/cpp/sync/log-level>
   Stream Data to Atlas </sdk/cpp/sync/stream-data-to-atlas>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Atlas Device Sync automatically synchronizes data between client applications and 
an :ref:`App Services backend <realm-cloud>`. When a client 
device is online, Sync asynchronously synchronizes data in a 
background thread between the device and your backend App. 

When you use Sync in your client application, your implementation must match 
the Sync Mode you select in your backend App configuration. The Realm C++ SDK
only supports Flexible Sync.

.. seealso::

   :ref:`enable-realm-sync`

.. _cpp-flexible-sync-fundamentals:

Flexible Sync
-------------

When you select :ref:`Flexible Sync <flexible-sync>` for your backend App 
configuration, your client implementation must include subscriptions to 
queries on :ref:`queryable fields <queryable-fields>`. Flexible Sync works 
by synchronizing data that matches query subscriptions you maintain in the 
client application. 

A subscription set contains a set of queries. Flexible Sync returns 
documents matching those queries, where the user has the appropriate 
:ref:`permissions <flexible-sync-rules-and-permissions>` to read and/or 
read and write the documents. If documents match the query, but the client 
does not have the permission to read or write them, they do not sync to 
the client application.

You can form queries using :ref:`Realm Query Language <realm-query-language>`.

.. include:: /includes/note-unsupported-flex-sync-rql-operators.rst

Subscription sets are based on a specific type of :ref:`Realm object 
<cpp-object-model>`. You might have multiple subscriptions if you 
have many types of Realm objects.

To use Device Sync in your client application, open a synced realm 
with a Flexible Sync configuration. Then, manage subscriptions
to determine which documents to sync. For more information, refer to
:ref:`cpp-manage-flexible-sync-subscriptions`.

Group Updates for Improved Performance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/sync-memory-performance.rst

Unidirectional Sync
-------------------

Device Sync supports the ability to **send** data to Atlas, 
but not receive any updates.

In this scenario, you can maximize sync performance by using 
:ref:`Data Ingest <cpp-stream-data-to-atlas>` to stream 
data from the client application to a Flexible Sync-enabled Atlas App Services
App.
