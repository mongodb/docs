title: "Go to :guilabel:`Backup` view and click the :guilabel:`Overview` tab."
level: 4
ref: go-backup-view
content: |
   For the deployment whose backup you want to query, click
   :icon-mms:`ellipsis` under :guilabel:`Options` column then select
   :guilabel:`Query`.

   You can also click the deployment to view its snapshots and click
   the :guilabel:`Query` button under the :guilabel:`Actions` column.
---
title: "Open a Backup Tunnel to the Queryable Snapshot."
ref: open-backup-tunnel
content: |
   #. Select the snapshot to query and click :guilabel:`Next`.

   #. :guilabel:`Start` the process to query a snapshot. You will be
      prompted for 2-factor verification.

   #. Select :guilabel:`Backup Tunnel` as the connection method to the
      queryable snapshot. [#manual-connect]_

   #. Select your Platform and download.

   #. Uncompress the downloaded file.

      .. include:: /includes/snapshot-mount-time.rst

   #. Open a terminal or command prompt and go to the uncompressed
      <tunnel> directory. Run the executable to start the tunnel.

      The default port for the tunnel is ``27017``. To change the port,
      use the ``--local`` flag, as in the following example:

      .. code-block:: javascript

         ./<tunnel executable> --local localhost:27020

      .. note::

         If you change the port, you must include the port information
         when connecting.
---
title: Use ``mongodump`` to export a single database or collection from the queryable backup.
ref: dump-database
content: |

   To export the data for a database,
      Include the following |mongodump| options to
      connect to the tunnel [#manual-connect]_:

      - :option:`--port <mongodump.--port>` set to the port for the tunnel

      - :option:`--db <mongodump.--db>` set to the name of the database to export

      - :option:`--out <mongodump.--out>` set to an empty directory to
        output the data dump.

        .. important::

           Ensure that the user running |mongodump| can write to
           the specified directory.

      .. code-block:: sh

         mongodump --port <port for tunnel> --db <single-database> --out <data-dump-path>


      .. example::

         To connect to a tunnel running on port ``27020`` to dump out
         data from the ``test`` database to
         :file:`/mydata/restoredata/` directory:

         .. code-block:: sh

            mongodump --port 27020 --db test --out /mydata/restoredata/

         |mongodump| outputs the ``test`` database files into the
         :file:`/mydata/restoredata/test/` directory.

         If the |mongodump| is not in your ``PATH``, specify the path
         for the tool.

   To export the data for a collection,
      include the following options to connect to the tunnel [#manual-connect]_:

      - :option:`--port <mongodump.--port>` set to the port for the tunnel.

      - :option:`--db <mongodump.--db>` set to the name of the database to export.

      - :option:`--collection <mongodump.--collection>` for a single
        collection.

      - :option:`--out <mongodump.--out>` set to an empty directory to
        output the data dump.

        .. important::

           Ensure that the user running |mongodump| can
           write to the specified directory.

      .. code-block:: sh

         mongodump --port <port for tunnel> \
                   --db <single-database> \
                   --collection <collection-name> \
                   --out <data-dump-path>

      .. example::

         To connect to a tunnel running on port ``27020`` to dump out
         data from the ``restaurants`` collection from ``test``
         database to :file:`/mydata/restoredata/` directory:

         .. code-block:: sh

            mongodump --port 27020 \
                      --db test \
                      --collection restaurants \
                      --out /mydata/restoredata/

         |mongodump| outputs the ``restaurants`` collection data into
         the :file:`/mydata/restoredata/test/restaurants.bson` file.
---
title: "Use ``mongorestore`` to restore the single database or collection."
ref: import-database
content: |

   To restore a single database,
      Include the following  |mongorestore| options:

      - :option:`--port <mongorestore.--port>` set to the port of the destination cluster.

      - :option:`--db <mongorestore.--db>` set to the name of the destination database.

      Optionally, you can include :option:`--drop <mongorestore.--drop>` to
      drop the database in the destination cluster if the database
      already exists.

   .. code-block:: sh

       mongorestore --port <port> --db <destination database> <data-dump-path/database> --drop

   For example, to restore from the :file:`/mydata/restoredata/test`
   directory to a new database ``restoredTest``:

   .. code-block:: sh

      mongorestore --port 27017 --db restoredTest /mydata/restoredata/test --drop

   The example assumes that the destination replica set's primary or
   the destination sharded cluster's |mongos| listens on port
   ``27017``.

   To restore a single collection,
      Include the following |mongorestore| options:

      - :option:`--port <mongorestore.--port>` set to the port of the destination cluster.

      - :option:`--db <mongorestore.--db>` set to the name of the destination database.

      Optionally, you can include :option:`--drop <mongorestore.--drop>` to
      drop the collection in the destination cluster if the collection
      already exists.

   .. code-block:: sh

      mongorestore --port <port> --db <destination database> --collection <collection-name> <data-dump-path/dbname/collection.bson> --drop

   For example, to restore from the
   :file:`/mydata/restoredata/test/restaurants.bson` data file to a new
   collection ``rest2`` in the ``test2`` database:

   .. code-block:: sh

      mongorestore --port 27017 --db test2 --collection rest2 /mydata/restoredata/test/restaurants.bson --drop

   The example assumes that the destination replica set's primary or
   the destination sharded cluster's |mongos| listens on port
   ``27017``.

---
title: "Terminate the queryable instance."
ref: terminate-instance
content: |
   Once you have finished, you can terminate the
   queryable instance:

   #. Go to the :guilabel:`Restore History` and hover over the
      :guilabel:`Status` column for the deployment item.

   #. Click :guilabel:`Cancel`.

...
