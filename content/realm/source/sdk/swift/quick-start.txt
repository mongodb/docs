.. meta::
   :robots: noindex, nosnippet

.. _ios-client-quick-start:
.. _ios-client-quick-start-with-sync:

=======================
Quick Start - Swift SDK
=======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This Quick Start demonstrates how to use Realm with the Realm Swift SDK. 
Before you begin, ensure you have :ref:`Installed the Swift SDK <ios-install>`.

.. seealso::

   If your app uses SwiftUI, check out the :ref:`SwiftUI Quick Start 
   <ios-swiftui-quick-start>`.

Import Realm
------------

Near the top of any Swift file that uses Realm, add the following import
statement:

.. literalinclude:: /examples/generated/code/start/LocalOnlyCompleteQuickStart.snippet.import-realmswift.swift
   :language: swift

Define Your Object Model
------------------------

For a local-only realm, you can define your :ref:`object model
<ios-realm-objects>` directly in code. In this quick start, you can remove
``ownerId`` unless you want to add the optional Device Sync.

.. literalinclude:: /examples/generated/code/start/QuickStartFlexSync.snippet.model.swift
   :language: swift

Open a Realm
------------

In a local-only realm, the simplest option to open a realm
is to use the default realm with no configuration parameter:

.. literalinclude:: /examples/generated/code/start/LocalOnlyCompleteQuickStart.snippet.quick-start-local-open-realm-without-config-param.swift
   :language: swift

You can also specify a :swift-sdk:`Realm.Configuration <Structs/Realm/Configuration.html>` 
parameter to open a realm at a specific file URL, in-memory, or with a 
subset of classes. 

For more information, see: :ref:`Configure and Open a Realm <ios-open-a-local-realm>`.

Create, Read, Update, and Delete Objects
----------------------------------------

Once you have opened a realm, you can modify it and its :ref:`objects <ios-realm-objects>` 
in a :ref:`write transaction <ios-write-transactions>` block.

To create a new Todo object, instantiate the Todo class and add it to the realm in a write block:

.. literalinclude:: /examples/generated/code/start/QuickStartFlexSync.snippet.create-todo.swift
   :language: swift

You can retrieve a live :ref:`collection <ios-client-collections>` of all todos in the realm:

.. literalinclude:: /examples/generated/code/start/QuickStartFlexSync.snippet.get-all-todos.swift
   :language: swift

You can also filter that collection using :ref:`where <ios-client-query-engine>`:

.. literalinclude:: /examples/generated/code/start/QuickStartFlexSync.snippet.filter.swift
   :language: swift

To modify a todo, update its properties in a write transaction block:

.. literalinclude:: /examples/generated/code/start/QuickStartFlexSync.snippet.modify-write-block.swift
   :language: swift

Finally, you can delete a todo:

.. literalinclude:: /examples/generated/code/start/QuickStartFlexSync.snippet.delete.swift
   :language: swift

Watch for Changes
-----------------

You can :ref:`watch a realm, collection, or object for changes
<ios-react-to-changes>` with the ``observe`` method.

.. literalinclude:: /examples/generated/code/start/LocalOnlyCompleteQuickStart.snippet.quick-start-local-set-notification-token.swift
   :language: swift

Be sure to retain the notification token returned by ``observe`` as 
long as you want to continue observing. When you are done observing, 
invalidate the token to free the resources:

.. literalinclude:: /examples/generated/code/start/LocalOnlyCompleteQuickStart.snippet.quick-start-local-invalidate-notification-token.swift
   :language: swift

Add Device Sync (Optional)
--------------------------

If you want to sync Realm data across devices, you can set up an Atlas 
App Services App and enable Device Sync. For more information on what 
you can do with App Services, see: :ref:`App Services - Swift SDK <ios-application-services>`.

Prerequisites
~~~~~~~~~~~~~

Before you can sync Realm data, you must:

- :ref:`Create an App Services App <create-a-realm-app>`
- :ref:`Enable anonymous authentication <anonymous-authentication>`
- :ref:`Enable Flexible Sync <enable-flexible-sync>` with  :ref:`Development Mode <development-mode>` toggled to ``On`` and an ``ownerId`` field in the :guilabel:`Queryable Fields` section.

.. _ios-quick-start-init-app:

Initialize the App
~~~~~~~~~~~~~~~~~~

.. include:: /includes/access-app-id.rst

.. literalinclude:: /examples/generated/code/start/QuickStartFlexSync.snippet.connect-to-backend.swift
   :language: swift

.. _ios-quick-start-authenticate:

Authenticate a User
~~~~~~~~~~~~~~~~~~~

In this quick start, you use :ref:`anonymous authentication <anonymous-authentication>`
to log in users without requiring them to provide any identifying information.
After authenticating the user, you can open a realm for that user.

.. literalinclude:: /examples/generated/code/start/QuickStartFlexSync.snippet.authenticate-user.swift
   :language: swift

The Realm Swift SDK provides many additional ways to authenticate, register, and link users.
For other authentication providers, see: :ref:`ios-authenticate-users`

Open a Realm
~~~~~~~~~~~~

Once you have enabled Device Sync and authenticated a user, you can create
a :swift-sdk:`Configuration <Structs/Realm/Configuration.html>` object and 
open the realm. You can then add a the :ref:`Flexible Sync
subscription <swift-manage-flexible-sync-subscriptions>` that determines 
what data the realm can read and write.

Once you have a realm with a subscription, this example passes the realm 
and the user to another function where you can use the realm.

.. include:: /includes/swift-concurrency-mainactor.rst

.. literalinclude:: /examples/generated/code/start/QuickStartFlexSync.snippet.open-synced-realm.swift
   :language: swift

The syntax to :ref:`read <ios-read-operations>`, :ref:`write
<ios-write-operations>`, and :ref:`watch for changes <ios-react-to-changes>` on a
synced realm is identical to the syntax for non-synced realms above. While 
you work with local data, a background thread efficiently integrates, 
uploads, and downloads changesets. 

.. include:: /includes/sync-memory-performance.rst
