.. _pymongo-databases-collections:

=========================
Databases and Collections
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: table, row, organize, storage
   :description: Learn how to manage MongoDB databases and collections using PyMongo, including accessing, creating, and deleting collections, and configuring read and write operations.

Overview
--------

In this guide, you can learn how to use MongoDB databases and
collections with {+driver-short+}.

MongoDB organizes data into a hierarchy of the following levels:

- **Databases**: The top level of data organization in a MongoDB instance.
- **Collections**: MongoDB stores documents in collections. They are analogous to tables in relational databases.
- **Documents**: Contain literal data such as string, numbers, dates, and other embedded documents.

For more information about document field types and structure, see the
:manual:`Documents </core/document/>` guide in the {+mdb-server+} manual.

.. TODO: Add a diagram here

Access a Database
-----------------

Access a database by using dictionary-style access on your ``MongoClient`` instance.

The following example accesses a database named ``test_database``:

.. code-block:: python

   database = client["test_database"]

Access a Collection
-------------------

Access a collection by using dictionary-style access on an instance of your database.

The following example accesses a collection named ``test_collection``:

.. code-block:: python
   :emphasize-lines: 2

   database = client["test_database"]
   collection = database["test_collection"]

.. tip::

   If the provided collection name does not already exist in the database,
   MongoDB implicitly creates the collection when you first insert data
   into it.

Create a Collection
-------------------

Use the ``create_collection()`` method to explicitly create a collection in a
MongoDB database.

The following example creates a collection called ``example_collection``. Select the
:guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python
         :emphasize-lines: 2

         database = client["test_database"]
         database.create_collection("example_collection")
   
   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python
         :emphasize-lines: 2

         database = client["test_database"]
         await database.create_collection("example_collection")

You can specify collection options, such as maximum size and document
validation rules, by passing them in as keyword arguments. For a full list of
optional parameters, see the `create_collection() API documentation
<{+api-root+}pymongo/database.html#pymongo.database.Database.create_collection>`__.

Time Series Collection
~~~~~~~~~~~~~~~~~~~~~~

Time series collections efficiently store sequences of measurements over a period of time.
The following example creates a time series collection called ``example_ts_collection``
in which the documents' time field is called ``timestamp``. Select the
:guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python

         database = client["test_database"]
         database.create_collection("example_ts_collection", timeseries={"timeField": "timestamp"})
   
   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python

         database = client["test_database"]
         await database.create_collection("example_ts_collection", timeseries={"timeField": "timestamp"})

For more information about using time series data with {+driver-short+}, see the
:ref:`pymongo-time-series` guide.

Capped Collection
~~~~~~~~~~~~~~~~~

You can create a capped collection that cannot grow beyond a specified memory size or
document count. The following example creates a capped collection called
``example_capped_collection`` that has a maximum size of 1000 bytes. Select the
:guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python

         database = client["test_database"]
         database.create_collection("example_capped_collection", capped=True, size=1000)
   
   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python

         database = client["test_database"]
         await database.create_collection("example_capped_collection", capped=True, size=1000)

To learn more about capped collections, see :manual:`Capped Collections </core/capped-collections/>`
in the {+mdb-server+} manual.

Get a List of Collections
-------------------------

You can query for a list of collections in a database by calling the
``list_collections()`` method. The method returns a cursor containing all
collections in the database and their associated metadata.

The following example calls the ``list_collections()`` method and iterates over
the cursor to print the results. Select the :guilabel:`Synchronous` or
:guilabel:`Asynchronous` tab to see the corresponding code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python

         database = client["test_database"]
         collection_list = database.list_collections()

         for c in collection_list:
             print(c)
   
   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python

         database = client["test_database"]
         collection_list = await database.list_collections()

         for c in collection_list:
             print(c)

To query for only the names of the collections in the database, call the
``list_collection_name()`` method as follows:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python

         collection_list = database.list_collection_names()

         for c in collection_list:
             print(c)
   
   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python

         collection_list = await database.list_collection_names()

         async for c in collection_list:
             print(c)

For more information about iterating over a cursor, see :ref:`pymongo-cursors`. 

Delete a Collection
-------------------

You can delete a collection from the database by using the ``drop_collection()``
method.

The following example deletes the ``test_collection`` collection. Select the
:guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python

         collection = database["test_collection"]
         collection.drop()
   
   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python

         collection = database["test_collection"]
         await collection.drop()

.. warning:: Dropping a Collection Deletes All Data in the Collection

   Dropping a collection from your database permanently deletes all
   documents and all indexes within that collection.

   Drop a collection only if the data in it is no longer needed.

.. _pymongo-databases-collection-type-hints:

Type Hints
----------

.. include:: /includes/type-hints/intro.rst

.. note:: TypedDict in Python 3.7 and Earlier
   
   .. include:: /includes/type-hints/typeddict-availability.rst

Database
~~~~~~~~

If all documents in a database match a well-defined schema, you can specify a type hint
that uses a Python class to represent the documents' structure. By including this class
in the type hint for your ``Database`` object, you can ensure that all documents you
store or retrieve have the required structure. This provides more accurate type
checking and code completion than the default ``Dict[str, Any]`` type.

First, define a class to represent a document from the database. The class must inherit
from the ``TypedDict`` class and must contain the same fields as the documents in the
database. After you define your class, include its name as the generic type for the
``Database`` type hint.

The following example defines a ``Movie`` class and uses it as the
generic type for a ``Database`` type hint. Select the :guilabel:`Synchronous` or
:guilabel:`Asynchronous` tab to see the corresponding code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python
         :emphasize-lines: 5-7, 10

         from typing import TypedDict
         from pymongo import MongoClient
         from pymongo.database import Database

         class Movie(TypedDict):
             name: str
             year: int

         client: MongoClient = MongoClient()
         database: Database[Movie] = client["test_database"]
   
   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python
         :emphasize-lines: 5-7, 10

         from typing import TypedDict
         from pymongo import AsyncMongoClient
         from pymongo.asynchronous.database import Database

         class Movie(TypedDict):
             name: str
             year: int

         client: AsyncMongoClient = AsyncMongoClient()
         database: Database[Movie] = client["test_database"]

Collection
~~~~~~~~~~

Adding a generic type to a ``Collection`` type hint is similar to adding a generic type
to a ``Database`` type hint. First, define a class that inherits from the ``TypedDict`` class
and represents the structure of the
documents in the collection. Then, include the class name as the generic type for the
``Collection`` type hint, as shown in the following example. Select the
:guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding code:

.. tabs::
   
   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python
         :emphasize-lines: 5-7,11

         from typing import TypedDict
         from pymongo import MongoClient
         from pymongo.asynchronous.collection import Collection

         class Movie(TypedDict):
             name: str
             year: int

         client: MongoClient = MongoClient()
         database = client["test_database"]
         collection: Collection[Movie] = database["test_collection"]
   
   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python
         :emphasize-lines: 5-7,11

         from typing import TypedDict
         from pymongo import AsyncMongoClient
         from pymongo.collection import Collection

         class Movie(TypedDict):
             name: str
             year: int

         client: AsyncMongoClient = AsyncMongoClient()
         database = client["test_database"]
         collection: Collection[Movie] = database["test_collection"]

Troubleshooting
---------------

.. include:: /includes/type-hints/troubleshooting-client-type.rst

.. include:: /includes/type-hints/troubleshooting-incompatible-type.rst

.. include:: /includes/troubleshooting/read-write-options.rst

API Documentation
-----------------

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `create_collection() <{+api-root+}pymongo/database.html#pymongo.database.Database.create_collection>`__
- `list_collections() <{+api-root+}pymongo/database.html#pymongo.database.Database.list_collections>`__
- `list_collection_names() <{+api-root+}pymongo/database.html#pymongo.database.Database.list_collection_names>`__
- `get_database() <{+api-root+}pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.get_database>`__
- `get_collection() <{+api-root+}pymongo/database.html#pymongo.database.Database.get_collection>`__
- `database.with_options() <{+api-root+}pymongo/database.html#pymongo.database.Database.with_options>`__
- `collection.with_options() <{+api-root+}pymongo/collection.html#pymongo.collection.Collection.with_options>`__