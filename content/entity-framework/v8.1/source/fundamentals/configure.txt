.. _entity-framework-configure:

==============================
Configure the {+provider-short+}
==============================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: EF, EF Core, code example

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

In this guide, you will learn how to configure an application to use the
{+provider-long+}. To learn how to set up a new project and install the
{+provider-short+}, see the :ref:`entity-framework-quickstart`.

Create a POCO
-------------

Create a `Plain old CLR/Class object
<https://en.wikipedia.org/wiki/Plain_old_CLR_object>`__, or **POCO**, to use as
a model for your entity. A POCO is a simple class object that doesn't inherit
features from any framework-specific base classes or interfaces.

The following code example shows how to create a POCO that represents a customer:

.. literalinclude:: /includes/fundamentals/code-examples/configure/Customer.cs
   :language: csharp
   :copyable:

.. tip::

   To learn more about POCOs, see the :driver:`POCO guide
   </csharp/current/fundamentals/serialization/poco/>` in the
   {+csharp-driver-short+} documentation.

.. _entity-framework-db-context:

Create a DB Context Class
-------------------------

To begin using {+framework-core+}, create a context class that derives from 
`DBContext <https://learn.microsoft.com/en-us/dotnet/api/system.data.entity.dbcontext>`__.
The ``DbContext`` derived class instance represents a database session and is used to
query and save instances of your entities.

The ``DBContext`` class exposes ``DBSet`` properties that specify the entities you
can interact with while using that context.

The following example creates an instance of a ``DBContext`` derived class and
specifies the ``Customer`` object as a ``DBSet`` property:

.. literalinclude:: /includes/fundamentals/code-examples/configure/MyDBContext.cs
   :language: csharp
   :copyable:

The previous code example overrides the ``OnModelCreating()`` method. Overriding
the ``OnModelCreating()`` method allows you to specify configuration details for your
model and its properties. This example uses the ``ToCollection()`` method to
specify that the ``Customer`` entities in your application map to the
``customers`` collection in MongoDB.

.. TODO: Link to a page that goes over methods available to use in OnModelCreating

Use MongoDB
-----------

Once you've created a ``DBContext`` class, construct a
``DbContextOptionsBuilder`` object and call its ``UseMongoDB()`` method. This
method takes two parameters: a ``MongoClient`` instance and
the name of the database that stores the collections you are working with.

The ``UseMongoDB()`` method returns a ``DbContextOptions`` object. Pass the
``Options`` property of this object to the constructor for your ``DBContext``
class.

The following example shows how to construct a ``DBContext`` object in
this way:

.. literalinclude:: /includes/fundamentals/code-examples/configure/UseMongoDB.cs
   :language: csharp
   :copyable:

.. tip:: Creating a MongoClient

   You can call methods from the {+csharp-driver-long+} when using
   the {+provider-short+}. The previous example uses the
   ``MongoClient()`` method from the {+csharp-driver-short+} to create a MongoDB
   client that connects to a MongoDB instance. 
   
   To learn more about using the {+csharp-driver-long+}
   to connect to MongoDB, see the 
   :driver:`Connection guide </csharp/current/fundamentals/connection/connect/>`
   in the {+csharp-driver-short+} documentation.

Example
-------

The following code example shows how to configure the
{+provider-short+} and insert a document into the database:

.. literalinclude:: /includes/fundamentals/code-examples/configure/ConfigureEFProvider.cs
   :language: csharp
   :copyable: