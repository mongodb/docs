.. _mongoexport:

===============
``mongoexport``
===============

.. default-domain:: mongodb

.. role:: red(strong)
   :class: text-danger

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. |tool-binary| replace:: ``mongoexport``

.. include:: /includes/admonition-mac-osx-sierra-restriction.rst

.. include:: /includes/extracts/migration-to-database-tools-mongoexport.rst

Synopsis
--------

:binary:`~bin.mongoexport` is a command-line tool that produces a JSON
or CSV export of data stored in a MongoDB instance.

.. include:: /includes/extracts/require-cmd-line-mongoexport.rst

.. seealso::

   :binary:`~bin.mongoimport` which provides the corresponding "import"
   capability.

.. note::

   .. include:: /includes/fact-online-archive-callout.rst

.. _mongoexport-availability:

Availability
------------

.. include:: /includes/extracts/download-from-tools-mongoexport.rst

Syntax
-------

:binary:`~bin.mongoexport` must be run directly from the system command line.

.. code-block:: sh

   mongoexport --collection=<coll> [options]

You must specify the :option:`collection <mongoexport --collection>` to
export. If you do not specify an :option:`output file <mongoexport
--out>`, :binary:`~bin.mongoexport` writes to the standard output (e.g.
stdout).

Connect to a MongoDB Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To connect to a local MongoDB instance running on port 27017, you do
not have to specify the host or port.

For example, to export the specified :option:`collection <mongoexport
--collection>` to the specified :option:`output file <mongoexport
--out>` from a local MongoDB instance running on port 27017:

.. code-block:: sh

   mongoexport --collection=events --db=reporting --out=events.json

To specify a host and/or port of the MongoDB instance, you can either:

- Specify the hostname and port in the :option:`--uri connection string
  <mongoexport --uri>`:

  .. code-block:: sh
  
     mongoexport --uri="mongodb://mongodb0.example.com:27017/reporting"  --collection=events  --out=events.json [additional options]

  If using the :option:`--uri connection string <mongoexport --uri>`,
  specify the database as part of the string. You cannot use the
  command-line option :option:`--db <mongoexport --db>` in conjunction
  with the :option:`--uri connection string <mongoexport --uri>`.
  
- Specify the hostname and port in the :option:`--host <mongoexport
  --host>`:

  .. code-block:: sh

     mongoexport --host="mongodb0.example.com:27017" --collection=events --db=reporting --out=events.json [additional options]
  
- Specify the hostname and port in the :option:`--host <mongoexport
  --host>` and :option:`--port <mongoexport --port>`:

  .. code-block:: sh

     mongoexport --host="mongodb0.example.com" --port=27017 --collection=events --db=reporting --out=events.json [additional options]

For more information on the options available, see :ref:`mongoexport-options`.

Connect to a Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~

To connect to a replica set to export its data, you can either:

- Specify the replica set name and members in the :option:`--uri connection string <mongoexport --uri>`:

  .. code-block:: sh
  
     mongoexport --uri="mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/reporting?replicaSet=myReplicaSetName" --collection=events --out=events.json [additional options]

  If using the :option:`--uri connection string <mongoexport --uri>`,
  specify the database as part of the string. You cannot use the
  command-line option :option:`--db <mongoexport --db>` in conjunction
  with the :option:`--uri connection string <mongoexport --uri>`.

- Specify the replica set name and members in the :option:`--host <mongoexport --host>`:

  .. code-block:: sh

     mongoexport --host="myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com" --collection=events --db=reporting --out=events.json [additional options]

By default, :binary:`~bin.mongoexport` reads from the primary of the
replica set. To override the default, you can specify the :ref:`read
preference <replica-set-read-preference>`:

- You can specify the read preference in the
  :option:`--uri connection string <mongoexport --uri>`

  .. code-block:: sh

     mongoexport --uri="mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/reporting?replicaSet=myReplicaSetName&readPreference=secondary" --collection=events --out=events.json [additional options]

  If specifying the read preference tags, include the
  :urioption:`readPreferenceTags` option:

  .. code-block:: sh

     mongoexport --uri="mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/reporting?replicaSet=myReplicaSetName&readPreference=secondary&readPreferenceTags=region:east" --collection=events --out=events.json [additional options]

  If using the :option:`--uri connection string <mongoexport --uri>`,
  specify the database as part of the string. You cannot use the
  command-line option :option:`--db <mongoexport --db>` in conjunction
  with the :option:`--uri connection string <mongoexport --uri>`.

- You can specify the read preference in using the
  :option:`--readPreference <mongoexport --readPreference>` command-line
  option. The command-line option takes a string if specifying only the read preference mode:

  .. code-block:: sh

     mongoexport --host="myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017" --readPreference=secondary --collection=events --db=reporting --out=events.json [additional options]

  Or, the command-line option can takes a quote-enclosed document 
  ``'{ mode: <mode>, tagSets: [ <tag1>, ... ], maxStalenessSeconds:<num>}'`` 
  to specify the mode, the optional :ref:`read preference tag
  sets <configure-read-pref-tags>`, and the optional
  :ref:`maxStalenessSeconds
  <replica-set-read-preference-max-staleness>`:
  
  .. code-block:: sh

     mongoexport --host="myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017" --readPreference='{mode: "secondary", tagSets: [ { "region": "east" } ]}' --collection=events --db=reporting --out=events.json [additional options]

For more information on the options available, see :ref:`mongoexport-options`.

Connect to a Sharded Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To connect to a sharded cluster to export its data, you can either:

- Specify the hostname of the :binary:`~bin.mongos` instance in the
  :option:`--uri connection string <mongoexport --uri>`

  .. code-block:: sh
  
     mongoexport --uri="mongodb://mongos0.example.com:27017/reporting" --collection=events --out=events.json [additional options]
  
  If using the :option:`--uri connection string <mongoexport --uri>`,
  specify the database as part of the string. You cannot use the
  command-line option :option:`--db <mongoexport --db>` in conjunction
  with the :option:`--uri connection string <mongoexport --uri>`.

- Specify the hostname and port of the :binary:`~bin.mongos` instance in the :option:`--host <mongoexport --host>` 

  .. code-block:: sh

     mongoexport --host="mongos0.example.com:27017" --collection=events --db=reporting --out=events.json[additional options]

By default, :binary:`~bin.mongoexport` reads from the primary of the
shard replica set. To override the default, you can specify the :ref:`read
preference <replica-set-read-preference>`:

- You can specify the read preference in the
  :option:`--uri connection string <mongoexport --uri>`

  .. code-block:: sh
  
     mongoexport --uri="mongodb://mongos0.example.com:27017/reporting?readPreference=secondary" --collection=events --out=events.json [additional options]

  If specifying the read preference tags, include the
  :urioption:`readPreferenceTags` option:

  .. code-block:: sh
  
     mongoexport --uri="mongodb://mongos0.example.com:27017/reporting?readPreference=secondary&readPreferenceTags=region:east" --collection=events --out=events.json [additional options]

  If using the :option:`--uri connection string <mongoexport --uri>`,
  specify the database as part of the string. You cannot use the
  command-line option :option:`--db <mongoexport --db>` in conjunction
  with the :option:`--uri connection string <mongoexport --uri>`.

- You can specify the read preference in using the
  :option:`--readPreference <mongoexport --readPreference>` command-line
  option.  The command-line option takes a string if specifying only the read preference mode:

  .. code-block:: sh
  
     mongoexport --host="mongos0.example.com:27017" --readPreference=secondary --collection=events --db=reporting --out=events.json [additional options]

  Or, the command-line option can takes a quote-enclosed document 
  ``'{ mode: <mode>, tagSets: [ <tag1>, ... ], maxStalenessSeconds:<num>}'`` 
  to specify the mode, the optional :ref:`read preference tag
  sets <configure-read-pref-tags>`, and the optional
  :ref:`maxStalenessSeconds
  <replica-set-read-preference-max-staleness>`:
  
  .. code-block:: sh

     mongoexport --host="mongos0.example.com:27017" --readPreference='{mode: "secondary", tagSets: [ { "region": "east" } ]}' --collection=events --db=reporting --out=events.json [additional options]

For more information on the options available, see :ref:`mongoexport-options`.

.. seealso::

   :ref:`mongoexport-examples`

Required Access
---------------

:binary:`~bin.mongoexport` requires read access on the target database.

Ensure that the connecting user possesses, at a minimum, the :authrole:`read`
role on the target database.

When connecting to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that enforces
:doc:`/core/authentication`, ensure you use the required security
parameters based on the configured
:ref:`authentication mechanism <available-authentication-mechanisms>`.

Behavior
--------

Type Fidelity
~~~~~~~~~~~~~

.. include:: /includes/fact-type-fidelity-loss.rst

Starting in version 4.2, :binary:`~bin.mongoexport`:

- Outputs data in :doc:`Extended JSON v2.0 (Relaxed mode)
  </reference/mongodb-extended-json>` by default.

- Outputs :doc:`Extended JSON v2.0 (Canonical mode)
  </reference/mongodb-extended-json>` if used with
  :option:`--jsonFormat <mongoexport --jsonFormat>`.
  
Earlier versions used :doc:`Extended JSON v1.0 (Canonical mode)
</reference/mongodb-extended-json-v1>`.

.. include:: /includes/fact-type-fidelity-loss-example.rst

FIPS
~~~~

.. include:: /includes/extracts/4.2-changes-fips-program.rst

Read Preference
~~~~~~~~~~~~~~~

By default, :binary:`~bin.mongoexport` uses read preference
:readmode:`primary`. To override the default, you can specify the
:ref:`read preference <replica-set-read-preference>` in the
:option:`--readPreference <mongoexport --readPreference>` command line
option or in the :option:`--uri connection string <mongoexport --uri>`.

Starting in version 4.2, if you specify read preference in the URI
string and the :option:`--readPreference <mongoexport
--readPreference>`, the :option:`--readPreference <mongoexport
--readPreference>` value overrides the read preference specified in the
URI string.

In earlier versions, the two options are incompatible.

.. _mongoexport-options:

Options
-------

.. binary:: mongoexport

.. program:: mongoexport

.. option:: --help

   Returns information on the options and use of :program:`mongoexport`.


.. option:: --verbose, -v

   Increases the amount of internal reporting returned on standard output
   or in log files. Increase the verbosity with the ``-v`` form by
   including the option multiple times, (e.g. ``-vvvvv``.)
   


.. option:: --quiet

   Runs :program:`mongoexport` in a quiet mode that attempts to limit the amount
   of output.

   This option suppresses:
   
   - output from :term:`database commands <database command>`
   
   - replication activity
   
   - connection accepted events
   
   - connection closed events


.. option:: --version

   Returns the :program:`mongoexport` release number.


.. option:: --uri=<connectionString>

   .. versionadded:: 3.4.6
   
   Specify a resolvable :doc:`URI </reference/connection-string/>`
   connection string (enclose in quotes) to connect to the MongoDB deployment.
   
   .. code-block:: none
   
      --uri="mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]"
   
   For information on the components of the connection string, see
   the :doc:`Connection String URI Format
   </reference/connection-string/>` documentation. 
   
   .. note::
   
      For TLS/SSL options, use the command-line options instead of the
      :ref:`URI options for TLS/SSL (Available starting in
      4.2)<uri-options-tls>`.
   

   .. important::
   
      The following command-line options cannot be used in conjunction
      with :option:`--uri` option:
   
      - :option:`--host`
      - :option:`--port`
      - :option:`--db`
      - :option:`--username`
      - :option:`--password`  (if the
        :doc:`URI </reference/connection-string/>` connection string also includes the password)
      - :option:`--authenticationDatabase`
      - :option:`--authenticationMechanism`
   
      Instead, specify these options as part of your :option:`--uri` 
      connection string.           


.. option:: --host=<hostname><:port>, -h=<hostname><:port>

   *Default*: localhost:27017

   Specifies a resolvable hostname for the :binary:`~bin.mongod` to which to
   connect. By default, the :program:`mongoexport` attempts to connect to a MongoDB
   instance running on the localhost on port number ``27017``.
   
   To connect to a replica set, specify the
   :setting:`~replication.replSetName` and a seed list of set members, as in
   the following:
   
   .. code-block:: none
   
      --host=<replSetName>/<hostname1><:port>,<hostname2><:port>,<...>
   
   When specifying the replica set list format, :program:`mongoexport` always connects to
   the :term:`primary <Primary>`. 
   
   You can also connect to any single member of the replica set by specifying
   the host and port of only that member:
   
   .. code-block:: none
   
      --host=<hostname1><:port>

   If you use IPv6 and use the ``<address>:<port>`` format, you must
   enclose the portion of an address and port combination in
   brackets (e.g. ``[<address>]``).
   
   .. note::
   
      You cannot specify both :option:`--host` and :option:`--uri`.


.. option:: --port=<port>

   *Default*: 27017

   Specifies the TCP port on which the MongoDB instance listens for
   client connections.
   
   .. note::
   
      You cannot specify both :option:`--port` and :option:`--uri`.


.. option:: --ipv6

   *Removed in version 3.0.*
   
   Enables IPv6 support and allows :program:`mongoexport` to connect to the
   MongoDB instance using an IPv6 network. Prior to MongoDB 3.0, you
   had to specify :option:`--ipv6` to use IPv6. In MongoDB 3.0 and later, IPv6
   is always enabled.


.. option:: --ssl

   Enables connection to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   TLS/SSL support enabled.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslCAFile=<filename>

   Specifies the :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   :file:`.pem` file using relative or absolute paths.
   
   .. include:: /includes/extracts/ssl-facts-ca-file.rst
   
   .. warning::
   
      **Version 3.2 and earlier:** For TLS/SSL connections (``--ssl``) to
      :binary:`~bin.mongod` and :binary:`~bin.mongos`, if the :program:`mongoexport` runs without the
      :option:`--sslCAFile`, :program:`mongoexport` will not attempt
      to validate the server certificates. This creates a vulnerability
      to expired :binary:`~bin.mongod` and :binary:`~bin.mongos` certificates as
      well as to foreign processes posing as valid :binary:`~bin.mongod` or
      :binary:`~bin.mongos` instances. Ensure that you *always* specify the
      CA file to validate the server certificates in cases where
      intrusion is a possibility.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --sslPEMKeyFile=<filename>

   Specifies the :file:`.pem` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the :file:`.pem` file using relative
   or absolute paths.
   
   This option is required when using the :option:`--ssl` option to connect
   to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   :setting:`~net.ssl.CAFile` enabled *without*
   :setting:`~net.ssl.allowConnectionsWithoutCertificates`.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslPEMKeyPassword=<value>

   Specifies the password to de-crypt the certificate-key file (i.e.
   :option:`--sslPEMKeyFile`). Use the :option:`--sslPEMKeyPassword` option only if the
   certificate-key file is encrypted. In all cases, the :program:`mongoexport` will
   redact the password from all logging and reporting output.
   
   If the private key in the PEM file is encrypted and you do not specify
   the :option:`--sslPEMKeyPassword` option, the :program:`mongoexport` will prompt for a passphrase. See
   :ref:`ssl-certificate-password`.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --sslCRLFile=<filename>

   Specifies the :file:`.pem` file that contains the Certificate Revocation
   List. Specify the file name of the :file:`.pem` file using relative or
   absolute paths.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslAllowInvalidCertificates

   Bypasses the validation checks for server certificates and allows
   the use of invalid certificates. When using the
   :setting:`~net.ssl.allowInvalidCertificates` setting, MongoDB logs as a
   warning the use of the invalid certificate.
   
   .. include:: /includes/extracts/ssl-facts-x509-invalid-certificate.rst
   
   .. include:: /includes/extracts/ssl-facts-invalid-cert-warning-clients.rst
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslAllowInvalidHostnames

   Disables the validation of the hostnames in TLS/SSL certificates. Allows
   :program:`mongoexport` to connect to MongoDB instances even if the hostname in their
   certificates do not match the specified hostname.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --username=<username>, -u=<username>

   Specifies a username with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the :option:`--password` and
   :option:`--authenticationDatabase` options.
   
   .. note::
   
      You cannot specify both :option:`--username` and :option:`--uri`.


.. option:: --password=<password>, -p=<password>

   Specifies a password with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the :option:`--username` and
   :option:`--authenticationDatabase` options.

   To prompt the user for the password, pass the :option:`--username`
   option without :option:`--password` or specify an empty string as the
   :option:`--password` value, as in ``--password ""`` .

   .. note::
   
      You cannot specify both :option:`--password` and :option:`--uri`.


.. option:: --authenticationDatabase=<dbname>

   Specifies the authentication database where the specified :option:`--username` has been created.
   See :ref:`user-authentication-database`.
   
   .. note::
   
      You cannot specify both :option:`--authenticationDatabase` and :option:`--uri`.

   If you do not specify an authentication database, :program:`mongoexport`
   assumes that the database specified to export holds the user's credentials.


.. option:: --authenticationMechanism=<name>

   *Default*: SCRAM-SHA-1

   Specifies the authentication mechanism the :program:`mongoexport` instance uses to
   authenticate to the :binary:`~bin.mongod` or :binary:`~bin.mongos`.
   
   .. versionchanged:: 4.0
   
      MongoDB removes support for the deprecated MongoDB
      Challenge-Response (``MONGODB-CR``) authentication mechanism.
   
      MongoDB adds support for SCRAM mechanism using the SHA-256 hash
      function (``SCRAM-SHA-256``).
   
   .. include:: /includes/list-table-auth-mechanisms.rst
   
   .. note::
   
      You cannot specify both :option:`--authenticationMechanism` and :option:`--uri`.


.. option:: --gssapiServiceName=<serviceName>

   Specify the name of the service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. Only required if the service does not use the
   default name of ``mongodb``.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --gssapiHostName=<hostname>

   Specify the hostname of a service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. *Only* required if the hostname of a machine does
   not match the hostname resolved by DNS.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --db=<database>, -d=<database>

   Specifies the name of the database on which to run the :program:`mongoexport`.
   
   .. note::
    
       You cannot specify both :option:`--db` and :option:`--uri`.


.. option:: --collection=<collection>, -c=<collection>

   Specifies the collection to export.
   


.. option:: --fields=<field1[,field2]>, -f=<field1[,field2]>

   Specifies a field or fields to *include* in the export. Use a comma
   separated list of fields to specify multiple fields.
   
   If any of your field names include white space, use
   quotation marks to enclose the field list. For example, if you wished
   to export two fields, ``phone`` and ``user number``, you would
   specify ``--fields "phone,user number"``.
   
   For :option:`csv <mongoexport --type>` output formats,
   :binary:`~bin.mongoexport` includes only the specified field(s), and the
   specified field(s) can be a field within a sub-document.
   
   For :term:`JSON` output formats, :binary:`~bin.mongoexport` includes
   only the specified field(s) **and** the ``_id`` field, and if the
   specified field(s) is a field within a sub-document, the
   :binary:`~bin.mongoexport` includes the sub-document with all
   its fields, not just the specified field within the document.
   
   See: :ref:`mongoexport-fields-example` for sample usage.
   


.. option:: --fieldFile=<filename>

   An alternative to :option:`--fields <mongoexport --fields>`. The
   :option:`--fieldFile` option allows you to
   specify in a file the field or fields to *include* in the export and is
   **only valid** with the :option:`--type <mongoexport --type>` option
   with value ``csv``. The
   file must have only one field per line, and the line(s) must end with
   the LF character (``0x0A``).
   
   :binary:`~bin.mongoexport` includes only the specified field(s). The
   specified field(s) can be a field within a sub-document.
   
   See :ref:`mongoexport-fieldFile-example` for sample usage.


.. option:: --query=<JSON>, -q=<JSON>

   Provides a query as a :term:`JSON document` (enclosed in quotes) to 
   return matching documents in the export. 
   
   .. include:: /includes/fact-quote-command-line-query.rst
   
   Starting in MongoDB 4.2, the query :red:`must` be in
   :doc:`Extended JSON v2 format (either relaxed or canonical/strict
   mode) </reference/mongodb-extended-json>`, including enclosing the
   field names and operators in quotes:
   
   For example, given a collection named ``records`` in the database
   ``test`` with the following documents:
   
   .. code:: json
   
      { "_id" : ObjectId("51f0188846a64a1ed98fde7c"), "a" : 1, "date" : ISODate("1960-05-01T00:00:00Z") }
      { "_id" : ObjectId("520e61b0c6646578e3661b59"), "a" : 1, "b" : 2, "date" : ISODate("1970-05-01T00:00:00Z") }
      { "_id" : ObjectId("520e642bb7fa4ea22d6b1871"), "a" : 2, "b" : 3, "c" : 5, "date" : ISODate("2010-05-01T00:00:00Z") }
      { "_id" : ObjectId("520e6431b7fa4ea22d6b1872"), "a" : 3, "b" : 3, "c" : 6, "date" : ISODate("2015-05-02T00:00:00Z") }
      { "_id" : ObjectId("520e6445b7fa4ea22d6b1873"), "a" : 5, "b" : 6, "c" : 8, "date" : ISODate("2018-03-01T00:00:00Z") }
      { "_id" : ObjectId("5cd0de910dbce4346295ae28"), "a" : 15, "b" : 5, "date" : ISODate("2015-03-01T00:00:00Z") }
   
   The following :binary:`~bin.mongoexport` uses the :option:`-q` option
   to export only the documents with the field ``a`` greater than or
   equal to (:query:`$gte`) to ``3`` and the field ``date`` less than
   ``ISODate("2016-01-01T00:00:00Z")`` (using the :ref:`extended JSON v2
   format (relaxed mode) for dates { "$date":
   "YYYY-MM-DDTHH:mm:ss.mmm\<offset\>"} <extended-json-date>`):
   
   .. code:: bash
   
      mongoexport -d=test -c=records -q='{ "a": { "$gte": 3 }, "date": { "$lt": { "$date": "2016-01-01T00:00:00.000Z" } } }' --out=exportdir/myRecords.json
   
   The resulting file contains the following documents:
   
   .. code:: json
   
      {"_id":{"$oid":"520e6431b7fa4ea22d6b1872"},"a":3.0,"b":3.0,"c":6.0,"date":{"$date":"2015-05-02T00:00:00Z"}}
      {"_id":{"$oid":"5cd0de910dbce4346295ae28"},"a":15.0,"b":5.0,"date":{"$date":"2015-03-01T00:00:00Z"}}
   
   You can sort the results with the :option:`--sort` option to
   :binary:`~bin.mongoexport`.
   


.. option:: --type=<string>

   *Default*: json

   Specifies the file type to export. Specify ``csv`` for :term:`CSV`
   format or ``json`` for :term:`JSON` format.
   
   If you specify ``csv``, then you must also use either
   the :option:`--fields` or the :option:`--fieldFile` option to
   declare the fields to export from the collection.
   


.. option:: --out=<file>, -o=<file>

   Specifies a file to write the export to. If you do not specify a file
   name, the :binary:`~bin.mongoexport` writes data to standard output
   (e.g. ``stdout``).
   


.. option:: --jsonFormat=<canonical|relaxed>
   
   *Default*: relaxed

   Modifies the output to use either canonical or relaxed mode of the
   :doc:`/reference/mongodb-extended-json` format.
   
   For differences between canonical and relaxed modes, see
   :doc:`/reference/mongodb-extended-json`.

.. option:: --jsonArray

   Modifies the output of :binary:`~bin.mongoexport` to write the
   entire contents of the export as a single :term:`JSON` array. By
   default :binary:`~bin.mongoexport` writes data using one JSON document
   for every MongoDB document.
   


.. option:: --pretty

   Outputs documents in a pretty-printed format JSON.
   


.. option:: --noHeaderLine

   .. versionadded:: 3.4
   
   By default, :program:`mongoexport` includes the exported field names as the first
   line in a CSV output. :option:`--noHeaderLine` directs :program:`mongoexport` to export the
   data without the list of field names.
   :option:`--noHeaderLine` is **only valid** with the
   :option:`--type <mongoexport --type>` option with value ``csv``.
   
   See :ref:`mongoexport-noHeaderLine-example` for sample usage.


.. option:: --slaveOk, -k

   .. deprecated:: 3.2
   
   Sets the :ref:`replica-set-read-preference` to :readmode:`nearest`,
   allowing :binary:`~bin.mongoexport` to read data from secondary
   :term:`replica set` members.
   
   :option:`--readPreference` replaces ``--slaveOk`` in MongoDB 3.2. You cannot
   specify ``--slaveOk`` when :option:`--readPreference` is specified.
   
   .. include:: /includes/warning-read-preference-mongos.rst
   


.. option:: --readPreference=<string|document>

   *Default*: :readmode:`primary`

   Specifies the :ref:`read preference<replica-set-read-preference>` for
   :program:`mongoexport`. The :option:`--readPreference` option can take:
   
   - A string if specifying only the read preference mode:
   
     .. code-block:: sh
   
        --readPreference=secondary
   
   - A quote-enclosed document to specify the mode, the optional
     :ref:`read preference tag sets <configure-read-pref-tags>`, and the
     optional :ref:`maxStalenessSeconds
     <replica-set-read-preference-max-staleness>`:
   
     .. code-block:: sh
   
        --readPreference='{mode: "secondary", tagSets: [ { "region": "east" } ], maxStalenessSeconds: 120}'
   
     If specifying the :ref:`maxStalenessSeconds
     <replica-set-read-preference-max-staleness>`, the value must be greater than or equal to 90.
     
     .. versionadded:: 4.2
   
   :program:`mongoexport` defaults to :readmode:`primary`
   :ref:`read preference <replica-set-read-preference>`.
   
   Starting in version 4.2, if the read
   preference is also included in the :option:`--uri connection string
   <--uri>`, the command-line :option:`--readPreference` overrides the read preference
   specified in the URI string.
   
   .. include:: /includes/warning-read-preference-mongos.rst


.. option:: --forceTableScan

   Forces :binary:`~bin.mongoexport` to scan the data store directly instead
   of traversing the ``_id`` field index. Use :option:`--forceTableScan` to skip the
   index. Typically there are two cases where this behavior is
   preferable to the default:
   
   1. If you have key sizes over 800 bytes that would not be present
      in the ``_id`` index.
   
   2. Your database uses a custom ``_id`` field.
   
   When you run with :option:`--forceTableScan`, :binary:`~bin.mongoexport` may return a
   document more than once if a write operation interleaves with the
   operation to cause the document to move.
   
   .. warning:: Use :option:`--forceTableScan` with extreme caution
      and consideration.


.. option:: --skip=<number>

   Use :option:`--skip` to control where :binary:`~bin.mongoexport` begins
   exporting documents. See :method:`~cursor.skip()` for information about
   the underlying operation.


.. option:: --limit=<number>

   Specifies a maximum number of documents to include in the
   export. See :method:`~cursor.limit()` for information about
   the underlying operation.
   


.. option:: --sort=<JSON>

   Specifies an ordering for exported results. If an index does
   **not** exist that can support the sort operation, the results must
   be *less than* 32 megabytes.
   
   Use :option:`--sort` conjunction with :option:`--skip` and
   :option:`--limit` to limit number of exported documents.
   
   .. code-block:: sh
   
      mongoexport -d=test -c=records --sort='{a: 1}' --limit=100 --out=export.0.json
      mongoexport -d=test -c=records --sort='{a: 1}' --limit=100 --skip=100 --out=export.1.json
      mongoexport -d=test -c=records --sort='{a: 1}' --limit=100 --skip=200 --out=export.2.json
   
   See :method:`~cursor.sort()` for information about the underlying
   operation.


.. _mongoexport-examples:

Examples
--------

Export in CSV Format
~~~~~~~~~~~~~~~~~~~~

.. _mongoexport-fields-example:

Export Data in CSV Format using ``--fields`` option
```````````````````````````````````````````````````

In the following example, :binary:`~bin.mongoexport` exports data from the
collection ``contacts`` collection in the ``users`` database in :term:`CSV`
format to the file ``/opt/backups/contacts.csv``.

The :binary:`~bin.mongod` instance that :binary:`~bin.mongoexport` connects to is
running on the localhost port number ``27017``.

When you export in CSV format, you must specify the fields in the documents
to export. The operation specifies the ``name`` and ``address`` fields
to export.

.. code-block:: sh

   mongoexport --db=users --collection=contacts --type=csv --fields=name,address --out=/opt/backups/contacts.csv

The output would then resemble:

.. code-block:: none

   name, address
   Sophie Monroe, 123 Example Road
   Charles Yu, 345 Sample Street

.. _mongoexport-fieldFile-example:

Use a File to Specify the Fields to Export in CSV Format
````````````````````````````````````````````````````````

For CSV exports only, you can also specify the fields in a file
containing the line-separated list of fields to export. The file must
have only one field per line.

For example, you can specify the ``name`` and ``address`` fields in a
file ``fields.txt``:

.. code-block:: none

   name
   address

Then, using the :option:`--fieldFile <mongoexport --fieldFile>` option, specify the fields to export with
the file:

.. code-block:: sh

   mongoexport --db=users --collection=contacts --type=csv --fieldFile=fields.txt --out=/opt/backups/contacts.csv

.. _mongoexport-noHeaderLine-example:

Exclude Field Names from CSV Output
```````````````````````````````````

.. versionadded:: 3.4

MongoDB 3.4 added the :option:`--noHeaderLine <mongoexport --noHeaderLine>` option for excluding the
field names in a CSV export. The following example exports the ``name``
and ``address`` fields in the ``contacts`` collection in the ``users``
database and uses :option:`--noHeaderLine <mongoexport --noHeaderLine>` to suppress the output
of the field names as the first line:

.. code-block:: sh

   mongoexport --db=users --collection=contacts --type=csv --fields=name,address --noHeaderLine --out=/opt/backups/contacts.csv

The CSV output would then resemble:

.. code-block:: none

   Sophie Monroe, 123 Example Road
   Charles Yu, 345 Sample Street

Export in JSON Format
~~~~~~~~~~~~~~~~~~~~~

This example creates an export of the ``contacts`` collection from the
MongoDB instance running on the localhost port number ``27017``. This
writes the export to the ``contacts.json`` file in :term:`JSON` format.

.. code-block:: sh

   mongoexport --db=sales --collection=contacts --out=contacts.json

Export from Remote Host Running with Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example exports the ``contacts`` collection in the
``marketing`` database from a remote MongoDB instance that requires
authentication.

Specify the:

- :option:`--host <mongoexport --host>`

- :option:`--port <mongoexport --port>`

- :option:`--username <mongoexport --username>`

- :option:`--authenticationDatabase <mongoexport --authenticationDatabase>`

- :option:`--collection <mongoexport --collection>`

- :option:`--db <mongoexport --db>`

- :option:`--out <mongoexport --out>`

.. tip::

   Omit the :option:`--password <mongoexport --password>` option to
   have ``mongoexport`` prompt for the password:

.. code-block:: sh

   mongoexport --host=mongodb1.example.net --port=27017 --username=someUser --authenticationDatabase=admin --collection=contacts --db=marketing --out=mdb1-examplenet.json


Alternatively, you use the :option:`--uri <mongoexport --uri>` option to specify the host, port, username, authentication database, and db.

.. tip::

   Omit the password in the URI string to have ``mongoexport`` prompt
   for the password:

.. code-block:: sh

   mongoexport --uri='mongodb://someUser@mongodb0.example.com:27017/marketing?authsource=admin' --collection=contacts --out=mdb1-examplenet.json

Export Query Results
~~~~~~~~~~~~~~~~~~~~
You can export only the results of a query by supplying a query filter with
the :option:`--query <mongoexport --query>` option, and limit the results to a single
database using the ":option:`--db <mongoexport --db>`" option.

For instance, this command returns all documents in the ``sales``
database's ``contacts`` collection that contain a field named ``dept``
equal to ``"ABC"`` and the field ``date`` greater than or equal to
ISODate("2018-01-01") (using the :ref:`canonical format for dates
{ "$date": "YYYY-MM-DDTHH:mm:ss.mmm\<offset\>"} <extended-json-date>` )

.. code-block:: sh

   mongoexport --db=sales --collection=contacts --query='{"dept": "ABC", date: { $gte: { "$date": "2018-01-01T00:00:00.000Z" } }}'

.. include:: /includes/fact-quote-command-line-query.rst
