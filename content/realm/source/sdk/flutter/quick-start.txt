.. meta::
   :robots: noindex, nosnippet

.. _flutter-quick-start:
.. _flutter-quick-start-local:

=========================
Quick Start - Flutter SDK
=========================

.. meta:: 
   :description: Get started using Atlas Device SDK with Flutter. 
   :keywords: code example

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page contains information to quickly get Realm
integrated into your Flutter app.

Before you begin, ensure you have:

- :ref:`Installed the Flutter SDK <flutter-install>`

.. _flutter-define-object-model:

Define Your Object Model
------------------------

Your application's **data model** defines the structure of data
stored within Realm.
You can define your application's data model via Dart
classes in your application code with
a Realm object schema.
You then have to generate the :flutter-sdk:`RealmObjectBase <realm/RealmObjectBase-mixin.html>`
class that's used within your application.

For more information, refer to :ref:`Define a Realm Object Schema <flutter-define-realm-object-schema>`.

Create Data Model
~~~~~~~~~~~~~~~~~

To define your application's data model, add a Realm model class
definition to your application code.

Some considerations when defining your Realm model class:

- Import package at the top of your class definition file.

- In your file, give your class a private name (starting with ``_``),
  such as a file ``car.dart`` with a class ``_Car``.
  You generate the public RealmObject class using the command in the following
  Generate RealmObject Class section. This command
  outputs a public class, such as ``Car``.

- Make sure to include the generated file name, such as ``part car.realm.dart``,
  before the code defining your model.
  This is required to generate the RealmObject class.

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      .. literalinclude:: /examples/generated/flutter/car.snippet.define-model-flutter.dart
         :language: dart
         :caption: car.dart

   .. tab:: Dart
      :tabid: dart

      .. literalinclude:: /examples/generated/flutter/car.snippet.define-model-dart.dart
         :language: dart
         :caption: car.dart

.. _flutter-generate-realmobject-class:

Generate RealmObject Class
~~~~~~~~~~~~~~~~~~~~~~~~~~

Now generate a RealmObject class ``Car`` from the data model class ``Car``:

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      .. code-block::

         dart run realm generate

   .. tab:: Dart
      :tabid: dart

      .. code-block::

         dart run realm_dart generate

Running this creates a ``Car`` class in a ``car.realm.dart`` file located in the directory
where you defined the model class per the preceding Create Data Model section.
This ``Car`` class is public and part of the same library
as the ``_Car`` data model class.
The generated ``Car`` class is what's used throughout your application.

If you'd like to watch your data model class to generate a new ``Car`` class whenever
there's a change to ``_Car``, run:

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      .. code-block::

         dart run realm generate --watch

   .. tab:: Dart
      :tabid: dart

      .. code-block::

         dart run realm_dart generate --watch

Open a Realm
------------

Use the :flutter-sdk:`Configuration <realm/Configuration-class.html>` class
to control the specifics of the realm you
would like to open, including schema and whether the realm is local-only or synced.

Pass your configuration to the :flutter-sdk:`Realm constructor <realm/Realm-class.html>`
to generate an instance of that realm:

.. literalinclude:: /examples/generated/flutter/open_realm_test.snippet.open-realm.dart
   :language: dart

You can now use that realm instance to work with objects in the database.

For more information, refer to :ref:`Configure and Open a Realm <flutter-open-close-realm>`.

Work with Realm Objects
-----------------------

Once you've opened a realm, you can create objects within it using a
:flutter-sdk:`write transaction block <realm/Realm/write.html>`.

For more information, refer to :ref:`flutter-write-transactions`.

Create Objects
~~~~~~~~~~~~~~

To create a new ``Car``, instantiate an instance of the
``Car`` class and add it to the realm in a write transaction block:

.. literalinclude:: /examples/generated/flutter/quick_start_test.snippet.create-realm-object.dart
   :language: dart

Update Objects
~~~~~~~~~~~~~~

To modify a car, update its properties in a write transaction block:

.. literalinclude:: /examples/generated/flutter/quick_start_test.snippet.update-realm-object.dart
   :language: dart

Query for Objects
~~~~~~~~~~~~~~~~~

Retrieve a collection of all objects of a data model in the realm with the
:flutter-sdk:`Realm.all() <realm/Realm/all.html>` method:

.. literalinclude:: /examples/generated/flutter/quick_start_test.snippet.query-all-realm-objects.dart
   :language: dart

Filter a collection to retrieve a specific segment
of objects with the :flutter-sdk:`Realm.query() <realm/Realm/query.html>` method.
In the ``query()`` method's argument,
use :ref:`Realm Query Language operators<rql-operators>` to perform filtering.

.. literalinclude:: /examples/generated/flutter/quick_start_test.snippet.query-realm-objects-with-filter.dart
   :language: dart

Delete Objects
~~~~~~~~~~~~~~

Delete a car by calling the :flutter-sdk:`Realm.delete() <realm/Realm/delete.html>`
method in a write transaction block:

.. literalinclude:: /examples/generated/flutter/quick_start_test.snippet.delete-one-realm-object.dart
   :language: dart

React to Changes
~~~~~~~~~~~~~~~~

Listen and respond to changes to a query, a single object, or a list within an object.
The change listener is a Stream that invokes a callback function with an containing
changes since last invocation as its argument.

To listen to a query, use  :flutter-sdk:`RealmResults.changes.listen()
<realm/RealmResultsChanges-class.html>`.

.. literalinclude:: /examples/generated/flutter/react_to_changes_test.snippet.query-change-listener.dart
   :language: dart

You can pause and resume subscriptions as well.

.. literalinclude:: /examples/generated/flutter/react_to_changes_test.snippet.pause-resume-subscription.dart
   :language: dart

Once you've finished listening to changes, close the change listener to prevent memory leaks.

.. literalinclude:: /examples/generated/flutter/react_to_changes_test.snippet.cancel-subscription.dart
   :language: dart

For more information, refer to :ref:`React to Changes <flutter-react-to-changes>`.

Close a Realm
-------------

Once you've finished working with a realm, close it to prevent memory leaks.

.. literalinclude:: /examples/generated/flutter/open_realm_test.snippet.close-realm.dart
   :language: dart

Sync Realm with MongoDB Atlas
-----------------------------

You can integrate Realm and
:ref:`Atlas Device Sync <sync>` into your Flutter app.
Atlas Device Sync is an MongoDB Atlas App Service that synchronizes data between
a client application and a MongoDB database cluster on Atlas.

To synchronize data with Atlas using Device Sync, the Flutter SDK uses
:ref:`Flexible Sync <flexible-sync>`. Flexible Sync lets you define a query for
the data that you synchronize from the client app.

.. note::

   You do not need to add Device Sync to use Realm locally.

Prerequisites
~~~~~~~~~~~~~

Before you can use Device Sync with Realm in your client app,
you must configure Device Sync using Atlas App Services:

#. :ref:`Create an App Services App <create-a-realm-app>`
#. :ref:`Enable Anonymous Authentication <anonymous-authentication>`
#. :ref:`Enable Flexible Sync <enable-flexible-sync>`. Set ``owner_id`` as a 
   **queryable field**.
#. :ref:`Define the rules <define-roles-and-permissions>` that determine which 
   permissions users have when using Device Sync. For this example, we assign 
   a default role, which applies to any collection that does not have a 
   collection-specific role. In this example, a user can read and write data 
   where the ``user.id`` of the logged-in user matches the ``owner_id`` of the 
   object:

   .. literalinclude:: /includes/quick-start-default-role.json
      :language: json

Now, deploy your application updates.

.. tip:: Use Realm Flutter Template App

   If you want a working Flutter app with Device Sync already set up in the client
   and on that App Service backend, use the :ref:`Flutter Template App <template-apps>`
   ``flutter.todo.flex``.

Initialize App Services
~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/access-app-id.rst

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.init-app.dart
   :language: dart

For more information, refer to :ref:`Connect to App Services <flutter-connect-to-backend>`.

Authenticate a User
~~~~~~~~~~~~~~~~~~~

After you have enabled :ref:`anonymous authentication <anonymous-authentication>` in the
App Services UI, users can immediately log into your app without providing any identifying
information:

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.log-in.dart
   :language: dart

For more information, refer to :ref:`Authenticate a User <flutter-authenticate>`.

Open a Synced Realm
~~~~~~~~~~~~~~~~~~~

Once you have enabled Device Sync and authenticated a user,
open a synced realm with :flutter-sdk:`Configuration.flexibleSync() <realm/Configuration/flexibleSync.html>`.
Then, pass the configuration to :flutter-sdk:`Realm() <realm/Realm-class.html>`
to open an instance of the realm. The synced realm **must** have a different
:flutter-sdk:`Configuration.path <realm/Configuration/path.html>`
from other opened local-only realms.

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.open-sync-realm.dart
   :language: dart

For more information, refer to :ref:`Open a Synced Realm <flutter-open-synced-realm>`.

Add a Sync Subscription
~~~~~~~~~~~~~~~~~~~~~~~

Now create a subscription to synchronize data with Atlas using Device Sync.
Add the subscription within the :flutter-sdk:`SubscriptionSet.update() <realm/SubscriptionSet/update.html>`
callback function.

The update block callback function, includes a :flutter-sdk:`MutableSubscriptionSet()
<realm/MutableSubscriptionSet-class.html>` object as an argument.
Use ``MutableSubscriptionSet.add()`` to add a new subscription.

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.add-sync-subscription.dart
   :language: dart

For more information, refer to :ref:`Manage Sync Subscriptions <flutter-flexible-sync-manage-subscriptions>`.

Further Examples and Next Steps
-------------------------------

- To get started with a pre-made Flutter application using the Realm SDK and an
  Atlas App Services backend set up, use the :ref:`Flutter template app <template-apps>`,
  ``flutter.todo.flex``.
- For a guided experience of adding the Realm SDK with Device Sync
  to a Flutter app, read the :ref:`Realm Flutter SDK Tutorial <flutter-tutorial>`.
- For further examples of the Flutter SDK methods described above and more,
  refer to the :github:`Realm Dart Samples Github repo <realm/realm-dart-samples>`.

