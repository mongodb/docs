.. _read-operations-indexing:

==================
Query Optimization
==================

.. default-domain:: mongodb

Indexes improve the efficiency of read operations by reducing the
amount of data that query operations need to process. This simplifies
the work associated with fulfilling queries within MongoDB.

Create an Index to Support Read Operations
------------------------------------------

If your application queries a collection on a particular field or set of
fields, then an index on the queried field or fields can prevent the
query from scanning the whole collection to find and return the query
results. For more information about indexes, see the :doc:`complete
documentation of indexes in MongoDB</core/indexes>`.

.. example:: An application queries the ``inventory`` collection on the
   ``type`` field. The value of the ``type`` field is user-driven.

   .. code-block:: javascript

      var typeValue = <someUserInput>;
      db.inventory.find( { type: typeValue } );

   To improve the performance of this query, add an ascending, or a
   descending, index to the ``inventory`` collection on the ``type``
   field. [#ensureIndexOrder]_ In the :program:`mongo` shell, you can
   create indexes using the :method:`db.collection.ensureIndex()`
   method:

   .. code-block:: javascript

      db.inventory.ensureIndex( { type: 1 } )

   This index can prevent the above query on ``type`` from scanning the
   whole collection to return the results.

To analyze the performance of the query with an index, see
:doc:`/tutorial/analyze-query-plan`.

In addition to optimizing read operations, indexes can support sort
operations and allow for a more efficient storage utilization. See
:method:`db.collection.ensureIndex()` and
:doc:`/administration/indexes` for more information about index
creation.

.. [#ensureIndexOrder]
   For single-field indexes, the selection between ascending and
   descending order is immaterial. For compound indexes, the selection
   is important. See :ref:`indexing order
   <index-ascending-and-descending>` for more details.

.. _read-operations-query-selectivity:

Query Selectivity
-----------------

Some query operations are not selective. These operations cannot use
indexes effectively or cannot use indexes at all.

The inequality operators :query:`$nin` and :query:`$ne` are not
very selective, as they often match a large portion of the index. As a
result, in most cases, a :query:`$nin` or :query:`$ne` query with
an index may perform no better than a :query:`$nin` or
:query:`$ne` query that must scan all documents in a collection.

Queries that specify regular expressions, with inline JavaScript
regular expressions or :query:`$regex` operator expressions, cannot
use an index with one exception. Queries that specify regular
expression *with anchors* at the beginning of a string *can* use an
index.

.. _read-operations-covered-query:

Covering a Query
----------------

An index :ref:`covers <indexes-covered-queries>` a query when both of the
following apply:

- all the fields in the :ref:`query <read-operations-query-document>`
  are part of an index.

- all the fields returned in the results are in the same index.

For example, consider a collection ``users`` with documents of the following
form:

.. code-block:: javascript

   { _id: 1, user: { login: "tester" } }

The collection has the following indexes:

.. code-block:: none

   { user: 1 }

   { "user.login": 1 }

The ``{ user: 1 }`` index covers the following query:

.. code-block:: none

   db.users.find( { user: { login: "tester" } }, { user: 1, _id: 0 } )

However, the ``{ "user.login": 1 }`` index does **not** cover the
following query:

.. code-block:: none

   db.users.find( { "user.login": "tester" }, { "user.login": 1, _id: 0 } )

The query does still use the ``{ "user.login": 1 }`` index to find matching
documents.


Performance
~~~~~~~~~~~

Because the index contains all fields required by the query, MongoDB can both
match the :ref:`query conditions <read-operations-query-document>`
and return the results using only the index.

Querying *only* the index can be much faster than querying documents
outside of the index. Index keys are typically smaller than the
documents they catalog, and indexes are typically available in RAM or
located sequentially on disk.

Given a collection ``inventory`` with the following index on the
``type`` and ``item`` fields:

.. code-block:: javascript

  db.users.ensureIndex( { type: 1, item: 1 } )

This index will cover the following query on the ``type`` and ``item``
fields, returning only the ``item`` field:

.. code-block:: javascript

  db.inventory.find( { type: "food", item:/^c/ },
                     { item: 1, _id: 0 } )

For the index to cover the query, the projection document must explicitly
specify ``_id: 0`` to exclude the unindexed ``_id`` field from the result.

Limitations
~~~~~~~~~~~

An index **cannot** cover a query if:

- any of the indexed fields in any of the documents in the collection
  includes an array. If an indexed field is an array, the index becomes
  a :ref:`multi-key index <index-type-multikey>` index and cannot
  support a covered query.

- any of the indexed fields are fields in subdocuments. To index fields
  in subdocuments, use :term:`dot notation`.

- The query is against a :term:`primary` on a :term:`sharded <shard>`
  collection.

To determine whether a query is a covered query, use the
:method:`~cursor.explain()` method. If the :method:`~cursor.explain()`
output displays ``true`` for the :data:`~explain.indexOnly` field, an
index covers the query, and MongoDB queries only that index to
match the query **and** return the results.

For more information see :ref:`indexes-measuring-use`.
