.. _upgrade-to-x509-internal-authentication:

===========================================================
Upgrade from Keyfile Authentication to x.509 Authentication
===========================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

To upgrade clusters that are currently using :ref:`keyfile authentication
<internal-auth-keyfile>` to x.509 authentication, use the following
rolling upgrade processes.

.. note::

   .. include:: /includes/fact-tls-1.0.rst

.. |binary| replace:: MongoDB

.. _upgrade-to-x509-tls:

Upgrade Procedures (Using ``tls`` Options)
------------------------------------------

.. note::

   Starting in version 4.2, MongoDB provides ``net.tls`` settings (and
   corresponding ``--tls`` command-line options) that corresponds to
   the ``net.ssl`` settings (and their corresponding ``--ssl``
   command-line options). The new ``tls`` settings/options provide
   **identical** functionality as the ``ssl`` settings/options since
   MongoDB has always supported TLS 1.0 and later.

   The procedures in this section use the ``tls`` settings/options. For
   procedures using the ``ssl`` settings/options, see :ref:`upgrade-to-x509-ssl`.

.. _upgrade-sslkeyfile-to-x509-tls:

Upgrade (Using ``tls`` Options) Clusters Using TLS/SSL and Keyfile 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   The procedure uses the ``tls`` settings/options. For procedures
   using the ``ssl`` settings/options, see
   :ref:`upgrade-sslkeyfile-to-x509-ssl`.
   
For clusters using TLS/SSL and keyfile authentication, to upgrade to x.509
cluster authentication, use the following rolling upgrade process:

#. For each member of a cluster, add the following settings to the
   :ref:`configuration file <conf-file>` and restart:

   - :setting:`security.clusterAuthMode`
         Set to ``sendKeyFile``. With this setting value, each node continues
         to send its keyfile to authenticate itself as a member.
         However, each node can receive either a keyfile or an x.509
         certificate from other members to authenticate those members.

   - :setting:`net.tls.clusterFile`
         Set to the appropriate path of the node's certificate key file
         for membership authentication. The
         :binary:`~bin.mongod`/:binary:`~bin.mongos` presents this file
         to other members of the cluster to identify itself as a member.

   Include other :doc:`TLS/SSL options </tutorial/configure-ssl>` and
   any other options as appropriate for your specific configuration.

   For example:

   .. code-block:: yaml
      :emphasize-lines: 6-8

      net:
         tls:
            mode: requireTLS
            certificateKeyFile: /etc/ssl/mongodb.pem
            CAFile: /etc/ssl/caToValidateReceivedCertificates.pem
            clusterFile: "/etc/ssl/myReplMembershipCertificateKeyFile.pem"
      security:
         clusterAuthMode: sendKeyFile
         keyFile: /my/securely/located/membershipkey
      replication:
         replSetName: myReplicaSet
      net:
         bindIp: localhost,mongodb0.example.net
         port: 27017
      systemLog:
         destination: file
         path: "/var/log/mongodb/mongod.log"
         logAppend: true
      storage:
         dbPath: "/var/lib/mongodb"
      processManagement:
         fork: true

   Update all nodes of the cluster to include the
   :setting:`security.clusterAuthMode` and
   :setting:`net.tls.clusterFile` settings before continuing.

#. Connect to each node and use the
   :dbcommand:`setParameter` command to update the :parameter:`clusterAuthMode`
   to ``sendX509``. [#update-mode-alternative]_

   .. code-block:: sh

      db.adminCommand( { setParameter: 1, clusterAuthMode: "sendX509" } )

   With ``sendX509``, each node sends its
   :setting:`net.tls.clusterFile` to authenticate itself as a member.
   However, each node can receive either a keyfile or an x.509
   certificate from other members to authenticate those members.

   Upgrade all nodes of the cluster to this setting before continuing.

#. Optional but recommended. Finally, for each node of the cluster,
   connect to the node and use the :dbcommand:`setParameter` command to
   update the :parameter:`clusterAuthMode` to ``x509`` to only use the
   x.509 certificate for authentication. [#update-mode-alternative]_

   .. code-block:: sh

      db.adminCommand( { setParameter: 1, clusterAuthMode: "x509" } )

#. After the upgrade of all nodes, edit the :doc:`configuration file
   </reference/configuration-options>` with the appropriate x.509
   settings to ensure that upon subsequent restarts, the cluster uses
   x.509 authentication.  For example:

   .. code-block:: yaml
      :emphasize-lines: 7

      net:
         tls:
            mode: requireTLS
            certificateKeyFile: /etc/ssl/mongodb.pem
            CAFile: /etc/ssl/caToValidateReceivedCertificates.pem
            clusterFile: "/etc/ssl/myReplMembershipCertificateKeyFile.pem"
      security.clusterAuthMode: x509
      replication:
         replSetName: myReplicaSet
      net:
         bindIp: localhost,mongodb0.example.net
         port: 27017
      systemLog:
         destination: file
         path: "/var/log/mongodb/mongod.log"
         logAppend: true
      storage:
         dbPath: "/var/lib/mongodb"
      processManagement:
         fork: true

.. seealso::
   You can also configure :binary:`~bin.mongod` and
   :binary:`~bin.mongos` using command-line options instead of the
   configuration file:

   - For :binary:`~bin.mongod`, see:
     - :option:`--tlsMode <mongod --tlsMode>`
     - :option:`--tlsCertificateKeyFile <mongod --tlsCertificateKeyFile>`
     - :option:`--tlsCAFile <mongod --tlsCAFile>`
     - :option:`--tlsClusterFile <mongod --tlsClusterFile>`
     - :option:`--clusterAuthMode <mongod --clusterAuthMode>`
     
   - For  :binary:`~bin.mongos`, see:
     - :option:`--tlsMode <mongos --tlsMode>`
     - :option:`--tlsCertificateKeyFile <mongos --tlsCertificateKeyFile>`
     - :option:`--tlsCAFile <mongos --tlsCAFile>`
     - :option:`--tlsClusterFile <mongos --tlsClusterFile>`
     - :option:`--clusterAuthMode <mongos --clusterAuthMode>`


.. _upgrade-keyfile-to-x509-tls:

Update (Using ``tls`` Options) Clusters Using Keyfile but Not TLS/SSL
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   The procedure uses the ``tls`` options. For procedures using the
   ``ssl`` settings/options, see :ref:`upgrade-keyfile-to-x509-ssl`.

For clusters using keyfile authentication but not TLS/SSL, to upgrade
to x.509 membership authentication and TLS/SSL connections:

#. For each member of a cluster, add the following settings to the
   :ref:`configuration file <conf-file>` and restart:

   - :setting:`net.tls.mode`
         Set to ``allowTLS``. This value allows the node to accept
         both TLS/SSL and non-TLS/non-SSL incoming connections. Its
         outgoing connections do not use TLS/SSL.

   - :setting:`net.tls.certificateKeyFile`
         Set to the path of the file that contains the TLS/SSL
         certificate and key. The
         :binary:`~bin.mongod`/:binary:`~bin.mongos` presents this file
         to its clients to establish the instance's identity. Required
         when using TLS/SSL.

   - :setting:`net.tls.clusterFile`
         Set to the appropriate path of the node's certificate key file
         for membership authentication. The
         :binary:`~bin.mongod`/:binary:`~bin.mongos` presents this file
         to other members of the cluster to identify itself as a member.

   - :setting:`net.tls.CAFile`
         Set to the path of the file that contains the certificate
         chain for verifying received certificates.

   - :setting:`security.clusterAuthMode`
         Set to ``sendKeyFile``. This allows each node continues to
         send its keyfile to authenticate itself as a member. However,
         each node can receive either a keyfile or an x.509 certificate
         from other members to authenticate those members.

   Include other :doc:`TLS/SSL options </tutorial/configure-ssl>` and
   any other options as appropriate for your specific configuration.

   For example:

   .. code-block:: yaml
      :emphasize-lines: 1-8

      net:
         tls:
            mode: allowTLS
            certificateKeyFile: /etc/ssl/mongodb.pem
            clusterFile: "/etc/ssl/myReplMembershipCertificateKeyFile.pem" 
            CAFile: /etc/ssl/caToValidateReceivedCertificates.pem
      security:
         clusterAuthMode: sendKeyFile
         keyFile: /my/securely/located/membershipkey
      replication:
         replSetName: myReplicaSet
      net:
         bindIp: localhost,mongodb0.example.net
         port: 27017
      systemLog:
         destination: file
         path: "/var/log/mongodb/mongod.log"
         logAppend: true
      storage:
         dbPath: "/var/lib/mongodb"
      processManagement:
         fork: true

   Upgrade all nodes of the cluster to include :setting:`net.tls.mode`,
   :setting:`net.tls.certificateKeyFile`,
   :setting:`net.tls.clusterFile`, and
   :setting:`security.clusterAuthMode`.

#. Connect to each node and use the
   :dbcommand:`setParameter` command [#update-mode-alternative]_ to:
   
   a. Update the :parameter:`tlsMode`
      to ``preferSSL``. With the :parameter:`tlsMode` set to
      ``preferTLS``, the node accepts both TLS/SSL and non-TLS/non-SSL
      incoming connections, and its outgoing connections use TLS/SSL.
     
   #. Update the :parameter:`clusterAuthMode` to ``sendX509``.
      With the :parameter:`clusterAuthMode` set to ``sendX509``, each
      node sends its :setting:`net.tls.clusterFile` to authenticate
      itself as a member. However, each node continues to accept either
      a keyfile or an x.509 certificate from other members to
      authenticate those members.

   .. code-block:: sh

      db.adminCommand( { setParameter: 1, tlsMode: "preferTLS" } );
      db.adminCommand( { setParameter: 1, clusterAuthMode: "sendX509" } );

   Upgrade all nodes of the cluster to these settings before continuing.

#. After the upgrade of all nodes, edit the :doc:`configuration file
   </reference/configuration-options>` with the appropriate TLS/SSL and
   x.509 settings to ensure that upon subsequent restarts, the cluster
   uses x.509 authentication.

   .. code-block:: yaml
      :emphasize-lines: 3,8

      net:
         tls:
            mode: preferTLS
            certificateKeyFile: /etc/ssl/mongodb.pem
            clusterFile: "/etc/ssl/myReplMembershipCertificateKeyFile.pem" 
            CAFile: /etc/ssl/caToValidateReceivedCertificates.pem
      security:
         clusterAuthMode: sendX509
      replication:
         replSetName: myReplicaSet
      net:
         bindIp: localhost,mongodb0.example.net
         port: 27017
      systemLog:
         destination: file
         path: "/var/log/mongodb/mongod.log"
         logAppend: true
      storage:
         dbPath: "/var/lib/mongodb"
      processManagement:
         fork: true


   .. note::
   
      At this point, 
      
      - The nodes in the cluster use TLS/SSL connections. However, the
        nodes can accept non-TLS/SSL connections from client
        applications.
      
      - The nodes send their x.509 certificates for membership
        authentication, but can accept either x.509 certificates or
        keyfiles from other nodes to verify the other nodes' membership.
      
      To enforce TLS/SSL connections from client applications as well
      as only accept x.509 for membership authentication, see next step.

#. *Optional but recommended.* Update all nodes to use only ``TLS/SSL``
   connections and only x.509 certificate for membership authentication.

   .. important::

      This TLS/SSL connection requirement applies to all connections;
      that is, with the clients as well as with the members of the
      cluster. That is, clients must specify TLS/SSL connections and
      presents its certificate key file when connecting to the cluster.
      See :ref:`mongo-connect-require-client-certificates-tls` for more
      information on connecting with TLS/SSL. See also
      :ref:`ssl-mongod-weak-certification`.

   Update the :setting:`net.tls.mode` to ``requireTLS`` and
   :setting:`security.clusterAuthMode` to ``x509``.

   For example:

   .. code-block:: yaml
      :emphasize-lines: 3,8

      net:
         tls:
            mode: requireTLS
            certificateKeyFile: /etc/ssl/mongodb.pem
            clusterFile: "/etc/ssl/myReplMembershipCertificateKeyFile.pem" 
            CAFile: /etc/ssl/caToValidateReceivedCertificates.pem
      security:
         clusterAuthMode: x509 
      replication:
         replSetName: myReplicaSet
      net:
         bindIp: localhost,mongodb0.example.net
         port: 27017
      systemLog:
         destination: file
         path: "/var/log/mongodb/mongod.log"
         logAppend: true
      storage:
         dbPath: "/var/lib/mongodb"
      processManagement:
         fork: true

.. seealso::
   You can also configure :binary:`~bin.mongod` and
   :binary:`~bin.mongos` using command-line options instead of the
   configuration file:

   - For :binary:`~bin.mongod`, see:
     - :option:`--tlsMode <mongod --tlsMode>`
     - :option:`--tlsCertificateKeyFile <mongod --tlsCertificateKeyFile>`
     - :option:`--tlsCAFile <mongod --tlsCAFile>`
     - :option:`--tlsClusterFile <mongod --tlsClusterFile>`
     - :option:`--clusterAuthMode <mongod --clusterAuthMode>`
     
   - For  :binary:`~bin.mongos`, see:
     - :option:`--tlsMode <mongos --tlsMode>`
     - :option:`--tlsCertificateKeyFile <mongos --tlsCertificateKeyFile>`
     - :option:`--tlsCAFile <mongos --tlsCAFile>`
     - :option:`--tlsClusterFile <mongos --tlsClusterFile>`
     - :option:`--clusterAuthMode <mongos --clusterAuthMode>`
     
.. _upgrade-to-x509-ssl:

Upgrade Procedures (Using ``ssl`` Options)
------------------------------------------

.. note::

   Starting in version 4.2, MongoDB provides ``net.tls`` settings (and
   corresponding command-line options) that corresponds to the
   ``net.ssl`` settings (and their corresponding command-line options).
   The ``tls`` settings/options provide **identical** functionality as
   the ``ssl`` settings/options since MongoDB has always supported TLS
   1.0 and later.

   The procedures in this section use the ``ssl`` options. For
   procedures using the ``tls`` options, see
   :ref:`upgrade-to-x509-tls`.

.. _upgrade-sslkeyfile-to-x509-ssl:

Clusters Currently Using TLS/SSL (Using ``ssl`` Options)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   The procedure uses the ``ssl`` options. For procedures using the
   ``tls`` options (available starting in MongoDB 4.2), see
   :ref:`upgrade-sslkeyfile-to-x509-ssl`.

For clusters using TLS/SSL and keyfile authentication, to upgrade to x.509
cluster authentication, use the following rolling upgrade process:

#. For each node of a cluster, start the node with the option
   :option:`--clusterAuthMode <mongod --clusterAuthMode>` set to ``sendKeyFile`` and the option
   :option:`--sslClusterFile <mongod --sslClusterFile>` set to the appropriate path of the node's
   certificate. Include other :doc:`TLS/SSL options
   </tutorial/configure-ssl>` as well as any other options that are
   required for your specific configuration. For example:

   .. code-block:: sh

      mongod --replSet <name> --sslMode requireSSL --clusterAuthMode sendKeyFile --sslClusterFile <path to membership certificate and key PEM file> --sslPEMKeyFile <path to TLS/SSL Certificate and key PEM file>  --sslCAFile <path to root CA PEM file> --bind_ip localhost,<hostname(s)|ip address(es)>

   With this setting, each node continues to use its keyfile to
   authenticate itself as a member. However, each node can now accept
   either a keyfile or an x.509 certificate from other members to
   authenticate those members. Upgrade all nodes of the cluster to
   this setting.

#. Then, for each node of a cluster, connect to the node and use the
   :dbcommand:`setParameter` command to update the :parameter:`clusterAuthMode`
   to ``sendX509``. [#update-mode-alternative]_ For example,

   .. code-block:: sh

      db.adminCommand( { setParameter: 1, clusterAuthMode: "sendX509" } )

   With this setting, each node uses its x.509 certificate, specified
   with the :option:`--sslClusterFile <mongod --sslClusterFile>` option in the previous step, to
   authenticate itself as a member. However, each node continues to
   accept either a keyfile or an x.509 certificate from other members
   to authenticate those members. Upgrade all nodes of the cluster to
   this setting.

#. Optional but recommended. Finally, for each node of the cluster,
   connect to the node and use the :dbcommand:`setParameter` command to
   update the :parameter:`clusterAuthMode` to ``x509`` to only use the
   x.509 certificate for authentication. [#update-mode-alternative]_
   For example:

   .. code-block:: sh

      db.adminCommand( { setParameter: 1, clusterAuthMode: "x509" } )

#. After the upgrade of all nodes, edit the :doc:`configuration file
   </reference/configuration-options>` with the appropriate x.509
   settings to ensure that upon subsequent restarts, the cluster uses
   x.509 authentication.

See :option:`--clusterAuthMode <mongod --clusterAuthMode>` for the various modes and their
descriptions.

.. _upgrade-keyfile-to-x509-ssl:

Clusters Currently Not Using TLS/SSL  (Using ``ssl`` Options)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   The procedure uses the ``ssl`` options. For procedures using the
   ``tls`` options (available starting in MongoDB 4.2), see
   :ref:`upgrade-keyfile-to-x509-tls`.

For clusters using keyfile authentication but not TLS/SSL, to upgrade to
x.509 authentication, use the following rolling upgrade process:

#. For each node of a cluster, start the node with the option
   :option:`--sslMode <mongod --sslMode>` set to ``allowSSL``, the option
   :option:`--clusterAuthMode <mongod --clusterAuthMode>` set to ``sendKeyFile`` and the option
   :option:`--sslClusterFile <mongod --sslClusterFile>` set to the appropriate path of the node's
   certificate. Include other :doc:`TLS/SSL options
   </tutorial/configure-ssl>` as well as any other options that are
   required for your specific configuration. For example:

   .. code-block:: sh

      mongod --replSet <name> --sslMode allowSSL --clusterAuthMode sendKeyFile --sslClusterFile <path to membership certificate and key PEM file> --sslPEMKeyFile <path to TLS/SSL certificate and key PEM file> --sslCAFile <path to root CA PEM file> --bind_ip localhost,<hostname(s)|ip address(es)>

   The :option:`--sslMode allowSSL <mongod --sslMode>` setting allows the
   node to accept both TLS/SSL and non-TLS/non-SSL incoming connections. Its
   outgoing connections do not use TLS/SSL.

   The :option:`--clusterAuthMode sendKeyFile <mongod --clusterAuthMode>`
   setting allows each node continues to use its keyfile to
   authenticate itself as a member. However, each node can now accept
   either a keyfile or an x.509 certificate from other members to
   authenticate those members.

   Upgrade all nodes of the cluster to these settings.

#. Then, for each node of a cluster, connect to the node and use the
   :dbcommand:`setParameter` command to update the :parameter:`sslMode`
   to ``preferSSL`` and the :parameter:`clusterAuthMode` to
   ``sendX509``. [#update-mode-alternative]_ For example:

   .. code-block:: sh

      db.adminCommand( { setParameter: 1, sslMode: "preferSSL", clusterAuthMode: "sendX509" } )

   With the :parameter:`sslMode` set to ``preferSSL``, the node accepts
   both TLS/SSL and non-TLS/non-SSL incoming connections, and its outgoing
   connections use TLS/SSL.

   With the :parameter:`clusterAuthMode` set to ``sendX509``, each node
   uses its x.509 certificate, specified with the
   :option:`--sslClusterFile <mongod --sslClusterFile>` option in the previous step, to
   authenticate itself as a member. However, each node continues to
   accept either a keyfile or an x.509 certificate from other members
   to authenticate those members.

   Upgrade all nodes of the cluster to these settings.

#. Optional but recommended. Finally, for each node of the cluster,
   connect to the node and use the :dbcommand:`setParameter` command to
   update the :parameter:`sslMode` to ``requireSSL`` and the
   :parameter:`clusterAuthMode` to ``x509``. [#update-mode-alternative]_
   For example:

   .. code-block:: sh

      db.adminCommand( { setParameter: 1, sslMode: "requireSSL", clusterAuthMode: "x509" } )

   With the :parameter:`sslMode` set to ``requireSSL``, the node only uses
   TLS/SSLs connections.

   With the :parameter:`clusterAuthMode` set to ``x509``, the node only
   uses the x.509 certificate for authentication.

#. After the upgrade of all nodes, edit the :doc:`configuration file
   </reference/configuration-options>` with the appropriate TLS/SSL and
   x.509 settings to ensure that upon subsequent restarts, the cluster
   uses x.509 authentication.

See :option:`--clusterAuthMode <mongod --clusterAuthMode>` for the various modes and their
descriptions.

.. [#update-mode-alternative] As an alternative to using the
   :dbcommand:`setParameter` command, you can also
   restart the nodes with the appropriate TLS/SSL and x509 options and
   values.
