.. meta::
   :robots: nosnippet

.. _sync-data-in-atlas-with-client:

============================================
Sync Data in Atlas with a Client Application
============================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

If your organization already has data in MongoDB Atlas, you can sync that
data to client devices using Device Sync and Realm Database. Follow these
high-level steps to get started:

Set up Atlas Access
-------------------

.. procedure::

   .. step:: Create an Atlas App Services App

      The App Services application is the gateway that enables your client 
      device to connect to MongoDB Atlas. When you create an App, you name
      it, link it to an Atlas cluster, and specify the deployment model and
      deployment region that work best for your application.

      To learn how to create an App Services App, see :ref:`Create an
      App <create-app>`.

   .. step:: Configure Device Sync

      Device Sync is the service that manages synchronizing your Atlas data 
      with your client devices. Device Sync, together with the Realm SDKs,
      automatically manages network connectivity, conflict resolution, user
      authentication, and user permissions and data access.

      When you configure Device Sync, you specify the data source that the 
      client devices can access, as well as the permissions that determine
      what data a user can read and write.

      You can configure Device Sync via the :ref:`Atlas UI, the Atlas App 
      Services Command Line Interface, or the App Services Admin API 
      <enable-flexible-sync>`. The first time you configure Device Sync, 
      you may find it helpful to use the Atlas UI as it provides links and 
      information about various settings and options.

   .. step:: Enable an Authentication Provider

      Your client users must authenticate in order to access synced data.
      App Services provides several authentication providers to enable 
      your users to authenticate. Configure one or more of these authentication
      providers to enable authentication in your client application.

      You can configure authentication providers within the App Services App 
      UI by selecting :guilabel:`Authentication` in the left navigation menu, 
      and then click a provider to configure it. You can also configure 
      authentication providers by editing the App Services configuration 
      with the :ref:`Atlas App Services Command Line Interface 
      <appconfig-auth>`, or the `App Services Admin API 
      <{+base-url+}{+admin-api-page+}tag/authproviders>`__.
   
   .. step:: Generate Client Object Models

      When you already have data in Atlas, you can generate object models
      that match that data to use in your client application.
      
      To generate an object model, you must have an App Services schema.
      Once you have a schema, you can generate object models that match that 
      schema. You can select a programming language to use to generate the 
      schema, which you can then view and copy to use in your client 
      application code.

      You can generate a schema from existing Atlas data using the App 
      Services UI. For more information on how to do this, refer to: 
      :ref:`create-rom-from-schema`.

      Once you have a schema, you can generate a Realm object model using 
      the :ref:`App Services UI or the Atlas App Services Command Line 
      Interface <generate-sdk-object-models>`.

Add Sync to the Client Application
----------------------------------

After this, you've got everything set up that you need on the Atlas side,
and you can prepare your client application to sync data. Device Sync
synchronizes data with Atlas using a Realm Database SDK. You can use the 
Realm SDK in your client application code to connect to Atlas and sync 
data with a Realm Database on the device.

.. procedure::

   .. step:: Connect the client to an App Services backend

      In your client application code, initialize an App client to connect
      your client to your App Services backend. This lets your client use
      App Services features like authentication, and enables opening a 
      synced realm.

      - :ref:`Connect to an Atlas App Services Backend - C++ SDK <cpp-connect-to-backend>`
      - :ref:`Connect to App Services - Flutter SDK <flutter-connect-to-backend>`
      - :ref:`Connect to an Atlas App Services backend - Java SDK <java-init-appclient>`
      - :ref:`Connect to an Atlas App Services backend - Kotlin SDK <kotlin-connect-to-backend>`
      - :ref:`Connect to an Atlas App Services Backend - .NET SDK <dotnet-init-appclient>`
      - :ref:`Connect to an Atlas App Services Backend - Node.js SDK <node-connect-to-mongodb-realm-backend-app>`
      - :ref:`Connect to an Atlas App Services Backend - React Native SDK <react-native-connect-to-mongodb-realm-backend-app>`
      - :ref:`Connect to an Atlas App Services backend - Swift SDK <ios-init-appclient>`

   .. step:: Authenticate a User

      Your client application user must be authenticated with the App Services
      backend in order to access synchronized data. Add logic to your 
      client app to register and log in users.

      - :ref:`Authenticate Users - C++ SDK <cpp-authenticate-users>`
      - :ref:`Authenticate Users - Flutter SDK <flutter-authenticate>`
      - :ref:`Authenticate Users - Java SDK <java-authenticate>`
      - :ref:`Authenticate Users - Kotlin SDK <kotlin-authenticate>`
      - :ref:`Authenticate Users - .NET SDK <dotnet-authenticate>`
      - :ref:`Authenticate Users - Node.js SDK <node-authenticate-users>`
      - :ref:`Authenticate Users - React Native SDK <react-native-authenticate-users>`
      - :ref:`Authenticate Users - Swift SDK <ios-authenticate-users>`

   .. step:: Open a Synced Realm

      Once you have an authenticated user, you can open a synchronized 
      instance of Realm Database to use for that user. 
      
      You define a Flexible Sync query subscription in your client 
      code to determine what data to sync to the client application. 
      Device Sync looks for Atlas documents that match the query, which 
      the user has permission to read and possibly write, and synchronizes 
      those documents to the client device as Realm objects. You can add, 
      remove, or update Flexible Sync query subscriptions to change the 
      documents that sync to the device.

      - C++ SDK
        
        - :ref:`Open a Synced Realm - C++ SDK <cpp-open-synced-realm>`
        - :ref:`Manage Sync Subscriptions - C++ SDK <cpp-manage-flexible-sync-subscriptions>`

      - Flutter SDK

        - :ref:`Open a Synced Realm - Flutter SDK <flutter-open-synced-realm>`
        - :ref:`Manage Flexible Sync Subscriptions - Flutter SDK <flutter-flexible-sync-manage-subscriptions>`

      - Java SDK

        - :ref:`Open a Synced Realm - Java SDK <java-synced-realms>`
        - :ref:`Flexible Sync - Java SDK <java-flexible-sync>`


      - Kotlin SDK

        - :ref:`Open a Synced Realm - Kotlin SDK <kotlin-open-a-synced-realm>`
        - :ref:`Subscribe to Queryable Fields - Kotlin SDK <kotlin-subscriptions>`

      - .NET SDK

        - :ref:`Configure & Open a Synced Realm - .NET SDK <dotnet-configure-and-open-a-synced-realm>`
        - :ref:`Manage Flexible Sync Subscriptions - .NET SDK <dotnet-flexible-sync>`

      - Node.js SDK

        - :ref:`Open a Synced Realm - Node.js SDK <node-open-a-synced-realm>`
        - :ref:`Flexible Sync - Node.js SDK <node-flexible-sync>`

      - React Native SDK

        - :ref:`Open & Close a Realm - React Native SDK <react-native-open-a-synced-realm>`
        - :ref:`Flexible Sync - React Native SDK <react-native-flexible-sync>`

      - Swift SDK

        - :ref:`Configure & Open a Synced Realm - Swift SDK <ios-configure-and-open-a-synced-realm>`
        - :ref:`Manage Flexible Sync Subscriptions - Swift SDK <swift-manage-flexible-sync-subscriptions>`

   .. step:: Use the Synced Realm

      The syntax to read, write, and watch for changes on a synced realm 
      is identical to the syntax for non-synced realms. While you work with 
      local data, a background thread efficiently integrates, uploads, and 
      downloads changesets. When a user who has write permissions makes 
      changes on the device, the data persists locally. When the user has 
      a network connection, the data automatically syncs back to Atlas 
      and other devices.

      For a quick guide to how to do common tasks with Realm Database, refer
      to the Realm SDK quick starts. 

      If you prefer to study a working client app to learn, some of the SDKs 
      provide :ref:`a working Device Sync app <template-apps>`, which we call
      template apps. Optionally, you can go through SDK-specific tutorials 
      that build on the Device Sync template app.

      - C++ SDK

        - :ref:`Quick Start - C++ SDK <cpp-client-quick-start-with-sync>`

      - Flutter SDK

        - :ref:`Quick Start - Flutter SDK <flutter-quick-start>`
        - :ref:`Device Sync Tutorial - Flutter SDK <flutter-tutorial>`

      - Java SDK

        - :ref:`Quick Start with Sync - Java SDK <java-client-quick-start-sync>`

      - Kotlin SDK

        - :ref:`Quick Start - Kotlin SDK <kotlin-client-quick-start>`
        - :ref:`Device Sync Tutorial - Android with Kotlin SDK <kotlin-tutorial>`

      - .NET SDK

        - :ref:`Quick Start - .NET SDK <dotnet-client-quick-start>`
        - :ref:`Device Sync Tutorial - Xamarin (Android & iOS) <dotnet-tutorial>`

      - Node.js SDK

        - :ref:`Quick Start - Node.js SDK <node-client-quick-start>`
      
      - React Native SDK

        - :ref:`Quick Start  - React Native SDK <react-native-client-quick-start>`
        - :ref:`Device Sync Tutorial - React Native <react-native-tutorial>`

      - Swift SDK

        - :ref:`Quick Start - Swift SDK <ios-client-quick-start>`
        - :ref:`Quick Start - SwiftUI <ios-swiftui-examples>`
        - :ref:`Device Sync Tutorial - SwiftUI <ios-swift-tutorial>`

