.. _entity-framework-whats-new:

==========
What's New
==========

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: update, new feature, deprecation, upgrade

Learn what's new in:

* :ref:`Version 9.0 <entity-framework-version-9.0>`
* :ref:`Version 8.3 <entity-framework-version-8.3>`
* :ref:`Version 8.2.3 <entity-framework-version-8.2.3>`
* :ref:`Version 8.2.2 <entity-framework-version-8.2.2>`
* :ref:`Version 8.2.1 <entity-framework-version-8.2.1>`
* :ref:`Version 8.2 <entity-framework-version-8.2>`
* :ref:`Version 8.1 <entity-framework-version-8.1>`

.. important::

   To ensure that the provider major version number aligns with
   {+framework-core+} versions, the {+provider-long+} does not limit breaking
   changes to major version releases. Instead, breaking and significant changes
   are made in minor version releases.

.. _entity-framework-version-9.0:

What's New in 9.0
-----------------

The 9.0 provider release includes the following new features:

- New features and changes also included in the :ref:`8.3 release <entity-framework-version-8.3>`

- Upgrades the {+framework-core+} version dependency to 9.0

To learn more about breaking changes in version 9.0, see the
:ref:`entity-framework-breaking-changes-v9.0` section.

.. _entity-framework-version-8.3:

What's New in 8.3
-----------------

The 8.3 provider release includes the following new features:

- Adds support for setting BSON representation on ``PropertiesConfigurationBuilder``.

- Adds configuration-level support for ``HasDateTimeKind()``.

- Changes behavior to apply ``HasBsonRepresentation`` to nullable properties. To
  learn more, see :ref:`entity-framework-breaking-changes-v8.3` in the
  :ref:`entity-framework-upgrade-provider` guide.

- Changes behavior to allow testing for nullabilty for navigation collections.

.. _entity-framework-version-8.2.3:

What's New in 8.2.3
-------------------

The 8.2.3 provider release includes the following new features:

- Adds support for top-level scalar aggregations such as ``Sum``, ``Average``,
  ``Min``, and ``Max``

- Adds support for ``ObjectId`` generation when using the ``string`` type for
  the ``_id`` property

- Changes behavior to no longer throw an error when the Bson element is missing for an
  owned collection

.. _entity-framework-version-8.2.2:

What's New in 8.2.2
-------------------

The 8.2.2 provider release includes the following new features:

- Updates the ``DbUpdateConcurrencyException`` error message to include the 
  types of entities responsible for the error

- Adds support for value converters against nullable properties

- Adds support for using the ``HasIndex()`` method on owned entities

- Adds support for byte array types

.. _entity-framework-version-8.2.1:

What's New in 8.2.1
-------------------

The 8.2.1 provider release includes the following new features:

- Adds support for {+framework+}
  `shadow properties, <https://learn.microsoft.com/en-us/ef/core/modeling/shadow-properties>`__
  properties that aren't defined in your .NET entity class but are
  included in the {+framework-core+} model and mapped to the database.

- Adds support for using the 
  `HasIndex() <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.metadata.builders.entitytypebuilder-1.hasindex?view=efcore-{+ef-core-version+}>`__ 
  {+framework+} Fluent API method to create indexes for a property when you create
  a database.

  The following example shows how to specify indexes for the ``Customer.Name``,
  ``Order.OrderRef``, ``Address.ZipCode``, and ``Documents.DocRef`` properties:

  .. code-block:: csharp

     var context = MyContext.CreateCollectionOptions(database.MongoDatabase, mb =>
     {
         mb.Entity<Customer>().HasIndex(c => c.Name);
         mb.Entity<Order>().HasIndex(o => o.OrderRef).IsUnique();
         mb.Entity<Address>().HasIndex(o => o.ZipCode, "custom_index_name");
         mb.Entity<Documents>()
           .HasIndex(d => d.DocRef)
           .HasCreateIndexOptions(new CreateIndexOptions { Sparse = true });
     });

     var result = context.Database.EnsureCreated();

- Adds support for the `MQL.Exists() <{+driver-api-root+}/MongoDB.Driver/MongoDB.Driver.Mql.Exists.html>`__,
  `MQL.IsMissing() <{+driver-api-root+}/MongoDB.Driver/MongoDB.Driver.Mql.IsMissing.html>`__,
  and `MQL.IsNullOrMissing() <{+driver-api-root+}/MongoDB.Driver/MongoDB.Driver.Mql.IsNullOrMissing.html>`__
  methods in LINQ queries. These methods work with both real and shadow properties.

.. _entity-framework-version-8.2:

What's New in 8.2
-----------------

The 8.2 provider release includes the following new features:

- Adds support for type discriminators
- Adds support for v3.0 of the {+csharp-driver-long+}
- Adds support for ``TimeOnly`` and ``DateOnly`` CLR types

.. _entity-framework-version-8.1:

What's New in 8.1
-----------------

.. warning:: Breaking Changes

   The v8.1 provider introduces the following breaking changes:

   - The {+provider-short+} runs all changes as MongoDB transactions. If your
     application uses a {+mdb-server+} version earlier than v5.0, or does not run in a
     replica set, you must reconfigure your application.
   - Changed the default GUID storage format from ``CSharpLegacy`` binary
     format to ``Standard`` format.
   - Modified the ``IMongoClientWrapper`` interface to provide service
     registration for the ``MongoClientWrapper`` class. You should not implement the
     ``IMongoClientWrapper`` interface in your application.
   - The ``CamelCaseElementNameConvention`` cases owned entities based on their
     property name instead of their class name.

   For more information about these breaking changes, see
   :ref:`entity-framework-breaking-changes-v8.1` in the Upgrade Provider Version guide.

The 8.1 provider release includes the following new features:

- Support for optimistic concurrency through the following:

  - ``IsConcurrencyToken()`` method or the ``ConcurrencyCheck()`` attribute
  - ``IsRowVersion()`` method or the ``Timestamp`` attribute

- Support for mapping ``Dictionary`` and ``ReadOnlyDictionary`` properties

For more information about this release, see the :github:`v8.1.0 release notes
<mongodb/mongo-efcore-provider/releases/tag/v8.1.0>`.
