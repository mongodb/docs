==========
createUser
==========

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: createUser

   .. |local-cmd-name| replace:: :dbcommand:`createUser`

   Creates a new user on the database where you run the command. The
   :dbcommand:`createUser` command returns a *duplicate user* error if the
   user exists.
   The :dbcommand:`createUser` command uses the following syntax:

   .. code-block:: javascript

      { createUser: "<name>",
        pwd: "<cleartext password>",
        customData: { <any information> },
        roles: [
          { role: "<role>", db: "<database>" } | "<role>",
          ...
        ],
        writeConcern: { <write concern> }
      }

   :dbcommand:`createUser` has the following fields:

   .. include:: /reference/command/createUser-field.rst

   .. include:: /includes/fact-roles-array-contents.rst

.. TODO rename section (or make it subsection or something)

Behavior
--------

Encryption
~~~~~~~~~~

:dbcommand:`createUser` sends password to the MongoDB instance in
cleartext. To encrypt the password in transit, use :doc:`SSL
</tutorial/configure-ssl>`.

External Credentials
~~~~~~~~~~~~~~~~~~~~

Users created on the ``$external`` database should have credentials
stored externally to MongoDB, as, for example, with :doc:`MongoDB
Enterprise installations that use Kerberos
</tutorial/control-access-to-mongodb-with-kerberos-authentication>`.

``local`` Database
~~~~~~~~~~~~~~~~~~

You cannot create users on the local database.

.. _createUser-required-access:

Required Access
---------------

.. include:: /includes/access-create-user.rst

Example
-------

The following :dbcommand:`createUser` command creates a user ``accountAdmin01`` on the
``products`` database. The command gives ``accountAdmin01`` the
``clusterAdmin`` and ``readAnyDatabase`` roles on the ``admin`` database
and the ``readWrite`` role on the ``products`` database:

.. code-block:: javascript

   db.getSiblingDB("products").runCommand( { createUser: "accountAdmin01",
                                             pwd: "cleartext password",
                                             customData: { employeeId: 12345 },
                                             roles: [
                                                      { role: "clusterAdmin", db: "admin" },
                                                      { role: "readAnyDatabase", db: "admin" },
                                                      "readWrite"
                                                    ],
                                             writeConcern: { w: "majority" , wtimeout: 5000 }
                                          } )
