===================
$rank (aggregation)
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. versionadded:: 5.0

.. group:: $rank

Returns the document position (known as the rank) relative to other
documents in the :pipeline:`$setWindowFields` stage :ref:`partition
<setWindowFields-partitionBy>`.

The :pipeline:`$setWindowFields` stage :ref:`sortBy
<setWindowFields-sortBy>` field value determines the document rank. For
more information on how MongoDB compares fields with different types,
see :ref:`BSON comparison order <bson-types-comparison-order>`.

If multiple documents occupy the same rank, :group:`$rank` places
the document with the subsequent value at a rank with a gap
(see :ref:`rank-behavior`).

:group:`$rank` is only available in the :pipeline:`$setWindowFields`
stage.

:group:`$rank` syntax:

.. code-block:: none
   :copyable: false

   { $rank: { } }

:group:`$rank` does not accept any parameters.

.. seealso::

   :group:`$denseRank`

.. _rank-behavior:

Behavior
--------

.. include:: /includes/rank-and-denseRank-behavior.rst

See the example in :ref:`rank-duplicate-null-missing-values-example`.

Examples
--------

.. include:: /includes/setWindowFields-example-collection.rst

Rank Partitions by an Integer Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example uses :group:`$rank` in the :pipeline:`$setWindowFields`
stage to output the ``quantity`` rank of the cake sales for each
``state``:

.. code-block:: javascript

   db.cakeSales.aggregate( [
      {
         $setWindowFields: {
            partitionBy: "$state",
            sortBy: { quantity: -1 },
            output: {
               rankQuantityForState: {
                  $rank: {}
               }
            }
         }
      }
   ] )

In the example:

.. include:: /includes/setWindowFields-partition-sort-quantity.rst

- ``output`` sets the ``rankQuantityForState`` field to the ``quantity``
  rank using :group:`$rank`, as shown in the following results.

.. code-block:: javascript
   :copyable: false

   { "_id" : 4, "type" : "strawberry", "orderDate" : ISODate("2019-05-18T16:09:01Z"),
     "state" : "CA", "price" : 41, "quantity" : 162, "rankQuantityForState" : 1 }
   { "_id" : 2, "type" : "vanilla", "orderDate" : ISODate("2021-01-11T06:31:15Z"),
     "state" : "CA", "price" : 12, "quantity" : 145, "rankQuantityForState" : 2 }
   { "_id" : 0, "type" : "chocolate", "orderDate" : ISODate("2020-05-18T14:10:30Z"),
     "state" : "CA", "price" : 13, "quantity" : 120, "rankQuantityForState" : 3 }
   { "_id" : 1, "type" : "chocolate", "orderDate" : ISODate("2021-03-20T11:30:05Z"),
     "state" : "WA", "price" : 14, "quantity" : 140, "rankQuantityForState" : 1 }
   { "_id" : 5, "type" : "strawberry", "orderDate" : ISODate("2019-01-08T06:12:03Z"),
     "state" : "WA", "price" : 43, "quantity" : 134, "rankQuantityForState" : 2 }
   { "_id" : 3, "type" : "vanilla", "orderDate" : ISODate("2020-02-08T13:13:23Z"),
     "state" : "WA", "price" : 13, "quantity" : 104, "rankQuantityForState" : 3 }

Rank Partitions by a Date Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example shows how to use dates with :group:`$rank` in the
:pipeline:`$setWindowFields` stage to output the ``orderDate`` rank of
the cake sales for each ``state``:

.. code-block:: javascript

   db.cakeSales.aggregate( [
      {
         $setWindowFields: {
            partitionBy: "$state",
            sortBy: { orderDate: 1 },
            output: {
               rankOrderDateForState: {
                  $rank: {}
               }
            }
         }
      }
   ] )

In the example:

.. include:: /includes/setWindowFields-partition-sort-date.rst

- ``output`` sets the ``rankOrderDateForState`` field to the
  ``orderDate`` rank using :group:`$rank`, as shown in the following
  results.

.. code-block:: javascript
   :copyable: false

   { "_id" : 4, "type" : "strawberry", "orderDate" : ISODate("2019-05-18T16:09:01Z"),
     "state" : "CA", "price" : 41, "quantity" : 162, "rankOrderDateForState" : 1 }
   { "_id" : 0, "type" : "chocolate", "orderDate" : ISODate("2020-05-18T14:10:30Z"),
     "state" : "CA", "price" : 13, "quantity" : 120, "rankOrderDateForState" : 2 }
   { "_id" : 2, "type" : "vanilla", "orderDate" : ISODate("2021-01-11T06:31:15Z"),
     "state" : "CA", "price" : 12, "quantity" : 145, "rankOrderDateForState" : 3 }
   { "_id" : 5, "type" : "strawberry", "orderDate" : ISODate("2019-01-08T06:12:03Z"),
     "state" : "WA", "price" : 43, "quantity" : 134, "rankOrderDateForState" : 1 }
   { "_id" : 3, "type" : "vanilla", "orderDate" : ISODate("2020-02-08T13:13:23Z"),
     "state" : "WA", "price" : 13, "quantity" : 104, "rankOrderDateForState" : 2 }
   { "_id" : 1, "type" : "chocolate", "orderDate" : ISODate("2021-03-20T11:30:05Z"),
     "state" : "WA", "price" : 14, "quantity" : 140, "rankOrderDateForState" : 3 }

.. _rank-duplicate-null-missing-values-example:

Rank Partitions Containing Duplicate Values, Nulls, or Missing Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/setWindowFields-duplicates-example-collection.rst

This example uses :group:`$rank` in the :pipeline:`$setWindowFields`
stage to output the ``quantity`` rank from the
``cakeSalesWithDuplicates`` collection for each ``state``:

.. code-block:: javascript

   db.cakeSalesWithDuplicates.aggregate( [
      {
         $setWindowFields: {
            partitionBy: "$state",
            sortBy: { quantity: -1 },
            output: {
               rankQuantityForState: {
                  $rank: {}
               }
            }
         }
      }
   ] )

In the example:

.. include:: /includes/setWindowFields-partition-sort-quantity.rst

- ``output`` sets the ``rankOrderDateForState`` field to the
  ``quantity`` rank using :group:`$rank`.

In the following example output:

- Documents with the same ``quantity`` and ``state`` have the same rank.
  If documents have the same rank, there is a gap between that rank and
  the next rank.

- The document with the ``null`` ``quantity`` and then the document with
  the missing ``quantity`` are ranked the lowest in the output for the
  ``CA`` partition. This sorting is the result of the :ref:`BSON
  comparison order <bson-types-comparison-order>`, which sorts ``null``
  and missing values after number values in this example.

.. code-block:: javascript
   :copyable: false

   { "_id" : 4, "type" : "strawberry", "orderDate" : ISODate("2019-05-18T16:09:01Z"),
     "state" : "CA", "price" : 41, "quantity" : 162, "rankQuantityForState" : 1 }
   { "_id" : 9, "type" : "strawberry", "orderDate" : ISODate("2020-05-11T16:09:01Z"),
     "state" : "CA", "price" : 39, "quantity" : 162, "rankQuantityForState" : 1 }
   { "_id" : 2, "type" : "vanilla", "orderDate" : ISODate("2021-01-11T06:31:15Z"),
     "state" : "CA", "price" : 12, "quantity" : 145, "rankQuantityForState" : 3 }
   { "_id" : 0, "type" : "chocolate", "orderDate" : ISODate("2020-05-18T14:10:30Z"),
     "state" : "CA", "price" : 13, "quantity" : 120, "rankQuantityForState" : 4 }
   { "_id" : 10, "type" : "strawberry", "orderDate" : ISODate("2020-05-11T16:09:01Z"),
     "state" : "CA", "price" : 39, "quantity" : null, "rankQuantityForState" : 5 }
   { "_id" : 11, "type" : "strawberry", "orderDate" : ISODate("2020-05-11T16:09:01Z"),
     "state" : "CA", "price" : 39, "rankQuantityForState" : 6 }
   { "_id" : 1, "type" : "chocolate", "orderDate" : ISODate("2021-03-20T11:30:05Z"),
     "state" : "WA", "price" : 14, "quantity" : 140, "rankQuantityForState" : 1 }
   { "_id" : 5, "type" : "strawberry", "orderDate" : ISODate("2019-01-08T06:12:03Z"),
     "state" : "WA", "price" : 43, "quantity" : 134, "rankQuantityForState" : 2 }
   { "_id" : 6, "type" : "strawberry", "orderDate" : ISODate("2020-01-08T06:12:03Z"),
     "state" : "WA", "price" : 41, "quantity" : 134, "rankQuantityForState" : 2 }
   { "_id" : 7, "type" : "strawberry", "orderDate" : ISODate("2020-01-01T06:12:03Z"),
     "state" : "WA", "price" : 34, "quantity" : 134, "rankQuantityForState" : 2 }
   { "_id" : 8, "type" : "strawberry", "orderDate" : ISODate("2020-01-02T06:12:03Z"),
     "state" : "WA", "price" : 40, "quantity" : 134, "rankQuantityForState" : 2 }
   { "_id" : 3, "type" : "vanilla", "orderDate" : ISODate("2020-02-08T13:13:23Z"),
     "state" : "WA", "price" : 13, "quantity" : 104, "rankQuantityForState" : 6 }
