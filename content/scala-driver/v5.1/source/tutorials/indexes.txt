.. _scala-indexes:

==============
Create Indexes
==============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, optimize, covered query

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Indexes support the efficient execution of queries in MongoDB. To
create an index on a field or fields, pass an index specification
document to the ``MongoCollection.createIndex()`` method.

The {+driver-short+} provides the :ref:`scala-builders-indexes` class that includes
static factory methods to create index specification documents for the
various MongoDB index key types. To learn more about index types, see
:manual:`Indexes </indexes/>` in the Server manual.

.. note::

   MongoDB only creates an index if an index of the same specification
   does not already exist.

Prerequisites
-------------

You must include the following import statements in your program to run the
code examples in this guide:

.. code-block:: scala

   import org.mongodb.scala._
   
   import org.mongodb.Indexes
   import org.mongodb.IndexOptions
   import org.mongodb.Filters

.. include:: /includes/obs-note.rst

Connect to a MongoDB Deployment
-------------------------------

.. include:: /includes/connect-section.rst

Ascending Index
---------------

To create a specification for an ascending index, use the
``Indexes.ascending()`` static helper method.

Single Ascending Index
~~~~~~~~~~~~~~~~~~~~~~

The following example creates an ascending index on the ``name`` field:

.. code-block:: scala

   collection.createIndex(Indexes.ascending("name"))
             .printResults()

Compound Ascending Index
~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates an ascending compound index on the
``stars`` field and the ``name`` field:

.. code-block:: scala

   collection.createIndex(Indexes.ascending("stars", "name"))
             .printResults()

To view an alternative way to create a compound index, see the :ref:`Compound
Indexes <scala-compound-indexes>` section.

Descending Index
----------------

To create a specification of a descending index, use the
``Indexes.descending()`` static helper method.

Single Descending Key Index
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates a descending index on the ``stars`` field:

.. code-block:: scala

   collection.createIndex(Indexes.descending("stars"))
             .printResults()

Compound Descending Key Index
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates a descending compound index on the
``stars`` field and the ``name`` field:

.. code-block:: scala

   collection.createIndex(Indexes.descending("stars", "name"))
             .printResults()

To view an alternative way to create a compound index, see the :ref:`Compound
Indexes <scala-compound-indexes>` section.

.. _scala-compound-indexes:

Compound Indexes
----------------

To create a specification for a compound index, use the
``Indexes.compoundIndex()`` static helper method.

.. note::

   To create a specification for a compound index where all the keys are
   ascending, you can use the ``ascending()`` method. To create a
   specification for a compound index where all the keys are descending,
   you can use the ``descending()`` method.

The following example creates a compound index on the ``stars`` field
in descending order and the ``name`` field in ascending order:

.. code-block:: scala

   collection.createIndex(
                 Indexes.compoundIndex(Indexes.descending("stars"), 
                                       Indexes.ascending("name")))
             .printResults()

Text Indexes
------------

MongoDB provides text indexes to support text search of string
content. Text indexes can include any field whose value is a string or
an array of string elements. To create a specification for a text
index, use the ``Indexes.text()`` helper method.

The following example creates a text index on the ``name`` field:

.. code-block:: scala

   collection.createIndex(Indexes.text("name"))
             .printResults()

To learn more about text indexes, see
:manual:`Text Indexes </core/indexes/index-types/index-text/>` in the Server manual.

Hashed Index
------------

To create a specification for a hashed index index, use the
``Indexes.hashed()`` static helper method.

The following example creates a hashed index on the ``_id`` field:

.. code-block:: scala

   collection.createIndex(Indexes.hashed("_id"))
             .printResults()

To learn more about hashed indexes, see
:manual:`Hashed Indexes </core/indexes/index-types/index-hashed/>` in the Server manual.

Geospatial Indexes
------------------

To support geospatial queries, MongoDB supports various geospatial
indexes. To learn more about geospatial indexes, see
:manual:`Geospatial Indexes </core/indexes/index-types/index-geospatial/>` in the Server manual.

2dsphere
~~~~~~~~

To create a specification for a ``2dsphere`` index, use the 
``Indexes.geo2dsphere()`` static helper method.

The following example creates a ``2dsphere`` index on the
``contact.location`` field:

.. code-block:: scala

   collection.createIndex(Indexes.geo2dsphere("contact.location"))
             .printResults()

IndexOptions
------------

In addition to the index specification document, the
``createIndex()`` method can take an index options document that
directs the driver to create unique indexes or partial indexes.

The driver provides the ``IndexOptions`` class to specify various
index options.

Add the following import statement to your code to create an
``IndexOptions`` instance.

.. code-block:: scala

   import org.mongodb.scala.model.IndexOptions

Unique Index
~~~~~~~~~~~~

The following code specifies the ``unique(true)`` option to create a
unique index on the ``name`` and ``stars`` fields:

.. code-block:: scala

   val indexOptions = IndexOptions().unique(true)
   collection.createIndex(Indexes.ascending("name", "stars"), indexOptions)
             .printResults()

To learn more about unique indexes, see
:manual:`Unique Indexes </core/index-unique/>` in the Server manual.

Partial Index
~~~~~~~~~~~~~

To create a partial index, include the ``partialFilterExpression`` index
option.

The following example creates a partial index on documents in which the
value of the ``status`` field is ``"A"``.

.. code-block:: scala

   val partialFilterIndexOptions = IndexOptions()
                .partialFilterExpression(Filters.exists("contact.email"))
   collection.createIndex(
                   Indexes.descending("name", "stars"), partialFilterIndexOptions)
             .printResults()

To learn more about partial indexes, see
:manual:`Partial Indexes </core/index-partial/>` in the Server manual.

Get a List of Indexes on a Collection
-------------------------------------

Use the ``listIndexes()`` method to get a list of indexes. The following code
lists the indexes on the collection:

.. code-block:: scala

   collection.listIndexes().printResults()

To learn about other index options, see :manual:`Index Properties
</core/indexes/index-properties/>` in the Server manual.