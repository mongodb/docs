.. _pymongo-async-migration:
.. _pymongo-async-motor-migration:

===========================
Migrate to {+driver-async+}
===========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: motor, async, refactor, migration, asynchronous

.. include:: /includes/pymongo-async-experimental.rst

Overview
--------

The {+driver-async+} driver is a unification of {+driver-short+} and the `Motor
library <https://www.mongodb.com/docs/drivers/motor/>`__. In this guide, you can
identify the changes you must make to migrate an application from {+driver-short+} or
Motor to the {+driver-async+} driver.

Synchronous Versus Asynchronous
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To determine whether to migrate to the {+driver-async+} driver or to continue using
Synchronous {+driver-short+}, consider the information in this section.

Synchronous {+driver-short+} is preferable if the following criteria applies to your
application or use case:

- Your application is simple in execution, or you prefer to avoid using asynchronous calls
  in your code
  
- Your application relies on serial workloads or workloads with very fast
  response times

- You prefer the simplicity of synchronous logic when debugging your application

Consider migrating to the {+driver-async+} driver if the following criteria applies
to your application or use case:

- Your application implements large, highly concurrent workloads (on the order of
  thousands of concurrent operations)

- Your application relies on workloads that spend a long time waiting for responses or
  writing data

- Your application relies on other asynchronous libraries or frameworks, such as FastAPI

Migrate From Motor
------------------

.. warning:: Motor Deprecation

   Motor will be deprecated one year after the production release of the {+driver-async+}
   driver. We strongly recommend that Motor users migrate to the {+driver-async+} driver while
   Motor is still supported.

The {+driver-async+} driver functions similarly to the Motor library, but allows
for improved latency and throughput due to directly using Python Asyncio instead
of delegating work to a thread pool. In most cases, you can directly migrate
existing Motor applications to {+driver-async+} by using ``AsyncMongoClient`` in
place of ``MotorClient``, and changing the application's import statements to
import from ``pymongo``.

The following example shows the difference in imports to use a client for
read and write operations in Motor compared to {+driver-async+}:

.. code-block:: python

   # Motor client import
   from motor.motor_asyncio import AsyncIOMotorClient

   # {+driver-async+} client import
   from pymongo import AsyncMongoClient

To see a list of the asynchronous methods available in the {+driver-async+}
driver, see the :ref:`pymongo-async-methods` section. To learn about the versions of Motor
that correspond to {+driver-short+}, see the :ref:`pymongo-motor-compatibility` section of
the Compatibility guide.

The following section shows the method signature changes that you must implement
in your application when migrating from Motor to the {+driver-async+} driver.

.. warning::

   The {+driver-async+} driver does not support Tornado.

Method Signature Changes
~~~~~~~~~~~~~~~~~~~~~~~~

The following Motor method signatures behave differently in the {+driver-async+} driver:

- ``AsyncMongoClient.__init__()`` does not accept an ``io_loop`` parameter.
- ``AsyncCursor.each()`` does not exist in the {+driver-async+} driver.
- ``MotorGridOut.stream_to_handler()`` does not exist in the {+driver-async+} driver.
- ``AsyncCursor.to_list(0)`` is not valid in the {+driver-async+} driver. Use
  ``to_list(None)`` instead.
- ``MongoClient`` is thread safe and can be used by many threads, however, an
  ``AsyncMongoClient`` is not thread safe and should only be used by a single
  event loop.

.. warning::

   Motor users may experience a degradation of performance when switching to the
   {+driver-async+} driver. This is due to the {+driver-async+} driver using native
   ``asyncio`` tasks instead of thread-based executors. Thread-based executors
   have similar performance characteristics to the synchronous driver, but slower.
   This means they perform better for workloads that do not fit the preceding criteria
   for the {+driver-async+} driver.

   If you are experiencing performance slowdown, identify whether the {+driver-async+} driver
   is necessary for your usecase. If you determine your use case is better served by
   synchronous {+driver-short+}, consider using the synchronous driver
   with ``asyncio.loop.run_in_executor()`` for asynchronous compatibility. To learn more, see
   the `Event Loop API documentation <https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor>`__.

.. _pymongo-to-async-guide:

Migrate from {+driver-short+}
-----------------------------

The {+driver-async+} driver behaves similarly to {+driver-short+}, but
all methods that perform network operations are coroutines and must be awaited.
To migrate from {+driver-short+} to {+driver-async+}, you must update your code
in the following ways:

- Replace all uses of ``MongoClient`` with ``AsyncMongoClient``.
- Add the ``await`` keyword to all asynchronous method calls.
- If you call an asynchronous method inside a function, mark the function as ``async``.

Keep the following points in mind when migrating from synchronous {+driver-short+}
to the {+driver-async+} driver:

- To convert an ``AsyncCursor`` to a list, you must use the asynchronous ``cursor.to_list()``
  method.
- The ``AsyncCollection.find()`` method in the {+driver-async+} driver is synchronous, but
  returns an ``AsyncCursor``. To iterate through the cursor, you must use an ``async for``
  loop.
- The ``AsyncMongoClient`` object does not support the ``connect`` keyword argument.
- You cannot share ``AsyncMongoClient`` objects across threads or event loops.
- To access a property or method of a result returned by an asynchronous call, you must
  properly wrap the call in parentheses, as shown in the following example:

  .. code-block:: python
     
     id = (await posts.insert_one(doc)).inserted_id 

.. _pymongo-async-methods:

Asynchronous Methods
--------------------

For a complete list of asynchronous methods available in the {+driver-async+} driver,
see the `API documentation <{+api-root+}pymongo/asynchronous/index.html>`__.

.. note::

   Any methods not listed in the preceding API documentation are synchronous.

Additional Information
----------------------

To learn more about asynchronous Python, see the `Python Asyncio documentation
<https://docs.python.org/3/library/asyncio.html>`__.
