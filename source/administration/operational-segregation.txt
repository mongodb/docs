==========================================================================
Location and Operational Segregation in MongoDB Operations and Deployments
==========================================================================

.. rename this file /administration/operational-segregation.txt

.. default-domain:: mongodb

Operational Overview
--------------------

MongoDB includes a cluster features that allow database administrators
and developers to segregate application operations to MongoDB
deployments by functional or geographical groupings. This capability
provides "data center awareness," where application operations target
he MongoDB deployment with consideration of the location of
:program:`mongod` instances in multi-data center deployments. In
single data center deployments, users can use these features to
provide "rack awareness," that allows users to control operations
within a single data center.

Beyond operational segregation based on location, MongoDB also
supports segregation based on functional parameters, to ensure that
certain :program:`mongod` instances are only used for reporting
workloads or that certain high-frequency portions of a sharded
collection only exist on specific shards.

Specifically, with MongoDB, you can:

- ensure write operations propagate to specific members of a replica
  set, or specific members of replica sets.

- ensure that specific members of a replica set respond to queries.

- ensure that specific ranges of your :term:`shard key` balance onto and
  reside on specific :term:`shards`.

- combine the above features in a single distributed deployment, on a
  per-operation (for read and write operations) and collection (for
  chunk distribution in sharded clusters distribution.) basis.

For full documentation of these features see the following
documentation in the MongoDB Manual:

- :ref:`Read Preferences <read-preference>`, which controls how drivers
  help applications target read operations to members of a replica
  set.

- :ref:`Write Concerns <replica-set-write-concern>`, which controls
  how MongoDB ensures that write operations propagate to members of a
  replica set.

- :ref:`Replica Set Tags <replica-set-configuration-tag-sets>`, which
  controls how applications create and interact with custom groupings
  of replica set members to create custom application specific a read
  preference and write concerns.

- :ref:`Tag Aware Sharding <tag-aware-sharding>`, which allows MongoDB
  administrators to define an application specific balancing policy,
  to control how documents belonging to specific ranges of a shard key
  distribute to shards in the :term:`sharded cluster`.

.. seealso::

   Before adding operational segregation features to your application
   and MongoDB deployment, become familiar with all documentation of
   :doc:`replication </replication>` and :doc:`sharding </sharding>`,
   particularly :doc:`/core/replication` and :doc:`/core/sharding`.

Examples of Operational Segregation
-----------------------------------

Increase Data Locality in Geographically Distributed Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Functional Segregation for Reporting and Backups
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Increase Read Locality for Distributed Applications
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ensure Geographical Redundancy for Write Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
