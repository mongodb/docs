================================
Configure System Events Auditing
================================

.. default-domain:: mongodb

.. versionadded:: 2.5.3

MongoDB Enterprise supports :ref:`auditing <auditing>` of :doc:`operations
</reference/audit-operations>`. The audit facility can write
the event log to the console, :term:`syslog`, a :term:`BSON` file or a
text log file.

.. seealso:: :doc:`/core/auditing`

.. note:: Auditing is available for :program:`mongos` and
   :program:`mongod` instances.

Enable and Configure Audit Output
---------------------------------

Use the :option:`--auditLog <mongod --auditLog>` option to enable
auditing and specify where to output the log.

Output to Syslog
~~~~~~~~~~~~~~~~

To enable auditing and have the audit log print to the syslog in text
format, specify ``syslog`` to the :option:`--auditLog
<mongod --auditLog>` setting. For example:

.. code-block:: sh

   mongod --dbpath data/db --auditLog syslog

.. note:: Output to syslog is not available on Windows.

.. warning::

   .. include:: /includes/fact-audit-syslog-message-limit.rst

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auditLog=syslog

Output to Console
~~~~~~~~~~~~~~~~~

To enable auditing and have the audit log record output to standard
output (i.e. ``stdout``), specify ``console`` to the
:option:`--auditLog <mongod --auditLog>` setting. For example:

.. code-block:: sh

   mongod --dbpath data/db --auditLog console

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auditLog=console

Output to Text File
~~~~~~~~~~~~~~~~~~~

To enable auditing and have the audit log print to a file in text
format, specify ``textfile`` to the :option:`--auditLog <mongod --auditLog>`
setting and specify the filename to the :option:`--auditPath
<mongod --auditPath>`. The :option:`--auditPath <mongod --auditPath>`
accepts either full path name or relative path name. For example, the
following enables auditing events to a text file  with the relative
path name of ``data/db/auditLog.txt``.

.. code-block:: sh

   mongod --dbpath data/db --auditLog textfile --auditPath data/db/auditLog.txt

The audit file rotate at the same time as the server log file.

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auditLog=textfile
   auditPath=data/db/auditLog.txt

Output to BSON File
~~~~~~~~~~~~~~~~~~~

To enable auditing and have the audit log print to a file in BSON
binary format, specify ``bsonfile`` to the :option:`--auditLog
<mongod --auditLog>` setting and specify the filename to the
:option:`--auditPath <mongod --auditPath>`. The :option:`--auditPath
<mongod --auditPath>` accepts either full path name or relative path
name. For example, the following enables auditing events to a BSON
file with the relative path name of ``data/db/auditLog.bson``.

.. code-block:: sh

   mongod --dbpath data/db --auditLog bsonfile --auditPath data/db/auditLog.bson

The audit file rotate at the same time as the server log file.

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auditLog=bsonfile
   auditPath=data/db/auditLog.bson

To view the contents of the file, pass the file to the MongoDB utility
:program:`bsondump`. For example, the following converts the audit log
into a human-readable form and output to standard output:

.. code-block:: sh

   bsondump data/db/auditLog.bson

.. _audit-filter:

Filter Events
-------------

By default, the audit facility logs all :doc:`auditable operations
</reference/audit-operations>`. The audit feature has an
:option:`--auditFilter <mongod --auditFilter>` option to determine
which events to log. The :option:`--auditFilter
<mongod --auditFilter>` option takes a document of the form:

.. code-block:: javascript

   { atype: <expression> }

The ``<expression>`` is a :ref:`query condition expression
<query-selectors>` to match on :ref:`audit-operations`.

Filter for a Single Operation Type
----------------------------------

For example, to audit only the ``createCollection`` action, use the
filter ``{ atype: "createCollection" }``:

.. tip::
   To specify the filter as a command-line option, enclose the filter document
   in quotes to pass the document as a string.

.. code-block:: javascript

   mongod --dbpath data/db --auditLog bsonfile --auditPath data/db/audit1.bson --auditFilter '{ atype: "createCollection" }'

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auditLog=bsonfile
   auditPath=data/db/audit1.bson
   auditFilter={ atype: "createCollection" }

Filter for Multiple Operation Types
-----------------------------------

To match on multiple operations, use the :operator:`$in` operator in
the ``<expression>`` as in the following:

.. tip::
   To specify the filter as a command-line option, enclose the filter document
   in quotes to pass the document as a string.

.. code-block:: javascript

   mongod --dbpath data/db --auditLog bsonfile --auditPath data/db/audit2.bson --auditFilter '{ atype: { $in: [ "createCollection", "dropCollection" ] } }'

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auditLog=bsonfile
   auditPath=data/db/audit2.bson
   auditFilter={ atype: { $in: [ "createCollection", "dropCollection" ] } }

Filter on Authentication Operations on a Single Database
--------------------------------------------------------

For authentication operations, you can also specify a specific
database with the ``param.db`` field:

.. code-block:: javascript

   { atype: <expression>, "param.db": <database> }

For example, to audit only ``authenticate`` operations that occur
against the ``test`` database, use the filter ``{ atype:
"authenticate", "param.db": "test" }``:

.. tip:: To specify the filter as a command-line option, enclose the
   filter document in quotes to pass the document as a string.

.. code-block:: javascript

   mongod --dbpath data/db --auth --auditLog textfile --auditPath data/db/auditLog.txt --auditFilter '{ atype: "authenticate", "param.db": "test" }'

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auth=true
   auditLog=textfile
   auditPath=data/db/auditLog.txt
   auditFilter={ atype: "authenticate", "param.db": "test" }

To filter on all ``authenticate`` operations across databases, use the
filter ``{ atype: "authenticate" }``.
