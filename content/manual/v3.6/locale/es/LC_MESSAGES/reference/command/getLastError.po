# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 19:05+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/command/getLastError.txt:3
msgid "getLastError"
msgstr ""

#: ../source/reference/command/getLastError.txt:14
msgid "Definition"
msgstr ""

#: ../source/includes/extracts/fact-2.6-wc-gle-change-cmd-getLastError.rst:5
msgid ""
"A new protocol for :ref:`write operations <rel-notes-write-operations>` "
"integrates write concerns with the write operations, eliminating the need"
" for a separate :dbcommand:`getLastError`. :ref:`Most write methods "
"<write-methods-incompatibility>` now return the status of the write "
"operation, including error information. In previous versions, clients "
"typically used the :dbcommand:`getLastError` in combination with a write "
"operation to verify that the write succeeded."
msgstr ""

#: ../source/reference/command/getLastError.txt:20
msgid ""
"Returns the error status of the preceding write operation on the *current"
" connection*."
msgstr ""

#: ../source/reference/command/getLastError.txt:23
msgid ":dbcommand:`getLastError` uses the following prototype form:"
msgstr ""

#: ../source/reference/command/getLastError.txt:29
msgid ":dbcommand:`getLastError` uses the following fields:"
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst:7
msgid "Field"
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst:9
msgid "Type"
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst:11
msgid "Description"
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst:13
msgid "``j``"
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst:15
msgid "boolean"
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst:17
#: ../source/includes/apiargs/command-getLastError-field.rst:62
msgid ""
"If ``true``, wait for the next journal commit before returning, rather "
"than waiting for a full disk flush. If :binary:`~bin.mongod` does not "
"have journaling enabled, this option has no effect. If this option is "
"enabled for a write operation, :binary:`~bin.mongod` will wait *no more* "
"than 1/3 of the current :setting:`~storage.journal.commitIntervalMs` "
"before writing data to the journal."
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst:26
msgid "``w``"
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst:28
msgid "integer or string"
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst:30
#: ../source/includes/apiargs/command-getLastError-field.rst:73
msgid ""
"When running with replication, this is the number of servers to replicate"
" to before returning. A ``w`` value of 1 indicates the primary only. A "
"``w`` value of 2 includes the primary and at least one secondary, etc. In"
" place of a number, you may also set ``w`` to ``majority`` to indicate "
"that the command should wait until the latest write propagates to a "
"majority of the voting replica set members."
msgstr ""

#: ../source/includes/fact-majority-write-concern-change.rst:1
msgid ""
"In previous versions, ``majority`` referred to the majority of all "
"members of the replica set instead of the majority of the voting members."
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst:40
#: ../source/includes/apiargs/command-getLastError-field.rst:83
msgid ""
"If using ``w``, you should also use ``wtimeout``. Specifying a value for "
"``w`` without also providing a ``wtimeout`` may cause "
":dbcommand:`getLastError` to block indefinitely."
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst:46
msgid "``wtimeout``"
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst:48
msgid "integer"
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst:50
#: ../source/includes/apiargs/command-getLastError-field.rst:91
msgid ""
"Optional. Milliseconds. Specify a value in milliseconds to control how "
"long to wait for write propagation to complete. If replication does not "
"complete in the given timeframe, the :dbcommand:`getLastError` command "
"will return with an error status."
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst
msgid "field boolean j"
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst
msgid "field integer, string w"
msgstr ""

#: ../source/includes/apiargs/command-getLastError-field.rst
msgid "field integer wtimeout"
msgstr ""

#: ../source/reference/command/getLastError.txt:33
msgid ":doc:`/reference/write-concern`"
msgstr ""

#: ../source/reference/command/getLastError.txt:38
msgid "Output"
msgstr ""

#: ../source/reference/command/getLastError.txt:40
msgid ""
"Each :dbcommand:`~db.collection.getLastError()` command returns a "
"document containing a subset of the fields listed below."
msgstr ""

#: ../source/reference/command/getLastError.txt:45
msgid ""
":data:`~getLastError.ok` is ``true`` when the :dbcommand:`getLastError` "
"command completes successfully."
msgstr ""

#: ../source/reference/command/getLastError.txt:48
msgid ""
"A value of ``true`` does *not* indicate that the preceding operation did "
"not produce an error."
msgstr ""

#: ../source/reference/command/getLastError.txt:53
msgid ""
":data:`~getLastError.err` is ``null`` unless an error occurs. When there "
"was an error with the preceding operation, ``err`` contains a string "
"identifying the error."
msgstr ""

#: ../source/reference/command/getLastError.txt:61
msgid ""
":data:`~getLastError.errmsg` contains the description of the error. "
":data:`~getLastError.errmsg` only appears if there was an error with the "
"preceding operation."
msgstr ""

#: ../source/reference/command/getLastError.txt:67
msgid ""
":data:`~getLastError.code` reports the preceding operation's error code. "
"For description of the error, see :data:`~getLastError.err` and "
":data:`~getLastError.errmsg`."
msgstr ""

#: ../source/reference/command/getLastError.txt:73
msgid "The identifier of the connection."
msgstr ""

#: ../source/reference/command/getLastError.txt:77
msgid ""
"When issued against a replica set member and the preceding operation was "
"a write or update, :data:`~getLastError.lastOp` is the *optime* timestamp"
" in the :term:`oplog`  of the change."
msgstr ""

#: ../source/reference/command/getLastError.txt:83
msgid ""
"If the preceding operation was an update or a remove operation, but *not*"
" a :dbcommand:`findAndModify` operation, :data:`~getLastError.n` reports "
"the number of documents matched by the update or remove operation."
msgstr ""

#: ../source/reference/command/getLastError.txt:88
msgid ""
"For a remove operation, the number of matched documents will equal the "
"number removed."
msgstr ""

#: ../source/reference/command/getLastError.txt:91
msgid ""
"For an update operation, if the operation results in no change to the "
"document, such as setting the value of the field to its current value, "
"the number of matched documents may be smaller than the number of "
"documents actually modified. If the update includes the ``upsert:true`` "
"option and results in the creation of a new document, "
":data:`~getLastError.n` returns the number of documents inserted."
msgstr ""

#: ../source/reference/command/getLastError.txt:99
msgid ""
":data:`~getLastError.n` is ``0`` if reporting on an update or remove that"
" occurs through a :dbcommand:`findAndModify` operation."
msgstr ""

#: ../source/reference/command/getLastError.txt:104
msgid ""
":data:`~getLastError.syncMillis` is the number of milliseconds spent "
"waiting for the write to disk operation (e.g. write to journal files)."
msgstr ""

#: ../source/reference/command/getLastError.txt:110
msgid ""
"When issued against a sharded cluster after a write operation, "
":data:`~getLastError.shards` identifies the shards targeted in the write "
"operation. :data:`~getLastError.shards` is present in the output only if "
"the write operation targets multiple shards."
msgstr ""

#: ../source/reference/command/getLastError.txt:117
msgid ""
"When issued against a sharded cluster after a write operation, identifies"
" the shard targeted in the write operation. "
":data:`~getLastError.singleShard` is only present if the write operation "
"targets exactly one shard."
msgstr ""

#: ../source/reference/command/getLastError.txt:124
msgid ""
":data:`~getLastError.updatedExisting` is ``true`` when an update affects "
"at least one document and does not result in an :term:`upsert`."
msgstr ""

#: ../source/reference/command/getLastError.txt:130
msgid ""
"If the update results in an insert, :data:`~getLastError.upserted` is the"
" value of ``_id`` field of the document."
msgstr ""

#: ../source/reference/command/getLastError.txt:133
msgid ""
"Earlier versions of MongoDB included :data:`~getLastError.upserted` only "
"if ``_id`` was an :term:`ObjectId <objectid>`."
msgstr ""

#: ../source/reference/command/getLastError.txt:140
msgid ""
"If set, ``wnote`` indicates that the preceding operation's error relates "
"to using the ``w`` parameter to :dbcommand:`getLastError`."
msgstr ""

#: ../source/reference/command/getLastError.txt:148
msgid ""
":data:`~getLastError.wtimeout` is ``true`` if the "
":dbcommand:`getLastError` timed out because of the ``wtimeout`` setting "
"to :dbcommand:`getLastError`."
msgstr ""

#: ../source/reference/command/getLastError.txt:154
msgid ""
"If the preceding operation specified a timeout using the ``wtimeout`` "
"setting to :dbcommand:`getLastError`, then :data:`~getLastError.waited` "
"reports the number of milliseconds :dbcommand:`getLastError` waited "
"before timing out."
msgstr ""

#: ../source/reference/command/getLastError.txt:161
msgid ""
":data:`getLastError.wtime` is the number of milliseconds spent waiting "
"for the preceding operation to complete. If :dbcommand:`getLastError` "
"timed out, :data:`~getLastError.wtime` and "
":dbcommand:`getLastError.waited` are equal."
msgstr ""

#: ../source/reference/command/getLastError.txt:168
msgid ""
"If writing to a replica set, :data:`~getLastError.writtenTo` is an array "
"that contains the hostname and port number of the members that confirmed "
"the previous write operation, based on the value of the ``w`` field in "
"the command."
msgstr ""

#: ../source/reference/command/getLastError.txt:176
msgid "Examples"
msgstr ""

#: ../source/reference/command/getLastError.txt:179
msgid "Confirm Replication to Two Replica Set Members"
msgstr ""

#: ../source/reference/command/getLastError.txt:181
msgid ""
"The following example ensures the preceding operation has replicated to "
"two members (the primary and one other member). The command also "
"specifies a timeout of ``5000`` milliseconds to ensure that "
"the:dbcommand:`getLastError` command does not block forever if MongoDB "
"cannot satisfy the requested write concern:"
msgstr ""

#: ../source/reference/command/getLastError.txt:192
msgid "Confirm Replication to a Majority of a Replica Set"
msgstr ""

#: ../source/reference/command/getLastError.txt:194
msgid ""
"The following example ensures the write operation has replicated to a "
"majority of the voting members of the replica set. The command also "
"specifies a timeout of ``5000`` milliseconds to ensure that "
"the:dbcommand:`getLastError` command does not block forever if MongoDB "
"cannot satisfy the requested write concern:"
msgstr ""

#: ../source/includes/fact-master-slave-majority.rst:1
msgid ""
"In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats "
"``w: \"majority\"`` as equivalent to ``w: 1``. In earlier versions of "
"MongoDB, ``w: \"majority\"`` produces an error in :doc:`master/slave "
"</core/master-slave>` deployments."
msgstr ""

#~ msgid ""
#~ "Returns the error status of the "
#~ "preceding operation on the *current "
#~ "connection*. Clients typically use "
#~ ":dbcommand:`.getLastError` in combination with "
#~ "write operations to ensure that the "
#~ "write succeeds."
#~ msgstr ""

#~ msgid ""
#~ "In :doc:`Master/Slave </core/master-slave>` "
#~ "deployments, :dbcommand:`getLastError` treats "
#~ "``w:majority`` as equivalent to ``w:1``. "
#~ "In earlier versions of MongoDB, "
#~ "``w:majority`` produces an error in "
#~ ":doc:`master/slave </core/master-slave>` "
#~ "deployments."
#~ msgstr ""

# 0c76fd86c3fc44758d928ac21295258d
#~ msgid ""
#~ ":doc:`Write Concern </core/write-concern>`, "
#~ ":doc:`/reference/write-concern`, and :ref"
#~ ":`replica-set-write-concern`."
#~ msgstr ""

# 5a74d85ddfb44a0fb91db9afe3e62bbd
#~ msgid ""
#~ ":data:`~getLastError.err` is ``null`` unless "
#~ "an error occurs. When there was an"
#~ " error with the preceding operation, "
#~ "``err`` contains a textual description "
#~ "of the error."
#~ msgstr ""

# 2abd2f53610e428790692988f94593f7
#~ msgid ""
#~ ":data:`~getLastError.code` reports the preceding "
#~ "operation's error code."
#~ msgstr ""

# 7508757e223f4d79aef261fdceb8909e
#~ msgid ""
#~ ":data:`~getLastError.n` reports the number of"
#~ " documents updated or removed, if the"
#~ " preceding operation was an update or"
#~ " remove operation."
#~ msgstr ""

# bdc47d4a00d247d4bdea821943776dc0
#~ msgid "See"
#~ msgstr ""

# e830aede44df488d9d5838b397990e1e
#~ msgid ""
#~ "The following example ensures the "
#~ "operation has replicated to two members"
#~ " (the primary and one other member):"
#~ msgstr ""

# 44a5e174044041e3ab55524c98900fab
#~ msgid ""
#~ "The following example ensures the write"
#~ " operation has replicated to a "
#~ "majority of the configured members of"
#~ " the set."
#~ msgstr ""

# fdebc807cdb24fd8a0d2bfec4500772f
#~ msgid "Set a Timeout for a ``getLastError`` Response"
#~ msgstr ""

# 4119be405aa74c08ad450ead708238e9
#~ msgid ""
#~ "Unless you specify a timeout, a "
#~ ":dbcommand:`getLastError` command may block "
#~ "forever if MongoDB cannot satisfy the"
#~ " requested write concern. To specify "
#~ "a timeout of 5000 milliseconds, use "
#~ "an invocation that resembles the "
#~ "following:"
#~ msgstr ""

# f5f17f2de65b4003989073b964fd034e
#~ msgid ""
#~ "When ``wtimeout`` is ``0``, the "
#~ ":dbcommand:`getLastError` operation will never "
#~ "time out."
#~ msgstr ""

#~ msgid ""
#~ "A new protocol for :ref:`write "
#~ "operations <rel-notes-write-operations>` "
#~ "integrates write concerns with the write"
#~ " operations, eliminating the need for "
#~ "a separate |gle|. Write methods now "
#~ "return the status of the write "
#~ "operation, including error information."
#~ msgstr ""

#~ msgid ""
#~ "In previous versions, clients typically "
#~ "used the |gle| in combination with "
#~ "the write operations to ensure that "
#~ "the write succeeds."
#~ msgstr ""

