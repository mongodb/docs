.. _data-lake-mql-support:

==========================
Supported MongoDB Commands
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


The following MongoDB query operations are supported by |data-lake|.

.. important::

   Some commands have special behavior in |data-lake| that differs from
   standard MongoDB functionality.

To run a command against your |data-lake|, use :manual:`db.runCommand()
</reference/method/db.runCommand>`:

.. code-block:: javascript

   db.runCommand( { <command> } )

Aggregation Commands
--------------------

.. note:: 

   {+adl+} doesn't include a server-side JavaScript engine. So, it 
   doesn't support commands like :manual:`mapReduce
   </reference/command/mapReduce/>` that require server-side 
   scripting :manual:`enabled 
   </reference/operator/query/where/#javascript-enablement>`. 

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Command
     - Description

   * - :manual:`aggregate </reference/command/aggregate>`

     - The following limitation applies:

       {+adl+} supports the ``explain``, ``cursor``, ``comment``, 
       and ``background`` options only. 
       
       For the ``comment`` option, {+adl+} supports only type 
       ``string``. 
       
       {+adl+} supports ``{"background" : <boolean>}`` option for 
       :ref:`adl-out-stage` to |s3| and |service| cluster only. The 
       ``background`` option is not available for other 
       :manual:`aggregation pipeline stages 
       </reference/operator/aggregation-pipeline>`. See :ref:`$out 
       Options <adl-out-stage-options>` for more information.

       .. seealso::
       
          :ref:`data-lake-agg-support`.

   * - :manual:`count </reference/command/count>`

     - The following limitations apply:

       * {+adl+} converts ``count()`` to an aggregation pipeline 
         internal to |data-lake|.
       * {+adl+} supports only the ``query`` option.

Diagnostic Commands
-------------------

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Command
     - Description

   * - :manual:`buildInfo </reference/command/buildInfo>`

     - The response returns the following fields:

       **ok**
         Returns ``1`` for success or ``0`` for failure.

       **version**
         The MongoDB client compatibility version. This is
         the earliest version of the MongoDB client with which the
         |data-lake| service is compatible.

       **versionArray**
         The MongoDB client compatibility version in array format.

       **dataLake.version**
         The version number of |data-lake|.

       **dataLake.gitVersion**
         The git version the |data-lake| service.

       **dataLake.date**
         The build timestamp of the |data-lake| service.

       .. example::

          .. code-block:: json

             {
               "ok" : <return>,
               "version" : "<version-number>",
               "versionArray" : [
                 <number>,
                 <number>,
                 <number>,
                 <number>
               ],
               "dataLake" : {
                 "version" : "<version-number>",
                 "gitVersion" : "<version-number>",
                 "date" : "<timestamp>"
               }
             }

   * - :manual:`collStats </reference/command/collStats>`

     - The following fields are omitted from the response:

       * ``count``
       * ``avgObjSize``
       * ``capped``
       * ``max``
       * ``maxSize``
       * ``wiredTiger``
       * ``nindexes``
       * ``totalIndexSize``
       * ``indexSizes``

       The following fields are added to the response. You can use
       these fields to verify what partitions are being used to
       populate a collection.

       **partitions.format**
         The file format of the partition.

       **partitions.attributes**
         The filtering attributes of the partition.

       **partitions.source**
         The |s3| URL or |service| cluster name, which is the backing data of the partition.

       **partitions.size**
         The size, in bytes, of the partition.

       **partitionCount**
         The number of partitions.

       **avgPartitionSize**
         The average size of all paritions.

       .. example::

          .. code-block:: json

             {
               ...
                "partitions": [{
    	           "format": <file format>,
    	            "attributes": <filtering attributes>,
    	            "source": <S3 url or Atlas cluster name>,
    	            "size": <size, in bytes, of the partition>
    	           }, ...],
    	          "partitionCount": <number of partitions>,
    	          "avgPartitionSize": <average size of all partitions>
              ...
             }

   * - :manual:`connectionStatus </reference/command/connectionStatus>`

     - Returns information about the current connection, specifically
       the state of authenticated users and their available
       :atlas:`roles </reference/user-roles>`.

       .. include:: /includes/fact-connection-limitation.rst

   * - :manual:`dbStats </reference/command/dbStats>`

     - The following fields are omitted from the response: 

       * ``object``
       * ``avgObjSize``
       * ``fsUsedSize``
       * ``fsTotalSize``

   * - :manual:`explain </reference/command/explain>`

     - The data returned by ``explain`` documents the |data-lake| query
       plan, and differs from MongoDB in that it provides
       information about the data partitions used to satisfy the query.

       The following commands are explainable in |data-lake|: 

       * ``aggregate()``
       * ``count()``
       * ``find()``

       The following ``verbosity`` modes are supported: 

       - ``queryPlanner`` - provides information on the query plan.
       - ``queryPlannerExtended`` - provides detailed information on 
         the query plan including information about the |s3| objects, 
         such as the |s3| object names and sizes, that will be queried.
      
       The ``executionStats`` and ``allPlansExecution`` modes are not 
       supported.

       .. example:: 

          The following example shows how to use the ``explain`` 
          command to get information about the :manual:`aggregate 
          </reference/command/aggregate>` command, including detailed 
          information on the query plan.
          
          .. code-block:: sh 
             :copyable: false 

             db.runCommand({ "explain": { "aggregate": "user", "verbosity": "queryPlannerExtended", "pipeline": [ ], "cursor": {} }})

   * - :manual:`getLog </reference/command/getlog>`

     - The response returns successfully, but includes no log data.

   * - :manual:`getMore </reference/command/getMore>`

     - The ``MaxTimeMS`` option is not supported.

   * - :manual:`hostInfo </reference/command/hostinfo>`

     - The reponse returns the following subset of fields from the
       standard MongoDB response:

       .. code-block:: json

          {
             "ok" : <return>,
             "system" : {
                    "currentTime" : ISODate("<timestamp>"),
                    "hostname" : "<hostname>",
                    "cpuAddrSize" : <number>,
                    "memSizeMB" : <number>,
                    "numCores" : <number>,
                    "cpuArch" : "<identifier>",
             },
             "os" : {
                    "type" : "<string>",
                    "name" : "<string>",
             },
             "extra" : {
             },
          }

   * - :manual:`ping </reference/command/ping>`

     - Tests whether a server is responding to commands.

   * - :manual:`whatsmyuri </reference/command/whatsmyuri>`

     - Returns the client IP address.

Query and Write Operation Commands
----------------------------------

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Command
     - Description

   * - :manual:`find </reference/command/find>`

     - The following options are supported:

       * ``batchSize``
       * ``singleBatch``
       * ``filter``
       * ``limit``
       * ``projection``
       * ``skip``
       * ``sort``

       ``find()`` is converted to an aggregation pipeline internal to
       the |data-lake|.

Authentication Commands
-----------------------

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Command
     - Description

   * - :manual:`authentication </reference/command/authenticate>`

     - |data-lake| uses SCRAM-SHA authentication.


Replication Commands
--------------------

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Command
     - Description

   * - :manual:`isMaster </reference/command/isMaster>`

     - The response always returns a document in which
       ``isMaster: true``. It also returns operational parameters. 

       The optional ``saslSupportedMechs`` field set to the 
       ``<db.user>`` is supported.

       .. note:: About the ``hello`` Command

          {+adl+} also supports the ``hello`` command, which is an 
          alias for the ``isMaster`` command. The ``hello`` command 
          returns a document that is identical to the document 
          returned by the ``isMaster`` command. In the document 
          returned by the ``hello`` command, the ``isWritablePrimary`` 
          field is set to ``true`` instead of the ``isMaster`` field. 
          We recommend the ``hello`` command instead of ``isMaster``.

Administration Commands
-----------------------

.. list-table::
   :header-rows: 1
   :widths: 30 70


   * - Command
     - Description

   * - :manual:`killCursors </reference/command/killCursors>`

     - Kills the specified cursor or cursors for a collection.

   * - :manual:`listCollections </reference/command/listCollections>`

     - Retrieves information about the collections in a database, such
       as collection names and options. The response contains
       information that can be used to create a cursor to the
       collection information.

       The following options are supported:

       * ``filter`` (Exact match only.)
       * ``nameOnly``
       * ``authorizedCollections``

   * - :manual:`listDatabases </reference/command/listDatabses>`

     - Provides a list of all existing databases. You must use the
       ``admin`` database to run the ``listDatabases`` command.

       The following options are supported:

       * ``filter`` (Exact match only.)
       * ``nameOnly``
       * ``authorizedDatabases``

       ``listDatabases`` always returns ``sizeOnDisk: 0`` and ``empty:
       false`` so it can return quickly, without scanning all the
       files in the |data-lake|.

Role Management Commands
------------------------

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Command
     - Description

   * - :manual:`rolesInfo </reference/command/rolesInfo>`

     - Returns inheritance and privilege information for specified
       roles.

User Management Commands
------------------------

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Command
     - Description

   * - :manual:`usersInfo </reference/command/usersInfo>`

     - Returns information about one or more users.

       The ``forAllDBs`` argument is not supported.


|data-lake| Commands
--------------------

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Command
     - Description

   * - ``storageGetConfig``
     - Returns the current {+dl+} configuration. For complete
       documentation on the configuration document format, see
       :ref:`Configuration Document Format
       <datalake-configuration-format>`.

       .. code-block:: javascript

          db.runCommand( { "storageGetConfig" : 1 } )

       To learn more about this command, see 
       :ref:`datalake-getstorageconfig`.

   * - ``storageSetConfig``
     - Replaces the current {+dl+} configuration with a |json|
       document. For complete documentation on the configuration
       document format, see :ref:`Configuration Document Format
       <datalake-configuration-format>`.

       .. code-block:: javascript

          db.runCommand( { "storageSetConfig" : <config> } )

       To learn more about this command, see 
       :ref:`datalake-setstorageconfig`.

   * - ``storageGenerateConfig``
     - Generates a configuration for your {+dl+} in |json| format. 
       For complete documentation on the configuration
       document format, see :ref:`Configuration Document Format
       <datalake-configuration-format>`.

       .. code-block:: javascript

          db.runCommand( { "storageGenerateConfig" : 1 } )

       To learn more about this command, see 
       :ref:`datalake-storagegenconfig`.

   * - ``storageValidateConfig``
     - Validates the given {+dl+} configuration. For complete 
       documentation on the configuration document format, see 
       :ref:`Configuration Document Format
       <datalake-configuration-format>`.

       .. code-block:: javascript

          db.runCommand( { "storageValidateConfig" : <config> } )

       To learn more about this command, see 
       :ref:`datalake-validatestorageconfig`.         
