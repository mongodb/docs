.. _configure-mongodb-topology:

================================================
Configure Cluster Topology for MongoDB Resources
================================================

.. default-domain:: mongodb

.. meta::
   :keywords: nodes affinity topology

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can configure the deployment topology of your MongoDB resources within 
|k8s| by defining ``NodeAffinity`` and ``PodAffinity``. 
``NodeAffinity`` and ``PodAffinity`` specify 
where |k8s| deploys MongoDB custom resources in your |k8s| cluster.

You can implement |node-affinity| by applying |node-labels| to specific 
nodes within your |k8s| cluster and defining ``labelSelector`` fields 
with corrosponding labels in your MongoDB |k8s-crd|. When you apply 
|node-labels| and matching ``labelSelector`` values, |k8s| only
deploys a given MongoDB |k8s-crd| on the nodes you
specify within your |k8s| cluster. Implementing node affinity rules can be useful when
deploying MongoDB resources in heterogeneous node groups, as it allows you
to deploy specific resources on specific node varieties.

Similarly, you can implement Pod affinity by applying |labels| to Pods that are 
running in your cluster and aligning those label values with ``labelSelector`` 
values defined in your MongoDB |k8s-crd|. When you apply |labels| 
and matching ``labelSelector`` values, |k8s| colocates MongoDB 
custom resource-managed Pods with Pods with matching labels applied. By 
collocating Pods, you can improve system performance and reduce latency 
between Pods that communicate regularly. You can also define Pod antiaffinity 
rules which allow you to specify Pods which should not be colocated.

For Standalone and Replica Set deployments, you can apply these affinity rules 
to the :setting:`spec.podSpec` of your MongoDB |k8s-crd|. 
For Sharded Cluster deployments, you can apply these affinity rules to the
:setting:`spec.configSrvPodSpec`, :setting:`spec.shardPodSpec`, 
and :setting:`spec.mongosPodSpec` sections of your MongoDB |k8s-crd|.

You must deploy MonogDB resources, such as ``mongos``, shards, 
and config servers in the case of a Sharded Cluster deployment, 
in the same namespace as the MongoDB resource. However, within that namespace, 
you can configure the ``nodeAffinity`` and ``podAffinity`` for ``mongos``, 
shards, and config server resource types in the ``ShardedCluster`` |k8s-crd|.

Prerequisites
-------------

To configure the deployment topology for your 
MongoDB deployment, you must either have a MongoDB replica set deployed 
through the MongoDB |k8s-op-short| along with labels applied 
to the |k8s| resources that will align with ``labelSelectors`` defined 
in the MongoDB |k8s-crd| or meet the following prerequisites:

- An :ref:`Ops Manager instance <deploy-om-container>` or a :opsmgr:`Cloud Manager organization </tutorial/manage-organizations/#create-organization>`.

- The :ref:`MongoDB Controllers for Kubernetes <install-k8s>`.

- A :ref:`Kubernetes Operator ConfigMap <create-k8s-project>`.

- :ref:`Credentials for the Kubernetes Operator <create-k8s-credentials>` or 
  configure :ref:`a different secret storage tool <k8s-set-secret-storage-tool>`.

- Labels applied to the |k8s| resources that will align with ``labelSelectors`` 
  defined in the MongoDB |k8s-crd|.

Procedure
---------

.. include:: /includes/steps/configure-topology.rst
