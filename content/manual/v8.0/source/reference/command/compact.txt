.. _compact:

==========================
compact (database command)
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: compact

   Attempts to release unneeded disk space to the operating system.

Compatibility
-------------

This command is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-no-free.rst

.. include:: /includes/fact-environments-onprem-only.rst
   
Syntax
------

The command has the following syntax:

.. code-block:: javascript

   db.runCommand(
      { 
        compact: <string>, 
        dryRun: <boolean>,
        force: <boolean>, // Optional
        freeSpaceTargetMB: <int>, // Optional 
        comment: <any>, // Optional
      }
   )

Command Fields
--------------

The command takes the following fields:

.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Field
     - Type
     - Description

   * - ``compact``
     - string
     - The name of the collection.

   * - ``dryRun``
     - boolean
     - .. versionadded:: 8.0

       .. include:: /includes/fact-compact-dryrun.rst 

       *Default:* False

   * - ``force``
     - boolean
     - .. _compact-force-option:

       Optional. If enabled, forces ``compact`` to run on the :term:`primary` in 
       a :term:`replica set`. ``compact`` does not block :ref:`crud` on the 
       database it is compacting. 

   * - ``freeSpaceTargetMB`` 
     - Integer 
     - .. versionadded: 7.3 

       .. include:: /includes/fact-freeSpaceTargetMB.rst

       *Default:* 20
      
   * - ``comment``
     - any
     - .. include:: /includes/extracts/comment-content.rst


.. _compact-authentication:

``compact`` Required Privileges
-------------------------------

For clusters enforcing :ref:`authentication <authentication>`,
you must authenticate as a user with the :authaction:`compact` privilege
action on the target collection. The :authrole:`dbAdmin` and 
:authrole:`hostManager` roles provide the required privileges for running 
``compact`` against non-system collections. 

For :ref:`system collections <metadata-system-collections>`, you must: 

1. Create a custom role that grants the ``compact`` action on 
   the system collection.
2. Grant that role to a new or existing user. 
3. Authenticate as that user to perform the ``compact`` 
   command.

For example, the following operations create a custom role that grants
the ``compact`` action against the specified database and
collection:

.. code-block:: javascript

   use admin
   db.createRole(
     {
       role: "myCustomCompactRole",
       privileges: [
         {
           resource: { "db" : "<database>" , "collection" : "<collection>" },
           actions: [ "compact" ]
         }
       ],
       roles: []
     }
   )

For more information on configuring the ``resource`` document, see 
:ref:`resource-document`.

To add the :authrole:`dbAdmin`, :authrole:`hostManager`, or the custom role to 
an existing user, use :method:`db.grantRolesToUser` or :method:`db.updateUser()`.
The following operation grants the custom ``compact`` role to the 
``myCompactUser`` on the ``admin`` database:

.. code-block:: javascript

   use admin
   db.grantRolesToUser("myCompactUser", [ "dbAdmin" | "myCustomCompactRole" ] )

To add the :authrole:`dbAdmin` or the custom role to a new user,
specify the role to the ``roles`` array of the
:method:`db.createUser()` method when creating the user.

.. code-block:: javascript

   use admin
   db.createUser(
     { 
        user: "myCompactUser",
        pwd: "myCompactUserPassword",
        roles: [
          { role: "dbAdmin", db: "<database>" } | "myCustomCompactRole"
        ]
      }
   )

Behavior
--------

Monitoring Progress
~~~~~~~~~~~~~~~~~~~

To check the ``compact`` operation's progress, monitor the
:binary:`~bin.mongod` log file or run :method:`db.currentOp()`
from another shell instance.

Operation Termination
~~~~~~~~~~~~~~~~~~~~~

If you terminate ``compact`` with the :method:`db.killOp()
<db.killOp()>` method or restart the server before the operation  
finishes, ``compact`` ends and may fail its attempt to release 
disk space back to the operating system.

Disk Space
~~~~~~~~~~

The ``compact`` command attempts to reduce the disk space consumed for data and
indexes in a collection by releasing obsolete blocks back to the operating system.
The effectiveness of ``compact`` is relative to how many blocks are available to be 
released and where in the data file the blocks are. 

To see how the storage space changes for the collection, run the
:dbcommand:`collStats` command before and after compaction. You can use the output 
metric :data:`collStats.freeStorageSize` to view the amount of storage available for 
reuse. 

The operation is iterative and operates on segments of the data file in each pass. 
To view an estimate of how much space ``compact`` will release, use the ``dryRun`` 
flag. Calling ``compact`` on a collection will compact both the collection and its 
associated indexes. 

``compact`` may require additional disk space to run.

.. _compact-perf:

Performance Considerations 
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/compaction-checkpoints.rst

.. _compact-cmd-replica-sets:

Replica Sets
~~~~~~~~~~~~

You can use ``compact`` on collections and indexes that are stored in a
replica set, however there are some important considerations:

- The primary node does not replicate the ``compact`` command to the
  secondaries.
- You should run ``compact`` on secondary nodes whenever possible. If
  you cannot run ``compact`` on secondaries, see the :ref:`force 
  <compact-force-option>` option.
- Starting in MongoDB 6.1.0 (and 6.0.2):

  - A secondary node can replicate while ``compact`` is running.
  - Reads are permitted.


To run ``compact`` on a cluster

.. procedure::
   :style: connected

   .. step:: Compact the secondary nodes.

      Run ``compact`` on one of the secondary nodes. When ``compact``
      finishes, repeat the operation on each of the remaining
      secondaries in turn.

   .. step:: Reassign the primary node.
    
      To step down the current primary and trigger an election, use the
      :method:`rs.stepDown()` method. To nominate a particular secondary
      node, :ref:`adjust the member priority
      <replica-set-adjust-priority>`.

   .. step:: Compact the old primary.

      After stepping down, the old primary node becomes a secondary
      node. Run ``compact`` on the old primary node.

Version Specific Considerations for Secondary Nodes
```````````````````````````````````````````````````

- A secondary node can replicate while ``compact`` is running.

- Reads are permitted.  

While the ``compact`` command is running, the replica set remains in a 
:replstate:`SECONDARY` status.

For more information about replica set member states, see
See :ref:`replica-set-member-states`.

For replica set maintenance and availability, see
:ref:`perform-maint-on-replica-set`.

Sharded Clusters
~~~~~~~~~~~~~~~~

``compact`` only applies to :binary:`~bin.mongod` instances. In a
sharded environment, run ``compact`` on each shard separately
as a maintenance operation.

You cannot issue ``compact`` against a :binary:`~bin.mongos` instance.

Index Building
~~~~~~~~~~~~~~

:binary:`~bin.mongod` rebuilds all indexes in parallel following the
``compact`` operation.

Concurrent Compact Commands Not Allowed
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you try to run multiple concurrent ``compact`` commands on the same
collection, MongoDB returns an error.

Example
-------

Compact a Collection
~~~~~~~~~~~~~~~~~~~~

The following operation runs the ``compact`` command on the
``movies`` collection:

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript

      db.runCommand( { compact: "movies" } )

   .. output::
      :language: javascript

      { bytesFreed: 27859, ok: 1 }

Estimate Compaction
~~~~~~~~~~~~~~~~~~~~

The following operation performs a dry run of the ``compact`` command on the
``movies`` collection:

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript

      db.runCommand( {
         compact: "movies",
         dryRun: true
      } )

   .. output::
      :language: javascript

      { estimatedBytesFreed: 27859, ok: 1 }



Learn More
----------

- :dbcommand:`autoCompact`