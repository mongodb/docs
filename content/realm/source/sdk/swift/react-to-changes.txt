.. meta::
   :robots: noindex, nosnippet

.. _ios-react-to-changes:
.. _ios-live-object:

============================
React to Changes - Swift SDK
============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

All Realm objects are **live objects**, which means they
automatically update whenever they're modified. Realm emits a
notification event whenever any property changes. You can register a 
notification handler to listen for these notification events, and update
your UI with the latest data.

This page shows how to manually register notification listeners in Swift.
Atlas Device SDK for Swift offers SwiftUI property wrappers to make it easy to
automatically update the UI when data changes. For more about how to use 
the SwiftUI property wrappers to react to changes, refer to 
:ref:`swiftui-update-ui-when-objects-change`.

.. _ios-register-a-realm-change-listener:

Register a Realm Change Listener
--------------------------------

You can register a notification handler on an entire :ref:`realm
<ios-realms>`. Realm calls the notification
handler whenever any write transaction involving that Realm is
committed. The handler receives no information about the change.

.. tabs-realm-languages::

  .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.register-a-realm-change-listener.swift
        :language: swift

  .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.register-a-realm-change-listener.m
        :language: objectivec
        
.. _ios-register-a-collection-change-listener:

Register a Collection Change Listener
-------------------------------------

You can register a notification handler on a collection within a
realm.

Realm notifies your handler:

- After first retrieving the collection.
- Whenever a write transaction adds, changes, or removes objects in the collection.

Notifications describe the changes since the prior notification with
three lists of indices: the indices of the objects that were deleted,
inserted, and modified.

.. important:: Order Matters
   
   In collection notification handlers, always apply changes
   in the following order: deletions, insertions, then
   modifications. Handling insertions before deletions may
   result in unexpected behavior.
  
Collection notifications provide a ``change`` parameter that reports which
objects are deleted, added, or modified during the write transaction. This
:swift-sdk:`RealmCollectionChange <Enums/RealmCollectionChange.html>` 
resolves to an array of index paths that you can pass to a ``UITableView``'s 
batch update methods.

.. important:: High-frequency updates

   This example of a collection change listener does not support 
   high-frequency updates. Under an intense workload, this collection 
   change listener may cause the app to throw an exception.

.. tabs-realm-languages::

  .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.register-a-collection-change-listener.swift
        :language: swift
        
  .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.register-a-collection-change-listener.m
        :language: objectivec

.. _ios-register-an-object-change-listener:

Register an Object Change Listener
----------------------------------

You can register a notification handler on a specific object
within a realm. Realm notifies your handler:

- When the object is deleted.
- When any of the object's properties change.

The handler receives information about what fields changed
and whether the object was deleted.

.. tabs-realm-languages::

  .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.register-an-object-change-listener.swift
        :language: swift

  .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.register-an-object-change-listener.m
        :language: objectivec

.. _ios-register-a-keypath-change-listener:

Register a Key Path Change Listener
-----------------------------------

.. versionadded:: 10.12.0

In addition to registering a notification handler on an :swift-sdk:`object 
<Extensions/Object.html#/s:So16RealmSwiftObjectC0aB0E7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAC0C6ChangeOyxGctSo13RLMObjectBaseCRbzlF>` 
or :swift-sdk:`collection <Protocols/RealmCollection.html#/s:10RealmSwift0A10CollectionP7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAA0aC6ChangeOyxGctF>`, you can pass an optional string ``keyPaths`` parameter to specify the key path or 
key paths to watch.

.. example::

   .. include:: /examples/generated/code/start/Notifications.snippet.register-a-keypath-change-listener.swift.rst

.. versionadded:: 10.14.0

You can :swift-sdk:`observe <Extensions/Object.html#/s:So16RealmSwiftObjectC0aB0E7observe8keyPaths2on_So20RLMNotificationTokenCSays14PartialKeyPathCyxGG_So17OS_dispatch_queueCSgyAC0C6ChangeOyxGctSo13RLMObjectBaseCRbzlF>`
a partially type-erased :apple:`PartialKeyPath <documentation/swift/partialkeypath>`
on :swift-sdk:`Objects <Extensions/Object.html>` or :swift-sdk:`RealmCollections 
<Protocols/RealmCollection.html>`.

.. code-block:: swift

   objectNotificationToken = dog.observe(keyPaths: [\Dog.favoriteToy, \Dog.age], { change in

When you specify ``keyPaths``, *only* changes to those
``keyPaths`` trigger notification blocks. Any other changes do not trigger
notification blocks.

.. example::

   Consider a ``Dog`` object where one of its properties is a list of 
   ``siblings``:

   .. include:: /examples/generated/code/start/Notifications.snippet.alternate-dog-class-for-keypaths.swift.rst

   If you pass ``siblings`` as a ``keyPath`` to observe, any insertion, 
   deletion, or modification to the ``siblings`` list would trigger a 
   notification. However, a change to ``someSibling.name`` would not trigger
   a notification, unless you explicitly observed ``["siblings.name"]``.

.. include:: /includes/note-key-path-notification-execution.rst

Realm Collections
~~~~~~~~~~~~~~~~~

When you observe key paths on the various collection types, expect these 
behaviors:

- :swift-sdk:`LinkingObjects: <Structs/LinkingObjects.html#/s:10RealmSwift14LinkingObjectsV7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAA0A16CollectionChangeOyACyxGGctF>`:
  Observing a property of the LinkingObject triggers a notification for a 
  change to that property, but does not trigger notifications for changes to 
  its other properties. Insertions or deletions to the list or the object 
  that the list is on trigger a notification. 
- :swift-sdk:`Lists <Classes/List.html#/s:10RealmSwift4ListC7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAA0A16CollectionChangeOyACyxGGctF>`:
  Observing a property of the list's object will triggers a notification for 
  a change to that property, but does not trigger notifications for changes 
  to its other properties. Insertions or deletions to the list or the object 
  that the list is on trigger a notification. 
- :swift-sdk:`Map <Classes/Map.html#/s:10RealmSwift3MapC7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAA0aC6ChangeOyACyxq_GGctF>`:
  Observing a property of the map's object triggers a notification for a change
  to that property, but does not trigger notifications for changes to its other
  properties. Insertions or deletions to the Map or the object that the map is
  on trigger a notification. The ``change`` parameter reports, in the form of 
  keys within the map, which key-value pairs are added, removed, or modified 
  during each write transaction. 
- :swift-sdk:`MutableSet <Classes/MutableSet.html#/s:10RealmSwift10MutableSetC7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAA0A16CollectionChangeOyACyxGGctF>`:
  Observing a property of a MutableSet's object triggers a notification 
  for a change to that property, but does not trigger notifications for changes 
  to its other properties. Insertions or deletions to the MutableSet or the 
  object that the MutableSet is on trigger a notification. 
- :swift-sdk:`Results <Structs/Results.html#/s:10RealmSwift7ResultsV7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAA0A16CollectionChangeOyACyxGGctF>`: 
  Observing a property of the Result triggers a notification for a change to 
  that property, but does not trigger notifications for changes to its other 
  properties. Insertions or deletions to the Result trigger a notification.

.. _ios-write-silently:

Write Silently
--------------

You can write to a realm *without* sending a notification to a
specific observer by passing the observer's notification token in an
array to :swift-sdk:`realm.write(withoutNotifying:_:)
<Structs/Realm.html#/s:10RealmSwift0A0V5write16withoutNotifying_xSaySo20RLMNotificationTokenCG_xyKXEtKlF>`:

.. tabs-realm-languages::

  .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.silent-write.swift
         :language: swift

  .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.silent-write.m
        :language: objectivec


.. seealso::

   :ref:`ios-interface-driven-writes`

.. _stop-watching-for-changes:

Stop Watching for Changes
-------------------------

Observation stops when the token returned by an ``observe`` call becomes
invalid. You can explicitly invalidate a token by calling its
``invalidate()`` method.

.. important:: Retain Tokens as Long as You Want to Observe

   Notifications stop if the token is in a local variable that goes out
   of scope. 

.. tabs-realm-languages::

  .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.stop-watching.swift
         :language: swift

  .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.stop-watching.m
        :language: objectivec

.. _ios-key-value-observation:

Key-value Observation
---------------------

Key-value Observation Compliance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Realm objects are :apple:`key-value observing (KVO) 
compliant<documentation/swift/cocoa_design_patterns/using_key-value_observing_in_swift>` 
for most properties:

- Almost all managed (non-ignored) properties on ``Object`` subclasses 
- The ``invalidated`` property on ``Object`` and ``List``

You cannot observe ``LinkingObjects`` properties via Key-value observation.

.. important::

   You cannot add an object to a realm (with ``realm.add(obj)`` or similar 
   methods) while it has any registered observers.

Managed vs. Unmanaged KVO Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Observing the properties of unmanaged instances of ``Object`` subclasses 
works like any other dynamic property.

Observing the properties of managed objects works differently. With 
realm-managed objects, the value of a property may change when:

- You assign to it
- The realm is refreshed, either manually with ``realm.refresh()`` or 
  automatically on a runloop thread
- You begin a write transaction after changes on another thread

Realm applies changes made in the write transaction(s) on other threads 
at once. Observers see Key-value observation notifications at once. 
Intermediate steps do not trigger KVO notifications.

.. example::

   Say your app performs a write transaction that increments a property 
   from 1 to 10. On the main thread, you get a single notification of a 
   change directly from 1 to 10. You won't get notifications for every 
   incremental change between 1 and 10.

Avoid modifying managed Realm objects from within 
``observeValueForKeyPath(_:ofObject:change:context:)``. Property values 
can change when not in a write transaction, or as part of beginning a 
write transaction.

Observing Realm Lists
~~~~~~~~~~~~~~~~~~~~~

Observing changes made to Realm ``List`` properties is simpler than 
``NSMutableArray`` properties:

- You don't have to mark ``List`` properties as dynamic to observe them.
- You can call modification methods on ``List`` directly. Anyone observing 
  the property that stores it gets a notification.

You don't need to use ``mutableArrayValueForKey(_:)``, although realm 
does support this for code compatibility. 

.. seealso::

   Examples of using Realm with :github:`ReactiveCocoa from Objective-C<realm/realm-swift/tree/master/examples/ios/objc/TableView>`, 
   and :github:`ReactKit from Swift<realm/realm-swift/tree/v2.3.0/examples/ios/swift-2.2/ReactKit>`.

.. _swift-react-to-changes-different-actor:

React to Changes on a Different Actor
-------------------------------------

You can observe notifications on a different actor. Calling 
``await object.observe(on: Actor)`` or 
``await collection.observe(on: Actor)`` registers a block to be called each 
time the object or collection changes.

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.observe-collection-on-actor.swift
   :language: swift

For more information about change notifications on another actor, 
refer to :ref:`swift-observe-notifications-on-another-actor`.

.. _ios-react-to-changes-to-a-class-projection:

React to Changes to a Class Projection
--------------------------------------

Like other realm objects, you can :ref:`react to changes <ios-react-to-changes>`
to a class projection. When you register a class projection change listener, 
you see notifications for changes made through the class projection object 
directly. You also see notifications for changes to the underlying object's 
properties that project through the class projection object.

Properties on the underlying object that are not ``@Projected`` in the 
class projection do not generate notifications.

This notification block fires for changes in:

- ``Person.firstName`` property of the class projection's underlying 
  ``Person`` object, but not changes to ``Person.lastName`` or 
  ``Person.friends``.
- ``PersonProjection.firstName`` property, but not another class projection 
  that uses the same underlying object's property. 

.. literalinclude:: /examples/generated/code/start/ClassProjection.snippet.register-a-class-projection-change-listener.swift
   :language: swift

Notification Delivery
---------------------

Notification delivery can vary depending on:

- Whether or not the notification occurs within a write transaction
- The relative threads of the write and the observation 

When your application relies on the timing of notification delivery, such 
as when you use notifications to update a ``UITableView``, it's important 
to understand the specific behaviors for your application code's context.

Perform Writes Only on a Different Thread than the Observing Thread
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Reading an observed collection or object from inside a change notification 
always accurately tells you what has changed in the collection passed to 
the callback since the last time the callback was invoked.

Reading collections or objects outside of change notifications always gives 
you the exact same values you saw in the most recent change notification 
for that object.

Reading objects other than the observed one *inside* a change notification 
may see a different value prior to the notification for that change being 
delivered. Realm ``refresh`` brings the entire realm from 'old version' to 
'latest version' in one operation. However, there might have been multiple 
change notifications fired between 'old version' and 'latest version'. Inside 
a callback, you may see changes that have pending notifications.

Writes on different threads eventually become visible on the observing 
thread. Explicitly calling ``refresh()`` blocks until the writes made on 
other threads are visible and the appropriate notifications have been sent. 
If you call ``refresh()`` within a notification callback, it's a no-op.

Perform Writes on the Observing Thread, Outside of Notifications
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

At the start of the write transaction all behaviors above apply to this 
context. Additionally, you can expect to always see the latest version of 
the data.

Inside a write transaction, the only changes you see are those you've made 
so far within the write transaction.

Between committing a write transaction and the next set of change 
notifications being sent, you can see the changes you made in the write 
transaction, but no other changes. Writes made on different threads do 
not become visible until you receive the next set of notifications. 
Performing another write on the same thread sends notifications for the 
previous write first.

Perform Writes Inside of Notifications
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you perform writes within notifications, you see many of the same 
behaviors above, with a few exceptions.

Callbacks invoked before the one that performed a write behave normally. 
While Realm invokes change callbacks in a stable order, this is not strictly 
the order in which you added the observations.

If beginning the write refreshes the realm, which can happen if another 
thread is making writes, this triggers recursive notifications. These 
nested notifications report the changes made since the last call to the 
callback. For callbacks before the one making the write, this means the 
inner notification reports only the changes made after the ones already 
reported in the outer notification. If the callback making the write tries 
to write again in the inner notification, Realm throws an exception. 
The callbacks after the one making the write get a single notification for 
both sets of changes.

After the callback completes the write and returns, Realm does not invoke 
any of the subsequent callbacks as they no longer have any changes to report. 
Realm provides a notification later for the write as if the write had happened 
outside of a notification.

If beginning the write doesn't refresh the realm, the write happens as 
usual. However, Realm invokes the subsequent callbacks in an inconsistent 
state. They continue to report the original change information, but the 
observed object/collection now includes the changes from the write made 
in the previous callback.

If you try to perform manual checks and write handling to get more fine-grained
notifications from within a write transaction, you can get notifications 
nested more than two levels deep. An example of a manual write handling is 
checking ``realm.isInWriteTransaction``, and if so making changes, calling 
``realm.commitWrite()`` and then ``realm.beginWrite()``. The nested 
notifications and potential for error make this manual manipulation 
error-prone and difficult to debug.

You can use the :ref:`writeAsync API <ios-async-write>` to sidestep complexity
if you don't need fine-grained change information from inside your write block.
Observing an async write similar to this provides notifications even if the 
notification happens to be delivered inside a write transaction:

.. code-block:: swift
   :copyable: false

   let token = dog.observe(keyPaths: [\Dog.age]) { change in
      guard case let .change(dog, _) = change else { return }
      dog.realm!.writeAsync {
         dog.isPuppy = dog.age < 2
      }
   }

However, because the write is async the realm may have changed between the 
notification and when the write happens. In this case, the change information 
passed to the notification may no longer be applicable.

Updating a UITableView Based on Notifications
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you only update a ``UITableView`` via notifications, in the time between 
a write transaction and the next notification arriving, the TableView's 
state is out of sync with the data. The TableView could have a pending update 
scheduled, which can appear to cause delayed or inconsistent updates.

You can address these behaviors in a few ways.

The following examples use this very basic ``UITableViewController``.

.. literalinclude:: /examples/generated/code/start/Notifications.snippet.notification-delivery-example-view-controller.swift
   :language: swift
   :copyable: false

Update the UITableView Directly Without a Notification
``````````````````````````````````````````````````````

Updating the ``UITableView`` directly without waiting for a notification 
provides the most responsive UI. This code updates the TableView immediately 
instead of requiring hops between threads, which add a small amount of 
lag to each update. The downside is that it requires frequent manual 
updates to the view.

.. literalinclude:: /examples/generated/code/start/Notifications.snippet.update-table-skip-notification.swift
   :language: swift
   :copyable: false

Force a Refresh After a Write
`````````````````````````````

Forcing a ``refresh()`` after a write provides the notifications from the 
write immediately rather than on a future run of the run loop. There's no 
window for the TableView to read out-of-sync values. 

The downside is that this means things we recommend doing in the background,
such as writing, rerunning the query and re-sorting the results, happen 
on the main thread. When these operations are computationally expensive, 
this can cause delays on the main thread.

.. literalinclude:: /examples/generated/code/start/Notifications.snippet.update-table-force-refresh-after-write.swift
   :language: swift
   :copyable: false

Perform the Write on a Background Thread
`````````````````````````````````````````

Performing a write on a background thread blocks the main thread for the 
least amount of time. However, the code to perform a write on the background 
requires more familiarity with Realm's threading model and Swift DispatchQueue 
usage. Since the write doesn't happen on the main thread, the main thread 
never sees the write before the notifications arrive.

.. literalinclude:: /examples/generated/code/start/Notifications.snippet.update-table-async-write.swift
   :language: swift
   :copyable: false

.. _swift-change-notification-limits:

Change Notification Limits
--------------------------

.. include:: /includes/change-notification-limit.rst

In the Swift SDK, you can also use 
:ref:`key path filtering <ios-register-a-keypath-change-listener>` to work 
around this limitation. This feature is not available in the other SDKs.
