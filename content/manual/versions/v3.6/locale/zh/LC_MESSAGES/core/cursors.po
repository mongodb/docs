# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/cursors.txt:5
msgid "Cursors"
msgstr ""

#: ../source/core/cursors.txt:9
msgid ""
"In the :program:`mongo` shell, the primary method for the read operation is "
"the :method:`db.collection.find()` method. This method queries a collection "
"and returns a :term:`cursor` to the returning documents."
msgstr ""

#: ../source/core/cursors.txt:14
msgid ""
"To access the documents, you need to iterate the cursor. However, in the "
":program:`mongo` shell, if the returned cursor is not assigned to a variable"
" using the ``var`` keyword, then the cursor is automatically iterated up to "
"20 times [#set-shell-batch-size]_ to print up to the first 20 documents in "
"the results."
msgstr ""

#: ../source/core/cursors.txt:20
msgid ""
"For example, in the :program:`mongo` shell, the following read operation "
"queries the ``inventory`` collection for documents that have ``type`` equal "
"to ``'food'`` and automatically print up to the first 20 matching documents:"
msgstr ""

#: ../source/core/cursors.txt:29
msgid ""
"To manually iterate the cursor to access the documents, see "
":doc:`/tutorial/iterate-a-cursor`."
msgstr ""

#: ../source/includes/footnote-set-shell-batch-size.rst:1
msgid ""
"You can use the ``DBQuery.shellBatchSize`` to change the number of iteration"
" from the default value ``20``. See :ref:`mongo-shell-executing-queries` for"
" more information."
msgstr ""

#: ../source/core/cursors.txt:37
msgid "Cursor Behaviors"
msgstr ""

#: ../source/core/cursors.txt:40
msgid "Closure of Inactive Cursors"
msgstr ""

#: ../source/core/cursors.txt:42
msgid ""
"By default, the server will automatically close the cursor after 10 minutes "
"of inactivity or if client has exhausted the cursor. To override this "
"behavior, you can specify the ``noTimeout`` flag in your query using "
":method:`cursor.addOption()`; however, you should either close the cursor "
"manually or exhaust the cursor. In the :program:`mongo` shell, you can set "
"the ``noTimeout`` flag:"
msgstr ""

#: ../source/core/cursors.txt:53
msgid ""
"See your :doc:`driver </applications/drivers>` documentation for information"
" on setting the ``noTimeout`` flag. For the :program:`mongo` shell, see "
":method:`cursor.addOption()` for a complete list of available cursor flags."
msgstr ""

#: ../source/core/cursors.txt:61
msgid "Cursor Isolation"
msgstr ""

#: ../source/core/cursors.txt:63
msgid ""
"Because the cursor is not isolated during its lifetime, intervening write "
"operations on a document may result in a cursor that returns a document more"
" than once if that document has changed. To handle this situation, see the "
"information on :ref:`snapshot mode <faq-developers-isolate-cursors>`."
msgstr ""

#: ../source/core/cursors.txt:72
msgid "Cursor Batches"
msgstr ""

#: ../source/core/cursors.txt:74
msgid ""
"The MongoDB server returns the query results in batches. Batch size will not"
" exceed the :ref:`maximum BSON document size <limit-bson-document-size>`. "
"For most queries, the *first* batch returns 101 documents or just enough "
"documents to exceed 1 megabyte. Subsequent batch size is 4 megabytes. To "
"override the default size of the batch, see :method:`~cursor.batchSize()` "
"and :method:`~cursor.limit()`."
msgstr ""

#: ../source/core/cursors.txt:82
msgid ""
"For queries that include a sort operation *without* an index, the server "
"must load all the documents in memory to perform the sort before returning "
"any results."
msgstr ""

#: ../source/core/cursors.txt:86
msgid ""
"As you iterate through the cursor and reach the end of the returned batch, "
"if there are more results, :method:`cursor.next()` will perform a "
":data:`getmore operation <currentOp.op>` to retrieve the next batch. To see "
"how many documents remain in the batch as you iterate the cursor, you can "
"use the :method:`~cursor.objsLeftInBatch()` method, as in the following "
"example:"
msgstr ""

#: ../source/core/cursors.txt:102
msgid "Cursor Information"
msgstr ""

#: ../source/core/cursors.txt:104
msgid ""
"The :method:`db.serverStatus()` method returns a document that includes a "
":data:`~serverStatus.metrics` field. The :data:`~serverStatus.metrics` field"
" contains a :data:`~serverStatus.metrics.cursor` field with the following "
"information:"
msgstr ""

#: ../source/core/cursors.txt:110
msgid "number of timed out cursors since the last server restart"
msgstr ""

#: ../source/core/cursors.txt:112
msgid ""
"number of open cursors with the option :data:`DBQuery.Option.noTimeout` set "
"to prevent timeout after a period of inactivity"
msgstr ""

#: ../source/core/cursors.txt:116
msgid "number of \"pinned\" open cursors"
msgstr ""

#: ../source/core/cursors.txt:118
msgid "total number of open cursors"
msgstr ""

#: ../source/core/cursors.txt:120
msgid ""
"Consider the following example which calls the :method:`db.serverStatus()` "
"method and accesses the ``metrics`` field from the results and then the "
"``cursor`` field from the ``metrics`` field:"
msgstr ""

#: ../source/core/cursors.txt:129
msgid "The result is the following document:"
msgstr ""

#: ../source/core/cursors.txt:142
msgid ":method:`db.serverStatus()`"
msgstr ""
