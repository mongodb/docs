#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/read-concern.txt:5
msgid "Read Concern"
msgstr ""

#: ../source/reference/read-concern.txt:15
msgid ""
"The ``readConcern`` option allows you to control the recency, "
"consistency, and isolation properties of the data read from replica sets "
"and replica set shards."
msgstr ""

#: ../source/reference/read-concern.txt:19
msgid ""
"Through the effective use of :doc:`write concerns </reference/write-"
"concern>` and read concerns, you can adjust the level of consistency and "
"availability guarantees as appropriate, such as waiting for stronger "
"consistency guarantees, or loosening consistency requirements to provide "
"higher availability."
msgstr ""

#: ../source/reference/read-concern.txt:26
msgid ""
"MongoDB drivers updated for MongoDB 3.2 or later support specifying read "
"concern."
msgstr ""

#: ../source/reference/read-concern.txt:32
msgid "Read Concern Levels"
msgstr ""

#: ../source/reference/read-concern.txt:34
msgid "The following read concern levels are available:"
msgstr ""

#: ../source/reference/read-concern.txt:40
msgid "``level``"
msgstr ""

#: ../source/reference/read-concern.txt:41
msgid "Description"
msgstr ""

#: ../source/reference/read-concern.txt:43
msgid ":readconcern:`\"local\"`"
msgstr ""

#: ../source/reference/read-concern.txt:45
#: ../source/reference/read-concern.txt:63
msgid ""
"The query returns data from the instance with no guarantee that the data "
"has been written to a majority of the replica set members (i.e. may be "
"rolled back)."
msgstr ""

#: ../source/reference/read-concern.txt:53
msgid "Default for:"
msgstr ""

#: ../source/reference/read-concern.txt:50
msgid "reads against primary"
msgstr ""

#: ../source/reference/read-concern.txt:52
msgid ""
"reads against secondaries if the reads are associated with :ref:`causally"
" consistent sessions <sessions>`."
msgstr ""

#: ../source/reference/read-concern.txt:55
msgid ""
"Read concern :readconcern:`local` is available for use with causally "
"consistent sessions."
msgstr ""

#: ../source/reference/read-concern.txt:58
msgid "For more information, see the :readconcern:`\"local\"` reference page."
msgstr ""

#: ../source/reference/read-concern.txt:61
msgid ":readconcern:`\"available\"`"
msgstr ""

#: ../source/reference/read-concern.txt:67
msgid ""
"Default for reads against secondaries if the reads are not associated "
"with :ref:`causally consistent sessions <sessions>`."
msgstr ""

#: ../source/reference/read-concern.txt:70
msgid ""
"For sharded collections, :readconcern:`\"available\"` read concern "
"provides the lowest latency reads possible among the various read "
"concerns but at the expense of consistency as "
":readconcern:`\"available\"` read concern can return orphan documents."
msgstr ""

#: ../source/reference/read-concern.txt:76
msgid ""
"Read concern :readconcern:`available` is unavailable for use with "
"causally consistent sessions."
msgstr ""

#: ../source/reference/read-concern.txt:79
msgid "For more information, see the :readconcern:`\"available\"` reference page."
msgstr ""

#: ../source/reference/read-concern.txt:84
msgid ":readconcern:`\"majority\"`"
msgstr ""

#: ../source/reference/read-concern.txt:86
msgid ""
"The query returns data that has been acknowledged by a majority of the "
"replica set members. The documents returned by the read operation are "
"durable, even in the event of failure."
msgstr ""

#: ../source/includes/fact-enable-majority-readConcern.rst:1
msgid ""
"To use :term:`read concern` level of :readconcern:`\"majority\"`, replica"
" sets must use :ref:`WiredTiger storage engine <storage-wiredtiger>` and "
"election :rsconf:`protocol version 1 <protocolVersion>`."
msgstr ""

#: ../source/includes/fact-enable-majority-readConcern.rst:5
msgid ""
"Starting in MongoDB 3.6, support for read concern "
":readconcern:`\"majority\"` is enabled by default. For MongoDB 3.6.1 - "
"3.6.x, you can disable read concern :readconcern:`\"majority\"`. For more"
" information, see :ref:`3.6-disable-read-concern-majority`."
msgstr ""

#: ../source/reference/read-concern.txt:92
msgid ""
"Read concern :readconcern:`majority` is available for use with causally "
"consistent sessions."
msgstr ""

#: ../source/reference/read-concern.txt:95
msgid "For more information, see the :readconcern:`\"majority\"` reference page."
msgstr ""

#: ../source/reference/read-concern.txt:98
msgid ":readconcern:`\"linearizable\"`"
msgstr ""

#: ../source/reference/read-concern.txt:100
msgid ""
"The query returns data that reflects all successful majority-acknowledged"
" writes that completed prior to the start of the read operation. The "
"query may wait for concurrently executing writes to propagate to a "
"majority of replica set members before returning results."
msgstr ""

#: ../source/reference/read-concern.txt:106
msgid ""
"If a majority of your replica set members crash and restart after the "
"read operation, documents returned by the read operation are durable if "
":rsconf:`writeConcernMajorityJournalDefault` is set to the default state "
"of ``true``."
msgstr ""

#: ../source/includes/extracts/no-journaling-rollback.rst:2
msgid ""
"With :rsconf:`writeConcernMajorityJournalDefault` set to ``false``, "
"MongoDB does not wait for :writeconcern:`w: \"majority\" <\"majority\">` "
"writes to be written to the on-disk journal before acknowledging the "
"writes. As such, :writeconcern:`majority` write operations could possibly"
" roll back in the event of a transient loss (e.g. crash and restart) of a"
" majority of nodes in a given replica set."
msgstr ""

#: ../source/reference/read-concern.txt:113
msgid ""
"You can specify linearizable read concern for read operations on the "
":replstate:`primary <PRIMARY>` only."
msgstr ""

#: ../source/reference/read-concern.txt:116
msgid ""
"Read concern :readconcern:`linearizable` is unavailable for use with "
"causally consistent sessions."
msgstr ""

#: ../source/reference/read-concern.txt:119
msgid ""
"Linearizable read concern guarantees only apply if read operations "
"specify a query filter that uniquely identifies a single document."
msgstr ""

#: ../source/reference/read-concern.txt:125
#: ../source/reference/read-concern.txt:227
msgid ""
"Always use ``maxTimeMS`` with linearizable read concern in case a "
"majority of data bearing members are unavailable. ``maxTimeMS`` ensures "
"that the operation does not block indefinitely and instead ensures that "
"the operation returns an error if the read concern cannot be fulfilled."
msgstr ""

#: ../source/reference/read-concern.txt:131
msgid ""
"For more information, see the :readconcern:`\"linearizable\"` reference "
"page."
msgstr ""

#: ../source/includes/fact-readConcern-most-recent-data-in-node.rst:1
msgid ""
"Regardless of the :term:`read concern` level, the most recent data on a "
"node may not reflect the most recent version of the data in the system."
msgstr ""

#: ../source/reference/read-concern.txt:136
msgid "For more information on each read concern level, see:"
msgstr ""

#: ../source/reference/read-concern.txt:147
msgid "``readConcern`` Syntax"
msgstr ""

#: ../source/reference/read-concern.txt:149
msgid ""
"You can specify a ``readConcern`` level [#after-cluster-time]_ as an "
"option:"
msgstr ""

#: ../source/reference/read-concern.txt:158
msgid ""
"For operations in a :ref:`causally consistent session <causal-"
"consistency>`, :readconcern:`\"local\"` and :readconcern:`\"majority\"` "
"levels are available. However, to guarantee causal consistency, you must "
"use :readconcern:`\"majority\"`. For details, see :ref:`causal-"
"consistency`."
msgstr ""

#: ../source/reference/read-concern.txt:164
msgid "The following operations support the ``readConcern`` option:"
msgstr ""

#: ../source/reference/read-concern.txt:166
msgid ":dbcommand:`find` command"
msgstr ""

#: ../source/reference/read-concern.txt:168
msgid ""
":dbcommand:`aggregate` command and the "
":method:`db.collection.aggregate()` method"
msgstr ""

#: ../source/reference/read-concern.txt:171
msgid ":dbcommand:`distinct` command"
msgstr ""

#: ../source/reference/read-concern.txt:173
msgid ":dbcommand:`count` command"
msgstr ""

#: ../source/reference/read-concern.txt:175
msgid ":dbcommand:`parallelCollectionScan` command"
msgstr ""

#: ../source/reference/read-concern.txt:177
msgid ":dbcommand:`geoNear` command"
msgstr ""

#: ../source/reference/read-concern.txt:179
msgid ":dbcommand:`geoSearch` command"
msgstr ""

#: ../source/reference/read-concern.txt:181
msgid ":dbcommand:`group` command"
msgstr ""

#: ../source/reference/read-concern.txt:183
msgid ""
"To specify the read concern level for the :binary:`~bin.mongo` shell "
"method :method:`db.collection.find()`, use the "
":method:`cursor.readConcern()` method:"
msgstr ""

#: ../source/reference/read-concern.txt:193
msgid ""
"For :ref:`causally consistent sessions <causal-consistency>`, MongoDB "
"drivers automatically specifies the :ref:`afterClusterTime "
"<afterClusterTime>` value in the read concern."
msgstr ""

#: ../source/reference/read-concern.txt:198
msgid "Considerations"
msgstr ""

#: ../source/reference/read-concern.txt:201
msgid "Read Your Own Writes"
msgstr ""

#: ../source/includes/fact-read-own-writes.rst:1
msgid ""
"Starting in MongoDB 3.6, you can use :ref:`causally consistent sessions "
"<sessions>` to read your own writes, if the writes request "
"acknowledgement."
msgstr ""

#: ../source/includes/fact-read-own-writes.rst:5
msgid ""
"Prior to MongoDB 3.6, you must have issued your write operation with "
":writeconcern:`{ w: \"majority\" } <\"majority\">` write concern and then"
" use either :readconcern:`\"majority\"` or "
":readconcern:`\"linearizable\"` read concern for the read operations to "
"ensure that a single thread can read its own writes."
msgstr ""

#: ../source/reference/read-concern.txt:208
msgid "Real Time Order"
msgstr ""

#: ../source/reference/read-concern.txt:210
msgid ""
"Combined with :writeconcern:`\"majority\"` write concern, "
":readconcern:`\"linearizable\"` read concern enables multiple threads to "
"perform reads and writes on a single document as if a single thread "
"performed these operations in real time; that is, the corresponding "
"schedule for these reads and writes is considered linearizable."
msgstr ""

#: ../source/reference/read-concern.txt:217
msgid "Performance Comparisons"
msgstr ""

#: ../source/reference/read-concern.txt:219
msgid ""
"Unlike :readconcern:`\"majority\"`, :readconcern:`\"linearizable\"` read "
"concern confirms with secondary members that the read operation is "
"reading from a primary that is capable of confirming writes with "
":writeconcern:`{ w: \"majority\" } <\"majority\">` write concern. [#edge-"
"cases-2-primaries]_ As such, reads with linearizable read concern may be "
"significantly slower than reads with :readconcern:`\"majority\"` or "
":readconcern:`\"local\"` read concerns."
msgstr ""

#: ../source/reference/read-concern.txt:232
msgid "For example:"
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may"
" *transiently* believe that they are the primary, but at most, one of "
"them will be able to complete writes with :writeconcern:`{ w: "
"\"majority\" } <\"majority\">` write concern. The node that can complete "
":writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current "
"primary, and the other node is a former primary that has not yet "
"recognized its demotion, typically due to a :term:`network partition`. "
"When this occurs, clients that connect to the former primary may observe "
"stale data despite having requested read preference :readmode:`primary`, "
"and new writes to the former primary will eventually roll back."
msgstr ""

#: ../source/reference/read-concern.txt:252
msgid "Read Operations and Causally Consistent Sessions"
msgstr ""

#: ../source/reference/read-concern.txt:256
msgid ""
"MongoDB 3.6 introduces support for :ref:`causally consistent sessions "
"<sessions>`. For read operations associated with causally consistent "
"session, MongoDB 3.6 introduces the ``afterClusterTime`` read concern "
"option to be set automatically by the drivers for operations associated "
"with causally consistent sessions."
msgstr ""

#: ../source/reference/read-concern.txt:262
msgid ""
"The ``afterClusterTime`` read concern option is available for "
":readconcern:`\"local\"` and :readconcern:`\"majority\"` read concern "
"levels:"
msgstr ""

#: ../source/reference/read-concern.txt:268
msgid ""
"Do not manually set ``afterClusterTime``. MongoDB drivers set this value "
"automatically for operations associated with causally consistent "
"sessions."
msgstr ""

#: ../source/reference/read-concern.txt:276
msgid ""
"To satisfy a read request with an ``afterClusterTime`` value of ``T``, a "
":binary:`~bin.mongod` must perform the request after its oplog reaches "
"time ``T``. If its oplog has not reached time ``T``, the "
":binary:`~bin.mongod` must wait to service the request."
msgstr ""

#: ../source/reference/read-concern.txt:281
msgid ""
"Read operations with a specified ``afterClusterTime`` return data that "
"meet both the :ref:`read concern level <read-concern-levels>` requirement"
" and the specified ``afterClusterTime`` requirement."
msgstr ""

#: ../source/reference/read-concern.txt:285
msgid ""
"For read operations not associated with causally consistent sessions, "
"``afterClusterTime`` is unset."
msgstr ""

#~ msgid ""
#~ "MongoDB 3.2 introduces the ``readConcern`` "
#~ "query option for replica sets and "
#~ "replica set shards. By default, MongoDB"
#~ " uses a read concern of ``\"local\"``"
#~ " to return the most recent data "
#~ "available to the MongoDB instance at "
#~ "the time of the query, even if "
#~ "the data has not been persisted to"
#~ " a majority of replica set members"
#~ " and may be rolled back."
#~ msgstr ""

#~ msgid ""
#~ "For the :doc:`WiredTiger storage engine "
#~ "</core/wiredtiger>`, the ``readConcern`` option "
#~ "allows clients to choose a level "
#~ "of isolation for their reads. You "
#~ "can specify a read concern of "
#~ "``\"majority\"`` to read data that has"
#~ " been written to a majority of "
#~ "replica set members and thus cannot "
#~ "be rolled back."
#~ msgstr ""

#~ msgid ""
#~ "With the :doc:`MMAPv1 storage engine "
#~ "</core/mmapv1>`, you can only specify a"
#~ " ``readConcern`` option of ``\"local\"``."
#~ msgstr ""

#~ msgid "``readConcern`` requires MongoDB drivers updated for 3.2."
#~ msgstr ""

#~ msgid ""
#~ "By default, MongoDB uses a "
#~ "``readConcern`` of ``\"local\"`` which does"
#~ " not guarantee that the read data "
#~ "would not be rolled back."
#~ msgstr ""

#~ msgid ""
#~ "You can specify a ``readConcern`` of "
#~ "``\"majority\"`` to read data that has"
#~ " been written to a majority of "
#~ "replica set members and thus cannot "
#~ "be rolled back."
#~ msgstr ""

#~ msgid ""
#~ "Default. The query returns the "
#~ "instance's most recent copy of data. "
#~ "Provides no guarantee that the data "
#~ "has been written to a majority of"
#~ " the replica set members."
#~ msgstr ""

#~ msgid ""
#~ "The query returns the instance's most"
#~ " recent copy of data confirmed as "
#~ "written to a majority of members "
#~ "in the replica set."
#~ msgstr ""

#~ msgid ""
#~ "To use a :term:`read concern` level "
#~ "of :readconcern:`\"majority\"`, you must use"
#~ " the WiredTiger storage engine and "
#~ "start the :program:`mongod` instances with "
#~ "the :option:`--enableMajorityReadConcern` command "
#~ "line option (or the "
#~ ":setting:`replication.enableMajorityReadConcern` setting "
#~ "if using a configuration file)."
#~ msgstr ""

#~ msgid ""
#~ "Only replica sets using :rsconf:`protocol "
#~ "version 1 <protocolVersion>` support "
#~ ":readconcern:`\"majority\"` read concern. Replica"
#~ " sets running protocol version 0 do"
#~ " not support :readconcern:`\"majority\"` read "
#~ "concern."
#~ msgstr ""

#~ msgid ""
#~ "To ensure that a single thread can"
#~ " read its own writes, use "
#~ ":readconcern:`\"majority\"` read concern and "
#~ ":writeconcern:`\"majority\"` write concern against"
#~ " the primary of the replica set."
#~ msgstr ""

#~ msgid ""
#~ "For the ``level`` field, specify either"
#~ " the string ``\"majority\"`` or "
#~ "``\"local\"``."
#~ msgstr ""

# 2bbbb40e65fd411b8d924d3da940f1a3
#~ msgid "On this page"
#~ msgstr ""

# e7ecb26e6236425580de5cf9f0a8d1da
#~ msgid ""
#~ "The ``readConcern`` query option for "
#~ "replica sets and replica set shards "
#~ "determines which data to return from "
#~ "a query."
#~ msgstr ""

# 47e771af1b524f36982b227b4d2b9cfd
#~ msgid "Adds support for :readconcern:`\"linearizable\"` read concern."
#~ msgstr ""

# d5c539e596f041568b5ec0ca408d573f
#~ msgid ""
#~ "Default. The query returns the "
#~ "instance's most recent data. Provides no"
#~ " guarantee that the data has been "
#~ "written to a majority of the "
#~ "replica set members (i.e. may be "
#~ "rolled back)."
#~ msgstr ""

# 48af58781a35420bbd9c199e47a3cb53
#~ msgid ""
#~ "The query returns the instance's most"
#~ " recent data acknowledged as having "
#~ "been written to a majority of "
#~ "members in the replica set."
#~ msgstr ""

# 5534dc5b8c224d8e8fa5abb8ee74b261
#~ msgid "To use :term:`read concern` level of :readconcern:`\"majority\"`,"
#~ msgstr ""

# e4d5421af3f14418aa508cc7ad0ce701
#~ msgid ""
#~ "you must start the :program:`mongod` "
#~ "instances with the "
#~ ":option:`--enableMajorityReadConcern` command line "
#~ "option (or the "
#~ ":setting:`replication.enableMajorityReadConcern` set to"
#~ " ``true`` if using a configuration "
#~ "file)."
#~ msgstr ""

# f67cd7ba10124efeb58fb74a3fe60e7a
#~ msgid ""
#~ "replica sets must use :ref:`WiredTiger "
#~ "storage engine <storage-wiredtiger>` and "
#~ "election :rsconf:`protocol version 1 "
#~ "<protocolVersion>`."
#~ msgstr ""

# f8437bee6c8445d6af04dc08824781c1
#~ msgid ""
#~ "The query returns data that reflects "
#~ "all successful writes issued with a "
#~ "write concern of :writeconcern:`\"majority\"` "
#~ "*and* acknowledged prior to the start"
#~ " of the read operation. For replica"
#~ " sets that run with "
#~ ":rsconf:`writeConcernMajorityJournalDefault` set to "
#~ "true, linearizable read concern returns "
#~ "data that will never be rolled "
#~ "back."
#~ msgstr ""

# da54ea5ff1fa464e9e12f5a0580b2a56
#~ msgid ""
#~ "With :rsconf:`writeConcernMajorityJournalDefault` set "
#~ "to ``false``, MongoDB will not wait "
#~ "for :writeconcern:`w: \"majority\" <\"majority\">`"
#~ " writes to be durable before "
#~ "acknowledging the writes. As such, "
#~ ":writeconcern:`\"majority\"` write operations could"
#~ " possibly roll back in the event "
#~ "of a loss of a replica set "
#~ "member."
#~ msgstr ""

# 5c801321fe8f454682eb3501dc1e7c9b
# 656ffbcfabce4ddf9701c7714870c86c
#~ msgid "Tip"
#~ msgstr ""

# 1ddc6d045183446da4b77d4353a1bb1f
#~ msgid ""
#~ "Lineariable read concern is available "
#~ "for both MMAPv1 and WiredTiger. See "
#~ ":ref:`read-concern-storage-engine-drivers`."
#~ msgstr ""

# f43bef679ccc4cc0be90e93c78b5a030
#~ msgid "Storage Engine and Drivers Support"
#~ msgstr ""

# 69661cf22510415ea3418a861d4c0b79
#~ msgid "WiredTiger"
#~ msgstr ""

# 0c9c650f67ec48fb803b67a8cc472422
#~ msgid "MMAPv1"
#~ msgstr ""

# cda5909d7dbd471183e66b7a329a3601
# 4574fcd2f591486780d67aa62aa226ad
# 28c176470c32418fbdaf9343304e5b98
# ee3e86541057452fb2750ebb8dc870ad
# 9291d4ad82f44494859dabd1e9595549
#~ msgid "|checkmark|"
#~ msgstr ""

# 39bd8a3ca0234a3695de25f6ab76df43
#~ msgid ""
#~ "The :dbcommand:`serverStatus` command returns "
#~ "the :serverstatus:`storageEngine.supportsCommittedReads` "
#~ "field which indicates whether the "
#~ "storage engine supports ``\"majority\"`` read"
#~ " concern."
#~ msgstr ""

# 43d48ad2f4944aea9f429dc4e2f37eac
#~ msgid ""
#~ "MongoDB drivers updated for 3.2 and "
#~ "later versions support specifying a read"
#~ " concern option."
#~ msgstr ""

# 1a35baed0f8a430f990c9a093a782782
#~ msgid "``readConcern`` Option"
#~ msgstr ""

# c5d6e06e94d74ccf86d0ec38d8400b17
#~ msgid "Use the ``readConcern`` option to specify the read concern level."
#~ msgstr ""

# e2aeb695e77343a38d77fe1e3585c63e
#~ msgid "The ``readConcern`` option is available for the following operations:"
#~ msgstr ""

# 959b39b8dc4f4f35a58441cab3ae63d2
#~ msgid ""
#~ "To specify the read concern for "
#~ "the :program:`mongo` shell method "
#~ ":method:`db.collection.find()`, use the "
#~ ":method:`cursor.readConcern()` method."
#~ msgstr ""

# 6c4201b7dc6d4fa7abb6b6fd5a779fbd
#~ msgid ""
#~ "If using :readconcern:`\"majority\"` or "
#~ ":readconcern:`\"linearizable\"` read concern for "
#~ "read operations, use :writeconcern:`{ w: "
#~ "\"majority\" } <\"majority\">` write concern"
#~ " for write operations on the primary"
#~ " to ensure that a single thread "
#~ "can read its own writes."
#~ msgstr ""

