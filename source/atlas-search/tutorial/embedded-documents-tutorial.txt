.. facet::
   :name: programming_language
   :values: csharp, go, java, javascript/typescript, kotlin, python, shell

.. _embedded-documents-tutorial:

==================================================
How to Run |fts| Queries Against Objects in Arrays 
==================================================

.. default-domain:: mongodb

.. meta::
   :keywords: embedded documents index, embeddedDocument operator, compound operator, must clause, should clause, text operator, nested array search, atlas search playground, code example, compass, node.js, java sync, atlas ui
   :description: In this tutorial, learn how to create an Atlas Search index for and run Atlas Search queries against fields in documents that are inside an array.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview 
--------

This tutorial describes how to index and run |fts| queries against
fields in documents, or objects, that are inside an array
(``embeddedDocuments``). The page contains instructions for running
:ref:`sample queries <embedded-documents-tutorial-queries>` using a
sample :ref:`index <embedded-documents-tutorial-index>` for a
:ref:`sample collection <embedded-documents-tutorial-sample-collection>`
that we have set up for you in the :ref:`{+playground+}
<embedded-documents-tutorial-playground>` or that you can load,
configure, and run on your |service| :ref:`{+cluster+}
<embedded-documents-tutorial-cluster>`. 

.. _embedded-documents-tutorial-sample-collection:

About the Sample Collection 
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The sample collection is named ``schools`` and it contains three
documents. Each document in the sample collection contains the  ``name``
and ``mascot`` of the school, school teachers' ``first`` and ``last``
names, the ``classes`` that each teacher teaches including the
``subject`` name and ``grade`` level, and the various ``clubs`` for the
school students. 

.. _embedded-documents-tutorial-index:

About the |fts| Index 
~~~~~~~~~~~~~~~~~~~~~

The index definition for the collection shows the following: 

- Documents in the arrays at the ``teachers`` and ``teachers.classes``
  paths are indexed as :ref:`embeddedDocuments
  <bson-data-types-embedded-documents>`, and the fields inside the
  documents are :ref:`dynamically <static-dynamic-mappings>` indexed.
  
- Documents in the arrays at the ``teachers`` path are also indexed as
  the :ref:`document <bson-data-types-document>` type to support
  :ref:`highlighting <highlight-ref>`, and the fields inside the 
  documents are dynamically indexed. 
  
- Document in the ``clubs`` field is indexed as the :ref:`document
  <bson-data-types-document>` type with :ref:`dynamic mappings 
  <static-dynamic-mappings>` enabled and the arrays of documents in the 
  ``clubs.sports`` field are indexed as the ``embeddedDocuments`` 
  type with dynamic mappings enabled.

.. _embedded-documents-tutorial-queries:

About the Queries 
~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/fts-embedded-document-query-intro.rst

The tutorial demonstrates three different queries. 

.. tabs:: 

   .. tab:: Nested Array
      :tabid: basic

      .. include:: /includes/extracts/fts-embedded-document-simple-query-intro.rst

   .. tab:: Nested Array Within Object 
      :tabid: complex

      .. include:: /includes/extracts/fts-embedded-document-complex-query-intro.rst

   .. tab:: Nested Array Within Array 
      :tabid: advanced

      .. include:: /includes/extracts/fts-embedded-document-advanced-query-intro.rst

.. _embedded-documents-tutorial-playground:

Try it in the {+playground+}
----------------------------------------

On the :ref:`Atlas Search Playground <fts-playground>`, we have set up
an embedded documents :ref:`collection
<embedded-documents-tutorial-sample-collection>`, pre-configured an
:ref:`index <embedded-documents-tutorial-index>` for the fields in the
collection, and defined a :ref:`query
<embedded-documents-tutorial-queries>` that you can run against the
collection. You can also modify the collection, index, and query in the 
{+playground+}. 

.. tabs:: 

   .. tab:: Nested Array
      :tabid: basic

      To try this query on the {+playground+}, do the following:

      .. |url| replace:: `nested array query example <https://search-playground.mongodb.com/snapshots/6601831bf3ec7476bd9da8c9>`__
      
      .. |data-source-pane| replace:: The :guilabel:`Data Source` pane contains the :ref:`sample collection <embedded-documents-tutorial-sample-collection>`. 
      
      .. |index-pane| replace:: The :guilabel:`Index` pane contains the :ref:`index definition <embedded-documents-tutorial-index>` for the collection. 
      
      .. |query-pane| replace:: The :guilabel:`Query` pane shows the :ref:`query <embedded-documents-tutorial-queries>`. 

      .. include:: /includes/steps-fts-playground-example.rst 

   .. tab:: Nested Array Within Object 
      :tabid: complex

      To try this query on the {+playground+}, do the following:

      .. |url| replace:: `nested array with an object example query <https://search-playground.mongodb.com/snapshots/660183bc0a9e8d218d79e249>`__
      
      .. |data-source-pane| replace:: The :guilabel:`Data Source` pane contains the :ref:`sample collection <embedded-documents-tutorial-sample-collection>`. 
      
      .. |index-pane| replace:: The :guilabel:`Index` pane contains the :ref:`index definition <embedded-documents-tutorial-index>` for the collection. 
      
      .. |query-pane| replace:: The :guilabel:`Query` pane shows the :ref:`query <embedded-documents-tutorial-queries>`.
    
      .. include:: /includes/steps-fts-playground-example.rst

   .. tab:: Nested Array Within Array 
      :tabid: advanced

      To try this query on the {+playground+}, do the following:

      .. |url| replace:: `nested array within an array example query <https://search-playground.mongodb.com/snapshots/66018460f3ec7476bd9da8cb>`__
      
      .. |data-source-pane| replace:: The :guilabel:`Data Source` pane contains the :ref:`sample collection <embedded-documents-tutorial-sample-collection>`. 
      
      .. |index-pane| replace:: The :guilabel:`Index` pane contains the :ref:`index definition <embedded-documents-tutorial-index>` for the collection. 
      
      .. |query-pane| replace:: The :guilabel:`Query` pane shows the :ref:`query <embedded-documents-tutorial-queries>`.

      .. include:: /includes/steps-fts-playground-example.rst

.. _embedded-documents-tutorial-cluster:

Try it on Your |service| {+Cluster+} 
------------------------------------

To demonstrate how to run queries against embedded documents, this
section walks you through the following steps: 

1. Create a sample collection named ``schools`` with embedded documents 
   in your |service| {+cluster+}.
#. Set up an |fts| index with :ref:`embeddedDocuments
   <bson-data-types-embedded-documents>` fields configured at the
   following paths:
   
   - ``teachers`` field
   - ``teachers.classes`` field 
   - ``clubs.sports`` field
  
#. Run :pipeline:`$search` queries that search the embedded documents in
   the ``schools`` collection using the :ref:`compound-ref` operator with 
   the :ref:`embedded-document-ref` and :ref:`text-ref` operators.

#. Run a :pipeline:`$searchMeta` query against an embedded document
   field to get a count. 

Before you begin, ensure that your |service| {+cluster+} meets the 
requirements described in the :ref:`fts-tutorials-prereqs`. For this 
tutorial, you don't need to upload the sample data because you will 
create a new collection and load the documents that you need to run the 
queries in this tutorial.

Create a Sample Collection and Load the Data 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You must begin by creating a collection named ``schools`` in an 
existing or new database on your |service| {+cluster+}. After creating the 
collection, you must upload the sample data into your collection. To
learn more about the documents in the sample collection, see
:ref:`embedded-documents-tutorial-sample-collection`. 

The steps in this section walk you through creating a new database 
and collection, and loading the sample data into your collection.

.. procedure:: 
   :style: normal

   .. include:: /includes/nav/steps-db-deployments-page.rst

   .. include:: /includes/nav/steps-data-explorer.rst

   .. step:: Create a new collection. 

      a. Click :guilabel:`Create Database` to create a new database.
      #. Enter the database name and collection name.
         
         - In the :guilabel:`Database Name` field, specify
           ``local_school_district``.
         - For the :guilabel:`Collection Name` field, specify
           ``schools``.

   .. step:: Load the following documents into the collection. 

      a. Select the ``schools`` collection if it's not selected.
      #. Click :guilabel:`Insert Document` for each of the sample 
         documents to add to the collection.
      #. Click the |json| view (:guilabel:`{}`) to replace the default 
         document.
      #. Copy and paste the following sample documents, one at a time, 
         and click :guilabel:`Insert` to add the documents, one at a 
         time, to the collection.

         .. code-block:: json 

            {
              "_id": 0,
              "name": "Springfield High",
              "mascot": "Pumas",
              "teachers": [{
                "first": "Jane",
                "last": "Smith",
                "classes": [{
                  "subject": "art of science",
                  "grade": "12th"
                },
                {
                  "subject": "applied science and practical science",
                  "grade": "9th"
                },
                {
                  "subject": "remedial math",
                  "grade": "12th"
                },
                {
                  "subject": "science",
                  "grade": "10th"
                }]
              },
              {
                "first": "Bob",
                "last": "Green",
                "classes": [{
                  "subject": "science of art",
                  "grade": "11th"
                },
                {
                  "subject": "art art art",
                  "grade": "10th"
                }]
              }],
              "clubs": {
                "stem": [
                  {
                    "club_name": "chess",
                    "description": "provides students opportunity to play the board game of chess informally and competitively in tournaments."
                  },
                  {
                    "club_name": "kaboom chemistry",
                    "description": "provides students opportunity to experiment with chemistry that fizzes and explodes."
                  }
                ],
                "arts": [
                  {
                    "club_name": "anime",
                    "description": "provides students an opportunity to discuss, show, and collaborate on anime and broaden their Japanese cultural understanding."
                  },
                  {
                    "club_name": "visual arts",
                    "description": "provides students an opportunity to train, experiment, and prepare for internships and jobs as photographers, illustrators, graphic designers, and more."
                  }
                ]
              }
            }

         .. code-block:: json 

            {
              "_id": 1,
              "name": "Evergreen High",
              "mascot": "Jaguars",
              "teachers": [{
                "first": "Jane",
                "last": "Earwhacker",
                "classes": [{
                  "subject": "art",
                  "grade": "9th"
                },
                {
                  "subject": "science",
                  "grade": "12th"
                }]
              },
              {
                "first": "John",
                "last": "Smith",
                "classes": [{
                  "subject": "math",
                  "grade": "12th"
                },
                {
                  "subject": "art",
                  "grade": "10th"
                }]
              }],
              "clubs": {
                "sports": [
                  {
                    "club_name": "archery",
                    "description": "provides students an opportunity to practice and hone the skill of using a bow to shoot arrows in a fun and safe environment."
                  },
                  {
                    "club_name": "ultimate frisbee",
                    "description": "provides students an opportunity to play frisbee and learn the basics of holding the disc and complete passes."
                  }
                ],
                "stem": [
                  {
                    "club_name": "zapped",
                    "description": "provides students an opportunity to make exciting gadgets and explore electricity."
                  },
                  {
                    "club_name": "loose in the chem lab",
                    "description": "provides students an opportunity to put the scientific method to the test and get elbow deep in chemistry."
                  }
                ]
              }
            }

         .. code-block:: json 

            {
              "_id": 2,
              "name": "Lincoln High",
              "mascot": "Sharks",
              "teachers": [{
                "first": "Jane",
                "last": "Smith",
                "classes": [{
                  "subject": "science",
                  "grade": "9th"
                },
                {
                  "subject": "math",
                  "grade": "12th"
                }]
              },
              {
                "first": "John",
                "last": "Redman",
                "classes": [{
                  "subject": "art",
                  "grade": "12th"
                }]
              }],
              "clubs": {
                "arts": [
                  {
                    "club_name": "ceramics",
                    "description": "provides students an opportunity to acquire knowledge of form, volume, and space relationships by constructing hand-built and wheel-thrown forms of clay."
                  },
                  {
                    "club_name": "digital art",
                    "description": "provides students an opportunity to learn about design for entertainment, 3D animation, technical art, or 3D modeling."
                  }
                ],
                "sports": [
                  {
                    "club_name": "dodgeball",
                    "description": "provides students an opportunity to play dodgeball by throwing balls to eliminate the members of the opposing team while avoiding being hit themselves."
                  },
                  {
                    "club_name": "martial arts",
                    "description": "provides students an opportunity to learn self-defense or combat that utilize physical skill and coordination without weapons."
                  }
                ]
              }
            }

Create an |fts| Index 
~~~~~~~~~~~~~~~~~~~~~

In this section, you will create an |fts| index for the fields in the 
embedded documents in the ``local_school_district.schools`` collection. 

Required Access
```````````````

.. include:: /includes/atlas-roles/create-search-index.rst

Procedure 
`````````

.. |search-type| replace:: :guilabel:`Atlas Search`
.. |index-name| replace:: ``embedded-documents-tutorial``
.. |database-name| replace:: ``local_school_district`` database
.. |collection-name| replace:: ``schools`` collection

.. procedure:: 
   :style: normal

   .. include:: /includes/nav/steps-db-deployments-page.rst

   .. include:: /includes/nav/steps-atlas-search.rst

   .. include:: /includes/nav/steps-configure-index.rst

   .. step:: Specify an index configuration that indexes embedded documents.

      To learn more about the index definition, see
      :ref:`embedded-documents-tutorial-index`. 

      .. tabs:: 

         .. tab:: Visual Editor 
            :tabid: vib

            a. Click :guilabel:`Refine Your Index`.
            #. Click :guilabel:`Add Field` in the :guilabel:`Field Mappings`
               section and add the following fields in the
               :guilabel:`Customized Configuration` tab by clicking
               :guilabel:`Add` after configuring the settings for each
               field, one at a time, in the :guilabel:`Add Field Mapping` 
               window. 

               .. list-table:: 
                  :header-rows: 1 
                  :widths: 40 40 20

                  * - :guilabel:`Field Name`
                    - :guilabel:`Data Type`
                    - :guilabel:`Enable Dynamic Mapping`

                  * - ``teachers``
                    - :guilabel:`EmbeddedDocuments`
                    - On

                  * - ``teachers.classes``
                    - :guilabel:`EmbeddedDocuments`
                    - On
                    
                  * - ``teachers``
                    - :guilabel:`Document`
                    - On
                    
                  * - ``teachers.classes``
                    - :guilabel:`Document`
                    - On
                    
                  * - ``teachers.classes.grade``
                    - :guilabel:`StringFacet` 
                    - N/A

                  * - ``clubs.sports``
                    - :guilabel:`EmbeddedDocuments`
                    - On

            #. Click :guilabel:`Add Field Mappings` to open the
               :guilabel:`Add Field Mapping` window.
            #. Select the following from the dropdown.
            #. Click :guilabel:`Add Field Mappings` to open the
               :guilabel:`Add Field Mapping` window.
            #. Select the following from the dropdown. 
            #. Toggle to enable :guilabel:`Enable Dynamic Mapping` if it
               isn't already enabled and click :guilabel:`Add`
            #. Click :guilabel:`Save`.
            #. Click :guilabel:`Save Changes`.

         .. tab:: JSON Editor 
            :tabid: jsonib

            a. Replace the default index definition with the following 
               index definition.

               .. code-block:: json 
                  :linenos: 

                  {
                    "mappings": {
                      "dynamic": true,
                      "fields": {
                        "clubs": {
                          "dynamic": true,
                          "fields": {
                            "sports": {
                              "dynamic": true,
                              "type": "embeddedDocuments"
                            }
                          },
                          "type": "document"
                        },
                        "teachers": [
                          {
                            "dynamic": true,
                            "fields": {
                              "classes": {
                                "dynamic": true,
                                "type": "embeddedDocuments"
                              }
                            },
                            "type": "embeddedDocuments"
                          },
                          {
                            "dynamic": true,
                            "fields": {
                              "classes": {
                                "dynamic": true,
                                "fields": {
                                  "grade": {
                                    "type": "stringFacet"
                                  }
                                },
                                "type": "document"
                              }
                            },
                            "type": "document"
                          }
                        ]
                      }
                    }
                  }

            #. Click :guilabel:`Next`.
            
   .. include:: /includes/steps-fts-finish-index-creation.rst 

Run ``$search`` Queries Against Embedded Document Fields 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can run queries against the embedded document fields. This 
tutorial uses :ref:`embedded-document-ref` and :ref:`text-ref` 
operators inside the :ref:`compound-ref` operator in the queries. 

In this section, you will connect to your |service| {+cluster+} and run 
the sample queries using the operators against the fields in the 
``schools`` collection. 

.. tabs-selector:: drivers

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu on this page to 
set the language of the examples in this section.

----------

.. tabs-drivers::

   .. tab::
      :tabid: atlas-ui

      .. include:: /includes/steps-fts-embedded-document-query-atlas-ui.txt

   .. tab::
      :tabid: shell

      .. include:: /includes/steps-fts-embedded-document-query-mongosh.txt 

   .. tab::
      :tabid: compass

      .. include:: /includes/steps-fts-embedded-document-query-compass.txt

   .. tab::
      :tabid: csharp

      .. include:: /includes/steps-fts-embedded-document-query-csharp.txt

   .. tab:: 
      :tabid: go

      .. include:: /includes/steps-fts-embedded-document-query-go.txt

   .. tab:: 
      :tabid: java-sync 

      .. include:: /includes/steps-fts-embedded-document-query-java.txt

   .. tab:: 
      :tabid: kotlin-coroutine

      .. include:: /includes/steps-fts-embedded-document-query-kotlin.txt

   .. tab::
      :tabid: nodejs

      .. include:: /includes/steps-fts-embedded-document-query-nodejs.txt

   .. tab::
      :tabid: python

      .. include:: /includes/steps-fts-embedded-document-query-python.txt

Run ``$searchMeta`` Query Against Embedded Document Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can run :pipeline:`$searchMeta` queries against the embedded
document fields. In this section, you will connect to your |service|
{+cluster+} and run a sample query using the ``$searchMeta`` stage and
facet on an embedded document field. 

.. tabs-drivers::

   .. tab::
      :tabid: atlas-ui

      .. include:: /includes/steps-fts-embedded-document-facet-query-atlas-ui.rst

   .. tab::
      :tabid: shell

      .. include:: /includes/steps-fts-embedded-document-facet-query-mongosh.rst 

   .. tab::
      :tabid: compass

      .. include:: /includes/steps-fts-embedded-document-facet-query-compass.rst

   .. tab::
      :tabid: csharp

      .. include:: /includes/steps-fts-embedded-document-facet-query-cs.rst

   .. tab:: 
      :tabid: go

      .. include:: /includes/steps-fts-embedded-document-facet-query-go.rst

   .. tab:: 
      :tabid: java-sync 

      .. include:: /includes/steps-fts-embedded-document-facet-query-java.rst

   .. tab:: 
      :tabid: kotlin-coroutine

      .. include:: /includes/steps-fts-embedded-document-facet-query-kotlin.rst

   .. tab::
      :tabid: nodejs

      .. include:: /includes/steps-fts-embedded-document-facet-query-nodejs.rst

   .. tab::
      :tabid: python

      .. include:: /includes/steps-fts-embedded-document-facet-query-python.rst
