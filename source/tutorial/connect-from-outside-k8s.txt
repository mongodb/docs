.. _connect-from-outside-k8s:

==============================================================
Connect to a MongoDB Database Resource from Outside Kubernetes
==============================================================

.. include:: /includes/styles/corrections.rst

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The following procedure describes how to connect to a MongoDB resource
deployed by |k8s| from outside of the |k8s| cluster.

.. important::
   You can only connect to a :doc:`standalone
   </tutorial/deploy-standalone>` or a :doc:`sharded cluster
   </tutorial/deploy-sharded-cluster>` resource from outside of the
   |k8s| cluster.

Prerequisite
------------

For your databases to be accessed outside of |k8s|, they must run one
of the following versions of MongoDB:

- 3.6.17 or later
- 4.0.15 or later
- 4.2.3 or later

Procedure
---------

How you connect to a MongoDB resource that the |k8s-op-short| deployed
from outside of the |k8s| cluster depends on the resource.

.. tabs-deployments::

   .. tab::
      :tabid: standalone

      Set the following values on your resource:

      - :setting:`spec.exposedExternally` flag to ``true``.
      - :setting:`spec.security.tls.additionalCertificateDomains` to
        the collection of one or more domains for the other horizons
        that this resource uses if it uses |tls|.

      When you set :setting:`spec.exposedExternally` to ``true``, the
      |k8s-op-short| creates a
      :k8sdocs:`NodePort service </concepts/services-networking/service/>`.
      The NodePort service exposes the deployment as a network service,
      thereby enabling access from outside of the |k8s| cluster.

   .. tab::
      :tabid: repl

      This procedure uses the following example:

      .. literalinclude:: /includes/code-examples/yaml-files/example-replica-set.yaml
         :language: yaml
         :start-after: START-horizon-addcert-replset
         :end-before: END-horizon-addcert-replset
         :linenos:
         :lineno-start: 1
         :copyable: false

      1. Set the following values on your resource:

         - :setting:`spec.security.tls.enabled` to ``true``.
         - :setting:`spec.connectivity.replicaSetHorizons` to the
           collection of horizons and |uri|\s of the replica set.

      2. Create a NodePort for each |k8s-pod|:

         .. code-block:: sh

            kubectl expose pod/<my-replica-set>-0 --type="NodePort" --port 27017
            kubectl expose pod/<my-replica-set>-1 --type="NodePort" --port 27017
            kubectl expose pod/<my-replica-set>-2 --type="NodePort" --port 27017

      3. Discover the dynamically assigned NodePorts:

         .. code-block:: sh

            $ kubectl get svc | grep <my-replica-set>
            <my-replica-set>-0                      NodePort    172.30.39.228    <none>        27017:30907/TCP              16m
            <my-replica-set>-1                      NodePort    172.30.185.136   <none>        27017:32350/TCP              16m
            <my-replica-set>-2                      NodePort    172.30.84.192    <none>        27017:31185/TCP              17m
            <my-replica-set>-svc                    ClusterIP   None             <none>        27017/TCP                    38m

      4. Update the ports that you set for the ``example-website``
         connectivity setting. These ports must match the external
         NodePorts that you discovered.

         .. literalinclude:: /includes/code-examples/yaml-files/example-replica-set.yaml
            :language: yaml
            :start-after: START-horizon-addcert-replset-lower-nodeports
            :end-before: END-horizon-addcert-replset-lower-nodeports
            :linenos:
            :lineno-start: 15
            :emphasize-lines: 6-8

         .. note::

            You may need to delete each |k8s-pod| and have the |k8s-op-short| reconfigure the horizons.

      5. Test the connection to the replica set.

         .. code-block:: sh

            mongo --host <my-replica-set>/web1.example.com:30907,web2.example.com:32350,web3.example.com:31185 --ssl --sslAllowInvalidCertificates

         If the connection succeeds, you should see:

         .. code-block:: javascript

            MongoDB Enterprise <my-replica-set>:PRIMARY>

   .. tab::
      :tabid: shard

      Set the following values on your resource:

      - :setting:`spec.exposedExternally` flag to ``true``.
      - :setting:`spec.security.tls.additionalCertificateDomains` to
        the collection of one or more domains for the other horizons
        that this resource uses if it uses |tls|.

      When you set :setting:`spec.exposedExternally` to ``true``, the
      |k8s-op-short| creates a
      :k8sdocs:`NodePort service </concepts/services-networking/service/>`.
      The NodePort service exposes the deployment as a network service,
      thereby enabling access from outside of the |k8s| cluster.


Example Deployment Configurations
---------------------------------

.. tabs-deployments::
   :hidden:

   .. tab::
      :tabid: standalone

      In the following example, set ``spec.exposedExternally`` to
      ``true`` in the standlone configuration object. This
      exposes the deployment outside of the |k8s| cluster:

      .. literalinclude:: /reference/k8s/example-exposed-standalone.yaml
         :language: yaml
         :emphasize-lines: 15

      Once your standalone instance is deployed in |com|, run the
      following command to get information on the NodePort service
      created by the Operator:

      .. code-block:: sh

         kubectl get services -n <namespace>

      The list output by this command should contain an entry similar to
      the following:

      .. code-block:: sh
         :copyable: false

         NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)           AGE

         standalone-svc-external   NodePort    10.102.27.116   <none>        27017:30994/TCP   8m30s

      In this case, the |mongod| is exposed on port ``27017`` in the
      |k8s| container, and the NodePort service exposes the ``mongod``
      via port ``30994``.

      When you connect to your deployment from outside of the k8s
      cluster, you must specify the external |fqdn| of a node in the
      |k8s| cluster as the ``--host`` option in your |mongo| command. If
      a node in the |k8s| cluster has an external |fqdn| of
      ``ec2-54-212-23-143.us-west-2.compute.amazonaws.com``, you can
      connect to this standalone instance from outside of the |k8s|
      cluster using the following command:

      .. code-block:: sh

         mongo --host ec2-54-212-23-143.us-west-2.compute.amazonaws.com --port 30994

      .. include:: /includes/admonitions/fact-get-external-dns.rst

   .. tab::
      :tabid: repl

      In the following example, set the highlighted parameter and value
      pairs in the replica set configuration object. This exposes the
      deployment outside of the |k8s| cluster:

      .. literalinclude:: /includes/code-examples/yaml-files/example-replica-set.yaml
         :language: yaml
         :start-after: START-horizon-addcert-replset-upper
         :end-before: END-horizon-addcert-replset-upper
         :linenos:
         :lineno-start: 1
         :copyable: false

      .. literalinclude:: /includes/code-examples/yaml-files/example-replica-set.yaml
         :language: yaml
         :start-after: START-horizon-addcert-replset-lower-nodeports
         :end-before: END-horizon-addcert-replset-lower-nodeports
         :linenos:
         :lineno-start: 15
         :emphasize-lines: 1-8

   .. tab::
      :tabid: shard

      In the following example, set ``spec.exposedExternally`` to
      ``true`` in the sharded cluster configuration object. This exposes
      the deployment outside of the |k8s| cluster:

      .. literalinclude:: /reference/k8s/example-exposed-sharded.yaml
         :language: yaml
         :emphasize-lines: 19

      Once your sharded cluster is deployed in |com|, run the
      following command to get information on the NodePort service
      created by the Operator:

      .. code-block:: sh

         kubectl get services -n <namespace>

      The list output by this command should contain an entry
      similar to the following:

      .. code-block:: sh
         :copyable: false

         NAME                          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)           AGE

         shardedcluster-svc-external   NodePort    10.106.44.30    <none>        27017:30078/TCP   10s

      In this case, the |mongos| is exposed on port ``27017`` in the
      |k8s| container, and the NodePort service exposes the |mongos|
      via port ``30078``.

      When you connect to your deployment, you must specify the external
      |fqdn| of a node in the |k8s| cluster as the ``--host`` option in
      your |mongo| command. If a node in the |k8s| cluster has an
      external |fqdn| of ``ec2-54-212-23-143.us-west-2.compute.amazonaws.com``,
      you can connect to this standalone instance from outside of |k8s|
      using the following command:

      .. code-block:: sh

         mongo --host ec2-54-212-23-143.us-west-2.compute.amazonaws.com --port 30078

      .. include:: /includes/admonitions/fact-get-external-dns.rst
