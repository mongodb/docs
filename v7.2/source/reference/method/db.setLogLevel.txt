
================
db.setLogLevel()
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.setLogLevel()

   Sets a single verbosity level for :doc:`log messages
   </reference/log-messages>`.

   :method:`db.setLogLevel()` has the following form:

   .. code-block:: javascript

      db.setLogLevel(<level>, <component>)

   :method:`db.setLogLevel()` takes the following parameters:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``level``
   
        - int
   
        - The log verbosity level.
          
          .. include:: /includes/log-verbosity-levels.rst
          
          To inherit the verbosity level of the component's parent, you can
          also specify ``-1``.
          
          
   
      * - ``component``
   
        - string
   
        - Optional. The name of the component for which to specify the log verbosity
          level. The component name corresponds to the ``<name>`` from the
          corresponding ``systemLog.component.<name>.verbosity`` setting:
          
          .. include:: /includes/list-log-component-setting-correspondence.rst
          
          Omit to specify the default verbosity level for all components.
          
          
   


Behavior
--------

:method:`db.setLogLevel()` sets a *single* verbosity level. To set
multiple verbosity levels in a single operation, use either the
:dbcommand:`setParameter` command to set the
:parameter:`logComponentVerbosity` parameter. You can also specify the
verbosity settings in the :doc:`configuration file
</reference/configuration-options>`. See
:ref:`log-messages-configure-verbosity` for examples.

.. note::

   .. include:: /includes/extracts/4.2-changes-debug-log-message.rst

Examples
--------

Set Default Verbosity Level
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Omit the ``<component>`` parameter to set the default verbosity for all
components; i.e. the :setting:`systemLog.verbosity` setting. The
operation sets the default verbosity to ``1``:

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript
      
      db.setLogLevel(1)

   .. output::
      :language: javascript
      :visible: false

      {
         was: {
            verbosity: 1,
            accessControl: { verbosity: -1 },
            assert: { verbosity: -1 },
            command: { verbosity: -1 },
            control: { verbosity: -1 },
            executor: { verbosity: -1 },
            geo: { verbosity: -1 },
            globalIndex: { verbosity: -1 },
            index: { verbosity: -1 },
            network: {
               verbosity: -1,
               asio: { verbosity: -1 },
               bridge: { verbosity: -1 },
               connectionPool: { verbosity: -1 }
            },
            processHealth: { verbosity: -1 },
            query: {
               verbosity: -1,
               optimizer: { verbosity: -1 },
               ce: { verbosity: -1 }
            },
            queryStats: { verbosity: -1 },
            replication: {
               verbosity: -1,
               election: { verbosity: -1 },
               heartbeats: { verbosity: -1 },
               initialSync: { verbosity: -1 },
               rollback: { verbosity: -1 }
            },
            sharding: {
               verbosity: -1,
               rangeDeleter: { verbosity: -1 },
               shardingCatalogRefresh: { verbosity: -1 },
               migration: { verbosity: -1 },
               reshard: { verbosity: -1 },
               migrationPerf: { verbosity: -1 }
            },
            storage: {
               verbosity: -1,
               recovery: { verbosity: -1 },
               journal: { verbosity: 2 },
               wt: {
               verbosity: -1,
               wtBackup: { verbosity: -1 },
               wtCheckpoint: { verbosity: -1 },
               wtCompact: { verbosity: -1 },
               wtEviction: { verbosity: -1 },
               wtHS: { verbosity: -1 },
               wtRecovery: { verbosity: -1 },
               wtRTS: { verbosity: -1 },
               wtSalvage: { verbosity: -1 },
               wtTiered: { verbosity: -1 },
               wtTimestamp: { verbosity: -1 },
               wtTransaction: { verbosity: -1 },
               wtVerify: { verbosity: -1 },
               wtWriteLog: { verbosity: -1 }
               }
            },
            write: { verbosity: -1 },
            ftdc: { verbosity: -1 },
            tracking: { verbosity: -1 },
            transaction: { verbosity: -1 },
            tenantMigration: { verbosity: -1 },
            test: { verbosity: -1 },
            resourceConsumption: { verbosity: -1 },
            streams: { verbosity: -1 }
         },
         ok: 1
      }

Set Verbosity Level for a Component
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Specify the ``<component>`` parameter to set the verbosity for the
component. The following operation updates the
:setting:`systemLog.component.storage.journal.verbosity` to ``2``:

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript

      db.setLogLevel(2, "storage.journal" )

   .. output::
      :language: javascript
      :visible: false

      {
         was: {
            verbosity: 1,
            accessControl: { verbosity: -1 },
            assert: { verbosity: -1 },
            command: { verbosity: -1 },
            control: { verbosity: -1 },
            executor: { verbosity: -1 },
            geo: { verbosity: -1 },
            globalIndex: { verbosity: -1 },
            index: { verbosity: -1 },
            network: {
               verbosity: -1,
               asio: { verbosity: -1 },
               bridge: { verbosity: -1 },
               connectionPool: { verbosity: -1 }
            },
            processHealth: { verbosity: -1 },
            query: {
               verbosity: -1,
               optimizer: { verbosity: -1 },
               ce: { verbosity: -1 }
            },
            queryStats: { verbosity: -1 },
            replication: {
               verbosity: -1,
               election: { verbosity: -1 },
               heartbeats: { verbosity: -1 },
               initialSync: { verbosity: -1 },
               rollback: { verbosity: -1 }
            },
            sharding: {
               verbosity: -1,
               rangeDeleter: { verbosity: -1 },
               shardingCatalogRefresh: { verbosity: -1 },
               migration: { verbosity: -1 },
               reshard: { verbosity: -1 },
               migrationPerf: { verbosity: -1 }
            },
            storage: {
               verbosity: -1,
               recovery: { verbosity: -1 },
               journal: { verbosity: -1 },
               wt: {
               verbosity: -1,
               wtBackup: { verbosity: -1 },
               wtCheckpoint: { verbosity: -1 },
               wtCompact: { verbosity: -1 },
               wtEviction: { verbosity: -1 },
               wtHS: { verbosity: -1 },
               wtRecovery: { verbosity: -1 },
               wtRTS: { verbosity: -1 },
               wtSalvage: { verbosity: -1 },
               wtTiered: { verbosity: -1 },
               wtTimestamp: { verbosity: -1 },
               wtTransaction: { verbosity: -1 },
               wtVerify: { verbosity: -1 },
               wtWriteLog: { verbosity: -1 }
               }
            },
            write: { verbosity: -1 },
            ftdc: { verbosity: -1 },
            tracking: { verbosity: -1 },
            transaction: { verbosity: -1 },
            tenantMigration: { verbosity: -1 },
            test: { verbosity: -1 },
            resourceConsumption: { verbosity: -1 },
            streams: { verbosity: -1 }
         },
         ok: 1
      }

Get Global Log Level For a Deployment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation gets the default logging level verbosity for a 
deployment:

.. io-code-block::
   :copyable: true

   .. input::
      :language: javascript

      db.adminCommand({getParameter: 1, logLevel: 1});

   .. output::
      :language: javascript
      :emphasize-lines: 2
      :visible: false
      
      { 
      logLevel: 0, 
      ok: 1 
      }

.. note::

   You can also get log verbosity levels for MongoDB components. 
   For details, see :method:`db.getLogComponents()`.