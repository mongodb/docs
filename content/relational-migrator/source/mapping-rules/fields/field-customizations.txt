.. _rm-field-customizations:

======
Fields
======

.. meta::
   :description: Customize fields in Relational Migrator by defining calculated fields, custom IDs, and converting data types to BSON, with options for embedding, and null handling.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can customize fields when adding or editing your mapping rules. 
{+rel-mig+} allows you to define custom fields using 
:ref:`rm-calculated-fields`, define custom IDs using 
:ref:`rm-id-field-customizations`, or convert your source 
relational column data types into :ref:`a supported BSON data type<rm-field-supported-types>`.

Use Cases
---------

You can use field customization to:

- Include or exclude fields in your mapping rules.
- Change field names.
- Embed child fields in parent documents with dotted paths. For details, see 
  :ref:`embedding fields<rm-embedding-individual-fields>`.
- Customize ``_id`` fields using JavaScript expressions.
- Customize a field using JavaScript expressions.
- Configure null handling behavior.

Behavior
--------

The fields section contains a list of fields derived from columns 
in the relational table. Mapping rules include each column by default. 
To exclude a field from your migration job, uncheck the box. 
The field name initially matches the column name (with the 
:ref:`global casing <rm-global-casing>` applied). To modify the name, 
edit the text box. You can click the :icon-fa5:`chevron-left`
icon next to each field to reveal additional options.

- {+rel-mig+} assigns a default data type to your MongoDB fields 
  that most closely matches the source column data type. 

- You can use the :guilabel:`BSON Type` drop-down menu to change the MongoDB 
  field data type to a different data type to fine-tune your schema. 
  If the chosen type is not compatible with the source values, each 
  field converted results in an error during the migration job. Migration jobs 
  continue until the user-defined maximum error threshold is reached.

.. _rm-embedding-individual-fields:

- To embed child fields in a parent document, rename the field in the 
  form ``parent.child``. For example, renaming the field ``productName`` 
  to ``product.name`` results in a child document, ``name``, embedded 
  within the parent document, ``product``. Any 
  additional fields with the same ``product.`` prefix are also 
  embedded as children.

- Change a source relational datatype to a specific MongoDB BSON datatype.

  .. _rm-field-supported-types:

  Supported data types for converted fields include:

  -  ``Boolean``
  -  ``Date``
  -  ``Decimal``
  - ``Double``
  - ``Integer``
  - ``Long``
  - ``String``

  For details, see :ref:`conversion examples<rm-data-type-conversion-guide>`.

- Use :guilabel:`Null Handling` to specify the behavior 
  of ``Null`` values. You can omit these values or include 
  them in your destination collections.

- You can view a field's :guilabel:`Original name` and 
  :guilabel:`Original type`. These values correspond to the relational 
  columns from which the field originates.

.. note::

   For calculated fields, the BSON type is initially shown as 
   :guilabel:`Default`, which means the field type is automatically 
   selected at runtime. You can choose an explicit BSON type 
   for a calculated field and your migration job converts the type as 
   part of the process.

Get Started
-----------

- :ref:`mapping-rules-edit`

Learn More
----------

- :ref:`rm-calculated-fields`
- :ref:`rm-id-field-customizations`
- :ref:`rm-data-type-conversion-guide`

.. toctree::
   :titlesonly:
   :hidden:

   Data Type Conversion </mapping-rules/fields/data-type-conversion-guide>
   Calculated Fields </mapping-rules/fields/calculated-fields>
   Customize ID Fields </mapping-rules/fields/calculated-fields/customized-id-fields>