========================
$currentOp (aggregation)
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. versionadded:: 3.6

.. pipeline:: $currentOp

   Returns a stream of documents containing information on active
   and/or dormant operations as well as inactive sessions that are
   holding locks as part of a transaction. The stage returns a document
   for each operation or session. To run :pipeline:`$currentOp`, use
   the :method:`db.aggregate()` helper on the ``admin`` database.
  
   The :pipeline:`$currentOp` aggregation stage is preferred over the
   :dbcommand:`currentOp` command and its :binary:`~bin.mongo` shell
   helper :method:`db.currentOp()`. Because :dbcommand:`currentOp`
   command and :method:`db.currentOp()` helper returns the results in a
   single document, the total size of the :dbcommand:`currentOp` result
   set is subject to the maximum 16MB BSON size limit for documents.
   The :pipeline:`$currentOp` stage returns a cursor over a stream of
   documents, each of which reports a single operation. Each operation
   document is subject to the 16MB BSON limit, but unlike the
   :dbcommand:`currentOp` command, there is no limit on the overall
   size of the result set.

   :pipeline:`$currentOp` also enables you to perform arbitrary
   transformations of the results as the documents pass through the 
   pipeline.

   :pipeline:`$currentOp` takes an options document as its operand:

   .. versionchanged:: 4.0

   .. code-block:: javascript

      { $currentOp: { allUsers: <boolean>, idleConnections: <boolean>, idleSessions: <boolean>, localOps: <boolean> } }

   .. list-table::
      :header-rows: 1
      :widths: 30 70
 
      * - Option
        - Description

      * - ``allUsers``

        - Boolean. If set to ``false``, :pipeline:`$currentOp` will only
          report operations belonging to the user who ran the command. If
          set to ``true``, :pipeline:`$currentOp` will report operations
          belonging to all users.

          .. note::

             The ``inprog`` privilege is necessary to run 
             :pipeline:`$currentOp` with ``{ allUsers : true }``.

          Defaults to ``false``.

      * - ``idleConnections``
        - Boolean. If set to ``false``, :pipeline:`$currentOp` will 
          only report active operations. If set to ``true``, all 
          operations including idle connections will be returned.

          Defaults to ``false``.

      * - ``idleSessions``

        - Boolean. If set to ``true``, then in addition to reporting on
          the active/dormant operations, :pipeline:`$currentOp` returns
          information on inactive sessions that are holding locks as part
          of a transaction. Each inactive session will appear as a
          separate document in the ``$currentOp`` stream.

          The document for a session includes information on the session
          id ``lsid`` and the transaction number ``txnNumber``.

          If set to ``false``, :pipeline:`$currentOp` will not report on
          inactive sessions.

          Defaults to ``true``.

          .. versionadded:: 4.0

      * - ``localOps``

        - Boolean. If set to ``true`` for an aggregation running on
          :binary:`~bin.mongos`, :pipeline:`$currentOp` reports only
          those operations running locally on that
          :binary:`~bin.mongos`. If ``false``, then the
          :pipeline:`$currentOp` will instead report operations running
          on the shards. 

          The ``localOps`` parameter has no effect for
          :pipeline:`$currentOp` aggregations running on
          :binary:`~bin.mongod`.

          Defaults to ``false``.

          .. versionadded:: 4.0

   Omitting any of the above parameters will cause $currentOp to use
   that parameter's default value. Specify an empty document, as shown
   below, to use the default values of all parameters.

   .. code-block:: javascript

      { $currentOp: { } }

Constraints
-----------

- :pipeline:`$currentOp` must be the first stage in the pipeline.

- Pipelines that start with :pipeline:`$currentOp` can only be run on 
  the ``admin`` database.

- On a standalone or replica set with authentication enabled, the 
  ``inprog`` privilege is required to run :pipeline:`$currentOp` if 
  the ``allUsers`` parameter is set to `true`. 

- On a sharded cluster, the ``inprog`` privilege is required to run 
  all :pipeline:`$currentOp` pipelines.

- :pipeline:`$currentOp` is not allowed in :doc:`transactions
  </core/transactions>`.


Example
-------

The following example runs the :pipeline:`$currentOp` operation in the
first stage and filters the results of that operation in the second
stage. Specifically, the first stage returns documents for all active
operations as well as inactive sessions that are holding locks as part
of a transaction. The second stage filters for just those documents
related to inactive sessions that are holding locks as part of a
transaction.

.. code-block:: javascript

   use admin
   db.aggregate( [ 
      { $currentOp : { allUsers: true, idleSessions: true } },
      { $match : { active: false, txnNumber : { $exists: true } } }
   ] )

The operation returns documents of the form:

.. code-block:: javascript

   {
      "host" : "example.mongodb.com:27017",
      "desc" : "inactive transaction",
      "lsid" : {
         "id" : UUID("02039c77-3f05-4dd6-a42d-d2168a73fc95"),
         "uid" : BinData(0,"47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=")
      },
      "txnNumber" : NumberLong(4),
      "waitingForLock" : false,
      "active" : false,
      "locks" : {
         "Global" : "w",
         "Database" : "w",
         "Collection" : "w"
      },
      "lockStats" : {
         "Global" : {
            "acquireCount" : {
               "r" : NumberLong(2),
               "w" : NumberLong(1)
            }
         },
         "Database" : {
            "acquireCount" : {
               "r" : NumberLong(1),
               "w" : NumberLong(1)
            }
         },
         "Collection" : {
            "acquireCount" : {
               "r" : NumberLong(1),
               "w" : NumberLong(1)
            }
         }
      }
   }

.. _currentOp-stage-output-fields:

Output Fields
-------------

Each output document may contain a subset of the following fields as
relevant for the operation:

.. data:: $currentOp.host

   The name of the host against which the operation is run.

.. data:: $currentOp.shard

   The name of the shard where the operation is running.

   Only present for sharded clusters.

.. data:: $currentOp.desc

   A description of the operation.

.. data:: $currentOp.connectionId

   An identifier for the connection where the specific operation
   originated.

.. data:: $currentOp.client

   The IP address (or hostname) and the ephemeral port of the client
   connection where the operation originates.

   *For standalones and replica sets only*

.. data:: $currentOp.client_s

   The IP address (or hostname) and the ephemeral port of the
   :binary:`~bin.mongos` where the operation originates.

   *For sharded clusters only*

.. data:: $currentOp.clientMetadata

   Additional information on the client.

.. data:: $currentOp.appName

   .. include:: /includes/fact-client-appname.rst

.. data:: $currentOp.active

   A boolean value specifying whether the operation has started. Value
   is ``true`` if the operation has started or ``false`` if the
   operation is idle, such as an idle connection, an inactive session, or
   an internal thread that is currently idle. An operation can be
   active even if the operation has yielded to another operation.

.. data:: $currentOp.currentOpTime

   The start time of the operation.

   .. versionadded:: 3.6

.. data:: $currentOp.opid

   The identifier for the operation. You can pass this value to
   :method:`db.killOp()` in the :binary:`~bin.mongo` shell to terminate the
   operation.

   .. include:: /includes/extracts/warning-terminating-ops-method.rst

.. data:: $currentOp.secs_running

   The duration of the operation in seconds. MongoDB calculates this
   value by subtracting the current time from the start time of the
   operation.

   Only present if the operation is running; i.e. if
   :data:`~$currentOp.active` is ``true``.

.. data:: $currentOp.microsecs_running

   The duration of the operation in microseconds. MongoDB calculates this
   value by subtracting the current time from the start time of the
   operation.

   Only present if the operation is running; i.e. if
   :data:`~currentOp.active` is ``true``.

.. data:: $currentOp.lsid

   The session identifier.

   Only present if the operation is associated with a
   session.

   .. versionadded:: 3.6

.. data:: $currentOp.txnNumber

   The transaction number.

   Only present if the operation is part of a transaction.

   .. versionadded:: 4.0

.. data:: $currentOp.op

   A string that identifies the type of operation. The possible values
   are:

   - ``"none"``
   - ``"update"``
   - ``"insert"``
   - ``"query"``
   - ``"command"``
   - ``"getmore"``
   - ``"remove"``
   - ``"killcursors"``

   ``"command"`` operations include most 
   :doc:`commands </reference/command>` such as the
   :dbcommand:`createIndexes`, :dbcommand:`aggregate`, and :dbcommand:`findandmodify`.

   ``"query"`` operations include :dbcommand:`find` operations and OP_QUERY operations.

.. data:: $currentOp.ns

   The :term:`namespace` the operation targets. A namespace consists of
   the :term:`database` name and the :term:`collection` name
   concatenated with a dot (``.``); that is,
   ``"<database>.<collection>"``.

.. data:: $currentOp.command

   .. include:: /includes/extracts/command-field-currentOp.rst

.. data:: $currentOp.originatingCommand

   .. include:: /includes/fact-originating-command-ref.rst

.. data:: $currentOp.planSummary

   A string that contains the query plan to help debug slow queries.

.. data:: $currentOp.numYields

   :data:`~$currentOp.numYields` is a counter that reports the number of times the
   operation has yielded to allow other operations to complete.

   Typically, operations yield when they need access to data that
   MongoDB has not yet fully read into memory. This allows
   other operations that have data in memory to complete quickly
   while MongoDB reads in data for the yielding operation.

.. data:: $currentOp.locks

   The :data:`~$currentOp.locks` document reports the type and mode of
   locks the operation currently holds. The possible lock types are as
   follows:

   .. include:: /includes/fact-lock-types.rst

   The possible modes are as follows:

   .. include:: /includes/fact-lock-modes.rst

.. data:: $currentOp.waitingForLock

   Returns a boolean value. :data:`~$currentOp.waitingForLock` is ``true`` if the
   operation is waiting for a lock and ``false`` if the operation has
   the required lock.

.. data:: $currentOp.msg

   The :data:`~$currentOp.msg` provides a message that describes the status and
   progress of the operation. In the case of indexing or mapReduce
   operations, the field reports the completion percentage.

.. data:: $currentOp.progress

   Reports on the progress of mapReduce or indexing operations. The
   :data:`~$currentOp.progress` fields corresponds to the completion percentage in
   the :data:`~$currentOp.msg` field. The :data:`~$currentOp.progress` specifies the following
   information:

   .. data:: $currentOp.progress.done

      Reports the number of work items completed.

   .. data:: $currentOp.progress.total

      Reports the total number of work items.

.. data:: $currentOp.killPending

   Returns ``true`` if the operation is currently flagged for
   termination.  When the operation encounters its next safe termination point, the
   operation will terminate.

.. data:: $currentOp.lockStats

   For each lock type and mode (see :data:`$currentOp.locks` for
   descriptions of lock types and modes), returns the following
   information:

   .. data:: $currentOp.lockStats.acquireCount

      Number of times the operation acquired the lock in the specified
      mode.

   .. data:: $currentOp.lockStats.acquireWaitCount

      Number of times the operation had to wait for the
      :data:`~$currentOp.lockStats.acquireCount` lock acquisitions
      because the locks were held in a conflicting mode.
      :data:`~$currentOp.lockStats.acquireWaitCount` is less than or
      equal to :data:`~$currentOp.lockStats.acquireCount`.

   .. data:: $currentOp.lockStats.timeAcquiringMicros

      Cumulative time in microseconds that the operation had to wait to
      acquire the locks.

      :data:`~$currentOp.lockStats.timeAcquiringMicros` divided by
      :data:`~$currentOp.lockStats.acquireWaitCount` gives an
      approximate average wait time for the particular lock mode.

   .. data:: $currentOp.lockStats.deadlockCount

      Number of times the operation encountered deadlocks while waiting
      for lock acquisitions.

