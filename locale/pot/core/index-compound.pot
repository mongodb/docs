# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/index-compound.txt:7
# 9956602a0d0649dca3d462ec8ea34156
msgid "Compound Indexes"
msgstr ""

#: ../source/core/index-compound.txt:11
# 32baae116d6844afbe425d11bf365120
msgid "MongoDB supports *compound indexes*, where a single index structure holds references to multiple fields [#compound-index-field-limit]_ within a collection's documents. The following diagram illustrates an example of a compound index on two fields:"
msgstr ""

#: ../source/core/index-compound.txt:19
# e293b1a2fe0a48258a033459cd710164
msgid "MongoDB imposes a :limit:`limit of 31 fields for any compound index <Number of Indexed Fields in a Compound Index>`."
msgstr ""

#: ../source/core/index-compound.txt:22
# 9086374f80f644c487a781b6e841db3e
msgid "Compound indexes can support queries that match on multiple fields."
msgstr ""

#: ../source/core/index-compound.txt:0
# af4ea826b6f444b9ae00044c2b6d934f
msgid "Example"
msgstr ""

#: ../source/core/index-compound.txt:26
# 9e2f738ea8424fcba3206a032cb5362a
msgid "Consider a collection named ``products`` that holds documents that resemble the following document:"
msgstr ""

#: ../source/core/index-compound.txt:42
# e076fdf278f4473296e05b64b858bd5f
msgid "If applications query on the ``item`` field as well as query on both the ``item`` field and the ``stock`` field, you can specify a single compound index to support both of these queries:"
msgstr ""

#: ../source/core/index-compound.txt:50
# ca075be1e1fd471aa67c5ad58bd3aadb
msgid "You may not create compound indexes that have ``hashed`` index fields. You will receive an error if you attempt to create a compound index that includes :doc:`a hashed index </core/index-hashed>`."
msgstr ""

#: ../source/core/index-compound.txt:55
# 812cd1b3e11f488281ab91f30b603d40
msgid "The order of the fields in a compound index is very important. In the previous example, the index will contain references to documents sorted first by the values of the ``item`` field and, within each value of the ``item`` field, sorted by values of the ``stock`` field. See :ref:`index-ascending-and-descending` for more information."
msgstr ""

#: ../source/core/index-compound.txt:61
# 918eb282c6b4480eb867ccbd8a0804d9
msgid "In addition to supporting queries that match on all the index fields, compound indexes can support queries that match on the prefix of the index fields. For details, see :ref:`compound-index-prefix`."
msgstr ""

#: ../source/core/index-compound.txt:69
# 5d5b17f95a3e4142b4adabfd7d0642c5
msgid "Sort Order"
msgstr ""

#: ../source/core/index-compound.txt:71
# b4ac239ccd44425496797f457357f66f
msgid "Indexes store references to fields in either ascending (``1``) or descending (``-1``) sort order. For single-field indexes, the sort order of keys doesn't matter because MongoDB can traverse the index in either direction. However, for :ref:`compound indexes <index-type-compound>`, sort order can matter in determining whether the index can support a sort operation."
msgstr ""

#: ../source/core/index-compound.txt:78
# ac9fd1ef501743318ed20d246932140e
msgid "Consider a collection ``events`` that contains documents with the fields ``username`` and ``date``. Applications can issue queries that return results sorted first by ascending ``username`` values and then by descending (i.e. more recent to last) ``date`` values, such as:"
msgstr ""

#: ../source/core/index-compound.txt:87
# 93703b1068284ece94f87f950db97a67
msgid "or queries that return results sorted first by descending ``username`` values and then by ascending ``date`` values, such as:"
msgstr ""

#: ../source/core/index-compound.txt:94
# b02b053e22164769999e533af8c267e2
msgid "The following index can support both these sort operations:"
msgstr ""

#: ../source/core/index-compound.txt:100
# 4c6a91f080f648c5bf5ee36624888769
msgid "However, the above index **cannot** support sorting by ascending ``username`` values and then by ascending ``date`` values, such as the following:"
msgstr ""

#: ../source/core/index-compound.txt:111
# 8e223d14357542029dcae46199b02fb5
msgid "Prefixes"
msgstr ""

#: ../source/core/index-compound.txt:113
# 1267727dab5f4371b3a2f539a06fd199
msgid "Index prefixes are the *beginning* subsets of indexed fields. For example, consider the following compound index:"
msgstr ""

#: ../source/core/index-compound.txt:120
# cee2acd7dea6427cad30c9cc21324d51
msgid "The index has the following index prefixes:"
msgstr ""

#: ../source/core/index-compound.txt:122
# b43a7c4e65744149bd6d68d2e485c97e
msgid "``{ item: 1 }``"
msgstr ""

#: ../source/core/index-compound.txt:124
# 75e27f915601447a8bd40f6efc1e361e
msgid "``{ item: 1, location: 1 }``"
msgstr ""

#: ../source/core/index-compound.txt:126
# ab230ff197b14d70b33812a3afd34a48
msgid "For a compound index, MongoDB can use the index to support queries on the index prefixes. As such, MongoDB can use the index for queries on the following fields:"
msgstr ""

#: ../source/core/index-compound.txt:130
# 9eff9b85a59e439c9e600c33d13f850d
msgid "the ``item`` field,"
msgstr ""

#: ../source/core/index-compound.txt:131
# dc22e79b1c734311a78edbd43cbdde0a
msgid "the ``item`` field *and* the ``location`` field,"
msgstr ""

#: ../source/core/index-compound.txt:132
# 20f0af3bb805426aa95d57716c439491
msgid "the ``item`` field *and* the ``location`` field *and* the ``stock`` field."
msgstr ""

#: ../source/core/index-compound.txt:134
# 22d7f6353f06407094bac0382bcdf29f
msgid "MongoDB can also use the index to support a query on ``item`` and ``stock`` fields since ``item`` field corresponds to a prefix. However, the index would not be as efficient in supporting the query as would be an index on only ``item`` and ``stock``."
msgstr ""

#: ../source/core/index-compound.txt:139
# 4776419252c24eec8994af2c279b7812
msgid "However, MongoDB cannot use the index to support queries that include the following fields since without the ``item`` field, none of the listed fields correspond to a prefix index:"
msgstr ""

#: ../source/core/index-compound.txt:143
# 22e4e5d011164e9b994821bee813cae8
msgid "the ``location`` field,"
msgstr ""

#: ../source/core/index-compound.txt:145
# 5a2f5518a60f4cd6b31cc24eaebd876d
msgid "the ``stock`` field, or"
msgstr ""

#: ../source/core/index-compound.txt:147
# ade3550b4727469d80e171bf5d1e3cd4
msgid "the ``location`` and ``stock`` fields."
msgstr ""

#: ../source/core/index-compound.txt:149
# 23975928048c4ec2b082656713d26b29
msgid "If you have a collection that has both a compound index and an index on its prefix (e.g. ``{ a: 1, b: 1 }`` and ``{ a: 1 }``), if neither index has a sparse or unique constraint, then you can remove the index on the prefix (e.g. ``{ a: 1 }``). MongoDB will use the compound index in all of the situations that it would have used the prefix index."
msgstr ""

#: ../source/core/index-compound.txt:156
# 11799ece303b4ee88f3fdea63c23cc7f
msgid "Index Intersection"
msgstr ""

#: ../source/includes/fact-index-intersection-vs-compound-indexes.rst:1
# 1a749fa77e434ed19986073c4efdc09a
msgid "Starting in version 2.6, MongoDB can use :doc:`index intersection </core/index-intersection>` to fulfill queries. The choice between creating compound indexes that support your queries or relying on index intersection depends on the specifics of your system. See :ref:`index-intersection-compound-indexes` for more details."
msgstr ""

#: ../source/core/index-compound.txt:1
#: ../source/core/index-compound.txt:65
# 4d39a6dbd5bd4598b85d0f2b7dc47764
# 65a1780ffd3f4981a6f586fbca4d86ac
msgid "index"
msgstr ""

#: ../source/core/index-compound.txt:1
# 4d39a6dbd5bd4598b85d0f2b7dc47764
msgid "compound"
msgstr ""

#: ../source/core/index-compound.txt:2
# 0bd2de68e79e4846b03e4660625d63b8
msgid "compound index"
msgstr ""

#: ../source/core/index-compound.txt:65
# 65a1780ffd3f4981a6f586fbca4d86ac
msgid "sort order"
msgstr ""

