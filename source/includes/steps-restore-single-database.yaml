title: "Restore the snapshot data files to the destination host."
stepnum: 1
ref: copy
content: |
  Extract the snapshot archive to a temporary location where a temporary
  :program:`mongod` process can access the archive contents. Use a
  different data directory than any other database running on the
  host.

  For example:

  .. code-block:: sh

     tar -xvf {backupRestoreName}.tar.gz
     mv {backupRestoreName} {temp-database-path}

---
title: "Start a new, temporary MongoDB process."
ref: start-with-new-path
content: | 

  This temporary process must be on a new port using the extracted backup
  snapshot as the :setting:`dbpath`.

  Ensure the user executing the :program:`mongod` can read, write and
  execute code in the directory specified with :setting:`dbpath`.

  For example:

  .. code-block:: sh

     mongod --port 27018 --dbpath {temp-database-path} --logpath {temp-database-path}/mongodb.log --fork

---
title: "Run the Point-in-Time Restore Tool (Point-in-Time Restore Only)."
stepnum: 2
ref: pit-binary
content: | 

  a. Download the PIT Restore Tool to your host.

     .. note::

        If you closed the restore panel, click :guilabel:`Backup`, then
        :guilabel:`More` and then :guilabel:`Download PIT Restore Tool`.

  b. Run the PIT Restore Tool on your destination host.

     .. only:: onprem

        .. class:: copyable-code
        .. code-block:: sh

          ./mongodb-mms-pit-restore -https -host {targetHost} -port {targetPort} -opStart {opLogStartTimeStamp} -opEnd {opLogEndTimeStamp} -logFile pitLog.log -oplogSourceAddr {opsManagerHost}:{port} -apiKey {apiKey}

     .. only:: cloud

        .. class:: copyable-code
        .. code-block:: sh

          ./mongodb-mms-pit-restore -https -host {targetHost} -port {targetPort} -opStart {opLogStartTimeStamp} -opEnd {opLogEndTimeStamp} -logFile pitLog.log -oplogSourceAddr api-backup-dev.mongodb.com -apiKey {apiKey}
          
---
title: Use the ``mongodump`` command to export a single database or collection from the temporary running ``mongod`` process.
ref: dump-database
content: |

  Specify the single database name using :option:`--db <mongodump
  --db>` and, if needed, a :option:`--collection <mongodump
  --collection>` for a single collection.

  The :option:`--out <mongodump --out>` option specifies where the
  :program:`mongodump` extracts the target database. Choose an empty
  directory the user executing :program:`mongodump` can access.

  .. code-block:: sh

     mongodump --port 27018 --db {single-database} --out {new-database-path}

  You can export only a single collection as well:

  .. code-block:: sh

     mongodump --port 27018 --db {single-database} --collection {collection-name} --out {new-database-path}

---
title: "Use the ``mongorestore`` command to import the single database or collection."
ref: import-database
content: |
  Restore the single database to the desired instance using this :program:`mongorestore` command:

  .. code-block:: sh

     mongorestore --port 27017 --db {single-database} {temp-database-path} --drop

  If you are restoring a single collection, be sure to designate the
  collection:

  .. code-block:: sh

     mongorestore --port 27017 --db {single-database} --collection {collection-name} {temp-database-path} --drop

  Any existing databases matching the name given for the :option:`--db`
  option should be dropped using the :option:`--drop` option. If you
  choose not to use the :option:`--drop <mongorestore --drop>` option,
  the restore may produce errors for any documents with duplicate `_id`
  fields.

---
title: "Shut down the temporary MongoDB instance and remove the temporary database."
ref: clean-temp-database
content: |

  a. Start the ``mongo`` shell.

     .. code-block:: sh

        mongo {port}

  b. Drop the database and shut down the :program:`mongod` process.

     .. code-block:: javascript

        admin = db.getSiblingDB("admin")
        admin.shutdownServer()
        exit

  c. Delete the temporary database directory

     .. code-block:: sh

        rm -rf {temp-database-path}
...
