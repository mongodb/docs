title:
  text: Connect to MongoDB instance.
  character: '`'
stepnum: 1
ref: connect
content: |
  Connect and authenticate to the :program:`mongod` instance for a
  single deployment or a :program:`mongos` for a sharded cluster as an
  ``admin`` database user with the role
  :authrole:`userAdminAnyDatabase`.
---
title:
  text: Upgrade authorization schema.
  character: '`'
ref: upgrade-authz-schema
stepnum: 2
pre: |
  Use the :dbcommand:`authSchemaUpgrade` command in the ``admin``
  database to update the user data using the :program:`mongo` shell.
action:
  - heading:
      text: Run ``authSchemaUpgrade`` command.
      character: "'"
    language: javascript
    code: |
      res = db.getSiblingDB("admin").runCommand({authSchemaUpgrade: 1 });
      print(tojson(res));
    post: |
      In case of error, you may safely rerun the
      :dbcommand:`authSchemaUpgrade` command.
  - heading:
      text: Sharded cluster ``authSchemaUpgrade`` consideration.
      character: "'"
    pre: |
      For a sharded cluster, :dbcommand:`authSchemaUpgrade` will
      upgrade the authorization data of the shards as well and the
      upgrade is complete. You can,  however, override this behavior by
      including ``upgradeShards: false`` in the command, as in the
      following example:
    language: javascript
    code: |
      res = db.getSiblingDB("admin").runCommand({authSchemaUpgrade: 1,
      upgradeShards: false });
    post: |
      If you override the behavior, after running
      :dbcommand:`authSchemaUpgrade` on a :program:`mongos` instance,
      you will need to connect to the primary for each shard and
      repeat the upgrade process after upgrading on the
      :program:`mongos`.
...