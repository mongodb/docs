# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 18:45+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/write-concern.txt:8
msgid "Write Concern"
msgstr ""

#: ../source/reference/write-concern.txt:19
msgid ""
"Write concern describes the level of acknowledgment requested from "
"MongoDB for write operations to a standalone :binary:`~bin.mongod` or to "
":doc:`replica sets </replication>` or to :doc:`sharded clusters "
"</sharding>`. In sharded clusters, :binary:`~bin.mongos` instances will "
"pass the write concern on to the shards."
msgstr ""

#: ../source/reference/write-concern.txt:26
msgid "Write Concern Specification"
msgstr ""

#: ../source/reference/write-concern.txt:28
msgid "Write concern can include the following fields:"
msgstr ""

#: ../source/reference/write-concern.txt:34
msgid ""
"the :ref:`w <wc-w>` option to request acknowledgment that the write "
"operation has propagated to a specified number of :binary:`~bin.mongod` "
"instances or to :binary:`~bin.mongod` instances with specified tags."
msgstr ""

#: ../source/reference/write-concern.txt:38
msgid ""
"the :ref:`j <wc-j>` option to request acknowledgment that the write "
"operation has been written to the on-disk journal, and"
msgstr ""

#: ../source/reference/write-concern.txt:41
msgid ""
"the :ref:`wtimeout <wc-wtimeout>` option to specify a time limit to "
"prevent write operations from blocking indefinitely."
msgstr ""

#: ../source/reference/write-concern.txt:47
msgid "``w`` Option"
msgstr ""

#: ../source/reference/write-concern.txt:49
msgid ""
"The ``w`` option requests acknowledgment that the write operation has "
"propagated to a specified number of :binary:`~bin.mongod` instances or to"
" :binary:`~bin.mongod` instances with specified tags."
msgstr ""

#: ../source/reference/write-concern.txt:53
msgid ""
"Using the ``w`` option, the following ``w: <value>`` write concerns are "
"available:"
msgstr ""

#: ../source/reference/write-concern.txt:60
msgid "Value"
msgstr ""

#: ../source/reference/write-concern.txt:61
msgid "Description"
msgstr ""

#: ../source/reference/write-concern.txt:65
msgid ""
"Requests acknowledgment that the write operation has propagated to the "
"specified number of :binary:`~bin.mongod` instances. For example:"
msgstr ""

#: ../source/reference/write-concern.txt:73
#: ../source/reference/write-concern.txt:234
msgid "``w: 1``"
msgstr ""

#: ../source/reference/write-concern.txt:70
msgid ""
"Requests acknowledgment that the write operation has propagated to the "
"standalone :binary:`~bin.mongod` or the primary in a replica set. ``w: "
"1`` is the default write concern for MongoDB."
msgstr ""

#: ../source/reference/write-concern.txt:83
msgid "``w: 0``"
msgstr ""

#: ../source/reference/write-concern.txt:76
msgid ""
"Requests no acknowledgment of the write operation. However, ``w: 0`` may "
"return information about socket exceptions and networking errors to the "
"application."
msgstr ""

#: ../source/reference/write-concern.txt:80
msgid ""
"If you specify ``w: 0`` but include :ref:`j: true <wc-j>`, the :ref:`j: "
"true <wc-j>` prevails to request acknowledgment from the standalone "
":binary:`~bin.mongod` or the primary of a replica set."
msgstr ""

#: ../source/reference/write-concern.txt:85
msgid ""
"``w`` greater than 1 requires acknowledgment from the primary and as many"
" additional data-bearing secondaries to meet the specified write concern."
" For example, consider a 3-member replica set with no :term:`arbiters "
"<Arbiter>`. Specifying ``w: 2`` would require acknowledgment from the "
"primary and one of the secondaries. Specifying ``w: 3`` would require "
"acknowledgment from the primary and both secondaries."
msgstr ""

#: ../source/reference/write-concern.txt:95
#: ../source/reference/write-concern.txt:329
msgid ""
":ref:`Hidden <replica-set-hidden-members>`, :ref:`delayed <replica-set-"
"delayed-members>`, and :ref:`priority 0 <replica-set-secondary-only-"
"members>` members can acknowledge :writeconcern:`w: \\<number\\> "
"<\\<number\\>>` write operations."
msgstr ""

#: ../source/reference/write-concern.txt:101
#: ../source/reference/write-concern.txt:131
#: ../source/reference/write-concern.txt:302
#: ../source/reference/write-concern.txt:335
msgid ""
"Delayed secondaries can return write acknowledgment no earlier than the "
"configured :rsconf:`~members[n].slaveDelay`."
msgstr ""

#: ../source/reference/write-concern.txt:104
#: ../source/reference/write-concern.txt:139
msgid ""
"See :ref:`wc-ack-behavior` for when :binary:`~bin.mongod` instances "
"acknowledge the write."
msgstr ""

#: ../source/reference/write-concern.txt:109
msgid ""
"Requests acknowledgment that write operations have propagated to the "
"majority of data-bearing voting members (i.e. :rsconf:`members[n].votes` "
"is greater than ``0`` and :rsconf:`members[n].arbiterOnly` is ``false``)."
" [#majority-definition]_"
msgstr ""

#: ../source/reference/write-concern.txt:115
msgid ""
"For example, consider a replica set with 3 data-bearing voting members. "
"``\"majority\"`` write concern requires acknowledgment from two out of "
"three members, specifically the primary and one secondary. If you later "
"scaled the replica set to 5 data-bearing voting members, ``\"majority\"``"
" would require acknowledgment from three out of five members. "
"Specifically, the primary and two secondaries."
msgstr ""

#: ../source/reference/write-concern.txt:125
#: ../source/reference/write-concern.txt:296
msgid ""
":ref:`Hidden <replica-set-hidden-members>`, :ref:`delayed <replica-set-"
"delayed-members>`, and :ref:`priority 0 <replica-set-secondary-only-"
"members>` members with :rsconf:`members[n].votes` greater than ``0`` can "
"acknowledge :writeconcern:`\"majority\"` write operations."
msgstr ""

#: ../source/reference/write-concern.txt:134
msgid ""
"After the write operation returns with a :writeconcern:`w: \"majority\" "
"<\"majority\">` acknowledgment to the client, the client can read the "
"result of that write with a :readconcern:`\"majority\"` readConcern."
msgstr ""

#: ../source/reference/write-concern.txt:144
msgid ""
"Requests acknowledgment that the write operations have propagated to a "
"replica set member with the specified :ref:`tag <replica-set-"
"configuration-tag-sets>`. See :ref:`wc-ack-behavior` for when "
":binary:`~bin.mongod` instances acknowledge the write."
msgstr ""

#: ../source/reference/write-concern.txt:150
msgid ":doc:`/reference/replica-set-protocol-versions`"
msgstr ""

#: ../source/reference/write-concern.txt:155
msgid "``j`` Option"
msgstr ""

#: ../source/reference/write-concern.txt:157
msgid ""
"The ``j`` option requests acknowledgment from MongoDB that the write "
"operation has been written to the :doc:`on-disk journal "
"</core/journaling>`."
msgstr ""

#: ../source/reference/write-concern.txt:166
msgid ""
"If ``j: true``, requests acknowledgment that the :binary:`~bin.mongod` "
"instances, as specified in the :ref:`w: \\<value\\> <wc-w>`, have written"
" to the on-disk journal. ``j: true`` does not by itself guarantee that "
"the write will not be rolled back due to replica set primary failover."
msgstr ""

#: ../source/includes/note-write-concern-journaled-replication.rst:1
msgid ""
"With :writeconcern:`j: true <j>`, MongoDB returns only after the "
"requested number of members, including the primary, have written to the "
"journal. Previously :writeconcern:`j: true <j>` write concern in a "
"replica set only requires the :term:`primary` to write to the journal, "
"regardless of the :ref:`w: \\<value\\> <wc-w>` write concern."
msgstr ""

#: ../source/reference/write-concern.txt:178
msgid ""
"Specifying a write concern that includes ``j: true`` to a "
":binary:`~bin.mongod` instance that is running without journaling "
"produces an error."
msgstr ""

#: ../source/reference/write-concern.txt:182
msgid ""
"For replica sets using :rsconf:`protocolVersion: 1 <protocolVersion>`, if"
" journaling is enabled, :writeconcern:`w: \"majority\" <\"majority\">` "
"may imply ``j: true``. The :rsconf:`writeConcernMajorityJournalDefault` "
"replica set configuration setting determines the behavior. See :ref:`wc-"
"ack-behavior` for details."
msgstr ""

#: ../source/reference/write-concern.txt:192
msgid "``wtimeout``"
msgstr ""

#: ../source/reference/write-concern.txt:194
msgid ""
"This option specifies a time limit, in milliseconds, for the write "
"concern. ``wtimeout`` is only applicable for ``w`` values greater than "
"``1``."
msgstr ""

#: ../source/reference/write-concern.txt:198
msgid ""
"``wtimeout`` causes write operations to return with an error after the "
"specified limit, even if the required write concern will eventually "
"succeed. When these write operations return, MongoDB **does not** undo "
"successful data modifications performed before the write concern exceeded"
" the ``wtimeout`` time limit."
msgstr ""

#: ../source/reference/write-concern.txt:204
msgid ""
"If you do not specify the ``wtimeout`` option and the level of write "
"concern is unachievable, the write operation will block indefinitely. "
"Specifying a ``wtimeout`` value of ``0`` is equivalent to a write concern"
" without the ``wtimeout`` option."
msgstr ""

#: ../source/reference/write-concern.txt:212
msgid "Acknowledgment Behavior"
msgstr ""

#: ../source/reference/write-concern.txt:214
msgid ""
"The :ref:`w <wc-w>` option and the :ref:`j <wc-j>` option determine when "
":binary:`~bin.mongod` instances acknowledge write operations."
msgstr ""

#: ../source/reference/write-concern.txt:218
msgid "Standalone"
msgstr ""

#: ../source/reference/write-concern.txt:220
msgid ""
"A standalone :binary:`~bin.mongod` acknowledges a write operation either "
"after applying the write in memory or after writing to the on-disk "
"journal. The following table lists the acknowledgment behavior for a "
"standalone and the relevant write concerns:"
msgstr ""

#: ../source/reference/write-concern.txt:230
#: ../source/reference/write-concern.txt:271
#: ../source/reference/write-concern.txt:317
msgid "``j`` is unspecified"
msgstr ""

#: ../source/reference/write-concern.txt:231
msgid "``j:true``"
msgstr ""

#: ../source/reference/write-concern.txt:232
msgid "``j:false``"
msgstr ""

#: ../source/reference/write-concern.txt:235
#: ../source/reference/write-concern.txt:237
#: ../source/reference/write-concern.txt:242
msgid "In memory"
msgstr ""

#: ../source/reference/write-concern.txt:236
#: ../source/reference/write-concern.txt:241
msgid "On-disk journal"
msgstr ""

#: ../source/reference/write-concern.txt:239
#: ../source/reference/write-concern.txt:303
msgid "``w: \"majority\"``"
msgstr ""

#: ../source/reference/write-concern.txt:240
msgid "On-disk journal *if running with journaling*"
msgstr ""

#: ../source/includes/extracts/no-journaling-rollback.rst:2
msgid ""
"With :rsconf:`writeConcernMajorityJournalDefault` set to ``false``, "
"MongoDB does not wait for :writeconcern:`w: \"majority\" <\"majority\">` "
"writes to be written to the on-disk journal before acknowledging the "
"writes. As such, :writeconcern:`majority` write operations could possibly"
" roll back in the event of a transient loss (e.g. crash and restart) of a"
" majority of nodes in a given replica set."
msgstr ""

#: ../source/reference/write-concern.txt:251
msgid "Replica Sets"
msgstr ""

#: ../source/reference/write-concern.txt:253
msgid ""
"The value specified to :ref:`w <wc-w>` determines the number of replica "
"set members that must acknowledge the write before returning success. For"
" each eligible replica set member, the :ref:`j <wc-j>` option determines "
"whether the member acknowledges writes after applying the write operation"
" in memory or after writing to the on-disk journal."
msgstr ""

#: ../source/reference/write-concern.txt:260
msgid ""
"Any data-bearing voting member of the replica set can contribute to write"
" acknowledgment of :writeconcern:`\"majority\"` write operations."
msgstr ""

#: ../source/reference/write-concern.txt:264
#: ../source/reference/write-concern.txt:310
msgid ""
"The following table lists when the member can acknowledge the write based"
" on the :ref:`j <wc-j>` value:"
msgstr ""

#: ../source/reference/write-concern.txt:272
msgid ""
"Acknowledgment depends on the value of "
":rsconf:`writeConcernMajorityJournalDefault`:"
msgstr ""

#: ../source/reference/write-concern.txt:275
msgid ""
"If ``true``, acknowledgment requires writing operation to on-disk journal"
" (``j: true``)."
msgstr ""

#: ../source/reference/write-concern.txt:278
msgid ":rsconf:`writeConcernMajorityJournalDefault` defaults to ``true``"
msgstr ""

#: ../source/reference/write-concern.txt:281
msgid ""
"If ``false``, acknowledgment requires writing operation in memory (``j: "
"false``)."
msgstr ""

#: ../source/reference/write-concern.txt:284
#: ../source/reference/write-concern.txt:321
msgid "``j: true``"
msgstr ""

#: ../source/reference/write-concern.txt:285
#: ../source/reference/write-concern.txt:322
msgid "Acknowledgment requires writing operation to on-disk journal."
msgstr ""

#: ../source/reference/write-concern.txt:287
#: ../source/reference/write-concern.txt:324
msgid "``j: false``"
msgstr ""

#: ../source/reference/write-concern.txt:288
#: ../source/reference/write-concern.txt:325
msgid "Acknowledgment requires writing operation in memory."
msgstr ""

#: ../source/reference/write-concern.txt:325
msgid "``w: <number>``"
msgstr ""

#: ../source/reference/write-concern.txt:306
msgid ""
"Any data-bearing member of the replica set can contribute to write "
"acknowledgment of :ref:`w: \\<number\\> <wc-w>` write operations."
msgstr ""

#: ../source/reference/write-concern.txt:318
msgid "Acknowledgment requires writing operation in memory (``j: false``)."
msgstr ""

#: ../source/reference/write-concern.txt:338
msgid ""
"For the behavior in version 3.2, refer to the :v3.2:`3.2 manual "
"</reference/write-concern>`."
msgstr ""

#: ../source/reference/write-concern.txt:345
msgid ""
"Prior to MongoDB 3.0, ``w: \"majority\"`` refers to the majority of the "
"replica set's members instead of the majority of the replica set's voting"
" members."
msgstr ""

#~ msgid "Overview"
#~ msgstr ""

#~ msgid ""
#~ ":term:`Write concern` describes the guarantee"
#~ " that MongoDB provides when reporting "
#~ "on the success of a write "
#~ "operation. The strength of the write "
#~ "concerns determine the level of "
#~ "guarantee. When inserts, updates and "
#~ "deletes have a *weak* write concern, "
#~ "write operations return quickly. In some"
#~ " failure cases, write operations issued "
#~ "with weak write concerns may not "
#~ "persist. With *stronger* write concerns, "
#~ "clients wait after sending a write "
#~ "operation for MongoDB to confirm the "
#~ "write operations."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB provides different levels of "
#~ "write concern to better address the "
#~ "specific needs of applications. Clients "
#~ "may adjust write concern to ensure "
#~ "that the most important operations "
#~ "persist successfully to an entire "
#~ "MongoDB deployment. For other less "
#~ "critical operations, clients can adjust "
#~ "the write concern to ensure faster "
#~ "performance rather than ensure persistence "
#~ "to the entire deployment."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`/core/write-concern` for an introduction"
#~ " to write concern in MongoDB."
#~ msgstr ""

#~ msgid ""
#~ "To provide write concern, :doc:`drivers "
#~ "</applications/drivers>` issue the "
#~ ":dbcommand:`getLastError` command after a "
#~ "write operation and receive a document"
#~ " with information about the last "
#~ "operation. This document's ``err`` field "
#~ "contains either:"
#~ msgstr ""

#~ msgid ""
#~ "``null``, which indicates the write "
#~ "operations have completed successfully, or"
#~ msgstr ""

#~ msgid "a description of the last error encountered."
#~ msgstr ""

#~ msgid ""
#~ "The definition of a \"successful write\""
#~ " depends on the arguments specified "
#~ "to :dbcommand:`getLastError`, or in replica"
#~ " sets, the configuration of "
#~ ":data:`~local.system.replset.settings.getLastErrorDefaults`. "
#~ "When deciding the level of write "
#~ "concern for your application, see the"
#~ " introduction to :doc:`/core/write-concern`."
#~ msgstr ""

#~ msgid ""
#~ "The :dbcommand:`getLastError` command has the"
#~ " following options to configure write "
#~ "concern requirements:"
#~ msgstr ""

#~ msgid "``j`` or \"journal\" option"
#~ msgstr ""

#~ msgid ""
#~ "This option confirms that the "
#~ ":program:`mongod` instance has written the "
#~ "data to the on-disk journal and"
#~ " ensures data is not lost if "
#~ "the :program:`mongod` instance shuts down "
#~ "unexpectedly. Set to ``true`` to enable,"
#~ " as shown in the following example:"
#~ msgstr ""

#~ msgid ""
#~ "If you set :data:`journal` to true, "
#~ "and the :program:`mongod` does not have"
#~ " journaling enabled, as with "
#~ ":setting:`nojournal`, then :dbcommand:`getLastError` "
#~ "will provide basic receipt acknowledgment, "
#~ "and will include a ``jnote`` field "
#~ "in its return document."
#~ msgstr ""

#~ msgid "``w`` option"
#~ msgstr ""

#~ msgid ""
#~ "This option provides the ability to "
#~ "disable write concern entirely *as well"
#~ " as* specifies the write concern "
#~ "operations for :term:`replica sets <replica"
#~ " set>`. See :doc:`Write Concern "
#~ "Considerations </core/write-concern>` for an"
#~ " introduction to the fundamental concepts"
#~ " of write concern. By default, the"
#~ " ``w`` option is set to ``1``, "
#~ "which provides basic receipt acknowledgment"
#~ " on a single :program:`mongod` instance "
#~ "or on the :term:`primary` in a "
#~ "replica set."
#~ msgstr ""

#~ msgid "The ``w`` option takes the following values:"
#~ msgstr ""

#~ msgid "``0``:"
#~ msgstr ""

#~ msgid ""
#~ "If you disable basic write operation "
#~ "acknowledgment but require journal commit "
#~ "acknowledgment, the journal commit prevails,"
#~ " and the driver will require that "
#~ ":program:`mongod` will acknowledge the write"
#~ " operation."
#~ msgstr ""

#~ msgid "``1``:"
#~ msgstr ""

#~ msgid "*A number greater than 1*:"
#~ msgstr ""

#~ msgid ""
#~ "Guarantees that write operations have "
#~ "propagated successfully to the specified "
#~ "number of replica set members including"
#~ " the primary. If you set ``w`` "
#~ "to a number that is greater than"
#~ " the number of set members that "
#~ "hold data, MongoDB waits for the "
#~ "non-existent members to become available,"
#~ " which means MongoDB blocks indefinitely."
#~ msgstr ""

#~ msgid "``majority``:"
#~ msgstr ""

#~ msgid ""
#~ "In :doc:`Master/Slave </core/master-slave>` "
#~ "deployments, :dbcommand:`getLastError` treats "
#~ "``w:majority`` as equivalent to ``w:1``. "
#~ "In earlier versions of MongoDB, "
#~ "``w:majority`` produces an error in "
#~ ":doc:`master/slave </core/master-slave>` "
#~ "deployments."
#~ msgstr ""

#~ msgid "*A tag set*:"
#~ msgstr ""

#~ msgid ""
#~ "By specifying a :ref:`tag set "
#~ "<replica-set-configuration-tag-sets>` you"
#~ " can have fine-grained control over"
#~ " which replica set members must "
#~ "acknowledge a write operation to satisfy"
#~ " the required level of write concern."
#~ msgstr ""

#~ msgid ""
#~ ":dbcommand:`getLastError` also supports a "
#~ "``wtimeout`` setting which allows clients "
#~ "to specify a timeout for the write"
#~ " concern: if you don't specify "
#~ "``wtimeout``, or if you give it a"
#~ " value of ``0``, and the "
#~ ":program:`mongod` cannot fulfill the write "
#~ "concern the :dbcommand:`getLastError` will "
#~ "block, potentially forever."
#~ msgstr ""

#~ msgid ""
#~ "For more information on write concern"
#~ " and replica sets, see :ref:`Write "
#~ "Concern for Replica Sets <replica-"
#~ "set-write-concern>` for more information."
#~ msgstr ""

#~ msgid ""
#~ "In sharded clusters, :program:`mongos` "
#~ "instances will pass write concern on "
#~ "to the shard :program:`mongod` instances."
#~ msgstr ""

# d64c63509bd34d3b8b06c4bc53fd7433
#~ msgid "Write Concern Reference"
#~ msgstr ""

# 6a1834578f1c48a3994b896a69a8201c
#~ msgid "Read Isolation Behavior"
#~ msgstr ""

# cf9eef82ab574ac3a288d0b148eb7276
#~ msgid ""
#~ "MongoDB allows clients to read documents"
#~ " inserted or modified before it "
#~ "commits these modifications to disk, "
#~ "regardless of write concern level or "
#~ "journaling configuration. As a result, "
#~ "applications may observe two classes of"
#~ " behaviors:"
#~ msgstr ""

# e7a5f3e3f6f543b09406b364b5a5c19c
#~ msgid ""
#~ "For systems with multiple concurrent "
#~ "readers and writers, MongoDB will allow"
#~ " clients to read the results of "
#~ "a write operation before the write "
#~ "operation returns."
#~ msgstr ""

# 855faf18005a4c6cae1167a69c37f886
#~ msgid ""
#~ "If the :program:`mongod` terminates before "
#~ "the journal commits, even if a "
#~ "write returns successfully, queries may "
#~ "have read data that will not exist"
#~ " after the :program:`mongod` restarts."
#~ msgstr ""

# 28c0dab2ebe8400d85ad9d2d900c59bf
#~ msgid ""
#~ "Other database systems refer to these"
#~ " isolation semantics as *read uncommitted*."
#~ " For all inserts and updates, MongoDB"
#~ " modifies each document in isolation: "
#~ "clients never see documents in "
#~ "intermediate states. For multi-document "
#~ "operations, MongoDB does not provide any"
#~ " multi-document transactions or isolation."
#~ msgstr ""

# 8819034b3eb8420ebeadad9a96e534e4
#~ msgid ""
#~ "When :program:`mongod` returns a successful"
#~ " *journaled write concern*, the data "
#~ "is fully committed to disk and "
#~ "will be available after :program:`mongod` "
#~ "restarts."
#~ msgstr ""

# 42761cb0189b491aa0937961b3048836
#~ msgid ""
#~ "For replica sets, write operations are"
#~ " durable only after a write "
#~ "replicates and commits to the journal"
#~ " of a majority of the members "
#~ "of the set. MongoDB regularly commits"
#~ " data to the journal regardless of"
#~ " journaled write concern: use the "
#~ ":setting:`~storage.journal.commitIntervalMs` to control"
#~ " how often a :program:`mongod` commits "
#~ "the journal."
#~ msgstr ""

# 298e8ef9baba481e9606d2b2b4d5e36f
#~ msgid "Available Write Concern"
#~ msgstr ""

# bda73172e0ba43a68b2963e7f7786475
#~ msgid ""
#~ "Disables basic acknowledgment of write "
#~ "operations, but returns information about "
#~ "socket exceptions and networking errors "
#~ "to the application."
#~ msgstr ""

# dc4ef5653dc240b089538e158293c356
#~ msgid ""
#~ "Provides acknowledgment of write operations"
#~ " on a standalone :program:`mongod` or "
#~ "the :term:`primary` in a replica set."
#~ msgstr ""

# eac57718110a401686edd06bac8867b7
#~ msgid ""
#~ "Confirms that write operations have "
#~ "propagated to the majority of configured"
#~ " replica set: a majority of the "
#~ "set's configured members must acknowledge "
#~ "the write operation before it succeeds."
#~ " This allows you to avoid hard "
#~ "coding assumptions about the size of "
#~ "your replica set into your application."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Write concern </core/write-concern>` "
#~ "describes the guarantee that MongoDB "
#~ "provides when reporting on the success"
#~ " of a write operation."
#~ msgstr ""

#~ msgid ""
#~ "A new protocol for :ref:`write "
#~ "operations <rel-notes-write-operations>` "
#~ "integrates write concerns with the write"
#~ " operations and eliminates the need "
#~ "to call the :dbcommand:`getLastError` command."
#~ " Previous versions required a "
#~ ":dbcommand:`getLastError` command immediately after"
#~ " a write operation to specify the "
#~ "write concern."
#~ msgstr ""

#~ msgid ""
#~ "Write concern can include the :ref:`w"
#~ " <wc-w>` option to specify the "
#~ "required number of acknowledgments before "
#~ "returning, the :ref:`j <wc-j>` option to"
#~ " require writes to the journal before"
#~ " returning, and :ref:`wtimeout <wc-"
#~ "wtimeout>` option to specify a time "
#~ "limit to prevent write operations from"
#~ " blocking indefinitely."
#~ msgstr ""

#~ msgid ""
#~ "In sharded clusters, :program:`mongos` "
#~ "instances will pass the write concern"
#~ " on to the shard."
#~ msgstr ""

#~ msgid ""
#~ "The ``w`` option provides the ability"
#~ " to disable write concern entirely "
#~ "*as well as* specify the write "
#~ "concern for :term:`replica sets <replica "
#~ "set>`."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB uses ``w: 1`` as the "
#~ "default write concern. ``w: 1`` provides"
#~ " basic receipt acknowledgment."
#~ msgstr ""

#~ msgid "The ``w`` option accepts the following values:"
#~ msgstr ""

#~ msgid "``1``"
#~ msgstr ""

#~ msgid "This is the default write concern for MongoDB."
#~ msgstr ""

#~ msgid "``0``"
#~ msgstr ""

#~ msgid ""
#~ "If you disable basic write operation "
#~ "acknowledgment but require journal commit "
#~ "acknowledgment, the journal commit prevails,"
#~ " and the server will require that "
#~ ":program:`mongod` acknowledge the write "
#~ "operation."
#~ msgstr ""

#~ msgid "<Number greater than 1>"
#~ msgstr ""

#~ msgid ""
#~ "Guarantees that write operations have "
#~ "propagated successfully to the specified "
#~ "number of replica set members including"
#~ " the primary."
#~ msgstr ""

#~ msgid ""
#~ "For example, ``w: 2`` indicates "
#~ "acknowledgements from the primary and at"
#~ " least one secondary."
#~ msgstr ""

#~ msgid ""
#~ "If you set ``w`` to a number "
#~ "that is greater than the number of"
#~ " set members that hold data, MongoDB"
#~ " waits for the non-existent members"
#~ " to become available, which means "
#~ "MongoDB blocks indefinitely."
#~ msgstr ""

#~ msgid "``\"majority\"``"
#~ msgstr ""

#~ msgid ""
#~ "In :doc:`Master/Slave </core/master-slave>` "
#~ "deployments, MongoDB treats ``w: "
#~ "\"majority\"`` as equivalent to ``w: "
#~ "1``. In earlier versions of MongoDB, "
#~ "``w: \"majority\"`` produces an error in"
#~ " :doc:`master/slave </core/master-slave>` "
#~ "deployments."
#~ msgstr ""

#~ msgid "<tag set>"
#~ msgstr ""

#~ msgid ""
#~ "By specifying a :ref:`tag set "
#~ "<replica-set-configuration-tag-sets>`, you"
#~ " can have fine-grained control over"
#~ " which replica set members must "
#~ "acknowledge a write operation to satisfy"
#~ " the required level of write concern."
#~ msgstr ""

#~ msgid ""
#~ "The ``j`` option confirms that the "
#~ ":program:`mongod` instance has written the "
#~ "data to the on-disk journal. This"
#~ " ensures that data is not lost "
#~ "if the :program:`mongod` instance shuts "
#~ "down unexpectedly. Set to ``true`` to"
#~ " enable."
#~ msgstr ""

#~ msgid ""
#~ "Specifying a write concern that includes"
#~ " ``j: true`` to a :program:`mongod` "
#~ "or :program:`mongos` running with "
#~ ":option:`--nojournal` option now errors. "
#~ "Previous versions would ignore the ``j:"
#~ " true``."
#~ msgstr ""

#~ msgid ""
#~ "Requiring *journaled* write concern in a"
#~ " replica set only requires a journal"
#~ " commit of the write operation to "
#~ "the :term:`primary` of the set "
#~ "regardless of the level of *replica "
#~ "acknowledged* write concern."
#~ msgstr ""

#~ msgid ""
#~ "``wtimeout`` causes write operations to "
#~ "return with an error after the "
#~ "specified limit, even if the required"
#~ " write concern is not fulfilled. When"
#~ " these write operations return, MongoDB "
#~ "**does not** undo successful data "
#~ "modifications performed before the write "
#~ "concern exceeded the ``wtimeout`` time "
#~ "limit."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Write Concern Introduction </core/write-"
#~ "concern>` and :ref:`Write Concern for "
#~ "Replica Sets <replica-set-write-"
#~ "concern>`."
#~ msgstr ""

