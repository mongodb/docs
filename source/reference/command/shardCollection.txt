===============
shardCollection
===============

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: shardCollection

   Enables a collection for sharding and allows MongoDB to begin
   distributing data among shards. You must run
   :dbcommand:`enableSharding` on a database before running the
   :dbcommand:`shardCollection` command. :dbcommand:`shardCollection`
   has the following form:

   .. code-block:: javascript

      { shardCollection: "<database>.<collection>", key: <shardkey> }

   :dbcommand:`shardCollection` has the following fields:

   .. include:: /reference/command/shardCollection-field.rst

Considerations
--------------

Use
~~~

Do **not** run more than one :dbcommand:`shardCollection` command on
the same collection at the same time.

.. include:: /includes/fact-cannot-unshard-collection.rst

Shard Keys
~~~~~~~~~~

Choosing the best shard key to effectively distribute load among your
shards requires some planning. Review :ref:`sharding-shard-key`
regarding choosing a shard key.

Hashed Shard Keys
~~~~~~~~~~~~~~~~~

.. versionadded:: 2.4

:ref:`Hashed shard keys <sharding-hashed-sharding>` use a
hashed index of a single field as the shard key.

.. include:: /includes/note-hashed-shard-key-during-chunk-migration.rst

Example
-------

The following operation enables sharding for the ``people`` collection
in the ``records`` database and uses the ``zipcode`` field as the
:ref:`shard key <shard-key>`:

.. code-block:: javascript

   db.runCommand( { shardCollection: "records.people", key: { zipcode: 1 } } )

Additional Information
----------------------

:doc:`/sharding`, :doc:`/core/sharding`, and
:doc:`/tutorial/deploy-shard-cluster`.
