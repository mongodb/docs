==============================
Geospatial Indexes and Queries
==============================

.. default-domain:: mongodb

MongoDB offers a number of indexes and query mechanisms to handle
geospatial information. This section introduces MongoDB's geospatial
features. For complete examples of geospatial queries in MongoDB, see
:doc:`/administration/indexes-geo`.

Surfaces
--------

Before storing your location data and writing queries, you must decide
the type of surface to use to perform calculations. The type you choose
affects how you store data, what type of index to build, and the syntax
of your queries.

MongoDB offers two surface types:

Spherical
~~~~~~~~~

To calculate geometry over an Earth-like sphere, store your
location data on a spherical surface and use :doc:`2dsphere
</core/2dsphere>` index.

Store your location data as GeoJSON objects with this
coordinate-axis order: **longitude, latitude**. The coordinate
reference system for GeoJSON uses the :term:`WGS84` datum.

Flat
~~~~

To calculate distances on a Euclidean plane, store your location data
as legacy coordinate pairs and use a :doc:`2d </core/2d>` index.

.. _geo-overview-location-data:

Location Data
-------------

If you choose spherical surface calculations, you store location data
as either:

GeoJSON Objects
~~~~~~~~~~~~~~~

Queries on :term:`GeoJSON` objects always calculate on a sphere. The
default coordinate reference system for GeoJSON uses the :term:`WGS84`
datum.

.. versionadded:: 2.4
   Support for GeoJSON storage and queries is new in version
   2.4. Prior to version 2.4, all geospatial data used coordinate
   pairs.

MongoDB supports the following GeoJSON objects:

- Point

- LineString

- Polygon

Legacy Coordinate Pairs
~~~~~~~~~~~~~~~~~~~~~~~

MongoDB supports spherical surface calculations on :term:`legacy
coordinate pairs` using a ``2dsphere`` index by converting the data to
the GeoJSON Point type.

If you choose flat surface calculations, and use a ``2d`` index you
can store data only as :term:`legacy coordinate pairs`.

Query Operations
----------------

MongoDB's geospatial query operators let you query for:

Inclusion
~~~~~~~~~

MongoDB can query for locations contained entirely within a
specified polygon. Inclusion queries use the :query:`$geoWithin`
operator.

Both ``2d`` and ``2dsphere`` indexes can support inclusion
queries. MongoDB does not require an index for inclusion queries after
2.2.3; however, these indexes will improve query performance.

Intersection
~~~~~~~~~~~~

MongoDB can query for locations that intersect with a specified
geometry. These queries apply only to data on a spherical
surface. These queries use the :query:`$geoIntersects` operator.

Only ``2dsphere`` indexes support intersection.

Proximity
~~~~~~~~~

MongoDB can query for the points nearest to another
point. Proximity queries use the :query:`$near` operator. The
:query:`$near` operator requires a ``2d`` or ``2dsphere`` index.

.. _index-feature-geospatial:

Geospatial Indexes
------------------

MongoDB provides the following geospatial index types to support the
geospatial queries.

``2dsphere``
~~~~~~~~~~~~

:doc:`2dsphere </core/2dsphere>` indexes support:

- Calculations on a sphere

- GeoJSON objects and include backwards compatibility for legacy
  coordinate pairs.

- A compound index with scalar index fields (i.e. ascending or
  descending) as a prefix or suffix of the ``2dsphere`` index field

.. versionadded:: 2.4
   ``2dsphere`` indexes are not available before version 2.4.

.. seealso:: :doc:`/tutorial/query-a-2dsphere-index`

``2d``
~~~~~~

:doc:`2d </core/2d>` indexes support:

- Calculations using flat geometry

- Legacy coordinate pairs (i.e., geospatial points on a flat
  coordinate system)

- A compound index with only one additional field, as a suffix of the
  ``2d`` index field

.. seealso:: :doc:`/tutorial/query-a-2d-index`

Geospatial Indexes and Sharding
-------------------------------

You *cannot* use a geospatial index as the :term:`shard key` index.

You can create and maintain a geospatial index on
a sharded collection if using fields other than shard key.

.. include:: /includes/fact-near-sharded-cluster.rst

You also can query for geospatial data using :query:`$geoWithin`.

Additional Resources
--------------------

The following pages provide complete documentation for geospatial
indexes and queries:

.. include:: /includes/toc/dfn-list-indexes-concepts-geo.rst

.. include:: /includes/toc/indexes-concepts-geo.rst

.. seealso:: :ref:`geospatial-query-compatibility-chart`
