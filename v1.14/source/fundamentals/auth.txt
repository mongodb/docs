.. _golang-authentication-mechanisms:

=========================
Authentication Mechanisms
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use each **authentication
mechanism** available in the MongoDB Community Edition. MongoDB uses
authentication mechanisms to confirm an identity and establish trust to
ensure security in the driver and server before connecting.

To authenticate using ``GSSAPI/Kerberos`` or ``LDAP``, see the
:ref:`golang-enterprise-authentication-mechanisms` fundamentals page. To
learn more about establishing a connection to your MongoDB cluster, see
the :ref:`golang-connection-guide`.

Supported Mechanisms
--------------------

The Go driver supports the following authentication mechanisms:

* :ref:`SCRAM-SHA-256 <golang_sha_256>`
* :ref:`SCRAM-SHA-1 <golang-sha-1>`
* :ref:`MONGODB-CR <golang-mongodb-cr>`
* :ref:`MongoDB-AWS <golang-mongodb-aws>`
* :ref:`X.509 <golang-x509>`

The Go Driver establishes a connection with an authentication mechanism
through a `Client <{+api+}/mongo#Client>`__
type. The ``Client`` type specifies the mechanism and credentials to use
as connection options in a `Credential <{+api+}/mongo/options#Credential>`__
type . To configure these options, pass a ``Credential`` type to the
`SetAuth() <{+api+}/mongo/options#ClientOptions.SetAuth>`__
method of the `ClientOptions <{+api+}/mongo/options#ClientOptions>`__
type.

The following sections demonstrate this process by using the five
mechanisms the MongoDB Community Edition supports.

Example Conventions
~~~~~~~~~~~~~~~~~~~

Each authentication mechanism contains the following placeholders:

* ``username`` - Your MongoDB username
* ``password`` - Your MongoDB user's password
* ``hostname`` - Your MongoDB servers network address, accessible by
  your client
* ``port`` - Your MongoDB servers port number
* ``authenticationDb`` - Your MongoDB database that contains the user's
  authentication data. If you omit this option, the driver uses the
  default value ``admin``.

.. _golang-default-auth-mechanism:

Default
~~~~~~~

The default mechanism uses one of the following authentication
mechanisms depending on what MongoDB versions your server supports:

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :class: compatibility-large

   * - Mechanism
     - Versions

   * - ``SCRAM-SHA-256``
     - MongoDB 4.0 and later

   * - ``SCRAM-SHA-1``
     - MongoDB 3.0, 3.2, 3.4, and 3.6

   * - ``MONGODB-CR``
     - MongoDB 2.6 and earlier

To specify the default authentication mechanism, omit the
``AuthMechanism`` option:

.. code-block:: go

   credential := options.Credential{
      AuthSource: "<authenticationDb>",
      Username: "<username>",
      Password: "<password>",
   }
   clientOpts := options.Client().ApplyURI("mongodb://<hostname>:<port>").
      SetAuth(credential)

   client, err := mongo.Connect(context.TODO(), clientOpts)

To learn more about the challenge-response (CR) and salted
challenge-response authentication mechanisms (SCRAM) that MongoDB supports,
see the :manual:`SCRAM </core/security-scram/>` section of the server manual.

.. _golang_sha_256:

``SCRAM-SHA-256``
~~~~~~~~~~~~~~~~~

.. important::

   ``SCRAM-SHA-256`` is the default authentication method for MongoDB starting
   in MongoDB 4.0.

``SCRAM-SHA-256`` is a salted challenge-response authentication mechanism
(SCRAM) that uses your username and password, encrypted with the ``SHA-256``
algorithm, to authenticate your user.

To specify the ``SCRAM-SHA-256`` authentication mechanism, assign the
``AuthMechanism`` option the value ``"SCRAM-SHA-256"``:

.. code-block:: go
   :emphasize-lines: 2

   credential := options.Credential{
      AuthMechanism: "SCRAM-SHA-256",
      AuthSource: "<authenticationDb>",
      Username: "<username>",
      Password: "<password>",
   }
   clientOpts := options.Client().ApplyURI("mongodb://<hostname>:<port>").
      SetAuth(credential)

   client, err := mongo.Connect(context.TODO(), clientOpts)

.. _golang-scram-sha-1-auth-mechanism:
.. _golang-sha-1:

``SCRAM-SHA-1``
~~~~~~~~~~~~~~~

.. important::

   ``SCRAM-SHA-1`` is the default authentication method for MongoDB versions
   3.0, 3.2, 3.4, and 3.6.

``SCRAM-SHA-1`` is a salted challenge-response mechanism (SCRAM) that uses your
username and password, encrypted using the ``SHA-1`` algorithm, to authenticate
your user.

To specify the ``SCRAM-SHA-1`` authentication mechanism, assign the
``AuthMechanism`` option the value ``"SCRAM-SHA-1"``:

.. code-block:: go
   :emphasize-lines: 2

   credential := options.Credential{
      AuthMechanism: "SCRAM-SHA-1",
      AuthSource: "<authenticationDb>",
      Username: "<username>",
      Password: "<password>",
   }
   clientOpts := options.Client().ApplyURI("mongodb://<hostname>:<port>").
      SetAuth(credential)

   client, err := mongo.Connect(context.TODO(), clientOpts)

.. _golang-mongodb-cr:

``MONGODB-CR``
~~~~~~~~~~~~~~

``MONGODB-CR`` is a challenge-response authentication mechanism that uses your
username and password to authenticate your user.

.. important::

   This authentication mechanism was deprecated starting in MongoDB 3.6
   and is no longer supported as of MongoDB 4.0.

.. _golang-mongodb-aws:

``MONGODB-AWS``
~~~~~~~~~~~~~~~

.. important::

   The MONGODB-AWS authentication mechanism is available only in MongoDB
   versions 4.4 and later.

The ``MONGODB-AWS`` authentication mechanism uses your Amazon Web Services
Identity and Access Management (AWS IAM) credentials to authenticate your
user.

To connect to a MongoDB instance with ``MONGODB-AWS`` authentication enabled,
specify the ``MONGODB-AWS`` authentication mechanism.

The driver checks for your credentials in the following sources in the
order listed:

1. Connection string.
#. Environment variables.
#. Web identity token file.
#. AWS ECS endpoint specified in the
   ``AWS_CONTAINER_CREDENTIALS_RELATIVE_URI`` environment variable.
#. AWS EC2 endpoint. To learn more, see `IAM Roles for Tasks
   <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html>`__
   in the AWS documentation.

.. important::
   
   The driver obtains the credentials only from the first source in which they are found.
   For example, if you specify your AWS credentials in the connection string, the
   driver ignores any credentials that you specify in environment variables.

.. tabs::

   .. tab:: Connection String
      :tabid: connection string

      .. tip::

         The following examples set the appropriate credentials by using the ``SetAuth()`` 
         method. You can also specify these credentials by using the ``ApplyURI()`` 
         method. If you use the ``ApplyURI()`` method you must URL encode the username 
         and password to ensure they are correctly parsed.
   
      To connect to your MongoDB instance using your AWS IAM credentials, perform the
      following steps:

      - Assign the ``AuthMechanism`` option the value ``MONGODB-AWS``
      - Assign the ``Username`` option the value of your ``accessKeyID``
      - Assign the ``Password`` option the value of your ``secretAccessKey``

      .. literalinclude:: /includes/fundamentals/code-snippets/authentication/aws-connection-string.go
         :language: go

      If you must specify an AWS session token, use the temporary
      credentials returned from an `assume role request <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`__.
      
      To use temporary credentials, assign the value of your ``sessionToken`` to 
      the ``AuthMechanismProperties`` option:

      .. literalinclude:: /includes/fundamentals/code-snippets/authentication/aws-connection-string-session-token.go
         :language: go

   .. tab:: Environment Variables
      :tabid: environment variables

      To authenticate to your MongoDB instance using AWS credentials stored in
      environment variables, use a shell to set the variables as follows:

      .. code-block:: bash

         export AWS_ACCESS_KEY_ID=<awsKeyId>
         export AWS_SECRET_ACCESS_KEY=<awsSecretKey>
         export AWS_SESSION_TOKEN=<awsSessionToken>

      .. note::

         If you don't require an AWS session token for the role you're
         authenticating with, omit the line containing ``AWS_SESSION_TOKEN``.

      After you've set the preceding environment variables, specify the ``MONGODB-AWS``
      authentication mechanism as shown in the following example:

      .. literalinclude:: /includes/fundamentals/code-snippets/authentication/aws-environment-variables.go
         :language: go

   .. tab:: Web Identity Token File
      :tabid: web-identity-token-file

      You can use the OpenID Connect (OIDC) token obtained from a web
      identity provider to authenticate to Amazon Elastic Kubernetes
      Service (EKS) or other services. To use an OIDC token, create or
      locate the file that contains your token. Then, set the following
      environment variables:

      - ``AWS_WEB_IDENTITY_TOKEN_FILE``: Set to the absolute path of the
        file that contains your OIDC token.

      - ``AWS_ROLE_ARN``: Set to the IAM role used to connect to your
        cluster. For example: ``arn:aws:iam::111122223333:role/my-role``.
     
      The following shell command sets these environment variables:      

      .. code-block:: bash

         export AWS_WEB_IDENTITY_TOKEN_FILE=<absolute path to file that contains OIDC token>
         export AWS_ROLE_ARN=<IAM role name>

      After you set the preceding environment variables, specify the ``MONGODB-AWS``
      authentication mechanism as shown in the following example:

      .. literalinclude:: /includes/fundamentals/code-snippets/authentication/aws-environment-variables.go
         :language: go

.. _golang-x509:

``X.509``
~~~~~~~~~

The ``X.509`` authentication mechanism uses
:wikipedia:`TLS <Transport_Layer_Security>` with X.509 certificates to
authenticate your user, identified by the relative distinguished names
(RDNs) of your client certificate. When you specify the ``X.509``
authentication mechanism, the server authenticates the connection using
the paths of the following files:

- ``tlsCAFile`` which contains either a single or a bundle of certificate authorities to trust when making a TLS connection
- ``tlsCertificateKeyFile`` which references the path to the client certificate file or the client private key file

To specify the ``X.509`` authentication mechanism, perform the
following:

- Assign the ``tlsCAFile`` the path to its file in the connection string
- Assign the ``tlsCertificateKeyFile`` the path to its file in the connection string
- Assign the ``AuthMechanism`` option the value ``"MONGODB-X509"``

.. code-block:: go
   :emphasize-lines: 4-5, 7

   caFilePath := "<cafile_path>"
   certificateKeyFilePath := "<client_certificate_path>"

   uri := "mongodb://<hostname>:<port>/?tlsCAFile=%s&tlsCertificateKeyFile=%s"
   uri = fmt.Sprintf(uri, caFilePath, certificateKeyFilePath)
   credential := options.Credential{
      AuthMechanism: "MONGODB-X509",
   }

   clientOpts := options.Client().ApplyURI(uri).SetAuth(credential)

..
  To learn more about configuring your application to use
  certificates as well as TLS/SSL options, see
  :ref:`golang-tls-ssl-guide`.
