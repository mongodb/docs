.. _java-quick-reference:

===============
Quick Reference
===============

.. default-domain:: mongodb

This page shows the driver syntax for several MongoDB commands and links to
their related reference and API documentation.

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Command
     - Syntax

   * - | **Find a Document**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#find()>`__
       | :ref:`Usage Example <java-usage-findone>`
       | :ref:`Fundamentals <java-fundamentals-retrieve-data>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             coll.find(Filters.eq("title", "Hamlet")).first();

          .. output::
             :language: json
             :visible: false

             { title: 'Hamlet', type: 'movie', ... }

   * - | **Find Multiple Documents**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#find(org.bson.conversions.Bson)>`__
       | :ref:`Usage Example <java-usage-find>`
       | :ref:`Fundamentals <java-fundamentals-retrieve-data>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             coll.find(Filters.eq("year", 2005))

          .. output::
             :language: json
             :visible: false

             [
               { title: 'Christmas in Boston', year: 2005, ... },
               { title: 'Chicken Little', year: 2005, ... },
               ...
             ]

   * - | **Insert a Document**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#insertOne(TDocument)>`__
       | :ref:`Usage Example <java-usage-insertone>`
       | :ref:`Fundamentals <java-fundamentals-insert>`

     - .. code-block:: java
          :copyable: true

          coll.insertOne(new Document("title", "Jackie Robinson"));

   * - | **Insert Multiple Documents**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#insertMany(java.util.List)>`__
       | :ref:`Usage Example <java-usage-insertmany>`
       | :ref:`Fundamentals <java-fundamentals-insert>`

     - .. code-block:: java
          :copyable: true

          coll.insertMany(
              Arrays.asList(
                      new Document("title", "Dangal").append("rating", "Not Rated"),
                      new Document("title", "The Boss Baby").append("rating", "PG")));

   * - | **Update a Document**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateOne(org.bson.conversions.Bson,org.bson.conversions.Bson)>`__
       | :ref:`Usage Example <java-usage-updateone>`
       | :ref:`Fundamentals <java-fundamentals-update>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             coll.updateOne(
                     Filters.eq("title", "Amadeus"),
                     Updates.set("imdb.rating", 9.5));
                
          .. output::
             :language: json
             :visible: false

             { title: 'Amadeus', imdb: { rating: 9.5, ... } }

   * - | **Update Multiple Documents**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateMany(org.bson.conversions.Bson,org.bson.conversions.Bson)>`__
       | :ref:`Usage Example <java-usage-updatemany>`
       | :ref:`Fundamentals <java-fundamentals-update>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             coll.updateMany(
                     Filters.eq("year", 2001),
                     Updates.inc("imdb.votes", 100));

          .. output::
             :language: json
             :visible: false

             [
               { title: 'A Beautiful Mind', year: 2001, imdb: { votes: 826257, ... },
               { title: 'Shaolin Soccer', year: 2001, imdb: { votes: 65442, ... },
               ...
             ]

   * - | **Update an Array in a Document**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateOne(org.bson.conversions.Bson,org.bson.conversions.Bson)>`__
       | :ref:`Fundamentals <java-fundamentals-update-array>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             coll.updateOne(
                     Filters.eq("title", "Cosmos"),
                     Updates.push("genres", "Educational"));
                
          .. output::
             :language: json
             :visible: false

             { title: 'Cosmos', genres: [ 'Documentary', 'Educational' ], ...}

   * - | **Replace a Document**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#replaceOne(org.bson.conversions.Bson,TDocument)>`__
       | :ref:`Usage Example <java-usage-replaceone>`
       | :ref:`Fundamentals <replace-operation>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             coll.replaceOne(
                     Filters.and(Filters.eq("name", "Deli Llama"), Filters.eq("address", "2 Nassau St")),
                     new Document("name", "Lord of the Wings").append("zipcode", 10001));

          .. output::
             :language: json
             :visible: false

             { name: 'Lord of the Wings', zipcode: 10001 }

   * - | **Delete a Document**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#deleteOne(org.bson.conversions.Bson)>`__
       | :ref:`Usage Example <java-usage-deleteone>`
       | :ref:`Fundamentals <java-fundamentals-delete>`

     - .. code-block:: java
          :copyable: true

          coll.deleteOne(Filters.eq("title", "Congo"));

   * - | **Delete Multiple Documents**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#deleteMany(org.bson.conversions.Bson)>`__ 
       | :ref:`Usage Example <java-usage-deletemany>`
       | :ref:`Fundamentals <java-fundamentals-delete>`

     - .. code-block:: java
          :copyable: true
 
          coll.deleteMany(Filters.regex("title", "^Shark.*"));

   * - | **Bulk Write**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#bulkWrite(java.util.List)>`__
       | :ref:`Usage Example <java-usage-bulkwrite>`
       | :ref:`Fundamentals <java-fundamentals-bulkwrite>`

     - .. code-block:: java
          :copyable: true

          coll.bulkWrite(
                  Arrays.asList(
                         new InsertOneModel<Document>(
                                 new Document().append("title", "A New Movie").append("year", 2022)),
                         new DeleteManyModel<Document>(
                                 Filters.lt("year", 1970))));

   * - | **Watch for Changes**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#watch(java.util.List)>`__
       | :ref:`Usage Example <java-usage-watch>`
       | :ref:`Fundamentals <retrieve-watch>`

     - .. code-block:: java
          :copyable: true

          coll.watch(Arrays.asList(
                  Aggregates.match(Filters.gte("year", 2022))));

   * - | **Access Data from a Cursor Iteratively**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCursor.html>`__
       | :ref:`Fundamentals <java-fundamentals-cursor-conditional-iteration>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             MongoCursor<Document> cursor = coll.find().cursor();
             while (cursor.hasNext()) {
                 System.out.println(cursor.next().toJson());
             }

          .. output::
             :language: json
             :visible: false

             [
               { title: '2001: A Space Odyssey', ... },
               { title: 'The Sound of Music', ... },
               ...
             ]

   * - | **Access Results from a Query as an Array**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoIterable.html#into(A)>`__

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             List<Document> resultList = new ArrayList<Document>();
             coll.find().into(resultList);
        
          .. output::
             :language: json
             :visible: false

             [
               { title: '2001: A Space Odyssey', ... },
               { title: 'The Sound of Music', ... },
               ...
             ]

   * - | **Count Documents**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#countDocuments(org.bson.conversions.Bson)>`__
       | :ref:`Usage Example <java-usage-count>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java
             
             coll.countDocuments(Filters.eq("year", 2000));

          .. output::
             :language: none
             :visible: false

             618

   * - | **List the Distinct Documents or Field Values**
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#distinct(java.lang.String,java.lang.Class)>`__
       | :ref:`Usage Example <java-usage-distinct>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java
             
             coll.distinct("year", Integer.class);
             
          .. output::
             :language: none
             :visible: false

             [ 1891, 1893, 1894, 1896, 1903, ... ]

   * - | **Limit the Number of Documents Retrieved**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#limit(int)>`__
       | :ref:`Fundamentals <java-fundamentals-limit>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             coll.find().limit(2);

          .. output::
             :language: json
             :visible: false

             [
               { title: 'My Neighbor Totoro', ... },
               { title: 'Amélie', ... }
             ]

   * - | **Skip Retrieved Documents**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#skip(int)>`__
       | :ref:`Fundamentals <java-fundamentals-skip>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             coll.find(Filters.regex("title", "^Rocky")).skip(2);

          .. output::
             :language: json
             :visible: false

             [
               { title: 'Rocky III', ... },
               { title: 'Rocky IV', ... },
               { title: 'Rocky V', ... }
             ]

   * - | **Sort the Documents When Retrieving Them**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#sort(org.bson.conversions.Bson)>`__
       | :ref:`Fundamentals <java-fundamentals-sort>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             coll.find().sort(Sorts.ascending("year"));

          .. output::
             :language: json
             :visible: false

             [
               { title: 'Newark Athlete', year: 1891, ... },
               { title: 'Blacksmith Scene', year: 1893, ...},
               { title: 'Dickson Experimental Sound Film', year: 1894},
               ...
             ]

   * - | **Project Document Fields When Retrieving Them**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#projection(org.bson.conversions.Bson)>`__
       | :ref:`Usage Example <java-usage-find>`
       | :ref:`Fundamentals <java-fundamentals-project>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             coll.find().projection(Projections.fields(
                    Projections.excludeId(),
                    Projections.include("year", "imdb")));

          .. output::
             :language: json
             :visible: false

             [
               { year: 2012, imdb: { rating: 5.8, votes: 230, id: 8256 }},
               { year: 1985, imdb: { rating: 7.0, votes: 447, id: 1654 }},
               ...
             ]

   * - | **Create an Index**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#createIndex(org.bson.conversions.Bson)>`__
       | :ref:`Fundamentals <java-fundamentals-indexes>`

     - .. code-block:: java
          :copyable: true

          coll.createIndex(
                  Indexes.compoundIndex(
                          Indexes.ascending("title"),
                          Indexes.descending("year")));

   * - | **Search Text**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#find()>`__
       | :ref:`Fundamentals <java-fundamentals-search-text>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             // only searches fields with text indexes
             coll.find(Filters.text("zissou"));

          .. output::
             :language: json
             :visible: false

             [
               { title: 'The Life Aquatic with Steve Zissou', ... }
             ]

   * - | **Install the Driver Dependency with Maven**

     - .. code-block:: xml
          :caption: pom.xml
          :copyable: true

          <dependencies>
            <dependency>
              <groupId>org.mongodb</groupId>
              <artifactId>mongodb-driver-sync</artifactId>
              <version>{+full-version+}</version>
            </dependency>
          </dependencies>

   * - | **Install the Driver Dependency with Gradle**
    
     - .. code-block:: groovy
          :caption: build.gradle
          :copyable: true

          dependencies {
            implementation 'org.mongodb:mongodb-driver-sync:{+full-version+}'
          }

