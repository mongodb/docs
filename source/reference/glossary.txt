========
Glossary
========

.. Link to other glossary terms when possible.
   Reserve the "See" text at the end of the entry to link to topics in the manual.

.. default-domain:: mongodb

.. glossary::
   :sorted:

   $cmd
      A special virtual :term:`collection` that exposes MongoDB's
      :term:`database commands <database command>`.
      To use database commands, see :ref:`issue-commands`.

   _id
      A field required in every MongoDB :term:`document`. The
      :ref:`_id <document-id-field>` field must have a unique value. You can
      think of the ``_id`` field as the document's :term:`primary key`.
      If you create a new document without an ``_id`` field, MongoDB
      automatically creates the field and assigns a unique
      BSON :term:`ObjectId`.

   accumulator
      An :term:`expression` in the :term:`aggregation framework` that
      maintains state between documents in the aggregation
      :term:`pipeline`. For a list of accumulator operations, see
      :pipeline:`$group`.

   action
      An operation the user can perform on a resource. Actions and
      :term:`resources <resource>` combine to create :term:`privileges
      <privilege>`. See :doc:`action </reference/privilege-actions>`.

   admin database
      A privileged database. Users
      must have access to the ``admin`` database to run certain
      administrative commands. For a list of administrative commands,
      see :ref:`admin-commands`.

   aggregation
      Any of a variety of operations that reduces and summarizes large
      sets of data. MongoDB's :method:`~db.collection.aggregate()` and
      :method:`~db.collection.mapReduce()` methods are two
      examples of aggregation operations. For more information, see
      :doc:`/core/aggregation`.

   aggregation framework
      The set of MongoDB operators that let you calculate aggregate
      values without having to use :term:`map-reduce`. For a list of
      operators, see :doc:`/reference/aggregation`.

   arbiter
      A member of a :term:`replica set` that exists solely to vote in
      :term:`elections <election>`. Arbiters do not replicate data. See
      :ref:`replica-set-arbiter-configuration`.

   authentication
      Verification of the user identity. See
      :doc:`/core/authentication`.

   authorization
      Provisioning of access to databases and operations. See
      :doc:`/core/authorization`.

   balancer
      An internal MongoDB process that runs in the context of a
      :term:`sharded cluster` and manages the migration of :term:`chunks
      <chunk>`. Administrators must disable the balancer for all
      maintenance operations on a sharded cluster. See
      :ref:`sharding-balancing`.

   BSON
      A serialization format used to store :term:`documents <document>` and make
      remote procedure calls in MongoDB. "BSON" is a portmanteau of the words
      "binary" and "JSON". Think of BSON as a binary representation
      of JSON (JavaScript Object Notation) documents. See
      :doc:`/reference/bson-types` and
      :doc:`/reference/mongodb-extended-json`.

   BSON types
      The set of types supported by the :term:`BSON` serialization
      format. For a list of BSON types, see :doc:`/reference/bson-types`.

   B-tree
      A data structure commonly used by database management systems to
      store indexes. MongoDB uses B-trees for its indexes.

   CAP Theorem
      Given three properties of computing systems, consistency,
      availability, and partition tolerance, a distributed computing
      system can provide any two of these features, but never all
      three.

   capped collection
      A fixed-sized :term:`collection <collection>` that automatically
      overwrites its oldest entries when it reaches its maximum size.
      The MongoDB :term:`oplog` that is used in :term:`replication` is a
      capped collection. See :doc:`/core/capped-collections`.

   checksum
      A calculated value used to ensure data integrity.
      The :term:`md5` algorithm is sometimes used as a checksum.

   chunk
      A contiguous range of :term:`shard key` values within a particular
      :term:`shard`. Chunk ranges are inclusive of the lower boundary
      and exclusive of the upper boundary. MongoDB splits chunks when
      they grow beyond the configured chunk size, which by default is
      64 megabytes. MongoDB migrates chunks when a shard contains too
      many chunks of a collection relative to other shards. See
      :ref:`sharding-data-partitioning` and :doc:`/core/sharded-cluster-mechanics`.

   client
      The application layer that uses a database for data persistence
      and storage. :term:`Drivers <driver>` provide the interface
      level between the application layer and the database server.

   cluster
      See :term:`sharded cluster`.

   collection
      A grouping of MongoDB :term:`documents <document>`. A collection
      is the equivalent of an :term:`RDBMS` table. A collection exists
      within a single :term:`database`. Collections do not enforce a
      schema. Documents within a collection can have different fields.
      Typically, all documents in a collection have a similar or related
      purpose. See :ref:`faq-dev-namespace`.

   collection scan
      Collection scans are a query execution strategy where MongoDB must
      inspect every document in a collection to see if it matches the
      query criteria. These queries are very inefficient and do not use
      indexes. See :doc:`/core/query-optimization` for details about
      query execution strategies.

   compound index
      An :term:`index` consisting of two or more keys. See
      :ref:`index-type-compound`.

   config database
      An internal database that holds the metadata associated with a
      :term:`sharded cluster`. Applications and administrators should
      not modify the ``config`` database in the course of normal
      operation. See :doc:`/reference/config-database`.

   config server
      A :program:`mongod` instance that stores all the metadata
      associated with a :term:`sharded cluster`. A production sharded
      cluster requires three config servers, each on a separate machine.
      See :ref:`sharding-config-server`.

   control script
      A simple shell script, typically located in the ``/etc/rc.d`` or
      ``/etc/init.d`` directory, and used by the system's initialization
      process to start, restart or stop a :term:`daemon` process.

   CRUD
      An acronym for the fundamental operations of a database: Create,
      Read, Update, and Delete. See :doc:`/crud`.

   CSV
      A text-based data format consisting of comma-separated values.
      This format is commonly used to exchange data between relational
      databases since the format is well-suited to tabular data. You can
      import CSV files using :program:`mongoimport`.

   cursor
      A pointer to the result set of a :term:`query`. Clients can
      iterate through a cursor to retrieve results. By default, cursors
      timeout after 10 minutes of inactivity. See
      :ref:`read-operations-cursors`.

   daemon
      The conventional name for a background, non-interactive
      process.

   data directory
      The file-system location where the :program:`mongod` stores data
      files. The :setting:`~storage.dbPath` option specifies the data directory.

   data-center awareness
      A property that allows clients to address members in a system
      based on their locations. :term:`Replica sets <replica set>`
      implement data-center awareness using :term:`tagging <tag>`. See
      :doc:`/data-center-awareness`.

   database
      A physical container for :term:`collections <collection>`.
      Each database gets its own set of files on the file
      system. A single MongoDB server typically has multiple
      databases.

   database command
      A MongoDB operation, other than an insert, update, remove, or
      query. For a list of database commands, see
      :doc:`/reference/command`. To use database commands, see
      :ref:`issue-commands`.

   database profiler
      A tool that, when enabled, keeps a record on all long-running
      operations in a database's ``system.profile`` collection. The
      profiler is most often used to diagnose slow queries. See
      :ref:`database-profiling`.

   datum
      A set of values used to define measurements on the earth. MongoDB
      uses the :term:`WGS84` datum in certain :term:`geospatial`
      calculations. See :doc:`/applications/geospatial-indexes`.

   dbpath
      The location of MongoDB's data file storage. See
      :setting:`~storage.dbPath`.

   delayed member
      A :term:`replica set` member that cannot become primary and
      applies operations at a specified delay. The delay is useful for
      protecting data from human error (i.e. unintentionally deleted
      databases) or updates that have unforeseen effects on the
      production database. See :ref:`replica-set-delayed-members`.

   diagnostic log
      A verbose log of operations stored in the :term:`dbpath`.
      See the :option:`--diaglog <mongod --diaglog>` option.

   document
      A record in a MongoDB :term:`collection` and the basic unit of
      data in MongoDB. Documents are analogous to :term:`JSON` objects
      but exist in the database in a more type-rich format known as
      :term:`BSON`. See :doc:`/core/document`.

   dot notation
      MongoDB uses the dot notation to access the elements of an array
      and to access the fields of a subdocument. See
      :ref:`document-dot-notation`.

   draining
      The process of removing or "shedding" :term:`chunks <chunk>` from
      one :term:`shard` to another. Administrators must drain shards
      before removing them from the cluster. See
      :doc:`/tutorial/remove-shards-from-cluster`.

   driver
      A client library for interacting with MongoDB in a particular
      language. See :doc:`/applications/drivers`.

   election
      The process by which members of a :term:`replica set` select a
      :term:`primary` on startup and in the event of a failure. See
      :ref:`replica-set-elections`.

   eventual consistency
      A property of a distributed system that allows changes to the
      system to propagate gradually. In a database system, this means
      that readable members are not required to reflect the latest
      writes at all times. In MongoDB, reads to a primary have
      :term:`strict consistency`; reads to secondaries have *eventual
      consistency*.

   expression
      In the context of :term:`aggregation framework`, expressions are
      the stateless transformations that operate on the data that passes
      through a :term:`pipeline`. See :doc:`/core/aggregation`.

   failover
      The process that allows a :term:`secondary` member of a
      :term:`replica set` to become :term:`primary` in the event of a
      failure. See :ref:`replica-set-failover`.

   field
      A name-value pair in a :term:`document <document>`. A document has
      zero or more fields. Fields are analogous to columns in relational
      databases. See :ref:`document-structure`.

   firewall
      A system level networking filter that restricts access based on,
      among other things, IP address. Firewalls form a part of an
      effective network security strategy. See
      :ref:`security-firewalls`.

   fsync
      A system call that flushes all dirty, in-memory pages to
      disk. MongoDB calls ``fsync()`` on its database files at least
      every 60 seconds. See :dbcommand:`fsync`.

   geohash
      A geohash value is a binary representation of the location on a
      coordinate grid. See :ref:`geospatial-indexes-geohash`.

   GeoJSON
      A :term:`geospatial` data interchange format based on JavaScript
      Object Notation (:term:`JSON`). GeoJSON is used in
      :doc:`geospatial queries </applications/geospatial-indexes>`. For
      supported GeoJSON objects, see :ref:`geo-overview-location-data`.
      For the GeoJSON format specification, see
      `<http://geojson.org/geojson-spec.html>`_.

   geospatial
      Data that relates to geographical location. In MongoDB, you may
      store, index, and query data according to geographical parameters.
      See :doc:`/applications/geospatial-indexes`.

   GridFS
      A convention for storing large files in a MongoDB database. All of
      the official MongoDB drivers support this convention, as does the
      :program:`mongofiles` program. See :doc:`/core/gridfs` and
      :doc:`/reference/gridfs`.

   hashed shard key
      A special type of :term:`shard key` that uses a hash of the value
      in the shard key field to distribute documents among members of
      the :term:`sharded cluster`. See :ref:`index-type-hashed`.

   haystack index
      A :term:`geospatial` index that enhances searches by creating
      "buckets" of objects grouped by a second criterion. See
      :doc:`/core/geohaystack`.

   hidden member
      A :term:`replica set` member that cannot become :term:`primary`
      and are invisible to client applications. See
      :ref:`replica-set-hidden-members`.

   idempotent
      The quality of an operation to produce the same result given the
      same input, whether run once or run multiple times.

   index
      A data structure that optimizes queries. See :doc:`/core/indexes`.

   initial sync
      The :term:`replica set` operation that replicates data from an
      existing replica set member to a new or restored replica set
      member. See :ref:`replica-set-initial-sync`.

   IPv6
      A revision to the IP (Internet Protocol) standard that
      provides a significantly larger address space to more effectively
      support the number of hosts on the contemporary Internet.

   ISODate
     The international date format used by :program:`mongo`
     to display dates. The format is: ``YYYY-MM-DD HH:MM.SS.millis``.

   interrupt point
     A point in an operation's lifecycle when it can
     safely abort. MongoDB only terminates an operation
     at designated interrupt points. See
     :doc:`/tutorial/terminate-running-operations`.

   JavaScript
      A popular scripting language originally designed for web
      browsers. The MongoDB shell and certain server-side functions use
      a JavaScript interpreter. See
      :doc:`/core/server-side-javascript` for more information.

   journal
      A sequential, binary transaction log used to bring the database
      into a valid state in the event of a hard shutdown.
      Journaling writes data first to the journal and then to the core
      data files. MongoDB enables journaling by default for 64-bit
      builds of MongoDB version 2.0 and newer. Journal files are
      pre-allocated and exist as files in the :term:`data directory`.
      See :doc:`/core/journaling/`.

   JSON
      JavaScript Object Notation. A human-readable, plain text format
      for expressing structured data with support in many programming
      languages. For more information, see `<http://www.json.org>`_.
      Certain MongoDB tools render an approximation of MongoDB
      :term:`BSON` documents in JSON format. See
      :doc:`/reference/mongodb-extended-json`.

   JSON document
      A :term:`JSON` document is a collection of fields and values in a
      structured format. For sample JSON documents, see
      `<http://json.org/example.html>`_.

   JSONP
      :term:`JSON` with Padding. Refers to a method of injecting JSON
      into applications. **Presents potential security concerns**.

   least privilege
      An authorization policy that gives a user only the amount of access
      that is essential to that user's work and no more.

   legacy coordinate pairs
      The format used for :term:`geospatial` data prior to MongoDB
      version 2.4. This format stores geospatial data as points on a
      planar coordinate system (e.g. ``[ x, y ]``). See
      :doc:`/applications/geospatial-indexes`.

   LineString
      A LineString is defined by an array of two or more positions. A
      closed LineString with four or more positions is called a
      LinearRing, as described in the GeoJSON LineString specification:
      `<http://geojson.org/geojson-spec.html#linestring>`_. To use a
      LineString in MongoDB, see
      :ref:`geospatial-indexes-store-geojson`.

   lock
      MongoDB uses locks to ensure :doc:`concurrency </faq/concurrency>`.
      MongoDB uses both :term:`read locks <read lock>` and :term:`write
      locks <write lock>`. For more information, see
      :ref:`faq-concurrency-locking`.

   LVM
      Logical volume manager. LVM is a program that abstracts disk
      images from physical devices and provides a number of raw disk
      manipulation and snapshot capabilities useful for system
      management. For information on LVM and MongoDB, see
      :ref:`lvm-backup-and-restore`.

   mapping type
      A Structure in programming languages that associate keys with
      values, where keys may nest other pairs of keys and values
      (e.g. dictionaries, hashes, maps, and associative arrays).
      The properties of these structures depend on the language
      specification and implementation. Generally the order of keys in
      mapping types is arbitrary and not guaranteed.

   map-reduce
      A data processing and aggregation paradigm consisting of a "map"
      phase that selects data and a "reduce" phase that transforms the
      data. In MongoDB, you can run arbitrary aggregations over data
      using map-reduce. For map-reduce implementation, see
      :doc:`/core/map-reduce`. For all approaches to aggregation,
      see :doc:`/core/aggregation`.

   master
      The database that receives all writes in a conventional
      master-:term:`slave` replication. In MongoDB, :term:`replica
      sets <replica set>` replace master-slave replication for most use
      cases. For more information on master-slave replication, see
      :doc:`/core/master-slave`.

   md5
      A hashing algorithm used to efficiently provide
      reproducible unique strings to identify and :term:`checksum`
      data. MongoDB uses md5 to identify chunks of data for
      :term:`GridFS`. See :doc:`/reference/command/filemd5`.

   MIB
      Management Information Base. MongoDB uses MIB files to define the type of
      data tracked by SNMP in the MongoDB Enterprise edition.

   MIME
      Multipurpose Internet Mail Extensions. A standard set of type and
      encoding definitions used to declare the encoding and type of data
      in multiple data storage, transmission, and email contexts. The
      :program:`mongofiles` tool provides an option to specify a MIME
      type to describe a file inserted into :term:`GridFS` storage.

   mongo
      The MongoDB shell. The :program:`mongo` process starts the MongoDB
      shell as a daemon connected to either a :program:`mongod` or
      :program:`mongos` instance. The shell has a JavaScript interface.
      See :doc:`/reference/program/mongo` and :doc:`/reference/method`.

   mongod
      The MongoDB database server. The :program:`mongod` process starts
      the MongoDB server as a daemon. The MongoDB server manages data
      requests and formats and manages background operations. See
      :doc:`/reference/program/mongod`.

   MongoDB
      An open-source document-based database system. "MongoDB" derives
      from the word "humongous" because of the database's ability to
      scale up with ease and hold very large amounts of data. MongoDB
      stores :term:`documents <document>` in :term:`collections
      <collection>` within databases.

   MongoDB Enterprise
      A commercial edition of MongoDB that includes additional features. For
      more information, see `MongoDB Subscriptions
      <https://www.mongodb.com/products/mongodb-subscriptions>`_.

   mongos
      The routing and load balancing process that acts an interface
      between an application and a MongoDB :term:`sharded cluster`. See
      :doc:`/reference/program/mongos`.

   namespace
      The canonical name for a collection or index in MongoDB.
      The namespace is a combination of the database name and
      the name of the collection or index, like so:
      ``[database-name].[collection-or-index-name]``. All documents
      belong to a namespace. See :ref:`faq-dev-namespace`.

   natural order
      The order that a database stores documents on disk. Typically,
      the order of documents on disks reflects insertion order, except
      when a document moves internally because an update operation
      increases its size. In :term:`capped collections <capped
      collection>`, insertion order and natural order are identical
      because documents do not move internally. MongoDB returns
      documents in forward natural order for a
      :method:`~db.collection.find()` query with no parameters.
      MongoDB returns documents in reverse natural order for a
      :method:`~db.collection.find()` query :method:`sorted
      <cursor.sort()>` with a parameter of ``$natural:-1``. See
      :operator:`$natural`.

   ObjectId
      A special 12-byte :term:`BSON` type that guarantees uniqueness
      within the :term:`collection`. The ObjectId is generated based on
      timestamp, machine ID, process ID, and a process-local incremental
      counter. MongoDB uses ObjectId values as the default values for
      :term:`_id` fields.

   operator
      A keyword beginning with a ``$`` used to express an update,
      complex query, or data transformation. For example, ``$gt`` is the
      query language's "greater than" operator. For available operators,
      see :doc:`/reference/operator`.

   oplog
      A :term:`capped collection` that stores an ordered history of
      logical writes to a MongoDB database. The oplog is the
      basic mechanism enabling :term:`replication` in MongoDB.
      See :doc:`/core/replica-set-oplog`.

   ordered query plan
      A query plan that returns results in the order consistent with the
      :method:`~cursor.sort()` order. See
      :ref:`read-operations-query-optimization`.

   orphaned document
      In a sharded cluster, orphaned documents are those documents on a
      shard that also exist in chunks on other shards as a result of
      failed migrations or incomplete migration cleanup due to abnormal
      shutdown. Delete orphaned documents using
      :dbcommand:`cleanupOrphaned` to reclaim disk space and reduce
      confusion.

   padding
      The extra space allocated to document on the disk to prevent
      moving a document when it grows as the result of
      :method:`~db.collection.update()`
      operations. See :ref:`write-operations-padding-factor`.

   padding factor
      An automatically-calibrated constant used to determine how much
      extra space MongoDB should allocate per document container on disk.
      A padding factor of 1 means that MongoDB will allocate only the
      amount of space needed for the document. A padding factor of 2
      means that MongoDB will allocate twice the amount of space
      required by the document. See
      :ref:`write-operations-padding-factor`.

   page fault
      The event that occurs when a process requests stored data
      (i.e. a page) from memory that the operating system has moved to
      disk. See :ref:`faq-storage-page-faults`.

   partition
      A distributed system architecture that splits data into ranges.
      :term:`Sharding` uses partitioning. See
      :ref:`sharding-data-partitioning`.

   passive member
      A member of a :term:`replica set` that cannot become primary
      because its :data:`~local.system.replset.members[n].priority` is
      ``0``. See :doc:`/core/replica-set-priority-0-member`.

   pcap
      A packet-capture format used by :program:`mongosniff` to record
      packets captured from network interfaces and display them as
      human-readable MongoDB operations. See :ref:`mongosniff-options`.

   PID
      A process identifier. UNIX-like systems assign a unique-integer
      PID to each running process. You can use a PID to inspect a
      running process and send signals to it. See
      :ref:`proc-file-system`.

   pipe
      A communication channel in UNIX-like systems allowing independent
      processes to send and receive data. In the UNIX shell, piped
      operations allow users to direct the output of one command into
      the input of another.

   pipeline
      A series of operations in an :term:`aggregation` process.
      See :doc:`/core/aggregation`.

   Point
      A single coordinate pair as described in the GeoJSON Point
      specification: `<http://geojson.org/geojson-spec.html#point>`_. To
      use a Point in MongoDB, see
      :ref:`geospatial-indexes-store-geojson`.

   Polygon
      An array of :term:`LinearRing <LineString>` coordinate arrays, as
      described in the GeoJSON Polygon specification:
      `<http://geojson.org/geojson-spec.html#polygon>`_. For Polygons
      with multiple rings, the first must be the exterior ring and
      any others must be interior rings or holes.

      MongoDB does not permit the exterior ring to self-intersect.
      Interior rings must be fully contained within the outer loop and
      cannot intersect or overlap with each other. See
      :ref:`geospatial-indexes-store-geojson`.

   powerOf2Sizes
      A per-collection setting that changes and normalizes the way
      MongoDB allocates space for each :term:`document`, in an effort to
      maximize storage reuse and to reduce fragmentation. This is the
      default for :doc:`TTL Collections </tutorial/expire-data>`. See
      :doc:`/reference/command/collMod` and
      :collflag:`usePowerOf2Sizes`.

   pre-splitting
      An operation performed before inserting data that divides the
      range of possible shard key values into chunks to facilitate easy
      insertion and high write throughput. In some cases pre-splitting
      expedites the initial distribution of documents in :term:`sharded
      cluster` by manually dividing the collection rather than waiting
      for the MongoDB :term:`balancer` to do so. See
      :doc:`/tutorial/create-chunks-in-sharded-cluster`.

   primary
      In a :term:`replica set`, the primary member is the current
      :term:`master` instance, which receives all write operations.
      See :ref:`replica-set-primary-member`.

   primary key
      A record's unique immutable identifier. In an :term:`RDBMS`, the primary
      key is typically an integer stored in each row's ``id`` field.
      In MongoDB, the :term:`_id` field holds a document's primary
      key which is usually a BSON :term:`ObjectId`.

   primary shard
      The :term:`shard` that holds all the un-sharded collections. See
      :ref:`primary-shard`.

   priority
      A configurable value that helps determine which members in
      a :term:`replica set` are most likely to become :term:`primary`.
      See :data:`~local.system.replset.members[n].priority`.

   privilege
      A combination of specified :term:`resource <resource>` and
      :term:`actions <action>` permitted on the resource. See
      :ref:`privilege <privileges>`.

   projection
      A document given to a :term:`query` that specifies which fields
      MongoDB returns in the result set. See :ref:`projection`. For a
      list of projection operators, see
      :doc:`/reference/operator/projection`.

   query
      A read request. MongoDB uses a :term:`JSON`-like query language
      that includes a variety of :term:`query operators <operator>` with
      names that begin with a ``$`` character. In the :program:`mongo`
      shell, you can issue queries using the
      :method:`~db.collection.find()` and
      :method:`~db.collection.findOne()` methods. See
      :ref:`read-operations-queries`.

   query optimizer
      A process that generates query plans. For each query, the
      optimizer generates a plan that matches the query to the index
      that will return results as efficiently as possible. The
      optimizer reuses the query plan each time the query runs. If a
      collection changes significantly, the optimizer creates a new
      query plan. See :ref:`read-operations-query-optimization`.

   query shape
      A combination of query predicate, sort, and projection
      specifications.

      For the query predicate, only the structure of the predicate,
      including the field names, are significant; the values in the
      query predicate are insignificant. As such, a query predicate ``{
      type: 'food' }`` is equivalent to the query predicate ``{ type:
      'utensil' }`` for a query shape.

   read preference
      A setting that determines how clients direct read operations. Read
      preference affects all replica sets, including shards. By default,
      MongoDB directs reads to :term:`primaries <primary>` for
      :term:`strict consistency`. However, you may also direct reads to
      secondaries for :term:`eventually consistent <eventual
      consistency>` reads. See :doc:`Read Preference
      </core/read-preference>`.

   read lock
      In the context of a reader-writer lock, a lock that while held
      allows concurrent readers but no writers. See
      :ref:`faq-concurrency-locking`.

   RDBMS
      Relational Database Management System. A database management
      system based on the relational model, typically using
      :term:`SQL` as the query language.

   record size
      The space allocated for a document including the padding. For more
      information on padding, see :ref:`write-operations-padding-factor`
      and :doc:`/reference/command/compact`.

   recovering
      A :term:`replica set` member status indicating that a member
      is not ready to begin normal activities of a secondary or primary.
      Recovering members are unavailable for reads.

   replica pairs
      The precursor to the MongoDB :term:`replica sets <replica set>`.

      .. deprecated:: 1.6

   replica set
      A cluster of MongoDB servers that implements master-slave
      replication and automated failover. MongoDB's recommended
      replication strategy. See :doc:`/replication`.

   replication
      A feature allowing multiple database servers to share the same
      data, thereby ensuring redundancy and facilitating load balancing.
      See :doc:`/replication`.

   replication lag
      The length of time between the last operation in the
      :term:`primary's <primary>` :term:`oplog` and the last operation
      applied to a particular :term:`secondary`. In general, you want to
      keep replication lag as small as possible. See :ref:`Replication
      Lag <replica-set-replication-lag>`.

   resident memory
      The subset of an application's memory currently stored in
      physical RAM. Resident memory is a subset of :term:`virtual memory`,
      which includes memory mapped to physical RAM and to disk.

   resource
     A database, collection, set of collections, or cluster. A
     :term:`privilege` permits :term:`actions <action>` on a specified
     resource. See :ref:`resource <resource-document>`.

   REST
     An API design pattern centered around the idea of resources and the
     :term:`CRUD` operations that apply to them. Typically REST is
     implemented over HTTP. MongoDB provides a simple HTTP REST
     interface that allows HTTP clients to run commands against the
     server. See :ref:`rest-interface` and :ref:`rest-api`.

   role
     A set of privileges that permit :term:`actions <action>` on
     specified :term:`resources <resource>`. Roles assigned to a user
     determine the user's access to resources and operations. See
     :doc:`/core/security-introduction`.

   rollback
      A process that reverts writes operations to ensure the consistency
      of all replica set members. See :ref:`replica-set-rollback`.

   secondary
      A :term:`replica set` member that replicates the contents of the
      master database. Secondary members may handle read requests, but
      only the :term:`primary` members can handle write operations. See
      :ref:`replica-set-secondary-members`.

   secondary index
      A database :term:`index` that improves query performance by
      minimizing the amount of work that the query engine must perform
      to fulfill a query. See :doc:`/indexes`.

   set name
      The arbitrary name given to a replica set. All members of a
      replica set must have the same name specified with the
      :setting:`~replication.replSetName` setting or the :option:`--replSet <mongod --replSet>` option.

   shard
      A single :program:`mongod` instance or :term:`replica set` that
      stores some portion of a :term:`sharded cluster's <sharded
      cluster>` total data set. In production, all shards should be
      replica sets. See :doc:`/core/sharded-cluster-shards`.

   shard key
      The field MongoDB uses to distribute documents among members of a
      :term:`sharded cluster`. See :ref:`shard-key`.

   sharded cluster
      The set of nodes comprising a :term:`sharded <sharding>` MongoDB
      deployment. A sharded cluster consists of three config processes,
      one or more replica sets, and one or more :program:`mongos`
      routing processes. See :doc:`/core/sharded-cluster-components`.

   sharding
      A database architecture that partitions data by key ranges and
      distributes the data among two or more database instances.
      Sharding enables horizontal scaling. See :doc:`/sharding`.

   shell helper
      A method in the ``mongo`` shell that provides a more concise
      syntax for a :doc:`database command <command>`. Shell helpers
      improve the general interactive experience. See
      :doc:`/reference/method`.

   single-master replication
      A :term:`replication` topology where only a single database
      instance accepts writes. Single-master replication ensures
      consistency and is the replication topology employed by MongoDB.
      See :doc:`/core/replica-set-primary`.

   slave
      A read-only database that replicates operations from a
      :term:`master` database in conventional master/slave replication.
      In MongoDB, :term:`replica sets <replica set>` replace
      master/slave replication for most use cases. However, for
      information on master/slave replication, see
      :doc:`/core/master-slave`.

   split
      The division between :term:`chunks <chunk>` in a :term:`sharded
      cluster`. See :doc:`/core/sharding-chunk-splitting`.

   SQL
      Structured Query Language (SQL) is a common special-purpose
      programming language used for interaction with a relational
      database, including access control, insertions,
      updates, queries, and deletions. There are some similar
      elements in the basic SQL syntax supported by different database
      vendors, but most implementations have their own dialects, data
      types, and interpretations of proposed SQL standards. Complex
      SQL is generally not directly portable between major
      :term:`RDBMS` products. ``SQL`` is often used as
      metonym for relational databases.

   SSD
      Solid State Disk. A high-performance disk drive that uses solid
      state electronics for persistence, as opposed to the rotating platters
      and movable read/write heads used by traditional mechanical hard drives.

   standalone
      An instance of :program:`mongod` that is running as a single
      server and not as part of a :term:`replica set`. To convert a
      standalone into a replica set, see
      :doc:`/tutorial/convert-standalone-to-replica-set`.

   strict consistency
      A property of a distributed system requiring that all members
      always reflect the latest changes to the system. In a database
      system, this means that any system that can provide data must
      reflect the latest writes at all times. In MongoDB, reads from a
      primary have :term:`strict consistency`; reads from secondary
      members have :term:`eventual consistency`.

   stale
      Refers to the amount of time a :term:`secondary` member of a
      :term:`replica set` trails behind the current state of the
      :term:`primary's <primary>`\ :term:`oplog`. If a secondary
      becomes too stale, it can no longer use replication to catch up
      to the current state of the primary. See
      :doc:`/core/replica-set-oplog` and :doc:`/core/replica-set-sync`
      for more information.

   sync
      The :term:`replica set` operation where members replicate data
      from the :term:`primary`. Sync first occurs when MongoDB creates
      or restores a member, which is called :term:`initial sync`. Sync
      then occurs continually to keep the member updated with changes to
      the replica set's data. See :doc:`/core/replica-set-sync`.

   syslog
      On UNIX-like systems, a logging process that provides a uniform
      standard for servers and processes to submit logging information.
      MongoDB provides an option to send output to the host’s syslog
      system. See :setting:`~systemLog.syslogFacility`.

   tag
     A label applied to a replica set member or shard and used by
     clients to issue data-center-aware operations. For more information
     on using tags with replica sets and with shards, see the following
     sections of this manual: :ref:`replica-set-read-preference-tag-sets`
     and :ref:`shards-tag-sets`.

   TSV
      A text-based data format consisting of tab-separated values.
      This format is commonly used to exchange data between relational
      databases, since the format is well-suited to tabular data. You can
      import TSV files using :program:`mongoimport`.

   TTL
      Stands for "time to live" and represents an expiration time or
      period for a given piece of information to remain in a cache or
      other temporary storage before the system deletes it or ages it
      out. MongoDB has a TTL collection feature. See
      :doc:`/tutorial/expire-data`.

   unique index
      An index that enforces uniqueness for a particular field across
      a single collection. See :ref:`index-type-unique`.

   unordered query plan
      A query plan that returns results in an order inconsistent with the
      :method:`~cursor.sort()` order.
      See :ref:`read-operations-query-optimization`.

   upsert
      An operation that will either update the first document matched by
      a query or insert a new document if none matches. The new document
      will have the fields implied by the operation. You perform upserts
      with the :method:`~db.collection.update()` operation. See
      :ref:`upsert-parameter`.

   virtual memory
      An application's working memory, typically residing on both
      disk an in physical RAM.

   WGS84
      The default :term:`datum` MongoDB uses to calculate geometry over
      an Earth-like sphere. MongoDB uses the WGS84 datum for
      :term:`geospatial` queries on :term:`GeoJSON` objects. See
      the "EPSG:4326: WGS 84" specification:
      `<http://spatialreference.org/ref/epsg/4326/>`_.

   working set
      The data that MongoDB uses most often. This data is preferably
      held in RAM, solid-state drive (SSD), or other fast media. See
      :ref:`faq-working-set`.

   write concern
      Specifies whether a write operation has succeeded. Write concern
      allows your application to detect insertion errors or unavailable
      :program:`mongod` instances. For :term:`replica sets <replica
      set>`, you can configure write concern to confirm replication to a
      specified number of members. See :doc:`/core/write-concern`.

   write lock
      A lock on the database for a given writer. When a process writes
      to the database, it takes an exclusive write lock to prevent other
      processes from writing or reading. For more information on locks,
      see :doc:`/faq/concurrency`.

   writeBacks
      The process within the sharding system that ensures that writes
      issued to a :term:`shard` that *is not* responsible for the
      relevant chunk get applied to the proper shard. For related
      information, see :ref:`faq-writebacklisten` and
      :ref:`server-status-writebacksqueued`.
