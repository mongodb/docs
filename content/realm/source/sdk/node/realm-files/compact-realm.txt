.. meta::
   :robots: noindex, nosnippet

.. _node-compact-a-realm:

=====================================
Reduce Realm File Size - Node.js SDK
=====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/compaction-introduction.rst

Automatic Compaction
--------------------

.. versionadded:: 11.3.0

.. include:: /includes/automatic-compaction.rst 


Manual Compaction Options
-------------------------

.. include:: /includes/manual-compaction.rst

Realm reduces the file size by writing a new (compact) version of the file, and 
then replacing the original with the newly-written file. Therefore, to compact, 
you must have free storage space equivalent to the original realm file size. 

You can configure realm to automatically compact the database each time a
realm is opened, or you can compact the file without first obtaining a
realm instance.

Realm Configuration File
~~~~~~~~~~~~~~~~~~~~~~~~

You can configure Realm to check the realm file each time it is opened
by specifying a :js-sdk:`shouldCompact <Realm.html#~Configuration>` function
for the configuration. The following code example shows how to do this:

.. literalinclude:: /examples/generated/node/compacting.snippet.shouldCompactNode.js
   :language: javascript

Realm.compact() Method
~~~~~~~~~~~~~~~~~~~~~~

Alternatively, you can compact a realm file whenever you'd like by calling
the :js-sdk:`compact() <Realm.html#compact>` method:

.. literalinclude:: /examples/generated/node/compacting.snippet.compactNode.js
   :language: javascript

The ``compact()`` method will return true if the operation is successful.

Make a Compacted Copy
~~~~~~~~~~~~~~~~~~~~~

You can save a compacted (and optionally :ref:`encrypted
<node-encrypt-a-realm>`) copy of a realm to another file location
with the :js-sdk:`Realm.writeCopyTo()
<Realm.html#writeCopyTo>`
method. The destination file cannot already exist.

.. important::

   Avoid calling ``writeCopyTo()`` within a :ref:`write transaction
   <node-write-transactions>`. If called within a write transaction, this
   method copies the absolute latest data. This includes any
   **uncommitted** changes you made in the transaction before this
   method call.

Tips for Manually Compacting a Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/compaction-tips.rst

These calculations might look like this:

.. code-block:: javascript

   // Set a maxFileSize equal to 20MB in bytes
   const maxFileSize = 20 * 1024 * 1024;

   /* Check for the realm file size to be greater than the max file size, 
    * and the amount of bytes currently used to be less than 50% of the
    * total realm file size */
   return (totalBytes > (double)maxFileSize) &&
      ((double)usedBytes / totalBytes < 0.5);

Experiment with conditions to find the right balance of how often to 
compact realm files in your application.