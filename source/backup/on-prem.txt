=================
|backup| Overview
=================

.. default-domain:: mongodb

Overview
--------

A lightweight backup agent runs within your infrastructure and connects to
the configured MongoDB instances. Using the same mechanism as
replication, the agent performs an initial sync then tails the
oplog of a replica set’s primary. For a sharded cluster, the backup
agent tails the primary of each shard and each config
server. Instead of acting as another local secondary, the agent ships
initial sync and oplog data over HTTPS back to the MMS service.

Operations
~~~~~~~~~~

The MMS service recreates every replica set you back up and
applies the oplog entries the backup agents send. MMS then
maintains a standalone MongoDB database on disk for each backed up
replica set (i.e. a "head"). Each head is consistent with the original
primary up to the last oplog supplied by the agent. The original
replica set, or sharded cluster, has no knowledge of this
secondary. The initial sync and tailing of the oplog are all done
using standard MongoDB queries.

The service takes scheduled snapshots of all heads and retains those
snapshots based on a user-defined policy. Replica set snapshots
trigger based on an observed a change in oplog time. Sharded clusters
snapshots temporarily stop the balancer via the
:program:`mongos` and insert a marker token into all shards and config
servers. MMS takes a snapshot when the marker tokens appear.

Compression and block-level deduplication technology reduces snapshot data
size. The snapshot only stores the differences between successive snapshots.
Snapshots use only a fraction of the disk space required for full snapshots.

Restores
~~~~~~~~

Restores of specific snapshots and point in time restores are both
available for replica sets. Clusters restore from a snapshot time for
consistency.

A snapshot restore reads directly from Snapshot Storage and transfers
files via an HTTPS download link (i.e. a pull) or by the MMS service
sending files via SSH (push).

A point in time restore first creates a local restore of a snapshot
from the blockstore. After the MMS service has the snapshot locally it
applies stored oplogs until thedesired point in time. The service then
delivers the point in time backup via the same HTTPS or SSH
mechanisms.

The amount of oplog to keep per backup is configurable and affects the
time window available for point in time restores.

Components
----------

MMS Package (Front-end)
~~~~~~~~~~~~~~~~~~~~~~~

The front-end package contains the UI the end user interacts with, as
well as HTTPS services used by the monitoring agent and backup agent
to transmit data to and from MMS. All three components start
automatically when the front-end MMS package starts. These components
are stateless. Multiple instances of the front-end package can run as
long as each instance has the same configuration. Users and agents can
interact with any instance.

MMS HTTP Server
```````````````

The HTTP server runs on port ``8080`` by default.  This component
contains the web interface for managing MMS users, monitoring of
MongoDB servers, and managing those server’s backups. Users can sign
up, create new accounts and groups, as well as join an existing
group. The MMS Web Server also contains endpoints used by the MMS
Agent to report back information on monitored MongoDB instances.

Backup HTTP Server
``````````````````

The HTTP server runs on port 8081 by default. The Backup HTTP Server
contains a set of web services used by the backup agent. The agent
retrieves its configuration from this service. The agent also sends
back initial sync and oplog data through this interface. There is no
user interaction with this service.

Backup Alert Service
````````````````````

The Backup Alert Service watches the state of all agents, heads, and
snapshots. It sends email alerts as problems occur.

Backup Daemon Package (Back-end)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Backup Daemon is the only component in the Backup Daemon
package. The Backup Daemon manages all heads and snapshots. The daemon
does scheduled work based on data coming in to the Backup HTTP server
from the backup agents. No client applications talk directly to the
daemon. Its state and job queues come from the MMS Metadata Database.

The daemon creates the heads on its local disk in a configured
path. If multiple servers run the daemon, an appropriate daemon picks up 
a new incoming backup and that backups' head will live with that daemon.

The deamon will take scheduled snapshots and stores those snapshots in
the Snapshot Storage (also known as the Blockstore). It will also act
on restore requests by retrieving data from the Blockstore and
delivering it to the requested destination.

Multiple Backup Daemons can scale MMS horizontally with each
replica bound to a particular Daemon.

Data Storage
~~~~~~~~~~~~

All data about the state of the MMS service, and the backup snapshot
data, persists in MongoDB databases. These databases are not part
of the MMS package installation. Set up these databases separately with their 
location recorded in the MMS configuration files.

MMS Metadata Database
`````````````````````

This database will contain MMS users, groups, hosts, monitoring data,
backup state, etc. This metadata does not require a large amount of
storage space, typically less than 1GB per monitored/backed up server,
but receives frequent updates. The metadata database should be a a
replica set to provide durability and automatic failover from the MMS
service.

Snapshot Storage (Blockstore Database)
``````````````````````````````````````

This database contains all snapshots of databases backed up
and oplogs retained for point in time restores. The snapshot database
will require disk space proportional to the backed up databases.

Configure the Blockstore as a replica set to provide durability and
automatic failover to the backup and restore components.

Additional Information
----------------------

See :doc:`/backup` and :doc:`/backup/faq` for more information.
