=====================
Development Checklist
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The following checklist, along with the
:doc:`/administration/production-checklist-operations`, provides
recommendations to help you avoid issues in your production MongoDB
deployment.

.. start-content

Data Durability
~~~~~~~~~~~~~~~

.. cssclass:: checklist

   - Ensure that your replica set includes at least three data-bearing nodes
     with ``w:majority`` :doc:`write concern
     </reference/write-concern>`. Three data-bearing nodes are
     required for replica-set wide data durability.

   - Ensure that all instances use :doc:`journaling </core/journaling>`.

Schema Design
~~~~~~~~~~~~~

Data in MongoDB has a *dynamic schema*. :term:`Collections
<collection>` do not enforce :term:`document` structure. This
facilitates iterative development and polymorphism. Nevertheless,
collections often hold documents with highly homogeneous
structures. See :doc:`/core/data-models` for more information.

.. cssclass:: checklist

   - Determine the set of collections that you will need and the
     indexes required to support your queries. With the exception of
     the ``_id`` index, you must create all indexes explicitly: MongoDB
     does not automatically create any indexes other than ``_id``.
   
   - Ensure that your schema design supports your deployment type: if
     you planning to use :term:`sharded clusters <sharded cluster>` for
     horizontal scaling, design your schema to include a strong shard
     key. The shard key affects read and write performance by
     determining how MongoDB partitions data. See: :doc:`Impacts of
     Shard Keys on Cluster Operations </core/sharding-shard-key>`
     for information about what qualities a shard key should possess.
     You cannot change the shard key once it is set.

   - Ensure that your schema design does not rely on indexed arrays that
     grow in length without bound. Typically, best performance can
     be achieved when such indexed arrays have fewer than 1000 elements.

   - Consider the document size limits when designing your schema.
     The :limit:`BSON Document Size` limit is 16MB per document. If
     you require larger documents, use :doc:`GridFS </core/gridfs>`.

Replication
~~~~~~~~~~~

.. cssclass:: checklist

   - Use an odd number of replica set members to ensure that elections
     proceed successfully. If you have an even number of members, use
     an :term:`arbiter` to ensure an odd number of votes.

   - Ensure that your secondaries remain up-to-date by using
     :doc:`monitoring tools </administration/monitoring>` and by
     specifying appropriate :doc:`write concern
     </reference/write-concern>`.

   - Do not use secondary reads to scale overall read throughput. See:
     `Can I use more replica nodes to scale`_ for an overview of read
     scaling. For information about secondary reads, see:
     :doc:`/core/read-preference`.

     .. _Can I use more replica nodes to scale: http://askasya.com/post/canreplicashelpscaling

Sharding
~~~~~~~~

.. cssclass:: checklist

   - Ensure that your shard key distributes the load evenly on your shards.
     See: :doc:`/core/sharding-shard-key` for more information.

   - Use :ref:`targeted operations <sharding-mongos-targeted>`
     for workloads that need to scale with the number of shards.

   - Always read from primary nodes for non-targeted queries that may
     be sensitive to `stale or orphaned data <http://blog.mongodb.org/post/74730554385/background-indexing-on-secondaries-and-orphaned>`_.

   - :doc:`Pre-split and manually balance chunks
     </tutorial/create-chunks-in-sharded-cluster>` when inserting large
     data sets into a new non-hashed sharded collection. Pre-splitting
     and manually balancing enables the insert load to be distributed
     among the shards, increasing performance for the initial load.

Drivers
~~~~~~~

.. cssclass:: checklist

   - Make use of connection pooling. Most MongoDB drivers support
     connection pooling. Adjust the connection pool size to suit your
     use case, beginning at 110-115% of the typical number of concurrent
     database requests.

   - Ensure that your applications handle transient write and read errors
     during replica set elections.

   - Ensure that your applications handle failed requests and retry them if
     applicable. Drivers **do not** automatically retry failed requests.

   - Use exponential backoff logic for database request retries.

   - Use :method:`cursor.maxTimeMS()` for reads and :ref:`wc-wtimeout` for
     writes if you need to cap execution time for database operations.
