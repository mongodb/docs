.. _replica-set-sync:

================================
Replica Set Data Synchronization
================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

In order to maintain up-to-date copies of the shared data set,
secondary members of a replica set :term:`sync` or replicate data from
other members. MongoDB uses two forms of data synchronization:
initial sync to populate new members
with the full data set, and replication to apply ongoing changes to the
entire data set.

.. _replica-set-initial-sync:

Initial Sync
------------

Initial sync copies all the data from one member of the replica set to
another member. See :ref:`replica-set-initial-sync-source-selection` for
more information on initial sync source selection criteria.

Starting in MongoDB 4.4, you can specify the preferred initial sync
source using the :parameter:`initialSyncSourceReadPreference` parameter.
This parameter can only be specified when starting the
:binary:`~bin.mongod`.

Starting in MongoDB 5.2, initial syncs can be *logical* or *file copy 
based*. 

.. _replica-set-initial-sync-logical:

Logical Initial Sync Process
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you perform a 
:ref:`logical initial sync <replica-set-initial-sync-logical>`, MongoDB:

#. Clones all databases except the :ref:`local
   <replica-set-local-database>` database. To clone, the
   :binary:`~bin.mongod` scans every collection in each source database and
   inserts all data into its own copies of these collections.

#. Builds all collection indexes as the documents are copied for each 
   collection.
   
#. Pulls newly added oplog records during the data copy. Ensure that the 
   target member has enough disk space in the ``local`` database to 
   temporarily store these oplog records for the duration of this data 
   copy stage.

#. Applies all changes to the data set. Using the oplog from the
   source, the :binary:`~bin.mongod` updates its data set to reflect the
   current state of the replica set.

When the initial sync finishes, the member transitions from
:replstate:`STARTUP2` to :replstate:`SECONDARY`.

To perform an initial sync, see
:doc:`/tutorial/resync-replica-set-member`.

.. _replica-set-initial-sync-file-copy-based:

File Copy Based Initial Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:ref:`File copy based initial sync 
<replica-set-initial-sync-file-copy-based>` runs the initial sync
process by copying and moving files on the file system. 

File copy based initial sync can be faster than 
:ref:`logical initial sync <replica-set-initial-sync-logical>`.

It is only available on Enterprise Server.

Limitations
```````````

- File copy based initial sync replaces the ``local`` database on the 
  node being *synced to* with the ``local`` database from the node 
  being *synced from*.

- You can only run an initial sync from one given node at a time. 

- You cannot run a backup on the node that is being *synced to* during 
  the initial sync.

- You cannot run a backup on the node that is being *synced from* during 
  the initial sync.

- You cannot use file copy based initial sync with encrypted storage  
  engine to re-key the data.

.. warning::

   You cannot write to the ``local`` database during a file copy based
   sync.


.. _init-sync-retry:

Fault Tolerance
~~~~~~~~~~~~~~~

If a secondary performing initial sync encounters a *non-transient*
(i.e. persistent) network error during the sync process, the secondary
restarts the initial sync process from the beginning. 

Starting in MongoDB 4.4, a secondary performing initial sync can attempt
to resume the sync process if interrupted by a *transient* (i.e.
temporary) network error, collection drop, or
collection rename. The sync source must also run MongoDB 4.4 to support
resumable initial sync. If the sync source runs MongoDB 4.2 or earlier,
the secondary must restart the initial sync process as if it encountered
a non-transient network error.

By default, the secondary tries to resume initial sync for 24 hours.
MongoDB 4.4 adds the
:parameter:`initialSyncTransientErrorRetryPeriodSeconds` server
parameter for controlling the amount of time the secondary attempts to
resume initial sync. If the secondary cannot successfully resume the
initial sync process during the configured time period, it selects a new
healthy source from the replica set and restarts the initial
synchronization process from the beginning. 

The secondary attempts to restart the initial sync up to ``10`` times
before returning a fatal error.

.. _replica-set-initial-sync-source-selection:

Initial Sync Source Selection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Initial sync source selection depends on the value of the
:binary:`~bin.mongod` startup parameter
:parameter:`initialSyncSourceReadPreference` (*new in 4.4*):

- For :parameter:`initialSyncSourceReadPreference` set to
  :readmode:`primary` (default if :rsconf:`chaining
  <settings.chainingAllowed>` is disabled), select the :term:`primary`
  as the sync source. If the primary is unavailable or unreachable, log
  an error and periodically check for primary availability.

- For :parameter:`initialSyncSourceReadPreference` set to
  :readmode:`primaryPreferred` (default for voting replica set
  members), attempt to select the :term:`primary` as the sync source. If
  the primary is unavailable or unreachable, perform sync source
  selection from the remaining replica set members.

- For all other supported read modes, perform sync source selection 
  from the replica set members.

Members performing initial sync source selection make two passes through 
the list of all replica set members:

.. tabs::

   .. tab:: First Pass
      :tabid: firstpass

      The member applies the following criteria to each replica 
      set member when making the first pass for selecting a
      initial sync source:

      - The sync source *must* be in the :replstate:`PRIMARY` or
        :replstate:`SECONDARY` replication state.

      - The sync source *must* be online and reachable.

      - If :parameter:`initialSyncSourceReadPreference` is
        :readmode:`secondary` or :readmode:`secondaryPreferred`, 
        the sync source *must* be a :term:`secondary`.

      - The sync source *must* be :rsconf:`visible <members[n].hidden>`.

      - The sync source *must* be within ``30`` seconds of the newest 
        oplog entry on the primary.

      - If the member :rsconf:`builds indexes
        <members[n].buildIndexes>`, the sync source *must*
        build indexes.

      - If the member :rsconf:`votes <members[n].votes>` in 
        replica set elections, the sync source *must* also vote.

      - If the member is *not* a :rsconf:`delayed member
        <members[n].secondaryDelaySecs>`, the sync source *must not* be delayed.

      - If the member *is* a :rsconf:`delayed member
        <members[n].secondaryDelaySecs>`, the sync source must have a shorter 
        configured delay.

      - The sync source *must* be faster (i.e. lower latency) than 
        the current best sync source.

      If no candidate sync sources remain after the first pass, 
      the member performs a second pass with relaxed criteria. 
      See :guilabel:`Sync Source Selection (Second Pass)`.

   .. tab:: Second Pass
      :tabid: second pass

      The member applies the following criteria to each replica 
      set member when making the second pass for selecting a
      initial sync source:

      - The sync source *must* be in the 
        :replstate:`PRIMARY` or :replstate:`SECONDARY` replication 
        state.

      - The sync source *must* be online and reachable.

      - If :parameter:`initialSyncSourceReadPreference` is
        :readmode:`secondary`, the sync source *must* be a
        :term:`secondary`.

      - If the member :rsconf:`builds indexes
        <members[n].buildIndexes>`, the sync source must
        build indexes.

      - The sync source *must* be faster (i.e. lower latency) than 
        the current best sync source.
       
If the member cannot select an initial sync source after two passes, it
logs an error and waits ``1`` second before restarting the selection
process. The secondary :binary:`~bin.mongod` can restart the initial
sync source selection process up to ``10`` times before exiting with an
error.

.. _replica-set-replication:

Replication
-----------

Secondary members replicate data continuously after the initial sync.
Secondary members copy the :doc:`oplog </core/replica-set-oplog>` from
their *sync from* source and apply these operations in an asynchronous
process. [#slow-oplogs]_ 

Secondaries may automatically change their *sync from* source as needed
based on changes in the ping time and state of other members'
replication. See :ref:`replica-set-replication-sync-source-selection`
for more information on sync source selection criteria.

.. [#slow-oplogs]

   .. include:: /includes/extracts/4.2-changes-slow-oplog-log-message-footnote.rst

.. _replica-set-streaming-replication:

Streaming Replication 
~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 4.4, *sync from* sources send a continuous stream 
of :doc:`oplog </core/replica-set-oplog>` entries to their syncing 
secondaries. Streaming replication mitigates replication lag in 
high-load and high-latency networks. It also: 

- Reduces staleness for reads from secondaries.
- Reduces risk of losing write operations with :ref:`w: 1 <wc-w>` due to 
  primary failover.
- Reduces latency on write operations with :writeconcern:`w: "majority" 
  <"majority">` and :ref:`w: >1 <wc-w>` (that is, any write concern that 
  requires waiting for replication).

Prior to MongoDB 4.4, secondaries fetched batches of :doc:`oplog 
</core/replica-set-oplog>` entries by issuing a request to their *sync 
from* source and waiting for a response. This required a network roundtrip 
for each batch of :doc:`oplog </core/replica-set-oplog>` entries. MongoDB 
4.4 adds the :parameter:`oplogFetcherUsesExhaust` startup parameter for 
disabling streaming replication and using the older replication behavior. 
Set the :parameter:`oplogFetcherUsesExhaust` parameter to ``false`` only if 
there are any resource constraints on the *sync from* source or if you wish 
to limit MongoDB's usage of network bandwidth for replication.

.. _replica-set-internals-multi-threaded-replication:

Multithreaded Replication
~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB applies write operations in batches using multiple threads to
improve concurrency. MongoDB groups batches by document id (:ref:`WiredTiger
<storage-wiredtiger>`) and simultaneously applies each group of
operations using a different thread. MongoDB always applies write
operations to a given document in their original write order.

.. versionchanged:: 4.0

Starting in MongoDB 4.0, read operations that
:ref:`target secondaries <replica-set-read-preference>` and are
configured with a :ref:`read concern<read-concern>` level of
:readconcern:`"local"` or  :readconcern:`"majority"` will now read from
a :ref:`WiredTiger<storage-wiredtiger>` snapshot of the data if the read
takes place on a secondary where replication batches are being applied. 
Reading from a snapshot guarantees a consistent view of the
data, and allows the read to occur simultaneously with the ongoing
replication without the need for a lock. As a result, secondary reads
requiring these read concern levels no longer need to wait for
replication batches to be applied, and can be handled as they are
received.

Flow Control
~~~~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-flow-control-general-desc.rst

For more information, see :ref:`flow-control`.

.. _replica-set-replication-sync-source-selection:

Replication Sync Source Selection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Replication sync source selection depends on the replica set 
:rsconf:`chaining <settings.chainingAllowed>` setting:

- With chaining enabled (default), perform sync source selection from
  the replica set members.

- With chaining disabled, select the :term:`primary` as the sync 
  source. If the primary is unavailable or unreachable, log an 
  error and periodically check for primary availability.

Members performing replication sync source selection make two passes
through the list of all replica set members:

.. tabs::

   .. tab:: First Pass
      :tabid: firstpass

      The member applies the following criteria to each replica 
      set member when making the first pass for selecting a
      replication sync source:

      - The sync source *must* be in the :replstate:`PRIMARY` or
        :replstate:`SECONDARY` replication state.

      - The sync source *must* be online and reachable.

      - The sync source *must* have newer oplog entries than the member
        (i.e. the sync source is *ahead* of the member).

      - The sync source *must* be :rsconf:`visible <members[n].hidden>`.

      - The sync source *must* be within ``30`` seconds of the newest 
        oplog entry on the primary.

      - If the member :rsconf:`builds indexes
        <members[n].buildIndexes>`, the sync source *must*
        build indexes.

      - If the member :rsconf:`votes <members[n].votes>` in 
        replica set elections, the sync source *must* also vote.

      - If the member is *not* a :rsconf:`delayed member
        <members[n].secondaryDelaySecs>`, the sync source *must not* be delayed.

      - If the member *is* a :rsconf:`delayed member
        <members[n].secondaryDelaySecs>`, the sync source must have a shorter 
        configured delay.

      - The sync source *must* be faster (i.e. lower latency) than 
        the current best sync source.

      If no candidate sync sources remain after the first pass, 
      the member performs a second pass with relaxed criteria. 
      See the :guilabel:`Sync Source Selection (Second Pass)`.

   .. tab:: Second Pass
      :tabid: second pass
     
      The member applies the following criteria to each replica 
      set member when making the second pass for selecting a
      replication sync source:

      - The sync source *must* be in the 
        :replstate:`PRIMARY` or :replstate:`SECONDARY` replication 
        state.

      - The sync source *must* be online and reachable.

      - If the member :rsconf:`builds indexes
        <members[n].buildIndexes>`, the sync source must
        build indexes.
       
      - The sync source *must* be faster (i.e. lower latency) than 
        the current best sync source.

If the member cannot select a sync source after two passes, it logs an
error and waits ``1`` second before restarting the selection process.

The number of times a source can be changed per hour is
configurable by setting the :parameter:`maxNumSyncSourceChangesPerHour`
parameter. 

.. note::

   Starting in MongoDB 4.4, the startup parameter
   :parameter:`initialSyncSourceReadPreference` takes precedence over
   the replica set's :rsconf:`settings.chainingAllowed` setting when
   selecting an initial sync source. After a replica set member
   successfully performs initial sync, it defers to the value of
   :rsconf:`~settings.chainingAllowed` when selecting a replication sync
   source.

   See :ref:`replica-set-initial-sync-source-selection` for more
   information on initial sync source selection.
