.. _built-in-roles:

==============
Built-In Roles
==============

.. default-domain:: mongodb

.. COMMENT may want to have this file replace the /core/built-in-roles

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB grants access to data and commands through :ref:`role-based
authorization <roles>` and provides built-in roles that provide the different
levels of access commonly needed in a database system. You can additionally
create :ref:`user-defined roles <user-defined-roles>`.

A role grants privileges to perform sets of :ref:`actions
<security-user-actions>` on defined :ref:`resources <resource-document>`. A
given role applies to the database on which it is defined and can grant access
down to a collection level of granularity.

Each of MongoDB's built-in roles defines access at the database level for all
*non*-system collections in the role's database and at the collection level
for all :doc:`system collections </reference/system-collections>`.

MongoDB provides the built-in :ref:`database user <database-user-roles>` and
:ref:`database administration <database-administration-roles>` roles on
*every* database. MongoDB provides all other built-in roles only on the
``admin`` database.

This section describes the privileges for each built-in role. You can also
view the privileges for a built-in role at any time by issuing the
:dbcommand:`rolesInfo` command with the ``showPrivileges`` and
``showBuiltinRoles`` fields both set to ``true``.

.. _database-user-roles:

Database User Roles
-------------------

Every database includes the following client roles:

.. authrole:: read

   Provides the ability to read data on all *non*-system collections and on
   the following system collections: :data:`system.indexes
   <<database>.system.indexes>`, :data:`system.js <<database>.system.js>`, and
   :data:`system.namespaces <<database>.system.namespaces>` collections. The
   role provides read access by granting the following :ref:`actions
   <security-user-actions>`:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`
   - :authaction:`listIndexes`
   - :authaction:`listCollections`

.. authrole:: readWrite

   Provides all the privileges of the :authrole:`read` role plus ability to
   modify data on all *non*-system collections and the :data:`system.js
   <<database>.system.js>` collection. The role provides the following
   actions on those collections:

   - :authaction:`collStats`
   - :authaction:`convertToCapped`
   - :authaction:`createCollection`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`dropCollection`
   - :authaction:`createIndex`
   - :authaction:`dropIndex`
   - :authaction:`find`
   - :authaction:`insert`
   - :authaction:`killCursors`
   - :authaction:`listIndexes`
   - :authaction:`listCollections`
   - :authaction:`remove`
   - :authaction:`renameCollectionSameDB`
   - :authaction:`update`

.. _database-administration-roles:

Database Administration Roles
-----------------------------

Every database includes the following database administration roles:

.. authrole:: dbAdmin

   Provides the following :ref:`actions <security-user-actions>` on the
   database's :data:`system.indexes <<database>.system.indexes>`,
   :data:`system.namespaces <<database>.system.namespaces>`, and
   :data:`system.profile <<database>.system.profile>` collections:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`
   - :authaction:`listIndexes`
   - :authaction:`listCollections`
   - :authaction:`dropCollection` and :authaction:`createCollection`
     on :data:`system.profile <<database>.system.profile>` *only*

   .. versionchanged:: 2.6.4
      :authrole:`dbAdmin` added the :authaction:`createCollection`
      for the :data:`system.profile <<database>.system.profile>`
      collection. Previous versions only had the
      :authaction:`dropCollection` on the :data:`system.profile
      <<database>.system.profile>` collection.

   Provides the following actions on all *non*-system
   collections. This role *does not* include full read access on non-system collections:

   - :authaction:`bypassDocumentValidation`
   - :authaction:`collMod`
   - :authaction:`collStats`
   - :authaction:`compact`
   - :authaction:`convertToCapped`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dbStats`
   - :authaction:`dropCollection`
   - :authaction:`dropDatabase`
   - :authaction:`dropIndex`
   - :authaction:`enableProfiler`
   - :authaction:`reIndex`
   - :authaction:`renameCollectionSameDB`
   - :authaction:`repairDatabase`
   - :authaction:`storageDetails`
   - :authaction:`validate`

.. authrole:: dbOwner

   The database owner can perform any administrative action on the database.
   This role combines the privileges granted by the :authrole:`readWrite`,
   :authrole:`dbAdmin` and :authrole:`userAdmin` roles.

.. authrole:: userAdmin

   Provides the ability to create and modify roles and users for a database.
   A user with this role on a database can assign any role or privilege
   to any user for that database, including themselves.

   The :authrole:`userAdmin` role explicitly provides the following actions:

   - :authaction:`changeCustomData`
   - :authaction:`changePassword`
   - :authaction:`createRole`
   - :authaction:`createUser`
   - :authaction:`dropRole`
   - :authaction:`dropUser`
   - :authaction:`grantRole`
   - :authaction:`revokeRole`
   - :authaction:`setAuthenticationRestriction`
   - :authaction:`viewRole`
   - :authaction:`viewUser`

 Â  .. warning::

      It is important to understand the security implications of granting the
      :authrole:`userAdmin` role: a user with this role for a database can
      assign themselves any privilege on that database. Granting the
      :authrole:`userAdmin` role on the ``admin`` database has further
      security implications as this indirectly provides
      :ref:`superuser <superuser>` access to a cluster. With ``admin``
      scope a user with the :authrole:`userAdmin` role can grant cluster-wide
      roles or privileges including :authrole:`userAdminAnyDatabase`.

.. _cluster-admin-roles:
.. _admin-roles:

Cluster Administration Roles
----------------------------

The ``admin`` database includes the following roles for administering the
whole system rather than just a single database. These roles include but are
not limited to :term:`replica set` and :term:`sharded cluster` administrative
functions.

.. authrole:: clusterAdmin

   Provides the greatest cluster-management access. This role combines the
   privileges granted by the :authrole:`clusterManager`,
   :authrole:`clusterMonitor`, and :authrole:`hostManager` roles.
   Additionally, the role provides the :authaction:`dropDatabase` action.

.. authrole:: clusterManager

   .. versionchanged:: 3.4

   Provides management and monitoring actions on the cluster. A user with
   this role can access the ``config`` and ``local`` databases, which are
   used in sharding and replication, respectively.

   Provides the following actions on the cluster as a whole:

   - :authaction:`addShard`
   - :authaction:`appendOplogNote`
   - :authaction:`applicationMessage`
   - :authaction:`cleanupOrphaned`
   - :authaction:`flushRouterConfig`

   - :authaction:`listSessions` (New in version 3.6)

   - :authaction:`listShards`
   - :authaction:`removeShard`
   - :authaction:`replSetConfigure`
   - :authaction:`replSetGetConfig`
   - :authaction:`replSetGetStatus`
   - :authaction:`replSetStateChange`
   - :authaction:`resync`

   Provides the following actions on *all* databases in the cluster:

   - :authaction:`enableSharding`
   - :authaction:`moveChunk`
   - :authaction:`splitChunk`
   - :authaction:`splitVector`

   On the ``config`` database, provides the following privileges:

   .. list-table::
      :header-rows: 1
      :widths: 40 60

      * - Resource
        - Actions

      * - All collections in the ``config`` database

        -  | :authaction:`collStats`
           | :authaction:`dbHash`
           | :authaction:`dbStats`
           | :authaction:`enableSharding`
           | :authaction:`find`
           | :authaction:`insert`
           | :authaction:`killCursors`
           | :authaction:`listCollections`
           | :authaction:`listIndexes`
           | :authaction:`moveChunk`
           | :authaction:`planCacheRead`
           | :authaction:`remove`
           | :authaction:`splitChunk`
           | :authaction:`splitVector`
           | :authaction:`update`

      * - | :data:`system.indexes <<database>.system.indexes>`,

          | :data:`system.js <<database>.system.js>`,

          | :data:`system.namespaces <<database>.system.namespaces>` collections

        -  | :authaction:`collStats`
           | :authaction:`dbHash`
           | :authaction:`dbStats`
           | :authaction:`find`
           | :authaction:`killCursors`
           | :authaction:`listCollections`
           | :authaction:`listIndexes`
           | :authaction:`planCacheRead`

   On the ``local`` database, provides the following privileges:

   .. list-table::
      :header-rows: 1
      :widths: 40 60

      * - Resource
        - Actions

      * - All collections in the ``local`` database

        - - :authaction:`enableSharding`
          - :authaction:`insert`
          - :authaction:`moveChunk`
          - :authaction:`remove`
          - :authaction:`splitChunk`
          - :authaction:`splitVector`
          - :authaction:`update`

      * - :data:`system.replset <local.system.replset>` collection

        - - :authaction:`collStats`
          - :authaction:`dbHash`
          - :authaction:`dbStats`
          - :authaction:`find`
          - :authaction:`killCursors`
          - :authaction:`listCollections`
          - :authaction:`listIndexes`
          - :authaction:`planCacheRead`

.. authrole:: clusterMonitor

   .. versionchanged:: 3.4

   Provides read-only access to monitoring tools, such as the
   |mms-home| and :opsmgr:`Ops Manager
   </>` monitoring agent.

   Provides the following actions on the cluster as a whole:

   - :authaction:`connPoolStats`
   - :authaction:`getCmdLineOpts`
   - :authaction:`getLog`
   - :authaction:`getParameter`
   - :authaction:`getShardMap`
   - :authaction:`hostInfo`
   - :authaction:`inprog`
   - :authaction:`listDatabases`

   - :authaction:`listSessions` (New in version 3.6)

   - :authaction:`listShards`
   - :authaction:`netstat`
   - :authaction:`replSetGetConfig`
   - :authaction:`replSetGetStatus`
   - :authaction:`serverStatus`
   - :authaction:`shardingState`
   - :authaction:`top`

   Provides the following actions on *all* databases in the cluster:

   - :authaction:`collStats`
   - :authaction:`dbStats`
   - :authaction:`getShardVersion`
   - :authaction:`indexStats`
   - :authaction:`useUUID` (New in version 3.6)

   Provides the :authaction:`find` action on all :data:`system.profile
   <<database>.system.profile>` collections in the cluster.

   On the ``config`` database, provides the following privileges:

   .. list-table::
      :header-rows: 1
      :widths: 40 60

      * - Resource
        - Actions

      * - All collections in the ``config`` database
        - | :authaction:`collStats`
          | :authaction:`dbHash`
          | :authaction:`dbStats`
          | :authaction:`find`
          | :authaction:`getShardVersion`
          | :authaction:`indexStats`
          | :authaction:`killCursors`
          | :authaction:`listCollections`
          | :authaction:`listIndexes`
          | :authaction:`planCacheRead`

      * - | :data:`system.indexes <<database>.system.indexes>`,
          | :data:`system.js <<database>.system.js>`,
          | :data:`system.namespaces <<database>.system.namespaces>` collections

        - | :authaction:`collStats`
          | :authaction:`dbHash`
          | :authaction:`dbStats`
          | :authaction:`find`
          | :authaction:`killCursors`
          | :authaction:`listCollections`
          | :authaction:`listIndexes`
          | :authaction:`planCacheRead`

   On the ``local`` database, provides the following privileges:

   .. list-table::
      :header-rows: 1

      * - Resource
        - Actions

      * - All collections in the ``local`` database
        - | :authaction:`collStats`
          | :authaction:`dbHash`
          | :authaction:`dbStats`
          | :authaction:`find`
          | :authaction:`getShardVersion`
          | :authaction:`indexStats`
          | :authaction:`killCursors`
          | :authaction:`listCollections`
          | :authaction:`listIndexes`
          | :authaction:`planCacheRead`

      * - | :data:`system.indexes <<database>.system.indexes>`,
          | :data:`system.js <<database>.system.js>`,
          | :data:`system.namespaces <<database>.system.namespaces>` collections

        - | :authaction:`collStats`
          | :authaction:`dbHash`
          | :authaction:`dbStats`
          | :authaction:`find`
          | :authaction:`killCursors`
          | :authaction:`listCollections`
          | :authaction:`listIndexes`
          | :authaction:`planCacheRead`

      * - | :data:`system.replset <<database>.system.replset>`,
          | :data:`system.profile <<database>.system.profile>`,

        - :authaction:`find`

.. authrole:: hostManager

   Provides the ability to monitor and manage servers.

   Provides the following actions on the cluster as a whole:

   - :authaction:`applicationMessage`
   - :authaction:`closeAllDatabases`
   - :authaction:`connPoolSync`
   - :authaction:`cpuProfiler`
   - :authaction:`diagLogging`
   - :authaction:`flushRouterConfig`
   - :authaction:`fsync`
   - :authaction:`invalidateUserCache`

   - :authaction:`killAnySession` (New in version 3.6)

   - :authaction:`killop`
   - :authaction:`logRotate`
   - :authaction:`resync`
   - :authaction:`setParameter`
   - :authaction:`shutdown`
   - :authaction:`touch`
   - :authaction:`unlock`

   Provides the following actions on *all* databases in the cluster:

   - :authaction:`killCursors`
   - :authaction:`repairDatabase`

.. _backup-and-restore-roles:

Backup and Restoration Roles
----------------------------

The ``admin`` database includes the following roles for backing up and
restoring data:

.. authrole:: backup

   .. versionchanged:: 3.4

   Provides minimal privileges needed for backing up data. This role
   provides sufficient privileges to use the |mms-home| backup agent,
   :opsmgr:`Ops Manager </>` backup agent, or to use
   :program:`mongodump` to back up an entire :program:`mongod` instance.

   .. todo: should we document the mms.backup collection in the
            system-collections document?

   Provides the :authaction:`insert` and :authaction:`update` actions
   on the
   ``mms.backup`` collection in the ``admin`` database and on the
   :data:`settings <config.settings>` collection in the ``config`` database.

   On :ref:`anyResource`, provides the

   - :authaction:`listDatabases` action
   - :authaction:`listCollections` action
   - :authaction:`listIndexes` action

   On the :ref:`cluster <resource-cluster>` as a whole, provides the

   - :authaction:`appendOplogNote`
   - :authaction:`getParameter`
   - :authaction:`listDatabases`

   Provides the :authaction:`find` action on the following:

   - all *non*-system collections in the cluster, including those in
     the ``config`` and ``local`` databases

   - The following system collections in the cluster:
     :data:`system.indexes <<database>.system.indexes>`,
     :data:`system.namespaces <<database>.system.namespaces>`,
     :data:`system.js <<database>.system.js>`, and
     :data:`system.profile <<database>.system.profile>`

   - the :data:`admin.system.users` and :data:`admin.system.roles` collections

   - the :data:`config.settings` collection

   - legacy ``system.users`` collections from versions of MongoDB prior to 2.6

   .. todo: Also provides the :authaction:`find` action on:
             - system.new_users
             - system.backup_users
             - system.version
            Do we want to document these?

   Provides :authaction:`insert` and :authaction:`update` action on the
   :data:`config.settings` collection.

   .. include:: /includes/fact-required-access-for-backup-profiling.rst

.. authrole:: restore

   .. versionchanged:: 3.6

      Provides :authaction:`convertToCapped` on non-system collections.

   Provides privileges needed to restore data from backups that do not
   include :data:`system.profile <<database>.system.profile>`
   collection data. This role is sufficient when restoring data with
   :program:`mongorestore` without the :option:`--oplogReplay` option.

   - .. include:: /includes/fact-restore-role-system.profile.rst

     The built-in roles :authrole:`dbAdmin` and
     :authrole:`dbAdminAnyDatabase` provide the additional privileges.

   - If running :program:`mongorestore` with :option:`--oplogReplay`,
     the :authrole:`restore` role is insufficient to replay the oplog.
     To replay the oplog, create a :ref:`user-defined role
     <create-user-defined-role>` that has :authaction:`anyAction` on
     :ref:`resource-anyresource` and grant only to users who must run
     :program:`mongorestore` with :option:`--oplogReplay`.

   .. COMMENT per the following commit, choosing the anyAction/anyResource
      over the __system role.

   .. https://github.com/mongodb/docs/commit/237c44cd3b6e4b7dbe0c9077b7571c8b7ec5d7a5

   Provides the following action on the cluster as a whole:

   - :authaction:`getParameter`

   Provides the following actions on all *non*-system collections:

   - :authaction:`bypassDocumentValidation`
   - :authaction:`changeCustomData`
   - :authaction:`changePassword`
   - :authaction:`collMod`
   - :authaction:`convertToCapped`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`createRole`
   - :authaction:`createUser`
   - :authaction:`dropCollection`
   - :authaction:`dropRole`
   - :authaction:`dropUser`
   - :authaction:`grantRole`
   - :authaction:`insert`
   - :authaction:`revokeRole`
   - :authaction:`viewRole`
   - :authaction:`viewUser`

   Provides the following actions on :data:`system.js <<database>.system.js>` collection:

   - :authaction:`bypassDocumentValidation`
   - :authaction:`collMod`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dropCollection`
   - :authaction:`insert`

   Provides the following action on :ref:`anyResource`:

   - :authaction:`listCollections`

   Provides the :authaction:`find` action on all the :data:`system.namespaces
   <<database>.system.namespaces>` collections in the cluster.

   Provides the following actions on all non-system collections on the
   ``config`` and the ``local`` databases:

   - :authaction:`bypassDocumentValidation`
   - :authaction:`collMod`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dropCollection`
   - :authaction:`insert`

   Provides the following actions on :data:`admin.system.version`

   - :authaction:`bypassDocumentValidation`
   - :authaction:`collMod`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dropCollection`
   - :authaction:`find`
   - :authaction:`insert`

   Provides the following action on :data:`admin.system.roles`

   - :authaction:`createIndex`

   Provides the following actions on :data:`admin.system.users`
   and legacy ``system.users`` collections:

   - :authaction:`bypassDocumentValidation`
   - :authaction:`collMod`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dropCollection`
   - :authaction:`find`
   - :authaction:`insert`
   - :authaction:`remove`
   - :authaction:`update`

   Although, :authrole:`restore` includes the ability to modify the
   documents in the :data:`admin.system.users` collection using normal
   modification operations, *only* modify these data using the
   :ref:`user management methods <user-management-methods>`.

.. include:: /includes/replacement-mms.rst

.. _auth-any-database-roles:

All-Database Roles
------------------

.. versionchanged:: 3.4

The following roles are available only to users on the ``admin``
database. These roles provide privileges which apply to all
collections except ``system.*`` collections on all databases
except ``local`` and ``config``:

.. authrole:: readAnyDatabase

   Provides the same read-only privileges as :authrole:`read` on all
   databases except ``local`` and ``config``.
   :authrole:`readAnyDatabase` also provides the
   :authaction:`listDatabases` privilege action on the cluster.

   .. versionchanged:: 3.4

      :authrole:`readAnyDatabase` no longer
      applies to the ``local`` and ``config`` databases. To provide
      read privileges on ``local`` and ``config``, create a
      user on the ``admin`` database with the :authrole:`read`
      role on the ``local`` and ``config`` databases.

      .. include:: /includes/seealso-cluster-manager.rst

.. authrole:: readWriteAnyDatabase

   Provides the same read and write privileges as
   :authrole:`readWrite` on all databases except ``local`` and
   ``config``. :authrole:`readWriteAnyDatabase` also provides the
   :authaction:`listDatabases` privilege action on the cluster.

   .. versionchanged:: 3.4

      :authrole:`readWriteAnyDatabase` no longer
      applies to the ``local`` and ``config`` databases. To provide
      read and write privileges on ``local`` and ``config``,
      create a user on the ``admin`` database with the
      :authrole:`readWrite` role on the ``local`` and ``config``
      databases.

      .. include:: /includes/seealso-cluster-manager.rst

.. authrole:: userAdminAnyDatabase

   Provides the same access to user administration operations as
   :authrole:`userAdmin` on all databases except ``local`` and
   ``config``. :authrole:`userAdminAnyDatabase` also provides the
   following privilege actions on the cluster:

   - :authaction:`authSchemaUpgrade`
   - :authaction:`invalidateUserCache`
   - :authaction:`listDatabases`

   The role also provides the following privilege actions on the
   :data:`system.users` and :data:`system.roles`
   collections on the ``admin`` database, and on legacy
   ``system.users`` collections from versions of MongoDB prior to 2.6:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`
   - :authaction:`planCacheRead`

   .. versionchanged:: 2.6.4
      :authrole:`userAdminAnyDatabase` added the following privilege
      actions on the :data:`admin.system.users` and
      :data:`admin.system.roles` collections:

      - :authaction:`createIndex`
      - :authaction:`dropIndex`

   The :authrole:`userAdminAnyDatabase` role does not restrict the privileges
   that a user can grant. As a result, :authrole:`userAdminAnyDatabase` users
   can grant themselves privileges in excess of their current
   privileges and even can grant themselves *all privileges*, even though the
   role does not explicitly authorize privileges beyond user administration.
   This role is effectively a MongoDB system :ref:`superuser <superuser>`.

   .. versionchanged:: 3.4

      :authrole:`userAdminAnyDatabase` no longer
      applies to the ``local`` and ``config`` databases.

      .. include:: /includes/seealso-cluster-manager.rst

.. authrole:: dbAdminAnyDatabase

   Provides the same access to database administration operations as
   :authrole:`dbAdmin` on all databases except ``local`` and
   ``config``. :authrole:`dbAdminAnyDatabase` also provides the
   :authaction:`listDatabases` privilege action on the cluster.

   .. versionchanged:: 3.4

      :authrole:`dbAdminAnyDatabase` no longer
      applies to the ``local`` and ``config`` databases.
      To provide ``dbAdmin`` privileges on ``local`` and ``config``,
      create a user on the ``admin`` database with the
      :authrole:`dbAdmin` role on the ``local`` and ``config``
      databases.

      .. include:: /includes/seealso-cluster-manager.rst

.. _superuser:

Superuser Roles
---------------

Several roles provide either indirect or direct system-wide superuser access.

The following roles provide the ability to assign any user any privilege on
any database, which means that users with one of these roles can assign
*themselves* any privilege on any database:

- :authrole:`dbOwner` role, when scoped to the ``admin`` database

- :authrole:`userAdmin` role, when scoped to the ``admin`` database

- :authrole:`userAdminAnyDatabase` role

The following role provides full privileges on all resources:

.. authrole:: root

   Provides access to the operations and all the resources of the
   :authrole:`readWriteAnyDatabase`, :authrole:`dbAdminAnyDatabase`,
   :authrole:`userAdminAnyDatabase`, :authrole:`clusterAdmin` roles,
   :authrole:`restore`, and :authrole:`backup` roles *combined*.

   .. versionchanged:: 3.4

      The :authrole:`root` role includes privileges from the
      :authrole:`backup` role.

   .. versionchanged:: 3.0.7

      The :authrole:`root` has :authaction:`validate` action on
      ``system.`` collections. Previously, :authrole:`root` does
      **not** include any access to collections that begin with the
      ``system.`` prefix other than ``system.indexes`` and
      ``system.namespaces``.

      The :authrole:`root` role includes privileges from the :authrole:`restore` role.

Internal Role
-------------

.. authrole:: __system

   MongoDB assigns this role to user objects that represent cluster members,
   such as replica set members and :program:`mongos` instances. The role
   entitles its holder to take any action against any object in the database.

   **Do not** assign this role to user objects representing applications or
   human administrators, other than in exceptional circumstances.

   If you need access to all actions on all resources, for example to
   run :dbcommand:`applyOps` commands, do not assign this role.
   Instead, :ref:`create a user-defined role <create-user-defined-role>` that
   grants :authaction:`anyAction` on :ref:`resource-anyresource` and
   ensure that only the users who need access to these operations have
   this access.
