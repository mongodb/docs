.. _java-rs-get-started-sample-query:
.. _java-rs-connect-to-mongodb:

==================
Run a Sample Query
==================

The {+driver-short+} is an implementation of the Reactive Streams API, which consists of three components: 

- ``Publisher``
- ``Subscriber``
- ``Subscription``

A ``Publisher`` is a provider of an unbounded number of sequenced elements, published
according to the demand received from its ``Subscriber`` or multiple instances
of ``Subscriber``. A ``Subscription`` represents a one-to-one lifecycle of a ``Subscriber`` subscribing to a ``Publisher``.

.. tip::

   To learn more about reactive streams, visit
   the `Reactive Streams documentation <http://www.reactive-streams.org>`__.

In this tutorial, you must implement {+java-rs+} ``Subscribers`` to
query your database. This guide uses methods from the Reactor library, a library
based on the Reactive Streams specification to implement {+java-rs+}
``Subscribers``. 

To learn more about the Reactor library, see `Getting Started
<https://projectreactor.io/docs/core/release/reference/#getting-started>`__ in the
{+pr+} documentation.

.. procedure::
   :style: connected

   .. step:: Create your {+driver-short+} Application
      
      You must use a project within an integrated development environment (IDE) to complete the following steps.
      In your project, create a new Java file in the ``Java`` package named 
      ``QueryDatabase``. Copy and paste the following code into the ``QueryDatabase`` file:
      
      .. literalinclude:: /includes/get-started/query-database.java
         :language: java
         :copyable:

   .. step:: Assign the Connection String

      Replace the ``<connection string>`` placeholder with the 
      connection string that you copied from the :ref:`java-rs-get-started-connection-string`
      step of this guide.

   .. step:: Run your Application

      Run your application, either in your IDE or in your shell. The output
      shows that you have connected to MongoDB and queried the database.

      .. code-block:: none

        {
           _id: ...,
           plot: 'A young man is accidentally sent 30 years into the past...',
           genres: [ 'Adventure', 'Comedy', 'Sci-Fi' ],
           ...
           title: 'Back to the Future',
           ...
         }

      .. tip::

         If you encounter an error, check whether you specified the
         proper connection string, and that you loaded the sample data.

After you complete these steps, you have a working application that
uses the driver to connect to your MongoDB deployment, queries the database,
and prints out the result.

.. include:: /includes/get-started/quickstart-troubleshoot.rst