==============================
setFeatureCompatibilityVersion
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Definition
----------

.. dbcommand:: setFeatureCompatibilityVersion

   Enables or disables the features that persist data incompatible with
   earlier versions of MongoDB. You can only issue the
   :dbcommand:`setFeatureCompatibilityVersion` against the ``admin``
   database.

.. warning::

   Enabling backwards-incompatible features can complicate the
   downgrade process since you must remove any persisted
   backwards-incompatible features before you downgrade.

   It is recommended that after upgrading, you allow your deployment to
   run without enabling backwards-incompatible features for a burn-in period 
   to ensure the likelihood of downgrade is minimal. When you are confident 
   that the likelihood of downgrade is minimal, enable these features.

Compatibility
-------------

This command is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-onprem-only.rst

Syntax
------

.. versionchanged:: 7.0

The command has the following syntax:

.. code-block:: javascript

   db.adminCommand( 
      {
        setFeatureCompatibilityVersion: <version>,
        confirm: true,
        writeConcern: { wtimeout: <timeout> }
      } 
   )

Command Fields
--------------

The ``setFeatureCompatibilityVersion`` command takes the following
fields:

setFeatureCompatibilityVersion
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Required*

The possible values for ``version`` are:

.. list-table::
   :header-rows: 1
   :widths: 15 85

   * - Version
     - Description

   * - ``"7.0"``
     - *Available on MongoDB 7.0 Deployments* 

       Enables the :ref:`7.0 features that persist data incompatible 
       with MongoDB 6.0 <7.0-downgrade-considerations>`.

   * - ``"6.0"``
     - *Available on MongoDB 6.0 and 7.0 Deployments* 

       Enables the :ref:`6.0 features that persist data incompatible 
       with MongoDB 5.0 <6.0-downgrade-considerations>`.

   * - ``"5.0"``
     - *Available on MongoDB 5.0 and 6.0 Deployments*

       Enables the :ref:`5.0 features that persist data incompatible
       with MongoDB 4.4 <5.0-compatibility-enabled>`.

confirm
~~~~~~~

*Required*

.. versionadded:: 7.0

Set to ``true`` to confirm the feature compatibility change and allow
the operation to proceed.

If you omit the ``confirm`` parameter or set ``confirm`` to a value
other than ``true``, the command fails and returns a warning about
modifying the feature compatibility version. The warning states that
after you upgrade or downgrade your cluster's {+fcv+}, you cannot
downgrade the binary version without support assistance.

writeConcern
~~~~~~~~~~~~

*Optional*

The ``writeConcern`` specifies the write concern
:ref:`wc-wtimeout` value in milliseconds:

- The time period that the :term:`primary` waits for
  acknowledgment from the majority of the replica set members. If the
  acknowledgment is not received in the time period, the operation
  fails.

- Default is ``60000`` milliseconds. Use a longer time period if the
  :term:`secondary` members of the replica set have a delay that exceeds
  the :ref:`wc-wtimeout` default.

.. note::

   .. include:: /includes/list-run-command-targets.rst

Behavior
--------

If you must downgrade the :ref:`feature compatibility version
<view-fcv>` below 8.0, you must first run the
``transitionToDedicatedConfigServer`` command. For downgrade details,
see :ref:`sharded-cluster-config-server-config-shards-downgrade`.

Downgrade with Backward-Incompatible Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you try to downgrade the {+fcv+} of a cluster that contains
incompatible data in the downloaded version, you receive a
``CannotDowngrade`` error. When this error occurs, the cluster remains
in the transitionary ``downgrading`` state.

To move the cluster out of the ``downgrading`` state, either:

- Modify your cluster data to remove backwards-incompatible features,
  then re-run the ``setFeatureCompatibilityVersion`` command with the
  downgraded version to set the {+fcv+} to the downgraded version.

- Run the ``setFeatureCompatibilityVersion`` command with the original
  upgraded version to set the {+fcv+} back to the original version.

  .. important::

     Setting the {+fcv+} to the original version stops the downgrade
     procedure and changes the {+fcv+} back to the upgraded version.
     This procedure does not reset the cluster back to the state before
     the {+fcv+} downgrade began.

     If a failed {+fcv+} downgrade's internal metadata is not
     cleaned up, any subsequent FCV upgrade attempt fails with an
     error message. You must complete the {+fcv+} downgrade before
     trying to upgrade the {+fcv+}.

Downgrade Policy Changes in MongoDB 7.0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 7.0, you cannot downgrade your deployment's {+fcv+}
to or from a :ref:`rapid release <rapid-releases>` version of MongoDB.

If you upgrade or downgrade your deployment's {+fcv+}, you cannot
downgrade your deployment's binary version without assistance from
support.

To learn more, see :ref:`7.0-downgrade`.

Conflicts with Background Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Certain background operations may prevent
execution of :dbcommand:`setFeatureCompatibilityVersion`. Use 
:dbcommand:`currentOp` to identify any ongoing operations.

Sync Failures
~~~~~~~~~~~~~

If you trigger a :dbcommand:`setFeatureCompatibilityVersion` change during an 
initial sync, the sync may fail with an ``OplogOperationUnsupported`` error
message when replaying entries on the ``oplog`` application phase. The sync 
following this attempt succeeds because the operation phase no longer replays
the operation.

Default Values
~~~~~~~~~~~~~~

.. include:: /includes/list-table-featureCompatibilityVersion-defaults.rst

Idempotency
~~~~~~~~~~~

This command must perform writes to an internal system collection. If
for any reason the command does not complete successfully, you can
safely retry the command as the operation is idempotent.

.. _setFeatureCompatibilityVersion-user-write-blocking:

{+c2c-product-name+} and User Write Blocking
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/downgrade-for-user-write-blocking.rst

#. If you enabled cluster-to-cluster replication, disable it.

#. If you enabled user write blocking, disable it:

   .. code-block:: javascript

      db.runCommand( { setUserWriteBlockMode: 1, global: false } )

#. Wait for the previous command to complete.

#. Downgrade the feature compatibility version using
   :dbcommand:`setFeatureCompatibilityVersion`.

For more information on {+c2c-full-product-name+}, see the 
`documentation <{+c2c-docs+}>`__.

Feature Compatibility in Arbiters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/arbiter-fcv.rst

For example, an arbiter in a MongoDB 5.0 cluster, has an FCV
value of 4.4.

Examples
--------

.. _view-fcv:
.. _get-feature-compat-version: 

Get FeatureCompatibilityVersion
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To view the ``featureCompatibilityVersion`` for a :binary:`~bin.mongod`
instance, run the :dbcommand:`getParameter` command on a 
:binary:`~bin.mongod` instance:

.. code-block:: javascript

   db.adminCommand(
      {
         getParameter: 1,
         featureCompatibilityVersion: 1
      }
    )

The output resembles:

.. code-block:: javascript

   {
     featureCompatibilityVersion: { version: '5.0' },
     ok: 1,
     '$clusterTime': {
       clusterTime: Timestamp({ t: 1660318752, i: 5 }),
       signature: {
         hash: Binary(Buffer.from("ce0cff3621e9b089fa6d8e9a1e1efc1a1ff15dab", "hex"), 0),
         keyId: Long("7129893797260951557")
       }
     },
     operationTime: Timestamp({ t: 1660318752, i: 5 })
   }

.. note::

   The operation is undefined on the :binary:`~bin.mongos` instances.
   
   On a sharded cluster that has access control enabled, you must
   connect to the shard as a :ref:`shard local user <shard-local-users>`
   to run the command.

.. _set-fcv:

Set Feature Compatibility Version on MongoDB 7.0 Deployments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enable 7.0 Backwards Incompatible Features
``````````````````````````````````````````

To enable the :ref:`7.0 features that persist data incompatible with
MongoDB 6.0 <7.0-downgrade-incompatible>`, set the feature compatibility
to ``"7.0"`` on the MongoDB 7.0 deployment:

.. note::

   Run the :dbcommand:`setFeatureCompatibilityVersion` command against
   the ``admin`` database.

   .. include:: /includes/list-run-command-targets.rst

.. code-block:: javascript

   db.adminCommand(
      {
         setFeatureCompatibilityVersion: "7.0",
         confirm: true
      }
   )

Disable 7.0 Backwards Incompatible Features
```````````````````````````````````````````

To disable the :ref:`7.0 features that persist data incompatible with
MongoDB 6.0 <7.0-downgrade-incompatible>`, set the feature compatibility
to ``"6.0"`` on the MongoDB 7.0 deployment:

.. note::

   Run the :dbcommand:`setFeatureCompatibilityVersion` command against
   the ``admin`` database.

   .. include:: /includes/list-run-command-targets.rst

   - ``"6.0"`` featureCompatibilityVersion is supported on MongoDB
     6.0 and MongoDB 7.0 deployments only.

.. code-block:: javascript

   db.adminCommand(
      {
         setFeatureCompatibilityVersion: "6.0",
         confirm: true
      }
   )

If run as part of the downgrade process from MongoDB 7.0 to MongoDB 
6.0, you must also remove all persisted features that are
:ref:`incompatible <7.0-downgrade-incompatible>` with 6.0. See the
appropriate downgrade procedures.

Set Feature Compatibility Version on MongoDB 6.0 Deployments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enable 6.0 Backwards Incompatible Features
``````````````````````````````````````````

To enable the :ref:`6.0 features that persist data incompatible with
MongoDB 5.0 <6.0-downgrade-considerations>`, set the feature compatibility
to ``"6.0"`` on the MongoDB 6.0 deployment:

.. note::

   Run the :dbcommand:`setFeatureCompatibilityVersion` command against
   the ``admin`` database.

   .. include:: /includes/list-run-command-targets.rst

.. code-block:: javascript

   db.adminCommand( { setFeatureCompatibilityVersion: "6.0" } )

Disable 6.0 Backwards Incompatible Features
```````````````````````````````````````````

To disable the :ref:`6.0 features that persist data incompatible with
MongoDB 5.0 <6.0-downgrade-considerations>`, set the feature compatibility
to ``"5.0"`` on the MongoDB 6.0 deployment:

.. note::

   Run the :dbcommand:`setFeatureCompatibilityVersion` command against
   the ``admin`` database.

   .. include:: /includes/list-run-command-targets.rst

   - ``"5.0"`` featureCompatibilityVersion is supported on MongoDB
     5.0 and MongoDB 6.0 deployments only.

.. code-block:: javascript

   db.adminCommand( { setFeatureCompatibilityVersion: "5.0" } )

If run as part of the downgrade process from MongoDB 6.0 to MongoDB 
5.0, you must also remove all persisted features that are
:ref:`incompatible <6.0-downgrade-considerations>` with 5.0. See the
appropriate downgrade procedures.

Set Feature Compatibility Version on MongoDB 5.0 Deployments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enable 5.0 Backwards Incompatible Features
``````````````````````````````````````````

To enable the :ref:`5.0 features that persist data incompatible with
MongoDB 4.4 <5.0-compatibility-enabled>`, set the feature compatibility
to ``"5.0"`` on the MongoDB 5.0 deployment:

.. note::

   Run the :dbcommand:`setFeatureCompatibilityVersion` command against
   the ``admin`` database.

   .. include:: /includes/list-run-command-targets.rst

.. code-block:: javascript

   db.adminCommand( { setFeatureCompatibilityVersion: "5.0" } )

Disable 5.0 Backwards Incompatible Features
```````````````````````````````````````````

To disable the :ref:`5.0 features that persist data incompatible with
MongoDB 4.4 <5.0-compatibility-enabled>`, set the feature compatibility
to ``"4.4"`` on the MongoDB 5.0 deployment:

.. note::

   Run the :dbcommand:`setFeatureCompatibilityVersion` command against
   the ``admin`` database.

   .. include:: /includes/list-run-command-targets.rst

   - ``"4.4"`` featureCompatibilityVersion is supported on MongoDB
     4.4 and MongoDB 5.0 deployments only.

.. code-block:: javascript

   db.adminCommand( { setFeatureCompatibilityVersion: "4.4" } )

If run as part of the downgrade process from MongoDB 5.0 to MongoDB
4.4, you must also remove all persisted features that are
:ref:`incompatible <5.0-compatibility-enabled>` with 4.4. See the
appropriate downgrade procedures.


Set Write Concern Timeout
~~~~~~~~~~~~~~~~~~~~~~~~~

The following example sets the optional write concern :ref:`wc-wtimeout`
field to 5000 (5 seconds).

.. note::

   Run the :dbcommand:`setFeatureCompatibilityVersion` command against
   the ``admin`` database.

   .. include:: /includes/list-run-command-targets.rst

.. code-block:: javascript

   db.adminCommand( {
      setFeatureCompatibilityVersion: "5.0",
      writeConcern: { wtimeout: 5000 }
   } )
