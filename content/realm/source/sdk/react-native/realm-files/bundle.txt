.. meta::
   :robots: noindex, nosnippet

.. _react-native-bundle-a-realm:

======================================
Bundle a Realm File - React Native SDK
======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Realm supports **bundling** realm files. When you bundle
a realm file, you include a database and all of its data in your
application download.

This allows users to start applications for the first time with a set of
initial data. For synced realms, bundling can avoid a lengthy
initial download the first time a user opens your application. Instead,
users must only download the synced changes that occurred since you
generated the bundled file.

.. TODO: remove admonition in DOCSP-28176

.. important:: Only Applies to Local Realms

   The content on this page only applies to local realms.

.. warning:: Does Not Apply to Expo Apps

   This procedure doesn't work for :ref:`React Native apps created with Expo
   <react-native-client-bootstrap-with-expo>`.

Procedure
---------

Follow these steps to create and bundle a realm file for your React Native application.

.. TODO: add back in DOCSP-28176
.. .. note:: Bundle Synchronized Realms

..    SDK version 10.12.0 introduced the ability to bundle synchronized realms.
..    Before version 10.12.0, you could only bundle local realms.

..    For details on considerations and limitations when bundling a synchronized realm,
..    :ref:`see the Bundle a Synchronized Realm section <react-native-bundle-synced-realm>`.

.. _react-native-create-a-realm-for-bundling:

.. procedure::

   .. step:: Create a Realm File to Bundle

      The easiest way to create a bundled realm for your React Native app is
      to write a separate Node.js script to create the bundle.

      You should use the ``realm`` package to create your bundle rather than ``@realm/react``.

      #. Build a temporary realm app that shares the data model of your
         application.

      #. Open a realm and add the data you wish to bundle. If using a
         synchronized realm, allow time for the realm to fully sync.

         .. literalinclude:: /examples/generated/rn/create-bundled-realm-rn.snippet.create-react-native-bundle.js
            :language: javascript
            :caption: create-bundled-realm.js

      #. Note the filepath of the bundled realm file. You'll need this file to use
         the bundled realm in your production application, as described in the next
         section.

         .. code-block::
            :caption: temp_realm_app
            :emphasize-lines: 2

            .
            ├── bundle.realm
            ... rest of files in _temp_ application

      .. _react-native-bundle-realm-file:

   .. step:: Bundle the Realm File with your App

      Now that you have a copy of the realm that contains the initial data,
      add the bundled realm file to your production application.
      Where you place the bundled realm differs for iOS and Android
      builds.

      .. tabs::

         .. tab:: Android
            :tabid: android

            #. Open up the ``android`` folder generated by React Native in Android Studio.
            #. In the :guilabel:`Project` tree, navigate to ``app > src > main``.
               Right click the ``main`` directory. Create a new subdirectory named ``assets``.
            #. Drag the bundled realm file into the ``assets`` directory.

         .. tab:: iOS
            :tabid: ios

            #. In Xcode, open up the ``your_project_name.xcworkspace`` file
               inside of the ``ios`` directory generated by React Native.
            #. Select your app in the project navigator and
               select the :guilabel:`Build Phases` tab in the project overview.
            #. Expand the :guilabel:`Copy Bundle Resources` item.
            #. Click the :guilabel:`+` icon.
            #. Click the :guilabel:`Add Other...` button.
            #. Find your bundled realm file and add it. Don't change the default settings,
               then select the :guilabel:`Finish` button.

      .. _react-native-open-a-realm-from-a-bundled-realm-file:

   .. step:: Open the Bundled Realm in your App

      The realm is now bundled and will be included when a user downloads the app.
      To add the bundled realm file to your app's document directory, call
      :realm-react-sdk:`Realm.copyBundledRealmFiles() 
      <classes/Realm-1.html#copyBundledRealmFiles>` before you open the realm.

      ``Realm.copyBundledRealmFiles()`` adds all ``*.realm`` files from the application
      bundle to the application documents directory. This method doesn't override
      any existing files with the same name, so it's safe to call every time the
      app starts.

      Open the bundled realm with the same name and configuration that you specified when you initially 
      created the bundled realm.

      Now that you have a copy of the realm included with your production
      application, you need to add code to use it.

      .. literalinclude:: /examples/generated/rn/App.snippet.open-bundle-realm-rn.js
         :language: javascript

.. TODO: bring back in refactored version in DOCSP-28176
.. TODO: Add includes/note-writecopy-same-type-sync-only.rst
.. .. _react-native-bundle-synced-realm:

.. Bundle a Synchronized Realm
.. ---------------------------

.. Generally, bundling a synchronized realm works the same as bundling a local-only realm.
.. However, there are some limitations to bundling realms that use Device Sync.

.. #. You can only bundle fully synchronized realms. Make sure that the realm has fully synchronized
..    with the server before bundling:

..    .. literalinclude:: /examples/generated/node/bundle-a-realm.snippet.fully-sync-before-copy.js
..       :language: javascript

.. #. When opening a bundled synchronized realm, you must use the same partition key
..    that was used in the original realm. If you use a different partition key, the SDK throws
..    an error when opening the bundled realm.

.. .. warning:: Synchronized Realm Bundling and Client Maximum Offline Time

.. If your application has :ref:`trimming <trimming>` enabled by configuring a
.. :ref:`client maximum offline time <client-maximum-offline-time>`,
.. users could experience a client reset the first time they open the
.. bundled realm file. This can happen if:

..    - the bundled realm file was generated more than
..      **client maximum offline time** days before the user syncs the
..      realm for the first time.

..    Users experiencing a client reset download the full state of the
..    realm from the application backend. This negates the
..    advantages of bundling a realm file. To prevent client resets and
..    preserve the advantages of realm file bundling:

..    - Avoid using a client maximum offline time in applications that
..      bundle a synchronized realm.

..    - If your application does use a client maximum offline time, ensure
..      that your application download always includes a recently synchronized
..      realm file. Generate a new file each application version,
..      and ensure that no version ever stays current for more than
..      **client maximum offline time** number of days.


