.. meta::
   :robots: noindex, nosnippet

.. _cpp-crud-create:

=======================
CRUD - Create - C++ SDK
=======================

.. meta:: 
   :keywords: code example
   :description: Learn how to create objects with the C++ SDK.

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _cpp-write-transactions:

Write Transactions
------------------

Realm uses a highly efficient storage engine
to persist objects. You can **create** objects in a realm,
**update** objects in a realm, and eventually **delete**
objects from a realm. Because these operations modify the
state of the realm, we call them writes.

Realm handles writes in terms of **transactions**. A
transaction is a list of read and write operations that
Realm treats as a single indivisible operation. In other
words, a transaction is *all or nothing*: either all of the
operations in the transaction succeed or none of the
operations in the transaction take effect. 

All writes must happen in a transaction.

A realm allows only one open transaction at a time. Realm
blocks other writes on other threads until the open
transaction is complete. Consequently, there is no race
condition when reading values from the realm within a
transaction.

When you are done with your transaction, Realm either
**commits** it or **cancels** it:

- When Realm **commits** a transaction, Realm writes
  all changes to disk. For synced realms, the SDK queues the change
  for synchronization with Atlas Device Sync.
- When Realm **cancels** a write transaction or an operation in
  the transaction causes an error, all changes are discarded
  (or "rolled back").

Create a New Object
-------------------

.. _cpp-create-a-new-object:

Create an Object
~~~~~~~~~~~~~~~~

To create an object, you must instantiate it using the ``realm`` namespace. 
Move the object into the realm using the
:cpp-sdk:`Realm.add() function <structrealm_1_1db.html>` 
inside of a write transaction.

When you move an object into a realm, this consumes the object as an 
rvalue. You must use the managed object for any data access or observation.
In this example, copying the ``dog`` object into the realm consumes 
it as an rvalue. You can return the managed object to continue to work 
with it.

.. literalinclude:: /examples/generated/cpp/crud.snippet.create-an-object.cpp
   :language: cpp

Model
`````

For more information about modeling an object, refer to: 
:ref:`cpp-define-a-new-object-type`.

.. literalinclude:: /examples/generated/cpp/crud.snippet.dog-model-shows-namespace.cpp
   :language: cpp

.. _cpp-create-an-embedded-object:

Create an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~

To create an embedded object, assign the raw pointer of the embedded 
object to a parent object's property. Move the parent object into 
the realm using the :cpp-sdk:`Realm.add() function <structrealm_1_1db.html>` 
inside of a write transaction.

In this example, we assign the raw pointer of the embedded object - 
``ContactDetails *`` - to the embedded object property of the parent 
object - ``Business.contactDetails``.

Then, we add the ``business`` object to the realm. This copies the 
``business`` and ``contactDetails`` objects to the realm. 

Because ``ContactDetails`` is an embedded object, it does not have
its own lifecycle independent of the main ``Business`` object. 
If you delete the ``Business`` object, this also deletes the 
``ContactDetails`` object.

.. literalinclude:: /examples/generated/cpp/crud.snippet.create-embedded-object.cpp
   :language: cpp

Model
`````

For more information about modeling an embedded object, refer to: 
:ref:`cpp-embedded-object`.

.. literalinclude:: /examples/generated/cpp/crud.snippet.model-with-embedded-object.cpp
   :language: cpp

.. _cpp-create-an-object-with-to-one-relationship:

Create an Object with a To-One Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To create an object with a to-one relationship to another object, 
assign the raw pointer of the related object to the relationship 
property of the main object. Move the object into the realm using 
the :cpp-sdk:`Realm.add() function <structrealm_1_1db.html>` 
inside of a write transaction.

In this example, we assign the raw pointer of the related object - 
``FavoriteToy *`` - to the relationship property of the main object
- ``Dog.favoriteToy``. Then, when we add the ``dog`` object to the 
realm, this copies both the ``dog`` and ``favoriteToy`` to the realm.

The related ``favoriteToy`` object has its own lifecycle independent 
of the main ``dog`` object. If you delete the main object, the related 
object remains.

.. literalinclude:: /examples/generated/cpp/relationships.snippet.create-to-one-relationship.cpp
   :language: cpp

You can optionally create an inverse relationship to refer to the main object
from the related object. For more information, refer to: 
:ref:`cpp-create-an-object-with-inverse-relationship`.

Model
`````

For more information about modeling a to-one relationship, refer to: 
:ref:`cpp-define-a-to-one-relationship-property`.

.. literalinclude:: /examples/generated/cpp/relationships.snippet.to-one-relationship.cpp
   :language: cpp

.. _cpp-create-an-object-with-to-many-relationship:

Create an Object with a To-Many Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To create an object with a to-many relationship to one or more objects:

- Initialize the main object and the related objects
- Use the :cpp-sdk:`push_back 
  <structrealm_1_1managed_3_01std_1_1vector_3_01T_01_5_01_4_01_4.html>`
  member function available to the Realm object lists
  to append the raw pointers of the related objects to the main object's 
  list property
- Move the object into the realm using the 
  :cpp-sdk:`Realm.add() function <structrealm_1_1db.html>` 
  inside of a write transaction.

In this example, we append the raw pointers of the related objects - 
``Employee *`` - to the relationship property of the main object
- ``Company.employees``. This creates a one-way connection from the 
``Company`` object to the ``Employee`` objects.

Then, we add the ``Company`` to the realm. This copies the 
``Company`` and ``Employee`` objects to the realm. 

The related ``Employee`` objects have their own lifecycle independent 
of the main ``Company`` object. If you delete the main object, the 
related objects remain.

.. literalinclude:: /examples/generated/cpp/relationships.snippet.create-to-many-relationship.cpp
   :language: cpp

You can optionally create an inverse relationship to refer to the main object
from the related object. For more information, refer to: 
:ref:`cpp-create-an-object-with-inverse-relationship`.

Model
`````

For more information about modeling a to-many relationship, refer to: 
:ref:`cpp-define-a-to-many-relationship-property`.

.. literalinclude:: /examples/generated/cpp/crud.snippet.employee-model.cpp
   :language: cpp

.. literalinclude:: /examples/generated/cpp/relationships.snippet.to-many-relationship.cpp
   :language: cpp

.. _cpp-create-an-object-with-inverse-relationship:

Create an Object with an Inverse Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To create an object with a inverse relationship to another object, 
assign the raw pointer of the related object to the relationship 
property of the main object. Move the object into the realm using the 
:cpp-sdk:`Realm.add() function <structrealm_1_1db.html>` 
inside of a write transaction.

In this example, we create two ``Person`` objects that each have a to-one 
relationship to the same ``Dog`` object. The ``Dog`` has an inverse 
relationship to each ``Person`` object. The inverse relationship backlink 
is automatically updated when a linked ``Person`` object updates its 
``Dog`` relationship.

.. literalinclude:: /examples/generated/cpp/relationships.snippet.create-inverse-relationship.cpp
   :language: cpp

Model
`````

For more information about modeling an inverse relationship, refer to: 
:ref:`cpp-define-an-inverse-relationship-property`.

.. literalinclude:: /examples/generated/cpp/relationships.snippet.define-inverse-relationship.cpp
   :language: cpp

.. _cpp-create-object-map-property:

Create an Object with a Map Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you create an object that has a 
:cpp-sdk:`map property <structrealm_1_1managed_3_01std_1_1map_3_01std_1_1string_00_01T_01_4_00_01void_01_4.html>`, 
you can set the values for keys in a few ways: 

- Set keys and values on the object and then add the object to the realm
- Set the object's keys and values directly inside a write transaction

.. literalinclude:: /examples/generated/cpp/crud.snippet.create-map-object.cpp
   :language: cpp

.. include:: /includes/map-key-string-limitations.rst

.. literalinclude:: /examples/generated/cpp/crud.snippet.percent-encode-disallowed-characters.cpp
   :language: cpp

Model
`````

For more information about supported map data types, refer to: 
:ref:`cpp-map`.

.. literalinclude:: /examples/generated/cpp/crud.snippet.model-with-map-property.cpp
   :language: cpp

.. _cpp-create-object-set-property:

Create an Object with a Set Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can create objects that contain 
:cpp-sdk:`set <structrealm_1_1managed_3_01std_1_1set_3_01T_01_5_01_4_01_4.html>` 
properties as you would any Realm object, but you can only mutate a set 
property within a write transaction. This means you can only set the value(s) 
of a set property within a write transaction.

.. literalinclude:: /examples/generated/cpp/crud.snippet.write-set-object.cpp
   :language: cpp

Model
`````

For more information about supported set data types, refer to: 
:ref:`cpp-set-collections`.

.. literalinclude:: /examples/generated/cpp/crud.snippet.model-with-set-property.cpp
   :language: cpp

.. _cpp-create-asymmetric-object:

Create an Asymmetric Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can create an asymmetric object that syncs unidirectionally via
:ref:`Data Ingest <optimize-data-ingest>` to the Atlas 
database linked to your Atlas App Services App. You cannot access an
asymmetric object locally, remove it from a realm, or query for it.

.. literalinclude:: /examples/generated/cpp/asymmetric-sync.snippet.create-asymmetric-object.cpp
   :language: cpp

For more information about working with asymmetric objects, refer to
:ref:`cpp-stream-data-to-atlas`.

Model
`````

For more information about defining an asymmetric object, refer to: 
:ref:`cpp-define-asymmetric-object`.

.. literalinclude:: /examples/generated/cpp/asymmetric-sync.snippet.asymmetric-object.cpp
   :language: cpp
