=====================
db.collection.watch()
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Definition
----------

.. method:: db.collection.watch( pipeline, options )


   .. include:: /includes/fact-mongo-shell-method.rst


   *For replica sets and sharded clusters only*

   Opens a :ref:`change stream cursor <changeStreams>` on the 
   collection. 


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``pipeline``
   
        - array
   
        - :doc:`Aggregation pipeline </core/aggregation-pipeline>` consisting
          of one or more of the following aggregation stages:
          
          .. include:: /includes/extracts/changestream-available-pipeline-stages.rst
          
          Specify a pipeline to filter/modify the change events output.
          
          .. include:: /includes/extracts/4.2-changes-change-stream-modification-error.rst
          
          
   
      * - ``options``
   
        - document
   
        - Optional. Additional options that modify the behavior of
          :method:`~db.collection.watch()`.
          
          You must pass an empty array ``[]`` to the ``pipeline`` parameter if
          you are not specifying a pipeline but are passing the ``options``
          document.
          
          
   


   The ``options`` document can contain the following fields and values:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``resumeAfter``
   
        - document
   
        - Optional. Directs :method:`~db.collection.watch` to attempt resuming
          notifications starting after the operation specified in the resume
          token. 
          
          Each change stream event document includes a resume token as the
          ``_id`` field. Pass the *entire* ``_id`` field of the change event
          document that represents the operation you want to resume after.
          
          ``resumeAfter`` is mutually exclusive with ``startAfter`` and
          ``startAtOperationTime``.
          
          
   
      * - ``startAfter``
   
        - document
   
        - Optional. Directs :method:`~db.collection.watch` to attempt starting a new
          change stream after the operation specified in the resume token.
          Allows notifications to resume after an invalidate event.
                  
          Each change stream event document includes a resume token as the
          ``_id`` field. Pass the *entire* ``_id`` field of the change event
          document that represents the operation you want to resume after.
                  
          ``startAfter`` is mutually exclusive with ``resumeAfter`` and
          ``startAtOperationTime``.
          
          .. versionadded:: 4.2
          
          
   
      * - ``fullDocument``
   
        - string
   
        - Optional. By default, :method:`~db.collection.watch()` returns the delta of
          those fields modified by an update operation, instead of the entire
          updated document.
          
          Set ``fullDocument`` to ``"updateLookup"`` to direct
          :method:`~db.collection.watch()` to look up the most current 
          majority-committed version of the updated document.
          :method:`~db.collection.watch()` returns a ``fullDocument`` field with
          the document lookup in addition to the ``updateDescription`` delta.
          
          
   
      * - ``batchSize``
   
        - int
   
        - Optional. Specifies the maximum number of change events to return in each
          batch of the response from the MongoDB cluster. 
          
          Has the same functionality as :method:`cursor.batchSize()`.
          
          
   
      * - ``maxAwaitTimeMS``
   
        - int
   
        - Optional. The maximum amount of time in milliseconds the server waits for new
          data changes to report to the change stream cursor before returning an
          empty batch.
          
          Defaults to ``1000`` milliseconds.
          
          
   
      * - ``collation``
   
        - document
   
        - Optional. Pass a :ref:`collation document <collation-document-fields>`
          to specify a :doc:`collation </reference/collation>` for the 
          change stream cursor.
          
          Starting in MongoDB 4.2, defaults to ``simple`` binary comparison if
          omitted. In earlier versions, change streams opened on a single
          collection would inherit the collection's default collation.
          
          
   
      * - ``startAtOperationTime``
   
        - Timestamp
   
        - Optional. The starting point for the change stream. If the specified starting
          point is in the past, it must be in the time range of the oplog. To
          check the time range of the oplog, see
          :method:`rs.printReplicationInfo()`.
          
          ``startAtOperationTime`` is mutually exclusive with ``resumeAfter``
          and ``startAfter``.
          
          
          
          .. versionadded:: 4.0
          
          
          
   


   :returns:
      A :term:`cursor` that remains open as long as a connection to the
      MongoDB deployment remains open *and* the collection exists.
      See :doc:`/reference/change-events` for examples of change
      event documents.

   .. seealso::
      
      :method:`db.watch()` and :method:`Mongo.watch()`


Availability
------------

Deployment
~~~~~~~~~~

:method:`db.collection.watch()` is available for replica set and
sharded cluster deployments :

- For a replica set, you can issue :method:`db.collection.watch()` on
  any data-bearing member.

- For a sharded cluster, you must issue :method:`db.collection.watch()`
  on a :binary:`~bin.mongos` instance.

Storage Engine
~~~~~~~~~~~~~~

You can only use :method:`db.collection.watch()` with the :ref:`Wired
Tiger storage engine <storage-wiredtiger>`.

Read Concern ``majority`` Support
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/changestream-rc-majority-4.2.rst

Behavior
--------

- :method:`db.collection.watch()` only notifies on data changes that have
  persisted to a majority of data-bearing members.

- .. include:: /includes/extracts/changestream-cursor-open.rst

Resumability
~~~~~~~~~~~~

.. include:: /includes/extracts/changestream-resume.rst

.. topic:: Resume Token

   .. include:: /includes/extracts/changestream-resume-token-versions-4.2-greater.rst

   .. include:: /includes/extracts/changestream-resume-token-hex-change.rst

.. |watchmethod| replace:: :method:`db.collection.watch()`


Full Document Lookup of Update Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/changestream-full-document-lookup.rst

Access Control
--------------

When running with access control, the user must have the
:authaction:`find` and :authaction:`changeStream` privilege actions on
the :ref:`collection resource <resource-document>`. That is, a user must
have a :ref:`role <roles>` that grants the following :ref:`privilege
<privileges>`:

.. code-block:: javascript

   { resource: { db: <dbname>, collection: <collection> }, actions: [ "find", "changeStream" ] }


The built-in :authrole:`read` role provides the appropriate
privileges.

Examples
--------

Open a Change Stream
~~~~~~~~~~~~~~~~~~~~

The following operation opens a change stream cursor against the 
``data.sensors`` collection:

.. code-block:: javascript

   watchCursor = db.getSiblingDB("data").sensors.watch()

Iterate the cursor to check for new events. Use the
:method:`cursor.isExhausted()` method to ensure the loop only exits
if the change stream cursor is closed *and* there are no objects
remaining in the latest batch:

.. code-block:: javascript

   while (!watchCursor.isExhausted()){
      if (watchCursor.hasNext()){
         printjson(watchCursor.next());
      }
   }

For complete documentation on change stream output, see
:ref:`change-stream-output`.

Change Stream with Full Document Update Lookup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Set the ``fullDocument`` option to ``"updateLookup"`` to direct the
change stream cursor to lookup the most current majority-committed
version of the document associated to an update change stream event.

The following operation opens a change stream cursor against
the ``data.sensors`` collection using the 
``fullDocument : "updateLookup"`` option.

.. code-block:: javascript

   watchCursor = db.getSiblingDB("data").sensors.watch(
      [],
      { fullDocument : "updateLookup" }
   )

Iterate the cursor to check for new events. Use the
:method:`cursor.isExhausted()` method to ensure the loop only exits
if the change stream cursor is closed *and* there are no objects
remaining in the latest batch:

.. code-block:: javascript

   while (!watchCursor.isExhausted()){
      if (watchCursor.hasNext()){
         printjson(watchCursor.next());
      }
   }

For any update operation, the change event returns the result of the
document lookup in the ``fullDocument`` field.

For an example of the full document update output, see  :ref:`change
stream update event <change-streams-update-event>`.

For complete documentation on change stream output, see
:ref:`change-stream-output`.

Change Stream with Aggregation Pipeline Filter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   .. include:: /includes/extracts/4.2-changes-change-stream-modification-error.rst

The following operation opens a change stream cursor against the 
``data.sensors`` collection using an aggregation pipeline to
filter only ``insert`` events:

.. code-block:: javascript

   watchCursor = db.getSiblingDB("data").sensors.watch(
      [
         { $match : {"operationType" : "insert" } }
      ]
   )

Iterate the cursor to check for new events. Use the
:method:`cursor.isExhausted()` method to ensure the loop only exits
if the change stream cursor is closed *and* there are no objects
remaining in the latest batch:

.. code-block:: javascript

   while (!watchCursor.isExhausted()){
      if (watchCursor.hasNext()){
         printjson(watchCursor.next());
      }
   }

The change stream cursor only returns change events where the 
``operationType`` is ``insert``. For complete documentation on
change stream output, see :ref:`change-stream-output`. 

Resuming a Change Stream
~~~~~~~~~~~~~~~~~~~~~~~~

Every  document returned by a change stream cursor includes a resume
token as the ``_id`` field. To resume a change stream, pass the entire
``_id`` document of the change event you want to resume from to
either the ``resumeAfter`` or ``startAfter`` option of
:method:`~db.collection.watch()`.

The following operation resumes a change stream cursor against the 
``data.sensors`` collection using a resume token. This
assumes that the operation that generated the resume token has not
rolled off the cluster's oplog. 

.. code-block:: javascript

   let watchCursor = db.getSiblingDB("data").sensors.watch();
   let firstChange;

   while (!watchCursor.isExhausted()) {
      if (watchCursor.hasNext()) {
        firstChange = watchCursor.next();
        break;
      }
   }

   watchCursor.close();

   let resumeToken = firstChange._id;

   resumedWatchCursor = db.getSiblingDB("data").sensors.watch(
   [],
      { resumeAfter : resumeToken }
   )

Iterate the cursor to check for new events. Use the
:method:`cursor.isExhausted()` method to ensure the loop only exits
if the change stream cursor is closed *and* there are no objects
remaining in the latest batch:

.. code-block:: javascript

   while (!resumedWatchCursor.isExhausted()){
      if (resumedWatchCursor.hasNext()){
         printjson(watchCursor.next());
      }
   }

See :ref:`change-stream-resume` for complete documentation on
resuming a change stream.

