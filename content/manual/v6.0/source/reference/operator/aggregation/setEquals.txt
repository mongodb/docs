========================
$setEquals (aggregation)
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $setEquals

   Compares two or more arrays and returns ``true`` if they have the
   same distinct elements and ``false`` otherwise.

   :expression:`$setEquals` has the following syntax:

   .. code-block:: javascript

      { $setEquals: [ <expression1>, <expression2>, ... ] }

   The arguments can be any valid :ref:`expression
   <aggregation-expressions>` as long as they each resolve to an array.
   For more information on expressions, see
   :ref:`aggregation-expressions`.

Behavior
--------

.. |set-operator-name| replace:: :expression:`$setEquals`

.. include:: /includes/important-set-operator-semantics.rst
   :end-before: set-output

.. include:: /includes/extracts/fact-agg-top-level-expressions-setEquals.rst

.. list-table::
   :header-rows: 1
   :widths: 85 15

   * - Example

     - Result

   * - ``{ $setEquals: [ [ "a", "b", "a" ], [ "b", "a" ] ] }``

     - ``true``

   * - ``{ $setEquals: [ [ "a", "b" ], [ [ "a", "b" ] ] ] }``

     - ``false``

Example
-------

Consider a ``bakeryOrders`` collection with the following documents:

.. code-block:: javascript

    db.bakeryOrders.insertMany( [
       { _id: 0, cakes: ["chocolate", "vanilla"], cupcakes: ["chocolate", "vanilla"] },
       { _id: 1, cakes: ["chocolate", "vanilla"], cupcakes: ["vanilla", "chocolate"] },
       { _id: 2, cakes: ["chocolate", "chocolate"], cupcakes: ["chocolate"] },
       { _id: 3, cakes: ["vanilla"], cupcakes: ["chocolate"] },
       { _id: 4, cakes: ["vanilla"], cupcakes: [] }
    ] )

The following operation uses the :expression:`$setEquals` operator to
determine if the ``cakes`` array and the ``cupcakes`` array in each order
contain the same flavors:

.. code-block:: javascript

   db.bakeryOrders.aggregate(
      [
         { 
            $project: { 
               _id: 0, 
               cakes: 1, 
               cupcakes: 1, 
               sameFlavors: { $setEquals: [ "$cakes", "$cupcakes" ] } 
            } 
         }
      ] )

.. note:: $project

   The :pipeline:`$project` stage specifies which fields are included
   in the output documents. In this example, the :pipeline:`$project` 
   stage:

   - Excludes the ``_id`` field from the output.
   - Includes the ``cakes`` and ``cupcakes`` fields in the output.
   - Outputs the result of the ``$setEquals`` operator in a new field 
     called ``sameFlavors``.

The operation returns the following results:

.. code-block:: javascript

   {
    cakes: [ "chocolate", "vanilla" ],
    cupcakes: [ "chocolate", "vanilla" ],
    sameFlavors: true
   },
   {
    cakes: [ "chocolate", "vanilla" ],
    cupcakes: [ "vanilla", "chocolate" ],
    sameFlavors: true
   },
   { 
    cakes: [ "chocolate", "chocolate" ],
    cupcakes: [ "chocolate" ],
    sameFlavors: true
   },
   {
    cakes: [ "vanilla" ],
    cupcakes: [ "chocolate" ],
    sameFlavors: false
   },
   { 
      cakes: [ "vanilla" ], 
      cupcakes: [], 
      sameFlavors: false 
   }