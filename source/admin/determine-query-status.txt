.. _determine-query-status:

===============================================
Determine Status of {+data-lake-short+} Queries
===============================================

.. default-domain:: mongodb

.. include:: /includes/fact-data-lake-beta.rst

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can determine the status of a running query using  
:manual:`$currentOp </reference/operator/aggregation/currentOp/>` (aggregation). 
To run :manual:`$currentOp 
</reference/operator/aggregation/currentOp/index.html#pipe._S_currentOp>`, use 
the :manual:`db.aggregate 
</reference/method/db.aggregate/#db.aggregate>` helper. 
:manual:`$currentOp </reference/operator/aggregation/currentOp/>` must be 
run against the ``admin`` database. 

.. _adl-currentop-syntax: 

Syntax 
------

.. code-block:: json 

   db.aggregate([{$currentOp: {} }])

.. _adl-currentop-output:

Output 
------

:manual:`$currentOp </reference/operator/aggregation/currentOp/>` returns 
documents with the following fields: 

.. list-table:: 
   :header-rows: 1
   :widths: 30 10 60 

   * - Field
     - Type
     - Description

   * - ``$currentOp.type``
     - string
     - Type of operation. Value is always ``op``. 

   * - ``$currentOp.client``
     - string
     - IP address (or hostname) and the ephemeral port of the client 
       connection where the operation originates.

   * - ``$currentOp.clientMetadata``
     - Document
     - Additional client information such as the client: 
	   .. container::
	      - Application name 
	      - Driver name and version number
	      - Operating System name, type, architecture, and version number

   * - ``$currentOp.active``
     - boolean
     - Specifies whether the operation has started. Value is ``true`` if the 
       operation has started or completed and ``false`` if the operation is idle.

   * - ``$currentOp.currentOpTime``
     - :manual:`ISODate </reference/glossary/#term-isodate>`
     - Start time of the operation.

   * - ``$currentOp.ns``
     - string 
     - :manual:`Namespace </reference/glossary/#term-namespace>` that the 
       opration targets. A namespace consists of the database name and the 
       collection name concatenated with a dot (``.``); that is, 
       ``"<database>.<collection>"``.

   * - ``$currentOp.command``
     - Document
     - A document containing the :manual:`command </reference/command/>` object 
       associated with this operation. 

   * - ``$currentOp.msg``
     - string
     - A message that describes the status and progress of the operation.

   * - ``$currentOp.progress``
     - Document
     - A document that contains the amount of work done for the operation.

   * - ``$currentOp.progress.workDone``
     - integer
     - A number that increases as documents move through the pipeline, 
       indicating that progress has been made toward the completion of the 
       query. This number is not a percentage and cannot be used to estimate 
       how much work remains.

.. _adl-currentop-egs:

Examples 
--------

For the example below, suppose the following query is being run on the 
``airbnb`` collection in the ``sample`` database described in the 
:doc:`Getting Started tutorial 
</tutorial/configure-database-collections/>`.

.. code-block:: json 

   db.airbnb.find( { "address.market" : "Porto", "review_scores.review_scores_rating": {$gt: 79}})

The following example returns information on the previous query being run on the 
``airbnb`` collection in the ``sample`` database: 

.. code-block:: json 

   db.aggregate([{$currentOp: {} }])

:manual:`$currentOp </reference/operator/aggregation/currentOp/>` returns the 
following documents. The ``workDone`` field shows that 770 documents had been 
processed at the time that ``$currentOp`` was run.

.. code-block:: json 
   :copyable: false 
   :emphasize-lines: 37

   {
	 "type" : "op",
	 "client" : "73.231.201.205:62351",
	 "clientMetadata" : {
		"application" : {
			"name" : "MongoDB Shell"
		},
		"driver" : {
			"name" : "MongoDB Internal Client",
			"version" : "4.2.0"
		},
		"os" : {
			"type" : "Darwin",
			"name" : "Mac OS X",
			"architecture" : "x86_64",
			"version" : "18.7.0"
		}
	 },
	 "active" : true,
	 "currentOpTime" : ISODate("2020-03-26T12:51:43.291Z"),
	 "ns" : "sample.airbnb",
	 "command" : {
		"find" : "airbnb",
		"filter" : {
			"address.market" : "Porto",
			"review_scores.review_scores_rating" : {
				"$gt" : 79
			}
		},
		"lsid" : {
			"id" : UUID("2211f8ac-56b2-4ba4-bb0c-2e5dd5b7cc21")
		},
		"$db" : "sample"
	 },
	 "msg" : "work done: 770",
	 "progress" : {
		"workDone" : 770
	 }
   }
   {
	 "type" : "op",
	 "client" : "73.231.201.205:62353",
	 "clientMetadata" : {
		"application" : {
			"name" : "MongoDB Shell"
		},
		"driver" : {
			"name" : "MongoDB Internal Client",
			"version" : "4.2.0"
		},
		"os" : {
			"type" : "Darwin",
			"name" : "Mac OS X",
			"architecture" : "x86_64",
			"version" : "18.7.0"
		}
	 },
	 "active" : true,
	 "currentOpTime" : ISODate("2020-03-26T12:51:47.380Z"),
	 "ns" : "admin.$cmd.aggregate",
	 "command" : {
		"aggregate" : 1,
		"pipeline" : [
			{
				"$currentOp" : {
					
				}
			}
		],
		"cursor" : {
			
		},
		"lsid" : {
			"id" : UUID("045ea383-65d7-4e88-a989-37b7a8da23bc")
		},
		"$db" : "admin"
	 },
	 "msg" : "work done: 0",
	 "progress" : {
		"workDone" : 0
	 }
   }
