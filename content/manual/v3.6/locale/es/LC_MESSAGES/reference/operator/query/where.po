# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2013-12-16 23:06+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/operator/query/where.txt:3
msgid "$where"
msgstr ""

#: ../source/reference/operator/query/where.txt:14
msgid "Definition"
msgstr ""

#: ../source/reference/operator/query/where.txt:18
msgid ""
"Use the :query:`$where` operator to pass either a string containing a "
"JavaScript expression or a full JavaScript function to the query system. "
"The :query:`$where` provides greater flexibility, but requires that the "
"database processes the JavaScript expression or function for *each* "
"document in the collection. Reference the document in the JavaScript "
"expression or function using either ``this`` or ``obj`` ."
msgstr ""

#: ../source/reference/operator/query/where.txt:27
msgid ""
"The :query:`$expr` operator allows the use of :ref:`aggregation "
"expressions <aggregation-framework>` within the query language. "
":query:`$expr` is faster than :query:`$where` because it does not execute"
" JavaScript and should be preferred where possible."
msgstr ""

#: ../source/reference/operator/query/where.txt:35
msgid "Behavior"
msgstr ""

#: ../source/reference/operator/query/where.txt:38
msgid "Restrictions"
msgstr ""

#: ../source/includes/fact-group-map-reduce-where-limitations-in-24.rst:1
msgid ""
":dbcommand:`map-reduce operations <mapReduce>`, the :dbcommand:`group` "
"command, and :query:`$where` operator expressions **cannot** access "
"certain global functions or properties, such as ``db``, that are "
"available in the :binary:`~bin.mongo` shell."
msgstr ""

#: ../source/includes/fact-group-map-reduce-where-limitations-in-24.rst:6
msgid ""
"The following JavaScript functions and properties **are available** to "
":dbcommand:`map-reduce operations <mapReduce>`, the :dbcommand:`group` "
"command, and :query:`$where` operator expressions:"
msgstr ""

#: ../source/includes/fact-group-map-reduce-where-limitations-in-24.rst:13
msgid "Available Properties"
msgstr ""

#: ../source/includes/fact-group-map-reduce-where-limitations-in-24.rst:14
msgid "Available Functions"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``args``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``MaxKey``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``MinKey``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``assert()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``BinData()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``DBPointer()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``DBRef()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``doassert()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``emit()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``gc()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``HexData()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``hex_md5()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``isNumber()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``isObject()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``ISODate()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``isString()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``Map()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``MD5()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``NumberInt()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``NumberLong()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``ObjectId()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``print()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``printjson()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``printjsononeline()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``sleep()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``Timestamp()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``tojson()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``tojsononeline()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``tojsonObject()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``UUID()``"
msgstr ""

#: ../source/reference/operator/query/where.txt
msgid "``version()``"
msgstr ""

#: ../source/reference/operator/query/where.txt:43
msgid "``elemMatch``"
msgstr ""

#: ../source/reference/operator/query/where.txt:45
msgid ""
"Only apply the :query:`$where` query operator to top-level documents. The"
" :query:`$where` query operator will not work inside a nested document, "
"for instance, in an :query:`$elemMatch` query."
msgstr ""

#: ../source/reference/operator/query/where.txt:50
msgid "Considerations"
msgstr ""

#: ../source/reference/operator/query/where.txt:52
msgid "Do not use global variables."
msgstr ""

#: ../source/reference/operator/query/where.txt:54
msgid ""
":query:`$where` evaluates JavaScript and cannot take advantage of "
"indexes. Therefore, query performance improves when you express your "
"query using the standard MongoDB operators (e.g., :query:`$gt`, "
":query:`$in`)."
msgstr ""

#: ../source/reference/operator/query/where.txt:59
msgid ""
"In general, you should use :query:`$where` only when you can't express "
"your query using another operator. If you must use :query:`$where`, try "
"to include at least one other standard query operator to filter the "
"result set. Using :query:`$where` alone requires a collection scan."
msgstr ""

#: ../source/reference/operator/query/where.txt:65
msgid ""
"Using normal non\\-:query:`$where` query statements provides the "
"following performance advantages:"
msgstr ""

#: ../source/reference/operator/query/where.txt:68
msgid ""
"MongoDB will evaluate non\\-:query:`$where` components of query before "
":query:`$where` statements. If the non\\-:query:`$where` statements match"
" no documents, MongoDB will not perform any query evaluation using "
":query:`$where`."
msgstr ""

#: ../source/reference/operator/query/where.txt:73
msgid "The non\\-:query:`$where` query statements may use an :term:`index`."
msgstr ""

#: ../source/reference/operator/query/where.txt:77
msgid "Example"
msgstr ""

#: ../source/reference/operator/query/where.txt:79
msgid "Consider the following documents in the ``users`` collection:"
msgstr ""

#: ../source/reference/operator/query/where.txt:96
msgid ""
"The following example uses :query:`$where` and the ``hex_md5()`` "
"JavaScript function to compare the value of the ``name`` field to an MD5 "
"hash and returns any matching document."
msgstr ""

#: ../source/reference/operator/query/where.txt:106
msgid "The operation returns the following result:"
msgstr ""

# d325e29a55974853a89d5114ae1a9bbf
#~ msgid ""
#~ "Do not write to the database "
#~ "within the :query:`$where` JavaScript "
#~ "function."
#~ msgstr ""

# 967d13d7bdfc4951bb450c58f781b4d3
#~ msgid ""
#~ "In general, you should use "
#~ ":query:`$where` only when you can't "
#~ "express your query using another "
#~ "operator. If you must use "
#~ ":query:`$where`, try to include at least"
#~ " one other standard query operator to"
#~ " filter the result set. Using "
#~ ":query:`$where` alone requires a table "
#~ "scan."
#~ msgstr ""

# 14aff6aa66b945218e0b3331cba885ff
#~ msgid "Consider the following examples:"
#~ msgstr ""

# edc8ef2b92944388b4566800a6a572e0
#~ msgid ""
#~ "Additionally, if the query consists only"
#~ " of the :query:`$where` operator, you "
#~ "can pass in just the JavaScript "
#~ "expression or JavaScript functions, as "
#~ "in the following examples:"
#~ msgstr ""

# fe32837b45224ab2a108b8fd4b21be67
#~ msgid ""
#~ "You can include both the standard "
#~ "MongoDB operators and the :query:`$where` "
#~ "operator in your query, as in the"
#~ " following examples:"
#~ msgstr ""

# 92e3bccf3e00437394a0c46fd5e9000f
#~ msgid ""
#~ "In MongoDB 2.4, :dbcommand:`map-reduce "
#~ "operations <mapReduce>`, the :dbcommand:`group` "
#~ "command, and :query:`$where` operator "
#~ "expressions **cannot** access certain global"
#~ " functions or properties, such as "
#~ "``db``, that are available in the "
#~ ":program:`mongo` shell."
#~ msgstr ""

# 673512e9b556424ebf11e6d18e3e1a0c
#~ msgid ""
#~ "When upgrading to MongoDB 2.4, you "
#~ "will need to refactor your code if"
#~ " your :dbcommand:`map-reduce operations "
#~ "<mapReduce>`, :dbcommand:`group` commands, or "
#~ ":query:`$where` operator expressions include "
#~ "any global shell functions or properties"
#~ " that are no longer available, such"
#~ " as ``db``."
#~ msgstr ""

# f6beb7bc1a4e490b951a04f86ef53203
#~ msgid ""
#~ "The following JavaScript functions and "
#~ "properties **are available** to :dbcommand"
#~ ":`map-reduce operations <mapReduce>`, the "
#~ ":dbcommand:`group` command, and :query:`$where` "
#~ "operator expressions in MongoDB 2.4:"
#~ msgstr ""

#~ msgid "Map Reduce"
#~ msgstr ""

#~ msgid "Examples"
#~ msgstr ""

