#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/distributed-queries.txt:6
msgid "Distributed Queries"
msgstr "分布式查询"

#: ../source/core/distributed-queries.txt:20
msgid "Read Operations to Sharded Clusters"
msgstr "分片集群中的读操作"

#: ../source/core/distributed-queries.txt:22
msgid ""
":term:`Sharded clusters <sharded cluster>` allow you to partition a data set "
"among a cluster of :program:`mongod` instances in a way that is nearly "
"transparent to the application. For an overview of sharded clusters, see the :"
"doc:`/sharding` section of this manual."
msgstr ":term:`分片集群<sharded cluster>` "

#: ../source/core/distributed-queries.txt:27
msgid ""
"For a sharded cluster, applications issue operations to one of the :program:"
"`mongos` instances associated with the cluster."
msgstr ""
"对于一个分片集群而言，应用会将操作分发到与该集群相关的  :program:`mongos` 实例"
"之一。"

#: ../source/core/distributed-queries.txt:32
msgid ""
"Read operations on sharded clusters are most efficient when directed to a "
"specific shard. Queries to sharded collections should include the "
"collection's :ref:`shard key <sharding-shard-key>`. When a query includes a "
"shard key, the :program:`mongos` can use cluster metadata from the :ref:"
"`config database <sharding-config-server>` to route the queries to shards."
msgstr ""
"当直接导入到一个特定的分片时，分片集群上的写操作是最高效的。对分片集合的查询应"
"该包括该集合的  :ref:`shard key <sharding-shard-key>` 。当某个查询包括一个片键"
"时，  :program:`mongos`  可以使用从  :ref:`config database <sharding-config-"
"server>`  中获得的集群元数据来将这些查询路由到分片。"

#: ../source/core/distributed-queries.txt:41
msgid ""
"If a query does not include the shard key, the :program:`mongos` must direct "
"the query to *all* shards in the cluster. These *scatter gather* queries can "
"be inefficient. On larger clusters, scatter gather queries are unfeasible for "
"routine operations."
msgstr ""
"如果某个查询不包括片键，  :program:`mongos`  一定会将该查询引导到集群中的  *所"
"有*  分片中。这种  *散集* 式查询时非常低效的。在更大的集群上，散集式查询对于路"
"由操作而言是难以执行的。"

#: ../source/core/distributed-queries.txt:53
msgid ""
"For more information on read operations in sharded clusters, see the :doc:`/"
"core/sharded-cluster-query-router` and :ref:`sharding-shard-key` sections."
msgstr ""
"请查阅  :doc:`/core/sharded-cluster-query-router`  和   :ref:`sharding-shard-"
"key`  部分以了解更多关于分片集群中写操作更多的信息。"

#: ../source/core/distributed-queries.txt:62
msgid "Read Operations to Replica Sets"
msgstr "复制集上的读操作"


#: ../source/core/distributed-queries.txt:70
msgid "reduce latency in multi-data-center deployments,"

msgstr ""
" :term:`复制集 <replica set>` 使用   :term:`复制集读选项 <read preference>` 来"
"决定如何将读操作路由到复制集的成员以及将读操作路由到哪儿。默认地，MongoDB总会"
"从复制集的  :term:`主机` 中读取数据。您可以通过修改   :ref:`read preference "
"mode <replica-set-read-preference-modes>`  来修改上述操作。"

#: ../source/core/distributed-queries.txt:72
msgid ""

"improve read throughput by distributing high read-volumes (relative to write"
" volume),"

msgstr ""
"您可以在每个连接及每个操作的基础上对   :ref:`read preference mode <replica-"
"set-read-preference-modes>`  进行配置，允许将数据从  :term:`从节点"
"<secondary>`  中读取到："


#: ../source/core/distributed-queries.txt:1
#: ../source/core/distributed-queries.txt:57
msgid "read operation"
msgstr ""

#: ../source/core/distributed-queries.txt:1
msgid "architecture"
msgstr ""

#: ../source/core/distributed-queries.txt:57
#: ../source/core/distributed-queries.txt:58
msgid "connection pooling"
msgstr ""

#: ../source/core/distributed-queries.txt:58
msgid "read operations"
msgstr ""


#: ../source/core/distributed-queries.txt:0
msgid "On this page"
msgstr ""
"复制集从节点成员上的读操作并不能保证能够反映出主节点当前的状态，因为从节点的状"
"态会落后于主节点一段时间。很多情况下，应用不依赖于这种类型的严格一致性，但是应"
"用的开发者在设置复制集读选项之前，应该要经常考虑应用的需求。"

#: ../source/core/distributed-queries.txt:48
msgid ""

"For replica set shards, read operations from secondary members of replica "
"sets may not reflect the current state of the primary. Read preferences that"
" direct read operations to different servers may result in non-monotonic "
"reads."

msgstr ""
"请查阅  :doc:`/core/read-preference`  以及  :ref:`replica-set-read-preference-"
"modes` 来了解更多关于复制集读选项或者复制集读选项模式的信息。"

#: ../source/core/distributed-queries.txt:64
msgid ""
"By default, clients reads from a replica set's :term:`primary`; however, "
"clients can specify a :doc:`read preference </core/read-preference>` to "
"direct read operations to other members. For example, clients can configure "
"read preferences to read from secondaries or from nearest member to:"
msgstr ""


#: ../source/core/distributed-queries.txt:75
msgid "perform backup operations, and/or"
msgstr ""

#: ../source/core/distributed-queries.txt:77
msgid ""
"allow reads until a :ref:`new primary is elected <replica-set-failover>`."
msgstr ""

#: ../source/core/distributed-queries.txt:82
msgid ""
"Read operations from secondary members of replica sets may not reflect the "
"current state of the primary. Read preferences that direct read operations "
"to different servers may result in non-monotonic reads."
msgstr ""

#: ../source/core/distributed-queries.txt:86
msgid ""
"You can configure the read preferece on a per-connection or per-operation "
"basis. For more information on read preference or on the read preference "
"modes, see :doc:`/core/read-preference` and :ref:`replica-set-read-"
"preference-modes`."
msgstr ""

#~ msgid ""
#~ ":term:`Replica sets <replica set>` use :term:`read preferences <read "
#~ "preference>` to determine where and how to route read operations to members "
#~ "of the replica set. By default, MongoDB always reads data from a replica "
#~ "set's :term:`primary`. You can modify that behavior by changing the "
#~ ":ref:`read preference mode <replica-set-read-preference-modes>`."
#~ msgstr ""

#~ msgid ""
#~ "You can configure the :ref:`read preference mode <replica-set-read-"
#~ "preference-modes>` on a per-connection or per-operation basis to allow reads"
#~ " from :term:`secondaries <secondary>` to:"
#~ msgstr ""

#~ msgid "for backup operations, and/or"
#~ msgstr ""

#~ msgid ""
#~ "to allow reads during :ref:`failover <replica-set-failover>` situations."
#~ msgstr ""

#~ msgid ""
#~ "Read operations from secondary members of replica sets are not guaranteed to"
#~ " reflect the current state of the primary, and the state of secondaries "
#~ "trails the primary by some amount of time. [#edge-cases-2-primaries]_"
#~ msgstr ""

#~ msgid ""
#~ "For more information on read preference or on the read preference modes, see"
#~ " :doc:`/core/read-preference` and :ref:`replica-set-read-preference-modes`."
#~ msgstr ""

#~ msgid ""
#~ "In some circumstances, two nodes in a replica set may *transiently* believe "
#~ "that they are the primary, but at most, one of them will be able to complete"
#~ " writes with :ref:`{w: majority} write concern <wc-w>`. The node that can "
#~ "complete :ref:`{w: majority} <wc-w>` writes is the current primary, and the "
#~ "other node is a former primary that has not yet recognized its demotion, "
#~ "typically due to a :term:`network partition`. When this occurs, clients that"
#~ " connect to the former primary may observe stale data despite having "
#~ "requested read preference :readmode:`primary`."
#~ msgstr ""

