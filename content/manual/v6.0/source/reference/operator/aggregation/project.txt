.. meta::
   :robots: noindex, nosnippet 

======================
$project (aggregation)
======================

.. facet::
   :name: programming_language
   :values: shell

.. meta::
   :description: Use the ``$project`` aggregation stage to pass documents with specified fields to the next stage.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. pipeline:: $project

   Passes along the documents with the requested fields to the
   next stage in the pipeline. The specified fields can be existing
   fields from the input documents or newly computed fields.

Compatibility
-------------

.. |operator-method| replace:: ``$project``

.. include:: /includes/fact-compatibility.rst

Syntax
------

The :pipeline:`$project` stage has the following prototype form:

.. code-block:: javascript

   { $project: { <specification(s)> } }

The :pipeline:`$project` takes a document that can specify the
inclusion of fields, the suppression of the ``_id`` field,
the addition of new fields, and the resetting of the values of existing
fields. Alternatively, you may specify the *exclusion*
of fields.

The :pipeline:`$project` specifications have the following forms:

.. list-table::
   :header-rows: 1

   * - Form
     - Description

   * - ``<field>: <1 or true>``

     - Specifies the inclusion of a field. Non-zero integers are also treated
       as ``true``.

   * - ``_id: <0 or false>``
     - Specifies the suppression of the ``_id`` field.

       To exclude a field conditionally, use the :variable:`REMOVE`
       variable instead. For details, see :ref:`remove-var`.

   * - ``<field>: <expression>``

     - Adds a new field or resets the value of an existing field.

       If the expression evaluates to ``$$REMOVE``, the field is
       excluded in the output. For details, see :ref:`remove-var`.

   * - ``<field>: <0 or false>``

     - Specifies the exclusion of a field.

       To exclude a field conditionally, use the :variable:`REMOVE`
       variable instead. For details, see :ref:`remove-var`.

       If you specify the exclusion of a field other than ``_id``,
       you **cannot** employ any other :pipeline:`$project`
       specification forms. This restriction does not apply to
       conditionally exclusion of a field using the :variable:`REMOVE`
       variable.

       See also the :pipeline:`$unset` stage to exclude fields.

Behavior
--------

Include Fields
~~~~~~~~~~~~~~

- The ``_id`` field is, by default, included in the output documents.
  To include any other fields from the input documents in the output
  documents, you must explicitly specify the inclusion in
  :pipeline:`$project`.

- If you specify an inclusion of a field that does not exist in the
  document, :pipeline:`$project` ignores that field inclusion and
  does not add the field to the document.

``_id`` Field
~~~~~~~~~~~~~

By default, the ``_id`` field is included in the output documents.
To exclude the ``_id`` field from the output documents, you
must explicitly specify the suppression of the ``_id`` field in
:pipeline:`$project`.

Exclude Fields
~~~~~~~~~~~~~~

If you specify the exclusion of a field or fields, all other fields are
returned in the output documents.

.. code-block:: javascript

   { $project: { "<field1>": 0, "<field2>": 0, ... } } // Return all but the specified fields

If you specify the exclusion of a field other than ``_id``, you cannot
employ any other :pipeline:`$project` specification forms: i.e. if you
exclude fields, you cannot also specify the inclusion of fields, reset
the value of existing fields, or add new fields. This restriction does
not apply to conditional exclusion of a field using the
:variable:`REMOVE` variable.

See also the :pipeline:`$unset` stage to exclude fields.

.. _remove-var:

Exclude Fields Conditionally
````````````````````````````

You can use the variable :variable:`REMOVE` in aggregation expressions
to conditionally suppress a field. For an example, see
:ref:`remove-example`.

Add New Fields or Reset Existing Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   MongoDB also provides :pipeline:`$addFields` to add new fields to
   the documents.

To add a new field or to reset the value of an existing field, specify
the field name and set its value to some expression. For more
information on expressions, see :ref:`aggregation-expressions`.

Literal Values
``````````````

To set a field value directly to a numeric or boolean literal, as
opposed to setting the field to an expression that resolves to a
literal, use the :expression:`$literal` operator. Otherwise,
:pipeline:`$project` treats the numeric or boolean literal as a flag
for including or excluding the field.

Field Rename
````````````

By specifying a new field and setting its value to the field path of an
existing field, you can effectively rename a field.

New Array Fields
````````````````

The :pipeline:`$project` stage supports using the square brackets ``[]``
to directly create new array fields. If you specify array fields that do
not exist in a document, the operation substitutes ``null`` as the value
for that field. For an example, see
:ref:`example-project-new-array-fields`.

.. include:: /includes/project-stage-and-array-index.rst

Embedded Document Fields
~~~~~~~~~~~~~~~~~~~~~~~~

When projecting or adding/resetting a field within an embedded
document, you can either use :term:`dot notation`, as in

.. code-block:: javascript

   "contact.address.country": <1 or 0 or expression>

Or you can nest the fields:

.. code-block:: javascript

   contact: { address: { country: <1 or 0 or expression> } }

When nesting the fields, you *cannot* use dot notation inside the
embedded document to specify the field, e.g. ``contact: {
"address.country": <1 or 0 or expression> }`` is *invalid*.

Path Collision Errors in Embedded Fields
````````````````````````````````````````

You cannot specify both an embedded document and a field within that
embedded document in the same projection.

The following :pipeline:`$project` stage fails with a ``Path collision``
error because it attempts to project both the embedded ``contact``
document and the ``contact.address.country`` field:

.. code-block:: javascript
   :copyable: false

   { $project: { contact: 1, "contact.address.country": 1 } }

The error occurs regardless of the order in which the parent document
and embedded field are specified. The following :pipeline:`$project`
fails with the same error:

.. code-block:: javascript
   :copyable: false

   { $project: { "contact.address.country": 1, contact: 1 } }

``$project`` Stage Placement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. |$project| replace:: ``$project``

.. include:: /includes/aggregation/fact-project-stage-placement.rst

Considerations
--------------

Empty Specification
~~~~~~~~~~~~~~~~~~~

MongoDB returns an error if the :pipeline:`$project` stage is passed an
empty document.

For example, running the following pipeline produces an error:

.. code-block:: javascript

   db.myCollection.aggregate( [ {
      $project: { }
   } ] )

Array Index
~~~~~~~~~~~

.. include:: /includes/project-stage-and-array-index.rst

Examples
--------

.. tabs-drivers::

   .. tab::
      :tabid: shell

      Include Specific Fields in Output Documents
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      Consider a ``books`` collection with the following document:

      .. code-block:: javascript

         {
           "_id" : 1,
           title: "abc123",
           isbn: "0001122223334",
           author: { last: "zzz", first: "aaa" },
           copies: 5
         }

      The following :pipeline:`$project` stage includes only the ``_id``,
      ``title``, and the ``author`` fields in its output documents:

      .. code-block:: javascript

         db.books.aggregate( [ { $project : { title : 1 , author : 1 } } ] )

      The operation results in the following document:

      .. code-block:: javascript

         { "_id" : 1, "title" : "abc123", "author" : { "last" : "zzz", "first" : "aaa" } }

      Suppress ``_id`` Field in the Output Documents
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      The ``_id`` field is always included by default. To exclude the ``_id``
      field from the output documents of the :pipeline:`$project` stage,
      specify the exclusion of the ``_id`` field by setting it to ``0`` in
      the projection document.

      Consider a ``books`` collection with the following document:

      .. code-block:: javascript

         {
           "_id" : 1,
           title: "abc123",
           isbn: "0001122223334",
           author: { last: "zzz", first: "aaa" },
           copies: 5
         }

      The following :pipeline:`$project` stage excludes the ``_id`` field but
      includes the ``title``, and the ``author`` fields in its output
      documents:

      .. code-block:: javascript

         db.books.aggregate( [ { $project : { _id: 0, title : 1 , author : 1 } } ] )

      The operation results in the following document:

      .. code-block:: javascript

         { "title" : "abc123", "author" : { "last" : "zzz", "first" : "aaa" } }

      Exclude Fields from Output Documents
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      Consider a ``books`` collection with the following document:

      .. code-block:: javascript

         {
           "_id" : 1,
           title: "abc123",
           isbn: "0001122223334",
           author: { last: "zzz", first: "aaa" },
           copies: 5,
           lastModified: "2016-07-28"
         }

      The following :pipeline:`$project` stage excludes the ``lastModified``
      field from the output:

      .. code-block:: javascript

         db.books.aggregate( [ { $project : { "lastModified": 0 } } ] )

      See also the :pipeline:`$unset` stage to exclude fields.

      Exclude Fields from Embedded Documents
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      Consider a ``books`` collection with the following document:

      .. code-block:: javascript

         {
           "_id" : 1,
           title: "abc123",
           isbn: "0001122223334",
           author: { last: "zzz", first: "aaa" },
           copies: 5,
           lastModified: "2016-07-28"
         }

      The following :pipeline:`$project` stage excludes the ``author.first``
      and ``lastModified`` fields from the output:

      .. code-block:: javascript

         db.books.aggregate( [ { $project : { "author.first" : 0, "lastModified" : 0 } } ] )

      Alternatively, you can nest the exclusion specification in a document:

      .. code-block:: javascript

         db.bookmarks.aggregate( [ { $project: { "author": { "first": 0}, "lastModified" : 0 } } ] )

      Both specifications result in the same output:

      .. code-block:: javascript

         {
            "_id" : 1,
            "title" : "abc123",
            "isbn" : "0001122223334",
            "author" : {
               "last" : "zzz"
            },
            "copies" : 5,
         }

      See also the :pipeline:`$unset` stage to exclude fields.

      .. _remove-example:

      Conditionally Exclude Fields
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      You can use the variable :variable:`REMOVE` in aggregation expressions
      to conditionally suppress a field.

      Consider a ``books`` collection with the following document:

      .. code-block:: javascript

         {
           "_id" : 1,
           title: "abc123",
           isbn: "0001122223334",
           author: { last: "zzz", first: "aaa" },
           copies: 5,
           lastModified: "2016-07-28"
         }
         {
           "_id" : 2,
           title: "Baked Goods",
           isbn: "9999999999999",
           author: { last: "xyz", first: "abc", middle: "" },
           copies: 2,
           lastModified: "2017-07-21"
         }
         {
           "_id" : 3,
           title: "Ice Cream Cakes",
           isbn: "8888888888888",
           author: { last: "xyz", first: "abc", middle: "mmm" },
           copies: 5,
           lastModified: "2017-07-22"
         }

      The following :pipeline:`$project` stage uses the :variable:`REMOVE`
      variable to excludes the ``author.middle`` field only if it equals ``""``:

      .. code-block:: javascript

         db.books.aggregate( [
            {
               $project: {
                  title: 1,
                  "author.first": 1,
                  "author.last" : 1,
                  "author.middle": {
                     $cond: {
                        if: { $eq: [ "", "$author.middle" ] },
                        then: "$$REMOVE",
                        else: "$author.middle"
                     }
                  }
               }
            }
         ] )

      The aggregation operation results in the following output:

      .. code-block:: javascript

         { "_id" : 1, "title" : "abc123", "author" : { "last" : "zzz", "first" : "aaa" } }
         { "_id" : 2, "title" : "Baked Goods", "author" : { "last" : "xyz", "first" : "abc" } }
         { "_id" : 3, "title" : "Ice Cream Cakes", "author" : { "last" : "xyz", "first" : "abc", "middle" : "mmm" } }

      .. tip:: Comparison with $addFields

         .. include:: /includes/aggregation/agg-project-remove-fields-compare.rst

         To see an example using ``$$REMOVE`` in an ``$addFields`` stage, see
         :ref:`addFields-remove-example`.

      Include Specific Fields from Embedded Documents
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      Consider a ``bookmarks`` collection with the following documents:

      .. code-block:: javascript

         { _id: 1, user: "1234", stop: { title: "book1", author: "xyz", page: 32 } }
         { _id: 2, user: "7890", stop: [ { title: "book2", author: "abc", page: 5 }, { title: "book3", author: "ijk", page: 100 } ] }

      To include only the ``title`` field in the embedded document in the
      ``stop`` field, you can use  the :term:`dot notation`:

      .. code-block:: javascript

         db.bookmarks.aggregate( [ { $project: { "stop.title": 1 } } ] )

      Or, you can nest the inclusion specification in a document:

      .. code-block:: javascript

         db.bookmarks.aggregate( [ { $project: { stop: { title: 1 } } } ] )

      Both specifications result in the following documents:

      .. code-block:: javascript

         { "_id" : 1, "stop" : { "title" : "book1" } }
         { "_id" : 2, "stop" : [ { "title" : "book2" }, { "title" : "book3" } ] }

      Include Computed Fields
      ~~~~~~~~~~~~~~~~~~~~~~~

      Consider a ``books`` collection with the following document:

      .. code-block:: javascript

         {
           "_id" : 1,
           title: "abc123",
           isbn: "0001122223334",
           author: { last: "zzz", first: "aaa" },
           copies: 5
         }

      The following :pipeline:`$project` stage adds the new fields
      ``isbn``, ``lastName``, and ``copiesSold``:

      .. code-block:: javascript

         db.books.aggregate(
            [
               {
                  $project: {
                     title: 1,
                     isbn: {
                        prefix: { $substr: [ "$isbn", 0, 3 ] },
                        group: { $substr: [ "$isbn", 3, 2 ] },
                        publisher: { $substr: [ "$isbn", 5, 4 ] },
                        title: { $substr: [ "$isbn", 9, 3 ] },
                        checkDigit: { $substr: [ "$isbn", 12, 1] }
                     },
                     lastName: "$author.last",
                     copiesSold: "$copies"
                  }
               }
            ]
         )

      The operation results in the following document:

      .. code-block:: javascript

         {
            "_id" : 1,
            "title" : "abc123",
            "isbn" : {
               "prefix" : "000",
               "group" : "11",
               "publisher" : "2222",
               "title" : "333",
               "checkDigit" : "4"
            },
            "lastName" : "zzz",
            "copiesSold" : 5
         }

      .. _example-project-new-array-fields:

      Project New Array Fields
      ~~~~~~~~~~~~~~~~~~~~~~~~

      For example, if a collection includes the following document:

      .. code-block:: javascript

         { "_id" : ObjectId("55ad167f320c6be244eb3b95"), "x" : 1, "y" : 1 }

      The following operation projects the fields ``x`` and ``y`` as elements
      in a new field ``myArray``:

      .. code-block:: javascript

         db.collection.aggregate( [ { $project: { myArray: [ "$x", "$y" ] } } ] )

      The operation returns the following document:

      .. code-block:: javascript

         { "_id" : ObjectId("55ad167f320c6be244eb3b95"), "myArray" : [ 1, 1 ] }

      If the array specification includes fields that are non-existent in a
      document, the operation substitutes ``null`` as the value for that
      field.

      For example, given the same document as above, the following operation
      projects the fields ``x``, ``y``, and a non-existing field
      ``$someField`` as elements in a new field ``myArray``:

      .. code-block:: javascript

         db.collection.aggregate( [ { $project: { myArray: [ "$x", "$y", "$someField" ] } } ] )

      The operation returns the following document:

      .. code-block:: javascript

         { "_id" : ObjectId("55ad167f320c6be244eb3b95"), "myArray" : [ 1, 1, null ] }

      .. _example-project-array-indexes:

      Array Indexes are Unsupported
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      You cannot use an array index with the :pipeline:`$project` stage. This
      section shows an example.

      Create the following ``pizzas`` collection:

      .. code-block:: javascript

         db.pizzas.insert( [
            { _id: 0, name: [ 'Pepperoni' ] },
         ] )

      The following example returns the pizza:

      .. code-block:: javascript

         db.pizzas.aggregate( [
            { $project: { x: '$name', _id: 0 } },
         ] )

      The pizza is returned in the example output:

      .. code-block:: javascript
         :copyable: false

         [ { x: [ 'Pepperoni' ] } ]

      The following example uses an array index (``$name.0``) to attempt to
      return the pizza:

      .. code-block:: javascript

         db.pizzas.aggregate( [
            { $project: { x: '$name.0', _id: 0 } },
         ] )

      The pizza is not returned in the example output:

      .. code-block:: javascript
         :copyable: false

         [ { x: [] } ]

   .. tab::
      :tabid: csharp

      .. include:: /includes/driver-examples/csharp/projection/sample-data-movie.rst

      To use the {+csharp-driver-full+} to add a ``$project`` stage to an aggregation
      pipeline, call the ``Project()`` method on a ``PipelineDefinition`` object and
      pass a ``ProjectionDefinitionBuilder<TDocument>`` object. ``TDocument``
      is the class that represents the documents in your collection.

      The following sections show the different ways that you can customize the output
      documents of the ``$project`` stage.

      Include Specific Fields in Output Documents
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      To include specific fields when using the .NET/C# driver, call the
      ``Include()`` method on the projection builder. You can chain ``Include()`` calls
      to include multiple fields.

      The following code example produces a document that includes only the ``_id``,
      ``plot``, and ``title`` fields:

      .. literalinclude:: /includes/driver-examples/csharp/projection/ProjectionExamples.cs
         :language: csharp
         :dedent: 8
         :start-after: // start include
         :end-before: // end include

      The pipeline returns the following document:

      .. code-block:: javascript
         :copyable: false

         {
           "_id" : { "$oid" : "573a1390f29313caabcd42e8" },
           "plot" : "A group of bandits stage a brazen train hold-up, only to find a
                     determined posse hot on their heels.",
           "title" : "The Great Train Robbery"
         }

      Exclude Fields from Output Documents
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      To exclude a field from the result documents when using the .NET/C# driver, call the
      ``Exclude()`` method on the projection builder. You can chain ``Exclude()`` calls
      to exclude multiple fields.

      The following code example produces a document that excludes the ``Type`` field:

      .. literalinclude:: /includes/driver-examples/csharp/projection/ProjectionExamples.cs
         :language: csharp
         :dedent: 8
         :start-after: // start excludeFields
         :end-before: // end excludeFields

      By default, result documents always include the ``_id`` field. The following code
      example produces a document that excludes the ``_id`` field but includes the ``plot``
      and ``title`` fields:

      .. literalinclude:: /includes/driver-examples/csharp/projection/ProjectionExamples.cs
         :language: csharp
         :dedent: 8
         :start-after: // start excludeId
         :end-before: // end excludeId

      The pipeline results in the following document:

      .. code-block:: javascript
         :copyable: false

         {
           "plot" : "A group of bandits stage a brazen train hold-up, only to find a
                     determined posse hot on their heels.",
           "title" : "The Great Train Robbery"
         }

      Exclude Fields from Embedded Documents
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      To exclude a field in an embedded document when using the .NET/C# driver, call the
      ``Exclude()`` method on the projection builder and pass the path to the corresponding
      class property. You can chain ``Exclude()`` calls to exclude multiple fields.

      The following code example produces a document that excludes the ``imdb.id``
      and ``type`` fields:

      .. literalinclude:: /includes/driver-examples/csharp/projection/ProjectionExamples.cs
         :language: csharp
         :dedent: 8
         :start-after: // start excludeFieldsEmbedded
         :end-before: // end excludeFieldsEmbedded

      The pipeline results in the following output:

      .. code-block:: javascript
         :copyable: false

         {
           "plot" : "A group of bandits stage a brazen train hold-up, only to find a
                     determined posse hot on their heels.",
           "title" : "The Great Train Robbery",
           ...
           "imdb" : { "rating" : 7.4000000000000004, "votes" : 9847 }
         }

      .. note:: Use Strings for Embedded ID Fields

         To project an ID field in an embedded document, specify the field
         name as a string, not a lambda expression.

      Conditionally Exclude Fields
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      You can use the variable :variable:`REMOVE` in aggregation expressions
      to conditionally suppress a field:

      .. literalinclude:: /includes/driver-examples/csharp/projection/ProjectionExamples.cs
         :language: csharp
         :dedent: 8
         :start-after: // start excludeFieldsConditional
         :end-before: // end excludeFieldsConditional

      .. note:: No Builder for Conditional Exclusion

         The preceding example uses ``BsonDocument`` objects because the .NET/C# driver
         doesn't provide a builder to conditionally exclude fields. Other MongoDB
         language drivers might support this feature. See the
         `MongoDB driver documentation <https://www.mongodb.com/docs/drivers/>`__ for more
         information.

      If the sampled document contains the ``imdb.votes`` field, the pipeline
      returns a document similar to the following:

      .. code-block:: javascript
         :copyable: false

         {
           "_id" : { "$oid" : "573a1390f29313caabcd42e8" },
           "title" : "The Great Train Robbery",
           "imdb" : { "rating" : 7.4000000000000004, "id" : 439, "votes" : 9847 }
         }

      If the document doesn't contain the ``imdb.votes`` field, the pipeline
      returns a document similar to the following:

      .. code-block:: javascript
         :copyable: false

         {
           "_id" : { "$oid" : "573a1398f29313caabce94a3" },
           "title" : "This Is Spinal Tap",
          "imdb" : { "rating" : 8.0, "id" : 88258 }
         }

      Include Computed Fields
      ~~~~~~~~~~~~~~~~~~~~~~~

      To include computed fields in the result documents when using the .NET/C# driver,
      call the ``Expression()`` method on the projection builder and pass an expression
      that includes the computed fields. For added type safety, you can define a model
      class for the result documents, like the following ``ProjectedMovie`` class:

      .. literalinclude:: /includes/driver-examples/csharp/projection/ProjectedMovie.cs
         :language: csharp

      The following code example produces a document that includes multiple computed
      fields:

      .. literalinclude:: /includes/driver-examples/csharp/projection/ProjectionExamples.cs
         :language: csharp
         :dedent: 8
         :start-after: // start includeFieldsComputed
         :end-before: // end includeFieldsComputed

      The pipeline results in the following document:

      .. code-block:: javascript
         :copyable: false

         {
           "_id" : { "$oid" : "573a1390f29313caabcd42e8" },
           "title" : "The Great Train Robbery",
           "leadActor" : "A.C. Abadie",
           ...
         }

      Project New Array Fields
      ~~~~~~~~~~~~~~~~~~~~~~~~

      To project new array fields in the result documents when using the .NET/C# driver,
      call the ``Expression()`` method on the projection builder and pass an expression
      that includes the new array fields. For added type safety, you can define a model
      class for the result documents, like the following ``ProjectedMovie`` class:

      .. literalinclude:: /includes/driver-examples/csharp/projection/ProjectedMovie.cs
         :language: csharp

      The following code example produces documents that include a new array field,
      ``crew``, which contains values from the ``directors`` and ``writers`` fields:

      .. literalinclude:: /includes/driver-examples/csharp/projection/ProjectionExamples.cs
         :language: csharp
         :dedent: 8
         :start-after: // start newArrayFields
         :end-before: // end newArrayFields

      The pipeline returns a document similar to the following:

      .. code-block:: javascript
         :copyable: false

         {
           "_id" : { "$oid" : "573a1395f29313caabce2297" },
           "title" : "The Chalk Garden",
           "leadActor" : "Deborah Kerr",
           "crew" : ["Ronald Neame", "John Michael Hayes (screenplay)", "Enid Bagnold (from the play by)"]
         }

      If the array specification includes fields that are non-existent in a
      document, the pipeline substitutes ``null`` as the value for that
      field. For example, the following code example projects the fields ``directors``, ``writers``,
      and a non-existent field, ``makeupArtists``, as elements in a new field named ``crew``:

      .. literalinclude:: /includes/driver-examples/csharp/projection/ProjectionExamples.cs
         :language: csharp
         :dedent: 8
         :start-after: // start nonExistentNewArrayFields
         :end-before: // end nonExistentNewArrayFields

      The pipeline returns a document similar to the following:

      .. code-block:: javascript
         :copyable: false

         {
           "_id" : { "$oid" : "573a1399f29313caabced0d9" },
           "crew" : [["Bill Kroyer"], ["Jim Cox (screenplay)", "Diana Young (original stories)"], null]
         }

      .. note:: Builders Class Prevents Missing Fields

         The preceding example uses ``BsonDocument`` objects because the .NET/C# driver
         raises a compile-time error if you try to use builders to add a missing field to
         an array. Other MongoDB language drivers might support this feature. See the
         `MongoDB driver documentation <https://www.mongodb.com/docs/drivers/>`__ for more
         information.

   .. tab::
      :tabid: nodejs

      .. include:: /includes/driver-examples/node/aggregation/sample-mflix.rst

      To use the {+node-driver-full+} to add a ``$project`` stage to an
      aggregation pipeline, use the ``$project`` operator in a pipeline object.

      The following sections show how to customize the output documents of the
      ``$project`` stage.

      Include Specific Fields in Output Documents
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      To include specific fields, set the value of the field to ``1`` in the
      ``$project`` stage.

      The following example returns documents that include only the ``_id``,
      ``plot``, and ``title`` fields:

      .. literalinclude:: /includes/driver-examples/node/projection/projectionExamples.js
         :language: javascript
         :dedent: 2
         :start-after: //start project
         :end-before: //end project

      The output documents resemble the following example:

      .. code-block:: javascript
         :copyable: false

         {
           _id: new ObjectId('573a1390f29313caabcd42e8'),
           plot: 'A group of bandits stage a brazen train hold-up, only to find a
                     determined posse hot on their heels.',
           title: 'The Great Train Robbery'
         }

      Exclude Fields from Output Documents
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      To exclude specific fields, set the value of the field to ``0`` in the
      ``$project`` stage.

      The following example returns documents that exclude the ``type`` field:

      .. literalinclude:: /includes/driver-examples/node/projection/projectionExamples.js
         :language: javascript
         :dedent: 2
         :start-after: //start projectExclude
         :end-before: //end projectExclude

      By default, result documents always include the ``_id`` field. The
      following example returns documents that exclude the ``_id`` field
      but include the ``plot`` and ``title`` fields:

      .. literalinclude:: /includes/driver-examples/node/projection/projectionExamples.js
         :language: javascript
         :dedent: 2
         :start-after: //start projectExcludeID
         :end-before: //end projectExcludeID

      The output documents resemble the following example:

      .. code-block:: javascript
         :copyable: false

         {
           plot: 'A group of bandits stage a brazen train hold-up, only to find a
                     determined posse hot on their heels.',
           title: 'The Great Train Robbery'
         }

      Exclude Fields from Embedded Documents
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      To exclude a field in an embedded document, set value of the field path to
      ``0`` in the ``$project`` stage.

      .. note:: Use Strings for Embedded Fields

         To project a field in an embedded document, specify the field
         path as a string.

      The following example returns documents that exclude the ``imdb.id``
      and ``type`` fields:

      .. literalinclude:: /includes/driver-examples/node/projection/projectionExamples.js
         :language: javascript
         :dedent: 2
         :start-after: //start projectExcludeEmbedded
         :end-before: //end projectExcludeEmbedded

      The output documents resemble the following example:

      .. code-block:: javascript
         :copyable: false

         {
           plot: 'A group of bandits stage a brazen train hold-up, only to find a
                     determined posse hot on their heels.',
           title: 'The Great Train Robbery',
           imdb: { rating: 7.4000000000000004, votes: 9847 }
         }

      Conditionally Exclude Fields
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      To conditionally exclude a field, assign conditional logic that includes
      the variable :variable:`REMOVE` to the field name.

      .. literalinclude:: /includes/driver-examples/node/projection/projectionExamples.js
         :language: javascript
         :dedent: 2
         :start-after: //start projectConditional
         :end-before: //end projectConditional

      If a document contains the ``imdb.votes`` field, the pipeline returns
      documents that resemble the following example output:

      .. code-block:: javascript
         :copyable: false

         {
           _id: new ObjectId('573a1390f29313caabcd42e8'),
           title: 'The Great Train Robbery',
           imdb: { rating : 7.4000000000000004, id: 439, votes: 9847 }
         }

      If a document doesn't contain the ``imdb.votes`` field, the pipeline
      returns documents that resemble the following example output:

      .. code-block:: javascript
         :copyable: false

         {
           _id: new ObjectId('573a1390f29313caabcd42e8'), 
           title: 'This Is Spinal Tap',
           imdb: { rating: 8.0, id: 88258 }
         }

      Include Computed Fields
      ~~~~~~~~~~~~~~~~~~~~~~~

      To include computed fields in the result documents, assign an expression
      to the field that stores the results.

      The following example projects the ``_id`` and ``title`` fields into new
      fields of the same name and computes the new field ``leadActor``. The
      example then returns documents that include these fields:

      .. literalinclude:: /includes/driver-examples/node/projection/projectionExamples.js
         :language: javascript
         :dedent: 2
         :start-after: //start projectComputed
         :end-before: //end projectComputed

      The output documents resemble the following example:

      .. code-block:: javascript
         :copyable: false

         {
           _id: new ObjectId('573a1390f29313caabcd42e8'),
           title: 'The Great Train Robbery',
           leadActor: 'A.C. Abadie'
         }

      Project New Array Fields
      ~~~~~~~~~~~~~~~~~~~~~~~~

      To project new array fields in the result documents, assign an expression
      that computes the new array field to the field that stores the array.

      The following example returns documents that include a new array
      field, ``crew``, which combines values from the ``directors`` and
      ``writers`` fields:

      .. literalinclude:: /includes/driver-examples/node/projection/projectionExamples.js
         :language: javascript
         :dedent: 2
         :start-after: //start projectArrayFields
         :end-before: //end projectArrayFields

      The output documents resemble the following example:

      .. code-block:: javascript
         :copyable: false

         {
           _id: new ObjectId('573a1395f29313caabce2297'),
           title: 'The Chalk Garden',
           leadActor: 'Deborah Kerr',
           crew: ['Ronald Neame', 'John Michael Hayes (screenplay)', 'Enid Bagnold (from the play by)']
         }

      If the array specification includes fields that aren't in a document, the
      pipeline substitutes ``null`` as the value for that field. For example,
      the following example projects the fields ``directors``, ``writers``,
      and a non-existent field, ``makeupArtists``, as elements in a new field
      named ``crew``:

      .. literalinclude:: /includes/driver-examples/node/projection/projectionExamples.js
         :language: javascript
         :dedent: 2
         :start-after: //start projectNull
         :end-before: //end projectNull

      The output documents resemble the following example:

      .. code-block:: javascript
         :copyable: false

         {
           _id: new ObjectId('573a1399f29313caabced0d9'),
           crew: [['Bill Kroyer'], ['Jim Cox (screenplay)', 'Diana Young (original stories)'], null]
         }

Learn More
----------

For more information and detailed explanations of common aggregation tasks, see
the :ref:`aggregation-complete-examples`.

To learn more about the methods on this page, see the following guides:

- :expression:`$eq`
- :expression:`$cond`
- :expression:`$arrayElemAt`
- :expression:`$concatArrays`
- :variable:`REMOVE`
