===================================================
Configure |monitoring| Jetty Instances to use HTTPS
===================================================

Overview
--------

You can *optionally* configure the Jetty instances that serve the |mms|
application to use HTTPS to encrypt connections between the MMS
application and the MMS agent as well as the web
interface. Alternately, you can provide access to the MMS application
using a load balancer that provides HTTPS access.

Prerequisites
-------------

Before configuring MMS and Jetty, you must create and prepare a valid
SSL certificate. To do so, you must have access to the ``openssl`` library
on your system.

Create the certificate either through a 3rd-party authority or as a
self-signed certificate. If you have an existing certificate, you can use
that instead but still must prepare it. Preparing a certificate can
involve converting its format and concatenating it with other certificates
in a certificate chain.

Use the appropriate procedures in this section to generate and prepare the
certificate.

Create a New Certificate and Signing Request for a 3rd-party Certificate Authority
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/steps/generate-certificate-and-signing-request.rst

Create a Self-Signed Certificate
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/steps/generate-self-signed-certificate.rst

Prepare the Certificate as a PEM Certificate
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/steps/create-pem-certificate.rst

Prepare the Certificate as a PKCS12 Certificate
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/steps/create-pkcs12-certificate.rst

Procedures
----------

Create Java Truststore
~~~~~~~~~~~~~~~~~~~~~~

Import the PEM certificate into a Java truststore, so that the MMS server
trusts its own ``mms.centralUrl`` when making HTTP requests:

.. code-block:: sh

   /opt/mongodb/mms/jdk/bin/keytool -import -keystore mms-truststore.jks -file mms-ssl-unified.crt 

Replace ``/opt/mongodb/mms`` with the path of the installation directory
for the MMS server. ``/opt/mongodb/mms`` is the default installation
directory.

``keytool`` will prompt you to specify a Java keystore passphrase, as well
as a ``yes/no`` confirmation to import the certificate.

Create Java Keystore
~~~~~~~~~~~~~~~~~~~~

Convert the PKCS12 keystore into a Java Keystore, so that the MMS
server can access the required SSL infrastructure:


.. code-block:: sh

   /opt/mongodb/mms/jdk/bin/keytool -importkeystore \
                                    -srckeystore mms-ssl.pkcs12 \
                                    -srcstoretype PKCS12 \
                                    -destkeystore mms-keystore.jks

Replace ``/opt/mongodb/mms`` with the path of the installation
directory for the MMS server. ``/opt/mongodb/mms`` is the default
installation directory.

``keytool`` will prompt for the PKCS12 keystore passphrase, as well as
for a passphrase for the new Java keystore. You must use the same
passphrase for Java as for PKCS12.

Set Truststore and Keystore Location and Permissions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Issue the following sequence of commands to move the Java keystore
and truststore files to the ``/etc/mongodb-mms`` directory and set the
appropriate permissions:

.. code-block:: sh

   sudo mv mms-truststore.jks mms-keystore.jks /etc/mongodb-mms/
   sudo chown mongodb-mms:root /etc/mongodb-mms/*.jks
   sudo chmod 600 /etc/mongodb-mms/*.jks

If the MMS application server runs as a different user, change
``mongodb-mms`` in the ``chown`` command as needed.

Generate Credentials
~~~~~~~~~~~~~~~~~~~~

Issue the following command to generate a credential pair for the MMS
application to use to access the Java Keystore:

.. code-block:: sh

   /opt/mongodb/mms/bin/credentialstool --username keystore --password

Replace ``/opt/mongodb/mms`` with the path of the installation
directory for the MMS server.

``credentialstool`` will return output that resembles the following:

.. code-block:: none

   Your encrypted credentials pair:
   Username: abcdef1234567890-76d41ae0a98c
   Password: abcdef1234567890-2cc28e525d1f543464

Configure MMS Application to use SSL
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Edit the ``mms.conf`` (e.g. ``/opt/mongodb/mms/conf/mms.conf``) file
and add the following options:

.. code-block:: ini

   JAVA_MMS_SSL_OPTS="${JAVA_MMS_SSL_OPTS} -Dxgen.webServerSslEnabled=true"
   JAVA_MMS_SSL_OPTS="${JAVA_MMS_SSL_OPTS} -Dxgen.webServerSslKeyStorePath=/etc/mongodb-mms/mms-keystore.jks"
   JAVA_MMS_SSL_OPTS="${JAVA_MMS_SSL_OPTS} -Dxgen.webServerSslKeyStoreEncryptedPassword=abcdef1234567890-2cc28e525d1f543464"

Modify the values as required by your configuration. Edit the
``conf-mms.properties`` file to change the ``mms.centralUrl`` value
to reflect the new HTTPS information. For example:

.. code-block:: ini

   mms.centralUrl=https://mms.example.net:8443

Configure MMS Application to use SSL

.. code-block:: ini

   JAVA_MMS_SSL_OPTS="${JAVA_MMS_SSL_OPTS} -Dxgen.webServerSslTrustStorePath=/etc/mongodb-mms/mms-truststore.jks"
   JAVA_MMS_SSL_OPTS="${JAVA_MMS_SSL_OPTS} -Dxgen.webServerSslTrustStoreEncryptedPassword=f6a5a6b19603c0c04f-97dbb68c2bb1"

   JAVA_MMS_SSL_OPTS="${JAVA_MMS_SSL_OPTS} -Dxgen.webServerSslKeyStorePath=/etc/mongodb-mms/mms-keystore.jks"
   JAVA_MMS_SSL_OPTS="${JAVA_MMS_SSL_OPTS} -Dxgen.webServerSslKeyStoreEncryptedPassword=f6a5a6b19603c0c04f-97dbb68c2bb1"

Configure the Monitoring Agent to Trust the MMS Server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting with On-Prem MMS 1.4, the monitoring agent validates the SSL
certificate of the MMS server by default. This means the monitoring agent
must be configured to trust the MMS server if not using a certificate
signed by a trusted 3rd party.

To specify a self-signed certificate of the MMS server that the monitoring
agent should trust, first copy your PEM certificate to ``/etc/mongodb-mms/``

.. code-block:: sh

   sudo cp -a mms-ssl-unified.crt /etc/mongodb-mms/
   sudo chown mongodb-mms-agent:mongodb-mms-agent /etc/mongodb-mms/mms-ssl-unified.crt
   sudo chmod 600 /etc/mongodb-mms/mms-ssl-unified.crt

Then edit the following parameter in ``/etc/mongodb-mms/monitoring-agent.config``:

.. code-block:: ini

   sslTrustedMMSServerCertificate=/etc/mongodb-mms/mms-ssl-unified.crt

Restart your monitoring agent for the configuration update to take effect:

.. code-block:: sh

   sudo /etc/init.d/mongodb-mms-monitoring-agent restart

Restart MMS Application Server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Before you can access MMS using an HTTPS connection you must restart
the MMS application server:

.. code-block:: sh

   sudo /etc/init.d/mongodb-mms start

You can now connect to MMS by accessing the following URL in a web
browser:

.. code-block:: none

   https://mms.example.net:8443
