=====================
cursor.allowDiskUse()
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: cursor.allowDiskUse()


   .. include:: /includes/fact-mongosh-shell-method.rst

   Use :method:`~cursor.allowDiskUse()` to either allow or prohibit 
   writing temporary files on disk when a pipeline stage exceeds 
   the 100 megabyte limit. Starting in MongoDB 6.0, operations that 
   require greater than 100 megabytes of memory automatically write 
   data to temporary files by default.

   :method:`~cursor.allowDiskUse()` has the following form:

   .. code-block:: javascript
      
      db.collection.find(<match>).sort(<sort>).allowDiskUse()

See :ref:`sort-index-use` for more information on blocking sort
operations.

Compatibility
-------------

This method is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-all.rst

.. include:: /includes/fact-environments-onprem-only.rst

Behavior
--------

Interaction with ``allowDiskUseByDefault``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 6.0, pipeline stages that require more than 100 
megabytes of memory to execute write temporary files to disk by 
default. 

.. note:: 

   Prior to MongoDB 6.0, ``.allowDiskUse(false)`` and                      
   ``.allowDiskUse(true)`` have the same effect. In MongoDB 6.0, both   
   ``mongosh`` and the legacy ``mongo`` shell behave the following way: 

If :parameter:`allowDiskUseByDefault` is ``true`` (this is the default):

- ``.allowDiskUse()`` has no additional effect 
- ``.allowDiskUse(true)`` has no additional effect
- ``.allowDiskUse(false)`` prohibits the query from writing temporary
  files to disk

If :parameter:`allowDiskUseByDefault` is ``false``:

- ``.allowDiskUse()`` enables writing temporary files to disk
- ``.allowDiskUse(true)`` enables writing temporary files to disk
- ``.allowDiskUse(false)`` has no additional effect

Supports Large Non-Indexed Sorts Only
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:method:`cursor.allowDiskUse()` has no effect on sort operations
answered using an index *or* non-indexed ("blocking") sort operations
which require less than 100 megabytes of memory. For more complete
documentation on blocking sorts and sort index use, see
:ref:`sort-index-use`.

To check if MongoDB must perform an blocking sort, append
:method:`cursor.explain()` to the query and check the 
:ref:`explain results <explain-results>`. If the query plan 
contains a ``SORT`` stage, then MongoDB must perform an 
blocking sort operation subject to the 100 megabyte memory limit.

Example
-------

Consider a collection ``sensors`` with only the default index on 
``_id``. The collection contains documents similar to the
following:

.. code-block:: json
   :copyable: false

   {
     "sensor-name" : "TEMP-21425",
     "sensor-location" : "Unit 12",
     "reading" : {
       "timestamp" : Timestamp(1580247215, 1),
       "value" : 212,
       "unit" : "Fahrenheit"
     }
   }



The following operation includes a :method:`cursor.sort()` on the
field ``reading.timestamp``. The operation also includes
:method:`cursor.allowDiskUse()` to support the sort operation.

.. code-block:: javascript

   db.sensors.find({"sensor-location" : "Unit 12"}).
     sort({"reading.timestamp" : 1}).
     allowDiskUse()

Since ``reading.timestamp`` is not included in an index, MongoDB
must perform a blocking sort operation to return results in the 
requested sort order. By specifying :method:`~cursor.allowDiskUse()`,
MongoDB can process the sort operation *even if* it requires more than
100 megabytes of system memory. If :method:`~cursor.allowDiskUse()` 
was omitted *and* the operation required more than 100 megabytes of
system memory, MongoDB would return an error.
