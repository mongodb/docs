.. _kotlin-builders-landing:

========
Builders
========

.. meta::
   :description: Explore how to use Kotlin driver builder classes for efficient CRUD operations and aggregation, enhancing error detection and code completion in your IDE.

.. toctree::

   Aggregation </fundamentals/builders/aggregates>
   Filters </fundamentals/builders/filters>
   Indexes </fundamentals/builders/indexes>
   Projection </fundamentals/builders/projections>
   Sort </fundamentals/builders/sort>
   Update </fundamentals/builders/updates>
   Builders & Data Classes </fundamentals/builders/builders-data-classes>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This section includes guides on how to use each of the available
builders and demonstrates the utility that the {+driver-short+} builder
classes provide. 

The {+driver-short+} provides classes to simplify the process of
performing CRUD operations and using the Aggregation API. The static
utility methods allow you to build queries and other kinds of documents
more efficiently.

Why Use Builders?
-----------------

When you use builders classes, you leverage the following products:

- The {+language+} compiler to find errors during development
- The IDE for discovery, debugging, and code completion

When using builders, the {+language+} compiler and the IDE catch errors
such as misspelled operators or missing parameters early on. If you use
the MongoDB shell or plain {+language+} instead, you write operators as
strings and get no visual indication of a problem, which pushes these
errors to runtime instead of compile time.

By using builder classes, you can write operators as methods, so that
your IDE instantly indicates whether your code has errors. While
developing, your IDE can also show you methods that you can use and can
complete your code with placeholder parameters.

Example Scenario
----------------

Suppose you want to send a marketing email to all users in the ``users``
collection that meet the following criteria:

- Users in which the value of the ``gender`` field is ``"female"``
- Users in which the value of the ``age`` field is greater than ``29``

You also need your query to return only their email addresses.

The documents in the ``users`` collection are modeled by the following
data class:

.. literalinclude:: /examples/generated/BuildersTest.snippet.user-data-class.kt
   :language: kotlin

Using the MongoDB Shell
~~~~~~~~~~~~~~~~~~~~~~~

The following code provides the command you use in the MongoDB Shell to
perform the query:

.. code-block:: js

   collection.find({ "gender": "female", "age" : { "$gt": 29 }}, { "_id": 0, "email": 1 })

Without Using Builders
~~~~~~~~~~~~~~~~~~~~~~

The following code provides the find operation you create without
builders in the {+driver-short+}:

.. literalinclude:: /examples/generated/BuildersTest.snippet.no-builders.kt
   :language: kotlin

In this case, you might easily include an error when writing the
``"\$gt"`` operator in the filter, but your IDE returns the relevant
error only at runtime.

Using Builders
~~~~~~~~~~~~~~

The following code provides the find operation you create by using
builders in the {+driver-short+}:

.. code-block:: kotlin

   import com.mongodb.client.model.Filters
   import com.mongodb.client.model.Projections

.. literalinclude:: /examples/generated/BuildersTest.snippet.builders.kt
   :language: kotlin

Available Builders
------------------

- :ref:`Aggregates <aggregates-builders>` for building aggregation
  pipelines.

  - :ref:`kotlin-atlas-vector-search` for using the
    ``Aggregates.vectorSearch()`` method to use the Atlas Vector
    Search feature.

- :ref:`Filters <filters-builders>` for building query filters.

- :ref:`Indexes <indexes-builders>` for creating index keys.

- :ref:`Projections <projections-builders>` for building projections.

- :ref:`Sorts <sorts-builders>` for building sort criteria.

- :ref:`Updates <updates-builders>` for building updates.

The :ref:`kotlin-builders-data-classes` guide provides examples on
how to use the preceding builders classes directly with data class
properties. This guide might help to make your application more type-safe
and improve {+language+} interoperability.
