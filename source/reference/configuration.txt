=============
Configuration
=============

.. default-domain:: mongodb

Overview
--------

The |mms| Application and the |backup| Daemon use the
configuration settings described here. Each package has its own
configuration file:

- The |mms| Application uses the following file:

  ``/opt/mongodb/mms/conf/conf-mms.properties``

- The |backup| Daemon uses the following file:

  ``/opt/mongodb/mms-backup-daemon/conf/conf-daemon.properties``

This document describes all available settings between the packages. Each
package's configuration file uses a subset of the settings described here.

Mandatory Settings
~~~~~~~~~~~~~~~~~~

To start the |mms| Application, you must configure the
:ref:`application-url-settings` and :ref:`email-address-settings`
in the ``conf-mms.properties`` file.

Security
~~~~~~~~

The ``conf-mms.properties`` file may contain user credentials in plain
text. Follow standard practice and reduce the permissions on the
configuration file. For example:

.. code-block:: sh

   sudo chmod 600 <install_dir>/conf/conf-mms.properties

Settings
--------

.. _application-url-settings:

Application URL Settings
~~~~~~~~~~~~~~~~~~~~~~~~

The following two settings are mandatory for the |mms| Application.

.. setting:: mms.centralUrl

   *Type*: string

   Required. Fully qualified URL, including the port number, of the MMS
   Monitoring server. For example,

   .. code-block:: ini

      mms.centralUrl=http://mms.example.com:8080

.. setting:: mms.backupCentralUrl

   *Type*: string

   Required. The hostname and port of |mms| Backup server. For example,

   .. code-block:: ini

      mms.backupCentralUrl=http://mms.example.com:8081

   You must set :setting:`mms.backupCentralUrl`, even if you are only
   using |mms| Monitoring and not |mms| Backup.

.. setting:: mms.remoteIp.header

   *Type*: string

   Specify the name of the header that the load balancer will use to
   specify the original client's IP address to the application server.

   See :doc:`/tutorial/configure-application-high-availability` for
   more information.

   When you specify :setting:`mms.remoteIp.header`, do not allow
   clients to connect directly to any application server.

Email Settings
~~~~~~~~~~~~~~

.. _email-address-settings:

Email Address Settings
``````````````````````

The following email address settings are mandatory. You **must** define
them before the |monitoring| instance will start.

.. setting:: mms.fromEmailAddr

   *Type*: string

   Required. The email address used for sending the general emails,
   such as |mms| alerts. You can include an alias with the email address.
   For example:

   .. code-block:: ini

      mms.fromEmailAddr=|mms| Alerts <mms-alerts@example.com>

.. setting:: mms.replyToEmailAddr

   *Type*: string

   Required. The email address to send replies to general emails. For
   example:

   .. code-block:: ini

      mms.replyToEmailAddr=mms-no-reply@example.com

.. setting:: mms.adminFromEmailAddr

   *Type*: string

   Required. The email address to send messages from the |mms| admin. You
   can include an alias with the email address. For example:

   .. code-block:: ini

      mms.adminFromEmailAddr=|mms| Admin <mms-admin@example.com>

.. setting:: mms.adminEmailAddr

   *Type*: string

   Required. The email address to send messages or replies to the MMS
   admin. You can include an alias with the email address. For example:

   .. code-block:: ini

      mms.adminEmailAddr=mms-admin@example.com

.. setting:: mms.bounceEmailAddr

   *Type*: string

   Required. The email address to send bounce messages, i.e. messages
   of non-delivery of alerts or messages from |mms| admin. For example:

   .. code-block:: ini

      mms.bounceEmailAddr=bounce@example.com

Email Service Settings
``````````````````````

.. setting:: mms.emailDaoClass

   *Type*: string

   The email interface to use. For AWS Simple Email Service,
   specify ``com.xgen.svc.core.dao.email.AwsEmailDao``, as in:

   .. code-block:: ini

      mms.emailDaoClass=com.xgen.svc.core.dao.email.AwsEmailDao

   For AWS Simple Email Service, see also :setting:`aws.accesskey` and
   :setting:`aws.secretkey`.

   For JavaEmailDao, specify
   ``com.xgen.svc.core.dao.email.JavaEmailDao``, as in:

   .. code-block:: ini

      mms.emailDaoClass=com.xgen.svc.core.dao.email.JavaEmailDao

.. setting:: mms.mail.transport

   *Type*: string
   *Default*: smtp

   Transfer protocol ``smtp`` or ``smtps`` as specified by your email
   provider. For example:

   .. code-block:: ini

      mms.mail.transport=smtp

.. setting:: mms.mail.hostname

   *Type*: string
   *Default*: localhost

   Email hostname as specified by your email provider. For example:

   .. code-block:: ini

      mms.mail.hostname=mail.example.com

.. setting:: mms.mail.port

   *Type*: number
   *Default*: 25

   Port number for the transfer protocol as specified by your email
   provider. For example:

   .. code-block:: ini

      mms.mail.port=25

.. setting:: mms.mail.tls

   *Type*: boolean
   *Default*: false

   Indicator of whether the transfer protocol runs on top of TLS. For
   example:

   .. code-block:: ini

      mms.mail.tls=false

.. setting:: mms.mail.username

   *Type*: string

   User name of the email account. If unset, defaults to disabled SMTP
   authentication.

   .. code-block:: ini

       mms.mail.username=

.. setting:: mms.mail.password

   *Type*: string

   Password for the email account. If unset, defaults to disabled SMTP
   authentication.

   .. code-block:: ini

      mms.mail.password=emailPassword

.. setting:: aws.accesskey

   Required if using AWS Simple Email Service. The access key ID for AWS.

   .. code-block:: ini

      aws.accesskey=EXAMPLEAccessKeyID

.. setting:: aws.secretkey

   Required if using AWS Simple Email Service. The secret access key
   for AWS.

   .. code-block:: ini

      aws.secretkey=eXampLe/aCcESs/KEY

.. _twilio-sms-configure:
.. _twilio-sms-alert-settings:

Twilio SMS Alert Settings
~~~~~~~~~~~~~~~~~~~~~~~~~

To receive alert notifications via SMS, you must have a `Twilio
<http://www.twilio.com/docs/quickstart>`_ account and specify your
Twilio account information in the configuration file.

.. setting:: twilio.account.sid

   *Type*: string

   Twilio account ID.

.. setting:: twilio.auth.token

   *Type*: string

   Twilio API token.

.. setting:: twilio.from.num

   *Type*: string

   Twilio phone number.

MongoDB Settings
~~~~~~~~~~~~~~~~

.. setting:: mongo.mongoUri

   *Type*: string

   Required. The :manual:`connection string
   </reference/connection-string/>` to the MongoDB server for
   |mms|, i.e. the |mms| Application database. For example, the
   following specifies the URI for a :term:`replica set`:

   .. code-block:: ini

      mongo.mongoUri=mongodb://db1.example.net:40000,db2.example.net:40000,db3.example.net:40000

   If you omit the port number, |mms| will use the default ``27017``
   port for all hosts.

   For a MongoDB server with access control, prefix the hostname with
   the MongoDB username and password in the form
   ``<username>:<password>@``, and append after the port the ``/admin``
   database. For example:

   .. code-block:: ini

      mongo.mongoUri=mongodb://mongodbuser1:password@mydb1.example.net:40000/admin

   For a MongoDB server using LDAP as the authentication mechanism,
   prefix the hostname with the MongoDB username and password in the
   form ``<username>:<password>@``, and append the
   ``authMechanism=PLAIN&authSource=$external`` options after the
   port:

   .. code-block:: ini

      mongo.mongoUri=mongodb://mongodbuser1:password@mydb1.example.net:40000/?authMechanism=PLAIN&authSource=$external

   To connect to a MongoDB server using Kerberos, prefix the hostname
   with the MongoDB username and password in the form
   ``<username>:<password>@``, and append the ``authMechanism=GSSAPI``
   option after the port:

   .. code-block:: ini

      mongo.mongoUri=mongodb://mongodbuser1:password@mydb1.example.net:40000/?authMechanism=GSSAPI

   For additional considerations when specifying user credentials, such
   as encrypting user credentials or authenticating with Kerberos, see
   :ref:`on-prem-authentication-configuration`.

   See :manual:`Connection String URI Format
   </reference/connection-string/>` for more information on the
   connection string.

.. setting:: mongo.replicaSet

   *Type*: string

   Required if using a replica set for :setting:`mongo.mongoUri`. The
   name of the replica set. For example:

   .. code-block:: ini

      mongo.replicaSet=mmsreplset

.. setting:: mongo.encryptedCredentials

   *Type*: boolean

   Optional. Set to ``true`` if :setting:`mongo.mongoUri` contains the
   encrypted username and password.

   .. code-block:: ini

      mongo.encryptedCredentials=true

   The username and password must have been encrypted using the
   |monitoring| ``credentialstool``. See
   :ref:`on-prem-authentication-configuration` for more information on
   encrypting username and password.

   .. important::
      The ``conf-mms.properties`` file can contain multiple
      :setting:`mongo.MongoURI` settings. If
      :setting:`mongo.encryptedCredentials` is ``true``, you must encrypt
      all user credentials found in the various :setting:`mongo.MongoURI`
      settings.

|mms| Backup Daemon Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~

These settings are found only in the ``conf-daemon.properties`` file and are
necessary only if you are using |mms| Backup.

.. setting:: mongo.backupdb.mongoUri

   *Type*: string

   Required for |backup|. The :manual:`connection string
   </reference/connection-string/>` to the |backup| Blockstore database.
   This must be a separate MongoDB Server than the |mms| Application
   database to isolate and application data and state from backup
   data. For example:

   .. code-block:: ini

      mongo.backupdb.mongoUri=mongodb://db5.example.net:50000,db6.example.net:50000,db7.example.net:50000

.. setting:: mongo.backupdb.replicaSet

   *Type*: string

   Required for |mms| Backup if using a replica set for
   :setting:`mongo.backupdb.mongoUri`. The name of the replica set. For
   example:

   .. code-block:: ini

      mongo.backupdb.replicaSet=mmsbackupreplset

.. setting:: rootDirectory

   *Type*: string

   The disk partition used by the Backup Daemon to dynamically create and
   maintain the :term:`replica set` HEAD directories. For more information
   on HEADs, see the :ref:`|mms| Backup functional overview
   <mms-backup-functional-overview>`.

   This directory must be writable
   by the mongodb-|mms| user and must end in a trailing slash.  It is critical
   that this partition is sized appropriately.

   .. important::
      Data in this directory is dynamically created, maintained and destroyed by the
      |mms| Backup Daemon. This partition should not be used for any other purpose.
      This partition should *not* overlap with the partition used for the Backup
      Blockstore database.

.. setting:: numWorkers

   *Type*: number

   The number of replica sets that should be processed at a time.

.. setting:: mongodb.release.directory

   *Type*: string

   Specifies the full path to the directory that contains every MongoDB
   release needed by the Backup Daemon. When backing up a replica set, The
   Backup Daemon must use a :program:`mongod` that matches the version of
   the replica set being backed up.

   If you update versions manually, name the folders within this full
   directory path using the following form:

   .. code-block:: none

      mongodb-<platform>-<architecture>-<version>

   For example:

   .. code-block:: none

      mongodb-linux-x86_64-2.4.8
      mongodb-linux-x86_64-2.4.9
      mongodb-linux-x86_64-2.4.10
      mongodb-linux-x86_64-2.6.0

   Beginning in |onprem| version 1.5, the Backup Daemon uses the following
   rules to match the MongoDB version of the replica set being backed up:

   - If the MongoDB version uses the MongoDB standard ``A.B.C`` version
     format, the daemon looks for a folder named
     ``mongodb-<platform>-<architecture>-A.B.x``, where ``x`` is greater
     than or equal to ``C``.

   - If the MongoDB version does not use the standard format, the daemon
     looks for a folder named
     ``mongodb-<platform>-<architecture>-<version>``, where ``<version>``
     ends with the MongoDB instance's version. For example, if the source
     version is ``2.4.10-abc``, the daemon would match on
     ``mongodb-linux-x86_64-production-2.4.10-abc``.

   The will always versions greater than ``2.4.8``.

   The Backup Daemon includes the ``mongodb-fetch`` utility that will
   download the latest releases directly from
   `mongodb.org/downloads <http://www.mongodb.org/downloads>`_.
   The :setting:`mongodb.release.autoDownload` setting automatically runs
   this utility every hour once the service starts. For details, including
   the option to download manually, see :setting:`mongodb.release.autoDownload`.

.. todo: In |onprem| the utility is named mongo-fetch. Should we create two
         paragraphs or create replacement tex?

   .. important::
      If you are backing up MongoDB custom builds, you must manually
      place a matching binary distribution for each custom build in this
      directory.

.. setting:: mongodb.release.autoDownload

   *Type*: boolean

   Specify ``true`` to enable automatic downloads; ``false`` to disable.

   When ``true``, Backup automatically downloads the latest
   release of MongoDB from
   `mongodb.org/downloads <http://www.mongodb.org/downloads>`_
   and stores it in the directory specified by the
   :setting:`mongodb.release.directory` setting. The Backup Daemon
   includes the ``mongodb-fetch`` utility, located in the
   ``/opt/mongodb/backup-daemon/bin`` directory, which runs once an hour
   to perform the downloads.

   If you set :setting:`mongodb.release.autoDownload` ``false``, then you
   must manually download and install the needed MongoDB releases in the
   :setting:`mongodb.release.directory`. If you backup deployments that
   use different MongoDB versions, you must download and install each
   version.

   Download MongoDB from `mongodb..org/downloads
   <http://www.mongodb.org/downloads>`_ and extract them.
   Alternately, you can use the ``mongodb-fetch`` utility manually, included in
   the distribution the backup component ensures that the Backup
   Daemon has the correct version of :program:`mongod` for every
   backed up replica set.

Session Management Setting
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. setting:: mms.session.maxHours

   *Type*: number

   The number of hours before a session on the |mms| website expires.

Password Policy Settings
~~~~~~~~~~~~~~~~~~~~~~~~

You can configure the password policy for |mms| user accounts with the
following settings:

.. setting:: mms.password.minChangesBeforeReuse

   *Type*: number

   The number of previous passwords to remember. You cannot reuse a
   remembered password as a new password.

.. setting:: mms.password.maxFailedAttemptsBeforeAccountLock

   *Type*: number

   The number of failed login attempts before an account becomes
   locked. Only an an |mms| Administrator can unlock a locked account.

.. setting:: mms.password.maxDaysInactiveBeforeAccountLock

   *Type*: number

   The maximum number of days with no visits to the |mms| website before
   |mms| locks an account.

.. setting:: mms.password.maxDaysBeforeChangeRequired

   *Type*: number

   The number of days a password is valid before the password expires.

.. setting:: mms.multiFactorAuth.require

   *Type*: boolean
   *Default*: false

   When ``true``, |mms| will require two-factor authentication for
   users to log in or to perform certain destructive operations within the
   application.

   If you configure :ref:`Twilio integration <twilio-sms-alert-settings>`,
   users may obtain their second factor tokens via Google Authenticator, SMS,
   or voice calls. Otherwise, the only mechanism to provide two-factor authentication is
   Google Authenticator.

.. setting:: mms.multiFactorAuth.allowReset

   *Type*: boolean
   *Default*: false

   When ``true``, |mms| will allow users to reset their two-factor
   authentication settings via email in an analogous fashion to resetting their
   passwords.

   To reset two-factor authentication, a user must:

   - be able to receive email at the address associated with the user account
   - know the user account's password
   - know the Agent API key for any |mms| Group of which the user is a member

.. setting:: mms.multiFactorAuth.issuer

   *Type*: string

   If Google Authenticator provides two-factor authentication, this
   string is the ``issuer`` in the Google Authenticator app. If
   left blank, the ``issuer`` is the domain name of the MMS
   installation.

.. _snmp-heartbeat-configure:

SNMP Heartbeat Settings
~~~~~~~~~~~~~~~~~~~~~~~

You can configure the |mms| Server to send a periodic heartbeat
trap notification (v2c) that contain an internal health assessment of
the |mms| Server. The |mms| Server can send traps to one or more endpoints
on the standard SNMP UDP port 162.

To configure the |mms| Server to send trap notifications,
download the Management Information Base (MIB) file at
`<http://downloads.mongodb.com/on-prem-monitoring/MMS-MONGODB-MIB.txt>`_
and configure the following settings:

.. setting:: snmp.default.hosts

   *Type*: string
   *Default*: blank

   Comma-separated list of hosts where 'heartbeat' traps will be sent
   on the standard UDP port 162.
   You must set :setting:`snmp.default.hosts` to enable the SNMP
   heartbeat functionality; otherwise, leaving the setting blank
   disables the SNMP heartbeat functionality.

.. setting:: snmp.listen.port

   *Type*: number
   *Default*: 11611

   Listening UDP port for SNMP. Setting to a number less than 1024 will
   require running |mms| server with root privileges.

.. setting:: snmp.default.heartbeat.interval

   *Type*: number
   *Default*: 300

   Number of seconds between heartbeat notifications.

reCaptcha Settings
~~~~~~~~~~~~~~~~~~

To enable `reCaptcha anti-spam test
<http://www.google.com/recaptcha/whyrecaptcha>`_ on new user
registration, you must have a `reCaptcha account
<https://www.google.com/recaptcha/admin/create>`_ and specify the API
information in the configuration file.

.. setting:: reCaptcha.public.key

   *Type*: string

   The reCaptcha public key associated with your account.

.. setting:: reCaptcha.private.key

   *Type*: string

   The reCaptcha private key associated with your account.

.. _ldap-settings:

LDAP Settings
~~~~~~~~~~~~~

To configure |onprem| for LDAP, you must start with a new installation or reset
your installation to a clean state. Your On Prem installation cannot have
existing users, groups, or hosts. For assistance, contact your MongoDB account
manager.

LDAP Server Setting
```````````````````

The following setting appears in the ``Hosted MMS configuration setting``
section of the ``conf-mms.properties`` file:

.. setting:: mms.userSvcClass

   *Type*: string

   The LDAP service class ``com.xgen.svc.mms.svc.user.UserSvcLdap``; i.e.

   .. code-block:: ini

      mms.userSvcClass=com.xgen.svc.mms.svc.user.UserSvcLdap

.. _ldap-user-settings:

LDAP User Settings
``````````````````

These settings configure |mms| to use an LDAP server for authentication. If you
use LDAP authentication, users must belong to an LDAP group to log into MMS.
You must create LDAP groups for each :doc:`|mms| user role
</reference/user-roles>`.

.. setting:: mms.ldap.url

   *Type*: string

   The URI for the LDAP server. For example:

   .. code-block:: ini

      mms.ldap.url=ldap://acme-dc1.acme.example.net:3890

.. setting:: mms.ldap.bindDn

   *Type*: string

   The LDAP user used to execute searches for other users. For example:

   .. code-block:: ini

      mms.ldap.bindDn=authUser@acme.example.net

.. setting:: mms.ldap.bindPassword

   *Type*: string

   The credentials for the search user. For example:

   .. code-block:: ini

      mms.ldap.bindPassword=<user-password>

.. setting:: mms.ldap.user.baseDn

   *Type*: string

   The base Distinguished Name (DN) that |mms| uses to search for users. Escape
   the ``=`` sign with ``\``. For example:

   .. code-block:: ini

      mms.ldap.user.baseDn=DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.user.searchAttribute

   *Type*: string

   The LDAP field used for the LDAP search. This is typically a username
   or email address.

   The value of this field is also used as the |mms| username.

   Example:

   .. code-block:: ini

      mms.ldap.user.searchAttribute=mail

.. setting:: mms.ldap.user.group

   *Type*: string

   The LDAP user attribute that contains the list of LDAP groups the user
   belongs to. The LDAP attribute can use any format to list the groups,
   including Common Name (``cn``) or Distinguished Name (``dn``). All MMS
   settings in this configuration file that specify groups must match the
   chosen format.

   Example:

   .. code-block:: ini

      mms.ldap.user.group=memberOf

.. setting:: mms.ldap.global.role.owner

   *Type*: string

   The LDAP group that has full privileges for the |mms| deployment, including
   full access to all :doc:`|mms| groups </tutorial/create-group>` and all
   administrative permissions. Users in the specified LDAP group receive the
   :ref:`global owner <global-owner-role>` role in MMS. Specify the group
   using the format that is used by the LDAP attribute specified in the
   :setting:`mms.ldap.user.group` setting.

   Example:

   .. code-block:: ini

      mms.ldap.global.role.owner=CN\=MMSGlobalOwner,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.user.firstName

   *Type*: string

   The LDAP user attribute that contains the user's first name. After
   successful LDAP authentication, |mms| synchronizes the specified LDAP
   attribute with the first name from the |mms| user record.

   For example:

   .. code-block:: ini

      mms.ldap.user.firstName=givenName

.. setting:: mms.ldap.user.lastName

   *Type*: string

   The LDAP user attribute that contains the user's last name. After
   successful LDAP authentication, |mms| synchronizes the specified LDAP
   attribute with the last name from the |mms| user record.

   For example:

   .. code-block:: ini

      mms.ldap.user.lastName=sn

.. setting:: mms.ldap.user.email

   *Type*: string

   The LDAP user attribute that contains the user's email address. After
   successful LDAP authentication, |mms| synchronizes the specified LDAP
   attribute with the email address from the |mms| user record.

   For example:

   .. code-block:: ini

      mms.ldap.user.email=mail

.. _default-ldap-separator:

.. _ldap-global-role-settings:

LDAP Global Role Settings
`````````````````````````

These settings assign :ref:`|mms| global roles <global-roles>` to the members of
the specified LDAP groups. Specify groups using the format used by the LDAP
attribute specified in the :setting:`mms.ldap.user.group` setting. You can
specify multiple groups using the ``;;`` delimiter. To change the default
delimiter, use the :setting:`mms.ldap.group.separator` setting.

Each |mms| global role provides its level of access to all the :doc:`|mms| groups
</tutorial/create-group>` in the deployment. To provide access to specific
groups, use :ref:`group-level roles <global-roles>`.

.. setting:: mms.ldap.global.role.automationAdmin

   *Type*: string

   The LDAP group whose members have the :ref:`global automation admin
   role <global-automation-admin-role>` in MMS. For example:

   .. code-block:: ini

      mms.ldap.global.role.automationAdmin=CN\=MMS-AutomationAdmin,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.global.role.backupAdmin

   *Type*: string

   The LDAP group whose members have the :ref:`global backup admin role
   <global-backup-admin-role>` in MMS. For example:

   .. code-block:: ini

      mms.ldap.global.role.backupAdmin=CN\=MMS-BackupAdmin,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.global.role.monitoringAdmin

   *Type*: string

   The LDAP group whose members have the :ref:`global monitoring admin
   role <global-monitoring-admin-role>` in MMS. For example:

   .. code-block:: ini

      mms.ldap.global.role.monitoringAdmin=CN\=MMS-MonitoringAdmin,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.global.role.userAdmin

   *Type*: string

   The LDAP group whose members have the :ref:`global user admin role
   <global-user-admin-role>` in MMS. For example:

   .. code-block:: ini

      mms.ldap.global.role.userAdmin=CN\=MMS-UserAdmin,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.global.role.readOnly

   *Type*: string

   The LDAP group whose members have the :ref:`global read-only role
   <global-read-only-role>` in MMS. For example:

   .. code-block:: ini

      mms.ldap.global.role.readOnly=CN\=MMS-ReadOnly,OU\=MMS,OU\=acme Groups,DC\=acme,DC\=example,DC\=net

.. setting:: mms.ldap.group.separator

   *Type*: string

   Each of the global role values can take a delimited list of groups: for
   example ``"dbas,sysadmins"``. If a group value contains the delimiter, the
   delimiter must be set to another value, such as ``;;``. For example, if you
   have the group value ``"CN\=foo,DN\=bar"`` and the delimiter is ``,`` then
   |mms| parses ``"CN\=foo,DN\=bar"`` as two elements rather than as the
   description for a single group.

   Starting with |mms| 1.5, the default delimiter is ``;;``.

.. _configuration-kerberos-settings:

Kerberos Settings
~~~~~~~~~~~~~~~~~

To enable Kerberos authentication between the |mms| application and its
:doc:`backing database </tutorial/prepare-backing-mongodb-instances>`,
configure the following settings. You must configure
all required Kerberos settings to enable Kerberos authentication.

.. setting:: jvm.java.security.krb5.kdc

   Required. The IP/FQDN (Fully Qualified Domain Name) of the KDC
   server. The value will be set to JVM's java.security.krb5.kdc.

   .. code-block:: properties

      jvm.java.security.krb5.kdc=kdc.example.com

.. setting:: jvm.java.security.krb5.realm

   Required. This is the default REALM for Kerberos. It is being used
   for JVM's java.security.krb5.realm.

   .. code-block:: properties

      jvm.java.security.krb5.realm=EXAMPLE.COM

.. setting:: mms.kerberos.principal

   Required. The principal we used to authenticate with MongoDB. This
   should be the exact same user on the :setting:`mongo.mongoUri` above.

   .. code-block:: properties

      mms.kerberos.principal=mms/mmsweb.example.com@EXAMPLE.COM

.. setting:: mms.kerberos.keyTab

   Required. The absolute path to the keytab file for the principal.

   .. code-block:: properties

      mms.kerberos.keyTab=/path/to/mms.keytab

.. setting:: mms.kerberos.debug

   Optional. The debug flag to output more information on Kerberos
   authentication process.

   .. code-block:: properties

      mms.kerberos.debug=false

.. _on-prem-authentication-configuration:

MongoDB Access Control Considerations
-------------------------------------

For a MongoDB server with access control, the :setting:`mongo.mongoUri`
includes the MongoDB user credentials. For example:

.. code-block:: ini

   mongo.mongoUri=mongodb://mongodbuser1:password@mydb1.example.net:40000/admin

Encrypt MongoDB User Credentials
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you do not want to store credentials in plain text, |monitoring|
provides a tool to encrypt the MongoDB credentials. To encrypt
authentication credentials:

#. Issue the following command to create an encrypted credential pair,
   replacing ``<username>`` with your username:

   .. code-block:: sh

      sudo <install_dir>/bin/credentialstool --username <username> --password

   This will prompt you to enter the password and will output the
   encrypted credential pair.

   ``credentialstool`` requires root privileges, (i.e. ``sudo``) when
   installed with ``rpm`` or ``deb`` packages, because it modifies the
   ``/etc/mongodb-mms/gen.key`` file.

#. Use the encrypted credential pair in the :setting:`mongo.MongoURI`
   settings where needed, and add the
   :setting:`mongo.encryptedCredentials = true
   <mongo.encryptedCredentials>` setting. For example:

   .. code-block:: sh

      mongo.mongoUri=mongodb://da83ex3s:a4fbcf3a1@mydb1.example.net:40000/admin
      mongo.encryptedCredentials=true

.. important::
   The ``conf-mms.properties`` file can contain multiple
   :setting:`mongo.MongoURI` settings. If
   :setting:`mongo.encryptedCredentials` is ``true``, you must encrypt
   all user credentials found in the various :setting:`mongo.MongoURI`
   settings.

Authentication Mechanisms and Source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

LDAP and ``mongo.mongoUri``
````````````````````````````

To connect to a MongoDB server using LDAP, include the
``authMechanism=PLAIN&authSource=$external`` options in the
:setting:`mongo.mongoUri` connection string. For example:

.. code-block:: ini

   mongo.mongoUri=mongodb://dbuser1:password@mydb1.example.net:40000/?authMechanism=PLAIN&authSource=$external

Kerberos and ``mongo.mongoUri``
```````````````````````````````

To connect to a MongoDB server using Kerberos, include the
``authMechanism=GSSAPI`` option in the :setting:`mongo.mongoUri`
connection string. For example:

.. code-block:: ini

   mongo.mongoUri=mongodb://dbuser1:password@mydb1.example.net:40000/?authMechanism=GSSAPI

To enable Kerberos authentication between the |mms| application and its
:doc:`backing database </tutorial/prepare-backing-mongodb-instances>`,
see also :ref:`configuration-kerberos-settings`.

.. seealso:: :data:`~uri.authMechanism`, :data:`~uri.authSource`

.. _server-mongodb-user-access:

MongoDB User Access
~~~~~~~~~~~~~~~~~~~

The MongoDB user *must* have the
following roles: :authrole:`readWriteAnyDatabase`,
:authrole:`clusterAdmin`, and :authrole:`dbAdminAnyDatabase`.
