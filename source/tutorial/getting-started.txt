.. _getting-started:

===============
Getting Started
===============

.. default-domain:: mongodb


The following page provides various examples for querying in the
MongoDB shell. For examples using MongoDB drivers, refer to the links
in the :ref:`gs-additional-examples` section.

.. _mongo-web-shell:

Examples
--------

.. include:: /includes/fact-mws.rst

Click inside the shell to connect. Once connected, you can run the
examples in the shell above.

.. tabs::

   .. tab:: 0. Switch Database
      :tabid: example-0

      Within the :ref:`shell <mongo-web-shell>`, ``db`` refers to
      your current database. Type ``db`` to display the current
      database.

      .. code-block:: javascript

         db

      The operation should return ``test``, which is the default
      database.

      To switch databases, type ``use <db>``. For example, to switch
      to the ``examples`` database:

      .. code-block:: javascript

         use examples

      You do not need to create the database before you switch.
      MongoDB creates the database when you first store data in that
      database (such as create the first collection in the database).

      To verify that your database is now ``examples``, type ``db`` in
      the :ref:`shell <mongo-web-shell>` above.

      .. code-block:: javascript

         db

      To create a collection in the database, see the next tab.

   .. tab:: 1. Populate a collection (Insert)
      :tabid: example-1

      MongoDB stores documents in :doc:`collections
      </core/databases-and-collections>`. Collections are analogous to
      tables in relational databases. If a collection does not exist,
      MongoDB creates the collection when you first store data for that
      collection.

      The following example uses the
      :method:`db.collection.insertMany()` method to insert new
      :doc:`documents </core/document>` into the ``inventory``
      collection. You can copy and paste the example into the
      :ref:`shell <mongo-web-shell>` above.

      .. code-block:: javascript

         db.inventory.insertMany([
            { item: "journal", qty: 25, status: "A", size: { h: 14, w: 21, uom: "cm" }, tags: [ "blank", "red" ] },
            { item: "notebook", qty: 50, status: "A", size: { h: 8.5, w: 11, uom: "in" }, tags: [ "red", "blank" ] },
            { item: "paper", qty: 10, status: "D", size: { h: 8.5, w: 11, uom: "in" }, tags: [ "red", "blank", "plain" ] },
            { item: "planner", qty: 0, status: "D", size: { h: 22.85, w: 30, uom: "cm" }, tags: [ "blank", "red" ] },
            { item: "postcard", qty: 45, status: "A", size: { h: 10, w: 15.25, uom: "cm" }, tags: [ "blue" ] }
         ]);

         // MongoDB adds an _id field with an ObjectId value if the field is not present in the document

      The operation returns a document that contains the
      acknowledgement indicator and an array that contains the
      ``_id`` of each successfully inserted documents.

      To verify the insert, you can query the collection (See the
      next tab).

   .. tab:: 2. Select All Documents
      :tabid: example-2
   
      To select the documents from a collection, you can use the
      :method:`db.collection.find()` method. To select all documents
      in the collection, pass an empty document as the :ref:`query
      filter document <document-query-filter>` to the method.

      In the :ref:`shell <mongo-web-shell>`, copy and paste the
      following to return all documents in the ``inventory``
      collection.

      .. code-block:: javascript

         db.inventory.find({})

      To format the results, append the ``.pretty()`` to the
      ``find`` operation:

      .. code-block:: javascript

         db.inventory.find({}).pretty()

      .. note::

         The example assumes that you have populated the
         ``inventory`` collection from the previous step.

   .. tab:: 3. Specify Equality Matches
      :tabid: example-3

      For an equality match (i.e. ``<field>`` equals ``<value>``),
      specify ``<field>: <value>`` in the :ref:`query filter
      document <document-query-filter>` and pass to the
      :method:`db.collection.find()` method.

      .. note::

         The examples assume that you have populated the
         ``inventory`` collection.

      - In the :ref:`shell <mongo-web-shell>`, copy and paste the
        following to return documents where ``status`` field equals
        ``"D"``:

        .. code-block:: javascript

           db.inventory.find( { status: "D" } );

      - In the :ref:`shell <mongo-web-shell>`, copy and paste the
        following to return document where ``qty`` field equals
        ``0``:

        .. code-block:: javascript
   
           db.inventory.find( { qty: 0 } );

      - In the :ref:`shell <mongo-web-shell>`, copy and paste the
        following to return document where ``qty`` field equals
        ``0`` and ``status`` field equals ``"D"``:

        .. code-block:: javascript
   
           db.inventory.find( { qty: 0, status: "D" } );

      - In the :ref:`shell <mongo-web-shell>`, copy and paste the
        following to return document where the ``uom`` field, nested
        inside the size document, equals ``"in"``:

        .. code-block:: javascript

           db.inventory.find( { "size.uom": "in" } )

      - In the :ref:`shell <mongo-web-shell>`, copy and paste the
        following to return document where the ``size`` field equals
        the document ``{ h: 14, w: 21, uom: "cm" }``:

        .. code-block:: javascript

           db.inventory.find( { size: { h: 14, w: 21, uom: "cm" } } )

        Equality matches on the embedded document require an exact
        match, including the field order.

      - In the :ref:`shell <mongo-web-shell>`, copy and paste the
        following to return documents where the ``tags`` array
        contains ``"red"`` as one of its elements:

        .. code-block:: javascript

           db.inventory.find( { tags: "red" } )

        If the ``tags`` field is a string instead of an array, then
        the query is just an equality match.

      - In the :ref:`shell <mongo-web-shell>`, copy and paste the
        following to return documents where the ``tags`` field
        matches the specified array exactly, including the order:
      
        .. code-block:: javascript
        
           db.inventory.find( { tags: [ "red", "blank" ] } )


   .. tab:: 4. Specify Fields to Return (Projection)
      :tabid: example-4

      To specify fields to return, pass a projection document to the
      :method:`db.collection.find(\<query document\>, \<projection
      document\>) <db.collection.find()>` method. In the projection
      document, specify:
      
      - ``<field>: 1`` to include a field in the returned documents
      
      - ``<field>: 0`` to exclude a field in the returned documents

      In the :ref:`shell <mongo-web-shell>`, copy and paste the
      following to return the ``_id``, ``item``, and the ``status``
      fields from all documents in the ``inventory`` collection:

      .. code-block:: javascript

         db.inventory.find( { }, { item: 1, status: 1 } );

      You do not have to specify the ``_id`` field to return the
      field. It returns by default. To exclude the field, set it to
      ``0`` in the projection document. For example, copy and paste
      the following to return only the ``item``, and the ``status``
      fields in the matching documents:

      .. code-block:: javascript

         db.inventory.find( {}, { _id: 0, item: 1, status: 1 } );


Next Steps
----------

Set up Your Own Deployment
~~~~~~~~~~~~~~~~~~~~~~~~~~

To set up your own deployment:

.. list-table::
   :widths: 35 65

   * - MongoDB Atlas Free Tier Cluster
    
     - MongoDB Atlas is a fast, easy, and free way to get started with
       MongoDB. To learn more, see the
       :atlas:`Getting Started with Atlas </getting-started/>` tutorial.

   * - Local MongoDB installation
    
     - For more information on installing MongoDB locally, see
       :ref:`Install MongoDB<tutorial-installation>`.

.. _gs-additional-examples:

Additional Examples
~~~~~~~~~~~~~~~~~~~

For additional examples, including MongoDB driver specific examples
(Python, Java, Node.js, etc.), see:

.. list-table::
   :widths: 45 55

   * - Query document examples

     - - :doc:`/tutorial/query-documents`

       - :doc:`/tutorial/query-embedded-documents`

       - :doc:`/tutorial/query-arrays`

       - :doc:`/tutorial/query-array-of-documents`

       - :doc:`/tutorial/project-fields-from-query-results`

       - :doc:`/tutorial/query-for-null-fields`

   * - Update document examples

     - - :doc:`/tutorial/update-documents`

   * - Delete document examples

     - - :doc:`/tutorial/remove-documents`

Additional Topics
~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :class: index-table

   * - Introduction
     - Developers
     - Administrators
     - Reference

   * - :doc:`/introduction`

       :doc:`Installation Guides </installation>`

       :doc:`/core/databases-and-collections`

       :doc:`/core/document`

     - :doc:`CRUD Operations </crud>`

       :doc:`Aggregation </aggregation>`

       :doc:`SQL to MongoDB </reference/sql-comparison>`

       :doc:`/indexes`

     - :doc:`/administration/production-notes`

       :doc:`Replica Sets </replication>`

       :doc:`Sharded Clusters </sharding>`

       :doc:`MongoDB Security </security>`

     - :doc:`Shell Methods </reference/method>`

       :doc:`Query Operators </reference/operator>`

       :doc:`Reference </reference>`

       :doc:`/reference/glossary`
