==========================
db.collection.deleteMany()
==========================

.. default-domain:: mongodb

.. meta::
   :description: Delete all documents that match a specified filter from a collection.

.. facet::
   :name: programming_language 
   :values: shell

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/wayfinding/mongosh-method-deleteMany.rst

Definition
----------

.. method:: db.collection.deleteMany()

   .. |dbcommand| replace:: :dbcommand:`delete` command

   Removes all documents that match the ``filter`` from a collection.
   
   :returns:
      
     A document containing:
      
     - A boolean ``acknowledged`` as ``true`` if the operation ran with 
       :term:`write concern` or ``false`` if write concern was disabled
    
     - ``deletedCount`` containing the number of deleted documents

.. include:: /includes/note-drop-faster-than-delete-for-large-collections.rst

Compatibility
-------------

.. |operator-method| replace:: ``db.collection.deleteMany()``

This method is available in deployments hosted in the following environments:

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-all.rst

.. include:: /includes/fact-environments-onprem-only.rst

Syntax
------

The :method:`~db.collection.deleteMany()` method has the following
syntax:

.. code-block:: javascript

   db.collection.deleteMany(
      <filter>,
      {
         writeConcern: <document>,
         collation: <document>
      }
   )


.. list-table::
   :header-rows: 1
   :widths: 20 20 80
   
   * - Parameter
   
     - Type
   
     - Description
   
   * - :ref:`filter <deleteMany-filter>`
   
     - document
   
     - .. _deleteMany-filter:
        
       Specifies deletion criteria using :ref:`query operators
       <query-selectors>`. 
          
       To delete all documents in a collection, pass in an empty
       document (``{ }``).
          
          
   
   * - :ref:`writeConcern <deleteMany-wc>`
   
     - document
   
     - .. _deleteMany-wc:
        
       Optional. A document expressing the :ref:`write concern
       <write-concern>`. Omit to use the default write concern.
          
       .. include:: /includes/extracts/transactions-operations-write-concern.rst
          
          
   
   * - :ref:`collation <deleteMany-collation>`
   
     - document
   
     - .. _deleteMany-collation:
        
       Optional. 
          
       .. include:: /includes/extracts/collation-option.rst

   * - :ref:`hint <deleteMany-hint>`

     - document

     - .. _deleteMany-hint:

       Optional. A document or string that specifies the index 
       to use to support the :ref:`query predicate
       <deleteMany-filter>`.
          
       The option can take an index specification document or the
       index name string.
          
       If you specify an index that does not exist, the operation
       errors.

       For an example, see :ref:`ex-deleteMany-hint`.

Behavior
--------

Sharded Collections
~~~~~~~~~~~~~~~~~~~

.. |method| replace:: ``deleteMany()``

.. include:: /includes/method-targets-all-shards-if-no-txn.rst

.. _deleteMany-timeseries-collection:

Time Series Collections
~~~~~~~~~~~~~~~~~~~~~~~

:method:`db.collection.deleteMany()` throws a ``WriteError`` exception
if used on a :term:`time series collection`. To remove all documents
from a time series collection, use :method:`db.collection.drop()`.

.. _deleteMany-delete-multiple-documents:

Delete a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

To delete a single document, use :method:`db.collection.deleteOne()` instead. 

Alternatively, use a field that is a part of a :term:`unique index` such as 
``_id``. 

Transactions
~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-supported-operation.rst

.. include:: /includes/extracts/transactions-operations-write-concern.rst

.. include:: /includes/extracts/transactions-usage.rst

.. |operation| replace:: :method:`db.collection.deleteMany()`

Primary Node Failure
~~~~~~~~~~~~~~~~~~~~

:method:`db.collection.deleteMany()` deletes documents one at a time. 
If the primary node fails during a :method:`db.collection.deleteMany()`
operation, documents that were not yet deleted from secondary nodes are
not deleted from the collection.

Oplog Entries
~~~~~~~~~~~~~

If a ``db.collection.deleteMany()`` operation successfully deletes one
or more documents, the operation adds an entry for each deleted document
on the :term:`oplog` (operations log). If the operation fails or does
not find any documents to delete, the operation does not add an entry on
the oplog. 


Examples
--------

.. _deleteMany-example-delete-multiple-document:

Delete Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

The ``orders`` collection has documents with the following structure:

.. code-block:: javascript

   db.orders.insertOne(
      {
         _id: ObjectId("563237a41a4d68582c2509da"),
         stock: "Brent Crude Futures",
         qty: 250,
         type: "buy-limit",
         limit: 48.90,
         creationts: ISODate("2015-11-01T12:30:15Z"),
         expiryts: ISODate("2015-11-01T12:35:15Z"),
         client: "Crude Traders Inc."
      }
   )
   
The following operation deletes all documents where ``client : "Crude Traders 
Inc."``:

.. code-block:: javascript

   try {
      db.orders.deleteMany( { "client" : "Crude Traders Inc." } );
   } catch (e) {
      print (e);
   }
   
The operation returns:

.. code-block:: javascript

   { "acknowledged" : true, "deletedCount" : 10 }
   
The following operation deletes all documents where ``stock : "Brent Crude 
Futures"`` and ``limit`` is greater than ``48.88``:

.. code-block:: javascript

   try {
      db.orders.deleteMany( { "stock" : "Brent Crude Futures", "limit" : { $gt : 48.88 } } );
   } catch (e) {
      print (e);
   }

The operation returns:

.. code-block:: javascript

   { "acknowledged" : true, "deletedCount" : 8 }

.. _deleteMany-example-update-with-write-concern:

deleteMany() with Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Given a three member replica set, the following operation specifies a 
``w`` of ``majority`` and ``wtimeout`` of ``100``:

.. code-block:: javascript

   try {
      db.orders.deleteMany(
          { "client" : "Crude Traders Inc." },
          { writeConcern: { w : "majority", wtimeout : 100 }}
      );
   } catch (e) {
      print (e);
   }

If the acknowledgment takes longer than the ``wtimeout`` limit, the following 
exception is thrown:

.. code-block:: javascript

   WriteConcernError({
      "code" : 64,
      "errmsg" : "waiting for replication timed out",
      "errInfo" : {
        "wtimeout" : true,
        "writeConcern" : {  
          "w" : "majority",
          "wtimeout" : 100,
          "provenance" : "getLastErrorDefaults"
        }
      }
   })

.. seealso::

   :data:`WriteResult.writeConcernError`

Specify Collation
~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/collation-versionadded.rst

A collection ``restaurants`` has the following documents:

.. code-block:: javascript

   db.restaurants.insertMany( [
      { _id: 1, category: "caf√©", status: "A" },
      { _id: 2, category: "cafe", status: "a" },
      { _id: 3, category: "cafE", status: "a" }
   ] )

The following operation includes the :ref:`collation <collation>`
option:

.. code-block:: javascript

   db.restaurants.deleteMany( 
      { category: "cafe", status: "A" }, 
      { collation: { locale: "fr", strength: 1 } }
   )

.. _ex-deleteMany-hint:

Specify ``hint`` for Delete Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In :binary:`~bin.mongosh`, create a ``members`` collection
with the following documents:

.. code-block:: javascript

   db.members.insertMany([
      { "_id" : 1, "member" : "abc123", "status" : "P", "points" :  0,  "misc1" : null, "misc2" : null },
      { "_id" : 2, "member" : "xyz123", "status" : "A", "points" : 60,  "misc1" : "reminder: ping me at 100pts", "misc2" : "Some random comment" },
      { "_id" : 3, "member" : "lmn123", "status" : "P", "points" :  0,  "misc1" : null, "misc2" : null },
      { "_id" : 4, "member" : "pqr123", "status" : "D", "points" : 20,  "misc1" : "Deactivated", "misc2" : null },
      { "_id" : 5, "member" : "ijk123", "status" : "P", "points" :  0,  "misc1" : null, "misc2" : null },
      { "_id" : 6, "member" : "cde123", "status" : "A", "points" : 86,  "misc1" : "reminder: ping me at 100pts", "misc2" : "Some random comment" }
   ])

Create the following indexes on the collection:

.. code-block:: javascript

   db.members.createIndex( { status: 1 } )
   db.members.createIndex( { points: 1 } )

The following delete operation explicitly hints to use the index
``{ status: 1 }``:

.. code-block:: javascript

   db.members.deleteMany(
      { "points": { $lte: 20 }, "status": "P" }, 
      { hint: { status: 1 } }
   )

.. note::
   
   If you specify an index that does not exist, the operation errors.

The delete command returns the following:

.. code-block:: javascript

   { "acknowledged" : true, "deletedCount" : 3 }

To view the indexes used, you can use the :pipeline:`$indexStats` pipeline:

.. code-block:: javascript

   db.members.aggregate( [ { $indexStats: { } }, { $sort: { name: 1 } } ] )

The ``accesses.ops`` field in the :pipeline:`$indexStats` output
indicates the number of operations that used the index.
