=====================
$bitAnd (aggregation)
=====================

.. default-domain:: mongodb

.. contents:: On this page
  :local:
  :backlinks: none
  :depth: 1
  :class: singlecol

Definition
----------

.. versionadded:: 6.3

.. expression:: $bitAnd 

    Returns the result of a bitwise ``and`` operation on an array of ``int`` or 
    ``long`` values. 

Syntax 
------

The :expression:`$bitAnd` operator has the following syntax: 

.. code-block:: javascript

      { $bitAnd: { [ <expression1>, <expression2>, ... ] }

Behavior
--------

.. include:: /includes/fact-bitwise-integer-long-results.rst

.. include:: /includes/fact-mongosh-integer-long-constructors.rst

.. include:: /includes/fact-bitwise-type-error.rst

If the argument is an empty array, the operation returns ``NumberInt(-1)``.

If any of the operands equate to ``null``, the operation returns ``null``. 

Examples
--------

The examples on this page use the ``switches`` collection, which contains the 
following documents: 

.. code-block:: javascript 

    db.switches.insertMany( [
        { _id: 0, a: NumberInt(0), b: NumberInt(127) },
        { _id: 1, a: NumberInt(2), b: NumberInt(3) },
        { _id: 2, a: NumberInt(3), b: NumberInt(5) }
    ] )

Bitwise ``AND`` with Two Integers 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following aggregation uses the :expression:`$bitAnd` operator in the 
:pipeline:`$project` stage:

.. code-block:: javascript 

    db.switches.aggregate( [
      { 
        $project: { 
          result: { 
            $bitAnd: [ "$a", "$b" ]
          }
        }
      }
    ])

The operation returns the following results:

.. code-block:: javascript 
  :copyable: false

    [
      { _id: 0, result: 0 }
      { _id: 1, result: 2 }
      { _id: 2, result: 1 }
    ]

Bitwise ``AND`` with a Long and Integer 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following aggregation uses the :expression:`$bitAnd` operator in the 
:pipeline:`$project` stage:

.. code-block:: javascript 

    db.switches.aggregate( [
      { 
        $project: { 
          result: { 
            $bitAnd: [ "$a", NumberLong("63") ]
          }
        }
      }
    ])

The operation returns the following results:

.. code-block:: javascript 
  :copyable: false
    
    [
      { _id: 0, result: NumberLong("0") }
      { _id: 1, result: NumberLong("2") }
      { _id: 2, result: NumberLong("3") }
    ]

Learn More 
----------

- :ref:`aggregation-pipeline-operators`

- :ref:`update-bit`
