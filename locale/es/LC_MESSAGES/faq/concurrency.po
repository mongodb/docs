# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 16:25+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 4d5fe5a8937b41a39d061175ebd91dd9
#: ../source/faq/concurrency.txt:3
msgid "FAQ: Concurrency"
msgstr ""

# 8d007f83efc244d183d20d5e331631bd
#: ../source/faq/concurrency.txt
msgid "On this page"
msgstr ""

# 4419f19e4fb448ae9dfd9f464344b13c
#: ../source/faq/concurrency.txt:15
msgid ""
"MongoDB allows multiple clients to read and write the same data. In order"
" to ensure consistency, it uses locking and other :term:`concurrency "
"control` measures to prevent multiple clients from modifying the same "
"piece of data simultaneously. Together, these mechanisms guarantee that "
"all writes to a single document occur either in full or not at all and "
"that clients never see an inconsistent view of the data."
msgstr ""

# dd4f3bc3ed2e4238b583836f59c77cff
#: ../source/faq/concurrency.txt:27
msgid "What type of locking does MongoDB use?"
msgstr ""

# dc19b00e50204fe9b3afa70b54d9619a
#: ../source/includes/extracts/lock-general.rst:1
msgid ""
"MongoDB uses multi-granularity locking [#mgl-ref]_ that allows operations"
" to lock at the global, database or collection level, and allows for "
"individual storage engines to implement their own concurrency control "
"below the collection level (e.g., at the document-level in WiredTiger)."
msgstr ""

# 791d6a6431e548f88577abf60d496b15
#: ../source/includes/extracts/lock-general.rst:7
msgid ""
"MongoDB uses reader-writer locks that allow concurrent readers shared "
"access to a resource, such as a database or collection, but in MMAPv1, "
"give exclusive access to a single write operation."
msgstr ""

# cd6a711c6e4b4a24aaafa90af023b49b
#: ../source/faq/concurrency.txt:31
msgid ""
"In addition to a shared (S) locking mode for reads and an exclusive (X) "
"locking mode for write operations, intent shared (IS) and intent "
"exclusive (IX) modes indicate an intent to read or write a resource using"
" a finer granularity lock.  When locking at a certain granularity all "
"higher levels are locked using an :term:`intent lock`."
msgstr ""

# 1d151f03200c4a2f84e870249dc3f8fe
#: ../source/faq/concurrency.txt:37
msgid ""
"For example, when locking a collection for writing (using mode X), both "
"the corresponding database lock and the global lock must be locked in "
"intent exclusive (IX) mode. A single database can simultaneously be "
"locked in IS and IX mode, but an exclusive (X) lock cannot coexist with "
"any other modes, and a shared (S) lock can only coexists with intent "
"shared (IS) locks."
msgstr ""

# 810cbd1ac67049d4b93ec6928f529cf4
#: ../source/faq/concurrency.txt:46
msgid ""
"Locks are fair, with reads and writes being queued in order. However, to "
"optimize throughput, when one request is granted, all other compatible "
"requests will be granted at the same time, potentially releasing them "
"before a conflicting request.  For example, consider a case in which an X"
" lock was just released, and in which the conflict queue contains the "
"following items:"
msgstr ""

# f69eaad76292424db5aa2f3227fbd3a0
#: ../source/faq/concurrency.txt:53
msgid "IS |rarr| IS |rarr| X |rarr| X |rarr| S |rarr| IS"
msgstr ""

# 72d55d237c194d4e81e2a62cedec4645
#: ../source/faq/concurrency.txt:55
msgid ""
"In strict first-in, first-out (FIFO) ordering, only the first two IS "
"modes would be granted. Instead MongoDB will actually grant all IS and S "
"modes, and once they all drain, it will grant X, even if new IS or S "
"requests have been queued in the meantime. As a grant will always move "
"all other requests ahead in the queue, no starvation of any request is "
"possible."
msgstr ""

# 95f3cb3fa86e44c595420d4586cd558f
#: ../source/faq/concurrency.txt:62
msgid ""
"See the Wikipedia page on `Multiple granularity locking "
"<http://en.wikipedia.org/wiki/Multiple_granularity_locking>`_ for more "
"information."
msgstr ""

# a9f2204f612b4ceaa11c7598f8063ed4
#: ../source/faq/concurrency.txt:68
msgid "How granular are locks in MongoDB?"
msgstr ""

# 67cd90b5989340f88a8e127192081739
#: ../source/faq/concurrency.txt:73
msgid "For WiredTiger"
msgstr ""

# 609c89df800e4d3bb3f9a33e06bb27a4
#: ../source/faq/concurrency.txt:75
msgid ""
"Beginning with version 3.0, MongoDB ships with the :ref:`WiredTiger "
"<storage-wiredtiger>` storage engine."
msgstr ""

# 3c39c6f56e174f30a6cc42693f0bf7d1
#: ../source/includes/fact-wiredtiger-locks.rst:1
msgid ""
"For most read and write operations, WiredTiger uses optimistic "
"concurrency control. WiredTiger uses only intent locks at the global, "
"database and collection levels. When the storage engine detects conflicts"
" between two operations, one will incur a write conflict causing MongoDB "
"to transparently retry that operation."
msgstr ""

# 0ee7a27116224368bea174f4ce3a0d56
#: ../source/includes/fact-wiredtiger-locks.rst:7
msgid ""
"Some global operations, typically short lived operations involving "
"multiple databases, still require a global \"instance-wide\" lock. Some "
"other operations, such as dropping a collection, still require an "
"exclusive database lock."
msgstr ""

# ab76705adbc2421ea8fe4b6887197bd0
#: ../source/faq/concurrency.txt:81
msgid "For MMAPv1"
msgstr ""

# d23c5081feb14b0a83e3aa463c64d14b
#: ../source/faq/concurrency.txt:83
msgid ""
"The MMAPv1 storage engine uses collection-level locking as of the 3.0 "
"release series, an improvement on earlier versions in which the database "
"lock was the finest-grain lock. Third-party storage engines may either "
"use collection-level locking or implement their own finer-grained "
"concurrency control."
msgstr ""

# a80e3a68bc444f3fb95bcda26b684987
#: ../source/faq/concurrency.txt:89
msgid ""
"For example, if you have six collections in a database using the MMAPv1 "
"storage engine and an operation takes a collection-level write lock, the "
"other five collections are still available for read and write operations."
" An exclusive database lock makes all six collections unavailable for the"
" duration of the operation holding the lock."
msgstr ""

# 6e2da8a1a6bc4eaba960949ba5307ee4
#: ../source/faq/concurrency.txt:96
msgid "How do I see the status of locks on my :program:`mongod` instances?"
msgstr ""

# 2b6a87e1689f4e62ae2c86fe1ef36aab
#: ../source/faq/concurrency.txt:98
msgid ""
"For reporting on lock utilization information on locks, use any of the "
"following methods:"
msgstr ""

# db91fa6d474848cda865b3a8a9386c9c
# e058b61981d245c284863b40a2a111d9
#: ../source/faq/concurrency.txt:101 ../source/faq/concurrency.txt:195
msgid ":method:`db.serverStatus()`,"
msgstr ""

# f92b41271ebf416dac7e21755207db9f
#: ../source/faq/concurrency.txt:102
msgid ":method:`db.currentOp()`,"
msgstr ""

# dcab9b3efbb94515966cb12d9acef33e
#: ../source/faq/concurrency.txt:103
msgid ":doc:`mongotop </reference/program/mongotop>`,"
msgstr ""

# d96f1de6048442be8a3182771409b8e8
#: ../source/faq/concurrency.txt:104
msgid ":doc:`mongostat </reference/program/mongostat>`, and/or"
msgstr ""

# 668467cf00844fef8e0a6434e1f8acfb
#: ../source/faq/concurrency.txt:105
msgid ""
"the |mms-home| or :products:`Ops Manager, an on-premise solution "
"available in MongoDB Enterprise Advanced </mongodb-enterprise-"
"advanced?jmp=docs>`"
msgstr ""

# 24c1ea050f214f1a87ef68e814b52e9f
#: ../source/faq/concurrency.txt:110
msgid ""
"Specifically, the :serverstatus:`locks` document in the :doc:`output of "
"serverStatus </reference/command/serverStatus>`, or the "
":data:`~currentOp.locks` field in the :doc:`current operation reporting "
"</reference/method/db.currentOp>` provides insight into the type of locks"
" and amount of lock contention in your :program:`mongod` instance."
msgstr ""

# 2dee73b9763b40458d014ee7a7dc7a3a
#: ../source/faq/concurrency.txt:116
msgid "To terminate an operation, use :method:`db.killOp()`."
msgstr ""

# 2f9dc9dbd29847bb81736bbae6de28b2
#: ../source/faq/concurrency.txt:123
msgid "Does a read or write operation ever yield the lock?"
msgstr ""

# 5c004c99bf854cf2b87a7c8b8c365cbe
#: ../source/faq/concurrency.txt:125
msgid "In some situations, read and write operations can yield their locks."
msgstr ""

# 7372557c137946eca30b74ccb19c964e
#: ../source/faq/concurrency.txt:127
msgid ""
"Long running read and write operations, such as queries, updates, and "
"deletes, yield under many conditions.  MongoDB operations can also yield "
"locks between individual document modifications in write operations that "
"affect multiple documents like :method:`~db.collection.update()` with the"
" ``multi`` parameter."
msgstr ""

# 06f6de788d354217886793546c58f1e4
#: ../source/faq/concurrency.txt:133
msgid ""
"MongoDB's :ref:`MMAPv1 <storage-mmapv1>` storage engine uses heuristics "
"based on its access pattern to predict whether data is likely in physical"
" memory before performing a read. If MongoDB *predicts* that the data is "
"not in physical memory, an operation will yield its lock while MongoDB "
"loads the data into memory. Once data is available in memory, the "
"operation will reacquire the lock to complete the operation."
msgstr ""

# c080f57bd5f54360a7077607f8418c30
#: ../source/faq/concurrency.txt:141
msgid ""
"For storage engines supporting document level :term:`concurrency "
"control`, such as :doc:`WiredTiger </core/wiredtiger>`, yielding is not "
"necessary when accessing storage as the :term:`intent locks <intent "
"lock>`, held at the global, database and collection level, do not block "
"other readers and writers."
msgstr ""

# ea253e738e714cf49295714d9c33655b
#: ../source/faq/concurrency.txt:147
msgid ""
"MongoDB does not yield locks when scanning an index even if it predicts "
"that the index is not in memory."
msgstr ""

# e698e3b9af2e46808ca381a090103864
#: ../source/faq/concurrency.txt:154
msgid "Which operations lock the database?"
msgstr ""

# 5a1a400c122848f2bf1aa72a6ca72b1f
#: ../source/faq/concurrency.txt:156
msgid ""
"The following table lists common database operations and the types of "
"locks they use."
msgstr ""

# 872ddeb1ef9640489ed3476041bcbcb1
#: ../source/includes/table/lock-behavior-per-operation.rst:4
msgid "Operation"
msgstr ""

# 61846df391ef488cbb3147b334a69b68
#: ../source/includes/table/lock-behavior-per-operation.rst:6
msgid "Lock Type"
msgstr ""

# 5a1ea5ec896a49b087d5a57e92a0baa5
#: ../source/includes/table/lock-behavior-per-operation.rst:8
msgid "Issue a query"
msgstr ""

# 7cf980ff932742d9a05450d24c49d45a
# 51dd55213ba2407b8114ec04a179d482
# 3ce68876f33a479d860fe7714d61200e
#: ../source/includes/table/lock-behavior-per-operation.rst:10
#: ../source/includes/table/lock-behavior-per-operation.rst:14
#: ../source/includes/table/lock-behavior-per-operation.rst:66
msgid "Read lock"
msgstr ""

# 102a6726b13a43d3a5a986f5b8799424
#: ../source/includes/table/lock-behavior-per-operation.rst:12
msgid "Get more data from a :term:`cursor`"
msgstr ""

# 74c631ab004d434f9c08a4f1649327a8
#: ../source/includes/table/lock-behavior-per-operation.rst:16
msgid "Insert data"
msgstr ""

# ab8ec132054540899099f8bef91d2787
# 351219e3903a4d94ad7119a3e32c1121
# 4c80734d858a42a988fca8fdf7448dad
#: ../source/includes/table/lock-behavior-per-operation.rst:18
#: ../source/includes/table/lock-behavior-per-operation.rst:22
#: ../source/includes/table/lock-behavior-per-operation.rst:26
msgid "Write lock"
msgstr ""

# 41f78fc6cd7249859f5fb321c6db4e35
#: ../source/includes/table/lock-behavior-per-operation.rst:20
msgid "Remove data"
msgstr ""

# 1850551a95a04db0ac2e61e944125676
#: ../source/includes/table/lock-behavior-per-operation.rst:24
msgid "Update data"
msgstr ""

# be65a1a964af4af49a2f47f17eaf7281
#: ../source/includes/table/lock-behavior-per-operation.rst:28
msgid ":term:`Map-reduce <map-reduce>`"
msgstr ""

# 9834cd14db514210a7db7290e32d5ae9
#: ../source/includes/table/lock-behavior-per-operation.rst:30
msgid ""
"Read lock and write lock, unless operations are specified as non-atomic. "
"Portions of map-reduce jobs can run concurrently."
msgstr ""

# c7757042159c4e8ea2d80b7646b75239
#: ../source/includes/table/lock-behavior-per-operation.rst:34
msgid "Create an index"
msgstr ""

# f5400c1fa53c4dffbd5ea8e28df15c70
#: ../source/includes/table/lock-behavior-per-operation.rst:36
msgid ""
"Building an index in the foreground, which is the default, locks the "
"database for extended periods of time."
msgstr ""

# b8d40fd0ba094581881183c8af882b14
#: ../source/includes/table/lock-behavior-per-operation.rst:40
msgid ":method:`db.eval()`"
msgstr ""

# a926a6cdc07348fdb6a0cd772399d20c
#: ../source/includes/table/lock-behavior-per-operation.rst:45
msgid ""
"Write lock. The :method:`db.eval()` method takes a global write lock "
"while evaluating the JavaScript function. To avoid taking this global "
"write lock, you can use the :dbcommand:`eval` command with ``nolock: "
"true``."
msgstr ""

# 49b941faaee34ac19e15f6f556aa108a
#: ../source/includes/table/lock-behavior-per-operation.rst:51
msgid ":dbcommand:`eval`"
msgstr ""

# bff8df6b8d9d4ffe8c783b548df9c58e
#: ../source/includes/table/lock-behavior-per-operation.rst:56
msgid ""
"Write lock. By default, :dbcommand:`eval` command takes a global write "
"lock while evaluating the JavaScript function. If used with ``nolock: "
"true``, the :dbcommand:`eval` command does *not* take a global write lock"
" while evaluating the JavaScript function. However, the logic within the "
"JavaScript function may take write locks for write operations."
msgstr ""

# 28c28c0f3bda4809882967435759f722
#: ../source/includes/table/lock-behavior-per-operation.rst:64
msgid ":method:`~db.collection.aggregate()`"
msgstr ""

# cfa003022e8645c6936289e6abed7969
#: ../source/faq/concurrency.txt:165
msgid "Which administrative commands lock the database?"
msgstr ""

# 60a081b06a804914b38825e1cf6b0bb8
#: ../source/faq/concurrency.txt:167
msgid ""
"Certain administrative commands can exclusively lock the database for "
"extended periods of time. In some deployments, for large databases, you "
"may consider taking the :program:`mongod` instance offline so that "
"clients are not affected. For example, if a :program:`mongod` is part of "
"a :term:`replica set`, take the :program:`mongod` offline and let other "
"members of the set service load while maintenance is in progress."
msgstr ""

# d3369f5905c24a78aa73c89b31bdb123
#: ../source/faq/concurrency.txt:174
msgid ""
"The following administrative operations require an exclusive (i.e. write)"
" lock on the database for extended periods:"
msgstr ""

# 822a64f1997e4a1282cdd2f077208d27
#: ../source/faq/concurrency.txt:177
msgid ""
":method:`db.collection.createIndex()`, when issued *without* setting "
"``background`` to ``true``,"
msgstr ""

# 7a0d0d37d06348ca8c0d460cd568f610
#: ../source/faq/concurrency.txt:179
msgid ":dbcommand:`reIndex`,"
msgstr ""

# 650849995dd7479c9d7e548abb1a4035
#: ../source/faq/concurrency.txt:180
msgid ":dbcommand:`compact`,"
msgstr ""

# fc7531f4ee05489fb744a67a63b079a6
#: ../source/faq/concurrency.txt:181
msgid ":method:`db.repairDatabase()`,"
msgstr ""

# c386d95cfc8f4174bc0e8f4aeff3029a
#: ../source/faq/concurrency.txt:182
msgid ""
":method:`db.createCollection()`, when creating a very large (i.e. many "
"gigabytes) capped collection,"
msgstr ""

# d7be8eb1f2864760ac53f04aba3f5da9
#: ../source/faq/concurrency.txt:184
msgid ":method:`db.collection.validate()`, and"
msgstr ""

# 771226e39106408e8cd7b6ff4d4dc6b7
#: ../source/faq/concurrency.txt:185
msgid ""
":method:`db.copyDatabase()`. This operation may lock all databases. See "
":ref:`faq-concurrency-lock-multiple-dbs`."
msgstr ""

# 0dcac480c53647a6aaacea2b012bf36e
#: ../source/faq/concurrency.txt:188
msgid ""
"The following administrative commands lock the database but only hold the"
" lock for a very short time:"
msgstr ""

# f467918e8f4b4c2da103486d6a664d7c
#: ../source/faq/concurrency.txt:191
msgid ":method:`db.collection.dropIndex()`,"
msgstr ""

# 482330436d8f48c4915b5374bac33668
#: ../source/faq/concurrency.txt:192
msgid ":method:`db.getLastError()`,"
msgstr ""

# 22ad6647296d4c8b966ecbb5ad25720a
#: ../source/faq/concurrency.txt:193
msgid ":method:`db.isMaster()`,"
msgstr ""

# a4986973166d45018d451d8ea441e92d
#: ../source/faq/concurrency.txt:194
msgid ":method:`rs.status()` (i.e. :dbcommand:`replSetGetStatus`),"
msgstr ""

# 637f0d9c3e0f45df9349a6662f9575e4
#: ../source/faq/concurrency.txt:196
msgid ":method:`db.auth()`, and"
msgstr ""

# f90c72e1f86e469da9e43fc5cf3e4f39
#: ../source/faq/concurrency.txt:197
msgid ":method:`db.addUser()`."
msgstr ""

# 5a0546952d2344b1b7a88c0a1cc31d66
#: ../source/faq/concurrency.txt:202
msgid "Does a MongoDB operation ever lock more than one database?"
msgstr ""

# 57b09746e12544a19ef32bcb176056a5
#: ../source/faq/concurrency.txt:204
msgid "The following MongoDB operations lock multiple databases:"
msgstr ""

# 8541c9dba9344d6b9aebb2b027fd8b0e
#: ../source/faq/concurrency.txt:206
msgid ""
":method:`db.copyDatabase()` must lock the entire :program:`mongod` "
"instance at once."
msgstr ""

# 8bce61176d464250844e435a51df8972
#: ../source/faq/concurrency.txt:209
msgid ""
":method:`db.repairDatabase()` obtains a global write lock and will block "
"other operations until it finishes."
msgstr ""

# 9d222250b3d945c381f6631e4b60aeaa
#: ../source/faq/concurrency.txt:212
msgid ""
":term:`Journaling <journal>`, which is an internal operation, locks all "
"databases for short intervals. All databases share a single journal."
msgstr ""

# 26c2322d8b734416bc8dce19588bd8e0
#: ../source/faq/concurrency.txt:216
msgid ""
":doc:`User authentication </core/authentication>` requires a read lock on"
" the ``admin`` database for deployments using :ref:`2.6 user credentials "
"<admin-system-users-collection>`. For deployments using the 2.4 schema "
"for user credentials, authentication locks the ``admin`` database as well"
" as the database the user is accessing."
msgstr ""

# d3715bd84324495c945946cc8d60b219
#: ../source/faq/concurrency.txt:222
msgid ""
"All writes to a replica set's :term:`primary` lock both the database "
"receiving the writes and then the ``local`` database for a short time. "
"The lock for the ``local`` database allows the :program:`mongod` to write"
" to the primary's :term:`oplog` and accounts for a small portion of the "
"total time of the operation."
msgstr ""

# 6de41652b6b949faa590cc120e9e7603
#: ../source/faq/concurrency.txt:229
msgid "How does sharding affect concurrency?"
msgstr ""

# 8619308e9d034cc38debb4674739316b
#: ../source/faq/concurrency.txt:231
msgid ""
":term:`Sharding <sharding>` improves concurrency by distributing "
"collections over multiple :program:`mongod` instances, allowing shard "
"servers (i.e. :program:`mongos` processes) to perform any number of "
"operations concurrently to the various downstream :program:`mongod` "
"instances."
msgstr ""

# 2b6bcaee0a6a4e798cddbd6f8803eb5a
#: ../source/includes/extracts/lock-sharding.rst:1
msgid ""
"In a sharded cluster, locks apply to each individual shard, not to the "
"whole cluster; i.e. each :program:`mongod` instance is independent of the"
" others in the shard cluster and uses its own :ref:`locks <faq-"
"concurrency-locking>`. The operations on one :program:`mongod` instance "
"do not block the operations on any others."
msgstr ""

# 5374b80aff784b7881671d9a2308f075
#: ../source/faq/concurrency.txt:242
msgid "How does concurrency affect a replica set primary?"
msgstr ""

# 71ae1022c088437592a9e9c5fe9419df
#: ../source/faq/concurrency.txt:244
msgid ""
"With replica sets, when MongoDB writes to a collection on the "
":term:`primary`, MongoDB also writes to the primary's :term:`oplog`, "
"which is a special collection in the ``local`` database. Therefore, "
"MongoDB must lock both the collection's database and the ``local`` "
"database. The :program:`mongod` must lock both databases at the same time"
" to keep the database consistent and ensure that write operations, even "
"with replication, are \"all-or-nothing\" operations."
msgstr ""

# 50bcad094aa147c88b3a3e14c2bc022d
#: ../source/includes/extracts/lock-replica-set-primary.rst:1
msgid ""
"When writing to a :term:`replica set`, the lock's scope applies to the "
":term:`primary`."
msgstr ""

# 7da7f7307fde4cc296819c183eb01fc6
#: ../source/faq/concurrency.txt:255
msgid "How does concurrency affect secondaries?"
msgstr ""

# 8d5862659ce2427cb20b6be6ef092952
#: ../source/faq/concurrency.txt:257
msgid ""
"In :term:`replication`, MongoDB does not apply writes serially to "
":term:`secondaries <secondary>`. Secondaries collect oplog entries in "
"batches and then apply those batches in parallel. Secondaries do not "
"allow reads while applying the write operations, and apply write "
"operations in the order that they appear in the oplog."
msgstr ""

# 0c301f2da64f4efea1ca511a15dc4c8d
#: ../source/faq/concurrency.txt:264
msgid "Does MongoDB support transactions?"
msgstr ""

# 0a86b8cd428a45be927a0b85020a1892
#: ../source/faq/concurrency.txt:266
msgid "MongoDB does not support multi-document transactions."
msgstr ""

# acb12ca991e048b9bd0c69d3ade20de8
#: ../source/faq/concurrency.txt:268
msgid ""
"However, MongoDB does provide atomic operations on a single document. "
"Often these document-level atomic operations are sufficient to solve "
"problems that would require ACID transactions in a relational database."
msgstr ""

# 382c6fab7b54425c9afbc038a650e345
#: ../source/faq/concurrency.txt:273
msgid ""
"For example, in MongoDB, you can embed related data in nested arrays or "
"nested documents within a single document and update the entire document "
"in a single atomic operation. Relational databases might represent the "
"same kind of data with multiple tables and rows, which would require "
"transaction support to update the data atomically."
msgstr ""

# c3825e7750694907aae2f3a665b9c295
# 6344651e11184a7b817b3c28e73b831d
#: ../source/faq/concurrency.txt:279 ../source/faq/concurrency.txt:308
msgid ":doc:`/core/write-operations-atomicity`"
msgstr ""

# dee780e044584f978b3dc6feea3601ed
#: ../source/faq/concurrency.txt:282
msgid "What isolation guarantees does MongoDB provide?"
msgstr ""

# 095d6874fc524ab799a64ee551d94680
#: ../source/faq/concurrency.txt:284
msgid ""
"MongoDB provides the following guarantees in the presence of concurrent "
"read and write operations. These guarantees hold on systems configured "
"with either the MMAPv1 or WiredTiger storage engines."
msgstr ""

# 34146b3e3bbc46779ac1301b90f8c146
#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:1
msgid ""
"Write operations are atomic with respect to a single document; i.e. if a "
"write is updating multiple fields in the document, a reader will never "
"see the document with only some of the fields updated."
msgstr ""

# 28d37eed9b274b768632adb7cd2d0d8b
#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:5
msgid ""
"With a standalone :program:`mongod` instance, a set of read and write "
"operations to a single document is serializable. With a replica set, a "
"set of read and write operations to a single document is serializable "
"*only* in the absence of a rollback."
msgstr ""

# 258071f2bca04cd898c71b8c92f48255
#: ../source/faq/concurrency.txt:290
msgid ""
"Correctness with respect to query predicates, e.g. "
":method:`db.collection.find()` will only return documents that match and "
":method:`db.collection.update()` will only write to matching documents."
msgstr ""

# 4e38b32d0b1243da9a07521111e3021c
#: ../source/faq/concurrency.txt:294
msgid ""
"Correctness with respect to sort. For read operations that request a sort"
" order (e.g. :method:`db.collection.find()` or "
":method:`db.collection.aggregate()`), the sort order will not be violated"
" due to concurrent writes."
msgstr ""

# afe991d38dd447c893c334a8d4d616d2
#: ../source/faq/concurrency.txt:299
msgid ""
"Although MongoDB provides these strong guarantees for single-document "
"operations, read and write operations may access an arbitrary number of "
"documents during execution.  Multi-document operations do *not* occur "
"transactionally and are not isolated from concurrent writes. This means "
"that the following behaviors are expected under the normal operation of "
"the system, for both the MMAPv1 and WiredTiger storage engines:"
msgstr ""

# fc3859676ed44412bde030f9d4d1bc0a
#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:2
msgid ""
"Non-point-in-time read operations. Suppose a read operation begins at "
"time *t*\\ :sub:`1` and starts reading documents. A write operation then "
"commits an update to one of the documents at some later time *t*\\ "
":sub:`2`. The reader may see the updated version of the document, and "
"therefore does not see a point-in-time snapshot of the data."
msgstr ""

# 928cf9115f7748c9929b95d43c75c3af
#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:9
msgid ""
"Non-serializable operations. Suppose a read operation reads a document "
"*d*\\ :sub:`1` at time *t*\\ :sub:`1` and a write operation updates *d*\\"
" :sub:`1` at some later time *t*\\ :sub:`3`. This introduces a read-write"
" dependency such that, if the operations were to be serialized, the read "
"operation must precede the write operation. But also suppose that the "
"write operation updates document *d*\\ :sub:`2` at time *t*\\ :sub:`2` "
"and the read operation subsequently reads *d*\\ :sub:`2` at some later "
"time *t*\\ :sub:`4`. This introduces a write-read dependency which would "
"instead require the read operation to come *after* the write operation in"
" a serializable schedule. There is a dependency cycle which makes "
"serializability impossible."
msgstr ""

# 80c3005ed2c84d4da7a5ffd6bfb98bfd
#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:22
msgid ""
"Reads may miss matching documents that are updated during the course of "
"the read operation."
msgstr ""

# d3a1446639f34a17afd103b2c666b89e
#: ../source/faq/concurrency.txt:311
msgid "Can reads see changes that have not been committed to disk?"
msgstr ""

# 7e4b66872678416190d5fdcaa1c9d9ed
#: ../source/faq/concurrency.txt:315
msgid ""
"MongoDB 3.2 introduces :ref:`3.2-rel-notes-readConcern` option. Clients "
"using :readconcern:`majority` ``readConcern`` cannot see the results of "
"writes before they are made :term:`durable`."
msgstr ""

# 92fadc2545f041809db4f3701f94f801
#: ../source/faq/concurrency.txt:319
msgid ""
"Readers, using :readconcern:`\"local\"` ``readConcern`` can see the "
"results of writes before they are made :term:`durable`, regardless of "
"write concern level or journaling configuration. As a result, "
"applications may observe the following behaviors:"
msgstr ""

# 4cb5ef218a0b40f497ca0611f316e77e
#: ../source/faq/concurrency.txt:324
msgid ""
"MongoDB will allow a concurrent reader to see the result of the write "
"operation before the write is acknowledged to the client application. For"
" details on when writes are acknowledged for different write concern "
"levels, see :doc:`/reference/write-concern`."
msgstr ""

# fff5333616ac42a48391a6c9d51e0ee3
#: ../source/faq/concurrency.txt:329
msgid ""
"Reads can see data which may subsequently be rolled back in cases such as"
" replica set failover or power loss. It does *not* mean that read "
"operations can see documents in a partially written or otherwise "
"inconsistent state."
msgstr ""

# acf8964905b044fc9393201db62c554b
#: ../source/faq/concurrency.txt:333
msgid "Other systems refer to these semantics as *read uncommitted*."
msgstr ""

#~ msgid ""
#~ "Locks are \"writer greedy,\" which means"
#~ " writes have preference over reads. "
#~ "When both a read and write are "
#~ "waiting for a lock, MongoDB grants "
#~ "the lock to the write."
#~ msgstr ""

#~ msgid ""
#~ "For example, if you have six "
#~ "databases and one takes a write "
#~ "lock, the other five are still "
#~ "available for read and write."
#~ msgstr ""

#~ msgid ""
#~ "Long running read and write operations,"
#~ " such as queries, updates, and "
#~ "deletes, yield under many conditions. In"
#~ " MongoDB 2.0, operations yielded based "
#~ "on time slices and the number of"
#~ " operations waiting for the actively "
#~ "held lock. After 2.2, more adaptive "
#~ "algorithms allow operations to yield "
#~ "based on predicted disk access (i.e. "
#~ "page faults)."
#~ msgstr ""

#~ msgid ""
#~ "Read and write operations will yield "
#~ "their locks if the :program:`mongod` "
#~ "receives a :term:`page fault` *or* "
#~ "fetches data that is unlikely to "
#~ "be in memory. Yielding allows other "
#~ "operations that only need to access "
#~ "documents that are already in memory "
#~ "to complete while :program:`mongod` loads "
#~ "documents into memory."
#~ msgstr ""

#~ msgid ""
#~ "Additionally, write operations that affect "
#~ "multiple documents (i.e. "
#~ ":method:`~db.collection.update()` with the ``multi``"
#~ " parameter) will yield periodically to "
#~ "allow read operations during these long"
#~ " write operations. Similarly, long running"
#~ " read locks will yield periodically "
#~ "to ensure that write operations have "
#~ "the opportunity to complete."
#~ msgstr ""

#~ msgid ""
#~ "The use of yielding expanded greatly "
#~ "in MongoDB 2.2. Including the \"yield"
#~ " for page fault.\" MongoDB tracks the"
#~ " contents of memory and predicts "
#~ "whether data is available before "
#~ "performing a read. If MongoDB predicts"
#~ " that the data is not in memory"
#~ " a read operation yields its lock "
#~ "while MongoDB loads the data to "
#~ "memory. Once data is available in "
#~ "memory, the read will reacquire the "
#~ "lock to complete the operation."
#~ msgstr ""

#~ msgid "Write lock. :method:`db.eval()` blocks all other JavaScript processes."
#~ msgstr ""

#~ msgid ""
#~ "Write lock. If used with the "
#~ "``nolock`` lock option, the :dbcommand:`eval`"
#~ " option does not take a write "
#~ "lock and cannot write data to the"
#~ " database."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`User authentication </core/authentication>` "
#~ "locks the ``admin`` database as well "
#~ "as the database the user is "
#~ "accessing."
#~ msgstr ""

# 5dc307cb74d345738b7bad70eac19a1e
#~ msgid ""
#~ "MongoDB allows multiple clients to read"
#~ " and write a single corpus of "
#~ "data using a locking system to "
#~ "ensure that all clients receive the "
#~ "same view of the data *and* to "
#~ "prevent multiple applications from modifying"
#~ " the exact same pieces of data "
#~ "at the same time. Locks help "
#~ "guarantee that all writes to a "
#~ "single document occur either in full "
#~ "or not at all."
#~ msgstr ""

# fadb4a9255c64a3c9d4e84d7ae1d22b6
#~ msgid ""
#~ "`Presentation on Concurrency and Internals "
#~ "in 2.2 <http://www.mongodb.com/presentations"
#~ "/concurrency-internals-mongodb-2-2>`_"
#~ msgstr ""

# 191eba24b5ae4e12a2c721dd0561d398
#~ msgid ""
#~ "MongoDB uses a readers-writer "
#~ "[#multi-reader-lock-names]_ lock that "
#~ "allows concurrent reads access to a "
#~ "database but gives exclusive access to"
#~ " a single write operation."
#~ msgstr ""

# 2b5ab3f2e8064669a647efa4b3b3ca58
#~ msgid ""
#~ "When a read lock exists, many read"
#~ " operations may use this lock. "
#~ "However, when a write lock exists, "
#~ "a single write operation holds the "
#~ "lock exclusively, and no other read "
#~ "*or* write operations may share the "
#~ "lock."
#~ msgstr ""

# a8dfa8afea064be7a4fd93658383da81
#~ msgid ""
#~ "You may be familiar with a "
#~ "\"readers-writer\" lock as \"multi-reader\""
#~ " or \"shared exclusive\" lock. See "
#~ "the Wikipedia page on `Readers-Writer"
#~ " Locks "
#~ "<http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock>`_ for"
#~ " more information."
#~ msgstr ""

# 09715a3202a641209d54852d2d35b3cc
#~ msgid ""
#~ "Beginning with version 2.2, MongoDB "
#~ "implements locks on a per-database "
#~ "basis for most read and write "
#~ "operations. Some global operations, typically"
#~ " short lived operations involving multiple"
#~ " databases, still require a global "
#~ "\"instance\" wide lock. Before 2.2, "
#~ "there is only one \"global\" lock "
#~ "per :program:`mongod` instance."
#~ msgstr ""

# 5b913c9f56d04371b6e49a85809fde7a
#~ msgid "the `MongoDB Management Service (MMS) <http://mms.mongodb.com/>`_"
#~ msgstr ""

# d88f4adb1b8f4e5fa8f1515a3b567f07
#~ msgid ""
#~ "Specifically, the :data:`~serverStatus.locks` "
#~ "document in the :doc:`output of "
#~ "serverStatus </reference/command/serverStatus>`, or "
#~ "the :data:`~currentOp.locks` field in the "
#~ ":doc:`current operation reporting "
#~ "</reference/method/db.currentOp>` provides insight "
#~ "into the type of locks and amount"
#~ " of lock contention in your "
#~ ":program:`mongod` instance."
#~ msgstr ""

# 5624217a913744b79d4a850f2ea03125
#~ msgid ""
#~ ":method:`db.collection.ensureIndex()`, when issued "
#~ "*without* setting ``background`` to ``true``,"
#~ msgstr ""

# 8dedab74528c484685bb6ff33b18ca90
#~ msgid ""
#~ "Each :program:`mongod` instance is independent"
#~ " of the others in the shard "
#~ "cluster and uses the MongoDB :ref"
#~ ":`readers-writer lock <faq-concurrency-"
#~ "locking>`. The operations on one "
#~ ":program:`mongod` instance do not block "
#~ "the operations on any others."
#~ msgstr ""

# 5f5ac81c312049ba9cb99fec3df4e1aa
#~ msgid ""
#~ "In :term:`replication`, when MongoDB writes"
#~ " to a collection on the "
#~ ":term:`primary`, MongoDB also writes to "
#~ "the primary's :term:`oplog`, which is a"
#~ " special collection in the ``local`` "
#~ "database.  Therefore, MongoDB must lock "
#~ "both the collection's database and the"
#~ " ``local`` database. The :program:`mongod` "
#~ "must lock both databases at the "
#~ "same time to keep the database "
#~ "consistent and ensure that write "
#~ "operations, even with replication, are "
#~ "\"all-or-nothing\" operations."
#~ msgstr ""

# ef4ad20b3b194bc291b58a490d1e918a
#~ msgid ""
#~ "MongoDB can apply several writes in "
#~ "parallel on replica set secondaries, in"
#~ " two phases:"
#~ msgstr ""

# 6044731c0374483e99613401eb9c1808
#~ msgid ""
#~ "During the first *prefer* phase, under"
#~ " a read lock, the :program:`mongod` "
#~ "ensures that all documents affected by"
#~ " the operations are in memory. During"
#~ " this phase, other clients may "
#~ "execute queries against this member."
#~ msgstr ""

# 67b42e92694e48c0a72b4940245c8543
#~ msgid ""
#~ "A thread pool using write locks "
#~ "applies all write operations in the "
#~ "batch as part of a coordinated "
#~ "write phase."
#~ msgstr ""

# fc9526a273e3458f860fa2cdd72e667d
#~ msgid ""
#~ "What kind of concurrency does MongoDB"
#~ " provide for JavaScript operations?"
#~ msgstr ""

# 840225708cae403db090918432077a81
#~ msgid ""
#~ "The V8 JavaScript engine added in "
#~ "2.4 allows multiple JavaScript operations "
#~ "to run at the same time. Prior "
#~ "to 2.4, a single :program:`mongod` could"
#~ " only run a *single* JavaScript "
#~ "operation at once."
#~ msgstr ""

#~ msgid ""
#~ "Locks are \"writer greedy,\" which means"
#~ " write locks have preference over "
#~ "reads. When both a read and write"
#~ " are waiting for a lock, MongoDB "
#~ "grants the lock to the write."
#~ msgstr ""

#~ msgid ""
#~ "For example, if you have six "
#~ "databases and one takes a database-"
#~ "level write lock, the other five "
#~ "are still available for read and "
#~ "write. A global lock makes all six"
#~ " databases unavailable during the "
#~ "operation."
#~ msgstr ""

#~ msgid ""
#~ "Long running read and write operations,"
#~ " such as queries, updates, and "
#~ "deletes, yield under many conditions. "
#~ "MongoDB uses an adaptive algorithms to"
#~ " allow operations to yield locks "
#~ "based on predicted disk access patterns"
#~ " (i.e. page faults.)"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB operations can also yield locks"
#~ " between individual document modification "
#~ "in write operations that affect multiple"
#~ " documents like :method:`~db.collection.update()` "
#~ "with the ``multi`` parameter."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB uses heuristics based on its "
#~ "access pattern to predict whether data"
#~ " is likely in physical memory before"
#~ " performing a read. If MongoDB "
#~ "*predicts* that the data is not in"
#~ " physical memory an operation will "
#~ "yield its lock while MongoDB loads "
#~ "the data to memory. Once data is"
#~ " available in memory, the operation "
#~ "will reacquire the lock to complete "
#~ "the operation."
#~ msgstr ""

