.. meta::
   :robots: noindex, nosnippet

.. _kotlin-migrate-from-java-sdk-to-kotlin-sdk:

===========================================
Migrate from the Java SDK to the Kotlin SDK
===========================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. note:: What is the Kotlin SDK?

   The Kotlin SDK is a new Realm client SDK built entirely with the
   Kotlin programming language. The Kotlin SDK uses an entirely
   different codebase from the Java SDK. It is designed specifically
   to take advantage of Kotlin language features such as coroutines and
   suspend functions. The Java SDK also supports some of these features,
   as well as Android applications written in Kotlin. But the
   :ref:`Kotlin SDK <kotlin-intro>` is more Kotlin-idiomatic than the
   Java SDK.

Overview
--------

The Java SDK and the Kotlin SDK differ in many ways. On this page, you'll
find a high-level comparison of most of the ways the SDKs differ.

Kotlin SDK Architecture
-----------------------

The Java SDK provided live objects, queries, and realms that
automatically update when underlying data changes. The Kotlin SDK still
provides this live interface in write transactions, but otherwise relies
on a new frozen architecture that makes Realm objects easier to work
with. Here are some of the main differences between the Java SDK
architecture and the Kotlin SDK architecture:

- **Frozen by default**: All objects are now frozen. Unlike live objects,
  frozen objects do not automatically update after database writes. You
  can still access live objects within a write transaction, but passing
  a live object out of a write transaction freezes the object.

- **Thread-safety**: All realm instances, objects, query results, and
  collections can now be transferred across threads.

- **Singleton**: You now only need one instance of each realm.
  :ref:`No need to open and close realms on individual threads.
  <kotlin-migration-threading>`

.. seealso::

   :ref:`Frozen Architecture in the Kotlin SDK <kotlin-frozen-architecture>`

Opening Realms
--------------

The Java SDK automatically detects Realm Object Models defined in your
application, and uses all of them in the schema of opened realms unless
you specify otherwise. The Kotlin SDK requires you to manually specify
the Realm Object Models to use in your realm schema. Additionally:

- The Kotlin SDK does not provide the ability to set and access a
  default realm in your application. Since you can now share realms,
  objects, and results across threads, you can rely on a global singleton
  instead.

- The Java SDK used :file:`RealmConfiguration.Builder().build()` to
  generate instances of :file:`RealmConfiguration`. With the Kotlin SDK,
  use the `RealmConfiguration.create()
  <{+kotlin-local-prefix+}io.realm.kotlin/-realm-configuration/-companion/create.html>`__
  companion method :file:`RealmConfiguration` instead.

- The Java SDK used the static :file:`Realm.getInstance()` method to
  open a realm with a given config. With the Kotlin SDK, use the static
  :file:`Realm.open()` method instead.

.. list-table::
   :header-rows: 0
   :widths: 50 50
   
   * - .. tabs::
   
          .. tab:: Java SDK (Kotlin)
             :tabid: java-sdk-kotlin

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.open-a-realm.kt
                :language: kotlin
                :copyable: false

          .. tab:: Java SDK (Java)
             :tabid: java-sdk-java

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.open-a-realm.java
                :language: java
                :copyable: false
     - .. tabs::
   
          .. tab:: Kotlin SDK
             :tabid: kotlin-sdk

             .. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.open-a-realm.kt
                :language: kotlin
                :copyable: false

Optionally, use `RealmConfiguration.Builder
<{+kotlin-local-prefix+}io.realm.kotlin/-realm-configuration/-builder/index.html>`__
to customize your configuration even more:

.. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.open-a-realm-advanced.kt
   :language: kotlin
   :copyable: false
   :caption: Kotlin SDK

.. seealso::

   :ref:`Open & Close a Realm <kotlin-open-and-close-a-realm>`

Realm Object Models
-------------------

In the Java SDK, you declare Realm object models in one of two ways:

- extend :file:`RealmObject`

- implement :file:`RealmModel`

The Kotlin SDK uses default methods in the :file:`RealmObject` interface
instead. With the Kotlin SDK, inherit from :file:`RealmObject` to
declare a Realm object model. Annotations work the same way they did
in java for fields with special properties, such as ignored fields,
primary keys, and indexes.

.. list-table::
   :header-rows: 0
   :widths: 50 50
   
   * - .. tabs::
   
          .. tab:: Java SDK (Kotlin)
             :tabid: java-sdk-kotlin

             .. literalinclude:: /examples/generated/java/local/Sample.snippet.realm-object-model.kt
                :language: kotlin
                :copyable: false

          .. tab:: Java SDK (Java)
             :tabid: java-sdk-java

             .. literalinclude:: /examples/generated/java/local/SampleJava.snippet.realm-object-model.java
                :language: java
                :copyable: false
     - .. tabs::
   
          .. tab:: Kotlin SDK
             :tabid: kotlin-sdk

             .. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.realm-object-model.kt
                :language: kotlin
                :copyable: false

.. seealso::

   :ref:`Supported Schemas Types <kotlin-supported-types>`

Relationships
-------------

Both the Java and Kotlin SDKs declare relationships through Realm object
fields:

One-to-One
~~~~~~~~~~

.. list-table::
   :header-rows: 0
   :widths: 50 50
   
   * - .. tabs::
   
          .. tab:: Java SDK (Kotlin)
             :tabid: java-sdk-kotlin

             .. literalinclude:: /examples/generated/java/local/Child.snippet.one-to-one-relationship.kt
                :language: kotlin
                :copyable: false

          .. tab:: Java SDK (Java)
             :tabid: java-sdk-java

             .. literalinclude:: /examples/generated/java/local/ChildJava.snippet.one-to-one-relationship.java
                :language: java
                :copyable: false
     - .. tabs::
   
          .. tab:: Kotlin SDK
             :tabid: kotlin-sdk

             .. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.one-to-one-relationship.kt
                :language: kotlin
                :copyable: false

One-to-Many
~~~~~~~~~~~

With the Java SDK, you could define one-to-many relationships with fields
of type :file:`RealmList`. The Kotlin SDK still uses fields of
type :file:`RealmList`, but you should instantiate :file:`RealmList`
instances with the `realmListOf()
<{+kotlin-local-prefix+}io.realm.kotlin.ext/realm-list-of.html>`__ companion method.

.. list-table::
   :header-rows: 0
   :widths: 50 50
   
   * - .. tabs::
   
          .. tab:: Java SDK (Kotlin)
             :tabid: java-sdk-kotlin

             .. literalinclude:: /examples/generated/java/local/Kid.snippet.one-to-many-relationship.kt
                :language: kotlin
                :copyable: false

          .. tab:: Java SDK (Java)
             :tabid: java-sdk-java

             .. literalinclude:: /examples/generated/java/local/KidJava.snippet.one-to-many-relationship.java
                :language: java
                :copyable: false
     - .. tabs::
   
          .. tab:: Kotlin SDK
             :tabid: kotlin-sdk

             .. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.one-to-many-relationship.kt
                :language: kotlin
                :copyable: false

Schema Types
------------

With the Java SDK, you needed to use the :file:`@Required` annotation to
make lists of primitives non-nullable in realm object models. The Kotlin
SDK makes lists of primitives non-nullable by default. Use the
:file:`?` operator to make a list of primitives nullable.

.. list-table::
   :header-rows: 0
   :widths: 50 50
   
   * - .. tabs::
   
          .. tab:: Java SDK (Kotlin)
             :tabid: java-sdk-kotlin

             .. literalinclude:: /examples/generated/java/local/CollegeStudent.snippet.schema-types.kt
                :language: kotlin
                :copyable: false

          .. tab:: Java SDK (Java)
             :tabid: java-sdk-java

             .. literalinclude:: /examples/generated/java/local/CollegeStudentJava.snippet.schema-types.java
                :language: java
                :copyable: false
     - .. tabs::

          .. tab:: Kotlin SDK
             :tabid: kotlin-sdk

             .. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.schema-types.kt
                :language: kotlin
                :copyable: false

Writes
------

The Kotlin SDK introduces new names for the methods that write to realms.

Async
~~~~~

With the Java SDK, you could write asynchronously to a realm with
:file:`realm.executeTransactionAsync()`. The Kotlin SDK uses
the suspend function `realm.write()
<{+kotlin-local-prefix+}io.realm.kotlin/-realm/write.html>`__ instead.

.. list-table::
   :header-rows: 0
   :widths: 50 50
   
   * - .. tabs::
   
          .. tab:: Java SDK (Kotlin)
             :tabid: java-sdk-kotlin

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.write-async.kt
                :language: kotlin
                :copyable: false

          .. tab:: Java SDK (Java)
             :tabid: java-sdk-java

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.write-async.java
                :language: java
                :copyable: false
     - .. tabs::
   
          .. tab:: Kotlin SDK
             :tabid: kotlin-sdk

             .. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.write-async.kt
                :language: kotlin
                :copyable: false

Sync
~~~~

With the Java SDK, you could write synchronously to a realm with
:file:`realm.executeTransaction()`. The Kotlin SDK uses
`realm.writeBlocking()
<{+kotlin-local-prefix+}io.realm.kotlin/-realm/write-blocking.html>`__:

.. list-table::
   :header-rows: 0
   :widths: 50 50
   
   * - .. tabs::
   
          .. tab:: Java SDK (Kotlin)
             :tabid: java-sdk-kotlin

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.write-sync.kt
                :language: kotlin
                :copyable: false

          .. tab:: Java SDK (Java)
             :tabid: java-sdk-java

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.write-sync.java
                :language: java
                :copyable: false
     - .. tabs::
   
          .. tab:: Kotlin SDK
             :tabid: kotlin-sdk

             .. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.write-sync.kt
                :language: kotlin
                :copyable: false

.. seealso::

   - :ref:`Create a New Object <kotlin-create-a-new-object>`
   - :ref:`Modify an Object <kotlin-modify-an-object>`
   - :ref:`Delete an Object <kotlin-delete-an-object>`

Queries
-------

There are several differences between queries in the Java SDK and queries
in the Kotlin SDK:

- With the Java SDK, you can query objects in realms using a fluent
  interface or :ref:`Realm Query Language <rql>` (RQL).
  The Kotlin SDK only uses RQL.

- The Java SDK uses :file:`realm.where()`
  to query realms, whereas the Kotlin SDK uses `realm.query()
  <{+kotlin-local-prefix+}io.realm.kotlin.ext/query.html>`__.

- With the Java SDK, you could query asynchronously with
  :file:`realmQuery.findAllAsync()` and :file:`realmQuery.findFirstAsync()`.
  In the Kotlin SDK, query asynchronously with
  `realmQuery.asFlow()
  <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-element-query/as-flow.html>`__.
  Once you have a flow of results, you can `collect
  <https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html>`__
  the results.

- With the Java SDK, you could query synchronously with
  :file:`realmQuery.findAll()` and :file:`realmQuery.findFirst()`.
  In the Kotlin SDK, query synchronously with
  `realmQuery.find() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-element-query/find.html>`__.

Filters
~~~~~~~

.. list-table::
   :header-rows: 0
   :widths: 50 50
   
   * - .. tabs::
   
          .. tab:: Java SDK (Kotlin)
             :tabid: java-sdk-kotlin

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.query-filters.kt
                :language: kotlin
                :copyable: false

          .. tab:: Java SDK (Java)
             :tabid: java-sdk-java

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.query-filters.java
                :language: java
                :copyable: false
     - .. tabs::
   
          .. tab:: Kotlin SDK
             :tabid: kotlin-sdk

             .. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.query-filters.kt
                :language: kotlin
                :copyable: false

Sort, Distinct, Limit
~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 0
   :widths: 50 50
   
   * - .. tabs::
   
          .. tab:: Java SDK (Kotlin)
             :tabid: java-sdk-kotlin

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.query-sort-limit-distinct.kt
                :language: java
                :copyable: false

          .. tab:: Java SDK (Java)
             :tabid: java-sdk-java

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.query-sort-limit-distinct.java
                :language: java
                :copyable: false
     - .. tabs::
   
          .. tab:: Kotlin SDK
             :tabid: kotlin-sdk

             .. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.query-sort-limit-distinct.kt
                :language: kotlin
                :copyable: false

.. seealso::

   - :ref:`Filter Data - Kotlin SDK <kotlin-filter-data>`
   - :ref:`Sort Queries - Kotlin SDK <kotlin-sort-queries>`

Deletes
-------

In both SDKs, you can only delete live objects. The Kotlin SDK provides
`mutableRealm.findLatest()
<{+kotlin-local-prefix+}io.realm.kotlin/-mutable-realm/find-latest.html>`__
to access a live version of any frozen object. In a write transaction,
you can directly query for live objects and delete them without using
:file:`findLatest()`.

.. list-table::
   :header-rows: 0
   :widths: 50 50
   
   * - .. tabs::
   
          .. tab:: Java SDK (Kotlin)
             :tabid: java-sdk-kotlin

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.deletes.kt
                :language: kotlin
                :copyable: false

          .. tab:: Java SDK (Java)
             :tabid: java-sdk-java

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.deletes.java
                :language: java
                :copyable: false
     - .. tabs::
   
          .. tab:: Kotlin SDK
             :tabid: kotlin-sdk

             .. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.deletes.kt
                :language: kotlin
                :copyable: false

.. seealso::

   - :ref:`Delete all Objects of a Type <kotlin-delete-all-objects-of-a-type>`
   - :ref:`Delete Multiple Objects <kotlin-delete-multiple-objects>`
   - :ref:`Delete an Object <kotlin-delete-an-object>`

Notifications
-------------

In both SDKs, you can subscribe to change to collections of results.
With the Java SDK, you could receive notifications whenever realm results
changed with the following interfaces:

- :file:`realmResults.addChangeListener()`
- RxJava through :file:`asFlowable()`
- Kotlin Extensions with :file:`toFlow()`

The Kotlin SDK replaces all of these options with `realmQuery.asFlow()
<{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-element-query/as-flow.html>`__.
Once you have a flow of results, you can call `collect
<https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html>`__
to subscribe to changes. Any object of type :file:`UpdatedResults` emitted
by the flow represents a change to the results set.

.. list-table::
   :header-rows: 0
   :widths: 50 50
   
   * - .. tabs::
   
          .. tab:: Java SDK (Kotlin)
             :tabid: java-sdk-kotlin

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.notifications.kt
                :language: kotlin
                :copyable: false

          .. tab:: Java SDK (Java)
             :tabid: java-sdk-java

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.notifications.java
                :language: java
                :copyable: false
     - .. tabs::
   
          .. tab:: Kotlin SDK
             :tabid: kotlin-sdk

             .. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.notifications.kt
                :language: kotlin
                :copyable: false

.. _kotlin-migration-threading:

Threading
---------

With the Java SDK, realms, Realm objects, and results cannot be passed
between threads. The Kotlin SDK freezes these objects by default, making
them thread-safe. Unlike the live objects used by the Java SDK, the
frozen objects found in the Kotlin SDK do not automatically update when
underlying data changes. With the Kotlin SDK, you must use notifications to subscribe to
updates instead.

.. list-table::
   :header-rows: 0
   :widths: 50 50

   * - .. tabs::
   
          .. tab:: Java SDK (Kotlin)
             :tabid: java-sdk-kotlin

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.threading.kt
                :language: kotlin
                :copyable: false

          .. tab:: Java SDK (Java)
             :tabid: java-sdk-java

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.threading.java
                :language: java
                :copyable: false
     - .. tabs::
   
          .. tab:: Kotlin SDK
             :tabid: kotlin-sdk

             .. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.threading.kt
                :language: kotlin
                :copyable: false

.. seealso::

   :ref:`Frozen Architecture <kotlin-frozen-architecture>`

Migrations
----------

With the Java SDK, migrations were a manual process. The Kotlin SDK
automates migrations, but also gives you access to a similar dynamic
realm interface for custom tweaks to migration logic.

.. list-table::
   :header-rows: 0
   :widths: 50 50
   
   * - .. tabs::
   
          .. tab:: Java SDK (Kotlin)
             :tabid: java-sdk-kotlin

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.migrations.kt
                :language: kotlin
                :copyable: false

          .. tab:: Java SDK (Java)
             :tabid: java-sdk-java

             .. literalinclude:: /examples/generated/java/local/MigrateFromJavaToKotlinSDKTest.snippet.migrations.java
                :language: java
                :copyable: false
     - .. tabs::
   
          .. tab:: Kotlin SDK
             :tabid: kotlin-sdk

             .. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.migrations.kt
                :language: kotlin
                :copyable: false

What Next?
----------

Now that you understand the differences between the Java SDK and the
Kotlin SDK, check out the rest of the :ref:`Kotlin SDK documentation
<kotlin-intro>`.
