=================
cursor.tailable()
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: cursor.tailable()


   .. include:: /includes/fact-mongosh-shell-method.rst

   Marks the cursor as :ref:`tailable <tailable-cursors-landing-page>`
   keeping it open even when the client exhausts all results.
   
   For use against a :ref:`capped collection <manual-capped-collection>` only. Using 
   ``tailable()`` against a non-capped collection returns an error.
   
   :method:`cursor.tailable()` uses the following syntax:
   
   .. code-block:: javascript
   
      cursor.tailable( { awaitData : <boolean> } )
      
   ``~cursor.tailable()`` has the following parameter:

   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``awaitData``
   
        - boolean
   
        - Optional. For use with :data:`DBQuery.Option.tailable`. 
          Sets the cursor to block the query thread when no data is
          available and await data for a set time instead of immediately
          returning no data. The cursor returns no data only if the 
          timeout expires.

          By default, if ``maxTimeMS`` is set on the command that
          created the cursor, then the timeout for ``awaitData`` is the
          remaining time. Otherwise, the default timeout is 1000
          milliseconds.
          
          You can set a timeout when running :dbcommand:`getMore` on a
          cursor with ``awaitData`` enabled.
          
          Defaults to ``false``.
   
   :returns:
      The :term:`cursor` that ``~cursor.tailable()`` is attached to.

Compatibility
-------------

This method is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-all.rst

.. include:: /includes/fact-environments-onprem-only.rst

Behavior
--------

A tailable cursor performs a collection scan over a :ref:`capped collection <manual-capped-collection>`. 
It remains open even after reaching the end of the collection. 
Applications can continue to iterate the tailable cursor as 
new data is inserted into the collection.

If ``awaitData`` is ``true``, when the cursor reaches the end of 
the capped collection, :program:`mongod` blocks the query thread 
for the timeout interval and waits for new data to arrive. When new 
data is inserted into the capped collection, ``mongod`` signals the 
blocked thread to wake and return the next batch to the client.

See :ref:`tailable-cursors-landing-page`.