================
grantRolesToRole
================

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: grantRolesToRole

   Grants roles to a :ref:`user-defined role <user-defined-roles>`.

   The :dbcommand:`grantRolesToRole` command affects roles on the
   database where the command runs. :dbcommand:`grantRolesToRole` has
   the following syntax:

   .. code-block:: javascript

      { grantRolesToRole: "<role>",
        roles: [
                   { role: "<role>", db: "<database>" },
                   ...
               ],
        writeConcern: { <write concern> }
      }

   The :dbcommand:`grantRolesToRole` command has the following fields:

   .. include:: /reference/command/grantRolesToRole-field.rst

   .. |local-cmd-name| replace:: :dbcommand:`grantRolesToRole`
   .. include:: /includes/fact-roles-array-contents.rst

Behavior
--------

A role can inherit privileges from other roles in its database. A role
created on the ``admin`` database can inherit privileges from roles in
any database.

Required Access
---------------

.. include:: /includes/access-grant-roles.rst

Example
-------


The following :dbcommand:`grantRolesToRole` command updates the
``productsReaderWriter`` role in the ``products`` database to :ref:`inherit
<inheritance>` the :ref:`privileges <privileges>` of the ``productsReader``
role in the ``products`` database:

.. code-block:: javascript

   use products
   db.runCommand( 
      { grantRolesToRole: "productsReaderWriter",
        roles: [
                 "productsReader"
        ],
        writeConcern: { w: "majority" , wtimeout: 5000 }
      }
   )
