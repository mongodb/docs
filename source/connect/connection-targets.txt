.. _pymongo-connection-targets:

==========================
Choose a Connection Target
==========================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: connection string, URI, server, settings, client, load balancing, srv, dns

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use a connection string and ``MongoClient`` object
to connect to different types of MongoDB deployments.

Atlas
-----

To connect to a MongoDB deployment on Atlas, include the following elements
in your connection string:

- URL of your Atlas cluster
- MongoDB username
- MongoDB password

Then, pass your connection string to the ``MongoClient`` constructor.

.. tip::

   Follow the :atlas:`Atlas driver connection guide </driver-connection?tck=docs_driver_python>`
   to retrieve your connection string.

When you connect to Atlas, we recommend using the {+stable-api+} client option to avoid
breaking changes when Atlas upgrades to a new version of {+mdb-server+}.
To learn more about the {+stable-api+} feature, see the :ref:`{+stable-api+} page
<pymongo-stable-api>`.

The following code shows how to use {+driver-short+} to connect to an Atlas cluster. The
code also uses the ``server_api`` option to specify a {+stable-api+} version.

.. literalinclude:: /includes/connect/atlas_connection.py
   :language: python

Local Deployments
-----------------

To connect to a local MongoDB deployment, use ``localhost`` as the hostname. By
default, the ``mongod`` process runs on port 27017, though you can customize this for
your deployment.

The following code shows how to use {+driver-short+} to connect to a local MongoDB
deployment:

.. code-block:: python

   from pymongo import MongoClient
   
   uri = "mongodb://localhost:27017/"
   client = MongoClient(uri)

Replica Sets
------------

To connect to a replica set, specify the hostnames (or IP addresses) and 
port numbers of the replica-set members in your connection string.

The following code shows how to use {+driver-short+} to connect to a replica set
that contains three hosts:

.. code-block:: python

   from pymongo import MongoClient
   
   client = MongoClient("mongodb://host1:27017,host2:27017,host3:27017")

If you aren't able to provide a full list of hosts in the replica set, you can 
specify one or more of the hosts in the replica set and instruct {+driver-short+} to 
perform automatic discovery to find the others. To instruct the driver to perform
automatic discovery, perform one of the following actions:

- Specify the name of the replica set as the value of the ``replicaSet`` parameter.
- Specify ``false`` as the value of the ``directConnection`` parameter.
- Specify more than one host in the replica set.

In the following example, the driver uses a sample connection URI to connect to the 
MongoDB replica set ``sampleRS``, which is running on port ``27017`` of three different
hosts, including ``host1``:

.. code-block:: python

   from pymongo import MongoClient

   uri = "mongodb://host1:27017/?replicaSet=sampleRS"
   client = MongoClient(uri)

{+driver-short+} evenly load balances operations across deployments that are reachable
within the client's ``localThresholdMS`` value. To learn more about how {+driver-short+} load
balances operations across multiple MongoDB deployments, see the
:ref:`pymongo-server-selection` guide.

.. note::

   The ``MongoClient`` constructor is *non-blocking*.
   When you connect to a replica set, the constructor returns immediately while the
   client uses background threads to connect to the replica set.
   
   If you construct a ``MongoClient`` and immediately print the string representation
   of its ``nodes`` attribute, the list might be empty while the client connects to
   the replica-set members.

Initialization
~~~~~~~~~~~~~~

To initialize a replica set, you must connect directly to a single member. To do so,
set the ``directConnection`` connection
option to ``True``. You can do this in two ways: by passing an argument to the
``MongoClient`` constructor or through a parameter in your connection string.

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python
         :emphasize-lines: 4

         from pymongo import MongoClient

         client = MongoClient("mongodb://<hostname>:<port>",
                              directConnection=True)

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python
         :emphasize-lines: 4

         from pymongo import MongoClient

         uri = ("mongodb://<hostname>:<port>/?"
                "directConnection=true")
         client = MongoClient(uri)

DNS Service Discovery
---------------------

To use DNS service discovery to look up the DNS SRV record of the service you're connecting to,
specify the SRV connection format in your connection string. Additionally, if you enable
the SRV connection format, {+driver-short+} automatically re-scans for new hosts without
having to change the client configuration.

The following code shows a connection string that uses the SRV connection format:

.. code-block:: python

   uri = "mongodb+srv://<hostname>/"

To learn more about the SRV connection format, see the :manual:`SRV Connection Format </reference/connection-string/#std-label-connections-dns-seedlist>`
entry in the {+mdb-server+} manual.

Troubleshooting
---------------

.. include:: /includes/troubleshooting/connection-targets.rst

Timeout When Accessing MongoDB from {+driver-short+} with Tunneling
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you try to connect to a MongoDB replica set over an SSH tunnel, you
receive the following error:

.. code-block:: python

   File "/Library/Python/2.7/site-packages/pymongo/collection.py", line 1560, in count
     return self._count(cmd, collation, session)
     File "/Library/Python/2.7/site-packages/pymongo/collection.py", line 1504, in _count
     with self._socket_for_reads() as (connection, slave_ok):
     File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/contextlib.py", line 17, in __enter__
     return self.gen.next()
     File "/Library/Python/2.7/site-packages/pymongo/mongo_client.py", line 982, in _socket_for_reads
     server = topology.select_server(read_preference)
     File "/Library/Python/2.7/site-packages/pymongo/topology.py", line 224, in select_server
     address))
     File "/Library/Python/2.7/site-packages/pymongo/topology.py", line 183, in select_servers
     selector, server_timeout, address)
     File "/Library/Python/2.7/site-packages/pymongo/topology.py", line 199, in _select_servers_loop
     self._error_message(selector))
   pymongo.errors.ServerSelectionTimeoutError: localhost:27017: timed out

This occurs because {+driver-short+} discovers replica set members by using the response
from the ``isMaster`` command, which contains the addresses and ports of the other
replica set members. However, you can't access these addresses and ports through the SSH
tunnel.

Instead, you can connect directly to a single MongoDB node by using the
``directConnection=True`` option with SSH tunneling.

API Documentation
-----------------

To learn more about creating a ``MongoClient`` object in {+driver-short+},
see the following API documentation:

- `MongoClient <{+api-root+}pymongo/mongo_client.html#pymongo.mongo_client.MongoClient>`__ 