# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 57fea7e1266f430196982d40e7bc33cd
#: ../source/core/read-isolation-consistency-recency.txt:3
msgid "Read Isolation, Consistency, and Recency"
msgstr ""

# debb09a8f6f146bea9343bf4aea83aac
#: ../source/core/read-isolation-consistency-recency.txt
msgid "On this page"
msgstr ""

# b12d5e521e934d669abc3ab50322fa5c
#: ../source/core/read-isolation-consistency-recency.txt:14
msgid "Isolation Guarantees"
msgstr ""

# b383f2aa442942ff97a7d4d7878338e3
#: ../source/core/read-isolation-consistency-recency.txt:17
msgid "Read Uncommitted"
msgstr ""

# 341f44fc202445bc8a81ee1d65533922
#: ../source/includes/extracts/concurrent-operations-read-uncommitted.rst:1
msgid ""
"In MongoDB, clients can see the results of writes before the writes are "
":term:`durable`:"
msgstr ""

# fd57a17bb4c64359a644d3fc87d9a8bf
#: ../source/includes/list-visibility-of-data.rst:1
msgid ""
"Regardless of :doc:`write concern </reference/write-concern>`, other "
"clients using :readconcern:`\"local\"` (i.e. the default) readConcern can"
" see the result of a write operation before the write operation is "
"acknowledged to the issuing client."
msgstr ""

# 5cf6956b31b34eee879007f8bcb6b493
#: ../source/includes/list-visibility-of-data.rst:6
msgid ""
"Clients using :readconcern:`\"local\"` (i.e. the default) readConcern can"
" read data which may be subsequently :doc:`rolled back </core/replica-"
"set-rollbacks>`."
msgstr ""

# cc33a70f8e2f4c6c92cfe1a1fba069bc
#: ../source/core/read-isolation-consistency-recency.txt:21
msgid ""
"Read uncommitted is the default isolation level and applies to "
":program:`mongod` standalone instances as well as to replica sets and "
"sharded clusters."
msgstr ""

# 528bab8fc90447909f98097860d2f103
#: ../source/core/read-isolation-consistency-recency.txt:26
msgid "Read Uncommitted And Single Document Atomicity"
msgstr ""

# b1f56ba024de4382b8873f827d21f9a6
#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:1
msgid ""
"Write operations are atomic with respect to a single document; i.e. if a "
"write is updating multiple fields in the document, a reader will never "
"see the document with only some of the fields updated."
msgstr ""

# 4b223ed7f6ab480d9bd3a8d6fbb2bca4
#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:5
msgid ""
"With a standalone :program:`mongod` instance, a set of read and write "
"operations to a single document is serializable. With a replica set, a "
"set of read and write operations to a single document is serializable "
"*only* in the absence of a rollback."
msgstr ""

# ffcf1b137ba84f96aea4455d7de9f456
#: ../source/core/read-isolation-consistency-recency.txt:30
msgid ""
"However, although the readers may not see a *partially* updated document,"
" read uncommitted means that concurrent readers may still see the updated"
" document before the changes are :term:`durable`."
msgstr ""

# df6a1ba4b1724b5e89fa0f93bf6c227f
#: ../source/core/read-isolation-consistency-recency.txt:35
msgid "Read Uncommitted And Multiple Document Write"
msgstr ""

# e969e6eec42640eda9497d2d61bcfe42
#: ../source/includes/extracts/concurrent-operations-multi-document-writes.rst:1
msgid ""
"When a single write operation modifies multiple documents, the "
"modification of each document is atomic, but the operation as a whole is "
"not atomic and other operations may interleave. However, you can "
"*isolate* a single write operation that affects multiple documents using "
"the :update:`$isolated` operator."
msgstr ""

# 6c6e8f567bbe4d41a3ea302f6a7c1ae0
#: ../source/core/read-isolation-consistency-recency.txt:39
msgid ""
"Without isolating the multi-document write operations, MongoDB exhibits "
"the following behavior:"
msgstr ""

# 69659be5b73e41499946250aa2b5a71a
#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:2
msgid ""
"Non-point-in-time read operations. Suppose a read operation begins at "
"time *t*\\ :sub:`1` and starts reading documents. A write operation then "
"commits an update to one of the documents at some later time *t*\\ "
":sub:`2`. The reader may see the updated version of the document, and "
"therefore does not see a point-in-time snapshot of the data."
msgstr ""

# 8a454003d9c5450ea9a2688c248d2e0d
#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:9
msgid ""
"Non-serializable operations. Suppose a read operation reads a document "
"*d*\\ :sub:`1` at time *t*\\ :sub:`1` and a write operation updates *d*\\"
" :sub:`1` at some later time *t*\\ :sub:`3`. This introduces a read-write"
" dependency such that, if the operations were to be serialized, the read "
"operation must precede the write operation. But also suppose that the "
"write operation updates document *d*\\ :sub:`2` at time *t*\\ :sub:`2` "
"and the read operation subsequently reads *d*\\ :sub:`2` at some later "
"time *t*\\ :sub:`4`. This introduces a write-read dependency which would "
"instead require the read operation to come *after* the write operation in"
" a serializable schedule. There is a dependency cycle which makes "
"serializability impossible."
msgstr ""

# 3c2d0acd059a41e696eca533268cfa1b
#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:22
msgid ""
"Reads may miss matching documents that are updated during the course of "
"the read operation."
msgstr ""

# 31b994a23a0e4a258224bcb9250018f6
#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:1
msgid ""
"Using the :update:`$isolated` operator, a write operation that affects "
"multiple documents can prevent other processes from interleaving once the"
" write operation modifies the first document. This ensures that no client"
" sees the changes until the write operation completes or errors out."
msgstr ""

# f4002133d95b4d0e81cc5ebd81b916a4
#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:7
msgid ""
":update:`$isolated` does **not** work with :term:`sharded clusters "
"<sharded cluster>`."
msgstr ""

# 11a7b74beec844f8a418927efab15489
#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:10
msgid ""
"An isolated write operation does not provide \"all-or-nothing\" "
"atomicity. That is, an error during the write operation does not roll "
"back all its changes that preceded the error."
msgstr ""

# 5496e012c3e84f05a01710f4db1c2eb5
#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:16
msgid ""
":update:`$isolated` operator causes write operations to acquire an "
"exclusive lock on the collection, *even for document-level locking "
"storage engines* such as WiredTiger. That is, :update:`$isolated` "
"operator will make WiredTiger single-threaded for the duration of the "
"operation."
msgstr ""

# 37591167b0ee4baaa0a3842dc5b6d21e
#: ../source/core/read-isolation-consistency-recency.txt:46
msgid ":doc:`/core/write-operations-atomicity`"
msgstr ""

# 1918db260bc64f708005ef2ca708d547
#: ../source/core/read-isolation-consistency-recency.txt:51
msgid "Cursor Snapshot"
msgstr ""

# 261c4500635c4d60a29076a00d57c011
#: ../source/includes/extracts/isolate-cursor-snapshot.rst:2
msgid ""
"MongoDB cursors can return the same document more than once in some "
"situations. As a cursor returns documents other operations may interleave"
" with the query. If some of these operations are :doc:`updates </tutorial"
"/update-documents>` that cause the document to move (in the case of "
"MMAPv1, caused by document growth) or that change the indexed field on "
"the index used by the query; then the cursor will return the same "
"document more than once."
msgstr ""

# 078ffaf767a94fbd8cc6c1e3f7cc53d0
#: ../source/includes/extracts/isolate-cursor-snapshot.rst:10
msgid ""
"In very specific cases, you can isolate the cursor from returning the "
"same document more than once by using the :method:`cursor.snapshot()` "
"method. :method:`~cursor.snapshot()` guarantees that the query will "
"return each document no more than once."
msgstr ""

# 80087fb176304fb195d4140a318e4b6d
#: ../source/includes/extracts/isolate-cursor-snapshot.rst:18
msgid ""
"The :method:`~cursor.snapshot()` does not guarantee that the data "
"returned by the query will reflect a single moment in time *nor* does it "
"provide isolation from insert or delete operations."
msgstr ""

# 20922fc4b16c4b3ebd4fc4992dade325
#: ../source/includes/extracts/isolate-cursor-snapshot.rst:23
msgid ""
"You **cannot** use :method:`~cursor.snapshot()` with :term:`sharded "
"collections <sharding>`."
msgstr ""

# be3ffa2bf34644049c3aec241829eff6
#: ../source/includes/extracts/isolate-cursor-snapshot.rst:26
msgid ""
"You **cannot** use :method:`~cursor.snapshot()` with the "
":method:`~cursor.sort()` or :method:`~cursor.hint()` cursor methods."
msgstr ""

# 9f2a4599cecd45eba74f693be6bbc700
#: ../source/includes/extracts/isolate-cursor-snapshot.rst:29
msgid ""
"As an alternative, if your collection has a field or fields that are "
"never modified, you can use a *unique* index on this field or these "
"fields to achieve a similar result as the :method:`~cursor.snapshot()`. "
"Query with :method:`~cursor.hint()` to explicitly force the query to use "
"that index."
msgstr ""

# f1588be493e5426dac239043dece3fb7
#: ../source/core/read-isolation-consistency-recency.txt:57
msgid "Monotonic Writes"
msgstr ""

# ccfa66dcd1be44f28f46509b0d99f2b8
#: ../source/includes/extracts/monotonic-writes.rst:1
msgid ""
"MongoDB provides  monotonic write guarantees for standalone "
":program:`mongod` instances, replica sets, and sharded clusters."
msgstr ""

# 73d57296d1524e3680bda2fe1506ba00
#: ../source/includes/extracts/monotonic-writes.rst:4
msgid ""
"Suppose an application performs a sequence of operations that consists of"
" a write operation *W*\\ :sub:`1` followed later in the sequence by a "
"write operation *W*\\ :sub:`2`. MongoDB guarantees that *W*\\ :sub:`1` "
"operation precedes *W*\\ :sub:`2`."
msgstr ""

# af35979a9e17434d86ee13f01bce4f70
#: ../source/core/read-isolation-consistency-recency.txt:64
msgid "Real Time Order"
msgstr ""

# 5959522c8f0244299763d9a2e4559bbd
#: ../source/core/read-isolation-consistency-recency.txt:68
msgid ""
"For read and write operations on the primary, issuing read operations "
"with :readconcern:`\"linearizable\"` read concern and write operations "
"with :writeconcern:`\"majority\"` write concern enables multiple threads "
"to perform reads and writes on a single document as if a single thread "
"performed these operations in real time; that is, the corresponding "
"schedule for these reads and writes is considered linearizable."
msgstr ""

