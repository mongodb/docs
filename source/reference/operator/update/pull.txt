=====
$pull
=====

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. update:: $pull

   The :update:`$pull` operator removes from an existing array all
   instances of a value or values that match a specified condition.

   The :update:`$pull` operator has the form:

   .. code-block:: javascript

      { $pull: { <field1>: <value|condition>, <field2>: <value|condition>, ... } }

   .. include:: /includes/use-dot-notation.rst

Behavior
--------

If you specify a ``<condition>`` and the array elements are embedded
documents, :update:`$pull` operator applies the ``<condition>`` as if each
array element were a document in a collection. See
:ref:`pull-array-of-documents` for an example.

If the specified ``<value>`` to remove is an array, :update:`$pull`
removes only the elements in the array that match the specified
``<value>`` exactly, including order.

If the specified ``<value>`` to remove is a document, :update:`$pull`
removes only the elements in the array that have the exact same fields
and values. The ordering of the fields can differ.

Examples
--------

Remove All Items That Equal a Specified Value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Given the following document in the ``stores`` collection:

.. code-block:: javascript

   {
      _id: 1,
      fruits: [ "apples", "pears", "oranges", "grapes", "bananas" ],
      vegetables: [ "carrots", "celery", "squash", "carrots" ]
   }
   {
      _id: 2,
      fruits: [ "plums", "kiwis", "oranges", "bananas", "apples" ],
      vegetables: [ "broccoli", "zucchini", "carrots", "onions" ]
   }

The following operation updates all documents in the collection to
remove ``"apples"`` and ``"oranges"`` from the array ``fruits`` and
remove ``"carrots"`` from the array ``vegetables``:

.. code-block:: javascript

   db.stores.update(
       { },
       { $pull: { fruits: { $in: [ "apples", "oranges" ] }, vegetables: "carrots" } },
       { multi: true }
   )

After the operation, the ``fruits`` array no longer contains any
``"apples"`` or ``"oranges"`` values, and the ``vegetables`` array no
longer contains any ``"carrots"`` values:

.. code-block:: javascript

   {
     "_id" : 1,
     "fruits" : [ "pears", "grapes", "bananas" ],
     "vegetables" : [ "celery", "squash" ]
   }
   {
     "_id" : 2,
     "fruits" : [ "plums", "kiwis", "bananas" ],
     "vegetables" : [ "broccoli", "zucchini", "onions" ]
   }

Remove All Items That Match a Specified ``$pull`` Condition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Given the following document in the ``profiles`` collection:

.. code-block:: javascript

   { _id: 1, votes: [ 3, 5, 6, 7, 7, 8 ] }

The following operation will remove all items from the ``votes`` array
that are greater than or equal to (:query:`$gte`) ``6``:

.. code-block:: javascript

   db.profiles.update( { _id: 1 }, { $pull: { votes: { $gte: 6 } } } )

After the update operation, the document only has values less than 6:

.. code-block:: javascript

   { _id: 1, votes: [  3,  5 ] }

.. _pull-array-of-documents:

Remove Items from an Array of Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A ``survey`` collection contains the following documents:

.. code-block:: javascript

   {
      _id: 1,
      results: [
         { item: "A", score: 5 },
         { item: "B", score: 8, comment: "Strongly agree" }
      ]
   }
   {
      _id: 2,
      results: [
         { item: "C", score: 8, comment: "Strongly agree" },
         { item: "B", score: 4 }
      ]
   }

The following operation will remove from the ``results`` array all
elements that contain both a ``score`` field equal to ``8`` and an
``item`` field equal to ``"B"``:

.. code-block:: javascript

   db.survey.update(
     { },
     { $pull: { results: { score: 8 , item: "B" } } },
     { multi: true }
   )

The :update:`$pull` expression applies the condition to each element of
the ``results`` array as though it were a top-level document.

After the operation, the ``results`` array contains no documents that
contain both a ``score`` field equal to ``8`` and an ``item`` field
equal to ``"B"``.

.. code-block:: javascript

   {
      "_id" : 1,
      "results" : [ { "item" : "A", "score" : 5 } ]
   }
   {
     "_id" : 2,
     "results" : [
         { "item" : "C", "score" : 8, "comment" : "Strongly agree" },
         { "item" : "B", "score" : 4 }
      ]
   }

Because :update:`$pull` operator applies its query to each element as
though it were a top-level object, the expression did not require the
use of :query:`$elemMatch` to specify the condition of a ``score``
field equal to ``8`` and ``item`` field equal to ``"B"``. In fact, the
following operation will not pull any element from the original
collection.

.. code-block:: javascript

   db.survey.update(
     { },
     { $pull: { results: { $elemMatch: { score: 8 , item: "B" } } } },
     { multi: true }
   )

However, if the ``survey`` collection contained the following
documents, where the ``results`` array contains embedded documents that
also contain arrays:

.. code-block:: javascript

   {
      _id: 1,
      results: [
         { item: "A", score: 5, answers: [ { q: 1, a: 4 }, { q: 2, a: 6 } ] },
         { item: "B", score: 8, answers: [ { q: 1, a: 8 }, { q: 2, a: 9 } ] }
      ]
   }
   {
      _id: 2,
      results: [
         { item: "C", score: 8, answers: [ { q: 1, a: 8 }, { q: 2, a: 7 } ] },
         { item: "B", score: 4, answers: [ { q: 1, a: 0 }, { q: 2, a: 8 } ] }
      ]
   }

Then you can specify multiple conditions on the elements of the
``answers`` array with :query:`$elemMatch`:

.. code-block:: javascript

   db.survey.update(
     { },
     { $pull: { results: { answers: { $elemMatch: { q: 2, a: { $gte: 8 } } } } } },
     { multi: true }
   )

The operation removed from the ``results`` array those embedded
documents with an ``answers`` field that contained at least one element
with ``q`` equal to ``2`` and ``a`` greater than or equal to ``8``:

.. code-block:: javascript

   {
      "_id" : 1,
      "results" : [
         { "item" : "A", "score" : 5, "answers" : [ { "q" : 1, "a" : 4 }, { "q" : 2, "a" : 6 } ] }
      ]
   }
   {
      "_id" : 2,
      "results" : [
         { "item" : "C", "score" : 8, "answers" : [ { "q" : 1, "a" : 8 }, { "q" : 2, "a" : 7 } ] }
      ]
   }

.. seealso::

   :method:`db.collection.update()`,

   :method:`db.collection.findAndModify()`
