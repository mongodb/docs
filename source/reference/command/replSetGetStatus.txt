================
replSetGetStatus
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: replSetGetStatus

   The ``replSetGetStatus`` command returns the status of the replica
   set from the point of view of the server that processed the command.
   ``replSetGetStatus`` must be run against the :term:`admin database`.
   The command has the following prototype form:

   .. code-block:: javascript

      db.adminCommand( { replSetGetStatus: 1 } )

   Starting in MongoDB 3.4, when running on a :doc:`secondary
   </core/replica-set-secondary>` member, you can optionally include
   ``initialSync: 1`` to return :ref:`initial sync
   <replica-set-initial-sync>` status information:

   .. code-block:: javascript

      db.adminCommand( { replSetGetStatus: 1, initialSync: 1 } )

   Data provided by this command derives from data included in
   heartbeats sent to the server by other members of the replica set.
   Because of the frequency of heartbeats, these data can be several
   seconds out of date.

   The :binary:`~bin.mongo` shell provides the :method:`rs.status()`
   helper; however, you cannot specify the ``initialSync: 1`` option
   using the helper.

   The :binary:`~bin.mongod` instance must have replication enabled and be a
   member of a replica set for :dbcommand:`replSetGetStatus` to return
   successfully.

.. _rs-status-output:

Example
-------

.. tabs::

   tabs:

      - id: primary
        name: Primary
        content: |

          The following example runs the :dbcommand:`replSetGetStatus`
          command on the :term:`admin database` of the replica set
          primary:

          .. code-block:: javascript

             db.adminCommand( { replSetGetStatus : 1 } )

          The command returns the following output for an example replica set primary:

          .. code-block:: javascript

             {
                "set" : "replset",
                "date" : ISODate("2018-12-06T18:58:41.269Z"),
                "myState" : 1,
                "term" : NumberLong(1),
                "syncingTo" : "",
                "syncSourceHost" : "",
                "syncSourceId" : -1,
                "heartbeatIntervalMillis" : NumberLong(2000),
                "optimes" : {
                   "lastCommittedOpTime" : {
                      "ts" : Timestamp(1544122717, 1),
                      "t" : NumberLong(1)
                   },
                   "readConcernMajorityOpTime" : {
                      "ts" : Timestamp(1544122717, 1),
                      "t" : NumberLong(1)
                   },
                   "appliedOpTime" : {
                      "ts" : Timestamp(1544122717, 1),
                      "t" : NumberLong(1)
                   },
                   "durableOpTime" : {
                      "ts" : Timestamp(1544122717, 1),
                      "t" : NumberLong(1)
                   }
                },
                "lastStableRecoveryTimestamp" : Timestamp(1544122667, 1),
                "lastStableCheckpointTimestamp" : Timestamp(1544122667, 1),
                "members" : [
                   {
                      "_id" : 0,
                      "name" : "m1.example.net:27017",
                      "health" : 1,
                      "state" : 1,
                      "stateStr" : "PRIMARY",
                      "uptime" : 69,
                      "optime" : {
                         "ts" : Timestamp(1544122717, 1),
                         "t" : NumberLong(1)
                      },
                      "optimeDate" : ISODate("2018-12-06T18:58:37Z"),
                      "syncingTo" : "",
                      "syncSourceHost" : "",
                      "syncSourceId" : -1,
                      "infoMessage" : "could not find member to sync from",
                      "electionTime" : Timestamp(1544122666, 1),
                      "electionDate" : ISODate("2018-12-06T18:57:46Z"),
                      "configVersion" : 1,
                      "self" : true,
                      "lastHeartbeatMessage" : ""
                   },
                   {
                      "_id" : 1,
                      "name" : "m2.example.net:27017",
                      "health" : 1,
                      "state" : 2,
                      "stateStr" : "SECONDARY",
                      "uptime" : 65,
                      "optime" : {
                         "ts" : Timestamp(1544122717, 1),
                         "t" : NumberLong(1)
                      },
                      "optimeDurable" : {
                         "ts" : Timestamp(1544122717, 1),
                         "t" : NumberLong(1)
                      },
                      "optimeDate" : ISODate("2018-12-06T18:58:37Z"),
                      "optimeDurableDate" : ISODate("2018-12-06T18:58:37Z"),
                      "lastHeartbeat" : ISODate("2018-12-06T18:58:40.736Z"),
                      "lastHeartbeatRecv" : ISODate("2018-12-06T18:58:41.051Z"),
                      "pingMs" : NumberLong(0),
                      "lastHeartbeatMessage" : "",
                      "syncingTo" : "m1.example.net:27017",
                      "syncSourceHost" : "m1.example.net:27017",
                      "syncSourceId" : 0,
                      "infoMessage" : "",
                      "configVersion" : 1
                   },
                   {
                      "_id" : 2,
                      "name" : "m3.example.net:27017",
                      "health" : 1,
                      "state" : 2,
                      "stateStr" : "SECONDARY",
                      "uptime" : 4,
                      "optime" : {
                         "ts" : Timestamp(1544122717, 1),
                         "t" : NumberLong(1)
                      },
                      "optimeDurable" : {
                         "ts" : Timestamp(1544122717, 1),
                         "t" : NumberLong(1)
                      },
                      "optimeDate" : ISODate("2018-12-06T18:58:37Z"),
                      "optimeDurableDate" : ISODate("2018-12-06T18:58:37Z"),
                      "lastHeartbeat" : ISODate("2018-12-06T18:58:40.882Z"),
                      "lastHeartbeatRecv" : ISODate("2018-12-06T18:58:41.246Z"),
                      "pingMs" : NumberLong(0),
                      "lastHeartbeatMessage" : "",
                      "syncingTo" : "",
                      "syncSourceHost" : "",
                      "syncSourceId" : -1,
                      "infoMessage" : "",
                      "configVersion" : 1
                   }
                ],
                "ok" : 1,
                "$clusterTime" : {
                   "clusterTime" : Timestamp(1544122717, 1),
                   "signature" : {
                      "hash" : BinData(0,"qJMzGYRwqIxh6xG/0h+y8U0QNfw="),
                      "keyId" : NumberLong("6631956355777298433")
                   }
                },
                "operationTime" : Timestamp(1544122717, 1)
             }

      - id: secondary
        name: Secondary
        content: |

          The following example runs the :dbcommand:`replSetGetStatus`
          command on the :term:`admin database` of the replica set
          primary. In this example, the optional ``initialSync: 1`` is
          included in the command (you can omit if you do not want to
          return the initial sync status):

          .. code-block:: javascript

             db.adminCommand( { replSetGetStatus : 1, initialSync: 1 } )

          The command returns the following output for an example replica set secondary:

          .. code-block:: javascript

             {
                "set" : "replset",
                "date" : ISODate("2018-12-06T19:01:10.081Z"),
                "myState" : 2,
                "term" : NumberLong(1),
                "syncingTo" : "m2.example.net:27017",
                "syncSourceHost" : "m2.example.net:27017",
                "syncSourceId" : 1,
                "heartbeatIntervalMillis" : NumberLong(2000),
                "optimes" : {
                   "lastCommittedOpTime" : {
                      "ts" : Timestamp(1544122867, 1),
                      "t" : NumberLong(1)
                   },
                   "readConcernMajorityOpTime" : {
                      "ts" : Timestamp(1544122867, 1),
                      "t" : NumberLong(1)
                   },
                   "appliedOpTime" : {
                      "ts" : Timestamp(1544122867, 1),
                      "t" : NumberLong(1)
                   },
                   "durableOpTime" : {
                      "ts" : Timestamp(1544122867, 1),
                      "t" : NumberLong(1)
                   }
                },
                "lastStableRecoveryTimestamp" : Timestamp(1544122837, 1),
                "lastStableCheckpointTimestamp" : Timestamp(1544122837, 1),
                "initialSyncStatus" : {
                   "failedInitialSyncAttempts" : 0,
                   "maxFailedInitialSyncAttempts" : 10,
                   "initialSyncStart" : ISODate("2018-12-06T18:58:37.181Z"),
                   "initialSyncEnd" : ISODate("2018-12-06T18:58:39.198Z"),
                   "initialSyncElapsedMillis" : 2017,
                   "initialSyncAttempts" : [
                      {
                         "durationMillis" : 774,
                         "status" : "OK",
                         "syncSource" : "m2.example.net:27017"
                      }
                   ],
                   "fetchedMissingDocs" : 0,
                   "appliedOps" : 0,
                   "initialSyncOplogStart" : Timestamp(1544122717, 1),
                   "initialSyncOplogEnd" : Timestamp(1544122717, 1),
                   "databases" : {
                      "databasesCloned" : 3,
                      "admin" : {
                         "collections" : 4,
                         "clonedCollections" : 4,
                         "start" : ISODate("2018-12-06T18:58:38.424Z"),
                         "end" : ISODate("2018-12-06T18:58:38.976Z"),
                         "elapsedMillis" : 552,
                         "admin.system.roles" : {
                            "documentsToCopy" : 1,
                            "documentsCopied" : 1,
                            "indexes" : 2,
                            "fetchedBatches" : 1,
                            "start" : ISODate("2018-12-06T18:58:38.426Z"),
                            "end" : ISODate("2018-12-06T18:58:38.611Z"),
                            "elapsedMillis" : 185,
                            "receivedBatches" : 1
                         },
                         ...
                      },
                      ...
                      "test" : {
                         "collections" : 1,
                         "clonedCollections" : 1,
                         "start" : ISODate("2018-12-06T18:58:39.083Z"),
                         "end" : ISODate("2018-12-06T18:58:39.191Z"),
                         "elapsedMillis" : 108,
                         "test.foo" : {
                            "documentsToCopy" : 3,
                            "documentsCopied" : 3,
                            "indexes" : 1,
                            "fetchedBatches" : 1,
                            "start" : ISODate("2018-12-06T18:58:39.084Z"),
                            "end" : ISODate("2018-12-06T18:58:39.191Z"),
                            "elapsedMillis" : 107,
                            "receivedBatches" : 1
                         }
                      }
                   }
                },
                "members" : [
                   {
                      "_id" : 0,
                      "name" : "m1.example.net:27017",
                      "health" : 1,
                      "state" : 1,
                      "stateStr" : "PRIMARY",
                      "uptime" : 152,
                      "optime" : {
                         "ts" : Timestamp(1544122867, 1),
                         "t" : NumberLong(1)
                      },
                      "optimeDurable" : {
                         "ts" : Timestamp(1544122867, 1),
                         "t" : NumberLong(1)
                      },
                      "optimeDate" : ISODate("2018-12-06T19:01:07Z"),
                      "optimeDurableDate" : ISODate("2018-12-06T19:01:07Z"),
                      "lastHeartbeat" : ISODate("2018-12-06T19:01:09.435Z"),
                      "lastHeartbeatRecv" : ISODate("2018-12-06T19:01:09.045Z"),
                      "pingMs" : NumberLong(0),
                      "lastHeartbeatMessage" : "",
                      "syncingTo" : "",
                      "syncSourceHost" : "",
                      "syncSourceId" : -1,
                      "infoMessage" : "",
                      "electionTime" : Timestamp(1544122666, 1),
                      "electionDate" : ISODate("2018-12-06T18:57:46Z"),
                      "configVersion" : 1
                   },
                   {
                      "_id" : 1,
                      "name" : "m2.example.net:27017",
                      "health" : 1,
                      "state" : 2,
                      "stateStr" : "SECONDARY",
                      "uptime" : 152,
                      "optime" : {
                         "ts" : Timestamp(1544122867, 1),
                         "t" : NumberLong(1)
                      },
                      "optimeDurable" : {
                         "ts" : Timestamp(1544122867, 1),
                         "t" : NumberLong(1)
                      },
                      "optimeDate" : ISODate("2018-12-06T19:01:07Z"),
                      "optimeDurableDate" : ISODate("2018-12-06T19:01:07Z"),
                      "lastHeartbeat" : ISODate("2018-12-06T19:01:09.435Z"),
                      "lastHeartbeatRecv" : ISODate("2018-12-06T19:01:09.345Z"),
                      "pingMs" : NumberLong(0),
                      "lastHeartbeatMessage" : "",
                      "syncingTo" : "m1.example.net:27017",
                      "syncSourceHost" : "m1.example.net:27017",
                      "syncSourceId" : 0,
                      "infoMessage" : "",
                      "configVersion" : 1
                   },
                   {
                      "_id" : 2,
                      "name" : "m3.example.net:27017",
                      "health" : 1,
                      "state" : 2,
                      "stateStr" : "SECONDARY",
                      "uptime" : 155,
                      "optime" : {
                         "ts" : Timestamp(1544122867, 1),
                         "t" : NumberLong(1)
                      },
                      "optimeDate" : ISODate("2018-12-06T19:01:07Z"),
                      "syncingTo" : "m2.example.net:27017",
                      "syncSourceHost" : "m2.example.net:27017",
                      "syncSourceId" : 1,
                      "infoMessage" : "",
                      "configVersion" : 1,
                      "self" : true,
                      "lastHeartbeatMessage" : ""
                   }
                ],
                "ok" : 1,
                "$clusterTime" : {
                   "clusterTime" : Timestamp(1544122867, 1),
                   "signature" : {
                      "hash" : BinData(0,"LfRTDKIE5gLwy0V8CPND/VLip0k="),
                      "keyId" : NumberLong("6631956355777298433")
                   }
                },
                "operationTime" : Timestamp(1544122867, 1)
             }

Output
------

The :command:`replSetGetStatus` command returns a document with the
following fields:

.. data:: replSetGetStatus.set

   The ``set`` value is the name of the replica set, configured in the
   :setting:`~replication.replSetName` setting. This is the same value as
   :rsconf:`_id` in :method:`rs.conf()`.

.. data:: replSetGetStatus.date

   An :term:`ISODate` formatted date and time that reflects the current
   time according to the server that processed the
   :command:`replSetGetStatus` command. Compare this to the values of
   :data:`replSetGetStatus.members[n].lastHeartbeat` to find the
   operational latency between this server and the other members of the
   replica set.

.. data:: replSetGetStatus.myState

   An integer between ``0`` and ``10`` that represents the :doc:`replica
   state </reference/replica-states>` of the current member.

.. data:: replSetGetStatus.term

   .. versionadded:: 3.2

   The election count for the replica set, as known to this replica set
   member. The :data:`~replSetGetStatus.term` is used by the
   distributed consensus algorithm to ensure correctness.

.. data:: replSetGetStatus.syncingTo

   .. deprecated:: 4.0, 3.6.6, 3.4.16

      Starting in MongoDB 4.0 (and 3.6.6, 3.4.16), MongoDB deprecates
      :data:`~replSetGetStatus.syncingTo`. See
      :data:`replSetGetStatus.syncSourceHost` instead.

   The ``syncingTo`` field holds the hostname of the member from
   which this instance syncs. If this instance is a primary, returns
   an empty string ``""``.

.. data:: replSetGetStatus.syncSourceHost

   .. versionadded:: 4.0, 3.6.6, 3.4.16

   The :data:`~replSetGetStatus.syncSourceHost` field holds the
   hostname of the member from which this instance syncs.

   If this instance is a primary,
   :data:`~replSetGetStatus.syncSourceHost` is an empty string and
   the :data:`~replSetGetStatus.syncSourceId` ``-1``.

.. data:: replSetGetStatus.syncSourceId

   .. versionadded:: 4.0, 3.6.6, 3.4.16

   The :data:`~replSetGetStatus.syncSourceId` field holds the
   :data:`replSetGetStatus.members[n]._id` of the member from which
   this instance syncs.

   If this instance is a primary,
   :data:`~replSetGetStatus.syncSourceHost` is an empty string and
   the :data:`~replSetGetStatus.syncSourceId` ``-1``.

.. data:: replSetGetStatus.heartbeatIntervalMillis

   .. versionadded:: 3.2

   The frequency in milliseconds of the heartbeats.

.. data:: replSetGetStatus.optimes

   .. versionadded:: 3.4

   The ``optimes`` field holds a document that contains
   :term:`optimes <optime>` used to inspect replication progress.

   Each optime value is a document that contains:

   .. include:: /includes/fact-optime.rst

   .. data:: replSetGetStatus.optimes.lastCommittedOpTime

      Information, from the viewpoint of this member, regarding the
      most recent operation that has been written to a majority of
      replica set members.

   .. data:: replSetGetStatus.optimes.readConcernMajorityOpTime

      Information, from the viewpoint of this member, regarding the
      most recent operation that can fulfill read concern
      :readconcern:`"majority"` queries; i.e. the most recent
      :data:`~replSetGetStatus.optimes.lastCommittedOpTime` that can
      fulfill :readconcern:`"majority"` queries.
      :data:`~replSetGetStatus.optimes.readConcernMajorityOpTime` is
      either less than or equal to
      :data:`~replSetGetStatus.optimes.lastCommittedOpTime`.

   .. data:: replSetGetStatus.optimes.appliedOpTime

      Information, from the viewpoint of this member, regarding the
      most recent operation that has been applied to this member of the
      replica set.

   .. data:: replSetGetStatus.optimes.durableOpTime

      Information,, from the viewpoint of this member, regarding the
      most recent operation that has been written to the journal of
      this member of the replica set.

.. data:: replSetGetStatus.lastStableCheckpointTimestamp

   .. versionadded:: 4.0

   Available for the :ref:`storage-wiredtiger`.

   Timestamp at which the current, or a previous, persisted checkpoint
   was taken. Although
   :data:`~replSetGetStatus.lastStableCheckpointTimestamp` may lag the
   most recent persisted checkpoint, the returned timestamp is
   guaranteed to be persisted in a stable checkpoint to disk.

   A ``null`` value indicates that no stable checkpoint exists.

.. data:: replSetGetStatus.initialSyncStatus

   .. versionadded:: 3.4

      *Available only if the command is run with the initialSync: 1
      option on a secondary*

   A document provides information on the progress and status of
   :ref:`initial sync <replica-set-initial-sync>` on this secondary.

   .. note::

      Some fields that relate to the progress of an on-going initial
      sync only appear while the initial sync is in progress and do not
      appear once the initial sync completes.

   .. data:: replSetGetStatus.initialSyncStatus.failedInitialSyncAttempts

      .. versionadded:: 3.4

         *Available only if the command is run with the initialSync: 1
         option on a secondary*

      The number of times the :ref:`initial sync
      <replica-set-initial-sync>` failed and had to restart on this
      secondary.

   .. data:: replSetGetStatus.initialSyncStatus.maxFailedInitialSyncAttempts

      .. versionadded:: 3.4

         *Available only if the command is run with the initialSync: 1
         option on a secondary*

         The maximum number of times the :ref:`initial sync
         <replica-set-initial-sync>` can restart on this secondary
         before the member shuts down.

   .. data:: replSetGetStatus.initialSyncStatus.initialSyncStart

      .. versionadded:: 3.4

         *Available only if the command is run with the initialSync: 1
         option on a secondary*

      The start timestamp of the :ref:`initial sync
      <replica-set-initial-sync>` for this secondary.

   .. data:: replSetGetStatus.initialSyncStatus.initialSyncEnd

      .. versionadded:: 3.4

         *Available only if the command is run with the initialSync: 1
         option on a secondary*

      The end timestamp of the :ref:`initial sync
      <replica-set-initial-sync>` for this secondary.

   .. data:: replSetGetStatus.initialSyncStatus.initialSyncElapsedMillis

      .. versionadded:: 3.4

         *Available only if the command is run with the initialSync: 1
         option on a secondary*

         The number of milliseconds between
         :data:`~replSetGetStatus.initialSyncStatus.initialSyncStart`
         and :data:`~replSetGetStatus.initialSyncStatus.initialSyncEnd`.

   .. data:: replSetGetStatus.initialSyncStatus.initialSyncAttempts

      .. versionadded:: 3.4

         *Available only if the command is run with the initialSync: 1
         option on a secondary*

      Array of documents where each document corresponds to a single
      :ref:`initial sync <replica-set-initial-sync>` attempt. See also
      :data:`~replSetGetStatus.initialSyncStatus.failedInitialSyncAttempts`.

      Each document contains the following information for the initial sync attempt:

      .. code-block:: javascript

         {
            "durationMillis" : <duration in milliseconds>,
            "status" : <exit status>,
            "syncSource" : <source node from which this secondary performs initial sync>
         }

   .. data:: replSetGetStatus.initialSyncStatus.fetchedMissingDocs

      .. versionadded:: 3.4

         *Available only if the command is run with the initialSync: 1
         option on a secondary*

      The number of missing (i.e. uncloned) documents that were fetched
      from the sync source in order to apply to those documents the
      updates that occurred after the :ref:`initial sync
      <replica-set-initial-sync>` started.

      As part of the initial sync process, the secondary uses the oplog
      to update its data set to reflect the current state of the
      replica set.

   .. data:: replSetGetStatus.initialSyncStatus.appliedOps

      .. versionadded:: 3.4

         *Available only if the command is run with the initialSync: 1
         option on a secondary*

      The number of ops that occurred after the :ref:`initial sync
      <replica-set-initial-sync>` started and were applied after cloning
      the databases.

      As part of the initial sync process, the secondary uses the oplog
      to update its data set to reflect the current state of the
      replica set.
   
   .. data:: replSetGetStatus.initialSyncStatus.initialSyncOplogStart

      .. versionadded:: 3.4

         *Available only if the command is run with the initialSync: 1
         option on a secondary*

      The start timestamp of the oplog application stage of the
      :ref:`initial sync <replica-set-initial-sync>` where the
      secondary applies changes that occurred after the initial sync
      start.

      As part of the initial sync process, the secondary uses the oplog
      to update its data set to reflect the current state of the
      replica set.
   
   .. data:: replSetGetStatus.initialSyncStatus.initialSyncOplogEnd 

      .. versionadded:: 3.4

         *Available only if the command is run with the initialSync: 1
         option on a secondary*

      The end timestamp of the oplog application stage of the
      :ref:`initial sync <replica-set-initial-sync>` where the
      secondary applies changes that occurred after the initial sync
      start.

      As part of the initial sync process, the secondary uses the oplog
      to update its data set to reflect the current state of the
      replica set.

   .. data:: replSetGetStatus.initialSyncStatus.databases

      .. versionadded:: 3.4

         *Available only if the command is run with the initialSync: 1
         option on a secondary*

      Detail on the databases cloned during :ref:`initial sync
      <replica-set-initial-sync>`.

   .. data:: replSetGetStatus.initialSyncStatus.databases.databasesCloned

      .. versionadded:: 3.4

         *Available only if the command is run with the initialSync: 1
         option on a secondary*

      Number of databases cloned during :ref:`initial sync
      <replica-set-initial-sync>`.

   .. data:: replSetGetStatus.initialSyncStatus.databases.<dbname>

      .. versionadded:: 3.4

         *Available only if the command is run with the initialSync: 1
         option on a secondary*

      For each database, a document that returns information regarding
      the progress of the cloning of that database.

      .. code-block:: javascript
   
         {
            "collections" : <number of collections to clone in the database>,
            "clonedCollections" : <number of collections cloned to date>,
            "start" : <start date and time for the database clone>,
            "end" : <end date and time for the database clone>,
            "elapsedMillis" : <duration of the database clone>,
            "<db>.<collection>" : {
               "documentsToCopy" : <number of documents to copy>,
               "documentsCopied" : <number of documents copied to date>,
               "indexes" :  <number of indexes>,
               "fetchedBatches" :  <number of batches of documents fetched to date>,
               "start" :  <start date and time for the collection clone>,
               "end" : <end date and time for the collection clone>,
               "elapsedMillis" : <duration of the collection clone>,
               "receivedBatches" : <number of batches of documents received to date>  // Added in 4.2
            }
         }

.. data:: replSetGetStatus.members

   The ``members`` field holds an array that contains a document for
   every member in the replica set.

   .. data:: replSetGetStatus.members[n]._id

      The ``_id`` field holds the identifier for the member.

   .. data:: replSetGetStatus.members[n].name

      The ``name`` field holds the name of the server.

   .. data:: replSetGetStatus.members[n].self

      The ``self`` field is only included in the document for the
      current ``mongod`` instance in the members array. Its value is
      ``true``.

   .. data:: replSetGetStatus.members[n].health

      The ``health`` value is only present for the other members of the
      replica set (i.e. not the member that returns
      :method:`rs.status`). This field conveys if the member is up (i.e.
      ``1``) or down (i.e. ``0``).

   .. data:: replSetGetStatus.members[n].state

      The value of :data:`~replSetGetStatus.members[n].state` is an
      integer between ``0`` and ``10`` that represents the
      :doc:`replica state </reference/replica-states>` of the member.

   .. data:: replSetGetStatus.members[n].stateStr

      A string that describes :data:`~replSetGetStatus.members[n].state`.

   .. data:: replSetGetStatus.members[n].uptime

      The :data:`~replSetGetStatus.members[n].uptime` field holds a value
      that reflects the number of seconds that this member has been
      online.

      This value does not appear for the member that returns the
      :method:`rs.status()` data.

   .. data:: replSetGetStatus.members[n].optime

      Information regarding the last operation from the operation log that
      this member has applied.

      .. versionchanged:: 3.2

      ``optime`` returns a document that contains:

      - ``ts``, the :ref:`Timestamp <document-bson-type-timestamp>` of
        the last operation applied to this member of the replica set
        from the :term:`oplog`.

      - ``t``, the :data:`~replSetGetStatus.term` in which the last
        applied operation was originally generated on the primary.

   .. data:: replSetGetStatus.members[n].optimeDurable

      .. versionadded:: 3.4

      Information regarding the last operation from the operation log
      that this member has applied to its journal.

      ``optimeDurable`` returns a document that contains:

      - ``ts``, the :ref:`Timestamp <document-bson-type-timestamp>` of
        the operation.

      - ``t``, the :data:`~replSetGetStatus.term` in which this
        operation was originally generated on the primary.

   .. data:: replSetGetStatus.members[n].optimeDate

      An :term:`ISODate` formatted date string that reflects the last
      entry from the :term:`oplog` that this member applied. If this
      differs significantly from
      :data:`~replSetGetStatus.members[n].lastHeartbeat` this member is
      either experiencing "replication lag" *or* there have not been any
      new operations since the last update. Compare
      ``members.optimeDate`` between all of the members of the set.

   .. data:: replSetGetStatus.members[n].optimeDurableDate

      .. versionadded:: 3.4

      An :term:`ISODate` formatted date string that reflects the last
      entry from the :term:`oplog` that this member applied to its
      journal.

   .. data:: replSetGetStatus.members[n].electionTime

      For the current primary, information regarding the election
      :ref:`Timestamp <document-bson-type-timestamp>` from the
      operation log. See :doc:`/core/replica-set-high-availability` for more
      information about elections.

   .. data:: replSetGetStatus.members[n].electionDate

      For the current primary, an :term:`ISODate` formatted date string
      that reflects the election date. See
      :doc:`/core/replica-set-high-availability` for more information about
      elections.

   .. data:: replSetGetStatus.members[n].self

      Indicates which replica set member processed the
      :command:`replSetGetStatus` command.

   .. data:: replSetGetStatus.members[n].lastHeartbeat

      An :term:`ISODate` formatted date and time that reflects the last
      time the server that processed the :command:`replSetGetStatus`
      command received a response from a heartbeat that it sent to this
      member (``members[n]``).
      Compare this value to the values of the :data:`~replSetGetStatus.date` and
      :data:`~replSetGetStatus.members[n].lastHeartBeatRecv` fields to
      track latency between these replica set members.

      This value is only available for replica set members other than the server specified by :data:`replSetGetStatus.members[n].self`.

   .. data:: replSetGetStatus.members[n].lastHeartbeatRecv

      An :term:`ISODate` formatted date and time that reflects the last
      time the server that processed the :command:`replSetGetStatus`
      command received a heartbeat request from this member
      (``members[n]``).
      Compare this value to the values of the
      :data:`~replSetGetStatus.date` and
      :data:`~replSetGetStatus.members[n].lastHeartBeat` fields to track
      latency between these replica set members.

      This value is only available for replica set members other than the server specified by :data:`replSetGetStatus.members[n].self`.

   .. data:: replSetGetStatus.members[n].lastHeartbeatMessage

      When the last heartbeat included an extra message, the
      :data:`~replSetGetStatus.members[n].lastHeartbeatMessage` contains
      a string representation of that message.

   .. data:: replSetGetStatus.members[n].pingMs

      The ``pingMs`` represents the number of milliseconds (ms) that a
      round-trip packet takes to travel between the remote member and
      the local instance.

      This value does not appear for the member that returns the
      :method:`rs.status()` data.


   .. data:: replSetGetStatus.members[n].syncingTo

      .. deprecated:: 4.0, 3.6.6, 3.4.16

         Starting in MongoDB 4.0 (and 3.6.6, 3.4.16), MongoDB deprecates
         :data:`~replSetGetStatus.members[n].syncingTo`. See
         :data:`replSetGetStatus.members[n].syncSourceHost` instead.

      The ``syncingTo`` field holds the hostname of the member from
      which this instance is syncing. If the member is a primary,
      returns an empty string ``""``.

   .. data:: replSetGetStatus.members[n].syncSourceHost

      .. versionadded:: 4.0, 3.6.6, 3.4.16

      The :data:`~replSetGetStatus.members[n].syncSourceHost` field
      holds the hostname of the member from which this instance syncs.

      If the ``replSetGetStatus.members[n]`` is a primary,
      :data:`~replSetGetStatus.members[n].syncSourceHost` is an empty
      string and the :data:`~replSetGetStatus.members[n].syncSourceId`
      ``-1``.

   .. data:: replSetGetStatus.members[n].syncSourceId

      .. versionadded:: 4.0, 3.6.6, 3.4.16

      The :data:`~replSetGetStatus.members[n].syncSourceId` field holds
      the :data:`replSetGetStatus.members[n]._id` value of the
      :data:`~replSetGetStatus.members[n].syncSourceHost`.

      If the ``replSetGetStatus.members[n]`` is a primary,
      :data:`~replSetGetStatus.members[n].syncSourceHost` is an empty
      string and the :data:`~replSetGetStatus.members[n].syncSourceId`
      ``-1``.

   .. data:: replSetGetStatus.members[n].configVersion

      .. versionadded:: 3.0

      The ``configVersion`` value is the :rsconf:`replica
      set configuration version <version>`.

See also :ref:`command-response` for details on the ``ok`` status
field, the ``operationTime`` field and the ``$clusterTime`` field.
