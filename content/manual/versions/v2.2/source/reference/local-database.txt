.. _replica-set-local-database:

======================
The ``local`` Database
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. index:: replica set; local database
.. index:: local database
.. index:: database; local
.. index:: namespace; local

Overview
--------

Every :binary:`~bin.mongod` instance has its own ``local`` database, which
stores data used in the replication process, and other
instance-specific data. The ``local`` database is invisible to
replication: collections in the ``local`` database are not replicated.

When running with authentication (i.e. :setting:`auth`), authenticating against the ``local``
database is equivalent to authenticating against the ``admin``
database. This authentication gives access to all databases.

In replication, the ``local`` database store stores internal replication
data for each member of a :term:`replica set`. The ``local`` database contains the
following collections used for replication:

Collections on Replica Set Members
----------------------------------

.. data:: local.system.replset

   :data:`local.system.replset` holds the replica set's configuration
   object as its single document. To view the object's configuration
   information, issue :method:`rs.conf()` from the :binary:`~bin.mongo`
   shell. You can also query this collection directly.

.. data:: local.oplog.rs

   :data:`local.oplog.rs` is the capped collection that holds the
   :term:`oplog`. You set its size at creation using the
   :setting:`oplogSize` setting. To resize the oplog after replica set
   initiation, use the :doc:`/tutorial/change-oplog-size`
   procedure. For additional information, see the
   :ref:`replica-set-internals-oplog` topic in this document and the
   :ref:`replica-set-oplog-sizing` topic in the
   :doc:`/core/replication` document.

.. data:: local.replset.minvalid

   This contains an object used internally by replica sets to track replication
   status.

.. data:: local.slaves

   This contains information about each member of the set and the
   latest point in time that this member has synced to. If this
   collection becomes out of date, you can refresh it by dropping the
   collection and allowing MongoDB to automatically refresh it during
   normal replication:

   .. code-block:: javascript

      db.getSiblingDB("local").slaves.drop()

Collections used in Master/Slave Replication
--------------------------------------------

In :term:`master`\/:term:`slave` replication, the ``local`` database contains
the following collections:

- On the master:

  .. data:: local.oplog.$main

     This is the oplog for the master-slave configuration.

  .. data:: local.slaves

     This contains information about each slave.

- On each slave:

  .. data:: local.sources

     This contains information about the slave's master server.
