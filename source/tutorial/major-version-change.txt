.. _upgrade-major-MongoDB-version:

===========================================
Upgrade Major MongoDB Version for a Cluster
===========================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can upgrade the major version of your |service| {+cluster+} at any time
by :ref:`modifying the cluster <scale-cluster-version>`.

To ensure that your transition to the new MongoDB version is smooth and doesn't
affect your application, before you upgrade the major version on your
production |service| {+cluster+}, use the following procedure to create
a staging {+cluster+} and test your application against the new MongoDB version.

Considerations
--------------

The following considerations apply:

- Your {+cluster+} must be in a healthy state before upgrading.

- If you :ref:`take an on-demand snapshot <on-demand-snapshots>` before
  a major version upgrade, wait until the snapshot completes before you
  upgrade the version.

- You can only upgrade your |service| {+cluster+} one major version at a
  time. You cannot skip any major versions when upgrading your
  {+cluster+}.

- Each major version contains some features which may not be
  backward-compatible with previous versions. When upgrading to a new
  major version, check the :manual:`Release Notes </release-notes>` for
  changes which may affect your applications. Alternatively, if you use
  the :manual:`Stable API </reference/stable-api/>`, you ensure that
  behavior changes between MongoDB versions do not break your
  application after an upgrade.

  The MongoDB Stable API encompasses a :manual:`subset of MongoDB
  commands </reference/stable-api/#std-label-api-v1-command-list>` that 
  applications use to read and write data, create collections and
  indexes, and perform other common tasks. The Stable API allows you to
  specify which version of the MongoDB API your application runs against
  and provides long-term API stability for applications. It supports
  more frequent releases and automatic server upgrades, allowing your
  applications to take advantage of rapidly released features without
  risking backward incompatible changes.

- After upgrading the MongoDB major version, you will not be able to 
  downgrade to previous versions unless you pinned the cluster's
  |fcv| before upgrading.

- Live migration requires the |fcv|\s on the source and destination {+clusters+}
  to match in most cases. To learn more, see :ref:`Migrate or Import Data <import-strategies>`.

- Starting with MongoDB 6.0, the ``$$SEARCH_META`` 
  aggregation variable can't be used in any subsequent stage after a 
  :pipeline:`$searchMeta` stage. 

  If you want to upgrade to MongoDB 6.0 from a previous 
  version and use the ``$$SEARCH_META`` aggregation variable in your
  |fts| :pipeline:`$searchMeta` queries, review them before you upgrade your 
  {+cluster+} to avoid errors.

Required Access
---------------

To upgrade a {+cluster+}, you must have the :authrole:`Project Owner` or
higher role for the project.

Upgrade Your Major MongoDB Version
----------------------------------

To upgrade your major MongoDB version:

.. include:: /includes/steps-change-major-version.rst

.. _major-version-upgrade-support:

Manage Feature Compatibility (FCV) During Upgrades
--------------------------------------------------

MongoDB major version upgrades are supported by both |service| and on-premises deployments. 
The |fcv| enables or disables features that persist data incompatible with earlier versions of 
MongoDB. You can pin a cluster's |fcv| before upgrading in |service|, which enables you to 
revert MongoDB to the previous version after upgrading without experiencing version compatibility issues. 

The following procedures allow you to pin and unpin |fcv| for your cluster, downgrade your cluster by one 
major version, or file a support ticket. 

.. warning::

   The |fcv| is a short-term measure that only persists for up to 4 weeks after the pin date, and doesn't 
   simulate the behavior of the previous binary versions. It only postpones upgrading certain internal data 
   structures that allow new server features. After you are confident that a downgrade to the previous version 
   is unnecessary, unpin the |fcv| to match the current binary version.

Limitations
~~~~~~~~~~~~

- |fcv| pinning is only available on Dedicated {+clusters+}.
- |fcv| pin can't be extended beyond 4 weeks from the pin date.
- |fcv| pinning is not supported for {+clusters+} on :manual:`rapid release </reference/versioning/>`.
- You should pin a cluster's |fcv| before the cluster's version reaches end-of-life.

Pin the |fcv| for Your Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When your {+cluster+} has a pinned |fcv|, a pin icon appears next to your {+cluster+}'s :guilabel:`Version` 
at the bottom of the {+cluster+} card. If you hover your cursor over the pin icon, a tooltip that 
shows the |fcv| and the expiration date appears.

|service| unpins your {+cluster+}'s |fcv| on the next :ref:`maintenance window <configure-maintenance-window>` 
starting on or after the expiration date.

If you already upgraded your {+cluster+}'s MongoDB version, |service| upgrades its |fcv| to match 
its MongoDB version after the pin expires.

To pin the |fcv| for your {+cluster+}:

.. tabs:: 

   .. tab:: {+atlas-ui+}
      :tabid: ui

      .. procedure::
         :style: normal

         .. include:: /includes/nav/steps-db-deployments-page.rst

         .. step:: Click the :icon-fa5:`ellipsis-h` icon to the right of the {+database-deployment+}.

         .. step:: Select :guilabel:`Pin Feature Compatibility Version`. 
         
            A modal appears with the :guilabel:`Feature Compatibility Version` and the :guilabel:`Set expiration date` field.

         .. step:: Set the expiration date. 
            
            All dates are set to |iso8601-time|, in the ``MM/DD/YYYY`` format. Set the |fcv| expiration date 
            to be within four weeks of the date to which you pinned the |fcv|. When the expiration date passes, the tooltip displays 
            ``Expired XX/XX/XXXX``. Your |fcv| pin automatically expires after 4 weeks.

            After the |fcv| pin expires, |service| unpins your {+cluster+}'s |fcv| on the next maintenance window starting on or after 
            the expiration date. If you already upgraded your {+cluster+}'s MongoDB version, |service| upgrades its |fcv| to match its 
            MongoDB version.
   
   .. tab:: {+atlas-admin-api+}
      :tabid: api

      To pin |fcv| for your {+cluster+} using the API, see 
      :oas-atlas-tag:`Pin FCV for One Cluster from One Project </pinFeatureCompatibilityVersion>`.
      
Unpin the |fcv| for Your Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To unpin the |fcv| for your {+cluster+}:

.. tabs::

   .. tab:: {+atlas-ui+}
      :tabid: ui
   
      .. procedure::
         :style: normal

         .. include:: /includes/nav/steps-db-deployments-page.rst

         .. step:: Click the :icon-fa5:`ellipsis-h` icon to the right of the {+database-deployment+}.

         .. step:: Select :guilabel:`Edit Pinned Feature Compatibility Version`. 
         
            A modal appears with the :guilabel:`Feature Compatibility Version` and the :guilabel:`Edit expiration date` field.

         .. step:: Click :guilabel:`Unpin` next to the :guilabel:`Feature Compatibility Version`. 

   .. tab:: {+atlas-admin-api+}
      :tabid: api

      To unpin |fcv| for your {+cluster+} using the API, see 
      :oas-atlas-tag:`Unpin FCV for One Cluster from One Project </unpinFeatureCompatibilityVersion>`.

Downgrade Your Cluster by One Major Version
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following limitations apply to downgrading your cluster's version:

- You can only downgrade if you pin the {+cluster+}'s |fcv| before upgrading.
- You can only downgrade your {+cluster+} to the major version that matches the pinned |fcv|.
- You can only perform this action if the pinned |fcv| is only one major version below 
  the current |fcv| and you don't have rapid release enabled.
- You can't downgrade to a version after it reaches end-of-life.

To downgrade your {+cluster+} by one major version: 

.. tabs::
   
   .. tab:: {+atlas-ui+}
      :tabid: ui
   
      .. procedure::
         :style: normal

         .. include:: /includes/nav/steps-db-deployments-page.rst

         .. step:: Click the :icon-fa5:`ellipsis-h` icon to the right of the {+database-deployment+}.

         .. step:: Select :guilabel:`Edit Configuration`.

         .. step:: In the :guilabel:`Additional Settings` section of the {+cluster+} form, select a major version from the dropdown next to :guilabel:`Select a Version` that matches your cluster's |fcv|.

            A warning banner appears indicating that your cluster's MongoDB version will be downgraded.

   .. tab:: {+atlas-admin-api+}
      :tabid: api

      To downgrade your {+cluster+} by one major version using the API, see 
      :oas-atlas-tag:`Modify One Cluster from One Project </unpinFeatureCompatibilityVersion>`.
      
Contact Support
~~~~~~~~~~~~~~~

If you have any questions regarding migration support beyond what is covered
in this documentation, or if you encounter an error during migration,
file a support ticket through the |service| user interface.

If you have any questions or need further assistance, reach out to our :ref:`support <atlas-support>` team. 
