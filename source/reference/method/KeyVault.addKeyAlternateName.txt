==============================
KeyVault.addKeyAlternateName()
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. versionadded:: 4.2

.. method:: KeyVault.addKeyAlternateName(UUID, keyAltName)

   Adds the ``keyAltName`` to the ``keyAltNames`` array of the data
   encryption key with ``UUID``.

   ``keyAltName`` *must* be unique among all keys in the key vault. The
   :method:`getKeyVault()` method automatically creates a 
   :ref:`unique index <index-type-unique>`  on the ``keyAltNames`` field 
   with a :ref:`partial index <index-type-partial>` filter for only 
   documents where ``keyAltNames`` exists.

   :method:`~KeyVault.addKeyAlternateName()` has the following syntax:

   .. code-block:: none

      keyVault = db.getMongo().getKeyVault()
      
      keyVault.addKeyAlternateName(
        UUID("<UUID string>"),
        "keyAlternateName"
      )

   :returns:

     Returns the previous version of the data encryption key document.
  
     Returns ``null`` if no data encryption key has the specified
     ``UUID()``.

Behavior
--------

Requires Configuring Client-Side Field Level Encryption on Database Connection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/csfle-requires-enabling-encryption.rst

Example
-------

The following example is intended for rapid evaluation of
client-side field level encryption. For more complete examples 
appropriate for development and production environments, see
:ref:`field-level-encryption-data-key-manage`.

.. include:: /includes/extracts/csfle-connection-boilerplate.rst

Retrieve the :method:`KeyVault <getKeyVault()>` object and use the
:method:`KeyVault.addKeyAlternateName()` method to add a new key
alternate name to the data encryption key with matching ``UUID``. The
specified key alternate name *must* be unique:

.. code-block:: javascript

   keyVault = encryptedClient.getKeyVault()
   keyVault.addKeyAlternateName(UUID("b4b41b33-5c97-412e-a02b-743498346079"),"Other-Data-Encryption-Key")

If successful, :method:`~KeyVault.addKeyAlternateName()` returns the
previous version of data encryption key document:

.. code-block:: json

   {
       "_id" : UUID("b4b41b33-5c97-412e-a02b-743498346079"),
       "keyMaterial" : BinData(0,"PXRsLOAYxhzTS/mFQAI8486da7BwZgqA91UI7NKz/T/AjB0uJZxTvhvmQQsKbCJYsWVS/cp5Rqy/FUX2zZwxJOJmI3rosPhzV0OI5y1cuXhAlLWlj03CnTcOSRzE/YIrsCjMB0/NyiZ7MRWUYzLAEQnE30d947XCiiHIb8a0kt2SD0so8vZvSuP2n0Vtz4NYqnzF0CkhZSWFa2e2yA=="),
       "creationDate" : ISODate("2019-08-12T21:21:30.569Z"),
       "updateDate" : ISODate("2019-08-12T21:21:30.569Z"),
       "status" : 0,
       "version" : NumberLong(0),
       "masterKey" : {
           "provider" : "local"
       },
       "keyAltNames" : [
       ]
   }

To view the current version of the data encryption key document, use
:method:`KeyVault.getKey()` specifying the ``_id`` of the returned
document *or* :method:`KeyVault.getKeyByAltName()` specifying one of the
``keyAltNames``.

.. seealso::

   :ref:`field-level-encryption-data-key-manage`
