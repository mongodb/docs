.. meta::
   :robots: noindex, nosnippet

.. _flutter-install:

=======================
Install the Flutter SDK
=======================

.. meta::
   :description: Install the Atlas Device SDK for Flutter to use in Flutter or Dart applications.
   :keywords: code example

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can use the Atlas Device SDK for Flutter in a Flutter project or in a
standalone Dart project. This guide provides instructions for installing the
SDK in both types of projects.

Prerequisites
-------------

To get started with the Atlas Device SDK for Flutter, you need to install
the following, depending on the type of app you are developing:

- For Flutter or Dart apps, install Flutter with Dart in your development environment.
  The Flutter installation includes Dart. To learn how, refer to the official
  `Flutter Installation Guide <https://docs.flutter.dev/get-started/install>`__.

- For standalone Dart apps, you can install Dart in your development
  environment without Flutter. To learn how, refer to the official
  `Dart Installation Guide <https://dart.dev/get-dart>`__.

The latest version of the Flutter SDK requires the following minimum versions:

- Flutter version 3.19.0 or later.
- Dart version 3.3.0 or later.

Supported Platforms
~~~~~~~~~~~~~~~~~~~

The Flutter SDK supports the following platforms:

- iOS
- Android
- macOS
- Windows running on 64-bit architecture
- Linux running on 64-bit architecture

.. important:: Unsupported Platforms

   The Flutter SDK does *not* support the following platforms:

   - Web
   - Windows running on ARM64 or 32-bit architectures
   - Linux running on ARM64 or 32-bit architectures

.. _flutter-install-steps:
.. _dart-install-steps:

Install the SDK
---------------

The Atlas Device SDK for Flutter has two packages available to install,
depending on whether you are developing a Flutter or Dart standalone app:

- ``realm``: The Flutter SDK package for use in Flutter applications.
- ``realm_dart``: The standalone Dart SDK package for use in Dart applications,
  such as CLI apps or running Dart in a server environment.

The standalone Dart package has the same usage as the Flutter package except
where otherwise noted.

.. tip:: Atlas Device SDK and Realm

   The Flutter SDK uses Realm Core database for device data persistence. When you install the Flutter SDK, the package names reflect Realm naming.

.. procedure::

   .. step:: Create a Project

      .. tabs::

         .. tab:: Flutter
            :tabid: flutter

            To create a Flutter project, run the following commands:

            .. code-block:: bash

               flutter create <app_name>
               cd <app_name>

            For more information, refer to Flutter's `Get Started Guide
            <https://docs.flutter.dev/get-started/test-drive?tab=terminal>`__.

         .. tab:: Standalone Dart
            :tabid: dart

            To create a Dart project, run the following commands:

            .. code-block:: bash

               dart create <app_name>
               cd <app_name>

            For more information, refer to Dart's `Get Started Guide
            <https://dart.dev/tutorials/server/get-started>`__ for standalone
            Dart command-line and server applications.

   .. step:: Add the SDK to the Project

      .. tabs::

         .. tab:: Flutter
            :tabid: flutter

            To add the Flutter SDK to your project, run the following command:

            .. code-block:: bash

               flutter pub add realm

            This downloads the `realm <https://pub.dev/packages/realm>`__
            package, and adds it to your project.

            In your ``pubspec.yaml`` file, you should see:

            .. code-block:: yaml
               :caption: pubspec.yaml

               dependencies:
                  realm: <latest_version>

            .. note:: Using Networking in your macOS App

               If you are developing with the Flutter SDK in the macOS App
               Sandbox and require network access, you must enable network
               entitlements in your app. By default, network requests are
               not allowed due to built-in macOS security settings.

               To use networking in your macOS app, you must change your app's
               macOS network entitlements. To learn how, refer to
               :ref:`flutter-macos-development`.

         .. tab:: Standalone Dart
            :tabid: dart

            To add the SDK to your project, run the following command:

            .. code-block:: bash

               dart pub add realm_dart

            This downloads the `realm_dart
            <https://pub.dev/packages/realm_dart>`__ package, and adds it to
            your project.

            In your ``pubspec.yaml`` file, you should see:

            .. code-block:: yaml
               :caption: pubspec.yaml

               dependencies:
                  realm_dart: <latest_version>

            After the package is added, run the following command to install it:

            .. code-block:: bash

               dart run realm_dart install

            This downloads and copies the required native binaries to the app
            directory.

   .. step:: Import the Package into Files

      To use the SDK in your app, import the package into any files where you
      will use it:

      .. tabs::

         .. tab:: Flutter
            :tabid: flutter

            .. code-block:: dart
               :caption: ExampleFile.dart

               import 'package:realm/realm.dart';

         .. tab:: Standalone Dart
            :tabid: dart

            .. code-block:: dart
               :caption: ExampleFile.dart

               import 'package:realm_dart/realm.dart';

.. _flutter-update-package:

Update the Package Version
--------------------------

To change the version of the SDK in your project, perform the following steps,
depending on whether you are using the ``realm`` or ``realm_dart`` package:

.. procedure::

   .. step:: Update the ``pubspec.yaml`` File

      Update the package version in your :file:`pubspec.yaml` file dependencies.

      .. tabs::

         .. tab:: Flutter
            :tabid: flutter

            .. code-block:: yaml
               :caption: pubspec.yaml

               dependencies:
                  realm: <updated_version>

         .. tab:: Dart Standalone
            :tabid: dart

            .. code-block:: yaml
               :caption: pubspec.yaml

               dependencies:
                  realm_dart: <updated_version>

   .. step:: Install the Updated Package

      .. tabs::

         .. tab:: Flutter
            :tabid: flutter

            Run the following command to install the updated version:

            .. code-block:: yaml
               :caption: pubspec.yaml

               dependencies:
                  realm: <updated_version>

         .. tab:: Dart Standalone
            :tabid: dart

            Run the following command to install the updated version:

            .. code-block:: bash

               dart pub upgrade realm_dart

            Then, run the following command to install the updated SDK's native
            binaries:

            .. code-block:: bash

               dart run realm_dart install

   .. step:: Regenerate Object Models

      .. tabs::

         .. tab:: Flutter
            :tabid: flutter

            .. code-block:: bash

               dart run realm generate

         .. tab:: Dart Standalone
            :tabid: dart

            .. code-block:: bash

               dart run realm_dart generate

      .. include:: /includes/flutter-v2-breaking-change.rst

Troubleshooting
~~~~~~~~~~~~~~~

If you have issues using the updated SDK version in your application, you can
delete the ``.realm`` database file created by the SDK, and restart the
application. Note that deleting the ``.realm`` file also deletes all data stored
in the database on that client.

For more information, refer to :ref:`flutter-delete-realm`.

.. _flutter-apple-privacy-manifest:

Apple Privacy Manifest
----------------------

.. versionadded:: 2.2.0

Apple requires any apps or third-party SDKs that use *required reasons APIs* to
provide a privacy manifest. The manifest contains details about the app's or SDK's
data collection and use practices, and it must be included when submitting new
apps or app updates to the Apple App Store. For more details about these
requirements, refer to
:apple:`Upcoming third-party SDK requirements <support/third-party-SDK-requirements/>`
on the Apple Developer website.

Starting in Flutter SDK version 2.2.0, the SDK ships with a privacy manifest for
``iOS`` and ``macOS`` environments, contained in the ``realm`` package. Both
privacy manifests contain Apple's required API disclosures and the reasons for
using those APIs.

You can view these privacy manifests in the SDK package or directly in the
``realm-dart`` GitHub repository:

- ``iOS``:
  `https://github.com/realm/realm-dart/blob/main/packages/realm/ios/Resources/PrivacyInfo.xcprivacy
  <https://github.com/realm/realm-dart/blob/main/packages/realm/ios/Resources/PrivacyInfo.xcprivacy>`__
- ``macOS``:
  `https://github.com/realm/realm-dart/blob/main/packages/realm/macos/Resources/PrivacyInfo.xcprivacy
  <https://github.com/realm/realm-dart/blob/main/packages/realm/macos/Resources/PrivacyInfo.xcprivacy>`__

The Flutter SDK does *not*:

- Include analytics code in builds for the App Store.
- Log into Atlas on its own behalf.

.. important:: Additional Disclosures May Be Required for App Services

   The Flutter SDK privacy manifest does *not* include disclosures for App
   Services APIs.

If your app uses any Atlas App Services functionality, such as user
authentication or Device Sync, you may need to provide additional disclosures
that detail your data collection and use practices when using these APIs.
For example, if your app
:ref:`initializes an App client <flutter-access-the-app-client>` to:

- :ref:`Call an Atlas Function <flutter-call-function>`
- :ref:`Authenticate and manage users <flutter-work-with-users>`
- :ref:`Open a synced database <flutter-open-synced-realm>`

For more information, refer to Apple's
:apple:`Privacy Manifest Files <documentation/bundleresources/privacy_manifest_files>`
documentation.
