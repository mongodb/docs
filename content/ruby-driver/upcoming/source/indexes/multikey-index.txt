.. _ruby-multikey-index:

================
Multikey Indexes
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: index, query, optimization, efficiency

Overview
--------

**Multikey indexes** are indexes that improve the performance of queries
on array-valued fields. You can create a multikey index on a collection
by using the ``create_one`` method and the same syntax that you use to create 
a :ref:`single field index <ruby-single-field-index>`.


When creating a multikey index, you must specify the following details:

- The fields on which to create the index

- The sort order for each field (ascending or descending)

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``movies`` collection in the
``sample_mflix`` database from the :atlas:`Atlas sample datasets
</sample-data>`. To access this collection from your {+language+} 
application, create a ``Mongo::Client`` object that connects to
an Atlas cluster and assign the following values to your ``database`` 
and ``collection`` variables: 

.. literalinclude:: /includes/indexes/single-field.rb
   :start-after: start-sample-data
   :end-before: end-sample-data
   :language: ruby
   :copyable:

To learn how to create a free MongoDB Atlas cluster and
load the sample datasets, see the :atlas:`Get Started with Atlas
</getting-started>` guide.

Create a Multikey Index
-----------------------

Use the ``create_one`` method to create a multikey index. The following example 
creates an index in ascending order on the ``cast`` field:

.. literalinclude:: /includes/indexes/multikey.rb
   :start-after: start-index-multikey
   :end-before: end-index-multikey
   :language: ruby
   :copyable:

Verify Index Creation
---------------------

You can verify that the index was created by listing the indexes in the 
collection. You should see an index for ``cast`` in the list, as shown 
in the following output:

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/multikey.rb
      :start-after: start-check-multikey-index
      :end-before: end-check-multikey-index
      :language: ruby

   .. output::
      :visible: true

      {"v": 2, "key": {"cast": 1}, "name": "cast_1"}

Example Query
-------------

The following is an example of a query that is covered by the index
created on the ``cast`` field:

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/multikey.rb
      :start-after: start-index-multikey-query
      :end-before: end-index-multikey-query
      :language: ruby

   .. output::
      :visible: false

      {"_id":...,"title":"Fanaa",...,"cast": ["Aamir Khan", "Kajol", "Rishi Kapoor", "Tabu"],...}

Additional Information
----------------------

To view runnable examples that demonstrate how to manage indexes, see
:ref:`ruby-indexes`.

To learn more about multikey indexes, see :manual:`Multikey
Indexes </core/indexes/index-types/index-multikey/>` in the {+mdb-server+} manual.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods discussed in this guide, see the
following API documentation:

- :ruby-api:`indexes <Collection.html#indexes-instance_method>`
- :ruby-api:`create_one <Index/View.html>`
- :ruby-api:`find <Collection.html#find-instance_method>` 
