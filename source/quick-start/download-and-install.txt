.. _rust-quick-start-download-and-install:

====================
Download and Install
====================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: cargo.toml, code example
   
.. procedure::
   :style: connected

   .. step:: Install Rust and Cargo

      Ensure you have Rust {+min-rust-version+} or later, and Cargo, the
      Rust package manager, installed in your development environment.

      For information about how to install Rust and Cargo, see
      the official Rust guide on `downloading and installing Rust <https://www.rust-lang.org/tools/install>`__.

   .. step:: Create a Project Directory

      In your shell, run the following command to create a 
      directory called ``rust_quickstart`` for this project:

      .. code-block:: bash

         cargo new rust_quickstart
      
      When this command successfully completes, you have a ``Cargo.toml`` 
      file and a ``src`` directory with a ``main.rs`` file in your
      ``rust_quickstart`` directory.

      Run the following command to navigate into the project 
      directory:

      .. code-block:: bash

         cd rust_quickstart

   .. step:: Install the Rust Driver

      Add the following crates to your project by including them in the
      dependencies list located in your project's ``Cargo.toml`` file:
      
      - ``mongodb``, the {+driver-short+} crate
      - ``serde``, the serialization crate
      - ``futures``, an asynchronous runtime crate that provides core abstractions

      .. tip::
   
         The ``mongodb`` crate resolves the ``bson`` crate, which is the primary
         MongoDB data representation crate. You can omit the ``bson``
         crate in your dependencies list.

      The driver supports both asynchronous and synchronous runtimes.
      To see example dependency lists for each runtime, select
      from the following :guilabel:`Asynchronous API` and
      :guilabel:`Synchronous API` tabs:

      .. tabs::

         .. tab:: Asynchronous API
            :tabid: asynchronous-api

            .. code-block:: bash

               [dependencies]
               serde = "1.0.188"
               futures = "0.3.28"
               tokio = {version = "1.32.0", features = ["full"]}
               
               [dependencies.mongodb]
               version = "{+version+}"
               features = ["tokio-runtime"]
            
            .. tip::

               The ``tokio`` asynchronous runtime is the driver's default runtime crate
               and does not require a feature flag. The preceding code example includes
               the ``"tokio-runtime"`` feature flag to specify the ``tokio`` runtime, but
               this flag is optional.

         .. tab:: Synchronous API
            :tabid: synchronous-api

            .. code-block:: bash
               
               [dependencies]
               serde = "1.0.188"

               [dependencies.mongodb]
               version = "{+version+}"
               features = ["tokio-sync"]

      To learn more about asynchronous and synchronous runtimes, see the :ref:`rust-runtimes`
      guide.

After you complete these steps, you have Rust and Cargo installed 
and a new Rust project with the necessary driver dependencies.

.. include:: /includes/quick-start/troubleshoot.rst
