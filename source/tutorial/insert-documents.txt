.. facet::
   :name: programming_language
   :values: c, csharp, go, java, javascript/typescript, kotlin, php, python, ruby, scala, shell

.. include:: /includes/java-sync-links.rst
.. include:: /includes/java-async-links.rst

.. _write-op-insert:

================
Insert Documents
================

.. default-domain:: mongodb

.. meta::
   :description: Examples of how to insert documents using MongoDB, including creating a collection upon first insert.
   :keywords: motor, java sync, java async, reactive streams, code example, node.js, compass

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1

.. include:: /includes/language-selector-instructions.rst

.. tabs-selector:: drivers

This page provides examples of insert operations in MongoDB.

You can insert documents in MongoDB by using the following
methods:

.. |atlas-ref| replace:: :ref:`insert-documents-atlas`

.. include:: /includes/fact-methods.rst

.. note:: Creating a Collection

   If the collection does not currently exist, insert operations will
   create the collection.

.. _insert-documents-atlas:

Insert Documents in the {+atlas+} UI
-------------------------------------------

To insert a document in the {+atlas+} UI, complete the following steps.
To learn more about working with documents in the {+atlas+} UI, see
:atlas:`Create, View, Update, and Delete Documents 
</atlas-ui/documents>`.

.. procedure:: 
   :style: normal

   .. include:: /includes/atlas-nav/steps-db-deployments-page.rst

   .. step:: Navigate to the collection

      a. For the cluster to which you want to add documents,
         click :guilabel:`Browse Collections`.
      #. In the left navigation pane, select the database.
      #. In the left navigation pane, select the collection.

   .. step:: Add the documents

      a. Click :guilabel:`Insert Document`.
      #. Click the :guilabel:`{}` icon, which opens the JSON view.
      #. Paste the document array into the text entry field. For
         example, the following entry creates four documents, each of
         which contain three fields:

         .. code-block::

            [
               { "prodId": 100, "price": 20, "quantity": 125 },
               { "prodId": 101, "price": 10, "quantity": 234 },
               { "prodId": 102, "price": 15, "quantity": 432 },
               { "prodId": 103, "price": 17, "quantity": 320 }
            ]

   .. step:: Click Insert.

      {+atlas+} adds the documents to the collection.

.. _write-op-insertOne:

Insert a Single Document
------------------------

.. tabs-drivers::

   .. tab::
      :tabid: shell

      :method:`db.collection.insertOne()` inserts a *single*
      :ref:`document<bson-document-format>` into a collection.

      The following example inserts a new document into the
      ``inventory`` collection. If the document does not specify
      an ``_id`` field, MongoDB adds the ``_id`` field with an
      ObjectId value to the new document. See
      :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: compass

      To insert a single document using :ref:`MongoDB Compass <compass-index>`:

      1. Navigate to the collection you wish to insert the document
         into:

         a. In the left-hand MongoDB Compass navigation pane, click
            the database to which your target collection belongs.

         b. From the database view, click the target collection name.

      2. Click the :guilabel:`Insert Document` button:

         .. figure:: /images/compass-insert-button.png
            :alt: Compass insert button

      3. For each field in the document, select the field type and
         fill in the field name and value. Add fields by clicking
         the last line number, then clicking
         :guilabel:`Add Field After ...`

         - For ``Object`` types, add nested fields by clicking the
           last field's number and selecting
           :guilabel:`Add Field After ...`

         - For ``Array`` types, add additional elements to the array
           by clicking the last element's line number and selecting
           :guilabel:`Add Array Element After ...`

      4. Once all fields have been filled out, click :guilabel:`Insert`.

      The following example inserts a new document into the
      ``test.inventory`` collection:

   .. tab::
      :tabid: c

      The following example inserts a new document into the
      ``inventory`` collection. If the document does not specify
      an ``_id`` field, the C driver adds the ``_id`` field
      with an ObjectId value to the new document. For more information, see
      :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: python

      :py:meth:`pymongo.collection.Collection.insert_one` inserts a
      *single* :ref:`document<bson-document-format>` into a
      collection.

      The following example inserts a new document into the
      ``inventory`` collection. If the document does not specify
      an ``_id`` field, the PyMongo driver adds the ``_id`` field
      with an ObjectId value to the new document. See
      :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: motor

      :py:meth:`motor.motor_asyncio.AsyncIOMotorCollection.insert_one` inserts a
      *single* :ref:`document<bson-document-format>` into a
      collection.

      The following example inserts a new document into the
      ``inventory`` collection. If the document does not specify
      an ``_id`` field, the Motor driver adds the ``_id`` field
      with an ObjectId value to the new document. See
      :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: java-sync

      com.mongodb.client.MongoCollection.insertOne_
      inserts a *single* :ref:`document<bson-document-format>` into
      a collection.

      The following example inserts a new document into the
      ``inventory`` collection. If the document does not specify
      an ``_id`` field, the driver adds the ``_id`` field with an
      ObjectId value to the new document. See
      :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: java-async

      `com.mongodb.reactivestreams.client.MongoCollection.insertOne <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#insertOne(TDocument)>`_
      inserts a *single* :ref:`document<bson-document-format>` into
      a collection with the `Java Reactive Streams
      Driver <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/>`_:

      .. code-block:: json

         { item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } }

      The following example inserts the document above into the
      ``inventory`` collection. If the document does not specify
      an ``_id`` field, the driver adds the ``_id`` field with an
      ObjectId value to the new document. See
      :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: kotlin-coroutine

      `MongoCollection.insertOne <{+java-api-docs+}/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/insert-one.html>`__
      inserts a *single* :ref:`document<bson-document-format>` into
      a collection.

      The following example inserts a new document into the
      ``inventory`` collection. If the document does not specify
      an ``_id`` field, the driver adds the ``_id`` field with an
      ObjectId value to the new document. See
      :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: nodejs

      :node-api:`Collection.insertOne() <Collection.html#insertOne>`
      inserts a *single* :ref:`document<bson-document-format>` into a
      collection.

      The following example inserts a new document into the
      ``inventory`` collection. If the document does not specify
      an ``_id`` field, the Node.js driver adds the ``_id`` field
      with an ObjectId value to the new document. See
      :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: php

      :phpmethod:`MongoDB\\Collection::insertOne() <phpmethod.MongoDB\\Collection::insertOne()>`
      inserts a *single* :ref:`document<bson-document-format>` into a
      collection.

      The following example inserts a new document into the
      ``inventory`` collection. If the document does not specify
      an ``_id`` field, the PHP driver adds the ``_id`` field
      with an ObjectId value to the new document. See
      :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: ruby

      :ruby-api:`Mongo::Collection#insert_one()<Collection.html#insert_one-instance_method>`
      inserts a *single* :ref:`document<bson-document-format>` into a
      collection.

      The following example inserts a new document into the
      ``inventory`` collection. If the document does not specify
      an ``_id`` field, the Ruby driver adds the ``_id`` field
      with an ObjectId value to the new document. See
      :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: scala

      :scala-api:`collection.insertOne()<insertOne(document:TResult,options:org.mongodb.scala.model.InsertOneOptions):org.mongodb.scala.SingleObservable[org.mongodb.scala.Completed]>`
      inserts a *single* :ref:`document<bson-document-format>` into a
      collection.

      The following example inserts a new document into the
      ``inventory`` collection. If the document does not specify
      an ``_id`` field, the Scala driver adds the ``_id`` field
      with an ObjectId value to the new document. See
      :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: csharp

      :csharp-api:`IMongoCollection.InsertOne() <M_MongoDB_Driver_IMongoCollection_1_InsertOne>`
      inserts a *single* :ref:`document<bson-document-format>` into a
      collection.

      The following example inserts a new document into the
      ``inventory`` collection. If the document does not specify
      an ``_id`` field, the C# driver adds the ``_id`` field
      with an ObjectId value to the new document. See
      :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: go

      :go-api:`Collection.InsertOne <mongo#Collection.InsertOne>`
      inserts a *single* :ref:`document<bson-document-format>` into a
      collection.
          
      The following example inserts a new document into the
      ``inventory`` collection. If the document does not specify
      an ``_id`` field, the driver adds the ``_id`` field
      with an ObjectId value to the new document. See
      :ref:`write-op-insert-behavior`.

.. include:: /includes/driver-examples/driver-example-insert-1.rst

.. tabs-drivers::

   .. tab::
      :tabid: shell

      :method:`~db.collection.insertOne()` returns a document that
      includes the newly inserted document's ``_id`` field value. For
      an example of a return document, see
      :ref:`db.collection.insertOne() reference<insertOne-examples>`.

   .. tab::
      :tabid: compass

      .. note::

         MongoDB Compass generates the ``_id`` field and its value
         automatically. The generated
         :term:`ObjectId` consists of a
         unique randomly generated hexadecimal value.

         You can change this value prior to inserting your document
         so long as it remains unique and is a valid ``ObjectId``.
         For more information on the ``_id`` field, see
         :ref:`_id Field <insert-id-field>`.

   .. tab::
      :tabid: c
      
      `mongoc_collection_insert_one <https://mongoc.org/libmongoc/current/mongoc_collection_insert_one.html>`__ 
      returns ``true`` if successful, or returns ``false`` and sets error if 
      there are invalid arguments or a server or network error.

   .. tab::
      :tabid: python

      :py:meth:`~pymongo.collection.Collection.insert_one` returns an
      instance of :py:class:`pymongo.results.InsertOneResult` whose
      ``inserted_id`` field contains the ``_id`` of the newly
      inserted document.

   .. tab::
      :tabid: motor

      :py:meth:`~motor.motor_asyncio.AsyncIOMotorCollection.insert_one` returns an
      instance of :py:class:`pymongo.results.InsertOneResult` whose
      ``inserted_id`` field contains the ``_id`` of the newly
      inserted document.

   .. tab::
      :tabid: java-sync

      `com.mongodb.client.MongoCollection.insertOne <{+java-api-docs+}/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#insertOne(TDocument)>`__ returns an
      instance of `InsertOneResult
      <{+java-api-docs+}/mongodb-driver-core/com/mongodb/client/result/InsertOneResult.html>`__.
      You can access the ``_id`` field of the inserted document by
      calling the `getInsertedId() <{+java-api-docs+}/mongodb-driver-core/com/mongodb/client/result/InsertOneResult.html#getInsertedId()>`__ method on the result.

   .. tab::
      :tabid: java-async

      `com.mongodb.reactivestreams.client.MongoCollection.insertOne <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#insertOne(TDocument)>`_
      returns a `Publisher <http://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Publisher.html>`_
      object. The ``Publisher`` inserts the document into a collection when subscribers request data.

   .. tab::
      :tabid: kotlin-coroutine

      `MongoCollection.insertOne <{+java-api-docs+}/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/insert-one.html>`__ returns an
      instance of `InsertOneResult
      <{+java-api-docs+}/mongodb-driver-core/com/mongodb/client/result/InsertOneResult.html>`__.
      You can access the ``_id`` field of the inserted document by
      accessing the ``insertedId`` field of the result.

   .. tab::
      :tabid: nodejs

      :node-api:`insertOne() <Collection.html#insertOne>` returns a
      promise that provides a ``result``.  The ``result.insertedId``
      promise contains the ``_id`` of the newly inserted document.

   .. tab::
      :tabid: php

      Upon successful insert, the
      :phpmethod:`insertOne() <phpmethod.MongoDB\\Collection::insertOne()>`
      method returns an instance of
      :phpclass:`MongoDB\\InsertOneResult <phpclass.MongoDB\\InsertOneResult>`
      whose
      :phpmethod:`getInsertedId() <phpmethod.MongoDB\\InsertOneResult::getInsertedId()>`
      method returns the ``_id`` of the newly inserted document.

   .. tab::
      :tabid: ruby

      Upon successful insert, the
      :ruby-api:`insert_one()<Collection.html#insert_one-instance_method>`
      method returns an instance of
      :ruby-api:`Mongo::Operation::Result<Operation/Result.html>`, whose
      ``inserted_id`` attribute contains the ``_id`` of the newly
      inserted document.

   .. tab::
      :tabid: scala

      Upon successful insert, the
      :scala-api:`collection.insertOne()<MongoCollection.html#insertOne(document:TResult,options:org.mongodb.scala.model.InsertOneOptions):org.mongodb.scala.SingleObservable[org.mongodb.scala.Completed]>`
      method returns an instance of
      :scala-api:`collection.insertOne().results();<InsertOneResult>` whose
      ``inserted_id`` attribute contains the ``_id`` of the newly
      inserted document.

   .. tab::
      :tabid: csharp

   .. tab::
      :tabid: go

      :go-api:`Collection.InsertOne <mongo#Collection.InsertOne>`
      function returns an instance of
      :go-api:`InsertOneResult<mongo#InsertOneResult>` whose
      ``InsertedID`` attribute contains the ``_id`` of the newly
      inserted document.

To retrieve the document that you just inserted, :ref:`query the collection
<document-query-filter>`:

.. include:: /includes/driver-examples/driver-example-insert-2.rst

.. _write-op-insertMany:

Insert Multiple Documents
-------------------------

.. tabs-drivers::

   .. tab::
      :tabid: shell

      :method:`db.collection.insertMany()` can insert *multiple*
      :ref:`documents <bson-document-format>` into a collection. Pass an
      array of documents to the method.

      The following example inserts three new documents into the
      ``inventory`` collection. If the documents do not specify an
      ``_id`` field, MongoDB adds the ``_id`` field with an ObjectId
      value to each document. See :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: compass


   .. tab::
      :tabid: c

      `mongoc_bulk_operation_insert_with_opts <https://mongoc.org/libmongoc/current/mongoc_bulk_operation_insert_with_opts.html>`__ 
      inserts *multiple* :ref:`documents <bson-document-format>` into a
      collection. You must pass an iterable of documents to the method.

      The following example inserts three new documents into the
      ``inventory`` collection. If the documents do not specify an
      ``_id`` field, the C driver adds the ``_id`` field with
      an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: python

      :py:meth:`pymongo.collection.Collection.insert_many` can insert
      *multiple* :ref:`documents <bson-document-format>` into a
      collection. Pass an iterable of documents to the method.

      The following example inserts three new documents into the
      ``inventory`` collection. If the documents do not specify an
      ``_id`` field, the PyMongo driver adds the ``_id`` field with
      an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: motor

      :py:meth:`motor.motor_asyncio.AsyncIOMotorCollection.insert_many`
      can insert *multiple* :ref:`documents <bson-document-format>`
      into a collection. Pass an iterable of documents to the method.

      The following example inserts three new documents into the
      ``inventory`` collection. If the documents do not specify an
      ``_id`` field, the PyMongo driver adds the ``_id`` field with
      an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: java-sync

      com.mongodb.client.MongoCollection.insertMany_
      can insert *multiple* :ref:`documents <bson-document-format>`
      into a collection. Pass a list of documents to the method.

      The following example inserts three new documents into the
      ``inventory`` collection. If the documents do not specify an
      ``_id`` field, the driver adds the ``_id`` field with
      an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: java-async

      `com.mongodb.reactivestreams.client.MongoCollection.html.insertMany
      <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#insertMany(java.util.List)>`_
      inserts the following documents with the `Java Reactive Streams
      Driver <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/>`_:

      .. code-block:: json

         { item: "journal", qty: 25, tags: ["blank", "red"], size: { h: 14, w: 21, uom: "cm" } }
         { item: "mat", qty: 85, tags: ["gray"], size: { h: 27.9, w: 35.5, uom: "cm" } }
         { item: "mousepad", qty: 25, tags: ["gel", "blue"], size: { h: 19, w: 22.85, uom: "cm" } }

      The following example inserts three new documents into the
      ``inventory`` collection. If the documents do not specify an
      ``_id`` field, the driver adds the ``_id`` field with
      an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: kotlin-coroutine

      `MongoCollection.insertMany <{+java-api-docs+}/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/insert-many.html>`__
      inserts *multiple* :ref:`documents <bson-document-format>`
      into a collection. Pass a list of documents as a parameter to the method.

      The following example inserts three new documents into the
      ``inventory`` collection. If the documents do not specify an
      ``_id`` field, the driver adds an ObjectId value to each document.
      See :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: nodejs

      :node-api:`Collection.insertMany() <Collection.html#insertMany>`
      can insert *multiple* :ref:`documents <bson-document-format>`
      into a collection. Pass an array of documents to the method.

      The following example inserts three new documents into the
      ``inventory`` collection. If the documents do not specify an
      ``_id`` field, the Node.js driver adds the ``_id`` field with
      an ObjectId value to each document. See
      :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: php

      :phpmethod:`MongoDB\\Collection::insertMany() <phpmethod.MongoDB\\Collection::insertMany()>`
      can insert *multiple* :ref:`documents <bson-document-format>` into a
      collection. Pass an array of documents to the method.

      The following example inserts three new documents into the
      ``inventory`` collection. If the documents do not specify an
      ``_id`` field, the PHP driver adds the ``_id`` field with
      an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: ruby

      :ruby-api:`Mongo::Collection#insert_many()<Collection.html#insert_many-instance_method>`
      can insert *multiple* :ref:`documents <bson-document-format>` into a
      collection. Pass an array of documents to the method.

      The following example inserts three new documents into the
      ``inventory`` collection. If the documents do not specify an
      ``_id`` field, the Ruby driver adds the ``_id`` field with
      an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: scala

      :scala-api:`collection.insertMany()<insertMany(documents:Seq[_<:TResult],options:org.mongodb.scala.model.InsertManyOptions):org.mongodb.scala.SingleObservable[org.mongodb.scala.Completed]>`
      can insert *multiple* :ref:`documents <bson-document-format>` into a
      collection.

      The following example inserts three new documents into the
      ``inventory`` collection. If the documents do not specify an
      ``_id`` field, the Scala driver adds the ``_id`` field with
      an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: csharp

      :csharp-api:`IMongoCollection.InsertMany()<M_MongoDB_Driver_IMongoCollection_1_InsertMany>`
      can insert *multiple* :ref:`documents <bson-document-format>`
      into a collection. Pass an enumerable collection of documents
      to the method.

      The following example inserts three new documents into the
      ``inventory`` collection. If the documents do not specify an
      ``_id`` field, the driver adds the ``_id`` field with
      an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

   .. tab::
      :tabid: go

      :go-api:`Collection.InsertMany <mongo#Collection.InsertMany>`
      can insert *multiple* :ref:`documents <bson-document-format>` into a
      collection.
          
      The following example inserts three new documents into the
      ``inventory`` collection. If the documents do not specify an
      ``_id`` field, the driver adds the ``_id`` field with
      an ObjectId value to each document. See :ref:`write-op-insert-behavior`.

.. include:: /includes/driver-examples/driver-example-insert-3.rst

.. tabs-drivers::

   .. tab::
      :tabid: shell

      :method:`~db.collection.insertMany()` returns a document that includes
      the newly inserted documents ``_id`` field values. See the
      :ref:`reference <insertMany-examples>` for an example.

      To retrieve the inserted documents, :ref:`query the collection
      <read-operations-query-document>`:

   .. tab::
      :tabid: c

      `mongoc_bulk_operation_insert_with_opts <https://mongoc.org/libmongoc/current/mongoc_bulk_operation_insert_with_opts.html>`__ 
      returns ``true`` on success, or ``false`` if passed invalid arguments. 

      To retrieve the inserted documents, use 
      `mongoc_collection_find_with_opts <https://mongoc.org/libmongoc/current/mongoc_collection_find_with_opts.html>`__ to 
      :ref:`query the collection <read-operations-query-document>`:

   .. tab::
      :tabid: python

      :py:meth:`~pymongo.collection.Collection.insert_many` returns
      an instance of :py:class:`pymongo.results.InsertManyResult`
      whose ``inserted_ids`` field is a list containing the ``_id``
      of each newly inserted document.

      To retrieve the inserted documents, :ref:`query the collection
      <read-operations-query-document>`:

   .. tab::
      :tabid: motor

      :py:meth:`~motor.motor_asyncio.AsyncIOMotorCollection.insert_many`
      returns an instance of :py:class:`pymongo.results.InsertManyResult`
      whose ``inserted_ids`` field is a list containing the ``_id``
      of each newly inserted document.

      To retrieve the inserted documents, :ref:`query the collection
      <read-operations-query-document>`:

   .. tab::
      :tabid: java-sync

      To retrieve the inserted documents, :ref:`query the collection
      <read-operations-query-document>`:

   .. tab::
      :tabid: java-async

      `com.mongodb.reactivestreams.client.MongoCollection.html.insertMany
      <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#insertMany(java.util.List)>`_
      returns a `Publisher <http://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Publisher.html>`_
      object. The ``Publisher`` inserts the document into a collection
      when subscribers request data.

      To retrieve the inserted documents, :ref:`query the collection
      <read-operations-query-document>`:

   .. tab::
      :tabid: kotlin-coroutine

      `MongoCollection.insertMany() <{+java-api-docs+}/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/insert-many.html>`_
      returns an ``InsertManyResult`` instance. The ``insertedIds``
      field of ``InsertManyResult`` contains the ``_id`` values of the
      inserted documents.

      To retrieve the inserted documents, :ref:`query the collection
      <read-operations-query-document>`:

   .. tab::
      :tabid: nodejs

      :node-api:`insertMany() <Collection.html#insertMany>` returns a
      promise that provides a ``result``. The ``result.insertedIds``
      field contains an array with the ``_id`` of each newly inserted
      document.

      To retrieve the inserted documents, :ref:`query the collection
      <read-operations-query-document>`:

   .. tab::
      :tabid: php

      Upon successful insert, the
      :phpmethod:`insertMany() <phpmethod.MongoDB\\Collection::insertMany()>`
      method
      returns an instance of
      :phpclass:`MongoDB\\InsertManyResult <phpclass.MongoDB\\InsertManyResult>`
      whose
      :phpmethod:`getInsertedIds() <phpmethod.MongoDB\\InsertManyResult::getInsertedIds()>`
      method returns the ``_id`` of each newly inserted document.

      To retrieve the inserted documents, :ref:`query the collection
      <read-operations-query-document>`:

   .. tab::
      :tabid: ruby

      Upon successful insert, the
      :ruby-api:`insert_many()<Collection.html#insert_many>` method
      returns an instance of
      :ruby-api:`Mongo::BulkWrite::Result<BulkWrite/Result.html>`
      whose ``inserted_ids`` attribute is a list containing the
      ``_id`` of each newly inserted document.

      To retrieve the inserted documents, :ref:`query the collection
      <read-operations-query-document>`:

   .. tab::
      :tabid: scala

      Upon successful insert, the
      :scala-api:`insertMany()<insertMany(documents:Seq[_<:TResult],options:org.mongodb.scala.model.InsertManyOptions):org.mongodb.scala.SingleObservable[org.mongodb.scala.Completed]>`
      method returns an `Observable <http://mongodb.github.io/mongo-scala-driver/2.1/reference/observables/>`_ with a type parameter indicating when
      the operation has completed or with either a
      ``com.mongodb.DuplicateKeyException`` or
      ``com.mongodb.MongoException``.

      To retrieve the inserted documents, :ref:`query the collection
      <read-operations-query-document>`:

   .. tab::
      :tabid: csharp

      To retrieve the inserted documents, :ref:`query the collection
      <read-operations-query-document>`:

   .. tab::
      :tabid: go

      To retrieve the inserted documents, :ref:`query the collection
      <read-operations-query-document>`:

.. include:: /includes/driver-examples/driver-example-query-7.rst

.. _write-op-insert-behavior:

Insert Behavior
---------------

Collection Creation
~~~~~~~~~~~~~~~~~~~

If the collection does not currently exist, insert operations will
create the collection.

.. _insert-id-field:

``_id`` Field
~~~~~~~~~~~~~

.. include:: /includes/fact-id-field.rst

Atomicity
~~~~~~~~~

All write operations in MongoDB are atomic on the level of a single
document. For more information on MongoDB and atomicity, see
:doc:`/core/write-operations-atomicity`

Write Acknowledgement
~~~~~~~~~~~~~~~~~~~~~

With write concerns, you can specify the level of acknowledgment
requested from MongoDB for write operations. For details, see
:doc:`/reference/write-concern`.

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. seealso::

         - :method:`db.collection.insertOne()`

         - :method:`db.collection.insertMany()`

         - :ref:`additional-inserts`

   .. tab::
      :tabid: c

      .. seealso::

        - `mongoc_bulk_operation_insert_with_opts <https://mongoc.org/libmongoc/current/mongoc_bulk_operation_insert_with_opts.html>`__ 

        - :ref:`additional-inserts`

   .. tab::
      :tabid: python

      .. seealso::

         - :py:meth:`pymongo.collection.Collection.insert_one`

         - :py:meth:`pymongo.collection.Collection.insert_many`

         - :ref:`additional-inserts`

   .. tab::
      :tabid: motor

      .. seealso::

         - :py:meth:`motor.motor_asyncio.AsyncIOMotorCollection.insert_one`

         - :py:meth:`motor.motor_asyncio.AsyncIOMotorCollection.insert_many`

         - :ref:`additional-inserts`

   .. tab::
      :tabid: java-sync

      .. seealso::

         - com.mongodb.client.MongoCollection.insertOne_

         - com.mongodb.client.MongoCollection.insertMany_

         - `Additional Java Synchronous Driver Write Examples`_

   .. tab::
      :tabid: java-async

      .. seealso::

         - `com.mongodb.reactivestreams.client.MongoCollection.insertOne <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#insertOne(TDocument)>`_

         - `com.mongodb.reactivestreams.client.MongoCollection.html.insertMany <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#insertMany(java.util.List)>`_

         - `Java Reactive Streams Driver Quick Tour <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/getting-started/quick-tour/>`_

   .. tab::
      :tabid: kotlin-coroutine

      .. seealso::

         - `MongoCollection.insertOne <{+java-api-docs+}/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/insert-one.html>`__

         - `MongoCollection.insertMany <{+java-api-docs+}/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/insert-many.html>`__

         - :driver:`Kotlin Driver Write Operation Examples
           </kotlin/coroutine/current/fundamentals/crud/write-operations/insert/>`

   .. tab::
      :tabid: nodejs

      .. seealso::

         - :node-api:`Collection.insertOne() <Collection.html#insertOne>`

         - :node-api:`Collection.insertMany() <Collection.html#insertMany>`

         - :ref:`additional-inserts`

   .. tab::
      :tabid: php

      .. seealso::

         - :phpmethod:`MongoDB\\Collection::insertOne() <phpmethod.MongoDB\\Collection::insertOne()>`

         - :phpmethod:`MongoDB\\Collection::insertMany() <phpmethod.MongoDB\\Collection::insertMany()>`

         - :ref:`additional-inserts`

   .. tab::
      :tabid: ruby

      .. seealso::

         - :ruby-api:`Mongo::Collection#insert_one()<Collection.html#insert_one-instance_method>`

         - :ruby-api:`Mongo::Collection#insert_many()<Collection.html#insert_many-instance_method>`

   .. tab::
      :tabid: scala

      .. seealso::

         - :scala-api:`collection.insertOne()<insertOne(document:TResult,options:org.mongodb.scala.model.InsertOneOptions):org.mongodb.scala.SingleObservable[org.mongodb.scala.Completed]>`

         - :scala-api:`collection.insertMany()<insertMany(documents:Seq[_<:TResult],options:org.mongodb.scala.model.InsertManyOptions):org.mongodb.scala.SingleObservable[org.mongodb.scala.Completed]>`

         - :ref:`additional-inserts`

   .. tab::
      :tabid: csharp

      .. seealso::

         - :csharp-api:`IMongoCollection.InsertOne() <M_MongoDB_Driver_IMongoCollection_1_InsertOne>`

         - :csharp-api:`IMongoCollection.InsertMany() <M_MongoDB_Driver_IMongoCollection_1_InsertMany>`

         - :ref:`additional-inserts`

   .. tab::
      :tabid: go

      .. seealso::

         - :go-api:`Collection.InsertOne <mongo#Collection.InsertOne>`

         - :go-api:`Collection.InsertMany <mongo#Collection.InsertMany>`

         - :ref:`additional-inserts`

.. toctree::
   :titlesonly:
   :hidden:

   Methods </reference/insert-methods>
