# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/mongo.txt:3
msgid "The ``mongo`` Shell"
msgstr ""

#: ../source/mongo.txt:14
msgid "Introduction"
msgstr ""

#: ../source/mongo.txt:16
msgid "The :binary:`~bin.mongo` shell is an interactive JavaScript interface to MongoDB. You can use the :binary:`~bin.mongo` shell to query and update data as well as perform administrative operations."
msgstr ""

#: ../source/mongo.txt:20
msgid "The :binary:`~bin.mongo` shell is a component of the `MongoDB distributions <http://www.mongodb.org/downloads>`_. Once you have :doc:`installed and have started MongoDB </installation>`, connect the :binary:`~bin.mongo` shell to your running MongoDB instance."
msgstr ""

#: ../source/mongo.txt:25
msgid "Most examples in the :doc:`MongoDB Manual </index>` use the :binary:`~bin.mongo` shell; however, many :ecosystem:`drivers </drivers>` provide similar interfaces to MongoDB."
msgstr ""

#: ../source/mongo.txt:30
msgid "Start the ``mongo`` Shell"
msgstr ""

#: ../source/mongo.txt:33
msgid "Ensure that MongoDB is running before attempting to start the :binary:`~bin.mongo` shell."
msgstr ""

#: ../source/mongo.txt:36
msgid "To start the :binary:`~bin.mongo` shell and connect to your :doc:`MongoDB </reference/program/mongod>` instance running on **localhost** with **default port**:"
msgstr ""

#: ../source/mongo.txt:40
msgid "At a prompt in a terminal window (or a command prompt for Windows), go to your ``<mongodb installation dir>``:"
msgstr ""

#: ../source/mongo.txt:47
msgid "Type ``./bin/mongo`` to start :binary:`~bin.mongo`:"
msgstr ""

#: ../source/mongo.txt:53
msgid "If you have added the ``<mongodb installation dir>/bin`` to the ``PATH`` environment variable, you can just type ``mongo`` instead of ``./bin/mongo``."
msgstr ""

#: ../source/mongo.txt:58
msgid "Options"
msgstr ""

#: ../source/mongo.txt:60
msgid "When you run :binary:`~bin.mongo` without any arguments, the :binary:`~bin.mongo` shell will attempt to connect to the MongoDB instance running on the ``localhost`` interface on port ``27017``. To specify a different host or port number, as well as other options, see :ref:`examples of starting up mongo <mongo-usage-examples>` and :doc:`mongo reference </reference/program/mongo>` which provides details on the available options."
msgstr ""

#: ../source/mongo.txt:69
msgid "``.mongorc.js`` File"
msgstr ""

#: ../source/mongo.txt:71
msgid "When starting, :binary:`~bin.mongo` checks the user's :envvar:`HOME` directory for a JavaScript file named :ref:`.mongorc.js <mongo-mongorc-file>`. If found, :binary:`~bin.mongo` interprets the content of :file:`.mongorc.js` before displaying the prompt for the first time. If you use the shell to evaluate a JavaScript file or expression, either by using the :option:`--eval <mongo --eval>` option on the command line or by specifying :ref:`a .js file to mongo <mongo-shell-file>`, :binary:`~bin.mongo` will read the ``.mongorc.js`` file *after* the JavaScript has finished processing. You can prevent ``.mongorc.js`` from being loaded by using the :option:`--norc <mongo --norc>` option."
msgstr ""

#: ../source/mongo.txt:86
msgid "Working with the ``mongo`` Shell"
msgstr ""

#: ../source/mongo.txt:88
msgid "To display the database you are using, type ``db``:"
msgstr ""

#: ../source/mongo.txt:94
msgid "The operation should return ``test``, which is the default database. To switch databases, issue the ``use <db>`` helper, as in the following example:"
msgstr ""

#: ../source/mongo.txt:102
msgid "To list the available databases, use the helper ``show dbs``. See also :method:`db.getSiblingDB()` method to access a different database from the current database without switching your current database context (i.e. ``db``)."
msgstr ""

#: ../source/mongo.txt:107
msgid "You can switch to non-existing databases. When you first store data in the database, such as by creating a collection, MongoDB creates the database. For example, the following creates both the database ``myNewDatabase`` and the :term:`collection` ``myCollection`` during the :method:`~db.collection.insertOne()` operation:"
msgstr ""

#: ../source/mongo.txt:118
msgid "The :method:`db.myCollection.insertOne() <db.collection.insertOne()>` is one of the :doc:`methods available in the mongo shell </reference/method>`."
msgstr ""

#: ../source/mongo.txt:121
msgid "``db`` refers to the current database."
msgstr ""

#: ../source/mongo.txt:123
msgid "``myCollection`` is the name of the collection."
msgstr ""

#: ../source/mongo.txt:125
msgid "If the :binary:`~bin.mongo` shell does not accept the name of a collection, you can use the alternative :method:`db.getCollection()` syntax. For instance, if a collection name contains a space or hyphen, starts with a number, or conflicts with a built-in function:"
msgstr ""

#: ../source/includes/fact-mongo-prompt-size.rst:1
msgid "The :binary:`~bin.mongo` shell prompt has a limit of 4095 codepoints for each line. If you enter a line with more than 4095 codepoints, the shell will truncate it."
msgstr ""

#: ../source/mongo.txt:138
msgid "For more documentation of basic MongoDB operations in the :binary:`~bin.mongo` shell, see:"
msgstr ""

#: ../source/mongo.txt:141
#: ../source/mongo.txt:242
msgid ":gettingstarted:`Getting Started Guide </shell>`"
msgstr ""

#: ../source/mongo.txt:142
msgid ":doc:`/tutorial/insert-documents`"
msgstr ""

#: ../source/mongo.txt:143
msgid ":doc:`/tutorial/query-documents`"
msgstr ""

#: ../source/mongo.txt:144
msgid ":doc:`/tutorial/update-documents`"
msgstr ""

#: ../source/mongo.txt:145
msgid ":doc:`/tutorial/remove-documents`"
msgstr ""

#: ../source/mongo.txt:146
msgid ":doc:`/reference/method`"
msgstr ""

#: ../source/mongo.txt:149
msgid "Format Printed Results"
msgstr ""

#: ../source/mongo.txt:151
msgid "The :method:`db.collection.find()` method returns a :term:`cursor` to the results; however, in the :binary:`~bin.mongo` shell, if the returned cursor is not assigned to a variable using the ``var`` keyword, then the cursor is automatically iterated up to 20 times to print up to the first 20 documents that match the query. The :binary:`~bin.mongo` shell will prompt ``Type it`` to iterate another 20 times."
msgstr ""

#: ../source/mongo.txt:158
msgid "To format the printed result, you can add the ``.pretty()`` to the operation, as in the following:"
msgstr ""

#: ../source/mongo.txt:165
msgid "In addition, you can use the following explicit print methods in the :binary:`~bin.mongo` shell:"
msgstr ""

#: ../source/mongo.txt:168
msgid "``print()`` to print without formatting"
msgstr ""

#: ../source/mongo.txt:170
msgid "``print(tojson(<obj>))`` to print with :term:`JSON` formatting and equivalent to ``printjson()``"
msgstr ""

#: ../source/mongo.txt:173
msgid "``printjson()`` to print with :term:`JSON` formatting and equivalent to ``print(tojson(<obj>))``"
msgstr ""

#: ../source/mongo.txt:176
msgid "For more information and examples on cursor handling in the :binary:`~bin.mongo` shell, see :doc:`/tutorial/iterate-a-cursor`. See also :ref:`mongo-shell-help-cursor` for list of cursor help in the :binary:`~bin.mongo` shell."
msgstr ""

#: ../source/mongo.txt:182
msgid "Multi-line Operations in the ``mongo`` Shell"
msgstr ""

#: ../source/mongo.txt:184
msgid "If you end a line with an open parenthesis (``'('``), an open brace (``'{'``), or an open bracket (``'['``), then the subsequent lines start with ellipsis (``\"...\"``) until you enter the corresponding closing parenthesis (``')'``), the closing brace (``'}'``) or the closing bracket (``']'``). The :binary:`~bin.mongo` shell waits for the closing parenthesis, closing brace, or the closing bracket before evaluating the code, as in the following example:"
msgstr ""

#: ../source/mongo.txt:199
msgid "You can exit the line continuation mode if you enter two blank lines, as in the following example:"
msgstr ""

#: ../source/mongo.txt:210
msgid "Tab Completion and Other Keyboard Shortcuts"
msgstr ""

#: ../source/mongo.txt:212
msgid "The :binary:`~bin.mongo` shell supports keyboard shortcuts. For example,"
msgstr ""

#: ../source/mongo.txt:214
msgid "Use the up/down arrow keys to scroll through command history. See :ref:`.dbshell <mongo-dbshell-file>` documentation for more information on the ``.dbshell`` file."
msgstr ""

#: ../source/mongo.txt:218
msgid "Use ``<Tab>`` to autocomplete or to list the completion possibilities, as in the following example which uses ``<Tab>`` to complete the method name starting with the letter ``'c'``:"
msgstr ""

#: ../source/mongo.txt:226
msgid "Because there are many collection methods starting with the letter ``'c'``, the ``<Tab>`` will list the various methods that start with ``'c'``."
msgstr ""

#: ../source/mongo.txt:230
msgid "For a full list of the shortcuts, see :ref:`Shell Keyboard Shortcuts <mongo-keyboard-shortcuts>`"
msgstr ""

#: ../source/mongo.txt:236
msgid "Exit the Shell"
msgstr ""

#: ../source/mongo.txt:238
msgid "To exit the shell, type ``quit()`` or use the ``<Ctrl-C>`` shortcut."
msgstr ""

#: ../source/mongo.txt:243
msgid ":binary:`~bin.mongo` Reference Page"
msgstr ""

