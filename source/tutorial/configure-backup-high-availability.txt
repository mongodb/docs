=================================================
Configure a Highly Available |mms| Backup Service
=================================================

.. default-domain:: mongodb

Overview
--------

The :ref:`Backup Daemon <backup-daemon>` maintains copies of the data
from your backed up :program:`mongod` instances and creates snapshots
used for restoring data. The file system that the Backup Daemon uses
must have sufficient disk space and write capacity to store the
backed up instances.

For replica sets, the local copy is equivalent to an additional
secondary replica set member. For sharded clusters the daemon
maintains a local copy of each shard as well as a copy of the
:term:`config database`.

To configure high availability

- scale your deployment horizontally by using multiple :ref:`backup
  daemons <backup-daemon>`, and

- provide :manual:`failover </core/replica-set-high-availability>` for
  your backing databases by deploying :term:`replica sets <replica set>`
  for each :doc:`backing instance </tutorial/prepare-backing-mongodb-instances>`.

.. _multiple-backup-daemons:

Multiple Backup Daemons
~~~~~~~~~~~~~~~~~~~~~~~

To increase your storage and to scale horizontally, you can run
multiple instances of the Backup Daemon. With multiple daemons, |mms|
binds each backed up replica set or shard to a particular Backup
Daemon. For example, if you run two Backup Daemons for a cluster that
has three shards, and if |mms| binds two shards to the first daemon,
then that daemon's server replicates only the data of those two
shards. The server running the second daemon replicates the data of
the remaining shard.

Multiple Backup Daemons allow for **manual** failover should one daemon
become unavailable. You can instruct |mms| to transfer the daemon's backup
responsibilities to another Backup Daemon. |mms| reconstructs the data on
the new daemon's server and binds the associated replica sets or shards to
the new daemon. See :doc:`/tutorial/move-jobs-to-new-backup-daemon`
for a description of this process.

|onprem| reconstructs the data using a snapshot and the oplog from the
:ref:`mms-backup-blockstore-database`.
Installing the Backup Daemon is part of the procedure to :doc:`/installation`. Select the procedure
specific to your operation system.

Replica Set for the Backing Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Deploy a :term:`replica set` rather than a standalone as the :doc:`backing
MongoDB instance </tutorial/prepare-backing-mongodb-instances>` for
backup. Replica sets have automatic :manual:`failover
</core/replica-set-high-availability>` if the :term:`primary` becomes
unavailable.

When deploying a replica set with members in multiple facilities, ensure
that a single facility has enough votes to elect a :term:`primary` if
needed. Choose the facility that hosts the core application systems. Place
a majority of voting members and all the members that can become primary
in this facility. Otherwise, network partitions could prevent the set from
being able to form a majority. For details on how replica sets elect
primaries, see :manual:`Replica Set Elections
</core/replica-set-elections>`.

To deploy a replica set, see :manual:`Deploy a Replica Set
</tutorial/deploy-replica-set>`.

Additional Information
----------------------

To move jobs from a lost Backup server to another Backup server, see
:doc:`/tutorial/move-jobs-to-new-backup-daemon`.

For information on making the |application| highly available, see
:doc:`/tutorial/configure-application-high-availability`.
