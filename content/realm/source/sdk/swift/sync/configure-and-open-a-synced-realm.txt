.. meta::
   :robots: noindex, nosnippet

.. _ios-configure-and-open-a-synced-realm:

===========================================
Configure & Open a Synced Realm - Swift SDK
===========================================

.. meta:: 
   :description: Open a synced database to share data across devices. Provide an app user, and specify whether to download changes before opening the database.
   :keywords: code example

.. facet::
  :name: genre
  :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _ios-synced-realm:

Synced Realms
-------------

You can configure a realm to automatically synchronize data between many devices
that each have their own local copy of the data. Synced realms use a different
configuration than local-only realms and require an Atlas App Services 
backend to handle the synchronization process. 

Applications can always create, modify, and delete synced realm objects locally,
even when offline. Whenever a network connection is available, the Realm SDK
opens a connection to an application server and syncs changes to and from other
clients. The :ref:`Atlas Device Sync protocol <sync-protocol>` and server-side
operational transforms guarantee that all fully synced instances of a realm see
exactly the same data, even if some changes occurred offline and/or were
received out of order.

.. tip:: Learn How to Configure and Use Sync
   
   For more information on Device Sync, including directions on how to
   set up sync in an App Services app, see :ref:`Sync Data <ios-realm-sync>`.

.. _swift-synced-realms-vs-non-synced-realms:

Synced Realms vs. Non-Synced Realms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Synced realms differ from non-synced local realm in a 
few ways:

- Synced realms attempt to sync changes with your backend App Services App,
  whereas non-synced realms do not.
- Synced realms can be accessed by authenticated users, while non-synced 
  realms have no concept of users or authentication.
- With synced realms, you can :ref:`specify the download behavior 
  <ios-specify-download-behavior>` to download updates before opening a 
  realm. However, requiring changes to download before opening 
  the realm requires the user to be online. Non-synced realms can always 
  be used offline.

You can copy data from a non-synced realm to a synced realm, 
and vice versa, but you cannot sync a non-synced realm. To convert a 
non-synced realm to a synced realm, you can follow the process 
described in :ref:`Migrate a Local-Only App to a Sync-Enabled App <realm-sync-local-to-sync>`. 

For more information about how to configure and open a non-synced realm, 
refer to: :ref:`ios-configure-and-open-a-realm`.

.. _ios-login-and-open-realm:
.. _ios-flexible-sync-open-realm:

Open a Synced Realm
-------------------

.. seealso::

   For information about opening a Partition-Based Sync realm, refer to 
   :ref:`ios-partition-based-sync-open-realm`.

The typical flow for opening a synced realm involves:

1. :ref:`Authenticating the user <ios-authenticate-users>`.
#. Creating a sync configuration.
#. Opening the user's synced realm with the configuration.

At authentication, we cache user credentials in a ``sync_metadata.realm`` 
file on device.

When you open a synced realm after authenticating, you can bypass the 
login flow and go directly to opening the synced realm, using the same 
sync configuration you already created.

With cached credentials, you can:

- Open a synced realm immediately with the data that is on the device.
  You can use this method offline or online.
- Open a synced realm after downloading changes from your App. 
  This requires the user to have an active internet connection.

When you use Flexible Sync, use the ``flexibleSyncConfiguration()``
to open a synced realm. 

.. include:: /includes/swift-concurrency-mainactor.rst

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.flex-sync-open-realm.swift
   :language: swift

.. important:: Flexible Sync Requires a Subscription

   If your app uses bidirectional, standard Device Sync, you can't use a 
   Flexible Sync realm until you add at least one subscription. To learn 
   how to add subscriptions, see: :ref:`<ios-sync-add-subscription>`.

   This does not apply to :ref:`Data Ingest <optimize-data-ingest>`.
   You cannot create a subscription for an ``AsymmetricObject``.

.. _ios-open-sync-realm-in-memory:

Open a Synced Realm In Memory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 10.46.0

You can open a synced database entirely in memory, which does not create 
a ``.realm`` file or its associated :ref:`auxiliary files
<ios-realm-file>`. Instead the SDK stores objects in memory while the
realm is open and discards them immediately when all instances are
closed.

To open a synced realm in memory, set the :swift-sdk:`inMemoryIdentifier
<Structs/Realm/Configuration.html#/s:10RealmSwift0A0V13ConfigurationV18inMemoryIdentifierSSSgvp>`
property of the realm configuration to a string identifier.

.. literalinclude:: /examples/generated/code/start/Sync.snippet.open-synced-realm-in-memory.swift
   :language: swift

.. _ios-open-synced-realm-as-different-sync-user:

Open a Synced Realm as a Different Sync User
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 10.23.0

If you want to open a synced realm as a different Sync user, you can use 
the :swift-sdk:`writeCopy(configuration: ) 
<Structs/Realm.html#/s:10RealmSwift0A0V9writeCopy13configurationyAC13ConfigurationV_tKF>` 
method to make a copy of the synced realm for use with the new user's 
sync configuration. The example below creates a copy of the synced realm, 
with all of its existing data, that you can use with a different sync 
configuration.

After you copy the realm for the new Sync user's configuration, you can 
open the copy as a synced realm for that user. 

.. include:: /includes/note-writecopy-same-type-sync-only.rst

.. include:: /includes/swift-concurrency-mainactor.rst

.. literalinclude:: /examples/generated/code/start/ConvertSyncLocalRealms.snippet.convert-sync-to-sync.swift
   :language: swift

.. _ios-open-sync-realm-actor-swift-concurrency:

Open a Synced Realm with Swift Concurrency Features
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can open a synced realm as an actor-isolated realm using Swift concurrency 
features:

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.actor-confined-synced-realm.swift
   :language: swift

For more information about working with actor-isolated realms, refer to 
:ref:`swift-actor-isolated-realm`.

.. _ios-specify-download-behavior:

Download Changes Before Open
----------------------------

.. versionadded:: 10.15.0

When you open a synced realm with the Swift SDK, you can pass the 
``downloadBeforeOpen`` parameter to specify whether to download the 
changeset from your App before opening the realm. 
This parameter accepts a case from the ``OpenBehavior`` enum:

- ``never``: Immediately open the realm on the device. Download changes 
  in the background when the user has internet, but don't block opening
  the realm.
- ``always``: Check for changes every time you open the realm.
  Requires the user to have an active internet connection.
- ``once``: Download data before opening a realm for the first time, but
  open it without downloading changes on subsequent opens. This lets you 
  populate a realm with initial data, but enables offline-first 
  functionality on subsequent opens.

.. include:: /includes/swift-concurrency-mainactor.rst

.. include:: /examples/generated/code/start/Sync.snippet.specify-download-behavior.swift.rst

.. _ios-open-a-synced-realm-offline:

Open a Synced Realm Offline
---------------------------

.. include:: /includes/offline-login.rst

You can only open a synced realm offline if you do not require your client 
app to ``always`` :ref:`download changes before opening the realm 
<ios-specify-download-behavior>`.

.. include:: /includes/swift-concurrency-mainactor.rst

.. literalinclude:: /examples/generated/code/start/Authenticate.snippet.offline-login.swift
   :language: swift
