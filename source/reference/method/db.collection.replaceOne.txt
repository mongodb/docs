==========================
db.collection.replaceOne()
==========================

.. default-domain:: mongodb

.. role:: red(strong)
   :class: text-danger

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.collection.replaceOne(filter, replacement, options)


   .. include:: /includes/fact-mongo-shell-method.rst


   .. versionadded:: 3.2

   Replaces a single document within the collection based on the filter.

   The :method:`~db.collection.replaceOne()` method has the following form:

   .. code-block:: javascript

      db.collection.replaceOne(
         <filter>,
         <replacement>,
         {
           upsert: <boolean>,
           writeConcern: <document>,
           collation: <document>
         }
      )

   The :method:`~db.collection.replaceOne()` method takes the following
   parameters:

   .. include:: /includes/apiargs/method-db.collection.replaceOne-param.rst

   :returns:

      A document containing:

      - A boolean ``acknowledged`` as ``true`` if the operation ran with
        :term:`write concern` or ``false`` if write concern was disabled

      - ``matchedCount`` containing the number of matched documents

      - ``modifiedCount`` containing the number of modified documents

      - ``upsertedId`` containing the ``_id`` for the upserted document

Behavior
--------

:method:`~db.collection.replaceOne()` replaces the first matching document in
the collection that matches the ``filter``, using the ``replacement``
document.

``upsert``
~~~~~~~~~~

If ``upsert: true`` and no documents match the ``filter``,
:method:`db.collection.replaceOne()` creates a new document based on
the ``replacement`` document.

If you specify ``upsert: true`` on a sharded collection, you must
include the full shard key in the ``filter``. For additional
:method:`db.collection.replaceOne()` behavior on a sharded collection,
see :ref:`replaceOne-sharded-collection`.

See :ref:`replaceOne-example-replace-with-upsert`.

.. _replaceOne-capped-collection:

Capped Collections
~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/capped-collection-immutable-document-size-replace.rst

.. _replaceOne-sharded-collection:

Sharded Collections
~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 4.2, :method:`db.collection.replaceOne()` attempts
to target a single shard, first by using the query filter. If the operation
cannot target a single shard by the query filter, it then attempts to target
by the replacement document. 

In earlier versions, the operation attempts to target using the
replacement document.

If replacing a document in a sharded collection, the replacement
document must include the shard key. Additional requirements apply for
:ref:`replaceOne-sharded-upsert` and
:ref:`replaceOne-shard-key-modification`.

.. _replaceOne-sharded-upsert:

``upsert`` on a Sharded Collection
``````````````````````````````````

Starting in MongoDB 4.2, for a :method:`db.collection.replaceOne()`
operation that includes ``upsert: true`` and is on a sharded
collection, you must include the full shard key in the ``filter``.

.. _replaceOne-shard-key-modification:

Shard Key Modification
``````````````````````

.. include:: /includes/limits-sharding-shardkey-document-immutable.rst

To use :method:`db.collection.replaceOne()` to update the shard key:

.. include:: /includes/shard-key-modification-requirements.rst


Transactions
~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-supported-operation.rst

If the operation results in an upsert, the collection must already exist.

.. include:: /includes/extracts/transactions-operations-write-concern.rst

.. include:: /includes/extracts/transactions-usage.rst

.. |operation| replace:: :method:`db.collection.replaceOne()`

Examples
--------

.. _replaceOne-example-update:

Replace
~~~~~~~

The ``restaurant`` collection contains the  following documents:

.. code-block:: javascript

   { "_id" : 1, "name" : "Central Perk Cafe", "Borough" : "Manhattan" },
   { "_id" : 2, "name" : "Rock A Feller Bar and Grill", "Borough" : "Queens", "violations" : 2 },
   { "_id" : 3, "name" : "Empire State Pub", "Borough" : "Brooklyn", "violations" : 0 }

The following operation replaces a single document where
``name: "Central Perk Cafe"``:

.. code-block:: javascript

   try {
      db.restaurant.replaceOne(
         { "name" : "Central Perk Cafe" },
         { "name" : "Central Pork Cafe", "Borough" : "Manhattan" }
      );
   } catch (e){
      print(e);
   }

The operation returns:

.. code-block:: javascript

   { "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

If no matches were found, the operation instead returns:

.. code-block:: javascript

   { "acknowledged" : true, "matchedCount" : 0, "modifiedCount" : 0 }

Setting ``upsert: true`` would insert the document if no match was found. See
:ref:`replaceOne-example-replace-with-upsert`

.. _replaceOne-example-replace-with-upsert:

Replace with Upsert
~~~~~~~~~~~~~~~~~~~

The ``restaurant`` collection contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "name" : "Central Perk Cafe", "Borough" : "Manhattan",  "violations" : 3 },
   { "_id" : 2, "name" : "Rock A Feller Bar and Grill", "Borough" : "Queens", "violations" : 2 },
   { "_id" : 3, "name" : "Empire State Pub", "Borough" : "Brooklyn", "violations" : 0 }


The following operation attempts to replace the document with
``name : "Pizza Rat's Pizzaria"``, with ``upsert : true``:

.. code-block:: javascript

   try {
      db.restaurant.replaceOne(
         { "name" : "Pizza Rat's Pizzaria" },
         { "_id": 4, "name" : "Pizza Rat's Pizzaria", "Borough" : "Manhattan", "violations" : 8 },
         { upsert: true }
      );
   } catch (e){
      print(e);
   }

Since ``upsert : true`` the document is inserted based on the
``replacement`` document. The operation returns:

.. code-block:: javascript

   {
      "acknowledged" : true,
      "matchedCount" : 0,
      "modifiedCount" : 0,
      "upsertedId" : 4
   }

The collection now contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "name" : "Central Perk Cafe", "Borough" : "Manhattan", "violations" : 3 },
   { "_id" : 2, "name" : "Rock A Feller Bar and Grill", "Borough" : "Queens", "violations" : 2 },
   { "_id" : 3, "name" : "Empire State Pub", "Borough" : "Brooklyn", "violations" : 0 },
   { "_id" : 4, "name" : "Pizza Rat's Pizzaria", "Borough" : "Manhattan", "violations" : 8 }

.. _replaceOne-example-replace-with-write-concern:

Replace with Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~

Given a three member replica set, the following operation specifies a
``w`` of ``majority`` and ``wtimeout`` of ``100``:

.. code-block:: javascript

   try {
      db.restaurant.replaceOne(
          { "name" : "Pizza Rat's Pizzaria" },
          { "name" : "Pizza Rat's Pub", "Borough" : "Manhattan", "violations" : 3 },
          { w: "majority", wtimeout: 100 }
      );
   } catch (e) {
      print(e);
   }

If the acknowledgement takes longer than the ``wtimeout`` limit, the following
exception is thrown:

.. code-block:: javascript

   WriteConcernError({
      "code" : 64,
      "errInfo" : {
         "wtimeout" : true
      },
      "errmsg" : "waiting for replication timed out"
   })

Specify Collation
~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/collation-versionadded.rst

A collection ``myColl`` has the following documents:

.. code-block:: javascript

   { _id: 1, category: "café", status: "A" }
   { _id: 2, category: "cafe", status: "a" }
   { _id: 3, category: "cafE", status: "a" }

The following operation includes the :ref:`collation <collation>`
option:

.. code-block:: javascript

   db.myColl.replaceOne(
      { category: "cafe", status: "a" },
      { category: "cafÉ", status: "Replaced" },
      { collation: { locale: "fr", strength: 1 } }

   );


