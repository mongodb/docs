====================
planCacheListFilters
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: planCacheListFilters

   Lists the :ref:`index filters <index-filters>` associated with
   :term:`query shapes <query shape>` for a collection.

   The command has the following syntax:

   .. code-block:: javascript

      db.runCommand( { planCacheListFilters: <collection> } )

   The :dbcommand:`planCacheListFilters` command has the following field:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``planCacheListFilters``
   
        - string
   
        - The name of the collection.
          
          
   


   :returns: Document listing the index filters. See
      :ref:`planCacheListFilters-output`.

Required Access
---------------

A user must have access that includes the
:authaction:`planCacheIndexFilter` action.

.. _planCacheListFilters-output:

Output
------

The :dbcommand:`planCacheListFilters` command returns the document with
the following form:

.. code-block:: none

   {
      "filters" : [
         {
            "query" : <query>
            "sort" : <sort>,
            "projection" : <projection>,
            "indexes" : [
               <index1>,
               ...
            ]
         },
         ...
      ],
      "ok" : 1
   }

.. data:: planCacheListFilters.filters

   The array of documents that contain the index filter information.

   Each document contains the following fields:

   .. data:: planCacheListFilters.filters.query

      The query predicate associated with this filter. Although the
      :data:`~planCacheListFilters.filters.query` shows the specific
      values used to create the index filter, the values in the
      predicate are insignificant; i.e. query predicates cover similar
      queries that differ only in the values.

      For instance, a :data:`~planCacheListFilters.filters.query`
      predicate of ``{ "type": "electronics", "status" : "A" }`` covers
      the following query predicates:

      .. code-block:: javascript

         { type: "food", status: "A" }
         { type: "utensil", status: "D" }

      Together with the :data:`~planCacheListFilters.filters.sort` and
      the :data:`~planCacheListFilters.filters.projection`, the
      :data:`~planCacheListFilters.filters.query` make up the
      :term:`query shape` for the specified index filter.

   .. data:: planCacheListFilters.filters.sort

      The sort associated with this filter. Can be an empty document.

      Together with the :data:`~planCacheListFilters.filters.query` and
      the :data:`~planCacheListFilters.filters.projection`, the
      :data:`~planCacheListFilters.filters.sort` make up the
      :term:`query shape` for the specified index filter.

   .. data:: planCacheListFilters.filters.projection

      The projection associated with this filter. Can be an empty
      document.

      Together with the :data:`~planCacheListFilters.filters.query` and
      the :data:`~planCacheListFilters.filters.sort`, the
      :data:`~planCacheListFilters.filters.projection` make up the
      :term:`query shape` for the specified index filter.

   .. data:: planCacheListFilters.filters.indexes

      The array of indexes for this :term:`query shape`. To choose the
      optimal query plan, the query optimizer evaluates only the listed
      :data:`~planCacheListFilters.hints.indexes` *and* the collection
      scan.

.. data:: planCacheListFilters.ok

   The status of the command.

.. seealso::
   :dbcommand:`planCacheClearFilters`,
   :dbcommand:`planCacheSetFilter`
