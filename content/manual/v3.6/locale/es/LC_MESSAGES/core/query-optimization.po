# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2013-12-16 23:46+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/query-optimization.txt:5
msgid "Query Optimization"
msgstr ""

#: ../source/core/query-optimization.txt:15
msgid ""
"Indexes improve the efficiency of read operations by reducing the amount "
"of data that query operations need to process. This simplifies the work "
"associated with fulfilling queries within MongoDB."
msgstr ""

#: ../source/core/query-optimization.txt:20
msgid "Create an Index to Support Read Operations"
msgstr ""

#: ../source/core/query-optimization.txt:22
msgid ""
"If your application queries a collection on a particular field or set of "
"fields, then an index on the queried field or a :doc:`compound index "
"</core/index-compound>` on the set of fields can prevent the query from "
"scanning the whole collection to find and return the query results. For "
"more information about indexes, see the :doc:`complete documentation of "
"indexes in MongoDB </indexes>`."
msgstr ""

#: ../source/core/query-optimization.txt:37
msgid ""
"To improve the performance of this query, add an ascending or a "
"descending index to the ``inventory`` collection on the ``type`` field. "
"[#ensureIndexOrder]_ In the :binary:`~bin.mongo` shell, you can create "
"indexes using the :method:`db.collection.createIndex()` method:"
msgstr ""

#: ../source/core/query-optimization.txt:47
msgid ""
"This index can prevent the above query on ``type`` from scanning the "
"whole collection to return the results."
msgstr ""

#: ../source/core/query-optimization.txt:50
msgid ""
"To analyze the performance of the query with an index, see "
":doc:`/tutorial/analyze-query-plan`."
msgstr ""

#: ../source/core/query-optimization.txt:53
msgid ""
"In addition to optimizing read operations, indexes can support sort "
"operations and allow for a more efficient storage utilization. See "
":method:`db.collection.createIndex()` and :doc:`/indexes` for more "
"information about index creation."
msgstr ""

#: ../source/core/query-optimization.txt:60
msgid ""
"For single-field indexes, the selection between ascending and descending "
"order is immaterial. For compound indexes, the selection is important. "
"See :ref:`indexing order <index-ascending-and-descending>` for more "
"details."
msgstr ""

#: ../source/core/query-optimization.txt:68
msgid "Query Selectivity"
msgstr ""

#: ../source/core/query-optimization.txt:70
msgid ""
"Query selectivity refers to how well the query predicate excludes or "
"filters out documents in a collection. Query selectivity can determine "
"whether or not queries can use indexes effectively or even use indexes at"
" all."
msgstr ""

#: ../source/core/query-optimization.txt:75
msgid ""
"More selective queries match a smaller percentage of documents. For "
"instance, an equality match on the unique ``_id`` field is highly "
"selective as it can match at most one document."
msgstr ""

#: ../source/core/query-optimization.txt:79
msgid ""
"Less selective queries match a larger percentage of documents. Less "
"selective queries cannot use indexes effectively or even at all."
msgstr ""

#: ../source/includes/extracts/inequality_operators_selectivity.rst:2
msgid ""
"For instance, the inequality operators :query:`$nin` and :query:`$ne` are"
" *not* very selective since they often match a large portion of the "
"index. As a result, in many cases, a :query:`$nin` or :query:`$ne` query "
"with an index may perform no better than a :query:`$nin` or :query:`$ne` "
"query that must scan all documents in a collection."
msgstr ""

#: ../source/core/query-optimization.txt:84
msgid ""
"The selectivity of :query:`regular expressions <$regex>` depends on the "
"expressions themselves. For details, see :ref:`regular expression and "
"index use <regex-index-use>`."
msgstr ""

#: ../source/core/query-optimization.txt:93
msgid "Covered Query"
msgstr ""

#: ../source/core/query-optimization.txt:95
msgid ""
"A covered query is a query that can be satisfied entirely using an index "
"and does not have to examine any documents. An index :ref:`covers "
"<indexes-covered-queries>` a query when both of the following apply:"
msgstr ""

#: ../source/core/query-optimization.txt:100
msgid ""
"all the fields in the :ref:`query <read-operations-query-document>` are "
"part of an index, **and**"
msgstr ""

#: ../source/core/query-optimization.txt:103
msgid "all the fields returned in the results are in the same index."
msgstr ""

#: ../source/core/query-optimization.txt:105
msgid ""
"For example, a collection ``inventory`` has the following index on the "
"``type`` and ``item`` fields:"
msgstr ""

#: ../source/core/query-optimization.txt:112
msgid ""
"This index will cover the following operation which queries on the "
"``type`` and ``item`` fields and returns only the ``item`` field:"
msgstr ""

#: ../source/core/query-optimization.txt:122
msgid ""
"For the specified index to cover the query, the projection document must "
"explicitly specify ``_id: 0`` to exclude the ``_id`` field from the "
"result since the index does not include the ``_id`` field."
msgstr ""

#: ../source/core/query-optimization.txt:126
msgid ""
"An index can cover a query on fields within embedded documents. [#index-"
"embedded-document-fields]_"
msgstr ""

#: ../source/core/query-optimization.txt:130
msgid ""
"For example, consider a collection ``userdata`` with documents of the "
"following form:"
msgstr ""

#: ../source/core/query-optimization.txt:137
msgid "The collection has the following index:"
msgstr ""

#: ../source/core/query-optimization.txt:143
msgid "The ``{ \"user.login\": 1 }`` index will cover the query below:"
msgstr ""

#: ../source/core/query-optimization.txt:149
msgid "To index fields in embedded documents, use :term:`dot notation`."
msgstr ""

#: ../source/core/query-optimization.txt:155
msgid "Multikey Covering"
msgstr ""

#: ../source/core/query-optimization.txt:157
msgid ""
"Starting in 3.6, multikey indexes can cover queries over the non-array "
"fields if the index tracks which field or fields cause the index to be "
"multikey. Multikey indexes created in MongoDB 3.4 or later on storage "
"engines other than MMAPv1 track this data."
msgstr ""

#: ../source/includes/fact-multikey-index-covered-query.rst:1
msgid ""
":ref:`Multikey indexes <index-type-multikey>` cannot cover queries over "
"array field(s)."
msgstr ""

#: ../source/core/query-optimization.txt:166
msgid "Performance"
msgstr ""

#: ../source/core/query-optimization.txt:168
msgid ""
"Because the index contains all fields required by the query, MongoDB can "
"both match the :ref:`query conditions <read-operations-query-document>` "
"and return the results using only the index."
msgstr ""

#: ../source/core/query-optimization.txt:172
msgid ""
"Querying *only* the index can be much faster than querying documents "
"outside of the index. Index keys are typically smaller than the documents"
" they catalog, and indexes are typically available in RAM or located "
"sequentially on disk."
msgstr ""

#: ../source/core/query-optimization.txt:178
msgid "Limitations"
msgstr ""

#: ../source/core/query-optimization.txt:181
msgid "Restrictions on Indexed Fields"
msgstr ""

#: ../source/includes/fact-geospatial-index-covered-query.rst:1
msgid ""
":ref:`Geospatial indexes <index-feature-geospatial>` cannot :ref:`cover a"
" query <covered-queries>`."
msgstr ""

#: ../source/core/query-optimization.txt:187
msgid ":ref:`multikey-covering`"
msgstr ""

#: ../source/core/query-optimization.txt:192
msgid "Restrictions on Sharded Collection"
msgstr ""

#: ../source/includes/extracts/fact-covered-query-sharded-collection-cover.rst:7
msgid ""
"Starting in MongoDB 3.0, an index cannot cover a query on a "
":term:`sharded <shard>` collection when run against a "
":binary:`~bin.mongos` if the index does not contain the shard key, with "
"the following exception for the ``_id`` index: If a query on a sharded "
"collection only specifies a condition on the ``_id`` field and returns "
"only the ``_id`` field, the ``_id`` index can cover the query when run "
"against a :binary:`~bin.mongos` even if the ``_id`` field is not the "
"shard key."
msgstr ""

#: ../source/includes/extracts/fact-covered-query-sharded-collection-cover.rst:16
msgid ""
"In previous versions, an index cannot :ref:`cover <covered-queries>` a "
"query on a :term:`sharded <shard>` collection when run against a "
":binary:`~bin.mongos`."
msgstr ""

#: ../source/core/query-optimization.txt:197
msgid "``explain``"
msgstr ""

#: ../source/core/query-optimization.txt:199
msgid ""
"To determine whether a query is a covered query, use the "
":method:`db.collection.explain()` or the :method:`~cursor.explain()` "
"method and review the :ref:`results <explain-output-covered-queries>`."
msgstr ""

#: ../source/includes/fact-explain-collection-method.rst:1
msgid ""
":method:`db.collection.explain()` provides information on the execution "
"of other operations, such as :method:`db.collection.update()`. See "
":method:`db.collection.explain()` for details."
msgstr ""

#: ../source/core/query-optimization.txt:205
msgid "For more information see :ref:`indexes-measuring-use`."
msgstr ""

# c57bce8efbc142028e71e9afa6e6e113
#~ msgid ""
#~ "If your application queries a collection"
#~ " on a particular field or fields, "
#~ "then an index on the queried field"
#~ " or fields can prevent the query "
#~ "from scanning the whole collection to"
#~ " find and return the query results."
#~ " For more information about indexes, "
#~ "see the :doc:`complete documentation of "
#~ "indexes in MongoDB</core/indexes>`."
#~ msgstr ""

# cb8f16c0bd674f48be7001a5c3bdafdb
# d6ad0c964bf74bc8a5de7226f1779866
#~ msgid "Example"
#~ msgstr ""

# ad6bc9b39219458f84c79869d7a6cb51
#~ msgid ""
#~ "To improve the performance of this "
#~ "query, add an ascending, or a "
#~ "descending, index to the ``inventory`` "
#~ "collection on the ``type`` field. "
#~ "[#ensureIndexOrder]_ In the :program:`mongo` "
#~ "shell, you can create indexes using "
#~ "the :method:`db.collection.ensureIndex()` method:"
#~ msgstr ""

# 45d26ee2d3694438b8daa57ec83d4a18
#~ msgid ""
#~ "In addition to optimizing read "
#~ "operations, indexes can support sort "
#~ "operations and allow for a more "
#~ "efficient storage utilization. See "
#~ ":method:`db.collection.ensureIndex()` and "
#~ ":doc:`/administration/indexes` for more information"
#~ " about index creation."
#~ msgstr ""

# 129784febd644d3aa755e6f58ec68a16
#~ msgid ""
#~ "Some query operations are not selective."
#~ " These operations cannot use indexes "
#~ "effectively or cannot use indexes at "
#~ "all."
#~ msgstr ""

# c0b7a685d17b41ba974c73ddc026c8f3
#~ msgid ""
#~ "The inequality operators :query:`$nin` and "
#~ ":query:`$ne` are not very selective, as"
#~ " they often match a large portion "
#~ "of the index. As a result, in "
#~ "most cases, a :query:`$nin` or "
#~ ":query:`$ne` query with an index may "
#~ "perform no better than a :query:`$nin`"
#~ " or :query:`$ne` query that must scan"
#~ " all documents in a collection."
#~ msgstr ""

# dd805202f00342f2b826d491e69c23ac
#~ msgid ""
#~ "Queries that specify regular expressions, "
#~ "with inline JavaScript regular expressions "
#~ "or :query:`$regex` operator expressions, "
#~ "cannot use an index with one "
#~ "exception. Queries that specify regular "
#~ "expression *with anchors* at the "
#~ "beginning of a string *can* use an"
#~ " index."
#~ msgstr ""

# e3eb39c5fbe249fe9e0700480d48f463
#~ msgid "Covering a Query"
#~ msgstr ""

# ab593783d7354bc9b419d8c35012ac07
#~ msgid ""
#~ "An index :ref:`covers <indexes-covered-"
#~ "queries>` a query, a *covered query*,"
#~ " when:"
#~ msgstr ""

# b9fba62caa744257b5d90481d43b0830
#~ msgid ""
#~ "all the fields in the :ref:`query "
#~ "<read-operations-query-document>` are part"
#~ " of that index, **and**"
#~ msgstr ""

# e2b54164a7ec41028dda151ba64c8767
#~ msgid ""
#~ "all the fields returned in the "
#~ "documents that match the query are "
#~ "in the same index."
#~ msgstr ""

# 0995ffc79d31473b8a4de626cf64cab2
#~ msgid ""
#~ "For these queries, MongoDB does not "
#~ "need to inspect documents outside of "
#~ "the index. This is often more "
#~ "efficient than inspecting entire documents."
#~ msgstr ""

# 37774bbc79714339af9ec0a7f20764a5
#~ msgid ""
#~ "Given a collection ``inventory`` with "
#~ "the following index on the ``type`` "
#~ "and ``item`` fields:"
#~ msgstr ""

# 4a906f1b30164ebbbba38313e2c5b11d
#~ msgid ""
#~ "This index will cover the following "
#~ "query on the ``type`` and ``item`` "
#~ "fields, which returns only the ``item``"
#~ " field:"
#~ msgstr ""

# a6dfa8bdfb884a35bcae2890f65b7b72
#~ msgid ""
#~ "However, the index will **not** cover"
#~ " the following query, which returns "
#~ "the ``item`` field **and** the ``_id``"
#~ " field:"
#~ msgstr ""

# b04fd3fdffe1417d818b82e0eb8ab98f
#~ msgid ""
#~ "See :ref:`indexes-covered-queries` for "
#~ "more information on the behavior and "
#~ "use of covered queries."
#~ msgstr ""

