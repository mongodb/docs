# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/read-concern-linearizable.txt:9
msgid "Read Concern ``\"linearizable\"``"
msgstr ""

#: ../source/reference/read-concern-linearizable.txt:13
msgid "The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results."
msgstr ""

#: ../source/reference/read-concern-linearizable.txt:18
msgid "If a majority of your replica set members crash and restart after the read operation, documents returned by the read operation are durable if :rsconf:`writeConcernMajorityJournalDefault` is set to the default state of ``true``."
msgstr ""

#: ../source/includes/extracts/no-journaling-rollback.rst:2
msgid "With :rsconf:`writeConcernMajorityJournalDefault` set to ``false``, MongoDB does not wait for :writeconcern:`w: \"majority\" <\"majority\">` writes to be written to the on-disk journal before acknowledging the writes. As such, :writeconcern:`majority` write operations could possibly roll back in the event of a transient loss (e.g. crash and restart) of a majority of nodes in a given replica set."
msgstr ""

#: ../source/reference/read-concern-linearizable.txt:25
msgid "You can specify linearizable read concern for read operations on the :replstate:`primary <PRIMARY>` only."
msgstr ""

#: ../source/reference/read-concern-linearizable.txt:28
msgid "Linearizable read concern guarantees only apply if read operations specify a query filter that uniquely identifies a single document."
msgstr ""

#: ../source/reference/read-concern-linearizable.txt:34
#: ../source/reference/read-concern-linearizable.txt:73
msgid "Always use ``maxTimeMS`` with linearizable read concern in case a majority of data bearing members are unavailable. ``maxTimeMS`` ensures that the operation does not block indefinitely and instead ensures that the operation returns an error if the read concern cannot be fulfilled."
msgstr ""

#: ../source/reference/read-concern-linearizable.txt:41
msgid "Causally Consistent Sessions"
msgstr ""

#: ../source/reference/read-concern-linearizable.txt:43
msgid "Read concern :readconcern:`linearizable` is unavailable for use with causally consistent sessions."
msgstr ""

#: ../source/reference/read-concern-linearizable.txt:47
msgid "Real Time Order"
msgstr ""

#: ../source/reference/read-concern-linearizable.txt:49
msgid "Combined with :writeconcern:`\"majority\"` write concern, :readconcern:`\"linearizable\"` read concern enables multiple threads to perform reads and writes on a single document as if a single thread performed these operations in real time; that is, the corresponding schedule for these reads and writes is considered linearizable."
msgstr ""

#: ../source/reference/read-concern-linearizable.txt:56
msgid "Read Your Own Writes"
msgstr ""

#: ../source/includes/fact-read-own-writes.rst:1
msgid "Starting in MongoDB 3.6, you can use :ref:`causally consistent sessions <sessions>` to read your own writes, if the writes request acknowledgement."
msgstr ""

#: ../source/includes/fact-read-own-writes.rst:5
msgid "Prior to MongoDB 3.6, you must have issued your write operation with :writeconcern:`{ w: \"majority\" } <\"majority\">` write concern and then use either :readconcern:`\"majority\"` or :readconcern:`\"linearizable\"` read concern for the read operations to ensure that a single thread can read its own writes."
msgstr ""

#: ../source/reference/read-concern-linearizable.txt:63
msgid "Performance Comparisons"
msgstr ""

#: ../source/reference/read-concern-linearizable.txt:65
msgid "Unlike :readconcern:`\"majority\"`, :readconcern:`\"linearizable\"` read concern confirms with secondary members that the read operation is reading from a primary that is capable of confirming writes with :writeconcern:`{ w: \"majority\" } <\"majority\">` write concern. [#edge-cases-2-primaries]_ As such, reads with linearizable read concern may be significantly slower than reads with :readconcern:`\"majority\"` or :readconcern:`\"local\"` read concerns."
msgstr ""

#: ../source/reference/read-concern-linearizable.txt:78
msgid "For example:"
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid "In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may *transiently* believe that they are the primary, but at most, one of them will be able to complete writes with :writeconcern:`{ w: \"majority\" } <\"majority\">` write concern. The node that can complete :writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current primary, and the other node is a former primary that has not yet recognized its demotion, typically due to a :term:`network partition`. When this occurs, clients that connect to the former primary may observe stale data despite having requested read preference :readmode:`primary`, and new writes to the former primary will eventually roll back."
msgstr ""

