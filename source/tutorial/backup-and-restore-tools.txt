.. _manual-tutorial-backup-and-restore:

================================================================
Back Up and Restore a Self-Managed Deployment with MongoDB Tools
================================================================

.. default-domain:: mongodb

.. meta::
   :description: Back up MongoDB deployments. Use Cloud Backups for managed deployments in Atlas. Use mongodump and mongorestore for self-managed deployments.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This tutorial describes the process for creating backups and restoring data
using the command-line utilities :binary:`~bin.mongorestore` and :binary:`~bin.mongodump`
provided with MongoDB. 

To restore a backup of your self-hosted deployment 
to a managed `{+atlas+} deployment 
<https://www.mongodb.com/docs/atlas?tck=docs_server>`__, 
see :atlas:`Seed with mongorestore </import/mongorestore/>`.

For a fully-managed backup method, use :atlas:`Cloud Backups </backup/cloud-backup/overview>` 
in MongoDB Atlas, which provide localized backup storage using the native snapshot 
functionality of the cluster's cloud service provider. 

Considerations
--------------

.. _binary-bson-dumps:

Deployments
~~~~~~~~~~~

The :binary:`~bin.mongorestore` and :binary:`~bin.mongodump` utilities 
work with :ref:`BSON <bson-types>` data dumps, and are 
useful for creating backups of small deployments. For resilient and 
non-disruptive backups, use :ref:`file system snapshots <backup-restore-filesystem-snapshots>`
or block-level disk snapshots with  
:atlas:`Cloud Backups </backup/cloud-backup/overview>` from {+atlas+}.

.. note:: Back Up Sharded Clusters with {+atlas+}

   .. include:: /includes/extracts/sharded-clusters-backup-restore-mongodump-mongorestore-restriction.rst

Performance Impacts
~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/tools-performance-considerations-dump-restore.rst

.. _considerations-output-format:

Output Format
~~~~~~~~~~~~~

:binary:`~bin.mongorestore` and :binary:`~bin.mongodump` can output data
to an archive file, which is a single-file alternative to multiple BSON
files. Archive files are special-purpose formats that support
non-contiguous file writes. They enable concurrent backups from MongoDB,
as well as restores to MongoDB. Using archive files optimizes disk I/O
while backup and restore operations execute. 

You can also output archive files to the standard output (``stdout``).
Writing to the standard output allows for data migration over networks,
reduced disk I/O footprint, and concurrency gains in both the MongoDB
tools and your storage engine. 

For more information on archive files, see the
:option:`--archive <mongodump --archive>` option. 

.. _backup-mongodump:
.. _backup-and-restore-tools:

Procedures
----------

Back Up a Database with ``mongodump``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note:: Back Up Sharded Clusters with {+atlas+}

   .. include:: /includes/extracts/sharded-clusters-backup-restore-mongodump-mongorestore-restriction.rst

Exclude ``local`` Database
``````````````````````````

:binary:`~bin.mongodump` excludes the content of the ``local`` database in its output.

Required Access
```````````````

.. include:: /includes/access-mongodump-collections.rst

Basic ``mongodump`` Operations
``````````````````````````````

The :binary:`~bin.mongodump` utility backs up data by connecting to a
running :binary:`~bin.mongod`.

The utility can create a backup for an entire server, database or collection,
or can use a query to backup just part of a collection.

When you run :binary:`~bin.mongodump` without any arguments, the command
connects to the MongoDB instance on the local system
(e.g. ``localhost``) on port ``27017`` and creates a
database backup named ``dump/`` in the current directory.

To backup data from a :binary:`~bin.mongod` instance
running on the same machine and on the default port of ``27017``,
use the following command:

.. code-block:: bash

   mongodump

To specify the host and port of the MongoDB instance, you can either:

- Specify the hostname and port in the ``--uri`` string, using either an 
  :ref:`SRV <connections-dns-seedlist>` or 
  :ref:`standard <connections-standard-connection-string-format>` connection string:

  .. code-block:: bash
     :copyable: false
     
     mongodump --uri="mongodb+srv://username:password@cluster0.example.mongodb.net" <additional_options>

- Specify the hostname and port in the ``--host`` string:

  .. code-block:: bash
     :copyable: false
     
     mongodump --host="mongodb0.example.com:27017" <additional_options>

- Specify the hostname and port in the ``--host`` and ``--port``:

  .. code-block:: bash
     :copyable: false
     
     mongodump --host="mongodb0.example.com" --port=27017 <additional_options>

:binary:`~bin.mongodump` will write :term:`BSON` files that hold a copy of
data accessible via the :binary:`~bin.mongod` listening on port ``27017`` of
the ``mongodb.example.net`` host. See :ref:`backup-from-non-local` for more
information.

To specify a different output directory, you can use the :option:`--out
or -o <mongodump.--out>` option:

.. code-block:: bash

   mongodump --out=/opt/backup/mongodump-1

To limit the amount of data included in the database dump, you can
specify :option:`--db <mongodump.--db>` and
:option:`--collection <mongodump.--collection>` as options to
:binary:`~bin.mongodump`. For example:

.. code-block:: none

   mongodump --collection=myCollection --db=test

This operation creates a dump of the collection named ``myCollection``
from the database ``test`` in a :file:`dump/` subdirectory of the
current working directory.

:binary:`~bin.mongodump` overwrites output files if they exist in the
backup data folder. Before running the :binary:`~bin.mongodump` command
multiple times, either ensure that you no longer need the files in the
output folder (the default is the ``dump/`` folder) or rename the
folders or files.

Create Backups Using Oplogs
```````````````````````````

The :option:`--oplog <mongodump.--oplog>` option with
:binary:`~bin.mongodump` collects the :term:`oplog` entries and allows
you to perform a backup on a live database. If you later restore the
database from the backup, the database will be the same as it was when
the backup process completed.

With :option:`--oplog <mongodump.--oplog>`, :binary:`~bin.mongodump`
copies all the data from the source database as well as all of the
:term:`oplog` entries from the beginning to the end of the backup
procedure. This operation, in conjunction with :option:`mongorestore
--oplogReplay <mongorestore.--oplogReplay>`, allows you to restore a
backup that reflects the specific moment in time that corresponds to
when :binary:`~bin.mongodump` completed creating the dump file.

.. _backup-from-non-local:

Create Backups from Non-Local ``mongod`` Instances
``````````````````````````````````````````````````

The :option:`--host <mongodump.--host>` and
:option:`--port <mongodump.--port>` options for
:binary:`~bin.mongodump` allow you to connect to and backup from a remote host.
Consider the following example:

.. code-block:: bash

   mongodump \
      --host=mongodb1.example.net \
      --port=3017 \
      --username=user \
      --password="pass" \
      --out=/opt/backup/mongodump-1

On any :binary:`~bin.mongodump` command you may, as above, specify username
and password credentials to specify database authentication.

.. _backup-restore-dump:

Restore a Database with ``mongorestore``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note:: Back Up Sharded Clusters with {+atlas+}

   .. include:: /includes/extracts/sharded-clusters-backup-restore-mongodump-mongorestore-restriction.rst

Access Control
``````````````

To restore data to a MongoDB deployment that has :doc:`access control
</core/authorization>` enabled, the :authrole:`restore` role provides
the necessary privileges to restore data from backups *if* the data does
not include :data:`system.profile <<database>.system.profile>`
collection data and you run :binary:`~bin.mongorestore` without the
:option:`--oplogReplay <mongorestore.--oplogReplay>` option.

.. include:: /includes/access-mongorestore-collections.rst

Basic ``mongorestore`` Operations
`````````````````````````````````

The :binary:`~bin.mongorestore` utility restores a binary backup created by
:binary:`~bin.mongodump`. By default, :binary:`~bin.mongorestore` looks for a
database backup in the :file:`dump/` directory.

The :binary:`~bin.mongorestore` utility restores data by connecting to a
running :binary:`~bin.mongod` directly.

:binary:`~bin.mongorestore` can restore either an entire database backup
or a subset of the backup.

.. include:: /includes/fact-uuid-restore-from-backup.rst

To use :binary:`~bin.mongorestore` to connect to an active
:binary:`~bin.mongod`, use a command with the following prototype form:

.. code-block:: bash
   :copyable: false

   mongorestore --uri <connection string> <path to the backup>


Consider the following example:

.. code-block:: bash

   mongorestore /opt/backup/mongodump-1

Here, :binary:`~bin.mongorestore` imports the database backup in
the :file:`/opt/backup/mongodump-1` directory to the :binary:`~bin.mongod` instance
running on the localhost interface on the default port ``27017``.

.. _backup-restore-oplogreplay:

Use an Oplog File to Backup and Restore Data
````````````````````````````````````````````

To capture writes that may occur while ``mongodump`` is running, use
:option:`mongodump --oplog`. ``mongodump`` creates an ``oplog.bson``
file with :term:`oplog` entries for each write that occurred during the
run. You can apply the oplog operations with :option:`mongorestore
--oplogReplay`.

For examples, see :ref:`mongodump-examples` and
:ref:`mongorestore-examples`.

All of the data from the ``oplog.bson`` file is restored.

``mongorestore --oplogReplay`` doesn't allow you to restore data to an
arbitrary point in time. Use ``mongorestore --oplogReplay`` to
ensure the restored data is up to date with any writes that occurred
during the ``mongodump --oplog`` run.

.. note::

   ``--oplog`` is intended for use with replica sets. For sharded
   clusters, including replica sets that are part of a sharded
   environment, see :ref:`backup-sharded-dumps`.

You may also consider using the :option:`mongorestore --objcheck <mongorestore.--objcheck>`
option to check the integrity of objects while inserting them into the
database, or you may consider the :option:`mongorestore --drop <mongorestore.--drop>` option to drop each
collection from the database before restoring from
backups.

Restore Backups to Non-Local ``mongod`` Instances
`````````````````````````````````````````````````

By default, :binary:`~bin.mongorestore` connects to a MongoDB instance
running on the localhost interface and on the
default port (``27017``). If you want to restore to a different host or
port, use the :option:`--host <mongorestore.--host>` and :option:`--port
<mongorestore.--port>` options.

The following example that specifies the :option:`--host
<mongorestore.--host>` and :option:`--port <mongorestore.--port>`
options:

.. code-block:: bash

   mongorestore --host=mongodb1.example.net --port=3017

If restoring to an instance that enforces access control, include the
:option:`--username <mongorestore.--username>` and the
:option:`--authenticationDatabase
<mongorestore.--authenticationDatabase>` as well. Omit the
:option:`--password <mongorestore.--password>` option to have
:binary:`~bin.mongorestore` prompt for the password:

.. code-block:: bash

   mongorestore \
      --host=mongodb1.example.net \
      --port=3017 \
      --username=user \
      --authenticationDatabase=admin \
      /opt/backup/mongodump-1
