# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/storage.txt:3
msgid "FAQ: MongoDB Storage"
msgstr ""

#: ../source/faq/storage.txt:13
msgid "This document addresses common questions regarding MongoDB's storage system."
msgstr ""

#: ../source/faq/storage.txt:17
msgid "Storage Engine Fundamentals"
msgstr ""

#: ../source/faq/storage.txt:20
msgid "What is a storage engine?"
msgstr ""

#: ../source/faq/storage.txt:22
msgid "A storage engine is the part of a database that is responsible for managing how data is stored, both in memory and on disk. Many databases support multiple storage engines, where different engines perform better for specific workloads. For example, one storage engine might offer better performance for read-heavy workloads, and another might support a higher throughput for write operations."
msgstr ""

#: ../source/faq/storage.txt:29
msgid ":doc:`/core/storage-engines`"
msgstr ""

#: ../source/faq/storage.txt:32
msgid "Can you mix storage engines in a replica set?"
msgstr ""

#: ../source/faq/storage.txt:34
msgid "Yes. You can have replica set members that use different storage engines."
msgstr ""

#: ../source/faq/storage.txt:37
msgid "When designing these multi-storage engine deployments, consider the following:"
msgstr ""

#: ../source/faq/storage.txt:40
msgid "the oplog on each member may need to be sized differently to account for differences in throughput between different storage engines."
msgstr ""

#: ../source/faq/storage.txt:43
msgid "recovery from backups may become more complex if your backup captures data files from MongoDB: you may need to maintain backups for each storage engine."
msgstr ""

#: ../source/faq/storage.txt:48
msgid "WiredTiger Storage Engine"
msgstr ""

#: ../source/faq/storage.txt:51
msgid "Can I upgrade an existing deployment to WiredTiger?"
msgstr ""

#: ../source/faq/storage.txt:53
msgid "Yes. See:"
msgstr ""

#: ../source/faq/storage.txt:55
msgid ":doc:`/tutorial/change-standalone-wiredtiger`"
msgstr ""

#: ../source/faq/storage.txt:57
msgid ":doc:`/tutorial/change-replica-set-wiredtiger`"
msgstr ""

#: ../source/faq/storage.txt:59
msgid ":doc:`/tutorial/change-sharded-cluster-wiredtiger`"
msgstr ""

#: ../source/faq/storage.txt:62
msgid "How much compression does WiredTiger provide?"
msgstr ""

#: ../source/faq/storage.txt:64
msgid "The ratio of compressed data to uncompressed data depends on your data and the compression library used. By default, collection data in WiredTiger use :term:`Snappy block compression <snappy>`; :term:`zlib` compression is also available. Index data use :term:`prefix compression` by default."
msgstr ""

#: ../source/faq/storage.txt:73
msgid "To what size should I set the WiredTiger internal cache?"
msgstr ""

#: ../source/includes/extracts/wt-cache-utilization.rst:1
msgid "With WiredTiger, MongoDB utilizes both the WiredTiger internal cache and the filesystem cache."
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:2
msgid "Starting in 3.4, the WiredTiger internal cache, by default, will use the larger of either:"
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:5
msgid "50% of (RAM - 1 GB), or"
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:7
msgid "256 MB."
msgstr ""

#: ../source/includes/extracts/wt-cache-utilization.rst:6
msgid "By default, WiredTiger uses Snappy block compression for all collections and prefix compression for all indexes. Compression defaults are configurable at a global level and can also be set on a per-collection and per-index basis during collection and index creation."
msgstr ""

#: ../source/includes/extracts/wt-cache-utilization.rst:11
msgid "Different representations are used for data in the WiredTiger internal cache versus the on-disk format:"
msgstr ""

#: ../source/includes/extracts/wt-cache-utilization.rst:14
msgid "Data in the filesystem cache is the same as the on-disk format, including benefits of any compression for data files. The filesystem cache is used by the operating system to reduce disk I/O."
msgstr ""

#: ../source/includes/extracts/wt-cache-utilization.rst:17
msgid "Indexes loaded in the WiredTiger internal cache have a different data representation to the on-disk format, but can still take advantage of index prefix compression to reduce RAM usage. Index prefix compression deduplicates common prefixes from indexed fields."
msgstr ""

#: ../source/includes/extracts/wt-cache-utilization.rst:21
msgid "Collection data in the WiredTiger internal cache is uncompressed and uses a different representation from the on-disk format. Block compression can provide significant on-disk storage savings, but data must be uncompressed to be manipulated by the server."
msgstr ""

#: ../source/includes/extracts/wt-filesystem-cache.rst:1
msgid "Via the filesystem cache, MongoDB automatically uses all free memory that is not used by the WiredTiger cache or by other processes."
msgstr ""

#: ../source/includes/extracts/wt-cache-setting.rst:1
msgid "To adjust the size of the WiredTiger internal cache, see :setting:`storage.wiredTiger.engineConfig.cacheSizeGB` and :option:`--wiredTigerCacheSizeGB <mongod --wiredTigerCacheSizeGB>`. Avoid increasing the WiredTiger internal cache size above its default value."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:3
msgid "The :setting:`storage.wiredTiger.engineConfig.cacheSizeGB` limits the size of the WiredTiger internal cache. The operating system will use the available free memory for filesystem cache, which allows the compressed MongoDB data files to stay in memory. In addition, the operating system will use any free RAM to buffer file system blocks and file system cache."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:10
msgid "To accommodate the additional consumers of RAM, you may have to decrease WiredTiger internal cache size."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:13
msgid "The default WiredTiger internal cache size value assumes that there is a single :binary:`~bin.mongod` instance per machine. If a single machine contains multiple MongoDB instances, then you should decrease the setting to accommodate the other :binary:`~bin.mongod` instances."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:19
msgid "If you run :binary:`~bin.mongod` in a container (e.g. ``lxc``, ``cgroups``, Docker, etc.) that does *not* have access to all of the RAM available in a system, you must set :setting:`storage.wiredTiger.engineConfig.cacheSizeGB` to a value less than the amount of RAM available in the container. The exact amount depends on the other processes running in the container."
msgstr ""

#: ../source/includes/extracts/wt-configure-cache.rst:7
msgid "To view statistics on the cache and eviction rate, see the :serverstatus:`wiredTiger.cache` field returned from the :dbcommand:`serverStatus` command."
msgstr ""

#: ../source/faq/storage.txt:78
msgid "How frequently does WiredTiger write to disk?"
msgstr ""

#: ../source/includes/extracts/wt-snapshot-frequency.rst:1
msgid "MongoDB configures WiredTiger to create checkpoints (i.e. write the snapshot data to disk) at intervals of 60 seconds."
msgstr ""

#: ../source/faq/storage.txt:82
msgid "For journal data, MongoDB writes to disk according to the following intervals or condition:"
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:1
msgid "Every 50 milliseconds."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:4
msgid "MongoDB sets checkpoints to occur in WiredTiger on user data at an interval of 60 seconds."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:8
msgid "If the write operation includes a write concern of :writeconcern:`j: true <j>`, WiredTiger forces a sync of the WiredTiger journal files."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:11
msgid "Because MongoDB uses a journal file size limit of 100 MB, WiredTiger creates a new journal file approximately every 100 MB of data. When WiredTiger creates a new journal file, WiredTiger syncs the previous journal file."
msgstr ""

#: ../source/faq/storage.txt:90
msgid "How do I reclaim disk space in WiredTiger?"
msgstr ""

#: ../source/faq/storage.txt:92
msgid "The WiredTiger storage engine maintains lists of empty records in data files as it deletes documents. This space can be reused by WiredTiger, but will not be returned to the operating system unless under very specific circumstances."
msgstr ""

#: ../source/faq/storage.txt:97
msgid "The amount of empty space available for reuse by WiredTiger is reflected in the output of :method:`db.collection.stats()` under the heading ``wiredTiger.block-manager.file bytes available for reuse``."
msgstr ""

#: ../source/faq/storage.txt:101
msgid "To allow the WiredTiger storage engine to release this empty space to the operating system, you can de-fragment your data file. This can be achieved using the :dbcommand:`compact` command. For more information on its behavior and other considerations, see :dbcommand:`compact`."
msgstr ""

#: ../source/faq/storage.txt:107
msgid "MMAPv1 Storage Engine"
msgstr ""

#: ../source/faq/storage.txt:112
msgid "What are memory mapped files?"
msgstr ""

#: ../source/faq/storage.txt:114
msgid "A memory-mapped file is a file with data that the operating system places in memory by way of the ``mmap()`` system call. ``mmap()`` thus *maps* the file to a region of virtual memory. Memory-mapped files are the critical piece of the MMAPv1 storage engine in MongoDB. By using memory mapped files, MongoDB can treat the contents of its data files as if they were in memory. This provides MongoDB with an extremely fast and simple method for accessing and manipulating data."
msgstr ""

#: ../source/faq/storage.txt:123
msgid "How do memory mapped files work?"
msgstr ""

#: ../source/faq/storage.txt:125
msgid "MongoDB uses memory mapped files for managing and interacting with all data."
msgstr ""

#: ../source/faq/storage.txt:128
msgid "Memory mapping assigns files to a block of virtual memory with a direct byte-for-byte correlation. MongoDB memory maps data files to memory as it accesses documents. Unaccessed data is *not* mapped to memory."
msgstr ""

#: ../source/faq/storage.txt:132
msgid "Once mapped, the relationship between file and memory allows MongoDB to interact with the data in the file as if it were memory."
msgstr ""

#: ../source/faq/storage.txt:136
msgid "How frequently does MMAPv1 write to disk?"
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:1
msgid "In the default configuration for the :doc:`MMAPv1 storage engine </core/mmapv1>`, MongoDB writes to the data files on disk every 60 seconds and writes to the :term:`journal` files roughly every 100 milliseconds."
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:6
msgid "To change the interval for writing to the data files, use the :setting:`storage.syncPeriodSecs` setting. For the journal files, see :setting:`storage.journal.commitIntervalMs` setting."
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:10
msgid "These values represent the *maximum* amount of time between the completion of a write operation and when MongoDB writes to the data files or to the journal files. In many cases MongoDB and the operating system flush data to disk more frequently, so that the above values represents a theoretical maximum."
msgstr ""

#: ../source/faq/storage.txt:143
msgid "Why are the files in my data directory larger than the data in my database?"
msgstr ""

#: ../source/faq/storage.txt:145
msgid "The data files in your data directory, which is the :file:`/data/db` directory in default configurations, might be larger than the data set inserted into the database. Consider the following possible causes:"
msgstr ""

#: ../source/faq/storage.txt:150
msgid "Preallocated data files"
msgstr ""

#: ../source/faq/storage.txt:152
msgid "MongoDB preallocates its data files to avoid filesystem fragmentation, and because of this, the size of these files do not necessarily reflect the size of your data."
msgstr ""

#: ../source/faq/storage.txt:156
msgid "The :setting:`storage.mmapv1.smallFiles` option will reduce the size of these files, which may be useful if you have many small databases on disk."
msgstr ""

#: ../source/faq/storage.txt:161
msgid "The ``oplog``"
msgstr ""

#: ../source/faq/storage.txt:163
msgid "If this :binary:`~bin.mongod` is a member of a replica set, the data directory includes the :term:`oplog.rs <oplog>` file, which is a preallocated :term:`capped collection` in the ``local`` database."
msgstr ""

#: ../source/faq/storage.txt:168
msgid "The default allocation is approximately 5% of disk space on 64-bit installations. In most cases, you should not need to resize the oplog. See :ref:`Oplog Sizing <replica-set-oplog-sizing>` for more information."
msgstr ""

#: ../source/faq/storage.txt:173
msgid "The ``journal``"
msgstr ""

#: ../source/faq/storage.txt:175
msgid "The data directory contains the journal files, which store write operations on disk before MongoDB applies them to databases. See :doc:`/core/journaling`."
msgstr ""

#: ../source/faq/storage.txt:182
msgid "Empty records"
msgstr ""

#: ../source/faq/storage.txt:184
msgid "The MMAPv1 storage engine maintains lists of empty records in data files as it deletes documents and collections. This space can be reused for new record allocations within the same database, but MMAPv1 will not, by default, return this space to the operating system."
msgstr ""

#: ../source/faq/storage.txt:189
msgid "To allow the MMAPv1 storage engine to more effectively reuse space from empty records, you can de-fragment your data. To de-fragment, use the :dbcommand:`compact` command. The :dbcommand:`compact` requires up to 2 gigabytes of extra disk space to run. Do not use :dbcommand:`compact` if you are critically low on disk space. For more information on its behavior and other considerations, see :dbcommand:`compact`."
msgstr ""

#: ../source/faq/storage.txt:197
msgid ":dbcommand:`compact` only removes fragmentation from MongoDB data files within a collection and does not return any disk space to the operating system. To return disk space to the operating system, see :ref:`faq-reclaim-disk-space`."
msgstr ""

#: ../source/faq/storage.txt:205
msgid "How do I reclaim disk space?"
msgstr ""

#: ../source/faq/storage.txt:209
msgid "You do not need to reclaim disk space for MongoDB to reuse freed space. See :ref:`faq-empty-records` for information on reuse of freed space."
msgstr ""

#: ../source/faq/storage.txt:213
msgid "For a secondary member of a replica set, you can perform a :doc:`resync of the member </tutorial/resync-replica-set-member>` by stopping the secondary member to resync, deleting all data and subdirectories from the member's data directory, and restarting the secondary member. For details, see :doc:`/tutorial/resync-replica-set-member`."
msgstr ""

#: ../source/faq/storage.txt:219
msgid "Dropping an unused database via :dbcommand:`dropDatabase` will also delete the associated data files and free up disk space."
msgstr ""

#: ../source/faq/storage.txt:225
msgid "What is the working set?"
msgstr ""

#: ../source/faq/storage.txt:227
msgid "Working set represents the total body of data that the application uses in the course of normal operation. Often this is a subset of the total data size, but the specific size of the working set depends on actual moment-to-moment use of the database."
msgstr ""

#: ../source/faq/storage.txt:232
msgid "If you run a query that requires MongoDB to scan every document in a collection, the working set will expand to include every document. Depending on physical memory size, this may cause documents in the working set to \"page out,\" or to be removed from physical memory by the operating system. The next time MongoDB needs to access these documents, MongoDB may incur a hard page fault."
msgstr ""

#: ../source/faq/storage.txt:239
msgid "For best performance, the majority of your *active* set should fit in RAM."
msgstr ""

#: ../source/faq/storage.txt:245
msgid "What are page faults?"
msgstr ""

#: ../source/includes/fact-page-fault.rst:1
msgid "With the MMAPv1 storage engine, page faults can occur as MongoDB reads from or writes data to parts of its data files that are not currently located in physical memory. In contrast, operating system page faults happen when physical memory is exhausted and pages of physical memory are swapped to disk."
msgstr ""

#: ../source/faq/storage.txt:249
msgid "If there is free memory, then the operating system can find the page on disk and load it to memory directly. However, if there is no free memory, the operating system must:"
msgstr ""

#: ../source/faq/storage.txt:253
msgid "find a page in memory that is stale or no longer needed, and write the page to disk."
msgstr ""

#: ../source/faq/storage.txt:256
msgid "read the requested page from disk and load it into memory."
msgstr ""

#: ../source/faq/storage.txt:258
msgid "This process, on an active system, can take a long time, particularly in comparison to reading a page that is already in memory."
msgstr ""

#: ../source/faq/storage.txt:262
#: ../source/faq/storage.txt:274
msgid "See :ref:`administration-monitoring-page-faults` for more information."
msgstr ""

#: ../source/faq/storage.txt:265
msgid "What is the difference between soft and hard page faults?"
msgstr ""

#: ../source/faq/storage.txt:267
msgid ":term:`Page faults <page fault>` occur when MongoDB, with the MMAP storage engine, needs access to data that isn't currently in active memory. A \"hard\" page fault refers to situations when MongoDB must access a disk to access the data. A \"soft\" page fault, by contrast, merely moves memory pages from one list to another, such as from an operating system file cache."
msgstr ""

#: ../source/faq/storage.txt:281
msgid "Can I manually pad documents to prevent moves during updates?"
msgstr ""

#: ../source/faq/storage.txt:285
msgid "With the :doc:`MMAPv1 storage engine </core/mmapv1>`, an update can cause a document to move on disk if the document grows in size. To *minimize* document movements, MongoDB uses :term:`padding`."
msgstr ""

#: ../source/faq/storage.txt:289
msgid "You should not have to pad manually because by default, MongoDB uses :ref:`power-of-2-allocation` to add :ref:`padding automatically <record-allocation-strategies>`. The :ref:`power-of-2-allocation` ensures that MongoDB allocates document space in sizes that are powers of 2, which helps ensure that MongoDB can efficiently reuse free space created by document deletion or relocation as well as reduce the occurrences of reallocations in many cases."
msgstr ""

#: ../source/faq/storage.txt:297
msgid "However, *if you must* pad a document manually, you can add a temporary field to the document and then :update:`$unset` the field, as in the following example."
msgstr ""

#: ../source/faq/storage.txt:301
msgid "Do not manually pad documents in a capped collection. Applying manual padding to a document in a capped collection can break replication. Also, the padding is not preserved if you re-sync the MongoDB instance."
msgstr ""

#: ../source/faq/storage.txt:325
msgid ":ref:`record-allocation-strategies`"
msgstr ""

#: ../source/faq/storage.txt:328
msgid "Data Storage Diagnostics"
msgstr ""

#: ../source/faq/storage.txt:331
msgid "How can I check the size of a collection?"
msgstr ""

#: ../source/faq/storage.txt:333
msgid "To view the statistics for a collection, including the data size, use the :method:`db.collection.stats()` method from the :binary:`~bin.mongo` shell. The following example issues :method:`db.collection.stats()` for the ``orders`` collection:"
msgstr ""

#: ../source/faq/storage.txt:342
msgid "MongoDB also provides the following methods to return specific sizes for the collection:"
msgstr ""

#: ../source/faq/storage.txt:345
msgid ":method:`db.collection.dataSize()` to return the uncompressed data size in bytes for the collection."
msgstr ""

#: ../source/faq/storage.txt:348
msgid ":method:`db.collection.storageSize()` to return the size in bytes of the collection on disk storage. If collection data is compressed (which is the :option:`default for WiredTiger <mongod --wiredTigerCollectionBlockCompressor>`), the storage size reflects the compressed size and may be smaller than the value returned by :method:`db.collection.dataSize()`."
msgstr ""

#: ../source/faq/storage.txt:355
msgid ":method:`db.collection.totalIndexSize()` to return the index sizes in bytes for the collection. If an index uses prefix compression (which is the :option:`default for WiredTiger <mongod --wiredTigerIndexPrefixCompression>`), the returned size reflects the compressed size."
msgstr ""

#: ../source/faq/storage.txt:361
msgid "The following script prints the statistics for each database:"
msgstr ""

#: ../source/faq/storage.txt:370
msgid "The following script prints the statistics for each collection in each database:"
msgstr ""

#: ../source/faq/storage.txt:384
msgid "How can I check the size of the individual indexes for a collection?"
msgstr ""

#: ../source/faq/storage.txt:386
msgid "To view the size of the data allocated for each index, use the :method:`db.collection.stats()` method and check the :data:`~collStats.indexSizes` field in the returned document."
msgstr ""

#: ../source/faq/storage.txt:390
msgid "If an index uses prefix compression (which is the :option:`default for WiredTiger <mongod --wiredTigerIndexPrefixCompression>`), the returned size for that index reflects the compressed size."
msgstr ""

#: ../source/faq/storage.txt:397
msgid "How can I get information on the storage use of a database?"
msgstr ""

#: ../source/faq/storage.txt:399
msgid "The :method:`db.stats()` method in the :binary:`~bin.mongo` shell returns the current state of the \"active\" database. For the description of the returned fields, see :ref:`dbStats Output <dbstats-output>`."
msgstr ""

