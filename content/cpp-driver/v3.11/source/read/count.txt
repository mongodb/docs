.. _cpp-count:

===============
Count Documents
===============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: number, amount, estimation, code example

Overview
---------

In this guide, you can learn how to use the {+driver-short+} to retrieve an accurate
and estimated count of the number of documents in a collection. The ``count_documents()``
method returns the exact number of documents that match a query filter or that exist in
a collection, and the ``estimated_document_count()`` method returns the estimated number
of documents in a collection.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``companies`` collection in the ``sample_training``
database from the :atlas:`Atlas sample datasets </sample-data>`. To access this collection
from your C++ application, instantiate a ``mongocxx::client`` that connects to an Atlas
cluster and assign the following values to your ``db`` and ``collection`` variables:

.. literalinclude:: /includes/read/count.cpp
    :language: cpp
    :dedent:
    :start-after: start-db-coll
    :end-before: end-db-coll

To learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the
:atlas:`Get Started with Atlas </getting-started>` guide.

.. _cpp-accurate-count:

Retrieve an Accurate Count
--------------------------

Use the ``count_documents()`` method to count the number of documents that are in a
collection. To count the number of documents that match a specific search
critera, pass a query filter document to the ``count_documents()`` method.

To learn more about specifying a query, see the :ref:`cpp-specify-query` guide.

Count All Documents
~~~~~~~~~~~~~~~~~~~

To return a count of all documents in the collection, pass an empty filter document to
the ``count_documents()`` method, as shown in the following example:

.. io-code-block::

   .. input:: /includes/read/count.cpp
      :start-after: start-count-all
      :end-before: end-count-all
      :language: cpp
      :dedent:

   .. output::

      Number of documents: 9500

Count Specific Documents
~~~~~~~~~~~~~~~~~~~~~~~~

To return a count of documents that match specific search criteria, pass your query
filter document to the ``count_documents()`` method.

The following example counts the number of documents that have a ``founded_year``
value of ``2010``:

.. io-code-block::

   .. input:: /includes/read/count.cpp
      :start-after: start-count-accurate
      :end-before: end-count-accurate
      :language: cpp
      :dedent:

   .. output::

      Number of companies founded in 2010: 33

Customize Count Behavior
~~~~~~~~~~~~~~~~~~~~~~~~

You can modify the behavior of the ``count_documents()`` method by passing
an instance of the ``mongocxx::options::count`` class as a parameter. The following table
describes the fields you can set in a ``mongocxx::options::count`` instance:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Field
     - Description

   * - ``collation``
     - | The collation to use for the operation.
       | **Type**: ``bsoncxx::document::view_or_value``

   * - ``hint``
     - | The index to use for the operation.
       | **Type**: ``mongocxx::hint``

   * - ``comment``
     - | The comment to attach to the operation.
       | **Type**: ``bsoncxx::types::bson_value::view_or_value``

   * - ``limit``
     - | The maximum number of documents to count. This value must be a positive integer.
       | **Type**: ``std::int64_t``

   * - ``max_time``
     - | The maximum amount of time in milliseconds that the operation can run.
       | **Type**: ``std::chrono::milliseconds``

   * - ``skip``
     - | The number of documents to skip before counting documents.
       | **Type**: ``std::int64_t``

   * - ``read_preference``
     - | The read preference to use for the operation.
       | **Type**: ``mongocxx::read_preference``

The following example uses the ``count_documents()`` method to count the number of
documents in which the ``number_of_employees`` field has the value ``50`` and instructs the
operation to count a maximum of ``100`` results:

.. io-code-block::

   .. input:: /includes/read/count.cpp
      :start-after: start-modify-accurate
      :end-before: end-modify-accurate
      :language: cpp
      :dedent:

   .. output::

      Number of companies with 50 employees: 100

.. _cpp-estimated-count:

Retrieve an Estimated Count
---------------------------

You can retrieve an estimate of the number of documents in a collection by calling
the ``estimated_document_count()`` method. The method estimates the amount of
documents based on collection metadata, which might be faster than performing an 
accurate count.

The following example estimates the number of documents in a collection:

.. io-code-block::

   .. input:: /includes/read/count.cpp
      :start-after: start-count-estimate
      :end-before: end-count-estimate
      :language: cpp
      :dedent:

   .. output::

      Estimated number of documents: 9500

Customize Estimated Count Behavior
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can modify the behavior of the ``estimated_document_count()`` method by passing
an instance of the ``mongocxx::options::estimated_document_count`` class as a parameter.
The following table describes the fields you can set in a ``mongocxx::options::estimated_document_count``
instance:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Field
     - Description

   * - ``max_time``
     - | The maximum amount of time in milliseconds that the operation can run.
       | **Type**: ``std::chrono::milliseconds``

   * - ``comment``
     - | The comment to attach to the operation.
       | **Type**: ``bsoncxx::types::bson_value::view_or_value``

   * - ``read_preference``
     - | The read preference to use for the operation.
       | **Type**: ``mongocxx::read_preference``

The following example uses the ``estimated_document_count()`` method to return an
estimate of the number of documents in the collection and instructs the operation
to run for a maximum of ``1000`` milliseconds:

.. io-code-block::

   .. input:: /includes/read/count.cpp
      :start-after: start-modify-estimate
      :end-before: end-modify-estimate
      :language: cpp
      :dedent:

   .. output::

      Estimated number of documents: 9500

API Documentation
-----------------

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `count_documents() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a03c8eb29bfc93cecaefc0ef9773fced7>`__
- `estimated_document_count() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#af143d452f6f4b9b2d3f348cf216e2f41>`__
- `mongocxx::options::count <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1count.html>`__
- `mongocxx::options::estimated_document_count <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1estimated__document__count.html>`__