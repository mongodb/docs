===================
|onprem| Components
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

An |onprem| installation includes servers running |onprem| and servers
hosting dedicated MongoDB databases for storing application data and
snapshots.

Network Diagram
---------------

.. include:: /images/opsmanager-network-diagram.rst

|onprem|
--------

The |onprem| installation package consists of the :ref:`application` and 
:ref:`backup-daemon`. The |onprem| application requires an |onprem| Application
Database (a dedicated MongoDB database to hold operational data) as well as
dedicated MongoDB Backup Database(s).


.. _mms-http-service:
.. _application:
.. _mms-application-package:

|application|
~~~~~~~~~~~~~

The |application| contains the user interface and the HTTP services the
Agents use to transmit data to and from |onprem|.
These are all stateless and start automatically when the |application| starts.
Multiple instances of the |application| can run as long as each instance has
the same configuration. Users and agents can interact with any instance.

The |http-service| runs on port ``8080`` by default and contains the web
interface for managing |onprem| users, monitoring of MongoDB servers, and
managing those serverâ€™s backups. Users can sign up, create new accounts and
projects, as well as join an existing project.

.. _backup-daemon:

Backup Daemon Service
~~~~~~~~~~~~~~~~~~~~~

Any Ops Manager instance can be configured to run the Backup Daemon service to
provide backup capabilities. The Backup Daemon service manages both the local
copies of the backed-up databases and each backup's snapshots. The daemon does
scheduled work based on data coming into the |http-service| from the Backup
Agents. No client applications talk directly to the daemon. Its state and job
queues come from the :ref:`mms-application-database`.

The Backup Daemon's local copy of a backed-up deployment is called the
:term:`head database`. The daemon stores all its head databases in its
:setting:`rootDirectory` path. To create each head database, the daemon's
server acts as though it were an "invisible" :term:`secondary` for each
:term:`replica set` designated for backup.

If you run multiple Backup Daemons, |onprem| selects the Backup Daemon to use
when a user enables backup for a deployment. The local copy of the deployment
resides with that daemon's server.

The daemon takes scheduled snapshots and stores the snapshots in either
databases (the :ref:`backup-database`) or on the file system (the file system
store). It also acts on restore requests by retrieving data from the Backup
Database and delivering it to the requested destination.

:ref:`Multiple Backup Daemons <multiple-backup-daemons>` scale horizontally
to increase your storage and can provide **manual** failover.

The Backup Daemon exposes a health-check endpoint. 
See :doc:`/reference/firewall-configuration`.

.. _backing-database:

Dedicated MongoDB Databases for Operational Data
------------------------------------------------

|onprem| uses dedicated MongoDB databases to store the |application|'s
monitoring data and the Backup Daemon's operational backup data. The backing
databases run as :term:`replica sets <replica set>` to ensure redundancy and
high availability. The replica sets host **only** |onprem| data. You must
:doc:`provision the replica sets </tutorial/prepare-backing-mongodb-instances>` 
before installing |onprem|.

.. _mms-application-database:

|application| Database
~~~~~~~~~~~~~~~~~~~~~~

This database contains :ref:`application` metadata:

- Monitoring data collected from Monitoring Agents.

- Metadata for |onprem| users, projects, hosts, monitoring data, and backup state.

For topology and specifications, see 
:ref:`mms-application-database-specifications`.

.. _backup-database:
.. _mms-backup-blockstore-database:

Backup Data Storage
~~~~~~~~~~~~~~~~~~~

|mms| backs up snapshots of deployments. These snapshots are stored in either
databases or file systems. There can be more than one database and/or file
system paths to which snapshots are written. The recent history of the
deployment database is written to a separate database regardless of where the
snapshots are written.

The components of backup data storage include:

- Snapshots. Snapshots can be written to one of two destinations:

  - A :term:`Blockstore <Backup Blockstore Database>`, a MongoDB database.

  - A :term:`File System Store <File System Store>` a file system, in the
    directory of your choosing.

- :term:`Oplog Slices <oplog slice>`. The :term:`Oplog Store <Oplog Store Database>` 
  retains oplog entries the Backup Daemon applies to its local copies of your 
  backed-up deployments.

The **Blockstore** backup option requires:

- Two databases that run on a dedicated MongoDB deployment that
  holds no other data:

  - A large database to store the backup data (the Blockstore).
  - A small database to store the operations logs (the Oplog Store).

- Disk space proportional to the deployments being backed up.
  See :ref:`backup-database-specifications`.

If redundancy and high availability for the backup data is desired, configure
the Blockstores and Oplog Stores as a replica sets with three data-bearing
members.

.. important::
   |onprem| cannot be backed up using |onprem| Backup. 
   See :doc:`/tutorial/backup-the-backup-service`.

The **File System Store** backup option requires:

- A small backup database (the Oplog Store) in a MongoDB deployment.
- A filesystem path that can be mounted from all |mms| application instances
  so they can read and write backup snapshots.

Default Ports
-------------

For a list of |onprem|'s default ports and health-check endpoints, see
:doc:`/reference/firewall-configuration`.
