.. _read-preference:

=========================
Read Preference Reference
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/introduction-read-preference.rst

.. include:: /includes/read-preference-modes-table.rst

.. note::

   The read preference does not affect the visibility of data; i.e,
   clients can see the results of writes before they are made :term:`durable`:

   .. include:: /includes/list-visibility-of-data.rst

   For more information on read isolation level in MongoDB, see
   :doc:`/core/read-isolation-consistency-recency`.

   Read preference also does not affect :ref:`causal consistency
   <causal-consistency>`. The :ref:`causal consistency guarantees
   <sessions>` provided by causally consistent sessions for read
   operations with :readconcern:`"majority"` read concern and write
   operations with :writeconcern:`"majority"` write concern hold across
   all members of the MongoDB deployment.

.. index:: read preference; semantics
.. _replica-set-read-preference-semantics:
.. index:: read preference; modes
.. _replica-set-read-preference-modes:

Read Preference Modes
---------------------

.. readmode:: primary

   All read operations use only the current replica set
   :term:`primary`. [#edge-cases-2-primaries]_ This is the default read
   mode. If the primary is unavailable, read operations produce an
   error or throw an exception.

   The :readmode:`primary` read preference mode is not compatible with
   read preference modes that use :ref:`tag sets
   <replica-set-read-preference-tag-sets>` or :ref:`maxStalenessSeconds 
   <replica-set-read-preference-max-staleness>`. 
   If you specify tag sets or a ``maxStalenessSeconds`` value
   with :readmode:`primary`, the driver will produce an error.

.. readmode:: primaryPreferred

   In most situations, operations read from the :term:`primary` member
   of the set. However, if the primary is unavailable, as is the case
   during :term:`failover` situations, operations read from :term:`secondary`
   members that satisfy the read preference's ``maxStalenessSeconds`` and
   tag sets.
   
   .. include:: /includes/extracts/maxStaleness-primaryPreferred.rst

   .. include:: /includes/extracts/tagSets-primaryPreferred.rst

   .. include:: /includes/extracts/maxStaleness-and-tagSets-general.rst

   .. include:: /includes/extracts/secondary-reads-stale-data-primaryPreferred.rst
   
.. readmode:: secondary

   Operations read *only* from the :term:`secondary` members of the set.
   If no secondaries are available, then this read operation produces an
   error or exception.

   Most replica sets have at least one secondary, but there are
   situations where there may be no available secondary. For example, a
   replica set with a :term:`primary`, a secondary, and an
   :term:`arbiter` may not have any secondaries if a member is in
   recovering state or unavailable.

   .. include:: /includes/extracts/maxStaleness-secondary.rst
   
   .. include:: /includes/extracts/tagSets-secondary.rst
   
   .. include:: /includes/extracts/maxStaleness-and-tagSets-general.rst
   
   .. include:: /includes/extracts/secondary-reads-stale-data-secondary.rst

.. readmode:: secondaryPreferred

   In most situations, operations read from :term:`secondary` members,
   but in situations where the set consists of a single
   :term:`primary` (and no other members), the read operation will use
   the replica set's primary.

   .. include:: /includes/extracts/maxStaleness-secondaryPreferred.rst

   .. include:: /includes/extracts/tagSets-secondaryPreferred.rst

   .. include:: /includes/extracts/maxStaleness-and-tagSets-general.rst

   .. include:: /includes/extracts/secondary-reads-stale-data-secondaryPreferred.rst

.. readmode:: nearest

   The driver reads from a member whose network latency falls within
   the acceptable latency window. Reads in the :readmode:`nearest` mode
   do not consider whether a member is a primary or secondary when
   routing read operations: primaries and secondaries are treated
   equivalently. The read preference :ref:`member selection
   <replica-set-read-preference-behavior-nearest>` documentation
   describes the process in detail.

   Set this mode to minimize the effect of network latency
   on read operations without preference for current or stale data.

   When the read preference includes a :ref:`maxStalenessSeconds value
   <replica-set-read-preference-max-staleness>`, the client estimates
   how stale each secondary is by comparing the secondary's last write
   to that of the primary, if available, or to the secondary with the
   most recent write if there is no primary. The client will then
   filter out any secondary whose estimated lag is greater than
   ``maxStalenessSeconds`` and randomly direct the read to a remaining
   member (primary or secondary) whose network latency falls within the
   :ref:`acceptable latency window
   <replica-set-read-preference-behavior-nearest>`.

   If you specify a :ref:`tag set
   <replica-set-read-preference-tag-sets>`, the client attempts to
   find a replica set member that matches the specified tag sets and
   directs reads to an arbitrary member from among the :ref:`nearest
   group <replica-set-read-preference-behavior-nearest>`.

   .. include:: /includes/extracts/maxStaleness-and-tagSets-nearest.rst

   .. include:: /includes/extracts/secondary-reads-stale-data-nearest.rst

   .. note::

      All operations read from a member of the nearest group of the
      replica set that matches the specified read preference mode. The
      :readmode:`nearest` mode differs in that it prefers low latency
      reads over a member's :term:`primary` or :term:`secondary` status.

      For :readmode:`nearest`, the client assembles a list of
      acceptable hosts based on ``maxStalenessSeconds`` and tag sets
      and then narrows that list to the host with the shortest ping
      time and all other members of the set that are within the "local
      threshold," or acceptable latency. See
      :ref:`replica-set-read-preference-behavior-nearest` for more
      information.

Tag Set
-------

If a replica set member or members are associated with
:rsconf:`~members[n].tags`, you can specify a tag set (array of tag
specification documents) in the read preference to target those members.

To :ref:`configure <replica-set-configuration-document>` a member with
tags, set :rsconf:`members[n].tags` to a document that contains the tag
name and value pairs. The value of the tags must be a string.

.. code-block:: javascript
   :copyable: false
   
   { "<tag1>": "<string1>", "<tag2>": "<string2>",... }

Then, you can include a tag set in the read preference to target tagged
members. A tag set is an array of tag specification documents, where
each tag specification document contains one or more tag/value pairs.

.. code-block:: javascript
   :copyable: false

   [ { "<tag1>": "<string1>", "<tag2>": "<string2>",... }, ... ]

To find replica set members, MongoDB tries each document in succession
until a match is found.  See :ref:`read-preference-tag-order-matching` for details.

For example, if a secondary member has the following
:rsconf:`members[n].tags`:

.. code-block:: javascript

   { "region": "South", "datacenter": "A" }

Then, the following tags sets can direct read operations to the aforementioned
secondary (or other members with the same tags):
 
.. code-block:: javascript
   :copyable: false
   
   [ { "region": "South", "datacenter": "A" }, { } ]     // Find members with both tag values. If none are found, read from any eligible member.
   [ { "region": "South" }, { "datacenter": "A" }, { } ] // Find members with the specified region tag. Only if not found, then find members with the specified datacenter tag. If none are found, read from any eligible member.
   [ { "datacenter": "A" }, { "region": "South" }, { } ] // Find members with the specified datacenter tag. Only if not found, then find members with the specified region tag. If none are found, read from any eligible member.
   [ { "region": "South" }, { } ]                        // Find members with the specified region tag value. If none are found, read from any eligible member.
   [ { "datacenter": "A" }, { } ]                        // Find members with the specified datacenter tag value. If none are found, read from any eligible member.
   [ { } ]                                               // Find any eligible member.

.. _read-preference-tag-order-matching:

Order of Tag Matching
~~~~~~~~~~~~~~~~~~~~~

If the tag set lists multiple documents, MongoDB tries each document in
succession until a match is found. Once a match is found, that tag
specification document is used to find all eligible matching members,
and the remaining tag specification documents are ignored. If no
members match any of the tag specification documents, the read
operation returns with an error.

.. tip::

   To avoid an error if no members match any of the tag specifications,
   you can add an empty document ``{ }`` as the last element of the tag
   set to read from any eligible member.

For example, consider the following tag set with three tag
specification documents:

.. code-block:: javascript
   :copyable: false

   [ { "region": "South", "datacenter": "A" },  { "rack": "rack-1" }, { } ]  

First, MongoDB tries to find members tagged with both ``"region":
"South"`` and ``"datacenter": "A"``.

.. code-block:: none
   :copyable: false

   { "region": "South", "datacenter": "A" }
      

- If a member is found, the remaining tag specification documents are
  not considered. Instead, MongoDB uses this tag specification document
  to find all eligible members.

- Else, MongoDB tries to find members with the tags specified in the
  second document

  .. code-block:: none
     :copyable: false

     { "rack": "rack-1" }

  - If a member is found tagged, the remaining tag specification
    document is not considered. Instead, MongoDB uses this tag
    specification document to find all eligible members.

  - Else, the third document is considered. 
  
    .. code-block:: none
       :copyable: false

       { }

    The empty document matches any eligible member.

Tag Set and Read Preference Modes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Tags are not compatible with mode :readmode:`primary` and, in general, only
apply when :ref:`selecting <replica-set-read-preference-behavior-member-selection>`
a :term:`secondary` member of a set for a read operation. However, the
:readmode:`nearest` read mode, when combined with a tag set, selects
the matching member with the lowest network latency. This member may be a
primary or secondary.

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Mode
     - Notes

   * - :readmode:`primaryPreferred`
     - Specified tag set only applies if selecting eligible secondaries.

   * - :readmode:`secondary`
     - Specified tag set always applies.

   * - :readmode:`secondaryPreferred`
     -  Specified tag set only applies if selecting eligible secondaries.

   * - :readmode:`nearest`
     -  Specified tag set applies whether selecting either primary or eligible secondaries.


For information on the interaction between the :ref:`modes
<replica-set-read-preference-modes>` and tag sets, refer to the
:ref:`specific read preference mode documentation
<replica-set-read-preference-modes>`.

For information on configuring tag sets, see the
:doc:`/tutorial/configure-replica-set-tag-sets` tutorial.

Configure Read Preference
-------------------------

When using a MongoDB driver, you can specify the read preference when
:ref:`connecting to the replica set or sharded cluster
<connections-read-preference>`. For example, see :ref:`connection
string <connections-read-preference>`. You can also specify the read
preference at a more granular level. For details, see your driver's
:api:`api documentation<>`.

When using the :binary:`mongo` shell, see :method:`cursor.readPref()`
and :method:`Mongo.setReadPref()`. For example:

.. code-block:: javascript

   db.collection.find({}).readPref( "secondary",  [ { "region": "South" } ] )

Use Cases
---------

Depending on the requirements of an application, you can configure
different applications to use
different read preferences, or use different read preferences for different
queries in the same application. Consider the following applications
for different read preference strategies.

.. _maximize-consistency:

Maximize Consistency
~~~~~~~~~~~~~~~~~~~~

To avoid *stale* reads, use :readmode:`primary` read preference and
:readconcern:`"majority"` ``readConcern``. If the primary is
unavailable, e.g. during elections or when a majority of the replica
set is not accessible, read operations using :readmode:`primary` read
preference produce an error or throw an exception.

.. _edge-cases:

In some circumstances, it may be possible for a replica set to
temporarily have two primaries; however, only one primary will be
capable of confirming writes with the :writeconcern:`"majority"` write
concern.

- A partial :term:`network partition` may segregate a primary (``P``\
  :sub:`old`) into a partition with a minority of the nodes, while the
  other side of the partition contains a majority of nodes. The
  partition with the majority will elect a new primary (``P``\
  :sub:`new`), but for a brief period, the old primary (``P``\
  :sub:`old`) may still continue to serve reads and writes, as it has
  not yet detected that it can only see a minority of nodes in the
  replica set. During this period, if the old primary (``P``\
  :sub:`old`) is still visible to clients as a primary, reads from this
  primary may reflect stale data.

- A primary (``P``\ :sub:`old`) may become unresponsive, which will
  trigger an election and a new primary (``P``\ :sub:`new`) can be
  elected, serving reads and writes. If the unresponsive primary
  (``P``\ :sub:`old`) starts responding again, two primaries will be
  visible for a brief period. The brief period will end when ``P``\
  :sub:`old` steps down. However, during the brief period, clients
  might read from the old primary ``P``\ :sub:`old`, which can provide
  stale data.

To increase consistency, you can disable automatic :term:`failover`;
however, disabling automatic failover sacrifices availability.

Maximize Availability
~~~~~~~~~~~~~~~~~~~~~

To permit read operations when possible, use
:readmode:`primaryPreferred`. When there's a primary you will get
consistent reads [#edge-cases-2-primaries]_, but if there is no primary
you can still query :term:`secondaries <secondary>`. However, when
using this read mode, consider the situation described in
:ref:`caveat-secondaryPreferred`.

Minimize Latency
~~~~~~~~~~~~~~~~

To always read from a low-latency node, use :readmode:`nearest`. The
driver or :binary:`~bin.mongos` will read from the nearest member and
those no more than 15 milliseconds [#secondary-acceptable-latency]_
further away than the nearest member.

:readmode:`nearest` does *not* guarantee consistency. If the nearest
member to your application server is a secondary with some replication
lag, queries could return stale data. :readmode:`nearest` only
reflects network distance and does not reflect I/O or CPU load.

Query From Geographically Distributed Members
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the members of a replica set are geographically distributed, you
can create replica tags based that reflect the location of the instance and
then configure your application to query the members nearby.

For example, if members in "east" and "west" data centers are
:ref:`tagged <replica-set-configuration-tag-sets>` ``{'dc': 'east'}`` and
``{'dc': 'west'}``, your application servers in the east data center can read
from nearby members with the following read preference:

.. code-block:: javascript

   db.collection.find().readPref('nearest', [ { 'dc': 'east' } ])

Although :readmode:`nearest` already favors members with low network latency,
including the tag makes the choice more predictable.

.. _caveat-secondaryPreferred:

``secondary`` vs ``secondaryPreferred``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For specific dedicated queries (e.g. ETL, reporting), you may shift the
read load from the primary by using the :readmode:`secondary` read
preference mode. For this use case, the :readmode:`secondary` mode is
preferable to the :readmode:`secondaryPreferred` mode because
:readmode:`secondaryPreferred` risks the following situation: if all
secondaries are unavailable and your replica set has enough :term:`arbiters
<arbiter>` [#arbiter-limit]_ to prevent the primary from stepping down,
then the primary will receive all traffic from the clients. If the
primary is unable to handle this load, the queries will compete with
the writes. For this reason, use read preference :readmode:`secondary` to
distribute these specific dedicated queries instead of
:readmode:`secondaryPreferred`.

.. [#arbiter-limit]
   In general, avoid deploying more than one arbiter per replica set.

Read Preferences for Database Commands
--------------------------------------

Because some :term:`database commands <database command>` read and
return data from the database, all of the official drivers support
full :ref:`read preference mode semantics <replica-set-read-preference-modes>`
for the following commands:

- :dbcommand:`group`
- :dbcommand:`mapReduce` [#inline-map-reduce]_
- :dbcommand:`aggregate` [#aggregation-out]_
- :dbcommand:`collStats`
- :dbcommand:`dbStats`
- :dbcommand:`count`
- :dbcommand:`distinct`
- :dbcommand:`geoNear`
- :dbcommand:`geoSearch`
- :dbcommand:`parallelCollectionScan`

:binary:`~bin.mongos` routes commands to shards using read preferences.

.. [#capacity-planning] If your set has more than one secondary, and
   you use the :readmode:`secondary` read preference mode, consider
   the following effect. If you have a :ref:`three member replica set
   <replica-set-three-members>` with a primary and two secondaries,
   and one secondary becomes unavailable, all :readmode:`secondary`
   queries must target the remaining secondary. This will double the
   load on this secondary. Plan and provide capacity to support this
   as needed.

.. [#secondary-acceptable-latency] This threshold is configurable. See
   :setting:`~replication.localPingThresholdMs` for :binary:`~bin.mongos` or your driver
   documentation for the appropriate setting.

.. [#inline-map-reduce] Only "inline" :dbcommand:`mapReduce`
   operations that do not write data support read preference,
   otherwise these operations must run on the :term:`primary`
   members.

.. [#aggregation-out] Using the ``$out`` pipeline operator forces the
   aggregation pipeline to run on the primary.

.. [#edge-cases-2-primaries]

   .. include:: /includes/footnote-two-primaries-edge-cases.rst
