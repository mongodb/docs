.. _query-predicates-ref:
.. _query-projection-operators-top:
.. _query-selectors:

================
Query Predicates
================

.. meta::
  :description: Learn about query predicates in MongoDB. Use these expressions to filter documents in ad-hoc CRUD commands and aggregation pipelines

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Query predicates are expressions that return a boolean that indicates
whether a document matches a specified query. For example, ``{ name: {
$eq: "Alice" } }`` is a query predicate that returns documents where the
value of the ``"name"`` field is the string ``"Alice"``.

To match the correct documents, you can use the following types of
operators in query predicates:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Operator Type
     - Description

   * - :ref:`query-selectors-arrays`
     - Return data based on array conditions.

   * - :ref:`query-selectors-bitwise`
     - Return data based on bit position conditions.

   * - :ref:`query-selectors-comparison`
     - Return data based on value comparisons such as less than and
       greater than.

   * - :ref:`query-selectors-data-type`
     - Return data based on field existence or data types. 

   * - :ref:`query-selectors-misc`
     - Perform specialized functions in query predicates.

   * - :ref:`query-selectors-logical`
     - Return data based on boolean logic (and, or, and nor).

   * - :ref:`query-selectors-geospatial`
     - Return data based on geospatial query predicates, such as
       containment within a region on the surface of the Earth.

Alphabetical List of Operators
------------------------------

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Name
     - Description

   * - :query:`$all`
     - Matches arrays that contain all elements specified in the query.

   * - :query:`$and`
     - .. include:: /includes/query-predicates/and-desc.rst

   * - :query:`$bitsAllClear`
     - Matches numeric or binary values in which a set of bit positions
       *all* have a value of ``0``.

   * - :query:`$bitsAllSet`
     - Matches numeric or binary values in which a set of bit positions
       *all* have a value of ``1``.

   * - :query:`$bitsAnyClear`
     - Matches numeric or binary values in which *any* bit from a set of
       bit positions has a value of ``0``.

   * - :query:`$bitsAnySet`
     - Matches numeric or binary values in which *any* bit from a set of
       bit positions has a value of ``1``.

   * - :query:`$elemMatch`
     - .. include:: /includes/query-predicates/elemMatch-desc.rst

   * - :query:`$eq`
     - Matches values that are equal to a specified value.

   * - :query:`$exists`
     - Matches documents that have the specified field.

   * - :query:`$expr`
     - .. include:: /includes/query-predicates/expr-desc.rst

   * - :query:`$geoIntersects`
     - Selects geometries that intersect with a :term:`GeoJSON` geometry.
       The :ref:`2dsphere <2dsphere-index>` index supports
       :query:`$geoIntersects`.

   * - :query:`$geoWithin`
     - Selects geometries within a bounding :ref:`GeoJSON geometry
       <geospatial-indexes-store-geojson>`. The :ref:`2dsphere
       <2dsphere-index>` and :ref:`2d <2d-index>` indexes support
       :query:`$geoWithin`.

   * - :query:`$gt`
     - Matches values that are greater than a specified value.

   * - :query:`$gte`
     - Matches values that are greater than or equal to a specified
       value.
     
   * - :query:`$jsonSchema`
     - .. include:: /includes/query-predicates/jsonSchema-desc.rst

   * - :query:`$in`
     - Matches any of the values specified in an array.

   * - :query:`$lt`
     - Matches values that are less than a specified value.

   * - :query:`$lte`
     - Matches values that are less than or equal to a specified value.

   * - :query:`$mod`
     - Matches documents based on the result of a modulo operation on a
       field value.

   * - :query:`$ne`
     - Matches all values that are not equal to a specified value.

   * - :query:`$near`
     - Returns geospatial objects in proximity to a point.
       Requires a geospatial index. The ``2dsphere``
       and ``2d`` indexes support :query:`$near`.

   * - :query:`$nearSphere`
     - Returns geospatial objects in proximity to a point on a sphere.
       Requires a geospatial index. The ``2dsphere``
       and ``2d`` indexes support :query:`$nearSphere`.

   * - :query:`$nin`
     - .. include:: /includes/query-predicates/nin-desc.rst

   * - :query:`$nor`
     - .. include:: /includes/query-predicates/nor-desc.rst

   * - :query:`$not`
     - Inverts the effect of a query predicate and returns documents
       that do *not* match the query predicate.

   * - :query:`$or`
     - .. include:: /includes/query-predicates/or-desc.rst

   * - :query:`$regex`
     - Matches documents where values match a specified regular expression.

   * - :query:`$size`
     - .. include:: /includes/query-predicates/size-desc.rst

   * - :query:`$type`
     - Matches documents if a field is of the specified type.

   * - :query:`$where`
     - Matches documents that satisfy a JavaScript expression.

.. toctree::
   :hidden:

   Arrays </reference/mql/query-predicates/arrays>
   Bitwise </reference/mql/query-predicates/bitwise>
   Comparison </reference/mql/query-predicates/comparison>
   Data Type </reference/mql/query-predicates/data-type>
   Geospatial </reference/mql/query-predicates/geospatial>
   Logical </reference/mql/query-predicates/logical>
   Miscellaneous </reference/mql/query-predicates/misc>
