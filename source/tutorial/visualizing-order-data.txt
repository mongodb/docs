======================
Visualizing Order Data
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

*Total Estimated Time to Complete: 20-30 minutes*

Introduction
------------

This tutorial walks through the features and capabilities of |charts|.
You will examine and visualize a :doc:`data source </data-sources>`
containing order data from an office supply company.

This tutorial demonstrates how to create a
:doc:`dashboard </dashboards>` containing charts of various types, and
shows how to effectively use each chart's respective properties
to obtain powerful visualizations.

After completing the tutorial, you will have a dashboard which looks
similar to the following:

.. figure:: /images/charts/order-tutorial-dashboard-final.png
   :figwidth: 750px
   :alt: Finished Tutorial Dashboard

Prerequisites and Setup
-----------------------

*Time to Complete: 8 minutes*

The following items are required to complete this tutorial:

- A `MongoDB Atlas <https://www.mongodb.com/cloud/atlas>`_ cluster

  Refer to
  `this page <https://docs.atlas.mongodb.com/create-new-cluster/>`_ for
  instructions on creating an Atlas cluster.

- :manual:`mongoimport </reference/program/mongoimport/>`

  ``mongoimport`` is included in the Community and Enterprise versions
  of MongoDB available in the
  `download center <https://www.mongodb.com/download-center#enterprise>`_.

Download the example dataset from
https://raw.githubusercontent.com/mongodb/docs-assets/charts-tutorial/mgenerate-order-data.json.
To download the documents, right-click on the URL and select
:guilabel:`Save Link As`. This file contains the data you will import
into the ``test.supplySales`` collection of your Atlas cluster in the
following step.

To give an idea of the data you will visualize, here is a sample
document from the dataset:

.. code-block:: json

   {
     "_id": {"$oid":"5afb2c3dc09c8d2dd5852cf2"},
     "saleDate":{"$date":"2017-11-08T19:06:53.449Z"},
     "items":[
       {
         "name":"envelopes",
         "tags":["stationary","office","general"],
         "price":{"$numberDecimal":"9.83"},
         "quantity":10
       },
       {
         "name":"pens",
         "tags":["office","writing","school","stationary"],
         "price":{"$numberDecimal":"73.62"},
         "quantity":2
       },
       {
         "name":"laptop",
         "tags":["office","school","electronics"],
         "price":{"$numberDecimal":"595.72"},
         "quantity":4
       },
       {
         "name":"notepad",
         "tags":["office","writing","school"],
         "price":{"$numberDecimal":"34.65"},
         "quantity":3
       }
     ],
     "storeLocation":"Seattle",
     "customer":{
       "gender":"M",
       "age":45,
       "email":"uga@we.so",
       "satisfaction":4
     },
     "couponUsed":false,
     "purchaseMethod":"Online"
   }

Import the Data
~~~~~~~~~~~~~~~

Now that you have a file containing the documents you will be
visualizing in |charts-short|, use
:manual:`mongoimport </reference/program/mongoimport/>` to import the
contents of that file into the ``test.supplySales`` collection.

.. code-block:: javascript

   mongoimport --host <myAtlasHost> --ssl -u <USER> -p <PASSWORD> --authenticationDatabase admin \
   --db test --collection supplySales \
   --drop --file <path/to/mgenerate-order-data.json>

.. note::

   Refer to the :manual:`mongoimport </reference/program/mongoimport/>`
   page to familiarize yourself with the proper command syntax.

   Additionally, the Atlas documentation for `Connecting to a
   Cluster using Command Line Tools <https://docs.atlas.mongodb.com/command-line-tools/#command-line-tools-mongoimport>`_
   may prove helpful.

Add the Data Collection as a Data Source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now that the data is in the desired collection, add the collection as a
:doc:`data source </data-sources>` in |charts|. Adding a
collection as a data source links the collection to |charts-short| and
allows us to create visualizations using that data.

.. note::

   Before completing this procedure, ensure that you have allowed your
   Atlas cluster to
   `accept connections <https://docs.atlas.mongodb.com/security-whitelist/>`_
   from |charts|.

1. Click the :guilabel:`Data Sources` tab.

#. Click :guilabel:`New Data Source`.

#. In the :guilabel:`New Data Source` dialog, enter the
   :manual:`connection string </reference/connection-string/index.html>`
   which points to the cluster containing the imported data.

   .. example::

      The following connection string points to an Atlas cluster called
      ``jefftestcluster`` and authenticates a user named ``admin`` on
      the ``admin`` database.

      .. code-block:: none

         mongodb://admin:<password>@jefftestcluster-shard-00-00-bfkni.mongodb.net:27017,jefftestcluster-shard-00-01-bfkni.mongodb.net:27017,jefftestcluster-shard-00-02-bfkni.mongodb.net:27017/test?ssl=true&replicaSet=JeffTestCluster-shard-0&authSource=admin

      For further instructions on determining your Atlas connection
      string, see the
      `Connect Your Application <https://docs.atlas.mongodb.com/driver-connection/#connect-your-application>`_
      Atlas documentation.

   .. important::

      |charts| cannot accept connection strings in
      :manual:`DNS seedlist format
      </reference/connection-string/index.html#dns-seedlist-connection-format>`.
      This means when copying your connection string in Atlas, use the
      string which applies to versions prior to driver version 3.6.

#. Click :guilabel:`Connect`.

#. Select the ``test.supplySales`` collection.

#. Click :guilabel:`Set Permissions`.

   Leave the permissions as the default :guilabel:`Open Access` option.

   .. note::

      User permissions are not available for |charts| Beta.

#. Click :guilabel:`Publish Data Source`.

Create a New Dashboard
----------------------

*Time to Complete: 3 minutes*

Now that you have created your data source and linked it to the
order data collection, create a dashboard to hold all of your
visualizations:

1. Click the :guilabel:`Dashboards` tab.

#. Click the :guilabel:`New Dashboard` button.

#. Copy the following into the :guilabel:`Title` input:

   .. code-block:: none

      Super Supply Store Orders

4. Copy the following into the :guilabel:`Description` input:

   .. code-block:: none

      Sales, Customer Analytics, and More.

#. Click :guilabel:`Create`.

After clicking create, |charts-short| navigates you to your newly
created dashboard and prompts you to add your first chart.

Build Charts
------------

*Time to Complete: 16 minutes (4 minutes per chart)*

The following sections of the tutorial walk through
:doc:`building each chart </building-charts>` for your dashboard. You
will be populating the dashboard with the following visualizations:

- A :ref:`column chart <tutorial-column-chart>` for total sales by
  store location

- A :ref:`donut chart <tutorial-donut-chart>` showing the frequencies
  of tags occurring in each item sold

- A :ref:`grouped column chart <tutorial-grouped-column>` showing the
  most common items sold in each store location

- An :ref:`area chart <tutorial-area-chart>` showing a distribution of
  customer ages

To create each chart, you will populate the chart's
:ref:`encoding channels <encoding-channels>` with fields from your
schema. Encoding channels represent the information passed to
|charts| which allows |charts-short| to create the visualization.
For more information on encoding channels and the different types of
channels available, refer to the
:ref:`encoding channels section <encoding-channels>` of the
documentation.

.. _tutorial-column-chart:

Column Chart Showing Total Sales by Store Location
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Looking at the data fields available in the schema, some of the most
valuable information you can relay revolves around revenue. You may
want to know how various stores are performing, specifically if there
are any stores significantly under or overperforming compared to
others.

A column chart works well for this type of visualization because you can
easily compare individual store revenue based on the size of each
column.

.. include:: /includes/steps/column-chart-sales-by-store.rst

.. _tutorial-donut-chart:

Donut Chart Showing Most Common Tags for Items Sold
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Next, add a chart where you can quickly see which types of items
the company is selling the most of. This information will be helpful
for the company marketing team to know how effectively direct
advertising.

In this scenario, your manager has expressed interest specifically
in items sold from the ``Denver`` and ``New York`` store locations.
Additionally, they have requested to only visualize sales which
contain an item costing ``$1200`` or more, in an effort to more closely
examine the new line of laptops being sold at these locations and what
types of items are being bought with them. You can accomplish this
using a :ref:`filter <charts-filter-documents>` in your chart, as shown
in the following procedure:

.. include:: /includes/steps/donut-chart-item-tags.rst

.. _tutorial-grouped-column:

Grouped Column Chart Showing Most Common Items Sold by Store Location
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By visualizing which items are sold most commonly at each store, you
can help ensure each store is properly stocked with the items they
are most likely to sell out of. A grouped column chart creates a group
within the chart for each store location and display columns within
each group reflecting the relative sales of each item.

.. include:: /includes/steps/grouped-column-most-common-items.rst

Rearranging and Resizing Charts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The dashboard is starting to get crowded at the top row with plenty of
empty space below. You can make the display easier to digest by
rearranging and resizing some of the charts. |charts-short| makes this
a straight-forward process by providing simple drag and drop
capabilities for reorganizing a dashboard.

You can rearrange charts by dragging the top-left corner of the chart,
and resize charts by dragging the bottom-right corner. For additional
details on rearranging and resizing charts, see the
:ref:`Manage Existing Dashboards <manage-existing-dashboards>` section.

Try reorganizing your dashboard to get something like this:

.. figure:: /images/charts/order-tutorial-dashboard-organized.png
   :figwidth: 750px
   :alt: Organized Dashboard

.. _tutorial-area-chart:

Area Chart Showing Age Distribution of Customers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the final chart of your dashboard, highlight some of
the customer analytic information available in the schema. By
visualizing the age range and distribution of store customers, you can
ensure that any advertising the store performs is directed where it
will be seen by the most potential buyers.

.. include:: /includes/steps/area-chart-age-distribution.rst

Conclusion and Extending the Dashboard
--------------------------------------

You now have an effective orders dashboard which provides easily
accessible insight into revenue data, sales details, and customer
analytics. However, with the information you have available in your
dataset, there are several ways in which you might be able to
add additional charts and extend the dashboard even further. You may
want to depict:

- Average customer satisfaction by store location

- The amount of money customers in various age groups typically spend
  on a purchase

- Which items are most commonly bought in bulk, utilizing the
  ``items.quantitiy`` field

Try adding some of these additional charts to the dashboard and see
what other interesting correlations between variables you may be able
to uncover.
