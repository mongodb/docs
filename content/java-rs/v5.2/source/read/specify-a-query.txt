.. _java-rs-specify-query:

===============
Specify a Query
===============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: expressions, operations, read, write, filter

Overview
--------

In this guide, you can learn how to specify a query by using the
{+driver-short+}.

.. include:: /includes/reactor-note.rst

This guide uses the ``Flux Publisher``, which is a ``Publisher`` implementation
from the {+pr+} library. In {+java-rs+}, you must use
``Publisher`` implementations to control how data is transmitted in your
application. To learn more about the ``Flux`` class, see `Flux <https://projectreactor.io/docs/core/release/reference/#flux>`__ in the Project
Reactor documentation. 

You can refine the set of documents that a query returns by creating a
**query filter**. A query filter is an expression that specifies the search
criteria MongoDB uses to match documents in a read or write operation.
In a query filter, you can prompt the driver to search for documents with an
exact match to your query, or you can compose query filters to express more
complex matching criteria.

Sample Data
~~~~~~~~~~~

The examples in this guide run operations on a collection called
``fruits`` that contains the following documents:

.. code-block:: json

   { "_id": 1, "name": "apples", "qty": 5, "rating": 3, "color": "red", "type": ["fuji", "honeycrisp"] },
   { "_id": 2, "name": "bananas", "qty": 7, "rating": 4, "color": "yellow", "type": ["cavendish"] },
   { "_id": 3, "name": "oranges", "qty": 6, "rating": 2, "type": ["naval", "mandarin"] },
   { "_id": 4, "name": "pineapple", "qty": 3, "rating": 5, "color": "yellow" },

The following code example shows how to create a database and collection, then
insert the sample documents into your collection:

.. literalinclude:: /includes/read-ops/specify-queries.java
   :start-after: start-sample-data
   :end-before: end-sample-data
   :language: java
   :copyable:

Exact Match
-----------

Literal value queries return documents with an exact match to your query filter.
To return documents with an exact match, use the ``eq()`` comparison operator method.

The following example specifies an ``eq()`` comparison operator method as the
query filter parameter in the ``find()`` method. The code returns all documents with a ``color`` field value of ``"yellow"``.

.. io-code-block::
   :copyable: 

   .. input:: /includes/read-ops/specify-queries.java
      :start-after: start-find-exact
      :end-before: end-find-exact
      :language: java

   .. output::
      
      {'_id': 2, 'name': 'bananas', 'qty': 7, 'rating': 4, 'color': 'yellow', 'type': ['cavendish']}
      {'_id': 4, 'name': 'pineapple', 'qty': 3, 'rating': 5, 'color': 'yellow'}

.. tip:: Find All Documents

   To find all documents in a collection, call the ``find()`` method without
   specifying any parameters. The following example finds all documents in a
   collection:

   .. literalinclude:: /includes/read-ops/specify-queries.java
      :start-after: start-find-all
      :end-before: end-find-all
      :language: java
      :copyable:

Comparison Operators
--------------------

Comparison operators evaluate a document field value against a specified value
in your query filter. The following is a list of common comparison operator methods:

- ``gt()``: Greater than
- ``lte()``: Less than or Equal
- ``ne()``: Not equal

To view a full list of comparison operators, see the :manual:`Comparison Query Operators
</reference/operator/query-comparison/>` guide in the {+mdb-server+} manual.

The following example specifies a ``gt()`` comparison operator method in a query filter as a
parameter to the ``find()`` method. The code returns all documents with a
``rating`` field value greater than ``2``.

.. io-code-block::
   :copyable: 

   .. input:: /includes/read-ops/specify-queries.java
      :start-after: start-find-comparison
      :end-before: end-find-comparison
      :language: java

   .. output::

      {'_id': 1, 'name': 'apples', 'qty': 5, 'rating': 3, 'color': 'red', 'type': ['fuji', 'honeycrisp']}
      {'_id': 2, 'name': 'bananas', 'qty': 7, 'rating': 4, 'color': 'yellow', 'type': ['cavendish']}
      {'_id': 4, 'name': 'pineapple', 'qty': 3, 'rating': 5, 'color': 'yellow'}

Logical Operators
-----------------

Logical operators match documents by using logic applied to the results of two or
more sets of expressions. The following is a list of logical operator methods: 

- ``and()``, which returns all documents that match the conditions of *all* clauses
- ``or()``, which returns all documents that match the conditions of *one* clause
- ``nor()``, which returns all documents that *do not* match the conditions of any clause
- ``not()``, which returns all documents that *do not* match the expression

To learn more about logical operators, see the :manual:`Logical Query Operators
</reference/operator/query-logical/>` guide in the {+mdb-server+} manual.

The following example specifies an ``or()`` logical operator method in a query filter as a
parameter to the ``find()`` method. The code returns all documents with a
``qty`` field value greater than ``5`` **or** a ``color`` field value of
``"yellow"``.

.. io-code-block::
   :copyable:

   .. input:: /includes/read-ops/specify-queries.java
      :start-after: start-find-logical
      :end-before: end-find-logical
      :language: java

   .. output::

      {'_id': 2, 'name': 'bananas', 'qty': 7, 'rating': 4, 'color': 'yellow', 'type': ['cavendish']}
      {'_id': 3, 'name': 'oranges', 'qty': 6, 'rating': 2, 'type': ['naval', 'mandarin']}
      {'_id': 4, 'name': 'pineapple', 'qty': 3, 'rating': 5, 'color': 'yellow'}

Array Operators
---------------

Array operators match documents based on the value or quantity of elements in an
array field. The following is a list of available array operator methods:

- ``all()``, which returns documents with arrays that contain all elements in the query
- ``elemMatch()``, which returns documents if an element in their array field matches all conditions in the query
- ``size()``, which returns all documents with arrays of a specified size

To learn more about array operators, see the :manual:`Array Query Operators
</reference/operator/query-array/>` guide in the {+mdb-server+} manual.

The following example specifies a ``size()`` array operator method in a query filter as a
parameter to the ``find()`` method. The code returns all documents with a
``type`` array field containing ``2`` elements.

.. io-code-block::
   :copyable:

   .. input:: /includes/read-ops/specify-queries.java
      :start-after: start-find-array
      :end-before: end-find-array
      :language: java

   .. output::

      {'_id': 1, 'name': 'apples', 'qty': 5, 'rating': 3, 'color': 'red', 'type': ['fuji', 'honeycrisp']}
      {'_id': 3, 'name': 'oranges', 'qty': 6, 'rating': 2, 'type': ['naval', 'mandarin']}

Element Operators
-----------------

Element operators query data based on the presence or type of a field. The
following is a list of available element operator methods:

- ``exists()``, which returns documents with the specified field
- ``type()``, which returns documents if a field is of the specified type

To learn more about element operators, see the :manual:`Element Query Operators
</reference/operator/query-element/>` guide in the {+mdb-server+} manual.

The following example specifies an ``exists()`` element operator method in a query filter as a
parameter to the ``find()`` method. The code returns all documents that have a
``color`` field.

.. io-code-block::
   :copyable:

   .. input:: /includes/read-ops/specify-queries.java
      :start-after: start-find-element
      :end-before: end-find-element
      :language: java

   .. output::

      {'_id': 1, 'name': 'apples', 'qty': 5, 'rating': 3, 'color': 'red', 'type': ['fuji', 'honeycrisp']}
      {'_id': 2, 'name': 'bananas', 'qty': 7, 'rating': 4, 'color': 'yellow', 'type': ['cavendish']}
      {'_id': 4, 'name': 'pineapple', 'qty': 3, 'rating': 5, 'color': 'yellow'}

Evaluation Operators
--------------------

Evaluation operators return data based on evaluations of either individual
fields or the entire collection's documents. The following is a list of common
evaluation operator methods:

- ``text()``, which performs a text search on the documents
- ``regex()``, which returns documents that match a specified regular expression
- ``mod()``, which performs a :wikipedia:`modulo <Modulo>` operation on the value of a field and
  returns documents where the remainder is a specified value

To view a full list of evaluation operators, see the :manual:`Evaluation Query Operators
</reference/operator/query-evaluation/>` guide in the {+mdb-server+} manual.

The following example specifies a ``regex()`` evaluation operator method in a query filter as a
parameter to the ``find()`` method. The code uses a regular expression to return
all documents with a ``name`` field value that has at least two consecutive
``"p"`` characters.

.. io-code-block::
   :copyable:

   .. input:: /includes/read-ops/specify-queries.java
      :start-after: start-find-evaluation
      :end-before: end-find-evaluation
      :language: java
   .. output::

      {'_id': 1, 'name': 'apples', 'qty': 5, 'rating': 3, 'color': 'red', 'type': ['fuji', 'honeycrisp']}
      {'_id': 4, 'name': 'pineapple', 'qty': 3, 'rating': 5, 'color': 'yellow'}

Additional Information
----------------------

To learn more about querying documents, see the :manual:`Query Documents
</tutorial/query-documents/>` guide in the {+mdb-server+} manual.

.. To learn more about retrieving documents with the {+driver-short+}, see
.. :ref:`java-rs-retrieve`.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `find() <{+api+}/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/MongoCollection.html#find()>`__
- `FindPublisher <{+api+}/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/FindPublisher.html>`__
