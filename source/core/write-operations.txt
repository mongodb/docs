.. index:: write operations
.. index:: crud; write operations

================
Write Operations
================

.. default-domain:: mongodb

A write operation is any operation that creates or modifies data in the
MongoDB instance. In MongoDB, write operations target a single
:term:`collection`. All write operations in MongoDB are atomic on the
level of a single :term:`document`.

There are three classes of write operations in MongoDB: insert, update,
and remove. Insert operations add new data to a collection. Update
operations modify an existing data, and remove operations delete data
from a collection. No insert, update, or remove can affect more than
one document atomically.

For the update and remove operations, you can specify criteria, or
conditions, that identify the documents to update or remove. These
operations use the same query syntax to specify the criteria as
:doc:`read operations </core/read-operations>`.

After issuing these modification operations, MongoDB allows
applications to determine the level of acknowledgment returned from
the database. See
:doc:`/core/write-concern`.

Create
------

Create operations add new :term:`documents <document>` to a collection.
In MongoDB, the :method:`db.collection.insert()` method perform create
operations.

The following diagram highlights the components of a MongoDB insert
operation:

.. include:: /images/crud-annotated-mongodb-insert.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-insert.rst

.. example::

   .. code-block:: javascript

      db.users.insert( 
         {
            name: "sue",
            age: 26,
            status: "A"
         }
      )

   This operation inserts a new documents into the ``users``
   collection. The new document has four fields ``name``, ``age``, and
   ``status``, and an ``_id`` field. MongoDB always adds the ``_id``
   field to the new document if the field does not exist.

For more information, see :method:`db.collection.insert()` and
:doc:`/tutorial/insert-documents`.

An ``upsert`` is an operation that performs either an update of an
existing document or an insert of a new document if the document to
modify does not exist. With an ``upsert``, applications do not need to
make two separate calls to the database in order to decide between
performing an update or an insert operation. Both the
:method:`db.collection.update()` method and the
:method:`db.collection.save()` method can perform an ``upsert``. See
:method:`db.collection.update()` and :method:`db.collection.save()` for
details on performing an upsert with these methods.

Insert Behavior
~~~~~~~~~~~~~~~

If you add a new document *without* the :term:`_id` field, the client
library or the :program:`mongod` instance adds an ``_id`` field and
populates the field with a unique :term:`ObjectId <objectid>`.

If you specify the ``_id`` field, the value must be unique within the
collection. For operations with :ref:`write concern <write-concern>`,
if you try to create a document with a duplicate ``_id`` value,
:program:`mongod` returns a duplicate key exception.

Update
------

Update operations modify existing :term:`documents <document>` in a
:term:`collection`. In MongoDB, :method:`db.collection.update()` and
the :method:`db.collection.save()` methods perform update operations.
The :method:`db.collection.update()` method can accept a query criteria
to determine which documents to update as well as an option to update
multiple rows. The method can also accept options that affect its
behavior such as the ``$multi`` option to update multiple documents.

The following diagram highlights the components of a MongoDB update
operation:

.. include:: /images/crud-annotated-mongodb-update.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-update.rst

.. example::

   .. code-block:: javascript

      db.users.update( 
         { age: { $gt: 18 } },
         { $set: { status: "A" } },
         { $multi: true }
      )

   This update operation on the ``users`` collection sets the
   ``status`` field to ``A`` for the documents that match the criteria
   of ``age`` greater than ``18``.

For more information, see :method:`db.collection.update()` and
:method:`db.collection.save()`, and :doc:`/tutorial/modify-documents`
for examples.

Update Behavior
~~~~~~~~~~~~~~~

By default, the :method:`db.collection.update()` method updates a
**single** document. However, with the ``multi`` option,
:method:`~db.collection.update()` can update all documents in a
collection that match a query.

The :method:`db.collection.update()` method either updates specific
fields in the existing document or replaces the document. See
:method:`db.collection.update()` for details.

.. include:: /includes/fact-update-field-order.rst

The :method:`db.collection.save()` method replaces a document and can
only update a single document. See :method:`db.collection.save()` and
:doc:`/tutorial/insert-documents` for more information

Delete
------

Delete operations remove documents from a collection. In MongoDB,
:method:`db.collection.remove()` method performs delete operations. The
:method:`db.collection.remove()` method can accept a query criteria to
determine which documents to remove.

The following diagram highlights the components of a MongoDB remove
operation:

.. include:: /images/crud-annotated-mongodb-remove.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-delete.rst

.. example::

   .. code-block:: javascript

      db.users.remove( 
         { status: "D" }
      )

   This delete operation on the ``users`` collection removes all
   documents that match the criteria of ``status`` equal to ``D``.

For more information, see :method:`db.collection.remove()` method and
:doc:`/tutorial/remove-documents`.

Remove Behavior
~~~~~~~~~~~~~~~

By default, :method:`db.collection.remove()` method removes all
documents that match its query. However, the method can accept a flag
to limit the delete operation to a single document.

.. _write-operations-isolation:

Isolation of Write Operations
-----------------------------

The modification of a single document is always atomic, even if the
write operation modifies multiple sub-documents *within* that
document. For write operations that modify multiple documents, the
operation as a whole is not atomic, and other operations may
interleave.

No other operations are atomic. You can, however, attempt to isolate a
write operation that affects multiple documents using the
:doc:`isolation operator </reference/operator/isolated>`.

To isolate a sequence of write operations from other read and write
operations, see :doc:`/tutorial/perform-two-phase-commits`.

Related Concepts
----------------

The following documents further describe write operations:

.. include:: /includes/dfn-list-crud-write-operations.rst

.. include:: /includes/toc-crud-write-operations.rst
