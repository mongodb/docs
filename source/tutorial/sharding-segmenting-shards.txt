==========================================
Segmenting Data by Application or Customer
==========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB allows you to associate ranges of shard keys to one or more shards
using :ref:`tags <tag-aware-sharding>`. MongoDB routes data to a target
shard respecting any configured tags.

This tutorial shows you how to segment data using tag-aware sharding.

Consider the following scenarios where segmenting data by application or
customer may be necessary:

* A database serving multiple applications
* A database serving multiple customers
* A database that requires isolating ranges or subsets of application
  or customer data
* A database that requires resource allocation for ranges or subsets of
  application or customer data

This diagram illustrates a sharded cluster using tags to
segment data based on application or customer. This allows for data to
be isolated to specific shards. Additionally, each shard can have specific
hardware allocated to fit the performance requirement of the data stored on
that shard.

.. include:: /images/sharding-segmenting-shards-overview.rst

Scenario
--------

An application tracks the score of a user along with a ``client`` field,
storing scores in the ``gamify`` database under the ``users`` collection.
Each possible value of ``client`` requires its own tag to allow for
data segmentation. It also allows the administrator to optimize the
hardware for each shard associated to a ``client`` for performance and cost.

The following documents represent a partial view of two users:

.. code-block:: javascript

   {
     "_id" : ObjectId("56f08c447fe58b2e96f595fa"),
     “client" : “robot”,
     “userid" : 123,
     “high_score" : 181,
     ...,
   }
   {
     "_id" : ObjectId("56f08c447fe58b2e96f595fb"),
     “client" : “fruitos”,
     “userid" : 456,
     “high_score" : 210,
     ...,
   }

Shard Key
~~~~~~~~~

The ``users`` collection uses the ``{ client : 1, userid : 1 }`` compound
index as the shard key.

The ``client`` field in each document allows creating a tag range on each
distinct client value.

The ``userid`` field provides a high :ref:`cardinality
<shard-key-cardinality>` and low :ref:`frequency <shard-key-frequency>`
component to the shard key relative to ``country``.

See :ref:`Choosing a Shard Key <sharding-shard-key-requirements>` for more
general instructions on selecting a shard key.

Architecture
~~~~~~~~~~~~

The application requires tagging each shard in the cluster for a specific
``client``.

The sharded cluster deployment currently consists of four :term:`shards
<shard>`.

.. include:: /images/sharding-segmenting-shards-architecture.rst

Tags
~~~~

For this application, there are two client tags.

.. include:: /images/sharding-segmenting-shards-tags.rst

Robot client ("robot")
   This tag represents all documents where ``client : robot``.

FruitOS client ("fruitos")
   This tag represents all documents where ``client : fruitos``.

Write Operations
~~~~~~~~~~~~~~~~

With tag-aware sharding, if an inserted or updated document matches a
configured tag range, it can only be written to a shard with the related tag.

MongoDB can write documents that do not match a configured tag range to any
shard in the cluster.

.. note:: 

   The behavior described above requires the cluster to be in a steady state
   with no chunks violating a configured tag range. See the following section
   on the :ref:`balancer <sharding-tiered-hardware-balancing>` for more
   information.

Read Operations
~~~~~~~~~~~~~~~

MongoDB can route queries to a specific shard if the query includes at least
the ``client`` field.

For example, MongoDB can attempt a :ref:`targeted read operation
<sharding-mongos-targeted>` on the following query:

.. code-block:: javascript

   chatDB = db.getSiblingDB("gamify")
   chatDB.users.find( { "client" : "robot" , "userid" : "123" } )

Queries without the ``client`` field perform :ref:`broadcast operations
<sharding-mongos-broadcast>`.

Balancer
~~~~~~~~

The :ref:`balancer <sharding-balancing>` :ref:`migrates
<sharding-chunk-migration>` the tagged chunks to the appropriate shard. Until
the migration, shards may contain chunks that violate configured tag ranges
and tags. Once balancing completes, shards should only contain chunks whose
ranges do not violate its assigned tags and tag ranges.

Adding or removing tags or tag ranges can result in chunk migrations.
Depending on the size of your data set and the number of chunks a tag range
affects, these migrations may impact cluster performance. Consider running
your :ref:`balancer <sharding-balancing>` during specific scheduled windows.
See :ref:`sharding-schedule-balancing-window` for a tutorial on how to set a
scheduling window.

Security
~~~~~~~~

For sharded clusters running with :ref:`authorization`, authenticate as a user
with at least the :authrole:`clusterManager` role on the ``admin`` database.

Procedure
---------

You must be connected to a :program:`mongos` associated to the target
:term:`sharded cluster` to proceed. You cannot create tags by
connecting directly to a :term:`shard`.

.. include:: /includes/steps/sharding-segmenting-shards.rst



