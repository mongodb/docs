.. _csfle-tutorial-automatic-aws:
.. _fle-convert-to-a-remote-master-key:

=========================================================
Use Automatic {+csfle+} with AWS
=========================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This guide shows you how to build a {+csfle+} ({+csfle-abbrev+})-enabled
application using Amazon Web Services (AWS) {+kms-abbr+}.

After you complete the steps in this guide, you should have:

- A {+cmk-long+} hosted on an AWS KMS instance.
- A working client application that inserts encrypted documents
  using your {+cmk-long+}.

.. composable-tutorial::
   :options: interface, language
   :defaults: driver, nodejs

   .. selected-content:: 
      :selections: driver, java-sync

      Before You Get Started
      ----------------------

      .. include:: /includes/set-up-section.rst

      .. include:: /includes/fact-csfle-placeholder.rst

      Full Application Code 
      ~~~~~~~~~~~~~~~~~~~~~

      `Complete Java Application <{+sample-app-url-csfle+}/java/aws/reader/>`__

      Set Up the KMS
      --------------

      .. code-block:: java

         // You are viewing the Java synchronous driver code examples.
         // Use the dropdown menu to select a different driver.

      .. procedure::
         :style: normal

         .. step:: Create the {+cmk-long+}

            .. include:: /includes/tutorials/automatic/aws/cmk.rst

         .. step:: Create an AWS IAM User

            .. include:: /includes/tutorials/automatic/aws/user.rst

      Create the Application
      ----------------------

      .. procedure::
         :style: normal

         .. step:: Create a Unique Index on your {+key-vault-long+}

            Create a unique index on the ``keyAltNames`` field in your
            ``encryption.__keyVault`` namespace.

            .. literalinclude:: /includes/generated/in-use-encryption/csfle/java/aws/reader/src/main/java/com/mongodb/csfle/MakeDataKey.java
               :start-after: start-create-index
               :end-before: end-create-index
               :language: java
               :dedent:

         .. step:: Create a New {+dek-long+}

            .. include:: /includes/tutorials/automatic/aws/dek-java-sync.rst

            .. see:: Complete Code
             
               To view the complete code for making a {+dek-long+}, see
               `our Github repository <{+sample-app-url-csfle+}/java/aws/reader/src/main/java/com/mongodb/csfle/MakeDataKey.java>`__.

         .. step:: Configure the MongoClient

            .. tip::

               Follow the remaining steps in this tutorial in a separate file
               from the one created in the previous steps.

            To view the complete code for this file, see
            `our Github repository <{+sample-app-url-csfle+}/java/aws/reader/src/main/java/com/mongodb/csfle/InsertEncryptedDocument.java>`__.

            .. include:: /includes/tutorials/automatic/aws/client-java-sync.rst

         .. step:: Insert a Document with Encrypted Fields

            Use your {+csfle-abbrev+}-enabled
            ``MongoClient`` instance to insert a {+in-use-doc+} into the
            ``medicalRecords.patients`` namespace using the following code
            snippet:

            .. literalinclude:: /includes/generated/in-use-encryption/csfle/java/aws/reader/src/main/java/com/mongodb/csfle/InsertEncryptedDocument.java
               :start-after: start-insert
               :end-before: end-insert
               :language: java
               :dedent:

            When you insert a document, your {+csfle-abbrev+}-enabled client
            encrypts the fields of your document such that it resembles the following:

            .. literalinclude:: /includes/quick-start/inserted-doc-enc.json
               :language: json
               :copyable: false

            .. see:: Complete Code

               To view the complete code for inserting an encrypted document, see
               `our Github repository <{+sample-app-url-csfle+}/java/aws/reader/src/main/java/com/mongodb/csfle/InsertEncryptedDocument.java>`__.

         .. step:: Retrieve Your Document with Encrypted Fields

            Retrieve the {+in-use-doc+} you inserted in the
            Insert a Document with Encrypted Fields step of this guide.

            To show the functionality of {+csfle-abbrev+}, the following code snippet queries for
            your document with a client configured for automatic {+csfle-abbrev+} as well as
            a client that is not configured for automatic {+csfle-abbrev+}.

            .. literalinclude:: /includes/generated/in-use-encryption/csfle/java/aws/reader/src/main/java/com/mongodb/csfle/InsertEncryptedDocument.java
               :start-after: start-find
               :end-before: end-find
               :language: java
               :dedent:

            The output of the preceding code snippet should look like this:

            .. literalinclude:: /includes/quick-start/find-output.out
               :language: json
               :copyable: false

            .. see:: Complete Code

               To view the complete code for finding an encrypted document, see
               `our Github repository <{+sample-app-url-csfle+}/java/aws/reader/src/main/java/com/mongodb/csfle/InsertEncryptedDocument.java>`__.

   .. selected-content:: 
      :selections: driver, nodejs

      Before You Get Started
      ----------------------

      .. include:: /includes/set-up-section.rst

      .. include:: /includes/fact-csfle-placeholder.rst

      Full Application Code 
      ~~~~~~~~~~~~~~~~~~~~~

      `Complete Node.js Application <{+sample-app-url-csfle+}/node/aws/reader/>`__

      Set Up the KMS
      --------------

      .. code-block:: javascript

         // You are viewing the Node.js driver code examples.
         // Use the dropdown menu to select a different driver.

      .. procedure::
         :style: normal

         .. step:: Create the {+cmk-long+}

            .. include:: /includes/tutorials/automatic/aws/cmk.rst

         .. step:: Create an AWS IAM User

            .. include:: /includes/tutorials/automatic/aws/user.rst

      Create the Application
      ----------------------

      .. procedure::
         :style: normal

         .. _csfle-aws-create-index:

         .. step:: Create a Unique Index on your {+key-vault-long+}

            Create a unique index on the ``keyAltNames`` field in your
            ``encryption.__keyVault`` namespace.

            .. literalinclude::  /includes/generated/in-use-encryption/csfle/node/aws/reader/make_data_key.js
               :start-after: start-create-index
               :end-before: end-create-index
               :language: javascript
               :dedent:

         .. step:: Create a New {+dek-long+}

            .. include:: /includes/tutorials/automatic/aws/dek-nodejs.rst

            .. see:: Complete Code
             
               To view the complete code for making a {+dek-long+}, see
               `our Github repository <{+sample-app-url-csfle+}/node/aws/reader/make_data_key.js>`__.

         .. step:: Configure the MongoClient

            .. tip::

               Follow the remaining steps in this tutorial in a separate file
               from the one created in the previous steps.
            
            To view the complete code for this file, see
            `our Github repository <{+sample-app-url-csfle+}/node/aws/reader/insert_encrypted_document.js>`__.

            .. include:: /includes/tutorials/automatic/aws/client-nodejs.rst

         .. step:: Insert a Document with Encrypted Fields

            Use your {+csfle-abbrev+}-enabled
            ``MongoClient`` instance to insert a {+in-use-doc+} into the
            ``medicalRecords.patients`` namespace using the following code
            snippet:

            .. literalinclude:: /includes/generated/in-use-encryption/csfle/node/aws/reader/insert_encrypted_document.js
               :start-after: start-insert
               :end-before: end-insert
               :language: javascript
               :dedent:

            When you insert a document, your {+csfle-abbrev+}-enabled client
            encrypts the fields of your document such that it resembles the following:

            .. literalinclude:: /includes/quick-start/inserted-doc-enc.json
               :language: json
               :copyable: false

            .. see:: Complete Code

               To view the complete code for inserting a {+in-use-doc+}, see
               `our Github repository <{+sample-app-url-csfle+}/node/aws/reader/insert_encrypted_document.js>`__.

         .. step:: Retrieve Your Document with Encrypted Fields

            Retrieve the {+in-use-doc+} you inserted in the
            Insert a Document with Encrypted Fields step of this guide.

            To show the functionality of {+csfle-abbrev+}, the following code snippet queries for
            your document with a client configured for automatic {+csfle-abbrev+} as well as
            a client that is not configured for automatic {+csfle-abbrev+}.

            .. literalinclude:: /includes/generated/in-use-encryption/csfle/node/aws/reader/insert_encrypted_document.js
               :start-after: start-find
               :end-before: end-find
               :language: javascript
               :dedent:

            The output of the preceding code snippet should look like this:

            .. literalinclude:: /includes/quick-start/find-output.out
               :language: json
               :copyable: false

            .. see:: Complete Code

               To view the complete code for finding a {+in-use-doc+}, see
               `our Github repository <{+sample-app-url-csfle+}/node/aws/reader/insert_encrypted_document.js>`__.

   .. selected-content:: 
      :selections: driver, python

      Before You Get Started
      ----------------------

      .. include:: /includes/set-up-section.rst

      .. include:: /includes/fact-csfle-placeholder.rst

      Full Application Code 
      ~~~~~~~~~~~~~~~~~~~~~

      `Complete Python Application <{+sample-app-url-csfle+}/python/aws/reader/>`__

      Set Up the KMS
      --------------

      .. code-block:: python

         # You are viewing the Python driver code examples.
         # Use the dropdown menu to select a different driver.

      .. procedure::
         :style: normal

         .. step:: Create the {+cmk-long+}

            .. include:: /includes/tutorials/automatic/aws/cmk.rst

         .. step:: Create an AWS IAM User

            .. include:: /includes/tutorials/automatic/aws/user.rst

      Create the Application
      ----------------------

      .. procedure::
         :style: normal

         .. step:: Create a Unique Index on your {+key-vault-long+}

            Create a unique index on the ``keyAltNames`` field in your
            ``encryption.__keyVault`` namespace.

            .. literalinclude::  /includes/generated/in-use-encryption/csfle/python/aws/reader/make_data_key.py
               :start-after: start-create-index
               :end-before: end-create-index
               :language: python
               :dedent:

         .. step:: Create a New {+dek-long+}

            .. include:: /includes/tutorials/automatic/aws/dek-python.rst

            .. see:: Complete Code
             
               To view the complete code for making a {+dek-long+}, see
               `our Github repository <{+sample-app-url-csfle+}/python/aws/reader/make_data_key.py>`__.

         .. step:: Configure the MongoClient

            .. tip::

               Follow the remaining steps in this tutorial in a separate file
               from the one created in the previous steps.
            
            To view the complete code for this file, see
            `our Github repository <{+sample-app-url-csfle+}/python/aws/reader/insert_encrypted_document.py>`__.

            .. include:: /includes/tutorials/automatic/aws/client-python.rst

         .. step:: Insert a Document with Encrypted Fields

            Use your {+csfle-abbrev+}-enabled
            ``MongoClient`` instance to insert a {+in-use-doc+} into the
            ``medicalRecords.patients`` namespace using the following code
            snippet:

            .. literalinclude:: /includes/generated/in-use-encryption/csfle/python/aws/reader/insert_encrypted_document.py
               :start-after: start-insert
               :end-before: end-insert
               :language: python
               :dedent:

            When you insert a document, your {+csfle-abbrev+}-enabled client
            encrypts the fields of your document such that it resembles the following:

            .. literalinclude:: /includes/quick-start/inserted-doc-enc.json
               :language: json
               :copyable: false

            .. see:: Complete Code

               To view the complete code for inserting a {+in-use-doc+}, see
               `our Github repository <{+sample-app-url-csfle+}/python/aws/reader/insert_encrypted_document.py>`__.

         .. step:: Retrieve Your Document with Encrypted Fields

            Retrieve the {+in-use-doc+} you inserted in the
            Insert a Document with Encrypted Fields step of this guide.

            To show the functionality of {+csfle-abbrev+}, the following code snippet queries for
            your document with a client configured for automatic {+csfle-abbrev+} as well as
            a client that is not configured for automatic {+csfle-abbrev+}.

            .. literalinclude:: /includes/generated/in-use-encryption/csfle/python/aws/reader/insert_encrypted_document.py
               :start-after: start-find
               :end-before: end-find
               :language: python
               :dedent:

            The output of the preceding code snippet should look like this:

            .. literalinclude:: /includes/quick-start/find-output.out
               :language: json
               :copyable: false

            .. see:: Complete Code

               To view the complete code for finding a {+in-use-doc+}, see
               `our Github repository <{+sample-app-url-csfle+}/python/aws/reader/insert_encrypted_document.py>`__.

   .. selected-content:: 
      :selections: driver, csharp

      Before You Get Started
      ----------------------

      .. include:: /includes/set-up-section.rst

      .. include:: /includes/fact-csfle-placeholder.rst

      Full Application Code 
      ~~~~~~~~~~~~~~~~~~~~~

      `Complete C# Application <{+sample-app-url-csfle+}/dotnet/aws/reader/CSFLE/>`__

      Set Up the KMS
      --------------

      .. code-block:: csharp

         // You are viewing the C# driver code examples.
         // Use the dropdown menu to select a different driver.

      .. procedure::
         :style: normal

         .. step:: Create the {+cmk-long+}

            .. include:: /includes/tutorials/automatic/aws/cmk.rst

         .. step:: Create an AWS IAM User

            .. include:: /includes/tutorials/automatic/aws/user.rst

      Create the Application
      ----------------------

      .. procedure::
         :style: normal

         .. step:: Create a Unique Index on your {+key-vault-long+}

            Create a unique index on the ``keyAltNames`` field in your
            ``encryption.__keyVault`` namespace.

            .. literalinclude:: /includes/generated/in-use-encryption/csfle/dotnet/aws/reader/CSFLE/MakeDataKey.cs
               :start-after: start-create-index
               :end-before: end-create-index
               :language: csharp
               :dedent:

         .. step:: Create a New {+dek-long+}

            .. include:: /includes/tutorials/automatic/aws/dek-csharp.rst

            .. see:: Complete Code
             
               To view the complete code for making a {+dek-long+}, see
               `our Github repository <{+sample-app-url-csfle+}/dotnet/aws/reader/CSFLE/MakeDataKey.cs>`__

         .. step:: Configure the MongoClient

            .. tip::

               Follow the remaining steps in this tutorial in a separate file
               from the one created in the previous steps.
            
            To view the complete code for this file, see
            `our Github repository <{+sample-app-url-csfle+}/dotnet/aws/reader/CSFLE/InsertEncryptedDocument.cs>`__

            .. include:: /includes/tutorials/automatic/aws/client-csharp.rst

         .. step:: Insert a Document with Encrypted Fields

            Use your {+csfle-abbrev+}-enabled
            ``MongoClient`` instance to insert a {+in-use-doc+} into the
            ``medicalRecords.patients`` namespace using the following code
            snippet:

            .. literalinclude:: /includes/generated/in-use-encryption/csfle/dotnet/aws/reader/CSFLE/InsertEncryptedDocument.cs
               :start-after: start-insert
               :end-before: end-insert
               :language: csharp

            When you insert a document, your {+csfle-abbrev+}-enabled client
            encrypts the fields of your document such that it resembles the following:

            .. literalinclude:: /includes/quick-start/inserted-doc-enc.json
               :language: json
               :copyable: false

            .. see:: Complete Code

               To view the complete code for inserting a {+in-use-doc+}, see
               `our Github repository <{+sample-app-url-csfle+}/dotnet/aws/reader/CSFLE/InsertEncryptedDocument.cs>`__

         .. step:: Retrieve Your Document with Encrypted Fields

            Retrieve the {+in-use-doc+} you inserted in the
            Insert a Document with Encrypted Fields step of this guide.

            To show the functionality of {+csfle-abbrev+}, the following code snippet queries for
            your document with a client configured for automatic {+csfle-abbrev+} as well as
            a client that is not configured for automatic {+csfle-abbrev+}.

            .. literalinclude:: /includes/generated/in-use-encryption/csfle/dotnet/aws/reader/CSFLE/InsertEncryptedDocument.cs
               :start-after: start-find
               :end-before: end-find
               :language: csharp
               :dedent:

            The output of the preceding code snippet should look like this:

            .. literalinclude:: /includes/quick-start/find-output.out
               :language: json
               :copyable: false

            .. see:: Complete Code

               To view the complete code for finding a {+in-use-doc+}, see
               `our Github repository <{+sample-app-url-csfle+}/dotnet/aws/reader/CSFLE/InsertEncryptedDocument.cs>`__

   .. selected-content:: 
      :selections: driver, go

      Before You Get Started
      ----------------------

      .. include:: /includes/set-up-section.rst

      .. include:: /includes/fact-csfle-placeholder.rst

      Full Application Code 
      ~~~~~~~~~~~~~~~~~~~~~

      `Complete Go Application <{+sample-app-url-csfle+}/go/aws/reader/>`__

      Set Up the KMS
      --------------

      .. code-block:: go

         // You are viewing the Golang driver code examples.
         // Use the dropdown menu to select a different driver.

      .. important::

         When building or running the Golang code in this guide using 
         ``go build`` or ``go run``, always include the ``cse`` build 
         constraint to enable {+csfle-abbrev+}. See the following shell
         command for an example of including the build constraint:

         .. code-block:: bash 

            go run -tags cse insert-encrypted-document.go

      .. procedure::
         :style: normal

         .. step:: Create the {+cmk-long+}

            .. include:: /includes/tutorials/automatic/aws/cmk.rst

         .. step:: Create an AWS IAM User

            .. include:: /includes/tutorials/automatic/aws/user.rst

      Create the Application
      ----------------------

      .. procedure::
         :style: normal

         .. step:: Create a Unique Index on your {+key-vault-long+}

            Create a unique index on the ``keyAltNames`` field in your
            ``encryption.__keyVault`` namespace.

            .. literalinclude:: /includes/generated/in-use-encryption/csfle/go/aws/reader/make-data-key.go
               :start-after: start-create-index
               :end-before: end-create-index
               :language: go
               :dedent:

         .. step:: Create a New {+dek-long+}

            .. include:: /includes/tutorials/automatic/aws/dek-go.rst

            .. see:: Complete Code
             
               To view the complete code for making a {+dek-long+}, see
               `our Github repository <{+sample-app-url-csfle+}/go/aws/reader/make-data-key.go>`__.

         .. step:: Configure the MongoClient

            .. tip::

               Follow the remaining steps in this tutorial in a separate file
               from the one created in the previous steps.
            
            To view the complete code for this file, see
            `our Github repository <{+sample-app-url-csfle+}/go/aws/reader/insert-encrypted-document.go>`__.

            .. include:: /includes/tutorials/automatic/aws/client-go.rst

         .. step:: Insert a Document with Encrypted Fields

            Use your {+csfle-abbrev+}-enabled
            ``MongoClient`` instance to insert a {+in-use-doc+} into the
            ``medicalRecords.patients`` namespace using the following code
            snippet:

            .. literalinclude:: /includes/generated/in-use-encryption/csfle/go/aws/reader/insert-encrypted-document.go
               :start-after: start-insert
               :end-before: end-insert
               :language: go

            .. note::

               Rather than creating a raw BSON document, you can pass a struct with ``bson`` tags directly
               to the driver for encoding.

            When you insert a document, your {+csfle-abbrev+}-enabled client
            encrypts the fields of your document such that it resembles the following:

            .. literalinclude:: /includes/quick-start/inserted-doc-enc.json
               :language: json
               :copyable: false

            .. see:: Complete Code

               To view the complete code for inserting a {+in-use-doc+}, see
               `our Github repository <{+sample-app-url-csfle+}/go/aws/reader/insert-encrypted-document.go>`__.

         .. step:: Retrieve Your Document with Encrypted Fields

            Retrieve the {+in-use-doc+} you inserted in the
            Insert a Document with Encrypted Fields step of this guide.

            To show the functionality of {+csfle-abbrev+}, the following code snippet queries for
            your document with a client configured for automatic {+csfle-abbrev+} as well as
            a client that is not configured for automatic {+csfle-abbrev+}.

            .. literalinclude:: /includes/generated/in-use-encryption/csfle/go/aws/reader/insert-encrypted-document.go
               :start-after: start-find
               :end-before: end-find
               :language: go
               :dedent:

            The output of the preceding code snippet should look like this:

            .. literalinclude:: /includes/quick-start/find-output.out
               :language: json
               :copyable: false

            .. see:: Complete Code

               To view the complete code for finding a {+in-use-doc+}, see
               `our Github repository <{+sample-app-url-csfle+}/go/aws/reader/insert-encrypted-document.go>`__.

Learn More
----------

To learn how {+csfle-abbrev+} works, see
:ref:`<csfle-fundamentals>`.

To learn more about the topics mentioned in this guide, see the
following links:

- Learn more about CSFLE components on the :ref:`Reference <csfle-reference>` page.
- Learn how {+cmk-long+}s and {+dek-long+}s work on the :ref:`<csfle-reference-keys-key-vaults>` page
- See how KMS Providers manage your CSFLE keys on the :ref:`<csfle-reference-kms-providers>` page.
