.. _method-createIndex:

===========================
db.collection.createIndex()
===========================

.. default-domain:: mongodb

.. meta::
   :description: Create an index on a collection to improve performance for queries.

.. facet::
   :name: programming_language 
   :values: shell

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/wayfinding/mongosh-method-createIndex.rst

Definition
----------

.. method:: db.collection.createIndex(keys, options, commitQuorum)

   Creates indexes on collections.

   To minimize the impact of building an index on replica sets and
   sharded clusters, use a rolling index build procedure as described
   on :doc:`/tutorial/build-indexes-on-replica-sets`.

Compatibility
-------------

This method is available in deployments hosted in the following 
environments:

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-all.rst

.. include:: /includes/fact-environments-onprem-only.rst

Syntax
------

The :method:`~db.collection.createIndex()` method has the following
form:

.. code-block:: javascript

   db.collection.createIndex( <keys>, <options>, <commitQuorum>)

The :method:`~db.collection.createIndex()` method takes the following
parameters:

.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter
     - Type
     - Description

   * - ``keys``
     - document
     - A document that contains the field and value pairs where the
       field is the index key and the value describes the type of
       index for that field.
       
       For an ascending index on a field, specify a value of ``1``.
       For descending index, specify a value of ``-1``.
       
       An asterisk (``*``) is not a valid index name.
       
       MongoDB supports several different index types, including:

       - :ref:`text <index-feature-text>` 
       - :ref:`geospatial <index-feature-geospatial>` 
       - :ref:`hashed indexes <index-type-hashed>`
     
       See :ref:`index types <index-types>` for more information.
       
       :ref:`Wildcard indexes <wildcard-index-core>`
       support workloads where users query against custom fields or a
       large variety of fields in a collection.
       
       - You can create a wildcard index on a specific field and its
         subpaths or on all of the fields in a document.

         For details, see :ref:`wildcard-index-core`.

   * - ``options``
     - document
     - Optional. A document that contains a set of options that controls the creation
       of the index. See :ref:`ensureIndex-options` for details.
       
   * - :ref:`commitQuorum <createIndex-method-commitQuorum>`
     - integer or string
     - .. _createIndex-method-commitQuorum:
     
       Optional. The minimum number of data-bearing voting replica
       set members (i.e. commit quorum), including the primary, that
       must report a successful :ref:`index build
       <index-operations-replicated-build>` before the primary
       marks the ``indexes`` as ready. A "voting" member is any
       replica set member where :rsconf:`members[n].votes` is greater
       than ``0``.
       
       Supports the following values:

       - ``"votingMembers"`` - all data-bearing voting replica set
         members (*Default*).

       - ``"majority"`` - a simple majority of data-bearing voting
         replica set members.

       - ``<int>`` - a specific number of data-bearing voting 
         replica set members.

       - ``0`` - Disables quorum-voting behavior. Members 
         start the index build simultaneously but do *not* 
         vote or wait for quorum before completing the 
         index build. If you start an index build with 
         a commit quorum of ``0``, you cannot later modify the 
         commit quorum using :dbcommand:`setIndexCommitQuorum`.

       - A replica set :doc:`tag name
         </tutorial/configure-replica-set-tag-sets>`.

.. _ensureIndex-options:
.. _createIndex-options:

Options
-------

The ``options`` document contains a set of options that controls the
creation of the index. Different index types can have additional
options specific for that type.

Multiple index options can be specified in the same document. However,
if you specify multiple option documents the :method:`db.collection.createIndex()`
operation will fail.

Consider the following :method:`db.collection.createIndex()` operation:

.. code-block:: javascript

   db.collection.createIndex(
     {
         "a": 1
     },
     {
         unique: true,
         sparse: true,
         expireAfterSeconds: 3600
     }
   )

If the options specification had been split into multiple documents
like this:
``{ unique: true }, { sparse: true, expireAfterSeconds: 3600 }``
the index creation operation would have failed.

Options for All Index Types
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for all index types unless
otherwise specified:

.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``unique``

     - boolean

     - Optional. Creates a unique index so that the collection will not accept
       insertion or update of documents where the index key value
       matches an existing value in the index.
       
       
       Specify ``true`` to create a unique index. The
       default value is ``false``.
       
       The option is *unavailable* for 
       :ref:`hashed indexes <index-hashed-index>`.
       
       
       

   * - ``name``

     - string

     - Optional. The name of the index. If unspecified, MongoDB generates an index name
       by concatenating the names of the indexed fields and the sort order.

   * - ``partialFilterExpression``

     - document

     - Optional. If specified, the index only references documents that match the
       filter expression. See :doc:`/core/index-partial` for more information.
       
       
       A filter expression can include:
       
       .. include:: /includes/fact-partial-filter-expression-operators.rst
       
       You can specify a ``partialFilterExpression`` option for all MongoDB
       :ref:`index types <index-types>`.
       
       
       

   * - ``sparse``

     - boolean

     - Optional. If ``true``, the index only references documents with the specified
       field. These indexes use less space but behave differently in some
       situations (particularly sorts). The default value is ``false``.
       See :doc:`/core/index-sparse` for more information.

       The following index types are sparse by default and ignore
       this option:

       - :ref:`2dsphere <2dsphere-index>`
       - :ref:`2d <2d-index>`
       - :ref:`Text <index-type-text>`

       .. include:: /includes/compound-and-partial-indexes.rst

   * - ``expireAfterSeconds``

     - integer

     - .. include:: /includes/indexes/expireAfterSeconds-config-option.rst
       
       .. include:: /includes/indexes/expireAfterSeconds-warning.rst

       .. include:: includes/expireAfterSeconds-range.rst

   * - :ref:`hidden <method-createIndex-hidden>`

     - boolean

     - .. _method-createIndex-hidden:

       Optional. A flag that determines whether the index is
       :ref:`hidden <index-type-hidden>` from the query planner. A
       hidden index is not evaluated as part of the query plan
       selection.

       Default is ``false``.

   * - ``storageEngine``

     - document

     - Optional. Allows users to configure the storage engine on a
       per-index basis when creating an index.
       
       
       The ``storageEngine`` option should take the following form:
       
       .. code-block:: javascript
       
          storageEngine: { <storage-engine-name>: <options> }
       
       Storage engine configuration options specified when creating indexes are
       validated and logged to the :term:`oplog` during replication to
       support replica sets with members that use different storage
       engines.


.. _create-index-collation:

Option for Collation
~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``collation``

     - document

     - Optional. Specifies the :ref:`collation <collation>` for the index.
       
       .. include:: /includes/extracts/collation-description.rst
       
       .. include:: /includes/extracts/collation-index-collection.rst
       
       .. include:: /includes/extracts/collation-option-specification.rst
       
       



.. include:: /includes/extracts/collation-index-type-restrictions.rst

.. include:: /includes/extracts/collation-index-type-restrictions-addendum.rst

.. _createIndex-collation-index-use:

Collation and Index Use
```````````````````````

.. include:: /includes/extracts/collation-index.rst

Options for ``text`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for :ref:`text <index-type-text>`
indexes only:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``weights``

     - document

     - Optional. For :ref:`text <index-type-text>` indexes, a document that contains
       field and weight pairs. The weight is an integer ranging from 1 to
       99,999 and denotes the significance of the field relative to the
       other indexed fields in terms of the score. You can specify weights
       for some or all the indexed fields. See
       :ref:`control-text-search-results` to adjust the scores.
       The default value is ``1``.

       Starting in MongoDB 5.0, the :ref:`weights <specify-weights>` 
       option is only allowed for text indexes.

   * - ``default_language``

     - string

     - Optional. For :ref:`text <index-type-text>` indexes, the language that
       determines the list of stop words and the rules for the stemmer and
       tokenizer. See :ref:`text-search-languages` for the available
       languages and 
       :doc:`/core/indexes/index-types/index-text/specify-text-index-language` 
       for more information and examples. The default value is ``english``.
       
       

   * - ``language_override``

     - string

     - Optional. For :ref:`text <index-type-text>` indexes, the name of the field, in
       the collection's documents, that contains the override language for
       the document. The default value is ``language``. See
       :ref:`specify-language-field-text-index-example` for an example.
       
       

   * - ``textIndexVersion``

     - integer

     - Optional. The ``text`` index version number. Users can use this option to
       override the default version number.
       
       For available versions, see :ref:`text-index-versions`.


Options for ``2dsphere`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following option is available for :ref:`2dsphere <2dsphere-index>`
indexes only:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``2dsphereIndexVersion``

     - integer

     - Optional. The ``2dsphere`` index version number. Users can use this option to
       override the default version number.
       
       For the available versions, see :ref:`2dsphere-v2`.
       

.. _2d-index-options:

Options for ``2d`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for :ref:`2d <2d-index>` indexes
only:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``bits``

     - integer

     - Optional. For :ref:`2d <2d-index>` indexes, the number of precision of the
       stored :term:`geohash` value of the location data.
       
       The ``bits`` value ranges from 1 to 32 inclusive. The default value
       is ``26``.
       
       

   * - ``min``

     - number

     - Optional. For ``2d`` indexes, the lower inclusive boundary for
       the longitude and latitude values. The default value is ``-180.0``.
       
       

   * - ``max``

     - number

     - Optional. For ``2d`` indexes, the upper inclusive boundary for
       the longitude and latitude values. The default value is ``180.0``.

.. _createIndex-method-wildcard-option:

Options for ``wildcard`` indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:ref:`Wildcard indexes <wildcard-index-core>` can use the
``wildcardProjection`` option.

.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``wildcardProjection``

     - document

     - Optional. Allows users to include or exclude specific field paths
       from a :ref:`wildcard index <wildcard-index-core>`.
       
       This option is only valid when you create a :ref:`wildcard index
       <wildcard-index-core>` on all document fields. You cannot specify
       the ``wildcardProjection`` option when you create a wildcard
       index on a specific field path and its subfields.

       .. include:: /includes/indexes/wildcard-projection-specifications.rst
       
       The ``wildcardProjection`` option takes the following form:
       
       .. code-block:: javascript
       
          wildcardProjection: {
            "path.to.field.a" : <value>,
            "path.to.field.b" : <value>
          }
       
       The ``<value>`` can be either of the following:
       
       - ``1`` or ``true`` to include the field in the wildcard index.      
       - ``0`` or ``false`` to exclude the field from the wildcard index. 
       
       .. include:: /includes/extracts/wildcard-index-id.rst

.. _create-index-behaviors:

Behaviors
---------


Recreating an Existing Index
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you call :method:`db.collection.createIndex()` for an index that
already exists, MongoDB does not recreate the index.

Index Options
~~~~~~~~~~~~~

Non-Collation and Non-Hidden Options
````````````````````````````````````

With the exception of the :ref:`collation option
<method-createIndex-collation-option>`, if you create an index with one
set of index options and then try to recreate the same index but with
different index options, MongoDB will not change the options nor
recreate the index.

The :ref:`hidden <createIndexes-hidden-option>` option can be changed
without dropping and recreating the index. See
:ref:`method-createIndex-hidden-option`.

To change the other index options, drop the existing index with
:method:`db.collection.dropIndex()` before running
:method:`db.collection.createIndex()` with the new options.

.. _method-createIndex-collation-option:

Collation Option
````````````````

.. include:: /includes/extracts/collation-index-options.rst

.. _method-createIndex-hidden-option:

Hidden Option
``````````````

To hide or unhide existing indexes, you can use the following
:binary:`~bin.mongosh` methods:

- :method:`db.collection.hideIndex()`

- :method:`db.collection.unhideIndex()`

For example,

- To change the ``hidden`` option for an index to ``true``, use the
  :method:`db.collection.hideIndex()` method:

  .. code-block:: javascript

     db.restaurants.hideIndex( { borough: 1, ratings: 1 } );

- To change the ``hidden`` option for an index to ``false``, use the
  :method:`db.collection.unhideIndex()` method:

  .. code-block:: javascript

     db.restaurants.unhideIndex( { borough: 1, city: 1 } );

.. seealso::

   :doc:`/core/index-hidden`

Transactions
~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-explicit-ddl.rst

.. |operation| replace:: :method:`db.collection.createIndex()`

.. _create-index-builds:

Index Builds
~~~~~~~~~~~~

.. versionchanged:: 7.1

.. include:: /includes/index-build-improvements.rst

Examples
--------

Create an Ascending Index on a Single Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates an ascending index on the field
``orderDate``.

.. code-block:: javascript

   db.collection.createIndex( { orderDate: 1 } )

If the ``keys`` document specifies more than one field, then
:method:`~db.collection.createIndex()` creates a :term:`compound
index`.

.. _create-index-method-multiple-fields:

Create an Index on a Multiple Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates a compound index on the
``orderDate`` field (in ascending order) and the ``zipcode``
field (in descending order.)

.. code-block:: javascript

   db.collection.createIndex( { orderDate: 1, zipcode: -1 } )

Compound indexes can include a single :ref:`hashed <index-type-hashed>` field. 
Compound hashed indexes require :ref:`featureCompatibilityVersion <view-fcv>` 
set to at least ``5.0``.
   
The following example creates a compound index on the ``state`` field
(in ascending order) and the ``zipcode`` field (hashed):

.. code-block:: javascript

   db.collection.createIndex( { "state" : 1, "zipcode" : "hashed" } )

The order of fields in a compound index is important for supporting
:method:`~cursor.sort()` operations using the index.

.. seealso::

   - :ref:`sort-on-multiple-fields`
   - :ref:`sort-index-prefix`

Create Indexes with Collation Specified
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates an index named ``category_fr``. The
example creates the index with the :ref:`collation
<create-index-collation>` that specifies the locale ``fr`` and
comparison strength ``2``:

.. code-block:: javascript

   db.collection.createIndex(
      { category: 1 },
      { name: "category_fr", collation: { locale: "fr", strength: 2 } }
   )

The following example creates a compound index named
``date_category_fr`` with a :ref:`collation <create-index-collation>`.
The collation applies only to the index keys with string values.

.. code-block:: javascript

   db.collection.createIndex(
      { orderDate: 1, category: 1 },
      { name: "date_category_fr", collation: { locale: "fr", strength: 2 } }
   )

The collation applies to the indexed keys whose values are string.

For queries or sort operations on the indexed keys that uses the same collation
rules, MongoDB can use the index. For details, see :ref:`createIndex-collation-index-use`.

.. _createIndex-method-wildcard-examples:
.. _createIndex-method-wildcard-behavior:

Create a Wildcard Index
~~~~~~~~~~~~~~~~~~~~~~~

- .. include:: /includes/extracts/wildcard-index-id.rst

- .. include:: /includes/indexes/wildcard-restrictions.rst

To learn more, see:

- :ref:`About Wildcard Indexes <wildcard-index-core>`
- :ref:`Wildcard Index Restrictions <wildcard-index-restrictions>`

For examples, see:

- :ref:`createIndex-method-wildcard-onepath`
- :ref:`createIndex-method-wildcard-allpaths`
- :ref:`createIndex-method-wildcard-inclusion`
- :ref:`createIndex-method-wildcard-exclusion`

.. _createIndex-method-wildcard-onepath:

Create a Wildcard Index on a Single Field Path
``````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index on the 
``product_attributes`` field:

.. code-block:: bash

   use inventory
   db.products_catalog.createIndex( { "product_attributes.$**" : 1 } )

With this wildcard index, MongoDB indexes all scalar values of
``product_attributes``. If the field is a nested document or array, the
wildcard index recurses into the document/array and indexes all scalar
fields in the document/array.

The wildcard index can support arbitrary single-field queries on 
``product_attributes`` or one of its nested fields:

.. code-block:: bash

   db.products_catalog.find( { "product_attributes.superFlight" : true } )
   db.products_catalog.find( { "product_attributes.maxSpeed" : { $gt : 20 } } )
   db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )

.. |projection-ref| replace:: :ref:`parameter documentation <createIndex-method-wildcard-option>`

.. note::

   The path-specific wildcard index syntax is incompatible with the
   ``wildcardProjection`` option. See the |projection-ref| for more
   information.

.. _createIndex-method-wildcard-allpaths:

Create a Wildcard Index on All Field Paths
``````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index on all scalar fields
(excluding the ``_id`` field):

.. code-block:: bash

   use inventory
   db.products_catalog.createIndex( { "$**" : 1 } )

With this wildcard index, MongoDB indexes all scalar fields for each
document in the collection. If a given field is a nested document or
array, the wildcard index recurses into the document/array and indexes
all scalar fields in the document/array.

The created index can support queries on any arbitrary field 
within documents in the collection:

.. code-block:: bash

   db.products_catalog.find( { "product_price" : { $lt : 25 } } )
   db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )

.. note::

   Wildcard indexes omit the ``_id`` field by default. To include the
   ``_id`` field in the wildcard index, you must explicitly include it
   in the ``wildcardProjection`` document. See |projection-ref| for
   more information.


.. _createIndex-method-wildcard-inclusion:

Include Specific Fields in Wildcard Index Coverage
``````````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

The following operation creates a wildcard index and uses
the ``wildcardProjection`` option to include only scalar values of the
``product_attributes.elements`` and ``product_attributes.resistance``
fields in the index. 

.. code-block:: bash

   use inventory
   db.products_catalog.createIndex(
     { "$**" : 1 },
     {
       "wildcardProjection" : {
         "product_attributes.elements" : 1,
         "product_attributes.resistance" : 1
       }
     }
   )

The pattern ``"$**"`` includes all fields in the document. Use the
``wildcardProjection`` field to limit the index to fields you specify.
For complete documentation on ``wildcardProjection``, see 
:ref:`createIndex-method-wildcard-option`.

If a field is a nested document or array, the wildcard index recurses
into it and indexes all scalar fields in the document or array.

The wildcard index supports queries on any scalar field included in
the ``wildcardProjection``:

.. code-block:: bash

   db.products_catalog.find( { "product_attributes.elements" : { $eq: "Water" } } )
   db.products_catalog.find( { "product_attributes.resistance" : "Bludgeoning" } )

.. note::

   .. include:: /includes/extracts/wildcard-index-inclusion-exclusion.rst

.. _createIndex-method-wildcard-exclusion:

Omit Specific Fields from Wildcard Index Coverage
`````````````````````````````````````````````````

.. include:: /includes/extracts/wildcard-index-example-pre.rst

This example uses a wildcard index and a ``wildcardProjection``
document to index the scalar fields for each document in the collection.

The wildcard index excludes the ``product_attributes.elements`` and
``product_attributes.resistance`` fields:

.. code-block:: bash

   use inventory
   db.products_catalog.createIndex(
     { "$**" : 1 },
     {
       "wildcardProjection" : {
         "product_attributes.elements" : 0,
         "product_attributes.resistance" : 0
       }
     }
   )

The wildcard pattern ``"$**"`` includes all of the fields in the
document. However, the ``wildcardProjection`` field excludes the
specified fields from the index.

For complete documentation on ``wildcardProjection``, see 
:ref:`createIndex-method-wildcard-option`.

If a field is a nested document or array, the wildcard
index recurses into the document/array and indexes all scalar fields in 
the document/array.

The index can support queries on any scalar field **except** those
excluded by ``wildcardProjection``:

.. code-block:: bash

   db.products_catalog.find( { "product_attributes.maxSpeed" : { $gt: 25 } } )
   db.products_catalog.find( { "product_attributes.superStrength" : true } )

.. note::

   .. include:: /includes/extracts/wildcard-index-inclusion-exclusion.rst

Create Index With Commit Quorum
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.4-changes-index-builds-simultaneous-fcv.rst

.. include:: /includes/extracts/4.4-changes-index-builds-simultaneous.rst

.. |updateMethod-name| replace:: :method:`~db.collection.createIndex()`
.. include:: /includes/indexes/template-commit-quorum-intro.rst

The following operation creates an index with a :ref:`commit quorum
<createIndex-method-commitQuorum>` of ``"majority"``, or a 
simple majority of data-bearing voting members:

.. code-block:: javascript

   db.getSiblingDB("examples").invoices.createIndex(
     { "invoices" : 1 },
     { },
     "majority"
   )

The :term:`primary` marks index build as ready only after a simple
majority of data-bearing voting members "vote" to commit the index
build. For more information on index builds and the voting process, see
:ref:`index-operations-replicated-build`.

Additional Information
----------------------

- The :doc:`/indexes` section of this manual for full
  documentation of indexes and indexing in MongoDB.

- :method:`db.collection.getIndexes()` to view the specifications of
  existing indexes for a collection.

- :ref:`<index-type-text>` for details on creating ``text``
  indexes.

- :ref:`index-feature-geospatial` for geospatial queries.

- :ref:`index-feature-ttl` for expiration of data.
