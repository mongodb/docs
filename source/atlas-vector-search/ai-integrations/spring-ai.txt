.. _spring-ai:

==========================================
Get Started with the Spring AI Integration
==========================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. facet::
   :name: programming_language
   :values: java

.. meta::
   :description: Integrate Atlas Vector Search with Spring AI to build Gen AI applications.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can integrate {+avs+} with `Spring AI
<https://spring.io/projects/spring-ai>`__
to build generative AI applications by using the :driver:`MongoDB Java
Sync Driver </java/sync/current/>`. This tutorial demonstrates
how to start using {+avs+} as the vector store for Spring AI, then how
to perform a semantic search on your data.

Specifically, you perform the following actions:

#. Set up the environment.
#. Create an {+avs+} index.
#. Store vector embedding data on |service|.
#. Run a semantic search query on your data.

Background
----------

Spring AI is an application framework from `Spring
<https://spring.io/>`__ that allows you to
combine various AI services and plugins with your applications.
You can use Spring AI for a variety of text-based AI use cases.

You can use |service| as a vector database and use {+avs+} to
implement |rag| by retrieving semantically similar documents 
from your data. To learn more about |rag|,
see :ref:`ai-key-concepts`.

Prerequisites
-------------

To complete this tutorial, you must have the following:

- An |service| {+cluster+} running MongoDB version 6.0.11, 7.0.2, or
  later. Ensure that your :abbr:`IP address (Internet Protocal address)`
  is included in your |service| project's :ref:`access list <access-list>`.

- An OpenAI API Key. You must have a paid OpenAI account with credits
  available for API requests. To learn more about registering an OpenAI
  account, see the `OpenAI API website <https://openai.com/api/>`__.

- An environment to set up and run a Java application. We recommend
  that you use an integrated development environment (IDE) such as
  `IntelliJ IDEA <https://www.jetbrains.com/idea/>`__ or `Eclipse IDE
  <https://eclipseide.org/>`__ to configure Maven to build and run your
  project.

Set Up the Environment
----------------------

You must first set up the environment for this tutorial, which includes
adding the necessary dependencies and setting configuration properties.

.. include:: /includes/ai-integrations/spring-ai/spring-set-up-environment.rst

Create the {+avs+} Index
------------------------------------

To enable vector search queries on your vector store,
you must create an {+avs+} index on the ``springai_test.vector_store``
collection.

.. note:: Required Access

   To create an {+avs+} index, you must have :authrole:`Project Data Access 
   Admin` or higher access to the |service| project.

.. include:: /includes/ai-integrations/spring-ai/spring-schema-init.rst

.. note:: Known Issue: Existing Index

   If you have an existing {+avs+} index called ``vector_index`` on the
   ``springai_test.vector_store`` collection, Spring AI won't create an
   additional index. Because of this, you might experience errors later
   in the tutorial if the existing index was configured with incompatible
   settings, such as a different number of dimensions.

   Ensure that your index has the following configuration:

   .. code-block:: json

      {
        "fields": [
          {
            "numDimensions": 1536,
            "path": "embedding",
            "similarity": "cosine",
            "type": "vector"
          }
        ]
      }

Use |service| as a Vector Store
-------------------------------

This section demonstrates how to configure |service| as a vector
database, also known as a vector store, so that you can store the vector
embeddings of your custom data.

Locate the
``src/main/java/com/example/demo/DemoApplication.java``
file in your project. At the same level as this file, create a
directory called ``config``, then create a file in this directory called
``Config.java`` to set up your Spring App configuration.

The following steps demonstrate how to create the ``Bean`` objects
needed to prepare the vector store.

.. include:: /includes/ai-integrations/spring-ai/spring-config.rst

Store Custom Data and Run a Semantic Search Query
-------------------------------------------------

In this section, you can learn how to create endpoints in your Java
application to store vector embeddings of custom data in |service|, then
run a semantic search query on that data.

Create Endpoints
~~~~~~~~~~~~~~~~

At the same level as the ``config`` folder, create a
``controller`` folder, then create a ``Controller.java`` file to set up
your API endpoints. The following steps demonstrate how to create
``GET`` endpoints to add data to your vector store and run a semantic
search query by using the ``similaritySearch()`` method.

.. include:: /includes/ai-integrations/spring-ai/spring-endpoints.rst

Access Endpoints
~~~~~~~~~~~~~~~~

After you run your application, you can access the endpoints to first add
documents to the vector store, then perform a semantic search query.

.. include:: /includes/ai-integrations/spring-ai/spring-access-endpoints.rst

Next Steps
----------

MongoDB also provides the following developer resources:

- :github:`MongoDB Developer GitHub Repository </mongodb-developer>`
- `Spring AI MongoDB Atlas Demo <https://github.com/timotheekelly/springai-mongodb/tree/main>`__

.. seealso::

   `Spring AI Documentation <https://docs.spring.io/spring-ai/reference/index.html>`__
   
.. TODO because incomplete
.. `Spring AI MongoDB Atlas Reference <https://docs.spring.io/spring-ai/reference/api/vectordbs/mongodb.html>`__
