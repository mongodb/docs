# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2013-12-16 22:49+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/store-javascript-function-on-server.txt:3
msgid "Store a JavaScript Function on the Server"
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:15
msgid ""
"Do not store application logic in the database. There are performance "
"limitations to running JavaScript inside of MongoDB. Application code "
"also is typically most effective when it shares version control with the "
"application itself."
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:20
msgid ""
"There is a special system collection named ``system.js`` that can store "
"JavaScript functions for reuse."
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:23
msgid ""
"To store a function, you can use the :method:`db.collection.save()`, as "
"in the following examples:"
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:42
msgid ""
"The ``_id`` field holds the name of the function and is unique per "
"database."
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:45
msgid "The ``value`` field holds the function definition."
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:47
msgid ""
"Once you save a function in the ``system.js`` collection, you can use the"
" function from any JavaScript context; e.g. :query:`$where` operator, "
":dbcommand:`mapReduce` command or :method:`db.collection.mapReduce()`."
msgstr ""

#~ msgid "We do **not** recommend using server-side stored functions if possible."
#~ msgstr ""

#~ msgid ""
#~ "See "
#~ "`<http://github.com/mongodb/mongo/tree/master/jstests/storefunc.js>`_"
#~ " for a full example."
#~ msgstr ""

# 84685065f3304ccd97c0383942150cd6
#~ msgid ""
#~ "To store a function, you can use"
#~ " the :method:`db.collection.save()`, as in "
#~ "the following example:"
#~ msgstr ""

# 9c0b35ce3b644f6d9f52d3a630978968
#~ msgid "The ``value`` field holds the function definition"
#~ msgstr ""

# fa4d6cfc816c41b89b5e8cdc455c6a0e
#~ msgid ""
#~ "Once you save a function in the"
#~ " ``system.js`` collection, you can use "
#~ "the function from any JavaScript context"
#~ " (e.g. :dbcommand:`eval` command or the "
#~ ":program:`mongo` shell method :method:`db.eval()`,"
#~ " :query:`$where` operator, :dbcommand:`mapReduce` "
#~ "or :program:`mongo` shell method "
#~ ":method:`db.collection.mapReduce()`)."
#~ msgstr ""

# 5b4b58ef143e4abebde7227f3a6ed7b9
#~ msgid ""
#~ "Consider the following example from the"
#~ " :program:`mongo` shell that first saves"
#~ " a function named ``echoFunction`` to "
#~ "the ``system.js`` collection and calls "
#~ "the function using :method:`db.eval()` method:"
#~ msgstr ""

# 430d444a87d94bfbb6b69ebd78fafda0
#~ msgid ""
#~ "In the :program:`mongo` shell, you can"
#~ " use :method:`db.loadServerScripts()` to load "
#~ "all the scripts saved in the "
#~ "``system.js`` collection for the current "
#~ "database. Once loaded, you can invoke"
#~ " the functions directly in the shell,"
#~ " as in the following example:"
#~ msgstr ""

#~ msgid ""
#~ "See "
#~ "`<http://github.com/mongodb/mongo/tree/master/jstests/core/storefunc.js>`_"
#~ " for a full example."
#~ msgstr ""

