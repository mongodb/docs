.. _c2c-mongosync-behavior:

======================
``mongosync`` Behavior
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


The ``mongosync`` binary is the primary process used in
{+c2c-product-name+}. ``mongosync`` migrates data from one cluster to
another and can keep the clusters in continuous sync. 

For an overview of the ``mongosync`` process, see :ref:`about-mongosync`.

To get started with ``mongosync``, refer to the :ref:`Quick Start Guide
<c2c-quickstart>`. 

For more detailed information, refer to the
:ref:`c2c-install` or :ref:`c2c-connecting` page that best fits your
situation. 

Settings
--------

Cluster Independence
~~~~~~~~~~~~~~~~~~~~

``mongosync`` syncs collection data between a source cluster and
destination cluster. ``mongosync`` does not synchronize :ref:`users
<users>` or :ref:`roles <built-in-roles>`. As a result, you can create
users with different access permissions on each cluster.

.. _c2c-mongosync-config:

Configuration File
~~~~~~~~~~~~~~~~~~

Options for ``mongosync`` can be set in a YAML configuration file. Use
the :option:`--config` option. For example:

.. code-block:: console

   $ mongosync --config /etc/mongosync.conf

For information on available settings, see :ref:`Configuration <c2c-config>`.

Cluster and Collection Types
----------------------------

.. _c2c-sharded-cluster-behavior:

Sharded Clusters
~~~~~~~~~~~~~~~~

{+c2c-product-name+} supports replication between sharded clusters.
``mongosync`` replicates individual shards in parallel from the source
cluster to the destination cluster. However ``mongosync`` does not
preserve the source cluster's sharding configuration.

Pre-Split Chunks
''''''''''''''''

When ``mongosync`` syncs to a sharded destination cluster, it pre-splits chunks 
for sharded collections on the destination cluster. For each sharded collection, 
``mongosync`` creates twice as many chunks as there are shards in the 
destination cluster. 

Primary Shards
''''''''''''''

When you sync to a sharded destination cluster, ``mongosync`` assigns a
primary shard to each database by means of a round-robin. 

.. warning::

   Running :dbcommand:`movePrimary` on the source or desintation cluster
   during migration may result in a fatal error or require you to
   restart the migration from the start. For more information, see
   :ref:`c2c-sharded-limitations`. 

Multiple Clusters
~~~~~~~~~~~~~~~~~

To sync a source cluster to multiple destination clusters, use one
``mongosync`` instance for each destination cluster. For more
information, see :ref:`Multiple Clusters Limitations
<multiple-clusters-limitations>`. 

.. _c2c-capped-collections:

Capped Collections
~~~~~~~~~~~~~~~~~~

.. include:: /includes/collections/behavior-capped-collections.rst

Reads and Writes
----------------

.. _c2c-write-blocking:

Write Blocking
~~~~~~~~~~~~~~

.. include:: /includes/fact-write-blocking-enable.rst

You must enable write-blocking when you start ``mongosync`` if you want
to use :ref:`reverse synchronization <c2c-api-reverse>` later.

User Permissions
''''''''''''''''

.. include:: /includes/fact-write-blocking-requirement.rst

Permissible Reads
'''''''''''''''''

.. include:: /includes/fact-read-operations-source.rst

.. include:: /includes/fact-read-operations-check.rst

Permissible Writes
''''''''''''''''''

.. include:: /includes/fact-write-blocking-check.rst

.. include:: /includes/fact-write-blocking-when.rst

Read and Write Concern
~~~~~~~~~~~~~~~~~~~~~~

By default, ``mongosync`` sets the read concern level to
:readconcern:`"majority"` for reads on the source cluster. For writes on
the destination cluster, ``mongosync`` sets the write concern level to
:writeconcern:`"majority"` with :ref:`j: true <wc-j>`. 

For more information on read and write concern configuration and
behavior, see :ref:`read-concern` and :ref:`write-concern`. 

Read Preference
~~~~~~~~~~~~~~~

``mongosync`` requires the :readmode:`primary` read preference when
connecting to the source and destination clusters. For more information,
see :ref:`connections-read-preference`. 

Legacy Index Handling 
~~~~~~~~~~~~~~~~~~~~~

``mongosync`` rewrites legacy index values, like ``0`` or an empty
string, to ``1`` on the destination. ``mongosync`` also removes any 
invalid index options on the destination.

.. _mongosync-considerations:

Considerations for Continuous Sync
----------------------------------

For any continuous synchronization use cases with ``mongosync``, ensure that 
``mongosync`` commits before cutting over from the source to the 
destination.

If the source cluster shuts down before ``mongosync`` can commit, such as in 
a disaster scenario, the destination cluster might not have a consistent 
snapshot of the source data. To learn more, see :ref:`c2c-behavior-consistency`.

.. note:: 
  
   After commit, you can't resume continuous sync between two clusters since 
   ``mongosync`` can only sync into empty destination clusters. If you need to 
   use the same two clusters after cutover, you can call the 
   :ref:`c2c-api-reverse` endpoint to keep the clusters in sync.
   Otherwise, start a new continuous sync operation by using a new empty 
   destination cluster. 

Temporary Changes to Collection Characteristics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``mongosync`` temporarily alters the following collection characteristics during 
synchronization. The original values are restored during the commit process.

.. list-table::
   :header-rows: 1

   * - Change
     - Description
  
   * - Unique Indexes
     - Unique indexes on the source cluster are synced as non-unique indexes 
       on the destination cluster.

   * - TTL Indexes
     - Synchronization sets ``expireAfterSeconds`` to the value of ``MAX_INT``
       on the destination cluster.

   * - Hidden Indexes
     - Synchronization replicates hidden indexes as non-hidden.

   * - Write Blocking
     - If you enable write-blocking, ``mongosync`` blocks writes: 

       - On the destination cluster during sync.
       - On the source cluster when ``commit`` is received.
      
       To learn more, see :ref:`c2c-write-blocking`.

   * - Capped Collections
     - Synchronization sets capped collections to the maximum allowable
       size. 

   * - Dummy Indexes 
     - In some cases, synchronization may create dummy indexes on the 
       destination to support writes on sharded or collated collections. 

Rolling Index Builds
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/rolling-build-limitation.rst

Destination Clusters
--------------------

.. _c2c-behavior-consistency:

Consistency
~~~~~~~~~~~

``mongosync`` supports :term:`eventual consistency` on the destination
cluster. Read consistency is not guaranteed on the destination cluster until 
commit. Before committing, the source and destination clusters may differ at a 
given point in time. To learn more, see :ref:`mongosync-considerations`.

While ``mongosync`` is syncing, ``mongosync`` may reorder or combine writes 
as it relays them from source to destination. For a given document, the total 
number of writes may differ between source and destination.

Transactions might not appear atomically on the destination cluster.
Retryable writes may not be retryable on the destination cluster.

Profiling
~~~~~~~~~

If profiling is enabled on a source database, MongoDB creates a special
collection named ``<db>.system.profile``. After synchronization is
complete, {+c2c-product-name+} will not drop the
``<db>.system.profile`` collection from the destination even if the
source database is dropped at a later time. The ``<db>.system.profile``
collection will not change the accuracy of user data on the
destination.

Views
~~~~~

If a database with views is dropped on the source, the destination may
show an empty ``system.views`` collection in that database. The empty
``system.views`` collection will not change the accuracy of user
data on the destination.

.. _c2c-system-collections:

System Collections
~~~~~~~~~~~~~~~~~~

.. include:: /includes/collections/behavior-system-collections.rst

UUIDs
~~~~~

``mongosync`` creates collections with new :abbr:`UUIDs (universally
unique identifiers)` on the destination cluster. There is no
relationship between UUIDs on the source cluster and the destination
cluster. If applications contain hard-coded UUIDs (which MongoDB does
not recommend), you may need to update those applications before they
work properly with the migrated cluster. 

Sorting
~~~~~~~

``mongosync`` inserts documents on the destination cluster in an
undefined order which does not preserve natural sort order from the
source cluster. If applications depend on document order but don't have
a defined sort method, you may need to update those applications to
specify the expected sort order before the applications work properly
with the migrated cluster. 

Performance
-----------

Resilience
~~~~~~~~~~

``mongosync`` is resilient and able to handle non-fatal errors. Logs
that contain the word "error" or "failure" do not indicate that
``mongosync`` is failing or corrupting data. For example, if a network
error occurs, the ``mongosync`` log may contain the word "error' but
``mongosync`` is still able to complete the sync. In the case that a
sync does not complete, ``mongosync`` writes a fatal log entry. 

.. _c2c-mongosync-ddl:

Data Definition Language (DDL) Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using DDL operations (operations that act on collections or databases
such as :method:`db.createCollection()` and :method:`db.dropDatabase()`)
during sync increase the risk of migration failure and may negatively
impact ``mongosync`` performance. For best performance, refrain from
performing DDL operations on the source cluster while the sync is in
progress.

For more information on DDL operations, see
:ref:`txn-prod-considerations-ddl`. 

Learn More
----------

- :ref:`c2c-connecting`
- :ref:`c2c-states`
- :ref:`c2c-api`