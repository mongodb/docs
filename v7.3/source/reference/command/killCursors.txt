===========
killCursors
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: killCursors

   Kills the specified cursor or cursors for a collection. MongoDB
   drivers use the :dbcommand:`killCursors` command as part of the
   client-side cursor implementation.

   .. note::

      In general, applications should not use the
      :dbcommand:`killCursors` command directly.

   .. |command| replace:: killCursors

   The ``killCursors`` command must be run against the database of the
   collection whose cursors you wish to kill.

   .. include:: /includes/fact-dbcommand.rst

Compatibility
-------------

This command is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-all.rst

.. include:: /includes/fact-environments-onprem-only.rst

Syntax
------

The command has the following syntax:

.. code-block:: javascript

   db.runCommand( 
      { 
        killCursors: <collection>, 
        cursors: [ <cursor id1>, ... ], comment: <any> 
      } 
   )

Command Fields
--------------

The command takes the following fields:

.. list-table::
   :header-rows: 1
   :widths: 20 20 80
 
   * - Field
     - Type
     - Description
 
   * - ``killCursors``
     - string
     - The name of the collection.
       
   * - ``cursors``
     - array
     - The ids of the cursors to kill.
       
   * - ``comment``
     - any
     - .. include:: /includes/extracts/comment-content.rst

Required Access
---------------

Kill Own Cursors
~~~~~~~~~~~~~~~~

Users can always kill their own cursors, regardless of whether the users have 
the privilege to :authaction:`killCursors`. Cursors are associated with the 
users at the time of cursor creation.

Kill Any Cursor
~~~~~~~~~~~~~~~

If a user possesses the :authaction:`killAnyCursor` privilege, that
user may kill any cursor, even cursors created by other users.

``killCursors`` and Transactions
--------------------------------

.. include:: /includes/extracts/transactions-killop-change.rst

Example
-------

Consider the following :dbcommand:`find` operation on the
``test.restaurants`` collection:

.. code-block:: javascript

   use test
   db.runCommand(
      { find: "restaurants",
        filter: { stars: 5 },
        projection: { name: 1, rating: 1, address: 1 },
        sort: { name: 1 },
        batchSize: 5
      }
   )

which returns the following:

.. code-block:: javascript

   {
      "waitedMS" : NumberLong(0),
      "cursor" : {
         "firstBatch" : [
            {
               "_id" : ObjectId("57506d63f578028074723dfd"),
               "name" : "Cakes and more"
            },
            {
               "_id" : ObjectId("57506d63f578028074723e0b"),
               "name" : "Pies and things"
            },
            {
               "_id" : ObjectId("57506d63f578028074723e1d"),
               "name" : "Ice Cream Parlour"
            },
            {
               "_id" : ObjectId("57506d63f578028074723e65"),
               "name" : "Cream Puffs"
            },
            {
               "_id" : ObjectId("57506d63f578028074723e66"),
               "name" : "Cakes and Rolls"
            }
         ],
         "id" : NumberLong("18314637080"),
         "ns" : "test.restaurants"
      },
      "ok" : 1
   }

To kill this cursor, use the :dbcommand:`killCursors` command.

.. code-block:: javascript

   use test

   db.runCommand( { killCursors: "restaurants", cursors: [ NumberLong("18314637080") ] } )

:dbcommand:`killCursors` returns the following operation details:

.. code-block:: javascript

   {
      "cursorsKilled" : [
         NumberLong("18314637080")
      ],
      "cursorsNotFound" : [ ],
      "cursorsAlive" : [ ],
      "cursorsUnknown" : [ ],
      "ok" : 1
   }

