.. _rust-insert-many-usage:

=========================
Insert Multiple Documents
=========================

You can insert multiple documents into a collection by calling the
`insert_many() <{+api+}/struct.Collection.html#method.insert_many>`__ method
on a ``Collection`` instance.

Pass a vector containing one or more documents to the ``insert_many()`` method
to insert them into your collection. These documents must be instances of the type
that you parameterized your ``Collection`` instance with. For example, if you
parameterized your collection with the ``MyStruct`` struct, pass a vector of ``MyStruct``
instances as a parameter to the ``insert_many()`` method. 

.. tip:: 

   To insert a single document, consider using the `insert_one() 
   <{+api+}/struct.Collection.html#method.insert_one>`__ method instead. For a
   runnable code example that uses this method, see the :ref:`rust-insert-one-usage`
   usage example.

The ``insert_many()`` method returns an `InsertManyResult <{+api+}/results/struct.InsertManyResult.html>`__
type that references the ``_id`` values of the inserted documents.

To learn more about inserting documents into a collection, see the
:ref:`rust-insert-guide` guide.

Example
-------

This example inserts multiple documents into the ``restaurants`` collection of the
``sample_restaurants`` database. The example inserts documents that have
``name`` and ``cuisine`` field values by passing a vector of documents
to the ``insert_many()`` method.

You can insert these documents as instances of the ``Document`` type or a 
custom data type. To specify which data type represents the collection's 
data, perform the following actions on the highlighted lines:

- To access and insert collection documents as BSON documents, replace the ``<T>`` type
  parameter with ``<Document>`` and the ``<struct or doc>`` placeholder with
  ``insert_docs``.

- To access and insert collection documents as instances of the ``Restaurant`` struct,
  replace the ``<T>`` type parameter with ``<Restaurant>`` and the ``<struct or doc>``
  placeholder with ``insert_structs``. The ``Restaurant`` struct is defined at
  the top of the code file.

Select the :guilabel:`Asynchronous` or :guilabel:`Synchronous` tab to
see the corresponding code for each runtime:

.. tabs::

   .. tab:: Asynchronous
      :tabid: find-async

      .. io-code-block::
         :copyable: true

         .. input:: /includes/usage-examples/code-snippets/insert-many-async.rs
            :language: rust
            :emphasize-lines: 20, 46
            :dedent:

         .. output::
            :language: console
            :visible: false

            Inserted documents with _ids:
            ObjectId("...")
            ObjectId("...")

   .. tab:: Synchronous
      :tabid: find-sync

      .. io-code-block::
         :copyable: true

         .. input:: /includes/usage-examples/code-snippets/insert-many-sync.rs
            :language: rust
            :emphasize-lines: 18, 44
            :dedent:

         .. output::
            :language: console
            :visible: false

            Inserted documents with _ids:
            ObjectId("...")
            ObjectId("...")
