.. _autocomplete-ref:

============
autocomplete
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Definition
----------

.. expression:: autocomplete

   .. include:: /includes/fact-autocomplete-operator.rst

.. _autocomplete-ref-syntax:

Syntax
------

``autocomplete`` has the following syntax:

.. code-block:: json
   :linenos:

   {
     $search: {
       "index": "<index name>", // optional, defaults to "default"
       "autocomplete": {
         "query": "<search-string>",
         "path": "<field-to-search>",
         "tokenOrder": "any|sequential",
         "fuzzy": <options>,
         "score": <options>
       }
     }
   }

.. _autocomplete-ref-options:

Options
-------

.. list-table::
   :header-rows: 1
   :widths: 10 20 50 10 10

   * - Field
     - Type
     - Description
     - Necessity
     - Default

   * - ``query``
     - string or array of strings
     - String or strings to search for. If there are multiple
       terms in a string, |fts| also looks for a match for each term
       in the string separately.
     - yes
     -

   * - ``path``
     - string
     - Indexed :ref:`autocomplete <bson-data-types-autocomplete>` type
       of field to search.

       .. seealso::

          :ref:`path construction <ref-path>`

       .. note::

          The ``autocomplete`` operator does not support ``multi`` in
          the field path.

     - yes
     -

   * - ``fuzzy``
     - object
     - Enable fuzzy search. Find strings which are similar to the
       search term or terms.
     - no
     -

   * - | ``fuzzy``
       | ``.maxEdits``
     - integer
     - Maximum number of single-character edits required to match the
       specified search term. Value can be ``1`` or ``2``.
     - no
     - ``2``

   * - | ``fuzzy``
       | ``.prefixLength``
     - integer
     - Number of characters at the beginning of each term in the result
       that must exactly match.
     - no
     - ``0``

   * - | ``fuzzy``
       | ``.maxExpansions``
     - integer
     - Maximum number of variations to generate and search for. This
       limit applies on a per-token basis.
     - no
     - ``50``

   * - ``score``
     - object
     - :ref:`score <scoring-ref>` assigned to matching search term
       results. Use one of the following options to modify the score:

       .. list-table::
          :stub-columns: 1
          :widths: 10 90

          * - ``boost``
            - Multiply the result score by the given number.
          * - ``constant``
            - Replace the result score with the given number.

       .. note::

          ``autocomplete`` offers less fidelity in
          :ref:`score <scoring-ref>` in exchange for faster query
          execution.

     - no
     -

   * - ``tokenOrder``
     - string
     - Order in which to search for tokens. Value can be one of the
       following:

       .. list-table::
          :stub-columns: 1
          :widths: 10 90

          * - ``any``
            - Indicates tokens in the query can appear in any order in
              the documents. Results contain documents where the tokens
              appear sequentially and non-sequentially. However,
              results where the tokens appear sequentially score higher
              than other, non-sequential values.

          * - ``sequential``
            - Indicates tokens in the query must appear adjacent to
              each other or in the order specified in the query in the
              documents. Results contain only documents where the
              tokens appear sequentially.

     - no
     - ``any``

.. _autocomplete-ref-egs:

Examples
--------

The following examples use the ``movies`` collection in the ``sample_mflix`` 
database. If you loaded the
:ref:`sample dataset <available-sample-datasets>` on your cluster, you
can create the static index for
:ref:`autocompletion <bson-data-types-autocomplete>` and run
the example queries on your cluster.

.. include:: /includes/admonitions/get-started-atlas-search.rst

The following tabs contain sample index definitions for the 
``edgeGram``, ``rightEdgeGram``, and ``nGram`` 
:ref:`tokenization strategies <bson-data-types-autocomplete>`.

.. tabs::

   .. tab:: edgeGram Index Definition
      :tabid: edgeGram

      .. code-block:: json
         :linenos:

         {
           "mappings": {
             "dynamic": false,
             "fields": {
               "title": [
                 {
                   "type": "autocomplete",
                   "tokenization": "edgeGram",
                   "minGrams": 3,
                   "maxGrams": 7,
                   "foldDiacritics": false
                 }
               ]
             }
           }
         }

   .. tab:: rightEdgeGram Index Definition
      :tabid: rightEdgeGram

      .. code-block:: json
         :linenos:

         {
           "mappings": {
             "dynamic": false,
             "fields": {
               "title": [
                 {
                   "type": "autocomplete",
                   "tokenization": "rightEdgeGram",
                   "minGrams": 3,
                   "maxGrams": 7,
                   "foldDiacritics": false
                 }
               ]
             }
           }
         }

   .. tab:: nGram Index Definition
      :tabid: nGram

      .. code-block:: json
         :linenos:

         {
           "mappings": {
             "dynamic": false,
             "fields": {
               "title": [
                 {
                   "type": "autocomplete",
                   "tokenization": "nGram",
                   "minGrams": 3,
                   "maxGrams": 7,
                   "foldDiacritics": false
                 }
               ]
             }
           }
         }

.. _autocomplete-ref-egs-basic:

Basic Examples
~~~~~~~~~~~~~~

The following query searches for movies with the characters ``off`` in
the ``title`` field. The query includes a:

- :pipeline:`$limit` stage to limit the output to 10 results.
- :pipeline:`$project` stage to exclude all fields except ``title``.

.. code-block:: json
   :linenos:

   db.movies.aggregate([
     {
       $search: {
         "autocomplete": {
           "path": "title",
           "query": "off"
         }
       }
     },
     {
       $limit: 10
     },
     {
       $project: {
         "_id": 0,
         "title": 1
       }
     }
   ])

|fts| returns different results depending 
on the tokenization strategy configured in the 
:ref:`autocompletion field of the index definition <bson-data-types-autocomplete>`:

.. tabs::

   .. tab:: edgeGram
      :tabid: edgeGram

      .. code-block:: json
         :copyable: false
         :linenos:

         { "title" : "Off the Map" },
         { "title" : "Off and Running" },
         { "title" : "Benji: Off the Leash!" },
         { "title" : "An Officer and a Gentleman" },
         { "title" : "A Spell to Ward Off the Darkness" },
         { "title" : "Office Romance" },
         { "title" : "Office Killer" },
         { "title" : "Office Space" },
         { "title" : "Off Beat" },
         { "title" : "Official Rejection" }

      In the above results, the characters ``off`` appear at the
      left side of a word in all the titles.

   .. tab:: rightEdgeGram
      :tabid: rightEdgeGram

      .. code-block:: json
         :copyable: false
         :linenos:

         { "title": "Ole dole doff" },
         { "title": "Set It Off" },
         { "title": "Ferris Bueller's Day Off" },
         { "title": "A Spell to Ward Off the Darkness" },
         { "title": "Taking Off" },
         { "title": "Noises Off..." },
         { "title": "Brassed Off" },
         { "title": "Face/Off" },
         { "title": "Martin & Orloff" },
         { "title": "Meek's Cutoff" }

      In the above results, the characters ``off`` appear at the
      right side of a word in all the titles.

   .. tab:: nGram
      :tabid: nGram

      .. code-block:: json
         :copyable: false
         :linenos:

         { "title" : "Come Have Coffee with Us" },
         { "title" : "A Spell to Ward Off the Darkness" },
         { "title" : "Remake, Remix, Rip-Off: About Copy Culture & Turkish Pop Cinema" },
         { "title" : "Benji: Off the Leash!" },
         { "title" : "A Coffee in Berlin" },
         { "title" : "An Officer and a Gentleman" },
         { "title" : "The Official Story" },
         { "title" : "The Officer's Ward" },
         { "title" : "Hands off Mississippi" },
         { "title" : "Romanoff and Juliet" }

      In the above results, the characters ``off`` appear at
      different positions in the titles.

.. _autocomplete-ref-egs-fuzzy:

Fuzzy Example
~~~~~~~~~~~~~

The following query searches for movies with the characters ``pre`` in
the ``title`` field. The query uses:

.. list-table::
   :stub-columns: 1
   :widths: 10 90

   * - Field
     - Description

   * - ``maxEdits``
     - Indicates that only one character variation is allowed in the
       query string ``pre`` to match the query to a word in the
       documents.

   * - ``prefixLength``
     - Indicates that the first character in the query string ``pre``
       can't change when matching the query to a word in the documents.

   * - ``maxExpansions``
     - Indicates that up to two hundred and fifty six similar terms for
       ``pre`` can be considered when matching the query string to a
       word in the documents.

The query also includes a:

- :pipeline:`$limit` stage to limit the output to 10 results.
- :pipeline:`$project` stage to exclude all fields except ``title``.

.. code-block:: json
   :linenos:

   db.movies.aggregate([
     {
       $search: {
         "autocomplete": {
           "path": "title",
           "query": "pre",
           "fuzzy": {
             "maxEdits": 1,
             "prefixLength": 1,
             "maxExpansions": 256
           }
         }
       }
     },
     {
       $limit: 10
     },
     {
       $project: {
         "_id": 0,
         "title": 1
       }
     }
   ])

|fts| returns different results depending 
on the tokenization strategy configured in the 
:ref:`autocompletion field of the index definition <bson-data-types-autocomplete>`:

.. tabs::

   .. tab:: edgeGram
      :tabid: edgeGram

      .. code-block:: json
         :copyable: false
         :linenos:

         { "title" : "Prelude to War" },
         { "title" : "Sitting Pretty" },
         { "title" : "Gentlemen Prefer Blondes" },
         { "title" : "The Parent Trap" },
         { "title" : "Premature Burial" },
         { "title" : "The President's Analyst" },
         { "title" : "Pretty Poison" },
         { "title" : "El castillo de la pureza" },
         { "title" : "Premiya" },
         { "title" : "All the President's Men" }

      These results show the words that are predicted for the query
      string with one character modification and with the first
      character constant at the left side of the word in all the
      titles.

   .. tab:: rightEdgeGram
      :tabid: rightEdgeGram

      .. code-block:: json
         :copyable: false
         :linenos:

         { "title": "Where Are My Children?" },
         { "title": "The Four Horsemen of the Apocalypse" },
         { "title": "The Hunchback of Notre Dame" },
         { "title": "Show People" },
         { "title": "Berkeley Square" },
         { "title": "Folies Bergère de Paris" },
         { "title": "Here Comes Mr. Jordan" },
         { "title": "Cat People" },
         { "title": "People on the Alps" },
         { "title": "The Gang's All Here" }

      These results show the words that are predicted for the query
      string with one character modification and with the first
      character constant at the right side of the word in all the
      titles.

   .. tab:: nGram
      :tabid: nGram

      .. code-block:: json
         :copyable: false
         :linenos:

         { "title" : "Les vampires" },
         { "title" : "He Who Gets Slapped" },
         { "title" : "Shanghai Express" },
         { "title" : "It Happened One Night" },
         { "title" : "The Scarlet Empress" },
         { "title" : "David Copperfield" },
         { "title" : "Prelude to War" },
         { "title" : "It Happened on Fifth Avenue" },
         { "title" : "Berlin Express" },
         { "title" : "Sitting Pretty" }

      These results show the words that are predicted for the query
      string with one character modification at different positions in
      the words in the titles.

.. _autocomplete-ref-egs-tokenOrder:

Token Order Example
~~~~~~~~~~~~~~~~~~~

The following queries search for movies with the characters ``men
with`` in the ``title`` field. The queries also use the ``tokenOrder`` field,
which specifies whether the query searches for tokens in ``any`` order 
or in ``sequential`` order.

Each query includes a:

- :pipeline:`$limit` stage to limit the output to 4 results.
- :pipeline:`$project` stage to exclude all fields except ``title``.

.. tabs::

   .. tab:: any
      :tabid: any

      .. code-block:: json
         :linenos:

         db.movies.aggregate([
           {
             $search: {
               "autocomplete": {
                 "path": "title",
                 "query": "men with",
                 "tokenOrder": "any"
               }
             }
           },
           {
             $limit: 4
           },
           {
             $project: {
               "_id": 0,
               "title": 1
             }
           }
         ])

      This query returns the following results for the ``edgeGram``
      :ref:`tokenization strategy <bson-data-types-autocomplete>`:

      .. code-block:: json
         :copyable: false

         { "title" : "Men Without Women" },
         { "title" : "Men with Guns" },
         { "title" : "Men with Brooms" },
         { "title" : "Without Men" }

      This query returns the following results for the ``rightEdgeGram``
      :ref:`tokenization strategy <bson-data-types-autocomplete>`:

      .. code-block:: json
         :copyable: false

         { "title": "Men with Guns" },
         { "title": "Men with Brooms" },
         { "title": "Getting Even with Dad" },
         { "title": "Chicken with Plums" }

      This query returns the following results for the ``nGram``
      :ref:`tokenization strategy <bson-data-types-autocomplete>`:

      .. code-block:: json
         :copyable: false

         { "title" : "Men Without Women" },
         { "title" : "Men with Guns" },
         { "title" : "Men with Brooms" },
         { "title" : "Women Without Men" }

   .. tab:: sequential
      :tabid: sequential

      .. code-block:: json
         :linenos:

         db.movies.aggregate([
           {
             $search: {
               "autocomplete": {
                 "path": "title",
                 "query": "men with",
                 "tokenOrder": "sequential"
               }
             }
           },
           {
             $limit: 4
           },
           {
             $project: {
               "_id": 0,
               "title": 1
             }
           }
         ])

      This query returns the following results for the ``edgeGram``
      :ref:`tokenization strategy <bson-data-types-autocomplete>`:

      .. code-block:: json
         :copyable: false

         { "title" : "Men Without Women" },
         { "title" : "Men with Guns" },
         { "title" : "Men with Brooms" }

      This query returns the following results for the ``rightEdgeGram``
      :ref:`tokenization strategy <bson-data-types-autocomplete>`:

      .. code-block:: json
         :copyable: false

         { "title": "Getting Even with Dad" },
         { "title": "Men with Guns" },
         { "title": "Men with Brooms" },
         { "title": "Chicken with Plums" }

      This query returns the following results for the ``nGram``
      :ref:`tokenization strategy <bson-data-types-autocomplete>`:

      .. code-block:: json
         :copyable: false

         { "title" : "Men Without Women" },
         { "title" : "Men with Guns" },
         { "title" : "Men with Brooms" },
         { "title" : "Women Without Men" }
