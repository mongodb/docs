==========================
ClientEncryption.encrypt()
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. method:: ClientEncryption.encrypt(keyId, value, algorithm or encOptions)

   :method:`ClientEncryption.encrypt` encrypts the ``value`` using the
   specified ``keyId`` and the algorithm specified by ``algorithm`` or 
   ``encOptions``. :method:`~ClientEncryption.encrypt` supports explicit 
   (manual) encryption of field values.

   :returns:
  
     A :bsontype:`binary data <Binary>`  object with
     `subtype 6 <https://github.com/mongodb/specifications/blob/master/source/client-side-encryption/subtype6.rst>`_.

Syntax
------

.. code-block:: javascript

   clientEncryption = db.getMongo().getClientEncryption()
  
   clientEncryption.encrypt(
     keyId,
     value,
     algorithm or encOptions,
   )

.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter
     - Type
     - Description

   * - ``keyId``
     - ``UUID``
     - The data encryption key to use for encrypting the ``value``.
    
       The :abbr:`UUID (Universally unique identifier)` is a BSON
       :bsontype:`binary data <Binary>` object with subtype ``4``
       that identifies a specific data encryption key. If the data
       encryption key does not exist in the key vault configured for
       the database connection, :method:`~ClientEncryption.encrypt()`
       returns an error. See :ref:`qe-reference-key-vault`
       for more information on key vaults and data encryption keys.

   * - ``value``
     - See :ref:`encrypt-bson-types`.
     - The value to encrypt.

   * - ``algorithm`` or ``encOptions``
     - string or document
     -
       - To explicitly encrypt fields with :ref:`Client-Side Field Level
         Encryption <csfle-fundamentals-manual-encryption>`:

         Specify the ``algorithm`` as a string or ``encOptions`` as a 
         document containing the field ``algorithm``.

         The supported algorithms are:

         - ``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``
         - ``AEAD_AES_256_CBC_HMAC_SHA_512-Random``

         For examples, see :ref:`Set the Client-Side Field Level 
         Encryption Algorithm <set-csfle-algorithm>`.

         For complete documentation on the supported encryption
         algorithms, see :ref:`<field-level-encryption-algorithms>`.

       - To explicitly encrypt fields with :ref:`Queryable Encryption 
         <qe-fundamentals-manual-encryption>`:

         Specify the ``algorithm`` as a string or ``encOptions`` as a 
         document containing the fields:

         - ``algorithm``: The encryption algorithm to use for 
           encrypting the ``value``. The supported algorithms are:

           - ``Indexed``
           - ``Unindexed``
         
         - ``contentionFactor``: Required when ``algorithm`` is set
           to ``Indexed``. Related to the frequency of the values for 
           this field.

         - ``queryType``: The only query type currently supported is
           ``"equality"``. ``queryType`` must be set when algorithm is 
           not ``Indexed``.

         For examples, see :ref:`Set the Queryable Encryption Algorithm 
         <set-qe-algorithm>`.

         For details on the supported encryption algorithms, see
         :ref:`<qe-fundamentals-man-enc-algorithm-choice>`.


Behavior
--------

.. include:: /includes/create-an-encrypted-db-conn.rst 

.. _encrypt-bson-types:

Unsupported BSON Types
~~~~~~~~~~~~~~~~~~~~~~

You cannot use :method:`~ClientEncryption.encrypt()` 
to encrypt values with the following BSON types:

- ``minKey``
- ``maxKey``
- ``null``
- ``undefined``

If encrypting a field using
``AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic``,
:method:`~ClientEncryption.encrypt()` does *not* support the following
BSON types:

- ``double``
- ``decimal128``
- ``bool``
- ``object``
- ``array``

Examples
--------

.. _set-csfle-algorithm:

Client-Side Field Level Encryption
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example uses a locally managed KMS for the client-side
field level encryption configuration.

.. procedure::
   :style: normal

   .. step:: Create Your Encrypted Connection

      .. include:: /includes/csfle-connection-boilerplate-example-2.rst

   .. step:: Encrypt Your Data

      Retrieve the :method:`ClientEncryption <getClientEncryption()>` object
      and use the :method:`ClientEncryption.encrypt()` method to encrypt
      a value using a specific data encryption key ``UUID`` and 
      :ref:`encryption algorithm <field-level-encryption-algorithms>`:

      .. code-block:: javascript

         clientEncryption = encryptedClient.getClientEncryption();

         clientEncryption.encrypt(
           UUID("64e2d87d-f168-493c-bbdf-a394535a2cb9"), 
           "123-45-6789", 
           "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
         )

      You can also specify the algorithm using a document with an
      ``algorithm`` field:

      .. code-block:: javascript

         clientEncryption = encryptedClient.getClientEncryption();

         clientEncryption.encrypt(
           UUID("64e2d87d-f168-493c-bbdf-a394535a2cb9"), 
           "123-45-6789", 
           { algorithm: "AEAD_AES_256_CBC_HMAC_SHA_512-Random" }
         )

Example Results
```````````````
If successful, :method:`~ClientEncryption.encrypt` returns the encrypted 
value:

.. code-block:: javascript
   :copyable: false

   BinData(6,"AmTi2H3xaEk8u9+jlFNaLLkC3Q/+kmwDbbWrq+h9nuv9W+u7A5a0UnpULBNZH+Q21fAztPpU09wpKPrju9dKfpN1Afpj1/ZhFcH6LYZOWSBBOAuUNjPLxMNSYOOuITuuYWo=")

For complete documentation on initiating MongoDB connections with
client-side field level encryption enabled, see :method:`Mongo()`.

.. _set-qe-algorithm:

Queryable Encryption
~~~~~~~~~~~~~~~~~~~~

The following example uses a locally managed KMS for the 
Queryable Encryption configuration.

.. procedure::
   :style: normal

   .. step:: Create Your Encrypted Connection

      .. include:: /includes/qe-connection-boilerplate.rst

   .. step:: Encrypt Your Data

      Retrieve the :method:`ClientEncryption <getClientEncryption()>` object
      and use the :method:`ClientEncryption.encrypt()` method to encrypt
      a value using a specific data encryption key ``UUID`` and 
      :ref:`encryption algorithm <field-level-encryption-algorithms>`:

      .. code-block:: javascript

         const eDB = "encrypted"
         const eKV = "__keyVault"

         const clientEncryption = encryptedClient.getClientEncryption();
         const keyVaultClient = Mongo().getDB(eDB).getCollection(eKV)

         const dek = keyVaultClient.findOne({ keyAltNames: "dataKey1" })

         clientEncryption.encrypt(
           dek._id,
           "123-45-6789", 
           "Unindexed"
         )

      You can also specify the algorithm using a document containing the
      fields:

      - ``algorithm``
      - ``queryType``
      - ``contentionFactor``

      .. code-block:: javascript

         const eDB = "encrypted"
         const eKV = "__keyVault"

         const clientEncryption = encryptedClient.getClientEncryption();
         const keyVaultClient = Mongo().getDB(eDB).getCollection(eKV)

         const dek = keyVaultClient.findOne({ keyAltNames: "dataKey1" })

         clientEncryption.encrypt(
           dek._id,
           "123-45-6789", 
           { 
             algorithm: "Indexed", 
             queryType: "equality", 
             contentionFactor: 4
           }
         )

Example Results
```````````````

If successful, :method:`~ClientEncryption.encrypt` returns the encrypted 
value:


.. code-block:: javascript
   :copyable: false

   Binary(Buffer.from("05b100000005640020000000005ab3581a43e39a8e855b1ac87013e841735c09d19ae86535eea718dd56122ba50573002000000000703d2cba9832d90436c6c92eb232aa5b968cdcd7a3138570bc87ef0a9eb3a0e905630020000000009cb61df010b1bb54670a5ad979f25f4c48889059dfd8920782cf03dd27d1a50b05650020000000003f5acea703ea357d3eea4c6a5b19139a580089341424a247839fd4d5cf0d312a12636d00040000000000000000", "hex"), 6)

Learn More
----------

For complete documentation on initiating MongoDB connections with
client-side field level encryption enabled, see :method:`Mongo()`.
