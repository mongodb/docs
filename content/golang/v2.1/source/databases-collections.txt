.. _golang-databases-collections:

=========================
Databases and Collections
=========================


.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: table, row, organize, storage, code example
   :description: Learn how to manage MongoDB databases and collections using the Go driver, including accessing, creating, and deleting collections.

Overview
--------

In this guide, you can learn how to interact with MongoDB databases and
collections by using the {+driver-short+}.

MongoDB organizes data into a hierarchy of the following levels:

- **Databases**: Top-level data structures in a MongoDB deployment that store
  collections.
- **Collections**: Groups of MongoDB documents. They are analogous to tables in
  relational databases.
- **Documents**: Units that store literal data such as strings, numbers, dates,
  and other embedded documents. For more information about document field types
  and structure, see the :manual:`Documents </core/document/>` entry in the
  {+mdb-server+} manual.

Access a Database
-----------------

You can access a database by using the ``Database()`` method on a ``Client``
instance.

The following example accesses a database named ``test_database``:

.. literalinclude:: /includes/databases-collections.go
   :start-after: start-access-database
   :end-before: end-access-database
   :language: go
   :copyable:
   :dedent:

Access a Collection
-------------------

You can access a collection by using the ``Collection()`` method on a
``Database`` instance.

The following example accesses a collection named ``test_collection``:

.. literalinclude:: /includes/databases-collections.go
   :start-after: start-access-collection
   :end-before: end-access-collection
   :language: go
   :copyable:
   :dedent:

.. tip::

   If the provided collection name does not already exist in the database,
   MongoDB implicitly creates the collection when you first insert data into it.

Create a Collection
-------------------

To explicity create a collection, you can use the ``CreateCollection()`` method
on a ``Database`` instance.

The following example creates a collection named ``example_collection``:

.. literalinclude:: /includes/databases-collections.go
   :start-after: start-create-collection
   :end-before: end-create-collection
   :language: go
   :copyable:
   :dedent:

You can specify collection options, such as maximum size and document validation
rules, by passing an ``options.CreateCollectionOptions`` struct to the
``CreateCollection()`` method of a ``Database`` instance. For a full list of
optional parameters, see the :manual:`create command
</reference/command/create>` entry in the {+mdb-server+} manual.

Get a List of Collections
-------------------------

You can query for a list of collections in a database by using the
``ListCollections()`` method on a ``Database`` instance.

The following example gets a list of all the collections in a database, and then
prints the collection names to the console:

.. literalinclude:: /includes/databases-collections.go
   :start-after: start-list-collections
   :end-before: end-list-collections
   :language: go
   :copyable:
   :dedent:

Delete a Collection
-------------------

You can delete a collection by using the ``Drop()`` method on a ``Database``
instance.

The following example deletes a collection named
``test_collection``:

.. literalinclude:: /includes/databases-collections.go
   :start-after: start-delete-collection
   :end-before: end-delete-collection
   :language: go
   :copyable:
   :dedent:

.. warning:: Dropping a Collection Deletes All Data in the Collection

   Dropping a collection from your database permanently deletes all documents
   and all indexes within that collection.

   Drop a collection only if you no longer need the data in that collection.

API Documentation
-----------------

To learn more about any of the types or methods discussed in this guide, see the
following API documentation:

- `Client <{+api+}/mongo#Client>`__
- `Database <{+api+}/mongo#Database>`__
- `Collection <{+api+}/mongo#Collection>`__
- `CreateCollection() <{+api+}/mongo#Database.CreateCollection>`__
- `ListCollections() <{+api+}/mongo#Database.ListCollections>`__
- `Drop() <{+api+}/mongo#Database.Drop>`__
