====================
System-Defined Roles
====================

.. using System-Defined Roles instead of System Roles
   since the user-defined roles are stored in system.roles collection

.. default-domain:: mongodb

MongoDB uses role-based authorization to give users access to data and
commands. In addition to providing the ability to :ref:`create
user-defined roles <user-defined-roles>`, MongoDB provides
system-defined roles.

.. TODO This page needs updates, both in content as well as style.

.. _system-user-roles:

Roles
-----

Database User Roles
~~~~~~~~~~~~~~~~~~~

.. authrole:: read

   Provides users with the ability to read data from any collection
   within a specific logical database. This includes
   :method:`~db.collection.find()` and the following :term:`database
   commands <database command>`:

   - :dbcommand:`aggregate`
   - :dbcommand:`checkShardingIndex`
   - :dbcommand:`cloneCollectionAsCapped`
   - :dbcommand:`collStats`
   - :dbcommand:`count`
   - :dbcommand:`dataSize`
   - :dbcommand:`dbHash`
   - :dbcommand:`dbStats`
   - :dbcommand:`distinct`
   - :dbcommand:`filemd5`
   - :dbcommand:`geoNear`
   - :dbcommand:`geoSearch`
   - :dbcommand:`geoWalk`
   - :dbcommand:`group`
   - :dbcommand:`mapReduce` (inline output only.)
   - :dbcommand:`text` (beta feature.)

.. authrole:: readWrite

   Provides users with the ability to read from or write to any
   collection within a specific logical database. Users with
   :authrole:`readWrite` have access to all of the operations
   available to :authrole:`read` users, as well as the following basic
   write operations: :method:`~db.collection.insert()`,
   :method:`~db.collection.remove()`, and
   :method:`~db.collection.update()`.

   Additionally, users with the :authrole:`readWrite` have access to
   the following :term:`database commands <database command>`:

   - :dbcommand:`cloneCollection` (as the target database.)
   - :dbcommand:`convertToCapped`
   - :dbcommand:`create` (and to create collections implicitly.)
   - :method:`~db.collection.drop()`
   - :dbcommand:`dropIndexes`
   - :dbcommand:`emptycapped`
   - :method:`~db.collection.ensureIndex()`
   - :dbcommand:`findAndModify`
   - :dbcommand:`mapReduce` (output to a collection.)
   - :dbcommand:`renameCollection` (within the same database.)

.. _database-admin-roles:

Database Administration Roles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. authrole:: dbAdmin

   Provides the ability to perform the following set of administrative
   operations within the scope of this logical database.

   - :dbcommand:`clean`
   - :dbcommand:`collMod`
   - :dbcommand:`collStats`
   - :dbcommand:`compact`
   - :dbcommand:`convertToCapped`
   - :dbcommand:`create`
   - :method:`db.createCollection()`
   - :dbcommand:`dbStats`
   - :method:`~db.collection.drop()`
   - :dbcommand:`dropIndexes`
   - :method:`~db.collection.ensureIndex()`
   - :dbcommand:`indexStats`
   - :dbcommand:`profile`
   - :dbcommand:`reIndex`
   - :dbcommand:`renameCollection` (within a single database.)
   - :dbcommand:`validate`

   Furthermore, only :authrole:`dbAdmin` has the ability to read the
   :data:`system.profile <<database>.system.profile>` collection.

   .. - :dbcommand:`storageDetails` (experimental command.)

      (not documented.)

   .. TODO integrate into the documentation..

      to perform renameCollection across databases.  To do so, you
      need :authrole:`readWrite` on the target, and either
      (:authrole:`readWrite` or (:authrole:`read` and
      :authrole:`dbAdmin`)) on the source.

.. authrole:: userAdmin

   Provides the ability to modify permissions for existing users
   and create new users on the current database. :authrole:`userAdmin`
   does not restrict the permissions that a user can grant, and a
   :authrole:`userAdmin` user can grant privileges to themselves or
   other users in excess of the :authrole:`userAdmin` users' current privileges.

   .. important:: :authrole:`userAdmin` is effectively the *superuser*
      role for a specific database. Users with :authrole:`userAdmin`
      can grant themselves all privileges. However,
      :authrole:`userAdmin` does not explicitly authorize a user for
      any privileges beyond user administration.

   .. include:: /includes/note-user-admin-on-admin-database.rst

.. _admin-roles:

Administrative Roles
~~~~~~~~~~~~~~~~~~~~

.. authrole:: clusterAdmin

   Grants access to several administration
   operations that affect or present information about the whole system,
   rather than just a single database. These privileges include but
   are not limited to :term:`replica set` and :term:`sharded cluster`
   administrative functions.

   :authrole:`clusterAdmin` is only applicable on the ``admin``
   database, and does not confer any access to the ``local`` or
   ``config`` databases.

   Specifically, users with the :authrole:`clusterAdmin` role have
   access to the following operations:

   - :dbcommand:`addShard`
   - :dbcommand:`closeAllDatabases`
   - :dbcommand:`connPoolStats`
   - :dbcommand:`connPoolSync`
   - :dbcommand:`_cpuProfilerStart`
   - :dbcommand:`_cpuProfilerStop`
   - :dbcommand:`cursorInfo`
   - :dbcommand:`diagLogging`
   - :dbcommand:`dropDatabase`
   - :dbcommand:`enableSharding`
   - :dbcommand:`flushRouterConfig`
   - :dbcommand:`fsync`
   - :method:`db.fsyncUnlock()`
   - :dbcommand:`getCmdLineOpts`
   - :dbcommand:`getLog`
   - :dbcommand:`getParameter`
   - :dbcommand:`getShardMap`
   - :dbcommand:`getShardVersion`
   - :dbcommand:`hostInfo`
   - :method:`db.currentOp()`
   - :method:`db.killOp()`
   - :dbcommand:`listDatabases`
   - :dbcommand:`listShards`
   - :dbcommand:`logRotate`
   - :dbcommand:`moveChunk`
   - :dbcommand:`movePrimary`
   - :dbcommand:`netstat`
   - :dbcommand:`removeShard`
   - :dbcommand:`repairDatabase`
   - :dbcommand:`replSetFreeze`
   - :dbcommand:`replSetGetStatus`
   - :dbcommand:`replSetInitiate`
   - :dbcommand:`replSetMaintenance`
   - :dbcommand:`replSetReconfig`
   - :dbcommand:`replSetStepDown`
   - :dbcommand:`replSetSyncFrom`
   - :dbcommand:`resync`
   - :dbcommand:`serverStatus`
   - :dbcommand:`setParameter`
   - :dbcommand:`setShardVersion`
   - :dbcommand:`shardCollection`
   - :dbcommand:`shardingState`
   - :dbcommand:`shutdown`
   - :dbcommand:`splitChunk`
   - :dbcommand:`splitVector`
   - :dbcommand:`split`
   - :dbcommand:`top`
   - :dbcommand:`touch`
   - :dbcommand:`unsetSharding`

   For some cluster administration operations, MongoDB requires read
   and write access to the ``local`` or ``config`` databases. You must specify
   this access separately from :authrole:`clusterAdmin`. See the
   :ref:`auth-role-combined` section for more information.

.. _auth-any-database-roles:

All-Database Roles
~~~~~~~~~~~~~~~~~~

The following roles apply to all databases in a :program:`mongod`
instance and are roughly equivalent to their single-database
equivalents. You must specify the following "any" database roles on the
``admin`` databases.

.. TODO FOR 2.6 Is the following still true ??? -BG

.. If you add any of these roles outside of the ``admin``
   database, the privilege will have no effect. However, only the
   specification of the roles must occur in the ``admin`` database,
   with :ref:`delegated authentication credentials
   <delegated-credentials>`, users can gain these privileges by
   authenticating to another database.

.. authrole:: readAnyDatabase

   Provides users with the same read-only
   permissions as :authrole:`read`, except it applies to *all* logical
   databases in the MongoDB environment.

.. authrole:: readWriteAnyDatabase

   Provides users with the same read and
   write permissions as :authrole:`readWrite`, except it applies to *all*
   logical databases in the MongoDB environment.

.. authrole:: userAdminAnyDatabase

   Provides users with the same
   access to user administration operations as :authrole:`userAdmin`,
   except it applies to *all* logical databases in the MongoDB
   environment.

   .. important:: Because users with :authrole:`userAdminAnyDatabase`
      and :authrole:`userAdmin` have the ability to create and modify
      permissions in addition to their own level of access, this role
      is *effectively* the MongoDB system superuser. However,
      :authrole:`userAdminAnyDatabase` and :authrole:`userAdmin` do
      not explicitly authorize a user for any privileges beyond user
      administration.

.. authrole:: dbAdminAnyDatabase

   Provides users with the same access
   to database administration operations as :authrole:`dbAdmin`,
   except it applies to *all* logical databases in the MongoDB
   environment.

.. authrole:: root

   Gives a user access to all the operations and all the resources of *of
   all other roles combined*. A user with this role is a superuser.

.. Does this need to change with the new user-defined roles?

.. _auth-role-combined:

Combined-Access Operations
--------------------------

The following operations are available only to users that have multiple
roles:

:method:`sh.status()`
   Requires :authrole:`clusterAdmin` and :authrole:`read` access to
   the :data:`config` database.

:dbcommand:`applyOps`, :dbcommand:`eval` [#eval-shell-helper]_
   Requires :authrole:`readWriteAnyDatabase`,
   :authrole:`userAdminAnyDatabase`, :authrole:`dbAdminAnyDatabase` and
   :authrole:`clusterAdmin` (on the ``admin`` database.)

The following operations related to cluster administration are *not* available to
users who have *only* the :authrole:`clusterAdmin` role:

:method:`rs.conf()`
   Requires :authrole:`read` on the ``local`` database.

:method:`sh.addShard()`
   Requires :authrole:`readWrite` on the ``config`` database.

.. [#eval-shell-helper] The :program:`mongo` shell provides
   :method:`db.eval()` as a helper for the :dbcommand:`eval` command.
   As a wrapper, :method:`db.eval()` requires the same privileges.
