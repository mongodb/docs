.. meta::
   :robots: noindex, nosnippet


.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol



Annotation Type RealmModule
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_annotations_RealmModule:



io.realm.annotations
====================

**Implemented interfaces:**



- `java.lang.annotation.Annotation <https://docs.oracle.com/javase/7/docs/api/java/lang/annotation/Annotation.html>`__ 


By default a Realm can store all classes extending RealmObject in a project. However, if you want to restrict a Realm to only contain a subset of classes or want to share them between a library project and an app project, you must use a RealmModule.A RealmModule is a collection of classes extending RealmObject that can be combined with other RealmModules to create the schema for a Realm. This makes it easier to control versioning and migration of those Realms.

A RealmModule can either be a library module or an app module. The distinction is made by setting ``library = true`` . Setting ``library = true``  is normally only relevant for library authors. See below for further details.



Currently, it is not possible to have multiple RealmModule declarations in a single file. If you have more than one RealmModule, you will have to use separate Java files for each module.



RealmModules and libraries
==========================

Realms default behavior is to automatically create a RealmModule called ``DefaultRealmModule``  which contains all classes extending RealmObject in a project. This module is automatically known by Realm.

This behavior is problematic when combining a library project and an app project that both uses Realm. This is because the ``DefaultRealmModule``  will be created for both the library project and the app project, which will cause the project to fail with duplicate class definition errors.



Library authors are responsible for avoiding this conflict by using explicit modules where ``library = true``  is set. This disables the generation of the DefaultRealmModule for the library project and allows the library to be included in the app project that also uses Realm. This means that library projects that uses Realm internally are required to specify a specific module using ``RealmConfiguration.modules()`` .



App developers are not required to specify any modules, as they implicitly use the ``DefaultRealmModule`` , but they now has the option of adding the library project classes to their schema using ``RealmConfiguration.addModule()`` .






.. seealso::


   
   - `Example of a project using modules <https://github.com/realm/realm-java/tree/master/examples/moduleExample>`__ 
      
      
      
      
   
   
   



Optional Element Summary
========================

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Optional Element and Description
   
   * - public **boolean**
       
       
     - Instead of adding all Realm classes manually to a module, set this boolean to true to automatically include all Realm classes in this project.
       
       
       
   
   * - public :ref:`RealmNamingPolicy <io_realm_annotations_RealmNamingPolicy>` 
       
       
     - The naming policy applied to all classes part of this module.
       
       
       
   
   * - public `Class <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__ 
       
       
     - Specifies the classes extending RealmObject that should be part of this module.
       
       
       
   
   * - public :ref:`RealmNamingPolicy <io_realm_annotations_RealmNamingPolicy>` 
       
       
     - The naming policy applied to all field names in all classes part of this module.
       
       
       
   
   * - public **boolean**
       
       
     - Setting this to true will mark this module as a library module.
       
       
       
   
   


Element Detail
==============

.. _allClasses:

.. _allClasses__:

.. _RealmModule_allClasses:

.. _RealmModule_allClasses__:

.. _io_realm_annotations_RealmModule_allClasses:

.. _io_realm_annotations_RealmModule_allClasses__:

.. list-table::
   :header-rows: 1
   
   * - allClasses
   
   * - ``public boolean allClasses`` 
       
       Instead of adding all Realm classes manually to a module, set this boolean to true to automatically include all Realm classes in this project. This does not include classes from other libraries which must be exposed using their own module. Setting both ``allClasses = true``  and ``classes()``  will result in the annotation processor throwing an exception.
       
       
       
       
       **Default:**
       ``false`` 
       
       
   
   
.. _classNamingPolicy:

.. _classNamingPolicy__:

.. _RealmModule_classNamingPolicy:

.. _RealmModule_classNamingPolicy__:

.. _io_realm_annotations_RealmModule_classNamingPolicy:

.. _io_realm_annotations_RealmModule_classNamingPolicy__:

.. list-table::
   :header-rows: 1
   
   * - classNamingPolicy
   
   * - ``public RealmNamingPolicy classNamingPolicy`` 
       
       The naming policy applied to all classes part of this module. The default policy is :ref:`RealmNamingPolicy.NO_POLICY <io_realm_annotations_RealmNamingPolicy_NO_POLICY>` . To define a naming policy for all fields in the classes, use :ref:`fieldNamingPolicy() <io_realm_annotations_RealmModule_fieldNamingPolicy__>` .
       
       It is possible to override the naming policy specified in the module in each class using the :ref:`RealmClass <io_realm_annotations_RealmClass>`  annotation.
       
       
       
       If a class is part of multiple modules, the same naming policy must be applied to both modules, otherwise an error will be thrown.
       
       
       
       
       **Default:**
       ``io.realm.annotations.RealmNamingPolicy.NO_POLICY`` 
       
       
       
       .. seealso::
       
       
          
          - :ref:`io.realm.annotations.RealmNamingPolicy for more information about what setting this policy means. <io_realm_annotations_RealmNamingPolicy>` 
             
             
             
          
          
          
       
       
   
   
.. _classes:

.. _classes__:

.. _RealmModule_classes:

.. _RealmModule_classes__:

.. _io_realm_annotations_RealmModule_classes:

.. _io_realm_annotations_RealmModule_classes__:

.. list-table::
   :header-rows: 1
   
   * - classes
   
   * - ``public Class classes`` 
       
       Specifies the classes extending RealmObject that should be part of this module. Only classes in this project can be included. Classes from other libraries must be exposed using their own module. Setting both ``allClasses = true``  and ``classes()``  will result in the annotation processor throwing an exception.
       
       
       
       
       **Default:**
       ``{}`` 
       
       
   
   
.. _fieldNamingPolicy:

.. _fieldNamingPolicy__:

.. _RealmModule_fieldNamingPolicy:

.. _RealmModule_fieldNamingPolicy__:

.. _io_realm_annotations_RealmModule_fieldNamingPolicy:

.. _io_realm_annotations_RealmModule_fieldNamingPolicy__:

.. list-table::
   :header-rows: 1
   
   * - fieldNamingPolicy
   
   * - ``public RealmNamingPolicy fieldNamingPolicy`` 
       
       The naming policy applied to all field names in all classes part of this module. The default policy is :ref:`RealmNamingPolicy.NO_POLICY <io_realm_annotations_RealmNamingPolicy_NO_POLICY>` . To define a naming policy for class names, use :ref:`classNamingPolicy() <io_realm_annotations_RealmModule_classNamingPolicy__>` .
       
       It is possible to override this naming policy using either :ref:`RealmClass.fieldNamingPolicy() <io_realm_annotations_RealmClass_fieldNamingPolicy__>`  or :ref:`RealmField.name() <io_realm_annotations_RealmField_name__>` .
       
       
       
       
       
       
       **Default:**
       ``io.realm.annotations.RealmNamingPolicy.NO_POLICY`` 
       
       
       
       .. seealso::
       
       
          
          - :ref:`io.realm.annotations.RealmNamingPolicy for more information about what setting this policy means. <io_realm_annotations_RealmNamingPolicy>` 
             
             
             
          
          
          
       
       
   
   
.. _library:

.. _library__:

.. _RealmModule_library:

.. _RealmModule_library__:

.. _io_realm_annotations_RealmModule_library:

.. _io_realm_annotations_RealmModule_library__:

.. list-table::
   :header-rows: 1
   
   * - library
   
   * - ``public boolean library`` 
       
       Setting this to true will mark this module as a library module. This will prevent Realm from generating the ``DefaultRealmModule``  containing all classes. This is required by libraries so they do not interfere with Realms running in app code, but it also means that all libraries using Realm must explicitly use a module and cannot rely on the default module being present. Creating library modules and normal modules in the same project is not allowed and will result in the annotation processor throwing an exception.
       
       
       
       
       **Default:**
       ``false`` 
       
       
   
   

