.. meta::
   :keywords: code example

.. _pagination-skip-limit-tutorial:

===============================================
How to Divide Query Results into Discrete Pages
===============================================

.. default-domain:: mongodb

.. meta::
   :description: In this tutorial, learn how to use $skip and $limit after the $search stage to paginate query results.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

|fts| queries might return many results. To make navigating results 
easier, you can use the following :manual:`aggregation pipeline stages 
</core/aggregation-pipeline/>` to paginate your query results:

1. :pipeline:`$skip` bypasses the specified number of documents that 
   pass into the stage and passes the remaining documents to the next 
   stage in the pipeline.

#. :pipeline:`$limit` restricts the number of documents passed to the 
   next stage in the pipeline.

You can extend this method to your applications so that a 
:guilabel:`Next Page` button skips past the first ten results and 
shows the next ten results from that point. Although this method allows
you to retrieve pages non-sequentially, this might be slow if your query 
results is large. 

.. note::

   We recommend using the :pipeline:`$search` ``searchAfter`` and
   ``searchBefore`` options to return results in-order for building
   "Next Page" and "Previous Page" functions in your application. To
   learn more, see :ref:`fts-paginate-results`. 

You can also use the :ref:`fts-facet-aggregation-variable` to return 
the total number of search results. You can use this information in 
your applications to show the total number of search results, or the 
number of pages available to your application user.

This tutorial takes you through the following steps:

1. Set up an |fts| index with dynamic mapping for the 
   ``sample_mflix.movies`` collection.

#. Run an |fts| query using the following:

   - :pipeline:`$skip` and :pipeline:`$limit` 
     after the :pipeline:`$search` stage to paginate the results.

   - :ref:`fts-facet-aggregation-variable` to return the 
     total number of search results.

Before you begin, ensure that your |service| {+cluster+} meets the 
requirements described in the :ref:`Prerequisites 
<fts-tutorials-prereqs>`.

.. include:: /includes/atlas-roles/create-search-index.rst

Create the |fts| Index With Dynamic Mapping 
-------------------------------------------

In this section, we create an |fts| index that uses :ref:`dynamic 
mapping <static-dynamic-mappings>` to index the fields in the 
``sample_mflix.movies`` collection. 

.. include:: /includes/steps/fts-pagination-tutorial-create-index.rst
   
Run a Query and Paginate the Results
------------------------------------

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu to set the
language of the example in this section.

----------

.. tabs-selector:: drivers

.. include:: /includes/extracts/fts-divide-results-query-desc.rst

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. include:: /includes/steps-fts-divide-results-tutorial-run-query-shell.txt

   .. tab::
      :tabid: compass

      .. include:: /includes/steps-fts-divide-results-tutorial-run-query-compass.txt

   .. tab::
      :tabid: csharp

      .. include:: /includes/steps-fts-divide-results-tutorial-run-query-cs.txt

   .. tab:: 
      :tabid: go

      .. include:: /includes/steps-fts-divide-results-tutorial-run-query-go.txt

   .. tab:: 
      :tabid: java-sync 

      .. include:: /includes/steps-fts-divide-results-tutorial-run-query-java.txt

   .. tab:: 
      :tabid: kotlin-coroutine

      .. include:: /includes/steps-fts-divide-results-tutorial-run-query-kotlin.txt

   .. tab::
      :tabid: nodejs

      .. include:: /includes/steps-fts-divide-results-tutorial-run-query-nodejs.txt

   .. tab::
      :tabid: python

      .. include:: /includes/steps-fts-divide-results-tutorial-run-query-python.txt

