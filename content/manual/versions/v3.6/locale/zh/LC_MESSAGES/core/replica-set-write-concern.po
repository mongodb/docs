#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/replica-set-write-concern.txt:3
msgid "Write Concern for Replica Sets"
msgstr ""

#: ../source/core/replica-set-write-concern.txt:13
msgid ""
":ref:`Write concern <write-concern>` for replica sets describe the number"
" of data-bearing members (i.e. the primary and secondaries, but not "
"arbiters) that must acknowledge a write operation before the operation "
"returns as successful. A member can only acknowledge a write operation "
"after it has received and applied the write successfully."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:20
msgid ""
"For replica sets, the default write concern of :writeconcern:`w: 1 "
"</<number/>>` requires that only the primary replica set member "
"acknowledge the write before returning write concern acknowledgment. You "
"can specify an integer value greater than ``1`` to require acknowledgment"
" from the primary and as many secondaries as needed to meet the specified"
" value, up to the total number of data-bearing members in the replica "
"set."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:28
msgid ""
"Write operations with a write concern of :writeconcern:`\"majority\"` "
"require acknowledgment from a simple majority of data-bearing voting "
"replica set members (i.e. :rsconf:`members[n].votes` is greater than "
"``0`` and :rsconf:`members[n].arbiterOnly` is ``false``). For clusters "
"where members have :ref:`journaling <journaling-internals>` enabled, "
"combining ``\"majority\"`` write concern with :writeconcern:`j : true "
"<j>` can prevent :ref:`rollback <replica-set-rollbacks>` of write concern"
" acknowledged data."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:38
msgid ""
"For complete documentation on write acknowledgment behavior, see :ref"
":`wc-ack-behavior`."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:43
msgid ""
"An application that issues a write operation that requires write concern "
"acknowledgment waits until the primary receives acknowledgment from the "
"required number of members for the specified write concern. For write "
"concern of ``w`` greater than 1 or ``w : \"majority\"``, the primary "
"waits until the required number of secondaries acknowledge the write "
"before returning write concern acknowledgment. For write concern of ``w: "
"1``, the primary can return write concern acknowledgment as soon as it "
"locally applies the write since it is eligible for contributing to the "
"requested write concern."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:53
msgid ""
"The more members that acknowledge a write, the less likely the written "
"data could roll back if the :ref:`primary fails <replication-auto-"
"failover>`. However, specifying a high write concern can increase latency"
" as the client must wait until it receives the requested level of write "
"concern acknowledgment."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:59
msgid ""
"Selecting the ideal write concern for any given write operation depends "
"on your application's performance goals and data durability requirements."
" For more guidance on configuring write concern to prevent rollbacks, see"
" :ref:`rollback-avoid`."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:65
msgid "Verify Write Operations to Replica Sets"
msgstr ""

#: ../source/core/replica-set-write-concern.txt:67
msgid ""
"The following operation includes the ``writeConcern`` option to the "
":method:`~db.collection.insert()` method. The operation specifies "
":writeconcern:`\"majority\"` write concern and a 5 second timeout using "
"the :ref:`wc-wtimeout` write concern parameter so that the operation does"
" not block indefinitely."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:80
msgid ""
"The application waits until the primary returns write concern "
"acknowledgment, indicating that a simple majority of data-bearing voting "
"members acknowledged the write operation. For example, in a 3-member "
"replica set the operation would require acknowledgment from 2 out of the "
"3 members. If the replica set was later scaled to include two additional "
"voting nodes, the same operation would require acknowledgment from 3 out "
"of the 5 replica set members. If the primary does not return write "
"concern acknowledgment within the ``wtimeout`` limit, the write operation"
" fails with a write concern error."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:91
msgid ""
"A write operation that times out waiting for the specified write concern "
"only indicates that the required number of replica set members did not "
"acknowledge the write operation within the ``wtimeout`` time period. It "
"does not necessarily indicate that the primary failed to apply the write."
" The data may exist on a subset of replica set nodes at the time of the "
"write concern error, and can continue replicating until all nodes in the "
"cluster have that data. Applications should take into account the "
"potential availability of written data regardless of the state of write "
"concern acknowledgment."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:101
msgid ""
"The exact syntax for specifying write concern depends on the write "
"operation. Refer to the documentation for the write operation for "
"instructions on write concern support and syntax. For complete "
"documentation on write concern, see :ref:`write-concern`."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:107
msgid ":ref:`write-methods-incompatibility`"
msgstr ""

#: ../source/core/replica-set-write-concern.txt:112
msgid "Modify Default Write Concern"
msgstr ""

#: ../source/core/replica-set-write-concern.txt:117
msgid ""
"You can modify the default write concern for a replica set by setting the"
" :rsconf:`settings.getLastErrorDefaults` setting in the :doc:`replica set"
" configuration </reference/replica-configuration>`. The following "
"sequence of commands creates a configuration that waits for the write "
"operation to complete on a majority of the voting members before "
"returning:"
msgstr ""

#: ../source/core/replica-set-write-concern.txt:130
msgid ""
"If you issue a write operation with a specific write concern, the write "
"operation uses its own write concern instead of the default."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:133
msgid ":doc:`/reference/write-concern`"
msgstr ""

#: ../source/core/replica-set-write-concern.txt:136
msgid "Custom Write Concerns"
msgstr ""

#: ../source/core/replica-set-write-concern.txt:138
msgid ""
"You can :doc:`tag </tutorial/configure-replica-set-tag-sets>` the members"
" of replica sets and use the resulting tag sets to create custom write "
"concerns. See :doc:`/tutorial/configure-replica-set-tag-sets` for "
"information on configuring custom write concerns using tag sets."
msgstr ""

#~ msgid ""
#~ "For a replica set, the default "
#~ ":doc:`write concern </core/write-concern>` "
#~ "confirms write operations only on the"
#~ " primary. You can, however, override "
#~ "this default write concern, such as "
#~ "to confirm write operations on a "
#~ "specified number of the replica set "
#~ "members."
#~ msgstr ""

#~ msgid ""
#~ "You can modify the default write "
#~ "concern for a replica set by "
#~ "setting the "
#~ ":data:`~replSetGetConfig.settings.getLastErrorDefaults` setting"
#~ " in the :doc:`replica set configuration "
#~ "</reference/replica-configuration>`. The following"
#~ " sequence of commands creates a "
#~ "configuration that waits for the write"
#~ " operation to complete on a majority"
#~ " of the voting members before "
#~ "returning:"
#~ msgstr ""

#~ msgid ""
#~ "Use of insufficient write concern can"
#~ " lead to :ref:`rollbacks <replica-set-"
#~ "rollbacks>` in the case of :ref:`replica"
#~ " set failover <replica-set-failover>`. "
#~ "Always ensure that your operations have"
#~ " specified the required write concern "
#~ "for your application."
#~ msgstr ""

#~ msgid ""
#~ ":ref:`write-operations-write-concern` and "
#~ ":ref:`connections-write-concern`"
#~ msgstr ""

#~ msgid ""
#~ "From the perspective of a client "
#~ "application, whether a MongoDB instance "
#~ "is running as a single server "
#~ "(i.e. \"standalone\") or a :term:`replica "
#~ "set` is transparent. However, replica "
#~ "sets offer some configuration options "
#~ "for write. [#sharded-clusters]_"
#~ msgstr ""

#~ msgid ""
#~ ":term:`Sharded clusters <sharded cluster>` "
#~ "where the shards are also replica "
#~ "sets provide the same configuration "
#~ "options with regards to write and "
#~ "read operations."
#~ msgstr ""

#~ msgid ""
#~ "To override the default write concern,"
#~ " specify a write concern with each"
#~ " write operation. For example, the "
#~ "following method includes a write "
#~ "concern that specifies that the method"
#~ " return only after the write "
#~ "propagates to the primary and at "
#~ "least one secondary or the method "
#~ "times out after 5 seconds."
#~ msgstr ""

#~ msgid ""
#~ "You can include a timeout threshold "
#~ "for a write concern. This prevents "
#~ "write operations from blocking indefinitely"
#~ " if the write concern is "
#~ "unachievable. For example, if the write"
#~ " concern requires acknowledgement from 4"
#~ " members of the replica set and "
#~ "the replica set has only available "
#~ "3 members, the operation blocks until"
#~ " those members become available. See "
#~ ":ref:`wc-wtimeout`."
#~ msgstr ""

#~ msgid "On this page"
#~ msgstr ""

#~ msgid ""
#~ "For a replica set, the default "
#~ ":doc:`write concern </reference/write-concern>` "
#~ "requests acknowledgement only from the "
#~ "primary. You can, however, override this"
#~ " default write concern, such as to"
#~ " confirm write operations on a "
#~ "specified number of the replica set "
#~ "members."
#~ msgstr ""

