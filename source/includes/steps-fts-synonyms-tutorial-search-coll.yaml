ref: fts-synonyms-tutorial-step13
level: 4
stepnum: 1
inherit:
  file: steps-fts-tutorial-run-query.yaml
  ref: connect-to-database-deployment-fts
---
ref: fts-synonyms-tutorial-step14
level: 4
stepnum: 2
inherit:
  file: steps-fts-tutorial-run-query.yaml
  ref: use-sample-mflix
---
ref: fts-synonyms-tutorial-step15
level: 4
stepnum: 3
title: "Run the following queries on the ``movies`` collection."
content: |
  |fts| query results vary based on the type of word mapping defined in 
  the synonyms source collection. 

  .. tabs:: 

     .. tab:: equivalent Mapping Type
        :tabid: equivalent
  
        The following query searches the ``title`` field for the word 
        ``automobile`` and uses the synonym mapping definition named 
        ``mySynonyms`` to search for words configured as synonyms of 
        the query word ``automobile`` in the synonyms source 
        collection named ``sample_synonyms``. It includes a: 
  
        - :manual:`$limit </reference/operator/aggregation/limit>` 
          stage to limit the output to 10 results.
        - :manual:`$project </reference/operator/aggregation/project>` 
          stage to: 
    
          - Exclude all fields except the ``title`` field.
          - Add a field named ``score``.

        .. code-block:: json 

           db.movies.aggregate([
             {
               $search: {
                 "text": {
                   "path": "title",
                   "query": "automobile",
                   "synonyms": "mySynonyms"
                 }
               }
             },
             {
               $limit: 10
             },
             {
               $project: {
                 "_id": 0,
                 "title": 1,
                 "score": { $meta: "searchScore" }
               }
             }
           ])

        This query returns the following results: 

        .. code-block:: json 
           :copyable: false 

           { "title" : "Cars", "score" : 4.197734832763672 }
           { "title" : "Planes, Trains & Automobiles", "score" : 3.8511905670166016 }
           { "title" : "Car Wash", "score" : 3.39473032951355 }
           { "title" : "Used Cars", "score" : 3.39473032951355 }
           { "title" : "Blue Car", "score" : 3.39473032951355 }
           { "title" : "Cars 2", "score" : 3.39473032951355 }
           { "title" : "Stealing Cars", "score" : 3.39473032951355 }
           { "title" : "Cop Car", "score" : 3.39473032951355 }
           { "title" : "The Cars That Eat People", "score" : 2.8496146202087402 }
           { "title" : "Khrustalyov, My Car!", "score" : 2.8496146202087402 }

        The |fts| results contain movies with ``car`` and 
        ``automobile`` in the ``title`` field although the query term 
        is ``automobile`` because we configured ``automobile`` to be a 
        synonym of ``car``, ``vehicle``, and ``automobile`` in the 
        synonyms source collection named ``sample_synonyms``, which is 
        specified in the index for the collection. |fts| returns the 
        same results for a search of the words ``car`` and ``vehicle``. 
        To test this, replace the value of the ``query`` field in the 
        query above with either ``car`` or ``vehicle`` and run the 
        query in your {+mongosh+}. 

     .. tab:: explicit Mapping Type
        :tabid: explicit

        The following query searches the ``title`` field for the word 
        ``boat`` and uses the synonym mapping definition named 
        ``mySynonyms`` to search for words configured as synonyms of 
        the query word ``boat`` in the synonyms source collection named 
        ``sample_synonyms``. It includes a: 
  
        - :manual:`$limit </reference/operator/aggregation/limit>` 
          stage to limit the output to 10 results.
        - :manual:`$project </reference/operator/aggregation/project>` 
          stage to: 
    
          - Exclude all fields except the ``title`` field.
          - Add a field named ``score``.

        .. code-block:: json 

           db.movies.aggregate([
             {
               $search: {
                 "text": {
                   "path": "title",
                   "query": "boat",
                   "synonyms": "mySynonyms"
                 }
               }
             },
             {
               $limit: 10
             },
             {
               $project: {
                 "_id": 0,
                 "title": 1,
                 "score": { $meta: "searchScore" }
               }
             }
           ])

        This query returns the following results: 

        .. code-block:: json 
           :copyable: false 

           { "title" : "Vessel", "score" : 5.373150825500488 }
           { "title" : "Boats", "score" : 4.589139938354492 }
           { "title" : "And the Ship Sails On", "score" : 4.3452959060668945 }
           { "title" : "Broken Vessels", "score" : 4.3452959060668945 }
           { "title" : "Sailing to Paradise", "score" : 4.3452959060668945 }
           { "title" : "Boat People", "score" : 3.711261749267578 }
           { "title" : "Boat Trip", "score" : 3.711261749267578 }
           { "title" : "Three Men in a Boat", "score" : 3.1153182983398438 }
           { "title" : "The Glass Bottom Boat", "score" : 3.1153182983398438 }
           { "title" : "Jack Goes Boating", "score" : 3.1153182983398438 }

        The |fts| results contain movies with ``boat``, ``vessel``, and 
        ``sail`` in the ``title`` field because we configured ``boat``, 
        ``vessel``, and ``sail`` to be synonyms of ``boat`` in the 
        synonyms source collection named ``sample_synonyms``, which is 
        specified in the index for the collection. 
        
        |fts| returns the following documents only for a search of the 
        word ``vessel`` in the results:

        .. code-block:: json 
           :copyable: false 

           { "title" : "Vessel", "score" : 5.373150825500488 }
           { "title" : "Broken Vessels", "score" : 4.3452959060668945 }

        |fts| doesn't include documents with either ``boat`` or 
        ``sail`` in the ``title`` field in the results because we 
        didn't configure ``vessel`` to be a synonym of either ``boat`` 
        or ``sail`` in the synonyms source collection. To test this, 
        replace the value of the ``query`` field in the query above 
        with ``vessel`` and run the query in your {+mongosh+}. 

        Similarly, |fts| returns the following documents only in the 
        results for a search of the term ``sail``:

        .. code-block:: json 
           :copyable: false

           { "title" : "And the Ship Sails On", "score" : 4.3452959060668945 }
           { "title" : "Sailing to Paradise", "score" : 4.3452959060668945 }

        |fts| doesn't include documents with either ``boat`` or 
        ``vessel`` in the ``title`` field in the results because we 
        didn't configure ``sail`` to be a synonym of either ``boat`` 
        or ``vessel`` in the synonyms source collection. To test this, 
        replace the value of the ``query`` field in the query above 
        with ``sail`` and run the query in your {+mongosh+}. 
...
