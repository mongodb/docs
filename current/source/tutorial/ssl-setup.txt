:noprevnext:

==============================
Configure TLS for {+bi-short+}
==============================

.. meta::
   :description: Set up TLS encryption for BI Connector by creating self-signed certificates and configuring MongoDB components for secure data transmission.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

For |bi-short| to transmit data securely, you should enable Transport
Layer Security (TLS) encryption on your MongoDB instance, your
|mongosqld| instance, and in your BI tool. A complete description of
|tls| configuration is outside the scope of this document, but this
tutorial outlines the process for creating your own |tls| certificates
for testing purposes and starting the MongoDB components with |tls|
enabled.

.. important::

   Use these procedures for testing purposes only. Your production
   environment should use |tls| certificates that a recognized
   certificate authority (CA) has issued.

Prerequisites
-------------

- A MongoDB user with sufficient permissions to run |mongosqld|.
- A |mongod| instance which you can start and stop.
- A |mongosqld| instance which you can start and stop.
- `OpenSSL <https://www.openssl.org/source/>`_
- The `MySQL shell <https://dev.mysql.com/downloads/shell/>`_

  .. seealso::

     :ref:`User Permissions for Cached Sampling <cached-sampling-user-permissions>`

Note on Cluster Availability
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To ensure read availability for your MongoDB :manual:`replica sets </replication>` and :manual:`sharded clusters </sharding>` while |bi-short| enables |tls|, use a
:manual:`rolling upgrade procedure </tutorial/perform-maintence-on-replica-set-members/>`.
While the replica set primary upgrades, applications must wait until
after failover and election cycle completes.

.. seealso::

   :manual:`Replica Set Availability </core/replica-set-high-availability>`

Create and Test Self-Signed Certificates
----------------------------------------

This tutorial contains instructions on creating several files which
allow a |mongosqld| process to accept OpenSSL encrypted connections
from an |sql| client, such as the MySQL shell, and make an encrypted
connection with a |mongod| instance. We create two
:wikipedia:`.pem files </Privacy-enhanced_Electronic_Mail>`. Each file
contains an encryption key and a self-signed |tls| certificate.

.. tabs-platforms::

   .. tab:: Windows
      :tabid: windows

      .. include:: /includes/steps/windows-ssl-config.rst

   .. tab:: macOS
      :tabid: macos

      .. include:: /includes/steps/mac-ssl-config.rst
