# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/model-tree-structures.txt:7
msgid "Model Tree Structures in MongoDB"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:9
msgid ""
"To model hierarchical or nested data relationships, you can use references "
"to implement tree-like structures. The following *Tree* pattern examples "
"model book categories that have hierarchical relationships."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:15
msgid "Model Tree Structures with Child References"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:17
msgid "(:doc:`link </tutorial/model-tree-structures-with-child-references>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:3
msgid ""
"The *Child References* pattern stores each tree node in a document; in "
"addition to the tree node, document stores in an array the id(s) of the "
"node's children."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:7
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:7
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:7
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:11
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:11
msgid "Consider the following hierarchy of categories:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:11
msgid ""
"The following example models the tree using *Child References*, storing the "
"reference to the node's children in the field ``children``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:23
msgid ""
"The query to retrieve the immediate children of a node is fast and "
"straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:30
msgid ""
"You can create an index on the field ``children`` to enable fast search by "
"the child nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:37
msgid ""
"You can query for a node in the ``children`` field to find its parent node "
"as well as its siblings:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:44
msgid ""
"The *Child References* pattern provides a suitable solution to tree storage "
"as long as no operations on subtrees are necessary. This pattern may also "
"provide a suitable solution for storing graphs where a node may have "
"multiple parents."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:23
msgid "Model Tree Structures with Parent References"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:25
msgid "(:doc:`link </tutorial/model-tree-structures-with-parent-references>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:3
msgid ""
"The *Parent References* pattern stores each tree node in a document; in "
"addition to the tree node, the document stores the id of the node's parent."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:12
msgid ""
"The following example models the tree using *Parent References*, storing the"
" reference to the parent category in the field ``parent``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:24
msgid ""
"The query to retrieve the parent of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:31
msgid ""
"You can create an index on the field ``parent`` to enable fast search by the"
" parent node:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:38
msgid ""
"You can query by the ``parent`` field to find its immediate children nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:45
msgid ""
"The *Parent Links* pattern provides a simple solution to tree storage but "
"requires multiple queries to retrieve subtrees."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:31
msgid "Model Tree Structures with an Array of Ancestors"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:33
msgid "(:doc:`link </tutorial/model-tree-structures-with-ancestors-array>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:3
msgid ""
"The *Array of Ancestors* pattern stores each tree node in a document; in "
"addition to the tree node, document stores in an array the id(s) of the "
"node's ancestors or path."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:11
msgid ""
"The following example models the tree using *Array of Ancestors*. In "
"addition to the ``ancestors`` field, these documents also store the "
"reference to the immediate parent category in the ``parent`` field:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:24
msgid ""
"The query to retrieve the ancestors or path of a node is fast and "
"straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:31
msgid ""
"You can create an index on the field ``ancestors`` to enable fast search by "
"the ancestors nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:38
msgid "You can query by the field ``ancestors`` to find all its descendants:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:44
msgid ""
"The *Array of Ancestors* pattern provides a fast and efficient solution to "
"find the descendants and the ancestors of a node by creating an index on the"
" elements of the ancestors field. This makes *Array of Ancestors* a good "
"choice for working with subtrees."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:49
msgid ""
"The *Array of Ancestors* pattern is slightly slower than the "
":doc:`Materialized Paths </tutorial/model-tree-structures-with-materialized-"
"paths>` pattern but is more straightforward to use."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:39
msgid "Model Tree Structures with Materialized Paths"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:41
msgid ""
"(:doc:`link </tutorial/model-tree-structures-with-materialized-paths>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:3
msgid ""
"The *Materialized Paths* pattern stores each tree node in a document; in "
"addition to the tree node, document stores as a string the id(s) of the "
"node's ancestors or path. Although the *Materialized Paths* pattern requires"
" additional steps of working with strings and regular expressions, the "
"pattern also provides more flexibility in working with the path, such as "
"finding nodes by partial paths."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:15
msgid ""
"The following example models the tree using *Materialized Paths*, storing "
"the path in the field ``path``; the path string uses the comma ``,`` as a "
"delimiter:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:28
msgid ""
"You can query to retrieve the whole tree, sorting by the field ``path``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:35
msgid ""
"You can use regular expressions on the ``path`` field to find the "
"descendants of ``Programming``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:42
msgid ""
"You can also retrieve the descendants of ``Books`` where the ``Books`` is "
"also at the topmost level of the hierarchy:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:49
msgid "To create an index on the field ``path`` use the following invocation:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:56
msgid "This index may improve performance depending on the query:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:58
msgid ""
"For queries from the root ``Books`` sub-tree (e.g. ``/^,Books,/`` or "
"``/^,Books,Programming,/``), an index on the ``path`` field improves the "
"query performance significantly."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:62
msgid ""
"For queries of sub-trees where the path from the root is not provided in the"
" query (e.g. ``/,Databases,/``), or similar queries of sub-trees, where the "
"node might be in the middle of the indexed string, the query must inspect "
"the entire index."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:67
msgid ""
"For these queries an index *may* provide some performance improvement *if* "
"the index is significantly smaller than the entire collection."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:47
msgid "Model Tree Structures with Nested Sets"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:49
msgid "(:doc:`link </tutorial/model-tree-structures-with-nested-sets>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:3
msgid ""
"The *Nested Sets* pattern identifies each node in the tree as stops in a "
"round-trip traversal of the tree. The application visits each node in the "
"tree twice; first during the initial trip, and second during the return "
"trip. The *Nested Sets* pattern stores each tree node in a document; in "
"addition to the tree node, document stores the id of node's parent, the "
"node's initial stop in the ``left`` field, and its return stop in the "
"``right`` field."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:15
msgid "The following example models the tree using *Nested Sets*:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:26
msgid "You can query to retrieve the descendants of a node:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:33
msgid ""
"The *Nested Sets* pattern provides a fast and efficient solution for finding"
" subtrees but is inefficient for modifying the tree structure. As such, this"
" pattern is best for static trees that do not change."
msgstr ""
