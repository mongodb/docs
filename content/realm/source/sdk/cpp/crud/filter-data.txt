.. meta::
   :robots: noindex, nosnippet

.. _cpp-client-query-engine:
.. _cpp-filter-data:

=====================
Filter Data - C++ SDK
=====================

.. meta:: 
  :keywords: code example

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

To filter data in your realm, you can leverage
Realm's query engine. You can also sort filtered data. For an example of
how to sort query results, refer to :ref:`cpp-sort-lists-and-results`.

.. include:: /includes/note-cpp-supports-subset-of-rql.rst

About the Examples on This Page
-------------------------------
   
The examples in this page use a simple data set for a
todo list app. The two Realm object types are ``Project``
and ``Item``. An ``Item`` has:

- A name
- A completed flag
- An optional assignee's name
- A number repesenting priority, where higher is more important
- A count of minutes spent working on it

A ``Project`` has a name and a to-many relationship to zero or more ``Items``.

The schemas for ``Project`` and ``Item`` are:

.. literalinclude:: /examples/generated/cpp/filter-data.snippet.models.cpp
   :language: cpp

You can set up the realm for these examples with the following code:

.. literalinclude:: /examples/generated/cpp/filter-data.snippet.set-up-filter-data-tests.cpp
   :language: cpp

Filter Data
-----------

Comparison Operators
~~~~~~~~~~~~~~~~~~~~
Value comparisons

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - | ``==``
     - Evaluates to ``true`` if the left-hand expression is equal to the 
       right-hand expression.

   * - | ``>``
     - Evaluates to ``true`` if the left-hand numerical or date expression is 
       greater than the right-hand numerical or date expression. For dates, this 
       evaluates to ``true`` if the left-hand date is later than the right-hand 
       date.

   * - | ``>=``
     - Evaluates to ``true`` if the left-hand numerical or date expression is 
       greater than or equal to the right-hand numerical or date expression. For 
       dates, this evaluates to ``true`` if the left-hand date is later than or 
       the same as the right-hand date.

   * - | ``<``
     - Evaluates to ``true`` if the left-hand numerical or date expression is 
       less than the right-hand numerical or date expression. For dates, this 
       evaluates to ``true`` if the left-hand date is earlier than the 
       right-hand date.

   * - | ``<=``
     - Evaluates to ``true`` if the left-hand numeric expression is less than 
       or equal to the right-hand numeric expression. For dates, this evaluates 
       to ``true`` if the left-hand date is earlier than or the same as the 
       right-hand date.

   * - | ``!=``
     - Evaluates to ``true`` if the left-hand expression is not equal to the 
       right-hand expression.

.. example::

   The following example uses the query engine's
   comparison operators to:

   - Find high priority tasks by comparing the value of the ``priority`` property 
     value with a threshold number, above which priority can be considered high.
   - Find just-started or short-running tasks by seeing if the ``progressMinutes`` 
     property falls within a certain range.
   - Find unassigned tasks by finding tasks where the ``assignee`` property is 
     equal to ``std::nullopt``.
   - Find tasks assigned to specific teammates Ali or Jamie by seeing if the 
     ``assignee`` property is in a list of names.

   .. literalinclude:: /examples/generated/cpp/filter-data.snippet.comparison-operators.cpp
      :language: cpp

Logical Operators
~~~~~~~~~~~~~~~~~

You can use the logical operators listed in the following table to make compound 
predicates:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - | ``&&``
     - Evaluates to ``true`` if both left-hand and right-hand expressions are 
       ``true``.

   * - | ``!``
     - Negates the result of the given expression.

   * - | ``||``
     - Evaluates to ``true`` if either expression returns ``true``.

.. example::

   We can use the query language's logical operators to find
   all of Ali's completed tasks. That is, we find all tasks
   where the ``assignee`` property value is equal to 'Ali' AND
   the ``isComplete`` property value is ``true``:

   .. literalinclude:: /examples/generated/cpp/filter-data.snippet.logical-operators.cpp
      :language: cpp

String Operators
~~~~~~~~~~~~~~~~

You can compare string values using these string operators.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - | ``.contains(_ value: String)``
     - Evaluates to ``true`` if the left-hand string expression is found anywhere in the right-hand string expression.

   * - | ``==``
     - Evaluates to ``true`` if the left-hand string is lexicographically equal to the right-hand string.

   * - | ``!=``
     - Evaluates to ``true`` if the left-hand string is not lexicographically equal to the right-hand string.

.. example::

   The following example uses the query engine's string operators to find:

   - Projects with names that contain 'ie'

   .. literalinclude:: /examples/generated/cpp/filter-data.snippet.string-operators.cpp
      :language: cpp
