# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 18:49+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# d0bcf4443e4642c89a4b72eeca948711
#: ../source/reference/operator/aggregation/cond.txt:3
msgid "$cond (aggregation)"
msgstr ""

# 982dd92bfb50409286d953cd191c33c8
#: ../source/reference/operator/aggregation/cond.txt
msgid "On this page"
msgstr ""

# 827b282e9bab41078642ad31ab98c14f
#: ../source/reference/operator/aggregation/cond.txt:14
msgid "Definition"
msgstr ""

# 1f71dc49a48e40a283aa10bc61eb8f04
#: ../source/reference/operator/aggregation/cond.txt:18
msgid ""
"Evaluates a boolean expression to return one of the two specified return "
"expressions."
msgstr ""

# 76705b9d040643db846c07246a036648
#: ../source/reference/operator/aggregation/cond.txt:21
msgid "The :expression:`$cond` expression has one of two syntaxes:"
msgstr ""

# 32ebbbc3f42d47db94f1e664a5fb3206
#: ../source/reference/operator/aggregation/cond.txt:29
msgid "Or:"
msgstr ""

# ef3e59cbc95f41e49693c077b3cebf70
#: ../source/reference/operator/aggregation/cond.txt:35
msgid ""
"If the ``<boolean-expression>`` evaluates to ``true``, then "
":expression:`$cond` evaluates and returns the value of the ``<true-"
"case>`` expression. Otherwise, :expression:`$cond` evaluates and returns "
"the value of the ``<false-case>`` expression."
msgstr ""

# cc3018dba02f42e08cc247587fd49ca8
#: ../source/reference/operator/aggregation/cond.txt:40
msgid ""
"The arguments can be any valid :ref:`expression <aggregation-"
"expressions>`. For more information on expressions, see :ref"
":`aggregation-expressions`."
msgstr ""

# 01d94155e80147138949267349cac2c9
#: ../source/reference/operator/aggregation/cond.txt:45
msgid "Example"
msgstr ""

# c6f3a7be725b47b6bb91d1624839281c
#: ../source/reference/operator/aggregation/cond.txt:47
msgid ""
"The following example use a ``inventory`` collection with the following "
"documents:"
msgstr ""

# 982da081d0b44de4b5a337f7be50556d
#: ../source/reference/operator/aggregation/cond.txt:56
msgid ""
"The following aggregation operation uses the :expression:`$cond` "
"expression to set the ``discount`` value to ``30`` if ``qty`` value is "
"greater than or equal to 250 and to ``20`` if ``qty`` value is less than "
"``250``:"
msgstr ""

# a5d4bac5ab4d421eb38fd8e72ee6f1e8
#: ../source/reference/operator/aggregation/cond.txt:78
msgid "The operation returns the following results:"
msgstr ""

# 7eaef18c59774de896ae75a4b7256ed1
#: ../source/reference/operator/aggregation/cond.txt:86
msgid ""
"The following operation uses the array syntax of the :expression:`$cond` "
"expression and returns the same results:"
msgstr ""

#~ msgid "Definition"
#~ msgstr ""

#~ msgid ""
#~ ":expression:`$cond` is a ternary operator "
#~ "that takes three expressions and "
#~ "evaluates the first expression to "
#~ "determine which of the subsequent "
#~ "expressions to return. :expression:`$cond` "
#~ "accepts input either as an array "
#~ "with three items, or as an object."
#~ msgstr ""

#~ msgid ":expression:`$cond` now accepts expressions in the form of documents."
#~ msgstr ""

#~ msgid "Syntax"
#~ msgstr ""

#~ msgid "Document"
#~ msgstr ""

#~ msgid ":expression:`$cond` adds support for the document format."
#~ msgstr ""

#~ msgid ""
#~ "When :expression:`$cond` takes a document, "
#~ "the document has three fields: ``if``,"
#~ " ``then``, and ``else``. Consider the "
#~ "following example:"
#~ msgstr ""

#~ msgid ""
#~ "The ``if`` field takes an expression "
#~ "that evaluates to a Boolean value.  "
#~ "If the expression evaluates to ``true``,"
#~ " then :expression:`$cond` evaluates and "
#~ "returns the value of the ``then`` "
#~ "field. Otherwise, :expression:`$cond` evaluates "
#~ "and returns the value of the "
#~ "``else`` field."
#~ msgstr ""

#~ msgid ""
#~ "The expressions in the ``if``, ``then``,"
#~ " and ``else`` fields may be valid "
#~ "MongoDB :doc:`aggregation expressions "
#~ "</reference/operator/aggregation>`. You cannot use"
#~ " JavaScript in the expressions."
#~ msgstr ""

#~ msgid "Array"
#~ msgstr ""

#~ msgid ""
#~ "When you specify :expression:`$cond` as "
#~ "an array of three expressions, the "
#~ "first expression evaluates to a Boolean"
#~ " value. If the first expression "
#~ "evaluates to``true``, then :expression:`$cond` "
#~ "evaluates and returns the value of "
#~ "the second expression. If the first "
#~ "expression evaluates to ``false``, then "
#~ ":expression:`$cond` evaluates and returns the"
#~ " third expression."
#~ msgstr ""

#~ msgid "Use the :expression:`$cond` operator with the following syntax:"
#~ msgstr ""

#~ msgid ""
#~ "All three values in the array "
#~ "specified to :expression:`$cond` must be "
#~ "valid MongoDB :doc:`aggregation expressions "
#~ "</reference/operator/aggregation>` or document "
#~ "fields. Do not use JavaScript in "
#~ "any aggregation statements, including "
#~ ":expression:`$cond`."
#~ msgstr ""

#~ msgid "Examples"
#~ msgstr ""

#~ msgid "Specify ``$cond`` Expression as a Document"
#~ msgstr ""

#~ msgid ""
#~ "The following aggregation pipeline operation"
#~ " returns a ``weightedCount`` for each "
#~ "``item_id``. The :group:`$sum` operator uses"
#~ " the :expression:`$cond` expression to add"
#~ " ``2`` if the value stored in "
#~ "the ``level`` field is ``E`` and "
#~ "``1`` otherwise."
#~ msgstr ""

#~ msgid "Specify a ``$cond`` Expression using an Array"
#~ msgstr ""

#~ msgid ""
#~ "The following aggregation on the "
#~ "``survey`` collection groups by the "
#~ "``item_id`` field and returns a "
#~ "``weightedCount`` for each ``item_id``. The"
#~ " :group:`$sum` operator uses the "
#~ ":expression:`$cond` expression to add either"
#~ " ``2`` if the value stored in "
#~ "the ``level`` field is ``E`` and "
#~ "``1`` otherwise."
#~ msgstr ""

