stepnum: 1
source:
  file: steps-connect-with-admin-privileges.yaml
  ref: connect
level: 4
---
title: Identify the privileges granted by a role.
ref: identify-privileges
level: 4
pre: |
  For a given role, use the :method:`db.getRole()` method, or the
  :dbcommand:`rolesInfo` command, with the ``showPrivileges`` option:
action:
  - pre: |
      For example, to view the privileges granted by ``read`` role on
      the ``products`` database, use the following operation, issue:
    language: javascript
    code: |
      use products
      db.getRole( "read", { showPrivileges: true } )
  - pre: |
      In the returned document, the :data:`~rolesInfo.privileges` and
      :data:`~rolesInfo.inheritedPrivileges` arrays. The
      :data:`~rolesInfo.privileges` lists the privileges directly
      specified by the role and excludes those privileges inherited
      from other roles. The :data:`~rolesInfo.inheritedPrivileges`
      lists all privileges granted by this role, both directly
      specified and inherited. If the role does not inherit from other
      roles, the two fields are the same.
    language: javascript
    code: |
       ...
       "privileges" : [
         {
           "resource": { "db" : "products", "collection" : "" },
           "actions": [ "collStats","dbHash","dbStats","find","killCursors","planCacheRead" ]
         },
         {
           "resource" : { "db" : "products", "collection" : "system.js" },
           "actions": [ "collStats","dbHash","dbStats","find","killCursors","planCacheRead" ]
         }
       ],
       "inheritedPrivileges" : [
         {
           "resource": { "db" : "products", "collection" : "" },
           "actions": [ "collStats","dbHash","dbStats","find","killCursors","planCacheRead" ]
         },
         {
           "resource" : { "db" : "products", "collection" : "system.js" },
           "actions": [ "collStats","dbHash","dbStats","find","killCursors","planCacheRead" ]
         }
       ]
...
