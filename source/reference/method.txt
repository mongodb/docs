.. _js-administrative-methods:

===================
``mongosh`` Methods
===================

.. default-domain:: mongodb

.. meta:: 
   :description: Mongosh methods for interacting with your data and deployments.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. include:: /includes/extracts/admonition-js-prevalence-methods.rst

.. include:: /includes/extracts/methods-toc-explanation.rst

.. toctree::
   :titlesonly:
   :hidden:
   
   Native Methods </reference/method/js-native>

Atlas Search Index Methods
--------------------------

.. include:: /includes/atlas-search-commands/mongosh-method-intro.rst

.. |fts-index| replace:: {+fts+} index

.. |fts-indexes| replace:: {+fts+} indexes

.. include:: /includes/atlas-search-commands/mongosh-method-table.rst


.. toctree::
   :titlesonly:
   :hidden:

   Atlas Search Index </reference/method/js-atlas-search>

Atlas Stream Processing Methods
------------------------------------------------------

:atlas:`Atlas Stream Processors
</atlas-sp/overview/#mongodb-expression-exp.Stream-Processor>`
let you perform aggregation operations against streams of
continuous data using the same data model and query API that
you use with at-rest data.

Use the following methods to manage Stream Processors:

.. important::

   The following methods can only be run on deployments hosted on
   :atlas:`MongoDB Atlas </>`.

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Name

     - Description

   * - :method:`sp.createStreamProcessor()`

     - Creates a stream processor.

   * - :method:`sp.listStreamProcessors()`

     - Lists all existing stream processors on the current stream
       processing instance.

   * - :method:`sp.process()`

     - Creates an ephemeral stream processor.

   * - :method:`sp.processor.drop()`

     - Deletes an existing stream processor.

   * - :method:`sp.processor.sample()`

     - Returns an array of sampled results from a currently running stream processor.

   * - :method:`sp.processor.start()`

     - Starts an existing stream processor.

   * - :method:`sp.processor.stats()`

     - Returns statistics summarizing an existing stream processor.

   * - :method:`sp.processor.stop()`

     - Stops a currently running stream processor.

.. toctree::
   :titlesonly:
   :hidden:

   Atlas Stream Processing </reference/method/js-atlas-streams>

Collection
----------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :method:`db.collection.analyzeShardKey()`

     - Calculates metrics for evaluating a shard key.

   * - :method:`db.collection.aggregate()`

     - Provides access to the :ref:`aggregation pipeline <aggregation-pipeline>`.

   * - :method:`db.collection.bulkWrite()`

     - Provides bulk write operation functionality.

   * - :method:`db.collection.compactStructuredEncryptionData()`

     - Wraps :dbcommand:`compactStructuredEncryptionData` to return
       a success or failure object.
   
   * - :method:`db.collection.configureQueryAnalyzer()`

     - Configures query sampling for a collection.

   * - :method:`db.collection.count()`

     - Wraps :dbcommand:`count` to return a count of the number of documents in a collection or a view.

   * - :method:`db.collection.countDocuments()`

     - Wraps the :pipeline:`$group` aggregation stage with a :group:`$sum`
       expression to return a count of the number of documents in a
       collection or a view.

   * - :method:`db.collection.createIndex()`

     - Builds an index on a collection.

   * - :method:`db.collection.createIndexes()`

     - Builds one or more indexes on a collection.

   * - :method:`db.collection.dataSize()`

     - Returns the size of the collection. Wraps the :data:`~collStats.size` field in the output of the :dbcommand:`collStats`.

   * - :method:`db.collection.deleteOne()`

     - Deletes a single document in a collection.

   * - :method:`db.collection.deleteMany()`

     - Deletes multiple documents in a collection.

   * - :method:`db.collection.distinct()`

     - Returns an array of documents that have distinct values for the specified field.

   * - :method:`db.collection.drop()`

     - Removes the specified collection from the database.

   * - :method:`db.collection.dropIndex()`

     - Removes a specified index on a collection.

   * - :method:`db.collection.dropIndexes()`

     - Removes all indexes on a collection.

   * - :method:`db.collection.ensureIndex()`

     - Removed. Use :method:`db.collection.createIndex()`.

   * - :method:`db.collection.estimatedDocumentCount()`

     - Wraps :dbcommand:`count` to return an approximate count of the documents in a collection or a view.

   * - :method:`db.collection.explain()`

     - Returns information on the query execution of various methods.

   * - :method:`db.collection.find()`

     - Performs a query on a collection or a view and returns a cursor object.

   * - :method:`db.collection.findAndModify()`

     - Atomically modifies and returns a single document.

   * - :method:`db.collection.findOne()`

     - Performs a query and returns a single document.

   * - :method:`db.collection.findOneAndDelete()`

     - Finds a single document and deletes it.

   * - :method:`db.collection.findOneAndReplace()`

     - Finds a single document and replaces it.

   * - :method:`db.collection.findOneAndUpdate()`

     - Finds a single document and updates it.

   * - :method:`db.collection.getIndexes()`

     - Returns an array of documents that describe the existing indexes on a collection.

   * - :method:`db.collection.getShardDistribution()`

     - For collections in sharded clusters, :method:`db.collection.getShardDistribution()` reports data of :term:`chunk` distribution.

   * - :method:`db.collection.getShardVersion()`

     - Internal diagnostic method for sharded cluster.

   * - :method:`db.collection.hideIndex()`

     - Hides an index from the query planner.

   * - :method:`db.collection.insertOne()`

     - Inserts a new document into a collection.

   * - :method:`db.collection.insertMany()`

     - Inserts several new documents into a collection.

   * - :method:`db.collection.isCapped()`

     - Reports if a collection is a :term:`capped collection`.

   * - :method:`db.collection.latencyStats()`

     - Returns latency statistics for a collection.

   * - :method:`db.collection.mapReduce()`

     - Performs map-reduce style data aggregation.

   * - :method:`db.collection.reIndex()`

     - Rebuilds all existing indexes on a collection.

   * - :method:`db.collection.remove()`

     - Deletes documents from a collection.

   * - :method:`db.collection.renameCollection()`

     - Changes the name of a collection.

   * - :method:`db.collection.replaceOne()`

     - Replaces a single document in a collection.

   * - :method:`db.collection.stats()`

     - Reports on the state of a collection. Provides a wrapper around the :dbcommand:`collStats`.

   * - :method:`db.collection.storageSize()`

     - Reports the total size used by the collection in bytes. Provides a wrapper around the :data:`~collStats.storageSize` field of the :dbcommand:`collStats` output.

   * - :method:`db.collection.totalIndexSize()`

     - Reports the total size used by the indexes on a collection. Provides a wrapper around the :data:`~collStats.totalIndexSize` field of the :dbcommand:`collStats` output.

   * - :method:`db.collection.totalSize()`

     - Reports the total size of a collection, including the size of all documents and all indexes on a collection.

   * - :method:`db.collection.unhideIndex()`

     - Unhides an index from the query planner.

   * - :method:`db.collection.updateOne()`

     - Modifies a single document in a collection.

   * - :method:`db.collection.updateMany()`

     - Modifies multiple documents in a collection.

   * - :method:`db.collection.watch()`

     - Establishes a Change Stream on a collection.

   * - :method:`db.collection.validate()`

     - Performs diagnostic operations on a collection.


.. toctree::
   :titlesonly:
   :hidden:

   Collections </reference/method/js-collection>

.. _js-query-cursor-methods:

Cursor
------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :method:`cursor.addOption()`

     - Adds special wire protocol flags that modify the behavior of the query.'

   * - :method:`cursor.allowDiskUse()`

     - Allows MongoDB to use temporary files on disk to store data exceeding the 100 megabyte system memory limit while processing a blocking sort operation.

   * - :method:`cursor.allowPartialResults()`

     - Allows :method:`db.collection.find()` operations against a
       sharded collection to return partial results, rather than an
       error, if one or more queried shards are unavailable.

   * - :method:`cursor.batchSize()`

     - Controls the number of documents MongoDB will return to the client in a single network message.

   * - :method:`cursor.close()`

     - Close a cursor and free associated server resources.

   * - :method:`cursor.isClosed()`

     - Returns ``true`` if the cursor is closed.

   * - :method:`cursor.collation()`

     - Specifies the collation for the cursor returned by the :method:`db.collection.find()`.

   * - :method:`cursor.comment()`

     - Attaches a comment to the query to allow for traceability in the logs and the system.profile collection.

   * - :method:`cursor.count()`

     - Modifies the cursor to return the number of documents in the result set rather than the documents themselves.

   * - :method:`cursor.explain()`

     - Reports on the query execution plan for a cursor.

   * - :method:`cursor.forEach()`

     - Applies a JavaScript function for every document in a cursor.

   * - :method:`cursor.hasNext()`

     - Returns true if the cursor has documents and can be iterated.

   * - :method:`cursor.hint()`

     - Forces MongoDB to use a specific index for a query.

   * - :method:`cursor.isExhausted()`

     - Returns ``true`` if the cursor is closed *and* there are no objects remaining in the batch.

   * - :method:`cursor.itcount()`

     - Computes the total number of documents in the cursor client-side by fetching and iterating the result set.

   * - :method:`cursor.limit()`

     - Constrains the size of a cursor's result set.

   * - :method:`cursor.map()`

     - Applies a function to each document in a cursor and collects the return values in an array.

   * - :method:`cursor.max()`

     - Specifies an exclusive upper index bound for a cursor. For use with :method:`cursor.hint()`

   * - :method:`cursor.maxTimeMS()`

     - Specifies a cumulative time limit in milliseconds for processing operations on a cursor.

   * - :method:`cursor.min()`

     - Specifies an inclusive lower index bound for a cursor. For use with :method:`cursor.hint()`

   * - :method:`cursor.next()`

     - Returns the next document in a cursor.

   * - :method:`cursor.noCursorTimeout()`

     - Instructs the server to avoid closing a cursor automatically after a period of inactivity.

   * - :method:`cursor.objsLeftInBatch()`

     - Returns the number of documents left in the current cursor batch.

   * - :method:`cursor.pretty()`

     - Configures the cursor to display results in an easy-to-read format.

   * - :method:`cursor.readConcern()`

     - Specifies a :term:`read concern` for a :method:`find() <db.collection.find()>` operation.

   * - :method:`cursor.readPref()`

     - Specifies a :term:`read preference` to a cursor to control how the client directs queries to a :term:`replica set`.

   * - :method:`cursor.returnKey()`

     - Modifies the cursor to return index keys rather than the documents.

   * - :method:`cursor.showRecordId()`

     - Adds an internal storage engine ID field to each document returned by the cursor.

   * - :method:`cursor.size()`

     - Returns a count of the documents in the cursor after applying :method:`~cursor.skip()` and :method:`~cursor.limit()` methods.

   * - :method:`cursor.skip()`

     - Returns a cursor that begins returning results only after passing or skipping a number of documents.

   * - :method:`cursor.sort()`

     - Returns results ordered according to a sort specification.

   * - :method:`cursor.tailable()`

     - Marks the cursor as tailable. Only valid for cursors over capped collections.

   * - :method:`cursor.toArray()`

     - Returns an array that contains all documents returned by the cursor.


.. toctree::
   :titlesonly:
   :hidden:

   Cursors </reference/method/js-cursor>

Database
--------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :method:`db.adminCommand()`

     - Runs a command against the ``admin`` database.

   * - :method:`db.aggregate()`

     - Runs admin/diagnostic pipeline which does not require an underlying collection.

   * - :method:`db.commandHelp()`

     - Returns help information for a :term:`database command`.

   * - :method:`db.createCollection()`

     - Creates a new collection or a view. Commonly used to create a capped collection.

   * - :method:`db.createView()`

     - Creates a view.

   * - :method:`db.currentOp()`

     - Reports the current in-progress operations.

   * - :method:`db.dropDatabase()`

     - Removes the current database.

   * - :method:`db.fsyncLock()`

     - Flushes writes to disk and locks the database to prevent write operations and assist backup operations. Wraps :dbcommand:`fsync`.

   * - :method:`db.fsyncUnlock()`

     - Allows writes to continue on a database locked with :method:`db.fsyncLock()`.

   * - :method:`db.getCollection()`

     - Returns a collection or view object. Used to access collections with names that are not valid in :binary:`~bin.mongosh`.

   * - :method:`db.getCollectionInfos()`

     - Returns collection information for all collections and views in the current database.

   * - :method:`db.getCollectionNames()`

     - Lists all collections and views in the current database.

   * - :method:`db.getLogComponents()`

     - Returns the log message verbosity levels.

   * - :method:`db.getMongo()`

     - Returns the :method:`Mongo()` connection object for the current connection.

   * - :method:`db.getName()`

     - Returns the name of the current database.

   * - :method:`db.getProfilingStatus()`

     - Returns a document that reflects the current profiling level and the profiling threshold.

   * - :method:`db.getReplicationInfo()`

     - Returns a document with replication statistics.

   * - :method:`db.getSiblingDB()`

     - Provides access to the specified database.

   * - :method:`db.hello()`

     - Returns a document that reports the state of the replica set.

   * - :method:`db.help()`

     - Displays descriptions of common ``db`` object methods.

   * - :method:`db.hostInfo()`

     - Returns a document with information about the system MongoDB runs on. Wraps :dbcommand:`hostInfo`

   * - :method:`db.killOp()`

     - Terminates a specified operation.

   * - :method:`db.listCommands()`

     - Displays a list of common database commands.

   * - :method:`db.logout()`

     - *Deprecated*. Ends an authenticated session.

   * - :method:`db.printCollectionStats()`

     - Prints statistics from every collection. Wraps :method:`db.collection.stats()`.

   * - :method:`db.printReplicationInfo()`

     - Prints a report of the status of the replica set from the perspective of the primary.

   * - :method:`db.printSecondaryReplicationInfo()`

     - Prints the status of the replica set from the
       perspective of the secondaries.

   * - :method:`db.printShardingStatus()`

     - Prints a report of the sharding configuration and the chunk ranges.

   * - :method:`db.resetError()`

     - *Removed in MongoDB 5.0.* Resets the last error status.

   * - :method:`db.rotateCertificates()`

     - Performs online TLS certificate rotation. Wraps
       :dbcommand:`rotateCertificates`.

   * - :method:`db.runCommand()`

     - Runs a :ref:`database command <database-commands>`.

   * - :method:`db.serverBuildInfo()`

     - Returns a document that displays the compilation parameters for the :binary:`~bin.mongod` instance. Wraps :dbcommand:`buildInfo`.

   * - :method:`db.serverCmdLineOpts()`

     - Returns a document with information about the runtime used to start the MongoDB instance. Wraps :dbcommand:`getCmdLineOpts`.

   * - :method:`db.serverStatus()`

     - Returns a document that provides an overview of the state of the database process.

   * - :method:`db.setLogLevel()`

     - Sets a single log message verbosity level.

   * - :method:`db.setProfilingLevel()`

     - Modifies the current level of database profiling.

   * - :method:`db.shutdownServer()`

     - Shuts down the current :binary:`~bin.mongod` or :binary:`~bin.mongos` process cleanly and safely.

   * - :method:`db.stats()`

     - Returns a document that reports on the state of the current database.

   * - :method:`db.version()`

     - Returns the version of the :binary:`~bin.mongod` instance.

   * - :method:`db.watch()`

     - Opens a :ref:`change stream cursor <changeStreams>` for a database
       to report on all its non-``system`` collections. Cannot be opened on
       the ``admin``, ``local`` or ``config`` databases.

.. toctree::
   :titlesonly:
   :hidden:

   Databases </reference/method/js-database>

Query Plan Cache
----------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :method:`db.collection.getPlanCache()`

     - Returns an interface to access the query plan cache object and
       associated PlanCache methods for a collection.
   
   * - :method:`PlanCache.clear()`

     - Clears all the cached query plans for a collection.
       Accessible through the plan cache object of a specific collection,
       i.e. ``db.collection.getPlanCache().clear()``.
   
   * - :method:`PlanCache.clearPlansByQuery()`

     - Clears the cached query plans for the specified :term:`plan cache query shape`.
       Accessible through the plan cache object of a specific collection,
       i.e. ``db.collection.getPlanCache().clearPlansByQuery()``
   
   * - :method:`PlanCache.help()`

     - Displays the methods available for a collection's query plan cache.
       Accessible through the plan cache object of a specific collection,
       i.e. ``db.collection.getPlanCache().help()``.

   * - :method:`PlanCache.list()`

     - Returns the plan cache information for a collection. Accessible
       through the plan cache object of a specific collection, i.e.
       ``db.collection.getPlanCache().list()``.

.. toctree::
   :titlesonly:
   :hidden:

   Query Plan Caches </reference/method/js-plan-cache>

.. _bulk-operation-methods:

Bulk Write Operation
--------------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :method:`db.collection.initializeOrderedBulkOp()`

     - Initializes a :method:`Bulk()` operations builder for an ordered list of operations.

   * - :method:`db.collection.initializeUnorderedBulkOp()`

     - Initializes a :method:`Bulk()` operations builder for an unordered list of operations.

   * - :method:`Bulk()`

     - Bulk operations builder.

   * - :method:`Bulk.execute()`

     - Executes a list of operations in bulk.

   * - :method:`Bulk.find()`

     - Specifies the query condition for an update or a remove operation.

   * - :method:`Bulk.find.arrayFilters()`

     - Specifies the filters that determine which elements of an array to update for an ``update`` or ``updateOne`` operation.

   * - :method:`Bulk.find.collation()`

     - Specifies the :ref:`collation <collation>` for the query condition.

   * - :method:`Bulk.find.delete()`
     - Adds a multiple document delete operation to a list of operations.

   * - :method:`Bulk.find.deleteOne()`
     - Adds a single document delete operation to a list of operations.

   * - :method:`Bulk.find.hint()`

     - Specifies the index to use for the update/replace operation.

   * - :method:`Bulk.find.remove()`
     - An alias for ``Bulk.find.delete()``.

   * - :method:`Bulk.find.removeOne()`
     - An alias for ``Bulk.find.deleteOne()``.

   * - :method:`Bulk.find.replaceOne()`

     - Adds a single document replacement operation to a list of operations.

   * - :method:`Bulk.find.updateOne()`

     - Adds a single document update operation to a list of operations.

   * - :method:`Bulk.find.update()`

     - Adds a ``multi`` update operation to a list of operations.

   * - :method:`Bulk.find.upsert()`

     - Specifies ``upsert: true`` for an update operation.

   * - :method:`Bulk.getOperations()`

     - Returns an array of write operations executed in the :method:`Bulk()` operations object.

   * - :method:`Bulk.insert()`

     - Adds an insert operation to a list of operations.

   * - :method:`Bulk.toJSON()`
     - Returns a JSON document that contains the number of operations and batches in the :method:`Bulk()` operations object.

   * - :method:`Bulk.toString()`
     - Returns the :method:`Bulk.toJSON()` results as a string.


.. toctree::
   :titlesonly:
   :hidden:

   Bulk Operations </reference/method/js-bulk>

.. _user-management-methods:

User Management
---------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :method:`db.auth()`

     - Authenticates a user to a database.

   * - :method:`db.changeUserPassword()`

     - Changes an existing user's password.

   * - :method:`db.createUser()`

     - Creates a new user.
   
   * - :method:`db.dropUser()`

     - Removes a single user.
   
   * - :method:`db.dropAllUsers()`

     - Deletes all users associated with a database.
   
   * - :method:`db.getUser()`

     - Returns information about the specified user.
   
   * - :method:`db.getUsers()`

     - Returns information about all users associated with a database.
   
   * - :method:`db.grantRolesToUser()`

     - Grants a role and its privileges to a user.
   
   * - :method:`db.removeUser()`

     - Deprecated. Removes a user from a database.

   * - :method:`db.revokeRolesFromUser()`

     - Removes a role from a user.
   
   * - :method:`db.updateUser()`

     - Updates user data.
   
   * - :method:`passwordPrompt()`

     - Prompts for the password as an alternative to specifying passwords
       directly in various :binary:`~bin.mongosh` user
       authentication/management methods.
   


.. toctree::
   :titlesonly:
   :hidden:

   User Management </reference/method/js-user-management>

.. _role-management-methods:

Role Management
---------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :method:`db.createRole()`

     - Creates a role and specifies its privileges.
   
   * - :method:`db.dropRole()`

     - Deletes a user-defined role.
   
   * - :method:`db.dropAllRoles()`

     - Deletes all user-defined roles associated with a database.
   
   * - :method:`db.getRole()`

     - Returns information for the specified role.
   
   * - :method:`db.getRoles()`

     - Returns information for all the user-defined roles in a database.
   
   * - :method:`db.grantPrivilegesToRole()`

     - Assigns privileges to a user-defined role.
   
   * - :method:`db.revokePrivilegesFromRole()`

     - Removes the specified privileges from a user-defined role.
   
   * - :method:`db.grantRolesToRole()`

     - Specifies roles from which a user-defined role inherits privileges.
   
   * - :method:`db.revokeRolesFromRole()`

     - Removes inherited roles from a role.
   
   * - :method:`db.updateRole()`

     - Updates a user-defined role.
   


.. toctree::
   :titlesonly:
   :hidden:

   Role Management </reference/method/js-role-management>

.. _replica-set-functions:

Replication
-----------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :method:`rs.add()`

     - Adds a member to a replica set.

   * - :method:`rs.addArb()`

     - Adds an :term:`arbiter` to a replica set.

   * - :method:`rs.conf()`

     - Returns the replica set configuration document.

   * - :method:`rs.freeze()`

     - Prevents the current member from seeking election as primary for a period of time.

   * - :method:`rs.help()`

     - Returns basic help text for :term:`replica set` functions.

   * - :method:`rs.initiate()`

     - Initializes a new replica set.

   * - :method:`rs.printReplicationInfo()`

     - Prints a formatted report of the replica set status from the
       perspective of the primary.

   * - :method:`rs.printSecondaryReplicationInfo()`

     - Prints a formatted report of the replica set status from the
       perspective of the secondaries.

   * - :method:`rs.reconfig()`

     - Re-configures a replica set by applying a new replica set configuration object.

   * - :method:`rs.remove()`

     - Remove a member from a replica set.

   * - :method:`rs.status()`

     - Returns a document with information about the state of the replica set.

   * - :method:`rs.stepDown()`

     - Causes the current :term:`primary` to become a secondary which forces an :term:`election`.

   * - :method:`rs.syncFrom()`

     - Sets the member that this replica set member will sync from, overriding the default sync target selection logic.


.. toctree::
   :titlesonly:
   :hidden:

   Replication </reference/method/js-replication>

Sharding
--------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :method:`convertShardKeyToHashed()`

     - Returns the hashed value for the input.

   * - :method:`sh.abortReshardCollection()`

     - Aborts a :ref:`resharding operation <sharding-resharding>`.

       .. versionadded:: 5.0

   * - :method:`sh.abortUnshardCollection()`

     - .. include:: /includes/command/abortUnshardCollection.rst

   * - :method:`sh.addShard()`

     - Adds a :term:`shard` to a sharded cluster.

   * - :method:`sh.addShardTag()`

     - This method aliases to :method:`sh.addShardToZone()`.

   * - :method:`sh.addShardToZone()`

     - Associates a shard to a zone. Supports configuring :ref:`zones <zone-sharding>` in sharded clusters.

   * - :method:`sh.addTagRange()`

     - This method aliases to :method:`sh.updateZoneKeyRange()`.

   * - :method:`sh.balancerCollectionStatus()`

     - Returns information on whether the chunks of a sharded
       collection are balanced.

   * - :method:`sh.commitReshardCollection()`

     - Forces a :ref:`resharding operation <sharding-resharding>` to
       block writes and complete.

       .. versionadded:: 5.0

   * - :method:`sh.disableBalancing()`

     - Disable balancing on a single collection in a sharded database. Does not affect balancing of other collections in a sharded cluster.

   * - :method:`sh.enableBalancing()`

     - Activates the sharded collection balancer process if previously disabled using :method:`sh.disableBalancing()`.

   * - :method:`sh.disableAutoMerger()`

     - .. include:: /includes/disableAutoMerger.rst
   
       .. versionadded:: 7.0

   * - :method:`sh.disableAutoSplit()`

     - Disables auto-splitting for the sharded cluster.

       .. include:: /includes/autosplit-no-operation.rst

   * - :method:`sh.enableAutoMerger()`

     - .. include:: /includes/enableAutoMerger.rst
   
       .. versionadded:: 7.0

   * - :method:`sh.enableAutoSplit()`

     - Enables auto-splitting for the sharded cluster.

       .. include:: /includes/autosplit-no-operation.rst

   * - :method:`sh.enableSharding()`

     - Creates a database.

   * - :method:`sh.getBalancerState()`

     - Returns a boolean to report if the :term:`balancer` is currently enabled.

   * - :method:`sh.getShardedDataDistribution()`

     - .. include:: /includes/sharding/getShardedDataDistribution-shell-helper-method-summary.rst

   * - :method:`sh.removeTagRange()`

     - This method aliases to :method:`sh.removeRangeFromZone()`.

   * - :method:`sh.removeRangeFromZone()`

     - Removes an association between a range of shard keys and a zone. Supports configuring :ref:`zones <zone-sharding>` in sharded clusters.

   * - :method:`sh.help()`

     - Returns help text for the ``sh`` methods.

   * - :method:`sh.isBalancerRunning()`

     - Returns a document describing the status of the balancer.

   * - :method:`sh.moveChunk()`

     - Migrates a :term:`chunk` in a :term:`sharded cluster`.

   * - :method:`sh.removeShardTag()`

     - This method is an alias for :method:`sh.removeShardFromZone()`.

   * - :method:`sh.removeShardFromZone()`

     - Removes the association between a shard and a zone. Use to manage :ref:`zone sharding <zone-sharding>`.

   * - :method:`sh.reshardCollection()`

     - Initiates a :ref:`resharding operation <sharding-resharding>` to change the
       shard key for a collection, changing the distribution of your data.

       .. versionadded:: 5.0

   * - :method:`sh.setBalancerState()`

     - Enables or disables the :term:`balancer` which migrates :term:`chunks <chunk>` between :term:`shards <shard>`.

   * - :method:`sh.shardCollection()`

     - Enables sharding for a collection.

   * - :method:`sh.splitAt()`

     - Divides an existing :term:`chunk` into two chunks using a specific value of the :term:`shard key` as the dividing point.

   * - :method:`sh.splitFind()`

     - Divides an existing :term:`chunk` that contains a document matching a query into two approximately equal chunks.

   * - :method:`sh.startAutoMerger()`

     - .. include:: /includes/startAutoMerger.rst

       .. versionadded:: 7.0

   * - :method:`sh.startBalancer()`

     - Enables the :term:`balancer` and waits for balancing to start.

   * - :method:`sh.status()`

     - Reports on the status of a :term:`sharded cluster`, as :method:`db.printShardingStatus()`.

   * - :method:`sh.stopAutoMerger()`

     - .. include:: /includes/stopAutoMerger.rst

       .. versionadded:: 7.0

   * - :method:`sh.stopBalancer()`

     - Disables the :term:`balancer` and waits for any in progress balancing rounds to complete.

   * - :method:`sh.unshardCollection`

     - .. include:: /includes/method/sh.unshardCollection

   * - :method:`sh.updateZoneKeyRange()`

     - Associates a range of shard keys to a zone. Supports configuring :ref:`zones <zone-sharding>` in sharded clusters.


   * - :method:`sh.waitForBalancer()`

     - Internal. Waits for the balancer state to change.

   * - :method:`sh.waitForBalancerOff()`

     - Internal. Waits until the balancer stops running.

   * - :method:`sh.waitForPingChange()`

     - Internal. Waits for a change in ping state from one of the :binary:`~bin.mongos` in the sharded cluster.

.. toctree::
   :titlesonly:
   :hidden:

   Sharding </reference/method/js-sharding>

Constructors
------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :method:`Binary.createFromBase64()`

     - Creates a binary object from a base64 value.

   * - :method:`Binary.createFromHexString()`

     - Creates a binary object from a hexadecimal value.

   * - :method:`BinData()`

     - Returns a :ref:`binary data object <document-bson-type-binary-data>`.

   * - :method:`BulkWriteResult()`

     - Wrapper around the result set from :method:`Bulk.execute()`.

   * - :method:`Date()`

     - Creates a date object. By default creates a date object including the current date.

   * - :method:`HexData()`

     - Returns a :ref:`binary data object <document-bson-type-binary-data>`.

   * - :method:`ObjectId()`

     - Returns an :term:`ObjectId`.

   * - :method:`ObjectId.createFromBase64()`

     - Creates an :term:`ObjectId` from a base64 value.

   * - :method:`ObjectId.createFromHexString()`

     - Creates an :term:`ObjectId` from a hexadecimal value.

   * - :method:`ObjectId.getTimestamp()`

     - Returns the timestamp portion of an :term:`ObjectId`.

   * - :method:`ObjectId.toString()`

     - Displays the string representation of an :term:`ObjectId`.

   * - :doc:`/reference/method/UUID`

     - Converts a 32-byte hexadecimal string to the UUID BSON subtype.

   * - :method:`WriteResult()`

     - Wrapper around the result set from write methods.


.. toctree::
   :titlesonly:
   :hidden:

   Object Constructors </reference/method/js-constructor>

Connection
----------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :doc:`/reference/method/connect`

     - Connects to a MongoDB instance and to a specified database on that instance.

   * - :method:`Mongo()`

     - Creates a new connection object.

   * - :method:`Mongo.getDB()`

     - Returns a database object.

   * - :method:`Mongo.getReadPrefMode()`

     - Returns the current read preference mode for the MongoDB connection.

   * - :method:`Mongo.getReadPrefTagSet()`

     - Returns the read preference tag set for the MongoDB connection.

   * - :method:`Mongo.setCausalConsistency()`

     - Enables or disables causal consistency on the connection object.

   * - :method:`Mongo.setReadPref()`

     - Sets the :term:`read preference` for the MongoDB connection.

   * - :method:`Mongo.startSession()`

     - Starts a session on the connection object.

   * - :method:`Mongo.watch()`

     - Opens a :ref:`change stream cursor <changeStreams>` for a deployment
       to report on all its non-``system`` collections across all its
       databases, excluding the internal ``admin``, ``local``, and
       ``config`` databases.
   
   * - :method:`Session`

     - The session object.

   * - :method:`SessionOptions`

     - The options object for the session.

.. toctree::
   :titlesonly:
   :hidden:

   Connections </reference/method/js-connection>


Client-Side Field Level Encryption
----------------------------------

.. note::

   .. include:: /includes/extracts/csfle-requires-enabling-encryption.rst

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :method:`getKeyVault()`

     - Returns the key vault object for the current MongoDB connection.

   * - :method:`KeyVault.createDataKey()`

     - An alias for :method:`KeyVault.createKey()`. 

   * - :method:`KeyVault.createKey()`

     - Creates a data encryption key for use with client-side field level encryption.

   * - :method:`KeyVault.deleteKey()`

     - Deletes the specified data encryption key from the key vault.

   * - :method:`KeyVault.getKey()`

     - Retrieves the specified data encryption key from the key vault.

   * - :method:`KeyVault.getKeys()`

     - Retrieves all keys in the key vault.

   * - :method:`KeyVault.addKeyAlternateName()`

     - Associates a key's alternative name to the specified data encryption key.

   * - :method:`KeyVault.addKeyAltName()`

     - An alias for :method:`KeyVault.addKeyAlternateName()`. 

   * - :method:`KeyVault.removeKeyAlternateName()`

     - Removes a key's alternative name from the specified data encryption key.

   * - :method:`KeyVault.removeKeyAltName()`

     - An alias for :method:`KeyVault.removeKeyAlternateName()`. 

   * - :method:`KeyVault.getKeyByAltName()`

     - Retrieves keys with the specified key alternative name.
   
   * - :method:`KeyVault.rewrapManyDataKey()`

     - Decrypts multiple data keys and re-encrypts them. 

   * - :method:`getClientEncryption()`

     - Returns the client encryption object for supporting explicit encryption/decryption of fields.

   * - :method:`ClientEncryption.createEncryptedCollection()`

     - Creates a collection with encrypted fields.

   * - :method:`ClientEncryption.encrypt()`

     - Encrypts a field using a specified data encryption key and encryption algorithm.

   * - :method:`ClientEncryption.decrypt()`

     - Decrypts a field using the associated data encryption key and encryption algorithm.
   
.. toctree::
   :titlesonly:
   :hidden:

   Client-Side Field Level Encryption </reference/method/js-client-side-field-level-encryption>
