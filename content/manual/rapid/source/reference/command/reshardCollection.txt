====================================
reshardCollection (database command)
====================================

.. meta::
   :description: Change the shard key and data distribution of a collection using the `reshardCollection` command, with options for zones and forced redistribution.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: reshardCollection

   .. versionadded:: 5.0

   The :dbcommand:`reshardCollection` command changes the shard key for
   a collection and changes the distribution of your data.

   .. |method| replace:: :method:`sh.reshardCollection` 
      helper method
   .. include:: /includes/fact-dbcommand-tip

Compatibility
-------------

This command is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-all.rst

.. include:: /includes/fact-environments-onprem-only.rst
                
Syntax
------

The command has the following syntax:

.. include:: /includes/reshardCollection-syntax.rst

Command Fields
--------------

The command takes the following fields:

.. list-table::
   :header-rows: 1
   :widths: 25 20 75
 
   * - Field
     - Type
     - Description
 
   * - ``reshardCollection``
     - string
     - The :term:`namespace` of the collection to be resharded. Takes
       the form ``<database>.<collection>``.
 
   * - ``key``
     - document
     - The document that specifies the new field or fields to use as the
       :ref:`shard key <sharding-shard-key>`.
 
       ``{ <field1>: <1|"hashed">, ... }``
 
       Set the field values to either:
 
       - ``1`` for :ref:`range-based sharding <sharding-ranged>`
 
       - ``"hashed"`` to specify a
         :ref:`hashed shard key <hashed-shard-keys>`.
 
         See also :ref:`sharding-shard-key-indexes`
 
   * - ``unique``
     - boolean
     - Optional. Specify whether there is a :doc:`uniqueness
       </core/index-unique>` constraint on the shard key. Only
       ``false`` is supported. Defaults to ``false``.
 
   * - ``numInitialChunks``
     - integer
     - Optional. Specifies the initial number of chunks to create
       across all shards in the cluster when resharding a collection.
       The default value is ``90``. MongoDB will then create and balance 
       chunks across the cluster. The ``numInitialChunks`` must result 
       in less than ``8192`` per shard.
 
       .. include:: /includes/initial-chunks-recommendation.rst
        
   * - ``collation``
     - document
     - Optional. If the collection specified in ``reshardCollection``
       has a default :ref:`collation <collation>`, you *must* include a 
       collation document with ``{ locale : "simple" }``, or the 
       ``reshardCollection`` command fails.
 
   * - ``zones``
     - array
     - Optional. Specifies the zones for the collection.
          
       To maintain or add :ref:`zones <zone-sharding>`,
       specify the zones for your collection in an array:

       .. code-block:: javascript
          :copyable: false

          [
            {
                min: <document with same shape as shardkey>,
                max: <document with same shape as shardkey>,
                zone: <string> | null
            },
            ...
          ]

   * - ``forceRedistribution``
     - boolean
     - .. _forceRedistribution-field:
       
       .. include:: /includes/fact-forceRedistribution-desc.rst

Considerations
--------------

.. include:: /includes/sharding/reshard-build-indexes-consideration.rst

Resharding Process
------------------

.. include:: /includes/reshard-collection-introduction.rst

Initialization Phase
~~~~~~~~~~~~~~~~~~~~

During the initialization phase, the resharding coordinator determines
the new data distribution for the sharded collection.

Clone Phase 
~~~~~~~~~~~

.. include:: /includes/reshard-collection-clone.rst

Index Phase
~~~~~~~~~~~

.. include:: /includes/reshard-collection-index.rst

Apply and Catch-up Phase
~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/reshard-collection-apply-and-catchup.rst

.. note::

   If desired, you can manually force the resharding operation to
   complete by issuing the :dbcommand:`commitReshardCollection`
   command. This is useful if the current time estimate to complete
   the resharding operation is an acceptable duration for your
   collection to block writes. The
   :dbcommand:`commitReshardCollection` command blocks writes early
   and forces the resharding operation to complete. During the time
   period where writes are blocked your application experiences an
   increase in latency.

.. _resharding-commit-phase-command:

Commit Phase
~~~~~~~~~~~~

.. include:: /includes/reshard-collection-commit.rst

.. note:: 

   Once the resharding process reaches the commit phase, the process
   cannot be ended with :dbcommand:`abortReshardCollection`.
   
Examples
--------

Reshard a Collection
~~~~~~~~~~~~~~~~~~~~

The following example reshards the ``sales.orders`` collection with the
new shard key ``{ order_id: 1 }``:

.. code-block:: javascript

   db.adminCommand({
     reshardCollection: "sales.orders",
     key: { order_id: 1 }
   })

Output:

.. code-block:: javascript
   :copyable: false

   {
     ok: 1,
     '$clusterTime': {
       clusterTime: Timestamp(1, 1624887954),
       signature: {
         hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
         keyId: 0
       }
     },
     operationTime: Timestamp(1, 1624887947)
   }

.. seealso::

   :ref:`sharding-resharding`

.. _reshardCollection-redistribute-data:

Redistribute Data to New Shards
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you can reshard a collection on the same key,
which can be used to redistribute data onto new shards.

After adding a shard to the cluster, you use the ``reshardCollection`` command
with the ``forceRedistribution`` option to redistribute data across the
cluster:

.. code-block:: javascript

   db.adminCommand({
       reshardCollection: "accounts.invoices",
       key: { store_id: "hashed" },
       forceRedistribution: true
   })

Redistribute Data to Different Zones
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you can use the ``reshardCollection`` command to
move data into new zones without changing the shard key.

The following command redistributes data for the ``accounts.sales`` collection
using the same shard key, moving data to the shards associated with 
zones ``zone04`` and ``zone05``:

.. code-block:: javascript
   
   db.adminCommand({
       reshardCollection: "accounts.sales",
       key: { region_id: "hashed" },
       forceRedistribution: true,
       zones: [
           {
               zone: "zone04",
               min: { region_id: MinKey() },
               max: { region_id: 10 }
           },
           {
               zone: "zone05",
               min: { region_id: 10 },
               max: { region_id: MaxKey() }
           }
       ]
   })

Learn More
----------

- :ref:`<sharding-resharding>`