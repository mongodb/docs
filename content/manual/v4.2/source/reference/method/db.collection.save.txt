====================
db.collection.save()
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.collection.save()


   .. include:: /includes/fact-mongo-shell-method.rst


   Updates an existing :doc:`document </core/document>` or inserts a
   new document, depending on its ``document`` parameter.

   .. note::

      Starting in MongoDB 4.2, the :method:`db.collection.save()` method
      is deprecated. Use :method:`db.collection.insertOne()` or
      :method:`db.collection.replaceOne()` instead.

   The :method:`~db.collection.save()` method has the following form:

   .. code-block:: none

      db.collection.save(
         <document>,
         {
           writeConcern: <document>
         }
      )


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``document``
   
        - document
   
        - A document to save to the collection.
          
          
   
      * - ``writeConcern``
   
        - document
   
        - Optional. A document expressing the :doc:`write concern
          </reference/write-concern>`. Omit to use the default write concern.
          See :ref:`save-wc`.
          
          .. include:: /includes/extracts/transactions-operations-write-concern.rst

   The :method:`~db.collection.save()` returns an object that
   contains the status of the operation.

   :returns: A :ref:`writeresults-save` object that contains the
      status of the operation.

Behavior
--------

.. _save-wc:

Write Concern
~~~~~~~~~~~~~

The :method:`~db.collection.save()` method uses either the
:dbcommand:`insert` or the :dbcommand:`update` command, which use the
default :doc:`write concern </reference/write-concern>`. To specify a
different write concern, include the write concern in the options
parameter.

Insert
~~~~~~

If the document does **not** contain an :term:`_id` field, then the
:method:`~db.collection.save()` method calls the
:method:`~db.collection.insert()` method. During the operation, the
:binary:`~bin.mongo` shell will create an :method:`ObjectId` and
assign it to the ``_id`` field.

.. include:: /includes/note-insert-id-field.rst

Update
~~~~~~

If the document contains an :term:`_id` field, then the
:method:`~db.collection.save()` method is equivalent to an update with
the :ref:`upsert option <upsert-parameter>` set to ``true`` and the
query predicate on the ``_id`` field.

Transactions
~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-supported-operation.rst

If the operation results in an insert, the collection must already
exist.

.. include:: /includes/extracts/transactions-operations-write-concern.rst

.. include:: /includes/extracts/transactions-usage.rst

.. |operation| replace:: :method:`db.collection.save()`

Sharded Clusters
~~~~~~~~~~~~~~~~

Starting in MongoDB 4.2, the :method:`~db.collection.save()` method
cannot be used with sharded collections that are *not* sharded by
``_id``, and attempting to do so will result in an error. Use the
:method:`~db.collection.insertOne()` or
:method:`~db.collection.replaceOne()` method instead.

.. _save-method-examples:

Examples
--------

.. _crud-create-insert-save:

Save a New Document without Specifying an ``_id`` Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following example, :method:`~db.collection.save()` method
performs an insert since the document passed to the method does not
contain the ``_id`` field:

.. code-block:: javascript

   db.products.save( { item: "book", qty: 40 } )

During the insert, the shell will create the ``_id`` field with
a unique :method:`ObjectId` value, as verified by the inserted
document:

.. code-block:: javascript

   { "_id" : ObjectId("50691737d386d8fadbd6b01d"), "item" : "book", "qty" : 40 }

.. include:: /includes/fact-object-id-may-differ.rst

.. _crud-create-save:

Save a New Document Specifying an ``_id`` Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following example, :method:`~db.collection.save()` performs an
update with ``upsert:true`` since the document contains an ``_id`` field:

.. code-block:: javascript

   db.products.save( { _id: 100, item: "water", qty: 30 } )

Because the ``_id`` field holds a value that *does not* exist in the
collection, the update operation results in an insertion of the
document. The results of these operations are identical to an
:ref:`update() method with the upsert option <upsert-parameter>` set to
``true``.

The operation results in the following new document in the ``products``
collection:

.. code-block:: javascript

   { "_id" : 100, "item" : "water", "qty" : 30 }

Replace an Existing Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``products`` collection contains the following document:

.. code-block:: javascript

   { "_id" : 100, "item" : "water", "qty" : 30 }

The :method:`~db.collection.save()` method performs an update with
``upsert:true`` since the document contains an ``_id`` field:

.. code-block:: javascript

   db.products.save( { _id : 100, item : "juice" } )

Because the ``_id`` field holds a value that exists in the collection,
the operation performs an update to replace the document and results in
the following document:

.. code-block:: javascript

   { "_id" : 100, "item" : "juice" }

Override Default Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation to a replica set specifies a :doc:`write
concern </reference/write-concern>` of ``"w: majority"`` with a
``wtimeout`` of 5000 milliseconds such that the method returns after
the write propagates to a majority of the voting replica set members or
the method times out after 5 seconds.

.. code-block:: javascript

   db.products.save(
       { item: "envelopes", qty : 100, type: "Clasp" },
       { writeConcern: { w: "majority", wtimeout: 5000 } }
   )

.. _writeresults-save:

WriteResult
-----------

The :method:`~db.collection.save()` returns a :method:`WriteResult`
object that contains the status of the insert or update operation. See
:ref:`WriteResult for insert <writeresults-insert>` and
:ref:`WriteResult for update <writeresults-update>` for details.
