==============
Built-In Roles
==============

.. COMMENT may want to replace this file for the one in reference

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB provides built-in roles that provide the different levels of
access commonly needed in a database system. Built-in :ref:`database user
roles <database-user-roles>` and :ref:`database administration roles
<database-administration-roles>` roles exist in *each* database. The
``admin`` database contains additional roles.

This page provides a brief description of the built-in roles. For the
specific privileges granted by each role, see the
:doc:`/reference/built-in-roles` reference page.

Database User Roles
-------------------

Every database includes the following roles:

.. list-table::
   :header-rows: 1
   :widths: 30 70
   
   * - Role
     - Short Description
     
   * - :authrole:`read`

     - Provides the ability to read data on all *non*-system collections and on the
       following system collections: :data:`system.indexes <<database>.system.indexes>`,
       :data:`system.js <<database>.system.js>`, and :data:`system.namespaces
       <<database>.system.namespaces>` collections.

       For the specific privileges granted by the role, see :authrole:`read`.

   * - :authrole:`readWrite`

     - Provides all the privileges of the :authrole:`read` role and the ability to modify
       data on all *non*-system collections and the :data:`system.js
       <<database>.system.js>` collection.

       For the specific privileges granted by the role, see
       :authrole:`readWrite`.

Database Administration Roles
-----------------------------

Every database includes the following database administration roles:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Role
     - Short Description

   * - :authrole:`dbAdmin`

     - Provides the ability to perform administrative tasks such as
       schema-related tasks, indexing, gathering statistics. This role
       does not grant privileges for user and role management.

       For the specific privileges granted by the role, see
       :authrole:`dbAdmin`.

   * - :authrole:`dbOwner`

     - Provides the ability to perform any administrative action on the
       database. This role combines the privileges granted by the
       :authrole:`readWrite`, :authrole:`dbAdmin` and
       :authrole:`userAdmin` roles.

   * - :authrole:`userAdmin`

     - Provides the ability to create and modify roles and users on the
       current database. Since the :authrole:`userAdmin` role allows
       users to grant any privilege to any user, including themselves,
       the role also indirectly provides :ref:`superuser <superuser>`
       access to either the database or, if scoped to the ``admin``
       database, the cluster.

       For the specific privileges granted by the role, see
       :authrole:`userAdmin`.

Cluster Administration Roles
----------------------------

The ``admin`` database includes the following roles for administering the
whole system rather than a specific database. These roles include but are
not limited to :term:`replica set` and :term:`sharded cluster`
administrative functions.

.. list-table::
   :header-rows: 1
   :widths: 30 70
   
   * - Role
     - Short Description

   * - :authrole:`clusterAdmin`

     - Provides the greatest cluster-management access. This role combines the
       privileges granted by the :authrole:`clusterManager`,
       :authrole:`clusterMonitor`, and :authrole:`hostManager` roles.
       Additionally, the role provides the :authaction:`dropDatabase` action.

   * - :authrole:`clusterManager`

     - Provides management and monitoring actions on the cluster. A
       user with this role can access the ``config`` and ``local``
       databases, which are used in sharding and replication,
       respectively.

       For the specific privileges granted by the role, see
       :authrole:`clusterManager`.

   * - :authrole:`clusterMonitor`

     - Provides read-only access to monitoring tools, such as the |mms-home|
       and :opsmgr:`Ops Manager </>` monitoring agent.

       For the specific privileges granted by the role, see
       :authrole:`clusterMonitor`.

   * - :authrole:`hostManager`

     - Provides the ability to monitor and manage servers.

       For the specific privileges granted by the role, see
       :authrole:`hostManager`.

Backup and Restoration Roles
----------------------------

The ``admin`` database includes the following roles for backing up and
restoring data:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Role
     - Short Description

   * - :authrole:`backup`

     - Provides privileges needed to back up data. This role provides
       sufficient privileges to use the |mms-home| backup agent,
       :opsmgr:`Ops Manager </>` backup agent, or to use
       :binary:`~bin.mongodump`.

       For the specific privileges granted by the role, see
       :authrole:`backup`.

   * - :authrole:`restore`

     - Provides privileges needed to restore data with
       :binary:`~bin.mongorestore` without the :option:`--oplogReplay <mongorestore --oplogReplay>`
       option or without ``system.profile`` collection data.

       For the specific privileges granted by the role, see
       :authrole:`restore`.

.. include:: /includes/replacement-mms.rst

All-Database Roles
------------------

.. versionchanged:: 3.4

These roles in the ``admin`` database apply to all but the ``local``
and ``config`` databases in a :binary:`~bin.mongod` instance:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Role
     - Short Description

   * - :authrole:`readAnyDatabase`

     - Provides the same read-only permissions as :authrole:`read`,
       except it applies to all but the ``local`` and ``config``
       databases in the cluster. The role also provides the
       :authaction:`listDatabases` action on the cluster as a whole.

       For the specific privileges granted by the role, see
       :authrole:`readAnyDatabase`.

       .. versionchanged:: 3.4

          Prior to 3.4, :authrole:`readAnyDatabase` includes ``local``
          and ``config`` databases. To provide ``read`` privileges on
          the ``local`` database, create a user in the ``admin``
          database with :authrole:`read` role in the ``local``
          database. See also :authrole:`clusterManager` role for access
          to the ``config`` and ``local`` databases.

   * - :authrole:`readWriteAnyDatabase`

     - Provides the same read and write permissions as
       :authrole:`readWrite`, except it applies to all but the
       ``local`` and ``config`` databases in the cluster. The role also
       provides the :authaction:`listDatabases` action on the cluster
       as a whole.

       For the specific privileges granted by the role, see
       :authrole:`readWriteAnyDatabase`.

       .. versionchanged:: 3.4

          Prior to 3.4, :authrole:`readWriteAnyDatabase` includes
          ``local`` and ``config`` databases. To provide ``readWrite``
          privileges on the ``local`` database, create a user in the
          ``admin`` database with :authrole:`readWrite` role in the
          ``local`` database. See also :authrole:`clusterManager` role
          for access to the ``config`` and ``local`` databases.

   * - :authrole:`userAdminAnyDatabase`

     - Provides the same access to user administration operations as
       :authrole:`userAdmin`, except it applies to all but the
       ``local`` and ``config`` databases in the cluster.

       Since the :authrole:`userAdminAnyDatabase` role allows users to
       grant any privilege to any user, including themselves, the role
       also indirectly provides :ref:`superuser <superuser>` access.
       
       For the specific privileges granted by the role, see
       :authrole:`userAdminAnyDatabase`.

       .. versionchanged:: 3.4

          Prior to 3.4, :authrole:`userAdminAnyDatabase` includes
          ``local`` and ``config`` databases. 

   * - :authrole:`dbAdminAnyDatabase`

     - Provides the same access to database administration operations
       as :authrole:`dbAdmin`, except it applies to all but the
       ``local`` and ``config`` databases in the cluster. The role also
       provides the :authaction:`listDatabases` action on the cluster
       as a whole.

       For the specific privileges granted by the role, see
       :authrole:`dbAdminAnyDatabase`.

       .. versionchanged:: 3.4

          Prior to 3.4, :authrole:`dbAdminAnyDatabase` includes
          ``local`` and ``config`` databases. To provide ``dbAdmin``
          privileges on the ``local`` database, create a user in the
          ``admin`` database with :authrole:`dbAdmin` role in the
          ``local`` database. See also :authrole:`clusterManager` role
          for access to the ``config`` and ``local`` databases.

Superuser Roles
---------------

The following role provides full privileges on all resources:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Role
     - Short Description

   * - :authrole:`root`

     - Provides access to the operations and all the resources of the
       :authrole:`readWriteAnyDatabase`,
       :authrole:`dbAdminAnyDatabase`, :authrole:`userAdminAnyDatabase`,
       :authrole:`clusterAdmin`, :authrole:`restore`, and
       :authrole:`backup` *combined*.

       For the specific privileges granted by the role, see
       :authrole:`root`.

Internal Role
-------------

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Role
     - Short Description

   * - :authrole:`__system`

     - Provides privileges to take any action against any object in the
       database.

       **Do not** assign this role to user objects representing applications or
       human administrators, other than in exceptional circumstances.

       For more information, see :authrole:`root`.

.. seealso:: :doc:`/reference/built-in-roles`
