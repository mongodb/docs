======================
Update a Database User
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/fact-projects-groups-synonyms.rst

.. include:: /includes/api-base-url.rst

.. include:: /includes/extracts/fact-api-requirements-owner.rst

Syntax
------

Send only those fields where you will change the value.

.. code-block:: none

   PATCH /api/atlas/v1.0/groups/{GROUP-ID}/databaseUsers/admin/{USERNAME}

Behavior
~~~~~~~~

You can update a user's roles and password. Additionally, for temporary
users, you can update the user's expiration date or set the user to be
permanent. You cannot update the user's name or
:ref:`authentication database <authentication-database>`, which is
``admin``. You also cannot update permanent users to be temporary.

Request Path Parameters
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1

   * - Parameter
     - Required/Optional
     - Description

   * - ``GROUP-ID``

     - Required.

     - The unique identifier for the :ref:`project <group-id>`.

   * - ``USERNAME``

     - Required.

     - The username to update

Request Query Parameters
~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/no-query-parameters.rst

Request Body Parameters
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1

   * - Name
     - Description

   * - ``deleteAfterDate``
     - *Optional* `ISO-8601
       <https://en.wikipedia.org/wiki/ISO_8601>`_-formatted UTC date
       after which |service| deletes the user. The
       specified date must be in the future and within one week of the
       time you make the API request. To update a  temporary user to be
       permanent, set the value of this field to ``null``.

       .. note::

          You may include an ISO-8601 time zone designator to ensure
          that the expiration date occurs with respect to the local
          time in the specified time zone.

       .. important::

          You can only modify the expiration date for a user
          if an expiration date was specified when creating the user.
          You cannot assign a ``deleteAfterDate`` to a permanent
          user.

   * - ``roles``
     - .. include:: /includes/fact-database-user-role.rst

       .. include:: /includes/fact-subset-privilege-actions.rst

       .. important::

          If a user is assigned a :ref:`custom MongoDB role
          <mongodb-roles>`, they cannot be assigned any other roles.

   * - ``roles.databaseName``
     - Database on which the user has the specified role. A role
       on the ``admin`` database can include privileges that apply to
       the other databases.

   * - ``roles.collectionName``

     - Collection for which the role applies.

       You can specify a collection for the
       ``read`` and ``readWrite`` roles. If you do not specify a
       collection for ``read`` and ``readWrite``, the role applies to
       all collections in the database (excluding some collections in
       the ``system.`` database).

       .. note::

          .. include:: /includes/fact-read-read-write-actions.rst

   * - ``roles.roleName``
     - Name of the role. This value can either be a
       :manual:`built-in role </reference/built-in-roles/>` or a
       :ref:`custom role <mongodb-roles>`.

       The following accepted values of ``role`` are restricted to the
       ``admin`` database:

       - :atlasrole:`atlasAdmin <Atlas admin>`
       - :authrole:`readWriteAnyDatabase`
       - :authrole:`readAnyDatabase`
       - :authrole:`clusterMonitor`
       - :authrole:`backup`
       - :authrole:`dbAdminAnyDatabase`
       - ``enableSharding``

         This role is specific to MongoDB databases managed by
         |service|. The role allows the user to enable sharding on a
         database and to shard a collection.

       The following accepted values of ``role`` can be applied to a
       specific database:

       - :authrole:`dbAdmin`
       - ``read``
       - ``readWrite``

       The following accepted values of ``role`` can be applied to a
       specific collection:

       - ``read``
       - ``readWrite``

       If you do not specify a collection for the ``read`` and
       ``readWrite`` roles, the roles apply to all collections
       (excluding some ``system.`` collections) in the database.

       .. note::

          If you specify a :ref:`custom role <mongodb-roles>` name in
          this field, the ``roles.databaseName`` field must be
          ``admin``.

   * - ``password``
     - The user's password. This field is NOT included in the entity
       returned from the server.

Response Elements
~~~~~~~~~~~~~~~~~

If you set the query element ``envelope`` to ``true``, the response is wrapped
by the ``content`` object.

.. include:: /includes/api/list-tables/database-users-get-response.rst

Example Request
---------------

Request
~~~~~~~

.. include:: /includes/extracts/fact-api-requirements-modify.rst

.. class:: copyable-code

.. code-block:: none

   curl -i -u "{PUBLIC-KEY}:{PRIVATE-KEY}" --digest -H "Content-Type: application/json" -X PATCH "https://cloud.mongodb.com/api/atlas/v1.0/groups/5356823b3794dee37132bb7b/databaseUsers/admin/david" --data '
   {
     "roles" : [ {
       "databaseName" : "service",
       "roleName" : "read"
     } ]
   }'

Response
~~~~~~~~

.. code-block:: none

   HTTP/1.1 200 OK

   {
     "databaseName" : "admin",
     "groupId" : "5356823b3794dee37132bb7b",
     "links" : [ ... ],
     "roles" : [ {
       "databaseName" : "service",
       "roleName" : "read"
     } ],
     "username" : "david"
   }


