==============
BSON Documents
==============

.. default-domain:: mongodb

MongoDB is a document-based database system, and as a result, all
records, or data, in MongoDB are documents. Documents are the default
representation of most user accessible data structures in the
database. Documents provide structure for data in the following
MongoDB contexts:

- the :ref:`records <documents-records>` stored in :term:`collections
  <collection>`

- the :ref:`query selectors <documents-query-selectors>` that determine
  which records to select for read, update, and delete operations

- the :ref:`update actions <documents-update-actions>` that specify
  the particular field updates to perform during an update operation

- the specification of :ref:`indexes <documents-index>` for
  collection.

- arguments to several MongoDB methods and operators, including:

  - :ref:`sort order <documents-sort-order>` for the :method:`sort()
    <cursor.sort()>` method.

  - :ref:`index specification <documents-index>` for the
    :method:`hint() <cursor.hint()>` method.

- the output of a number  of MongoDB commands and operations, including:

  - the :doc:`output </reference/collection-statistics>`
    of :dbcommand:`collStats` command, and

  - the :doc:`output </reference/server-status>` of the
    :dbcommand:`serverStatus` command.

Structure
---------

The document structure in MongoDB are :term:`BSON` objects with
support for the full range of :term:`BSON types`; however, BSON
documents are conceptually, similar to :term:`JSON` objects, and have
the following structure:

.. code-block:: javascript

   {
      field1: value1,
      field2: value2,
      field3: value3,
      ...
      fieldN: valueN
   }

Having support for the full range of BSON types, MongoDB documents may
contain field and value pairs where the value can be another document,
an array, an array of documents as well as the basic types such as
``Double``, ``String``, and ``Date``. See also
:ref:`document-bson-type-considerations`.

Consider the following document that contains values of varying types:

.. code-block:: javascript

   var mydoc = {
                  _id: ObjectId("5099803df3f4948bd2f98391"),
                  name: { first: "Alan", last: "Turing" },
                  birth: new Date('Jun 23, 1912'),
                  death: new Date('Jun 07, 1954'),
                  contribs: [ "Turing machine", "Turing test", "Turingery" ],
                  views : NumberLong(1250000)
               }

The document contains the following fields:

- ``_id`` that holds an *ObjectId*.

- ``name`` that holds a *subdocument* that contains the fields
  ``first`` and ``last``.

- ``birth`` and ``death``, which both have *Date* types.

- ``contribs`` that holds an *array of strings*.

- ``views`` that holds a value of *NumberLong* type.

All field names are strings in :term:`BSON` documents. Be aware that
there are some :limit:`restrictions on field names <Restrictions on Field Names>`
for :term:`BSON` documents: field names cannot contain null
characters, dots (``.``), or dollar signs (``$``).

.. note::

   BSON documents may have more than one field with the same name;
   however, most :doc:`MongoDB Interfaces </applications/drivers>`
   represent MongoDB with a structure (e.g. a hash table) that does
   not support duplicate field names. If you need to manipulate
   documents that have more than one field with the same name, see
   your driver's documentation for more information.

   Some documents created by internal MongoDB processes may have
   duplicate fields, but *no* MongoDB process will *ever* add
   duplicate keys to an existing user document.

.. _document-type-operators:

Type Operators
~~~~~~~~~~~~~~

To determine the type of fields, the :program:`mongo` shell provides
the following operators:

- ``instanceof`` returns a boolean to test if a value has
  a specific type.

- ``typeof`` returns the type of a field.

.. example::

   Consider the following operations using ``instanceof`` and
   ``typeof``:

   - The following operation tests whether the ``_id`` field is of type
     ``ObjectId``:

     .. code-block:: javascript

        mydoc._id instanceof ObjectId

     The operation returns ``true``.

   - The following operation returns the type of the ``_id`` field:

     .. code-block:: javascript

        typeof mydoc._id

     In this case ``typeof`` will return the more generic ``object``
     type rather than ``ObjectId`` type.

.. _document-dot-notation:

Dot Notation
~~~~~~~~~~~~

.. include:: /includes/fact-dot-notation.rst

.. seealso::

   - :ref:`read-operations-subdocuments` for dot notation examples
     with subdocuments.

   - :ref:`read-operations-arrays` for dot notation examples with
     arrays.

Document Types in MongoDB
-------------------------

.. _documents-records:

Record Documents
~~~~~~~~~~~~~~~~

Most documents in MongoDB in :term:`collections <collection>` store
data from users' applications.

These documents have the following attributes:

- .. include:: /includes/fact-document-max-size.rst

- .. include:: /includes/fact-document-field-name-restrictions.rst

.. include:: /includes/note-insert-id-field.rst

The following document specifies a record in a collection:

  .. code-block:: javascript

     {
       _id: 1,
       name: { first: 'John', last: 'Backus' },
       birth: new Date('Dec 03, 1924'),
       death: new Date('Mar 17, 2007'),
       contribs: [ 'Fortran', 'ALGOL', 'Backus-Naur Form', 'FP' ],
       awards: [
                 { award: 'National Medal of Science',
                   year: 1975,
                   by: 'National Science Foundation' },
                 { award: 'Turing Award',
                   year: 1977,
                   by: 'ACM' }
               ]
     }

The document contains the following fields:

- ``_id``, which must hold a unique value and is *immutable*.

- ``name`` that holds another *document*. This sub-document contains
  the fields ``first`` and ``last``, which both hold *strings*.

- ``birth`` and ``death`` that both have *date* types.

- ``contribs`` that holds an *array of strings*.

- ``awards`` that holds an *array of documents*.

Consider the following behavior and constraints of the ``_id`` field in
MongoDB documents:

- In documents, the ``_id`` field is always indexed for regular
  collections.

- The ``_id`` field may contain values of any BSON data type other than
  an array.

Consider the following options for the value of an ``_id`` field:

- Use an ``ObjectId``. See the :doc:`ObjectId </reference/object-id>`
  documentation.

  Although it is common to assign ``ObjectId`` values to ``_id``
  fields, if your objects have a natural unique identifier, consider
  using that for the value of ``_id`` to save space and to avoid an
  additional index.

- Generate a sequence number for the documents in your collection in
  your application and use this value for the ``_id`` value. See the
  :doc:`/tutorial/create-an-auto-incrementing-field` tutorial for an
  implementation pattern.

- Generate a UUID in your application code. For a more efficient
  storage of the UUID values in the collection and in the ``_id``
  index, store the UUID as a value of the BSON ``BinData`` type.

  .. include:: /includes/fact-bindata-storage-optimization.rst

- Use your driver's BSON UUID facility to generate UUIDs. Be aware
  that driver implementations may implement UUID serialization and
  deserialization logic differently, which may not be fully compatible
  with other drivers. See your :api:`driver documentation <>` for
  information concerning UUID interoperability.

.. _documents-query-selectors:
.. _mongodb-query-documents:
.. _mongodb-query-document:

Query Specification Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Query documents specify the conditions that determine which records to
select for read, update, and delete operations. You can use
``<field>:<value>`` expressions to specify the equality condition and
:doc:`query operator </reference/operators>` expressions to specify
additional conditions.

When passed as an argument to methods such as the :method:`find()
<db.collection.find()>` method, the :method:`remove()
<db.collection.remove()>` method, or the :method:`update()
<db.collection.update()>` method, the query document selects documents
for MongoDB to return, remove, or update, as in the following:

.. code-block:: javascript

   db.bios.find( { _id: 1 } )
   db.bios.remove( { _id: { $gt: 3 } } )
   db.bios.update( { _id: 1, name: { first: 'John', last: 'Backus' } },
                   <update>,
                   <options> )

.. seealso::

   - :ref:`read-operations-query-argument` and
     :doc:`/core/read` for more examples on selecting documents
     for reads.

   - :doc:`/core/update` for more examples on
     selecting documents for updates.

   - :doc:`/core/delete` for more examples on selecting
     documents for deletes.

.. _documents-update-actions:

Update Specification Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Update documents specify the data modifications to perform during
an :method:`update() <db.collection.update()>` operation to modify
existing records in a collection. You can use :ref:`update operators
<update-operators>` to specify the exact actions to perform on the
document fields.

Consider the update document example:

.. code-block:: javascript

   {
     $set: { 'name.middle': 'Warner' },
     $push: { awards: { award: 'IBM Fellow',
                        year: '1963',
                        by: 'IBM' }
            }
   }

When passed as an argument to the :method:`update()
<db.collection.update()>` method, the update actions document:

- Modifies the field ``name`` whose value is another document.
  Specifically, the :operator:`$set` operator updates the ``middle``
  field in the ``name`` subdocument. The document uses :ref:`dot
  notation <document-dot-notation>` to access a field in a subdocument.

- Adds an element to the field ``awards`` whose value is an array.
  Specifically, the :operator:`$push` operator adds another document as
  element to the field ``awards``.

.. code-block:: javascript

   db.bios.update(
      { _id: 1 },
      {
        $set: { 'name.middle': 'Warner' },
        $push: { awards: {
                           award: 'IBM Fellow',
                           year: '1963',
                           by: 'IBM'
                         }
               }
      }
   )

.. seealso::

   - :ref:`update operators <update-operators>` page for the available
     update operators and syntax.

   - :doc:`update </core/update>` for more examples on
     update documents.

For additional examples of updates that involve array elements,
including where the elements are documents, see the :operator:`$`
positional operator.

.. _documents-index:
.. _document-index-specification:

Index Specification Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Index specification documents describe the fields to index on during
the :doc:`index creation </reference/method/db.collection.ensureIndex>`. See :doc:`indexes
</core/indexes>` for an overview of indexes. [#index-def]_

Index documents contain field and value pairs, in the following form:

.. code-block:: javascript

   { field: value }

- ``field`` is the field in the documents to index.

- ``value`` is either 1 for ascending or -1 for descending.

The following document specifies the :ref:`multi-key index
<index-type-multi-key>` on the ``_id`` field and the ``last`` field
contained in the subdocument ``name`` field. The document uses
:ref:`dot notation <document-dot-notation>` to access a field in a
subdocument:

.. code-block:: javascript

   { _id: 1, 'name.last': 1 }

When passed as an argument to the :method:`ensureIndex()
<db.collection.ensureIndex()>` method, the index documents specifies
the index to create:

.. code-block:: javascript

   db.bios.ensureIndex( { _id: 1, 'name.last': 1 } )

.. [#index-def] Indexes optimize a number of key :doc:`read
   </core/read-operations>` and :doc:`write </core/write-operations>`
   operations.

.. _documents-sort-order:

Sort Order Specification Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sort order documents specify the order of documents that a
:method:`query() <db.collection.find()>` returns. Pass sort order
specification documents as an argument to the :method:`sort()
<cursor.sort()>` method. See the :method:`sort() <cursor.sort()>` page
for more information on sorting.

The sort order documents contain field and value pairs, in the following
form:

.. code-block:: javascript

   { field: value }

- ``field`` is the field by which to sort documents.

- ``value`` is either 1 for ascending or -1 for descending.

The following document specifies the sort order using the fields from a
sub-document ``name`` first sort by the ``last`` field ascending, then
by the ``first`` field also ascending:

.. code-block:: javascript

   { 'name.last': 1, 'name.first': 1 }

When passed as an argument to the :method:`sort() <cursor.sort()>`
method, the sort order document sorts the results of the
:method:`find() <db.collection.find()>` method:

.. code-block:: javascript

   db.bios.find().sort( { 'name.last': 1, 'name.first': 1 } )

.. _document-mongodb-type-considerations:
.. _document-bson-type-considerations:

BSON Type Considerations
------------------------

The following BSON types require special consideration:

.. _document-bson-type-object-id:

ObjectId
~~~~~~~~

ObjectIds are: small, likely unique, fast to generate, and ordered.
These values consists of 12-bytes, where the first 4-bytes is a
timestamp that reflects the ObjectId's creation. Refer to the
:doc:`ObjectId </reference/object-id>` documentation for more information.

.. _document-bson-type-string:

String
~~~~~~

BSON strings are UTF-8. In general, drivers for each programming
language convert from the language's string format to UTF-8 when
serializing and deserializing BSON. This makes it possible to store
most international characters in BSON strings with ease.
[#sort-string-internationalization]_ In addition, MongoDB
:operator:`$regex` queries support UTF-8 in the regex string.

.. [#sort-string-internationalization] Given strings using UTF-8
   character sets, using :method:`sort() <cursor.sort()>` on strings
   will be reasonably correct; however, because internally
   :method:`sort() <cursor.sort()>` uses the C++ ``strcmp`` api, the
   sort order may handle some characters incorrectly.

.. _document-bson-type-timestamp:

Timestamps
~~~~~~~~~~

BSON has a special timestamp type for *internal* MongoDB use and is
**not** associated with the regular :ref:`document-bson-type-date`
type. Timestamp values are a 64 bit value where:

- the first 32 bits are a ``time_t`` value (seconds since the Unix epoch)

- the second 32 bits are an incrementing ``ordinal`` for operations
  within a given second.

Within a single :program:`mongod` instance, timestamp values are
always unique.

In replication, the :term:`oplog` has a ``ts`` field. The values in
this field reflect the operation time, which uses a BSON timestamp
value.

.. note::

   The BSON Timestamp type is for *internal* MongoDB use. For most
   cases, in application development, you will want to use the BSON
   date type. See :ref:`document-bson-type-date` for more
   information.

If you create a BSON Timestamp using the empty constructor (e.g. ``new Timestamp()``),
MongoDB will only generate a timestamp *if* you use the constructor in
the first field of the document. [#id_exception]_ Otherwise, MongoDB
will generate an empty timestamp value (i.e. ``Timestamp(0, 0)``.)

.. versionchanged:: 2.1
   :program:`mongo` shell displays the Timestamp value with the wrapper:

   .. code-block:: javascript

      Timestamp(<time_t>, <ordinal>)

   Prior to version 2.1, the :program:`mongo` shell display the
   Timestamp value as a document:

   .. code-block:: javascript

      { t : <time_t>, i : <ordinal> }

.. [#id_exception] If the first field in the document is ``_id``, then
   you can generate a timestamp in the *second* field
   of a document.

   .. only:: html or dirhtml or singlehtml or epub or gettext

      In the following example, MongoDB will generate a Timestamp
      value, even though the ``Timestamp()`` constructor is *not* in
      the first field in the document:

      .. code-block:: javascript

         db.bios.insert( { _id: 9, last_updated: new Timestamp() } )

.. _document-bson-type-date:

Date
~~~~

BSON Date is a 64-bit integer that represents the number of
milliseconds since the Unix epoch (Jan 1, 1970). The `official BSON
specification <http://bsonspec.org/#/specification>`_ refers to the
BSON Date type as the *UTC datetime*.

.. versionchanged:: 2.0
   BSON Date type is signed. [#unsigned-date]_ Negative values
   represent dates before 1970.

Consider the following examples of BSON Date:

- Construct a Date using the ``new Date()`` constructor in the
  :program:`mongo` shell:

  .. code-block:: javascript

     var mydate1 = new Date()

- Construct a Date using the ``ISODate()`` constructor in the
  :program:`mongo` shell:

  .. code-block:: javascript

     var mydate2 = ISODate()

- Return the ``Date`` value as string:

  .. code-block:: javascript

     mydate1.toString()

- Return the month portion of the Date value; months are zero-indexed,
  so that January is month ``0``:

  .. code-block:: javascript

     mydate1.getMonth()

.. [#unsigned-date] Prior to version 2.0, ``Date`` values were
   incorrectly interpreted as *unsigned* integers, which affected
   sorts, range queries, and indexes on ``Date`` fields. Because
   indexes are not recreated when upgrading, please re-index if you
   created an index on ``Date`` values with an earlier version, and
   dates before 1970 are relevant to your application.
