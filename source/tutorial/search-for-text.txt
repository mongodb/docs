==============================
Search String Content for Text
==============================

.. default-domain:: mongodb

In 2.4, you can enable the text search feature to create ``text``
indexes and issue text queries using the :dbcommand:`text`.

The following tutorial offers various query patterns for using the text
search feature.

The examples in this tutorial use a collection ``quotes`` that has a
``text`` index on the fields ``quote`` that contains a string and
``related_quotes`` that contains an array of string elements.

Search for a Term
-----------------

The following command searches for the word ``TOMORROW``:

.. code-block:: javascript

   db.quotes.runCommand( "text", { search: "TOMORROW" } )

Because :dbcommand:`text` command is case-insensitive, the text search
will match the following document in the ``quotes`` collection:

.. code-block:: javascript

   {
     "_id" : ObjectId("50ecef5f8abea0fda30ceab3"),
     "quote" : "tomorrow, and tomorrow, and tomorrow, creeps in this petty pace",
     "related_quotes" : [
                          "is this a dagger which I see before me",
                          "the handle toward my hand?"
                        ],
     "src" : {
               "title" : "Macbeth",
               "from" : "Act V, Scene V"
             },
     "speaker" : "macbeth"
   }

Match Any of the Search Terms
-----------------------------

If the search string is a space-delimited text, :dbcommand:`text`
command performs a logical ``OR`` search on each term and returns
documents that contains any of the terms.

For example, the search string ``"tomorrow largo"`` searches for the term
``tomorrow`` **OR** the term ``largo``:

.. code-block:: javascript

  db.quotes.runCommand( "text", { search: "tomorrow largo" } )

The command will match the following documents in the ``quotes``
collection:

.. code-block:: javascript

   {
     "_id" : ObjectId("50ecef5f8abea0fda30ceab3"),
     "quote" : "tomorrow, and tomorrow, and tomorrow, creeps in this petty pace",
     "related_quotes" : [
                          "is this a dagger which I see before me",
                          "the handle toward my hand?"
                        ],
     "src" : {
               "title" : "Macbeth",
               "from" : "Act V, Scene V"
             },
     "speaker" : "macbeth"
    }

    {
      "_id" : ObjectId("50ecf0cd8abea0fda30ceab4"),
      "quote" : "Es tan corto el amor y es tan largo el olvido.",
      "related_quotes" : [
                           "Como para acercarla mi mirada la busca.",
                           "Mi corazón la busca, y ella no está conmigo."
                         ],
      "speaker" : "Pablo Neruda",
      "src" : {
                "title" : "Veinte poemas de amor y una canción desesperada",
                "from" : "Poema 20"
              }
     }

.. _text-search-phrases:

Match Phrases
-------------

To match the exact phrase that includes a space(s) as a single term,
escape the quotes.

For example, the following command searches for the exact phrase ``"and
tomorrow"``:

.. code-block:: javascript

   db.quotes.runCommand( "text", { search: "\"and tomorrow\"" } )

If the search string contains both phrase and individual terms, the
:dbcommand:`text` command performs a compound logical ``AND`` of the
phrases with the compound logical ``OR`` of the single terms.
   
For example, the following command contains a search string that
contains the individual terms ``corto`` and ``largo`` as well as the
phrase ``\"and tomorrow\"``:

.. code-block:: javascript

   db.quotes.runCommand( "text", { search: "corto largo \"and tomorrow\"" } )

The :dbcommand:`text` command performs the equivalent to the following
logical operation:

.. code-block:: javascript

   (corto OR largo OR tomorrow) AND ("and tomorrow")

.. _text-search-negation:

Match Some Words But Not Others
-------------------------------

A *negated* term is a term that is prefixed by a minus sign ``-``. If
you negate a term, the :dbcommand:`text` command will exclude the
documents that contain those terms from the results.

.. note::

   If the search text contains *only* negated terms, the
   :dbcommand:`text` command will not return any results.

The following example returns those documents that contain the term
``tomorrow`` but **not** the term ``petty``.

.. code-block:: javascript

   db.quotes.runCommand( "text" , { search: "tomorrow -petty" } )

.. _text-search-limit:

Limit the Number of Matching Documents in the Result Set
--------------------------------------------------------

.. note::

   The result from the :dbcommand:`text` command must fit within the
   maximum :limit:`BSON Document Size`.

By default, the :dbcommand:`text` command will return up to 100
matching documents, from highest to lowest scores. To override this
default limit, use the ``limit`` option in the :dbcommand:`text`
command, as in the following example:

.. code-block:: javascript

   db.quotes.runCommand( "text", { search: "tomorrow", limit: 2 } )

The :dbcommand:`text` command will return at most ``2`` of the
*highest scoring* results.

The ``limit`` can be any number as long as the result set fits within
the maximum :limit:`BSON Document Size`.

.. _text-search-project:

Specify Which Fields to Return in the Result Set
------------------------------------------------

In the :dbcommand:`text` command, use the ``project`` option to specify
the fields to include (``1``) or exclude (``0``) in the matching
documents.

.. note::

   The ``_id`` field is always returned unless explicitly excluded in
   the ``project`` document.

The following example returns only the ``_id`` field and the ``src``
field in the matching documents:

.. code-block:: javascript

   db.quotes.runCommand( "text", { search: "tomorrow", 
                                   project: { "src": 1 } } )

.. _text-search-filter:

Search with Additional Query Conditions
---------------------------------------

The :dbcommand:`text` command can also use the ``filter`` option to
specify additional query conditions.

The following example will return the documents that contain the term
``tomorrow`` **AND** the ``speaker`` is ``macbeth``:

.. code-block:: javascript

   db.quotes.runCommand( "text", { search: "tomorrow", 
                                   filter: { speaker : "macbeth" } } )

.. seealso::

   :doc:`/tutorial/limit-number-of-items-scanned-for-text-search`

.. _text-search-language:

Search for Text in Specific Languages
-------------------------------------

You can specify the language that determines the tokenization,
stemming, and removal of stop words, as in the following example:

.. code-block:: javascript

   db.quotes.runCommand( "text", { search: "amor", language: "spanish" } )

.. seealso::

   :doc:`/tutorial/create-text-index-on-multi-language-collection`

See :ref:`text-search-languages` for a list of supported languages.

Text Search Output
------------------

The :dbcommand:`text` command returns a document that contains the
result set.

See :ref:`text-search-output` for information on the output.
