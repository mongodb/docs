# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/wiredtiger.txt:5
msgid "WiredTiger Storage Engine"
msgstr ""

#: ../source/core/wiredtiger.txt:17
msgid ""
"The WiredTiger storage engine is the default storage engine starting in "
"MongoDB 3.2. For existing deployments, if you do not specify the "
"``--storageEngine`` or the :setting:`storage.engine` setting, MongoDB 3.2"
" can automatically determine the storage engine used to create the data "
"files in the ``--dbpath`` or :setting:`storage.dbPath`. See :ref:`3.2"
"-storage-engine-compatibility`."
msgstr ""

#: ../source/core/wiredtiger.txt:26
msgid "Document Level Concurrency"
msgstr ""

#: ../source/core/wiredtiger.txt:28
msgid ""
"WiredTiger uses *document-level* concurrency control for write "
"operations. As a result, multiple clients can modify different documents "
"of a collection at the same time."
msgstr ""

#: ../source/includes/fact-wiredtiger-locks.rst:1
msgid ""
"For most read and write operations, WiredTiger uses optimistic "
"concurrency control. WiredTiger uses only intent locks at the global, "
"database and collection levels. When the storage engine detects conflicts"
" between two operations, one will incur a write conflict causing MongoDB "
"to transparently retry that operation."
msgstr ""

#: ../source/includes/fact-wiredtiger-locks.rst:7
msgid ""
"Some global operations, typically short lived operations involving "
"multiple databases, still require a global \"instance-wide\" lock. Some "
"other operations, such as dropping a collection, still require an "
"exclusive database lock."
msgstr ""

#: ../source/core/wiredtiger.txt:37
msgid "Snapshots and Checkpoints"
msgstr ""

#: ../source/core/wiredtiger.txt:39
msgid ""
"WiredTiger uses MultiVersion Concurrency Control (MVCC). At the start of "
"an operation, WiredTiger provides a point-in-time snapshot of the data to"
" the transaction. A snapshot presents a consistent view of the in-memory "
"data."
msgstr ""

#: ../source/core/wiredtiger.txt:44
msgid ""
"When writing to disk, WiredTiger writes all the data in a snapshot to "
"disk in a consistent way across all data files. The now-:term:`durable` "
"data act as a *checkpoint* in the data files. The *checkpoint* ensures "
"that the data files are consistent up to and including the last "
"checkpoint; i.e. checkpoints can act as recovery points."
msgstr ""

#: ../source/includes/extracts/wt-snapshot-frequency.rst:1
msgid ""
"MongoDB configures WiredTiger to create checkpoints (i.e. write the "
"snapshot data to disk) at intervals of 60 seconds."
msgstr ""

#: ../source/core/wiredtiger.txt:52
msgid ""
"During the write of a new checkpoint, the previous checkpoint is still "
"valid. As such, even if MongoDB terminates or encounters an error while "
"writing a new checkpoint, upon restart, MongoDB can recover from the last"
" valid checkpoint."
msgstr ""

#: ../source/core/wiredtiger.txt:57
msgid ""
"The new checkpoint becomes accessible and permanent when WiredTiger's "
"metadata table is atomically updated to reference the new checkpoint. "
"Once the new checkpoint is accessible, WiredTiger frees pages from the "
"old checkpoints."
msgstr ""

#: ../source/core/wiredtiger.txt:62
msgid ""
"Using WiredTiger, even without :ref:`journaling <storage-wiredtiger-"
"journal>`, MongoDB can recover from the last checkpoint; however, to "
"recover changes made after the last checkpoint, run with :ref:`journaling"
" <storage-wiredtiger-journal>`."
msgstr ""

#: ../source/core/wiredtiger.txt:70
msgid "Journal"
msgstr ""

#: ../source/core/wiredtiger.txt:72
msgid ""
"WiredTiger uses a write-ahead transaction log in combination with "
":ref:`checkpoints <storage-wiredtiger-checkpoints>` to ensure data "
"durability."
msgstr ""

#: ../source/core/wiredtiger.txt:76
msgid ""
"The WiredTiger journal persists all data modifications between "
"checkpoints. If MongoDB exits between checkpoints, it uses the journal to"
" replay all data modified since the last checkpoint. For information on "
"the frequency with which MongoDB writes the journal data to disk, see "
":ref:`journal-process`."
msgstr ""

#: ../source/core/wiredtiger.txt:82
msgid ""
"WiredTiger journal is compressed using the :term:`snappy` compression "
"library. To specify an alternate compression algorithm or no compression,"
" use the :setting:`storage.wiredTiger.engineConfig.journalCompressor` "
"setting."
msgstr ""

#: ../source/includes/fact-wiredtiger-log-compression-limit.rst:1
msgid ""
"Minimum log record size for WiredTiger is 128 bytes. If a log record is "
"128 bytes or smaller, WiredTiger does not compress that record."
msgstr ""

#: ../source/core/wiredtiger.txt:91
msgid ""
"You can disable journaling by setting :setting:`storage.journal.enabled` "
"to ``false``, which can reduce the overhead of maintaining the journal."
msgstr ""

#: ../source/core/wiredtiger.txt:95
msgid ""
"For :term:`standalone` instances, not using the journal means that, when "
"MongoDB exits unexpectedly, you will lose all data modifications prior to"
" the last checkpoint. For members of :term:`replica sets <replica set>`, "
"the replication process may provide sufficient durability guarantees."
msgstr ""

#: ../source/core/wiredtiger.txt:101
msgid ":ref:`Journaling with WiredTiger <journaling-wiredTiger>`"
msgstr ""

#: ../source/core/wiredtiger.txt:106
msgid "Compression"
msgstr ""

#: ../source/core/wiredtiger.txt:108
msgid ""
"With WiredTiger, MongoDB supports compression for all collections and "
"indexes. Compression minimizes storage use at the expense of additional "
"CPU."
msgstr ""

#: ../source/core/wiredtiger.txt:112
msgid ""
"By default, WiredTiger uses block compression with the :term:`snappy` "
"compression library for all collections and :term:`prefix compression` "
"for all indexes."
msgstr ""

#: ../source/core/wiredtiger.txt:116
msgid ""
"For collections, block compression with :term:`zlib` is also available. "
"To specify an alternate compression algorithm or no compression, use the "
":setting:`storage.wiredTiger.collectionConfig.blockCompressor` setting."
msgstr ""

#: ../source/core/wiredtiger.txt:121
msgid ""
"For indexes, to disable :term:`prefix compression`, use the "
":setting:`storage.wiredTiger.indexConfig.prefixCompression` setting."
msgstr ""

#: ../source/core/wiredtiger.txt:124
msgid ""
"Compression settings are also configurable on a per-collection and per-"
"index basis during collection and index creation. See :ref:`create-"
"collection-storage-engine-options` and :ref:`db.collection.createIndex() "
"storageEngine option <createIndex-options>`."
msgstr ""

#: ../source/core/wiredtiger.txt:130
msgid ""
"For most workloads, the default compression settings balance storage "
"efficiency and processing requirements."
msgstr ""

#: ../source/core/wiredtiger.txt:133
msgid ""
"The WiredTiger journal is also compressed by default. For information on "
"journal compression, see :ref:`storage-wiredtiger-journal`."
msgstr ""

#: ../source/core/wiredtiger.txt:139
msgid "Memory Use"
msgstr ""

#: ../source/includes/extracts/wt-cache-utilization.rst:1
msgid ""
"With WiredTiger, MongoDB utilizes both the WiredTiger internal cache and "
"the filesystem cache."
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:2
msgid ""
"Starting in 3.4, the WiredTiger internal cache, by default, will use the "
"larger of either:"
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:5
#, python-format
msgid "50% of (RAM - 1 GB), or"
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:7
msgid "256 MB."
msgstr ""

#: ../source/includes/extracts/wt-cache-utilization.rst:6
msgid ""
"By default, WiredTiger uses Snappy block compression for all collections "
"and prefix compression for all indexes. Compression defaults are "
"configurable at a global level and can also be set on a per-collection "
"and per-index basis during collection and index creation."
msgstr ""

#: ../source/includes/extracts/wt-cache-utilization.rst:11
msgid ""
"Different representations are used for data in the WiredTiger internal "
"cache versus the on-disk format:"
msgstr ""

#: ../source/includes/extracts/wt-cache-utilization.rst:14
msgid ""
"Data in the filesystem cache is the same as the on-disk format, including"
" benefits of any compression for data files. The filesystem cache is used"
" by the operating system to reduce disk I/O."
msgstr ""

#: ../source/includes/extracts/wt-cache-utilization.rst:17
msgid ""
"Indexes loaded in the WiredTiger internal cache have a different data "
"representation to the on-disk format, but can still take advantage of "
"index prefix compression to reduce RAM usage. Index prefix compression "
"deduplicates common prefixes from indexed fields."
msgstr ""

#: ../source/includes/extracts/wt-cache-utilization.rst:21
msgid ""
"Collection data in the WiredTiger internal cache is uncompressed and uses"
" a different representation from the on-disk format. Block compression "
"can provide significant on-disk storage savings, but data must be "
"uncompressed to be manipulated by the server."
msgstr ""

#: ../source/includes/extracts/wt-filesystem-cache.rst:1
msgid ""
"Via the filesystem cache, MongoDB automatically uses all free memory that"
" is not used by the WiredTiger cache or by other processes."
msgstr ""

#: ../source/includes/extracts/wt-cache-setting.rst:1
msgid ""
"To adjust the size of the WiredTiger internal cache, see "
":setting:`storage.wiredTiger.engineConfig.cacheSizeGB` and "
":option:`--wiredTigerCacheSizeGB <mongod --wiredTigerCacheSizeGB>`. Avoid"
" increasing the WiredTiger internal cache size above its default value."
msgstr ""

