.. _node-connect-to-mongodb:

================
Connection Guide
================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :description: Learn how to connect to a MongoDB Atlas or local MongoDB deployment by using the Node.js driver.
   :keywords: node.js, code example, connection string, local connection, Stable API, Atlas

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This guide shows you how to connect to a
`MongoDB Atlas deployment <https://www.mongodb.com/docs/atlas>`__,
a MongoDB instance, or a replica set using the Node.js driver.

.. _node-connection-uri:

Connection URI
--------------

The **connection URI** is the set of instructions that the driver uses to connect to a
MongoDB deployment. It tells the driver how to connect to MongoDB and how to behave
while connected. The following example shows each part of the connection URI:

.. figure:: /includes/figures/dns_seedlist_connection_string_parts.png
   :alt: Each part of the connection string

In this example, we connect to an Atlas MongoDB deployment that has a
DNS SRV record. For more details, see the
:manual:`DNS Seed List Connection Format
</reference/connection-string/#dns-seed-list-connection-format>`
documentation. This format offers flexibility in deployment and the
ability to change the servers in rotation without reconfiguring clients.

.. note::

   To learn how to retrieve your connection string in Atlas, see the
   :atlas:`Atlas driver connection guide </driver-connection>`.

If you are connecting to an instance or replica set that does not have a
DNS SRV address, you must use ``mongodb`` for the protocol, which specifies
the :manual:`Standard Connection String Format
</reference/connection-string/#std-label-connections-standard-connection-string-format>`.

After the protocol, the next part of the connection string contains credentials
if you are using password-based authentication. Replace the value of ``user``
with your username and ``pass`` with your password. If you are using an
authentication mechanism that does not require a username and password, omit
this part of the connection URI.

The next part of the connection string specifies the hostname or IP address of
your MongoDB instance, followed by the port number. In the example above, we use
``sample.host`` as the hostname and ``27017`` as the port. Replace these values
to point to your MongoDB instance.

The last part of the connection string contains connection and authentication
options as parameters. In the example above, we set two connection options:
``maxPoolSize=20`` and ``w=majority``. For more information on connection
options, skip to the :ref:`node-connection-options` section.

.. _connect-sample-node-driver:

Atlas Connection Example
------------------------

You must create a client to connect to a MongoDB deployment on Atlas. To create
a client, construct an instance of ``MongoClient``, passing in your
URI and a ``MongoClientOptions`` object.

.. tip:: Reuse Your Client

   As each ``MongoClient`` represents a pool of connections to the
   database, most applications only require a single instance of a
   ``MongoClient``, even across multiple requests. To learn more about
   how connection pools work in the driver, see the :ref:`FAQ page
   <node-faq-connection-pool>`.

Use the ``serverApi`` option in your ``MongoClientOptions`` object to
enable the {+stable-api+} feature, which forces the server to run operations
with behavior compatible with the specified API version.

The following code shows how you can specify the connection string and the
{+stable-api+} client option when connecting to a MongoDB deployment on Atlas and
verify that the connection is successful:

.. literalinclude:: /code-snippets/connection/stable-api-connect.js
   :language: javascript

.. note::

   The {+driver-short+} automatically calls the ``MongoClient.connect()``
   method when using the client to perform CRUD operations on your MongoDB deployment.
   Call the ``MongoClient.connect()`` method explicitly if you want to verify that the
   connection is successful.

To learn more about the Stable
API feature, see the :ref:`{+stable-api+} page <nodejs-stable-api>`.

.. _node-other-ways-to-connect:

Other Ways to Connect to MongoDB
--------------------------------

If you are connecting to a single {+mdb-server+} instance or replica set
that is not hosted on Atlas, see the following sections to find out how to
connect.

Connect to a {+mdb-server+} on Your Local Machine
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. include:: /includes/localhost-connection.rst

To test whether you can connect to your server, replace the connection
string in the :ref:`Connect to MongoDB <connect-sample-node-driver>` code
example and run it.

Connect to a Replica Set
^^^^^^^^^^^^^^^^^^^^^^^^

A MongoDB replica set deployment is a group of connected instances that
store the same set of data. This configuration of instances provides data
redundancy and high data availability.

To connect to a replica set deployment, specify the hostname and port numbers
of each instance, separated by a comma, and the replica set name as the value
of the ``replicaSet`` parameter in the connection string.

.. code-block:: none

   mongodb://host1:27017,host2:27017,host3:27017/?replicaSet=myRs

When making a connection, the driver takes the following actions by default:

- Discovers all replica set members when given the address of any one member.
- Dispatches operations to the appropriate member, such as write against the **primary**.

.. tip:: Specify all hosts

   To ensure connectivity if one host is unavailable, provide the full
   list of hosts when connecting to a replica set.

Direct Connection
^^^^^^^^^^^^^^^^^

To force your operations to run on the host specified in your connection
URI, you can specify the ``directConnection`` connection option. If you
specify this option, you must use the standard connection URI format. The
driver does not accept the DNS seedlist connection format (SRV) when you
specify this option.

When you specify ``directConnection`` and connect to a secondary member of the
replica set, your write operations fail because the client isn't
connected to the primary member. To perform read operations, you must
enable secondary reads. See the :manual:`read preference options </reference/connection-string/#read-preference-options>`
for more information.
