.. meta::
   :robots: noindex, nosnippet

.. _mongodb-api-reference:

=====================
MongoDB API Reference
=====================

.. default-domain:: mongodb

.. meta:: 
   :keywords: code example
   :description: Learn how to use Functions to query a MongoDB Atlas data source. 

.. facet::
   :name: programming_language
   :values: javascript/typescript

.. facet::
  :name: genre
  :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _mongodb-admin:

mongodb.admin()
---------------

.. method:: mongodb.admin()
   :hidden:

Gets a handle for the ``admin`` database in a linked MongoDB data
source. You can use this to run MongoDB admin commands like 
:method:`admin.getDBNames()`.

.. code-block:: javascript
   :emphasize-lines: 2

   const mongodb = context.services.get("mongodb-atlas");
   const admin = mongodb.admin();

Parameters
~~~~~~~~~~

.. code-block:: typescript
   
   admin(): AdminDatabase

Return Value
~~~~~~~~~~~~

The ``mongodb.admin()`` method returns an ``AdminDatabase`` object. The
object contains helper methods that wrap a subset of MongoDB database
commands. See :method:`admin.getDBNames()`.

.. _mongodb-admin-getdbnames:

admin.getDBNames()
------------------

.. method:: admin.getDBNames()
   :hidden:

Returns a list of database names in a MongoDB data source.

.. include:: /includes/note-method-system-function-only.rst

.. code-block:: javascript
   :emphasize-lines: 2

   const mongodb = context.services.get("mongodb-atlas");
   const admin = mongodb.admin();
   const dbNames = admin.getDBNames();

Parameters
~~~~~~~~~~

.. code-block:: typescript
   
   getDBNames(): string[]

Return Value
~~~~~~~~~~~~

The ``admin.getDBNames()`` method returns an array of strings where each
element is the name of a database in the data source.

.. _mongodb-db:

mongodb.db()
------------

.. method:: mongodb.db()
   :hidden:

Gets a handle for a database in a linked MongoDB data source.

.. code-block:: javascript
   :emphasize-lines: 2

   const mongodb = context.services.get("mongodb-atlas");
   const db = mongodb.db("myDB");

Parameters
~~~~~~~~~~

.. code-block:: typescript
   
   db(name: string): Database

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``name``
     - string
     - The name of the database.

Return Value
~~~~~~~~~~~~

The ``mongodb.db()`` method returns a ``Database`` object that allows
you to access collections in the specified database.

See :method:`database.collection()`

.. _mongodb-db-getcollectionnames:

database.getCollectionNames()
-----------------------------

.. method:: database.getCollectionNames()
   :hidden:

Returns a list of collection names in the database.

.. include:: /includes/note-method-system-function-only.rst

.. code-block:: javascript
   :emphasize-lines: 2

   const mongodb = context.services.get("mongodb-atlas");
   const db = mongodb.db("myDB");
   const collectionNames = db.getCollectionNames();

Parameters
~~~~~~~~~~

.. code-block:: typescript
   
   getCollectionNames(): string[]

Return Value
~~~~~~~~~~~~

The ``database.getCollectionNames()`` method returns an array of strings
where each element is the name of a collection in the database.

.. _mongodb-db-collection:

database.collection()
---------------------

.. method:: database.collection()
   :hidden:

Gets a handle for a collection in a linked MongoDB data source from a
:method:`database <mongodb.db()>` handle.

.. code-block:: javascript
   :emphasize-lines: 3
   
   const mongodb = context.services.get("mongodb-atlas");
   const db = mongodb.db("myDB");
   const collection = db.collection("myCollection");

Parameters
~~~~~~~~~~

.. code-block:: typescript

   collection(name: string): Collection

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``name``
     - string
     - The name of the collection.

Return Value
~~~~~~~~~~~~

The ``database.collection()`` method returns a collection object that
allows you to query the specified collection.

.. _mongodb-collection-find:

collection.find()
-----------------

.. method:: collection.find()
   :hidden:

Finds all documents in a collection or view that match the provided
query filters. Returns a cursor object that allows you to access
matching documents.

.. include:: /functions/mongodb/api/snippets/findMany.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript

   find(
      query?: object,
      projection?: object,
      options?: object
   ): Cursor

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``query``
     - ``object``
     - Optional.
       
       .. include:: /functions/mongodb/api/parameter-query.rst
   
   * - ``projection``
     - ``object``
     - Optional.
       
       .. include:: /functions/mongodb/api/parameter-projection.rst
   
   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
   
   * - ``options.session``
     - ``ClientSession``
     - .. include:: /functions/mongodb/api/parameter-options-session.rst

Return Value
~~~~~~~~~~~~

The ``collection.find()`` method returns a cursor object that points to
any documents that match the specified query. You can manipulate and
access documents in the query result set with the following cursor
methods:

.. list-table::
   :header-rows: 1
   :widths: 40 60
   
   * - Method
     - Description
   
   * - ``cursor.next()``
     - Iterates the cursor and returns a :mdn:`Promise
       <Web/JavaScript/Reference/Global_Objects/Promise>` that resolves
       to the next document in the cursor. If the cursor is exhausted,
       the promise resolves to ``undefined``.
   
       .. example::
   
          .. code-block:: javascript
   
             collection.find().next()
               .then(doc => console.log("next document", doc))
   
   * - ``cursor.toArray()``
     - Iterates the cursor to exhaustion and returns a :mdn:`Promise
       <Web/JavaScript/Reference/Global_Objects/Promise>` that
       resolves to an array that contains all of the iterated
       documents.
   
       .. example::
   
          .. code-block:: javascript
   
             collection.find().toArray()
               .then(docs => console.log("all documents", docs))
   
   * - ``cursor.skip(amount)``
     - Specifies a number of matching documents to omit from the query
       result set. MongoDB omits documents from the result set in sort
       order until it has skipped the specified number. If the query
       also specifies a limit, skipped documents do not count towards
       the limit threshold.
       
       .. note::
          
          You cannot call this method after retrieving one or more
          documents using ``cursor.next()`` or ``cursor.toArray()``.
   
   * - ``cursor.limit(limit)``
     - Specifies the maximum number of documents to include in the
       query result set. If the result set contains more documents than
       the specified ``limit``, the cursor will return documents in
       order up to the limit.
   
       .. note::
   
          You cannot call this method after retrieving one or more
          documents using ``cursor.next()`` or ``cursor.toArray()``.
   
   * - ``cursor.sort(sort)``
     - Sorts documents in the result set according to the ``sort``
       filter. Sort documents specify one or more fields to sort on. The
       value of each field indicates whether MongoDB should sort it in
       ascending (``1``) or descending (``-1``) order. For more
       information, see :manual:`cursor.sort
       </reference/method/cursor.sort>`.
   
       .. note::
   
          You cannot call this method after retrieving one or more
          documents using ``cursor.next()`` or ``cursor.toArray()``.
   
       .. example::
   
          The following sort document specifies that documents should be
          sorted first by ``age`` from highest to lowest. Once sorted by
          age, the result set should further be sorted by ``name`` in
          alphabetical order for each distinct age value.
   
          .. code-block:: javascript
   
             { age: -1, name: 1 }

.. note::

   You cannot return a cursor from a function. Instead, evaluate the
   cursor using ``cursor.next()`` or ``cursor.toArray()`` and return the
   result.

.. _mongodb-collection-findOne:

collection.findOne()
--------------------

.. method:: collection.findOne()
   :hidden:

Finds a single document from a collection or view. If multiple documents
match the query, this returns the first matching document in the collection.

.. note:: ``findOne()`` Cannot Use Sort

  As a workaround, use ``find()`` with the ``sort()`` and ``next()`` cursor methods 
  to return a single document from a sorted collection. 

  .. code-block:: javascript

    collection.find({}).sort({"<Field Name>": 1}).next()
      .then(result => console.log("Found Document: ", result))

.. include:: /functions/mongodb/api/snippets/findOne.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript

   findOne(
      query?: object,
      projection?: object,
      options?: object
   ): Promise<object | null>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``query``
     - ``object``
     - Optional.
       
       .. include:: /functions/mongodb/api/parameter-query.rst
   
   * - ``projection``
     - ``object``
     - Optional.
       
       .. include:: /functions/mongodb/api/parameter-projection.rst
   
   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
   
   * - ``options.session``
     - ``ClientSession``
     - .. include:: /functions/mongodb/api/parameter-options-session.rst

Return Value
~~~~~~~~~~~~

The ``collection.findOne()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that resolves to the
first document in the collection that matches the query. If no documents
match the specified query, the promise resolves to ``null``.

.. code-block:: typescript

   Promise<object | null>

.. _mongodb-collection-findOneAndUpdate:

collection.findOneAndUpdate()
-----------------------------

.. method:: collection.findOneAndUpdate()
   :hidden:

Updates a single document in a collection or view and returns the
document in either its pre-update or post-update form.

.. include:: /functions/mongodb/api/why-findOneAnd.rst

.. include:: /functions/mongodb/api/snippets/findOneAndUpdate.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript

   findOneAndUpdate(
      query: object,
      update: object,
      options?: object
   ): Promise<object | null>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``query``
     - ``object``
     - .. include:: /functions/mongodb/api/parameter-query.rst
   
   * - ``update``
     - ``object``
     - .. include:: /functions/mongodb/api/parameter-update.rst
   
   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
   
   * - ``options.upsert``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-options-upsert.rst
   
   * - ``options.sort``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-options-sort.rst
   
   * - ``options.projection``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-projection.rst
   
   * - ``options.returnNewDocument``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-options-returnNewDocument.rst
   
   * - ``options.session``
     - ``ClientSession``
     - .. include:: /functions/mongodb/api/parameter-options-session.rst

Return Value
~~~~~~~~~~~~

The ``collection.findOneAndUpdate()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that resolves to a
single document that the query overwrote. If no documents match the
specified query, the promise resolves to ``null``.

.. code-block:: typescript

   Promise<object | null>

.. include:: /functions/mongodb/api/note-returnNewDocument.rst

.. _mongodb-collection-findOneAndReplace:

collection.findOneAndReplace()
------------------------------

.. method:: collection.findOneAndReplace()
   :hidden:

Overwrites a single document in a collection or view and returns the
document in either its pre-replacement or post-replacement form.

.. include:: /functions/mongodb/api/why-findOneAnd.rst

.. include:: /functions/mongodb/api/snippets/findOneAndReplace.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript

   findOneAndReplace(
      query: object,
      replacement: object,
      options?: object
   ): Promise<object | null>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``query``
     - ``object``
     - .. include:: /functions/mongodb/api/parameter-query.rst
   
   * - ``replacement``
     - ``object``
     - .. include:: /functions/mongodb/api/parameter-replacement.rst
   
   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
   
   * - ``options.upsert``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-options-upsert.rst
   
   * - ``options.sort``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-options-sort.rst
   
   * - ``options.projection``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-projection.rst
   
   * - ``options.returnNewDocument``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-options-returnNewDocument.rst
   
   * - ``options.session``
     - ``ClientSession``
     - .. include:: /functions/mongodb/api/parameter-options-session.rst

Return Value
~~~~~~~~~~~~

The ``collection.findOneAndReplace()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that resolves to a
single document that the query overwrote. If no documents match the
specified query, the promise resolves to ``null``.

.. code-block:: typescript

   Promise<object | null>

.. include:: /functions/mongodb/api/note-returnNewDocument.rst

.. _mongodb-collection-findOneAndDelete:

collection.findOneAndDelete()
-----------------------------

.. method:: collection.findOneAndDelete()
   :hidden:

Removes a single document from a collection and returns the deleted
document as it was immediately before it was deleted.

.. include:: /functions/mongodb/api/why-findOneAnd.rst

.. include:: /functions/mongodb/api/snippets/findOneAndDelete.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript

   findOneAndDelete(
      query: object,
      options?: object
   ): Promise<object | null>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``query``
     - ``object``
     - .. include:: /functions/mongodb/api/parameter-query.rst
   
   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
   
   * - ``options.sort``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-options-sort.rst
   
   * - ``options.projection``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-projection.rst
   
   * - ``options.session``
     - ``ClientSession``
     - .. include:: /functions/mongodb/api/parameter-options-session.rst

Return Value
~~~~~~~~~~~~

The ``collection.findOneAndDelete()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that resolves to a
single document that the query deleted. If no documents match the
specified query, the promise resolves to ``null``.

.. code-block:: typescript

   Promise<object | null>

.. _mongodb-collection-insertOne:

collection.insertOne()
----------------------

.. method:: collection.insertOne()
   :hidden:

Inserts a single document into a collection and returns the ``_id`` of
the inserted document.

.. include:: /functions/mongodb/api/snippets/insertOne.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript

   insertOne(document: object): Promise<object>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``document``
     - ``object``
     - A document to insert into the collection.

Return Value
~~~~~~~~~~~~

The ``collection.insertOne()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that
resolves to a document that describes the insert operation.

.. code-block:: typescript

   Promise<object>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65

   * - Value
     - Type
     - Description

   * - ``result.insertedId``
     - ``string``
     - The ``_id`` value of the document that the insert operation added
       to the collection.

.. _mongodb-collection-insertMany:

collection.insertMany()
-----------------------

.. method:: collection.insertMany()
   :hidden:

Inserts one or more documents into a collection and returns a list that
contains the ``_id`` value for each inserted document.

.. include:: /functions/mongodb/api/snippets/insertMany.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript

   insertMany(
     document: object,
     options?:  { ordered?: boolean },
   ): Promise<object>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``documents``
     - ``object``
     - An array of documents to insert into the collection.

   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
   
   * - ``options.ordered``
     - ``boolean``
     - Optional. A boolean specifying whether the :manual:`mongod </reference/program/mongod/#mongodb-binary-bin.mongod>` instance should perform an ordered or unordered insert. Defaults to ``true``.

Return Value
~~~~~~~~~~~~

The ``collection.insertMany()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that
resolves to a document that describes the insert operation.

.. code-block:: typescript

   Promise<object>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65

   * - Value
     - Type
     - Description

   * - ``result.insertedIds: Array<ObjectID>``
     - ``string``
     - An array that contains the ``_id`` values for all documents
       that the insert operation added to the collection in the order
       that they were passed to the method.

.. _mongodb-collection-updateOne:

collection.updateOne()
----------------------

.. method:: collection.updateOne()
   :hidden:

Updates a single document in a collection and returns metadata about the
operation.

.. include:: /functions/mongodb/api/snippets/updateOnePush.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript

   updateOne(
      query: object,
      update: object,
      options?: object
   ): Promise<object>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``query``
     - ``object``
     - .. include:: /functions/mongodb/api/parameter-query.rst
   
   * - ``update``
     - ``object``
     - .. include:: /functions/mongodb/api/parameter-update.rst
   
   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
   
   * - ``options.upsert``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-options-upsert.rst
   
   * - ``options.session``
     - ``ClientSession``
     - .. include:: /functions/mongodb/api/parameter-options-session.rst

Return Value
~~~~~~~~~~~~

The ``collection.updateOne()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that
resolves to a document that describes the update operation.

.. code-block:: typescript

   Promise<object>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65

   * - Value
     - Type
     - Description

   * - ``result.matchedCount``
     - ``number``
     - The number of documents in the collection that match the provided
       query.

   * - ``result.modifiedCount``
     - ``number``
     - The number of documents in the collection that were modified by
       the update operation.

   * - ``result.upsertedId``
     - ``string``
     - The ``_id`` value of the document inserted by an upsert
       operation. This value is only present when the ``upsert`` option
       is enabled and the update query does not match any documents.

.. _mongodb-collection-updateMany:

collection.updateMany()
-----------------------

.. method:: collection.updateMany()
   :hidden:

Updates one or more documents in a collection and returns metadata about
the operation.

.. include:: /functions/mongodb/api/snippets/updateMany.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript

   updateMany(
      query: object,
      update: object,
      options?: object
   ): Promise<object>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``query``
     - ``object``
     - .. include:: /functions/mongodb/api/parameter-query.rst
   
   * - ``update``
     - ``object``
     - .. include:: /functions/mongodb/api/parameter-update.rst
   
   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
   
   * - ``options.upsert``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-options-upsert.rst
   
   * - ``options.session``
     - ``ClientSession``
     - .. include:: /functions/mongodb/api/parameter-options-session.rst

Return Value
~~~~~~~~~~~~

The ``collection.updateMany()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that
resolves to a document that describes the update operation.

.. code-block:: typescript

   Promise<object>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65

   * - Value
     - Type
     - Description

   * - ``result.matchedCount``
     - ``number``
     - The number of documents in the collection that match the provided
       query.

   * - ``result.modifiedCount``
     - ``number``
     - The number of documents in the collection that were modified by
       the update operation.

   * - ``result.upsertedId``
     - ``string``
     - The ``_id`` value of the document inserted by an upsert
       operation. This value is only present when the ``upsert`` option
       is enabled and the update query does not match any documents.

.. _mongodb-collection-deleteOne:

collection.deleteOne()
----------------------

.. method:: collection.deleteOne()
   :hidden:

Removes a single document from a collection.

.. include:: /functions/mongodb/api/snippets/deleteOne.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript

   deleteOne(
      query: object,
      options?: object
   ): Promise<object>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``query``
     - ``object``
     - .. include:: /functions/mongodb/api/parameter-query.rst
   
   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
   
   * - ``options.session``
     - ``ClientSession``
     - .. include:: /functions/mongodb/api/parameter-options-session.rst

Return Value
~~~~~~~~~~~~

The ``collection.deleteOne()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that
resolves to a document that describes the delete operation.

.. code-block:: typescript

   Promise<object>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65

   * - Value
     - Type
     - Description

   * - ``result.deletedCount``
     - ``number``
     - The number of documents in the collection that were deleted by
       the delete operation.

.. _mongodb-collection-deleteMany:

collection.deleteMany()
-----------------------

.. method:: collection.deleteMany()
   :hidden:

Remove one or more documents from a collection.

.. include:: /functions/mongodb/api/snippets/deleteMany.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript

   deleteMany(
      query: object,
      options?: object
   ): Promise<object>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``query``
     - ``object``
     - .. include:: /functions/mongodb/api/parameter-query.rst
   
   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
  
   * - ``options.session``
     - ``ClientSession``
     - .. include:: /functions/mongodb/api/parameter-options-session.rst

Return Value
~~~~~~~~~~~~

The ``collection.deleteMany()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that
resolves to a document that describes the delete operation.

.. code-block:: typescript

   Promise<object>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65

   * - Value
     - Type
     - Description

   * - ``result.deletedCount``
     - ``number``
     - The number of documents in the collection that were deleted by
       the delete operation.

.. _mongodb-collection-aggregate:

collection.aggregate()
----------------------

.. method:: collection.aggregate()
   :hidden:

Executes an :manual:`aggregation </aggregation>` pipeline and returns a
cursor that allows you to access the pipeline's output documents.

.. include:: /functions/mongodb/api/snippets/aggregate.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript

   aggregate(
      pipeline: object[],
      options?: object
   ): Cursor

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``pipeline``
     - ``object[]``
     - An array of one or more :manual:`aggregation pipeline stages
       </reference/operator/aggregation-pipeline>`.
       
       .. include:: /mongodb/supported-aggregation-stages.rst
   
   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
   
   * - ``options.session``
     - ``ClientSession``
     - .. include:: /functions/mongodb/api/parameter-options-session.rst

Return Value
~~~~~~~~~~~~

The ``collection.aggregate()`` method returns a cursor object
that points to any documents output from the final stage of the
aggregation pipeline. You can manipulate and access documents
in the aggregation result set with the following methods:

.. list-table::
   :header-rows: 1
   :widths: 40 60
    
   * - Method
     - Description
    
   * - ``cursor.next()``
     - Iterates the cursor and returns a :mdn:`Promise
       <Web/JavaScript/Reference/Global_Objects/Promise>` that resolves
       to the next document in the cursor. If the cursor is exhausted,
       the promise resolves to ``undefined``.
    
       .. example::
    
          .. code-block:: javascript
    
             collection.aggregate(pipeline).next()
               .then(doc => console.log("next document", doc))
    
   * - ``cursor.toArray()``
     - Iterates the cursor to exhaustion and returns a :mdn:`Promise
       <Web/JavaScript/Reference/Global_Objects/Promise>` that
       resolves to an array that contains all of the iterated documents.
    
       .. example::
    
          .. code-block:: javascript
    
             collection.aggregate(pipeline).toArray()
               .then(docs => console.log("all documents", docs))
    
   * - ``cursor.skip(amount)``
     - Specifies a number of matching documents to omit from the
       aggregation result set. MongoDB omits documents from the result
       set in sort order until it has skipped the specified number.
             
       .. note::
                
          You cannot call this method after retrieving one or more
          documents using ``cursor.next()`` or ``cursor.toArray()``.

.. note::

   You cannot return a cursor from a function. Instead, evaluate the
   cursor using ``cursor.next()`` or ``cursor.toArray()`` and return the
   result.

.. _mongodb-collection-count:

collection.count()
------------------

.. method:: collection.count()
   :hidden:

Returns the number of documents in a collection or view that match a
given query.

.. include:: /functions/mongodb/api/snippets/count.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript

   count(
      query?: object,
      options?: object
   ): Promise<number>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``query``
     - ``object``
     - Optional.
       
       .. include:: /functions/mongodb/api/parameter-query.rst
   
   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
   
   * - ``options.session``
     - ``ClientSession``
     - Optional. A session object that represents the transaction
       context in which the operation occurs. To learn more, see
       :ref:`Transactions <transactions>`.

Return Value
~~~~~~~~~~~~

The ``collection.count()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that
resolves to the integer number of documents in the collection
that match the query.

.. code-block:: javascript

   Promise<number>

.. list-table::
   :header-rows: 1
   :widths: 20 50

   * - Value
     - Description

   * - :guilabel:`Count Result`
       
       | ``numDocs: <integer>``

     - The number of documents in the collection that match the provided
       query.

.. _mongodb-collection-distinct:

collection.distinct()
---------------------

.. method:: collection.distinct()
   :hidden:

Finds documents that match a given query filter and returns a list of
distinct values for a specific field across all matched documents.

.. code-block:: javascript
   :emphasize-lines: 4-8
   :linenos:

   const taskCollection = context.services.get("mongodb-atlas")
     .db("tracker").collection("tasks");

   return taskCollection.distinct("status", {})
     .then(results => {
         console.log(JSON.stringify(results));
         console.log(results.length);
     })
     .catch(err => console.error(err))

Parameters
~~~~~~~~~~

.. code-block:: typescript

   distinct(
      field: string,
      query: object,
      options?: object
   ): Promise<any[]>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``field``
     - ``string``
     - The name of the field in each document from which to find
       distinct values.
   
   * - ``query``
     - ``object``
     - .. include:: /functions/mongodb/api/parameter-query.rst
   
   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
   
   * - ``options.session``
     - ``ClientSession``
     - .. include:: /functions/mongodb/api/parameter-options-session.rst

Return Value
~~~~~~~~~~~~

The ``collection.distinct()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that resolves to an
array of distinct values.

.. code-block:: typescript

   Promise<any[]>

.. _mongodb-collection-bulkWrite:

collection.bulkWrite()
----------------------

.. method:: collection.bulkWrite()
   :hidden:

Runs multiple insert, update, and delete operations on a collection with
a single call. Within the ``bulkWrite()`` function, you can specify one
or more of the following write operations:

- insertOne
- updateOne
- updateMany
- deleteOne
- deleteMany
- replaceOne

.. note::

   A bulk write can only operate on a single collection.

.. include:: /functions/mongodb/api/snippets/bulkWrite.rst

Parameters
~~~~~~~~~~

.. code-block:: typescript
   
   bulkWrite(
     operations: object[],
     options?: object
   ): Promise<null>

.. list-table::
   :header-rows: 1
   :widths: 20 15 65
   
   * - Parameter
     - Type
     - Description
   
   * - ``operations``
     - ``object[]``
     - An array of bulkWrite operations to perform. Examples of
       supported operations include the following:
       
       .. code-block:: javascript
          
          { insertOne: { document: { a: 1 } } }
       
          { updateOne: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }
       
          { updateMany: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }
       
          { deleteOne: { filter: {c:1} } }
       
          { deleteMany: { filter: {c:1} } }
       
          { replaceOne: { filter: {c:3}, replacement: {c:4}, upsert:true}}
   
   * - ``options``
     - ``object``
     - An object that specifies additional configuration options.
   
   * - ``options.ordered``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-options-ordered.rst
   
   * - ``options.bypassDocumentValidation``
     - ``boolean``
     - .. include:: /functions/mongodb/api/parameter-options-bypassDocumentValidation.rst
   
   * - ``options.session``
     - ``ClientSession``
     - .. include:: /functions/mongodb/api/parameter-options-session.rst

Return Value
~~~~~~~~~~~~

The ``collection.bulkWrite()`` function returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that resolves to
``null``.

.. code-block:: typescript

   Promise<null>
