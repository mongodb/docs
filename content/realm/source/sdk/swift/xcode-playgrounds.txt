.. meta::
   :robots: noindex, nosnippet

.. _swift-xcode-playgrounds:

==============================
Use Realm in Xcode Playgrounds
==============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Prerequisites
-------------

You can only use Swift packages within Xcode projects that have at least one 
scheme and target. To use Realm in Xcode Playgrounds, you must first have 
an Xcode project where you have :ref:`Installed the Swift SDK <ios-install>`.

Create a Playground
-------------------

.. seealso:: Other quick starts and tutorials

   For more guidance on getting started with Realm and Swift or SwiftUI,
   see any of these quick starts or tutorials:

   - :ref:`Quick Start <ios-client-quick-start>`
   - :ref:`Quick Start with SwiftUI <ios-swiftui-quick-start>`
   - :ref:`iOS Tutorial <ios-swift-tutorial>`

Within a project, go to :guilabel:`File` > :guilabel:`New` > 
:guilabel:`Playground`. Select the type of Playground you want. For this 
example, we've used a Blank iOS Playground.

.. figure:: /images/xcode-playground-blank-ios.png
   :alt: Screenshot of Xcode Playground iOS types with Blank selected
   :lightbox:

Name and save the playground in the root of your 
project. Be sure to add it to the project:

.. figure:: /images/xcode-playgrounds-create-in-project.png
   :alt: Screenshot of the File Navigator with a Playground filename and the project selected
   :lightbox:

You should see your new Playground in your Project navigator.

.. figure:: /images/xcode-playground-see-playground-in-project-navigator.png
   :alt: Screenshot of a file named RealmPlayground.playground in the Xcode Project navigator
   :lightbox:

Import Realm
------------

Add the following import statement to use Realm in the playground:

.. literalinclude:: /examples/generated/code/start/LocalOnlyCompleteQuickStart.snippet.import-realmswift.swift
   :language: swift

Experiment with Realm
---------------------

Experiment with Realm. For this example, we'll: 

- :ref:`Define a new Realm object type <ios-define-a-new-object-type>`
- :ref:`Create a new object of that type and write it to realm <ios-create-a-new-object>` 
- :ref:`Query objects of the type, and filter them <ios-query-all-objects-of-a-given-type>`

.. code-block:: swift

   class Drink: Object {
       @Persisted var name = ""
       @Persisted var rating = 0
       @Persisted var source = ""
       @Persisted var drinkType = ""
   }

   let drink = Drink(value: ["name": "Los Cabellos", "rating": 10, "source": "AeroPress", "drinkType": "Coffee"])

   let realm = try! Realm(configuration: config)

   try! realm.write {
       realm.add(drink)
   }

   let drinks = realm.objects(Drink.self)

   let coffeeDrinks = drinks.where {
       $0.drinkType == "Coffee"
   }

   print(coffeeDrinks.first?.name)

Managing the Realm File in Your Playground
------------------------------------------

When you work with a :ref:`default realm <ios-default-and-file-url-realm>` 
in a Playground, you might run into a situation where you need to delete the 
realm. For example, if you are experimenting with an object type and add 
properties to the object, you may get an error that you must migrate the
realm. 

You can specify :swift-sdk:`Realm.configuration 
<Structs/Realm/Configuration.html>` details to open the file at a specific 
path, and delete the realm if it exists at the path.

.. code-block:: swift

   var config = Realm.Configuration()

   config.fileURL!.deleteLastPathComponent()
   config.fileURL!.appendPathComponent("playgroundRealm")
   config.fileURL!.appendPathExtension("realm")

   if Realm.fileExists(for: config) {
       try Realm.deleteFiles(for: config)
       print("Successfully deleted existing realm at path: \(config.fileURL!)")
   } else {
       print("No file currently exists at path")
   }

Alternately, you can :ref:`open the realm in-memory only 
<ios-open-an-in-memory-realm>`, or use the 
:swift-sdk:`deleteRealmIfMigrationNeeded <Structs/Realm/Configuration.html#/s:10RealmSwift0A0V13ConfigurationV06deleteA17IfMigrationNeededSbvp>`
method to automatically delete a realm when migration is needed.
