===
top
===

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: top

   :dbcommand:`top` is an administrative command that returns usage statistics 
   for each collection. You can use :dbcommand:`top` metrics to compare the 
   relative performance of your collections against each other.

   .. important::

      The :dbcommand:`top` command must be run against a
      :ref:`mongod <mongod>` instance. Running
      :dbcommand:`top` against a :ref:`mongos <mongos>`
      instance returns an error. 

Definition
----------
   
For every collection, :dbcommand:`top` returns the amount of ``time``, in 
microseconds, that each :ref:`event <event-types>` takes to execute and a 
``count`` of how many times each event has executed. The ``time`` and 
``count`` metrics reset only after you restart your :binary:`~bin.mongod` 
instance.

Redaction
~~~~~~~~~

When using :ref:`Queryable Encryption <qe-manual-feature-qe>`, the
``top`` command only returns the collection name.

Compatibility
-------------

This command is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-no-serverless.rst

.. include:: /includes/fact-environments-onprem-only.rst

Syntax
------

Issue the :dbcommand:`top` command against the :term:`admin database`:

.. code-block:: javascript

   db.runCommand(
      { 
        top: 1 
      }
   )

.. _event-types:

Event Fields 
------------

The :dbcommand:`top` command returns usage statistics for the following event 
fields: 

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Field
     - Description

   * - ``total`` 
     - The combination of all ``readLock`` and ``writeLock`` operations. 
     
   * - ``readLock``
     - Usage statistics for operations that use read locks. These operations 
       include but are not limited to queries and aggregations. 

   * - ``writeLock``
     - Usage statistics for operations that use write locks. These operations 
       include but are not limited to inserting, updating, and removing 
       documents.

   * - ``queries``
     - Usage statistics for query operations such as :dbcommand:`find`. The 
       ``queries.time`` and ``queries.count`` fields also update 
       ``readLock.time`` and increment ``readLock.count``.

   * - ``getmore`` 
     - Usage statistics for :dbcommand:`getMore` operations. The 
       ``getmore.time`` and ``getmore.count`` fields also update 
       ``readLock.time`` and increment ``readLock.count``.

   * - ``insert``
     - Usage statistics for :dbcommand:`insert` operations. The 
       ``insert.time`` and ``insert.count`` fields also update 
       ``readLock.time`` and increment ``readLock.count``.

   * - ``update`` 
     - Usage statistics for :dbcommand:`update` operations. The 
       ``update.time`` and ``update.count`` fields also update 
       ``readLock.time`` and increment ``readLock.count``.

   * - ``remove`` 
     - Usage statistics for :dbcommand:`delete` operations. The 
       ``remove.time`` and ``remove.count`` fields also update 
       ``readLock.time`` and increment ``readLock.count``.

   * - ``commands`` 
     - Usage statistics for operations such as aggregations, index creation, 
       and index removal. Depending on the type of command, the 
       ``commands.time`` and ``commands.count`` fields update the ``writeLock`` 
       fields or the ``readLock`` fields. 
       
       For example, aggregation operations increment ``readLock.time`` and 
       ``readLock.count``. Index creation increments ``writeLock.time`` 
       and ``writeLock.count``.

Example
-------

The output of the :dbcommand:`top` command resembles the following output:

.. code-block:: javascript

   {
     "totals" : {
        note: "all times in microseconds",
        "records.users" : {
                     "total" : {
                             "time" : 305277,
                             "count" : 2825
                     },
                     "readLock" : {
                             "time" : 305264,
                             "count" : 2824
                     },
                     "writeLock" : {
                             "time" : 13,
                             "count" : 1
                     },
                     "queries" : {
                             "time" : 305264,
                             "count" : 2824
                     },
                     "getmore" : {
                             "time" : 0,
                             "count" : 0
                     },
                     "insert" : {
                             "time" : 0,
                             "count" : 0
                     },
                     "update" : {
                             "time" : 0,
                             "count" : 0
                     },
                     "remove" : {
                             "time" : 0,
                             "count" : 0
                     },
                     "commands" : {
                             "time" : 0,
                             "count" : 0
                     }
             }
   }

Learn More 
----------

- :ref:`faq-concurrency-locking`
