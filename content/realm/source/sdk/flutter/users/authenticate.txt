.. meta::
   :robots: noindex, nosnippet

.. _flutter-authenticate:

================================
Authenticate Users - Flutter SDK
================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Atlas App Services provides an API for authenticating users using any enabled
authentication provider. Instantiate a :flutter-sdk:`Credentials <realm/Credentials-class.html>`
object and pass it to :flutter-sdk:`App.logIn() <realm/App/logIn.html>`
to authenticate and create a :flutter-sdk:`User <realm/User-class.html>`
object for that user.
Each authentication provider corresponds to a static constructor method
used to instantiate ``Credentials`` objects for that authentication provider.

Before You Begin
----------------

#. :ref:`Create an App Services App <create-a-realm-app>`.
#. Enable and configure one or more App Services :ref:`authentication providers <authentication-providers>`.

.. _flutter-register:

Register a New User Account
---------------------------

Realm registers accounts differently depending on the authentication provider:

- You do not need to register anonymous users.
- To register an email/password user, refer to :ref:`Email/Password User
  Registration <flutter-manage-email-password-users-register>`.
- If you are using Google, Facebook, Apple, or Custom JWT authentication,
  registration is handled by these third-party services.

.. _flutter-login:

Log In
------

You can authenticate users with :flutter-sdk:`App.logIn() <realm/App/logIn.html>`.

If successful, ``app.logIn`` returns a ``User`` object.

.. _flutter-login-anonymous:

Anonymous User
~~~~~~~~~~~~~~

The :ref:`anonymous authentication provider <anonymous-authentication>`
enables users to log in to your application with short-term accounts
that store no persistent personal information. To log in with anonymous
authentication, create an anonymous credential by calling
:flutter-sdk:`Credentials.anonymous() <realm/Credentials/Credentials.anonymous.html>`
and then pass the generated credential to
``app.logIn``.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.anonymous-credentials.dart
   :language: dart

If you want more than one anonymous user, set ``reuseCredentials: false``
when creating additional anonymous credentials.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.multiple-anonymous-credentials.dart
   :language: dart

.. _flutter-login-email-password:

Email/Password User
~~~~~~~~~~~~~~~~~~~

The :ref:`Email/Password authentication provider <email-password-authentication>`
enables users to log in to your application with an email username and
a password. To log in with email/password authentication, create an
email/password credential by calling :flutter-sdk:`Credentials.emailPassword() <realm/Credentials/Credentials.emailPassword.html>`
with the user's email and password.
Then pass the credential to ``app.logIn``.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.email-password-credentials.dart
   :language: dart

To learn more about the complete flow of using App Services Email/Password
authentication, refer to :ref:`Email/Password Users
<flutter-manage-email-password-users>`.

.. _flutter-login-custom-jwt:

Custom JWT User
~~~~~~~~~~~~~~~

If you have configured the :ref:`Custom JWT authentication provider
<custom-jwt-authentication>`, you can log in using JWT credentials from
an external authentication provider.

To log in with Custom JWT authentication, create a JWT credential by calling
:flutter-sdk:`Credentials.jwt() <realm/Credentials/Credentials.jwt.html>`
on a JWT string. Then pass the credential to ``app.logIn``.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.custom-jwt-credentials.dart
   :language: dart

.. _flutter-login-api-key:

API Key User
~~~~~~~~~~~~

If you have enabled :ref:`API Key authentication <api-key-authentication>`,
you can log in using either a client or server API key.

To log in with API key authentication, create an :flutter-sdk:`ApiKey <realm/ApiKey-class.html>`
credential by calling :flutter-sdk:`Credentials.apiKey() <realm/Credentials/Credentials.apiKey.html>`
on an API key string. Then pass the credential to ``app.logIn()``.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.api-key-auth.dart
   :language: dart

To generate a server API key to use in your credentials,
refer to the :ref:`Create a Server API Key documentation <api-key-authentication-server-api-key>`.

To work with user API keys with the same permissions
as the currently logged in user, use the :flutter-sdk:`User.apiKeys
<realm/User/apiKeys.html>` client.
You can create, fetch, delete, disable, and enable user API keys.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.work-with-api-keys.dart
   :language: dart

.. _flutter-login-custom-function:

Custom Function User
~~~~~~~~~~~~~~~~~~~~

If you have configured the
:ref:`Custom Function authentication provider <custom-function-authentication>`,
you can log in using custom authentication logic handled by an Atlas Function.

To log in with Custom Function authentication, pass a stringified JSON with
your custom arguments to :flutter-sdk:`Credentials.function() <realm/Credentials/Credentials.function.html>`.
Then pass the credential to ``app.logIn``.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.custom-function-credentials.dart
   :language: dart

.. _flutter-login-facebook:

Facebook User
~~~~~~~~~~~~~

If you have configured the :ref:`Facebook authentication provider <facebook-authentication>`,
you can log in using an existing Facebook account.

To log in with Facebook authentication, pass a Facebook access token to
:flutter-sdk:`Credentials.facebook() <realm/Credentials/Credentials.facebook.html>`.
Then pass the credential to ``app.logIn``.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.facebook-credentials.dart
   :language: dart

.. include:: /includes/note-facebook-profile-picture-url.rst

.. _flutter-login-google:

Google User
~~~~~~~~~~~

If you have configured the :ref:`Google authentication provider <google-authentication>`,
you can log in using an existing Google account.

To log in with a Google authentication code, pass a Google authentication code to
:flutter-sdk:`Credentials.googleAuthCode() <realm/Credentials/Credentials.googleAuthCode.html>`.
Then pass the credential to ``app.logIn``.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.google-auth-code-credentials.dart
   :language: dart

To log in with a Google ID token, pass a Google ID token to
:flutter-sdk:`Credentials.googleIdToken() <realm/Credentials/Credentials.googleIdToken.html>`.
Then pass the credential to ``app.logIn``.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.google-id-token-credentials.dart
   :language: dart

.. _flutter-login-apple:

Apple User
~~~~~~~~~~

If you have configured the :ref:`Sign-in with Apple authentication provider <apple-id-authentication>`,
you can log in using an existing Apple account.

To log in with Apple authentication, pass an Apple access token to
:flutter-sdk:`Credentials.apple() <realm/Credentials/Credentials.apple.html>`.
Then pass the credential to ``app.logIn``.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.apple-credentials.dart
   :language: dart

.. include:: /includes/authorization-appleidcredential-string.rst

Refresh Token Expiration
------------------------

.. include:: /includes/refresh-token-expiry.rst

.. _flutter-logout:

Log a User Out
--------------

You can log out any user, regardless of the authentication provider used
to log in, using :flutter-sdk:`User.logOut() <realm/User/logOut.html>`. This method:

- Deletes locally stored user credentials from the device

- Immediately halts any synchronization to and from the user's realms

Because logging out halts synchronization, you should only log out after
all local Realm updates have uploaded to the server.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.log-out.dart
   :language: dart

.. _flutter-retrieve-current-user:

Retrieve Current User
---------------------

Once you have an authenticated user, you can retrieve the User object with the
:flutter-sdk:`App.currentUser <realm/App/currentUser.html>`
property. The ``currentUser`` object is persisted in local storage, so even if
the app shuts down after the initial authentication, you do not need to call
``logIn`` again (unless the user logged out).

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.retrieve-current-user.dart
   :language: dart
