.. facet::
   :name: programming_language
   :values: shell, python

.. _avs-with-unionwith:

=================================================
How to Combine Multiple ``$vectorSearch`` Queries
=================================================

.. default-domain:: mongodb

.. meta::
   :keywords: cross-field search, queries across fields, queries across different embeddings
   :description: Run $vectorSearch queries inside $unionWith pipeline to perform different types of search.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Starting in v8.1, the MongoDB ``$rankFusion`` aggregation stage 
supports :pipeline:`$vectorSearch` inside the input pipeline. You can
use ``$rankFusion`` to  combine multiple
:pipeline:`$vectorSearch` queries against the same collection in the
same pipeline. ``$rankFusion`` first executes all input pipelines
independently, and then de-duplicates and combines the input pipeline
results into a final ranked results set. To run multiple 
:pipeline:`$vectorSearch` queries against multiple collections in a
single pipeline, use :pipeline:`$unionWith`.

.. _avs-unionwith-use-cases:

Use Cases and Benefits 
----------------------

You can run the following types of :pipeline:`$vectorSearch` queries by
using the ``$rankFusion`` pipeline: 

- Run multiple :pipeline:`$vectorSearch` queries for **similar terms
  against the same field**.

  This allows you to perform a comprehensive search of your dataset for
  similar terms in the same query.

- Run multiple :pipeline:`$vectorSearch` queries for the **same term
  against multiple fields**.

  This allows you to search multiple fields in your dataset to determine
  which fields return the best results for the query.

- Run multiple :pipeline:`$vectorSearch` queries for the **same term
  against embeddings from different embedding models**.

  This allows you to search embeddings from different embedding models
  to determine the semantic interpretation differences between the
  different models.

About the Tutorial 
------------------

This tutorial demonstrates how to run different :pipeline:`$vectorSearch`
queries against the ``embedded_movies`` collection in the
``sample_mflix`` database. This collection includes the following fields: 

- ``plot_embedding``, which contains embeddings created by using OpenAI's
  ``text-embedding-ada-002`` embedding model.
- ``plot_embedding_voyage_3_large``, which contains embeddings created
  by using |voyage|'s ``voyage-3-large`` embedding model. You use this
  field for all sample queries in this tutorial. 

For the second query listed in :ref:`avs-unionwith-use-cases`, you must
generate embeddings for another field. To try the sample query for this
use case, complete the steps in :ref:`avs-unionwith-generate-embeddings`. 

This tutorial walks you through the following steps:

1. Set up a {+avs+} index on the ``sample_mflix.embedded_movies``
   collection. 
#. Run :pipeline:`$vectorSearch` query with ``$rankFusion`` to
   perform the following searches:

   - Search the ``plot_embedding_voyage_3_large`` field for movie plots
     that contain movies with plots similar to ``light-hearted comedy
     with ghosts`` and ``slapstick humor with paranormal events``.  
   - Search the ``plot_embedding_voyage_3_large`` and
     ``title_embedding`` fields for movies with plots similar to
     ``battle between good and evil`` using embeddings from |voyage|. 
   - Search the ``plot_embedding`` and ``plot_embedding_voyage_3_large`` 
     fields for movies with plots similar to ``journey across lands``
     using embeddings from OpenAI and |voyage| respectively.  

Before you begin, ensure that your |service| {+cluster+} meets the 
requirements described in the :ref:`avs-hybrid-search-prereqs`.

.. note:: 

   To run a :pipeline:`$vectorSearch` query with ``$rankFusion``,
   your {+cluster+} must run MongoDB v8.1 or higher.

.. _avs-unionwith-generate-embeddings:

Generate the Embeddings 
-----------------------

To query for the same term against multiple fields, you must prepare the
dataset to include embeddings for different fields. This section
demonstrates how to generate embeddings for the ``title`` field in the
collection by using |voyage|'s ``voyage-3-large`` embedding model.

You can skip this section if you want to only try the other sample use
cases.

Prerequisites
~~~~~~~~~~~~~

- An environment to run interactive Python notebooks such as `VS Code
  <https://code.visualstudio.com/docs/datascience/jupyter-notebooks>`__
  or `Colab <https://colab.research.google.com>`__. 
- API key for |voyage| embedding models. 

Procedure 
~~~~~~~~~

In this section, you generate embeddings for the ``title`` field in the
``embedded_movies`` collection by using |voyage|'s ``voyage-3-large``
embedding model. 

.. include:: /includes/avs/unionwith-rankfusion/steps-create-embeddings-voyageai.rst

Create the {+avs+} Index  
--------------------------------------

In this section, you create a {+avs+} index on the
``sample_mflix.embedded_movies`` namespace. The section demonstrates
an index definition that can be used for running various queries. Before
creating the index, complete the procedure to generate the embeddings.

.. include:: /includes/avs/unionwith-rankfusion/steps-create-index.rst 

Run the {+avs+} Queries 
-------------------------------------

In this section, you query the ``embedded_movies`` collection in the
``sample_mflix`` database by using the index named
``multiple-vector-search`` that you created on the collection.

.. include:: /includes/avs/unionwith-rankfusion/steps-run-queries-shell.rst 
