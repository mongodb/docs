.. _kotlin-fundamentals-change-streams:
.. _retrieve-watch:

===================
Open Change Streams
===================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, monitoring, aggregation

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you can learn how to use a **change stream** to monitor
real-time changes to your database. A change stream is a {+mdb-server+}
feature that allows your application to subscribe to data changes on a single
collection, database, or deployment. You can specify a set of aggregation
operators to filter and transform the data your application receives.
When connecting to MongoDB v6.0 or later, you can configure the events
to include the document data before and after the change.

Learn how to open and configure your change streams in the following
sections:

- :ref:`<kotlin-change-stream-open>`
- :ref:`<kotlin-change-stream-aggregation>`
- :ref:`<kotlin-change-stream-split-large-event>`
- :ref:`<kotlin-change-stream-configure-pre-post>`

.. _kotlin-change-stream-open:

Open a Change Stream
--------------------

You can open a change stream to subscribe to specific types of data changes
and produce change events in your application.

To open a change stream, call the ``watch()`` method on an instance of a
``MongoCollection``, ``MongoDatabase``, or ``MongoClient``.

.. important::

   Standalone MongoDB deployments don't support change streams because
   the feature requires a replica set oplog. To learn more about the oplog,
   see the :ref:`<replica-set-oplog>` server manual page.

The object on which you call the ``watch()`` method on determines the scope of
events that the change stream listens for.

If you call ``watch()`` on a ``MongoCollection``, the change stream monitors
a collection.

If you call ``watch()`` on a ``MongoDatabase``, the change stream monitors all
collections in that database.

If you call ``watch()`` on a ``MongoClient``, the change stream monitors all
changes in the connected MongoDB deployment.

Example
~~~~~~~

The following code example shows how to open a change stream and print
change stream events whenever the data in the collection changes:

.. literalinclude:: /examples/generated/ChangeStreamsTest.snippet.open-change-stream.kt
   :language: kotlin

An insert operation on the collection should produce output similar to the
following text:

.. code-block::
   :copyable: false

   Received a change event: ChangeStreamDocument{
      operationType='insert',
      resumeToken={"_data": "825EC..."},
      namespace=myDb.myChangeStreamCollection,
      ...
   }

For a runnable example, see the :ref:`<kotlin-usage-watch>` usage example page.

To learn more about the ``watch()`` method, see the following API
documentation:

- `MongoCollection.watch() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/watch.html>`__
- `MongoDatabase.watch() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-database/watch.html>`__
- `MongoClient.watch() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-client/watch.html>`__

.. _kotlin-change-stream-aggregation:

Apply Aggregation Operators to your Change Stream
-------------------------------------------------

You can pass an aggregation pipeline as a parameter to the ``watch()`` method
to specify which change events the change stream receives.

To learn which aggregation operators your {+mdb-server+} version supports, see
:ref:`<change-stream-modify-output>`.

Example
~~~~~~~

The following code example shows how you can apply an aggregation pipeline to
configure your change stream to receive change events for only insert and
update operations:

.. literalinclude:: /examples/generated/ChangeStreamsTest.snippet.apply-aggregation-operations-to-change-stream.kt
   :language: kotlin

When the change stream receives an update change event, the preceding code
example outputs the following text:

.. code-block:: text
   :copyable: false

   Received a change event: ChangeStreamDocument{
   operationType=update,
   resumeToken={...},
   ...

.. _kotlin-change-stream-split-large-event:

Split Large Change Stream Events
--------------------------------

When connecting to MongoDB v7.0 or later,
you can use the ``$changeStreamSplitLargeEvent`` aggregation operator to
split event documents that exceed 16 MB into smaller fragments.

Use the ``$changeStreamSplitLargeEvent`` operator only when you expect
the change stream events to exceed the document size limit. For
example, you might use this feature if your application requires full
document pre-images or post-images.

A ``$changeStreamSplitLargeEvent`` aggregation stage returns
fragments sequentially. You can access the fragments by using a change
stream cursor. Each fragment document includes a ``splitEvent`` object that
contains the following fields:

.. list-table::
   :header-rows: 1
   :widths: 35 65

   * - Field
     - Description

   * - ``fragment``
     - The index of the fragment, starting at ``1``

   * - ``of``
     - The total number of fragments that compose the split event

The following example opens a change stream that includes an aggregation
pipeline with an ``$changeStreamSplitLargeEvent`` aggregation stage to
split large events:

.. literalinclude:: /examples/generated/ChangeStreamsTest.snippet.split-large-change-stream.kt
   :language: kotlin

.. note::

   You can have only one ``$changeStreamSplitLargeEvent`` stage in your
   aggregation pipeline, and it must be the last stage in the pipeline.

To learn more about the ``$changeStreamSplitLargeEvent`` aggregation operator,
see :manual:`$changeStreamSplitLargeEvent (aggregation)
</reference/operator/aggregation/changeStreamSplitLargeEvent/>` in the
Server manual.

.. _kotlin-change-stream-configure-pre-post:

Include Pre-images and Post-images
----------------------------------

You can configure the change event to contain or omit the following data:

- The **pre-image** which is a document that represents the version of the
  document before the operation if it exists
- The **post-image** which is a document that represents the version of the
  document after the operation if it exists

To receive change stream events that include a pre-image or post-image, you
must connect to a MongoDB v6.0 or later deployment and set up the following:

- Enable pre-images and post-images for the collection on your MongoDB
  deployment.

  .. tip::

     To learn how to enable these on your deployment, see the
     :manual:`Change Streams with Document Pre- and Post-Images </changeStreams/#change-streams-with-document-pre--and-post-images>`
     MongoDB server manual page.

     To learn how to instruct the driver to create a collection with pre-images
     and post-images enabled, see the :ref:`<kotlin-change-stream-pre-post-collection>`
     section.

- Configure your change stream to retrieve either or both the pre-images and
  post-images.

  .. tip::

     To configure your change stream to include the pre-image, see
     the :ref:`<kotlin-pre-image-example>`.

     To configure your change stream to include the post-image, see the
     :ref:`<kotlin-post-image-example>`.

.. _kotlin-change-stream-pre-post-collection:

Create a Collection with Pre-Image and Post-Images Enabled
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To create a collection with the pre-image and post-image option using the
driver, specify an instance of  ``ChangeStreamPreAndPostImagesOptions``
and call the ``createCollection()`` method as shown in the following example:

.. literalinclude:: /examples/generated/ChangeStreamsTest.snippet.create-collection-with-pre-and-post-images.kt
   :language: kotlin

You can change the pre-image and post-image option in an existing collection
by running the ``collMod`` command from the MongoDB Shell. To learn how to
perform this operation, see the :manual:`collMod </reference/command/collMod#change-streams-with-document-pre--and-post-images>`
server manual documentation.

.. warning::

   When you modify this option on a collection, any change streams open on
   that collection in your application may fail if configured to require
   receiving the pre-image or post-image.

.. _kotlin-pre-image-example:

Pre-image Configuration Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following code example shows how you can configure a change stream to
include the pre-image and output the results:

.. literalinclude:: /examples/generated/ChangeStreamsTest.snippet.pre-image-configuration.kt
   :language: kotlin

The preceding example configures the change stream to use the
``FullDocumentBeforeChange.REQUIRED`` option. This configures the change
stream to return pre-images for replace, update, and delete change events and
for the server to raise an error if the pre-image is unavailable.

Suppose an application updated the ``latestVersion`` field of a document in a
collection of software library dependencies from the value of ``2.0.0`` to
``2.1.0``. The corresponding change event output by the preceding code example
should resemble the following text:

.. code-block:: text
   :emphasize-lines: 7
   :copyable: false

   Received a change event: ChangeStreamDocument{
      operationType=update,
      resumeToken={...}
      namespace=software.libraries,
      destinationNamespace=null,
      fullDocument=null,
      fullDocumentBeforeChange=Document{{_id=6388..., latestVersion=2.0.0, ...}},
      ...

For a list of options, see the `FullDocumentBeforeChange <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/changestream/FullDocumentBeforeChange.html>`__
API documentation.

.. _kotlin-post-image-example:

Post-image Configuration Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following code example shows how you can configure a change stream to
include the post-image and output the results:

.. literalinclude:: /examples/generated/ChangeStreamsTest.snippet.post-image-configuration.kt
   :language: kotlin

The preceding example configures the change stream to use the
``FullDocument.UPDATE_LOOKUP`` option. This configures the change
stream to return both the deltas between the original and changed document
and a copy of the document at some point in time after the change occurred.

Suppose an application updated the ``population`` field of a document from
the value of ``800`` to ``950`` in a collection of city census data. The
corresponding change event output by the preceding code example should
resemble the following text:

.. code-block:: text
   :emphasize-lines: 6
   :copyable: false

   Received a change event: ChangeStreamDocument{
      operationType=update,
      resumeToken={...},
      namespace=censusData.cities,
      destinationNamespace=null,
      fullDocument=Document{{_id=6388..., city=Springfield, population=950, ...}},
      updatedFields={"population": 950}, ...
      ...

For a list of options, see the `FullDocument <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/changestream/FullDocument.html>`__
API documentation.
