============================
Add Members to a Replica Set
============================

.. default-domain:: mongodb

Overview
--------

This is a tutorial explaining how to add an additional node to an
existing replica set.

Before adding new members, note the
:doc:`/administration/replication-architectures` documentation for
more background on replication deployment patterns.

Requirements
------------

#. An active replica set.

#. A new MongoDB system capable of supporting your dataset, accessible by
   the active replica set through the network. 

If neither of these conditions are satisfied, please use the MongoDB
:ref:`installation tutorial <tutorials-installation>` and the
":doc:`/tutorial/deploy-replica-set`" guide instead.

Procedure
---------

For the following procedure, examples are provided using the following
configuration:

- The active replica set: ``rs0``

- The new MongoDB replica set to be added: ``mongodb3.example.net``.

- :program:`mongod` instance running on default port: ``27017``.

- The ``mongodb.conf`` on the new replica set system resembling the following:

.. code-block:: cfg

   port = 27017

   bind_ip = 10.8.0.10

   dbpath = /srv/mongodb/

   logpath = /var/log/mongodb.log

   fork = true

   replSet = rs0

For more documentation of the configuration options used above refer to:
:setting:`dbpath`, :setting:`port`, :setting:`replSet`,
:setting:`bind_ip`, and :setting:`fork`. Consider any additional
:doc:`configuration options </reference/configuration-options>` that
your deployment may require.

#. On the primary node, Start the :program:`mongod` process with the
   following command:

   .. code-block:: sh

      mongod --config /etc/mongodb.conf

   .. note:: 

      The primary node is the only node which can add or remove
      members to the replica set. If you do not know the primary
      node, log into any of the existing members of the current
      replica set by issuing the following command:

      .. code-block:: sh

         mongo mongodb0.example.net
  
      If this instance is not currently the :term:`primary` node, use
      the :func:`db.isMaster()` function to determine which node is in
      the :data:`isMaster.primary` field. Issue the following command.

      .. code-block:: javascript

         db.isMaster()

      Now disconnect from the current client and reconnect to the
      primary node.

#. Now issue the following command to add the new member to the
   replica set.

   .. code-block:: javascript

      rs.add("mongodb3.example.net")

Congratulations! You have successfully expanded an existing replica
set. You can use the :func:`rs.status()` function to provide an
overview of :doc:`replica set status </reference/replica-status>`, or
the :func:`rs.conf()` for the complete :doc:`replica set
configuration </reference/replica-configuration>`.

Production Notes
----------------

- In production deployments you likely want to use and configure a
  :term:`control script` to manage this process based on this command.

- A member can be removed from a set and re-added later. If the
  removed member's data is still relatively fresh, it can recover and
  catch up from its old data set. See the :func:`rs.add()` and
  :func:`rs.remove()` helpers.

- If you have a backup or snapshot of an existing member, you can move
  the data files (i.e. ``/data/db`` or :setting:`dbpath`) to a new
  system and use them to quickly initiate a new member. These files
  must be:

  - clean: the existing dataset must be from a consistent copy of the
    database from a member of the same replica set. See the
    :doc:`/administration/backups` document for more information.

  - recent: the copy must more recent than the oldest operation in the
    :term:`primary` member's :term:`oplog`. The new secondary must be
    able to become current using operations from the primary's oplog.

- There is a maximum of seven :ref:`voting members
  <replica-set-election-internals>` in any replica set. When adding
  more members to a replica set that already has seven votes, you must
  either:

  - add the new member as a :ref:`non-voting members
    <replica-set-non-voting-members>` or,

  - remove votes from an :data:`existing member <members[n].votes>`.
