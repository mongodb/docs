---
title: "Launch ``mongosh``."
ref: launch-mongo-shell
level: 4
content: |

  Configuring client-side field level encryption for Azure Key Vault
  requires a valid Tenant ID, Client ID, and Client Secret.

  To mitigate the risk of these credentials leaking into logs, the
  following procedure passes the values into :binary:`~bin.mongosh`
  using environment variables.

  First, ensure that you have configured the following environment
  variables according to your platform's documentation:

  - ``AZURE_TENANT_ID``
  - ``AZURE_CLIENT_ID``
  - ``AZURE_CLIENT_SECRET``

  Next, create a :binary:`~bin.mongosh` session using the
  :option:`--eval <mongosh --eval>`, :option:`--shell <mongosh --shell>`,
  and :option:`--nodb <mongosh --nodb>` options:

  .. code-block:: bash

      mongosh --eval "
          var AZURE_TENANT_ID = '$AZURE_TENANT_ID'
          var AZURE_CLIENT_ID = '$AZURE_CLIENT_ID'
          var AZURE_CLIENT_SECRET = '$AZURE_CLIENT_SECRET'
        " \
        --shell --nodb

  This example opens :binary:`~bin.mongosh` without a
  connection to a MongoDB database. The ``--eval`` option sets the
  ``AZURE_TENANT_ID``, and ``AZURE_CLIENT_ID``, and
  ``AZURE_CLIENT_SECRET`` variables in :binary:`~bin.mongosh` to
  the value of the corresponding environment variables.

---
title: "Create the Encryption Configuration."
ref: create-encryption-configuration
level: 4
content: |

  In :binary:`~bin.mongosh`, create a new
  :ref:`{+auto-encrypt-options+}` variable for storing the
  client-side field level encryption configuration document:

  .. code-block:: javascript

     var autoEncryptionOpts = {
       "keyVaultNamespace" : "encryption.__dataKeys",
       "kmsProviders" : {
         "azure" : {
           "tenantId" : AZURE_TENANT_ID,
           "clientId" : AZURE_CLIENT_ID,
           "clientSecret" : AZURE_CLIENT_SECRET
         }
       }
     }

---
title: "Connect with Encryption Support."
ref: connect-with-encryption
level: 4
content: |

  In :binary:`~bin.mongosh`, use the :method:`Mongo()<Mongo()>`
  constructor to establish a database connection to the target cluster.
  Specify the :ref:`{+auto-encrypt-options+}` document as
  the second parameter to the :method:`Mongo()<Mongo()>` constructor to
  configure the connection for client-side field level encryption:

  .. code-block:: javascript

     csfleDatabaseConnection = Mongo(
       "mongodb://replaceMe.example.net:27017/?replicaSet=myMongoCluster",
       autoEncryptionOpts
     )

  Replace the ``replaceMe.example.net`` :ref:`URI <mongodb-uri>` with
  the connection string for the target cluster.

  Use the ``csfleDatabaseConnection`` object to access
  :doc:`client-side field level encryption
  </reference/method/js-client-side-field-level-encryption>` shell
  methods.

  For complete documentation on establishing database connections
  configured for client-side field level encryption, see the
  :method:`Mongo()` constructor reference.

---
title: "Create the Key Vault Object."
ref: create-keyvault-object
level: 4
content: |

  Use the :method:`getKeyVault()` method on the
  ``csfleDatabaseConnection`` database connection object to create the
  ``keyVault`` object:

  .. code-block:: javascript

     keyVault = csfleDatabaseConnection.getKeyVault();

  .. important::

     {+csfle+} depends on server-enforced
     uniqueness of key alternate names. :method:`getKeyVault()`
     creates a :ref:`unique index <index-type-unique>` on
     ``keyAltNames`` if one does not exist. Do **not** drop the
     :ref:`unique index <index-type-unique>` created by
     :method:`getKeyVault()`.

---
title: "Create the Data Encryption Key."
ref: create-encryption-key
level: 4
content: |

  Use the :method:`KeyVault.createKey()` method on the ``keyVault``
  object to create a new data encryption key in the key vault:

  .. code-block:: javascript

     keyVault.createKey(
       "azure",
       { keyName: "keyvaultname", keyVaultEndpoint: "endpointname" },
       [ "keyAlternateName" ]
     )

  Where:

  - The first parameter *must* be ``"azure"`` to specify the configured
    Azure Key Vault.

  - The second parameter *must* be a document containing:

    - the name of your `Azure Key Vault
      <https://docs.microsoft.com/en-us/azure/key-vault/general/about-keys-secrets-certificates#vault-name-and-object-name>`__
    - the DNS name of the Azure Key Vault to use (e.g.
      ``my-key-vault.vault.azure.net``)

  - The third parameter *may* be an array of one or more
    ``keyAltNames`` for the data encryption key. Each key alternate
    name *must* be unique. :method:`getKeyVault()` creates a
    :ref:`unique index <index-type-unique>` on ``keyAltNames`` to
    enforce uniqueness on the field if one does not already exist. Key
    alternate names facilitate data encryption key findability.

  .. include:: /includes/fact-createkey-returns-uuid.rst

...
