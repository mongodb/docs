===========================================
Deploy MongoDB with Kerberos Authentication
===========================================

.. default-domain:: mongodb

.. versionadded:: 2.4

.. contents::
   :backlinks: none
   :local:

Overview
--------

MongoDB Enterprise supports authentication using a Kerberos service.
Kerberos is an industry standard authentication protocol for large
client/server system. With Kerberos MongoDB and application ecosystems
can take advantage of existing authentication infrastructure and
processes.

.. note::

   The examples below assume that ``/opt/mongodb/mongod.keytab``
   is a valid keytab file that is only accessible to the user that
   runs the :program:`mongod` process.

.. see-also:: :doc:`/core/kerberos`

If you encounter problems when trying to start :program:`mongod`
or :program:`mongos`, see the :ref:`troubleshooting section
<kerberos-troubleshooting>`.

Procedures
----------

.. _kerberos-create-users:

Grant User Privileges
~~~~~~~~~~~~~~~~~~~~~

To give the Kerberos user principal
``application/reporting@EXAMPLE.NET`` read-only access to the
``records`` database, use the :method:`db.addUser()` method in the
:program:`mongo` shell, as follows:

.. code-block:: javascript

   use $external
   db.addUser({
      user: "application/reporting@EXAMPLE.NET",
      roles: [
         { role: "read", db: "records" }
      ]
   })

The ``$external`` reference allows :program:`mongod` to consult an
external source (i.e. Kerberos) to authenticate this user.

.. seealso:: :doc:`/reference/privilege-documents` and
   :doc:`/reference/user-privileges`.

Remove User Privileges
~~~~~~~~~~~~~~~~~~~~~~

Use the :dbcommand:`dropUser()` command to remove access from a user.

To modify a user document, use :doc:`update </core/write-operations>`
operations on documents in the :data:`system.users
<admin.system.users>` collection.

.. seealso:: :doc:`/reference/privilege-documents` and
   :doc:`/reference/user-privileges`.

Start ``mongod`` with Kerberos Support
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Once you have given appropriate privileges to users and set up a valid
keytab file, start :program:`mongod` using a command in the
following form:

.. code-block:: sh

   env KRB5_KTNAME=/opt/mongodb/mongos.keytab \
   /opt/mongodb/bin/mongos \
   --auth \
   --setParameter authenticationMechanisms=GSSAPI \
   --keyFile /opt/mongodb/mongos.keyfile

Start ``mongos`` with Kerberos Support
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Once you have given appropriate privileges to users and set up a valid 
keytab file, start :program:`mongos` using a command in the
following form:

.. code-block:: sh

   env KRB5_KTNAME=/opt/mongodb/mongos.keytab \
       /opt/mongodb/bin/mongos \
       --configdb shard0.example.net,shard1.example.net,shard2.example.net \
       --setParameter authenticationMechanisms=GSSAPI \
       --keyFile /opt/mongodb/mongos.keyfile

Start mongod or mongos from Official Deb/RPM Files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you installed MongoDB Enterprise using one of the official
``.deb`` or ``.rpm`` packages and you control the :program:`mongod`
instance using the init/upstart scripts included in those packages,
you can set the ``KR5_KTNAME`` variable in the default environment
settings file. For ``.rpm`` packages this file is located at
``/etc/sysconfig/mongod``. For ``.deb`` packages, this file is
``/etc/default/mongodb``. Set the value in a line that resembles
the following:

.. 2.5.3 -- both default files become mongodb

.. code-block:: sh

   export KRB5_KTNAME="<setting>"

Start a Kerberos Session
~~~~~~~~~~~~~~~~~~~~~~~~

Initialize and authenticate a Kerberos session from the command line:

.. code-block:: sh

   kinit

Authenticate a ``mongo`` shell from the command Line
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To authenticate the :program:`mongo` program to the Kerberos principal
name ``application/reporting@EXAMPLE.NET``, use the following command:

.. code-block:: sh

   mongo --authenticationMechanism=GSSAPI
         --authenticationDatabase='$external' \
         --username application/reporting@EXAMPLE.NET

Authenticate a running ``mongo`` Shell
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

From a running :program:`mongo` shell, and use the :method:`db.auth()`
method to authenticate against the special ``$external`` database:

.. code-block:: javascript

   use $external
   db.auth( { mechanism: "GSSAPI", user: "application/reporting@EXAMPLE.NET" } )

Enable the Traditional MongoDB Authentication Mechanism
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For testing and development purposes you can enable both the Kerberos
(i.e. ``GSSAPI``) authentication mechanism in combination with the
traditional MongoDB challenge/response authentication mechanism
(i.e. ``MONGODB-CR``), using the following :setting:`setParameter`
run-time option:

.. code-block:: sh

   mongod --setParameter authenticationMechanisms=GSSAPI,MONGODB-CR

.. warning::

   All :setting:`keyFile` *internal* authentication between members
   of a :term:`replica set` or :term:`sharded cluster` still uses the
   ``MONGODB-CR`` authentication mechanism, even if ``MONGODB-CR``
   is not enabled.

   All client authentication uses Kerberos.

