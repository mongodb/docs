.. meta::
   :robots: noindex, nosnippet

.. _flutter-troubleshooting:

=============================
Troubleshooting - Flutter SDK
=============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _flutter-macos-development:

Use Realm with the macOS App Sandbox
------------------------------------

If you are developing with the Realm Flutter SDK in the macOS App Sandbox,
network requests do not work by default due to built-in macOS security settings.
Network access is required to use Atlas App Services and Device Sync.

To enable network requests, add the following code to **both** the files
:file:`macos/Runner/DebugProfile.entitlements` and :file:`macos/Runner/Release.entitlements`:

.. code-block:: xml
    :emphasize-lines: 2-3

    <!--  Other entitlements -->
    <key>com.apple.security.network.client</key>
    <true/>
    <!--  Other entitlements -->

You can still use Realm locally without adding this network access permission.

For more information about Flutter development for macOS, refer to `Building macOS apps with Flutter
<https://docs.flutter.dev/development/platform-integration/macos/building#setting-up-entitlements>`__
in the Flutter documentation.

.. _flutter-bad-alloc-not-enough-memory-available:

iOS/iPad OS Bad Alloc/Not Enough Memory Available
-------------------------------------------------

.. include:: /includes/ios-ipados-bad-alloc.rst

.. _flutter-connect-old-android:

Connect to App Services Using Android 7 or Older
------------------------------------------------

To use App Services with the Realm SDK on a device using Android 7 or older,
you must add an HTTP client with a custom Let's Encrypt Transport Layer Security (TLS) encryption certificate
to the ``App``.

This is due to a known issue using Flutter on devices running Android 7 or older
to connect to web servers that use Let's Encrypt TLS certificates.
As App Services server uses a Let's Encrypt TLS certificate, you must add the custom certificate.

You can download the Let's Encrypt certificate to add to your app
by clicking this link: https://letsencrypt.org/certs/lets-encrypt-r3.pem

To set up the custom HTTP client, adapt the following code example to your app.

.. literalinclude:: /examples/generated/flutter/app_services_test.snippet.custom-ssl-cert.dart
   :language: dart
