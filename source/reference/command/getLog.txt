======
getLog
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: getLog

   :dbcommand:`getLog` is an administrative command that returns the most
   recent 1024 logged :binary:`~bin.mongod` events. :dbcommand:`getLog` *does not*
   read log data from the :binary:`~bin.mongod` log file. It instead reads data
   from a RAM cache of logged :binary:`~bin.mongod` events. To run
   :dbcommand:`getLog`, use the :method:`db.adminCommand()` method.

   Starting in MongoDB 4.4, :dbcommand:`getLog` returns log data in
   escaped :doc:`Relaxed Extended JSON v2.0
   </reference/mongodb-extended-json>` format. Previously, log data
   was returned as plaintext.

Syntax
------

The :dbcommand:`getLog` command has the following syntax:

.. code-block:: javascript

   db.adminCommand( { getLog: <value> } )

Command Fields
~~~~~~~~~~~~~~

The possible values for :dbcommand:`getLog` are:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Value
     - Description

   * - ``*``

     - Returns a list of the available values to the
       :dbcommand:`getLog` command.

   * - ``global`` 

     - Returns the combined output of all recent log entries.

   * - ``startupWarnings`` 

     - Returns log entries that *may* contain errors or warnings
       from MongoDB's log from when the current process started. If
       :binary:`~bin.mongod` started without warnings, this filter
       may return an empty array.

Output
~~~~~~

If specified ``*``, then the command returns a document with the
names of the other acceptable values.

Otherwise, the command returns a document that includes the following
fields:

- ``totalLinesWritten`` field that contains the number of log events

- ``log`` field that contains an array of log events

- A :method:`db.adminCommand()` :ref:`response document
  <db-adminCommand-response>`, containing status and timestamp
  information.

Behavior
--------

Line Truncation
~~~~~~~~~~~~~~~

Starting in MongoDB 4.2, :dbcommand:`getLog` truncates any event
that contains more than 1024 characters. In earlier versions,
:dbcommand:`getLog` truncates after 512 characters.

Character Escaping
~~~~~~~~~~~~~~~~~~

Starting in MongoDB 4.4, :dbcommand:`getLog` returns log data in
escaped :doc:`Relaxed Extended JSON v2.0
</reference/mongodb-extended-json>` format, using the following
escape sequences to render log output as valid JSON:

.. include:: /includes/fact-json-escape-sequences.rst

Examples
--------

Retrieve Available Log Filters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation, run from the :binary:`~bin.mongo` shell,
returns the available log filters for passing to :dbcommand:`getLog`:

.. code-block:: javascript

   db.adminCommand( { getLog: "*" } )

The operation returns the following document:

.. code-block:: javascript
   :copyable: false

   { "names" : [ "global", "startupWarnings" ], "ok" : 1 }

Retrieve Recent Events from Log
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation, run from the :binary:`~bin.mongo` shell,
retrieves the most recent ``global`` events for the
:binary:`~bin.mongod`:

.. code-block:: javascript

   db.adminCommand( { getLog : "global" } )

The operation returns a document similar to the following:

.. code-block:: javascript
   :copyable: false

   {
         "totalLinesWritten" : <num>,
         "log" : [
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:48.871+00:00\"},\"s\":\"I\",  \"c\":\"STORAGE\",  \"id\":4615611, \"ctx\":\"initandlisten\",\"msg\":\"MongoDB starting\",\"attr\":{\"pid\":12345,\"port\":27001,\"dbPath\":\"/var/lib/mongo\",\"architecture\":\"64-bit\",\"host\":\"server1.example.com\"}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:48.871+00:00\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":23403,   \"ctx\":\"initandlisten\",\"msg\":\"Build Info\",\"attr\":{\"buildInfo\":{\"version\":\"4.4.0\",\"gitVersion\":\"328c35e4b883540675fb4b626c53a08f74e43cf0\",\"openSSLVersion\":\"OpenSSL 1.1.1c FIPS  28 May 2019\",\"modules\":[],\"allocator\":\"tcmalloc\",\"environment\":{\"distmod\":\"rhel80\",\"distarch\":\"x86_64\",\"target_arch\":\"x86_64\"}}}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:48.871+00:00\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":51765,   \"ctx\":\"initandlisten\",\"msg\":\"Operating System\",\"attr\":{\"os\":{\"name\":\"CentOS Linux release 8.0.1905 (Core) \",\"version\":\"Kernel 4.18.0-80.11.2.el8_0.x86_64\"}}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:48.871+00:00\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":21951,   \"ctx\":\"initandlisten\",\"msg\":\"Options set by command line\",\"attr\":{\"options\":{\"config\":\"/etc/mongod.conf\",\"net\":{\"bindIp\":\"127.0.0.1\",\"port\":27001},\"processManagement\":{\"fork\":true,\"timeZoneInfo\":\"/usr/share/zoneinfo\"},\"replication\":{\"replSetName\":\"repl-shard1\"},\"sharding\":{\"clusterRole\":\"shardsvr\"},\"storage\":{\"dbPath\":\"/var/lib/mongo\",\"journal\":{\"enabled\":true},\"wiredTiger\":{\"engineConfig\":{\"cacheSizeGB\":0.1}}},\"systemLog\":{\"destination\":\"file\",\"logAppend\":true,\"path\":\"/var/log/mongodb/mongod.log\"}}}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:48.873+00:00\"},\"s\":\"I\",  \"c\":\"STORAGE\",  \"id\":22270,   \"ctx\":\"initandlisten\",\"msg\":\"Storage engine to use detected by data files\",\"attr\":{\"dbpath\":\"/var/lib/mongo\",\"storageEngine\":\"wiredTiger\"}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:48.873+00:00\"},\"s\":\"I\",  \"c\":\"STORAGE\",  \"id\":22315,   \"ctx\":\"initandlisten\",\"msg\":\"wiredtiger_open config\",\"attr\":{\"config\":\"create,cache_size=102M,session_max=33000,eviction=(threads_min=4,threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000,close_scan_interval=10,close_handle_minimum=250),statistics_log=(wait=0),verbose=[recovery_progress,checkpoint_progress,compact_progress],\"}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:58.877+00:00\"},\"s\":\"I\",  \"c\":\"CONNPOOL\", \"id\":22576,   \"ctx\":\"ReplicaSetMonitor-TaskExecutor\",\"msg\":\"Connecting\",\"attr\":{\"hostAndPort\":\"server1.example.com:27001\"}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:58.877+00:00\"},\"s\":\"I\",  \"c\":\"CONNPOOL\", \"id\":22576,   \"ctx\":\"ReplicaSetMonitor-TaskExecutor\",\"msg\":\"Connecting\",\"attr\":{\"hostAndPort\":\"server2.example.com:27001\"}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:58.877+00:00\"},\"s\":\"I\",  \"c\":\"CONNPOOL\", \"id\":22576,   \"ctx\":\"ReplicaSetMonitor-TaskExecutor\",\"msg\":\"Connecting\",\"attr\":{\"hostAndPort\":\"server3.example.com:27001\"}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:58.877+00:00\"},\"s\":\"I\",  \"c\":\"CONNPOOL\", \"id\":22576,   \"ctx\":\"ReplicaSetMonitor-TaskExecutor\",\"msg\":\"Connecting\",\"attr\":{\"hostAndPort\":\"server4.example.com:27001\"}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:58.877+00:00\"},\"s\":\"I\",  \"c\":\"CONNPOOL\", \"id\":22576,   \"ctx\":\"ReplicaSetMonitor-TaskExecutor\",\"msg\":\"Connecting\",\"attr\":{\"hostAndPort\":\"server5.example.com:27001\"}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:58.877+00:00\"},\"s\":\"I\",  \"c\":\"CONNPOOL\", \"id\":22576,   \"ctx\":\"ReplicaSetMonitor-TaskExecutor\",\"msg\":\"Connecting\",\"attr\":{\"hostAndPort\":\"server6.example.com:27001\"}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:58.877+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":23015,   \"ctx\":\"listener\",\"msg\":\"Listening on\",\"attr\":{\"address\":\"/tmp/mongodb-27001.sock\"}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:58.877+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":23015,   \"ctx\":\"listener\",\"msg\":\"Listening on\",\"attr\":{\"address\":\"127.0.0.1\"}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:10:58.877+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":23016,   \"ctx\":\"listener\",\"msg\":\"Waiting for connections\",\"attr\":{\"port\":27001,\"ssl\":\"off\"}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:15:10.392+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":22943,   \"ctx\":\"listener\",\"msg\":\"connection accepted\",\"attr\":{\"remote\":\"127.0.0.1:35724\",\"sessionId\":67,\"connectionCount\":30}}",
                 "{\"t\":{\"$date\":\"2020-05-19T19:15:10.393+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":51800,   \"ctx\":\"conn67\",\"msg\":\"client metadata\",\"attr\":{\"remote\":\"127.0.0.1:35724\",\"client\":\"conn67\",\"doc\":{\"application\":{\"name\":\"MongoDB Shell\"},\"driver\":{\"name\":\"MongoDB Internal Client\",\"version\":\"4.4.0\"},\"os\":{\"type\":\"Linux\",\"name\":\"CentOS Linux release 8.0.1905 (Core) \",\"architecture\":\"x86_64\",\"version\":\"Kernel 4.18.0-80.11.2.el8_0.x86_64\"}}}}"
         ],
         "ok" : 1,
         "$gleStats" : {
                 "lastOpTime" : Timestamp(<ts>),
                 "electionId" : ObjectId(<id>)
         },
         "lastCommittedOpTime" : Timestamp(<ts>),
         "$configServerState" : {
                 "opTime" : {
                         "ts" : Timestamp(<ts>),
                         "t" : NumberLong(8)
                  }
         },
         "$clusterTime" : {
                 "clusterTime" : Timestamp(<ts>),
                 "signature" : {
                         "hash" : BinData(<bin>),
                         "keyId" : NumberLong(0)
                  }
         },
         "operationTime" : Timestamp(<ts>)
   }
