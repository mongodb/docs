.. meta::
   :robots: noindex, nosnippet

:template: product-landing
:hidefeedback: header
:noprevnext:

.. _dotnet-intro:
.. _dotnet-realm-database:

=========================
Atlas Device SDK for .NET
=========================

.. meta::
   :description: Use the Atlas Device SDK for .NET to develop cross-platform mobile and desktop apps with C# and MAUI.

.. toctree::
   :titlesonly:
   
   Quick Start for Unity </sdk/dotnet/unity>
   Realm Files </sdk/dotnet/realm-files>
   Model Data </sdk/dotnet/model-data>
   CRUD </sdk/dotnet/crud>
   React to Changes </sdk/dotnet/react-to-changes>
   Application Services </sdk/dotnet/application-services>
   Manage Users </sdk/dotnet/work-with-users>
   Sync Data </sdk/dotnet/sync>
   Use the SDK in a Console App </sdk/dotnet/async-console>
   Logging </sdk/dotnet/logging>
   Compatibility </sdk/dotnet/compatibility>
   Troubleshooting </sdk/dotnet/troubleshooting>
   SDK Telemetry </sdk/dotnet/telemetry>
   API Reference <https://www.mongodb.com/docs/realm-sdks/dotnet/latest>
   Release Notes <https://github.com/realm/realm-dotnet/releases>


Use the Atlas Device SDK for .NET to develop cross-platform mobile and 
desktop apps with C# and MAUI.

.. kicker:: Learning Paths

Get Started with the .NET SDK
-----------------------------

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: Quick Start
      :cta: See Code Examples
      :url: https://www.mongodb.com/docs/realm/sdk/dotnet/quick-start/
      :icon: atlas_functions
      :icon-alt: Functions Icon

      Minimal-explanation code examples of how to work with the .NET SDK.
      Write to the device database, and sync with other devices.

   .. card::
      :headline: Working Example App
      :cta: Explore an Example App
      :url: https://www.mongodb.com/docs/atlas/app-services/template-apps/
      :icon: realm_mobile
      :icon-alt: Atlas Device SDK Mobile Icon

      Learn from example by dissecting a working MAUI client app that
      uses the .NET SDK.

   .. card::
      :headline: Guided Tutorial
      :cta: Follow the Tutorial
      :url: https://mongodb.com/docs/atlas/app-services/tutorial/dotnet/
      :icon: general_content_tutorial
      :icon-alt: Tutorial Icon

      Follow a guided tutorial to learn how to adapt the example app to
      create your own working app.

.. kicker:: What You Can Do

Develop Apps with the SDK
-------------------------

.. include:: /includes/dotnet-frameworks.rst

Use the SDK's open-source database - Realm - as an object store on the device. 
Use Device Sync to keep data in sync with your MongoDB Atlas cluster and 
other clients.

.. tabs::

   .. tab:: Store Data with the SDK
      :tabid: device-persistence

      .. procedure::
   
         .. step:: Install the .NET SDK
   
            Use NuGet to :ref:`dotnet-install` in your solution.
   
            Import the SDK in your source files to get started.
   
         .. step:: Define an Object Schema
   
            Use C# to idiomatically :ref:`define an object schema
            <dotnet-define-a-realm-object-schema>`.
   
         .. step:: Open a Database
   
            The SDK's database - Realm - stores objects in files on your 
            device. Or you can open an in-memory database which does not 
            create a file. :ref:`Configure and open a database <dotnet-open-a-realm>`
            to get started reading and writing data.
   
         .. step:: Read and Write Data
   
            :ref:`Read and write data <dotnet-read-and-write-data>`.
            You can :ref:`filter data <dotnet-client-query-engine>` using
            idiomatic LINQ Syntax, or the database's Realm Query Language.
   
         .. step:: React to Changes
   
            Live objects mean that your data is always up-to-date.
            You can :ref:`register a notification handler <dotnet-react-to-changes>`
            to watch for changes and perform some logic, such as updating
            your UI.
   
      .. image:: /images/illustrations/2024_branding/Technical_SOFTWARE_Connect(2)_Spot.png
         :alt: Atlas Device SDK Mobile Illustration

   .. tab:: Sync Data Across Devices
      :tabid: device-sync

      .. procedure::

         .. step:: Connect to an Atlas App Services App

            Configure :ref:`Device Sync in an App Services App
            <realm-sync-get-started>`. Define data access rules. Use
            Development Mode to infer your schema from your C# data model.

            Then, :ref:`connect to the backend <dotnet-init-appclient>` from
            your client.

         .. step:: Authenticate a User

            Use one of our authentication providers to :ref:`authenticate a
            user <dotnet-authenticate>`. App Services provides access
            to popular authentication providers, such as Apple, Google, or
            Facebook. Use our built-in email/password provider to manage
            users without a third-party, or use custom JWT authentication to
            integrate with other authentication providers. Anonymous authentication
            provides access without requiring a login or persisting user data.

         .. step:: Open a Synced Database

            :ref:`Configure and open a synced database <dotnet-flexible-sync-open-realm>`.
            :ref:`Subscribe to a query <dotnet-sync-add-subscription>`
            to determine what data the synced database can read and write.

         .. step:: Read and Write Synced Data

            The APIs to read and write data are the same whether you're using 
            a synced or non-synced database. Data that you read and write is 
            automatically kept in sync with your Atlas cluster and other 
            clients. Apps keep working offline and deterministically sync 
            changes whenever a network connection is available.

      .. image:: /images/illustrations/2024_branding/Technical_SOFTWARE_Sync(2)_Spot.png
         :alt: Device Sync Illustration

   .. tab:: Build with Atlas App Services
      :tabid: app-services

      .. container::
         
         Use Atlas App Services in your application with the .NET SDK.
   
         Call Serverless Functions
         ~~~~~~~~~~~~~~~~~~~~~~~~~
   
         You can :ref:`call serverless Functions <dotnet-call-a-function>`
         from your client application that run in an App Services backend.
   
         Query MongoDB Atlas
         ~~~~~~~~~~~~~~~~~~~
   
         You can :ref:`query data stored in MongoDB <dotnet-mongodb-data-access>`
         directly from your client application code.
   
         Authenticate Users
         ~~~~~~~~~~~~~~~~~~
   
         Authenticate users with built-in and third-party :ref:`authentication
         providers <dotnet-authenticate>`. Use the authenticated user to
         access App Services.

      .. image:: /images/illustrations/2024_branding/Technical_ACTION_WrenchSettings_Spot.png
         :alt: App Services Illustration

.. kicker:: Essential Documentation

Recommended Reading
-------------------

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: .NET API Reference
      :cta: .NET Reference
      :url: https://www.mongodb.com/docs/realm-sdks/dotnet/latest/
      :icon: realm_sdk
      :icon-alt: Atlas Device SDK Icon

      Explore generated reference docs for the SDK's .NET APIs.

   .. card::
      :headline: Integrate the SDK with Unity
      :cta: Install and Integrate the SDK with Unity
      :url: https://www.mongodb.com/docs/realm/sdk/dotnet/unity/
      :icon: general_content_tutorial
      :icon-alt: Tutorial Icon

      Find out how to integrate the SDK with your Unity project.
       
   .. card::
      :headline: Check Out Releases
      :cta: See .NET Releases
      :url: https://github.com/realm/realm-dotnet/releases
      :icon: realm_sdk
      :icon-alt: Atlas Device SDK Icon

      See the latest releases, new features, and bug fixes.

.. _dotnet-additional-examples:

Example Projects
----------------

Explore engineering and expert-provided example projects to learn best 
practices and common development patterns using the .NET SDK. Check out 
the :ref:`<realm-example-projects-table>` page for more .NET sample apps.

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: Large File Storage
      :cta: Example App
      :url: https://github.com/realm/realm-dotnet-lfs
      :icon: general_action_best_practices
      :icon-alt: File Icon

      Store large files, such as images, on a remote server. Use Triggers and
      Functions to store the references. Leverage the SDK's offline-first design
      to store large images, even when offline.

   .. card::
      :headline: Analytics/Telemetrics Data
      :cta: Example App
      :url: https://github.com/realm/realm-dotnet-samples/tree/main/AnalyticsTelemetry
      :icon: atlas_asymmetric_sync
      :icon-alt: Atlas Device Sync Icon

      Take sensor readings, push data to Atlas, and display the results in
      Atlas Charts or a time series collection.

   .. card::
      :headline: Use the SDK with REST APIs
      :cta: Example App
      :url: https://github.com/realm/xamarin-examples-architecture
      :icon: realm_sdk
      :icon-alt: Tool Kit Icon

      Use the SDK for real-time operations together with REST APIs for 
      server-side business logic - all with a single ViewModel.