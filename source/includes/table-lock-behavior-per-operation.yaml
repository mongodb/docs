# table structure. all content symbolic.
section: layout
header: [ meta.header1, meta.header2 ]
rows:
  - 1: [ content.op1, content.lock1 ]
  - 2: [ content.op2, content.lock2 ]
  - 3: [ content.op3, content.lock3 ]
  - 4: [ content.op4, content.lock4 ]
  - 5: [ content.op5, content.lock5 ]
  - 6: [ content.op6, content.lock6 ]
  - 7: [ content.op7, content.lock7 ]
  - 8: [ content.op8, content.lock8 ]
  - 9: [ content.op9, content.lock9 ]
  - 10: [ content.op10, content.lock10 ]
---
# table metadata, as meta.<key>
section: meta
header1: "Operation"
header2: "Lock Type"
---
# table content, as content.<key>
section: content
op1: Issue a query
lock1: Read lock
op2: Get more data from a :term:`cursor`
lock2: Read lock
op3: Insert data
lock3: Write lock
op4: Remove data
lock4: Write lock
op5: Update data
lock5: Write lock
op6: :term:`Map-reduce <map-reduce>`
lock6: |
       Read lock and write lock, unless operations are specified as
       non-atomic. Portions of map-reduce jobs can run concurrently.
op7: Create an index
lock7: |
       Building an index in the foreground, which is the default, locks
       the database for extended periods of time.
op8: :method:`~db.eval()`
lock8: |
       Write lock. :method:`~db.eval()` blocks all other JavaScript
       processes.
op9: :dbcommand:`eval`
lock9: |
       Write lock. If used with the ``nolock`` lock option, the
       :dbcommand:`eval` option does not take a write lock and
       cannot write data to the database.
op10: :method:`~db.collection.aggregate()`
lock10: Read lock
...
