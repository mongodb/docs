======================================================
Compatibility Changes in MongoDB 3.6 Release Candidate
======================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. include:: /includes/in-dev.rst

Security Compatibility Changes
------------------------------

MongoDB 3.6 removes the deprecated HTTP interface and REST API to
MongoDB.

.. list-table::
   :header-rows: 1
   :widths: 60 40

   * - Configuration Settings
     - ``mongod/mongos`` option

   * - | ``net.http.enabled``
       | ``net.http.JSONPEnabled``
       | ``net.http.port``
       | ``net.http.RESTInterfaceEnabled``

     - | ``httpinterface``
       | ``nohttpinterface``
       | ``jsonp``
       | ``rest``

.. _3.6-bind_ip-compatibility:

Localhost Binding Compatibility Changes
---------------------------------------

.. include:: /includes/fact-default-bind-ip.rst

.. include:: /includes/fact-bind-to-all-ips.rst

General Compatibility Changes
-----------------------------

.. _3.6-compatibility-arbiter-priority:

Arbiter and Priority
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-arbiter-priority.rst

.. _aggregate-compatibility:

``aggregate`` Command and Results
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 3.6 removes the option for the :dbcommand:`aggregate` command
to return its results as a single document.

If you run the :dbcommand:`aggregate` command, you must include either
the ``cursor`` option or the ``explain`` option.

Rather than run the :dbcommand:`aggregate` command directly, most users
should use the :method:`db.collection.aggregate()` helper provided in
the mongo shell or the equivalent helper in their driver. These helpers
return a cursor unless using the ``explain`` option.

Stricter Validation of ``$pop`` Arguments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in 3.6 [#upgraded]_, :update:`$pop` operator performs
a stricter validation of its argument to require either:

- ``-1`` to remove the first element of an array, or

- ``1`` to remove the last element in an array.

In earlier versions, :update:`$pop` allowed:

- any value less than ``0`` to remove the first element of an array, and

- any value greater than or equal to ``0`` as well as non-numeric value
  to remove the last element in an array.

.. [#upgraded]

   Affects MongoDB deployments with ``featureCompatibilityVersion`` set
   to ``3.6``; e.g. new 3.6 deployments, upgraded deployments that have
   set ``featureCompatibilityVersion`` to ``3.6``.

.. _3.6-pushall-compatibility:

Remove ``$pushAll`` Update Operator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 3.6 removes the deprecated ``$pushAll`` operator. The operator
has been deprecated since 2.4.

Instead of ``$pushAll``, use the :update:`$push` operator with the
:update:`$each` modifier. For example:

.. code-block:: javascript

   db.students.update(
      { name: "joe" },
      { $push: { scores: { $each: [ 90, 92, 85 ] } } }
   )

.. _3.6-validate-compatibility:

``validate`` Operation
~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-validate-wiredtiger-full-option.rst

For more information on the validate operation, see the
:dbcommand:`validate` command and the
:method:`db.collection.validate()` method.

.. _3.6-type-array-compatibility:

``$type : 'array'`` Behavior Change
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in 3.6, ``$type : "array"`` and ``$type : 4`` expressions match array
fields that contain any element type.

In earlier versions, ``$type : 'array'`` would only match with fields
that contained a nested array.

For example, a collection named ``c`` contains two documents:

.. code-block:: javascript

   {
      "_id": 1,
      "a": [
         1,
         2,
         3
      ]
   },
   {
      "_id": 2,
      "a": [
         1,
         2,
         [ 3, 4 ]
      ]
   }

In 3.4 and earlier versions of MongoDB, the following query returns any 
document in which field ``a`` contains an element of :term:`BSON` 
type ``array``.

.. code-block:: javascript

  db.c.find( { 'a' : { $type : 'array' } } )

The above query, exhibiting behavior from before 3.6, will return the 
second document.

.. code-block:: javascript

   {
      "_id": 2,
      "a": [
         1,
         2,
         [ 3, 4 ]
      ]
   }

Starting in 3.6, the same query returns both documents in the collection
because the ``$type`` query can now detect that field ``'a'`` is 
itself an array.

.. code-block:: javascript

   {
      "_id": 1,
      "a": [
         1,
         2,
         3
      ]
   },
   {
      "_id": 2,
      "a": [
         1,
         2,
         [ 3, 4 ]
      ]
   }

If upgrading from a MongoDB 3.4.x  deployment that has partial indexes whose
``partialFilterExpression`` includes a ``$type : "array"`` or ``$type : 4``
expression, you must rebuild these indexes after upgrading to avoid conflicting
``$type : 'array'`` semantics.

For more information on the ``$type : 'array'`` expression, see
:ref:`document-querying-by-array-type`.

.. _3.6-sort-behavior-compatibility:

Array Sort Behavior
~~~~~~~~~~~~~~~~~~~

Starting in 3.6, when sorting a field containing an array, MongoDB
orders the field with the lowest-valued element of the array first for
ascending sorts and the highest-valued element of the array first for
descending sorts. A sort no longer takes the query predicate into
account when choosing the array element which will act as the
**sort key**. This behavior change applies to both the
:doc:`find </reference/command/find/>` command and the 
:doc:`aggregation pipeline </core/aggregation-pipeline>`.

As a result of this change, applications that currently sort by an
array field may experience a different sort order.

.. note ::

   As of version 3.6, the query engine cannot use a
   :doc:`multikey index </core/index-multikey/>` to provide a
   non-blocking sort by an array field. If you try to sort in this
   manner, the query plan will include a blocking SORT stage, which
   may negatively impact performance.

.. _3.6-find-method-sort:

``find`` Method Sorting
```````````````````````
A **sort key** is the array element MongoDB uses during the sorting
process to compare and ultimately order documents containing an array.
In an ascending sort, documents containing arrays with the
lowest-valued sort keys are ordered first. Likewise, in a descending
sort, documents containing arrays with the highest-valued sort keys are
ordered first.

In MongoDB 3.4 and earlier, a sort by an array field took into account
the query predicate when determining the sort key.

For example, a collection ``coll`` has the following documents:

.. code-block:: javascript

   { _id: 0, a: [-3, -2, 2, 3] }
   { _id: 1, a: [ 5, -4 ] }

Consider following sort operation on the array field ``a`` of the
collection:

.. code-block:: javascript

   db.coll.find({a: {$gte: 0}}).sort({a: 1});

In MongoDB 3.6, the sort operation no longer takes into account the
query predicate when determining its sort key. As a result, the sort
key is the lowest-valued element for each document:

- ``-3`` for the document with ``_id: 0`` and
- ``-4`` for the document with ``_id: 1``.

The operation returns the documents in the following order:

.. code-block:: javascript

   { "_id" : 1, "a" : [ 5, -4 ] }
   { "_id" : 0, "a" : [ -3, -2, 2, 3 ] }

Previous MongoDB versions use the lowest-valued array element that
matches the query predicate of ``{$gte: 0}`` as the sort key:

- ``2`` for the document with ``_id: 0`` and
- ``5`` for the document with ``_id: 1``,

and would return the documents in the following order:

.. code-block:: javascript

   { _id: 0, a: [-3, -2, 2, 3] }
   { _id: 1, a: [ 5, -4 ] }

.. _3.6-agg-method-sort:

``aggregate`` Method Sorting
````````````````````````````

In MongoDB 3.6, when sorting array fields with the
:method:`db.collection.aggregate()` method, only a single array element
is used as the sort key.

Consider the following example:

.. code-block:: javascript

   // Documents.
   { "_id" : 1, "timestamps" : [ ISODate("2017-07-15T15:31:01Z"), ISODate("2017-07-21T18:31:01Z") ] }
   { "_id" : 0, "timestamps" : [ ISODate("2017-07-21T15:31:01Z"), ISODate("2017-07-21T13:31:01Z") ] }

   // Query.
   db.c.aggregate([{$sort: {timestamps: -1}}])

For a descending sort, the most recent time in the array is used as the
sort key: ``3:31 PM on July 21`` for the document with ``_id: 0`` and
``5:31 PM on July 21`` for the document with ``_id: 1``. Since the sort
is descending, these keys are then ordered from most recent to least
recent, resulting in the document with ``_id: 1`` sorting before the
document with ``_id: 0``.

Before 3.6, the *entire array* is used as the sort
key for aggregation sorts. The array sort keys are compared
element-wise to determine the sort order of the result set. 

.. example::

   .. code-block:: javascript

      // Documents.
      {_id: 0, a: [3, 1, 5]}
      {_id: 1, a: [3, 4, 0]}
   
      // Query.
      db.coll.aggregate([{$sort: {a: 1}}])      

Prior to 3.6, the sort keys are [3, 1, 5] and [3, 4, 0] respectively.
Since the first array elements are equal, the second array element
breaks the tie and the document with ``_id: 0`` sorts first.

For more information on sorting with the
:doc:`Aggregation Pipeline </reference/operator/aggregation/>`, see
:doc:`$sort </reference/operator/aggregation/sort/>`.

.. _3.6-index-asterisk:

Indexes Named ``*``
-------------------

Starting in 3.6, you cannot specify ``*`` as the index name during
index creation nor can you delete indexes named ``*`` by specifying the
index keys.

To delete exisitng indexes named ``*``, delete the index before
upgrading. To rename them, delete and recreate the index.

Platform Support
----------------

MongoDB 3.6 discontinues support for versions of Windows prior to Windows
Server 2008 R2 and Windows 7.

.. _3.6-compatibility-enabled:

Backwards Incompatible Features
-------------------------------

.. include:: /includes/3.6-backwards-incompatible-features.rst

To set the ``featureCompatibilityVersion``, see
:dbcommand:`setFeatureCompatibilityVersion` command.

3.6 deployments have the following default
``featureCompatibilityVersion`` values:

.. include:: /includes/list-table-featureCompatibilityVersion-defaults.rst

Upgrading Before Using ``$jsonSchema``
--------------------------------------

``featureCompatibilityVersion`` must be set to ``"3.6"`` in order to use 
:query:`$jsonSchema` in a document validator. Any such validator must be 
removed by either dropping the collection or by using :dbcommand:`collMod` 
before downgrading to version 3.4 of the server. Otherwise, a 3.4 server 
will not start up.
