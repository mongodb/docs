.. _sharding-hashed:
.. _sharding-hashed-sharding:

===============
Hashed Sharding
===============

.. default-domain:: mongodb

Hashed sharding uses a :ref:`hashed index <index-hashed-index>` to
partition data across your sharded cluster. Hashed indexes compute the
hash value of a single field as the index value; this value is used as
your shard key. [#hashvalue]_

.. include:: /images/sharding-hash-based.rst

Hashed sharding provides more even data distribution across the sharded
cluster at the cost of reducing :ref:`sharding-query-isolation`. Post-hash,
documents with "close" shard key values are unlikely to be on the same
chunk or shard - the :binary:`~bin.mongos` is more likely to perform
:ref:`sharding-mongos-broadcast` to fulfill a given ranged query.
:binary:`~bin.mongos` can target queries with equality matches to a single shard.

.. include:: /includes/tip-applications-do-not-need-to-compute-hashes.rst

.. include:: /includes/warning-hashed-index-floating-point.rst

.. [#hashvalue]
   Starting in version 4.0, the :binary:`~bin.mongo` shell provides the
   method :method:`convertShardKeyToHashed()`. This method uses the
   same hashing function as the hashed index and can be used to see
   what the hashed value would be for a key.

.. _hashed-sharding-shard-key:

Hashed Sharding Shard Key
-------------------------

The field you choose as your hashed shard key should have a good
:ref:`cardinality<shard-key-range>`, or large number of different values.
Hashed keys are ideal for shard keys with fields that change
:ref:`monotonically<shard-key-monotonic>` like :term:`ObjectId` values or
timestamps. A good example of this is the default ``_id`` field, assuming
it only contains :term:`ObjectID` values.

To shard a collection using a hashed shard key, see
:ref:`deploy-hashed-sharded-cluster-shard-collection`.

Hashed vs Ranged Sharding
-------------------------

Given a collection using a monotonically increasing value ``X`` as the
shard key, using ranged sharding results in a distribution of incoming
inserts similar to the following:

.. include:: /images/sharded-cluster-monotonic-distribution.rst

Since the value of ``X`` is always increasing, the chunk with an upper bound
of :doc:`maxKey</reference/bson-types>` receives the majority incoming writes. This
restricts insert operations to the single shard containing this chunk, which
reduces or removes the advantage of distributed writes in a sharded cluster.

By using a hashed index on ``X``, the distribution of inserts is similar
to the following:

.. include:: /images/sharded-cluster-hashed-distribution.rst

Since the data is now distributed more evenly, inserts are efficiently
distributed throughout the cluster.

Shard the Collection
--------------------

Use the :method:`sh.shardCollection()` method, specifying the full namespace
of the collection and the target :doc:`hashed index</core/index-hashed>`
to use as the :term:`shard key`.

.. code-block:: javascript

   sh.shardCollection( "database.collection", { <field> : "hashed" } )

.. important::

   - Once you shard a collection, the selection of the shard key is
     immutable; i.e. you cannot select a different shard key for that
     collection.

   - .. include:: /includes/limits-sharding-shardkey-document-immutable.rst

Shard a Populated Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you shard a populated collection using a hashed shard key:

- The sharding operation creates the initial chunk(s) to cover the
  entire range of the shard key values. The number of chunks created
  depends on the :ref:`configured chunk size <sharding-chunk-size>`.

- After the initial chunk creation, the balancer migrates these initial
  chunks across the shards as appropriate as well as manages the chunk
  distribution going forward.

Shard an Empty Collection
~~~~~~~~~~~~~~~~~~~~~~~~~

If you shard an empty collection using a hashed shard key:

- With no :doc:`zones and zone ranges </core/zone-sharding>` specified for
  the empty or non-existing collection:

  - The sharding operation creates empty chunks to cover the entire
    range of the shard key values and performs an initial chunk
    distribution. By default, the operation
    creates 2 chunks per shard and migrates across the cluster. You can
    use ``numInitialChunks`` option to specify a different number of
    initial chunks. This initial creation and distribution of
    chunks allows for faster setup of sharding.

  - After the initial distribution, the balancer manages the chunk
    distribution going forward.

- With :doc:`zones and zone ranges </core/zone-sharding>` specified for the
  empty or a non-existing collection (Available starting in MongoDB
  4.0.3),

  - The sharding operation creates empty chunks for the defined zone
    ranges as well as any additional chunks to cover the entire range
    of the shard key values and performs an initial chunk distribution
    based on the zone ranges. This initial creation and distribution of
    chunks allows for faster setup of zoned sharding.

  - After the initial distribution, the balancer manages the chunk
    distribution going forward.

.. seealso::

   To learn how to deploy a sharded cluster and implement hashed
   sharding, see :ref:`sharding-procedure-setup`.
