=========================
Troubleshoot Replica Sets
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This section describes common strategies for troubleshooting
:term:`replica set` deployments.

.. _replica-set-troubleshooting-check-replication-status:

Check Replica Set Status
------------------------

To display the current state of the replica set and current state of
each member, run the :method:`rs.status()` method in a :binary:`~bin.mongo`
shell connected to the replica set's :term:`primary`. For descriptions
of the information displayed by :method:`rs.status()`, see
:doc:`/reference/command/replSetGetStatus`.

.. note::

   The :method:`rs.status()` method is a wrapper that runs the
   :dbcommand:`replSetGetStatus` database command.

.. _replica-set-replication-lag:

Check the Replication Lag
-------------------------

Replication lag is a delay between an operation on the :term:`primary`
and the application of that operation from the :term:`oplog` to the
:term:`secondary`. Replication lag can be a significant issue and can
seriously affect MongoDB :term:`replica set` deployments. Excessive
replication lag makes "lagged" members ineligible to quickly become
primary and increases the possibility that distributed read operations
will be inconsistent.

To check the current length of replication lag:

- In a :binary:`~bin.mongo` shell connected to the primary, call the
  :method:`rs.printSlaveReplicationInfo()` method.

  Returns the ``syncedTo`` value for each member,
  which shows the time when the last oplog entry was written to the
  secondary, as shown in the following example:

  .. code-block:: none

     source: m1.example.net:27017
         syncedTo: Thu Apr 10 2014 10:27:47 GMT-0400 (EDT)
         0 secs (0 hrs) behind the primary 
     source: m2.example.net:27017
         syncedTo: Thu Apr 10 2014 10:27:47 GMT-0400 (EDT)
         0 secs (0 hrs) behind the primary 

  A :ref:`delayed member <replica-set-delayed-members>` may show as ``0``
  seconds behind the primary when the inactivity period on the primary is
  greater than the :rsconf:`members[n].slaveDelay`
  value.

  .. note::

     The :method:`rs.status()` method is a wrapper around the
     :dbcommand:`replSetGetStatus` database command.

- Monitor the rate of replication by checking for non-zero or increasing
  oplog time values in the :guilabel:`Replication Lag` graph available in 
  `Cloud Manager <https://docs.cloudmanager.mongodb.com/reference/alerts/replication-lag/>`_ 
  and in `Ops Manager <https://docs.opsmanager.mongodb.com/current/reference/alerts/replication-lag/>`_.

.. include:: /includes/replacement-mms.rst

Replication Lag Causes
~~~~~~~~~~~~~~~~~~~~~~

Possible causes of replication lag include:

- **Network Latency**

  Check the network routes between the members of your set to ensure
  that there is no packet loss or network routing issue.

  Use tools including ``ping`` to test latency between set
  members and ``traceroute`` to expose the routing of packets
  network endpoints.

- **Disk Throughput**

  If the file system and disk device on the secondary is
  unable to flush data to disk as quickly as the primary, then
  the secondary will have difficulty keeping state. Disk-related
  issues are incredibly prevalent on multi-tenant systems, including
  virtualized instances, and can be transient if the system accesses
  disk devices over an IP network (as is the case with Amazon's
  EBS system.)

  Use system-level tools to assess disk status, including
  ``iostat`` or ``vmstat``.

- **Concurrency**

  In some cases, long-running operations on the primary can block
  replication on secondaries. For best results, configure :ref:`write
  concern <wc-w>` to require confirmation of replication to
  secondaries. This prevents write operations from
  returning if replication cannot keep up with the write load.

  You can also use the :term:`database profiler` to see if there are slow queries or
  long-running operations that correspond to the incidences of lag.

- **Appropriate Write Concern**

  If you are performing a large data ingestion or bulk load operation
  that requires a large number of writes to the primary, particularly
  with :writeconcern:`unacknowledged write concern
  <0>`, the secondaries will not be able to
  read the oplog fast enough to keep up with changes.

  To prevent this, request :doc:`write acknowledgement
  write concern </reference/write-concern>` after every 100,
  1,000, or another interval to provide an opportunity for
  secondaries to catch up with the primary.

  For more information see:

  - :ref:`Write Concern <wc-w>`
  - :ref:`Replica Set Write Concern <write-operations-replica-sets>`
  - :ref:`replica-set-oplog-sizing`

.. _flow-control:

Flow Control
~~~~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-flow-control-general-desc.rst

.. include:: /includes/extracts/4.2-changes-flow-control-specific-desc.rst

For information on flow control statistics, see:

- :serverstatus:`flowControl <flowControl>`

- :data:`$currentOp.waitingForFlowControl` and :data:`$currentOp.flowControlStats`

- :data:`currentOp.waitingForFlowControl` and :data:`currentOp.flowControlStats`

Slow Application of Oplog Entries
---------------------------------

.. include:: /includes/extracts/4.2-changes-slow-oplog-log-message-footnote.rst

.. _replica-set-troubleshooting-check-connection:

Test Connections Between all Members
------------------------------------

All members of a :term:`replica set` must be able to connect to every
other member of the set to support replication. Always verify
connections in both "directions."  Networking topologies and firewall
configurations can prevent normal and required connectivity, which can
block replication.

.. versionchanged:: 3.6

   .. include:: /includes/fact-default-bind-ip.rst

Consider the following example of a bidirectional test of networking:

.. example:: Given a replica set with three members running on three separate
   hosts:

   - ``m1.example.net``
   - ``m2.example.net``
   - ``m3.example.net``

   All three use the default port ``27017``.

   1. Test the connection from ``m1.example.net`` to the other hosts
      with the following operation set ``m1.example.net``:

      .. code-block:: sh

         mongo --host m2.example.net --port 27017

         mongo --host m3.example.net --port 27017

   #. Test the connection from ``m2.example.net`` to the other two
      hosts with the following operation set from ``m2.example.net``,
      as in:

      .. code-block:: sh

         mongo --host m1.example.net --port 27017

         mongo --host m3.example.net --port 27017

      You have now tested the connection between
      ``m2.example.net`` and ``m1.example.net`` in both directions.

   #. Test the connection from ``m3.example.net`` to the other two
      hosts with the following operation set from the
      ``m3.example.net`` host, as in:

      .. code-block:: sh

         mongo --host m1.example.net --port 27017

         mongo --host m2.example.net --port 27017

   If any connection, in any direction fails, check your networking
   and firewall configuration and reconfigure your environment to
   allow these connections.

Socket Exceptions when Rebooting More than One Secondary
--------------------------------------------------------

When you reboot members of a replica set, ensure that the set is able
to elect a primary during the maintenance. This means ensuring that a majority of
the set's :rsconf:`members[n].votes` are
available.

When a set's active members can no longer form a majority, the set's
:term:`primary` steps down and becomes a :term:`secondary`. Starting in
MongoDB 4.2, when the primary steps down, it no longer closes all
client connections. In MongoDB 4.0 and earlier, when the primary steps
down, it closes all client connections.

Clients cannot write to the replica set until the members elect a new
primary.

.. example:: Given a three-member replica set where every member has
   one vote, the set can elect a primary if at least two members
   can connect to each other. If you reboot the two secondaries at
   once, the primary steps down and becomes a secondary. Until at least
   another secondary becomes available, i.e. at least one of the rebooted
   secondaries also becomes available, the set has no primary and cannot
   elect a new primary.

For more information on votes, see :doc:`/core/replica-set-elections`. For
related information on connection errors, see :ref:`faq-keepalive`.

.. _replica-set-troubleshooting-check-oplog-size:

Check the Size of the Oplog
---------------------------

A larger :term:`oplog` can give a replica set a greater tolerance for
lag, and make the set more resilient.

To check the size of the oplog for a given :term:`replica set` member,
connect to the member in a :binary:`~bin.mongo` shell and run the
:method:`rs.printReplicationInfo()` method.

The output displays the size of the oplog and the date ranges of the
operations contained in the oplog. In the following example, the oplog
is about 10 MB and is able to fit about 26 hours (94400 seconds) of
operations:

.. code-block:: javascript

   configured oplog size:   10.10546875MB
   log length start to end: 94400 (26.22hrs)
   oplog first event time:  Mon Mar 19 2012 13:50:38 GMT-0400 (EDT)
   oplog last event time:   Wed Oct 03 2012 14:59:10 GMT-0400 (EDT)
   now:                     Wed Oct 03 2012 15:00:21 GMT-0400 (EDT)

The oplog should be long enough to hold all transactions for the
longest downtime you expect on a secondary. [#oplog]_ At a minimum, an oplog
should be able to hold minimum 24 hours of operations; however, many
users prefer to have 72 hours or even a week's work of operations.

For more information on how oplog size affects operations, see:

- :ref:`replica-set-oplog-sizing`,
- :ref:`replica-set-delayed-members`, and
- :ref:`replica-set-replication-lag`.

.. note:: You normally want the oplog to be the same size on all
   members. If you resize the oplog, resize it on all members.

To change oplog size, see the :doc:`/tutorial/change-oplog-size`
tutorial.

.. [#oplog]

   .. include:: /includes/fact-oplog-size.rst
