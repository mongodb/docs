#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"


#: ../source/core/journaling.txt:80 ../source/core/journaling.txt:179
msgid "Journal Files"
msgstr ""


#: ../source/core/journaling.txt:211
msgid ""
"To speed the frequent sequential writes that occur to the current journal "
"file, you can ensure that the journal directory is on a different filesystem"
" from the database data files."
msgstr ""
"当MongoDB运行在journaling状态下时， :doc:`write operations </core/write-"
"operations>` 在写入磁盘数据文件之前会先写入内存和journal文件。本文讨论在"
"MongoDB系统中的journaling机制以及它的实现。更多关于配置、调试和管理journaling"
"的信息请参看 :doc:`/tutorial/manage-journaling` 。"


#: ../source/core/journaling.txt:238
msgid ""
"To avoid preallocation lag, see :ref:`journaling-avoid-preallocation-lag`."
msgstr ""


#: ../source/core/journaling.txt:5
msgid "Journaling"
msgstr ""

#: ../source/core/journaling.txt:0
msgid "On this page"
msgstr ""

#: ../source/core/journaling.txt:15
msgid ""

"To provide durability in the event of a failure, MongoDB uses *write ahead "
"logging* to on-disk :term:`journal` files."

msgstr ""
"当journaling开启后，MongoDB在定义好的 :setting:`~storage.dbPath` 路径下创建一"
"个journal子目录，dbPath默认路径为 :file:`/data/db` 。journal目录用来存放"
"journal文件，该文件用来记录write-ahead redo日志。该目录下还包含一个用来保存最"
"近队列数的文件。一次正常的shutdown会删除journal目录下的所有文件，而非正常的"
"shutdown（比如崩溃）则不会删除文件。当mongod进程重启时，这些文件用来自动恢复数"
"据库保证数据的一致性。"

#: ../source/core/journaling.txt:21
msgid "Journaling and the WiredTiger Storage Engine"
msgstr ""

#: ../source/core/journaling.txt:25
msgid ""

"The *log* mentioned in this section refers to the WiredTiger write-ahead log"
" (i.e. the journal) and not the MongoDB log file."

msgstr ""
"Journal文件是只追加文件，文件名以 ``j._`` 开头。当journal文件达到1G数据时，"
"MongoDB会创建一个新的journal文件。一旦某个journal文件的所有写操作都被刷新到数"
"据库数据文件之后，MongoDB将删除掉这个文件，因为以后都不会再用该文件来进行数据"
"恢复了。除非你每秒进行大量数据的写入，否则journal目录里应该只会有两三个文件。"

#: ../source/core/journaling.txt:28
msgid ""
":doc:`WiredTiger </core/wiredtiger>` uses :ref:`checkpoints <storage-"
"wiredtiger-checkpoints>` to provide a consistent view of data on disk and "
"allow MongoDB to recover from the last checkpoint. However, if MongoDB exits"
" unexpectedly in between checkpoints, journaling is required to recover "
"information that occurred after the last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:34
msgid "With journaling, the recovery process:"
msgstr ""

#: ../source/core/journaling.txt:36
msgid "Looks in the data files to find the identifier of the last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:39
msgid ""

"Searches in the journal files for the record that matches the identifier of "
"the last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:42
msgid "Apply the operations in the journal files since the last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:47 ../source/core/journaling.txt:121
msgid "Journaling Process"

msgstr ""
"为了提高当前journal文件频繁的顺序写入速度，您可以将journal文件放在与数据库数据"
"文件不同的文件系统下。"

#: ../source/core/journaling.txt:51
msgid ""

"With journaling, WiredTiger creates one journal record for each client "
"initiated write operation. The journal record includes any internal write "
"operations caused by the initial write. For example, an update to a document"
" in a collection may result in modifications to the indexes; WiredTiger "
"creates a single journal record that includes both the update operation and "
"its associated index modifications."

msgstr ""
"如果将journal文件放在与数据文件不同的文件系统下，那么将 *不能* 单独使用文件系"
"统快照备份 :setting:`~storage.dbPath` 目录下的文件。在这种情况下，利用 :"
"method:`~db.fsyncLock()` 方法来确保数据库文件的一致性，等快照生成完毕之后使"
"用 :method:`~db.fsyncUnlock()` 方法释放锁定。"

#: ../source/core/journaling.txt:58
msgid ""
"MongoDB configures WiredTiger to use in-memory buffering for storing the "
"journal records. Threads coordinate to allocate and copy into their portion "
"of the buffer. All journal records up to 128 kB are buffered."
msgstr ""
"根据你文件系统的不同，当第一次以journaling方式启动一个 :program:`mongod` 进程"
"时，可能会因为预分配而产生延时。"

#: ../source/core/journaling.txt:63
msgid ""

"WiredTiger syncs the buffered journal records to disk according to the "
"following intervals or conditions:"
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:1
msgid "Every 50 milliseconds."

msgstr ""
"如果 :program:`mongod` 进程认为预分配journal文件比在需要时去创建一个新的"
"journal文件更有效，那么MongoDB会预先分配journal文件。预分配所需要的时间可能需"
"要几分钟，在这段时间里是连接不了数据库的。这是一次性预分配，在以后的调用中都不"
"会发生再分配。"

#: ../source/includes/extracts/wt-journal-frequency.rst:4
msgid ""
"MongoDB sets checkpoints to occur in WiredTiger on user data at an interval "
"of 60 seconds or when 2 GB of journal data has been written, whichever "
"occurs first."
msgstr ""
"为了避免预分配带来的延时，可以参见 :ref:`journaling-avoid-preallocation-"
"lag` 。"


#: ../source/includes/extracts/wt-journal-frequency.rst:8
msgid ""
"If the write operation includes a write concern of :writeconcern:`j: true "
"<j>`, WiredTiger forces a sync of the WiredTiger journal files."
msgstr ""


#: ../source/includes/extracts/wt-journal-frequency.rst:11
msgid ""
"Because MongoDB uses a journal file size limit of 100 MB, WiredTiger creates"
" a new journal file approximately every 100 MB of data. When WiredTiger "
"creates a new journal file, WiredTiger syncs the previous journal file."
msgstr ""

#: ../source/core/journaling.txt:70
msgid ""

"In between write operations, while the journal records remain in the "
"WiredTiger buffers, updates can be lost following a hard shutdown of "
":program:`mongod`."

msgstr ""
" ``shared view`` 存储修改过后的数据并刷新到MongoDB数据文件中。 ``shared "
"view`` 是唯一能够直接访问MongoDB数据文件的视图。当运行在journaling开启状态下"
"时， :program:`mongod` 要求操作系统将磁盘上存在的数据文件映射到 ``shared "
"view`` 虚拟内存视图。操作系统只映射文件而不会加载数据文件。只有在需要时MongoDB"
"才会将数据文件加载进 ``shared view`` 。"

#: ../source/core/journaling.txt:75
msgid ""

"The :dbcommand:`serverStatus` command returns information on the WiredTiger "
"journal statistics in the :data:`wiredTiger.log <data:: "
"serverStatus.wiredTiger.log>` field."

msgstr ""
" ``private view`` 用来存储 :doc:`read operations </core/read-operations>` 的数"
"据。 ``private view`` 是第一个接受MongoDB新的 :doc:`write operations </core/"
"write-operations>` 的位置。在journal提交后，MongoDB将 ``private view`` 的更改"
"复制到 ``shared view`` ，这些更改通过shared view刷新到数据库数据文件里。"

#: ../source/core/journaling.txt:82
msgid ""

"For the journal files, MongoDB creates a subdirectory named ``journal`` "
"under the :setting:`~storage.dbPath` directory. WiredTiger journal files "
"have names with the following format ``WiredTigerLog.<sequence>`` where "
"``<sequence>`` is a zero-padded number starting from ``0000000001``."

msgstr ""
"journal是一个硬盘视图，用来存储MongoDB将写操作应用到 ``private view`` 之后数据"
"文件之前的写操作。journal文件提供健壮性。如果 :program:`mongod` 进程在将写操作"
"数据写入数据文件之前崩溃，journal文件可以重新将写操作数据应用到 ``shared "
"view`` ，最后再加载到数据文件。"


#: ../source/core/journaling.txt:88
msgid ""
"Journal files contain a record per each write operation. Each record has a "
"unique identifier."
msgstr ""

#: ../source/core/journaling.txt:91
msgid ""
"MongoDB configures WiredTiger to use snappy compression for the journaling "
"data."
msgstr ""


#: ../source/includes/fact-wiredtiger-log-compression-limit.rst:1
msgid ""
"Minimum log record size for WiredTiger is 128 bytes. If a log record is 128 "
"bytes or smaller, WiredTiger does not compress that record."
msgstr ""
"MongoDB将写操作批量复制到journal文件，这种方式成为批量提交。 \"group commits"
"\" 可以降低journaling机制对性能的影响，因为批量提交在提交时阻塞所有的写操作。"
"关于默认的提交时间间隔参见 :setting:`~storage.journal.commitIntervalMs` 。"

#: ../source/core/journaling.txt:96
msgid ""

"WiredTiger journal files for MongoDB have a maximum size limit of "
"approximately 100 MB. Once the file exceeds that limit, WiredTiger creates a"
" new journal file."
msgstr ""

#: ../source/core/journaling.txt:100
msgid ""
"WiredTiger automatically removes old journal files to maintain only the "
"files needed to recover from last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:103
msgid "WiredTiger will pre-allocate journal files."
msgstr ""

#: ../source/core/journaling.txt:108
msgid "Journaling and the MMAPv1 Storage Engine"
msgstr ""

#: ../source/core/journaling.txt:110
msgid ""
"With :doc:`MMAPv1 </core/mmapv1>`, when a write operation occurs, MongoDB "
"updates the in-memory view. With journaling enabled, MongoDB writes the in-"
"memory changes first to on-disk journal files. If MongoDB should terminate "
"or encounter an error before committing the changes to the data files, "
"MongoDB can use the journal files to apply the write operation to the data "
"files and maintain a consistent state."
msgstr ""


#: ../source/core/journaling.txt:123
msgid ""

"With journaling, MongoDB's storage layer has two internal views of the data "
"set: the *private view*, used to write to the journal files, and the *shared"
" view*, used to write to the data files:"

msgstr ""
"当 :doc:`write operations </core/write-operations>` 发生时，MongoDB将数据写入"
"内存的 ``private view`` ，然后批量复制写操作到journal文件。journal文件将这些操"
"作存储到磁盘保证持久性。每条journal都描述了写操作在数据文件里发生改变的具体地"
"址。"

#: ../source/core/journaling.txt:127
msgid "MongoDB first applies write operations to the private view."
msgstr ""

#: ../source/core/journaling.txt:129
msgid ""
"MongoDB then applies the changes in the private view to the on-disk "
":ref:`journal files <journaling-journal-files>` in the ``journal`` directory"
" roughly every 100 milliseconds. MongoDB records the write operations to the"
" on-disk journal files in batches called *group commits*. Grouping the "
"commits help minimize the performance impact of journaling since these "
"commits must block all writers during the commit. Writes to the journal are "
"atomic, ensuring the consistency of the on-disk journal files. For "
"information on the frequency of the commit interval, see "
":setting:`storage.journal.commitIntervalMs`."
msgstr ""

#: ../source/core/journaling.txt:140
msgid ""
"Upon a journal commit, MongoDB applies the changes from the journal to the "
"shared view."
msgstr ""
"然后MongoDB将journal文件里的写操作应用到 ``shared view`` 。这时， ``shared "
"view`` 将与数据文件中的数据不一致。"

#: ../source/core/journaling.txt:143
msgid ""

"Finally, MongoDB applies the changes in the shared view to the data files. "
"More precisely, at default intervals of 60 seconds, MongoDB asks the "
"operating system to flush the shared view to the data files. The operating "
"system may choose to flush the shared view to disk at a higher frequency "
"than 60 seconds, particularly if the system is low on free memory. To change"
" the interval for writing to the data files, use the "
":setting:`storage.syncPeriodSecs` setting."

msgstr ""
"在默认的60秒间隔内，MongoDB通过操作系统将 ``shared view`` 里的数据刷新到磁盘"
"上。这保证了数据文件里的数据与最新写操作数据是一致的。操作系统可以选择高于60秒"
"的频率刷新 ``shared view`` ，特别是当系统的空闲内存较少时。"

#: ../source/core/journaling.txt:151
msgid ""
"If the :program:`mongod` instance were to crash without having applied the "
"writes to the data files, the journal could replay the writes to the shared "
"view for eventual write to the data files."
msgstr ""

#: ../source/core/journaling.txt:155
msgid ""

"When MongoDB flushes write operations to the data files, MongoDB notes which"
" journal writes have been flushed. Once a journal file contains only flushed"
" writes, it is no longer needed for recovery and MongoDB can recycle it for "
"a new journal file."
msgstr ""

#: ../source/core/journaling.txt:160
msgid ""
"Once the journal operations have been applied to the shared view and flushed"
" to disk (i.e. pages in the shared view and  private view are in sync), "
"MongoDB asks the operating system to remap the shared view to the private "
"view in order to save physical RAM. MongoDB routinely asks the operating "
"system to remap the shared view to the private view in order to save "
"physical RAM. Upon a new remapping, the operating system knows that physical"
" memory pages can be shared between the shared view and the private view "
"mappings."
msgstr ""

#: ../source/core/journaling.txt:171
msgid ""
"The interaction between the shared view and the on-disk data files is "
"similar to how MongoDB works *without* journaling. Without journaling, "
"MongoDB asks the operating system to flush in-memory changes to the data "
"files every 60 seconds."
msgstr ""

#: ../source/core/journaling.txt:181
msgid ""
"With journaling enabled, MongoDB creates a subdirectory named ``journal`` "
"under the :setting:`~storage.dbPath` directory. The ``journal`` directory "
"contains journal files named ``j._<sequence>`` where ``<sequence>`` is an "
"integer starting from ``0`` and a \"last sequence number\" file ``lsn``."

msgstr ""
"当MongoDB刷新journal文件的写操作到数据文件时，会记录哪些journal写操作已经被刷"
"新过。一旦journal文件中只包含被刷新过的写操作时，这个文件就不会再起到恢复数据"
"的作用，MongoDB会删除它，或者将其回收用作新的journal文件"

#: ../source/core/journaling.txt:187
msgid ""
"Journal files contain the write ahead logs; each journal entry describes the"
" bytes the write operation changed in the data files. Journal files are "
"append-only files. When a journal file holds 1 gigabyte of data, MongoDB "
"creates a new journal file. If you use the :setting:`storage.smallFiles` "
"option when starting :program:`mongod`, you limit the size of each journal "
"file to 128 megabytes."
msgstr ""
"作为整个journaling机制的一部分，MongoDB会照常请求操作系统将 ``shared view`` 重"
"新映射到 ``private view`` ，以节省物理内存。这一次的重新映射，操作系统知道将物"
"理内存页共享在 ``shared view`` 和 ``private view`` 映射之间。"

#: ../source/core/journaling.txt:194
msgid ""

"The ``lsn`` file contains the last time MongoDB flushed the changes to the "
"data files."

msgstr ""

#: ../source/core/journaling.txt:197
msgid ""
"Once MongoDB applies all the write operations in a particular journal file "
"to the data files, MongoDB can recycle it for a new journal file."
msgstr ""

#: ../source/core/journaling.txt:200
msgid ""
"Unless you write *many* bytes of data per second, the ``journal`` directory "
"should contain only two or three journal files."
msgstr ""

#: ../source/core/journaling.txt:203
msgid ""
"A clean shutdown removes all the files in the journal directory. A dirty "
"shutdown (crash) leaves files in the journal directory; these are used to "
"automatically recover the database to a consistent state when the mongod "
"process is restarted."
msgstr ""

#: ../source/core/journaling.txt:209
msgid "Journal Directory"
msgstr ""

#: ../source/core/journaling.txt:217
msgid ""
"If you place the journal on a different filesystem from your data files, you"
" *cannot* use a filesystem snapshot alone to capture valid backups of a "
":setting:`~storage.dbPath` directory. In this case, use "
":method:`~db.fsyncLock()` to ensure that database files are consistent "
"before the snapshot and :method:`~db.fsyncUnlock()` once the snapshot is "
"complete."
msgstr ""

#: ../source/core/journaling.txt:225
msgid "Preallocation Lag"
msgstr ""

#: ../source/core/journaling.txt:227
msgid ""
"MongoDB may preallocate journal files if the :program:`mongod` process "
"determines that it is more efficient to preallocate journal files than "
"create new journal files as needed."
msgstr ""

#: ../source/core/journaling.txt:231
msgid ""
"Depending on your filesystem, you might experience a preallocation lag the "
"first time you start a :program:`mongod` instance with journaling enabled. "
"The amount of time required to pre-allocate files might last several "
"minutes; during this time, you will not be able to connect to the database. "
"This is a one-time preallocation and does not occur with future invocations."
msgstr ""

#: ../source/core/journaling.txt:243
msgid "Journaling and the In-Memory Storage Engine"
msgstr ""

#: ../source/core/journaling.txt:245
msgid ""
"Starting in MongoDB Enterprise version 3.2.6, the :doc:`In-Memory Storage "
"Engine </core/inmemory>` is part of general availability (GA). Because its "
"data is kept in memory, there is no separate journal. Write operations with "
"a write concern of :writeconcern:`j: true <j>` are immediately acknowledged."
msgstr ""

#: ../source/core/journaling.txt:251
msgid ":ref:`In-Memory Storage Engine: Durability <inmemory-durability>`"
msgstr ""

#~ msgid "Journaling Mechanics"
#~ msgstr ""

#~ msgid ""
#~ "When running with journaling, MongoDB stores and applies :doc:`write "
#~ "operations </core/write-operations>` in memory and in the on-disk journal "
#~ "before the changes are present in the data files on disk. Writes to the "
#~ "journal are atomic, ensuring the consistency of the on-disk journal files. "
#~ "This document discusses the implementation and mechanics of journaling in "
#~ "MongoDB systems.  See :doc:`/tutorial/manage-journaling` for information on "
#~ "configuring, tuning, and managing journaling."
#~ msgstr ""

#~ msgid ""
#~ "With journaling enabled, MongoDB creates a journal subdirectory within the "
#~ "directory defined by :setting:`~storage.dbPath`, which is :file:`/data/db` "
#~ "by default. The journal directory holds journal files, which contain write-"
#~ "ahead redo logs. The directory also holds a last-sequence-number file. A "
#~ "clean shutdown removes all the files in the journal directory. A dirty "
#~ "shutdown (crash) leaves files in the journal directory; these are used to "
#~ "automatically recover the database to a consistent state when the mongod "
#~ "process is restarted."
#~ msgstr ""

#~ msgid ""
#~ "Journal files are append-only files and have file names prefixed with "
#~ "``j._``. When a journal file holds 1 gigabyte of data, MongoDB creates a new"
#~ " journal file. Once MongoDB applies all the write operations in a particular"
#~ " journal file to the database data files, it deletes the file, as it is no "
#~ "longer needed for recovery purposes. Unless you write *many* bytes of data "
#~ "per second, the journal directory should contain only two or three journal "
#~ "files."
#~ msgstr ""

#~ msgid ""
#~ "You can use the :setting:`storage.smallFiles` run time option when starting "
#~ ":program:`mongod` to limit the size of each journal file to 128 megabytes, "
#~ "if you prefer."
#~ msgstr ""

#~ msgid ""
#~ "If you place the journal on a different filesystem from your data files you "
#~ "*cannot* use a filesystem snapshot alone to capture valid backups of a "
#~ ":setting:`~storage.dbPath` directory. In this case, use "
#~ ":method:`~db.fsyncLock()` to ensure that database files are consistent "
#~ "before the snapshot and :method:`~db.fsyncUnlock()` once the snapshot is "
#~ "complete."
#~ msgstr ""

#~ msgid ""
#~ "Depending on your filesystem, you might experience a preallocation lag the "
#~ "first time you start a :program:`mongod` instance with journaling enabled."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB may preallocate journal files if the :program:`mongod` process "
#~ "determines that it is more efficient to preallocate journal files than "
#~ "create new journal files as needed. The amount of time required to pre-"
#~ "allocate lag might last several minutes, during which you will not be able "
#~ "to connect to the database. This is a one-time preallocation and does not "
#~ "occur with future invocations."
#~ msgstr ""

#~ msgid "Storage Views used in Journaling"
#~ msgstr ""

#~ msgid ""
#~ "With journaling, MongoDB's storage layer has two internal views of the data "
#~ "set."
#~ msgstr ""

#~ msgid ""
#~ "The ``shared view`` stores modified data for upload to the MongoDB data "
#~ "files. The ``shared view`` is the only view with direct access to the "
#~ "MongoDB data files. When running with journaling, :program:`mongod` asks the"
#~ " operating system to map your existing on-disk data files to the ``shared "
#~ "view`` virtual memory view. The operating system maps the files but does not"
#~ " load them. MongoDB later loads data files into the ``shared view`` as "
#~ "needed."
#~ msgstr ""

#~ msgid ""
#~ "The ``private view`` stores data for use with :doc:`read operations </core"
#~ "/read-operations>`.  The ``private view`` is the first place MongoDB applies"
#~ " new :doc:`write operations </core/write-operations>`. Upon a journal "
#~ "commit, MongoDB copies the changes made in the ``private view`` to the "
#~ "``shared view``, where they are then available for uploading to the database"
#~ " data files."
#~ msgstr ""

#~ msgid ""
#~ "The journal is an on-disk view that stores new write operations after "
#~ "MongoDB applies the operation to the ``private view`` but before applying "
#~ "them to the data files. The journal provides durability. If the "
#~ ":program:`mongod` instance were to crash without having applied the writes "
#~ "to the data files, the journal could replay the writes to the ``shared "
#~ "view`` for eventual upload to the data files."
#~ msgstr ""

#~ msgid "How Journaling Records Write Operations"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB copies the write operations to the journal in batches called group "
#~ "commits. These \"group commits\" help minimize the performance impact of "
#~ "journaling, since a group commit must block all writers during the commit.  "
#~ "See :setting:`~storage.journal.commitIntervalMs` for information on the "
#~ "default commit interval."
#~ msgstr ""

#~ msgid ""
#~ "Journaling stores raw operations that allow MongoDB to reconstruct the "
#~ "following:"
#~ msgstr ""

#~ msgid "document insertion/updates"
#~ msgstr ""

#~ msgid "index modifications"
#~ msgstr ""

#~ msgid "metadata changes to the namespace files"
#~ msgstr ""

#~ msgid "creation and dropping of databases and their associated data files"
#~ msgstr ""

#~ msgid ""
#~ "As :doc:`write operations </core/write-operations>` occur, MongoDB writes "
#~ "the data to the ``private view`` in RAM and then copies the write operations"
#~ " in batches to the journal. The journal stores the operations on disk to "
#~ "ensure durability.  Each journal entry describes the bytes the write "
#~ "operation changed in the data files."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB next applies the journal's write operations to the ``shared view``. "
#~ "At this point, the ``shared view`` becomes inconsistent with the data files."
#~ msgstr ""

#~ msgid ""
#~ "At default intervals of 60 seconds, MongoDB asks the operating system to "
#~ "flush the ``shared view`` to disk. This brings the data files up-to-date "
#~ "with the latest write operations.  The operating system may choose to flush "
#~ "the ``shared view`` to disk at a higher frequency than 60 seconds, "
#~ "particularly if the system is low on free memory."
#~ msgstr ""

#~ msgid ""
#~ "When MongoDB flushes write operations to the data files, MongoDB notes which"
#~ " journal writes have been flushed.  Once a journal file contains only "
#~ "flushed writes, it is no longer needed for recovery, and MongoDB either "
#~ "deletes it or recycles it for a new journal file."
#~ msgstr ""

#~ msgid ""
#~ "As part of journaling, MongoDB routinely asks the operating system to remap "
#~ "the ``shared view`` to the ``private view``, in order to save physical RAM. "
#~ "Upon a new remapping, the operating system knows that physical memory pages "
#~ "can be shared between the ``shared view`` and the ``private view`` mappings."
#~ msgstr ""

#~ msgid ""
#~ "The interaction between the ``shared view`` and the on-disk data files is "
#~ "similar to how MongoDB works *without* journaling, which is that MongoDB "
#~ "asks the operating system to flush in-memory changes back to the data files "
#~ "every 60 seconds."
#~ msgstr ""
