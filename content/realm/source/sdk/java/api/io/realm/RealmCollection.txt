.. meta::
   :robots: noindex, nosnippet


.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol



Interface RealmCollection
^^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_RealmCollection:



io.realm
========

**Implemented interfaces:**



- `java.util.Collection <https://docs.oracle.com/javase/7/docs/api/java/util/Collection.html>`__ 
- `java.lang.Iterable <https://docs.oracle.com/javase/7/docs/api/java/lang/Iterable.html>`__ 


``RealmCollection``  is the root of the collection hierarchy that Realm supports. It defines operations on data collections and the behavior that they will have in all implementations of ``RealmCollection`` s.

Realm collections are "live" views to the underlying data. This means that they automatically will be kept up to date. As a consequence, using methods like `Collections.unmodifiableCollection(Collection) <https://docs.oracle.com/javase/7/docs/api/java/util/Collections/unmodifiableCollection(Collection).html>`__  will not prevent a collection from being modified.






Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public **double**
     - | :ref:`average <io_realm_RealmCollection_average>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName
       | )
       
       
       Returns the average of a given field.
       
       
       
   
   * - public **boolean**
     - | :ref:`contains <io_realm_RealmCollection_contains>` (
       |  `Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__  object
       | )
       
       
       Tests whether this ``Collection``  contains the specified object.
       
       
       
       
       
   
   * - public **boolean**
     - | :ref:`deleteAllFromRealm <io_realm_RealmCollection_deleteAllFromRealm>` ()
       | 
       
       
       This deletes all objects in the collection from the underlying Realm as well as from the collection.
       
       
       
   
   * - public **boolean**
     - | :ref:`isLoaded <io_realm_RealmCollection_isLoaded>` ()
       | 
       
       
       Checks if a collection has finished loading its data yet.
       
       
       
   
   * - public **boolean**
     - | :ref:`isManaged <io_realm_RealmCollection_isManaged>` ()
       | 
       
       
       Checks if the collection is managed by Realm.
       
       
       
   
   * - public **boolean**
     - | :ref:`isValid <io_realm_RealmCollection_isValid>` ()
       | 
       
       
       Checks if the collection is still valid to use, i.e., the :ref:`io.realm.Realm <io_realm_Realm>`  instance hasn't been closed.
       
       
       
       
       
   
   * - public **boolean**
     - | :ref:`load <io_realm_RealmCollection_load>` ()
       | 
       
       
       Blocks the collection until all data are available.
       
       
       
   
   * - public `Number <https://docs.oracle.com/javase/7/docs/api/java/lang/Number.html>`__ 
     - | :ref:`max <io_realm_RealmCollection_max>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName
       | )
       
       
       Finds the maximum value of a field.
       
       
       
   
   * - public `Date <https://docs.oracle.com/javase/7/docs/api/java/util/Date.html>`__ 
     - | :ref:`maxDate <io_realm_RealmCollection_maxDate>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName
       | )
       
       
       Finds the maximum date.
       
       
       
   
   * - public `Number <https://docs.oracle.com/javase/7/docs/api/java/lang/Number.html>`__ 
     - | :ref:`min <io_realm_RealmCollection_min>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName
       | )
       
       
       Finds the minimum value of a field.
       
       
       
   
   * - public `Date <https://docs.oracle.com/javase/7/docs/api/java/util/Date.html>`__ 
     - | :ref:`minDate <io_realm_RealmCollection_minDate>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName
       | )
       
       
       Finds the minimum date.
       
       
       
   
   * - public `Number <https://docs.oracle.com/javase/7/docs/api/java/lang/Number.html>`__ 
     - | :ref:`sum <io_realm_RealmCollection_sum>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName
       | )
       
       
       Calculates the sum of a given field.
       
       
       
   
   * - public :ref:`RealmQuery <io_realm_RealmQuery>` 
     - | :ref:`where <io_realm_RealmCollection_where>` ()
       | 
       
       
       Returns a :ref:`RealmQuery <io_realm_RealmQuery>` , which can be used to query for specific objects from this collection.
       
       
       
       
       
   
   


Inherited Methods
=================



Method Detail
=============

.. _average:

.. _average__:

.. _RealmCollection_average:

.. _RealmCollection_average__:

.. _io_realm_RealmCollection_average:

.. _io_realm_RealmCollection_average__:



average
-------

.. _io_realm_RealmCollection_average_java_lang_String_:

.. _io_realm_RealmCollection_average_String_:

.. _average_java_lang_String_:

.. _average_String_:

.. _RealmCollection_average_java_lang_String_:

.. _RealmCollection_average_String_:

.. list-table::
   :header-rows: 1
   
   * - | public **double** :ref:`average <io_realm_RealmCollection_average>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName
       | )
       
       
       
   
   * - Returns the average of a given field.
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - the field to calculate average on. Only number fields are supported.
          
          
          
       
       
       
       
       **Returns**
       
       the average for the given field amongst objects in query results. This will be of type double for all types of number fields. If no objects exist or they all have ``null``  as the value for the given field, ``0``  will be returned. When computing the average, objects with ``null``  values are ignored.
       
       
       
       
       
       
       **Throws**
       
       - `java.lang.IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the field is not a number type.
          
          
          
       - `java.lang.IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if the Realm has been closed or called from an incorrect thread.
          
          
          
       
       
       
       
       
   
   


.. _contains:

.. _contains__:

.. _RealmCollection_contains:

.. _RealmCollection_contains__:

.. _io_realm_RealmCollection_contains:

.. _io_realm_RealmCollection_contains__:



contains
--------

.. _io_realm_RealmCollection_contains_java_lang_Object_:

.. _io_realm_RealmCollection_contains_Object_:

.. _contains_java_lang_Object_:

.. _contains_Object_:

.. _RealmCollection_contains_java_lang_Object_:

.. _RealmCollection_contains_Object_:

.. list-table::
   :header-rows: 1
   
   * - | public **boolean** :ref:`contains <io_realm_RealmCollection_contains>` (
       |  `Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__  object
       | )
       
       
       
   
   * - Tests whether this ``Collection``  contains the specified object. Returns ``true``  if and only if at least one element ``elem``  in this ``Collection``  meets following requirement: ``(object==null ? elem==null : object.equals(elem))`` .
       
       
       
       
       
       
       **Parameters**
       
       - ``object`` - the object to search for.
          
          
          
       
       
       
       
       **Returns**
       
       ``true``  if object is an element of this ``Collection`` , ``false``  otherwise.
       
       
       
       
       
       
       **Throws**
       
       - `NullPointerException <https://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html>`__  - if the object to look for is ``null``  and this ``Collection``  doesn't support ``null``  elements.
          
          
          
          
          
       
       
       
       
       
   
   


.. _deleteAllFromRealm:

.. _deleteAllFromRealm__:

.. _RealmCollection_deleteAllFromRealm:

.. _RealmCollection_deleteAllFromRealm__:

.. _io_realm_RealmCollection_deleteAllFromRealm:

.. _io_realm_RealmCollection_deleteAllFromRealm__:



deleteAllFromRealm
------------------

.. list-table::
   :header-rows: 1
   
   * - | public **boolean** :ref:`deleteAllFromRealm <io_realm_RealmCollection_deleteAllFromRealm>` ()
       | 
       
       
       
   
   * - This deletes all objects in the collection from the underlying Realm as well as from the collection.
       
       
       
       
       
       
       **Returns**
       
       ``true``  if objects was deleted, ``false``  otherwise.
       
       
       
       
       
       
       **Throws**
       
       - `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if the corresponding Realm is closed or in an incorrect thread.
          
          
          
       - `java.lang.IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if the Realm has been closed or called from an incorrect thread.
          
          
          
       
       
       
       
       
   
   


.. _isLoaded:

.. _isLoaded__:

.. _RealmCollection_isLoaded:

.. _RealmCollection_isLoaded__:

.. _io_realm_RealmCollection_isLoaded:

.. _io_realm_RealmCollection_isLoaded__:



isLoaded
--------

.. list-table::
   :header-rows: 1
   
   * - | public **boolean** :ref:`isLoaded <io_realm_RealmCollection_isLoaded>` ()
       | 
       
       
       
   
   * - Checks if a collection has finished loading its data yet.
       
       
       
       
       
       
       **Returns**
       
       ``true``  if data has been loaded and is available, ``false``  if data is still being loaded.
       
       
       
       
       
       
       
       
       
   
   


.. _isManaged:

.. _isManaged__:

.. _RealmCollection_isManaged:

.. _RealmCollection_isManaged__:

.. _io_realm_RealmCollection_isManaged:

.. _io_realm_RealmCollection_isManaged__:



isManaged
---------

.. list-table::
   :header-rows: 1
   
   * - | public **boolean** :ref:`isManaged <io_realm_RealmCollection_isManaged>` ()
       | 
       
       
       
   
   * - Checks if the collection is managed by Realm. A managed collection is just a wrapper around the data in the underlying Realm file. On Looper threads, a managed collection will be live-updated so it always points to the latest data. Managed collections are thread confined so that they cannot be accessed from other threads than the one that created them.If this method returns ``false`` , the collection is unmanaged. An unmanaged collection is just a normal java collection, so it will not be live updated.
       
       
       
       
       
       
       
       
       
       
       **Returns**
       
       ``true``  if this is a managed :ref:`RealmCollection <io_realm_RealmCollection>` , ``false``  otherwise.
       
       
       
       
       
       
       
       
       
   
   


.. _isValid:

.. _isValid__:

.. _RealmCollection_isValid:

.. _RealmCollection_isValid__:

.. _io_realm_RealmCollection_isValid:

.. _io_realm_RealmCollection_isValid__:



isValid
-------

.. list-table::
   :header-rows: 1
   
   * - | public **boolean** :ref:`isValid <io_realm_RealmCollection_isValid>` ()
       | 
       
       
       
   
   * - Checks if the collection is still valid to use, i.e., the :ref:`io.realm.Realm <io_realm_Realm>`  instance hasn't been closed. It will always return ``true``  for an unmanaged collection.
       
       
       
       
       
       
       
       
       **Returns**
       
       ``true``  if it is still valid to use or an unmanaged collection, ``false``  otherwise.
       
       
       
       
       
       
       
       
       
   
   


.. _load:

.. _load__:

.. _RealmCollection_load:

.. _RealmCollection_load__:

.. _io_realm_RealmCollection_load:

.. _io_realm_RealmCollection_load__:



load
----

.. list-table::
   :header-rows: 1
   
   * - | public **boolean** :ref:`load <io_realm_RealmCollection_load>` ()
       | 
       
       
       
   
   * - Blocks the collection until all data are available.
       
       
       
       
       
       
       **Returns**
       
       ``true``  if the data could be successfully loaded, ``false``  otherwise.
       
       
       
       
       
       
       
       
       
   
   


.. _max:

.. _max__:

.. _RealmCollection_max:

.. _RealmCollection_max__:

.. _io_realm_RealmCollection_max:

.. _io_realm_RealmCollection_max__:



max
----

.. _io_realm_RealmCollection_max_java_lang_String_:

.. _io_realm_RealmCollection_max_String_:

.. _max_java_lang_String_:

.. _max_String_:

.. _RealmCollection_max_java_lang_String_:

.. _RealmCollection_max_String_:

.. list-table::
   :header-rows: 1
   
   * - | public `Number <https://docs.oracle.com/javase/7/docs/api/java/lang/Number.html>`__  :ref:`max <io_realm_RealmCollection_max>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName
       | )
       
       
       
   
   * - Finds the maximum value of a field.
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - the field to look for a maximum on. Only number fields are supported.
          
          
          
       
       
       
       
       **Returns**
       
       if no objects exist or they all have ``null``  as the value for the given field, ``null``  will be returned. Otherwise the maximum value is returned. When determining the maximum value, objects with ``null``  values are ignored.
       
       
       
       
       
       
       **Throws**
       
       - `java.lang.IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the field is not a number type.
          
          
          
       - `java.lang.IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if the Realm has been closed or called from an incorrect thread.
          
          
          
       
       
       
       
       
   
   


.. _maxDate:

.. _maxDate__:

.. _RealmCollection_maxDate:

.. _RealmCollection_maxDate__:

.. _io_realm_RealmCollection_maxDate:

.. _io_realm_RealmCollection_maxDate__:



maxDate
-------

.. _io_realm_RealmCollection_maxDate_java_lang_String_:

.. _io_realm_RealmCollection_maxDate_String_:

.. _maxDate_java_lang_String_:

.. _maxDate_String_:

.. _RealmCollection_maxDate_java_lang_String_:

.. _RealmCollection_maxDate_String_:

.. list-table::
   :header-rows: 1
   
   * - | public `Date <https://docs.oracle.com/javase/7/docs/api/java/util/Date.html>`__  :ref:`maxDate <io_realm_RealmCollection_maxDate>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName
       | )
       
       
       
   
   * - Finds the maximum date.
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - the field to look for the maximum date. If fieldName is not of Date type, an exception is thrown.
          
          
          
       
       
       
       
       **Returns**
       
       if no objects exist or they all have ``null``  as the value for the given date field, ``null``  will be returned. Otherwise the maximum date is returned. When determining the maximum date, objects with ``null``  values are ignored.
       
       
       
       
       
       
       **Throws**
       
       - `java.lang.IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if fieldName is not a Date field.
          
          
          
       - `java.lang.IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if the Realm has been closed or called from an incorrect thread.
          
          
          
       
       
       
       
       
   
   


.. _min:

.. _min__:

.. _RealmCollection_min:

.. _RealmCollection_min__:

.. _io_realm_RealmCollection_min:

.. _io_realm_RealmCollection_min__:



min
----

.. _io_realm_RealmCollection_min_java_lang_String_:

.. _io_realm_RealmCollection_min_String_:

.. _min_java_lang_String_:

.. _min_String_:

.. _RealmCollection_min_java_lang_String_:

.. _RealmCollection_min_String_:

.. list-table::
   :header-rows: 1
   
   * - | public `Number <https://docs.oracle.com/javase/7/docs/api/java/lang/Number.html>`__  :ref:`min <io_realm_RealmCollection_min>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName
       | )
       
       
       
   
   * - Finds the minimum value of a field.
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - the field to look for a minimum on. Only number fields are supported.
          
          
          
       
       
       
       
       **Returns**
       
       if no objects exist or they all have ``null``  as the value for the given field, ``null``  will be returned. Otherwise the minimum value is returned. When determining the minimum value, objects with ``null``  values are ignored.
       
       
       
       
       
       
       **Throws**
       
       - `java.lang.IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the field is not a number type.
          
          
          
       - `java.lang.IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if the Realm has been closed or called from an incorrect thread.
          
          
          
       
       
       
       
       
   
   


.. _minDate:

.. _minDate__:

.. _RealmCollection_minDate:

.. _RealmCollection_minDate__:

.. _io_realm_RealmCollection_minDate:

.. _io_realm_RealmCollection_minDate__:



minDate
-------

.. _io_realm_RealmCollection_minDate_java_lang_String_:

.. _io_realm_RealmCollection_minDate_String_:

.. _minDate_java_lang_String_:

.. _minDate_String_:

.. _RealmCollection_minDate_java_lang_String_:

.. _RealmCollection_minDate_String_:

.. list-table::
   :header-rows: 1
   
   * - | public `Date <https://docs.oracle.com/javase/7/docs/api/java/util/Date.html>`__  :ref:`minDate <io_realm_RealmCollection_minDate>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName
       | )
       
       
       
   
   * - Finds the minimum date.
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - the field to look for the minimum date. If fieldName is not of Date type, an exception is thrown.
          
          
          
       
       
       
       
       **Returns**
       
       if no objects exist or they all have ``null``  as the value for the given date field, ``null``  will be returned. Otherwise the minimum date is returned. When determining the minimum date, objects with ``null``  values are ignored.
       
       
       
       
       
       
       **Throws**
       
       - `java.lang.IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if fieldName is not a Date field.
          
          
          
       - `java.lang.IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if the Realm has been closed or called from an incorrect thread.
          
          
          
       
       
       
       
       
   
   


.. _sum:

.. _sum__:

.. _RealmCollection_sum:

.. _RealmCollection_sum__:

.. _io_realm_RealmCollection_sum:

.. _io_realm_RealmCollection_sum__:



sum
----

.. _io_realm_RealmCollection_sum_java_lang_String_:

.. _io_realm_RealmCollection_sum_String_:

.. _sum_java_lang_String_:

.. _sum_String_:

.. _RealmCollection_sum_java_lang_String_:

.. _RealmCollection_sum_String_:

.. list-table::
   :header-rows: 1
   
   * - | public `Number <https://docs.oracle.com/javase/7/docs/api/java/lang/Number.html>`__  :ref:`sum <io_realm_RealmCollection_sum>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName
       | )
       
       
       
   
   * - Calculates the sum of a given field.
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - the field to sum. Only number fields are supported.
          
          
          
       
       
       
       
       **Returns**
       
       the sum. If no objects exist or they all have ``null``  as the value for the given field, ``0``  will be returned. When computing the sum, objects with ``null``  values are ignored.
       
       
       
       
       
       
       **Throws**
       
       - `java.lang.IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the field is not a number type.
          
          
          
       - `java.lang.IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if the Realm has been closed or called from an incorrect thread.
          
          
          
       
       
       
       
       
   
   


.. _where:

.. _where__:

.. _RealmCollection_where:

.. _RealmCollection_where__:

.. _io_realm_RealmCollection_where:

.. _io_realm_RealmCollection_where__:



where
-----

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`RealmQuery <io_realm_RealmQuery>`  :ref:`where <io_realm_RealmCollection_where>` ()
       | 
       
       
       
   
   * - Returns a :ref:`RealmQuery <io_realm_RealmQuery>` , which can be used to query for specific objects from this collection.
       
       
       
       
       
       
       
       
       **Returns**
       
       a RealmQuery object.
       
       
       
       
       **Throws**
       
       - `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if the Realm instance has been closed or queries are not otherwise available.
          
          
          
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`io.realm.RealmQuery <io_realm_RealmQuery>` 
             
             
             
          
          
          
       
       
   
   



