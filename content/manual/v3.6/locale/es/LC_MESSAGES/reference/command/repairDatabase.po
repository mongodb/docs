# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2013-12-16 23:14+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/command/repairDatabase.txt:3
msgid "repairDatabase"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:14
msgid "Definition"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:18
msgid ""
"Rebuilds the database and indexes by discarding invalid or corrupt data, "
"which may be present due to an unexpected system restart or crash. "
":dbcommand:`repairDatabase` is analogous to a ``fsck`` command for file "
"systems."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:25
msgid ""
"Before using :dbcommand:`repairDatabase`, make a backup copy of the files"
" in the dbpath directory."
msgstr ""

#: ../source/includes/note-repair.rst:1
msgid ""
"If you are running with :term:`journaling <journal>` enabled, there is "
"almost never any need to run :dbcommand:`repairDatabase` unless you need "
"to recover from a disk-level data corruption. In the event of an unclean "
"shutdown, the server will be able to restore the data files to a clean "
"state automatically."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:30
msgid ""
"Avoid running :dbcommand:`repairDatabase` against a replica set. If you "
"are trying to repair a :term:`replica set` member, and you have access to"
" an intact copy of your data (e.g. a recent backup or an intact member of"
" the :term:`replica set`), you should restore from that intact copy (see "
":doc:`/tutorial/resync-replica-set-member`), and **not** use "
":dbcommand:`repairDatabase`."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:38
msgid ""
"You should only use the :dbcommand:`repairDatabase` command and "
":ref:`associated wrappers <repairdb-helpers>` if you have no other "
"options. These operations remove and do not save any corrupt data during "
"the repair process."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:43
msgid ":dbcommand:`repairDatabase` takes the following form:"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:49
msgid ":dbcommand:`repairDatabase` has the following fields:"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:7
msgid "Field"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:9
msgid "Type"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:11
msgid "Description"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:13
msgid "``preserveClonedFilesOnFailure``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:15
#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:31
msgid "boolean"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:17
#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:50
msgid ""
"When ``true``, ``repairDatabase`` will not delete temporary files in the "
"backup directory on error, and all new files are created with the "
"\"backup\" instead of \"_tmp\" directory prefix. By default "
"``repairDatabase`` does not delete temporary files, and uses the \"_tmp\""
" naming prefix for new files."
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:23
#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:56
msgid ""
"``preserveClonedFilesOnFailure`` is only available with the ``mmapv1`` "
"storage engine."
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:29
msgid "``backupOriginalFiles``"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:33
#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:64
msgid ""
"When ``true``, ``repairDatabase`` moves old database files to the backup "
"directory instead of deleting them before moving new files into place. "
"New files are created with the \"backup\" instead of \"_tmp\" directory "
"prefix. By default, ``repairDatabase`` leaves temporary files unchanged, "
"and uses the \"_tmp\" naming prefix for new files."
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:39
#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst:70
msgid ""
"``backupOriginalFiles`` is only available with the ``mmapv1`` storage "
"engine."
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst
msgid "field boolean preserveClonedFilesOnFailure"
msgstr ""

#: ../source/includes/apiargs/dbcommand-repairDatabase-field.rst
msgid "field boolean backupOriginalFiles"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:53
msgid "You can explicitly set the options as follows:"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:61
msgid ""
"See :option:`mongod --repair` and :option:`mongodump --repair` for "
"information on these related options."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:68
msgid "``repairDatabase`` Wrappers"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:70
msgid "You may invoke :dbcommand:`repairDatabase` from multiple contexts:"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:72
msgid "Use the :binary:`~bin.mongo` shell to run the command, as above."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:74
msgid "Use the :method:`db.repairDatabase()` in the :binary:`~bin.mongo` shell."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:77
msgid ""
"Run :binary:`~bin.mongod` directly from your system's shell. Make sure "
"that :binary:`~bin.mongod` isn't already running, and that you invoke "
":binary:`~bin.mongod` as a user that has access to MongoDB's data files:"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:85
msgid ""
"For MMAPv1, you can specify a temporary working directory that the "
"command will use during the repair operation:"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:92
msgid "See :setting:`~storage.repairPath` for more information."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:95
msgid "Behavior"
msgstr ""

#: ../source/includes/warning-blocking-global.rst:3
msgid ""
"This command obtains a global write lock and will block other operations "
"until it has completed."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:99
msgid ""
"The time requirement for :dbcommand:`repairDatabase` depends on the size "
"of the data set."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:102
msgid ":dbcommand:`repairDatabase` recreates all indexes in the database."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:105
msgid "MMAPv1"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:107
msgid ""
":dbcommand:`repairDatabase` requires free disk space equal to the size of"
" your current data set plus 2 gigabytes. If the volume that holds dbpath "
"lacks sufficient space, you can mount a separate volume and use that for "
"the repair. When mounting a separate volume for "
":dbcommand:`repairDatabase` you must run :dbcommand:`repairDatabase` from"
" the command line and use the :option:`--repairpath <mongod "
"--repairpath>` switch to specify the folder in which to store temporary "
"repair files."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:118
msgid "WiredTiger"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:120
msgid ""
":dbcommand:`repairDatabase` performs the operation in-place and does not "
"require additional disk space."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:125
msgid "``repairDatabase`` and ``compact``"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:127
msgid ""
"The :dbcommand:`repairDatabase` command rebuilds the database, which for "
"MMAPv1, has a secondary effect of compacting all the collections."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:130
msgid ""
"For WiredTiger, the operation rebuilds the database but does **not** "
"result in the compaction of the collections in the database."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:134
msgid ":dbcommand:`compact`"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:137
msgid "Example"
msgstr ""

#: ../source/reference/command/repairDatabase.txt:141
msgid ""
"If you are trying to repair a :term:`replica set` member, and you have "
"access to an intact copy of your data (e.g. a recent backup or an intact "
"member of the :term:`replica set`), see :doc:`/tutorial/resync-replica-"
"set-member` instead."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:148
msgid "Use :dbcommand:`repairDatabase` if you have no other option."
msgstr ""

#: ../source/reference/command/repairDatabase.txt:150
msgid ""
"Before using :dbcommand:`repairDatabase`, make a backup copy of the data "
"files in the dbpath."
msgstr ""

#~ msgid ""
#~ "When using :term:`journaling <journal>`, there"
#~ " is almost never any need to "
#~ "run :dbcommand:`repairDatabase`. In the event"
#~ " of an unclean shutdown, the server"
#~ " will be able restore the data "
#~ "files to a pristine state automatically."
#~ msgstr ""

# ac48a2f5b6264c3099af84e55e68a022
#~ msgid ""
#~ "Checks and repairs errors and "
#~ "inconsistencies in data storage. "
#~ ":dbcommand:`repairDatabase` is analogous to a"
#~ " ``fsck`` command for file systems. "
#~ "Run the :dbcommand:`repairDatabase` command to"
#~ " ensure data integrity after the "
#~ "system experiences an unexpected system "
#~ "restart or crash, if:"
#~ msgstr ""

# 52022a9170d845ecb4d32e44591c342d
#~ msgid ""
#~ "The :program:`mongod` instance is not "
#~ "running with :term:`journaling <journal>` "
#~ "enabled."
#~ msgstr ""

# a785fbadcc1646b990a90dc205b5177d
#~ msgid ""
#~ "There are *no* other intact "
#~ ":term:`replica set` members with a "
#~ "complete data set."
#~ msgstr ""

# 64707af413c3453a905c0ebce9ef26eb
#~ msgid ""
#~ "During normal operations, only use the"
#~ " :dbcommand:`repairDatabase` command and wrappers"
#~ " including :method:`db.repairDatabase()` in the"
#~ " :program:`mongo` shell and :option:`mongod "
#~ "--repair`, to compact database files "
#~ "and/or reclaim disk space. Be aware "
#~ "that these operations remove and do "
#~ "not save any corrupt data during "
#~ "the repair process."
#~ msgstr ""

# 6d1434e29c8f4b41b8d31f9faf9c6583
#~ msgid ""
#~ "If you are trying to repair a "
#~ ":term:`replica set` member, and you have"
#~ " access to an intact copy of "
#~ "your data (e.g. a recent backup or"
#~ " an intact member of the "
#~ ":term:`replica set`), you should restore "
#~ "from that intact copy, and **not** "
#~ "use :dbcommand:`repairDatabase`."
#~ msgstr ""

# f18f0cfd78434e7db170e5d3252eb1cc
#~ msgid ""
#~ "The :dbcommand:`repairDatabase` command compacts "
#~ "all collections in the database. It "
#~ "is identical to running the "
#~ ":dbcommand:`compact` command on each "
#~ "collection individually."
#~ msgstr ""

# b1361782f8aa412292ea47dea4ecde69
#~ msgid ""
#~ ":dbcommand:`repairDatabase` reduces the total "
#~ "size of the data files on disk."
#~ " It also recreates all indexes in "
#~ "the database."
#~ msgstr ""

# 87986b2c114d42efa7a801e8c68e9e4f
#~ msgid "Use the :program:`mongo` shell to run the command, as above."
#~ msgstr ""

# 52a6c248659e41e2b464510b8db5d405
#~ msgid "Use the :method:`db.repairDatabase()` in the :program:`mongo` shell."
#~ msgstr ""

# 6a7697cfdb2242aabe19c93243dafb91
#~ msgid ""
#~ "Run :program:`mongod` directly from your "
#~ "system's shell. Make sure that "
#~ ":program:`mongod` isn't already running, and"
#~ " that you invoke :program:`mongod` as "
#~ "a user that has access to "
#~ "MongoDB's data files. Run as:"
#~ msgstr ""

# 9784d58fa8ac43e89d7c1e6ca0acbcb4
#~ msgid "To add a repair path:"
#~ msgstr ""

# 99fdfce015e0478583382d31d5feec21
#~ msgid ""
#~ ":option:`mongod --repair <mongod --repair>` "
#~ "will fail if your database is not"
#~ " a master or primary. In most "
#~ "cases, you should recover a corrupt "
#~ "secondary using the data from an "
#~ "existing intact node. To run repair "
#~ "on a secondary/slave restart the "
#~ "instance in standalone mode without the"
#~ " :option:`--replSet <mongod --replSet>` or "
#~ ":option:`--slave <mongod --slave>` options."
#~ msgstr ""

# a25c302186624f7c9ec23abe3d786799
#~ msgid "Using ``repairDatabase`` to Reclaim Disk Space"
#~ msgstr ""

# cf2ddbba7ef847b580b335f948d80b05
#~ msgid ""
#~ "You should not use :dbcommand:`repairDatabase`"
#~ " for data recovery unless you have"
#~ " no other option."
#~ msgstr ""

# 112b83888aa24245b473766e1f56800e
#~ msgid ""
#~ "However, if you trust that there "
#~ "is no corruption and you have "
#~ "enough free space, then "
#~ ":dbcommand:`repairDatabase` is the appropriate "
#~ "and the only way to reclaim disk"
#~ " space."
#~ msgstr ""

#~ msgid ""
#~ "When using :term:`journaling <journal>`, there"
#~ " is almost never any need to "
#~ "run :dbcommand:`repairDatabase`. In the event"
#~ " of an unclean shutdown, the server"
#~ " will be able to restore the "
#~ "data files to a pristine state "
#~ "automatically."
#~ msgstr ""

#~ msgid ""
#~ "The :dbcommand:`repairDatabase` command is now"
#~ " available for secondary as well as"
#~ " primary members of replica sets."
#~ msgstr ""

