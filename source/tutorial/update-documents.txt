.. _write-op-update:

================
Update Documents
================

.. default-domain:: mongodb

.. meta::
   :description: How to update documents in MongoDB. How to update  a single document in MongoDB. How to update multiple documents in MongoDB. How to update all documents in MongoDB. How to update fields in documents in MongoDB.  How to replace documents.
   :keywords: update documents, update all documents, update single document, modify documents, update fields in documents, update collection, MongoDB Manual

This page provides examples of how to update documents in MongoDB. The
examples use the following methods in the :program:`mongo` shell:

- ``db.collection.updateOne(<filter>, <update>, <options>)``

- ``db.collection.updateMany(<filter>, <update>, <options>)``

- ``db.collection.replaceOne(<filter>, <replacement>, <options>)``

The examples on this page use the ``inventory`` collection. To create
and/or populate the ``inventory`` collection, run the following in the
:program:`mongo` shell:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.insertMany( [
      { item: "canvas", qty: 100, size: { h: 28, w: 35.5, uom: "cm" }, status: "A" },
      { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
      { item: "mat", qty: 85, size: { h: 27.9, w: 35.5, uom: "cm" }, status: "A" },
      { item: "mousepad", qty: 25, size: { h: 19, w: 22.85, uom: "cm" }, status: "P" },
      { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "P" },
      { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
      { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
      { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" },
      { item: "sketchbook", qty: 80, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
      { item: "sketch pad", qty: 95, size: { h: 22.85, w: 30.5, uom: "cm" }, status: "A" }
   ]);

.. only:: website

   You can run the operation in the web shell below:

   .. include:: /includes/fact-mws.rst

.. _update-documents-modifiers:

Update Documents in a Collection
--------------------------------

To update a document, MongoDB provides :manual:`update operators
</reference/operator/update>`, such as :update:`$set`, to modify field
values. To use the update operators, pass to the update methods an
update document of the form:

.. code-block:: javascript

   {
     <update operator>: { <field1>: <value1>, ... }, 
     <update operator>: { <field2>: <value2>, ... },
     ...
   }

Some update operators, such as :update:`$set`, will create the field if
the field does not exist. See the individual :manual:`update operator
</reference/operator/update>` reference for details.

.. _write-op-updateOne:

Update Documents via ``db.collection.updateOne()``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example uses the :method:`db.collection.updateOne()`
method on the ``inventory`` collection to update the *first* document
where ``item`` equals ``"paper"``.

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.updateOne(
      { item: "paper" },
      {
        $set: { "size.uom": "cm", status: "P" },
        $currentDate: { lastModified: true }
      }
   )

The update operation:

- uses the :update:`$set` operator to update the value of the
  ``size.uom`` field to ``"cm"`` and the value of the ``status``
  field to ``"P"``,

- uses the :update:`$currentDate` operator to update the value of the
  ``lastModified`` field to the current date. If ``lastModified`` field
  does not exist, :update:`$currentDate` will create the field. See
  :update:`$currentDate` for details.

For more information and examples, see
:method:`db.collection.updateOne()`.

.. _update-multiple-documents:
.. _write-op-updateMany:

Update Documents via ``db.collection.updateMany()``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.2

The following example uses the :method:`db.collection.updateMany()`
method on the ``inventory`` collection to update all documents where
``qty`` is less than ``50``.

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.updateMany(
      { "qty": { $lt: 50 } },
      {
        $set: { "size.uom": "in", status: "P" },
        $currentDate: { lastModified: true }
      }
   )

The update operation:

- uses the :update:`$set` operator to update the value of the
  ``size.uom`` field to ``"in"`` and the value of the ``status``
  field to ``"P"``,

- uses the :update:`$currentDate` operator to update the value of the
  ``lastModified`` field to the current date. If ``lastModified`` field
  does not exist, :update:`$currentDate` will create the field. See
  :update:`$currentDate` for details.

For more information and examples, see
:method:`db.collection.updateMany()`.

Replace the Document
--------------------

To replace the entire content of a document except for the ``_id``
field, pass an entirely new document as the second argument to
:method:`db.collection.replaceOne()`. When replacing a document, the
replacement document must consist of only ``<field> : <value>`` pairs;
i.e. do not include :manual:`update operators
</reference/operator/update>` expressions.

The replacement document can have different fields from the original
document. In the replacement document, you can omit the ``_id`` field
since the ``_id`` field is immutable; however, if you do include the
``_id`` field, it must have the same value as the current value.

.. _write-op-replaceOne:

Replace a Document via ``db.collection.replaceOne``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example uses the :method:`db.collection.replaceOne()`
method on the ``inventory`` collection to replace the *first* document
matches the filter ``item`` equals ``"paper"``:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.replaceOne(
      { item: "paper" },
      { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 40 } ] }
   )

Behavior
--------

Atomicity
~~~~~~~~~

All write operations in MongoDB are atomic on the level of a single
document. For more information on MongoDB and atomicity, see
:doc:`/core/write-operations-atomicity`.

``_id`` Field
~~~~~~~~~~~~~

Once set, you cannot update the value of the ``_id`` field nor can you
replace an existing document with a replacement document that has a
different ``_id`` field value.

Document Size
~~~~~~~~~~~~~

When performing update operations that increase the document size
beyond the allocated space for that document, the update operation
relocates the document on disk.

Field Order
~~~~~~~~~~~

.. include:: /includes/fact-update-field-order.rst

.. _write-operations-upsert-behavior:

``Upsert`` Option
~~~~~~~~~~~~~~~~~

If :method:`db.collection.updateOne()`,
:method:`db.collection.updateMany()`, or
:method:`db.collection.replaceOne()` includes ``upsert : true`` **and**
no documents match the specified filter, then the operation creates a
new document and inserts it. If there are matching documents, then the
operation modifies or replaces the matching document or documents.

For details on the new document created, see the individual reference
pages for the methods.

Write Acknowledgement
~~~~~~~~~~~~~~~~~~~~~

With write concerns, you can specify the level of acknowledgement
requested from MongoDB for write operations. For details, see
:doc:`/reference/write-concern`.

.. include:: /includes/footnote-set-shell-batch-size.rst

.. seealso::

   - :method:`db.collection.updateOne()`

   - :method:`db.collection.updateMany()`

   - :method:`db.collection.replaceOne()`

   - :ref:`additional-updates`

.. class:: hidden

   .. toctree::
      :titlesonly:

      /reference/update-methods
