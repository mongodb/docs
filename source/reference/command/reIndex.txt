=======
reIndex
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: reIndex

   The :dbcommand:`reIndex` command drops all indexes on a
   collection and recreates them. This operation may be expensive for
   collections that have a large amount of data and/or a large number
   of indexes. 

   .. warning::

      - For most users, the :dbcommand:`reIndex` command is unnecessary.

      - Avoid running :dbcommand:`reIndex` for a replica set.

      - Do not run :dbcommand:`reIndex` for a sharded cluster.

   Use the following syntax:

   .. code-block:: javascript

      { reIndex: <collection>, writeConcern: <document>}

   The command takes the following fields:

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Field
        - Description

      * - reIndex
        - The name of the collection to reindex.

      * - writeConcern

        - Optional. A document expressing the :doc:`write concern
          </reference/write-concern>` of the :dbcommand:`drop` command.
          Omit to use the default write concern.

   The :binary:`~bin.mongo` shell provides a wrapper :method:`db.collection.reIndex()`.

Behavior
--------

.. |cmd-name| replace:: :dbcommand:`reIndex`
.. include:: /includes/note-reindex-impact-on-replica-sets.rst

.. include:: /includes/important-reindex-locking.rst




.. see:: :doc:`/core/index-creation` for more information on the
   behavior of indexing operations in MongoDB.
