.. _pymongo-mongoclient:

====================
Create a MongoClient
====================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: connection string, URI, server, Atlas, settings, client

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

To connect to a MongoDB deployment, you need two things:

- A **connection URI**, also known as a *connection string*, which tells {+driver-short+}
  which MongoDB deployment to connect to.
- A **MongoClient** object, which creates the connection to the MongoDB deployment
  and lets you perform operations on it.

You can also use either of these components to customize the way {+driver-short+} behaves
while connected to MongoDB.

This guide shows you how to create a connection string and use a ``MongoClient`` object
to connect to MongoDB.

.. _pymongo_connection_uri:

Connection URI
--------------

A standard connection string includes the following components:

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Component
     - Description

   * - ``mongodb://``

     - Required. A prefix that identifies this as a string in the
       standard connection format.

   * - ``username:password``

     - Optional. Authentication credentials. If you include these, the client
       authenticates the user against the database specified in ``authSource``.
       For more information about the ``authSource`` connection option, see
       :ref:`pymongo-auth`. 

   * - ``host[:port]``

     - Required. The host and optional port number where MongoDB is running. If you don't
       include the port number, the driver uses the default port, ``27017``.

   * - ``/defaultauthdb``
     
     - Optional. The authentication database to use if the
       connection string includes ``username:password@``
       authentication credentials but not the ``authSource`` option. If you don't include 
       this component, the client authenticates the user against the ``admin`` database.

   * - ``?<options>``

     - Optional. A query string that specifies connection-specific
       options as ``<name>=<value>`` pairs. See
       :ref:`pymongo-connection-options` for a full description of
       these options.

For more information about creating a connection string, see
:manual:`Connection Strings </reference/connection-string?tck=docs_driver_python>` in the
MongoDB Server documentation.

MongoClient
-----------

To create a connection to MongoDB, pass a connection URI as a string to the
``MongoClient`` constructor. In the 
following example, the driver uses a sample connection URI to connect to a MongoDB 
instance on port ``27017`` of ``localhost``: 

.. code-block:: python

   from pymongo import MongoClient
   
   uri = "mongodb://localhost:27017/"
   client = MongoClient(uri)

If you are working with an asynchronous application, use the ``AsyncMongoClient`` class.
The following example shows how to create an ``AsyncMongoClient`` object:

.. code-block:: python

   from pymongo import AsyncMongoClient

   uri = "mongodb://localhost:27017/"
   client = AsyncMongoClient(uri)

The following table describes the positional parameters that the ``MongoClient()``
constructor accepts. All parameters are optional.

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Parameter
     - Description

   * - ``host``
     - The hostname, IP address, or Unix domain socket path of the MongoDB deployment.
       If your application connects to a replica set or sharded cluster, you can specify
       multiple hostnames or IP addresses in a Python list.
       
       If you pass a literal IPv6 address, you must enclose the address in square brackets
       (``[ ]``). For example, pass the value ``[::1]`` to connect to localhost.

       {+driver-short+} doesn't support :wikipedia:`multihomed <Multihoming>` and
       :wikipedia:`round-robin DNS <Round-robin_DNS>` addresses.

       **Data type:** ``Union[str, Sequence[str]]``
       | **Default value:** ``"localhost"``

   * - ``port``
     - The port number {+mdb-server+} is running on.

       You can include the port number in the ``host`` argument
       instead of using this parameter.

       **Data type:** ``int``
       | **Default value:** ``27017``

   * - ``document_class``
     - The default class that the client uses to decode BSON documents returned by queries.
       This parameter accepts the following types:
       
       - ``bson.raw_bson.RawBSONDocument``. To learn more about the ``RawBSONDocument`` class,
         see :ref:`pymongo-bson-raw`.

       - A subclass of the ``collections.abc.Mapping`` type, such as ``OrderedDict``.
         Depending on the strictness of your type-checking rules, you might also need to
         specify types for the key and value, as shown in the following example:

         .. code-block:: python

            client = MongoClient(document_class=OrderedDict[str, int])
       
       - A subclass of the ``TypedDict`` type. To pass a ``TypedDict`` subclass for this
         parameter, you must also include the class in a type hint for your ``MongoClient``
         object, as shown in the following example:

         .. code-block:: python

            client: MongoClient[MyTypedDict] = MongoClient() 

         .. include:: /includes/type-hints/typeddict-availability.rst

       **Data type:** ``Type[_DocumentType]``
       **Default:** ``dict``

   * - ``tz_aware``
     - If this parameter is ``True``, the client treats ``datetime`` values as aware.
       Otherwise, it treats them as naive.

       For more information about aware and naive ``datetime`` values, see
       `datetime <https://docs.python.org/3/library/datetime.html>`__ in the Python
       documentation.

       **Data type:** ``bool``

   * - ``connect``
     - If this parameter is ``True``, the client begins connecting to MongoDB
       in the background immediately after you create it. If this parameter is ``False``,
       the client connects to MongoDB when it performs the first database operation.
       
       If your application is running in a
       :wikipedia:`function-as-a-service (FaaS) <Function_as_a_service>`
       environment, the default value is ``False``. Otherwise, the default value is ``True``.

       **Data type:** ``bool``

   * - ``type_registry``
     - An instance of the ``TypeRegistry`` class to enable encoding and decoding of
       custom types. For more information about encoding and decoding custom types,
       see :ref:`pymongo-custom-types`.

       **Data type:** `TypeRegistry <{+api-root+}bson/codec_options.html#bson.codec_options.TypeRegistry>`__

You can also pass keyword arguments to the ``MongoClient()`` constructor to specify
optional parameters. For a complete list of keyword arguments, see the
`MongoClient <{+api-root+}pymongo/mongo_client.html#pymongo.mongo_client.MongoClient>`__ 
class in the API documentation.

Concurrent Execution
--------------------

The following sections describe {+driver-short+}'s support for concurrent execution
mechanisms.

Multithreading
~~~~~~~~~~~~~~

{+driver-short+} is thread-safe and provides built-in connection pooling
for threaded applications. 
Because each ``MongoClient`` object represents a pool of connections to the
database, most applications require only a single instance of
``MongoClient``, even across multiple requests.

.. _pymongo-forks:

Multiple Forks
~~~~~~~~~~~~~~~

{+driver-short+} supports calling the ``fork()`` method to create a new process. 
However, if you fork a process, you must create a new ``MongoClient`` instance in the
child process.

.. important:: Don't Pass a MongoClient to a Child Process

   If you use the ``fork()`` method to create a new process, don't pass an instance
   of the ``MongoClient`` class from the parent process to the child process. This creates
   a high probability of deadlock among ``MongoClient`` instances in the child process.
   {+driver-short+} tries to issue a warning if this deadlock might occur.

   For more information about deadlock in forked processes, see
   :ref:`pymongo-fork-deadlock`.

Multiprocessing
~~~~~~~~~~~~~~~

{+driver-short+} supports the Python ``multiprocessing`` module.
However, on Unix systems, the multiprocessing module spawns processes by using
the ``fork()`` method. This carries the same risks described in :ref:`<pymongo-forks>`

To use multiprocessing with {+driver-short+}, write code similar to the following example:

.. code-block:: python

   # Each process creates its own instance of MongoClient.
   def func():
       db = pymongo.MongoClient().mydb
       # Do something with db.

   proc = multiprocessing.Process(target=func)
   proc.start()

.. important::
   
   Do not copy an instance of the ``MongoClient`` class from the parent process to a child
   process.

.. _pymongo-type-hints-client:

Type Hints 
----------

.. include:: /includes/type-hints/intro.rst

To use type hints in your {+driver-short+} application, you must add a type annotation to your
``MongoClient`` object, as shown in the following example. Select the :guilabel:`Synchronous`
or :guilabel:`Asynchronous` tab to see the corresponding code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python

         from pymongo import MongoClient

         client: MongoClient = MongoClient()

   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python

         from pymongo import AsyncMongoClient

         client: AsyncMongoClient = AsyncMongoClient()

For more accurate type information, you can include the generic document type
``Dict[str, Any]`` in your type annotation. This data type matches all documents in MongoDB.
The following example shows how to include this data type in your type annotation.
Select the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding
code:

.. tabs::

   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python

         from pymongo import MongoClient
         from typing import Any, Dict

         client: MongoClient[Dict[str, Any]] = MongoClient()

   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python

         from pymongo import AsyncMongoClient
         from typing import Any, Dict

         client: AsyncMongoClient[Dict[str, Any]] = AsyncMongoClient()

If all the documents that you are working with correspond to a single custom type, you
can specify the custom type as a type hint for your ``MongoClient`` object. This
provides more accurate type information than the generic ``Dict[str, Any]`` type.

The following example shows how to specify the ``Movie`` type as a type hint for a
``MongoClient`` object. Select the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab
to see the corresponding code:

.. tabs::
  
   .. tab:: Synchronous
      :tabid: sync

      .. code-block:: python

         from typing import TypedDict

         class Movie(TypedDict):
             name: str
             year: int

         client: MongoClient[Movie] = MongoClient()

   .. tab:: Asynchronous
      :tabid: async

      .. code-block:: python

         from typing import TypedDict

         class Movie(TypedDict):
             name: str
             year: int

         client: AsyncMongoClient[Movie] = AsyncMongoClient()

Troubleshooting
---------------

MongoClient Fails ConfigurationError
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Providing invalid keyword argument names causes the driver to raise this error.

Ensure that the keyword arguments that you specify exist and are
spelled correctly.

.. _pymongo-fork-deadlock:

Forking a Process Causes a Deadlock
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A ``MongoClient`` instance spawns multiple threads to run background tasks, such as
monitoring connected servers. These threads share state that is protected by instances
of the ``threading.Lock`` class, which are themselves
`not fork-safe <http://bugs.python.org/issue6721>`__.
{+driver-short+} is subject to the same limitations as any other multithreaded
code that uses the ``threading.Lock`` class, or any mutexes.

One of these limitations is that the locks become useless after calling the
``fork()`` method. When ``fork()`` executes, the driver copies all the parent process's locks to
the child process in the same state as they were in the parent. If they are
locked in the parent process, they are also locked in the child process. The child process
created by ``fork()`` has only one thread, so any locks created by
other threads in the parent process are never released in the child process.
The next time the child process attempts to acquire one of these locks, deadlock occurs.

Starting in {+driver-short+} version 4.3, after you call the ``os.fork()`` method, the
driver uses the ``os.register_at_fork()`` method to reset its locks and other shared state
in the child process. Although this reduces the likelihood of a deadlock,
{+driver-short+} depends
on libraries that aren't fork-safe in multithreaded applications, including
`OpenSSL <https://github.com/openssl/openssl/issues/19066>`__ and
`getaddrinfo(3). <https://man7.org/linux/man-pages/man3/gai_strerror.3.html>`__
Therefore, a deadlock can still occur.

The Linux manual page for `fork(2) <https://man7.org/linux/man-pages/man2/fork.2.html>`__
also imposes the following restriction:

.. blockquote::

   After a ``fork()``  in a multithreaded program, the child can
   safely call only async-signal-safe functions (see
   `signal-safety(7) <https://man7.org/linux/man-pages/man7/signal-safety.7.html>`__)
   until such time as it calls
   `execve(2) <https://man7.org/linux/man-pages/man2/execve.2.html>`__.

Because {+driver-short+} relies on functions that are *not*
async-signal-safe, it can cause deadlocks or crashes when running in a child
process.

.. tip::
   
   For an example of a deadlock in a child process, see
   `PYTHON-3406 <https://jira.mongodb.org/browse/PYTHON-3406>`__ in Jira.
   
   For more information about the problems caused by Python locks in
   multithreaded contexts with ``fork()``, see `Issue 6721 <http://bugs.python.org/issue6721>`__
   in the Python Issue Tracker.

.. include:: /includes/type-hints/troubleshooting-client-type.rst

.. include:: /includes/type-hints/troubleshooting-incompatible-type.rst

API Documentation
-----------------

To learn more about creating a ``MongoClient`` object in {+driver-short+},
see the following API documentation:

- `MongoClient <{+api-root+}pymongo/mongo_client.html#pymongo.mongo_client.MongoClient>`__
- `AsyncMongoClient <{+api-root+}pymongo/asynchronous/mongo_client.html#pymongo.asynchronous.mongo_client.AsyncMongoClient>`__