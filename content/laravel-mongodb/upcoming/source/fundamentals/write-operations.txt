.. _laravel-fundamentals-write-ops:

================
Write Operations
================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: insert, insert one, update, update one, upsert, code example, mass assignment, push, pull, delete, delete many, primary key, destroy, eloquent model

.. toctree::

   Insert </fundamentals/write-operations/insert>
   Modify </fundamentals/write-operations/modify>
   Delete </fundamentals/write-operations/delete>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can see code templates of common
methods that you can use to write data to MongoDB by using
{+odm-long+}.

.. tip::

   To learn more about any of the methods included in this guide,
   see the links provided in each section.

Insert One
----------

The following code shows how to insert a single document into a
collection:

.. code-block:: php
    
   SampleModel::create([
       '<field name>' => '<value>',
       '<field name>' => '<value>',
       ...
   ]);

To view a runnable example that inserts one document, see the
:ref:`laravel-insert-one-usage` usage example.

To learn more about inserting documents, see the
:ref:`laravel-fundamentals-write-insert` guide.

Insert Multiple
---------------

The following code shows how to insert multiple documents into a
collection:

.. code-block:: php
    
   SampleModel::insert([
       [
           '<field name>' => '<value>',
           '<field name>' => '<value>',
       ],
       [
           '<field name>' => '<value>',
           '<field name>' => '<value>',
       ],
       ...
   ]);

To view a runnable example that inserts multiple documents, see the
:ref:`laravel-insert-many-usage` usage example.

To learn more about inserting documents, see the
:ref:`laravel-fundamentals-write-insert` guide.

Update One
----------

The following code shows how to update a single document in a
collection by creating or editing a field:

.. code-block:: php
    
   SampleModel::where('<field name>', '<value>')
       ->orderBy('<field to sort on>')
       ->first()
       ->update([
           '<field to update>' => '<new value>',
       ]);

To view a runnable example that updates one document, see the
:ref:`laravel-update-one-usage` usage example.

To learn more about updating documents, see the
:ref:`laravel-fundamentals-write-modify` guide.

Update Multiple
---------------

The following code shows how to update multiple documents in a
collection:

.. code-block:: php
    
   SampleModel::where('<field name>', '<comparison operator>', '<value>')
       ->update(['<field to update>' => '<new value>']);

To view a runnable example that updates multiple documents, see the
:ref:`laravel-update-many-usage` usage example.

To learn more about updating documents, see the
:ref:`laravel-fundamentals-write-modify` guide.

Upsert
------

The following code shows how to update a document, or insert one if a
matching document doesn't exist:

.. code-block:: php
    
   SampleModel::where(['<field name>' => '<value>'])
       ->update(
           ['<field to update>' => '<new value>', ...],
           ['upsert' => true],
       );
       
    // Or, use the upsert() method.
    SampleModel::upsert(
       [<documents to update or insert>],
       '<unique field name>',
       [<fields to update>],
    );

To learn more about upserting documents, see the
:ref:`laravel-fundamentals-write-modify` guide.

Delete One
----------

The following code shows how to delete a single document in a
collection:

.. code-block:: php
    
   SampleModel::where('<field name>', '<value>')
       ->orderBy('<field to sort on>')
       ->limit(1)
       ->delete();

To view a runnable example that deletes one document, see the
:ref:`laravel-delete-one-usage` usage example.

To learn more about deleting documents, see the
:ref:`laravel-fundamentals-write-delete` guide.

Delete Multiple
---------------

The following code shows how to delete multiple documents in a
collection:

.. code-block:: php
    
   SampleModel::where('<field name>', '<value>')
       ->delete();

To view a runnable example that deletes multiple documents, see the
:ref:`laravel-delete-many-usage` usage example.

To learn more about deleting documents, see the
:ref:`laravel-fundamentals-write-delete` guide.
