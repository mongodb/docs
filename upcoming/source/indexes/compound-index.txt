.. _ruby-compound-index:

================
Compound Indexes
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: index, query, optimization, efficiency

Overview
--------

**Compound indexes** hold references to multiple
fields within a collection's documents, improving query and sort
performance. 

When creating a compound index, you must specify the following details:

- The fields on which to create the index

- The sort order for each field (ascending or descending)

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``movies`` collection in the
``sample_mflix`` database from the :atlas:`Atlas sample datasets
</sample-data>`. To access this collection from your {+language+} 
application, create a ``Mongo::Client`` object that connects to
an Atlas cluster and assign the following values to your ``database`` 
and ``collection``
variables: 

.. literalinclude:: /includes/indexes/single-field.rb
   :start-after: start-sample-data
   :end-before: end-sample-data
   :language: ruby
   :copyable:

To learn how to create a free MongoDB Atlas cluster and
load the sample datasets, see the :atlas:`Get Started with Atlas
</getting-started>` guide.

Create a Compound Index
-----------------------

Use the ``create_one`` method to create a compound index. The following 
example creates an index in descending order on the ``runtime`` field and 
in ascending order on the ``year`` field:

.. literalinclude:: /includes/indexes/compound.rb
   :start-after: start-index-compound
   :end-before: end-index-compound
   :language: ruby
   :copyable: 

Verify Index Creation
---------------------

You can verify that the index was created by listing the indexes in the 
collection. You should see an index for ``runtime`` and ``year`` in the list, 
as shown in the following output:

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/compound.rb
      :start-after: start-check-compound-index
      :end-before: end-check-compound-index
      :language: ruby

   .. output::
      :visible: true

      {"v": 2, "key": {"runtime": -1, "year": 1}, "name": "runtime_-1_year_1"}

Example Query
-------------

The following is an example of a query that is covered by the index
created on the ``runtime`` and ``year`` fields:

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/compound.rb
      :start-after: start-index-compound-query
      :end-before: end-index-compound-query
      :language: ruby

   .. output::
      :visible: false

      {"_id":...,"runtime": 91,...,"title": "Monster House",...,"year": 2006,...}

Additional Information
----------------------

To view runnable examples that demonstrate how to manage indexes, see
:ref:`ruby-indexes`.

To learn more about compound indexes, see :manual:`Compound
Indexes </core/index-compound>` in the {+mdb-server+} manual.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods discussed in this guide, see the
following API documentation:

- :ruby-api:`indexes <Collection.html#indexes-instance_method>`
- :ruby-api:`create_one <Index/View.html#create_one-instance_method>`
- :ruby-api:`find <Collection.html#find-instance_method>` 
