=========================================
Deploy the Monitoring Agent in Production
=========================================

Daemonize the Process
---------------------

.. start-content 

For production deployments of |monitoring|, you will want to daemonize
the process and ensure that it restarts following a system restart.
Your operating system likely has a preferred method for managing daemon
processes.

As a temporary measure, the following command will start the agent
process detached from the current terminal session: ::

     nohup python agent.py > /[LOG-DIRECTORY]/agent.log 2>&1 &

Replace "``[LOG-DIRECTORY]`` with the path to your MongoDB logs.

This command allows the agent survive the current terminal session and
writes all messages to the ``agent.log`` file. You may include this
command in your MongoDB control script or use your system's
``/etc/rc.local`` equivalent; however, avoid running the agent as
root.

.. end-content

Control Scripts
---------------

If you need to create an initialization script to control the
daemonized process, consider the following resources:

- `Ubuntu Boot Up How To <https://help.ubuntu.com/community/UbuntuBootupHowto>`_

- `Debian Linux Control/Init Scripts <http://wiki.debian.org/LSBInitScripts>`_

- `Arch Linux rc.d Scripts <https://wiki.archlinux.org/index.php/Writing_rc.d_scripts>`_

- Debian and Ubuntu Systems have an example control script located at
  ``/etc/init.d/skeleton`` that you can use as a template.

- Red Hat Enterprise Linux and related distributions (e.g. Fedora,
  CentOS, etc.) provide example control scripts in the
  ``/usr/share/doc/initscripts-*/sysvinitfiles/`` directory.

You may also examine the scripts in your system's ``/etc/init.d/`` or
``/etc/rc.d/`` directory. Ensure that the agent does not run with root
privileges.

Use the ``update-rc.d`` utility on Debian and Ubuntu and the
``chkconfig`` tool on Red Hat related systems to add these scripts to
the initialization process. Be sure to test the control script
configuration. It is essential that you be able to start, stop, and
restart the agent following a system reboot.

.. _troubleshooting-proxies:

Working with Proxies
--------------------

If your datacenter requires that you route outbound
https connections via a proxy, you  must use a version of Python greater than
2.6.1

Additionally, you will need to export the "``https_proxy``"
environment variable (or "``HTTPS_PROXY``" on Windows). To do so, issue the
following command before running the Monitoring agent: ::

.. code-block:: sh

   export https_proxy='http://proxyserver.example.net:port"

Replace "``http://proxyserver.example.net``" with the name or IP
address of the proxy server and "``port`` with the TCP port that the
proxy service runs on. You may choose to export this variable inside
of your control script.

Next Steps
----------

Once the agent is running and configured to your satisfaction, 
you can begin 
:doc:`configuring |monitoring| for your deployment </monitoring/configuring>` 
or start :doc:`using the console </monitoring/usage>`.
