===========
\$ (update)
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. update:: $

   The positional :update:`$` operator identifies an element in
   an array to update without explicitly specifying the position of the
   element in the array.

   .. see:: Disambiguation
   
      - To project, or return, an array element from a read operation,
        see the :projection:`$` projection operator instead.

      - To update all elements in an array, see the all positional
        operator  :update:`$[]` instead.

      - To update all elements that match an array filter condition or
        conditions, see the filtered positional operator instead
        :update:`$[\<identifier\>]`.

   The positional :update:`$` operator has the form:

   .. code-block:: javascript

      { "<array>.$" : value }

   When used with update operations, e.g.
   :method:`db.collection.update()` and
   :method:`db.collection.findAndModify()`,

   - the positional :update:`$` operator acts as a placeholder for
     the **first** element that matches the ``query document``, and

   - the ``array`` field **must** appear as part of the ``query
     document``.

   For example:

   .. code-block:: javascript

      db.collection.update(
         { <array>: value ... },
         { <update operator>: { "<array>.$" : value } }
      )

Behavior
--------

``upsert``
~~~~~~~~~~~

Do not use the positional operator :update:`$` with
:term:`upsert` operations because inserts will use the ``$`` as
a field name in the inserted document.

Nested Arrays
~~~~~~~~~~~~~

The positional :update:`$` operator cannot be used for queries which
traverse more than one array, such as queries that traverse arrays
nested within other arrays, because the replacement for the
:update:`$` placeholder is a single value

Unsets
~~~~~~

When used with the :update:`$unset` operator, the positional
:update:`$` operator does not remove the matching element
from the array but rather sets it to ``null``.

Negations
~~~~~~~~~

.. see SERVER-6982

If the query matches the array using a negation operator, such as
:query:`$ne`, :query:`$not`, or :query:`$nin`, then you cannot use the
positional operator to update values from this array.

However, if the negated portion of the query is inside of an
:query:`$elemMatch` expression, then you *can* use the positional
operator to update this field.

Examples
--------

Update Values in an Array
~~~~~~~~~~~~~~~~~~~~~~~~~

Create a collection ``students`` with the following documents:

.. code-block:: javascript

   db.students.insert([
      { "_id" : 1, "grades" : [ 85, 80, 80 ] },
      { "_id" : 2, "grades" : [ 88, 90, 92 ] },
      { "_id" : 3, "grades" : [ 85, 100, 90 ] }
   ])

To update the first element whose value is ``80`` to ``82`` in the in
the ``grades`` array, use the positional :update:`$` operator if you do
not know the position of the element in the array:

.. important::

   You must include the array field as part of the ``query`` document.

.. code-block:: javascript

   db.students.updateOne(
      { _id: 1, grades: 80 },
      { $set: { "grades.$" : 82 } }
   )

The positional :update:`$` operator acts as a placeholder for the
**first match** of the update :ref:`query document
<read-operations-query-document>`.

After the operation, the ``students`` collection contains the following
documents:

.. code-block:: javascript

   { "_id" : 1, "grades" : [ 85, 82, 80 ] }
   { "_id" : 2, "grades" : [ 88, 90, 92 ] }
   { "_id" : 3, "grades" : [ 85, 100, 90 ] }

Update Documents in an Array
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The positional :update:`$` operator facilitates updates to arrays
that contain embedded documents. Use the positional :update:`$`
operator to access the fields in the embedded documents with the
:ref:`dot notation <document-dot-notation>` on the
:update:`$` operator.

.. code-block:: javascript

   db.collection.update(
      { <query selector> },
      { <update operator>: { "array.$.field" : value } }
   )

Consider the following document in the ``students`` collection whose
``grades`` element value is an array of embedded documents:

.. code-block:: javascript

   {
     _id: 4,
     grades: [
        { grade: 80, mean: 75, std: 8 },
        { grade: 85, mean: 90, std: 5 },
        { grade: 85, mean: 85, std: 8 }
     ]
   }

Use the positional :update:`$` operator to update the ``std`` field of
the first array element that matches the ``grade`` equal to ``85``
condition:

.. important::

   You must include the array field as part of the ``query`` document.

.. code-block:: javascript

   db.students.updateOne(
      { _id: 4, "grades.grade": 85 },
      { $set: { "grades.$.std" : 6 } }
   )

After the operation, the document has the following updated values:

.. code-block:: javascript

   { 
      "_id" : 4,
      "grades" : [
         { "grade" : 80, "mean" : 75, "std" : 8 },
         { "grade" : 85, "mean" : 90, "std" : 6 },
         { "grade" : 85, "mean" : 85, "std" : 8 }
      ]
   }

.. _multiple-point-matches:

Update Embedded Documents Using Multiple Field Matches
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :update:`$` operator can update the first array element that matches
multiple query criteria specified with the :query:`$elemMatch()` operator.

Consider the following document in the ``students`` collection whose
``grades`` field value is an array of embedded documents:

.. code-block:: javascript

   {
     _id: 5,
     grades: [
        { grade: 80, mean: 75, std: 8 },
        { grade: 85, mean: 90, std: 5 },
        { grade: 90, mean: 85, std: 3 }
     ]
   }

In the example below, the :update:`$` operator updates the value of the
``std`` field in the first embedded document that has ``grade`` field with
a value less than or equal to ``90`` and a ``mean`` field with a value
greater than ``80``:

.. code-block:: javascript

   db.students.updateOne(
      {
        _id: 5,
        grades: { $elemMatch: { grade: { $lte: 90 }, mean: { $gt: 80 } } }
      },
      { $set: { "grades.$.std" : 6 } }
   )

This operation updates the first embedded document that matches the
criteria, namely the second embedded document in the array:

.. code-block:: javascript
   :emphasize-lines: 5

   {
     _id: 5,
     grades: [
       { grade: 80, mean: 75, std: 8 },
       { grade: 85, mean: 90, std: 6 },
       { grade: 90, mean: 85, std: 3 }
     ]
   }

.. seealso::

   :method:`db.collection.update()`,

   :method:`db.collection.findAndModify()`, :query:`$elemMatch()`
