=====
Users
=====

.. only:: onprem

   Overview
   --------

   The ``users`` resource allows you to create and update users and
   retrieve user information. This resource also provides an endpoint for
   creating the first user in a system and retrieving an API key for use
   in future API calls. The endpoint for creating the first user is the
   only endpoint you can use without first having an API key.

Endpoints
---------

Get a User
~~~~~~~~~~

Get a single user by ID. You can only retrieve a user if you have at
least one group in common.

.. code-block:: none

   GET /api/public/v1.0/users/USER-ID

Get All Users in a Group
~~~~~~~~~~~~~~~~~~~~~~~~

Retrieve all users in a group.

.. code-block:: none

   GET /api/public/v1.0/groups/GROUP-ID/users

Create a User
~~~~~~~~~~~~~

Create a new user. All fields are required.

.. code-block:: none

   POST /api/public/v1.0/users

.. only:: onprem

   Create the First User
   ~~~~~~~~~~~~~~~~~~~~~

   This endpoint is available only when the |onprem| instance has no
   users. This is the only API call you can make without first having an
   API key.

   The user created through this endpoint is automatically granted the
   :ref:`GLOBAL_OWNER <global-owner-role>` role. The returned document
   includes the new user's API key, which you can use to make further
   API calls.

   The endpoint does not create a group, but you can create one using the
   new user and API key.

   .. code-block:: none

      POST /api/public/v1.0/unauth/users

Update a User
~~~~~~~~~~~~~

Update an existing user using the fields provided. Unspecified fields
will preserve their current values. You cannot specify the password for
security reasons.

.. code-block:: none

   PATCH /api/public/v1.0/users/USER-ID

Sample Entity
-------------

.. code:: javascript

   {
     "id": "xxx",
     "username": "somebody@example.com",
     "password": "abc123",
     "emailAddress": "somebody@qa.example.com",
     "mobileNumber": "2125551234",
     "firstName": "John",
     "lastName": "Doe",
     "roles": [
         {
           "groupId": "8491812938cbda83918c",
           "roleName": "GROUP_OWNER"
         },
         {
           "groupId": "4829cbda839cbdac3819",
           "roleName": "GROUP_READ_ONLY"
         }
     ],
     "links": [ ... ]
   }


Entity Fields
-------------

.. list-table::
   :widths: 10 10 80
   :header-rows: 1

   * - ``Name``
     - Type
     - Description
   * - ``id``
     - string
     - Unique identifier.
   * - ``username``
     - string
     - |mms| username.
   * - ``password``
     - string
     - Password. This field is NOT included in the entity returned from the
       server. It can only be sent in the entity body when creating a new user.
   * - ``emailAddress``
     - string
     - Email address.
   * - ``mobileNumber``
     - string
     - Mobile number. This field can only be set or edited using the |mms| UI
       because it is tied to two factor authentication.
   * - ``firstName``
     - string
     - First name.
   * - ``lastName``
     - string
     - Last name.
   * - ``roles``
     - object array
     - Role assignments.
   * - ``roles.groupId``
     - string
     - The groupId in which the user has the specified role. Note that for the
       "global" roles (those whose name starts with ``GLOBAL_``) there is no
       ``groupId`` since these roles are not tied to a group.
   * - ``roles.roleName``
     - string
     - The name of the role. Possible values are:

       - ``GLOBAL_AUTOMATION_ADMIN``
       - ``GLOBAL_BACKUP_ADMIN``
       - ``GLOBAL_MONITORING_ADMIN``
       - ``GLOBAL_OWNER``
       - ``GLOBAL_READ_ONLY``
       - ``GLOBAL_USER_ADMIN``
       - ``GROUP_AUTOMATION_ADMIN``
       - ``GROUP_BACKUP_ADMIN``
       - ``GROUP_MONITORING_ADMIN``
       - ``GROUP_OWNER``
       - ``GROUP_READ_ONLY``
       - ``GROUP_USER_ADMIN``


Links
-----

.. list-table::
   :widths: 10 90
   :header-rows: 1

   * - ``Relation``
     - Description
   * - ``self``
     - Me
   * - ``whitelist``
     - The user's whitelist.

Examples
--------

Get a User
~~~~~~~~~~

.. code-block:: none

   curl -u "username:apiKey" --digest -i "https://cloud.mongodb.com/api/public/v1.0/users/533dc19ce4b00835ff81e2eb"

   HTTP/1.1 200 OK

   {
     "id" : "533dc19ce4b00835ff81e2eb",
     "username" : "sally@example.com",
     "emailAddress" : "sally@qa.example.com",
     "firstName" : "Jane",
     "lastName" : "D'oh",
     "roles" : [ {
       "groupId" : "533daa30879bb2da07807696",
       "roleName" : "GROUP_USER_ADMIN"
     } ],
     "links": [ ... ]
   }

Get All Users in a Group
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none

   curl -u "username:apiKey" --digest -i "https://cloud.mongodb.com/api/public/v1.0/groups/533daa30879bb2da07807696/users"

   HTTP/1.1 200 OK

   {
     "totalCount": 3,
     "results": [ {
       "id" : "5329c8dfe4b0b07a83d67e7d",
       "username" : "armand@example.com",
       "emailAddress" : "armand@example.com",
       "firstName" : "John",
       "lastName" : "Doe",
       "roles" : [ {
         "groupId" : "5329cb6e879bb2da07806511",
         "roleName" : "GROUP_OWNER"
       }, {
         "groupId" : "5196d3628d022db4cbc26d9e",
         "roleName" : "GROUP_READ_ONLY"
       }, {
         "groupId" : "533daa30879bb2da07807696",
         "roleName" : "GROUP_READ_ONLY"
       } ],
       "links": [ ... ]
     }, {
       // etc.
     } ],
     "links": [ ... ]
   }

.. only:: onprem

   Create the First User
   ~~~~~~~~~~~~~~~~~~~~~

   .. code-block:: none

      curl -H "Content-Type: application/json" -i -X POST "http://<ops-manager-url>:<port>/api/public/v1.0/unauth/users" --data '
      {
        "username": "jane.doe@mongodb.com",
        "emailAddress": "jane.doe@mongodb.com",
        "password": "Passw0rd.",
        "firstName": "Jane",
        "lastName": "Doe"
      }'

      HTTP/1.1 200 OK

      {
        "user": {
          "username": "jane.doe@mongodb.com",
          "roles": [
            {
              "roleName": "GLOBAL_OWNER"
            }
          ],
          "lastName": "Doe",
          "id": "533dc19ce4b00835ff81e2eb",
          "firstName": "Jane",
          "emailAddress": "jane.doe@mongodb.com",
          "links": [ ... ]
        },
        "apiKey": "1234abcd-ab12-cd34-ef56-1234abcd1234"
      }

Create a User
~~~~~~~~~~~~~

.. code-block:: none

   curl -u "username:apiKey" -H "Content-Type: application/json" --digest -i -X POST "https://cloud.mongodb.com/api/public/v1.0/users" --data '
   {
     "username": "jane.doe@mongodb.com",
     "emailAddress": "jane.doe@mongodb.com",
     "firstName": "Jane",
     "lastName": "Doe",
     "password": "M0ng0D8!:)",
     "roles": [{
       "groupId": "533daa30879bb2da07807696",
       "roleName": "GROUP_USER_ADMIN"
     }]
   }'

   HTTP/1.1 201 Created
   Location: https://cloud.mongodb.com/api/public/v1.0/users/533dc19ce4b00835ff81e2eb

   {
     "id" : "533dc19ce4b00835ff81e2eb",
     "username" : "jane.doe@mongodb.com",
     "emailAddress" : "jane.doe@mongodb.com",
     "firstName" : "Jane",
     "lastName" : "Doe",
     "roles" : [ {
       "groupId" : "533daa30879bb2da07807696",
       "roleName" : "GROUP_USER_ADMIN"
     } ],
     "links" : [ ... ]
   }

Update a User
~~~~~~~~~~~~~

.. code-block:: none

   curl -u "username:apiKey" -H "Content-Type: application/json" --digest -i -X PATCH "https://cloud.mongodb.com/api/public/v1.0/users/533dc19ce4b00835ff81e2eb" --data '
   {
     "emailAddress": "sally@qa.example.com",
     "lastName": "D'oh"
   }'

   HTTP/1.1 200 OK

   {
     "id" : "533dc19ce4b00835ff81e2eb",
     "username" : "sally@example.com",
     "emailAddress" : "sally@qa.example.com",
     "firstName" : "Jane",
     "lastName" : "D'oh",
     "roles" : [ {
       "groupId" : "533daa30879bb2da07807696",
       "roleName" : "GROUP_USER_ADMIN"
     } ],
     "links" : [ ... ]
   }
