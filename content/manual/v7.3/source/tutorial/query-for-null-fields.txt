.. include:: /includes/java-sync-links.rst
.. include:: /includes/java-async-links.rst

.. _faq-developers-query-for-nulls:

================================
Query for Null or Missing Fields
================================
  
.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: shell, csharp, go, java, javascript/typescript, php, python, ruby, scala, kotlin

.. meta:: 
   :description:  Learn how to query for null or missing fields in MongoDB using various methods including the MongoDB Atlas UI and MongoDB Compass. Understand different query operators' treatment of null values.
   :keywords: java sync, java async, reactive streams, motor, code example, node.js, compass, kotlin coroutine

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1

You can query for ``null`` or missing fields in MongoDB 
using the following methods:

.. |atlas-ref| replace:: :ref:`query-null-documents-atlas-ui`

.. include:: /includes/fact-methods.rst

.. include:: /includes/language-selector-instructions.rst

.. tabs-selector:: drivers

Different query operators in MongoDB treat ``null`` values differently.

.. |query_operations| replace:: operations that query for ``null`` values

.. include:: /includes/driver-examples/driver-example-query-intro-no-perl.rst

.. tabs-drivers::

   tabs:
     - id: c
       content: |
         .. important::
            Use ``BCON_NULL`` with the MongoDB C driver to
            query for ``null`` or missing fields in MongoDB.

     - id: python
       content: |
         .. important::
            Use ``None`` with the PyMongo Python driver to
            query for ``null`` or missing fields in MongoDB.

     - id: motor
       content: |
         .. important::
            Use ``None`` with the Motor driver to
            query for ``null`` or missing fields in MongoDB.

     - id: kotlin-coroutine
       content: |
         .. important::
            Use ``null`` with the Kotlin Coroutine driver to
            query for ``null`` or missing fields in MongoDB.

     - id: ruby
       content: |
         .. important::
            Use ``nil`` with the MongoDB Ruby driver to
            query for ``null`` or missing fields in MongoDB.

     - id: scala
       content: |
         .. important::
            Use ``BsonNull()`` with the MongoDB Scala driver to query
            for ``null`` or missing fields in MongoDB.

     - id: csharp
       content: |
         .. important::
            Use ``BsonNull.Value`` with the MongoDB C# driver to
            query for ``null`` or missing fields in MongoDB.

     - id: go
       content: |

         .. important::
            Use ``nil`` with the MongoDB Go driver to
            query for ``null`` or missing fields in MongoDB.

.. include:: /includes/driver-examples/driver-example-query-38.rst

.. _faq-comparison-with-null:

Equality Filter
---------------

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         The ``{ item : null }`` query matches documents that either
         contain the ``item`` field whose value is ``null`` *or* that
         do not contain the ``item`` field.

     - id: compass
       content: |
         The ``{ item : null }`` query matches documents that either
         contain the ``item`` field whose value is ``null`` *or* that
         do not contain the ``item`` field.

     - id: c
       content: |
         The ``{ item, BCON_NULL }`` query matches documents that either
         contain the ``item`` field whose value is ``null`` *or* that
         do not contain the ``item`` field.

     - id: python
       content: |
         The ``{ item : None }`` query matches documents that either
         contain the ``item`` field whose value is ``null`` *or* that
         do not contain the ``item`` field.

     - id: motor
       content: |
         The ``{ item : None }`` query matches documents that either
         contain the ``item`` field whose value is ``null`` *or* that
         do not contain the ``item`` field.

     - id: java-sync
       content: |
         The ``eq("item", null)`` query matches documents that either
         contain the ``item`` field whose value is ``null`` *or* that
         do not contain the ``item`` field.

     - id: java-async
       content: |
         The ``eq("item", null)`` query matches documents that either
         contain the ``item`` field whose value is ``null`` *or* that
         do not contain the ``item`` field.

     - id: kotlin-coroutine
       content: |
         The ``eq("item", null)`` query matches documents that either
         contain the ``item`` field whose value is ``null`` *or* that
         do not contain the ``item`` field.

     - id: nodejs
       content: |
         The ``{ item : null }`` query matches documents that either
         contain the ``item`` field whose value is ``null`` *or* that
         do not contain the ``item`` field.

     - id: php
       content: |
         The ``[ item => undef ]`` query matches documents that either
         contain the ``item`` field whose value is ``null`` *or* that
         do not contain the ``item`` field.

     - id: ruby
       content: |
         The ``{ item => nil }`` query matches documents that either
         contain the ``item`` field whose value is ``nil`` *or* that
         do not contain the ``item`` field.

     - id: scala
       content: |
         The ``equal("item", BsonNull)`` query matches documents that
         either contain the ``item`` field whose value is ``null`` *or*
         that do not contain the ``item`` field.

     - id: csharp
       content: |
         The ``Eq("item", BsonNull.Value)`` query using the :csharp-api:`FilterDefinitionBuilder.Eq()
         <Overload_MongoDB_Driver_FilterDefinitionBuilder_1_Eq>` method
         matches documents that either contain the ``item`` field whose
         value is ``null`` *or* that do not contain the ``item`` field.

     - id: go
       content: |
         The ``item => nil`` query matches documents that either
         contain the ``item`` field whose value is ``nil`` *or* that
         do not contain the ``item`` field.

.. include:: /includes/driver-examples/driver-example-query-39.rst

The query returns both documents in the collection.

.. _non-equality-filter:

Non-Equality Filter
-------------------

To query for fields that **exist** and are **not null**, use the ``{ $ne
: null }`` filter. The ``{ item : { $ne : null } }`` query matches
documents where the ``item`` field exists *and* has a non-null value.

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         .. code-block:: sh

            db.inventory.find( { item: { $ne : null } } )

     - id: compass
       content: |
         .. code-block:: javascript

            { item: { $ne : null } }

     - id: c
       content: |
         .. code-block:: c

            filter = BCON_NEW ("item", BCON_NULL);
            cursor = mongoc_collection_find_with_opts (collection, filter, NULL, NULL);
      
     - id: python
       content: |
         .. code-block:: python

            cursor = db.inventory.find( { "item": { "$ne": None } } )

     - id: motor
       content: |
         .. code-block:: python

            cursor = db.inventory.find( { "item": { "$ne": None } } )

     - id: java-sync
       content: |
         .. code-block:: java

            collection.find(ne("item", null));

     - id: java-async
       content: |
         .. code-block:: java

            db.inventory.find( { item: { $ne : null} } )

     - id: kotlin-coroutine
       content: |
         .. code-block:: kotlin

            collection.find(ne("item", null))

     - id: nodejs
       content: |
         .. code-block:: javascript

            const cursor = db.collection('inventory')
              .find({ item: { $ne : null }
            });

     - id: php
       content: |
         .. code-block:: php

            $cursor = $db->inventory->find(['item' => ['$ne' => null ]]);

     - id: ruby
       content: |
         .. code-block:: ruby

            client[:inventory].find(item: { '$ne' => nil })
            
     - id: scala
       content: |
         .. code-block:: scala

            collection.find($ne("item", null));

     - id: csharp
       content: |
         .. code-block:: csharp

            var filter = Builders<BsonDocument>.Filter.Ne("item", BsonNull.Value);
            var result = collection.Find(filter).ToList();

     - id: go
       content: |
         .. code-block:: go

            cursor, err := coll.Find(
              context.TODO(),
              bson.D{
                {"item", bson.D{"$ne": nil}},
              })

Type Check
----------

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         The ``{ item : { $type: 10 } }`` query matches *only*
         documents that contain the ``item`` field whose value is
         ``null``; i.e. the value of the ``item`` field is of
         :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10):

     - id: compass
       content: |
         The ``{ item : { $type: 10 } }`` query matches *only*
         documents that contain the ``item`` field whose value is
         ``null``; i.e. the value of the ``item`` field is of
         :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10):

     - id: c
       content: |
         The ``{ item, { $type, BCON_NULL } }`` query matches *only*
         documents that contain the ``item`` field whose value is
         ``null``; i.e. the value of the ``item`` field is of
         :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10):

     - id: python
       content: |
         The ``{ item : { $type: 10 } }`` query matches *only*
         documents that contain the ``item`` field whose value is
         ``null``; i.e. the value of the ``item`` field is of
         :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10):

     - id: motor
       content: |
         The ``{ item : { $type: 10 } }`` query matches *only*
         documents that contain the ``item`` field whose value is
         ``null``; i.e. the value of the ``item`` field is of
         :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10):

     - id: java-sync
       content: |
         The ``type("item", BsonType.NULL)`` query matches *only*
         documents that contain the ``item`` field whose value is
         ``null``; i.e. the value of the ``item`` field is of
         :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10):

     - id: java-async
       content: |
         The ``type("item", BsonType.NULL)`` query matches *only*
         documents that contain the ``item`` field whose value is
         ``null``; i.e. the value of the ``item`` field is of
         :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10):

     - id: kotlin-coroutine
       content: |
         The ``type("item", BsonType.NULL)`` query matches *only*
         documents that contain the ``item`` field whose value is
         ``null``. This means the value of the ``item`` field is of
         :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10):

     - id: nodejs
       content: |
         The ``{ item : { $type: 10 } }`` query matches *only*
         documents that contain the ``item`` field whose value is
         ``null``; i.e. the value of the ``item`` field is of
         :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10):

     - id: php
       content: |
         The ``[ item => [ $type => 10 ] ]`` query matches *only*
         documents that contain the ``item`` field whose value is
         ``null``; i.e. the value of the ``item`` field is of
         :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10):

     - id: ruby
       content: |
         The ``{ item => { $type => 10 } }`` query matches *only*
         documents that contain the ``item`` field whose value is
         ``null``; i.e. the value of the ``item`` field is of
         :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10):

     - id: java-sync
       content: |
         The ``type("item", BsonType.NULL)`` query matches *only*
         documents that contain the ``item`` field whose value is
         ``null``; i.e. the value of the ``item`` field is of
         :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10 :

     - id: csharp
       content: |
         The ``Type("item", BsonType.Null)`` query using the
         :csharp-api:`FilterDefinitionBuilder.Type()
         <Overload_MongoDB_Driver_FilterDefinitionBuilder_1_Type>`
         method matches *only* documents that contain the ``item``
         field whose value is ``null``. The value of the ``item`` field
         is of :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10):

     - id: go
       content: |
         The following query matches *only*
         documents that contain the ``item`` field whose value is of
         :ref:`BSON Type <bson-types>` ``Null`` (BSON Type 10):

.. include:: /includes/driver-examples/driver-example-query-40.rst

The query returns only the document where the ``item`` field has a
value of ``null``.

Existence Check
---------------

The following example queries for documents that do not contain a
field. [#type0]_

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         The ``{ item : { $exists: false } }`` query matches documents
         that do not contain the ``item`` field:

     - id: compass
       content: |
         The ``{ item : { $exists: false } }`` query matches documents
         that do not contain the ``item`` field:

     - id: c
       content: |
         The ``{ item, { $exists, BCON_BOOL (false) } }`` query matches documents
         that do not contain the ``item`` field:

     - id: python
       content: |
         The ``{ item : { $exists: False } }`` query matches documents
         that do not contain the ``item`` field:

     - id: motor
       content: |
         The ``{ item : { $exists: False } }`` query matches documents
         that do not contain the ``item`` field:

     - id: java-sync
       content: |
         The ``exists("item", false)`` query matches documents that
         do not contain the ``item`` field:

     - id: java-async
       content: |
         The   ``exists("item", false)`` query matches documents that do
         not contain the ``item`` field:

     - id: kotlin-coroutine
       content: |
         The ``exists("item", false)`` query matches documents that
         do not contain the ``item`` field:

     - id: nodejs
       content: |
         The ``{ item : { $exists: false } }`` query matches documents
         that do not contain the ``item`` field:

     - id: php
       content: |
         The ``[ item => [ $exists => false ] ]`` query matches documents
         that do not contain the ``item`` field:

     - id: ruby
       content: |
         The ``{ item => { $exists => false } }`` query matches documents
         that do not contain the ``item`` field:

     - id: scala
       content: |
         The ``exists("item", exists = false)`` query matches documents
         that do not contain the ``item`` field:

     - id: csharp
       content: |
         The ``Exists("item", false)`` query using the :csharp-api:`FilterDefinitionBuilder.Exists()
         <Overload_MongoDB_Driver_FilterDefinitionBuilder_1_Exists>`
         method matches documents that do not contain the ``item`` field:

.. include:: /includes/driver-examples/driver-example-query-41.rst

The query only returns the document that does *not* contain the
``item`` field.

.. seealso::

   Reference documentation for the :query:`$type` and
   :query:`$exists` operators.

.. [#type0]

   .. include:: /includes/extracts/4.2-changes-type-0.rst

.. _query-null-documents-atlas-ui:

Query for Null or Missing Fields with {+atlas+}
----------------------------------------------------

The example in this section uses the :atlas:`sample training dataset 
</sample-data/sample-training/>`. To learn how to load the sample dataset 
into your {+atlas+} deployment, see :atlas:`Load Sample Data 
</sample-data/#std-label-load-sample-data>`.

To query for a ``null`` or missing field in {+atlas+}, follow these steps:

.. procedure:: 
   :style: normal

   .. include:: /includes/atlas-nav/steps-db-deployments-page.rst

   .. step:: Navigate to the collection.

      a. For the cluster that contains the sample data, click :guilabel:`Browse Collections`.
      #. In the left navigation pane, select the ``sample_training`` database.
      #. Select the ``companies`` collection.

   .. step:: Insert a blank document.

      Click the :guilabel:`Insert Document` button to display the 
      dialog box, and then click :guilabel:`Insert`
      to insert a document with only the ``_id`` field.

   .. step:: Specify a query filter document.

      To find a document that contains a ``null`` or missing value, 
      specify a :ref:`query filter document <document-query-filter>` 
      in the :guilabel:`Filter` field. A query filter document uses 
      :ref:`query operators <csfle-supported-query-operators>` 
      to specify search conditions.

      Different query operators in MongoDB treat ``null`` values differently.
      To apply a query filter, copying each of the following documents into the 
      :guilabel:`Filter` search bar and click :guilabel:`Apply`.

      Use the following query filter to match documents that either contain a
      ``description`` field with a ``null`` value or do not contain the 
      ``description`` field:

      .. code-block:: javascript

         { description : null }

      Use the following query filter to match only documents that contain 
      a ``description`` field with a ``null`` value. This filter specifies
      that the value of the field must be :ref:`BSON Type <bson-types>` ``Null`` 
      (BSON Type 10):
      
      .. code-block:: javascript

         { description : { $type: 10 } }

      Use the following query filter to match only documents that
      do not contain the ``description`` field. Only the document
      that you inserted earlier should appear:
      
      .. code-block:: javascript

         { description : { $exists: false } }
