.. _c-write-replace:

=================
Replace Documents
=================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: modify, change, code example

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to run a **replace
operation** on a MongoDB collection. A replace operation performs differently
than an update operation. An update operation modifies only the specified
fields in a target document. A replace operation removes *all* fields
in the target document and replaces them with new ones.

To replace a document, use the ``mongoc_collection_replace_one()`` function.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``restaurants`` collection in the ``sample_restaurants``
database from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
free MongoDB Atlas cluster and load the sample datasets, see the
:atlas:`Get Started with Atlas </getting-started>` guide.

Replace Operation
-----------------

You can perform a replace operation by using ``mongoc_collection_replace_one()``. 
This function removes all fields except the ``_id`` field from the first document that
matches the search criteria. It then inserts the fields and values you specify into the 
document.

Required Parameters
~~~~~~~~~~~~~~~~~~~

The ``mongoc_collection_replace_one()`` function requires the following parameters:

- Collection: Specifies the collection on which to perform the replace operation.

- Query filter document: Specifies which collection documents to match. The
  function selects the first matching document to replace. For more information
  about query filters, see the :manual:`Query Filter Documents section
  </core/document/#query-filter-documents>` in the {+mdb-server+} manual.

- Replacement document: Specifies the fields and values to insert into the new 
  document.

- Options document: Specifies options to customize the operation, or ``NULL``.

- Results location: Specifies a pointer to overwritable storage that will contain
  operation results, or ``NULL``.

- Error location: Specifies a location for an error value, or ``NULL``.

Example
~~~~~~~

The following example uses the ``mongoc_collection_replace_one()`` function to
replace the fields and values of a document in which the ``name`` field value
is ``"Pizza Town"`` with a document in which the ``name`` field value is ``"Mongo's Pizza"``:

.. literalinclude:: /includes/write/replace.c
    :language: c
    :dedent:
    :start-after: start-replace-one
    :end-before: end-replace-one

.. important::

   The values of ``_id`` fields are immutable. If your replacement document specifies 
   a value for the ``_id`` field, it must be identical to the ``_id`` value of the
   existing document.

Modify the Replace Operation
----------------------------

You can modify the behavior of the ``mongoc_collection_replace_one()`` function
by passing a BSON document that specifies option values. The following table
describes some options you can set in the document:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Option
     - Description

   * - ``upsert``
     - | Specifies whether the replace operation performs an upsert operation if no 
         documents match the query filter. For more information, see the :manual:`upsert
         statement </reference/command/update/#std-label-update-command-upsert>`
         in the {+mdb-server+} manual.
       | Defaults to ``false``.

   * - ``bypassDocumentValidation``
     - | Specifies whether the replace operation bypasses document validation. This lets you 
         replace documents that don't meet the schema validation requirements, if any 
         exist. For more information about schema validation, see :manual:`Schema
         Validation </core/schema-validation/#schema-validation>` in the MongoDB
         Server manual.
       | Defaults to ``false``.

   * - ``collation``
     - | Specifies the kind of language collation to use when comparing text.
         For more information, see :manual:`Collation </reference/collation/#std-label-collation>`
         in the {+mdb-server+} manual.

   * - ``hint``
     - | Gets or sets the index to scan for documents. 
         For more information, see the :manual:`hint statement </reference/command/update/#std-label-update-command-hint>`
         in the {+mdb-server+} manual.

   * - ``comment``
     - | Attaches a comment to the operation. For more information, see the :manual:`insert command
         fields </reference/command/insert/#command-fields>` guide in the
         {+mdb-server+} manual.

Replace Options Example
~~~~~~~~~~~~~~~~~~~~~~~

The following code uses the ``mongoc_collection_replace_one()`` function to find the first document
in which the ``name`` field has the value ``"Food Town"``, then replaces this document 
with a new document in which the ``name`` value is ``"Food World"``. Because the
``upsert`` option is set to ``true``, the driver inserts a new document if the query
filter doesn't match any existing documents:

.. literalinclude:: /includes/write/replace.c
   :start-after: start-replace-options
   :end-before: end-replace-options
   :language: c
   :dedent:

Additional Information 
----------------------

To learn more about update operations, see the :ref:`c-write-update` guide.

To learn more about creating query filters, see the :ref:`c-specify-query` guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the ``mongoc_collection_replace_one()`` function, see the
`API documentation <{+api-libmongoc+}/mongoc_collection_replace_one.html>`__.
